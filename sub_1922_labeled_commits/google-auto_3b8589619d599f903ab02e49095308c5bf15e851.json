{"application": "google-auto", "csha": "3b8589619d599f903ab02e49095308c5bf15e851", "files": [{"AutoValueProcessor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.io.PrintWriter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: java.io.StringWriter to ImportDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 20", "operations": ["INS TextElement: each property. The public methods of this class define JavaBeans-style properties to TagElement at 4", "INS TextElement:  means we can to TagElement at 7", "INS TextElement:  for a Velocity variable  to TagElement at 10", "INS TextElement: . to TagElement at 14", "INS TextElement: An instance of this class is made available to the Velocity template engine for to TagElement at 3", "INS TextElement: that are accessible from templates. For example  to TagElement at 5", "INS MethodRef to TagElement: @link at 0", "INS TextElement: write  to TagElement at 8", "INS TagElement: @code to TagElement at 13", "INS TextElement:  that is a  to TagElement at 12", "INS TextElement:  class, defined by one of its abstract methods. to TagElement at 2", "INS TypeDeclaration: class to TypeDeclaration: class at 20", "INS TagElement: @link to TagElement at 6", "INS Javadoc to TypeDeclaration: class at 0", "INS TagElement: @code to TagElement at 9", "INS TextElement:  $p.type to TagElement: @code at 0", "INS TagElement to Javadoc at 0", "INS TextElement: A property of an  to TagElement at 0", "INS TextElement:  $p to TagElement: @code at 0", "INS TagElement: @code to TagElement at 11", "INS TextElement:  Property to TagElement: @code at 0", "INS SimpleName: getType to MethodRef at 0", "INS Modifier: public to TypeDeclaration: class at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS SimpleName: s to SingleVariableDeclaration at 1", "INS Modifier: static to MethodDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: fixup to MethodDeclaration at 3", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: compressBlankLines to MethodInvocation at 0", "INS SimpleName: s to Assignment: = at 0", "INS SimpleName: s to Assignment: = at 0", "INS SimpleName: s to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: s to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: s to Assignment: = at 0", "INS SimpleName: s to ReturnStatement at 0", "INS SimpleName: removeTrailingSpace to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS MethodInvocation to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS SimpleName: length to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS WhileStatement to Block at 3", "INS SimpleName: i to PostfixExpression: -- at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Assignment: += to ExpressionStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: nl to InfixExpression: - at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS Block to WhileStatement at 1", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: start to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: s to Assignment: += at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: start to InfixExpression: < at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: i to MethodInvocation at 2", "INS Block to WhileStatement at 1", "INS SimpleName: s to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: removeTrailingSpace to MethodDeclaration at 3", "INS WhileStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 4", "INS Modifier: private to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: nl to InfixExpression: + at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS CharacterLiteral: ' ' to InfixExpression: == at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS InfixExpression: < to WhileStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS VariableDeclarationStatement to Block at 0", "INS ReturnStatement to Block at 4", "INS SimpleName: start to InfixExpression: >= at 1", "INS CharacterLiteral: '\\n' to MethodInvocation at 2", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS StringLiteral: \"\\n\" to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ReturnStatement at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS InfixExpression: && to WhileStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS PostfixExpression: -- to ExpressionStatement at 0", "INS CharacterLiteral: '\\n' to Assignment: += at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: i to InfixExpression: >= at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: start to VariableDeclarationFragment at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS InfixExpression: >= to InfixExpression: && at 0", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: < at 1"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 13", "MOV MethodDeclaration to TypeDeclaration: class at 12", "MOV SimpleName: Property to TypeDeclaration: class at 3", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 44", "MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV Modifier: static to TypeDeclaration: class at 2", "MOV MethodDeclaration to TypeDeclaration: class at 43", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV MethodDeclaration to TypeDeclaration: class at 10"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "INS Modifier: private to MethodDeclaration at 0", "operations": ["INS Modifier: private to MethodDeclaration at 0"]}, {"root": "UPDATE from public to static", "operations": ["UPD Modifier: public from public to static", "UPD Modifier: public from public to static"]}, {"root": "INS SimpleType: String to MethodDeclaration at 3", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to MethodDeclaration at 3"]}, {"root": "UPDATE from equalsThatExpression to compressBlankLines", "operations": ["UPD SimpleName: equalsThatExpression from equalsThatExpression to compressBlankLines"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: s to SingleVariableDeclaration at 1"]}, {"root": "INS Modifier: private to MethodDeclaration at 0", "operations": ["INS Modifier: private to MethodDeclaration at 0"]}, {"root": "INS SimpleType: String to MethodDeclaration at 3", "operations": ["INS SimpleType: String to MethodDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from hashCodeExpression to compressSpace", "operations": ["UPD SimpleName: hashCodeExpression from hashCodeExpression to compressSpace", "UPD SimpleName: Template from Template to compressSpace"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from owner to getOwner", "operations": ["UPD SimpleName: owner from owner to getOwner"]}, {"root": "UPDATE from type to getType", "operations": ["UPD SimpleName: type from type to getType"]}, {"root": "INS SimpleType: TypeKind to MethodDeclaration at 1", "operations": ["INS SimpleName: TypeKind to SimpleType: TypeKind at 0", "INS SimpleType: TypeKind to MethodDeclaration at 1"]}, {"root": "INS SimpleName: getKind to MethodDeclaration at 2", "operations": ["INS SimpleName: getKind to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 3"]}, {"root": "UPDATE from nullable to isNullable", "operations": ["UPD SimpleName: nullable from nullable to isNullable"]}, {"root": "UPDATE from access to getAccess", "operations": ["UPD SimpleName: access from access to getAccess"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS ExpressionStatement to Block at 11", "INS SimpleName: fixup to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: text to MethodInvocation at 1", "INS SimpleName: text to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: braces to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: parens to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2"]}, {"root": "INS ForStatement to Block at 3", "operations": ["INS NumberLiteral: 1 to InfixExpression: + at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: c to SwitchStatement at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SimpleName: i to MethodInvocation at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: j to MethodInvocation at 2", "INS SimpleName: i to InfixExpression: < at 0", "INS SwitchCase to SwitchStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: braces to InfixExpression: <= at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS SimpleName: j to PostfixExpression: ++ at 0", "INS SimpleName: c to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: j to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS Block to WhileStatement at 1", "INS SimpleName: s to MethodInvocation at 0", "INS IfStatement to SwitchStatement at 16", "INS InfixExpression: > to IfStatement at 0", "INS Block to IfStatement at 1", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: j to InfixExpression: > at 0", "INS BreakStatement to SwitchStatement at 17", "INS WhileStatement to SwitchStatement at 15", "INS SimpleName: length to MethodInvocation at 1", "INS NumberLiteral: 1 to InfixExpression: <= at 1", "INS SwitchCase to SwitchStatement at 13", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: s to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ForStatement to Block at 3", "INS VariableDeclarationStatement to SwitchStatement at 14", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: j to InfixExpression: < at 0", "INS CharacterLiteral: '\\n' to InfixExpression: == at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SwitchStatement to Block at 1", "INS InfixExpression: && to WhileStatement at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: i to InfixExpression: + at 0", "INS SimpleName: s to MethodInvocation at 0", "INS InfixExpression: + to InfixExpression: > at 1", "INS CharacterLiteral: '(' to SwitchCase at 0", "INS InfixExpression: <= to InfixExpression: && at 1", "INS CharacterLiteral: '\\n' to SwitchCase at 0", "INS SimpleName: parens to InfixExpression: == at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: sb to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: indentation to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ForStatement to Block at 2", "operations": ["INS SimpleName: c to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS InfixExpression: == to InfixExpression: && at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS SimpleName: length to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: < at 1", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: >= to IfStatement at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to SwitchStatement at 2", "INS SimpleName: charAt to MethodInvocation at 1", "INS ContinueStatement to Block at 0", "INS SimpleName: s to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS InfixExpression: < to ForStatement at 1", "INS BreakStatement to SwitchStatement at 7", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: nextC to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SwitchCase to SwitchStatement at 1", "INS CharacterLiteral: ' ' to SwitchCase at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: nextC to MethodInvocation at 2", "INS SimpleName: length to MethodInvocation at 1", "INS SwitchStatement to Block at 1", "INS SimpleName: indexOf to MethodInvocation at 1", "INS ForStatement to Block at 2", "INS ExpressionStatement to SwitchStatement at 9", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: indentation to Assignment: = at 0", "INS CharacterLiteral: '(' to InfixExpression: == at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS BooleanLiteral: false to Assignment: = at 1", "INS IfStatement to SwitchStatement at 5", "INS SwitchCase to SwitchStatement at 4", "INS MethodInvocation to InfixExpression: > at 0", "INS MethodInvocation to InfixExpression: - at 0", "INS SimpleName: indentation to PrefixExpression: ! at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: s to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to InfixExpression: >= at 0", "INS BreakStatement to SwitchStatement at 3", "INS SimpleName: indentation to Assignment: = at 0", "INS ContinueStatement to Block at 0", "INS IfStatement to SwitchStatement at 6", "INS SimpleName: c to SwitchStatement at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS StringLiteral: \" ,;)\" to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS BreakStatement to SwitchStatement at 10", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: - to MethodInvocation at 2", "INS SimpleName: i to MethodInvocation at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS CharacterLiteral: '\\n' to SwitchCase at 0", "INS SimpleName: c to MethodInvocation at 2", "INS Block to ForStatement at 3", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: > to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from Template to StringBuilder", "operations": ["UPD SimpleType: Template from Template to StringBuilder", "UPD SimpleName: Template from Template to StringBuilder", "UPD SimpleName: Template from Template to StringBuilder"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from SimpleType: StringBuilder", "operations": ["MOV SimpleName: Template to SimpleType: StringBuilder at 0"]}, {"root": "UPDATE from equalsTemplate to sb", "operations": ["UPD SimpleName: equalsTemplate from equalsTemplate to sb", "UPD SimpleName: nullable from nullable to sb", "UPD SimpleName: equalsTemplateVars from equalsTemplateVars to sb", "UPD SimpleName: FLOAT_EQUALS_TEMPLATE from FLOAT_EQUALS_TEMPLATE to sb"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: FLOAT_EQUALS_TEMPLATE to VariableDeclarationFragment at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: length to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: s to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from toText to toString", "operations": ["UPD SimpleName: toText from toText to toString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compile to MethodInvocation at 1", "MOV SimpleName: Template to MethodInvocation at 0"]}, {"root": "UPDATE from Template to s", "operations": ["UPD SimpleName: Template from Template to s", "UPD SimpleName: Template from Template to s", "UPD SimpleName: method from method to s", "UPD SimpleName: Template from Template to s", "UPD SimpleName: toString from toString to s", "UPD SimpleName: Template from Template to s", "UPD SimpleName: compile from compile to s"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Template to MethodInvocation at 0", "MOV SimpleName: compile to MethodInvocation at 1"]}, {"root": "UPDATE from compile to endsWith", "operations": ["UPD SimpleName: compile from compile to endsWith"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 10", "MOV BreakStatement to SwitchStatement at 9", "MOV SwitchCase to SwitchStatement at 4", "MOV BreakStatement to SwitchStatement at 6", "MOV ExpressionStatement to SwitchStatement at 2", "MOV SwitchCase to SwitchStatement at 7", "MOV BreakStatement to SwitchStatement at 3", "MOV ExpressionStatement to SwitchStatement at 11", "MOV BreakStatement to SwitchStatement at 12", "MOV ExpressionStatement to SwitchStatement at 8", "MOV ExpressionStatement to SwitchStatement at 5"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: c to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 8"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Template to MethodInvocation at 0", "MOV SimpleName: compile to MethodInvocation at 1"]}, {"root": "UPDATE from compile to length", "operations": ["UPD SimpleName: compile from compile to length", "UPD SimpleName: getReturnType from getReturnType to length"]}, {"root": "UPDATE from DOUBLE_EQUALS_TEMPLATE to nl", "operations": ["UPD SimpleName: DOUBLE_EQUALS_TEMPLATE from DOUBLE_EQUALS_TEMPLATE to nl"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: DOUBLE_EQUALS_TEMPLATE to VariableDeclarationFragment at 0"]}, {"root": "INS PostfixExpression: ++ to ExpressionStatement at 0", "operations": ["INS SimpleName: parens to PostfixExpression: ++ at 0", "INS PostfixExpression: ++ to ExpressionStatement at 0"]}, {"root": "INS CharacterLiteral: ')' to SwitchCase at 0", "operations": ["INS CharacterLiteral: ')' to SwitchCase at 0"]}, {"root": "INS PostfixExpression: -- to ExpressionStatement at 0", "operations": ["INS SimpleName: parens to PostfixExpression: -- at 0", "INS PostfixExpression: -- to ExpressionStatement at 0"]}, {"root": "INS CharacterLiteral: '{' to SwitchCase at 0", "operations": ["INS CharacterLiteral: '{' to SwitchCase at 0"]}, {"root": "INS PostfixExpression: ++ to ExpressionStatement at 0", "operations": ["INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: braces to PostfixExpression: ++ at 0"]}, {"root": "INS CharacterLiteral: '}' to SwitchCase at 0", "operations": ["INS CharacterLiteral: '}' to SwitchCase at 0"]}, {"root": "INS PostfixExpression: -- to ExpressionStatement at 0", "operations": ["INS PostfixExpression: -- to ExpressionStatement at 0", "INS SimpleName: braces to PostfixExpression: -- at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: method to MethodInvocation at 0", "MOV SimpleName: getReturnType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: nullable to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleType: StringWriter to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: writer to VariableDeclarationFragment at 0", "INS SimpleName: StringWriter to SimpleType: StringWriter at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: StringWriter to VariableDeclarationStatement at 0", "INS SimpleName: StringWriter to SimpleType: StringWriter at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: printWriter to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PrintWriter to VariableDeclarationStatement at 0", "INS SimpleName: PrintWriter to SimpleType: PrintWriter at 0", "INS SimpleName: writer to ClassInstanceCreation at 1", "INS SimpleName: PrintWriter to SimpleType: PrintWriter at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: PrintWriter to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS SimpleName: printWriter to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: printStackTrace to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: printWriter to MethodInvocation at 0", "INS SimpleName: flush to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: note to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writer to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS ExpressionStatement to Block at 5"]}, {"root": "UPDATE from compile to indexOf", "operations": ["UPD SimpleName: compile from compile to indexOf"]}, {"root": "INS CharacterLiteral: '\\n' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '\\n' to MethodInvocation at 2"]}, {"root": "INS SimpleName: start to MethodInvocation at 3", "operations": ["INS SimpleName: start to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toString to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: compile to MethodInvocation at 1", "MOV SimpleName: Template to MethodInvocation at 0", "MOV InfixExpression: + to MethodInvocation at 3"]}, {"root": "UPDATE from compile to substring", "operations": ["UPD SimpleName: compile from compile to substring"]}, {"root": "INS SimpleName: i to InfixExpression: + at 0", "operations": ["INS SimpleName: i to InfixExpression: + at 0"]}, {"root": "INS NumberLiteral: 1 to InfixExpression: + at 1", "operations": ["INS NumberLiteral: 1 to InfixExpression: + at 1"]}, {"root": "INS SimpleName: i to Assignment: = at 0", "operations": ["INS SimpleName: i to Assignment: = at 0"]}, {"root": "INS InfixExpression: - to Assignment: = at 1", "operations": ["INS InfixExpression: - to Assignment: = at 1", "INS SimpleName: j to InfixExpression: - at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"\\n\" to MethodInvocation at 2", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL QualifiedName: TypeKind.ARRAY", "DEL InfixExpression: =="]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleName: primitive", "operations": ["DEL SimpleName: primitive"]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL SimpleName: isPrimitive", "DEL SimpleName: getKind", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getReturnType", "DEL MethodInvocation", "DEL SimpleName: method", "DEL Block"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: static", "DEL StringLiteral: \"Float.floatToIntBits(this.$[p]) == Float.floatToIntBits(that.$[p]())\"", "DEL PrimitiveType: boolean", "DEL SimpleName: array", "DEL Modifier: final", "DEL StringLiteral: \"$[javaUtilArraysSpelling].equals(this.$[p], \"", "DEL Modifier: private", "DEL MethodInvocation", "DEL Modifier: static", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Modifier: static", "DEL FieldDeclaration", "DEL Modifier: final", "DEL Modifier: static", "DEL Modifier: private", "DEL SimpleType: Template", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL StringLiteral: \"(that instanceof $[subclass]) ? (($[subclass]) that).$[p] : that.$[p]())\"", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL InfixExpression: +", "DEL SimpleName: Template", "DEL SimpleType: Template", "DEL SimpleType: Template", "DEL Modifier: final", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"this.$[p] == that.$[p]()\"", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleName: ARRAY_EQUALS_TEMPLATE", "DEL SimpleName: Template", "DEL SimpleName: Template", "DEL VariableDeclarationFragment", "DEL SimpleType: Template", "DEL SimpleName: PRIMITIVE_EQUALS_TEMPLATE", "DEL SimpleName: OBJECT_EQUALS_TEMPLATE", "DEL Modifier: static", "DEL Modifier: public", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: Template", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL Modifier: final", "DEL SimpleType: Template", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL StringLiteral: \"Double.doubleToLongBits(this.$[p]) == Double.doubleToLongBits(that.$[p]())\"", "operations": ["DEL StringLiteral: \"Double.doubleToLongBits(this.$[p]) == Double.doubleToLongBits(that.$[p]())\""]}, {"root": "DEL StringLiteral: \"$[p.nullable?\"", "operations": ["DEL StringLiteral: \"$[p.nullable?\""]}, {"root": "DEL StringLiteral: \"(this.$[p] == null) ? (that.$[p]() == null) : ]\"", "operations": ["DEL StringLiteral: \"(this.$[p] == null) ? (that.$[p]() == null) : ]\""]}, {"root": "DEL StringLiteral: \"this.$[p].equals(that.$[p]())\"", "operations": ["DEL StringLiteral: \"this.$[p].equals(that.$[p]())\""]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement: .", "DEL TextElement: A string representing an expression that compares this property with the same property", "DEL TextElement: in another variable called \"that\" whose type is the class marked ", "DEL TagElement"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: equalsTemplate", "DEL Assignment: =", "DEL SimpleName: FLOAT_EQUALS_TEMPLATE"]}, {"root": "DEL SimpleName: DOUBLE", "operations": ["DEL SimpleName: DOUBLE"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: DOUBLE_EQUALS_TEMPLATE", "DEL Assignment: =", "DEL SimpleName: equalsTemplate"]}, {"root": "DEL SimpleName: ARRAY", "operations": ["DEL SimpleName: ARRAY"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: ARRAY_EQUALS_TEMPLATE", "DEL Assignment: =", "DEL SimpleName: equalsTemplate"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: equalsTemplate", "DEL SimpleName: OBJECT_EQUALS_TEMPLATE"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL QualifiedName: equalsTemplateVars.javaUtilArraysSpelling", "DEL QualifiedName: vars.javaUtilArraysSpelling"]}, {"root": "DEL QualifiedName: equalsTemplateVars.subclass", "operations": ["DEL QualifiedName: equalsTemplateVars.subclass"]}, {"root": "DEL QualifiedName: vars.subclass", "operations": ["DEL QualifiedName: vars.subclass"]}, {"root": "DEL Assignment: =", "operations": ["DEL QualifiedName: equalsTemplateVars.p", "DEL Assignment: =", "DEL ThisExpression"]}, {"root": "DEL SwitchStatement", "operations": ["DEL SwitchCase", "DEL SwitchStatement", "DEL SimpleName: BYTE", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SwitchCase", "DEL SimpleName: INT", "DEL SimpleName: getReturnType", "DEL SimpleName: method", "DEL SimpleName: BOOLEAN", "DEL SimpleName: getKind", "DEL SwitchCase", "DEL SimpleName: LONG", "DEL SimpleName: FLOAT", "DEL SimpleName: PRIMITIVE_EQUALS_TEMPLATE", "DEL SwitchCase", "DEL SimpleName: equalsTemplate", "DEL BreakStatement", "DEL SwitchCase", "DEL SwitchCase", "DEL SimpleName: SHORT", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: CHAR"]}, {"root": "DEL TypeDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL TypeDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: Property", "DEL SimpleType: Template", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: TemplateVars", "DEL SimpleName: Template", "DEL FieldDeclaration", "DEL SimpleType: TemplateVars", "DEL SimpleName: template", "DEL SimpleName: subclass", "DEL SimpleName: EqualsTemplateVars", "DEL SimpleName: equalsTemplate", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL SimpleType: Property", "DEL SimpleName: javaUtilArraysSpelling", "DEL SimpleName: p"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: EqualsTemplateVars", "DEL SimpleType: EqualsTemplateVars", "DEL SimpleName: EqualsTemplateVars", "DEL SimpleName: equalsTemplateVars", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleType: EqualsTemplateVars"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: A string representing an expression that is the hashCode of this property.", "DEL TagElement", "DEL Javadoc"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL ThisExpression", "DEL StringLiteral: \".hashCode()\"", "DEL StringLiteral: \"(\"", "DEL StringLiteral: \" == null) ? 0 : \"", "DEL InfixExpression: +", "DEL ThisExpression"]}, {"root": "DEL SwitchStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: INT", "DEL StringLiteral: \") >>> 32) ^ \"", "DEL ThisExpression", "DEL InfixExpression: +", "DEL ThisExpression", "DEL MethodInvocation", "DEL ThisExpression", "DEL SwitchCase", "DEL StringLiteral: \" >>> 32) ^ \"", "DEL StringLiteral: \")\"", "DEL StringLiteral: \")\"", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL Block", "DEL SwitchCase", "DEL SwitchCase", "DEL StringLiteral: \")\"", "DEL ReturnStatement", "DEL SwitchCase", "DEL ReturnStatement", "DEL SimpleName: SHORT", "DEL SwitchCase", "DEL StringLiteral: \".hashCode()\"", "DEL SwitchCase", "DEL InfixExpression: +", "DEL SimpleName: LONG", "DEL InfixExpression: +", "DEL ThisExpression", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SwitchStatement", "DEL SwitchCase", "DEL StringLiteral: \"(\"", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: FLOAT", "DEL StringLiteral: \"Double.doubleToLongBits(\"", "DEL InfixExpression: +", "DEL ThisExpression", "DEL StringLiteral: \"Float.floatToIntBits(\"", "DEL SwitchCase", "DEL ThisExpression", "DEL ThisExpression", "DEL StringLiteral: \".hashCode(\"", "DEL SwitchCase", "DEL SimpleName: DOUBLE", "DEL SimpleName: BOOLEAN", "DEL Block", "DEL ThisExpression", "DEL SimpleName: getKind", "DEL StringLiteral: \"(Double.doubleToLongBits(\"", "DEL ReturnStatement", "DEL SimpleName: BYTE", "DEL QualifiedName: vars.javaUtilArraysSpelling", "DEL StringLiteral: \" ? 1231 : 1237\"", "DEL ThisExpression", "DEL SimpleName: CHAR", "DEL SimpleName: ARRAY"]}]}}, {"AutoValueProcessor_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(2603) at 4", "Insert ImportDeclaration(13) into CompilationUnit(2603) at 6", "Insert QualifiedName: java.io.PrintWriter(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: java.io.StringWriter(12) into ImportDeclaration(13) at 0", "Insert TypeDeclaration: class(771) into TypeDeclaration: class(2602) at 20", "Insert MethodDeclaration(2240) into TypeDeclaration: class(2602) at 40", "Insert MethodDeclaration(2340) into TypeDeclaration: class(2602) at 41", "Move MethodDeclaration(875) into TypeDeclaration: class(2602) at 43", "Move MethodDeclaration(958) into TypeDeclaration: class(2602) at 44", "Insert Javadoc(593) into TypeDeclaration: class(771) at 0", "Insert Modifier: public(594) into TypeDeclaration: class(771) at 1", "Move Modifier: static(535) into TypeDeclaration: class(771) at 2", "Move SimpleName: Property(536) into TypeDeclaration: class(771) at 3", "Move FieldDeclaration(543) into TypeDeclaration: class(771) at 4", "Move FieldDeclaration(550) into TypeDeclaration: class(771) at 5", "Move FieldDeclaration(557) into TypeDeclaration: class(771) at 6", "Move MethodDeclaration(590) into TypeDeclaration: class(771) at 7", "Move MethodDeclaration(604) into TypeDeclaration: class(771) at 8", "Move MethodDeclaration(616) into TypeDeclaration: class(771) at 9", "Move MethodDeclaration(624) into TypeDeclaration: class(771) at 10", "Move MethodDeclaration(637) into TypeDeclaration: class(771) at 11", "Move MethodDeclaration(688) into TypeDeclaration: class(771) at 12", "Move MethodDeclaration(994) into TypeDeclaration: class(771) at 13", "Insert Modifier: private(2210) into MethodDeclaration(2240) at 0", "Insert Modifier: static(2211) into MethodDeclaration(2240) at 1", "Move SimpleType: String(881) into MethodDeclaration(2240) at 2", "Insert SimpleName: fixup(2214) into MethodDeclaration(2240) at 3", "Insert SingleVariableDeclaration(2218) into MethodDeclaration(2240) at 4", "Insert Block(2239) into MethodDeclaration(2240) at 5", "Insert Modifier: private(2241) into MethodDeclaration(2340) at 0", "Insert Modifier: static(2242) into MethodDeclaration(2340) at 1", "Move SimpleType: String(763) into MethodDeclaration(2340) at 2", "Insert SimpleName: removeTrailingSpace(2245) into MethodDeclaration(2340) at 3", "Insert SingleVariableDeclaration(2249) into MethodDeclaration(2340) at 4", "Insert Block(2339) into MethodDeclaration(2340) at 5", "Insert Modifier: private(2341) into MethodDeclaration(2483) at 0", "Update Modifier: public(761) to static", "Insert SimpleType: String(2344) into MethodDeclaration(2483) at 2", "Update SimpleName: equalsThatExpression(764) to compressBlankLines", "Insert SingleVariableDeclaration(2349) into MethodDeclaration(2483) at 4", "Insert Modifier: private(2484) into MethodDeclaration(2601) at 0", "Update Modifier: public(879) to static", "Insert SimpleType: String(2487) into MethodDeclaration(2601) at 2", "Update SimpleName: hashCodeExpression(882) to compressSpace", "Insert SingleVariableDeclaration(2492) into MethodDeclaration(2601) at 4", "Insert TagElement(592) into Javadoc(593) at 0", "Update SimpleName: owner(607) to getOwner", "Update SimpleName: type(620) to getType", "Insert SimpleType: TypeKind(687) into MethodDeclaration(696) at 1", "Insert SimpleName: getKind(688) into MethodDeclaration(696) at 2", "Move Block(649) into MethodDeclaration(696) at 3", "Update SimpleName: nullable(653) to isNullable", "Update SimpleName: access(962) to getAccess", "Insert ExpressionStatement(1177) into Block(1186) at 11", "Move SimpleType: String(830) into SingleVariableDeclaration(2218) at 0", "Insert SimpleName: s(2217) into SingleVariableDeclaration(2218) at 1", "Insert ExpressionStatement(2224) into Block(2239) at 0", "Insert ExpressionStatement(2230) into Block(2239) at 1", "Insert ExpressionStatement(2236) into Block(2239) at 2", "Insert ReturnStatement(2238) into Block(2239) at 3", "Move SimpleType: String(825) into SingleVariableDeclaration(2249) at 0", "Insert SimpleName: s(2248) into SingleVariableDeclaration(2249) at 1", "Insert IfStatement(2260) into Block(2339) at 0", "Insert VariableDeclarationStatement(2271) into Block(2339) at 1", "Insert VariableDeclarationStatement(2276) into Block(2339) at 2", "Insert WhileStatement(2334) into Block(2339) at 3", "Insert ReturnStatement(2338) into Block(2339) at 4", "Insert SimpleName: String(2343) into SimpleType: String(2344) at 0", "Insert SimpleType: String(2347) into SingleVariableDeclaration(2349) at 0", "Insert SimpleName: s(2348) into SingleVariableDeclaration(2349) at 1", "Insert VariableDeclarationStatement(2365) into Block(2482) at 1", "Insert VariableDeclarationStatement(2370) into Block(2482) at 2", "Insert ForStatement(2477) into Block(2482) at 3", "Insert SimpleName: String(2486) into SimpleType: String(2487) at 0", "Insert SimpleType: String(2490) into SingleVariableDeclaration(2492) at 0", "Insert SimpleName: s(2491) into SingleVariableDeclaration(2492) at 1", "Insert VariableDeclarationStatement(2503) into Block(2600) at 0", "Insert VariableDeclarationStatement(2508) into Block(2600) at 1", "Insert ForStatement(2595) into Block(2600) at 2", "Move ReturnStatement(948) into Block(2600) at 3", "Insert TextElement: A property of an (571) into TagElement(592) at 0", "Move TagElement: @code(757) into TagElement(592) at 1", "Insert TextElement:  class, defined by one of its abstract methods.(574) into TagElement(592) at 2", "Insert TextElement: An instance of this class is made available to the Velocity template engine for(575) into TagElement(592) at 3", "Insert TextElement: each property. The public methods of this class define JavaBeans-style properties(576) into TagElement(592) at 4", "Insert TextElement: that are accessible from templates. For example (577) into TagElement(592) at 5", "Insert TagElement: @link(580) into TagElement(592) at 6", "Insert TextElement:  means we can(581) into TagElement(592) at 7", "Insert TextElement: write (582) into TagElement(592) at 8", "Insert TagElement: @code(584) into TagElement(592) at 9", "Insert TextElement:  for a Velocity variable (585) into TagElement(592) at 10", "Insert TagElement: @code(587) into TagElement(592) at 11", "Insert TextElement:  that is a (588) into TagElement(592) at 12", "Insert TagElement: @code(590) into TagElement(592) at 13", "Insert TextElement: .(591) into TagElement(592) at 14", "Insert SimpleName: TypeKind(686) into SimpleType: TypeKind(687) at 0", "Insert Assignment: =(1176) into ExpressionStatement(1177) at 0", "Insert Assignment: =(2223) into ExpressionStatement(2224) at 0", "Insert Assignment: =(2229) into ExpressionStatement(2230) at 0", "Insert Assignment: =(2235) into ExpressionStatement(2236) at 0", "Insert SimpleName: s(2237) into ReturnStatement(2238) at 0", "Insert PrefixExpression: !(2254) into IfStatement(2260) at 0", "Insert Block(2259) into IfStatement(2260) at 1", "Insert SimpleType: StringBuilder(2262) into VariableDeclarationStatement(2271) at 0", "Insert VariableDeclarationFragment(2270) into VariableDeclarationStatement(2271) at 1", "Insert PrimitiveType: int(2272) into VariableDeclarationStatement(2276) at 0", "Insert VariableDeclarationFragment(2275) into VariableDeclarationStatement(2276) at 1", "Insert InfixExpression: <(2281) into WhileStatement(2334) at 0", "Insert Block(2333) into WhileStatement(2334) at 1", "Insert MethodInvocation(2337) into ReturnStatement(2338) at 0", "Insert SimpleName: String(2346) into SimpleType: String(2347) at 0", "Update SimpleType: Template(767) to StringBuilder", "Insert PrimitiveType: int(2361) into VariableDeclarationStatement(2365) at 0", "Insert VariableDeclarationFragment(2364) into VariableDeclarationStatement(2365) at 1", "Insert PrimitiveType: int(2366) into VariableDeclarationStatement(2370) at 0", "Insert VariableDeclarationFragment(2369) into VariableDeclarationStatement(2370) at 1", "Insert VariableDeclarationExpression(2375) into ForStatement(2477) at 0", "Insert InfixExpression: <(2380) into ForStatement(2477) at 1", "Insert PostfixExpression: ++(2382) into ForStatement(2477) at 2", "Insert Block(2476) into ForStatement(2477) at 3", "Insert SimpleName: String(2489) into SimpleType: String(2490) at 0", "Insert SimpleType: StringBuilder(2494) into VariableDeclarationStatement(2503) at 0", "Insert VariableDeclarationFragment(2502) into VariableDeclarationStatement(2503) at 1", "Insert PrimitiveType: boolean(2504) into VariableDeclarationStatement(2508) at 0", "Insert VariableDeclarationFragment(2507) into VariableDeclarationStatement(2508) at 1", "Insert VariableDeclarationExpression(2513) into ForStatement(2595) at 0", "Insert InfixExpression: <(2518) into ForStatement(2595) at 1", "Insert PostfixExpression: ++(2520) into ForStatement(2595) at 2", "Insert Block(2594) into ForStatement(2595) at 3", "Insert MethodInvocation(2598) into ReturnStatement(2599) at 0", "Insert MethodRef(579) into TagElement: @link(580) at 0", "Insert TextElement:  $p.type(583) into TagElement: @code(584) at 0", "Insert TextElement:  $p(586) into TagElement: @code(587) at 0", "Insert TextElement:  Property(589) into TagElement: @code(590) at 0", "Move MethodInvocation(645) into ReturnStatement(694) at 0", "Insert SimpleName: text(1172) into Assignment: =(1176) at 0", "Insert MethodInvocation(1175) into Assignment: =(1176) at 1", "Insert SimpleName: s(2219) into Assignment: =(2223) at 0", "Insert MethodInvocation(2222) into Assignment: =(2223) at 1", "Insert SimpleName: s(2225) into Assignment: =(2229) at 0", "Insert MethodInvocation(2228) into Assignment: =(2229) at 1", "Insert SimpleName: s(2231) into Assignment: =(2235) at 0", "Insert MethodInvocation(2234) into Assignment: =(2235) at 1", "Insert MethodInvocation(2253) into PrefixExpression: !(2254) at 0", "Insert ExpressionStatement(2258) into Block(2259) at 0", "Update SimpleName: Template(718) to StringBuilder", "Move SimpleName: Template(718) into SimpleType: StringBuilder(2262) at 0", "Update SimpleName: FLOAT_EQUALS_TEMPLATE(720) to sb", "Move SimpleName: FLOAT_EQUALS_TEMPLATE(720) into VariableDeclarationFragment(2270) at 0", "Insert ClassInstanceCreation(2269) into VariableDeclarationFragment(2270) at 1", "Insert SimpleName: start(2273) into VariableDeclarationFragment(2275) at 0", "Insert NumberLiteral: 0(2274) into VariableDeclarationFragment(2275) at 1", "Insert SimpleName: start(2277) into InfixExpression: <(2281) at 0", "Insert MethodInvocation(2280) into InfixExpression: <(2281) at 1", "Insert VariableDeclarationStatement(2290) into Block(2333) at 0", "Insert VariableDeclarationStatement(2297) into Block(2333) at 1", "Insert WhileStatement(2312) into Block(2333) at 2", "Insert ExpressionStatement(2326) into Block(2333) at 3", "Insert ExpressionStatement(2332) into Block(2333) at 4", "Insert SimpleName: sb(2335) into MethodInvocation(2337) at 0", "Insert SimpleName: toString(2336) into MethodInvocation(2337) at 1", "Update SimpleName: Template(766) to StringBuilder", "Update SimpleName: equalsTemplate(768) to sb", "Insert ClassInstanceCreation(2358) into VariableDeclarationFragment(2359) at 1", "Insert SimpleName: braces(2362) into VariableDeclarationFragment(2364) at 0", "Insert NumberLiteral: 0(2363) into VariableDeclarationFragment(2364) at 1", "Insert SimpleName: parens(2367) into VariableDeclarationFragment(2369) at 0", "Insert NumberLiteral: 0(2368) into VariableDeclarationFragment(2369) at 1", "Insert PrimitiveType: int(2371) into VariableDeclarationExpression(2375) at 0", "Insert VariableDeclarationFragment(2374) into VariableDeclarationExpression(2375) at 1", "Insert SimpleName: i(2376) into InfixExpression: <(2380) at 0", "Insert MethodInvocation(2379) into InfixExpression: <(2380) at 1", "Insert SimpleName: i(2381) into PostfixExpression: ++(2382) at 0", "Insert VariableDeclarationStatement(2390) into Block(2476) at 0", "Insert SwitchStatement(2470) into Block(2476) at 1", "Move ExpressionStatement(869) into Block(2476) at 2", "Update SimpleName: equalsTemplateVars(870) to sb", "Update SimpleName: toText(871) to toString", "Insert SimpleName: StringBuilder(2493) into SimpleType: StringBuilder(2494) at 0", "Insert SimpleName: sb(2495) into VariableDeclarationFragment(2502) at 0", "Insert ClassInstanceCreation(2501) into VariableDeclarationFragment(2502) at 1", "Insert SimpleName: indentation(2505) into VariableDeclarationFragment(2507) at 0", "Insert BooleanLiteral: true(2506) into VariableDeclarationFragment(2507) at 1", "Insert PrimitiveType: int(2509) into VariableDeclarationExpression(2513) at 0", "Insert VariableDeclarationFragment(2512) into VariableDeclarationExpression(2513) at 1", "Insert SimpleName: i(2514) into InfixExpression: <(2518) at 0", "Insert MethodInvocation(2517) into InfixExpression: <(2518) at 1", "Insert SimpleName: i(2519) into PostfixExpression: ++(2520) at 0", "Insert VariableDeclarationStatement(2528) into Block(2594) at 0", "Insert SwitchStatement(2588) into Block(2594) at 1", "Insert ExpressionStatement(2593) into Block(2594) at 2", "Insert SimpleName: sb(2596) into MethodInvocation(2598) at 0", "Insert SimpleName: toString(2597) into MethodInvocation(2598) at 1", "Insert SimpleName: getType(578) into MethodRef(579) at 0", "Insert SimpleName: fixup(1173) into MethodInvocation(1175) at 0", "Insert SimpleName: text(1174) into MethodInvocation(1175) at 1", "Insert SimpleName: removeTrailingSpace(2220) into MethodInvocation(2222) at 0", "Insert SimpleName: s(2221) into MethodInvocation(2222) at 1", "Insert SimpleName: compressBlankLines(2226) into MethodInvocation(2228) at 0", "Insert SimpleName: s(2227) into MethodInvocation(2228) at 1", "Update SimpleName: Template(695) to compressSpace", "Move SimpleName: Template(695) into MethodInvocation(2234) at 0", "Update SimpleName: compile(696) to s", "Move SimpleName: compile(696) into MethodInvocation(2234) at 1", "Update SimpleName: Template(707) to s", "Move SimpleName: Template(707) into MethodInvocation(2253) at 0", "Update SimpleName: compile(708) to endsWith", "Move SimpleName: compile(708) into MethodInvocation(2253) at 1", "Insert StringLiteral: \"\\n\"(2252) into MethodInvocation(2253) at 2", "Insert Assignment: +=(2257) into ExpressionStatement(2258) at 0", "Insert SimpleType: StringBuilder(2265) into ClassInstanceCreation(2269) at 0", "Insert MethodInvocation(2268) into ClassInstanceCreation(2269) at 1", "Insert SimpleName: s(2278) into MethodInvocation(2280) at 0", "Insert SimpleName: length(2279) into MethodInvocation(2280) at 1", "Insert PrimitiveType: int(2282) into VariableDeclarationStatement(2290) at 0", "Insert VariableDeclarationFragment(2289) into VariableDeclarationStatement(2290) at 1", "Insert PrimitiveType: int(2291) into VariableDeclarationStatement(2297) at 0", "Insert VariableDeclarationFragment(2296) into VariableDeclarationStatement(2297) at 1", "Insert InfixExpression: &&(2307) into WhileStatement(2312) at 0", "Insert Block(2311) into WhileStatement(2312) at 1", "Insert MethodInvocation(2325) into ExpressionStatement(2326) at 0", "Insert Assignment: =(2331) into ExpressionStatement(2332) at 0", "Insert SimpleType: StringBuilder(2354) into ClassInstanceCreation(2358) at 0", "Insert MethodInvocation(2357) into ClassInstanceCreation(2358) at 1", "Insert SimpleName: i(2372) into VariableDeclarationFragment(2374) at 0", "Insert NumberLiteral: 0(2373) into VariableDeclarationFragment(2374) at 1", "Insert SimpleName: s(2377) into MethodInvocation(2379) at 0", "Insert SimpleName: length(2378) into MethodInvocation(2379) at 1", "Insert PrimitiveType: char(2383) into VariableDeclarationStatement(2390) at 0", "Insert VariableDeclarationFragment(2389) into VariableDeclarationStatement(2390) at 1", "Insert SimpleName: c(2391) into SwitchStatement(2470) at 0", "Insert SwitchCase(2393) into SwitchStatement(2470) at 1", "Move ExpressionStatement(798) into SwitchStatement(2470) at 2", "Move BreakStatement(799) into SwitchStatement(2470) at 3", "Move SwitchCase(801) into SwitchStatement(2470) at 4", "Move ExpressionStatement(805) into SwitchStatement(2470) at 5", "Move BreakStatement(806) into SwitchStatement(2470) at 6", "Move SwitchCase(808) into SwitchStatement(2470) at 7", "Move ExpressionStatement(812) into SwitchStatement(2470) at 8", "Move BreakStatement(813) into SwitchStatement(2470) at 9", "Move SwitchCase(814) into SwitchStatement(2470) at 10", "Move ExpressionStatement(818) into SwitchStatement(2470) at 11", "Move BreakStatement(819) into SwitchStatement(2470) at 12", "Insert SwitchCase(2417) into SwitchStatement(2470) at 13", "Insert VariableDeclarationStatement(2424) into SwitchStatement(2470) at 14", "Insert WhileStatement(2441) into SwitchStatement(2470) at 15", "Insert IfStatement(2468) into SwitchStatement(2470) at 16", "Insert BreakStatement(2469) into SwitchStatement(2470) at 17", "Insert MethodInvocation(2474) into ExpressionStatement(2475) at 0", "Insert SimpleType: StringBuilder(2497) into ClassInstanceCreation(2501) at 0", "Insert MethodInvocation(2500) into ClassInstanceCreation(2501) at 1", "Insert SimpleName: i(2510) into VariableDeclarationFragment(2512) at 0", "Insert NumberLiteral: 0(2511) into VariableDeclarationFragment(2512) at 1", "Insert SimpleName: s(2515) into MethodInvocation(2517) at 0", "Insert SimpleName: length(2516) into MethodInvocation(2517) at 1", "Insert PrimitiveType: char(2521) into VariableDeclarationStatement(2528) at 0", "Insert VariableDeclarationFragment(2527) into VariableDeclarationStatement(2528) at 1", "Insert SimpleName: c(2529) into SwitchStatement(2588) at 0", "Insert SwitchCase(2531) into SwitchStatement(2588) at 1", "Insert ExpressionStatement(2535) into SwitchStatement(2588) at 2", "Insert BreakStatement(2536) into SwitchStatement(2588) at 3", "Insert SwitchCase(2538) into SwitchStatement(2588) at 4", "Insert IfStatement(2557) into SwitchStatement(2588) at 5", "Insert IfStatement(2580) into SwitchStatement(2588) at 6", "Insert BreakStatement(2581) into SwitchStatement(2588) at 7", "Move SwitchCase(939) into SwitchStatement(2588) at 8", "Insert ExpressionStatement(2586) into SwitchStatement(2588) at 9", "Insert BreakStatement(2587) into SwitchStatement(2588) at 10", "Insert MethodInvocation(2592) into ExpressionStatement(2593) at 0", "Insert SimpleName: s(2255) into Assignment: +=(2257) at 0", "Insert CharacterLiteral: '\\n'(2256) into Assignment: +=(2257) at 1", "Insert SimpleName: StringBuilder(2264) into SimpleType: StringBuilder(2265) at 0", "Update SimpleName: Template(721) to s", "Move SimpleName: Template(721) into MethodInvocation(2268) at 0", "Update SimpleName: compile(722) to length", "Move SimpleName: compile(722) into MethodInvocation(2268) at 1", "Update SimpleName: DOUBLE_EQUALS_TEMPLATE(732) to nl", "Move SimpleName: DOUBLE_EQUALS_TEMPLATE(732) into VariableDeclarationFragment(2289) at 0", "Move MethodInvocation(736) into VariableDeclarationFragment(2289) at 1", "Insert SimpleName: i(2292) into VariableDeclarationFragment(2296) at 0", "Insert InfixExpression: -(2295) into VariableDeclarationFragment(2296) at 1", "Insert InfixExpression: >=(2300) into InfixExpression: &&(2307) at 0", "Insert InfixExpression: ==(2306) into InfixExpression: &&(2307) at 1", "Insert ExpressionStatement(2310) into Block(2311) at 0", "Insert MethodInvocation(2322) into MethodInvocation(2325) at 0", "Insert SimpleName: append(2323) into MethodInvocation(2325) at 1", "Insert CharacterLiteral: '\\n'(2324) into MethodInvocation(2325) at 2", "Insert SimpleName: start(2327) into Assignment: =(2331) at 0", "Insert InfixExpression: +(2330) into Assignment: =(2331) at 1", "Insert SimpleName: StringBuilder(2353) into SimpleType: StringBuilder(2354) at 0", "Insert SimpleName: s(2355) into MethodInvocation(2357) at 0", "Insert SimpleName: length(2356) into MethodInvocation(2357) at 1", "Insert SimpleName: c(2384) into VariableDeclarationFragment(2389) at 0", "Insert MethodInvocation(2388) into VariableDeclarationFragment(2389) at 1", "Insert CharacterLiteral: '('(2392) into SwitchCase(2393) at 0", "Insert PostfixExpression: ++(2395) into ExpressionStatement(2396) at 0", "Insert CharacterLiteral: ')'(2398) into SwitchCase(2399) at 0", "Insert PostfixExpression: --(2401) into ExpressionStatement(2402) at 0", "Insert CharacterLiteral: '{'(2404) into SwitchCase(2405) at 0", "Insert PostfixExpression: ++(2407) into ExpressionStatement(2408) at 0", "Insert CharacterLiteral: '}'(2410) into SwitchCase(2411) at 0", "Insert PostfixExpression: --(2413) into ExpressionStatement(2414) at 0", "Insert CharacterLiteral: '\\n'(2416) into SwitchCase(2417) at 0", "Insert PrimitiveType: int(2418) into VariableDeclarationStatement(2424) at 0", "Insert VariableDeclarationFragment(2423) into VariableDeclarationStatement(2424) at 1", "Insert InfixExpression: &&(2436) into WhileStatement(2441) at 0", "Insert Block(2440) into WhileStatement(2441) at 1", "Insert InfixExpression: >(2446) into IfStatement(2468) at 0", "Insert Block(2467) into IfStatement(2468) at 1", "Insert SimpleName: sb(2471) into MethodInvocation(2474) at 0", "Insert SimpleName: append(2472) into MethodInvocation(2474) at 1", "Insert SimpleName: c(2473) into MethodInvocation(2474) at 2", "Insert SimpleName: StringBuilder(2496) into SimpleType: StringBuilder(2497) at 0", "Update SimpleName: method(883) to s", "Move SimpleName: method(883) into MethodInvocation(2500) at 0", "Update SimpleName: getReturnType(884) to length", "Move SimpleName: getReturnType(884) into MethodInvocation(2500) at 1", "Insert SimpleName: c(2522) into VariableDeclarationFragment(2527) at 0", "Insert MethodInvocation(2526) into VariableDeclarationFragment(2527) at 1", "Insert CharacterLiteral: '\\n'(2530) into SwitchCase(2531) at 0", "Insert Assignment: =(2534) into ExpressionStatement(2535) at 0", "Insert CharacterLiteral: ' '(2537) into SwitchCase(2538) at 0", "Insert InfixExpression: &&(2554) into IfStatement(2557) at 0", "Insert Block(2556) into IfStatement(2557) at 1", "Insert PrefixExpression: !(2559) into IfStatement(2580) at 0", "Insert Block(2579) into IfStatement(2580) at 1", "Insert Assignment: =(2585) into ExpressionStatement(2586) at 0", "Update SimpleName: nullable(940) to sb", "Move SimpleName: nullable(940) into MethodInvocation(2592) at 0", "Insert SimpleName: append(2590) into MethodInvocation(2592) at 1", "Insert SimpleName: c(2591) into MethodInvocation(2592) at 2", "Insert VariableDeclarationStatement(370) into Block(395) at 1", "Insert VariableDeclarationStatement(379) into Block(395) at 2", "Insert ExpressionStatement(384) into Block(395) at 3", "Insert ExpressionStatement(388) into Block(395) at 4", "Insert ExpressionStatement(394) into Block(395) at 5", "Update SimpleName: Template(733) to s", "Update SimpleName: compile(734) to indexOf", "Insert CharacterLiteral: '\\n'(2286) into MethodInvocation(2288) at 2", "Insert SimpleName: start(2287) into MethodInvocation(2288) at 3", "Insert SimpleName: nl(2293) into InfixExpression: -(2295) at 0", "Insert NumberLiteral: 1(2294) into InfixExpression: -(2295) at 1", "Insert SimpleName: i(2298) into InfixExpression: >=(2300) at 0", "Insert SimpleName: start(2299) into InfixExpression: >=(2300) at 1", "Insert MethodInvocation(2304) into InfixExpression: ==(2306) at 0", "Insert CharacterLiteral: ' '(2305) into InfixExpression: ==(2306) at 1", "Insert PostfixExpression: --(2309) into ExpressionStatement(2310) at 0", "Insert SimpleName: sb(2313) into MethodInvocation(2322) at 0", "Insert SimpleName: append(2314) into MethodInvocation(2322) at 1", "Insert MethodInvocation(2321) into MethodInvocation(2322) at 2", "Insert SimpleName: nl(2328) into InfixExpression: +(2330) at 0", "Insert NumberLiteral: 1(2329) into InfixExpression: +(2330) at 1", "Insert SimpleName: s(2385) into MethodInvocation(2388) at 0", "Insert SimpleName: charAt(2386) into MethodInvocation(2388) at 1", "Insert SimpleName: i(2387) into MethodInvocation(2388) at 2", "Insert SimpleName: parens(2394) into PostfixExpression: ++(2395) at 0", "Insert SimpleName: parens(2400) into PostfixExpression: --(2401) at 0", "Insert SimpleName: braces(2406) into PostfixExpression: ++(2407) at 0", "Insert SimpleName: braces(2412) into PostfixExpression: --(2413) at 0", "Insert SimpleName: j(2419) into VariableDeclarationFragment(2423) at 0", "Insert InfixExpression: +(2422) into VariableDeclarationFragment(2423) at 1", "Insert InfixExpression: <(2429) into InfixExpression: &&(2436) at 0", "Insert InfixExpression: ==(2435) into InfixExpression: &&(2436) at 1", "Insert ExpressionStatement(2439) into Block(2440) at 0", "Insert SimpleName: j(2442) into InfixExpression: >(2446) at 0", "Insert InfixExpression: +(2445) into InfixExpression: >(2446) at 1", "Insert IfStatement(2460) into Block(2467) at 0", "Move ExpressionStatement(865) into Block(2467) at 1", "Update SimpleName: toString(897) to s", "Move SimpleName: toString(897) into MethodInvocation(2526) at 0", "Insert SimpleName: charAt(2524) into MethodInvocation(2526) at 1", "Insert SimpleName: i(2525) into MethodInvocation(2526) at 2", "Insert SimpleName: indentation(2532) into Assignment: =(2534) at 0", "Insert BooleanLiteral: true(2533) into Assignment: =(2534) at 1", "Insert InfixExpression: >(2543) into InfixExpression: &&(2554) at 0", "Insert InfixExpression: ==(2553) into InfixExpression: &&(2554) at 1", "Insert ContinueStatement(2555) into Block(2556) at 0", "Insert SimpleName: indentation(2558) into PrefixExpression: !(2559) at 0", "Insert VariableDeclarationStatement(2569) into Block(2579) at 0", "Insert IfStatement(2578) into Block(2579) at 1", "Insert SimpleName: indentation(2583) into Assignment: =(2585) at 0", "Insert BooleanLiteral: false(2584) into Assignment: =(2585) at 1", "Insert SimpleType: StringWriter(364) into VariableDeclarationStatement(370) at 0", "Insert VariableDeclarationFragment(369) into VariableDeclarationStatement(370) at 1", "Insert SimpleType: PrintWriter(372) into VariableDeclarationStatement(379) at 0", "Insert VariableDeclarationFragment(378) into VariableDeclarationStatement(379) at 1", "Insert MethodInvocation(383) into ExpressionStatement(384) at 0", "Insert MethodInvocation(387) into ExpressionStatement(388) at 0", "Insert MethodInvocation(393) into ExpressionStatement(394) at 0", "Insert SimpleName: s(2301) into MethodInvocation(2304) at 0", "Insert SimpleName: charAt(2302) into MethodInvocation(2304) at 1", "Insert SimpleName: i(2303) into MethodInvocation(2304) at 2", "Insert SimpleName: i(2308) into PostfixExpression: --(2309) at 0", "Update SimpleName: Template(745) to s", "Move SimpleName: Template(745) into MethodInvocation(2321) at 0", "Update SimpleName: compile(746) to substring", "Move SimpleName: compile(746) into MethodInvocation(2321) at 1", "Insert SimpleName: start(2317) into MethodInvocation(2321) at 2", "Move InfixExpression: +(750) into MethodInvocation(2321) at 3", "Insert SimpleName: i(2420) into InfixExpression: +(2422) at 0", "Insert NumberLiteral: 1(2421) into InfixExpression: +(2422) at 1", "Insert SimpleName: j(2425) into InfixExpression: <(2429) at 0", "Insert MethodInvocation(2428) into InfixExpression: <(2429) at 1", "Insert MethodInvocation(2433) into InfixExpression: ==(2435) at 0", "Insert CharacterLiteral: '\\n'(2434) into InfixExpression: ==(2435) at 1", "Insert PostfixExpression: ++(2438) into ExpressionStatement(2439) at 0", "Insert SimpleName: i(2443) into InfixExpression: +(2445) at 0", "Insert NumberLiteral: 1(2444) into InfixExpression: +(2445) at 1", "Insert InfixExpression: &&(2453) into IfStatement(2460) at 0", "Insert Block(2459) into IfStatement(2460) at 1", "Insert MethodInvocation(2541) into InfixExpression: >(2543) at 0", "Insert NumberLiteral: 0(2542) into InfixExpression: >(2543) at 1", "Insert MethodInvocation(2551) into InfixExpression: ==(2553) at 0", "Insert CharacterLiteral: '('(2552) into InfixExpression: ==(2553) at 1", "Insert PrimitiveType: char(2560) into VariableDeclarationStatement(2569) at 0", "Insert VariableDeclarationFragment(2568) into VariableDeclarationStatement(2569) at 1", "Insert InfixExpression: >=(2575) into IfStatement(2578) at 0", "Insert Block(2577) into IfStatement(2578) at 1", "Insert SimpleName: StringWriter(363) into SimpleType: StringWriter(364) at 0", "Insert SimpleName: writer(365) into VariableDeclarationFragment(369) at 0", "Insert ClassInstanceCreation(368) into VariableDeclarationFragment(369) at 1", "Insert SimpleName: PrintWriter(371) into SimpleType: PrintWriter(372) at 0", "Insert SimpleName: printWriter(373) into VariableDeclarationFragment(378) at 0", "Insert ClassInstanceCreation(377) into VariableDeclarationFragment(378) at 1", "Insert SimpleName: e(380) into MethodInvocation(383) at 0", "Insert SimpleName: printStackTrace(381) into MethodInvocation(383) at 1", "Insert SimpleName: printWriter(382) into MethodInvocation(383) at 2", "Insert SimpleName: printWriter(385) into MethodInvocation(387) at 0", "Insert SimpleName: flush(386) into MethodInvocation(387) at 1", "Insert SimpleName: note(389) into MethodInvocation(393) at 0", "Insert MethodInvocation(392) into MethodInvocation(393) at 1", "Insert SimpleName: i(2318) into InfixExpression: +(2320) at 0", "Insert NumberLiteral: 1(2319) into InfixExpression: +(2320) at 1", "Insert SimpleName: s(2426) into MethodInvocation(2428) at 0", "Insert SimpleName: length(2427) into MethodInvocation(2428) at 1", "Insert SimpleName: s(2430) into MethodInvocation(2433) at 0", "Insert SimpleName: charAt(2431) into MethodInvocation(2433) at 1", "Insert SimpleName: j(2432) into MethodInvocation(2433) at 2", "Insert SimpleName: j(2437) into PostfixExpression: ++(2438) at 0", "Insert InfixExpression: ==(2449) into InfixExpression: &&(2453) at 0", "Insert InfixExpression: <=(2452) into InfixExpression: &&(2453) at 1", "Move ExpressionStatement(861) into Block(2459) at 0", "Insert SimpleName: i(2461) into Assignment: =(2465) at 0", "Insert InfixExpression: -(2464) into Assignment: =(2465) at 1", "Insert SimpleName: sb(2539) into MethodInvocation(2541) at 0", "Insert SimpleName: length(2540) into MethodInvocation(2541) at 1", "Insert SimpleName: sb(2544) into MethodInvocation(2551) at 0", "Insert SimpleName: charAt(2545) into MethodInvocation(2551) at 1", "Insert InfixExpression: -(2550) into MethodInvocation(2551) at 2", "Insert SimpleName: nextC(2561) into VariableDeclarationFragment(2568) at 0", "Insert MethodInvocation(2567) into VariableDeclarationFragment(2568) at 1", "Insert MethodInvocation(2573) into InfixExpression: >=(2575) at 0", "Insert NumberLiteral: 0(2574) into InfixExpression: >=(2575) at 1", "Insert ContinueStatement(2576) into Block(2577) at 0", "Insert SimpleType: StringWriter(367) into ClassInstanceCreation(368) at 0", "Insert SimpleType: PrintWriter(375) into ClassInstanceCreation(377) at 0", "Insert SimpleName: writer(376) into ClassInstanceCreation(377) at 1", "Insert SimpleName: writer(390) into MethodInvocation(392) at 0", "Insert SimpleName: toString(391) into MethodInvocation(392) at 1", "Insert SimpleName: parens(2447) into InfixExpression: ==(2449) at 0", "Insert NumberLiteral: 0(2448) into InfixExpression: ==(2449) at 1", "Insert SimpleName: braces(2450) into InfixExpression: <=(2452) at 0", "Insert NumberLiteral: 1(2451) into InfixExpression: <=(2452) at 1", "Insert MethodInvocation(2457) into ExpressionStatement(2458) at 0", "Insert SimpleName: j(2462) into InfixExpression: -(2464) at 0", "Insert NumberLiteral: 1(2463) into InfixExpression: -(2464) at 1", "Insert MethodInvocation(2548) into InfixExpression: -(2550) at 0", "Insert NumberLiteral: 1(2549) into InfixExpression: -(2550) at 1", "Insert SimpleName: s(2562) into MethodInvocation(2567) at 0", "Insert SimpleName: charAt(2563) into MethodInvocation(2567) at 1", "Insert InfixExpression: +(2566) into MethodInvocation(2567) at 2", "Insert StringLiteral: \" ,;)\"(2570) into MethodInvocation(2573) at 0", "Insert SimpleName: indexOf(2571) into MethodInvocation(2573) at 1", "Insert SimpleName: nextC(2572) into MethodInvocation(2573) at 2", "Insert SimpleName: StringWriter(366) into SimpleType: StringWriter(367) at 0", "Insert SimpleName: PrintWriter(374) into SimpleType: PrintWriter(375) at 0", "Insert SimpleName: sb(2454) into MethodInvocation(2457) at 0", "Insert SimpleName: append(2455) into MethodInvocation(2457) at 1", "Insert StringLiteral: \"\\n\"(2456) into MethodInvocation(2457) at 2", "Insert SimpleName: sb(2546) into MethodInvocation(2548) at 0", "Insert SimpleName: length(2547) into MethodInvocation(2548) at 1", "Insert SimpleName: i(2564) into InfixExpression: +(2566) at 0", "Insert NumberLiteral: 1(2565) into InfixExpression: +(2566) at 1", "Delete QualifiedName: TypeKind.ARRAY(646)", "Delete InfixExpression: ==(647)", "Delete PrimitiveType: boolean(626)", "Delete SimpleName: primitive(627)", "Delete SimpleName: method(628)", "Delete SimpleName: getReturnType(629)", "Delete MethodInvocation(630)", "Delete SimpleName: getKind(631)", "Delete MethodInvocation(632)", "Delete SimpleName: isPrimitive(633)", "Delete MethodInvocation(634)", "Delete ReturnStatement(635)", "Delete Block(636)", "Delete Modifier: public(638)", "Delete PrimitiveType: boolean(639)", "Delete SimpleName: array(640)", "Delete MethodDeclaration(650)", "Delete Modifier: private(689)", "Delete Modifier: static(690)", "Delete Modifier: final(691)", "Delete SimpleName: Template(692)", "Delete SimpleType: Template(693)", "Delete SimpleName: PRIMITIVE_EQUALS_TEMPLATE(694)", "Delete StringLiteral: \"this.$[p] == that.$[p]()\"(697)", "Delete MethodInvocation(698)", "Delete VariableDeclarationFragment(699)", "Delete FieldDeclaration(700)", "Delete Modifier: private(701)", "Delete Modifier: static(702)", "Delete Modifier: final(703)", "Delete SimpleName: Template(704)", "Delete SimpleType: Template(705)", "Delete SimpleName: ARRAY_EQUALS_TEMPLATE(706)", "Delete StringLiteral: \"$[javaUtilArraysSpelling].equals(this.$[p], \"(709)", "Delete StringLiteral: \"(that instanceof $[subclass]) ? (($[subclass]) that).$[p] : that.$[p]())\"(710)", "Delete InfixExpression: +(711)", "Delete MethodInvocation(712)", "Delete VariableDeclarationFragment(713)", "Delete FieldDeclaration(714)", "Delete Modifier: private(715)", "Delete Modifier: static(716)", "Delete Modifier: final(717)", "Delete SimpleType: Template(719)", "Delete StringLiteral: \"Float.floatToIntBits(this.$[p]) == Float.floatToIntBits(that.$[p]())\"(723)", "Delete MethodInvocation(724)", "Delete VariableDeclarationFragment(725)", "Delete FieldDeclaration(726)", "Delete Modifier: private(727)", "Delete Modifier: static(728)", "Delete Modifier: final(729)", "Delete SimpleName: Template(730)", "Delete SimpleType: Template(731)", "Delete VariableDeclarationFragment(737)", "Delete FieldDeclaration(738)", "Delete Modifier: private(739)", "Delete Modifier: static(740)", "Delete Modifier: final(741)", "Delete SimpleName: Template(742)", "Delete SimpleType: Template(743)", "Delete SimpleName: OBJECT_EQUALS_TEMPLATE(744)", "Delete MethodInvocation(751)", "Delete VariableDeclarationFragment(752)", "Delete FieldDeclaration(753)", "Delete TypeDeclaration: class(995)", "Delete StringLiteral: \"Double.doubleToLongBits(this.$[p]) == Double.doubleToLongBits(that.$[p]())\"(735)", "Delete StringLiteral: \"$[p.nullable?\"(747)", "Delete StringLiteral: \"(this.$[p] == null) ? (that.$[p]() == null) : ]\"(748)", "Delete StringLiteral: \"this.$[p].equals(that.$[p]())\"(749)", "Delete TextElement: A string representing an expression that compares this property with the same property(754)", "Delete TextElement: in another variable called \"that\" whose type is the class marked (755)", "Delete TextElement: .(758)", "Delete TagElement(759)", "Delete Javadoc(760)", "Delete Modifier: final(765)", "Delete SimpleName: equalsTemplate(795)", "Delete SimpleName: FLOAT_EQUALS_TEMPLATE(796)", "Delete Assignment: =(797)", "Delete SimpleName: DOUBLE(800)", "Delete SimpleName: equalsTemplate(802)", "Delete SimpleName: DOUBLE_EQUALS_TEMPLATE(803)", "Delete Assignment: =(804)", "Delete SimpleName: ARRAY(807)", "Delete SimpleName: equalsTemplate(809)", "Delete SimpleName: ARRAY_EQUALS_TEMPLATE(810)", "Delete Assignment: =(811)", "Delete SimpleName: equalsTemplate(815)", "Delete SimpleName: OBJECT_EQUALS_TEMPLATE(816)", "Delete Assignment: =(817)", "Delete QualifiedName: equalsTemplateVars.javaUtilArraysSpelling(858)", "Delete QualifiedName: vars.javaUtilArraysSpelling(859)", "Delete Assignment: =(860)", "Delete QualifiedName: equalsTemplateVars.subclass(862)", "Delete QualifiedName: vars.subclass(863)", "Delete QualifiedName: equalsTemplateVars.p(866)", "Delete ThisExpression(867)", "Delete Assignment: =(868)", "Delete SimpleName: method(771)", "Delete SimpleName: getReturnType(772)", "Delete MethodInvocation(773)", "Delete SimpleName: getKind(774)", "Delete MethodInvocation(775)", "Delete SimpleName: BYTE(776)", "Delete SwitchCase(777)", "Delete SimpleName: SHORT(778)", "Delete SwitchCase(779)", "Delete SimpleName: CHAR(780)", "Delete SwitchCase(781)", "Delete SimpleName: INT(782)", "Delete SwitchCase(783)", "Delete SimpleName: LONG(784)", "Delete SwitchCase(785)", "Delete SimpleName: BOOLEAN(786)", "Delete SwitchCase(787)", "Delete SimpleName: equalsTemplate(788)", "Delete SimpleName: PRIMITIVE_EQUALS_TEMPLATE(789)", "Delete Assignment: =(790)", "Delete ExpressionStatement(791)", "Delete BreakStatement(792)", "Delete SimpleName: FLOAT(793)", "Delete SwitchCase(794)", "Delete SwitchStatement(820)", "Delete SimpleName: EqualsTemplateVars(821)", "Delete SimpleName: TemplateVars(822)", "Delete SimpleType: TemplateVars(823)", "Delete SimpleName: javaUtilArraysSpelling(826)", "Delete VariableDeclarationFragment(827)", "Delete FieldDeclaration(828)", "Delete SimpleName: subclass(831)", "Delete VariableDeclarationFragment(832)", "Delete FieldDeclaration(833)", "Delete SimpleName: Property(834)", "Delete SimpleType: Property(835)", "Delete SimpleName: p(836)", "Delete VariableDeclarationFragment(837)", "Delete FieldDeclaration(838)", "Delete SimpleName: Override(839)", "Delete MarkerAnnotation(840)", "Delete SimpleName: Template(841)", "Delete SimpleType: Template(842)", "Delete SimpleName: template(843)", "Delete SimpleName: equalsTemplate(844)", "Delete ReturnStatement(845)", "Delete Block(846)", "Delete MethodDeclaration(847)", "Delete TypeDeclaration: class(848)", "Delete TypeDeclarationStatement(849)", "Delete SimpleName: EqualsTemplateVars(850)", "Delete SimpleType: EqualsTemplateVars(851)", "Delete SimpleName: equalsTemplateVars(852)", "Delete SimpleName: EqualsTemplateVars(853)", "Delete SimpleType: EqualsTemplateVars(854)", "Delete ClassInstanceCreation(855)", "Delete VariableDeclarationFragment(856)", "Delete VariableDeclarationStatement(857)", "Delete TextElement: A string representing an expression that is the hashCode of this property.(876)", "Delete TagElement(877)", "Delete Javadoc(878)", "Delete StringLiteral: \"(\"(942)", "Delete ThisExpression(943)", "Delete StringLiteral: \" == null) ? 0 : \"(944)", "Delete ThisExpression(945)", "Delete StringLiteral: \".hashCode()\"(946)", "Delete InfixExpression: +(947)", "Delete MethodInvocation(885)", "Delete SimpleName: getKind(886)", "Delete MethodInvocation(887)", "Delete SimpleName: BYTE(888)", "Delete SwitchCase(889)", "Delete SimpleName: SHORT(890)", "Delete SwitchCase(891)", "Delete SimpleName: CHAR(892)", "Delete SwitchCase(893)", "Delete SimpleName: INT(894)", "Delete SwitchCase(895)", "Delete ThisExpression(896)", "Delete MethodInvocation(898)", "Delete ReturnStatement(899)", "Delete SimpleName: LONG(900)", "Delete SwitchCase(901)", "Delete StringLiteral: \"(\"(902)", "Delete ThisExpression(903)", "Delete StringLiteral: \" >>> 32) ^ \"(904)", "Delete ThisExpression(905)", "Delete InfixExpression: +(906)", "Delete ReturnStatement(907)", "Delete SimpleName: FLOAT(908)", "Delete SwitchCase(909)", "Delete StringLiteral: \"Float.floatToIntBits(\"(910)", "Delete ThisExpression(911)", "Delete StringLiteral: \")\"(912)", "Delete InfixExpression: +(913)", "Delete ReturnStatement(914)", "Delete SimpleName: DOUBLE(915)", "Delete SwitchCase(916)", "Delete StringLiteral: \"(Double.doubleToLongBits(\"(917)", "Delete ThisExpression(918)", "Delete StringLiteral: \") >>> 32) ^ \"(919)", "Delete StringLiteral: \"Double.doubleToLongBits(\"(920)", "Delete ThisExpression(921)", "Delete StringLiteral: \")\"(922)", "Delete InfixExpression: +(923)", "Delete ReturnStatement(924)", "Delete SimpleName: BOOLEAN(925)", "Delete SwitchCase(926)", "Delete ThisExpression(927)", "Delete StringLiteral: \" ? 1231 : 1237\"(928)", "Delete InfixExpression: +(929)", "Delete ReturnStatement(930)", "Delete SimpleName: ARRAY(931)", "Delete SwitchCase(932)", "Delete QualifiedName: vars.javaUtilArraysSpelling(933)", "Delete StringLiteral: \".hashCode(\"(934)", "Delete ThisExpression(935)", "Delete StringLiteral: \")\"(936)", "Delete InfixExpression: +(937)", "Delete ReturnStatement(938)", "Delete MethodInvocation(941)", "Delete Block(949)", "Delete ThisExpression(950)", "Delete StringLiteral: \".hashCode()\"(951)", "Delete InfixExpression: +(952)", "Delete ReturnStatement(953)", "Delete Block(954)", "Delete IfStatement(955)", "Delete SwitchStatement(956)"]}}, {"AutoValueTemplateVars_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: org.apache.velocity.runtime.parser.node.SimpleNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from String to SimpleNode", "operations": ["UPD SimpleName: String from String to SimpleNode", "UPD SimpleType: String from String to SimpleNode", "UPD SimpleType: Template from Template to SimpleNode", "UPD SimpleName: Template from Template to SimpleNode"]}, {"root": "UPDATE from template to parsedTemplate", "operations": ["UPD SimpleName: template from template to parsedTemplate"]}, {"root": "UPDATE from TEMPLATE_STRING to TEMPLATE", "operations": ["UPD SimpleName: TEMPLATE_STRING from TEMPLATE_STRING to TEMPLATE"]}, {"root": "UPDATE from concatLines to parsedTemplateForResource", "operations": ["UPD SimpleName: concatLines from concatLines to parsedTemplateForResource"]}, {"root": "INS StringLiteral: \"template.vm\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"template.vm\" to MethodInvocation at 1"]}, {"root": "DEL StringLiteral: \"$[pkg?package $[pkg];\\n]\"", "operations": ["DEL StringLiteral: \"$[pkg?package $[pkg];\\n]\""]}, {"root": "DEL StringLiteral: \"$[imports:i||import $[i];\\n]\"", "operations": ["DEL StringLiteral: \"$[imports:i||import $[i];\\n]\""]}, {"root": "DEL StringLiteral: \"@javax.annotation.Generated(\\\"com.google.auto.value.processor.AutoValueProcessor\\\")\"", "operations": ["DEL StringLiteral: \"@javax.annotation.Generated(\\\"com.google.auto.value.processor.AutoValueProcessor\\\")\""]}, {"root": "DEL StringLiteral: \"final class $[subclass]$[formalTypes] extends $[origClass]$[actualTypes] {\"", "operations": ["DEL StringLiteral: \"final class $[subclass]$[formalTypes] extends $[origClass]$[actualTypes] {\""]}, {"root": "DEL StringLiteral: \"$[props:p||  private final $[p.type] $[p];\\n]\"", "operations": ["DEL StringLiteral: \"$[props:p||  private final $[p.type] $[p];\\n]\""]}, {"root": "DEL StringLiteral: \"  $[subclass](\\n      $[props:p|,\\n      |$[p.type] $[p]]) {\"", "operations": ["DEL StringLiteral: \"  $[subclass](\\n      $[props:p|,\\n      |$[p.type] $[p]]) {\""]}, {"root": "DEL StringLiteral: \"$[props:p|\\n|$[p.primitive!$[p.nullable!    if ($[p] == null) {\"", "operations": ["DEL StringLiteral: \"$[props:p|\\n|$[p.primitive!$[p.nullable!    if ($[p] == null) {\""]}, {"root": "DEL StringLiteral: \"      throw new NullPointerException(\\\"Null $[p]\\\");\"", "operations": ["DEL StringLiteral: \"      throw new NullPointerException(\\\"Null $[p]\\\");\""]}, {"root": "DEL StringLiteral: \"    }\"", "operations": ["DEL StringLiteral: \"    }\""]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"]]\"", "DEL InfixExpression: +", "DEL StringLiteral: \"    this.$[p] = $[p];]\""]}, {"root": "DEL StringLiteral: \"  }\"", "operations": ["DEL StringLiteral: \"  }\""]}, {"root": "DEL StringLiteral: \"$[props:p|\\n|\\n  @Override\"", "operations": ["DEL StringLiteral: \"$[props:p|\\n|\\n  @Override\""]}, {"root": "DEL StringLiteral: \"  $[p.access]$[p.type] $[p]() {\"", "operations": ["DEL StringLiteral: \"  $[p.access]$[p.type] $[p]() {\""]}, {"root": "DEL StringLiteral: \"    return $[p.array?[$[p.nullable?$[p] == null ? null : ]$[p].clone()][$[p]]];\"", "operations": ["DEL StringLiteral: \"    return $[p.array?[$[p.nullable?$[p] == null ? null : ]$[p].clone()][$[p]]];\""]}, {"root": "DEL StringLiteral: \"  }]\"", "operations": ["DEL StringLiteral: \"  }]\""]}, {"root": "DEL StringLiteral: \"$[toString?\\n  @Override\"", "operations": ["DEL StringLiteral: \"$[toString?\\n  @Override\""]}, {"root": "DEL StringLiteral: \"  public String toString() {\"", "operations": ["DEL StringLiteral: \"  public String toString() {\""]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \"    return \\\"$[simpleClassName]{\\\"$[props?\\n        + \\\"]\"", "DEL StringLiteral: \"$[props:p|\\n        + \\\", |\"", "DEL StringLiteral: \"$[p]=\\\" + $[p.array?[$[javaUtilArraysSpelling].toString($[p])][$[p]]]]\""]}, {"root": "DEL StringLiteral: \"        + \\\"}\\\";\"", "operations": ["DEL StringLiteral: \"        + \\\"}\\\";\""]}, {"root": "DEL StringLiteral: \"  }]\"", "operations": ["DEL StringLiteral: \"  }]\""]}, {"root": "DEL StringLiteral: \"$[equals?\\n  @Override\"", "operations": ["DEL StringLiteral: \"$[equals?\\n  @Override\""]}, {"root": "DEL StringLiteral: \"  public boolean equals(Object o) {\"", "operations": ["DEL StringLiteral: \"  public boolean equals(Object o) {\""]}, {"root": "DEL StringLiteral: \"    if (o == this) {\"", "operations": ["DEL StringLiteral: \"    if (o == this) {\""]}, {"root": "DEL StringLiteral: \"      return true;\"", "operations": ["DEL StringLiteral: \"      return true;\""]}, {"root": "DEL StringLiteral: \"    }\"", "operations": ["DEL StringLiteral: \"    }\""]}, {"root": "DEL StringLiteral: \"    if (o instanceof $[origClass]) {\"", "operations": ["DEL StringLiteral: \"    if (o instanceof $[origClass]) {\""]}, {"root": "DEL StringLiteral: \"      $[origClass]$[wildcardTypes] that = ($[origClass]$[wildcardTypes]) o;\"", "operations": ["DEL StringLiteral: \"      $[origClass]$[wildcardTypes] that = ($[origClass]$[wildcardTypes]) o;\""]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"$[props:p|\\n          && |($[p.equalsThatExpression])];\"", "DEL StringLiteral: \"      return $[props!true]\"", "DEL InfixExpression: +"]}, {"root": "DEL StringLiteral: \"    }\"", "operations": ["DEL StringLiteral: \"    }\""]}, {"root": "DEL StringLiteral: \"    return false;\"", "operations": ["DEL StringLiteral: \"    return false;\""]}, {"root": "DEL StringLiteral: \"  }]\"", "operations": ["DEL StringLiteral: \"  }]\""]}, {"root": "DEL StringLiteral: \"$[hashCode?\"", "operations": ["DEL StringLiteral: \"$[hashCode?\""]}, {"root": "DEL StringLiteral: \"  @Override\"", "operations": ["DEL StringLiteral: \"  @Override\""]}, {"root": "DEL StringLiteral: \"  public int hashCode() {\"", "operations": ["DEL StringLiteral: \"  public int hashCode() {\""]}, {"root": "DEL StringLiteral: \"    int h = 1;\"", "operations": ["DEL StringLiteral: \"    int h = 1;\""]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \"$[props:p||\"", "DEL StringLiteral: \"    h *= 1000003;\""]}, {"root": "DEL StringLiteral: \"    h ^= $[p.hashCodeExpression];\"", "operations": ["DEL StringLiteral: \"    h ^= $[p.hashCodeExpression];\""]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"]\"", "DEL StringLiteral: \"    return h;\"", "DEL InfixExpression: +"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"$[serialVersionUID?\\n\\n  private static final long serialVersionUID = $[serialVersionUID];]\"", "DEL StringLiteral: \"  }]\"", "DEL InfixExpression: +"]}, {"root": "DEL StringLiteral: \"}\"", "operations": ["DEL StringLiteral: \"}\""]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: Template", "DEL VariableDeclarationFragment", "DEL SimpleName: Template", "DEL SimpleName: TEMPLATE", "DEL Modifier: static", "DEL SimpleName: Template", "DEL SimpleName: TEMPLATE_STRING", "DEL MethodInvocation", "DEL SimpleName: compile"]}]}}, {"AutoValueTemplateVars_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(188) at 1", "Insert QualifiedName: org.apache.velocity.runtime.parser.node.SimpleNode(2) into ImportDeclaration(3) at 0", "Update SimpleType: String(169) to SimpleNode", "Update SimpleType: Template(243) to SimpleNode", "Update SimpleName: template(244) to parsedTemplate", "Update SimpleName: String(168) to SimpleNode", "Update SimpleName: TEMPLATE_STRING(170) to TEMPLATE", "Update SimpleName: Template(242) to SimpleNode", "Update SimpleName: concatLines(171) to parsedTemplateForResource", "Insert StringLiteral: \"template.vm\"(174) into MethodInvocation(175) at 1", "Delete StringLiteral: \"$[pkg?package $[pkg];\\n]\"(172)", "Delete StringLiteral: \"$[imports:i||import $[i];\\n]\"(173)", "Delete StringLiteral: \"@javax.annotation.Generated(\\\"com.google.auto.value.processor.AutoValueProcessor\\\")\"(174)", "Delete StringLiteral: \"final class $[subclass]$[formalTypes] extends $[origClass]$[actualTypes] {\"(175)", "Delete StringLiteral: \"$[props:p||  private final $[p.type] $[p];\\n]\"(176)", "Delete StringLiteral: \"  $[subclass](\\n      $[props:p|,\\n      |$[p.type] $[p]]) {\"(177)", "Delete StringLiteral: \"$[props:p|\\n|$[p.primitive!$[p.nullable!    if ($[p] == null) {\"(178)", "Delete StringLiteral: \"      throw new NullPointerException(\\\"Null $[p]\\\");\"(179)", "Delete StringLiteral: \"    }\"(180)", "Delete StringLiteral: \"]]\"(181)", "Delete StringLiteral: \"    this.$[p] = $[p];]\"(182)", "Delete InfixExpression: +(183)", "Delete StringLiteral: \"  }\"(184)", "Delete StringLiteral: \"$[props:p|\\n|\\n  @Override\"(185)", "Delete StringLiteral: \"  $[p.access]$[p.type] $[p]() {\"(186)", "Delete StringLiteral: \"    return $[p.array?[$[p.nullable?$[p] == null ? null : ]$[p].clone()][$[p]]];\"(187)", "Delete StringLiteral: \"  }]\"(188)", "Delete StringLiteral: \"$[toString?\\n  @Override\"(189)", "Delete StringLiteral: \"  public String toString() {\"(190)", "Delete StringLiteral: \"    return \\\"$[simpleClassName]{\\\"$[props?\\n        + \\\"]\"(191)", "Delete StringLiteral: \"$[props:p|\\n        + \\\", |\"(192)", "Delete StringLiteral: \"$[p]=\\\" + $[p.array?[$[javaUtilArraysSpelling].toString($[p])][$[p]]]]\"(193)", "Delete InfixExpression: +(194)", "Delete StringLiteral: \"        + \\\"}\\\";\"(195)", "Delete StringLiteral: \"  }]\"(196)", "Delete StringLiteral: \"$[equals?\\n  @Override\"(197)", "Delete StringLiteral: \"  public boolean equals(Object o) {\"(198)", "Delete StringLiteral: \"    if (o == this) {\"(199)", "Delete StringLiteral: \"      return true;\"(200)", "Delete StringLiteral: \"    }\"(201)", "Delete StringLiteral: \"    if (o instanceof $[origClass]) {\"(202)", "Delete StringLiteral: \"      $[origClass]$[wildcardTypes] that = ($[origClass]$[wildcardTypes]) o;\"(203)", "Delete StringLiteral: \"      return $[props!true]\"(204)", "Delete StringLiteral: \"$[props:p|\\n          && |($[p.equalsThatExpression])];\"(205)", "Delete InfixExpression: +(206)", "Delete StringLiteral: \"    }\"(207)", "Delete StringLiteral: \"    return false;\"(208)", "Delete StringLiteral: \"  }]\"(209)", "Delete StringLiteral: \"$[hashCode?\"(210)", "Delete StringLiteral: \"  @Override\"(211)", "Delete StringLiteral: \"  public int hashCode() {\"(212)", "Delete StringLiteral: \"    int h = 1;\"(213)", "Delete StringLiteral: \"$[props:p||\"(214)", "Delete StringLiteral: \"    h *= 1000003;\"(215)", "Delete InfixExpression: +(216)", "Delete StringLiteral: \"    h ^= $[p.hashCodeExpression];\"(217)", "Delete StringLiteral: \"]\"(218)", "Delete StringLiteral: \"    return h;\"(219)", "Delete InfixExpression: +(220)", "Delete StringLiteral: \"  }]\"(221)", "Delete StringLiteral: \"$[serialVersionUID?\\n\\n  private static final long serialVersionUID = $[serialVersionUID];]\"(222)", "Delete InfixExpression: +(223)", "Delete StringLiteral: \"}\"(224)", "Delete Modifier: private(228)", "Delete Modifier: static(229)", "Delete Modifier: final(230)", "Delete SimpleName: Template(231)", "Delete SimpleType: Template(232)", "Delete SimpleName: TEMPLATE(233)", "Delete SimpleName: Template(234)", "Delete SimpleName: compile(235)", "Delete SimpleName: TEMPLATE_STRING(236)", "Delete MethodInvocation(237)", "Delete VariableDeclarationFragment(238)", "Delete FieldDeclaration(239)"]}}, {"EclipseHack_cluster": {"actions": [{"root": "UPDATE from owner to getOwner", "operations": ["UPD SimpleName: owner from owner to getOwner", "UPD SimpleName: owner from owner to getOwner"]}]}}, {"EclipseHack_diff": {"operations": ["Update SimpleName: owner(121) to getOwner", "Update SimpleName: owner(141) to getOwner"]}}, {"Template_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.auto.value.processor", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Modifier", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.regex.Matcher", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.regex.Pattern", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: start", "DEL Block", "DEL SimpleType: Node", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: end", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalArgumentException", "DEL ParameterizedType: Map<String,?>", "DEL SimpleName: secondBar", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: compile", "DEL SimpleName: value", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL SimpleType: Iterable", "DEL PrimitiveType: void", "DEL ThrowStatement", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleType: Template", "DEL SimpleName: Override", "DEL WildcardType: ?", "DEL SimpleName: Map", "DEL SimpleName: lookingAt", "DEL SimpleName: dollar", "DEL SimpleName: parseConditional", "DEL SimpleName: template", "DEL VariableDeclarationExpression", "DEL SimpleType: Node", "DEL VariableDeclarationStatement", "DEL SimpleName: charAt", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleType: Object", "DEL SimpleName: template", "DEL IfStatement", "DEL TextElement: loopvar defined to be the element for substitutions within the text. For example if", "DEL SimpleName: length", "DEL InfixExpression: +", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL Modifier: final", "DEL SimpleType: Object", "DEL ThrowStatement", "DEL SimpleType: StringBuilder", "DEL Assignment: =", "DEL SimpleName: varRef", "DEL SimpleType: Class", "DEL PrefixExpression: !", "DEL SimpleName: IterationNode", "DEL MethodInvocation", "DEL SimpleName: Number", "DEL Block", "DEL Block", "DEL Modifier: private", "DEL SimpleName: IterationNode", "DEL ArrayInitializer", "DEL SimpleName: String", "DEL SimpleName: templateIndex", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: node", "DEL SimpleName: templateIndex", "DEL SimpleName: afterColon", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: stop", "DEL NumberLiteral: 0", "DEL SimpleName: parse", "DEL SimpleName: String", "DEL SimpleName: iterationVarName", "DEL SimpleName: Template", "DEL SimpleName: iterationVarName", "DEL Modifier: final", "DEL SimpleName: text", "DEL SimpleName: template", "DEL MethodInvocation", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: vars", "DEL SimpleName: dollar", "DEL WildcardType: ?", "DEL SimpleType: Map", "DEL InfixExpression: +", "DEL Block", "DEL TextElement: <li>$[var?[text1][text2]] to get text1 if the variable is \"true\" and text2 if it is \"false\"", "DEL Block", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleName: iterationVarName", "DEL SimpleName: node", "DEL Modifier: private", "DEL Modifier: private", "DEL SimpleName: appendTo", "DEL SimpleType: String", "DEL SimpleType: IterationNode", "DEL SimpleName: i", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Iterable", "DEL FieldDeclaration", "DEL SimpleName: template", "DEL SimpleName: Exception", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL StringLiteral: \"Unexpected character after variable name at \"", "DEL WildcardType: ?", "DEL SimpleType: String", "DEL SimpleName: template", "DEL SimpleName: endLiteral", "DEL ParameterizedType: Map<String,?>", "DEL SimpleName: template", "DEL StringLiteral: \") is not Iterable at \"", "DEL SimpleName: Node", "DEL Modifier: private", "DEL NumberLiteral: 1", "DEL SimpleName: firstNode", "DEL NullLiteral", "DEL SimpleName: afterQueryOrBang", "DEL SimpleName: vars", "DEL InfixExpression: <", "DEL SimpleName: VarRefNode", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL PrimitiveType: void", "DEL SimpleName: indexOf", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: method", "DEL SimpleName: start", "DEL SimpleName: varRef", "DEL Modifier: final", "DEL SuperConstructorInvocation", "DEL SimpleName: length", "DEL SimpleName: template", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleType: Template", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL SimpleName: getSuperclass", "DEL SimpleName: Node", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: Node", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: dollar", "DEL SimpleName: substring", "DEL SimpleName: i", "DEL SimpleName: String", "DEL SimpleName: ConditionalNode", "DEL SimpleName: String", "DEL SimpleName: VarNode", "DEL SimpleName: template", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: index", "DEL ParameterizedType: Map<String,Object>", "DEL VariableDeclarationStatement", "DEL MarkerAnnotation", "DEL SimpleType: List", "DEL CharacterLiteral: '!'", "DEL InfixExpression: !=", "DEL SimpleName: getInterfaces", "DEL MethodInvocation", "DEL SimpleName: index", "DEL SimpleName: Iterable", "DEL SimpleType: Map", "DEL Block", "DEL SimpleName: afterOpen", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: String", "DEL PrimitiveType: void", "DEL SimpleName: start", "DEL SingleVariableDeclaration", "DEL SimpleName: c", "DEL InfixExpression: +", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleType: IllegalArgumentException", "DEL ThrowStatement", "DEL Modifier: private", "DEL SimpleName: dollar", "DEL SimpleName: String", "DEL SimpleName: truth", "DEL InfixExpression: !=", "DEL CharacterLiteral: ']'", "DEL SimpleName: Object", "DEL NumberLiteral: 1", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL SimpleName: IterationNode", "DEL StringLiteral: \"\\\\.\"", "DEL SimpleType: String", "DEL SimpleName: entireLineCommentPattern", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: Node", "DEL PostfixExpression: ++", "DEL SimpleName: varRef", "DEL SimpleName: firstBar", "DEL TryStatement", "DEL SimpleName: x", "DEL SimpleType: String", "DEL SuperConstructorInvocation", "DEL SimpleName: secondNode", "DEL SimpleName: vars", "DEL SwitchCase", "DEL SimpleType: StringBuilder", "DEL SimpleName: rootNode", "DEL NumberLiteral: 40", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: Method", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL PostfixExpression: ++", "DEL SimpleName: template", "DEL SingleVariableDeclaration", "DEL SimpleType: StringBuilder", "DEL SimpleType: Exception", "DEL MethodDeclaration", "DEL SimpleType: Node", "DEL ParenthesizedExpression", "DEL SimpleName: Pattern", "DEL ParameterizedType: Map<String,?>", "DEL MethodInvocation", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SimpleName: parts", "DEL MethodInvocation", "DEL SimpleName: startsWith", "DEL CharacterLiteral: ']'", "DEL SimpleName: newVars", "DEL SimpleName: Template", "DEL MethodInvocation", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL Modifier: static", "DEL FieldAccess", "DEL SimpleName: dollar", "DEL Block", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL Block", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleName: indexOf", "DEL SimpleName: iteratedNode", "DEL Block", "DEL SimpleName: parts", "DEL SimpleName: template", "DEL SimpleName: getName", "DEL NumberLiteral: 1", "DEL SimpleName: afterOpen", "DEL PrimitiveType: int", "DEL SimpleName: template", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: j", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: template", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleName: methodName", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleType: Map", "DEL SimpleType: String", "DEL Modifier: private", "DEL SimpleName: matcher", "DEL MethodDeclaration", "DEL SimpleName: appendTo", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SwitchStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Node", "DEL SimpleName: template", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: varRef", "DEL SwitchCase", "DEL SimpleName: templateIndex", "DEL SimpleName: parse", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Block", "DEL NullLiteral", "DEL SimpleName: c", "DEL SimpleType: Node", "DEL SimpleName: VarRefNode", "DEL SimpleName: methodName", "DEL StringLiteral: \"Iteration variable name \"", "DEL SimpleName: i", "DEL SimpleType: String", "DEL NullLiteral", "DEL SimpleName: Method", "DEL PrimitiveType: char", "DEL SimpleName: index", "DEL SimpleType: Template", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: IllegalArgumentException", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL WildcardType: ?", "DEL SimpleName: excerpt", "DEL SingleVariableDeclaration", "DEL AssertStatement", "DEL Modifier: private", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: templateIndex", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL SimpleName: add", "DEL SuperConstructorInvocation", "DEL TextElement:  Éamonn McManus", "DEL SimpleName: String", "DEL IfStatement", "DEL ThisExpression", "DEL SimpleName: stop", "DEL SimpleType: Node", "DEL SimpleName: String", "DEL SimpleName: stop", "DEL Block", "DEL MethodDeclaration", "DEL Block", "DEL IfStatement", "DEL Modifier: private", "DEL SimpleName: afterQueryOrBang", "DEL SimpleName: parse", "DEL MarkerAnnotation", "DEL SimpleName: nodes", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL SimpleName: Template", "DEL SimpleName: firstNode", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleType: CompoundNode", "DEL SimpleName: value", "DEL Modifier: private", "DEL MethodInvocation", "DEL Modifier: private", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL SimpleName: truth", "DEL Modifier: static", "DEL SimpleType: Object", "DEL PostfixExpression: --", "DEL SimpleName: matcher", "DEL MethodInvocation", "DEL SwitchCase", "DEL PrimitiveType: int", "DEL SimpleName: afterColon", "DEL SimpleName: part", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: vars", "DEL SimpleName: String", "DEL SimpleType: Iterable", "DEL Modifier: private", "DEL SimpleName: template", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: stop", "DEL Block", "DEL SingleVariableDeclaration", "DEL InfixExpression: -", "DEL SimpleName: template", "DEL SimpleName: iterationVarName", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL SimpleName: template", "DEL SimpleName: iterationVarName", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: template", "DEL MethodDeclaration", "DEL SimpleName: index", "DEL PrimitiveType: boolean", "DEL InstanceofExpression", "DEL InfixExpression: +", "DEL TypeDeclaration: class", "DEL SimpleName: afterQueryOrBang", "DEL SimpleName: j", "DEL SimpleName: varRef", "DEL SimpleName: template", "DEL SimpleName: stop", "DEL SimpleName: text", "DEL SimpleName: varRef", "DEL CastExpression", "DEL Dimension", "DEL ReturnStatement", "DEL SimpleName: start", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: Iterable", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: IllegalArgumentException", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SimpleName: node", "DEL CharacterLiteral: '?'", "DEL SimpleName: stop", "DEL SimpleName: method", "DEL InfixExpression: >", "DEL InfixExpression: <", "DEL SimpleName: ArrayList", "DEL IfStatement", "DEL Modifier: private", "DEL SimpleType: Iterable", "DEL QualifiedName: Pattern.MULTILINE", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: IllegalArgumentException", "DEL Block", "DEL SimpleName: ConditionalNode", "DEL SimpleName: value", "DEL SimpleName: text", "DEL SuperConstructorInvocation", "DEL ReturnStatement", "DEL CharacterLiteral: '['", "DEL TextElement: will become \"'foo', 'bar', 'baz'\".", "DEL SimpleName: parseIteration", "DEL SimpleName: stop", "DEL FieldAccess", "DEL SimpleName: separator", "DEL SimpleType: StringBuilder", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: LiteralNode", "DEL SimpleName: excerpt", "DEL VariableDeclarationFragment", "DEL SimpleName: add", "DEL VariableDeclarationFragment", "DEL ThrowStatement", "DEL Block", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL SimpleType: StringBuilder", "DEL SimpleName: varRef", "DEL SimpleName: iteratedNode", "DEL SimpleName: midLineCommentPattern", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: part", "DEL ReturnStatement", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleName: afterOpen", "DEL MethodDeclaration", "DEL SimpleName: template", "DEL SimpleName: s", "DEL Modifier: private", "DEL SimpleType: String", "DEL QualifiedName: nodes.length", "DEL SimpleType: String", "DEL SimpleName: s", "DEL Modifier: static", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: squares", "DEL SimpleName: index", "DEL StringLiteral: \"#.*$\"", "DEL SimpleType: VarRefNode", "DEL SimpleName: index", "DEL SimpleName: StringBuilder", "DEL SimpleName: start", "DEL SimpleName: newVars", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: squares", "DEL SimpleName: afterQueryOrBang", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: getClass", "DEL SingleVariableDeclaration", "DEL SimpleName: Template", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: templateIndex", "DEL Assignment: =", "DEL TextElement: JavaScript but expedient here.)", "DEL InfixExpression: ||", "DEL Assignment: =", "DEL SimpleName: endLiteral", "DEL SimpleName: List", "DEL SimpleName: parts", "DEL SimpleName: vars", "DEL StringLiteral: \"Could not scan [firstPart][secondPart] at \"", "DEL PrimitiveType: int", "DEL SimpleType: Node", "DEL SimpleName: String", "DEL SimpleName: Template", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: nodes", "DEL SimpleName: compile", "DEL WildcardType: ?", "DEL SimpleName: varRef", "DEL SimpleName: vars", "DEL MethodInvocation", "DEL SimpleName: matchingCloseSquare", "DEL SimpleName: matchingCloseSquare", "DEL SingleVariableDeclaration", "DEL SimpleName: template", "DEL SimpleName: template", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL PrefixExpression: -", "DEL Modifier: static", "DEL StringLiteral: \"\\\" in \"", "DEL StringLiteral: \"...\"", "DEL TextElement: <li>$[var![text1][text2]] to get text1 if the variable is \"false\" and text2 if it is \"true\"", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleType: CharSequence", "DEL SimpleName: dollar", "DEL SimpleType: Node", "DEL SimpleName: sb", "DEL StringLiteral: \"Expected id after $[ at \"", "DEL Modifier: abstract", "DEL CastExpression", "DEL SimpleType: String", "DEL SimpleName: nodes", "DEL PrimitiveType: char", "DEL ArrayType: String[]", "DEL SimpleName: replaceAll", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL Dimension", "DEL SimpleName: nodes", "DEL SimpleName: Method", "DEL TextElement: the public foo() method on that variable, and also \"var.foo.bar\" etc.", "DEL SimpleName: Object", "DEL Modifier: static", "DEL SimpleName: rootNode", "DEL InfixExpression: +", "DEL SimpleName: parse", "DEL SimpleName: stop", "DEL SimpleType: Object", "DEL SimpleName: stop", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleName: Template", "DEL SimpleName: c", "DEL IfStatement", "DEL SimpleType: Map", "DEL SimpleName: VarNode", "DEL SimpleName: String", "DEL ParameterizedType: List<Node>", "DEL SimpleName: charAt", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: put", "DEL SimpleType: IterationNode", "DEL SimpleName: endFirstPart", "DEL SimpleName: getVar", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL SimpleName: Map", "DEL SimpleName: start", "DEL ReturnStatement", "DEL SimpleName: c", "DEL SimpleType: Node", "DEL InfixExpression: +", "DEL PrimitiveType: int", "DEL SimpleType: Map", "DEL SimpleType: Node", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: firstNode", "DEL PrimitiveType: int", "DEL SimpleName: excerpt", "DEL SimpleName: iteratedNode", "DEL SingleVariableDeclaration", "DEL SimpleType: Class", "DEL Modifier: static", "DEL InfixExpression: ==", "DEL StringLiteral: \" at \"", "DEL InfixExpression: +", "DEL SimpleName: index", "DEL MethodDeclaration", "DEL SwitchCase", "DEL SimpleName: text", "DEL VariableDeclarationFragment", "DEL QualifiedName: template.template", "DEL SimpleName: entireLineCommentPattern", "DEL ParameterizedType: List<Node>", "DEL SimpleName: i", "DEL SimpleName: matcher", "DEL SimpleName: secondNode", "DEL SimpleName: method", "DEL SimpleName: Override", "DEL SimpleName: indexOf", "DEL ArrayAccess", "DEL MethodInvocation", "DEL SimpleName: startI", "DEL SimpleName: iterableValue", "DEL FieldAccess", "DEL SimpleName: varRef", "DEL SimpleName: closeSquare", "DEL SimpleType: String", "DEL NumberLiteral: 1", "DEL SimpleName: Map", "DEL SimpleName: getVar", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: s", "DEL StringLiteral: \" is already defined at \"", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL SimpleName: template", "DEL Block", "DEL InfixExpression: +", "DEL TypeDeclaration: class", "DEL SimpleName: IllegalArgumentException", "DEL InstanceofExpression", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleType: Method", "DEL ParameterizedType: List<Node>", "DEL FieldAccess", "DEL SimpleName: getName", "DEL SimpleName: length", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: x", "DEL StringLiteral: \"com.google.auto.value\"", "DEL SimpleName: Node", "DEL SimpleName: vars", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: List", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL SimpleName: Object", "DEL SimpleName: excerpt", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: value", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: newVars", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleType: Object", "DEL InfixExpression: <=", "DEL SimpleName: String", "DEL SimpleName: parseConditional", "DEL SimpleName: String", "DEL SimpleName: CompoundNode", "DEL FieldAccess", "DEL SimpleName: nodes", "DEL SimpleName: parseDollar", "DEL MethodInvocation", "DEL SimpleName: varRef", "DEL PrimitiveType: int", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleType: Map", "DEL InfixExpression: +", "DEL SimpleName: appendTo", "DEL SimpleName: template", "DEL SimpleName: Class", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Node", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getMethod", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL SimpleName: appendTo", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: startI", "DEL Assignment: =", "DEL ArrayType: Node[]", "DEL SimpleName: excerpt", "DEL SimpleType: Node", "DEL SimpleName: findPublicMethod", "DEL SimpleType: Number", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: vars", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL StringLiteral: \"Failed to invoke \"", "DEL SimpleName: template", "DEL MethodInvocation", "DEL SimpleName: container", "DEL MethodInvocation", "DEL Block", "DEL TextElement: <li>$[var?text] to get the text only if that variable is \"true\", using a JavaScript-ish", "DEL SimpleName: Object", "DEL SimpleName: method", "DEL SimpleName: separator", "DEL SimpleName: Node", "DEL SimpleName: j", "DEL SingleVariableDeclaration", "DEL SimpleName: closeSquare", "DEL ParameterizedType: Map<String,?>", "DEL SimpleType: String", "DEL SimpleName: dollar", "DEL ParameterizedType: Class<?>", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"$[\"", "DEL SimpleName: Number", "DEL FieldDeclaration", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleType: Template", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL SimpleName: startsWith", "DEL ExpressionStatement", "DEL SimpleName: matchingCloseSquare", "DEL SimpleType: Pattern", "DEL SimpleName: start", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: String", "DEL ParameterizedType: Map<String,?>", "DEL SimpleType: VarNode", "DEL ThrowStatement", "DEL SimpleType: Node", "DEL NumberLiteral: 1", "DEL SimpleName: text", "DEL SimpleName: charAt", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: Boolean", "DEL SimpleName: VarRefNode", "DEL MethodInvocation", "DEL SimpleName: substring", "DEL SimpleName: excerpt", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL SimpleName: sb", "DEL Block", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL ForStatement", "DEL WildcardType: ?", "DEL SimpleName: stop", "DEL Block", "DEL SimpleName: sb", "DEL PostfixExpression: ++", "DEL SimpleName: vars", "DEL SingleVariableDeclaration", "DEL SimpleName: templateIndex", "DEL SimpleName: String", "DEL SimpleName: vars", "DEL SimpleType: VarRefNode", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleName: length", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL StringLiteral: \"Reference to undefined var $[\"", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: EXCERPT_LENGTH", "DEL WhileStatement", "DEL SimpleName: ConditionalNode", "DEL SimpleName: method", "DEL PrimitiveType: void", "DEL BreakStatement", "DEL SimpleName: nodes", "DEL SimpleName: vars", "DEL MethodDeclaration", "DEL SwitchCase", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL SimpleType: ConditionalNode", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL SimpleName: Iterable", "DEL SingleVariableDeclaration", "DEL SimpleName: iterableValue", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL SimpleName: nodes", "DEL SimpleName: value", "DEL InfixExpression: !=", "DEL SimpleName: hasNext", "DEL SimpleType: IllegalArgumentException", "DEL Modifier: private", "DEL SimpleName: LiteralNode", "DEL SimpleType: Map", "DEL SimpleType: Template", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL SimpleName: findPublicMethod", "DEL SimpleType: String", "DEL SimpleName: Pattern", "DEL SimpleName: midLineCommentPattern", "DEL Block", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: afterColon", "DEL Modifier: private", "DEL SimpleName: method", "DEL SimpleName: separator", "DEL SimpleName: template", "DEL SimpleType: Node", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: EXCERPT_LENGTH", "DEL SimpleName: Node", "DEL SimpleName: template", "DEL SimpleName: Method", "DEL SimpleName: sep", "DEL SimpleName: sep", "DEL SimpleName: firstBar", "DEL Modifier: final", "DEL SimpleName: EXCERPT_LENGTH", "DEL SimpleName: CharSequence", "DEL SimpleName: template", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL IfStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: node", "DEL SimpleName: i", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ArrayAccess", "DEL NullLiteral", "DEL SimpleName: rewrite", "DEL ThrowStatement", "DEL StringLiteral: \"Expected $[listVar:iterVar|sep|...] at \"", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: Node", "DEL SimpleName: Template", "DEL SimpleName: scanVarRef", "DEL MethodDeclaration", "DEL SimpleName: container", "DEL ThisExpression", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL SimpleName: parseIteration", "DEL InfixExpression: ==", "DEL ArrayType: Node[]", "DEL StringLiteral: \"Don't know how to evaluate the truth of \"", "DEL ThisExpression", "DEL SimpleName: template", "DEL VariableDeclarationStatement", "DEL Modifier: static", "DEL SimpleName: sb", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL SimpleName: charAt", "DEL MethodDeclaration", "DEL Block", "DEL IfStatement", "DEL TextElement: notion of truth where null and 0 and empty strings are false. (That's horrible in", "DEL SimpleType: String", "DEL SimpleName: s", "DEL StringLiteral: \"No method \\\"\"", "DEL SimpleName: String", "DEL SimpleName: sb", "DEL VariableDeclarationFragment", "DEL InfixExpression: <", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: value", "DEL Block", "DEL SimpleType: Node", "DEL WildcardType: ?", "DEL SimpleName: template", "DEL SimpleName: iterationVarName", "DEL SimpleName: sb", "DEL VariableDeclarationFragment", "DEL SimpleName: varRef", "DEL SimpleName: template", "DEL FieldAccess", "DEL SimpleName: String", "DEL SimpleName: iterationVarName", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: Node", "DEL TextElement: <ul>", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL MethodDeclaration", "DEL VariableDeclarationExpression", "DEL SimpleType: Node", "DEL SimpleName: substring", "DEL SimpleName: getVar", "DEL TypeDeclaration: class", "DEL SimpleName: scanVarRef", "DEL VariableDeclarationFragment", "DEL SimpleName: getModifiers", "DEL Modifier: private", "DEL SimpleName: templateIndex", "DEL SimpleName: separator", "DEL SimpleName: text", "DEL InfixExpression: +", "DEL SimpleName: Node", "DEL SimpleName: afterQueryOrBang", "DEL ExpressionStatement", "DEL SimpleName: vars", "DEL MethodInvocation", "DEL SimpleName: CompoundNode", "DEL SimpleName: parts", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: Node", "DEL SimpleType: HashMap", "DEL SimpleName: c", "DEL SimpleName: sb", "DEL Modifier: abstract", "DEL SimpleName: VarRefNode", "DEL MethodDeclaration", "DEL SimpleName: template", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL Modifier: static", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: stripComments", "DEL SimpleName: index", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: i", "DEL Modifier: final", "DEL SimpleName: matcher", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleName: s", "DEL WildcardType: ?", "DEL SimpleName: templateIndex", "DEL SimpleName: excerpt", "DEL ReturnStatement", "DEL SimpleName: String", "DEL TextElement: which must be an Iterable, with the sep string appearing between each repetition, and", "DEL CharacterLiteral: '!'", "DEL SimpleName: sb", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL SimpleName: i", "DEL SimpleName: vars", "DEL SimpleName: LiteralNode", "DEL SimpleType: Method", "DEL SimpleName: Object", "DEL SimpleName: findPublicMethod", "DEL VariableDeclarationStatement", "DEL SimpleName: sb", "DEL SimpleName: method", "DEL ParameterizedType: Iterable<?>", "DEL ParameterizedType: Map<String,?>", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL SimpleName: Template", "DEL VariableDeclarationFragment", "DEL SimpleType: Node", "DEL WildcardType: ?", "DEL IfStatement", "DEL PrimitiveType: int", "DEL SimpleName: Template", "DEL SimpleType: Pattern", "DEL SimpleName: nodes", "DEL Block", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL StringLiteral: \"\"", "DEL SimpleName: String", "DEL SimpleType: String", "DEL WildcardType: ?", "DEL SimpleType: IllegalArgumentException", "DEL SuperConstructorInvocation", "DEL SimpleName: text", "DEL SimpleName: pattern", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL SimpleName: s", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: stop", "DEL SimpleName: Node", "DEL SimpleName: methodName", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: matcher", "DEL ClassInstanceCreation", "DEL SimpleName: value", "DEL SimpleName: template", "DEL Modifier: private", "DEL SimpleName: firstBar", "DEL SimpleName: x", "DEL SimpleName: secondBar", "DEL SimpleName: nodes", "DEL SimpleType: Boolean", "DEL SimpleName: varRef", "DEL ArrayInitializer", "DEL ClassInstanceCreation", "DEL SimpleName: StringBuilder", "DEL SimpleName: vars", "DEL SimpleName: templateIndex", "DEL SimpleName: start", "DEL SimpleType: Template", "DEL SimpleName: iterationVarName", "DEL TypeDeclaration: class", "DEL SimpleType: String", "DEL SimpleName: i", "DEL SimpleName: nodes", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '['", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: dollar", "DEL ParameterizedType: Iterable<?>", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: firstBar", "DEL SimpleName: replaceAll", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: template", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL InfixExpression: +", "DEL Modifier: private", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: Map", "DEL SimpleName: invoke", "DEL SimpleName: iterated", "DEL Modifier: static", "DEL Block", "DEL FieldAccess", "DEL SimpleName: IterationNode", "DEL SimpleName: template", "DEL SimpleName: value", "DEL SimpleName: Node", "DEL SimpleName: varRef", "DEL SimpleName: stop", "DEL FieldAccess", "DEL TextElement: <li>$[var!text] to get the text only if that variable is \"false\".", "DEL SingleVariableDeclaration", "DEL CharacterLiteral: ':'", "DEL CastExpression", "DEL SimpleName: Node", "DEL SimpleName: template", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: secondBar", "DEL IfStatement", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: e", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: stripComments", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: template", "DEL Block", "DEL TextElement: </ul>", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: List", "DEL SimpleType: Object", "DEL SimpleName: Map", "DEL SimpleName: c", "DEL SimpleType: String", "DEL SimpleName: startI", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: Object", "DEL SimpleName: stop", "DEL SimpleName: VarNode", "DEL SimpleType: String", "DEL SimpleName: i", "DEL SimpleName: squares", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: templateIndex", "DEL SimpleName: Pattern", "DEL SimpleName: appendTo", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL SimpleName: dollar", "DEL SimpleName: dollar", "DEL SimpleName: iterable", "DEL SimpleName: indexOf", "DEL SimpleName: appendTo", "DEL BreakStatement", "DEL StringLiteral: \"|\"", "DEL SimpleName: c", "DEL CharacterLiteral: '?'", "DEL SimpleName: separator", "DEL SimpleType: Matcher", "DEL SimpleName: Template", "DEL PrimitiveType: char", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: stop", "DEL SimpleName: stop", "DEL TypeDeclaration: class", "DEL Block", "DEL SimpleName: appendTo", "DEL SimpleName: template", "DEL SimpleType: LiteralNode", "DEL SimpleName: appendTo", "DEL VariableDeclarationFragment", "DEL SimpleType: ArrayList", "DEL SimpleName: append", "DEL SimpleName: dollar", "DEL StringLiteral: \"\"", "DEL SimpleName: Override", "DEL QualifiedName: parts.length", "DEL EnhancedForStatement", "DEL InfixExpression: ==", "DEL SimpleName: iterableValue", "DEL MethodInvocation", "DEL Modifier: private", "DEL InfixExpression: >=", "DEL MethodInvocation", "DEL SimpleType: Node", "DEL ThisExpression", "DEL SimpleName: index", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleName: method", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Block", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL SimpleName: closeSquare", "DEL ArrayCreation", "DEL Block", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: CharSequence", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL ParameterizedType: ArrayList<Node>", "DEL InstanceofExpression", "DEL ClassInstanceCreation", "DEL SimpleName: varRefPattern", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: String", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleType: Template", "DEL ParameterizedType: Map<String,?>", "DEL Modifier: static", "DEL IfStatement", "DEL SimpleName: x", "DEL TextElement: the variable \"strings\" is [\"foo\", \"bar\", \"baz\"] then \"$[strings:string|, |'$[string]']\"", "DEL SimpleType: LiteralNode", "DEL IfStatement", "DEL InfixExpression: +", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: sb", "DEL SimpleName: template", "DEL SimpleType: String", "DEL SimpleType: ConditionalNode", "DEL BooleanLiteral: false", "DEL CharacterLiteral: ']'", "DEL SimpleName: String", "DEL SuperConstructorInvocation", "DEL SimpleName: closeSquare", "DEL VariableDeclarationStatement", "DEL SimpleName: nodes", "DEL SimpleName: value", "DEL MethodInvocation", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"|\"", "DEL TypeDeclaration: class", "DEL SimpleName: Iterable", "DEL EnhancedForStatement", "DEL StringLiteral: \"\"", "DEL Block", "DEL SimpleName: nodes", "DEL SimpleName: methodName", "DEL Block", "DEL MarkerAnnotation", "DEL QualifiedName: template.template", "DEL NumberLiteral: 1", "DEL SimpleName: dollar", "DEL SingleVariableDeclaration", "DEL SimpleName: templateIndex", "DEL SimpleName: endFirstPart", "DEL SimpleName: node", "DEL NumberLiteral: 0", "DEL ConditionalExpression", "DEL IfStatement", "DEL Block", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL EnhancedForStatement", "DEL SimpleName: NoSuchMethodException", "DEL VariableDeclarationStatement", "DEL SimpleName: firstNode", "DEL SingleVariableDeclaration", "DEL TagElement: @author", "DEL SimpleType: IllegalArgumentException", "DEL Block", "DEL PrimitiveType: int", "DEL ArrayType: Node[]", "DEL SimpleName: Template", "DEL MethodDeclaration", "DEL SimpleName: template", "DEL StringLiteral: \"No closing ] to match text starting \"", "DEL SimpleName: nodes", "DEL SimpleType: Number", "DEL InfixExpression: +", "DEL SimpleName: String", "DEL SimpleName: secondNode", "DEL SimpleName: Node", "DEL SimpleName: templateIndex", "DEL SimpleType: String", "DEL SimpleName: Pattern", "DEL VariableDeclarationFragment", "DEL SimpleName: template", "DEL SingleVariableDeclaration", "DEL SimpleType: Template", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map<String,?>", "DEL Assignment: =", "DEL IfStatement", "DEL TextElement: Template processor for a small templating language.", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL MarkerAnnotation", "DEL ClassInstanceCreation", "DEL SimpleName: templateIndex", "DEL SimpleName: endFirstPart", "DEL SimpleName: String", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: vars", "DEL SimpleType: Node", "DEL SimpleName: intf", "DEL SimpleName: vars", "DEL SimpleName: s", "DEL WildcardType: ?", "DEL TextElement: <li>$[iterablevar:loopvar|sep|text] to get the text repeated for each element of iterablevar,", "DEL SimpleName: Template", "DEL ThrowStatement", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Pattern", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: dollar", "DEL SimpleName: StringBuilder", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL SimpleName: templateIndex", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: template", "DEL Modifier: final", "DEL SimpleType: Template", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL SimpleName: s", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: x", "DEL InfixExpression: +", "DEL SimpleName: StringBuilder", "DEL SimpleName: toString", "DEL SimpleName: endFirstPart", "DEL VariableDeclarationFragment", "DEL SimpleName: split", "DEL SimpleName: template", "DEL SimpleType: Map", "DEL Modifier: static", "DEL SimpleName: method", "DEL Dimension", "DEL SimpleName: template", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL SimpleName: CompoundNode", "DEL FieldAccess", "DEL SimpleName: Boolean", "DEL SimpleName: dollar", "DEL SimpleName: template", "DEL SimpleName: Map", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: dollar", "DEL SimpleName: stop", "DEL SimpleName: e", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleType: Iterable", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: IllegalArgumentException", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: Node", "DEL SimpleName: substring", "DEL SimpleName: charAt", "DEL SimpleName: x", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: String", "DEL SimpleType: Node", "DEL SimpleName: findPublicMethod", "DEL ReturnStatement", "DEL StringLiteral: \".\"", "DEL Modifier: private", "DEL SimpleName: Node", "DEL SimpleName: iteratedNode", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL SimpleName: sb", "DEL SimpleName: startI", "DEL SimpleName: closeSquare", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Block", "DEL ArrayCreation", "DEL Modifier: abstract", "DEL SimpleName: nodes", "DEL SimpleName: StringBuilder", "DEL IfStatement", "DEL Block", "DEL InfixExpression: <", "DEL SimpleName: i", "DEL SimpleName: sb", "DEL NumberLiteral: 2", "DEL SimpleName: Node", "DEL SimpleName: parse", "DEL NumberLiteral: 0", "DEL SimpleName: template", "DEL SimpleName: dollar", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL SimpleName: endFirstPart", "DEL SimpleName: i", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: iterator", "DEL ExpressionStatement", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: HashMap", "DEL SimpleType: Object", "DEL InfixExpression: -", "DEL SimpleName: varRef", "DEL Block", "DEL SimpleName: startsWith", "DEL SimpleName: length", "DEL WildcardType: ?", "DEL SimpleName: varRef", "DEL SimpleName: compile", "DEL SimpleType: String", "DEL SimpleName: iterable", "DEL SimpleName: sep", "DEL ReturnStatement", "DEL Block", "DEL AssertStatement", "DEL MethodInvocation", "DEL ArrayType: Node[]", "DEL TextElement: The idea is that a certain numver of variables are defined beforehand, and you can then write:", "DEL VariableDeclarationStatement", "DEL SimpleName: VarRefNode", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: c", "DEL ReturnStatement", "DEL SimpleName: compile", "DEL SimpleName: getClass", "DEL Assignment: =", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: matchingCloseSquare", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: template", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: closeSquare", "DEL ParameterizedType: Iterable<?>", "DEL SimpleType: Node", "DEL FieldAccess", "DEL SimpleName: value", "DEL SimpleName: iterated", "DEL MethodInvocation", "DEL SimpleName: iteratedNode", "DEL PostfixExpression: ++", "DEL ThisExpression", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL BreakStatement", "DEL SimpleName: Node", "DEL NullLiteral", "DEL SimpleName: template", "DEL VariableDeclarationFragment", "DEL SimpleName: dollar", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: vars", "DEL SimpleName: j", "DEL VariableDeclarationFragment", "DEL SimpleName: Class", "DEL SimpleName: intf", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL CharacterLiteral: '['", "DEL SimpleName: excerpt", "DEL SimpleName: substring", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Iterable<?>", "DEL SimpleName: IllegalArgumentException", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ParameterizedType: HashMap<String,Object>", "DEL MethodInvocation", "DEL SimpleName: templateIndex", "DEL SimpleName: template", "DEL SingleVariableDeclaration", "DEL SimpleName: template", "DEL SimpleName: getClass", "DEL SimpleType: Pattern", "DEL SimpleName: nodes", "DEL SimpleName: c", "DEL InfixExpression: ==", "DEL SimpleName: afterQueryOrBang", "DEL SingleVariableDeclaration", "DEL SimpleName: varRef", "DEL MethodInvocation", "DEL SimpleName: text", "DEL SimpleName: Node", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL QualifiedName: template.template", "DEL SimpleName: value", "DEL Javadoc", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL Block", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: template", "DEL QualifiedName: Pattern.MULTILINE", "DEL SimpleName: templateIndex", "DEL SimpleName: append", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL SimpleName: secondNode", "DEL VariableDeclarationFragment", "DEL SimpleType: Node", "DEL MethodDeclaration", "DEL Block", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: templateIndex", "DEL SimpleName: start", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL SimpleType: Boolean", "DEL ParameterizedType: Iterable<?>", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: iterableValue", "DEL ReturnStatement", "DEL SimpleName: parseDollar", "DEL SimpleName: truth", "DEL SimpleName: firstNode", "DEL SimpleName: nodes", "DEL SimpleName: x", "DEL Block", "DEL SimpleName: method", "DEL StringLiteral: \"$[\"", "DEL SimpleName: iterationVarName", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: matcher", "DEL FieldDeclaration", "DEL SimpleType: Node", "DEL Modifier: private", "DEL QualifiedName: template.template", "DEL SimpleName: separator", "DEL TextElement: <li>$[var] to get the toString() value of that variable", "DEL SimpleName: Map", "DEL SimpleName: nodes", "DEL SimpleType: String", "DEL Modifier: private", "DEL ParameterizedType: Class<?>", "DEL Assignment: =", "DEL SimpleType: NoSuchMethodException", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL PrimitiveType: int", "DEL SimpleName: rootNode", "DEL SimpleName: closeSquare", "DEL SimpleName: Map", "DEL InfixExpression: <", "DEL Modifier: static", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: secondNode", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: Pattern", "DEL StringLiteral: \"^\\\\s*#.*$\\n\"", "DEL SimpleName: List", "DEL VariableDeclarationStatement", "DEL SimpleName: varRef", "DEL Modifier: private", "DEL ThisExpression", "DEL SimpleName: Matcher", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL SimpleType: Template", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: startI", "DEL StringLiteral: \"() on \"", "DEL SimpleType: String", "DEL Block", "DEL ThrowStatement", "DEL PrimitiveType: int", "DEL SimpleType: IllegalArgumentException", "DEL Modifier: static", "DEL MethodDeclaration", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: IllegalArgumentException", "DEL BreakStatement", "DEL ArrayType: Node[]", "DEL SimpleName: stop", "DEL SimpleName: Map", "DEL SimpleName: template", "DEL SimpleName: String", "DEL Modifier: final", "DEL AssertStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: StringBuilder", "DEL TextElement: <p>Everywhere you can write \"var\" you can also write \"var.foo\" to use the result of calling", "DEL SimpleType: String", "DEL SimpleName: varRef", "DEL Block", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL ForStatement", "DEL ExpressionStatement", "DEL SimpleName: nodes", "DEL CharacterLiteral: ']'", "DEL SimpleName: template", "DEL SimpleName: StringBuilder", "DEL StringLiteral: \"Value (\"", "DEL Block", "DEL SimpleName: x", "DEL SimpleName: stop", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: IllegalArgumentException", "DEL PrimitiveType: int", "DEL SimpleName: substring", "DEL SimpleName: varRefPattern", "DEL StringLiteral: \"] at \"", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL SimpleName: sb", "DEL SimpleName: template", "DEL SimpleName: queryOrBang", "DEL SimpleName: j", "DEL SimpleName: varRef", "DEL ReturnStatement", "DEL SimpleName: stop", "DEL Modifier: static", "DEL SimpleName: x", "DEL SimpleName: isPublic", "DEL SimpleName: closeSquare", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: part", "DEL SimpleName: templateIndex", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL ArrayAccess", "DEL SimpleName: excerpt", "DEL StringLiteral: \"\"", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: Node", "DEL SimpleName: secondBar", "DEL SimpleName: Node", "DEL SimpleName: squares", "DEL SimpleName: template", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: ConditionalNode", "DEL InstanceofExpression", "DEL InfixExpression: +", "DEL SimpleName: appendTo", "DEL StringLiteral: \"\\\\p{javaJavaIdentifierPart}+(\\\\.\\\\p{javaJavaIdentifierPart}+)*\"", "DEL Modifier: static", "DEL IfStatement", "DEL SimpleType: Iterable", "DEL PrimitiveType: int", "DEL SimpleName: containsKey", "DEL SimpleName: String", "DEL AssertStatement", "DEL SimpleName: pattern", "DEL SimpleType: String", "DEL SimpleName: template", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: template", "DEL SimpleName: templateIndex", "DEL SimpleName: x", "DEL InfixExpression: !=", "DEL InfixExpression: +", "DEL PrimitiveType: int", "DEL StringLiteral: \"$[\"", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: queryOrBang", "DEL Assignment: =", "DEL SimpleName: endLiteral", "DEL SimpleName: getSuperclass", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: excerpt", "DEL SimpleName: template", "DEL SimpleName: templateIndex", "DEL SimpleName: x", "DEL SimpleType: VarRefNode", "DEL SimpleType: CharSequence", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL AssertStatement", "DEL SimpleName: template", "DEL SimpleName: queryOrBang", "DEL SimpleName: LiteralNode", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: substring", "DEL SimpleName: getVar", "DEL SimpleName: part", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: endLiteral", "DEL WildcardType: ?", "DEL SimpleType: String", "DEL SimpleName: truth", "DEL SimpleName: nodes", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL CastExpression", "DEL SimpleName: Modifier", "DEL SimpleName: afterColon", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL NumberLiteral: 2", "DEL SimpleName: parse", "DEL SimpleName: appendTo", "DEL SimpleName: charAt", "DEL SimpleName: separator", "DEL SimpleName: Node", "DEL SimpleType: StringBuilder", "DEL AssertStatement", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL SimpleName: doubleValue"]}]}}, {"Template_diff": {"operations": ["Delete QualifiedName: com.google.auto.value.processor(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Method(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Modifier(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.ArrayList(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashMap(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.List(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Map(12)", "Delete ImportDeclaration(13)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.regex.Pattern(16)", "Delete ImportDeclaration(17)", "Delete TextElement: Template processor for a small templating language.(18)", "Delete TextElement: The idea is that a certain numver of variables are defined beforehand, and you can then write:(19)", "Delete TextElement: <ul>(20)", "Delete TextElement: <li>$[var] to get the toString() value of that variable(21)", "Delete TextElement: <li>$[var?text] to get the text only if that variable is \"true\", using a JavaScript-ish(22)", "Delete TextElement: notion of truth where null and 0 and empty strings are false. (That's horrible in(23)", "Delete TextElement: JavaScript but expedient here.)(24)", "Delete TextElement: <li>$[var!text] to get the text only if that variable is \"false\".(25)", "Delete TextElement: <li>$[var?[text1][text2]] to get text1 if the variable is \"true\" and text2 if it is \"false\"(26)", "Delete TextElement: <li>$[var![text1][text2]] to get text1 if the variable is \"false\" and text2 if it is \"true\"(27)", "Delete TextElement: <li>$[iterablevar:loopvar|sep|text] to get the text repeated for each element of iterablevar,(28)", "Delete TextElement: which must be an Iterable, with the sep string appearing between each repetition, and(29)", "Delete TextElement: loopvar defined to be the element for substitutions within the text. For example if(30)", "Delete TextElement: the variable \"strings\" is [\"foo\", \"bar\", \"baz\"] then \"$[strings:string|, |'$[string]']\"(31)", "Delete TextElement: will become \"'foo', 'bar', 'baz'\".(32)", "Delete TextElement: </ul>(33)", "Delete TextElement: <p>Everywhere you can write \"var\" you can also write \"var.foo\" to use the result of calling(34)", "Delete TextElement: the public foo() method on that variable, and also \"var.foo.bar\" etc.(35)", "Delete TagElement(36)", "Delete TextElement:  Éamonn McManus(37)", "Delete TagElement: @author(38)", "Delete Javadoc(39)", "Delete SimpleName: Template(40)", "Delete Modifier: private(41)", "Delete Modifier: final(42)", "Delete SimpleName: String(43)", "Delete SimpleType: String(44)", "Delete SimpleName: template(45)", "Delete VariableDeclarationFragment(46)", "Delete FieldDeclaration(47)", "Delete Modifier: private(48)", "Delete Modifier: final(49)", "Delete SimpleName: Node(50)", "Delete SimpleType: Node(51)", "Delete SimpleName: rootNode(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete Modifier: private(55)", "Delete SimpleName: Template(56)", "Delete SimpleName: String(57)", "Delete SimpleType: String(58)", "Delete SimpleName: template(59)", "Delete SingleVariableDeclaration(60)", "Delete ThisExpression(61)", "Delete SimpleName: template(62)", "Delete FieldAccess(63)", "Delete SimpleName: stripComments(64)", "Delete SimpleName: template(65)", "Delete MethodInvocation(66)", "Delete Assignment: =(67)", "Delete ExpressionStatement(68)", "Delete SimpleName: rootNode(69)", "Delete SimpleName: parse(70)", "Delete ThisExpression(71)", "Delete SimpleName: template(72)", "Delete FieldAccess(73)", "Delete NumberLiteral: 0(74)", "Delete ThisExpression(75)", "Delete SimpleName: template(76)", "Delete FieldAccess(77)", "Delete SimpleName: length(78)", "Delete MethodInvocation(79)", "Delete MethodInvocation(80)", "Delete Assignment: =(81)", "Delete ExpressionStatement(82)", "Delete Block(83)", "Delete MethodDeclaration(84)", "Delete Modifier: static(85)", "Delete SimpleName: Template(86)", "Delete SimpleType: Template(87)", "Delete SimpleName: compile(88)", "Delete SimpleName: String(89)", "Delete SimpleType: String(90)", "Delete SimpleName: template(91)", "Delete SingleVariableDeclaration(92)", "Delete SimpleName: Template(93)", "Delete SimpleType: Template(94)", "Delete SimpleName: template(95)", "Delete ClassInstanceCreation(96)", "Delete ReturnStatement(97)", "Delete Block(98)", "Delete MethodDeclaration(99)", "Delete SimpleName: String(100)", "Delete SimpleType: String(101)", "Delete SimpleName: rewrite(102)", "Delete SimpleName: Map(103)", "Delete SimpleType: Map(104)", "Delete SimpleName: String(105)", "Delete SimpleType: String(106)", "Delete WildcardType: ?(107)", "Delete ParameterizedType: Map<String,?>(108)", "Delete SimpleName: vars(109)", "Delete SingleVariableDeclaration(110)", "Delete SimpleName: StringBuilder(111)", "Delete SimpleType: StringBuilder(112)", "Delete SimpleName: sb(113)", "Delete SimpleName: StringBuilder(114)", "Delete SimpleType: StringBuilder(115)", "Delete ClassInstanceCreation(116)", "Delete VariableDeclarationFragment(117)", "Delete VariableDeclarationStatement(118)", "Delete SimpleName: rootNode(119)", "Delete SimpleName: appendTo(120)", "Delete SimpleName: sb(121)", "Delete ThisExpression(122)", "Delete SimpleName: vars(123)", "Delete MethodInvocation(124)", "Delete ExpressionStatement(125)", "Delete SimpleName: sb(126)", "Delete SimpleName: toString(127)", "Delete MethodInvocation(128)", "Delete ReturnStatement(129)", "Delete Block(130)", "Delete MethodDeclaration(131)", "Delete Modifier: private(132)", "Delete Modifier: static(133)", "Delete SimpleName: Node(134)", "Delete SimpleType: Node(135)", "Delete SimpleName: parse(136)", "Delete SimpleName: String(137)", "Delete SimpleType: String(138)", "Delete SimpleName: template(139)", "Delete SingleVariableDeclaration(140)", "Delete PrimitiveType: int(141)", "Delete SimpleName: start(142)", "Delete SingleVariableDeclaration(143)", "Delete PrimitiveType: int(144)", "Delete SimpleName: stop(145)", "Delete SingleVariableDeclaration(146)", "Delete SimpleName: List(147)", "Delete SimpleType: List(148)", "Delete SimpleName: Node(149)", "Delete SimpleType: Node(150)", "Delete ParameterizedType: List<Node>(151)", "Delete SimpleName: nodes(152)", "Delete SimpleName: ArrayList(153)", "Delete SimpleType: ArrayList(154)", "Delete SimpleName: Node(155)", "Delete SimpleType: Node(156)", "Delete ParameterizedType: ArrayList<Node>(157)", "Delete ClassInstanceCreation(158)", "Delete VariableDeclarationFragment(159)", "Delete VariableDeclarationStatement(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: index(162)", "Delete SimpleName: start(163)", "Delete VariableDeclarationFragment(164)", "Delete VariableDeclarationStatement(165)", "Delete SimpleName: index(166)", "Delete SimpleName: stop(167)", "Delete InfixExpression: <(168)", "Delete PrimitiveType: int(169)", "Delete SimpleName: dollar(170)", "Delete SimpleName: indexOf(171)", "Delete SimpleName: template(172)", "Delete StringLiteral: \"$[\"(173)", "Delete SimpleName: index(174)", "Delete SimpleName: stop(175)", "Delete MethodInvocation(176)", "Delete VariableDeclarationFragment(177)", "Delete VariableDeclarationStatement(178)", "Delete PrimitiveType: int(179)", "Delete SimpleName: endLiteral(180)", "Delete SimpleName: dollar(181)", "Delete NumberLiteral: 0(182)", "Delete InfixExpression: <(183)", "Delete ParenthesizedExpression(184)", "Delete SimpleName: stop(185)", "Delete SimpleName: dollar(186)", "Delete ConditionalExpression(187)", "Delete VariableDeclarationFragment(188)", "Delete VariableDeclarationStatement(189)", "Delete SimpleName: endLiteral(190)", "Delete SimpleName: index(191)", "Delete InfixExpression: >(192)", "Delete SimpleName: nodes(193)", "Delete SimpleName: add(194)", "Delete SimpleName: LiteralNode(195)", "Delete SimpleType: LiteralNode(196)", "Delete SimpleName: index(197)", "Delete SimpleName: template(198)", "Delete SimpleName: substring(199)", "Delete SimpleName: index(200)", "Delete SimpleName: endLiteral(201)", "Delete MethodInvocation(202)", "Delete ClassInstanceCreation(203)", "Delete MethodInvocation(204)", "Delete ExpressionStatement(205)", "Delete SimpleName: index(206)", "Delete SimpleName: endLiteral(207)", "Delete Assignment: =(208)", "Delete ExpressionStatement(209)", "Delete Block(210)", "Delete IfStatement(211)", "Delete SimpleName: dollar(212)", "Delete NumberLiteral: 0(213)", "Delete InfixExpression: >=(214)", "Delete PrimitiveType: int(215)", "Delete SimpleName: closeSquare(216)", "Delete SimpleName: matchingCloseSquare(217)", "Delete SimpleName: template(218)", "Delete SimpleName: dollar(219)", "Delete MethodInvocation(220)", "Delete VariableDeclarationFragment(221)", "Delete VariableDeclarationStatement(222)", "Delete SimpleName: nodes(223)", "Delete SimpleName: add(224)", "Delete SimpleName: parseDollar(225)", "Delete SimpleName: template(226)", "Delete SimpleName: dollar(227)", "Delete SimpleName: closeSquare(228)", "Delete MethodInvocation(229)", "Delete MethodInvocation(230)", "Delete ExpressionStatement(231)", "Delete SimpleName: index(232)", "Delete SimpleName: closeSquare(233)", "Delete NumberLiteral: 1(234)", "Delete InfixExpression: +(235)", "Delete Assignment: =(236)", "Delete ExpressionStatement(237)", "Delete Block(238)", "Delete IfStatement(239)", "Delete Block(240)", "Delete WhileStatement(241)", "Delete SimpleName: index(242)", "Delete SimpleName: stop(243)", "Delete InfixExpression: ==(244)", "Delete AssertStatement(245)", "Delete SimpleName: CompoundNode(246)", "Delete SimpleType: CompoundNode(247)", "Delete SimpleName: start(248)", "Delete SimpleName: nodes(249)", "Delete ClassInstanceCreation(250)", "Delete ReturnStatement(251)", "Delete Block(252)", "Delete MethodDeclaration(253)", "Delete Modifier: private(254)", "Delete Modifier: static(255)", "Delete SimpleName: Node(256)", "Delete SimpleType: Node(257)", "Delete SimpleName: parseDollar(258)", "Delete SimpleName: String(259)", "Delete SimpleType: String(260)", "Delete SimpleName: template(261)", "Delete SingleVariableDeclaration(262)", "Delete PrimitiveType: int(263)", "Delete SimpleName: dollar(264)", "Delete SingleVariableDeclaration(265)", "Delete PrimitiveType: int(266)", "Delete SimpleName: closeSquare(267)", "Delete SingleVariableDeclaration(268)", "Delete SimpleName: template(269)", "Delete SimpleName: startsWith(270)", "Delete StringLiteral: \"$[\"(271)", "Delete SimpleName: dollar(272)", "Delete MethodInvocation(273)", "Delete AssertStatement(274)", "Delete SimpleName: template(275)", "Delete SimpleName: charAt(276)", "Delete SimpleName: closeSquare(277)", "Delete MethodInvocation(278)", "Delete CharacterLiteral: ']'(279)", "Delete InfixExpression: ==(280)", "Delete AssertStatement(281)", "Delete PrimitiveType: int(282)", "Delete SimpleName: afterOpen(283)", "Delete SimpleName: dollar(284)", "Delete StringLiteral: \"$[\"(285)", "Delete SimpleName: length(286)", "Delete MethodInvocation(287)", "Delete InfixExpression: +(288)", "Delete VariableDeclarationFragment(289)", "Delete VariableDeclarationStatement(290)", "Delete PrimitiveType: int(291)", "Delete SimpleName: i(292)", "Delete SimpleName: scanVarRef(293)", "Delete SimpleName: template(294)", "Delete SimpleName: afterOpen(295)", "Delete SimpleName: closeSquare(296)", "Delete MethodInvocation(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)", "Delete SimpleName: String(300)", "Delete SimpleType: String(301)", "Delete SimpleName: varRef(302)", "Delete SimpleName: template(303)", "Delete SimpleName: substring(304)", "Delete SimpleName: afterOpen(305)", "Delete SimpleName: i(306)", "Delete MethodInvocation(307)", "Delete VariableDeclarationFragment(308)", "Delete VariableDeclarationStatement(309)", "Delete SimpleName: Node(310)", "Delete SimpleType: Node(311)", "Delete SimpleName: node(312)", "Delete VariableDeclarationFragment(313)", "Delete VariableDeclarationStatement(314)", "Delete PrimitiveType: char(315)", "Delete SimpleName: c(316)", "Delete SimpleName: template(317)", "Delete SimpleName: charAt(318)", "Delete SimpleName: i(319)", "Delete MethodInvocation(320)", "Delete VariableDeclarationFragment(321)", "Delete VariableDeclarationStatement(322)", "Delete SimpleName: c(323)", "Delete CharacterLiteral: ']'(324)", "Delete SwitchCase(325)", "Delete SimpleName: node(326)", "Delete SimpleName: VarNode(327)", "Delete SimpleType: VarNode(328)", "Delete SimpleName: i(329)", "Delete SimpleName: varRef(330)", "Delete ClassInstanceCreation(331)", "Delete Assignment: =(332)", "Delete ExpressionStatement(333)", "Delete BreakStatement(334)", "Delete CharacterLiteral: '?'(335)", "Delete SwitchCase(336)", "Delete CharacterLiteral: '!'(337)", "Delete SwitchCase(338)", "Delete SimpleName: node(339)", "Delete SimpleName: parseConditional(340)", "Delete SimpleName: template(341)", "Delete SimpleName: dollar(342)", "Delete SimpleName: varRef(343)", "Delete SimpleName: c(344)", "Delete SimpleName: i(345)", "Delete NumberLiteral: 1(346)", "Delete InfixExpression: +(347)", "Delete SimpleName: closeSquare(348)", "Delete MethodInvocation(349)", "Delete Assignment: =(350)", "Delete ExpressionStatement(351)", "Delete BreakStatement(352)", "Delete CharacterLiteral: ':'(353)", "Delete SwitchCase(354)", "Delete SimpleName: node(355)", "Delete SimpleName: parseIteration(356)", "Delete SimpleName: template(357)", "Delete SimpleName: dollar(358)", "Delete SimpleName: varRef(359)", "Delete SimpleName: i(360)", "Delete NumberLiteral: 1(361)", "Delete InfixExpression: +(362)", "Delete SimpleName: closeSquare(363)", "Delete MethodInvocation(364)", "Delete Assignment: =(365)", "Delete ExpressionStatement(366)", "Delete BreakStatement(367)", "Delete SwitchCase(368)", "Delete SimpleName: IllegalArgumentException(369)", "Delete SimpleType: IllegalArgumentException(370)", "Delete StringLiteral: \"Unexpected character after variable name at \"(371)", "Delete SimpleName: excerpt(372)", "Delete SimpleName: template(373)", "Delete SimpleName: dollar(374)", "Delete MethodInvocation(375)", "Delete InfixExpression: +(376)", "Delete ClassInstanceCreation(377)", "Delete ThrowStatement(378)", "Delete SwitchStatement(379)", "Delete SimpleName: node(380)", "Delete ReturnStatement(381)", "Delete Block(382)", "Delete MethodDeclaration(383)", "Delete Modifier: private(384)", "Delete Modifier: static(385)", "Delete SimpleName: ConditionalNode(386)", "Delete SimpleType: ConditionalNode(387)", "Delete SimpleName: parseConditional(388)", "Delete SimpleName: String(389)", "Delete SimpleType: String(390)", "Delete SimpleName: template(391)", "Delete SingleVariableDeclaration(392)", "Delete PrimitiveType: int(393)", "Delete SimpleName: dollar(394)", "Delete SingleVariableDeclaration(395)", "Delete SimpleName: String(396)", "Delete SimpleType: String(397)", "Delete SimpleName: varRef(398)", "Delete SingleVariableDeclaration(399)", "Delete PrimitiveType: char(400)", "Delete SimpleName: queryOrBang(401)", "Delete SingleVariableDeclaration(402)", "Delete PrimitiveType: int(403)", "Delete SimpleName: afterQueryOrBang(404)", "Delete SingleVariableDeclaration(405)", "Delete PrimitiveType: int(406)", "Delete SimpleName: stop(407)", "Delete SingleVariableDeclaration(408)", "Delete SimpleName: template(409)", "Delete SimpleName: charAt(410)", "Delete SimpleName: stop(411)", "Delete MethodInvocation(412)", "Delete CharacterLiteral: ']'(413)", "Delete InfixExpression: ==(414)", "Delete AssertStatement(415)", "Delete SimpleName: Node(416)", "Delete SimpleType: Node(417)", "Delete SimpleName: firstNode(418)", "Delete VariableDeclarationFragment(419)", "Delete VariableDeclarationStatement(420)", "Delete SimpleName: Node(421)", "Delete SimpleType: Node(422)", "Delete SimpleName: secondNode(423)", "Delete VariableDeclarationFragment(424)", "Delete VariableDeclarationStatement(425)", "Delete SimpleName: template(426)", "Delete SimpleName: charAt(427)", "Delete SimpleName: afterQueryOrBang(428)", "Delete MethodInvocation(429)", "Delete CharacterLiteral: '['(430)", "Delete InfixExpression: ==(431)", "Delete PrimitiveType: int(432)", "Delete SimpleName: endFirstPart(433)", "Delete SimpleName: matchingCloseSquare(434)", "Delete SimpleName: template(435)", "Delete SimpleName: afterQueryOrBang(436)", "Delete MethodInvocation(437)", "Delete VariableDeclarationFragment(438)", "Delete VariableDeclarationStatement(439)", "Delete SimpleName: template(440)", "Delete SimpleName: charAt(441)", "Delete SimpleName: endFirstPart(442)", "Delete NumberLiteral: 1(443)", "Delete InfixExpression: +(444)", "Delete MethodInvocation(445)", "Delete CharacterLiteral: '['(446)", "Delete InfixExpression: !=(447)", "Delete SimpleName: matchingCloseSquare(448)", "Delete SimpleName: template(449)", "Delete SimpleName: endFirstPart(450)", "Delete NumberLiteral: 1(451)", "Delete InfixExpression: +(452)", "Delete MethodInvocation(453)", "Delete SimpleName: stop(454)", "Delete NumberLiteral: 1(455)", "Delete InfixExpression: -(456)", "Delete InfixExpression: !=(457)", "Delete InfixExpression: ||(458)", "Delete SimpleName: IllegalArgumentException(459)", "Delete SimpleType: IllegalArgumentException(460)", "Delete StringLiteral: \"Could not scan [firstPart][secondPart] at \"(461)", "Delete SimpleName: excerpt(462)", "Delete SimpleName: template(463)", "Delete SimpleName: afterQueryOrBang(464)", "Delete NumberLiteral: 1(465)", "Delete InfixExpression: +(466)", "Delete MethodInvocation(467)", "Delete InfixExpression: +(468)", "Delete ClassInstanceCreation(469)", "Delete ThrowStatement(470)", "Delete Block(471)", "Delete IfStatement(472)", "Delete SimpleName: firstNode(473)", "Delete SimpleName: parse(474)", "Delete SimpleName: template(475)", "Delete SimpleName: afterQueryOrBang(476)", "Delete NumberLiteral: 1(477)", "Delete InfixExpression: +(478)", "Delete SimpleName: endFirstPart(479)", "Delete MethodInvocation(480)", "Delete Assignment: =(481)", "Delete ExpressionStatement(482)", "Delete SimpleName: secondNode(483)", "Delete SimpleName: parse(484)", "Delete SimpleName: template(485)", "Delete SimpleName: endFirstPart(486)", "Delete NumberLiteral: 2(487)", "Delete InfixExpression: +(488)", "Delete SimpleName: stop(489)", "Delete NumberLiteral: 1(490)", "Delete InfixExpression: -(491)", "Delete MethodInvocation(492)", "Delete Assignment: =(493)", "Delete ExpressionStatement(494)", "Delete Block(495)", "Delete SimpleName: firstNode(496)", "Delete SimpleName: parse(497)", "Delete SimpleName: template(498)", "Delete SimpleName: afterQueryOrBang(499)", "Delete SimpleName: stop(500)", "Delete MethodInvocation(501)", "Delete Assignment: =(502)", "Delete ExpressionStatement(503)", "Delete SimpleName: secondNode(504)", "Delete SimpleName: LiteralNode(505)", "Delete SimpleType: LiteralNode(506)", "Delete SimpleName: stop(507)", "Delete StringLiteral: \"\"(508)", "Delete ClassInstanceCreation(509)", "Delete Assignment: =(510)", "Delete ExpressionStatement(511)", "Delete Block(512)", "Delete IfStatement(513)", "Delete SimpleName: Node(514)", "Delete SimpleType: Node(515)", "Delete Dimension(516)", "Delete ArrayType: Node[](517)", "Delete SimpleName: nodes(518)", "Delete VariableDeclarationFragment(519)", "Delete VariableDeclarationStatement(520)", "Delete SimpleName: queryOrBang(521)", "Delete CharacterLiteral: '?'(522)", "Delete InfixExpression: ==(523)", "Delete SimpleName: nodes(524)", "Delete SimpleName: Node(525)", "Delete SimpleType: Node(526)", "Delete Dimension(527)", "Delete ArrayType: Node[](528)", "Delete SimpleName: secondNode(529)", "Delete SimpleName: firstNode(530)", "Delete ArrayInitializer(531)", "Delete ArrayCreation(532)", "Delete Assignment: =(533)", "Delete ExpressionStatement(534)", "Delete Block(535)", "Delete SimpleName: queryOrBang(536)", "Delete CharacterLiteral: '!'(537)", "Delete InfixExpression: ==(538)", "Delete AssertStatement(539)", "Delete SimpleName: nodes(540)", "Delete SimpleName: Node(541)", "Delete SimpleType: Node(542)", "Delete Dimension(543)", "Delete ArrayType: Node[](544)", "Delete SimpleName: firstNode(545)", "Delete SimpleName: secondNode(546)", "Delete ArrayInitializer(547)", "Delete ArrayCreation(548)", "Delete Assignment: =(549)", "Delete ExpressionStatement(550)", "Delete Block(551)", "Delete IfStatement(552)", "Delete SimpleName: ConditionalNode(553)", "Delete SimpleType: ConditionalNode(554)", "Delete SimpleName: dollar(555)", "Delete SimpleName: varRef(556)", "Delete SimpleName: nodes(557)", "Delete ClassInstanceCreation(558)", "Delete ReturnStatement(559)", "Delete Block(560)", "Delete MethodDeclaration(561)", "Delete Modifier: private(562)", "Delete Modifier: static(563)", "Delete SimpleName: IterationNode(564)", "Delete SimpleType: IterationNode(565)", "Delete SimpleName: parseIteration(566)", "Delete SimpleName: String(567)", "Delete SimpleType: String(568)", "Delete SimpleName: template(569)", "Delete SingleVariableDeclaration(570)", "Delete PrimitiveType: int(571)", "Delete SimpleName: dollar(572)", "Delete SingleVariableDeclaration(573)", "Delete SimpleName: String(574)", "Delete SimpleType: String(575)", "Delete SimpleName: varRef(576)", "Delete SingleVariableDeclaration(577)", "Delete PrimitiveType: int(578)", "Delete SimpleName: afterColon(579)", "Delete SingleVariableDeclaration(580)", "Delete PrimitiveType: int(581)", "Delete SimpleName: stop(582)", "Delete SingleVariableDeclaration(583)", "Delete PrimitiveType: int(584)", "Delete SimpleName: firstBar(585)", "Delete SimpleName: indexOf(586)", "Delete SimpleName: template(587)", "Delete StringLiteral: \"|\"(588)", "Delete SimpleName: afterColon(589)", "Delete SimpleName: stop(590)", "Delete MethodInvocation(591)", "Delete VariableDeclarationFragment(592)", "Delete VariableDeclarationStatement(593)", "Delete PrimitiveType: int(594)", "Delete SimpleName: secondBar(595)", "Delete SimpleName: indexOf(596)", "Delete SimpleName: template(597)", "Delete StringLiteral: \"|\"(598)", "Delete SimpleName: firstBar(599)", "Delete NumberLiteral: 1(600)", "Delete InfixExpression: +(601)", "Delete SimpleName: stop(602)", "Delete MethodInvocation(603)", "Delete VariableDeclarationFragment(604)", "Delete VariableDeclarationStatement(605)", "Delete SimpleName: secondBar(606)", "Delete SimpleName: afterColon(607)", "Delete InfixExpression: <(608)", "Delete SimpleName: IllegalArgumentException(609)", "Delete SimpleType: IllegalArgumentException(610)", "Delete StringLiteral: \"Expected $[listVar:iterVar|sep|...] at \"(611)", "Delete SimpleName: excerpt(612)", "Delete SimpleName: template(613)", "Delete SimpleName: dollar(614)", "Delete MethodInvocation(615)", "Delete InfixExpression: +(616)", "Delete ClassInstanceCreation(617)", "Delete ThrowStatement(618)", "Delete Block(619)", "Delete IfStatement(620)", "Delete SimpleName: String(621)", "Delete SimpleType: String(622)", "Delete SimpleName: iterationVarName(623)", "Delete SimpleName: template(624)", "Delete SimpleName: substring(625)", "Delete SimpleName: afterColon(626)", "Delete SimpleName: firstBar(627)", "Delete MethodInvocation(628)", "Delete VariableDeclarationFragment(629)", "Delete VariableDeclarationStatement(630)", "Delete SimpleName: String(631)", "Delete SimpleType: String(632)", "Delete SimpleName: separator(633)", "Delete SimpleName: template(634)", "Delete SimpleName: substring(635)", "Delete SimpleName: firstBar(636)", "Delete NumberLiteral: 1(637)", "Delete InfixExpression: +(638)", "Delete SimpleName: secondBar(639)", "Delete MethodInvocation(640)", "Delete VariableDeclarationFragment(641)", "Delete VariableDeclarationStatement(642)", "Delete SimpleName: Node(643)", "Delete SimpleType: Node(644)", "Delete SimpleName: iterated(645)", "Delete SimpleName: parse(646)", "Delete SimpleName: template(647)", "Delete SimpleName: secondBar(648)", "Delete NumberLiteral: 1(649)", "Delete InfixExpression: +(650)", "Delete SimpleName: stop(651)", "Delete MethodInvocation(652)", "Delete VariableDeclarationFragment(653)", "Delete VariableDeclarationStatement(654)", "Delete SimpleName: IterationNode(655)", "Delete SimpleType: IterationNode(656)", "Delete SimpleName: dollar(657)", "Delete SimpleName: varRef(658)", "Delete SimpleName: iterationVarName(659)", "Delete SimpleName: separator(660)", "Delete SimpleName: iterated(661)", "Delete ClassInstanceCreation(662)", "Delete ReturnStatement(663)", "Delete Block(664)", "Delete MethodDeclaration(665)", "Delete Modifier: private(666)", "Delete Modifier: static(667)", "Delete PrimitiveType: int(668)", "Delete SimpleName: indexOf(669)", "Delete SimpleName: String(670)", "Delete SimpleType: String(671)", "Delete SimpleName: container(672)", "Delete SingleVariableDeclaration(673)", "Delete SimpleName: String(674)", "Delete SimpleType: String(675)", "Delete SimpleName: pattern(676)", "Delete SingleVariableDeclaration(677)", "Delete PrimitiveType: int(678)", "Delete SimpleName: start(679)", "Delete SingleVariableDeclaration(680)", "Delete PrimitiveType: int(681)", "Delete SimpleName: stop(682)", "Delete SingleVariableDeclaration(683)", "Delete PrimitiveType: int(684)", "Delete SimpleName: i(685)", "Delete SimpleName: start(686)", "Delete VariableDeclarationFragment(687)", "Delete VariableDeclarationExpression(688)", "Delete SimpleName: i(689)", "Delete SimpleName: stop(690)", "Delete InfixExpression: <(691)", "Delete SimpleName: i(692)", "Delete PostfixExpression: ++(693)", "Delete SimpleName: container(694)", "Delete SimpleName: startsWith(695)", "Delete SimpleName: pattern(696)", "Delete SimpleName: i(697)", "Delete MethodInvocation(698)", "Delete SimpleName: i(699)", "Delete ReturnStatement(700)", "Delete Block(701)", "Delete IfStatement(702)", "Delete Block(703)", "Delete ForStatement(704)", "Delete NumberLiteral: 1(705)", "Delete PrefixExpression: -(706)", "Delete ReturnStatement(707)", "Delete Block(708)", "Delete MethodDeclaration(709)", "Delete Modifier: private(710)", "Delete Modifier: static(711)", "Delete Modifier: final(712)", "Delete SimpleName: Pattern(713)", "Delete SimpleType: Pattern(714)", "Delete SimpleName: varRefPattern(715)", "Delete SimpleName: Pattern(716)", "Delete SimpleName: compile(717)", "Delete StringLiteral: \"\\\\p{javaJavaIdentifierPart}+(\\\\.\\\\p{javaJavaIdentifierPart}+)*\"(718)", "Delete MethodInvocation(719)", "Delete VariableDeclarationFragment(720)", "Delete FieldDeclaration(721)", "Delete Modifier: private(722)", "Delete Modifier: static(723)", "Delete PrimitiveType: int(724)", "Delete SimpleName: scanVarRef(725)", "Delete SimpleName: String(726)", "Delete SimpleType: String(727)", "Delete SimpleName: text(728)", "Delete SingleVariableDeclaration(729)", "Delete PrimitiveType: int(730)", "Delete SimpleName: start(731)", "Delete SingleVariableDeclaration(732)", "Delete PrimitiveType: int(733)", "Delete SimpleName: stop(734)", "Delete SingleVariableDeclaration(735)", "Delete SimpleName: matcher(738)", "Delete SimpleName: varRefPattern(739)", "Delete SimpleName: matcher(740)", "Delete SimpleName: text(741)", "Delete SimpleName: substring(742)", "Delete SimpleName: start(743)", "Delete SimpleName: stop(744)", "Delete MethodInvocation(745)", "Delete MethodInvocation(746)", "Delete VariableDeclarationFragment(747)", "Delete VariableDeclarationStatement(748)", "Delete SimpleName: matcher(749)", "Delete SimpleName: lookingAt(750)", "Delete MethodInvocation(751)", "Delete SimpleName: start(752)", "Delete SimpleName: matcher(753)", "Delete SimpleName: end(754)", "Delete MethodInvocation(755)", "Delete InfixExpression: +(756)", "Delete ReturnStatement(757)", "Delete Block(758)", "Delete SimpleName: IllegalArgumentException(759)", "Delete SimpleType: IllegalArgumentException(760)", "Delete StringLiteral: \"Expected id after $[ at \"(761)", "Delete SimpleName: excerpt(762)", "Delete SimpleName: text(763)", "Delete SimpleName: start(764)", "Delete MethodInvocation(765)", "Delete InfixExpression: +(766)", "Delete ClassInstanceCreation(767)", "Delete ThrowStatement(768)", "Delete Block(769)", "Delete IfStatement(770)", "Delete Block(771)", "Delete MethodDeclaration(772)", "Delete Modifier: private(773)", "Delete Modifier: static(774)", "Delete PrimitiveType: int(775)", "Delete SimpleName: matchingCloseSquare(776)", "Delete SimpleName: String(777)", "Delete SimpleType: String(778)", "Delete SimpleName: s(779)", "Delete SingleVariableDeclaration(780)", "Delete PrimitiveType: int(781)", "Delete SimpleName: i(782)", "Delete SingleVariableDeclaration(783)", "Delete PrimitiveType: int(784)", "Delete SimpleName: squares(785)", "Delete NumberLiteral: 0(786)", "Delete VariableDeclarationFragment(787)", "Delete VariableDeclarationStatement(788)", "Delete PrimitiveType: int(789)", "Delete SimpleName: j(790)", "Delete SimpleName: i(791)", "Delete VariableDeclarationFragment(792)", "Delete VariableDeclarationExpression(793)", "Delete SimpleName: j(794)", "Delete SimpleName: s(795)", "Delete SimpleName: length(796)", "Delete MethodInvocation(797)", "Delete InfixExpression: <(798)", "Delete SimpleName: j(799)", "Delete PostfixExpression: ++(800)", "Delete PrimitiveType: char(801)", "Delete SimpleName: c(802)", "Delete SimpleName: s(803)", "Delete SimpleName: charAt(804)", "Delete SimpleName: j(805)", "Delete MethodInvocation(806)", "Delete VariableDeclarationFragment(807)", "Delete VariableDeclarationStatement(808)", "Delete SimpleName: c(809)", "Delete CharacterLiteral: '['(810)", "Delete InfixExpression: ==(811)", "Delete SimpleName: squares(812)", "Delete PostfixExpression: ++(813)", "Delete ExpressionStatement(814)", "Delete Block(815)", "Delete SimpleName: c(816)", "Delete CharacterLiteral: ']'(817)", "Delete InfixExpression: ==(818)", "Delete SimpleName: squares(819)", "Delete PostfixExpression: --(820)", "Delete ExpressionStatement(821)", "Delete SimpleName: squares(822)", "Delete NumberLiteral: 0(823)", "Delete InfixExpression: ==(824)", "Delete SimpleName: j(825)", "Delete ReturnStatement(826)", "Delete Block(827)", "Delete IfStatement(828)", "Delete Block(829)", "Delete IfStatement(830)", "Delete IfStatement(831)", "Delete Block(832)", "Delete ForStatement(833)", "Delete SimpleName: IllegalArgumentException(834)", "Delete SimpleType: IllegalArgumentException(835)", "Delete StringLiteral: \"No closing ] to match text starting \"(836)", "Delete SimpleName: excerpt(837)", "Delete SimpleName: s(838)", "Delete SimpleName: i(839)", "Delete MethodInvocation(840)", "Delete InfixExpression: +(841)", "Delete ClassInstanceCreation(842)", "Delete ThrowStatement(843)", "Delete Block(844)", "Delete MethodDeclaration(845)", "Delete Modifier: private(846)", "Delete Modifier: static(847)", "Delete Modifier: final(848)", "Delete SimpleName: Pattern(849)", "Delete SimpleType: Pattern(850)", "Delete SimpleName: entireLineCommentPattern(851)", "Delete SimpleName: Pattern(852)", "Delete SimpleName: compile(853)", "Delete StringLiteral: \"^\\\\s*#.*$\\n\"(854)", "Delete QualifiedName: Pattern.MULTILINE(855)", "Delete MethodInvocation(856)", "Delete VariableDeclarationFragment(857)", "Delete FieldDeclaration(858)", "Delete Modifier: private(859)", "Delete Modifier: static(860)", "Delete Modifier: final(861)", "Delete SimpleName: Pattern(862)", "Delete SimpleType: Pattern(863)", "Delete SimpleName: midLineCommentPattern(864)", "Delete SimpleName: Pattern(865)", "Delete SimpleName: compile(866)", "Delete StringLiteral: \"#.*$\"(867)", "Delete QualifiedName: Pattern.MULTILINE(868)", "Delete MethodInvocation(869)", "Delete VariableDeclarationFragment(870)", "Delete FieldDeclaration(871)", "Delete Modifier: private(872)", "Delete Modifier: static(873)", "Delete SimpleName: String(874)", "Delete SimpleType: String(875)", "Delete SimpleName: stripComments(876)", "Delete SimpleName: String(877)", "Delete SimpleType: String(878)", "Delete SimpleName: template(879)", "Delete SingleVariableDeclaration(880)", "Delete SimpleName: template(881)", "Delete SimpleName: entireLineCommentPattern(882)", "Delete SimpleName: matcher(883)", "Delete SimpleName: template(884)", "Delete MethodInvocation(885)", "Delete SimpleName: replaceAll(886)", "Delete StringLiteral: \"\"(887)", "Delete MethodInvocation(888)", "Delete Assignment: =(889)", "Delete ExpressionStatement(890)", "Delete SimpleName: midLineCommentPattern(891)", "Delete SimpleName: matcher(892)", "Delete SimpleName: template(893)", "Delete MethodInvocation(894)", "Delete SimpleName: replaceAll(895)", "Delete StringLiteral: \"\"(896)", "Delete MethodInvocation(897)", "Delete ReturnStatement(898)", "Delete Block(899)", "Delete MethodDeclaration(900)", "Delete Modifier: private(901)", "Delete Modifier: static(902)", "Delete Modifier: final(903)", "Delete PrimitiveType: int(904)", "Delete SimpleName: EXCERPT_LENGTH(905)", "Delete NumberLiteral: 40(906)", "Delete VariableDeclarationFragment(907)", "Delete FieldDeclaration(908)", "Delete Modifier: private(909)", "Delete Modifier: static(910)", "Delete SimpleName: String(911)", "Delete SimpleType: String(912)", "Delete SimpleName: excerpt(913)", "Delete SimpleName: String(914)", "Delete SimpleType: String(915)", "Delete SimpleName: s(916)", "Delete SingleVariableDeclaration(917)", "Delete PrimitiveType: int(918)", "Delete SimpleName: startI(919)", "Delete SingleVariableDeclaration(920)", "Delete SimpleName: s(921)", "Delete SimpleName: length(922)", "Delete MethodInvocation(923)", "Delete SimpleName: startI(924)", "Delete InfixExpression: -(925)", "Delete SimpleName: EXCERPT_LENGTH(926)", "Delete InfixExpression: <=(927)", "Delete SimpleName: s(928)", "Delete SimpleName: substring(929)", "Delete SimpleName: startI(930)", "Delete MethodInvocation(931)", "Delete ReturnStatement(932)", "Delete Block(933)", "Delete SimpleName: s(934)", "Delete SimpleName: substring(935)", "Delete SimpleName: startI(936)", "Delete SimpleName: startI(937)", "Delete SimpleName: EXCERPT_LENGTH(938)", "Delete InfixExpression: +(939)", "Delete MethodInvocation(940)", "Delete StringLiteral: \"...\"(941)", "Delete InfixExpression: +(942)", "Delete ReturnStatement(943)", "Delete Block(944)", "Delete IfStatement(945)", "Delete Block(946)", "Delete MethodDeclaration(947)", "Delete Modifier: private(948)", "Delete Modifier: abstract(949)", "Delete Modifier: static(950)", "Delete SimpleName: Node(951)", "Delete Modifier: final(952)", "Delete PrimitiveType: int(953)", "Delete SimpleName: templateIndex(954)", "Delete VariableDeclarationFragment(955)", "Delete FieldDeclaration(956)", "Delete SimpleName: Node(957)", "Delete PrimitiveType: int(958)", "Delete SimpleName: templateIndex(959)", "Delete SingleVariableDeclaration(960)", "Delete ThisExpression(961)", "Delete SimpleName: templateIndex(962)", "Delete FieldAccess(963)", "Delete SimpleName: templateIndex(964)", "Delete Assignment: =(965)", "Delete ExpressionStatement(966)", "Delete Block(967)", "Delete MethodDeclaration(968)", "Delete Modifier: abstract(969)", "Delete PrimitiveType: void(970)", "Delete SimpleName: appendTo(971)", "Delete SimpleName: StringBuilder(972)", "Delete SimpleType: StringBuilder(973)", "Delete SimpleName: sb(974)", "Delete SingleVariableDeclaration(975)", "Delete SimpleName: Template(976)", "Delete SimpleType: Template(977)", "Delete SimpleName: template(978)", "Delete SingleVariableDeclaration(979)", "Delete SimpleName: Map(980)", "Delete SimpleType: Map(981)", "Delete SimpleName: String(982)", "Delete SimpleType: String(983)", "Delete WildcardType: ?(984)", "Delete ParameterizedType: Map<String,?>(985)", "Delete SimpleName: vars(986)", "Delete SingleVariableDeclaration(987)", "Delete MethodDeclaration(988)", "Delete TypeDeclaration: class(989)", "Delete Modifier: private(990)", "Delete Modifier: static(991)", "Delete SimpleName: LiteralNode(992)", "Delete SimpleName: Node(993)", "Delete SimpleType: Node(994)", "Delete Modifier: private(995)", "Delete Modifier: final(996)", "Delete SimpleName: String(997)", "Delete SimpleType: String(998)", "Delete SimpleName: text(999)", "Delete VariableDeclarationFragment(1000)", "Delete FieldDeclaration(1001)", "Delete SimpleName: LiteralNode(1002)", "Delete PrimitiveType: int(1003)", "Delete SimpleName: templateIndex(1004)", "Delete SingleVariableDeclaration(1005)", "Delete SimpleName: String(1006)", "Delete SimpleType: String(1007)", "Delete SimpleName: text(1008)", "Delete SingleVariableDeclaration(1009)", "Delete SimpleName: templateIndex(1010)", "Delete SuperConstructorInvocation(1011)", "Delete ThisExpression(1012)", "Delete SimpleName: text(1013)", "Delete FieldAccess(1014)", "Delete SimpleName: text(1015)", "Delete Assignment: =(1016)", "Delete ExpressionStatement(1017)", "Delete Block(1018)", "Delete MethodDeclaration(1019)", "Delete SimpleName: Override(1020)", "Delete MarkerAnnotation(1021)", "Delete PrimitiveType: void(1022)", "Delete SimpleName: appendTo(1023)", "Delete SimpleName: StringBuilder(1024)", "Delete SimpleType: StringBuilder(1025)", "Delete SimpleName: sb(1026)", "Delete SingleVariableDeclaration(1027)", "Delete SimpleName: Template(1028)", "Delete SimpleType: Template(1029)", "Delete SimpleName: template(1030)", "Delete SingleVariableDeclaration(1031)", "Delete SimpleName: Map(1032)", "Delete SimpleType: Map(1033)", "Delete SimpleName: String(1034)", "Delete SimpleType: String(1035)", "Delete WildcardType: ?(1036)", "Delete ParameterizedType: Map<String,?>(1037)", "Delete SimpleName: vars(1038)", "Delete SingleVariableDeclaration(1039)", "Delete SimpleName: sb(1040)", "Delete SimpleName: append(1041)", "Delete SimpleName: text(1042)", "Delete MethodInvocation(1043)", "Delete ExpressionStatement(1044)", "Delete Block(1045)", "Delete MethodDeclaration(1046)", "Delete TypeDeclaration: class(1047)", "Delete Modifier: private(1048)", "Delete Modifier: static(1049)", "Delete SimpleName: CompoundNode(1050)", "Delete SimpleName: Node(1051)", "Delete SimpleType: Node(1052)", "Delete Modifier: private(1053)", "Delete Modifier: final(1054)", "Delete SimpleName: List(1055)", "Delete SimpleType: List(1056)", "Delete SimpleName: Node(1057)", "Delete SimpleType: Node(1058)", "Delete ParameterizedType: List<Node>(1059)", "Delete SimpleName: nodes(1060)", "Delete VariableDeclarationFragment(1061)", "Delete FieldDeclaration(1062)", "Delete SimpleName: CompoundNode(1063)", "Delete PrimitiveType: int(1064)", "Delete SimpleName: templateIndex(1065)", "Delete SingleVariableDeclaration(1066)", "Delete SimpleName: List(1067)", "Delete SimpleType: List(1068)", "Delete SimpleName: Node(1069)", "Delete SimpleType: Node(1070)", "Delete ParameterizedType: List<Node>(1071)", "Delete SimpleName: nodes(1072)", "Delete SingleVariableDeclaration(1073)", "Delete SimpleName: templateIndex(1074)", "Delete SuperConstructorInvocation(1075)", "Delete ThisExpression(1076)", "Delete SimpleName: nodes(1077)", "Delete FieldAccess(1078)", "Delete SimpleName: nodes(1079)", "Delete Assignment: =(1080)", "Delete ExpressionStatement(1081)", "Delete Block(1082)", "Delete MethodDeclaration(1083)", "Delete SimpleName: Override(1084)", "Delete MarkerAnnotation(1085)", "Delete PrimitiveType: void(1086)", "Delete SimpleName: appendTo(1087)", "Delete SimpleName: StringBuilder(1088)", "Delete SimpleType: StringBuilder(1089)", "Delete SimpleName: sb(1090)", "Delete SingleVariableDeclaration(1091)", "Delete SimpleName: Template(1092)", "Delete SimpleType: Template(1093)", "Delete SimpleName: template(1094)", "Delete SingleVariableDeclaration(1095)", "Delete SimpleName: Map(1096)", "Delete SimpleType: Map(1097)", "Delete SimpleName: String(1098)", "Delete SimpleType: String(1099)", "Delete WildcardType: ?(1100)", "Delete ParameterizedType: Map<String,?>(1101)", "Delete SimpleName: vars(1102)", "Delete SingleVariableDeclaration(1103)", "Delete SimpleName: Node(1104)", "Delete SimpleType: Node(1105)", "Delete SimpleName: node(1106)", "Delete SingleVariableDeclaration(1107)", "Delete SimpleName: nodes(1108)", "Delete SimpleName: node(1109)", "Delete SimpleName: appendTo(1110)", "Delete SimpleName: sb(1111)", "Delete SimpleName: template(1112)", "Delete SimpleName: vars(1113)", "Delete MethodInvocation(1114)", "Delete ExpressionStatement(1115)", "Delete Block(1116)", "Delete EnhancedForStatement(1117)", "Delete Block(1118)", "Delete MethodDeclaration(1119)", "Delete TypeDeclaration: class(1120)", "Delete Modifier: private(1121)", "Delete Modifier: abstract(1122)", "Delete Modifier: static(1123)", "Delete SimpleName: VarRefNode(1124)", "Delete SimpleName: Node(1125)", "Delete SimpleType: Node(1126)", "Delete Modifier: private(1127)", "Delete Modifier: final(1128)", "Delete SimpleName: String(1129)", "Delete SimpleType: String(1130)", "Delete SimpleName: varRef(1131)", "Delete VariableDeclarationFragment(1132)", "Delete FieldDeclaration(1133)", "Delete SimpleName: VarRefNode(1134)", "Delete PrimitiveType: int(1135)", "Delete SimpleName: templateIndex(1136)", "Delete SingleVariableDeclaration(1137)", "Delete SimpleName: String(1138)", "Delete SimpleType: String(1139)", "Delete SimpleName: varRef(1140)", "Delete SingleVariableDeclaration(1141)", "Delete SimpleName: templateIndex(1142)", "Delete SuperConstructorInvocation(1143)", "Delete ThisExpression(1144)", "Delete SimpleName: varRef(1145)", "Delete FieldAccess(1146)", "Delete SimpleName: varRef(1147)", "Delete Assignment: =(1148)", "Delete ExpressionStatement(1149)", "Delete Block(1150)", "Delete MethodDeclaration(1151)", "Delete SimpleName: Object(1152)", "Delete SimpleType: Object(1153)", "Delete SimpleName: getVar(1154)", "Delete SimpleName: Map(1155)", "Delete SimpleType: Map(1156)", "Delete SimpleName: String(1157)", "Delete SimpleType: String(1158)", "Delete WildcardType: ?(1159)", "Delete ParameterizedType: Map<String,?>(1160)", "Delete SimpleName: vars(1161)", "Delete SingleVariableDeclaration(1162)", "Delete SimpleName: Template(1163)", "Delete SimpleType: Template(1164)", "Delete SimpleName: template(1165)", "Delete SingleVariableDeclaration(1166)", "Delete SimpleName: String(1167)", "Delete SimpleType: String(1168)", "Delete Dimension(1169)", "Delete ArrayType: String[](1170)", "Delete SimpleName: parts(1171)", "Delete SimpleName: varRef(1172)", "Delete SimpleName: split(1173)", "Delete StringLiteral: \"\\\\.\"(1174)", "Delete MethodInvocation(1175)", "Delete VariableDeclarationFragment(1176)", "Delete VariableDeclarationStatement(1177)", "Delete SimpleName: Object(1178)", "Delete SimpleType: Object(1179)", "Delete SimpleName: value(1180)", "Delete SimpleName: vars(1181)", "Delete SimpleName: get(1182)", "Delete SimpleName: parts(1183)", "Delete NumberLiteral: 0(1184)", "Delete ArrayAccess(1185)", "Delete MethodInvocation(1186)", "Delete VariableDeclarationFragment(1187)", "Delete VariableDeclarationStatement(1188)", "Delete SimpleName: value(1189)", "Delete NullLiteral(1190)", "Delete InfixExpression: ==(1191)", "Delete SimpleName: IllegalArgumentException(1192)", "Delete SimpleType: IllegalArgumentException(1193)", "Delete StringLiteral: \"Reference to undefined var $[\"(1194)", "Delete SimpleName: parts(1195)", "Delete NumberLiteral: 0(1196)", "Delete ArrayAccess(1197)", "Delete StringLiteral: \"] at \"(1198)", "Delete SimpleName: excerpt(1199)", "Delete QualifiedName: template.template(1200)", "Delete SimpleName: templateIndex(1201)", "Delete MethodInvocation(1202)", "Delete InfixExpression: +(1203)", "Delete ClassInstanceCreation(1204)", "Delete ThrowStatement(1205)", "Delete Block(1206)", "Delete IfStatement(1207)", "Delete PrimitiveType: int(1208)", "Delete SimpleName: i(1209)", "Delete NumberLiteral: 1(1210)", "Delete VariableDeclarationFragment(1211)", "Delete VariableDeclarationExpression(1212)", "Delete SimpleName: i(1213)", "Delete QualifiedName: parts.length(1214)", "Delete InfixExpression: <(1215)", "Delete SimpleName: i(1216)", "Delete PostfixExpression: ++(1217)", "Delete SimpleName: String(1218)", "Delete SimpleType: String(1219)", "Delete SimpleName: part(1220)", "Delete SimpleName: parts(1221)", "Delete SimpleName: i(1222)", "Delete ArrayAccess(1223)", "Delete VariableDeclarationFragment(1224)", "Delete VariableDeclarationStatement(1225)", "Delete SimpleName: Method(1226)", "Delete SimpleType: Method(1227)", "Delete SimpleName: method(1228)", "Delete SimpleName: findPublicMethod(1229)", "Delete SimpleName: value(1230)", "Delete SimpleName: getClass(1231)", "Delete MethodInvocation(1232)", "Delete SimpleName: part(1233)", "Delete MethodInvocation(1234)", "Delete VariableDeclarationFragment(1235)", "Delete VariableDeclarationStatement(1236)", "Delete SimpleName: method(1237)", "Delete NullLiteral(1238)", "Delete InfixExpression: ==(1239)", "Delete SimpleName: IllegalArgumentException(1240)", "Delete SimpleType: IllegalArgumentException(1241)", "Delete StringLiteral: \"No method \\\"\"(1242)", "Delete SimpleName: part(1243)", "Delete StringLiteral: \"\\\" in \"(1244)", "Delete SimpleName: value(1245)", "Delete SimpleName: getClass(1246)", "Delete MethodInvocation(1247)", "Delete InfixExpression: +(1248)", "Delete ClassInstanceCreation(1249)", "Delete ThrowStatement(1250)", "Delete Block(1251)", "Delete IfStatement(1252)", "Delete SimpleName: value(1253)", "Delete SimpleName: method(1254)", "Delete SimpleName: invoke(1255)", "Delete SimpleName: value(1256)", "Delete MethodInvocation(1257)", "Delete Assignment: =(1258)", "Delete ExpressionStatement(1259)", "Delete Block(1260)", "Delete SimpleName: Exception(1261)", "Delete SimpleType: Exception(1262)", "Delete SimpleName: e(1263)", "Delete SingleVariableDeclaration(1264)", "Delete SimpleName: IllegalArgumentException(1265)", "Delete SimpleType: IllegalArgumentException(1266)", "Delete StringLiteral: \"Failed to invoke \"(1267)", "Delete SimpleName: value(1268)", "Delete SimpleName: getClass(1269)", "Delete MethodInvocation(1270)", "Delete SimpleName: getName(1271)", "Delete MethodInvocation(1272)", "Delete StringLiteral: \".\"(1273)", "Delete SimpleName: part(1274)", "Delete StringLiteral: \"() on \"(1275)", "Delete SimpleName: value(1276)", "Delete InfixExpression: +(1277)", "Delete SimpleName: e(1278)", "Delete ClassInstanceCreation(1279)", "Delete ThrowStatement(1280)", "Delete Block(1281)", "Delete CatchClause(1282)", "Delete TryStatement(1283)", "Delete Block(1284)", "Delete ForStatement(1285)", "Delete SimpleName: value(1286)", "Delete ReturnStatement(1287)", "Delete Block(1288)", "Delete MethodDeclaration(1289)", "Delete Modifier: private(1290)", "Delete Modifier: static(1291)", "Delete SimpleName: Method(1292)", "Delete SimpleType: Method(1293)", "Delete SimpleName: findPublicMethod(1294)", "Delete SimpleName: Class(1295)", "Delete SimpleType: Class(1296)", "Delete WildcardType: ?(1297)", "Delete ParameterizedType: Class<?>(1298)", "Delete SimpleName: c(1299)", "Delete SingleVariableDeclaration(1300)", "Delete SimpleName: String(1301)", "Delete SimpleType: String(1302)", "Delete SimpleName: methodName(1303)", "Delete SingleVariableDeclaration(1304)", "Delete SimpleName: Method(1305)", "Delete SimpleType: Method(1306)", "Delete SimpleName: method(1307)", "Delete SimpleName: c(1308)", "Delete SimpleName: getMethod(1309)", "Delete SimpleName: methodName(1310)", "Delete MethodInvocation(1311)", "Delete VariableDeclarationFragment(1312)", "Delete VariableDeclarationStatement(1313)", "Delete SimpleName: Modifier(1314)", "Delete SimpleName: isPublic(1315)", "Delete SimpleName: c(1316)", "Delete SimpleName: getModifiers(1317)", "Delete MethodInvocation(1318)", "Delete MethodInvocation(1319)", "Delete SimpleName: c(1320)", "Delete SimpleName: getName(1321)", "Delete MethodInvocation(1322)", "Delete SimpleName: startsWith(1323)", "Delete StringLiteral: \"com.google.auto.value\"(1324)", "Delete MethodInvocation(1325)", "Delete InfixExpression: ||(1326)", "Delete SimpleName: method(1327)", "Delete ReturnStatement(1328)", "Delete Block(1329)", "Delete IfStatement(1330)", "Delete SimpleName: c(1331)", "Delete SimpleName: getSuperclass(1332)", "Delete MethodInvocation(1333)", "Delete NullLiteral(1334)", "Delete InfixExpression: !=(1335)", "Delete SimpleName: method(1336)", "Delete SimpleName: findPublicMethod(1337)", "Delete SimpleName: c(1338)", "Delete SimpleName: getSuperclass(1339)", "Delete MethodInvocation(1340)", "Delete SimpleName: methodName(1341)", "Delete MethodInvocation(1342)", "Delete Assignment: =(1343)", "Delete ExpressionStatement(1344)", "Delete Block(1345)", "Delete IfStatement(1346)", "Delete SimpleName: method(1347)", "Delete NullLiteral(1348)", "Delete InfixExpression: ==(1349)", "Delete SimpleName: Class(1350)", "Delete SimpleType: Class(1351)", "Delete WildcardType: ?(1352)", "Delete ParameterizedType: Class<?>(1353)", "Delete SimpleName: intf(1354)", "Delete SingleVariableDeclaration(1355)", "Delete SimpleName: c(1356)", "Delete SimpleName: getInterfaces(1357)", "Delete MethodInvocation(1358)", "Delete SimpleName: method(1359)", "Delete SimpleName: findPublicMethod(1360)", "Delete SimpleName: intf(1361)", "Delete SimpleName: methodName(1362)", "Delete MethodInvocation(1363)", "Delete Assignment: =(1364)", "Delete ExpressionStatement(1365)", "Delete SimpleName: method(1366)", "Delete NullLiteral(1367)", "Delete InfixExpression: !=(1368)", "Delete BreakStatement(1369)", "Delete Block(1370)", "Delete IfStatement(1371)", "Delete Block(1372)", "Delete EnhancedForStatement(1373)", "Delete Block(1374)", "Delete IfStatement(1375)", "Delete SimpleName: method(1376)", "Delete ReturnStatement(1377)", "Delete Block(1378)", "Delete SimpleName: NoSuchMethodException(1379)", "Delete SimpleType: NoSuchMethodException(1380)", "Delete SimpleName: e(1381)", "Delete SingleVariableDeclaration(1382)", "Delete NullLiteral(1383)", "Delete ReturnStatement(1384)", "Delete Block(1385)", "Delete CatchClause(1386)", "Delete TryStatement(1387)", "Delete Block(1388)", "Delete MethodDeclaration(1389)", "Delete TypeDeclaration: class(1390)", "Delete Modifier: private(1391)", "Delete Modifier: static(1392)", "Delete SimpleName: VarNode(1393)", "Delete SimpleName: VarRefNode(1394)", "Delete SimpleType: VarRefNode(1395)", "Delete SimpleName: VarNode(1396)", "Delete PrimitiveType: int(1397)", "Delete SimpleName: templateIndex(1398)", "Delete SingleVariableDeclaration(1399)", "Delete SimpleName: String(1400)", "Delete SimpleType: String(1401)", "Delete SimpleName: varRef(1402)", "Delete SingleVariableDeclaration(1403)", "Delete SimpleName: templateIndex(1404)", "Delete SimpleName: varRef(1405)", "Delete SuperConstructorInvocation(1406)", "Delete Block(1407)", "Delete MethodDeclaration(1408)", "Delete SimpleName: Override(1409)", "Delete MarkerAnnotation(1410)", "Delete PrimitiveType: void(1411)", "Delete SimpleName: appendTo(1412)", "Delete SimpleName: StringBuilder(1413)", "Delete SimpleType: StringBuilder(1414)", "Delete SimpleName: sb(1415)", "Delete SingleVariableDeclaration(1416)", "Delete SimpleName: Template(1417)", "Delete SimpleType: Template(1418)", "Delete SimpleName: template(1419)", "Delete SingleVariableDeclaration(1420)", "Delete SimpleName: Map(1421)", "Delete SimpleType: Map(1422)", "Delete SimpleName: String(1423)", "Delete SimpleType: String(1424)", "Delete WildcardType: ?(1425)", "Delete ParameterizedType: Map<String,?>(1426)", "Delete SimpleName: vars(1427)", "Delete SingleVariableDeclaration(1428)", "Delete SimpleName: Object(1429)", "Delete SimpleType: Object(1430)", "Delete SimpleName: value(1431)", "Delete SimpleName: getVar(1432)", "Delete SimpleName: vars(1433)", "Delete SimpleName: template(1434)", "Delete MethodInvocation(1435)", "Delete VariableDeclarationFragment(1436)", "Delete VariableDeclarationStatement(1437)", "Delete SimpleName: sb(1438)", "Delete SimpleName: append(1439)", "Delete SimpleName: value(1440)", "Delete MethodInvocation(1441)", "Delete ExpressionStatement(1442)", "Delete Block(1443)", "Delete MethodDeclaration(1444)", "Delete TypeDeclaration: class(1445)", "Delete Modifier: private(1446)", "Delete Modifier: static(1447)", "Delete SimpleName: ConditionalNode(1448)", "Delete SimpleName: VarRefNode(1449)", "Delete SimpleType: VarRefNode(1450)", "Delete Modifier: private(1451)", "Delete Modifier: final(1452)", "Delete SimpleName: Node(1453)", "Delete SimpleType: Node(1454)", "Delete Dimension(1455)", "Delete ArrayType: Node[](1456)", "Delete SimpleName: nodes(1457)", "Delete VariableDeclarationFragment(1458)", "Delete FieldDeclaration(1459)", "Delete SimpleName: ConditionalNode(1460)", "Delete PrimitiveType: int(1461)", "Delete SimpleName: templateIndex(1462)", "Delete SingleVariableDeclaration(1463)", "Delete SimpleName: String(1464)", "Delete SimpleType: String(1465)", "Delete SimpleName: varRef(1466)", "Delete SingleVariableDeclaration(1467)", "Delete SimpleName: Node(1468)", "Delete SimpleType: Node(1469)", "Delete Dimension(1470)", "Delete ArrayType: Node[](1471)", "Delete SimpleName: nodes(1472)", "Delete SingleVariableDeclaration(1473)", "Delete SimpleName: templateIndex(1474)", "Delete SimpleName: varRef(1475)", "Delete SuperConstructorInvocation(1476)", "Delete QualifiedName: nodes.length(1477)", "Delete NumberLiteral: 2(1478)", "Delete InfixExpression: ==(1479)", "Delete AssertStatement(1480)", "Delete ThisExpression(1481)", "Delete SimpleName: nodes(1482)", "Delete FieldAccess(1483)", "Delete SimpleName: nodes(1484)", "Delete Assignment: =(1485)", "Delete ExpressionStatement(1486)", "Delete Block(1487)", "Delete MethodDeclaration(1488)", "Delete SimpleName: Override(1489)", "Delete MarkerAnnotation(1490)", "Delete PrimitiveType: void(1491)", "Delete SimpleName: appendTo(1492)", "Delete SimpleName: StringBuilder(1493)", "Delete SimpleType: StringBuilder(1494)", "Delete SimpleName: sb(1495)", "Delete SingleVariableDeclaration(1496)", "Delete SimpleName: Template(1497)", "Delete SimpleType: Template(1498)", "Delete SimpleName: template(1499)", "Delete SingleVariableDeclaration(1500)", "Delete SimpleName: Map(1501)", "Delete SimpleType: Map(1502)", "Delete SimpleName: String(1503)", "Delete SimpleType: String(1504)", "Delete WildcardType: ?(1505)", "Delete ParameterizedType: Map<String,?>(1506)", "Delete SimpleName: vars(1507)", "Delete SingleVariableDeclaration(1508)", "Delete SimpleName: Object(1509)", "Delete SimpleType: Object(1510)", "Delete SimpleName: value(1511)", "Delete SimpleName: getVar(1512)", "Delete SimpleName: vars(1513)", "Delete SimpleName: template(1514)", "Delete MethodInvocation(1515)", "Delete VariableDeclarationFragment(1516)", "Delete VariableDeclarationStatement(1517)", "Delete PrimitiveType: boolean(1518)", "Delete SimpleName: truth(1519)", "Delete SimpleName: truth(1520)", "Delete SimpleName: value(1521)", "Delete SimpleName: template(1522)", "Delete MethodInvocation(1523)", "Delete VariableDeclarationFragment(1524)", "Delete VariableDeclarationStatement(1525)", "Delete SimpleName: Node(1526)", "Delete SimpleType: Node(1527)", "Delete SimpleName: node(1528)", "Delete SimpleName: truth(1529)", "Delete SimpleName: nodes(1530)", "Delete NumberLiteral: 1(1531)", "Delete ArrayAccess(1532)", "Delete SimpleName: nodes(1533)", "Delete NumberLiteral: 0(1534)", "Delete ArrayAccess(1535)", "Delete ConditionalExpression(1536)", "Delete VariableDeclarationFragment(1537)", "Delete VariableDeclarationStatement(1538)", "Delete SimpleName: node(1539)", "Delete SimpleName: appendTo(1540)", "Delete SimpleName: sb(1541)", "Delete SimpleName: template(1542)", "Delete SimpleName: vars(1543)", "Delete MethodInvocation(1544)", "Delete ExpressionStatement(1545)", "Delete Block(1546)", "Delete MethodDeclaration(1547)", "Delete Modifier: private(1548)", "Delete PrimitiveType: boolean(1549)", "Delete SimpleName: truth(1550)", "Delete SimpleName: Object(1551)", "Delete SimpleType: Object(1552)", "Delete SimpleName: x(1553)", "Delete SingleVariableDeclaration(1554)", "Delete SimpleName: Template(1555)", "Delete SimpleType: Template(1556)", "Delete SimpleName: template(1557)", "Delete SingleVariableDeclaration(1558)", "Delete SimpleName: x(1559)", "Delete NullLiteral(1560)", "Delete InfixExpression: ==(1561)", "Delete BooleanLiteral: false(1562)", "Delete ReturnStatement(1563)", "Delete Block(1564)", "Delete SimpleName: x(1565)", "Delete SimpleName: Boolean(1566)", "Delete SimpleType: Boolean(1567)", "Delete InstanceofExpression(1568)", "Delete SimpleName: Boolean(1569)", "Delete SimpleType: Boolean(1570)", "Delete SimpleName: x(1571)", "Delete CastExpression(1572)", "Delete ReturnStatement(1573)", "Delete Block(1574)", "Delete SimpleName: x(1575)", "Delete SimpleName: Number(1576)", "Delete SimpleType: Number(1577)", "Delete InstanceofExpression(1578)", "Delete SimpleName: Number(1579)", "Delete SimpleType: Number(1580)", "Delete SimpleName: x(1581)", "Delete CastExpression(1582)", "Delete ParenthesizedExpression(1583)", "Delete SimpleName: doubleValue(1584)", "Delete MethodInvocation(1585)", "Delete NumberLiteral: 0(1586)", "Delete InfixExpression: !=(1587)", "Delete ReturnStatement(1588)", "Delete Block(1589)", "Delete SimpleName: x(1590)", "Delete SimpleName: CharSequence(1591)", "Delete SimpleType: CharSequence(1592)", "Delete InstanceofExpression(1593)", "Delete SimpleName: CharSequence(1594)", "Delete SimpleType: CharSequence(1595)", "Delete SimpleName: x(1596)", "Delete CastExpression(1597)", "Delete ParenthesizedExpression(1598)", "Delete SimpleName: length(1599)", "Delete MethodInvocation(1600)", "Delete NumberLiteral: 0(1601)", "Delete InfixExpression: !=(1602)", "Delete ReturnStatement(1603)", "Delete Block(1604)", "Delete SimpleName: x(1605)", "Delete SimpleName: Iterable(1606)", "Delete SimpleType: Iterable(1607)", "Delete WildcardType: ?(1608)", "Delete ParameterizedType: Iterable<?>(1609)", "Delete InstanceofExpression(1610)", "Delete SimpleName: Iterable(1611)", "Delete SimpleType: Iterable(1612)", "Delete WildcardType: ?(1613)", "Delete ParameterizedType: Iterable<?>(1614)", "Delete SimpleName: x(1615)", "Delete CastExpression(1616)", "Delete ParenthesizedExpression(1617)", "Delete SimpleName: iterator(1618)", "Delete MethodInvocation(1619)", "Delete SimpleName: hasNext(1620)", "Delete MethodInvocation(1621)", "Delete ReturnStatement(1622)", "Delete Block(1623)", "Delete SimpleName: IllegalArgumentException(1624)", "Delete SimpleType: IllegalArgumentException(1625)", "Delete StringLiteral: \"Don't know how to evaluate the truth of \"(1626)", "Delete SimpleName: x(1627)", "Delete StringLiteral: \" at \"(1628)", "Delete SimpleName: excerpt(1629)", "Delete QualifiedName: template.template(1630)", "Delete SimpleName: templateIndex(1631)", "Delete MethodInvocation(1632)", "Delete InfixExpression: +(1633)", "Delete ClassInstanceCreation(1634)", "Delete ThrowStatement(1635)", "Delete Block(1636)", "Delete IfStatement(1637)", "Delete IfStatement(1638)", "Delete IfStatement(1639)", "Delete IfStatement(1640)", "Delete IfStatement(1641)", "Delete Block(1642)", "Delete MethodDeclaration(1643)", "Delete TypeDeclaration: class(1644)", "Delete Modifier: private(1645)", "Delete Modifier: static(1646)", "Delete SimpleName: IterationNode(1647)", "Delete SimpleName: VarRefNode(1648)", "Delete SimpleType: VarRefNode(1649)", "Delete Modifier: private(1650)", "Delete Modifier: final(1651)", "Delete SimpleName: String(1652)", "Delete SimpleType: String(1653)", "Delete SimpleName: iterationVarName(1654)", "Delete VariableDeclarationFragment(1655)", "Delete FieldDeclaration(1656)", "Delete Modifier: private(1657)", "Delete Modifier: final(1658)", "Delete SimpleName: String(1659)", "Delete SimpleType: String(1660)", "Delete SimpleName: separator(1661)", "Delete VariableDeclarationFragment(1662)", "Delete FieldDeclaration(1663)", "Delete Modifier: private(1664)", "Delete Modifier: final(1665)", "Delete SimpleName: Node(1666)", "Delete SimpleType: Node(1667)", "Delete SimpleName: iteratedNode(1668)", "Delete VariableDeclarationFragment(1669)", "Delete FieldDeclaration(1670)", "Delete SimpleName: IterationNode(1671)", "Delete PrimitiveType: int(1672)", "Delete SimpleName: templateIndex(1673)", "Delete SingleVariableDeclaration(1674)", "Delete SimpleName: String(1675)", "Delete SimpleType: String(1676)", "Delete SimpleName: varRef(1677)", "Delete SingleVariableDeclaration(1678)", "Delete SimpleName: String(1679)", "Delete SimpleType: String(1680)", "Delete SimpleName: iterationVarName(1681)", "Delete SingleVariableDeclaration(1682)", "Delete SimpleName: String(1683)", "Delete SimpleType: String(1684)", "Delete SimpleName: separator(1685)", "Delete SingleVariableDeclaration(1686)", "Delete SimpleName: Node(1687)", "Delete SimpleType: Node(1688)", "Delete SimpleName: iteratedNode(1689)", "Delete SingleVariableDeclaration(1690)", "Delete SimpleName: templateIndex(1691)", "Delete SimpleName: varRef(1692)", "Delete SuperConstructorInvocation(1693)", "Delete ThisExpression(1694)", "Delete SimpleName: iterationVarName(1695)", "Delete FieldAccess(1696)", "Delete SimpleName: iterationVarName(1697)", "Delete Assignment: =(1698)", "Delete ExpressionStatement(1699)", "Delete ThisExpression(1700)", "Delete SimpleName: separator(1701)", "Delete FieldAccess(1702)", "Delete SimpleName: separator(1703)", "Delete Assignment: =(1704)", "Delete ExpressionStatement(1705)", "Delete ThisExpression(1706)", "Delete SimpleName: iteratedNode(1707)", "Delete FieldAccess(1708)", "Delete SimpleName: iteratedNode(1709)", "Delete Assignment: =(1710)", "Delete ExpressionStatement(1711)", "Delete Block(1712)", "Delete MethodDeclaration(1713)", "Delete SimpleName: Override(1714)", "Delete MarkerAnnotation(1715)", "Delete PrimitiveType: void(1716)", "Delete SimpleName: appendTo(1717)", "Delete SimpleName: StringBuilder(1718)", "Delete SimpleType: StringBuilder(1719)", "Delete SimpleName: sb(1720)", "Delete SingleVariableDeclaration(1721)", "Delete SimpleName: Template(1722)", "Delete SimpleType: Template(1723)", "Delete SimpleName: template(1724)", "Delete SingleVariableDeclaration(1725)", "Delete SimpleName: Map(1726)", "Delete SimpleType: Map(1727)", "Delete SimpleName: String(1728)", "Delete SimpleType: String(1729)", "Delete WildcardType: ?(1730)", "Delete ParameterizedType: Map<String,?>(1731)", "Delete SimpleName: vars(1732)", "Delete SingleVariableDeclaration(1733)", "Delete SimpleName: vars(1734)", "Delete SimpleName: containsKey(1735)", "Delete SimpleName: iterationVarName(1736)", "Delete MethodInvocation(1737)", "Delete SimpleName: IllegalArgumentException(1738)", "Delete SimpleType: IllegalArgumentException(1739)", "Delete StringLiteral: \"Iteration variable name \"(1740)", "Delete SimpleName: iterationVarName(1741)", "Delete StringLiteral: \" is already defined at \"(1742)", "Delete SimpleName: excerpt(1743)", "Delete QualifiedName: template.template(1744)", "Delete SimpleName: templateIndex(1745)", "Delete MethodInvocation(1746)", "Delete InfixExpression: +(1747)", "Delete ClassInstanceCreation(1748)", "Delete ThrowStatement(1749)", "Delete Block(1750)", "Delete IfStatement(1751)", "Delete SimpleName: Map(1752)", "Delete SimpleType: Map(1753)", "Delete SimpleName: String(1754)", "Delete SimpleType: String(1755)", "Delete SimpleName: Object(1756)", "Delete SimpleType: Object(1757)", "Delete ParameterizedType: Map<String,Object>(1758)", "Delete SimpleName: newVars(1759)", "Delete SimpleName: HashMap(1760)", "Delete SimpleType: HashMap(1761)", "Delete SimpleName: String(1762)", "Delete SimpleType: String(1763)", "Delete SimpleName: Object(1764)", "Delete SimpleType: Object(1765)", "Delete ParameterizedType: HashMap<String,Object>(1766)", "Delete SimpleName: vars(1767)", "Delete ClassInstanceCreation(1768)", "Delete VariableDeclarationFragment(1769)", "Delete VariableDeclarationStatement(1770)", "Delete SimpleName: Object(1771)", "Delete SimpleType: Object(1772)", "Delete SimpleName: iterableValue(1773)", "Delete SimpleName: getVar(1774)", "Delete SimpleName: vars(1775)", "Delete SimpleName: template(1776)", "Delete MethodInvocation(1777)", "Delete VariableDeclarationFragment(1778)", "Delete VariableDeclarationStatement(1779)", "Delete SimpleName: iterableValue(1780)", "Delete SimpleName: Iterable(1781)", "Delete SimpleType: Iterable(1782)", "Delete WildcardType: ?(1783)", "Delete ParameterizedType: Iterable<?>(1784)", "Delete InstanceofExpression(1785)", "Delete ParenthesizedExpression(1786)", "Delete PrefixExpression: !(1787)", "Delete SimpleName: IllegalArgumentException(1788)", "Delete SimpleType: IllegalArgumentException(1789)", "Delete StringLiteral: \"Value (\"(1790)", "Delete SimpleName: iterableValue(1791)", "Delete StringLiteral: \") is not Iterable at \"(1792)", "Delete SimpleName: excerpt(1793)", "Delete QualifiedName: template.template(1794)", "Delete SimpleName: templateIndex(1795)", "Delete MethodInvocation(1796)", "Delete InfixExpression: +(1797)", "Delete ClassInstanceCreation(1798)", "Delete ThrowStatement(1799)", "Delete Block(1800)", "Delete IfStatement(1801)", "Delete SimpleName: Iterable(1802)", "Delete SimpleType: Iterable(1803)", "Delete WildcardType: ?(1804)", "Delete ParameterizedType: Iterable<?>(1805)", "Delete SimpleName: iterable(1806)", "Delete SimpleName: Iterable(1807)", "Delete SimpleType: Iterable(1808)", "Delete WildcardType: ?(1809)", "Delete ParameterizedType: Iterable<?>(1810)", "Delete SimpleName: iterableValue(1811)", "Delete CastExpression(1812)", "Delete VariableDeclarationFragment(1813)", "Delete VariableDeclarationStatement(1814)", "Delete SimpleName: String(1815)", "Delete SimpleType: String(1816)", "Delete SimpleName: sep(1817)", "Delete StringLiteral: \"\"(1818)", "Delete VariableDeclarationFragment(1819)", "Delete VariableDeclarationStatement(1820)", "Delete SimpleName: Object(1821)", "Delete SimpleType: Object(1822)", "Delete SimpleName: value(1823)", "Delete SingleVariableDeclaration(1824)", "Delete SimpleName: iterable(1825)", "Delete SimpleName: newVars(1826)", "Delete SimpleName: put(1827)", "Delete SimpleName: iterationVarName(1828)", "Delete SimpleName: value(1829)", "Delete MethodInvocation(1830)", "Delete ExpressionStatement(1831)", "Delete SimpleName: sb(1832)", "Delete SimpleName: append(1833)", "Delete SimpleName: sep(1834)", "Delete MethodInvocation(1835)", "Delete ExpressionStatement(1836)", "Delete SimpleName: iteratedNode(1837)", "Delete SimpleName: appendTo(1838)", "Delete SimpleName: sb(1839)", "Delete SimpleName: template(1840)", "Delete SimpleName: newVars(1841)", "Delete MethodInvocation(1842)", "Delete ExpressionStatement(1843)", "Delete SimpleName: sep(1844)", "Delete SimpleName: separator(1845)", "Delete Assignment: =(1846)", "Delete ExpressionStatement(1847)", "Delete Block(1848)", "Delete EnhancedForStatement(1849)", "Delete Block(1850)", "Delete MethodDeclaration(1851)", "Delete TypeDeclaration: class(1852)", "Delete TypeDeclaration: class(1853)"]}}, {"TemplateVars_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: org.apache.velocity.VelocityContext to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: org.apache.velocity.runtime.RuntimeInstance to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: org.apache.velocity.runtime.parser.ParseException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.apache.velocity.runtime.parser.node.SimpleNode to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.io.InputStream to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: java.io.InputStreamReader to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: java.io.UnsupportedEncodingException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "UPDATE from java.util.Map to java.io.Reader", "operations": ["UPD QualifiedName: java.util.Map from java.util.Map to java.io.Reader"]}, {"root": "UPDATE from java.util.TreeMap to java.io.StringWriter", "operations": ["UPD QualifiedName: java.util.TreeMap from java.util.TreeMap to java.io.StringWriter"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS SimpleType: RuntimeInstance to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: RuntimeInstance to SimpleType: RuntimeInstance at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: RuntimeInstance to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: velocityRuntimeInstance to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: RuntimeInstance to SimpleType: RuntimeInstance at 0"]}, {"root": "INS Initializer to TypeDeclaration: class at 5", "operations": ["INS Block to Initializer at 1", "INS SimpleName: velocityRuntimeInstance to MethodInvocation at 0", "INS StringLiteral: \"runtime.references.strict\" to MethodInvocation at 2", "INS SimpleName: velocityRuntimeInstance to MethodInvocation at 0", "INS Modifier: static to Initializer at 0", "INS ExpressionStatement to Block at 0", "INS Initializer to TypeDeclaration: class at 5", "INS SimpleName: setProperty to MethodInvocation at 1", "INS StringLiteral: \"true\" to MethodInvocation at 3", "INS SimpleName: init to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from Template to SimpleNode", "operations": ["UPD SimpleName: Template from Template to SimpleNode", "UPD SimpleType: Template from Template to SimpleNode"]}, {"root": "UPDATE from template to parsedTemplate", "operations": ["UPD SimpleName: template from template to parsedTemplate", "UPD SimpleName: template from template to parsedTemplate", "UPD SimpleName: line from line to parsedTemplate"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 1"]}, {"root": "INS SimpleName: toText to MethodDeclaration at 2", "operations": ["INS SimpleName: toText to MethodDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 3", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: getTemplateName to MethodInvocation at 1", "INS SimpleName: rendered to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 4", "INS StringLiteral: \"Template rendering failed\" to ClassInstanceCreation at 1", "INS SimpleName: velocityContext to MethodInvocation at 2", "INS SimpleName: parsedTemplate to VariableDeclarationFragment at 0", "INS SimpleName: parsedTemplate to MethodInvocation at 5", "INS SimpleName: SimpleNode to SimpleType: SimpleNode at 0", "INS SimpleType: SimpleNode to VariableDeclarationStatement at 0", "INS SimpleName: velocityContext to VariableDeclarationFragment at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: rendered to VariableDeclarationFragment at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: writer to MethodInvocation at 3", "INS IfStatement to Block at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: parsedTemplate to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: toVelocityContext to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS ThrowStatement to Block at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: VelocityContext to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleType: VelocityContext to MethodDeclaration at 1", "operations": ["INS SimpleType: VelocityContext to MethodDeclaration at 1"]}, {"root": "UPDATE from toMap to toVelocityContext", "operations": ["UPD SimpleName: toMap from toMap to toVelocityContext"]}, {"root": "INS Modifier: static to MethodDeclaration at 0", "operations": ["INS Modifier: static to MethodDeclaration at 0"]}, {"root": "INS SimpleType: SimpleNode to MethodDeclaration at 1", "operations": ["INS SimpleType: SimpleNode to MethodDeclaration at 1", "INS SimpleName: SimpleNode to SimpleType: SimpleNode at 0"]}, {"root": "UPDATE from toText to parsedTemplateForResource", "operations": ["UPD SimpleName: toText from toText to parsedTemplateForResource"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from  method which is the template to substitute them into. Once the values of the to  method which is the template to substitute them into. Once the values", "operations": ["UPD TextElement:  method which is the template to substitute them into. Once the values of the from  method which is the template to substitute them into. Once the values of the to  method which is the template to substitute them into. Once the values"]}, {"root": "UPDATE from fields have been assigned, the  to of the fields have been assigned, the ", "operations": ["UPD TextElement: fields have been assigned, the  from fields have been assigned, the  to of the fields have been assigned, the "]}, {"root": "UPDATE from  method returns the result of substituting them to  method returns the result of substituting", "operations": ["UPD TextElement:  method returns the result of substituting them from  method returns the result of substituting them to  method returns the result of substituting"]}, {"root": "UPDATE from into the template. to them into the template.", "operations": ["UPD TextElement: into the template. from into the template. to them into the template."]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ReturnStatement to Block at 5"]}, {"root": "UPDATE from Object to VelocityContext", "operations": ["UPD SimpleName: Object from Object to VelocityContext", "UPD SimpleName: Object from Object to VelocityContext", "UPD SimpleName: String from String to VelocityContext", "UPD SimpleName: Object from Object to VelocityContext"]}, {"root": "MOVE from SimpleType: VelocityContext", "operations": ["MOV SimpleName: Object to SimpleType: VelocityContext at 0"]}, {"root": "UPDATE from vars to resourceName", "operations": ["UPD SimpleName: vars from vars to resourceName", "UPD SimpleName: line from line to resourceName"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: in to VariableDeclarationFragment at 0", "INS SimpleType: AutoValueTemplateVars to TypeLiteral at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleType: InputStream to VariableDeclarationStatement at 0", "INS SimpleName: resourceName to MethodInvocation at 2", "INS SimpleName: getResourceAsStream to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS ThrowStatement to Block at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS IfStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: resourceName to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS StringLiteral: \"Could not find resource: \" to InfixExpression: + at 0", "INS SimpleName: in to InfixExpression: == at 0"]}, {"root": "INS TryStatement to Block at 2", "operations": ["INS SimpleType: ParseException to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: AssertionError to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS CatchClause to TryStatement at 2", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleName: AssertionError to SimpleType: AssertionError at 0", "INS SimpleType: UnsupportedEncodingException to SingleVariableDeclaration at 0", "INS Block to CatchClause at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: Reader to SimpleType: Reader at 0", "INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS Block to CatchClause at 1", "INS ThrowStatement to Block at 0", "INS TryStatement to Block at 2", "INS SimpleType: AssertionError to ClassInstanceCreation at 0", "INS SimpleName: UnsupportedEncodingException to SimpleType: UnsupportedEncodingException at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: Reader to VariableDeclarationStatement at 0", "INS SimpleName: AssertionError to SimpleType: AssertionError at 0"]}, {"root": "UPDATE from Returns a string that is the concatenation of the given strings, with a newline added at to Returns the result of substituting the variables defined by the fields of this class", "operations": ["UPD TextElement: Returns a string that is the concatenation of the given strings, with a newline added at from Returns a string that is the concatenation of the given strings, with a newline added at to Returns the result of substituting the variables defined by the fields of this class"]}, {"root": "UPDATE from the end of each one. This saves having to type  to (a concrete subclass of TemplateVars) into the template returned by ", "operations": ["UPD TextElement: the end of each one. This saves having to type  from the end of each one. This saves having to type  to (a concrete subclass of TemplateVars) into the template returned by "]}, {"root": "UPDATE from @code to @link", "operations": ["UPD TagElement: @code from @code to @link"]}, {"root": "UPDATE from  all the time. to .", "operations": ["UPD TextElement:  all the time. from  all the time. to ."]}, {"root": "UPDATE from StringBuilder to StringWriter", "operations": ["UPD SimpleType: StringBuilder from StringBuilder to StringWriter", "UPD SimpleName: StringBuilder from StringBuilder to StringWriter", "UPD SimpleType: StringBuilder from StringBuilder to StringWriter", "UPD SimpleName: StringBuilder from StringBuilder to StringWriter"]}, {"root": "INS SimpleType: VelocityContext to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: VelocityContext to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: velocityContext to ReturnStatement at 0", "operations": ["INS SimpleName: velocityContext to ReturnStatement at 0"]}, {"root": "INS MethodRef to TagElement: @code at 0", "operations": ["INS SimpleName: parsedTemplate to MethodRef at 0", "INS MethodRef to TagElement: @code at 0"]}, {"root": "MOVE from SimpleType: VelocityContext", "operations": ["MOV SimpleName: String to SimpleType: VelocityContext at 0"]}, {"root": "UPDATE from sb to writer", "operations": ["UPD SimpleName: sb from sb to writer", "UPD SimpleName: sb from sb to writer"]}, {"root": "MOVE from SimpleType: VelocityContext", "operations": ["MOV SimpleName: Object to SimpleType: VelocityContext at 0"]}, {"root": "UPDATE from map to velocityContext", "operations": ["UPD SimpleName: map from map to velocityContext", "UPD SimpleName: map from map to velocityContext"]}, {"root": "UPDATE from Map to InputStream", "operations": ["UPD SimpleName: Map from Map to InputStream"]}, {"root": "MOVE from SimpleType: InputStream", "operations": ["MOV SimpleName: Map to SimpleType: InputStream at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "UPDATE from sb to velocityRuntimeInstance", "operations": ["UPD SimpleName: sb from sb to velocityRuntimeInstance"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: line to MethodInvocation at 0", "MOV SimpleName: sb to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from append to render", "operations": ["UPD SimpleName: append from append to render"]}, {"root": "INS SimpleType: VelocityContext to ClassInstanceCreation at 0", "operations": ["INS SimpleType: VelocityContext to ClassInstanceCreation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from SimpleType: VelocityContext", "operations": ["MOV SimpleName: Object to SimpleType: VelocityContext at 0"]}, {"root": "UPDATE from vars to reader", "operations": ["UPD SimpleName: vars from vars to reader", "UPD SimpleName: rewrite from rewrite to reader"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS StringLiteral: \"UTF-8\" to ClassInstanceCreation at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: InputStreamReader to SimpleType: InputStreamReader at 0", "INS SimpleType: InputStreamReader to ClassInstanceCreation at 0", "INS SimpleName: in to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: velocityRuntimeInstance to MethodInvocation at 0", "operations": ["INS SimpleName: velocityRuntimeInstance to MethodInvocation at 0"]}, {"root": "UPDATE from template to parse", "operations": ["UPD SimpleName: template from template to parse"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: template to MethodInvocation at 1"]}, {"root": "UPDATE from String to AutoValueTemplateVars", "operations": ["UPD SimpleName: String from String to AutoValueTemplateVars"]}, {"root": "MOVE from SimpleType: AutoValueTemplateVars", "operations": ["MOV SimpleName: String to SimpleType: AutoValueTemplateVars at 0"]}, {"root": "UPDATE from Object to IllegalArgumentException", "operations": ["UPD SimpleName: Object from Object to IllegalArgumentException"]}, {"root": "MOVE from SimpleType: IllegalArgumentException", "operations": ["MOV SimpleName: Object to SimpleType: IllegalArgumentException at 0"]}, {"root": "DEL TextElement:  \"...\\n\" +", "operations": ["DEL TextElement:  \"...\\n\" +"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String"]}, {"root": "DEL SimpleName: concatLines", "operations": ["DEL SimpleName: concatLines"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SimpleName: lines", "DEL SimpleName: String", "DEL SingleVariableDeclaration"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL SimpleName: lines", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Block", "DEL EnhancedForStatement", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \"\\n\""]}, {"root": "DEL ParameterizedType: Map<String,Object>", "operations": ["DEL SimpleType: Map", "DEL SimpleType: Object", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleName: Map", "DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL ParameterizedType: Map<String,Object>", "operations": ["DEL SimpleName: String", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleType: String", "DEL SimpleType: Object", "DEL SimpleName: Map", "DEL SimpleType: Map"]}, {"root": "DEL ParameterizedType: TreeMap<String,Object>", "operations": ["DEL SimpleType: TreeMap", "DEL SimpleName: TreeMap", "DEL ParameterizedType: TreeMap<String,Object>", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleType: Object"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: unmodifiableMap", "DEL MethodInvocation", "DEL SimpleName: map", "DEL SimpleName: Collections"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: (a concrete subclass of TemplateVars) into the template returned by ", "DEL MethodRef", "DEL SimpleName: template", "DEL Javadoc", "DEL TextElement: Returns the result of substituting the variables defined by the fields of this class", "DEL TagElement: @link", "DEL TextElement: ."]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toMap"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: String", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL SimpleType: Map"]}]}}, {"TemplateVars_diff": {"operations": ["Move ImportDeclaration(13) into CompilationUnit(475) at 1", "Move ImportDeclaration(15) into CompilationUnit(475) at 2", "Insert ImportDeclaration(3) into CompilationUnit(475) at 1", "Insert ImportDeclaration(5) into CompilationUnit(475) at 2", "Insert ImportDeclaration(7) into CompilationUnit(475) at 3", "Insert ImportDeclaration(9) into CompilationUnit(475) at 4", "Insert ImportDeclaration(11) into CompilationUnit(475) at 5", "Insert ImportDeclaration(13) into CompilationUnit(475) at 6", "Insert ImportDeclaration(19) into CompilationUnit(475) at 9", "Move MethodDeclaration(245) into TypeDeclaration: class(474) at 9", "Insert QualifiedName: org.apache.velocity.VelocityContext(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: org.apache.velocity.runtime.RuntimeInstance(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: org.apache.velocity.runtime.parser.ParseException(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.apache.velocity.runtime.parser.node.SimpleNode(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: java.io.InputStream(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.io.InputStreamReader(12) into ImportDeclaration(13) at 0", "Update QualifiedName: java.util.Map(12) to java.io.Reader", "Update QualifiedName: java.util.TreeMap(14) to java.io.StringWriter", "Insert QualifiedName: java.io.UnsupportedEncodingException(18) into ImportDeclaration(19) at 0", "Insert FieldDeclaration(67) into TypeDeclaration: class(474) at 4", "Insert Initializer(80) into TypeDeclaration: class(474) at 5", "Update SimpleType: Template(40) to SimpleNode", "Update SimpleName: template(41) to parsedTemplate", "Insert Modifier: private(57) into FieldDeclaration(67) at 0", "Insert Modifier: static(58) into FieldDeclaration(67) at 1", "Insert Modifier: final(59) into FieldDeclaration(67) at 2", "Insert SimpleType: RuntimeInstance(61) into FieldDeclaration(67) at 3", "Insert VariableDeclarationFragment(66) into FieldDeclaration(67) at 4", "Insert Modifier: static(68) into Initializer(80) at 0", "Insert Block(79) into Initializer(80) at 1", "Move SimpleType: String(224) into MethodDeclaration(269) at 1", "Insert SimpleName: toText(219) into MethodDeclaration(269) at 2", "Insert Block(268) into MethodDeclaration(269) at 3", "Insert SimpleType: VelocityContext(272) into MethodDeclaration(340) at 1", "Update SimpleName: toMap(254) to toVelocityContext", "Insert Modifier: static(341) into MethodDeclaration(413) at 0", "Insert SimpleType: SimpleNode(343) into MethodDeclaration(413) at 1", "Update SimpleName: toText(225) to parsedTemplateForResource", "Move SingleVariableDeclaration(197) into MethodDeclaration(413) at 4", "Update TextElement:  method which is the template to substitute them into. Once the values of the(21) to  method which is the template to substitute them into. Once the values", "Update TextElement: fields have been assigned, the (22) to of the fields have been assigned, the ", "Update TextElement:  method returns the result of substituting them(26) to  method returns the result of substituting", "Update TextElement: into the template.(27) to them into the template.", "Update SimpleName: Template(39) to SimpleNode", "Insert SimpleName: RuntimeInstance(60) into SimpleType: RuntimeInstance(61) at 0", "Insert SimpleName: velocityRuntimeInstance(62) into VariableDeclarationFragment(66) at 0", "Insert ClassInstanceCreation(65) into VariableDeclarationFragment(66) at 1", "Insert ExpressionStatement(74) into Block(79) at 0", "Insert ExpressionStatement(78) into Block(79) at 1", "Insert VariableDeclarationStatement(226) into Block(268) at 0", "Move VariableDeclarationStatement(193) into Block(268) at 1", "Insert VariableDeclarationStatement(241) into Block(268) at 2", "Insert VariableDeclarationStatement(254) into Block(268) at 3", "Insert IfStatement(263) into Block(268) at 4", "Move ReturnStatement(212) into Block(268) at 5", "Update SimpleName: Object(251) to VelocityContext", "Move SimpleName: Object(251) into SimpleType: VelocityContext(272) at 0", "Insert SimpleName: SimpleNode(342) into SimpleType: SimpleNode(343) at 0", "Update SimpleName: line(196) to resourceName", "Insert VariableDeclarationStatement(359) into Block(412) at 0", "Insert IfStatement(371) into Block(412) at 1", "Insert TryStatement(411) into Block(412) at 2", "Insert SimpleType: RuntimeInstance(64) into ClassInstanceCreation(65) at 0", "Insert MethodInvocation(73) into ExpressionStatement(74) at 0", "Insert MethodInvocation(77) into ExpressionStatement(78) at 0", "Update TextElement: Returns a string that is the concatenation of the given strings, with a newline added at(171) to Returns the result of substituting the variables defined by the fields of this class", "Update TextElement: the end of each one. This saves having to type (172) to (a concrete subclass of TemplateVars) into the template returned by ", "Update TagElement: @code(174) to @link", "Update TextElement:  all the time.(175) to .", "Insert SimpleType: VelocityContext(221) into VariableDeclarationStatement(226) at 0", "Insert VariableDeclarationFragment(225) into VariableDeclarationStatement(226) at 1", "Update SimpleType: StringBuilder(187) to StringWriter", "Insert SimpleType: SimpleNode(236) into VariableDeclarationStatement(241) at 0", "Insert VariableDeclarationFragment(240) into VariableDeclarationStatement(241) at 1", "Insert PrimitiveType: boolean(242) into VariableDeclarationStatement(254) at 0", "Insert VariableDeclarationFragment(253) into VariableDeclarationStatement(254) at 1", "Insert PrefixExpression: !(256) into IfStatement(263) at 0", "Insert Block(262) into IfStatement(263) at 1", "Insert SimpleType: VelocityContext(275) into VariableDeclarationStatement(281) at 0", "Insert SimpleName: velocityContext(337) into ReturnStatement(338) at 0", "Insert SimpleType: InputStream(350) into VariableDeclarationStatement(359) at 0", "Insert VariableDeclarationFragment(358) into VariableDeclarationStatement(359) at 1", "Insert InfixExpression: ==(362) into IfStatement(371) at 0", "Insert Block(370) into IfStatement(371) at 1", "Insert Block(388) into TryStatement(411) at 0", "Insert CatchClause(399) into TryStatement(411) at 1", "Insert CatchClause(410) into TryStatement(411) at 2", "Update SimpleName: template(18) to parsedTemplate", "Insert SimpleName: RuntimeInstance(63) into SimpleType: RuntimeInstance(64) at 0", "Insert SimpleName: velocityRuntimeInstance(69) into MethodInvocation(73) at 0", "Insert SimpleName: setProperty(70) into MethodInvocation(73) at 1", "Insert StringLiteral: \"runtime.references.strict\"(71) into MethodInvocation(73) at 2", "Insert StringLiteral: \"true\"(72) into MethodInvocation(73) at 3", "Insert SimpleName: velocityRuntimeInstance(75) into MethodInvocation(77) at 0", "Insert SimpleName: init(76) into MethodInvocation(77) at 1", "Insert MethodRef(212) into TagElement: @link(213) at 0", "Update SimpleName: String(179) to VelocityContext", "Move SimpleName: String(179) into SimpleType: VelocityContext(221) at 0", "Insert SimpleName: velocityContext(222) into VariableDeclarationFragment(225) at 0", "Insert MethodInvocation(224) into VariableDeclarationFragment(225) at 1", "Update SimpleName: StringBuilder(186) to StringWriter", "Update SimpleName: sb(188) to writer", "Insert SimpleName: SimpleNode(235) into SimpleType: SimpleNode(236) at 0", "Insert SimpleName: parsedTemplate(237) into VariableDeclarationFragment(240) at 0", "Insert MethodInvocation(239) into VariableDeclarationFragment(240) at 1", "Insert SimpleName: rendered(243) into VariableDeclarationFragment(253) at 0", "Insert MethodInvocation(252) into VariableDeclarationFragment(253) at 1", "Insert SimpleName: rendered(255) into PrefixExpression: !(256) at 0", "Insert ThrowStatement(261) into Block(262) at 0", "Update SimpleName: sb(209) to writer", "Update SimpleName: Object(259) to VelocityContext", "Move SimpleName: Object(259) into SimpleType: VelocityContext(275) at 0", "Update SimpleName: map(262) to velocityContext", "Update SimpleName: Map(226) to InputStream", "Move SimpleName: Map(226) into SimpleType: InputStream(350) at 0", "Insert SimpleName: in(351) into VariableDeclarationFragment(358) at 0", "Insert MethodInvocation(357) into VariableDeclarationFragment(358) at 1", "Insert SimpleName: in(360) into InfixExpression: ==(362) at 0", "Insert NullLiteral(361) into InfixExpression: ==(362) at 1", "Insert ThrowStatement(369) into Block(370) at 0", "Insert VariableDeclarationStatement(381) into Block(388) at 0", "Move ReturnStatement(243) into Block(388) at 1", "Insert SingleVariableDeclaration(392) into CatchClause(399) at 0", "Insert Block(398) into CatchClause(399) at 1", "Insert SingleVariableDeclaration(403) into CatchClause(410) at 0", "Insert Block(409) into CatchClause(410) at 1", "Insert SimpleName: parsedTemplate(211) into MethodRef(212) at 0", "Insert SimpleName: toVelocityContext(223) into MethodInvocation(224) at 0", "Update SimpleType: StringBuilder(190) to StringWriter", "Insert SimpleName: parsedTemplate(238) into MethodInvocation(239) at 0", "Update SimpleName: sb(199) to velocityRuntimeInstance", "Move SimpleName: sb(199) into MethodInvocation(252) at 0", "Update SimpleName: append(200) to render", "Move SimpleName: append(200) into MethodInvocation(252) at 1", "Insert SimpleName: velocityContext(246) into MethodInvocation(252) at 2", "Insert SimpleName: writer(247) into MethodInvocation(252) at 3", "Insert MethodInvocation(250) into MethodInvocation(252) at 4", "Insert SimpleName: parsedTemplate(251) into MethodInvocation(252) at 5", "Insert ClassInstanceCreation(260) into ThrowStatement(261) at 0", "Insert SimpleType: VelocityContext(278) into ClassInstanceCreation(279) at 0", "Insert TypeLiteral(354) into MethodInvocation(357) at 0", "Insert SimpleName: getResourceAsStream(355) into MethodInvocation(357) at 1", "Insert SimpleName: resourceName(356) into MethodInvocation(357) at 2", "Insert ClassInstanceCreation(368) into ThrowStatement(369) at 0", "Insert SimpleType: Reader(373) into VariableDeclarationStatement(381) at 0", "Move VariableDeclarationFragment(236) into VariableDeclarationStatement(381) at 1", "Insert SimpleType: UnsupportedEncodingException(390) into SingleVariableDeclaration(392) at 0", "Insert SimpleName: e(391) into SingleVariableDeclaration(392) at 1", "Insert ThrowStatement(397) into Block(398) at 0", "Insert SimpleType: ParseException(401) into SingleVariableDeclaration(403) at 0", "Insert SimpleName: e(402) into SingleVariableDeclaration(403) at 1", "Insert ThrowStatement(408) into Block(409) at 0", "Update SimpleName: StringBuilder(189) to StringWriter", "Update SimpleName: line(201) to parsedTemplate", "Move SimpleName: line(201) into MethodInvocation(250) at 0", "Insert SimpleName: getTemplateName(249) into MethodInvocation(250) at 1", "Insert SimpleType: IllegalArgumentException(258) into ClassInstanceCreation(260) at 0", "Insert StringLiteral: \"Template rendering failed\"(259) into ClassInstanceCreation(260) at 1", "Update SimpleName: Object(267) to VelocityContext", "Move SimpleName: Object(267) into SimpleType: VelocityContext(278) at 0", "Insert SimpleType: AutoValueTemplateVars(353) into TypeLiteral(354) at 0", "Insert SimpleType: IllegalArgumentException(364) into ClassInstanceCreation(368) at 0", "Insert InfixExpression: +(367) into ClassInstanceCreation(368) at 1", "Insert SimpleName: Reader(372) into SimpleType: Reader(373) at 0", "Update SimpleName: vars(233) to reader", "Insert ClassInstanceCreation(379) into VariableDeclarationFragment(380) at 1", "Insert SimpleName: velocityRuntimeInstance(382) into MethodInvocation(386) at 0", "Update SimpleName: template(238) to parse", "Move SimpleName: template(238) into MethodInvocation(386) at 1", "Update SimpleName: rewrite(240) to reader", "Update SimpleName: vars(241) to resourceName", "Insert SimpleName: UnsupportedEncodingException(389) into SimpleType: UnsupportedEncodingException(390) at 0", "Insert ClassInstanceCreation(396) into ThrowStatement(397) at 0", "Insert SimpleName: ParseException(400) into SimpleType: ParseException(401) at 0", "Insert ClassInstanceCreation(407) into ThrowStatement(408) at 0", "Insert SimpleName: IllegalArgumentException(257) into SimpleType: IllegalArgumentException(258) at 0", "Update SimpleName: map(302) to velocityContext", "Update SimpleName: String(228) to AutoValueTemplateVars", "Move SimpleName: String(228) into SimpleType: AutoValueTemplateVars(353) at 0", "Update SimpleName: Object(230) to IllegalArgumentException", "Move SimpleName: Object(230) into SimpleType: IllegalArgumentException(364) at 0", "Insert StringLiteral: \"Could not find resource: \"(365) into InfixExpression: +(367) at 0", "Insert SimpleName: resourceName(366) into InfixExpression: +(367) at 1", "Insert SimpleType: InputStreamReader(376) into ClassInstanceCreation(379) at 0", "Insert SimpleName: in(377) into ClassInstanceCreation(379) at 1", "Insert StringLiteral: \"UTF-8\"(378) into ClassInstanceCreation(379) at 2", "Insert SimpleType: AssertionError(394) into ClassInstanceCreation(396) at 0", "Insert SimpleName: e(395) into ClassInstanceCreation(396) at 1", "Insert SimpleType: AssertionError(405) into ClassInstanceCreation(407) at 0", "Insert SimpleName: e(406) into ClassInstanceCreation(407) at 1", "Insert SimpleName: InputStreamReader(375) into SimpleType: InputStreamReader(376) at 0", "Insert SimpleName: AssertionError(393) into SimpleType: AssertionError(394) at 0", "Insert SimpleName: AssertionError(404) into SimpleType: AssertionError(405) at 0", "Delete TextElement:  \"...\\n\" +(173)", "Delete Modifier: static(178)", "Delete SimpleType: String(180)", "Delete SimpleName: concatLines(181)", "Delete SimpleName: String(182)", "Delete SimpleType: String(183)", "Delete SimpleName: lines(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: lines(198)", "Delete MethodInvocation(202)", "Delete SimpleName: append(203)", "Delete StringLiteral: \"\\n\"(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete Block(207)", "Delete EnhancedForStatement(208)", "Delete Block(213)", "Delete SimpleName: Map(247)", "Delete SimpleType: Map(248)", "Delete SimpleName: String(249)", "Delete SimpleType: String(250)", "Delete SimpleType: Object(252)", "Delete ParameterizedType: Map<String,Object>(253)", "Delete SimpleName: Map(255)", "Delete SimpleType: Map(256)", "Delete SimpleName: String(257)", "Delete SimpleType: String(258)", "Delete SimpleType: Object(260)", "Delete ParameterizedType: Map<String,Object>(261)", "Delete SimpleName: TreeMap(263)", "Delete SimpleType: TreeMap(264)", "Delete SimpleName: String(265)", "Delete SimpleType: String(266)", "Delete SimpleType: Object(268)", "Delete ParameterizedType: TreeMap<String,Object>(269)", "Delete SimpleName: Collections(328)", "Delete SimpleName: unmodifiableMap(329)", "Delete SimpleName: map(330)", "Delete MethodInvocation(331)", "Delete TextElement: Returns the result of substituting the variables defined by the fields of this class(215)", "Delete TextElement: (a concrete subclass of TemplateVars) into the template returned by (216)", "Delete SimpleName: template(217)", "Delete MethodRef(218)", "Delete TagElement: @link(219)", "Delete TextElement: .(220)", "Delete TagElement(221)", "Delete Javadoc(222)", "Delete SimpleName: toMap(234)", "Delete MethodInvocation(235)", "Delete MethodInvocation(239)", "Delete SimpleType: Map(227)", "Delete SimpleType: String(229)", "Delete SimpleType: Object(231)", "Delete ParameterizedType: Map<String,Object>(232)", "Delete VariableDeclarationStatement(237)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}