{"application": "apache-commons-csv", "csha": "3ea8118ff3793cc32fcf6d2c93d4f5eda73b374e", "files": [{"CSVLexer_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.csv.CSVLexer.Token.Type to org.apache.commons.csv.Token.Type", "operations": ["UPD QualifiedName: org.apache.commons.csv.CSVLexer.Token.Type from org.apache.commons.csv.CSVLexer.Token.Type to org.apache.commons.csv.Token.Type"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Javadoc", "DEL PrimitiveType: int", "DEL TextElement: length of the initial token (content-)buffer ", "DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: static", "DEL TagElement", "DEL Modifier: final", "DEL NumberLiteral: 50", "DEL SimpleName: INITIAL_TOKEN_LENGTH"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement: <p/>", "DEL SimpleType: StringBuilder", "DEL TextElement: It is used as contract between the lexer and the parser.", "DEL EnumDeclaration", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: content", "DEL SimpleName: Type", "DEL TagElement", "DEL SimpleName: isReady", "DEL SimpleName: Token", "DEL Assignment: =", "DEL FieldDeclaration", "DEL SimpleName: EOF", "DEL SimpleName: reset", "DEL ExpressionStatement", "DEL SimpleName: INITIAL_TOKEN_LENGTH", "DEL TextElement: Token has no valid content, i.e. is in its initialized state. ", "DEL EnumConstantDeclaration", "DEL TextElement: Token with content, at beginning or in the middle of a line. ", "DEL SimpleType: Token", "DEL SimpleName: isReady", "DEL NumberLiteral: 0", "DEL SimpleName: Token", "DEL TextElement: Token ready flag: indicates a valid token with content (ready for the parser). ", "DEL EnumConstantDeclaration", "DEL TextElement: Token (which can have content) when end of file is reached. ", "DEL SimpleName: StringBuilder", "DEL SimpleName: content", "DEL Javadoc", "DEL SimpleName: INVALID", "DEL SimpleName: EORECORD", "DEL TagElement", "DEL Assignment: =", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleName: Type", "DEL Modifier: static", "DEL SimpleName: type", "DEL TagElement", "DEL TagElement", "DEL TagElement", "DEL SimpleName: type", "DEL SimpleName: INVALID", "DEL TagElement", "DEL TextElement: Token type ", "DEL PrimitiveType: boolean", "DEL Block", "DEL Javadoc", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL EnumConstantDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL TextElement: Token with content when end of a line is reached. ", "DEL ReturnStatement", "DEL TextElement: The content buffer. ", "DEL BooleanLiteral: false", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: TOKEN", "DEL MethodInvocation", "DEL SimpleType: Type", "DEL SimpleName: setLength", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL TagElement", "DEL Javadoc", "DEL EnumConstantDeclaration", "DEL MethodDeclaration", "DEL SimpleName: StringBuilder", "DEL TextElement: Token is an internal token representation.", "DEL ExpressionStatement", "DEL Javadoc", "DEL ThisExpression", "DEL SimpleName: INVALID", "DEL VariableDeclarationFragment"]}]}}, {"CSVLexer_diff": {"operations": ["Update QualifiedName: org.apache.commons.csv.CSVLexer.Token.Type(4) to org.apache.commons.csv.Token.Type", "Delete TextElement: length of the initial token (content-)buffer (7)", "Delete TagElement(8)", "Delete Javadoc(9)", "Delete Modifier: private(10)", "Delete Modifier: static(11)", "Delete Modifier: final(12)", "Delete PrimitiveType: int(13)", "Delete SimpleName: INITIAL_TOKEN_LENGTH(14)", "Delete NumberLiteral: 50(15)", "Delete VariableDeclarationFragment(16)", "Delete FieldDeclaration(17)", "Delete TextElement: Token is an internal token representation.(45)", "Delete TextElement: <p/>(46)", "Delete TextElement: It is used as contract between the lexer and the parser.(47)", "Delete TagElement(48)", "Delete Javadoc(49)", "Delete Modifier: static(50)", "Delete SimpleName: Token(51)", "Delete SimpleName: Type(52)", "Delete TextElement: Token has no valid content, i.e. is in its initialized state. (53)", "Delete TagElement(54)", "Delete Javadoc(55)", "Delete SimpleName: INVALID(56)", "Delete EnumConstantDeclaration(57)", "Delete TextElement: Token with content, at beginning or in the middle of a line. (58)", "Delete TagElement(59)", "Delete Javadoc(60)", "Delete SimpleName: TOKEN(61)", "Delete EnumConstantDeclaration(62)", "Delete TextElement: Token (which can have content) when end of file is reached. (63)", "Delete TagElement(64)", "Delete Javadoc(65)", "Delete SimpleName: EOF(66)", "Delete EnumConstantDeclaration(67)", "Delete TextElement: Token with content when end of a line is reached. (68)", "Delete TagElement(69)", "Delete Javadoc(70)", "Delete SimpleName: EORECORD(71)", "Delete EnumConstantDeclaration(72)", "Delete EnumDeclaration(73)", "Delete TextElement: Token type (74)", "Delete TagElement(75)", "Delete Javadoc(76)", "Delete SimpleName: Type(77)", "Delete SimpleType: Type(78)", "Delete SimpleName: type(79)", "Delete SimpleName: INVALID(80)", "Delete VariableDeclarationFragment(81)", "Delete FieldDeclaration(82)", "Delete TextElement: The content buffer. (83)", "Delete TagElement(84)", "Delete Javadoc(85)", "Delete SimpleName: StringBuilder(86)", "Delete SimpleType: StringBuilder(87)", "Delete SimpleName: content(88)", "Delete SimpleName: StringBuilder(89)", "Delete SimpleType: StringBuilder(90)", "Delete SimpleName: INITIAL_TOKEN_LENGTH(91)", "Delete ClassInstanceCreation(92)", "Delete VariableDeclarationFragment(93)", "Delete FieldDeclaration(94)", "Delete TextElement: Token ready flag: indicates a valid token with content (ready for the parser). (95)", "Delete TagElement(96)", "Delete Javadoc(97)", "Delete PrimitiveType: boolean(98)", "Delete SimpleName: isReady(99)", "Delete VariableDeclarationFragment(100)", "Delete FieldDeclaration(101)", "Delete SimpleName: Token(102)", "Delete SimpleType: Token(103)", "Delete SimpleName: reset(104)", "Delete SimpleName: content(105)", "Delete SimpleName: setLength(106)", "Delete NumberLiteral: 0(107)", "Delete MethodInvocation(108)", "Delete ExpressionStatement(109)", "Delete SimpleName: type(110)", "Delete SimpleName: INVALID(111)", "Delete Assignment: =(112)", "Delete ExpressionStatement(113)", "Delete SimpleName: isReady(114)", "Delete BooleanLiteral: false(115)", "Delete Assignment: =(116)", "Delete ExpressionStatement(117)", "Delete ThisExpression(118)", "Delete ReturnStatement(119)", "Delete Block(120)", "Delete MethodDeclaration(121)", "Delete TypeDeclaration: class(122)"]}}, {"CSVParser_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.csv.CSVLexer.Token.Type to org.apache.commons.csv.Token.Type", "operations": ["UPD QualifiedName: org.apache.commons.csv.CSVLexer.Token.Type from org.apache.commons.csv.CSVLexer.Token.Type to org.apache.commons.csv.Token.Type"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.csv.CSVLexer.Token", "DEL ImportDeclaration"]}]}}, {"CSVParser_diff": {"operations": ["Update QualifiedName: org.apache.commons.csv.CSVLexer.Token.Type(22) to org.apache.commons.csv.Token.Type", "Delete QualifiedName: org.apache.commons.csv.CSVLexer.Token(20)", "Delete ImportDeclaration(21)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}