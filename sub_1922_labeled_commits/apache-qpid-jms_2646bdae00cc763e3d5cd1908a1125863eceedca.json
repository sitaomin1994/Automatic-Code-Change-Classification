{"application": "apache-qpid-jms", "csha": "2646bdae00cc763e3d5cd1908a1125863eceedca", "files": [{"AmqpTransferTagGenerator_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 5"]}, {"root": "UPDATE from java.util.Iterator to java.util.ArrayDeque", "operations": ["UPD QualifiedName: java.util.Iterator from java.util.Iterator to java.util.ArrayDeque"]}, {"root": "UPDATE from java.util.Set to java.util.Deque", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to java.util.Deque"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS Block to MethodDeclaration at 4", "INS SimpleName: tagPool to InfixExpression: != at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS InfixExpression: != to ReturnStatement at 0", "INS SimpleName: isPooling to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS TextElement:  true if the generator is using a pool of tags to reduce allocations. to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS Block to MethodDeclaration at 4", "INS SimpleName: encodingSize to MethodDeclaration at 2", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS WhileStatement to Block at 2", "INS Modifier: private to MethodDeclaration at 0", "INS NumberLiteral: 8 to InfixExpression: < at 1", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: size to InfixExpression: * at 0", "INS InfixExpression: && to WhileStatement at 0", "INS InfixExpression: >= to ParenthesizedExpression at 0", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS SimpleName: size to InfixExpression: < at 0", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to InfixExpression: >= at 1", "INS PrimitiveType: int to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: value to InfixExpression: < at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SimpleName: size to ReturnStatement at 0", "INS NumberLiteral: 1L to InfixExpression: << at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: size to VariableDeclarationFragment at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS Block to WhileStatement at 1", "INS ReturnStatement to Block at 3", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: size to PostfixExpression: ++ at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: value to InfixExpression: >= at 0", "INS QualifiedName: Long.BYTES to ReturnStatement at 0", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS ReturnStatement to Block at 0", "INS ParenthesizedExpression to InfixExpression: << at 1"]}, {"root": "UPDATE from Set<byte[]> to Deque<byte[]>", "operations": ["UPD ParameterizedType: Set<byte[]> from Set<byte[]> to Deque<byte[]>"]}, {"root": "UPDATE from Set to Deque", "operations": ["UPD SimpleName: Set from Set to Deque", "UPD SimpleType: Set from Set to Deque"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: tagBytes to Assignment: = at 0", "INS IfStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleName: tagBytes to InfixExpression: == at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: tag to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ++ to ForStatement at 2", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS ForStatement to Block at 3", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: == at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS IfStatement to Block at 2", "INS SimpleName: size to InfixExpression: < at 1"]}, {"root": "UPDATE from false to true", "operations": ["UPD BooleanLiteral: false from false to true"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "UPDATE from rc to tagBytes", "operations": ["UPD SimpleName: rc from rc to tagBytes", "UPD SimpleName: rc from rc to tagBytes", "UPD SimpleName: rc from rc to tagBytes"]}, {"root": "INS NullLiteral to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV PostfixExpression: ++ to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from iterator to size", "operations": ["UPD SimpleName: iterator from iterator to size"]}, {"root": "INS ArrayCreation to Assignment: = at 1", "operations": ["INS SimpleName: size to ArrayCreation at 1", "INS ArrayCreation to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from add to offerLast", "operations": ["UPD SimpleName: add from add to offerLast"]}, {"root": "UPDATE from LinkedHashSet<byte[]> to ArrayDeque<byte[]>", "operations": ["UPD ParameterizedType: LinkedHashSet<byte[]> from LinkedHashSet<byte[]> to ArrayDeque<byte[]>"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tagPool to MethodInvocation at 0", "MOV SimpleName: isEmpty to MethodInvocation at 1"]}, {"root": "UPDATE from isEmpty to pollFirst", "operations": ["UPD SimpleName: isEmpty from isEmpty to pollFirst"]}, {"root": "UPDATE from tagPool to encodingSize", "operations": ["UPD SimpleName: tagPool from tagPool to encodingSize"]}, {"root": "UPDATE from iterator to tag", "operations": ["UPD SimpleName: iterator from iterator to tag"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "UPDATE from LinkedHashSet to ArrayDeque", "operations": ["UPD SimpleType: LinkedHashSet from LinkedHashSet to ArrayDeque", "UPD SimpleName: LinkedHashSet from LinkedHashSet to ArrayDeque"]}, {"root": "INS ArrayAccess to Assignment: = at 0", "operations": ["INS ArrayAccess to Assignment: = at 0", "INS SimpleName: size to InfixExpression: - at 0", "INS SimpleName: i to InfixExpression: - at 2", "INS SimpleName: tagBytes to ArrayAccess at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: - to ArrayAccess at 1"]}, {"root": "INS CastExpression to Assignment: = at 1", "operations": ["INS SimpleName: i to InfixExpression: * at 0", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: tag to InfixExpression: >>> at 0", "INS CastExpression to Assignment: = at 1", "INS ParenthesizedExpression to CastExpression at 1", "INS InfixExpression: * to ParenthesizedExpression at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: >>> at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.UnsupportedEncodingException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.LinkedHashSet", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: next", "DEL SimpleName: iterator", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: rc", "operations": ["DEL SimpleName: rc"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"UTF-8\"", "DEL SimpleName: toHexString", "DEL SimpleName: getBytes", "DEL SimpleName: Long"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: iterator", "DEL SimpleName: Iterator", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Iterator<byte[]>", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TryStatement", "DEL ThrowStatement", "DEL CatchClause", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: UnsupportedEncodingException", "DEL ClassInstanceCreation", "DEL Block", "DEL Block", "DEL SimpleName: remove", "DEL SimpleType: Iterator", "DEL SimpleName: UnsupportedEncodingException", "DEL SimpleName: e", "DEL InfixExpression: &&", "DEL SimpleName: e", "DEL SimpleName: RuntimeException", "DEL VariableDeclarationStatement", "DEL SimpleType: RuntimeException", "DEL PrefixExpression: !", "DEL Block", "DEL IfStatement", "DEL Block"]}]}}, {"AmqpTransferTagGenerator_diff": {"operations": ["Move FieldDeclaration(46) into TypeDeclaration: class(284) at 5", "Update QualifiedName: java.util.Iterator(4) to java.util.ArrayDeque", "Update QualifiedName: java.util.Set(8) to java.util.Deque", "Insert MethodDeclaration(242) into TypeDeclaration: class(284) at 14", "Insert MethodDeclaration(283) into TypeDeclaration: class(284) at 15", "Update ParameterizedType: Set<byte[]>(43) to Deque<byte[]>", "Insert Javadoc(233) into MethodDeclaration(242) at 0", "Insert Modifier: public(234) into MethodDeclaration(242) at 1", "Insert PrimitiveType: boolean(235) into MethodDeclaration(242) at 2", "Insert SimpleName: isPooling(236) into MethodDeclaration(242) at 3", "Insert Block(241) into MethodDeclaration(242) at 4", "Insert Modifier: private(243) into MethodDeclaration(283) at 0", "Insert PrimitiveType: int(244) into MethodDeclaration(283) at 1", "Insert SimpleName: encodingSize(245) into MethodDeclaration(283) at 2", "Insert SingleVariableDeclaration(248) into MethodDeclaration(283) at 3", "Insert Block(282) into MethodDeclaration(283) at 4", "Update SimpleType: Set(39) to Deque", "Insert IfStatement(105) into Block(163) at 1", "Insert IfStatement(160) into Block(163) at 2", "Insert TagElement: @return(232) into Javadoc(233) at 0", "Insert ReturnStatement(240) into Block(241) at 0", "Insert PrimitiveType: long(246) into SingleVariableDeclaration(248) at 0", "Insert SimpleName: value(247) into SingleVariableDeclaration(248) at 1", "Insert IfStatement(255) into Block(282) at 0", "Insert VariableDeclarationStatement(260) into Block(282) at 1", "Insert WhileStatement(279) into Block(282) at 2", "Insert ReturnStatement(281) into Block(282) at 3", "Update SimpleName: Set(38) to Deque", "Update BooleanLiteral: false(49) to true", "Move InfixExpression: !=(100) into IfStatement(105) at 0", "Insert Block(104) into IfStatement(105) at 1", "Insert InfixExpression: ==(108) into IfStatement(160) at 0", "Insert Block(159) into IfStatement(160) at 1", "Update SimpleName: rc(156) to tagBytes", "Insert TextElement:  true if the generator is using a pool of tags to reduce allocations.(231) into TagElement: @return(232) at 0", "Insert InfixExpression: !=(239) into ReturnStatement(240) at 0", "Insert InfixExpression: <(251) into IfStatement(255) at 0", "Insert Block(254) into IfStatement(255) at 1", "Insert PrimitiveType: int(256) into VariableDeclarationStatement(260) at 0", "Insert VariableDeclarationFragment(259) into VariableDeclarationStatement(260) at 1", "Insert InfixExpression: &&(274) into WhileStatement(279) at 0", "Insert Block(278) into WhileStatement(279) at 1", "Insert SimpleName: size(280) into ReturnStatement(281) at 0", "Update SimpleName: rc(95) to tagBytes", "Insert NullLiteral(92) into VariableDeclarationFragment(93) at 1", "Insert ExpressionStatement(103) into Block(104) at 0", "Insert SimpleName: tagBytes(106) into InfixExpression: ==(108) at 0", "Insert NullLiteral(107) into InfixExpression: ==(108) at 1", "Insert VariableDeclarationStatement(114) into Block(159) at 0", "Insert VariableDeclarationStatement(121) into Block(159) at 1", "Move ExpressionStatement(124) into Block(159) at 2", "Insert ForStatement(158) into Block(159) at 3", "Insert SimpleName: tagPool(237) into InfixExpression: !=(239) at 0", "Insert NullLiteral(238) into InfixExpression: !=(239) at 1", "Insert SimpleName: value(249) into InfixExpression: <(251) at 0", "Insert NumberLiteral: 0(250) into InfixExpression: <(251) at 1", "Insert ReturnStatement(253) into Block(254) at 0", "Insert SimpleName: size(257) into VariableDeclarationFragment(259) at 0", "Insert NumberLiteral: 1(258) into VariableDeclarationFragment(259) at 1", "Insert InfixExpression: <(263) into InfixExpression: &&(274) at 0", "Insert ParenthesizedExpression(273) into InfixExpression: &&(274) at 1", "Insert ExpressionStatement(277) into Block(278) at 0", "Insert Assignment: =(102) into ExpressionStatement(103) at 0", "Insert PrimitiveType: long(109) into VariableDeclarationStatement(114) at 0", "Insert VariableDeclarationFragment(113) into VariableDeclarationStatement(114) at 1", "Insert PrimitiveType: int(115) into VariableDeclarationStatement(121) at 0", "Move VariableDeclarationFragment(117) into VariableDeclarationStatement(121) at 1", "Insert VariableDeclarationExpression(134) into ForStatement(158) at 0", "Insert InfixExpression: <(137) into ForStatement(158) at 1", "Insert PrefixExpression: ++(139) into ForStatement(158) at 2", "Insert Block(157) into ForStatement(158) at 3", "Insert QualifiedName: Long.BYTES(252) into ReturnStatement(253) at 0", "Insert SimpleName: size(261) into InfixExpression: <(263) at 0", "Insert NumberLiteral: 8(262) into InfixExpression: <(263) at 1", "Insert InfixExpression: >=(272) into ParenthesizedExpression(273) at 0", "Insert PostfixExpression: ++(276) into ExpressionStatement(277) at 0", "Insert SimpleName: tagBytes(98) into Assignment: =(102) at 0", "Insert MethodInvocation(101) into Assignment: =(102) at 1", "Insert SimpleName: tag(110) into VariableDeclarationFragment(113) at 0", "Move PostfixExpression: ++(134) into VariableDeclarationFragment(113) at 1", "Update SimpleName: iterator(113) to size", "Update SimpleName: rc(119) to tagBytes", "Insert ArrayCreation(127) into Assignment: =(128) at 1", "Insert PrimitiveType: int(130) into VariableDeclarationExpression(134) at 0", "Insert VariableDeclarationFragment(133) into VariableDeclarationExpression(134) at 1", "Insert SimpleName: i(135) into InfixExpression: <(137) at 0", "Insert SimpleName: size(136) into InfixExpression: <(137) at 1", "Insert SimpleName: i(138) into PrefixExpression: ++(139) at 0", "Move ExpressionStatement(140) into Block(157) at 0", "Update SimpleName: add(185) to offerLast", "Insert SimpleName: value(264) into InfixExpression: >=(272) at 0", "Insert ParenthesizedExpression(271) into InfixExpression: >=(272) at 1", "Insert SimpleName: size(275) into PostfixExpression: ++(276) at 0", "Update ParameterizedType: LinkedHashSet<byte[]>(67) to ArrayDeque<byte[]>", "Move SimpleName: tagPool(101) into MethodInvocation(101) at 0", "Update SimpleName: isEmpty(102) to pollFirst", "Move SimpleName: isEmpty(102) into MethodInvocation(101) at 1", "Update SimpleName: tagPool(114) to encodingSize", "Update SimpleName: iterator(115) to tag", "Move ArrayType: byte[](111) into ArrayCreation(127) at 0", "Insert SimpleName: size(126) into ArrayCreation(127) at 1", "Insert SimpleName: i(131) into VariableDeclarationFragment(133) at 0", "Insert NumberLiteral: 0(132) into VariableDeclarationFragment(133) at 1", "Insert InfixExpression: <<(270) into ParenthesizedExpression(271) at 0", "Update SimpleType: LinkedHashSet(63) to ArrayDeque", "Insert ArrayAccess(145) into Assignment: =(155) at 0", "Insert CastExpression(154) into Assignment: =(155) at 1", "Insert NumberLiteral: 1L(265) into InfixExpression: <<(270) at 0", "Insert ParenthesizedExpression(269) into InfixExpression: <<(270) at 1", "Update SimpleName: LinkedHashSet(62) to ArrayDeque", "Insert SimpleName: tagBytes(140) into ArrayAccess(145) at 0", "Insert InfixExpression: -(144) into ArrayAccess(145) at 1", "Insert PrimitiveType: byte(146) into CastExpression(154) at 0", "Insert ParenthesizedExpression(153) into CastExpression(154) at 1", "Insert InfixExpression: *(268) into ParenthesizedExpression(269) at 0", "Insert SimpleName: size(141) into InfixExpression: -(144) at 0", "Insert NumberLiteral: 1(142) into InfixExpression: -(144) at 1", "Insert SimpleName: i(143) into InfixExpression: -(144) at 2", "Insert InfixExpression: >>>(152) into ParenthesizedExpression(153) at 0", "Insert SimpleName: size(266) into InfixExpression: *(268) at 0", "Insert NumberLiteral: 8(267) into InfixExpression: *(268) at 1", "Insert SimpleName: tag(147) into InfixExpression: >>>(152) at 0", "Insert ParenthesizedExpression(151) into InfixExpression: >>>(152) at 1", "Insert InfixExpression: *(150) into ParenthesizedExpression(151) at 0", "Insert SimpleName: i(148) into InfixExpression: *(150) at 0", "Insert NumberLiteral: 8(149) into InfixExpression: *(150) at 1", "Delete QualifiedName: java.io.UnsupportedEncodingException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.LinkedHashSet(6)", "Delete ImportDeclaration(7)", "Delete SimpleName: iterator(120)", "Delete SimpleName: next(121)", "Delete MethodInvocation(122)", "Delete SimpleName: rc(130)", "Delete SimpleName: Long(131)", "Delete SimpleName: toHexString(132)", "Delete MethodInvocation(135)", "Delete SimpleName: getBytes(136)", "Delete StringLiteral: \"UTF-8\"(137)", "Delete MethodInvocation(138)", "Delete MethodInvocation(103)", "Delete PrefixExpression: !(104)", "Delete InfixExpression: &&(105)", "Delete Modifier: final(106)", "Delete SimpleName: Iterator(107)", "Delete SimpleType: Iterator(108)", "Delete ParameterizedType: Iterator<byte[]>(112)", "Delete VariableDeclarationStatement(118)", "Delete SimpleName: iterator(125)", "Delete SimpleName: remove(126)", "Delete MethodInvocation(127)", "Delete ExpressionStatement(128)", "Delete Block(129)", "Delete Block(141)", "Delete SimpleName: UnsupportedEncodingException(142)", "Delete SimpleType: UnsupportedEncodingException(143)", "Delete SimpleName: e(144)", "Delete SingleVariableDeclaration(145)", "Delete SimpleName: RuntimeException(146)", "Delete SimpleType: RuntimeException(147)", "Delete SimpleName: e(148)", "Delete ClassInstanceCreation(149)", "Delete ThrowStatement(150)", "Delete Block(151)", "Delete CatchClause(152)", "Delete TryStatement(153)", "Delete Block(154)", "Delete IfStatement(155)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}