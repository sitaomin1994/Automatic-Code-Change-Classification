{"application": "Netflix-governator", "csha": "c632bd23cd7fbc24276299c288fab9343c49cb68", "files": [{"Governator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.lang.annotation.Annotation to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.lang.reflect.Method to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: java.util.HashSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: java.util.LinkedHashSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: java.util.Set to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: com.google.inject.Binding to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: com.google.inject.Key to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS ImportDeclaration to CompilationUnit at 19", "INS QualifiedName: com.google.inject.Provides to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS QualifiedName: com.google.inject.TypeLiteral to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 21"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS QualifiedName: com.google.inject.spi.Element to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 22"]}, {"root": "INS ImportDeclaration to CompilationUnit at 23", "operations": ["INS ImportDeclaration to CompilationUnit at 23", "INS QualifiedName: com.google.inject.spi.Elements to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS QualifiedName: com.google.inject.util.Modules to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 24"]}, {"root": "INS ImportDeclaration to CompilationUnit at 25", "operations": ["INS ImportDeclaration to CompilationUnit at 25", "INS QualifiedName: com.netflix.governator.auto.AutoContext to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS QualifiedName: com.netflix.governator.auto.Condition to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 26"]}, {"root": "INS ImportDeclaration to CompilationUnit at 27", "operations": ["INS QualifiedName: com.netflix.governator.auto.DefaultPropertySource to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 27"]}, {"root": "INS ImportDeclaration to CompilationUnit at 28", "operations": ["INS QualifiedName: com.netflix.governator.auto.ModuleListProvider to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 28"]}, {"root": "INS ImportDeclaration to CompilationUnit at 29", "operations": ["INS QualifiedName: com.netflix.governator.auto.ModuleProvider to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 29"]}, {"root": "INS ImportDeclaration to CompilationUnit at 30", "operations": ["INS QualifiedName: com.netflix.governator.auto.PropertySource to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 30"]}, {"root": "INS ImportDeclaration to CompilationUnit at 31", "operations": ["INS QualifiedName: com.netflix.governator.auto.annotations.Bootstrap to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 31"]}, {"root": "INS ImportDeclaration to CompilationUnit at 32", "operations": ["INS ImportDeclaration to CompilationUnit at 32", "INS QualifiedName: com.netflix.governator.auto.annotations.Conditional to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 33", "operations": ["INS ImportDeclaration to CompilationUnit at 33", "INS QualifiedName: com.netflix.governator.auto.annotations.OverrideModule to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: Arrays to MethodInvocation at 0", "INS SimpleName: modules to MethodInvocation at 2", "INS Modifier: static to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: modules to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleType: Governator to ClassInstanceCreation at 0", "INS SimpleType: Module to SingleVariableDeclaration at 0", "INS SimpleName: asList to MethodInvocation at 1", "INS SimpleName: createInjector to MethodDeclaration at 3", "INS SimpleType: LifecycleInjector to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: GovernatorConfiguration to SimpleType: GovernatorConfiguration at 0", "INS SimpleName: create to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: config to ClassInstanceCreation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Governator to SimpleType: Governator at 0", "INS SimpleName: config to SingleVariableDeclaration at 1", "INS SimpleName: LifecycleInjector to SimpleType: LifecycleInjector at 0", "INS SimpleType: GovernatorConfiguration to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: Module to SimpleType: Module at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleName: Governator to SimpleType: Governator at 0", "INS SimpleName: GovernatorConfiguration to SimpleType: GovernatorConfiguration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: createInjector to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: modules to SingleVariableDeclaration at 1", "INS SimpleName: modules to ClassInstanceCreation at 2", "INS SimpleType: GovernatorConfiguration to SingleVariableDeclaration at 0", "INS SimpleType: Governator to ClassInstanceCreation at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS ParameterizedType: List<Module> to SingleVariableDeclaration at 0", "INS SimpleName: LifecycleInjector to SimpleType: LifecycleInjector at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleName: config to ClassInstanceCreation at 1", "INS SimpleName: config to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: create to MethodInvocation at 1", "INS SimpleType: LifecycleInjector to MethodDeclaration at 2", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: stage to VariableDeclarationFragment at 0", "INS SimpleType: Stage to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: Stage to SimpleType: Stage at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleName: bootstrapModules to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<Module> to FieldDeclaration at 2", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleName: List to SimpleType: List at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS SimpleName: modules to VariableDeclarationFragment at 0", "INS ParameterizedType: List<Module> to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: String to ParameterizedType: Set<String> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Set to ParameterizedType: Set<String> at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: profiles to VariableDeclarationFragment at 0", "INS ParameterizedType: Set<String> to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleType: List to ParameterizedType: List<ModuleListProvider> at 0", "INS SimpleName: moduleProviders to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 14", "INS SimpleType: ModuleListProvider to ParameterizedType: List<ModuleListProvider> at 1", "INS ParameterizedType: List<ModuleListProvider> to FieldDeclaration at 2", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: ModuleListProvider to SimpleType: ModuleListProvider at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: config to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS Modifier: private to MethodDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: profiles to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS ParameterizedType: List<Module> to SingleVariableDeclaration at 0", "INS SimpleName: GovernatorConfiguration to SimpleType: GovernatorConfiguration at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: modules to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleName: Governator to MethodDeclaration at 1", "INS SimpleName: modules to SingleVariableDeclaration at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: config to MethodInvocation at 0", "INS SimpleName: modules to FieldAccess at 1", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: modules to FieldAccess at 1", "INS SimpleName: getModuleListProviders to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS ParameterizedType: LinkedHashSet<> to ClassInstanceCreation at 0", "INS SimpleName: moduleProviders to FieldAccess at 1", "INS SimpleName: getBootstrapModules to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 4", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: LinkedHashSet to SimpleType: LinkedHashSet at 0", "INS SimpleName: config to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: config to SingleVariableDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: modules to ClassInstanceCreation at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: bootstrapModules to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: getProfiles to MethodInvocation at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS FieldAccess to Assignment: = at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleType: LinkedHashSet to ParameterizedType: LinkedHashSet<> at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getStage to MethodInvocation at 1", "INS SimpleName: stage to FieldAccess at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: config to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: Module to SimpleType: Module at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: GovernatorConfiguration to SingleVariableDeclaration at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS VariableDeclarationStatement to Block at 2", "INS SimpleName: getLogger to MethodInvocation at 1", "INS SimpleType: DefaultModule to ClassInstanceCreation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: HashSet to SimpleType: HashSet at 0", "INS TryStatement to Block at 7", "INS SimpleName: LoggerFactory to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: manager to ClassInstanceCreation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: stage to MethodInvocation at 2", "INS SimpleType: Governator to TypeLiteral at 0", "INS SimpleName: toInstance to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: createInjector to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: LifecycleManager to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ReturnStatement to Block at 0", "INS Block to TryStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: Guice to MethodInvocation at 0", "INS SimpleName: manager to MethodInvocation at 2", "INS SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0", "INS SimpleName: modules to MethodInvocation at 4", "INS Block to EnhancedForStatement at 2", "INS Block to MethodDeclaration at 4", "INS SimpleName: DefaultModule to SimpleType: DefaultModule at 0", "INS SimpleType: PropertySource to MethodDeclaration at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: bind to MethodInvocation at 0", "INS SimpleName: LifecycleInjector to SimpleType: LifecycleInjector at 0", "INS SimpleName: getPropertySource to MethodDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: notifyStarted to MethodInvocation at 1", "INS BooleanLiteral: true to MethodInvocation at 5", "INS SimpleName: loader to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: LifecycleInjector to SimpleType: LifecycleInjector at 0", "INS SimpleType: LifecycleManager to VariableDeclarationStatement at 1", "INS SimpleName: loader to MethodInvocation at 0", "INS EnhancedForStatement to Block at 3", "INS SimpleName: requestInjection to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS TypeLiteral to MethodInvocation at 1", "INS StringLiteral: \"Using profiles : \" to InfixExpression: + at 0", "INS SimpleName: DefaultPropertySource to SimpleType: DefaultPropertySource at 0", "INS VariableDeclarationStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS SimpleType: AbstractModule to ClassInstanceCreation at 0", "INS SimpleName: LOG to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Module to ParameterizedType: Set<Module> at 1", "INS SimpleName: injector to ClassInstanceCreation at 1", "INS SimpleName: manager to MethodInvocation at 2", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: loadedModules to VariableDeclarationFragment at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ThrowStatement to Block at 1", "INS SimpleName: manager to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: AbstractModule to SimpleType: AbstractModule at 0", "INS SimpleName: Injector to SimpleType: Injector at 0", "INS SimpleName: LifecycleModule to SimpleType: LifecycleModule at 0", "INS Block to TryStatement at 0", "INS SimpleName: manager to MethodInvocation at 0", "INS SimpleName: create to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: Provides to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 5", "INS Block to MethodDeclaration at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleType: Injector to VariableDeclarationStatement at 0", "INS SimpleName: bootstrapModules to MethodInvocation at 4", "INS SimpleName: injector to VariableDeclarationFragment at 0", "INS SimpleName: injector to Assignment: = at 0", "INS TryStatement to Block at 6", "INS SimpleType: LifecycleModule to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 1", "INS SimpleType: HashSet to ParameterizedType: HashSet<> at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS SimpleType: DefaultPropertySource to ClassInstanceCreation at 0", "INS SimpleName: ModuleListProvider to SimpleType: ModuleListProvider at 0", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS ParameterizedType: HashSet<> to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: loadedModules to MethodInvocation at 3", "INS SimpleType: Logger to VariableDeclarationStatement at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: notifyShutdown to MethodInvocation at 1", "INS SimpleName: moduleProviders to EnhancedForStatement at 1", "INS SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0", "INS BooleanLiteral: false to MethodInvocation at 5", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleName: create to MethodInvocation at 0", "INS Block to MethodDeclaration at 3", "INS ParameterizedType: Set<Module> to VariableDeclarationStatement at 1", "INS SimpleName: manager to MethodInvocation at 0", "INS SimpleType: LifecycleInjector to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: loadedModules to MethodInvocation at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS SimpleName: profiles to InfixExpression: + at 1", "INS ExpressionStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: ModuleListProvider to SingleVariableDeclaration at 0", "INS SimpleName: create to MethodDeclaration at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to ThrowStatement at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: manager to MethodInvocation at 1", "INS SimpleName: manager to VariableDeclarationFragment at 0", "INS SimpleType: Set to ParameterizedType: Set<Module> at 0", "INS SimpleName: configure to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 5", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: PropertySource to SimpleType: PropertySource at 0", "INS SimpleName: Governator to SimpleType: Governator at 0", "INS SimpleName: loadedModules to MethodInvocation at 0", "INS SimpleType: LifecycleInjector to ClassInstanceCreation at 0", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: LifecycleManager to TypeLiteral at 0", "INS ClassInstanceCreation to MethodInvocation at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: pos to MethodInvocation at 3", "INS SimpleName: formatConditional to MethodDeclaration at 2", "INS PrefixExpression: - to InfixExpression: != at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: pos to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: str to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: pos to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: str to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: str to MethodInvocation at 0", "INS SimpleName: a to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS IfStatement to Block at 2", "INS SimpleName: a to SingleVariableDeclaration at 1", "INS SimpleName: pos to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"(\" to MethodInvocation at 2", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: pos to InfixExpression: != at 0", "INS SimpleName: substring to MethodInvocation at 1", "INS SimpleName: lastIndexOf to MethodInvocation at 1", "INS SimpleName: str to ReturnStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: pos to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS PrefixExpression: - to InfixExpression: != at 1", "INS IfStatement to Block at 1", "INS SimpleType: String to MethodDeclaration at 1", "INS ReturnStatement to Block at 3", "INS InfixExpression: != to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \".\" to MethodInvocation at 2", "INS SimpleName: indexOf to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Annotation to SingleVariableDeclaration at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: str to MethodInvocation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS ReturnStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: annot to SingleVariableDeclaration at 1", "INS Block to TryStatement at 0", "INS SimpleType: Logger to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: formatConditional to MethodInvocation at 0", "INS ParameterizedType: Class<? extends Condition> to SingleVariableDeclaration at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: injector to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: check to MethodInvocation at 0", "INS SimpleName: Conditional to SimpleType: Conditional at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: annot to MethodInvocation at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS Block to CatchClause at 1", "INS SimpleType: Condition to VariableDeclarationStatement at 0", "INS SimpleName: c to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TryStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getDeclaredMethod to MethodInvocation at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleType: Annotation to SingleVariableDeclaration at 0", "INS SimpleName: NoSuchMethodException to SimpleType: NoSuchMethodException at 0", "INS SimpleName: annotationType to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 2", "INS SimpleType: Class to ParameterizedType: Class<? extends Condition> at 0", "INS SimpleType: Exception to MethodDeclaration at 6", "INS SimpleName: annot to MethodInvocation at 1", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: condition to InfixExpression: + at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: annot to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: formatConditional to MethodInvocation at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: Conditional to SimpleType: Conditional at 0", "INS SimpleName: annot to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: LOG to SingleVariableDeclaration at 1", "INS SimpleName: injector to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: module to SingleVariableDeclaration at 1", "INS StringLiteral: \"Evaluating module {}\" to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: formatConditional to MethodInvocation at 0", "INS SimpleType: Method to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Condition to SimpleType: Condition at 0", "INS StringLiteral: \"  - {}\" to MethodInvocation at 2", "INS SimpleName: condition to MethodInvocation at 2", "INS SimpleName: Injector to SimpleType: Injector at 0", "INS SimpleName: info to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: info to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: getDeclaredMethod to MethodInvocation at 1", "INS SimpleName: annotationType to MethodInvocation at 1", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleType: Injector to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to CastExpression at 0", "INS SimpleName: condition to SingleVariableDeclaration at 1", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS SimpleName: invoke to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: check to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS TryStatement to Block at 1", "INS SimpleName: check to VariableDeclarationFragment at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to CatchClause at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: Condition to SimpleType: Condition at 0", "INS TypeLiteral to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS StringLiteral: \"  - {}\" to MethodInvocation at 2", "INS SimpleType: Method to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS SimpleType: Module to SingleVariableDeclaration at 0", "INS StringLiteral: \"'\" to InfixExpression: + at 4", "INS SimpleName: formatConditional to MethodInvocation at 0", "INS SimpleType: Conditional to VariableDeclarationStatement at 0", "INS SimpleType: NoSuchMethodException to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS ReturnStatement to Block at 1", "INS StringLiteral: \"Failed to check condition '\" to InfixExpression: + at 0", "INS SimpleType: Exception to ClassInstanceCreation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to CastExpression at 0", "INS SimpleType: Condition to WildcardType: ? extends Condition at 0", "INS SimpleName: check to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ReturnStatement to Block at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: condition to MethodInvocation at 0", "INS SimpleName: getAnnotations to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS StringLiteral: \"check\" to MethodInvocation at 2", "INS SimpleName: conditional to MethodInvocation at 0", "INS SimpleName: conditional to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS SimpleName: evaluateConditions to MethodDeclaration at 2", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: condition to MethodInvocation at 0", "INS CastExpression to PrefixExpression: ! at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: conditional to InfixExpression: != at 0", "INS StringLiteral: \"  + {}\" to MethodInvocation at 2", "INS SimpleName: annot to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to MethodInvocation at 0", "INS WildcardType: ? extends Condition to ParameterizedType: Class<? extends Condition> at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS StringLiteral: \"check\" to MethodInvocation at 2", "INS EnhancedForStatement to Block at 0", "INS StringLiteral: \"  - {}\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: c to MethodInvocation at 2", "INS CastExpression to PrefixExpression: ! at 0", "INS SimpleType: Conditional to TypeLiteral at 0", "INS SimpleName: annot to MethodInvocation at 1", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to CastExpression at 1", "INS StringLiteral: \"' on module '\" to InfixExpression: + at 2", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS EnhancedForStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ThrowStatement to Block at 1", "INS SimpleName: getInstance to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: value to MethodInvocation at 1", "INS SimpleName: annot to MethodInvocation at 1", "INS IfStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: > to DoStatement at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: pos to Assignment: = at 0", "INS Block to IfStatement at 1", "INS SimpleType: Boolean to TypeLiteral at 0", "INS InfixExpression: - to MethodInvocation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: lastIndexOf to MethodInvocation at 1", "INS SimpleName: propertySource to SingleVariableDeclaration at 1", "INS MethodInvocation to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS Block to MethodDeclaration at 5", "INS SimpleName: pos to InfixExpression: - at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: get to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: propertySource to MethodInvocation at 0", "INS Block to DoStatement at 0", "INS SimpleName: name to MethodInvocation at 0", "INS SimpleName: pos to InfixExpression: > at 0", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: + at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS StringLiteral: \"governator.module.disabled.\" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS SimpleName: isEnabled to MethodDeclaration at 2", "INS SimpleName: pos to MethodInvocation at 3", "INS SimpleName: PropertySource to SimpleType: PropertySource at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: substring to MethodInvocation at 1", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS StringLiteral: \".\" to MethodInvocation at 2", "INS ReturnStatement to Block at 2", "INS SimpleType: PropertySource to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: pos to VariableDeclarationFragment at 0", "INS SimpleName: name to MethodInvocation at 0", "INS BooleanLiteral: false to MethodInvocation at 4", "INS SimpleName: name to MethodInvocation at 0", "INS DoStatement to Block at 1", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS CatchClause to TryStatement at 1", "INS SimpleName: evaluateConditions to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleName: Provides to MarkerAnnotation at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS ParameterizedType: List<Module> to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: Set to ParameterizedType: Set<Key<?>> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 3", "INS Modifier: protected to MethodDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS ParameterizedType: List<Module> to VariableDeclarationStatement at 1", "INS SimpleName: combine to MethodInvocation at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: PropertySource to TypeLiteral at 0", "INS ParameterizedType: List<Module> to VariableDeclarationStatement at 1", "INS SimpleName: module to MethodInvocation at 2", "INS SimpleName: className to SingleVariableDeclaration at 1", "INS IfStatement to Block at 1", "INS SimpleName: moduleProviders to EnhancedForStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS SimpleName: elements to VariableDeclarationFragment at 0", "INS SimpleType: PropertySource to VariableDeclarationStatement at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Module> at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: moreModules to VariableDeclarationFragment at 0", "INS SimpleName: Guice to MethodInvocation at 0", "INS SimpleType: DefaultModule to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: LOG to SingleVariableDeclaration at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: ModuleProvider to ParameterizedType: Binding<ModuleProvider> at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: configure to MethodDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: isBootstrap to InfixExpression: == at 0", "INS SimpleName: install to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: key to SingleVariableDeclaration at 1", "INS SimpleName: ModuleProvider to SimpleType: ModuleProvider at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: getAllInjectionKeys to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 1", "INS SimpleName: isEnabled to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: OverrideModule to SimpleType: OverrideModule at 0", "INS SimpleName: overrideModules to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS ParameterizedType: Binding<ModuleProvider> to SingleVariableDeclaration at 0", "INS SimpleName: loadedModules to EnhancedForStatement at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: combine to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: moduleNames to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: propertySource to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS SimpleType: OverrideModule to VariableDeclarationStatement at 0", "INS SimpleType: Key to ParameterizedType: Key<?> at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: with to MethodInvocation at 1", "INS SimpleName: getContext to MethodDeclaration at 3", "INS TryStatement to Block at 1", "INS SimpleName: Module to SimpleType: Module at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: rootModules to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"    Adding override module {}\" to MethodInvocation at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<Element> at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: AbstractModule to SimpleType: AbstractModule at 0", "INS QualifiedName: Stage.DEVELOPMENT to MethodInvocation at 2", "INS SimpleType: Module to VariableDeclarationStatement at 0", "INS ParameterizedType: List<Element> to VariableDeclarationStatement at 1", "INS Block to IfStatement at 2", "INS SimpleName: moreModules to MethodInvocation at 2", "INS SimpleName: contains to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: hasProfile to MethodDeclaration at 3", "INS SimpleName: elements to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS Block to CatchClause at 1", "INS SimpleName: module to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: List to SimpleType: List at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: bs to VariableDeclarationFragment at 0", "INS SimpleName: extModules to MethodInvocation at 2", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleName: install to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: Injector to SimpleType: Injector at 0", "INS SimpleName: moduleNames to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: AutoContext to ClassInstanceCreation at 0", "INS SimpleName: ModuleProvider to SimpleType: ModuleProvider at 0", "INS SimpleName: moduleNames to VariableDeclarationFragment at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: PropertySource to SimpleType: PropertySource at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: module to VariableDeclarationFragment at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS ParameterizedType: List<Module> to SingleVariableDeclaration at 1", "INS SimpleName: moduleProviders to VariableDeclarationFragment at 0", "INS WildcardType: ? to ParameterizedType: Key<?> at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: combine to MethodInvocation at 1", "INS SimpleType: List to ParameterizedType: List<Binding<ModuleProvider>> at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS ParenthesizedExpression to InfixExpression: == at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: binding to MethodInvocation at 0", "INS SimpleType: Binding to ParameterizedType: Binding<ModuleProvider> at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: bootstrapModule to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: Modules to MethodInvocation at 0", "INS SimpleName: Bootstrap to SimpleType: Bootstrap at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleType: Binding to ParameterizedType: Binding<ModuleProvider> at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: create to MethodDeclaration at 2", "INS SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleName: manager to SingleVariableDeclaration at 2", "INS MethodInvocation to InfixExpression: && at 1", "INS ParameterizedType: Set<Key<?>> to VariableDeclarationStatement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: AutoContext to SimpleType: AutoContext at 0", "INS SimpleName: injector to MethodInvocation at 2", "INS WildcardType: ? to ParameterizedType: Key<?> at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS SimpleName: extModules to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: overrideModules to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: != at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleType: Logger to SingleVariableDeclaration at 1", "INS SimpleName: Module to SimpleType: Module at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 1", "INS SimpleType: Injector to VariableDeclarationStatement at 1", "INS SimpleName: override to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: Modules to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: module to MethodInvocation at 0", "INS StringLiteral: \"Adding exposed bootstrap module {}\" to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: stage to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleType: AbstractModule to ClassInstanceCreation at 0", "INS SimpleName: profile to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: propertySource to VariableDeclarationFragment at 0", "INS ThrowStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: moreModules to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: value to MethodInvocation at 1", "INS SimpleName: override to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: overrideModules to MethodInvocation at 0", "INS SimpleType: LifecycleModule to ClassInstanceCreation at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleType: ModuleProvider to TypeLiteral at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Bootstrap to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS SimpleName: AutoContext to SimpleType: AutoContext at 0", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: hasBinding to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: ElementsEx to MethodInvocation at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleName: injector to MethodInvocation at 0", "INS Block to MethodDeclaration at 9", "INS SimpleName: getElements to MethodInvocation at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleName: with to MethodInvocation at 1", "INS ReturnStatement to Block at 11", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: injector to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: elements to MethodInvocation at 2", "INS SimpleType: LifecycleManager to SingleVariableDeclaration at 1", "INS StringLiteral: \"    Adding conditional module {}\" to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: override to InfixExpression: != at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: findBindingsByType to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: Key to SimpleType: Key at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Binding to SimpleType: Binding at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS PrefixExpression: ! to IfStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: AbstractModule to SimpleType: AbstractModule at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 10", "INS VariableDeclarationStatement to Block at 5", "INS VariableDeclarationStatement to Block at 8", "INS SimpleName: override to MethodInvocation at 1", "INS SimpleName: keys to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleName: getAllSourceModules to MethodInvocation at 1", "INS SimpleName: bs to InfixExpression: != at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: OverrideModule to SimpleType: OverrideModule at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Module to ParameterizedType: List<Module> at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: injector to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: createInjector to MethodInvocation at 1", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS SimpleName: className to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: toInstance to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 9", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS EnhancedForStatement to Block at 7", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: LifecycleManager to TypeLiteral at 0", "INS Block to IfStatement at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: hasModule to MethodDeclaration at 3", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleName: override to VariableDeclarationFragment at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: AbstractModule to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isBootstrap to SingleVariableDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: rootModules to MethodInvocation at 3", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleType: Module to SingleVariableDeclaration at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ParameterizedType: Key<?> to ParameterizedType: Set<Key<?>> at 1", "INS SimpleName: ModuleProvider to SimpleType: ModuleProvider at 0", "INS SimpleType: AutoContext to MethodDeclaration at 2", "INS MethodInvocation to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Elements to MethodInvocation at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS SimpleType: Module to ParameterizedType: Collection<Module> at 1", "INS SimpleName: extModules to VariableDeclarationFragment at 0", "INS SimpleName: Element to SimpleType: Element at 0", "INS SimpleName: requestInjection to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: profiles to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: with to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: contains to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleType: OverrideModule to TypeLiteral at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleName: TypeLiteral to MethodInvocation at 0", "INS SimpleType: Bootstrap to TypeLiteral at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: module to MethodInvocation at 0", "INS SimpleName: Modules to MethodInvocation at 0", "INS SimpleName: getProvider to MethodInvocation at 1", "INS SimpleName: Modules to MethodInvocation at 0", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleType: Key to ParameterizedType: Key<?> at 0", "INS SimpleName: info to MethodInvocation at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: PropertySource to SimpleType: PropertySource at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleType: Module to SingleVariableDeclaration at 0", "INS SimpleType: ModuleProvider to ParameterizedType: Binding<ModuleProvider> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: override to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: manager to MethodInvocation at 2", "INS SimpleName: keys to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: Module to SimpleType: Module at 0", "INS ContinueStatement to Block at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to IfStatement at 0", "INS ParameterizedType: Key<?> to SingleVariableDeclaration at 0", "INS SimpleName: add to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Element to ParameterizedType: List<Element> at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: module to SingleVariableDeclaration at 1", "INS SimpleName: bootstrapModule to SingleVariableDeclaration at 2", "INS SimpleName: Key to SimpleType: Key at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: key to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: configure to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: bind to MethodInvocation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Module to MethodDeclaration at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS Block to IfStatement at 1", "INS SimpleName: Modules to MethodInvocation at 0", "INS ParameterizedType: Collection<Module> to SingleVariableDeclaration at 1", "INS ParameterizedType: Binding<ModuleProvider> to ParameterizedType: List<Binding<ModuleProvider>> at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: module to MethodInvocation at 2", "INS SimpleName: DefaultModule to SimpleType: DefaultModule at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: manager to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: binding to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 2", "INS StringLiteral: \"Ignoring module {}\" to MethodInvocation at 2", "INS SimpleName: module to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: loadedModules to SingleVariableDeclaration at 2", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: List<String> to VariableDeclarationStatement at 1", "INS SimpleName: Bootstrap to SimpleType: Bootstrap at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Binding to SimpleType: Binding at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS InfixExpression: != to ParenthesizedExpression at 0", "INS SimpleName: rootModules to SingleVariableDeclaration at 2", "INS SimpleName: ElementsEx to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: Modules to MethodInvocation at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Block to EnhancedForStatement at 2", "INS ClassInstanceCreation to MethodInvocation at 4", "INS SimpleName: module to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: LifecycleModule to SimpleType: LifecycleModule at 0", "INS SimpleName: module to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: getInstance to MethodInvocation at 1", "INS ParameterizedType: List<Binding<ModuleProvider>> to VariableDeclarationStatement at 0", "INS SimpleName: profile to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS TryStatement to Block at 3", "operations": ["INS TryStatement to Block at 3", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS Block to CatchClause at 1", "INS ThrowStatement to Block at 1", "INS SimpleName: e to ThrowStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS CatchClause to TryStatement at 1"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0", "MOV CatchClause to TryStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: manager to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS SimpleName: e to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: notifyStartFailed to MethodInvocation at 1"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS SimpleName: println to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"Failed to notify LifecycleManager\" to MethodInvocation at 2", "INS Block to CatchClause at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: e2 to SingleVariableDeclaration at 1", "INS QualifiedName: System.err to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: printStackTrace to MethodInvocation at 1"]}]}}, {"Governator_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(1420) at 1", "Insert ImportDeclaration(5) into CompilationUnit(1420) at 2", "Insert ImportDeclaration(15) into CompilationUnit(1420) at 7", "Insert ImportDeclaration(17) into CompilationUnit(1420) at 8", "Insert ImportDeclaration(21) into CompilationUnit(1420) at 10", "Insert ImportDeclaration(23) into CompilationUnit(1420) at 11", "Insert ImportDeclaration(25) into CompilationUnit(1420) at 12", "Insert ImportDeclaration(29) into CompilationUnit(1420) at 14", "Insert ImportDeclaration(35) into CompilationUnit(1420) at 17", "Insert ImportDeclaration(39) into CompilationUnit(1420) at 19", "Insert ImportDeclaration(43) into CompilationUnit(1420) at 21", "Insert ImportDeclaration(45) into CompilationUnit(1420) at 22", "Insert ImportDeclaration(47) into CompilationUnit(1420) at 23", "Insert ImportDeclaration(49) into CompilationUnit(1420) at 24", "Insert ImportDeclaration(51) into CompilationUnit(1420) at 25", "Insert ImportDeclaration(53) into CompilationUnit(1420) at 26", "Insert ImportDeclaration(55) into CompilationUnit(1420) at 27", "Insert ImportDeclaration(57) into CompilationUnit(1420) at 28", "Insert ImportDeclaration(59) into CompilationUnit(1420) at 29", "Insert ImportDeclaration(61) into CompilationUnit(1420) at 30", "Insert ImportDeclaration(63) into CompilationUnit(1420) at 31", "Insert ImportDeclaration(65) into CompilationUnit(1420) at 32", "Insert ImportDeclaration(67) into CompilationUnit(1420) at 33", "Insert QualifiedName: java.lang.annotation.Annotation(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: java.lang.reflect.Method(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.util.HashSet(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.LinkedHashSet(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: java.util.Set(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.slf4j.Logger(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: com.google.inject.Binding(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: com.google.inject.Key(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: com.google.inject.Provides(38) into ImportDeclaration(39) at 0", "Insert QualifiedName: com.google.inject.TypeLiteral(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: com.google.inject.spi.Element(44) into ImportDeclaration(45) at 0", "Insert QualifiedName: com.google.inject.spi.Elements(46) into ImportDeclaration(47) at 0", "Insert QualifiedName: com.google.inject.util.Modules(48) into ImportDeclaration(49) at 0", "Insert QualifiedName: com.netflix.governator.auto.AutoContext(50) into ImportDeclaration(51) at 0", "Insert QualifiedName: com.netflix.governator.auto.Condition(52) into ImportDeclaration(53) at 0", "Insert QualifiedName: com.netflix.governator.auto.DefaultPropertySource(54) into ImportDeclaration(55) at 0", "Insert QualifiedName: com.netflix.governator.auto.ModuleListProvider(56) into ImportDeclaration(57) at 0", "Insert QualifiedName: com.netflix.governator.auto.ModuleProvider(58) into ImportDeclaration(59) at 0", "Insert QualifiedName: com.netflix.governator.auto.PropertySource(60) into ImportDeclaration(61) at 0", "Insert QualifiedName: com.netflix.governator.auto.annotations.Bootstrap(62) into ImportDeclaration(63) at 0", "Insert QualifiedName: com.netflix.governator.auto.annotations.Conditional(64) into ImportDeclaration(65) at 0", "Insert QualifiedName: com.netflix.governator.auto.annotations.OverrideModule(66) into ImportDeclaration(67) at 0", "Insert MethodDeclaration(329) into TypeDeclaration: class(1419) at 8", "Insert MethodDeclaration(355) into TypeDeclaration: class(1419) at 9", "Insert FieldDeclaration(362) into TypeDeclaration: class(1419) at 10", "Insert FieldDeclaration(372) into TypeDeclaration: class(1419) at 11", "Insert FieldDeclaration(382) into TypeDeclaration: class(1419) at 12", "Insert FieldDeclaration(392) into TypeDeclaration: class(1419) at 13", "Insert FieldDeclaration(402) into TypeDeclaration: class(1419) at 14", "Insert MethodDeclaration(478) into TypeDeclaration: class(1419) at 15", "Insert MethodDeclaration(653) into TypeDeclaration: class(1419) at 16", "Insert MethodDeclaration(708) into TypeDeclaration: class(1419) at 17", "Insert MethodDeclaration(894) into TypeDeclaration: class(1419) at 18", "Insert MethodDeclaration(949) into TypeDeclaration: class(1419) at 19", "Insert MethodDeclaration(1418) into TypeDeclaration: class(1419) at 20", "Insert Modifier: public(304) into MethodDeclaration(329) at 0", "Insert Modifier: static(305) into MethodDeclaration(329) at 1", "Insert SimpleType: LifecycleInjector(307) into MethodDeclaration(329) at 2", "Insert SimpleName: createInjector(308) into MethodDeclaration(329) at 3", "Insert SingleVariableDeclaration(312) into MethodDeclaration(329) at 4", "Insert SingleVariableDeclaration(316) into MethodDeclaration(329) at 5", "Insert Block(328) into MethodDeclaration(329) at 6", "Insert Modifier: public(330) into MethodDeclaration(355) at 0", "Insert Modifier: static(331) into MethodDeclaration(355) at 1", "Insert SimpleType: LifecycleInjector(333) into MethodDeclaration(355) at 2", "Insert SimpleName: createInjector(334) into MethodDeclaration(355) at 3", "Insert SingleVariableDeclaration(338) into MethodDeclaration(355) at 4", "Insert SingleVariableDeclaration(345) into MethodDeclaration(355) at 5", "Insert Block(354) into MethodDeclaration(355) at 6", "Insert Modifier: private(356) into FieldDeclaration(362) at 0", "Insert Modifier: final(357) into FieldDeclaration(362) at 1", "Insert SimpleType: Stage(359) into FieldDeclaration(362) at 2", "Insert VariableDeclarationFragment(361) into FieldDeclaration(362) at 3", "Insert Modifier: private(363) into FieldDeclaration(372) at 0", "Insert Modifier: final(364) into FieldDeclaration(372) at 1", "Insert ParameterizedType: List<Module>(369) into FieldDeclaration(372) at 2", "Insert VariableDeclarationFragment(371) into FieldDeclaration(372) at 3", "Insert Modifier: private(373) into FieldDeclaration(382) at 0", "Insert Modifier: final(374) into FieldDeclaration(382) at 1", "Insert ParameterizedType: List<Module>(379) into FieldDeclaration(382) at 2", "Insert VariableDeclarationFragment(381) into FieldDeclaration(382) at 3", "Insert Modifier: private(383) into FieldDeclaration(392) at 0", "Insert Modifier: final(384) into FieldDeclaration(392) at 1", "Insert ParameterizedType: Set<String>(389) into FieldDeclaration(392) at 2", "Insert VariableDeclarationFragment(391) into FieldDeclaration(392) at 3", "Insert Modifier: private(393) into FieldDeclaration(402) at 0", "Insert Modifier: final(394) into FieldDeclaration(402) at 1", "Insert ParameterizedType: List<ModuleListProvider>(399) into FieldDeclaration(402) at 2", "Insert VariableDeclarationFragment(401) into FieldDeclaration(402) at 3", "Insert Modifier: private(403) into MethodDeclaration(478) at 0", "Insert SimpleName: Governator(404) into MethodDeclaration(478) at 1", "Insert SingleVariableDeclaration(408) into MethodDeclaration(478) at 2", "Insert SingleVariableDeclaration(415) into MethodDeclaration(478) at 3", "Insert Block(477) into MethodDeclaration(478) at 4", "Insert Modifier: private(479) into MethodDeclaration(653) at 0", "Insert SimpleType: LifecycleInjector(481) into MethodDeclaration(653) at 1", "Insert SimpleName: create(482) into MethodDeclaration(653) at 2", "Insert Block(652) into MethodDeclaration(653) at 3", "Insert Modifier: private(654) into MethodDeclaration(708) at 0", "Insert SimpleType: String(656) into MethodDeclaration(708) at 1", "Insert SimpleName: formatConditional(657) into MethodDeclaration(708) at 2", "Insert SingleVariableDeclaration(661) into MethodDeclaration(708) at 3", "Insert Block(707) into MethodDeclaration(708) at 4", "Insert Modifier: private(709) into MethodDeclaration(894) at 0", "Insert PrimitiveType: boolean(710) into MethodDeclaration(894) at 1", "Insert SimpleName: evaluateConditions(711) into MethodDeclaration(894) at 2", "Insert SingleVariableDeclaration(715) into MethodDeclaration(894) at 3", "Insert SingleVariableDeclaration(719) into MethodDeclaration(894) at 4", "Insert SingleVariableDeclaration(723) into MethodDeclaration(894) at 5", "Insert SimpleType: Exception(725) into MethodDeclaration(894) at 6", "Insert Block(893) into MethodDeclaration(894) at 7", "Insert Modifier: private(895) into MethodDeclaration(949) at 0", "Insert PrimitiveType: boolean(896) into MethodDeclaration(949) at 1", "Insert SimpleName: isEnabled(897) into MethodDeclaration(949) at 2", "Insert SingleVariableDeclaration(901) into MethodDeclaration(949) at 3", "Insert SingleVariableDeclaration(905) into MethodDeclaration(949) at 4", "Insert Block(948) into MethodDeclaration(949) at 5", "Insert Modifier: private(950) into MethodDeclaration(1418) at 0", "Insert SimpleType: Module(952) into MethodDeclaration(1418) at 1", "Insert SimpleName: create(953) into MethodDeclaration(1418) at 2", "Insert SingleVariableDeclaration(958) into MethodDeclaration(1418) at 3", "Insert SingleVariableDeclaration(963) into MethodDeclaration(1418) at 4", "Insert SingleVariableDeclaration(971) into MethodDeclaration(1418) at 5", "Insert SingleVariableDeclaration(979) into MethodDeclaration(1418) at 6", "Insert SingleVariableDeclaration(983) into MethodDeclaration(1418) at 7", "Insert SingleVariableDeclaration(988) into MethodDeclaration(1418) at 8", "Insert Block(1417) into MethodDeclaration(1418) at 9", "Insert TryStatement(277) into Block(302) at 3", "Insert SimpleName: LifecycleInjector(306) into SimpleType: LifecycleInjector(307) at 0", "Insert SimpleType: GovernatorConfiguration(310) into SingleVariableDeclaration(312) at 0", "Insert SimpleName: config(311) into SingleVariableDeclaration(312) at 1", "Insert SimpleType: Module(314) into SingleVariableDeclaration(316) at 0", "Insert SimpleName: modules(315) into SingleVariableDeclaration(316) at 1", "Insert ReturnStatement(327) into Block(328) at 0", "Insert SimpleName: LifecycleInjector(332) into SimpleType: LifecycleInjector(333) at 0", "Insert SimpleType: GovernatorConfiguration(336) into SingleVariableDeclaration(338) at 0", "Insert SimpleName: config(337) into SingleVariableDeclaration(338) at 1", "Insert ParameterizedType: List<Module>(343) into SingleVariableDeclaration(345) at 0", "Insert SimpleName: modules(344) into SingleVariableDeclaration(345) at 1", "Insert ReturnStatement(353) into Block(354) at 0", "Insert SimpleName: Stage(358) into SimpleType: Stage(359) at 0", "Insert SimpleName: stage(360) into VariableDeclarationFragment(361) at 0", "Insert SimpleType: List(366) into ParameterizedType: List<Module>(369) at 0", "Insert SimpleType: Module(368) into ParameterizedType: List<Module>(369) at 1", "Insert SimpleName: bootstrapModules(370) into VariableDeclarationFragment(371) at 0", "Insert SimpleType: List(376) into ParameterizedType: List<Module>(379) at 0", "Insert SimpleType: Module(378) into ParameterizedType: List<Module>(379) at 1", "Insert SimpleName: modules(380) into VariableDeclarationFragment(381) at 0", "Insert SimpleType: Set(386) into ParameterizedType: Set<String>(389) at 0", "Insert SimpleType: String(388) into ParameterizedType: Set<String>(389) at 1", "Insert SimpleName: profiles(390) into VariableDeclarationFragment(391) at 0", "Insert SimpleType: List(396) into ParameterizedType: List<ModuleListProvider>(399) at 0", "Insert SimpleType: ModuleListProvider(398) into ParameterizedType: List<ModuleListProvider>(399) at 1", "Insert SimpleName: moduleProviders(400) into VariableDeclarationFragment(401) at 0", "Insert SimpleType: GovernatorConfiguration(406) into SingleVariableDeclaration(408) at 0", "Insert SimpleName: config(407) into SingleVariableDeclaration(408) at 1", "Insert ParameterizedType: List<Module>(413) into SingleVariableDeclaration(415) at 0", "Insert SimpleName: modules(414) into SingleVariableDeclaration(415) at 1", "Insert ExpressionStatement(423) into Block(477) at 0", "Insert ExpressionStatement(435) into Block(477) at 1", "Insert ExpressionStatement(445) into Block(477) at 2", "Insert ExpressionStatement(457) into Block(477) at 3", "Insert ExpressionStatement(469) into Block(477) at 4", "Insert ExpressionStatement(476) into Block(477) at 5", "Insert SimpleName: LifecycleInjector(480) into SimpleType: LifecycleInjector(481) at 0", "Insert VariableDeclarationStatement(493) into Block(652) at 0", "Insert ExpressionStatement(500) into Block(652) at 1", "Insert VariableDeclarationStatement(513) into Block(652) at 2", "Insert EnhancedForStatement(527) into Block(652) at 3", "Insert VariableDeclarationStatement(536) into Block(652) at 4", "Insert VariableDeclarationStatement(541) into Block(652) at 5", "Insert TryStatement(627) into Block(652) at 6", "Insert TryStatement(651) into Block(652) at 7", "Insert SimpleName: String(655) into SimpleType: String(656) at 0", "Insert SimpleType: Annotation(659) into SingleVariableDeclaration(661) at 0", "Insert SimpleName: a(660) into SingleVariableDeclaration(661) at 1", "Insert VariableDeclarationStatement(669) into Block(707) at 0", "Insert VariableDeclarationStatement(677) into Block(707) at 1", "Insert IfStatement(704) into Block(707) at 2", "Insert ReturnStatement(706) into Block(707) at 3", "Insert SimpleType: Logger(713) into SingleVariableDeclaration(715) at 0", "Insert SimpleName: LOG(714) into SingleVariableDeclaration(715) at 1", "Insert SimpleType: Injector(717) into SingleVariableDeclaration(719) at 0", "Insert SimpleName: injector(718) into SingleVariableDeclaration(719) at 1", "Insert SimpleType: Module(721) into SingleVariableDeclaration(723) at 0", "Insert SimpleName: module(722) into SingleVariableDeclaration(723) at 1", "Insert SimpleName: Exception(724) into SimpleType: Exception(725) at 0", "Insert ExpressionStatement(735) into Block(893) at 0", "Insert EnhancedForStatement(890) into Block(893) at 1", "Insert ReturnStatement(892) into Block(893) at 2", "Insert SimpleType: PropertySource(899) into SingleVariableDeclaration(901) at 0", "Insert SimpleName: propertySource(900) into SingleVariableDeclaration(901) at 1", "Insert SimpleType: String(903) into SingleVariableDeclaration(905) at 0", "Insert SimpleName: name(904) into SingleVariableDeclaration(905) at 1", "Insert VariableDeclarationStatement(912) into Block(948) at 0", "Insert DoStatement(945) into Block(948) at 1", "Insert ReturnStatement(947) into Block(948) at 2", "Insert SimpleName: Module(951) into SimpleType: Module(952) at 0", "Insert Modifier: final(954) into SingleVariableDeclaration(958) at 0", "Insert SimpleType: Logger(956) into SingleVariableDeclaration(958) at 1", "Insert SimpleName: LOG(957) into SingleVariableDeclaration(958) at 2", "Insert Modifier: final(959) into SingleVariableDeclaration(963) at 0", "Insert SimpleType: LifecycleManager(961) into SingleVariableDeclaration(963) at 1", "Insert SimpleName: manager(962) into SingleVariableDeclaration(963) at 2", "Insert Modifier: final(964) into SingleVariableDeclaration(971) at 0", "Insert ParameterizedType: Collection<Module>(969) into SingleVariableDeclaration(971) at 1", "Insert SimpleName: loadedModules(970) into SingleVariableDeclaration(971) at 2", "Insert Modifier: final(972) into SingleVariableDeclaration(979) at 0", "Insert ParameterizedType: List<Module>(977) into SingleVariableDeclaration(979) at 1", "Insert SimpleName: rootModules(978) into SingleVariableDeclaration(979) at 2", "Insert Modifier: final(980) into SingleVariableDeclaration(983) at 0", "Insert PrimitiveType: boolean(981) into SingleVariableDeclaration(983) at 1", "Insert SimpleName: isBootstrap(982) into SingleVariableDeclaration(983) at 2", "Insert Modifier: final(984) into SingleVariableDeclaration(988) at 0", "Insert SimpleType: Module(986) into SingleVariableDeclaration(988) at 1", "Insert SimpleName: bootstrapModule(987) into SingleVariableDeclaration(988) at 2", "Insert VariableDeclarationStatement(1002) into Block(1417) at 0", "Insert VariableDeclarationStatement(1017) into Block(1417) at 1", "Insert VariableDeclarationStatement(1030) into Block(1417) at 2", "Insert VariableDeclarationStatement(1140) into Block(1417) at 3", "Insert VariableDeclarationStatement(1151) into Block(1417) at 4", "Insert VariableDeclarationStatement(1164) into Block(1417) at 5", "Insert VariableDeclarationStatement(1177) into Block(1417) at 6", "Insert EnhancedForStatement(1305) into Block(1417) at 7", "Insert VariableDeclarationStatement(1318) into Block(1417) at 8", "Insert VariableDeclarationStatement(1338) into Block(1417) at 9", "Insert EnhancedForStatement(1375) into Block(1417) at 10", "Insert ReturnStatement(1416) into Block(1417) at 11", "Move Block(200) into TryStatement(277) at 0", "Insert CatchClause(276) into TryStatement(277) at 1", "Insert SimpleName: GovernatorConfiguration(309) into SimpleType: GovernatorConfiguration(310) at 0", "Insert SimpleName: Module(313) into SimpleType: Module(314) at 0", "Insert MethodInvocation(326) into ReturnStatement(327) at 0", "Insert SimpleName: GovernatorConfiguration(335) into SimpleType: GovernatorConfiguration(336) at 0", "Insert SimpleType: List(340) into ParameterizedType: List<Module>(343) at 0", "Insert SimpleType: Module(342) into ParameterizedType: List<Module>(343) at 1", "Insert MethodInvocation(352) into ReturnStatement(353) at 0", "Insert SimpleName: List(365) into SimpleType: List(366) at 0", "Insert SimpleName: Module(367) into SimpleType: Module(368) at 0", "Insert SimpleName: List(375) into SimpleType: List(376) at 0", "Insert SimpleName: Module(377) into SimpleType: Module(378) at 0", "Insert SimpleName: Set(385) into SimpleType: Set(386) at 0", "Insert SimpleName: String(387) into SimpleType: String(388) at 0", "Insert SimpleName: List(395) into SimpleType: List(396) at 0", "Insert SimpleName: ModuleListProvider(397) into SimpleType: ModuleListProvider(398) at 0", "Insert SimpleName: GovernatorConfiguration(405) into SimpleType: GovernatorConfiguration(406) at 0", "Insert SimpleType: List(410) into ParameterizedType: List<Module>(413) at 0", "Insert SimpleType: Module(412) into ParameterizedType: List<Module>(413) at 1", "Insert Assignment: =(422) into ExpressionStatement(423) at 0", "Insert Assignment: =(434) into ExpressionStatement(435) at 0", "Insert Assignment: =(444) into ExpressionStatement(445) at 0", "Insert Assignment: =(456) into ExpressionStatement(457) at 0", "Insert Assignment: =(468) into ExpressionStatement(469) at 0", "Insert MethodInvocation(475) into ExpressionStatement(476) at 0", "Insert SimpleType: Logger(484) into VariableDeclarationStatement(493) at 0", "Insert VariableDeclarationFragment(492) into VariableDeclarationStatement(493) at 1", "Insert MethodInvocation(499) into ExpressionStatement(500) at 0", "Insert Modifier: final(501) into VariableDeclarationStatement(513) at 0", "Insert ParameterizedType: Set<Module>(506) into VariableDeclarationStatement(513) at 1", "Insert VariableDeclarationFragment(512) into VariableDeclarationStatement(513) at 2", "Insert SingleVariableDeclaration(517) into EnhancedForStatement(527) at 0", "Insert SimpleName: moduleProviders(518) into EnhancedForStatement(527) at 1", "Insert Block(526) into EnhancedForStatement(527) at 2", "Insert Modifier: final(528) into VariableDeclarationStatement(536) at 0", "Insert SimpleType: LifecycleManager(530) into VariableDeclarationStatement(536) at 1", "Insert VariableDeclarationFragment(535) into VariableDeclarationStatement(536) at 2", "Insert SimpleType: Injector(538) into VariableDeclarationStatement(541) at 0", "Insert VariableDeclarationFragment(540) into VariableDeclarationStatement(541) at 1", "Insert Block(605) into TryStatement(627) at 0", "Move CatchClause(221) into TryStatement(627) at 1", "Insert Block(638) into TryStatement(651) at 0", "Insert CatchClause(650) into TryStatement(651) at 1", "Insert SimpleName: Annotation(658) into SimpleType: Annotation(659) at 0", "Insert SimpleType: String(663) into VariableDeclarationStatement(669) at 0", "Insert VariableDeclarationFragment(668) into VariableDeclarationStatement(669) at 1", "Insert PrimitiveType: int(670) into VariableDeclarationStatement(677) at 0", "Insert VariableDeclarationFragment(676) into VariableDeclarationStatement(677) at 1", "Insert InfixExpression: !=(681) into IfStatement(704) at 0", "Insert Block(703) into IfStatement(704) at 1", "Insert SimpleName: str(705) into ReturnStatement(706) at 0", "Insert SimpleName: Logger(712) into SimpleType: Logger(713) at 0", "Insert SimpleName: Injector(716) into SimpleType: Injector(717) at 0", "Insert SimpleName: Module(720) into SimpleType: Module(721) at 0", "Insert MethodInvocation(734) into ExpressionStatement(735) at 0", "Insert SingleVariableDeclaration(739) into EnhancedForStatement(890) at 0", "Insert MethodInvocation(744) into EnhancedForStatement(890) at 1", "Insert Block(889) into EnhancedForStatement(890) at 2", "Insert BooleanLiteral: true(891) into ReturnStatement(892) at 0", "Insert SimpleName: PropertySource(898) into SimpleType: PropertySource(899) at 0", "Insert SimpleName: String(902) into SimpleType: String(903) at 0", "Insert PrimitiveType: int(906) into VariableDeclarationStatement(912) at 0", "Insert VariableDeclarationFragment(911) into VariableDeclarationStatement(912) at 1", "Insert Block(941) into DoStatement(945) at 0", "Insert InfixExpression: >(944) into DoStatement(945) at 1", "Insert BooleanLiteral: true(946) into ReturnStatement(947) at 0", "Insert SimpleName: Logger(955) into SimpleType: Logger(956) at 0", "Insert SimpleName: LifecycleManager(960) into SimpleType: LifecycleManager(961) at 0", "Insert SimpleType: Collection(966) into ParameterizedType: Collection<Module>(969) at 0", "Insert SimpleType: Module(968) into ParameterizedType: Collection<Module>(969) at 1", "Insert SimpleType: List(974) into ParameterizedType: List<Module>(977) at 0", "Insert SimpleType: Module(976) into ParameterizedType: List<Module>(977) at 1", "Insert SimpleName: Module(985) into SimpleType: Module(986) at 0", "Insert Modifier: final(989) into VariableDeclarationStatement(1002) at 0", "Insert ParameterizedType: List<Element>(994) into VariableDeclarationStatement(1002) at 1", "Insert VariableDeclarationFragment(1001) into VariableDeclarationStatement(1002) at 2", "Insert Modifier: final(1003) into VariableDeclarationStatement(1017) at 0", "Insert ParameterizedType: Set<Key<?>>(1010) into VariableDeclarationStatement(1017) at 1", "Insert VariableDeclarationFragment(1016) into VariableDeclarationStatement(1017) at 2", "Insert Modifier: final(1018) into VariableDeclarationStatement(1030) at 0", "Insert ParameterizedType: List<String>(1023) into VariableDeclarationStatement(1030) at 1", "Insert VariableDeclarationFragment(1029) into VariableDeclarationStatement(1030) at 2", "Insert Modifier: final(1031) into VariableDeclarationStatement(1140) at 0", "Insert SimpleType: Injector(1033) into VariableDeclarationStatement(1140) at 1", "Insert VariableDeclarationFragment(1139) into VariableDeclarationStatement(1140) at 2", "Insert SimpleType: PropertySource(1142) into VariableDeclarationStatement(1151) at 0", "Insert VariableDeclarationFragment(1150) into VariableDeclarationStatement(1151) at 1", "Insert Modifier: final(1152) into VariableDeclarationStatement(1164) at 0", "Insert ParameterizedType: List<Module>(1157) into VariableDeclarationStatement(1164) at 1", "Insert VariableDeclarationFragment(1163) into VariableDeclarationStatement(1164) at 2", "Insert Modifier: final(1165) into VariableDeclarationStatement(1177) at 0", "Insert ParameterizedType: List<Module>(1170) into VariableDeclarationStatement(1177) at 1", "Insert VariableDeclarationFragment(1176) into VariableDeclarationStatement(1177) at 2", "Insert SingleVariableDeclaration(1181) into EnhancedForStatement(1305) at 0", "Insert SimpleName: loadedModules(1182) into EnhancedForStatement(1305) at 1", "Insert Block(1304) into EnhancedForStatement(1305) at 2", "Insert Modifier: final(1306) into VariableDeclarationStatement(1318) at 0", "Insert ParameterizedType: List<Module>(1311) into VariableDeclarationStatement(1318) at 1", "Insert VariableDeclarationFragment(1317) into VariableDeclarationStatement(1318) at 2", "Insert ParameterizedType: List<Binding<ModuleProvider>>(1326) into VariableDeclarationStatement(1338) at 0", "Insert VariableDeclarationFragment(1337) into VariableDeclarationStatement(1338) at 1", "Insert SingleVariableDeclaration(1345) into EnhancedForStatement(1375) at 0", "Insert SimpleName: moduleProviders(1346) into EnhancedForStatement(1375) at 1", "Insert Block(1374) into EnhancedForStatement(1375) at 2", "Insert MethodInvocation(1415) into ReturnStatement(1416) at 0", "Insert SingleVariableDeclaration(250) into CatchClause(276) at 0", "Insert Block(275) into CatchClause(276) at 1", "Insert ClassInstanceCreation(324) into MethodInvocation(326) at 0", "Insert SimpleName: create(325) into MethodInvocation(326) at 1", "Insert SimpleName: List(339) into SimpleType: List(340) at 0", "Insert SimpleName: Module(341) into SimpleType: Module(342) at 0", "Insert ClassInstanceCreation(350) into MethodInvocation(352) at 0", "Insert SimpleName: create(351) into MethodInvocation(352) at 1", "Insert SimpleName: List(409) into SimpleType: List(410) at 0", "Insert SimpleName: Module(411) into SimpleType: Module(412) at 0", "Insert FieldAccess(418) into Assignment: =(422) at 0", "Insert MethodInvocation(421) into Assignment: =(422) at 1", "Insert FieldAccess(426) into Assignment: =(434) at 0", "Insert ClassInstanceCreation(433) into Assignment: =(434) at 1", "Insert FieldAccess(438) into Assignment: =(444) at 0", "Insert ClassInstanceCreation(443) into Assignment: =(444) at 1", "Insert FieldAccess(448) into Assignment: =(456) at 0", "Insert ClassInstanceCreation(455) into Assignment: =(456) at 1", "Insert FieldAccess(460) into Assignment: =(468) at 0", "Insert ClassInstanceCreation(467) into Assignment: =(468) at 1", "Insert FieldAccess(472) into MethodInvocation(475) at 0", "Insert SimpleName: addAll(473) into MethodInvocation(475) at 1", "Insert SimpleName: modules(474) into MethodInvocation(475) at 2", "Insert SimpleName: Logger(483) into SimpleType: Logger(484) at 0", "Insert SimpleName: LOG(485) into VariableDeclarationFragment(492) at 0", "Insert MethodInvocation(491) into VariableDeclarationFragment(492) at 1", "Insert SimpleName: LOG(494) into MethodInvocation(499) at 0", "Insert SimpleName: info(495) into MethodInvocation(499) at 1", "Insert InfixExpression: +(498) into MethodInvocation(499) at 2", "Insert SimpleType: Set(503) into ParameterizedType: Set<Module>(506) at 0", "Insert SimpleType: Module(505) into ParameterizedType: Set<Module>(506) at 1", "Insert SimpleName: loadedModules(507) into VariableDeclarationFragment(512) at 0", "Insert ClassInstanceCreation(511) into VariableDeclarationFragment(512) at 1", "Insert SimpleType: ModuleListProvider(515) into SingleVariableDeclaration(517) at 0", "Insert SimpleName: loader(516) into SingleVariableDeclaration(517) at 1", "Insert ExpressionStatement(525) into Block(526) at 0", "Insert SimpleName: LifecycleManager(529) into SimpleType: LifecycleManager(530) at 0", "Insert SimpleName: manager(531) into VariableDeclarationFragment(535) at 0", "Insert ClassInstanceCreation(534) into VariableDeclarationFragment(535) at 1", "Insert SimpleName: Injector(537) into SimpleType: Injector(538) at 0", "Insert SimpleName: injector(539) into VariableDeclarationFragment(540) at 0", "Insert ExpressionStatement(604) into Block(605) at 0", "Insert ExpressionStatement(631) into Block(638) at 0", "Insert ReturnStatement(637) into Block(638) at 1", "Insert SingleVariableDeclaration(642) into CatchClause(650) at 0", "Insert Block(649) into CatchClause(650) at 1", "Insert SimpleName: String(662) into SimpleType: String(663) at 0", "Insert SimpleName: str(664) into VariableDeclarationFragment(668) at 0", "Insert MethodInvocation(667) into VariableDeclarationFragment(668) at 1", "Insert SimpleName: pos(671) into VariableDeclarationFragment(676) at 0", "Insert MethodInvocation(675) into VariableDeclarationFragment(676) at 1", "Insert SimpleName: pos(678) into InfixExpression: !=(681) at 0", "Insert PrefixExpression: -(680) into InfixExpression: !=(681) at 1", "Insert ExpressionStatement(689) into Block(703) at 0", "Insert IfStatement(702) into Block(703) at 1", "Insert SimpleName: LOG(726) into MethodInvocation(734) at 0", "Insert SimpleName: info(727) into MethodInvocation(734) at 1", "Insert StringLiteral: \"Evaluating module {}\"(728) into MethodInvocation(734) at 2", "Insert MethodInvocation(733) into MethodInvocation(734) at 3", "Insert SimpleType: Annotation(737) into SingleVariableDeclaration(739) at 0", "Insert SimpleName: annot(738) into SingleVariableDeclaration(739) at 1", "Insert MethodInvocation(742) into MethodInvocation(744) at 0", "Insert SimpleName: getAnnotations(743) into MethodInvocation(744) at 1", "Insert VariableDeclarationStatement(757) into Block(889) at 0", "Insert IfStatement(888) into Block(889) at 1", "Insert SimpleName: pos(907) into VariableDeclarationFragment(911) at 0", "Insert MethodInvocation(910) into VariableDeclarationFragment(911) at 1", "Insert IfStatement(930) into Block(941) at 0", "Insert ExpressionStatement(940) into Block(941) at 1", "Insert SimpleName: pos(942) into InfixExpression: >(944) at 0", "Insert NumberLiteral: 0(943) into InfixExpression: >(944) at 1", "Insert SimpleName: Collection(965) into SimpleType: Collection(966) at 0", "Insert SimpleName: Module(967) into SimpleType: Module(968) at 0", "Insert SimpleName: List(973) into SimpleType: List(974) at 0", "Insert SimpleName: Module(975) into SimpleType: Module(976) at 0", "Insert SimpleType: List(991) into ParameterizedType: List<Element>(994) at 0", "Insert SimpleType: Element(993) into ParameterizedType: List<Element>(994) at 1", "Insert SimpleName: elements(995) into VariableDeclarationFragment(1001) at 0", "Insert MethodInvocation(1000) into VariableDeclarationFragment(1001) at 1", "Insert SimpleType: Set(1005) into ParameterizedType: Set<Key<?>>(1010) at 0", "Insert ParameterizedType: Key<?>(1009) into ParameterizedType: Set<Key<?>>(1010) at 1", "Insert SimpleName: keys(1011) into VariableDeclarationFragment(1016) at 0", "Insert MethodInvocation(1015) into VariableDeclarationFragment(1016) at 1", "Insert SimpleType: List(1020) into ParameterizedType: List<String>(1023) at 0", "Insert SimpleType: String(1022) into ParameterizedType: List<String>(1023) at 1", "Insert SimpleName: moduleNames(1024) into VariableDeclarationFragment(1029) at 0", "Insert MethodInvocation(1028) into VariableDeclarationFragment(1029) at 1", "Insert SimpleName: Injector(1032) into SimpleType: Injector(1033) at 0", "Insert SimpleName: injector(1034) into VariableDeclarationFragment(1139) at 0", "Insert MethodInvocation(1138) into VariableDeclarationFragment(1139) at 1", "Insert SimpleName: PropertySource(1141) into SimpleType: PropertySource(1142) at 0", "Insert SimpleName: propertySource(1143) into VariableDeclarationFragment(1150) at 0", "Insert MethodInvocation(1149) into VariableDeclarationFragment(1150) at 1", "Insert SimpleType: List(1154) into ParameterizedType: List<Module>(1157) at 0", "Insert SimpleType: Module(1156) into ParameterizedType: List<Module>(1157) at 1", "Insert SimpleName: overrideModules(1158) into VariableDeclarationFragment(1163) at 0", "Insert ClassInstanceCreation(1162) into VariableDeclarationFragment(1163) at 1", "Insert SimpleType: List(1167) into ParameterizedType: List<Module>(1170) at 0", "Insert SimpleType: Module(1169) into ParameterizedType: List<Module>(1170) at 1", "Insert SimpleName: moreModules(1171) into VariableDeclarationFragment(1176) at 0", "Insert ClassInstanceCreation(1175) into VariableDeclarationFragment(1176) at 1", "Insert SimpleType: Module(1179) into SingleVariableDeclaration(1181) at 0", "Insert SimpleName: module(1180) into SingleVariableDeclaration(1181) at 1", "Insert IfStatement(1204) into Block(1304) at 0", "Insert TryStatement(1303) into Block(1304) at 1", "Insert SimpleType: List(1308) into ParameterizedType: List<Module>(1311) at 0", "Insert SimpleType: Module(1310) into ParameterizedType: List<Module>(1311) at 1", "Insert SimpleName: extModules(1312) into VariableDeclarationFragment(1317) at 0", "Insert ClassInstanceCreation(1316) into VariableDeclarationFragment(1317) at 1", "Insert SimpleType: List(1320) into ParameterizedType: List<Binding<ModuleProvider>>(1326) at 0", "Insert ParameterizedType: Binding<ModuleProvider>(1325) into ParameterizedType: List<Binding<ModuleProvider>>(1326) at 1", "Insert SimpleName: moduleProviders(1327) into VariableDeclarationFragment(1337) at 0", "Insert MethodInvocation(1336) into VariableDeclarationFragment(1337) at 1", "Insert ParameterizedType: Binding<ModuleProvider>(1343) into SingleVariableDeclaration(1345) at 0", "Insert SimpleName: binding(1344) into SingleVariableDeclaration(1345) at 1", "Insert VariableDeclarationStatement(1358) into Block(1374) at 0", "Insert ExpressionStatement(1368) into Block(1374) at 1", "Insert ExpressionStatement(1373) into Block(1374) at 2", "Insert MethodInvocation(1403) into MethodInvocation(1415) at 0", "Insert SimpleName: with(1404) into MethodInvocation(1415) at 1", "Insert MethodInvocation(1414) into MethodInvocation(1415) at 2", "Insert SimpleType: Exception(248) into SingleVariableDeclaration(250) at 0", "Insert SimpleName: e(249) into SingleVariableDeclaration(250) at 1", "Move TryStatement(222) into Block(275) at 0", "Insert ThrowStatement(274) into Block(275) at 1", "Insert SimpleType: Governator(318) into ClassInstanceCreation(324) at 0", "Insert SimpleName: config(319) into ClassInstanceCreation(324) at 1", "Insert MethodInvocation(323) into ClassInstanceCreation(324) at 2", "Insert SimpleType: Governator(347) into ClassInstanceCreation(350) at 0", "Insert SimpleName: config(348) into ClassInstanceCreation(350) at 1", "Insert SimpleName: modules(349) into ClassInstanceCreation(350) at 2", "Insert ThisExpression(416) into FieldAccess(418) at 0", "Insert SimpleName: stage(417) into FieldAccess(418) at 1", "Insert SimpleName: config(419) into MethodInvocation(421) at 0", "Insert SimpleName: getStage(420) into MethodInvocation(421) at 1", "Insert ThisExpression(424) into FieldAccess(426) at 0", "Insert SimpleName: bootstrapModules(425) into FieldAccess(426) at 1", "Insert ParameterizedType: ArrayList<>(429) into ClassInstanceCreation(433) at 0", "Insert MethodInvocation(432) into ClassInstanceCreation(433) at 1", "Insert ThisExpression(436) into FieldAccess(438) at 0", "Insert SimpleName: modules(437) into FieldAccess(438) at 1", "Insert ParameterizedType: ArrayList<>(441) into ClassInstanceCreation(443) at 0", "Insert SimpleName: modules(442) into ClassInstanceCreation(443) at 1", "Insert ThisExpression(446) into FieldAccess(448) at 0", "Insert SimpleName: profiles(447) into FieldAccess(448) at 1", "Insert ParameterizedType: LinkedHashSet<>(451) into ClassInstanceCreation(455) at 0", "Insert MethodInvocation(454) into ClassInstanceCreation(455) at 1", "Insert ThisExpression(458) into FieldAccess(460) at 0", "Insert SimpleName: moduleProviders(459) into FieldAccess(460) at 1", "Insert ParameterizedType: ArrayList<>(463) into ClassInstanceCreation(467) at 0", "Insert MethodInvocation(466) into ClassInstanceCreation(467) at 1", "Insert ThisExpression(470) into FieldAccess(472) at 0", "Insert SimpleName: modules(471) into FieldAccess(472) at 1", "Insert SimpleName: LoggerFactory(486) into MethodInvocation(491) at 0", "Insert SimpleName: getLogger(487) into MethodInvocation(491) at 1", "Insert TypeLiteral(490) into MethodInvocation(491) at 2", "Insert StringLiteral: \"Using profiles : \"(496) into InfixExpression: +(498) at 0", "Insert SimpleName: profiles(497) into InfixExpression: +(498) at 1", "Insert SimpleName: Set(502) into SimpleType: Set(503) at 0", "Insert SimpleName: Module(504) into SimpleType: Module(505) at 0", "Insert ParameterizedType: HashSet<>(510) into ClassInstanceCreation(511) at 0", "Insert SimpleName: ModuleListProvider(514) into SimpleType: ModuleListProvider(515) at 0", "Insert MethodInvocation(524) into ExpressionStatement(525) at 0", "Insert SimpleType: LifecycleManager(533) into ClassInstanceCreation(534) at 0", "Insert Assignment: =(603) into ExpressionStatement(604) at 0", "Insert MethodInvocation(630) into ExpressionStatement(631) at 0", "Insert ClassInstanceCreation(636) into ReturnStatement(637) at 0", "Insert SimpleType: Exception(640) into SingleVariableDeclaration(642) at 0", "Insert SimpleName: e(641) into SingleVariableDeclaration(642) at 1", "Insert ExpressionStatement(646) into Block(649) at 0", "Insert ThrowStatement(648) into Block(649) at 1", "Insert SimpleName: a(665) into MethodInvocation(667) at 0", "Insert SimpleName: toString(666) into MethodInvocation(667) at 1", "Insert SimpleName: str(672) into MethodInvocation(675) at 0", "Insert SimpleName: indexOf(673) into MethodInvocation(675) at 1", "Insert StringLiteral: \"(\"(674) into MethodInvocation(675) at 2", "Insert NumberLiteral: 1(679) into PrefixExpression: -(680) at 0", "Insert Assignment: =(688) into ExpressionStatement(689) at 0", "Insert InfixExpression: !=(693) into IfStatement(702) at 0", "Insert Block(701) into IfStatement(702) at 1", "Insert MethodInvocation(731) into MethodInvocation(733) at 0", "Insert SimpleName: getName(732) into MethodInvocation(733) at 1", "Insert SimpleName: Annotation(736) into SimpleType: Annotation(737) at 0", "Insert SimpleName: module(740) into MethodInvocation(742) at 0", "Insert SimpleName: getClass(741) into MethodInvocation(742) at 1", "Insert SimpleType: Conditional(746) into VariableDeclarationStatement(757) at 0", "Insert VariableDeclarationFragment(756) into VariableDeclarationStatement(757) at 1", "Insert InfixExpression: !=(760) into IfStatement(888) at 0", "Insert Block(887) into IfStatement(888) at 1", "Insert SimpleName: name(908) into MethodInvocation(910) at 0", "Insert SimpleName: length(909) into MethodInvocation(910) at 1", "Insert MethodInvocation(926) into IfStatement(930) at 0", "Insert Block(929) into IfStatement(930) at 1", "Insert Assignment: =(939) into ExpressionStatement(940) at 0", "Insert SimpleName: List(990) into SimpleType: List(991) at 0", "Insert SimpleName: Element(992) into SimpleType: Element(993) at 0", "Insert SimpleName: Elements(996) into MethodInvocation(1000) at 0", "Insert SimpleName: getElements(997) into MethodInvocation(1000) at 1", "Insert QualifiedName: Stage.DEVELOPMENT(998) into MethodInvocation(1000) at 2", "Insert SimpleName: rootModules(999) into MethodInvocation(1000) at 3", "Insert SimpleName: Set(1004) into SimpleType: Set(1005) at 0", "Insert SimpleType: Key(1007) into ParameterizedType: Key<?>(1009) at 0", "Insert WildcardType: ?(1008) into ParameterizedType: Key<?>(1009) at 1", "Insert SimpleName: ElementsEx(1012) into MethodInvocation(1015) at 0", "Insert SimpleName: getAllInjectionKeys(1013) into MethodInvocation(1015) at 1", "Insert SimpleName: elements(1014) into MethodInvocation(1015) at 2", "Insert SimpleName: List(1019) into SimpleType: List(1020) at 0", "Insert SimpleName: String(1021) into SimpleType: String(1022) at 0", "Insert SimpleName: ElementsEx(1025) into MethodInvocation(1028) at 0", "Insert SimpleName: getAllSourceModules(1026) into MethodInvocation(1028) at 1", "Insert SimpleName: elements(1027) into MethodInvocation(1028) at 2", "Insert SimpleName: Guice(1035) into MethodInvocation(1138) at 0", "Insert SimpleName: createInjector(1036) into MethodInvocation(1138) at 1", "Insert SimpleName: stage(1037) into MethodInvocation(1138) at 2", "Insert ClassInstanceCreation(1040) into MethodInvocation(1138) at 3", "Insert ClassInstanceCreation(1064) into MethodInvocation(1138) at 4", "Insert MethodInvocation(1137) into MethodInvocation(1138) at 5", "Insert SimpleName: injector(1144) into MethodInvocation(1149) at 0", "Insert SimpleName: getInstance(1145) into MethodInvocation(1149) at 1", "Insert TypeLiteral(1148) into MethodInvocation(1149) at 2", "Insert SimpleName: List(1153) into SimpleType: List(1154) at 0", "Insert SimpleName: Module(1155) into SimpleType: Module(1156) at 0", "Insert ParameterizedType: ArrayList<>(1161) into ClassInstanceCreation(1162) at 0", "Insert SimpleName: List(1166) into SimpleType: List(1167) at 0", "Insert SimpleName: Module(1168) into SimpleType: Module(1169) at 0", "Insert ParameterizedType: ArrayList<>(1174) into ClassInstanceCreation(1175) at 0", "Insert SimpleName: Module(1178) into SimpleType: Module(1179) at 0", "Insert PrefixExpression: !(1191) into IfStatement(1204) at 0", "Insert Block(1203) into IfStatement(1204) at 1", "Insert Block(1291) into TryStatement(1303) at 0", "Insert CatchClause(1302) into TryStatement(1303) at 1", "Insert SimpleName: List(1307) into SimpleType: List(1308) at 0", "Insert SimpleName: Module(1309) into SimpleType: Module(1310) at 0", "Insert ParameterizedType: ArrayList<>(1315) into ClassInstanceCreation(1316) at 0", "Insert SimpleName: List(1319) into SimpleType: List(1320) at 0", "Insert SimpleType: Binding(1322) into ParameterizedType: Binding<ModuleProvider>(1325) at 0", "Insert SimpleType: ModuleProvider(1324) into ParameterizedType: Binding<ModuleProvider>(1325) at 1", "Insert SimpleName: injector(1328) into MethodInvocation(1336) at 0", "Insert SimpleName: findBindingsByType(1329) into MethodInvocation(1336) at 1", "Insert MethodInvocation(1335) into MethodInvocation(1336) at 2", "Insert SimpleType: Binding(1340) into ParameterizedType: Binding<ModuleProvider>(1343) at 0", "Insert SimpleType: ModuleProvider(1342) into ParameterizedType: Binding<ModuleProvider>(1343) at 1", "Insert SimpleType: Module(1348) into VariableDeclarationStatement(1358) at 0", "Insert VariableDeclarationFragment(1357) into VariableDeclarationStatement(1358) at 1", "Insert MethodInvocation(1367) into ExpressionStatement(1368) at 0", "Insert MethodInvocation(1372) into ExpressionStatement(1373) at 0", "Insert SimpleName: Modules(1376) into MethodInvocation(1403) at 0", "Insert SimpleName: override(1377) into MethodInvocation(1403) at 1", "Insert ClassInstanceCreation(1402) into MethodInvocation(1403) at 2", "Insert MethodInvocation(1408) into MethodInvocation(1414) at 0", "Insert SimpleName: with(1409) into MethodInvocation(1414) at 1", "Insert MethodInvocation(1413) into MethodInvocation(1414) at 2", "Insert SimpleName: Exception(247) into SimpleType: Exception(248) at 0", "Insert Block(256) into TryStatement(272) at 0", "Insert CatchClause(271) into TryStatement(272) at 1", "Insert SimpleName: e(273) into ThrowStatement(274) at 0", "Insert SimpleName: Governator(317) into SimpleType: Governator(318) at 0", "Insert SimpleName: Arrays(320) into MethodInvocation(323) at 0", "Insert SimpleName: asList(321) into MethodInvocation(323) at 1", "Insert SimpleName: modules(322) into MethodInvocation(323) at 2", "Insert SimpleName: Governator(346) into SimpleType: Governator(347) at 0", "Insert SimpleType: ArrayList(428) into ParameterizedType: ArrayList<>(429) at 0", "Insert SimpleName: config(430) into MethodInvocation(432) at 0", "Insert SimpleName: getBootstrapModules(431) into MethodInvocation(432) at 1", "Insert SimpleType: ArrayList(440) into ParameterizedType: ArrayList<>(441) at 0", "Insert SimpleType: LinkedHashSet(450) into ParameterizedType: LinkedHashSet<>(451) at 0", "Insert SimpleName: config(452) into MethodInvocation(454) at 0", "Insert SimpleName: getProfiles(453) into MethodInvocation(454) at 1", "Insert SimpleType: ArrayList(462) into ParameterizedType: ArrayList<>(463) at 0", "Insert SimpleName: config(464) into MethodInvocation(466) at 0", "Insert SimpleName: getModuleListProviders(465) into MethodInvocation(466) at 1", "Insert SimpleType: Governator(489) into TypeLiteral(490) at 0", "Insert SimpleType: HashSet(509) into ParameterizedType: HashSet<>(510) at 0", "Insert SimpleName: loadedModules(519) into MethodInvocation(524) at 0", "Insert SimpleName: addAll(520) into MethodInvocation(524) at 1", "Insert MethodInvocation(523) into MethodInvocation(524) at 2", "Insert SimpleName: LifecycleManager(532) into SimpleType: LifecycleManager(533) at 0", "Insert SimpleName: injector(542) into Assignment: =(603) at 0", "Insert MethodInvocation(602) into Assignment: =(603) at 1", "Insert SimpleName: manager(628) into MethodInvocation(630) at 0", "Insert SimpleName: notifyStarted(629) into MethodInvocation(630) at 1", "Insert SimpleType: LifecycleInjector(633) into ClassInstanceCreation(636) at 0", "Insert SimpleName: injector(634) into ClassInstanceCreation(636) at 1", "Insert SimpleName: manager(635) into ClassInstanceCreation(636) at 2", "Insert SimpleName: Exception(639) into SimpleType: Exception(640) at 0", "Insert MethodInvocation(645) into ExpressionStatement(646) at 0", "Insert SimpleName: e(647) into ThrowStatement(648) at 0", "Insert SimpleName: pos(682) into Assignment: =(688) at 0", "Insert MethodInvocation(687) into Assignment: =(688) at 1", "Insert SimpleName: pos(690) into InfixExpression: !=(693) at 0", "Insert PrefixExpression: -(692) into InfixExpression: !=(693) at 1", "Insert ReturnStatement(700) into Block(701) at 0", "Insert SimpleName: module(729) into MethodInvocation(731) at 0", "Insert SimpleName: getClass(730) into MethodInvocation(731) at 1", "Insert SimpleName: Conditional(745) into SimpleType: Conditional(746) at 0", "Insert SimpleName: conditional(747) into VariableDeclarationFragment(756) at 0", "Insert MethodInvocation(755) into VariableDeclarationFragment(756) at 1", "Insert SimpleName: conditional(758) into InfixExpression: !=(760) at 0", "Insert NullLiteral(759) into InfixExpression: !=(760) at 1", "Insert EnhancedForStatement(886) into Block(887) at 0", "Insert SimpleName: propertySource(913) into MethodInvocation(926) at 0", "Insert SimpleName: get(914) into MethodInvocation(926) at 1", "Insert InfixExpression: +(921) into MethodInvocation(926) at 2", "Insert TypeLiteral(924) into MethodInvocation(926) at 3", "Insert BooleanLiteral: false(925) into MethodInvocation(926) at 4", "Insert ReturnStatement(928) into Block(929) at 0", "Insert SimpleName: pos(931) into Assignment: =(939) at 0", "Insert MethodInvocation(938) into Assignment: =(939) at 1", "Insert SimpleName: Key(1006) into SimpleType: Key(1007) at 0", "Insert SimpleType: LifecycleModule(1039) into ClassInstanceCreation(1040) at 0", "Insert SimpleType: AbstractModule(1042) into ClassInstanceCreation(1064) at 0", "Insert AnonymousClassDeclaration(1063) into ClassInstanceCreation(1064) at 1", "Insert MethodInvocation(1134) into MethodInvocation(1137) at 0", "Insert SimpleName: with(1135) into MethodInvocation(1137) at 1", "Insert SimpleName: bootstrapModule(1136) into MethodInvocation(1137) at 2", "Insert SimpleType: PropertySource(1147) into TypeLiteral(1148) at 0", "Insert SimpleType: ArrayList(1160) into ParameterizedType: ArrayList<>(1161) at 0", "Insert SimpleType: ArrayList(1173) into ParameterizedType: ArrayList<>(1174) at 0", "Insert MethodInvocation(1190) into PrefixExpression: !(1191) at 0", "Insert ExpressionStatement(1201) into Block(1203) at 0", "Insert ContinueStatement(1202) into Block(1203) at 1", "Insert VariableDeclarationStatement(1217) into Block(1291) at 0", "Insert IfStatement(1290) into Block(1291) at 1", "Insert SingleVariableDeclaration(1295) into CatchClause(1302) at 0", "Insert Block(1301) into CatchClause(1302) at 1", "Insert SimpleType: ArrayList(1314) into ParameterizedType: ArrayList<>(1315) at 0", "Insert SimpleName: Binding(1321) into SimpleType: Binding(1322) at 0", "Insert SimpleName: ModuleProvider(1323) into SimpleType: ModuleProvider(1324) at 0", "Insert SimpleName: TypeLiteral(1330) into MethodInvocation(1335) at 0", "Insert SimpleName: get(1331) into MethodInvocation(1335) at 1", "Insert TypeLiteral(1334) into MethodInvocation(1335) at 2", "Insert SimpleName: Binding(1339) into SimpleType: Binding(1340) at 0", "Insert SimpleName: ModuleProvider(1341) into SimpleType: ModuleProvider(1342) at 0", "Insert SimpleName: Module(1347) into SimpleType: Module(1348) at 0", "Insert SimpleName: module(1349) into VariableDeclarationFragment(1357) at 0", "Insert MethodInvocation(1356) into VariableDeclarationFragment(1357) at 1", "Insert SimpleName: LOG(1359) into MethodInvocation(1367) at 0", "Insert SimpleName: info(1360) into MethodInvocation(1367) at 1", "Insert StringLiteral: \"Adding exposed bootstrap module {}\"(1361) into MethodInvocation(1367) at 2", "Insert MethodInvocation(1366) into MethodInvocation(1367) at 3", "Insert SimpleName: extModules(1369) into MethodInvocation(1372) at 0", "Insert SimpleName: add(1370) into MethodInvocation(1372) at 1", "Insert SimpleName: module(1371) into MethodInvocation(1372) at 2", "Insert SimpleType: AbstractModule(1379) into ClassInstanceCreation(1402) at 0", "Insert AnonymousClassDeclaration(1401) into ClassInstanceCreation(1402) at 1", "Insert SimpleName: Modules(1405) into MethodInvocation(1408) at 0", "Insert SimpleName: override(1406) into MethodInvocation(1408) at 1", "Insert SimpleName: overrideModules(1407) into MethodInvocation(1408) at 2", "Insert SimpleName: Modules(1410) into MethodInvocation(1413) at 0", "Insert SimpleName: combine(1411) into MethodInvocation(1413) at 1", "Insert SimpleName: extModules(1412) into MethodInvocation(1413) at 2", "Insert ExpressionStatement(255) into Block(256) at 0", "Insert SingleVariableDeclaration(260) into CatchClause(271) at 0", "Insert Block(270) into CatchClause(271) at 1", "Insert SimpleName: ArrayList(427) into SimpleType: ArrayList(428) at 0", "Insert SimpleName: ArrayList(439) into SimpleType: ArrayList(440) at 0", "Insert SimpleName: LinkedHashSet(449) into SimpleType: LinkedHashSet(450) at 0", "Insert SimpleName: ArrayList(461) into SimpleType: ArrayList(462) at 0", "Insert SimpleName: Governator(488) into SimpleType: Governator(489) at 0", "Insert SimpleName: HashSet(508) into SimpleType: HashSet(509) at 0", "Insert SimpleName: loader(521) into MethodInvocation(523) at 0", "Insert SimpleName: get(522) into MethodInvocation(523) at 1", "Insert SimpleName: Guice(543) into MethodInvocation(602) at 0", "Insert SimpleName: createInjector(544) into MethodInvocation(602) at 1", "Insert SimpleName: stage(545) into MethodInvocation(602) at 2", "Insert ClassInstanceCreation(548) into MethodInvocation(602) at 3", "Insert ClassInstanceCreation(572) into MethodInvocation(602) at 4", "Insert MethodInvocation(601) into MethodInvocation(602) at 5", "Insert SimpleName: LifecycleInjector(632) into SimpleType: LifecycleInjector(633) at 0", "Insert SimpleName: manager(643) into MethodInvocation(645) at 0", "Insert SimpleName: notifyShutdown(644) into MethodInvocation(645) at 1", "Insert SimpleName: str(683) into MethodInvocation(687) at 0", "Insert SimpleName: lastIndexOf(684) into MethodInvocation(687) at 1", "Insert StringLiteral: \".\"(685) into MethodInvocation(687) at 2", "Insert SimpleName: pos(686) into MethodInvocation(687) at 3", "Insert NumberLiteral: 1(691) into PrefixExpression: -(692) at 0", "Insert MethodInvocation(699) into ReturnStatement(700) at 0", "Insert MethodInvocation(750) into MethodInvocation(755) at 0", "Insert SimpleName: getAnnotation(751) into MethodInvocation(755) at 1", "Insert TypeLiteral(754) into MethodInvocation(755) at 2", "Insert SingleVariableDeclaration(768) into EnhancedForStatement(886) at 0", "Insert MethodInvocation(771) into EnhancedForStatement(886) at 1", "Insert Block(885) into EnhancedForStatement(886) at 2", "Insert StringLiteral: \"governator.module.disabled.\"(915) into InfixExpression: +(921) at 0", "Insert MethodInvocation(920) into InfixExpression: +(921) at 1", "Insert SimpleType: Boolean(923) into TypeLiteral(924) at 0", "Insert BooleanLiteral: false(927) into ReturnStatement(928) at 0", "Insert SimpleName: name(932) into MethodInvocation(938) at 0", "Insert SimpleName: lastIndexOf(933) into MethodInvocation(938) at 1", "Insert StringLiteral: \".\"(934) into MethodInvocation(938) at 2", "Insert InfixExpression: -(937) into MethodInvocation(938) at 3", "Insert SimpleName: LifecycleModule(1038) into SimpleType: LifecycleModule(1039) at 0", "Insert SimpleName: AbstractModule(1041) into SimpleType: AbstractModule(1042) at 0", "Insert MethodDeclaration(1062) into AnonymousClassDeclaration(1063) at 0", "Insert SimpleName: Modules(1065) into MethodInvocation(1134) at 0", "Insert SimpleName: override(1066) into MethodInvocation(1134) at 1", "Insert ClassInstanceCreation(1133) into MethodInvocation(1134) at 2", "Insert SimpleName: PropertySource(1146) into SimpleType: PropertySource(1147) at 0", "Insert SimpleName: ArrayList(1159) into SimpleType: ArrayList(1160) at 0", "Insert SimpleName: ArrayList(1172) into SimpleType: ArrayList(1173) at 0", "Insert SimpleName: isEnabled(1183) into MethodInvocation(1190) at 0", "Insert SimpleName: propertySource(1184) into MethodInvocation(1190) at 1", "Insert MethodInvocation(1189) into MethodInvocation(1190) at 2", "Insert MethodInvocation(1200) into ExpressionStatement(1201) at 0", "Insert SimpleType: Bootstrap(1206) into VariableDeclarationStatement(1217) at 0", "Insert VariableDeclarationFragment(1216) into VariableDeclarationStatement(1217) at 1", "Insert InfixExpression: &&(1229) into IfStatement(1290) at 0", "Insert Block(1289) into IfStatement(1290) at 1", "Insert SimpleType: Exception(1293) into SingleVariableDeclaration(1295) at 0", "Insert SimpleName: e(1294) into SingleVariableDeclaration(1295) at 1", "Insert ThrowStatement(1300) into Block(1301) at 0", "Insert SimpleName: ArrayList(1313) into SimpleType: ArrayList(1314) at 0", "Insert SimpleType: ModuleProvider(1333) into TypeLiteral(1334) at 0", "Insert MethodInvocation(1354) into MethodInvocation(1356) at 0", "Insert SimpleName: get(1355) into MethodInvocation(1356) at 1", "Insert MethodInvocation(1364) into MethodInvocation(1366) at 0", "Insert SimpleName: getName(1365) into MethodInvocation(1366) at 1", "Insert SimpleName: AbstractModule(1378) into SimpleType: AbstractModule(1379) at 0", "Insert MethodDeclaration(1400) into AnonymousClassDeclaration(1401) at 0", "Insert MethodInvocation(254) into ExpressionStatement(255) at 0", "Insert SimpleType: Exception(258) into SingleVariableDeclaration(260) at 0", "Insert SimpleName: e2(259) into SingleVariableDeclaration(260) at 1", "Insert ExpressionStatement(265) into Block(270) at 0", "Insert ExpressionStatement(269) into Block(270) at 1", "Insert SimpleType: LifecycleModule(547) into ClassInstanceCreation(548) at 0", "Insert SimpleType: AbstractModule(550) into ClassInstanceCreation(572) at 0", "Insert AnonymousClassDeclaration(571) into ClassInstanceCreation(572) at 1", "Insert SimpleName: create(573) into MethodInvocation(601) at 0", "Insert SimpleName: LOG(574) into MethodInvocation(601) at 1", "Insert SimpleName: manager(575) into MethodInvocation(601) at 2", "Insert SimpleName: loadedModules(576) into MethodInvocation(601) at 3", "Insert SimpleName: modules(577) into MethodInvocation(601) at 4", "Insert BooleanLiteral: false(578) into MethodInvocation(601) at 5", "Insert MethodInvocation(600) into MethodInvocation(601) at 6", "Insert SimpleName: str(694) into MethodInvocation(699) at 0", "Insert SimpleName: substring(695) into MethodInvocation(699) at 1", "Insert InfixExpression: +(698) into MethodInvocation(699) at 2", "Insert SimpleName: annot(748) into MethodInvocation(750) at 0", "Insert SimpleName: annotationType(749) into MethodInvocation(750) at 1", "Insert SimpleType: Conditional(753) into TypeLiteral(754) at 0", "Insert ParameterizedType: Class<? extends Condition>(766) into SingleVariableDeclaration(768) at 0", "Insert SimpleName: condition(767) into SingleVariableDeclaration(768) at 1", "Insert SimpleName: conditional(769) into MethodInvocation(771) at 0", "Insert SimpleName: value(770) into MethodInvocation(771) at 1", "Insert TryStatement(884) into Block(885) at 0", "Insert SimpleName: name(916) into MethodInvocation(920) at 0", "Insert SimpleName: substring(917) into MethodInvocation(920) at 1", "Insert NumberLiteral: 0(918) into MethodInvocation(920) at 2", "Insert SimpleName: pos(919) into MethodInvocation(920) at 3", "Insert SimpleName: Boolean(922) into SimpleType: Boolean(923) at 0", "Insert SimpleName: pos(935) into InfixExpression: -(937) at 0", "Insert NumberLiteral: 1(936) into InfixExpression: -(937) at 1", "Insert MarkerAnnotation(1044) into MethodDeclaration(1062) at 0", "Insert Modifier: protected(1045) into MethodDeclaration(1062) at 1", "Insert PrimitiveType: void(1046) into MethodDeclaration(1062) at 2", "Insert SimpleName: configure(1047) into MethodDeclaration(1062) at 3", "Insert Block(1061) into MethodDeclaration(1062) at 4", "Insert SimpleType: DefaultModule(1068) into ClassInstanceCreation(1133) at 0", "Insert AnonymousClassDeclaration(1132) into ClassInstanceCreation(1133) at 1", "Insert MethodInvocation(1187) into MethodInvocation(1189) at 0", "Insert SimpleName: getName(1188) into MethodInvocation(1189) at 1", "Insert SimpleName: LOG(1192) into MethodInvocation(1200) at 0", "Insert SimpleName: info(1193) into MethodInvocation(1200) at 1", "Insert StringLiteral: \"Ignoring module {}\"(1194) into MethodInvocation(1200) at 2", "Insert MethodInvocation(1199) into MethodInvocation(1200) at 3", "Insert SimpleName: Bootstrap(1205) into SimpleType: Bootstrap(1206) at 0", "Insert SimpleName: bs(1207) into VariableDeclarationFragment(1216) at 0", "Insert MethodInvocation(1215) into VariableDeclarationFragment(1216) at 1", "Insert InfixExpression: ==(1223) into InfixExpression: &&(1229) at 0", "Insert MethodInvocation(1228) into InfixExpression: &&(1229) at 1", "Insert VariableDeclarationStatement(1242) into Block(1289) at 0", "Insert IfStatement(1288) into Block(1289) at 1", "Insert SimpleName: Exception(1292) into SimpleType: Exception(1293) at 0", "Insert ClassInstanceCreation(1299) into ThrowStatement(1300) at 0", "Insert SimpleName: ModuleProvider(1332) into SimpleType: ModuleProvider(1333) at 0", "Insert MethodInvocation(1352) into MethodInvocation(1354) at 0", "Insert SimpleName: get(1353) into MethodInvocation(1354) at 1", "Insert SimpleName: module(1362) into MethodInvocation(1364) at 0", "Insert SimpleName: getClass(1363) into MethodInvocation(1364) at 1", "Insert MarkerAnnotation(1381) into MethodDeclaration(1400) at 0", "Insert Modifier: protected(1382) into MethodDeclaration(1400) at 1", "Insert PrimitiveType: void(1383) into MethodDeclaration(1400) at 2", "Insert SimpleName: configure(1384) into MethodDeclaration(1400) at 3", "Insert Block(1399) into MethodDeclaration(1400) at 4", "Insert SimpleName: manager(251) into MethodInvocation(254) at 0", "Insert SimpleName: notifyStartFailed(252) into MethodInvocation(254) at 1", "Insert SimpleName: e(253) into MethodInvocation(254) at 2", "Insert SimpleName: Exception(257) into SimpleType: Exception(258) at 0", "Insert MethodInvocation(264) into ExpressionStatement(265) at 0", "Insert MethodInvocation(268) into ExpressionStatement(269) at 0", "Insert SimpleName: LifecycleModule(546) into SimpleType: LifecycleModule(547) at 0", "Insert SimpleName: AbstractModule(549) into SimpleType: AbstractModule(550) at 0", "Insert MethodDeclaration(570) into AnonymousClassDeclaration(571) at 0", "Insert SimpleName: create(579) into MethodInvocation(600) at 0", "Insert SimpleName: LOG(580) into MethodInvocation(600) at 1", "Insert SimpleName: manager(581) into MethodInvocation(600) at 2", "Insert SimpleName: loadedModules(582) into MethodInvocation(600) at 3", "Insert SimpleName: bootstrapModules(583) into MethodInvocation(600) at 4", "Insert BooleanLiteral: true(584) into MethodInvocation(600) at 5", "Insert ClassInstanceCreation(599) into MethodInvocation(600) at 6", "Insert SimpleName: pos(696) into InfixExpression: +(698) at 0", "Insert NumberLiteral: 1(697) into InfixExpression: +(698) at 1", "Insert SimpleName: Conditional(752) into SimpleType: Conditional(753) at 0", "Insert SimpleType: Class(762) into ParameterizedType: Class<? extends Condition>(766) at 0", "Insert WildcardType: ? extends Condition(765) into ParameterizedType: Class<? extends Condition>(766) at 1", "Insert Block(857) into TryStatement(884) at 0", "Insert CatchClause(883) into TryStatement(884) at 1", "Insert SimpleName: Override(1043) into MarkerAnnotation(1044) at 0", "Insert ExpressionStatement(1056) into Block(1061) at 0", "Insert ExpressionStatement(1060) into Block(1061) at 1", "Insert SimpleName: DefaultModule(1067) into SimpleType: DefaultModule(1068) at 0", "Insert MethodDeclaration(1131) into AnonymousClassDeclaration(1132) at 0", "Insert SimpleName: module(1185) into MethodInvocation(1187) at 0", "Insert SimpleName: getClass(1186) into MethodInvocation(1187) at 1", "Insert MethodInvocation(1197) into MethodInvocation(1199) at 0", "Insert SimpleName: getName(1198) into MethodInvocation(1199) at 1", "Insert MethodInvocation(1210) into MethodInvocation(1215) at 0", "Insert SimpleName: getAnnotation(1211) into MethodInvocation(1215) at 1", "Insert TypeLiteral(1214) into MethodInvocation(1215) at 2", "Insert SimpleName: isBootstrap(1218) into InfixExpression: ==(1223) at 0", "Insert ParenthesizedExpression(1222) into InfixExpression: ==(1223) at 1", "Insert SimpleName: evaluateConditions(1224) into MethodInvocation(1228) at 0", "Insert SimpleName: LOG(1225) into MethodInvocation(1228) at 1", "Insert SimpleName: injector(1226) into MethodInvocation(1228) at 2", "Insert SimpleName: module(1227) into MethodInvocation(1228) at 3", "Insert SimpleType: OverrideModule(1231) into VariableDeclarationStatement(1242) at 0", "Insert VariableDeclarationFragment(1241) into VariableDeclarationStatement(1242) at 1", "Insert InfixExpression: !=(1245) into IfStatement(1288) at 0", "Insert Block(1271) into IfStatement(1288) at 1", "Insert Block(1287) into IfStatement(1288) at 2", "Insert SimpleType: RuntimeException(1297) into ClassInstanceCreation(1299) at 0", "Insert SimpleName: e(1298) into ClassInstanceCreation(1299) at 1", "Insert SimpleName: binding(1350) into MethodInvocation(1352) at 0", "Insert SimpleName: getProvider(1351) into MethodInvocation(1352) at 1", "Insert SimpleName: Override(1380) into MarkerAnnotation(1381) at 0", "Insert ExpressionStatement(1391) into Block(1399) at 0", "Insert ExpressionStatement(1398) into Block(1399) at 1", "Insert QualifiedName: System.err(261) into MethodInvocation(264) at 0", "Insert SimpleName: println(262) into MethodInvocation(264) at 1", "Insert StringLiteral: \"Failed to notify LifecycleManager\"(263) into MethodInvocation(264) at 2", "Insert SimpleName: e(266) into MethodInvocation(268) at 0", "Insert SimpleName: printStackTrace(267) into MethodInvocation(268) at 1", "Insert MarkerAnnotation(552) into MethodDeclaration(570) at 0", "Insert Modifier: protected(553) into MethodDeclaration(570) at 1", "Insert PrimitiveType: void(554) into MethodDeclaration(570) at 2", "Insert SimpleName: configure(555) into MethodDeclaration(570) at 3", "Insert Block(569) into MethodDeclaration(570) at 4", "Insert SimpleType: DefaultModule(586) into ClassInstanceCreation(599) at 0", "Insert AnonymousClassDeclaration(598) into ClassInstanceCreation(599) at 1", "Insert SimpleName: Class(761) into SimpleType: Class(762) at 0", "Insert SimpleType: Condition(764) into WildcardType: ? extends Condition(765) at 0", "Insert VariableDeclarationStatement(780) into Block(857) at 0", "Insert TryStatement(848) into Block(857) at 1", "Insert ExpressionStatement(856) into Block(857) at 2", "Insert SingleVariableDeclaration(861) into CatchClause(883) at 0", "Insert Block(882) into CatchClause(883) at 1", "Insert MethodInvocation(1055) into ExpressionStatement(1056) at 0", "Insert MethodInvocation(1059) into ExpressionStatement(1060) at 0", "Insert MarkerAnnotation(1070) into MethodDeclaration(1131) at 0", "Insert Modifier: public(1071) into MethodDeclaration(1131) at 1", "Insert SimpleType: AutoContext(1073) into MethodDeclaration(1131) at 2", "Insert SimpleName: getContext(1074) into MethodDeclaration(1131) at 3", "Insert Block(1130) into MethodDeclaration(1131) at 4", "Insert SimpleName: module(1195) into MethodInvocation(1197) at 0", "Insert SimpleName: getClass(1196) into MethodInvocation(1197) at 1", "Insert SimpleName: module(1208) into MethodInvocation(1210) at 0", "Insert SimpleName: getClass(1209) into MethodInvocation(1210) at 1", "Insert SimpleType: Bootstrap(1213) into TypeLiteral(1214) at 0", "Insert InfixExpression: !=(1221) into ParenthesizedExpression(1222) at 0", "Insert SimpleName: OverrideModule(1230) into SimpleType: OverrideModule(1231) at 0", "Insert SimpleName: override(1232) into VariableDeclarationFragment(1241) at 0", "Insert MethodInvocation(1240) into VariableDeclarationFragment(1241) at 1", "Insert SimpleName: override(1243) into InfixExpression: !=(1245) at 0", "Insert NullLiteral(1244) into InfixExpression: !=(1245) at 1", "Insert IfStatement(1270) into Block(1271) at 0", "Insert ExpressionStatement(1281) into Block(1287) at 0", "Insert ExpressionStatement(1286) into Block(1287) at 1", "Insert SimpleName: RuntimeException(1296) into SimpleType: RuntimeException(1297) at 0", "Insert MethodInvocation(1390) into ExpressionStatement(1391) at 0", "Insert MethodInvocation(1397) into ExpressionStatement(1398) at 0", "Insert SimpleName: Override(551) into MarkerAnnotation(552) at 0", "Insert ExpressionStatement(564) into Block(569) at 0", "Insert ExpressionStatement(568) into Block(569) at 1", "Insert SimpleName: DefaultModule(585) into SimpleType: DefaultModule(586) at 0", "Insert MethodDeclaration(597) into AnonymousClassDeclaration(598) at 0", "Insert SimpleName: Condition(763) into SimpleType: Condition(764) at 0", "Insert SimpleType: Condition(773) into VariableDeclarationStatement(780) at 0", "Insert VariableDeclarationFragment(779) into VariableDeclarationStatement(780) at 1", "Insert Block(813) into TryStatement(848) at 0", "Insert CatchClause(847) into TryStatement(848) at 1", "Insert MethodInvocation(855) into ExpressionStatement(856) at 0", "Insert SimpleType: Exception(859) into SingleVariableDeclaration(861) at 0", "Insert SimpleName: e(860) into SingleVariableDeclaration(861) at 1", "Insert ExpressionStatement(869) into Block(882) at 0", "Insert ThrowStatement(881) into Block(882) at 1", "Insert MethodInvocation(1052) into MethodInvocation(1055) at 0", "Insert SimpleName: toInstance(1053) into MethodInvocation(1055) at 1", "Insert SimpleName: manager(1054) into MethodInvocation(1055) at 2", "Insert SimpleName: requestInjection(1057) into MethodInvocation(1059) at 0", "Insert SimpleName: manager(1058) into MethodInvocation(1059) at 1", "Insert SimpleName: Provides(1069) into MarkerAnnotation(1070) at 0", "Insert SimpleName: AutoContext(1072) into SimpleType: AutoContext(1073) at 0", "Insert ReturnStatement(1129) into Block(1130) at 0", "Insert SimpleName: Bootstrap(1212) into SimpleType: Bootstrap(1213) at 0", "Insert SimpleName: bs(1219) into InfixExpression: !=(1221) at 0", "Insert NullLiteral(1220) into InfixExpression: !=(1221) at 1", "Insert MethodInvocation(1235) into MethodInvocation(1240) at 0", "Insert SimpleName: getAnnotation(1236) into MethodInvocation(1240) at 1", "Insert TypeLiteral(1239) into MethodInvocation(1240) at 2", "Insert MethodInvocation(1253) into IfStatement(1270) at 0", "Insert Block(1269) into IfStatement(1270) at 1", "Insert MethodInvocation(1280) into ExpressionStatement(1281) at 0", "Insert MethodInvocation(1285) into ExpressionStatement(1286) at 0", "Insert SimpleName: install(1385) into MethodInvocation(1390) at 0", "Insert MethodInvocation(1389) into MethodInvocation(1390) at 1", "Insert SimpleName: install(1392) into MethodInvocation(1397) at 0", "Insert MethodInvocation(1396) into MethodInvocation(1397) at 1", "Insert MethodInvocation(563) into ExpressionStatement(564) at 0", "Insert MethodInvocation(567) into ExpressionStatement(568) at 0", "Insert MarkerAnnotation(588) into MethodDeclaration(597) at 0", "Insert SimpleType: PropertySource(590) into MethodDeclaration(597) at 1", "Insert SimpleName: getPropertySource(591) into MethodDeclaration(597) at 2", "Insert Block(596) into MethodDeclaration(597) at 3", "Insert SimpleName: Condition(772) into SimpleType: Condition(773) at 0", "Insert SimpleName: c(774) into VariableDeclarationFragment(779) at 0", "Insert MethodInvocation(778) into VariableDeclarationFragment(779) at 1", "Insert VariableDeclarationStatement(792) into Block(813) at 0", "Insert IfStatement(812) into Block(813) at 1", "Insert SingleVariableDeclaration(817) into CatchClause(847) at 0", "Insert Block(846) into CatchClause(847) at 1", "Insert SimpleName: LOG(849) into MethodInvocation(855) at 0", "Insert SimpleName: info(850) into MethodInvocation(855) at 1", "Insert StringLiteral: \"  + {}\"(851) into MethodInvocation(855) at 2", "Insert MethodInvocation(854) into MethodInvocation(855) at 3", "Insert SimpleName: Exception(858) into SimpleType: Exception(859) at 0", "Insert MethodInvocation(868) into ExpressionStatement(869) at 0", "Insert ClassInstanceCreation(880) into ThrowStatement(881) at 0", "Insert SimpleName: bind(1048) into MethodInvocation(1052) at 0", "Insert TypeLiteral(1051) into MethodInvocation(1052) at 1", "Insert ClassInstanceCreation(1128) into ReturnStatement(1129) at 0", "Insert SimpleName: module(1233) into MethodInvocation(1235) at 0", "Insert SimpleName: getClass(1234) into MethodInvocation(1235) at 1", "Insert SimpleType: OverrideModule(1238) into TypeLiteral(1239) at 0", "Insert SimpleName: moduleNames(1246) into MethodInvocation(1253) at 0", "Insert SimpleName: contains(1247) into MethodInvocation(1253) at 1", "Insert MethodInvocation(1252) into MethodInvocation(1253) at 2", "Insert ExpressionStatement(1263) into Block(1269) at 0", "Insert ExpressionStatement(1268) into Block(1269) at 1", "Insert SimpleName: LOG(1272) into MethodInvocation(1280) at 0", "Insert SimpleName: info(1273) into MethodInvocation(1280) at 1", "Insert StringLiteral: \"    Adding conditional module {}\"(1274) into MethodInvocation(1280) at 2", "Insert MethodInvocation(1279) into MethodInvocation(1280) at 3", "Insert SimpleName: moreModules(1282) into MethodInvocation(1285) at 0", "Insert SimpleName: add(1283) into MethodInvocation(1285) at 1", "Insert SimpleName: module(1284) into MethodInvocation(1285) at 2", "Insert SimpleName: Modules(1386) into MethodInvocation(1389) at 0", "Insert SimpleName: combine(1387) into MethodInvocation(1389) at 1", "Insert SimpleName: rootModules(1388) into MethodInvocation(1389) at 2", "Insert SimpleName: Modules(1393) into MethodInvocation(1396) at 0", "Insert SimpleName: combine(1394) into MethodInvocation(1396) at 1", "Insert SimpleName: moreModules(1395) into MethodInvocation(1396) at 2", "Insert MethodInvocation(560) into MethodInvocation(563) at 0", "Insert SimpleName: toInstance(561) into MethodInvocation(563) at 1", "Insert SimpleName: manager(562) into MethodInvocation(563) at 2", "Insert SimpleName: requestInjection(565) into MethodInvocation(567) at 0", "Insert SimpleName: manager(566) into MethodInvocation(567) at 1", "Insert SimpleName: Provides(587) into MarkerAnnotation(588) at 0", "Insert SimpleName: PropertySource(589) into SimpleType: PropertySource(590) at 0", "Insert ReturnStatement(595) into Block(596) at 0", "Insert SimpleName: injector(775) into MethodInvocation(778) at 0", "Insert SimpleName: getInstance(776) into MethodInvocation(778) at 1", "Insert SimpleName: condition(777) into MethodInvocation(778) at 2", "Insert SimpleType: Method(782) into VariableDeclarationStatement(792) at 0", "Insert VariableDeclarationFragment(791) into VariableDeclarationStatement(792) at 1", "Insert PrefixExpression: !(800) into IfStatement(812) at 0", "Insert Block(811) into IfStatement(812) at 1", "Insert SimpleType: NoSuchMethodException(815) into SingleVariableDeclaration(817) at 0", "Insert SimpleName: e(816) into SingleVariableDeclaration(817) at 1", "Insert VariableDeclarationStatement(826) into Block(846) at 0", "Insert IfStatement(845) into Block(846) at 1", "Insert SimpleName: formatConditional(852) into MethodInvocation(854) at 0", "Insert SimpleName: annot(853) into MethodInvocation(854) at 1", "Insert SimpleName: LOG(862) into MethodInvocation(868) at 0", "Insert SimpleName: info(863) into MethodInvocation(868) at 1", "Insert StringLiteral: \"  - {}\"(864) into MethodInvocation(868) at 2", "Insert MethodInvocation(867) into MethodInvocation(868) at 3", "Insert SimpleType: Exception(871) into ClassInstanceCreation(880) at 0", "Insert InfixExpression: +(879) into ClassInstanceCreation(880) at 1", "Insert SimpleType: LifecycleManager(1050) into TypeLiteral(1051) at 0", "Insert SimpleType: AutoContext(1076) into ClassInstanceCreation(1128) at 0", "Insert AnonymousClassDeclaration(1127) into ClassInstanceCreation(1128) at 1", "Insert SimpleName: OverrideModule(1237) into SimpleType: OverrideModule(1238) at 0", "Insert MethodInvocation(1250) into MethodInvocation(1252) at 0", "Insert SimpleName: getName(1251) into MethodInvocation(1252) at 1", "Insert MethodInvocation(1262) into ExpressionStatement(1263) at 0", "Insert MethodInvocation(1267) into ExpressionStatement(1268) at 0", "Insert MethodInvocation(1277) into MethodInvocation(1279) at 0", "Insert SimpleName: getSimpleName(1278) into MethodInvocation(1279) at 1", "Insert SimpleName: bind(556) into MethodInvocation(560) at 0", "Insert TypeLiteral(559) into MethodInvocation(560) at 1", "Insert ClassInstanceCreation(594) into ReturnStatement(595) at 0", "Insert SimpleName: Method(781) into SimpleType: Method(782) at 0", "Insert SimpleName: check(783) into VariableDeclarationFragment(791) at 0", "Insert MethodInvocation(790) into VariableDeclarationFragment(791) at 1", "Insert CastExpression(799) into PrefixExpression: !(800) at 0", "Insert ExpressionStatement(808) into Block(811) at 0", "Insert ReturnStatement(810) into Block(811) at 1", "Insert SimpleName: NoSuchMethodException(814) into SimpleType: NoSuchMethodException(815) at 0", "Insert SimpleType: Method(819) into VariableDeclarationStatement(826) at 0", "Insert VariableDeclarationFragment(825) into VariableDeclarationStatement(826) at 1", "Insert PrefixExpression: !(833) into IfStatement(845) at 0", "Insert Block(844) into IfStatement(845) at 1", "Insert SimpleName: formatConditional(865) into MethodInvocation(867) at 0", "Insert SimpleName: annot(866) into MethodInvocation(867) at 1", "Insert SimpleName: Exception(870) into SimpleType: Exception(871) at 0", "Insert StringLiteral: \"Failed to check condition '\"(872) into InfixExpression: +(879) at 0", "Insert SimpleName: condition(873) into InfixExpression: +(879) at 1", "Insert StringLiteral: \"' on module '\"(874) into InfixExpression: +(879) at 2", "Insert MethodInvocation(877) into InfixExpression: +(879) at 3", "Insert StringLiteral: \"'\"(878) into InfixExpression: +(879) at 4", "Insert SimpleName: LifecycleManager(1049) into SimpleType: LifecycleManager(1050) at 0", "Insert SimpleName: AutoContext(1075) into SimpleType: AutoContext(1076) at 0", "Insert MethodDeclaration(1092) into AnonymousClassDeclaration(1127) at 0", "Insert MethodDeclaration(1108) into AnonymousClassDeclaration(1127) at 1", "Insert MethodDeclaration(1126) into AnonymousClassDeclaration(1127) at 2", "Insert SimpleName: override(1248) into MethodInvocation(1250) at 0", "Insert SimpleName: value(1249) into MethodInvocation(1250) at 1", "Insert SimpleName: LOG(1254) into MethodInvocation(1262) at 0", "Insert SimpleName: info(1255) into MethodInvocation(1262) at 1", "Insert StringLiteral: \"    Adding override module {}\"(1256) into MethodInvocation(1262) at 2", "Insert MethodInvocation(1261) into MethodInvocation(1262) at 3", "Insert SimpleName: overrideModules(1264) into MethodInvocation(1267) at 0", "Insert SimpleName: add(1265) into MethodInvocation(1267) at 1", "Insert SimpleName: module(1266) into MethodInvocation(1267) at 2", "Insert SimpleName: module(1275) into MethodInvocation(1277) at 0", "Insert SimpleName: getClass(1276) into MethodInvocation(1277) at 1", "Insert SimpleType: LifecycleManager(558) into TypeLiteral(559) at 0", "Insert SimpleType: DefaultPropertySource(593) into ClassInstanceCreation(594) at 0", "Insert SimpleName: condition(784) into MethodInvocation(790) at 0", "Insert SimpleName: getDeclaredMethod(785) into MethodInvocation(790) at 1", "Insert StringLiteral: \"check\"(786) into MethodInvocation(790) at 2", "Insert MethodInvocation(789) into MethodInvocation(790) at 3", "Insert PrimitiveType: boolean(793) into CastExpression(799) at 0", "Insert MethodInvocation(798) into CastExpression(799) at 1", "Insert MethodInvocation(807) into ExpressionStatement(808) at 0", "Insert BooleanLiteral: false(809) into ReturnStatement(810) at 0", "Insert SimpleName: Method(818) into SimpleType: Method(819) at 0", "Insert SimpleName: check(820) into VariableDeclarationFragment(825) at 0", "Insert MethodInvocation(824) into VariableDeclarationFragment(825) at 1", "Insert CastExpression(832) into PrefixExpression: !(833) at 0", "Insert ExpressionStatement(841) into Block(844) at 0", "Insert ReturnStatement(843) into Block(844) at 1", "Insert SimpleName: module(875) into MethodInvocation(877) at 0", "Insert SimpleName: getClass(876) into MethodInvocation(877) at 1", "Insert MarkerAnnotation(1078) into MethodDeclaration(1092) at 0", "Insert Modifier: public(1079) into MethodDeclaration(1092) at 1", "Insert PrimitiveType: boolean(1080) into MethodDeclaration(1092) at 2", "Insert SimpleName: hasProfile(1081) into MethodDeclaration(1092) at 3", "Insert SingleVariableDeclaration(1085) into MethodDeclaration(1092) at 4", "Insert Block(1091) into MethodDeclaration(1092) at 5", "Insert MarkerAnnotation(1094) into MethodDeclaration(1108) at 0", "Insert Modifier: public(1095) into MethodDeclaration(1108) at 1", "Insert PrimitiveType: boolean(1096) into MethodDeclaration(1108) at 2", "Insert SimpleName: hasModule(1097) into MethodDeclaration(1108) at 3", "Insert SingleVariableDeclaration(1101) into MethodDeclaration(1108) at 4", "Insert Block(1107) into MethodDeclaration(1108) at 5", "Insert MarkerAnnotation(1110) into MethodDeclaration(1126) at 0", "Insert Modifier: public(1111) into MethodDeclaration(1126) at 1", "Insert PrimitiveType: boolean(1112) into MethodDeclaration(1126) at 2", "Insert SimpleName: hasBinding(1113) into MethodDeclaration(1126) at 3", "Insert SingleVariableDeclaration(1119) into MethodDeclaration(1126) at 4", "Insert Block(1125) into MethodDeclaration(1126) at 5", "Insert MethodInvocation(1259) into MethodInvocation(1261) at 0", "Insert SimpleName: getSimpleName(1260) into MethodInvocation(1261) at 1", "Insert SimpleName: LifecycleManager(557) into SimpleType: LifecycleManager(558) at 0", "Insert SimpleName: DefaultPropertySource(592) into SimpleType: DefaultPropertySource(593) at 0", "Insert SimpleName: annot(787) into MethodInvocation(789) at 0", "Insert SimpleName: annotationType(788) into MethodInvocation(789) at 1", "Insert SimpleName: check(794) into MethodInvocation(798) at 0", "Insert SimpleName: invoke(795) into MethodInvocation(798) at 1", "Insert SimpleName: c(796) into MethodInvocation(798) at 2", "Insert SimpleName: annot(797) into MethodInvocation(798) at 3", "Insert SimpleName: LOG(801) into MethodInvocation(807) at 0", "Insert SimpleName: info(802) into MethodInvocation(807) at 1", "Insert StringLiteral: \"  - {}\"(803) into MethodInvocation(807) at 2", "Insert MethodInvocation(806) into MethodInvocation(807) at 3", "Insert SimpleName: condition(821) into MethodInvocation(824) at 0", "Insert SimpleName: getDeclaredMethod(822) into MethodInvocation(824) at 1", "Insert StringLiteral: \"check\"(823) into MethodInvocation(824) at 2", "Insert PrimitiveType: boolean(827) into CastExpression(832) at 0", "Insert MethodInvocation(831) into CastExpression(832) at 1", "Insert MethodInvocation(840) into ExpressionStatement(841) at 0", "Insert BooleanLiteral: false(842) into ReturnStatement(843) at 0", "Insert SimpleName: Override(1077) into MarkerAnnotation(1078) at 0", "Insert SimpleType: String(1083) into SingleVariableDeclaration(1085) at 0", "Insert SimpleName: profile(1084) into SingleVariableDeclaration(1085) at 1", "Insert ReturnStatement(1090) into Block(1091) at 0", "Insert SimpleName: Override(1093) into MarkerAnnotation(1094) at 0", "Insert SimpleType: String(1099) into SingleVariableDeclaration(1101) at 0", "Insert SimpleName: className(1100) into SingleVariableDeclaration(1101) at 1", "Insert ReturnStatement(1106) into Block(1107) at 0", "Insert SimpleName: Override(1109) into MarkerAnnotation(1110) at 0", "Insert ParameterizedType: Key<?>(1117) into SingleVariableDeclaration(1119) at 0", "Insert SimpleName: key(1118) into SingleVariableDeclaration(1119) at 1", "Insert ReturnStatement(1124) into Block(1125) at 0", "Insert SimpleName: module(1257) into MethodInvocation(1259) at 0", "Insert SimpleName: getClass(1258) into MethodInvocation(1259) at 1", "Insert SimpleName: formatConditional(804) into MethodInvocation(806) at 0", "Insert SimpleName: annot(805) into MethodInvocation(806) at 1", "Insert SimpleName: check(828) into MethodInvocation(831) at 0", "Insert SimpleName: invoke(829) into MethodInvocation(831) at 1", "Insert SimpleName: c(830) into MethodInvocation(831) at 2", "Insert SimpleName: LOG(834) into MethodInvocation(840) at 0", "Insert SimpleName: info(835) into MethodInvocation(840) at 1", "Insert StringLiteral: \"  - {}\"(836) into MethodInvocation(840) at 2", "Insert MethodInvocation(839) into MethodInvocation(840) at 3", "Insert SimpleName: String(1082) into SimpleType: String(1083) at 0", "Insert MethodInvocation(1089) into ReturnStatement(1090) at 0", "Insert SimpleName: String(1098) into SimpleType: String(1099) at 0", "Insert MethodInvocation(1105) into ReturnStatement(1106) at 0", "Insert SimpleType: Key(1115) into ParameterizedType: Key<?>(1117) at 0", "Insert WildcardType: ?(1116) into ParameterizedType: Key<?>(1117) at 1", "Insert MethodInvocation(1123) into ReturnStatement(1124) at 0", "Insert SimpleName: formatConditional(837) into MethodInvocation(839) at 0", "Insert SimpleName: annot(838) into MethodInvocation(839) at 1", "Insert SimpleName: profiles(1086) into MethodInvocation(1089) at 0", "Insert SimpleName: contains(1087) into MethodInvocation(1089) at 1", "Insert SimpleName: profile(1088) into MethodInvocation(1089) at 2", "Insert SimpleName: moduleNames(1102) into MethodInvocation(1105) at 0", "Insert SimpleName: contains(1103) into MethodInvocation(1105) at 1", "Insert SimpleName: className(1104) into MethodInvocation(1105) at 2", "Insert SimpleName: Key(1114) into SimpleType: Key(1115) at 0", "Insert SimpleName: keys(1120) into MethodInvocation(1123) at 0", "Insert SimpleName: contains(1121) into MethodInvocation(1123) at 1", "Insert SimpleName: key(1122) into MethodInvocation(1123) at 2"]}}, {"LifecycleModule_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: obj", "DEL SimpleType: Object", "DEL SimpleName: obj", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL MarkerAnnotation", "DEL SimpleName: hashCode", "DEL SimpleName: Override", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: hashCode", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation"]}]}}, {"LifecycleModule_diff": {"operations": [" * Governator.createInjector();(59) to TextElement:  ", " * Governator.createInjector();(59)", "Delete SimpleName: Override(170)", "Delete MarkerAnnotation(171)", "Delete Modifier: public(172)", "Delete PrimitiveType: boolean(173)", "Delete SimpleName: equals(174)", "Delete SimpleName: Object(175)", "Delete SimpleType: Object(176)", "Delete SimpleName: obj(177)", "Delete SingleVariableDeclaration(178)", "Delete SimpleName: hashCode(179)", "Delete MethodInvocation(180)", "Delete SimpleName: obj(181)", "Delete SimpleName: hashCode(182)", "Delete MethodInvocation(183)", "Delete InfixExpression: ==(184)", "Delete ReturnStatement(185)", "Delete Block(186)", "Delete MethodDeclaration(187)"]}}, {"AutoModuleBuilder_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.auto"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Annotation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Arrays", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.atomic.AtomicInteger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.Logger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.LoggerFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.AbstractModule"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Binding", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Injector"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Key", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Module"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Provides"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Stage", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.TypeLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.name.Names"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.spi.Element", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.spi.Elements"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.util.Modules"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.DefaultLifecycleListener"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.DefaultModule", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.ElementsEx"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.Governator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.LifecycleListener", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.LifecycleShutdownSignal", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.ModuleListProvider", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.ServiceLoaderModuleListProvider"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.auto.annotations.Bootstrap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.auto.annotations.Conditional", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.auto.annotations.ConditionalOnProfile", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.auto.annotations.OverrideModule", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: name", "DEL TextElement: public static class ApplicationModule extends AbstractModule ", "DEL PrimitiveType: void", "DEL SimpleName: bootstrapModule", "DEL SimpleName: module", "DEL SimpleName: HashSet", "DEL WildcardType: ? extends Condition", "DEL SimpleType: AutoModuleBuilder", "DEL SimpleName: AtomicInteger", "DEL SimpleName: loadedModules", "DEL SimpleType: Binding", "DEL SimpleName: module", "DEL SimpleName: keys", "DEL SimpleName: str", "DEL IfStatement", "DEL MarkerAnnotation", "DEL SimpleType: Module", "DEL MethodDeclaration", "DEL InfixExpression: -", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Modifier: private", "DEL ParameterizedType: List<Module>", "DEL MethodInvocation", "DEL SimpleName: AutoModuleBuilder", "DEL MarkerAnnotation", "DEL SimpleName: injector", "DEL SimpleName: module", "DEL ReturnStatement", "DEL SimpleName: LOG", "DEL SimpleName: ArrayList", "DEL Javadoc", "DEL SimpleName: module", "DEL ExpressionStatement", "DEL SimpleName: propertySource", "DEL SimpleName: get", "DEL TextElement: Governator.createInjector( ", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SimpleName: str", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: bootstrapModule", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement: @author", "DEL SimpleName: List", "DEL SimpleName: profile", "DEL SimpleName: module", "DEL SimpleType: HashSet", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL SimpleName: Names", "DEL SimpleName: info", "DEL Block", "DEL SimpleName: bootstrapModule", "DEL TextElement: Add a runtime profile.  @see ", "DEL SimpleName: annot", "DEL SimpleType: Module", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: Boolean", "DEL ExpressionStatement", "DEL TextElement: Add a runtime profiles.  @see ", "DEL SimpleName: condition", "DEL Modifier: public", "DEL SimpleName: AutoModuleBuilder", "DEL StringLiteral: \"Not\"", "DEL FieldAccess", "DEL SimpleName: keys", "DEL Block", "DEL MethodDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: Logger", "DEL SimpleName: Annotation", "DEL MethodDeclaration", "DEL ConditionalExpression", "DEL ClassInstanceCreation", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"Evaluating module {}\"", "DEL SimpleType: Module", "DEL AnonymousClassDeclaration", "DEL SimpleName: name", "DEL SimpleName: AutoModuleBuilder", "DEL MethodDeclaration", "DEL SimpleType: Module", "DEL VariableDeclarationStatement", "DEL SimpleName: check", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: PropertySource", "DEL EnhancedForStatement", "DEL TextElement: </pre>", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL SimpleName: getSimpleName", "DEL SimpleName: isBootstrap", "DEL SimpleName: pos", "DEL TypeLiteral", "DEL MarkerAnnotation", "DEL SimpleName: profiles", "DEL TextElement: Bootstrap overrides for the bootstrap injector used to load and inject into ", "DEL SimpleName: evaluateConditions", "DEL SimpleName: Set", "DEL Modifier: final", "DEL Modifier: private", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: profile", "DEL SimpleName: withProfiles", "DEL Javadoc", "DEL ReturnStatement", "DEL NullLiteral", "DEL MarkerAnnotation", "DEL SimpleType: AutoModuleBuilder", "DEL TextElement: public static void main(String args[]) ", "DEL IfStatement", "DEL SimpleName: evaluateConditions", "DEL StringLiteral: \"  - {}\"", "DEL TagElement: @param", "DEL SimpleName: ModuleListProvider", "DEL SimpleType: AutoModuleBuilder", "DEL SimpleName: idCounter", "DEL ThisExpression", "DEL Block", "DEL SimpleName: pos", "DEL MethodInvocation", "DEL SimpleName: conditional", "DEL SimpleName: Condition", "DEL StringLiteral: \"  + ConditionalOn{}Bootstrap\"", "DEL MethodInvocation", "DEL TextElement: Add a runtime profiles.  @see ", "DEL InfixExpression: !=", "DEL SimpleName: info", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: ModuleProvider", "DEL SimpleName: annotationType", "DEL SimpleName: formatConditional", "DEL SimpleType: AutoContext", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Modules", "DEL SimpleName: getClass", "DEL SimpleName: NoSuchMethodException", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: Set", "DEL MethodInvocation", "DEL SimpleName: getDeclaredMethod", "DEL SingleVariableDeclaration", "DEL ParameterizedType: List<Element>", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ContinueStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: annot", "DEL SimpleName: ElementsEx", "DEL SimpleName: idCounter", "DEL SimpleName: bootstrapLifecycleShutdownSignal", "DEL PrimitiveType: boolean", "DEL SimpleName: with", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleName: getAnnotations", "DEL Modifier: public", "DEL SimpleName: Module", "DEL MethodDeclaration", "DEL SimpleType: Module", "DEL SimpleName: finder", "DEL TextElement:  static class SomeLibraryModuleOverride extends AbstractModule {", "DEL BooleanLiteral: false", "DEL SimpleType: ModuleProvider", "DEL Block", "DEL Modifier: final", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: check", "DEL TextElement:  elandau", "DEL Javadoc", "DEL MarkerAnnotation", "DEL SimpleName: combine", "DEL TextElement: <pre>", "DEL TextElement: // Since the conditions match this module will be installed as an override.", "DEL SimpleName: combine", "DEL SimpleName: LOG", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: AbstractModule", "DEL SimpleName: Module", "DEL IfStatement", "DEL SimpleName: PropertySource", "DEL TextElement: AutoModule provides automatic module loading using plugable module finders combined", "DEL SimpleName: String", "DEL TryStatement", "DEL TextElement: public static void main(String args[]) ", "DEL PrefixExpression: -", "DEL SimpleName: info", "DEL Assignment: =", "DEL StringLiteral: \"check\"", "DEL MethodDeclaration", "DEL SimpleName: LOG", "DEL SimpleName: Annotation", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: Module", "DEL SimpleType: DefaultModule", "DEL IfStatement", "DEL SimpleName: Module", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleType: ModuleListProvider", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: AutoModuleBuilder", "DEL ParameterizedType: Set<String>", "DEL SimpleName: LOG", "DEL SimpleType: Module", "DEL SimpleName: skipSources", "DEL SimpleName: Elements", "DEL SimpleName: moreModules", "DEL SimpleName: moduleProviders", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: ArrayList", "DEL SimpleName: Collection", "DEL SimpleName: getName", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: Module", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleType: Exception", "DEL SimpleName: annotationType", "DEL MethodInvocation", "DEL StringLiteral: \".\"", "DEL Block", "DEL SimpleName: module", "DEL SimpleName: annot", "DEL SimpleName: profiles", "DEL SimpleName: ArrayList", "DEL SimpleName: getClass", "DEL SimpleType: AutoContext", "DEL SimpleName: isBootstrap", "DEL SimpleType: Condition", "DEL SimpleName: String", "DEL SimpleName: getClass", "DEL SimpleType: Module", "DEL SingleVariableDeclaration", "DEL SimpleName: ArrayList", "DEL VariableDeclarationFragment", "DEL TextElement: Governator.createInjector( ", "DEL TypeLiteral", "DEL SimpleName: injector", "DEL TypeLiteral", "DEL StringLiteral: \"    Adding override module {}\"", "DEL SimpleName: getClass", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Bootstrap", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL ParameterizedType: List<String>", "DEL SimpleName: conditional", "DEL TagElement", "DEL SimpleName: moreModules", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: annot", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: LOG", "DEL SimpleName: Logger", "DEL SimpleName: info", "DEL ParameterizedType: Binding<ModuleProvider>", "DEL Modifier: private", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleName: hasBinding", "DEL SimpleName: AutoModuleBuilder", "DEL SimpleType: List", "DEL SimpleName: Module", "DEL ExpressionStatement", "DEL SimpleType: Conditional", "DEL SimpleName: injector", "DEL Block", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL DoStatement", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: moduleProviders", "DEL FieldAccess", "DEL SimpleType: ModuleProvider", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL TextElement: with conditional loading and optional overrides.  The power of AutoModule comes into ", "DEL SimpleName: getAnnotation", "DEL ParameterizedType: ArrayList<>", "DEL SimpleName: profiles", "DEL ClassInstanceCreation", "DEL SimpleName: Key", "DEL SimpleName: signal", "DEL SimpleType: Element", "DEL SimpleName: rootModule", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: Binding", "DEL MethodInvocation", "DEL SimpleName: hasProfile", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: Method", "DEL SimpleName: Key", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL ParameterizedType: List<Module>", "DEL SimpleName: create", "DEL SimpleType: Annotation", "DEL Modifier: public", "DEL SimpleName: profiles", "DEL ReturnStatement", "DEL SimpleName: getAllInjectionKeys", "DEL TextElement: where bindings must be overridden or extended based on various conditions such ", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: binder", "DEL SimpleType: Method", "DEL PrefixExpression: !", "DEL Modifier: public", "DEL SimpleName: add", "DEL ParenthesizedExpression", "DEL SimpleName: getClass", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"BootstrapLifecycleBridge\"", "DEL SimpleName: List", "DEL ReturnStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: module", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleType: RuntimeException", "DEL TextElement: }", "DEL SimpleName: getAnnotation", "DEL TextElement: Note that the output of the builder is a standard Guice module.  It is therefore ", "DEL ExpressionStatement", "DEL SimpleName: bootstrapModule", "DEL SimpleName: DefaultPropertySource", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: add", "DEL MethodInvocation", "DEL IfStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: LOG", "DEL SimpleName: toInstance", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL TagElement: @param", "DEL SimpleName: AutoModuleBuilder", "DEL SimpleName: LOG", "DEL Block", "DEL SimpleName: bind", "DEL StringLiteral: \"  - {}\"", "DEL ParameterizedType: ArrayList<>", "DEL VariableDeclarationFragment", "DEL SimpleName: pos", "DEL SimpleType: AutoModuleBuilder", "DEL InfixExpression: +", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleType: OverrideModule", "DEL SimpleName: pos", "DEL SimpleName: condition", "DEL BooleanLiteral: false", "DEL SimpleName: getClass", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: bootstrapModule", "DEL PrimitiveType: int", "DEL TryStatement", "DEL NumberLiteral: 1", "DEL SimpleName: create", "DEL SimpleName: getContext", "DEL SimpleName: formatConditional", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL TypeLiteral", "DEL TextElement: </pre>", "DEL SimpleType: AtomicInteger", "DEL SimpleName: module", "DEL SimpleName: toString", "DEL ThisExpression", "DEL SimpleName: AutoModuleBuilder", "DEL SimpleName: create", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleName: Class", "DEL MarkerAnnotation", "DEL SimpleName: withBootstrap", "DEL StringLiteral: \"  - ConditionalOn{}Bootstrap\"", "DEL SimpleName: check", "DEL TextElement: AutoModuleBuilder", "DEL BooleanLiteral: false", "DEL TypeLiteral", "DEL SimpleName: bootstrapModule", "DEL Modifier: final", "DEL MethodInvocation", "DEL ParameterizedType: List<Binding<ModuleProvider>>", "DEL StringLiteral: \"Not\"", "DEL SimpleName: pos", "DEL SimpleName: finder", "DEL SimpleType: String", "DEL SimpleName: Module", "DEL SimpleName: getProvider", "DEL ThisExpression", "DEL StringLiteral: \"\"", "DEL SimpleName: module", "DEL TextElement: <pre>", "DEL SimpleName: loader", "DEL SimpleName: condition", "DEL Modifier: final", "DEL SimpleName: Condition", "DEL TextElement: .withProfile(\"production\")", "DEL SimpleName: override", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleName: bs", "DEL SimpleName: loadedModules", "DEL SimpleType: Module", "DEL SimpleName: withModuleFinder", "DEL Modifier: final", "DEL SimpleName: List", "DEL SimpleName: propertySource", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleType: DefaultPropertySource", "DEL SimpleName: withProfiles", "DEL Block", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL SimpleName: Module", "DEL SimpleName: LOG", "DEL InfixExpression: !=", "DEL SimpleName: e", "DEL TypeLiteral", "DEL SimpleName: bs", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL Modifier: final", "DEL SimpleName: build", "DEL SimpleName: AutoContext", "DEL InfixExpression: !=", "DEL SimpleType: List", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"Ignoring module {}\"", "DEL MethodDeclaration", "DEL SimpleName: withProfile", "DEL ReturnStatement", "DEL TextElement: Add a module finder such as a ServiceLoaderModuleFinder or ClassPathScannerModuleFinder", "DEL SimpleName: Override", "DEL SimpleName: profiles", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleType: AutoModuleBuilder", "DEL StringLiteral: \"(\"", "DEL SimpleName: get", "DEL SimpleName: info", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement: While the above example may seem verbose and not be too impressive when using a small number of modules", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: getSimpleName", "DEL TagElement", "DEL ExpressionStatement", "DEL Modifier: final", "DEL Block", "DEL TextElement: // This module can be picked up by classpath scanning or via the service loader", "DEL SimpleName: OverrideModule", "DEL Modifier: public", "DEL ParameterizedType: Key<?>", "DEL SimpleName: lastIndexOf", "DEL ExpressionStatement", "DEL TextElement: this functionality is extremely helpful in an application with hundreds of modules, some transitive, ", "DEL SimpleName: getClass", "DEL SimpleName: loadedModules", "DEL SimpleName: isEnabled", "DEL SimpleName: Modules", "DEL SimpleType: DefaultModule", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: overrideModules", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL Modifier: private", "DEL Modifier: final", "DEL FieldAccess", "DEL BooleanLiteral: true", "DEL SimpleType: Module", "DEL MethodInvocation", "DEL SimpleName: Provides", "DEL SimpleName: overrideModules", "DEL SimpleName: addAll", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL MethodDeclaration", "DEL SimpleName: getClass", "DEL MethodInvocation", "DEL TextElement: Usage", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: profile", "DEL ThisExpression", "DEL SimpleName: moduleNames", "DEL SimpleType: Boolean", "DEL ParameterizedType: Class<? extends Condition>", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL ParameterizedType: HashSet<>", "DEL SimpleName: Module", "DEL SimpleName: bootstrapModule", "DEL VariableDeclarationFragment", "DEL SimpleName: annotatedWith", "DEL SimpleName: Injector", "DEL TextElement: where overrides and additional functionality is desired when running in different environments.", "DEL ExpressionStatement", "DEL SimpleName: Module", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: OverrideModule", "DEL Assignment: =", "DEL SimpleName: module", "DEL MethodInvocation", "DEL SimpleName: injector", "DEL Block", "DEL SimpleName: getClass", "DEL AnonymousClassDeclaration", "DEL SimpleType: AutoModuleBuilder", "DEL TextElement: 1.  Config", "DEL CastExpression", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL Modifier: final", "DEL SimpleType: Condition", "DEL SimpleName: pos", "DEL TagElement", "DEL SimpleName: Module", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: true", "DEL TextElement: the conditions.  Bootstrap does not restrict the bindings to allow any type", "DEL TextElement: as properties, environment, operating system and existence of jars on the class path.", "DEL SimpleName: install", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleType: Collection", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleType: AutoModuleBuilder", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleType: LifecycleListener", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL ParameterizedType: Collection<String>", "DEL SimpleType: Module", "DEL PrimitiveType: boolean", "DEL SimpleName: Element", "DEL MethodInvocation", "DEL SimpleName: str", "DEL ExpressionStatement", "DEL SimpleName: List", "DEL PrefixExpression: !", "DEL SimpleType: Module", "DEL SimpleType: Module", "DEL SimpleName: getDeclaredMethod", "DEL SimpleName: substring", "DEL SimpleName: moduleProviders", "DEL SimpleName: AutoContext", "DEL SimpleName: AtomicInteger", "DEL Modifier: private", "DEL SimpleName: ModuleListProvider", "DEL SimpleName: List", "DEL SimpleName: getInstance", "DEL SingleVariableDeclaration", "DEL SimpleName: propertySource", "DEL Block", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: hasModule", "DEL Modifier: static", "DEL TextElement: .build()", "DEL SimpleName: loadedModules", "DEL FieldDeclaration", "DEL SimpleType: ArrayList", "DEL SimpleName: incrementAndGet", "DEL TextElement: // This is your application main", "DEL MethodInvocation", "DEL SimpleName: ModuleProvider", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: injector", "DEL SimpleName: moreModules", "DEL SimpleName: LOG", "DEL EnhancedForStatement", "DEL SimpleType: Bootstrap", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TextElement: }", "DEL MethodInvocation", "DEL SimpleName: condition", "DEL Modifier: public", "DEL SimpleName: LifecycleListener", "DEL EnhancedForStatement", "DEL StringLiteral: \"    Adding conditional module {}\"", "DEL MethodInvocation", "DEL ThrowStatement", "DEL SimpleName: Module", "DEL Modifier: private", "DEL SimpleName: loader", "DEL Modifier: public", "DEL SimpleName: with", "DEL Modifier: private", "DEL SimpleName: LOG", "DEL SimpleName: getLogger", "DEL SimpleName: LoggerFactory", "DEL SimpleName: check", "DEL SimpleName: info", "DEL SimpleType: Module", "DEL SimpleName: AutoModuleBuilder", "DEL TagElement: @OverrideModule(SomeLibraryModule.class)", "      public", "DEL ReturnStatement", "DEL SimpleName: AutoModuleBuilder", "DEL SimpleType: PropertySource", "DEL SimpleName: override", "DEL SimpleType: List", "DEL SimpleName: profile", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL StringLiteral: \"'\"", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL SimpleName: info", "DEL VariableDeclarationFragment", "DEL Block", "DEL VariableDeclarationStatement", "DEL TextElement: // Module to capture all the bindings for an application", "DEL SimpleName: module", "DEL TextElement: play when taking a complex system of modules and running it within different profiles", "DEL ThisExpression", "DEL SimpleName: configure", "DEL AnonymousClassDeclaration", "DEL SimpleName: module", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL NullLiteral", "DEL TextElement: The above is equivalent to,", "DEL SimpleType: LifecycleShutdownSignal", "DEL SimpleName: forModule", "DEL IfStatement", "DEL SimpleType: NoSuchMethodException", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: overrideModules", "DEL MethodDeclaration", "DEL SimpleName: moduleNames", "DEL SimpleName: formatConditional", "DEL ExpressionStatement", "DEL SimpleName: propertySource", "DEL SimpleName: AutoModuleBuilder", "DEL MethodInvocation", "DEL SimpleName: module", "DEL ReturnStatement", "DEL SimpleType: ServiceLoaderModuleListProvider", "DEL SimpleName: rootModule", "DEL SimpleType: List", "DEL SimpleName: str", "DEL InfixExpression: !=", "DEL SimpleName: ConditionalOnProfile", "DEL ClassInstanceCreation", "DEL SimpleName: bootstrapModule", "DEL Modifier: static", "DEL SimpleName: info", "DEL TextElement: other type of module.", "DEL SimpleName: moduleNames", "DEL SimpleType: Module", "DEL ReturnStatement", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: className", "DEL SimpleName: className", "DEL SimpleName: Module", "DEL SimpleType: Annotation", "DEL SimpleName: elements", "DEL ClassInstanceCreation", "DEL SimpleName: AutoModuleBuilder", "DEL Block", "DEL InfixExpression: +", "DEL SimpleType: PropertySource", "DEL MethodDeclaration", "DEL SimpleType: ModuleListProvider", "DEL SimpleName: String", "DEL SimpleType: AutoModuleBuilder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: condition", "DEL IfStatement", "DEL TypeLiteral", "DEL SimpleName: pos", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: findBindingsByType", "DEL SimpleName: module", "DEL SimpleName: injector", "DEL SimpleName: profile", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Bootstrap", "DEL Modifier: final", "DEL SimpleType: Key", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleType: DefaultLifecycleListener", "DEL SimpleName: Method", "DEL TagElement: @code", "DEL Block", "DEL Modifier: public", "DEL SimpleName: pos", "DEL StringLiteral: \"Using profiles : \"", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL SimpleName: lastIndexOf", "DEL SimpleName: Arrays", "DEL MethodInvocation", "DEL SimpleName: elements", "DEL SimpleName: elements", "DEL MethodInvocation", "DEL TagElement", "DEL IfStatement", "DEL SimpleType: Method", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: binding", "DEL SimpleName: annot", "DEL SimpleName: key", "DEL SimpleName: Injector", "DEL SimpleName: ConditionalOnProfile", "DEL FieldDeclaration", "DEL SimpleName: get", "DEL SimpleName: Provides", "DEL SimpleName: c", "DEL SimpleName: combine", "DEL SimpleName: module", "DEL SimpleName: get", "DEL SimpleName: info", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"  + {}\"", "DEL SimpleName: AutoModuleBuilder", "DEL SimpleName: module", "DEL SimpleName: profiles", "DEL SimpleName: Module", "DEL SimpleName: override", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: Exception", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: getInstance", "DEL SimpleName: LOG", "DEL FieldDeclaration", "DEL SimpleName: bootstrapLifecycleShutdownSignal", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: TypeLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: bootstrapModule", "DEL NumberLiteral: 0", "DEL SimpleType: Key", "DEL CastExpression", "DEL SimpleName: profile", "DEL Modifier: public", "DEL TextElement: 2.  Profiles", "DEL Block", "DEL Block", "DEL Block", "DEL SimpleName: moduleProviders", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: Binding", "DEL InfixExpression: +", "DEL StringLiteral: \"Failed to check condition '\"", "DEL NumberLiteral: 1", "DEL SimpleType: PropertySource", "DEL SimpleName: moreModules", "DEL MethodInvocation", "DEL SimpleName: LifecycleShutdownSignal", "DEL Block", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: str", "DEL SimpleType: String", "DEL SimpleName: isBootstrap", "DEL FieldAccess", "DEL PrimitiveType: boolean", "DEL SimpleName: Bootstrap", "DEL StringLiteral: \"governator.module.disabled.\"", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL SimpleName: loadedModules", "DEL MethodInvocation", "DEL SimpleType: Injector", "DEL NullLiteral", "DEL SimpleName: getPropertySource", "DEL TextElement: bindings are provided by default and may be overridden,", "DEL MethodInvocation", "DEL TextElement: install(new SomeLibraryModule());", "DEL SimpleType: Set", "DEL SimpleName: profile", "DEL TextElement: Modules.override(new ApplicationModule())", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: profiles", "DEL SimpleName: e", "DEL SingleVariableDeclaration", "DEL StringLiteral: \".\"", "DEL Modifier: public", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL TryStatement", "DEL SimpleName: String", "DEL SimpleType: AutoModuleBuilder", "DEL SimpleName: formatConditional", "DEL FieldDeclaration", "DEL SimpleName: Binding", "DEL BooleanLiteral: false", "DEL SimpleName: addAll", "DEL SimpleName: Modules", "DEL SimpleName: getClass", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: info", "DEL SimpleName: Module", "DEL SimpleName: key", "DEL SimpleName: named", "DEL BooleanLiteral: false", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: loadedModules", "DEL SimpleName: ArrayList", "DEL SimpleName: annot", "DEL SimpleName: injector", "DEL SimpleName: LOG", "DEL AnonymousClassDeclaration", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: pos", "DEL SimpleName: isEnabled", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Set<Key<?>>", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: moduleProviders", "DEL SingleVariableDeclaration", "DEL SimpleName: Module", "DEL SimpleName: module", "DEL SimpleName: getAllSourceModules", "DEL SimpleType: AtomicInteger", "DEL SimpleName: profiles", "DEL SimpleType: AutoModuleBuilder", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: LOG", "DEL SimpleType: String", "DEL SimpleName: getAnnotation", "DEL SimpleName: contains", "DEL SingleVariableDeclaration", "DEL TextElement: ConditionalOnProfile({\"production\"}", "DEL TypeLiteral", "DEL SimpleName: add", "DEL MethodInvocation", "DEL Modifier: public", "DEL Assignment: =", "DEL ParameterizedType: List<Module>", "DEL MethodDeclaration", "DEL ParameterizedType: ArrayList<>", "DEL MethodInvocation", "DEL TextElement: .awaitTermination()", "DEL EnhancedForStatement", "DEL Javadoc", "DEL SimpleName: module", "DEL SimpleName: getInstance", "DEL SimpleName: isBootstrap", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: invoke", "DEL ThisExpression", "DEL PrimitiveType: boolean", "DEL SimpleName: getClass", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL ParameterizedType: Key<?>", "DEL SimpleName: Conditional", "DEL MethodInvocation", "DEL SimpleName: AutoModuleBuilder", "DEL ParameterizedType: ArrayList<>", "DEL StringLiteral: \"\"", "DEL ParameterizedType: List<ModuleListProvider>", "DEL SimpleName: install", "DEL VariableDeclarationFragment", "DEL SimpleType: Exception", "DEL SimpleName: indexOf", "DEL SimpleName: PropertySource", "DEL ClassInstanceCreation", "DEL PrimitiveType: void", "DEL SimpleName: substring", "DEL SimpleName: bootstrapModule", "DEL TextElement: possible to install multiple AutoModuleBuilder constructed modules as well as any ", "DEL SingleVariableDeclaration", "DEL SimpleName: profiles", "DEL VariableDeclarationFragment", "DEL SimpleName: e", "DEL StringLiteral: \"check\"", "DEL SimpleName: getElements", "DEL SimpleName: annot", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL TextElement: .forModule(new ApplicationModule())", "DEL SimpleName: Conditional", "DEL MethodInvocation", "DEL TextElement: }", "DEL IfStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: Class", "DEL VariableDeclarationFragment", "DEL SimpleName: Module", "DEL MethodInvocation", "DEL SimpleName: a", "DEL SimpleName: asList", "DEL IfStatement", "DEL SimpleType: List", "DEL TagElement: @code", "DEL VariableDeclarationFragment", "DEL SimpleName: contains", "DEL InfixExpression: !=", "DEL SimpleName: module", "DEL TextElement: }", "DEL SimpleType: ModuleProvider", "DEL VariableDeclarationStatement", "DEL SimpleName: isBootstrap", "DEL SimpleName: module", "DEL Block", "DEL Block", "DEL SimpleType: Module", "DEL ParameterizedType: Binding<ModuleProvider>", "DEL SimpleType: String", "DEL SimpleName: module", "DEL SimpleName: formatConditional", "DEL SimpleType: List", "DEL Block", "DEL SimpleName: ElementsEx", "DEL SimpleName: e", "DEL SimpleName: a", "DEL SimpleType: OverrideModule", "DEL ReturnStatement", "DEL SimpleName: module", "DEL Block", "DEL SimpleName: Governator", "DEL ThisExpression", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL ParameterizedType: List<Module>", "DEL MethodInvocation", "DEL SimpleName: ServiceLoaderModuleListProvider", "DEL Block", "DEL SimpleName: profiles", "DEL MethodInvocation", "DEL SimpleName: forModule", "DEL TagElement: @link", "DEL SimpleName: String", "DEL TextElement: ...", "DEL SimpleType: String", "DEL SimpleName: ModuleListProvider", "DEL TextElement: protected void configure() ", "DEL TextElement: .with(new SomeLibraryModuleOverride());", "DEL StringLiteral: \"' on module '\"", "DEL ExpressionStatement", "DEL SimpleName: addAll", "DEL SimpleName: add", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL StringLiteral: \"  - {}\"", "DEL MethodDeclaration", "DEL StringLiteral: \"Adding exposed bootstrap module {}\"", "DEL SimpleType: AbstractModule", "DEL CatchClause", "DEL Modifier: final", "DEL TextElement: }", "DEL SimpleName: module", "DEL SimpleName: Exception", "DEL Modifier: public", "DEL SimpleName: binding", "DEL SimpleName: module", "DEL Block", "DEL SimpleName: rootModule", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: annot", "DEL Modifier: protected", "DEL SimpleName: String", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: conditional", "DEL SimpleType: String", "DEL AnonymousClassDeclaration", "DEL Javadoc", "DEL SimpleType: Module", "DEL InfixExpression: >", "DEL SimpleName: Modules", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: override", "DEL SimpleName: getName", "DEL QualifiedName: Modules.EMPTY_MODULE", "DEL SimpleName: info", "DEL SimpleName: info", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: pos", "DEL SimpleName: bootstrapModule", "DEL SimpleName: DefaultModule", "DEL SimpleName: add", "DEL SimpleName: isEmpty", "DEL SimpleName: List", "DEL Block", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL TextElement: to be externally provided and injected into conditions.  Several simple", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: module", "DEL SimpleName: get", "DEL SimpleName: DefaultLifecycleListener", "DEL SimpleName: ModuleProvider", "DEL PrefixExpression: !", "DEL TextElement: 3.  BoundKeys (TODO)", "DEL SimpleName: invoke", "DEL SimpleType: ArrayList", "DEL SimpleType: ModuleListProvider", "DEL SimpleName: PropertySource", "DEL ClassInstanceCreation", "DEL SimpleName: onStopped", "DEL SimpleName: String", "DEL SimpleName: pos", "DEL SimpleName: Modules", "DEL Block", "DEL MethodInvocation", "DEL TagElement: @param", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: LifecycleShutdownSignal", "DEL SimpleName: override", "DEL SimpleName: getName", "DEL SimpleName: finder", "DEL SimpleName: createInjector", "DEL SimpleType: ArrayList", "DEL Block", "DEL SimpleName: withBootstrap", "DEL SimpleName: moduleProviders", "DEL SimpleName: isBootstrap", "DEL SimpleType: PropertySource", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Module", "DEL PrefixExpression: -", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: AutoModuleBuilder", "DEL SimpleName: contains", "DEL ThisExpression", "DEL SimpleName: ConditionalOnProfile", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: LifecycleShutdownSignal", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: DefaultModule", "DEL SimpleName: moduleProviders", "DEL SimpleType: Injector", "DEL Modifier: static", "DEL SimpleName: module", "DEL SimpleName: Module", "DEL ThisExpression", "DEL SimpleName: List", "DEL SimpleName: length", "DEL SimpleName: name", "DEL SimpleName: contains", "DEL MethodDeclaration", "DEL Modifier: private", "DEL QualifiedName: Stage.DEVELOPMENT", "DEL SimpleType: Module", "DEL SimpleType: Conditional", "DEL SimpleName: RuntimeException", "DEL ReturnStatement"]}]}}, {"AutoModuleBuilder_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.auto(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.ArrayList(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Arrays(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Collection(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.HashSet(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.List(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Set(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.concurrent.atomic.AtomicInteger(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.slf4j.Logger(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.slf4j.LoggerFactory(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.inject.AbstractModule(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.inject.Binding(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.inject.Injector(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.google.inject.Key(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.inject.Module(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.google.inject.Provides(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.google.inject.Stage(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: com.google.inject.TypeLiteral(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: com.google.inject.name.Names(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.google.inject.spi.Element(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.google.inject.spi.Elements(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.inject.util.Modules(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: com.netflix.governator.DefaultLifecycleListener(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: com.netflix.governator.DefaultModule(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: com.netflix.governator.ElementsEx(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: com.netflix.governator.Governator(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: com.netflix.governator.LifecycleListener(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: com.netflix.governator.LifecycleShutdownSignal(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: com.netflix.governator.ModuleListProvider(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: com.netflix.governator.ServiceLoaderModuleListProvider(62)", "Delete ImportDeclaration(63)", "Delete QualifiedName: com.netflix.governator.auto.annotations.Bootstrap(64)", "Delete ImportDeclaration(65)", "Delete QualifiedName: com.netflix.governator.auto.annotations.Conditional(66)", "Delete ImportDeclaration(67)", "Delete QualifiedName: com.netflix.governator.auto.annotations.ConditionalOnProfile(68)", "Delete ImportDeclaration(69)", "Delete QualifiedName: com.netflix.governator.auto.annotations.OverrideModule(70)", "Delete ImportDeclaration(71)", "Delete TextElement: AutoModule provides automatic module loading using plugable module finders combined(72)", "Delete TextElement: with conditional loading and optional overrides.  The power of AutoModule comes into (73)", "Delete TextElement: play when taking a complex system of modules and running it within different profiles(74)", "Delete TextElement: where bindings must be overridden or extended based on various conditions such (75)", "Delete TextElement: as properties, environment, operating system and existence of jars on the class path.(76)", "Delete TextElement: Note that the output of the builder is a standard Guice module.  It is therefore (77)", "Delete TextElement: possible to install multiple AutoModuleBuilder constructed modules as well as any (78)", "Delete TextElement: other type of module.(79)", "Delete TextElement: Usage(80)", "Delete TextElement: <pre>(81)", "Delete TextElement: // This is your application main(82)", "Delete TextElement: public static void main(String args[]) (83)", "Delete TextElement: Governator.createInjector( (84)", "Delete TextElement: AutoModuleBuilder(85)", "Delete TextElement: .forModule(new ApplicationModule())(86)", "Delete TextElement: .withProfile(\"production\")(87)", "Delete TextElement: .build()(88)", "Delete TextElement: .awaitTermination()(89)", "Delete TagElement: @code(90)", "Delete TextElement: // Module to capture all the bindings for an application(91)", "Delete TextElement: public static class ApplicationModule extends AbstractModule (92)", "Delete TextElement: protected void configure() (93)", "Delete TextElement: install(new SomeLibraryModule());(94)", "Delete TextElement: ...(95)", "Delete TextElement: }(96)", "Delete TextElement: }(97)", "Delete TextElement: // This module can be picked up by classpath scanning or via the service loader(98)", "Delete TextElement: // Since the conditions match this module will be installed as an override.(99)", "Delete TextElement: ConditionalOnProfile({\"production\"}(100)", "Delete TagElement(101)", "Delete TextElement:  static class SomeLibraryModuleOverride extends AbstractModule {(102)", "Delete TextElement: }(103)", "Delete TextElement: }(104)", "Delete TextElement: </pre>(105)", "Delete TextElement: The above is equivalent to,(106)", "Delete TextElement: <pre>(107)", "Delete TextElement: public static void main(String args[]) (108)", "Delete TextElement: Governator.createInjector( (109)", "Delete TextElement: Modules.override(new ApplicationModule())(110)", "Delete TextElement: .with(new SomeLibraryModuleOverride());(111)", "Delete TagElement: @code(112)", "Delete TextElement: }(113)", "Delete TextElement: </pre>(114)", "Delete TextElement: While the above example may seem verbose and not be too impressive when using a small number of modules(115)", "Delete TextElement: this functionality is extremely helpful in an application with hundreds of modules, some transitive, (116)", "Delete TextElement: where overrides and additional functionality is desired when running in different environments.(117)", "Delete TagElement: @OverrideModule(SomeLibraryModule.class)", "      public(118)", "Delete TextElement:  elandau(119)", "Delete TagElement: @author(120)", "Delete Javadoc(121)", "Delete Modifier: public(122)", "Delete Modifier: final(123)", "Delete SimpleName: AutoModuleBuilder(124)", "Delete Modifier: private(125)", "Delete Modifier: static(126)", "Delete Modifier: final(127)", "Delete SimpleName: Logger(128)", "Delete SimpleType: Logger(129)", "Delete SimpleName: LOG(130)", "Delete SimpleName: LoggerFactory(131)", "Delete SimpleName: getLogger(132)", "Delete SimpleName: AutoModuleBuilder(133)", "Delete SimpleType: AutoModuleBuilder(134)", "Delete TypeLiteral(135)", "Delete MethodInvocation(136)", "Delete VariableDeclarationFragment(137)", "Delete FieldDeclaration(138)", "Delete Modifier: private(139)", "Delete Modifier: final(140)", "Delete SimpleName: Module(141)", "Delete SimpleType: Module(142)", "Delete SimpleName: module(143)", "Delete VariableDeclarationFragment(144)", "Delete FieldDeclaration(145)", "Delete Modifier: private(146)", "Delete SimpleName: Set(147)", "Delete SimpleType: Set(148)", "Delete SimpleName: String(149)", "Delete SimpleType: String(150)", "Delete ParameterizedType: Set<String>(151)", "Delete SimpleName: profiles(152)", "Delete SimpleName: HashSet(153)", "Delete SimpleType: HashSet(154)", "Delete ParameterizedType: HashSet<>(155)", "Delete ClassInstanceCreation(156)", "Delete VariableDeclarationFragment(157)", "Delete FieldDeclaration(158)", "Delete Modifier: private(159)", "Delete SimpleName: Module(160)", "Delete SimpleType: Module(161)", "Delete SimpleName: bootstrapModule(162)", "Delete QualifiedName: Modules.EMPTY_MODULE(163)", "Delete VariableDeclarationFragment(164)", "Delete FieldDeclaration(165)", "Delete Modifier: private(166)", "Delete SimpleName: List(167)", "Delete SimpleType: List(168)", "Delete SimpleName: ModuleListProvider(169)", "Delete SimpleType: ModuleListProvider(170)", "Delete ParameterizedType: List<ModuleListProvider>(171)", "Delete SimpleName: moduleProviders(172)", "Delete SimpleName: ArrayList(173)", "Delete SimpleType: ArrayList(174)", "Delete ParameterizedType: ArrayList<>(175)", "Delete ClassInstanceCreation(176)", "Delete VariableDeclarationFragment(177)", "Delete FieldDeclaration(178)", "Delete Modifier: private(179)", "Delete Modifier: static(180)", "Delete Modifier: final(181)", "Delete SimpleName: AtomicInteger(182)", "Delete SimpleType: AtomicInteger(183)", "Delete SimpleName: idCounter(184)", "Delete SimpleName: AtomicInteger(185)", "Delete SimpleType: AtomicInteger(186)", "Delete ClassInstanceCreation(187)", "Delete VariableDeclarationFragment(188)", "Delete FieldDeclaration(189)", "Delete Modifier: public(190)", "Delete Modifier: static(191)", "Delete SimpleName: AutoModuleBuilder(192)", "Delete SimpleType: AutoModuleBuilder(193)", "Delete SimpleName: forModule(194)", "Delete SimpleName: Module(195)", "Delete SimpleType: Module(196)", "Delete SimpleName: module(197)", "Delete SingleVariableDeclaration(198)", "Delete SimpleName: AutoModuleBuilder(199)", "Delete SimpleType: AutoModuleBuilder(200)", "Delete SimpleName: module(201)", "Delete ClassInstanceCreation(202)", "Delete ReturnStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete Modifier: public(206)", "Delete Modifier: static(207)", "Delete SimpleName: AutoModuleBuilder(208)", "Delete SimpleType: AutoModuleBuilder(209)", "Delete SimpleName: forModule(210)", "Delete SimpleName: Module(211)", "Delete SimpleType: Module(212)", "Delete SimpleName: module(213)", "Delete SingleVariableDeclaration(214)", "Delete SimpleName: AutoModuleBuilder(215)", "Delete SimpleType: AutoModuleBuilder(216)", "Delete SimpleName: Modules(217)", "Delete SimpleName: combine(218)", "Delete SimpleName: module(219)", "Delete MethodInvocation(220)", "Delete ClassInstanceCreation(221)", "Delete ReturnStatement(222)", "Delete Block(223)", "Delete MethodDeclaration(224)", "Delete Modifier: public(225)", "Delete SimpleName: AutoModuleBuilder(226)", "Delete SimpleName: Module(227)", "Delete SimpleType: Module(228)", "Delete SimpleName: module(229)", "Delete SingleVariableDeclaration(230)", "Delete ThisExpression(231)", "Delete SimpleName: module(232)", "Delete FieldAccess(233)", "Delete SimpleName: module(234)", "Delete Assignment: =(235)", "Delete ExpressionStatement(236)", "Delete Block(237)", "Delete MethodDeclaration(238)", "Delete TextElement: Add a module finder such as a ServiceLoaderModuleFinder or ClassPathScannerModuleFinder(239)", "Delete TagElement(240)", "Delete SimpleName: finder(241)", "Delete TagElement: @param(242)", "Delete TagElement: @return(243)", "Delete Javadoc(244)", "Delete Modifier: public(245)", "Delete SimpleName: AutoModuleBuilder(246)", "Delete SimpleType: AutoModuleBuilder(247)", "Delete SimpleName: withModuleFinder(248)", "Delete SimpleName: ModuleListProvider(249)", "Delete SimpleType: ModuleListProvider(250)", "Delete SimpleName: finder(251)", "Delete SingleVariableDeclaration(252)", "Delete ThisExpression(253)", "Delete SimpleName: moduleProviders(254)", "Delete FieldAccess(255)", "Delete SimpleName: add(256)", "Delete SimpleName: finder(257)", "Delete MethodInvocation(258)", "Delete ExpressionStatement(259)", "Delete ThisExpression(260)", "Delete ReturnStatement(261)", "Delete Block(262)", "Delete MethodDeclaration(263)", "Delete TextElement: Bootstrap overrides for the bootstrap injector used to load and inject into (264)", "Delete TextElement: the conditions.  Bootstrap does not restrict the bindings to allow any type(265)", "Delete TextElement: to be externally provided and injected into conditions.  Several simple(266)", "Delete TextElement: bindings are provided by default and may be overridden,(267)", "Delete TextElement: 1.  Config(268)", "Delete TextElement: 2.  Profiles(269)", "Delete TextElement: 3.  BoundKeys (TODO)(270)", "Delete TagElement(271)", "Delete SimpleName: bootstrapModule(272)", "Delete TagElement: @param(273)", "Delete Javadoc(274)", "Delete Modifier: public(275)", "Delete SimpleName: AutoModuleBuilder(276)", "Delete SimpleType: AutoModuleBuilder(277)", "Delete SimpleName: withBootstrap(278)", "Delete SimpleName: Module(279)", "Delete SimpleType: Module(280)", "Delete SimpleName: bootstrapModule(281)", "Delete SingleVariableDeclaration(282)", "Delete ThisExpression(283)", "Delete SimpleName: bootstrapModule(284)", "Delete FieldAccess(285)", "Delete SimpleName: bootstrapModule(286)", "Delete Assignment: =(287)", "Delete ExpressionStatement(288)", "Delete ThisExpression(289)", "Delete ReturnStatement(290)", "Delete Block(291)", "Delete MethodDeclaration(292)", "Delete Modifier: public(293)", "Delete SimpleName: AutoModuleBuilder(294)", "Delete SimpleType: AutoModuleBuilder(295)", "Delete SimpleName: withBootstrap(296)", "Delete SimpleName: Module(297)", "Delete SimpleType: Module(298)", "Delete SimpleName: bootstrapModule(299)", "Delete SingleVariableDeclaration(300)", "Delete ThisExpression(301)", "Delete SimpleName: bootstrapModule(302)", "Delete FieldAccess(303)", "Delete SimpleName: Modules(304)", "Delete SimpleName: combine(305)", "Delete SimpleName: bootstrapModule(306)", "Delete MethodInvocation(307)", "Delete Assignment: =(308)", "Delete ExpressionStatement(309)", "Delete ThisExpression(310)", "Delete ReturnStatement(311)", "Delete Block(312)", "Delete MethodDeclaration(313)", "Delete TextElement: Add a runtime profile.  @see (314)", "Delete SimpleName: ConditionalOnProfile(315)", "Delete TagElement: @link(316)", "Delete TagElement(317)", "Delete SimpleName: profile(318)", "Delete TagElement: @param(319)", "Delete Javadoc(320)", "Delete Modifier: public(321)", "Delete SimpleName: AutoModuleBuilder(322)", "Delete SimpleType: AutoModuleBuilder(323)", "Delete SimpleName: withProfile(324)", "Delete SimpleName: String(325)", "Delete SimpleType: String(326)", "Delete SimpleName: profile(327)", "Delete SingleVariableDeclaration(328)", "Delete ThisExpression(329)", "Delete SimpleName: profiles(330)", "Delete FieldAccess(331)", "Delete SimpleName: add(332)", "Delete SimpleName: profile(333)", "Delete MethodInvocation(334)", "Delete ExpressionStatement(335)", "Delete ThisExpression(336)", "Delete ReturnStatement(337)", "Delete Block(338)", "Delete MethodDeclaration(339)", "Delete TextElement: Add a runtime profiles.  @see (340)", "Delete SimpleName: ConditionalOnProfile(341)", "Delete TagElement: @link(342)", "Delete TagElement(343)", "Delete SimpleName: profile(344)", "Delete TagElement: @param(345)", "Delete Javadoc(346)", "Delete Modifier: public(347)", "Delete SimpleName: AutoModuleBuilder(348)", "Delete SimpleType: AutoModuleBuilder(349)", "Delete SimpleName: withProfiles(350)", "Delete SimpleName: String(351)", "Delete SimpleType: String(352)", "Delete SimpleName: profiles(353)", "Delete SingleVariableDeclaration(354)", "Delete ThisExpression(355)", "Delete SimpleName: profiles(356)", "Delete FieldAccess(357)", "Delete SimpleName: addAll(358)", "Delete SimpleName: Arrays(359)", "Delete SimpleName: asList(360)", "Delete SimpleName: profiles(361)", "Delete MethodInvocation(362)", "Delete MethodInvocation(363)", "Delete ExpressionStatement(364)", "Delete ThisExpression(365)", "Delete ReturnStatement(366)", "Delete Block(367)", "Delete MethodDeclaration(368)", "Delete TextElement: Add a runtime profiles.  @see (369)", "Delete SimpleName: ConditionalOnProfile(370)", "Delete TagElement: @link(371)", "Delete TagElement(372)", "Delete SimpleName: profile(373)", "Delete TagElement: @param(374)", "Delete Javadoc(375)", "Delete Modifier: public(376)", "Delete SimpleName: AutoModuleBuilder(377)", "Delete SimpleType: AutoModuleBuilder(378)", "Delete SimpleName: withProfiles(379)", "Delete SimpleName: Collection(380)", "Delete SimpleType: Collection(381)", "Delete SimpleName: String(382)", "Delete SimpleType: String(383)", "Delete ParameterizedType: Collection<String>(384)", "Delete SimpleName: profiles(385)", "Delete SingleVariableDeclaration(386)", "Delete ThisExpression(387)", "Delete SimpleName: profiles(388)", "Delete FieldAccess(389)", "Delete SimpleName: addAll(390)", "Delete SimpleName: profiles(391)", "Delete MethodInvocation(392)", "Delete ExpressionStatement(393)", "Delete ThisExpression(394)", "Delete ReturnStatement(395)", "Delete Block(396)", "Delete MethodDeclaration(397)", "Delete Modifier: private(398)", "Delete SimpleName: String(399)", "Delete SimpleType: String(400)", "Delete SimpleName: formatConditional(401)", "Delete SimpleName: Annotation(402)", "Delete SimpleType: Annotation(403)", "Delete SimpleName: a(404)", "Delete SingleVariableDeclaration(405)", "Delete SimpleName: String(406)", "Delete SimpleType: String(407)", "Delete SimpleName: str(408)", "Delete SimpleName: a(409)", "Delete SimpleName: toString(410)", "Delete MethodInvocation(411)", "Delete VariableDeclarationFragment(412)", "Delete VariableDeclarationStatement(413)", "Delete PrimitiveType: int(414)", "Delete SimpleName: pos(415)", "Delete SimpleName: str(416)", "Delete SimpleName: indexOf(417)", "Delete StringLiteral: \"(\"(418)", "Delete MethodInvocation(419)", "Delete VariableDeclarationFragment(420)", "Delete VariableDeclarationStatement(421)", "Delete SimpleName: pos(422)", "Delete NumberLiteral: 1(423)", "Delete PrefixExpression: -(424)", "Delete InfixExpression: !=(425)", "Delete SimpleName: pos(426)", "Delete SimpleName: str(427)", "Delete SimpleName: lastIndexOf(428)", "Delete StringLiteral: \".\"(429)", "Delete SimpleName: pos(430)", "Delete MethodInvocation(431)", "Delete Assignment: =(432)", "Delete ExpressionStatement(433)", "Delete SimpleName: pos(434)", "Delete NumberLiteral: 1(435)", "Delete PrefixExpression: -(436)", "Delete InfixExpression: !=(437)", "Delete SimpleName: str(438)", "Delete SimpleName: substring(439)", "Delete SimpleName: pos(440)", "Delete NumberLiteral: 1(441)", "Delete InfixExpression: +(442)", "Delete MethodInvocation(443)", "Delete ReturnStatement(444)", "Delete Block(445)", "Delete IfStatement(446)", "Delete Block(447)", "Delete IfStatement(448)", "Delete SimpleName: str(449)", "Delete ReturnStatement(450)", "Delete Block(451)", "Delete MethodDeclaration(452)", "Delete Modifier: private(453)", "Delete PrimitiveType: boolean(454)", "Delete SimpleName: evaluateConditions(455)", "Delete SimpleName: Injector(456)", "Delete SimpleType: Injector(457)", "Delete SimpleName: injector(458)", "Delete SingleVariableDeclaration(459)", "Delete SimpleName: Module(460)", "Delete SimpleType: Module(461)", "Delete SimpleName: module(462)", "Delete SingleVariableDeclaration(463)", "Delete PrimitiveType: boolean(464)", "Delete SimpleName: isBootstrap(465)", "Delete SingleVariableDeclaration(466)", "Delete SimpleName: Exception(467)", "Delete SimpleType: Exception(468)", "Delete SimpleName: LOG(469)", "Delete SimpleName: info(470)", "Delete StringLiteral: \"Evaluating module {}\"(471)", "Delete SimpleName: module(472)", "Delete SimpleName: getClass(473)", "Delete MethodInvocation(474)", "Delete SimpleName: getName(475)", "Delete MethodInvocation(476)", "Delete MethodInvocation(477)", "Delete ExpressionStatement(478)", "Delete SimpleName: Bootstrap(479)", "Delete SimpleType: Bootstrap(480)", "Delete SimpleName: bs(481)", "Delete SimpleName: module(482)", "Delete SimpleName: getClass(483)", "Delete MethodInvocation(484)", "Delete SimpleName: getAnnotation(485)", "Delete SimpleName: Bootstrap(486)", "Delete SimpleType: Bootstrap(487)", "Delete TypeLiteral(488)", "Delete MethodInvocation(489)", "Delete VariableDeclarationFragment(490)", "Delete VariableDeclarationStatement(491)", "Delete SimpleName: isBootstrap(492)", "Delete SimpleName: bs(493)", "Delete NullLiteral(494)", "Delete InfixExpression: !=(495)", "Delete ParenthesizedExpression(496)", "Delete InfixExpression: !=(497)", "Delete SimpleName: LOG(498)", "Delete SimpleName: info(499)", "Delete StringLiteral: \"  - ConditionalOn{}Bootstrap\"(500)", "Delete SimpleName: isBootstrap(501)", "Delete StringLiteral: \"\"(502)", "Delete StringLiteral: \"Not\"(503)", "Delete ConditionalExpression(504)", "Delete MethodInvocation(505)", "Delete ExpressionStatement(506)", "Delete BooleanLiteral: false(507)", "Delete ReturnStatement(508)", "Delete Block(509)", "Delete SimpleName: LOG(510)", "Delete SimpleName: info(511)", "Delete StringLiteral: \"  + ConditionalOn{}Bootstrap\"(512)", "Delete SimpleName: isBootstrap(513)", "Delete StringLiteral: \"\"(514)", "Delete StringLiteral: \"Not\"(515)", "Delete ConditionalExpression(516)", "Delete MethodInvocation(517)", "Delete ExpressionStatement(518)", "Delete Block(519)", "Delete IfStatement(520)", "Delete SimpleName: Annotation(521)", "Delete SimpleType: Annotation(522)", "Delete SimpleName: annot(523)", "Delete SingleVariableDeclaration(524)", "Delete SimpleName: module(525)", "Delete SimpleName: getClass(526)", "Delete MethodInvocation(527)", "Delete SimpleName: getAnnotations(528)", "Delete MethodInvocation(529)", "Delete SimpleName: Conditional(530)", "Delete SimpleType: Conditional(531)", "Delete SimpleName: conditional(532)", "Delete SimpleName: annot(533)", "Delete SimpleName: annotationType(534)", "Delete MethodInvocation(535)", "Delete SimpleName: getAnnotation(536)", "Delete SimpleName: Conditional(537)", "Delete SimpleType: Conditional(538)", "Delete TypeLiteral(539)", "Delete MethodInvocation(540)", "Delete VariableDeclarationFragment(541)", "Delete VariableDeclarationStatement(542)", "Delete SimpleName: conditional(543)", "Delete NullLiteral(544)", "Delete InfixExpression: !=(545)", "Delete SimpleName: Class(546)", "Delete SimpleType: Class(547)", "Delete SimpleName: Condition(548)", "Delete SimpleType: Condition(549)", "Delete WildcardType: ? extends Condition(550)", "Delete ParameterizedType: Class<? extends Condition>(551)", "Delete SimpleName: condition(552)", "Delete SingleVariableDeclaration(553)", "Delete SimpleName: conditional(554)", "Delete SimpleName: value(555)", "Delete MethodInvocation(556)", "Delete SimpleName: Condition(557)", "Delete SimpleType: Condition(558)", "Delete SimpleName: c(559)", "Delete SimpleName: injector(560)", "Delete SimpleName: getInstance(561)", "Delete SimpleName: condition(562)", "Delete MethodInvocation(563)", "Delete VariableDeclarationFragment(564)", "Delete VariableDeclarationStatement(565)", "Delete SimpleName: Method(566)", "Delete SimpleType: Method(567)", "Delete SimpleName: check(568)", "Delete SimpleName: condition(569)", "Delete SimpleName: getDeclaredMethod(570)", "Delete StringLiteral: \"check\"(571)", "Delete SimpleName: annot(572)", "Delete SimpleName: annotationType(573)", "Delete MethodInvocation(574)", "Delete MethodInvocation(575)", "Delete VariableDeclarationFragment(576)", "Delete VariableDeclarationStatement(577)", "Delete PrimitiveType: boolean(578)", "Delete SimpleName: check(579)", "Delete SimpleName: invoke(580)", "Delete SimpleName: c(581)", "Delete SimpleName: annot(582)", "Delete MethodInvocation(583)", "Delete CastExpression(584)", "Delete PrefixExpression: !(585)", "Delete SimpleName: LOG(586)", "Delete SimpleName: info(587)", "Delete StringLiteral: \"  - {}\"(588)", "Delete SimpleName: formatConditional(589)", "Delete SimpleName: annot(590)", "Delete MethodInvocation(591)", "Delete MethodInvocation(592)", "Delete ExpressionStatement(593)", "Delete BooleanLiteral: false(594)", "Delete ReturnStatement(595)", "Delete Block(596)", "Delete IfStatement(597)", "Delete Block(598)", "Delete SimpleName: NoSuchMethodException(599)", "Delete SimpleType: NoSuchMethodException(600)", "Delete SimpleName: e(601)", "Delete SingleVariableDeclaration(602)", "Delete SimpleName: Method(603)", "Delete SimpleType: Method(604)", "Delete SimpleName: check(605)", "Delete SimpleName: condition(606)", "Delete SimpleName: getDeclaredMethod(607)", "Delete StringLiteral: \"check\"(608)", "Delete MethodInvocation(609)", "Delete VariableDeclarationFragment(610)", "Delete VariableDeclarationStatement(611)", "Delete PrimitiveType: boolean(612)", "Delete SimpleName: check(613)", "Delete SimpleName: invoke(614)", "Delete SimpleName: c(615)", "Delete MethodInvocation(616)", "Delete CastExpression(617)", "Delete PrefixExpression: !(618)", "Delete SimpleName: LOG(619)", "Delete SimpleName: info(620)", "Delete StringLiteral: \"  - {}\"(621)", "Delete SimpleName: formatConditional(622)", "Delete SimpleName: annot(623)", "Delete MethodInvocation(624)", "Delete MethodInvocation(625)", "Delete ExpressionStatement(626)", "Delete BooleanLiteral: false(627)", "Delete ReturnStatement(628)", "Delete Block(629)", "Delete IfStatement(630)", "Delete Block(631)", "Delete CatchClause(632)", "Delete TryStatement(633)", "Delete SimpleName: LOG(634)", "Delete SimpleName: info(635)", "Delete StringLiteral: \"  + {}\"(636)", "Delete SimpleName: formatConditional(637)", "Delete SimpleName: annot(638)", "Delete MethodInvocation(639)", "Delete MethodInvocation(640)", "Delete ExpressionStatement(641)", "Delete Block(642)", "Delete SimpleName: Exception(643)", "Delete SimpleType: Exception(644)", "Delete SimpleName: e(645)", "Delete SingleVariableDeclaration(646)", "Delete SimpleName: LOG(647)", "Delete SimpleName: info(648)", "Delete StringLiteral: \"  - {}\"(649)", "Delete SimpleName: formatConditional(650)", "Delete SimpleName: annot(651)", "Delete MethodInvocation(652)", "Delete MethodInvocation(653)", "Delete ExpressionStatement(654)", "Delete SimpleName: Exception(655)", "Delete SimpleType: Exception(656)", "Delete StringLiteral: \"Failed to check condition '\"(657)", "Delete SimpleName: condition(658)", "Delete StringLiteral: \"' on module '\"(659)", "Delete SimpleName: module(660)", "Delete SimpleName: getClass(661)", "Delete MethodInvocation(662)", "Delete StringLiteral: \"'\"(663)", "Delete InfixExpression: +(664)", "Delete ClassInstanceCreation(665)", "Delete ThrowStatement(666)", "Delete Block(667)", "Delete CatchClause(668)", "Delete TryStatement(669)", "Delete Block(670)", "Delete EnhancedForStatement(671)", "Delete Block(672)", "Delete IfStatement(673)", "Delete Block(674)", "Delete EnhancedForStatement(675)", "Delete BooleanLiteral: true(676)", "Delete ReturnStatement(677)", "Delete Block(678)", "Delete MethodDeclaration(679)", "Delete Modifier: public(680)", "Delete SimpleName: Module(681)", "Delete SimpleType: Module(682)", "Delete SimpleName: build(683)", "Delete SimpleName: LOG(684)", "Delete SimpleName: info(685)", "Delete StringLiteral: \"Using profiles : \"(686)", "Delete SimpleName: profiles(687)", "Delete InfixExpression: +(688)", "Delete MethodInvocation(689)", "Delete ExpressionStatement(690)", "Delete SimpleName: moduleProviders(691)", "Delete SimpleName: isEmpty(692)", "Delete MethodInvocation(693)", "Delete SimpleName: moduleProviders(694)", "Delete SimpleName: add(695)", "Delete SimpleName: ServiceLoaderModuleListProvider(696)", "Delete SimpleType: ServiceLoaderModuleListProvider(697)", "Delete ClassInstanceCreation(698)", "Delete MethodInvocation(699)", "Delete ExpressionStatement(700)", "Delete Block(701)", "Delete IfStatement(702)", "Delete Modifier: final(703)", "Delete SimpleName: List(704)", "Delete SimpleType: List(705)", "Delete SimpleName: Module(706)", "Delete SimpleType: Module(707)", "Delete ParameterizedType: List<Module>(708)", "Delete SimpleName: loadedModules(709)", "Delete SimpleName: ArrayList(710)", "Delete SimpleType: ArrayList(711)", "Delete ParameterizedType: ArrayList<>(712)", "Delete ClassInstanceCreation(713)", "Delete VariableDeclarationFragment(714)", "Delete VariableDeclarationStatement(715)", "Delete SimpleName: ModuleListProvider(716)", "Delete SimpleType: ModuleListProvider(717)", "Delete SimpleName: loader(718)", "Delete SingleVariableDeclaration(719)", "Delete SimpleName: moduleProviders(720)", "Delete SimpleName: loadedModules(721)", "Delete SimpleName: addAll(722)", "Delete SimpleName: loader(723)", "Delete SimpleName: get(724)", "Delete MethodInvocation(725)", "Delete MethodInvocation(726)", "Delete ExpressionStatement(727)", "Delete Block(728)", "Delete EnhancedForStatement(729)", "Delete SimpleName: create(730)", "Delete SimpleName: loadedModules(731)", "Delete SimpleName: module(732)", "Delete BooleanLiteral: false(733)", "Delete SimpleName: create(734)", "Delete SimpleName: loadedModules(735)", "Delete SimpleName: bootstrapModule(736)", "Delete BooleanLiteral: true(737)", "Delete SimpleName: DefaultModule(738)", "Delete SimpleType: DefaultModule(739)", "Delete SimpleName: Provides(740)", "Delete MarkerAnnotation(741)", "Delete SimpleName: PropertySource(742)", "Delete SimpleType: PropertySource(743)", "Delete SimpleName: getPropertySource(744)", "Delete SimpleName: DefaultPropertySource(745)", "Delete SimpleType: DefaultPropertySource(746)", "Delete ClassInstanceCreation(747)", "Delete ReturnStatement(748)", "Delete Block(749)", "Delete MethodDeclaration(750)", "Delete AnonymousClassDeclaration(751)", "Delete ClassInstanceCreation(752)", "Delete MethodInvocation(753)", "Delete MethodInvocation(754)", "Delete ReturnStatement(755)", "Delete Block(756)", "Delete MethodDeclaration(757)", "Delete Modifier: private(758)", "Delete PrimitiveType: boolean(759)", "Delete SimpleName: isEnabled(760)", "Delete SimpleName: PropertySource(761)", "Delete SimpleType: PropertySource(762)", "Delete SimpleName: propertySource(763)", "Delete SingleVariableDeclaration(764)", "Delete SimpleName: String(765)", "Delete SimpleType: String(766)", "Delete SimpleName: name(767)", "Delete SingleVariableDeclaration(768)", "Delete PrimitiveType: int(769)", "Delete SimpleName: pos(770)", "Delete SimpleName: name(771)", "Delete SimpleName: length(772)", "Delete MethodInvocation(773)", "Delete VariableDeclarationFragment(774)", "Delete VariableDeclarationStatement(775)", "Delete SimpleName: propertySource(776)", "Delete SimpleName: get(777)", "Delete StringLiteral: \"governator.module.disabled.\"(778)", "Delete SimpleName: name(779)", "Delete SimpleName: substring(780)", "Delete NumberLiteral: 0(781)", "Delete SimpleName: pos(782)", "Delete MethodInvocation(783)", "Delete InfixExpression: +(784)", "Delete SimpleName: Boolean(785)", "Delete SimpleType: Boolean(786)", "Delete TypeLiteral(787)", "Delete BooleanLiteral: false(788)", "Delete MethodInvocation(789)", "Delete BooleanLiteral: false(790)", "Delete ReturnStatement(791)", "Delete Block(792)", "Delete IfStatement(793)", "Delete SimpleName: pos(794)", "Delete SimpleName: name(795)", "Delete SimpleName: lastIndexOf(796)", "Delete StringLiteral: \".\"(797)", "Delete SimpleName: pos(798)", "Delete NumberLiteral: 1(799)", "Delete InfixExpression: -(800)", "Delete MethodInvocation(801)", "Delete Assignment: =(802)", "Delete ExpressionStatement(803)", "Delete Block(804)", "Delete SimpleName: pos(805)", "Delete NumberLiteral: 0(806)", "Delete InfixExpression: >(807)", "Delete DoStatement(808)", "Delete BooleanLiteral: true(809)", "Delete ReturnStatement(810)", "Delete Block(811)", "Delete MethodDeclaration(812)", "Delete Modifier: private(813)", "Delete SimpleName: Module(814)", "Delete SimpleType: Module(815)", "Delete SimpleName: create(816)", "Delete Modifier: final(817)", "Delete SimpleName: List(818)", "Delete SimpleType: List(819)", "Delete SimpleName: Module(820)", "Delete SimpleType: Module(821)", "Delete ParameterizedType: List<Module>(822)", "Delete SimpleName: loadedModules(823)", "Delete SingleVariableDeclaration(824)", "Delete Modifier: final(825)", "Delete SimpleName: Module(826)", "Delete SimpleType: Module(827)", "Delete SimpleName: rootModule(828)", "Delete SingleVariableDeclaration(829)", "Delete Modifier: final(830)", "Delete PrimitiveType: boolean(831)", "Delete SimpleName: isBootstrap(832)", "Delete SingleVariableDeclaration(833)", "Delete Modifier: final(834)", "Delete SimpleName: Module(835)", "Delete SimpleType: Module(836)", "Delete SimpleName: bootstrapModule(837)", "Delete SingleVariableDeclaration(838)", "Delete Modifier: final(839)", "Delete SimpleName: List(840)", "Delete SimpleType: List(841)", "Delete SimpleName: Element(842)", "Delete SimpleType: Element(843)", "Delete ParameterizedType: List<Element>(844)", "Delete SimpleName: elements(845)", "Delete SimpleName: Elements(846)", "Delete SimpleName: getElements(847)", "Delete QualifiedName: Stage.DEVELOPMENT(848)", "Delete SimpleName: rootModule(849)", "Delete MethodInvocation(850)", "Delete VariableDeclarationFragment(851)", "Delete VariableDeclarationStatement(852)", "Delete Modifier: final(853)", "Delete SimpleName: Set(854)", "Delete SimpleType: Set(855)", "Delete SimpleName: Key(856)", "Delete SimpleType: Key(857)", "Delete WildcardType: ?(858)", "Delete ParameterizedType: Key<?>(859)", "Delete ParameterizedType: Set<Key<?>>(860)", "Delete SimpleName: keys(861)", "Delete SimpleName: ElementsEx(862)", "Delete SimpleName: getAllInjectionKeys(863)", "Delete SimpleName: elements(864)", "Delete MethodInvocation(865)", "Delete VariableDeclarationFragment(866)", "Delete VariableDeclarationStatement(867)", "Delete Modifier: final(868)", "Delete SimpleName: List(869)", "Delete SimpleType: List(870)", "Delete SimpleName: String(871)", "Delete SimpleType: String(872)", "Delete ParameterizedType: List<String>(873)", "Delete SimpleName: moduleNames(874)", "Delete SimpleName: ElementsEx(875)", "Delete SimpleName: getAllSourceModules(876)", "Delete SimpleName: elements(877)", "Delete MethodInvocation(878)", "Delete VariableDeclarationFragment(879)", "Delete VariableDeclarationStatement(880)", "Delete Modifier: final(881)", "Delete SimpleName: Injector(882)", "Delete SimpleType: Injector(883)", "Delete SimpleName: injector(884)", "Delete SimpleName: Governator(885)", "Delete SimpleName: createInjector(886)", "Delete SimpleName: Modules(887)", "Delete SimpleName: override(888)", "Delete SimpleName: DefaultModule(889)", "Delete SimpleType: DefaultModule(890)", "Delete SimpleName: Provides(891)", "Delete MarkerAnnotation(892)", "Delete Modifier: public(893)", "Delete SimpleName: AutoContext(894)", "Delete SimpleType: AutoContext(895)", "Delete SimpleName: getContext(896)", "Delete SimpleName: AutoContext(897)", "Delete SimpleType: AutoContext(898)", "Delete SimpleName: Override(899)", "Delete MarkerAnnotation(900)", "Delete Modifier: public(901)", "Delete PrimitiveType: boolean(902)", "Delete SimpleName: hasProfile(903)", "Delete SimpleName: String(904)", "Delete SimpleType: String(905)", "Delete SimpleName: profile(906)", "Delete SingleVariableDeclaration(907)", "Delete SimpleName: profiles(908)", "Delete SimpleName: contains(909)", "Delete SimpleName: profile(910)", "Delete MethodInvocation(911)", "Delete ReturnStatement(912)", "Delete Block(913)", "Delete MethodDeclaration(914)", "Delete SimpleName: Override(915)", "Delete MarkerAnnotation(916)", "Delete Modifier: public(917)", "Delete PrimitiveType: boolean(918)", "Delete SimpleName: hasModule(919)", "Delete SimpleName: String(920)", "Delete SimpleType: String(921)", "Delete SimpleName: className(922)", "Delete SingleVariableDeclaration(923)", "Delete SimpleName: moduleNames(924)", "Delete SimpleName: contains(925)", "Delete SimpleName: className(926)", "Delete MethodInvocation(927)", "Delete ReturnStatement(928)", "Delete Block(929)", "Delete MethodDeclaration(930)", "Delete SimpleName: Override(931)", "Delete MarkerAnnotation(932)", "Delete Modifier: public(933)", "Delete PrimitiveType: boolean(934)", "Delete SimpleName: hasBinding(935)", "Delete SimpleName: Key(936)", "Delete SimpleType: Key(937)", "Delete WildcardType: ?(938)", "Delete ParameterizedType: Key<?>(939)", "Delete SimpleName: key(940)", "Delete SingleVariableDeclaration(941)", "Delete SimpleName: keys(942)", "Delete SimpleName: contains(943)", "Delete SimpleName: key(944)", "Delete MethodInvocation(945)", "Delete ReturnStatement(946)", "Delete Block(947)", "Delete MethodDeclaration(948)", "Delete AnonymousClassDeclaration(949)", "Delete ClassInstanceCreation(950)", "Delete ReturnStatement(951)", "Delete Block(952)", "Delete MethodDeclaration(953)", "Delete AnonymousClassDeclaration(954)", "Delete ClassInstanceCreation(955)", "Delete MethodInvocation(956)", "Delete SimpleName: with(957)", "Delete SimpleName: bootstrapModule(958)", "Delete MethodInvocation(959)", "Delete MethodInvocation(960)", "Delete VariableDeclarationFragment(961)", "Delete VariableDeclarationStatement(962)", "Delete SimpleName: PropertySource(963)", "Delete SimpleType: PropertySource(964)", "Delete SimpleName: propertySource(965)", "Delete SimpleName: injector(966)", "Delete SimpleName: getInstance(967)", "Delete SimpleName: PropertySource(968)", "Delete SimpleType: PropertySource(969)", "Delete TypeLiteral(970)", "Delete MethodInvocation(971)", "Delete VariableDeclarationFragment(972)", "Delete VariableDeclarationStatement(973)", "Delete Modifier: final(974)", "Delete SimpleName: List(975)", "Delete SimpleType: List(976)", "Delete SimpleName: Module(977)", "Delete SimpleType: Module(978)", "Delete ParameterizedType: List<Module>(979)", "Delete SimpleName: overrideModules(980)", "Delete SimpleName: ArrayList(981)", "Delete SimpleType: ArrayList(982)", "Delete ParameterizedType: ArrayList<>(983)", "Delete ClassInstanceCreation(984)", "Delete VariableDeclarationFragment(985)", "Delete VariableDeclarationStatement(986)", "Delete Modifier: final(987)", "Delete SimpleName: List(988)", "Delete SimpleType: List(989)", "Delete SimpleName: Module(990)", "Delete SimpleType: Module(991)", "Delete ParameterizedType: List<Module>(992)", "Delete SimpleName: moreModules(993)", "Delete SimpleName: ArrayList(994)", "Delete SimpleType: ArrayList(995)", "Delete ParameterizedType: ArrayList<>(996)", "Delete ClassInstanceCreation(997)", "Delete VariableDeclarationFragment(998)", "Delete VariableDeclarationStatement(999)", "Delete SimpleName: Module(1000)", "Delete SimpleType: Module(1001)", "Delete SimpleName: module(1002)", "Delete SingleVariableDeclaration(1003)", "Delete SimpleName: loadedModules(1004)", "Delete SimpleName: isEnabled(1005)", "Delete SimpleName: propertySource(1006)", "Delete SimpleName: module(1007)", "Delete SimpleName: getClass(1008)", "Delete MethodInvocation(1009)", "Delete SimpleName: getName(1010)", "Delete MethodInvocation(1011)", "Delete MethodInvocation(1012)", "Delete PrefixExpression: !(1013)", "Delete SimpleName: LOG(1014)", "Delete SimpleName: info(1015)", "Delete StringLiteral: \"Ignoring module {}\"(1016)", "Delete SimpleName: module(1017)", "Delete SimpleName: getClass(1018)", "Delete MethodInvocation(1019)", "Delete SimpleName: getName(1020)", "Delete MethodInvocation(1021)", "Delete MethodInvocation(1022)", "Delete ExpressionStatement(1023)", "Delete ContinueStatement(1024)", "Delete Block(1025)", "Delete IfStatement(1026)", "Delete SimpleName: evaluateConditions(1027)", "Delete SimpleName: injector(1028)", "Delete SimpleName: module(1029)", "Delete SimpleName: isBootstrap(1030)", "Delete MethodInvocation(1031)", "Delete SimpleName: OverrideModule(1032)", "Delete SimpleType: OverrideModule(1033)", "Delete SimpleName: override(1034)", "Delete SimpleName: module(1035)", "Delete SimpleName: getClass(1036)", "Delete MethodInvocation(1037)", "Delete SimpleName: getAnnotation(1038)", "Delete SimpleName: OverrideModule(1039)", "Delete SimpleType: OverrideModule(1040)", "Delete TypeLiteral(1041)", "Delete MethodInvocation(1042)", "Delete VariableDeclarationFragment(1043)", "Delete VariableDeclarationStatement(1044)", "Delete SimpleName: override(1045)", "Delete NullLiteral(1046)", "Delete InfixExpression: !=(1047)", "Delete SimpleName: moduleNames(1048)", "Delete SimpleName: contains(1049)", "Delete SimpleName: override(1050)", "Delete SimpleName: value(1051)", "Delete MethodInvocation(1052)", "Delete SimpleName: getName(1053)", "Delete MethodInvocation(1054)", "Delete MethodInvocation(1055)", "Delete SimpleName: LOG(1056)", "Delete SimpleName: info(1057)", "Delete StringLiteral: \"    Adding override module {}\"(1058)", "Delete SimpleName: module(1059)", "Delete SimpleName: getClass(1060)", "Delete MethodInvocation(1061)", "Delete SimpleName: getSimpleName(1062)", "Delete MethodInvocation(1063)", "Delete MethodInvocation(1064)", "Delete ExpressionStatement(1065)", "Delete SimpleName: overrideModules(1066)", "Delete SimpleName: add(1067)", "Delete SimpleName: module(1068)", "Delete MethodInvocation(1069)", "Delete ExpressionStatement(1070)", "Delete Block(1071)", "Delete IfStatement(1072)", "Delete Block(1073)", "Delete SimpleName: LOG(1074)", "Delete SimpleName: info(1075)", "Delete StringLiteral: \"    Adding conditional module {}\"(1076)", "Delete SimpleName: module(1077)", "Delete SimpleName: getClass(1078)", "Delete MethodInvocation(1079)", "Delete SimpleName: getSimpleName(1080)", "Delete MethodInvocation(1081)", "Delete MethodInvocation(1082)", "Delete ExpressionStatement(1083)", "Delete SimpleName: moreModules(1084)", "Delete SimpleName: add(1085)", "Delete SimpleName: module(1086)", "Delete MethodInvocation(1087)", "Delete ExpressionStatement(1088)", "Delete Block(1089)", "Delete IfStatement(1090)", "Delete Block(1091)", "Delete IfStatement(1092)", "Delete Block(1093)", "Delete SimpleName: Exception(1094)", "Delete SimpleType: Exception(1095)", "Delete SimpleName: e(1096)", "Delete SingleVariableDeclaration(1097)", "Delete SimpleName: RuntimeException(1098)", "Delete SimpleType: RuntimeException(1099)", "Delete SimpleName: e(1100)", "Delete ClassInstanceCreation(1101)", "Delete ThrowStatement(1102)", "Delete Block(1103)", "Delete CatchClause(1104)", "Delete TryStatement(1105)", "Delete Block(1106)", "Delete EnhancedForStatement(1107)", "Delete SimpleName: List(1108)", "Delete SimpleType: List(1109)", "Delete SimpleName: Binding(1110)", "Delete SimpleType: Binding(1111)", "Delete SimpleName: ModuleProvider(1112)", "Delete SimpleType: ModuleProvider(1113)", "Delete ParameterizedType: Binding<ModuleProvider>(1114)", "Delete ParameterizedType: List<Binding<ModuleProvider>>(1115)", "Delete SimpleName: moduleProviders(1116)", "Delete SimpleName: injector(1117)", "Delete SimpleName: findBindingsByType(1118)", "Delete SimpleName: TypeLiteral(1119)", "Delete SimpleName: get(1120)", "Delete SimpleName: ModuleProvider(1121)", "Delete SimpleType: ModuleProvider(1122)", "Delete TypeLiteral(1123)", "Delete MethodInvocation(1124)", "Delete MethodInvocation(1125)", "Delete VariableDeclarationFragment(1126)", "Delete VariableDeclarationStatement(1127)", "Delete SimpleName: Binding(1128)", "Delete SimpleType: Binding(1129)", "Delete SimpleName: ModuleProvider(1130)", "Delete SimpleType: ModuleProvider(1131)", "Delete ParameterizedType: Binding<ModuleProvider>(1132)", "Delete SimpleName: binding(1133)", "Delete SingleVariableDeclaration(1134)", "Delete SimpleName: moduleProviders(1135)", "Delete SimpleName: Module(1136)", "Delete SimpleType: Module(1137)", "Delete SimpleName: module(1138)", "Delete SimpleName: binding(1139)", "Delete SimpleName: getProvider(1140)", "Delete MethodInvocation(1141)", "Delete SimpleName: get(1142)", "Delete MethodInvocation(1143)", "Delete SimpleName: get(1144)", "Delete MethodInvocation(1145)", "Delete VariableDeclarationFragment(1146)", "Delete VariableDeclarationStatement(1147)", "Delete SimpleName: LOG(1148)", "Delete SimpleName: info(1149)", "Delete StringLiteral: \"Adding exposed bootstrap module {}\"(1150)", "Delete SimpleName: module(1151)", "Delete SimpleName: getClass(1152)", "Delete MethodInvocation(1153)", "Delete SimpleName: getName(1154)", "Delete MethodInvocation(1155)", "Delete MethodInvocation(1156)", "Delete ExpressionStatement(1157)", "Delete SimpleName: moreModules(1158)", "Delete SimpleName: add(1159)", "Delete SimpleName: module(1160)", "Delete MethodInvocation(1161)", "Delete ExpressionStatement(1162)", "Delete Block(1163)", "Delete EnhancedForStatement(1164)", "Delete SimpleName: Modules(1165)", "Delete SimpleName: override(1166)", "Delete SimpleName: AbstractModule(1167)", "Delete SimpleType: AbstractModule(1168)", "Delete SimpleName: Override(1169)", "Delete MarkerAnnotation(1170)", "Delete Modifier: protected(1171)", "Delete PrimitiveType: void(1172)", "Delete SimpleName: configure(1173)", "Delete SimpleName: binder(1174)", "Delete MethodInvocation(1175)", "Delete SimpleName: skipSources(1176)", "Delete SimpleName: getClass(1177)", "Delete MethodInvocation(1178)", "Delete MethodInvocation(1179)", "Delete ExpressionStatement(1180)", "Delete SimpleName: install(1181)", "Delete SimpleName: rootModule(1182)", "Delete MethodInvocation(1183)", "Delete ExpressionStatement(1184)", "Delete SimpleName: install(1185)", "Delete SimpleName: Modules(1186)", "Delete SimpleName: combine(1187)", "Delete SimpleName: moreModules(1188)", "Delete MethodInvocation(1189)", "Delete MethodInvocation(1190)", "Delete ExpressionStatement(1191)", "Delete Modifier: final(1192)", "Delete SimpleName: LifecycleShutdownSignal(1193)", "Delete SimpleType: LifecycleShutdownSignal(1194)", "Delete SimpleName: bootstrapLifecycleShutdownSignal(1195)", "Delete SimpleName: injector(1196)", "Delete SimpleName: getInstance(1197)", "Delete SimpleName: LifecycleShutdownSignal(1198)", "Delete SimpleType: LifecycleShutdownSignal(1199)", "Delete TypeLiteral(1200)", "Delete MethodInvocation(1201)", "Delete VariableDeclarationFragment(1202)", "Delete VariableDeclarationStatement(1203)", "Delete SimpleName: bind(1204)", "Delete SimpleName: LifecycleListener(1205)", "Delete SimpleType: LifecycleListener(1206)", "Delete TypeLiteral(1207)", "Delete MethodInvocation(1208)", "Delete SimpleName: annotatedWith(1209)", "Delete SimpleName: Names(1210)", "Delete SimpleName: named(1211)", "Delete StringLiteral: \"BootstrapLifecycleBridge\"(1212)", "Delete SimpleName: idCounter(1213)", "Delete SimpleName: incrementAndGet(1214)", "Delete MethodInvocation(1215)", "Delete InfixExpression: +(1216)", "Delete MethodInvocation(1217)", "Delete MethodInvocation(1218)", "Delete SimpleName: toInstance(1219)", "Delete SimpleName: DefaultLifecycleListener(1220)", "Delete SimpleType: DefaultLifecycleListener(1221)", "Delete SimpleName: Override(1222)", "Delete MarkerAnnotation(1223)", "Delete Modifier: public(1224)", "Delete PrimitiveType: void(1225)", "Delete SimpleName: onStopped(1226)", "Delete SimpleName: bootstrapLifecycleShutdownSignal(1227)", "Delete SimpleName: signal(1228)", "Delete MethodInvocation(1229)", "Delete ExpressionStatement(1230)", "Delete Block(1231)", "Delete MethodDeclaration(1232)", "Delete AnonymousClassDeclaration(1233)", "Delete ClassInstanceCreation(1234)", "Delete MethodInvocation(1235)", "Delete ExpressionStatement(1236)", "Delete Block(1237)", "Delete MethodDeclaration(1238)", "Delete AnonymousClassDeclaration(1239)", "Delete ClassInstanceCreation(1240)", "Delete MethodInvocation(1241)", "Delete SimpleName: with(1242)", "Delete SimpleName: overrideModules(1243)", "Delete MethodInvocation(1244)", "Delete ReturnStatement(1245)", "Delete Block(1246)", "Delete MethodDeclaration(1247)", "Delete TypeDeclaration: class(1248)"]}}, {"ClassPathConditionalModuleListProvider_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.ClassPathModuleListProvider", "DEL ImportDeclaration"]}]}}, {"ClassPathConditionalModuleListProvider_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.ClassPathModuleListProvider(10)", "Delete ImportDeclaration(11)"]}}], "commit_stats": [{"total_files": 12, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}