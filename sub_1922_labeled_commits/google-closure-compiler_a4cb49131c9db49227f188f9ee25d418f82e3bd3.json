{"application": "google-closure-compiler", "csha": "a4cb49131c9db49227f188f9ee25d418f82e3bd3", "files": [{"DefaultPassConfig_cluster": {"actions": [{"root": "INS ParenthesizedExpression to VariableDeclarationFragment at 1", "operations": ["INS ParenthesizedExpression to VariableDeclarationFragment at 1"]}, {"root": "INS ParenthesizedExpression to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to ParenthesizedExpression at 0", "INS ParenthesizedExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV ClassInstanceCreation to ParenthesizedExpression at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleName: compiler to ClassInstanceCreation at 1", "MOV SimpleType: J2clEqualitySameRewriterPass to ClassInstanceCreation at 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: List", "DEL SimpleName: getName", "DEL ParameterizedType: List<Node>", "DEL VariableDeclarationStatement", "DEL SimpleName: changedScopeNodes", "DEL VariableDeclarationFragment", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: compiler", "DEL SimpleType: Node", "DEL SimpleName: getChangedScopeNodesForPass", "DEL SimpleType: List"]}, {"root": "DEL SimpleName: changedScopeNodes", "operations": ["DEL SimpleName: changedScopeNodes"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: changedScopeNodes", "DEL ClassInstanceCreation"]}]}}, {"DefaultPassConfig_diff": {"operations": ["Insert ParenthesizedExpression(9446) into VariableDeclarationFragment(9447) at 1", "Insert ParenthesizedExpression(9457) into VariableDeclarationFragment(9458) at 1", "Move ClassInstanceCreation(9459) into ParenthesizedExpression(9446) at 0", "Insert ClassInstanceCreation(9456) into ParenthesizedExpression(9457) at 0", "Move SimpleType: J2clEqualitySameRewriterPass(9467) into ClassInstanceCreation(9456) at 0", "Move SimpleName: compiler(9468) into ClassInstanceCreation(9456) at 1", "Delete SimpleName: List(9428)", "Delete SimpleType: List(9429)", "Delete SimpleName: Node(9430)", "Delete SimpleType: Node(9431)", "Delete ParameterizedType: List<Node>(9432)", "Delete SimpleName: changedScopeNodes(9433)", "Delete SimpleName: compiler(9434)", "Delete SimpleName: getChangedScopeNodesForPass(9435)", "Delete SimpleName: getName(9436)", "Delete MethodInvocation(9437)", "Delete MethodInvocation(9438)", "Delete VariableDeclarationFragment(9439)", "Delete VariableDeclarationStatement(9440)", "Delete SimpleName: changedScopeNodes(9448)", "Delete SimpleName: changedScopeNodes(9469)", "Delete ClassInstanceCreation(9470)"]}}, {"FunctionToBlockMutator_cluster": {"actions": [{"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}]}}, {"FunctionToBlockMutator_diff": {"operations": ["Delete BooleanLiteral: false(624)", "Delete BooleanLiteral: false(636)"]}}, {"InlineFunctions_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: markFunctionsDeleted", "DEL ExpressionStatement", "DEL SimpleName: compiler", "DEL SimpleName: fn", "DEL SimpleName: getFunctionNode", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: NodeUtil"]}]}}, {"InlineFunctions_diff": {"operations": ["Delete SimpleName: NodeUtil(2528)", "Delete SimpleName: markFunctionsDeleted(2529)", "Delete SimpleName: fn(2530)", "Delete SimpleName: getFunctionNode(2531)", "Delete MethodInvocation(2532)", "Delete SimpleName: compiler(2533)", "Delete MethodInvocation(2534)", "Delete ExpressionStatement(2535)"]}}, {"J2clClinitPrunerPass_cluster": {"actions": [{"root": "UPDATE from Removes redundant clinit calls inside method body if it is guaranteed to be called earlier.  to Removes redundant clinit calls inside method body if it is guaranteed to be called earlier.", "operations": ["UPD TextElement: Removes redundant clinit calls inside method body if it is guaranteed to be called earlier.  from Removes redundant clinit calls inside method body if it is guaranteed to be called earlier.  to Removes redundant clinit calls inside method body if it is guaranteed to be called earlier."]}, {"root": "UPDATE from traverseEs6ScopeRoots to traverseEs6", "operations": ["UPD SimpleName: traverseEs6ScopeRoots from traverseEs6ScopeRoots to traverseEs6", "UPD SimpleName: traverseEs6ScopeRoots from traverseEs6ScopeRoots to traverseEs6", "UPD SimpleName: traverseEs6ScopeRoots from traverseEs6ScopeRoots to traverseEs6"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 4"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.javascript.jscomp.NodeTraversal.FunctionCallback"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: Node", "DEL Modifier: final", "DEL FieldDeclaration", "DEL ParameterizedType: List<Node>", "DEL SimpleType: List", "DEL VariableDeclarationFragment", "DEL SimpleName: changedScopeNodes", "DEL Modifier: private", "DEL SimpleName: List", "DEL SimpleName: Node"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: changedScopeNodes", "DEL SimpleName: Node", "DEL SimpleType: Node", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL ParameterizedType: List<Node>", "DEL SimpleName: List"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL FieldAccess", "DEL SimpleName: changedScopeNodes", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: changedScopeNodes"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: redundantClinitPruner", "DEL VariableDeclarationStatement", "DEL SimpleType: RedundantClinitPruner", "DEL SimpleName: RedundantClinitPruner"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getNonNestedParentScopeNodes"]}, {"root": "DEL SimpleName: redundantClinitPruner", "operations": ["DEL SimpleName: redundantClinitPruner"]}, {"root": "DEL SimpleName: redundantClinitPruner", "operations": ["DEL SimpleName: redundantClinitPruner"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL SimpleName: changedScopeNodes", "operations": ["DEL SimpleName: changedScopeNodes"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL SimpleName: changedScopeNodes", "operations": ["DEL SimpleName: changedScopeNodes"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: NodeUtil", "DEL SimpleName: removeNestedChangeScopeNodes", "DEL SimpleName: NodeUtil", "DEL InfixExpression: ==", "DEL Block", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleType: List", "DEL SimpleName: Node", "DEL SimpleName: List", "DEL SimpleName: getNonNestedParentScopeNodes", "DEL SimpleName: getParentChangeScopeNodes", "DEL SimpleName: changedScopeNodes", "DEL ConditionalExpression", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: changedScopeNodes", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL ParameterizedType: List<Node>", "DEL Modifier: private"]}, {"root": "DEL SimpleType: FunctionCallback", "operations": ["DEL SimpleName: FunctionCallback", "DEL SimpleType: FunctionCallback"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: clear", "DEL NullLiteral", "DEL SimpleName: fnRoot", "DEL SimpleName: clinitsCalledAtBranch", "DEL PrimitiveType: void", "DEL SimpleName: enterFunction", "DEL MethodInvocation", "DEL Block", "DEL ParameterizedType: HierarchicalSet<>", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: AbstractCompiler", "DEL ExpressionStatement", "DEL SimpleType: AbstractCompiler", "DEL SimpleName: Override", "DEL SimpleName: Node", "DEL SimpleName: compiler", "DEL SimpleType: HierarchicalSet", "DEL SimpleName: HierarchicalSet", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL SimpleName: stateStack"]}]}}, {"J2clClinitPrunerPass_diff": {"operations": ["Update TextElement: Removes redundant clinit calls inside method body if it is guaranteed to be called earlier. (181) to Removes redundant clinit calls inside method body if it is guaranteed to be called earlier.", "Update SimpleName: traverseEs6ScopeRoots(112) to traverseEs6", "Move ClassInstanceCreation(108) into MethodInvocation(83) at 4", "Update SimpleName: traverseEs6ScopeRoots(123) to traverseEs6", "Update SimpleName: traverseEs6ScopeRoots(134) to traverseEs6", "Delete QualifiedName: com.google.javascript.jscomp.NodeTraversal.FunctionCallback(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.List(20)", "Delete ImportDeclaration(21)", "Delete Modifier: private(46)", "Delete Modifier: final(47)", "Delete SimpleName: List(48)", "Delete SimpleType: List(49)", "Delete SimpleName: Node(50)", "Delete SimpleType: Node(51)", "Delete ParameterizedType: List<Node>(52)", "Delete SimpleName: changedScopeNodes(53)", "Delete VariableDeclarationFragment(54)", "Delete FieldDeclaration(55)", "Delete SimpleName: List(61)", "Delete SimpleType: List(62)", "Delete SimpleName: Node(63)", "Delete SimpleType: Node(64)", "Delete ParameterizedType: List<Node>(65)", "Delete SimpleName: changedScopeNodes(66)", "Delete SingleVariableDeclaration(67)", "Delete ThisExpression(74)", "Delete SimpleName: changedScopeNodes(75)", "Delete FieldAccess(76)", "Delete SimpleName: changedScopeNodes(77)", "Delete Assignment: =(78)", "Delete ExpressionStatement(79)", "Delete SimpleName: RedundantClinitPruner(103)", "Delete SimpleType: RedundantClinitPruner(104)", "Delete SimpleName: redundantClinitPruner(105)", "Delete VariableDeclarationFragment(109)", "Delete VariableDeclarationStatement(110)", "Delete SimpleName: getNonNestedParentScopeNodes(115)", "Delete MethodInvocation(116)", "Delete SimpleName: redundantClinitPruner(117)", "Delete SimpleName: redundantClinitPruner(118)", "Delete BooleanLiteral: true(119)", "Delete SimpleName: changedScopeNodes(126)", "Delete BooleanLiteral: false(130)", "Delete SimpleName: changedScopeNodes(137)", "Delete BooleanLiteral: false(141)", "Delete Modifier: private(159)", "Delete SimpleName: List(160)", "Delete SimpleType: List(161)", "Delete SimpleName: Node(162)", "Delete SimpleType: Node(163)", "Delete ParameterizedType: List<Node>(164)", "Delete SimpleName: getNonNestedParentScopeNodes(165)", "Delete SimpleName: changedScopeNodes(166)", "Delete NullLiteral(167)", "Delete InfixExpression: ==(168)", "Delete NullLiteral(169)", "Delete SimpleName: NodeUtil(170)", "Delete SimpleName: removeNestedChangeScopeNodes(171)", "Delete SimpleName: NodeUtil(172)", "Delete SimpleName: getParentChangeScopeNodes(173)", "Delete SimpleName: changedScopeNodes(174)", "Delete MethodInvocation(175)", "Delete MethodInvocation(176)", "Delete ConditionalExpression(177)", "Delete ReturnStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)", "Delete SimpleName: FunctionCallback(189)", "Delete SimpleType: FunctionCallback(190)", "Delete SimpleName: Override(191)", "Delete MarkerAnnotation(192)", "Delete Modifier: public(193)", "Delete PrimitiveType: void(194)", "Delete SimpleName: enterFunction(195)", "Delete SimpleName: AbstractCompiler(196)", "Delete SimpleType: AbstractCompiler(197)", "Delete SimpleName: compiler(198)", "Delete SingleVariableDeclaration(199)", "Delete SimpleName: Node(200)", "Delete SimpleType: Node(201)", "Delete SimpleName: fnRoot(202)", "Delete SingleVariableDeclaration(203)", "Delete SimpleName: clinitsCalledAtBranch(204)", "Delete SimpleName: HierarchicalSet(205)", "Delete SimpleType: HierarchicalSet(206)", "Delete ParameterizedType: HierarchicalSet<>(207)", "Delete NullLiteral(208)", "Delete ClassInstanceCreation(209)", "Delete Assignment: =(210)", "Delete ExpressionStatement(211)", "Delete SimpleName: stateStack(212)", "Delete SimpleName: clear(213)", "Delete MethodInvocation(214)", "Delete ExpressionStatement(215)", "Delete Block(216)", "Delete MethodDeclaration(217)"]}}, {"J2clConstantHoisterPass_cluster": {"actions": []}}, {"J2clConstantHoisterPass_diff": {"operations": []}}, {"J2clEqualitySameRewriterPass_cluster": {"actions": [{"root": "UPDATE from traverseEs6ScopeRoots to traverseEs6", "operations": ["UPD SimpleName: traverseEs6ScopeRoots from traverseEs6ScopeRoots to traverseEs6"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleName: List", "DEL Modifier: final", "DEL SimpleType: List", "DEL SimpleName: Node", "DEL ParameterizedType: List<Node>", "DEL SimpleName: changedScopeNodes", "DEL VariableDeclarationFragment", "DEL SimpleType: Node", "DEL Modifier: private"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: changedScopeNodes", "DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: Node", "DEL SimpleName: List", "DEL SimpleType: List", "DEL ParameterizedType: List<Node>"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: changedScopeNodes", "DEL SimpleName: changedScopeNodes"]}, {"root": "DEL SimpleName: changedScopeNodes", "operations": ["DEL SimpleName: changedScopeNodes"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}]}}, {"J2clEqualitySameRewriterPass_diff": {"operations": ["Update SimpleName: traverseEs6ScopeRoots(95) to traverseEs6", "Delete QualifiedName: java.util.List(8)", "Delete ImportDeclaration(9)", "Delete Modifier: private(37)", "Delete Modifier: final(38)", "Delete SimpleName: List(39)", "Delete SimpleType: List(40)", "Delete SimpleName: Node(41)", "Delete SimpleType: Node(42)", "Delete ParameterizedType: List<Node>(43)", "Delete SimpleName: changedScopeNodes(44)", "Delete VariableDeclarationFragment(45)", "Delete FieldDeclaration(46)", "Delete SimpleName: List(52)", "Delete SimpleType: List(53)", "Delete SimpleName: Node(54)", "Delete SimpleType: Node(55)", "Delete ParameterizedType: List<Node>(56)", "Delete SimpleName: changedScopeNodes(57)", "Delete SingleVariableDeclaration(58)", "Delete ThisExpression(65)", "Delete SimpleName: changedScopeNodes(66)", "Delete FieldAccess(67)", "Delete SimpleName: changedScopeNodes(68)", "Delete Assignment: =(69)", "Delete ExpressionStatement(70)", "Delete SimpleName: changedScopeNodes(98)", "Delete BooleanLiteral: false(100)"]}}, {"MakeDeclaredNamesUnique_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 4", "MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: markChanges", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL Modifier: final", "DEL Modifier: private"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ConstructorInvocation", "DEL SimpleName: MakeDeclaredNamesUnique", "DEL SimpleName: renamer", "DEL SingleVariableDeclaration", "DEL SimpleName: renamer", "DEL SimpleName: Renamer", "DEL BooleanLiteral: true", "DEL Block", "DEL SimpleType: Renamer", "DEL MethodDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: markChanges"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: markChanges", "DEL ExpressionStatement", "DEL SimpleName: markChanges", "DEL FieldAccess"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block", "DEL SimpleName: markChanges"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: markChanges", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: markChanges", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: markChanges", "DEL SimpleName: markChanges", "DEL ExpressionStatement", "DEL ThisExpression"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL Block", "DEL SimpleName: markChanges"]}]}}, {"MakeDeclaredNamesUnique_diff": {"operations": ["Move ExpressionStatement(553) into Block(541) at 3", "Move IfStatement(570) into Block(541) at 4", "Move Block(1205) into EnhancedForStatement(1158) at 2", "Move ExpressionStatement(1170) into Block(1157) at 0", "Move ExpressionStatement(1175) into Block(1157) at 1", "Delete QualifiedName: com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter(20)", "Delete ImportDeclaration(21)", "Delete Modifier: private(85)", "Delete Modifier: final(86)", "Delete PrimitiveType: boolean(87)", "Delete SimpleName: markChanges(88)", "Delete VariableDeclarationFragment(89)", "Delete FieldDeclaration(90)", "Delete BooleanLiteral: true(95)", "Delete SimpleName: MakeDeclaredNamesUnique(99)", "Delete SimpleName: Renamer(100)", "Delete SimpleType: Renamer(101)", "Delete SimpleName: renamer(102)", "Delete SingleVariableDeclaration(103)", "Delete SimpleName: renamer(104)", "Delete BooleanLiteral: true(105)", "Delete ConstructorInvocation(106)", "Delete Block(107)", "Delete MethodDeclaration(108)", "Delete PrimitiveType: boolean(114)", "Delete SimpleName: markChanges(115)", "Delete SingleVariableDeclaration(116)", "Delete ThisExpression(123)", "Delete SimpleName: markChanges(124)", "Delete FieldAccess(125)", "Delete SimpleName: markChanges(126)", "Delete Assignment: =(127)", "Delete ExpressionStatement(128)", "Delete BooleanLiteral: true(142)", "Delete SimpleName: markChanges(549)", "Delete Block(571)", "Delete IfStatement(572)", "Delete Modifier: private(894)", "Delete Modifier: final(895)", "Delete PrimitiveType: boolean(896)", "Delete SimpleName: markChanges(897)", "Delete VariableDeclarationFragment(898)", "Delete FieldDeclaration(899)", "Delete PrimitiveType: boolean(906)", "Delete SimpleName: markChanges(907)", "Delete SingleVariableDeclaration(908)", "Delete ThisExpression(915)", "Delete SimpleName: markChanges(916)", "Delete FieldAccess(917)", "Delete SimpleName: markChanges(918)", "Delete Assignment: =(919)", "Delete ExpressionStatement(920)", "Delete SimpleName: markChanges(1176)", "Delete IfStatement(1206)", "Delete Block(1207)"]}}, {"NodeTraversal_cluster": {"actions": [{"root": "UPDATE from Traverses *just* the contents of provided scope nodes (and optionally scopes nested within to Traverses *just* the contents of provided scope nodes (but not scopes nested within them) but", "operations": ["UPD TextElement: Traverses *just* the contents of provided scope nodes (and optionally scopes nested within from Traverses *just* the contents of provided scope nodes (and optionally scopes nested within to Traverses *just* the contents of provided scope nodes (but not scopes nested within them) but"]}, {"root": "UPDATE from them) but will fall back on traversing the entire AST from root if a null scope nodes list is to will fall back on traversing the entire AST from root if a null scope nodes list is provided.", "operations": ["UPD TextElement: them) but will fall back on traversing the entire AST from root if a null scope nodes list is from them) but will fall back on traversing the entire AST from root if a null scope nodes list is to will fall back on traversing the entire AST from root if a null scope nodes list is provided."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Node", "DEL Modifier: final", "DEL SimpleName: Callback", "DEL SimpleName: Node", "DEL ParameterizedType: List<Node>", "DEL MethodDeclaration", "DEL TextElement: them) but will fall back on traversing the entire AST from root if a null scope nodes list is", "DEL TagElement", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL SimpleName: compiler", "DEL SimpleName: Node", "DEL SimpleName: compiler", "DEL SingleVariableDeclaration", "DEL SimpleName: traverseNested", "DEL Javadoc", "DEL SimpleType: Node", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TextElement: provided.", "DEL SingleVariableDeclaration", "DEL SimpleName: traverseNested", "DEL SingleVariableDeclaration", "DEL SimpleName: scopeNodes", "DEL SimpleName: root", "DEL Modifier: static", "DEL SimpleName: cb", "DEL SimpleType: List", "DEL SimpleName: traverseEs6ScopeRoots", "DEL SimpleName: root", "DEL Modifier: public", "DEL Block", "DEL TextElement: Traverses *just* the contents of provided scope nodes (and optionally scopes nested within", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleType: AbstractCompiler", "DEL SimpleName: List", "DEL NullLiteral", "DEL SimpleName: scopeNodes", "DEL SingleVariableDeclaration", "DEL SimpleName: traverseEs6ScopeRoots", "DEL SimpleName: cb", "DEL SimpleType: Callback", "DEL SimpleName: AbstractCompiler"]}, {"root": "DEL TextElement: provided. Also allows for a callback to notify when starting on one of the provided scope", "operations": ["DEL TextElement: provided. Also allows for a callback to notify when starting on one of the provided scope"]}, {"root": "DEL TextElement: nodes.", "operations": ["DEL TextElement: nodes."]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: FunctionCallback", "DEL SingleVariableDeclaration", "DEL SimpleName: FunctionCallback", "DEL SimpleName: fcb", "DEL Modifier: final"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: fcb", "DEL IfStatement", "DEL SimpleName: enterFunction", "DEL SimpleName: compiler", "DEL SimpleName: scopeNode", "DEL SimpleName: fcb", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block"]}]}}, {"NodeTraversal_diff": {"operations": ["Update TextElement: Traverses *just* the contents of provided scope nodes (and optionally scopes nested within(1438) to Traverses *just* the contents of provided scope nodes (but not scopes nested within them) but", "Update TextElement: them) but will fall back on traversing the entire AST from root if a null scope nodes list is(1439) to will fall back on traversing the entire AST from root if a null scope nodes list is provided.", "Delete TextElement: Traverses *just* the contents of provided scope nodes (and optionally scopes nested within(1394)", "Delete TextElement: them) but will fall back on traversing the entire AST from root if a null scope nodes list is(1395)", "Delete TextElement: provided.(1396)", "Delete TagElement(1397)", "Delete Javadoc(1398)", "Delete Modifier: public(1399)", "Delete Modifier: static(1400)", "Delete PrimitiveType: void(1401)", "Delete SimpleName: traverseEs6ScopeRoots(1402)", "Delete SimpleName: AbstractCompiler(1403)", "Delete SimpleType: AbstractCompiler(1404)", "Delete SimpleName: compiler(1405)", "Delete SingleVariableDeclaration(1406)", "Delete SimpleName: Node(1407)", "Delete SimpleType: Node(1408)", "Delete SimpleName: root(1409)", "Delete SingleVariableDeclaration(1410)", "Delete SimpleName: List(1411)", "Delete SimpleType: List(1412)", "Delete SimpleName: Node(1413)", "Delete SimpleType: Node(1414)", "Delete ParameterizedType: List<Node>(1415)", "Delete SimpleName: scopeNodes(1416)", "Delete SingleVariableDeclaration(1417)", "Delete Modifier: final(1418)", "Delete SimpleName: Callback(1419)", "Delete SimpleType: Callback(1420)", "Delete SimpleName: cb(1421)", "Delete SingleVariableDeclaration(1422)", "Delete Modifier: final(1423)", "Delete PrimitiveType: boolean(1424)", "Delete SimpleName: traverseNested(1425)", "Delete SingleVariableDeclaration(1426)", "Delete SimpleName: traverseEs6ScopeRoots(1427)", "Delete SimpleName: compiler(1428)", "Delete SimpleName: root(1429)", "Delete SimpleName: scopeNodes(1430)", "Delete SimpleName: cb(1431)", "Delete NullLiteral(1432)", "Delete SimpleName: traverseNested(1433)", "Delete MethodInvocation(1434)", "Delete ExpressionStatement(1435)", "Delete Block(1436)", "Delete MethodDeclaration(1437)", "Delete TextElement: provided. Also allows for a callback to notify when starting on one of the provided scope(1440)", "Delete TextElement: nodes.(1441)", "Delete Modifier: final(1468)", "Delete SimpleName: FunctionCallback(1469)", "Delete SimpleType: FunctionCallback(1470)", "Delete SimpleName: fcb(1471)", "Delete SingleVariableDeclaration(1472)", "Delete SimpleName: fcb(1506)", "Delete NullLiteral(1507)", "Delete InfixExpression: !=(1508)", "Delete SimpleName: fcb(1509)", "Delete SimpleName: enterFunction(1510)", "Delete SimpleName: compiler(1511)", "Delete SimpleName: scopeNode(1512)", "Delete MethodInvocation(1513)", "Delete ExpressionStatement(1514)", "Delete Block(1515)", "Delete IfStatement(1516)"]}}, {"Normalize_cluster": {"actions": []}}, {"Normalize_diff": {"operations": []}}, {"PeepholeFoldConstants_cluster": {"actions": [{"root": "UPDATE from NodeUtil to n", "operations": ["UPD SimpleName: NodeUtil from NodeUtil to n", "UPD SimpleName: NodeUtil from NodeUtil to n"]}, {"root": "DEL SimpleName: n", "operations": ["DEL SimpleName: n"]}, {"root": "DEL SimpleName: compiler", "operations": ["DEL SimpleName: compiler"]}, {"root": "DEL SimpleName: n", "operations": ["DEL SimpleName: n"]}, {"root": "DEL SimpleName: compiler", "operations": ["DEL SimpleName: compiler"]}]}}, {"PeepholeFoldConstants_diff": {"operations": ["Update SimpleName: NodeUtil(1672) to n", "Update SimpleName: NodeUtil(1650) to n", "Delete SimpleName: n(1652)", "Delete SimpleName: compiler(1653)", "Delete SimpleName: n(1674)", "Delete SimpleName: compiler(1675)"]}}, {"PeepholeRemoveDeadCode_cluster": {"actions": [{"root": "INS ForStatement to Block at 11", "operations": ["INS InfixExpression: != to ForStatement at 1", "INS SimpleType: Node to VariableDeclarationExpression at 0", "INS SimpleName: child to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS Assignment: = to ForStatement at 2", "INS SimpleName: child to InfixExpression: != at 0", "INS Block to ForStatement at 3", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: n to MethodInvocation at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS ForStatement to Block at 11", "INS SimpleName: child to VariableDeclarationFragment at 0", "INS SimpleName: child to MethodInvocation at 0", "INS SimpleName: getNext to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Node to SimpleType: Node at 0"]}, {"root": "INS ExpressionStatement to Block at 12", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 12", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: detachChildren to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from detachChildren to markFunctionsDeleted", "operations": ["UPD SimpleName: detachChildren from detachChildren to markFunctionsDeleted"]}, {"root": "UPDATE from n to child", "operations": ["UPD SimpleName: n from n to child"]}]}}, {"PeepholeRemoveDeadCode_diff": {"operations": ["Insert ForStatement(2793) into Block(2828) at 11", "Insert ExpressionStatement(2797) into Block(2828) at 12", "Insert VariableDeclarationExpression(2777) into ForStatement(2793) at 0", "Insert InfixExpression: !=(2780) into ForStatement(2793) at 1", "Insert Assignment: =(2785) into ForStatement(2793) at 2", "Insert Block(2792) into ForStatement(2793) at 3", "Insert MethodInvocation(2796) into ExpressionStatement(2797) at 0", "Insert SimpleType: Node(2771) into VariableDeclarationExpression(2777) at 0", "Insert VariableDeclarationFragment(2776) into VariableDeclarationExpression(2777) at 1", "Insert SimpleName: child(2778) into InfixExpression: !=(2780) at 0", "Insert NullLiteral(2779) into InfixExpression: !=(2780) at 1", "Insert SimpleName: child(2781) into Assignment: =(2785) at 0", "Insert MethodInvocation(2784) into Assignment: =(2785) at 1", "Move ExpressionStatement(2775) into Block(2792) at 0", "Insert SimpleName: n(2794) into MethodInvocation(2796) at 0", "Insert SimpleName: detachChildren(2795) into MethodInvocation(2796) at 1", "Insert SimpleName: Node(2770) into SimpleType: Node(2771) at 0", "Insert SimpleName: child(2772) into VariableDeclarationFragment(2776) at 0", "Insert MethodInvocation(2775) into VariableDeclarationFragment(2776) at 1", "Insert SimpleName: child(2782) into MethodInvocation(2784) at 0", "Insert SimpleName: getNext(2783) into MethodInvocation(2784) at 1", "Insert SimpleName: n(2773) into MethodInvocation(2775) at 0", "Insert SimpleName: getFirstChild(2774) into MethodInvocation(2775) at 1", "Update SimpleName: detachChildren(2771) to markFunctionsDeleted", "Update SimpleName: n(2772) to child"]}}, {"RenameLabels_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleName: markChanges", "DEL Modifier: final", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SimpleName: markChanges", "DEL SingleVariableDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: markChanges", "DEL ThisExpression", "DEL SimpleName: markChanges", "DEL ExpressionStatement", "DEL FieldAccess", "DEL Assignment: ="]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: markChanges", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL FieldDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: markChanges"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: markChanges", "DEL SimpleName: markChanges", "DEL ThisExpression"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: markChanges", "DEL IfStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: markChanges", "DEL Block", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL SimpleName: markChanges", "DEL IfStatement"]}, {"root": "DEL SimpleName: markChanges", "operations": ["DEL SimpleName: markChanges"]}]}}, {"RenameLabels_diff": {"operations": ["Move ExpressionStatement(684) into Block(647) at 4", "Move ExpressionStatement(645) into Block(611) at 1", "Move ExpressionStatement(554) into Block(523) at 1", "Delete Modifier: private(82)", "Delete Modifier: final(83)", "Delete PrimitiveType: boolean(84)", "Delete SimpleName: markChanges(85)", "Delete VariableDeclarationFragment(86)", "Delete FieldDeclaration(87)", "Delete BooleanLiteral: true(99)", "Delete PrimitiveType: boolean(118)", "Delete SimpleName: markChanges(119)", "Delete SingleVariableDeclaration(120)", "Delete ThisExpression(139)", "Delete SimpleName: markChanges(140)", "Delete FieldAccess(141)", "Delete SimpleName: markChanges(142)", "Delete Assignment: =(143)", "Delete ExpressionStatement(144)", "Delete Modifier: private(215)", "Delete Modifier: final(216)", "Delete PrimitiveType: boolean(217)", "Delete SimpleName: markChanges(218)", "Delete VariableDeclarationFragment(219)", "Delete FieldDeclaration(220)", "Delete PrimitiveType: boolean(222)", "Delete SimpleName: markChanges(223)", "Delete SingleVariableDeclaration(224)", "Delete ThisExpression(225)", "Delete SimpleName: markChanges(226)", "Delete FieldAccess(227)", "Delete SimpleName: markChanges(228)", "Delete Assignment: =(229)", "Delete ExpressionStatement(230)", "Delete SimpleName: markChanges(550)", "Delete Block(555)", "Delete IfStatement(556)", "Delete SimpleName: markChanges(641)", "Delete Block(646)", "Delete IfStatement(647)", "Delete SimpleName: markChanges(680)", "Delete Block(685)", "Delete IfStatement(686)", "Delete SimpleName: markChanges(766)"]}}], "commit_stats": [{"total_files": 16, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}