{"application": "apache-commons-bcel", "csha": "763333c2572c5ebcb8f1d09c32876da987741c54", "files": [{"Constants_cluster": {"actions": [{"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS Javadoc to FieldDeclaration at 0", "INS TextElement: The names of the referencd_kinds of a CONSTANT_MethodHandle_info.  to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "UPDATE from REF_NAMES to METHODHANDLE_NAMES", "operations": ["UPD SimpleName: REF_NAMES from REF_NAMES to METHODHANDLE_NAMES"]}, {"root": "UPDATE from 5 to 4", "operations": ["UPD NumberLiteral: 5 from 5 to 4"]}, {"root": "INS StringLiteral: \"\" to ArrayInitializer at 0", "operations": ["INS StringLiteral: \"\" to ArrayInitializer at 0"]}, {"root": "UPDATE from \"getfield\" to \"getField\"", "operations": ["UPD StringLiteral: \"getfield\" from \"getfield\" to \"getField\""]}, {"root": "UPDATE from \"getstatic\" to \"getStatic\"", "operations": ["UPD StringLiteral: \"getstatic\" from \"getstatic\" to \"getStatic\""]}, {"root": "UPDATE from \"putfield\" to \"putField\"", "operations": ["UPD StringLiteral: \"putfield\" from \"putfield\" to \"putField\""]}, {"root": "UPDATE from \"putstatic\" to \"putStatic\"", "operations": ["UPD StringLiteral: \"putstatic\" from \"putstatic\" to \"putStatic\""]}, {"root": "UPDATE from \"invokevirtual\" to \"invokeVirtual\"", "operations": ["UPD StringLiteral: \"invokevirtual\" from \"invokevirtual\" to \"invokeVirtual\""]}, {"root": "UPDATE from \"invokestatic\" to \"invokeStatic\"", "operations": ["UPD StringLiteral: \"invokestatic\" from \"invokestatic\" to \"invokeStatic\""]}, {"root": "UPDATE from \"invokespecial\" to \"invokeSpecial\"", "operations": ["UPD StringLiteral: \"invokespecial\" from \"invokespecial\" to \"invokeSpecial\""]}, {"root": "UPDATE from \"new dup invokespecial\" to \"newInvokeSpecial\"", "operations": ["UPD StringLiteral: \"new dup invokespecial\" from \"new dup invokespecial\" to \"newInvokeSpecial\""]}, {"root": "UPDATE from \"invokeinterface\" to \"invokeInterface\"", "operations": ["UPD StringLiteral: \"invokeinterface\" from \"invokeinterface\" to \"invokeInterface\""]}]}}, {"Constants_diff": {"operations": ["Insert Javadoc(6257) into FieldDeclaration(6278) at 0", "Insert TagElement(6256) into Javadoc(6257) at 0", "Update SimpleName: REF_NAMES(6262) to METHODHANDLE_NAMES", "Update NumberLiteral: 5(4478) to 4", "Insert TextElement: The names of the referencd_kinds of a CONSTANT_MethodHandle_info. (6255) into TagElement(6256) at 0", "Insert StringLiteral: \"\"(6266) into ArrayInitializer(6276) at 0", "Update StringLiteral: \"getfield\"(6263) to \"getField\"", "Update StringLiteral: \"getstatic\"(6264) to \"getStatic\"", "Update StringLiteral: \"putfield\"(6265) to \"putField\"", "Update StringLiteral: \"putstatic\"(6266) to \"putStatic\"", "Update StringLiteral: \"invokevirtual\"(6267) to \"invokeVirtual\"", "Update StringLiteral: \"invokestatic\"(6268) to \"invokeStatic\"", "Update StringLiteral: \"invokespecial\"(6269) to \"invokeSpecial\"", "Update StringLiteral: \"new dup invokespecial\"(6270) to \"newInvokeSpecial\"", "Update StringLiteral: \"invokeinterface\"(6271) to \"invokeInterface\""]}}, {"BootstrapMethod_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: org.apache.bcel.Constants to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleName: num_bootstrap_arguments to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS TextElement:  int index into constant_pool of CONSTANT_MethodHandle to TagElement: @param at 1", "INS SimpleName: num_bootstrap_arguments to TagElement: @param at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS TextElement:  int[] indices into constant_pool of CONSTANT_<type>_info to TagElement: @param at 1", "INS SimpleName: num_bootstrap_arguments to FieldAccess at 1", "INS Javadoc to MethodDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS PrimitiveType: int to ArrayType: int[] at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: bootstrap_arguments to SingleVariableDeclaration at 1", "INS SimpleName: bootstrap_arguments to FieldAccess at 1", "INS TagElement: @param to Javadoc at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bootstrap_method_ref to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS TagElement: @param to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS TextElement:  int count of number of boostrap arguments to TagElement: @param at 1", "INS SimpleName: bootstrap_method_ref to Assignment: = at 1", "INS SimpleName: bootstrap_method_ref to TagElement: @param at 0", "INS SimpleName: bootstrap_method_ref to SingleVariableDeclaration at 1", "INS SimpleName: BootstrapMethod to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ArrayType: int[] to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bootstrap_arguments to TagElement: @param at 0", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: num_bootstrap_arguments to SingleVariableDeclaration at 1", "INS SimpleName: num_bootstrap_arguments to Assignment: = at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: bootstrap_arguments to Assignment: = at 1", "INS Dimension to ArrayType: int[] at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: getNumBootstrapArguments to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement:  count of number of boostrap arguments to TagElement: @return at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: int to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 0", "INS SimpleName: num_bootstrap_arguments to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS TextElement:  String representation. to TagElement: @return at 0", "INS StringLiteral: \", \" to InfixExpression: + at 2", "INS ReturnStatement to Block at 0", "INS StringLiteral: \"BootstrapMethod(\" to InfixExpression: + at 0", "INS StringLiteral: \", \" to InfixExpression: + at 4", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS StringLiteral: \"UNDONE)\" to InfixExpression: + at 5", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 2", "INS InfixExpression: + to ReturnStatement at 0", "INS Modifier: final to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS Block to MethodDeclaration at 6", "INS SimpleType: String to MethodDeclaration at 4", "INS SimpleName: toString to MethodDeclaration at 5", "INS TagElement: @return to Javadoc at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: bootstrap_method_ref to InfixExpression: + at 1", "INS SimpleName: num_bootstrap_arguments to InfixExpression: + at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS StringLiteral: \": \" to MethodInvocation at 2", "INS Block to MethodDeclaration at 6", "INS SimpleName: bootstrap_method_name to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 5", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: constant_pool to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bootstrap_method_name to VariableDeclarationFragment at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: > to IfStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: num_bootstrap_arguments to InfixExpression: > at 0", "INS SimpleName: constantToString to MethodInvocation at 1", "INS IfStatement to Block at 4", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getConstant to MethodInvocation at 1", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: num_bootstrap_arguments to InfixExpression: < at 1", "INS TagElement: @return to Javadoc at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: bootstrap_method_ref to MethodInvocation at 2", "INS SimpleName: ConstantPool to SimpleType: ConstantPool at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ConstantPool to SingleVariableDeclaration at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: bootstrap_method_name to Assignment: = at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: constant_pool to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: toString to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS StringLiteral: \"\\n     Method Arguments:\" to MethodInvocation at 2", "INS QualifiedName: Constants.CONSTANT_MethodHandle to MethodInvocation at 3", "INS SimpleName: Utility to MethodInvocation at 0", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleType: String to MethodDeclaration at 3", "INS Block to ForStatement at 3", "INS SimpleName: constant_pool to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: i to MethodInvocation at 2", "INS SimpleName: constantToString to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS TextElement:  Resolved string representation to TagElement: @return at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: constant_pool to MethodInvocation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS Javadoc to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: append to MethodInvocation at 1", "INS Modifier: final to MethodDeclaration at 2", "INS SimpleName: compactClassName to MethodInvocation at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: bootstrap_arguments to ArrayAccess at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS StringLiteral: \"\\n     \" to MethodInvocation at 2", "INS ForStatement to Block at 1", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement: Initialize from another object. to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: BootstrapMethod to SingleVariableDeclaration at 0", "INS SimpleName: BootstrapMethod to SimpleType: BootstrapMethod at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: c to SingleVariableDeclaration at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @return to Javadoc at 0", "INS TextElement:  index into constant_pool of bootstrap_method to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @param to Javadoc at 0", "INS TextElement:  int index into constant_pool of CONSTANT_MethodHandle to TagElement: @param at 1", "INS SimpleName: bootstrap_method_ref to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @return to Javadoc at 0", "INS TextElement:  int[] of bootstrap_method indices into constant_pool of CONSTANT_<type>_info to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @param to Javadoc at 0", "INS TextElement:  int[] indices into constant_pool of CONSTANT_<type>_info to TagElement: @param at 1", "INS SimpleName: bootstrap_arguments to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS TextElement: This class represents a bootstrap method attribute, i.e., the bootstrap to TagElement at 0", "operations": ["INS TextElement: This class represents a bootstrap method attribute, i.e., the bootstrap to TagElement at 0"]}, {"root": "UPDATE from Entry of the bootstrap_methods table. to method ref, the number of bootstrap arguments and an array of the", "operations": ["UPD TextElement: Entry of the bootstrap_methods table. from Entry of the bootstrap_methods table. to method ref, the number of bootstrap arguments and an array of the"]}, {"root": "INS TextElement: bootstrap arguments. to TagElement at 2", "operations": ["INS TextElement: bootstrap arguments. to TagElement at 2"]}, {"root": "INS ConstructorInvocation to Block at 0", "operations": ["INS SimpleName: getBootstrapMethodRef to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 0", "INS MethodInvocation to ConstructorInvocation at 2", "INS SimpleName: getBootstrapArguments to MethodInvocation at 1", "INS SimpleName: getNumBootstrapArguments to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 0", "INS SimpleName: c to MethodInvocation at 0", "INS MethodInvocation to ConstructorInvocation at 1", "INS ConstructorInvocation to Block at 0", "INS MethodInvocation to ConstructorInvocation at 0"]}, {"root": "INS ConstructorInvocation to Block at 0", "operations": ["INS ConstructorInvocation to Block at 0", "INS NullLiteral to CastExpression at 1", "INS CastExpression to ConstructorInvocation at 2"]}, {"root": "MOVE from ConstructorInvocation", "operations": ["MOV MethodInvocation to ConstructorInvocation at 0"]}, {"root": "MOVE from ConstructorInvocation", "operations": ["MOV MethodInvocation to ConstructorInvocation at 1"]}, {"root": "UPDATE from Dump object to file stream on binary format. to Dump object to file stream in binary format.", "operations": ["UPD TextElement: Dump object to file stream on binary format. from Dump object to file stream on binary format. to Dump object to file stream in binary format."]}, {"root": "MOVE from CastExpression", "operations": ["MOV ArrayType: int[] to CastExpression at 0"]}, {"root": "UPDATE from num_bootstrap_methods to num_bootstrap_arguments", "operations": ["UPD SimpleName: num_bootstrap_methods from num_bootstrap_methods to num_bootstrap_arguments", "UPD SimpleName: num_bootstrap_methods from num_bootstrap_methods to num_bootstrap_arguments"]}, {"root": "INS ArrayType: int[] to ArrayCreation at 0", "operations": ["INS ArrayType: int[] to ArrayCreation at 0", "INS Dimension to ArrayType: int[] at 1", "INS PrimitiveType: int to ArrayType: int[] at 0"]}, {"root": "DEL TagElement: @throws", "operations": ["DEL SimpleName: ClassFormatException", "DEL TagElement: @throws"]}, {"root": "DEL SimpleType: ClassFormatException", "operations": ["DEL SimpleName: ClassFormatException", "DEL SimpleType: ClassFormatException"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: bootstrap_method_ref", "DEL Assignment: ="]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: num_bootstrap_methods", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int"]}]}}, {"BootstrapMethod_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(430) at 5", "Insert QualifiedName: org.apache.bcel.Constants(10) into ImportDeclaration(11) at 0", "Insert FieldDeclaration(48) into TypeDeclaration: class(429) at 7", "Insert MethodDeclaration(179) into TypeDeclaration: class(429) at 11", "Insert MethodDeclaration(229) into TypeDeclaration: class(429) at 15", "Insert MethodDeclaration(269) into TypeDeclaration: class(429) at 17", "Insert MethodDeclaration(362) into TypeDeclaration: class(429) at 18", "Insert Modifier: private(44) into FieldDeclaration(48) at 0", "Insert PrimitiveType: int(45) into FieldDeclaration(48) at 1", "Insert VariableDeclarationFragment(47) into FieldDeclaration(48) at 2", "Insert Javadoc(61) into MethodDeclaration(79) at 0", "Insert SingleVariableDeclaration(67) into MethodDeclaration(79) at 3", "Insert Javadoc(146) into MethodDeclaration(179) at 0", "Insert Modifier: public(147) into MethodDeclaration(179) at 1", "Insert SimpleName: BootstrapMethod(148) into MethodDeclaration(179) at 2", "Insert SingleVariableDeclaration(151) into MethodDeclaration(179) at 3", "Insert SingleVariableDeclaration(154) into MethodDeclaration(179) at 4", "Insert SingleVariableDeclaration(159) into MethodDeclaration(179) at 5", "Insert Block(178) into MethodDeclaration(179) at 6", "Insert Javadoc(182) into MethodDeclaration(189) at 0", "Insert Javadoc(193) into MethodDeclaration(207) at 0", "Insert Javadoc(210) into MethodDeclaration(219) at 0", "Insert Javadoc(222) into MethodDeclaration(229) at 0", "Insert Modifier: public(223) into MethodDeclaration(229) at 1", "Insert PrimitiveType: int(224) into MethodDeclaration(229) at 2", "Insert SimpleName: getNumBootstrapArguments(225) into MethodDeclaration(229) at 3", "Insert Block(228) into MethodDeclaration(229) at 4", "Insert Javadoc(233) into MethodDeclaration(249) at 0", "Insert Javadoc(252) into MethodDeclaration(269) at 0", "Insert MarkerAnnotation(254) into MethodDeclaration(269) at 1", "Insert Modifier: public(255) into MethodDeclaration(269) at 2", "Insert Modifier: final(256) into MethodDeclaration(269) at 3", "Insert SimpleType: String(258) into MethodDeclaration(269) at 4", "Insert SimpleName: toString(259) into MethodDeclaration(269) at 5", "Insert Block(268) into MethodDeclaration(269) at 6", "Insert Javadoc(272) into MethodDeclaration(362) at 0", "Insert Modifier: public(273) into MethodDeclaration(362) at 1", "Insert Modifier: final(274) into MethodDeclaration(362) at 2", "Insert SimpleType: String(276) into MethodDeclaration(362) at 3", "Insert SimpleName: toString(277) into MethodDeclaration(362) at 4", "Insert SingleVariableDeclaration(281) into MethodDeclaration(362) at 5", "Insert Block(361) into MethodDeclaration(362) at 6", "Insert TextElement: This class represents a bootstrap method attribute, i.e., the bootstrap(12) into TagElement(15) at 0", "Update TextElement: Entry of the bootstrap_methods table.(10) to method ref, the number of bootstrap arguments and an array of the", "Insert TextElement: bootstrap arguments.(14) into TagElement(15) at 2", "Insert SimpleName: num_bootstrap_arguments(46) into VariableDeclarationFragment(47) at 0", "Insert TagElement(60) into Javadoc(61) at 0", "Insert SimpleType: BootstrapMethod(65) into SingleVariableDeclaration(67) at 0", "Insert SimpleName: c(66) into SingleVariableDeclaration(67) at 1", "Insert ConstructorInvocation(77) into Block(78) at 0", "Insert ConstructorInvocation(106) into Block(135) at 0", "Insert TagElement: @param(139) into Javadoc(146) at 0", "Insert TagElement: @param(142) into Javadoc(146) at 1", "Insert TagElement: @param(145) into Javadoc(146) at 2", "Insert PrimitiveType: int(149) into SingleVariableDeclaration(151) at 0", "Insert SimpleName: bootstrap_method_ref(150) into SingleVariableDeclaration(151) at 1", "Insert PrimitiveType: int(152) into SingleVariableDeclaration(154) at 0", "Insert SimpleName: num_bootstrap_arguments(153) into SingleVariableDeclaration(154) at 1", "Insert ArrayType: int[](157) into SingleVariableDeclaration(159) at 0", "Insert SimpleName: bootstrap_arguments(158) into SingleVariableDeclaration(159) at 1", "Insert ExpressionStatement(165) into Block(178) at 0", "Insert ExpressionStatement(171) into Block(178) at 1", "Insert ExpressionStatement(177) into Block(178) at 2", "Insert TagElement: @return(181) into Javadoc(182) at 0", "Insert TagElement: @param(192) into Javadoc(193) at 0", "Insert TagElement: @return(209) into Javadoc(210) at 0", "Insert TagElement: @return(221) into Javadoc(222) at 0", "Insert ReturnStatement(227) into Block(228) at 0", "Insert TagElement: @param(232) into Javadoc(233) at 0", "Insert TagElement: @return(251) into Javadoc(252) at 0", "Insert SimpleName: Override(253) into MarkerAnnotation(254) at 0", "Insert SimpleName: String(257) into SimpleType: String(258) at 0", "Insert ReturnStatement(267) into Block(268) at 0", "Insert TagElement: @return(271) into Javadoc(272) at 0", "Insert SimpleName: String(275) into SimpleType: String(276) at 0", "Insert SimpleType: ConstantPool(279) into SingleVariableDeclaration(281) at 0", "Insert SimpleName: constant_pool(280) into SingleVariableDeclaration(281) at 1", "Insert VariableDeclarationStatement(289) into Block(361) at 0", "Insert VariableDeclarationStatement(294) into Block(361) at 1", "Insert ExpressionStatement(302) into Block(361) at 2", "Insert ExpressionStatement(310) into Block(361) at 3", "Insert IfStatement(356) into Block(361) at 4", "Insert ReturnStatement(360) into Block(361) at 5", "Insert TextElement: Initialize from another object.(59) into TagElement(60) at 0", "Insert SimpleName: BootstrapMethod(64) into SimpleType: BootstrapMethod(65) at 0", "Insert MethodInvocation(70) into ConstructorInvocation(77) at 0", "Insert MethodInvocation(73) into ConstructorInvocation(77) at 1", "Insert MethodInvocation(76) into ConstructorInvocation(77) at 2", "Move MethodInvocation(76) into ConstructorInvocation(106) at 0", "Move MethodInvocation(83) into ConstructorInvocation(106) at 1", "Insert CastExpression(105) into ConstructorInvocation(106) at 2", "Insert SimpleName: bootstrap_method_ref(137) into TagElement: @param(139) at 0", "Insert TextElement:  int index into constant_pool of CONSTANT_MethodHandle(138) into TagElement: @param(139) at 1", "Insert SimpleName: num_bootstrap_arguments(140) into TagElement: @param(142) at 0", "Insert TextElement:  int count of number of boostrap arguments(141) into TagElement: @param(142) at 1", "Insert SimpleName: bootstrap_arguments(143) into TagElement: @param(145) at 0", "Insert TextElement:  int[] indices into constant_pool of CONSTANT_<type>_info(144) into TagElement: @param(145) at 1", "Insert PrimitiveType: int(155) into ArrayType: int[](157) at 0", "Insert Dimension(156) into ArrayType: int[](157) at 1", "Insert Assignment: =(164) into ExpressionStatement(165) at 0", "Insert Assignment: =(170) into ExpressionStatement(171) at 0", "Insert Assignment: =(176) into ExpressionStatement(177) at 0", "Insert TextElement:  index into constant_pool of bootstrap_method(180) into TagElement: @return(181) at 0", "Insert SimpleName: bootstrap_method_ref(190) into TagElement: @param(192) at 0", "Insert TextElement:  int index into constant_pool of CONSTANT_MethodHandle(191) into TagElement: @param(192) at 1", "Insert TextElement:  int[] of bootstrap_method indices into constant_pool of CONSTANT_<type>_info(208) into TagElement: @return(209) at 0", "Insert TextElement:  count of number of boostrap arguments(220) into TagElement: @return(221) at 0", "Insert SimpleName: num_bootstrap_arguments(226) into ReturnStatement(227) at 0", "Insert SimpleName: bootstrap_arguments(230) into TagElement: @param(232) at 0", "Insert TextElement:  int[] indices into constant_pool of CONSTANT_<type>_info(231) into TagElement: @param(232) at 1", "Insert TextElement:  String representation.(250) into TagElement: @return(251) at 0", "Insert InfixExpression: +(266) into ReturnStatement(267) at 0", "Insert TextElement:  Resolved string representation(270) into TagElement: @return(271) at 0", "Insert SimpleName: ConstantPool(278) into SimpleType: ConstantPool(279) at 0", "Insert SimpleType: StringBuilder(283) into VariableDeclarationStatement(289) at 0", "Insert VariableDeclarationFragment(288) into VariableDeclarationStatement(289) at 1", "Insert SimpleType: String(291) into VariableDeclarationStatement(294) at 0", "Insert VariableDeclarationFragment(293) into VariableDeclarationStatement(294) at 1", "Insert Assignment: =(301) into ExpressionStatement(302) at 0", "Insert MethodInvocation(309) into ExpressionStatement(310) at 0", "Insert InfixExpression: >(313) into IfStatement(356) at 0", "Insert Block(355) into IfStatement(356) at 1", "Insert MethodInvocation(359) into ReturnStatement(360) at 0", "Update TextElement: Dump object to file stream on binary format.(162) to Dump object to file stream in binary format.", "Insert SimpleName: c(68) into MethodInvocation(70) at 0", "Insert SimpleName: getBootstrapMethodRef(69) into MethodInvocation(70) at 1", "Insert SimpleName: c(71) into MethodInvocation(73) at 0", "Insert SimpleName: getNumBootstrapArguments(72) into MethodInvocation(73) at 1", "Insert SimpleName: c(74) into MethodInvocation(76) at 0", "Insert SimpleName: getBootstrapArguments(75) into MethodInvocation(76) at 1", "Move ArrayType: int[](89) into CastExpression(105) at 0", "Insert NullLiteral(104) into CastExpression(105) at 1", "Update SimpleName: num_bootstrap_methods(100) to num_bootstrap_arguments", "Insert FieldAccess(162) into Assignment: =(164) at 0", "Insert SimpleName: bootstrap_method_ref(163) into Assignment: =(164) at 1", "Insert FieldAccess(168) into Assignment: =(170) at 0", "Insert SimpleName: num_bootstrap_arguments(169) into Assignment: =(170) at 1", "Insert FieldAccess(174) into Assignment: =(176) at 0", "Insert SimpleName: bootstrap_arguments(175) into Assignment: =(176) at 1", "Insert StringLiteral: \"BootstrapMethod(\"(260) into InfixExpression: +(266) at 0", "Insert SimpleName: bootstrap_method_ref(261) into InfixExpression: +(266) at 1", "Insert StringLiteral: \", \"(262) into InfixExpression: +(266) at 2", "Insert SimpleName: num_bootstrap_arguments(263) into InfixExpression: +(266) at 3", "Insert StringLiteral: \", \"(264) into InfixExpression: +(266) at 4", "Insert StringLiteral: \"UNDONE)\"(265) into InfixExpression: +(266) at 5", "Insert SimpleName: StringBuilder(282) into SimpleType: StringBuilder(283) at 0", "Insert SimpleName: buf(284) into VariableDeclarationFragment(288) at 0", "Insert ClassInstanceCreation(287) into VariableDeclarationFragment(288) at 1", "Insert SimpleName: String(290) into SimpleType: String(291) at 0", "Insert SimpleName: bootstrap_method_name(292) into VariableDeclarationFragment(293) at 0", "Insert SimpleName: bootstrap_method_name(295) into Assignment: =(301) at 0", "Insert MethodInvocation(300) into Assignment: =(301) at 1", "Insert SimpleName: buf(303) into MethodInvocation(309) at 0", "Insert SimpleName: append(304) into MethodInvocation(309) at 1", "Insert MethodInvocation(308) into MethodInvocation(309) at 2", "Insert SimpleName: num_bootstrap_arguments(311) into InfixExpression: >(313) at 0", "Insert NumberLiteral: 0(312) into InfixExpression: >(313) at 1", "Insert ExpressionStatement(318) into Block(355) at 0", "Insert ForStatement(354) into Block(355) at 1", "Insert SimpleName: buf(357) into MethodInvocation(359) at 0", "Insert SimpleName: toString(358) into MethodInvocation(359) at 1", "Insert ArrayType: int[](110) into ArrayCreation(112) at 0", "Update SimpleName: num_bootstrap_methods(90) to num_bootstrap_arguments", "Insert ThisExpression(160) into FieldAccess(162) at 0", "Insert SimpleName: bootstrap_method_ref(161) into FieldAccess(162) at 1", "Insert ThisExpression(166) into FieldAccess(168) at 0", "Insert SimpleName: num_bootstrap_arguments(167) into FieldAccess(168) at 1", "Insert ThisExpression(172) into FieldAccess(174) at 0", "Insert SimpleName: bootstrap_arguments(173) into FieldAccess(174) at 1", "Insert SimpleType: StringBuilder(286) into ClassInstanceCreation(287) at 0", "Insert SimpleName: constant_pool(296) into MethodInvocation(300) at 0", "Insert SimpleName: constantToString(297) into MethodInvocation(300) at 1", "Insert SimpleName: bootstrap_method_ref(298) into MethodInvocation(300) at 2", "Insert QualifiedName: Constants.CONSTANT_MethodHandle(299) into MethodInvocation(300) at 3", "Insert SimpleName: Utility(305) into MethodInvocation(308) at 0", "Insert SimpleName: compactClassName(306) into MethodInvocation(308) at 1", "Insert SimpleName: bootstrap_method_name(307) into MethodInvocation(308) at 2", "Insert MethodInvocation(317) into ExpressionStatement(318) at 0", "Insert VariableDeclarationExpression(323) into ForStatement(354) at 0", "Insert InfixExpression: <(326) into ForStatement(354) at 1", "Insert PostfixExpression: ++(328) into ForStatement(354) at 2", "Insert Block(353) into ForStatement(354) at 3", "Insert PrimitiveType: int(108) into ArrayType: int[](110) at 0", "Insert Dimension(109) into ArrayType: int[](110) at 1", "Insert SimpleName: StringBuilder(285) into SimpleType: StringBuilder(286) at 0", "Insert SimpleName: buf(314) into MethodInvocation(317) at 0", "Insert SimpleName: append(315) into MethodInvocation(317) at 1", "Insert StringLiteral: \"\\n     Method Arguments:\"(316) into MethodInvocation(317) at 2", "Insert PrimitiveType: int(319) into VariableDeclarationExpression(323) at 0", "Insert VariableDeclarationFragment(322) into VariableDeclarationExpression(323) at 1", "Insert SimpleName: i(324) into InfixExpression: <(326) at 0", "Insert SimpleName: num_bootstrap_arguments(325) into InfixExpression: <(326) at 1", "Insert SimpleName: i(327) into PostfixExpression: ++(328) at 0", "Insert ExpressionStatement(339) into Block(353) at 0", "Insert ExpressionStatement(352) into Block(353) at 1", "Insert SimpleName: i(320) into VariableDeclarationFragment(322) at 0", "Insert NumberLiteral: 0(321) into VariableDeclarationFragment(322) at 1", "Insert MethodInvocation(338) into ExpressionStatement(339) at 0", "Insert MethodInvocation(351) into ExpressionStatement(352) at 0", "Insert MethodInvocation(335) into MethodInvocation(338) at 0", "Insert SimpleName: append(336) into MethodInvocation(338) at 1", "Insert StringLiteral: \": \"(337) into MethodInvocation(338) at 2", "Insert SimpleName: buf(340) into MethodInvocation(351) at 0", "Insert SimpleName: append(341) into MethodInvocation(351) at 1", "Insert MethodInvocation(350) into MethodInvocation(351) at 2", "Insert MethodInvocation(332) into MethodInvocation(335) at 0", "Insert SimpleName: append(333) into MethodInvocation(335) at 1", "Insert SimpleName: i(334) into MethodInvocation(335) at 2", "Insert SimpleName: constant_pool(342) into MethodInvocation(350) at 0", "Insert SimpleName: constantToString(343) into MethodInvocation(350) at 1", "Insert MethodInvocation(349) into MethodInvocation(350) at 2", "Insert SimpleName: buf(329) into MethodInvocation(332) at 0", "Insert SimpleName: append(330) into MethodInvocation(332) at 1", "Insert StringLiteral: \"\\n     \"(331) into MethodInvocation(332) at 2", "Insert SimpleName: constant_pool(344) into MethodInvocation(349) at 0", "Insert SimpleName: getConstant(345) into MethodInvocation(349) at 1", "Insert ArrayAccess(348) into MethodInvocation(349) at 2", "Insert SimpleName: bootstrap_arguments(346) into ArrayAccess(348) at 0", "Insert SimpleName: i(347) into ArrayAccess(348) at 1", "Delete SimpleName: ClassFormatException(61)", "Delete TagElement: @throws(62)", "Delete SimpleName: ClassFormatException(71)", "Delete SimpleType: ClassFormatException(72)", "Delete SimpleName: bootstrap_method_ref(73)", "Delete Assignment: =(77)", "Delete ExpressionStatement(78)", "Delete PrimitiveType: int(79)", "Delete SimpleName: num_bootstrap_methods(80)", "Delete VariableDeclarationFragment(84)", "Delete VariableDeclarationStatement(85)"]}}, {"BootstrapMethods_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: getBootstrapMethods to MethodInvocation at 1", "INS SimpleName: getNameIndex to MethodInvocation at 1", "INS SimpleName: getConstantPool to MethodInvocation at 1", "INS SimpleName: BootstrapMethods to MethodDeclaration at 2", "INS SimpleName: getLength to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 0", "INS SimpleName: c to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: Initialize from another object. Note that both objects use the same to TagElement at 0", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ConstructorInvocation at 3", "INS SimpleName: BootstrapMethods to SimpleType: BootstrapMethods at 0", "INS TextElement: references (shallow copy). Use clone() for a physical copy. to TagElement at 1", "INS MethodInvocation to ConstructorInvocation at 0", "INS SimpleName: c to SingleVariableDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: BootstrapMethods to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to ConstructorInvocation at 2", "INS SimpleName: c to MethodInvocation at 0", "INS ConstructorInvocation to Block at 0", "INS SimpleName: c to MethodInvocation at 0", "INS MethodInvocation to ConstructorInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS VariableDeclarationExpression to ForStatement at 0", "INS StringLiteral: \"  \" to MethodInvocation at 2", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: append to MethodInvocation at 1", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: bootstrap_methods to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 4", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS QualifiedName: bootstrap_methods.length to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 1", "INS TagElement: @return to Javadoc at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: toString to MethodDeclaration at 5", "INS SimpleName: i to MethodInvocation at 2", "INS Modifier: final to MethodDeclaration at 3", "INS StringLiteral: \": \" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: constant_pool to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS Modifier: public to MethodDeclaration at 2", "INS ReturnStatement to Block at 5", "INS VariableDeclarationStatement to Block at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to MethodInvocation at 0", "INS Block to ForStatement at 3", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS StringLiteral: \"\\n\" to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS StringLiteral: \"BootstrapMethods(\" to MethodInvocation at 2", "INS TextElement:  String representation. to TagElement: @return at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ForStatement to Block at 4", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS StringLiteral: \"):\\n\" to MethodInvocation at 2", "INS InfixExpression: < to ForStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: buf to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 3", "INS SimpleName: buf to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS QualifiedName: bootstrap_methods.length to InfixExpression: < at 1", "INS ExpressionStatement to Block at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement:  Array of constants to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: length to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 3", "INS SimpleName: bootstrap_methods to TagElement: @param at 0", "INS TextElement:  array of bootstrap methods to TagElement: @param at 1", "INS TextElement:  Index in constant pool to CONSTANT_Utf8 to TagElement: @param at 1", "INS SimpleName: constant_pool to TagElement: @param at 0", "INS TextElement:  Content length in bytes to TagElement: @param at 1", "INS SimpleName: name_index to TagElement: @param at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Construct object from Input stream. to TagElement at 0", "INS SimpleName: input to TagElement: @param at 0", "INS TextElement:  Content length in bytes to TagElement: @param at 1", "INS TextElement:  Index in constant pool to CONSTANT_Utf8 to TagElement: @param at 1", "INS SimpleName: length to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  Input stream to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 2", "INS TagElement: @param to Javadoc at 4", "INS TagElement: @throws to Javadoc at 5", "INS TextElement:  Array of constants to TagElement: @param at 1", "INS SimpleName: name_index to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: constant_pool to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 3", "INS SimpleName: IOException to TagElement: @throws at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TagElement: @return to Javadoc at 0", "INS TextElement:  array of bootstrap method \"records\" to TagElement: @return at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement:  the array of bootstrap methods to TagElement: @param at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: bootstrap_methods to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement:  Visitor object to TagElement: @param at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: v to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @return to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  deep copy of this attribute to TagElement: @return at 0"]}]}}, {"BootstrapMethods_diff": {"operations": ["Insert MethodDeclaration(62) into TypeDeclaration: class(426) at 6", "Insert MethodDeclaration(425) into TypeDeclaration: class(426) at 14", "Insert Javadoc(41) into MethodDeclaration(62) at 0", "Insert Modifier: public(42) into MethodDeclaration(62) at 1", "Insert SimpleName: BootstrapMethods(43) into MethodDeclaration(62) at 2", "Insert SingleVariableDeclaration(47) into MethodDeclaration(62) at 3", "Insert Block(61) into MethodDeclaration(62) at 4", "Insert Javadoc(75) into MethodDeclaration(106) at 0", "Insert Javadoc(123) into MethodDeclaration(189) at 0", "Insert Javadoc(192) into MethodDeclaration(203) at 0", "Insert Javadoc(207) into MethodDeclaration(225) at 0", "Insert Javadoc(229) into MethodDeclaration(245) at 0", "Insert Javadoc(248) into MethodDeclaration(307) at 0", "Insert Javadoc(353) into MethodDeclaration(425) at 0", "Insert MarkerAnnotation(355) into MethodDeclaration(425) at 1", "Insert Modifier: public(356) into MethodDeclaration(425) at 2", "Insert Modifier: final(357) into MethodDeclaration(425) at 3", "Insert SimpleType: String(359) into MethodDeclaration(425) at 4", "Insert SimpleName: toString(360) into MethodDeclaration(425) at 5", "Insert Block(424) into MethodDeclaration(425) at 6", "Insert TagElement(40) into Javadoc(41) at 0", "Insert SimpleType: BootstrapMethods(45) into SingleVariableDeclaration(47) at 0", "Insert SimpleName: c(46) into SingleVariableDeclaration(47) at 1", "Insert ConstructorInvocation(60) into Block(61) at 0", "Insert TagElement: @param(65) into Javadoc(75) at 0", "Insert TagElement: @param(68) into Javadoc(75) at 1", "Insert TagElement: @param(71) into Javadoc(75) at 2", "Insert TagElement: @param(74) into Javadoc(75) at 3", "Insert TagElement(108) into Javadoc(123) at 0", "Insert TagElement: @param(111) into Javadoc(123) at 1", "Insert TagElement: @param(114) into Javadoc(123) at 2", "Insert TagElement: @param(117) into Javadoc(123) at 3", "Insert TagElement: @param(120) into Javadoc(123) at 4", "Insert TagElement: @throws(122) into Javadoc(123) at 5", "Insert TagElement: @return(191) into Javadoc(192) at 0", "Insert TagElement: @param(206) into Javadoc(207) at 0", "Insert TagElement: @param(228) into Javadoc(229) at 0", "Insert TagElement: @return(247) into Javadoc(248) at 0", "Insert TagElement: @return(352) into Javadoc(353) at 0", "Insert SimpleName: Override(354) into MarkerAnnotation(355) at 0", "Insert SimpleName: String(358) into SimpleType: String(359) at 0", "Insert VariableDeclarationStatement(368) into Block(424) at 0", "Insert ExpressionStatement(373) into Block(424) at 1", "Insert ExpressionStatement(378) into Block(424) at 2", "Insert ExpressionStatement(383) into Block(424) at 3", "Insert ForStatement(419) into Block(424) at 4", "Insert ReturnStatement(423) into Block(424) at 5", "Insert TextElement: Initialize from another object. Note that both objects use the same(38) into TagElement(40) at 0", "Insert TextElement: references (shallow copy). Use clone() for a physical copy.(39) into TagElement(40) at 1", "Insert SimpleName: BootstrapMethods(44) into SimpleType: BootstrapMethods(45) at 0", "Insert MethodInvocation(50) into ConstructorInvocation(60) at 0", "Insert MethodInvocation(53) into ConstructorInvocation(60) at 1", "Insert MethodInvocation(56) into ConstructorInvocation(60) at 2", "Insert MethodInvocation(59) into ConstructorInvocation(60) at 3", "Insert SimpleName: name_index(63) into TagElement: @param(65) at 0", "Insert TextElement:  Index in constant pool to CONSTANT_Utf8(64) into TagElement: @param(65) at 1", "Insert SimpleName: length(66) into TagElement: @param(68) at 0", "Insert TextElement:  Content length in bytes(67) into TagElement: @param(68) at 1", "Insert SimpleName: bootstrap_methods(69) into TagElement: @param(71) at 0", "Insert TextElement:  array of bootstrap methods(70) into TagElement: @param(71) at 1", "Insert SimpleName: constant_pool(72) into TagElement: @param(74) at 0", "Insert TextElement:  Array of constants(73) into TagElement: @param(74) at 1", "Insert TextElement: Construct object from Input stream.(107) into TagElement(108) at 0", "Insert SimpleName: name_index(109) into TagElement: @param(111) at 0", "Insert TextElement:  Index in constant pool to CONSTANT_Utf8(110) into TagElement: @param(111) at 1", "Insert SimpleName: length(112) into TagElement: @param(114) at 0", "Insert TextElement:  Content length in bytes(113) into TagElement: @param(114) at 1", "Insert SimpleName: input(115) into TagElement: @param(117) at 0", "Insert TextElement:  Input stream(116) into TagElement: @param(117) at 1", "Insert SimpleName: constant_pool(118) into TagElement: @param(120) at 0", "Insert TextElement:  Array of constants(119) into TagElement: @param(120) at 1", "Insert SimpleName: IOException(121) into TagElement: @throws(122) at 0", "Insert TextElement:  array of bootstrap method \"records\"(190) into TagElement: @return(191) at 0", "Insert SimpleName: bootstrap_methods(204) into TagElement: @param(206) at 0", "Insert TextElement:  the array of bootstrap methods(205) into TagElement: @param(206) at 1", "Insert SimpleName: v(226) into TagElement: @param(228) at 0", "Insert TextElement:  Visitor object(227) into TagElement: @param(228) at 1", "Insert TextElement:  deep copy of this attribute(246) into TagElement: @return(247) at 0", "Insert TextElement:  String representation.(351) into TagElement: @return(352) at 0", "Insert SimpleType: StringBuilder(362) into VariableDeclarationStatement(368) at 0", "Insert VariableDeclarationFragment(367) into VariableDeclarationStatement(368) at 1", "Insert MethodInvocation(372) into ExpressionStatement(373) at 0", "Insert MethodInvocation(377) into ExpressionStatement(378) at 0", "Insert MethodInvocation(382) into ExpressionStatement(383) at 0", "Insert VariableDeclarationExpression(388) into ForStatement(419) at 0", "Insert InfixExpression: <(391) into ForStatement(419) at 1", "Insert PostfixExpression: ++(393) into ForStatement(419) at 2", "Insert Block(418) into ForStatement(419) at 3", "Insert MethodInvocation(422) into ReturnStatement(423) at 0", "Insert SimpleName: c(48) into MethodInvocation(50) at 0", "Insert SimpleName: getNameIndex(49) into MethodInvocation(50) at 1", "Insert SimpleName: c(51) into MethodInvocation(53) at 0", "Insert SimpleName: getLength(52) into MethodInvocation(53) at 1", "Insert SimpleName: c(54) into MethodInvocation(56) at 0", "Insert SimpleName: getBootstrapMethods(55) into MethodInvocation(56) at 1", "Insert SimpleName: c(57) into MethodInvocation(59) at 0", "Insert SimpleName: getConstantPool(58) into MethodInvocation(59) at 1", "Insert SimpleName: StringBuilder(361) into SimpleType: StringBuilder(362) at 0", "Insert SimpleName: buf(363) into VariableDeclarationFragment(367) at 0", "Insert ClassInstanceCreation(366) into VariableDeclarationFragment(367) at 1", "Insert SimpleName: buf(369) into MethodInvocation(372) at 0", "Insert SimpleName: append(370) into MethodInvocation(372) at 1", "Insert StringLiteral: \"BootstrapMethods(\"(371) into MethodInvocation(372) at 2", "Insert SimpleName: buf(374) into MethodInvocation(377) at 0", "Insert SimpleName: append(375) into MethodInvocation(377) at 1", "Insert QualifiedName: bootstrap_methods.length(376) into MethodInvocation(377) at 2", "Insert SimpleName: buf(379) into MethodInvocation(382) at 0", "Insert SimpleName: append(380) into MethodInvocation(382) at 1", "Insert StringLiteral: \"):\\n\"(381) into MethodInvocation(382) at 2", "Insert PrimitiveType: int(384) into VariableDeclarationExpression(388) at 0", "Insert VariableDeclarationFragment(387) into VariableDeclarationExpression(388) at 1", "Insert SimpleName: i(389) into InfixExpression: <(391) at 0", "Insert QualifiedName: bootstrap_methods.length(390) into InfixExpression: <(391) at 1", "Insert SimpleName: i(392) into PostfixExpression: ++(393) at 0", "Insert ExpressionStatement(404) into Block(418) at 0", "Insert ExpressionStatement(417) into Block(418) at 1", "Insert SimpleName: buf(420) into MethodInvocation(422) at 0", "Insert SimpleName: toString(421) into MethodInvocation(422) at 1", "Insert SimpleType: StringBuilder(365) into ClassInstanceCreation(366) at 0", "Insert SimpleName: i(385) into VariableDeclarationFragment(387) at 0", "Insert NumberLiteral: 0(386) into VariableDeclarationFragment(387) at 1", "Insert MethodInvocation(403) into ExpressionStatement(404) at 0", "Insert MethodInvocation(416) into ExpressionStatement(417) at 0", "Insert SimpleName: StringBuilder(364) into SimpleType: StringBuilder(365) at 0", "Insert MethodInvocation(400) into MethodInvocation(403) at 0", "Insert SimpleName: append(401) into MethodInvocation(403) at 1", "Insert StringLiteral: \": \"(402) into MethodInvocation(403) at 2", "Insert MethodInvocation(413) into MethodInvocation(416) at 0", "Insert SimpleName: append(414) into MethodInvocation(416) at 1", "Insert StringLiteral: \"\\n\"(415) into MethodInvocation(416) at 2", "Insert MethodInvocation(397) into MethodInvocation(400) at 0", "Insert SimpleName: append(398) into MethodInvocation(400) at 1", "Insert SimpleName: i(399) into MethodInvocation(400) at 2", "Insert SimpleName: buf(405) into MethodInvocation(413) at 0", "Insert SimpleName: append(406) into MethodInvocation(413) at 1", "Insert MethodInvocation(412) into MethodInvocation(413) at 2", "Insert SimpleName: buf(394) into MethodInvocation(397) at 0", "Insert SimpleName: append(395) into MethodInvocation(397) at 1", "Insert StringLiteral: \"  \"(396) into MethodInvocation(397) at 2", "Insert ArrayAccess(409) into MethodInvocation(412) at 0", "Insert SimpleName: toString(410) into MethodInvocation(412) at 1", "Insert SimpleName: constant_pool(411) into MethodInvocation(412) at 2", "Insert SimpleName: bootstrap_methods(407) into ArrayAccess(409) at 0", "Insert SimpleName: i(408) into ArrayAccess(409) at 1"]}}, {"ConstantCP_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 17", "MOV MethodDeclaration to TypeDeclaration: class at 15"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS Block to MethodDeclaration at 5", "INS TextElement:  Reference (index) to bootstrap method this constant refers to. to TagElement: @return at 0", "INS PrimitiveType: int to MethodDeclaration at 3", "INS TextElement: for use by ConstantInvokeDynamic. to TagElement: @return at 2", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS TextElement: Note that this method is a functional duplicate of getClassIndex to TagElement: @return at 1", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @return to Javadoc at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: class_index to ReturnStatement at 0", "INS SimpleName: getBootstrapMethodAttrIndex to MethodDeclaration at 4", "INS Modifier: final to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS Block to MethodDeclaration at 6", "INS Javadoc to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: setBootstrapMethodAttrIndex to MethodDeclaration at 4", "INS SimpleName: bootstrap_method_attr_index to SingleVariableDeclaration at 1", "INS TagElement: @param to Javadoc at 0", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS TextElement:  points to a BootstrapMethod.  to TagElement: @param at 1", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: Note that this method is a functional duplicate of setClassIndex to TagElement: @param at 2", "INS TextElement: for use by ConstantInvokeDynamic. to TagElement: @param at 3", "INS SimpleName: bootstrap_method_attr_index to TagElement: @param at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: final to MethodDeclaration at 2", "INS SimpleName: bootstrap_method_attr_index to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: class_index to FieldAccess at 1"]}, {"root": "INS TagElement: @see to Javadoc at 6", "operations": ["INS TagElement: @see to Javadoc at 6", "INS SimpleName: ConstantInvokeDynamic to TagElement: @see at 0"]}, {"root": "UPDATE from Abstract super class for Fieldref and Methodref constants. to Abstract super class for Fieldref, Methodref, InterfaceMethodref and", "operations": ["UPD TextElement: Abstract super class for Fieldref and Methodref constants. from Abstract super class for Fieldref and Methodref constants. to Abstract super class for Fieldref, Methodref, InterfaceMethodref and"]}, {"root": "INS TextElement: InvokeDynamic constants. to TagElement at 1", "operations": ["INS TextElement: InvokeDynamic constants. to TagElement at 1"]}, {"root": "UPDATE from  Reference (index) to class this field or method belongs to. to  Reference (index) to class this constant refers to.", "operations": ["UPD TextElement:  Reference (index) to class this field or method belongs to. from  Reference (index) to class this field or method belongs to. to  Reference (index) to class this constant refers to."]}, {"root": "INS TextElement: not final as ConstantInvokeDynamic needs to modify to TagElement: @return at 1", "operations": ["INS TextElement: not final as ConstantInvokeDynamic needs to modify to TagElement: @return at 1"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"ConstantCP_diff": {"operations": ["Move MethodDeclaration(194) into TypeDeclaration: class(310) at 15", "Move MethodDeclaration(232) into TypeDeclaration: class(310) at 17", "Insert MethodDeclaration(199) into TypeDeclaration: class(310) at 13", "Insert MethodDeclaration(239) into TypeDeclaration: class(310) at 15", "Insert TagElement: @see(24) into Javadoc(25) at 6", "Insert Javadoc(191) into MethodDeclaration(199) at 0", "Insert Modifier: public(192) into MethodDeclaration(199) at 1", "Insert Modifier: final(193) into MethodDeclaration(199) at 2", "Insert PrimitiveType: int(194) into MethodDeclaration(199) at 3", "Insert SimpleName: getBootstrapMethodAttrIndex(195) into MethodDeclaration(199) at 4", "Insert Block(198) into MethodDeclaration(199) at 5", "Insert Javadoc(224) into MethodDeclaration(239) at 0", "Insert Modifier: public(225) into MethodDeclaration(239) at 1", "Insert Modifier: final(226) into MethodDeclaration(239) at 2", "Insert PrimitiveType: void(227) into MethodDeclaration(239) at 3", "Insert SimpleName: setBootstrapMethodAttrIndex(228) into MethodDeclaration(239) at 4", "Insert SingleVariableDeclaration(231) into MethodDeclaration(239) at 5", "Insert Block(238) into MethodDeclaration(239) at 6", "Update TextElement: Abstract super class for Fieldref and Methodref constants.(10) to Abstract super class for Fieldref, Methodref, InterfaceMethodref and", "Insert TextElement: InvokeDynamic constants.(11) into TagElement(12) at 1", "Insert SimpleName: ConstantInvokeDynamic(23) into TagElement: @see(24) at 0", "Insert TagElement: @return(190) into Javadoc(191) at 0", "Insert ReturnStatement(197) into Block(198) at 0", "Insert TagElement: @param(223) into Javadoc(224) at 0", "Insert PrimitiveType: int(229) into SingleVariableDeclaration(231) at 0", "Insert SimpleName: bootstrap_method_attr_index(230) into SingleVariableDeclaration(231) at 1", "Insert ExpressionStatement(237) into Block(238) at 0", "Update TextElement:  Reference (index) to class this field or method belongs to.(173) to  Reference (index) to class this constant refers to.", "Insert TextElement:  Reference (index) to bootstrap method this constant refers to.(187) into TagElement: @return(190) at 0", "Insert TextElement: Note that this method is a functional duplicate of getClassIndex(188) into TagElement: @return(190) at 1", "Insert TextElement: for use by ConstantInvokeDynamic.(189) into TagElement: @return(190) at 2", "Insert SimpleName: class_index(196) into ReturnStatement(197) at 0", "Insert SimpleName: bootstrap_method_attr_index(219) into TagElement: @param(223) at 0", "Insert TextElement:  points to a BootstrapMethod. (220) into TagElement: @param(223) at 1", "Insert TextElement: Note that this method is a functional duplicate of setClassIndex(221) into TagElement: @param(223) at 2", "Insert TextElement: for use by ConstantInvokeDynamic.(222) into TagElement: @param(223) at 3", "Insert Assignment: =(236) into ExpressionStatement(237) at 0", "Insert TextElement: not final as ConstantInvokeDynamic needs to modify(290) into TagElement: @return(291) at 1", "Insert FieldAccess(234) into Assignment: =(236) at 0", "Insert SimpleName: bootstrap_method_attr_index(235) into Assignment: =(236) at 1", "Insert ThisExpression(232) into FieldAccess(234) at 0", "Insert SimpleName: class_index(233) into FieldAccess(234) at 1", "Delete Modifier: final(258)"]}}, {"ConstantInvokeDynamic_cluster": {"actions": [{"root": "UPDATE from Constant to ConstantCP", "operations": ["UPD SimpleType: Constant from Constant to ConstantCP", "UPD SimpleName: Constant from Constant to ConstantCP"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SuperConstructorInvocation to Block at 0", "INS QualifiedName: Constants.CONSTANT_InvokeDynamic to SuperConstructorInvocation at 0"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS QualifiedName: Constants.CONSTANT_InvokeDynamic to SuperConstructorInvocation at 0", "INS SimpleName: file to SuperConstructorInvocation at 1", "INS SuperConstructorInvocation to Block at 0"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SimpleName: bootstrap_method_attr_index to SuperConstructorInvocation at 1", "INS SimpleName: name_and_type_index to SuperConstructorInvocation at 2", "INS SuperConstructorInvocation to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ThisExpression to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: visitConstantInvokeDynamic to MethodInvocation at 1", "INS SimpleName: v to MethodInvocation at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from SuperConstructorInvocation", "operations": ["MOV MethodInvocation to SuperConstructorInvocation at 2", "MOV MethodInvocation to SuperConstructorInvocation at 1"]}, {"root": "MOVE from SuperConstructorInvocation", "operations": ["MOV QualifiedName: Constants.CONSTANT_InvokeDynamic to SuperConstructorInvocation at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV SuperMethodInvocation to ReturnStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.DataOutputStream", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: bootstrap_method_attr_index", "DEL Modifier: private", "DEL FieldDeclaration", "DEL PrimitiveType: int"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: name_and_type_index", "DEL PrimitiveType: int"]}, {"root": "DEL ConstructorInvocation", "operations": ["DEL ConstructorInvocation"]}, {"root": "DEL ConstructorInvocation", "operations": ["DEL SimpleName: file", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: file", "DEL SimpleName: readUnsignedShort", "DEL SimpleName: readUnsignedShort", "DEL ConstructorInvocation"]}, {"root": "DEL SuperConstructorInvocation", "operations": ["DEL SuperConstructorInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: bootstrap_method_attr_index", "DEL SimpleName: bootstrap_method_attr_index", "DEL ExpressionStatement", "DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL SimpleName: name_and_type_index", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: name_and_type_index", "DEL Assignment: ="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Override", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: IOException", "DEL SimpleName: name_and_type_index", "DEL SimpleName: file", "DEL MarkerAnnotation", "DEL SimpleType: IOException", "DEL Javadoc", "DEL Modifier: public", "DEL TagElement: @throws", "DEL SimpleName: file", "DEL MethodDeclaration", "DEL SimpleName: writeByte", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: writeShort", "DEL SimpleName: file", "DEL SimpleName: bootstrap_method_attr_index", "DEL ExpressionStatement", "DEL SimpleName: file", "DEL SimpleName: dump", "DEL ExpressionStatement", "DEL TextElement: Dump name and signature index to file stream in binary format.", "DEL PrimitiveType: void", "DEL SimpleName: file", "DEL TextElement:  Output file stream", "DEL SimpleName: DataOutputStream", "DEL SimpleType: DataOutputStream", "DEL MethodInvocation", "DEL SimpleName: writeShort", "DEL SimpleName: tag", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: bootstrap_method_attr_index", "DEL Block", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: getBootstrapMethodAttrIndex", "DEL Modifier: public", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: bootstrap_method_attr_index", "DEL PrimitiveType: int", "DEL PrimitiveType: void", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: bootstrap_method_attr_index", "DEL MethodDeclaration", "DEL SimpleName: setBootstrapMethodAttrIndex", "DEL Block", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL SimpleName: bootstrap_method_attr_index", "DEL ThisExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: getNameAndTypeIndex", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: name_and_type_index"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL MethodDeclaration", "DEL Block", "DEL Assignment: =", "DEL SimpleName: name_and_type_index", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleName: setNameAndTypeIndex", "DEL FieldAccess", "DEL SimpleName: name_and_type_index", "DEL SimpleName: name_and_type_index", "DEL ThisExpression"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \")\"", "DEL SimpleName: name_and_type_index", "DEL InfixExpression: +", "DEL SimpleName: bootstrap_method_attr_index", "DEL StringLiteral: \", name_and_type_index = \"", "DEL StringLiteral: \"(bootstrap_method_attr_index = \""]}]}}, {"ConstantInvokeDynamic_diff": {"operations": ["Update SimpleType: Constant(23) to ConstantCP", "Update SimpleName: Constant(22) to ConstantCP", "Insert SuperConstructorInvocation(46) into Block(47) at 0", "Insert SuperConstructorInvocation(66) into Block(67) at 0", "Insert SuperConstructorInvocation(80) into Block(81) at 0", "Insert ExpressionStatement(104) into Block(105) at 0", "Insert QualifiedName: Constants.CONSTANT_InvokeDynamic(39) into SuperConstructorInvocation(46) at 0", "Move MethodInvocation(53) into SuperConstructorInvocation(46) at 1", "Move MethodInvocation(56) into SuperConstructorInvocation(46) at 2", "Insert QualifiedName: Constants.CONSTANT_InvokeDynamic(64) into SuperConstructorInvocation(66) at 0", "Insert SimpleName: file(65) into SuperConstructorInvocation(66) at 1", "Move QualifiedName: Constants.CONSTANT_InvokeDynamic(92) into SuperConstructorInvocation(80) at 0", "Insert SimpleName: bootstrap_method_attr_index(78) into SuperConstructorInvocation(80) at 1", "Insert SimpleName: name_and_type_index(79) into SuperConstructorInvocation(80) at 2", "Insert MethodInvocation(103) into ExpressionStatement(104) at 0", "Move SuperMethodInvocation(217) into ReturnStatement(119) at 0", "Insert SimpleName: v(100) into MethodInvocation(103) at 0", "Insert SimpleName: visitConstantInvokeDynamic(101) into MethodInvocation(103) at 1", "Insert ThisExpression(102) into MethodInvocation(103) at 2", "Delete QualifiedName: java.io.DataOutputStream(4)", "Delete ImportDeclaration(5)", "Delete Modifier: private(32)", "Delete PrimitiveType: int(33)", "Delete SimpleName: bootstrap_method_attr_index(34)", "Delete VariableDeclarationFragment(35)", "Delete FieldDeclaration(36)", "Delete Modifier: private(37)", "Delete PrimitiveType: int(38)", "Delete SimpleName: name_and_type_index(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete ConstructorInvocation(57)", "Delete SimpleName: file(75)", "Delete SimpleName: readUnsignedShort(76)", "Delete MethodInvocation(77)", "Delete SimpleName: file(78)", "Delete SimpleName: readUnsignedShort(79)", "Delete MethodInvocation(80)", "Delete ConstructorInvocation(81)", "Delete SuperConstructorInvocation(93)", "Delete ThisExpression(94)", "Delete SimpleName: bootstrap_method_attr_index(95)", "Delete FieldAccess(96)", "Delete SimpleName: bootstrap_method_attr_index(97)", "Delete Assignment: =(98)", "Delete ExpressionStatement(99)", "Delete ThisExpression(100)", "Delete SimpleName: name_and_type_index(101)", "Delete FieldAccess(102)", "Delete SimpleName: name_and_type_index(103)", "Delete Assignment: =(104)", "Delete ExpressionStatement(105)", "Delete TextElement: Dump name and signature index to file stream in binary format.(127)", "Delete TagElement(128)", "Delete SimpleName: file(129)", "Delete TextElement:  Output file stream(130)", "Delete TagElement: @param(131)", "Delete SimpleName: IOException(132)", "Delete TagElement: @throws(133)", "Delete Javadoc(134)", "Delete SimpleName: Override(135)", "Delete MarkerAnnotation(136)", "Delete Modifier: public(137)", "Delete Modifier: final(138)", "Delete PrimitiveType: void(139)", "Delete SimpleName: dump(140)", "Delete SimpleName: DataOutputStream(141)", "Delete SimpleType: DataOutputStream(142)", "Delete SimpleName: file(143)", "Delete SingleVariableDeclaration(144)", "Delete SimpleName: IOException(145)", "Delete SimpleType: IOException(146)", "Delete SimpleName: file(147)", "Delete SimpleName: writeByte(148)", "Delete SimpleName: tag(149)", "Delete MethodInvocation(150)", "Delete ExpressionStatement(151)", "Delete SimpleName: file(152)", "Delete SimpleName: writeShort(153)", "Delete SimpleName: bootstrap_method_attr_index(154)", "Delete MethodInvocation(155)", "Delete ExpressionStatement(156)", "Delete SimpleName: file(157)", "Delete SimpleName: writeShort(158)", "Delete SimpleName: name_and_type_index(159)", "Delete MethodInvocation(160)", "Delete ExpressionStatement(161)", "Delete Block(162)", "Delete MethodDeclaration(163)", "Delete Modifier: public(164)", "Delete PrimitiveType: int(165)", "Delete SimpleName: getBootstrapMethodAttrIndex(166)", "Delete SimpleName: bootstrap_method_attr_index(167)", "Delete ReturnStatement(168)", "Delete Block(169)", "Delete MethodDeclaration(170)", "Delete Modifier: public(171)", "Delete PrimitiveType: void(172)", "Delete SimpleName: setBootstrapMethodAttrIndex(173)", "Delete PrimitiveType: int(174)", "Delete SimpleName: bootstrap_method_attr_index(175)", "Delete SingleVariableDeclaration(176)", "Delete ThisExpression(177)", "Delete SimpleName: bootstrap_method_attr_index(178)", "Delete FieldAccess(179)", "Delete SimpleName: bootstrap_method_attr_index(180)", "Delete Assignment: =(181)", "Delete ExpressionStatement(182)", "Delete Block(183)", "Delete MethodDeclaration(184)", "Delete Modifier: public(185)", "Delete PrimitiveType: int(186)", "Delete SimpleName: getNameAndTypeIndex(187)", "Delete SimpleName: name_and_type_index(188)", "Delete ReturnStatement(189)", "Delete Block(190)", "Delete MethodDeclaration(191)", "Delete Modifier: public(192)", "Delete PrimitiveType: void(193)", "Delete SimpleName: setNameAndTypeIndex(194)", "Delete PrimitiveType: int(195)", "Delete SimpleName: name_and_type_index(196)", "Delete SingleVariableDeclaration(197)", "Delete ThisExpression(198)", "Delete SimpleName: name_and_type_index(199)", "Delete FieldAccess(200)", "Delete SimpleName: name_and_type_index(201)", "Delete Assignment: =(202)", "Delete ExpressionStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete StringLiteral: \"(bootstrap_method_attr_index = \"(218)", "Delete SimpleName: bootstrap_method_attr_index(219)", "Delete StringLiteral: \", name_and_type_index = \"(220)", "Delete SimpleName: name_and_type_index(221)", "Delete StringLiteral: \")\"(222)", "Delete InfixExpression: +(223)"]}}, {"ConstantPool_cluster": {"actions": [{"root": "UPDATE from \" \" to \":\"", "operations": ["UPD StringLiteral: \" \" from \" \" to \":\"", "UPD StringLiteral: \": \" from \": \" to \":\""]}, {"root": "UPDATE from Constants.REF_NAMES to Constants.METHODHANDLE_NAMES", "operations": ["UPD QualifiedName: Constants.REF_NAMES from Constants.REF_NAMES to Constants.METHODHANDLE_NAMES"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: cmh to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getConstant to MethodInvocation at 0", "INS SimpleName: getTag to MethodInvocation at 1", "INS SimpleName: getReferenceIndex to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "DEL ArrayAccess", "operations": ["DEL SimpleName: constant_pool", "DEL ArrayAccess"]}]}}, {"ConstantPool_diff": {"operations": ["Update StringLiteral: \": \"(486) to \":\"", "Update StringLiteral: \" \"(371) to \":\"", "Update QualifiedName: Constants.REF_NAMES(432) to Constants.METHODHANDLE_NAMES", "Move MethodInvocation(442) into MethodInvocation(449) at 1", "Insert MethodInvocation(448) into MethodInvocation(449) at 2", "Insert MethodInvocation(446) into MethodInvocation(448) at 0", "Insert SimpleName: getTag(447) into MethodInvocation(448) at 1", "Insert SimpleName: getConstant(442) into MethodInvocation(446) at 0", "Insert MethodInvocation(445) into MethodInvocation(446) at 1", "Insert SimpleName: cmh(443) into MethodInvocation(445) at 0", "Insert SimpleName: getReferenceIndex(444) into MethodInvocation(445) at 1", "Delete SimpleName: constant_pool(439)", "Delete ArrayAccess(443)"]}}, {"DescendingVisitor_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 43"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS SimpleName: visitor to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: constant to MethodInvocation at 2", "INS Block to MethodDeclaration at 4", "INS SimpleName: constant to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stack to MethodInvocation at 0", "INS SimpleName: pop to MethodInvocation at 1", "INS SimpleName: constant to MethodInvocation at 0", "INS SimpleType: ConstantInvokeDynamic to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: push to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: stack to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: accept to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: ConstantInvokeDynamic to SimpleType: ConstantInvokeDynamic at 0", "INS SimpleName: visitConstantInvokeDynamic to MethodDeclaration at 2"]}, {"root": "UPDATE from obj to bm", "operations": ["UPD SimpleName: obj from obj to bm", "UPD SimpleName: obj from obj to bm", "UPD SimpleName: obj from obj to bm"]}]}}, {"DescendingVisitor_diff": {"operations": ["Move MethodDeclaration(1433) into TypeDeclaration: class(1480) at 43", "Insert MethodDeclaration(1043) into TypeDeclaration: class(1480) at 36", "Insert Modifier: public(1021) into MethodDeclaration(1043) at 0", "Insert PrimitiveType: void(1022) into MethodDeclaration(1043) at 1", "Insert SimpleName: visitConstantInvokeDynamic(1023) into MethodDeclaration(1043) at 2", "Insert SingleVariableDeclaration(1027) into MethodDeclaration(1043) at 3", "Insert Block(1042) into MethodDeclaration(1043) at 4", "Insert SimpleType: ConstantInvokeDynamic(1025) into SingleVariableDeclaration(1027) at 0", "Insert SimpleName: constant(1026) into SingleVariableDeclaration(1027) at 1", "Insert ExpressionStatement(1032) into Block(1042) at 0", "Insert ExpressionStatement(1037) into Block(1042) at 1", "Insert ExpressionStatement(1041) into Block(1042) at 2", "Update SimpleName: obj(1416) to bm", "Insert SimpleName: ConstantInvokeDynamic(1024) into SimpleType: ConstantInvokeDynamic(1025) at 0", "Insert MethodInvocation(1031) into ExpressionStatement(1032) at 0", "Insert MethodInvocation(1036) into ExpressionStatement(1037) at 0", "Insert MethodInvocation(1040) into ExpressionStatement(1041) at 0", "Insert SimpleName: stack(1028) into MethodInvocation(1031) at 0", "Insert SimpleName: push(1029) into MethodInvocation(1031) at 1", "Insert SimpleName: constant(1030) into MethodInvocation(1031) at 2", "Insert SimpleName: constant(1033) into MethodInvocation(1036) at 0", "Insert SimpleName: accept(1034) into MethodInvocation(1036) at 1", "Insert SimpleName: visitor(1035) into MethodInvocation(1036) at 2", "Insert SimpleName: stack(1038) into MethodInvocation(1040) at 0", "Insert SimpleName: pop(1039) into MethodInvocation(1040) at 1", "Update SimpleName: obj(1420) to bm", "Update SimpleName: obj(1423) to bm"]}}, {"EmptyVisitor_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 29"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: visitConstantInvokeDynamic to MethodDeclaration at 2", "INS SimpleType: ConstantInvokeDynamic to SingleVariableDeclaration at 0", "INS SimpleName: ConstantInvokeDynamic to SimpleType: ConstantInvokeDynamic at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: obj to SingleVariableDeclaration at 1"]}]}}, {"EmptyVisitor_diff": {"operations": ["Move MethodDeclaration(386) into TypeDeclaration: class(405) at 29", "Insert MethodDeclaration(134) into TypeDeclaration: class(405) at 17", "Insert Modifier: public(126) into MethodDeclaration(134) at 0", "Insert PrimitiveType: void(127) into MethodDeclaration(134) at 1", "Insert SimpleName: visitConstantInvokeDynamic(128) into MethodDeclaration(134) at 2", "Insert SingleVariableDeclaration(132) into MethodDeclaration(134) at 3", "Insert Block(133) into MethodDeclaration(134) at 4", "Insert SimpleType: ConstantInvokeDynamic(130) into SingleVariableDeclaration(132) at 0", "Insert SimpleName: obj(131) into SingleVariableDeclaration(132) at 1", "Insert SimpleName: ConstantInvokeDynamic(129) into SimpleType: ConstantInvokeDynamic(130) at 0"]}}, {"Visitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 11", "operations": ["INS SimpleName: visitConstantInvokeDynamic to MethodDeclaration at 1", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 0", "INS SimpleName: ConstantInvokeDynamic to SimpleType: ConstantInvokeDynamic at 0", "INS SimpleType: ConstantInvokeDynamic to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: interface at 11"]}]}}, {"Visitor_diff": {"operations": ["Insert MethodDeclaration(75) into TypeDeclaration: interface(314) at 11", "Insert PrimitiveType: void(69) into MethodDeclaration(75) at 0", "Insert SimpleName: visitConstantInvokeDynamic(70) into MethodDeclaration(75) at 1", "Insert SingleVariableDeclaration(74) into MethodDeclaration(75) at 2", "Insert SimpleType: ConstantInvokeDynamic(72) into SingleVariableDeclaration(74) at 0", "Insert SimpleName: obj(73) into SingleVariableDeclaration(74) at 1", "Insert SimpleName: ConstantInvokeDynamic(71) into SimpleType: ConstantInvokeDynamic(72) at 0"]}}, {"ConstantPoolGen_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.bcel.classfile.ConstantInvokeDynamic to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: class_name to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS SimpleType: ConstantInvokeDynamic to InstanceofExpression at 1", "INS SimpleName: ConstantInvokeDynamic to SimpleType: ConstantInvokeDynamic at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: m to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getBootstrapMethodAttrIndex to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: u8 to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: class_name to Assignment: = at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: c to InstanceofExpression at 0", "INS IfStatement to Block at 4", "INS Block to IfStatement at 1", "INS SimpleName: class_name to Assignment: = at 0", "INS SimpleName: Integer to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV CastExpression to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: class_name", "DEL VariableDeclarationFragment"]}]}}, {"ConstantPoolGen_diff": {"operations": ["Insert ImportDeclaration(25) into CompilationUnit(2981) at 12", "Insert QualifiedName: org.apache.bcel.classfile.ConstantInvokeDynamic(24) into ImportDeclaration(25) at 0", "Move VariableDeclarationStatement(495) into Block(666) at 4", "Insert VariableDeclarationStatement(476) into Block(666) at 1", "Insert IfStatement(531) into Block(666) at 3", "Move SimpleType: String(510) into VariableDeclarationStatement(476) at 0", "Insert VariableDeclarationFragment(475) into VariableDeclarationStatement(476) at 1", "Insert InstanceofExpression(485) into IfStatement(531) at 0", "Insert Block(495) into IfStatement(531) at 1", "Insert Block(530) into IfStatement(531) at 2", "Insert SimpleName: class_name(474) into VariableDeclarationFragment(475) at 0", "Insert SimpleName: c(482) into InstanceofExpression(485) at 0", "Insert SimpleType: ConstantInvokeDynamic(484) into InstanceofExpression(485) at 1", "Insert ExpressionStatement(494) into Block(495) at 0", "Move VariableDeclarationStatement(482) into Block(530) at 0", "Insert ExpressionStatement(519) into Block(530) at 1", "Insert ExpressionStatement(529) into Block(530) at 2", "Insert SimpleName: ConstantInvokeDynamic(483) into SimpleType: ConstantInvokeDynamic(484) at 0", "Insert Assignment: =(493) into ExpressionStatement(494) at 0", "Insert Assignment: =(518) into ExpressionStatement(519) at 0", "Insert Assignment: =(528) into ExpressionStatement(529) at 0", "Insert SimpleName: class_name(486) into Assignment: =(493) at 0", "Insert MethodInvocation(492) into Assignment: =(493) at 1", "Insert SimpleName: u8(509) into Assignment: =(518) at 0", "Move CastExpression(506) into Assignment: =(518) at 1", "Insert SimpleName: class_name(520) into Assignment: =(528) at 0", "Move MethodInvocation(518) into Assignment: =(528) at 1", "Insert SimpleName: Integer(487) into MethodInvocation(492) at 0", "Insert SimpleName: toString(488) into MethodInvocation(492) at 1", "Insert MethodInvocation(491) into MethodInvocation(492) at 2", "Insert SimpleName: m(489) into MethodInvocation(491) at 0", "Insert SimpleName: getBootstrapMethodAttrIndex(490) into MethodInvocation(491) at 1", "Delete SimpleName: class_name(511)", "Delete VariableDeclarationFragment(519)", "Delete VariableDeclarationStatement(520)"]}}, {"EmptyVisitor_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 29"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: visitConstantInvokeDynamic to MethodDeclaration at 2", "INS SimpleType: ConstantInvokeDynamic to SingleVariableDeclaration at 0", "INS SimpleName: ConstantInvokeDynamic to SimpleType: ConstantInvokeDynamic at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: obj to SingleVariableDeclaration at 1"]}]}}, {"EmptyVisitor_diff": {"operations": ["Move MethodDeclaration(386) into TypeDeclaration: class(405) at 29", "Insert MethodDeclaration(134) into TypeDeclaration: class(405) at 17", "Insert Modifier: public(126) into MethodDeclaration(134) at 0", "Insert PrimitiveType: void(127) into MethodDeclaration(134) at 1", "Insert SimpleName: visitConstantInvokeDynamic(128) into MethodDeclaration(134) at 2", "Insert SingleVariableDeclaration(132) into MethodDeclaration(134) at 3", "Insert Block(133) into MethodDeclaration(134) at 4", "Insert SimpleType: ConstantInvokeDynamic(130) into SingleVariableDeclaration(132) at 0", "Insert SimpleName: obj(131) into SingleVariableDeclaration(132) at 1", "Insert SimpleName: ConstantInvokeDynamic(129) into SimpleType: ConstantInvokeDynamic(130) at 0"]}}, {"FieldOrMethod_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: org.apache.bcel.classfile.ConstantNameAndType to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.apache.bcel.classfile.ConstantUtf8 to ImportDeclaration at 0"]}, {"root": "UPDATE from NameSignatureInstruction to CPInstruction", "operations": ["UPD SimpleName: NameSignatureInstruction from NameSignatureInstruction to CPInstruction", "UPD SimpleType: NameSignatureInstruction from NameSignatureInstruction to CPInstruction"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: ConstantNameAndType to SimpleType: ConstantNameAndType at 0", "INS SimpleName: ConstantUtf8 to SimpleType: ConstantUtf8 at 0", "INS SimpleName: ConstantNameAndType to SimpleType: ConstantNameAndType at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: cmr to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: cnat to VariableDeclarationFragment at 0", "INS SimpleName: index to MethodInvocation at 2", "INS SimpleName: cp to VariableDeclarationFragment at 0", "INS SimpleName: cnat to MethodInvocation at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: getSignature to MethodDeclaration at 3", "INS SimpleName: ConstantPoolGen to SimpleType: ConstantPoolGen at 0", "INS SimpleType: ConstantNameAndType to CastExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: ConstantCP to SimpleType: ConstantCP at 0", "INS SimpleType: ConstantCP to CastExpression at 0", "INS SimpleName: getNameAndTypeIndex to MethodInvocation at 1", "INS SimpleName: getConstant to MethodInvocation at 1", "INS SimpleType: ConstantNameAndType to VariableDeclarationStatement at 0", "INS SimpleName: getConstant to MethodInvocation at 1", "INS SimpleName: cmr to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: ConstantCP to VariableDeclarationStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to CastExpression at 1", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: ConstantPool to SimpleType: ConstantPool at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ReturnStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  signature of referenced method/field. to TagElement: @return at 0", "INS SimpleType: ConstantPool to VariableDeclarationStatement at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: getConstant to MethodInvocation at 1", "INS SimpleName: getConstantPool to MethodInvocation at 1", "INS SimpleType: ConstantUtf8 to CastExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TagElement: @return to Javadoc at 0", "INS SimpleName: ConstantCP to SimpleType: ConstantCP at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: cpg to MethodInvocation at 0", "INS SimpleName: getSignatureIndex to MethodInvocation at 1", "INS SimpleType: ConstantPoolGen to SingleVariableDeclaration at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: cpg to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: getConstantPool to MethodInvocation at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleType: ConstantNameAndType to CastExpression at 0", "INS SimpleType: ConstantCP to VariableDeclarationStatement at 0", "INS SimpleName: ConstantNameAndType to SimpleType: ConstantNameAndType at 0", "INS SimpleName: cp to VariableDeclarationFragment at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: getConstant to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ConstantUtf8 to SimpleType: ConstantUtf8 at 0", "INS SimpleType: ConstantNameAndType to VariableDeclarationStatement at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: ConstantPoolGen to SimpleType: ConstantPoolGen at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: cpg to MethodInvocation at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: getConstant to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: getNameAndTypeIndex to MethodInvocation at 1", "INS SimpleName: cnat to VariableDeclarationFragment at 0", "INS SimpleName: getName to MethodDeclaration at 3", "INS SimpleName: cmr to VariableDeclarationFragment at 0", "INS TextElement:  name of referenced method/field. to TagElement: @return at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ConstantPool to VariableDeclarationStatement at 0", "INS SimpleName: cmr to MethodInvocation at 0", "INS SimpleType: ConstantUtf8 to CastExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getConstant to MethodInvocation at 1", "INS SimpleName: index to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: cnat to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: ConstantNameAndType to SimpleType: ConstantNameAndType at 0", "INS ReturnStatement to Block at 3", "INS Javadoc to MethodDeclaration at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleType: ConstantPoolGen to SingleVariableDeclaration at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: ConstantCP to CastExpression at 0", "INS SimpleName: ConstantCP to SimpleType: ConstantCP at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: ConstantCP to SimpleType: ConstantCP at 0", "INS VariableDeclarationStatement to Block at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: getNameIndex to MethodInvocation at 1", "INS SimpleName: ConstantPool to SimpleType: ConstantPool at 0", "INS VariableDeclarationStatement to Block at 2", "INS TagElement: @return to Javadoc at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: cpg to SingleVariableDeclaration at 1", "INS MethodInvocation to CastExpression at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS TagElement: @return to Javadoc at 0", "operations": ["INS TagElement: @return to Javadoc at 0"]}, {"root": "MOVE from TagElement: @return", "operations": ["MOV TextElement:  name of the referenced class/interface to TagElement: @return at 0"]}, {"root": "UPDATE from  If the instruction references an array class, to deprecated If the instruction references an array class,", "operations": ["UPD TextElement:  If the instruction references an array class, from  If the instruction references an array class, to deprecated If the instruction references an array class,"]}, {"root": "MOVE from TagElement: @return", "operations": ["MOV TextElement:  If the instruction references an array class, to TagElement: @return at 1", "MOV TextElement: sometimes wrong (e.g., if the \"clone()\" method is to TagElement: @return at 4", "MOV TextElement: this method will return \"java.lang.Object\". to TagElement: @return at 2", "MOV TextElement: called on an array).  A better idea is to use to TagElement: @return at 5", "MOV TextElement: For code generated by Java 1.5, this answer is to TagElement: @return at 3", "MOV TextElement: the getReferenceType() method, which correctly distinguishes to TagElement: @return at 6", "MOV TextElement: between class types and array types. to TagElement: @return at 7"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}]}}, {"FieldOrMethod_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(368) at 2", "Insert ImportDeclaration(9) into CompilationUnit(368) at 4", "Insert QualifiedName: org.apache.bcel.classfile.ConstantNameAndType(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: org.apache.bcel.classfile.ConstantUtf8(8) into ImportDeclaration(9) at 0", "Update SimpleType: NameSignatureInstruction(18) to CPInstruction", "Insert MethodDeclaration(116) into TypeDeclaration: class(367) at 9", "Insert MethodDeclaration(176) into TypeDeclaration: class(367) at 10", "Update SimpleName: NameSignatureInstruction(17) to CPInstruction", "Insert Javadoc(59) into MethodDeclaration(116) at 0", "Insert Modifier: public(60) into MethodDeclaration(116) at 1", "Insert SimpleType: String(62) into MethodDeclaration(116) at 2", "Insert SimpleName: getSignature(63) into MethodDeclaration(116) at 3", "Insert SingleVariableDeclaration(67) into MethodDeclaration(116) at 4", "Insert Block(115) into MethodDeclaration(116) at 5", "Insert Javadoc(119) into MethodDeclaration(176) at 0", "Insert Modifier: public(120) into MethodDeclaration(176) at 1", "Insert SimpleType: String(122) into MethodDeclaration(176) at 2", "Insert SimpleName: getName(123) into MethodDeclaration(176) at 3", "Insert SingleVariableDeclaration(127) into MethodDeclaration(176) at 4", "Insert Block(175) into MethodDeclaration(176) at 5", "Insert TagElement: @return(58) into Javadoc(59) at 0", "Insert SimpleName: String(61) into SimpleType: String(62) at 0", "Insert SimpleType: ConstantPoolGen(65) into SingleVariableDeclaration(67) at 0", "Insert SimpleName: cpg(66) into SingleVariableDeclaration(67) at 1", "Insert VariableDeclarationStatement(75) into Block(115) at 0", "Insert VariableDeclarationStatement(87) into Block(115) at 1", "Insert VariableDeclarationStatement(101) into Block(115) at 2", "Insert ReturnStatement(114) into Block(115) at 3", "Insert TagElement: @return(118) into Javadoc(119) at 0", "Insert SimpleName: String(121) into SimpleType: String(122) at 0", "Insert SimpleType: ConstantPoolGen(125) into SingleVariableDeclaration(127) at 0", "Insert SimpleName: cpg(126) into SingleVariableDeclaration(127) at 1", "Insert VariableDeclarationStatement(135) into Block(175) at 0", "Insert VariableDeclarationStatement(147) into Block(175) at 1", "Insert VariableDeclarationStatement(161) into Block(175) at 2", "Insert ReturnStatement(174) into Block(175) at 3", "Insert TagElement: @return(185) into Javadoc(186) at 0", "Insert TextElement:  signature of referenced method/field.(57) into TagElement: @return(58) at 0", "Insert SimpleName: ConstantPoolGen(64) into SimpleType: ConstantPoolGen(65) at 0", "Insert SimpleType: ConstantPool(69) into VariableDeclarationStatement(75) at 0", "Insert VariableDeclarationFragment(74) into VariableDeclarationStatement(75) at 1", "Insert SimpleType: ConstantCP(77) into VariableDeclarationStatement(87) at 0", "Insert VariableDeclarationFragment(86) into VariableDeclarationStatement(87) at 1", "Insert SimpleType: ConstantNameAndType(89) into VariableDeclarationStatement(101) at 0", "Insert VariableDeclarationFragment(100) into VariableDeclarationStatement(101) at 1", "Insert MethodInvocation(113) into ReturnStatement(114) at 0", "Insert TextElement:  name of referenced method/field.(117) into TagElement: @return(118) at 0", "Insert SimpleName: ConstantPoolGen(124) into SimpleType: ConstantPoolGen(125) at 0", "Insert SimpleType: ConstantPool(129) into VariableDeclarationStatement(135) at 0", "Insert VariableDeclarationFragment(134) into VariableDeclarationStatement(135) at 1", "Insert SimpleType: ConstantCP(137) into VariableDeclarationStatement(147) at 0", "Insert VariableDeclarationFragment(146) into VariableDeclarationStatement(147) at 1", "Insert SimpleType: ConstantNameAndType(149) into VariableDeclarationStatement(161) at 0", "Insert VariableDeclarationFragment(160) into VariableDeclarationStatement(161) at 1", "Insert MethodInvocation(173) into ReturnStatement(174) at 0", "Move TextElement:  name of the referenced class/interface(53) into TagElement: @return(185) at 0", "Update TextElement:  If the instruction references an array class,(55) to deprecated If the instruction references an array class,", "Move TextElement:  If the instruction references an array class,(55) into TagElement: @return(185) at 1", "Move TextElement: this method will return \"java.lang.Object\".(56) into TagElement: @return(185) at 2", "Move TextElement: For code generated by Java 1.5, this answer is(57) into TagElement: @return(185) at 3", "Move TextElement: sometimes wrong (e.g., if the \"clone()\" method is(58) into TagElement: @return(185) at 4", "Move TextElement: called on an array).  A better idea is to use(59) into TagElement: @return(185) at 5", "Move TextElement: the getReferenceType() method, which correctly distinguishes(60) into TagElement: @return(185) at 6", "Move TextElement: between class types and array types.(61) into TagElement: @return(185) at 7", "Insert SimpleName: ConstantPool(68) into SimpleType: ConstantPool(69) at 0", "Insert SimpleName: cp(70) into VariableDeclarationFragment(74) at 0", "Insert MethodInvocation(73) into VariableDeclarationFragment(74) at 1", "Insert SimpleName: ConstantCP(76) into SimpleType: ConstantCP(77) at 0", "Insert SimpleName: cmr(78) into VariableDeclarationFragment(86) at 0", "Insert CastExpression(85) into VariableDeclarationFragment(86) at 1", "Insert SimpleName: ConstantNameAndType(88) into SimpleType: ConstantNameAndType(89) at 0", "Insert SimpleName: cnat(90) into VariableDeclarationFragment(100) at 0", "Insert CastExpression(99) into VariableDeclarationFragment(100) at 1", "Insert ParenthesizedExpression(111) into MethodInvocation(113) at 0", "Insert SimpleName: getBytes(112) into MethodInvocation(113) at 1", "Insert SimpleName: ConstantPool(128) into SimpleType: ConstantPool(129) at 0", "Insert SimpleName: cp(130) into VariableDeclarationFragment(134) at 0", "Insert MethodInvocation(133) into VariableDeclarationFragment(134) at 1", "Insert SimpleName: ConstantCP(136) into SimpleType: ConstantCP(137) at 0", "Insert SimpleName: cmr(138) into VariableDeclarationFragment(146) at 0", "Insert CastExpression(145) into VariableDeclarationFragment(146) at 1", "Insert SimpleName: ConstantNameAndType(148) into SimpleType: ConstantNameAndType(149) at 0", "Insert SimpleName: cnat(150) into VariableDeclarationFragment(160) at 0", "Insert CastExpression(159) into VariableDeclarationFragment(160) at 1", "Insert ParenthesizedExpression(171) into MethodInvocation(173) at 0", "Insert SimpleName: getBytes(172) into MethodInvocation(173) at 1", "Insert SimpleName: cpg(71) into MethodInvocation(73) at 0", "Insert SimpleName: getConstantPool(72) into MethodInvocation(73) at 1", "Insert SimpleType: ConstantCP(80) into CastExpression(85) at 0", "Insert MethodInvocation(84) into CastExpression(85) at 1", "Insert SimpleType: ConstantNameAndType(92) into CastExpression(99) at 0", "Insert MethodInvocation(98) into CastExpression(99) at 1", "Insert CastExpression(110) into ParenthesizedExpression(111) at 0", "Insert SimpleName: cpg(131) into MethodInvocation(133) at 0", "Insert SimpleName: getConstantPool(132) into MethodInvocation(133) at 1", "Insert SimpleType: ConstantCP(140) into CastExpression(145) at 0", "Insert MethodInvocation(144) into CastExpression(145) at 1", "Insert SimpleType: ConstantNameAndType(152) into CastExpression(159) at 0", "Insert MethodInvocation(158) into CastExpression(159) at 1", "Insert CastExpression(170) into ParenthesizedExpression(171) at 0", "Insert SimpleName: ConstantCP(79) into SimpleType: ConstantCP(80) at 0", "Insert SimpleName: cp(81) into MethodInvocation(84) at 0", "Insert SimpleName: getConstant(82) into MethodInvocation(84) at 1", "Insert SimpleName: index(83) into MethodInvocation(84) at 2", "Insert SimpleName: ConstantNameAndType(91) into SimpleType: ConstantNameAndType(92) at 0", "Insert SimpleName: cp(93) into MethodInvocation(98) at 0", "Insert SimpleName: getConstant(94) into MethodInvocation(98) at 1", "Insert MethodInvocation(97) into MethodInvocation(98) at 2", "Insert SimpleType: ConstantUtf8(103) into CastExpression(110) at 0", "Insert MethodInvocation(109) into CastExpression(110) at 1", "Insert SimpleName: ConstantCP(139) into SimpleType: ConstantCP(140) at 0", "Insert SimpleName: cp(141) into MethodInvocation(144) at 0", "Insert SimpleName: getConstant(142) into MethodInvocation(144) at 1", "Insert SimpleName: index(143) into MethodInvocation(144) at 2", "Insert SimpleName: ConstantNameAndType(151) into SimpleType: ConstantNameAndType(152) at 0", "Insert SimpleName: cp(153) into MethodInvocation(158) at 0", "Insert SimpleName: getConstant(154) into MethodInvocation(158) at 1", "Insert MethodInvocation(157) into MethodInvocation(158) at 2", "Insert SimpleType: ConstantUtf8(163) into CastExpression(170) at 0", "Insert MethodInvocation(169) into CastExpression(170) at 1", "Insert SimpleName: cmr(95) into MethodInvocation(97) at 0", "Insert SimpleName: getNameAndTypeIndex(96) into MethodInvocation(97) at 1", "Insert SimpleName: ConstantUtf8(102) into SimpleType: ConstantUtf8(103) at 0", "Insert SimpleName: cp(104) into MethodInvocation(109) at 0", "Insert SimpleName: getConstant(105) into MethodInvocation(109) at 1", "Insert MethodInvocation(108) into MethodInvocation(109) at 2", "Insert SimpleName: cmr(155) into MethodInvocation(157) at 0", "Insert SimpleName: getNameAndTypeIndex(156) into MethodInvocation(157) at 1", "Insert SimpleName: ConstantUtf8(162) into SimpleType: ConstantUtf8(163) at 0", "Insert SimpleName: cp(164) into MethodInvocation(169) at 0", "Insert SimpleName: getConstant(165) into MethodInvocation(169) at 1", "Insert MethodInvocation(168) into MethodInvocation(169) at 2", "Insert SimpleName: cnat(106) into MethodInvocation(108) at 0", "Insert SimpleName: getSignatureIndex(107) into MethodInvocation(108) at 1", "Insert SimpleName: cnat(166) into MethodInvocation(168) at 0", "Insert SimpleName: getNameIndex(167) into MethodInvocation(168) at 1", "Delete TagElement: @return(54)", "Delete TagElement: @deprecated(62)", "Delete SimpleName: Deprecated(64)", "Delete MarkerAnnotation(65)"]}}, {"GETFIELD_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL SimpleName: visitNameSignatureInstruction", "DEL SimpleName: v", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"GETFIELD_diff": {"operations": ["Delete SimpleName: v(167)", "Delete SimpleName: visitNameSignatureInstruction(168)", "Delete ThisExpression(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)"]}}, {"GETSTATIC_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: visitNameSignatureInstruction", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: v"]}]}}, {"GETSTATIC_diff": {"operations": ["Delete SimpleName: v(157)", "Delete SimpleName: visitNameSignatureInstruction(158)", "Delete ThisExpression(159)", "Delete MethodInvocation(160)", "Delete ExpressionStatement(161)"]}}, {"INVOKEDYNAMIC_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 20"]}, {"root": "UPDATE from java.util.StringTokenizer to java.io.DataOutputStream", "operations": ["UPD QualifiedName: java.util.StringTokenizer from java.util.StringTokenizer to java.io.DataOutputStream"]}, {"root": "UPDATE from NameSignatureInstruction to InvokeInstruction", "operations": ["UPD SimpleName: NameSignatureInstruction from NameSignatureInstruction to InvokeInstruction", "UPD SimpleType: NameSignatureInstruction from NameSignatureInstruction to InvokeInstruction"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleType: IOException to MethodDeclaration at 6", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodDeclaration to TypeDeclaration: class at 10"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 2", "MOV PrimitiveType: int to MethodDeclaration at 3", "MOV SimpleName: consumeStack to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from int to void", "operations": ["UPD PrimitiveType: int from int to void"]}, {"root": "UPDATE from consumeStack to dump", "operations": ["UPD SimpleName: consumeStack from consumeStack to dump"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: String to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SimpleName: toString to MethodDeclaration at 5", "operations": ["INS SimpleName: toString to MethodDeclaration at 5"]}, {"root": "UPDATE from @return to @param", "operations": ["UPD TagElement: @return from @return to @param"]}, {"root": "UPDATE from ConstantPoolGen to DataOutputStream", "operations": ["UPD SimpleType: ConstantPoolGen from ConstantPoolGen to DataOutputStream", "UPD SimpleName: ConstantPoolGen from ConstantPoolGen to DataOutputStream"]}, {"root": "UPDATE from cpg to out", "operations": ["UPD SimpleName: cpg from cpg to out", "UPD SimpleName: Type from Type to out", "UPD SimpleName: getReturnType from getReturnType to out", "UPD SimpleName: Type from Type to out", "UPD SimpleName: Type from Type to out"]}, {"root": "UPDATE from String to IOException", "operations": ["UPD SimpleName: String from String to IOException"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: String to SimpleType: IOException at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bytes to MethodInvocation at 0", "INS SimpleName: readByte to MethodInvocation at 1", "INS ExpressionStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: visitLoadClass to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: v to MethodInvocation at 0", "INS ThisExpression to MethodInvocation at 2", "INS ExpressionStatement to Block at 4"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS ExpressionStatement to Block at 6", "INS SimpleName: v to MethodInvocation at 0", "INS ThisExpression to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: visitFieldOrMethod to MethodInvocation at 1"]}, {"root": "INS QualifiedName: Constants.INVOKEDYNAMIC to SuperConstructorInvocation at 0", "operations": ["INS QualifiedName: Constants.INVOKEDYNAMIC to SuperConstructorInvocation at 0"]}, {"root": "UPDATE from Also works for instructions whose stack effect depends on the to Dump instruction as byte code to stream out.", "operations": ["UPD TextElement: Also works for instructions whose stack effect depends on the from Also works for instructions whose stack effect depends on the to Dump instruction as byte code to stream out."]}, {"root": "INS SimpleName: out to TagElement: @return at 0", "operations": ["INS SimpleName: out to TagElement: @return at 0"]}, {"root": "UPDATE from  Number of words consumed from stack by this instruction to  Output stream", "operations": ["UPD TextElement:  Number of words consumed from stack by this instruction from  Number of words consumed from stack by this instruction to  Output stream"]}, {"root": "INS SuperMethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: cp to SuperMethodInvocation at 1", "INS SuperMethodInvocation to ReturnStatement at 0", "INS SimpleName: toString to SuperMethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: signature to MethodInvocation at 2", "MOV SimpleName: getArgumentTypesSize to MethodInvocation at 1", "MOV SimpleName: Type to MethodInvocation at 0"]}, {"root": "UPDATE from getSignature to writeByte", "operations": ["UPD SimpleName: getSignature from getSignature to writeByte", "UPD SimpleName: cpg from cpg to writeByte", "UPD SimpleName: getArgumentTypesSize from getArgumentTypesSize to writeByte"]}, {"root": "UPDATE from signature to opcode", "operations": ["UPD SimpleName: signature from signature to opcode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: signature to MethodInvocation at 2", "MOV SimpleName: getReturnTypeSize to MethodInvocation at 1", "MOV SimpleName: Type to MethodInvocation at 0"]}, {"root": "UPDATE from getReturnTypeSize to writeShort", "operations": ["UPD SimpleName: getReturnTypeSize from getReturnTypeSize to writeShort"]}, {"root": "UPDATE from signature to index", "operations": ["UPD SimpleName: signature from signature to index"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: cpg to MethodInvocation at 1", "MOV SimpleName: getReturnType to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Type to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSignature to MethodInvocation at 1"]}, {"root": "UPDATE from readUnsignedShort to readByte", "operations": ["UPD SimpleName: readUnsignedShort from readUnsignedShort to readByte"]}, {"root": "UPDATE from visitNameSignatureInstruction to visitInvokeInstruction", "operations": ["UPD SimpleName: visitNameSignatureInstruction from visitNameSignatureInstruction to visitInvokeInstruction"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.bcel.classfile.Constant", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.bcel.classfile.ConstantInvokeDynamic"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.bcel.classfile.ConstantNameAndType", "DEL ImportDeclaration"]}, {"root": "DEL TagElement: @author", "operations": ["DEL TagElement: @author", "DEL TextElement:   Bill Pugh"]}, {"root": "DEL SimpleType: ExceptionThrower", "operations": ["DEL SimpleName: ExceptionThrower", "DEL SimpleType: ExceptionThrower"]}, {"root": "DEL SimpleType: StackConsumer", "operations": ["DEL SimpleName: StackConsumer", "DEL SimpleType: StackConsumer"]}, {"root": "DEL SimpleType: StackProducer", "operations": ["DEL SimpleName: StackProducer", "DEL SimpleType: StackProducer"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  to constant pool", "DEL SimpleName: index", "DEL TagElement: @param", "DEL Javadoc"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: short", "DEL SimpleName: opcode", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: opcode", "operations": ["DEL SimpleName: opcode"]}, {"root": "DEL TextElement: constant pool entry they reference.", "operations": ["DEL TextElement: constant pool entry they reference."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: cp", "DEL SimpleName: nextToken", "DEL VariableDeclarationFragment", "DEL SimpleName: index", "DEL MethodInvocation", "DEL SimpleName: StringTokenizer", "DEL StringLiteral: \" \"", "DEL SimpleName: StringTokenizer", "DEL SimpleName: toString", "DEL CharacterLiteral: '/'", "DEL ClassInstanceCreation", "DEL SimpleName: cp", "DEL SimpleName: nextToken", "DEL MethodInvocation", "DEL SimpleName: replace", "DEL SimpleType: StringTokenizer", "DEL VariableDeclarationFragment", "DEL SimpleName: constantToString", "DEL SimpleName: c", "DEL SimpleType: StringTokenizer", "DEL CharacterLiteral: '.'", "DEL SimpleName: tok", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL QualifiedName: Constants.OPCODE_NAMES", "DEL SimpleName: opcode", "DEL Modifier: public", "DEL SimpleName: c", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: tok", "DEL Block", "DEL SimpleType: Constant", "DEL SimpleName: tok", "DEL InfixExpression: +", "DEL VariableDeclarationStatement", "DEL SimpleName: Constant", "DEL SimpleName: getConstant", "DEL ArrayAccess"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: ConstantPool", "DEL VariableDeclarationFragment", "DEL SimpleName: cpg", "DEL SimpleName: getConstantPool", "DEL VariableDeclarationStatement", "DEL SimpleName: ConstantInvokeDynamic", "DEL ReturnStatement", "DEL SimpleName: cpg", "DEL SimpleType: ConstantInvokeDynamic", "DEL MethodDeclaration", "DEL SimpleName: cp", "DEL SimpleName: getInvokeDynamic", "DEL Block", "DEL TextElement: Get the ConstantInvokeDynamic associated with this instruction", "DEL Javadoc", "DEL SimpleName: index", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: ConstantPoolGen", "DEL CastExpression", "DEL SimpleType: ConstantInvokeDynamic", "DEL SimpleName: ConstantPool", "DEL SimpleName: getConstant", "DEL TagElement", "DEL SimpleType: ConstantPoolGen", "DEL SimpleName: ConstantInvokeDynamic", "DEL SimpleName: cp", "DEL SingleVariableDeclaration", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: cpg", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: getNameAndType", "DEL MethodDeclaration", "DEL SimpleName: ConstantInvokeDynamic", "DEL CastExpression", "DEL ReturnStatement", "DEL SimpleName: cpg", "DEL MethodInvocation", "DEL SimpleName: getConstant", "DEL SimpleName: getConstantPool", "DEL SimpleName: ConstantNameAndType", "DEL SimpleName: cpg", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: getNameAndTypeIndex", "DEL VariableDeclarationStatement", "DEL SimpleType: ConstantInvokeDynamic", "DEL SimpleName: cp", "DEL SimpleType: ConstantPoolGen", "DEL SimpleName: ConstantNameAndType", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: ConstantNameAndType", "DEL SimpleType: ConstantNameAndType", "DEL SimpleName: id", "DEL Modifier: public", "DEL SimpleType: ConstantPool", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ConstantPoolGen", "DEL SimpleName: id", "DEL VariableDeclarationStatement", "DEL SimpleName: ConstantPool", "DEL SimpleName: getInvokeDynamic"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: getSignature", "DEL MethodInvocation", "DEL SimpleName: signature", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: cpg", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL TextElement:  Number of words produced onto stack by this instruction", "DEL SimpleName: cpg", "DEL SimpleType: ConstantPoolGen", "DEL SimpleName: cpg", "DEL SimpleName: Override", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: signature", "DEL SimpleName: getSignature", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: produceStack", "DEL TagElement", "DEL SimpleName: String", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: ConstantPoolGen", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement: Also works for instructions whose stack effect depends on the", "DEL TextElement: constant pool entry they reference.", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: Override", "DEL SimpleName: cpg", "DEL ReturnStatement", "DEL Javadoc", "DEL MarkerAnnotation", "DEL TextElement:  return type of referenced method.", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleType: Type", "DEL SimpleName: ConstantPoolGen", "DEL SingleVariableDeclaration", "DEL SimpleType: ConstantPoolGen", "DEL SimpleName: getType", "DEL SimpleName: Type"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: ConstantPoolGen", "DEL SimpleName: String", "DEL SimpleName: getName", "DEL TagElement: @return", "DEL SimpleName: cpg", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: cpg", "DEL TextElement:  name of referenced method.", "DEL Modifier: public", "DEL Block", "DEL SimpleName: ConstantPoolGen", "DEL Javadoc", "DEL SimpleName: getMethodName", "DEL MethodDeclaration", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  return type of referenced method.", "DEL Block", "DEL SimpleName: ConstantPoolGen", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: cpg", "DEL SimpleName: Type", "DEL TagElement: @return", "DEL SimpleType: Type", "DEL MethodInvocation", "DEL SimpleName: getReturnType", "DEL SimpleType: ConstantPoolGen", "DEL SimpleName: getReturnType", "DEL SimpleName: cpg", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ReturnStatement", "DEL Javadoc"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @return", "DEL TextElement:  argument types of referenced method.", "DEL Javadoc"]}, {"root": "DEL ArrayType: Type[]", "operations": ["DEL Dimension", "DEL SimpleType: Type", "DEL ArrayType: Type[]", "DEL SimpleName: Type"]}, {"root": "DEL SimpleName: getArgumentTypes", "operations": ["DEL SimpleName: getArgumentTypes"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: ConstantPoolGen", "DEL SimpleName: cpg", "DEL SingleVariableDeclaration", "DEL SimpleName: ConstantPoolGen"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSignature", "DEL SimpleName: cpg", "DEL SimpleName: getArgumentTypes", "DEL SimpleName: Type", "DEL MethodInvocation"]}]}}, {"INVOKEDYNAMIC_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(280) at 3", "Move MethodDeclaration(329) into TypeDeclaration: class(279) at 20", "Update QualifiedName: java.util.StringTokenizer(4) to java.io.DataOutputStream", "Update SimpleType: NameSignatureInstruction(34) to InvokeInstruction", "Insert MethodDeclaration(90) into TypeDeclaration: class(279) at 7", "Update SimpleName: NameSignatureInstruction(33) to InvokeInstruction", "Move Javadoc(197) into MethodDeclaration(90) at 0", "Move MarkerAnnotation(199) into MethodDeclaration(90) at 1", "Move Modifier: public(200) into MethodDeclaration(90) at 2", "Update PrimitiveType: int(201) to void", "Move PrimitiveType: int(201) into MethodDeclaration(90) at 3", "Update SimpleName: consumeStack(202) to dump", "Move SimpleName: consumeStack(202) into MethodDeclaration(90) at 4", "Move SingleVariableDeclaration(206) into MethodDeclaration(90) at 5", "Insert SimpleType: IOException(68) into MethodDeclaration(90) at 6", "Insert Block(89) into MethodDeclaration(90) at 7", "Move Javadoc(75) into MethodDeclaration(145) at 0", "Move MarkerAnnotation(77) into MethodDeclaration(145) at 1", "Move SimpleType: String(80) into MethodDeclaration(145) at 4", "Insert SimpleName: toString(135) into MethodDeclaration(145) at 4", "Move SingleVariableDeclaration(85) into MethodDeclaration(145) at 6", "Update TagElement: @return(196) to @param", "Update SimpleType: ConstantPoolGen(204) to DataOutputStream", "Update SimpleName: cpg(205) to out", "Update SimpleName: String(207) to IOException", "Move SimpleName: String(207) into SimpleType: IOException(68) at 0", "Insert ExpressionStatement(73) into Block(89) at 0", "Insert ExpressionStatement(78) into Block(89) at 1", "Insert ExpressionStatement(83) into Block(89) at 2", "Insert ExpressionStatement(88) into Block(89) at 3", "Insert ExpressionStatement(124) into Block(125) at 3", "Insert ExpressionStatement(256) into Block(277) at 4", "Insert ExpressionStatement(266) into Block(277) at 6", "Insert QualifiedName: Constants.INVOKEDYNAMIC(47) into SuperConstructorInvocation(49) at 0", "Update TextElement: Also works for instructions whose stack effect depends on the(192) to Dump instruction as byte code to stream out.", "Insert SimpleName: out(54) into TagElement: @param(56) at 0", "Update TextElement:  Number of words consumed from stack by this instruction(195) to  Output stream", "Update SimpleName: ConstantPoolGen(203) to DataOutputStream", "Insert MethodInvocation(72) into ExpressionStatement(73) at 0", "Insert MethodInvocation(77) into ExpressionStatement(78) at 0", "Insert MethodInvocation(82) into ExpressionStatement(83) at 0", "Insert MethodInvocation(87) into ExpressionStatement(88) at 0", "Insert MethodInvocation(123) into ExpressionStatement(124) at 0", "Insert SuperMethodInvocation(142) into ReturnStatement(143) at 0", "Insert MethodInvocation(255) into ExpressionStatement(256) at 0", "Insert MethodInvocation(265) into ExpressionStatement(266) at 0", "Update SimpleName: Type(215) to out", "Move SimpleName: Type(215) into MethodInvocation(72) at 0", "Update SimpleName: getArgumentTypesSize(216) to writeByte", "Move SimpleName: getArgumentTypesSize(216) into MethodInvocation(72) at 1", "Update SimpleName: signature(217) to opcode", "Move SimpleName: signature(217) into MethodInvocation(72) at 2", "Update SimpleName: Type(245) to out", "Move SimpleName: Type(245) into MethodInvocation(77) at 0", "Update SimpleName: getReturnTypeSize(246) to writeShort", "Move SimpleName: getReturnTypeSize(246) into MethodInvocation(77) at 1", "Update SimpleName: signature(247) to index", "Move SimpleName: signature(247) into MethodInvocation(77) at 2", "Update SimpleName: getReturnType(265) to out", "Move SimpleName: getReturnType(265) into MethodInvocation(82) at 0", "Update SimpleName: cpg(266) to writeByte", "Move SimpleName: cpg(266) into MethodInvocation(82) at 1", "Insert NumberLiteral: 0(81) into MethodInvocation(82) at 2", "Update SimpleName: Type(299) to out", "Move SimpleName: Type(299) into MethodInvocation(87) at 0", "Update SimpleName: getSignature(301) to writeByte", "Move SimpleName: getSignature(301) into MethodInvocation(87) at 1", "Insert NumberLiteral: 0(86) into MethodInvocation(87) at 2", "Update SimpleName: readUnsignedShort(357) to readByte", "Insert SimpleName: bytes(121) into MethodInvocation(123) at 0", "Insert SimpleName: readByte(122) into MethodInvocation(123) at 1", "Insert SimpleName: toString(140) into SuperMethodInvocation(142) at 0", "Insert SimpleName: cp(141) into SuperMethodInvocation(142) at 1", "Insert SimpleName: v(252) into MethodInvocation(255) at 0", "Insert SimpleName: visitLoadClass(253) into MethodInvocation(255) at 1", "Insert ThisExpression(254) into MethodInvocation(255) at 2", "Insert SimpleName: v(262) into MethodInvocation(265) at 0", "Insert SimpleName: visitFieldOrMethod(263) into MethodInvocation(265) at 1", "Insert ThisExpression(264) into MethodInvocation(265) at 2", "Update SimpleName: visitNameSignatureInstruction(474) to visitInvokeInstruction", "Delete QualifiedName: org.apache.bcel.classfile.Constant(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.bcel.classfile.ConstantInvokeDynamic(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.bcel.classfile.ConstantNameAndType(14)", "Delete ImportDeclaration(15)", "Delete TextElement:   Bill Pugh(26)", "Delete TagElement: @author(27)", "Delete SimpleName: ExceptionThrower(35)", "Delete SimpleType: ExceptionThrower(36)", "Delete SimpleName: StackConsumer(37)", "Delete SimpleType: StackConsumer(38)", "Delete SimpleName: StackProducer(39)", "Delete SimpleType: StackProducer(40)", "Delete SimpleName: index(56)", "Delete TextElement:  to constant pool(57)", "Delete TagElement: @param(58)", "Delete Javadoc(59)", "Delete PrimitiveType: short(62)", "Delete SimpleName: opcode(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: opcode(68)", "Delete TextElement: constant pool entry they reference.(193)", "Delete Modifier: public(78)", "Delete SimpleName: toString(81)", "Delete SimpleName: Constant(86)", "Delete SimpleType: Constant(87)", "Delete SimpleName: c(88)", "Delete SimpleName: cp(89)", "Delete SimpleName: getConstant(90)", "Delete SimpleName: index(91)", "Delete MethodInvocation(92)", "Delete VariableDeclarationFragment(93)", "Delete VariableDeclarationStatement(94)", "Delete SimpleName: StringTokenizer(95)", "Delete SimpleType: StringTokenizer(96)", "Delete SimpleName: tok(97)", "Delete SimpleName: StringTokenizer(98)", "Delete SimpleType: StringTokenizer(99)", "Delete SimpleName: cp(100)", "Delete SimpleName: constantToString(101)", "Delete SimpleName: c(102)", "Delete MethodInvocation(103)", "Delete ClassInstanceCreation(104)", "Delete VariableDeclarationFragment(105)", "Delete VariableDeclarationStatement(106)", "Delete QualifiedName: Constants.OPCODE_NAMES(107)", "Delete SimpleName: opcode(108)", "Delete ArrayAccess(109)", "Delete StringLiteral: \" \"(110)", "Delete SimpleName: tok(111)", "Delete SimpleName: nextToken(112)", "Delete MethodInvocation(113)", "Delete SimpleName: replace(114)", "Delete CharacterLiteral: '.'(115)", "Delete CharacterLiteral: '/'(116)", "Delete MethodInvocation(117)", "Delete SimpleName: tok(118)", "Delete SimpleName: nextToken(119)", "Delete MethodInvocation(120)", "Delete InfixExpression: +(121)", "Delete ReturnStatement(122)", "Delete Block(123)", "Delete MethodDeclaration(124)", "Delete TextElement: Get the ConstantInvokeDynamic associated with this instruction(125)", "Delete TagElement(126)", "Delete Javadoc(127)", "Delete Modifier: public(128)", "Delete SimpleName: ConstantInvokeDynamic(129)", "Delete SimpleType: ConstantInvokeDynamic(130)", "Delete SimpleName: getInvokeDynamic(131)", "Delete SimpleName: ConstantPoolGen(132)", "Delete SimpleType: ConstantPoolGen(133)", "Delete SimpleName: cpg(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: ConstantPool(136)", "Delete SimpleType: ConstantPool(137)", "Delete SimpleName: cp(138)", "Delete SimpleName: cpg(139)", "Delete SimpleName: getConstantPool(140)", "Delete MethodInvocation(141)", "Delete VariableDeclarationFragment(142)", "Delete VariableDeclarationStatement(143)", "Delete SimpleName: ConstantInvokeDynamic(144)", "Delete SimpleType: ConstantInvokeDynamic(145)", "Delete SimpleName: cp(146)", "Delete SimpleName: getConstant(147)", "Delete SimpleName: index(148)", "Delete MethodInvocation(149)", "Delete CastExpression(150)", "Delete ReturnStatement(151)", "Delete Block(152)", "Delete MethodDeclaration(153)", "Delete SimpleName: Override(154)", "Delete MarkerAnnotation(155)", "Delete Modifier: public(156)", "Delete SimpleName: ConstantNameAndType(157)", "Delete SimpleType: ConstantNameAndType(158)", "Delete SimpleName: getNameAndType(159)", "Delete SimpleName: ConstantPoolGen(160)", "Delete SimpleType: ConstantPoolGen(161)", "Delete SimpleName: cpg(162)", "Delete SingleVariableDeclaration(163)", "Delete SimpleName: ConstantPool(164)", "Delete SimpleType: ConstantPool(165)", "Delete SimpleName: cp(166)", "Delete SimpleName: cpg(167)", "Delete SimpleName: getConstantPool(168)", "Delete MethodInvocation(169)", "Delete VariableDeclarationFragment(170)", "Delete VariableDeclarationStatement(171)", "Delete SimpleName: ConstantInvokeDynamic(172)", "Delete SimpleType: ConstantInvokeDynamic(173)", "Delete SimpleName: id(174)", "Delete SimpleName: getInvokeDynamic(175)", "Delete SimpleName: cpg(176)", "Delete MethodInvocation(177)", "Delete VariableDeclarationFragment(178)", "Delete VariableDeclarationStatement(179)", "Delete SimpleName: ConstantNameAndType(180)", "Delete SimpleType: ConstantNameAndType(181)", "Delete SimpleName: cp(182)", "Delete SimpleName: getConstant(183)", "Delete SimpleName: id(184)", "Delete SimpleName: getNameAndTypeIndex(185)", "Delete MethodInvocation(186)", "Delete MethodInvocation(187)", "Delete CastExpression(188)", "Delete ReturnStatement(189)", "Delete Block(190)", "Delete MethodDeclaration(191)", "Delete SimpleType: String(208)", "Delete SimpleName: signature(209)", "Delete SimpleName: getSignature(210)", "Delete SimpleName: cpg(211)", "Delete MethodInvocation(212)", "Delete VariableDeclarationFragment(213)", "Delete VariableDeclarationStatement(214)", "Delete MethodInvocation(218)", "Delete ReturnStatement(219)", "Delete Block(220)", "Delete MethodDeclaration(221)", "Delete TextElement: Also works for instructions whose stack effect depends on the(222)", "Delete TextElement: constant pool entry they reference.(223)", "Delete TagElement(224)", "Delete TextElement:  Number of words produced onto stack by this instruction(225)", "Delete TagElement: @return(226)", "Delete Javadoc(227)", "Delete SimpleName: Override(228)", "Delete MarkerAnnotation(229)", "Delete Modifier: public(230)", "Delete PrimitiveType: int(231)", "Delete SimpleName: produceStack(232)", "Delete SimpleName: ConstantPoolGen(233)", "Delete SimpleType: ConstantPoolGen(234)", "Delete SimpleName: cpg(235)", "Delete SingleVariableDeclaration(236)", "Delete SimpleName: String(237)", "Delete SimpleType: String(238)", "Delete SimpleName: signature(239)", "Delete SimpleName: getSignature(240)", "Delete SimpleName: cpg(241)", "Delete MethodInvocation(242)", "Delete VariableDeclarationFragment(243)", "Delete VariableDeclarationStatement(244)", "Delete MethodInvocation(248)", "Delete ReturnStatement(249)", "Delete Block(250)", "Delete MethodDeclaration(251)", "Delete TextElement:  return type of referenced method.(252)", "Delete TagElement: @return(253)", "Delete Javadoc(254)", "Delete SimpleName: Override(255)", "Delete MarkerAnnotation(256)", "Delete Modifier: public(257)", "Delete SimpleName: Type(258)", "Delete SimpleType: Type(259)", "Delete SimpleName: getType(260)", "Delete SimpleName: ConstantPoolGen(261)", "Delete SimpleType: ConstantPoolGen(262)", "Delete SimpleName: cpg(263)", "Delete SingleVariableDeclaration(264)", "Delete MethodInvocation(267)", "Delete ReturnStatement(268)", "Delete Block(269)", "Delete MethodDeclaration(270)", "Delete TextElement:  name of referenced method.(271)", "Delete TagElement: @return(272)", "Delete Javadoc(273)", "Delete Modifier: public(274)", "Delete SimpleName: String(275)", "Delete SimpleType: String(276)", "Delete SimpleName: getMethodName(277)", "Delete SimpleName: ConstantPoolGen(278)", "Delete SimpleType: ConstantPoolGen(279)", "Delete SimpleName: cpg(280)", "Delete SingleVariableDeclaration(281)", "Delete SimpleName: getName(282)", "Delete SimpleName: cpg(283)", "Delete MethodInvocation(284)", "Delete ReturnStatement(285)", "Delete Block(286)", "Delete MethodDeclaration(287)", "Delete TextElement:  return type of referenced method.(288)", "Delete TagElement: @return(289)", "Delete Javadoc(290)", "Delete Modifier: public(291)", "Delete SimpleName: Type(292)", "Delete SimpleType: Type(293)", "Delete SimpleName: getReturnType(294)", "Delete SimpleName: ConstantPoolGen(295)", "Delete SimpleType: ConstantPoolGen(296)", "Delete SimpleName: cpg(297)", "Delete SingleVariableDeclaration(298)", "Delete SimpleName: getReturnType(300)", "Delete SimpleName: cpg(302)", "Delete MethodInvocation(303)", "Delete MethodInvocation(304)", "Delete ReturnStatement(305)", "Delete Block(306)", "Delete MethodDeclaration(307)", "Delete TextElement:  argument types of referenced method.(308)", "Delete TagElement: @return(309)", "Delete Javadoc(310)", "Delete SimpleName: Type(312)", "Delete SimpleType: Type(313)", "Delete Dimension(314)", "Delete ArrayType: Type[](315)", "Delete SimpleName: getArgumentTypes(316)", "Delete SimpleName: ConstantPoolGen(317)", "Delete SimpleType: ConstantPoolGen(318)", "Delete SimpleName: cpg(319)", "Delete SingleVariableDeclaration(320)", "Delete SimpleName: Type(321)", "Delete SimpleName: getArgumentTypes(322)", "Delete SimpleName: getSignature(323)", "Delete SimpleName: cpg(324)", "Delete MethodInvocation(325)", "Delete MethodInvocation(326)"]}}, {"INVOKEINTERFACE_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: visitNameSignatureInstruction", "DEL SimpleName: v", "DEL ThisExpression", "DEL MethodInvocation", "DEL ExpressionStatement"]}]}}, {"INVOKEINTERFACE_diff": {"operations": ["Delete SimpleName: v(321)", "Delete SimpleName: visitNameSignatureInstruction(322)", "Delete ThisExpression(323)", "Delete MethodInvocation(324)", "Delete ExpressionStatement(325)"]}}, {"INVOKESPECIAL_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: visitNameSignatureInstruction", "DEL SimpleName: v", "DEL ExpressionStatement"]}]}}, {"INVOKESPECIAL_diff": {"operations": ["Delete SimpleName: v(161)", "Delete SimpleName: visitNameSignatureInstruction(162)", "Delete ThisExpression(163)", "Delete MethodInvocation(164)", "Delete ExpressionStatement(165)"]}}, {"INVOKESTATIC_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: visitNameSignatureInstruction", "DEL SimpleName: v", "DEL ThisExpression", "DEL MethodInvocation", "DEL ExpressionStatement"]}]}}, {"INVOKESTATIC_diff": {"operations": ["Delete SimpleName: v(144)", "Delete SimpleName: visitNameSignatureInstruction(145)", "Delete ThisExpression(146)", "Delete MethodInvocation(147)", "Delete ExpressionStatement(148)"]}}, {"INVOKEVIRTUAL_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL SimpleName: v", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: visitNameSignatureInstruction"]}]}}, {"INVOKEVIRTUAL_diff": {"operations": ["Delete SimpleName: v(165)", "Delete SimpleName: visitNameSignatureInstruction(166)", "Delete ThisExpression(167)", "Delete MethodInvocation(168)", "Delete ExpressionStatement(169)"]}}, {"InstructionFactory_cluster": {"actions": [{"root": "UPDATE from Create an invoke instruction. to Create an invoke instruction. (Except for invokedynamic.)", "operations": ["UPD TextElement: Create an invoke instruction. from Create an invoke instruction. to Create an invoke instruction. (Except for invokedynamic.)"]}]}}, {"InstructionFactory_diff": {"operations": ["Update TextElement: Create an invoke instruction.(115) to Create an invoke instruction. (Except for invokedynamic.)"]}}, {"InvokeInstruction_cluster": {"actions": [{"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 1", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: opcode to InfixExpression: == at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS QualifiedName: Constants.INVOKEDYNAMIC to InfixExpression: == at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: == to ParenthesizedExpression at 0"]}]}}, {"InvokeInstruction_diff": {"operations": ["Insert InfixExpression: ||(139) into IfStatement(150) at 0", "Insert ParenthesizedExpression(134) into InfixExpression: ||(139) at 0", "Insert ParenthesizedExpression(138) into InfixExpression: ||(139) at 1", "Move InfixExpression: ==(133) into ParenthesizedExpression(134) at 0", "Insert InfixExpression: ==(137) into ParenthesizedExpression(138) at 0", "Insert SimpleName: opcode(135) into InfixExpression: ==(137) at 0", "Insert QualifiedName: Constants.INVOKEDYNAMIC(136) into InfixExpression: ==(137) at 1"]}}, {"PUTFIELD_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL SimpleName: visitNameSignatureInstruction", "DEL SimpleName: v", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"PUTFIELD_diff": {"operations": ["Delete SimpleName: v(167)", "Delete SimpleName: visitNameSignatureInstruction(168)", "Delete ThisExpression(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)"]}}, {"PUTSTATIC_cluster": {"actions": [{"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: visitNameSignatureInstruction", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: v"]}]}}, {"PUTSTATIC_diff": {"operations": ["Delete SimpleName: v(157)", "Delete SimpleName: visitNameSignatureInstruction(158)", "Delete ThisExpression(159)", "Delete MethodInvocation(160)", "Delete ExpressionStatement(161)"]}}, {"Visitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 11", "operations": ["INS SimpleName: visitConstantInvokeDynamic to MethodDeclaration at 1", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 0", "INS SimpleName: ConstantInvokeDynamic to SimpleType: ConstantInvokeDynamic at 0", "INS SimpleType: ConstantInvokeDynamic to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: interface at 11"]}]}}, {"Visitor_diff": {"operations": ["Insert MethodDeclaration(75) into TypeDeclaration: interface(314) at 11", "Insert PrimitiveType: void(69) into MethodDeclaration(75) at 0", "Insert SimpleName: visitConstantInvokeDynamic(70) into MethodDeclaration(75) at 1", "Insert SingleVariableDeclaration(74) into MethodDeclaration(75) at 2", "Insert SimpleType: ConstantInvokeDynamic(72) into SingleVariableDeclaration(74) at 0", "Insert SimpleName: obj(73) into SingleVariableDeclaration(74) at 1", "Insert SimpleName: ConstantInvokeDynamic(71) into SimpleType: ConstantInvokeDynamic(72) at 0"]}}, {"Pass3aVerifier_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 45", "operations": ["INS ImportDeclaration to CompilationUnit at 45", "INS QualifiedName: org.apache.bcel.generic.INVOKEDYNAMIC to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: visitINVOKEDYNAMIC to MethodDeclaration at 4", "INS TextElement: Checks if the constraints of operands of the said instruction(s) are satisfied.  to TagElement at 0", "INS TagElement to Javadoc at 0", "INS MarkerAnnotation to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS Block to MethodDeclaration at 6", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: INVOKEDYNAMIC to SingleVariableDeclaration at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS ThrowStatement to Block at 0", "INS SimpleName: INVOKEDYNAMIC to SimpleType: INVOKEDYNAMIC at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: o to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS StringLiteral: \"INVOKEDYNAMIC instruction is not supported at this time\" to ClassInstanceCreation at 1"]}]}}, {"Pass3aVerifier_diff": {"operations": ["Insert ImportDeclaration(91) into CompilationUnit(4527) at 45", "Insert QualifiedName: org.apache.bcel.generic.INVOKEDYNAMIC(90) into ImportDeclaration(91) at 0", "Insert MethodDeclaration(3747) into TypeDeclaration: class(4525) at 36", "Insert Javadoc(3731) into MethodDeclaration(3747) at 0", "Insert MarkerAnnotation(3733) into MethodDeclaration(3747) at 1", "Insert Modifier: public(3734) into MethodDeclaration(3747) at 2", "Insert PrimitiveType: void(3735) into MethodDeclaration(3747) at 3", "Insert SimpleName: visitINVOKEDYNAMIC(3736) into MethodDeclaration(3747) at 4", "Insert SingleVariableDeclaration(3740) into MethodDeclaration(3747) at 5", "Insert Block(3746) into MethodDeclaration(3747) at 6", "Insert TagElement(3730) into Javadoc(3731) at 0", "Insert SimpleName: Override(3732) into MarkerAnnotation(3733) at 0", "Insert SimpleType: INVOKEDYNAMIC(3738) into SingleVariableDeclaration(3740) at 0", "Insert SimpleName: o(3739) into SingleVariableDeclaration(3740) at 1", "Insert ThrowStatement(3745) into Block(3746) at 0", "Insert TextElement: Checks if the constraints of operands of the said instruction(s) are satisfied. (3729) into TagElement(3730) at 0", "Insert SimpleName: INVOKEDYNAMIC(3737) into SimpleType: INVOKEDYNAMIC(3738) at 0", "Insert ClassInstanceCreation(3744) into ThrowStatement(3745) at 0", "Insert SimpleType: RuntimeException(3742) into ClassInstanceCreation(3744) at 0", "Insert StringLiteral: \"INVOKEDYNAMIC instruction is not supported at this time\"(3743) into ClassInstanceCreation(3744) at 1", "Insert SimpleName: RuntimeException(3741) into SimpleType: RuntimeException(3742) at 0"]}}, {"ExecutionVisitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 103", "operations": ["INS PostfixExpression: ++ to ForStatement at 2", "INS QualifiedName: Type.BOOLEAN to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: o to MethodInvocation at 0", "INS SimpleName: o to MethodInvocation at 0", "INS SimpleName: push to MethodInvocation at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS QualifiedName: Type.VOID to InfixExpression: != at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: t to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS TextElement: Symbolically executes the corresponding Java Virtual Machine instruction.  to TagElement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS TagElement to Javadoc at 0", "INS InfixExpression: != to IfStatement at 0", "INS QualifiedName: Type.BYTE to MethodInvocation at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to IfStatement at 1", "INS QualifiedName: Type.SHORT to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: Type to SimpleType: Type at 0", "INS SimpleName: cpg to MethodInvocation at 2", "INS SimpleName: t to MethodInvocation at 0", "INS SimpleType: Type to VariableDeclarationStatement at 0", "INS SimpleName: getReturnType to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS QualifiedName: Type.CHAR to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 2", "INS MethodInvocation to InfixExpression: || at 0", "INS InfixExpression: < to ForStatement at 1", "INS MethodInvocation to InfixExpression: || at 3", "INS SimpleName: INVOKEDYNAMIC to SimpleType: INVOKEDYNAMIC at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: t to Assignment: = at 0", "INS QualifiedName: Type.INT to Assignment: = at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: cpg to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getReturnType to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 2", "INS SimpleName: t to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getArgumentTypes to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS IfStatement to Block at 1", "INS SimpleName: pop to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: t to MethodInvocation at 0", "INS SimpleName: t to MethodInvocation at 2", "INS SimpleName: stack to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS Block to ForStatement at 3", "INS Block to IfStatement at 1", "INS Javadoc to MethodDeclaration at 0", "INS ForStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: cpg to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: length to FieldAccess at 1", "INS SimpleType: INVOKEDYNAMIC to SingleVariableDeclaration at 0", "INS SimpleName: o to MethodInvocation at 0", "INS SimpleName: stack to MethodInvocation at 0", "INS SimpleName: t to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 103", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: visitINVOKEDYNAMIC to MethodDeclaration at 4", "INS SimpleName: o to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS InfixExpression: || to IfStatement at 0", "INS Block to MethodDeclaration at 6", "INS FieldAccess to InfixExpression: < at 1", "INS MethodInvocation to FieldAccess at 0"]}]}}, {"ExecutionVisitor_diff": {"operations": ["Insert MethodDeclaration(3095) into TypeDeclaration: class(5043) at 103", "Insert Javadoc(3016) into MethodDeclaration(3095) at 0", "Insert MarkerAnnotation(3018) into MethodDeclaration(3095) at 1", "Insert Modifier: public(3019) into MethodDeclaration(3095) at 2", "Insert PrimitiveType: void(3020) into MethodDeclaration(3095) at 3", "Insert SimpleName: visitINVOKEDYNAMIC(3021) into MethodDeclaration(3095) at 4", "Insert SingleVariableDeclaration(3025) into MethodDeclaration(3095) at 5", "Insert Block(3094) into MethodDeclaration(3095) at 6", "Insert TagElement(3015) into Javadoc(3016) at 0", "Insert SimpleName: Override(3017) into MarkerAnnotation(3018) at 0", "Insert SimpleType: INVOKEDYNAMIC(3023) into SingleVariableDeclaration(3025) at 0", "Insert SimpleName: o(3024) into SingleVariableDeclaration(3025) at 1", "Insert ForStatement(3047) into Block(3094) at 0", "Insert IfStatement(3093) into Block(3094) at 1", "Insert TextElement: Symbolically executes the corresponding Java Virtual Machine instruction. (3014) into TagElement(3015) at 0", "Insert SimpleName: INVOKEDYNAMIC(3022) into SimpleType: INVOKEDYNAMIC(3023) at 0", "Insert VariableDeclarationExpression(3030) into ForStatement(3047) at 0", "Insert InfixExpression: <(3038) into ForStatement(3047) at 1", "Insert PostfixExpression: ++(3040) into ForStatement(3047) at 2", "Insert Block(3046) into ForStatement(3047) at 3", "Insert InfixExpression: !=(3053) into IfStatement(3093) at 0", "Insert Block(3092) into IfStatement(3093) at 1", "Insert PrimitiveType: int(3026) into VariableDeclarationExpression(3030) at 0", "Insert VariableDeclarationFragment(3029) into VariableDeclarationExpression(3030) at 1", "Insert SimpleName: i(3031) into InfixExpression: <(3038) at 0", "Insert FieldAccess(3037) into InfixExpression: <(3038) at 1", "Insert SimpleName: i(3039) into PostfixExpression: ++(3040) at 0", "Insert ExpressionStatement(3045) into Block(3046) at 0", "Insert MethodInvocation(3051) into InfixExpression: !=(3053) at 0", "Insert QualifiedName: Type.VOID(3052) into InfixExpression: !=(3053) at 1", "Insert VariableDeclarationStatement(3062) into Block(3092) at 0", "Insert IfStatement(3085) into Block(3092) at 1", "Insert ExpressionStatement(3091) into Block(3092) at 2", "Insert SimpleName: i(3027) into VariableDeclarationFragment(3029) at 0", "Insert NumberLiteral: 0(3028) into VariableDeclarationFragment(3029) at 1", "Insert MethodInvocation(3035) into FieldAccess(3037) at 0", "Insert SimpleName: length(3036) into FieldAccess(3037) at 1", "Insert MethodInvocation(3044) into ExpressionStatement(3045) at 0", "Insert SimpleName: o(3048) into MethodInvocation(3051) at 0", "Insert SimpleName: getReturnType(3049) into MethodInvocation(3051) at 1", "Insert SimpleName: cpg(3050) into MethodInvocation(3051) at 2", "Insert SimpleType: Type(3055) into VariableDeclarationStatement(3062) at 0", "Insert VariableDeclarationFragment(3061) into VariableDeclarationStatement(3062) at 1", "Insert InfixExpression: ||(3079) into IfStatement(3085) at 0", "Insert Block(3084) into IfStatement(3085) at 1", "Insert MethodInvocation(3090) into ExpressionStatement(3091) at 0", "Insert SimpleName: o(3032) into MethodInvocation(3035) at 0", "Insert SimpleName: getArgumentTypes(3033) into MethodInvocation(3035) at 1", "Insert SimpleName: cpg(3034) into MethodInvocation(3035) at 2", "Insert MethodInvocation(3042) into MethodInvocation(3044) at 0", "Insert SimpleName: pop(3043) into MethodInvocation(3044) at 1", "Insert SimpleName: Type(3054) into SimpleType: Type(3055) at 0", "Insert SimpleName: t(3056) into VariableDeclarationFragment(3061) at 0", "Insert MethodInvocation(3060) into VariableDeclarationFragment(3061) at 1", "Insert MethodInvocation(3066) into InfixExpression: ||(3079) at 0", "Insert MethodInvocation(3070) into InfixExpression: ||(3079) at 1", "Insert MethodInvocation(3074) into InfixExpression: ||(3079) at 2", "Insert MethodInvocation(3078) into InfixExpression: ||(3079) at 3", "Insert ExpressionStatement(3083) into Block(3084) at 0", "Insert MethodInvocation(3087) into MethodInvocation(3090) at 0", "Insert SimpleName: push(3088) into MethodInvocation(3090) at 1", "Insert SimpleName: t(3089) into MethodInvocation(3090) at 2", "Insert SimpleName: stack(3041) into MethodInvocation(3042) at 0", "Insert SimpleName: o(3057) into MethodInvocation(3060) at 0", "Insert SimpleName: getReturnType(3058) into MethodInvocation(3060) at 1", "Insert SimpleName: cpg(3059) into MethodInvocation(3060) at 2", "Insert SimpleName: t(3063) into MethodInvocation(3066) at 0", "Insert SimpleName: equals(3064) into MethodInvocation(3066) at 1", "Insert QualifiedName: Type.BOOLEAN(3065) into MethodInvocation(3066) at 2", "Insert SimpleName: t(3067) into MethodInvocation(3070) at 0", "Insert SimpleName: equals(3068) into MethodInvocation(3070) at 1", "Insert QualifiedName: Type.CHAR(3069) into MethodInvocation(3070) at 2", "Insert SimpleName: t(3071) into MethodInvocation(3074) at 0", "Insert SimpleName: equals(3072) into MethodInvocation(3074) at 1", "Insert QualifiedName: Type.BYTE(3073) into MethodInvocation(3074) at 2", "Insert SimpleName: t(3075) into MethodInvocation(3078) at 0", "Insert SimpleName: equals(3076) into MethodInvocation(3078) at 1", "Insert QualifiedName: Type.SHORT(3077) into MethodInvocation(3078) at 2", "Insert Assignment: =(3082) into ExpressionStatement(3083) at 0", "Insert SimpleName: stack(3086) into MethodInvocation(3087) at 0", "Insert SimpleName: t(3080) into Assignment: =(3082) at 0", "Insert QualifiedName: Type.INT(3081) into Assignment: =(3082) at 1"]}}, {"InstConstraintVisitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 126", "operations": ["INS SimpleName: o to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 3", "INS SimpleType: INVOKEDYNAMIC to SingleVariableDeclaration at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS MethodDeclaration to TypeDeclaration: class at 126", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS TextElement: Ensures the specific preconditions of the said instruction. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: visitINVOKEDYNAMIC to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ThrowStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 2", "INS StringLiteral: \"INVOKEDYNAMIC instruction is not supported at this time\" to ClassInstanceCreation at 1", "INS SimpleName: INVOKEDYNAMIC to SimpleType: INVOKEDYNAMIC at 0", "INS Block to MethodDeclaration at 6", "INS Javadoc to MethodDeclaration at 0"]}]}}, {"InstConstraintVisitor_diff": {"operations": ["Insert MethodDeclaration(6286) into TypeDeclaration: class(10677) at 126", "Insert Javadoc(6270) into MethodDeclaration(6286) at 0", "Insert MarkerAnnotation(6272) into MethodDeclaration(6286) at 1", "Insert Modifier: public(6273) into MethodDeclaration(6286) at 2", "Insert PrimitiveType: void(6274) into MethodDeclaration(6286) at 3", "Insert SimpleName: visitINVOKEDYNAMIC(6275) into MethodDeclaration(6286) at 4", "Insert SingleVariableDeclaration(6279) into MethodDeclaration(6286) at 5", "Insert Block(6285) into MethodDeclaration(6286) at 6", "Insert TagElement(6269) into Javadoc(6270) at 0", "Insert SimpleName: Override(6271) into MarkerAnnotation(6272) at 0", "Insert SimpleType: INVOKEDYNAMIC(6277) into SingleVariableDeclaration(6279) at 0", "Insert SimpleName: o(6278) into SingleVariableDeclaration(6279) at 1", "Insert ThrowStatement(6284) into Block(6285) at 0", "Insert TextElement: Ensures the specific preconditions of the said instruction.(6268) into TagElement(6269) at 0", "Insert SimpleName: INVOKEDYNAMIC(6276) into SimpleType: INVOKEDYNAMIC(6277) at 0", "Insert ClassInstanceCreation(6283) into ThrowStatement(6284) at 0", "Insert SimpleType: RuntimeException(6281) into ClassInstanceCreation(6283) at 0", "Insert StringLiteral: \"INVOKEDYNAMIC instruction is not supported at this time\"(6282) into ClassInstanceCreation(6283) at 1", "Insert SimpleName: RuntimeException(6280) into SimpleType: RuntimeException(6281) at 0"]}}], "commit_stats": [{"total_files": 32, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}