{"application": "google-closure-compiler", "csha": "1fdf8fd4b3c3d8efd694b7e2bb29010fad49d7c2", "files": [{"JSTypeCreatorFromJSDoc_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 71", "operations": ["INS SimpleName: registry to MethodInvocation at 0", "INS SimpleName: varname to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS Javadoc to MethodDeclaration at 0", "INS ReturnStatement to Block at 2", "INS InfixExpression: != to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: maybeCtor to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: parentClass to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: && to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleType: FunctionType to VariableDeclarationStatement at 0", "INS NullLiteral to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: funNode to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: parentClass to ReturnStatement at 0", "INS SimpleName: getFunType to MethodInvocation at 1", "INS SimpleName: extendedType to MethodInvocation at 0", "INS SimpleType: JSType to VariableDeclarationStatement at 0", "INS SimpleName: extendedType to Assignment: = at 0", "INS SimpleName: decl to VariableDeclarationFragment at 0", "INS SimpleName: getToken to MethodInvocation at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: getThisType to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: docNode to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleType: Declaration to VariableDeclarationStatement at 0", "INS SimpleName: maybeCtor to MethodInvocation at 0", "INS SimpleName: Declaration to SimpleType: Declaration at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: DeclaredTypeRegistry to SimpleType: DeclaredTypeRegistry at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: decl to InfixExpression: != at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS TagElement to Javadoc at 0", "INS SimpleName: docNode to MethodInvocation at 0", "INS SimpleName: registry to SingleVariableDeclaration at 1", "INS SimpleName: varname to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: private to MethodDeclaration at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: DeclaredTypeRegistry to SingleVariableDeclaration at 0", "INS TextElement: Used for first-class classes like: to TagElement at 0", "INS SimpleName: parentClass to InfixExpression: == at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: FunctionType to SimpleType: FunctionType at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: maybeFunction to MethodInvocation at 0", "INS SimpleName: getMaybeHigherOrderParentClass to MethodDeclaration at 3", "INS SimpleName: NominalType to SimpleType: NominalType at 0", "INS QualifiedName: Token.STRING to InfixExpression: == at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: docNode to MethodInvocation at 0", "INS SimpleName: QualifiedName to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: NominalType to VariableDeclarationStatement at 0", "INS IfStatement to Block at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: maybeCtor to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: decl to MethodInvocation at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: isUnknown to MethodInvocation at 1", "INS SimpleName: JSType to SimpleType: JSType at 0", "INS SimpleName: getDeclaration to MethodInvocation at 1", "INS SimpleName: JSType to SimpleType: JSType at 0", "INS IfStatement to Block at 2", "INS NullLiteral to ReturnStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: extendedType to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: getToken to MethodInvocation at 1", "INS SimpleName: maybeFunction to VariableDeclarationFragment at 0", "INS SimpleType: JSType to SingleVariableDeclaration at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleType: NominalType to MethodDeclaration at 2", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: getTypeOfSimpleDecl to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 71", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: maybeFunction to MethodInvocation at 0", "INS SimpleName: NominalType to SimpleType: NominalType at 0", "INS SimpleName: functionName to SingleVariableDeclaration at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getNominalTypeIfSingletonObj to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isFunctionType to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS QualifiedName: Token.BANG to InfixExpression: == at 1", "INS SimpleName: maybeFunction to InfixExpression: != at 0", "INS IfStatement to Block at 0", "INS SimpleName: parentClass to VariableDeclarationFragment at 0", "INS SimpleName: isSomeConstructorOrInterface to MethodInvocation at 1", "INS Block to MethodDeclaration at 9", "INS BooleanLiteral: false to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: extendedType to SingleVariableDeclaration at 1", "INS IfStatement to Block at 1", "INS MethodInvocation to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TextElement: function(clazz) { class Foo extends clazz { ... } } to TagElement at 1", "INS SimpleName: docNode to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: getTypeOfSimpleDecl to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: isClass to MethodInvocation at 1", "INS SimpleName: fromQualifiedString to MethodInvocation at 1", "INS SimpleName: decl to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: registry to MethodInvocation at 5", "INS SimpleName: docNode to MethodInvocation at 1", "INS SimpleName: functionName to MethodInvocation at 2", "INS SimpleName: extendedType to MethodInvocation at 4", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getMaybeHigherOrderParentClass to MethodInvocation at 0", "INS SimpleName: funNode to MethodInvocation at 3"]}]}}, {"JSTypeCreatorFromJSDoc_diff": {"operations": ["Insert MethodDeclaration(4183) into TypeDeclaration: class(4652) at 71", "Insert Javadoc(4031) into MethodDeclaration(4183) at 0", "Insert Modifier: private(4032) into MethodDeclaration(4183) at 1", "Insert SimpleType: NominalType(4034) into MethodDeclaration(4183) at 2", "Insert SimpleName: getMaybeHigherOrderParentClass(4035) into MethodDeclaration(4183) at 3", "Insert SingleVariableDeclaration(4039) into MethodDeclaration(4183) at 4", "Insert SingleVariableDeclaration(4043) into MethodDeclaration(4183) at 5", "Insert SingleVariableDeclaration(4047) into MethodDeclaration(4183) at 6", "Insert SingleVariableDeclaration(4051) into MethodDeclaration(4183) at 7", "Insert SingleVariableDeclaration(4055) into MethodDeclaration(4183) at 8", "Insert Block(4182) into MethodDeclaration(4183) at 9", "Insert TagElement(4030) into Javadoc(4031) at 0", "Insert SimpleName: NominalType(4033) into SimpleType: NominalType(4034) at 0", "Insert SimpleType: Node(4037) into SingleVariableDeclaration(4039) at 0", "Insert SimpleName: docNode(4038) into SingleVariableDeclaration(4039) at 1", "Insert SimpleType: String(4041) into SingleVariableDeclaration(4043) at 0", "Insert SimpleName: functionName(4042) into SingleVariableDeclaration(4043) at 1", "Insert SimpleType: Node(4045) into SingleVariableDeclaration(4047) at 0", "Insert SimpleName: funNode(4046) into SingleVariableDeclaration(4047) at 1", "Insert SimpleType: JSType(4049) into SingleVariableDeclaration(4051) at 0", "Insert SimpleName: extendedType(4050) into SingleVariableDeclaration(4051) at 1", "Insert SimpleType: DeclaredTypeRegistry(4053) into SingleVariableDeclaration(4055) at 0", "Insert SimpleName: registry(4054) into SingleVariableDeclaration(4055) at 1", "Insert IfStatement(4166) into Block(4182) at 0", "Move ExpressionStatement(4007) into Block(4182) at 1", "Insert ReturnStatement(4181) into Block(4182) at 2", "Insert TextElement: Used for first-class classes like:(4028) into TagElement(4030) at 0", "Insert TextElement: function(clazz) { class Foo extends clazz { ... } }(4029) into TagElement(4030) at 1", "Insert SimpleName: Node(4036) into SimpleType: Node(4037) at 0", "Insert SimpleName: String(4040) into SimpleType: String(4041) at 0", "Insert SimpleName: Node(4044) into SimpleType: Node(4045) at 0", "Insert SimpleName: JSType(4048) into SimpleType: JSType(4049) at 0", "Insert SimpleName: DeclaredTypeRegistry(4052) into SimpleType: DeclaredTypeRegistry(4053) at 0", "Insert InfixExpression: &&(4072) into IfStatement(4166) at 0", "Insert Block(4165) into IfStatement(4166) at 1", "Insert NullLiteral(4180) into ReturnStatement(4181) at 0", "Insert ReturnStatement(4002) into Block(4003) at 0", "Insert InfixExpression: &&(4064) into InfixExpression: &&(4072) at 0", "Insert InfixExpression: ==(4071) into InfixExpression: &&(4072) at 1", "Insert VariableDeclarationStatement(4082) into Block(4165) at 0", "Insert VariableDeclarationStatement(4095) into Block(4165) at 1", "Insert IfStatement(4164) into Block(4165) at 2", "Insert MethodInvocation(4001) into ReturnStatement(4002) at 0", "Insert MethodInvocation(4058) into InfixExpression: &&(4064) at 0", "Insert InfixExpression: ==(4063) into InfixExpression: &&(4064) at 1", "Insert MethodInvocation(4069) into InfixExpression: ==(4071) at 0", "Insert QualifiedName: Token.STRING(4070) into InfixExpression: ==(4071) at 1", "Insert SimpleType: String(4074) into VariableDeclarationStatement(4082) at 0", "Insert VariableDeclarationFragment(4081) into VariableDeclarationStatement(4082) at 1", "Insert SimpleType: Declaration(4084) into VariableDeclarationStatement(4095) at 0", "Insert VariableDeclarationFragment(4094) into VariableDeclarationStatement(4095) at 1", "Insert InfixExpression: !=(4098) into IfStatement(4164) at 0", "Insert Block(4163) into IfStatement(4164) at 1", "Insert SimpleName: getMaybeHigherOrderParentClass(3995) into MethodInvocation(4001) at 0", "Insert SimpleName: docNode(3996) into MethodInvocation(4001) at 1", "Insert SimpleName: functionName(3997) into MethodInvocation(4001) at 2", "Insert SimpleName: funNode(3998) into MethodInvocation(4001) at 3", "Insert SimpleName: extendedType(3999) into MethodInvocation(4001) at 4", "Insert SimpleName: registry(4000) into MethodInvocation(4001) at 5", "Insert SimpleName: extendedType(4056) into MethodInvocation(4058) at 0", "Insert SimpleName: isUnknown(4057) into MethodInvocation(4058) at 1", "Insert MethodInvocation(4061) into InfixExpression: ==(4063) at 0", "Insert QualifiedName: Token.BANG(4062) into InfixExpression: ==(4063) at 1", "Insert MethodInvocation(4067) into MethodInvocation(4069) at 0", "Insert SimpleName: getToken(4068) into MethodInvocation(4069) at 1", "Insert SimpleName: String(4073) into SimpleType: String(4074) at 0", "Insert SimpleName: varname(4075) into VariableDeclarationFragment(4081) at 0", "Insert MethodInvocation(4080) into VariableDeclarationFragment(4081) at 1", "Insert SimpleName: Declaration(4083) into SimpleType: Declaration(4084) at 0", "Insert SimpleName: decl(4085) into VariableDeclarationFragment(4094) at 0", "Insert MethodInvocation(4093) into VariableDeclarationFragment(4094) at 1", "Insert SimpleName: decl(4096) into InfixExpression: !=(4098) at 0", "Insert NullLiteral(4097) into InfixExpression: !=(4098) at 1", "Insert IfStatement(4107) into Block(4163) at 0", "Insert VariableDeclarationStatement(4115) into Block(4163) at 1", "Insert IfStatement(4162) into Block(4163) at 2", "Insert SimpleName: docNode(4059) into MethodInvocation(4061) at 0", "Insert SimpleName: getToken(4060) into MethodInvocation(4061) at 1", "Insert SimpleName: docNode(4065) into MethodInvocation(4067) at 0", "Insert SimpleName: getFirstChild(4066) into MethodInvocation(4067) at 1", "Insert MethodInvocation(4078) into MethodInvocation(4080) at 0", "Insert SimpleName: getString(4079) into MethodInvocation(4080) at 1", "Insert SimpleName: registry(4086) into MethodInvocation(4093) at 0", "Insert SimpleName: getDeclaration(4087) into MethodInvocation(4093) at 1", "Insert MethodInvocation(4091) into MethodInvocation(4093) at 2", "Insert BooleanLiteral: false(4092) into MethodInvocation(4093) at 3", "Insert InfixExpression: ==(4103) into IfStatement(4107) at 0", "Insert Block(4106) into IfStatement(4107) at 1", "Insert SimpleType: JSType(4109) into VariableDeclarationStatement(4115) at 0", "Insert VariableDeclarationFragment(4114) into VariableDeclarationStatement(4115) at 1", "Insert InfixExpression: &&(4122) into IfStatement(4162) at 0", "Insert Block(4161) into IfStatement(4162) at 1", "Insert SimpleName: docNode(4076) into MethodInvocation(4078) at 0", "Insert SimpleName: getFirstChild(4077) into MethodInvocation(4078) at 1", "Insert SimpleName: QualifiedName(4088) into MethodInvocation(4091) at 0", "Insert SimpleName: fromQualifiedString(4089) into MethodInvocation(4091) at 1", "Insert SimpleName: varname(4090) into MethodInvocation(4091) at 2", "Insert MethodInvocation(4101) into InfixExpression: ==(4103) at 0", "Insert NullLiteral(4102) into InfixExpression: ==(4103) at 1", "Insert ReturnStatement(4105) into Block(4106) at 0", "Insert SimpleName: JSType(4108) into SimpleType: JSType(4109) at 0", "Insert SimpleName: maybeFunction(4110) into VariableDeclarationFragment(4114) at 0", "Insert MethodInvocation(4113) into VariableDeclarationFragment(4114) at 1", "Insert InfixExpression: !=(4118) into InfixExpression: &&(4122) at 0", "Insert MethodInvocation(4121) into InfixExpression: &&(4122) at 1", "Insert VariableDeclarationStatement(4130) into Block(4161) at 0", "Insert IfStatement(4160) into Block(4161) at 1", "Insert SimpleName: decl(4099) into MethodInvocation(4101) at 0", "Insert SimpleName: getTypeOfSimpleDecl(4100) into MethodInvocation(4101) at 1", "Insert NullLiteral(4104) into ReturnStatement(4105) at 0", "Insert SimpleName: decl(4111) into MethodInvocation(4113) at 0", "Insert SimpleName: getTypeOfSimpleDecl(4112) into MethodInvocation(4113) at 1", "Insert SimpleName: maybeFunction(4116) into InfixExpression: !=(4118) at 0", "Insert NullLiteral(4117) into InfixExpression: !=(4118) at 1", "Insert SimpleName: maybeFunction(4119) into MethodInvocation(4121) at 0", "Insert SimpleName: isFunctionType(4120) into MethodInvocation(4121) at 1", "Insert SimpleType: FunctionType(4124) into VariableDeclarationStatement(4130) at 0", "Insert VariableDeclarationFragment(4129) into VariableDeclarationStatement(4130) at 1", "Insert MethodInvocation(4133) into IfStatement(4160) at 0", "Insert Block(4159) into IfStatement(4160) at 1", "Insert SimpleName: FunctionType(4123) into SimpleType: FunctionType(4124) at 0", "Insert SimpleName: maybeCtor(4125) into VariableDeclarationFragment(4129) at 0", "Insert MethodInvocation(4128) into VariableDeclarationFragment(4129) at 1", "Insert SimpleName: maybeCtor(4131) into MethodInvocation(4133) at 0", "Insert SimpleName: isSomeConstructorOrInterface(4132) into MethodInvocation(4133) at 1", "Insert ExpressionStatement(4139) into Block(4159) at 0", "Insert VariableDeclarationStatement(4147) into Block(4159) at 1", "Insert IfStatement(4158) into Block(4159) at 2", "Insert SimpleName: maybeFunction(4126) into MethodInvocation(4128) at 0", "Insert SimpleName: getFunType(4127) into MethodInvocation(4128) at 1", "Insert Assignment: =(4138) into ExpressionStatement(4139) at 0", "Insert SimpleType: NominalType(4141) into VariableDeclarationStatement(4147) at 0", "Insert VariableDeclarationFragment(4146) into VariableDeclarationStatement(4147) at 1", "Insert InfixExpression: ||(4154) into IfStatement(4158) at 0", "Insert Block(4157) into IfStatement(4158) at 1", "Insert SimpleName: extendedType(4134) into Assignment: =(4138) at 0", "Insert MethodInvocation(4137) into Assignment: =(4138) at 1", "Insert SimpleName: NominalType(4140) into SimpleType: NominalType(4141) at 0", "Insert SimpleName: parentClass(4142) into VariableDeclarationFragment(4146) at 0", "Insert MethodInvocation(4145) into VariableDeclarationFragment(4146) at 1", "Insert InfixExpression: ==(4150) into InfixExpression: ||(4154) at 0", "Insert MethodInvocation(4153) into InfixExpression: ||(4154) at 1", "Insert ReturnStatement(4156) into Block(4157) at 0", "Insert SimpleName: maybeCtor(4135) into MethodInvocation(4137) at 0", "Insert SimpleName: getThisType(4136) into MethodInvocation(4137) at 1", "Insert SimpleName: extendedType(4143) into MethodInvocation(4145) at 0", "Insert SimpleName: getNominalTypeIfSingletonObj(4144) into MethodInvocation(4145) at 1", "Insert SimpleName: parentClass(4148) into InfixExpression: ==(4150) at 0", "Insert NullLiteral(4149) into InfixExpression: ==(4150) at 1", "Insert SimpleName: parentClass(4151) into MethodInvocation(4153) at 0", "Insert SimpleName: isClass(4152) into MethodInvocation(4153) at 1", "Insert SimpleName: parentClass(4155) into ReturnStatement(4156) at 0"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}