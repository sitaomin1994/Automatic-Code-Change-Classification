{"application": "apache-httpcore", "csha": "c2fd8375802f73645245e42a4977d8d97908ccc6", "files": [{"Header_cluster": {"actions": [{"root": "UPDATE from Represents an HTTP header field. to Represents an HTTP header field consisting of a field name and a field value..", "operations": ["UPD TextElement: Represents an HTTP header field. from Represents an HTTP header field. to Represents an HTTP header field consisting of a field name and a field value.."]}, {"root": "DEL TextElement: <p>The HTTP header fields follow the same generic format as", "operations": ["DEL TextElement: <p>The HTTP header fields follow the same generic format as"]}, {"root": "DEL TextElement: that given in Section 3.1 of RFC 822. Each header field consists", "operations": ["DEL TextElement: that given in Section 3.1 of RFC 822. Each header field consists"]}, {"root": "DEL TextElement: of a name followed by a colon (\":\") and the field value. Field names", "operations": ["DEL TextElement: of a name followed by a colon (\":\") and the field value. Field names"]}, {"root": "DEL TextElement: are case-insensitive. The field value MAY be preceded by any amount", "operations": ["DEL TextElement: are case-insensitive. The field value MAY be preceded by any amount"]}, {"root": "DEL TextElement: of LWS, though a single SP is preferred.", "operations": ["DEL TextElement: of LWS, though a single SP is preferred."]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: message-header = field-name \":\" [ field-value ]", "operations": ["DEL TextElement: message-header = field-name \":\" [ field-value ]"]}, {"root": "DEL TextElement: field-name     = token", "operations": ["DEL TextElement: field-name     = token"]}, {"root": "DEL TextElement: field-value    = *( field-content | LWS )", "operations": ["DEL TextElement: field-value    = *( field-content | LWS )"]}, {"root": "DEL TextElement: field-content  = &lt;the OCTETs making up the field-value", "operations": ["DEL TextElement: field-content  = &lt;the OCTETs making up the field-value"]}, {"root": "DEL TextElement: and consisting of either *TEXT or combinations", "operations": ["DEL TextElement: and consisting of either *TEXT or combinations"]}, {"root": "DEL TextElement: of token, separators, and quoted-string&gt;", "operations": ["DEL TextElement: of token, separators, and quoted-string&gt;"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"Header_diff": {"operations": ["Update TextElement: Represents an HTTP header field.(2) to Represents an HTTP header field consisting of a field name and a field value..", "Delete TextElement: <p>The HTTP header fields follow the same generic format as(3)", "Delete TextElement: that given in Section 3.1 of RFC 822. Each header field consists(4)", "Delete TextElement: of a name followed by a colon (\":\") and the field value. Field names(5)", "Delete TextElement: are case-insensitive. The field value MAY be preceded by any amount(6)", "Delete TextElement: of LWS, though a single SP is preferred.(7)", "Delete TextElement: <pre>(8)", "Delete TextElement: message-header = field-name \":\" [ field-value ](9)", "Delete TextElement: field-name     = token(10)", "Delete TextElement: field-value    = *( field-content | LWS )(11)", "Delete TextElement: field-content  = &lt;the OCTETs making up the field-value(12)", "Delete TextElement: and consisting of either *TEXT or combinations(13)", "Delete TextElement: of token, separators, and quoted-string&gt;(14)", "Delete TextElement: </pre>(15)"]}}, {"HeaderElement_cluster": {"actions": [{"root": "UPDATE from One element of an HTTP  to Represents an element of an HTTP ", "operations": ["UPD TextElement: One element of an HTTP  from One element of an HTTP  to Represents an element of an HTTP "]}, {"root": "DEL TextElement: <p>", "operations": ["DEL TextElement: <p>"]}, {"root": "DEL TextElement: Some HTTP headers (such as the set-cookie header) have values that", "operations": ["DEL TextElement: Some HTTP headers (such as the set-cookie header) have values that"]}, {"root": "DEL TextElement: can be decomposed into multiple elements.  Such headers must be in the", "operations": ["DEL TextElement: can be decomposed into multiple elements.  Such headers must be in the"]}, {"root": "DEL TextElement: following form:", "operations": ["DEL TextElement: following form:"]}, {"root": "DEL TextElement: </p>", "operations": ["DEL TextElement: </p>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: header  = [ element ] *( \",\" [ element ] )", "operations": ["DEL TextElement: header  = [ element ] *( \",\" [ element ] )"]}, {"root": "DEL TextElement: element = name [ \"=\" [ value ] ] *( \";\" [ param ] )", "operations": ["DEL TextElement: element = name [ \"=\" [ value ] ] *( \";\" [ param ] )"]}, {"root": "DEL TextElement: param   = name [ \"=\" [ value ] ]", "operations": ["DEL TextElement: param   = name [ \"=\" [ value ] ]"]}, {"root": "DEL TextElement: name    = token", "operations": ["DEL TextElement: name    = token"]}, {"root": "DEL TextElement: value   = ( token | quoted-string )", "operations": ["DEL TextElement: value   = ( token | quoted-string )"]}, {"root": "DEL TextElement: token         = 1*&lt;any char except \"=\", \",\", \";\", &lt;\"&gt; and", "operations": ["DEL TextElement: token         = 1*&lt;any char except \"=\", \",\", \";\", &lt;\"&gt; and"]}, {"root": "DEL TextElement: white space&gt;", "operations": ["DEL TextElement: white space&gt;"]}, {"root": "DEL TextElement: quoted-string = &lt;\"&gt; *( text | quoted-char ) &lt;\"&gt;", "operations": ["DEL TextElement: quoted-string = &lt;\"&gt; *( text | quoted-char ) &lt;\"&gt;"]}, {"root": "DEL TextElement: text          = any char except &lt;\"&gt;", "operations": ["DEL TextElement: text          = any char except &lt;\"&gt;"]}, {"root": "DEL TextElement: quoted-char   = \"\\\" char", "operations": ["DEL TextElement: quoted-char   = \"\\\" char"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <p>", "operations": ["DEL TextElement: <p>"]}, {"root": "DEL TextElement: Any amount of white space is allowed between any part of the", "operations": ["DEL TextElement: Any amount of white space is allowed between any part of the"]}, {"root": "DEL TextElement: header, element or param and is ignored. A missing value in any", "operations": ["DEL TextElement: header, element or param and is ignored. A missing value in any"]}, {"root": "DEL TextElement: element or param will be stored as the empty ", "operations": ["DEL TextElement: element or param will be stored as the empty "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: String", "DEL TagElement: @link"]}, {"root": "DEL TextElement: ;", "operations": ["DEL TextElement: ;"]}, {"root": "DEL TextElement: if the \"=\" is also missing <var>null</var> will be stored instead.", "operations": ["DEL TextElement: if the \"=\" is also missing <var>null</var> will be stored instead."]}]}}, {"HeaderElement_diff": {"operations": ["Update TextElement: One element of an HTTP (2) to Represents an element of an HTTP ", "Delete TextElement: <p>(8)", "Delete TextElement: Some HTTP headers (such as the set-cookie header) have values that(9)", "Delete TextElement: can be decomposed into multiple elements.  Such headers must be in the(10)", "Delete TextElement: following form:(11)", "Delete TextElement: </p>(12)", "Delete TextElement: <pre>(13)", "Delete TextElement: header  = [ element ] *( \",\" [ element ] )(14)", "Delete TextElement: element = name [ \"=\" [ value ] ] *( \";\" [ param ] )(15)", "Delete TextElement: param   = name [ \"=\" [ value ] ](16)", "Delete TextElement: name    = token(17)", "Delete TextElement: value   = ( token | quoted-string )(18)", "Delete TextElement: token         = 1*&lt;any char except \"=\", \",\", \";\", &lt;\"&gt; and(19)", "Delete TextElement: white space&gt;(20)", "Delete TextElement: quoted-string = &lt;\"&gt; *( text | quoted-char ) &lt;\"&gt;(21)", "Delete TextElement: text          = any char except &lt;\"&gt;(22)", "Delete TextElement: quoted-char   = \"\\\" char(23)", "Delete TextElement: </pre>(24)", "Delete TextElement: <p>(25)", "Delete TextElement: Any amount of white space is allowed between any part of the(26)", "Delete TextElement: header, element or param and is ignored. A missing value in any(27)", "Delete TextElement: element or param will be stored as the empty (28)", "Delete SimpleName: String(29)", "Delete TagElement: @link(30)", "Delete TextElement: ;(31)", "Delete TextElement: if the \"=\" is also missing <var>null</var> will be stored instead.(32)"]}}, {"HttpMessage_cluster": {"actions": [{"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: HTTP-message   = Request | Response     ; HTTP/1.1 messages", "operations": ["DEL TextElement: HTTP-message   = Request | Response     ; HTTP/1.1 messages"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: <p>", "operations": ["DEL TextElement: <p>"]}, {"root": "DEL TextElement: HTTP messages use the generic message format of RFC 822 for", "operations": ["DEL TextElement: HTTP messages use the generic message format of RFC 822 for"]}, {"root": "DEL TextElement: transferring entities (the payload of the message). Both types", "operations": ["DEL TextElement: transferring entities (the payload of the message). Both types"]}, {"root": "DEL TextElement: of message consist of a start-line, zero or more header fields", "operations": ["DEL TextElement: of message consist of a start-line, zero or more header fields"]}, {"root": "DEL TextElement: (also known as \"headers\"), an empty line (i.e., a line with nothing", "operations": ["DEL TextElement: (also known as \"headers\"), an empty line (i.e., a line with nothing"]}, {"root": "DEL TextElement: preceding the CRLF) indicating the end of the header fields,", "operations": ["DEL TextElement: preceding the CRLF) indicating the end of the header fields,"]}, {"root": "DEL TextElement: and possibly a message-body.", "operations": ["DEL TextElement: and possibly a message-body."]}, {"root": "DEL TextElement: </p>", "operations": ["DEL TextElement: </p>"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: generic-message = start-line", "operations": ["DEL TextElement: generic-message = start-line"]}, {"root": "DEL TextElement: *(message-header CRLF)", "operations": ["DEL TextElement: *(message-header CRLF)"]}, {"root": "DEL TextElement: CRLF", "operations": ["DEL TextElement: CRLF"]}, {"root": "DEL TextElement: [ message-body ]", "operations": ["DEL TextElement: [ message-body ]"]}, {"root": "DEL TextElement: start-line      = Request-Line | Status-Line", "operations": ["DEL TextElement: start-line      = Request-Line | Status-Line"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"HttpMessage_diff": {"operations": ["Delete TextElement: <pre>(6)", "Delete TextElement: HTTP-message   = Request | Response     ; HTTP/1.1 messages(7)", "Delete TextElement: </pre>(8)", "Delete TextElement: <p>(9)", "Delete TextElement: HTTP messages use the generic message format of RFC 822 for(10)", "Delete TextElement: transferring entities (the payload of the message). Both types(11)", "Delete TextElement: of message consist of a start-line, zero or more header fields(12)", "Delete TextElement: (also known as \"headers\"), an empty line (i.e., a line with nothing(13)", "Delete TextElement: preceding the CRLF) indicating the end of the header fields,(14)", "Delete TextElement: and possibly a message-body.(15)", "Delete TextElement: </p>(16)", "Delete TextElement: <pre>(17)", "Delete TextElement: generic-message = start-line(18)", "Delete TextElement: *(message-header CRLF)(19)", "Delete TextElement: CRLF(20)", "Delete TextElement: [ message-body ](21)", "Delete TextElement: start-line      = Request-Line | Status-Line(22)", "Delete TextElement: </pre>(23)"]}}, {"HttpRequest_cluster": {"actions": [{"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: Request       = Request-Line", "operations": ["DEL TextElement: Request       = Request-Line"]}, {"root": "DEL TextElement: *(( general-header", "operations": ["DEL TextElement: *(( general-header"]}, {"root": "DEL TextElement: | request-header", "operations": ["DEL TextElement: | request-header"]}, {"root": "DEL TextElement: | entity-header ) CRLF)", "operations": ["DEL TextElement: | entity-header ) CRLF)"]}, {"root": "DEL TextElement: CRLF", "operations": ["DEL TextElement: CRLF"]}, {"root": "DEL TextElement: [ message-body ]", "operations": ["DEL TextElement: [ message-body ]"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"HttpRequest_diff": {"operations": ["Delete TextElement: <pre>(5)", "Delete TextElement: Request       = Request-Line(6)", "Delete TextElement: *(( general-header(7)", "Delete TextElement: | request-header(8)", "Delete TextElement: | entity-header ) CRLF)(9)", "Delete TextElement: CRLF(10)", "Delete TextElement: [ message-body ](11)", "Delete TextElement: </pre>(12)"]}}, {"HttpResponse_cluster": {"actions": [{"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: Response      = Status-Line", "operations": ["DEL TextElement: Response      = Status-Line"]}, {"root": "DEL TextElement: *(( general-header", "operations": ["DEL TextElement: *(( general-header"]}, {"root": "DEL TextElement: | response-header", "operations": ["DEL TextElement: | response-header"]}, {"root": "DEL TextElement: | entity-header ) CRLF)", "operations": ["DEL TextElement: | entity-header ) CRLF)"]}, {"root": "DEL TextElement: CRLF", "operations": ["DEL TextElement: CRLF"]}, {"root": "DEL TextElement: [ message-body ]", "operations": ["DEL TextElement: [ message-body ]"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"HttpResponse_diff": {"operations": ["Delete TextElement: <pre>(6)", "Delete TextElement: Response      = Status-Line(7)", "Delete TextElement: *(( general-header(8)", "Delete TextElement: | response-header(9)", "Delete TextElement: | entity-header ) CRLF)(10)", "Delete TextElement: CRLF(11)", "Delete TextElement: [ message-body ](12)", "Delete TextElement: </pre>(13)"]}}, {"HttpVersion_cluster": {"actions": [{"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT", "operations": ["DEL TextElement: HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"HttpVersion_diff": {"operations": ["Delete TextElement: <pre>(12)", "Delete TextElement: HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT(13)", "Delete TextElement: </pre>(14)"]}}, {"NameValuePair_cluster": {"actions": [{"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: parameter               = attribute \"=\" value", "operations": ["DEL TextElement: parameter               = attribute \"=\" value"]}, {"root": "DEL TextElement: attribute               = token", "operations": ["DEL TextElement: attribute               = token"]}, {"root": "DEL TextElement: value                   = token | quoted-string", "operations": ["DEL TextElement: value                   = token | quoted-string"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"NameValuePair_diff": {"operations": ["Delete TextElement: <pre>(3)", "Delete TextElement: parameter               = attribute \"=\" value(4)", "Delete TextElement: attribute               = token(5)", "Delete TextElement: value                   = token | quoted-string(6)", "Delete TextElement: </pre>(7)"]}}, {"ProtocolException_cluster": {"actions": []}}, {"ProtocolException_diff": {"operations": []}}, {"RequestLine_cluster": {"actions": [{"root": "UPDATE from Request-URI and the protocol version, and ending with CRLF. The to Request-URI and the protocol version.", "operations": ["UPD TextElement: Request-URI and the protocol version, and ending with CRLF. The from Request-URI and the protocol version, and ending with CRLF. The to Request-URI and the protocol version."]}, {"root": "DEL TextElement: elements are separated by SP characters. No CR or LF is allowed", "operations": ["DEL TextElement: elements are separated by SP characters. No CR or LF is allowed"]}, {"root": "DEL TextElement: except in the final CRLF sequence.", "operations": ["DEL TextElement: except in the final CRLF sequence."]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: Request-Line   = Method SP Request-URI SP HTTP-Version CRLF", "operations": ["DEL TextElement: Request-Line   = Method SP Request-URI SP HTTP-Version CRLF"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"RequestLine_diff": {"operations": ["Update TextElement: Request-URI and the protocol version, and ending with CRLF. The(3) to Request-URI and the protocol version.", "Delete TextElement: elements are separated by SP characters. No CR or LF is allowed(4)", "Delete TextElement: except in the final CRLF sequence.(5)", "Delete TextElement: <pre>(6)", "Delete TextElement: Request-Line   = Method SP Request-URI SP HTTP-Version CRLF(7)", "Delete TextElement: </pre>(8)"]}}, {"StatusLine_cluster": {"actions": [{"root": "UPDATE from associated textual phrase, with each element separated by SP to associated textual phrase.", "operations": ["UPD TextElement: associated textual phrase, with each element separated by SP from associated textual phrase, with each element separated by SP to associated textual phrase."]}, {"root": "DEL TextElement: characters. No CR or LF is allowed except in the final CRLF sequence.", "operations": ["DEL TextElement: characters. No CR or LF is allowed except in the final CRLF sequence."]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TextElement: Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF", "operations": ["DEL TextElement: Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}]}}, {"StatusLine_diff": {"operations": ["Update TextElement: associated textual phrase, with each element separated by SP(4) to associated textual phrase.", "Delete TextElement: characters. No CR or LF is allowed except in the final CRLF sequence.(5)", "Delete TextElement: <pre>(6)", "Delete TextElement: Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF(7)", "Delete TextElement: </pre>(8)"]}}], "commit_stats": [{"total_files": 10, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}