{"application": "Netflix-Hystrix", "csha": "91bfc60371048ba04bd6316bbb84e52986e883e7", "files": [{"HystrixCommand_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 67", "operations": ["INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 3", "INS SimpleName: TestCircuitBreaker to SimpleType: TestCircuitBreaker at 0", "INS Block to TryStatement at 0", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: BadRequestCommand to SimpleType: BadRequestCommand at 0", "INS QualifiedName: HystrixRollingNumberEvent.FAILURE to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 3", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS TryStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: BadRequestCommand to SimpleType: BadRequestCommand at 0", "INS VariableDeclarationStatement to Block at 0", "INS Block to TryStatement at 0", "INS CatchClause to TryStatement at 2", "INS QualifiedName: circuitBreaker.metrics to MethodInvocation at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS QualifiedName: HystrixRollingNumberEvent.SUCCESS to MethodInvocation at 2", "INS SimpleName: testBadRequestExceptionViaQueueInThreadOnResponseFromCache to MethodDeclaration at 4", "INS TextElement: Test that BadRequestException behavior works the same on a cached response. to TagElement at 0", "INS Block to CatchClause at 1", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getRollingCount to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: circuitBreaker to ClassInstanceCreation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getRollingCount to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleType: BadRequestCommand to ClassInstanceCreation at 0", "INS QualifiedName: ExecutionIsolationStrategy.THREAD to ClassInstanceCreation at 2", "INS SimpleName: TestCircuitBreaker to SimpleType: TestCircuitBreaker at 0", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: circuitBreaker.metrics to MethodInvocation at 0", "INS SimpleType: TestCircuitBreaker to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: queue to MethodInvocation at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 67", "INS QualifiedName: ExecutionIsolationStrategy.THREAD to ClassInstanceCreation at 2", "INS StringLiteral: \"we expect to receive a \" to InfixExpression: + at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to MethodInvocation at 1", "INS SimpleName: getRollingCount to MethodInvocation at 1", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: circuitBreaker to VariableDeclarationFragment at 0", "INS QualifiedName: HystrixRollingNumberEvent.EXCEPTION_THROWN to MethodInvocation at 2", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleType: TestCircuitBreaker to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 4", "INS QualifiedName: circuitBreaker.metrics to MethodInvocation at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: circuitBreaker to ClassInstanceCreation at 1", "INS TryStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: BadRequestCommand to ClassInstanceCreation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ReturnStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS StringLiteral: \"one\" to ReturnStatement at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: getCacheKey to MethodDeclaration at 3"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS CatchClause to TryStatement at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS CatchClause to TryStatement at 2", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS SimpleName: e to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to CatchClause at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: printStackTrace to MethodInvocation at 1"]}, {"root": "INS SingleVariableDeclaration to CatchClause at 0", "operations": ["INS SimpleType: ExecutionException to SingleVariableDeclaration at 0", "INS SimpleName: ExecutionException to SimpleType: ExecutionException at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to SingleVariableDeclaration at 1"]}, {"root": "INS Block to CatchClause at 1", "operations": ["INS SimpleName: e to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to InstanceofExpression at 0", "INS SimpleName: HystrixBadRequestException to SimpleType: HystrixBadRequestException at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: HystrixBadRequestException to InstanceofExpression at 1", "INS SimpleName: getCause to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS Block to CatchClause at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2", "MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV Block to CatchClause at 1"]}, {"root": "INS Block to CatchClause at 1", "operations": ["INS Block to CatchClause at 1", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: fail to MethodInvocation at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: HystrixBadRequestException to SimpleType: HystrixBadRequestException at 0", "INS SimpleName: HystrixBadRequestException to SimpleType: HystrixBadRequestException at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleType: HystrixBadRequestException to TypeLiteral at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: getCause to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \" but got a \" to InfixExpression: + at 2", "INS IfStatement to Block at 1", "INS SimpleType: HystrixBadRequestException to InstanceofExpression at 1", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: printStackTrace to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InstanceofExpression to IfStatement at 0", "INS InfixExpression: + to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: e to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS MethodInvocation to InstanceofExpression at 0", "INS StringLiteral: \"We expect a \" to InfixExpression: + at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fail to MethodInvocation at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "INS SimpleType: ExecutionException to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: ExecutionException to SimpleType: ExecutionException at 0", "INS SimpleType: ExecutionException to SingleVariableDeclaration at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS SimpleName: f to ReturnStatement at 0", "INS InstanceofExpression to IfStatement at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: HystrixBadRequestException to SimpleType: HystrixBadRequestException at 0", "INS SimpleName: re to InstanceofExpression at 0", "INS SimpleType: HystrixBadRequestException to InstanceofExpression at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "MOVE from TypeLiteral", "operations": ["MOV SimpleType: HystrixBadRequestException to TypeLiteral at 0"]}]}}, {"HystrixCommand_diff": {"operations": ["Insert MethodDeclaration(19903) into TypeDeclaration: class(26228) at 67", "Insert Javadoc(19778) into MethodDeclaration(19903) at 0", "Insert MarkerAnnotation(19780) into MethodDeclaration(19903) at 1", "Insert Modifier: public(19781) into MethodDeclaration(19903) at 2", "Insert PrimitiveType: void(19782) into MethodDeclaration(19903) at 3", "Insert SimpleName: testBadRequestExceptionViaQueueInThreadOnResponseFromCache(19783) into MethodDeclaration(19903) at 4", "Insert Block(19902) into MethodDeclaration(19903) at 5", "Insert MethodDeclaration(25568) into TypeDeclaration: class(25569) at 7", "Insert TagElement(19777) into Javadoc(19778) at 0", "Insert SimpleName: Test(19779) into MarkerAnnotation(19780) at 0", "Insert VariableDeclarationStatement(19791) into Block(19902) at 0", "Insert TryStatement(19807) into Block(19902) at 1", "Insert TryStatement(19877) into Block(19902) at 2", "Insert ExpressionStatement(19885) into Block(19902) at 3", "Insert ExpressionStatement(19893) into Block(19902) at 4", "Insert ExpressionStatement(19901) into Block(19902) at 5", "Insert MarkerAnnotation(25560) into MethodDeclaration(25568) at 0", "Insert Modifier: protected(25561) into MethodDeclaration(25568) at 1", "Insert SimpleType: String(25563) into MethodDeclaration(25568) at 2", "Insert SimpleName: getCacheKey(25564) into MethodDeclaration(25568) at 3", "Insert Block(25567) into MethodDeclaration(25568) at 4", "Insert TextElement: Test that BadRequestException behavior works the same on a cached response.(19776) into TagElement(19777) at 0", "Insert SimpleType: TestCircuitBreaker(19785) into VariableDeclarationStatement(19791) at 0", "Insert VariableDeclarationFragment(19790) into VariableDeclarationStatement(19791) at 1", "Insert Block(19800) into TryStatement(19807) at 0", "Insert CatchClause(19806) into TryStatement(19807) at 1", "Insert Block(19828) into TryStatement(19877) at 0", "Move CatchClause(19938) into TryStatement(19877) at 1", "Insert CatchClause(19876) into TryStatement(19877) at 2", "Insert MethodInvocation(19884) into ExpressionStatement(19885) at 0", "Insert MethodInvocation(19892) into ExpressionStatement(19893) at 0", "Insert MethodInvocation(19900) into ExpressionStatement(19901) at 0", "Insert CatchClause(20086) into TryStatement(20087) at 2", "Insert SimpleName: Override(25559) into MarkerAnnotation(25560) at 0", "Insert SimpleName: String(25562) into SimpleType: String(25563) at 0", "Insert ReturnStatement(25566) into Block(25567) at 0", "Insert SimpleName: TestCircuitBreaker(19784) into SimpleType: TestCircuitBreaker(19785) at 0", "Insert SimpleName: circuitBreaker(19786) into VariableDeclarationFragment(19790) at 0", "Insert ClassInstanceCreation(19789) into VariableDeclarationFragment(19790) at 1", "Insert ExpressionStatement(19799) into Block(19800) at 0", "Insert SingleVariableDeclaration(19804) into CatchClause(19806) at 0", "Insert Block(19805) into CatchClause(19806) at 1", "Insert ExpressionStatement(19817) into Block(19828) at 0", "Insert ExpressionStatement(19827) into Block(19828) at 1", "Insert SingleVariableDeclaration(19832) into CatchClause(19863) at 0", "Insert Block(19862) into CatchClause(19863) at 1", "Move SingleVariableDeclaration(19916) into CatchClause(19876) at 0", "Move Block(19911) into CatchClause(19876) at 1", "Insert SimpleName: assertEquals(19878) into MethodInvocation(19884) at 0", "Insert NumberLiteral: 0(19879) into MethodInvocation(19884) at 1", "Insert MethodInvocation(19883) into MethodInvocation(19884) at 2", "Insert SimpleName: assertEquals(19886) into MethodInvocation(19892) at 0", "Insert NumberLiteral: 0(19887) into MethodInvocation(19892) at 1", "Insert MethodInvocation(19891) into MethodInvocation(19892) at 2", "Insert SimpleName: assertEquals(19894) into MethodInvocation(19900) at 0", "Insert NumberLiteral: 0(19895) into MethodInvocation(19900) at 1", "Insert MethodInvocation(19899) into MethodInvocation(19900) at 2", "Insert Block(20072) into CatchClause(20073) at 1", "Insert SingleVariableDeclaration(20077) into CatchClause(20086) at 0", "Insert Block(20085) into CatchClause(20086) at 1", "Insert StringLiteral: \"one\"(25565) into ReturnStatement(25566) at 0", "Insert SimpleType: TestCircuitBreaker(19788) into ClassInstanceCreation(19789) at 0", "Insert MethodInvocation(19798) into ExpressionStatement(19799) at 0", "Insert SimpleType: Throwable(19802) into SingleVariableDeclaration(19804) at 0", "Insert SimpleName: e(19803) into SingleVariableDeclaration(19804) at 1", "Insert MethodInvocation(19816) into ExpressionStatement(19817) at 0", "Insert MethodInvocation(19826) into ExpressionStatement(19827) at 0", "Insert SimpleType: ExecutionException(19830) into SingleVariableDeclaration(19832) at 0", "Insert SimpleName: e(19831) into SingleVariableDeclaration(19832) at 1", "Move ExpressionStatement(19920) into Block(19862) at 0", "Insert IfStatement(19861) into Block(19862) at 1", "Insert ExpressionStatement(19874) into Block(19875) at 1", "Insert QualifiedName: circuitBreaker.metrics(19880) into MethodInvocation(19883) at 0", "Insert SimpleName: getRollingCount(19881) into MethodInvocation(19883) at 1", "Insert QualifiedName: HystrixRollingNumberEvent.SUCCESS(19882) into MethodInvocation(19883) at 2", "Insert QualifiedName: circuitBreaker.metrics(19888) into MethodInvocation(19891) at 0", "Insert SimpleName: getRollingCount(19889) into MethodInvocation(19891) at 1", "Insert QualifiedName: HystrixRollingNumberEvent.EXCEPTION_THROWN(19890) into MethodInvocation(19891) at 2", "Insert QualifiedName: circuitBreaker.metrics(19896) into MethodInvocation(19899) at 0", "Insert SimpleName: getRollingCount(19897) into MethodInvocation(19899) at 1", "Insert QualifiedName: HystrixRollingNumberEvent.FAILURE(19898) into MethodInvocation(19899) at 2", "Insert SimpleType: ExecutionException(20040) into SingleVariableDeclaration(20042) at 0", "Insert ExpressionStatement(20046) into Block(20072) at 0", "Insert IfStatement(20071) into Block(20072) at 1", "Insert SimpleType: Exception(20075) into SingleVariableDeclaration(20077) at 0", "Insert SimpleName: e(20076) into SingleVariableDeclaration(20077) at 1", "Insert ExpressionStatement(20081) into Block(20085) at 0", "Insert ExpressionStatement(20084) into Block(20085) at 1", "Insert IfStatement(1400) into Block(1401) at 1", "Insert SimpleName: TestCircuitBreaker(19787) into SimpleType: TestCircuitBreaker(19788) at 0", "Insert ClassInstanceCreation(19796) into MethodInvocation(19798) at 0", "Insert SimpleName: execute(19797) into MethodInvocation(19798) at 1", "Insert SimpleName: Throwable(19801) into SimpleType: Throwable(19802) at 0", "Insert MethodInvocation(19814) into MethodInvocation(19816) at 0", "Insert SimpleName: get(19815) into MethodInvocation(19816) at 1", "Insert SimpleName: fail(19818) into MethodInvocation(19826) at 0", "Insert InfixExpression: +(19825) into MethodInvocation(19826) at 1", "Insert SimpleName: ExecutionException(19829) into SimpleType: ExecutionException(19830) at 0", "Insert InstanceofExpression(19842) into IfStatement(19861) at 0", "Insert Block(19843) into IfStatement(19861) at 1", "Move Block(19937) into IfStatement(19861) at 2", "Insert MethodInvocation(19873) into ExpressionStatement(19874) at 0", "Insert SimpleName: ExecutionException(20039) into SimpleType: ExecutionException(20040) at 0", "Insert MethodInvocation(20045) into ExpressionStatement(20046) at 0", "Insert InstanceofExpression(20052) into IfStatement(20071) at 0", "Insert Block(20053) into IfStatement(20071) at 1", "Insert Block(20070) into IfStatement(20071) at 2", "Insert SimpleName: Exception(20074) into SimpleType: Exception(20075) at 0", "Insert MethodInvocation(20080) into ExpressionStatement(20081) at 0", "Insert MethodInvocation(20083) into ExpressionStatement(20084) at 0", "Insert InstanceofExpression(1360) into IfStatement(1400) at 0", "Insert Block(1363) into IfStatement(1400) at 1", "Move IfStatement(1392) into IfStatement(1400) at 2", "Insert SimpleType: BadRequestCommand(19793) into ClassInstanceCreation(19796) at 0", "Insert SimpleName: circuitBreaker(19794) into ClassInstanceCreation(19796) at 1", "Insert QualifiedName: ExecutionIsolationStrategy.THREAD(19795) into ClassInstanceCreation(19796) at 2", "Insert ClassInstanceCreation(19812) into MethodInvocation(19814) at 0", "Insert SimpleName: queue(19813) into MethodInvocation(19814) at 1", "Insert StringLiteral: \"we expect to receive a \"(19819) into InfixExpression: +(19825) at 0", "Insert MethodInvocation(19824) into InfixExpression: +(19825) at 1", "Insert MethodInvocation(19839) into InstanceofExpression(19842) at 0", "Insert SimpleType: HystrixBadRequestException(19841) into InstanceofExpression(19842) at 1", "Insert SimpleName: fail(19872) into MethodInvocation(19873) at 0", "Insert SimpleName: e(20043) into MethodInvocation(20045) at 0", "Insert SimpleName: printStackTrace(20044) into MethodInvocation(20045) at 1", "Insert MethodInvocation(20049) into InstanceofExpression(20052) at 0", "Insert SimpleType: HystrixBadRequestException(20051) into InstanceofExpression(20052) at 1", "Insert ExpressionStatement(20069) into Block(20070) at 0", "Insert SimpleName: e(20078) into MethodInvocation(20080) at 0", "Insert SimpleName: printStackTrace(20079) into MethodInvocation(20080) at 1", "Insert SimpleName: fail(20082) into MethodInvocation(20083) at 0", "Insert SimpleName: re(1357) into InstanceofExpression(1360) at 0", "Insert SimpleType: HystrixBadRequestException(1359) into InstanceofExpression(1360) at 1", "Insert ReturnStatement(1362) into Block(1363) at 0", "Insert SimpleName: BadRequestCommand(19792) into SimpleType: BadRequestCommand(19793) at 0", "Insert SimpleType: BadRequestCommand(19809) into ClassInstanceCreation(19812) at 0", "Insert SimpleName: circuitBreaker(19810) into ClassInstanceCreation(19812) at 1", "Insert QualifiedName: ExecutionIsolationStrategy.THREAD(19811) into ClassInstanceCreation(19812) at 2", "Insert TypeLiteral(19822) into MethodInvocation(19824) at 0", "Insert SimpleName: getSimpleName(19823) into MethodInvocation(19824) at 1", "Insert SimpleName: e(19837) into MethodInvocation(19839) at 0", "Insert SimpleName: getCause(19838) into MethodInvocation(19839) at 1", "Insert SimpleName: HystrixBadRequestException(19840) into SimpleType: HystrixBadRequestException(19841) at 0", "Insert SimpleName: e(20047) into MethodInvocation(20049) at 0", "Insert SimpleName: getCause(20048) into MethodInvocation(20049) at 1", "Insert SimpleName: HystrixBadRequestException(20050) into SimpleType: HystrixBadRequestException(20051) at 0", "Insert MethodInvocation(20068) into ExpressionStatement(20069) at 0", "Insert SimpleName: HystrixBadRequestException(1358) into SimpleType: HystrixBadRequestException(1359) at 0", "Insert SimpleName: f(1361) into ReturnStatement(1362) at 0", "Insert SimpleName: BadRequestCommand(19808) into SimpleType: BadRequestCommand(19809) at 0", "Move SimpleType: HystrixBadRequestException(19904) into TypeLiteral(19822) at 0", "Insert SimpleName: fail(20054) into MethodInvocation(20068) at 0", "Insert InfixExpression: +(20067) into MethodInvocation(20068) at 1", "Insert StringLiteral: \"We expect a \"(20055) into InfixExpression: +(20067) at 0", "Insert MethodInvocation(20060) into InfixExpression: +(20067) at 1", "Insert StringLiteral: \" but got a \"(20061) into InfixExpression: +(20067) at 2", "Insert MethodInvocation(20066) into InfixExpression: +(20067) at 3", "Insert TypeLiteral(20058) into MethodInvocation(20060) at 0", "Insert SimpleName: getSimpleName(20059) into MethodInvocation(20060) at 1", "Insert MethodInvocation(20064) into MethodInvocation(20066) at 0", "Insert SimpleName: getSimpleName(20065) into MethodInvocation(20066) at 1", "Insert SimpleType: HystrixBadRequestException(20057) into TypeLiteral(20058) at 0", "Insert SimpleName: e(20062) into MethodInvocation(20064) at 0", "Insert SimpleName: getClass(20063) into MethodInvocation(20064) at 1", "Insert SimpleName: HystrixBadRequestException(20056) into SimpleType: HystrixBadRequestException(20057) at 0"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}