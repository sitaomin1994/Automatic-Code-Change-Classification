{"application": "google-closure-compiler", "csha": "deb0130141f58b5d4b3466ac42b9a7d04ff981ce", "files": [{"DefaultPassConfig_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS ParameterizedType: List<AbstractPeepholeOptimization> to VariableDeclarationStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: optimizations to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: List to ParameterizedType: List<AbstractPeepholeOptimization> at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: AbstractPeepholeOptimization to SimpleType: AbstractPeepholeOptimization at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleType: AbstractPeepholeOptimization to ParameterizedType: List<AbstractPeepholeOptimization> at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS SimpleName: optimizations to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: optimizations to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: optimizations to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS ExpressionStatement to Block at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: optimizations to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS SimpleName: optimizations to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 7"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS MethodInvocation to FieldAccess at 0", "INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: j2clPassMode to FieldAccess at 1", "INS Block to IfStatement at 1", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: getOptions to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS IfStatement to Block at 8", "INS SimpleName: shouldAddJ2clPasses to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: optimizations to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS SimpleName: optimizations to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS ExpressionStatement to Block at 10", "INS SimpleName: optimizations to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "UPDATE from j2clOptBundlePass to j2clClinitPass", "operations": ["UPD SimpleName: j2clOptBundlePass from j2clOptBundlePass to j2clClinitPass", "UPD SimpleName: j2clOptBundlePass from j2clOptBundlePass to j2clClinitPass"]}, {"root": "UPDATE from Rewrites J2CL constructs to be more optimizable.  to Optimizes J2CL clinit methods. ", "operations": ["UPD TextElement: Rewrites J2CL constructs to be more optimizable.  from Rewrites J2CL constructs to be more optimizable.  to Optimizes J2CL clinit methods. "]}, {"root": "UPDATE from \"j2clOptBundlePass\" to \"j2clClinitPass\"", "operations": ["UPD StringLiteral: \"j2clOptBundlePass\" from \"j2clOptBundlePass\" to \"j2clClinitPass\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2", "MOV ClassInstanceCreation to MethodInvocation at 2", "MOV ClassInstanceCreation to MethodInvocation at 2", "MOV ClassInstanceCreation to MethodInvocation at 2", "MOV ClassInstanceCreation to MethodInvocation at 2", "MOV ClassInstanceCreation to MethodInvocation at 2", "MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "INS SimpleName: optimizations to ClassInstanceCreation at 3", "operations": ["INS SimpleName: optimizations to ClassInstanceCreation at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: List to ParameterizedType: List<AbstractPeepholeOptimization> at 0", "INS ParameterizedType: List<AbstractPeepholeOptimization> to VariableDeclarationStatement at 0", "INS SimpleType: AbstractPeepholeOptimization to ParameterizedType: List<AbstractPeepholeOptimization> at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: AbstractPeepholeOptimization to SimpleType: AbstractPeepholeOptimization at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: peepholeOptimizations to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: peepholeOptimizations to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleName: compiler to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: shouldAddJ2clPasses to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: peepholeOptimizations to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: getOptions to MethodInvocation at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: j2clPassMode to FieldAccess at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "INS SimpleName: peepholeOptimizations to ClassInstanceCreation at 3", "operations": ["INS SimpleName: peepholeOptimizations to ClassInstanceCreation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: J2clEqualitySameRewriterPass to ClassInstanceCreation at 0"]}, {"root": "DEL SimpleName: compiler", "operations": ["DEL SimpleName: compiler"]}, {"root": "DEL SimpleName: changedScopeNodes", "operations": ["DEL SimpleName: changedScopeNodes"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: J2clClinitPrunerPass", "DEL SimpleType: J2clClinitPrunerPass", "DEL Modifier: final", "DEL SimpleName: j2clClinitPrunerPass", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: j2clEqualitySameRewriterPass", "DEL VariableDeclarationStatement"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: root", "DEL SimpleName: Node", "DEL SimpleType: Node", "DEL SimpleName: externs", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: root", "DEL SimpleType: CompilerPass", "DEL SimpleName: process", "DEL SimpleName: process", "DEL SimpleName: j2clClinitPrunerPass", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: Node", "DEL Modifier: public", "DEL SimpleName: root", "DEL MarkerAnnotation", "DEL SimpleName: j2clEqualitySameRewriterPass", "DEL SimpleName: externs", "DEL SimpleName: Override", "DEL SimpleName: CompilerPass", "DEL SimpleType: Node", "DEL SimpleName: externs", "DEL AnonymousClassDeclaration", "DEL MethodInvocation", "DEL SimpleName: process", "DEL ExpressionStatement", "DEL PrimitiveType: void"]}]}}, {"DefaultPassConfig_diff": {"operations": ["Insert VariableDeclarationStatement(4475) into Block(4556) at 2", "Insert ExpressionStatement(4483) into Block(4556) at 3", "Insert ExpressionStatement(4492) into Block(4556) at 4", "Insert ExpressionStatement(4500) into Block(4556) at 5", "Insert ExpressionStatement(4509) into Block(4556) at 6", "Insert ExpressionStatement(4516) into Block(4556) at 7", "Insert IfStatement(4532) into Block(4556) at 8", "Insert ExpressionStatement(4541) into Block(4556) at 9", "Insert ExpressionStatement(4548) into Block(4556) at 10", "Update SimpleName: j2clOptBundlePass(9860) to j2clClinitPass", "Insert ParameterizedType: List<AbstractPeepholeOptimization>(4468) into VariableDeclarationStatement(4475) at 0", "Insert VariableDeclarationFragment(4474) into VariableDeclarationStatement(4475) at 1", "Insert MethodInvocation(4482) into ExpressionStatement(4483) at 0", "Insert MethodInvocation(4491) into ExpressionStatement(4492) at 0", "Insert MethodInvocation(4499) into ExpressionStatement(4500) at 0", "Insert MethodInvocation(4508) into ExpressionStatement(4509) at 0", "Insert MethodInvocation(4515) into ExpressionStatement(4516) at 0", "Insert MethodInvocation(4523) into IfStatement(4532) at 0", "Insert Block(4531) into IfStatement(4532) at 1", "Insert MethodInvocation(4540) into ExpressionStatement(4541) at 0", "Insert MethodInvocation(4547) into ExpressionStatement(4548) at 0", "Update TextElement: Rewrites J2CL constructs to be more optimizable. (9853) to Optimizes J2CL clinit methods. ", "Update StringLiteral: \"j2clOptBundlePass\"(9863) to \"j2clClinitPass\"", "Insert SimpleType: List(4465) into ParameterizedType: List<AbstractPeepholeOptimization>(4468) at 0", "Insert SimpleType: AbstractPeepholeOptimization(4467) into ParameterizedType: List<AbstractPeepholeOptimization>(4468) at 1", "Insert SimpleName: optimizations(4469) into VariableDeclarationFragment(4474) at 0", "Insert ClassInstanceCreation(4473) into VariableDeclarationFragment(4474) at 1", "Insert SimpleName: optimizations(4476) into MethodInvocation(4482) at 0", "Insert SimpleName: add(4477) into MethodInvocation(4482) at 1", "Move ClassInstanceCreation(4438) into MethodInvocation(4482) at 2", "Insert SimpleName: optimizations(4484) into MethodInvocation(4491) at 0", "Insert SimpleName: add(4485) into MethodInvocation(4491) at 1", "Move ClassInstanceCreation(4443) into MethodInvocation(4491) at 2", "Insert SimpleName: optimizations(4493) into MethodInvocation(4499) at 0", "Insert SimpleName: add(4494) into MethodInvocation(4499) at 1", "Move ClassInstanceCreation(4447) into MethodInvocation(4499) at 2", "Insert SimpleName: optimizations(4501) into MethodInvocation(4508) at 0", "Insert SimpleName: add(4502) into MethodInvocation(4508) at 1", "Move ClassInstanceCreation(4452) into MethodInvocation(4508) at 2", "Insert SimpleName: optimizations(4510) into MethodInvocation(4515) at 0", "Insert SimpleName: add(4511) into MethodInvocation(4515) at 1", "Move ClassInstanceCreation(4455) into MethodInvocation(4515) at 2", "Insert FieldAccess(4521) into MethodInvocation(4523) at 0", "Insert SimpleName: shouldAddJ2clPasses(4522) into MethodInvocation(4523) at 1", "Insert ExpressionStatement(4530) into Block(4531) at 0", "Insert SimpleName: optimizations(4533) into MethodInvocation(4540) at 0", "Insert SimpleName: add(4534) into MethodInvocation(4540) at 1", "Move ClassInstanceCreation(4460) into MethodInvocation(4540) at 2", "Insert SimpleName: optimizations(4542) into MethodInvocation(4547) at 0", "Insert SimpleName: add(4543) into MethodInvocation(4547) at 1", "Move ClassInstanceCreation(4463) into MethodInvocation(4547) at 2", "Insert SimpleName: optimizations(4553) into ClassInstanceCreation(4554) at 3", "Insert SimpleName: List(4464) into SimpleType: List(4465) at 0", "Insert SimpleName: AbstractPeepholeOptimization(4466) into SimpleType: AbstractPeepholeOptimization(4467) at 0", "Insert ParameterizedType: ArrayList<>(4472) into ClassInstanceCreation(4473) at 0", "Insert MethodInvocation(4519) into FieldAccess(4521) at 0", "Insert SimpleName: j2clPassMode(4520) into FieldAccess(4521) at 1", "Insert MethodInvocation(4529) into ExpressionStatement(4530) at 0", "Update SimpleName: j2clOptBundlePass(2267) to j2clClinitPass", "Insert VariableDeclarationStatement(4317) into Block(4349) at 0", "Insert ExpressionStatement(4324) into Block(4349) at 1", "Insert IfStatement(4340) into Block(4349) at 2", "Insert SimpleType: ArrayList(4471) into ParameterizedType: ArrayList<>(4472) at 0", "Insert SimpleName: compiler(4517) into MethodInvocation(4519) at 0", "Insert SimpleName: getOptions(4518) into MethodInvocation(4519) at 1", "Insert SimpleName: optimizations(4524) into MethodInvocation(4529) at 0", "Insert SimpleName: add(4525) into MethodInvocation(4529) at 1", "Move ClassInstanceCreation(9907) into MethodInvocation(4529) at 2", "Insert ParameterizedType: List<AbstractPeepholeOptimization>(4310) into VariableDeclarationStatement(4317) at 0", "Insert VariableDeclarationFragment(4316) into VariableDeclarationStatement(4317) at 1", "Insert MethodInvocation(4323) into ExpressionStatement(4324) at 0", "Insert MethodInvocation(4331) into IfStatement(4340) at 0", "Insert Block(4339) into IfStatement(4340) at 1", "Insert SimpleName: ArrayList(4470) into SimpleType: ArrayList(4471) at 0", "Move ClassInstanceCreation(9896) into ReturnStatement(9983) at 0", "Insert SimpleType: List(4307) into ParameterizedType: List<AbstractPeepholeOptimization>(4310) at 0", "Insert SimpleType: AbstractPeepholeOptimization(4309) into ParameterizedType: List<AbstractPeepholeOptimization>(4310) at 1", "Insert SimpleName: peepholeOptimizations(4311) into VariableDeclarationFragment(4316) at 0", "Insert ClassInstanceCreation(4315) into VariableDeclarationFragment(4316) at 1", "Insert SimpleName: peepholeOptimizations(4318) into MethodInvocation(4323) at 0", "Insert SimpleName: add(4319) into MethodInvocation(4323) at 1", "Move ClassInstanceCreation(4313) into MethodInvocation(4323) at 2", "Insert FieldAccess(4329) into MethodInvocation(4331) at 0", "Insert SimpleName: shouldAddJ2clPasses(4330) into MethodInvocation(4331) at 1", "Insert ExpressionStatement(4338) into Block(4339) at 0", "Insert SimpleName: peepholeOptimizations(4346) into ClassInstanceCreation(4347) at 3", "Insert SimpleName: List(4306) into SimpleType: List(4307) at 0", "Insert SimpleName: AbstractPeepholeOptimization(4308) into SimpleType: AbstractPeepholeOptimization(4309) at 0", "Insert ParameterizedType: ArrayList<>(4314) into ClassInstanceCreation(4315) at 0", "Insert MethodInvocation(4327) into FieldAccess(4329) at 0", "Insert SimpleName: j2clPassMode(4328) into FieldAccess(4329) at 1", "Insert MethodInvocation(4337) into ExpressionStatement(4338) at 0", "Insert SimpleType: ArrayList(4313) into ParameterizedType: ArrayList<>(4314) at 0", "Insert SimpleName: compiler(4325) into MethodInvocation(4327) at 0", "Insert SimpleName: getOptions(4326) into MethodInvocation(4327) at 1", "Insert SimpleName: peepholeOptimizations(4332) into MethodInvocation(4337) at 0", "Insert SimpleName: add(4333) into MethodInvocation(4337) at 1", "Insert ClassInstanceCreation(4336) into MethodInvocation(4337) at 2", "Insert SimpleName: ArrayList(4312) into SimpleType: ArrayList(4313) at 0", "Move SimpleType: J2clEqualitySameRewriterPass(9901) into ClassInstanceCreation(4336) at 0", "Delete SimpleName: compiler(9905)", "Delete SimpleName: changedScopeNodes(9906)", "Delete Modifier: final(9888)", "Delete SimpleName: J2clClinitPrunerPass(9889)", "Delete SimpleType: J2clClinitPrunerPass(9890)", "Delete SimpleName: j2clClinitPrunerPass(9891)", "Delete VariableDeclarationFragment(9897)", "Delete VariableDeclarationStatement(9898)", "Delete Modifier: final(9899)", "Delete SimpleName: j2clEqualitySameRewriterPass(9902)", "Delete VariableDeclarationFragment(9908)", "Delete VariableDeclarationStatement(9909)", "Delete SimpleName: CompilerPass(9910)", "Delete SimpleType: CompilerPass(9911)", "Delete SimpleName: Override(9912)", "Delete MarkerAnnotation(9913)", "Delete Modifier: public(9914)", "Delete PrimitiveType: void(9915)", "Delete SimpleName: process(9916)", "Delete SimpleName: Node(9917)", "Delete SimpleType: Node(9918)", "Delete SimpleName: externs(9919)", "Delete SingleVariableDeclaration(9920)", "Delete SimpleName: Node(9921)", "Delete SimpleType: Node(9922)", "Delete SimpleName: root(9923)", "Delete SingleVariableDeclaration(9924)", "Delete SimpleName: j2clClinitPrunerPass(9925)", "Delete SimpleName: process(9926)", "Delete SimpleName: externs(9927)", "Delete SimpleName: root(9928)", "Delete MethodInvocation(9929)", "Delete ExpressionStatement(9930)", "Delete SimpleName: j2clEqualitySameRewriterPass(9931)", "Delete SimpleName: process(9932)", "Delete SimpleName: externs(9933)", "Delete SimpleName: root(9934)", "Delete MethodInvocation(9935)", "Delete ExpressionStatement(9936)", "Delete Block(9937)", "Delete MethodDeclaration(9938)", "Delete AnonymousClassDeclaration(9939)", "Delete ClassInstanceCreation(9940)"]}}, {"J2clEqualitySameRewriterPass_cluster": {"actions": [{"root": "INS SimpleType: AbstractPeepholeOptimization to TypeDeclaration: class at 3", "operations": ["INS SimpleType: AbstractPeepholeOptimization to TypeDeclaration: class at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: replacement to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: node to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: replacement to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: shouldRunJ2clPasses to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: node to InfixExpression: != at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: replaceWith to MethodInvocation at 1", "INS SimpleName: replacement to InfixExpression: != at 0", "INS IfStatement to Block at 0", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 3", "INS ReturnStatement to Block at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: replacement to MethodInvocation at 2", "INS SimpleName: useSourceInfoIfMissingFrom to MethodInvocation at 1", "INS SimpleName: node to MethodInvocation at 2"]}, {"root": "UPDATE from AbstractCompiler to AbstractPeepholeOptimization", "operations": ["UPD SimpleName: AbstractCompiler from AbstractCompiler to AbstractPeepholeOptimization"]}, {"root": "MOVE from SimpleType: AbstractPeepholeOptimization", "operations": ["MOV SimpleName: AbstractCompiler to SimpleType: AbstractPeepholeOptimization at 0"]}, {"root": "INS PrimitiveType: boolean to FieldDeclaration at 1", "operations": ["INS PrimitiveType: boolean to FieldDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: process to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 1", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "UPDATE from J2clEqualitySameRewriterPass to beginTraversal", "operations": ["UPD SimpleName: J2clEqualitySameRewriterPass from J2clEqualitySameRewriterPass to beginTraversal"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Node to MethodDeclaration at 1"]}, {"root": "UPDATE from process to optimizeSubtree", "operations": ["UPD SimpleName: process from process to optimizeSubtree"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Node to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Node to MethodDeclaration at 1"]}, {"root": "UPDATE from changedScopeNodes to shouldRunJ2clPasses", "operations": ["UPD SimpleName: changedScopeNodes from changedScopeNodes to shouldRunJ2clPasses"]}, {"root": "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 4", "INS SimpleName: callNode to ReturnStatement at 0"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS ReturnStatement to Block at 3"]}, {"root": "INS SuperMethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: beginTraversal to SuperMethodInvocation at 0", "INS SimpleName: compiler to SuperMethodInvocation at 1", "INS SuperMethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ConditionalExpression to ReturnStatement at 0"]}, {"root": "INS SimpleName: shouldRunJ2clPasses to Assignment: = at 0", "operations": ["INS SimpleName: shouldRunJ2clPasses to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS SimpleName: node to ReturnStatement at 0", "operations": ["INS SimpleName: node to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: reportCodeChange to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: rewriteToEq to MethodInvocation at 0", "MOV SimpleName: firstExpr to MethodInvocation at 1", "MOV SimpleName: secondExpr to MethodInvocation at 2", "MOV QualifiedName: Eq.DOUBLE to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: rewriteToEq to MethodInvocation at 0", "MOV SimpleName: firstExpr to MethodInvocation at 1", "MOV QualifiedName: Eq.TRIPLE to MethodInvocation at 3", "MOV SimpleName: secondExpr to MethodInvocation at 2"]}, {"root": "UPDATE from changedScopeNodes to replacement", "operations": ["UPD SimpleName: changedScopeNodes from changedScopeNodes to replacement"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: changedScopeNodes to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL SimpleType: AbstractPostOrderCallback", "operations": ["DEL SimpleType: AbstractPostOrderCallback", "DEL SimpleName: AbstractPostOrderCallback"]}, {"root": "DEL SimpleType: CompilerPass", "operations": ["DEL SimpleType: CompilerPass", "DEL SimpleName: CompilerPass"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: AbstractCompiler", "DEL SimpleName: compiler"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL ParameterizedType: List<Node>", "operations": ["DEL SimpleName: List", "DEL SimpleType: List", "DEL ParameterizedType: List<Node>"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL ParameterizedType: List<Node>", "DEL SimpleType: List", "DEL SimpleName: changedScopeNodes"]}, {"root": "DEL Assignment: =", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: compiler", "DEL SimpleName: compiler"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: changedScopeNodes", "DEL FieldAccess", "DEL ThisExpression"]}, {"root": "DEL SimpleName: changedScopeNodes", "operations": ["DEL SimpleName: changedScopeNodes"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: traverseEs6ScopeRoots", "DEL BooleanLiteral: false", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: compiler", "DEL Block", "DEL SimpleType: Node", "DEL SimpleName: Node", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: externs", "DEL PrimitiveType: void", "DEL SimpleName: root", "DEL SimpleName: root", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: NodeTraversal"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleType: Node", "DEL SimpleType: NodeTraversal", "DEL SimpleName: parent", "DEL Modifier: public", "DEL SimpleName: Node", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: t", "DEL SimpleName: NodeTraversal", "DEL Block", "DEL Block", "DEL SimpleName: visit", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: callNode"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: callNode"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: callNode", "DEL SingleVariableDeclaration", "DEL SimpleName: Node", "DEL SimpleType: Node"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleType: Node", "DEL VariableDeclarationStatement", "DEL SimpleName: callNode", "DEL VariableDeclarationFragment", "DEL SimpleName: getParent", "DEL SimpleName: Node", "DEL SimpleName: parent"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: replacement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: parent", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: useSourceInfoIfMissingFrom", "DEL SimpleName: callNode", "DEL SimpleName: replaceChild", "DEL SimpleName: replacement", "DEL MethodInvocation", "DEL SimpleName: callNode"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: parent", "DEL MethodInvocation", "DEL SimpleName: compiler", "DEL SimpleName: reportChangeToEnclosingScope", "DEL ExpressionStatement"]}]}}, {"J2clEqualitySameRewriterPass_diff": {"operations": ["Insert SimpleType: AbstractPeepholeOptimization(12) into TypeDeclaration: class(267) at 3", "Insert MethodDeclaration(105) into TypeDeclaration: class(267) at 7", "Update SimpleName: AbstractCompiler(32) to AbstractPeepholeOptimization", "Move SimpleName: AbstractCompiler(32) into SimpleType: AbstractPeepholeOptimization(12) at 0", "Insert PrimitiveType: boolean(25) into FieldDeclaration(29) at 1", "Move MarkerAnnotation(74) into MethodDeclaration(50) at 0", "Insert PrimitiveType: void(32) into MethodDeclaration(50) at 1", "Update SimpleName: J2clEqualitySameRewriterPass(47) to beginTraversal", "Move MarkerAnnotation(106) into MethodDeclaration(105) at 0", "Move SimpleType: Node(55) into MethodDeclaration(105) at 1", "Update SimpleName: process(77) to optimizeSubtree", "Move SimpleName: process(77) into MethodDeclaration(105) at 2", "Move SingleVariableDeclaration(117) into MethodDeclaration(105) at 3", "Insert Block(104) into MethodDeclaration(105) at 4", "Move SimpleType: Node(42) into MethodDeclaration(169) at 1", "Move SimpleType: Node(234) into MethodDeclaration(210) at 1", "Update SimpleName: changedScopeNodes(44) to shouldRunJ2clPasses", "Insert BooleanLiteral: false(27) into VariableDeclarationFragment(28) at 1", "Insert IfStatement(65) into Block(104) at 0", "Move IfStatement(93) into Block(104) at 1", "Insert VariableDeclarationStatement(81) into Block(104) at 2", "Insert IfStatement(101) into Block(104) at 3", "Insert ReturnStatement(103) into Block(104) at 4", "Insert ReturnStatement(167) into Block(168) at 4", "Insert ReturnStatement(208) into Block(209) at 2", "Insert SuperMethodInvocation(40) into ExpressionStatement(41) at 0", "Insert PrefixExpression: !(61) into IfStatement(65) at 0", "Insert Block(64) into IfStatement(65) at 1", "Move SimpleType: Node(79) into VariableDeclarationStatement(81) at 0", "Insert VariableDeclarationFragment(80) into VariableDeclarationStatement(81) at 1", "Insert InfixExpression: !=(84) into IfStatement(101) at 0", "Insert Block(100) into IfStatement(101) at 1", "Insert SimpleName: replacement(102) into ReturnStatement(103) at 0", "Insert SimpleName: callNode(166) into ReturnStatement(167) at 0", "Move ConditionalExpression(249) into ReturnStatement(208) at 0", "Insert SimpleName: beginTraversal(38) into SuperMethodInvocation(40) at 0", "Insert SimpleName: compiler(39) into SuperMethodInvocation(40) at 1", "Insert SimpleName: shouldRunJ2clPasses(42) into Assignment: =(47) at 0", "Move MethodInvocation(89) into Assignment: =(47) at 1", "Insert SimpleName: shouldRunJ2clPasses(60) into PrefixExpression: !(61) at 0", "Insert ReturnStatement(63) into Block(64) at 0", "Move MethodInvocation(124) into PrefixExpression: !(69) at 0", "Insert SimpleName: replacement(76) into VariableDeclarationFragment(80) at 0", "Move MethodInvocation(127) into VariableDeclarationFragment(80) at 1", "Insert SimpleName: replacement(82) into InfixExpression: !=(84) at 0", "Insert SimpleName: node(83) into InfixExpression: !=(84) at 1", "Insert ExpressionStatement(91) into Block(100) at 0", "Insert ExpressionStatement(96) into Block(100) at 1", "Move ExpressionStatement(128) into Block(100) at 2", "Insert ReturnStatement(144) into Block(145) at 0", "Insert ReturnStatement(163) into Block(164) at 0", "Insert SimpleName: node(62) into ReturnStatement(63) at 0", "Insert SimpleName: node(70) into ReturnStatement(71) at 0", "Insert Assignment: =(90) into ExpressionStatement(91) at 0", "Insert MethodInvocation(95) into ExpressionStatement(96) at 0", "Insert MethodInvocation(98) into ExpressionStatement(99) at 0", "Insert MethodInvocation(143) into ReturnStatement(144) at 0", "Insert MethodInvocation(162) into ReturnStatement(163) at 0", "Insert SimpleName: replacement(85) into Assignment: =(90) at 0", "Insert MethodInvocation(89) into Assignment: =(90) at 1", "Insert SimpleName: node(92) into MethodInvocation(95) at 0", "Insert SimpleName: replaceWith(93) into MethodInvocation(95) at 1", "Insert SimpleName: replacement(94) into MethodInvocation(95) at 2", "Insert SimpleName: reportCodeChange(97) into MethodInvocation(98) at 0", "Move SimpleName: rewriteToEq(165) into MethodInvocation(143) at 0", "Move SimpleName: firstExpr(167) into MethodInvocation(143) at 1", "Move SimpleName: secondExpr(168) into MethodInvocation(143) at 2", "Move QualifiedName: Eq.DOUBLE(169) into MethodInvocation(143) at 3", "Move SimpleName: rewriteToEq(186) into MethodInvocation(162) at 0", "Move SimpleName: firstExpr(188) into MethodInvocation(162) at 1", "Move SimpleName: secondExpr(189) into MethodInvocation(162) at 2", "Move QualifiedName: Eq.TRIPLE(190) into MethodInvocation(162) at 3", "Update SimpleName: changedScopeNodes(98) to replacement", "Move SimpleName: changedScopeNodes(98) into MethodInvocation(89) at 0", "Insert SimpleName: useSourceInfoIfMissingFrom(87) into MethodInvocation(89) at 1", "Insert SimpleName: node(88) into MethodInvocation(89) at 2", "Delete QualifiedName: com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.List(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: AbstractPostOrderCallback(15)", "Delete SimpleType: AbstractPostOrderCallback(16)", "Delete SimpleName: CompilerPass(17)", "Delete SimpleType: CompilerPass(18)", "Delete Modifier: private(30)", "Delete Modifier: final(31)", "Delete SimpleType: AbstractCompiler(33)", "Delete SimpleName: compiler(34)", "Delete VariableDeclarationFragment(35)", "Delete FieldDeclaration(36)", "Delete Modifier: final(38)", "Delete SimpleName: List(39)", "Delete SimpleType: List(40)", "Delete ParameterizedType: List<Node>(43)", "Delete SimpleName: List(52)", "Delete SimpleType: List(53)", "Delete ParameterizedType: List<Node>(56)", "Delete SimpleName: changedScopeNodes(57)", "Delete SingleVariableDeclaration(58)", "Delete ThisExpression(59)", "Delete SimpleName: compiler(60)", "Delete FieldAccess(61)", "Delete SimpleName: compiler(62)", "Delete Assignment: =(63)", "Delete ThisExpression(65)", "Delete SimpleName: changedScopeNodes(66)", "Delete FieldAccess(67)", "Delete SimpleName: changedScopeNodes(68)", "Delete Modifier: public(75)", "Delete PrimitiveType: void(76)", "Delete SimpleName: externs(80)", "Delete SingleVariableDeclaration(81)", "Delete SimpleName: Node(82)", "Delete SimpleType: Node(83)", "Delete SimpleName: root(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: NodeTraversal(94)", "Delete SimpleName: traverseEs6ScopeRoots(95)", "Delete SimpleName: compiler(96)", "Delete SimpleName: root(97)", "Delete ThisExpression(99)", "Delete BooleanLiteral: false(100)", "Delete MethodInvocation(101)", "Delete ExpressionStatement(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete Modifier: public(107)", "Delete PrimitiveType: void(108)", "Delete SimpleName: visit(109)", "Delete SimpleName: NodeTraversal(110)", "Delete SimpleType: NodeTraversal(111)", "Delete SimpleName: t(112)", "Delete SingleVariableDeclaration(113)", "Delete SimpleName: Node(118)", "Delete SimpleType: Node(119)", "Delete SimpleName: parent(120)", "Delete SingleVariableDeclaration(121)", "Delete Block(129)", "Delete IfStatement(130)", "Delete Block(131)", "Delete MethodDeclaration(132)", "Delete PrimitiveType: void(134)", "Delete SimpleName: callNode(166)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)", "Delete ReturnStatement(172)", "Delete SimpleName: callNode(187)", "Delete MethodInvocation(191)", "Delete ExpressionStatement(192)", "Delete ReturnStatement(193)", "Delete PrimitiveType: void(199)", "Delete SimpleName: Node(201)", "Delete SimpleType: Node(202)", "Delete SimpleName: callNode(203)", "Delete SingleVariableDeclaration(204)", "Delete SimpleName: Node(217)", "Delete SimpleType: Node(218)", "Delete SimpleName: parent(219)", "Delete SimpleName: callNode(220)", "Delete SimpleName: getParent(221)", "Delete MethodInvocation(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete SimpleName: replacement(235)", "Delete VariableDeclarationFragment(250)", "Delete VariableDeclarationStatement(251)", "Delete SimpleName: parent(252)", "Delete SimpleName: replaceChild(253)", "Delete SimpleName: callNode(254)", "Delete SimpleName: replacement(255)", "Delete SimpleName: useSourceInfoIfMissingFrom(256)", "Delete SimpleName: callNode(257)", "Delete MethodInvocation(258)", "Delete MethodInvocation(259)", "Delete ExpressionStatement(260)", "Delete SimpleName: compiler(261)", "Delete SimpleName: reportChangeToEnclosingScope(262)", "Delete SimpleName: parent(263)", "Delete MethodInvocation(264)", "Delete ExpressionStatement(265)"]}}, {"PeepholeOptimizationsPass_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.util.Arrays to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: passName to SingleVariableDeclaration at 1", "INS SimpleName: AbstractCompiler to SimpleType: AbstractCompiler at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: compiler to ConstructorInvocation at 0", "INS SimpleName: asList to MethodInvocation at 1", "INS SimpleName: compiler to SingleVariableDeclaration at 1", "INS SimpleName: passName to ConstructorInvocation at 1", "INS SimpleName: PeepholeOptimizationsPass to MethodDeclaration at 1", "INS SimpleName: Arrays to MethodInvocation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: optimizations to MethodInvocation at 2", "INS SimpleType: AbstractCompiler to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS ConstructorInvocation to Block at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS MethodInvocation to ConstructorInvocation at 2"]}, {"root": "INS ParameterizedType: List<AbstractPeepholeOptimization> to FieldDeclaration at 2", "operations": ["INS ParameterizedType: List<AbstractPeepholeOptimization> to FieldDeclaration at 2", "INS SimpleType: List to ParameterizedType: List<AbstractPeepholeOptimization> at 0", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleType: AbstractPeepholeOptimization to ParameterizedType: List<AbstractPeepholeOptimization> at 1", "INS SimpleType: List to ParameterizedType: List<AbstractPeepholeOptimization> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: AbstractPeepholeOptimization to SimpleType: AbstractPeepholeOptimization at 0", "INS ParameterizedType: List<AbstractPeepholeOptimization> to SingleVariableDeclaration at 0", "INS SimpleName: optimizations to SingleVariableDeclaration at 1", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "MOVE from ParameterizedType: List<AbstractPeepholeOptimization>", "operations": ["MOV SimpleType: AbstractPeepholeOptimization to ParameterizedType: List<AbstractPeepholeOptimization> at 1"]}, {"root": "DEL ArrayType: AbstractPeepholeOptimization[]", "operations": ["DEL ArrayType: AbstractPeepholeOptimization[]", "DEL Dimension"]}]}}, {"PeepholeOptimizationsPass_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(265) at 4", "Insert QualifiedName: java.util.Arrays(8) into ImportDeclaration(9) at 0", "Insert MethodDeclaration(74) into TypeDeclaration: class(264) at 7", "Insert ParameterizedType: List<AbstractPeepholeOptimization>(41) into FieldDeclaration(44) at 2", "Move Javadoc(49) into MethodDeclaration(74) at 0", "Insert SimpleName: PeepholeOptimizationsPass(53) into MethodDeclaration(74) at 1", "Insert SingleVariableDeclaration(57) into MethodDeclaration(74) at 2", "Insert SingleVariableDeclaration(61) into MethodDeclaration(74) at 3", "Move SingleVariableDeclaration(62) into MethodDeclaration(74) at 4", "Insert Block(73) into MethodDeclaration(74) at 5", "Insert SingleVariableDeclaration(90) into MethodDeclaration(116) at 3", "Insert SimpleType: List(38) into ParameterizedType: List<AbstractPeepholeOptimization>(41) at 0", "Move SimpleType: AbstractPeepholeOptimization(36) into ParameterizedType: List<AbstractPeepholeOptimization>(41) at 1", "Insert SimpleType: AbstractCompiler(55) into SingleVariableDeclaration(57) at 0", "Insert SimpleName: compiler(56) into SingleVariableDeclaration(57) at 1", "Insert SimpleType: String(59) into SingleVariableDeclaration(61) at 0", "Insert SimpleName: passName(60) into SingleVariableDeclaration(61) at 1", "Insert ConstructorInvocation(72) into Block(73) at 0", "Insert ParameterizedType: List<AbstractPeepholeOptimization>(88) into SingleVariableDeclaration(90) at 0", "Insert SimpleName: optimizations(89) into SingleVariableDeclaration(90) at 1", "Insert SimpleName: List(37) into SimpleType: List(38) at 0", "Insert SimpleName: AbstractCompiler(54) into SimpleType: AbstractCompiler(55) at 0", "Insert SimpleName: String(58) into SimpleType: String(59) at 0", "Insert SimpleName: compiler(66) into ConstructorInvocation(72) at 0", "Insert SimpleName: passName(67) into ConstructorInvocation(72) at 1", "Insert MethodInvocation(71) into ConstructorInvocation(72) at 2", "Insert SimpleType: List(85) into ParameterizedType: List<AbstractPeepholeOptimization>(88) at 0", "Insert SimpleType: AbstractPeepholeOptimization(87) into ParameterizedType: List<AbstractPeepholeOptimization>(88) at 1", "Insert SimpleName: Arrays(68) into MethodInvocation(71) at 0", "Insert SimpleName: asList(69) into MethodInvocation(71) at 1", "Insert SimpleName: optimizations(70) into MethodInvocation(71) at 2", "Insert SimpleName: List(84) into SimpleType: List(85) at 0", "Insert SimpleName: AbstractPeepholeOptimization(86) into SimpleType: AbstractPeepholeOptimization(87) at 0", "Delete Dimension(37)", "Delete ArrayType: AbstractPeepholeOptimization[](38)"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}