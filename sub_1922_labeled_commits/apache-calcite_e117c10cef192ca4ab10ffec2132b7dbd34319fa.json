{"application": "apache-calcite", "csha": "e117c10cef192ca4ab10ffec2132b7dbd34319fa", "files": [{"SqlMatchRecognize_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 12", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: OPERAND_ROWS_PER_MATCH to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 2", "INS NumberLiteral: 8 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: public to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 23", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 23", "INS SimpleType: SqlLiteral to FieldDeclaration at 1", "INS SimpleName: rowsPerMatch to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS SimpleName: getRowsPerMatch to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS ReturnStatement to Block at 0", "INS SimpleName: rowsPerMatch to ReturnStatement at 0", "INS Block to MethodDeclaration at 3", "INS SimpleType: SqlLiteral to MethodDeclaration at 1"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 40", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS StringLiteral: \"ONE ROW PER MATCH\" to EnumConstantDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS Modifier: private to FieldDeclaration at 0", "INS TextElement: Options for  to TagElement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: pos to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS SimpleName: sql to SingleVariableDeclaration at 1", "INS Modifier: public to EnumDeclaration at 1", "INS SimpleName: RowsPerMatchOption to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to EnumDeclaration at 6", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TextElement:  ROWS PER MATCH to TagElement: @code at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS TagElement: @code to TagElement at 1", "INS Block to MethodDeclaration at 2", "INS SimpleName: createSymbol to MethodInvocation at 1", "INS SimpleName: pos to MethodInvocation at 3", "INS SimpleName: ALL_ROWS to EnumConstantDeclaration at 0", "INS SimpleName: sql to VariableDeclarationFragment at 0", "INS SimpleName: SqlLiteral to MethodInvocation at 0", "INS SimpleName: ONE_ROW to EnumConstantDeclaration at 0", "INS SimpleName: SqlParserPos to SimpleType: SqlParserPos at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: sql to ReturnStatement at 0", "INS ThisExpression to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: SqlLiteral to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: sql to FieldAccess at 1", "INS Modifier: final to FieldDeclaration at 1", "INS FieldDeclaration to EnumDeclaration at 5", "INS SimpleName: symbol to MethodDeclaration at 2", "INS SimpleType: SqlParserPos to SingleVariableDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS TextElement: . to TagElement at 2", "INS EnumConstantDeclaration to EnumDeclaration at 4", "INS StringLiteral: \"ALL ROWS PER MATCH\" to EnumConstantDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: sql to Assignment: = at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS EnumDeclaration to TypeDeclaration: class at 40", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to EnumDeclaration at 7", "INS SimpleType: String to FieldDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: RowsPerMatchOption to EnumDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to EnumDeclaration at 8", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS Javadoc to EnumDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 12", "INS SimpleType: SqlLiteral to SingleVariableDeclaration at 0", "INS SimpleName: rowsPerMatch to SingleVariableDeclaration at 1", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS SimpleName: Preconditions to MethodInvocation at 0", "INS InfixExpression: || to MethodInvocation at 2", "INS NullLiteral to InfixExpression: == at 1", "INS QualifiedName: rowsPerMatch.value to InstanceofExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: RowsPerMatchOption to SimpleType: RowsPerMatchOption at 0", "INS SimpleType: RowsPerMatchOption to InstanceofExpression at 1", "INS SimpleName: rowsPerMatch to InfixExpression: == at 0", "INS ExpressionStatement to Block at 10", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleName: checkArgument to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: rowsPerMatch to FieldAccess at 1", "INS ExpressionStatement to Block at 11", "INS SimpleName: rowsPerMatch to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS ExpressionStatement to SwitchStatement at 27", "operations": ["INS CastExpression to Assignment: = at 1", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS SimpleName: rowsPerMatch to Assignment: = at 0", "INS ExpressionStatement to SwitchStatement at 27", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: SqlLiteral to CastExpression at 0", "INS SimpleName: operand to CastExpression at 1"]}, {"root": "INS ExpressionStatement to SwitchStatement at 28", "operations": ["INS ExpressionStatement to SwitchStatement at 28", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: rowsPerMatch.value to InstanceofExpression at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleName: rowsPerMatch to InfixExpression: == at 0", "INS InfixExpression: || to MethodInvocation at 2", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS SimpleType: RowsPerMatchOption to InstanceofExpression at 1", "INS SimpleName: RowsPerMatchOption to SimpleType: RowsPerMatchOption at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 29", "operations": ["INS BreakStatement to SwitchStatement at 29"]}, {"root": "INS SwitchCase to SwitchStatement at 30", "operations": ["INS SwitchCase to SwitchStatement at 30"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS SimpleName: writer to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 0 to MethodInvocation at 4", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 0 to MethodInvocation at 3", "INS SimpleName: newlineAndIndent to MethodInvocation at 1", "INS SimpleName: writer to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS QualifiedName: pattern.rowsPerMatch to InfixExpression: != at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: unparse to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS QualifiedName: pattern.rowsPerMatch to MethodInvocation at 0", "INS IfStatement to Block at 4", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS SimpleName: OPERAND_ROWS_PER_MATCH to SwitchCase at 0", "operations": ["INS SimpleName: OPERAND_ROWS_PER_MATCH to SwitchCase at 0"]}, {"root": "UPDATE from 8 to 9", "operations": ["UPD NumberLiteral: 8 from 8 to 9"]}, {"root": "INS CastExpression to ClassInstanceCreation at 10", "operations": ["INS SimpleType: SqlLiteral to CastExpression at 0", "INS ArrayAccess to CastExpression at 1", "INS SimpleName: operands to ArrayAccess at 0", "INS NumberLiteral: 8 to ArrayAccess at 1", "INS CastExpression to ClassInstanceCreation at 10", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0"]}]}}, {"SqlMatchRecognize_diff": {"operations": ["Insert FieldDeclaration(98) into TypeDeclaration: class(1291) at 12", "Insert FieldDeclaration(186) into TypeDeclaration: class(1291) at 23", "Insert MethodDeclaration(622) into TypeDeclaration: class(1291) at 39", "Insert EnumDeclaration(683) into TypeDeclaration: class(1291) at 40", "Insert Modifier: public(91) into FieldDeclaration(98) at 0", "Insert Modifier: static(92) into FieldDeclaration(98) at 1", "Insert Modifier: final(93) into FieldDeclaration(98) at 2", "Insert PrimitiveType: int(94) into FieldDeclaration(98) at 3", "Insert VariableDeclarationFragment(97) into FieldDeclaration(98) at 4", "Insert Modifier: private(181) into FieldDeclaration(186) at 0", "Insert SimpleType: SqlLiteral(183) into FieldDeclaration(186) at 1", "Insert VariableDeclarationFragment(185) into FieldDeclaration(186) at 2", "Insert SingleVariableDeclaration(231) into MethodDeclaration(322) at 12", "Insert Modifier: public(615) into MethodDeclaration(622) at 0", "Insert SimpleType: SqlLiteral(617) into MethodDeclaration(622) at 1", "Insert Block(621) into MethodDeclaration(622) at 3", "Insert Javadoc(628) into EnumDeclaration(683) at 0", "Insert Modifier: public(629) into EnumDeclaration(683) at 1", "Insert EnumConstantDeclaration(633) into EnumDeclaration(683) at 3", "Insert EnumConstantDeclaration(636) into EnumDeclaration(683) at 4", "Insert FieldDeclaration(643) into EnumDeclaration(683) at 5", "Insert MethodDeclaration(656) into EnumDeclaration(683) at 6", "Insert MethodDeclaration(666) into EnumDeclaration(683) at 7", "Insert MethodDeclaration(682) into EnumDeclaration(683) at 8", "Insert SimpleName: OPERAND_ROWS_PER_MATCH(95) into VariableDeclarationFragment(97) at 0", "Insert NumberLiteral: 8(96) into VariableDeclarationFragment(97) at 1", "Insert SimpleName: SqlLiteral(182) into SimpleType: SqlLiteral(183) at 0", "Insert SimpleType: SqlLiteral(229) into SingleVariableDeclaration(231) at 0", "Insert ExpressionStatement(314) into Block(321) at 10", "Insert ExpressionStatement(320) into Block(321) at 11", "Insert SimpleName: SqlLiteral(616) into SimpleType: SqlLiteral(617) at 0", "Insert ReturnStatement(620) into Block(621) at 0", "Insert TagElement(627) into Javadoc(628) at 0", "Insert SimpleName: ONE_ROW(631) into EnumConstantDeclaration(633) at 0", "Insert StringLiteral: \"ONE ROW PER MATCH\"(632) into EnumConstantDeclaration(633) at 1", "Insert SimpleName: ALL_ROWS(634) into EnumConstantDeclaration(636) at 0", "Insert StringLiteral: \"ALL ROWS PER MATCH\"(635) into EnumConstantDeclaration(636) at 1", "Insert Modifier: private(637) into FieldDeclaration(643) at 0", "Insert Modifier: final(638) into FieldDeclaration(643) at 1", "Insert SimpleType: String(640) into FieldDeclaration(643) at 2", "Insert VariableDeclarationFragment(642) into FieldDeclaration(643) at 3", "Insert SingleVariableDeclaration(648) into MethodDeclaration(656) at 1", "Insert Block(655) into MethodDeclaration(656) at 2", "Insert MarkerAnnotation(658) into MethodDeclaration(666) at 0", "Insert Modifier: public(659) into MethodDeclaration(666) at 1", "Insert SimpleType: String(661) into MethodDeclaration(666) at 2", "Insert SimpleName: toString(662) into MethodDeclaration(666) at 3", "Insert Block(665) into MethodDeclaration(666) at 4", "Insert Modifier: public(667) into MethodDeclaration(682) at 0", "Insert SimpleType: SqlLiteral(669) into MethodDeclaration(682) at 1", "Insert SimpleName: symbol(670) into MethodDeclaration(682) at 2", "Insert SingleVariableDeclaration(674) into MethodDeclaration(682) at 3", "Insert Block(681) into MethodDeclaration(682) at 4", "Insert SimpleName: SqlLiteral(228) into SimpleType: SqlLiteral(229) at 0", "Insert MethodInvocation(313) into ExpressionStatement(314) at 0", "Insert Assignment: =(319) into ExpressionStatement(320) at 0", "Insert ExpressionStatement(522) into SwitchStatement(542) at 27", "Insert ExpressionStatement(534) into SwitchStatement(542) at 28", "Insert BreakStatement(535) into SwitchStatement(542) at 29", "Insert SwitchCase(536) into SwitchStatement(542) at 30", "Insert TextElement: Options for (623) into TagElement(627) at 0", "Insert TagElement: @code(625) into TagElement(627) at 1", "Insert TextElement: .(626) into TagElement(627) at 2", "Insert SimpleName: String(639) into SimpleType: String(640) at 0", "Insert SimpleName: sql(641) into VariableDeclarationFragment(642) at 0", "Insert SimpleType: String(646) into SingleVariableDeclaration(648) at 0", "Insert SimpleName: sql(647) into SingleVariableDeclaration(648) at 1", "Insert ExpressionStatement(654) into Block(655) at 0", "Insert SimpleName: Override(657) into MarkerAnnotation(658) at 0", "Insert SimpleName: String(660) into SimpleType: String(661) at 0", "Insert ReturnStatement(664) into Block(665) at 0", "Insert SimpleName: SqlLiteral(668) into SimpleType: SqlLiteral(669) at 0", "Insert SimpleType: SqlParserPos(672) into SingleVariableDeclaration(674) at 0", "Insert SimpleName: pos(673) into SingleVariableDeclaration(674) at 1", "Insert ReturnStatement(680) into Block(681) at 0", "Insert IfStatement(1089) into Block(1288) at 4", "Insert SimpleName: Preconditions(303) into MethodInvocation(313) at 0", "Insert SimpleName: checkArgument(304) into MethodInvocation(313) at 1", "Insert InfixExpression: ||(312) into MethodInvocation(313) at 2", "Insert FieldAccess(317) into Assignment: =(319) at 0", "Insert SimpleName: OPERAND_ROWS_PER_MATCH(514) into SwitchCase(515) at 0", "Insert Assignment: =(521) into ExpressionStatement(522) at 0", "Insert MethodInvocation(533) into ExpressionStatement(534) at 0", "Insert TextElement:  ROWS PER MATCH(624) into TagElement: @code(625) at 0", "Insert SimpleName: String(645) into SimpleType: String(646) at 0", "Insert Assignment: =(653) into ExpressionStatement(654) at 0", "Insert SimpleName: sql(663) into ReturnStatement(664) at 0", "Insert SimpleName: SqlParserPos(671) into SimpleType: SqlParserPos(672) at 0", "Insert MethodInvocation(679) into ReturnStatement(680) at 0", "Insert InfixExpression: !=(1076) into IfStatement(1089) at 0", "Insert Block(1088) into IfStatement(1089) at 1", "Insert InfixExpression: ==(307) into InfixExpression: ||(312) at 0", "Insert InstanceofExpression(311) into InfixExpression: ||(312) at 1", "Insert ThisExpression(315) into FieldAccess(317) at 0", "Insert CastExpression(520) into Assignment: =(521) at 1", "Insert SimpleName: Preconditions(523) into MethodInvocation(533) at 0", "Insert SimpleName: checkArgument(524) into MethodInvocation(533) at 1", "Insert InfixExpression: ||(532) into MethodInvocation(533) at 2", "Insert FieldAccess(651) into Assignment: =(653) at 0", "Insert SimpleName: sql(652) into Assignment: =(653) at 1", "Insert SimpleName: SqlLiteral(675) into MethodInvocation(679) at 0", "Insert SimpleName: createSymbol(676) into MethodInvocation(679) at 1", "Insert ThisExpression(677) into MethodInvocation(679) at 2", "Insert SimpleName: pos(678) into MethodInvocation(679) at 3", "Update NumberLiteral: 8(686) to 9", "Insert CastExpression(863) into ClassInstanceCreation(864) at 10", "Insert NullLiteral(1075) into InfixExpression: !=(1076) at 1", "Insert ExpressionStatement(1080) into Block(1088) at 0", "Insert ExpressionStatement(1087) into Block(1088) at 1", "Insert NullLiteral(306) into InfixExpression: ==(307) at 1", "Insert SimpleType: SqlLiteral(518) into CastExpression(520) at 0", "Insert SimpleName: operand(519) into CastExpression(520) at 1", "Insert InfixExpression: ==(527) into InfixExpression: ||(532) at 0", "Insert InstanceofExpression(531) into InfixExpression: ||(532) at 1", "Insert ThisExpression(649) into FieldAccess(651) at 0", "Insert SimpleName: sql(650) into FieldAccess(651) at 1", "Insert SimpleType: SqlLiteral(859) into CastExpression(863) at 0", "Insert ArrayAccess(862) into CastExpression(863) at 1", "Insert MethodInvocation(1079) into ExpressionStatement(1080) at 0", "Insert MethodInvocation(1086) into ExpressionStatement(1087) at 0", "Insert SimpleName: SqlLiteral(517) into SimpleType: SqlLiteral(518) at 0", "Insert NullLiteral(526) into InfixExpression: ==(527) at 1", "Insert SimpleName: SqlLiteral(858) into SimpleType: SqlLiteral(859) at 0", "Insert SimpleName: operands(860) into ArrayAccess(862) at 0", "Insert NumberLiteral: 8(861) into ArrayAccess(862) at 1", "Insert SimpleName: writer(1077) into MethodInvocation(1079) at 0", "Insert SimpleName: newlineAndIndent(1078) into MethodInvocation(1079) at 1", "Insert SimpleName: unparse(1082) into MethodInvocation(1086) at 1", "Insert SimpleName: writer(1083) into MethodInvocation(1086) at 2", "Insert NumberLiteral: 0(1084) into MethodInvocation(1086) at 3", "Insert NumberLiteral: 0(1085) into MethodInvocation(1086) at 4"]}}, {"SqlToRelConverter_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 24", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: rowsPerMatch to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: SqlLiteral to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 24", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS SimpleName: matchRecognize to MethodInvocation at 0", "INS SimpleName: getRowsPerMatch to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 25", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: allRows to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: rowsPerMatch to InfixExpression: != at 0", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS QualifiedName: SqlMatchRecognize.RowsPerMatchOption.ALL_ROWS to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS VariableDeclarationStatement to Block at 25", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: rowsPerMatch to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to InfixExpression: == at 0"]}, {"root": "UPDATE from becomes to <p>becomes", "operations": ["UPD TextElement: becomes from becomes to <p>becomes"]}, {"root": "UPDATE from are converted to to <p>are converted to", "operations": ["UPD TextElement: are converted to from are converted to to <p>are converted to"]}, {"root": "UPDATE from Common sub-expression elmination will ensure that only one histogram is to <p>Common sub-expression elimination will ensure that only one histogram is", "operations": ["UPD TextElement: Common sub-expression elmination will ensure that only one histogram is from Common sub-expression elmination will ensure that only one histogram is to <p>Common sub-expression elimination will ensure that only one histogram is"]}, {"root": "INS SimpleName: allRows to MethodInvocation at 10", "operations": ["INS SimpleName: allRows to MethodInvocation at 10"]}]}}, {"SqlToRelConverter_diff": {"operations": ["Insert VariableDeclarationStatement(7719) into Block(7783) at 24", "Insert VariableDeclarationStatement(7733) into Block(7783) at 25", "Insert Modifier: final(7711) into VariableDeclarationStatement(7719) at 0", "Insert SimpleType: SqlLiteral(7713) into VariableDeclarationStatement(7719) at 1", "Insert VariableDeclarationFragment(7718) into VariableDeclarationStatement(7719) at 2", "Insert Modifier: final(7720) into VariableDeclarationStatement(7733) at 0", "Insert PrimitiveType: boolean(7721) into VariableDeclarationStatement(7733) at 1", "Insert VariableDeclarationFragment(7732) into VariableDeclarationStatement(7733) at 2", "Update TextElement: becomes(18328) to <p>becomes", "Update TextElement: are converted to(18334) to <p>are converted to", "Update TextElement: Common sub-expression elmination will ensure that only one histogram is(18337) to <p>Common sub-expression elimination will ensure that only one histogram is", "Insert SimpleName: SqlLiteral(7712) into SimpleType: SqlLiteral(7713) at 0", "Insert MethodInvocation(7717) into VariableDeclarationFragment(7718) at 1", "Insert SimpleName: allRows(7722) into VariableDeclarationFragment(7732) at 0", "Insert InfixExpression: &&(7731) into VariableDeclarationFragment(7732) at 1", "Insert SimpleName: matchRecognize(7715) into MethodInvocation(7717) at 0", "Insert InfixExpression: !=(7725) into InfixExpression: &&(7731) at 0", "Insert InfixExpression: ==(7730) into InfixExpression: &&(7731) at 1", "Insert SimpleName: allRows(7772) into MethodInvocation(7774) at 10", "Insert NullLiteral(7724) into InfixExpression: !=(7725) at 1", "Insert MethodInvocation(7728) into InfixExpression: ==(7730) at 0", "Insert SimpleName: getValue(7727) into MethodInvocation(7728) at 1"]}}, {"Match_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: protected to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: allRows to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 23", "INS SimpleName: isAllRows to MethodDeclaration at 2", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: allRows to ReturnStatement at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 13", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 13"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 12"]}, {"root": "INS TagElement: @param to Javadoc at 11", "operations": ["INS TextElement:  Whether all rows per match (false means one row per match) to TagElement: @param at 1", "INS SimpleName: allRows to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 11"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 10", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: allRows to Assignment: = at 1", "INS SimpleName: allRows to FieldAccess at 1"]}, {"root": "INS SimpleName: allRows to MethodInvocation at 9", "operations": ["INS SimpleName: allRows to MethodInvocation at 9"]}]}}, {"Match_diff": {"operations": ["Insert FieldDeclaration(112) into TypeDeclaration: class(1283) at 10", "Insert MethodDeclaration(576) into TypeDeclaration: class(1283) at 23", "Insert Modifier: protected(107) into FieldDeclaration(112) at 0", "Insert Modifier: final(108) into FieldDeclaration(112) at 1", "Insert PrimitiveType: boolean(109) into FieldDeclaration(112) at 2", "Insert VariableDeclarationFragment(111) into FieldDeclaration(112) at 3", "Insert SingleVariableDeclaration(272) into MethodDeclaration(434) at 13", "Insert Modifier: public(570) into MethodDeclaration(576) at 0", "Insert PrimitiveType: boolean(571) into MethodDeclaration(576) at 1", "Insert SimpleName: isAllRows(572) into MethodDeclaration(576) at 2", "Insert Block(575) into MethodDeclaration(576) at 3", "Insert SingleVariableDeclaration(662) into MethodDeclaration(667) at 12", "Insert SimpleName: allRows(110) into VariableDeclarationFragment(111) at 0", "Insert TagElement: @param(206) into Javadoc(210) at 11", "Insert PrimitiveType: boolean(270) into SingleVariableDeclaration(272) at 0", "Insert SimpleName: allRows(271) into SingleVariableDeclaration(272) at 1", "Insert ExpressionStatement(360) into Block(433) at 10", "Insert ReturnStatement(574) into Block(575) at 0", "Insert PrimitiveType: boolean(660) into SingleVariableDeclaration(662) at 0", "Insert SimpleName: allRows(661) into SingleVariableDeclaration(662) at 1", "Insert SimpleName: allRows(204) into TagElement: @param(206) at 0", "Insert TextElement:  Whether all rows per match (false means one row per match)(205) into TagElement: @param(206) at 1", "Insert Assignment: =(359) into ExpressionStatement(360) at 0", "Insert SimpleName: allRows(573) into ReturnStatement(574) at 0", "Insert FieldAccess(357) into Assignment: =(359) at 0", "Insert SimpleName: allRows(358) into Assignment: =(359) at 1", "Insert SimpleName: allRows(711) into MethodInvocation(713) at 9", "Insert ThisExpression(355) into FieldAccess(357) at 0", "Insert SimpleName: allRows(356) into FieldAccess(357) at 1"]}}, {"RelFactories_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 11", "operations": ["INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 11", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 11", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 11", "INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: allRows to MethodInvocation at 10", "operations": ["INS SimpleName: allRows to MethodInvocation at 10"]}]}}, {"RelFactories_diff": {"operations": ["Insert SingleVariableDeclaration(1324) into MethodDeclaration(1329) at 11", "Insert SingleVariableDeclaration(1399) into MethodDeclaration(1419) at 11", "Insert PrimitiveType: boolean(1322) into SingleVariableDeclaration(1324) at 0", "Insert SimpleName: allRows(1323) into SingleVariableDeclaration(1324) at 1", "Insert PrimitiveType: boolean(1397) into SingleVariableDeclaration(1399) at 0", "Insert SimpleName: allRows(1398) into SingleVariableDeclaration(1399) at 1", "Insert SimpleName: allRows(1414) into MethodInvocation(1416) at 10"]}}, {"LogicalMatch_cluster": {"actions": [{"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 13", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 13", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: allRows to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 13", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 13", "INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 12", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 12"]}, {"root": "INS TagElement: @param to Javadoc at 11", "operations": ["INS TextElement:  Whether all rows per match (false means one row per match) to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 11", "INS SimpleName: allRows to TagElement: @param at 0"]}, {"root": "INS SimpleName: allRows to SuperConstructorInvocation at 10", "operations": ["INS SimpleName: allRows to SuperConstructorInvocation at 10"]}, {"root": "INS SimpleName: allRows to ClassInstanceCreation at 11", "operations": ["INS SimpleName: allRows to ClassInstanceCreation at 11"]}, {"root": "INS SimpleName: allRows to ClassInstanceCreation at 11", "operations": ["INS SimpleName: allRows to ClassInstanceCreation at 11"]}]}}, {"LogicalMatch_diff": {"operations": ["Update Modifier: public(68) to private", "Insert SingleVariableDeclaration(132) into MethodDeclaration(151) at 13", "Insert SingleVariableDeclaration(210) into MethodDeclaration(251) at 13", "Insert SingleVariableDeclaration(309) into MethodDeclaration(343) at 12", "Insert TagElement: @param(66) into Javadoc(70) at 11", "Insert PrimitiveType: boolean(130) into SingleVariableDeclaration(132) at 0", "Insert SimpleName: allRows(131) into SingleVariableDeclaration(132) at 1", "Insert PrimitiveType: boolean(208) into SingleVariableDeclaration(210) at 0", "Insert SimpleName: allRows(209) into SingleVariableDeclaration(210) at 1", "Insert PrimitiveType: boolean(307) into SingleVariableDeclaration(309) at 0", "Insert SimpleName: allRows(308) into SingleVariableDeclaration(309) at 1", "Insert SimpleName: allRows(64) into TagElement: @param(66) at 0", "Insert TextElement:  Whether all rows per match (false means one row per match)(65) into TagElement: @param(66) at 1", "Insert SimpleName: allRows(147) into SuperConstructorInvocation(149) at 10", "Insert SimpleName: allRows(246) into ClassInstanceCreation(248) at 11", "Insert SimpleName: allRows(338) into ClassInstanceCreation(340) at 11"]}}, {"RelToSqlConverter_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS SimpleName: POS to MethodInvocation at 2", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: POS to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 4", "INS QualifiedName: SqlMatchRecognize.RowsPerMatchOption.ONE_ROW to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: symbol to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: isAllRows to MethodInvocation at 1", "INS QualifiedName: SqlMatchRecognize.RowsPerMatchOption.ALL_ROWS to MethodInvocation at 0", "INS SimpleType: SqlLiteral to VariableDeclarationStatement at 1", "INS SimpleName: rowsPerMatch to VariableDeclarationFragment at 0", "INS SimpleName: symbol to MethodInvocation at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: rowsPerMatch to ClassInstanceCreation at 10", "operations": ["INS SimpleName: rowsPerMatch to ClassInstanceCreation at 10"]}]}}, {"RelToSqlConverter_diff": {"operations": ["Insert VariableDeclarationStatement(1702) into Block(2052) at 4", "Insert Modifier: final(1685) into VariableDeclarationStatement(1702) at 0", "Insert SimpleType: SqlLiteral(1687) into VariableDeclarationStatement(1702) at 1", "Insert VariableDeclarationFragment(1701) into VariableDeclarationStatement(1702) at 2", "Insert SimpleName: SqlLiteral(1686) into SimpleType: SqlLiteral(1687) at 0", "Insert ConditionalExpression(1700) into VariableDeclarationFragment(1701) at 1", "Insert MethodInvocation(1691) into ConditionalExpression(1700) at 0", "Insert MethodInvocation(1695) into ConditionalExpression(1700) at 1", "Insert MethodInvocation(1699) into ConditionalExpression(1700) at 2", "Insert SimpleName: e(1689) into MethodInvocation(1691) at 0", "Insert SimpleName: isAllRows(1690) into MethodInvocation(1691) at 1", "Insert SimpleName: symbol(1693) into MethodInvocation(1695) at 1", "Insert SimpleName: POS(1694) into MethodInvocation(1695) at 2", "Insert SimpleName: symbol(1697) into MethodInvocation(1699) at 1", "Insert SimpleName: POS(1698) into MethodInvocation(1699) at 2"]}}, {"SqlValidatorImpl_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: allRows to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: allRows to SingleVariableDeclaration at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS SimpleName: matchRecognize to MethodInvocation at 0", "INS SimpleName: getRowsPerMatch to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: rowsPerMatch to VariableDeclarationFragment at 0", "INS SimpleType: SqlLiteral to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS QualifiedName: SqlMatchRecognize.RowsPerMatchOption.ALL_ROWS to InfixExpression: == at 1", "INS SimpleName: getValue to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: allRows to VariableDeclarationFragment at 0", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: rowsPerMatch to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 5", "INS InfixExpression: == to InfixExpression: && at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1", "INS SimpleName: rowsPerMatch to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: SqlNode to VariableDeclarationStatement at 1", "INS SimpleName: SqlNode to SimpleType: SqlNode at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: op0 to VariableDeclarationFragment at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS ConditionalExpression to VariableDeclarationFragment at 1", "INS QualifiedName: SqlStdOperatorTable.FINAL to ConditionalExpression at 2", "INS QualifiedName: SqlStdOperatorTable.RUNNING to ConditionalExpression at 1", "INS SimpleName: allRows to ConditionalExpression at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS InfixExpression: && to InfixExpression: || at 1", "operations": ["INS SimpleName: allRows to PrefixExpression: ! at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS InfixExpression: && to InfixExpression: || at 1"]}, {"root": "INS SimpleName: allRows to MethodInvocation at 3", "operations": ["INS SimpleName: allRows to MethodInvocation at 3"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 1"]}, {"root": "INS SimpleName: allRows to MethodInvocation at 2", "operations": ["INS SimpleName: allRows to MethodInvocation at 2"]}, {"root": "UPDATE from ops to op0", "operations": ["UPD SimpleName: ops from ops to op0", "UPD SimpleName: ops from ops to op0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ops to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ops to MethodInvocation at 0"]}, {"root": "INS SimpleName: op0 to MethodInvocation at 3", "operations": ["INS SimpleName: op0 to MethodInvocation at 3"]}, {"root": "DEL QualifiedName: SqlStdOperatorTable.FINAL", "operations": ["DEL QualifiedName: SqlStdOperatorTable.FINAL"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: get"]}, {"root": "DEL MethodInvocation", "operations": ["DEL NumberLiteral: 0", "DEL SimpleName: get", "DEL MethodInvocation"]}]}}, {"SqlValidatorImpl_diff": {"operations": ["Insert SingleVariableDeclaration(16199) into MethodDeclaration(16386) at 5", "Insert SingleVariableDeclaration(16397) into MethodDeclaration(16497) at 4", "Insert VariableDeclarationStatement(15893) into Block(16175) at 4", "Insert VariableDeclarationStatement(15907) into Block(16175) at 5", "Insert PrimitiveType: boolean(16197) into SingleVariableDeclaration(16199) at 0", "Insert SimpleName: allRows(16198) into SingleVariableDeclaration(16199) at 1", "Insert PrimitiveType: boolean(16395) into SingleVariableDeclaration(16397) at 0", "Insert SimpleName: allRows(16396) into SingleVariableDeclaration(16397) at 1", "Insert VariableDeclarationStatement(16454) into Block(16496) at 4", "Insert Modifier: final(15885) into VariableDeclarationStatement(15893) at 0", "Insert SimpleType: SqlLiteral(15887) into VariableDeclarationStatement(15893) at 1", "Insert VariableDeclarationFragment(15892) into VariableDeclarationStatement(15893) at 2", "Insert Modifier: final(15894) into VariableDeclarationStatement(15907) at 0", "Insert PrimitiveType: boolean(15895) into VariableDeclarationStatement(15907) at 1", "Insert VariableDeclarationFragment(15906) into VariableDeclarationStatement(15907) at 2", "Insert Modifier: final(16398) into VariableDeclarationStatement(16413) at 0", "Insert Modifier: final(16419) into VariableDeclarationStatement(16434) at 0", "Insert Modifier: final(16435) into VariableDeclarationStatement(16444) at 0", "Insert Modifier: final(16445) into VariableDeclarationStatement(16454) at 0", "Insert SimpleType: SqlNode(16447) into VariableDeclarationStatement(16454) at 1", "Insert VariableDeclarationFragment(16453) into VariableDeclarationStatement(16454) at 2", "Insert SimpleName: SqlLiteral(15886) into SimpleType: SqlLiteral(15887) at 0", "Insert MethodInvocation(15891) into VariableDeclarationFragment(15892) at 1", "Insert SimpleName: allRows(15896) into VariableDeclarationFragment(15906) at 0", "Insert InfixExpression: &&(15905) into VariableDeclarationFragment(15906) at 1", "Insert ConditionalExpression(16442) into VariableDeclarationFragment(16443) at 1", "Insert SimpleName: SqlNode(16446) into SimpleType: SqlNode(16447) at 0", "Insert SimpleName: op0(16448) into VariableDeclarationFragment(16453) at 0", "Move MethodInvocation(16435) into VariableDeclarationFragment(16453) at 1", "Insert InfixExpression: &&(16468) into InfixExpression: ||(16469) at 1", "Insert SimpleName: matchRecognize(15889) into MethodInvocation(15891) at 0", "Insert InfixExpression: !=(15899) into InfixExpression: &&(15905) at 0", "Insert InfixExpression: ==(15904) into InfixExpression: &&(15905) at 1", "Insert SimpleName: allRows(16135) into MethodInvocation(16136) at 3", "Insert SimpleName: allRows(16439) into ConditionalExpression(16442) at 0", "Insert QualifiedName: SqlStdOperatorTable.RUNNING(16440) into ConditionalExpression(16442) at 1", "Insert QualifiedName: SqlStdOperatorTable.FINAL(16441) into ConditionalExpression(16442) at 2", "Insert PrefixExpression: !(16462) into InfixExpression: &&(16468) at 0", "Move InfixExpression: ==(16424) into InfixExpression: &&(16468) at 1", "Insert NullLiteral(15898) into InfixExpression: !=(15899) at 1", "Insert MethodInvocation(15902) into InfixExpression: ==(15904) at 0", "Insert SimpleName: allRows(16461) into PrefixExpression: !(16462) at 0", "Insert SimpleName: getValue(15901) into MethodInvocation(15902) at 1", "Insert SimpleName: allRows(16292) into MethodInvocation(16293) at 2", "Update SimpleName: ops(16409) to op0", "Move SimpleName: ops(16409) into MethodInvocation(16458) at 0", "Update SimpleName: ops(16417) to op0", "Move SimpleName: ops(16417) into MethodInvocation(16465) at 0", "Insert SimpleName: op0(16476) into MethodInvocation(16477) at 3", "Delete QualifiedName: SqlStdOperatorTable.FINAL(16405)", "Delete SimpleName: get(16410)", "Delete NumberLiteral: 0(16411)", "Delete MethodInvocation(16412)", "Delete SimpleName: get(16418)", "Delete NumberLiteral: 0(16419)", "Delete MethodInvocation(16420)"]}}], "commit_stats": [{"total_files": 10, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}