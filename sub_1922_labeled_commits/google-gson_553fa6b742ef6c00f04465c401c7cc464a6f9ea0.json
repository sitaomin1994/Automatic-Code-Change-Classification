{"application": "google-gson", "csha": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0", "files": [{"JsonReader_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.gson.internal.JsonReaderInternalAccess"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.internal.bind.JsonTreeReader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.Closeable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.EOFException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Reader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.CLOSED", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.gson.stream.JsonScope.DANGLING_NAME"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.EMPTY_ARRAY", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.EMPTY_DOCUMENT", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.EMPTY_OBJECT", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.NONEMPTY_ARRAY", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.gson.stream.JsonScope.NONEMPTY_OBJECT", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ThisExpression", "DEL SimpleName: i", "DEL TextElement: while (reader.hasNext()) ", "DEL Javadoc", "DEL InfixExpression: !=", "DEL NumberLiteral: 1", "DEL SimpleName: StringBuilder", "DEL SimpleType: JsonToken", "DEL SimpleName: valuePos", "DEL SimpleName: stringPool", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleName: p", "DEL SimpleName: toFind", "DEL StringLiteral: \" at line \"", "DEL TextElement:  <script>", "DEL TextElement: String text = null;", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: lenient", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL TryStatement", "DEL SimpleName: pos", "DEL SimpleType: NumberFormatException", "DEL TextElement: reader.endArray();", "DEL MethodInvocation", "DEL SimpleName: bufferStartLine", "DEL SimpleName: valuePos", "DEL Javadoc", "DEL MemberRef", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL PostfixExpression: --", "DEL TagElement: @link", "DEL Block", "DEL SimpleName: i", "DEL Javadoc", "DEL SimpleName: name", "DEL SimpleName: l", "DEL SimpleName: token", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL CharacterLiteral: 'u'", "DEL FieldAccess", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL TagElement", "DEL SwitchCase", "DEL SimpleName: length", "DEL ContinueStatement", "DEL ReturnStatement", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement:  //", "DEL InfixExpression: ==", "DEL NumberLiteral: 4", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL Dimension", "DEL SimpleName: pos", "DEL Modifier: private", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: IllegalStateException", "DEL StringLiteral: \"false\"", "DEL SimpleName: lenient", "DEL TextElement: , this method throws.", "DEL TextElement: <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>", "DEL ReturnStatement", "DEL SimpleType: JsonTreeReader", "DEL TagElement", "DEL TagElement: @link", "DEL SimpleName: peek", "DEL CharacterLiteral: ','", "DEL SimpleName: chars", "DEL SimpleName: c", "DEL ThrowStatement", "DEL QualifiedName: JsonToken.STRING", "DEL InfixExpression: +", "DEL TagElement: @throws", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: IOException", "DEL SimpleName: IOException", "DEL TextElement: parse it as an int. If the next token's numeric value cannot be exactly", "DEL SimpleName: fillBuffer", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL NumberLiteral: 1.0d", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: syntaxError", "DEL SimpleName: String", "DEL Block", "DEL BreakStatement", "DEL PostfixExpression: ++", "DEL NumberLiteral: 2", "DEL SimpleName: valuePos", "DEL MethodInvocation", "DEL SimpleName: pos", "DEL InfixExpression: ||", "DEL ClassInstanceCreation", "DEL QualifiedName: JsonToken.END_ARRAY", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL Assignment: +=", "DEL SimpleName: reader", "DEL TextElement: , unescaping any", "DEL InfixExpression: ==", "DEL SimpleName: nextLong", "DEL QualifiedName: JsonToken.NAME", "DEL SimpleName: token", "DEL ArrayAccess", "DEL SimpleName: asDouble", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TextElement: <li>Name/value pairs separated by ", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: buffer", "DEL QualifiedName: NON_EXECUTE_PREFIX.length", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL SimpleName: IllegalStateException", "DEL StringLiteral: \" column \"", "DEL SimpleName: stackSize", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL QualifiedName: JsonToken.STRING", "DEL ExpressionStatement", "DEL Block", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL TextElement:  if the next token is not a literal value.", "DEL TextElement: }", "DEL Block", "DEL ArrayAccess", "DEL SimpleName: stackSize", "DEL PrimitiveType: int", "DEL InfixExpression: <=", "DEL SimpleName: buffer", "DEL BreakStatement", "DEL Block", "DEL TextElement: 9007199254740993", "DEL SimpleName: builder", "DEL SimpleName: escaped", "DEL SimpleName: String", "DEL PrimitiveType: void", "DEL StringLiteral: \"Expected an int but was \"", "DEL SimpleName: JsonReader", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SwitchCase", "DEL StringLiteral: \" at line \"", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL BreakStatement", "DEL MethodDeclaration", "DEL TextElement: as a double, or is non-finite.", "DEL PostfixExpression: ++", "DEL QualifiedName: JsonToken.NAME", "DEL Block", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleName: buffer", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: getLineNumber", "DEL SimpleName: limit", "DEL MethodInvocation", "DEL TextElement:  NaNs", "DEL SimpleName: c", "DEL SwitchCase", "DEL SimpleName: value", "DEL SimpleName: l", "DEL Block", "DEL TextElement: }", "DEL SimpleName: c", "DEL TextElement:  based on the value of ", "DEL SimpleName: limit", "DEL Assignment: =", "DEL SimpleName: count", "DEL CharacterLiteral: '='", "DEL IfStatement", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL CharacterLiteral: 'U'", "DEL SimpleName: c", "DEL SimpleName: objectValue", "DEL SimpleName: i", "DEL SimpleName: getColumnNumber", "DEL SimpleName: pos", "DEL CharacterLiteral: '\\t'", "DEL MethodInvocation", "DEL TextElement:  to consume the object's opening brace. Then create a", "DEL TextElement: Assigns ", "DEL QualifiedName: JsonToken.BEGIN_OBJECT", "DEL FieldDeclaration", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL TextElement: .", "DEL SimpleName: limit", "DEL TextElement: read the object's closing brace by calling ", "DEL ForStatement", "DEL TextElement: need a method for each object type and for each array type.", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL TextElement:  'single quoted'", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL StringLiteral: \"Expected JSON document to start with '[' or '{' but was \"", "DEL TagElement: @throws", "DEL Assignment: =", "DEL SwitchCase", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleType: String", "DEL IfStatement", "DEL SimpleType: MalformedJsonException", "DEL SimpleName: p", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SwitchCase", "DEL ArrayAccess", "DEL SimpleName: limit", "DEL NumberLiteral: 0", "DEL TextElement: .", "DEL SimpleName: buffer", "DEL SimpleName: token", "DEL WhileStatement", "DEL SimpleName: getLineNumber", "DEL SimpleName: i", "DEL ArrayAccess", "DEL MethodInvocation", "DEL Assignment: =", "DEL PrefixExpression: ++", "DEL VariableDeclarationFragment", "DEL SimpleName: buffer", "DEL InfixExpression: -", "DEL TextElement: \"followers_count\": 2", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL SimpleName: result", "DEL SimpleName: nextDouble", "DEL FieldDeclaration", "DEL SimpleName: append", "DEL SimpleName: nextValue", "DEL SimpleName: fillBuffer", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL TextElement:  Jesse Wilson", "DEL NumberLiteral: 2", "DEL StringLiteral: \" at line \"", "DEL MethodInvocation", "DEL SimpleName: setLenient", "DEL VariableDeclarationFragment", "DEL TextElement:  long", "DEL InfixExpression: ==", "DEL InfixExpression: <=", "DEL NumberLiteral: 1", "DEL SimpleName: reader", "DEL InfixExpression: ==", "DEL CharacterLiteral: 'N'", "DEL SimpleType: JsonReaderInternalAccess", "DEL SimpleName: valuePos", "DEL StringLiteral: \" at line \"", "DEL CharacterLiteral: 'L'", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL TextElement: <p>When a nested object or array is encountered, delegate to the", "DEL SimpleName: IllegalStateException", "DEL InfixExpression: ||", "DEL BooleanLiteral: false", "DEL SimpleName: c", "DEL IfStatement", "DEL SimpleName: advance", "DEL InfixExpression: ==", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL QualifiedName: JsonToken.NUMBER", "DEL SimpleName: name", "DEL BooleanLiteral: true", "DEL CharacterLiteral: '\\ufeff'", "DEL SimpleName: result", "DEL SimpleName: TRUE", "DEL TextElement: Returns the string up to but not including ", "DEL SimpleName: end", "DEL ParenthesizedExpression", "DEL SimpleName: count", "DEL Assignment: =", "DEL TextElement: request forgery</a> attacks. In such an attack, a malicious site gains access", "DEL SimpleName: result", "DEL TagElement: @author", "DEL TagElement: @link", "DEL SimpleName: value", "DEL CharacterLiteral: 'E'", "DEL Block", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL StringLiteral: \"Expected EOF\"", "DEL IfStatement", "DEL CharacterLiteral: 'a'", "DEL SimpleName: c", "DEL StringLiteral: \" column \"", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL SimpleType: StringPool", "DEL SimpleType: IOException", "DEL ReturnStatement", "DEL Block", "DEL SwitchStatement", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL SimpleName: p", "DEL TextElement: }", "DEL SimpleName: p", "DEL StringLiteral: \" column \"", "DEL CharacterLiteral: '>'", "DEL NullLiteral", "DEL BooleanLiteral: true", "DEL Block", "DEL TextElement: }", "DEL SimpleName: stack", "DEL SimpleName: builder", "DEL IfStatement", "DEL SimpleName: buffer", "DEL TextElement: \"geo\": [50.454722, -104.606667],", "DEL MethodInvocation", "DEL CharacterLiteral: '0'", "DEL ExpressionStatement", "DEL SimpleName: checkLenient", "DEL NumberLiteral: 1", "DEL SimpleName: readLiteral", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: c", "DEL BreakStatement", "DEL SimpleName: pos", "DEL SingleMemberAnnotation", "DEL SimpleName: value", "DEL ClassInstanceCreation", "DEL SwitchCase", "DEL PrimitiveType: boolean", "DEL SimpleName: c", "DEL PostfixExpression: ++", "DEL SimpleName: token", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: getColumnNumber", "DEL Block", "DEL SimpleName: IOException", "DEL TextElement:  or ", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ParenthesizedExpression", "DEL Block", "DEL PostfixExpression: --", "DEL SimpleName: in", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: pos", "DEL ExpressionStatement", "DEL SimpleName: lenient", "DEL ExpressionStatement", "DEL Dimension", "DEL SimpleName: stack", "DEL TextElement: <li>Strings that are unquoted or ", "DEL TextElement:  infinities", "DEL StringLiteral: \"skipped!\"", "DEL ArrayAccess", "DEL IfStatement", "DEL Dimension", "DEL IfStatement", "DEL Block", "DEL TextElement: .", "DEL TextElement: List<Double> geo = null;", "DEL MethodInvocation", "DEL InfixExpression: <=", "DEL SimpleName: getLineNumber", "DEL TextElement: by ", "DEL MethodInvocation", "DEL SimpleName: buffer", "DEL SimpleType: Reader", "DEL VariableDeclarationFragment", "DEL TextElement: Skips the next value recursively. If it is an object or array, all nested", "DEL Modifier: private", "DEL SimpleName: buffer", "DEL ArrayAccess", "DEL SimpleName: valuePos", "DEL Initializer", "DEL SimpleName: value", "DEL ReturnStatement", "DEL PrefixExpression: ++", "DEL InfixExpression: ==", "DEL IfStatement", "DEL CharacterLiteral: 'l'", "DEL IfStatement", "DEL SimpleName: buffer", "DEL SimpleName: count", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: assignOffsetsOnly", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL SimpleName: i", "DEL Modifier: public", "DEL SimpleName: valueLength", "DEL SimpleName: stack", "DEL PrimitiveType: char", "DEL SimpleName: NUMBER", "DEL Assignment: =", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL PrimitiveType: char", "DEL ReturnStatement", "DEL Modifier: private", "DEL Block", "DEL TagElement", "DEL PrimitiveType: char", "DEL PostfixExpression: ++", "DEL SimpleName: length", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL SimpleName: c", "DEL Assignment: =", "DEL PrefixExpression: ++", "DEL SimpleName: buffer", "DEL TextElement: Consumes the non-execute prefix if it exists.", "DEL SimpleName: NumberFormatException", "DEL InfixExpression: +", "DEL Modifier: public", "DEL TextElement:  if the next literal value cannot be parsed", "DEL SwitchCase", "DEL InfixExpression: ==", "DEL SimpleName: c", "DEL TagElement: @link", "DEL Modifier: private", "DEL CharacterLiteral: '\\\\'", "DEL QualifiedName: JsonToken.STRING", "DEL TagElement: @code", "DEL SimpleName: pos", "DEL InfixExpression: ==", "DEL Assignment: +=", "DEL IfStatement", "DEL SimpleName: buffer", "DEL TextElement: } else if (name.equals(\"followers_count\")) ", "DEL QualifiedName: JsonToken.STRING", "DEL StringLiteral: \"\\\\u\"", "DEL SimpleName: hasNext", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: value", "DEL ArrayType: char[]", "DEL SimpleName: pos", "DEL Assignment: =", "DEL Block", "DEL SimpleName: builder", "DEL StringLiteral: \"Unterminated string\"", "DEL SimpleName: c", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL SimpleName: token", "DEL SimpleName: readEscapeCharacter", "DEL SimpleName: i", "DEL Block", "DEL MethodDeclaration", "DEL InfixExpression: -", "DEL TextElement: List<Message> messages = new ArrayList<Message>();", "DEL ThrowStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL SimpleName: value", "DEL SwitchCase", "DEL SimpleName: lenient", "DEL CharacterLiteral: 'r'", "DEL MethodInvocation", "DEL PostfixExpression: ++", "DEL TextElement: corresponding handler method.", "DEL ExpressionStatement", "DEL TextElement:  value of the next token,", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL StringLiteral: \"fallthrough\"", "DEL Block", "DEL TextElement: Returns the next token, a ", "DEL SwitchCase", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL Modifier: static", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL Assignment: =", "DEL TextElement:  string", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TextElement: \"name\": \"json_newb\",", "DEL SimpleName: result", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL Modifier: private", "DEL TextElement:  :", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL CharacterLiteral: 'e'", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL PrefixExpression: !", "DEL SimpleType: MalformedJsonException", "DEL SimpleName: checkLenient", "DEL SimpleName: IOException", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: decodeNumber", "DEL TextElement:  expected", "DEL InfixExpression: ||", "DEL SimpleName: peek", "DEL QualifiedName: JsonToken.NUMBER", "DEL NumberLiteral: 1", "DEL StringLiteral: \"0\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL QualifiedName: JsonToken.END_OBJECT", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: token", "DEL NumberLiteral: 0", "DEL Block", "DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL Block", "DEL NumberLiteral: 1", "DEL SimpleName: JsonToken", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL SimpleType: JsonToken", "DEL Javadoc", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL TagElement: @code", "DEL SimpleName: parseDouble", "DEL SimpleName: Double", "DEL SimpleName: charsLoaded", "DEL ExpressionStatement", "DEL SimpleName: findNonLiteralCharacter", "DEL SimpleName: skipValue", "DEL SimpleName: fillBuffer", "DEL ReturnStatement", "DEL InfixExpression: >", "DEL TextElement:  if the next token is not null or if this", "DEL Block", "DEL Assignment: =", "DEL SimpleName: result", "DEL QualifiedName: JsonToken.BOOLEAN", "DEL NumberLiteral: 10", "DEL TextElement:  or ", "DEL BooleanLiteral: true", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SwitchCase", "DEL Javadoc", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL PostfixExpression: ++", "DEL SimpleName: startsWith", "DEL SimpleType: IOException", "DEL SimpleType: IllegalStateException", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL CharacterLiteral: '}'", "DEL SimpleName: valuePos", "DEL SimpleName: limit", "DEL InfixExpression: ==", "DEL StringLiteral: \"JSON forbids octal prefixes: \"", "DEL SwitchCase", "DEL PrimitiveType: boolean", "DEL Modifier: static", "DEL Assignment: =", "DEL SimpleName: length", "DEL SimpleName: nextInArray", "DEL Dimension", "DEL Block", "DEL MemberRef", "DEL SimpleName: c", "DEL Assignment: =", "DEL Block", "DEL TextElement: user = readUser(reader);", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: i", "DEL IfStatement", "DEL QualifiedName: JsonToken.STRING", "DEL ArrayAccess", "DEL TextElement: .", "DEL NumberLiteral: 1", "DEL CharacterLiteral: '9'", "DEL SimpleName: start", "DEL StringLiteral: \"Unterminated object\"", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL TextElement:  if the next token is not a string or if", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: pos", "DEL InfixExpression: >=", "DEL TextElement: stream contains unrecognized or unhandled values.", "DEL SimpleName: i", "DEL SimpleName: token", "DEL TextElement: String username = null;", "DEL SimpleName: fillBuffer", "DEL SimpleName: length", "DEL Block", "DEL NumberLiteral: 10", "DEL SwitchCase", "DEL SimpleName: result", "DEL Assignment: =", "DEL TypeDeclaration: class", "DEL SimpleName: expect", "DEL SimpleName: valuePos", "DEL TextElement: </ul>", "DEL SimpleName: column", "DEL InfixExpression: !=", "DEL SimpleName: Double", "DEL InfixExpression: &&", "DEL SimpleName: append", "DEL SimpleName: consumeNonExecutePrefix", "DEL MethodInvocation", "DEL SimpleName: chars", "DEL SimpleName: JsonToken", "DEL SimpleName: c", "DEL ReturnStatement", "DEL SimpleName: IllegalStateException", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SimpleName: IOException", "DEL TextElement:  if any unicode escape sequences are", "DEL SimpleType: String", "DEL SimpleName: DANGLING_NAME", "DEL ExpressionStatement", "DEL SimpleName: peek", "DEL InfixExpression: +", "DEL PrefixExpression: ++", "DEL SimpleName: builder", "DEL SimpleName: total", "DEL InfixExpression: ||", "DEL Block", "DEL CharacterLiteral: '9'", "DEL TextElement: ; this means the caller can always push back the", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL SimpleName: NumberFormatException", "DEL SimpleName: isLenient", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: NUMBER", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL Block", "DEL NumberLiteral: 4", "DEL Modifier: public", "DEL SingleMemberAnnotation", "DEL ClassInstanceCreation", "DEL SimpleName: l", "DEL SimpleName: name", "DEL SimpleName: advance", "DEL InfixExpression: &&", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: throwOnEof", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL SimpleName: limit", "DEL SimpleName: result", "DEL SimpleName: String", "DEL SimpleName: peek", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: valuePos", "DEL PrimitiveType: boolean", "DEL WhileStatement", "DEL ThrowStatement", "DEL CharacterLiteral: '.'", "DEL Javadoc", "DEL SimpleName: get", "DEL SimpleName: limit", "DEL Block", "DEL SimpleName: IOException", "DEL CharacterLiteral: 'L'", "DEL TextElement: should have already been read. This consumes the closing quote, but does", "DEL TextElement:  if the next literal value cannot be parsed", "DEL SimpleName: column", "DEL TextElement: beginning of a new object.", "DEL TextElement: Returns the ", "DEL CharacterLiteral: 's'", "DEL Assignment: =", "DEL PrimitiveType: void", "DEL Block", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL TextElement:  if the next token is not a boolean or if", "DEL ExpressionStatement", "DEL MethodRef", "DEL TextElement: parser to lenient causes it to ignore the following syntax errors:", "DEL VariableDeclarationFragment", "DEL SimpleName: line", "DEL Assignment: +=", "DEL SimpleName: isNaN", "DEL InfixExpression: ||", "DEL SimpleName: chars", "DEL IfStatement", "DEL SimpleName: lenient", "DEL TextElement: parse it as a long. If the next token's numeric value cannot be exactly", "DEL SimpleName: isInfinite", "DEL TextElement:  is", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: NONEMPTY_OBJECT", "DEL SimpleName: peek", "DEL Block", "DEL MethodInvocation", "DEL FieldAccess", "DEL InfixExpression: +", "DEL CharacterLiteral: ','", "DEL SimpleName: FALSE", "DEL SimpleName: reader", "DEL TextElement: reader.endObject();", "DEL TagElement: @code", "DEL StringLiteral: \" at line \"", "DEL PostfixExpression: ++", "DEL MethodRefParameter", "DEL VariableDeclarationFragment", "DEL SimpleName: append", "DEL TextElement: reader.beginObject();", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL TextElement: .", "DEL SimpleName: syntaxError", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL StringLiteral: \" but was \"", "DEL ArrayAccess", "DEL PrimitiveType: boolean", "DEL FieldAccess", "DEL PrefixExpression: -", "DEL SimpleName: NON_EXECUTE_PREFIX", "DEL TextElement:  if the next token is not a literal value.", "DEL TagElement: @code", "DEL SimpleName: c", "DEL ReturnStatement", "DEL StringLiteral: \")]}'\\n\"", "DEL SimpleName: pos", "DEL SimpleName: nextNull", "DEL TagElement: @code", "DEL NumberLiteral: 1L", "DEL ThrowStatement", "DEL MethodInvocation", "DEL TextElement: while loop that accumulates values, terminating when ", "DEL TextElement: }}</pre>", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: chars", "DEL SimpleName: buffer", "DEL SimpleName: NullPointerException", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: skipToEndOfLine", "DEL ArrayAccess", "DEL TextElement: \"followers_count\": 41", "DEL SimpleName: result", "DEL SimpleType: String", "DEL SimpleName: nextValue", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL TagElement: @code", "DEL SimpleType: String", "DEL CharacterLiteral: 'A'", "DEL SimpleName: syntaxError", "DEL TextElement: } else if (name.equals(\"user\")) ", "DEL SimpleName: nextValue", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleType: IllegalStateException", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL ThrowStatement", "DEL SimpleName: IOException", "DEL NullLiteral", "DEL PrimitiveType: int", "DEL QualifiedName: NON_EXECUTE_PREFIX.length", "DEL NumberLiteral: 1", "DEL SimpleName: bufferStartColumn", "DEL ForStatement", "DEL SimpleName: pos", "DEL ArrayType: char[]", "DEL SimpleName: JsonToken", "DEL ArrayAccess", "DEL SimpleType: IOException", "DEL Assignment: <<=", "DEL VariableDeclarationFragment", "DEL SimpleName: expected", "DEL Assignment: =", "DEL SimpleName: result", "DEL PrefixExpression: !", "DEL ReturnStatement", "DEL SimpleName: IOException", "DEL MethodDeclaration", "DEL TextElement: .", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL SimpleName: JsonReaderInternalAccess", "DEL TagElement: @code", "DEL SimpleName: peek", "DEL ThrowStatement", "DEL Modifier: private", "DEL SimpleType: IOException", "DEL TextElement: Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)", "DEL Assignment: =", "DEL NullLiteral", "DEL NumberLiteral: 1", "DEL SwitchCase", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL Block", "DEL ArrayAccess", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: NON_EXECUTE_PREFIX", "DEL TextElement:  /", "DEL SimpleName: IOException", "DEL TextElement: Web servers that serve private data using JSON may be vulnerable to <a", "DEL TextElement: User user = null;", "DEL TagElement: @param", "DEL ArrayAccess", "DEL CharacterLiteral: 'f'", "DEL SimpleName: checkLenient", "DEL StringLiteral: \" at line \"", "DEL SimpleName: buffer", "DEL CastExpression", "DEL Javadoc", "DEL SimpleType: IllegalStateException", "DEL InfixExpression: !=", "DEL TagElement", "DEL SimpleName: getLineNumber", "DEL SimpleName: JsonReader", "DEL TextElement: Returns true if the current array or object has another element.", "DEL CharacterLiteral: '\\''", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '9'", "DEL SimpleName: in", "DEL SimpleName: MalformedJsonException", "DEL SimpleName: IllegalStateException", "DEL SimpleName: firstElement", "DEL TextElement:  value of the next token,", "DEL CharacterLiteral: '['", "DEL SimpleName: limit", "DEL TextElement: prefix</a>, <code>\")]}'\\n\"</code>.", "DEL Block", "DEL TagElement", "DEL ArrayAccess", "DEL SimpleName: parseDouble", "DEL ArrayType: char[]", "DEL PrimitiveType: boolean", "DEL SimpleName: skipping", "DEL PrimitiveType: boolean", "DEL SimpleName: nextInObject", "DEL QualifiedName: JsonToken.NULL", "DEL Modifier: private", "DEL SimpleName: nextNonWhitespace", "DEL Assignment: =", "DEL SimpleName: getColumnNumber", "DEL BooleanLiteral: true", "DEL StringLiteral: \" column \"", "DEL PostfixExpression: --", "DEL PrefixExpression: !", "DEL SimpleName: result", "DEL SimpleName: stack", "DEL MethodDeclaration", "DEL Assignment: =", "DEL TagElement", "DEL Assignment: =", "DEL FieldDeclaration", "DEL StringLiteral: \"Expected a name but was \"", "DEL NumberLiteral: 2", "DEL TextElement:  JsonReader", "DEL PrimitiveType: void", "DEL NumberLiteral: 1", "DEL TextElement: reader.endArray();", "DEL ExpressionStatement", "DEL SimpleName: getLineNumber", "DEL MemberRef", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL TextElement: The text of the next name. ", "DEL SwitchCase", "DEL SimpleName: valuePos", "DEL TextElement: precision loss, extremely large values should be written and read as strings", "DEL Block", "DEL InfixExpression: ==", "DEL TextElement: consuming it. If the next token is a string, this method will attempt to", "DEL CharacterLiteral: 'n'", "DEL TextElement: To create a recursive descent parser for your own JSON streams, first create", "DEL ExpressionStatement", "DEL TextElement: This code implements the parser for the above structure: <pre>   ", "DEL SimpleName: JsonToken", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL SimpleName: NONEMPTY_DOCUMENT", "DEL TagElement: @link", "DEL SwitchCase", "DEL SimpleName: arraycopy", "DEL SimpleName: buffer", "DEL SimpleName: pos", "DEL Block", "DEL CharacterLiteral: '{'", "DEL SimpleName: i", "DEL SimpleName: getLineNumber", "DEL SimpleName: p", "DEL SimpleName: startsWith", "DEL SimpleName: IOException", "DEL ClassInstanceCreation", "DEL StringLiteral: \" at line \"", "DEL ArrayAccess", "DEL SimpleName: pos", "DEL SimpleName: Reader", "DEL TextElement:  in", "DEL SimpleName: name", "DEL Block", "DEL SimpleName: token", "DEL SimpleName: NONEMPTY_ARRAY", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleType: IllegalStateException", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL IfStatement", "DEL PrimitiveType: long", "DEL TagElement", "DEL TextElement: \"text\": \"How do I read a JSON stream in Java?\",", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: EMPTY_DOCUMENT", "DEL MethodDeclaration", "DEL TextElement: consuming it.", "DEL SimpleType: JsonToken", "DEL CharacterLiteral: '+'", "DEL SimpleName: nextNonWhitespace", "DEL Assignment: =", "DEL ReturnStatement", "DEL ArrayAccess", "DEL InfixExpression: -", "DEL SwitchCase", "DEL ArrayAccess", "DEL TextElement:  or ", "DEL Block", "DEL InfixExpression: ||", "DEL IfStatement", "DEL SimpleName: c", "DEL PrimitiveType: char", "DEL SimpleName: limit", "DEL WhileStatement", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL StringLiteral: \" column \"", "DEL SimpleName: buffer", "DEL StringLiteral: \"Expected a long but was \"", "DEL TextElement: <li>Within <strong>array handling</strong> methods, first call ", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement: Determine whether the characters is a JSON number. Numbers are of the", "DEL VariableDeclarationStatement", "DEL TextElement: .", "DEL InfixExpression: >=", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL InfixExpression: ||", "DEL StringLiteral: \"Expected a boolean but was \"", "DEL NumberLiteral: 0", "DEL QualifiedName: buffer.length", "DEL InfixExpression: +", "DEL TextElement: public Message readMessage(JsonReader reader) throws IOException ", "DEL TextElement:  may be used to read a single JSON stream. Instances", "DEL TextElement: },", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL Block", "DEL PrimitiveType: void", "DEL PrimitiveType: int", "DEL TagElement: @code", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL ArrayAccess", "DEL MethodInvocation", "DEL SimpleName: value", "DEL ThrowStatement", "DEL TagElement", "DEL TextElement: href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL MethodDeclaration", "DEL Assignment: =", "DEL TextElement:  /*", "DEL SimpleName: token", "DEL SimpleName: valuePos", "DEL TagElement", "DEL CharacterLiteral: 'F'", "DEL Block", "DEL SimpleName: endObject", "DEL SimpleName: pos", "DEL ExpressionStatement", "DEL StringLiteral: \"Expected a double but was \"", "DEL SimpleName: JsonReader", "DEL SimpleName: pos", "DEL Javadoc", "DEL MethodInvocation", "DEL PostfixExpression: --", "DEL Block", "DEL SimpleName: valuePos", "DEL TextElement:  if any unicode escape sequences are", "DEL TextElement:  ;", "DEL SimpleName: IOException", "DEL InfixExpression: +", "DEL Assignment: =", "DEL TagElement: @code", "DEL Assignment: =", "DEL CharacterLiteral: 'f'", "DEL BooleanLiteral: true", "DEL Modifier: private", "DEL CharacterLiteral: '0'", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 4", "DEL SimpleName: NumberFormatException", "DEL TagElement: @link", "DEL InfixExpression: &&", "DEL InfixExpression: &&", "DEL Block", "DEL QualifiedName: buffer.length", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: nextNonWhitespace", "DEL TextElement: Returns the ", "DEL SimpleName: pos", "DEL SimpleName: Override", "DEL Block", "DEL Javadoc", "DEL TextElement: <p>If a value may be null, you should first check using ", "DEL ReturnStatement", "DEL SimpleName: IllegalStateException", "DEL SimpleName: i", "DEL TagElement", "DEL InfixExpression: +", "DEL SimpleName: value", "DEL SimpleName: token", "DEL TryStatement", "DEL TagElement: @link", "DEL PrimitiveType: int", "DEL SimpleName: isInfinite", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL TextElement: Closes this JSON reader and the underlying ", "DEL Assignment: =", "DEL SimpleName: i", "DEL ThrowStatement", "DEL Block", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: quote", "DEL Modifier: public", "DEL CatchClause", "DEL CharacterLiteral: 'n'", "DEL TextElement:  <script>", "DEL Block", "DEL TextElement:  double", "DEL CharacterLiteral: 'b'", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL ArrayAccess", "DEL SimpleName: Closeable", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL PrimitiveType: int", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: pos", "DEL Block", "DEL TextElement: Consumes the next token from the JSON stream and asserts that it is a", "DEL MethodInvocation", "DEL SimpleName: result", "DEL VariableDeclarationFragment", "DEL SimpleName: buffer", "DEL SimpleName: token", "DEL PrefixExpression: !", "DEL MethodRef", "DEL TextElement:  may be read using either ", "DEL ExpressionStatement", "DEL SimpleType: NumberFormatException", "DEL SimpleName: checkLenient", "DEL Assignment: =", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL TextElement: return messages;", "DEL SimpleName: nextLiteral", "DEL ReturnStatement", "DEL TextElement: in the fraction.", "DEL SimpleType: String", "DEL SimpleName: token", "DEL SimpleName: pos", "DEL SimpleName: buffer", "DEL SimpleName: i", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: asDouble", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL TextElement: <li>Numbers may be ", "DEL SimpleName: builder", "DEL SimpleName: fillBuffer", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL SimpleName: p", "DEL CharacterLiteral: '{'", "DEL SwitchCase", "DEL SimpleName: i", "DEL SimpleName: value", "DEL Block", "DEL InfixExpression: ==", "DEL TextElement: caller.", "DEL SimpleName: getLineNumber", "DEL SimpleName: c", "DEL Block", "DEL Assignment: =", "DEL SimpleName: lenient", "DEL MemberRef", "DEL SimpleName: peek", "DEL SimpleName: chars", "DEL SimpleName: buffer", "DEL SwitchCase", "DEL TagElement: @code", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: IOException", "DEL TextElement:  if the next literal value cannot be parsed", "DEL ReturnStatement", "DEL SimpleName: buffer", "DEL TagElement: @code", "DEL InfixExpression: <", "DEL InfixExpression: +", "DEL SimpleName: i", "DEL StringLiteral: \"Expected null but was \"", "DEL SimpleName: i", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: NONEMPTY_OBJECT", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL SimpleName: result", "DEL ReturnStatement", "DEL MethodInvocation", "DEL StringLiteral: \" column \"", "DEL Block", "DEL MethodDeclaration", "DEL TextElement: <li>Array elements separated by ", "DEL SimpleName: value", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: pos", "DEL CharacterLiteral: '\"'", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL PostfixExpression: ++", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL TextElement: <li>Names and values separated by ", "DEL ContinueStatement", "DEL Block", "DEL SimpleName: checkLenient", "DEL SimpleName: start", "DEL Block", "DEL TextElement: reader.skipValue();", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: Closeable", "DEL SwitchCase", "DEL Assignment: =", "DEL MethodInvocation", "DEL PostfixExpression: ++", "DEL TagElement", "DEL TextElement: malformed.", "DEL Block", "DEL SwitchCase", "DEL InfixExpression: +", "DEL CharacterLiteral: '['", "DEL WhileStatement", "DEL ContinueStatement", "DEL SimpleName: stringPool", "DEL TextElement:  to consume the array's opening bracket. Then create a", "DEL Assignment: =", "DEL SimpleName: setLenient", "DEL Block", "DEL ThrowStatement", "DEL FieldDeclaration", "DEL SimpleName: reader", "DEL SimpleName: firstToken", "DEL MemberRef", "DEL InfixExpression: !=", "DEL SimpleName: decodeLiteral", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL SimpleName: valuePos", "DEL SimpleType: StringPool", "DEL SimpleName: buffer", "DEL IfStatement", "DEL SimpleName: fillBuffer", "DEL Block", "DEL SwitchCase", "DEL Modifier: private", "DEL TextElement:  instead of", "DEL InfixExpression: &&", "DEL InfixExpression: !=", "DEL TextElement: True to accept non-spec compliant JSON ", "DEL PostfixExpression: --", "DEL VariableDeclarationFragment", "DEL SimpleName: length", "DEL ClassInstanceCreation", "DEL TagElement", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: token", "DEL SimpleName: SuppressWarnings", "DEL InfixExpression: ==", "DEL TextElement:  or ", "DEL SimpleName: pos", "DEL QualifiedName: JsonToken.END_OBJECT", "DEL StringLiteral: \" column \"", "DEL Assignment: =", "DEL TextElement: }", "DEL PrimitiveType: int", "DEL SimpleType: IllegalStateException", "DEL StringLiteral: \" at line \"", "DEL QualifiedName: JsonToken.END_ARRAY", "DEL SimpleName: valuePos", "DEL TagElement", "DEL TextElement: beginning of a new array.", "DEL Block", "DEL SimpleName: peek", "DEL Assignment: =", "DEL StringLiteral: \"Expected a name but was \"", "DEL MethodInvocation", "DEL SimpleName: stackSize", "DEL SimpleName: CLOSED", "DEL Block", "DEL SimpleName: parseLong", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL WhileStatement", "DEL SwitchCase", "DEL Modifier: public", "DEL SimpleName: token", "DEL VariableDeclarationStatement", "DEL InfixExpression: >=", "DEL SimpleName: NumberFormatException", "DEL VariableDeclarationFragment", "DEL SwitchStatement", "DEL TextElement: Returns the next character in the stream that is neither whitespace nor a", "DEL NumberLiteral: 2", "DEL TextElement:  quote", "DEL SimpleName: buffer", "DEL WhileStatement", "DEL SimpleName: pos", "DEL ReturnStatement", "DEL SimpleName: c", "DEL PrimitiveType: char", "DEL IfStatement", "DEL SimpleName: result", "DEL TextElement:  ,", "DEL InfixExpression: ==", "DEL CharacterLiteral: '\\0'", "DEL Block", "DEL MemberRef", "DEL SimpleName: String", "DEL TextElement: and valueLength fields and return a null result. This only works if", "DEL ArrayType: char[]", "DEL SimpleName: result", "DEL ThrowStatement", "DEL SimpleName: nextNull", "DEL LabeledStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodRef", "DEL TagElement: @link", "DEL VariableDeclarationStatement", "DEL SimpleName: valueLength", "DEL ExpressionStatement", "DEL SimpleName: token", "DEL TagElement: @code", "DEL InfixExpression: <", "DEL SimpleName: JsonToken", "DEL SwitchCase", "DEL MethodInvocation", "DEL StringLiteral: \"Expected \"", "DEL SimpleType: StringBuilder", "DEL MethodRef", "DEL ArrayAccess", "DEL TextElement: <li>Unnecessary array separators. These are interpreted as if null", "DEL SimpleName: c", "DEL InfixExpression: >=", "DEL InfixExpression: ==", "DEL TextElement: exhausted before that many characters are available, this returns", "DEL TagElement: @throws", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: p", "DEL TextElement:  if the next token in the stream is not a property", "DEL MethodInvocation", "DEL TextElement: }", "DEL SimpleName: stackSize", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL SimpleName: JsonTreeReader", "DEL SwitchStatement", "DEL MethodInvocation", "DEL SimpleName: stackSize", "DEL MethodDeclaration", "DEL SimpleName: pos", "DEL PrimitiveType: int", "DEL TagElement: @code", "DEL SimpleName: name", "DEL ClassInstanceCreation", "DEL SimpleName: token", "DEL SimpleType: JsonToken", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL TextElement: to a private JSON file by executing it with an HTML ", "DEL InfixExpression: +", "DEL SimpleName: pos", "DEL ForStatement", "DEL SimpleName: checkLenient", "DEL SimpleName: p", "DEL TagElement: @code", "DEL Assignment: =", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SwitchCase", "DEL IfStatement", "DEL TagElement", "DEL TextElement: }", "DEL Block", "DEL Modifier: private", "DEL MemberRef", "DEL TextElement:  value of the next token,", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: stackSize", "DEL MemberRef", "DEL NumberLiteral: 1", "DEL InfixExpression: +", "DEL Javadoc", "DEL SimpleName: value", "DEL Block", "DEL SimpleType: IOException", "DEL Block", "DEL NumberLiteral: 4", "DEL SimpleName: c", "DEL ForStatement", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL SimpleName: fillBuffer", "DEL SimpleName: valueLength", "DEL InfixExpression: +", "DEL NumberLiteral: 0", "DEL SimpleName: getColumnNumber", "DEL SimpleName: limit", "DEL SimpleName: SuppressWarnings", "DEL IfStatement", "DEL SimpleName: getColumnNumber", "DEL TextElement:  tags, disarming the attack. Since the prefix is malformed", "DEL CharacterLiteral: '\\\\'", "DEL SimpleType: IOException", "DEL TextElement: </ul>", "DEL SimpleType: IOException", "DEL TextElement:  if the next token is not a literal value.", "DEL ThrowStatement", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL ArrayAccess", "DEL SwitchCase", "DEL MemberRef", "DEL SimpleName: IOException", "DEL SimpleName: nextValue", "DEL SimpleName: getColumnNumber", "DEL SimpleName: valuePos", "DEL TextElement: Use a manual buffer to easily read and unread upcoming characters, and", "DEL ThrowStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: in", "DEL StringLiteral: \" at line \"", "DEL PrefixExpression: !", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL SimpleName: STRING", "DEL ParenthesizedExpression", "DEL NumberLiteral: 1", "DEL SimpleName: valuePos", "DEL TagElement: @link", "DEL MethodInvocation", "DEL Dimension", "DEL SimpleName: pos", "DEL Block", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL InfixExpression: &&", "DEL SimpleName: token", "DEL SimpleName: i", "DEL SimpleName: limit", "DEL MethodInvocation", "DEL Modifier: public", "DEL ArrayAccess", "DEL Assignment: =", "DEL TagElement: @link", "DEL SwitchCase", "DEL SimpleType: IOException", "DEL SimpleType: JsonToken", "DEL SimpleName: IOException", "DEL BooleanLiteral: false", "DEL ThrowStatement", "DEL TextElement: }", "DEL SimpleType: IOException", "DEL ArrayAccess", "DEL SimpleName: token", "DEL SimpleName: p", "DEL SimpleName: i", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL MemberRef", "DEL NumberLiteral: 0", "DEL SimpleName: line", "DEL SimpleName: token", "DEL ExpressionStatement", "DEL SwitchCase", "DEL StringLiteral: \"Expected name\"", "DEL ContinueStatement", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\n'", "DEL TextElement: public User readUser(JsonReader reader) throws IOException ", "DEL SimpleName: JsonTreeReader", "DEL StringLiteral: \" column \"", "DEL Block", "DEL SimpleName: JsonToken", "DEL MethodRef", "DEL SimpleName: buffer", "DEL SimpleName: outer", "DEL SwitchStatement", "DEL IfStatement", "DEL Modifier: private", "DEL SimpleType: IOException", "DEL SimpleName: IllegalStateException", "DEL Block", "DEL CharacterLiteral: '\"'", "DEL SimpleName: checkLenient", "DEL SimpleName: beginArray", "DEL SimpleName: bufferStartColumn", "DEL PrimitiveType: char", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: String", "DEL TagElement: @link", "DEL SimpleName: getColumnNumber", "DEL PrimitiveType: int", "DEL SimpleName: getLineNumber", "DEL SimpleType: IOException", "DEL VariableDeclarationStatement", "DEL SimpleName: c", "DEL NumberLiteral: 0", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: nextInObject", "DEL PrefixExpression: !", "DEL VariableDeclarationStatement", "DEL CharacterLiteral: 'L'", "DEL Block", "DEL FieldAccess", "DEL TextElement:  'single quoted'", "DEL SimpleName: column", "DEL SwitchCase", "DEL InfixExpression: +", "DEL SimpleName: value", "DEL CharacterLiteral: '/'", "DEL Modifier: private", "DEL SimpleName: Double", "DEL Modifier: private", "DEL TextElement:  boolean", "DEL InfixExpression: &&", "DEL Modifier: final", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: c", "DEL SimpleName: String", "DEL TextElement: this parser is strict and only accepts JSON as specified by <a", "DEL VariableDeclarationExpression", "DEL InfixExpression: !=", "DEL SimpleName: fillBuffer", "DEL SimpleName: NumberFormatException", "DEL SimpleName: nextNonWhitespace", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL PrimitiveType: char", "DEL Block", "DEL SimpleName: start", "DEL MethodInvocation", "DEL TagElement: @code", "DEL ThrowStatement", "DEL InfixExpression: ==", "DEL SimpleName: message", "DEL CharacterLiteral: 'r'", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement: geo = readDoublesArray(reader);", "DEL ReturnStatement", "DEL SimpleType: NumberFormatException", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TextElement: <ul>", "DEL TextElement: <p>When an unknown name is encountered, strict parsers should fail with an", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: valueLength", "DEL SimpleName: pos", "DEL Assignment: +=", "DEL IfStatement", "DEL SimpleName: result", "DEL SimpleName: checkLenient", "DEL SimpleName: NumberFormatException", "DEL SimpleName: p", "DEL Assignment: =", "DEL SimpleName: value", "DEL SimpleName: i", "DEL SimpleType: NumberFormatException", "DEL ClassInstanceCreation", "DEL SimpleName: ignored", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL ThrowStatement", "DEL ArrayAccess", "DEL TextElement: Reads a null, boolean, numeric or unquoted string literal value.", "DEL ExpressionStatement", "DEL SimpleName: limit", "DEL SimpleName: push", "DEL PostfixExpression: --", "DEL InfixExpression: +", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"Unterminated comment\"", "DEL SimpleName: syntaxError", "DEL SimpleName: lenient", "DEL TextElement:  ,", "DEL PrimitiveType: boolean", "DEL ParenthesizedExpression", "DEL SimpleName: c", "DEL SimpleType: StringBuilder", "DEL InfixExpression: ==", "DEL SimpleName: buffer", "DEL Assignment: =", "DEL QualifiedName: JsonToken.BEGIN_ARRAY", "DEL IfStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL StringLiteral: \"Expected literal value\"", "DEL TextElement: reader is closed.", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL SimpleName: p", "DEL StringLiteral: \" at line \"", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL CharacterLiteral: 'a'", "DEL ExpressionStatement", "DEL TextElement: this reader is closed.", "DEL Block", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Assignment: +=", "DEL SimpleName: pos", "DEL SimpleName: getLineNumber", "DEL InfixExpression: &&", "DEL TextElement: end of the current array.", "DEL Block", "DEL SimpleName: in", "DEL InfixExpression: <=", "DEL SimpleName: nextNonWhitespace", "DEL TextElement: <h3>Example</h3>", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: start", "DEL NullLiteral", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: pos", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: skipping", "DEL TextElement: <p>Next, create handler methods for each structure in your JSON text. You'll", "DEL SimpleName: TRUE", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: pos", "DEL ReturnStatement", "DEL StringLiteral: \" column \"", "DEL SimpleName: nextInArray", "DEL SimpleName: stackSize", "DEL Modifier: private", "DEL StringLiteral: \"fallthrough\"", "DEL SimpleName: pos", "DEL CharacterLiteral: '-'", "DEL ArrayCreation", "DEL SimpleName: Double", "DEL SimpleName: pos", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: valuePos", "DEL ExpressionStatement", "DEL TextElement: parse it as a double using ", "DEL MethodInvocation", "DEL NumberLiteral: 3", "DEL Block", "DEL SimpleName: stackSize", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: IOException", "DEL SimpleName: firstElement", "DEL TagElement: @throws", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL SwitchCase", "DEL SimpleName: stringPool", "DEL SimpleName: c", "DEL SimpleName: JsonToken", "DEL MethodDeclaration", "DEL SimpleName: IOException", "DEL Assignment: =", "DEL SimpleName: l", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL SimpleType: IOException", "DEL InfixExpression: ==", "DEL SimpleName: String", "DEL StringLiteral: \" column \"", "DEL BooleanLiteral: false", "DEL StringLiteral: \"*/\"", "DEL QualifiedName: JsonToken.NUMBER", "DEL InfixExpression: -", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: NumberFormatException", "DEL Block", "DEL SimpleType: IOException", "DEL Assignment: =", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL TextElement: character escape sequences encountered along the way. The opening quote", "DEL Modifier: private", "DEL InfixExpression: >", "DEL PrefixExpression: !", "DEL SimpleName: value", "DEL TagElement: @code", "DEL ThrowStatement", "DEL SimpleName: p", "DEL SimpleName: promoteNameToValue", "DEL ReturnStatement", "DEL TextElement: .", "DEL SimpleName: IOException", "DEL SimpleName: token", "DEL SimpleName: builder", "DEL SimpleName: outer", "DEL ExpressionStatement", "DEL TextElement: The input JSON. ", "DEL CharacterLiteral: 'f'", "DEL SimpleName: bufferStartLine", "DEL Assignment: =", "DEL TextElement: the literal is short; a string is returned otherwise.", "DEL ReturnStatement", "DEL QualifiedName: JsonToken.END_OBJECT", "DEL TextElement: does not consume the delimiter character.", "DEL SimpleName: limit", "DEL TextElement: <li>Top-level values of any type. With strict parsing, the top-level", "DEL CharacterLiteral: 'u'", "DEL TextElement: malformed.", "DEL SimpleName: pos", "DEL NumberLiteral: 0", "DEL PostfixExpression: ++", "DEL SimpleName: buffer", "DEL SimpleName: pos", "DEL SimpleName: column", "DEL SimpleName: minimum", "DEL MethodInvocation", "DEL IfStatement", "DEL TextElement: String name = reader.nextName();", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: token", "DEL SwitchStatement", "DEL Assignment: =", "DEL CharacterLiteral: '9'", "DEL SimpleName: buffer", "DEL SimpleName: buffer", "DEL SimpleName: c", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL TextElement: Within JSON objects, name/value pairs are represented by a single token.", "DEL SimpleType: IOException", "DEL ReturnStatement", "DEL InfixExpression: -", "DEL ThrowStatement", "DEL NullLiteral", "DEL TextElement:  JsonReader", "DEL SimpleName: stack", "DEL StringLiteral: \"Unterminated escape sequence\"", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL InfixExpression: ==", "DEL SimpleName: result", "DEL SimpleName: get", "DEL SimpleName: token", "DEL CharacterLiteral: ';'", "DEL IfStatement", "DEL QualifiedName: reader.token", "DEL PrimitiveType: int", "DEL BreakStatement", "DEL SimpleName: getColumnNumber", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL SimpleName: firstElement", "DEL TextElement: values (strings, numbers, booleans, and nulls) as well as the begin and", "DEL VariableDeclarationStatement", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: getColumnNumber", "DEL StringLiteral: \"null\"", "DEL SimpleName: limit", "DEL InfixExpression: ||", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: EMPTY_DOCUMENT", "DEL SwitchCase", "DEL SimpleName: lenient", "DEL SimpleName: peek", "DEL Javadoc", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL CharacterLiteral: 'E'", "DEL Assignment: =", "DEL InfixExpression: +", "DEL PostfixExpression: --", "DEL SingleVariableDeclaration", "DEL SimpleName: result", "DEL MarkerAnnotation", "DEL PrimitiveType: char", "DEL ThrowStatement", "DEL SimpleType: JsonToken", "DEL SimpleName: stackSize", "DEL SwitchCase", "DEL Block", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: JsonToken", "DEL VariableDeclarationStatement", "DEL SimpleName: c", "DEL PrimitiveType: void", "DEL SimpleType: JsonToken", "DEL ExpressionStatement", "DEL TagElement", "DEL ArrayAccess", "DEL ParenthesizedExpression", "DEL Block", "DEL SwitchCase", "DEL NumberLiteral: 0", "DEL InfixExpression: -", "DEL Block", "DEL StringLiteral: \" at line \"", "DEL TextElement: int followersCount = -1;", "DEL SimpleName: p", "DEL Assignment: =", "DEL PostfixExpression: ++", "DEL IfStatement", "DEL Block", "DEL CharacterLiteral: '0'", "DEL TagElement", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL TextElement: .", "DEL SimpleName: fillBuffer", "DEL SwitchStatement", "DEL QualifiedName: JsonToken.END_OBJECT", "DEL Block", "DEL Assignment: =", "DEL SimpleName: p", "DEL FieldDeclaration", "DEL InfixExpression: >", "DEL SimpleName: start", "DEL TextElement: , and", "DEL ExpressionStatement", "DEL SimpleName: nextInt", "DEL FieldDeclaration", "DEL TextElement: We decode literals directly out of this buffer, so it must be at least as", "DEL ArrayAccess", "DEL SimpleName: append", "DEL SimpleName: token", "DEL PrimitiveType: int", "DEL ArrayAccess", "DEL TextElement:  #", "DEL PrefixExpression: -", "DEL TextElement: Null literals can be consumed using either ", "DEL TextElement: .", "DEL MethodInvocation", "DEL SwitchCase", "DEL MethodInvocation", "DEL SimpleName: result", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: result", "DEL SwitchStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL CastExpression", "DEL TextElement: <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable", "DEL InfixExpression: &&", "DEL CharacterLiteral: ':'", "DEL SimpleName: String", "DEL SwitchCase", "DEL SimpleType: JsonReader", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: valuePos", "DEL MethodRef", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: token", "DEL StringLiteral: \"Expected a string but was \"", "DEL MemberRef", "DEL QualifiedName: JsonToken.STRING", "DEL SimpleName: skipValue", "DEL SimpleName: token", "DEL NumberLiteral: 1L", "DEL InfixExpression: >=", "DEL TextElement: is false. Finally, read the array's closing bracket by calling ", "DEL SimpleName: String", "DEL SimpleName: fillBuffer", "DEL StringLiteral: \" at line \"", "DEL SimpleName: i", "DEL InfixExpression: +", "DEL NumberLiteral: 3", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: arraycopy", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL PrefixExpression: !", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL TextElement: . If the data is", "DEL NullLiteral", "DEL PrimitiveType: char", "DEL TextElement: .", "DEL MethodDeclaration", "DEL SimpleName: token", "DEL Block", "DEL InfixExpression: +", "DEL TextElement: .", "DEL WhileStatement", "DEL TextElement: consuming it. If the next token is a string, this method will attempt to", "DEL SimpleName: SuppressWarnings", "DEL ClassInstanceCreation", "DEL TextElement: long as the longest token that can be reported as a number.", "DEL InfixExpression: <", "DEL TextElement: This reader permits numeric values to be read as strings and string values to", "DEL SimpleName: Double", "DEL Modifier: private", "DEL SimpleName: i", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL PostfixExpression: --", "DEL MethodRefParameter", "DEL ThrowStatement", "DEL StringLiteral: \" column \"", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: IllegalStateException", "DEL TextElement: This loop should terminate when ", "DEL VariableDeclarationExpression", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: expect", "DEL SwitchCase", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: NumberFormatException", "DEL TextElement: Returns true once ", "DEL NumberLiteral: 3", "DEL WhileStatement", "DEL PrimitiveType: int", "DEL InfixExpression: ||", "DEL SimpleName: String", "DEL PrimitiveType: char", "DEL SimpleType: StringBuilder", "DEL SimpleName: c", "DEL SimpleName: endArray", "DEL SimpleName: syntaxError", "DEL CharacterLiteral: '\\f'", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\f'", "DEL CharacterLiteral: ','", "DEL ExpressionStatement", "DEL SimpleName: getColumnNumber", "DEL ArrayType: int[]", "DEL PrimitiveType: char", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL SimpleName: i", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL TextElement: Suppose we'd like to parse a stream of messages such as the following: <pre> ", "DEL InfixExpression: +", "DEL SimpleType: IOException", "DEL TextElement:  long", "DEL SimpleType: EOFException", "DEL MethodDeclaration", "DEL SimpleName: token", "DEL VariableDeclarationFragment", "DEL TextElement: <h3>Number Handling</h3>", "DEL SimpleName: valuePos", "DEL MethodInvocation", "DEL SimpleName: getLineNumber", "DEL SimpleType: MalformedJsonException", "DEL PrefixExpression: ++", "DEL InfixExpression: +", "DEL InfixExpression: &&", "DEL NumberLiteral: 1", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \"Unterminated array\"", "DEL ExpressionStatement", "DEL SimpleName: getSimpleName", "DEL PostfixExpression: --", "DEL SimpleName: c", "DEL Block", "DEL SimpleName: syntaxError", "DEL SimpleName: valueLength", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: token", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: getLineNumber", "DEL CharacterLiteral: 't'", "DEL TagElement: @link", "DEL SimpleName: offset", "DEL MethodInvocation", "DEL SimpleName: getColumnNumber", "DEL SimpleName: pos", "DEL SimpleName: value", "DEL InfixExpression: &&", "DEL TagElement", "DEL TextElement: } else ", "DEL SimpleName: i", "DEL TagElement: @link", "DEL SimpleName: pos", "DEL SimpleName: nextString", "DEL SimpleName: c", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL IfStatement", "DEL SimpleName: getLineNumber", "DEL SimpleName: value", "DEL NumberLiteral: 1", "DEL SimpleName: pos", "DEL CharacterLiteral: 'T'", "DEL SimpleName: i", "DEL SimpleName: c", "DEL ReturnStatement", "DEL ArrayAccess", "DEL TextElement: also so we can create strings without an intermediate StringBuilder.", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: ';'", "DEL ExpressionStatement", "DEL SimpleName: stack", "DEL SimpleType: IllegalStateException", "DEL Assignment: =", "DEL SimpleName: pos", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL QualifiedName: JsonToken.BEGIN_OBJECT", "DEL SimpleType: IOException", "DEL ThrowStatement", "DEL TextElement: Configure this parser to be  be liberal in what it accepts. By default,", "DEL StringLiteral: \"null\"", "DEL NullLiteral", "DEL TextElement: }", "DEL ClassInstanceCreation", "DEL NumberLiteral: 2", "DEL InfixExpression: ==", "DEL BreakStatement", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL Block", "DEL InfixExpression: <", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL SimpleName: nextString", "DEL SimpleName: buffer", "DEL SimpleName: pos", "DEL Dimension", "DEL SimpleName: endArray", "DEL SimpleName: peek", "DEL TextElement: an entry point method that creates a ", "DEL SimpleName: token", "DEL SimpleName: hasNext", "DEL ReturnStatement", "DEL TagElement: @code", "DEL SimpleName: IOException", "DEL PrimitiveType: double", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: getLineNumber", "DEL InfixExpression: ==", "DEL Block", "DEL IfStatement", "DEL SimpleName: IOException", "DEL PrimitiveType: long", "DEL ReturnStatement", "DEL ArrayType: char[]", "DEL Dimension", "DEL SimpleName: buffer", "DEL TextElement: doubles.add(reader.nextDouble());", "DEL CharacterLiteral: '0'", "DEL CharacterLiteral: '#'", "DEL SimpleName: value", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL NumberLiteral: 0", "DEL SimpleName: reader", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"Use JsonReader.setLenient(true) to accept malformed JSON\"", "DEL SimpleName: EMPTY_ARRAY", "DEL SimpleName: skipping", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: buffer", "DEL Modifier: public", "DEL TextElement: form -12.34e+56. Fractional and exponential parts are optional. Leading", "DEL ExpressionStatement", "DEL StringLiteral: \"JSON forbids NaN and infinities: \"", "DEL VariableDeclarationFragment", "DEL TextElement: reader.beginObject();", "DEL Block", "DEL NullLiteral", "DEL PostfixExpression: ++", "DEL TextElement: <li>Names that are unquoted or ", "DEL NumberLiteral: 3", "DEL SimpleName: limit", "DEL TextElement:  =>", "DEL InfixExpression: &&", "DEL MemberRef", "DEL InfixExpression: ==", "DEL TextElement: Unescapes the character identified by the character or characters that", "DEL SimpleName: pos", "DEL SwitchCase", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleName: advance", "DEL ExpressionStatement", "DEL BreakStatement", "DEL TextElement: Returns the ", "DEL SimpleType: IOException", "DEL TextElement: ending with a newline character.", "DEL NumberLiteral: 1024", "DEL SimpleName: c", "DEL SimpleName: token", "DEL TagElement: @link", "DEL Block", "DEL Modifier: public", "DEL TextElement: of this class are not thread safe.", "DEL SimpleName: builder", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: nextInObject", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL SimpleName: syntaxError", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL SimpleName: expect", "DEL SimpleName: valueLength", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: in", "DEL ReturnStatement", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL SimpleName: peek", "DEL NumberLiteral: 32", "DEL TextElement: is terminated by \"\\r\\n\", the '\\n' must be consumed as whitespace by the", "DEL Block", "DEL IfStatement", "DEL StringLiteral: \" at line \"", "DEL SimpleName: pos", "DEL TagElement: @code", "DEL SimpleType: IllegalStateException", "DEL TextElement: escapes \"\\n\".", "DEL IfStatement", "DEL InfixExpression: +", "DEL TextElement: messages.add(readMessage(reader));", "DEL PostfixExpression: ++", "DEL ExpressionStatement", "DEL StringLiteral: \"in == null\"", "DEL ArrayAccess", "DEL TagElement: @link", "DEL SimpleName: c", "DEL ArrayAccess", "DEL ArrayAccess", "DEL PostfixExpression: ++", "DEL AnonymousClassDeclaration", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\r'", "DEL SwitchCase", "DEL ReturnStatement", "DEL TagElement: @link", "DEL SimpleType: StringBuilder", "DEL TextElement: \"geo\": null,", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL CharacterLiteral: ']'", "DEL ArrayCreation", "DEL MethodInvocation", "DEL ThrowStatement", "DEL ParenthesizedExpression", "DEL SimpleName: line", "DEL SimpleName: offset", "DEL SimpleName: get", "DEL TextElement: skip the value's nested tokens, which may otherwise conflict.", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: newTop", "DEL SimpleName: nextString", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: IllegalStateException", "DEL ArrayAccess", "DEL SimpleName: c", "DEL Assignment: +=", "DEL InfixExpression: -", "DEL ArrayType: char[]", "DEL SimpleType: String", "DEL SimpleName: buffer", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: Consumes the next token from the JSON stream and asserts that it is the", "DEL SimpleName: nextNonWhitespace", "DEL Modifier: public", "DEL TextElement: <p>Each ", "DEL ExpressionStatement", "DEL SimpleName: nextNonWhitespace", "DEL SimpleName: limit", "DEL SimpleName: assignOffsetsOnly", "DEL SimpleName: valuePos", "DEL Assignment: =", "DEL PrefixExpression: ++", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL TextElement: return new Message(id, text, user, geo);", "DEL TagElement: @code", "DEL SimpleName: i", "DEL ArrayAccess", "DEL PrimitiveType: int", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: pos", "DEL ThrowStatement", "DEL StringLiteral: \" column \"", "DEL TextElement: \"name\": \"jesse\",", "DEL InfixExpression: ==", "DEL Block", "DEL StringLiteral: \" column \"", "DEL SimpleName: getLineNumber", "DEL TextElement: Consumes ", "DEL SimpleType: IllegalStateException", "DEL ClassInstanceCreation", "DEL TextElement: href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the", "DEL TextElement: while (reader.hasNext()) ", "DEL QualifiedName: JsonToken.STRING", "DEL SimpleName: length", "DEL TextElement:  instead of ", "DEL StringLiteral: \"0\"", "DEL StringLiteral: \" column \"", "DEL Block", "DEL TextElement:  either ' or \".", "DEL SwitchCase", "DEL CharacterLiteral: '\\r'", "DEL PrefixExpression: ++", "DEL TextElement: followersCount = reader.nextInt();", "DEL SimpleName: valuePos", "DEL ReturnStatement", "DEL CharacterLiteral: ','", "DEL MethodInvocation", "DEL SimpleName: valuePos", "DEL ExpressionStatement", "DEL SwitchCase", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: syntaxError", "DEL SimpleName: BOOLEAN", "DEL TagElement: @throws", "DEL PrefixExpression: -", "DEL Javadoc", "DEL StringLiteral: \" at line \"", "DEL TextElement: Returns the ", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL SimpleName: advance", "DEL QualifiedName: JsonToken.NUMBER", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL TextElement:  *", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: escaped", "DEL SimpleName: advance", "DEL SimpleName: valuePos", "DEL ExpressionStatement", "DEL SimpleName: stackSize", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL SimpleType: IOException", "DEL TextElement: literal null.", "DEL ArrayAccess", "DEL InfixExpression: &&", "DEL QualifiedName: JsonToken.BEGIN_OBJECT", "DEL SimpleName: chars", "DEL SimpleName: c", "DEL InfixExpression: ==", "DEL SimpleName: buffer", "DEL Block", "DEL Assignment: =", "DEL SimpleName: c", "DEL TextElement: <li>Streams that include multiple top-level values. With strict parsing,", "DEL Block", "DEL InfixExpression: !=", "DEL StringLiteral: \"skipped!\"", "DEL SimpleType: IOException", "DEL VariableDeclarationExpression", "DEL Modifier: private", "DEL InfixExpression: &&", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL InfixExpression: <", "DEL TextElement:  int", "DEL SimpleName: i", "DEL TextElement: public List<Double> readDoublesArray(JsonReader reader) throws IOException ", "DEL VariableDeclarationFragment", "DEL SimpleName: bufferStartLine", "DEL Modifier: private", "DEL BooleanLiteral: true", "DEL QualifiedName: NON_EXECUTE_PREFIX.length", "DEL NumberLiteral: 4", "DEL SwitchStatement", "DEL SimpleName: CLOSED", "DEL TagElement", "DEL Block", "DEL SimpleName: chars", "DEL SimpleName: valuePos", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: result", "DEL Block", "DEL SimpleType: JsonToken", "DEL SimpleName: AssertionError", "DEL NumberLiteral: 0", "DEL SimpleType: MalformedJsonException", "DEL Block", "DEL QualifiedName: JsonToken.NAME", "DEL CharacterLiteral: '\\''", "DEL PrimitiveType: double", "DEL QualifiedName: JsonToken.STRING", "DEL Block", "DEL SimpleName: token", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL TextElement: reader.beginArray();", "DEL PrimitiveType: int", "DEL QualifiedName: JsonToken.END_ARRAY", "DEL PrimitiveType: int", "DEL PostfixExpression: --", "DEL SimpleName: start", "DEL InfixExpression: &&", "DEL SimpleName: SuppressWarnings", "DEL TextElement:  tag.", "DEL QualifiedName: JsonToken.END_OBJECT", "DEL SimpleName: stack", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: l", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL Block", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL StringLiteral: \"JsonReader is closed\"", "DEL SimpleType: IOException", "DEL TextElement: Consumes the next token from the JSON stream and asserts that it is the", "DEL Block", "DEL IfStatement", "DEL InfixExpression: <", "DEL ReturnStatement", "DEL SimpleName: JsonToken", "DEL SimpleName: builder", "DEL CastExpression", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: StringBuilder", "DEL Assignment: =", "DEL SwitchCase", "DEL TextElement: be read as numbers. For example, both elements of the JSON array ", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL TagElement: @code", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL TagElement", "DEL Javadoc", "DEL Assignment: =", "DEL InfixExpression: +", "DEL SimpleName: peek", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: limit", "DEL SingleMemberAnnotation", "DEL SimpleName: close", "DEL ArrayAccess", "DEL SimpleName: p", "DEL SimpleName: c", "DEL NumberLiteral: 4", "DEL BooleanLiteral: true", "DEL TextElement: reader.skipValue();", "DEL SimpleType: IOException", "DEL TextElement: .", "DEL MethodInvocation", "DEL SimpleName: close", "DEL NullLiteral", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\n'", "DEL Javadoc", "DEL TextElement: }", "DEL SimpleName: lenient", "DEL TextElement: JavaScript's only numeric type and very large values like ", "DEL TextElement: The type of the next token to be returned by ", "DEL SimpleName: chars", "DEL ArrayCreation", "DEL SimpleName: pos", "DEL TextElement: .", "DEL SimpleName: IllegalStateException", "DEL Assignment: =", "DEL SimpleName: limit", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: buffer", "DEL TextElement: value must be an object or an array.", "DEL Assignment: =", "DEL Assignment: =", "DEL CharacterLiteral: '\"'", "DEL SimpleName: peek", "DEL SimpleName: parseDouble", "DEL SimpleName: buffer", "DEL TagElement: @throws", "DEL CharacterLiteral: '/'", "DEL NumberLiteral: 1", "DEL SimpleName: result", "DEL StringLiteral: \"Unterminated escape sequence\"", "DEL SimpleName: beginArray", "DEL PrimitiveType: char", "DEL SimpleName: Long", "DEL Modifier: private", "DEL ThisExpression", "DEL InfixExpression: ==", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: readLiteral", "DEL SimpleName: beginObject", "DEL TagElement: @link", "DEL SwitchCase", "DEL SimpleName: buffer", "DEL DoStatement", "DEL BooleanLiteral: true", "DEL InfixExpression: -", "DEL TextElement:  instead of ", "DEL Javadoc", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL PrefixExpression: ++", "DEL TagElement: @code", "DEL TextElement:  1.6", "DEL SimpleName: valueLength", "DEL TextElement: end delimiters of objects and arrays. The tokens are traversed in", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL SimpleName: getLineNumber", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL CharacterLiteral: 'l'", "DEL SimpleName: nextLiteral", "DEL SimpleName: stack", "DEL MethodInvocation", "DEL ReturnStatement", "DEL CharacterLiteral: '-'", "DEL QualifiedName: JsonToken.BOOLEAN", "DEL InfixExpression: <", "DEL SimpleName: getColumnNumber", "DEL SimpleName: p", "DEL MethodRef", "DEL SimpleName: token", "DEL SimpleName: p", "DEL MethodInvocation", "DEL TextElement: return new User(username, followersCount);", "DEL QualifiedName: JsonToken.STRING", "DEL TextElement:  value of the next token,", "DEL CharacterLiteral: 'e'", "DEL SimpleName: buffer", "DEL SimpleName: firstToken", "DEL TagElement: @link", "DEL SimpleName: findNonLiteralCharacter", "DEL SimpleName: p", "DEL MethodInvocation", "DEL Modifier: private", "DEL TextElement: each stream must contain exactly one top-level value.", "DEL SimpleName: token", "DEL SimpleType: JsonToken", "DEL SimpleName: IOException", "DEL SimpleName: valueLength", "DEL ReturnStatement", "DEL NumberLiteral: 4", "DEL InfixExpression: +", "DEL IfStatement", "DEL StringLiteral: \"Expected ':'\"", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL Assignment: -=", "DEL PostfixExpression: ++", "DEL SimpleName: getLineNumber", "DEL SimpleName: push", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: asDouble", "DEL ExpressionStatement", "DEL TextElement: <li>Streams that start with the <a href=\"#nonexecuteprefix\">non-execute", "DEL Assignment: =", "DEL TextElement:  limit - pos >= minimum", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleType: JsonTreeReader", "DEL TagElement: @code", "DEL SimpleName: buffer", "DEL SwitchCase", "DEL SimpleType: NumberFormatException", "DEL TextElement: .", "DEL SimpleName: c", "DEL Assignment: =", "DEL SimpleName: bufferStartColumn", "DEL SimpleName: token", "DEL CharacterLiteral: '#'", "DEL SimpleType: String", "DEL MethodInvocation", "DEL StringLiteral: \" at line \"", "DEL SwitchCase", "DEL Block", "DEL SimpleName: skipping", "DEL VariableDeclarationStatement", "DEL StringLiteral: \" column \"", "DEL SimpleName: EMPTY_OBJECT", "DEL TagElement: @throws", "DEL InfixExpression: &&", "DEL PostfixExpression: --", "DEL IfStatement", "DEL TextElement:  nextToken", "DEL TextElement: Returns true if this parser is liberal in what it accepts.", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: JsonToken", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: limit", "DEL SimpleName: token", "DEL TagElement: @link", "DEL CharacterLiteral: '1'", "DEL ArrayAccess", "DEL SimpleName: String", "DEL TextElement: while loop that assigns values to local variables based on their name.", "DEL MethodDeclaration", "DEL IfStatement", "DEL TextElement: return doubles;", "DEL SimpleName: newTop", "DEL StringLiteral: \"0\"", "DEL ExpressionStatement", "DEL TextElement: .", "DEL TagElement", "DEL SimpleName: expect", "DEL SimpleName: start", "DEL SimpleName: p", "DEL PostfixExpression: ++", "DEL PrimitiveType: void", "DEL SimpleName: c", "DEL SimpleName: i", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: StringPool", "DEL InfixExpression: ==", "DEL SimpleName: pos", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL SimpleName: JsonToken", "DEL SimpleName: pos", "DEL Assignment: =", "DEL SimpleName: i", "DEL TextElement: immediately follow a backslash. The backslash '\\' should have already", "DEL InfixExpression: ==", "DEL SimpleName: pos", "DEL ReturnStatement", "DEL SimpleName: skipTo", "DEL SimpleName: minimum", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL ThrowStatement", "DEL SimpleName: pos", "DEL SimpleName: chars", "DEL ExpressionStatement", "DEL CharacterLiteral: '9'", "DEL TextElement: non-execute prefix when ", "DEL SimpleName: token", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL ArrayType: int[]", "DEL Block", "DEL SimpleName: l", "DEL SimpleName: l", "DEL Assignment: +=", "DEL SimpleName: valuePos", "DEL TagElement", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleName: EMPTY_OBJECT", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: token", "DEL SimpleName: token", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL TextElement:  true for this method to only set the valuePos", "DEL TagElement: @link", "DEL TagElement: @code", "DEL VariableDeclarationStatement", "DEL SimpleName: l", "DEL MethodInvocation", "DEL SimpleName: nextNonWhitespace", "DEL InfixExpression: +", "DEL Assignment: =", "DEL MethodInvocation", "DEL ArrayAccess", "DEL SimpleName: builder", "DEL SimpleName: nextInt", "DEL PrimitiveType: boolean", "DEL QualifiedName: NON_EXECUTE_PREFIX.length", "DEL PostfixExpression: ++", "DEL ContinueStatement", "DEL InfixExpression: !=", "DEL SimpleName: System", "DEL TextElement: been read. This supports both unicode escapes \"u000A\" and two-character", "DEL ReturnStatement", "DEL SimpleName: fillBuffer", "DEL InfixExpression: +", "DEL SimpleName: nextBoolean", "DEL SimpleType: IllegalStateException", "DEL SimpleName: getColumnNumber", "DEL TextElement: <ul>", "DEL CharacterLiteral: '}'", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL SimpleName: bufferStartColumn", "DEL TagElement: @throws", "DEL ExpressionStatement", "DEL SimpleName: charsLoaded", "DEL MethodRef", "DEL SimpleName: p", "DEL Modifier: private", "DEL InfixExpression: ||", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: newStack", "DEL MethodInvocation", "DEL SimpleName: toFind", "DEL TextElement: in JSON.", "DEL ForStatement", "DEL CharacterLiteral: '\\t'", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: IOException", "DEL SimpleName: bufferStartLine", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL QualifiedName: reader.token", "DEL CharacterLiteral: 'A'", "DEL SimpleName: IOException", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL MemberRef", "DEL NumberLiteral: 4", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SimpleName: NONEMPTY_DOCUMENT", "DEL InfixExpression: !=", "DEL SimpleName: checkLenient", "DEL TextElement: <h3>Parsing JSON</h3>", "DEL IfStatement", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: promoteNameToValue", "DEL SimpleName: StringBuilder", "DEL SimpleName: i", "DEL TagElement", "DEL SimpleName: toString", "DEL CharacterLiteral: 'R'", "DEL Block", "DEL InfixExpression: ==", "DEL InfixExpression: >=", "DEL SimpleName: in", "DEL TextElement: if (name.equals(\"id\")) ", "DEL VariableDeclarationExpression", "DEL InfixExpression: &&", "DEL InfixExpression: ||", "DEL ArrayType: char[]", "DEL SingleVariableDeclaration", "DEL SwitchCase", "DEL SimpleName: hasNext", "DEL CharacterLiteral: '0'", "DEL NumberLiteral: 2", "DEL SimpleName: IOException", "DEL TextElement: } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) ", "DEL BooleanLiteral: true", "DEL SimpleName: result", "DEL SimpleName: stackSize", "DEL ThrowStatement", "DEL SwitchCase", "DEL SimpleName: endObject", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: p", "DEL SimpleName: i", "DEL SimpleName: peek", "DEL StringLiteral: \" at line \"", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL TextElement: Creates a new instance that reads a JSON-encoded stream from ", "DEL TagElement", "DEL SimpleName: getLineNumber", "DEL InfixExpression: ||", "DEL SimpleName: peek", "DEL SimpleName: JsonToken", "DEL VariableDeclarationStatement", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL SimpleName: total", "DEL SimpleName: buffer", "DEL TextElement: .", "DEL SwitchCase", "DEL PrimitiveType: void", "DEL ArrayAccess", "DEL SimpleName: buffer", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: buffer", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL SimpleName: advance", "DEL SimpleName: IOException", "DEL SimpleName: builder", "DEL IfStatement", "DEL TagElement: @code", "DEL Block", "DEL SimpleName: c", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: result", "DEL TextElement:  lenient parsing", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL Block", "DEL CharacterLiteral: ']'", "DEL Block", "DEL ArrayAccess", "DEL Modifier: private", "DEL CharacterLiteral: '/'", "DEL CharacterLiteral: '\\b'", "DEL Javadoc", "DEL IfStatement", "DEL SwitchCase", "DEL SimpleName: IOException", "DEL InfixExpression: -", "DEL InfixExpression: >=", "DEL TextElement: while (reader.hasNext()) ", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL TextElement:  cannot be represented exactly on that platform. To minimize", "DEL SimpleName: skipping", "DEL ForStatement", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: quote", "DEL SingleVariableDeclaration", "DEL SimpleName: toCharArray", "DEL Block", "DEL SimpleName: pos", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL CharacterLiteral: '0'", "DEL TextElement: Consumes the next token from the JSON stream and asserts that it is the", "DEL TextElement: was the omitted value.", "DEL SimpleName: in", "DEL SimpleName: ignored", "DEL SimpleName: peek", "DEL SimpleType: IOException", "DEL ThrowStatement", "DEL SimpleName: System", "DEL ArrayAccess", "DEL ArrayAccess", "DEL VariableDeclarationStatement", "DEL SimpleName: buffer", "DEL ArrayAccess", "DEL StringLiteral: \"fallthrough\"", "DEL TextElement: long id = -1;", "DEL Modifier: public", "DEL SimpleName: IllegalStateException", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL SimpleName: peek", "DEL IfStatement", "DEL TextElement: . If null, peek() will assign a value.", "DEL InfixExpression: !=", "DEL SimpleName: syntaxError", "DEL SimpleName: getColumnNumber", "DEL PrimitiveType: void", "DEL TextElement: Throws a new IO exception with the given message and a context snippet", "DEL SimpleName: p", "DEL SimpleName: Double", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL ArrayAccess", "DEL SimpleName: FALSE", "DEL SimpleName: c", "DEL CharacterLiteral: ' '", "DEL SimpleName: result", "DEL SimpleName: stack", "DEL Javadoc", "DEL ExpressionStatement", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL ArrayType: int[]", "DEL TagElement", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: expected", "DEL Block", "DEL ContinueStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SwitchCase", "DEL InfixExpression: &&", "DEL Modifier: final", "DEL TagElement: @link", "DEL SimpleName: escaped", "DEL SimpleName: JsonToken", "DEL SimpleName: StringPool", "DEL CharacterLiteral: 'l'", "DEL SwitchCase", "DEL StringLiteral: \" at line \"", "DEL SimpleName: c", "DEL TextElement: [", "DEL SimpleName: consumeNonExecutePrefix", "DEL TextElement:  and ", "DEL ArrayAccess", "DEL PostfixExpression: ++", "DEL TagElement", "DEL SimpleName: JsonToken", "DEL VariableDeclarationStatement", "DEL Block", "DEL PostfixExpression: ++", "DEL InfixExpression: &&", "DEL Block", "DEL CharacterLiteral: 'F'", "DEL TextElement:  value of the next token,", "DEL SimpleName: MalformedJsonException", "DEL TextElement: \"user\": ", "DEL TextElement:  to recursively", "DEL TextElement: finally ", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL TextElement:  is false. Finally,", "DEL SimpleName: c", "DEL SimpleType: String", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SimpleName: Reader", "DEL SimpleType: String", "DEL CharacterLiteral: ':'", "DEL NumberLiteral: 1", "DEL QualifiedName: JsonToken.END_ARRAY", "DEL SimpleName: stack", "DEL TextElement:  =", "DEL Block", "DEL SimpleName: objectValue", "DEL SimpleName: start", "DEL SimpleType: IllegalStateException", "DEL VariableDeclarationFragment", "DEL TextElement: with this reader's content.", "DEL SimpleType: JsonToken", "DEL SimpleName: quote", "DEL SimpleType: IOException", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL Block", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: StringBuilder", "DEL NumberLiteral: 5", "DEL Modifier: private", "DEL SimpleName: JsonToken", "DEL TextElement: }", "DEL SimpleName: beginObject", "DEL SimpleName: value", "DEL NumberLiteral: 1", "DEL SimpleName: nextString", "DEL TextElement: \"id\": 912345678902,", "DEL TextElement: enabled.", "DEL QualifiedName: reader.name", "DEL TextElement: not include it in the returned string.", "DEL Javadoc", "DEL CharacterLiteral: 'A'", "DEL SimpleName: quote", "DEL NumberLiteral: 4", "DEL TextElement:  nextValue", "DEL Block", "DEL TextElement:  property name", "DEL CharacterLiteral: '\\''", "DEL InfixExpression: -", "DEL TextElement: List<Double> doubles = new ArrayList<Double>();", "DEL Block", "DEL SimpleName: total", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL TextElement: false.", "DEL TextElement: consuming it. If the next token is a number, this method will return its", "DEL TagElement: @throws", "DEL TextElement: encoded value as a stream of tokens. This stream includes both literal", "DEL TextElement: ]}</pre>", "DEL SimpleName: valueLength", "DEL SimpleName: MalformedJsonException", "DEL ExpressionStatement", "DEL Modifier: public", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: stackSize", "DEL CatchClause", "DEL BooleanLiteral: false", "DEL Modifier: private", "DEL TagElement: @code", "DEL InfixExpression: ==", "DEL SimpleName: pos", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: bufferStartColumn", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL ArrayAccess", "DEL SimpleType: IOException", "DEL InfixExpression: <", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL CharacterLiteral: ' '", "DEL Javadoc", "DEL SimpleName: buffer", "DEL TextElement: Returns the ", "DEL SimpleName: i", "DEL ReturnStatement", "DEL TagElement: @code", "DEL SimpleType: IOException", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleName: getColumnNumber", "DEL SimpleType: IOException", "DEL TextElement: Returns the type of the next token without consuming it.", "DEL TextElement: return readMessagesArray(reader);", "DEL CharacterLiteral: '\\n'", "DEL MethodInvocation", "DEL SimpleName: buffer", "DEL InfixExpression: <=", "DEL NumberLiteral: 3", "DEL InfixExpression: !=", "DEL SimpleName: limit", "DEL PrefixExpression: -", "DEL TextElement: reader.close();", "DEL TagElement: @link", "DEL BooleanLiteral: false", "DEL TextElement:  ;", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ForStatement", "DEL SimpleName: c", "DEL CharacterLiteral: '\\r'", "DEL Modifier: public", "DEL SimpleName: valuePos", "DEL MemberRef", "DEL SimpleName: checkLenient", "DEL InfixExpression: &&", "DEL PostfixExpression: --", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\\\'", "DEL TextElement: depth-first order, the same order that they appear in the JSON document.", "DEL TextElement:  and ending with", "DEL Modifier: private", "DEL SimpleName: token", "DEL SimpleName: result", "DEL TryStatement", "DEL MethodInvocation", "DEL QualifiedName: reader.value", "DEL SimpleName: l", "DEL PrimitiveType: int", "DEL SimpleName: valueLength", "DEL Assignment: =", "DEL SimpleName: JsonToken", "DEL Block", "DEL Block", "DEL SimpleName: value", "DEL Assignment: =", "DEL SimpleName: asDouble", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: firstElement", "DEL SimpleName: valuePos", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: valuePos", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SwitchStatement", "DEL SimpleName: newStack", "DEL SwitchStatement", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL SimpleName: skipValue", "DEL StringLiteral: \" at line \"", "DEL CharacterLiteral: '='", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: getColumnNumber", "DEL TextElement: , this method throws.", "DEL SimpleName: valuePos", "DEL SimpleName: pos", "DEL SimpleName: nextLiteral", "DEL MethodInvocation", "DEL TextElement: . Such comments may not be nested.", "DEL SimpleName: EOFException", "DEL PrimitiveType: int", "DEL SimpleName: peek", "DEL SimpleName: c", "DEL StringLiteral: \"Expected a long but was \"", "DEL PostfixExpression: ++", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: asDouble", "DEL VariableDeclarationFragment", "DEL StringLiteral: \" column \"", "DEL ExpressionStatement", "DEL TagElement: @throws", "DEL ExpressionStatement", "DEL SimpleName: token", "DEL TextElement: JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));", "DEL TextElement: <li>C-style comments starting with ", "DEL TextElement: Advances the cursor in the JSON stream to the next token.", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: valuePos", "DEL InfixExpression: +", "DEL SimpleName: token", "DEL StringLiteral: \"End of input\"", "DEL SimpleName: MalformedJsonException", "DEL TextElement: consuming it. If the next token is a string, this method will attempt to", "DEL SimpleName: expected", "DEL SimpleName: limit", "DEL SwitchCase", "DEL Block", "DEL SimpleType: IOException", "DEL BreakStatement", "DEL SimpleType: Reader", "DEL ArrayAccess", "DEL SimpleName: token", "DEL VariableDeclarationStatement", "DEL SimpleType: IOException", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: JsonToken", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL BreakStatement", "DEL MethodInvocation", "DEL SimpleName: getLineNumber", "DEL SimpleName: getLineNumber", "DEL SimpleName: IOException", "DEL SimpleName: nextString", "DEL TextElement: text = reader.nextString();", "DEL TextElement: [1, \"1\"]", "DEL Assignment: =", "DEL StringLiteral: \"JSON forbids octal prefixes: \"", "DEL SimpleName: readEscapeCharacter", "DEL NumberLiteral: 0", "DEL SimpleName: bufferStartColumn", "DEL Javadoc", "DEL QualifiedName: JsonToken.NULL", "DEL Javadoc", "DEL Block", "DEL SimpleName: token", "DEL InfixExpression: ==", "DEL TextElement: The only non-execute prefix this parser permits ", "DEL NumberLiteral: 1", "DEL SimpleName: pos", "DEL Block", "DEL TextElement: name.", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: <=", "DEL SimpleName: toFind", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL ClassInstanceCreation", "DEL SimpleName: stackSize", "DEL VariableDeclarationStatement", "DEL QualifiedName: JsonToken.STRING", "DEL ArrayAccess", "DEL TextElement: represented by a Java ", "DEL SimpleName: stackSize", "DEL SimpleName: c", "DEL SimpleName: IOException", "DEL InfixExpression: +", "DEL SimpleName: nextValue", "DEL StringLiteral: \"Expected an int but was \"", "DEL TextElement: Consumes the next token from the JSON stream and asserts that it is the", "DEL InfixExpression: !=", "DEL CharacterLiteral: 'E'", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: result", "DEL SimpleName: c", "DEL PostfixExpression: ++", "DEL InfixExpression: &&", "DEL ArrayAccess", "DEL SimpleName: buffer", "DEL TextElement: exception. Lenient parsers should call ", "DEL Assignment: +=", "DEL Modifier: private", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL ArrayType: int[]", "DEL TextElement: Advances the position until after the next newline character. If the line", "DEL Modifier: public", "DEL Block", "DEL Javadoc", "DEL ThrowStatement", "DEL Assignment: =", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: NUMBER", "DEL SimpleName: valuePos", "DEL NumberLiteral: 2", "DEL SimpleName: nextName", "DEL ThrowStatement", "DEL SimpleName: nextNonWhitespace", "DEL SimpleName: skipTo", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: checkLenient", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: IOException", "DEL Modifier: private", "DEL TagElement", "DEL Assignment: =", "DEL TextElement: zeroes are not allowed in the value or exponential part, but are allowed", "DEL StringLiteral: \"true\"", "DEL QualifiedName: JsonToken.NULL", "DEL TagElement: @link", "DEL TextElement: Reads the value up to but not including any delimiter characters. This", "DEL MethodInvocation", "DEL Modifier: private", "DEL Modifier: static", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL FieldDeclaration", "DEL SimpleName: pos", "DEL TextElement: represented by a Java ", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL TextElement: reader.endObject();", "DEL Javadoc", "DEL SimpleName: getColumnNumber", "DEL MethodDeclaration", "DEL Block", "DEL TagElement", "DEL SimpleName: getColumnNumber", "DEL SimpleType: AssertionError", "DEL QualifiedName: JsonToken.BEGIN_ARRAY", "DEL InfixExpression: ==", "DEL PostfixExpression: --", "DEL SimpleName: DANGLING_NAME", "DEL VariableDeclarationFragment", "DEL SimpleName: advance", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL InfixExpression: >=", "DEL ExpressionStatement", "DEL CharacterLiteral: '*'", "DEL Modifier: private", "DEL Initializer", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL InfixExpression: ||", "DEL Block", "DEL FieldAccess", "DEL SimpleName: buffer", "DEL TagElement: @code", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: asDouble", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: peek", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: syntaxError", "DEL Block", "DEL SimpleName: NAME", "DEL InfixExpression: <=", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL TextElement: string form.", "DEL PrimitiveType: double", "DEL Modifier: final", "DEL ArrayAccess", "DEL TagElement", "DEL Modifier: private", "DEL NullLiteral", "DEL QualifiedName: JsonToken.STRING", "DEL MethodInvocation", "DEL SimpleName: nextInArray", "DEL MemberRef", "DEL InfixExpression: &&", "DEL ParenthesizedExpression", "DEL CharacterLiteral: '\\n'", "DEL PrimitiveType: boolean", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleName: IllegalStateException", "DEL CharacterLiteral: 'a'", "DEL Modifier: static", "DEL SimpleName: advance", "DEL SimpleName: push", "DEL SimpleName: buffer", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SwitchCase", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: c", "DEL SimpleName: TRUE", "DEL QualifiedName: JsonToken.BEGIN_ARRAY", "DEL NumberLiteral: 1", "DEL SimpleName: count", "DEL TagElement", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL SimpleName: start", "DEL Block", "DEL CastExpression", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL TagElement", "DEL SimpleName: decodeNumber", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TextElement: elements are skipped. This method is intended for use when the JSON token", "DEL ExpressionStatement", "DEL InfixExpression: -", "DEL PrimitiveType: int", "DEL InfixExpression: <=", "DEL StringLiteral: \" \"", "DEL SimpleName: valuePos", "DEL NumberLiteral: 4", "DEL WhileStatement", "DEL SimpleName: result", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: fillBuffer", "DEL TextElement: part of a comment. When this returns, the returned character is always at", "DEL TextElement: username = reader.nextString();", "DEL SimpleName: toFind", "DEL CharacterLiteral: '}'", "DEL Assignment: =", "DEL SimpleName: valuePos", "DEL PrimitiveType: char", "DEL SimpleName: limit", "DEL SimpleName: newStack", "DEL SimpleName: append", "DEL NumberLiteral: 1", "DEL PrefixExpression: !", "DEL ArrayAccess", "DEL TextElement:  pos", "DEL SimpleName: builder", "DEL SimpleName: pos", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: skipToEndOfLine", "DEL Modifier: public", "DEL InfixExpression: ==", "DEL QualifiedName: JsonToken.END_ARRAY", "DEL ExpressionStatement", "DEL StringLiteral: \" at line \"", "DEL SwitchCase", "DEL SimpleName: buffer", "DEL QualifiedName: reader.name", "DEL Dimension", "DEL TextElement: end of the current object.", "DEL TagElement: @throws", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL PrefixExpression: !", "DEL NumberLiteral: 0", "DEL QualifiedName: JsonToken.BOOLEAN", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL TextElement: if (name.equals(\"name\")) ", "DEL TextElement: this reader is closed.", "DEL SimpleName: offset", "DEL TagElement", "DEL StringLiteral: \" column \"", "DEL BooleanLiteral: false", "DEL MethodDeclaration", "DEL TextElement: as a number, or exactly represented as a long.", "DEL SimpleName: MalformedJsonException", "DEL InfixExpression: +", "DEL InfixExpression: -", "DEL Modifier: private", "DEL PrimitiveType: double", "DEL SimpleName: c", "DEL SimpleName: stringPool", "DEL SimpleName: chars", "DEL Assignment: =", "DEL Modifier: public", "DEL CharacterLiteral: '\\n'", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TextElement: returned character by decrementing ", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL InfixExpression: <", "DEL TextElement: <li>End of line comments starting with ", "DEL SimpleName: toFind", "DEL TextElement: as a number, or exactly represented as an int.", "DEL NumberLiteral: 1", "DEL SwitchCase", "DEL SimpleName: pos", "DEL TagElement: @link", "DEL VariableDeclarationStatement", "DEL CharacterLiteral: ';'", "DEL Javadoc", "DEL PrimitiveType: int", "DEL ThrowStatement", "DEL SimpleName: token", "DEL CharacterLiteral: '9'", "DEL Assignment: =", "DEL CharacterLiteral: 'e'", "DEL InfixExpression: !=", "DEL InfixExpression: !=", "DEL SwitchCase", "DEL MethodInvocation", "DEL BreakStatement", "DEL ArrayAccess", "DEL StringLiteral: \"JSON forbids octal prefixes: \"", "DEL SimpleName: JsonToken", "DEL NumberLiteral: 1", "DEL SwitchCase", "DEL SimpleName: advance", "DEL IfStatement", "DEL SimpleName: expect", "DEL SimpleName: l", "DEL SimpleName: lenient", "DEL SimpleName: startsWith", "DEL SimpleName: bufferStartLine", "DEL SimpleName: isNaN", "DEL ForStatement", "DEL InfixExpression: ==", "DEL TextElement: }", "DEL InfixExpression: ||", "DEL Block", "DEL TagElement: @throws", "DEL SwitchCase", "DEL SimpleName: advance", "DEL IfStatement", "DEL TextElement: id = reader.nextLong();", "DEL TextElement: consumes it.", "DEL SimpleName: Double", "DEL BooleanLiteral: true", "DEL Assignment: =", "DEL SimpleName: getColumnNumber", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SwitchCase", "DEL StringLiteral: \" column \"", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Javadoc", "DEL Block", "DEL TextElement: \"text\": \"@json_newb just use JsonReader!\",", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL PrimitiveType: int", "DEL SimpleType: NullPointerException", "DEL SwitchCase", "DEL IfStatement", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: token", "DEL InfixExpression: ==", "DEL TextElement: public List<Message> readMessagesArray(JsonReader reader) throws IOException ", "DEL InfixExpression: ||", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: Override", "DEL SimpleName: Reader", "DEL InfixExpression: +", "DEL TextElement: \"id\": 912345678901,", "DEL SimpleName: assignOffsetsOnly", "DEL SimpleName: chars", "DEL PrefixExpression: !", "DEL SimpleType: String", "DEL NumberLiteral: 3", "DEL PrimitiveType: int", "DEL SimpleName: NumberFormatException", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SimpleName: pos", "DEL Modifier: private", "DEL ExpressionStatement", "DEL Block", "DEL TagElement", "DEL StringLiteral: \" column \"", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL PostfixExpression: ++", "DEL SimpleName: IllegalStateException", "DEL SimpleName: pos", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL CharacterLiteral: '\\r'", "DEL TextElement: while (reader.hasNext()) ", "DEL ExpressionStatement", "DEL TextElement:  and", "DEL TextElement:  buffer[pos-1]", "DEL PrefixExpression: ++", "DEL TextElement: reader.beginArray();", "DEL TextElement: JSON, strict parsing fails when it is encountered. This class permits the", "DEL InfixExpression: ||", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL TextElement:  or ", "DEL SimpleName: c", "DEL SimpleName: nextNonWhitespace", "DEL NullLiteral", "DEL MemberRef", "DEL SimpleName: limit", "DEL SimpleName: IOException", "DEL Assignment: =", "DEL SimpleName: p", "DEL TextElement:  int", "DEL ExpressionStatement", "DEL QualifiedName: JsonToken.NUMBER", "DEL InfixExpression: >=", "DEL Block", "DEL SimpleName: toString", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL SimpleName: chars", "DEL Dimension", "DEL SwitchStatement", "DEL Assignment: +=", "DEL SwitchCase", "DEL LabeledStatement", "DEL Assignment: =", "DEL Block", "DEL TagElement: @code", "DEL FieldDeclaration", "DEL IfStatement", "DEL InfixExpression: !=", "DEL TagElement: @code", "DEL NumberLiteral: 2", "DEL SimpleName: start", "DEL SimpleName: getLineNumber", "DEL SingleMemberAnnotation", "DEL InfixExpression: &&", "DEL IfStatement", "DEL Block", "DEL SimpleName: read", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL MethodInvocation", "DEL TextElement: } else if (name.equals(\"text\")) ", "DEL SimpleName: result", "DEL ArrayAccess", "DEL IfStatement", "DEL ArrayAccess", "DEL Assignment: =", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL Javadoc", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleType: JsonToken", "DEL StringLiteral: \"fallthrough\"", "DEL TextElement: .", "DEL SimpleName: quote", "DEL SimpleType: IOException", "DEL PrimitiveType: int", "DEL SimpleName: buffer", "DEL SimpleName: i", "DEL CharacterLiteral: 'U'", "DEL Modifier: private", "DEL SimpleName: EMPTY_ARRAY", "DEL SimpleType: JsonToken", "DEL PrimitiveType: int", "DEL SimpleName: throwOnEof", "DEL TagElement", "DEL SwitchCase", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL InfixExpression: &&", "DEL PrimitiveType: boolean", "DEL InfixExpression: +", "DEL IfStatement", "DEL SimpleName: p", "DEL SimpleType: JsonToken", "DEL Block", "DEL SimpleName: NONEMPTY_ARRAY", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement: public List<Message> readJsonStream(InputStream in) throws IOException ", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL Assignment: =", "DEL IfStatement", "DEL PostfixExpression: ++", "DEL SimpleName: result", "DEL SimpleName: parseInt", "DEL ThisExpression", "DEL ExpressionStatement", "DEL CharacterLiteral: ';'", "DEL CharacterLiteral: 't'", "DEL SimpleName: pos", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL InfixExpression: >=", "DEL SimpleName: peek", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\n'", "DEL TagElement: @param", "DEL InfixExpression: ==", "DEL SimpleName: c", "DEL SimpleName: getColumnNumber", "DEL SimpleName: IOException", "DEL SimpleName: JsonToken", "DEL SimpleName: pos", "DEL Block", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL SimpleName: pos", "DEL TextElement: True if we're currently handling a skipValue() call. ", "DEL SimpleName: builder", "DEL CharacterLiteral: 'u'", "DEL QualifiedName: JsonReaderInternalAccess.INSTANCE", "DEL CharacterLiteral: '\\t'", "DEL Block", "DEL SimpleName: IllegalStateException", "DEL InfixExpression: ==", "DEL TextElement: String name = reader.nextName();", "DEL Assignment: =", "DEL TagElement: @code", "DEL SimpleName: firstElement", "DEL SimpleName: end", "DEL Assignment: +=", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL SimpleName: limit", "DEL SimpleName: decodeLiteral", "DEL Block", "DEL SimpleName: reader", "DEL SimpleName: IllegalStateException", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: JsonToken", "DEL SimpleName: getClass", "DEL Block", "DEL MethodInvocation", "DEL TextElement: \"user\": ", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: pos", "DEL SimpleName: append", "DEL BooleanLiteral: true", "DEL SimpleType: MalformedJsonException", "DEL ExpressionStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL SimpleName: p", "DEL ThrowStatement", "DEL PrimitiveType: void", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: pos", "DEL Block", "DEL SwitchCase", "DEL MethodInvocation", "DEL SwitchStatement", "DEL Modifier: public", "DEL SimpleName: c", "DEL TextElement: } else ", "DEL SimpleName: parseDouble", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: p", "DEL Block", "DEL NumberLiteral: 1", "DEL CharacterLiteral: 'S'", "DEL ExpressionStatement", "DEL SimpleName: syntaxError", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: quote", "DEL ParenthesizedExpression", "DEL ArrayAccess", "DEL InfixExpression: ||", "DEL SimpleName: skipToEndOfLine", "DEL ThrowStatement", "DEL SimpleName: JsonToken", "DEL QualifiedName: JsonToken.BEGIN_ARRAY", "DEL SimpleName: c", "DEL SimpleName: i", "DEL QualifiedName: JsonToken.END_DOCUMENT", "DEL TextElement: <li>Within <strong>object handling</strong> methods, first call ", "DEL MethodInvocation", "DEL SimpleName: buffer", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SwitchCase", "DEL Assignment: =", "DEL SimpleName: buffer", "DEL InfixExpression: >=", "DEL CharacterLiteral: ']'", "DEL PrimitiveType: char", "DEL CharacterLiteral: '0'", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL SimpleName: charAt", "DEL Block", "DEL SimpleName: stackSize", "DEL PrimitiveType: int", "DEL SimpleName: advance", "DEL SimpleName: Double", "DEL SimpleName: builder", "DEL NullLiteral", "DEL Modifier: private", "DEL QualifiedName: stack.length", "DEL MethodInvocation", "DEL InfixExpression: *", "DEL IfStatement", "DEL InfixExpression: -", "DEL TextElement: try ", "DEL MethodDeclaration", "DEL ParenthesizedExpression", "DEL Block", "DEL PostfixExpression: --", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL SimpleName: syntaxError", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL NullLiteral", "DEL InfixExpression: +", "DEL InfixExpression: <=", "DEL SimpleName: c", "DEL TextElement: This behavior is intended to prevent lossy numeric conversions: double is", "DEL SimpleName: builder", "DEL InfixExpression: >=", "DEL SimpleName: push", "DEL Assignment: =", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL SimpleName: NumberFormatException", "DEL Javadoc", "DEL SimpleName: pos", "DEL SimpleName: p", "DEL SimpleName: stringPool", "DEL TextElement: }", "DEL SimpleName: limit", "DEL InfixExpression: ||", "DEL SimpleName: IOException", "DEL SwitchCase", "DEL SimpleName: get", "DEL QualifiedName: JsonToken.BEGIN_OBJECT", "DEL SimpleName: toString", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: IllegalStateException", "DEL SimpleName: buffer"]}]}}, {"JsonReader_diff": {"operations": ["Delete QualifiedName: com.google.gson.stream(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.gson.internal.JsonReaderInternalAccess(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.gson.internal.bind.JsonTreeReader(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.Closeable(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.EOFException(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.io.IOException(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.io.Reader(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.gson.stream.JsonScope.CLOSED(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.gson.stream.JsonScope.DANGLING_NAME(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.gson.stream.JsonScope.EMPTY_ARRAY(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.gson.stream.JsonScope.EMPTY_DOCUMENT(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.gson.stream.JsonScope.EMPTY_OBJECT(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.gson.stream.JsonScope.NONEMPTY_ARRAY(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.gson.stream.JsonScope.NONEMPTY_OBJECT(28)", "Delete ImportDeclaration(29)", "Delete TextElement: Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)(30)", "Delete TextElement: encoded value as a stream of tokens. This stream includes both literal(31)", "Delete TextElement: values (strings, numbers, booleans, and nulls) as well as the begin and(32)", "Delete TextElement: end delimiters of objects and arrays. The tokens are traversed in(33)", "Delete TextElement: depth-first order, the same order that they appear in the JSON document.(34)", "Delete TextElement: Within JSON objects, name/value pairs are represented by a single token.(35)", "Delete TextElement: <h3>Parsing JSON</h3>(36)", "Delete TextElement: To create a recursive descent parser for your own JSON streams, first create(37)", "Delete TextElement: an entry point method that creates a (38)", "Delete TextElement:  JsonReader(39)", "Delete TagElement: @code(40)", "Delete TextElement: .(41)", "Delete TextElement: <p>Next, create handler methods for each structure in your JSON text. You'll(42)", "Delete TextElement: need a method for each object type and for each array type.(43)", "Delete TextElement: <ul>(44)", "Delete TextElement: <li>Within <strong>array handling</strong> methods, first call (45)", "Delete SimpleName: beginArray(46)", "Delete MemberRef(47)", "Delete TagElement: @link(48)", "Delete TextElement:  to consume the array's opening bracket. Then create a(49)", "Delete TextElement: while loop that accumulates values, terminating when (50)", "Delete SimpleName: hasNext(51)", "Delete MemberRef(52)", "Delete TagElement: @link(53)", "Delete TextElement: is false. Finally, read the array's closing bracket by calling (54)", "Delete SimpleName: endArray(55)", "Delete MemberRef(56)", "Delete TagElement: @link(57)", "Delete TextElement: .(58)", "Delete TextElement: <li>Within <strong>object handling</strong> methods, first call (59)", "Delete SimpleName: beginObject(60)", "Delete MemberRef(61)", "Delete TagElement: @link(62)", "Delete TextElement:  to consume the object's opening brace. Then create a(63)", "Delete TextElement: while loop that assigns values to local variables based on their name.(64)", "Delete TextElement: This loop should terminate when (65)", "Delete SimpleName: hasNext(66)", "Delete MemberRef(67)", "Delete TagElement: @link(68)", "Delete TextElement:  is false. Finally,(69)", "Delete TextElement: read the object's closing brace by calling (70)", "Delete SimpleName: endObject(71)", "Delete MemberRef(72)", "Delete TagElement: @link(73)", "Delete TextElement: .(74)", "Delete TextElement: </ul>(75)", "Delete TextElement: <p>When a nested object or array is encountered, delegate to the(76)", "Delete TextElement: corresponding handler method.(77)", "Delete TextElement: <p>When an unknown name is encountered, strict parsers should fail with an(78)", "Delete TextElement: exception. Lenient parsers should call (79)", "Delete SimpleName: skipValue(80)", "Delete MethodRef(81)", "Delete TagElement: @link(82)", "Delete TextElement:  to recursively(83)", "Delete TextElement: skip the value's nested tokens, which may otherwise conflict.(84)", "Delete TextElement: <p>If a value may be null, you should first check using (85)", "Delete SimpleName: peek(86)", "Delete MethodRef(87)", "Delete TagElement: @link(88)", "Delete TextElement: .(89)", "Delete TextElement: Null literals can be consumed using either (90)", "Delete SimpleName: nextNull(91)", "Delete MethodRef(92)", "Delete TagElement: @link(93)", "Delete TextElement:  or (94)", "Delete SimpleName: skipValue(95)", "Delete MethodRef(96)", "Delete TagElement: @link(97)", "Delete TextElement: .(98)", "Delete TextElement: <h3>Example</h3>(99)", "Delete TextElement: Suppose we'd like to parse a stream of messages such as the following: <pre> (100)", "Delete TextElement: [(101)", "Delete TextElement: \"id\": 912345678901,(102)", "Delete TextElement: \"text\": \"How do I read a JSON stream in Java?\",(103)", "Delete TextElement: \"geo\": null,(104)", "Delete TextElement: \"user\": (105)", "Delete TextElement: \"name\": \"json_newb\",(106)", "Delete TextElement: \"followers_count\": 41(107)", "Delete TagElement: @code(108)", "Delete TextElement: },(109)", "Delete TextElement: \"id\": 912345678902,(110)", "Delete TextElement: \"text\": \"@json_newb just use JsonReader!\",(111)", "Delete TextElement: \"geo\": [50.454722, -104.606667],(112)", "Delete TextElement: \"user\": (113)", "Delete TextElement: \"name\": \"jesse\",(114)", "Delete TextElement: \"followers_count\": 2(115)", "Delete TextElement: }(116)", "Delete TextElement: }(117)", "Delete TextElement: ]}</pre>(118)", "Delete TextElement: This code implements the parser for the above structure: <pre>   (119)", "Delete TextElement: public List<Message> readJsonStream(InputStream in) throws IOException (120)", "Delete TextElement: JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));(121)", "Delete TextElement: try (122)", "Delete TextElement: return readMessagesArray(reader);(123)", "Delete TagElement: @code(124)", "Delete TextElement: finally (125)", "Delete TextElement: reader.close();(126)", "Delete TextElement: }(127)", "Delete TextElement: }(128)", "Delete TextElement: public List<Message> readMessagesArray(JsonReader reader) throws IOException (129)", "Delete TextElement: List<Message> messages = new ArrayList<Message>();(130)", "Delete TextElement: reader.beginArray();(131)", "Delete TextElement: while (reader.hasNext()) (132)", "Delete TextElement: messages.add(readMessage(reader));(133)", "Delete TextElement: }(134)", "Delete TextElement: reader.endArray();(135)", "Delete TextElement: return messages;(136)", "Delete TextElement: }(137)", "Delete TextElement: public Message readMessage(JsonReader reader) throws IOException (138)", "Delete TextElement: long id = -1;(139)", "Delete TextElement: String text = null;(140)", "Delete TextElement: User user = null;(141)", "Delete TextElement: List<Double> geo = null;(142)", "Delete TextElement: reader.beginObject();(143)", "Delete TextElement: while (reader.hasNext()) (144)", "Delete TextElement: String name = reader.nextName();(145)", "Delete TextElement: if (name.equals(\"id\")) (146)", "Delete TextElement: id = reader.nextLong();(147)", "Delete TextElement: } else if (name.equals(\"text\")) (148)", "Delete TextElement: text = reader.nextString();(149)", "Delete TextElement: } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) (150)", "Delete TextElement: geo = readDoublesArray(reader);(151)", "Delete TextElement: } else if (name.equals(\"user\")) (152)", "Delete TextElement: user = readUser(reader);(153)", "Delete TextElement: } else (154)", "Delete TextElement: reader.skipValue();(155)", "Delete TextElement: }(156)", "Delete TextElement: }(157)", "Delete TextElement: reader.endObject();(158)", "Delete TextElement: return new Message(id, text, user, geo);(159)", "Delete TextElement: }(160)", "Delete TextElement: public List<Double> readDoublesArray(JsonReader reader) throws IOException (161)", "Delete TextElement: List<Double> doubles = new ArrayList<Double>();(162)", "Delete TextElement: reader.beginArray();(163)", "Delete TextElement: while (reader.hasNext()) (164)", "Delete TextElement: doubles.add(reader.nextDouble());(165)", "Delete TextElement: }(166)", "Delete TextElement: reader.endArray();(167)", "Delete TextElement: return doubles;(168)", "Delete TextElement: }(169)", "Delete TextElement: public User readUser(JsonReader reader) throws IOException (170)", "Delete TextElement: String username = null;(171)", "Delete TextElement: int followersCount = -1;(172)", "Delete TextElement: reader.beginObject();(173)", "Delete TextElement: while (reader.hasNext()) (174)", "Delete TextElement: String name = reader.nextName();(175)", "Delete TextElement: if (name.equals(\"name\")) (176)", "Delete TextElement: username = reader.nextString();(177)", "Delete TextElement: } else if (name.equals(\"followers_count\")) (178)", "Delete TextElement: followersCount = reader.nextInt();(179)", "Delete TextElement: } else (180)", "Delete TextElement: reader.skipValue();(181)", "Delete TextElement: }(182)", "Delete TextElement: }(183)", "Delete TextElement: reader.endObject();(184)", "Delete TextElement: return new User(username, followersCount);(185)", "Delete TextElement: }}</pre>(186)", "Delete TextElement: <h3>Number Handling</h3>(187)", "Delete TextElement: This reader permits numeric values to be read as strings and string values to(188)", "Delete TextElement: be read as numbers. For example, both elements of the JSON array (189)", "Delete TextElement: [1, \"1\"](190)", "Delete TagElement: @code(191)", "Delete TextElement:  may be read using either (192)", "Delete SimpleName: nextInt(193)", "Delete MemberRef(194)", "Delete TagElement: @link(195)", "Delete TextElement:  or (196)", "Delete SimpleName: nextString(197)", "Delete MemberRef(198)", "Delete TagElement: @link(199)", "Delete TextElement: .(200)", "Delete TextElement: This behavior is intended to prevent lossy numeric conversions: double is(201)", "Delete TextElement: JavaScript's only numeric type and very large values like (202)", "Delete TextElement: 9007199254740993(203)", "Delete TagElement: @code(204)", "Delete TextElement:  cannot be represented exactly on that platform. To minimize(205)", "Delete TextElement: precision loss, extremely large values should be written and read as strings(206)", "Delete TextElement: in JSON.(207)", "Delete TextElement: <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>(208)", "Delete TextElement: Web servers that serve private data using JSON may be vulnerable to <a(209)", "Delete TextElement: href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site(210)", "Delete TextElement: request forgery</a> attacks. In such an attack, a malicious site gains access(211)", "Delete TextElement: to a private JSON file by executing it with an HTML (212)", "Delete TextElement:  <script>(213)", "Delete TagElement: @code(214)", "Delete TextElement:  tag.(215)", "Delete TextElement: <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable(216)", "Delete TextElement: by (217)", "Delete TextElement:  <script>(218)", "Delete TagElement: @code(219)", "Delete TextElement:  tags, disarming the attack. Since the prefix is malformed(220)", "Delete TextElement: JSON, strict parsing fails when it is encountered. This class permits the(221)", "Delete TextElement: non-execute prefix when (222)", "Delete SimpleName: setLenient(223)", "Delete PrimitiveType: boolean(224)", "Delete MethodRefParameter(225)", "Delete MethodRef(226)", "Delete TextElement:  lenient parsing(227)", "Delete TagElement: @link(228)", "Delete TextElement:  is(229)", "Delete TextElement: enabled.(230)", "Delete TextElement: <p>Each (231)", "Delete TextElement:  JsonReader(232)", "Delete TagElement: @code(233)", "Delete TextElement:  may be used to read a single JSON stream. Instances(234)", "Delete TextElement: of this class are not thread safe.(235)", "Delete TagElement(236)", "Delete TextElement:  Jesse Wilson(237)", "Delete TagElement: @author(238)", "Delete TextElement:  1.6(239)", "Delete TagElement: @since(240)", "Delete Javadoc(241)", "Delete Modifier: public(242)", "Delete SimpleName: JsonReader(243)", "Delete SimpleName: Closeable(244)", "Delete SimpleType: Closeable(245)", "Delete TextElement: The only non-execute prefix this parser permits (246)", "Delete TagElement(247)", "Delete Javadoc(248)", "Delete Modifier: private(249)", "Delete Modifier: static(250)", "Delete Modifier: final(251)", "Delete PrimitiveType: char(252)", "Delete Dimension(253)", "Delete ArrayType: char[](254)", "Delete SimpleName: NON_EXECUTE_PREFIX(255)", "Delete StringLiteral: \")]}'\\n\"(256)", "Delete SimpleName: toCharArray(257)", "Delete MethodInvocation(258)", "Delete VariableDeclarationFragment(259)", "Delete FieldDeclaration(260)", "Delete Modifier: private(261)", "Delete Modifier: static(262)", "Delete Modifier: final(263)", "Delete SimpleName: String(264)", "Delete SimpleType: String(265)", "Delete SimpleName: TRUE(266)", "Delete StringLiteral: \"true\"(267)", "Delete VariableDeclarationFragment(268)", "Delete FieldDeclaration(269)", "Delete Modifier: private(270)", "Delete Modifier: static(271)", "Delete Modifier: final(272)", "Delete SimpleName: String(273)", "Delete SimpleType: String(274)", "Delete SimpleName: FALSE(275)", "Delete StringLiteral: \"false\"(276)", "Delete VariableDeclarationFragment(277)", "Delete FieldDeclaration(278)", "Delete Modifier: private(279)", "Delete Modifier: final(280)", "Delete SimpleName: StringPool(281)", "Delete SimpleType: StringPool(282)", "Delete SimpleName: stringPool(283)", "Delete SimpleName: StringPool(284)", "Delete SimpleType: StringPool(285)", "Delete ClassInstanceCreation(286)", "Delete VariableDeclarationFragment(287)", "Delete FieldDeclaration(288)", "Delete TextElement: The input JSON. (289)", "Delete TagElement(290)", "Delete Javadoc(291)", "Delete Modifier: private(292)", "Delete Modifier: final(293)", "Delete SimpleName: Reader(294)", "Delete SimpleType: Reader(295)", "Delete SimpleName: in(296)", "Delete VariableDeclarationFragment(297)", "Delete FieldDeclaration(298)", "Delete TextElement: True to accept non-spec compliant JSON (299)", "Delete TagElement(300)", "Delete Javadoc(301)", "Delete Modifier: private(302)", "Delete PrimitiveType: boolean(303)", "Delete SimpleName: lenient(304)", "Delete BooleanLiteral: false(305)", "Delete VariableDeclarationFragment(306)", "Delete FieldDeclaration(307)", "Delete TextElement: Use a manual buffer to easily read and unread upcoming characters, and(308)", "Delete TextElement: also so we can create strings without an intermediate StringBuilder.(309)", "Delete TextElement: We decode literals directly out of this buffer, so it must be at least as(310)", "Delete TextElement: long as the longest token that can be reported as a number.(311)", "Delete TagElement(312)", "Delete Javadoc(313)", "Delete Modifier: private(314)", "Delete Modifier: final(315)", "Delete PrimitiveType: char(316)", "Delete Dimension(317)", "Delete ArrayType: char[](318)", "Delete SimpleName: buffer(319)", "Delete PrimitiveType: char(320)", "Delete Dimension(321)", "Delete ArrayType: char[](322)", "Delete NumberLiteral: 1024(323)", "Delete ArrayCreation(324)", "Delete VariableDeclarationFragment(325)", "Delete FieldDeclaration(326)", "Delete Modifier: private(327)", "Delete PrimitiveType: int(328)", "Delete SimpleName: pos(329)", "Delete NumberLiteral: 0(330)", "Delete VariableDeclarationFragment(331)", "Delete FieldDeclaration(332)", "Delete Modifier: private(333)", "Delete PrimitiveType: int(334)", "Delete SimpleName: limit(335)", "Delete NumberLiteral: 0(336)", "Delete VariableDeclarationFragment(337)", "Delete FieldDeclaration(338)", "Delete Modifier: private(339)", "Delete PrimitiveType: int(340)", "Delete SimpleName: bufferStartLine(341)", "Delete NumberLiteral: 1(342)", "Delete VariableDeclarationFragment(343)", "Delete FieldDeclaration(344)", "Delete Modifier: private(345)", "Delete PrimitiveType: int(346)", "Delete SimpleName: bufferStartColumn(347)", "Delete NumberLiteral: 1(348)", "Delete VariableDeclarationFragment(349)", "Delete FieldDeclaration(350)", "Delete Modifier: private(351)", "Delete PrimitiveType: int(352)", "Delete Dimension(353)", "Delete ArrayType: int[](354)", "Delete SimpleName: stack(355)", "Delete PrimitiveType: int(356)", "Delete Dimension(357)", "Delete ArrayType: int[](358)", "Delete NumberLiteral: 32(359)", "Delete ArrayCreation(360)", "Delete VariableDeclarationFragment(361)", "Delete FieldDeclaration(362)", "Delete Modifier: private(363)", "Delete PrimitiveType: int(364)", "Delete SimpleName: stackSize(365)", "Delete NumberLiteral: 0(366)", "Delete VariableDeclarationFragment(367)", "Delete FieldDeclaration(368)", "Delete SimpleName: push(369)", "Delete SimpleName: EMPTY_DOCUMENT(370)", "Delete MethodInvocation(371)", "Delete ExpressionStatement(372)", "Delete Block(373)", "Delete Initializer(374)", "Delete TextElement: The type of the next token to be returned by (375)", "Delete SimpleName: peek(376)", "Delete MemberRef(377)", "Delete TagElement: @link(378)", "Delete TextElement:  and (379)", "Delete SimpleName: advance(380)", "Delete MemberRef(381)", "Delete TagElement: @link(382)", "Delete TextElement: . If null, peek() will assign a value.(383)", "Delete TagElement(384)", "Delete Javadoc(385)", "Delete Modifier: private(386)", "Delete SimpleName: JsonToken(387)", "Delete SimpleType: JsonToken(388)", "Delete SimpleName: token(389)", "Delete VariableDeclarationFragment(390)", "Delete FieldDeclaration(391)", "Delete TextElement: The text of the next name. (392)", "Delete TagElement(393)", "Delete Javadoc(394)", "Delete Modifier: private(395)", "Delete SimpleName: String(396)", "Delete SimpleType: String(397)", "Delete SimpleName: name(398)", "Delete VariableDeclarationFragment(399)", "Delete FieldDeclaration(400)", "Delete Modifier: private(401)", "Delete SimpleName: String(402)", "Delete SimpleType: String(403)", "Delete SimpleName: value(404)", "Delete VariableDeclarationFragment(405)", "Delete FieldDeclaration(406)", "Delete Modifier: private(407)", "Delete PrimitiveType: int(408)", "Delete SimpleName: valuePos(409)", "Delete VariableDeclarationFragment(410)", "Delete FieldDeclaration(411)", "Delete Modifier: private(412)", "Delete PrimitiveType: int(413)", "Delete SimpleName: valueLength(414)", "Delete VariableDeclarationFragment(415)", "Delete FieldDeclaration(416)", "Delete TextElement: True if we're currently handling a skipValue() call. (417)", "Delete TagElement(418)", "Delete Javadoc(419)", "Delete Modifier: private(420)", "Delete PrimitiveType: boolean(421)", "Delete SimpleName: skipping(422)", "Delete BooleanLiteral: false(423)", "Delete VariableDeclarationFragment(424)", "Delete FieldDeclaration(425)", "Delete TextElement: Creates a new instance that reads a JSON-encoded stream from (426)", "Delete TextElement:  in(427)", "Delete TagElement: @code(428)", "Delete TextElement: .(429)", "Delete TagElement(430)", "Delete Javadoc(431)", "Delete Modifier: public(432)", "Delete SimpleName: JsonReader(433)", "Delete SimpleName: Reader(434)", "Delete SimpleType: Reader(435)", "Delete SimpleName: in(436)", "Delete SingleVariableDeclaration(437)", "Delete SimpleName: in(438)", "Delete NullLiteral(439)", "Delete InfixExpression: ==(440)", "Delete SimpleName: NullPointerException(441)", "Delete SimpleType: NullPointerException(442)", "Delete StringLiteral: \"in == null\"(443)", "Delete ClassInstanceCreation(444)", "Delete ThrowStatement(445)", "Delete Block(446)", "Delete IfStatement(447)", "Delete ThisExpression(448)", "Delete SimpleName: in(449)", "Delete FieldAccess(450)", "Delete SimpleName: in(451)", "Delete Assignment: =(452)", "Delete ExpressionStatement(453)", "Delete Block(454)", "Delete MethodDeclaration(455)", "Delete TextElement: Configure this parser to be  be liberal in what it accepts. By default,(456)", "Delete TextElement: this parser is strict and only accepts JSON as specified by <a(457)", "Delete TextElement: href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the(458)", "Delete TextElement: parser to lenient causes it to ignore the following syntax errors:(459)", "Delete TextElement: <ul>(460)", "Delete TextElement: <li>Streams that start with the <a href=\"#nonexecuteprefix\">non-execute(461)", "Delete TextElement: prefix</a>, <code>\")]}'\\n\"</code>.(462)", "Delete TextElement: <li>Streams that include multiple top-level values. With strict parsing,(463)", "Delete TextElement: each stream must contain exactly one top-level value.(464)", "Delete TextElement: <li>Top-level values of any type. With strict parsing, the top-level(465)", "Delete TextElement: value must be an object or an array.(466)", "Delete TextElement: <li>Numbers may be (467)", "Delete SimpleName: Double(468)", "Delete SimpleName: isNaN(469)", "Delete MethodRef(470)", "Delete TextElement:  NaNs(471)", "Delete TagElement: @link(472)", "Delete TextElement:  or (473)", "Delete SimpleName: Double(474)", "Delete SimpleName: isInfinite(475)", "Delete MethodRef(476)", "Delete TextElement:  infinities(477)", "Delete TagElement: @link(478)", "Delete TextElement: .(479)", "Delete TextElement: <li>End of line comments starting with (480)", "Delete TextElement:  //(481)", "Delete TagElement: @code(482)", "Delete TextElement:  or (483)", "Delete TextElement:  #(484)", "Delete TagElement: @code(485)", "Delete TextElement:  and(486)", "Delete TextElement: ending with a newline character.(487)", "Delete TextElement: <li>C-style comments starting with (488)", "Delete TextElement:  /*(489)", "Delete TagElement: @code(490)", "Delete TextElement:  and ending with(491)", "Delete TextElement:  *(492)", "Delete TagElement: @code(493)", "Delete TextElement:  /(494)", "Delete TagElement: @code(495)", "Delete TextElement: . Such comments may not be nested.(496)", "Delete TextElement: <li>Names that are unquoted or (497)", "Delete TextElement:  'single quoted'(498)", "Delete TagElement: @code(499)", "Delete TextElement: .(500)", "Delete TextElement: <li>Strings that are unquoted or (501)", "Delete TextElement:  'single quoted'(502)", "Delete TagElement: @code(503)", "Delete TextElement: .(504)", "Delete TextElement: <li>Array elements separated by (505)", "Delete TextElement:  ;(506)", "Delete TagElement: @code(507)", "Delete TextElement:  instead of (508)", "Delete TextElement:  ,(509)", "Delete TagElement: @code(510)", "Delete TextElement: .(511)", "Delete TextElement: <li>Unnecessary array separators. These are interpreted as if null(512)", "Delete TextElement: was the omitted value.(513)", "Delete TextElement: <li>Names and values separated by (514)", "Delete TextElement:  =(515)", "Delete TagElement: @code(516)", "Delete TextElement:  or (517)", "Delete TextElement:  =>(518)", "Delete TagElement: @code(519)", "Delete TextElement:  instead of(520)", "Delete TextElement:  :(521)", "Delete TagElement: @code(522)", "Delete TextElement: .(523)", "Delete TextElement: <li>Name/value pairs separated by (524)", "Delete TextElement:  ;(525)", "Delete TagElement: @code(526)", "Delete TextElement:  instead of (527)", "Delete TextElement:  ,(528)", "Delete TagElement: @code(529)", "Delete TextElement: .(530)", "Delete TextElement: </ul>(531)", "Delete TagElement(532)", "Delete Javadoc(533)", "Delete Modifier: public(534)", "Delete Modifier: final(535)", "Delete PrimitiveType: void(536)", "Delete SimpleName: setLenient(537)", "Delete PrimitiveType: boolean(538)", "Delete SimpleName: lenient(539)", "Delete SingleVariableDeclaration(540)", "Delete ThisExpression(541)", "Delete SimpleName: lenient(542)", "Delete FieldAccess(543)", "Delete SimpleName: lenient(544)", "Delete Assignment: =(545)", "Delete ExpressionStatement(546)", "Delete Block(547)", "Delete MethodDeclaration(548)", "Delete TextElement: Returns true if this parser is liberal in what it accepts.(549)", "Delete TagElement(550)", "Delete Javadoc(551)", "Delete Modifier: public(552)", "Delete Modifier: final(553)", "Delete PrimitiveType: boolean(554)", "Delete SimpleName: isLenient(555)", "Delete SimpleName: lenient(556)", "Delete ReturnStatement(557)", "Delete Block(558)", "Delete MethodDeclaration(559)", "Delete TextElement: Consumes the next token from the JSON stream and asserts that it is the(560)", "Delete TextElement: beginning of a new array.(561)", "Delete TagElement(562)", "Delete Javadoc(563)", "Delete Modifier: public(564)", "Delete PrimitiveType: void(565)", "Delete SimpleName: beginArray(566)", "Delete SimpleName: IOException(567)", "Delete SimpleType: IOException(568)", "Delete SimpleName: expect(569)", "Delete QualifiedName: JsonToken.BEGIN_ARRAY(570)", "Delete MethodInvocation(571)", "Delete ExpressionStatement(572)", "Delete Block(573)", "Delete MethodDeclaration(574)", "Delete TextElement: Consumes the next token from the JSON stream and asserts that it is the(575)", "Delete TextElement: end of the current array.(576)", "Delete TagElement(577)", "Delete Javadoc(578)", "Delete Modifier: public(579)", "Delete PrimitiveType: void(580)", "Delete SimpleName: endArray(581)", "Delete SimpleName: IOException(582)", "Delete SimpleType: IOException(583)", "Delete SimpleName: expect(584)", "Delete QualifiedName: JsonToken.END_ARRAY(585)", "Delete MethodInvocation(586)", "Delete ExpressionStatement(587)", "Delete Block(588)", "Delete MethodDeclaration(589)", "Delete TextElement: Consumes the next token from the JSON stream and asserts that it is the(590)", "Delete TextElement: beginning of a new object.(591)", "Delete TagElement(592)", "Delete Javadoc(593)", "Delete Modifier: public(594)", "Delete PrimitiveType: void(595)", "Delete SimpleName: beginObject(596)", "Delete SimpleName: IOException(597)", "Delete SimpleType: IOException(598)", "Delete SimpleName: expect(599)", "Delete QualifiedName: JsonToken.BEGIN_OBJECT(600)", "Delete MethodInvocation(601)", "Delete ExpressionStatement(602)", "Delete Block(603)", "Delete MethodDeclaration(604)", "Delete TextElement: Consumes the next token from the JSON stream and asserts that it is the(605)", "Delete TextElement: end of the current object.(606)", "Delete TagElement(607)", "Delete Javadoc(608)", "Delete Modifier: public(609)", "Delete PrimitiveType: void(610)", "Delete SimpleName: endObject(611)", "Delete SimpleName: IOException(612)", "Delete SimpleType: IOException(613)", "Delete SimpleName: expect(614)", "Delete QualifiedName: JsonToken.END_OBJECT(615)", "Delete MethodInvocation(616)", "Delete ExpressionStatement(617)", "Delete Block(618)", "Delete MethodDeclaration(619)", "Delete TextElement: Consumes (620)", "Delete TextElement:  expected(621)", "Delete TagElement: @code(622)", "Delete TextElement: .(623)", "Delete TagElement(624)", "Delete Javadoc(625)", "Delete Modifier: private(626)", "Delete PrimitiveType: void(627)", "Delete SimpleName: expect(628)", "Delete SimpleName: JsonToken(629)", "Delete SimpleType: JsonToken(630)", "Delete SimpleName: expected(631)", "Delete SingleVariableDeclaration(632)", "Delete SimpleName: IOException(633)", "Delete SimpleType: IOException(634)", "Delete SimpleName: peek(635)", "Delete MethodInvocation(636)", "Delete ExpressionStatement(637)", "Delete SimpleName: token(638)", "Delete SimpleName: expected(639)", "Delete InfixExpression: !=(640)", "Delete SimpleName: IllegalStateException(641)", "Delete SimpleType: IllegalStateException(642)", "Delete StringLiteral: \"Expected \"(643)", "Delete SimpleName: expected(644)", "Delete StringLiteral: \" but was \"(645)", "Delete SimpleName: peek(646)", "Delete MethodInvocation(647)", "Delete StringLiteral: \" at line \"(648)", "Delete SimpleName: getLineNumber(649)", "Delete MethodInvocation(650)", "Delete StringLiteral: \" column \"(651)", "Delete SimpleName: getColumnNumber(652)", "Delete MethodInvocation(653)", "Delete InfixExpression: +(654)", "Delete ClassInstanceCreation(655)", "Delete ThrowStatement(656)", "Delete Block(657)", "Delete IfStatement(658)", "Delete SimpleName: advance(659)", "Delete MethodInvocation(660)", "Delete ExpressionStatement(661)", "Delete Block(662)", "Delete MethodDeclaration(663)", "Delete TextElement: Returns true if the current array or object has another element.(664)", "Delete TagElement(665)", "Delete Javadoc(666)", "Delete Modifier: public(667)", "Delete PrimitiveType: boolean(668)", "Delete SimpleName: hasNext(669)", "Delete SimpleName: IOException(670)", "Delete SimpleType: IOException(671)", "Delete SimpleName: peek(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete SimpleName: token(675)", "Delete QualifiedName: JsonToken.END_OBJECT(676)", "Delete InfixExpression: !=(677)", "Delete SimpleName: token(678)", "Delete QualifiedName: JsonToken.END_ARRAY(679)", "Delete InfixExpression: !=(680)", "Delete InfixExpression: &&(681)", "Delete ReturnStatement(682)", "Delete Block(683)", "Delete MethodDeclaration(684)", "Delete TextElement: Returns the type of the next token without consuming it.(685)", "Delete TagElement(686)", "Delete Javadoc(687)", "Delete Modifier: public(688)", "Delete SimpleName: JsonToken(689)", "Delete SimpleType: JsonToken(690)", "Delete SimpleName: peek(691)", "Delete SimpleName: IOException(692)", "Delete SimpleType: IOException(693)", "Delete SimpleName: token(694)", "Delete NullLiteral(695)", "Delete InfixExpression: !=(696)", "Delete SimpleName: token(697)", "Delete ReturnStatement(698)", "Delete Block(699)", "Delete IfStatement(700)", "Delete SimpleName: stack(701)", "Delete SimpleName: stackSize(702)", "Delete NumberLiteral: 1(703)", "Delete InfixExpression: -(704)", "Delete ArrayAccess(705)", "Delete SimpleName: EMPTY_DOCUMENT(706)", "Delete SwitchCase(707)", "Delete SimpleName: lenient(708)", "Delete SimpleName: consumeNonExecutePrefix(709)", "Delete MethodInvocation(710)", "Delete ExpressionStatement(711)", "Delete Block(712)", "Delete IfStatement(713)", "Delete SimpleName: stack(714)", "Delete SimpleName: stackSize(715)", "Delete NumberLiteral: 1(716)", "Delete InfixExpression: -(717)", "Delete ArrayAccess(718)", "Delete SimpleName: NONEMPTY_DOCUMENT(719)", "Delete Assignment: =(720)", "Delete ExpressionStatement(721)", "Delete SimpleName: JsonToken(722)", "Delete SimpleType: JsonToken(723)", "Delete SimpleName: firstToken(724)", "Delete SimpleName: nextValue(725)", "Delete MethodInvocation(726)", "Delete VariableDeclarationFragment(727)", "Delete VariableDeclarationStatement(728)", "Delete SimpleName: lenient(729)", "Delete PrefixExpression: !(730)", "Delete SimpleName: token(731)", "Delete QualifiedName: JsonToken.BEGIN_ARRAY(732)", "Delete InfixExpression: !=(733)", "Delete InfixExpression: &&(734)", "Delete SimpleName: token(735)", "Delete QualifiedName: JsonToken.BEGIN_OBJECT(736)", "Delete InfixExpression: !=(737)", "Delete InfixExpression: &&(738)", "Delete SimpleName: IOException(739)", "Delete SimpleType: IOException(740)", "Delete StringLiteral: \"Expected JSON document to start with '[' or '{' but was \"(741)", "Delete SimpleName: token(742)", "Delete StringLiteral: \" at line \"(743)", "Delete SimpleName: getLineNumber(744)", "Delete MethodInvocation(745)", "Delete StringLiteral: \" column \"(746)", "Delete SimpleName: getColumnNumber(747)", "Delete MethodInvocation(748)", "Delete InfixExpression: +(749)", "Delete ClassInstanceCreation(750)", "Delete ThrowStatement(751)", "Delete Block(752)", "Delete IfStatement(753)", "Delete SimpleName: firstToken(754)", "Delete ReturnStatement(755)", "Delete SimpleName: EMPTY_ARRAY(756)", "Delete SwitchCase(757)", "Delete SimpleName: nextInArray(758)", "Delete BooleanLiteral: true(759)", "Delete MethodInvocation(760)", "Delete ReturnStatement(761)", "Delete SimpleName: NONEMPTY_ARRAY(762)", "Delete SwitchCase(763)", "Delete SimpleName: nextInArray(764)", "Delete BooleanLiteral: false(765)", "Delete MethodInvocation(766)", "Delete ReturnStatement(767)", "Delete SimpleName: EMPTY_OBJECT(768)", "Delete SwitchCase(769)", "Delete SimpleName: nextInObject(770)", "Delete BooleanLiteral: true(771)", "Delete MethodInvocation(772)", "Delete ReturnStatement(773)", "Delete SimpleName: DANGLING_NAME(774)", "Delete SwitchCase(775)", "Delete SimpleName: objectValue(776)", "Delete MethodInvocation(777)", "Delete ReturnStatement(778)", "Delete SimpleName: NONEMPTY_OBJECT(779)", "Delete SwitchCase(780)", "Delete SimpleName: nextInObject(781)", "Delete BooleanLiteral: false(782)", "Delete MethodInvocation(783)", "Delete ReturnStatement(784)", "Delete SimpleName: NONEMPTY_DOCUMENT(785)", "Delete SwitchCase(786)", "Delete PrimitiveType: int(787)", "Delete SimpleName: c(788)", "Delete SimpleName: nextNonWhitespace(789)", "Delete BooleanLiteral: false(790)", "Delete MethodInvocation(791)", "Delete VariableDeclarationFragment(792)", "Delete VariableDeclarationStatement(793)", "Delete SimpleName: c(794)", "Delete NumberLiteral: 1(795)", "Delete PrefixExpression: -(796)", "Delete InfixExpression: ==(797)", "Delete QualifiedName: JsonToken.END_DOCUMENT(798)", "Delete ReturnStatement(799)", "Delete Block(800)", "Delete IfStatement(801)", "Delete SimpleName: pos(802)", "Delete PostfixExpression: --(803)", "Delete ExpressionStatement(804)", "Delete SimpleName: lenient(805)", "Delete PrefixExpression: !(806)", "Delete SimpleName: syntaxError(807)", "Delete StringLiteral: \"Expected EOF\"(808)", "Delete MethodInvocation(809)", "Delete ThrowStatement(810)", "Delete Block(811)", "Delete IfStatement(812)", "Delete SimpleName: nextValue(813)", "Delete MethodInvocation(814)", "Delete ReturnStatement(815)", "Delete SimpleName: CLOSED(816)", "Delete SwitchCase(817)", "Delete SimpleName: IllegalStateException(818)", "Delete SimpleType: IllegalStateException(819)", "Delete StringLiteral: \"JsonReader is closed\"(820)", "Delete ClassInstanceCreation(821)", "Delete ThrowStatement(822)", "Delete SwitchCase(823)", "Delete SimpleName: AssertionError(824)", "Delete SimpleType: AssertionError(825)", "Delete ClassInstanceCreation(826)", "Delete ThrowStatement(827)", "Delete SwitchStatement(828)", "Delete Block(829)", "Delete MethodDeclaration(830)", "Delete TextElement: Consumes the non-execute prefix if it exists.(831)", "Delete TagElement(832)", "Delete Javadoc(833)", "Delete Modifier: private(834)", "Delete PrimitiveType: void(835)", "Delete SimpleName: consumeNonExecutePrefix(836)", "Delete SimpleName: IOException(837)", "Delete SimpleType: IOException(838)", "Delete SimpleName: nextNonWhitespace(839)", "Delete BooleanLiteral: true(840)", "Delete MethodInvocation(841)", "Delete ExpressionStatement(842)", "Delete SimpleName: pos(843)", "Delete PostfixExpression: --(844)", "Delete ExpressionStatement(845)", "Delete SimpleName: pos(846)", "Delete QualifiedName: NON_EXECUTE_PREFIX.length(847)", "Delete InfixExpression: +(848)", "Delete SimpleName: limit(849)", "Delete InfixExpression: >(850)", "Delete SimpleName: fillBuffer(851)", "Delete QualifiedName: NON_EXECUTE_PREFIX.length(852)", "Delete MethodInvocation(853)", "Delete PrefixExpression: !(854)", "Delete InfixExpression: &&(855)", "Delete ReturnStatement(856)", "Delete Block(857)", "Delete IfStatement(858)", "Delete PrimitiveType: int(859)", "Delete SimpleName: i(860)", "Delete NumberLiteral: 0(861)", "Delete VariableDeclarationFragment(862)", "Delete VariableDeclarationExpression(863)", "Delete SimpleName: i(864)", "Delete QualifiedName: NON_EXECUTE_PREFIX.length(865)", "Delete InfixExpression: <(866)", "Delete SimpleName: i(867)", "Delete PostfixExpression: ++(868)", "Delete SimpleName: buffer(869)", "Delete SimpleName: pos(870)", "Delete SimpleName: i(871)", "Delete InfixExpression: +(872)", "Delete ArrayAccess(873)", "Delete SimpleName: NON_EXECUTE_PREFIX(874)", "Delete SimpleName: i(875)", "Delete ArrayAccess(876)", "Delete InfixExpression: !=(877)", "Delete ReturnStatement(878)", "Delete Block(879)", "Delete IfStatement(880)", "Delete Block(881)", "Delete ForStatement(882)", "Delete SimpleName: pos(883)", "Delete QualifiedName: NON_EXECUTE_PREFIX.length(884)", "Delete Assignment: +=(885)", "Delete ExpressionStatement(886)", "Delete Block(887)", "Delete MethodDeclaration(888)", "Delete TextElement: Advances the cursor in the JSON stream to the next token.(889)", "Delete TagElement(890)", "Delete Javadoc(891)", "Delete Modifier: private(892)", "Delete SimpleName: JsonToken(893)", "Delete SimpleType: JsonToken(894)", "Delete SimpleName: advance(895)", "Delete SimpleName: IOException(896)", "Delete SimpleType: IOException(897)", "Delete SimpleName: peek(898)", "Delete MethodInvocation(899)", "Delete ExpressionStatement(900)", "Delete SimpleName: JsonToken(901)", "Delete SimpleType: JsonToken(902)", "Delete SimpleName: result(903)", "Delete SimpleName: token(904)", "Delete VariableDeclarationFragment(905)", "Delete VariableDeclarationStatement(906)", "Delete SimpleName: token(907)", "Delete NullLiteral(908)", "Delete Assignment: =(909)", "Delete ExpressionStatement(910)", "Delete SimpleName: value(911)", "Delete NullLiteral(912)", "Delete Assignment: =(913)", "Delete ExpressionStatement(914)", "Delete SimpleName: name(915)", "Delete NullLiteral(916)", "Delete Assignment: =(917)", "Delete ExpressionStatement(918)", "Delete SimpleName: result(919)", "Delete ReturnStatement(920)", "Delete Block(921)", "Delete MethodDeclaration(922)", "Delete TextElement: Returns the next token, a (923)", "Delete SimpleName: JsonToken(924)", "Delete SimpleName: NAME(925)", "Delete MemberRef(926)", "Delete TextElement:  property name(927)", "Delete TagElement: @link(928)", "Delete TextElement: , and(929)", "Delete TextElement: consumes it.(930)", "Delete TagElement(931)", "Delete SimpleName: IOException(932)", "Delete TextElement:  if the next token in the stream is not a property(933)", "Delete TextElement: name.(934)", "Delete TagElement: @throws(935)", "Delete Javadoc(936)", "Delete Modifier: public(937)", "Delete SimpleName: String(938)", "Delete SimpleType: String(939)", "Delete SimpleName: nextName(940)", "Delete SimpleName: IOException(941)", "Delete SimpleType: IOException(942)", "Delete SimpleName: peek(943)", "Delete MethodInvocation(944)", "Delete ExpressionStatement(945)", "Delete SimpleName: token(946)", "Delete QualifiedName: JsonToken.NAME(947)", "Delete InfixExpression: !=(948)", "Delete SimpleName: IllegalStateException(949)", "Delete SimpleType: IllegalStateException(950)", "Delete StringLiteral: \"Expected a name but was \"(951)", "Delete SimpleName: peek(952)", "Delete MethodInvocation(953)", "Delete StringLiteral: \" at line \"(954)", "Delete SimpleName: getLineNumber(955)", "Delete MethodInvocation(956)", "Delete StringLiteral: \" column \"(957)", "Delete SimpleName: getColumnNumber(958)", "Delete MethodInvocation(959)", "Delete InfixExpression: +(960)", "Delete ClassInstanceCreation(961)", "Delete ThrowStatement(962)", "Delete Block(963)", "Delete IfStatement(964)", "Delete SimpleName: String(965)", "Delete SimpleType: String(966)", "Delete SimpleName: result(967)", "Delete SimpleName: name(968)", "Delete VariableDeclarationFragment(969)", "Delete VariableDeclarationStatement(970)", "Delete SimpleName: advance(971)", "Delete MethodInvocation(972)", "Delete ExpressionStatement(973)", "Delete SimpleName: result(974)", "Delete ReturnStatement(975)", "Delete Block(976)", "Delete MethodDeclaration(977)", "Delete TextElement: Returns the (978)", "Delete SimpleName: JsonToken(979)", "Delete SimpleName: STRING(980)", "Delete MemberRef(981)", "Delete TextElement:  string(982)", "Delete TagElement: @link(983)", "Delete TextElement:  value of the next token,(984)", "Delete TextElement: consuming it. If the next token is a number, this method will return its(985)", "Delete TextElement: string form.(986)", "Delete TagElement(987)", "Delete SimpleName: IllegalStateException(988)", "Delete TextElement:  if the next token is not a string or if(989)", "Delete TextElement: this reader is closed.(990)", "Delete TagElement: @throws(991)", "Delete Javadoc(992)", "Delete Modifier: public(993)", "Delete SimpleName: String(994)", "Delete SimpleType: String(995)", "Delete SimpleName: nextString(996)", "Delete SimpleName: IOException(997)", "Delete SimpleType: IOException(998)", "Delete SimpleName: peek(999)", "Delete MethodInvocation(1000)", "Delete ExpressionStatement(1001)", "Delete SimpleName: token(1002)", "Delete QualifiedName: JsonToken.STRING(1003)", "Delete InfixExpression: !=(1004)", "Delete SimpleName: token(1005)", "Delete QualifiedName: JsonToken.NUMBER(1006)", "Delete InfixExpression: !=(1007)", "Delete InfixExpression: &&(1008)", "Delete SimpleName: IllegalStateException(1009)", "Delete SimpleType: IllegalStateException(1010)", "Delete StringLiteral: \"Expected a string but was \"(1011)", "Delete SimpleName: peek(1012)", "Delete MethodInvocation(1013)", "Delete StringLiteral: \" at line \"(1014)", "Delete SimpleName: getLineNumber(1015)", "Delete MethodInvocation(1016)", "Delete StringLiteral: \" column \"(1017)", "Delete SimpleName: getColumnNumber(1018)", "Delete MethodInvocation(1019)", "Delete InfixExpression: +(1020)", "Delete ClassInstanceCreation(1021)", "Delete ThrowStatement(1022)", "Delete Block(1023)", "Delete IfStatement(1024)", "Delete SimpleName: String(1025)", "Delete SimpleType: String(1026)", "Delete SimpleName: result(1027)", "Delete SimpleName: value(1028)", "Delete VariableDeclarationFragment(1029)", "Delete VariableDeclarationStatement(1030)", "Delete SimpleName: advance(1031)", "Delete MethodInvocation(1032)", "Delete ExpressionStatement(1033)", "Delete SimpleName: result(1034)", "Delete ReturnStatement(1035)", "Delete Block(1036)", "Delete MethodDeclaration(1037)", "Delete TextElement: Returns the (1038)", "Delete SimpleName: JsonToken(1039)", "Delete SimpleName: BOOLEAN(1040)", "Delete MemberRef(1041)", "Delete TextElement:  boolean(1042)", "Delete TagElement: @link(1043)", "Delete TextElement:  value of the next token,(1044)", "Delete TextElement: consuming it.(1045)", "Delete TagElement(1046)", "Delete SimpleName: IllegalStateException(1047)", "Delete TextElement:  if the next token is not a boolean or if(1048)", "Delete TextElement: this reader is closed.(1049)", "Delete TagElement: @throws(1050)", "Delete Javadoc(1051)", "Delete Modifier: public(1052)", "Delete PrimitiveType: boolean(1053)", "Delete SimpleName: nextBoolean(1054)", "Delete SimpleName: IOException(1055)", "Delete SimpleType: IOException(1056)", "Delete SimpleName: peek(1057)", "Delete MethodInvocation(1058)", "Delete ExpressionStatement(1059)", "Delete SimpleName: token(1060)", "Delete QualifiedName: JsonToken.BOOLEAN(1061)", "Delete InfixExpression: !=(1062)", "Delete SimpleName: IllegalStateException(1063)", "Delete SimpleType: IllegalStateException(1064)", "Delete StringLiteral: \"Expected a boolean but was \"(1065)", "Delete SimpleName: token(1066)", "Delete StringLiteral: \" at line \"(1067)", "Delete SimpleName: getLineNumber(1068)", "Delete MethodInvocation(1069)", "Delete StringLiteral: \" column \"(1070)", "Delete SimpleName: getColumnNumber(1071)", "Delete MethodInvocation(1072)", "Delete InfixExpression: +(1073)", "Delete ClassInstanceCreation(1074)", "Delete ThrowStatement(1075)", "Delete Block(1076)", "Delete IfStatement(1077)", "Delete PrimitiveType: boolean(1078)", "Delete SimpleName: result(1079)", "Delete SimpleName: value(1080)", "Delete SimpleName: TRUE(1081)", "Delete InfixExpression: ==(1082)", "Delete ParenthesizedExpression(1083)", "Delete VariableDeclarationFragment(1084)", "Delete VariableDeclarationStatement(1085)", "Delete SimpleName: advance(1086)", "Delete MethodInvocation(1087)", "Delete ExpressionStatement(1088)", "Delete SimpleName: result(1089)", "Delete ReturnStatement(1090)", "Delete Block(1091)", "Delete MethodDeclaration(1092)", "Delete TextElement: Consumes the next token from the JSON stream and asserts that it is a(1093)", "Delete TextElement: literal null.(1094)", "Delete TagElement(1095)", "Delete SimpleName: IllegalStateException(1096)", "Delete TextElement:  if the next token is not null or if this(1097)", "Delete TextElement: reader is closed.(1098)", "Delete TagElement: @throws(1099)", "Delete Javadoc(1100)", "Delete Modifier: public(1101)", "Delete PrimitiveType: void(1102)", "Delete SimpleName: nextNull(1103)", "Delete SimpleName: IOException(1104)", "Delete SimpleType: IOException(1105)", "Delete SimpleName: peek(1106)", "Delete MethodInvocation(1107)", "Delete ExpressionStatement(1108)", "Delete SimpleName: token(1109)", "Delete QualifiedName: JsonToken.NULL(1110)", "Delete InfixExpression: !=(1111)", "Delete SimpleName: IllegalStateException(1112)", "Delete SimpleType: IllegalStateException(1113)", "Delete StringLiteral: \"Expected null but was \"(1114)", "Delete SimpleName: token(1115)", "Delete StringLiteral: \" at line \"(1116)", "Delete SimpleName: getLineNumber(1117)", "Delete MethodInvocation(1118)", "Delete StringLiteral: \" column \"(1119)", "Delete SimpleName: getColumnNumber(1120)", "Delete MethodInvocation(1121)", "Delete InfixExpression: +(1122)", "Delete ClassInstanceCreation(1123)", "Delete ThrowStatement(1124)", "Delete Block(1125)", "Delete IfStatement(1126)", "Delete SimpleName: advance(1127)", "Delete MethodInvocation(1128)", "Delete ExpressionStatement(1129)", "Delete Block(1130)", "Delete MethodDeclaration(1131)", "Delete TextElement: Returns the (1132)", "Delete SimpleName: JsonToken(1133)", "Delete SimpleName: NUMBER(1134)", "Delete MemberRef(1135)", "Delete TextElement:  double(1136)", "Delete TagElement: @link(1137)", "Delete TextElement:  value of the next token,(1138)", "Delete TextElement: consuming it. If the next token is a string, this method will attempt to(1139)", "Delete TextElement: parse it as a double using (1140)", "Delete SimpleName: Double(1141)", "Delete SimpleName: parseDouble(1142)", "Delete SimpleName: String(1143)", "Delete SimpleType: String(1144)", "Delete MethodRefParameter(1145)", "Delete MethodRef(1146)", "Delete TagElement: @link(1147)", "Delete TextElement: .(1148)", "Delete TagElement(1149)", "Delete SimpleName: IllegalStateException(1150)", "Delete TextElement:  if the next token is not a literal value.(1151)", "Delete TagElement: @throws(1152)", "Delete SimpleName: NumberFormatException(1153)", "Delete TextElement:  if the next literal value cannot be parsed(1154)", "Delete TextElement: as a double, or is non-finite.(1155)", "Delete TagElement: @throws(1156)", "Delete Javadoc(1157)", "Delete Modifier: public(1158)", "Delete PrimitiveType: double(1159)", "Delete SimpleName: nextDouble(1160)", "Delete SimpleName: IOException(1161)", "Delete SimpleType: IOException(1162)", "Delete SimpleName: peek(1163)", "Delete MethodInvocation(1164)", "Delete ExpressionStatement(1165)", "Delete SimpleName: token(1166)", "Delete QualifiedName: JsonToken.STRING(1167)", "Delete InfixExpression: !=(1168)", "Delete SimpleName: token(1169)", "Delete QualifiedName: JsonToken.NUMBER(1170)", "Delete InfixExpression: !=(1171)", "Delete InfixExpression: &&(1172)", "Delete SimpleName: IllegalStateException(1173)", "Delete SimpleType: IllegalStateException(1174)", "Delete StringLiteral: \"Expected a double but was \"(1175)", "Delete SimpleName: token(1176)", "Delete StringLiteral: \" at line \"(1177)", "Delete SimpleName: getLineNumber(1178)", "Delete MethodInvocation(1179)", "Delete StringLiteral: \" column \"(1180)", "Delete SimpleName: getColumnNumber(1181)", "Delete MethodInvocation(1182)", "Delete InfixExpression: +(1183)", "Delete ClassInstanceCreation(1184)", "Delete ThrowStatement(1185)", "Delete Block(1186)", "Delete IfStatement(1187)", "Delete PrimitiveType: double(1188)", "Delete SimpleName: result(1189)", "Delete SimpleName: Double(1190)", "Delete SimpleName: parseDouble(1191)", "Delete SimpleName: value(1192)", "Delete MethodInvocation(1193)", "Delete VariableDeclarationFragment(1194)", "Delete VariableDeclarationStatement(1195)", "Delete SimpleName: result(1196)", "Delete NumberLiteral: 1.0d(1197)", "Delete InfixExpression: >=(1198)", "Delete SimpleName: value(1199)", "Delete SimpleName: startsWith(1200)", "Delete StringLiteral: \"0\"(1201)", "Delete MethodInvocation(1202)", "Delete InfixExpression: &&(1203)", "Delete ParenthesizedExpression(1204)", "Delete SimpleName: MalformedJsonException(1205)", "Delete SimpleType: MalformedJsonException(1206)", "Delete StringLiteral: \"JSON forbids octal prefixes: \"(1207)", "Delete SimpleName: value(1208)", "Delete StringLiteral: \" at line \"(1209)", "Delete SimpleName: getLineNumber(1210)", "Delete MethodInvocation(1211)", "Delete StringLiteral: \" column \"(1212)", "Delete SimpleName: getColumnNumber(1213)", "Delete MethodInvocation(1214)", "Delete InfixExpression: +(1215)", "Delete ClassInstanceCreation(1216)", "Delete ThrowStatement(1217)", "Delete Block(1218)", "Delete IfStatement(1219)", "Delete SimpleName: lenient(1220)", "Delete PrefixExpression: !(1221)", "Delete SimpleName: Double(1222)", "Delete SimpleName: isNaN(1223)", "Delete SimpleName: result(1224)", "Delete MethodInvocation(1225)", "Delete SimpleName: Double(1226)", "Delete SimpleName: isInfinite(1227)", "Delete SimpleName: result(1228)", "Delete MethodInvocation(1229)", "Delete InfixExpression: ||(1230)", "Delete ParenthesizedExpression(1231)", "Delete InfixExpression: &&(1232)", "Delete SimpleName: MalformedJsonException(1233)", "Delete SimpleType: MalformedJsonException(1234)", "Delete StringLiteral: \"JSON forbids NaN and infinities: \"(1235)", "Delete SimpleName: value(1236)", "Delete StringLiteral: \" at line \"(1237)", "Delete SimpleName: getLineNumber(1238)", "Delete MethodInvocation(1239)", "Delete StringLiteral: \" column \"(1240)", "Delete SimpleName: getColumnNumber(1241)", "Delete MethodInvocation(1242)", "Delete InfixExpression: +(1243)", "Delete ClassInstanceCreation(1244)", "Delete ThrowStatement(1245)", "Delete Block(1246)", "Delete IfStatement(1247)", "Delete SimpleName: advance(1248)", "Delete MethodInvocation(1249)", "Delete ExpressionStatement(1250)", "Delete SimpleName: result(1251)", "Delete ReturnStatement(1252)", "Delete Block(1253)", "Delete MethodDeclaration(1254)", "Delete TextElement: Returns the (1255)", "Delete SimpleName: JsonToken(1256)", "Delete SimpleName: NUMBER(1257)", "Delete MemberRef(1258)", "Delete TextElement:  long(1259)", "Delete TagElement: @link(1260)", "Delete TextElement:  value of the next token,(1261)", "Delete TextElement: consuming it. If the next token is a string, this method will attempt to(1262)", "Delete TextElement: parse it as a long. If the next token's numeric value cannot be exactly(1263)", "Delete TextElement: represented by a Java (1264)", "Delete TextElement:  long(1265)", "Delete TagElement: @code(1266)", "Delete TextElement: , this method throws.(1267)", "Delete TagElement(1268)", "Delete SimpleName: IllegalStateException(1269)", "Delete TextElement:  if the next token is not a literal value.(1270)", "Delete TagElement: @throws(1271)", "Delete SimpleName: NumberFormatException(1272)", "Delete TextElement:  if the next literal value cannot be parsed(1273)", "Delete TextElement: as a number, or exactly represented as a long.(1274)", "Delete TagElement: @throws(1275)", "Delete Javadoc(1276)", "Delete Modifier: public(1277)", "Delete PrimitiveType: long(1278)", "Delete SimpleName: nextLong(1279)", "Delete SimpleName: IOException(1280)", "Delete SimpleType: IOException(1281)", "Delete SimpleName: peek(1282)", "Delete MethodInvocation(1283)", "Delete ExpressionStatement(1284)", "Delete SimpleName: token(1285)", "Delete QualifiedName: JsonToken.STRING(1286)", "Delete InfixExpression: !=(1287)", "Delete SimpleName: token(1288)", "Delete QualifiedName: JsonToken.NUMBER(1289)", "Delete InfixExpression: !=(1290)", "Delete InfixExpression: &&(1291)", "Delete SimpleName: IllegalStateException(1292)", "Delete SimpleType: IllegalStateException(1293)", "Delete StringLiteral: \"Expected a long but was \"(1294)", "Delete SimpleName: token(1295)", "Delete StringLiteral: \" at line \"(1296)", "Delete SimpleName: getLineNumber(1297)", "Delete MethodInvocation(1298)", "Delete StringLiteral: \" column \"(1299)", "Delete SimpleName: getColumnNumber(1300)", "Delete MethodInvocation(1301)", "Delete InfixExpression: +(1302)", "Delete ClassInstanceCreation(1303)", "Delete ThrowStatement(1304)", "Delete Block(1305)", "Delete IfStatement(1306)", "Delete PrimitiveType: long(1307)", "Delete SimpleName: result(1308)", "Delete VariableDeclarationFragment(1309)", "Delete VariableDeclarationStatement(1310)", "Delete SimpleName: result(1311)", "Delete SimpleName: Long(1312)", "Delete SimpleName: parseLong(1313)", "Delete SimpleName: value(1314)", "Delete MethodInvocation(1315)", "Delete Assignment: =(1316)", "Delete ExpressionStatement(1317)", "Delete Block(1318)", "Delete SimpleName: NumberFormatException(1319)", "Delete SimpleType: NumberFormatException(1320)", "Delete SimpleName: ignored(1321)", "Delete SingleVariableDeclaration(1322)", "Delete PrimitiveType: double(1323)", "Delete SimpleName: asDouble(1324)", "Delete SimpleName: Double(1325)", "Delete SimpleName: parseDouble(1326)", "Delete SimpleName: value(1327)", "Delete MethodInvocation(1328)", "Delete VariableDeclarationFragment(1329)", "Delete VariableDeclarationStatement(1330)", "Delete SimpleName: result(1331)", "Delete PrimitiveType: long(1332)", "Delete SimpleName: asDouble(1333)", "Delete CastExpression(1334)", "Delete Assignment: =(1335)", "Delete ExpressionStatement(1336)", "Delete SimpleName: result(1337)", "Delete SimpleName: asDouble(1338)", "Delete InfixExpression: !=(1339)", "Delete SimpleName: NumberFormatException(1340)", "Delete SimpleType: NumberFormatException(1341)", "Delete StringLiteral: \"Expected a long but was \"(1342)", "Delete SimpleName: value(1343)", "Delete StringLiteral: \" at line \"(1344)", "Delete SimpleName: getLineNumber(1345)", "Delete MethodInvocation(1346)", "Delete StringLiteral: \" column \"(1347)", "Delete SimpleName: getColumnNumber(1348)", "Delete MethodInvocation(1349)", "Delete InfixExpression: +(1350)", "Delete ClassInstanceCreation(1351)", "Delete ThrowStatement(1352)", "Delete Block(1353)", "Delete IfStatement(1354)", "Delete Block(1355)", "Delete CatchClause(1356)", "Delete TryStatement(1357)", "Delete SimpleName: result(1358)", "Delete NumberLiteral: 1L(1359)", "Delete InfixExpression: >=(1360)", "Delete SimpleName: value(1361)", "Delete SimpleName: startsWith(1362)", "Delete StringLiteral: \"0\"(1363)", "Delete MethodInvocation(1364)", "Delete InfixExpression: &&(1365)", "Delete SimpleName: MalformedJsonException(1366)", "Delete SimpleType: MalformedJsonException(1367)", "Delete StringLiteral: \"JSON forbids octal prefixes: \"(1368)", "Delete SimpleName: value(1369)", "Delete StringLiteral: \" at line \"(1370)", "Delete SimpleName: getLineNumber(1371)", "Delete MethodInvocation(1372)", "Delete StringLiteral: \" column \"(1373)", "Delete SimpleName: getColumnNumber(1374)", "Delete MethodInvocation(1375)", "Delete InfixExpression: +(1376)", "Delete ClassInstanceCreation(1377)", "Delete ThrowStatement(1378)", "Delete Block(1379)", "Delete IfStatement(1380)", "Delete SimpleName: advance(1381)", "Delete MethodInvocation(1382)", "Delete ExpressionStatement(1383)", "Delete SimpleName: result(1384)", "Delete ReturnStatement(1385)", "Delete Block(1386)", "Delete MethodDeclaration(1387)", "Delete TextElement: Returns the (1388)", "Delete SimpleName: JsonToken(1389)", "Delete SimpleName: NUMBER(1390)", "Delete MemberRef(1391)", "Delete TextElement:  int(1392)", "Delete TagElement: @link(1393)", "Delete TextElement:  value of the next token,(1394)", "Delete TextElement: consuming it. If the next token is a string, this method will attempt to(1395)", "Delete TextElement: parse it as an int. If the next token's numeric value cannot be exactly(1396)", "Delete TextElement: represented by a Java (1397)", "Delete TextElement:  int(1398)", "Delete TagElement: @code(1399)", "Delete TextElement: , this method throws.(1400)", "Delete TagElement(1401)", "Delete SimpleName: IllegalStateException(1402)", "Delete TextElement:  if the next token is not a literal value.(1403)", "Delete TagElement: @throws(1404)", "Delete SimpleName: NumberFormatException(1405)", "Delete TextElement:  if the next literal value cannot be parsed(1406)", "Delete TextElement: as a number, or exactly represented as an int.(1407)", "Delete TagElement: @throws(1408)", "Delete Javadoc(1409)", "Delete Modifier: public(1410)", "Delete PrimitiveType: int(1411)", "Delete SimpleName: nextInt(1412)", "Delete SimpleName: IOException(1413)", "Delete SimpleType: IOException(1414)", "Delete SimpleName: peek(1415)", "Delete MethodInvocation(1416)", "Delete ExpressionStatement(1417)", "Delete SimpleName: token(1418)", "Delete QualifiedName: JsonToken.STRING(1419)", "Delete InfixExpression: !=(1420)", "Delete SimpleName: token(1421)", "Delete QualifiedName: JsonToken.NUMBER(1422)", "Delete InfixExpression: !=(1423)", "Delete InfixExpression: &&(1424)", "Delete SimpleName: IllegalStateException(1425)", "Delete SimpleType: IllegalStateException(1426)", "Delete StringLiteral: \"Expected an int but was \"(1427)", "Delete SimpleName: token(1428)", "Delete StringLiteral: \" at line \"(1429)", "Delete SimpleName: getLineNumber(1430)", "Delete MethodInvocation(1431)", "Delete StringLiteral: \" column \"(1432)", "Delete SimpleName: getColumnNumber(1433)", "Delete MethodInvocation(1434)", "Delete InfixExpression: +(1435)", "Delete ClassInstanceCreation(1436)", "Delete ThrowStatement(1437)", "Delete Block(1438)", "Delete IfStatement(1439)", "Delete PrimitiveType: int(1440)", "Delete SimpleName: result(1441)", "Delete VariableDeclarationFragment(1442)", "Delete VariableDeclarationStatement(1443)", "Delete SimpleName: result(1444)", "Delete SimpleName: Integer(1445)", "Delete SimpleName: parseInt(1446)", "Delete SimpleName: value(1447)", "Delete MethodInvocation(1448)", "Delete Assignment: =(1449)", "Delete ExpressionStatement(1450)", "Delete Block(1451)", "Delete SimpleName: NumberFormatException(1452)", "Delete SimpleType: NumberFormatException(1453)", "Delete SimpleName: ignored(1454)", "Delete SingleVariableDeclaration(1455)", "Delete PrimitiveType: double(1456)", "Delete SimpleName: asDouble(1457)", "Delete SimpleName: Double(1458)", "Delete SimpleName: parseDouble(1459)", "Delete SimpleName: value(1460)", "Delete MethodInvocation(1461)", "Delete VariableDeclarationFragment(1462)", "Delete VariableDeclarationStatement(1463)", "Delete SimpleName: result(1464)", "Delete PrimitiveType: int(1465)", "Delete SimpleName: asDouble(1466)", "Delete CastExpression(1467)", "Delete Assignment: =(1468)", "Delete ExpressionStatement(1469)", "Delete SimpleName: result(1470)", "Delete SimpleName: asDouble(1471)", "Delete InfixExpression: !=(1472)", "Delete SimpleName: NumberFormatException(1473)", "Delete SimpleType: NumberFormatException(1474)", "Delete StringLiteral: \"Expected an int but was \"(1475)", "Delete SimpleName: value(1476)", "Delete StringLiteral: \" at line \"(1477)", "Delete SimpleName: getLineNumber(1478)", "Delete MethodInvocation(1479)", "Delete StringLiteral: \" column \"(1480)", "Delete SimpleName: getColumnNumber(1481)", "Delete MethodInvocation(1482)", "Delete InfixExpression: +(1483)", "Delete ClassInstanceCreation(1484)", "Delete ThrowStatement(1485)", "Delete Block(1486)", "Delete IfStatement(1487)", "Delete Block(1488)", "Delete CatchClause(1489)", "Delete TryStatement(1490)", "Delete SimpleName: result(1491)", "Delete NumberLiteral: 1L(1492)", "Delete InfixExpression: >=(1493)", "Delete SimpleName: value(1494)", "Delete SimpleName: startsWith(1495)", "Delete StringLiteral: \"0\"(1496)", "Delete MethodInvocation(1497)", "Delete InfixExpression: &&(1498)", "Delete SimpleName: MalformedJsonException(1499)", "Delete SimpleType: MalformedJsonException(1500)", "Delete StringLiteral: \"JSON forbids octal prefixes: \"(1501)", "Delete SimpleName: value(1502)", "Delete StringLiteral: \" at line \"(1503)", "Delete SimpleName: getLineNumber(1504)", "Delete MethodInvocation(1505)", "Delete StringLiteral: \" column \"(1506)", "Delete SimpleName: getColumnNumber(1507)", "Delete MethodInvocation(1508)", "Delete InfixExpression: +(1509)", "Delete ClassInstanceCreation(1510)", "Delete ThrowStatement(1511)", "Delete Block(1512)", "Delete IfStatement(1513)", "Delete SimpleName: advance(1514)", "Delete MethodInvocation(1515)", "Delete ExpressionStatement(1516)", "Delete SimpleName: result(1517)", "Delete ReturnStatement(1518)", "Delete Block(1519)", "Delete MethodDeclaration(1520)", "Delete TextElement: Closes this JSON reader and the underlying (1521)", "Delete SimpleName: Reader(1522)", "Delete TagElement: @link(1523)", "Delete TextElement: .(1524)", "Delete TagElement(1525)", "Delete Javadoc(1526)", "Delete Modifier: public(1527)", "Delete PrimitiveType: void(1528)", "Delete SimpleName: close(1529)", "Delete SimpleName: IOException(1530)", "Delete SimpleType: IOException(1531)", "Delete SimpleName: value(1532)", "Delete NullLiteral(1533)", "Delete Assignment: =(1534)", "Delete ExpressionStatement(1535)", "Delete SimpleName: token(1536)", "Delete NullLiteral(1537)", "Delete Assignment: =(1538)", "Delete ExpressionStatement(1539)", "Delete SimpleName: stack(1540)", "Delete NumberLiteral: 0(1541)", "Delete ArrayAccess(1542)", "Delete SimpleName: CLOSED(1543)", "Delete Assignment: =(1544)", "Delete ExpressionStatement(1545)", "Delete SimpleName: stackSize(1546)", "Delete NumberLiteral: 1(1547)", "Delete Assignment: =(1548)", "Delete ExpressionStatement(1549)", "Delete SimpleName: in(1550)", "Delete SimpleName: close(1551)", "Delete MethodInvocation(1552)", "Delete ExpressionStatement(1553)", "Delete Block(1554)", "Delete MethodDeclaration(1555)", "Delete TextElement: Skips the next value recursively. If it is an object or array, all nested(1556)", "Delete TextElement: elements are skipped. This method is intended for use when the JSON token(1557)", "Delete TextElement: stream contains unrecognized or unhandled values.(1558)", "Delete TagElement(1559)", "Delete Javadoc(1560)", "Delete Modifier: public(1561)", "Delete PrimitiveType: void(1562)", "Delete SimpleName: skipValue(1563)", "Delete SimpleName: IOException(1564)", "Delete SimpleType: IOException(1565)", "Delete SimpleName: skipping(1566)", "Delete BooleanLiteral: true(1567)", "Delete Assignment: =(1568)", "Delete ExpressionStatement(1569)", "Delete PrimitiveType: int(1570)", "Delete SimpleName: count(1571)", "Delete NumberLiteral: 0(1572)", "Delete VariableDeclarationFragment(1573)", "Delete VariableDeclarationStatement(1574)", "Delete SimpleName: JsonToken(1575)", "Delete SimpleType: JsonToken(1576)", "Delete SimpleName: token(1577)", "Delete SimpleName: advance(1578)", "Delete MethodInvocation(1579)", "Delete VariableDeclarationFragment(1580)", "Delete VariableDeclarationStatement(1581)", "Delete SimpleName: token(1582)", "Delete QualifiedName: JsonToken.BEGIN_ARRAY(1583)", "Delete InfixExpression: ==(1584)", "Delete SimpleName: token(1585)", "Delete QualifiedName: JsonToken.BEGIN_OBJECT(1586)", "Delete InfixExpression: ==(1587)", "Delete InfixExpression: ||(1588)", "Delete SimpleName: count(1589)", "Delete PostfixExpression: ++(1590)", "Delete ExpressionStatement(1591)", "Delete Block(1592)", "Delete SimpleName: token(1593)", "Delete QualifiedName: JsonToken.END_ARRAY(1594)", "Delete InfixExpression: ==(1595)", "Delete SimpleName: token(1596)", "Delete QualifiedName: JsonToken.END_OBJECT(1597)", "Delete InfixExpression: ==(1598)", "Delete InfixExpression: ||(1599)", "Delete SimpleName: count(1600)", "Delete PostfixExpression: --(1601)", "Delete ExpressionStatement(1602)", "Delete Block(1603)", "Delete IfStatement(1604)", "Delete IfStatement(1605)", "Delete Block(1606)", "Delete SimpleName: count(1607)", "Delete NumberLiteral: 0(1608)", "Delete InfixExpression: !=(1609)", "Delete DoStatement(1610)", "Delete Block(1611)", "Delete SimpleName: skipping(1612)", "Delete BooleanLiteral: false(1613)", "Delete Assignment: =(1614)", "Delete ExpressionStatement(1615)", "Delete Block(1616)", "Delete TryStatement(1617)", "Delete Block(1618)", "Delete MethodDeclaration(1619)", "Delete Modifier: private(1620)", "Delete PrimitiveType: void(1621)", "Delete SimpleName: push(1622)", "Delete PrimitiveType: int(1623)", "Delete SimpleName: newTop(1624)", "Delete SingleVariableDeclaration(1625)", "Delete SimpleName: stackSize(1626)", "Delete QualifiedName: stack.length(1627)", "Delete InfixExpression: ==(1628)", "Delete PrimitiveType: int(1629)", "Delete Dimension(1630)", "Delete ArrayType: int[](1631)", "Delete SimpleName: newStack(1632)", "Delete PrimitiveType: int(1633)", "Delete Dimension(1634)", "Delete ArrayType: int[](1635)", "Delete SimpleName: stackSize(1636)", "Delete NumberLiteral: 2(1637)", "Delete InfixExpression: *(1638)", "Delete ArrayCreation(1639)", "Delete VariableDeclarationFragment(1640)", "Delete VariableDeclarationStatement(1641)", "Delete SimpleName: System(1642)", "Delete SimpleName: arraycopy(1643)", "Delete SimpleName: stack(1644)", "Delete NumberLiteral: 0(1645)", "Delete SimpleName: newStack(1646)", "Delete NumberLiteral: 0(1647)", "Delete SimpleName: stackSize(1648)", "Delete MethodInvocation(1649)", "Delete ExpressionStatement(1650)", "Delete SimpleName: stack(1651)", "Delete SimpleName: newStack(1652)", "Delete Assignment: =(1653)", "Delete ExpressionStatement(1654)", "Delete Block(1655)", "Delete IfStatement(1656)", "Delete SimpleName: stack(1657)", "Delete SimpleName: stackSize(1658)", "Delete PostfixExpression: ++(1659)", "Delete ArrayAccess(1660)", "Delete SimpleName: newTop(1661)", "Delete Assignment: =(1662)", "Delete ExpressionStatement(1663)", "Delete Block(1664)", "Delete MethodDeclaration(1665)", "Delete SimpleName: SuppressWarnings(1666)", "Delete StringLiteral: \"fallthrough\"(1667)", "Delete SingleMemberAnnotation(1668)", "Delete Modifier: private(1669)", "Delete SimpleName: JsonToken(1670)", "Delete SimpleType: JsonToken(1671)", "Delete SimpleName: nextInArray(1672)", "Delete PrimitiveType: boolean(1673)", "Delete SimpleName: firstElement(1674)", "Delete SingleVariableDeclaration(1675)", "Delete SimpleName: IOException(1676)", "Delete SimpleType: IOException(1677)", "Delete SimpleName: firstElement(1678)", "Delete SimpleName: stack(1679)", "Delete SimpleName: stackSize(1680)", "Delete NumberLiteral: 1(1681)", "Delete InfixExpression: -(1682)", "Delete ArrayAccess(1683)", "Delete SimpleName: NONEMPTY_ARRAY(1684)", "Delete Assignment: =(1685)", "Delete ExpressionStatement(1686)", "Delete Block(1687)", "Delete SimpleName: nextNonWhitespace(1688)", "Delete BooleanLiteral: true(1689)", "Delete MethodInvocation(1690)", "Delete CharacterLiteral: ']'(1691)", "Delete SwitchCase(1692)", "Delete SimpleName: stackSize(1693)", "Delete PostfixExpression: --(1694)", "Delete ExpressionStatement(1695)", "Delete SimpleName: token(1696)", "Delete QualifiedName: JsonToken.END_ARRAY(1697)", "Delete Assignment: =(1698)", "Delete ReturnStatement(1699)", "Delete CharacterLiteral: ';'(1700)", "Delete SwitchCase(1701)", "Delete SimpleName: checkLenient(1702)", "Delete MethodInvocation(1703)", "Delete ExpressionStatement(1704)", "Delete CharacterLiteral: ','(1705)", "Delete SwitchCase(1706)", "Delete BreakStatement(1707)", "Delete SwitchCase(1708)", "Delete SimpleName: syntaxError(1709)", "Delete StringLiteral: \"Unterminated array\"(1710)", "Delete MethodInvocation(1711)", "Delete ThrowStatement(1712)", "Delete SwitchStatement(1713)", "Delete Block(1714)", "Delete IfStatement(1715)", "Delete SimpleName: nextNonWhitespace(1716)", "Delete BooleanLiteral: true(1717)", "Delete MethodInvocation(1718)", "Delete CharacterLiteral: ']'(1719)", "Delete SwitchCase(1720)", "Delete SimpleName: firstElement(1721)", "Delete SimpleName: stackSize(1722)", "Delete PostfixExpression: --(1723)", "Delete ExpressionStatement(1724)", "Delete SimpleName: token(1725)", "Delete QualifiedName: JsonToken.END_ARRAY(1726)", "Delete Assignment: =(1727)", "Delete ReturnStatement(1728)", "Delete Block(1729)", "Delete IfStatement(1730)", "Delete CharacterLiteral: ';'(1731)", "Delete SwitchCase(1732)", "Delete CharacterLiteral: ','(1733)", "Delete SwitchCase(1734)", "Delete SimpleName: checkLenient(1735)", "Delete MethodInvocation(1736)", "Delete ExpressionStatement(1737)", "Delete SimpleName: pos(1738)", "Delete PostfixExpression: --(1739)", "Delete ExpressionStatement(1740)", "Delete SimpleName: value(1741)", "Delete StringLiteral: \"null\"(1742)", "Delete Assignment: =(1743)", "Delete ExpressionStatement(1744)", "Delete SimpleName: token(1745)", "Delete QualifiedName: JsonToken.NULL(1746)", "Delete Assignment: =(1747)", "Delete ReturnStatement(1748)", "Delete SwitchCase(1749)", "Delete SimpleName: pos(1750)", "Delete PostfixExpression: --(1751)", "Delete ExpressionStatement(1752)", "Delete SimpleName: nextValue(1753)", "Delete MethodInvocation(1754)", "Delete ReturnStatement(1755)", "Delete SwitchStatement(1756)", "Delete Block(1757)", "Delete MethodDeclaration(1758)", "Delete SimpleName: SuppressWarnings(1759)", "Delete StringLiteral: \"fallthrough\"(1760)", "Delete SingleMemberAnnotation(1761)", "Delete Modifier: private(1762)", "Delete SimpleName: JsonToken(1763)", "Delete SimpleType: JsonToken(1764)", "Delete SimpleName: nextInObject(1765)", "Delete PrimitiveType: boolean(1766)", "Delete SimpleName: firstElement(1767)", "Delete SingleVariableDeclaration(1768)", "Delete SimpleName: IOException(1769)", "Delete SimpleType: IOException(1770)", "Delete SimpleName: firstElement(1771)", "Delete SimpleName: nextNonWhitespace(1772)", "Delete BooleanLiteral: true(1773)", "Delete MethodInvocation(1774)", "Delete CharacterLiteral: '}'(1775)", "Delete SwitchCase(1776)", "Delete SimpleName: stackSize(1777)", "Delete PostfixExpression: --(1778)", "Delete ExpressionStatement(1779)", "Delete SimpleName: token(1780)", "Delete QualifiedName: JsonToken.END_OBJECT(1781)", "Delete Assignment: =(1782)", "Delete ReturnStatement(1783)", "Delete SwitchCase(1784)", "Delete SimpleName: pos(1785)", "Delete PostfixExpression: --(1786)", "Delete ExpressionStatement(1787)", "Delete SwitchStatement(1788)", "Delete Block(1789)", "Delete SimpleName: nextNonWhitespace(1790)", "Delete BooleanLiteral: true(1791)", "Delete MethodInvocation(1792)", "Delete CharacterLiteral: '}'(1793)", "Delete SwitchCase(1794)", "Delete SimpleName: stackSize(1795)", "Delete PostfixExpression: --(1796)", "Delete ExpressionStatement(1797)", "Delete SimpleName: token(1798)", "Delete QualifiedName: JsonToken.END_OBJECT(1799)", "Delete Assignment: =(1800)", "Delete ReturnStatement(1801)", "Delete CharacterLiteral: ';'(1802)", "Delete SwitchCase(1803)", "Delete CharacterLiteral: ','(1804)", "Delete SwitchCase(1805)", "Delete BreakStatement(1806)", "Delete SwitchCase(1807)", "Delete SimpleName: syntaxError(1808)", "Delete StringLiteral: \"Unterminated object\"(1809)", "Delete MethodInvocation(1810)", "Delete ThrowStatement(1811)", "Delete SwitchStatement(1812)", "Delete Block(1813)", "Delete IfStatement(1814)", "Delete PrimitiveType: int(1815)", "Delete SimpleName: quote(1816)", "Delete SimpleName: nextNonWhitespace(1817)", "Delete BooleanLiteral: true(1818)", "Delete MethodInvocation(1819)", "Delete VariableDeclarationFragment(1820)", "Delete VariableDeclarationStatement(1821)", "Delete SimpleName: quote(1822)", "Delete CharacterLiteral: '\\''(1823)", "Delete SwitchCase(1824)", "Delete SimpleName: checkLenient(1825)", "Delete MethodInvocation(1826)", "Delete ExpressionStatement(1827)", "Delete CharacterLiteral: '\"'(1828)", "Delete SwitchCase(1829)", "Delete SimpleName: name(1830)", "Delete SimpleName: nextString(1831)", "Delete PrimitiveType: char(1832)", "Delete SimpleName: quote(1833)", "Delete CastExpression(1834)", "Delete MethodInvocation(1835)", "Delete Assignment: =(1836)", "Delete ExpressionStatement(1837)", "Delete BreakStatement(1838)", "Delete SwitchCase(1839)", "Delete SimpleName: checkLenient(1840)", "Delete MethodInvocation(1841)", "Delete ExpressionStatement(1842)", "Delete SimpleName: pos(1843)", "Delete PostfixExpression: --(1844)", "Delete ExpressionStatement(1845)", "Delete SimpleName: name(1846)", "Delete SimpleName: nextLiteral(1847)", "Delete BooleanLiteral: false(1848)", "Delete MethodInvocation(1849)", "Delete Assignment: =(1850)", "Delete ExpressionStatement(1851)", "Delete SimpleName: name(1852)", "Delete SimpleName: length(1853)", "Delete MethodInvocation(1854)", "Delete NumberLiteral: 0(1855)", "Delete InfixExpression: ==(1856)", "Delete SimpleName: syntaxError(1857)", "Delete StringLiteral: \"Expected name\"(1858)", "Delete MethodInvocation(1859)", "Delete ThrowStatement(1860)", "Delete Block(1861)", "Delete IfStatement(1862)", "Delete SwitchStatement(1863)", "Delete SimpleName: stack(1864)", "Delete SimpleName: stackSize(1865)", "Delete NumberLiteral: 1(1866)", "Delete InfixExpression: -(1867)", "Delete ArrayAccess(1868)", "Delete SimpleName: DANGLING_NAME(1869)", "Delete Assignment: =(1870)", "Delete ExpressionStatement(1871)", "Delete SimpleName: token(1872)", "Delete QualifiedName: JsonToken.NAME(1873)", "Delete Assignment: =(1874)", "Delete ReturnStatement(1875)", "Delete Block(1876)", "Delete MethodDeclaration(1877)", "Delete Modifier: private(1878)", "Delete SimpleName: JsonToken(1879)", "Delete SimpleType: JsonToken(1880)", "Delete SimpleName: objectValue(1881)", "Delete SimpleName: IOException(1882)", "Delete SimpleType: IOException(1883)", "Delete SimpleName: nextNonWhitespace(1884)", "Delete BooleanLiteral: true(1885)", "Delete MethodInvocation(1886)", "Delete CharacterLiteral: ':'(1887)", "Delete SwitchCase(1888)", "Delete BreakStatement(1889)", "Delete CharacterLiteral: '='(1890)", "Delete SwitchCase(1891)", "Delete SimpleName: checkLenient(1892)", "Delete MethodInvocation(1893)", "Delete ExpressionStatement(1894)", "Delete SimpleName: pos(1895)", "Delete SimpleName: limit(1896)", "Delete InfixExpression: <(1897)", "Delete SimpleName: fillBuffer(1898)", "Delete NumberLiteral: 1(1899)", "Delete MethodInvocation(1900)", "Delete InfixExpression: ||(1901)", "Delete ParenthesizedExpression(1902)", "Delete SimpleName: buffer(1903)", "Delete SimpleName: pos(1904)", "Delete ArrayAccess(1905)", "Delete CharacterLiteral: '>'(1906)", "Delete InfixExpression: ==(1907)", "Delete InfixExpression: &&(1908)", "Delete SimpleName: pos(1909)", "Delete PostfixExpression: ++(1910)", "Delete ExpressionStatement(1911)", "Delete Block(1912)", "Delete IfStatement(1913)", "Delete BreakStatement(1914)", "Delete SwitchCase(1915)", "Delete SimpleName: syntaxError(1916)", "Delete StringLiteral: \"Expected ':'\"(1917)", "Delete MethodInvocation(1918)", "Delete ThrowStatement(1919)", "Delete SwitchStatement(1920)", "Delete SimpleName: stack(1921)", "Delete SimpleName: stackSize(1922)", "Delete NumberLiteral: 1(1923)", "Delete InfixExpression: -(1924)", "Delete ArrayAccess(1925)", "Delete SimpleName: NONEMPTY_OBJECT(1926)", "Delete Assignment: =(1927)", "Delete ExpressionStatement(1928)", "Delete SimpleName: nextValue(1929)", "Delete MethodInvocation(1930)", "Delete ReturnStatement(1931)", "Delete Block(1932)", "Delete MethodDeclaration(1933)", "Delete SimpleName: SuppressWarnings(1934)", "Delete StringLiteral: \"fallthrough\"(1935)", "Delete SingleMemberAnnotation(1936)", "Delete Modifier: private(1937)", "Delete SimpleName: JsonToken(1938)", "Delete SimpleType: JsonToken(1939)", "Delete SimpleName: nextValue(1940)", "Delete SimpleName: IOException(1941)", "Delete SimpleType: IOException(1942)", "Delete PrimitiveType: int(1943)", "Delete SimpleName: c(1944)", "Delete SimpleName: nextNonWhitespace(1945)", "Delete BooleanLiteral: true(1946)", "Delete MethodInvocation(1947)", "Delete VariableDeclarationFragment(1948)", "Delete VariableDeclarationStatement(1949)", "Delete SimpleName: c(1950)", "Delete CharacterLiteral: '{'(1951)", "Delete SwitchCase(1952)", "Delete SimpleName: push(1953)", "Delete SimpleName: EMPTY_OBJECT(1954)", "Delete MethodInvocation(1955)", "Delete ExpressionStatement(1956)", "Delete SimpleName: token(1957)", "Delete QualifiedName: JsonToken.BEGIN_OBJECT(1958)", "Delete Assignment: =(1959)", "Delete ReturnStatement(1960)", "Delete CharacterLiteral: '['(1961)", "Delete SwitchCase(1962)", "Delete SimpleName: push(1963)", "Delete SimpleName: EMPTY_ARRAY(1964)", "Delete MethodInvocation(1965)", "Delete ExpressionStatement(1966)", "Delete SimpleName: token(1967)", "Delete QualifiedName: JsonToken.BEGIN_ARRAY(1968)", "Delete Assignment: =(1969)", "Delete ReturnStatement(1970)", "Delete CharacterLiteral: '\\''(1971)", "Delete SwitchCase(1972)", "Delete SimpleName: checkLenient(1973)", "Delete MethodInvocation(1974)", "Delete ExpressionStatement(1975)", "Delete CharacterLiteral: '\"'(1976)", "Delete SwitchCase(1977)", "Delete SimpleName: value(1978)", "Delete SimpleName: nextString(1979)", "Delete PrimitiveType: char(1980)", "Delete SimpleName: c(1981)", "Delete CastExpression(1982)", "Delete MethodInvocation(1983)", "Delete Assignment: =(1984)", "Delete ExpressionStatement(1985)", "Delete SimpleName: token(1986)", "Delete QualifiedName: JsonToken.STRING(1987)", "Delete Assignment: =(1988)", "Delete ReturnStatement(1989)", "Delete SwitchCase(1990)", "Delete SimpleName: pos(1991)", "Delete PostfixExpression: --(1992)", "Delete ExpressionStatement(1993)", "Delete SimpleName: readLiteral(1994)", "Delete MethodInvocation(1995)", "Delete ReturnStatement(1996)", "Delete SwitchStatement(1997)", "Delete Block(1998)", "Delete MethodDeclaration(1999)", "Delete TextElement: Returns true once (2000)", "Delete TextElement:  limit - pos >= minimum(2001)", "Delete TagElement: @code(2002)", "Delete TextElement: . If the data is(2003)", "Delete TextElement: exhausted before that many characters are available, this returns(2004)", "Delete TextElement: false.(2005)", "Delete TagElement(2006)", "Delete Javadoc(2007)", "Delete Modifier: private(2008)", "Delete PrimitiveType: boolean(2009)", "Delete SimpleName: fillBuffer(2010)", "Delete PrimitiveType: int(2011)", "Delete SimpleName: minimum(2012)", "Delete SingleVariableDeclaration(2013)", "Delete SimpleName: IOException(2014)", "Delete SimpleType: IOException(2015)", "Delete PrimitiveType: char(2016)", "Delete Dimension(2017)", "Delete ArrayType: char[](2018)", "Delete SimpleName: buffer(2019)", "Delete ThisExpression(2020)", "Delete SimpleName: buffer(2021)", "Delete FieldAccess(2022)", "Delete VariableDeclarationFragment(2023)", "Delete VariableDeclarationStatement(2024)", "Delete PrimitiveType: int(2025)", "Delete SimpleName: line(2026)", "Delete SimpleName: bufferStartLine(2027)", "Delete VariableDeclarationFragment(2028)", "Delete VariableDeclarationStatement(2029)", "Delete PrimitiveType: int(2030)", "Delete SimpleName: column(2031)", "Delete SimpleName: bufferStartColumn(2032)", "Delete VariableDeclarationFragment(2033)", "Delete VariableDeclarationStatement(2034)", "Delete PrimitiveType: int(2035)", "Delete SimpleName: i(2036)", "Delete NumberLiteral: 0(2037)", "Delete VariableDeclarationFragment(2038)", "Delete SimpleName: p(2039)", "Delete SimpleName: pos(2040)", "Delete VariableDeclarationFragment(2041)", "Delete VariableDeclarationExpression(2042)", "Delete SimpleName: i(2043)", "Delete SimpleName: p(2044)", "Delete InfixExpression: <(2045)", "Delete SimpleName: i(2046)", "Delete PostfixExpression: ++(2047)", "Delete SimpleName: buffer(2048)", "Delete SimpleName: i(2049)", "Delete ArrayAccess(2050)", "Delete CharacterLiteral: '\\n'(2051)", "Delete InfixExpression: ==(2052)", "Delete SimpleName: line(2053)", "Delete PostfixExpression: ++(2054)", "Delete ExpressionStatement(2055)", "Delete SimpleName: column(2056)", "Delete NumberLiteral: 1(2057)", "Delete Assignment: =(2058)", "Delete ExpressionStatement(2059)", "Delete Block(2060)", "Delete SimpleName: column(2061)", "Delete PostfixExpression: ++(2062)", "Delete ExpressionStatement(2063)", "Delete Block(2064)", "Delete IfStatement(2065)", "Delete Block(2066)", "Delete ForStatement(2067)", "Delete SimpleName: bufferStartLine(2068)", "Delete SimpleName: line(2069)", "Delete Assignment: =(2070)", "Delete ExpressionStatement(2071)", "Delete SimpleName: bufferStartColumn(2072)", "Delete SimpleName: column(2073)", "Delete Assignment: =(2074)", "Delete ExpressionStatement(2075)", "Delete SimpleName: limit(2076)", "Delete SimpleName: pos(2077)", "Delete InfixExpression: !=(2078)", "Delete SimpleName: limit(2079)", "Delete SimpleName: pos(2080)", "Delete Assignment: -=(2081)", "Delete ExpressionStatement(2082)", "Delete SimpleName: System(2083)", "Delete SimpleName: arraycopy(2084)", "Delete SimpleName: buffer(2085)", "Delete SimpleName: pos(2086)", "Delete SimpleName: buffer(2087)", "Delete NumberLiteral: 0(2088)", "Delete SimpleName: limit(2089)", "Delete MethodInvocation(2090)", "Delete ExpressionStatement(2091)", "Delete Block(2092)", "Delete SimpleName: limit(2093)", "Delete NumberLiteral: 0(2094)", "Delete Assignment: =(2095)", "Delete ExpressionStatement(2096)", "Delete Block(2097)", "Delete IfStatement(2098)", "Delete SimpleName: pos(2099)", "Delete NumberLiteral: 0(2100)", "Delete Assignment: =(2101)", "Delete ExpressionStatement(2102)", "Delete PrimitiveType: int(2103)", "Delete SimpleName: total(2104)", "Delete VariableDeclarationFragment(2105)", "Delete VariableDeclarationStatement(2106)", "Delete SimpleName: total(2107)", "Delete SimpleName: in(2108)", "Delete SimpleName: read(2109)", "Delete SimpleName: buffer(2110)", "Delete SimpleName: limit(2111)", "Delete QualifiedName: buffer.length(2112)", "Delete SimpleName: limit(2113)", "Delete InfixExpression: -(2114)", "Delete MethodInvocation(2115)", "Delete Assignment: =(2116)", "Delete ParenthesizedExpression(2117)", "Delete NumberLiteral: 1(2118)", "Delete PrefixExpression: -(2119)", "Delete InfixExpression: !=(2120)", "Delete SimpleName: limit(2121)", "Delete SimpleName: total(2122)", "Delete Assignment: +=(2123)", "Delete ExpressionStatement(2124)", "Delete SimpleName: bufferStartLine(2125)", "Delete NumberLiteral: 1(2126)", "Delete InfixExpression: ==(2127)", "Delete SimpleName: bufferStartColumn(2128)", "Delete NumberLiteral: 1(2129)", "Delete InfixExpression: ==(2130)", "Delete InfixExpression: &&(2131)", "Delete SimpleName: limit(2132)", "Delete NumberLiteral: 0(2133)", "Delete InfixExpression: >(2134)", "Delete InfixExpression: &&(2135)", "Delete SimpleName: buffer(2136)", "Delete NumberLiteral: 0(2137)", "Delete ArrayAccess(2138)", "Delete CharacterLiteral: '\\ufeff'(2139)", "Delete InfixExpression: ==(2140)", "Delete InfixExpression: &&(2141)", "Delete SimpleName: pos(2142)", "Delete PostfixExpression: ++(2143)", "Delete ExpressionStatement(2144)", "Delete SimpleName: bufferStartColumn(2145)", "Delete PostfixExpression: --(2146)", "Delete ExpressionStatement(2147)", "Delete Block(2148)", "Delete IfStatement(2149)", "Delete SimpleName: limit(2150)", "Delete SimpleName: minimum(2151)", "Delete InfixExpression: >=(2152)", "Delete BooleanLiteral: true(2153)", "Delete ReturnStatement(2154)", "Delete Block(2155)", "Delete IfStatement(2156)", "Delete Block(2157)", "Delete WhileStatement(2158)", "Delete BooleanLiteral: false(2159)", "Delete ReturnStatement(2160)", "Delete Block(2161)", "Delete MethodDeclaration(2162)", "Delete Modifier: private(2163)", "Delete PrimitiveType: int(2164)", "Delete SimpleName: getLineNumber(2165)", "Delete PrimitiveType: int(2166)", "Delete SimpleName: result(2167)", "Delete SimpleName: bufferStartLine(2168)", "Delete VariableDeclarationFragment(2169)", "Delete VariableDeclarationStatement(2170)", "Delete PrimitiveType: int(2171)", "Delete SimpleName: i(2172)", "Delete NumberLiteral: 0(2173)", "Delete VariableDeclarationFragment(2174)", "Delete VariableDeclarationExpression(2175)", "Delete SimpleName: i(2176)", "Delete SimpleName: pos(2177)", "Delete InfixExpression: <(2178)", "Delete SimpleName: i(2179)", "Delete PostfixExpression: ++(2180)", "Delete SimpleName: buffer(2181)", "Delete SimpleName: i(2182)", "Delete ArrayAccess(2183)", "Delete CharacterLiteral: '\\n'(2184)", "Delete InfixExpression: ==(2185)", "Delete SimpleName: result(2186)", "Delete PostfixExpression: ++(2187)", "Delete ExpressionStatement(2188)", "Delete Block(2189)", "Delete IfStatement(2190)", "Delete Block(2191)", "Delete ForStatement(2192)", "Delete SimpleName: result(2193)", "Delete ReturnStatement(2194)", "Delete Block(2195)", "Delete MethodDeclaration(2196)", "Delete Modifier: private(2197)", "Delete PrimitiveType: int(2198)", "Delete SimpleName: getColumnNumber(2199)", "Delete PrimitiveType: int(2200)", "Delete SimpleName: result(2201)", "Delete SimpleName: bufferStartColumn(2202)", "Delete VariableDeclarationFragment(2203)", "Delete VariableDeclarationStatement(2204)", "Delete PrimitiveType: int(2205)", "Delete SimpleName: i(2206)", "Delete NumberLiteral: 0(2207)", "Delete VariableDeclarationFragment(2208)", "Delete VariableDeclarationExpression(2209)", "Delete SimpleName: i(2210)", "Delete SimpleName: pos(2211)", "Delete InfixExpression: <(2212)", "Delete SimpleName: i(2213)", "Delete PostfixExpression: ++(2214)", "Delete SimpleName: buffer(2215)", "Delete SimpleName: i(2216)", "Delete ArrayAccess(2217)", "Delete CharacterLiteral: '\\n'(2218)", "Delete InfixExpression: ==(2219)", "Delete SimpleName: result(2220)", "Delete NumberLiteral: 1(2221)", "Delete Assignment: =(2222)", "Delete ExpressionStatement(2223)", "Delete Block(2224)", "Delete SimpleName: result(2225)", "Delete PostfixExpression: ++(2226)", "Delete ExpressionStatement(2227)", "Delete Block(2228)", "Delete IfStatement(2229)", "Delete Block(2230)", "Delete ForStatement(2231)", "Delete SimpleName: result(2232)", "Delete ReturnStatement(2233)", "Delete Block(2234)", "Delete MethodDeclaration(2235)", "Delete TextElement: Returns the next character in the stream that is neither whitespace nor a(2236)", "Delete TextElement: part of a comment. When this returns, the returned character is always at(2237)", "Delete TextElement:  buffer[pos-1](2238)", "Delete TagElement: @code(2239)", "Delete TextElement: ; this means the caller can always push back the(2240)", "Delete TextElement: returned character by decrementing (2241)", "Delete TextElement:  pos(2242)", "Delete TagElement: @code(2243)", "Delete TextElement: .(2244)", "Delete TagElement(2245)", "Delete Javadoc(2246)", "Delete Modifier: private(2247)", "Delete PrimitiveType: int(2248)", "Delete SimpleName: nextNonWhitespace(2249)", "Delete PrimitiveType: boolean(2250)", "Delete SimpleName: throwOnEof(2251)", "Delete SingleVariableDeclaration(2252)", "Delete SimpleName: IOException(2253)", "Delete SimpleType: IOException(2254)", "Delete PrimitiveType: char(2255)", "Delete Dimension(2256)", "Delete ArrayType: char[](2257)", "Delete SimpleName: buffer(2258)", "Delete ThisExpression(2259)", "Delete SimpleName: buffer(2260)", "Delete FieldAccess(2261)", "Delete VariableDeclarationFragment(2262)", "Delete VariableDeclarationStatement(2263)", "Delete PrimitiveType: int(2264)", "Delete SimpleName: p(2265)", "Delete SimpleName: pos(2266)", "Delete VariableDeclarationFragment(2267)", "Delete VariableDeclarationStatement(2268)", "Delete PrimitiveType: int(2269)", "Delete SimpleName: l(2270)", "Delete SimpleName: limit(2271)", "Delete VariableDeclarationFragment(2272)", "Delete VariableDeclarationStatement(2273)", "Delete BooleanLiteral: true(2274)", "Delete SimpleName: p(2275)", "Delete SimpleName: l(2276)", "Delete InfixExpression: ==(2277)", "Delete SimpleName: pos(2278)", "Delete SimpleName: p(2279)", "Delete Assignment: =(2280)", "Delete ExpressionStatement(2281)", "Delete SimpleName: fillBuffer(2282)", "Delete NumberLiteral: 1(2283)", "Delete MethodInvocation(2284)", "Delete PrefixExpression: !(2285)", "Delete BreakStatement(2286)", "Delete Block(2287)", "Delete IfStatement(2288)", "Delete SimpleName: p(2289)", "Delete SimpleName: pos(2290)", "Delete Assignment: =(2291)", "Delete ExpressionStatement(2292)", "Delete SimpleName: l(2293)", "Delete SimpleName: limit(2294)", "Delete Assignment: =(2295)", "Delete ExpressionStatement(2296)", "Delete Block(2297)", "Delete IfStatement(2298)", "Delete PrimitiveType: int(2299)", "Delete SimpleName: c(2300)", "Delete SimpleName: buffer(2301)", "Delete SimpleName: p(2302)", "Delete PostfixExpression: ++(2303)", "Delete ArrayAccess(2304)", "Delete VariableDeclarationFragment(2305)", "Delete VariableDeclarationStatement(2306)", "Delete SimpleName: c(2307)", "Delete CharacterLiteral: '\\t'(2308)", "Delete SwitchCase(2309)", "Delete CharacterLiteral: ' '(2310)", "Delete SwitchCase(2311)", "Delete CharacterLiteral: '\\n'(2312)", "Delete SwitchCase(2313)", "Delete CharacterLiteral: '\\r'(2314)", "Delete SwitchCase(2315)", "Delete ContinueStatement(2316)", "Delete CharacterLiteral: '/'(2317)", "Delete SwitchCase(2318)", "Delete SimpleName: pos(2319)", "Delete SimpleName: p(2320)", "Delete Assignment: =(2321)", "Delete ExpressionStatement(2322)", "Delete SimpleName: p(2323)", "Delete SimpleName: l(2324)", "Delete InfixExpression: ==(2325)", "Delete SimpleName: pos(2326)", "Delete PostfixExpression: --(2327)", "Delete ExpressionStatement(2328)", "Delete PrimitiveType: boolean(2329)", "Delete SimpleName: charsLoaded(2330)", "Delete SimpleName: fillBuffer(2331)", "Delete NumberLiteral: 2(2332)", "Delete MethodInvocation(2333)", "Delete VariableDeclarationFragment(2334)", "Delete VariableDeclarationStatement(2335)", "Delete SimpleName: pos(2336)", "Delete PostfixExpression: ++(2337)", "Delete ExpressionStatement(2338)", "Delete SimpleName: charsLoaded(2339)", "Delete PrefixExpression: !(2340)", "Delete SimpleName: c(2341)", "Delete ReturnStatement(2342)", "Delete Block(2343)", "Delete IfStatement(2344)", "Delete Block(2345)", "Delete IfStatement(2346)", "Delete SimpleName: checkLenient(2347)", "Delete MethodInvocation(2348)", "Delete ExpressionStatement(2349)", "Delete PrimitiveType: char(2350)", "Delete SimpleName: peek(2351)", "Delete SimpleName: buffer(2352)", "Delete SimpleName: pos(2353)", "Delete ArrayAccess(2354)", "Delete VariableDeclarationFragment(2355)", "Delete VariableDeclarationStatement(2356)", "Delete SimpleName: peek(2357)", "Delete CharacterLiteral: '*'(2358)", "Delete SwitchCase(2359)", "Delete SimpleName: pos(2360)", "Delete PostfixExpression: ++(2361)", "Delete ExpressionStatement(2362)", "Delete SimpleName: skipTo(2363)", "Delete StringLiteral: \"*/\"(2364)", "Delete MethodInvocation(2365)", "Delete PrefixExpression: !(2366)", "Delete SimpleName: syntaxError(2367)", "Delete StringLiteral: \"Unterminated comment\"(2368)", "Delete MethodInvocation(2369)", "Delete ThrowStatement(2370)", "Delete Block(2371)", "Delete IfStatement(2372)", "Delete SimpleName: p(2373)", "Delete SimpleName: pos(2374)", "Delete NumberLiteral: 2(2375)", "Delete InfixExpression: +(2376)", "Delete Assignment: =(2377)", "Delete ExpressionStatement(2378)", "Delete SimpleName: l(2379)", "Delete SimpleName: limit(2380)", "Delete Assignment: =(2381)", "Delete ExpressionStatement(2382)", "Delete ContinueStatement(2383)", "Delete CharacterLiteral: '/'(2384)", "Delete SwitchCase(2385)", "Delete SimpleName: pos(2386)", "Delete PostfixExpression: ++(2387)", "Delete ExpressionStatement(2388)", "Delete SimpleName: skipToEndOfLine(2389)", "Delete MethodInvocation(2390)", "Delete ExpressionStatement(2391)", "Delete SimpleName: p(2392)", "Delete SimpleName: pos(2393)", "Delete Assignment: =(2394)", "Delete ExpressionStatement(2395)", "Delete SimpleName: l(2396)", "Delete SimpleName: limit(2397)", "Delete Assignment: =(2398)", "Delete ExpressionStatement(2399)", "Delete ContinueStatement(2400)", "Delete SwitchCase(2401)", "Delete SimpleName: c(2402)", "Delete ReturnStatement(2403)", "Delete SwitchStatement(2404)", "Delete CharacterLiteral: '#'(2405)", "Delete SwitchCase(2406)", "Delete SimpleName: pos(2407)", "Delete SimpleName: p(2408)", "Delete Assignment: =(2409)", "Delete ExpressionStatement(2410)", "Delete SimpleName: checkLenient(2411)", "Delete MethodInvocation(2412)", "Delete ExpressionStatement(2413)", "Delete SimpleName: skipToEndOfLine(2414)", "Delete MethodInvocation(2415)", "Delete ExpressionStatement(2416)", "Delete SimpleName: p(2417)", "Delete SimpleName: pos(2418)", "Delete Assignment: =(2419)", "Delete ExpressionStatement(2420)", "Delete SimpleName: l(2421)", "Delete SimpleName: limit(2422)", "Delete Assignment: =(2423)", "Delete ExpressionStatement(2424)", "Delete ContinueStatement(2425)", "Delete SwitchCase(2426)", "Delete SimpleName: pos(2427)", "Delete SimpleName: p(2428)", "Delete Assignment: =(2429)", "Delete ExpressionStatement(2430)", "Delete SimpleName: c(2431)", "Delete ReturnStatement(2432)", "Delete SwitchStatement(2433)", "Delete Block(2434)", "Delete WhileStatement(2435)", "Delete SimpleName: throwOnEof(2436)", "Delete SimpleName: EOFException(2437)", "Delete SimpleType: EOFException(2438)", "Delete StringLiteral: \"End of input\"(2439)", "Delete StringLiteral: \" at line \"(2440)", "Delete InfixExpression: +(2441)", "Delete SimpleName: getLineNumber(2442)", "Delete MethodInvocation(2443)", "Delete StringLiteral: \" column \"(2444)", "Delete SimpleName: getColumnNumber(2445)", "Delete MethodInvocation(2446)", "Delete InfixExpression: +(2447)", "Delete ClassInstanceCreation(2448)", "Delete ThrowStatement(2449)", "Delete Block(2450)", "Delete NumberLiteral: 1(2451)", "Delete PrefixExpression: -(2452)", "Delete ReturnStatement(2453)", "Delete Block(2454)", "Delete IfStatement(2455)", "Delete Block(2456)", "Delete MethodDeclaration(2457)", "Delete Modifier: private(2458)", "Delete PrimitiveType: void(2459)", "Delete SimpleName: checkLenient(2460)", "Delete SimpleName: IOException(2461)", "Delete SimpleType: IOException(2462)", "Delete SimpleName: lenient(2463)", "Delete PrefixExpression: !(2464)", "Delete SimpleName: syntaxError(2465)", "Delete StringLiteral: \"Use JsonReader.setLenient(true) to accept malformed JSON\"(2466)", "Delete MethodInvocation(2467)", "Delete ThrowStatement(2468)", "Delete Block(2469)", "Delete IfStatement(2470)", "Delete Block(2471)", "Delete MethodDeclaration(2472)", "Delete TextElement: Advances the position until after the next newline character. If the line(2473)", "Delete TextElement: is terminated by \"\\r\\n\", the '\\n' must be consumed as whitespace by the(2474)", "Delete TextElement: caller.(2475)", "Delete TagElement(2476)", "Delete Javadoc(2477)", "Delete Modifier: private(2478)", "Delete PrimitiveType: void(2479)", "Delete SimpleName: skipToEndOfLine(2480)", "Delete SimpleName: IOException(2481)", "Delete SimpleType: IOException(2482)", "Delete SimpleName: pos(2483)", "Delete SimpleName: limit(2484)", "Delete InfixExpression: <(2485)", "Delete SimpleName: fillBuffer(2486)", "Delete NumberLiteral: 1(2487)", "Delete MethodInvocation(2488)", "Delete InfixExpression: ||(2489)", "Delete PrimitiveType: char(2490)", "Delete SimpleName: c(2491)", "Delete SimpleName: buffer(2492)", "Delete SimpleName: pos(2493)", "Delete PostfixExpression: ++(2494)", "Delete ArrayAccess(2495)", "Delete VariableDeclarationFragment(2496)", "Delete VariableDeclarationStatement(2497)", "Delete SimpleName: c(2498)", "Delete CharacterLiteral: '\\r'(2499)", "Delete InfixExpression: ==(2500)", "Delete SimpleName: c(2501)", "Delete CharacterLiteral: '\\n'(2502)", "Delete InfixExpression: ==(2503)", "Delete InfixExpression: ||(2504)", "Delete BreakStatement(2505)", "Delete Block(2506)", "Delete IfStatement(2507)", "Delete Block(2508)", "Delete WhileStatement(2509)", "Delete Block(2510)", "Delete MethodDeclaration(2511)", "Delete Modifier: private(2512)", "Delete PrimitiveType: boolean(2513)", "Delete SimpleName: skipTo(2514)", "Delete SimpleName: String(2515)", "Delete SimpleType: String(2516)", "Delete SimpleName: toFind(2517)", "Delete SingleVariableDeclaration(2518)", "Delete SimpleName: IOException(2519)", "Delete SimpleType: IOException(2520)", "Delete SimpleName: outer(2521)", "Delete SimpleName: pos(2522)", "Delete SimpleName: toFind(2523)", "Delete SimpleName: length(2524)", "Delete MethodInvocation(2525)", "Delete InfixExpression: +(2526)", "Delete SimpleName: limit(2527)", "Delete InfixExpression: <=(2528)", "Delete SimpleName: fillBuffer(2529)", "Delete SimpleName: toFind(2530)", "Delete SimpleName: length(2531)", "Delete MethodInvocation(2532)", "Delete MethodInvocation(2533)", "Delete InfixExpression: ||(2534)", "Delete SimpleName: pos(2535)", "Delete PostfixExpression: ++(2536)", "Delete PrimitiveType: int(2537)", "Delete SimpleName: c(2538)", "Delete NumberLiteral: 0(2539)", "Delete VariableDeclarationFragment(2540)", "Delete VariableDeclarationExpression(2541)", "Delete SimpleName: c(2542)", "Delete SimpleName: toFind(2543)", "Delete SimpleName: length(2544)", "Delete MethodInvocation(2545)", "Delete InfixExpression: <(2546)", "Delete SimpleName: c(2547)", "Delete PostfixExpression: ++(2548)", "Delete SimpleName: buffer(2549)", "Delete SimpleName: pos(2550)", "Delete SimpleName: c(2551)", "Delete InfixExpression: +(2552)", "Delete ArrayAccess(2553)", "Delete SimpleName: toFind(2554)", "Delete SimpleName: charAt(2555)", "Delete SimpleName: c(2556)", "Delete MethodInvocation(2557)", "Delete InfixExpression: !=(2558)", "Delete SimpleName: outer(2559)", "Delete ContinueStatement(2560)", "Delete Block(2561)", "Delete IfStatement(2562)", "Delete Block(2563)", "Delete ForStatement(2564)", "Delete BooleanLiteral: true(2565)", "Delete ReturnStatement(2566)", "Delete Block(2567)", "Delete ForStatement(2568)", "Delete LabeledStatement(2569)", "Delete BooleanLiteral: false(2570)", "Delete ReturnStatement(2571)", "Delete Block(2572)", "Delete MethodDeclaration(2573)", "Delete TextElement: Returns the string up to but not including (2574)", "Delete TextElement:  quote(2575)", "Delete TagElement: @code(2576)", "Delete TextElement: , unescaping any(2577)", "Delete TextElement: character escape sequences encountered along the way. The opening quote(2578)", "Delete TextElement: should have already been read. This consumes the closing quote, but does(2579)", "Delete TextElement: not include it in the returned string.(2580)", "Delete TagElement(2581)", "Delete SimpleName: quote(2582)", "Delete TextElement:  either ' or \".(2583)", "Delete TagElement: @param(2584)", "Delete SimpleName: NumberFormatException(2585)", "Delete TextElement:  if any unicode escape sequences are(2586)", "Delete TextElement: malformed.(2587)", "Delete TagElement: @throws(2588)", "Delete Javadoc(2589)", "Delete Modifier: private(2590)", "Delete SimpleName: String(2591)", "Delete SimpleType: String(2592)", "Delete SimpleName: nextString(2593)", "Delete PrimitiveType: char(2594)", "Delete SimpleName: quote(2595)", "Delete SingleVariableDeclaration(2596)", "Delete SimpleName: IOException(2597)", "Delete SimpleType: IOException(2598)", "Delete PrimitiveType: char(2599)", "Delete Dimension(2600)", "Delete ArrayType: char[](2601)", "Delete SimpleName: buffer(2602)", "Delete ThisExpression(2603)", "Delete SimpleName: buffer(2604)", "Delete FieldAccess(2605)", "Delete VariableDeclarationFragment(2606)", "Delete VariableDeclarationStatement(2607)", "Delete SimpleName: StringBuilder(2608)", "Delete SimpleType: StringBuilder(2609)", "Delete SimpleName: builder(2610)", "Delete NullLiteral(2611)", "Delete VariableDeclarationFragment(2612)", "Delete VariableDeclarationStatement(2613)", "Delete BooleanLiteral: true(2614)", "Delete PrimitiveType: int(2615)", "Delete SimpleName: p(2616)", "Delete SimpleName: pos(2617)", "Delete VariableDeclarationFragment(2618)", "Delete VariableDeclarationStatement(2619)", "Delete PrimitiveType: int(2620)", "Delete SimpleName: l(2621)", "Delete SimpleName: limit(2622)", "Delete VariableDeclarationFragment(2623)", "Delete VariableDeclarationStatement(2624)", "Delete PrimitiveType: int(2625)", "Delete SimpleName: start(2626)", "Delete SimpleName: p(2627)", "Delete VariableDeclarationFragment(2628)", "Delete VariableDeclarationStatement(2629)", "Delete SimpleName: p(2630)", "Delete SimpleName: l(2631)", "Delete InfixExpression: <(2632)", "Delete PrimitiveType: int(2633)", "Delete SimpleName: c(2634)", "Delete SimpleName: buffer(2635)", "Delete SimpleName: p(2636)", "Delete PostfixExpression: ++(2637)", "Delete ArrayAccess(2638)", "Delete VariableDeclarationFragment(2639)", "Delete VariableDeclarationStatement(2640)", "Delete SimpleName: c(2641)", "Delete SimpleName: quote(2642)", "Delete InfixExpression: ==(2643)", "Delete SimpleName: pos(2644)", "Delete SimpleName: p(2645)", "Delete Assignment: =(2646)", "Delete ExpressionStatement(2647)", "Delete SimpleName: skipping(2648)", "Delete StringLiteral: \"skipped!\"(2649)", "Delete ReturnStatement(2650)", "Delete Block(2651)", "Delete SimpleName: builder(2652)", "Delete NullLiteral(2653)", "Delete InfixExpression: ==(2654)", "Delete SimpleName: stringPool(2655)", "Delete SimpleName: get(2656)", "Delete SimpleName: buffer(2657)", "Delete SimpleName: start(2658)", "Delete SimpleName: p(2659)", "Delete SimpleName: start(2660)", "Delete NumberLiteral: 1(2661)", "Delete InfixExpression: -(2662)", "Delete MethodInvocation(2663)", "Delete ReturnStatement(2664)", "Delete Block(2665)", "Delete SimpleName: builder(2666)", "Delete SimpleName: append(2667)", "Delete SimpleName: buffer(2668)", "Delete SimpleName: start(2669)", "Delete SimpleName: p(2670)", "Delete SimpleName: start(2671)", "Delete NumberLiteral: 1(2672)", "Delete InfixExpression: -(2673)", "Delete MethodInvocation(2674)", "Delete ExpressionStatement(2675)", "Delete SimpleName: builder(2676)", "Delete SimpleName: toString(2677)", "Delete MethodInvocation(2678)", "Delete ReturnStatement(2679)", "Delete Block(2680)", "Delete IfStatement(2681)", "Delete IfStatement(2682)", "Delete Block(2683)", "Delete SimpleName: c(2684)", "Delete CharacterLiteral: '\\\\'(2685)", "Delete InfixExpression: ==(2686)", "Delete SimpleName: pos(2687)", "Delete SimpleName: p(2688)", "Delete Assignment: =(2689)", "Delete ExpressionStatement(2690)", "Delete SimpleName: builder(2691)", "Delete NullLiteral(2692)", "Delete InfixExpression: ==(2693)", "Delete SimpleName: builder(2694)", "Delete SimpleName: StringBuilder(2695)", "Delete SimpleType: StringBuilder(2696)", "Delete ClassInstanceCreation(2697)", "Delete Assignment: =(2698)", "Delete ExpressionStatement(2699)", "Delete Block(2700)", "Delete IfStatement(2701)", "Delete SimpleName: builder(2702)", "Delete SimpleName: append(2703)", "Delete SimpleName: buffer(2704)", "Delete SimpleName: start(2705)", "Delete SimpleName: p(2706)", "Delete SimpleName: start(2707)", "Delete NumberLiteral: 1(2708)", "Delete InfixExpression: -(2709)", "Delete MethodInvocation(2710)", "Delete ExpressionStatement(2711)", "Delete SimpleName: builder(2712)", "Delete SimpleName: append(2713)", "Delete SimpleName: readEscapeCharacter(2714)", "Delete MethodInvocation(2715)", "Delete MethodInvocation(2716)", "Delete ExpressionStatement(2717)", "Delete SimpleName: p(2718)", "Delete SimpleName: pos(2719)", "Delete Assignment: =(2720)", "Delete ExpressionStatement(2721)", "Delete SimpleName: l(2722)", "Delete SimpleName: limit(2723)", "Delete Assignment: =(2724)", "Delete ExpressionStatement(2725)", "Delete SimpleName: start(2726)", "Delete SimpleName: p(2727)", "Delete Assignment: =(2728)", "Delete ExpressionStatement(2729)", "Delete Block(2730)", "Delete IfStatement(2731)", "Delete IfStatement(2732)", "Delete Block(2733)", "Delete WhileStatement(2734)", "Delete SimpleName: builder(2735)", "Delete NullLiteral(2736)", "Delete InfixExpression: ==(2737)", "Delete SimpleName: builder(2738)", "Delete SimpleName: StringBuilder(2739)", "Delete SimpleType: StringBuilder(2740)", "Delete ClassInstanceCreation(2741)", "Delete Assignment: =(2742)", "Delete ExpressionStatement(2743)", "Delete Block(2744)", "Delete IfStatement(2745)", "Delete SimpleName: builder(2746)", "Delete SimpleName: append(2747)", "Delete SimpleName: buffer(2748)", "Delete SimpleName: start(2749)", "Delete SimpleName: p(2750)", "Delete SimpleName: start(2751)", "Delete InfixExpression: -(2752)", "Delete MethodInvocation(2753)", "Delete ExpressionStatement(2754)", "Delete SimpleName: pos(2755)", "Delete SimpleName: p(2756)", "Delete Assignment: =(2757)", "Delete ExpressionStatement(2758)", "Delete SimpleName: fillBuffer(2759)", "Delete NumberLiteral: 1(2760)", "Delete MethodInvocation(2761)", "Delete PrefixExpression: !(2762)", "Delete SimpleName: syntaxError(2763)", "Delete StringLiteral: \"Unterminated string\"(2764)", "Delete MethodInvocation(2765)", "Delete ThrowStatement(2766)", "Delete Block(2767)", "Delete IfStatement(2768)", "Delete Block(2769)", "Delete WhileStatement(2770)", "Delete Block(2771)", "Delete MethodDeclaration(2772)", "Delete TextElement: Reads the value up to but not including any delimiter characters. This(2773)", "Delete TextElement: does not consume the delimiter character.(2774)", "Delete TagElement(2775)", "Delete SimpleName: assignOffsetsOnly(2776)", "Delete TextElement:  true for this method to only set the valuePos(2777)", "Delete TextElement: and valueLength fields and return a null result. This only works if(2778)", "Delete TextElement: the literal is short; a string is returned otherwise.(2779)", "Delete TagElement: @param(2780)", "Delete Javadoc(2781)", "Delete SimpleName: SuppressWarnings(2782)", "Delete StringLiteral: \"fallthrough\"(2783)", "Delete SingleMemberAnnotation(2784)", "Delete Modifier: private(2785)", "Delete SimpleName: String(2786)", "Delete SimpleType: String(2787)", "Delete SimpleName: nextLiteral(2788)", "Delete PrimitiveType: boolean(2789)", "Delete SimpleName: assignOffsetsOnly(2790)", "Delete SingleVariableDeclaration(2791)", "Delete SimpleName: IOException(2792)", "Delete SimpleType: IOException(2793)", "Delete SimpleName: StringBuilder(2794)", "Delete SimpleType: StringBuilder(2795)", "Delete SimpleName: builder(2796)", "Delete NullLiteral(2797)", "Delete VariableDeclarationFragment(2798)", "Delete VariableDeclarationStatement(2799)", "Delete SimpleName: valuePos(2800)", "Delete NumberLiteral: 1(2801)", "Delete PrefixExpression: -(2802)", "Delete Assignment: =(2803)", "Delete ExpressionStatement(2804)", "Delete SimpleName: valueLength(2805)", "Delete NumberLiteral: 0(2806)", "Delete Assignment: =(2807)", "Delete ExpressionStatement(2808)", "Delete PrimitiveType: int(2809)", "Delete SimpleName: i(2810)", "Delete NumberLiteral: 0(2811)", "Delete VariableDeclarationFragment(2812)", "Delete VariableDeclarationStatement(2813)", "Delete SimpleName: findNonLiteralCharacter(2814)", "Delete BooleanLiteral: true(2815)", "Delete SimpleName: pos(2816)", "Delete SimpleName: i(2817)", "Delete InfixExpression: +(2818)", "Delete SimpleName: limit(2819)", "Delete InfixExpression: <(2820)", "Delete SimpleName: i(2821)", "Delete PostfixExpression: ++(2822)", "Delete SimpleName: buffer(2823)", "Delete SimpleName: pos(2824)", "Delete SimpleName: i(2825)", "Delete InfixExpression: +(2826)", "Delete ArrayAccess(2827)", "Delete CharacterLiteral: '/'(2828)", "Delete SwitchCase(2829)", "Delete CharacterLiteral: '\\\\'(2830)", "Delete SwitchCase(2831)", "Delete CharacterLiteral: ';'(2832)", "Delete SwitchCase(2833)", "Delete CharacterLiteral: '#'(2834)", "Delete SwitchCase(2835)", "Delete CharacterLiteral: '='(2836)", "Delete SwitchCase(2837)", "Delete SimpleName: checkLenient(2838)", "Delete MethodInvocation(2839)", "Delete ExpressionStatement(2840)", "Delete CharacterLiteral: '{'(2841)", "Delete SwitchCase(2842)", "Delete CharacterLiteral: '}'(2843)", "Delete SwitchCase(2844)", "Delete CharacterLiteral: '['(2845)", "Delete SwitchCase(2846)", "Delete CharacterLiteral: ']'(2847)", "Delete SwitchCase(2848)", "Delete CharacterLiteral: ':'(2849)", "Delete SwitchCase(2850)", "Delete CharacterLiteral: ','(2851)", "Delete SwitchCase(2852)", "Delete CharacterLiteral: ' '(2853)", "Delete SwitchCase(2854)", "Delete CharacterLiteral: '\\t'(2855)", "Delete SwitchCase(2856)", "Delete CharacterLiteral: '\\f'(2857)", "Delete SwitchCase(2858)", "Delete CharacterLiteral: '\\r'(2859)", "Delete SwitchCase(2860)", "Delete CharacterLiteral: '\\n'(2861)", "Delete SwitchCase(2862)", "Delete SimpleName: findNonLiteralCharacter(2863)", "Delete BreakStatement(2864)", "Delete SwitchStatement(2865)", "Delete Block(2866)", "Delete ForStatement(2867)", "Delete SimpleName: i(2868)", "Delete QualifiedName: buffer.length(2869)", "Delete InfixExpression: <(2870)", "Delete SimpleName: fillBuffer(2871)", "Delete SimpleName: i(2872)", "Delete NumberLiteral: 1(2873)", "Delete InfixExpression: +(2874)", "Delete MethodInvocation(2875)", "Delete ContinueStatement(2876)", "Delete Block(2877)", "Delete SimpleName: buffer(2878)", "Delete SimpleName: limit(2879)", "Delete ArrayAccess(2880)", "Delete CharacterLiteral: '\\0'(2881)", "Delete Assignment: =(2882)", "Delete ExpressionStatement(2883)", "Delete BreakStatement(2884)", "Delete Block(2885)", "Delete IfStatement(2886)", "Delete Block(2887)", "Delete IfStatement(2888)", "Delete SimpleName: builder(2889)", "Delete NullLiteral(2890)", "Delete InfixExpression: ==(2891)", "Delete SimpleName: builder(2892)", "Delete SimpleName: StringBuilder(2893)", "Delete SimpleType: StringBuilder(2894)", "Delete ClassInstanceCreation(2895)", "Delete Assignment: =(2896)", "Delete ExpressionStatement(2897)", "Delete Block(2898)", "Delete IfStatement(2899)", "Delete SimpleName: builder(2900)", "Delete SimpleName: append(2901)", "Delete SimpleName: buffer(2902)", "Delete SimpleName: pos(2903)", "Delete SimpleName: i(2904)", "Delete MethodInvocation(2905)", "Delete ExpressionStatement(2906)", "Delete SimpleName: valueLength(2907)", "Delete SimpleName: i(2908)", "Delete Assignment: +=(2909)", "Delete ExpressionStatement(2910)", "Delete SimpleName: pos(2911)", "Delete SimpleName: i(2912)", "Delete Assignment: +=(2913)", "Delete ExpressionStatement(2914)", "Delete SimpleName: i(2915)", "Delete NumberLiteral: 0(2916)", "Delete Assignment: =(2917)", "Delete ExpressionStatement(2918)", "Delete SimpleName: fillBuffer(2919)", "Delete NumberLiteral: 1(2920)", "Delete MethodInvocation(2921)", "Delete PrefixExpression: !(2922)", "Delete BreakStatement(2923)", "Delete Block(2924)", "Delete IfStatement(2925)", "Delete Block(2926)", "Delete WhileStatement(2927)", "Delete LabeledStatement(2928)", "Delete SimpleName: String(2929)", "Delete SimpleType: String(2930)", "Delete SimpleName: result(2931)", "Delete VariableDeclarationFragment(2932)", "Delete VariableDeclarationStatement(2933)", "Delete SimpleName: assignOffsetsOnly(2934)", "Delete SimpleName: builder(2935)", "Delete NullLiteral(2936)", "Delete InfixExpression: ==(2937)", "Delete InfixExpression: &&(2938)", "Delete SimpleName: valuePos(2939)", "Delete SimpleName: pos(2940)", "Delete Assignment: =(2941)", "Delete ExpressionStatement(2942)", "Delete SimpleName: result(2943)", "Delete NullLiteral(2944)", "Delete Assignment: =(2945)", "Delete ExpressionStatement(2946)", "Delete Block(2947)", "Delete SimpleName: skipping(2948)", "Delete SimpleName: result(2949)", "Delete StringLiteral: \"skipped!\"(2950)", "Delete Assignment: =(2951)", "Delete ExpressionStatement(2952)", "Delete Block(2953)", "Delete SimpleName: builder(2954)", "Delete NullLiteral(2955)", "Delete InfixExpression: ==(2956)", "Delete SimpleName: result(2957)", "Delete SimpleName: stringPool(2958)", "Delete SimpleName: get(2959)", "Delete SimpleName: buffer(2960)", "Delete SimpleName: pos(2961)", "Delete SimpleName: i(2962)", "Delete MethodInvocation(2963)", "Delete Assignment: =(2964)", "Delete ExpressionStatement(2965)", "Delete Block(2966)", "Delete SimpleName: builder(2967)", "Delete SimpleName: append(2968)", "Delete SimpleName: buffer(2969)", "Delete SimpleName: pos(2970)", "Delete SimpleName: i(2971)", "Delete MethodInvocation(2972)", "Delete ExpressionStatement(2973)", "Delete SimpleName: result(2974)", "Delete SimpleName: builder(2975)", "Delete SimpleName: toString(2976)", "Delete MethodInvocation(2977)", "Delete Assignment: =(2978)", "Delete ExpressionStatement(2979)", "Delete Block(2980)", "Delete IfStatement(2981)", "Delete IfStatement(2982)", "Delete IfStatement(2983)", "Delete SimpleName: valueLength(2984)", "Delete SimpleName: i(2985)", "Delete Assignment: +=(2986)", "Delete ExpressionStatement(2987)", "Delete SimpleName: pos(2988)", "Delete SimpleName: i(2989)", "Delete Assignment: +=(2990)", "Delete ExpressionStatement(2991)", "Delete SimpleName: result(2992)", "Delete ReturnStatement(2993)", "Delete Block(2994)", "Delete MethodDeclaration(2995)", "Delete SimpleName: Override(2996)", "Delete MarkerAnnotation(2997)", "Delete Modifier: public(2998)", "Delete SimpleName: String(2999)", "Delete SimpleType: String(3000)", "Delete SimpleName: toString(3001)", "Delete SimpleName: getClass(3002)", "Delete MethodInvocation(3003)", "Delete SimpleName: getSimpleName(3004)", "Delete MethodInvocation(3005)", "Delete StringLiteral: \" at line \"(3006)", "Delete SimpleName: getLineNumber(3007)", "Delete MethodInvocation(3008)", "Delete StringLiteral: \" column \"(3009)", "Delete SimpleName: getColumnNumber(3010)", "Delete MethodInvocation(3011)", "Delete InfixExpression: +(3012)", "Delete ReturnStatement(3013)", "Delete Block(3014)", "Delete MethodDeclaration(3015)", "Delete TextElement: Unescapes the character identified by the character or characters that(3016)", "Delete TextElement: immediately follow a backslash. The backslash '\\' should have already(3017)", "Delete TextElement: been read. This supports both unicode escapes \"u000A\" and two-character(3018)", "Delete TextElement: escapes \"\\n\".(3019)", "Delete TagElement(3020)", "Delete SimpleName: NumberFormatException(3021)", "Delete TextElement:  if any unicode escape sequences are(3022)", "Delete TextElement: malformed.(3023)", "Delete TagElement: @throws(3024)", "Delete Javadoc(3025)", "Delete Modifier: private(3026)", "Delete PrimitiveType: char(3027)", "Delete SimpleName: readEscapeCharacter(3028)", "Delete SimpleName: IOException(3029)", "Delete SimpleType: IOException(3030)", "Delete SimpleName: pos(3031)", "Delete SimpleName: limit(3032)", "Delete InfixExpression: ==(3033)", "Delete SimpleName: fillBuffer(3034)", "Delete NumberLiteral: 1(3035)", "Delete MethodInvocation(3036)", "Delete PrefixExpression: !(3037)", "Delete InfixExpression: &&(3038)", "Delete SimpleName: syntaxError(3039)", "Delete StringLiteral: \"Unterminated escape sequence\"(3040)", "Delete MethodInvocation(3041)", "Delete ThrowStatement(3042)", "Delete Block(3043)", "Delete IfStatement(3044)", "Delete PrimitiveType: char(3045)", "Delete SimpleName: escaped(3046)", "Delete SimpleName: buffer(3047)", "Delete SimpleName: pos(3048)", "Delete PostfixExpression: ++(3049)", "Delete ArrayAccess(3050)", "Delete VariableDeclarationFragment(3051)", "Delete VariableDeclarationStatement(3052)", "Delete SimpleName: escaped(3053)", "Delete CharacterLiteral: 'u'(3054)", "Delete SwitchCase(3055)", "Delete SimpleName: pos(3056)", "Delete NumberLiteral: 4(3057)", "Delete InfixExpression: +(3058)", "Delete SimpleName: limit(3059)", "Delete InfixExpression: >(3060)", "Delete SimpleName: fillBuffer(3061)", "Delete NumberLiteral: 4(3062)", "Delete MethodInvocation(3063)", "Delete PrefixExpression: !(3064)", "Delete InfixExpression: &&(3065)", "Delete SimpleName: syntaxError(3066)", "Delete StringLiteral: \"Unterminated escape sequence\"(3067)", "Delete MethodInvocation(3068)", "Delete ThrowStatement(3069)", "Delete Block(3070)", "Delete IfStatement(3071)", "Delete PrimitiveType: char(3072)", "Delete SimpleName: result(3073)", "Delete NumberLiteral: 0(3074)", "Delete VariableDeclarationFragment(3075)", "Delete VariableDeclarationStatement(3076)", "Delete PrimitiveType: int(3077)", "Delete SimpleName: i(3078)", "Delete SimpleName: pos(3079)", "Delete VariableDeclarationFragment(3080)", "Delete SimpleName: end(3081)", "Delete SimpleName: i(3082)", "Delete NumberLiteral: 4(3083)", "Delete InfixExpression: +(3084)", "Delete VariableDeclarationFragment(3085)", "Delete VariableDeclarationExpression(3086)", "Delete SimpleName: i(3087)", "Delete SimpleName: end(3088)", "Delete InfixExpression: <(3089)", "Delete SimpleName: i(3090)", "Delete PostfixExpression: ++(3091)", "Delete PrimitiveType: char(3092)", "Delete SimpleName: c(3093)", "Delete SimpleName: buffer(3094)", "Delete SimpleName: i(3095)", "Delete ArrayAccess(3096)", "Delete VariableDeclarationFragment(3097)", "Delete VariableDeclarationStatement(3098)", "Delete SimpleName: result(3099)", "Delete NumberLiteral: 4(3100)", "Delete Assignment: <<=(3101)", "Delete ExpressionStatement(3102)", "Delete SimpleName: c(3103)", "Delete CharacterLiteral: '0'(3104)", "Delete InfixExpression: >=(3105)", "Delete SimpleName: c(3106)", "Delete CharacterLiteral: '9'(3107)", "Delete InfixExpression: <=(3108)", "Delete InfixExpression: &&(3109)", "Delete SimpleName: result(3110)", "Delete SimpleName: c(3111)", "Delete CharacterLiteral: '0'(3112)", "Delete InfixExpression: -(3113)", "Delete ParenthesizedExpression(3114)", "Delete Assignment: +=(3115)", "Delete ExpressionStatement(3116)", "Delete Block(3117)", "Delete SimpleName: c(3118)", "Delete CharacterLiteral: 'a'(3119)", "Delete InfixExpression: >=(3120)", "Delete SimpleName: c(3121)", "Delete CharacterLiteral: 'f'(3122)", "Delete InfixExpression: <=(3123)", "Delete InfixExpression: &&(3124)", "Delete SimpleName: result(3125)", "Delete SimpleName: c(3126)", "Delete CharacterLiteral: 'a'(3127)", "Delete InfixExpression: -(3128)", "Delete NumberLiteral: 10(3129)", "Delete InfixExpression: +(3130)", "Delete ParenthesizedExpression(3131)", "Delete Assignment: +=(3132)", "Delete ExpressionStatement(3133)", "Delete Block(3134)", "Delete SimpleName: c(3135)", "Delete CharacterLiteral: 'A'(3136)", "Delete InfixExpression: >=(3137)", "Delete SimpleName: c(3138)", "Delete CharacterLiteral: 'F'(3139)", "Delete InfixExpression: <=(3140)", "Delete InfixExpression: &&(3141)", "Delete SimpleName: result(3142)", "Delete SimpleName: c(3143)", "Delete CharacterLiteral: 'A'(3144)", "Delete InfixExpression: -(3145)", "Delete NumberLiteral: 10(3146)", "Delete InfixExpression: +(3147)", "Delete ParenthesizedExpression(3148)", "Delete Assignment: +=(3149)", "Delete ExpressionStatement(3150)", "Delete Block(3151)", "Delete SimpleName: NumberFormatException(3152)", "Delete SimpleType: NumberFormatException(3153)", "Delete StringLiteral: \"\\\\u\"(3154)", "Delete SimpleName: stringPool(3155)", "Delete SimpleName: get(3156)", "Delete SimpleName: buffer(3157)", "Delete SimpleName: pos(3158)", "Delete NumberLiteral: 4(3159)", "Delete MethodInvocation(3160)", "Delete InfixExpression: +(3161)", "Delete ClassInstanceCreation(3162)", "Delete ThrowStatement(3163)", "Delete Block(3164)", "Delete IfStatement(3165)", "Delete IfStatement(3166)", "Delete IfStatement(3167)", "Delete Block(3168)", "Delete ForStatement(3169)", "Delete SimpleName: pos(3170)", "Delete NumberLiteral: 4(3171)", "Delete Assignment: +=(3172)", "Delete ExpressionStatement(3173)", "Delete SimpleName: result(3174)", "Delete ReturnStatement(3175)", "Delete CharacterLiteral: 't'(3176)", "Delete SwitchCase(3177)", "Delete CharacterLiteral: '\\t'(3178)", "Delete ReturnStatement(3179)", "Delete CharacterLiteral: 'b'(3180)", "Delete SwitchCase(3181)", "Delete CharacterLiteral: '\\b'(3182)", "Delete ReturnStatement(3183)", "Delete CharacterLiteral: 'n'(3184)", "Delete SwitchCase(3185)", "Delete CharacterLiteral: '\\n'(3186)", "Delete ReturnStatement(3187)", "Delete CharacterLiteral: 'r'(3188)", "Delete SwitchCase(3189)", "Delete CharacterLiteral: '\\r'(3190)", "Delete ReturnStatement(3191)", "Delete CharacterLiteral: 'f'(3192)", "Delete SwitchCase(3193)", "Delete CharacterLiteral: '\\f'(3194)", "Delete ReturnStatement(3195)", "Delete CharacterLiteral: '\\''(3196)", "Delete SwitchCase(3197)", "Delete CharacterLiteral: '\"'(3198)", "Delete SwitchCase(3199)", "Delete CharacterLiteral: '\\\\'(3200)", "Delete SwitchCase(3201)", "Delete SwitchCase(3202)", "Delete SimpleName: escaped(3203)", "Delete ReturnStatement(3204)", "Delete SwitchStatement(3205)", "Delete Block(3206)", "Delete MethodDeclaration(3207)", "Delete TextElement: Reads a null, boolean, numeric or unquoted string literal value.(3208)", "Delete TagElement(3209)", "Delete Javadoc(3210)", "Delete Modifier: private(3211)", "Delete SimpleName: JsonToken(3212)", "Delete SimpleType: JsonToken(3213)", "Delete SimpleName: readLiteral(3214)", "Delete SimpleName: IOException(3215)", "Delete SimpleType: IOException(3216)", "Delete SimpleName: value(3217)", "Delete SimpleName: nextLiteral(3218)", "Delete BooleanLiteral: true(3219)", "Delete MethodInvocation(3220)", "Delete Assignment: =(3221)", "Delete ExpressionStatement(3222)", "Delete SimpleName: valueLength(3223)", "Delete NumberLiteral: 0(3224)", "Delete InfixExpression: ==(3225)", "Delete SimpleName: syntaxError(3226)", "Delete StringLiteral: \"Expected literal value\"(3227)", "Delete MethodInvocation(3228)", "Delete ThrowStatement(3229)", "Delete Block(3230)", "Delete IfStatement(3231)", "Delete SimpleName: token(3232)", "Delete SimpleName: decodeLiteral(3233)", "Delete MethodInvocation(3234)", "Delete Assignment: =(3235)", "Delete ExpressionStatement(3236)", "Delete SimpleName: token(3237)", "Delete QualifiedName: JsonToken.STRING(3238)", "Delete InfixExpression: ==(3239)", "Delete SimpleName: checkLenient(3240)", "Delete MethodInvocation(3241)", "Delete ExpressionStatement(3242)", "Delete Block(3243)", "Delete IfStatement(3244)", "Delete SimpleName: token(3245)", "Delete ReturnStatement(3246)", "Delete Block(3247)", "Delete MethodDeclaration(3248)", "Delete TextElement: Assigns (3249)", "Delete TextElement:  nextToken(3250)", "Delete TagElement: @code(3251)", "Delete TextElement:  based on the value of (3252)", "Delete TextElement:  nextValue(3253)", "Delete TagElement: @code(3254)", "Delete TextElement: .(3255)", "Delete TagElement(3256)", "Delete Javadoc(3257)", "Delete Modifier: private(3258)", "Delete SimpleName: JsonToken(3259)", "Delete SimpleType: JsonToken(3260)", "Delete SimpleName: decodeLiteral(3261)", "Delete SimpleName: IOException(3262)", "Delete SimpleType: IOException(3263)", "Delete SimpleName: valuePos(3264)", "Delete NumberLiteral: 1(3265)", "Delete PrefixExpression: -(3266)", "Delete InfixExpression: ==(3267)", "Delete QualifiedName: JsonToken.STRING(3268)", "Delete ReturnStatement(3269)", "Delete Block(3270)", "Delete SimpleName: valueLength(3271)", "Delete NumberLiteral: 4(3272)", "Delete InfixExpression: ==(3273)", "Delete CharacterLiteral: 'n'(3274)", "Delete SimpleName: buffer(3275)", "Delete SimpleName: valuePos(3276)", "Delete ArrayAccess(3277)", "Delete InfixExpression: ==(3278)", "Delete CharacterLiteral: 'N'(3279)", "Delete SimpleName: buffer(3280)", "Delete SimpleName: valuePos(3281)", "Delete ArrayAccess(3282)", "Delete InfixExpression: ==(3283)", "Delete InfixExpression: ||(3284)", "Delete ParenthesizedExpression(3285)", "Delete InfixExpression: &&(3286)", "Delete CharacterLiteral: 'u'(3287)", "Delete SimpleName: buffer(3288)", "Delete SimpleName: valuePos(3289)", "Delete NumberLiteral: 1(3290)", "Delete InfixExpression: +(3291)", "Delete ArrayAccess(3292)", "Delete InfixExpression: ==(3293)", "Delete CharacterLiteral: 'U'(3294)", "Delete SimpleName: buffer(3295)", "Delete SimpleName: valuePos(3296)", "Delete NumberLiteral: 1(3297)", "Delete InfixExpression: +(3298)", "Delete ArrayAccess(3299)", "Delete InfixExpression: ==(3300)", "Delete InfixExpression: ||(3301)", "Delete ParenthesizedExpression(3302)", "Delete InfixExpression: &&(3303)", "Delete CharacterLiteral: 'l'(3304)", "Delete SimpleName: buffer(3305)", "Delete SimpleName: valuePos(3306)", "Delete NumberLiteral: 2(3307)", "Delete InfixExpression: +(3308)", "Delete ArrayAccess(3309)", "Delete InfixExpression: ==(3310)", "Delete CharacterLiteral: 'L'(3311)", "Delete SimpleName: buffer(3312)", "Delete SimpleName: valuePos(3313)", "Delete NumberLiteral: 2(3314)", "Delete InfixExpression: +(3315)", "Delete ArrayAccess(3316)", "Delete InfixExpression: ==(3317)", "Delete InfixExpression: ||(3318)", "Delete ParenthesizedExpression(3319)", "Delete InfixExpression: &&(3320)", "Delete CharacterLiteral: 'l'(3321)", "Delete SimpleName: buffer(3322)", "Delete SimpleName: valuePos(3323)", "Delete NumberLiteral: 3(3324)", "Delete InfixExpression: +(3325)", "Delete ArrayAccess(3326)", "Delete InfixExpression: ==(3327)", "Delete CharacterLiteral: 'L'(3328)", "Delete SimpleName: buffer(3329)", "Delete SimpleName: valuePos(3330)", "Delete NumberLiteral: 3(3331)", "Delete InfixExpression: +(3332)", "Delete ArrayAccess(3333)", "Delete InfixExpression: ==(3334)", "Delete InfixExpression: ||(3335)", "Delete ParenthesizedExpression(3336)", "Delete InfixExpression: &&(3337)", "Delete SimpleName: value(3338)", "Delete StringLiteral: \"null\"(3339)", "Delete Assignment: =(3340)", "Delete ExpressionStatement(3341)", "Delete QualifiedName: JsonToken.NULL(3342)", "Delete ReturnStatement(3343)", "Delete Block(3344)", "Delete SimpleName: valueLength(3345)", "Delete NumberLiteral: 4(3346)", "Delete InfixExpression: ==(3347)", "Delete CharacterLiteral: 't'(3348)", "Delete SimpleName: buffer(3349)", "Delete SimpleName: valuePos(3350)", "Delete ArrayAccess(3351)", "Delete InfixExpression: ==(3352)", "Delete CharacterLiteral: 'T'(3353)", "Delete SimpleName: buffer(3354)", "Delete SimpleName: valuePos(3355)", "Delete ArrayAccess(3356)", "Delete InfixExpression: ==(3357)", "Delete InfixExpression: ||(3358)", "Delete ParenthesizedExpression(3359)", "Delete InfixExpression: &&(3360)", "Delete CharacterLiteral: 'r'(3361)", "Delete SimpleName: buffer(3362)", "Delete SimpleName: valuePos(3363)", "Delete NumberLiteral: 1(3364)", "Delete InfixExpression: +(3365)", "Delete ArrayAccess(3366)", "Delete InfixExpression: ==(3367)", "Delete CharacterLiteral: 'R'(3368)", "Delete SimpleName: buffer(3369)", "Delete SimpleName: valuePos(3370)", "Delete NumberLiteral: 1(3371)", "Delete InfixExpression: +(3372)", "Delete ArrayAccess(3373)", "Delete InfixExpression: ==(3374)", "Delete InfixExpression: ||(3375)", "Delete ParenthesizedExpression(3376)", "Delete InfixExpression: &&(3377)", "Delete CharacterLiteral: 'u'(3378)", "Delete SimpleName: buffer(3379)", "Delete SimpleName: valuePos(3380)", "Delete NumberLiteral: 2(3381)", "Delete InfixExpression: +(3382)", "Delete ArrayAccess(3383)", "Delete InfixExpression: ==(3384)", "Delete CharacterLiteral: 'U'(3385)", "Delete SimpleName: buffer(3386)", "Delete SimpleName: valuePos(3387)", "Delete NumberLiteral: 2(3388)", "Delete InfixExpression: +(3389)", "Delete ArrayAccess(3390)", "Delete InfixExpression: ==(3391)", "Delete InfixExpression: ||(3392)", "Delete ParenthesizedExpression(3393)", "Delete InfixExpression: &&(3394)", "Delete CharacterLiteral: 'e'(3395)", "Delete SimpleName: buffer(3396)", "Delete SimpleName: valuePos(3397)", "Delete NumberLiteral: 3(3398)", "Delete InfixExpression: +(3399)", "Delete ArrayAccess(3400)", "Delete InfixExpression: ==(3401)", "Delete CharacterLiteral: 'E'(3402)", "Delete SimpleName: buffer(3403)", "Delete SimpleName: valuePos(3404)", "Delete NumberLiteral: 3(3405)", "Delete InfixExpression: +(3406)", "Delete ArrayAccess(3407)", "Delete InfixExpression: ==(3408)", "Delete InfixExpression: ||(3409)", "Delete ParenthesizedExpression(3410)", "Delete InfixExpression: &&(3411)", "Delete SimpleName: value(3412)", "Delete SimpleName: TRUE(3413)", "Delete Assignment: =(3414)", "Delete ExpressionStatement(3415)", "Delete QualifiedName: JsonToken.BOOLEAN(3416)", "Delete ReturnStatement(3417)", "Delete Block(3418)", "Delete SimpleName: valueLength(3419)", "Delete NumberLiteral: 5(3420)", "Delete InfixExpression: ==(3421)", "Delete CharacterLiteral: 'f'(3422)", "Delete SimpleName: buffer(3423)", "Delete SimpleName: valuePos(3424)", "Delete ArrayAccess(3425)", "Delete InfixExpression: ==(3426)", "Delete CharacterLiteral: 'F'(3427)", "Delete SimpleName: buffer(3428)", "Delete SimpleName: valuePos(3429)", "Delete ArrayAccess(3430)", "Delete InfixExpression: ==(3431)", "Delete InfixExpression: ||(3432)", "Delete ParenthesizedExpression(3433)", "Delete InfixExpression: &&(3434)", "Delete CharacterLiteral: 'a'(3435)", "Delete SimpleName: buffer(3436)", "Delete SimpleName: valuePos(3437)", "Delete NumberLiteral: 1(3438)", "Delete InfixExpression: +(3439)", "Delete ArrayAccess(3440)", "Delete InfixExpression: ==(3441)", "Delete CharacterLiteral: 'A'(3442)", "Delete SimpleName: buffer(3443)", "Delete SimpleName: valuePos(3444)", "Delete NumberLiteral: 1(3445)", "Delete InfixExpression: +(3446)", "Delete ArrayAccess(3447)", "Delete InfixExpression: ==(3448)", "Delete InfixExpression: ||(3449)", "Delete ParenthesizedExpression(3450)", "Delete InfixExpression: &&(3451)", "Delete CharacterLiteral: 'l'(3452)", "Delete SimpleName: buffer(3453)", "Delete SimpleName: valuePos(3454)", "Delete NumberLiteral: 2(3455)", "Delete InfixExpression: +(3456)", "Delete ArrayAccess(3457)", "Delete InfixExpression: ==(3458)", "Delete CharacterLiteral: 'L'(3459)", "Delete SimpleName: buffer(3460)", "Delete SimpleName: valuePos(3461)", "Delete NumberLiteral: 2(3462)", "Delete InfixExpression: +(3463)", "Delete ArrayAccess(3464)", "Delete InfixExpression: ==(3465)", "Delete InfixExpression: ||(3466)", "Delete ParenthesizedExpression(3467)", "Delete InfixExpression: &&(3468)", "Delete CharacterLiteral: 's'(3469)", "Delete SimpleName: buffer(3470)", "Delete SimpleName: valuePos(3471)", "Delete NumberLiteral: 3(3472)", "Delete InfixExpression: +(3473)", "Delete ArrayAccess(3474)", "Delete InfixExpression: ==(3475)", "Delete CharacterLiteral: 'S'(3476)", "Delete SimpleName: buffer(3477)", "Delete SimpleName: valuePos(3478)", "Delete NumberLiteral: 3(3479)", "Delete InfixExpression: +(3480)", "Delete ArrayAccess(3481)", "Delete InfixExpression: ==(3482)", "Delete InfixExpression: ||(3483)", "Delete ParenthesizedExpression(3484)", "Delete InfixExpression: &&(3485)", "Delete CharacterLiteral: 'e'(3486)", "Delete SimpleName: buffer(3487)", "Delete SimpleName: valuePos(3488)", "Delete NumberLiteral: 4(3489)", "Delete InfixExpression: +(3490)", "Delete ArrayAccess(3491)", "Delete InfixExpression: ==(3492)", "Delete CharacterLiteral: 'E'(3493)", "Delete SimpleName: buffer(3494)", "Delete SimpleName: valuePos(3495)", "Delete NumberLiteral: 4(3496)", "Delete InfixExpression: +(3497)", "Delete ArrayAccess(3498)", "Delete InfixExpression: ==(3499)", "Delete InfixExpression: ||(3500)", "Delete ParenthesizedExpression(3501)", "Delete InfixExpression: &&(3502)", "Delete SimpleName: value(3503)", "Delete SimpleName: FALSE(3504)", "Delete Assignment: =(3505)", "Delete ExpressionStatement(3506)", "Delete QualifiedName: JsonToken.BOOLEAN(3507)", "Delete ReturnStatement(3508)", "Delete Block(3509)", "Delete SimpleName: value(3510)", "Delete SimpleName: stringPool(3511)", "Delete SimpleName: get(3512)", "Delete SimpleName: buffer(3513)", "Delete SimpleName: valuePos(3514)", "Delete SimpleName: valueLength(3515)", "Delete MethodInvocation(3516)", "Delete Assignment: =(3517)", "Delete ExpressionStatement(3518)", "Delete SimpleName: decodeNumber(3519)", "Delete SimpleName: buffer(3520)", "Delete SimpleName: valuePos(3521)", "Delete SimpleName: valueLength(3522)", "Delete MethodInvocation(3523)", "Delete ReturnStatement(3524)", "Delete Block(3525)", "Delete IfStatement(3526)", "Delete IfStatement(3527)", "Delete IfStatement(3528)", "Delete IfStatement(3529)", "Delete Block(3530)", "Delete MethodDeclaration(3531)", "Delete TextElement: Determine whether the characters is a JSON number. Numbers are of the(3532)", "Delete TextElement: form -12.34e+56. Fractional and exponential parts are optional. Leading(3533)", "Delete TextElement: zeroes are not allowed in the value or exponential part, but are allowed(3534)", "Delete TextElement: in the fraction.(3535)", "Delete TagElement(3536)", "Delete Javadoc(3537)", "Delete Modifier: private(3538)", "Delete SimpleName: JsonToken(3539)", "Delete SimpleType: JsonToken(3540)", "Delete SimpleName: decodeNumber(3541)", "Delete PrimitiveType: char(3542)", "Delete Dimension(3543)", "Delete ArrayType: char[](3544)", "Delete SimpleName: chars(3545)", "Delete SingleVariableDeclaration(3546)", "Delete PrimitiveType: int(3547)", "Delete SimpleName: offset(3548)", "Delete SingleVariableDeclaration(3549)", "Delete PrimitiveType: int(3550)", "Delete SimpleName: length(3551)", "Delete SingleVariableDeclaration(3552)", "Delete PrimitiveType: int(3553)", "Delete SimpleName: i(3554)", "Delete SimpleName: offset(3555)", "Delete VariableDeclarationFragment(3556)", "Delete VariableDeclarationStatement(3557)", "Delete PrimitiveType: int(3558)", "Delete SimpleName: c(3559)", "Delete SimpleName: chars(3560)", "Delete SimpleName: i(3561)", "Delete ArrayAccess(3562)", "Delete VariableDeclarationFragment(3563)", "Delete VariableDeclarationStatement(3564)", "Delete SimpleName: c(3565)", "Delete CharacterLiteral: '-'(3566)", "Delete InfixExpression: ==(3567)", "Delete SimpleName: c(3568)", "Delete SimpleName: chars(3569)", "Delete SimpleName: i(3570)", "Delete PrefixExpression: ++(3571)", "Delete ArrayAccess(3572)", "Delete Assignment: =(3573)", "Delete ExpressionStatement(3574)", "Delete Block(3575)", "Delete IfStatement(3576)", "Delete SimpleName: c(3577)", "Delete CharacterLiteral: '0'(3578)", "Delete InfixExpression: ==(3579)", "Delete SimpleName: c(3580)", "Delete SimpleName: chars(3581)", "Delete SimpleName: i(3582)", "Delete PrefixExpression: ++(3583)", "Delete ArrayAccess(3584)", "Delete Assignment: =(3585)", "Delete ExpressionStatement(3586)", "Delete Block(3587)", "Delete SimpleName: c(3588)", "Delete CharacterLiteral: '1'(3589)", "Delete InfixExpression: >=(3590)", "Delete SimpleName: c(3591)", "Delete CharacterLiteral: '9'(3592)", "Delete InfixExpression: <=(3593)", "Delete InfixExpression: &&(3594)", "Delete SimpleName: c(3595)", "Delete SimpleName: chars(3596)", "Delete SimpleName: i(3597)", "Delete PrefixExpression: ++(3598)", "Delete ArrayAccess(3599)", "Delete Assignment: =(3600)", "Delete ExpressionStatement(3601)", "Delete SimpleName: c(3602)", "Delete CharacterLiteral: '0'(3603)", "Delete InfixExpression: >=(3604)", "Delete SimpleName: c(3605)", "Delete CharacterLiteral: '9'(3606)", "Delete InfixExpression: <=(3607)", "Delete InfixExpression: &&(3608)", "Delete SimpleName: c(3609)", "Delete SimpleName: chars(3610)", "Delete SimpleName: i(3611)", "Delete PrefixExpression: ++(3612)", "Delete ArrayAccess(3613)", "Delete Assignment: =(3614)", "Delete ExpressionStatement(3615)", "Delete Block(3616)", "Delete WhileStatement(3617)", "Delete Block(3618)", "Delete QualifiedName: JsonToken.STRING(3619)", "Delete ReturnStatement(3620)", "Delete Block(3621)", "Delete IfStatement(3622)", "Delete IfStatement(3623)", "Delete SimpleName: c(3624)", "Delete CharacterLiteral: '.'(3625)", "Delete InfixExpression: ==(3626)", "Delete SimpleName: c(3627)", "Delete SimpleName: chars(3628)", "Delete SimpleName: i(3629)", "Delete PrefixExpression: ++(3630)", "Delete ArrayAccess(3631)", "Delete Assignment: =(3632)", "Delete ExpressionStatement(3633)", "Delete SimpleName: c(3634)", "Delete CharacterLiteral: '0'(3635)", "Delete InfixExpression: >=(3636)", "Delete SimpleName: c(3637)", "Delete CharacterLiteral: '9'(3638)", "Delete InfixExpression: <=(3639)", "Delete InfixExpression: &&(3640)", "Delete SimpleName: c(3641)", "Delete SimpleName: chars(3642)", "Delete SimpleName: i(3643)", "Delete PrefixExpression: ++(3644)", "Delete ArrayAccess(3645)", "Delete Assignment: =(3646)", "Delete ExpressionStatement(3647)", "Delete Block(3648)", "Delete WhileStatement(3649)", "Delete Block(3650)", "Delete IfStatement(3651)", "Delete SimpleName: c(3652)", "Delete CharacterLiteral: 'e'(3653)", "Delete InfixExpression: ==(3654)", "Delete SimpleName: c(3655)", "Delete CharacterLiteral: 'E'(3656)", "Delete InfixExpression: ==(3657)", "Delete InfixExpression: ||(3658)", "Delete SimpleName: c(3659)", "Delete SimpleName: chars(3660)", "Delete SimpleName: i(3661)", "Delete PrefixExpression: ++(3662)", "Delete ArrayAccess(3663)", "Delete Assignment: =(3664)", "Delete ExpressionStatement(3665)", "Delete SimpleName: c(3666)", "Delete CharacterLiteral: '+'(3667)", "Delete InfixExpression: ==(3668)", "Delete SimpleName: c(3669)", "Delete CharacterLiteral: '-'(3670)", "Delete InfixExpression: ==(3671)", "Delete InfixExpression: ||(3672)", "Delete SimpleName: c(3673)", "Delete SimpleName: chars(3674)", "Delete SimpleName: i(3675)", "Delete PrefixExpression: ++(3676)", "Delete ArrayAccess(3677)", "Delete Assignment: =(3678)", "Delete ExpressionStatement(3679)", "Delete Block(3680)", "Delete IfStatement(3681)", "Delete SimpleName: c(3682)", "Delete CharacterLiteral: '0'(3683)", "Delete InfixExpression: >=(3684)", "Delete SimpleName: c(3685)", "Delete CharacterLiteral: '9'(3686)", "Delete InfixExpression: <=(3687)", "Delete InfixExpression: &&(3688)", "Delete SimpleName: c(3689)", "Delete SimpleName: chars(3690)", "Delete SimpleName: i(3691)", "Delete PrefixExpression: ++(3692)", "Delete ArrayAccess(3693)", "Delete Assignment: =(3694)", "Delete ExpressionStatement(3695)", "Delete SimpleName: c(3696)", "Delete CharacterLiteral: '0'(3697)", "Delete InfixExpression: >=(3698)", "Delete SimpleName: c(3699)", "Delete CharacterLiteral: '9'(3700)", "Delete InfixExpression: <=(3701)", "Delete InfixExpression: &&(3702)", "Delete SimpleName: c(3703)", "Delete SimpleName: chars(3704)", "Delete SimpleName: i(3705)", "Delete PrefixExpression: ++(3706)", "Delete ArrayAccess(3707)", "Delete Assignment: =(3708)", "Delete ExpressionStatement(3709)", "Delete Block(3710)", "Delete WhileStatement(3711)", "Delete Block(3712)", "Delete QualifiedName: JsonToken.STRING(3713)", "Delete ReturnStatement(3714)", "Delete Block(3715)", "Delete IfStatement(3716)", "Delete Block(3717)", "Delete IfStatement(3718)", "Delete SimpleName: i(3719)", "Delete SimpleName: offset(3720)", "Delete SimpleName: length(3721)", "Delete InfixExpression: +(3722)", "Delete InfixExpression: ==(3723)", "Delete QualifiedName: JsonToken.NUMBER(3724)", "Delete ReturnStatement(3725)", "Delete Block(3726)", "Delete QualifiedName: JsonToken.STRING(3727)", "Delete ReturnStatement(3728)", "Delete Block(3729)", "Delete IfStatement(3730)", "Delete Block(3731)", "Delete MethodDeclaration(3732)", "Delete TextElement: Throws a new IO exception with the given message and a context snippet(3733)", "Delete TextElement: with this reader's content.(3734)", "Delete TagElement(3735)", "Delete Javadoc(3736)", "Delete Modifier: private(3737)", "Delete SimpleName: IOException(3738)", "Delete SimpleType: IOException(3739)", "Delete SimpleName: syntaxError(3740)", "Delete SimpleName: String(3741)", "Delete SimpleType: String(3742)", "Delete SimpleName: message(3743)", "Delete SingleVariableDeclaration(3744)", "Delete SimpleName: IOException(3745)", "Delete SimpleType: IOException(3746)", "Delete SimpleName: MalformedJsonException(3747)", "Delete SimpleType: MalformedJsonException(3748)", "Delete SimpleName: message(3749)", "Delete StringLiteral: \" at line \"(3750)", "Delete SimpleName: getLineNumber(3751)", "Delete MethodInvocation(3752)", "Delete StringLiteral: \" column \"(3753)", "Delete SimpleName: getColumnNumber(3754)", "Delete MethodInvocation(3755)", "Delete InfixExpression: +(3756)", "Delete ClassInstanceCreation(3757)", "Delete ThrowStatement(3758)", "Delete Block(3759)", "Delete MethodDeclaration(3760)", "Delete Modifier: static(3761)", "Delete QualifiedName: JsonReaderInternalAccess.INSTANCE(3762)", "Delete SimpleName: JsonReaderInternalAccess(3763)", "Delete SimpleType: JsonReaderInternalAccess(3764)", "Delete SimpleName: Override(3765)", "Delete MarkerAnnotation(3766)", "Delete Modifier: public(3767)", "Delete PrimitiveType: void(3768)", "Delete SimpleName: promoteNameToValue(3769)", "Delete SimpleName: JsonReader(3770)", "Delete SimpleType: JsonReader(3771)", "Delete SimpleName: reader(3772)", "Delete SingleVariableDeclaration(3773)", "Delete SimpleName: IOException(3774)", "Delete SimpleType: IOException(3775)", "Delete SimpleName: reader(3776)", "Delete SimpleName: JsonTreeReader(3777)", "Delete SimpleType: JsonTreeReader(3778)", "Delete InstanceofExpression(3779)", "Delete SimpleName: JsonTreeReader(3780)", "Delete SimpleType: JsonTreeReader(3781)", "Delete SimpleName: reader(3782)", "Delete CastExpression(3783)", "Delete ParenthesizedExpression(3784)", "Delete SimpleName: promoteNameToValue(3785)", "Delete MethodInvocation(3786)", "Delete ExpressionStatement(3787)", "Delete ReturnStatement(3788)", "Delete Block(3789)", "Delete IfStatement(3790)", "Delete SimpleName: reader(3791)", "Delete SimpleName: peek(3792)", "Delete MethodInvocation(3793)", "Delete ExpressionStatement(3794)", "Delete QualifiedName: reader.token(3795)", "Delete QualifiedName: JsonToken.NAME(3796)", "Delete InfixExpression: !=(3797)", "Delete SimpleName: IllegalStateException(3798)", "Delete SimpleType: IllegalStateException(3799)", "Delete StringLiteral: \"Expected a name but was \"(3800)", "Delete SimpleName: reader(3801)", "Delete SimpleName: peek(3802)", "Delete MethodInvocation(3803)", "Delete StringLiteral: \" \"(3804)", "Delete StringLiteral: \" at line \"(3805)", "Delete SimpleName: reader(3806)", "Delete SimpleName: getLineNumber(3807)", "Delete MethodInvocation(3808)", "Delete StringLiteral: \" column \"(3809)", "Delete SimpleName: reader(3810)", "Delete SimpleName: getColumnNumber(3811)", "Delete MethodInvocation(3812)", "Delete InfixExpression: +(3813)", "Delete ClassInstanceCreation(3814)", "Delete ThrowStatement(3815)", "Delete Block(3816)", "Delete IfStatement(3817)", "Delete QualifiedName: reader.value(3818)", "Delete QualifiedName: reader.name(3819)", "Delete Assignment: =(3820)", "Delete ExpressionStatement(3821)", "Delete QualifiedName: reader.name(3822)", "Delete NullLiteral(3823)", "Delete Assignment: =(3824)", "Delete ExpressionStatement(3825)", "Delete QualifiedName: reader.token(3826)", "Delete QualifiedName: JsonToken.STRING(3827)", "Delete Assignment: =(3828)", "Delete ExpressionStatement(3829)", "Delete Block(3830)", "Delete MethodDeclaration(3831)", "Delete AnonymousClassDeclaration(3832)", "Delete ClassInstanceCreation(3833)", "Delete Assignment: =(3834)", "Delete ExpressionStatement(3835)", "Delete Block(3836)", "Delete Initializer(3837)", "Delete TypeDeclaration: class(3838)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 1, "testing": "False", "maintenance": "False", "build": "False"}]}