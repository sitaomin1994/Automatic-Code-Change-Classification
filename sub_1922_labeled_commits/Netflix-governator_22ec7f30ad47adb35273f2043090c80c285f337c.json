{"application": "Netflix-governator", "csha": "22ec7f30ad47adb35273f2043090c80c285f337c", "files": [{"InternalModuleDependencyModule_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.guice"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.Logger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.LoggerFactory"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.ImmutableList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Lists"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.AbstractModule"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Module"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Singleton"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.TypeLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.matcher.Matchers", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.spi.InjectionListener"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.spi.TypeEncounter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.spi.TypeListener", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: Module", "DEL SimpleType: javax.inject.Singleton", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL MethodInvocation", "DEL SimpleName: info", "DEL MethodInvocation", "DEL SimpleName: getAnnotation", "DEL TypeLiteral", "DEL SimpleName: I", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: InternalModuleDependencyModule", "DEL SimpleName: getClass", "DEL TextElement: modules in the bootstrap injector.  This list of modules will then be ", "DEL Modifier: public", "DEL SimpleName: info", "DEL TextElement: This module is used by Governator to build a dependency ordered list of ", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleName: injectee", "DEL SimpleName: modules", "DEL TypeDeclaration: class", "DEL Modifier: protected", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL InfixExpression: +", "DEL SimpleName: injectee", "DEL MethodInvocation", "DEL SimpleName: GOVERNATOR_PACKAGE_PREFIX", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleType: Logger", "DEL SimpleName: getModules", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: TypeListener", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: AbstractModule", "DEL TextElement: added to the main child injector.", "DEL SimpleName: register", "DEL ReturnStatement", "DEL TagElement: @author", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: getClass", "DEL SimpleName: configure", "DEL Modifier: public", "DEL StringLiteral: \"Found module dependency : \"", "DEL StringLiteral: \"Ignore module dependency : \"", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: Matchers", "DEL SimpleName: List", "DEL MarkerAnnotation", "DEL StringLiteral: \"com.netflix.governator.guice\"", "DEL SimpleName: injectee", "DEL ParameterizedType: InjectionListener<I>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: ImmutableList", "DEL SimpleName: Override", "DEL SimpleType: Module", "DEL MethodDeclaration", "DEL Modifier: private", "DEL Modifier: static", "DEL SimpleName: type", "DEL SimpleName: injectee", "DEL SimpleName: TypeEncounter", "DEL SimpleName: getClass", "DEL Block", "DEL SimpleName: getAnnotation", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL SimpleName: GUICE_PACKAGE_PREFX", "DEL SimpleType: Singleton", "DEL VariableDeclarationFragment", "DEL SimpleType: Module", "DEL SimpleType: AbstractModule", "DEL SimpleName: getClass", "DEL SimpleName: getLogger", "DEL SimpleType: InjectionListener", "DEL SimpleName: Lists", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL InfixExpression: +", "DEL Modifier: final", "DEL SimpleType: I", "DEL SimpleType: I", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL QualifiedName: javax.inject.Singleton", "DEL SimpleName: modules", "DEL Block", "DEL SimpleName: hear", "DEL SimpleType: TypeEncounter", "DEL SimpleName: TypeListener", "DEL ParameterizedType: List<Module>", "DEL SimpleName: any", "DEL ReturnStatement", "DEL SimpleName: I", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleType: I", "DEL MethodInvocation", "DEL SimpleType: InternalModuleDependencyModule", "DEL SimpleName: getCanonicalName", "DEL MethodInvocation", "DEL SimpleType: Module", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: bindListener", "DEL StringLiteral: \" Module not @Singleton\"", "DEL ParameterizedType: TypeEncounter<I>", "DEL IfStatement", "DEL StringLiteral: \"com.google.inject\"", "DEL SimpleName: getCanonicalName", "DEL MethodDeclaration", "DEL AnonymousClassDeclaration", "DEL SimpleName: modules", "DEL NullLiteral", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: encounter", "DEL SimpleName: getCanonicalName", "DEL SimpleName: GUICE_PACKAGE_PREFX", "DEL Modifier: private", "DEL SimpleType: TypeLiteral", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: copyOf", "DEL SimpleName: InternalModuleDependencyModule", "DEL SimpleName: info", "DEL SimpleName: InjectionListener", "DEL SimpleName: afterInjection", "DEL Modifier: private", "DEL SimpleName: type", "DEL ParameterizedType: TypeLiteral<I>", "DEL SimpleName: add", "DEL AnonymousClassDeclaration", "DEL SimpleName: Module", "DEL TextElement:  elandau", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SimpleType: String", "DEL TypeLiteral", "DEL SimpleName: Module", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: injectee", "DEL SimpleName: injectee", "DEL SimpleName: injectee", "DEL SimpleName: getClass", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: startsWith", "DEL MethodInvocation", "DEL SimpleName: getClass", "DEL VariableDeclarationFragment", "DEL SimpleName: I", "DEL SimpleName: LOG", "DEL StringLiteral: \" Internal modules are skipped\"", "DEL SimpleName: I", "DEL SimpleName: I", "DEL SimpleName: getCanonicalName", "DEL SimpleName: String", "DEL SimpleType: Module", "DEL SimpleName: InternalModuleDependencyModule", "DEL SimpleName: Module", "DEL SimpleName: Singleton", "DEL Modifier: final", "DEL IfStatement", "DEL TypeParameter", "DEL SimpleName: LOG", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: LoggerFactory", "DEL SimpleName: injectee", "DEL SimpleName: List", "DEL SimpleName: LOG", "DEL ParameterizedType: List<Module>", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: Logger", "DEL CastExpression", "DEL SimpleName: newArrayList", "DEL VariableDeclarationFragment", "DEL SimpleType: I", "DEL StringLiteral: \"Ignore module dependency : \"", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL TypeLiteral", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: encounter", "DEL Block", "DEL Modifier: public", "DEL Modifier: private", "DEL Modifier: static", "DEL TagElement", "DEL SimpleName: TypeLiteral", "DEL SimpleName: getRawType", "DEL SimpleName: isAssignableFrom", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL InfixExpression: +"]}]}}, {"InternalModuleDependencyModule_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.guice(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.slf4j.Logger(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.slf4j.LoggerFactory(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.common.collect.ImmutableList(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.common.collect.Lists(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.inject.AbstractModule(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.inject.Module(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.inject.Singleton(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.inject.TypeLiteral(18)", "Delete ImportDeclaration(19)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.inject.spi.InjectionListener(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.inject.spi.TypeEncounter(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.inject.spi.TypeListener(26)", "Delete ImportDeclaration(27)", "Delete TextElement: This module is used by Governator to build a dependency ordered list of (28)", "Delete TextElement: modules in the bootstrap injector.  This list of modules will then be (29)", "Delete TextElement: added to the main child injector.(30)", "Delete TagElement(31)", "Delete TextElement:  elandau(32)", "Delete TagElement: @author(33)", "Delete Javadoc(34)", "Delete Modifier: public(35)", "Delete SimpleName: InternalModuleDependencyModule(36)", "Delete SimpleName: AbstractModule(37)", "Delete SimpleType: AbstractModule(38)", "Delete Modifier: private(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: Logger(42)", "Delete SimpleType: Logger(43)", "Delete SimpleName: LOG(44)", "Delete SimpleName: LoggerFactory(45)", "Delete SimpleName: getLogger(46)", "Delete SimpleName: InternalModuleDependencyModule(47)", "Delete SimpleType: InternalModuleDependencyModule(48)", "Delete TypeLiteral(49)", "Delete MethodInvocation(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete Modifier: private(53)", "Delete Modifier: final(54)", "Delete SimpleName: List(55)", "Delete SimpleType: List(56)", "Delete SimpleName: Module(57)", "Delete SimpleType: Module(58)", "Delete ParameterizedType: List<Module>(59)", "Delete SimpleName: modules(60)", "Delete SimpleName: Lists(61)", "Delete SimpleName: newArrayList(62)", "Delete MethodInvocation(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete Modifier: private(66)", "Delete Modifier: static(67)", "Delete Modifier: final(68)", "Delete SimpleName: String(69)", "Delete SimpleType: String(70)", "Delete SimpleName: GUICE_PACKAGE_PREFX(71)", "Delete StringLiteral: \"com.google.inject\"(72)", "Delete VariableDeclarationFragment(73)", "Delete FieldDeclaration(74)", "Delete Modifier: private(75)", "Delete Modifier: static(76)", "Delete Modifier: final(77)", "Delete SimpleName: String(78)", "Delete SimpleType: String(79)", "Delete SimpleName: GOVERNATOR_PACKAGE_PREFIX(80)", "Delete StringLiteral: \"com.netflix.governator.guice\"(81)", "Delete VariableDeclarationFragment(82)", "Delete FieldDeclaration(83)", "Delete Modifier: public(84)", "Delete SimpleName: InternalModuleDependencyModule(85)", "Delete Block(86)", "Delete MethodDeclaration(87)", "Delete SimpleName: Override(88)", "Delete MarkerAnnotation(89)", "Delete Modifier: protected(90)", "Delete PrimitiveType: void(91)", "Delete SimpleName: configure(92)", "Delete SimpleName: bindListener(93)", "Delete SimpleName: any(95)", "Delete MethodInvocation(96)", "Delete SimpleName: TypeListener(97)", "Delete SimpleType: TypeListener(98)", "Delete SimpleName: Override(99)", "Delete MarkerAnnotation(100)", "Delete Modifier: public(101)", "Delete SimpleName: I(102)", "Delete TypeParameter(103)", "Delete PrimitiveType: void(104)", "Delete SimpleName: hear(105)", "Delete SimpleName: TypeLiteral(106)", "Delete SimpleType: TypeLiteral(107)", "Delete SimpleName: I(108)", "Delete SimpleType: I(109)", "Delete ParameterizedType: TypeLiteral<I>(110)", "Delete SimpleName: type(111)", "Delete SingleVariableDeclaration(112)", "Delete SimpleName: TypeEncounter(113)", "Delete SimpleType: TypeEncounter(114)", "Delete SimpleName: I(115)", "Delete SimpleType: I(116)", "Delete ParameterizedType: TypeEncounter<I>(117)", "Delete SimpleName: encounter(118)", "Delete SingleVariableDeclaration(119)", "Delete SimpleName: Module(120)", "Delete SimpleType: Module(121)", "Delete TypeLiteral(122)", "Delete SimpleName: isAssignableFrom(123)", "Delete SimpleName: type(124)", "Delete SimpleName: getRawType(125)", "Delete MethodInvocation(126)", "Delete MethodInvocation(127)", "Delete SimpleName: encounter(128)", "Delete SimpleName: register(129)", "Delete SimpleName: InjectionListener(130)", "Delete SimpleType: InjectionListener(131)", "Delete SimpleName: I(132)", "Delete SimpleType: I(133)", "Delete ParameterizedType: InjectionListener<I>(134)", "Delete SimpleName: Override(135)", "Delete MarkerAnnotation(136)", "Delete Modifier: public(137)", "Delete PrimitiveType: void(138)", "Delete SimpleName: afterInjection(139)", "Delete Modifier: final(140)", "Delete SimpleName: I(141)", "Delete SimpleType: I(142)", "Delete SimpleName: injectee(143)", "Delete SingleVariableDeclaration(144)", "Delete NullLiteral(145)", "Delete SimpleName: injectee(146)", "Delete SimpleName: getClass(147)", "Delete MethodInvocation(148)", "Delete SimpleName: getAnnotation(149)", "Delete SimpleName: Singleton(150)", "Delete SimpleType: Singleton(151)", "Delete TypeLiteral(152)", "Delete MethodInvocation(153)", "Delete InfixExpression: ==(154)", "Delete NullLiteral(155)", "Delete SimpleName: injectee(156)", "Delete SimpleName: getClass(157)", "Delete MethodInvocation(158)", "Delete SimpleName: getAnnotation(159)", "Delete QualifiedName: javax.inject.Singleton(160)", "Delete SimpleType: javax.inject.Singleton(161)", "Delete TypeLiteral(162)", "Delete MethodInvocation(163)", "Delete InfixExpression: ==(164)", "Delete InfixExpression: &&(165)", "Delete SimpleName: LOG(166)", "Delete SimpleName: info(167)", "Delete StringLiteral: \"Ignore module dependency : \"(168)", "Delete SimpleName: injectee(169)", "Delete SimpleName: getClass(170)", "Delete MethodInvocation(171)", "Delete SimpleName: getCanonicalName(172)", "Delete MethodInvocation(173)", "Delete StringLiteral: \" Module not @Singleton\"(174)", "Delete InfixExpression: +(175)", "Delete MethodInvocation(176)", "Delete ExpressionStatement(177)", "Delete ReturnStatement(178)", "Delete Block(179)", "Delete IfStatement(180)", "Delete SimpleName: injectee(181)", "Delete SimpleName: getClass(182)", "Delete MethodInvocation(183)", "Delete SimpleName: getCanonicalName(184)", "Delete MethodInvocation(185)", "Delete SimpleName: startsWith(186)", "Delete SimpleName: GUICE_PACKAGE_PREFX(187)", "Delete MethodInvocation(188)", "Delete SimpleName: LOG(189)", "Delete SimpleName: info(190)", "Delete StringLiteral: \"Ignore module dependency : \"(191)", "Delete SimpleName: injectee(192)", "Delete SimpleName: getClass(193)", "Delete MethodInvocation(194)", "Delete SimpleName: getCanonicalName(195)", "Delete MethodInvocation(196)", "Delete StringLiteral: \" Internal modules are skipped\"(197)", "Delete InfixExpression: +(198)", "Delete MethodInvocation(199)", "Delete ExpressionStatement(200)", "Delete ReturnStatement(201)", "Delete Block(202)", "Delete IfStatement(203)", "Delete SimpleName: LOG(204)", "Delete SimpleName: info(205)", "Delete StringLiteral: \"Found module dependency : \"(206)", "Delete SimpleName: injectee(207)", "Delete SimpleName: getClass(208)", "Delete MethodInvocation(209)", "Delete SimpleName: getCanonicalName(210)", "Delete MethodInvocation(211)", "Delete InfixExpression: +(212)", "Delete MethodInvocation(213)", "Delete ExpressionStatement(214)", "Delete SimpleName: modules(215)", "Delete SimpleName: add(216)", "Delete SimpleName: Module(217)", "Delete SimpleType: Module(218)", "Delete SimpleName: injectee(219)", "Delete CastExpression(220)", "Delete MethodInvocation(221)", "Delete ExpressionStatement(222)", "Delete Block(223)", "Delete MethodDeclaration(224)", "Delete AnonymousClassDeclaration(225)", "Delete ClassInstanceCreation(226)", "Delete MethodInvocation(227)", "Delete ExpressionStatement(228)", "Delete Block(229)", "Delete IfStatement(230)", "Delete Block(231)", "Delete MethodDeclaration(232)", "Delete AnonymousClassDeclaration(233)", "Delete ClassInstanceCreation(234)", "Delete MethodInvocation(235)", "Delete ExpressionStatement(236)", "Delete Block(237)", "Delete MethodDeclaration(238)", "Delete Modifier: public(239)", "Delete SimpleName: List(240)", "Delete SimpleType: List(241)", "Delete SimpleName: Module(242)", "Delete SimpleType: Module(243)", "Delete ParameterizedType: List<Module>(244)", "Delete SimpleName: getModules(245)", "Delete SimpleName: ImmutableList(246)", "Delete SimpleName: copyOf(247)", "Delete SimpleName: modules(248)", "Delete MethodInvocation(249)", "Delete ReturnStatement(250)", "Delete Block(251)", "Delete MethodDeclaration(252)", "Delete TypeDeclaration: class(253)"]}}, {"LifecycleInjector_cluster": {"actions": [{"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1", "MOV ParameterizedType: List<Module> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from discoveredModules to localModules", "operations": ["UPD SimpleName: discoveredModules from discoveredModules to localModules"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.TypeLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.multibindings.Multibinder", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: bootstrapBinder", "DEL Modifier: final", "DEL Modifier: private", "DEL SimpleType: BootstrapBinder", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: BootstrapBinder"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL ParameterizedType: List<Module>", "operations": ["DEL SimpleType: Module", "DEL SimpleType: List", "DEL SimpleName: Module", "DEL ParameterizedType: List<Module>", "DEL SimpleName: List"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: discoveredModules", "DEL SimpleName: newArrayList", "DEL SimpleName: localModules", "DEL SimpleName: Lists"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL ParameterizedType: Class<? extends Module>", "DEL SimpleType: Class", "DEL SimpleName: moduleClasses", "DEL SimpleType: Module", "DEL SimpleName: Module", "DEL SimpleName: Class", "DEL SimpleType: List", "DEL ParameterizedType: List<Class<? extends Module>>", "DEL WildcardType: ? extends Module", "DEL SimpleName: List", "DEL SingleVariableDeclaration"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: InternalModuleDependencyModule", "DEL SimpleType: InternalModuleDependencyModule", "DEL SimpleType: InternalModuleDependencyModule", "DEL SimpleName: InternalModuleDependencyModule", "DEL VariableDeclarationStatement", "DEL SimpleName: moduleDepdencyModule"]}, {"root": "DEL SimpleName: moduleDepdencyModule", "operations": ["DEL SimpleName: moduleDepdencyModule"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: Class", "DEL SimpleName: Module", "DEL EnhancedForStatement", "DEL ParameterizedType: Class<? extends Module>", "DEL SimpleType: Class", "DEL SimpleName: moduleClass", "DEL SimpleName: moduleClass", "DEL Block", "DEL SimpleName: injector", "DEL SimpleType: Module", "DEL SingleVariableDeclaration", "DEL SimpleName: getInstance", "DEL WildcardType: ? extends Module", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: moduleClasses"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: moduleDepdencyModule", "DEL ThisExpression", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: getModules", "DEL SimpleName: discoveredModules", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: addAll"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: internalBootstrapModule", "DEL SimpleName: bootstrapBinder", "DEL SimpleName: getBootstrapBinder"]}]}}, {"LifecycleInjector_diff": {"operations": ["Move ParameterizedType: List<Module>(173) into VariableDeclarationStatement(717) at 0", "Move VariableDeclarationFragment(178) into VariableDeclarationStatement(717) at 1", "Update SimpleName: discoveredModules(174) to localModules", "Delete QualifiedName: com.google.inject.TypeLiteral(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: com.google.inject.multibindings.Multibinder(54)", "Delete ImportDeclaration(55)", "Delete Modifier: private(146)", "Delete Modifier: final(147)", "Delete SimpleName: BootstrapBinder(148)", "Delete SimpleType: BootstrapBinder(149)", "Delete SimpleName: bootstrapBinder(150)", "Delete VariableDeclarationFragment(151)", "Delete FieldDeclaration(152)", "Delete Modifier: private(167)", "Delete Modifier: final(168)", "Delete FieldDeclaration(179)", "Delete SimpleName: List(731)", "Delete SimpleType: List(732)", "Delete SimpleName: Module(733)", "Delete SimpleType: Module(734)", "Delete ParameterizedType: List<Module>(735)", "Delete SimpleName: localModules(736)", "Delete SimpleName: Lists(737)", "Delete SimpleName: newArrayList(738)", "Delete SimpleName: discoveredModules(739)", "Delete MethodInvocation(740)", "Delete VariableDeclarationFragment(741)", "Delete SimpleName: List(838)", "Delete SimpleType: List(839)", "Delete SimpleName: Class(840)", "Delete SimpleType: Class(841)", "Delete SimpleName: Module(842)", "Delete SimpleType: Module(843)", "Delete WildcardType: ? extends Module(844)", "Delete ParameterizedType: Class<? extends Module>(845)", "Delete ParameterizedType: List<Class<? extends Module>>(846)", "Delete SimpleName: moduleClasses(847)", "Delete SingleVariableDeclaration(848)", "Delete SimpleName: InternalModuleDependencyModule(939)", "Delete SimpleType: InternalModuleDependencyModule(940)", "Delete SimpleName: moduleDepdencyModule(941)", "Delete SimpleName: InternalModuleDependencyModule(942)", "Delete SimpleType: InternalModuleDependencyModule(943)", "Delete ClassInstanceCreation(944)", "Delete VariableDeclarationFragment(945)", "Delete VariableDeclarationStatement(946)", "Delete SimpleName: moduleDepdencyModule(982)", "Delete SimpleName: Class(986)", "Delete SimpleType: Class(987)", "Delete SimpleName: Module(988)", "Delete SimpleType: Module(989)", "Delete WildcardType: ? extends Module(990)", "Delete ParameterizedType: Class<? extends Module>(991)", "Delete SimpleName: moduleClass(992)", "Delete SingleVariableDeclaration(993)", "Delete SimpleName: moduleClasses(994)", "Delete SimpleName: injector(995)", "Delete SimpleName: getInstance(996)", "Delete SimpleName: moduleClass(997)", "Delete MethodInvocation(998)", "Delete ExpressionStatement(999)", "Delete Block(1000)", "Delete EnhancedForStatement(1001)", "Delete ThisExpression(1002)", "Delete SimpleName: discoveredModules(1003)", "Delete FieldAccess(1004)", "Delete SimpleName: addAll(1005)", "Delete SimpleName: moduleDepdencyModule(1006)", "Delete SimpleName: getModules(1007)", "Delete MethodInvocation(1008)", "Delete MethodInvocation(1009)", "Delete ExpressionStatement(1010)", "Delete SimpleName: bootstrapBinder(1025)", "Delete SimpleName: internalBootstrapModule(1026)", "Delete SimpleName: getBootstrapBinder(1027)", "Delete MethodInvocation(1028)", "Delete Assignment: =(1029)", "Delete ExpressionStatement(1030)"]}}, {"LifecycleInjectorBuilderImpl_cluster": {"actions": [{"root": "INS SimpleType: ModuleListBuilder to FieldDeclaration at 1", "operations": ["INS SimpleType: ModuleListBuilder to FieldDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: modules to InfixExpression: != at 0", "INS Block to MethodDeclaration at 5", "INS IfStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS TryStatement to Block at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS CatchClause to TryStatement at 1", "INS Block to CatchClause at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from Module to ModuleListBuilder", "operations": ["UPD SimpleName: Module from Module to ModuleListBuilder"]}, {"root": "MOVE from SimpleType: ModuleListBuilder", "operations": ["MOV SimpleName: Module to SimpleType: ModuleListBuilder at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: ModuleListBuilder to ClassInstanceCreation at 0", "INS SimpleName: ModuleListBuilder to SimpleType: ModuleListBuilder at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ReturnStatement to Block at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: include to MethodInvocation at 1", "INS FieldAccess to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: include to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS FieldAccess to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: includeModules to MethodInvocation at 1", "INS SimpleName: ModuleListBuilder to SimpleType: ModuleListBuilder at 0", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleType: ModuleListBuilder to ClassInstanceCreation at 0"]}, {"root": "INS TryStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS TryStatement to Block at 0", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to TryStatement at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: additionalModules to MethodInvocation at 2", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV FieldAccess to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from addAll to include", "operations": ["UPD SimpleName: addAll from addAll to include"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: modules to MethodInvocation at 2", "MOV SimpleName: addAll to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: include to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS FieldAccess to MethodInvocation at 0", "INS SimpleName: include to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV ThisExpression to FieldAccess at 0", "MOV SimpleName: moduleClasses to FieldAccess at 1"]}, {"root": "UPDATE from moduleClasses to modules", "operations": ["UPD SimpleName: moduleClasses from moduleClasses to modules", "UPD SimpleName: moduleClasses from moduleClasses to modules", "UPD SimpleName: moduleClasses from moduleClasses to modules", "UPD SimpleName: moduleClasses from moduleClasses to modules"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV ThisExpression to FieldAccess at 0", "MOV SimpleName: moduleClasses to FieldAccess at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV FieldAccess to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: module to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: modules to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addAll to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: modules to MethodInvocation at 0", "INS SimpleName: build to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 0", "operations": ["INS SimpleType: ModuleListBuilder to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: ModuleListBuilder to SimpleType: ModuleListBuilder at 0"]}, {"root": "UPDATE from ImmutableList to includeModules", "operations": ["UPD SimpleName: ImmutableList from ImmutableList to includeModules", "UPD SimpleName: copyOf from copyOf to includeModules"]}, {"root": "MOVE from FieldAccess", "operations": ["MOV SimpleName: moduleClasses to FieldAccess at 1", "MOV ThisExpression to FieldAccess at 0"]}, {"root": "UPDATE from builder to build", "operations": ["UPD SimpleName: builder from builder to build"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 1", "MOV SimpleName: builder to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV FieldAccess to MethodInvocation at 0"]}, {"root": "DEL ParameterizedType: List<Module>", "operations": ["DEL SimpleType: List", "DEL ParameterizedType: List<Module>", "DEL SimpleType: Module", "DEL SimpleName: List"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: newArrayList", "DEL SimpleName: Lists"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Class", "DEL SimpleType: Module", "DEL SimpleType: List", "DEL SimpleName: ImmutableList", "DEL MethodInvocation", "DEL SimpleName: List", "DEL WildcardType: ? extends Module", "DEL SimpleName: moduleClasses", "DEL ParameterizedType: List<Class<? extends Module>>", "DEL SimpleType: Class", "DEL SimpleName: of", "DEL ParameterizedType: Class<? extends Module>", "DEL VariableDeclarationFragment", "DEL SimpleName: Module", "DEL FieldDeclaration", "DEL Modifier: private"]}, {"root": "DEL SimpleName: ImmutableList", "operations": ["DEL SimpleName: ImmutableList"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: addAll", "DEL SimpleName: addAll", "DEL MethodInvocation", "DEL SimpleName: Module", "DEL ExpressionStatement", "DEL SimpleType: Module", "DEL SimpleName: build", "DEL SimpleName: additionalModules", "DEL Assignment: ="]}, {"root": "DEL Assignment: =", "operations": ["DEL WildcardType: ? extends Module", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: of", "DEL SimpleName: ImmutableList", "DEL SimpleName: moduleClasses", "DEL FieldAccess", "DEL SimpleName: Class", "DEL SimpleType: Module", "DEL ParameterizedType: Class<? extends Module>", "DEL ThisExpression", "DEL SimpleType: Class", "DEL SimpleName: Module"]}, {"root": "DEL Assignment: =", "operations": ["DEL FieldAccess", "DEL SimpleName: ImmutableList", "DEL ParameterizedType: Class<? extends Module>", "DEL WildcardType: ? extends Module", "DEL SimpleType: Class", "DEL Assignment: =", "DEL SimpleName: Module", "DEL SimpleName: copyOf", "DEL SimpleType: Module", "DEL SimpleName: Class", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL FieldAccess"]}, {"root": "DEL Assignment: =", "operations": ["DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: build", "DEL SimpleName: addAll", "DEL MethodInvocation", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: moduleClasses", "DEL Assignment: ="]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleType: Module", "DEL SimpleName: Class", "DEL SimpleName: ImmutableList", "DEL FieldAccess", "DEL MethodInvocation", "DEL WildcardType: ? extends Module", "DEL MethodInvocation", "DEL ParameterizedType: Class<? extends Module>", "DEL ThisExpression", "DEL SimpleType: Class", "DEL SimpleName: moduleClasses", "DEL SimpleName: builder", "DEL SimpleName: Module"]}, {"root": "DEL SimpleName: addAll", "operations": ["DEL SimpleName: addAll"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL FieldAccess"]}, {"root": "DEL SimpleName: modules", "operations": ["DEL SimpleName: modules"]}, {"root": "DEL SimpleName: moduleClasses", "operations": ["DEL SimpleName: moduleClasses"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"LifecycleInjectorBuilderImpl_diff": {"operations": ["Insert SimpleType: ModuleListBuilder(31) into FieldDeclaration(37) at 1", "Insert Block(431) into MethodDeclaration(432) at 5", "Insert Block(1065) into MethodDeclaration(1066) at 4", "Update SimpleName: Module(32) to ModuleListBuilder", "Move SimpleName: Module(32) into SimpleType: ModuleListBuilder(31) at 0", "Insert ClassInstanceCreation(35) into VariableDeclarationFragment(36) at 1", "Insert IfStatement(428) into Block(431) at 0", "Move ReturnStatement(451) into Block(431) at 1", "Insert TryStatement(1064) into Block(1065) at 0", "Insert SimpleType: ModuleListBuilder(34) into ClassInstanceCreation(35) at 0", "Insert InfixExpression: !=(419) into IfStatement(428) at 0", "Insert Block(427) into IfStatement(428) at 1", "Insert MethodInvocation(514) into ExpressionStatement(515) at 0", "Insert MethodInvocation(542) into ExpressionStatement(543) at 0", "Insert MethodInvocation(633) into ExpressionStatement(634) at 0", "Insert Block(1052) into TryStatement(1064) at 0", "Insert CatchClause(1063) into TryStatement(1064) at 1", "Insert SimpleName: ModuleListBuilder(33) into SimpleType: ModuleListBuilder(34) at 0", "Insert MethodInvocation(234) into Assignment: =(235) at 1", "Insert TryStatement(313) into Block(314) at 0", "Insert SimpleName: modules(417) into InfixExpression: !=(419) at 0", "Insert NullLiteral(418) into InfixExpression: !=(419) at 1", "Move ExpressionStatement(449) into Block(427) at 0", "Insert FieldAccess(447) into MethodInvocation(514) at 0", "Insert SimpleName: include(448) into MethodInvocation(514) at 1", "Move MethodInvocation(533) into MethodInvocation(514) at 2", "Move FieldAccess(572) into MethodInvocation(542) at 0", "Update SimpleName: addAll(574) to include", "Move SimpleName: addAll(574) into MethodInvocation(542) at 1", "Move SimpleName: modules(575) into MethodInvocation(542) at 2", "Insert FieldAccess(562) into MethodInvocation(633) at 0", "Insert SimpleName: include(563) into MethodInvocation(633) at 1", "Move MethodInvocation(673) into MethodInvocation(633) at 2", "Move ReturnStatement(1091) into Block(1052) at 0", "Insert SingleVariableDeclaration(1056) into CatchClause(1063) at 0", "Insert Block(1062) into CatchClause(1063) at 1", "Insert ClassInstanceCreation(228) into MethodInvocation(234) at 0", "Insert SimpleName: includeModules(229) into MethodInvocation(234) at 1", "Move MethodInvocation(248) into MethodInvocation(234) at 2", "Insert Block(301) into TryStatement(313) at 0", "Insert CatchClause(312) into TryStatement(313) at 1", "Insert MethodInvocation(392) into ExpressionStatement(393) at 0", "Insert MethodInvocation(425) into ExpressionStatement(426) at 0", "Move ThisExpression(466) into FieldAccess(447) at 0", "Update SimpleName: moduleClasses(467) to modules", "Move SimpleName: moduleClasses(467) into FieldAccess(447) at 1", "Update SimpleName: moduleClasses(571) to modules", "Move ThisExpression(597) into FieldAccess(562) at 0", "Update SimpleName: moduleClasses(598) to modules", "Move SimpleName: moduleClasses(598) into FieldAccess(562) at 1", "Insert SimpleType: Exception(1054) into SingleVariableDeclaration(1056) at 0", "Insert SimpleName: e(1055) into SingleVariableDeclaration(1056) at 1", "Insert ThrowStatement(1061) into Block(1062) at 0", "Insert SimpleType: ModuleListBuilder(227) into ClassInstanceCreation(228) at 0", "Insert ExpressionStatement(300) into Block(301) at 0", "Insert SingleVariableDeclaration(305) into CatchClause(312) at 0", "Insert Block(311) into CatchClause(312) at 1", "Move FieldAccess(315) into MethodInvocation(392) at 0", "Insert SimpleName: include(390) into MethodInvocation(392) at 1", "Move SimpleName: module(408) into MethodInvocation(392) at 2", "Insert FieldAccess(422) into MethodInvocation(425) at 0", "Insert SimpleName: include(423) into MethodInvocation(425) at 1", "Move SimpleName: modules(446) into MethodInvocation(425) at 2", "Move MethodInvocation(568) into MethodInvocation(630) at 0", "Move SimpleName: addAll(609) into MethodInvocation(630) at 1", "Insert MethodInvocation(1040) into ClassInstanceCreation(1050) at 1", "Insert SimpleName: Exception(1053) into SimpleType: Exception(1054) at 0", "Insert ClassInstanceCreation(1060) into ThrowStatement(1061) at 0", "Insert SimpleName: ModuleListBuilder(226) into SimpleType: ModuleListBuilder(227) at 0", "Insert ClassInstanceCreation(263) into MethodInvocation(266) at 0", "Update SimpleName: copyOf(276) to includeModules", "Insert MethodInvocation(299) into ExpressionStatement(300) at 0", "Insert SimpleType: Exception(303) into SingleVariableDeclaration(305) at 0", "Insert SimpleName: e(304) into SingleVariableDeclaration(305) at 1", "Insert ThrowStatement(310) into Block(311) at 0", "Move ThisExpression(435) into FieldAccess(422) at 0", "Update SimpleName: moduleClasses(436) to modules", "Move SimpleName: moduleClasses(436) into FieldAccess(422) at 1", "Insert SimpleName: modules(1038) into MethodInvocation(1040) at 0", "Insert SimpleName: build(1039) into MethodInvocation(1040) at 1", "Insert SimpleType: RuntimeException(1058) into ClassInstanceCreation(1060) at 0", "Insert SimpleName: e(1059) into ClassInstanceCreation(1060) at 1", "Insert SimpleType: ModuleListBuilder(262) into ClassInstanceCreation(263) at 0", "Insert MethodInvocation(297) into MethodInvocation(299) at 0", "Update SimpleName: builder(310) to build", "Move SimpleName: builder(310) into MethodInvocation(299) at 1", "Insert SimpleName: Exception(302) into SimpleType: Exception(303) at 0", "Insert ClassInstanceCreation(309) into ThrowStatement(310) at 0", "Insert SimpleName: RuntimeException(1057) into SimpleType: RuntimeException(1058) at 0", "Insert SimpleName: ModuleListBuilder(261) into SimpleType: ModuleListBuilder(262) at 0", "Move FieldAccess(306) into MethodInvocation(297) at 0", "Update SimpleName: ImmutableList(307) to includeModules", "Move SimpleName: ImmutableList(307) into MethodInvocation(297) at 1", "Insert SimpleName: additionalModules(296) into MethodInvocation(297) at 2", "Insert SimpleType: RuntimeException(307) into ClassInstanceCreation(309) at 0", "Insert SimpleName: e(308) into ClassInstanceCreation(309) at 1", "Insert SimpleName: RuntimeException(306) into SimpleType: RuntimeException(307) at 0", "Delete SimpleName: List(30)", "Delete SimpleType: List(31)", "Delete SimpleType: Module(33)", "Delete ParameterizedType: List<Module>(34)", "Delete SimpleName: Lists(36)", "Delete SimpleName: newArrayList(37)", "Delete MethodInvocation(38)", "Delete Modifier: private(109)", "Delete SimpleName: List(110)", "Delete SimpleType: List(111)", "Delete SimpleName: Class(112)", "Delete SimpleType: Class(113)", "Delete SimpleName: Module(114)", "Delete SimpleType: Module(115)", "Delete WildcardType: ? extends Module(116)", "Delete ParameterizedType: Class<? extends Module>(117)", "Delete ParameterizedType: List<Class<? extends Module>>(118)", "Delete SimpleName: moduleClasses(119)", "Delete SimpleName: ImmutableList(120)", "Delete SimpleName: of(121)", "Delete MethodInvocation(122)", "Delete VariableDeclarationFragment(123)", "Delete FieldDeclaration(124)", "Delete SimpleName: ImmutableList(275)", "Delete SimpleName: Module(308)", "Delete SimpleType: Module(309)", "Delete MethodInvocation(311)", "Delete SimpleName: addAll(312)", "Delete MethodInvocation(316)", "Delete SimpleName: addAll(317)", "Delete SimpleName: additionalModules(318)", "Delete MethodInvocation(319)", "Delete SimpleName: build(320)", "Delete MethodInvocation(321)", "Delete Assignment: =(322)", "Delete ExpressionStatement(323)", "Delete ThisExpression(397)", "Delete SimpleName: moduleClasses(398)", "Delete FieldAccess(399)", "Delete SimpleName: ImmutableList(400)", "Delete SimpleName: Class(401)", "Delete SimpleType: Class(402)", "Delete SimpleName: Module(403)", "Delete SimpleType: Module(404)", "Delete WildcardType: ? extends Module(405)", "Delete ParameterizedType: Class<? extends Module>(406)", "Delete SimpleName: of(407)", "Delete MethodInvocation(409)", "Delete Assignment: =(410)", "Delete FieldAccess(437)", "Delete SimpleName: ImmutableList(438)", "Delete SimpleName: Class(439)", "Delete SimpleType: Class(440)", "Delete SimpleName: Module(441)", "Delete SimpleType: Module(442)", "Delete WildcardType: ? extends Module(443)", "Delete ParameterizedType: Class<? extends Module>(444)", "Delete SimpleName: copyOf(445)", "Delete MethodInvocation(447)", "Delete Assignment: =(448)", "Delete Block(452)", "Delete FieldAccess(468)", "Delete Assignment: =(534)", "Delete ThisExpression(557)", "Delete SimpleName: moduleClasses(558)", "Delete FieldAccess(559)", "Delete SimpleName: addAll(569)", "Delete MethodInvocation(573)", "Delete MethodInvocation(576)", "Delete SimpleName: build(577)", "Delete MethodInvocation(578)", "Delete Assignment: =(579)", "Delete SimpleName: ImmutableList(600)", "Delete SimpleName: Class(601)", "Delete SimpleType: Class(602)", "Delete SimpleName: Module(603)", "Delete SimpleType: Module(604)", "Delete WildcardType: ? extends Module(605)", "Delete ParameterizedType: Class<? extends Module>(606)", "Delete SimpleName: builder(607)", "Delete MethodInvocation(608)", "Delete ThisExpression(610)", "Delete SimpleName: moduleClasses(611)", "Delete FieldAccess(612)", "Delete MethodInvocation(613)", "Delete SimpleName: addAll(614)", "Delete FieldAccess(599)", "Delete Assignment: =(674)", "Delete SimpleName: modules(1079)", "Delete SimpleName: moduleClasses(1087)", "Delete Block(1092)"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}