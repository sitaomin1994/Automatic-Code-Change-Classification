{"application": "google-closure-compiler", "csha": "d293be43a10dd46c61dd44244333d00234223d38", "files": [{"Compiler_cluster": {"actions": [{"root": "INS SwitchStatement to Block at 0", "operations": ["INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SwitchCase to SwitchStatement at 3", "INS ThrowStatement to SwitchStatement at 6", "INS SimpleName: NTI to SwitchCase at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SwitchCase to SwitchStatement at 5", "INS SwitchStatement to Block at 0", "INS FieldAccess to SwitchStatement at 0", "INS SimpleName: getSymbolTable to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getMismatches to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 1", "INS StringLiteral: \"Can't ask for type mismatches before type checking.\" to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: mostRecentTypechecker to FieldAccess at 1", "INS SimpleName: OTI to SwitchCase at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS ReturnStatement to SwitchStatement at 4"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 2"]}]}}, {"Compiler_diff": {"operations": ["Insert SwitchStatement(4401) into Block(4402) at 0", "Insert FieldAccess(4380) into SwitchStatement(4401) at 0", "Insert SwitchCase(4382) into SwitchStatement(4401) at 1", "Move ReturnStatement(4382) into SwitchStatement(4401) at 2", "Insert SwitchCase(4389) into SwitchStatement(4401) at 3", "Insert ReturnStatement(4394) into SwitchStatement(4401) at 4", "Insert SwitchCase(4395) into SwitchStatement(4401) at 5", "Insert ThrowStatement(4400) into SwitchStatement(4401) at 6", "Insert ThisExpression(4378) into FieldAccess(4380) at 0", "Insert SimpleName: mostRecentTypechecker(4379) into FieldAccess(4380) at 1", "Insert SimpleName: OTI(4381) into SwitchCase(4382) at 0", "Insert SimpleName: NTI(4388) into SwitchCase(4389) at 0", "Insert MethodInvocation(4393) into ReturnStatement(4394) at 0", "Insert ClassInstanceCreation(4399) into ThrowStatement(4400) at 0", "Insert MethodInvocation(4391) into MethodInvocation(4393) at 0", "Insert SimpleName: getMismatches(4392) into MethodInvocation(4393) at 1", "Insert SimpleType: RuntimeException(4397) into ClassInstanceCreation(4399) at 0", "Insert StringLiteral: \"Can't ask for type mismatches before type checking.\"(4398) into ClassInstanceCreation(4399) at 1", "Insert SimpleName: getSymbolTable(4390) into MethodInvocation(4391) at 0", "Insert SimpleName: RuntimeException(4396) into SimpleType: RuntimeException(4397) at 0"]}}, {"GlobalTypeInfo_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 41", "operations": ["INS ParameterizedType: List<TypeMismatch> to FieldDeclaration at 2", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS FieldDeclaration to TypeDeclaration: class at 41", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS SimpleName: List to SimpleType: List at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: mismatches to VariableDeclarationFragment at 0", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 64", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 64", "INS SimpleName: List to SimpleType: List at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 2", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS SimpleName: getMismatches to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: mismatches to FieldAccess at 1", "INS ParameterizedType: List<TypeMismatch> to MethodDeclaration at 0", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS FieldAccess to ReturnStatement at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 2", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: mismatches to FieldAccess at 1"]}]}}, {"GlobalTypeInfo_diff": {"operations": ["Insert FieldDeclaration(603) into TypeDeclaration: class(11887) at 41", "Insert MethodDeclaration(1001) into TypeDeclaration: class(11887) at 64", "Insert Modifier: private(594) into FieldDeclaration(603) at 0", "Insert Modifier: final(595) into FieldDeclaration(603) at 1", "Insert ParameterizedType: List<TypeMismatch>(600) into FieldDeclaration(603) at 2", "Insert VariableDeclarationFragment(602) into FieldDeclaration(603) at 3", "Insert ParameterizedType: List<TypeMismatch>(994) into MethodDeclaration(1001) at 0", "Insert SimpleName: getMismatches(995) into MethodDeclaration(1001) at 1", "Insert Block(1000) into MethodDeclaration(1001) at 2", "Insert SimpleType: List(597) into ParameterizedType: List<TypeMismatch>(600) at 0", "Insert SimpleType: TypeMismatch(599) into ParameterizedType: List<TypeMismatch>(600) at 1", "Insert SimpleName: mismatches(601) into VariableDeclarationFragment(602) at 0", "Insert ExpressionStatement(839) into Block(960) at 2", "Insert SimpleType: List(991) into ParameterizedType: List<TypeMismatch>(994) at 0", "Insert SimpleType: TypeMismatch(993) into ParameterizedType: List<TypeMismatch>(994) at 1", "Insert ReturnStatement(999) into Block(1000) at 0", "Insert SimpleName: List(596) into SimpleType: List(597) at 0", "Insert SimpleName: TypeMismatch(598) into SimpleType: TypeMismatch(599) at 0", "Insert Assignment: =(838) into ExpressionStatement(839) at 0", "Insert SimpleName: List(990) into SimpleType: List(991) at 0", "Insert SimpleName: TypeMismatch(992) into SimpleType: TypeMismatch(993) at 0", "Insert FieldAccess(998) into ReturnStatement(999) at 0", "Insert FieldAccess(833) into Assignment: =(838) at 0", "Insert ClassInstanceCreation(837) into Assignment: =(838) at 1", "Insert ThisExpression(996) into FieldAccess(998) at 0", "Insert SimpleName: mismatches(997) into FieldAccess(998) at 1", "Insert ThisExpression(831) into FieldAccess(833) at 0", "Insert SimpleName: mismatches(832) into FieldAccess(833) at 1", "Insert ParameterizedType: ArrayList<>(836) into ClassInstanceCreation(837) at 0", "Insert SimpleType: ArrayList(835) into ParameterizedType: ArrayList<>(836) at 0", "Insert SimpleName: ArrayList(834) into SimpleType: ArrayList(835) at 0"]}}, {"TypeMismatch_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.javascript.rhino.FunctionTypeI to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.google.javascript.rhino.Node to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.util.Iterator to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.util.List to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: error to SingleVariableDeclaration at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ParameterizedType: List<TypeMismatch> to SingleVariableDeclaration at 0", "INS SimpleName: mismatches to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS SimpleName: implicitInterfaceUses to MethodInvocation at 2", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: required to SingleVariableDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS SimpleName: found to InfixExpression: != at 0", "INS SimpleName: required to InfixExpression: != at 0", "INS SimpleName: required to MethodInvocation at 2", "INS SimpleName: JSError to SimpleType: JSError at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS SimpleName: required to MethodInvocation at 4", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: List to SimpleType: List at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ParameterizedType: List<TypeMismatch> to SingleVariableDeclaration at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: mismatches to MethodInvocation at 1", "INS SimpleName: isSubtypeWithoutStructuralTyping to MethodInvocation at 1", "INS SimpleName: registerIfMismatch to MethodDeclaration at 2", "INS InfixExpression: && to InfixExpression: && at 0", "INS Modifier: static to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: registerMismatch to MethodInvocation at 0", "INS SimpleName: found to SingleVariableDeclaration at 1", "INS SimpleName: found to MethodInvocation at 3", "INS Block to MethodDeclaration at 8", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: found to MethodInvocation at 0", "INS SimpleName: error to MethodInvocation at 5", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS SimpleName: implicitInterfaceUses to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS SimpleType: JSError to SingleVariableDeclaration at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: mismatches to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isFunctionType to MethodInvocation at 1", "INS SimpleName: implicitInterfaceUses to MethodInvocation at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS SimpleName: isSubtypeWithoutStructuralTyping to MethodInvocation at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleName: paramItA to VariableDeclarationFragment at 0", "INS SimpleType: TypeMismatch to ClassInstanceCreation at 0", "INS SimpleName: found to ClassInstanceCreation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS SimpleName: hasNext to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: found to MethodInvocation at 0", "INS SimpleName: getReturnType to MethodInvocation at 1", "INS SimpleName: error to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: implicitInterfaceUses to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS ExpressionStatement to Block at 5", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: error to ClassInstanceCreation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: found to MethodInvocation at 0", "INS SimpleName: TypeMismatch to MethodInvocation at 0", "INS SimpleType: FunctionTypeI to VariableDeclarationStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: required to MethodInvocation at 0", "INS SimpleName: error to MethodInvocation at 6", "INS IfStatement to Block at 4", "INS SimpleName: implicitInterfaceUses to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: Iterator to ParameterizedType: Iterator<TypeI> at 0", "INS SimpleType: TypeMismatch to ClassInstanceCreation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: isSubtypeOf to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: hasNext to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: TypeI to ParameterizedType: Iterator<TypeI> at 1", "INS SimpleName: List to SimpleType: List at 0", "INS VariableDeclarationStatement to Block at 2", "INS InfixExpression: && to WhileStatement at 0", "INS SimpleName: required to MethodInvocation at 2", "INS SimpleName: fnTypeB to MethodInvocation at 0", "INS SimpleName: toMaybeFunctionType to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: mismatches to MethodInvocation at 2", "INS SimpleName: required to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS SimpleName: fnTypeB to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ParameterizedType: List<TypeMismatch> to SingleVariableDeclaration at 0", "INS WhileStatement to Block at 4", "INS SimpleName: paramItA to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleName: found to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 3", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS SimpleName: found to Assignment: = at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: mismatches to SingleVariableDeclaration at 1", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS MethodInvocation to MethodInvocation at 4", "INS ParameterizedType: Iterator<TypeI> to VariableDeclarationStatement at 0", "INS SimpleName: found to MethodInvocation at 0", "INS SimpleName: found to ClassInstanceCreation at 1", "INS SimpleName: toMaybeFunctionType to MethodInvocation at 1", "INS SimpleName: mismatches to MethodInvocation at 2", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: error to MethodInvocation at 6", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: registerMismatch to MethodDeclaration at 2", "INS SimpleName: found to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: TypeI to ParameterizedType: Iterator<TypeI> at 1", "INS SimpleName: paramItB to VariableDeclarationFragment at 0", "INS Modifier: static to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: restrictByNotNullOrUndefined to MethodInvocation at 1", "INS SimpleName: FunctionTypeI to SimpleType: FunctionTypeI at 0", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 8", "INS ReturnStatement to Block at 2", "INS Block to WhileStatement at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleName: getReturnType to MethodInvocation at 1", "INS SimpleName: required to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: strictMismatch to IfStatement at 0", "INS SimpleName: FunctionTypeI to SimpleType: FunctionTypeI at 0", "INS SimpleName: required to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MethodInvocation to InfixExpression: || at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS SimpleName: required to ClassInstanceCreation at 2", "INS SimpleName: paramItA to MethodInvocation at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: registerIfMismatch to MethodInvocation at 1", "INS SimpleName: iterator to MethodInvocation at 1", "INS SimpleName: required to SingleVariableDeclaration at 1", "INS SimpleName: TypeMismatch to MethodInvocation at 0", "INS SimpleName: next to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: FunctionTypeI to VariableDeclarationStatement at 0", "INS SimpleName: iterator to MethodInvocation at 1", "INS SimpleType: Iterator to ParameterizedType: Iterator<TypeI> at 0", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS IfStatement to Block at 2", "INS SimpleType: JSError to SingleVariableDeclaration at 0", "INS SimpleName: registerIfMismatch to MethodInvocation at 1", "INS ParameterizedType: List<TypeMismatch> to SingleVariableDeclaration at 0", "INS SimpleName: fnTypeA to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS SimpleName: implicitInterfaceUses to SingleVariableDeclaration at 1", "INS SimpleName: fnTypeA to MethodInvocation at 0", "INS SimpleName: required to Assignment: = at 0", "INS SimpleName: found to MethodInvocation at 2", "INS SimpleName: paramItB to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: required to MethodInvocation at 2", "INS SimpleName: isFunctionType to MethodInvocation at 1", "INS SimpleName: required to ClassInstanceCreation at 2", "INS SimpleName: fnTypeA to MethodInvocation at 0", "INS SimpleName: found to MethodInvocation at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 5", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS ParameterizedType: Iterator<TypeI> to VariableDeclarationStatement at 0", "INS SimpleName: paramItB to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: isSubtypeWithoutStructuralTyping to MethodInvocation at 1", "INS SimpleName: isSubtypeOf to MethodInvocation at 1", "INS SimpleName: JSError to SimpleType: JSError at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: found to MethodInvocation at 2", "INS SimpleName: restrictByNotNullOrUndefined to MethodInvocation at 1", "INS SimpleName: required to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fnTypeB to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: error to ClassInstanceCreation at 3", "INS SimpleName: strictMismatch to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS MethodInvocation to MethodInvocation at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: msg to MethodInvocation at 4", "INS SimpleName: src to MethodInvocation at 2", "INS SimpleType: JSError to VariableDeclarationStatement at 0", "INS SimpleName: msg to VariableDeclarationFragment at 0", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleName: targetType to InfixExpression: + at 3", "INS SimpleName: add to MethodInvocation at 1", "INS QualifiedName: TypeValidator.TYPE_MISMATCH_WARNING to MethodInvocation at 3", "INS SimpleName: mismatches to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: targetType to Assignment: = at 0", "INS SimpleName: src to SingleVariableDeclaration at 1", "INS SimpleName: restrictByNotNullOrUndefined to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: TypeMismatch to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: sourceType to MethodInvocation at 0", "INS SimpleName: restrictByNotNullOrUndefined to MethodInvocation at 1", "INS SimpleName: targetType to MethodInvocation at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS StringLiteral: \" as type: \" to InfixExpression: + at 2", "INS SimpleName: targetType to SingleVariableDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: sourceType to ClassInstanceCreation at 1", "INS SimpleName: recordImplicitUseOfNativeObject to MethodDeclaration at 2", "INS SimpleName: err to VariableDeclarationFragment at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS SimpleName: sourceType to MethodInvocation at 0", "INS StringLiteral: \"Implicit use of Object type: \" to InfixExpression: + at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: err to ClassInstanceCreation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: JSError to SimpleType: JSError at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS IfStatement to Block at 2", "INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ParameterizedType: List<TypeMismatch> to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: targetType to MethodInvocation at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: mismatches to MethodInvocation at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: sourceType to InfixExpression: + at 1", "INS SimpleName: isInstanceofObject to MethodInvocation at 1", "INS SimpleName: sourceType to SingleVariableDeclaration at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: TypeMismatch to SimpleType: TypeMismatch at 0", "INS SimpleName: targetType to ClassInstanceCreation at 2", "INS SimpleType: TypeMismatch to ParameterizedType: List<TypeMismatch> at 1", "INS SimpleType: List to ParameterizedType: List<TypeMismatch> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sourceType to Assignment: = at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: isInstanceofObject to MethodInvocation at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Block to IfStatement at 1", "INS SimpleName: JSError to MethodInvocation at 0", "INS SimpleName: make to MethodInvocation at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0"]}]}}, {"TypeMismatch_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(482) at 1", "Insert ImportDeclaration(5) into CompilationUnit(482) at 2", "Insert ImportDeclaration(9) into CompilationUnit(482) at 4", "Insert ImportDeclaration(11) into CompilationUnit(482) at 5", "Insert QualifiedName: com.google.javascript.rhino.FunctionTypeI(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.javascript.rhino.Node(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.util.Iterator(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: java.util.List(10) into ImportDeclaration(11) at 0", "Insert MethodDeclaration(138) into TypeDeclaration: class(481) at 6", "Insert MethodDeclaration(317) into TypeDeclaration: class(481) at 7", "Insert MethodDeclaration(394) into TypeDeclaration: class(481) at 8", "Insert Modifier: static(85) into MethodDeclaration(138) at 0", "Insert PrimitiveType: void(86) into MethodDeclaration(138) at 1", "Insert SimpleName: registerIfMismatch(87) into MethodDeclaration(138) at 2", "Insert SingleVariableDeclaration(94) into MethodDeclaration(138) at 3", "Insert SingleVariableDeclaration(101) into MethodDeclaration(138) at 4", "Insert SingleVariableDeclaration(105) into MethodDeclaration(138) at 5", "Insert SingleVariableDeclaration(109) into MethodDeclaration(138) at 6", "Insert SingleVariableDeclaration(113) into MethodDeclaration(138) at 7", "Insert Block(137) into MethodDeclaration(138) at 8", "Insert Modifier: static(139) into MethodDeclaration(317) at 0", "Insert PrimitiveType: void(140) into MethodDeclaration(317) at 1", "Insert SimpleName: registerMismatch(141) into MethodDeclaration(317) at 2", "Insert SingleVariableDeclaration(148) into MethodDeclaration(317) at 3", "Insert SingleVariableDeclaration(155) into MethodDeclaration(317) at 4", "Insert SingleVariableDeclaration(159) into MethodDeclaration(317) at 5", "Insert SingleVariableDeclaration(163) into MethodDeclaration(317) at 6", "Insert SingleVariableDeclaration(167) into MethodDeclaration(317) at 7", "Insert Block(316) into MethodDeclaration(317) at 8", "Insert Modifier: static(318) into MethodDeclaration(394) at 0", "Insert PrimitiveType: void(319) into MethodDeclaration(394) at 1", "Insert SimpleName: recordImplicitUseOfNativeObject(320) into MethodDeclaration(394) at 2", "Insert SingleVariableDeclaration(327) into MethodDeclaration(394) at 3", "Insert SingleVariableDeclaration(331) into MethodDeclaration(394) at 4", "Insert SingleVariableDeclaration(335) into MethodDeclaration(394) at 5", "Insert SingleVariableDeclaration(339) into MethodDeclaration(394) at 6", "Insert Block(393) into MethodDeclaration(394) at 7", "Insert ParameterizedType: List<TypeMismatch>(92) into SingleVariableDeclaration(94) at 0", "Insert SimpleName: mismatches(93) into SingleVariableDeclaration(94) at 1", "Insert ParameterizedType: List<TypeMismatch>(99) into SingleVariableDeclaration(101) at 0", "Insert SimpleName: implicitInterfaceUses(100) into SingleVariableDeclaration(101) at 1", "Insert SimpleType: TypeI(103) into SingleVariableDeclaration(105) at 0", "Insert SimpleName: found(104) into SingleVariableDeclaration(105) at 1", "Insert SimpleType: TypeI(107) into SingleVariableDeclaration(109) at 0", "Insert SimpleName: required(108) into SingleVariableDeclaration(109) at 1", "Insert SimpleType: JSError(111) into SingleVariableDeclaration(113) at 0", "Insert SimpleName: error(112) into SingleVariableDeclaration(113) at 1", "Insert IfStatement(136) into Block(137) at 0", "Insert ParameterizedType: List<TypeMismatch>(146) into SingleVariableDeclaration(148) at 0", "Insert SimpleName: mismatches(147) into SingleVariableDeclaration(148) at 1", "Insert ParameterizedType: List<TypeMismatch>(153) into SingleVariableDeclaration(155) at 0", "Insert SimpleName: implicitInterfaceUses(154) into SingleVariableDeclaration(155) at 1", "Insert SimpleType: TypeI(157) into SingleVariableDeclaration(159) at 0", "Insert SimpleName: found(158) into SingleVariableDeclaration(159) at 1", "Insert SimpleType: TypeI(161) into SingleVariableDeclaration(163) at 0", "Insert SimpleName: required(162) into SingleVariableDeclaration(163) at 1", "Insert SimpleType: JSError(165) into SingleVariableDeclaration(167) at 0", "Insert SimpleName: error(166) into SingleVariableDeclaration(167) at 1", "Insert ExpressionStatement(173) into Block(316) at 0", "Insert ExpressionStatement(179) into Block(316) at 1", "Insert IfStatement(219) into Block(316) at 2", "Insert ExpressionStatement(229) into Block(316) at 3", "Insert IfStatement(315) into Block(316) at 4", "Insert ParameterizedType: List<TypeMismatch>(325) into SingleVariableDeclaration(327) at 0", "Insert SimpleName: mismatches(326) into SingleVariableDeclaration(327) at 1", "Insert SimpleType: Node(329) into SingleVariableDeclaration(331) at 0", "Insert SimpleName: src(330) into SingleVariableDeclaration(331) at 1", "Insert SimpleType: TypeI(333) into SingleVariableDeclaration(335) at 0", "Insert SimpleName: sourceType(334) into SingleVariableDeclaration(335) at 1", "Insert SimpleType: TypeI(337) into SingleVariableDeclaration(339) at 0", "Insert SimpleName: targetType(338) into SingleVariableDeclaration(339) at 1", "Insert ExpressionStatement(345) into Block(393) at 0", "Insert ExpressionStatement(351) into Block(393) at 1", "Insert IfStatement(392) into Block(393) at 2", "Insert SimpleType: List(89) into ParameterizedType: List<TypeMismatch>(92) at 0", "Insert SimpleType: TypeMismatch(91) into ParameterizedType: List<TypeMismatch>(92) at 1", "Insert SimpleType: List(96) into ParameterizedType: List<TypeMismatch>(99) at 0", "Insert SimpleType: TypeMismatch(98) into ParameterizedType: List<TypeMismatch>(99) at 1", "Insert SimpleName: TypeI(102) into SimpleType: TypeI(103) at 0", "Insert SimpleName: TypeI(106) into SimpleType: TypeI(107) at 0", "Insert SimpleName: JSError(110) into SimpleType: JSError(111) at 0", "Insert InfixExpression: &&(126) into IfStatement(136) at 0", "Insert Block(135) into IfStatement(136) at 1", "Insert SimpleType: List(143) into ParameterizedType: List<TypeMismatch>(146) at 0", "Insert SimpleType: TypeMismatch(145) into ParameterizedType: List<TypeMismatch>(146) at 1", "Insert SimpleType: List(150) into ParameterizedType: List<TypeMismatch>(153) at 0", "Insert SimpleType: TypeMismatch(152) into ParameterizedType: List<TypeMismatch>(153) at 1", "Insert SimpleName: TypeI(156) into SimpleType: TypeI(157) at 0", "Insert SimpleName: TypeI(160) into SimpleType: TypeI(161) at 0", "Insert SimpleName: JSError(164) into SimpleType: JSError(165) at 0", "Insert Assignment: =(172) into ExpressionStatement(173) at 0", "Insert Assignment: =(178) into ExpressionStatement(179) at 0", "Insert InfixExpression: ||(188) into IfStatement(219) at 0", "Insert Block(218) into IfStatement(219) at 1", "Insert MethodInvocation(228) into ExpressionStatement(229) at 0", "Insert InfixExpression: &&(236) into IfStatement(315) at 0", "Insert Block(314) into IfStatement(315) at 1", "Insert SimpleType: List(322) into ParameterizedType: List<TypeMismatch>(325) at 0", "Insert SimpleType: TypeMismatch(324) into ParameterizedType: List<TypeMismatch>(325) at 1", "Insert SimpleName: Node(328) into SimpleType: Node(329) at 0", "Insert SimpleName: TypeI(332) into SimpleType: TypeI(333) at 0", "Insert SimpleName: TypeI(336) into SimpleType: TypeI(337) at 0", "Insert Assignment: =(344) into ExpressionStatement(345) at 0", "Insert Assignment: =(350) into ExpressionStatement(351) at 0", "Insert InfixExpression: &&(359) into IfStatement(392) at 0", "Insert Block(391) into IfStatement(392) at 1", "Insert SimpleName: List(88) into SimpleType: List(89) at 0", "Insert SimpleName: TypeMismatch(90) into SimpleType: TypeMismatch(91) at 0", "Insert SimpleName: List(95) into SimpleType: List(96) at 0", "Insert SimpleName: TypeMismatch(97) into SimpleType: TypeMismatch(98) at 0", "Insert InfixExpression: &&(120) into InfixExpression: &&(126) at 0", "Insert PrefixExpression: !(125) into InfixExpression: &&(126) at 1", "Insert ExpressionStatement(134) into Block(135) at 0", "Insert SimpleName: List(142) into SimpleType: List(143) at 0", "Insert SimpleName: TypeMismatch(144) into SimpleType: TypeMismatch(145) at 0", "Insert SimpleName: List(149) into SimpleType: List(150) at 0", "Insert SimpleName: TypeMismatch(151) into SimpleType: TypeMismatch(152) at 0", "Insert SimpleName: found(168) into Assignment: =(172) at 0", "Insert MethodInvocation(171) into Assignment: =(172) at 1", "Insert SimpleName: required(174) into Assignment: =(178) at 0", "Insert MethodInvocation(177) into Assignment: =(178) at 1", "Insert MethodInvocation(183) into InfixExpression: ||(188) at 0", "Insert MethodInvocation(187) into InfixExpression: ||(188) at 1", "Insert VariableDeclarationStatement(203) into Block(218) at 0", "Insert IfStatement(216) into Block(218) at 1", "Insert ReturnStatement(217) into Block(218) at 2", "Insert SimpleName: mismatches(220) into MethodInvocation(228) at 0", "Insert SimpleName: add(221) into MethodInvocation(228) at 1", "Insert ClassInstanceCreation(227) into MethodInvocation(228) at 2", "Insert MethodInvocation(232) into InfixExpression: &&(236) at 0", "Insert MethodInvocation(235) into InfixExpression: &&(236) at 1", "Insert VariableDeclarationStatement(244) into Block(314) at 0", "Insert VariableDeclarationStatement(252) into Block(314) at 1", "Insert VariableDeclarationStatement(265) into Block(314) at 2", "Insert VariableDeclarationStatement(278) into Block(314) at 3", "Insert WhileStatement(300) into Block(314) at 4", "Insert ExpressionStatement(313) into Block(314) at 5", "Insert SimpleName: List(321) into SimpleType: List(322) at 0", "Insert SimpleName: TypeMismatch(323) into SimpleType: TypeMismatch(324) at 0", "Insert SimpleName: sourceType(340) into Assignment: =(344) at 0", "Insert MethodInvocation(343) into Assignment: =(344) at 1", "Insert SimpleName: targetType(346) into Assignment: =(350) at 0", "Insert MethodInvocation(349) into Assignment: =(350) at 1", "Insert MethodInvocation(354) into InfixExpression: &&(359) at 0", "Insert PrefixExpression: !(358) into InfixExpression: &&(359) at 1", "Insert VariableDeclarationStatement(369) into Block(391) at 0", "Insert VariableDeclarationStatement(380) into Block(391) at 1", "Insert ExpressionStatement(390) into Block(391) at 2", "Insert InfixExpression: !=(116) into InfixExpression: &&(120) at 0", "Insert InfixExpression: !=(119) into InfixExpression: &&(120) at 1", "Insert MethodInvocation(124) into PrefixExpression: !(125) at 0", "Insert MethodInvocation(133) into ExpressionStatement(134) at 0", "Insert SimpleName: found(169) into MethodInvocation(171) at 0", "Insert SimpleName: restrictByNotNullOrUndefined(170) into MethodInvocation(171) at 1", "Insert SimpleName: required(175) into MethodInvocation(177) at 0", "Insert SimpleName: restrictByNotNullOrUndefined(176) into MethodInvocation(177) at 1", "Insert SimpleName: found(180) into MethodInvocation(183) at 0", "Insert SimpleName: isSubtypeOf(181) into MethodInvocation(183) at 1", "Insert SimpleName: required(182) into MethodInvocation(183) at 2", "Insert SimpleName: required(184) into MethodInvocation(187) at 0", "Insert SimpleName: isSubtypeOf(185) into MethodInvocation(187) at 1", "Insert SimpleName: found(186) into MethodInvocation(187) at 2", "Insert PrimitiveType: boolean(189) into VariableDeclarationStatement(203) at 0", "Insert VariableDeclarationFragment(202) into VariableDeclarationStatement(203) at 1", "Insert SimpleName: strictMismatch(204) into IfStatement(216) at 0", "Insert Block(215) into IfStatement(216) at 1", "Insert SimpleType: TypeMismatch(223) into ClassInstanceCreation(227) at 0", "Insert SimpleName: found(224) into ClassInstanceCreation(227) at 1", "Insert SimpleName: required(225) into ClassInstanceCreation(227) at 2", "Insert SimpleName: error(226) into ClassInstanceCreation(227) at 3", "Insert SimpleName: found(230) into MethodInvocation(232) at 0", "Insert SimpleName: isFunctionType(231) into MethodInvocation(232) at 1", "Insert SimpleName: required(233) into MethodInvocation(235) at 0", "Insert SimpleName: isFunctionType(234) into MethodInvocation(235) at 1", "Insert SimpleType: FunctionTypeI(238) into VariableDeclarationStatement(244) at 0", "Insert VariableDeclarationFragment(243) into VariableDeclarationStatement(244) at 1", "Insert SimpleType: FunctionTypeI(246) into VariableDeclarationStatement(252) at 0", "Insert VariableDeclarationFragment(251) into VariableDeclarationStatement(252) at 1", "Insert ParameterizedType: Iterator<TypeI>(257) into VariableDeclarationStatement(265) at 0", "Insert VariableDeclarationFragment(264) into VariableDeclarationStatement(265) at 1", "Insert ParameterizedType: Iterator<TypeI>(270) into VariableDeclarationStatement(278) at 0", "Insert VariableDeclarationFragment(277) into VariableDeclarationStatement(278) at 1", "Insert InfixExpression: &&(285) into WhileStatement(300) at 0", "Insert Block(299) into WhileStatement(300) at 1", "Insert MethodInvocation(312) into ExpressionStatement(313) at 0", "Insert SimpleName: sourceType(341) into MethodInvocation(343) at 0", "Insert SimpleName: restrictByNotNullOrUndefined(342) into MethodInvocation(343) at 1", "Insert SimpleName: targetType(347) into MethodInvocation(349) at 0", "Insert SimpleName: restrictByNotNullOrUndefined(348) into MethodInvocation(349) at 1", "Insert SimpleName: sourceType(352) into MethodInvocation(354) at 0", "Insert SimpleName: isInstanceofObject(353) into MethodInvocation(354) at 1", "Insert MethodInvocation(357) into PrefixExpression: !(358) at 0", "Insert SimpleType: String(361) into VariableDeclarationStatement(369) at 0", "Insert VariableDeclarationFragment(368) into VariableDeclarationStatement(369) at 1", "Insert SimpleType: JSError(371) into VariableDeclarationStatement(380) at 0", "Insert VariableDeclarationFragment(379) into VariableDeclarationStatement(380) at 1", "Insert MethodInvocation(389) into ExpressionStatement(390) at 0", "Insert SimpleName: found(114) into InfixExpression: !=(116) at 0", "Insert NullLiteral(115) into InfixExpression: !=(116) at 1", "Insert SimpleName: required(117) into InfixExpression: !=(119) at 0", "Insert NullLiteral(118) into InfixExpression: !=(119) at 1", "Insert SimpleName: found(121) into MethodInvocation(124) at 0", "Insert SimpleName: isSubtypeWithoutStructuralTyping(122) into MethodInvocation(124) at 1", "Insert SimpleName: required(123) into MethodInvocation(124) at 2", "Insert SimpleName: registerMismatch(127) into MethodInvocation(133) at 0", "Insert SimpleName: mismatches(128) into MethodInvocation(133) at 1", "Insert SimpleName: implicitInterfaceUses(129) into MethodInvocation(133) at 2", "Insert SimpleName: found(130) into MethodInvocation(133) at 3", "Insert SimpleName: required(131) into MethodInvocation(133) at 4", "Insert SimpleName: error(132) into MethodInvocation(133) at 5", "Insert SimpleName: strictMismatch(190) into VariableDeclarationFragment(202) at 0", "Insert InfixExpression: &&(201) into VariableDeclarationFragment(202) at 1", "Insert ExpressionStatement(214) into Block(215) at 0", "Insert SimpleName: TypeMismatch(222) into SimpleType: TypeMismatch(223) at 0", "Insert SimpleName: FunctionTypeI(237) into SimpleType: FunctionTypeI(238) at 0", "Insert SimpleName: fnTypeA(239) into VariableDeclarationFragment(243) at 0", "Insert MethodInvocation(242) into VariableDeclarationFragment(243) at 1", "Insert SimpleName: FunctionTypeI(245) into SimpleType: FunctionTypeI(246) at 0", "Insert SimpleName: fnTypeB(247) into VariableDeclarationFragment(251) at 0", "Insert MethodInvocation(250) into VariableDeclarationFragment(251) at 1", "Insert SimpleType: Iterator(254) into ParameterizedType: Iterator<TypeI>(257) at 0", "Insert SimpleType: TypeI(256) into ParameterizedType: Iterator<TypeI>(257) at 1", "Insert SimpleName: paramItA(258) into VariableDeclarationFragment(264) at 0", "Insert MethodInvocation(263) into VariableDeclarationFragment(264) at 1", "Insert SimpleType: Iterator(267) into ParameterizedType: Iterator<TypeI>(270) at 0", "Insert SimpleType: TypeI(269) into ParameterizedType: Iterator<TypeI>(270) at 1", "Insert SimpleName: paramItB(271) into VariableDeclarationFragment(277) at 0", "Insert MethodInvocation(276) into VariableDeclarationFragment(277) at 1", "Insert MethodInvocation(281) into InfixExpression: &&(285) at 0", "Insert MethodInvocation(284) into InfixExpression: &&(285) at 1", "Insert ExpressionStatement(298) into Block(299) at 0", "Insert SimpleName: TypeMismatch(301) into MethodInvocation(312) at 0", "Insert SimpleName: registerIfMismatch(302) into MethodInvocation(312) at 1", "Insert SimpleName: mismatches(303) into MethodInvocation(312) at 2", "Insert SimpleName: implicitInterfaceUses(304) into MethodInvocation(312) at 3", "Insert MethodInvocation(307) into MethodInvocation(312) at 4", "Insert MethodInvocation(310) into MethodInvocation(312) at 5", "Insert SimpleName: error(311) into MethodInvocation(312) at 6", "Insert SimpleName: targetType(355) into MethodInvocation(357) at 0", "Insert SimpleName: isInstanceofObject(356) into MethodInvocation(357) at 1", "Insert SimpleName: String(360) into SimpleType: String(361) at 0", "Insert SimpleName: msg(362) into VariableDeclarationFragment(368) at 0", "Insert InfixExpression: +(367) into VariableDeclarationFragment(368) at 1", "Insert SimpleName: JSError(370) into SimpleType: JSError(371) at 0", "Insert SimpleName: err(372) into VariableDeclarationFragment(379) at 0", "Insert MethodInvocation(378) into VariableDeclarationFragment(379) at 1", "Insert SimpleName: mismatches(381) into MethodInvocation(389) at 0", "Insert SimpleName: add(382) into MethodInvocation(389) at 1", "Insert ClassInstanceCreation(388) into MethodInvocation(389) at 2", "Insert PrefixExpression: !(195) into InfixExpression: &&(201) at 0", "Insert PrefixExpression: !(200) into InfixExpression: &&(201) at 1", "Insert MethodInvocation(213) into ExpressionStatement(214) at 0", "Insert SimpleName: found(240) into MethodInvocation(242) at 0", "Insert SimpleName: toMaybeFunctionType(241) into MethodInvocation(242) at 1", "Insert SimpleName: required(248) into MethodInvocation(250) at 0", "Insert SimpleName: toMaybeFunctionType(249) into MethodInvocation(250) at 1", "Insert SimpleName: Iterator(253) into SimpleType: Iterator(254) at 0", "Insert SimpleName: TypeI(255) into SimpleType: TypeI(256) at 0", "Insert MethodInvocation(261) into MethodInvocation(263) at 0", "Insert SimpleName: iterator(262) into MethodInvocation(263) at 1", "Insert SimpleName: Iterator(266) into SimpleType: Iterator(267) at 0", "Insert SimpleName: TypeI(268) into SimpleType: TypeI(269) at 0", "Insert MethodInvocation(274) into MethodInvocation(276) at 0", "Insert SimpleName: iterator(275) into MethodInvocation(276) at 1", "Insert SimpleName: paramItA(279) into MethodInvocation(281) at 0", "Insert SimpleName: hasNext(280) into MethodInvocation(281) at 1", "Insert SimpleName: paramItB(282) into MethodInvocation(284) at 0", "Insert SimpleName: hasNext(283) into MethodInvocation(284) at 1", "Insert MethodInvocation(297) into ExpressionStatement(298) at 0", "Insert SimpleName: fnTypeA(305) into MethodInvocation(307) at 0", "Insert SimpleName: getReturnType(306) into MethodInvocation(307) at 1", "Insert SimpleName: fnTypeB(308) into MethodInvocation(310) at 0", "Insert SimpleName: getReturnType(309) into MethodInvocation(310) at 1", "Insert StringLiteral: \"Implicit use of Object type: \"(363) into InfixExpression: +(367) at 0", "Insert SimpleName: sourceType(364) into InfixExpression: +(367) at 1", "Insert StringLiteral: \" as type: \"(365) into InfixExpression: +(367) at 2", "Insert SimpleName: targetType(366) into InfixExpression: +(367) at 3", "Insert SimpleName: JSError(373) into MethodInvocation(378) at 0", "Insert SimpleName: make(374) into MethodInvocation(378) at 1", "Insert SimpleName: src(375) into MethodInvocation(378) at 2", "Insert QualifiedName: TypeValidator.TYPE_MISMATCH_WARNING(376) into MethodInvocation(378) at 3", "Insert SimpleName: msg(377) into MethodInvocation(378) at 4", "Insert SimpleType: TypeMismatch(384) into ClassInstanceCreation(388) at 0", "Insert SimpleName: sourceType(385) into ClassInstanceCreation(388) at 1", "Insert SimpleName: targetType(386) into ClassInstanceCreation(388) at 2", "Insert SimpleName: err(387) into ClassInstanceCreation(388) at 3", "Insert MethodInvocation(194) into PrefixExpression: !(195) at 0", "Insert MethodInvocation(199) into PrefixExpression: !(200) at 0", "Insert SimpleName: implicitInterfaceUses(205) into MethodInvocation(213) at 0", "Insert SimpleName: add(206) into MethodInvocation(213) at 1", "Insert ClassInstanceCreation(212) into MethodInvocation(213) at 2", "Insert SimpleName: fnTypeA(259) into MethodInvocation(261) at 0", "Insert SimpleName: getParameterTypes(260) into MethodInvocation(261) at 1", "Insert SimpleName: fnTypeB(272) into MethodInvocation(274) at 0", "Insert SimpleName: getParameterTypes(273) into MethodInvocation(274) at 1", "Insert SimpleName: TypeMismatch(286) into MethodInvocation(297) at 0", "Insert SimpleName: registerIfMismatch(287) into MethodInvocation(297) at 1", "Insert SimpleName: mismatches(288) into MethodInvocation(297) at 2", "Insert SimpleName: implicitInterfaceUses(289) into MethodInvocation(297) at 3", "Insert MethodInvocation(292) into MethodInvocation(297) at 4", "Insert MethodInvocation(295) into MethodInvocation(297) at 5", "Insert SimpleName: error(296) into MethodInvocation(297) at 6", "Insert SimpleName: TypeMismatch(383) into SimpleType: TypeMismatch(384) at 0", "Insert SimpleName: found(191) into MethodInvocation(194) at 0", "Insert SimpleName: isSubtypeWithoutStructuralTyping(192) into MethodInvocation(194) at 1", "Insert SimpleName: required(193) into MethodInvocation(194) at 2", "Insert SimpleName: required(196) into MethodInvocation(199) at 0", "Insert SimpleName: isSubtypeWithoutStructuralTyping(197) into MethodInvocation(199) at 1", "Insert SimpleName: found(198) into MethodInvocation(199) at 2", "Insert SimpleType: TypeMismatch(208) into ClassInstanceCreation(212) at 0", "Insert SimpleName: found(209) into ClassInstanceCreation(212) at 1", "Insert SimpleName: required(210) into ClassInstanceCreation(212) at 2", "Insert SimpleName: error(211) into ClassInstanceCreation(212) at 3", "Insert SimpleName: paramItA(290) into MethodInvocation(292) at 0", "Insert SimpleName: next(291) into MethodInvocation(292) at 1", "Insert SimpleName: paramItB(293) into MethodInvocation(295) at 0", "Insert SimpleName: next(294) into MethodInvocation(295) at 1", "Insert SimpleName: TypeMismatch(207) into SimpleType: TypeMismatch(208) at 0"]}}, {"TypeValidator_cluster": {"actions": [{"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2", "INS SimpleName: mismatches to FieldAccess at 1"]}, {"root": "INS FieldAccess to MethodInvocation at 3", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 3", "INS SimpleName: implicitInterfaceUses to FieldAccess at 1"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: mismatches to FieldAccess at 1", "INS FieldAccess to MethodInvocation at 2"]}, {"root": "INS FieldAccess to MethodInvocation at 3", "operations": ["INS SimpleName: implicitInterfaceUses to FieldAccess at 1", "INS FieldAccess to MethodInvocation at 3", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS FieldAccess to MethodInvocation at 2", "INS SimpleName: mismatches to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 3", "operations": ["INS FieldAccess to MethodInvocation at 3", "INS SimpleName: implicitInterfaceUses to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS SimpleName: mismatches to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS FieldAccess to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: mismatches to FieldAccess at 1"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2", "INS SimpleName: mismatches to FieldAccess at 1"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS SimpleName: mismatches to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS SimpleName: mismatches to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2"]}, {"root": "INS FieldAccess to MethodInvocation at 3", "operations": ["INS FieldAccess to MethodInvocation at 3", "INS SimpleName: implicitInterfaceUses to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS SimpleName: mismatches to FieldAccess at 1", "INS FieldAccess to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 3", "operations": ["INS FieldAccess to MethodInvocation at 3", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: implicitInterfaceUses to FieldAccess at 1"]}, {"root": "INS SimpleName: TypeMismatch to MethodInvocation at 0", "operations": ["INS SimpleName: TypeMismatch to MethodInvocation at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 2", "operations": ["INS SimpleName: mismatches to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2"]}, {"root": "INS FieldAccess to MethodInvocation at 3", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 3", "INS SimpleName: implicitInterfaceUses to FieldAccess at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL SimpleType: JSType", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: JSType", "DEL MethodDeclaration", "DEL SimpleName: proto", "DEL SimpleName: t", "DEL SimpleType: ObjectType", "DEL MethodInvocation", "DEL Modifier: static", "DEL Modifier: private", "DEL InfixExpression: &&", "DEL SimpleName: toObjectType", "DEL SimpleName: isUnionType", "DEL SimpleName: ObjectType", "DEL SimpleName: proto", "DEL SimpleName: t", "DEL SimpleName: getImplicitPrototype", "DEL SimpleName: isInstanceOfObject", "DEL Block", "DEL IfStatement", "DEL SimpleName: proto", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL BooleanLiteral: false", "DEL SingleVariableDeclaration", "DEL SimpleName: isObject", "DEL SimpleName: t", "DEL VariableDeclarationFragment", "DEL SimpleName: isNativeObjectType", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: t", "DEL MethodInvocation", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: src", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: isInstanceOfObject", "DEL PrefixExpression: !", "DEL StringLiteral: \"Implicit use of Object type: \"", "DEL SimpleName: targetType", "DEL SimpleName: isInstanceOfObject", "DEL SimpleName: sourceType", "DEL SimpleName: JSError", "DEL SimpleName: targetType", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: TypeMismatch", "DEL Block", "DEL SimpleName: JSType", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: targetType", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: JSType", "DEL SimpleName: JSType", "DEL PrimitiveType: void", "DEL InfixExpression: +", "DEL SimpleName: msg", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: err", "DEL SimpleName: restrictByNotNullOrUndefined", "DEL SimpleName: TYPE_MISMATCH_WARNING", "DEL SimpleName: src", "DEL SimpleType: JSType", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleName: recordImplicitUseOfNativeObject", "DEL VariableDeclarationStatement", "DEL SimpleName: sourceType", "DEL StringLiteral: \" as type: \"", "DEL SimpleName: msg", "DEL SimpleName: TypeMismatch", "DEL MethodInvocation", "DEL SimpleName: targetType", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: restrictByNotNullOrUndefined", "DEL SimpleName: sourceType", "DEL SimpleName: mismatches", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL SimpleName: sourceType", "DEL SimpleName: make", "DEL SimpleName: sourceType", "DEL SimpleName: sourceType", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: add", "DEL SimpleName: targetType", "DEL SimpleType: JSError", "DEL Modifier: private", "DEL SimpleName: targetType", "DEL SimpleName: err", "DEL SimpleName: String", "DEL IfStatement", "DEL SimpleType: Node", "DEL ExpressionStatement", "DEL SimpleName: JSError"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleType: Node", "DEL SimpleName: add", "DEL SimpleName: registerIfMismatch", "DEL SimpleType: FunctionType", "DEL MethodInvocation", "DEL SimpleName: strictMismatch", "DEL IfStatement", "DEL SimpleName: paramItA", "DEL SimpleName: registerIfMismatch", "DEL SimpleName: error", "DEL MethodInvocation", "DEL SimpleName: required", "DEL SimpleName: required", "DEL Assignment: =", "DEL SimpleType: TypeMismatch", "DEL SimpleName: fnTypeB", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: required", "DEL SimpleName: found", "DEL InfixExpression: ||", "DEL SimpleName: iterator", "DEL SimpleName: getReturnType", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: TypeMismatch", "DEL SimpleName: mismatches", "DEL ExpressionStatement", "DEL SimpleName: required", "DEL SimpleName: TypeMismatch", "DEL MethodInvocation", "DEL SimpleName: isSubtype", "DEL SimpleName: error", "DEL SimpleName: hasNext", "DEL SimpleType: JSError", "DEL SimpleName: isSubtypeWithoutStructuralTyping", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: paramItB", "DEL VariableDeclarationStatement", "DEL SimpleName: next", "DEL MethodDeclaration", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Iterator", "DEL MethodInvocation", "DEL SimpleName: fnTypeA", "DEL MethodInvocation", "DEL SimpleType: Node", "DEL Block", "DEL SimpleName: found", "DEL SimpleName: paramItA", "DEL SimpleName: required", "DEL SimpleType: Iterator", "DEL VariableDeclarationStatement", "DEL SimpleName: iterator", "DEL SimpleName: getReturnType", "DEL SimpleName: fnTypeA", "DEL PrimitiveType: boolean", "DEL SimpleName: required", "DEL SimpleName: fnTypeB", "DEL SimpleName: required", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: getJSType", "DEL Modifier: private", "DEL IfStatement", "DEL SimpleName: implicitInterfaceUses", "DEL VariableDeclarationStatement", "DEL SimpleType: Iterator", "DEL SimpleName: isSubtypeWithoutStructuralTyping", "DEL SimpleName: restrictByNotNullOrUndefined", "DEL Block", "DEL SimpleName: found", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: paramItB", "DEL SimpleName: error", "DEL MethodInvocation", "DEL SimpleName: error", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: restrictByNotNullOrUndefined", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: getParameters", "DEL SimpleName: isSubtype", "DEL SimpleName: TypeMismatch", "DEL SimpleName: fnTypeA", "DEL SimpleName: JSType", "DEL SimpleName: found", "DEL VariableDeclarationFragment", "DEL SimpleName: strictMismatch", "DEL SimpleName: getJSType", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: FunctionType", "DEL SimpleName: found", "DEL SimpleName: FunctionType", "DEL SimpleName: required", "DEL ParameterizedType: Iterator<Node>", "DEL SimpleName: paramItA", "DEL VariableDeclarationStatement", "DEL SimpleName: required", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL WhileStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: JSType", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: found", "DEL VariableDeclarationFragment", "DEL SimpleName: Node", "DEL SimpleName: paramItB", "DEL SimpleName: isFunctionType", "DEL SimpleName: isFunctionType", "DEL SimpleType: FunctionType", "DEL SimpleName: getParameters", "DEL SimpleName: next", "DEL ExpressionStatement", "DEL SimpleName: hasNext", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: found", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: JSError", "DEL SimpleName: found", "DEL InfixExpression: &&", "DEL ClassInstanceCreation", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleName: required", "DEL SimpleName: registerMismatch", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: fnTypeB", "DEL SimpleName: JSType", "DEL ParameterizedType: Iterator<Node>", "DEL SimpleName: toMaybeFunctionType", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SimpleName: found", "DEL SimpleName: required", "DEL SimpleName: found", "DEL MethodInvocation", "DEL SimpleName: toMaybeFunctionType", "DEL SimpleName: found", "DEL SimpleType: JSType", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL SingleVariableDeclaration", "DEL SimpleName: error", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleName: required", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL SimpleType: JSError", "DEL InfixExpression: &&", "DEL PrimitiveType: void", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleName: required", "DEL IfStatement", "DEL SimpleName: error", "DEL SimpleName: registerIfMismatch", "DEL InfixExpression: !=", "DEL SimpleName: required", "DEL SimpleName: registerMismatch", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: isSubtypeWithoutStructuralTyping", "DEL SimpleName: found", "DEL SimpleType: JSType", "DEL SimpleName: found", "DEL SimpleName: JSType", "DEL SimpleName: found", "DEL SimpleName: error", "DEL Block", "DEL SimpleName: JSType", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: JSError", "DEL SimpleType: JSType", "DEL SimpleName: required", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: found", "DEL PrefixExpression: !"]}]}}, {"TypeValidator_diff": {"operations": ["Insert SimpleName: TypeMismatch(1740) into MethodInvocation(1763) at 0", "Insert FieldAccess(1744) into MethodInvocation(1763) at 2", "Insert FieldAccess(1747) into MethodInvocation(1763) at 3", "Insert SimpleName: TypeMismatch(2191) into MethodInvocation(2215) at 0", "Insert FieldAccess(2195) into MethodInvocation(2215) at 2", "Insert FieldAccess(2198) into MethodInvocation(2215) at 3", "Insert SimpleName: TypeMismatch(2704) into MethodInvocation(2715) at 0", "Insert FieldAccess(2708) into MethodInvocation(2715) at 2", "Insert FieldAccess(2711) into MethodInvocation(2715) at 3", "Insert SimpleName: TypeMismatch(1012) into MethodInvocation(1020) at 0", "Insert FieldAccess(1016) into MethodInvocation(1020) at 2", "Insert SimpleName: TypeMismatch(1350) into MethodInvocation(1358) at 0", "Insert FieldAccess(1354) into MethodInvocation(1358) at 2", "Insert SimpleName: TypeMismatch(1437) into MethodInvocation(1445) at 0", "Insert FieldAccess(1441) into MethodInvocation(1445) at 2", "Insert SimpleName: TypeMismatch(1538) into MethodInvocation(1546) at 0", "Insert FieldAccess(1542) into MethodInvocation(1546) at 2", "Insert ThisExpression(1742) into FieldAccess(1744) at 0", "Insert SimpleName: mismatches(1743) into FieldAccess(1744) at 1", "Insert ThisExpression(1745) into FieldAccess(1747) at 0", "Insert SimpleName: implicitInterfaceUses(1746) into FieldAccess(1747) at 1", "Insert ThisExpression(2193) into FieldAccess(2195) at 0", "Insert SimpleName: mismatches(2194) into FieldAccess(2195) at 1", "Insert ThisExpression(2196) into FieldAccess(2198) at 0", "Insert SimpleName: implicitInterfaceUses(2197) into FieldAccess(2198) at 1", "Insert ThisExpression(2706) into FieldAccess(2708) at 0", "Insert SimpleName: mismatches(2707) into FieldAccess(2708) at 1", "Insert ThisExpression(2709) into FieldAccess(2711) at 0", "Insert SimpleName: implicitInterfaceUses(2710) into FieldAccess(2711) at 1", "Insert ThisExpression(1014) into FieldAccess(1016) at 0", "Insert SimpleName: mismatches(1015) into FieldAccess(1016) at 1", "Insert ThisExpression(1352) into FieldAccess(1354) at 0", "Insert SimpleName: mismatches(1353) into FieldAccess(1354) at 1", "Insert ThisExpression(1439) into FieldAccess(1441) at 0", "Insert SimpleName: mismatches(1440) into FieldAccess(1441) at 1", "Insert ThisExpression(1540) into FieldAccess(1542) at 0", "Insert SimpleName: mismatches(1541) into FieldAccess(1542) at 1", "Insert SimpleName: TypeMismatch(1654) into MethodInvocation(1674) at 0", "Insert FieldAccess(1658) into MethodInvocation(1674) at 2", "Insert FieldAccess(1661) into MethodInvocation(1674) at 3", "Insert SimpleName: TypeMismatch(2347) into MethodInvocation(2358) at 0", "Insert FieldAccess(2351) into MethodInvocation(2358) at 2", "Insert FieldAccess(2354) into MethodInvocation(2358) at 3", "Insert SimpleName: TypeMismatch(2560) into MethodInvocation(2584) at 0", "Insert FieldAccess(2564) into MethodInvocation(2584) at 2", "Insert FieldAccess(2567) into MethodInvocation(2584) at 3", "Insert ThisExpression(1656) into FieldAccess(1658) at 0", "Insert SimpleName: mismatches(1657) into FieldAccess(1658) at 1", "Insert ThisExpression(1659) into FieldAccess(1661) at 0", "Insert SimpleName: implicitInterfaceUses(1660) into FieldAccess(1661) at 1", "Insert ThisExpression(2349) into FieldAccess(2351) at 0", "Insert SimpleName: mismatches(2350) into FieldAccess(2351) at 1", "Insert ThisExpression(2352) into FieldAccess(2354) at 0", "Insert SimpleName: implicitInterfaceUses(2353) into FieldAccess(2354) at 1", "Insert ThisExpression(2562) into FieldAccess(2564) at 0", "Insert SimpleName: mismatches(2563) into FieldAccess(2564) at 1", "Insert ThisExpression(2565) into FieldAccess(2567) at 0", "Insert SimpleName: implicitInterfaceUses(2566) into FieldAccess(2567) at 1", "Delete QualifiedName: java.util.Iterator(56)", "Delete ImportDeclaration(57)", "Delete Modifier: private(2785)", "Delete Modifier: static(2786)", "Delete PrimitiveType: boolean(2787)", "Delete SimpleName: isInstanceOfObject(2788)", "Delete SimpleName: JSType(2789)", "Delete SimpleType: JSType(2790)", "Delete SimpleName: t(2791)", "Delete SingleVariableDeclaration(2792)", "Delete SimpleName: t(2793)", "Delete SimpleName: isObject(2794)", "Delete MethodInvocation(2795)", "Delete SimpleName: t(2796)", "Delete SimpleName: isUnionType(2797)", "Delete MethodInvocation(2798)", "Delete PrefixExpression: !(2799)", "Delete InfixExpression: &&(2800)", "Delete SimpleName: ObjectType(2801)", "Delete SimpleType: ObjectType(2802)", "Delete SimpleName: proto(2803)", "Delete SimpleName: t(2804)", "Delete SimpleName: toObjectType(2805)", "Delete MethodInvocation(2806)", "Delete SimpleName: getImplicitPrototype(2807)", "Delete MethodInvocation(2808)", "Delete VariableDeclarationFragment(2809)", "Delete VariableDeclarationStatement(2810)", "Delete SimpleName: proto(2811)", "Delete NullLiteral(2812)", "Delete InfixExpression: !=(2813)", "Delete SimpleName: proto(2814)", "Delete SimpleName: isNativeObjectType(2815)", "Delete MethodInvocation(2816)", "Delete InfixExpression: &&(2817)", "Delete ReturnStatement(2818)", "Delete Block(2819)", "Delete IfStatement(2820)", "Delete BooleanLiteral: false(2821)", "Delete ReturnStatement(2822)", "Delete Block(2823)", "Delete MethodDeclaration(2824)", "Delete Modifier: private(2825)", "Delete PrimitiveType: void(2826)", "Delete SimpleName: recordImplicitUseOfNativeObject(2827)", "Delete SimpleName: Node(2828)", "Delete SimpleType: Node(2829)", "Delete SimpleName: src(2830)", "Delete SingleVariableDeclaration(2831)", "Delete SimpleName: JSType(2832)", "Delete SimpleType: JSType(2833)", "Delete SimpleName: sourceType(2834)", "Delete SingleVariableDeclaration(2835)", "Delete SimpleName: JSType(2836)", "Delete SimpleType: JSType(2837)", "Delete SimpleName: targetType(2838)", "Delete SingleVariableDeclaration(2839)", "Delete SimpleName: sourceType(2840)", "Delete SimpleName: sourceType(2841)", "Delete SimpleName: restrictByNotNullOrUndefined(2842)", "Delete MethodInvocation(2843)", "Delete Assignment: =(2844)", "Delete ExpressionStatement(2845)", "Delete SimpleName: targetType(2846)", "Delete SimpleName: targetType(2847)", "Delete SimpleName: restrictByNotNullOrUndefined(2848)", "Delete MethodInvocation(2849)", "Delete Assignment: =(2850)", "Delete ExpressionStatement(2851)", "Delete SimpleName: isInstanceOfObject(2852)", "Delete SimpleName: sourceType(2853)", "Delete MethodInvocation(2854)", "Delete SimpleName: isInstanceOfObject(2855)", "Delete SimpleName: targetType(2856)", "Delete MethodInvocation(2857)", "Delete PrefixExpression: !(2858)", "Delete InfixExpression: &&(2859)", "Delete SimpleName: String(2860)", "Delete SimpleType: String(2861)", "Delete SimpleName: msg(2862)", "Delete StringLiteral: \"Implicit use of Object type: \"(2863)", "Delete SimpleName: sourceType(2864)", "Delete StringLiteral: \" as type: \"(2865)", "Delete SimpleName: targetType(2866)", "Delete InfixExpression: +(2867)", "Delete VariableDeclarationFragment(2868)", "Delete VariableDeclarationStatement(2869)", "Delete SimpleName: JSError(2870)", "Delete SimpleType: JSError(2871)", "Delete SimpleName: err(2872)", "Delete SimpleName: JSError(2873)", "Delete SimpleName: make(2874)", "Delete SimpleName: src(2875)", "Delete SimpleName: TYPE_MISMATCH_WARNING(2876)", "Delete SimpleName: msg(2877)", "Delete MethodInvocation(2878)", "Delete VariableDeclarationFragment(2879)", "Delete VariableDeclarationStatement(2880)", "Delete SimpleName: mismatches(2881)", "Delete SimpleName: add(2882)", "Delete SimpleName: TypeMismatch(2883)", "Delete SimpleType: TypeMismatch(2884)", "Delete SimpleName: sourceType(2885)", "Delete SimpleName: targetType(2886)", "Delete SimpleName: err(2887)", "Delete ClassInstanceCreation(2888)", "Delete MethodInvocation(2889)", "Delete ExpressionStatement(2890)", "Delete Block(2891)", "Delete IfStatement(2892)", "Delete Block(2893)", "Delete MethodDeclaration(2894)", "Delete Modifier: private(2895)", "Delete PrimitiveType: void(2896)", "Delete SimpleName: registerMismatch(2897)", "Delete SimpleName: JSType(2898)", "Delete SimpleType: JSType(2899)", "Delete SimpleName: found(2900)", "Delete SingleVariableDeclaration(2901)", "Delete SimpleName: JSType(2902)", "Delete SimpleType: JSType(2903)", "Delete SimpleName: required(2904)", "Delete SingleVariableDeclaration(2905)", "Delete SimpleName: JSError(2906)", "Delete SimpleType: JSError(2907)", "Delete SimpleName: error(2908)", "Delete SingleVariableDeclaration(2909)", "Delete SimpleName: found(2910)", "Delete SimpleName: found(2911)", "Delete SimpleName: restrictByNotNullOrUndefined(2912)", "Delete MethodInvocation(2913)", "Delete Assignment: =(2914)", "Delete ExpressionStatement(2915)", "Delete SimpleName: required(2916)", "Delete SimpleName: required(2917)", "Delete SimpleName: restrictByNotNullOrUndefined(2918)", "Delete MethodInvocation(2919)", "Delete Assignment: =(2920)", "Delete ExpressionStatement(2921)", "Delete SimpleName: found(2922)", "Delete SimpleName: isSubtype(2923)", "Delete SimpleName: required(2924)", "Delete MethodInvocation(2925)", "Delete SimpleName: required(2926)", "Delete SimpleName: isSubtype(2927)", "Delete SimpleName: found(2928)", "Delete MethodInvocation(2929)", "Delete InfixExpression: ||(2930)", "Delete PrimitiveType: boolean(2931)", "Delete SimpleName: strictMismatch(2932)", "Delete SimpleName: found(2933)", "Delete SimpleName: isSubtypeWithoutStructuralTyping(2934)", "Delete SimpleName: required(2935)", "Delete MethodInvocation(2936)", "Delete PrefixExpression: !(2937)", "Delete SimpleName: required(2938)", "Delete SimpleName: isSubtypeWithoutStructuralTyping(2939)", "Delete SimpleName: found(2940)", "Delete MethodInvocation(2941)", "Delete PrefixExpression: !(2942)", "Delete InfixExpression: &&(2943)", "Delete VariableDeclarationFragment(2944)", "Delete VariableDeclarationStatement(2945)", "Delete SimpleName: strictMismatch(2946)", "Delete SimpleName: implicitInterfaceUses(2947)", "Delete SimpleName: add(2948)", "Delete SimpleName: TypeMismatch(2949)", "Delete SimpleType: TypeMismatch(2950)", "Delete SimpleName: found(2951)", "Delete SimpleName: required(2952)", "Delete SimpleName: error(2953)", "Delete ClassInstanceCreation(2954)", "Delete MethodInvocation(2955)", "Delete ExpressionStatement(2956)", "Delete Block(2957)", "Delete IfStatement(2958)", "Delete ReturnStatement(2959)", "Delete Block(2960)", "Delete IfStatement(2961)", "Delete SimpleName: mismatches(2962)", "Delete SimpleName: add(2963)", "Delete SimpleName: TypeMismatch(2964)", "Delete SimpleType: TypeMismatch(2965)", "Delete SimpleName: found(2966)", "Delete SimpleName: required(2967)", "Delete SimpleName: error(2968)", "Delete ClassInstanceCreation(2969)", "Delete MethodInvocation(2970)", "Delete ExpressionStatement(2971)", "Delete SimpleName: found(2972)", "Delete SimpleName: isFunctionType(2973)", "Delete MethodInvocation(2974)", "Delete SimpleName: required(2975)", "Delete SimpleName: isFunctionType(2976)", "Delete MethodInvocation(2977)", "Delete InfixExpression: &&(2978)", "Delete SimpleName: FunctionType(2979)", "Delete SimpleType: FunctionType(2980)", "Delete SimpleName: fnTypeA(2981)", "Delete SimpleName: found(2982)", "Delete SimpleName: toMaybeFunctionType(2983)", "Delete MethodInvocation(2984)", "Delete VariableDeclarationFragment(2985)", "Delete VariableDeclarationStatement(2986)", "Delete SimpleName: FunctionType(2987)", "Delete SimpleType: FunctionType(2988)", "Delete SimpleName: fnTypeB(2989)", "Delete SimpleName: required(2990)", "Delete SimpleName: toMaybeFunctionType(2991)", "Delete MethodInvocation(2992)", "Delete VariableDeclarationFragment(2993)", "Delete VariableDeclarationStatement(2994)", "Delete SimpleName: Iterator(2995)", "Delete SimpleType: Iterator(2996)", "Delete SimpleName: Node(2997)", "Delete SimpleType: Node(2998)", "Delete ParameterizedType: Iterator<Node>(2999)", "Delete SimpleName: paramItA(3000)", "Delete SimpleName: fnTypeA(3001)", "Delete SimpleName: getParameters(3002)", "Delete MethodInvocation(3003)", "Delete SimpleName: iterator(3004)", "Delete MethodInvocation(3005)", "Delete VariableDeclarationFragment(3006)", "Delete VariableDeclarationStatement(3007)", "Delete SimpleName: Iterator(3008)", "Delete SimpleType: Iterator(3009)", "Delete SimpleName: Node(3010)", "Delete SimpleType: Node(3011)", "Delete ParameterizedType: Iterator<Node>(3012)", "Delete SimpleName: paramItB(3013)", "Delete SimpleName: fnTypeB(3014)", "Delete SimpleName: getParameters(3015)", "Delete MethodInvocation(3016)", "Delete SimpleName: iterator(3017)", "Delete MethodInvocation(3018)", "Delete VariableDeclarationFragment(3019)", "Delete VariableDeclarationStatement(3020)", "Delete SimpleName: paramItA(3021)", "Delete SimpleName: hasNext(3022)", "Delete MethodInvocation(3023)", "Delete SimpleName: paramItB(3024)", "Delete SimpleName: hasNext(3025)", "Delete MethodInvocation(3026)", "Delete InfixExpression: &&(3027)", "Delete SimpleName: registerIfMismatch(3028)", "Delete SimpleName: paramItA(3029)", "Delete SimpleName: next(3030)", "Delete MethodInvocation(3031)", "Delete SimpleName: getJSType(3032)", "Delete MethodInvocation(3033)", "Delete SimpleName: paramItB(3034)", "Delete SimpleName: next(3035)", "Delete MethodInvocation(3036)", "Delete SimpleName: getJSType(3037)", "Delete MethodInvocation(3038)", "Delete SimpleName: error(3039)", "Delete MethodInvocation(3040)", "Delete ExpressionStatement(3041)", "Delete Block(3042)", "Delete WhileStatement(3043)", "Delete SimpleName: registerIfMismatch(3044)", "Delete SimpleName: fnTypeA(3045)", "Delete SimpleName: getReturnType(3046)", "Delete MethodInvocation(3047)", "Delete SimpleName: fnTypeB(3048)", "Delete SimpleName: getReturnType(3049)", "Delete MethodInvocation(3050)", "Delete SimpleName: error(3051)", "Delete MethodInvocation(3052)", "Delete ExpressionStatement(3053)", "Delete Block(3054)", "Delete IfStatement(3055)", "Delete Block(3056)", "Delete MethodDeclaration(3057)", "Delete Modifier: private(3058)", "Delete PrimitiveType: void(3059)", "Delete SimpleName: registerIfMismatch(3060)", "Delete SimpleName: JSType(3061)", "Delete SimpleType: JSType(3062)", "Delete SimpleName: found(3063)", "Delete SingleVariableDeclaration(3064)", "Delete SimpleName: JSType(3065)", "Delete SimpleType: JSType(3066)", "Delete SimpleName: required(3067)", "Delete SingleVariableDeclaration(3068)", "Delete SimpleName: JSError(3069)", "Delete SimpleType: JSError(3070)", "Delete SimpleName: error(3071)", "Delete SingleVariableDeclaration(3072)", "Delete SimpleName: found(3073)", "Delete NullLiteral(3074)", "Delete InfixExpression: !=(3075)", "Delete SimpleName: required(3076)", "Delete NullLiteral(3077)", "Delete InfixExpression: !=(3078)", "Delete InfixExpression: &&(3079)", "Delete SimpleName: found(3080)", "Delete SimpleName: isSubtypeWithoutStructuralTyping(3081)", "Delete SimpleName: required(3082)", "Delete MethodInvocation(3083)", "Delete PrefixExpression: !(3084)", "Delete InfixExpression: &&(3085)", "Delete SimpleName: registerMismatch(3086)", "Delete SimpleName: found(3087)", "Delete SimpleName: required(3088)", "Delete SimpleName: error(3089)", "Delete MethodInvocation(3090)", "Delete ExpressionStatement(3091)", "Delete Block(3092)", "Delete IfStatement(3093)", "Delete Block(3094)", "Delete MethodDeclaration(3095)"]}}, {"FunctionTypeI_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 17", "operations": ["INS SimpleType: Iterable to ParameterizedType: Iterable<TypeI> at 0", "INS MethodDeclaration to TypeDeclaration: interface at 17", "INS ParameterizedType: Iterable<TypeI> to MethodDeclaration at 0", "INS SimpleName: getParameterTypes to MethodDeclaration at 1", "INS SimpleName: Iterable to SimpleType: Iterable at 0", "INS SimpleType: TypeI to ParameterizedType: Iterable<TypeI> at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0"]}]}}, {"FunctionTypeI_diff": {"operations": ["Insert MethodDeclaration(111) into TypeDeclaration: interface(112) at 17", "Insert ParameterizedType: Iterable<TypeI>(109) into MethodDeclaration(111) at 0", "Insert SimpleName: getParameterTypes(110) into MethodDeclaration(111) at 1", "Insert SimpleType: Iterable(106) into ParameterizedType: Iterable<TypeI>(109) at 0", "Insert SimpleType: TypeI(108) into ParameterizedType: Iterable<TypeI>(109) at 1", "Insert SimpleName: Iterable(105) into SimpleType: Iterable(106) at 0", "Insert SimpleName: TypeI(107) into SimpleType: TypeI(108) at 0"]}}, {"TypeI_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: interface", "operations": ["MOV MethodDeclaration to TypeDeclaration: interface at 20"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 16", "operations": ["INS MethodDeclaration to TypeDeclaration: interface at 16", "INS SimpleName: type to SingleVariableDeclaration at 1", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: isSubtypeWithoutStructuralTyping to MethodDeclaration at 1", "INS SimpleName: TypeI to SimpleType: TypeI at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 28", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 0", "INS SimpleName: isLiteralObject to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: interface at 28"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: with a different nominal type can flow to places that treat them as Object. But I'm not to TagElement at 1", "INS TextElement: True when the nominal type of this type is Object. The name is not great, because objects to TagElement at 0", "INS TextElement: sure what a better name would be. to TagElement at 2", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0"]}]}}, {"TypeI_diff": {"operations": ["Move MethodDeclaration(92) into TypeDeclaration: interface(182) at 20", "Insert MethodDeclaration(66) into TypeDeclaration: interface(182) at 16", "Insert MethodDeclaration(107) into TypeDeclaration: interface(182) at 28", "Insert PrimitiveType: boolean(60) into MethodDeclaration(66) at 0", "Insert SimpleName: isSubtypeWithoutStructuralTyping(61) into MethodDeclaration(66) at 1", "Insert SingleVariableDeclaration(65) into MethodDeclaration(66) at 2", "Insert Javadoc(83) into MethodDeclaration(86) at 0", "Insert PrimitiveType: boolean(105) into MethodDeclaration(107) at 0", "Insert SimpleName: isLiteralObject(106) into MethodDeclaration(107) at 1", "Insert SimpleType: TypeI(63) into SingleVariableDeclaration(65) at 0", "Insert SimpleName: type(64) into SingleVariableDeclaration(65) at 1", "Insert TagElement(82) into Javadoc(83) at 0", "Insert SimpleName: TypeI(62) into SimpleType: TypeI(63) at 0", "Insert TextElement: True when the nominal type of this type is Object. The name is not great, because objects(79) into TagElement(82) at 0", "Insert TextElement: with a different nominal type can flow to places that treat them as Object. But I'm not(80) into TagElement(82) at 1", "Insert TextElement: sure what a better name would be.(81) into TagElement(82) at 2"]}}, {"FunctionType_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.google.javascript.rhino.TypeI to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 64", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 5", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: types to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS Block to IfStatement at 1", "INS SimpleName: types to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 64", "INS ExpressionStatement to Block at 2", "INS SimpleName: howmanyTypes to ClassInstanceCreation at 1", "INS SimpleName: getMaxArityWithoutRestFormals to MethodInvocation at 0", "INS SimpleType: TypeI to ParameterizedType: ArrayList<TypeI> at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: types to ReturnStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ParameterizedType: List<TypeI> to MethodDeclaration at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS MethodInvocation to ConditionalExpression at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: howmanyTypes to VariableDeclarationFragment at 0", "INS SimpleType: List to ParameterizedType: List<TypeI> at 0", "INS ParameterizedType: ArrayList<TypeI> to VariableDeclarationStatement at 0", "INS SimpleName: restFormals to FieldAccess at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<TypeI> at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS Block to MethodDeclaration at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: getParameterTypes to MethodDeclaration at 1", "INS SimpleName: types to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS NumberLiteral: 0 to ConditionalExpression at 2", "INS IfStatement to Block at 4", "INS SimpleName: hasRestFormals to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: hasRestFormals to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 2", "INS ExpressionStatement to Block at 3", "INS FieldAccess to MethodInvocation at 2", "INS SimpleName: optionalFormals to FieldAccess at 1", "INS SimpleName: types to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleType: TypeI to ParameterizedType: List<TypeI> at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: requiredFormals to FieldAccess at 1", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS MethodInvocation to ExpressionStatement at 0"]}]}}, {"FunctionType_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(5037) at 7", "Insert ImportDeclaration(17) into CompilationUnit(5037) at 8", "Insert QualifiedName: com.google.javascript.rhino.TypeI(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.ArrayList(16) into ImportDeclaration(17) at 0", "Insert MethodDeclaration(3230) into TypeDeclaration: class(5036) at 64", "Insert ParameterizedType: List<TypeI>(3174) into MethodDeclaration(3230) at 0", "Insert SimpleName: getParameterTypes(3175) into MethodDeclaration(3230) at 1", "Insert Block(3229) into MethodDeclaration(3230) at 2", "Insert SimpleType: List(3171) into ParameterizedType: List<TypeI>(3174) at 0", "Insert SimpleType: TypeI(3173) into ParameterizedType: List<TypeI>(3174) at 1", "Insert VariableDeclarationStatement(3188) into Block(3229) at 0", "Insert VariableDeclarationStatement(3201) into Block(3229) at 1", "Insert ExpressionStatement(3208) into Block(3229) at 2", "Insert ExpressionStatement(3215) into Block(3229) at 3", "Insert IfStatement(3226) into Block(3229) at 4", "Insert ReturnStatement(3228) into Block(3229) at 5", "Insert SimpleName: List(3170) into SimpleType: List(3171) at 0", "Insert SimpleName: TypeI(3172) into SimpleType: TypeI(3173) at 0", "Insert PrimitiveType: int(3176) into VariableDeclarationStatement(3188) at 0", "Insert VariableDeclarationFragment(3187) into VariableDeclarationStatement(3188) at 1", "Insert ParameterizedType: ArrayList<TypeI>(3193) into VariableDeclarationStatement(3201) at 0", "Insert VariableDeclarationFragment(3200) into VariableDeclarationStatement(3201) at 1", "Insert MethodInvocation(3207) into ExpressionStatement(3208) at 0", "Insert MethodInvocation(3214) into ExpressionStatement(3215) at 0", "Insert MethodInvocation(3217) into IfStatement(3226) at 0", "Insert Block(3225) into IfStatement(3226) at 1", "Insert SimpleName: types(3227) into ReturnStatement(3228) at 0", "Insert SimpleName: howmanyTypes(3177) into VariableDeclarationFragment(3187) at 0", "Insert InfixExpression: +(3186) into VariableDeclarationFragment(3187) at 1", "Insert SimpleType: ArrayList(3190) into ParameterizedType: ArrayList<TypeI>(3193) at 0", "Insert SimpleType: TypeI(3192) into ParameterizedType: ArrayList<TypeI>(3193) at 1", "Insert SimpleName: types(3194) into VariableDeclarationFragment(3200) at 0", "Insert ClassInstanceCreation(3199) into VariableDeclarationFragment(3200) at 1", "Insert SimpleName: types(3202) into MethodInvocation(3207) at 0", "Insert SimpleName: addAll(3203) into MethodInvocation(3207) at 1", "Insert FieldAccess(3206) into MethodInvocation(3207) at 2", "Insert SimpleName: types(3209) into MethodInvocation(3214) at 0", "Insert SimpleName: addAll(3210) into MethodInvocation(3214) at 1", "Insert FieldAccess(3213) into MethodInvocation(3214) at 2", "Insert SimpleName: hasRestFormals(3216) into MethodInvocation(3217) at 0", "Insert ExpressionStatement(3224) into Block(3225) at 0", "Insert MethodInvocation(3179) into InfixExpression: +(3186) at 0", "Insert ParenthesizedExpression(3185) into InfixExpression: +(3186) at 1", "Insert SimpleName: ArrayList(3189) into SimpleType: ArrayList(3190) at 0", "Insert SimpleName: TypeI(3191) into SimpleType: TypeI(3192) at 0", "Insert ParameterizedType: ArrayList<>(3197) into ClassInstanceCreation(3199) at 0", "Insert SimpleName: howmanyTypes(3198) into ClassInstanceCreation(3199) at 1", "Insert ThisExpression(3204) into FieldAccess(3206) at 0", "Insert SimpleName: requiredFormals(3205) into FieldAccess(3206) at 1", "Insert ThisExpression(3211) into FieldAccess(3213) at 0", "Insert SimpleName: optionalFormals(3212) into FieldAccess(3213) at 1", "Insert MethodInvocation(3223) into ExpressionStatement(3224) at 0", "Insert SimpleName: getMaxArityWithoutRestFormals(3178) into MethodInvocation(3179) at 0", "Insert ConditionalExpression(3184) into ParenthesizedExpression(3185) at 0", "Insert SimpleType: ArrayList(3196) into ParameterizedType: ArrayList<>(3197) at 0", "Insert SimpleName: types(3218) into MethodInvocation(3223) at 0", "Insert SimpleName: add(3219) into MethodInvocation(3223) at 1", "Insert FieldAccess(3222) into MethodInvocation(3223) at 2", "Insert MethodInvocation(3181) into ConditionalExpression(3184) at 0", "Insert NumberLiteral: 1(3182) into ConditionalExpression(3184) at 1", "Insert NumberLiteral: 0(3183) into ConditionalExpression(3184) at 2", "Insert SimpleName: ArrayList(3195) into SimpleType: ArrayList(3196) at 0", "Insert ThisExpression(3220) into FieldAccess(3222) at 0", "Insert SimpleName: restFormals(3221) into FieldAccess(3222) at 1", "Insert SimpleName: hasRestFormals(3180) into MethodInvocation(3181) at 0"]}}, {"JSType_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 189", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: getNominalTypeIfSingletonObj to MethodInvocation at 0", "INS SimpleType: NominalType to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: || to ReturnStatement at 0", "INS SimpleName: nt to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: nt to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 189", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS IfStatement to Block at 0", "INS SimpleName: isInstanceofObject to MethodDeclaration at 3", "INS SimpleName: nt to VariableDeclarationFragment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: isBuiltinObject to MethodInvocation at 1", "INS SimpleName: isLiteralObject to MethodInvocation at 1", "INS SimpleName: isSingletonObj to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: NominalType to SimpleType: NominalType at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 210", "operations": ["INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 210", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SimpleName: other to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: isSubtypeWithoutStructuralTyping to MethodDeclaration at 3", "INS ThrowStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 211", "operations": ["INS ParameterizedType: Iterable<TypeI> to MethodDeclaration at 2", "INS SimpleName: checkNotNull to MethodInvocation at 1", "INS SimpleName: Iterable to SimpleType: Iterable at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFunType to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleType: Iterable to ParameterizedType: Iterable<TypeI> at 0", "INS SimpleType: TypeI to ParameterizedType: Iterable<TypeI> at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getParameterTypes to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 211", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from isInstanceofObject to isLiteralObject", "operations": ["UPD SimpleName: isInstanceofObject from isInstanceofObject to isLiteralObject"]}]}}, {"JSType_diff": {"operations": ["Insert MethodDeclaration(7633) into TypeDeclaration: class(8303) at 189", "Insert MethodDeclaration(8283) into TypeDeclaration: class(8303) at 210", "Insert MethodDeclaration(8302) into TypeDeclaration: class(8303) at 211", "Update SimpleName: isInstanceofObject(7595) to isLiteralObject", "Insert MarkerAnnotation(7607) into MethodDeclaration(7633) at 0", "Insert Modifier: public(7608) into MethodDeclaration(7633) at 1", "Insert PrimitiveType: boolean(7609) into MethodDeclaration(7633) at 2", "Insert SimpleName: isInstanceofObject(7610) into MethodDeclaration(7633) at 3", "Insert Block(7632) into MethodDeclaration(7633) at 4", "Insert MarkerAnnotation(8270) into MethodDeclaration(8283) at 0", "Insert Modifier: public(8271) into MethodDeclaration(8283) at 1", "Insert PrimitiveType: boolean(8272) into MethodDeclaration(8283) at 2", "Insert SimpleName: isSubtypeWithoutStructuralTyping(8273) into MethodDeclaration(8283) at 3", "Insert SingleVariableDeclaration(8277) into MethodDeclaration(8283) at 4", "Insert Block(8282) into MethodDeclaration(8283) at 5", "Insert MarkerAnnotation(8285) into MethodDeclaration(8302) at 0", "Insert Modifier: public(8286) into MethodDeclaration(8302) at 1", "Insert ParameterizedType: Iterable<TypeI>(8291) into MethodDeclaration(8302) at 2", "Insert SimpleName: getParameterTypes(8292) into MethodDeclaration(8302) at 3", "Insert Block(8301) into MethodDeclaration(8302) at 4", "Insert SimpleName: Override(7606) into MarkerAnnotation(7607) at 0", "Insert IfStatement(7629) into Block(7632) at 0", "Insert ReturnStatement(7631) into Block(7632) at 1", "Insert SimpleName: Override(8269) into MarkerAnnotation(8270) at 0", "Insert SimpleType: TypeI(8275) into SingleVariableDeclaration(8277) at 0", "Insert SimpleName: other(8276) into SingleVariableDeclaration(8277) at 1", "Insert ThrowStatement(8281) into Block(8282) at 0", "Insert SimpleName: Override(8284) into MarkerAnnotation(8285) at 0", "Insert SimpleType: Iterable(8288) into ParameterizedType: Iterable<TypeI>(8291) at 0", "Insert SimpleType: TypeI(8290) into ParameterizedType: Iterable<TypeI>(8291) at 1", "Insert ReturnStatement(8300) into Block(8301) at 0", "Insert MethodInvocation(7612) into IfStatement(7629) at 0", "Insert Block(7628) into IfStatement(7629) at 1", "Insert BooleanLiteral: false(7630) into ReturnStatement(7631) at 0", "Insert SimpleName: TypeI(8274) into SimpleType: TypeI(8275) at 0", "Insert ClassInstanceCreation(8280) into ThrowStatement(8281) at 0", "Insert SimpleName: Iterable(8287) into SimpleType: Iterable(8288) at 0", "Insert SimpleName: TypeI(8289) into SimpleType: TypeI(8290) at 0", "Insert MethodInvocation(8299) into ReturnStatement(8300) at 0", "Insert SimpleName: isSingletonObj(7611) into MethodInvocation(7612) at 0", "Insert VariableDeclarationStatement(7619) into Block(7628) at 0", "Insert ReturnStatement(7627) into Block(7628) at 1", "Insert SimpleType: UnsupportedOperationException(8279) into ClassInstanceCreation(8280) at 0", "Insert MethodInvocation(8297) into MethodInvocation(8299) at 0", "Insert SimpleName: getParameterTypes(8298) into MethodInvocation(8299) at 1", "Insert SimpleType: NominalType(7614) into VariableDeclarationStatement(7619) at 0", "Insert VariableDeclarationFragment(7618) into VariableDeclarationStatement(7619) at 1", "Insert InfixExpression: ||(7626) into ReturnStatement(7627) at 0", "Insert SimpleName: UnsupportedOperationException(8278) into SimpleType: UnsupportedOperationException(8279) at 0", "Insert SimpleName: Preconditions(8293) into MethodInvocation(8297) at 0", "Insert SimpleName: checkNotNull(8294) into MethodInvocation(8297) at 1", "Insert MethodInvocation(8296) into MethodInvocation(8297) at 2", "Insert SimpleName: NominalType(7613) into SimpleType: NominalType(7614) at 0", "Insert SimpleName: nt(7615) into VariableDeclarationFragment(7618) at 0", "Insert MethodInvocation(7617) into VariableDeclarationFragment(7618) at 1", "Insert MethodInvocation(7622) into InfixExpression: ||(7626) at 0", "Insert MethodInvocation(7625) into InfixExpression: ||(7626) at 1", "Insert SimpleName: getFunType(8295) into MethodInvocation(8296) at 0", "Insert SimpleName: getNominalTypeIfSingletonObj(7616) into MethodInvocation(7617) at 0", "Insert SimpleName: nt(7620) into MethodInvocation(7622) at 0", "Insert SimpleName: isLiteralObject(7621) into MethodInvocation(7622) at 1", "Insert SimpleName: nt(7623) into MethodInvocation(7625) at 0", "Insert SimpleName: isBuiltinObject(7624) into MethodInvocation(7625) at 1"]}}, {"FunctionType_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.google.javascript.rhino.TypeI to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 64", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 5", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: types to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS Block to IfStatement at 1", "INS SimpleName: types to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 64", "INS ExpressionStatement to Block at 2", "INS SimpleName: howmanyTypes to ClassInstanceCreation at 1", "INS SimpleName: getMaxArityWithoutRestFormals to MethodInvocation at 0", "INS SimpleType: TypeI to ParameterizedType: ArrayList<TypeI> at 1", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: types to ReturnStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ParameterizedType: List<TypeI> to MethodDeclaration at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS MethodInvocation to ConditionalExpression at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: howmanyTypes to VariableDeclarationFragment at 0", "INS SimpleType: List to ParameterizedType: List<TypeI> at 0", "INS ParameterizedType: ArrayList<TypeI> to VariableDeclarationStatement at 0", "INS SimpleName: restFormals to FieldAccess at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<TypeI> at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS Block to MethodDeclaration at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: getParameterTypes to MethodDeclaration at 1", "INS SimpleName: types to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 2", "INS ThisExpression to FieldAccess at 0", "INS NumberLiteral: 0 to ConditionalExpression at 2", "INS IfStatement to Block at 4", "INS SimpleName: hasRestFormals to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: hasRestFormals to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 2", "INS ExpressionStatement to Block at 3", "INS FieldAccess to MethodInvocation at 2", "INS SimpleName: optionalFormals to FieldAccess at 1", "INS SimpleName: types to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleType: TypeI to ParameterizedType: List<TypeI> at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: requiredFormals to FieldAccess at 1", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS MethodInvocation to ExpressionStatement at 0"]}]}}, {"FunctionType_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(5037) at 7", "Insert ImportDeclaration(17) into CompilationUnit(5037) at 8", "Insert QualifiedName: com.google.javascript.rhino.TypeI(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.ArrayList(16) into ImportDeclaration(17) at 0", "Insert MethodDeclaration(3230) into TypeDeclaration: class(5036) at 64", "Insert ParameterizedType: List<TypeI>(3174) into MethodDeclaration(3230) at 0", "Insert SimpleName: getParameterTypes(3175) into MethodDeclaration(3230) at 1", "Insert Block(3229) into MethodDeclaration(3230) at 2", "Insert SimpleType: List(3171) into ParameterizedType: List<TypeI>(3174) at 0", "Insert SimpleType: TypeI(3173) into ParameterizedType: List<TypeI>(3174) at 1", "Insert VariableDeclarationStatement(3188) into Block(3229) at 0", "Insert VariableDeclarationStatement(3201) into Block(3229) at 1", "Insert ExpressionStatement(3208) into Block(3229) at 2", "Insert ExpressionStatement(3215) into Block(3229) at 3", "Insert IfStatement(3226) into Block(3229) at 4", "Insert ReturnStatement(3228) into Block(3229) at 5", "Insert SimpleName: List(3170) into SimpleType: List(3171) at 0", "Insert SimpleName: TypeI(3172) into SimpleType: TypeI(3173) at 0", "Insert PrimitiveType: int(3176) into VariableDeclarationStatement(3188) at 0", "Insert VariableDeclarationFragment(3187) into VariableDeclarationStatement(3188) at 1", "Insert ParameterizedType: ArrayList<TypeI>(3193) into VariableDeclarationStatement(3201) at 0", "Insert VariableDeclarationFragment(3200) into VariableDeclarationStatement(3201) at 1", "Insert MethodInvocation(3207) into ExpressionStatement(3208) at 0", "Insert MethodInvocation(3214) into ExpressionStatement(3215) at 0", "Insert MethodInvocation(3217) into IfStatement(3226) at 0", "Insert Block(3225) into IfStatement(3226) at 1", "Insert SimpleName: types(3227) into ReturnStatement(3228) at 0", "Insert SimpleName: howmanyTypes(3177) into VariableDeclarationFragment(3187) at 0", "Insert InfixExpression: +(3186) into VariableDeclarationFragment(3187) at 1", "Insert SimpleType: ArrayList(3190) into ParameterizedType: ArrayList<TypeI>(3193) at 0", "Insert SimpleType: TypeI(3192) into ParameterizedType: ArrayList<TypeI>(3193) at 1", "Insert SimpleName: types(3194) into VariableDeclarationFragment(3200) at 0", "Insert ClassInstanceCreation(3199) into VariableDeclarationFragment(3200) at 1", "Insert SimpleName: types(3202) into MethodInvocation(3207) at 0", "Insert SimpleName: addAll(3203) into MethodInvocation(3207) at 1", "Insert FieldAccess(3206) into MethodInvocation(3207) at 2", "Insert SimpleName: types(3209) into MethodInvocation(3214) at 0", "Insert SimpleName: addAll(3210) into MethodInvocation(3214) at 1", "Insert FieldAccess(3213) into MethodInvocation(3214) at 2", "Insert SimpleName: hasRestFormals(3216) into MethodInvocation(3217) at 0", "Insert ExpressionStatement(3224) into Block(3225) at 0", "Insert MethodInvocation(3179) into InfixExpression: +(3186) at 0", "Insert ParenthesizedExpression(3185) into InfixExpression: +(3186) at 1", "Insert SimpleName: ArrayList(3189) into SimpleType: ArrayList(3190) at 0", "Insert SimpleName: TypeI(3191) into SimpleType: TypeI(3192) at 0", "Insert ParameterizedType: ArrayList<>(3197) into ClassInstanceCreation(3199) at 0", "Insert SimpleName: howmanyTypes(3198) into ClassInstanceCreation(3199) at 1", "Insert ThisExpression(3204) into FieldAccess(3206) at 0", "Insert SimpleName: requiredFormals(3205) into FieldAccess(3206) at 1", "Insert ThisExpression(3211) into FieldAccess(3213) at 0", "Insert SimpleName: optionalFormals(3212) into FieldAccess(3213) at 1", "Insert MethodInvocation(3223) into ExpressionStatement(3224) at 0", "Insert SimpleName: getMaxArityWithoutRestFormals(3178) into MethodInvocation(3179) at 0", "Insert ConditionalExpression(3184) into ParenthesizedExpression(3185) at 0", "Insert SimpleType: ArrayList(3196) into ParameterizedType: ArrayList<>(3197) at 0", "Insert SimpleName: types(3218) into MethodInvocation(3223) at 0", "Insert SimpleName: add(3219) into MethodInvocation(3223) at 1", "Insert FieldAccess(3222) into MethodInvocation(3223) at 2", "Insert MethodInvocation(3181) into ConditionalExpression(3184) at 0", "Insert NumberLiteral: 1(3182) into ConditionalExpression(3184) at 1", "Insert NumberLiteral: 0(3183) into ConditionalExpression(3184) at 2", "Insert SimpleName: ArrayList(3195) into SimpleType: ArrayList(3196) at 0", "Insert ThisExpression(3220) into FieldAccess(3222) at 0", "Insert SimpleName: restFormals(3221) into FieldAccess(3222) at 1", "Insert SimpleName: hasRestFormals(3180) into MethodInvocation(3181) at 0"]}}, {"JSType_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 189", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: getNominalTypeIfSingletonObj to MethodInvocation at 0", "INS SimpleType: NominalType to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: || to ReturnStatement at 0", "INS SimpleName: nt to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: nt to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 189", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS IfStatement to Block at 0", "INS SimpleName: isInstanceofObject to MethodDeclaration at 3", "INS SimpleName: nt to VariableDeclarationFragment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: isBuiltinObject to MethodInvocation at 1", "INS SimpleName: isLiteralObject to MethodInvocation at 1", "INS SimpleName: isSingletonObj to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: NominalType to SimpleType: NominalType at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 210", "operations": ["INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS SimpleType: TypeI to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 210", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SimpleName: other to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: isSubtypeWithoutStructuralTyping to MethodDeclaration at 3", "INS ThrowStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 211", "operations": ["INS ParameterizedType: Iterable<TypeI> to MethodDeclaration at 2", "INS SimpleName: checkNotNull to MethodInvocation at 1", "INS SimpleName: Iterable to SimpleType: Iterable at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getFunType to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: TypeI to SimpleType: TypeI at 0", "INS SimpleType: Iterable to ParameterizedType: Iterable<TypeI> at 0", "INS SimpleType: TypeI to ParameterizedType: Iterable<TypeI> at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getParameterTypes to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 211", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from isInstanceofObject to isLiteralObject", "operations": ["UPD SimpleName: isInstanceofObject from isInstanceofObject to isLiteralObject"]}]}}, {"JSType_diff": {"operations": ["Insert MethodDeclaration(7633) into TypeDeclaration: class(8303) at 189", "Insert MethodDeclaration(8283) into TypeDeclaration: class(8303) at 210", "Insert MethodDeclaration(8302) into TypeDeclaration: class(8303) at 211", "Update SimpleName: isInstanceofObject(7595) to isLiteralObject", "Insert MarkerAnnotation(7607) into MethodDeclaration(7633) at 0", "Insert Modifier: public(7608) into MethodDeclaration(7633) at 1", "Insert PrimitiveType: boolean(7609) into MethodDeclaration(7633) at 2", "Insert SimpleName: isInstanceofObject(7610) into MethodDeclaration(7633) at 3", "Insert Block(7632) into MethodDeclaration(7633) at 4", "Insert MarkerAnnotation(8270) into MethodDeclaration(8283) at 0", "Insert Modifier: public(8271) into MethodDeclaration(8283) at 1", "Insert PrimitiveType: boolean(8272) into MethodDeclaration(8283) at 2", "Insert SimpleName: isSubtypeWithoutStructuralTyping(8273) into MethodDeclaration(8283) at 3", "Insert SingleVariableDeclaration(8277) into MethodDeclaration(8283) at 4", "Insert Block(8282) into MethodDeclaration(8283) at 5", "Insert MarkerAnnotation(8285) into MethodDeclaration(8302) at 0", "Insert Modifier: public(8286) into MethodDeclaration(8302) at 1", "Insert ParameterizedType: Iterable<TypeI>(8291) into MethodDeclaration(8302) at 2", "Insert SimpleName: getParameterTypes(8292) into MethodDeclaration(8302) at 3", "Insert Block(8301) into MethodDeclaration(8302) at 4", "Insert SimpleName: Override(7606) into MarkerAnnotation(7607) at 0", "Insert IfStatement(7629) into Block(7632) at 0", "Insert ReturnStatement(7631) into Block(7632) at 1", "Insert SimpleName: Override(8269) into MarkerAnnotation(8270) at 0", "Insert SimpleType: TypeI(8275) into SingleVariableDeclaration(8277) at 0", "Insert SimpleName: other(8276) into SingleVariableDeclaration(8277) at 1", "Insert ThrowStatement(8281) into Block(8282) at 0", "Insert SimpleName: Override(8284) into MarkerAnnotation(8285) at 0", "Insert SimpleType: Iterable(8288) into ParameterizedType: Iterable<TypeI>(8291) at 0", "Insert SimpleType: TypeI(8290) into ParameterizedType: Iterable<TypeI>(8291) at 1", "Insert ReturnStatement(8300) into Block(8301) at 0", "Insert MethodInvocation(7612) into IfStatement(7629) at 0", "Insert Block(7628) into IfStatement(7629) at 1", "Insert BooleanLiteral: false(7630) into ReturnStatement(7631) at 0", "Insert SimpleName: TypeI(8274) into SimpleType: TypeI(8275) at 0", "Insert ClassInstanceCreation(8280) into ThrowStatement(8281) at 0", "Insert SimpleName: Iterable(8287) into SimpleType: Iterable(8288) at 0", "Insert SimpleName: TypeI(8289) into SimpleType: TypeI(8290) at 0", "Insert MethodInvocation(8299) into ReturnStatement(8300) at 0", "Insert SimpleName: isSingletonObj(7611) into MethodInvocation(7612) at 0", "Insert VariableDeclarationStatement(7619) into Block(7628) at 0", "Insert ReturnStatement(7627) into Block(7628) at 1", "Insert SimpleType: UnsupportedOperationException(8279) into ClassInstanceCreation(8280) at 0", "Insert MethodInvocation(8297) into MethodInvocation(8299) at 0", "Insert SimpleName: getParameterTypes(8298) into MethodInvocation(8299) at 1", "Insert SimpleType: NominalType(7614) into VariableDeclarationStatement(7619) at 0", "Insert VariableDeclarationFragment(7618) into VariableDeclarationStatement(7619) at 1", "Insert InfixExpression: ||(7626) into ReturnStatement(7627) at 0", "Insert SimpleName: UnsupportedOperationException(8278) into SimpleType: UnsupportedOperationException(8279) at 0", "Insert SimpleName: Preconditions(8293) into MethodInvocation(8297) at 0", "Insert SimpleName: checkNotNull(8294) into MethodInvocation(8297) at 1", "Insert MethodInvocation(8296) into MethodInvocation(8297) at 2", "Insert SimpleName: NominalType(7613) into SimpleType: NominalType(7614) at 0", "Insert SimpleName: nt(7615) into VariableDeclarationFragment(7618) at 0", "Insert MethodInvocation(7617) into VariableDeclarationFragment(7618) at 1", "Insert MethodInvocation(7622) into InfixExpression: ||(7626) at 0", "Insert MethodInvocation(7625) into InfixExpression: ||(7626) at 1", "Insert SimpleName: getFunType(8295) into MethodInvocation(8296) at 0", "Insert SimpleName: getNominalTypeIfSingletonObj(7616) into MethodInvocation(7617) at 0", "Insert SimpleName: nt(7620) into MethodInvocation(7622) at 0", "Insert SimpleName: isLiteralObject(7621) into MethodInvocation(7622) at 1", "Insert SimpleName: nt(7623) into MethodInvocation(7625) at 0", "Insert SimpleName: isBuiltinObject(7624) into MethodInvocation(7625) at 1"]}}, {"JSTypeRegistry_cluster": {"actions": [{"root": "INS ReturnStatement to Block at 1", "operations": ["INS MethodInvocation to InfixExpression: || at 1", "INS ReturnStatement to Block at 1", "INS InfixExpression: || to ReturnStatement at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0"]}, {"root": "UPDATE from toMaybeRecordType to isRecordType", "operations": ["UPD SimpleName: toMaybeRecordType from toMaybeRecordType to isRecordType"]}, {"root": "UPDATE from tObj to t", "operations": ["UPD SimpleName: tObj from tObj to t"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tObj to MethodInvocation at 0", "MOV SimpleName: isAnonymous to MethodInvocation at 1"]}, {"root": "UPDATE from isAnonymous to isLiteralObject", "operations": ["UPD SimpleName: isAnonymous from isAnonymous to isLiteralObject"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleType: PrototypeObjectType", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: tObj", "DEL SimpleName: t", "DEL Block", "DEL CastExpression", "DEL SimpleType: PrototypeObjectType", "DEL InstanceofExpression", "DEL Block", "DEL SimpleName: PrototypeObjectType", "DEL SimpleName: PrototypeObjectType", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL IfStatement", "DEL SimpleName: PrototypeObjectType", "DEL ReturnStatement", "DEL SimpleName: t", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL SimpleType: PrototypeObjectType"]}, {"root": "DEL ReturnStatement", "operations": ["DEL BooleanLiteral: false", "DEL ReturnStatement"]}]}}, {"JSTypeRegistry_diff": {"operations": ["Insert ReturnStatement(2004) into Block(2005) at 1", "Insert InfixExpression: ||(2003) into ReturnStatement(2004) at 0", "Move MethodInvocation(1999) into InfixExpression: ||(2003) at 0", "Insert MethodInvocation(2002) into InfixExpression: ||(2003) at 1", "Update SimpleName: toMaybeRecordType(1998) to isRecordType", "Update SimpleName: tObj(2018) to t", "Move SimpleName: tObj(2018) into MethodInvocation(2002) at 0", "Update SimpleName: isAnonymous(2019) to isLiteralObject", "Move SimpleName: isAnonymous(2019) into MethodInvocation(2002) at 1", "Delete NullLiteral(2000)", "Delete InfixExpression: !=(2001)", "Delete BooleanLiteral: true(2002)", "Delete ReturnStatement(2003)", "Delete Block(2004)", "Delete SimpleName: t(2005)", "Delete SimpleName: PrototypeObjectType(2006)", "Delete SimpleType: PrototypeObjectType(2007)", "Delete InstanceofExpression(2008)", "Delete SimpleName: PrototypeObjectType(2009)", "Delete SimpleType: PrototypeObjectType(2010)", "Delete SimpleName: tObj(2011)", "Delete SimpleName: PrototypeObjectType(2012)", "Delete SimpleType: PrototypeObjectType(2013)", "Delete SimpleName: t(2014)", "Delete CastExpression(2015)", "Delete VariableDeclarationFragment(2016)", "Delete VariableDeclarationStatement(2017)", "Delete MethodInvocation(2020)", "Delete ReturnStatement(2021)", "Delete Block(2022)", "Delete IfStatement(2023)", "Delete IfStatement(2024)", "Delete BooleanLiteral: false(2025)", "Delete ReturnStatement(2026)"]}}, {"PrototypeObjectType_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: isInstanceofObject", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: isAnonymous", "DEL SimpleName: Override", "DEL Modifier: public"]}]}}, {"PrototypeObjectType_diff": {"operations": ["Delete SimpleName: Override(963)", "Delete MarkerAnnotation(964)", "Delete Modifier: public(965)", "Delete PrimitiveType: boolean(966)", "Delete SimpleName: isInstanceofObject(967)", "Delete SimpleName: isAnonymous(968)", "Delete MethodInvocation(969)", "Delete ReturnStatement(970)", "Delete Block(971)", "Delete MethodDeclaration(972)"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}