{"application": "google-error-prone", "csha": "370735d96eb68112504c636fef3e0be8112497f9", "files": [{"WildcardImport_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4", "MOV ImportDeclaration to CompilationUnit at 22", "MOV ImportDeclaration to CompilationUnit at 11", "MOV ImportDeclaration to CompilationUnit at 26"]}, {"root": "UPDATE from com.google.errorprone.BugPattern.Category.GUAVA to com.google.errorprone.BugPattern.Category.JDK", "operations": ["UPD QualifiedName: com.google.errorprone.BugPattern.Category.GUAVA from com.google.errorprone.BugPattern.Category.GUAVA to com.google.errorprone.BugPattern.Category.JDK"]}, {"root": "UPDATE from com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL to com.google.errorprone.BugPattern.MaturityLevel.MATURE", "operations": ["UPD QualifiedName: com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL from com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL to com.google.errorprone.BugPattern.MaturityLevel.MATURE"]}, {"root": "UPDATE from com.google.errorprone.BugPattern.SeverityLevel.ERROR to com.google.errorprone.BugPattern.SeverityLevel.WARNING", "operations": ["UPD QualifiedName: com.google.errorprone.BugPattern.SeverityLevel.ERROR from com.google.errorprone.BugPattern.SeverityLevel.ERROR to com.google.errorprone.BugPattern.SeverityLevel.WARNING"]}, {"root": "UPDATE from com.google.errorprone.bugpatterns.BugChecker.ClassTreeMatcher to com.google.errorprone.matchers.Description.NO_MATCH", "operations": ["UPD QualifiedName: com.google.errorprone.bugpatterns.BugChecker.ClassTreeMatcher from com.google.errorprone.bugpatterns.BugChecker.ClassTreeMatcher to com.google.errorprone.matchers.Description.NO_MATCH"]}, {"root": "UPDATE from com.sun.source.tree.ClassTree to com.google.errorprone.bugpatterns.BugChecker.CompilationUnitTreeMatcher", "operations": ["UPD QualifiedName: com.sun.source.tree.ClassTree from com.sun.source.tree.ClassTree to com.google.errorprone.bugpatterns.BugChecker.CompilationUnitTreeMatcher"]}, {"root": "UPDATE from com.sun.tools.javac.code.Symbol.ClassSymbol to com.sun.tools.javac.code.Scope.StarImportScope", "operations": ["UPD QualifiedName: com.sun.tools.javac.code.Symbol.ClassSymbol from com.sun.tools.javac.code.Symbol.ClassSymbol to com.sun.tools.javac.code.Scope.StarImportScope"]}, {"root": "UPDATE from com.sun.tools.javac.code.Type to com.sun.tools.javac.util.Name", "operations": ["UPD QualifiedName: com.sun.tools.javac.code.Type from com.sun.tools.javac.code.Type to com.sun.tools.javac.util.Name"]}, {"root": "UPDATE from ClassTreeMatcher to CompilationUnitTreeMatcher", "operations": ["UPD SimpleType: ClassTreeMatcher from ClassTreeMatcher to CompilationUnitTreeMatcher", "UPD SimpleName: ClassTreeMatcher from ClassTreeMatcher to CompilationUnitTreeMatcher"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 6", "operations": ["INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleName: Name to SimpleType: Name at 0", "INS Modifier: abstract to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS Javadoc to TypeDeclaration: class at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 6", "INS Modifier: abstract to TypeDeclaration: class at 2", "INS SimpleName: TypeToImport to TypeDeclaration: class at 4", "INS SimpleName: name to MethodDeclaration at 3", "INS SimpleType: Name to MethodDeclaration at 2", "INS Modifier: static to TypeDeclaration: class at 3", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS Block to IfStatement at 1", "INS SimpleName: fix to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: matchCompilationUnit to MethodDeclaration at 3", "INS SimpleName: tree to SingleVariableDeclaration at 1", "INS IfStatement to Block at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 17", "operations": ["INS SimpleName: baseSymbol to MethodInvocation at 1", "INS SimpleName: sym to VariableDeclarationFragment at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 17", "INS BreakStatement to SwitchStatement at 3", "INS BooleanLiteral: false to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleType: StarImportScope to FieldDeclaration at 2", "INS SimpleName: sym to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 0", "INS QualifiedName: sym.owner to MethodInvocation at 0", "INS QualifiedName: tree.sym to VariableDeclarationFragment at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: create to MethodInvocation at 1", "INS SimpleName: wildcardScope to MethodInvocation at 0", "INS ExpressionStatement to SwitchStatement at 6", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: TypeToImport to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS StringLiteral: \"java.lang\" to MethodInvocation at 2", "INS SwitchStatement to Block at 1", "INS ExpressionStatement to SwitchStatement at 2", "INS BreakStatement to SwitchStatement at 7", "INS SimpleName: seen to MethodInvocation at 0", "INS SimpleName: sym to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 8", "INS SimpleName: contentEquals to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: includes to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 0", "INS QualifiedName: sym.kind to SwitchStatement at 0", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: sym to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS ReturnStatement to SwitchStatement at 9", "INS Block to MethodDeclaration at 5", "INS Block to MethodDeclaration at 5", "INS IfStatement to Block at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 18"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 6", "MOV MarkerAnnotation to TypeDeclaration: class at 1", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV MethodDeclaration to TypeDeclaration: class at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Description to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 0", "MOV SimpleName: matchClass to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV Javadoc to TypeDeclaration: class at 0", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV SimpleType: TreeScanner to TypeDeclaration: class at 3", "MOV SimpleName: ImportCollector to TypeDeclaration: class at 2", "MOV Modifier: static to TypeDeclaration: class at 1", "MOV MethodDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "UPDATE from public to static", "operations": ["UPD Modifier: public from public to static"]}, {"root": "INS SimpleType: Fix to MethodDeclaration at 3", "operations": ["INS SimpleType: Fix to MethodDeclaration at 3"]}, {"root": "INS SimpleName: createFix to MethodDeclaration at 4", "operations": ["INS SimpleName: createFix to MethodDeclaration at 4"]}, {"root": "UPDATE from GUAVA to JDK", "operations": ["UPD SimpleName: GUAVA from GUAVA to JDK"]}, {"root": "UPDATE from ERROR to WARNING", "operations": ["UPD SimpleName: ERROR from ERROR to WARNING"]}, {"root": "UPDATE from EXPERIMENTAL to MATURE", "operations": ["UPD SimpleName: EXPERIMENTAL from EXPERIMENTAL to MATURE"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "UPDATE from String to Name", "operations": ["UPD SimpleType: String from String to Name", "UPD SimpleName: String from String to Name"]}, {"root": "UPDATE from typeName to owner", "operations": ["UPD SimpleName: typeName from typeName to owner", "UPD SimpleName: typeName from typeName to owner"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Name to SingleVariableDeclaration at 0", "INS SimpleName: owner to SingleVariableDeclaration at 1", "INS SimpleName: Name to SimpleType: Name at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from toImport to addFix", "operations": ["UPD SimpleName: toImport from toImport to addFix", "UPD SimpleName: matchClass from matchClass to addFix"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: CompilationUnitTree to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 3", "MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 6"]}, {"root": "INS EnhancedForStatement to Block at 0", "operations": ["INS IfStatement to Block at 1", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 0"]}, {"root": "INS ThrowStatement to Block at 1", "operations": ["INS SimpleName: type to InfixExpression: + at 1", "INS SimpleName: AssertionError to SimpleType: AssertionError at 0", "INS ThrowStatement to Block at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS StringLiteral: \"could not find import for: \" to InfixExpression: + at 0", "INS SimpleType: AssertionError to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "UPDATE from addType to ImportCollector", "operations": ["UPD SimpleName: addType from addType to ImportCollector"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: apply to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from apply to visitImport", "operations": ["UPD SimpleName: apply from apply to visitImport"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: apply to MethodDeclaration at 3", "MOV PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from apply to visitIdent", "operations": ["UPD SimpleName: apply from apply to visitIdent"]}, {"root": "UPDATE from ClassTree to Fix", "operations": ["UPD SimpleName: ClassTree from ClassTree to Fix"]}, {"root": "MOVE from SimpleType: Fix", "operations": ["MOV SimpleName: ClassTree to SimpleType: Fix at 0"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS ReturnStatement to Block at 3"]}, {"root": "UPDATE from suffix of each on-demand import being deleted. to A type or member that needs to be imported.", "operations": ["UPD TextElement: suffix of each on-demand import being deleted. from suffix of each on-demand import being deleted. to A type or member that needs to be imported."]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "INS SimpleType: Name to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Name to SingleVariableDeclaration at 0", "INS SimpleName: Name to SimpleType: Name at 0"]}, {"root": "INS SimpleName: name to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: name to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from ClassTree to SuggestedFix.Builder", "operations": ["UPD SimpleType: ClassTree from ClassTree to SuggestedFix.Builder"]}, {"root": "UPDATE from tree to fix", "operations": ["UPD SimpleName: tree from tree to fix", "UPD SimpleName: typeName from typeName to fix", "UPD SimpleName: sym from sym to fix", "UPD SimpleName: sym from sym to fix"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Fix to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS Block to EnhancedForStatement at 2"]}, {"root": "UPDATE from Find an on-demand import matching the given single-type import specification. to Find an on-demand import matching the given single-type import specification. ", "operations": ["UPD TextElement: Find an on-demand import matching the given single-type import specification. from Find an on-demand import matching the given single-type import specification. to Find an on-demand import matching the given single-type import specification. "]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV SimpleName: wildcardImports to EnhancedForStatement at 1"]}, {"root": "UPDATE from Collect all on-demand imports. to Collect all on demand imports. ", "operations": ["UPD TextElement: Collect all on-demand imports. from Collect all on-demand imports. to Collect all on demand imports. "]}, {"root": "UPDATE from all types and static members that are referred to by name and may need to be imported. to Collects all uses of on demand-imported types and static members in a compilation unit. ", "operations": ["UPD TextElement: all types and static members that are referred to by name and may need to be imported. from all types and static members that are referred to by name and may need to be imported. to Collects all uses of on demand-imported types and static members in a compilation unit. "]}, {"root": "UPDATE from String to StarImportScope", "operations": ["UPD SimpleName: String from String to StarImportScope", "UPD SimpleName: Type from Type to StarImportScope", "UPD SimpleType: Type from Type to StarImportScope"]}, {"root": "MOVE from SimpleType: StarImportScope", "operations": ["MOV SimpleName: String to SimpleType: StarImportScope at 0"]}, {"root": "UPDATE from canonicalName to wildcardScope", "operations": ["UPD SimpleName: canonicalName from canonicalName to wildcardScope", "UPD SimpleName: type from type to wildcardScope"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: canonicalName to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from JCClassDecl to JCTree.JCCompilationUnit", "operations": ["UPD SimpleType: JCClassDecl from JCClassDecl to JCTree.JCCompilationUnit", "UPD SimpleType: JCClassDecl from JCClassDecl to JCTree.JCCompilationUnit"]}, {"root": "UPDATE from ClassTree to JCTree.JCImport", "operations": ["UPD SimpleType: ClassTree from ClassTree to JCTree.JCImport"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS TextElement: Creates a  to TagElement at 0", "operations": ["INS TextElement: Creates a  to TagElement at 0"]}, {"root": "INS TagElement: @link to TagElement at 1", "operations": ["INS TagElement: @link to TagElement at 1", "INS SimpleName: Fix to TagElement: @link at 0"]}, {"root": "UPDATE from Delete all of the on-demand imports, and add all of the new imports. to  that replaces wildcard imports. ", "operations": ["UPD TextElement: Delete all of the on-demand imports, and add all of the new imports. from Delete all of the on-demand imports, and add all of the new imports. to  that replaces wildcard imports. "]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS Block to EnhancedForStatement at 2"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from A type or member that needs to be imported.  to Returns the simple name of the imported member. ", "operations": ["UPD TextElement: A type or member that needs to be imported.  from A type or member that needs to be imported.  to Returns the simple name of the imported member. "]}, {"root": "UPDATE from Returns the fully-qualified canonical name. to Returns the fully-qualified name of the owner. ", "operations": ["UPD TextElement: Returns the fully-qualified canonical name. from Returns the fully-qualified canonical name. to Returns the fully-qualified name of the owner. "]}, {"root": "UPDATE from Returns true if the import needs to be static (i.e. the imported is for a field or method). to Returns true if the import needs to be static (i.e. the import is for a field or method). ", "operations": ["UPD TextElement: Returns true if the import needs to be static (i.e. the imported is for a field or method). from Returns true if the import needs to be static (i.e. the imported is for a field or method). to Returns true if the import needs to be static (i.e. the import is for a field or method). "]}, {"root": "INS QualifiedName: SuggestedFix.Builder to SimpleType: ClassTree at 0", "operations": ["INS QualifiedName: SuggestedFix.Builder to SimpleType: ClassTree at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "operations": ["INS MethodInvocation to InfixExpression: + at 0", "INS SimpleName: qualifiedName to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: + at 2", "INS StringLiteral: \".\" to InfixExpression: + at 1", "INS SimpleName: owner to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: qualifiedName to MethodInvocation at 2", "INS ExpressionStatement to Block at 0"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 2"]}, {"root": "INS SimpleName: fix to MethodInvocation at 2", "operations": ["INS SimpleName: fix to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: wildcardScope to Assignment: = at 1", "INS SimpleName: wildcardScope to FieldAccess at 1"]}, {"root": "INS QualifiedName: JCTree.JCCompilationUnit to SimpleType: JCClassDecl at 0", "operations": ["INS QualifiedName: JCTree.JCCompilationUnit to SimpleType: JCClassDecl at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ImportCollector to VariableDeclarationStatement at 0"]}, {"root": "INS QualifiedName: JCTree.JCImport to SimpleType: ClassTree at 0", "operations": ["INS QualifiedName: JCTree.JCImport to SimpleType: ClassTree at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Symbol to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from tree to name", "operations": ["UPD SimpleName: tree from tree to name", "UPD SimpleName: type from type to name"]}, {"root": "INS SimpleName: owner to ClassInstanceCreation at 2", "operations": ["INS SimpleName: owner to ClassInstanceCreation at 2"]}, {"root": "INS SimpleName: NO_MATCH to ReturnStatement at 0", "operations": ["INS SimpleName: NO_MATCH to ReturnStatement at 0"]}, {"root": "UPDATE from state to createFix", "operations": ["UPD SimpleName: state from state to createFix"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: wildcardImports to MethodInvocation at 1", "MOV SimpleName: state to MethodInvocation at 0", "MOV SimpleName: toFix to MethodInvocation at 2"]}, {"root": "INS SimpleName: NO_MATCH to ReturnStatement at 0", "operations": ["INS SimpleName: NO_MATCH to ReturnStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from unit to tree", "operations": ["UPD SimpleName: unit from unit to tree"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from startsWith to contentEquals", "operations": ["UPD SimpleName: startsWith from startsWith to contentEquals"]}, {"root": "INS StringLiteral: \"*\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"*\" to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ImportCollector to ClassInstanceCreation at 0"]}, {"root": "INS QualifiedName: tree.starImportScope to ClassInstanceCreation at 1", "operations": ["INS QualifiedName: tree.starImportScope to ClassInstanceCreation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 1", "MOV SwitchCase to SwitchStatement at 4", "MOV SwitchCase to SwitchStatement at 5"]}, {"root": "UPDATE from addImport to toImport", "operations": ["UPD SimpleName: addImport from addImport to toImport"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: typeName to MethodInvocation at 3", "MOV SimpleName: toImport to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tree to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sym to MethodInvocation at 0", "MOV SimpleName: getEnclosingElement to MethodInvocation at 1"]}, {"root": "UPDATE from getEnclosingElement to addStaticImport", "operations": ["UPD SimpleName: getEnclosingElement from getEnclosingElement to addStaticImport"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getEnclosingElement to MethodInvocation at 1", "MOV SimpleName: sym to MethodInvocation at 0"]}, {"root": "UPDATE from getEnclosingElement to addImport", "operations": ["UPD SimpleName: getEnclosingElement from getEnclosingElement to addImport"]}, {"root": "UPDATE from getKind to qualifiedName", "operations": ["UPD SimpleName: getKind from getKind to qualifiedName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getKind to MethodInvocation at 2"]}, {"root": "INS QualifiedName: JCTree.JCCompilationUnit to SimpleType: JCClassDecl at 0", "operations": ["INS QualifiedName: JCTree.JCCompilationUnit to SimpleType: JCClassDecl at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from state to seen", "operations": ["UPD SimpleName: state from state to seen"]}, {"root": "UPDATE from reportMatch to add", "operations": ["UPD SimpleName: reportMatch from reportMatch to add"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from buildDescriptionFromChecker to TypeToImport", "operations": ["UPD SimpleName: buildDescriptionFromChecker from buildDescriptionFromChecker to TypeToImport"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: buildDescriptionFromChecker to MethodInvocation at 0", "MOV SimpleName: toDelete to MethodInvocation at 1", "MOV SimpleName: checker to MethodInvocation at 0"]}, {"root": "UPDATE from toDelete to create", "operations": ["UPD SimpleName: toDelete from toDelete to create"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS QualifiedName: sym.owner to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 4", "operations": ["INS BooleanLiteral: true to MethodInvocation at 4"]}, {"root": "UPDATE from toFix to sym", "operations": ["UPD SimpleName: toFix from toFix to sym", "UPD SimpleName: checker from checker to sym"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toFix to MethodInvocation at 0", "MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "UPDATE from get to getSimpleName", "operations": ["UPD SimpleName: get from get to getSimpleName", "UPD SimpleName: addFix from addFix to getSimpleName"]}, {"root": "UPDATE from fix to getQualifiedName", "operations": ["UPD SimpleName: fix from fix to getQualifiedName", "UPD SimpleName: toDelete from toDelete to getQualifiedName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toDelete to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addFix to MethodInvocation at 1", "MOV SimpleName: fix to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.lang.model.element.ElementKind"]}, {"root": "DEL TextElement: An abstraction over the logic for generating fixes. The 'test' version exists because we", "operations": ["DEL TextElement: An abstraction over the logic for generating fixes. The 'test' version exists because we"]}, {"root": "DEL TextElement: don't have a good way to test import-only fixes, so it pretty-prints the replacements as a", "operations": ["DEL TextElement: don't have a good way to test import-only fixes, so it pretty-prints the replacements as a"]}, {"root": "DEL SimpleName: type", "operations": ["DEL SimpleName: type"]}, {"root": "DEL SimpleName: ClassTree", "operations": ["DEL SimpleName: ClassTree"]}, {"root": "DEL SimpleType: ClassSymbol", "operations": ["DEL SimpleType: ClassSymbol", "DEL SimpleName: ClassSymbol"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: ASTHelpers", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: getSymbol", "DEL SimpleName: sym"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: !=", "DEL QualifiedName: ElementKind.PACKAGE", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL QualifiedName: Description.NO_MATCH", "DEL Block", "DEL ReturnStatement"]}, {"root": "DEL QualifiedName: Description.NO_MATCH", "operations": ["DEL QualifiedName: Description.NO_MATCH"]}, {"root": "DEL SimpleName: JCClassDecl", "operations": ["DEL SimpleName: JCClassDecl"]}, {"root": "DEL QualifiedName: Description.NO_MATCH", "operations": ["DEL QualifiedName: Description.NO_MATCH"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL StringLiteral: \"*\"", "DEL Modifier: private", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL Modifier: static", "DEL Modifier: final", "DEL SimpleName: ASTERISK"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL Modifier: final", "DEL SimpleType: FixStrategy", "DEL SimpleName: FixStrategy", "DEL FieldDeclaration", "DEL SimpleName: fixStrategy", "DEL Javadoc", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodDeclaration", "DEL SimpleName: WildcardImport", "DEL Modifier: public", "DEL QualifiedName: FixStrategies.PRODUCTION", "DEL ConstructorInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL FieldAccess", "DEL SimpleType: FixStrategy", "DEL Block", "DEL Assignment: =", "DEL SimpleName: fixStrategy", "DEL SimpleName: fixStrategy", "DEL Modifier: protected", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: FixStrategy", "DEL ExpressionStatement", "DEL SimpleName: fixStrategy", "DEL SimpleName: WildcardImport", "DEL SingleVariableDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL SimpleType: String", "DEL Modifier: public", "DEL TypeDeclaration: class", "DEL SimpleName: String", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \"\"", "DEL ReturnStatement", "DEL TextElement: Generates an import statement.", "DEL Modifier: static", "DEL SimpleName: TypeToImport", "DEL TagElement", "DEL SimpleName: generateImportStatement", "DEL Modifier: abstract", "DEL StringLiteral: \"static \"", "DEL SimpleName: typeName", "DEL Block", "DEL MethodDeclaration", "DEL ConditionalExpression", "DEL InfixExpression: +", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: String", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL SimpleName: generateImportStatement", "DEL StringLiteral: \"import \"", "DEL StringLiteral: \";\"", "DEL SimpleName: toString"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL QualifiedName: Description.NO_MATCH", "DEL SimpleName: fixStrategy", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: getTypeDecls", "DEL VariableDeclarationStatement", "DEL SimpleName: getPath", "DEL InfixExpression: ==", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: sym", "DEL ThisExpression", "DEL NumberLiteral: 1", "DEL Block", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: unit", "DEL SimpleName: apply", "DEL Block", "DEL SimpleName: state", "DEL IfStatement", "DEL SimpleName: getCompilationUnit", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: unit", "DEL SimpleName: tree"]}, {"root": "DEL SimpleName: wildcard", "operations": ["DEL SimpleName: wildcard"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: ImportTree", "DEL IfStatement", "DEL InfixExpression: !=", "DEL Block", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: wildcard", "DEL Block", "DEL SimpleName: wildcard", "DEL SimpleName: ImportTree", "DEL VariableDeclarationStatement"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: typeName", "DEL Block", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: next", "DEL InfixExpression: ==", "DEL SimpleName: importBase", "DEL SimpleName: indexOf", "DEL InfixExpression: +", "DEL IfStatement", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL NumberLiteral: 1", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: type", "DEL NumberLiteral: 1", "DEL SimpleName: next", "DEL EnhancedForStatement", "DEL PrefixExpression: -", "DEL CharacterLiteral: '.'", "DEL VariableDeclarationStatement", "DEL SimpleName: length", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL NullLiteral"]}, {"root": "DEL SimpleName: ASTERISK", "operations": ["DEL SimpleName: ASTERISK"]}, {"root": "DEL TextElement: Walk a top-level class declaration (possibly traversing into nested classes), and collect", "operations": ["DEL TextElement: Walk a top-level class declaration (possibly traversing into nested classes), and collect"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Record a type reference that may need to be imported.", "DEL Javadoc", "DEL TagElement"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: type", "DEL ReturnStatement", "DEL Block", "DEL InfixExpression: ==", "DEL IfStatement", "DEL NullLiteral"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: Symbol.TypeSymbol", "DEL VariableDeclarationFragment", "DEL SimpleName: sym", "DEL VariableDeclarationStatement", "DEL QualifiedName: Symbol.TypeSymbol", "DEL QualifiedName: type.tsym"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL Block", "DEL SimpleName: isPrivate", "DEL ReturnStatement", "DEL SimpleName: sym", "DEL IfStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: TypeToImport", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL SimpleName: sym", "DEL SimpleName: getQualifiedName", "DEL SimpleName: add", "DEL SimpleName: seen", "DEL SimpleName: create", "DEL BooleanLiteral: false"]}, {"root": "DEL SimpleName: JCClassDecl", "operations": ["DEL SimpleName: JCClassDecl"]}, {"root": "DEL SimpleName: ClassTree", "operations": ["DEL SimpleName: ClassTree"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SimpleName: apply", "operations": ["DEL SimpleName: apply"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: tree", "DEL SimpleType: ClassTree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: state", "DEL SimpleName: VisitorState", "DEL SingleVariableDeclaration", "DEL SimpleType: VisitorState"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: checker", "DEL SimpleName: BugChecker", "DEL SimpleType: BugChecker"]}, {"root": "DEL SimpleName: fix", "operations": ["DEL SimpleName: fix"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: addStaticImport", "DEL Block", "DEL SimpleName: fix", "DEL SimpleName: typeName", "DEL MethodInvocation", "DEL SimpleName: toImport", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: isStatic", "DEL SimpleName: toImport"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: checker", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: wildcardImports", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: reportMatch", "DEL SimpleName: build", "DEL NumberLiteral: 0", "DEL SimpleName: state", "DEL MethodInvocation", "DEL SimpleName: addFix", "DEL SimpleName: buildDescriptionFromChecker"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL NullLiteral", "DEL SimpleName: create", "DEL SimpleName: getQualifiedName", "DEL MethodDeclaration", "DEL SimpleName: addType", "DEL QualifiedName: sym.owner", "DEL QualifiedName: tree.sym", "DEL SimpleName: TypeToImport", "DEL ExpressionStatement", "DEL SwitchStatement", "DEL MethodInvocation", "DEL SimpleName: visitIdent", "DEL SimpleName: isPrivate", "DEL InfixExpression: !=", "DEL TypeDeclaration: class", "DEL Block", "DEL NullLiteral", "DEL PrimitiveType: void", "DEL TextElement: Record a static field or method that may need to be imported.", "DEL Block", "DEL TagElement", "DEL SimpleName: sym", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: canonicalName", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL QualifiedName: tree.sym.type", "DEL Block", "DEL Modifier: public", "DEL SimpleName: addStaticMember", "DEL SimpleName: sym", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Javadoc", "DEL QualifiedName: tree.sym.kind", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL InfixExpression: +", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: seen", "DEL SwitchCase", "DEL SimpleType: String", "DEL Block", "DEL IfStatement", "DEL SimpleName: sym", "DEL SimpleName: isStatic", "DEL BooleanLiteral: true", "DEL BreakStatement", "DEL MethodInvocation", "DEL SimpleName: sym", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL StringLiteral: \".\"", "DEL SimpleName: addStaticMember", "DEL SimpleName: add", "DEL MethodInvocation", "DEL Modifier: private", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL QualifiedName: tree.sym", "DEL PrefixExpression: !", "DEL BreakStatement"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: ImportTree", "DEL SimpleName: ImmutableList", "DEL SimpleType: TypeToImport", "DEL SingleVariableDeclaration", "DEL SimpleName: toFix", "DEL TypeDeclaration: interface", "DEL SimpleName: VisitorState", "DEL SimpleName: checker", "DEL Modifier: public", "DEL SimpleName: Multimap", "DEL SimpleName: state", "DEL SimpleName: ImportTree", "DEL TagElement", "DEL ParameterizedType: Multimap<ImportTree,TypeToImport>", "DEL SingleVariableDeclaration", "DEL TextElement: Interface for the fix generating logic.", "DEL SimpleType: BugChecker", "DEL SimpleName: wildcardImports", "DEL SimpleType: ImportTree", "DEL ParameterizedType: ImmutableList<ImportTree>", "DEL SimpleType: Multimap", "DEL SimpleType: VisitorState", "DEL Javadoc", "DEL SimpleName: BugChecker", "DEL SingleVariableDeclaration", "DEL SimpleType: ImportTree", "DEL SimpleName: TypeToImport", "DEL SimpleType: ImmutableList", "DEL SingleVariableDeclaration", "DEL SimpleName: FixStrategy", "DEL MethodDeclaration"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: FixStrategies", "DEL SimpleName: wildcardImports", "DEL EnumConstantDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: ImportTree", "DEL SimpleName: state", "DEL ParameterizedType: Iterable<TypeToImport>", "DEL SimpleName: TEST", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Multimap<ImportTree,TypeToImport>", "DEL SimpleType: ImmutableList", "DEL SimpleName: ImportTree", "DEL SimpleType: ClassTree", "DEL Block", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement: them as a suffix.", "DEL SimpleName: replacements", "DEL VariableDeclarationFragment", "DEL SimpleType: TypeToImport", "DEL TextElement: import-only fixes.)", "DEL MethodInvocation", "DEL SimpleName: postfixWith", "DEL MethodInvocation", "DEL SimpleName: FixStrategy", "DEL EnumConstantDeclaration", "DEL MethodInvocation", "DEL AnonymousClassDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: checker", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: Multimap", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: fix", "DEL SimpleName: Iterable", "DEL ParameterizedType: ImmutableList<ImportTree>", "DEL SimpleName: SuggestedFix", "DEL SimpleName: TypeToImport", "DEL SimpleType: VisitorState", "DEL SimpleName: wildcardImports", "DEL SimpleType: BugChecker", "DEL SimpleType: ImportTree", "DEL TagElement", "DEL SimpleName: PRODUCTION", "DEL SimpleName: toFix", "DEL SimpleName: BugChecker", "DEL SimpleType: Iterable", "DEL VariableDeclarationFragment", "DEL SimpleName: ImportTree", "DEL SimpleName: toDelete", "DEL SimpleName: toDelete", "DEL SimpleType: TypeToImport", "DEL SimpleType: FixStrategy", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: replacements", "DEL EnumDeclaration", "DEL SimpleName: tree", "DEL SimpleType: ImportTree", "DEL SimpleName: VisitorState", "DEL SimpleName: TypeToImport", "DEL SimpleName: ImmutableList", "DEL EnhancedForStatement", "DEL AnonymousClassDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: toString", "DEL TextElement: Match up the replacements with each on-demand import being deleted, and pretty print", "DEL SimpleName: ClassTree", "DEL TextElement: Fix strategies for testing and production. (See the TODO above about better testing for", "DEL MethodDeclaration", "DEL SimpleType: ImportTree", "DEL SimpleName: Multimap"]}]}}, {"WildcardImport_diff": {"operations": ["Move ImportDeclaration(21) into CompilationUnit(752) at 4", "Move ImportDeclaration(31) into CompilationUnit(752) at 11", "Move ImportDeclaration(41) into CompilationUnit(752) at 22", "Move ImportDeclaration(45) into CompilationUnit(752) at 26", "Update QualifiedName: com.google.errorprone.BugPattern.Category.GUAVA(2) to com.google.errorprone.BugPattern.Category.JDK", "Update QualifiedName: com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL(4) to com.google.errorprone.BugPattern.MaturityLevel.MATURE", "Update QualifiedName: com.google.errorprone.BugPattern.SeverityLevel.ERROR(6) to com.google.errorprone.BugPattern.SeverityLevel.WARNING", "Update QualifiedName: com.sun.tools.javac.code.Symbol.ClassSymbol(42) to com.sun.tools.javac.code.Scope.StarImportScope", "Update QualifiedName: com.sun.tools.javac.code.Type(44) to com.sun.tools.javac.util.Name", "Insert TypeDeclaration: class(177) into TypeDeclaration: class(751) at 6", "Insert MethodDeclaration(266) into TypeDeclaration: class(751) at 7", "Insert TypeDeclaration: class(663) into TypeDeclaration: class(751) at 11", "Move MethodDeclaration(964) into TypeDeclaration: class(751) at 18", "Insert Javadoc(89) into TypeDeclaration: class(177) at 0", "Move MarkerAnnotation(136) into TypeDeclaration: class(177) at 1", "Insert Modifier: abstract(92) into TypeDeclaration: class(177) at 2", "Insert Modifier: static(93) into TypeDeclaration: class(177) at 3", "Insert SimpleName: TypeToImport(94) into TypeDeclaration: class(177) at 4", "Insert MethodDeclaration(102) into TypeDeclaration: class(177) at 5", "Move MethodDeclaration(147) into TypeDeclaration: class(177) at 6", "Move MethodDeclaration(154) into TypeDeclaration: class(177) at 7", "Move MethodDeclaration(204) into TypeDeclaration: class(177) at 8", "Insert MethodDeclaration(176) into TypeDeclaration: class(177) at 9", "Move MarkerAnnotation(207) into MethodDeclaration(266) at 0", "Insert Modifier: public(180) into MethodDeclaration(266) at 1", "Move SimpleType: Description(210) into MethodDeclaration(266) at 2", "Insert SimpleName: matchCompilationUnit(183) into MethodDeclaration(266) at 3", "Insert SingleVariableDeclaration(187) into MethodDeclaration(266) at 4", "Move SingleVariableDeclaration(219) into MethodDeclaration(266) at 5", "Insert Block(265) into MethodDeclaration(266) at 6", "Move Javadoc(575) into TypeDeclaration: class(663) at 0", "Move Modifier: static(576) into TypeDeclaration: class(663) at 1", "Move SimpleName: ImportCollector(577) into TypeDeclaration: class(663) at 2", "Move SimpleType: TreeScanner(579) into TypeDeclaration: class(663) at 3", "Insert FieldDeclaration(484) into TypeDeclaration: class(663) at 4", "Move FieldDeclaration(593) into TypeDeclaration: class(663) at 5", "Move MethodDeclaration(785) into TypeDeclaration: class(663) at 6", "Move MethodDeclaration(622) into TypeDeclaration: class(663) at 7", "Insert MethodDeclaration(552) into TypeDeclaration: class(663) at 8", "Move MethodDeclaration(648) into TypeDeclaration: class(663) at 9", "Insert MethodDeclaration(662) into TypeDeclaration: class(663) at 10", "Update Modifier: public(838) to static", "Insert SimpleType: Fix(672) into MethodDeclaration(750) at 2", "Insert SimpleName: createFix(673) into MethodDeclaration(750) at 3", "Update SimpleName: GUAVA(76) to JDK", "Update SimpleName: ERROR(79) to WARNING", "Update SimpleName: EXPERIMENTAL(82) to MATURE", "Move TagElement(103) into Javadoc(89) at 0", "Insert Javadoc(97) into MethodDeclaration(102) at 0", "Insert Modifier: abstract(98) into MethodDeclaration(102) at 1", "Insert SimpleType: Name(100) into MethodDeclaration(102) at 2", "Insert SimpleName: name(101) into MethodDeclaration(102) at 3", "Update SimpleType: String(145) to Name", "Update SimpleName: typeName(146) to owner", "Insert SingleVariableDeclaration(129) into MethodDeclaration(141) at 4", "Update Modifier: public(208) to private", "Move Modifier: public(208) into MethodDeclaration(176) at 0", "Insert PrimitiveType: void(143) into MethodDeclaration(176) at 1", "Update SimpleName: matchClass(211) to addFix", "Move SimpleName: matchClass(211) into MethodDeclaration(176) at 2", "Move SingleVariableDeclaration(215) into MethodDeclaration(176) at 3", "Insert Block(175) into MethodDeclaration(176) at 4", "Move SimpleType: CompilationUnitTree(254) into SingleVariableDeclaration(187) at 0", "Insert SimpleName: tree(186) into SingleVariableDeclaration(187) at 1", "Move VariableDeclarationStatement(275) into Block(265) at 0", "Move IfStatement(282) into Block(265) at 1", "Move VariableDeclarationStatement(313) into Block(265) at 2", "Move VariableDeclarationStatement(327) into Block(265) at 3", "Insert VariableDeclarationStatement(249) into Block(265) at 4", "Insert IfStatement(256) into Block(265) at 5", "Move ReturnStatement(296) into Block(265) at 6", "Insert EnhancedForStatement(379) into Block(387) at 0", "Insert ThrowStatement(386) into Block(387) at 1", "Insert Modifier: private(478) into FieldDeclaration(484) at 0", "Insert Modifier: final(479) into FieldDeclaration(484) at 1", "Insert SimpleType: StarImportScope(481) into FieldDeclaration(484) at 2", "Insert VariableDeclarationFragment(483) into FieldDeclaration(484) at 3", "Update SimpleName: addType(742) to ImportCollector", "Move MarkerAnnotation(176) into MethodDeclaration(552) at 0", "Insert Modifier: public(544) into MethodDeclaration(552) at 1", "Move PrimitiveType: void(792) into MethodDeclaration(552) at 2", "Update SimpleName: apply(793) to visitImport", "Move SimpleName: apply(793) into MethodDeclaration(552) at 3", "Move SingleVariableDeclaration(797) into MethodDeclaration(552) at 4", "Insert Block(551) into MethodDeclaration(552) at 5", "Move MarkerAnnotation(650) into MethodDeclaration(662) at 0", "Move Modifier: public(974) into MethodDeclaration(662) at 1", "Move PrimitiveType: void(975) into MethodDeclaration(662) at 2", "Update SimpleName: apply(976) to visitIdent", "Move SimpleName: apply(976) into MethodDeclaration(662) at 3", "Move SingleVariableDeclaration(657) into MethodDeclaration(662) at 4", "Insert Block(661) into MethodDeclaration(662) at 5", "Update SimpleName: ClassTree(841) to Fix", "Move SimpleName: ClassTree(841) into SimpleType: Fix(672) at 0", "Insert ReturnStatement(748) into Block(749) at 3", "Update TextElement: suffix of each on-demand import being deleted.(102) to A type or member that needs to be imported.", "Move TagElement(133) into Javadoc(97) at 0", "Insert SimpleName: Name(99) into SimpleType: Name(100) at 0", "Update SimpleName: String(144) to Name", "Insert SimpleType: Name(123) into SingleVariableDeclaration(125) at 0", "Insert SimpleName: name(124) into SingleVariableDeclaration(125) at 1", "Insert SimpleType: Name(127) into SingleVariableDeclaration(129) at 0", "Insert SimpleName: owner(128) into SingleVariableDeclaration(129) at 1", "Update SimpleType: ClassTree(213) to SuggestedFix.Builder", "Update SimpleName: tree(214) to fix", "Move VariableDeclarationStatement(228) into Block(175) at 0", "Move IfStatement(252) into Block(175) at 1", "Move SimpleType: Fix(1023) into VariableDeclarationStatement(249) at 0", "Insert VariableDeclarationFragment(248) into VariableDeclarationStatement(249) at 1", "Move MethodInvocation(941) into IfStatement(256) at 0", "Insert Block(255) into IfStatement(256) at 1", "Insert Block(321) into EnhancedForStatement(322) at 2", "Update TextElement: Find an on-demand import matching the given single-type import specification.(412) to Find an on-demand import matching the given single-type import specification. ", "Move SingleVariableDeclaration(435) into EnhancedForStatement(379) at 0", "Move SimpleName: wildcardImports(436) into EnhancedForStatement(379) at 1", "Insert Block(378) into EnhancedForStatement(379) at 2", "Insert ClassInstanceCreation(385) into ThrowStatement(386) at 0", "Update TextElement: Collect all on-demand imports.(490) to Collect all on demand imports. ", "Update TextElement: all types and static members that are referred to by name and may need to be imported.(573) to Collects all uses of on demand-imported types and static members in a compilation unit. ", "Update SimpleName: String(713) to StarImportScope", "Move SimpleName: String(713) into SimpleType: StarImportScope(481) at 0", "Update SimpleName: canonicalName(715) to wildcardScope", "Move SimpleName: canonicalName(715) into VariableDeclarationFragment(483) at 0", "Update SimpleType: Type(744) to StarImportScope", "Update SimpleName: type(745) to wildcardScope", "Update SimpleType: JCClassDecl(603) to JCTree.JCCompilationUnit", "Update SimpleType: ClassTree(795) to JCTree.JCImport", "Insert VariableDeclarationStatement(593) into Block(661) at 0", "Move IfStatement(764) into Block(661) at 1", "Insert ExpressionStatement(605) into Block(661) at 2", "Insert IfStatement(660) into Block(661) at 3", "Insert TextElement: Creates a (664) into TagElement(668) at 0", "Insert TagElement: @link(666) into TagElement(668) at 1", "Update TextElement: Delete all of the on-demand imports, and add all of the new imports.(833) to  that replaces wildcard imports. ", "Insert Block(743) into EnhancedForStatement(744) at 2", "Move MethodInvocation(955) into ReturnStatement(748) at 0", "Update TextElement: A type or member that needs to be imported. (132) to Returns the simple name of the imported member. ", "Update TextElement: Returns the fully-qualified canonical name.(140) to Returns the fully-qualified name of the owner. ", "Update TextElement: Returns true if the import needs to be static (i.e. the imported is for a field or method).(148) to Returns true if the import needs to be static (i.e. the import is for a field or method). ", "Insert SimpleName: Name(122) into SimpleType: Name(123) at 0", "Insert SimpleName: Name(126) into SimpleType: Name(127) at 0", "Insert QualifiedName: SuggestedFix.Builder(145) into SimpleType: SuggestedFix.Builder(146) at 0", "Move SimpleType: String(191) into VariableDeclarationStatement(159) at 0", "Insert VariableDeclarationFragment(158) into VariableDeclarationStatement(159) at 1", "Move MethodInvocation(163) into IfStatement(174) at 0", "Insert Block(167) into IfStatement(174) at 1", "Insert Block(173) into IfStatement(174) at 2", "Insert SimpleName: fix(243) into VariableDeclarationFragment(248) at 0", "Insert MethodInvocation(247) into VariableDeclarationFragment(248) at 1", "Move ReturnStatement(338) into Block(255) at 0", "Insert SimpleName: fix(262) into MethodInvocation(263) at 2", "Move ExpressionStatement(403) into Block(321) at 0", "Move VariableDeclarationStatement(452) into Block(378) at 0", "Insert IfStatement(377) into Block(378) at 1", "Insert SimpleType: AssertionError(381) into ClassInstanceCreation(385) at 0", "Insert InfixExpression: +(384) into ClassInstanceCreation(385) at 1", "Update SimpleName: Type(743) to StarImportScope", "Insert Assignment: =(508) into ExpressionStatement(509) at 0", "Insert QualifiedName: JCTree.JCCompilationUnit(520) into SimpleType: JCTree.JCCompilationUnit(521) at 0", "Move SimpleType: ImportCollector(610) into VariableDeclarationStatement(532) at 0", "Insert QualifiedName: JCTree.JCImport(547) into SimpleType: JCTree.JCImport(548) at 0", "Move SimpleType: Symbol(691) into VariableDeclarationStatement(593) at 0", "Insert VariableDeclarationFragment(592) into VariableDeclarationStatement(593) at 1", "Insert Assignment: =(604) into ExpressionStatement(605) at 0", "Insert MethodInvocation(609) into IfStatement(660) at 0", "Insert Block(659) into IfStatement(660) at 1", "Insert SimpleName: Fix(665) into TagElement: @link(666) at 0", "Move ExpressionStatement(934) into Block(743) at 0", "Update SimpleName: type(199) to name", "Insert SimpleName: owner(136) into ClassInstanceCreation(138) at 2", "Insert SimpleName: qualifiedName(151) into VariableDeclarationFragment(158) at 0", "Insert InfixExpression: +(157) into VariableDeclarationFragment(158) at 1", "Insert ExpressionStatement(166) into Block(167) at 0", "Insert ExpressionStatement(172) into Block(173) at 0", "Insert SimpleName: NO_MATCH(208) into ReturnStatement(209) at 0", "Update SimpleName: state(331) to createFix", "Move SimpleName: state(331) into MethodInvocation(247) at 0", "Move SimpleName: wildcardImports(332) into MethodInvocation(247) at 1", "Move SimpleName: toFix(333) into MethodInvocation(247) at 2", "Insert SimpleName: NO_MATCH(253) into ReturnStatement(254) at 0", "Move MethodInvocation(458) into IfStatement(377) at 0", "Move Block(480) into IfStatement(377) at 1", "Insert SimpleName: AssertionError(380) into SimpleType: AssertionError(381) at 0", "Insert StringLiteral: \"could not find import for: \"(382) into InfixExpression: +(384) at 0", "Insert SimpleName: type(383) into InfixExpression: +(384) at 1", "Insert FieldAccess(506) into Assignment: =(508) at 0", "Insert SimpleName: wildcardScope(507) into Assignment: =(508) at 1", "Insert SimpleName: sym(590) into VariableDeclarationFragment(592) at 0", "Insert QualifiedName: tree.sym(591) into VariableDeclarationFragment(592) at 1", "Insert SimpleName: sym(600) into Assignment: =(604) at 0", "Insert MethodInvocation(603) into Assignment: =(604) at 1", "Insert SimpleName: wildcardScope(606) into MethodInvocation(609) at 0", "Insert SimpleName: includes(607) into MethodInvocation(609) at 1", "Insert SimpleName: sym(608) into MethodInvocation(609) at 2", "Insert IfStatement(618) into Block(659) at 0", "Insert SwitchStatement(658) into Block(659) at 1", "Insert MethodInvocation(153) into InfixExpression: +(157) at 0", "Insert StringLiteral: \".\"(154) into InfixExpression: +(157) at 1", "Insert MethodInvocation(156) into InfixExpression: +(157) at 2", "Insert MethodInvocation(165) into ExpressionStatement(166) at 0", "Insert MethodInvocation(171) into ExpressionStatement(172) at 0", "Update SimpleName: unit(270) to tree", "Update SimpleType: JCClassDecl(308) to JCTree.JCCompilationUnit", "Move MethodInvocation(392) into MethodInvocation(319) at 2", "Update SimpleName: startsWith(456) to contentEquals", "Insert StringLiteral: \"*\"(454) into MethodInvocation(455) at 2", "Insert ThisExpression(504) into FieldAccess(506) at 0", "Insert SimpleName: wildcardScope(505) into FieldAccess(506) at 1", "Move SimpleType: ImportCollector(607) into ClassInstanceCreation(530) at 0", "Insert QualifiedName: tree.starImportScope(529) into ClassInstanceCreation(530) at 1", "Insert SimpleName: sym(601) into MethodInvocation(603) at 0", "Insert SimpleName: baseSymbol(602) into MethodInvocation(603) at 1", "Insert MethodInvocation(615) into IfStatement(618) at 0", "Move Block(699) into IfStatement(618) at 1", "Insert QualifiedName: sym.kind(619) into SwitchStatement(658) at 0", "Move SwitchCase(663) into SwitchStatement(658) at 1", "Insert ExpressionStatement(635) into SwitchStatement(658) at 2", "Insert BreakStatement(636) into SwitchStatement(658) at 3", "Move SwitchCase(670) into SwitchStatement(658) at 4", "Move SwitchCase(672) into SwitchStatement(658) at 5", "Insert ExpressionStatement(654) into SwitchStatement(658) at 6", "Insert BreakStatement(655) into SwitchStatement(658) at 7", "Insert SwitchCase(656) into SwitchStatement(658) at 8", "Insert ReturnStatement(657) into SwitchStatement(658) at 9", "Update SimpleName: addImport(929) to toImport", "Update SimpleName: toImport(930) to addFix", "Move SimpleName: toImport(930) into MethodInvocation(741) at 2", "Update SimpleName: typeName(931) to fix", "Move SimpleName: typeName(931) into MethodInvocation(741) at 3", "Insert SimpleName: owner(152) into MethodInvocation(153) at 0", "Update SimpleName: tree(225) to name", "Move SimpleName: tree(225) into MethodInvocation(156) at 0", "Update SimpleName: sym(236) to fix", "Move SimpleName: sym(236) into MethodInvocation(165) at 0", "Update SimpleName: getEnclosingElement(237) to addStaticImport", "Move SimpleName: getEnclosingElement(237) into MethodInvocation(165) at 1", "Insert SimpleName: qualifiedName(164) into MethodInvocation(165) at 2", "Update SimpleName: sym(241) to fix", "Move SimpleName: sym(241) into MethodInvocation(171) at 0", "Update SimpleName: getEnclosingElement(242) to addImport", "Move SimpleName: getEnclosingElement(242) into MethodInvocation(171) at 1", "Update SimpleName: getKind(244) to qualifiedName", "Move SimpleName: getKind(244) into MethodInvocation(171) at 2", "Insert QualifiedName: JCTree.JCCompilationUnit(220) into SimpleType: JCTree.JCCompilationUnit(221) at 0", "Update SimpleName: typeName(454) to owner", "Move MethodInvocation(718) into MethodInvocation(615) at 0", "Insert SimpleName: contentEquals(613) into MethodInvocation(615) at 1", "Insert StringLiteral: \"java.lang\"(614) into MethodInvocation(615) at 2", "Insert MethodInvocation(634) into ExpressionStatement(635) at 0", "Move MethodInvocation(1045) into ExpressionStatement(654) at 0", "Insert SimpleName: seen(622) into MethodInvocation(634) at 0", "Insert SimpleName: add(623) into MethodInvocation(634) at 1", "Insert MethodInvocation(633) into MethodInvocation(634) at 2", "Update SimpleName: state(1034) to seen", "Move MethodInvocation(1042) into MethodInvocation(653) at 2", "Insert SimpleName: TypeToImport(624) into MethodInvocation(633) at 0", "Insert SimpleName: create(625) into MethodInvocation(633) at 1", "Insert MethodInvocation(628) into MethodInvocation(633) at 2", "Insert MethodInvocation(631) into MethodInvocation(633) at 3", "Insert BooleanLiteral: false(632) into MethodInvocation(633) at 4", "Update SimpleName: buildDescriptionFromChecker(1036) to TypeToImport", "Move SimpleName: buildDescriptionFromChecker(1036) into MethodInvocation(652) at 0", "Update SimpleName: toDelete(1037) to create", "Move SimpleName: toDelete(1037) into MethodInvocation(652) at 1", "Insert MethodInvocation(647) into MethodInvocation(652) at 2", "Insert MethodInvocation(650) into MethodInvocation(652) at 3", "Insert BooleanLiteral: true(651) into MethodInvocation(652) at 4", "Update SimpleName: toFix(1016) to sym", "Move SimpleName: toFix(1016) into MethodInvocation(628) at 0", "Update SimpleName: get(1017) to getSimpleName", "Move SimpleName: get(1017) into MethodInvocation(628) at 1", "Insert QualifiedName: sym.owner(629) into MethodInvocation(631) at 0", "Update SimpleName: toDelete(1027) to getQualifiedName", "Move SimpleName: toDelete(1027) into MethodInvocation(631) at 1", "Update SimpleName: checker(1038) to sym", "Move SimpleName: checker(1038) into MethodInvocation(647) at 0", "Update SimpleName: addFix(1040) to getSimpleName", "Move SimpleName: addFix(1040) into MethodInvocation(647) at 1", "Insert QualifiedName: sym.owner(648) into MethodInvocation(650) at 0", "Update SimpleName: fix(1041) to getQualifiedName", "Move SimpleName: fix(1041) into MethodInvocation(650) at 1", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: javax.lang.model.element.ElementKind(60)", "Delete ImportDeclaration(61)", "Delete TextElement: An abstraction over the logic for generating fixes. The 'test' version exists because we(100)", "Delete TextElement: don't have a good way to test import-only fixes, so it pretty-prints the replacements as a(101)", "Delete SimpleName: type(192)", "Delete SimpleName: ClassTree(212)", "Delete SimpleName: ClassSymbol(220)", "Delete SimpleType: ClassSymbol(221)", "Delete SimpleName: sym(222)", "Delete SimpleName: ASTHelpers(223)", "Delete SimpleName: getSymbol(224)", "Delete MethodInvocation(226)", "Delete VariableDeclarationFragment(227)", "Delete MethodInvocation(238)", "Delete NullLiteral(239)", "Delete InfixExpression: !=(240)", "Delete MethodInvocation(243)", "Delete MethodInvocation(245)", "Delete QualifiedName: ElementKind.PACKAGE(246)", "Delete InfixExpression: !=(247)", "Delete InfixExpression: &&(248)", "Delete QualifiedName: Description.NO_MATCH(249)", "Delete ReturnStatement(250)", "Delete Block(251)", "Delete QualifiedName: Description.NO_MATCH(279)", "Delete SimpleName: JCClassDecl(307)", "Delete QualifiedName: Description.NO_MATCH(337)", "Delete Modifier: private(91)", "Delete Modifier: static(92)", "Delete Modifier: final(93)", "Delete SimpleName: String(94)", "Delete SimpleType: String(95)", "Delete SimpleName: ASTERISK(96)", "Delete StringLiteral: \"*\"(97)", "Delete VariableDeclarationFragment(98)", "Delete FieldDeclaration(99)", "Delete Javadoc(104)", "Delete Modifier: private(105)", "Delete Modifier: final(106)", "Delete SimpleName: FixStrategy(107)", "Delete SimpleType: FixStrategy(108)", "Delete SimpleName: fixStrategy(109)", "Delete VariableDeclarationFragment(110)", "Delete FieldDeclaration(111)", "Delete Modifier: public(112)", "Delete SimpleName: WildcardImport(113)", "Delete QualifiedName: FixStrategies.PRODUCTION(114)", "Delete ConstructorInvocation(115)", "Delete Block(116)", "Delete MethodDeclaration(117)", "Delete Modifier: protected(118)", "Delete SimpleName: WildcardImport(119)", "Delete SimpleName: FixStrategy(120)", "Delete SimpleType: FixStrategy(121)", "Delete SimpleName: fixStrategy(122)", "Delete SingleVariableDeclaration(123)", "Delete ThisExpression(124)", "Delete SimpleName: fixStrategy(125)", "Delete FieldAccess(126)", "Delete SimpleName: fixStrategy(127)", "Delete Assignment: =(128)", "Delete ExpressionStatement(129)", "Delete Block(130)", "Delete MethodDeclaration(131)", "Delete Javadoc(134)", "Delete Modifier: abstract(137)", "Delete Modifier: static(138)", "Delete SimpleName: TypeToImport(139)", "Delete TextElement: Generates an import statement.(155)", "Delete TagElement(156)", "Delete Javadoc(157)", "Delete SimpleName: String(158)", "Delete SimpleType: String(159)", "Delete SimpleName: generateImportStatement(160)", "Delete StringLiteral: \"import \"(161)", "Delete StringLiteral: \"static \"(164)", "Delete StringLiteral: \"\"(165)", "Delete ConditionalExpression(166)", "Delete ParenthesizedExpression(167)", "Delete SimpleName: typeName(168)", "Delete MethodInvocation(169)", "Delete StringLiteral: \";\"(170)", "Delete InfixExpression: +(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete MethodDeclaration(174)", "Delete Modifier: public(177)", "Delete SimpleName: String(178)", "Delete SimpleType: String(179)", "Delete SimpleName: toString(180)", "Delete SimpleName: generateImportStatement(181)", "Delete MethodInvocation(182)", "Delete ReturnStatement(183)", "Delete Block(184)", "Delete MethodDeclaration(185)", "Delete TypeDeclaration: class(205)", "Delete SimpleName: sym(229)", "Delete NullLiteral(230)", "Delete InfixExpression: ==(231)", "Delete QualifiedName: Description.NO_MATCH(232)", "Delete ReturnStatement(233)", "Delete Block(234)", "Delete IfStatement(235)", "Delete SimpleName: unit(255)", "Delete SimpleName: state(256)", "Delete SimpleName: getPath(257)", "Delete MethodInvocation(258)", "Delete SimpleName: getCompilationUnit(259)", "Delete MethodInvocation(260)", "Delete VariableDeclarationFragment(261)", "Delete VariableDeclarationStatement(262)", "Delete SimpleName: unit(283)", "Delete SimpleName: getTypeDecls(284)", "Delete MethodInvocation(285)", "Delete SimpleName: size(286)", "Delete MethodInvocation(287)", "Delete NumberLiteral: 1(288)", "Delete InfixExpression: >(289)", "Delete Block(297)", "Delete IfStatement(298)", "Delete SimpleName: fixStrategy(328)", "Delete SimpleName: apply(329)", "Delete SimpleName: tree(330)", "Delete ThisExpression(334)", "Delete MethodInvocation(335)", "Delete ExpressionStatement(336)", "Delete Block(339)", "Delete MethodDeclaration(340)", "Delete SimpleName: wildcard(400)", "Delete SimpleName: ImportTree(386)", "Delete SimpleType: ImportTree(387)", "Delete SimpleName: wildcard(388)", "Delete VariableDeclarationFragment(393)", "Delete VariableDeclarationStatement(394)", "Delete SimpleName: wildcard(395)", "Delete NullLiteral(396)", "Delete InfixExpression: !=(397)", "Delete Block(404)", "Delete IfStatement(405)", "Delete Block(406)", "Delete PrimitiveType: int(459)", "Delete SimpleName: next(460)", "Delete SimpleName: type(461)", "Delete SimpleName: typeName(462)", "Delete MethodInvocation(463)", "Delete SimpleName: indexOf(464)", "Delete CharacterLiteral: '.'(465)", "Delete SimpleName: importBase(466)", "Delete SimpleName: length(467)", "Delete MethodInvocation(468)", "Delete NumberLiteral: 1(469)", "Delete InfixExpression: +(470)", "Delete MethodInvocation(471)", "Delete VariableDeclarationFragment(472)", "Delete VariableDeclarationStatement(473)", "Delete SimpleName: next(474)", "Delete NumberLiteral: 1(475)", "Delete PrefixExpression: -(476)", "Delete InfixExpression: ==(477)", "Delete IfStatement(481)", "Delete Block(482)", "Delete IfStatement(483)", "Delete Block(484)", "Delete EnhancedForStatement(485)", "Delete NullLiteral(486)", "Delete ReturnStatement(487)", "Delete SimpleName: ASTERISK(555)", "Delete TextElement: Walk a top-level class declaration (possibly traversing into nested classes), and collect(572)", "Delete TextElement: Record a type reference that may need to be imported.(737)", "Delete TagElement(738)", "Delete Javadoc(739)", "Delete Modifier: private(740)", "Delete PrimitiveType: void(741)", "Delete SimpleName: type(747)", "Delete NullLiteral(748)", "Delete InfixExpression: ==(749)", "Delete ReturnStatement(750)", "Delete Block(751)", "Delete IfStatement(752)", "Delete QualifiedName: Symbol.TypeSymbol(753)", "Delete SimpleType: Symbol.TypeSymbol(754)", "Delete SimpleName: sym(755)", "Delete QualifiedName: type.tsym(756)", "Delete VariableDeclarationFragment(757)", "Delete VariableDeclarationStatement(758)", "Delete SimpleName: sym(765)", "Delete SimpleName: isPrivate(766)", "Delete MethodInvocation(767)", "Delete ReturnStatement(768)", "Delete Block(769)", "Delete IfStatement(770)", "Delete SimpleName: seen(771)", "Delete SimpleName: add(772)", "Delete SimpleName: TypeToImport(773)", "Delete SimpleName: create(774)", "Delete SimpleName: sym(775)", "Delete SimpleName: getQualifiedName(776)", "Delete MethodInvocation(777)", "Delete SimpleName: toString(778)", "Delete MethodInvocation(779)", "Delete BooleanLiteral: false(780)", "Delete MethodInvocation(781)", "Delete MethodInvocation(782)", "Delete SimpleName: JCClassDecl(602)", "Delete SimpleName: ClassTree(794)", "Delete MethodInvocation(1039)", "Delete SimpleName: build(1043)", "Delete MethodInvocation(1044)", "Delete SimpleName: Override(836)", "Delete MarkerAnnotation(837)", "Delete PrimitiveType: void(839)", "Delete SimpleName: apply(840)", "Delete SimpleType: ClassTree(842)", "Delete SimpleName: tree(843)", "Delete SingleVariableDeclaration(844)", "Delete SimpleName: VisitorState(845)", "Delete SimpleType: VisitorState(846)", "Delete SimpleName: state(847)", "Delete SingleVariableDeclaration(848)", "Delete SimpleName: BugChecker(865)", "Delete SimpleType: BugChecker(866)", "Delete SimpleName: checker(867)", "Delete SingleVariableDeclaration(868)", "Delete SimpleName: fix(928)", "Delete MethodInvocation(932)", "Delete SimpleName: toImport(917)", "Delete SimpleName: isStatic(918)", "Delete MethodInvocation(919)", "Delete SimpleName: fix(920)", "Delete SimpleName: addStaticImport(921)", "Delete SimpleName: toImport(922)", "Delete SimpleName: typeName(923)", "Delete MethodInvocation(924)", "Delete MethodInvocation(925)", "Delete ExpressionStatement(926)", "Delete Block(927)", "Delete Block(935)", "Delete IfStatement(936)", "Delete Block(937)", "Delete PrefixExpression: !(942)", "Delete SimpleName: state(943)", "Delete SimpleName: buildDescriptionFromChecker(945)", "Delete SimpleName: wildcardImports(946)", "Delete SimpleName: get(947)", "Delete NumberLiteral: 0(948)", "Delete MethodInvocation(949)", "Delete SimpleName: checker(950)", "Delete MethodInvocation(951)", "Delete SimpleName: addFix(952)", "Delete MethodInvocation(956)", "Delete SimpleName: build(957)", "Delete MethodInvocation(958)", "Delete MethodInvocation(959)", "Delete ExpressionStatement(960)", "Delete Block(961)", "Delete IfStatement(962)", "Delete Modifier: public(651)", "Delete PrimitiveType: void(652)", "Delete SimpleName: visitIdent(653)", "Delete QualifiedName: tree.sym(658)", "Delete NullLiteral(659)", "Delete InfixExpression: !=(660)", "Delete QualifiedName: tree.sym.kind(661)", "Delete SimpleName: addType(664)", "Delete QualifiedName: tree.sym.type(665)", "Delete MethodInvocation(666)", "Delete ExpressionStatement(667)", "Delete BreakStatement(668)", "Delete SimpleName: addStaticMember(673)", "Delete QualifiedName: tree.sym(674)", "Delete MethodInvocation(675)", "Delete ExpressionStatement(676)", "Delete BreakStatement(677)", "Delete SwitchCase(678)", "Delete SwitchStatement(679)", "Delete Block(680)", "Delete IfStatement(681)", "Delete Block(682)", "Delete MethodDeclaration(683)", "Delete TextElement: Record a static field or method that may need to be imported.(684)", "Delete TagElement(685)", "Delete Javadoc(686)", "Delete Modifier: private(687)", "Delete PrimitiveType: void(688)", "Delete SimpleName: addStaticMember(689)", "Delete SimpleName: sym(692)", "Delete SingleVariableDeclaration(693)", "Delete SimpleName: sym(694)", "Delete SimpleName: isStatic(695)", "Delete MethodInvocation(696)", "Delete PrefixExpression: !(697)", "Delete IfStatement(700)", "Delete QualifiedName: sym.owner(701)", "Delete NullLiteral(702)", "Delete InfixExpression: ==(703)", "Delete ReturnStatement(704)", "Delete Block(705)", "Delete IfStatement(706)", "Delete SimpleName: sym(707)", "Delete SimpleName: isPrivate(708)", "Delete MethodInvocation(709)", "Delete ReturnStatement(710)", "Delete Block(711)", "Delete IfStatement(712)", "Delete SimpleType: String(714)", "Delete StringLiteral: \".\"(719)", "Delete SimpleName: sym(720)", "Delete SimpleName: getQualifiedName(721)", "Delete MethodInvocation(722)", "Delete InfixExpression: +(723)", "Delete VariableDeclarationFragment(724)", "Delete VariableDeclarationStatement(725)", "Delete SimpleName: seen(726)", "Delete SimpleName: add(727)", "Delete SimpleName: TypeToImport(728)", "Delete SimpleName: create(729)", "Delete SimpleName: canonicalName(730)", "Delete BooleanLiteral: true(731)", "Delete MethodInvocation(732)", "Delete MethodInvocation(733)", "Delete ExpressionStatement(734)", "Delete Block(735)", "Delete MethodDeclaration(736)", "Delete TypeDeclaration: class(786)", "Delete TextElement: Interface for the fix generating logic.(787)", "Delete TagElement(788)", "Delete Javadoc(789)", "Delete Modifier: public(790)", "Delete SimpleName: FixStrategy(791)", "Delete SimpleName: VisitorState(798)", "Delete SimpleType: VisitorState(799)", "Delete SimpleName: state(800)", "Delete SingleVariableDeclaration(801)", "Delete SimpleName: ImmutableList(802)", "Delete SimpleType: ImmutableList(803)", "Delete SimpleName: ImportTree(804)", "Delete SimpleType: ImportTree(805)", "Delete ParameterizedType: ImmutableList<ImportTree>(806)", "Delete SimpleName: wildcardImports(807)", "Delete SingleVariableDeclaration(808)", "Delete SimpleName: Multimap(809)", "Delete SimpleType: Multimap(810)", "Delete SimpleName: ImportTree(811)", "Delete SimpleType: ImportTree(812)", "Delete SimpleName: TypeToImport(813)", "Delete SimpleType: TypeToImport(814)", "Delete ParameterizedType: Multimap<ImportTree,TypeToImport>(815)", "Delete SimpleName: toFix(816)", "Delete SingleVariableDeclaration(817)", "Delete SimpleName: BugChecker(818)", "Delete SimpleType: BugChecker(819)", "Delete SimpleName: checker(820)", "Delete SingleVariableDeclaration(821)", "Delete MethodDeclaration(822)", "Delete TypeDeclaration: interface(823)", "Delete TextElement: Fix strategies for testing and production. (See the TODO above about better testing for(824)", "Delete TextElement: import-only fixes.)(825)", "Delete TagElement(826)", "Delete Javadoc(827)", "Delete Modifier: public(828)", "Delete SimpleName: FixStrategies(829)", "Delete SimpleName: FixStrategy(830)", "Delete SimpleType: FixStrategy(831)", "Delete SimpleName: PRODUCTION(832)", "Delete AnonymousClassDeclaration(965)", "Delete EnumConstantDeclaration(966)", "Delete SimpleName: TEST(967)", "Delete TextElement: them as a suffix.(969)", "Delete TagElement(970)", "Delete Javadoc(971)", "Delete SimpleName: Override(972)", "Delete MarkerAnnotation(973)", "Delete SimpleName: ClassTree(977)", "Delete SimpleType: ClassTree(978)", "Delete SimpleName: tree(979)", "Delete SingleVariableDeclaration(980)", "Delete SimpleName: VisitorState(981)", "Delete SimpleType: VisitorState(982)", "Delete SimpleName: state(983)", "Delete SingleVariableDeclaration(984)", "Delete SimpleName: ImmutableList(985)", "Delete SimpleType: ImmutableList(986)", "Delete SimpleName: ImportTree(987)", "Delete SimpleType: ImportTree(988)", "Delete ParameterizedType: ImmutableList<ImportTree>(989)", "Delete SimpleName: wildcardImports(990)", "Delete SingleVariableDeclaration(991)", "Delete SimpleName: Multimap(992)", "Delete SimpleType: Multimap(993)", "Delete SimpleName: ImportTree(994)", "Delete SimpleType: ImportTree(995)", "Delete SimpleName: TypeToImport(996)", "Delete SimpleType: TypeToImport(997)", "Delete ParameterizedType: Multimap<ImportTree,TypeToImport>(998)", "Delete SimpleName: toFix(999)", "Delete SingleVariableDeclaration(1000)", "Delete SimpleName: BugChecker(1001)", "Delete SimpleType: BugChecker(1002)", "Delete SimpleName: checker(1003)", "Delete SingleVariableDeclaration(1004)", "Delete SimpleName: ImportTree(1005)", "Delete SimpleType: ImportTree(1006)", "Delete SimpleName: toDelete(1007)", "Delete SingleVariableDeclaration(1008)", "Delete SimpleName: wildcardImports(1009)", "Delete SimpleName: Iterable(1010)", "Delete SimpleType: Iterable(1011)", "Delete SimpleName: TypeToImport(1012)", "Delete SimpleType: TypeToImport(1013)", "Delete ParameterizedType: Iterable<TypeToImport>(1014)", "Delete SimpleName: replacements(1015)", "Delete SimpleName: toDelete(1018)", "Delete MethodInvocation(1019)", "Delete VariableDeclarationFragment(1020)", "Delete VariableDeclarationStatement(1021)", "Delete SimpleName: fix(1024)", "Delete SimpleName: SuggestedFix(1025)", "Delete SimpleName: postfixWith(1026)", "Delete SimpleName: replacements(1028)", "Delete SimpleName: toString(1029)", "Delete MethodInvocation(1030)", "Delete MethodInvocation(1031)", "Delete VariableDeclarationFragment(1032)", "Delete VariableDeclarationStatement(1033)", "Delete ExpressionStatement(1046)", "Delete Block(1047)", "Delete EnhancedForStatement(1048)", "Delete Block(1049)", "Delete MethodDeclaration(1050)", "Delete AnonymousClassDeclaration(1051)", "Delete EnumConstantDeclaration(1052)", "Delete EnumDeclaration(1053)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}