{"application": "apache-shiro", "csha": "4b665c59f7837bbcd6760b89bafdc1585598c9e0", "files": [{"Base64_cluster": {"actions": [{"root": "INS TextElement: <p/> to TagElement at 1", "operations": ["INS TextElement: <p/> to TagElement at 1"]}, {"root": "INS TextElement: <p/> to TagElement at 6", "operations": ["INS TextElement: <p/> to TagElement at 6"]}, {"root": "INS TextElement: <p/> to TagElement at 10", "operations": ["INS TextElement: <p/> to TagElement at 10"]}, {"root": "INS TextElement: <p/> to TagElement at 1", "operations": ["INS TextElement: <p/> to TagElement at 1"]}, {"root": "INS TextElement: <p/> to TagElement at 2", "operations": ["INS TextElement: <p/> to TagElement at 2"]}, {"root": "INS TextElement: <p/> to TagElement at 4", "operations": ["INS TextElement: <p/> to TagElement at 4"]}, {"root": "INS TextElement: <p/> to TagElement at 3", "operations": ["INS TextElement: <p/> to TagElement at 3"]}, {"root": "INS TextElement: <p/> to TagElement at 5", "operations": ["INS TextElement: <p/> to TagElement at 5"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2", "MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: PAD", "DEL InfixExpression: ==", "DEL SimpleName: marker1"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}]}}, {"Base64_diff": {"operations": ["Insert TextElement: <p/>(3) into TagElement(15) at 1", "Insert TextElement: <p/>(8) into TagElement(15) at 6", "Insert TextElement: <p/>(12) into TagElement(15) at 10", "Insert TextElement: <p/>(28) into TagElement(31) at 1", "Insert TextElement: <p/>(151) into TagElement(155) at 2", "Insert TextElement: <p/>(153) into TagElement(155) at 4", "Insert TextElement: <p/>(174) into TagElement(178) at 3", "Insert TextElement: <p/>(176) into TagElement(178) at 5", "Move IfStatement(1744) into IfStatement(1734) at 2", "Move InfixExpression: ==(1677) into IfStatement(1733) at 0", "Move Block(1693) into IfStatement(1733) at 1", "Delete NumberLiteral: 0(729)", "Delete NumberLiteral: 0(817)", "Delete NumberLiteral: 0(820)", "Delete NumberLiteral: 0(823)", "Delete NumberLiteral: 0(826)", "Delete NumberLiteral: 0(829)", "Delete NumberLiteral: 0(839)", "Delete NumberLiteral: 0(844)", "Delete NullLiteral(1480)", "Delete NumberLiteral: 0(1485)", "Delete NumberLiteral: 0(1488)", "Delete NumberLiteral: 0(1491)", "Delete NumberLiteral: 0(1494)", "Delete NumberLiteral: 0(1497)", "Delete NumberLiteral: 0(1500)", "Delete NumberLiteral: 0(1510)", "Delete SimpleName: marker1(1694)", "Delete SimpleName: PAD(1695)", "Delete InfixExpression: ==(1696)", "Delete IfStatement(1745)"]}}, {"DefaultSecurityManager_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 29", "INS Block to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationStatement to Block at 1", "INS QualifiedName: SessionSubjectBinder.PRINCIPALS_SESSION_KEY to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS IfStatement to Block at 2", "INS SimpleName: session to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: session to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: session to InfixExpression: != at 0", "INS SimpleName: remembered to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getAttribute to MethodInvocation at 1", "INS SimpleName: createSubject to MethodDeclaration at 2", "INS SimpleName: remembered to Assignment: = at 0", "INS InfixExpression: == to IfStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: createSubject to MethodInvocation at 0", "INS SimpleName: remembered to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS TextElement:  instance reflecting the specified initialization data. to TagElement: @return at 2", "INS TagElement: @link to TagElement at 2", "INS SimpleName: SubjectFactory to MethodRef at 0", "INS SimpleName: resolved to MethodInvocation at 2", "INS ReturnStatement to Block at 1", "INS TextElement:  the  to TagElement: @return at 0", "INS MethodRefParameter to MethodRef at 2", "INS TextElement:  any data needed to direct how the Subject should be constructed. to TagElement: @param at 1", "INS TextElement:  Subject to TagElement: @code at 0", "INS QualifiedName: java.util.Map to SimpleType: java.util.Map at 0", "INS MethodInvocation to ReturnStatement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  resolveSessionIfNecessary to TagElement: @link at 1", "INS SimpleName: SubjectFactory to MethodRef at 0", "INS SimpleName: context to TagElement: @param at 0", "INS TextElement: (returnValue);</code> to TagElement at 9", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @link to TagElement at 8", "INS SimpleName: resolveSessionIfNecessary to MethodRef at 0", "INS SimpleType: java.util.Map to MethodRefParameter at 0", "INS SimpleName: resolveSessionIfNecessary to MethodInvocation at 0", "INS QualifiedName: java.util.Map to SimpleType: java.util.Map at 0", "INS MethodRef to TagElement: @link at 0", "INS SimpleName: getSubjectFactory to MethodRef at 0", "INS SimpleName: context to MethodInvocation at 1", "INS TextElement:  method.  The to TagElement at 3", "INS SimpleName: resolved to VariableDeclarationFragment at 0", "INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  getSubjectFactory() to TagElement: @link at 1", "INS TagElement: @return to Javadoc at 2", "INS TagElement: @param to Javadoc at 1", "INS MethodRefParameter to MethodRef at 1", "INS MethodRef to TagElement: @link at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TextElement:  createSubject to TagElement: @link at 1", "INS SimpleName: createSubject to MethodInvocation at 1", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @see to Javadoc at 3", "INS SimpleType: java.util.Map to MethodRefParameter at 0", "INS SimpleName: createSubject to MethodRef at 1", "INS VariableDeclarationStatement to Block at 0", "INS TextElement: . to TagElement at 7", "INS TextElement: passing it to the  to TagElement at 1", "INS Block to MethodDeclaration at 5", "INS SimpleType: Map to VariableDeclarationStatement at 0", "INS QualifiedName: java.util.Map to SimpleType: java.util.Map at 0", "INS TagElement: @link to TagElement at 6", "INS MethodRef to TagElement: @see at 0", "INS MethodRefParameter to MethodRef at 2", "INS SimpleType: java.util.Map to MethodRefParameter at 0", "INS TextElement:  1.0 to TagElement: @since at 0", "INS SimpleName: createSubject to MethodRef at 1", "INS TagElement: @since to Javadoc at 4", "INS TextElement: <code> to TagElement at 5", "INS TextElement: return value from that call is then used to create the Subject instance by calling to TagElement at 4", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TextElement: This implementation attempts to resolve any session ID that may exist in the context argument by first to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS Modifier: protected to MethodDeclaration at 2", "INS StringLiteral: \"Context already contains a session.  Returning.\" to MethodInvocation at 2", "INS TextElement: Attempts to resolve any session id in the context to its corresponding  to TagElement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @code to TagElement at 22", "INS TagElement: @code to TagElement at 24", "INS Block to TryStatement at 0", "INS TagElement: @return to Javadoc at 2", "INS TextElement:  the subject context data that may contain a session id that should be converted to a Session instance. to TagElement: @param at 1", "INS SimpleName: SubjectFactory to TagElement: @link at 0", "INS SimpleName: SESSION_ID to MemberRef at 1", "INS TextElement: invoked  to TagElement at 6", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS SimpleName: copy to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleName: log to MethodInvocation at 0", "INS TagElement: @since to Javadoc at 3", "INS InfixExpression: + to MethodInvocation at 2", "INS TextElement:  for subject creation. to TagElement: @return at 2", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TextElement:  Subject to TagElement: @code at 0", "INS TextElement:  Session to TagElement: @code at 0", "INS TextElement:  and returns a to TagElement at 2", "INS TagElement: @link to TagElement: @return at 1", "INS SimpleName: SubjectFactory to MemberRef at 0", "INS SimpleName: Subject to TagElement: @link at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS TagElement: @link to TagElement at 1", "INS SimpleName: context to TagElement: @param at 0", "INS TextElement: changed, the resolved session is placed into the copy and the copy is returned. to TagElement at 19", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS TextElement: <code> to TagElement at 13", "INS StringLiteral: \"No session found in context.  Looking for a session id to resolve in to a session.\" to MethodInvocation at 2", "INS SimpleName: context to ReturnStatement at 0", "INS QualifiedName: SubjectFactory.SESSION to MethodInvocation at 2", "INS Block to CatchClause at 1", "INS TextElement:  already in the context because that is what the caller wants to be used for to TagElement at 23", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS TextElement: returns the Map method argument without change. to TagElement at 26", "INS Block to IfStatement at 1", "INS TextElement:  SESSION_ID to TagElement: @link at 1", "INS SimpleName: context to ClassInstanceCreation at 1", "INS TextElement:  that performs actual  to TagElement at 8", "INS QualifiedName: SubjectFactory.SESSION to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS TextElement: <p/> to TagElement at 11", "INS SimpleName: Session to TagElement: @link at 0", "INS TagElement: @link to TagElement at 7", "INS TagElement: @code to TagElement at 4", "INS StringLiteral: \"unchecked\" to ArrayInitializer at 0", "INS TextElement: If there is a  to TagElement at 21", "INS IfStatement to Block at 0", "INS TextElement:  1.0 to TagElement: @since at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: context to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: HashMap to ClassInstanceCreation at 0", "INS TextElement: . to TagElement at 15", "INS SimpleName: sessionId to InfixExpression: != at 0", "INS SimpleName: resolveSessionIfNecessary to MethodDeclaration at 4", "INS SimpleType: Map to VariableDeclarationStatement at 0", "INS TextElement:  SubjectFactory to TagElement: @link at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: context to SingleVariableDeclaration at 1", "INS TextElement: <p/> to TagElement at 20", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: put to MethodInvocation at 1", "INS TagElement: @link to TagElement at 9", "INS TextElement:  construction. to TagElement at 10", "INS SimpleName: debug to MethodInvocation at 1", "INS TagElement: @link to TagElement at 16", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: SubjectFactory to TagElement: @link at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: context to MethodInvocation at 1", "INS SimpleType: Serializable to VariableDeclarationStatement at 0", "INS TextElement: The session id, if it exists in the context map, should be available as a value under the to TagElement at 12", "INS TryStatement to Block at 0", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: copy to ReturnStatement at 0", "INS SimpleName: trace to MethodInvocation at 1", "INS SimpleName: session to MethodInvocation at 3", "INS SimpleName: onInvalidSessionId to MethodInvocation at 0", "INS TextElement:  The context Map to use to pass to a  to TagElement: @return at 0", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to MethodDeclaration at 6", "INS TextElement:  to ensure it may be referenced if necessary by the to TagElement at 5", "INS TagElement: @link to TagElement at 14", "INS SimpleName: log to MethodInvocation at 0", "INS ReturnStatement to Block at 5", "INS TextElement: If a session is resolved, a copy of the original context Map is made to ensure the method argument is not to TagElement at 18", "INS NullLiteral to InfixExpression: != at 1", "INS TextElement: context that represents this resolved  to TagElement at 3", "INS SimpleName: sessionId to VariableDeclarationFragment at 0", "INS SimpleName: containsKey to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: debug to MethodInvocation at 1", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: SubjectFactory to TagElement: @link at 0", "INS TextElement: </code> key constant. to TagElement at 17", "INS IfStatement to Block at 4", "INS SimpleType: Map to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS TextElement:  Session to TagElement: @code at 0", "INS TextElement:  construction, or if no session is resolved, this method effectively does nothing and immediately to TagElement at 25", "INS SimpleName: sessionId to MethodInvocation at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: copy to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 46", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SimpleName: onInvalidSessionId to MethodDeclaration at 3", "INS TextElement:  the session id that was discovered to be invalid (no session, expired, etc). to TagElement: @param at 1", "INS TextElement: Allows subclasses to react to the fact that a provided session id was invalid. to TagElement at 0", "INS SimpleName: sessionId to SingleVariableDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: sessionId to TagElement: @param at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Serializable to SingleVariableDeclaration at 0", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 46", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV Modifier: protected to MethodDeclaration at 0", "MOV SimpleType: Session to MethodDeclaration at 1", "MOV SimpleName: getSession to MethodDeclaration at 2"]}, {"root": "INS SimpleType: Session to MethodDeclaration at 1", "operations": ["INS SimpleName: Session to SimpleType: Session at 0", "INS SimpleType: Session to MethodDeclaration at 1"]}, {"root": "INS SimpleName: getCurrentSession to MethodDeclaration at 2", "operations": ["INS SimpleName: getCurrentSession to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Subject to MethodDeclaration at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement:  Map to TagElement: @link at 1", "INS MethodRefParameter to MethodRef at 1", "INS SimpleName: principals to TagElement: @param at 0", "INS TagElement: @link to TagElement at 10", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  1.0 to TagElement: @since at 0", "INS SimpleName: Subject to TagElement: @link at 0", "INS SimpleName: session to TagElement: @param at 0", "INS TagElement: @code to TagElement: @param at 2", "INS TagElement: @return to Javadoc at 3", "INS TagElement: @link to TagElement at 3", "INS TextElement: <p/> to TagElement at 5", "INS TextElement:     the session to be associated with the constructed  to TagElement: @param at 1", "INS TextElement:  the identity that the constructed  to TagElement: @param at 1", "INS MethodRef to TagElement: @link at 0", "INS SimpleName: Session to TagElement: @link at 0", "INS TagElement: @param to Javadoc at 2", "INS TextElement: Returns a  to TagElement at 0", "INS SimpleName: Map to TagElement: @link at 0", "INS TextElement:  using the Map as the parameter. to TagElement at 11", "INS TextElement:  instance should have. to TagElement: @param at 3", "INS TextElement:  The Subject instance reflecting the specified identity (principals) and session. to TagElement: @return at 0", "INS TagElement: @since to Javadoc at 4", "INS TextElement:  instance.  Either argument can be null. to TagElement at 4", "INS TagElement: @link to TagElement at 1", "INS TextElement: not null) and returns  to TagElement at 9", "INS TagElement to Javadoc at 0", "INS TextElement:  instance that reflects the specified identity (principals), backed by the given to TagElement at 2", "INS TextElement:  (if they are to TagElement at 8", "INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  Subject to TagElement: @code at 0", "INS SimpleType: java.util.Map to MethodRefParameter at 0", "INS TextElement:  instance. to TagElement: @param at 3", "INS TextElement:  Subject to TagElement: @code at 0", "INS TextElement: This method is a convenience that assembles either argument into a context  to TagElement at 6", "INS SimpleName: getSubject to MethodRef at 0", "INS Javadoc to MethodDeclaration at 0", "INS QualifiedName: java.util.Map to SimpleType: java.util.Map at 0", "INS TagElement: @link to TagElement at 7"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: private to MethodDeclaration at 1", "MOV SimpleName: assertCreation to MethodDeclaration at 3", "MOV SimpleType: IllegalStateException to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Subject to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from getSubjectFactory to getSubject", "operations": ["UPD SimpleName: getSubjectFactory from getSubjectFactory to getSubject", "UPD SimpleName: createSubject from createSubject to getSubject", "UPD SimpleName: createSubject from createSubject to getSubject", "UPD SimpleName: assertCreation from assertCreation to getSubject"]}, {"root": "UPDATE from IllegalStateException to Map", "operations": ["UPD SimpleType: IllegalStateException from IllegalStateException to Map", "UPD SimpleName: Subject from Subject to Map", "UPD SimpleName: String from String to Map", "UPD SimpleName: IllegalStateException from IllegalStateException to Map"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "INS SimpleType: Serializable to MethodDeclaration at 2", "operations": ["INS SimpleType: Serializable to MethodDeclaration at 2", "INS SimpleName: Serializable to SimpleType: Serializable at 0"]}, {"root": "INS SimpleName: getSessionId to MethodDeclaration at 3", "operations": ["INS SimpleName: getSessionId to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: Map to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: subjectContext to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from <p>The Shiro framework's default concrete implementation of the  to The Shiro framework's default concrete implementation of the ", "operations": ["UPD TextElement: <p>The Shiro framework's default concrete implementation of the  from <p>The Shiro framework's default concrete implementation of the  to The Shiro framework's default concrete implementation of the "]}, {"root": "UPDATE from implementation.</p> to implementation.", "operations": ["UPD TextElement: implementation.</p> from implementation.</p> to implementation."]}, {"root": "UPDATE from <p>To greatly reduce and simplify configuration, this implementation (and its superclasses) will to To greatly reduce and simplify configuration, this implementation (and its superclasses) will", "operations": ["UPD TextElement: <p>To greatly reduce and simplify configuration, this implementation (and its superclasses) will from <p>To greatly reduce and simplify configuration, this implementation (and its superclasses) will to To greatly reduce and simplify configuration, this implementation (and its superclasses) will"]}, {"root": "INS TextElement: s.  Because  to TagElement at 18", "operations": ["INS TextElement: s.  Because  to TagElement at 18"]}, {"root": "INS TagElement: @code to TagElement at 19", "operations": ["INS TextElement:  Realm to TagElement: @code at 0", "INS TagElement: @code to TagElement at 19"]}, {"root": "UPDATE from s.  Because <code>Realm</code> implementations usually interact with an application's data model, to  implementations usually interact with an application's data model,", "operations": ["UPD TextElement: s.  Because <code>Realm</code> implementations usually interact with an application's data model, from s.  Because <code>Realm</code> implementations usually interact with an application's data model, to  implementations usually interact with an application's data model,"]}, {"root": "INS TagElement: @code to TagElement at 22", "operations": ["INS TagElement: @code to TagElement at 22", "INS TextElement:  Realm to TagElement: @code at 0"]}, {"root": "UPDATE from <tt>Realm</tt> implementation that 'knows' about your application's data/security model to  implementation that 'knows' about your application's data/security model", "operations": ["UPD TextElement: <tt>Realm</tt> implementation that 'knows' about your application's data/security model from <tt>Realm</tt> implementation that 'knows' about your application's data/security model to  implementation that 'knows' about your application's data/security model"]}, {"root": "UPDATE from will have suitable defaults for most enterprise applications.</p> to will have suitable defaults for most enterprise applications.", "operations": ["UPD TextElement: will have suitable defaults for most enterprise applications.</p> from will have suitable defaults for most enterprise applications.</p> to will have suitable defaults for most enterprise applications."]}, {"root": "UPDATE from <p><b>RememberMe notice</b>: This class supports the ability to configure a to <b>RememberMe notice</b>: This class supports the ability to configure a", "operations": ["UPD TextElement: <p><b>RememberMe notice</b>: This class supports the ability to configure a from <p><b>RememberMe notice</b>: This class supports the ability to configure a to <b>RememberMe notice</b>: This class supports the ability to configure a"]}, {"root": "INS TextElement: for  to TagElement at 31", "operations": ["INS TextElement: for  to TagElement at 31"]}, {"root": "INS TagElement: @code to TagElement at 32", "operations": ["INS TagElement: @code to TagElement at 32", "INS TextElement:  RememberMe to TagElement: @code at 0"]}, {"root": "UPDATE from for <tt>RememberMe</tt> identity services for login/logout, BUT, a default instance <em>will not</em> be created to  identity services for login/logout, BUT, a default instance <em>will not</em> be created", "operations": ["UPD TextElement: for <tt>RememberMe</tt> identity services for login/logout, BUT, a default instance <em>will not</em> be created from for <tt>RememberMe</tt> identity services for login/logout, BUT, a default instance <em>will not</em> be created to  identity services for login/logout, BUT, a default instance <em>will not</em> be created"]}, {"root": "UPDATE from <p>Because RememberMe services are inherently client tier-specific and to Because RememberMe services are inherently client tier-specific and", "operations": ["UPD TextElement: <p>Because RememberMe services are inherently client tier-specific and from <p>Because RememberMe services are inherently client tier-specific and to Because RememberMe services are inherently client tier-specific and"]}, {"root": "INS TextElement: therefore aplication-dependent, if you want  to TagElement at 37", "operations": ["INS TextElement: therefore aplication-dependent, if you want  to TagElement at 37"]}, {"root": "INS TagElement: @code to TagElement at 38", "operations": ["INS TextElement:  RememberMe to TagElement: @code at 0", "INS TagElement: @code to TagElement at 38"]}, {"root": "UPDATE from therefore aplication-dependent, if you want <tt>RememberMe</tt> services enabled, you will have to specify an to  services enabled, you will have to specify an", "operations": ["UPD TextElement: therefore aplication-dependent, if you want <tt>RememberMe</tt> services enabled, you will have to specify an from therefore aplication-dependent, if you want <tt>RememberMe</tt> services enabled, you will have to specify an to  services enabled, you will have to specify an"]}, {"root": "INS TextElement: <em>does</em> support  to TagElement at 46", "operations": ["INS TextElement: <em>does</em> support  to TagElement at 46"]}, {"root": "INS TagElement: @code to TagElement at 47", "operations": ["INS TextElement:  RememberMe to TagElement: @code at 0", "INS TagElement: @code to TagElement at 47"]}, {"root": "UPDATE from <em>does</em> support <tt>RememberMe</tt> services by default at startup. to  services by default at startup.", "operations": ["UPD TextElement: <em>does</em> support <tt>RememberMe</tt> services by default at startup. from <em>does</em> support <tt>RememberMe</tt> services by default at startup. to  services by default at startup."]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement: @code to TagElement at 4", "INS TagElement: @link to TagElement at 10", "INS TextElement: Utility method to retrieve the session id from the given subject context Map which will be used to resolve to TagElement at 0", "INS TextElement: to a  to TagElement at 1", "INS TagElement to Javadoc at 0", "INS TextElement: <code> to TagElement at 7", "INS TextElement: . to TagElement at 9", "INS TextElement:  SESSION_ID to TagElement: @link at 1", "INS TextElement: </code> constant. to TagElement at 11", "INS TextElement:  SubjectFactory to TagElement: @link at 1", "INS SimpleName: SESSION_ID to MemberRef at 1", "INS TagElement: @link to TagElement at 8", "INS TextElement: expected to be available in the map under the to TagElement at 6", "INS TextElement:  if there is no session id in the map.  If the session id exists, it is to TagElement at 5", "INS SimpleName: Session to TagElement: @link at 0", "INS SimpleName: SubjectFactory to TagElement: @link at 0", "INS SimpleName: SubjectFactory to MemberRef at 0", "INS TagElement: @link to TagElement at 2", "INS TextElement:  null to TagElement: @code at 0", "INS TextElement:  or  to TagElement at 3", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  instance via to TagElement: @param at 3", "INS SimpleName: subjectContext to TagElement: @param at 0", "INS TextElement:  the context map with data that will be used to construct a  to TagElement: @param at 1", "INS SimpleName: Subject to TagElement: @link at 0", "INS SimpleName: SubjectFactory to TagElement: @link at 0", "INS TagElement: @link to TagElement: @param at 2", "INS TagElement: @link to TagElement: @param at 5", "INS TagElement: @param to Javadoc at 1", "INS TextElement: a  to TagElement: @param at 4"]}, {"root": "INS TagElement: @return to Javadoc at 2", "operations": ["INS TagElement: @return to Javadoc at 2", "INS TagElement: @code to TagElement: @return at 3", "INS SimpleName: Session to TagElement: @link at 0", "INS TagElement: @link to TagElement: @return at 1", "INS TextElement:  instance or  to TagElement: @return at 2", "INS TextElement:  if a session id could not be found. to TagElement: @return at 4", "INS TextElement:  a session id to resolve to a  to TagElement: @return at 0", "INS TextElement:  null to TagElement: @code at 0"]}, {"root": "INS TagElement: @see to Javadoc at 3", "operations": ["INS MethodRef to TagElement: @see at 0", "INS SimpleType: java.util.Map to MethodRefParameter at 0", "INS QualifiedName: java.util.Map to SimpleType: java.util.Map at 0", "INS SimpleName: getSubject to MethodRef at 0", "INS TagElement: @see to Javadoc at 3", "INS MethodRefParameter to MethodRef at 1"]}, {"root": "INS TagElement: @see to Javadoc at 4", "operations": ["INS MethodRef to TagElement: @see at 0", "INS QualifiedName: java.util.Map to SimpleType: java.util.Map at 0", "INS TagElement: @see to Javadoc at 4", "INS SimpleName: SubjectFactory to MethodRef at 0", "INS SimpleName: createSubject to MethodRef at 1", "INS SimpleType: java.util.Map to MethodRefParameter at 0", "INS MethodRefParameter to MethodRef at 2"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS SimpleName: session to ReturnStatement at 0", "operations": ["INS SimpleName: session to ReturnStatement at 0"]}, {"root": "UPDATE from String to Session", "operations": ["UPD SimpleName: String from String to Session", "UPD SimpleType: String from String to Session"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PrincipalCollection to VariableDeclarationStatement at 0"]}, {"root": "INS TextElement: Creates a  to TagElement at 0", "operations": ["INS TextElement: Creates a  to TagElement at 0"]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TextElement:  Subject to TagElement: @code at 0", "INS TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from Creates a <tt>Subject</tt> instance for the user represented by the given method arguments. to  instance for the user represented by the given method arguments.", "operations": ["UPD TextElement: Creates a <tt>Subject</tt> instance for the user represented by the given method arguments. from Creates a <tt>Subject</tt> instance for the user represented by the given method arguments. to  instance for the user represented by the given method arguments."]}, {"root": "INS TextElement:  the  to TagElement: @param at 1", "operations": ["INS TextElement:  the  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  AuthenticationToken to TagElement: @code at 0"]}, {"root": "UPDATE from  the <tt>AuthenticationToken</tt> submitted for the successful authentication. to  submitted for the successful authentication.", "operations": ["UPD TextElement:  the <tt>AuthenticationToken</tt> submitted for the successful authentication. from  the <tt>AuthenticationToken</tt> submitted for the successful authentication. to  submitted for the successful authentication."]}, {"root": "INS TextElement:   the  to TagElement: @param at 1", "operations": ["INS TextElement:   the  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TextElement:  AuthenticationInfo to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 2"]}, {"root": "UPDATE from   the <tt>AuthenticationInfo</tt> of a newly authenticated user. to  of a newly authenticated user.", "operations": ["UPD TextElement:   the <tt>AuthenticationInfo</tt> of a newly authenticated user. from   the <tt>AuthenticationInfo</tt> of a newly authenticated user. to  of a newly authenticated user."]}, {"root": "INS TextElement:  the  to TagElement: @return at 0", "operations": ["INS TextElement:  the  to TagElement: @return at 0"]}, {"root": "INS TagElement: @code to TagElement: @return at 1", "operations": ["INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  Subject to TagElement: @code at 0"]}, {"root": "UPDATE from  the <tt>Subject</tt> instance that represents the user and session data for the newly to  instance that represents the user and session data for the newly", "operations": ["UPD TextElement:  the <tt>Subject</tt> instance that represents the user and session data for the newly from  the <tt>Subject</tt> instance that represents the user and session data for the newly to  instance that represents the user and session data for the newly"]}, {"root": "INS TextElement: Binds a  to TagElement at 0", "operations": ["INS TextElement: Binds a  to TagElement at 0"]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TagElement: @code to TagElement at 1", "INS TextElement:  Subject to TagElement: @code at 0"]}, {"root": "UPDATE from Binds a <tt>Subject</tt> instance created after authentication to the application for later use. to  instance created after authentication to the application for later use.", "operations": ["UPD TextElement: Binds a <tt>Subject</tt> instance created after authentication to the application for later use. from Binds a <tt>Subject</tt> instance created after authentication to the application for later use. to  instance created after authentication to the application for later use."]}, {"root": "UPDATE from <p>The default implementation merely binds the argument to the thread local via the  to The default implementation merely binds the argument to the thread local via the ", "operations": ["UPD TextElement: <p>The default implementation merely binds the argument to the thread local via the  from <p>The default implementation merely binds the argument to the thread local via the  to The default implementation merely binds the argument to the thread local via the "]}, {"root": "UPDATE from Should be overridden by subclasses for environment-specific binding (e.g. web environment, etc). to and overridden by subclasses for environment-specific binding (e.g. standalone application).", "operations": ["UPD TextElement: Should be overridden by subclasses for environment-specific binding (e.g. web environment, etc). from Should be overridden by subclasses for environment-specific binding (e.g. web environment, etc). to and overridden by subclasses for environment-specific binding (e.g. standalone application)."]}, {"root": "INS TextElement:  the  to TagElement: @param at 1", "operations": ["INS TextElement:  the  to TagElement: @param at 1"]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  Subject to TagElement: @code at 0"]}, {"root": "UPDATE from  the <tt>Subject</tt> instance created after authentication to be bound to the application to  instance created after authentication to be bound to the application", "operations": ["UPD TextElement:  the <tt>Subject</tt> instance created after authentication to be bound to the application from  the <tt>Subject</tt> instance created after authentication to be bound to the application to  instance created after authentication to be bound to the application"]}, {"root": "INS TextElement: First authenticates the  to TagElement at 0", "operations": ["INS TextElement: First authenticates the  to TagElement at 0"]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TagElement: @code to TagElement at 1", "INS TextElement:  AuthenticationToken to TagElement: @code at 0"]}, {"root": "UPDATE from First authenticates the <tt>AuthenticationToken</tt> argument, and if successful, constructs a to  argument, and if successful, constructs a", "operations": ["UPD TextElement: First authenticates the <tt>AuthenticationToken</tt> argument, and if successful, constructs a from First authenticates the <tt>AuthenticationToken</tt> argument, and if successful, constructs a to  argument, and if successful, constructs a"]}, {"root": "INS TagElement: @code to TagElement at 3", "operations": ["INS TextElement:  Subject to TagElement: @code at 0", "INS TagElement: @code to TagElement at 3"]}, {"root": "UPDATE from <tt>Subject</tt> instance representing the authenticated account's identity. to  instance representing the authenticated account's identity.", "operations": ["UPD TextElement: <tt>Subject</tt> instance representing the authenticated account's identity. from <tt>Subject</tt> instance representing the authenticated account's identity. to  instance representing the authenticated account's identity."]}, {"root": "UPDATE from <p>Once constructed, the <tt>Subject</tt> instance is then  to Once constructed, the ", "operations": ["UPD TextElement: <p>Once constructed, the <tt>Subject</tt> instance is then  from <p>Once constructed, the <tt>Subject</tt> instance is then  to Once constructed, the "]}, {"root": "INS TagElement: @code to TagElement at 7", "operations": ["INS TextElement:  Subject to TagElement: @code at 0", "INS TagElement: @code to TagElement at 7"]}, {"root": "INS TextElement:  instance is then  to TagElement at 8", "operations": ["INS TextElement:  instance is then  to TagElement at 8"]}, {"root": "UPDATE from  if there is a problem authenticating the specified <tt>token</tt>. to  if there is a problem authenticating the specified ", "operations": ["UPD TextElement:  if there is a problem authenticating the specified <tt>token</tt>. from  if there is a problem authenticating the specified <tt>token</tt>. to  if there is a problem authenticating the specified "]}, {"root": "INS TagElement: @code to TagElement: @throws at 2", "operations": ["INS TagElement: @code to TagElement: @throws at 2", "INS TextElement:  token to TagElement: @code at 0"]}, {"root": "INS TextElement: . to TagElement: @throws at 3", "operations": ["INS TextElement: . to TagElement: @throws at 3"]}, {"root": "MOVE from SimpleType: Map", "operations": ["MOV SimpleName: String to SimpleType: Map at 0"]}, {"root": "UPDATE from IllegalStateException to Serializable", "operations": ["UPD SimpleName: IllegalStateException from IllegalStateException to Serializable"]}, {"root": "MOVE from SimpleType: Serializable", "operations": ["MOV SimpleName: IllegalStateException to SimpleType: Serializable at 0"]}, {"root": "INS CastExpression to ReturnStatement at 0", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SimpleType: Serializable to CastExpression at 0", "INS QualifiedName: SubjectFactory.SESSION_ID to MethodInvocation at 2", "INS CastExpression to ReturnStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS SimpleName: InvalidSessionException to TagElement: @throws at 0", "operations": ["INS SimpleName: InvalidSessionException to TagElement: @throws at 0"]}, {"root": "UPDATE from if the session identified by <tt>sessionId</tt> has to  if the session identified by ", "operations": ["UPD TextElement: if the session identified by <tt>sessionId</tt> has from if the session identified by <tt>sessionId</tt> has to  if the session identified by "]}, {"root": "INS TagElement: @code to TagElement: @throws at 3", "operations": ["INS TextElement:  sessionId to TagElement: @code at 0", "INS TagElement: @code to TagElement: @throws at 3"]}, {"root": "UPDATE from been stopped, expired, or doesn't exist. to  has been stopped, expired, or", "operations": ["UPD TextElement: been stopped, expired, or doesn't exist. from been stopped, expired, or doesn't exist. to  has been stopped, expired, or"]}, {"root": "INS TextElement: doesn't exist. to TagElement: @throws at 5", "operations": ["INS TextElement: doesn't exist. to TagElement: @throws at 5"]}, {"root": "INS SimpleName: AuthorizationException to TagElement: @throws at 0", "operations": ["INS SimpleName: AuthorizationException to TagElement: @throws at 0"]}, {"root": "UPDATE from if the executor of this method is not allowed to acquire the owning  to   if the executor of this method is not allowed to acquire the owning", "operations": ["UPD TextElement: if the executor of this method is not allowed to acquire the owning  from if the executor of this method is not allowed to acquire the owning  to   if the executor of this method is not allowed to acquire the owning"]}, {"root": "UPDATE from .  The reason to .  The reason for the exception is implementation-specific and", "operations": ["UPD TextElement: .  The reason from .  The reason to .  The reason for the exception is implementation-specific and"]}, {"root": "UPDATE from for the exception is implementation-specific and could be for any number of reasons.  A common to could be for any number of reasons.  A common reason in many systems would be", "operations": ["UPD TextElement: for the exception is implementation-specific and could be for any number of reasons.  A common from for the exception is implementation-specific and could be for any number of reasons.  A common to could be for any number of reasons.  A common reason in many systems would be"]}, {"root": "UPDATE from reason in many systems would be if one host tried to acquire a  to if one host tried to acquire a ", "operations": ["UPD TextElement: reason in many systems would be if one host tried to acquire a  from reason in many systems would be if one host tried to acquire a  to if one host tried to acquire a "]}, {"root": "UPDATE from  based on a to  based on a ", "operations": ["UPD TextElement:  based on a from  based on a to  based on a "]}, {"root": "INS TextElement:  that to TagElement: @throws at 10", "operations": ["INS TextElement:  that to TagElement: @throws at 10"]}, {"root": "UPDATE from  that originated on an entirely different host (although it is not a Shiro to originated on an entirely different host (although it is not a Shiro requirement", "operations": ["UPD TextElement:  that originated on an entirely different host (although it is not a Shiro from  that originated on an entirely different host (although it is not a Shiro to originated on an entirely different host (although it is not a Shiro requirement"]}, {"root": "UPDATE from requirement this scenario is disallowed - its just an example that <em>may</em> throw an Exception in to this scenario is disallowed - its just an example that <em>may</em> throw an", "operations": ["UPD TextElement: requirement this scenario is disallowed - its just an example that <em>may</em> throw an Exception in from requirement this scenario is disallowed - its just an example that <em>may</em> throw an Exception in to this scenario is disallowed - its just an example that <em>may</em> throw an"]}, {"root": "UPDATE from some systems). to Exception in some systems).", "operations": ["UPD TextElement: some systems). from some systems). to Exception in some systems)."]}, {"root": "UPDATE from isValid to checkValid", "operations": ["UPD SimpleName: isValid from isValid to checkValid"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isValid to MethodInvocation at 0", "MOV SimpleName: id to MethodInvocation at 1"]}, {"root": "UPDATE from msg to session", "operations": ["UPD SimpleName: msg from msg to session"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: getCurrentSession to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSubjectFactory to MethodInvocation at 0"]}, {"root": "MOVE from SimpleType: Map", "operations": ["MOV SimpleName: Subject to SimpleType: Map at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: context to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: createSubject to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: log to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: next to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: principals to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"Logging out subject with primary id {}\" to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: iterator to MethodInvocation at 1"]}, {"root": "UPDATE from SubjectFactory.SESSION to SubjectFactory.SESSION_ID", "operations": ["UPD QualifiedName: SubjectFactory.SESSION from SubjectFactory.SESSION to SubjectFactory.SESSION_ID"]}, {"root": "UPDATE from session to sessionId", "operations": ["UPD SimpleName: session from session to sessionId"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: log to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: isTraceEnabled to MethodInvocation at 1"]}, {"root": "UPDATE from getClass to getSessionId", "operations": ["UPD SimpleName: getClass from getClass to getSessionId"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getClass to MethodInvocation at 0"]}, {"root": "UPDATE from createSubject to subjectContext", "operations": ["UPD SimpleName: createSubject from createSubject to subjectContext"]}, {"root": "UPDATE from context to get", "operations": ["UPD SimpleName: context from context to get"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: InvalidSessionException to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from debug to trace", "operations": ["UPD SimpleName: debug from debug to trace"]}, {"root": "UPDATE from \".createSubject( AuthenticationInfo info ) method to return \" to \"Context referenced sessionId is invalid.  Ignoring and creating an anonymous \"", "operations": ["UPD StringLiteral: \".createSubject( AuthenticationInfo info ) method to return \" from \".createSubject( AuthenticationInfo info ) method to return \" to \"Context referenced sessionId is invalid.  Ignoring and creating an anonymous \""]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV StringLiteral: \"a non-null Subject instance\" to InfixExpression: + at 1", "MOV StringLiteral: \".createSubject( AuthenticationInfo info ) method to return \" to InfixExpression: + at 0"]}, {"root": "UPDATE from \"a non-null Subject instance\" to \"(session-less) Subject instance.\"", "operations": ["UPD StringLiteral: \"a non-null Subject instance\" from \"a non-null Subject instance\" to \"(session-less) Subject instance.\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL ThrowStatement", "DEL PrefixExpression: !", "DEL IfStatement", "DEL SimpleName: id", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: msg"]}, {"root": "DEL SimpleName: createSubject", "operations": ["DEL SimpleName: createSubject"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: principals"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: createSubject", "DEL SimpleName: principals", "DEL SimpleName: session", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"] does not correspond to a valid Session  It either \"", "DEL StringLiteral: \"does not exist or the corresponding session has been stopped or expired.\"", "DEL StringLiteral: \"Specified id [\"", "DEL InfixExpression: +", "DEL SimpleName: id"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: sf", "DEL SimpleName: getSubjectFactory", "DEL SimpleName: SubjectFactory", "DEL SimpleType: SubjectFactory"]}, {"root": "DEL SimpleName: sf", "operations": ["DEL SimpleName: sf"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: createSubject", "operations": ["DEL SimpleName: createSubject"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleType: Subject", "DEL Block", "DEL SimpleName: msg", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL StringLiteral: \"Programming error - please verify that you have overridden the \"", "DEL IfStatement", "DEL Block", "DEL SimpleType: String", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: IllegalStateException", "DEL ThrowStatement", "DEL SimpleName: getName", "DEL InfixExpression: +", "DEL SimpleName: subject", "DEL PrimitiveType: void", "DEL SimpleName: msg"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: assertCreation", "DEL SimpleName: subject", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: getSubject", "operations": ["DEL SimpleName: getSubject"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL QualifiedName: org.apache.shiro.session.InvalidSessionException", "operations": ["DEL QualifiedName: org.apache.shiro.session.InvalidSessionException"]}, {"root": "DEL QualifiedName: org.apache.shiro.authz.AuthorizationException", "operations": ["DEL QualifiedName: org.apache.shiro.authz.AuthorizationException"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: SubjectFactory", "DEL VariableDeclarationStatement", "DEL SimpleName: getSubjectFactory", "DEL VariableDeclarationFragment", "DEL SimpleName: sf", "DEL SimpleName: SubjectFactory", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: sf", "operations": ["DEL SimpleName: sf"]}]}}, {"DefaultSecurityManager_diff": {"operations": ["Insert MethodDeclaration(538) into TypeDeclaration: class(2013) at 29", "Insert MethodDeclaration(657) into TypeDeclaration: class(2013) at 31", "Insert MethodDeclaration(1336) into TypeDeclaration: class(2013) at 42", "Insert MethodDeclaration(1477) into TypeDeclaration: class(2013) at 43", "Insert MethodDeclaration(1494) into TypeDeclaration: class(2013) at 44", "Move Modifier: protected(505) into MethodDeclaration(538) at 0", "Move SimpleType: Session(507) into MethodDeclaration(538) at 1", "Move SimpleName: getSession(508) into MethodDeclaration(538) at 2", "Move SingleVariableDeclaration(512) into MethodDeclaration(538) at 3", "Insert Block(537) into MethodDeclaration(538) at 4", "Insert SimpleType: Session(541) into MethodDeclaration(615) at 1", "Insert SimpleName: getCurrentSession(542) into MethodDeclaration(615) at 2", "Insert Modifier: protected(616) into MethodDeclaration(657) at 0", "Move SimpleType: Subject(545) into MethodDeclaration(657) at 1", "Insert SimpleName: createSubject(619) into MethodDeclaration(657) at 2", "Insert Block(656) into MethodDeclaration(657) at 3", "Insert Javadoc(696) into MethodDeclaration(760) at 0", "Insert Javadoc(1312) into MethodDeclaration(1336) at 0", "Update Modifier: private(817) to public", "Move Modifier: private(817) into MethodDeclaration(1336) at 1", "Move SimpleType: Subject(1226) into MethodDeclaration(1336) at 2", "Update SimpleName: assertCreation(819) to getSubject", "Move SimpleName: assertCreation(819) into MethodDeclaration(1336) at 3", "Move SingleVariableDeclaration(1231) into MethodDeclaration(1336) at 4", "Insert Block(1335) into MethodDeclaration(1336) at 5", "Insert Javadoc(1387) into MethodDeclaration(1477) at 0", "Insert SingleMemberAnnotation(1391) into MethodDeclaration(1477) at 1", "Insert Modifier: protected(1392) into MethodDeclaration(1477) at 2", "Update SimpleType: IllegalStateException(825) to Map", "Move SimpleType: IllegalStateException(825) into MethodDeclaration(1477) at 3", "Insert SimpleName: resolveSessionIfNecessary(1395) into MethodDeclaration(1477) at 4", "Insert SingleVariableDeclaration(1399) into MethodDeclaration(1477) at 5", "Insert Block(1476) into MethodDeclaration(1477) at 6", "Insert Javadoc(1485) into MethodDeclaration(1494) at 0", "Insert Modifier: protected(1486) into MethodDeclaration(1494) at 1", "Insert PrimitiveType: void(1487) into MethodDeclaration(1494) at 2", "Insert SimpleName: onInvalidSessionId(1488) into MethodDeclaration(1494) at 3", "Insert SingleVariableDeclaration(1492) into MethodDeclaration(1494) at 4", "Insert Block(1493) into MethodDeclaration(1494) at 5", "Update Modifier: public(1224) to protected", "Insert SimpleType: Serializable(1549) into MethodDeclaration(1564) at 2", "Insert SimpleName: getSessionId(1550) into MethodDeclaration(1564) at 3", "Insert SingleVariableDeclaration(1554) into MethodDeclaration(1564) at 4", "Update TextElement: <p>The Shiro framework's default concrete implementation of the (36) to The Shiro framework's default concrete implementation of the ", "Update TextElement: implementation.</p>(55) to implementation.", "Update TextElement: <p>To greatly reduce and simplify configuration, this implementation (and its superclasses) will(57) to To greatly reduce and simplify configuration, this implementation (and its superclasses) will", "Insert TextElement: s.  Because (62) into TagElement(110) at 18", "Insert TagElement: @code(64) into TagElement(110) at 19", "Update TextElement: s.  Because <code>Realm</code> implementations usually interact with an application's data model,(62) to  implementations usually interact with an application's data model,", "Insert TagElement: @code(68) into TagElement(110) at 22", "Update TextElement: <tt>Realm</tt> implementation that 'knows' about your application's data/security model(64) to  implementation that 'knows' about your application's data/security model", "Update TextElement: will have suitable defaults for most enterprise applications.</p>(70) to will have suitable defaults for most enterprise applications.", "Update TextElement: <p><b>RememberMe notice</b>: This class supports the ability to configure a(72) to <b>RememberMe notice</b>: This class supports the ability to configure a", "Insert TextElement: for (82) into TagElement(110) at 31", "Insert TagElement: @code(84) into TagElement(110) at 32", "Update TextElement: for <tt>RememberMe</tt> identity services for login/logout, BUT, a default instance <em>will not</em> be created(77) to  identity services for login/logout, BUT, a default instance <em>will not</em> be created", "Update TextElement: <p>Because RememberMe services are inherently client tier-specific and(80) to Because RememberMe services are inherently client tier-specific and", "Insert TextElement: therefore aplication-dependent, if you want (89) into TagElement(110) at 37", "Insert TagElement: @code(91) into TagElement(110) at 38", "Update TextElement: therefore aplication-dependent, if you want <tt>RememberMe</tt> services enabled, you will have to specify an(81) to  services enabled, you will have to specify an", "Insert TextElement: <em>does</em> support (106) into TagElement(110) at 46", "Insert TagElement: @code(108) into TagElement(110) at 47", "Update TextElement: <em>does</em> support <tt>RememberMe</tt> services by default at startup.(95) to  services by default at startup.", "Insert ExpressionStatement(530) into Block(537) at 0", "Move ReturnStatement(540) into Block(537) at 1", "Insert SimpleName: Session(540) into SimpleType: Session(541) at 0", "Move VariableDeclarationStatement(526) into Block(656) at 0", "Insert VariableDeclarationStatement(632) into Block(656) at 1", "Insert IfStatement(650) into Block(656) at 2", "Insert ReturnStatement(655) into Block(656) at 3", "Insert TagElement(679) into Javadoc(696) at 0", "Insert TagElement: @param(685) into Javadoc(696) at 1", "Insert TagElement: @param(691) into Javadoc(696) at 2", "Insert TagElement: @return(693) into Javadoc(696) at 3", "Insert TagElement: @since(695) into Javadoc(696) at 4", "Insert TagElement(1294) into Javadoc(1312) at 0", "Insert TagElement: @param(1297) into Javadoc(1312) at 1", "Insert TagElement: @return(1302) into Javadoc(1312) at 2", "Insert TagElement: @see(1309) into Javadoc(1312) at 3", "Insert TagElement: @since(1311) into Javadoc(1312) at 4", "Insert VariableDeclarationStatement(1328) into Block(1335) at 0", "Insert ReturnStatement(1334) into Block(1335) at 1", "Insert TagElement(1376) into Javadoc(1387) at 0", "Insert TagElement: @param(1379) into Javadoc(1387) at 1", "Insert TagElement: @return(1384) into Javadoc(1387) at 2", "Insert TagElement: @since(1386) into Javadoc(1387) at 3", "Insert SimpleName: SuppressWarnings(1388) into SingleMemberAnnotation(1391) at 0", "Insert ArrayInitializer(1390) into SingleMemberAnnotation(1391) at 1", "Update SimpleName: IllegalStateException(824) to Map", "Insert SimpleType: Map(1397) into SingleVariableDeclaration(1399) at 0", "Insert SimpleName: context(1398) into SingleVariableDeclaration(1399) at 1", "Insert IfStatement(1412) into Block(1476) at 0", "Insert ExpressionStatement(1417) into Block(1476) at 1", "Insert VariableDeclarationStatement(1426) into Block(1476) at 2", "Insert VariableDeclarationStatement(1434) into Block(1476) at 3", "Insert IfStatement(1473) into Block(1476) at 4", "Insert ReturnStatement(1475) into Block(1476) at 5", "Insert TagElement(1479) into Javadoc(1485) at 0", "Insert TagElement: @param(1482) into Javadoc(1485) at 1", "Move TagElement: @since(1222) into Javadoc(1485) at 2", "Insert SimpleType: Serializable(1490) into SingleVariableDeclaration(1492) at 0", "Insert SimpleName: sessionId(1491) into SingleVariableDeclaration(1492) at 1", "Insert TagElement(1515) into Javadoc(1546) at 0", "Insert TagElement: @param(1524) into Javadoc(1546) at 1", "Insert TagElement: @return(1532) into Javadoc(1546) at 2", "Insert TagElement: @see(1538) into Javadoc(1546) at 3", "Insert TagElement: @see(1545) into Javadoc(1546) at 4", "Insert SimpleName: Serializable(1548) into SimpleType: Serializable(1549) at 0", "Insert SimpleType: Map(1552) into SingleVariableDeclaration(1554) at 0", "Insert SimpleName: subjectContext(1553) into SingleVariableDeclaration(1554) at 1", "Insert IfStatement(1656) into Block(1722) at 2", "Insert TextElement:  Realm(63) into TagElement: @code(64) at 0", "Insert TextElement:  Realm(67) into TagElement: @code(68) at 0", "Insert TextElement:  RememberMe(83) into TagElement: @code(84) at 0", "Insert TextElement:  RememberMe(90) into TagElement: @code(91) at 0", "Insert TextElement:  RememberMe(107) into TagElement: @code(108) at 0", "Insert MethodInvocation(529) into ExpressionStatement(530) at 0", "Insert SimpleName: session(612) into ReturnStatement(613) at 0", "Update SimpleType: String(518) to Session", "Move SimpleType: PrincipalCollection(617) into VariableDeclarationStatement(632) at 0", "Insert VariableDeclarationFragment(631) into VariableDeclarationStatement(632) at 1", "Insert InfixExpression: !=(635) into IfStatement(650) at 0", "Insert Block(649) into IfStatement(650) at 1", "Insert MethodInvocation(654) into ReturnStatement(655) at 0", "Insert TextElement: Returns a (658) into TagElement(679) at 0", "Insert TagElement: @link(660) into TagElement(679) at 1", "Insert TextElement:  instance that reflects the specified identity (principals), backed by the given(661) into TagElement(679) at 2", "Insert TagElement: @link(663) into TagElement(679) at 3", "Insert TextElement:  instance.  Either argument can be null.(664) into TagElement(679) at 4", "Insert TextElement: <p/>(665) into TagElement(679) at 5", "Insert TextElement: This method is a convenience that assembles either argument into a context (666) into TagElement(679) at 6", "Insert TagElement: @link(669) into TagElement(679) at 7", "Insert TextElement:  (if they are(670) into TagElement(679) at 8", "Insert TextElement: not null) and returns (671) into TagElement(679) at 9", "Insert TagElement: @link(677) into TagElement(679) at 10", "Insert TextElement:  using the Map as the parameter.(678) into TagElement(679) at 11", "Insert SimpleName: principals(680) into TagElement: @param(685) at 0", "Insert TextElement:  the identity that the constructed (681) into TagElement: @param(685) at 1", "Insert TagElement: @code(683) into TagElement: @param(685) at 2", "Insert TextElement:  instance should have.(684) into TagElement: @param(685) at 3", "Insert SimpleName: session(686) into TagElement: @param(691) at 0", "Insert TextElement:     the session to be associated with the constructed (687) into TagElement: @param(691) at 1", "Insert TagElement: @code(689) into TagElement: @param(691) at 2", "Insert TextElement:  instance.(690) into TagElement: @param(691) at 3", "Insert TextElement:  The Subject instance reflecting the specified identity (principals) and session.(692) into TagElement: @return(693) at 0", "Insert TextElement:  1.0(694) into TagElement: @since(695) at 0", "Insert TextElement: Creates a (761) into TagElement(765) at 0", "Insert TagElement: @code(763) into TagElement(765) at 1", "Update TextElement: Creates a <tt>Subject</tt> instance for the user represented by the given method arguments.(702) to  instance for the user represented by the given method arguments.", "Insert TextElement:  the (767) into TagElement: @param(771) at 1", "Insert TagElement: @code(769) into TagElement: @param(771) at 2", "Update TextElement:  the <tt>AuthenticationToken</tt> submitted for the successful authentication.(705) to  submitted for the successful authentication.", "Insert TextElement:   the (773) into TagElement: @param(777) at 1", "Insert TagElement: @code(775) into TagElement: @param(777) at 2", "Update TextElement:   the <tt>AuthenticationInfo</tt> of a newly authenticated user.(708) to  of a newly authenticated user.", "Insert TextElement:  the (778) into TagElement: @return(783) at 0", "Insert TagElement: @code(780) into TagElement: @return(783) at 1", "Update TextElement:  the <tt>Subject</tt> instance that represents the user and session data for the newly(710) to  instance that represents the user and session data for the newly", "Insert TextElement: Binds a (858) into TagElement(867) at 0", "Insert TagElement: @code(860) into TagElement(867) at 1", "Update TextElement: Binds a <tt>Subject</tt> instance created after authentication to the application for later use.(789) to  instance created after authentication to the application for later use.", "Update TextElement: <p>The default implementation merely binds the argument to the thread local via the (791) to The default implementation merely binds the argument to the thread local via the ", "Update TextElement: Should be overridden by subclasses for environment-specific binding (e.g. web environment, etc).(795) to and overridden by subclasses for environment-specific binding (e.g. standalone application).", "Insert TextElement:  the (869) into TagElement: @param(874) at 1", "Insert TagElement: @code(871) into TagElement: @param(874) at 2", "Update TextElement:  the <tt>Subject</tt> instance created after authentication to be bound to the application(798) to  instance created after authentication to be bound to the application", "Insert TextElement: First authenticates the (1109) into TagElement(1127) at 0", "Insert TagElement: @code(1111) into TagElement(1127) at 1", "Update TextElement: First authenticates the <tt>AuthenticationToken</tt> argument, and if successful, constructs a(1069) to  argument, and if successful, constructs a", "Insert TagElement: @code(1114) into TagElement(1127) at 3", "Update TextElement: <tt>Subject</tt> instance representing the authenticated account's identity.(1070) to  instance representing the authenticated account's identity.", "Update TextElement: <p>Once constructed, the <tt>Subject</tt> instance is then (1072) to Once constructed, the ", "Insert TagElement: @code(1119) into TagElement(1127) at 7", "Insert TextElement:  instance is then (1120) into TagElement(1127) at 8", "Update TextElement:  if there is a problem authenticating the specified <tt>token</tt>.(1086) to  if there is a problem authenticating the specified ", "Insert TagElement: @code(1136) into TagElement: @throws(1138) at 2", "Insert TextElement: .(1137) into TagElement: @throws(1138) at 3", "Insert TextElement: This implementation attempts to resolve any session ID that may exist in the context argument by first(1268) into TagElement(1294) at 0", "Insert TextElement: passing it to the (1269) into TagElement(1294) at 1", "Insert TagElement: @link(1276) into TagElement(1294) at 2", "Insert TextElement:  method.  The(1277) into TagElement(1294) at 3", "Insert TextElement: return value from that call is then used to create the Subject instance by calling(1278) into TagElement(1294) at 4", "Insert TextElement: <code>(1279) into TagElement(1294) at 5", "Insert TagElement: @link(1283) into TagElement(1294) at 6", "Insert TextElement: .(1284) into TagElement(1294) at 7", "Insert TagElement: @link(1292) into TagElement(1294) at 8", "Insert TextElement: (returnValue);</code>(1293) into TagElement(1294) at 9", "Insert SimpleName: context(1295) into TagElement: @param(1297) at 0", "Insert TextElement:  any data needed to direct how the Subject should be constructed.(1296) into TagElement: @param(1297) at 1", "Insert TextElement:  the (1298) into TagElement: @return(1302) at 0", "Insert TagElement: @code(1300) into TagElement: @return(1302) at 1", "Insert TextElement:  instance reflecting the specified initialization data.(1301) into TagElement: @return(1302) at 2", "Insert MethodRef(1308) into TagElement: @see(1309) at 0", "Insert TextElement:  1.0(1310) into TagElement: @since(1311) at 0", "Insert SimpleType: Map(1322) into VariableDeclarationStatement(1328) at 0", "Insert VariableDeclarationFragment(1327) into VariableDeclarationStatement(1328) at 1", "Insert MethodInvocation(1333) into ReturnStatement(1334) at 0", "Insert TextElement: Attempts to resolve any session id in the context to its corresponding (1337) into TagElement(1376) at 0", "Insert TagElement: @link(1339) into TagElement(1376) at 1", "Insert TextElement:  and returns a(1340) into TagElement(1376) at 2", "Insert TextElement: context that represents this resolved (1341) into TagElement(1376) at 3", "Insert TagElement: @code(1343) into TagElement(1376) at 4", "Insert TextElement:  to ensure it may be referenced if necessary by the(1344) into TagElement(1376) at 5", "Insert TextElement: invoked (1345) into TagElement(1376) at 6", "Insert TagElement: @link(1347) into TagElement(1376) at 7", "Insert TextElement:  that performs actual (1348) into TagElement(1376) at 8", "Insert TagElement: @link(1350) into TagElement(1376) at 9", "Insert TextElement:  construction.(1351) into TagElement(1376) at 10", "Insert TextElement: <p/>(1352) into TagElement(1376) at 11", "Insert TextElement: The session id, if it exists in the context map, should be available as a value under the(1353) into TagElement(1376) at 12", "Insert TextElement: <code>(1354) into TagElement(1376) at 13", "Insert TagElement: @link(1357) into TagElement(1376) at 14", "Insert TextElement: .(1358) into TagElement(1376) at 15", "Insert TagElement: @link(1363) into TagElement(1376) at 16", "Insert TextElement: </code> key constant.(1364) into TagElement(1376) at 17", "Insert TextElement: If a session is resolved, a copy of the original context Map is made to ensure the method argument is not(1365) into TagElement(1376) at 18", "Insert TextElement: changed, the resolved session is placed into the copy and the copy is returned.(1366) into TagElement(1376) at 19", "Insert TextElement: <p/>(1367) into TagElement(1376) at 20", "Insert TextElement: If there is a (1368) into TagElement(1376) at 21", "Insert TagElement: @code(1370) into TagElement(1376) at 22", "Insert TextElement:  already in the context because that is what the caller wants to be used for(1371) into TagElement(1376) at 23", "Insert TagElement: @code(1373) into TagElement(1376) at 24", "Insert TextElement:  construction, or if no session is resolved, this method effectively does nothing and immediately(1374) into TagElement(1376) at 25", "Insert TextElement: returns the Map method argument without change.(1375) into TagElement(1376) at 26", "Insert SimpleName: context(1377) into TagElement: @param(1379) at 0", "Insert TextElement:  the subject context data that may contain a session id that should be converted to a Session instance.(1378) into TagElement: @param(1379) at 1", "Insert TextElement:  The context Map to use to pass to a (1380) into TagElement: @return(1384) at 0", "Insert TagElement: @link(1382) into TagElement: @return(1384) at 1", "Insert TextElement:  for subject creation.(1383) into TagElement: @return(1384) at 2", "Insert TextElement:  1.0(1385) into TagElement: @since(1386) at 0", "Insert StringLiteral: \"unchecked\"(1389) into ArrayInitializer(1390) at 0", "Update SimpleName: String(829) to Map", "Move SimpleName: String(829) into SimpleType: Map(1397) at 0", "Insert MethodInvocation(1403) into IfStatement(1412) at 0", "Insert Block(1411) into IfStatement(1412) at 1", "Insert MethodInvocation(1416) into ExpressionStatement(1417) at 0", "Insert SimpleType: Map(1419) into VariableDeclarationStatement(1426) at 0", "Insert VariableDeclarationFragment(1425) into VariableDeclarationStatement(1426) at 1", "Insert SimpleType: Serializable(1428) into VariableDeclarationStatement(1434) at 0", "Insert VariableDeclarationFragment(1433) into VariableDeclarationStatement(1434) at 1", "Insert InfixExpression: !=(1437) into IfStatement(1473) at 0", "Insert Block(1472) into IfStatement(1473) at 1", "Insert SimpleName: copy(1474) into ReturnStatement(1475) at 0", "Insert TextElement: Allows subclasses to react to the fact that a provided session id was invalid.(1478) into TagElement(1479) at 0", "Insert SimpleName: sessionId(1480) into TagElement: @param(1482) at 0", "Insert TextElement:  the session id that was discovered to be invalid (no session, expired, etc).(1481) into TagElement: @param(1482) at 1", "Update SimpleName: IllegalStateException(842) to Serializable", "Move SimpleName: IllegalStateException(842) into SimpleType: Serializable(1490) at 0", "Insert TextElement: Utility method to retrieve the session id from the given subject context Map which will be used to resolve(1495) into TagElement(1515) at 0", "Insert TextElement: to a (1496) into TagElement(1515) at 1", "Insert TagElement: @link(1498) into TagElement(1515) at 2", "Insert TextElement:  or (1499) into TagElement(1515) at 3", "Insert TagElement: @code(1501) into TagElement(1515) at 4", "Insert TextElement:  if there is no session id in the map.  If the session id exists, it is(1502) into TagElement(1515) at 5", "Insert TextElement: expected to be available in the map under the(1503) into TagElement(1515) at 6", "Insert TextElement: <code>(1504) into TagElement(1515) at 7", "Insert TagElement: @link(1507) into TagElement(1515) at 8", "Insert TextElement: .(1508) into TagElement(1515) at 9", "Insert TagElement: @link(1513) into TagElement(1515) at 10", "Insert TextElement: </code> constant.(1514) into TagElement(1515) at 11", "Insert SimpleName: subjectContext(1516) into TagElement: @param(1524) at 0", "Insert TextElement:  the context map with data that will be used to construct a (1517) into TagElement: @param(1524) at 1", "Insert TagElement: @link(1519) into TagElement: @param(1524) at 2", "Insert TextElement:  instance via(1520) into TagElement: @param(1524) at 3", "Insert TextElement: a (1521) into TagElement: @param(1524) at 4", "Insert TagElement: @link(1523) into TagElement: @param(1524) at 5", "Insert TextElement:  a session id to resolve to a (1525) into TagElement: @return(1532) at 0", "Insert TagElement: @link(1527) into TagElement: @return(1532) at 1", "Insert TextElement:  instance or (1528) into TagElement: @return(1532) at 2", "Insert TagElement: @code(1530) into TagElement: @return(1532) at 3", "Insert TextElement:  if a session id could not be found.(1531) into TagElement: @return(1532) at 4", "Insert MethodRef(1537) into TagElement: @see(1538) at 0", "Insert MethodRef(1544) into TagElement: @see(1545) at 0", "Insert SimpleName: Map(1551) into SimpleType: Map(1552) at 0", "Insert CastExpression(1561) into ReturnStatement(1562) at 0", "Move InfixExpression: ==(828) into IfStatement(1656) at 0", "Insert Block(1655) into IfStatement(1656) at 1", "Insert SimpleName: InvalidSessionException(1941) into TagElement: @throws(1947) at 0", "Update TextElement: if the session identified by <tt>sessionId</tt> has(1595) to  if the session identified by ", "Insert TagElement: @code(1944) into TagElement: @throws(1947) at 2", "Update TextElement: been stopped, expired, or doesn't exist.(1596) to  has been stopped, expired, or", "Insert TextElement: doesn't exist.(1946) into TagElement: @throws(1947) at 4", "Insert SimpleName: AuthorizationException(1948) into TagElement: @throws(1964) at 0", "Update TextElement: if the executor of this method is not allowed to acquire the owning (1599) to   if the executor of this method is not allowed to acquire the owning", "Update TextElement: .  The reason(1602) to .  The reason for the exception is implementation-specific and", "Update TextElement: for the exception is implementation-specific and could be for any number of reasons.  A common(1603) to could be for any number of reasons.  A common reason in many systems would be", "Update TextElement: reason in many systems would be if one host tried to acquire a (1604) to if one host tried to acquire a ", "Update TextElement:  based on a(1607) to  based on a ", "Insert TextElement:  that(1960) into TagElement: @throws(1964) at 9", "Update TextElement:  that originated on an entirely different host (although it is not a Shiro(1610) to originated on an entirely different host (although it is not a Shiro requirement", "Update TextElement: requirement this scenario is disallowed - its just an example that <em>may</em> throw an Exception in(1611) to this scenario is disallowed - its just an example that <em>may</em> throw an", "Update TextElement: some systems).(1612) to Exception in some systems).", "Update SimpleName: isValid(513) to checkValid", "Move SimpleName: isValid(513) into MethodInvocation(529) at 0", "Move SimpleName: id(514) into MethodInvocation(529) at 1", "Update SimpleName: String(517) to Session", "Update SimpleName: msg(519) to session", "Insert MethodInvocation(624) into VariableDeclarationFragment(625) at 1", "Insert SimpleName: remembered(629) into VariableDeclarationFragment(631) at 0", "Insert NullLiteral(630) into VariableDeclarationFragment(631) at 1", "Insert SimpleName: session(633) into InfixExpression: !=(635) at 0", "Insert NullLiteral(634) into InfixExpression: !=(635) at 1", "Insert IfStatement(648) into Block(649) at 0", "Insert SimpleName: createSubject(651) into MethodInvocation(654) at 0", "Insert SimpleName: remembered(652) into MethodInvocation(654) at 1", "Insert SimpleName: session(653) into MethodInvocation(654) at 2", "Insert SimpleName: Subject(659) into TagElement: @link(660) at 0", "Insert SimpleName: Session(662) into TagElement: @link(663) at 0", "Insert SimpleName: Map(667) into TagElement: @link(669) at 0", "Insert TextElement:  Map(668) into TagElement: @link(669) at 1", "Insert MethodRef(676) into TagElement: @link(677) at 0", "Insert TextElement:  Subject(682) into TagElement: @code(683) at 0", "Insert TextElement:  Subject(688) into TagElement: @code(689) at 0", "Update SimpleName: createSubject(696) to getSubject", "Insert TextElement:  Subject(762) into TagElement: @code(763) at 0", "Insert TextElement:  AuthenticationToken(768) into TagElement: @code(769) at 0", "Insert TextElement:  AuthenticationInfo(774) into TagElement: @code(775) at 0", "Insert TextElement:  Subject(779) into TagElement: @code(780) at 0", "Update SimpleName: getSubjectFactory(781) to getSubject", "Move SimpleName: getSubjectFactory(781) into MethodInvocation(854) at 0", "Insert TextElement:  Subject(859) into TagElement: @code(860) at 0", "Insert TextElement:  Subject(870) into TagElement: @code(871) at 0", "Insert TextElement:  AuthenticationToken(1110) into TagElement: @code(1111) at 0", "Insert TextElement:  Subject(1113) into TagElement: @code(1114) at 0", "Insert TextElement:  Subject(1118) into TagElement: @code(1119) at 0", "Insert TextElement:  token(1135) into TagElement: @code(1136) at 0", "Insert MethodRef(1274) into TagElement: @link(1276) at 0", "Insert TextElement:  resolveSessionIfNecessary(1275) into TagElement: @link(1276) at 1", "Insert MethodRef(1281) into TagElement: @link(1283) at 0", "Insert TextElement:  getSubjectFactory()(1282) into TagElement: @link(1283) at 1", "Insert MethodRef(1290) into TagElement: @link(1292) at 0", "Insert TextElement:  createSubject(1291) into TagElement: @link(1292) at 1", "Insert TextElement:  Subject(1299) into TagElement: @code(1300) at 0", "Insert SimpleName: SubjectFactory(1303) into MethodRef(1308) at 0", "Insert SimpleName: createSubject(1304) into MethodRef(1308) at 1", "Insert MethodRefParameter(1307) into MethodRef(1308) at 2", "Update SimpleName: Subject(820) to Map", "Move SimpleName: Subject(820) into SimpleType: Map(1322) at 0", "Insert SimpleName: resolved(1323) into VariableDeclarationFragment(1327) at 0", "Insert MethodInvocation(1326) into VariableDeclarationFragment(1327) at 1", "Move MethodInvocation(1233) into MethodInvocation(1333) at 0", "Insert SimpleName: createSubject(1331) into MethodInvocation(1333) at 1", "Insert SimpleName: resolved(1332) into MethodInvocation(1333) at 2", "Insert SimpleName: Session(1338) into TagElement: @link(1339) at 0", "Insert TextElement:  Session(1342) into TagElement: @code(1343) at 0", "Insert SimpleName: SubjectFactory(1346) into TagElement: @link(1347) at 0", "Insert SimpleName: Subject(1349) into TagElement: @link(1350) at 0", "Insert SimpleName: SubjectFactory(1355) into TagElement: @link(1357) at 0", "Insert TextElement:  SubjectFactory(1356) into TagElement: @link(1357) at 1", "Insert MemberRef(1361) into TagElement: @link(1363) at 0", "Insert TextElement:  SESSION_ID(1362) into TagElement: @link(1363) at 1", "Insert TextElement:  Session(1369) into TagElement: @code(1370) at 0", "Insert TextElement:  Subject(1372) into TagElement: @code(1373) at 0", "Insert SimpleName: SubjectFactory(1381) into TagElement: @link(1382) at 0", "Insert SimpleName: context(1400) into MethodInvocation(1403) at 0", "Insert SimpleName: containsKey(1401) into MethodInvocation(1403) at 1", "Insert QualifiedName: SubjectFactory.SESSION(1402) into MethodInvocation(1403) at 2", "Insert ExpressionStatement(1408) into Block(1411) at 0", "Insert ReturnStatement(1410) into Block(1411) at 1", "Insert SimpleName: log(1413) into MethodInvocation(1416) at 0", "Insert SimpleName: trace(1414) into MethodInvocation(1416) at 1", "Insert StringLiteral: \"No session found in context.  Looking for a session id to resolve in to a session.\"(1415) into MethodInvocation(1416) at 2", "Insert SimpleName: Map(1418) into SimpleType: Map(1419) at 0", "Insert SimpleName: copy(1420) into VariableDeclarationFragment(1425) at 0", "Insert ClassInstanceCreation(1424) into VariableDeclarationFragment(1425) at 1", "Insert SimpleName: Serializable(1427) into SimpleType: Serializable(1428) at 0", "Insert SimpleName: sessionId(1429) into VariableDeclarationFragment(1433) at 0", "Insert MethodInvocation(1432) into VariableDeclarationFragment(1433) at 1", "Insert SimpleName: sessionId(1435) into InfixExpression: !=(1437) at 0", "Insert NullLiteral(1436) into InfixExpression: !=(1437) at 1", "Insert TryStatement(1471) into Block(1472) at 0", "Insert SimpleName: Session(1497) into TagElement: @link(1498) at 0", "Insert TextElement:  null(1500) into TagElement: @code(1501) at 0", "Insert SimpleName: SubjectFactory(1505) into TagElement: @link(1507) at 0", "Insert TextElement:  SubjectFactory(1506) into TagElement: @link(1507) at 1", "Insert MemberRef(1511) into TagElement: @link(1513) at 0", "Insert TextElement:  SESSION_ID(1512) into TagElement: @link(1513) at 1", "Insert SimpleName: Subject(1518) into TagElement: @link(1519) at 0", "Insert SimpleName: SubjectFactory(1522) into TagElement: @link(1523) at 0", "Insert SimpleName: Session(1526) into TagElement: @link(1527) at 0", "Insert TextElement:  null(1529) into TagElement: @code(1530) at 0", "Insert SimpleName: getSubject(1533) into MethodRef(1537) at 0", "Insert MethodRefParameter(1536) into MethodRef(1537) at 1", "Insert SimpleName: SubjectFactory(1539) into MethodRef(1544) at 0", "Insert SimpleName: createSubject(1540) into MethodRef(1544) at 1", "Insert MethodRefParameter(1543) into MethodRef(1544) at 2", "Insert SimpleType: Serializable(1556) into CastExpression(1561) at 0", "Insert MethodInvocation(1560) into CastExpression(1561) at 1", "Insert IfStatement(1609) into Block(1642) at 0", "Insert ReturnStatement(1654) into Block(1655) at 0", "Insert TextElement:  sessionId(1943) into TagElement: @code(1944) at 0", "Update QualifiedName: SubjectFactory.SESSION(1660) to SubjectFactory.SESSION_ID", "Update SimpleName: session(1661) to sessionId", "Update SimpleName: createSubject(1672) to getSubject", "Insert SimpleName: getCurrentSession(623) into MethodInvocation(624) at 0", "Insert InfixExpression: ==(641) into IfStatement(648) at 0", "Insert Block(647) into IfStatement(648) at 1", "Insert SimpleName: getSubject(672) into MethodRef(676) at 0", "Insert MethodRefParameter(675) into MethodRef(676) at 1", "Insert MethodInvocation(956) into IfStatement(979) at 0", "Insert SimpleName: resolveSessionIfNecessary(1270) into MethodRef(1274) at 0", "Insert MethodRefParameter(1273) into MethodRef(1274) at 1", "Insert SimpleName: getSubjectFactory(1280) into MethodRef(1281) at 0", "Insert SimpleName: SubjectFactory(1285) into MethodRef(1290) at 0", "Insert SimpleName: createSubject(1286) into MethodRef(1290) at 1", "Insert MethodRefParameter(1289) into MethodRef(1290) at 2", "Insert SimpleType: java.util.Map(1306) into MethodRefParameter(1307) at 0", "Insert SimpleName: resolveSessionIfNecessary(1324) into MethodInvocation(1326) at 0", "Insert SimpleName: context(1325) into MethodInvocation(1326) at 1", "Insert SimpleName: SubjectFactory(1359) into MemberRef(1361) at 0", "Insert SimpleName: SESSION_ID(1360) into MemberRef(1361) at 1", "Insert MethodInvocation(1407) into ExpressionStatement(1408) at 0", "Insert SimpleName: context(1409) into ReturnStatement(1410) at 0", "Insert SimpleType: HashMap(1422) into ClassInstanceCreation(1424) at 0", "Insert SimpleName: context(1423) into ClassInstanceCreation(1424) at 1", "Update SimpleName: getClass(833) to getSessionId", "Move SimpleName: getClass(833) into MethodInvocation(1432) at 0", "Insert SimpleName: context(1431) into MethodInvocation(1432) at 1", "Insert Block(1452) into TryStatement(1471) at 0", "Insert CatchClause(1470) into TryStatement(1471) at 1", "Insert SimpleName: SubjectFactory(1509) into MemberRef(1511) at 0", "Insert SimpleName: SESSION_ID(1510) into MemberRef(1511) at 1", "Insert SimpleType: java.util.Map(1535) into MethodRefParameter(1536) at 0", "Insert SimpleType: java.util.Map(1542) into MethodRefParameter(1543) at 0", "Insert SimpleName: Serializable(1555) into SimpleType: Serializable(1556) at 0", "Update SimpleName: createSubject(1234) to subjectContext", "Move SimpleName: createSubject(1234) into MethodInvocation(1560) at 0", "Update SimpleName: context(1235) to get", "Move SimpleName: context(1235) into MethodInvocation(1560) at 1", "Insert QualifiedName: SubjectFactory.SESSION_ID(1559) into MethodInvocation(1560) at 2", "Move MethodInvocation(916) into IfStatement(1609) at 0", "Insert Block(1608) into IfStatement(1609) at 1", "Insert MethodInvocation(639) into InfixExpression: ==(641) at 0", "Insert NullLiteral(640) into InfixExpression: ==(641) at 1", "Insert ExpressionStatement(646) into Block(647) at 0", "Insert SimpleType: java.util.Map(674) into MethodRefParameter(675) at 0", "Insert SimpleName: log(954) into MethodInvocation(956) at 0", "Insert SimpleName: isTraceEnabled(955) into MethodInvocation(956) at 1", "Insert SimpleType: java.util.Map(1272) into MethodRefParameter(1273) at 0", "Insert SimpleType: java.util.Map(1288) into MethodRefParameter(1289) at 0", "Insert QualifiedName: java.util.Map(1305) into SimpleType: java.util.Map(1306) at 0", "Insert SimpleName: log(1404) into MethodInvocation(1407) at 0", "Insert SimpleName: debug(1405) into MethodInvocation(1407) at 1", "Insert StringLiteral: \"Context already contains a session.  Returning.\"(1406) into MethodInvocation(1407) at 2", "Insert SimpleName: HashMap(1421) into SimpleType: HashMap(1422) at 0", "Move VariableDeclarationStatement(1638) into Block(1452) at 0", "Insert ExpressionStatement(1451) into Block(1452) at 1", "Insert SingleVariableDeclaration(1456) into CatchClause(1470) at 0", "Insert Block(1469) into CatchClause(1470) at 1", "Insert QualifiedName: java.util.Map(1534) into SimpleType: java.util.Map(1535) at 0", "Insert QualifiedName: java.util.Map(1541) into SimpleType: java.util.Map(1542) at 0", "Insert ExpressionStatement(1607) into Block(1608) at 0", "Insert SimpleName: session(636) into MethodInvocation(639) at 0", "Insert SimpleName: getAttribute(637) into MethodInvocation(639) at 1", "Insert QualifiedName: SessionSubjectBinder.PRINCIPALS_SESSION_KEY(638) into MethodInvocation(639) at 2", "Insert Assignment: =(645) into ExpressionStatement(646) at 0", "Insert QualifiedName: java.util.Map(673) into SimpleType: java.util.Map(674) at 0", "Insert QualifiedName: java.util.Map(1271) into SimpleType: java.util.Map(1272) at 0", "Insert QualifiedName: java.util.Map(1287) into SimpleType: java.util.Map(1288) at 0", "Insert MethodInvocation(1450) into ExpressionStatement(1451) at 0", "Move SimpleType: InvalidSessionException(528) into SingleVariableDeclaration(1456) at 0", "Insert SimpleName: e(1455) into SingleVariableDeclaration(1456) at 1", "Insert ExpressionStatement(1460) into Block(1469) at 0", "Insert ExpressionStatement(1468) into Block(1469) at 1", "Insert MethodInvocation(1606) into ExpressionStatement(1607) at 0", "Insert SimpleName: remembered(642) into Assignment: =(645) at 0", "Move MethodInvocation(620) into Assignment: =(645) at 1", "Update SimpleName: debug(918) to trace", "Insert SimpleName: copy(1446) into MethodInvocation(1450) at 0", "Insert SimpleName: put(1447) into MethodInvocation(1450) at 1", "Insert QualifiedName: SubjectFactory.SESSION(1448) into MethodInvocation(1450) at 2", "Insert SimpleName: session(1449) into MethodInvocation(1450) at 3", "Insert MethodInvocation(1459) into ExpressionStatement(1460) at 0", "Insert MethodInvocation(1467) into ExpressionStatement(1468) at 0", "Insert SimpleName: log(1597) into MethodInvocation(1606) at 0", "Insert SimpleName: debug(1598) into MethodInvocation(1606) at 1", "Insert InfixExpression: +(1605) into MethodInvocation(1606) at 2", "Insert SimpleName: onInvalidSessionId(1457) into MethodInvocation(1459) at 0", "Insert SimpleName: sessionId(1458) into MethodInvocation(1459) at 1", "Insert SimpleName: log(1461) into MethodInvocation(1467) at 0", "Insert SimpleName: debug(1462) into MethodInvocation(1467) at 1", "Insert InfixExpression: +(1465) into MethodInvocation(1467) at 2", "Insert SimpleName: e(1466) into MethodInvocation(1467) at 3", "Insert StringLiteral: \"Logging out subject with primary id {}\"(1599) into InfixExpression: +(1605) at 0", "Insert MethodInvocation(1604) into InfixExpression: +(1605) at 1", "Update StringLiteral: \".createSubject( AuthenticationInfo info ) method to return \"(837) to \"Context referenced sessionId is invalid.  Ignoring and creating an anonymous \"", "Move StringLiteral: \".createSubject( AuthenticationInfo info ) method to return \"(837) into InfixExpression: +(1465) at 0", "Update StringLiteral: \"a non-null Subject instance\"(838) to \"(session-less) Subject instance.\"", "Move StringLiteral: \"a non-null Subject instance\"(838) into InfixExpression: +(1465) at 1", "Insert MethodInvocation(1602) into MethodInvocation(1604) at 0", "Insert SimpleName: next(1603) into MethodInvocation(1604) at 1", "Insert SimpleName: principals(1600) into MethodInvocation(1602) at 0", "Insert SimpleName: iterator(1601) into MethodInvocation(1602) at 1", "Delete MethodInvocation(515)", "Delete PrefixExpression: !(516)", "Delete SimpleName: msg(529)", "Delete SimpleName: id(530)", "Delete ClassInstanceCreation(531)", "Delete ThrowStatement(532)", "Delete Block(533)", "Delete IfStatement(534)", "Delete Block(541)", "Delete MethodDeclaration(542)", "Delete SimpleName: createSubject(546)", "Delete SimpleName: principals(618)", "Delete VariableDeclarationFragment(621)", "Delete VariableDeclarationStatement(622)", "Delete SimpleName: createSubject(623)", "Delete SimpleName: principals(624)", "Delete SimpleName: session(625)", "Delete MethodInvocation(626)", "Delete StringLiteral: \"Specified id [\"(520)", "Delete SimpleName: id(521)", "Delete StringLiteral: \"] does not correspond to a valid Session  It either \"(522)", "Delete StringLiteral: \"does not exist or the corresponding session has been stopped or expired.\"(523)", "Delete InfixExpression: +(524)", "Delete SimpleName: SubjectFactory(688)", "Delete SimpleType: SubjectFactory(689)", "Delete SimpleName: sf(690)", "Delete SimpleName: getSubjectFactory(691)", "Delete MethodInvocation(692)", "Delete VariableDeclarationFragment(693)", "Delete VariableDeclarationStatement(694)", "Delete SimpleName: sf(695)", "Delete MethodInvocation(782)", "Delete SimpleName: createSubject(783)", "Delete TextElement: .(794)", "Delete PrimitiveType: void(818)", "Delete SimpleType: Subject(821)", "Delete SimpleName: subject(822)", "Delete SingleVariableDeclaration(823)", "Delete SimpleType: String(830)", "Delete SimpleName: msg(831)", "Delete StringLiteral: \"Programming error - please verify that you have overridden the \"(832)", "Delete MethodInvocation(834)", "Delete SimpleName: getName(835)", "Delete MethodInvocation(836)", "Delete InfixExpression: +(839)", "Delete VariableDeclarationFragment(840)", "Delete VariableDeclarationStatement(841)", "Delete SimpleType: IllegalStateException(843)", "Delete SimpleName: msg(844)", "Delete ClassInstanceCreation(845)", "Delete ThrowStatement(846)", "Delete Block(847)", "Delete IfStatement(848)", "Delete Block(849)", "Delete MethodDeclaration(850)", "Delete SimpleName: assertCreation(1160)", "Delete SimpleName: subject(1161)", "Delete MethodInvocation(1162)", "Delete ExpressionStatement(1163)", "Delete SimpleName: getSubject(1227)", "Delete MethodInvocation(1236)", "Delete QualifiedName: org.apache.shiro.session.InvalidSessionException(1594)", "Delete QualifiedName: org.apache.shiro.authz.AuthorizationException(1598)", "Delete SimpleName: SubjectFactory(1664)", "Delete SimpleType: SubjectFactory(1665)", "Delete SimpleName: sf(1666)", "Delete SimpleName: getSubjectFactory(1667)", "Delete MethodInvocation(1668)", "Delete VariableDeclarationFragment(1669)", "Delete VariableDeclarationStatement(1670)", "Delete SimpleName: sf(1671)"]}}, {"SessionSubjectBinder_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}]}}, {"SessionSubjectBinder_diff": {"operations": ["Move ExpressionStatement(126) into Block(131) at 2"]}}, {"SubjectFactory_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: interface at 3", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: SESSION_ID to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: interface at 3", "INS SimpleType: String to FieldDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: SubjectFactory to TypeLiteral at 0", "INS Modifier: public to FieldDeclaration at 0", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS SimpleName: SubjectFactory to SimpleType: SubjectFactory at 0", "INS StringLiteral: \".SESSION_ID\" to InfixExpression: + at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4"]}]}}, {"SubjectFactory_diff": {"operations": ["Insert FieldDeclaration(36) into TypeDeclaration: interface(169) at 3", "Insert Modifier: public(22) into FieldDeclaration(36) at 0", "Insert Modifier: static(23) into FieldDeclaration(36) at 1", "Insert Modifier: final(24) into FieldDeclaration(36) at 2", "Insert SimpleType: String(26) into FieldDeclaration(36) at 3", "Insert VariableDeclarationFragment(35) into FieldDeclaration(36) at 4", "Insert SimpleName: String(25) into SimpleType: String(26) at 0", "Insert SimpleName: SESSION_ID(27) into VariableDeclarationFragment(35) at 0", "Insert InfixExpression: +(34) into VariableDeclarationFragment(35) at 1", "Insert MethodInvocation(32) into InfixExpression: +(34) at 0", "Insert StringLiteral: \".SESSION_ID\"(33) into InfixExpression: +(34) at 1", "Insert TypeLiteral(30) into MethodInvocation(32) at 0", "Insert SimpleName: getName(31) into MethodInvocation(32) at 1", "Insert SimpleType: SubjectFactory(29) into TypeLiteral(30) at 0", "Insert SimpleName: SubjectFactory(28) into SimpleType: SubjectFactory(29) at 0"]}}, {"DelegatingSubject_cluster": {"actions": [{"root": "INS Modifier: transient to FieldDeclaration at 1", "operations": ["INS Modifier: transient to FieldDeclaration at 1"]}]}}, {"DelegatingSubject_diff": {"operations": ["Insert Modifier: transient(122) into FieldDeclaration(127) at 1"]}}, {"DefaultWebSecurityManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: javax.servlet.ServletResponse to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: java.util.Map to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 38"]}, {"root": "INS SimpleType: Serializable to MethodDeclaration at 2", "operations": ["INS SimpleType: Serializable to MethodDeclaration at 2", "INS SimpleName: Serializable to SimpleType: Serializable at 0"]}, {"root": "UPDATE from afterSessionManagerSet to getSessionId", "operations": ["UPD SimpleName: afterSessionManagerSet from afterSessionManagerSet to getSessionId", "UPD SimpleName: setSubjectFactory from setSubjectFactory to getSessionId", "UPD SimpleName: afterSessionManagerSet from afterSessionManagerSet to getSessionId"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: Map to SingleVariableDeclaration at 0", "INS SimpleName: subjectContext to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Map to SimpleType: Map at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: subjectContext to SuperMethodInvocation at 1", "INS SuperMethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Serializable to VariableDeclarationStatement at 0", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SimpleName: sessionId to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: WebUtils to MethodInvocation at 0", "INS SimpleName: response to InfixExpression: != at 0", "INS SimpleType: ServletResponse to VariableDeclarationStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: request to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getServletResponse to MethodInvocation at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS IfStatement to Block at 1", "INS SimpleName: response to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: ServletResponse to SimpleType: ServletResponse at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: sessionId to InfixExpression: == at 0", "INS IfStatement to Block at 2"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleName: sessionId to ReturnStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from SuperMethodInvocation", "operations": ["MOV SimpleName: afterSessionManagerSet to SuperMethodInvocation at 0"]}, {"root": "UPDATE from WebSessionManager to ServletRequest", "operations": ["UPD SimpleType: WebSessionManager from WebSessionManager to ServletRequest", "UPD SimpleName: WebSessionManager from WebSessionManager to ServletRequest"]}, {"root": "UPDATE from sessionManager to request", "operations": ["UPD SimpleName: sessionManager from sessionManager to request"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: WebUtils to MethodInvocation at 0", "INS SimpleName: getServletRequest to MethodInvocation at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: request to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: sessionId to Assignment: = at 0", "INS SimpleName: response to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setSubjectFactory to MethodInvocation at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV CastExpression to ParenthesizedExpression at 0"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleType: WebSubjectFactory", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: sessionManager", "DEL SimpleName: WebSubjectFactory"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SuperMethodInvocation"]}]}}, {"DefaultWebSecurityManager_diff": {"operations": ["Insert ImportDeclaration(29) into CompilationUnit(867) at 14", "Insert ImportDeclaration(35) into CompilationUnit(867) at 17", "Move MethodDeclaration(198) into TypeDeclaration: class(866) at 38", "Insert QualifiedName: javax.servlet.ServletResponse(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: java.util.Map(34) into ImportDeclaration(35) at 0", "Insert SimpleType: Serializable(763) into MethodDeclaration(823) at 2", "Update SimpleName: afterSessionManagerSet(175) to getSessionId", "Insert SingleVariableDeclaration(768) into MethodDeclaration(823) at 4", "Insert SimpleName: Serializable(762) into SimpleType: Serializable(763) at 0", "Insert SimpleType: Map(766) into SingleVariableDeclaration(768) at 0", "Insert SimpleName: subjectContext(767) into SingleVariableDeclaration(768) at 1", "Insert VariableDeclarationStatement(776) into Block(822) at 0", "Insert IfStatement(819) into Block(822) at 1", "Insert ReturnStatement(821) into Block(822) at 2", "Insert SimpleName: Map(765) into SimpleType: Map(766) at 0", "Insert SimpleType: Serializable(770) into VariableDeclarationStatement(776) at 0", "Insert VariableDeclarationFragment(775) into VariableDeclarationStatement(776) at 1", "Insert InfixExpression: ==(779) into IfStatement(819) at 0", "Insert Block(818) into IfStatement(819) at 1", "Insert SimpleName: sessionId(820) into ReturnStatement(821) at 0", "Insert SimpleName: Serializable(769) into SimpleType: Serializable(770) at 0", "Insert SimpleName: sessionId(771) into VariableDeclarationFragment(775) at 0", "Insert SuperMethodInvocation(774) into VariableDeclarationFragment(775) at 1", "Insert SimpleName: sessionId(777) into InfixExpression: ==(779) at 0", "Insert NullLiteral(778) into InfixExpression: ==(779) at 1", "Move VariableDeclarationStatement(188) into Block(818) at 0", "Insert VariableDeclarationStatement(795) into Block(818) at 1", "Insert IfStatement(817) into Block(818) at 2", "Update SimpleName: afterSessionManagerSet(176) to getSessionId", "Move SimpleName: afterSessionManagerSet(176) into SuperMethodInvocation(774) at 0", "Insert SimpleName: subjectContext(773) into SuperMethodInvocation(774) at 1", "Update SimpleType: WebSessionManager(180) to ServletRequest", "Insert SimpleType: ServletResponse(789) into VariableDeclarationStatement(795) at 0", "Insert VariableDeclarationFragment(794) into VariableDeclarationStatement(795) at 1", "Insert InfixExpression: &&(802) into IfStatement(817) at 0", "Insert Block(816) into IfStatement(817) at 1", "Update SimpleName: WebSessionManager(179) to ServletRequest", "Update SimpleName: sessionManager(181) to request", "Insert MethodInvocation(785) into VariableDeclarationFragment(786) at 1", "Insert SimpleName: ServletResponse(788) into SimpleType: ServletResponse(789) at 0", "Insert SimpleName: response(790) into VariableDeclarationFragment(794) at 0", "Insert MethodInvocation(793) into VariableDeclarationFragment(794) at 1", "Insert InfixExpression: !=(798) into InfixExpression: &&(802) at 0", "Insert InfixExpression: !=(801) into InfixExpression: &&(802) at 1", "Move ExpressionStatement(196) into Block(816) at 0", "Insert SimpleName: WebUtils(783) into MethodInvocation(785) at 0", "Insert SimpleName: getServletRequest(784) into MethodInvocation(785) at 1", "Insert SimpleName: WebUtils(791) into MethodInvocation(793) at 0", "Insert SimpleName: getServletResponse(792) into MethodInvocation(793) at 1", "Insert SimpleName: request(796) into InfixExpression: !=(798) at 0", "Insert NullLiteral(797) into InfixExpression: !=(798) at 1", "Insert SimpleName: response(799) into InfixExpression: !=(801) at 0", "Insert NullLiteral(800) into InfixExpression: !=(801) at 1", "Insert Assignment: =(814) into ExpressionStatement(815) at 0", "Insert SimpleName: sessionId(803) into Assignment: =(814) at 0", "Insert MethodInvocation(813) into Assignment: =(814) at 1", "Insert ParenthesizedExpression(809) into MethodInvocation(813) at 0", "Update SimpleName: setSubjectFactory(189) to getSessionId", "Move SimpleName: setSubjectFactory(189) into MethodInvocation(813) at 1", "Insert SimpleName: request(811) into MethodInvocation(813) at 2", "Insert SimpleName: response(812) into MethodInvocation(813) at 3", "Move CastExpression(186) into ParenthesizedExpression(809) at 0", "Delete PrimitiveType: void(174)", "Delete SimpleName: WebSubjectFactory(190)", "Delete SimpleType: WebSubjectFactory(191)", "Delete ThisExpression(192)", "Delete SimpleName: sessionManager(193)", "Delete ClassInstanceCreation(194)", "Delete MethodInvocation(195)", "Delete SuperMethodInvocation(177)", "Delete ExpressionStatement(178)"]}}, {"DelegatingWebSecurityManager_cluster": {"actions": [{"root": "MOVE from TagElement", "operations": ["MOV TextElement: the delegate  to TagElement at 18"]}, {"root": "UPDATE from  based on to  based on the delegate ", "operations": ["UPD TextElement:  based on from  based on to  based on the delegate "]}, {"root": "UPDATE from the delegate  to  instance", "operations": ["UPD TextElement: the delegate  from the delegate  to  instance"]}, {"root": "UPDATE from  instance and uses them as this component's to and uses them as this component's", "operations": ["UPD TextElement:  instance and uses them as this component's from  instance and uses them as this component's to and uses them as this component's"]}, {"root": "UPDATE from  and to  instance.", "operations": ["UPD TextElement:  and from  and to  instance."]}, {"root": "DEL TextElement:  and ", "operations": ["DEL TextElement:  and "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: WebSubjectFactory", "DEL TagElement: @link", "DEL TextElement:  WebSubjectFactory"]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleType: org.apache.shiro.mgt.SubjectFactory", "DEL TagElement: @link", "DEL MethodRefParameter", "DEL TextElement:  subjectFactory", "DEL QualifiedName: org.apache.shiro.mgt.SubjectFactory", "DEL SimpleName: setSubjectFactory", "DEL MethodRef"]}, {"root": "DEL TextElement: , respectively.", "operations": ["DEL TextElement: , respectively."]}, {"root": "DEL TagElement: @see", "operations": ["DEL TagElement: @see", "DEL MethodRefParameter", "DEL SimpleType: org.apache.shiro.mgt.SecurityManager", "DEL SimpleName: createWebSubjectFactory", "DEL MethodRef", "DEL SimpleType: org.apache.shiro.web.session.WebSessionManager", "DEL QualifiedName: org.apache.shiro.mgt.SecurityManager", "DEL QualifiedName: org.apache.shiro.web.session.WebSessionManager", "DEL MethodRefParameter"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: createWebSubjectFactory", "DEL SimpleName: WebSubjectFactory", "DEL SimpleName: delegate", "DEL VariableDeclarationFragment", "DEL SimpleName: sessionManager", "DEL SimpleName: webSubjectFactory", "DEL SimpleType: WebSubjectFactory"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: webSubjectFactory", "DEL SimpleName: setSubjectFactory", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: (this, sessionManagerArgument);</code></pre>", "DEL MethodRef", "DEL SimpleType: WebSessionManager", "DEL ClassInstanceCreation", "DEL TextElement:  for this ", "DEL MethodRefParameter", "DEL SimpleType: WebSubjectFactory", "DEL MethodRefParameter", "DEL TextElement:  WebSubjectFactory", "DEL TagElement: @link", "DEL TextElement:  the ", "DEL SimpleType: org.apache.shiro.web.session.WebSessionManager", "DEL SimpleName: WebSubjectFactory", "DEL ThisExpression", "DEL TagElement: @code", "DEL MethodRef", "DEL Javadoc", "DEL SimpleName: sessionManager", "DEL SimpleName: WebSessionManager", "DEL ReturnStatement", "DEL TextElement: for the application's use.", "DEL SimpleName: WebSubjectFactory", "DEL TextElement: The default implementation ignores the ", "DEL SimpleName: createWebSubjectFactory", "DEL TextElement:  instance to delegate all security operations.", "DEL SimpleName: sessionManager", "DEL QualifiedName: org.apache.shiro.web.WebSubjectFactory", "DEL SimpleName: SecurityManager", "DEL TextElement: <p/>", "DEL TextElement:  createWebSessionManager", "DEL TagElement: @code", "DEL SingleMemberAnnotation", "DEL SimpleName: delegate", "DEL TagElement: @link", "DEL TextElement:        the delegate ", "DEL SimpleType: org.apache.shiro.mgt.SecurityManager", "DEL QualifiedName: org.apache.shiro.mgt.SubjectFactory", "DEL TextElement:  WebSecurityManager", "DEL TagElement: @return", "DEL SimpleName: SuppressWarnings", "DEL SimpleType: SecurityManager", "DEL SimpleName: createWebSessionManager", "DEL SimpleType: WebSubjectFactory", "DEL TextElement:  SecurityManager", "DEL SimpleName: setSubjectFactory", "DEL SingleVariableDeclaration", "DEL MethodRefParameter", "DEL TagElement", "DEL TagElement: @see", "DEL TextElement:  WebSubjectFactory", "DEL Block", "DEL TagElement: @param", "DEL TextElement: <pre><code>new ", "DEL StringLiteral: \"UnusedDeclaration\"", "DEL SimpleType: org.apache.shiro.mgt.SecurityManager", "DEL SimpleName: WebSubjectFactory", "DEL MethodRefParameter", "DEL TagElement: @param", "DEL QualifiedName: org.apache.shiro.web.session.WebSessionManager", "DEL TagElement: @code", "DEL MethodRef", "DEL SimpleName: sessionManager", "DEL TextElement:  the webSessionManager created from ", "DEL SimpleType: org.apache.shiro.mgt.SubjectFactory", "DEL QualifiedName: org.apache.shiro.mgt.SecurityManager", "DEL TagElement: @code", "DEL ArrayInitializer", "DEL QualifiedName: org.apache.shiro.mgt.SecurityManager", "DEL SingleVariableDeclaration", "DEL TextElement:  WebSubjectFactory", "DEL Modifier: protected", "DEL TextElement: Creates a ", "DEL TextElement: (delegate);.", "DEL TextElement:  argument and merely returns", "DEL TextElement:  to use when creating Subject instances", "DEL SimpleName: delegate", "DEL TextElement:  to use when creating Subject instances for the application's use.", "DEL MethodDeclaration", "DEL TagElement: @code", "DEL TextElement:  SecurityManager"]}]}}, {"DelegatingWebSecurityManager_diff": {"operations": ["Move TextElement: the delegate (115) into TagElement(123) at 18", "Update TextElement:  based on(114) to  based on the delegate ", "Update TextElement: the delegate (115) to  instance", "Update TextElement:  instance and uses them as this component's(118) to and uses them as this component's", "Update TextElement:  and(126) to  instance.", "Delete TextElement:  and (110)", "Delete SimpleName: WebSubjectFactory(111)", "Delete TextElement:  WebSubjectFactory(112)", "Delete TagElement: @link(113)", "Delete SimpleName: setSubjectFactory(127)", "Delete QualifiedName: org.apache.shiro.mgt.SubjectFactory(128)", "Delete SimpleType: org.apache.shiro.mgt.SubjectFactory(129)", "Delete MethodRefParameter(130)", "Delete MethodRef(131)", "Delete TextElement:  subjectFactory(132)", "Delete TagElement: @link(133)", "Delete TextElement: , respectively.(134)", "Delete SimpleName: createWebSubjectFactory(149)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(150)", "Delete SimpleType: org.apache.shiro.mgt.SecurityManager(151)", "Delete MethodRefParameter(152)", "Delete QualifiedName: org.apache.shiro.web.session.WebSessionManager(153)", "Delete SimpleType: org.apache.shiro.web.session.WebSessionManager(154)", "Delete MethodRefParameter(155)", "Delete MethodRef(156)", "Delete TagElement: @see(157)", "Delete SimpleName: WebSubjectFactory(196)", "Delete SimpleType: WebSubjectFactory(197)", "Delete SimpleName: webSubjectFactory(198)", "Delete SimpleName: createWebSubjectFactory(199)", "Delete SimpleName: delegate(200)", "Delete SimpleName: sessionManager(201)", "Delete MethodInvocation(202)", "Delete VariableDeclarationFragment(203)", "Delete VariableDeclarationStatement(204)", "Delete SimpleName: setSubjectFactory(205)", "Delete SimpleName: webSubjectFactory(206)", "Delete MethodInvocation(207)", "Delete ExpressionStatement(208)", "Delete TextElement: Creates a (252)", "Delete TextElement:  WebSubjectFactory(253)", "Delete TagElement: @code(254)", "Delete TextElement:  to use when creating Subject instances for the application's use.(255)", "Delete TextElement: <p/>(256)", "Delete TextElement: The default implementation ignores the (257)", "Delete TextElement:  SecurityManager(258)", "Delete TagElement: @code(259)", "Delete TextElement:  argument and merely returns(260)", "Delete TextElement: <pre><code>new (261)", "Delete QualifiedName: org.apache.shiro.web.WebSubjectFactory(262)", "Delete SimpleName: WebSubjectFactory(263)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(264)", "Delete SimpleType: org.apache.shiro.mgt.SecurityManager(265)", "Delete MethodRefParameter(266)", "Delete QualifiedName: org.apache.shiro.web.session.WebSessionManager(267)", "Delete SimpleType: org.apache.shiro.web.session.WebSessionManager(268)", "Delete MethodRefParameter(269)", "Delete MethodRef(270)", "Delete TextElement:  WebSubjectFactory(271)", "Delete TagElement: @link(272)", "Delete TextElement: (this, sessionManagerArgument);</code></pre>(273)", "Delete TagElement(274)", "Delete SimpleName: delegate(275)", "Delete TextElement:        the delegate (276)", "Delete TextElement:  SecurityManager(277)", "Delete TagElement: @code(278)", "Delete TextElement:  instance to delegate all security operations.(279)", "Delete TagElement: @param(280)", "Delete SimpleName: sessionManager(281)", "Delete TextElement:  the webSessionManager created from (282)", "Delete SimpleName: createWebSessionManager(283)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(284)", "Delete SimpleType: org.apache.shiro.mgt.SecurityManager(285)", "Delete MethodRefParameter(286)", "Delete MethodRef(287)", "Delete TextElement:  createWebSessionManager(288)", "Delete TagElement: @link(289)", "Delete TextElement: (delegate);.(290)", "Delete TagElement: @param(291)", "Delete TextElement:  the (292)", "Delete TextElement:  WebSubjectFactory(293)", "Delete TagElement: @code(294)", "Delete TextElement:  for this (295)", "Delete TextElement:  WebSecurityManager(296)", "Delete TagElement: @code(297)", "Delete TextElement:  to use when creating Subject instances(298)", "Delete TextElement: for the application's use.(299)", "Delete TagElement: @return(300)", "Delete SimpleName: setSubjectFactory(301)", "Delete QualifiedName: org.apache.shiro.mgt.SubjectFactory(302)", "Delete SimpleType: org.apache.shiro.mgt.SubjectFactory(303)", "Delete MethodRefParameter(304)", "Delete MethodRef(305)", "Delete TagElement: @see(306)", "Delete Javadoc(307)", "Delete SimpleName: SuppressWarnings(308)", "Delete StringLiteral: \"UnusedDeclaration\"(309)", "Delete ArrayInitializer(310)", "Delete SingleMemberAnnotation(311)", "Delete Modifier: protected(312)", "Delete SimpleName: WebSubjectFactory(313)", "Delete SimpleType: WebSubjectFactory(314)", "Delete SimpleName: createWebSubjectFactory(315)", "Delete SimpleName: SecurityManager(316)", "Delete SimpleType: SecurityManager(317)", "Delete SimpleName: delegate(318)", "Delete SingleVariableDeclaration(319)", "Delete SimpleName: WebSessionManager(320)", "Delete SimpleType: WebSessionManager(321)", "Delete SimpleName: sessionManager(322)", "Delete SingleVariableDeclaration(323)", "Delete SimpleName: WebSubjectFactory(324)", "Delete SimpleType: WebSubjectFactory(325)", "Delete ThisExpression(326)", "Delete SimpleName: sessionManager(327)", "Delete ClassInstanceCreation(328)", "Delete ReturnStatement(329)", "Delete Block(330)", "Delete MethodDeclaration(331)"]}}, {"WebSubjectFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.shiro.web"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.mgt.DefaultSubjectFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.mgt.SecurityManager", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.mgt.SessionSubjectBinder", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.session.Session"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.web.session.WebSessionManager"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.servlet.ServletRequest", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.servlet.ServletResponse"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: Map", "DEL SingleVariableDeclaration", "DEL SimpleName: WebSubjectFactory", "DEL QualifiedName: SessionSubjectBinder.PRINCIPALS_SESSION_KEY", "DEL SimpleName: webSessionManager", "DEL PrimitiveType: void", "DEL SimpleType: WebSessionManager", "DEL Modifier: static", "DEL SimpleType: SecurityManager", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: session", "DEL SimpleName: context", "DEL MethodInvocation", "DEL SimpleName: Session", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: WebSessionManager", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: Map", "DEL ThisExpression", "DEL Block", "DEL SimpleType: WebSessionManager", "DEL Modifier: protected", "DEL SimpleName: getWebSessionManager", "DEL VariableDeclarationStatement", "DEL SimpleName: session", "DEL SimpleName: Session", "DEL Javadoc", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Override", "DEL InfixExpression: ==", "DEL SimpleName: getWebSession", "DEL SingleVariableDeclaration", "DEL Block", "DEL SuperConstructorInvocation", "DEL FieldDeclaration", "DEL SimpleName: getServletResponse", "DEL Modifier: public", "DEL SimpleName: AUTHENTICATED_SESSION_KEY", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: response", "DEL SimpleName: WebSessionManager", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleName: WebSubjectFactory", "DEL SimpleName: SecurityManager", "DEL SimpleName: webSessionManager", "DEL Modifier: public", "DEL SimpleName: session", "DEL TagElement: @author", "DEL SimpleName: ServletRequest", "DEL SimpleType: Session", "DEL Block", "DEL SimpleType: DefaultSubjectFactory", "DEL ExpressionStatement", "DEL SimpleName: request", "DEL SimpleName: WebUtils", "DEL NullLiteral", "DEL SuperConstructorInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: webSessionManager", "DEL SimpleName: WebSubjectFactory", "DEL SimpleName: getSession", "DEL InfixExpression: ==", "DEL SimpleType: WebSessionManager", "DEL SimpleName: WebSessionManager", "DEL SingleVariableDeclaration", "DEL SimpleType: ServletResponse", "DEL MethodInvocation", "DEL SimpleName: getWebSessionManager", "DEL TextElement:  1.0", "DEL SimpleName: webSessionManager", "DEL Modifier: final", "DEL TypeDeclaration: class", "DEL SimpleName: securityManager", "DEL SimpleName: response", "DEL SimpleName: session", "DEL SimpleType: WebSessionManager", "DEL SimpleName: WebUtils", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: webSessionManager", "DEL Block", "DEL SimpleName: ServletResponse", "DEL SimpleName: setWebSessionManager", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: webSessionManager", "DEL SimpleName: request", "DEL SimpleName: request", "DEL IfStatement", "DEL ReturnStatement", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: securityManager", "DEL InfixExpression: ||", "DEL SuperMethodInvocation", "DEL SimpleName: context", "DEL SimpleName: getSession", "DEL SimpleType: Session", "DEL Block", "DEL Block", "DEL IfStatement", "DEL SimpleName: securityManager", "DEL NullLiteral", "DEL SimpleName: webSessionManager", "DEL Modifier: protected", "DEL QualifiedName: SessionSubjectBinder.AUTHENTICATED_SESSION_KEY", "DEL SimpleName: setWebSessionManager", "DEL ReturnStatement", "DEL SimpleName: securityManager", "DEL Modifier: public", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getSession", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleType: ServletRequest", "DEL SimpleName: WebSessionManager", "DEL Assignment: =", "DEL SimpleName: WebSubjectFactory", "DEL SimpleName: getWebSession", "DEL ExpressionStatement", "DEL FieldAccess", "DEL NullLiteral", "DEL SimpleName: response", "DEL Modifier: public", "DEL SimpleType: SecurityManager", "DEL SimpleType: Session", "DEL SimpleName: PRINCIPALS_SESSION_KEY", "DEL SimpleName: DefaultSubjectFactory", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: Session", "DEL MethodDeclaration", "DEL NullLiteral", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL Modifier: static", "DEL SimpleName: SecurityManager", "DEL TextElement:  Les Hazlewood", "DEL Block", "DEL SimpleName: getServletRequest", "DEL TagElement: @since"]}]}}, {"WebSubjectFactory_diff": {"operations": ["Delete QualifiedName: org.apache.shiro.web(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.shiro.mgt.DefaultSubjectFactory(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.shiro.mgt.SecurityManager(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.shiro.mgt.SessionSubjectBinder(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.shiro.session.Session(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.shiro.web.session.WebSessionManager(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.servlet.ServletRequest(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: javax.servlet.ServletResponse(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Map(16)", "Delete ImportDeclaration(17)", "Delete TextElement:  Les Hazlewood(18)", "Delete TagElement: @author(19)", "Delete TextElement:  1.0(20)", "Delete TagElement: @since(21)", "Delete Javadoc(22)", "Delete Modifier: public(23)", "Delete SimpleName: WebSubjectFactory(24)", "Delete SimpleName: DefaultSubjectFactory(25)", "Delete SimpleType: DefaultSubjectFactory(26)", "Delete Modifier: public(27)", "Delete Modifier: static(28)", "Delete Modifier: final(29)", "Delete SimpleName: String(30)", "Delete SimpleType: String(31)", "Delete SimpleName: PRINCIPALS_SESSION_KEY(32)", "Delete QualifiedName: SessionSubjectBinder.PRINCIPALS_SESSION_KEY(33)", "Delete VariableDeclarationFragment(34)", "Delete FieldDeclaration(35)", "Delete Modifier: public(36)", "Delete Modifier: static(37)", "Delete Modifier: final(38)", "Delete SimpleName: String(39)", "Delete SimpleType: String(40)", "Delete SimpleName: AUTHENTICATED_SESSION_KEY(41)", "Delete QualifiedName: SessionSubjectBinder.AUTHENTICATED_SESSION_KEY(42)", "Delete VariableDeclarationFragment(43)", "Delete FieldDeclaration(44)", "Delete SimpleName: WebSessionManager(45)", "Delete SimpleType: WebSessionManager(46)", "Delete SimpleName: webSessionManager(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete Modifier: public(50)", "Delete SimpleName: WebSubjectFactory(51)", "Delete Block(52)", "Delete MethodDeclaration(53)", "Delete Modifier: public(54)", "Delete SimpleName: WebSubjectFactory(55)", "Delete SimpleName: SecurityManager(56)", "Delete SimpleType: SecurityManager(57)", "Delete SimpleName: securityManager(58)", "Delete SingleVariableDeclaration(59)", "Delete SimpleName: securityManager(60)", "Delete SuperConstructorInvocation(61)", "Delete Block(62)", "Delete MethodDeclaration(63)", "Delete Modifier: public(64)", "Delete SimpleName: WebSubjectFactory(65)", "Delete SimpleName: SecurityManager(66)", "Delete SimpleType: SecurityManager(67)", "Delete SimpleName: securityManager(68)", "Delete SingleVariableDeclaration(69)", "Delete SimpleName: WebSessionManager(70)", "Delete SimpleType: WebSessionManager(71)", "Delete SimpleName: webSessionManager(72)", "Delete SingleVariableDeclaration(73)", "Delete SimpleName: securityManager(74)", "Delete SuperConstructorInvocation(75)", "Delete SimpleName: setWebSessionManager(76)", "Delete SimpleName: webSessionManager(77)", "Delete MethodInvocation(78)", "Delete ExpressionStatement(79)", "Delete Block(80)", "Delete MethodDeclaration(81)", "Delete Modifier: public(82)", "Delete SimpleName: WebSessionManager(83)", "Delete SimpleType: WebSessionManager(84)", "Delete SimpleName: getWebSessionManager(85)", "Delete SimpleName: webSessionManager(86)", "Delete ReturnStatement(87)", "Delete Block(88)", "Delete MethodDeclaration(89)", "Delete Modifier: public(90)", "Delete PrimitiveType: void(91)", "Delete SimpleName: setWebSessionManager(92)", "Delete SimpleName: WebSessionManager(93)", "Delete SimpleType: WebSessionManager(94)", "Delete SimpleName: webSessionManager(95)", "Delete SingleVariableDeclaration(96)", "Delete ThisExpression(97)", "Delete SimpleName: webSessionManager(98)", "Delete FieldAccess(99)", "Delete SimpleName: webSessionManager(100)", "Delete Assignment: =(101)", "Delete ExpressionStatement(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete Modifier: protected(105)", "Delete SimpleName: Session(106)", "Delete SimpleType: Session(107)", "Delete SimpleName: getWebSession(108)", "Delete SimpleName: ServletRequest(109)", "Delete SimpleType: ServletRequest(110)", "Delete SimpleName: request(111)", "Delete SimpleName: WebUtils(112)", "Delete SimpleName: getServletRequest(113)", "Delete MethodInvocation(114)", "Delete VariableDeclarationFragment(115)", "Delete VariableDeclarationStatement(116)", "Delete SimpleName: ServletResponse(117)", "Delete SimpleType: ServletResponse(118)", "Delete SimpleName: response(119)", "Delete SimpleName: WebUtils(120)", "Delete SimpleName: getServletResponse(121)", "Delete MethodInvocation(122)", "Delete VariableDeclarationFragment(123)", "Delete VariableDeclarationStatement(124)", "Delete SimpleName: request(125)", "Delete NullLiteral(126)", "Delete InfixExpression: ==(127)", "Delete SimpleName: response(128)", "Delete NullLiteral(129)", "Delete InfixExpression: ==(130)", "Delete InfixExpression: ||(131)", "Delete NullLiteral(132)", "Delete ReturnStatement(133)", "Delete Block(134)", "Delete SimpleName: getWebSessionManager(135)", "Delete MethodInvocation(136)", "Delete SimpleName: getSession(137)", "Delete SimpleName: request(138)", "Delete SimpleName: response(139)", "Delete MethodInvocation(140)", "Delete ReturnStatement(141)", "Delete Block(142)", "Delete IfStatement(143)", "Delete Block(144)", "Delete MethodDeclaration(145)", "Delete SimpleName: Override(146)", "Delete MarkerAnnotation(147)", "Delete Modifier: protected(148)", "Delete SimpleName: Session(149)", "Delete SimpleType: Session(150)", "Delete SimpleName: getSession(151)", "Delete SimpleName: Map(152)", "Delete SimpleType: Map(153)", "Delete SimpleName: context(154)", "Delete SingleVariableDeclaration(155)", "Delete SimpleName: Session(156)", "Delete SimpleType: Session(157)", "Delete SimpleName: session(158)", "Delete SimpleName: getSession(159)", "Delete SimpleName: context(160)", "Delete SuperMethodInvocation(161)", "Delete VariableDeclarationFragment(162)", "Delete VariableDeclarationStatement(163)", "Delete SimpleName: session(164)", "Delete NullLiteral(165)", "Delete InfixExpression: ==(166)", "Delete SimpleName: session(167)", "Delete SimpleName: getWebSession(168)", "Delete MethodInvocation(169)", "Delete Assignment: =(170)", "Delete ExpressionStatement(171)", "Delete Block(172)", "Delete IfStatement(173)", "Delete SimpleName: session(174)", "Delete ReturnStatement(175)", "Delete Block(176)", "Delete MethodDeclaration(177)", "Delete TypeDeclaration: class(178)"]}}, {"AbstractValidatingSessionManager_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 32"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS Modifier: protected to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: onInvalidSessionId to MethodDeclaration at 2", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SimpleType: Serializable to SingleVariableDeclaration at 0", "INS SimpleName: id to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from session to s", "operations": ["UPD SimpleName: session from session to s", "UPD SimpleName: session from session to s", "UPD SimpleName: session from session to s", "UPD SimpleName: session from session to s", "UPD SimpleName: session from session to s"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: onInvalidSessionId to MethodInvocation at 0", "INS SimpleName: sessionId to MethodInvocation at 1"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}]}}, {"AbstractValidatingSessionManager_diff": {"operations": ["Move MethodDeclaration(628) into TypeDeclaration: class(1130) at 32", "Insert MethodDeclaration(481) into TypeDeclaration: class(1130) at 26", "Insert Modifier: protected(473) into MethodDeclaration(481) at 0", "Insert PrimitiveType: void(474) into MethodDeclaration(481) at 1", "Insert SimpleName: onInvalidSessionId(475) into MethodDeclaration(481) at 2", "Insert SingleVariableDeclaration(479) into MethodDeclaration(481) at 3", "Insert Block(480) into MethodDeclaration(481) at 4", "Insert SimpleType: Serializable(477) into SingleVariableDeclaration(479) at 0", "Insert SimpleName: id(478) into SingleVariableDeclaration(479) at 1", "Update SimpleName: session(581) to s", "Insert SimpleName: Serializable(476) into SimpleType: Serializable(477) at 0", "Update SimpleName: session(616) to s", "Update SimpleName: session(620) to s", "Update SimpleName: session(624) to s", "Insert ExpressionStatement(431) into Block(468) at 0", "Insert MethodInvocation(430) into ExpressionStatement(431) at 0", "Update SimpleName: session(592) to s", "Insert SimpleName: onInvalidSessionId(428) into MethodInvocation(430) at 0", "Insert SimpleName: sessionId(429) into MethodInvocation(430) at 1", "Delete Modifier: static(340)"]}}, {"DefaultSessionManager_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: trace", "DEL StringLiteral: \"]\"", "DEL Block", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: log", "DEL IfStatement", "DEL SimpleName: isTraceEnabled", "DEL ExpressionStatement", "DEL SimpleName: log", "DEL MethodInvocation", "DEL StringLiteral: \"Attempting to retrieve session with id [\"", "DEL SimpleName: sessionId"]}]}}, {"DefaultSessionManager_diff": {"operations": ["Insert Block(548) into MethodDeclaration(549) at 5", "Move ReturnStatement(560) into Block(548) at 0", "Delete SimpleName: log(544)", "Delete SimpleName: isTraceEnabled(545)", "Delete MethodInvocation(546)", "Delete SimpleName: log(547)", "Delete SimpleName: trace(548)", "Delete StringLiteral: \"Attempting to retrieve session with id [\"(549)", "Delete SimpleName: sessionId(550)", "Delete StringLiteral: \"]\"(551)", "Delete InfixExpression: +(552)", "Delete MethodInvocation(553)", "Delete ExpressionStatement(554)", "Delete Block(555)", "Delete IfStatement(556)", "Delete Block(561)"]}}, {"DelegatingSession_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 2", "MOV ImportDeclaration to CompilationUnit at 3", "MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS Modifier: transient to FieldDeclaration at 2", "operations": ["INS Modifier: transient to FieldDeclaration at 2"]}, {"root": "UPDATE from  for details.  to  for details.", "operations": ["UPD TextElement:  for details.  from  for details.  to  for details."]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}, {"root": "DEL TextElement:  ", "operations": ["DEL TextElement:  "]}]}}, {"DelegatingSession_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(699) at 6", "Move ImportDeclaration(13) into CompilationUnit(699) at 1", "Move ImportDeclaration(15) into CompilationUnit(699) at 2", "Move ImportDeclaration(17) into CompilationUnit(699) at 3", "Insert Modifier: transient(77) into FieldDeclaration(83) at 2", "Update TextElement:  for details. (73) to  for details.", "Delete TextElement:  (211)", "Delete TextElement:  (225)", "Delete TextElement:  (274)", "Delete TextElement:  (383)", "Delete TextElement:  (432)", "Delete TextElement:  (466)", "Delete TextElement:  (505)", "Delete TextElement:  (553)", "Delete TextElement:  (603)", "Delete TextElement:  (668)"]}}, {"ShiroHttpServletResponse_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 10", "MOV ImportDeclaration to CompilationUnit at 10", "MOV ImportDeclaration to CompilationUnit at 10", "MOV ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS TextElement: <p/> to TagElement at 1", "operations": ["INS TextElement: <p/> to TagElement at 1"]}, {"root": "INS TextElement: <p/> to TagElement at 6", "operations": ["INS TextElement: <p/> to TagElement at 6"]}, {"root": "INS TagElement: @return to Javadoc at 2", "operations": ["INS TextElement:  false to TagElement: @code at 0", "INS TextElement:  if the specified URL should be encoded with a session identifier,  to TagElement: @return at 2", "INS TextElement:   to TagElement: @return at 0", "INS TagElement: @code to TagElement: @return at 3", "INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  true to TagElement: @code at 0", "INS TagElement: @return to Javadoc at 2", "INS TextElement:  otherwise. to TagElement: @return at 4"]}, {"root": "INS TagElement: @return to Javadoc at 2", "operations": ["INS TextElement:  resource location as an absolute url to TagElement: @return at 0", "INS TagElement: @return to Javadoc at 2"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: c to TagElement: @param at 0", "INS TextElement:  the character to check to TagElement: @param at 1"]}, {"root": "INS TagElement: @return to Javadoc at 2", "operations": ["INS TagElement: @return to Javadoc at 2", "INS TextElement:  if the character is allowed in a URI scheme,  to TagElement: @return at 2", "INS TagElement: @code to TagElement: @return at 3", "INS TextElement:  otherwise. to TagElement: @return at 4", "INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  true to TagElement: @code at 0", "INS TextElement:  false to TagElement: @code at 0", "INS TextElement:   to TagElement: @return at 0"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement:  scheme to TagElement: @code at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @code to TagElement at 5", "INS TagElement: @code to TagElement at 1", "INS TextElement: Returns  to TagElement at 0", "INS TextElement:  true to TagElement: @code at 0", "INS TextElement:  otherwise. to TagElement at 6", "INS TextElement:  if the URI string has a  to TagElement at 2", "INS TagElement: @code to TagElement at 3", "INS TextElement:  component,  to TagElement at 4", "INS TextElement:  false to TagElement: @code at 0"]}, {"root": "UPDATE from  to @param", "operations": ["UPD TagElement from  to @param"]}, {"root": "INS TagElement: @return to Javadoc at 2", "operations": ["INS TextElement:   to TagElement: @return at 0", "INS TextElement:  true to TagElement: @code at 0", "INS TextElement:  component,  to TagElement: @return at 4", "INS TextElement:  scheme to TagElement: @code at 0", "INS TagElement: @code to TagElement: @return at 1", "INS TextElement:  otherwise. to TagElement: @return at 6", "INS TextElement:  false to TagElement: @code at 0", "INS TextElement:  if the URI string has a  to TagElement: @return at 2", "INS TagElement: @code to TagElement: @return at 5", "INS TagElement: @return to Javadoc at 2", "INS TagElement: @code to TagElement: @return at 3"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0"]}, {"root": "INS TagElement: @return to Javadoc at 4", "operations": ["INS TagElement: @return to Javadoc at 4"]}, {"root": "INS SimpleName: uri to TagElement at 0", "operations": ["INS SimpleName: uri to TagElement at 0"]}, {"root": "UPDATE from Determine if a URI string has a <code>scheme</code> component. to  the URI string to check for a scheme component", "operations": ["UPD TextElement: Determine if a URI string has a <code>scheme</code> component. from Determine if a URI string has a <code>scheme</code> component. to  the URI string to check for a scheme component"]}, {"root": "UPDATE from Return the specified URL with the specified session identifier to Return the specified URL with the specified session identifier suitably encoded.", "operations": ["UPD TextElement: Return the specified URL with the specified session identifier from Return the specified URL with the specified session identifier to Return the specified URL with the specified session identifier suitably encoded."]}, {"root": "MOVE from TagElement: @return", "operations": ["MOV TextElement: suitably encoded. to TagElement: @return at 0", "MOV TextElement: Return the specified URL with the specified session identifier to TagElement at 0"]}, {"root": "UPDATE from suitably encoded. to  the url with the session identifer properly encoded.", "operations": ["UPD TextElement: suitably encoded. from suitably encoded. to  the url with the session identifer properly encoded."]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement"]}]}}, {"ShiroHttpServletResponse_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(1024) at 10", "Move ImportDeclaration(5) into CompilationUnit(1024) at 10", "Move ImportDeclaration(7) into CompilationUnit(1024) at 10", "Move ImportDeclaration(9) into CompilationUnit(1024) at 10", "Insert TextElement: <p/>(21) into TagElement(30) at 1", "Insert TextElement: <p/>(26) into TagElement(30) at 6", "Insert TagElement: @return(280) into Javadoc(281) at 2", "Insert TagElement: @return(545) into Javadoc(550) at 2", "Insert TagElement: @param(743) into Javadoc(752) at 1", "Insert TagElement: @return(751) into Javadoc(752) at 2", "Insert TagElement(789) into Javadoc(804) at 0", "Update TagElement(758) to @param", "Insert TagElement: @return(803) into Javadoc(804) at 2", "Insert TagElement(861) into Javadoc(870) at 0", "Insert TagElement: @return(869) into Javadoc(870) at 3", "Insert TextElement:  (273) into TagElement: @return(280) at 0", "Insert TagElement: @code(275) into TagElement: @return(280) at 1", "Insert TextElement:  if the specified URL should be encoded with a session identifier, (276) into TagElement: @return(280) at 2", "Insert TagElement: @code(278) into TagElement: @return(280) at 3", "Insert TextElement:  otherwise.(279) into TagElement: @return(280) at 4", "Insert TextElement:  resource location as an absolute url(544) into TagElement: @return(545) at 0", "Insert SimpleName: c(741) into TagElement: @param(743) at 0", "Insert TextElement:  the character to check(742) into TagElement: @param(743) at 1", "Insert TextElement:  (744) into TagElement: @return(751) at 0", "Insert TagElement: @code(746) into TagElement: @return(751) at 1", "Insert TextElement:  if the character is allowed in a URI scheme, (747) into TagElement: @return(751) at 2", "Insert TagElement: @code(749) into TagElement: @return(751) at 3", "Insert TextElement:  otherwise.(750) into TagElement: @return(751) at 4", "Insert TextElement: Returns (779) into TagElement(789) at 0", "Insert TagElement: @code(781) into TagElement(789) at 1", "Insert TextElement:  if the URI string has a (782) into TagElement(789) at 2", "Insert TagElement: @code(784) into TagElement(789) at 3", "Insert TextElement:  component, (785) into TagElement(789) at 4", "Insert TagElement: @code(787) into TagElement(789) at 5", "Insert TextElement:  otherwise.(788) into TagElement(789) at 6", "Insert SimpleName: uri(790) into TagElement: @param(792) at 0", "Update TextElement: Determine if a URI string has a <code>scheme</code> component.(757) to  the URI string to check for a scheme component", "Insert TextElement:  (793) into TagElement: @return(803) at 0", "Insert TagElement: @code(795) into TagElement: @return(803) at 1", "Insert TextElement:  if the URI string has a (796) into TagElement: @return(803) at 2", "Insert TagElement: @code(798) into TagElement: @return(803) at 3", "Insert TextElement:  component, (799) into TagElement: @return(803) at 4", "Insert TagElement: @code(801) into TagElement: @return(803) at 5", "Insert TextElement:  otherwise.(802) into TagElement: @return(803) at 6", "Update TextElement: Return the specified URL with the specified session identifier(815) to Return the specified URL with the specified session identifier suitably encoded.", "Move TextElement: Return the specified URL with the specified session identifier(815) into TagElement(861) at 0", "Update TextElement: suitably encoded.(816) to  the url with the session identifer properly encoded.", "Move TextElement: suitably encoded.(816) into TagElement: @return(869) at 0", "Insert TextElement:  true(274) into TagElement: @code(275) at 0", "Insert TextElement:  false(277) into TagElement: @code(278) at 0", "Insert TextElement:  true(745) into TagElement: @code(746) at 0", "Insert TextElement:  false(748) into TagElement: @code(749) at 0", "Insert TextElement:  true(780) into TagElement: @code(781) at 0", "Insert TextElement:  scheme(783) into TagElement: @code(784) at 0", "Insert TextElement:  false(786) into TagElement: @code(787) at 0", "Insert TextElement:  true(794) into TagElement: @code(795) at 0", "Insert TextElement:  scheme(797) into TagElement: @code(798) at 0", "Insert TextElement:  false(800) into TagElement: @code(801) at 0", "Delete NullLiteral(352)", "Delete TagElement(817)"]}}, {"ShiroHttpSession_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 12", "MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 2", "MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from java.util.Set to java.util", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to java.util"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SingleMemberAnnotation to FieldDeclaration at 0"]}, {"root": "UPDATE from HttpSessionContext to javax.servlet.http.HttpSessionContext", "operations": ["UPD SimpleType: HttpSessionContext from HttpSessionContext to javax.servlet.http.HttpSessionContext", "UPD SimpleType: HttpSessionContext from HttpSessionContext to javax.servlet.http.HttpSessionContext", "UPD SimpleType: HttpSessionContext from HttpSessionContext to javax.servlet.http.HttpSessionContext"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS StringLiteral: \"deprecation\" to ArrayInitializer at 0", "INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS QualifiedName: javax.servlet.http.HttpSessionContext to SimpleType: HttpSessionContext at 0", "operations": ["INS QualifiedName: javax.servlet.http.HttpSessionContext to SimpleType: HttpSessionContext at 0"]}, {"root": "INS QualifiedName: javax.servlet.http.HttpSessionContext to SimpleType: HttpSessionContext at 0", "operations": ["INS QualifiedName: javax.servlet.http.HttpSessionContext to SimpleType: HttpSessionContext at 0"]}, {"root": "INS QualifiedName: javax.servlet.http.HttpSessionContext to SimpleType: HttpSessionContext at 0", "operations": ["INS QualifiedName: javax.servlet.http.HttpSessionContext to SimpleType: HttpSessionContext at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Enumeration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.servlet.http.HttpSessionContext", "DEL ImportDeclaration"]}, {"root": "DEL SimpleName: HttpSessionContext", "operations": ["DEL SimpleName: HttpSessionContext"]}, {"root": "DEL SimpleName: HttpSessionContext", "operations": ["DEL SimpleName: HttpSessionContext"]}, {"root": "DEL SimpleName: HttpSessionContext", "operations": ["DEL SimpleName: HttpSessionContext"]}]}}, {"ShiroHttpSession_diff": {"operations": ["Move ImportDeclaration(13) into CompilationUnit(806) at 12", "Move ImportDeclaration(27) into CompilationUnit(806) at 1", "Move ImportDeclaration(29) into CompilationUnit(806) at 2", "Move ImportDeclaration(31) into CompilationUnit(806) at 3", "Update QualifiedName: java.util.Set(12) to java.util", "Move SingleMemberAnnotation(44) into FieldDeclaration(104) at 0", "Update SimpleType: HttpSessionContext(89) to javax.servlet.http.HttpSessionContext", "Insert SingleMemberAnnotation(312) into MethodDeclaration(320) at 0", "Update SimpleType: HttpSessionContext(323) to javax.servlet.http.HttpSessionContext", "Insert QualifiedName: javax.servlet.http.HttpSessionContext(76) into SimpleType: javax.servlet.http.HttpSessionContext(77) at 0", "Insert SimpleName: SuppressWarnings(309) into SingleMemberAnnotation(312) at 0", "Insert ArrayInitializer(311) into SingleMemberAnnotation(312) at 1", "Insert QualifiedName: javax.servlet.http.HttpSessionContext(314) into SimpleType: javax.servlet.http.HttpSessionContext(315) at 0", "Update SimpleType: HttpSessionContext(92) to javax.servlet.http.HttpSessionContext", "Insert StringLiteral: \"deprecation\"(310) into ArrayInitializer(311) at 0", "Insert QualifiedName: javax.servlet.http.HttpSessionContext(79) into SimpleType: javax.servlet.http.HttpSessionContext(80) at 0", "Delete QualifiedName: java.util.Collection(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Collections(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Enumeration(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashSet(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Iterator(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.servlet.http.HttpSessionContext(24)", "Delete ImportDeclaration(25)", "Delete SimpleName: HttpSessionContext(88)", "Delete SimpleName: HttpSessionContext(91)", "Delete SimpleName: HttpSessionContext(322)"]}}, {"DefaultWebSessionManager_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 9", "INS Block to MethodDeclaration at 2"]}, {"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private", "UPD Modifier: protected from protected to private"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV SimpleName: DefaultWebSessionManager to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Serializable to MethodDeclaration at 2"]}, {"root": "UPDATE from getSession to getSessionId", "operations": ["UPD SimpleName: getSession from getSession to getSessionId"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS SimpleName: sessionIdCookieAttribute to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: sessionIdCookieAttribute to FieldAccess at 1"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: sessionIdRequestParamAttribute to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.shiro.authz.AuthorizationException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.authz.HostUnauthorizedException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.shiro.session.InvalidSessionException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.net.InetAddress"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: validateRequestOrigin", "DEL TextElement: Property specifying if, after a session object is acquired from the request, if that session should be", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL TagElement", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL TextElement: validated to ensure the starting origin of the session is the same as the incoming request.", "DEL BooleanLiteral: false"]}, {"root": "DEL SimpleName: cookieStore", "operations": ["DEL SimpleName: cookieStore"]}, {"root": "DEL SimpleName: cookieStore", "operations": ["DEL SimpleName: cookieStore"]}, {"root": "DEL SimpleName: reqParamStore", "operations": ["DEL SimpleName: reqParamStore"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: ensureRequestParamSessionIdStore", "DEL SimpleName: ensureCookieSessionIdStore", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: validation check useless).  Also, some internet service providers (e.g. AOL) may change a", "DEL SimpleName: getSession", "DEL SimpleName: validateRequestOrigin", "DEL Modifier: public", "DEL SimpleName: isValidateRequestOrigin", "DEL TextElement: IP Address of the <tt>HttpRequest</tt> that started the session.", "DEL TextElement: <p> If set to <tt>false</tt>, any <tt>HttpRequest</tt> with a reference to a valid", "DEL TextElement: <p>For the reasons specified above, this property is <tt>false</tt> by default.", "DEL TagElement: @link", "DEL TextElement: machine accessing the system.", "DEL TextElement: to join a session (i.e. via ", "DEL TextElement: location.  Again, this feature should only be enabled where IP Addresses can be guaranteed a", "DEL TextElement: <p>Public websites are not good candidates for enabling this", "DEL TextElement: <p/>", "DEL TextElement: feature since many browser clients often sit behind NAT routers (in", "DEL TextElement: <p/>", "DEL TextElement:  true if this factory will verify each HttpRequest joining a session", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL TextElement: <p/>", "DEL TextElement: If set to <tt>true</tt>, this implementation will ensure that any", "DEL TextElement: client's IP in mid-session, making subsequent requests appear to come from a different", "DEL TextElement: which case many machines are viewed to come from the same IP, thereby making this", "DEL TagElement: @return", "DEL TextElement: <p/>", "DEL TextElement: <tt>HttpRequest</tt> attempting", "DEL MemberRef", "DEL Javadoc", "DEL TextElement: 1-to-1 relationship with a user's session.", "DEL TextElement: <p>Although convenient, this should only be enabled in environments where the", "DEL ReturnStatement", "DEL TextElement:  getSession", "DEL TextElement: system can <em>guarantee</em> that each IP address represents one and only one", "DEL TextElement:  must have the same", "DEL MethodDeclaration", "DEL Block", "DEL TextElement: session id may acquire that <tt>Session</tt>."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MemberRef", "DEL TextElement:  JavaDoc for an in-depth explanation of this property.", "DEL MethodDeclaration", "DEL ThisExpression", "DEL TagElement: @see", "DEL PrimitiveType: void", "DEL SimpleName: validateRequestOrigin", "DEL FieldAccess", "DEL SimpleName: validateRequestOrigin", "DEL TextElement:  whether or not to validate the request's origin when accessing", "DEL ExpressionStatement", "DEL SimpleName: isValidateRequestOrigin", "DEL TagElement: @param", "DEL SimpleName: validateRequestOrigin", "DEL SimpleName: validateRequestOrigin", "DEL Block", "DEL MemberRef", "DEL SimpleName: isValidateRequestOrigin", "DEL PrimitiveType: boolean", "DEL TextElement: the ", "DEL TagElement: @link", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement: Sets whether or not a request's origin will be validated when accessing a session.  See", "DEL Assignment: =", "DEL TagElement", "DEL TextElement: a session.", "DEL SimpleName: setValidateRequestOrigin", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL NullLiteral", "DEL SimpleName: cookieStore", "DEL PrimitiveType: void", "DEL SimpleName: cookieStore", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleType: CookieAttribute", "DEL IfStatement", "DEL ParameterizedType: CookieAttribute<Serializable>", "DEL SimpleName: cookieStore", "DEL InfixExpression: ==", "DEL SimpleName: setSessionIdCookieAttribute", "DEL Block", "DEL SimpleName: CookieAttribute", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: Serializable", "DEL SimpleName: Serializable", "DEL ExpressionStatement", "DEL SimpleName: getSessionIdCookieAttribute", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: ensureCookieSessionIdStore"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: protected", "DEL SimpleName: Serializable", "DEL VariableDeclarationStatement", "DEL SimpleType: RequestParamAttribute", "DEL ParameterizedType: RequestParamAttribute<Serializable>", "DEL MethodDeclaration", "DEL SimpleName: ensureRequestParamSessionIdStore", "DEL SimpleName: reqParamStore", "DEL SimpleType: Serializable", "DEL VariableDeclarationFragment", "DEL SimpleName: getSessionIdRequestParamAttribute", "DEL MethodInvocation", "DEL SimpleName: reqParamStore", "DEL SimpleName: setSessionIdRequestParamAttribute", "DEL PrimitiveType: void", "DEL Block", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleName: reqParamStore", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: RequestParamAttribute"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL StringLiteral: \"] originated from [\"", "DEL SimpleName: InetAddress", "DEL ThrowStatement", "DEL SimpleName: HostUnauthorizedException", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL StringLiteral: \"[\"", "DEL SimpleName: getId", "DEL IfStatement", "DEL SimpleType: InetAddress", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL SimpleName: getHostAddress", "DEL StringLiteral: \"Session with id [\"", "DEL Block", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: HostUnauthorizedException", "DEL MethodInvocation", "DEL SimpleName: requestIp", "DEL SimpleName: session", "DEL SimpleName: sessionId", "DEL IfStatement", "DEL Block", "DEL Block", "DEL SimpleName: originIp", "DEL StringLiteral: \"].  Disallowing session access: \"", "DEL SimpleType: Serializable", "DEL MethodDeclaration", "DEL SimpleName: equals", "DEL SimpleName: msg", "DEL Modifier: protected", "DEL SimpleName: String", "DEL SimpleType: InetAddress", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleName: requestIp", "DEL StringLiteral: \"from [\"", "DEL SimpleType: HostUnauthorizedException", "DEL NullLiteral", "DEL SimpleType: HostUnauthorizedException", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"].  Origin IP and request IP must match.\"", "DEL StringLiteral: \"], but the current HttpServletRequest originated \"", "DEL SimpleName: msg", "DEL SimpleName: originIp", "DEL SimpleName: requestIp", "DEL Block", "DEL SimpleName: String", "DEL StringLiteral: \"IP [\"", "DEL SimpleName: sessionId", "DEL SimpleName: Serializable", "DEL StringLiteral: \"].  Attempting to access session from \"", "DEL Block", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: HostUnauthorizedException", "DEL SimpleName: sessionId", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL InfixExpression: +", "DEL SimpleType: HostUnauthorizedException", "DEL SimpleType: Session", "DEL SimpleName: originIp", "DEL SimpleName: requestIp", "DEL SimpleName: requestIp", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: session", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleName: originIp", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"No IP Address associated with the current HttpServletRequest.  \"", "DEL SimpleType: String", "DEL SimpleName: sessionId", "DEL PrimitiveType: void", "DEL StringLiteral: \"No IP Address was specified when creating session with id [\"", "DEL InfixExpression: !=", "DEL StringLiteral: \"].  Request IP must match the session's origin \"", "DEL IfStatement", "DEL StringLiteral: \"session origin and request origin must match to allow access.\"", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: session", "DEL VariableDeclarationStatement", "DEL SimpleName: validateSessionOrigin", "DEL SimpleName: HostUnauthorizedException", "DEL ThrowStatement", "DEL StringLiteral: \"Session with id [\"", "DEL InfixExpression: ==", "DEL SimpleName: getInetAddress", "DEL SimpleName: msg", "DEL InfixExpression: +", "DEL SimpleName: requestIp", "DEL SimpleName: msg", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: request", "DEL StringLiteral: \"] originated from \"", "DEL SimpleName: Session", "DEL VariableDeclarationFragment", "DEL SimpleType: HostUnauthorizedException", "DEL SimpleName: msg", "DEL SimpleName: WebUtils", "DEL VariableDeclarationFragment", "DEL SimpleName: originIp", "DEL SimpleName: InetAddress", "DEL VariableDeclarationStatement", "DEL SimpleName: msg", "DEL StringLiteral: \"IP in order to gain access to that session.\"", "DEL Block", "DEL NullLiteral"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: existingId", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: currentId", "DEL IfStatement", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL NullLiteral", "DEL SimpleName: equals", "DEL PrefixExpression: !", "DEL SimpleName: existingId", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: existingId"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: request", "DEL SimpleName: session", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: onStart", "DEL SimpleName: response"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: session", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: request", "DEL Modifier: protected", "DEL Block", "DEL SimpleName: ServletResponse", "DEL SimpleType: Session", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleName: request", "DEL SimpleName: Session", "DEL SimpleType: ServletRequest", "DEL SimpleName: response", "DEL SimpleType: ServletResponse", "DEL SimpleName: ServletRequest", "DEL SimpleName: onSessionStart", "DEL SimpleName: onStart"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: request", "DEL Block", "DEL SimpleName: ServletRequest", "DEL PrimitiveType: void", "DEL SimpleName: onSessionStart", "DEL Modifier: protected", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: ServletRequest"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: sessionId", "DEL SimpleName: request", "DEL SimpleType: AuthorizationException", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: InvalidSessionException", "DEL Block", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: getRequiredServletRequest", "DEL SimpleName: Serializable", "DEL SimpleName: sessionId", "DEL SimpleName: request", "DEL SimpleName: response", "DEL MethodDeclaration", "DEL SimpleName: WebUtils", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: ServletResponse", "DEL SimpleType: InvalidSessionException", "DEL NullLiteral", "DEL SimpleType: Serializable", "DEL SimpleName: AuthorizationException", "DEL SimpleName: ServletRequest", "DEL SimpleName: Session", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL SimpleType: Session", "DEL SimpleName: retrieveSessionFromDataSource", "DEL SimpleType: ServletResponse", "DEL MarkerAnnotation", "DEL SimpleName: response", "DEL SimpleType: ServletRequest", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: sessionId", "DEL SimpleName: WebUtils", "DEL MethodInvocation", "DEL SimpleName: getRequiredServletResponse", "DEL SimpleName: retrieveSession", "DEL SimpleName: getSession"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  the Session associated with the incoming request or <tt>null</tt> if one does not exist.", "DEL TextElement: exist or it was invalid.", "DEL TagElement: @return", "DEL SimpleName: request", "DEL TextElement:  outgoing servlet response", "DEL TextElement: Returns the Session associated with the specified request if it is valid or <tt>null</tt> if a Session doesn't", "DEL TagElement: @throws", "DEL TagElement", "DEL QualifiedName: org.apache.shiro.authz.AuthorizationException", "DEL Javadoc", "DEL TextElement: if the caller is not authorized to access the session associated with the request.", "DEL TextElement:   incoming servlet request", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleName: response"]}, {"root": "DEL SimpleType: Session", "operations": ["DEL SimpleType: Session", "DEL SimpleName: Session"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: request", "DEL SimpleType: ServletRequest", "DEL SingleVariableDeclaration", "DEL SimpleName: ServletRequest"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: ServletResponse", "DEL SimpleName: response", "DEL SimpleType: ServletResponse", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleType: InvalidSessionException", "operations": ["DEL SimpleType: InvalidSessionException", "DEL SimpleName: InvalidSessionException"]}, {"root": "DEL SimpleType: AuthorizationException", "operations": ["DEL SimpleName: AuthorizationException", "DEL SimpleType: AuthorizationException"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: session", "DEL SimpleType: Session", "DEL SimpleName: Session", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: request", "DEL SimpleName: getReferencedSessionId", "DEL SimpleName: Serializable", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: Serializable", "DEL SimpleName: sessionId", "DEL SimpleName: response", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: ise", "DEL IfStatement", "DEL SimpleName: log", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL SimpleName: removeSessionIdCookie", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: handleInvalidSession", "DEL SimpleName: log", "DEL SimpleName: sessionId", "DEL ExpressionStatement", "DEL SimpleName: session", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: isValidateRequestOrigin", "DEL Block", "DEL IfStatement", "DEL SimpleName: request", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleName: setAttribute", "DEL MethodInvocation", "DEL SimpleName: request", "DEL MethodInvocation", "DEL Block", "DEL CatchClause", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: isTraceEnabled", "DEL NullLiteral", "DEL SimpleName: getMessage", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: response", "DEL TryStatement", "DEL QualifiedName: ShiroHttpServletRequest.REFERENCED_SESSION_ID", "DEL SimpleName: log", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL SimpleName: log", "DEL MethodInvocation", "DEL SimpleName: isTraceEnabled", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: InvalidSessionException", "DEL StringLiteral: \"] is invalid, message: [\"", "DEL SimpleName: log", "DEL SimpleName: ise", "DEL SimpleName: log", "DEL MethodInvocation", "DEL StringLiteral: \"Request Session with id [\"", "DEL IfStatement", "DEL Block", "DEL StringLiteral: \"].  Removing any associated session cookie...\"", "DEL SimpleName: debug", "DEL Assignment: =", "DEL SimpleName: session", "DEL SimpleName: getSessionId", "DEL SimpleName: InvalidSessionException", "DEL SimpleName: request", "DEL SimpleName: session", "DEL SimpleName: markSessionIdValid", "DEL SimpleName: request", "DEL SimpleName: sessionId", "DEL StringLiteral: \"Validating request origin against session origin\"", "DEL SimpleName: response", "DEL MethodInvocation", "DEL StringLiteral: \"A valid Shiro session id was not associated with the current request.\"", "DEL Assignment: =", "DEL SimpleName: sessionId", "DEL SimpleName: request", "DEL SimpleName: isDebugEnabled", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: validateSessionOrigin", "DEL SimpleName: sessionId", "DEL SimpleName: ise", "DEL SimpleName: ise", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: retrieveSessionFromDataSource"]}, {"root": "DEL SimpleName: session", "operations": ["DEL SimpleName: session"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: InvalidSessionException", "DEL Modifier: protected", "DEL SimpleName: isTraceEnabled", "DEL SingleVariableDeclaration", "DEL SimpleType: ServletRequest", "DEL SimpleName: log", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL StringLiteral: \"Sesssion associated with the current request is nonexistent or invalid.  Returning null.\"", "DEL SimpleName: request", "DEL SimpleName: handleInvalidSession", "DEL Block", "DEL SimpleType: Session", "DEL Block", "DEL SimpleName: InvalidSessionException", "DEL MethodInvocation", "DEL SimpleName: Session", "DEL IfStatement", "DEL ReturnStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SingleVariableDeclaration", "DEL SimpleName: ise", "DEL SimpleName: trace", "DEL SimpleName: ServletRequest"]}]}}, {"DefaultWebSessionManager_diff": {"operations": ["Insert MethodDeclaration(109) into TypeDeclaration: class(569) at 8", "Update Modifier: protected(73) to private", "Update Modifier: protected(83) to private", "Move Modifier: public(93) into MethodDeclaration(109) at 0", "Move SimpleName: DefaultWebSessionManager(94) into MethodDeclaration(109) at 1", "Insert Block(108) into MethodDeclaration(109) at 2", "Move SimpleType: Serializable(555) into MethodDeclaration(510) at 2", "Update SimpleName: getSession(865) to getSessionId", "Move SingleVariableDeclaration(408) into MethodDeclaration(510) at 5", "Move SingleVariableDeclaration(1000) into MethodDeclaration(510) at 6", "Move ExpressionStatement(354) into Block(108) at 0", "Move ExpressionStatement(359) into Block(108) at 1", "Move ExpressionStatement(393) into Block(108) at 2", "Move ExpressionStatement(579) into Block(309) at 1", "Move VariableDeclarationStatement(768) into Block(490) at 2", "Move ExpressionStatement(774) into Block(490) at 3", "Move ExpressionStatement(792) into Block(490) at 4", "Move ExpressionStatement(798) into Block(490) at 5", "Move MethodInvocation(560) into ReturnStatement(508) at 0", "Insert FieldAccess(79) into Assignment: =(87) at 0", "Insert FieldAccess(91) into MethodInvocation(94) at 0", "Insert FieldAccess(98) into Assignment: =(106) at 0", "Insert ThisExpression(77) into FieldAccess(79) at 0", "Insert SimpleName: sessionIdCookieAttribute(78) into FieldAccess(79) at 1", "Insert ThisExpression(89) into FieldAccess(91) at 0", "Insert SimpleName: sessionIdCookieAttribute(90) into FieldAccess(91) at 1", "Insert ThisExpression(96) into FieldAccess(98) at 0", "Insert SimpleName: sessionIdRequestParamAttribute(97) into FieldAccess(98) at 1", "Delete QualifiedName: org.apache.shiro.authz.AuthorizationException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.shiro.authz.HostUnauthorizedException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.shiro.session.InvalidSessionException(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.net.InetAddress(34)", "Delete ImportDeclaration(35)", "Delete TextElement: Property specifying if, after a session object is acquired from the request, if that session should be(63)", "Delete TextElement: validated to ensure the starting origin of the session is the same as the incoming request.(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: private(67)", "Delete PrimitiveType: boolean(68)", "Delete SimpleName: validateRequestOrigin(69)", "Delete BooleanLiteral: false(70)", "Delete VariableDeclarationFragment(71)", "Delete FieldDeclaration(72)", "Delete SimpleName: cookieStore(345)", "Delete SimpleName: cookieStore(355)", "Delete SimpleName: reqParamStore(384)", "Delete SimpleName: ensureCookieSessionIdStore(95)", "Delete MethodInvocation(96)", "Delete ExpressionStatement(97)", "Delete SimpleName: ensureRequestParamSessionIdStore(98)", "Delete MethodInvocation(99)", "Delete ExpressionStatement(100)", "Delete Block(101)", "Delete MethodDeclaration(102)", "Delete TextElement: If set to <tt>true</tt>, this implementation will ensure that any(161)", "Delete TextElement: <tt>HttpRequest</tt> attempting(162)", "Delete TextElement: to join a session (i.e. via (163)", "Delete SimpleName: getSession(164)", "Delete MemberRef(165)", "Delete TextElement:  getSession(166)", "Delete TagElement: @link(167)", "Delete TextElement:  must have the same(168)", "Delete TextElement: IP Address of the <tt>HttpRequest</tt> that started the session.(169)", "Delete TextElement: <p/>(170)", "Delete TextElement: <p> If set to <tt>false</tt>, any <tt>HttpRequest</tt> with a reference to a valid(171)", "Delete TextElement: session id may acquire that <tt>Session</tt>.(172)", "Delete TextElement: <p/>(173)", "Delete TextElement: <p>Although convenient, this should only be enabled in environments where the(174)", "Delete TextElement: system can <em>guarantee</em> that each IP address represents one and only one(175)", "Delete TextElement: machine accessing the system.(176)", "Delete TextElement: <p/>(177)", "Delete TextElement: <p>Public websites are not good candidates for enabling this(178)", "Delete TextElement: feature since many browser clients often sit behind NAT routers (in(179)", "Delete TextElement: which case many machines are viewed to come from the same IP, thereby making this(180)", "Delete TextElement: validation check useless).  Also, some internet service providers (e.g. AOL) may change a(181)", "Delete TextElement: client's IP in mid-session, making subsequent requests appear to come from a different(182)", "Delete TextElement: location.  Again, this feature should only be enabled where IP Addresses can be guaranteed a(183)", "Delete TextElement: 1-to-1 relationship with a user's session.(184)", "Delete TextElement: <p/>(185)", "Delete TextElement: <p>For the reasons specified above, this property is <tt>false</tt> by default.(186)", "Delete TagElement(187)", "Delete TextElement:  true if this factory will verify each HttpRequest joining a session(188)", "Delete TagElement: @return(189)", "Delete Javadoc(190)", "Delete Modifier: public(191)", "Delete PrimitiveType: boolean(192)", "Delete SimpleName: isValidateRequestOrigin(193)", "Delete SimpleName: validateRequestOrigin(194)", "Delete ReturnStatement(195)", "Delete Block(196)", "Delete MethodDeclaration(197)", "Delete TextElement: Sets whether or not a request's origin will be validated when accessing a session.  See(198)", "Delete TextElement: the (199)", "Delete SimpleName: isValidateRequestOrigin(200)", "Delete MemberRef(201)", "Delete TagElement: @link(202)", "Delete TextElement:  JavaDoc for an in-depth explanation of this property.(203)", "Delete TagElement(204)", "Delete SimpleName: validateRequestOrigin(205)", "Delete TextElement:  whether or not to validate the request's origin when accessing(206)", "Delete TextElement: a session.(207)", "Delete TagElement: @param(208)", "Delete SimpleName: isValidateRequestOrigin(209)", "Delete MemberRef(210)", "Delete TagElement: @see(211)", "Delete Javadoc(212)", "Delete Modifier: public(213)", "Delete PrimitiveType: void(214)", "Delete SimpleName: setValidateRequestOrigin(215)", "Delete PrimitiveType: boolean(216)", "Delete SimpleName: validateRequestOrigin(217)", "Delete SingleVariableDeclaration(218)", "Delete ThisExpression(219)", "Delete SimpleName: validateRequestOrigin(220)", "Delete FieldAccess(221)", "Delete SimpleName: validateRequestOrigin(222)", "Delete Assignment: =(223)", "Delete ExpressionStatement(224)", "Delete Block(225)", "Delete MethodDeclaration(226)", "Delete Modifier: protected(329)", "Delete PrimitiveType: void(330)", "Delete SimpleName: ensureCookieSessionIdStore(331)", "Delete SimpleName: CookieAttribute(332)", "Delete SimpleType: CookieAttribute(333)", "Delete SimpleName: Serializable(334)", "Delete SimpleType: Serializable(335)", "Delete ParameterizedType: CookieAttribute<Serializable>(336)", "Delete SimpleName: cookieStore(337)", "Delete SimpleName: getSessionIdCookieAttribute(338)", "Delete MethodInvocation(339)", "Delete VariableDeclarationFragment(340)", "Delete VariableDeclarationStatement(341)", "Delete SimpleName: cookieStore(342)", "Delete NullLiteral(343)", "Delete InfixExpression: ==(344)", "Delete SimpleName: setSessionIdCookieAttribute(360)", "Delete SimpleName: cookieStore(361)", "Delete MethodInvocation(362)", "Delete ExpressionStatement(363)", "Delete Block(364)", "Delete IfStatement(365)", "Delete Block(366)", "Delete MethodDeclaration(367)", "Delete Modifier: protected(368)", "Delete PrimitiveType: void(369)", "Delete SimpleName: ensureRequestParamSessionIdStore(370)", "Delete SimpleName: RequestParamAttribute(371)", "Delete SimpleType: RequestParamAttribute(372)", "Delete SimpleName: Serializable(373)", "Delete SimpleType: Serializable(374)", "Delete ParameterizedType: RequestParamAttribute<Serializable>(375)", "Delete SimpleName: reqParamStore(376)", "Delete SimpleName: getSessionIdRequestParamAttribute(377)", "Delete MethodInvocation(378)", "Delete VariableDeclarationFragment(379)", "Delete VariableDeclarationStatement(380)", "Delete SimpleName: reqParamStore(381)", "Delete NullLiteral(382)", "Delete InfixExpression: ==(383)", "Delete SimpleName: setSessionIdRequestParamAttribute(394)", "Delete SimpleName: reqParamStore(395)", "Delete MethodInvocation(396)", "Delete ExpressionStatement(397)", "Delete Block(398)", "Delete IfStatement(399)", "Delete Block(400)", "Delete MethodDeclaration(401)", "Delete Modifier: protected(402)", "Delete PrimitiveType: void(403)", "Delete SimpleName: validateSessionOrigin(404)", "Delete SimpleName: Session(409)", "Delete SimpleType: Session(410)", "Delete SimpleName: session(411)", "Delete SingleVariableDeclaration(412)", "Delete SimpleName: HostUnauthorizedException(413)", "Delete SimpleType: HostUnauthorizedException(414)", "Delete SimpleName: InetAddress(415)", "Delete SimpleType: InetAddress(416)", "Delete SimpleName: requestIp(417)", "Delete SimpleName: WebUtils(418)", "Delete SimpleName: getInetAddress(419)", "Delete SimpleName: request(420)", "Delete MethodInvocation(421)", "Delete VariableDeclarationFragment(422)", "Delete VariableDeclarationStatement(423)", "Delete SimpleName: InetAddress(424)", "Delete SimpleType: InetAddress(425)", "Delete SimpleName: originIp(426)", "Delete SimpleName: session(427)", "Delete SimpleName: getHostAddress(428)", "Delete MethodInvocation(429)", "Delete VariableDeclarationFragment(430)", "Delete VariableDeclarationStatement(431)", "Delete SimpleName: Serializable(432)", "Delete SimpleType: Serializable(433)", "Delete SimpleName: sessionId(434)", "Delete SimpleName: session(435)", "Delete SimpleName: getId(436)", "Delete MethodInvocation(437)", "Delete VariableDeclarationFragment(438)", "Delete VariableDeclarationStatement(439)", "Delete SimpleName: originIp(440)", "Delete NullLiteral(441)", "Delete InfixExpression: ==(442)", "Delete SimpleName: requestIp(443)", "Delete NullLiteral(444)", "Delete InfixExpression: !=(445)", "Delete SimpleName: String(446)", "Delete SimpleType: String(447)", "Delete SimpleName: msg(448)", "Delete StringLiteral: \"No IP Address was specified when creating session with id [\"(449)", "Delete SimpleName: sessionId(450)", "Delete StringLiteral: \"].  Attempting to access session from \"(451)", "Delete StringLiteral: \"IP [\"(452)", "Delete SimpleName: requestIp(453)", "Delete StringLiteral: \"].  Origin IP and request IP must match.\"(454)", "Delete InfixExpression: +(455)", "Delete VariableDeclarationFragment(456)", "Delete VariableDeclarationStatement(457)", "Delete SimpleName: HostUnauthorizedException(458)", "Delete SimpleType: HostUnauthorizedException(459)", "Delete SimpleName: msg(460)", "Delete ClassInstanceCreation(461)", "Delete ThrowStatement(462)", "Delete Block(463)", "Delete IfStatement(464)", "Delete Block(465)", "Delete SimpleName: requestIp(466)", "Delete NullLiteral(467)", "Delete InfixExpression: !=(468)", "Delete SimpleName: requestIp(469)", "Delete SimpleName: equals(470)", "Delete SimpleName: originIp(471)", "Delete MethodInvocation(472)", "Delete PrefixExpression: !(473)", "Delete SimpleName: String(474)", "Delete SimpleType: String(475)", "Delete SimpleName: msg(476)", "Delete StringLiteral: \"Session with id [\"(477)", "Delete SimpleName: sessionId(478)", "Delete StringLiteral: \"] originated from [\"(479)", "Delete SimpleName: originIp(480)", "Delete StringLiteral: \"], but the current HttpServletRequest originated \"(481)", "Delete StringLiteral: \"from [\"(482)", "Delete SimpleName: requestIp(483)", "Delete StringLiteral: \"].  Disallowing session access: \"(484)", "Delete StringLiteral: \"session origin and request origin must match to allow access.\"(485)", "Delete InfixExpression: +(486)", "Delete VariableDeclarationFragment(487)", "Delete VariableDeclarationStatement(488)", "Delete SimpleName: HostUnauthorizedException(489)", "Delete SimpleType: HostUnauthorizedException(490)", "Delete SimpleName: msg(491)", "Delete ClassInstanceCreation(492)", "Delete ThrowStatement(493)", "Delete Block(494)", "Delete IfStatement(495)", "Delete Block(496)", "Delete SimpleName: String(497)", "Delete SimpleType: String(498)", "Delete SimpleName: msg(499)", "Delete StringLiteral: \"No IP Address associated with the current HttpServletRequest.  \"(500)", "Delete StringLiteral: \"Session with id [\"(501)", "Delete InfixExpression: +(502)", "Delete SimpleName: sessionId(503)", "Delete StringLiteral: \"] originated from \"(504)", "Delete StringLiteral: \"[\"(505)", "Delete SimpleName: originIp(506)", "Delete StringLiteral: \"].  Request IP must match the session's origin \"(507)", "Delete StringLiteral: \"IP in order to gain access to that session.\"(508)", "Delete InfixExpression: +(509)", "Delete VariableDeclarationFragment(510)", "Delete VariableDeclarationStatement(511)", "Delete SimpleName: HostUnauthorizedException(512)", "Delete SimpleType: HostUnauthorizedException(513)", "Delete SimpleName: msg(514)", "Delete ClassInstanceCreation(515)", "Delete ThrowStatement(516)", "Delete Block(517)", "Delete IfStatement(518)", "Delete Block(519)", "Delete IfStatement(520)", "Delete Block(521)", "Delete MethodDeclaration(522)", "Delete SimpleName: existingId(556)", "Delete VariableDeclarationFragment(561)", "Delete VariableDeclarationStatement(562)", "Delete SimpleName: existingId(563)", "Delete NullLiteral(564)", "Delete InfixExpression: ==(565)", "Delete SimpleName: currentId(566)", "Delete SimpleName: equals(567)", "Delete SimpleName: existingId(568)", "Delete MethodInvocation(569)", "Delete PrefixExpression: !(570)", "Delete InfixExpression: ||(571)", "Delete Block(580)", "Delete IfStatement(581)", "Delete SimpleName: onStart(738)", "Delete SimpleName: session(739)", "Delete SimpleName: request(740)", "Delete SimpleName: response(741)", "Delete MethodInvocation(742)", "Delete ExpressionStatement(743)", "Delete Modifier: protected(746)", "Delete PrimitiveType: void(747)", "Delete SimpleName: onStart(748)", "Delete SimpleName: Session(749)", "Delete SimpleType: Session(750)", "Delete SimpleName: session(751)", "Delete SingleVariableDeclaration(752)", "Delete SimpleName: ServletRequest(753)", "Delete SimpleType: ServletRequest(754)", "Delete SimpleName: request(755)", "Delete SingleVariableDeclaration(756)", "Delete SimpleName: ServletResponse(757)", "Delete SimpleType: ServletResponse(758)", "Delete SimpleName: response(759)", "Delete SingleVariableDeclaration(760)", "Delete SimpleName: onSessionStart(775)", "Delete SimpleName: request(776)", "Delete MethodInvocation(777)", "Delete ExpressionStatement(778)", "Delete Block(779)", "Delete MethodDeclaration(780)", "Delete Modifier: protected(781)", "Delete PrimitiveType: void(782)", "Delete SimpleName: onSessionStart(783)", "Delete SimpleName: ServletRequest(784)", "Delete SimpleType: ServletRequest(785)", "Delete SimpleName: request(786)", "Delete SingleVariableDeclaration(787)", "Delete Block(799)", "Delete MethodDeclaration(800)", "Delete SimpleName: Override(801)", "Delete MarkerAnnotation(802)", "Delete Modifier: protected(803)", "Delete SimpleName: Session(804)", "Delete SimpleType: Session(805)", "Delete SimpleName: retrieveSession(806)", "Delete SimpleName: Serializable(807)", "Delete SimpleType: Serializable(808)", "Delete SimpleName: sessionId(809)", "Delete SingleVariableDeclaration(810)", "Delete SimpleName: InvalidSessionException(811)", "Delete SimpleType: InvalidSessionException(812)", "Delete SimpleName: AuthorizationException(813)", "Delete SimpleType: AuthorizationException(814)", "Delete SimpleName: sessionId(815)", "Delete NullLiteral(816)", "Delete InfixExpression: ==(817)", "Delete SimpleName: ServletRequest(818)", "Delete SimpleType: ServletRequest(819)", "Delete SimpleName: request(820)", "Delete SimpleName: WebUtils(821)", "Delete SimpleName: getRequiredServletRequest(822)", "Delete MethodInvocation(823)", "Delete VariableDeclarationFragment(824)", "Delete VariableDeclarationStatement(825)", "Delete SimpleName: ServletResponse(826)", "Delete SimpleType: ServletResponse(827)", "Delete SimpleName: response(828)", "Delete SimpleName: WebUtils(829)", "Delete SimpleName: getRequiredServletResponse(830)", "Delete MethodInvocation(831)", "Delete VariableDeclarationFragment(832)", "Delete VariableDeclarationStatement(833)", "Delete SimpleName: getSession(834)", "Delete SimpleName: request(835)", "Delete SimpleName: response(836)", "Delete MethodInvocation(837)", "Delete ReturnStatement(838)", "Delete Block(839)", "Delete IfStatement(840)", "Delete SimpleName: retrieveSessionFromDataSource(841)", "Delete SimpleName: sessionId(842)", "Delete MethodInvocation(843)", "Delete ReturnStatement(844)", "Delete Block(845)", "Delete MethodDeclaration(846)", "Delete TextElement: Returns the Session associated with the specified request if it is valid or <tt>null</tt> if a Session doesn't(847)", "Delete TextElement: exist or it was invalid.(848)", "Delete TagElement(849)", "Delete SimpleName: request(850)", "Delete TextElement:   incoming servlet request(851)", "Delete TagElement: @param(852)", "Delete SimpleName: response(853)", "Delete TextElement:  outgoing servlet response(854)", "Delete TagElement: @param(855)", "Delete TextElement:  the Session associated with the incoming request or <tt>null</tt> if one does not exist.(856)", "Delete TagElement: @return(857)", "Delete QualifiedName: org.apache.shiro.authz.AuthorizationException(858)", "Delete TextElement: if the caller is not authorized to access the session associated with the request.(859)", "Delete TagElement: @throws(860)", "Delete Javadoc(861)", "Delete SimpleName: Session(863)", "Delete SimpleType: Session(864)", "Delete SimpleName: ServletRequest(866)", "Delete SimpleType: ServletRequest(867)", "Delete SimpleName: request(868)", "Delete SingleVariableDeclaration(869)", "Delete SimpleName: ServletResponse(870)", "Delete SimpleType: ServletResponse(871)", "Delete SimpleName: response(872)", "Delete SingleVariableDeclaration(873)", "Delete SimpleName: InvalidSessionException(874)", "Delete SimpleType: InvalidSessionException(875)", "Delete SimpleName: AuthorizationException(876)", "Delete SimpleType: AuthorizationException(877)", "Delete SimpleName: Session(878)", "Delete SimpleType: Session(879)", "Delete SimpleName: session(880)", "Delete NullLiteral(881)", "Delete VariableDeclarationFragment(882)", "Delete VariableDeclarationStatement(883)", "Delete SimpleName: Serializable(884)", "Delete SimpleType: Serializable(885)", "Delete SimpleName: sessionId(886)", "Delete SimpleName: getReferencedSessionId(887)", "Delete SimpleName: request(888)", "Delete SimpleName: response(889)", "Delete MethodInvocation(890)", "Delete VariableDeclarationFragment(891)", "Delete VariableDeclarationStatement(892)", "Delete SimpleName: sessionId(893)", "Delete NullLiteral(894)", "Delete InfixExpression: !=(895)", "Delete SimpleName: request(896)", "Delete SimpleName: setAttribute(897)", "Delete QualifiedName: ShiroHttpServletRequest.REFERENCED_SESSION_ID(898)", "Delete SimpleName: sessionId(899)", "Delete MethodInvocation(900)", "Delete ExpressionStatement(901)", "Delete SimpleName: session(902)", "Delete SimpleName: retrieveSessionFromDataSource(903)", "Delete SimpleName: sessionId(904)", "Delete MethodInvocation(905)", "Delete Assignment: =(906)", "Delete ExpressionStatement(907)", "Delete SimpleName: markSessionIdValid(908)", "Delete SimpleName: sessionId(909)", "Delete SimpleName: request(910)", "Delete MethodInvocation(911)", "Delete ExpressionStatement(912)", "Delete Block(913)", "Delete SimpleName: InvalidSessionException(914)", "Delete SimpleType: InvalidSessionException(915)", "Delete SimpleName: ise(916)", "Delete SingleVariableDeclaration(917)", "Delete SimpleName: log(918)", "Delete SimpleName: isTraceEnabled(919)", "Delete MethodInvocation(920)", "Delete SimpleName: log(921)", "Delete SimpleName: trace(922)", "Delete StringLiteral: \"Request Session with id [\"(923)", "Delete SimpleName: ise(924)", "Delete SimpleName: getSessionId(925)", "Delete MethodInvocation(926)", "Delete StringLiteral: \"] is invalid, message: [\"(927)", "Delete SimpleName: ise(928)", "Delete SimpleName: getMessage(929)", "Delete MethodInvocation(930)", "Delete StringLiteral: \"].  Removing any associated session cookie...\"(931)", "Delete InfixExpression: +(932)", "Delete MethodInvocation(933)", "Delete ExpressionStatement(934)", "Delete Block(935)", "Delete IfStatement(936)", "Delete SimpleName: removeSessionIdCookie(937)", "Delete SimpleName: request(938)", "Delete SimpleName: response(939)", "Delete MethodInvocation(940)", "Delete ExpressionStatement(941)", "Delete SimpleName: session(942)", "Delete SimpleName: handleInvalidSession(943)", "Delete SimpleName: request(944)", "Delete SimpleName: response(945)", "Delete SimpleName: ise(946)", "Delete MethodInvocation(947)", "Delete Assignment: =(948)", "Delete ExpressionStatement(949)", "Delete Block(950)", "Delete CatchClause(951)", "Delete TryStatement(952)", "Delete SimpleName: isValidateRequestOrigin(953)", "Delete MethodInvocation(954)", "Delete SimpleName: log(955)", "Delete SimpleName: isDebugEnabled(956)", "Delete MethodInvocation(957)", "Delete SimpleName: log(958)", "Delete SimpleName: debug(959)", "Delete StringLiteral: \"Validating request origin against session origin\"(960)", "Delete MethodInvocation(961)", "Delete ExpressionStatement(962)", "Delete Block(963)", "Delete IfStatement(964)", "Delete SimpleName: validateSessionOrigin(965)", "Delete SimpleName: request(966)", "Delete SimpleName: session(967)", "Delete MethodInvocation(968)", "Delete ExpressionStatement(969)", "Delete Block(970)", "Delete IfStatement(971)", "Delete Block(972)", "Delete SimpleName: log(973)", "Delete SimpleName: isTraceEnabled(974)", "Delete MethodInvocation(975)", "Delete SimpleName: log(976)", "Delete SimpleName: trace(977)", "Delete StringLiteral: \"A valid Shiro session id was not associated with the current request.\"(978)", "Delete MethodInvocation(979)", "Delete ExpressionStatement(980)", "Delete Block(981)", "Delete IfStatement(982)", "Delete Block(983)", "Delete IfStatement(984)", "Delete SimpleName: session(985)", "Delete Modifier: protected(989)", "Delete SimpleName: Session(990)", "Delete SimpleType: Session(991)", "Delete SimpleName: handleInvalidSession(992)", "Delete SimpleName: ServletRequest(993)", "Delete SimpleType: ServletRequest(994)", "Delete SimpleName: request(995)", "Delete SingleVariableDeclaration(996)", "Delete SimpleName: InvalidSessionException(1001)", "Delete SimpleType: InvalidSessionException(1002)", "Delete SimpleName: ise(1003)", "Delete SingleVariableDeclaration(1004)", "Delete SimpleName: log(1005)", "Delete SimpleName: isTraceEnabled(1006)", "Delete MethodInvocation(1007)", "Delete SimpleName: log(1008)", "Delete SimpleName: trace(1009)", "Delete StringLiteral: \"Sesssion associated with the current request is nonexistent or invalid.  Returning null.\"(1010)", "Delete MethodInvocation(1011)", "Delete ExpressionStatement(1012)", "Delete Block(1013)", "Delete IfStatement(1014)", "Delete NullLiteral(1015)", "Delete ReturnStatement(1016)", "Delete Block(1017)", "Delete MethodDeclaration(1018)"]}}, {"ServletContainerSessionManager_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: getSessionId to MethodDeclaration at 2", "INS SimpleType: HttpSession to VariableDeclarationStatement at 0", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: request to CastExpression at 1", "INS SimpleName: ServletResponse to SimpleType: ServletResponse at 0", "INS SimpleType: HttpServletRequest to CastExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ConditionalExpression at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: ServletRequest to SingleVariableDeclaration at 0", "INS NullLiteral to ConditionalExpression at 2", "INS SimpleName: httpSession to VariableDeclarationFragment at 0", "INS SimpleType: ServletResponse to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: httpSession to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: HttpServletRequest to SimpleType: HttpServletRequest at 0", "INS SimpleName: ServletRequest to SimpleType: ServletRequest at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleType: Serializable to MethodDeclaration at 1", "INS SimpleName: request to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getId to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS BooleanLiteral: false to MethodInvocation at 2", "INS SimpleName: httpSession to MethodInvocation at 0", "INS SimpleName: HttpSession to SimpleType: HttpSession at 0", "INS SimpleName: Serializable to SimpleType: Serializable at 0", "INS SimpleName: getSession to MethodInvocation at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: response to SingleVariableDeclaration at 1"]}]}}, {"ServletContainerSessionManager_diff": {"operations": ["Insert MethodDeclaration(194) into TypeDeclaration: class(301) at 8", "Insert Modifier: public(159) into MethodDeclaration(194) at 0", "Insert SimpleType: Serializable(161) into MethodDeclaration(194) at 1", "Insert SimpleName: getSessionId(162) into MethodDeclaration(194) at 2", "Insert SingleVariableDeclaration(166) into MethodDeclaration(194) at 3", "Insert SingleVariableDeclaration(170) into MethodDeclaration(194) at 4", "Insert Block(193) into MethodDeclaration(194) at 5", "Insert SimpleName: Serializable(160) into SimpleType: Serializable(161) at 0", "Insert SimpleType: ServletRequest(164) into SingleVariableDeclaration(166) at 0", "Insert SimpleName: request(165) into SingleVariableDeclaration(166) at 1", "Insert SimpleType: ServletResponse(168) into SingleVariableDeclaration(170) at 0", "Insert SimpleName: response(169) into SingleVariableDeclaration(170) at 1", "Insert VariableDeclarationStatement(183) into Block(193) at 0", "Insert ReturnStatement(192) into Block(193) at 1", "Insert SimpleName: ServletRequest(163) into SimpleType: ServletRequest(164) at 0", "Insert SimpleName: ServletResponse(167) into SimpleType: ServletResponse(168) at 0", "Insert SimpleType: HttpSession(172) into VariableDeclarationStatement(183) at 0", "Insert VariableDeclarationFragment(182) into VariableDeclarationStatement(183) at 1", "Insert ConditionalExpression(191) into ReturnStatement(192) at 0", "Insert SimpleName: HttpSession(171) into SimpleType: HttpSession(172) at 0", "Insert SimpleName: httpSession(173) into VariableDeclarationFragment(182) at 0", "Insert MethodInvocation(181) into VariableDeclarationFragment(182) at 1", "Insert InfixExpression: !=(186) into ConditionalExpression(191) at 0", "Insert MethodInvocation(189) into ConditionalExpression(191) at 1", "Insert NullLiteral(190) into ConditionalExpression(191) at 2", "Insert ParenthesizedExpression(178) into MethodInvocation(181) at 0", "Insert SimpleName: getSession(179) into MethodInvocation(181) at 1", "Insert BooleanLiteral: false(180) into MethodInvocation(181) at 2", "Insert SimpleName: httpSession(184) into InfixExpression: !=(186) at 0", "Insert NullLiteral(185) into InfixExpression: !=(186) at 1", "Insert SimpleName: httpSession(187) into MethodInvocation(189) at 0", "Insert SimpleName: getId(188) into MethodInvocation(189) at 1", "Insert CastExpression(177) into ParenthesizedExpression(178) at 0", "Insert SimpleType: HttpServletRequest(175) into CastExpression(177) at 0", "Insert SimpleName: request(176) into CastExpression(177) at 1", "Insert SimpleName: HttpServletRequest(174) into SimpleType: HttpServletRequest(175) at 0"]}}, {"WebSessionManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from org.apache.shiro.session.Session to java.io.Serializable", "operations": ["UPD QualifiedName: org.apache.shiro.session.Session from org.apache.shiro.session.Session to java.io.Serializable"]}, {"root": "UPDATE from Session to Serializable", "operations": ["UPD SimpleName: Session from Session to Serializable", "UPD SimpleType: Session from Session to Serializable"]}, {"root": "UPDATE from getSession to getSessionId", "operations": ["UPD SimpleName: getSession from getSession to getSessionId"]}, {"root": "INS TextElement: A  to TagElement at 0", "operations": ["INS TextElement: A  to TagElement at 0"]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TagElement: @code to TagElement at 1"]}, {"root": "INS TextElement:  is a  to TagElement at 2", "operations": ["INS TextElement:  is a  to TagElement at 2"]}, {"root": "UPDATE from @link to @code", "operations": ["UPD TagElement: @link from @link to @code", "UPD TagElement: @link from @link to @code", "UPD TagElement: @link from @link to @code"]}, {"root": "UPDATE from s based on a  to  that has the ability to obtain session ids based on a", "operations": ["UPD TextElement: s based on a  from s based on a  to  that has the ability to obtain session ids based on a"]}, {"root": "UPDATE from pair. to  pair.", "operations": ["UPD TextElement: pair. from pair. to  pair."]}, {"root": "INS TagElement: @since to Javadoc at 4", "operations": ["INS TagElement: @since to Javadoc at 4", "INS TextElement:  1.0 to TagElement: @since at 0"]}, {"root": "UPDATE from A <code>WebSessionManager</code> is a <code>SessionManager</code> that has the ability to obtain to  WebSessionManager", "operations": ["UPD TextElement: A <code>WebSessionManager</code> is a <code>SessionManager</code> that has the ability to obtain from A <code>WebSessionManager</code> is a <code>SessionManager</code> that has the ability to obtain to  WebSessionManager"]}, {"root": "MOVE from TagElement: @code", "operations": ["MOV TextElement: A <code>WebSessionManager</code> is a <code>SessionManager</code> that has the ability to obtain to TagElement: @code at 0"]}, {"root": "UPDATE from  Session to  SessionManager", "operations": ["UPD TextElement:  Session from  Session to  SessionManager"]}, {"root": "UPDATE from Returns the current  to Returns the session id associated with the specified request pair or ", "operations": ["UPD TextElement: Returns the current  from Returns the current  to Returns the session id associated with the specified request pair or "]}, {"root": "UPDATE from  associated with the specified request pair, or to  if there is no session", "operations": ["UPD TextElement:  associated with the specified request pair, or from  associated with the specified request pair, or to  if there is no session"]}, {"root": "UPDATE from <code>null</code> if there is no session associated with the request. to associated with the request.", "operations": ["UPD TextElement: <code>null</code> if there is no session associated with the request. from <code>null</code> if there is no session associated with the request. to associated with the request."]}, {"root": "UPDATE from  the incoming <code>ServletRequest</code> to   the incoming ", "operations": ["UPD TextElement:  the incoming <code>ServletRequest</code> from  the incoming <code>ServletRequest</code> to   the incoming "]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TextElement:  ServletRequest to TagElement: @code at 0", "INS TagElement: @code to TagElement: @param at 2"]}, {"root": "UPDATE from  the outgoing <code>ServletResponse</code> to  the outgoing ", "operations": ["UPD TextElement:  the outgoing <code>ServletResponse</code> from  the outgoing <code>ServletResponse</code> to  the outgoing "]}, {"root": "INS TagElement: @code to TagElement: @param at 2", "operations": ["INS TagElement: @code to TagElement: @param at 2", "INS TextElement:  ServletResponse to TagElement: @code at 0"]}, {"root": "UPDATE from  the current  to  the current session id associated with the specified request pair, or ", "operations": ["UPD TextElement:  the current  from  the current  to  the current session id associated with the specified request pair, or "]}, {"root": "UPDATE from  associated with the specified request pair, or to  if there is no", "operations": ["UPD TextElement:  associated with the specified request pair, or from  associated with the specified request pair, or to  if there is no"]}, {"root": "UPDATE from <code>null</code> if there is no session associated with the request.  to session associated with the request.", "operations": ["UPD TextElement: <code>null</code> if there is no session associated with the request.  from <code>null</code> if there is no session associated with the request.  to session associated with the request."]}, {"root": "UPDATE from  Session to  null", "operations": ["UPD TextElement:  Session from  Session to  null", "UPD TextElement:  Session from  Session to  null"]}, {"root": "DEL SimpleName: Session", "operations": ["DEL SimpleName: Session"]}, {"root": "DEL SimpleName: Session", "operations": ["DEL SimpleName: Session"]}, {"root": "DEL SimpleName: Session", "operations": ["DEL SimpleName: Session"]}]}}, {"WebSessionManager_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(73) at 1", "Update QualifiedName: org.apache.shiro.session.Session(6) to java.io.Serializable", "Update SimpleType: Session(55) to Serializable", "Update SimpleName: getSession(56) to getSessionId", "Insert TextElement: A (10) into TagElement(25) at 0", "Insert TagElement: @code(12) into TagElement(25) at 1", "Insert TextElement:  is a (13) into TagElement(25) at 2", "Update TagElement: @link(13) to @code", "Update TextElement: s based on a (14) to  that has the ability to obtain session ids based on a", "Update TextElement: pair.(22) to  pair.", "Insert TagElement: @since(58) into Javadoc(59) at 4", "Update SimpleName: Session(54) to Serializable", "Update TextElement: A <code>WebSessionManager</code> is a <code>SessionManager</code> that has the ability to obtain(10) to  WebSessionManager", "Move TextElement: A <code>WebSessionManager</code> is a <code>SessionManager</code> that has the ability to obtain(10) into TagElement: @code(12) at 0", "Update TextElement:  Session(12) to  SessionManager", "Update TextElement: Returns the current (33) to Returns the session id associated with the specified request pair or ", "Update TagElement: @link(36) to @code", "Update TextElement:  associated with the specified request pair, or(37) to  if there is no session", "Update TextElement: <code>null</code> if there is no session associated with the request.(38) to associated with the request.", "Update TextElement:  the incoming <code>ServletRequest</code>(41) to   the incoming ", "Insert TagElement: @code(44) into TagElement: @param(45) at 2", "Update TextElement:  the outgoing <code>ServletResponse</code>(44) to  the outgoing ", "Insert TagElement: @code(49) into TagElement: @param(50) at 2", "Update TextElement:  the current (46) to  the current session id associated with the specified request pair, or ", "Update TagElement: @link(49) to @code", "Update TextElement:  associated with the specified request pair, or(50) to  if there is no", "Update TextElement: <code>null</code> if there is no session associated with the request. (51) to session associated with the request.", "Insert TextElement:  1.0(57) into TagElement: @since(58) at 0", "Update TextElement:  Session(35) to  null", "Insert TextElement:  ServletRequest(43) into TagElement: @code(44) at 0", "Insert TextElement:  ServletResponse(48) into TagElement: @code(49) at 0", "Update TextElement:  Session(48) to  null", "Delete SimpleName: Session(11)", "Delete SimpleName: Session(34)", "Delete SimpleName: Session(47)"]}}, {"BootstrapDataPopulator_cluster": {"actions": [{"root": "INS SingleMemberAnnotation to FieldDeclaration at 0", "operations": ["INS ArrayInitializer to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to FieldDeclaration at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"FieldCanBeLocal\" to ArrayInitializer at 0"]}]}}, {"BootstrapDataPopulator_diff": {"operations": ["Insert SingleMemberAnnotation(34) into FieldDeclaration(40) at 0", "Insert SimpleName: SuppressWarnings(31) into SingleMemberAnnotation(34) at 0", "Insert ArrayInitializer(33) into SingleMemberAnnotation(34) at 1", "Insert StringLiteral: \"FieldCanBeLocal\"(32) into ArrayInitializer(33) at 0"]}}], "commit_stats": [{"total_files": 28, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "True"}]}