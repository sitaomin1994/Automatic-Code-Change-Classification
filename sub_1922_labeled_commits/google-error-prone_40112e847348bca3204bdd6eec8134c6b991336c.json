{"application": "google-error-prone", "csha": "40112e847348bca3204bdd6eec8134c6b991336c", "files": [{"ErrorProneAnalyzer_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.common.base.Preconditions.checkNotNull to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.google.common.base.Preconditions.checkState to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.google.common.base.Objects to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.sun.source.tree.CompilationUnitTree to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: com.sun.source.tree.Tree to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: com.sun.source.util.TaskEvent to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: com.sun.source.util.TaskEvent.Kind to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: com.sun.source.util.TaskListener to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 3", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV FieldDeclaration to TypeDeclaration: class at 7"]}, {"root": "UPDATE from com.sun.tools.javac.comp.AttrContext to com.sun.tools.javac.api.MultiTaskListener", "operations": ["UPD QualifiedName: com.sun.tools.javac.comp.AttrContext from com.sun.tools.javac.comp.AttrContext to com.sun.tools.javac.api.MultiTaskListener"]}, {"root": "UPDATE from com.sun.tools.javac.comp.Env to com.sun.tools.javac.main.JavaCompiler", "operations": ["UPD QualifiedName: com.sun.tools.javac.comp.Env from com.sun.tools.javac.comp.Env to com.sun.tools.javac.main.JavaCompiler"]}, {"root": "INS SimpleType: TaskListener to TypeDeclaration: class at 3", "operations": ["INS SimpleType: TaskListener to TypeDeclaration: class at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: ErrorProneAnalyzer to SimpleType: ErrorProneAnalyzer at 0", "INS SimpleName: ErrorProneAnalyzer to SimpleType: ErrorProneAnalyzer at 0", "INS SimpleName: searchResultsPrinter to ClassInstanceCreation at 2", "INS SimpleName: scanner to SingleVariableDeclaration at 1", "INS SimpleName: create to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: scanner to ClassInstanceCreation at 1", "INS SimpleType: ErrorProneAnalyzer to MethodDeclaration at 2", "INS Block to MethodDeclaration at 6", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: scanner to MethodInvocation at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 1", "INS SimpleType: ErrorProneAnalyzer to ClassInstanceCreation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: initialized to FieldAccess at 1", "INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 4", "INS FieldAccess to Assignment: = at 0", "INS Javadoc to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: ErrorProneAnalyzer to SimpleType: ErrorProneAnalyzer at 0", "INS SimpleName: init to MethodDeclaration at 3", "INS TextElement: annotation processing round.) to TagElement at 1", "INS ThisExpression to ReturnStatement at 0", "INS SimpleType: ErrorProneAnalyzer to MethodDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS TextElement: Initializes the analyzer with the current compilation context. (E.g. for the current to TagElement at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS ThisExpression to ReturnStatement at 0", "INS SimpleName: context to MethodInvocation at 2", "INS SimpleName: register to MethodDeclaration at 2", "INS ThisExpression to MethodInvocation at 2", "INS SimpleType: ErrorProneAnalyzer to MethodDeclaration at 1", "INS SimpleName: init to MethodInvocation at 0", "INS ReturnStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: MultiTaskListener to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: ErrorProneAnalyzer to SimpleType: ErrorProneAnalyzer at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: context to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: instance to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 10", "INS SimpleType: Tree to ParameterizedType: Set<Tree> at 1", "INS ParameterizedType: Set<Tree> to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: Tree to SimpleType: Tree at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: compiler to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS SimpleName: JavaCompiler to SimpleType: JavaCompiler at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: JavaCompiler to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 14", "INS SimpleName: initialized to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS PrimitiveType: boolean to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: scanner to Assignment: = at 1", "INS Block to MethodDeclaration at 4", "INS SimpleType: Scanner to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: scanner to SingleVariableDeclaration at 1", "INS SimpleName: ErrorProneAnalyzer to MethodDeclaration at 1", "INS SimpleName: Scanner to SimpleType: Scanner at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: initialized to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleType: TaskEvent to SingleVariableDeclaration at 0", "INS SimpleName: taskEvent to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: checkState to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: TaskEvent to SimpleType: TaskEvent at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: started to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: TaskEvent to SimpleType: TaskEvent at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: TaskEvent to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: taskEvent to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleName: finished to MethodDeclaration at 3"]}, {"root": "UPDATE from JCTree to TaskListener", "operations": ["UPD SimpleName: JCTree from JCTree to TaskListener"]}, {"root": "MOVE from SimpleType: TaskListener", "operations": ["MOV SimpleName: JCTree to SimpleType: TaskListener at 0"]}, {"root": "INS Modifier: static to MethodDeclaration at 1", "operations": ["INS Modifier: static to MethodDeclaration at 1"]}, {"root": "INS SimpleType: ErrorProneAnalyzer to MethodDeclaration at 2", "operations": ["INS SimpleName: ErrorProneAnalyzer to SimpleType: ErrorProneAnalyzer at 0", "INS SimpleType: ErrorProneAnalyzer to MethodDeclaration at 2"]}, {"root": "INS SimpleName: create to MethodDeclaration at 3", "operations": ["INS SimpleName: create to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: TaskEvent to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: taskEvent to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: TreePath to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from Log to Scanner", "operations": ["UPD SimpleName: Log from Log to Scanner", "UPD SimpleType: Log from Log to Scanner"]}, {"root": "UPDATE from log to scanner", "operations": ["UPD SimpleName: log from log to scanner"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: create to MethodInvocation at 0", "INS NullLiteral to MethodInvocation at 2", "INS SimpleName: scanner to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Scanner to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Log to SearchResultsPrinter", "operations": ["UPD SimpleType: Log from Log to SearchResultsPrinter", "UPD SimpleName: Log from Log to SearchResultsPrinter"]}, {"root": "UPDATE from log to searchResultsPrinter", "operations": ["UPD SimpleName: log from log to searchResultsPrinter"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 2", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: Set<Tree>", "operations": ["MOV SimpleType: Set to ParameterizedType: Set<Tree> at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: path to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  the path from the compilation unit to the class declaration to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TagElement: @param to Javadoc at 2", "INS TextElement:  true if errors have been reported during the compilation to TagElement: @param at 1", "INS SimpleName: hasErrors to TagElement: @param at 0"]}, {"root": "UPDATE from TreePath to path", "operations": ["UPD SimpleName: TreePath from TreePath to path", "UPD SimpleName: env from env to path", "UPD SimpleName: env from env to path"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: env to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleType: CompilationUnitTree to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: CompilationUnitTree to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: compilation to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: compilation to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from Reports that a class (represented by the env) is ready for error-prone to analyze. to Reports that a class is ready for error-prone to analyze.", "operations": ["UPD TextElement: Reports that a class (represented by the env) is ready for error-prone to analyze. from Reports that a class (represented by the env) is ready for error-prone to analyze. to Reports that a class is ready for error-prone to analyze."]}, {"root": "UPDATE from Env to TaskEvent", "operations": ["UPD SimpleName: Env from Env to TaskEvent"]}, {"root": "MOVE from SimpleType: TaskEvent", "operations": ["MOV SimpleName: Env to SimpleType: TaskEvent at 0"]}, {"root": "UPDATE from AttrContext to TreePath", "operations": ["UPD SimpleName: AttrContext from AttrContext to TreePath"]}, {"root": "MOVE from SimpleType: TreePath", "operations": ["MOV SimpleName: AttrContext to SimpleType: TreePath at 0"]}, {"root": "UPDATE from Create a VisitorState object from an environment. to Create a VisitorState object from a compilation unit.", "operations": ["UPD TextElement: Create a VisitorState object from an environment. from Create a VisitorState object from an environment. to Create a VisitorState object from a compilation unit."]}, {"root": "UPDATE from Env to CompilationUnitTree", "operations": ["UPD SimpleName: Env from Env to CompilationUnitTree"]}, {"root": "MOVE from SimpleType: CompilationUnitTree", "operations": ["MOV SimpleName: Env to SimpleType: CompilationUnitTree at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: instance to MethodInvocation at 1", "INS SimpleName: Log to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: context to MethodInvocation at 2"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS MethodInvocation to InfixExpression: == at 0", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: taskEvent to MethodInvocation at 0", "INS SimpleName: getKind to MethodInvocation at 1"]}, {"root": "INS QualifiedName: Kind.ANALYZE to InfixExpression: == at 1", "operations": ["INS QualifiedName: Kind.ANALYZE to InfixExpression: == at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: JCClassDecl to SimpleType: JCClassDecl at 0", "INS SimpleName: currentClassTree to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: JCClassDecl to VariableDeclarationStatement at 0"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS SimpleName: JCClassDecl to SimpleType: JCClassDecl at 0", "INS SimpleName: Tree to SimpleType: Tree at 0", "INS SimpleName: JCClassDecl to SimpleType: JCClassDecl at 0", "INS SimpleName: getTypeDecls to MethodInvocation at 1", "INS SimpleType: JCClassDecl to CastExpression at 0", "INS SimpleName: getTypeElement to MethodInvocation at 1", "INS EnhancedForStatement to Block at 1", "INS SimpleName: classTree to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: Tree to SingleVariableDeclaration at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: Objects to MethodInvocation at 0", "INS SimpleType: JCClassDecl to InstanceofExpression at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: taskEvent to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: classTree to VariableDeclarationFragment at 0", "INS SimpleName: declTree to CastExpression at 1", "INS Block to IfStatement at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: JCClassDecl to VariableDeclarationStatement at 0", "INS SimpleName: equal to MethodInvocation at 1", "INS SimpleName: JCClassDecl to SimpleType: JCClassDecl at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS InstanceofExpression to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: taskEvent to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: currentClassTree to Assignment: = at 0", "INS SimpleName: declTree to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SimpleName: declTree to InstanceofExpression at 0", "INS IfStatement to Block at 1", "INS QualifiedName: classTree.sym to MethodInvocation at 2", "INS SimpleName: getCompilationUnit to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: getCompilationUnit to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: currentClassTree to MethodInvocation at 3", "INS SimpleType: TreePath to ClassInstanceCreation at 0", "INS SimpleName: path to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: taskEvent to MethodInvocation at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: TreePath to MethodInvocation at 0", "INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS ClassInstanceCreation to ConditionalExpression at 2", "INS SimpleName: getPath to MethodInvocation at 1", "INS SimpleName: getCompilationUnit to MethodInvocation at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: currentClassTree to InfixExpression: != at 0", "INS SimpleName: taskEvent to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: reportReadyForAnalysis to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: path to MethodInvocation at 2", "INS InfixExpression: > to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: errorCount to MethodInvocation at 1", "INS SimpleName: taskEvent to MethodInvocation at 1", "INS SimpleName: compiler to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: rootPath to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: createVisitorState to MethodInvocation at 0", "INS SimpleName: scan to MethodInvocation at 1", "INS SimpleName: path to MethodInvocation at 0", "INS SimpleName: getCompilationUnit to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleName: errorProneScanner to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getCompilationUnit to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: path to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: seen to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to Block at 2"]}, {"root": "UPDATE from errorProneScanner to compiler", "operations": ["UPD SimpleName: errorProneScanner from errorProneScanner to compiler", "UPD SimpleName: context from context to compiler"]}, {"root": "UPDATE from context to JavaCompiler", "operations": ["UPD SimpleName: context from context to JavaCompiler"]}, {"root": "INS SimpleName: instance to MethodInvocation at 1", "operations": ["INS SimpleName: instance to MethodInvocation at 1"]}, {"root": "UPDATE from get to context", "operations": ["UPD SimpleName: get from get to context"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: TreePath to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to =="]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: seen to MethodInvocation at 0", "MOV SimpleName: add to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS MethodInvocation to InfixExpression: != at 0", "operations": ["INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: path to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: getLeaf to MethodInvocation at 1"]}, {"root": "UPDATE from env.tree to Tree.Kind.COMPILATION_UNIT", "operations": ["UPD QualifiedName: env.tree from env.tree to Tree.Kind.COMPILATION_UNIT"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS InfixExpression: + to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS StringLiteral: \"Duplicate FLOW event for: \" to InfixExpression: + at 0", "INS SimpleName: getTypeElement to MethodInvocation at 1", "INS SimpleName: taskEvent to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getSourceFile to MethodInvocation at 1", "INS SimpleName: compilation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleType: TreePath to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS SimpleType: TreePath to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS SimpleName: getCompilationUnit to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS FieldAccess to ClassInstanceCreation at 2", "operations": ["INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: endPositions to FieldAccess at 1", "INS SimpleType: JCCompilationUnit to CastExpression at 0", "INS SimpleName: compilation to CastExpression at 1", "INS FieldAccess to ClassInstanceCreation at 2", "INS SimpleName: JCCompilationUnit to SimpleType: JCCompilationUnit at 0", "INS ParenthesizedExpression to FieldAccess at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 3", "operations": ["INS MethodInvocation to ClassInstanceCreation at 3", "INS SimpleName: getSourceFile to MethodInvocation at 1", "INS SimpleName: compilation to MethodInvocation at 0"]}, {"root": "INS SimpleName: rootPath to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: rootPath to VariableDeclarationFragment at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: JCCompilationUnit to SimpleType: JCCompilationUnit at 0", "INS SimpleType: JCCompilationUnit to CastExpression at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: path to MethodInvocation at 0", "INS CastExpression to ClassInstanceCreation at 1", "INS SimpleName: getCompilationUnit to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPath to MethodInvocation at 1", "MOV SimpleName: TreePath to MethodInvocation at 0"]}, {"root": "UPDATE from getPath to getLeaf", "operations": ["UPD SimpleName: getPath from getPath to getLeaf"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: env to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: TreePath to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: DeclFreeCompilationUnitWrapper to ClassInstanceCreation at 0"]}, {"root": "DEL SimpleName: ErrorProneAnalyzer", "operations": ["DEL SimpleName: ErrorProneAnalyzer"]}, {"root": "DEL ConstructorInvocation", "operations": ["DEL ConstructorInvocation", "DEL SimpleName: log", "DEL SimpleName: context", "DEL NullLiteral"]}, {"root": "DEL SimpleName: log", "operations": ["DEL SimpleName: log"]}, {"root": "DEL TypeLiteral", "operations": ["DEL TypeLiteral"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Javadoc", "DEL ParameterizedType: Set<JCTree>", "DEL Modifier: final", "DEL TextElement: The set of trees that have already been scanned. ", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleType: JCTree", "DEL TagElement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: ErrorProneAnalyzer", "DEL Block", "DEL MethodDeclaration"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL ThrowStatement", "operations": ["DEL ClassInstanceCreation", "DEL ThrowStatement", "DEL StringLiteral: \"No error-prone scanner registered in context. Is annotation processing enabled?\""]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL ParameterizedType: Env<AttrContext>", "DEL SimpleType: AttrContext", "DEL SimpleType: Env", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: path", "operations": ["DEL SimpleName: path"]}, {"root": "DEL QualifiedName: env.toplevel", "operations": ["DEL QualifiedName: env.toplevel"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: path", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL QualifiedName: env.toplevel"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: env.tree", "DEL IfStatement", "DEL MethodInvocation", "DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: env.tree", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: path", "DEL Assignment: =", "DEL QualifiedName: env.toplevel", "DEL Block", "DEL MethodInvocation"]}, {"root": "DEL ParameterizedType: Env<AttrContext>", "operations": ["DEL SimpleType: Env", "DEL SimpleType: AttrContext", "DEL SimpleName: AttrContext", "DEL ParameterizedType: Env<AttrContext>"]}, {"root": "DEL SimpleName: env", "operations": ["DEL SimpleName: env"]}, {"root": "DEL QualifiedName: env.toplevel.sourcefile", "operations": ["DEL QualifiedName: env.toplevel.sourcefile"]}, {"root": "DEL QualifiedName: env.toplevel.endPositions", "operations": ["DEL QualifiedName: env.toplevel.endPositions"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL QualifiedName: env.toplevel.sourcefile", "DEL ConditionalExpression", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL QualifiedName: env.enclClass.sym.sourcefile", "DEL QualifiedName: env.enclClass.sym.sourcefile"]}]}}, {"ErrorProneAnalyzer_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(579) at 4", "Insert ImportDeclaration(3) into CompilationUnit(579) at 1", "Insert ImportDeclaration(5) into CompilationUnit(579) at 2", "Insert ImportDeclaration(7) into CompilationUnit(579) at 3", "Insert ImportDeclaration(9) into CompilationUnit(579) at 4", "Insert ImportDeclaration(11) into CompilationUnit(579) at 5", "Insert ImportDeclaration(13) into CompilationUnit(579) at 6", "Insert ImportDeclaration(15) into CompilationUnit(579) at 7", "Insert ImportDeclaration(17) into CompilationUnit(579) at 8", "Insert ImportDeclaration(29) into CompilationUnit(579) at 14", "Move FieldDeclaration(37) into TypeDeclaration: class(578) at 7", "Move FieldDeclaration(44) into TypeDeclaration: class(578) at 6", "Move MethodDeclaration(91) into TypeDeclaration: class(578) at 3", "Insert QualifiedName: com.google.common.base.Preconditions.checkNotNull(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.common.base.Preconditions.checkState(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: com.google.common.base.Objects(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: com.sun.source.tree.CompilationUnitTree(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: com.sun.source.tree.Tree(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: com.sun.source.util.TaskEvent(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: com.sun.source.util.TaskEvent.Kind(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: com.sun.source.util.TaskListener(16) into ImportDeclaration(17) at 0", "Update QualifiedName: com.sun.tools.javac.comp.AttrContext(6) to com.sun.tools.javac.api.MultiTaskListener", "Update QualifiedName: com.sun.tools.javac.comp.Env(8) to com.sun.tools.javac.main.JavaCompiler", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl(28) into ImportDeclaration(29) at 0", "Insert SimpleType: TaskListener(50) into TypeDeclaration: class(578) at 3", "Insert MethodDeclaration(91) into TypeDeclaration: class(578) at 5", "Insert MethodDeclaration(137) into TypeDeclaration: class(578) at 6", "Insert MethodDeclaration(161) into TypeDeclaration: class(578) at 7", "Insert FieldDeclaration(189) into TypeDeclaration: class(578) at 10", "Insert FieldDeclaration(207) into TypeDeclaration: class(578) at 13", "Insert FieldDeclaration(213) into TypeDeclaration: class(578) at 14", "Insert MethodDeclaration(237) into TypeDeclaration: class(578) at 15", "Insert MethodDeclaration(278) into TypeDeclaration: class(578) at 17", "Insert MethodDeclaration(373) into TypeDeclaration: class(578) at 18", "Update SimpleName: JCTree(66) to TaskListener", "Move SimpleName: JCTree(66) into SimpleType: TaskListener(50) at 0", "Insert Modifier: static(52) into MethodDeclaration(66) at 1", "Insert SimpleType: ErrorProneAnalyzer(54) into MethodDeclaration(66) at 2", "Insert SimpleName: create(55) into MethodDeclaration(66) at 3", "Move Modifier: public(92) into MethodDeclaration(91) at 0", "Insert Modifier: static(68) into MethodDeclaration(91) at 1", "Insert SimpleType: ErrorProneAnalyzer(70) into MethodDeclaration(91) at 2", "Insert SimpleName: create(71) into MethodDeclaration(91) at 3", "Insert SingleVariableDeclaration(75) into MethodDeclaration(91) at 4", "Move SingleVariableDeclaration(97) into MethodDeclaration(91) at 5", "Insert Block(90) into MethodDeclaration(91) at 6", "Insert Javadoc(95) into MethodDeclaration(137) at 0", "Insert Modifier: public(96) into MethodDeclaration(137) at 1", "Insert SimpleType: ErrorProneAnalyzer(98) into MethodDeclaration(137) at 2", "Insert SimpleName: init(99) into MethodDeclaration(137) at 3", "Move SingleVariableDeclaration(101) into MethodDeclaration(137) at 4", "Insert Block(136) into MethodDeclaration(137) at 5", "Insert Modifier: public(138) into MethodDeclaration(161) at 0", "Insert SimpleType: ErrorProneAnalyzer(140) into MethodDeclaration(161) at 1", "Insert SimpleName: register(141) into MethodDeclaration(161) at 2", "Move SingleVariableDeclaration(85) into MethodDeclaration(161) at 3", "Insert Block(160) into MethodDeclaration(161) at 4", "Insert Modifier: private(176) into FieldDeclaration(189) at 0", "Insert Modifier: final(177) into FieldDeclaration(189) at 1", "Insert ParameterizedType: Set<Tree>(182) into FieldDeclaration(189) at 2", "Move VariableDeclarationFragment(74) into FieldDeclaration(189) at 3", "Insert Modifier: private(202) into FieldDeclaration(207) at 0", "Insert SimpleType: JavaCompiler(204) into FieldDeclaration(207) at 1", "Insert VariableDeclarationFragment(206) into FieldDeclaration(207) at 2", "Insert Modifier: private(208) into FieldDeclaration(213) at 0", "Insert PrimitiveType: boolean(209) into FieldDeclaration(213) at 1", "Insert VariableDeclarationFragment(212) into FieldDeclaration(213) at 2", "Insert Modifier: private(214) into MethodDeclaration(237) at 0", "Insert SimpleName: ErrorProneAnalyzer(215) into MethodDeclaration(237) at 1", "Insert SingleVariableDeclaration(219) into MethodDeclaration(237) at 2", "Move SingleVariableDeclaration(105) into MethodDeclaration(237) at 3", "Insert Block(236) into MethodDeclaration(237) at 4", "Insert MarkerAnnotation(265) into MethodDeclaration(278) at 0", "Insert Modifier: public(266) into MethodDeclaration(278) at 1", "Insert PrimitiveType: void(267) into MethodDeclaration(278) at 2", "Insert SimpleName: started(268) into MethodDeclaration(278) at 3", "Insert SingleVariableDeclaration(272) into MethodDeclaration(278) at 4", "Insert Block(277) into MethodDeclaration(278) at 5", "Insert MarkerAnnotation(280) into MethodDeclaration(373) at 0", "Insert Modifier: public(281) into MethodDeclaration(373) at 1", "Insert PrimitiveType: void(282) into MethodDeclaration(373) at 2", "Insert SimpleName: finished(283) into MethodDeclaration(373) at 3", "Insert SingleVariableDeclaration(287) into MethodDeclaration(373) at 4", "Insert Block(372) into MethodDeclaration(373) at 5", "Insert SingleVariableDeclaration(389) into MethodDeclaration(519) at 4", "Insert SingleVariableDeclaration(393) into MethodDeclaration(519) at 5", "Insert SimpleName: ErrorProneAnalyzer(53) into SimpleType: ErrorProneAnalyzer(54) at 0", "Update SimpleType: Log(79) to Scanner", "Update SimpleName: log(80) to scanner", "Insert ReturnStatement(64) into Block(65) at 0", "Insert SimpleName: ErrorProneAnalyzer(69) into SimpleType: ErrorProneAnalyzer(70) at 0", "Move SimpleType: Scanner(130) into SingleVariableDeclaration(75) at 0", "Insert SimpleName: scanner(74) into SingleVariableDeclaration(75) at 1", "Update SimpleType: Log(95) to SearchResultsPrinter", "Update SimpleName: log(96) to searchResultsPrinter", "Insert ExpressionStatement(83) into Block(90) at 0", "Insert ReturnStatement(89) into Block(90) at 1", "Insert TagElement(94) into Javadoc(95) at 0", "Insert SimpleName: ErrorProneAnalyzer(97) into SimpleType: ErrorProneAnalyzer(98) at 0", "Insert ExpressionStatement(109) into Block(136) at 0", "Move ExpressionStatement(117) into Block(136) at 1", "Move ExpressionStatement(111) into Block(136) at 2", "Move ExpressionStatement(134) into Block(136) at 3", "Insert ReturnStatement(135) into Block(136) at 4", "Insert SimpleName: ErrorProneAnalyzer(139) into SimpleType: ErrorProneAnalyzer(140) at 0", "Insert ExpressionStatement(149) into Block(160) at 0", "Insert ExpressionStatement(157) into Block(160) at 1", "Insert ReturnStatement(159) into Block(160) at 2", "Move SimpleType: Set(65) into ParameterizedType: Set<Tree>(182) at 0", "Insert SimpleType: Tree(181) into ParameterizedType: Set<Tree>(182) at 1", "Insert SimpleName: JavaCompiler(203) into SimpleType: JavaCompiler(204) at 0", "Insert SimpleName: compiler(205) into VariableDeclarationFragment(206) at 0", "Insert SimpleName: initialized(210) into VariableDeclarationFragment(212) at 0", "Insert BooleanLiteral: false(211) into VariableDeclarationFragment(212) at 1", "Insert SimpleType: Scanner(217) into SingleVariableDeclaration(219) at 0", "Insert SimpleName: scanner(218) into SingleVariableDeclaration(219) at 1", "Insert ExpressionStatement(229) into Block(236) at 0", "Move ExpressionStatement(123) into Block(236) at 1", "Insert SimpleName: Override(264) into MarkerAnnotation(265) at 0", "Insert SimpleType: TaskEvent(270) into SingleVariableDeclaration(272) at 0", "Insert SimpleName: taskEvent(271) into SingleVariableDeclaration(272) at 1", "Insert ExpressionStatement(276) into Block(277) at 0", "Insert SimpleName: Override(279) into MarkerAnnotation(280) at 0", "Insert SimpleType: TaskEvent(285) into SingleVariableDeclaration(287) at 0", "Insert SimpleName: taskEvent(286) into SingleVariableDeclaration(287) at 1", "Move IfStatement(146) into Block(372) at 0", "Insert TagElement: @param(378) into Javadoc(382) at 1", "Insert TagElement: @param(381) into Javadoc(382) at 2", "Insert SimpleType: TaskEvent(387) into SingleVariableDeclaration(389) at 0", "Insert SimpleName: taskEvent(388) into SingleVariableDeclaration(389) at 1", "Insert SimpleType: TreePath(391) into SingleVariableDeclaration(393) at 0", "Update SimpleName: env(186) to path", "Move SimpleName: env(186) into SingleVariableDeclaration(393) at 1", "Insert SimpleType: CompilationUnitTree(528) into SingleVariableDeclaration(530) at 0", "Insert SimpleName: compilation(529) into SingleVariableDeclaration(530) at 1", "Update SimpleName: Log(78) to Scanner", "Insert MethodInvocation(63) into ReturnStatement(64) at 0", "Update SimpleName: Log(94) to SearchResultsPrinter", "Insert MethodInvocation(82) into ExpressionStatement(83) at 0", "Insert ClassInstanceCreation(88) into ReturnStatement(89) at 0", "Insert TextElement: Initializes the analyzer with the current compilation context. (E.g. for the current(92) into TagElement(94) at 0", "Insert TextElement: annotation processing round.)(93) into TagElement(94) at 1", "Insert Assignment: =(108) into ExpressionStatement(109) at 0", "Insert ThisExpression(134) into ReturnStatement(135) at 0", "Insert MethodInvocation(148) into ExpressionStatement(149) at 0", "Insert MethodInvocation(156) into ExpressionStatement(157) at 0", "Insert ThisExpression(158) into ReturnStatement(159) at 0", "Insert SimpleName: Tree(180) into SimpleType: Tree(181) at 0", "Insert SimpleName: Scanner(216) into SimpleType: Scanner(217) at 0", "Insert Assignment: =(228) into ExpressionStatement(229) at 0", "Insert SimpleName: TaskEvent(269) into SimpleType: TaskEvent(270) at 0", "Insert MethodInvocation(275) into ExpressionStatement(276) at 0", "Insert SimpleName: TaskEvent(284) into SimpleType: TaskEvent(285) at 0", "Update TextElement: Reports that a class (represented by the env) is ready for error-prone to analyze.(175) to Reports that a class is ready for error-prone to analyze.", "Insert SimpleName: path(376) into TagElement: @param(378) at 0", "Insert TextElement:  the path from the compilation unit to the class declaration(377) into TagElement: @param(378) at 1", "Insert SimpleName: hasErrors(379) into TagElement: @param(381) at 0", "Insert TextElement:  true if errors have been reported during the compilation(380) into TagElement: @param(381) at 1", "Update SimpleName: Env(181) to TaskEvent", "Move SimpleName: Env(181) into SimpleType: TaskEvent(387) at 0", "Update SimpleName: AttrContext(183) to TreePath", "Move SimpleName: AttrContext(183) into SimpleType: TreePath(391) at 0", "Update TextElement: Create a VisitorState object from an environment.(286) to Create a VisitorState object from a compilation unit.", "Update SimpleName: Env(293) to CompilationUnitTree", "Move SimpleName: Env(293) into SimpleType: CompilationUnitTree(528) at 0", "Insert SimpleName: create(60) into MethodInvocation(63) at 0", "Insert SimpleName: scanner(61) into MethodInvocation(63) at 1", "Insert NullLiteral(62) into MethodInvocation(63) at 2", "Insert SimpleName: checkNotNull(80) into MethodInvocation(82) at 0", "Insert SimpleName: scanner(81) into MethodInvocation(82) at 1", "Insert SimpleType: ErrorProneAnalyzer(85) into ClassInstanceCreation(88) at 0", "Insert SimpleName: scanner(86) into ClassInstanceCreation(88) at 1", "Insert SimpleName: searchResultsPrinter(87) into ClassInstanceCreation(88) at 2", "Insert FieldAccess(106) into Assignment: =(108) at 0", "Insert BooleanLiteral: true(107) into Assignment: =(108) at 1", "Insert MethodInvocation(122) into Assignment: =(123) at 1", "Insert SimpleName: init(146) into MethodInvocation(148) at 0", "Insert SimpleName: context(147) into MethodInvocation(148) at 1", "Insert MethodInvocation(153) into MethodInvocation(156) at 0", "Insert SimpleName: add(154) into MethodInvocation(156) at 1", "Insert ThisExpression(155) into MethodInvocation(156) at 2", "Move FieldAccess(137) into Assignment: =(228) at 0", "Insert SimpleName: scanner(227) into Assignment: =(228) at 1", "Insert SimpleName: checkState(273) into MethodInvocation(275) at 0", "Insert SimpleName: initialized(274) into MethodInvocation(275) at 1", "Insert MethodInvocation(290) into InfixExpression: ==(292) at 0", "Insert QualifiedName: Kind.ANALYZE(291) into InfixExpression: ==(292) at 1", "Insert VariableDeclarationStatement(298) into Block(370) at 0", "Insert EnhancedForStatement(337) into Block(370) at 1", "Insert VariableDeclarationStatement(359) into Block(370) at 2", "Insert ExpressionStatement(369) into Block(370) at 3", "Insert IfStatement(431) into Block(470) at 0", "Insert IfStatement(441) into Block(470) at 1", "Insert IfStatement(459) into Block(470) at 2", "Insert SimpleName: ErrorProneAnalyzer(84) into SimpleType: ErrorProneAnalyzer(85) at 0", "Insert ThisExpression(104) into FieldAccess(106) at 0", "Insert SimpleName: initialized(105) into FieldAccess(106) at 1", "Insert SimpleName: Log(119) into MethodInvocation(122) at 0", "Insert SimpleName: instance(120) into MethodInvocation(122) at 1", "Insert SimpleName: context(121) into MethodInvocation(122) at 2", "Update SimpleName: errorProneScanner(125) to compiler", "Update SimpleName: context(127) to JavaCompiler", "Insert SimpleName: instance(129) into MethodInvocation(131) at 1", "Update SimpleName: get(128) to context", "Insert SimpleName: MultiTaskListener(150) into MethodInvocation(153) at 0", "Insert SimpleName: instance(151) into MethodInvocation(153) at 1", "Insert SimpleName: context(152) into MethodInvocation(153) at 2", "Insert SimpleName: taskEvent(288) into MethodInvocation(290) at 0", "Insert SimpleName: getKind(289) into MethodInvocation(290) at 1", "Insert SimpleType: JCClassDecl(294) into VariableDeclarationStatement(298) at 0", "Insert VariableDeclarationFragment(297) into VariableDeclarationStatement(298) at 1", "Insert SingleVariableDeclaration(302) into EnhancedForStatement(337) at 0", "Insert MethodInvocation(307) into EnhancedForStatement(337) at 1", "Insert Block(336) into EnhancedForStatement(337) at 2", "Move SimpleType: TreePath(200) into VariableDeclarationStatement(359) at 0", "Insert VariableDeclarationFragment(358) into VariableDeclarationStatement(359) at 1", "Insert MethodInvocation(368) into ExpressionStatement(369) at 0", "Insert MethodInvocation(402) into IfStatement(431) at 0", "Insert Block(430) into IfStatement(431) at 1", "Update InfixExpression: !=(206) to ==", "Move InfixExpression: !=(206) into IfStatement(441) at 0", "Move Block(197) into IfStatement(441) at 1", "Insert PrefixExpression: !(448) into IfStatement(459) at 0", "Move Block(226) into IfStatement(459) at 1", "Insert SimpleName: JCClassDecl(293) into SimpleType: JCClassDecl(294) at 0", "Insert SimpleName: currentClassTree(295) into VariableDeclarationFragment(297) at 0", "Insert NullLiteral(296) into VariableDeclarationFragment(297) at 1", "Insert SimpleType: Tree(300) into SingleVariableDeclaration(302) at 0", "Insert SimpleName: declTree(301) into SingleVariableDeclaration(302) at 1", "Insert MethodInvocation(305) into MethodInvocation(307) at 0", "Insert SimpleName: getTypeDecls(306) into MethodInvocation(307) at 1", "Insert IfStatement(335) into Block(336) at 0", "Insert SimpleName: path(340) into VariableDeclarationFragment(358) at 0", "Insert ConditionalExpression(357) into VariableDeclarationFragment(358) at 1", "Insert SimpleName: reportReadyForAnalysis(360) into MethodInvocation(368) at 0", "Insert SimpleName: taskEvent(361) into MethodInvocation(368) at 1", "Insert SimpleName: path(362) into MethodInvocation(368) at 2", "Insert InfixExpression: >(367) into MethodInvocation(368) at 3", "Move SimpleName: seen(191) into MethodInvocation(402) at 0", "Move SimpleName: add(192) into MethodInvocation(402) at 1", "Insert MethodInvocation(401) into MethodInvocation(402) at 2", "Move VariableDeclarationStatement(203) into Block(430) at 0", "Insert ExpressionStatement(429) into Block(430) at 1", "Insert MethodInvocation(436) into InfixExpression: ==(438) at 0", "Update QualifiedName: env.tree(205) to Tree.Kind.COMPILATION_UNIT", "Insert MethodInvocation(447) into PrefixExpression: !(448) at 0", "Insert ThrowStatement(457) into Block(458) at 0", "Insert MethodInvocation(538) into MethodInvocation(539) at 2", "Insert SimpleName: Tree(299) into SimpleType: Tree(300) at 0", "Insert SimpleName: taskEvent(303) into MethodInvocation(305) at 0", "Insert SimpleName: getCompilationUnit(304) into MethodInvocation(305) at 1", "Insert InstanceofExpression(311) into IfStatement(335) at 0", "Insert Block(334) into IfStatement(335) at 1", "Insert InfixExpression: !=(343) into ConditionalExpression(357) at 0", "Insert MethodInvocation(350) into ConditionalExpression(357) at 1", "Insert ClassInstanceCreation(356) into ConditionalExpression(357) at 2", "Insert MethodInvocation(365) into InfixExpression: >(367) at 0", "Insert NumberLiteral: 0(366) into InfixExpression: >(367) at 1", "Insert SimpleName: path(399) into MethodInvocation(401) at 0", "Insert SimpleName: getCompilationUnit(400) into MethodInvocation(401) at 1", "Insert SimpleType: TreePath(404) into VariableDeclarationStatement(419) at 0", "Insert MethodInvocation(428) into ExpressionStatement(429) at 0", "Insert MethodInvocation(434) into MethodInvocation(436) at 0", "Insert SimpleName: getKind(435) into MethodInvocation(436) at 1", "Insert SimpleName: seen(442) into MethodInvocation(447) at 0", "Insert SimpleName: add(443) into MethodInvocation(447) at 1", "Insert MethodInvocation(446) into MethodInvocation(447) at 2", "Insert ClassInstanceCreation(456) into ThrowStatement(457) at 0", "Insert MethodInvocation(466) into MethodInvocation(467) at 1", "Insert SimpleName: compilation(536) into MethodInvocation(538) at 0", "Insert SimpleName: getSourceFile(537) into MethodInvocation(538) at 1", "Insert FieldAccess(560) into ClassInstanceCreation(565) at 2", "Insert MethodInvocation(563) into ClassInstanceCreation(565) at 3", "Update SimpleName: context(328) to compiler", "Insert SimpleName: declTree(308) into InstanceofExpression(311) at 0", "Insert SimpleType: JCClassDecl(310) into InstanceofExpression(311) at 1", "Insert VariableDeclarationStatement(320) into Block(334) at 0", "Insert IfStatement(333) into Block(334) at 1", "Insert SimpleName: currentClassTree(341) into InfixExpression: !=(343) at 0", "Insert NullLiteral(342) into InfixExpression: !=(343) at 1", "Insert SimpleName: TreePath(344) into MethodInvocation(350) at 0", "Insert SimpleName: getPath(345) into MethodInvocation(350) at 1", "Insert MethodInvocation(348) into MethodInvocation(350) at 2", "Insert SimpleName: currentClassTree(349) into MethodInvocation(350) at 3", "Insert SimpleType: TreePath(352) into ClassInstanceCreation(356) at 0", "Insert MethodInvocation(355) into ClassInstanceCreation(356) at 1", "Insert SimpleName: compiler(363) into MethodInvocation(365) at 0", "Insert SimpleName: errorCount(364) into MethodInvocation(365) at 1", "Insert SimpleName: TreePath(403) into SimpleType: TreePath(404) at 0", "Insert SimpleName: rootPath(405) into VariableDeclarationFragment(418) at 0", "Insert ClassInstanceCreation(417) into VariableDeclarationFragment(418) at 1", "Insert SimpleName: errorProneScanner(420) into MethodInvocation(428) at 0", "Insert SimpleName: scan(421) into MethodInvocation(428) at 1", "Insert SimpleName: rootPath(422) into MethodInvocation(428) at 2", "Insert MethodInvocation(427) into MethodInvocation(428) at 3", "Insert SimpleName: path(432) into MethodInvocation(434) at 0", "Insert SimpleName: getLeaf(433) into MethodInvocation(434) at 1", "Update SimpleName: TreePath(208) to path", "Move SimpleName: TreePath(208) into MethodInvocation(446) at 0", "Update SimpleName: getPath(209) to getLeaf", "Move SimpleName: getPath(209) into MethodInvocation(446) at 1", "Move SimpleType: IllegalStateException(141) into ClassInstanceCreation(456) at 0", "Insert InfixExpression: +(455) into ClassInstanceCreation(456) at 1", "Update SimpleName: env(232) to path", "Move SimpleName: env(232) into MethodInvocation(466) at 0", "Insert SimpleName: getCompilationUnit(465) into MethodInvocation(466) at 1", "Insert ParenthesizedExpression(558) into FieldAccess(560) at 0", "Insert SimpleName: endPositions(559) into FieldAccess(560) at 1", "Insert SimpleName: compilation(561) into MethodInvocation(563) at 0", "Insert SimpleName: getSourceFile(562) into MethodInvocation(563) at 1", "Insert SimpleName: JCClassDecl(309) into SimpleType: JCClassDecl(310) at 0", "Insert SimpleType: JCClassDecl(313) into VariableDeclarationStatement(320) at 0", "Insert VariableDeclarationFragment(319) into VariableDeclarationStatement(320) at 1", "Insert MethodInvocation(327) into IfStatement(333) at 0", "Insert Block(332) into IfStatement(333) at 1", "Insert SimpleName: taskEvent(346) into MethodInvocation(348) at 0", "Insert SimpleName: getCompilationUnit(347) into MethodInvocation(348) at 1", "Insert SimpleName: TreePath(351) into SimpleType: TreePath(352) at 0", "Insert SimpleName: taskEvent(353) into MethodInvocation(355) at 0", "Insert SimpleName: getCompilationUnit(354) into MethodInvocation(355) at 1", "Move SimpleType: TreePath(218) into ClassInstanceCreation(417) at 0", "Insert ClassInstanceCreation(416) into ClassInstanceCreation(417) at 1", "Insert SimpleName: createVisitorState(423) into MethodInvocation(427) at 0", "Insert MethodInvocation(426) into MethodInvocation(427) at 1", "Insert StringLiteral: \"Duplicate FLOW event for: \"(451) into InfixExpression: +(455) at 0", "Insert MethodInvocation(454) into InfixExpression: +(455) at 1", "Insert CastExpression(557) into ParenthesizedExpression(558) at 0", "Insert SimpleName: JCClassDecl(312) into SimpleType: JCClassDecl(313) at 0", "Insert SimpleName: classTree(314) into VariableDeclarationFragment(319) at 0", "Insert CastExpression(318) into VariableDeclarationFragment(319) at 1", "Insert SimpleName: Objects(321) into MethodInvocation(327) at 0", "Insert SimpleName: equal(322) into MethodInvocation(327) at 1", "Insert QualifiedName: classTree.sym(323) into MethodInvocation(327) at 2", "Insert MethodInvocation(326) into MethodInvocation(327) at 3", "Insert ExpressionStatement(331) into Block(332) at 0", "Move SimpleType: DeclFreeCompilationUnitWrapper(220) into ClassInstanceCreation(416) at 0", "Insert CastExpression(415) into ClassInstanceCreation(416) at 1", "Insert SimpleName: path(424) into MethodInvocation(426) at 0", "Insert SimpleName: getCompilationUnit(425) into MethodInvocation(426) at 1", "Insert SimpleName: taskEvent(452) into MethodInvocation(454) at 0", "Insert SimpleName: getTypeElement(453) into MethodInvocation(454) at 1", "Insert SimpleType: JCCompilationUnit(555) into CastExpression(557) at 0", "Insert SimpleName: compilation(556) into CastExpression(557) at 1", "Insert SimpleType: JCClassDecl(316) into CastExpression(318) at 0", "Insert SimpleName: declTree(317) into CastExpression(318) at 1", "Insert SimpleName: taskEvent(324) into MethodInvocation(326) at 0", "Insert SimpleName: getTypeElement(325) into MethodInvocation(326) at 1", "Insert Assignment: =(330) into ExpressionStatement(331) at 0", "Insert SimpleType: JCCompilationUnit(411) into CastExpression(415) at 0", "Insert MethodInvocation(414) into CastExpression(415) at 1", "Insert SimpleName: JCCompilationUnit(554) into SimpleType: JCCompilationUnit(555) at 0", "Insert SimpleName: JCClassDecl(315) into SimpleType: JCClassDecl(316) at 0", "Insert SimpleName: currentClassTree(328) into Assignment: =(330) at 0", "Insert SimpleName: classTree(329) into Assignment: =(330) at 1", "Insert SimpleName: JCCompilationUnit(410) into SimpleType: JCCompilationUnit(411) at 0", "Insert SimpleName: path(412) into MethodInvocation(414) at 0", "Insert SimpleName: getCompilationUnit(413) into MethodInvocation(414) at 1", "Delete SimpleName: ErrorProneAnalyzer(77)", "Delete SimpleName: log(86)", "Delete SimpleName: context(87)", "Delete NullLiteral(88)", "Delete ConstructorInvocation(89)", "Delete SimpleName: log(109)", "Delete TypeLiteral(131)", "Delete Modifier: final(39)", "Delete Modifier: final(32)", "Delete TextElement: The set of trees that have already been scanned. (59)", "Delete TagElement(60)", "Delete Javadoc(61)", "Delete Modifier: private(62)", "Delete Modifier: final(63)", "Delete SimpleType: JCTree(67)", "Delete ParameterizedType: Set<JCTree>(68)", "Delete FieldDeclaration(75)", "Delete SimpleName: ErrorProneAnalyzer(93)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete NullLiteral(138)", "Delete StringLiteral: \"No error-prone scanner registered in context. Is annotation processing enabled?\"(142)", "Delete ClassInstanceCreation(143)", "Delete ThrowStatement(144)", "Delete SimpleType: Env(182)", "Delete SimpleType: AttrContext(184)", "Delete ParameterizedType: Env<AttrContext>(185)", "Delete SingleVariableDeclaration(187)", "Delete SimpleName: path(201)", "Delete QualifiedName: env.toplevel(204)", "Delete SimpleName: path(216)", "Delete QualifiedName: env.toplevel(221)", "Delete ClassInstanceCreation(222)", "Delete ClassInstanceCreation(223)", "Delete Assignment: =(224)", "Delete ExpressionStatement(225)", "Delete QualifiedName: env.tree(193)", "Delete MethodInvocation(194)", "Delete PrefixExpression: !(195)", "Delete IfStatement(198)", "Delete SimpleName: path(207)", "Delete QualifiedName: env.toplevel(210)", "Delete QualifiedName: env.tree(211)", "Delete MethodInvocation(212)", "Delete Assignment: =(213)", "Delete ExpressionStatement(214)", "Delete Block(215)", "Delete IfStatement(227)", "Delete SimpleType: Env(294)", "Delete SimpleName: AttrContext(295)", "Delete SimpleType: AttrContext(296)", "Delete ParameterizedType: Env<AttrContext>(297)", "Delete SimpleName: env(298)", "Delete QualifiedName: env.toplevel.sourcefile(305)", "Delete QualifiedName: env.toplevel.endPositions(321)", "Delete QualifiedName: env.enclClass.sym.sourcefile(322)", "Delete NullLiteral(323)", "Delete InfixExpression: !=(324)", "Delete QualifiedName: env.enclClass.sym.sourcefile(325)", "Delete QualifiedName: env.toplevel.sourcefile(326)", "Delete ConditionalExpression(327)"]}}, {"ErrorProneCompiler_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.common.base.Preconditions.checkNotNull to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 10"]}, {"root": "UPDATE from com.sun.tools.javac.main.JavaCompiler to com.sun.tools.javac.util.JavacMessages", "operations": ["UPD QualifiedName: com.sun.tools.javac.main.JavaCompiler from com.sun.tools.javac.main.JavaCompiler to com.sun.tools.javac.util.JavacMessages"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS ExpressionStatement to Block at 4", "INS SimpleName: resultsPrinter to MethodInvocation at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: context to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS Block to MethodDeclaration at 7", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS ReturnStatement to Block at 7", "INS SimpleType: Result to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ErrorProneJavacJavaCompiler to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: setupMessageBundle to MethodInvocation at 0", "INS SimpleName: preRegister to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Result to SimpleType: Result at 0", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleName: context to SingleVariableDeclaration at 1", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: setupMessageBundle to MethodDeclaration at 4", "INS SimpleType: Context to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS TextElement: Registers our message bundle. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6"]}, {"root": "INS SimpleType: SearchResultsPrinter to FieldDeclaration at 2", "operations": ["INS SimpleType: SearchResultsPrinter to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV SimpleType: Result to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleName: compile to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "UPDATE from JavaCompiler to SearchResultsPrinter", "operations": ["UPD SimpleName: JavaCompiler from JavaCompiler to SearchResultsPrinter"]}, {"root": "MOVE from SimpleType: SearchResultsPrinter", "operations": ["MOV SimpleName: JavaCompiler to SimpleType: SearchResultsPrinter at 0"]}, {"root": "UPDATE from errorProneScanner to resultsPrinter", "operations": ["UPD SimpleName: errorProneScanner from errorProneScanner to resultsPrinter", "UPD SimpleName: compilerClass from compilerClass to resultsPrinter", "UPD SimpleName: compilerClass from compilerClass to resultsPrinter"]}, {"root": "UPDATE from s to compilerName", "operations": ["UPD SimpleName: s from s to compilerName", "UPD SimpleName: s from s to compilerName"]}, {"root": "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: useResultsPrinter to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: useResultsPrinter to SingleVariableDeclaration at 1"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS PrimitiveType: boolean to FieldDeclaration at 1", "operations": ["INS PrimitiveType: boolean to FieldDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV TryStatement to Block at 2", "MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: useResultsPrinter to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: useResultsPrinter to VariableDeclarationFragment at 0"]}, {"root": "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from == to !=", "operations": ["UPD InfixExpression: == from == to !="]}, {"root": "UPDATE from Scanner to Context", "operations": ["UPD SimpleName: Scanner from Scanner to Context"]}, {"root": "MOVE from SimpleType: Context", "operations": ["MOV SimpleName: Scanner to SimpleType: Context at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: printWriter to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: errorProneScanner to MethodInvocation at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0"]}, {"root": "INS ConditionalExpression to Assignment: = at 1", "operations": ["INS SimpleName: SearchResultsPrinter to SimpleType: SearchResultsPrinter at 0", "INS ConditionalExpression to Assignment: = at 1", "INS SimpleName: printWriter to ClassInstanceCreation at 1", "INS NullLiteral to ConditionalExpression at 2", "INS SimpleName: useResultsPrinter to ConditionalExpression at 0", "INS ClassInstanceCreation to ConditionalExpression at 1", "INS SimpleType: SearchResultsPrinter to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 3", "MOV SimpleName: context to MethodInvocation at 2"]}, {"root": "UPDATE from scannerInContext to errorProneScanner", "operations": ["UPD SimpleName: scannerInContext from scannerInContext to errorProneScanner", "UPD SimpleName: get from get to errorProneScanner"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from invoke to add", "operations": ["UPD SimpleName: invoke from invoke to add"]}, {"root": "INS StringLiteral: \"com.google.errorprone.errors\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"com.google.errorprone.errors\" to MethodInvocation at 2"]}, {"root": "INS ConditionalExpression to ClassInstanceCreation at 4", "operations": ["INS InfixExpression: != to ConditionalExpression at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: scanner to InfixExpression: != at 0", "INS ConditionalExpression to ClassInstanceCreation at 4", "INS SimpleName: scanner to ConditionalExpression at 1"]}, {"root": "INS SimpleName: useResultsPrinter to ClassInstanceCreation at 5", "operations": ["INS SimpleName: useResultsPrinter to ClassInstanceCreation at 5"]}, {"root": "INS BooleanLiteral: true to Assignment: = at 1", "operations": ["INS BooleanLiteral: true to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: flush to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: printWriter to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: resultsPrinter to MethodInvocation at 0", "INS SimpleName: printMatches to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from compilerClass to JavacMessages", "operations": ["UPD SimpleName: compilerClass from compilerClass to JavacMessages"]}, {"root": "UPDATE from getMethod to instance", "operations": ["UPD SimpleName: getMethod from getMethod to instance"]}, {"root": "INS SimpleName: context to MethodInvocation at 2", "operations": ["INS SimpleName: context to MethodInvocation at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV ClassInstanceCreation to ConditionalExpression at 2"]}, {"root": "UPDATE from compilerClass to useResultsPrinter", "operations": ["UPD SimpleName: compilerClass from compilerClass to useResultsPrinter"]}, {"root": "DEL ParameterizedType: Class<? extends JavaCompiler>", "operations": ["DEL SimpleName: Class", "DEL SimpleType: Class", "DEL WildcardType: ? extends JavaCompiler", "DEL ParameterizedType: Class<? extends JavaCompiler>", "DEL SimpleType: JavaCompiler"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TagElement", "DEL TextElement: A custom Scanner to use if we want to use a non-default set of error-prone checks, e.g.", "DEL TextElement: for testing.  Null if we want to use the default set of checks."]}, {"root": "DEL ParameterizedType: Class<? extends JavaCompiler>", "operations": ["DEL ParameterizedType: Class<? extends JavaCompiler>", "DEL SimpleName: JavaCompiler", "DEL SimpleType: Class", "DEL SimpleType: JavaCompiler", "DEL WildcardType: ? extends JavaCompiler", "DEL SimpleName: Class"]}, {"root": "DEL SimpleName: compilerClass", "operations": ["DEL SimpleName: compilerClass"]}, {"root": "DEL SimpleName: printWriter", "operations": ["DEL SimpleName: printWriter"]}, {"root": "DEL SimpleName: errorProneScanner", "operations": ["DEL SimpleName: errorProneScanner"]}, {"root": "DEL SimpleName: compilerClass", "operations": ["DEL SimpleName: compilerClass"]}, {"root": "DEL ParameterizedType: Class<? extends JavaCompiler>", "operations": ["DEL SimpleType: Class", "DEL ParameterizedType: Class<? extends JavaCompiler>", "DEL SimpleName: JavaCompiler", "DEL SimpleName: Class", "DEL WildcardType: ? extends JavaCompiler", "DEL SimpleType: JavaCompiler"]}, {"root": "DEL SimpleName: compilerClass", "operations": ["DEL SimpleName: compilerClass"]}, {"root": "DEL TypeLiteral", "operations": ["DEL TypeLiteral", "DEL SimpleType: ErrorReportingJavaCompiler", "DEL SimpleName: ErrorReportingJavaCompiler"]}, {"root": "DEL SimpleName: scanner", "operations": ["DEL SimpleName: scanner"]}, {"root": "DEL SimpleName: compilerClass", "operations": ["DEL SimpleName: compilerClass"]}, {"root": "DEL TypeLiteral", "operations": ["DEL TypeLiteral", "DEL SimpleType: SearchingJavaCompiler", "DEL SimpleName: SearchingJavaCompiler"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: ErrorReportingJavaCompiler", "DEL SimpleName: compilerClass", "DEL ThisExpression", "DEL TypeLiteral", "DEL FieldAccess", "DEL SimpleType: ErrorReportingJavaCompiler", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: scannerInContext", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL SimpleName: scannerInContext", "DEL Assignment: =", "DEL Block", "DEL SimpleName: errorProneScanner", "DEL ExpressionStatement"]}, {"root": "DEL StringLiteral: \"preRegister\"", "operations": ["DEL StringLiteral: \"preRegister\""]}, {"root": "DEL TypeLiteral", "operations": ["DEL SimpleType: Context", "DEL TypeLiteral", "DEL SimpleName: Context"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL SimpleName: context", "operations": ["DEL SimpleName: context"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: e", "DEL SimpleType: Scanner", "DEL TypeLiteral", "DEL SimpleName: put", "DEL SimpleType: RuntimeException", "DEL SimpleName: scannerInContext", "DEL TypeLiteral", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: Scanner", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"We are very sorry.\"", "DEL Block", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"The JavaCompiler used must have the preRegister static method. \"", "DEL TryStatement", "DEL SimpleName: scannerInContext", "DEL SimpleName: scannerInContext", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: ReflectiveOperationException", "DEL MethodInvocation", "DEL SimpleName: context", "DEL Block", "DEL SimpleType: ReflectiveOperationException", "DEL CatchClause", "DEL NullLiteral", "DEL SimpleType: Scanner", "DEL ExpressionStatement", "DEL Block", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: RuntimeException", "DEL SimpleName: Scanner", "DEL SimpleName: Scanner", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL SimpleName: e"]}]}}, {"ErrorProneCompiler_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(702) at 7", "Insert ImportDeclaration(3) into CompilationUnit(702) at 1", "Move FieldDeclaration(189) into TypeDeclaration: class(701) at 10", "Insert QualifiedName: com.google.common.base.Preconditions.checkNotNull(2) into ImportDeclaration(3) at 0", "Update QualifiedName: com.sun.tools.javac.main.JavaCompiler(6) to com.sun.tools.javac.util.JavacMessages", "Insert MethodDeclaration(679) into TypeDeclaration: class(701) at 17", "Insert MethodDeclaration(700) into TypeDeclaration: class(701) at 18", "Insert SimpleType: SearchResultsPrinter(198) into FieldDeclaration(201) at 2", "Move Modifier: public(569) into MethodDeclaration(679) at 0", "Move SimpleType: Result(571) into MethodDeclaration(679) at 1", "Move SimpleName: compile(572) into MethodDeclaration(679) at 2", "Move SingleVariableDeclaration(578) into MethodDeclaration(679) at 3", "Move SingleVariableDeclaration(582) into MethodDeclaration(679) at 4", "Move SingleVariableDeclaration(589) into MethodDeclaration(679) at 5", "Move SingleVariableDeclaration(597) into MethodDeclaration(679) at 6", "Insert Block(678) into MethodDeclaration(679) at 7", "Insert Javadoc(682) into MethodDeclaration(700) at 0", "Insert Modifier: public(683) into MethodDeclaration(700) at 1", "Insert Modifier: static(684) into MethodDeclaration(700) at 2", "Insert PrimitiveType: void(685) into MethodDeclaration(700) at 3", "Insert SimpleName: setupMessageBundle(686) into MethodDeclaration(700) at 4", "Insert SingleVariableDeclaration(690) into MethodDeclaration(700) at 5", "Insert Block(699) into MethodDeclaration(700) at 6", "Update SimpleName: JavaCompiler(183) to SearchResultsPrinter", "Move SimpleName: JavaCompiler(183) into SimpleType: SearchResultsPrinter(198) at 0", "Update SimpleName: compilerClass(187) to resultsPrinter", "Update SimpleName: s(219) to compilerName", "Insert PrimitiveType: boolean(231) into SingleVariableDeclaration(233) at 0", "Insert SimpleName: useResultsPrinter(232) into SingleVariableDeclaration(233) at 1", "Insert Modifier: private(283) into FieldDeclaration(293) at 0", "Insert Modifier: private(294) into FieldDeclaration(304) at 0", "Insert Modifier: private(305) into FieldDeclaration(311) at 0", "Insert Modifier: private(312) into FieldDeclaration(317) at 0", "Insert PrimitiveType: boolean(313) into FieldDeclaration(317) at 1", "Move ExpressionStatement(419) into Block(430) at 2", "Move VariableDeclarationStatement(606) into Block(678) at 0", "Move IfStatement(619) into Block(678) at 1", "Move TryStatement(684) into Block(678) at 2", "Insert ExpressionStatement(645) into Block(678) at 3", "Insert ExpressionStatement(652) into Block(678) at 4", "Insert VariableDeclarationStatement(666) into Block(678) at 5", "Move IfStatement(650) into Block(678) at 6", "Insert ReturnStatement(677) into Block(678) at 7", "Insert TagElement(681) into Javadoc(682) at 0", "Insert SimpleType: Context(688) into SingleVariableDeclaration(690) at 0", "Insert SimpleName: context(689) into SingleVariableDeclaration(690) at 1", "Move ExpressionStatement(696) into Block(699) at 0", "Insert SimpleName: useResultsPrinter(314) into VariableDeclarationFragment(316) at 0", "Insert BooleanLiteral: false(315) into VariableDeclarationFragment(316) at 1", "Insert MethodInvocation(644) into ExpressionStatement(645) at 0", "Insert MethodInvocation(651) into ExpressionStatement(652) at 0", "Insert SimpleType: Result(654) into VariableDeclarationStatement(666) at 0", "Insert VariableDeclarationFragment(665) into VariableDeclarationStatement(666) at 1", "Update InfixExpression: ==(636) to !=", "Insert SimpleName: result(676) into ReturnStatement(677) at 0", "Insert TextElement: Registers our message bundle.(680) into TagElement(681) at 0", "Update SimpleName: Scanner(653) to Context", "Move SimpleName: Scanner(653) into SimpleType: Context(688) at 0", "Insert MethodInvocation(239) into Assignment: =(240) at 1", "Insert MethodInvocation(263) into Assignment: =(264) at 1", "Insert ConditionalExpression(275) into Assignment: =(276) at 1", "Insert SimpleName: setupMessageBundle(642) into MethodInvocation(644) at 0", "Insert SimpleName: context(643) into MethodInvocation(644) at 1", "Insert SimpleName: ErrorProneJavacJavaCompiler(646) into MethodInvocation(651) at 0", "Insert SimpleName: preRegister(647) into MethodInvocation(651) at 1", "Move SimpleName: context(623) into MethodInvocation(651) at 2", "Update SimpleName: get(624) to errorProneScanner", "Move SimpleName: get(624) into MethodInvocation(651) at 3", "Insert SimpleName: resultsPrinter(650) into MethodInvocation(651) at 4", "Insert SimpleName: Result(653) into SimpleType: Result(654) at 0", "Insert SimpleName: result(655) into VariableDeclarationFragment(665) at 0", "Move MethodInvocation(721) into VariableDeclarationFragment(665) at 1", "Update SimpleName: errorProneScanner(634) to resultsPrinter", "Update SimpleName: invoke(692) to add", "Insert StringLiteral: \"com.google.errorprone.errors\"(696) into MethodInvocation(697) at 2", "Insert SimpleName: checkNotNull(237) into MethodInvocation(239) at 0", "Insert SimpleName: printWriter(238) into MethodInvocation(239) at 1", "Update SimpleName: s(256) to compilerName", "Insert SimpleName: checkNotNull(261) into MethodInvocation(263) at 0", "Insert SimpleName: errorProneScanner(262) into MethodInvocation(263) at 1", "Update SimpleName: compilerClass(274) to resultsPrinter", "Insert SimpleName: useResultsPrinter(269) into ConditionalExpression(275) at 0", "Insert ClassInstanceCreation(273) into ConditionalExpression(275) at 1", "Insert NullLiteral(274) into ConditionalExpression(275) at 2", "Insert ConditionalExpression(344) into ClassInstanceCreation(346) at 4", "Insert SimpleName: useResultsPrinter(345) into ClassInstanceCreation(346) at 5", "Insert BooleanLiteral: true(425) into Assignment: =(426) at 1", "Insert ExpressionStatement(636) into Block(639) at 1", "Insert MethodInvocation(672) into ExpressionStatement(673) at 0", "Update SimpleName: compilerClass(685) to JavacMessages", "Update SimpleName: getMethod(686) to instance", "Insert SimpleName: context(693) into MethodInvocation(694) at 2", "Insert SimpleType: SearchResultsPrinter(271) into ClassInstanceCreation(273) at 0", "Insert SimpleName: printWriter(272) into ClassInstanceCreation(273) at 1", "Insert InfixExpression: !=(338) into ConditionalExpression(344) at 0", "Insert SimpleName: scanner(339) into ConditionalExpression(344) at 1", "Move ClassInstanceCreation(641) into ConditionalExpression(344) at 2", "Update SimpleName: compilerClass(413) to useResultsPrinter", "Update SimpleName: scannerInContext(661) to errorProneScanner", "Insert MethodInvocation(635) into ExpressionStatement(636) at 0", "Insert SimpleName: resultsPrinter(670) into MethodInvocation(672) at 0", "Insert SimpleName: SearchResultsPrinter(270) into SimpleType: SearchResultsPrinter(271) at 0", "Insert SimpleName: scanner(336) into InfixExpression: !=(338) at 0", "Insert NullLiteral(337) into InfixExpression: !=(338) at 1", "Insert SimpleName: printWriter(633) into MethodInvocation(635) at 0", "Insert SimpleName: flush(634) into MethodInvocation(635) at 1", "Delete SimpleName: Class(181)", "Delete SimpleType: Class(182)", "Delete SimpleType: JavaCompiler(184)", "Delete WildcardType: ? extends JavaCompiler(185)", "Delete ParameterizedType: Class<? extends JavaCompiler>(186)", "Delete TextElement: A custom Scanner to use if we want to use a non-default set of error-prone checks, e.g.(204)", "Delete TextElement: for testing.  Null if we want to use the default set of checks.(205)", "Delete TagElement(206)", "Delete Javadoc(207)", "Delete SimpleName: Class(237)", "Delete SimpleType: Class(238)", "Delete SimpleName: JavaCompiler(239)", "Delete SimpleType: JavaCompiler(240)", "Delete WildcardType: ? extends JavaCompiler(241)", "Delete ParameterizedType: Class<? extends JavaCompiler>(242)", "Delete SimpleName: compilerClass(243)", "Delete SimpleName: printWriter(248)", "Delete SimpleName: errorProneScanner(270)", "Delete SimpleName: compilerClass(276)", "Delete SimpleName: Class(310)", "Delete SimpleType: Class(311)", "Delete SimpleName: JavaCompiler(312)", "Delete SimpleType: JavaCompiler(313)", "Delete WildcardType: ? extends JavaCompiler(314)", "Delete ParameterizedType: Class<? extends JavaCompiler>(315)", "Delete SimpleName: compilerClass(316)", "Delete SimpleName: ErrorReportingJavaCompiler(317)", "Delete SimpleType: ErrorReportingJavaCompiler(318)", "Delete TypeLiteral(319)", "Delete SimpleName: scanner(340)", "Delete SimpleName: compilerClass(341)", "Delete SimpleName: SearchingJavaCompiler(415)", "Delete SimpleType: SearchingJavaCompiler(416)", "Delete TypeLiteral(417)", "Delete ThisExpression(438)", "Delete SimpleName: compilerClass(439)", "Delete FieldAccess(440)", "Delete SimpleName: ErrorReportingJavaCompiler(441)", "Delete SimpleType: ErrorReportingJavaCompiler(442)", "Delete TypeLiteral(443)", "Delete Assignment: =(444)", "Delete ExpressionStatement(445)", "Delete SimpleName: scannerInContext(637)", "Delete Assignment: =(642)", "Delete SimpleName: scannerInContext(645)", "Delete SimpleName: errorProneScanner(646)", "Delete Assignment: =(647)", "Delete ExpressionStatement(648)", "Delete Block(649)", "Delete StringLiteral: \"preRegister\"(687)", "Delete SimpleName: Context(688)", "Delete SimpleType: Context(689)", "Delete TypeLiteral(690)", "Delete NullLiteral(693)", "Delete SimpleName: context(694)", "Delete SimpleName: Scanner(620)", "Delete SimpleType: Scanner(621)", "Delete SimpleName: scannerInContext(622)", "Delete SimpleName: Scanner(625)", "Delete SimpleType: Scanner(626)", "Delete TypeLiteral(627)", "Delete MethodInvocation(628)", "Delete VariableDeclarationFragment(629)", "Delete VariableDeclarationStatement(630)", "Delete SimpleName: scannerInContext(631)", "Delete NullLiteral(632)", "Delete InfixExpression: ==(633)", "Delete SimpleName: context(651)", "Delete SimpleName: put(652)", "Delete SimpleType: Scanner(654)", "Delete TypeLiteral(655)", "Delete SimpleName: scannerInContext(656)", "Delete MethodInvocation(657)", "Delete ExpressionStatement(658)", "Delete Block(659)", "Delete IfStatement(660)", "Delete Block(697)", "Delete SimpleName: ReflectiveOperationException(698)", "Delete SimpleType: ReflectiveOperationException(699)", "Delete SimpleName: e(700)", "Delete SingleVariableDeclaration(701)", "Delete SimpleName: RuntimeException(702)", "Delete SimpleType: RuntimeException(703)", "Delete StringLiteral: \"The JavaCompiler used must have the preRegister static method. \"(704)", "Delete StringLiteral: \"We are very sorry.\"(705)", "Delete InfixExpression: +(706)", "Delete SimpleName: e(707)", "Delete ClassInstanceCreation(708)", "Delete ThrowStatement(709)", "Delete Block(710)", "Delete CatchClause(711)", "Delete TryStatement(712)", "Delete ReturnStatement(722)", "Delete Block(723)", "Delete MethodDeclaration(724)"]}}, {"ErrorProneJavaCompiler_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.errorprone.ErrorProneScanner.EnabledPredicate.DEFAULT_CHECKS to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from ErrorReportingJavaCompiler to ErrorProneJavacJavaCompiler", "operations": ["UPD SimpleName: ErrorReportingJavaCompiler from ErrorReportingJavaCompiler to ErrorProneJavacJavaCompiler"]}, {"root": "INS SimpleName: scanner to MethodInvocation at 3", "operations": ["INS SimpleName: scanner to MethodInvocation at 3"]}, {"root": "INS SimpleName: DEFAULT_CHECKS to ClassInstanceCreation at 1", "operations": ["INS SimpleName: DEFAULT_CHECKS to ClassInstanceCreation at 1"]}, {"root": "DEL QualifiedName: ErrorProneScanner.EnabledPredicate.DEFAULT_CHECKS", "operations": ["DEL QualifiedName: ErrorProneScanner.EnabledPredicate.DEFAULT_CHECKS"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Scanner", "DEL SimpleName: scanner", "DEL SimpleName: put", "DEL TypeLiteral", "DEL SimpleName: context", "DEL SimpleType: Scanner"]}]}}, {"ErrorProneJavaCompiler_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(545) at 1", "Insert QualifiedName: com.google.errorprone.ErrorProneScanner.EnabledPredicate.DEFAULT_CHECKS(2) into ImportDeclaration(3) at 0", "Update SimpleName: ErrorReportingJavaCompiler(397) to ErrorProneJavacJavaCompiler", "Insert SimpleName: scanner(394) into MethodInvocation(395) at 3", "Insert SimpleName: DEFAULT_CHECKS(217) into ClassInstanceCreation(218) at 1", "Delete QualifiedName: ErrorProneScanner.EnabledPredicate.DEFAULT_CHECKS(215)", "Delete SimpleName: context(369)", "Delete SimpleName: put(370)", "Delete SimpleName: Scanner(371)", "Delete SimpleType: Scanner(372)", "Delete TypeLiteral(373)", "Delete SimpleName: scanner(374)", "Delete MethodInvocation(375)", "Delete ExpressionStatement(376)"]}}, {"JavacErrorDescriptionListener_cluster": {"actions": [{"root": "UPDATE from Context to JavaCompiler", "operations": ["UPD SimpleName: Context from Context to JavaCompiler", "UPD SimpleType: Context from Context to JavaCompiler"]}, {"root": "UPDATE from context to compiler", "operations": ["UPD SimpleName: context from context to compiler"]}, {"root": "INS SimpleName: compiler to Assignment: = at 1", "operations": ["INS SimpleName: compiler to Assignment: = at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.util.Context"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: JavaCompiler", "DEL SimpleName: instance", "DEL SimpleName: context"]}]}}, {"JavacErrorDescriptionListener_diff": {"operations": ["Update SimpleType: Context(139) to JavaCompiler", "Update SimpleName: context(140) to compiler", "Update SimpleName: Context(138) to JavaCompiler", "Insert SimpleName: compiler(161) into Assignment: =(162) at 1", "Delete QualifiedName: com.sun.tools.javac.util.Context(16)", "Delete ImportDeclaration(17)", "Delete SimpleName: JavaCompiler(163)", "Delete SimpleName: instance(164)", "Delete SimpleName: context(165)", "Delete MethodInvocation(166)"]}}, {"SearchResultsPrinter_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.sun.tools.javac.util.Context to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: java.io.PrintWriter to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: log to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: setupMessageBundle to MethodInvocation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: ErrorProneCompiler to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: out to MethodInvocation at 3", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: log to FieldAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: context to VariableDeclarationFragment at 0", "INS SimpleName: context to MethodInvocation at 0", "INS SimpleType: Context to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: PrintWriter to SimpleType: PrintWriter at 0", "INS SimpleName: context to MethodInvocation at 2", "INS SimpleType: PrintWriter to SingleVariableDeclaration at 0", "INS SimpleName: Log to MethodInvocation at 0", "INS SimpleName: out to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Context to SimpleType: Context at 0", "INS SimpleName: Context to SimpleType: Context at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: context to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: Context to VariableDeclarationStatement at 0", "INS SimpleName: instance to MethodInvocation at 1", "INS Block to MethodDeclaration at 3", "INS ExpressionStatement to Block at 2", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: Log.outKey to MethodInvocation at 2", "INS SimpleName: SearchResultsPrinter to MethodDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: Log to FieldDeclaration at 2"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: log", "DEL SingleVariableDeclaration"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: originalSource"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL InfixExpression: !=", "DEL SimpleName: originalSource", "DEL SimpleName: originalSource", "DEL SimpleName: originalSource", "DEL NullLiteral", "DEL Block", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: JavaFileObject", "DEL TryStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: JavaFileObject", "DEL VariableDeclarationFragment", "DEL SimpleName: log", "DEL Block", "DEL SimpleName: useSource"]}]}}, {"SearchResultsPrinter_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(175) at 2", "Insert ImportDeclaration(13) into CompilationUnit(175) at 6", "Insert QualifiedName: com.sun.tools.javac.util.Context(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.io.PrintWriter(12) into ImportDeclaration(13) at 0", "Insert FieldDeclaration(57) into TypeDeclaration: class(174) at 5", "Insert MethodDeclaration(93) into TypeDeclaration: class(174) at 6", "Insert Modifier: private(51) into FieldDeclaration(57) at 0", "Insert Modifier: final(52) into FieldDeclaration(57) at 1", "Move SimpleType: Log(76) into FieldDeclaration(57) at 2", "Insert VariableDeclarationFragment(56) into FieldDeclaration(57) at 3", "Insert Modifier: public(58) into MethodDeclaration(93) at 0", "Insert SimpleName: SearchResultsPrinter(59) into MethodDeclaration(93) at 1", "Insert SingleVariableDeclaration(63) into MethodDeclaration(93) at 2", "Insert Block(92) into MethodDeclaration(93) at 3", "Insert SimpleName: log(55) into VariableDeclarationFragment(56) at 0", "Insert SimpleType: PrintWriter(61) into SingleVariableDeclaration(63) at 0", "Insert SimpleName: out(62) into SingleVariableDeclaration(63) at 1", "Insert VariableDeclarationStatement(71) into Block(92) at 0", "Insert ExpressionStatement(77) into Block(92) at 1", "Insert ExpressionStatement(82) into Block(92) at 2", "Insert ExpressionStatement(91) into Block(92) at 3", "Insert SimpleName: PrintWriter(60) into SimpleType: PrintWriter(61) at 0", "Insert SimpleType: Context(65) into VariableDeclarationStatement(71) at 0", "Insert VariableDeclarationFragment(70) into VariableDeclarationStatement(71) at 1", "Insert MethodInvocation(76) into ExpressionStatement(77) at 0", "Insert MethodInvocation(81) into ExpressionStatement(82) at 0", "Insert Assignment: =(90) into ExpressionStatement(91) at 0", "Move Block(111) into EnhancedForStatement(148) at 2", "Insert SimpleName: Context(64) into SimpleType: Context(65) at 0", "Insert SimpleName: context(66) into VariableDeclarationFragment(70) at 0", "Insert ClassInstanceCreation(69) into VariableDeclarationFragment(70) at 1", "Insert SimpleName: context(72) into MethodInvocation(76) at 0", "Insert SimpleName: put(73) into MethodInvocation(76) at 1", "Insert QualifiedName: Log.outKey(74) into MethodInvocation(76) at 2", "Insert SimpleName: out(75) into MethodInvocation(76) at 3", "Insert SimpleName: ErrorProneCompiler(78) into MethodInvocation(81) at 0", "Insert SimpleName: setupMessageBundle(79) into MethodInvocation(81) at 1", "Insert SimpleName: context(80) into MethodInvocation(81) at 2", "Insert FieldAccess(85) into Assignment: =(90) at 0", "Insert MethodInvocation(89) into Assignment: =(90) at 1", "Move ExpressionStatement(100) into Block(147) at 0", "Insert SimpleType: Context(68) into ClassInstanceCreation(69) at 0", "Insert ThisExpression(83) into FieldAccess(85) at 0", "Insert SimpleName: log(84) into FieldAccess(85) at 1", "Insert SimpleName: Log(86) into MethodInvocation(89) at 0", "Insert SimpleName: instance(87) into MethodInvocation(89) at 1", "Insert SimpleName: context(88) into MethodInvocation(89) at 2", "Move MethodInvocation(98) into ExpressionStatement(136) at 0", "Insert SimpleName: Context(67) into SimpleType: Context(68) at 0", "Delete SimpleName: log(77)", "Delete SingleVariableDeclaration(78)", "Delete SimpleName: originalSource(94)", "Delete Assignment: =(99)", "Delete SimpleName: JavaFileObject(89)", "Delete SimpleType: JavaFileObject(90)", "Delete SimpleName: originalSource(91)", "Delete VariableDeclarationFragment(92)", "Delete VariableDeclarationStatement(93)", "Delete SimpleName: originalSource(112)", "Delete NullLiteral(113)", "Delete InfixExpression: !=(114)", "Delete SimpleName: log(115)", "Delete SimpleName: useSource(116)", "Delete SimpleName: originalSource(117)", "Delete MethodInvocation(118)", "Delete ExpressionStatement(119)", "Delete Block(120)", "Delete IfStatement(121)", "Delete Block(122)", "Delete TryStatement(123)", "Delete Block(124)"]}}, {"SearchingJavaCompiler_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.errorprone"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.comp.AttrContext", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.comp.Env"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.main.JavaCompiler"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.util.Context", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.util.Context.Factory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Queue", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: private", "DEL SimpleType: Scanner", "DEL TextElement: within the same Context. And it's the preferred way for extending behavior", "DEL SimpleName: Factory", "DEL SimpleName: context", "DEL SimpleName: Context", "DEL SuperConstructorInvocation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: JavaCompiler", "DEL SimpleName: postFlow", "DEL TextElement: superclass, JavaCompiler) will actually construct and return our version.", "DEL SimpleName: SearchResultsPrinter", "DEL Block", "DEL SimpleType: Scanner", "DEL TagElement: @author", "DEL Javadoc", "DEL SimpleName: JavaCompiler", "DEL SimpleName: envs", "DEL ParameterizedType: Env<AttrContext>", "DEL FieldDeclaration", "DEL TextElement: within javac, per the documentation in ", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: context", "DEL VariableDeclarationFragment", "DEL SimpleName: ErrorProneAnalyzer", "DEL SimpleName: resultsPrinter", "DEL Modifier: public", "DEL SimpleType: SearchResultsPrinter", "DEL Modifier: static", "DEL SimpleName: env", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL ReturnStatement", "DEL TagElement", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL TypeLiteral", "DEL Block", "DEL SimpleName: printed", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: scanner", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SimpleName: Env", "DEL SimpleName: make", "DEL SimpleName: SearchingJavaCompiler", "DEL SimpleName: Queue", "DEL SimpleType: Env", "DEL ExpressionStatement", "DEL SimpleType: ErrorProneAnalyzer", "DEL SimpleName: disposeNames", "DEL VariableDeclarationFragment", "DEL SimpleName: SearchingJavaCompiler", "DEL MethodInvocation", "DEL AnonymousClassDeclaration", "DEL ExpressionStatement", "DEL SimpleName: close", "DEL FieldDeclaration", "DEL InfixExpression: >", "DEL ClassInstanceCreation", "DEL SimpleName: attrContextEnv", "DEL SimpleType: Factory", "DEL SimpleName: Scanner", "DEL SimpleName: compilerKey", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL SimpleName: log", "DEL MethodDeclaration", "DEL SimpleName: attrContextEnv", "DEL SimpleName: flow", "DEL SimpleName: ctx", "DEL Assignment: =", "DEL Block", "DEL SimpleName: Context", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: AttrContext", "DEL ParameterizedType: Env<AttrContext>", "DEL Block", "DEL TextElement: Run Error Prone analysis after performing dataflow checks.", "DEL SuperMethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: attrContextEnv", "DEL SimpleType: SearchingJavaCompiler", "DEL SimpleType: JavaCompiler", "DEL SimpleType: AttrContext", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Modifier: protected", "DEL SimpleName: get", "DEL SimpleName: JavaCompiler", "DEL SimpleName: scanner", "DEL SimpleName: context", "DEL Javadoc", "DEL PrefixExpression: !", "DEL SimpleName: ErrorProneAnalyzer", "DEL SimpleName: errorProneAnalyzer", "DEL MarkerAnnotation", "DEL SimpleName: Env", "DEL SimpleName: resultsPrinter", "DEL SimpleName: ctx", "DEL Javadoc", "DEL SimpleName: put", "DEL Modifier: public", "DEL ParameterizedType: Factory<JavaCompiler>", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: envs", "DEL SimpleName: context", "DEL SimpleName: context", "DEL SimpleType: JavaCompiler", "DEL ParameterizedType: Queue<Env<AttrContext>>", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: SearchingJavaCompiler", "DEL SimpleName: printMatches", "DEL NullLiteral", "DEL MethodInvocation", "DEL TagElement", "DEL TypeLiteral", "DEL SimpleName: put", "DEL MarkerAnnotation", "DEL Modifier: private", "DEL Modifier: public", "DEL TextElement:  alexeagle@google.com (Alex Eagle)", "DEL PrimitiveType: boolean", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: context", "DEL TextElement: Adds an initialization hook to the Context, such that each subsequent", "DEL SimpleName: errorProneAnalyzer", "DEL Block", "DEL SimpleName: context", "DEL SimpleType: AttrContext", "DEL SimpleName: Env", "DEL IfStatement", "DEL MethodInvocation", "DEL SuperMethodInvocation", "DEL SimpleType: SearchResultsPrinter", "DEL Modifier: final", "DEL SimpleType: Context", "DEL SimpleName: Scanner", "DEL SimpleName: env", "DEL TextElement: Look for matches, but only report the locations of the matches.", "DEL MethodInvocation", "DEL SimpleName: errorProneAnalyzer", "DEL SimpleName: printed", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: flow", "DEL SimpleName: Scanner", "DEL SimpleName: Context", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL TextElement: .", "DEL SimpleName: Override", "DEL StringLiteral: \"context must have a Scanner instance\"", "DEL SimpleType: Scanner", "DEL SimpleName: disposeNames", "DEL BooleanLiteral: false", "DEL TextElement: be requested for later stages of the compilation (annotation processing),", "DEL SimpleType: Context", "DEL SimpleName: errorCount", "DEL TextElement: you've written any error messaging or suggested fixes.", "DEL SimpleName: reportReadyForAnalysis", "DEL TextElement: Useful for preliminary exploration of a potential problem, before", "DEL SimpleType: Scanner", "DEL SimpleName: SearchResultsPrinter", "DEL SimpleName: get", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleType: Env", "DEL QualifiedName: com.sun.tools.javac.util.Context", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: Scanner", "DEL Modifier: public", "DEL SimpleType: Context", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL Modifier: final", "DEL TextElement: request for a JavaCompiler (i.e., a lookup for 'compilerKey' of our", "DEL TextElement: It's necessary since many new JavaCompilers may", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: resultsPrinter", "DEL SimpleType: AttrContext", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleType: Queue", "DEL BooleanLiteral: true", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Block", "DEL SimpleType: ErrorProneAnalyzer", "DEL SimpleName: printed", "DEL SimpleName: close", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleName: postFlow", "DEL SimpleName: Override", "DEL SimpleName: resultsPrinter", "DEL SimpleName: AttrContext", "DEL SimpleType: Env", "DEL SimpleName: preRegister", "DEL ParameterizedType: Env<AttrContext>", "DEL MethodDeclaration", "DEL SimpleName: JavaCompiler", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: AttrContext", "DEL SimpleName: ctx"]}]}}, {"SearchingJavaCompiler_diff": {"operations": ["Delete QualifiedName: com.google.errorprone(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.sun.tools.javac.comp.AttrContext(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.sun.tools.javac.comp.Env(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.sun.tools.javac.main.JavaCompiler(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.sun.tools.javac.util.Context(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.sun.tools.javac.util.Context.Factory(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Queue(12)", "Delete ImportDeclaration(13)", "Delete TextElement: Look for matches, but only report the locations of the matches.(14)", "Delete TextElement: Useful for preliminary exploration of a potential problem, before(15)", "Delete TextElement: you've written any error messaging or suggested fixes.(16)", "Delete TagElement(17)", "Delete TextElement:  alexeagle@google.com (Alex Eagle)(18)", "Delete TagElement: @author(19)", "Delete Javadoc(20)", "Delete Modifier: public(21)", "Delete SimpleName: SearchingJavaCompiler(22)", "Delete SimpleName: JavaCompiler(23)", "Delete SimpleType: JavaCompiler(24)", "Delete Modifier: private(25)", "Delete Modifier: final(26)", "Delete SimpleName: ErrorProneAnalyzer(27)", "Delete SimpleType: ErrorProneAnalyzer(28)", "Delete SimpleName: errorProneAnalyzer(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete Modifier: private(32)", "Delete SimpleName: SearchResultsPrinter(33)", "Delete SimpleType: SearchResultsPrinter(34)", "Delete SimpleName: resultsPrinter(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete Modifier: public(38)", "Delete SimpleName: SearchingJavaCompiler(39)", "Delete SimpleName: Context(40)", "Delete SimpleType: Context(41)", "Delete SimpleName: context(42)", "Delete SingleVariableDeclaration(43)", "Delete SimpleName: context(44)", "Delete SuperConstructorInvocation(45)", "Delete SimpleName: context(46)", "Delete SimpleName: get(47)", "Delete SimpleName: Scanner(48)", "Delete SimpleType: Scanner(49)", "Delete TypeLiteral(50)", "Delete MethodInvocation(51)", "Delete NullLiteral(52)", "Delete InfixExpression: ==(53)", "Delete SimpleName: IllegalArgumentException(54)", "Delete SimpleType: IllegalArgumentException(55)", "Delete StringLiteral: \"context must have a Scanner instance\"(56)", "Delete ClassInstanceCreation(57)", "Delete ThrowStatement(58)", "Delete Block(59)", "Delete IfStatement(60)", "Delete SimpleName: errorProneAnalyzer(61)", "Delete SimpleName: ErrorProneAnalyzer(62)", "Delete SimpleType: ErrorProneAnalyzer(63)", "Delete SimpleName: log(64)", "Delete SimpleName: context(65)", "Delete SimpleName: resultsPrinter(66)", "Delete ClassInstanceCreation(67)", "Delete Assignment: =(68)", "Delete ExpressionStatement(69)", "Delete SimpleName: resultsPrinter(70)", "Delete SimpleName: SearchResultsPrinter(71)", "Delete SimpleType: SearchResultsPrinter(72)", "Delete ClassInstanceCreation(73)", "Delete Assignment: =(74)", "Delete ExpressionStatement(75)", "Delete Block(76)", "Delete MethodDeclaration(77)", "Delete TextElement: Adds an initialization hook to the Context, such that each subsequent(78)", "Delete TextElement: request for a JavaCompiler (i.e., a lookup for 'compilerKey' of our(79)", "Delete TextElement: superclass, JavaCompiler) will actually construct and return our version.(80)", "Delete TextElement: It's necessary since many new JavaCompilers may(81)", "Delete TextElement: be requested for later stages of the compilation (annotation processing),(82)", "Delete TextElement: within the same Context. And it's the preferred way for extending behavior(83)", "Delete TextElement: within javac, per the documentation in (84)", "Delete QualifiedName: com.sun.tools.javac.util.Context(85)", "Delete TagElement: @link(86)", "Delete TextElement: .(87)", "Delete TagElement(88)", "Delete Javadoc(89)", "Delete Modifier: public(90)", "Delete Modifier: static(91)", "Delete PrimitiveType: void(92)", "Delete SimpleName: preRegister(93)", "Delete Modifier: final(94)", "Delete SimpleName: Context(95)", "Delete SimpleType: Context(96)", "Delete SimpleName: context(97)", "Delete SingleVariableDeclaration(98)", "Delete Modifier: final(99)", "Delete SimpleName: Scanner(100)", "Delete SimpleType: Scanner(101)", "Delete SimpleName: scanner(102)", "Delete SimpleName: context(103)", "Delete SimpleName: get(104)", "Delete SimpleName: Scanner(105)", "Delete SimpleType: Scanner(106)", "Delete TypeLiteral(107)", "Delete MethodInvocation(108)", "Delete VariableDeclarationFragment(109)", "Delete VariableDeclarationStatement(110)", "Delete SimpleName: context(111)", "Delete SimpleName: put(112)", "Delete SimpleName: compilerKey(113)", "Delete SimpleName: Factory(114)", "Delete SimpleType: Factory(115)", "Delete SimpleName: JavaCompiler(116)", "Delete SimpleType: JavaCompiler(117)", "Delete ParameterizedType: Factory<JavaCompiler>(118)", "Delete SimpleName: Override(119)", "Delete MarkerAnnotation(120)", "Delete Modifier: public(121)", "Delete SimpleName: JavaCompiler(122)", "Delete SimpleType: JavaCompiler(123)", "Delete SimpleName: make(124)", "Delete SimpleName: Context(125)", "Delete SimpleType: Context(126)", "Delete SimpleName: ctx(127)", "Delete SingleVariableDeclaration(128)", "Delete SimpleName: ctx(129)", "Delete SimpleName: put(130)", "Delete SimpleName: Scanner(131)", "Delete SimpleType: Scanner(132)", "Delete TypeLiteral(133)", "Delete SimpleName: scanner(134)", "Delete MethodInvocation(135)", "Delete ExpressionStatement(136)", "Delete SimpleName: SearchingJavaCompiler(137)", "Delete SimpleType: SearchingJavaCompiler(138)", "Delete SimpleName: ctx(139)", "Delete ClassInstanceCreation(140)", "Delete ReturnStatement(141)", "Delete Block(142)", "Delete MethodDeclaration(143)", "Delete AnonymousClassDeclaration(144)", "Delete ClassInstanceCreation(145)", "Delete MethodInvocation(146)", "Delete ExpressionStatement(147)", "Delete Block(148)", "Delete MethodDeclaration(149)", "Delete SimpleName: Override(150)", "Delete MarkerAnnotation(151)", "Delete Modifier: protected(152)", "Delete PrimitiveType: void(153)", "Delete SimpleName: flow(154)", "Delete SimpleName: Env(155)", "Delete SimpleType: Env(156)", "Delete SimpleName: AttrContext(157)", "Delete SimpleType: AttrContext(158)", "Delete ParameterizedType: Env<AttrContext>(159)", "Delete SimpleName: attrContextEnv(160)", "Delete SingleVariableDeclaration(161)", "Delete SimpleName: Queue(162)", "Delete SimpleType: Queue(163)", "Delete SimpleName: Env(164)", "Delete SimpleType: Env(165)", "Delete SimpleName: AttrContext(166)", "Delete SimpleType: AttrContext(167)", "Delete ParameterizedType: Env<AttrContext>(168)", "Delete ParameterizedType: Queue<Env<AttrContext>>(169)", "Delete SimpleName: envs(170)", "Delete SingleVariableDeclaration(171)", "Delete SimpleName: flow(172)", "Delete SimpleName: attrContextEnv(173)", "Delete SimpleName: envs(174)", "Delete SuperMethodInvocation(175)", "Delete ExpressionStatement(176)", "Delete SimpleName: postFlow(177)", "Delete SimpleName: attrContextEnv(178)", "Delete MethodInvocation(179)", "Delete ExpressionStatement(180)", "Delete Block(181)", "Delete MethodDeclaration(182)", "Delete TextElement: Run Error Prone analysis after performing dataflow checks.(183)", "Delete TagElement(184)", "Delete Javadoc(185)", "Delete Modifier: public(186)", "Delete PrimitiveType: void(187)", "Delete SimpleName: postFlow(188)", "Delete SimpleName: Env(189)", "Delete SimpleType: Env(190)", "Delete SimpleName: AttrContext(191)", "Delete SimpleType: AttrContext(192)", "Delete ParameterizedType: Env<AttrContext>(193)", "Delete SimpleName: env(194)", "Delete SingleVariableDeclaration(195)", "Delete SimpleName: errorProneAnalyzer(196)", "Delete SimpleName: reportReadyForAnalysis(197)", "Delete SimpleName: env(198)", "Delete SimpleName: errorCount(199)", "Delete MethodInvocation(200)", "Delete NumberLiteral: 0(201)", "Delete InfixExpression: >(202)", "Delete MethodInvocation(203)", "Delete ExpressionStatement(204)", "Delete Block(205)", "Delete MethodDeclaration(206)", "Delete Modifier: private(207)", "Delete PrimitiveType: boolean(208)", "Delete SimpleName: printed(209)", "Delete BooleanLiteral: false(210)", "Delete VariableDeclarationFragment(211)", "Delete FieldDeclaration(212)", "Delete SimpleName: Override(213)", "Delete MarkerAnnotation(214)", "Delete Modifier: public(215)", "Delete PrimitiveType: void(216)", "Delete SimpleName: close(217)", "Delete PrimitiveType: boolean(218)", "Delete SimpleName: disposeNames(219)", "Delete SingleVariableDeclaration(220)", "Delete SimpleName: printed(221)", "Delete PrefixExpression: !(222)", "Delete SimpleName: resultsPrinter(223)", "Delete SimpleName: log(225)", "Delete MethodInvocation(226)", "Delete ExpressionStatement(227)", "Delete SimpleName: printed(228)", "Delete BooleanLiteral: true(229)", "Delete Assignment: =(230)", "Delete ExpressionStatement(231)", "Delete Block(232)", "Delete IfStatement(233)", "Delete SimpleName: close(234)", "Delete SimpleName: disposeNames(235)", "Delete SuperMethodInvocation(236)", "Delete ExpressionStatement(237)", "Delete Block(238)", "Delete MethodDeclaration(239)", "Delete TypeDeclaration: class(240)"]}}], "commit_stats": [{"total_files": 11, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "True"}]}