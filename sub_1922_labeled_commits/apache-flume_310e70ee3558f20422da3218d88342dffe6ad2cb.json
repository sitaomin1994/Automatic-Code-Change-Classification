{"application": "apache-flume", "csha": "310e70ee3558f20422da3218d88342dffe6ad2cb", "files": [{"InterceptorType_cluster": {"actions": [{"root": "DEL EnumConstantDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL SimpleName: REGEX_EXTRACTOR", "DEL SimpleType: org.apache.flume.interceptor.RegexExtractorInterceptor.Builder", "DEL TypeLiteral", "DEL QualifiedName: org.apache.flume.interceptor.RegexExtractorInterceptor.Builder"]}]}}, {"InterceptorType_diff": {"operations": ["Delete SimpleName: REGEX_EXTRACTOR(39)", "Delete QualifiedName: org.apache.flume.interceptor.RegexExtractorInterceptor.Builder(40)", "Delete SimpleType: org.apache.flume.interceptor.RegexExtractorInterceptor.Builder(41)", "Delete TypeLiteral(42)", "Delete EnumConstantDeclaration(43)"]}}, {"RegexExtractorInterceptor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.flume.interceptor", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL PackageDeclaration", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL Javadoc", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: limitations under the License.", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TagElement", "DEL TextElement: See the License for the specific language governing permissions and"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.regex.Matcher"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.regex.Pattern", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.lang.StringUtils", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.flume.Context", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.flume.Event"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.Logger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.LoggerFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Throwables", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Lists", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: RegexExtractorInterceptor", "DEL TextElement: agent.sources.r1.interceptors.i1.serializer = warning:com.blah.SomeSerializer,error,fatal:org.apache.flume.interceptor.RegexExtractorInterceptorTimestampSerializer<p>", "DEL VariableDeclarationFragment", "DEL SimpleName: Matcher", "DEL SimpleName: groupIndex", "DEL MethodDeclaration", "DEL SimpleName: getString", "DEL SimpleName: serializerContext", "DEL MethodInvocation", "DEL StringLiteral: \"Could not instantiate event serializer.\"", "DEL MethodDeclaration", "DEL SimpleName: Lists", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: serializerList", "DEL SimpleName: String", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: results in an event with the the following", "DEL SimpleName: groupCount", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: RegexExtractorInterceptor", "DEL Modifier: private", "DEL SimpleName: count", "DEL SimpleName: splitNameAndSerializer", "DEL VariableDeclarationFragment", "DEL SimpleName: e", "DEL SimpleType: Pattern", "DEL SimpleName: serializer", "DEL Modifier: final", "DEL SimpleName: serializers", "DEL SimpleName: find", "DEL TextElement: Interceptor that extracts matches using a specified regular expression and", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleName: Pattern", "DEL MethodInvocation", "DEL SimpleName: group", "DEL SimpleName: regex", "DEL ParameterizedType: List<NameAndSerializer>", "DEL SimpleName: serializer", "DEL FieldDeclaration", "DEL TextElement: Configuration: agent.sources.r1.interceptors.i1.regex = (\\\\d):(\\\\d):(\\\\d)", "DEL SimpleName: group", "DEL SimpleType: String", "DEL Block", "DEL Block", "DEL SimpleName: event", "DEL TextElement: body: 1:2:3.4foobar5 headers: one=>1, two=>2, three=3", "DEL SimpleType: List", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: events", "DEL MethodDeclaration", "DEL SimpleName: Interceptor", "DEL SimpleName: NameAndSerializer", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: compile", "DEL SimpleType: List", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL InfixExpression: +", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: Context", "DEL SimpleType: Context", "DEL SimpleName: forName", "DEL FieldDeclaration", "DEL ThisExpression", "DEL TextElement: serializers: Comma separated list of headerName:fully qualified serializer", "DEL EnhancedForStatement", "DEL SimpleName: Override", "DEL SimpleType: Map", "DEL SimpleName: group", "DEL SimpleName: Event", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL SimpleName: serializerContext", "DEL ThisExpression", "DEL SimpleType: List", "DEL SimpleName: interceptedEvent", "DEL VariableDeclarationFragment", "DEL SimpleType: Event", "DEL SimpleName: String", "DEL SimpleName: name", "DEL QualifiedName: serializer.serializer", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: serializer", "DEL SimpleType: Event", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: Context", "DEL SimpleName: NameAndSerializer", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: splitNameAndSerializer", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: serializers", "DEL IfStatement", "DEL StringLiteral: \"Must supply at least one name and serializer\"", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: RegexExtractorInterceptorPassThroughSerializer", "DEL SingleVariableDeclaration", "DEL SimpleName: event", "DEL SimpleName: checkArgument", "DEL SimpleType: NameAndSerializer", "DEL SimpleName: build", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleName: configureSerializers", "DEL SimpleName: isDebugEnabled", "DEL TextElement: java.util.regex package</p>. Properties:", "DEL SimpleName: Event", "DEL SimpleType: Context", "DEL TagElement: @link", "DEL Block", "DEL SimpleName: logger", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL QualifiedName: Interceptor.Builder", "DEL SimpleName: Preconditions", "DEL SimpleName: matcher", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleType: RegexExtractorInterceptor", "DEL Javadoc", "DEL SimpleName: intercept", "DEL SimpleName: count", "DEL MethodInvocation", "DEL SimpleType: List", "DEL Block", "DEL SimpleName: List", "DEL TextElement: EventBody: 1:2:3.4foobar5", "DEL SimpleName: clazzName", "DEL VariableDeclarationStatement", "DEL SimpleName: add", "DEL SimpleType: String", "DEL TypeDeclaration: class", "DEL ForStatement", "DEL TextElement: agent.sources.r1.channels = c1<p>", "DEL TextElement: Example 2:", "DEL Block", "DEL SimpleType: Interceptor.Builder", "DEL SimpleName: configureSerializers", "DEL Block", "DEL TextElement: results in an event with the the following", "DEL SimpleName: event", "DEL MethodInvocation", "DEL SimpleName: size", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL SimpleName: configure", "DEL Block", "DEL SimpleName: Pattern", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: regexString", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: serializer", "DEL SimpleType: String", "DEL SimpleType: NameAndSerializer", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: List", "DEL PrefixExpression: !", "DEL SimpleName: StringUtils", "DEL SimpleName: context", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleType: Logger", "DEL SimpleName: regex", "DEL SimpleName: put", "DEL SimpleType: RegexExtractorInterceptorPassThroughSerializer", "DEL MethodInvocation", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: serializerList", "DEL ReturnStatement", "DEL SimpleName: context", "DEL Block", "DEL Modifier: private", "DEL FieldAccess", "DEL SimpleType: Context", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL Modifier: final", "DEL StringLiteral: \"Regex pattern was misconfigured\"", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL SimpleName: Event", "DEL SimpleName: Context", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Event", "DEL ExpressionStatement", "DEL SimpleName: serialize", "DEL MethodInvocation", "DEL TextElement: agent.sources.r1.interceptors.i1.type = REGEX_EXTRACTOR<p>", "DEL SimpleName: serializer", "DEL SimpleName: LoggerFactory", "DEL SimpleName: Context", "DEL SimpleName: Interceptor", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: interceptedEvent", "DEL SimpleName: regex", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: Event", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: RegexExtractorInterceptor", "DEL PrimitiveType: void", "DEL SimpleType: String", "DEL TextElement: <p>", "DEL SimpleName: String", "DEL SimpleType: Interceptor", "DEL SimpleName: configure", "DEL SimpleType: String", "DEL SimpleName: intercepted", "DEL SimpleName: String", "DEL SimpleName: logger", "DEL SimpleName: isDebugEnabled", "DEL IfStatement", "DEL Block", "DEL SimpleType: Context", "DEL StringLiteral: \"regex\"", "DEL SimpleName: trim", "DEL VariableDeclarationFragment", "DEL SimpleType: Context", "DEL Modifier: private", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL TextElement: Note that all regular expression matching occurs through Java's built in", "DEL QualifiedName: serializer.serializer", "DEL SimpleName: Pattern", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleType: NameAndSerializer", "DEL SimpleName: headers", "DEL ExpressionStatement", "DEL SimpleType: Pattern", "DEL SimpleName: defaultSerializer", "DEL SimpleName: serializerList", "DEL TypeDeclaration: class", "DEL SimpleName: splitNameAndSerializer", "DEL MethodInvocation", "DEL SimpleName: RegexExtractorInterceptor", "DEL SimpleName: REGEX", "DEL QualifiedName: serializer.headerName", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: event", "DEL SimpleName: serializerList", "DEL SimpleName: trim", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: getCustomSerializer", "DEL QualifiedName: nameAndSerializerList.length", "DEL SimpleName: get", "DEL TextElement: agent.sources.r1.interceptors.i1.regex = (\\\\d):(\\\\d):(\\\\d)", "DEL SimpleName: regexString", "DEL SimpleName: List", "DEL SimpleName: events", "DEL TextElement: Sample config:", "DEL TextElement: </code>", "DEL SimpleName: regex", "DEL SimpleName: intercept", "DEL Block", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: NameAndSerializer", "DEL SimpleName: Map", "DEL SimpleName: matcher", "DEL SimpleName: context", "DEL FieldDeclaration", "DEL Assignment: =", "DEL SimpleName: event", "DEL SimpleName: name", "DEL TextElement: agent.sources.r1.interceptors.i1.matchGroupIds = one,two", "DEL SimpleName: serializers", "DEL SimpleName: add", "DEL SimpleName: newArrayListWithCapacity", "DEL VariableDeclarationFragment", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL SimpleName: checkArgument", "DEL SimpleType: Event", "DEL SimpleName: checkArgument", "DEL VariableDeclarationFragment", "DEL SimpleName: putAll", "DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL StringLiteral: \"Serializing {} using {}\"", "DEL SimpleName: serializer", "DEL QualifiedName: splitNameAndSerializer.length", "DEL SimpleName: String", "DEL TextElement: agent.sources.r1.interceptors.i1.regex = (WARNING)|(ERROR)|(FATAL)<p>", "DEL MethodInvocation", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: context", "DEL ParameterizedType: List<NameAndSerializer>", "DEL VariableDeclarationStatement", "DEL SimpleName: getLogger", "DEL Assignment: =", "DEL TextElement: </p>", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: logger", "DEL Block", "DEL SimpleName: serializer", "DEL ArrayType: String[]", "DEL Block", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: group", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: serializerString", "DEL NumberLiteral: 1", "DEL Modifier: final", "DEL ParameterizedType: Map<String,String>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Modifier: static", "DEL TextElement: <pre>", "DEL ThisExpression", "DEL SimpleName: NameAndSerializer", "DEL SimpleName: getHeaders", "DEL ReturnStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL TextElement: class, if the serializer class is not specified the default", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: logger", "DEL FieldAccess", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL ParameterizedType: List<Event>", "DEL SimpleName: Logger", "DEL Modifier: final", "DEL SimpleName: event", "DEL MethodInvocation", "DEL SimpleName: events", "DEL SimpleType: String", "DEL CatchClause", "DEL NumberLiteral: 0", "DEL SimpleName: nameAndSerializer", "DEL TextElement: <code>", "DEL Assignment: =", "DEL SimpleName: interceptedEvent", "DEL SimpleName: Throwables", "DEL TextElement: <p>", "DEL TextElement: </p>", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: Context", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL SimpleName: newInstance", "DEL MethodInvocation", "DEL TextElement: <p>", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL FieldDeclaration", "DEL SimpleName: NameAndSerializer", "DEL SimpleName: regexString", "DEL SingleVariableDeclaration", "DEL SimpleName: debug", "DEL SimpleName: serializer", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleType: String", "DEL TextElement: <p>", "DEL Modifier: public", "DEL SimpleName: matcher", "DEL SimpleName: debug", "DEL SimpleName: clazzName", "DEL SimpleType: NameAndSerializer", "DEL TextElement: <p>", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL SimpleName: regex", "DEL StringLiteral: \"serializers\"", "DEL SimpleName: groupIndex", "DEL SimpleName: error", "DEL TextElement: </p>", "DEL SimpleName: SERIALIZERS", "DEL MarkerAnnotation", "DEL ArrayType: String[]", "DEL FieldAccess", "DEL SimpleName: initialize", "DEL Modifier: public", "DEL SimpleName: Builder", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"Must supply a valid regex string\"", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL CastExpression", "DEL StringLiteral: \":\"", "DEL PostfixExpression: ++", "DEL SimpleName: REGEX", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: Lists", "DEL SimpleName: serializerContext", "DEL Modifier: final", "DEL SimpleName: serializer", "DEL SimpleType: List", "DEL SimpleName: matcher", "DEL NumberLiteral: 1", "DEL SimpleName: nameAndSerializerList", "DEL StringLiteral: \"Skipping group {} to {} due to missing serializer\"", "DEL ExpressionStatement", "DEL TextElement: <p>", "DEL SimpleName: Pattern", "DEL VariableDeclarationStatement", "DEL SimpleName: Event", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleName: defaultSerializer", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: Preconditions", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: Preconditions", "DEL SimpleName: defaultSerializer", "DEL Modifier: private", "DEL SimpleName: String", "DEL SimpleName: regex", "DEL VariableDeclarationStatement", "DEL SimpleName: group", "DEL Modifier: final", "DEL StringLiteral: \"Must supply a valid group match id list\"", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: serializerList", "DEL SimpleType: RegexExtractorInterceptor", "DEL SimpleName: getSubProperties", "DEL ClassInstanceCreation", "DEL SimpleName: getCustomSerializer", "DEL ParameterizedType: List<Event>", "DEL ExpressionStatement", "DEL SimpleType: Event", "DEL SimpleName: split", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL VariableDeclarationFragment", "DEL SimpleName: headerName", "DEL SimpleName: String", "DEL SimpleName: isEmpty", "DEL SimpleType: Event", "DEL SimpleName: group", "DEL SimpleType: NameAndSerializer", "DEL SimpleName: serializers", "DEL SimpleType: Event", "DEL Block", "DEL SimpleName: size", "DEL SimpleName: RegexExtractorInterceptorPassThroughSerializer", "DEL TextElement: regex: The regex to use", "DEL SingleVariableDeclaration", "DEL TryStatement", "DEL SimpleName: newArrayListWithCapacity", "DEL SimpleName: Event", "DEL SimpleName: intercepted", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: SERIALIZERS", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL TextElement: agent.sources.r1.interceptors = i1<p>", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL SimpleName: List", "DEL FieldDeclaration", "DEL SimpleName: headerName", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: List", "DEL SimpleName: headers", "DEL SimpleName: intercepted", "DEL NullLiteral", "DEL SimpleName: nameAndSerializer", "DEL TextElement: </pre>", "DEL SimpleName: serializers", "DEL TextElement: EventBody: 1:2:3.4foobar5</p> Configuration:", "DEL SimpleType: Exception", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: regex", "DEL ReturnStatement", "DEL Modifier: static", "DEL SimpleName: NameAndSerializer", "DEL SimpleName: serializer", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL SimpleName: String", "DEL SimpleName: context", "DEL SimpleName: String", "DEL TextElement: appends the matches to the event headers using the specified serializers</p>", "DEL MethodInvocation", "DEL SimpleType: Interceptor", "DEL SimpleName: String", "DEL StringLiteral: \",\"", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL SimpleName: serializerList", "DEL SimpleName: count", "DEL SimpleName: matcher", "DEL ParameterizedType: List<NameAndSerializer>", "DEL ParameterizedType: List<Event>", "DEL SimpleName: Preconditions", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: groupIndex", "DEL SimpleName: NameAndSerializer", "DEL MethodInvocation", "DEL SimpleName: group", "DEL Modifier: static", "DEL SimpleName: split", "DEL TextElement: body: 1:2:3.4foobar5 headers: one=>1, two=>2", "DEL SimpleName: headerName", "DEL SimpleType: String", "DEL SimpleName: checkArgument", "DEL MarkerAnnotation", "DEL SimpleName: NameAndSerializer", "DEL ThisExpression", "DEL TextElement: Example 1:", "DEL SimpleType: Pattern", "DEL SimpleName: add", "DEL SimpleName: propagate", "DEL InfixExpression: >", "DEL SimpleName: Exception", "DEL Dimension", "DEL InfixExpression: <", "DEL SimpleType: NameAndSerializer", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: regex", "DEL SimpleName: close", "DEL Modifier: static", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL PrimitiveType: int", "DEL StringLiteral: \".\"", "DEL TextElement: agent.sources.r1.interceptors.i1.matchGroupIds = one,two,three", "DEL SimpleName: Override", "DEL SimpleName: context", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL SimpleName: getString", "DEL Dimension", "DEL SimpleName: clazzName", "DEL VariableDeclarationExpression", "DEL SimpleName: logger", "DEL SimpleName: intercept", "DEL InfixExpression: >", "DEL TextElement: agent.sources.r1.type = SEQ<p>", "DEL Modifier: private", "DEL BreakStatement", "DEL NullLiteral", "DEL NumberLiteral: 1", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL QualifiedName: serializer.headerName", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: context", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL SimpleType: Event", "DEL MethodDeclaration", "DEL SimpleName: regex", "DEL SimpleName: getBody", "DEL TextElement: agent.sources.r1.interceptors.i1.org.apache.flume.interceptor.RegexExtractorInterceptorTimestampSerializer.dateFormat = yyyy-MM-dd", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: Override", "DEL SimpleName: nameAndSerializerList", "DEL TextElement: </p>", "DEL TextElement:  will be used", "DEL Modifier: public", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: logger", "DEL VariableDeclarationStatement", "DEL SimpleName: StringUtils", "DEL SimpleName: serializerString", "DEL SimpleName: serializers", "DEL VariableDeclarationFragment", "DEL SimpleName: serializerString", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleType: Matcher", "DEL SimpleName: headerName", "DEL MethodInvocation"]}]}}, {"RegexExtractorInterceptor_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.flume.interceptor(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.util.List(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: java.util.Map(19)", "Delete ImportDeclaration(20)", "Delete ImportDeclaration(22)", "Delete QualifiedName: java.util.regex.Pattern(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.apache.commons.lang.StringUtils(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.apache.flume.Context(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: org.apache.flume.Event(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.slf4j.Logger(31)", "Delete ImportDeclaration(32)", "Delete QualifiedName: org.slf4j.LoggerFactory(33)", "Delete ImportDeclaration(34)", "Delete QualifiedName: com.google.common.base.Preconditions(35)", "Delete ImportDeclaration(36)", "Delete QualifiedName: com.google.common.base.Throwables(37)", "Delete ImportDeclaration(38)", "Delete QualifiedName: com.google.common.collect.Lists(39)", "Delete ImportDeclaration(40)", "Delete TextElement: Interceptor that extracts matches using a specified regular expression and(41)", "Delete TextElement: appends the matches to the event headers using the specified serializers</p>(42)", "Delete TextElement: Note that all regular expression matching occurs through Java's built in(43)", "Delete TextElement: java.util.regex package</p>. Properties:(44)", "Delete TextElement: <p>(45)", "Delete TextElement: regex: The regex to use(46)", "Delete TextElement: <p>(47)", "Delete TextElement: serializers: Comma separated list of headerName:fully qualified serializer(48)", "Delete TextElement: class, if the serializer class is not specified the default(49)", "Delete SimpleName: RegexExtractorInterceptorPassThroughSerializer(50)", "Delete TagElement: @link(51)", "Delete TextElement:  will be used(52)", "Delete TextElement: <p>(53)", "Delete TextElement: Sample config:(54)", "Delete TextElement: <p>(55)", "Delete TextElement: <code>(56)", "Delete TextElement: agent.sources.r1.channels = c1<p>(57)", "Delete TextElement: agent.sources.r1.type = SEQ<p>(58)", "Delete TextElement: agent.sources.r1.interceptors = i1<p>(59)", "Delete TextElement: agent.sources.r1.interceptors.i1.type = REGEX_EXTRACTOR<p>(60)", "Delete TextElement: agent.sources.r1.interceptors.i1.regex = (WARNING)|(ERROR)|(FATAL)<p>(61)", "Delete TextElement: agent.sources.r1.interceptors.i1.serializer = warning:com.blah.SomeSerializer,error,fatal:org.apache.flume.interceptor.RegexExtractorInterceptorTimestampSerializer<p>(62)", "Delete TextElement: agent.sources.r1.interceptors.i1.org.apache.flume.interceptor.RegexExtractorInterceptorTimestampSerializer.dateFormat = yyyy-MM-dd(63)", "Delete TextElement: </code>(64)", "Delete TextElement: </p>(65)", "Delete TextElement: <pre>(66)", "Delete TextElement: Example 1:(67)", "Delete TextElement: </p>(68)", "Delete TextElement: EventBody: 1:2:3.4foobar5</p> Configuration:(69)", "Delete TextElement: agent.sources.r1.interceptors.i1.regex = (\\\\d):(\\\\d):(\\\\d)(70)", "Delete TextElement: </p>(71)", "Delete TextElement: agent.sources.r1.interceptors.i1.matchGroupIds = one,two,three(72)", "Delete TextElement: </p>(73)", "Delete TextElement: results in an event with the the following(74)", "Delete TextElement: body: 1:2:3.4foobar5 headers: one=>1, two=>2, three=3(75)", "Delete TextElement: Example 2:(76)", "Delete TextElement: EventBody: 1:2:3.4foobar5(77)", "Delete TextElement: Configuration: agent.sources.r1.interceptors.i1.regex = (\\\\d):(\\\\d):(\\\\d)(78)", "Delete TextElement: <p>(79)", "Delete TextElement: agent.sources.r1.interceptors.i1.matchGroupIds = one,two(80)", "Delete TextElement: <p>(81)", "Delete TextElement: results in an event with the the following(82)", "Delete TextElement: body: 1:2:3.4foobar5 headers: one=>1, two=>2(83)", "Delete TextElement: </pre>(84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete Modifier: public(87)", "Delete SimpleName: RegexExtractorInterceptor(88)", "Delete SimpleName: Interceptor(89)", "Delete SimpleType: Interceptor(90)", "Delete Modifier: static(91)", "Delete Modifier: final(92)", "Delete SimpleName: String(93)", "Delete SimpleType: String(94)", "Delete SimpleName: REGEX(95)", "Delete StringLiteral: \"regex\"(96)", "Delete VariableDeclarationFragment(97)", "Delete FieldDeclaration(98)", "Delete Modifier: static(99)", "Delete Modifier: final(100)", "Delete SimpleName: String(101)", "Delete SimpleType: String(102)", "Delete SimpleName: SERIALIZERS(103)", "Delete StringLiteral: \"serializers\"(104)", "Delete VariableDeclarationFragment(105)", "Delete FieldDeclaration(106)", "Delete Modifier: private(107)", "Delete Modifier: static(108)", "Delete Modifier: final(109)", "Delete SimpleName: Logger(110)", "Delete SimpleType: Logger(111)", "Delete SimpleName: logger(112)", "Delete SimpleName: LoggerFactory(113)", "Delete SimpleName: getLogger(114)", "Delete SimpleName: RegexExtractorInterceptor(115)", "Delete SimpleType: RegexExtractorInterceptor(116)", "Delete TypeLiteral(117)", "Delete MethodInvocation(118)", "Delete VariableDeclarationFragment(119)", "Delete FieldDeclaration(120)", "Delete Modifier: private(121)", "Delete Modifier: final(122)", "Delete SimpleName: Pattern(123)", "Delete SimpleType: Pattern(124)", "Delete SimpleName: regex(125)", "Delete VariableDeclarationFragment(126)", "Delete FieldDeclaration(127)", "Delete Modifier: private(128)", "Delete Modifier: final(129)", "Delete SimpleName: List(130)", "Delete SimpleType: List(131)", "Delete SimpleName: NameAndSerializer(132)", "Delete SimpleType: NameAndSerializer(133)", "Delete ParameterizedType: List<NameAndSerializer>(134)", "Delete SimpleName: serializers(135)", "Delete VariableDeclarationFragment(136)", "Delete FieldDeclaration(137)", "Delete Modifier: private(138)", "Delete SimpleName: RegexExtractorInterceptor(139)", "Delete SimpleName: Pattern(140)", "Delete SimpleType: Pattern(141)", "Delete SimpleName: regex(142)", "Delete SingleVariableDeclaration(143)", "Delete SimpleName: List(144)", "Delete SimpleType: List(145)", "Delete SimpleName: NameAndSerializer(146)", "Delete SimpleType: NameAndSerializer(147)", "Delete ParameterizedType: List<NameAndSerializer>(148)", "Delete SimpleName: serializers(149)", "Delete SingleVariableDeclaration(150)", "Delete ThisExpression(151)", "Delete SimpleName: regex(152)", "Delete FieldAccess(153)", "Delete SimpleName: regex(154)", "Delete Assignment: =(155)", "Delete ExpressionStatement(156)", "Delete ThisExpression(157)", "Delete SimpleName: serializers(158)", "Delete FieldAccess(159)", "Delete SimpleName: serializers(160)", "Delete Assignment: =(161)", "Delete ExpressionStatement(162)", "Delete Block(163)", "Delete MethodDeclaration(164)", "Delete SimpleName: Override(165)", "Delete MarkerAnnotation(166)", "Delete Modifier: public(167)", "Delete PrimitiveType: void(168)", "Delete SimpleName: initialize(169)", "Delete Block(170)", "Delete MethodDeclaration(171)", "Delete SimpleName: Override(172)", "Delete MarkerAnnotation(173)", "Delete Modifier: public(174)", "Delete PrimitiveType: void(175)", "Delete SimpleName: close(176)", "Delete Block(177)", "Delete MethodDeclaration(178)", "Delete SimpleName: Override(179)", "Delete MarkerAnnotation(180)", "Delete Modifier: public(181)", "Delete SimpleName: Event(182)", "Delete SimpleType: Event(183)", "Delete SimpleName: intercept(184)", "Delete SimpleName: Event(185)", "Delete SimpleType: Event(186)", "Delete SimpleName: event(187)", "Delete SingleVariableDeclaration(188)", "Delete SimpleName: matcher(191)", "Delete SimpleName: regex(192)", "Delete SimpleName: matcher(193)", "Delete SimpleName: String(194)", "Delete SimpleType: String(195)", "Delete SimpleName: event(196)", "Delete SimpleName: getBody(197)", "Delete MethodInvocation(198)", "Delete ClassInstanceCreation(199)", "Delete MethodInvocation(200)", "Delete VariableDeclarationFragment(201)", "Delete VariableDeclarationStatement(202)", "Delete SimpleName: Map(203)", "Delete SimpleType: Map(204)", "Delete SimpleName: String(205)", "Delete SimpleType: String(206)", "Delete SimpleName: String(207)", "Delete SimpleType: String(208)", "Delete ParameterizedType: Map<String,String>(209)", "Delete SimpleName: headers(210)", "Delete SimpleName: event(211)", "Delete SimpleName: getHeaders(212)", "Delete MethodInvocation(213)", "Delete VariableDeclarationFragment(214)", "Delete VariableDeclarationStatement(215)", "Delete SimpleName: matcher(216)", "Delete SimpleName: find(217)", "Delete MethodInvocation(218)", "Delete PrimitiveType: int(219)", "Delete SimpleName: group(220)", "Delete NumberLiteral: 0(221)", "Delete VariableDeclarationFragment(222)", "Delete SimpleName: count(223)", "Delete SimpleName: matcher(224)", "Delete SimpleName: groupCount(225)", "Delete MethodInvocation(226)", "Delete VariableDeclarationFragment(227)", "Delete VariableDeclarationExpression(228)", "Delete SimpleName: group(229)", "Delete SimpleName: count(230)", "Delete InfixExpression: <(231)", "Delete SimpleName: group(232)", "Delete PostfixExpression: ++(233)", "Delete PrimitiveType: int(234)", "Delete SimpleName: groupIndex(235)", "Delete SimpleName: group(236)", "Delete NumberLiteral: 1(237)", "Delete InfixExpression: +(238)", "Delete VariableDeclarationFragment(239)", "Delete VariableDeclarationStatement(240)", "Delete SimpleName: groupIndex(241)", "Delete SimpleName: serializers(242)", "Delete SimpleName: size(243)", "Delete MethodInvocation(244)", "Delete InfixExpression: >(245)", "Delete SimpleName: logger(246)", "Delete SimpleName: isDebugEnabled(247)", "Delete MethodInvocation(248)", "Delete SimpleName: logger(249)", "Delete SimpleName: debug(250)", "Delete StringLiteral: \"Skipping group {} to {} due to missing serializer\"(251)", "Delete SimpleName: group(252)", "Delete SimpleName: count(253)", "Delete MethodInvocation(254)", "Delete ExpressionStatement(255)", "Delete Block(256)", "Delete IfStatement(257)", "Delete BreakStatement(258)", "Delete Block(259)", "Delete IfStatement(260)", "Delete SimpleName: NameAndSerializer(261)", "Delete SimpleType: NameAndSerializer(262)", "Delete SimpleName: serializer(263)", "Delete SimpleName: serializers(264)", "Delete SimpleName: get(265)", "Delete SimpleName: group(266)", "Delete MethodInvocation(267)", "Delete VariableDeclarationFragment(268)", "Delete VariableDeclarationStatement(269)", "Delete SimpleName: logger(270)", "Delete SimpleName: isDebugEnabled(271)", "Delete MethodInvocation(272)", "Delete SimpleName: logger(273)", "Delete SimpleName: debug(274)", "Delete StringLiteral: \"Serializing {} using {}\"(275)", "Delete QualifiedName: serializer.headerName(276)", "Delete QualifiedName: serializer.serializer(277)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete Block(280)", "Delete IfStatement(281)", "Delete SimpleName: headers(282)", "Delete SimpleName: put(283)", "Delete QualifiedName: serializer.headerName(284)", "Delete QualifiedName: serializer.serializer(285)", "Delete SimpleName: serialize(286)", "Delete SimpleName: matcher(287)", "Delete SimpleName: group(288)", "Delete SimpleName: groupIndex(289)", "Delete MethodInvocation(290)", "Delete MethodInvocation(291)", "Delete MethodInvocation(292)", "Delete ExpressionStatement(293)", "Delete Block(294)", "Delete ForStatement(295)", "Delete Block(296)", "Delete IfStatement(297)", "Delete SimpleName: event(298)", "Delete ReturnStatement(299)", "Delete Block(300)", "Delete MethodDeclaration(301)", "Delete SimpleName: Override(302)", "Delete MarkerAnnotation(303)", "Delete Modifier: public(304)", "Delete SimpleName: List(305)", "Delete SimpleType: List(306)", "Delete SimpleName: Event(307)", "Delete SimpleType: Event(308)", "Delete ParameterizedType: List<Event>(309)", "Delete SimpleName: intercept(310)", "Delete SimpleName: List(311)", "Delete SimpleType: List(312)", "Delete SimpleName: Event(313)", "Delete SimpleType: Event(314)", "Delete ParameterizedType: List<Event>(315)", "Delete SimpleName: events(316)", "Delete SingleVariableDeclaration(317)", "Delete SimpleName: List(318)", "Delete SimpleType: List(319)", "Delete SimpleName: Event(320)", "Delete SimpleType: Event(321)", "Delete ParameterizedType: List<Event>(322)", "Delete SimpleName: intercepted(323)", "Delete SimpleName: Lists(324)", "Delete SimpleName: newArrayListWithCapacity(325)", "Delete SimpleName: events(326)", "Delete SimpleName: size(327)", "Delete MethodInvocation(328)", "Delete MethodInvocation(329)", "Delete VariableDeclarationFragment(330)", "Delete VariableDeclarationStatement(331)", "Delete SimpleName: Event(332)", "Delete SimpleType: Event(333)", "Delete SimpleName: event(334)", "Delete SingleVariableDeclaration(335)", "Delete SimpleName: events(336)", "Delete SimpleName: Event(337)", "Delete SimpleType: Event(338)", "Delete SimpleName: interceptedEvent(339)", "Delete SimpleName: intercept(340)", "Delete SimpleName: event(341)", "Delete MethodInvocation(342)", "Delete VariableDeclarationFragment(343)", "Delete VariableDeclarationStatement(344)", "Delete SimpleName: interceptedEvent(345)", "Delete NullLiteral(346)", "Delete InfixExpression: !=(347)", "Delete SimpleName: intercepted(348)", "Delete SimpleName: add(349)", "Delete SimpleName: interceptedEvent(350)", "Delete MethodInvocation(351)", "Delete ExpressionStatement(352)", "Delete Block(353)", "Delete IfStatement(354)", "Delete Block(355)", "Delete EnhancedForStatement(356)", "Delete SimpleName: intercepted(357)", "Delete ReturnStatement(358)", "Delete Block(359)", "Delete MethodDeclaration(360)", "Delete Modifier: public(361)", "Delete Modifier: static(362)", "Delete SimpleName: Builder(363)", "Delete QualifiedName: Interceptor.Builder(364)", "Delete SimpleType: Interceptor.Builder(365)", "Delete Modifier: private(366)", "Delete SimpleName: Pattern(367)", "Delete SimpleType: Pattern(368)", "Delete SimpleName: regex(369)", "Delete VariableDeclarationFragment(370)", "Delete FieldDeclaration(371)", "Delete Modifier: private(372)", "Delete SimpleName: List(373)", "Delete SimpleType: List(374)", "Delete SimpleName: NameAndSerializer(375)", "Delete SimpleType: NameAndSerializer(376)", "Delete ParameterizedType: List<NameAndSerializer>(377)", "Delete SimpleName: serializerList(378)", "Delete VariableDeclarationFragment(379)", "Delete FieldDeclaration(380)", "Delete Modifier: private(381)", "Delete Modifier: final(382)", "Delete SimpleName: RegexExtractorInterceptorSerializer(383)", "Delete SimpleType: RegexExtractorInterceptorSerializer(384)", "Delete SimpleName: defaultSerializer(385)", "Delete SimpleName: RegexExtractorInterceptorPassThroughSerializer(386)", "Delete SimpleType: RegexExtractorInterceptorPassThroughSerializer(387)", "Delete ClassInstanceCreation(388)", "Delete VariableDeclarationFragment(389)", "Delete FieldDeclaration(390)", "Delete SimpleName: Override(391)", "Delete MarkerAnnotation(392)", "Delete Modifier: public(393)", "Delete PrimitiveType: void(394)", "Delete SimpleName: configure(395)", "Delete SimpleName: Context(396)", "Delete SimpleType: Context(397)", "Delete SimpleName: context(398)", "Delete SingleVariableDeclaration(399)", "Delete SimpleName: String(400)", "Delete SimpleType: String(401)", "Delete SimpleName: regexString(402)", "Delete SimpleName: context(403)", "Delete SimpleName: getString(404)", "Delete SimpleName: REGEX(405)", "Delete MethodInvocation(406)", "Delete VariableDeclarationFragment(407)", "Delete VariableDeclarationStatement(408)", "Delete SimpleName: Preconditions(409)", "Delete SimpleName: checkArgument(410)", "Delete SimpleName: StringUtils(411)", "Delete SimpleName: isEmpty(412)", "Delete SimpleName: regexString(413)", "Delete MethodInvocation(414)", "Delete PrefixExpression: !(415)", "Delete StringLiteral: \"Must supply a valid regex string\"(416)", "Delete MethodInvocation(417)", "Delete ExpressionStatement(418)", "Delete SimpleName: regex(419)", "Delete SimpleName: Pattern(420)", "Delete SimpleName: compile(421)", "Delete SimpleName: regexString(422)", "Delete MethodInvocation(423)", "Delete Assignment: =(424)", "Delete ExpressionStatement(425)", "Delete SimpleName: configureSerializers(426)", "Delete SimpleName: context(427)", "Delete MethodInvocation(428)", "Delete ExpressionStatement(429)", "Delete Block(430)", "Delete MethodDeclaration(431)", "Delete Modifier: private(432)", "Delete PrimitiveType: void(433)", "Delete SimpleName: configureSerializers(434)", "Delete SimpleName: Context(435)", "Delete SimpleType: Context(436)", "Delete SimpleName: context(437)", "Delete SingleVariableDeclaration(438)", "Delete SimpleName: String(439)", "Delete SimpleType: String(440)", "Delete SimpleName: serializerString(441)", "Delete SimpleName: context(442)", "Delete SimpleName: getString(443)", "Delete SimpleName: SERIALIZERS(444)", "Delete MethodInvocation(445)", "Delete VariableDeclarationFragment(446)", "Delete VariableDeclarationStatement(447)", "Delete SimpleName: Preconditions(448)", "Delete SimpleName: checkArgument(449)", "Delete SimpleName: StringUtils(450)", "Delete SimpleName: isEmpty(451)", "Delete SimpleName: serializerString(452)", "Delete MethodInvocation(453)", "Delete PrefixExpression: !(454)", "Delete StringLiteral: \"Must supply at least one name and serializer\"(455)", "Delete MethodInvocation(456)", "Delete ExpressionStatement(457)", "Delete SimpleName: String(458)", "Delete SimpleType: String(459)", "Delete Dimension(460)", "Delete ArrayType: String[](461)", "Delete SimpleName: nameAndSerializerList(462)", "Delete SimpleName: serializerString(463)", "Delete SimpleName: split(464)", "Delete StringLiteral: \",\"(465)", "Delete MethodInvocation(466)", "Delete VariableDeclarationFragment(467)", "Delete VariableDeclarationStatement(468)", "Delete SimpleName: serializerList(469)", "Delete SimpleName: Lists(470)", "Delete SimpleName: newArrayListWithCapacity(471)", "Delete QualifiedName: nameAndSerializerList.length(472)", "Delete MethodInvocation(473)", "Delete Assignment: =(474)", "Delete ExpressionStatement(475)", "Delete SimpleName: String(476)", "Delete SimpleType: String(477)", "Delete SimpleName: nameAndSerializer(478)", "Delete SingleVariableDeclaration(479)", "Delete SimpleName: nameAndSerializerList(480)", "Delete SimpleName: String(481)", "Delete SimpleType: String(482)", "Delete Dimension(483)", "Delete ArrayType: String[](484)", "Delete SimpleName: splitNameAndSerializer(485)", "Delete SimpleName: nameAndSerializer(486)", "Delete SimpleName: split(487)", "Delete StringLiteral: \":\"(488)", "Delete MethodInvocation(489)", "Delete VariableDeclarationFragment(490)", "Delete VariableDeclarationStatement(491)", "Delete SimpleName: String(492)", "Delete SimpleType: String(493)", "Delete SimpleName: name(494)", "Delete SimpleName: splitNameAndSerializer(495)", "Delete NumberLiteral: 0(496)", "Delete ArrayAccess(497)", "Delete SimpleName: trim(498)", "Delete MethodInvocation(499)", "Delete VariableDeclarationFragment(500)", "Delete VariableDeclarationStatement(501)", "Delete QualifiedName: splitNameAndSerializer.length(502)", "Delete NumberLiteral: 1(503)", "Delete InfixExpression: >(504)", "Delete SimpleName: String(505)", "Delete SimpleType: String(506)", "Delete SimpleName: serializer(507)", "Delete SimpleName: splitNameAndSerializer(508)", "Delete NumberLiteral: 1(509)", "Delete ArrayAccess(510)", "Delete SimpleName: trim(511)", "Delete MethodInvocation(512)", "Delete VariableDeclarationFragment(513)", "Delete VariableDeclarationStatement(514)", "Delete SimpleName: serializerList(515)", "Delete SimpleName: add(516)", "Delete SimpleName: NameAndSerializer(517)", "Delete SimpleType: NameAndSerializer(518)", "Delete SimpleName: name(519)", "Delete SimpleName: getCustomSerializer(520)", "Delete SimpleName: serializer(521)", "Delete SimpleName: context(522)", "Delete MethodInvocation(523)", "Delete ClassInstanceCreation(524)", "Delete MethodInvocation(525)", "Delete ExpressionStatement(526)", "Delete Block(527)", "Delete SimpleName: serializerList(528)", "Delete SimpleName: add(529)", "Delete SimpleName: NameAndSerializer(530)", "Delete SimpleType: NameAndSerializer(531)", "Delete SimpleName: name(532)", "Delete SimpleName: defaultSerializer(533)", "Delete ClassInstanceCreation(534)", "Delete MethodInvocation(535)", "Delete ExpressionStatement(536)", "Delete Block(537)", "Delete IfStatement(538)", "Delete Block(539)", "Delete EnhancedForStatement(540)", "Delete Block(541)", "Delete MethodDeclaration(542)", "Delete Modifier: private(543)", "Delete SimpleName: RegexExtractorInterceptorSerializer(544)", "Delete SimpleType: RegexExtractorInterceptorSerializer(545)", "Delete SimpleName: getCustomSerializer(546)", "Delete SimpleName: String(547)", "Delete SimpleType: String(548)", "Delete SimpleName: clazzName(549)", "Delete SingleVariableDeclaration(550)", "Delete SimpleName: Context(551)", "Delete SimpleType: Context(552)", "Delete SimpleName: context(553)", "Delete SingleVariableDeclaration(554)", "Delete SimpleName: Context(555)", "Delete SimpleType: Context(556)", "Delete SimpleName: serializerContext(557)", "Delete SimpleName: Context(558)", "Delete SimpleType: Context(559)", "Delete ClassInstanceCreation(560)", "Delete VariableDeclarationFragment(561)", "Delete VariableDeclarationStatement(562)", "Delete SimpleName: serializerContext(563)", "Delete SimpleName: putAll(564)", "Delete SimpleName: context(565)", "Delete SimpleName: getSubProperties(566)", "Delete SimpleName: clazzName(567)", "Delete StringLiteral: \".\"(568)", "Delete InfixExpression: +(569)", "Delete MethodInvocation(570)", "Delete MethodInvocation(571)", "Delete ExpressionStatement(572)", "Delete SimpleName: RegexExtractorInterceptorSerializer(573)", "Delete SimpleType: RegexExtractorInterceptorSerializer(574)", "Delete SimpleName: serializer(575)", "Delete SimpleName: RegexExtractorInterceptorSerializer(576)", "Delete SimpleType: RegexExtractorInterceptorSerializer(577)", "Delete SimpleName: Class(578)", "Delete SimpleName: forName(579)", "Delete SimpleName: clazzName(580)", "Delete MethodInvocation(581)", "Delete SimpleName: newInstance(582)", "Delete MethodInvocation(583)", "Delete CastExpression(584)", "Delete VariableDeclarationFragment(585)", "Delete VariableDeclarationStatement(586)", "Delete SimpleName: serializer(587)", "Delete SimpleName: configure(588)", "Delete SimpleName: serializerContext(589)", "Delete MethodInvocation(590)", "Delete ExpressionStatement(591)", "Delete SimpleName: serializer(592)", "Delete ReturnStatement(593)", "Delete Block(594)", "Delete SimpleName: Exception(595)", "Delete SimpleType: Exception(596)", "Delete SimpleName: e(597)", "Delete SingleVariableDeclaration(598)", "Delete SimpleName: logger(599)", "Delete SimpleName: error(600)", "Delete StringLiteral: \"Could not instantiate event serializer.\"(601)", "Delete SimpleName: e(602)", "Delete MethodInvocation(603)", "Delete ExpressionStatement(604)", "Delete SimpleName: Throwables(605)", "Delete SimpleName: propagate(606)", "Delete SimpleName: e(607)", "Delete MethodInvocation(608)", "Delete ExpressionStatement(609)", "Delete Block(610)", "Delete CatchClause(611)", "Delete TryStatement(612)", "Delete SimpleName: defaultSerializer(613)", "Delete ReturnStatement(614)", "Delete Block(615)", "Delete MethodDeclaration(616)", "Delete SimpleName: Override(617)", "Delete MarkerAnnotation(618)", "Delete Modifier: public(619)", "Delete SimpleName: Interceptor(620)", "Delete SimpleType: Interceptor(621)", "Delete SimpleName: build(622)", "Delete SimpleName: Preconditions(623)", "Delete SimpleName: checkArgument(624)", "Delete SimpleName: regex(625)", "Delete NullLiteral(626)", "Delete InfixExpression: !=(627)", "Delete StringLiteral: \"Regex pattern was misconfigured\"(628)", "Delete MethodInvocation(629)", "Delete ExpressionStatement(630)", "Delete SimpleName: Preconditions(631)", "Delete SimpleName: checkArgument(632)", "Delete SimpleName: serializerList(633)", "Delete SimpleName: size(634)", "Delete MethodInvocation(635)", "Delete NumberLiteral: 0(636)", "Delete InfixExpression: >(637)", "Delete StringLiteral: \"Must supply a valid group match id list\"(638)", "Delete MethodInvocation(639)", "Delete ExpressionStatement(640)", "Delete SimpleName: RegexExtractorInterceptor(641)", "Delete SimpleType: RegexExtractorInterceptor(642)", "Delete SimpleName: regex(643)", "Delete SimpleName: serializerList(644)", "Delete ClassInstanceCreation(645)", "Delete ReturnStatement(646)", "Delete Block(647)", "Delete MethodDeclaration(648)", "Delete TypeDeclaration: class(649)", "Delete Modifier: static(650)", "Delete SimpleName: NameAndSerializer(651)", "Delete Modifier: private(652)", "Delete Modifier: final(653)", "Delete SimpleName: String(654)", "Delete SimpleType: String(655)", "Delete SimpleName: headerName(656)", "Delete VariableDeclarationFragment(657)", "Delete FieldDeclaration(658)", "Delete Modifier: private(659)", "Delete Modifier: final(660)", "Delete SimpleName: RegexExtractorInterceptorSerializer(661)", "Delete SimpleType: RegexExtractorInterceptorSerializer(662)", "Delete SimpleName: serializer(663)", "Delete VariableDeclarationFragment(664)", "Delete FieldDeclaration(665)", "Delete Modifier: public(666)", "Delete SimpleName: NameAndSerializer(667)", "Delete SimpleName: String(668)", "Delete SimpleType: String(669)", "Delete SimpleName: headerName(670)", "Delete SingleVariableDeclaration(671)", "Delete SimpleName: RegexExtractorInterceptorSerializer(672)", "Delete SimpleType: RegexExtractorInterceptorSerializer(673)", "Delete SimpleName: serializer(674)", "Delete SingleVariableDeclaration(675)", "Delete ThisExpression(676)", "Delete SimpleName: headerName(677)", "Delete FieldAccess(678)", "Delete SimpleName: headerName(679)", "Delete Assignment: =(680)", "Delete ExpressionStatement(681)", "Delete ThisExpression(682)", "Delete SimpleName: serializer(683)", "Delete FieldAccess(684)", "Delete SimpleName: serializer(685)", "Delete Assignment: =(686)", "Delete ExpressionStatement(687)", "Delete Block(688)", "Delete MethodDeclaration(689)", "Delete TypeDeclaration: class(690)", "Delete TypeDeclaration: class(691)"]}}, {"RegexExtractorInterceptorMillisSerializer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: distributed with this work for additional information", "DEL QualifiedName: org.apache.flume.interceptor", "DEL TagElement", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: limitations under the License.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL Javadoc", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL PackageDeclaration", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.lang.StringUtils", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.flume.Context"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.flume.conf.ComponentConfiguration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.joda.time.DateTime", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.joda.time.format.DateTimeFormat", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.joda.time.format.DateTimeFormatter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: serialize", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: formatter", "DEL SimpleName: toString", "DEL TextElement: specified formatting pattern", "DEL SimpleName: getMillis", "DEL StringLiteral: \"Must configure with a valid pattern\"", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleName: formatter", "DEL PrimitiveType: void", "DEL SimpleName: RegexExtractorInterceptorMillisSerializer", "DEL PrefixExpression: !", "DEL MethodDeclaration", "DEL SimpleName: StringUtils", "DEL SimpleName: dateTime", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleType: ComponentConfiguration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL SimpleName: conf", "DEL Assignment: =", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: context", "DEL SimpleName: pattern", "DEL SimpleName: DateTimeFormat", "DEL Block", "DEL SimpleName: DateTimeFormatter", "DEL SimpleName: DateTime", "DEL SimpleName: Long", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Context", "DEL SimpleType: String", "DEL SimpleName: ComponentConfiguration", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleType: DateTimeFormatter", "DEL Modifier: private", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL SimpleName: pattern", "DEL MethodDeclaration", "DEL SimpleType: Context", "DEL Block", "DEL SimpleName: formatter", "DEL SingleVariableDeclaration", "DEL SimpleType: DateTime", "DEL SimpleName: dateTime", "DEL SimpleName: value", "DEL SimpleName: String", "DEL SimpleName: Preconditions", "DEL FieldDeclaration", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL StringLiteral: \"pattern\"", "DEL TextElement: Serializer that converts the passed in value into milliseconds using the", "DEL SimpleName: context", "DEL SimpleName: pattern", "DEL ReturnStatement", "DEL SimpleName: parseDateTime", "DEL SimpleName: getString", "DEL SimpleName: forPattern", "DEL SimpleName: configure", "DEL SimpleName: isEmpty", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: configure", "DEL SimpleName: checkArgument"]}]}}, {"RegexExtractorInterceptorMillisSerializer_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.flume.interceptor(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: org.apache.commons.lang.StringUtils(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.flume.Context(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.flume.conf.ComponentConfiguration(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: org.joda.time.DateTime(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: org.joda.time.format.DateTimeFormat(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: org.joda.time.format.DateTimeFormatter(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: com.google.common.base.Preconditions(29)", "Delete ImportDeclaration(30)", "Delete TextElement: Serializer that converts the passed in value into milliseconds using the(31)", "Delete TextElement: specified formatting pattern(32)", "Delete TagElement(33)", "Delete Javadoc(34)", "Delete Modifier: public(35)", "Delete SimpleName: RegexExtractorInterceptorMillisSerializer(36)", "Delete SimpleName: RegexExtractorInterceptorSerializer(37)", "Delete SimpleType: RegexExtractorInterceptorSerializer(38)", "Delete Modifier: private(39)", "Delete SimpleName: DateTimeFormatter(40)", "Delete SimpleType: DateTimeFormatter(41)", "Delete SimpleName: formatter(42)", "Delete VariableDeclarationFragment(43)", "Delete FieldDeclaration(44)", "Delete SimpleName: Override(45)", "Delete MarkerAnnotation(46)", "Delete Modifier: public(47)", "Delete PrimitiveType: void(48)", "Delete SimpleName: configure(49)", "Delete SimpleName: Context(50)", "Delete SimpleType: Context(51)", "Delete SimpleName: context(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: String(54)", "Delete SimpleType: String(55)", "Delete SimpleName: pattern(56)", "Delete SimpleName: context(57)", "Delete SimpleName: getString(58)", "Delete StringLiteral: \"pattern\"(59)", "Delete MethodInvocation(60)", "Delete VariableDeclarationFragment(61)", "Delete VariableDeclarationStatement(62)", "Delete SimpleName: Preconditions(63)", "Delete SimpleName: checkArgument(64)", "Delete SimpleName: StringUtils(65)", "Delete SimpleName: isEmpty(66)", "Delete SimpleName: pattern(67)", "Delete MethodInvocation(68)", "Delete PrefixExpression: !(69)", "Delete StringLiteral: \"Must configure with a valid pattern\"(70)", "Delete MethodInvocation(71)", "Delete ExpressionStatement(72)", "Delete SimpleName: formatter(73)", "Delete SimpleName: DateTimeFormat(74)", "Delete SimpleName: forPattern(75)", "Delete SimpleName: pattern(76)", "Delete MethodInvocation(77)", "Delete Assignment: =(78)", "Delete ExpressionStatement(79)", "Delete Block(80)", "Delete MethodDeclaration(81)", "Delete SimpleName: Override(82)", "Delete MarkerAnnotation(83)", "Delete Modifier: public(84)", "Delete SimpleName: String(85)", "Delete SimpleType: String(86)", "Delete SimpleName: serialize(87)", "Delete SimpleName: String(88)", "Delete SimpleType: String(89)", "Delete SimpleName: value(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: DateTime(92)", "Delete SimpleType: DateTime(93)", "Delete SimpleName: dateTime(94)", "Delete SimpleName: formatter(95)", "Delete SimpleName: parseDateTime(96)", "Delete SimpleName: value(97)", "Delete MethodInvocation(98)", "Delete VariableDeclarationFragment(99)", "Delete VariableDeclarationStatement(100)", "Delete SimpleName: Long(101)", "Delete SimpleName: toString(102)", "Delete SimpleName: dateTime(103)", "Delete SimpleName: getMillis(104)", "Delete MethodInvocation(105)", "Delete MethodInvocation(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete SimpleName: Override(110)", "Delete MarkerAnnotation(111)", "Delete Modifier: public(112)", "Delete PrimitiveType: void(113)", "Delete SimpleName: configure(114)", "Delete SimpleName: ComponentConfiguration(115)", "Delete SimpleType: ComponentConfiguration(116)", "Delete SimpleName: conf(117)", "Delete SingleVariableDeclaration(118)", "Delete Block(119)", "Delete MethodDeclaration(120)", "Delete TypeDeclaration: class(121)"]}}, {"RegexExtractorInterceptorPassThroughSerializer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL Javadoc", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TagElement", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: limitations under the License.", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL PackageDeclaration", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL QualifiedName: org.apache.flume.interceptor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.flume.Context", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.flume.conf.ComponentConfiguration", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleType: RegexExtractorInterceptorSerializer", "DEL SimpleName: Context", "DEL SimpleType: String", "DEL SimpleName: value", "DEL TypeDeclaration: class", "DEL SimpleName: serialize", "DEL SimpleName: configure", "DEL SimpleName: ComponentConfiguration", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: Override", "DEL TextElement: Serializer that simply returns the passed in value", "DEL SimpleType: String", "DEL SimpleType: Context", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: RegexExtractorInterceptorPassThroughSerializer", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL SimpleType: ComponentConfiguration", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL SimpleName: context", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: Override", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: conf", "DEL SimpleName: Override", "DEL SimpleName: configure", "DEL Block", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SingleVariableDeclaration"]}]}}, {"RegexExtractorInterceptorPassThroughSerializer_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.flume.interceptor(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: org.apache.flume.Context(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.flume.conf.ComponentConfiguration(19)", "Delete ImportDeclaration(20)", "Delete TextElement: Serializer that simply returns the passed in value(21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete Modifier: public(24)", "Delete SimpleName: RegexExtractorInterceptorPassThroughSerializer(25)", "Delete SimpleName: RegexExtractorInterceptorSerializer(26)", "Delete SimpleType: RegexExtractorInterceptorSerializer(27)", "Delete SimpleName: Override(28)", "Delete MarkerAnnotation(29)", "Delete Modifier: public(30)", "Delete SimpleName: String(31)", "Delete SimpleType: String(32)", "Delete SimpleName: serialize(33)", "Delete SimpleName: String(34)", "Delete SimpleType: String(35)", "Delete SimpleName: value(36)", "Delete SingleVariableDeclaration(37)", "Delete SimpleName: value(38)", "Delete ReturnStatement(39)", "Delete Block(40)", "Delete MethodDeclaration(41)", "Delete SimpleName: Override(42)", "Delete MarkerAnnotation(43)", "Delete Modifier: public(44)", "Delete PrimitiveType: void(45)", "Delete SimpleName: configure(46)", "Delete SimpleName: Context(47)", "Delete SimpleType: Context(48)", "Delete SimpleName: context(49)", "Delete SingleVariableDeclaration(50)", "Delete Block(51)", "Delete MethodDeclaration(52)", "Delete SimpleName: Override(53)", "Delete MarkerAnnotation(54)", "Delete Modifier: public(55)", "Delete PrimitiveType: void(56)", "Delete SimpleName: configure(57)", "Delete SimpleName: ComponentConfiguration(58)", "Delete SimpleType: ComponentConfiguration(59)", "Delete SimpleName: conf(60)", "Delete SingleVariableDeclaration(61)", "Delete Block(62)", "Delete MethodDeclaration(63)", "Delete TypeDeclaration: class(64)"]}}, {"RegexExtractorInterceptorSerializer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.flume.interceptor", "DEL TagElement", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL Javadoc", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: limitations under the License.", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL PackageDeclaration", "DEL TextElement: or more contributor license agreements.  See the NOTICE file"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.flume.conf.Configurable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.flume.conf.ConfigurableComponent"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleType: String", "DEL SimpleName: RegexExtractorInterceptorSerializer", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleType: String", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: RegexExtractorInterceptor", "DEL TagElement: @link", "DEL SimpleName: value", "DEL SimpleName: serialize", "DEL SimpleName: Configurable", "DEL SimpleName: value", "DEL TagElement: @param", "DEL TextElement:  The serialized version of the specified value", "DEL SimpleName: String", "DEL TextElement: Serializer for serializing groups matched by the", "DEL TagElement: @return", "DEL SimpleType: ConfigurableComponent", "DEL SimpleName: ConfigurableComponent", "DEL TagElement", "DEL SimpleName: RegexExtractorInterceptor", "DEL SimpleName: String", "DEL TextElement: The value extracted by the ", "DEL SimpleType: Configurable", "DEL TagElement: @link", "DEL TypeDeclaration: interface"]}]}}, {"RegexExtractorInterceptorSerializer_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.flume.interceptor(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: org.apache.flume.conf.Configurable(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.flume.conf.ConfigurableComponent(19)", "Delete ImportDeclaration(20)", "Delete TextElement: Serializer for serializing groups matched by the(21)", "Delete SimpleName: RegexExtractorInterceptor(22)", "Delete TagElement: @link(23)", "Delete TagElement(24)", "Delete Javadoc(25)", "Delete Modifier: public(26)", "Delete SimpleName: RegexExtractorInterceptorSerializer(27)", "Delete SimpleName: Configurable(28)", "Delete SimpleType: Configurable(29)", "Delete SimpleName: ConfigurableComponent(30)", "Delete SimpleType: ConfigurableComponent(31)", "Delete SimpleName: value(32)", "Delete TextElement: The value extracted by the (33)", "Delete SimpleName: RegexExtractorInterceptor(34)", "Delete TagElement: @link(35)", "Delete TagElement: @param(36)", "Delete TextElement:  The serialized version of the specified value(37)", "Delete TagElement: @return(38)", "Delete Javadoc(39)", "Delete SimpleName: String(40)", "Delete SimpleType: String(41)", "Delete SimpleName: serialize(42)", "Delete SimpleName: String(43)", "Delete SimpleType: String(44)", "Delete SimpleName: value(45)", "Delete SingleVariableDeclaration(46)", "Delete MethodDeclaration(47)", "Delete TypeDeclaration: interface(48)"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 7, "testing": "True", "maintenance": "False", "build": "False"}]}