{"application": "apache-commons-jexl", "csha": "771afc52b2161d1db9859670509b73ee5e7c0b35", "files": [{"JexlBuilder_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}]}}, {"JexlBuilder_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(699) at 7", "Move ImportDeclaration(7) into CompilationUnit(699) at 6", "Move ImportDeclaration(9) into CompilationUnit(699) at 4", "Update QualifiedName: org.apache.commons.logging.Log(12) to org.apache.log4j.Logger", "Update SimpleType: Log(82) to Logger", "Update SimpleType: Log(335) to Logger", "Update SimpleName: Log(81) to Logger", "Update SimpleType: Log(317) to Logger", "Update SimpleName: Log(334) to Logger", "Update SimpleName: Log(316) to Logger"]}}, {"JexlContext_cluster": {"actions": [{"root": "INS Modifier: public to TypeDeclaration: interface at 1", "operations": ["INS Modifier: public to TypeDeclaration: interface at 1"]}, {"root": "INS SimpleName: JexlContext to TypeDeclaration: interface at 2", "operations": ["INS SimpleName: JexlContext to TypeDeclaration: interface at 2"]}, {"root": "INS TypeDeclaration: interface to TypeDeclaration: interface at 9", "operations": ["INS SimpleName: createFunctor to MethodDeclaration at 2", "INS TextElement: Namespace type that allows creating an instance to delegate namespace methods calls to. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  the namespace functor instance to TagElement: @return at 0", "INS Javadoc to TypeDeclaration: interface at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: NamespaceFunctor to TypeDeclaration: interface at 2", "INS TagElement to Javadoc at 0", "INS SimpleType: JexlContext to SingleVariableDeclaration at 0", "INS TypeDeclaration: interface to TypeDeclaration: interface at 9", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: Object to MethodDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  the context to TagElement: @param at 1", "INS TextElement: Creates the functor object that will be used instead of the namespace. to TagElement at 0", "INS SimpleName: context to SingleVariableDeclaration at 1", "INS TextElement: <p>The functor is created once during the lifetime of a script evaluation.</p> to TagElement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: context to TagElement: @param at 0", "INS MethodDeclaration to TypeDeclaration: interface at 3", "INS SimpleName: JexlContext to SimpleType: JexlContext at 0"]}, {"root": "INS TypeDeclaration: interface to TypeDeclaration: interface at 10", "operations": ["INS TextElement: A marker interface that indicates the interpreter to put this context in the JexlEngine thread local context to TagElement at 0", "INS TagElement: @see to Javadoc at 1", "INS SimpleName: ThreadLocal to TypeDeclaration: interface at 2", "INS SimpleName: JexlContext to SimpleType: JexlContext at 0", "INS TextElement: It should also be noted that sharing such a context between threads should implicate synchronizing variable access to TagElement at 5", "INS MethodRef to TagElement: @see at 0", "INS SimpleName: JexlEngine to MethodRef at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: JexlEngine to MethodRef at 0", "INS SimpleName: setThreadContext to MethodRef at 1", "INS TextElement: instance during evaluation. to TagElement at 1", "INS TextElement: This allows user functions or methods to access the context during a call. to TagElement at 2", "INS TextElement: in the implementation class. to TagElement at 6", "INS Modifier: public to TypeDeclaration: interface at 1", "INS TagElement: @see to Javadoc at 2", "INS SimpleName: getThreadContext to MethodRef at 1", "INS TextElement: a reference to such a context is to be considered with great care and caution. to TagElement at 4", "INS SimpleType: JexlContext to TypeDeclaration: interface at 3", "INS TextElement: Note that the usual caveats wrt using thread local apply (caching/leaking references, etc.); in particular, keeping to TagElement at 3", "INS TypeDeclaration: interface to TypeDeclaration: interface at 10", "INS MethodRef to TagElement: @see at 0", "INS Javadoc to TypeDeclaration: interface at 0"]}, {"root": "MOVE from TypeDeclaration: interface", "operations": ["MOV Modifier: public to TypeDeclaration: interface at 1"]}, {"root": "DEL SimpleName: JexlContext", "operations": ["DEL SimpleName: JexlContext"]}]}}, {"JexlContext_diff": {"operations": ["Insert Modifier: public(22) into TypeDeclaration: interface(156) at 1", "Insert SimpleName: JexlContext(23) into TypeDeclaration: interface(156) at 2", "Insert TypeDeclaration: interface(133) into TypeDeclaration: interface(156) at 7", "Insert TypeDeclaration: interface(155) into TypeDeclaration: interface(156) at 8", "Insert Javadoc(114) into TypeDeclaration: interface(133) at 0", "Move Modifier: public(22) into TypeDeclaration: interface(133) at 1", "Insert SimpleName: NamespaceFunctor(116) into TypeDeclaration: interface(133) at 2", "Insert MethodDeclaration(132) into TypeDeclaration: interface(133) at 3", "Insert Javadoc(150) into TypeDeclaration: interface(155) at 0", "Insert Modifier: public(151) into TypeDeclaration: interface(155) at 1", "Insert SimpleName: ThreadLocal(152) into TypeDeclaration: interface(155) at 2", "Insert SimpleType: JexlContext(154) into TypeDeclaration: interface(155) at 3", "Insert TagElement(113) into Javadoc(114) at 0", "Insert Javadoc(124) into MethodDeclaration(132) at 0", "Insert SimpleType: Object(126) into MethodDeclaration(132) at 1", "Insert SimpleName: createFunctor(127) into MethodDeclaration(132) at 2", "Insert SingleVariableDeclaration(131) into MethodDeclaration(132) at 3", "Insert TagElement(141) into Javadoc(150) at 0", "Insert TagElement: @see(145) into Javadoc(150) at 1", "Insert TagElement: @see(149) into Javadoc(150) at 2", "Insert SimpleName: JexlContext(153) into SimpleType: JexlContext(154) at 0", "Insert TextElement: Namespace type that allows creating an instance to delegate namespace methods calls to.(111) into TagElement(113) at 0", "Insert TextElement: <p>The functor is created once during the lifetime of a script evaluation.</p>(112) into TagElement(113) at 1", "Insert TagElement(118) into Javadoc(124) at 0", "Insert TagElement: @param(121) into Javadoc(124) at 1", "Insert TagElement: @return(123) into Javadoc(124) at 2", "Insert SimpleName: Object(125) into SimpleType: Object(126) at 0", "Insert SimpleType: JexlContext(129) into SingleVariableDeclaration(131) at 0", "Insert SimpleName: context(130) into SingleVariableDeclaration(131) at 1", "Insert TextElement: A marker interface that indicates the interpreter to put this context in the JexlEngine thread local context(134) into TagElement(141) at 0", "Insert TextElement: instance during evaluation.(135) into TagElement(141) at 1", "Insert TextElement: This allows user functions or methods to access the context during a call.(136) into TagElement(141) at 2", "Insert TextElement: Note that the usual caveats wrt using thread local apply (caching/leaking references, etc.); in particular, keeping(137) into TagElement(141) at 3", "Insert TextElement: a reference to such a context is to be considered with great care and caution.(138) into TagElement(141) at 4", "Insert TextElement: It should also be noted that sharing such a context between threads should implicate synchronizing variable access(139) into TagElement(141) at 5", "Insert TextElement: in the implementation class.(140) into TagElement(141) at 6", "Insert MethodRef(144) into TagElement: @see(145) at 0", "Insert MethodRef(148) into TagElement: @see(149) at 0", "Insert TextElement: Creates the functor object that will be used instead of the namespace.(117) into TagElement(118) at 0", "Insert SimpleName: context(119) into TagElement: @param(121) at 0", "Insert TextElement:  the context(120) into TagElement: @param(121) at 1", "Insert TextElement:  the namespace functor instance(122) into TagElement: @return(123) at 0", "Insert SimpleName: JexlContext(128) into SimpleType: JexlContext(129) at 0", "Insert SimpleName: JexlEngine(142) into MethodRef(144) at 0", "Insert SimpleName: setThreadContext(143) into MethodRef(144) at 1", "Insert SimpleName: JexlEngine(146) into MethodRef(148) at 0", "Insert SimpleName: getThreadContext(147) into MethodRef(148) at 1", "Delete SimpleName: JexlContext(23)"]}}, {"JexlEngine_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS SimpleType: java.lang.ThreadLocal to ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal> at 0", "INS Modifier: final to FieldDeclaration at 3", "INS QualifiedName: java.lang.ThreadLocal to SimpleType: java.lang.ThreadLocal at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleType: java.lang.ThreadLocal to ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal> at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS TagElement to Javadoc at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: static to FieldDeclaration at 2", "INS QualifiedName: java.lang.ThreadLocal to SimpleType: java.lang.ThreadLocal at 0", "INS SimpleType: JexlContext.ThreadLocal to MethodDeclaration at 2", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal> to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS TextElement: The thread local context. to TagElement at 0", "INS SimpleName: CONTEXT to VariableDeclarationFragment at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleType: JexlContext.ThreadLocal to ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal> at 1", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS SimpleName: initialValue to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS Javadoc to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal> to ClassInstanceCreation at 0", "INS SimpleType: JexlContext.ThreadLocal to ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal> at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS Modifier: protected to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleType: JexlContext.ThreadLocal to MethodDeclaration at 3", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS TextElement: Accesses the current thread local context. to TagElement at 0", "INS SimpleName: getThreadContext to MethodDeclaration at 4", "INS SimpleName: CONTEXT to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 1", "INS TextElement:  the context or null to TagElement: @return at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: setThreadContext to MethodDeclaration at 4", "INS Block to MethodDeclaration at 6", "INS TagElement: @param to Javadoc at 1", "INS TextElement: given Namespace resolver. Remember to synchronize access if context is shared between threads. to TagElement at 2", "INS TextElement: Sets the current thread local context. to TagElement at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: tls to TagElement: @param at 0", "INS SimpleName: tls to SingleVariableDeclaration at 1", "INS TextElement: <p>This should only be used carefully, for instance when re-evaluating a \"stored\" script that requires a to TagElement at 1", "INS SimpleName: CONTEXT to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: set to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: JexlContext.ThreadLocal to SingleVariableDeclaration at 0", "INS TextElement:  the thread local context to set to TagElement: @param at 1", "INS TagElement to Javadoc at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: tls to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS BooleanLiteral: true to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: createJxltEngine to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: createJxltEngine to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 18"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: JxltEngine to MethodDeclaration at 2"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Creates a new  to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  a Jexl Template engine to TagElement: @return at 0", "INS SimpleName: noScript to TagElement: @param at 0", "INS SimpleName: JxltEngine to TagElement: @link at 0", "INS TagElement: @param to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:   whether the JxltEngine only allows Jexl expressions or scripts to TagElement: @param at 1", "INS TagElement: @return to Javadoc at 2", "INS TagElement: @link to TagElement at 1", "INS TextElement:  instance using this engine. to TagElement at 2"]}, {"root": "INS SimpleType: JxltEngine to MethodDeclaration at 2", "operations": ["INS SimpleType: JxltEngine to MethodDeclaration at 2", "INS SimpleName: JxltEngine to SimpleType: JxltEngine at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: noScript to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: noScript to SingleVariableDeclaration at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:   whether the JxltEngine only allows Jexl expressions or scripts to TagElement: @param at 1", "INS SimpleName: noScript to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS SimpleName: noScript to MethodInvocation at 1", "operations": ["INS SimpleName: noScript to MethodInvocation at 1"]}]}}, {"JexlEngine_diff": {"operations": ["Insert FieldDeclaration(79) into TypeDeclaration: class(1618) at 4", "Insert MethodDeclaration(95) into TypeDeclaration: class(1618) at 5", "Insert MethodDeclaration(118) into TypeDeclaration: class(1618) at 6", "Insert MethodDeclaration(388) into TypeDeclaration: class(1618) at 18", "Insert Javadoc(51) into FieldDeclaration(79) at 0", "Insert Modifier: protected(52) into FieldDeclaration(79) at 1", "Insert Modifier: static(53) into FieldDeclaration(79) at 2", "Insert Modifier: final(54) into FieldDeclaration(79) at 3", "Insert ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal>(59) into FieldDeclaration(79) at 4", "Insert VariableDeclarationFragment(78) into FieldDeclaration(79) at 5", "Insert Javadoc(84) into MethodDeclaration(95) at 0", "Insert Modifier: public(85) into MethodDeclaration(95) at 1", "Insert Modifier: static(86) into MethodDeclaration(95) at 2", "Insert SimpleType: JexlContext.ThreadLocal(88) into MethodDeclaration(95) at 3", "Insert SimpleName: getThreadContext(89) into MethodDeclaration(95) at 4", "Insert Block(94) into MethodDeclaration(95) at 5", "Insert Javadoc(103) into MethodDeclaration(118) at 0", "Insert Modifier: public(104) into MethodDeclaration(118) at 1", "Insert Modifier: static(105) into MethodDeclaration(118) at 2", "Insert PrimitiveType: void(106) into MethodDeclaration(118) at 3", "Insert SimpleName: setThreadContext(107) into MethodDeclaration(118) at 4", "Insert SingleVariableDeclaration(111) into MethodDeclaration(118) at 5", "Insert Block(117) into MethodDeclaration(118) at 6", "Move Javadoc(308) into MethodDeclaration(388) at 0", "Insert Modifier: public(379) into MethodDeclaration(388) at 1", "Move SimpleType: JxltEngine(311) into MethodDeclaration(388) at 2", "Insert SimpleName: createJxltEngine(382) into MethodDeclaration(388) at 3", "Insert Block(387) into MethodDeclaration(388) at 4", "Insert Javadoc(399) into MethodDeclaration(415) at 0", "Insert SimpleType: JxltEngine(402) into MethodDeclaration(415) at 2", "Insert SingleVariableDeclaration(406) into MethodDeclaration(415) at 4", "Insert SingleVariableDeclaration(443) into MethodDeclaration(453) at 5", "Insert TagElement(50) into Javadoc(51) at 0", "Insert SimpleType: java.lang.ThreadLocal(56) into ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal>(59) at 0", "Insert SimpleType: JexlContext.ThreadLocal(58) into ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal>(59) at 1", "Insert SimpleName: CONTEXT(60) into VariableDeclarationFragment(78) at 0", "Insert ClassInstanceCreation(77) into VariableDeclarationFragment(78) at 1", "Insert TagElement(81) into Javadoc(84) at 0", "Insert TagElement: @return(83) into Javadoc(84) at 1", "Insert QualifiedName: JexlContext.ThreadLocal(87) into SimpleType: JexlContext.ThreadLocal(88) at 0", "Insert ReturnStatement(93) into Block(94) at 0", "Insert TagElement(99) into Javadoc(103) at 0", "Insert TagElement: @param(102) into Javadoc(103) at 1", "Insert SimpleType: JexlContext.ThreadLocal(109) into SingleVariableDeclaration(111) at 0", "Insert SimpleName: tls(110) into SingleVariableDeclaration(111) at 1", "Insert ExpressionStatement(116) into Block(117) at 0", "Insert ReturnStatement(386) into Block(387) at 0", "Insert TagElement(393) into Javadoc(399) at 0", "Insert TagElement: @param(396) into Javadoc(399) at 1", "Insert TagElement: @return(398) into Javadoc(399) at 2", "Insert SimpleName: JxltEngine(401) into SimpleType: JxltEngine(402) at 0", "Insert PrimitiveType: boolean(404) into SingleVariableDeclaration(406) at 0", "Insert SimpleName: noScript(405) into SingleVariableDeclaration(406) at 1", "Insert TagElement: @param(423) into Javadoc(435) at 1", "Insert PrimitiveType: boolean(441) into SingleVariableDeclaration(443) at 0", "Insert SimpleName: noScript(442) into SingleVariableDeclaration(443) at 1", "Insert TextElement: The thread local context.(49) into TagElement(50) at 0", "Insert QualifiedName: java.lang.ThreadLocal(55) into SimpleType: java.lang.ThreadLocal(56) at 0", "Insert QualifiedName: JexlContext.ThreadLocal(57) into SimpleType: JexlContext.ThreadLocal(58) at 0", "Insert ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal>(65) into ClassInstanceCreation(77) at 0", "Insert AnonymousClassDeclaration(76) into ClassInstanceCreation(77) at 1", "Insert TextElement: Accesses the current thread local context.(80) into TagElement(81) at 0", "Insert TextElement:  the context or null(82) into TagElement: @return(83) at 0", "Insert MethodInvocation(92) into ReturnStatement(93) at 0", "Insert TextElement: Sets the current thread local context.(96) into TagElement(99) at 0", "Insert TextElement: <p>This should only be used carefully, for instance when re-evaluating a \"stored\" script that requires a(97) into TagElement(99) at 1", "Insert TextElement: given Namespace resolver. Remember to synchronize access if context is shared between threads.(98) into TagElement(99) at 2", "Insert SimpleName: tls(100) into TagElement: @param(102) at 0", "Insert TextElement:  the thread local context to set(101) into TagElement: @param(102) at 1", "Insert QualifiedName: JexlContext.ThreadLocal(108) into SimpleType: JexlContext.ThreadLocal(109) at 0", "Insert MethodInvocation(115) into ExpressionStatement(116) at 0", "Insert MethodInvocation(385) into ReturnStatement(386) at 0", "Insert TextElement: Creates a new (389) into TagElement(393) at 0", "Insert TagElement: @link(391) into TagElement(393) at 1", "Insert TextElement:  instance using this engine.(392) into TagElement(393) at 2", "Insert SimpleName: noScript(394) into TagElement: @param(396) at 0", "Insert TextElement:   whether the JxltEngine only allows Jexl expressions or scripts(395) into TagElement: @param(396) at 1", "Insert TextElement:  a Jexl Template engine(397) into TagElement: @return(398) at 0", "Insert SimpleName: noScript(421) into TagElement: @param(423) at 0", "Insert TextElement:   whether the JxltEngine only allows Jexl expressions or scripts(422) into TagElement: @param(423) at 1", "Insert SimpleType: java.lang.ThreadLocal(62) into ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal>(65) at 0", "Insert SimpleType: JexlContext.ThreadLocal(64) into ParameterizedType: java.lang.ThreadLocal<JexlContext.ThreadLocal>(65) at 1", "Insert MethodDeclaration(75) into AnonymousClassDeclaration(76) at 0", "Insert SimpleName: CONTEXT(90) into MethodInvocation(92) at 0", "Insert SimpleName: get(91) into MethodInvocation(92) at 1", "Insert SimpleName: CONTEXT(112) into MethodInvocation(115) at 0", "Insert SimpleName: set(113) into MethodInvocation(115) at 1", "Insert SimpleName: tls(114) into MethodInvocation(115) at 2", "Insert SimpleName: createJxltEngine(383) into MethodInvocation(385) at 0", "Insert BooleanLiteral: true(384) into MethodInvocation(385) at 1", "Insert SimpleName: JxltEngine(390) into TagElement: @link(391) at 0", "Insert SimpleName: noScript(408) into MethodInvocation(412) at 1", "Insert QualifiedName: java.lang.ThreadLocal(61) into SimpleType: java.lang.ThreadLocal(62) at 0", "Insert QualifiedName: JexlContext.ThreadLocal(63) into SimpleType: JexlContext.ThreadLocal(64) at 0", "Insert MarkerAnnotation(67) into MethodDeclaration(75) at 0", "Insert Modifier: protected(68) into MethodDeclaration(75) at 1", "Insert SimpleType: JexlContext.ThreadLocal(70) into MethodDeclaration(75) at 2", "Insert SimpleName: initialValue(71) into MethodDeclaration(75) at 3", "Insert Block(74) into MethodDeclaration(75) at 4", "Insert SimpleName: Override(66) into MarkerAnnotation(67) at 0", "Insert QualifiedName: JexlContext.ThreadLocal(69) into SimpleType: JexlContext.ThreadLocal(70) at 0", "Insert ReturnStatement(73) into Block(74) at 0", "Insert NullLiteral(72) into ReturnStatement(73) at 0"]}}, {"JexlException_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to IfStatement at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: info to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS IfStatement to Block at 0", "INS IfStatement to Block at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS QualifiedName: JexlInfo.Detail to SimpleType: JexlInfo.Detail at 0", "INS Block to MethodDeclaration at 4", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getDetail to MethodDeclaration at 3", "INS AnonymousClassDeclaration to ClassInstanceCreation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: JexlInfo.Detail to MethodDeclaration at 2", "INS SimpleType: JexlInfo to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS SimpleName: JexlInfo to SimpleType: JexlInfo at 0", "INS SimpleName: info to ClassInstanceCreation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS InfixExpression: && to IfStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "UPDATE from 32 to 42", "operations": ["UPD NumberLiteral: 32 from 32 to 42"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 4", "MOV ReturnStatement to Block at 6", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 1"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from \"inaccessible or unknown property \" to \"unsolvable property '\"", "operations": ["UPD StringLiteral: \"inaccessible or unknown property \" from \"inaccessible or unknown property \" to \"unsolvable property '\""]}, {"root": "INS StringLiteral: \"'\" to InfixExpression: + at 2", "operations": ["INS StringLiteral: \"'\" to InfixExpression: + at 2"]}, {"root": "UPDATE from \"unknown, ambiguous or inaccessible method \" to \"unsolvable function/method '\"", "operations": ["UPD StringLiteral: \"unknown, ambiguous or inaccessible method \" from \"unknown, ambiguous or inaccessible method \" to \"unsolvable function/method '\""]}, {"root": "INS StringLiteral: \"'\" to InfixExpression: + at 2", "operations": ["INS StringLiteral: \"'\" to InfixExpression: + at 2"]}, {"root": "UPDATE from \",\" to \"?:\"", "operations": ["UPD StringLiteral: \",\" from \",\" to \"?:\""]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: dbg to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"![\"", "DEL SimpleName: msg", "DEL SimpleName: append", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: msg", "DEL SimpleName: append", "DEL SimpleName: start", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: dbg", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: msg", "DEL MethodInvocation", "DEL SimpleName: dbg", "DEL SimpleName: append", "DEL SimpleName: end", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"]: '\"", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: msg"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: dbg", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL SimpleName: msg"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: msg", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL StringLiteral: \"'\""]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL Block", "DEL SimpleName: msg", "DEL IfStatement", "DEL Block", "DEL Block", "DEL SimpleName: append", "DEL CharacterLiteral: '?'", "DEL MethodInvocation", "DEL ExpressionStatement"]}]}}, {"JexlException_diff": {"operations": ["Insert Block(246) into MethodDeclaration(247) at 4", "Insert Block(1304) into MethodDeclaration(1305) at 5", "Update NumberLiteral: 32(59) to 42", "Insert IfStatement(243) into Block(246) at 0", "Move ReturnStatement(205) into Block(246) at 1", "Move VariableDeclarationStatement(1210) into Block(1304) at 0", "Move IfStatement(1286) into Block(1304) at 1", "Move ExpressionStatement(1293) into Block(1304) at 2", "Move ExpressionStatement(1299) into Block(1304) at 3", "Move VariableDeclarationStatement(1306) into Block(1304) at 4", "Move IfStatement(1317) into Block(1304) at 5", "Move ReturnStatement(1321) into Block(1304) at 6", "Insert InfixExpression: &&(210) into IfStatement(243) at 0", "Insert Block(242) into IfStatement(243) at 1", "Move InfixExpression: !=(1213) into IfStatement(1270) at 0", "Move Block(1221) into IfStatement(1270) at 1", "Insert InfixExpression: !=(206) into InfixExpression: &&(210) at 0", "Move InfixExpression: !=(1231) into InfixExpression: &&(210) at 1", "Move VariableDeclarationStatement(1239) into Block(242) at 0", "Insert IfStatement(241) into Block(242) at 1", "Insert SimpleName: info(204) into InfixExpression: !=(206) at 0", "Insert NullLiteral(205) into InfixExpression: !=(206) at 1", "Insert Modifier: final(211) into VariableDeclarationStatement(219) at 0", "Move MethodInvocation(1243) into IfStatement(241) at 0", "Insert Block(240) into IfStatement(241) at 1", "Update StringLiteral: \"inaccessible or unknown property \"(980) to \"unsolvable property '\"", "Insert StringLiteral: \"'\"(1023) into InfixExpression: +(1024) at 2", "Update StringLiteral: \"unknown, ambiguous or inaccessible method \"(1080) to \"unsolvable function/method '\"", "Insert StringLiteral: \"'\"(1124) into InfixExpression: +(1125) at 2", "Insert ReturnStatement(239) into Block(240) at 0", "Update StringLiteral: \",\"(1258) to \"?:\"", "Insert ClassInstanceCreation(238) into ReturnStatement(239) at 0", "Insert SimpleType: JexlInfo(225) into ClassInstanceCreation(238) at 0", "Insert SimpleName: info(226) into ClassInstanceCreation(238) at 1", "Insert AnonymousClassDeclaration(237) into ClassInstanceCreation(238) at 2", "Insert SimpleName: JexlInfo(224) into SimpleType: JexlInfo(225) at 0", "Insert MethodDeclaration(236) into AnonymousClassDeclaration(237) at 0", "Insert MarkerAnnotation(228) into MethodDeclaration(236) at 0", "Insert Modifier: public(229) into MethodDeclaration(236) at 1", "Insert SimpleType: JexlInfo.Detail(231) into MethodDeclaration(236) at 2", "Insert SimpleName: getDetail(232) into MethodDeclaration(236) at 3", "Move Block(206) into MethodDeclaration(236) at 4", "Insert SimpleName: Override(227) into MarkerAnnotation(228) at 0", "Insert QualifiedName: JexlInfo.Detail(230) into SimpleType: JexlInfo.Detail(231) at 0", "Insert ReturnStatement(234) into Block(235) at 0", "Insert SimpleName: dbg(233) into ReturnStatement(234) at 0", "Delete SimpleName: msg(1244)", "Delete SimpleName: append(1245)", "Delete StringLiteral: \"![\"(1246)", "Delete MethodInvocation(1247)", "Delete ExpressionStatement(1248)", "Delete SimpleName: msg(1249)", "Delete SimpleName: append(1250)", "Delete SimpleName: dbg(1251)", "Delete SimpleName: start(1252)", "Delete MethodInvocation(1253)", "Delete MethodInvocation(1254)", "Delete ExpressionStatement(1255)", "Delete SimpleName: msg(1261)", "Delete SimpleName: append(1262)", "Delete SimpleName: dbg(1263)", "Delete SimpleName: end(1264)", "Delete MethodInvocation(1265)", "Delete MethodInvocation(1266)", "Delete ExpressionStatement(1267)", "Delete SimpleName: msg(1268)", "Delete SimpleName: append(1269)", "Delete StringLiteral: \"]: '\"(1270)", "Delete MethodInvocation(1271)", "Delete ExpressionStatement(1272)", "Delete SimpleName: msg(1273)", "Delete SimpleName: append(1274)", "Delete SimpleName: dbg(1275)", "Delete SimpleName: toString(1276)", "Delete MethodInvocation(1277)", "Delete MethodInvocation(1278)", "Delete ExpressionStatement(1279)", "Delete SimpleName: msg(1280)", "Delete SimpleName: append(1281)", "Delete StringLiteral: \"'\"(1282)", "Delete MethodInvocation(1283)", "Delete ExpressionStatement(1284)", "Delete SimpleName: msg(1222)", "Delete SimpleName: append(1223)", "Delete CharacterLiteral: '?'(1224)", "Delete MethodInvocation(1225)", "Delete ExpressionStatement(1226)", "Delete Block(1227)", "Delete IfStatement(1228)", "Delete Block(1287)", "Delete IfStatement(1288)", "Delete Block(1322)"]}}, {"JexlExpression_cluster": {"actions": [{"root": "INS TextElement: This implies 'if','for','while','var' and blocks '{'... '}'are NOT allowed in expressions. to TagElement at 9", "operations": ["INS TextElement: This implies 'if','for','while','var' and blocks '{'... '}'are NOT allowed in expressions. to TagElement at 9"]}]}}, {"JexlExpression_diff": {"operations": ["Insert TextElement: This implies 'if','for','while','var' and blocks '{'... '}'are NOT allowed in expressions.(14) into TagElement(16) at 9"]}}, {"JexlInfo_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS ReturnStatement to Block at 0", "INS TagElement: @return to Javadoc at 0", "INS SimpleName: Detail to SimpleType: Detail at 0", "INS TextElement:  the detailed information in case of an error to TagElement: @return at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleType: Detail to MethodDeclaration at 2", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: getDetail to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS TypeDeclaration: interface to TypeDeclaration: class at 7", "operations": ["INS Modifier: static to TypeDeclaration: interface at 2", "INS TagElement to Javadoc at 0", "INS SimpleName: Detail to TypeDeclaration: interface at 3", "INS TypeDeclaration: interface to TypeDeclaration: class at 7", "INS TextElement: The actual part of code that triggered the error.  to TagElement at 0", "INS SimpleName: end to MethodDeclaration at 2", "INS PrimitiveType: int to MethodDeclaration at 1", "INS TagElement to Javadoc at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS TextElement: The end column on the line that triggered the error.  to TagElement at 0", "INS SimpleName: start to MethodDeclaration at 2", "INS Javadoc to TypeDeclaration: interface at 0", "INS TextElement: The start column on the line that triggered the error.  to TagElement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS TagElement to Javadoc at 0", "INS TagElement to Javadoc at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS TextElement: Describes errors more precicely. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: interface at 6", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to TypeDeclaration: interface at 1", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: interface at 5", "INS MarkerAnnotation to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: interface at 4", "INS SimpleName: toString to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 9", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: column to Assignment: = at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: getColumn to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: line to Assignment: = at 0", "INS SimpleType: JexlInfo to SingleVariableDeclaration at 0", "INS SimpleName: getLine to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: copy to MethodInvocation at 0", "INS SimpleName: copy to MethodInvocation at 0", "INS SimpleName: JexlInfo to MethodDeclaration at 1", "INS SimpleName: copy to MethodInvocation at 0", "INS SimpleName: name to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: JexlInfo to SimpleType: JexlInfo at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: copy to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \"]: '\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: dbg to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: sb to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: JexlInfo.Detail to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS IfStatement to Block at 3", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: getDetail to MethodInvocation at 0", "INS StringLiteral: \"'\" to MethodInvocation at 2", "INS SimpleName: sb to MethodInvocation at 0", "INS StringLiteral: \",\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: dbg to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 2", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: dbg to VariableDeclarationFragment at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS ExpressionStatement to Block at 3", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 5", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS StringLiteral: \"![\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: start to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS QualifiedName: JexlInfo.Detail to SimpleType: JexlInfo.Detail at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: dbg to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: dbg to InfixExpression: != at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: end to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"JexlInfo_diff": {"operations": ["Insert MethodDeclaration(46) into TypeDeclaration: class(293) at 6", "Insert TypeDeclaration: interface(74) into TypeDeclaration: class(293) at 7", "Insert MethodDeclaration(138) into TypeDeclaration: class(293) at 9", "Insert Javadoc(38) into MethodDeclaration(46) at 0", "Insert Modifier: public(39) into MethodDeclaration(46) at 1", "Insert SimpleType: Detail(41) into MethodDeclaration(46) at 2", "Insert SimpleName: getDetail(42) into MethodDeclaration(46) at 3", "Insert Block(45) into MethodDeclaration(46) at 4", "Insert Javadoc(49) into TypeDeclaration: interface(74) at 0", "Insert Modifier: public(50) into TypeDeclaration: interface(74) at 1", "Insert Modifier: static(51) into TypeDeclaration: interface(74) at 2", "Insert SimpleName: Detail(52) into TypeDeclaration: interface(74) at 3", "Insert MethodDeclaration(58) into TypeDeclaration: interface(74) at 4", "Insert MethodDeclaration(64) into TypeDeclaration: interface(74) at 5", "Insert MethodDeclaration(73) into TypeDeclaration: interface(74) at 6", "Insert Modifier: protected(113) into MethodDeclaration(138) at 0", "Insert SimpleName: JexlInfo(114) into MethodDeclaration(138) at 1", "Insert SingleVariableDeclaration(118) into MethodDeclaration(138) at 2", "Insert Block(137) into MethodDeclaration(138) at 3", "Insert Block(251) into MethodDeclaration(252) at 5", "Insert TagElement: @return(37) into Javadoc(38) at 0", "Insert SimpleName: Detail(40) into SimpleType: Detail(41) at 0", "Insert ReturnStatement(44) into Block(45) at 0", "Insert TagElement(48) into Javadoc(49) at 0", "Insert Javadoc(55) into MethodDeclaration(58) at 0", "Insert PrimitiveType: int(56) into MethodDeclaration(58) at 1", "Insert SimpleName: start(57) into MethodDeclaration(58) at 2", "Insert Javadoc(61) into MethodDeclaration(64) at 0", "Insert PrimitiveType: int(62) into MethodDeclaration(64) at 1", "Insert SimpleName: end(63) into MethodDeclaration(64) at 2", "Insert Javadoc(67) into MethodDeclaration(73) at 0", "Insert MarkerAnnotation(69) into MethodDeclaration(73) at 1", "Insert SimpleType: String(71) into MethodDeclaration(73) at 2", "Insert SimpleName: toString(72) into MethodDeclaration(73) at 3", "Insert SimpleType: JexlInfo(116) into SingleVariableDeclaration(118) at 0", "Insert SimpleName: copy(117) into SingleVariableDeclaration(118) at 1", "Insert ExpressionStatement(124) into Block(137) at 0", "Insert ExpressionStatement(130) into Block(137) at 1", "Insert ExpressionStatement(136) into Block(137) at 2", "Move VariableDeclarationStatement(98) into Block(251) at 0", "Move IfStatement(128) into Block(251) at 1", "Insert VariableDeclarationStatement(200) into Block(251) at 2", "Insert IfStatement(246) into Block(251) at 3", "Move ReturnStatement(132) into Block(251) at 4", "Insert TextElement:  the detailed information in case of an error(36) into TagElement: @return(37) at 0", "Insert NullLiteral(43) into ReturnStatement(44) at 0", "Insert TextElement: Describes errors more precicely.(47) into TagElement(48) at 0", "Insert TagElement(54) into Javadoc(55) at 0", "Insert TagElement(60) into Javadoc(61) at 0", "Insert TagElement(66) into Javadoc(67) at 0", "Insert SimpleName: Override(68) into MarkerAnnotation(69) at 0", "Insert SimpleName: String(70) into SimpleType: String(71) at 0", "Insert SimpleName: JexlInfo(115) into SimpleType: JexlInfo(116) at 0", "Insert Assignment: =(123) into ExpressionStatement(124) at 0", "Insert Assignment: =(129) into ExpressionStatement(130) at 0", "Insert Assignment: =(135) into ExpressionStatement(136) at 0", "Insert SimpleType: JexlInfo.Detail(195) into VariableDeclarationStatement(200) at 0", "Insert VariableDeclarationFragment(199) into VariableDeclarationStatement(200) at 1", "Insert InfixExpression: !=(203) into IfStatement(246) at 0", "Insert Block(245) into IfStatement(246) at 1", "Insert TextElement: The start column on the line that triggered the error. (53) into TagElement(54) at 0", "Insert TextElement: The end column on the line that triggered the error. (59) into TagElement(60) at 0", "Insert TextElement: The actual part of code that triggered the error. (65) into TagElement(66) at 0", "Insert SimpleName: name(119) into Assignment: =(123) at 0", "Insert MethodInvocation(122) into Assignment: =(123) at 1", "Insert SimpleName: line(125) into Assignment: =(129) at 0", "Insert MethodInvocation(128) into Assignment: =(129) at 1", "Insert SimpleName: column(131) into Assignment: =(135) at 0", "Insert MethodInvocation(134) into Assignment: =(135) at 1", "Insert QualifiedName: JexlInfo.Detail(194) into SimpleType: JexlInfo.Detail(195) at 0", "Insert SimpleName: dbg(196) into VariableDeclarationFragment(199) at 0", "Insert MethodInvocation(198) into VariableDeclarationFragment(199) at 1", "Insert SimpleName: dbg(201) into InfixExpression: !=(203) at 0", "Insert NullLiteral(202) into InfixExpression: !=(203) at 1", "Insert ExpressionStatement(208) into Block(245) at 0", "Insert ExpressionStatement(215) into Block(245) at 1", "Insert ExpressionStatement(220) into Block(245) at 2", "Insert ExpressionStatement(227) into Block(245) at 3", "Insert ExpressionStatement(232) into Block(245) at 4", "Insert ExpressionStatement(239) into Block(245) at 5", "Insert ExpressionStatement(244) into Block(245) at 6", "Insert SimpleName: copy(120) into MethodInvocation(122) at 0", "Insert SimpleName: getName(121) into MethodInvocation(122) at 1", "Insert SimpleName: copy(126) into MethodInvocation(128) at 0", "Insert SimpleName: getLine(127) into MethodInvocation(128) at 1", "Insert SimpleName: copy(132) into MethodInvocation(134) at 0", "Insert SimpleName: getColumn(133) into MethodInvocation(134) at 1", "Insert SimpleName: getDetail(197) into MethodInvocation(198) at 0", "Insert MethodInvocation(207) into ExpressionStatement(208) at 0", "Insert MethodInvocation(214) into ExpressionStatement(215) at 0", "Insert MethodInvocation(219) into ExpressionStatement(220) at 0", "Insert MethodInvocation(226) into ExpressionStatement(227) at 0", "Insert MethodInvocation(231) into ExpressionStatement(232) at 0", "Insert MethodInvocation(238) into ExpressionStatement(239) at 0", "Insert MethodInvocation(243) into ExpressionStatement(244) at 0", "Insert SimpleName: sb(204) into MethodInvocation(207) at 0", "Insert SimpleName: append(205) into MethodInvocation(207) at 1", "Insert StringLiteral: \"![\"(206) into MethodInvocation(207) at 2", "Insert SimpleName: sb(209) into MethodInvocation(214) at 0", "Insert SimpleName: append(210) into MethodInvocation(214) at 1", "Insert MethodInvocation(213) into MethodInvocation(214) at 2", "Insert SimpleName: sb(216) into MethodInvocation(219) at 0", "Insert SimpleName: append(217) into MethodInvocation(219) at 1", "Insert StringLiteral: \",\"(218) into MethodInvocation(219) at 2", "Insert SimpleName: sb(221) into MethodInvocation(226) at 0", "Insert SimpleName: append(222) into MethodInvocation(226) at 1", "Insert MethodInvocation(225) into MethodInvocation(226) at 2", "Insert SimpleName: sb(228) into MethodInvocation(231) at 0", "Insert SimpleName: append(229) into MethodInvocation(231) at 1", "Insert StringLiteral: \"]: '\"(230) into MethodInvocation(231) at 2", "Insert SimpleName: sb(233) into MethodInvocation(238) at 0", "Insert SimpleName: append(234) into MethodInvocation(238) at 1", "Insert MethodInvocation(237) into MethodInvocation(238) at 2", "Insert SimpleName: sb(240) into MethodInvocation(243) at 0", "Insert SimpleName: append(241) into MethodInvocation(243) at 1", "Insert StringLiteral: \"'\"(242) into MethodInvocation(243) at 2", "Insert SimpleName: dbg(211) into MethodInvocation(213) at 0", "Insert SimpleName: start(212) into MethodInvocation(213) at 1", "Insert SimpleName: dbg(223) into MethodInvocation(225) at 0", "Insert SimpleName: end(224) into MethodInvocation(225) at 1", "Insert SimpleName: dbg(235) into MethodInvocation(237) at 0", "Insert SimpleName: toString(236) into MethodInvocation(237) at 1", "Delete Block(133)"]}}, {"JexlScript_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 3", "operations": ["INS TextElement:  the source text to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: getSourceText to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: interface at 3", "INS SimpleType: String to MethodDeclaration at 1", "INS TextElement: Returns the source text of this expression. to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 4", "operations": ["INS MethodDeclaration to TypeDeclaration: interface at 4", "INS TextElement: Recreates the source text of this expression from the internal synactic tree. to TagElement at 0", "INS TagElement: @return to Javadoc at 1", "INS TextElement:  the source text to TagElement: @return at 0", "INS SimpleName: getParsedText to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to MethodDeclaration at 1"]}, {"root": "UPDATE from JexlExpression to String", "operations": ["UPD SimpleName: JexlExpression from JexlExpression to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: JexlExpression to SimpleType: String at 0"]}, {"root": "DEL SimpleType: JexlExpression", "operations": ["DEL SimpleType: JexlExpression"]}]}}, {"JexlScript_diff": {"operations": ["Insert MethodDeclaration(31) into TypeDeclaration: interface(191) at 3", "Insert MethodDeclaration(40) into TypeDeclaration: interface(191) at 4", "Insert Javadoc(27) into MethodDeclaration(31) at 0", "Insert SimpleType: String(29) into MethodDeclaration(31) at 1", "Insert SimpleName: getSourceText(30) into MethodDeclaration(31) at 2", "Insert Javadoc(36) into MethodDeclaration(40) at 0", "Insert SimpleType: String(38) into MethodDeclaration(40) at 1", "Insert SimpleName: getParsedText(39) into MethodDeclaration(40) at 2", "Insert TagElement(24) into Javadoc(27) at 0", "Insert TagElement: @return(26) into Javadoc(27) at 1", "Update SimpleName: JexlExpression(23) to String", "Move SimpleName: JexlExpression(23) into SimpleType: String(29) at 0", "Insert TagElement(33) into Javadoc(36) at 0", "Insert TagElement: @return(35) into Javadoc(36) at 1", "Insert SimpleName: String(37) into SimpleType: String(38) at 0", "Insert TextElement: Returns the source text of this expression.(23) into TagElement(24) at 0", "Insert TextElement:  the source text(25) into TagElement: @return(26) at 0", "Insert TextElement: Recreates the source text of this expression from the internal synactic tree.(32) into TagElement(33) at 0", "Insert TextElement:  the source text(34) into TagElement: @return(35) at 0", "Delete SimpleType: JexlExpression(24)"]}}, {"JxltEngine_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 7", "operations": ["INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: getVariables to MethodDeclaration at 2", "INS ParameterizedType: Set<List<String>> to MethodDeclaration at 1", "INS ParameterizedType: List<String> to ParameterizedType: Set<List<String>> at 1", "INS TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p> to TagElement at 2", "INS TextElement: Gets the list of variables accessed by this expression. to TagElement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleType: Set to ParameterizedType: Set<List<String>> at 0", "INS TagElement: @return to Javadoc at 1", "INS TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string) to TagElement: @return at 0", "INS TextElement: or the empty set if no variables are used to TagElement: @return at 1", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: interface at 7", "INS TextElement: <p>This method will visit all nodes of the sub-expressions and extract all variables whether they to TagElement at 1", "INS TagElement to Javadoc at 0"]}]}}, {"JxltEngine_diff": {"operations": ["Insert MethodDeclaration(456) into TypeDeclaration: interface(457) at 7", "Insert Javadoc(446) into MethodDeclaration(456) at 0", "Insert ParameterizedType: Set<List<String>>(454) into MethodDeclaration(456) at 1", "Insert SimpleName: getVariables(455) into MethodDeclaration(456) at 2", "Insert TagElement(442) into Javadoc(446) at 0", "Insert TagElement: @return(445) into Javadoc(446) at 1", "Insert SimpleType: Set(448) into ParameterizedType: Set<List<String>>(454) at 0", "Insert ParameterizedType: List<String>(453) into ParameterizedType: Set<List<String>>(454) at 1", "Insert TextElement: Gets the list of variables accessed by this expression.(439) into TagElement(442) at 0", "Insert TextElement: <p>This method will visit all nodes of the sub-expressions and extract all variables whether they(440) into TagElement(442) at 1", "Insert TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p>(441) into TagElement(442) at 2", "Insert TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string)(443) into TagElement: @return(445) at 0", "Insert TextElement: or the empty set if no variables are used(444) into TagElement: @return(445) at 1", "Insert SimpleName: Set(447) into SimpleType: Set(448) at 0", "Insert SimpleType: List(450) into ParameterizedType: List<String>(453) at 0", "Insert SimpleType: String(452) into ParameterizedType: List<String>(453) at 1", "Insert SimpleName: List(449) into SimpleType: List(450) at 0", "Insert SimpleName: String(451) into SimpleType: String(452) at 0"]}}, {"ArrayBuilder_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.commons.jexl3.internal.introspection.MethodKey to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: java.util.HashMap to ImportDeclaration at 0"]}, {"root": "UPDATE from java.lang.reflect.Field to java.util.Map", "operations": ["UPD QualifiedName: java.lang.reflect.Field from java.lang.reflect.Field to java.util.Map"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 4", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: The boxing types to primitive conversion map.  to TagElement at 0", "INS Modifier: static to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: PRIMITIVE_SIZE to VariableDeclarationFragment at 0", "INS NumberLiteral: 8 to VariableDeclarationFragment at 1", "INS PrimitiveType: int to FieldDeclaration at 4"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: Class to SimpleType: Class at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: Class to SimpleType: Class at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS ParameterizedType: Class<?> to ParameterizedType: Map<Class<?>,Class<?>> at 1", "INS SimpleName: BOXING_CLASSES to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: Map to ParameterizedType: Map<Class<?>,Class<?>> at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS ParameterizedType: Class<?> to ParameterizedType: Map<Class<?>,Class<?>> at 2", "INS ParameterizedType: Map<Class<?>,Class<?>> to FieldDeclaration at 3", "INS SimpleName: Map to SimpleType: Map at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS FieldDeclaration to TypeDeclaration: class at 5"]}, {"root": "INS Initializer to TypeDeclaration: class at 6", "operations": ["INS SimpleName: Byte to SimpleType: Byte at 0", "INS ParameterizedType: Class<?> to ParameterizedType: HashMap<Class<?>,Class<?>> at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Integer to TypeLiteral at 0", "INS SimpleName: PRIMITIVE_SIZE to ClassInstanceCreation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Double.TYPE to MethodInvocation at 3", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS SimpleType: Short to TypeLiteral at 0", "INS ParameterizedType: Class<?> to ParameterizedType: HashMap<Class<?>,Class<?>> at 2", "INS ExpressionStatement to Block at 8", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS Block to Initializer at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Float to SimpleType: Float at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: Double to SimpleType: Double at 0", "INS QualifiedName: Long.TYPE to MethodInvocation at 3", "INS SimpleType: Character to TypeLiteral at 0", "INS SimpleType: Double to TypeLiteral at 0", "INS QualifiedName: Integer.TYPE to MethodInvocation at 3", "INS ParameterizedType: HashMap<Class<?>,Class<?>> to ClassInstanceCreation at 0", "INS SimpleName: Short to SimpleType: Short at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Long to TypeLiteral at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS QualifiedName: Boolean.TYPE to MethodInvocation at 3", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Boolean to TypeLiteral at 0", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS QualifiedName: Character.TYPE to MethodInvocation at 3", "INS QualifiedName: Short.TYPE to MethodInvocation at 3", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: static to Initializer at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: HashMap to ParameterizedType: HashMap<Class<?>,Class<?>> at 0", "INS ExpressionStatement to Block at 2", "INS QualifiedName: Byte.TYPE to MethodInvocation at 3", "INS SimpleName: Long to SimpleType: Long at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS ExpressionStatement to Block at 4", "INS QualifiedName: Float.TYPE to MethodInvocation at 3", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleType: Byte to TypeLiteral at 0", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS Initializer to TypeDeclaration: class at 6", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: BOXING_CLASSES to Assignment: = at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleType: Float to TypeLiteral at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 7", "INS NullLiteral to InfixExpression: == at 1", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleName: BOXING_CLASSES to MethodInvocation at 0", "INS SimpleName: prim to VariableDeclarationFragment at 0", "INS SimpleName: unboxingClass to MethodDeclaration at 3", "INS SimpleName: prim to InfixExpression: == at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: get to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: parm to ConditionalExpression at 1", "INS SimpleName: parm to SingleVariableDeclaration at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: prim to ConditionalExpression at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: parm to MethodInvocation at 2", "INS ReturnStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ParameterizedType: Class<?> to MethodDeclaration at 2", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Class to SimpleType: Class at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: unboxing to VariableDeclarationFragment at 0", "INS Javadoc to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS TagElement to Javadoc at 0", "INS Modifier: private to FieldDeclaration at 1", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS TextElement: Whether we can try unboxing.  to TagElement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Class<?> to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: unboxing to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS BooleanLiteral: false to Assignment: = at 1"]}, {"root": "UPDATE from isNumber to unboxing", "operations": ["UPD SimpleName: isNumber from isNumber to unboxing"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from type to unboxingClass", "operations": ["UPD SimpleName: type from type to unboxingClass"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: type to MethodInvocation at 0", "MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "UPDATE from get to commonClass", "operations": ["UPD SimpleName: get from get to commonClass"]}, {"root": "DEL CastExpression", "operations": ["DEL NullLiteral", "DEL MethodInvocation", "DEL CastExpression"]}, {"root": "DEL Block", "operations": ["DEL CatchClause", "DEL Block", "DEL Block", "DEL StringLiteral: \"TYPE\"", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: type", "DEL SimpleName: commonClass", "DEL SimpleName: getField", "DEL SingleVariableDeclaration", "DEL Block", "DEL VariableDeclarationStatement", "DEL TryStatement", "DEL SimpleType: Field", "DEL SimpleName: Exception", "DEL SimpleName: Field", "DEL SimpleName: xany"]}]}}, {"ArrayBuilder_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(449) at 4", "Insert ImportDeclaration(7) into CompilationUnit(449) at 3", "Insert ImportDeclaration(9) into CompilationUnit(449) at 4", "Insert QualifiedName: org.apache.commons.jexl3.internal.introspection.MethodKey(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: java.util.HashMap(8) into ImportDeclaration(9) at 0", "Update QualifiedName: java.lang.reflect.Field(4) to java.util.Map", "Insert FieldDeclaration(29) into TypeDeclaration: class(448) at 4", "Insert FieldDeclaration(46) into TypeDeclaration: class(448) at 5", "Insert Initializer(129) into TypeDeclaration: class(448) at 6", "Insert MethodDeclaration(162) into TypeDeclaration: class(448) at 7", "Insert FieldDeclaration(192) into TypeDeclaration: class(448) at 10", "Insert Javadoc(21) into FieldDeclaration(29) at 0", "Insert Modifier: private(22) into FieldDeclaration(29) at 1", "Insert Modifier: static(23) into FieldDeclaration(29) at 2", "Insert Modifier: final(24) into FieldDeclaration(29) at 3", "Insert PrimitiveType: int(25) into FieldDeclaration(29) at 4", "Insert VariableDeclarationFragment(28) into FieldDeclaration(29) at 5", "Insert Modifier: private(30) into FieldDeclaration(46) at 0", "Insert Modifier: static(31) into FieldDeclaration(46) at 1", "Insert Modifier: final(32) into FieldDeclaration(46) at 2", "Insert ParameterizedType: Map<Class<?>,Class<?>>(43) into FieldDeclaration(46) at 3", "Insert VariableDeclarationFragment(45) into FieldDeclaration(46) at 4", "Insert Modifier: static(47) into Initializer(129) at 0", "Insert Block(128) into Initializer(129) at 1", "Insert Modifier: private(130) into MethodDeclaration(162) at 0", "Insert Modifier: static(131) into MethodDeclaration(162) at 1", "Insert ParameterizedType: Class<?>(135) into MethodDeclaration(162) at 2", "Insert SimpleName: unboxingClass(136) into MethodDeclaration(162) at 3", "Insert SingleVariableDeclaration(142) into MethodDeclaration(162) at 4", "Insert Block(161) into MethodDeclaration(162) at 5", "Insert Javadoc(186) into FieldDeclaration(192) at 0", "Insert Modifier: private(187) into FieldDeclaration(192) at 1", "Insert PrimitiveType: boolean(188) into FieldDeclaration(192) at 2", "Insert VariableDeclarationFragment(191) into FieldDeclaration(192) at 3", "Insert TagElement(20) into Javadoc(21) at 0", "Insert SimpleName: PRIMITIVE_SIZE(26) into VariableDeclarationFragment(28) at 0", "Insert NumberLiteral: 8(27) into VariableDeclarationFragment(28) at 1", "Insert SimpleType: Map(34) into ParameterizedType: Map<Class<?>,Class<?>>(43) at 0", "Insert ParameterizedType: Class<?>(38) into ParameterizedType: Map<Class<?>,Class<?>>(43) at 1", "Insert ParameterizedType: Class<?>(42) into ParameterizedType: Map<Class<?>,Class<?>>(43) at 2", "Insert SimpleName: BOXING_CLASSES(44) into VariableDeclarationFragment(45) at 0", "Insert ExpressionStatement(63) into Block(128) at 0", "Insert ExpressionStatement(71) into Block(128) at 1", "Insert ExpressionStatement(79) into Block(128) at 2", "Insert ExpressionStatement(87) into Block(128) at 3", "Insert ExpressionStatement(95) into Block(128) at 4", "Insert ExpressionStatement(103) into Block(128) at 5", "Insert ExpressionStatement(111) into Block(128) at 6", "Insert ExpressionStatement(119) into Block(128) at 7", "Insert ExpressionStatement(127) into Block(128) at 8", "Insert SimpleType: Class(133) into ParameterizedType: Class<?>(135) at 0", "Insert WildcardType: ?(134) into ParameterizedType: Class<?>(135) at 1", "Insert ParameterizedType: Class<?>(140) into SingleVariableDeclaration(142) at 0", "Insert SimpleName: parm(141) into SingleVariableDeclaration(142) at 1", "Insert VariableDeclarationStatement(153) into Block(161) at 0", "Insert ReturnStatement(160) into Block(161) at 1", "Insert TagElement(185) into Javadoc(186) at 0", "Insert SimpleName: unboxing(189) into VariableDeclarationFragment(191) at 0", "Insert BooleanLiteral: true(190) into VariableDeclarationFragment(191) at 1", "Insert TextElement: The boxing types to primitive conversion map. (19) into TagElement(20) at 0", "Insert SimpleName: Map(33) into SimpleType: Map(34) at 0", "Insert SimpleType: Class(36) into ParameterizedType: Class<?>(38) at 0", "Insert WildcardType: ?(37) into ParameterizedType: Class<?>(38) at 1", "Insert SimpleType: Class(40) into ParameterizedType: Class<?>(42) at 0", "Insert WildcardType: ?(41) into ParameterizedType: Class<?>(42) at 1", "Insert Assignment: =(62) into ExpressionStatement(63) at 0", "Insert MethodInvocation(70) into ExpressionStatement(71) at 0", "Insert MethodInvocation(78) into ExpressionStatement(79) at 0", "Insert MethodInvocation(86) into ExpressionStatement(87) at 0", "Insert MethodInvocation(94) into ExpressionStatement(95) at 0", "Insert MethodInvocation(102) into ExpressionStatement(103) at 0", "Insert MethodInvocation(110) into ExpressionStatement(111) at 0", "Insert MethodInvocation(118) into ExpressionStatement(119) at 0", "Insert MethodInvocation(126) into ExpressionStatement(127) at 0", "Insert SimpleName: Class(132) into SimpleType: Class(133) at 0", "Insert SimpleType: Class(138) into ParameterizedType: Class<?>(140) at 0", "Insert WildcardType: ?(139) into ParameterizedType: Class<?>(140) at 1", "Move ParameterizedType: Class<?>(243) into VariableDeclarationStatement(153) at 0", "Insert VariableDeclarationFragment(152) into VariableDeclarationStatement(153) at 1", "Insert ConditionalExpression(159) into ReturnStatement(160) at 0", "Insert TextElement: Whether we can try unboxing. (184) into TagElement(185) at 0", "Insert SimpleName: Class(35) into SimpleType: Class(36) at 0", "Insert SimpleName: Class(39) into SimpleType: Class(40) at 0", "Insert SimpleName: BOXING_CLASSES(48) into Assignment: =(62) at 0", "Insert ClassInstanceCreation(61) into Assignment: =(62) at 1", "Insert SimpleName: BOXING_CLASSES(64) into MethodInvocation(70) at 0", "Insert SimpleName: put(65) into MethodInvocation(70) at 1", "Insert TypeLiteral(68) into MethodInvocation(70) at 2", "Insert QualifiedName: Boolean.TYPE(69) into MethodInvocation(70) at 3", "Insert SimpleName: BOXING_CLASSES(72) into MethodInvocation(78) at 0", "Insert SimpleName: put(73) into MethodInvocation(78) at 1", "Insert TypeLiteral(76) into MethodInvocation(78) at 2", "Insert QualifiedName: Byte.TYPE(77) into MethodInvocation(78) at 3", "Insert SimpleName: BOXING_CLASSES(80) into MethodInvocation(86) at 0", "Insert SimpleName: put(81) into MethodInvocation(86) at 1", "Insert TypeLiteral(84) into MethodInvocation(86) at 2", "Insert QualifiedName: Character.TYPE(85) into MethodInvocation(86) at 3", "Insert SimpleName: BOXING_CLASSES(88) into MethodInvocation(94) at 0", "Insert SimpleName: put(89) into MethodInvocation(94) at 1", "Insert TypeLiteral(92) into MethodInvocation(94) at 2", "Insert QualifiedName: Double.TYPE(93) into MethodInvocation(94) at 3", "Insert SimpleName: BOXING_CLASSES(96) into MethodInvocation(102) at 0", "Insert SimpleName: put(97) into MethodInvocation(102) at 1", "Insert TypeLiteral(100) into MethodInvocation(102) at 2", "Insert QualifiedName: Float.TYPE(101) into MethodInvocation(102) at 3", "Insert SimpleName: BOXING_CLASSES(104) into MethodInvocation(110) at 0", "Insert SimpleName: put(105) into MethodInvocation(110) at 1", "Insert TypeLiteral(108) into MethodInvocation(110) at 2", "Insert QualifiedName: Integer.TYPE(109) into MethodInvocation(110) at 3", "Insert SimpleName: BOXING_CLASSES(112) into MethodInvocation(118) at 0", "Insert SimpleName: put(113) into MethodInvocation(118) at 1", "Insert TypeLiteral(116) into MethodInvocation(118) at 2", "Insert QualifiedName: Long.TYPE(117) into MethodInvocation(118) at 3", "Insert SimpleName: BOXING_CLASSES(120) into MethodInvocation(126) at 0", "Insert SimpleName: put(121) into MethodInvocation(126) at 1", "Insert TypeLiteral(124) into MethodInvocation(126) at 2", "Insert QualifiedName: Short.TYPE(125) into MethodInvocation(126) at 3", "Insert SimpleName: Class(137) into SimpleType: Class(138) at 0", "Insert SimpleName: prim(147) into VariableDeclarationFragment(152) at 0", "Insert MethodInvocation(151) into VariableDeclarationFragment(152) at 1", "Insert InfixExpression: ==(156) into ConditionalExpression(159) at 0", "Insert SimpleName: parm(157) into ConditionalExpression(159) at 1", "Insert SimpleName: prim(158) into ConditionalExpression(159) at 2", "Insert ParameterizedType: HashMap<Class<?>,Class<?>>(59) into ClassInstanceCreation(61) at 0", "Insert SimpleName: PRIMITIVE_SIZE(60) into ClassInstanceCreation(61) at 1", "Insert SimpleType: Boolean(67) into TypeLiteral(68) at 0", "Insert SimpleType: Byte(75) into TypeLiteral(76) at 0", "Insert SimpleType: Character(83) into TypeLiteral(84) at 0", "Insert SimpleType: Double(91) into TypeLiteral(92) at 0", "Insert SimpleType: Float(99) into TypeLiteral(100) at 0", "Insert SimpleType: Integer(107) into TypeLiteral(108) at 0", "Insert SimpleType: Long(115) into TypeLiteral(116) at 0", "Insert SimpleType: Short(123) into TypeLiteral(124) at 0", "Insert SimpleName: BOXING_CLASSES(148) into MethodInvocation(151) at 0", "Insert SimpleName: get(149) into MethodInvocation(151) at 1", "Insert SimpleName: parm(150) into MethodInvocation(151) at 2", "Insert SimpleName: prim(154) into InfixExpression: ==(156) at 0", "Insert NullLiteral(155) into InfixExpression: ==(156) at 1", "Insert SimpleType: HashMap(50) into ParameterizedType: HashMap<Class<?>,Class<?>>(59) at 0", "Insert ParameterizedType: Class<?>(54) into ParameterizedType: HashMap<Class<?>,Class<?>>(59) at 1", "Insert ParameterizedType: Class<?>(58) into ParameterizedType: HashMap<Class<?>,Class<?>>(59) at 2", "Insert SimpleName: Boolean(66) into SimpleType: Boolean(67) at 0", "Insert SimpleName: Byte(74) into SimpleType: Byte(75) at 0", "Insert SimpleName: Character(82) into SimpleType: Character(83) at 0", "Insert SimpleName: Double(90) into SimpleType: Double(91) at 0", "Insert SimpleName: Float(98) into SimpleType: Float(99) at 0", "Insert SimpleName: Integer(106) into SimpleType: Integer(107) at 0", "Insert SimpleName: Long(114) into SimpleType: Long(115) at 0", "Insert SimpleName: Short(122) into SimpleType: Short(123) at 0", "Insert ExpressionStatement(262) into Block(263) at 1", "Insert SimpleName: HashMap(49) into SimpleType: HashMap(50) at 0", "Insert SimpleType: Class(52) into ParameterizedType: Class<?>(54) at 0", "Insert WildcardType: ?(53) into ParameterizedType: Class<?>(54) at 1", "Insert SimpleType: Class(56) into ParameterizedType: Class<?>(58) at 0", "Insert WildcardType: ?(57) into ParameterizedType: Class<?>(58) at 1", "Insert Assignment: =(261) into ExpressionStatement(262) at 0", "Update SimpleName: isNumber(228) to unboxing", "Insert Block(396) into IfStatement(397) at 1", "Insert SimpleName: Class(51) into SimpleType: Class(52) at 0", "Insert SimpleName: Class(55) into SimpleType: Class(56) at 0", "Insert SimpleName: unboxing(259) into Assignment: =(261) at 0", "Insert BooleanLiteral: false(260) into Assignment: =(261) at 1", "Move ExpressionStatement(250) into Block(396) at 0", "Insert MethodInvocation(393) into Assignment: =(394) at 1", "Update SimpleName: type(244) to unboxingClass", "Move SimpleName: type(244) into MethodInvocation(393) at 0", "Update SimpleName: get(245) to commonClass", "Move SimpleName: get(245) into MethodInvocation(393) at 1", "Delete NullLiteral(246)", "Delete MethodInvocation(247)", "Delete CastExpression(248)", "Delete Modifier: final(229)", "Delete SimpleName: Field(230)", "Delete SimpleType: Field(231)", "Delete SimpleName: type(232)", "Delete SimpleName: commonClass(233)", "Delete SimpleName: getField(234)", "Delete StringLiteral: \"TYPE\"(235)", "Delete MethodInvocation(236)", "Delete VariableDeclarationFragment(237)", "Delete VariableDeclarationStatement(238)", "Delete Block(251)", "Delete SimpleName: Exception(252)", "Delete SimpleType: Exception(253)", "Delete SimpleName: xany(254)", "Delete SingleVariableDeclaration(255)", "Delete Block(256)", "Delete CatchClause(257)", "Delete TryStatement(258)", "Delete Block(259)"]}}, {"Closure_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: callFrame to VariableDeclarationFragment at 0", "INS SimpleType: Scope.Frame to VariableDeclarationStatement at 0", "INS QualifiedName: Scope.Frame to SimpleType: Scope.Frame at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: callFrame to Assignment: = at 0"]}, {"root": "UPDATE from frame to callFrame", "operations": ["UPD SimpleName: frame from frame to callFrame"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}]}}, {"Closure_diff": {"operations": ["Insert VariableDeclarationStatement(168) into Block(213) at 0", "Insert SimpleType: Scope.Frame(164) into VariableDeclarationStatement(168) at 0", "Insert VariableDeclarationFragment(167) into VariableDeclarationStatement(168) at 1", "Insert QualifiedName: Scope.Frame(163) into SimpleType: Scope.Frame(164) at 0", "Insert SimpleName: callFrame(165) into VariableDeclarationFragment(167) at 0", "Insert NullLiteral(166) into VariableDeclarationFragment(167) at 1", "Insert Assignment: =(177) into ExpressionStatement(178) at 0", "Update SimpleName: frame(179) to callFrame", "Insert SimpleName: callFrame(172) into Assignment: =(177) at 0", "Move MethodInvocation(169) into Assignment: =(177) at 1"]}}, {"Debugger_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 39", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 41", "MOV ImportDeclaration to CompilationUnit at 49"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: org.apache.commons.jexl3.JexlInfo to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS SimpleType: JexlInfo.Detail to TypeDeclaration: class at 5", "operations": ["INS SimpleType: JexlInfo.Detail to TypeDeclaration: class at 5", "INS QualifiedName: JexlInfo.Detail to SimpleType: JexlInfo.Detail at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0"]}]}}, {"Debugger_diff": {"operations": ["Move ImportDeclaration(79) into CompilationUnit(3305) at 18", "Move ImportDeclaration(81) into CompilationUnit(3305) at 49", "Move ImportDeclaration(123) into CompilationUnit(3305) at 39", "Move ImportDeclaration(125) into CompilationUnit(3305) at 41", "Insert ImportDeclaration(5) into CompilationUnit(3305) at 2", "Insert QualifiedName: org.apache.commons.jexl3.JexlInfo(4) into ImportDeclaration(5) at 0", "Insert SimpleType: JexlInfo.Detail(143) into TypeDeclaration: class(3304) at 5", "Insert QualifiedName: JexlInfo.Detail(142) into SimpleType: JexlInfo.Detail(143) at 0", "Insert MarkerAnnotation(445) into MethodDeclaration(452) at 1", "Insert MarkerAnnotation(457) into MethodDeclaration(464) at 1", "Insert SimpleName: Override(444) into MarkerAnnotation(445) at 0", "Insert SimpleName: Override(456) into MarkerAnnotation(457) at 0"]}}, {"Engine_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.apache.log4j.LogManager", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.apache.log4j.LogManager"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS TagElement: @return to Javadoc at 2", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS TagElement to Javadoc at 0", "INS SimpleType: JexlContext.ThreadLocal to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: local to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement:  the previous thread local context to TagElement: @return at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: CONTEXT to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleType: JexlContext.ThreadLocal to VariableDeclarationStatement at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS SimpleName: set to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: putThreadLocal to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: tls to TagElement: @param at 0", "INS SimpleName: CONTEXT to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS TextElement:  the context or null to TagElement: @param at 1", "INS SimpleName: local to ReturnStatement at 0", "INS TextElement: Swaps the current thread local context. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 28", "INS SimpleName: tls to SingleVariableDeclaration at 1", "INS SimpleType: JexlContext.ThreadLocal to SingleVariableDeclaration at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS SimpleName: tls to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS Modifier: protected to MethodDeclaration at 1"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: noScript to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: expression to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8"]}, {"root": "INS TagElement: @param to Javadoc at 5", "operations": ["INS SimpleName: expression to TagElement: @param at 0", "INS TextElement:  whether the parser allows scripts or only expressions to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 5"]}, {"root": "UPDATE from expr to src", "operations": ["UPD SimpleName: expr from expr to src", "UPD SimpleName: expr from expr to src", "UPD SimpleName: expr from expr to src", "UPD SimpleName: expr from expr to src", "UPD SimpleName: expr from expr to src", "UPD SimpleName: expr from expr to src"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ASTJexlScript to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ASTJexlScript to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: noScript to ClassInstanceCreation at 2", "operations": ["INS SimpleName: noScript to ClassInstanceCreation at 2"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ASTFunctionNode to InstanceofExpression at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ASTMethodNode to SimpleType: ASTMethodNode at 0", "INS SimpleName: parent to InstanceofExpression at 0", "INS SimpleName: ASTFunctionNode to SimpleType: ASTFunctionNode at 0", "INS SimpleType: JexlNode to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: node to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: parent to VariableDeclarationFragment at 0", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleType: ASTMethodNode to InstanceofExpression at 1", "INS SimpleName: JexlNode to SimpleType: JexlNode at 0", "INS InstanceofExpression to InfixExpression: || at 0", "INS SimpleName: jjtGetParent to MethodInvocation at 1", "INS SimpleName: parent to InstanceofExpression at 0"]}, {"root": "UPDATE from LogFactory to LogManager", "operations": ["UPD SimpleName: LogFactory from LogFactory to LogManager", "UPD SimpleName: LogFactory from LogFactory to LogManager", "UPD SimpleName: LogFactory from LogFactory to LogManager"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger", "UPD SimpleName: getLog from getLog to getLogger", "UPD SimpleName: getLog from getLog to getLogger"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 5", "operations": ["INS BooleanLiteral: false to MethodInvocation at 5"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 5", "operations": ["INS BooleanLiteral: true to MethodInvocation at 5"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 5", "operations": ["INS BooleanLiteral: true to MethodInvocation at 5"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 5", "operations": ["INS BooleanLiteral: true to MethodInvocation at 5"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: collect to MethodInvocation at 1", "INS SimpleName: collector to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS NullLiteral to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1"]}, {"root": "INS SimpleName: expression to MethodInvocation at 6", "operations": ["INS SimpleName: expression to MethodInvocation at 6"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: tree", "DEL StringLiteral: \" to the first expression from the supplied script: \\\"\"", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: warn", "DEL SimpleName: expression", "DEL SimpleName: logger", "DEL InfixExpression: +", "DEL SimpleName: toExpression", "DEL ExpressionStatement", "DEL StringLiteral: \"\\\" \"", "DEL StringLiteral: \"The JEXL Expression created will be a reference\"", "DEL IfStatement", "DEL Block"]}, {"root": "DEL StringLiteral: \";\"", "operations": ["DEL StringLiteral: \";\""]}, {"root": "DEL StringLiteral: \";\"", "operations": ["DEL StringLiteral: \";\""]}]}}, {"Engine_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(42) to org.apache.log4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(44) to org.apache.log4j.LogManager", "Insert MethodDeclaration(685) into TypeDeclaration: class(2671) at 28", "Update SimpleType: Log(144) to Logger", "Insert SingleVariableDeclaration(632) into MethodDeclaration(652) at 4", "Insert Javadoc(660) into MethodDeclaration(685) at 0", "Insert Modifier: protected(661) into MethodDeclaration(685) at 1", "Insert SimpleType: JexlContext.ThreadLocal(663) into MethodDeclaration(685) at 2", "Insert SimpleName: putThreadLocal(664) into MethodDeclaration(685) at 3", "Insert SingleVariableDeclaration(668) into MethodDeclaration(685) at 4", "Insert Block(684) into MethodDeclaration(685) at 5", "Insert SingleVariableDeclaration(2493) into MethodDeclaration(2584) at 8", "Update SimpleName: Log(143) to Logger", "Update SimpleType: Log(520) to Logger", "Insert PrimitiveType: boolean(630) into SingleVariableDeclaration(632) at 0", "Insert SimpleName: noScript(631) into SingleVariableDeclaration(632) at 1", "Insert TagElement(654) into Javadoc(660) at 0", "Insert TagElement: @param(657) into Javadoc(660) at 1", "Insert TagElement: @return(659) into Javadoc(660) at 2", "Insert QualifiedName: JexlContext.ThreadLocal(662) into SimpleType: JexlContext.ThreadLocal(663) at 0", "Insert SimpleType: JexlContext.ThreadLocal(666) into SingleVariableDeclaration(668) at 0", "Insert SimpleName: tls(667) into SingleVariableDeclaration(668) at 1", "Insert VariableDeclarationStatement(676) into Block(684) at 0", "Insert ExpressionStatement(681) into Block(684) at 1", "Insert ReturnStatement(683) into Block(684) at 2", "Insert TagElement: @param(2465) into Javadoc(2471) at 5", "Update SimpleName: expr(2430) to src", "Insert PrimitiveType: boolean(2491) into SingleVariableDeclaration(2493) at 0", "Insert SimpleName: expression(2492) into SingleVariableDeclaration(2493) at 1", "Update SimpleName: Log(519) to Logger", "Insert TextElement: Swaps the current thread local context.(653) into TagElement(654) at 0", "Insert SimpleName: tls(655) into TagElement: @param(657) at 0", "Insert TextElement:  the context or null(656) into TagElement: @param(657) at 1", "Insert TextElement:  the previous thread local context(658) into TagElement: @return(659) at 0", "Insert QualifiedName: JexlContext.ThreadLocal(665) into SimpleType: JexlContext.ThreadLocal(666) at 0", "Insert SimpleType: JexlContext.ThreadLocal(670) into VariableDeclarationStatement(676) at 0", "Insert VariableDeclarationFragment(675) into VariableDeclarationStatement(676) at 1", "Insert MethodInvocation(680) into ExpressionStatement(681) at 0", "Insert SimpleName: local(682) into ReturnStatement(683) at 0", "Move SimpleType: ASTJexlScript(1175) into VariableDeclarationStatement(1158) at 0", "Move SimpleType: ASTJexlScript(1111) into VariableDeclarationStatement(1223) at 0", "Update SimpleName: expr(2405) to src", "Insert SimpleName: expression(2463) into TagElement: @param(2465) at 0", "Insert TextElement:  whether the parser allows scripts or only expressions(2464) into TagElement: @param(2465) at 1", "Insert SimpleName: noScript(645) into ClassInstanceCreation(649) at 2", "Insert QualifiedName: JexlContext.ThreadLocal(669) into SimpleType: JexlContext.ThreadLocal(670) at 0", "Insert SimpleName: local(671) into VariableDeclarationFragment(675) at 0", "Insert MethodInvocation(674) into VariableDeclarationFragment(675) at 1", "Insert SimpleName: CONTEXT(677) into MethodInvocation(680) at 0", "Insert SimpleName: set(678) into MethodInvocation(680) at 1", "Insert SimpleName: tls(679) into MethodInvocation(680) at 2", "Insert Block(2269) into IfStatement(2393) at 1", "Update SimpleName: LogFactory(98) to LogManager", "Update SimpleName: getLog(99) to getLogger", "Insert SimpleName: CONTEXT(672) into MethodInvocation(674) at 0", "Insert SimpleName: get(673) into MethodInvocation(674) at 1", "Insert BooleanLiteral: false(1155) into MethodInvocation(1156) at 5", "Insert BooleanLiteral: true(1220) into MethodInvocation(1221) at 5", "Insert VariableDeclarationStatement(2235) into Block(2269) at 0", "Insert IfStatement(2252) into Block(2269) at 1", "Move IfStatement(2219) into Block(2269) at 2", "Update SimpleName: LogFactory(357) to LogManager", "Update SimpleName: getLog(358) to getLogger", "Update SimpleName: LogFactory(528) to LogManager", "Update SimpleName: getLog(529) to getLogger", "Insert SimpleType: JexlNode(2229) into VariableDeclarationStatement(2235) at 0", "Insert VariableDeclarationFragment(2234) into VariableDeclarationStatement(2235) at 1", "Insert InfixExpression: ||(2244) into IfStatement(2252) at 0", "Move Block(2220) into IfStatement(2252) at 1", "Insert BooleanLiteral: true(1337) into MethodInvocation(1338) at 5", "Insert BooleanLiteral: true(1520) into MethodInvocation(1521) at 5", "Insert SimpleName: JexlNode(2228) into SimpleType: JexlNode(2229) at 0", "Insert SimpleName: parent(2230) into VariableDeclarationFragment(2234) at 0", "Insert MethodInvocation(2233) into VariableDeclarationFragment(2234) at 1", "Insert InstanceofExpression(2239) into InfixExpression: ||(2244) at 0", "Insert InstanceofExpression(2243) into InfixExpression: ||(2244) at 1", "Insert ExpressionStatement(2249) into Block(2251) at 0", "Insert ReturnStatement(2250) into Block(2251) at 1", "Update SimpleName: expr(2442) to src", "Update SimpleName: expr(2508) to src", "Insert SimpleName: expression(2566) into MethodInvocation(2567) at 6", "Insert SimpleName: node(2231) into MethodInvocation(2233) at 0", "Insert SimpleName: jjtGetParent(2232) into MethodInvocation(2233) at 1", "Insert SimpleName: parent(2236) into InstanceofExpression(2239) at 0", "Insert SimpleType: ASTMethodNode(2238) into InstanceofExpression(2239) at 1", "Insert SimpleName: parent(2240) into InstanceofExpression(2243) at 0", "Insert SimpleType: ASTFunctionNode(2242) into InstanceofExpression(2243) at 1", "Insert MethodInvocation(2248) into ExpressionStatement(2249) at 0", "Update SimpleName: expr(2517) to src", "Insert SimpleName: ASTMethodNode(2237) into SimpleType: ASTMethodNode(2238) at 0", "Insert SimpleName: ASTFunctionNode(2241) into SimpleType: ASTFunctionNode(2242) at 0", "Insert SimpleName: collector(2245) into MethodInvocation(2248) at 0", "Insert SimpleName: collect(2246) into MethodInvocation(2248) at 1", "Insert NullLiteral(2247) into MethodInvocation(2248) at 2", "Update SimpleName: expr(2463) to src", "Delete SimpleName: tree(1185)", "Delete SimpleName: toExpression(1186)", "Delete MethodInvocation(1187)", "Delete SimpleName: logger(1188)", "Delete SimpleName: warn(1189)", "Delete StringLiteral: \"The JEXL Expression created will be a reference\"(1190)", "Delete StringLiteral: \" to the first expression from the supplied script: \\\"\"(1191)", "Delete InfixExpression: +(1192)", "Delete SimpleName: expression(1193)", "Delete StringLiteral: \"\\\" \"(1194)", "Delete InfixExpression: +(1195)", "Delete MethodInvocation(1196)", "Delete ExpressionStatement(1197)", "Delete Block(1198)", "Delete IfStatement(1199)", "Delete StringLiteral: \";\"(1279)", "Delete StringLiteral: \";\"(1461)"]}}, {"Interpreter_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 21", "operations": ["INS Modifier: static to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS FieldDeclaration to TypeDeclaration: class at 21", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: AUTOCLOSEABLE to VariableDeclarationFragment at 0", "INS ParameterizedType: Class<?> to FieldDeclaration at 4", "INS Modifier: private to FieldDeclaration at 1", "INS TextElement: Java7 AutoCloseable interface defined?.  to TagElement at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS Modifier: final to FieldDeclaration at 3", "INS Javadoc to FieldDeclaration at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0"]}, {"root": "INS Initializer to TypeDeclaration: class at 22", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS Block to TryStatement at 0", "INS SimpleName: c to VariableDeclarationFragment at 0", "INS SimpleType: ClassNotFoundException to SingleVariableDeclaration at 0", "INS ParameterizedType: Class<?> to VariableDeclarationStatement at 0", "INS SimpleName: Class to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS Block to Initializer at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: c to Assignment: = at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS StringLiteral: \"java.lang.AutoCloseable\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: xclass to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: static to Initializer at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: c to Assignment: = at 0", "INS SimpleName: forName to MethodInvocation at 1", "INS Initializer to TypeDeclaration: class at 22", "INS CatchClause to TryStatement at 1", "INS SimpleName: AUTOCLOSEABLE to Assignment: = at 0", "INS TryStatement to Block at 1", "INS Block to CatchClause at 1", "INS SimpleName: c to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ClassNotFoundException to SimpleType: ClassNotFoundException at 0", "INS NullLiteral to Assignment: = at 1"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: local to Assignment: = at 0", "INS SimpleName: context to InstanceofExpression at 0", "INS EnhancedForStatement to Block at 0", "INS SimpleName: AUTOCLOSEABLE to InfixExpression: != at 0", "INS Block to EnhancedForStatement at 2", "INS Block to TryStatement at 3", "INS SimpleName: functor to SingleVariableDeclaration at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS TryStatement to Block at 1", "INS SimpleName: functor to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS CastExpression to MethodInvocation at 2", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleType: JexlContext.ThreadLocal to CastExpression at 0", "INS SimpleName: jexl to MethodInvocation at 0", "INS SimpleName: context to CastExpression at 1", "INS SimpleType: JexlContext.ThreadLocal to VariableDeclarationStatement at 0", "INS SimpleName: jexl to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: local to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: putThreadLocal to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS MethodInvocation to Assignment: = at 1", "INS Block to MethodDeclaration at 5", "INS InfixExpression: != to InfixExpression: && at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleType: JexlContext.ThreadLocal to InstanceofExpression at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: AUTOCLOSEABLE to MethodInvocation at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS NullLiteral to InfixExpression: != at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: putThreadLocal to MethodInvocation at 1", "INS SimpleName: values to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: JexlContext.ThreadLocal to SimpleType: JexlContext.ThreadLocal at 0", "INS SimpleName: context to InstanceofExpression at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS IfStatement to Block at 2", "INS SimpleName: functors to InfixExpression: != at 0", "INS SimpleName: functors to MethodInvocation at 0", "INS SimpleName: functor to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS InstanceofExpression to IfStatement at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleType: JexlContext.ThreadLocal to InstanceofExpression at 1", "INS Block to IfStatement at 1", "INS SimpleName: local to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleType: Object to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: functor to VariableDeclarationFragment at 0", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS ParenthesizedExpression to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleType: JexlContext.NamespaceFunctor to CastExpression at 0", "INS QualifiedName: JexlContext.NamespaceFunctor to SimpleType: JexlContext.NamespaceFunctor at 0", "INS IfStatement to Block at 5", "INS ExpressionStatement to Block at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleType: JexlContext.NamespaceFunctor to InstanceofExpression at 1", "INS SimpleName: namespace to InstanceofExpression at 0", "INS QualifiedName: JexlContext.NamespaceFunctor to SimpleType: JexlContext.NamespaceFunctor at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: createFunctor to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: context to MethodInvocation at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: functor to Assignment: = at 0", "INS SimpleName: namespace to CastExpression at 1"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS IfStatement to Block at 6", "INS SimpleName: functor to ReturnStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: functor to MethodInvocation at 3", "INS SimpleName: functor to InfixExpression: != at 0", "INS ExpressionStatement to Block at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 2", "INS SimpleName: prefix to MethodInvocation at 2", "INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: functors to MethodInvocation at 0", "INS ReturnStatement to Block at 2"]}, {"root": "INS TextElement: Interpret the given script/expression. to TagElement at 0", "operations": ["INS TextElement: Interpret the given script/expression. to TagElement at 0"]}, {"root": "UPDATE from Interpret the given script/expression. <p> If the underlying JEXL engine is silent, errors will be logged through to <p> If the underlying JEXL engine is silent, errors will be logged through", "operations": ["UPD TextElement: Interpret the given script/expression. <p> If the underlying JEXL engine is silent, errors will be logged through from Interpret the given script/expression. <p> If the underlying JEXL engine is silent, errors will be logged through to <p> If the underlying JEXL engine is silent, errors will be logged through"]}, {"root": "UPDATE from its logger as info. </p> to its logger as warning.", "operations": ["UPD TextElement: its logger as info. </p> from its logger as info. </p> to its logger as warning."]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 2", "MOV CatchClause to TryStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0", "MOV IfStatement to IfStatement at 2"]}, {"root": "UPDATE from   the node to      the node", "operations": ["UPD TextElement:   the node from   the node to      the node", "UPD TextElement:       the node from       the node to      the node"]}, {"root": "UPDATE from     the calling operator, $= or $! to  the calling operator, $= or $!", "operations": ["UPD TextElement:     the calling operator, $= or $! from     the calling operator, $= or $! to  the calling operator, $= or $!"]}, {"root": "UPDATE from       the left operand to      the left operand", "operations": ["UPD TextElement:       the left operand from       the left operand to      the left operand", "UPD TextElement:   the left operand from   the left operand to      the left operand"]}, {"root": "UPDATE from  the right operand to     the right operand", "operations": ["UPD TextElement:  the right operand from  the right operand to     the right operand", "UPD TextElement:      the right operand from      the right operand to     the right operand"]}, {"root": "UPDATE from   the calling operator, ^= or ^! to  the calling operator, ^= or ^!", "operations": ["UPD TextElement:   the calling operator, ^= or ^! from   the calling operator, ^= or ^! to  the calling operator, ^= or ^!"]}, {"root": "UPDATE from  true     if left ends with right, false otherwise to  true if left ends with right, false otherwise", "operations": ["UPD TextElement:  true     if left ends with right, false otherwise from  true     if left ends with right, false otherwise to  true if left ends with right, false otherwise"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: isTopLevel to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleType: ASTJexlLambda to CastExpression at 0", "INS InfixExpression: && to IfStatement at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: node to CastExpression at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: ASTJexlLambda to SimpleType: ASTJexlLambda at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InstanceofExpression to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 0"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS SimpleName: logger to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: xclose to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to CatchClause at 1", "INS SimpleName: xclose to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS CatchClause to TryStatement at 1", "INS SimpleName: xclose to SingleVariableDeclaration at 1", "INS SimpleName: getCause to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: warn to MethodInvocation at 1", "INS SimpleName: getMessage to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0"]}, {"root": "UPDATE from namespace to functor", "operations": ["UPD SimpleName: namespace from namespace to functor"]}, {"root": "INS BooleanLiteral: true to ReturnStatement at 0", "operations": ["INS BooleanLiteral: true to ReturnStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: jexl to MethodInvocation at 0", "INS SimpleName: EMPTY_PARAMS to MethodInvocation at 4", "INS SimpleName: functor to MethodInvocation at 2", "INS StringLiteral: \"close\" to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: invokeMethod to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: prefix", "DEL MethodInvocation", "DEL SimpleName: put", "DEL SimpleName: namespace", "DEL SimpleName: functors", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: right", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleType: Set", "DEL SimpleName: left", "DEL WildcardType: ?", "DEL SimpleName: right", "DEL ParameterizedType: Set<?>", "DEL ParenthesizedExpression", "DEL SimpleName: contains", "DEL IfStatement", "DEL Block", "DEL InstanceofExpression", "DEL ParameterizedType: Set<?>", "DEL SimpleName: Set", "DEL SimpleType: Set", "DEL CastExpression", "DEL ReturnStatement", "DEL SimpleName: Set"]}, {"root": "DEL QualifiedName: Boolean.TRUE", "operations": ["DEL QualifiedName: Boolean.TRUE"]}, {"root": "DEL IfStatement", "operations": ["DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: symbol", "DEL Block", "DEL InfixExpression: <"]}]}}, {"Interpreter_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(140) to org.apache.log4j.Logger", "Insert FieldDeclaration(713) into TypeDeclaration: class(7702) at 21", "Insert Initializer(746) into TypeDeclaration: class(7702) at 22", "Update SimpleType: Log(181) to Logger", "Insert Block(699) into MethodDeclaration(700) at 5", "Insert Javadoc(703) into FieldDeclaration(713) at 0", "Insert Modifier: private(704) into FieldDeclaration(713) at 1", "Insert Modifier: static(705) into FieldDeclaration(713) at 2", "Insert Modifier: final(706) into FieldDeclaration(713) at 3", "Insert ParameterizedType: Class<?>(710) into FieldDeclaration(713) at 4", "Insert VariableDeclarationFragment(712) into FieldDeclaration(713) at 5", "Insert Modifier: static(714) into Initializer(746) at 0", "Insert Block(745) into Initializer(746) at 1", "Update SimpleName: Log(180) to Logger", "Insert VariableDeclarationStatement(562) into Block(699) at 0", "Insert TryStatement(698) into Block(699) at 1", "Insert TagElement(702) into Javadoc(703) at 0", "Insert SimpleType: Class(708) into ParameterizedType: Class<?>(710) at 0", "Insert WildcardType: ?(709) into ParameterizedType: Class<?>(710) at 1", "Insert SimpleName: AUTOCLOSEABLE(711) into VariableDeclarationFragment(712) at 0", "Insert VariableDeclarationStatement(721) into Block(745) at 0", "Insert TryStatement(740) into Block(745) at 1", "Insert ExpressionStatement(744) into Block(745) at 2", "Insert VariableDeclarationStatement(1007) into Block(1119) at 4", "Insert IfStatement(1086) into Block(1119) at 5", "Insert IfStatement(1118) into Block(1119) at 6", "Insert TextElement: Interpret the given script/expression.(536) into TagElement(539) at 0", "Update TextElement: Interpret the given script/expression. <p> If the underlying JEXL engine is silent, errors will be logged through(538) to <p> If the underlying JEXL engine is silent, errors will be logged through", "Update TextElement: its logger as info. </p>(539) to its logger as warning.", "Insert SimpleType: JexlContext.ThreadLocal(558) into VariableDeclarationStatement(562) at 0", "Insert VariableDeclarationFragment(561) into VariableDeclarationStatement(562) at 1", "Insert Block(585) into TryStatement(698) at 0", "Move CatchClause(580) into TryStatement(698) at 1", "Move CatchClause(605) into TryStatement(698) at 2", "Insert Block(697) into TryStatement(698) at 3", "Insert TextElement: Java7 AutoCloseable interface defined?. (701) into TagElement(702) at 0", "Insert SimpleName: Class(707) into SimpleType: Class(708) at 0", "Insert ParameterizedType: Class<?>(718) into VariableDeclarationStatement(721) at 0", "Insert VariableDeclarationFragment(720) into VariableDeclarationStatement(721) at 1", "Insert Block(729) into TryStatement(740) at 0", "Insert CatchClause(739) into TryStatement(740) at 1", "Insert Assignment: =(743) into ExpressionStatement(744) at 0", "Insert SimpleType: Object(1003) into VariableDeclarationStatement(1007) at 0", "Insert VariableDeclarationFragment(1006) into VariableDeclarationStatement(1007) at 1", "Insert InstanceofExpression(1011) into IfStatement(1086) at 0", "Insert Block(1023) into IfStatement(1086) at 1", "Move IfStatement(952) into IfStatement(1086) at 2", "Insert InfixExpression: !=(1089) into IfStatement(1118) at 0", "Insert Block(1114) into IfStatement(1118) at 1", "Insert Block(1117) into IfStatement(1118) at 2", "Update TextElement:   the node(2013) to      the node", "Update TextElement:     the calling operator, $= or $!(2016) to  the calling operator, $= or $!", "Update TextElement:   the left operand(2019) to      the left operand", "Update TextElement:  the right operand(2022) to     the right operand", "Update TextElement:       the node(2320) to      the node", "Update TextElement:   the calling operator, ^= or ^!(2323) to  the calling operator, ^= or ^!", "Update TextElement:       the left operand(2326) to      the left operand", "Update TextElement:      the right operand(2329) to     the right operand", "Update TextElement:  true     if left ends with right, false otherwise(2331) to  true if left ends with right, false otherwise", "Insert InfixExpression: &&(4938) into IfStatement(4995) at 0", "Insert QualifiedName: JexlContext.ThreadLocal(557) into SimpleType: JexlContext.ThreadLocal(558) at 0", "Insert SimpleName: local(559) into VariableDeclarationFragment(561) at 0", "Insert NullLiteral(560) into VariableDeclarationFragment(561) at 1", "Insert IfStatement(578) into Block(585) at 0", "Move ReturnStatement(563) into Block(585) at 1", "Insert IfStatement(681) into Block(697) at 0", "Move ExpressionStatement(609) into Block(697) at 1", "Insert IfStatement(696) into Block(697) at 2", "Insert SimpleType: Class(716) into ParameterizedType: Class<?>(718) at 0", "Insert WildcardType: ?(717) into ParameterizedType: Class<?>(718) at 1", "Insert SimpleName: c(719) into VariableDeclarationFragment(720) at 0", "Insert ExpressionStatement(728) into Block(729) at 0", "Insert SingleVariableDeclaration(733) into CatchClause(739) at 0", "Insert Block(738) into CatchClause(739) at 1", "Insert SimpleName: AUTOCLOSEABLE(741) into Assignment: =(743) at 0", "Insert SimpleName: c(742) into Assignment: =(743) at 1", "Insert SimpleName: Object(1002) into SimpleType: Object(1003) at 0", "Insert SimpleName: functor(1004) into VariableDeclarationFragment(1006) at 0", "Insert NullLiteral(1005) into VariableDeclarationFragment(1006) at 1", "Insert SimpleName: namespace(1008) into InstanceofExpression(1011) at 0", "Insert SimpleType: JexlContext.NamespaceFunctor(1010) into InstanceofExpression(1011) at 1", "Insert ExpressionStatement(1022) into Block(1023) at 0", "Insert SimpleName: functor(1087) into InfixExpression: !=(1089) at 0", "Insert NullLiteral(1088) into InfixExpression: !=(1089) at 1", "Move IfStatement(925) into Block(1114) at 0", "Insert ExpressionStatement(1111) into Block(1114) at 1", "Insert ReturnStatement(1113) into Block(1114) at 2", "Move ReturnStatement(954) into Block(1117) at 0", "Move InstanceofExpression(4784) into InfixExpression: &&(4938) at 0", "Insert PrefixExpression: !(4937) into InfixExpression: &&(4938) at 1", "Move ExpressionStatement(6279) into Block(6435) at 2", "Insert InstanceofExpression(566) into IfStatement(578) at 0", "Insert Block(577) into IfStatement(578) at 1", "Insert InfixExpression: &&(633) into IfStatement(681) at 0", "Insert Block(680) into IfStatement(681) at 1", "Insert InstanceofExpression(689) into IfStatement(696) at 0", "Insert Block(695) into IfStatement(696) at 1", "Insert SimpleName: Class(715) into SimpleType: Class(716) at 0", "Insert Assignment: =(727) into ExpressionStatement(728) at 0", "Insert SimpleType: ClassNotFoundException(731) into SingleVariableDeclaration(733) at 0", "Insert SimpleName: xclass(732) into SingleVariableDeclaration(733) at 1", "Insert ExpressionStatement(737) into Block(738) at 0", "Insert QualifiedName: JexlContext.NamespaceFunctor(1009) into SimpleType: JexlContext.NamespaceFunctor(1010) at 0", "Insert Assignment: =(1021) into ExpressionStatement(1022) at 0", "Insert MethodInvocation(1110) into ExpressionStatement(1111) at 0", "Insert SimpleName: functor(1112) into ReturnStatement(1113) at 0", "Insert MethodInvocation(4936) into PrefixExpression: !(4937) at 0", "Insert SimpleName: context(563) into InstanceofExpression(566) at 0", "Insert SimpleType: JexlContext.ThreadLocal(565) into InstanceofExpression(566) at 1", "Insert ExpressionStatement(576) into Block(577) at 0", "Insert InfixExpression: !=(629) into InfixExpression: &&(633) at 0", "Insert InfixExpression: !=(632) into InfixExpression: &&(633) at 1", "Insert EnhancedForStatement(679) into Block(680) at 0", "Insert SimpleName: context(686) into InstanceofExpression(689) at 0", "Insert SimpleType: JexlContext.ThreadLocal(688) into InstanceofExpression(689) at 1", "Insert ExpressionStatement(694) into Block(695) at 0", "Insert SimpleName: c(722) into Assignment: =(727) at 0", "Insert MethodInvocation(726) into Assignment: =(727) at 1", "Insert SimpleName: ClassNotFoundException(730) into SimpleType: ClassNotFoundException(731) at 0", "Insert Assignment: =(736) into ExpressionStatement(737) at 0", "Insert SimpleName: functor(1012) into Assignment: =(1021) at 0", "Insert MethodInvocation(1020) into Assignment: =(1021) at 1", "Insert SimpleName: functors(1106) into MethodInvocation(1110) at 0", "Insert SimpleName: put(1107) into MethodInvocation(1110) at 1", "Insert SimpleName: prefix(1108) into MethodInvocation(1110) at 2", "Insert SimpleName: functor(1109) into MethodInvocation(1110) at 3", "Insert ParenthesizedExpression(4934) into MethodInvocation(4936) at 0", "Insert SimpleName: isTopLevel(4935) into MethodInvocation(4936) at 1", "Insert QualifiedName: JexlContext.ThreadLocal(564) into SimpleType: JexlContext.ThreadLocal(565) at 0", "Insert Assignment: =(575) into ExpressionStatement(576) at 0", "Insert SimpleName: functors(627) into InfixExpression: !=(629) at 0", "Insert NullLiteral(628) into InfixExpression: !=(629) at 1", "Insert SimpleName: AUTOCLOSEABLE(630) into InfixExpression: !=(632) at 0", "Insert NullLiteral(631) into InfixExpression: !=(632) at 1", "Insert SingleVariableDeclaration(637) into EnhancedForStatement(679) at 0", "Insert MethodInvocation(640) into EnhancedForStatement(679) at 1", "Insert Block(678) into EnhancedForStatement(679) at 2", "Insert QualifiedName: JexlContext.ThreadLocal(687) into SimpleType: JexlContext.ThreadLocal(688) at 0", "Insert MethodInvocation(693) into ExpressionStatement(694) at 0", "Insert SimpleName: Class(723) into MethodInvocation(726) at 0", "Insert SimpleName: forName(724) into MethodInvocation(726) at 1", "Insert StringLiteral: \"java.lang.AutoCloseable\"(725) into MethodInvocation(726) at 2", "Insert SimpleName: c(734) into Assignment: =(736) at 0", "Insert NullLiteral(735) into Assignment: =(736) at 1", "Insert ParenthesizedExpression(1017) into MethodInvocation(1020) at 0", "Insert SimpleName: createFunctor(1018) into MethodInvocation(1020) at 1", "Insert SimpleName: context(1019) into MethodInvocation(1020) at 2", "Insert CastExpression(4933) into ParenthesizedExpression(4934) at 0", "Insert SimpleName: local(567) into Assignment: =(575) at 0", "Insert MethodInvocation(574) into Assignment: =(575) at 1", "Insert SimpleType: Object(635) into SingleVariableDeclaration(637) at 0", "Insert SimpleName: functor(636) into SingleVariableDeclaration(637) at 1", "Insert SimpleName: functors(638) into MethodInvocation(640) at 0", "Insert SimpleName: values(639) into MethodInvocation(640) at 1", "Insert IfStatement(677) into Block(678) at 0", "Insert SimpleName: jexl(690) into MethodInvocation(693) at 0", "Insert SimpleName: putThreadLocal(691) into MethodInvocation(693) at 1", "Insert SimpleName: local(692) into MethodInvocation(693) at 2", "Insert CastExpression(1016) into ParenthesizedExpression(1017) at 0", "Insert SimpleType: ASTJexlLambda(4931) into CastExpression(4933) at 0", "Insert SimpleName: node(4932) into CastExpression(4933) at 1", "Insert SimpleName: jexl(568) into MethodInvocation(574) at 0", "Insert SimpleName: putThreadLocal(569) into MethodInvocation(574) at 1", "Insert CastExpression(573) into MethodInvocation(574) at 2", "Insert SimpleName: Object(634) into SimpleType: Object(635) at 0", "Insert InfixExpression: &&(650) into IfStatement(677) at 0", "Insert Block(676) into IfStatement(677) at 1", "Insert SimpleType: JexlContext.NamespaceFunctor(1014) into CastExpression(1016) at 0", "Insert SimpleName: namespace(1015) into CastExpression(1016) at 1", "Insert SimpleName: ASTJexlLambda(4930) into SimpleType: ASTJexlLambda(4931) at 0", "Insert SimpleType: JexlContext.ThreadLocal(571) into CastExpression(573) at 0", "Insert SimpleName: context(572) into CastExpression(573) at 1", "Insert InfixExpression: !=(643) into InfixExpression: &&(650) at 0", "Insert MethodInvocation(649) into InfixExpression: &&(650) at 1", "Move TryStatement(611) into Block(676) at 0", "Insert QualifiedName: JexlContext.NamespaceFunctor(1013) into SimpleType: JexlContext.NamespaceFunctor(1014) at 0", "Insert QualifiedName: JexlContext.ThreadLocal(570) into SimpleType: JexlContext.ThreadLocal(571) at 0", "Insert SimpleName: functor(641) into InfixExpression: !=(643) at 0", "Insert NullLiteral(642) into InfixExpression: !=(643) at 1", "Insert SimpleName: AUTOCLOSEABLE(644) into MethodInvocation(649) at 0", "Insert SimpleName: isAssignableFrom(645) into MethodInvocation(649) at 1", "Insert MethodInvocation(648) into MethodInvocation(649) at 2", "Insert CatchClause(674) into TryStatement(675) at 1", "Update SimpleName: namespace(902) to functor", "Insert BooleanLiteral: true(3028) into ReturnStatement(3029) at 0", "Insert SimpleName: functor(646) into MethodInvocation(648) at 0", "Insert SimpleName: getClass(647) into MethodInvocation(648) at 1", "Insert ExpressionStatement(657) into Block(658) at 0", "Insert SingleVariableDeclaration(662) into CatchClause(674) at 0", "Insert Block(673) into CatchClause(674) at 1", "Insert MethodInvocation(656) into ExpressionStatement(657) at 0", "Insert SimpleType: Exception(660) into SingleVariableDeclaration(662) at 0", "Insert SimpleName: xclose(661) into SingleVariableDeclaration(662) at 1", "Insert ExpressionStatement(672) into Block(673) at 0", "Insert SimpleName: jexl(651) into MethodInvocation(656) at 0", "Insert SimpleName: invokeMethod(652) into MethodInvocation(656) at 1", "Insert SimpleName: functor(653) into MethodInvocation(656) at 2", "Insert StringLiteral: \"close\"(654) into MethodInvocation(656) at 3", "Insert SimpleName: EMPTY_PARAMS(655) into MethodInvocation(656) at 4", "Insert SimpleName: Exception(659) into SimpleType: Exception(660) at 0", "Insert MethodInvocation(671) into ExpressionStatement(672) at 0", "Insert SimpleName: logger(663) into MethodInvocation(671) at 0", "Insert SimpleName: warn(664) into MethodInvocation(671) at 1", "Insert MethodInvocation(667) into MethodInvocation(671) at 2", "Insert MethodInvocation(670) into MethodInvocation(671) at 3", "Insert SimpleName: xclose(665) into MethodInvocation(667) at 0", "Insert SimpleName: getMessage(666) into MethodInvocation(667) at 1", "Insert SimpleName: xclose(668) into MethodInvocation(670) at 0", "Insert SimpleName: getCause(669) into MethodInvocation(670) at 1", "Delete QualifiedName: java.util.Set(154)", "Delete ImportDeclaration(155)", "Delete Block(610)", "Delete Block(612)", "Delete SimpleName: functors(926)", "Delete SimpleName: put(927)", "Delete SimpleName: prefix(928)", "Delete SimpleName: namespace(929)", "Delete MethodInvocation(930)", "Delete ExpressionStatement(931)", "Delete SimpleName: right(2677)", "Delete SimpleName: Set(2678)", "Delete SimpleType: Set(2679)", "Delete WildcardType: ?(2680)", "Delete ParameterizedType: Set<?>(2681)", "Delete InstanceofExpression(2682)", "Delete SimpleName: Set(2683)", "Delete SimpleType: Set(2684)", "Delete WildcardType: ?(2685)", "Delete ParameterizedType: Set<?>(2686)", "Delete SimpleName: right(2687)", "Delete CastExpression(2688)", "Delete ParenthesizedExpression(2689)", "Delete SimpleName: contains(2690)", "Delete SimpleName: left(2691)", "Delete MethodInvocation(2692)", "Delete ReturnStatement(2693)", "Delete Block(2694)", "Delete IfStatement(2695)", "Delete QualifiedName: Boolean.TRUE(2883)", "Delete SimpleName: symbol(6271)", "Delete NumberLiteral: 0(6272)", "Delete InfixExpression: <(6273)", "Delete Block(6280)", "Delete IfStatement(6281)"]}}, {"Scope_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: stack to MethodInvocation at 0", "INS SimpleName: copy to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ArrayType: Object[] to VariableDeclarationStatement at 0", "INS Dimension to ArrayType: Object[] at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: clone to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Object to ArrayType: Object[] at 0"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS SimpleType: Frame to ClassInstanceCreation at 0", "INS SimpleName: Frame to SimpleType: Frame at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: copy to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "UPDATE from stack to copy", "operations": ["UPD SimpleName: stack from stack to copy"]}, {"root": "UPDATE from stack.length to copy.length", "operations": ["UPD QualifiedName: stack.length from stack.length to copy.length"]}]}}, {"Scope_diff": {"operations": ["Insert VariableDeclarationStatement(964) into Block(983) at 0", "Insert ReturnStatement(982) into Block(983) at 2", "Insert ArrayType: Object[](958) into VariableDeclarationStatement(964) at 0", "Insert VariableDeclarationFragment(963) into VariableDeclarationStatement(964) at 1", "Insert ClassInstanceCreation(981) into ReturnStatement(982) at 0", "Insert SimpleType: Object(956) into ArrayType: Object[](958) at 0", "Insert Dimension(957) into ArrayType: Object[](958) at 1", "Insert SimpleName: copy(959) into VariableDeclarationFragment(963) at 0", "Insert MethodInvocation(962) into VariableDeclarationFragment(963) at 1", "Update SimpleName: stack(959) to copy", "Insert SimpleType: Frame(979) into ClassInstanceCreation(981) at 0", "Insert SimpleName: copy(980) into ClassInstanceCreation(981) at 1", "Insert SimpleName: Object(955) into SimpleType: Object(956) at 0", "Insert SimpleName: stack(960) into MethodInvocation(962) at 0", "Insert SimpleName: clone(961) into MethodInvocation(962) at 1", "Update QualifiedName: stack.length(963) to copy.length", "Insert SimpleName: Frame(978) into SimpleType: Frame(979) at 0"]}}, {"Script_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.commons.jexl3.JexlExpression to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS SimpleType: JexlExpression to TypeDeclaration: class at 4", "operations": ["INS SimpleName: JexlExpression to SimpleType: JexlExpression at 0", "INS SimpleType: JexlExpression to TypeDeclaration: class at 4"]}]}}, {"Script_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(591) at 3", "Insert QualifiedName: org.apache.commons.jexl3.JexlExpression(6) into ImportDeclaration(7) at 0", "Insert SimpleType: JexlExpression(26) into TypeDeclaration: class(590) at 4", "Insert SimpleName: JexlExpression(25) into SimpleType: JexlExpression(26) at 0"]}}, {"TemplateEngine_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.apache.commons.jexl3.internal.Engine.VarCollector to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: java.util.Iterator to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: private to FieldDeclaration at 1", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS TextElement: Whether expressions can use Jexl script or only expressions (ie, no for, var, etc).  to TagElement at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS SimpleName: noscript to VariableDeclarationFragment at 0", "INS Javadoc to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TagElement to Javadoc at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS ReturnStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 2", "INS CastExpression to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS WhileStatement to Block at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: current to InfixExpression: != at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SimpleName: c to InfixExpression: != at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: hasNext to MethodDeclaration at 3", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS SimpleName: remove to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: eol to Assignment: = at 0", "INS MethodInvocation to InfixExpression: > at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: doNext to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to TryStatement at 0", "INS SimpleName: mark to MethodInvocation at 1", "INS SimpleType: StringBuffer to ClassInstanceCreation at 0", "INS SimpleType: CharSequence to MethodDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS CharacterLiteral: '\\n' to InfixExpression: == at 1", "INS SimpleName: StringBuffer to SimpleType: StringBuffer at 0", "INS SimpleName: c to InfixExpression: == at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS CharacterLiteral: '\\n' to InfixExpression: != at 1", "INS TextElement:  the reader to TagElement: @param at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ThrowStatement to Block at 0", "INS IfStatement to Block at 0", "INS SimpleName: reader to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS ReturnStatement to Block at 1", "INS PrimitiveType: char to CastExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: current to VariableDeclarationFragment at 0", "INS SimpleName: reset to MethodInvocation at 1", "INS Block to WhileStatement at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: reader to MethodInvocation at 0", "INS SimpleName: read to MethodInvocation at 1", "INS InfixExpression: > to ConditionalExpression at 0", "INS InfixExpression: != to IfStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS TextElement:  the line iterator to TagElement: @return at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS ParameterizedType: Iterator<CharSequence> to MethodDeclaration at 3", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"mark support in reader required\" to ClassInstanceCreation at 1", "INS ReturnStatement to Block at 4", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS NumberLiteral: 64 to ClassInstanceCreation at 1", "INS IfStatement to Block at 0", "INS SimpleName: StringBuffer to SimpleType: StringBuffer at 0", "INS ParenthesizedExpression to InfixExpression: >= at 0", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS SimpleName: next to InfixExpression: != at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<CharSequence> at 0", "INS SimpleName: c to Assignment: = at 0", "INS SimpleName: strb to MethodInvocation at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<CharSequence> at 0", "INS TryStatement to Block at 3", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS TagElement: @return to Javadoc at 2", "INS Assignment: = to ParenthesizedExpression at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS VariableDeclarationStatement to Block at 0", "INS BreakStatement to Block at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: next to Assignment: = at 0", "INS ParameterizedType: Iterator<CharSequence> to ClassInstanceCreation at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleType: Reader to SingleVariableDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to FieldDeclaration at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: c to InfixExpression: != at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: next to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleName: next to VariableDeclarationFragment at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: CharSequence to ParameterizedType: Iterator<CharSequence> at 1", "INS SimpleName: append to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: CharSequence to ParameterizedType: Iterator<CharSequence> at 1", "INS FieldDeclaration to AnonymousClassDeclaration at 0", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS SimpleType: CharSequence to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 3", "INS VariableDeclarationStatement to Block at 1", "INS CharacterLiteral: '\\r' to InfixExpression: != at 1", "INS SimpleType: CharSequence to MethodDeclaration at 2", "INS SimpleName: doNext to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS Block to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS SimpleName: Reader to SimpleType: Reader at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: c to CastExpression at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: c to VariableDeclarationFragment at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS InfixExpression: != to ReturnStatement at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: eol to VariableDeclarationFragment at 0", "INS SimpleName: eol to InfixExpression: && at 0", "INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 0", "INS TextElement: Read lines from a (buffered / mark-able) reader keeping all new-lines and line-feeds. to TagElement at 0", "INS SimpleName: strb to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: doNext to MethodDeclaration at 2", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: strb to MethodInvocation at 0", "INS SimpleName: reader to MethodInvocation at 0", "INS SimpleName: reader to TagElement: @param at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: strb to ConditionalExpression at 1", "INS SimpleName: next to VariableDeclarationFragment at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: reader to MethodInvocation at 0", "INS InfixExpression: >= to WhileStatement at 0", "INS SimpleType: StringBuffer to VariableDeclarationStatement at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: readLines to MethodDeclaration at 4", "INS SimpleName: reader to SingleVariableDeclaration at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: markSupported to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"Not supported.\" to ClassInstanceCreation at 1", "INS SimpleName: current to ReturnStatement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS NullLiteral to ConditionalExpression at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: noScript to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS TextElement: Fills up the list of variables accessed by this unified expression. to TagElement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: TemplateExpression to SimpleType: TemplateExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS QualifiedName: Engine.VarCollector to SimpleType: Engine.VarCollector at 0", "INS SimpleType: TemplateExpression to SingleVariableDeclaration at 0", "INS TagElement to Javadoc at 0", "INS PrimitiveType: void to MethodDeclaration at 3", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 0", "INS SimpleName: collector to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS ExpressionStatement to Block at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: getVariables to MethodDeclaration at 4", "INS SimpleType: Engine.VarCollector to SingleVariableDeclaration at 0", "INS SimpleName: collector to TagElement: @param at 0", "INS Modifier: protected to MethodDeclaration at 2", "INS SimpleName: getVariables to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: exprs to EnhancedForStatement at 1", "INS SimpleName: expr to MethodInvocation at 0", "INS SimpleName: collector to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS TextElement:  the variable collector to TagElement: @param at 1", "INS SimpleName: expr to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS Block to WhileStatement at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: strb to MethodInvocation at 0", "INS MethodInvocation to WhileStatement at 0", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: strb to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: body to MethodInvocation at 2", "INS SimpleType: StringBuilder to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS ParameterizedType: Iterator<CharSequence> to VariableDeclarationStatement at 0", "INS SimpleType: StringReader to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Block to IfStatement at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: append to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: readLines to MethodInvocation at 0", "INS SimpleName: StringReader to SimpleType: StringReader at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: type to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: toString to MethodDeclaration at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS QualifiedName: BlockType.VERBATIM to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: lines to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: hasNext to MethodInvocation at 1", "INS SimpleName: lines to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS ClassInstanceCreation to MethodInvocation at 1", "INS SimpleName: body to ClassInstanceCreation at 1", "INS WhileStatement to Block at 1", "INS SimpleName: strb to SingleVariableDeclaration at 1", "INS SimpleType: Iterator to ParameterizedType: Iterator<CharSequence> at 0", "INS SimpleName: prefix to SingleVariableDeclaration at 1", "INS SimpleType: CharSequence to ParameterizedType: Iterator<CharSequence> at 1", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: lines to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: exprs to EnhancedForStatement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: VarCollector to SimpleType: VarCollector at 0", "INS TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p> to TagElement at 2", "INS TagElement: @return to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: TemplateExpression to SimpleType: TemplateExpression at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: getVariables to MethodInvocation at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string) to TagElement: @return at 0", "INS ParameterizedType: List<String> to ParameterizedType: Set<List<String>> at 1", "INS TextElement: Gets the list of variables accessed by this template. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: collector to VariableDeclarationFragment at 0", "INS SimpleName: expr to SingleVariableDeclaration at 1", "INS SimpleName: collector to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: VarCollector to VariableDeclarationStatement at 0", "INS ParameterizedType: Set<List<String>> to MethodDeclaration at 3", "INS TextElement: <p>This method will visit all nodes of the sub-expressions and extract all variables whether they to TagElement at 1", "INS SimpleName: getVariables to MethodDeclaration at 4", "INS ReturnStatement to Block at 2", "INS SimpleName: collector to MethodInvocation at 0", "INS SimpleType: VarCollector to ClassInstanceCreation at 0", "INS Block to EnhancedForStatement at 2", "INS TextElement: or the empty set if no variables are used to TagElement: @return at 1", "INS SimpleType: TemplateExpression to SingleVariableDeclaration at 0", "INS SimpleName: collected to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: VarCollector to SimpleType: VarCollector at 0", "INS MarkerAnnotation to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: Set to ParameterizedType: Set<List<String>> at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleName: expr to MethodInvocation at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1", "MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 6"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS SimpleName: noScript to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2", "INS TextElement:   whether this engine only allows Jexl expressions or scripts to TagElement: @param at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: noscript to Assignment: = at 0", "INS ExpressionStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: noScript to Assignment: = at 1"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS SimpleName: toString to MethodInvocation at 0", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: strb to MethodInvocation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS QualifiedName: BlockType.VERBATIM to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS StringLiteral: \"$$\" to MethodInvocation at 2", "INS NumberLiteral: 64 to ClassInstanceCreation at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: strb to VariableDeclarationFragment at 0", "INS SimpleName: strb to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: type to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS VariableDeclarationStatement to Block at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 2", "INS Block to IfStatement at 2", "INS Block to MethodDeclaration at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: readLines to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: lines to VariableDeclarationFragment at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<CharSequence> at 0", "INS SimpleName: reader to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: CharSequence to ParameterizedType: Iterator<CharSequence> at 1", "INS ParameterizedType: Iterator<CharSequence> to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS SimpleName: type to InfixExpression: != at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS IfStatement to Block at 8", "INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: strb to MethodInvocation at 0", "INS InfixExpression: > to InfixExpression: && at 1"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS SimpleName: blocks to MethodInvocation at 0", "INS ExpressionStatement to Block at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: trimToSize to MethodInvocation at 1"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from List<Block> to ArrayList<Block>", "operations": ["UPD ParameterizedType: List<Block> from List<Block> to ArrayList<Block>"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to WhileStatement at 0", "operations": ["INS MethodInvocation to WhileStatement at 0", "INS SimpleName: lines to MethodInvocation at 0", "INS SimpleName: hasNext to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from inner to inner1", "operations": ["UPD SimpleName: inner from inner to inner1", "UPD SimpleName: inner from inner to inner1", "UPD SimpleName: inner from inner to inner1", "UPD SimpleName: inner from inner to inner1"]}, {"root": "UPDATE from The actual contexnt.  to The actual content. ", "operations": ["UPD TextElement: The actual contexnt.  from The actual contexnt.  to The actual content. "]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from List to ArrayList", "operations": ["UPD SimpleName: List from List to ArrayList", "UPD SimpleType: List from List to ArrayList"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS SimpleType: CharSequence to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: CharSequence to VariableDeclarationStatement at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS BreakStatement to Block at 0"]}, {"root": "INS SimpleName: noscript to MethodInvocation at 6", "operations": ["INS SimpleName: noscript to MethodInvocation at 6"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 6", "operations": ["INS BooleanLiteral: false to MethodInvocation at 6"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: CharSequence to FieldDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: block to MethodInvocation at 0", "MOV SimpleName: toString to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: strb to MethodInvocation at 2", "MOV SimpleName: append to MethodInvocation at 3"]}, {"root": "UPDATE from append to prefix", "operations": ["UPD SimpleName: append from append to prefix"]}, {"root": "UPDATE from reader to lines", "operations": ["UPD SimpleName: reader from reader to lines"]}, {"root": "UPDATE from readLine to next", "operations": ["UPD SimpleName: readLine from readLine to next"]}, {"root": "INS SimpleName: noscript to MethodInvocation at 6", "operations": ["INS SimpleName: noscript to MethodInvocation at 6"]}, {"root": "UPDATE from code to directive", "operations": ["UPD SimpleName: code from code to directive", "UPD SimpleName: code from code to directive"]}, {"root": "INS SimpleName: noscript to MethodInvocation at 6", "operations": ["INS SimpleName: noscript to MethodInvocation at 6"]}, {"root": "INS SimpleName: noscript to MethodInvocation at 6", "operations": ["INS SimpleName: noscript to MethodInvocation at 6"]}, {"root": "DEL IfStatement", "operations": ["DEL QualifiedName: BlockType.DIRECTIVE", "DEL InfixExpression: ==", "DEL Block", "DEL IfStatement", "DEL QualifiedName: block.type"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: strb", "DEL SimpleName: append", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL CharacterLiteral: '\\n'"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: strb", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL CharacterLiteral: '\\n'"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL CharacterLiteral: '\\n'", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: strb"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL TryStatement"]}]}}, {"TemplateEngine_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(4818) at 5", "Insert ImportDeclaration(37) into CompilationUnit(4818) at 18", "Insert QualifiedName: org.apache.commons.jexl3.internal.Engine.VarCollector(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.util.Iterator(36) into ImportDeclaration(37) at 0", "Insert FieldDeclaration(103) into TypeDeclaration: class(4817) at 9", "Insert MethodDeclaration(4400) into TypeDeclaration: class(4817) at 31", "Insert Javadoc(97) into FieldDeclaration(103) at 0", "Insert Modifier: private(98) into FieldDeclaration(103) at 1", "Insert PrimitiveType: boolean(99) into FieldDeclaration(103) at 2", "Insert VariableDeclarationFragment(102) into FieldDeclaration(103) at 3", "Insert SingleVariableDeclaration(133) into MethodDeclaration(177) at 4", "Insert MethodDeclaration(1746) into TypeDeclaration: class(1920) at 11", "Insert MethodDeclaration(2906) into TypeDeclaration: class(2907) at 9", "Insert MethodDeclaration(3627) into TypeDeclaration: class(3628) at 16", "Insert Javadoc(4219) into MethodDeclaration(4400) at 0", "Insert Modifier: protected(4220) into MethodDeclaration(4400) at 1", "Insert Modifier: static(4221) into MethodDeclaration(4400) at 2", "Insert ParameterizedType: Iterator<CharSequence>(4226) into MethodDeclaration(4400) at 3", "Insert SimpleName: readLines(4227) into MethodDeclaration(4400) at 4", "Insert SingleVariableDeclaration(4232) into MethodDeclaration(4400) at 5", "Insert Block(4399) into MethodDeclaration(4400) at 6", "Move Block(4357) into MethodDeclaration(4736) at 6", "Move VariableDeclarationStatement(4074) into Block(4735) at 6", "Insert TagElement(96) into Javadoc(97) at 0", "Insert SimpleName: noscript(100) into VariableDeclarationFragment(102) at 0", "Insert BooleanLiteral: true(101) into VariableDeclarationFragment(102) at 1", "Insert TagElement: @param(114) into Javadoc(124) at 2", "Insert PrimitiveType: boolean(131) into SingleVariableDeclaration(133) at 0", "Insert SimpleName: noScript(132) into SingleVariableDeclaration(133) at 1", "Insert ExpressionStatement(175) into Block(176) at 4", "Insert Javadoc(1723) into MethodDeclaration(1746) at 0", "Insert MarkerAnnotation(1725) into MethodDeclaration(1746) at 1", "Insert Modifier: protected(1726) into MethodDeclaration(1746) at 2", "Insert PrimitiveType: void(1727) into MethodDeclaration(1746) at 3", "Insert SimpleName: getVariables(1728) into MethodDeclaration(1746) at 4", "Insert SingleVariableDeclaration(1732) into MethodDeclaration(1746) at 5", "Insert Block(1745) into MethodDeclaration(1746) at 6", "Insert Block(2849) into MethodDeclaration(2850) at 4", "Insert Modifier: protected(2851) into MethodDeclaration(2906) at 0", "Insert PrimitiveType: void(2852) into MethodDeclaration(2906) at 1", "Insert SimpleName: toString(2853) into MethodDeclaration(2906) at 2", "Insert SingleVariableDeclaration(2857) into MethodDeclaration(2906) at 3", "Insert SingleVariableDeclaration(2861) into MethodDeclaration(2906) at 4", "Insert Block(2905) into MethodDeclaration(2906) at 5", "Insert Javadoc(3589) into MethodDeclaration(3627) at 0", "Insert MarkerAnnotation(3591) into MethodDeclaration(3627) at 1", "Insert Modifier: public(3592) into MethodDeclaration(3627) at 2", "Insert ParameterizedType: Set<List<String>>(3600) into MethodDeclaration(3627) at 3", "Insert SimpleName: getVariables(3601) into MethodDeclaration(3627) at 4", "Insert Block(3626) into MethodDeclaration(3627) at 5", "Insert TagElement(4213) into Javadoc(4219) at 0", "Insert TagElement: @param(4216) into Javadoc(4219) at 1", "Insert TagElement: @return(4218) into Javadoc(4219) at 2", "Insert SimpleType: Iterator(4223) into ParameterizedType: Iterator<CharSequence>(4226) at 0", "Insert SimpleType: CharSequence(4225) into ParameterizedType: Iterator<CharSequence>(4226) at 1", "Insert Modifier: final(4228) into SingleVariableDeclaration(4232) at 0", "Insert SimpleType: Reader(4230) into SingleVariableDeclaration(4232) at 1", "Insert SimpleName: reader(4231) into SingleVariableDeclaration(4232) at 2", "Insert IfStatement(4243) into Block(4399) at 0", "Insert ReturnStatement(4398) into Block(4399) at 1", "Insert VariableDeclarationStatement(4499) into Block(4735) at 6", "Insert IfStatement(4728) into Block(4735) at 8", "Insert ExpressionStatement(4732) into Block(4735) at 9", "Insert TextElement: Whether expressions can use Jexl script or only expressions (ie, no for, var, etc). (95) into TagElement(96) at 0", "Insert SimpleName: noScript(112) into TagElement: @param(114) at 0", "Insert TextElement:   whether this engine only allows Jexl expressions or scripts(113) into TagElement: @param(114) at 1", "Insert Assignment: =(174) into ExpressionStatement(175) at 0", "Insert TagElement(1719) into Javadoc(1723) at 0", "Insert TagElement: @param(1722) into Javadoc(1723) at 1", "Insert SimpleName: Override(1724) into MarkerAnnotation(1725) at 0", "Insert SimpleType: Engine.VarCollector(1730) into SingleVariableDeclaration(1732) at 0", "Insert SimpleName: collector(1731) into SingleVariableDeclaration(1732) at 1", "Insert EnhancedForStatement(1744) into Block(1745) at 0", "Insert IfStatement(2848) into Block(2849) at 0", "Insert SimpleType: StringBuilder(2855) into SingleVariableDeclaration(2857) at 0", "Insert SimpleName: strb(2856) into SingleVariableDeclaration(2857) at 1", "Insert SimpleType: String(2859) into SingleVariableDeclaration(2861) at 0", "Insert SimpleName: prefix(2860) into SingleVariableDeclaration(2861) at 1", "Insert IfStatement(2904) into Block(2905) at 0", "Insert TagElement(3585) into Javadoc(3589) at 0", "Insert TagElement: @return(3588) into Javadoc(3589) at 1", "Insert SimpleName: Override(3590) into MarkerAnnotation(3591) at 0", "Insert SimpleType: Set(3594) into ParameterizedType: Set<List<String>>(3600) at 0", "Insert ParameterizedType: List<String>(3599) into ParameterizedType: Set<List<String>>(3600) at 1", "Insert VariableDeclarationStatement(3609) into Block(3626) at 0", "Insert EnhancedForStatement(3621) into Block(3626) at 1", "Insert ReturnStatement(3625) into Block(3626) at 2", "Insert TextElement: Read lines from a (buffered / mark-able) reader keeping all new-lines and line-feeds.(4212) into TagElement(4213) at 0", "Insert SimpleName: reader(4214) into TagElement: @param(4216) at 0", "Insert TextElement:  the reader(4215) into TagElement: @param(4216) at 1", "Insert TextElement:  the line iterator(4217) into TagElement: @return(4218) at 0", "Insert SimpleName: Iterator(4222) into SimpleType: Iterator(4223) at 0", "Insert SimpleName: CharSequence(4224) into SimpleType: CharSequence(4225) at 0", "Insert SimpleName: Reader(4229) into SimpleType: Reader(4230) at 0", "Insert PrefixExpression: !(4236) into IfStatement(4243) at 0", "Insert Block(4242) into IfStatement(4243) at 1", "Insert ClassInstanceCreation(4397) into ReturnStatement(4398) at 0", "Insert Modifier: final(4428) into VariableDeclarationStatement(4442) at 0", "Update ParameterizedType: List<Block>(4079) to ArrayList<Block>", "Insert Modifier: final(4443) into VariableDeclarationStatement(4448) at 0", "Insert Modifier: final(4470) into VariableDeclarationStatement(4478) at 0", "Insert ParameterizedType: Iterator<CharSequence>(4493) into VariableDeclarationStatement(4499) at 0", "Insert VariableDeclarationFragment(4498) into VariableDeclarationStatement(4499) at 1", "Insert MethodInvocation(4502) into WhileStatement(4700) at 0", "Insert InfixExpression: &&(4709) into IfStatement(4728) at 0", "Move Block(4159) into IfStatement(4728) at 1", "Insert MethodInvocation(4731) into ExpressionStatement(4732) at 0", "Insert SimpleName: noscript(172) into Assignment: =(174) at 0", "Insert SimpleName: noScript(173) into Assignment: =(174) at 1", "Insert TextElement: Fills up the list of variables accessed by this unified expression.(1718) into TagElement(1719) at 0", "Insert SimpleName: collector(1720) into TagElement: @param(1722) at 0", "Insert TextElement:  the variable collector(1721) into TagElement: @param(1722) at 1", "Insert QualifiedName: Engine.VarCollector(1729) into SimpleType: Engine.VarCollector(1730) at 0", "Insert SingleVariableDeclaration(1736) into EnhancedForStatement(1744) at 0", "Insert SimpleName: exprs(1737) into EnhancedForStatement(1744) at 1", "Insert Block(1743) into EnhancedForStatement(1744) at 2", "Update SimpleName: inner(2197) to inner1", "Update TextElement: The actual contexnt. (2722) to The actual content. ", "Insert MethodInvocation(2825) into IfStatement(2848) at 0", "Move Block(2768) into IfStatement(2848) at 1", "Insert Block(2847) into IfStatement(2848) at 2", "Insert SimpleName: StringBuilder(2854) into SimpleType: StringBuilder(2855) at 0", "Insert SimpleName: String(2858) into SimpleType: String(2859) at 0", "Insert MethodInvocation(2865) into IfStatement(2904) at 0", "Insert Block(2871) into IfStatement(2904) at 1", "Insert Block(2903) into IfStatement(2904) at 2", "Insert TextElement: Gets the list of variables accessed by this template.(3582) into TagElement(3585) at 0", "Insert TextElement: <p>This method will visit all nodes of the sub-expressions and extract all variables whether they(3583) into TagElement(3585) at 1", "Insert TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p>(3584) into TagElement(3585) at 2", "Insert TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string)(3586) into TagElement: @return(3588) at 0", "Insert TextElement: or the empty set if no variables are used(3587) into TagElement: @return(3588) at 1", "Insert SimpleName: Set(3593) into SimpleType: Set(3594) at 0", "Insert SimpleType: List(3596) into ParameterizedType: List<String>(3599) at 0", "Insert SimpleType: String(3598) into ParameterizedType: List<String>(3599) at 1", "Insert SimpleType: VarCollector(3603) into VariableDeclarationStatement(3609) at 0", "Insert VariableDeclarationFragment(3608) into VariableDeclarationStatement(3609) at 1", "Insert SingleVariableDeclaration(3613) into EnhancedForStatement(3621) at 0", "Insert SimpleName: exprs(3614) into EnhancedForStatement(3621) at 1", "Insert Block(3620) into EnhancedForStatement(3621) at 2", "Insert MethodInvocation(3624) into ReturnStatement(3625) at 0", "Insert MethodInvocation(4235) into PrefixExpression: !(4236) at 0", "Insert ThrowStatement(4241) into Block(4242) at 0", "Insert ParameterizedType: Iterator<CharSequence>(4248) into ClassInstanceCreation(4397) at 0", "Insert AnonymousClassDeclaration(4396) into ClassInstanceCreation(4397) at 1", "Update SimpleType: List(4076) to ArrayList", "Insert SimpleType: Iterator(4490) into ParameterizedType: Iterator<CharSequence>(4493) at 0", "Insert SimpleType: CharSequence(4492) into ParameterizedType: Iterator<CharSequence>(4493) at 1", "Insert SimpleName: lines(4494) into VariableDeclarationFragment(4498) at 0", "Insert MethodInvocation(4497) into VariableDeclarationFragment(4498) at 1", "Insert SimpleName: lines(4500) into MethodInvocation(4502) at 0", "Insert SimpleName: hasNext(4501) into MethodInvocation(4502) at 1", "Insert InfixExpression: !=(4703) into InfixExpression: &&(4709) at 0", "Insert InfixExpression: >(4708) into InfixExpression: &&(4709) at 1", "Insert SimpleName: blocks(4729) into MethodInvocation(4731) at 0", "Insert SimpleName: trimToSize(4730) into MethodInvocation(4731) at 1", "Insert SimpleType: TemplateExpression(1734) into SingleVariableDeclaration(1736) at 0", "Insert SimpleName: expr(1735) into SingleVariableDeclaration(1736) at 1", "Insert ExpressionStatement(1742) into Block(1743) at 0", "Insert QualifiedName: BlockType.VERBATIM(2822) into MethodInvocation(2825) at 0", "Insert SimpleName: equals(2823) into MethodInvocation(2825) at 1", "Insert SimpleName: type(2824) into MethodInvocation(2825) at 2", "Insert VariableDeclarationStatement(2837) into Block(2847) at 0", "Insert ExpressionStatement(2842) into Block(2847) at 1", "Insert ReturnStatement(2846) into Block(2847) at 2", "Insert QualifiedName: BlockType.VERBATIM(2862) into MethodInvocation(2865) at 0", "Insert SimpleName: equals(2863) into MethodInvocation(2865) at 1", "Insert SimpleName: type(2864) into MethodInvocation(2865) at 2", "Insert ExpressionStatement(2870) into Block(2871) at 0", "Insert VariableDeclarationStatement(2885) into Block(2903) at 0", "Insert WhileStatement(2902) into Block(2903) at 1", "Insert ExpressionStatement(3346) into Block(3347) at 0", "Insert SimpleName: List(3595) into SimpleType: List(3596) at 0", "Insert SimpleName: String(3597) into SimpleType: String(3598) at 0", "Insert SimpleName: VarCollector(3602) into SimpleType: VarCollector(3603) at 0", "Insert SimpleName: collector(3604) into VariableDeclarationFragment(3608) at 0", "Insert ClassInstanceCreation(3607) into VariableDeclarationFragment(3608) at 1", "Insert SimpleType: TemplateExpression(3611) into SingleVariableDeclaration(3613) at 0", "Insert SimpleName: expr(3612) into SingleVariableDeclaration(3613) at 1", "Insert ExpressionStatement(3619) into Block(3620) at 0", "Insert SimpleName: collector(3622) into MethodInvocation(3624) at 0", "Insert SimpleName: collected(3623) into MethodInvocation(3624) at 1", "Insert SimpleName: reader(4233) into MethodInvocation(4235) at 0", "Insert SimpleName: markSupported(4234) into MethodInvocation(4235) at 1", "Insert ClassInstanceCreation(4240) into ThrowStatement(4241) at 0", "Insert SimpleType: Iterator(4245) into ParameterizedType: Iterator<CharSequence>(4248) at 0", "Insert SimpleType: CharSequence(4247) into ParameterizedType: Iterator<CharSequence>(4248) at 1", "Insert FieldDeclaration(4255) into AnonymousClassDeclaration(4396) at 0", "Insert MethodDeclaration(4346) into AnonymousClassDeclaration(4396) at 1", "Insert MethodDeclaration(4357) into AnonymousClassDeclaration(4396) at 2", "Insert MethodDeclaration(4383) into AnonymousClassDeclaration(4396) at 3", "Insert MethodDeclaration(4395) into AnonymousClassDeclaration(4396) at 4", "Update SimpleName: List(4075) to ArrayList", "Insert SimpleName: Iterator(4489) into SimpleType: Iterator(4490) at 0", "Insert SimpleName: CharSequence(4491) into SimpleType: CharSequence(4492) at 0", "Insert SimpleName: readLines(4495) into MethodInvocation(4497) at 0", "Insert SimpleName: reader(4496) into MethodInvocation(4497) at 1", "Insert SimpleType: CharSequence(4504) into VariableDeclarationStatement(4510) at 0", "Insert Block(4515) into IfStatement(4698) at 1", "Insert SimpleName: type(4701) into InfixExpression: !=(4703) at 0", "Insert NullLiteral(4702) into InfixExpression: !=(4703) at 1", "Insert MethodInvocation(4706) into InfixExpression: >(4708) at 0", "Insert NumberLiteral: 0(4707) into InfixExpression: >(4708) at 1", "Insert SimpleName: noscript(1497) into MethodInvocation(1498) at 6", "Insert SimpleName: TemplateExpression(1733) into SimpleType: TemplateExpression(1734) at 0", "Insert MethodInvocation(1741) into ExpressionStatement(1742) at 0", "Insert SimpleType: StringBuilder(2830) into VariableDeclarationStatement(2837) at 0", "Insert VariableDeclarationFragment(2836) into VariableDeclarationStatement(2837) at 1", "Insert MethodInvocation(2841) into ExpressionStatement(2842) at 0", "Insert MethodInvocation(2845) into ReturnStatement(2846) at 0", "Insert MethodInvocation(2869) into ExpressionStatement(2870) at 0", "Insert ParameterizedType: Iterator<CharSequence>(2876) into VariableDeclarationStatement(2885) at 0", "Insert VariableDeclarationFragment(2884) into VariableDeclarationStatement(2885) at 1", "Insert MethodInvocation(2888) into WhileStatement(2902) at 0", "Insert Block(2901) into WhileStatement(2902) at 1", "Insert BooleanLiteral: false(3184) into MethodInvocation(3185) at 6", "Insert MethodInvocation(3345) into ExpressionStatement(3346) at 0", "Insert SimpleType: VarCollector(3606) into ClassInstanceCreation(3607) at 0", "Insert SimpleName: TemplateExpression(3610) into SimpleType: TemplateExpression(3611) at 0", "Insert MethodInvocation(3618) into ExpressionStatement(3619) at 0", "Insert SimpleType: IllegalArgumentException(4238) into ClassInstanceCreation(4240) at 0", "Insert StringLiteral: \"mark support in reader required\"(4239) into ClassInstanceCreation(4240) at 1", "Insert SimpleName: Iterator(4244) into SimpleType: Iterator(4245) at 0", "Insert SimpleName: CharSequence(4246) into SimpleType: CharSequence(4247) at 0", "Move SimpleType: CharSequence(4131) into FieldDeclaration(4255) at 0", "Insert VariableDeclarationFragment(4254) into FieldDeclaration(4255) at 1", "Insert Modifier: private(4256) into MethodDeclaration(4346) at 0", "Insert SimpleType: CharSequence(4258) into MethodDeclaration(4346) at 1", "Insert SimpleName: doNext(4259) into MethodDeclaration(4346) at 2", "Insert Block(4345) into MethodDeclaration(4346) at 3", "Insert MarkerAnnotation(4348) into MethodDeclaration(4357) at 0", "Insert Modifier: public(4349) into MethodDeclaration(4357) at 1", "Insert PrimitiveType: boolean(4350) into MethodDeclaration(4357) at 2", "Insert SimpleName: hasNext(4351) into MethodDeclaration(4357) at 3", "Insert Block(4356) into MethodDeclaration(4357) at 4", "Insert MarkerAnnotation(4359) into MethodDeclaration(4383) at 0", "Insert Modifier: public(4360) into MethodDeclaration(4383) at 1", "Insert SimpleType: CharSequence(4362) into MethodDeclaration(4383) at 2", "Insert SimpleName: next(4363) into MethodDeclaration(4383) at 3", "Insert Block(4382) into MethodDeclaration(4383) at 4", "Insert MarkerAnnotation(4385) into MethodDeclaration(4395) at 0", "Insert Modifier: public(4386) into MethodDeclaration(4395) at 1", "Insert PrimitiveType: void(4387) into MethodDeclaration(4395) at 2", "Insert SimpleName: remove(4388) into MethodDeclaration(4395) at 3", "Insert Block(4394) into MethodDeclaration(4395) at 4", "Insert SimpleName: CharSequence(4503) into SimpleType: CharSequence(4504) at 0", "Insert BreakStatement(4514) into Block(4515) at 0", "Insert SimpleName: strb(4704) into MethodInvocation(4706) at 0", "Insert SimpleName: length(4705) into MethodInvocation(4706) at 1", "Insert SimpleName: expr(1738) into MethodInvocation(1741) at 0", "Insert SimpleName: getVariables(1739) into MethodInvocation(1741) at 1", "Insert SimpleName: collector(1740) into MethodInvocation(1741) at 2", "Insert SimpleName: StringBuilder(2829) into SimpleType: StringBuilder(2830) at 0", "Insert SimpleName: strb(2831) into VariableDeclarationFragment(2836) at 0", "Insert ClassInstanceCreation(2835) into VariableDeclarationFragment(2836) at 1", "Insert SimpleName: toString(2838) into MethodInvocation(2841) at 0", "Insert SimpleName: strb(2839) into MethodInvocation(2841) at 1", "Insert StringLiteral: \"$$\"(2840) into MethodInvocation(2841) at 2", "Insert SimpleName: strb(2843) into MethodInvocation(2845) at 0", "Insert SimpleName: toString(2844) into MethodInvocation(2845) at 1", "Insert SimpleName: strb(2866) into MethodInvocation(2869) at 0", "Insert SimpleName: append(2867) into MethodInvocation(2869) at 1", "Insert SimpleName: body(2868) into MethodInvocation(2869) at 2", "Insert SimpleType: Iterator(2873) into ParameterizedType: Iterator<CharSequence>(2876) at 0", "Insert SimpleType: CharSequence(2875) into ParameterizedType: Iterator<CharSequence>(2876) at 1", "Insert SimpleName: lines(2877) into VariableDeclarationFragment(2884) at 0", "Insert MethodInvocation(2883) into VariableDeclarationFragment(2884) at 1", "Insert SimpleName: lines(2886) into MethodInvocation(2888) at 0", "Insert SimpleName: hasNext(2887) into MethodInvocation(2888) at 1", "Move ExpressionStatement(3210) into Block(2901) at 0", "Insert ExpressionStatement(2900) into Block(2901) at 1", "Move SimpleName: block(3215) into MethodInvocation(3345) at 0", "Move SimpleName: toString(3216) into MethodInvocation(3345) at 1", "Move SimpleName: strb(3220) into MethodInvocation(3345) at 2", "Update SimpleName: append(3221) to prefix", "Move SimpleName: append(3221) into MethodInvocation(3345) at 3", "Insert SimpleName: VarCollector(3605) into SimpleType: VarCollector(3606) at 0", "Insert SimpleName: expr(3615) into MethodInvocation(3618) at 0", "Insert SimpleName: getVariables(3616) into MethodInvocation(3618) at 1", "Insert SimpleName: collector(3617) into MethodInvocation(3618) at 2", "Insert SimpleName: IllegalArgumentException(4237) into SimpleType: IllegalArgumentException(4238) at 0", "Insert SimpleName: next(4251) into VariableDeclarationFragment(4254) at 0", "Insert MethodInvocation(4253) into VariableDeclarationFragment(4254) at 1", "Insert SimpleName: CharSequence(4257) into SimpleType: CharSequence(4258) at 0", "Insert VariableDeclarationStatement(4268) into Block(4345) at 0", "Insert VariableDeclarationStatement(4272) into Block(4345) at 1", "Insert VariableDeclarationStatement(4277) into Block(4345) at 2", "Insert TryStatement(4335) into Block(4345) at 3", "Insert ReturnStatement(4344) into Block(4345) at 4", "Insert SimpleName: Override(4347) into MarkerAnnotation(4348) at 0", "Insert ReturnStatement(4355) into Block(4356) at 0", "Insert SimpleName: Override(4358) into MarkerAnnotation(4359) at 0", "Insert SimpleName: CharSequence(4361) into SimpleType: CharSequence(4362) at 0", "Insert VariableDeclarationStatement(4369) into Block(4382) at 0", "Insert IfStatement(4379) into Block(4382) at 1", "Insert ReturnStatement(4381) into Block(4382) at 2", "Insert SimpleName: Override(4384) into MarkerAnnotation(4385) at 0", "Insert ThrowStatement(4393) into Block(4394) at 0", "Update SimpleName: reader(4133) to lines", "Update SimpleName: readLine(4134) to next", "Insert SimpleType: StringBuilder(2833) into ClassInstanceCreation(2835) at 0", "Insert NumberLiteral: 64(2834) into ClassInstanceCreation(2835) at 1", "Insert SimpleName: Iterator(2872) into SimpleType: Iterator(2873) at 0", "Insert SimpleName: CharSequence(2874) into SimpleType: CharSequence(2875) at 0", "Insert SimpleName: readLines(2878) into MethodInvocation(2883) at 0", "Insert ClassInstanceCreation(2882) into MethodInvocation(2883) at 1", "Insert MethodInvocation(2899) into ExpressionStatement(2900) at 0", "Insert SimpleName: doNext(4252) into MethodInvocation(4253) at 0", "Insert SimpleType: StringBuffer(4261) into VariableDeclarationStatement(4268) at 0", "Insert VariableDeclarationFragment(4267) into VariableDeclarationStatement(4268) at 1", "Insert PrimitiveType: int(4269) into VariableDeclarationStatement(4272) at 0", "Insert VariableDeclarationFragment(4271) into VariableDeclarationStatement(4272) at 1", "Insert PrimitiveType: boolean(4273) into VariableDeclarationStatement(4277) at 0", "Insert VariableDeclarationFragment(4276) into VariableDeclarationStatement(4277) at 1", "Insert Block(4326) into TryStatement(4335) at 0", "Move CatchClause(4365) into TryStatement(4335) at 1", "Insert ConditionalExpression(4343) into ReturnStatement(4344) at 0", "Insert InfixExpression: !=(4354) into ReturnStatement(4355) at 0", "Insert SimpleType: CharSequence(4365) into VariableDeclarationStatement(4369) at 0", "Insert VariableDeclarationFragment(4368) into VariableDeclarationStatement(4369) at 1", "Insert InfixExpression: !=(4372) into IfStatement(4379) at 0", "Insert Block(4378) into IfStatement(4379) at 1", "Insert SimpleName: current(4380) into ReturnStatement(4381) at 0", "Insert ClassInstanceCreation(4392) into ThrowStatement(4393) at 0", "Update SimpleName: inner(2510) to inner1", "Insert SimpleName: StringBuilder(2832) into SimpleType: StringBuilder(2833) at 0", "Insert SimpleType: StringReader(2880) into ClassInstanceCreation(2882) at 0", "Insert SimpleName: body(2881) into ClassInstanceCreation(2882) at 1", "Insert SimpleName: strb(2894) into MethodInvocation(2899) at 0", "Insert SimpleName: append(2895) into MethodInvocation(2899) at 1", "Insert MethodInvocation(2898) into MethodInvocation(2899) at 2", "Insert SimpleName: StringBuffer(4260) into SimpleType: StringBuffer(4261) at 0", "Insert SimpleName: strb(4262) into VariableDeclarationFragment(4267) at 0", "Insert ClassInstanceCreation(4266) into VariableDeclarationFragment(4267) at 1", "Insert SimpleName: c(4270) into VariableDeclarationFragment(4271) at 0", "Insert SimpleName: eol(4274) into VariableDeclarationFragment(4276) at 0", "Insert BooleanLiteral: false(4275) into VariableDeclarationFragment(4276) at 1", "Insert WhileStatement(4325) into Block(4326) at 0", "Insert InfixExpression: >(4340) into ConditionalExpression(4343) at 0", "Insert SimpleName: strb(4341) into ConditionalExpression(4343) at 1", "Insert NullLiteral(4342) into ConditionalExpression(4343) at 2", "Insert SimpleName: next(4352) into InfixExpression: !=(4354) at 0", "Insert NullLiteral(4353) into InfixExpression: !=(4354) at 1", "Insert SimpleName: CharSequence(4364) into SimpleType: CharSequence(4365) at 0", "Insert SimpleName: current(4366) into VariableDeclarationFragment(4368) at 0", "Insert SimpleName: next(4367) into VariableDeclarationFragment(4368) at 1", "Insert SimpleName: current(4370) into InfixExpression: !=(4372) at 0", "Insert NullLiteral(4371) into InfixExpression: !=(4372) at 1", "Insert ExpressionStatement(4377) into Block(4378) at 0", "Insert SimpleType: UnsupportedOperationException(4390) into ClassInstanceCreation(4392) at 0", "Insert StringLiteral: \"Not supported.\"(4391) into ClassInstanceCreation(4392) at 1", "Insert SimpleName: StringReader(2879) into SimpleType: StringReader(2880) at 0", "Insert SimpleName: lines(2896) into MethodInvocation(2898) at 0", "Insert SimpleName: next(2897) into MethodInvocation(2898) at 1", "Insert SimpleType: StringBuffer(4264) into ClassInstanceCreation(4266) at 0", "Insert NumberLiteral: 64(4265) into ClassInstanceCreation(4266) at 1", "Insert InfixExpression: >=(4285) into WhileStatement(4325) at 0", "Insert Block(4324) into WhileStatement(4325) at 1", "Insert MethodInvocation(4338) into InfixExpression: >(4340) at 0", "Insert NumberLiteral: 0(4339) into InfixExpression: >(4340) at 1", "Insert Assignment: =(4376) into ExpressionStatement(4377) at 0", "Insert SimpleName: UnsupportedOperationException(4389) into SimpleType: UnsupportedOperationException(4390) at 0", "Insert SimpleName: noscript(2469) into MethodInvocation(2470) at 6", "Update SimpleName: inner(2485) to inner1", "Update SimpleName: inner(2513) to inner1", "Insert SimpleName: StringBuffer(4263) into SimpleType: StringBuffer(4264) at 0", "Insert ParenthesizedExpression(4283) into InfixExpression: >=(4285) at 0", "Insert NumberLiteral: 0(4284) into InfixExpression: >=(4285) at 1", "Insert IfStatement(4302) into Block(4324) at 0", "Insert IfStatement(4311) into Block(4324) at 1", "Insert ExpressionStatement(4318) into Block(4324) at 2", "Insert ExpressionStatement(4323) into Block(4324) at 3", "Insert SimpleName: strb(4336) into MethodInvocation(4338) at 0", "Insert SimpleName: length(4337) into MethodInvocation(4338) at 1", "Insert SimpleName: next(4373) into Assignment: =(4376) at 0", "Insert MethodInvocation(4375) into Assignment: =(4376) at 1", "Insert Assignment: =(4282) into ParenthesizedExpression(4283) at 0", "Insert InfixExpression: &&(4295) into IfStatement(4302) at 0", "Insert Block(4301) into IfStatement(4302) at 1", "Insert InfixExpression: ==(4305) into IfStatement(4311) at 0", "Insert Block(4310) into IfStatement(4311) at 1", "Insert MethodInvocation(4317) into ExpressionStatement(4318) at 0", "Insert MethodInvocation(4322) into ExpressionStatement(4323) at 0", "Insert SimpleName: doNext(4374) into MethodInvocation(4375) at 0", "Update SimpleName: code(4227) to directive", "Update SimpleName: code(4245) to directive", "Insert SimpleName: c(4278) into Assignment: =(4282) at 0", "Insert MethodInvocation(4281) into Assignment: =(4282) at 1", "Insert SimpleName: eol(4286) into InfixExpression: &&(4295) at 0", "Insert ParenthesizedExpression(4294) into InfixExpression: &&(4295) at 1", "Insert ExpressionStatement(4299) into Block(4301) at 0", "Insert BreakStatement(4300) into Block(4301) at 1", "Insert SimpleName: c(4303) into InfixExpression: ==(4305) at 0", "Insert CharacterLiteral: '\\n'(4304) into InfixExpression: ==(4305) at 1", "Insert ExpressionStatement(4309) into Block(4310) at 0", "Insert SimpleName: strb(4312) into MethodInvocation(4317) at 0", "Insert SimpleName: append(4313) into MethodInvocation(4317) at 1", "Insert CastExpression(4316) into MethodInvocation(4317) at 2", "Insert SimpleName: reader(4319) into MethodInvocation(4322) at 0", "Insert SimpleName: mark(4320) into MethodInvocation(4322) at 1", "Insert NumberLiteral: 1(4321) into MethodInvocation(4322) at 2", "Insert SimpleName: reader(4279) into MethodInvocation(4281) at 0", "Insert SimpleName: read(4280) into MethodInvocation(4281) at 1", "Insert InfixExpression: &&(4293) into ParenthesizedExpression(4294) at 0", "Insert MethodInvocation(4298) into ExpressionStatement(4299) at 0", "Insert Assignment: =(4308) into ExpressionStatement(4309) at 0", "Insert PrimitiveType: char(4314) into CastExpression(4316) at 0", "Insert SimpleName: c(4315) into CastExpression(4316) at 1", "Insert SimpleName: noscript(2602) into MethodInvocation(2603) at 6", "Insert SimpleName: noscript(2621) into MethodInvocation(2622) at 6", "Insert InfixExpression: !=(4289) into InfixExpression: &&(4293) at 0", "Insert InfixExpression: !=(4292) into InfixExpression: &&(4293) at 1", "Insert SimpleName: reader(4296) into MethodInvocation(4298) at 0", "Insert SimpleName: reset(4297) into MethodInvocation(4298) at 1", "Insert SimpleName: eol(4306) into Assignment: =(4308) at 0", "Insert BooleanLiteral: true(4307) into Assignment: =(4308) at 1", "Insert SimpleName: c(4287) into InfixExpression: !=(4289) at 0", "Insert CharacterLiteral: '\\n'(4288) into InfixExpression: !=(4289) at 1", "Insert SimpleName: c(4290) into InfixExpression: !=(4292) at 0", "Insert CharacterLiteral: '\\r'(4291) into InfixExpression: !=(4292) at 1", "Delete QualifiedName: block.type(3203)", "Delete QualifiedName: BlockType.DIRECTIVE(3204)", "Delete InfixExpression: ==(3205)", "Delete Block(3211)", "Delete IfStatement(3212)", "Delete SimpleName: strb(3213)", "Delete SimpleName: append(3214)", "Delete MethodInvocation(3217)", "Delete MethodInvocation(3218)", "Delete ExpressionStatement(3219)", "Delete CharacterLiteral: '\\n'(3222)", "Delete MethodInvocation(3223)", "Delete ExpressionStatement(3224)", "Delete BooleanLiteral: true(4129)", "Delete SimpleName: strb(4204)", "Delete SimpleName: append(4205)", "Delete CharacterLiteral: '\\n'(4206)", "Delete MethodInvocation(4207)", "Delete ExpressionStatement(4208)", "Delete SimpleName: strb(4291)", "Delete SimpleName: append(4292)", "Delete CharacterLiteral: '\\n'(4293)", "Delete MethodInvocation(4294)", "Delete ExpressionStatement(4295)", "Delete BreakStatement(4158)", "Delete TryStatement(4366)", "Delete Block(4367)"]}}, {"JexlMethod_cluster": {"actions": [{"root": "UPDATE from Checks whether a tryInvoke failed or not. to Checks whether a tryInvoke return value indicates a failure or not.", "operations": ["UPD TextElement: Checks whether a tryInvoke failed or not. from Checks whether a tryInvoke failed or not. to Checks whether a tryInvoke return value indicates a failure or not."]}, {"root": "INS TextElement: <p>Usage is : <code>Object r = tryInvoke(...); if (tryFailed(r) {...} else {...}</code> to TagElement at 1", "operations": ["INS TextElement: <p>Usage is : <code>Object r = tryInvoke(...); if (tryFailed(r) {...} else {...}</code> to TagElement at 1"]}]}}, {"JexlMethod_diff": {"operations": ["Update TextElement: Checks whether a tryInvoke failed or not.(79) to Checks whether a tryInvoke return value indicates a failure or not.", "Insert TextElement: <p>Usage is : <code>Object r = tryInvoke(...); if (tryFailed(r) {...} else {...}</code>(80) into TagElement(81) at 1"]}}, {"JexlPropertyGet_cluster": {"actions": []}}, {"JexlPropertyGet_diff": {"operations": []}}, {"JexlPropertySet_cluster": {"actions": []}}, {"JexlPropertySet_diff": {"operations": []}}, {"ASTArrayLiteral_cluster": {"actions": [{"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TagElement: @inheritDoc to TagElement at 0"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TagElement: @inheritDoc to TagElement at 0"]}, {"root": "UPDATE from }  to  ", "operations": ["UPD TextElement: }  from }  to  ", "UPD TextElement: }  from }  to  "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: }  to TagElement at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: }  to TagElement at 1"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: {"]}, {"root": "DEL TagElement: @inheritDoc", "operations": ["DEL TagElement: @inheritDoc"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: {"]}, {"root": "DEL TagElement: @inheritDoc", "operations": ["DEL TagElement: @inheritDoc"]}]}}, {"ASTArrayLiteral_diff": {"operations": ["Insert TagElement(74) into Javadoc(75) at 0", "Insert TagElement(139) into Javadoc(140) at 0", "Insert TagElement: @inheritDoc(72) into TagElement(74) at 0", "Update TextElement: } (74) to  ", "Move TextElement: } (74) into TagElement(74) at 1", "Insert TagElement: @inheritDoc(137) into TagElement(139) at 0", "Update TextElement: } (140) to  ", "Move TextElement: } (140) into TagElement(139) at 1", "Delete TextElement: {(72)", "Delete TagElement(73)", "Delete TagElement: @inheritDoc(75)", "Delete TextElement: {(138)", "Delete TagElement(139)", "Delete TagElement: @inheritDoc(141)"]}}, {"ASTJexlLambda_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: parent to InfixExpression: == at 0", "INS SimpleName: isTopLevel to MethodDeclaration at 2", "INS NullLiteral to InfixExpression: == at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS InfixExpression: == to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "UPDATE from Enhanced script to allow parameters declaration. to Lambda (function).", "operations": ["UPD TextElement: Enhanced script to allow parameters declaration. from Enhanced script to allow parameters declaration. to Lambda (function)."]}]}}, {"ASTJexlLambda_diff": {"operations": ["Insert MethodDeclaration(41) into TypeDeclaration: class(90) at 7", "Insert Modifier: public(33) into MethodDeclaration(41) at 0", "Insert PrimitiveType: boolean(34) into MethodDeclaration(41) at 1", "Insert SimpleName: isTopLevel(35) into MethodDeclaration(41) at 2", "Insert Block(40) into MethodDeclaration(41) at 3", "Update TextElement: Enhanced script to allow parameters declaration.(4) to Lambda (function).", "Insert ReturnStatement(39) into Block(40) at 0", "Insert InfixExpression: ==(38) into ReturnStatement(39) at 0", "Insert SimpleName: parent(36) into InfixExpression: ==(38) at 0", "Insert NullLiteral(37) into InfixExpression: ==(38) at 1"]}}, {"ASTJexlScript_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS Block to IfStatement at 1", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: ASTJexlLambda to SimpleType: ASTJexlLambda at 0", "INS SimpleType: ASTJexlLambda to VariableDeclarationStatement at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS QualifiedName: lambda.parent to Assignment: = at 0", "INS TextElement: Consider script with no parameters that return lambda as parametric-scripts. to TagElement at 0", "INS SimpleName: ASTJexlScript to SimpleType: ASTJexlScript at 0", "INS SimpleName: children to ArrayAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 2", "INS NullLiteral to InfixExpression: == at 1", "INS ArrayAccess to InstanceofExpression at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: ASTJexlLambda to InstanceofExpression at 1", "INS SimpleName: lambda to ReturnStatement at 0", "INS ArrayAccess to CastExpression at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: children to ArrayAccess at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @return to Javadoc at 1", "INS SimpleName: ASTJexlLambda to SimpleType: ASTJexlLambda at 0", "INS ThisExpression to ReturnStatement at 0", "INS InstanceofExpression to InfixExpression: && at 1", "INS SimpleName: scope to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: script to MethodDeclaration at 3", "INS IfStatement to Block at 0", "INS SimpleType: ASTJexlLambda to CastExpression at 0", "INS SimpleName: ASTJexlLambda to SimpleType: ASTJexlLambda at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0", "INS ReturnStatement to Block at 2", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS TextElement:  the script to TagElement: @return at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS QualifiedName: children.length to InfixExpression: == at 0", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: lambda to VariableDeclarationFragment at 0", "INS SimpleType: ASTJexlScript to MethodDeclaration at 2", "INS SimpleName: children to InfixExpression: != at 0"]}]}}, {"ASTJexlScript_diff": {"operations": ["Insert MethodDeclaration(94) into TypeDeclaration: class(310) at 7", "Insert Javadoc(48) into MethodDeclaration(94) at 0", "Insert Modifier: public(49) into MethodDeclaration(94) at 1", "Insert SimpleType: ASTJexlScript(51) into MethodDeclaration(94) at 2", "Insert SimpleName: script(52) into MethodDeclaration(94) at 3", "Insert Block(93) into MethodDeclaration(94) at 4", "Insert TagElement(45) into Javadoc(48) at 0", "Insert TagElement: @return(47) into Javadoc(48) at 1", "Insert SimpleName: ASTJexlScript(50) into SimpleType: ASTJexlScript(51) at 0", "Insert IfStatement(92) into Block(93) at 0", "Insert TextElement: Consider script with no parameters that return lambda as parametric-scripts.(44) into TagElement(45) at 0", "Insert TextElement:  the script(46) into TagElement: @return(47) at 0", "Insert InfixExpression: &&(70) into IfStatement(92) at 0", "Insert Block(88) into IfStatement(92) at 1", "Insert Block(91) into IfStatement(92) at 2", "Insert InfixExpression: &&(63) into InfixExpression: &&(70) at 0", "Insert InstanceofExpression(69) into InfixExpression: &&(70) at 1", "Insert VariableDeclarationStatement(81) into Block(88) at 0", "Insert ExpressionStatement(85) into Block(88) at 1", "Insert ReturnStatement(87) into Block(88) at 2", "Insert ReturnStatement(90) into Block(91) at 0", "Insert InfixExpression: &&(59) into InfixExpression: &&(63) at 0", "Insert InfixExpression: ==(62) into InfixExpression: &&(63) at 1", "Insert ArrayAccess(66) into InstanceofExpression(69) at 0", "Insert SimpleType: ASTJexlLambda(68) into InstanceofExpression(69) at 1", "Insert SimpleType: ASTJexlLambda(72) into VariableDeclarationStatement(81) at 0", "Insert VariableDeclarationFragment(80) into VariableDeclarationStatement(81) at 1", "Insert Assignment: =(84) into ExpressionStatement(85) at 0", "Insert SimpleName: lambda(86) into ReturnStatement(87) at 0", "Insert ThisExpression(89) into ReturnStatement(90) at 0", "Insert InfixExpression: ==(55) into InfixExpression: &&(59) at 0", "Insert InfixExpression: !=(58) into InfixExpression: &&(59) at 1", "Insert QualifiedName: children.length(60) into InfixExpression: ==(62) at 0", "Insert NumberLiteral: 1(61) into InfixExpression: ==(62) at 1", "Insert SimpleName: children(64) into ArrayAccess(66) at 0", "Insert NumberLiteral: 0(65) into ArrayAccess(66) at 1", "Insert SimpleName: ASTJexlLambda(67) into SimpleType: ASTJexlLambda(68) at 0", "Insert SimpleName: ASTJexlLambda(71) into SimpleType: ASTJexlLambda(72) at 0", "Insert SimpleName: lambda(73) into VariableDeclarationFragment(80) at 0", "Insert CastExpression(79) into VariableDeclarationFragment(80) at 1", "Insert QualifiedName: lambda.parent(82) into Assignment: =(84) at 0", "Insert NullLiteral(83) into Assignment: =(84) at 1", "Insert SimpleName: scope(53) into InfixExpression: ==(55) at 0", "Insert NullLiteral(54) into InfixExpression: ==(55) at 1", "Insert SimpleName: children(56) into InfixExpression: !=(58) at 0", "Insert NullLiteral(57) into InfixExpression: !=(58) at 1", "Insert SimpleType: ASTJexlLambda(75) into CastExpression(79) at 0", "Insert ArrayAccess(78) into CastExpression(79) at 1", "Insert SimpleName: ASTJexlLambda(74) into SimpleType: ASTJexlLambda(75) at 0", "Insert SimpleName: children(76) into ArrayAccess(78) at 0", "Insert NumberLiteral: 0(77) into ArrayAccess(78) at 1"]}}, {"ASTNumberLiteral_cluster": {"actions": [{"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV MethodInvocation to IfStatement at 0", "MOV Block to MethodDeclaration at 4"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: literal to InfixExpression: == at 0", "INS SimpleName: isNaN to MethodInvocation at 1", "INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: || to InfixExpression: || at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: doubleValue to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS NullLiteral to InfixExpression: == at 1", "INS IfStatement to Block at 0", "INS StringLiteral: \"NaN\" to ReturnStatement at 0", "INS SimpleName: literal to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: clazz to InfixExpression: == at 0", "INS Block to IfStatement at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: s to MethodInvocation at 2", "INS StringLiteral: \"NaN\" to MethodInvocation at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL Block"]}]}}, {"ASTNumberLiteral_diff": {"operations": ["Move Block(175) into MethodDeclaration(195) at 4", "Insert IfStatement(95) into Block(194) at 0", "Insert IfStatement(108) into Block(194) at 1", "Insert InfixExpression: ||(91) into IfStatement(95) at 0", "Insert Block(94) into IfStatement(95) at 1", "Move MethodInvocation(83) into IfStatement(108) at 0", "Move Block(89) into IfStatement(108) at 1", "Insert InfixExpression: ||(476) into IfStatement(603) at 0", "Insert InfixExpression: ||(84) into InfixExpression: ||(91) at 0", "Insert MethodInvocation(90) into InfixExpression: ||(91) at 1", "Insert ReturnStatement(93) into Block(94) at 0", "Move MethodInvocation(454) into InfixExpression: ||(476) at 0", "Insert MethodInvocation(475) into InfixExpression: ||(476) at 1", "Insert InfixExpression: ==(80) into InfixExpression: ||(84) at 0", "Insert InfixExpression: ==(83) into InfixExpression: ||(84) at 1", "Insert SimpleName: Double(85) into MethodInvocation(90) at 0", "Insert SimpleName: isNaN(86) into MethodInvocation(90) at 1", "Insert MethodInvocation(89) into MethodInvocation(90) at 2", "Insert StringLiteral: \"NaN\"(92) into ReturnStatement(93) at 0", "Insert StringLiteral: \"NaN\"(472) into MethodInvocation(475) at 0", "Insert SimpleName: equals(473) into MethodInvocation(475) at 1", "Insert SimpleName: s(474) into MethodInvocation(475) at 2", "Insert SimpleName: literal(78) into InfixExpression: ==(80) at 0", "Insert NullLiteral(79) into InfixExpression: ==(80) at 1", "Insert SimpleName: clazz(81) into InfixExpression: ==(83) at 0", "Insert NullLiteral(82) into InfixExpression: ==(83) at 1", "Insert SimpleName: literal(87) into MethodInvocation(89) at 0", "Insert SimpleName: doubleValue(88) into MethodInvocation(89) at 1", "Delete IfStatement(176)", "Delete Block(177)"]}}, {"ASTVar_cluster": {"actions": []}}, {"ASTVar_diff": {"operations": []}}, {"StringParser_cluster": {"actions": []}}, {"StringParser_diff": {"operations": []}}, {"JexlScriptEngine_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "UPDATE from org.apache.commons.logging.LogFactory to org.apache.log4j.LogManager", "operations": ["UPD QualifiedName: org.apache.commons.logging.LogFactory from org.apache.commons.logging.LogFactory to org.apache.log4j.LogManager"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "UPDATE from LogFactory to LogManager", "operations": ["UPD SimpleName: LogFactory from LogFactory to LogManager"]}, {"root": "UPDATE from getLog to getLogger", "operations": ["UPD SimpleName: getLog from getLog to getLogger"]}]}}, {"JexlScriptEngine_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(38) to org.apache.log4j.Logger", "Update QualifiedName: org.apache.commons.logging.LogFactory(40) to org.apache.log4j.LogManager", "Update SimpleType: Log(78) to Logger", "Update SimpleName: Log(77) to Logger", "Update SimpleType: Log(332) to Logger", "Update SimpleName: LogFactory(80) to LogManager", "Update SimpleName: getLog(81) to getLogger", "Update SimpleName: Log(331) to Logger"]}}, {"Main_cluster": {"actions": []}}, {"Main_diff": {"operations": []}}, {"AbstractExecutor_cluster": {"actions": [{"root": "INS SimpleName: castInteger to MethodDeclaration at 3", "operations": ["INS SimpleName: castInteger to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV InstanceofExpression to ConditionalExpression at 0"]}, {"root": "UPDATE from toString to castString", "operations": ["UPD SimpleName: toString from toString to castString"]}, {"root": "UPDATE from Coerce an Object  to an Integer. to Coerce an Object which must be a number to an Integer.", "operations": ["UPD TextElement: Coerce an Object  to an Integer. from Coerce an Object  to an Integer. to Coerce an Object which must be a number to an Integer."]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS ConditionalExpression to ReturnStatement at 0", "INS NullLiteral to ConditionalExpression at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "INS InfixExpression: || to ConditionalExpression at 0", "operations": ["INS SimpleType: Integer to InstanceofExpression at 1", "INS InstanceofExpression to InfixExpression: || at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS InfixExpression: || to ConditionalExpression at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleType: CharSequence to InstanceofExpression at 1", "INS SimpleName: arg to InstanceofExpression at 0", "INS SimpleName: arg to InstanceofExpression at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "INS NullLiteral to ConditionalExpression at 2", "operations": ["INS NullLiteral to ConditionalExpression at 2"]}, {"root": "DEL SimpleName: toInteger", "operations": ["DEL SimpleName: toInteger"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: valueOf", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: Integer", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: NumberFormatException", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: xnumber", "DEL ReturnStatement", "DEL SimpleType: NumberFormatException", "DEL SimpleName: arg", "DEL ReturnStatement", "DEL MethodInvocation", "DEL CatchClause", "DEL NullLiteral", "DEL Block", "DEL NullLiteral"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: arg", "DEL InfixExpression: ==", "DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: arg", "DEL MethodInvocation", "DEL SimpleName: toString"]}]}}, {"AbstractExecutor_diff": {"operations": ["Insert SimpleName: castInteger(108) into MethodDeclaration(131) at 3", "Move Block(134) into MethodDeclaration(131) at 6", "Update SimpleName: toString(168) to castString", "Update TextElement: Coerce an Object  to an Integer.(97) to Coerce an Object which must be a number to an Integer.", "Insert ConditionalExpression(128) into ReturnStatement(129) at 0", "Move InstanceofExpression(122) into ConditionalExpression(128) at 0", "Move MethodInvocation(132) into ConditionalExpression(128) at 1", "Insert NullLiteral(127) into ConditionalExpression(128) at 2", "Insert InfixExpression: ||(156) into ConditionalExpression(161) at 0", "Move MethodInvocation(139) into ConditionalExpression(161) at 1", "Insert NullLiteral(160) into ConditionalExpression(161) at 2", "Insert InstanceofExpression(151) into InfixExpression: ||(156) at 0", "Insert InstanceofExpression(155) into InfixExpression: ||(156) at 1", "Insert SimpleName: arg(148) into InstanceofExpression(151) at 0", "Insert SimpleType: CharSequence(150) into InstanceofExpression(151) at 1", "Insert SimpleName: arg(152) into InstanceofExpression(155) at 0", "Insert SimpleType: Integer(154) into InstanceofExpression(155) at 1", "Insert SimpleName: CharSequence(149) into SimpleType: CharSequence(150) at 0", "Insert SimpleName: Integer(153) into SimpleType: Integer(154) at 0", "Delete SimpleName: toInteger(108)", "Delete SimpleName: arg(113)", "Delete NullLiteral(114)", "Delete InfixExpression: ==(115)", "Delete NullLiteral(116)", "Delete ReturnStatement(117)", "Delete Block(118)", "Delete SimpleName: Integer(135)", "Delete SimpleName: valueOf(136)", "Delete MethodInvocation(140)", "Delete ReturnStatement(141)", "Delete Block(142)", "Delete SimpleName: NumberFormatException(143)", "Delete SimpleType: NumberFormatException(144)", "Delete SimpleName: xnumber(145)", "Delete SingleVariableDeclaration(146)", "Delete NullLiteral(147)", "Delete ReturnStatement(148)", "Delete Block(149)", "Delete CatchClause(150)", "Delete TryStatement(151)", "Delete Block(152)", "Delete IfStatement(153)", "Delete IfStatement(154)", "Delete Block(155)", "Delete SimpleName: arg(173)", "Delete NullLiteral(174)", "Delete InfixExpression: ==(175)", "Delete NullLiteral(176)", "Delete SimpleName: arg(177)", "Delete SimpleName: toString(178)", "Delete MethodInvocation(179)"]}}, {"ArrayIterator_cluster": {"actions": []}}, {"ArrayIterator_diff": {"operations": []}}, {"BooleanGetExecutor_cluster": {"actions": []}}, {"BooleanGetExecutor_diff": {"operations": []}}, {"ClassMap_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}]}}, {"ClassMap_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.apache.log4j.Logger", "Update SimpleType: Log(179) to Logger", "Update SimpleType: Log(527) to Logger", "Update SimpleType: Log(780) to Logger", "Update SimpleType: Log(858) to Logger", "Update SimpleName: Log(178) to Logger", "Update SimpleName: Log(526) to Logger", "Update SimpleName: Log(779) to Logger", "Update SimpleName: Log(857) to Logger"]}}, {"ConstructorMethod_cluster": {"actions": []}}, {"ConstructorMethod_diff": {"operations": []}}, {"DuckSetExecutor_cluster": {"actions": []}}, {"DuckSetExecutor_diff": {"operations": []}}, {"EnumerationIterator_cluster": {"actions": [{"root": "UPDATE from Creates a new iteratorwrapper instance for the specified  to Creates a new iteratorwrapper instance for the specified", "operations": ["UPD TextElement: Creates a new iteratorwrapper instance for the specified  from Creates a new iteratorwrapper instance for the specified  to Creates a new iteratorwrapper instance for the specified"]}]}}, {"EnumerationIterator_diff": {"operations": ["Update TextElement: Creates a new iteratorwrapper instance for the specified (38) to Creates a new iteratorwrapper instance for the specified"]}}, {"FieldGetExecutor_cluster": {"actions": []}}, {"FieldGetExecutor_diff": {"operations": []}}, {"FieldSetExecutor_cluster": {"actions": []}}, {"FieldSetExecutor_diff": {"operations": []}}, {"IndexedType_cluster": {"actions": []}}, {"IndexedType_diff": {"operations": []}}, {"Introspector_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger"]}, {"root": "UPDATE from for the class in question. Basically the class method map is a Hastable where to for the class in question.", "operations": ["UPD TextElement: for the class in question. Basically the class method map is a Hastable where from for the class in question. Basically the class method map is a Hastable where to for the class in question."]}, {"root": "UPDATE from Method objects are keyed by a concatenation of the method name and the names to Basically the class method map is a Hashtable where Method objects are keyed by the aggregation of", "operations": ["UPD TextElement: Method objects are keyed by a concatenation of the method name and the names from Method objects are keyed by a concatenation of the method name and the names to Basically the class method map is a Hashtable where Method objects are keyed by the aggregation of"]}, {"root": "UPDATE from of classes that make up the parameters. to the method name and the array of parameters classes.", "operations": ["UPD TextElement: of classes that make up the parameters. from of classes that make up the parameters. to the method name and the array of parameters classes."]}, {"root": "UPDATE from This mapping is performed for all the methods in a class and stored. to This mapping is performed for all the public methods of a class and stored.", "operations": ["UPD TextElement: This mapping is performed for all the methods in a class and stored. from This mapping is performed for all the methods in a class and stored. to This mapping is performed for all the public methods of a class and stored."]}, {"root": "DEL TextElement: For example, a method with the following signature:", "operations": ["DEL TextElement: For example, a method with the following signature:"]}, {"root": "DEL TextElement: public void method(String a, StringBuffer b)", "operations": ["DEL TextElement: public void method(String a, StringBuffer b)"]}, {"root": "DEL TextElement: would be mapped by the key:", "operations": ["DEL TextElement: would be mapped by the key:"]}, {"root": "DEL TextElement: \"method\" + \"java.lang.String\" + \"java.lang.StringBuffer\"", "operations": ["DEL TextElement: \"method\" + \"java.lang.String\" + \"java.lang.StringBuffer\""]}]}}, {"Introspector_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(2) to org.apache.log4j.Logger", "Update SimpleType: Log(89) to Logger", "Update TextElement: for the class in question. Basically the class method map is a Hastable where(31) to for the class in question.", "Update TextElement: Method objects are keyed by a concatenation of the method name and the names(32) to Basically the class method map is a Hashtable where Method objects are keyed by the aggregation of", "Update TextElement: of classes that make up the parameters.(33) to the method name and the array of parameters classes.", "Update TextElement: This mapping is performed for all the methods in a class and stored.(38) to This mapping is performed for all the public methods of a class and stored.", "Update SimpleName: Log(88) to Logger", "Update SimpleType: Log(208) to Logger", "Update SimpleName: Log(207) to Logger", "Delete TextElement: For example, a method with the following signature:(34)", "Delete TextElement: public void method(String a, StringBuffer b)(35)", "Delete TextElement: would be mapped by the key:(36)", "Delete TextElement: \"method\" + \"java.lang.String\" + \"java.lang.StringBuffer\"(37)"]}}, {"ListGetExecutor_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: index to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 1", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 8", "INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Integer to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from identifier to index", "operations": ["UPD SimpleName: identifier from identifier to index", "UPD SimpleName: identifier from identifier to index", "UPD SimpleName: identifier from identifier to index", "UPD SimpleName: identifier from identifier to index"]}, {"root": "UPDATE from  the property to get to  the index to use as an argument to the get method", "operations": ["UPD TextElement:  the property to get from  the property to get to  the index to use as an argument to the get method", "UPD TextElement:  the key to use as an argument to the get method from  the key to use as an argument to the get method to  the index to use as an argument to the get method"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from toInteger to castInteger", "operations": ["UPD SimpleName: toInteger from toInteger to castInteger"]}, {"root": "UPDATE from key to identifier", "operations": ["UPD SimpleName: key from key to identifier"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: clazz to ClassInstanceCreation at 1", "INS SimpleName: ARRAY_GET to ClassInstanceCreation at 2", "INS SimpleType: ListGetExecutor to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: index to ClassInstanceCreation at 3", "INS SimpleName: ListGetExecutor to SimpleType: ListGetExecutor at 0", "INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "INS ClassInstanceCreation to ReturnStatement at 0", "operations": ["INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ListGetExecutor to ClassInstanceCreation at 0", "MOV SimpleName: clazz to ClassInstanceCreation at 1", "MOV SimpleName: index to ClassInstanceCreation at 3", "MOV SimpleName: method to ClassInstanceCreation at 2"]}, {"root": "UPDATE from method to LIST_GET", "operations": ["UPD SimpleName: method from method to LIST_GET"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL Block", "DEL SimpleName: LIST_GET", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: method", "DEL ExpressionStatement", "DEL SimpleName: ARRAY_GET", "DEL IfStatement", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: method"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL NullLiteral", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL ConditionalExpression", "DEL SimpleName: method", "DEL ClassInstanceCreation"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: index", "DEL SimpleName: identifier", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: method", "DEL VariableDeclarationStatement", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: toInteger", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleType: java.lang.reflect.Method", "DEL VariableDeclarationFragment"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: key", "DEL SimpleType: Object"]}]}}, {"ListGetExecutor_diff": {"operations": ["Insert SingleVariableDeclaration(97) into MethodDeclaration(133) at 7", "Insert Block(132) into MethodDeclaration(133) at 8", "Move SingleVariableDeclaration(97) into MethodDeclaration(294) at 5", "Move SimpleType: Integer(105) into SingleVariableDeclaration(97) at 0", "Insert SimpleName: index(96) into SingleVariableDeclaration(97) at 1", "Insert IfStatement(129) into Block(132) at 0", "Insert ReturnStatement(131) into Block(132) at 1", "Update SimpleName: identifier(178) to index", "Update SimpleName: identifier(73) to index", "Update TextElement:  the key to use as an argument to the get method(74) to  the index to use as an argument to the get method", "Move InfixExpression: !=(114) into IfStatement(129) at 0", "Insert Block(128) into IfStatement(129) at 1", "Insert NullLiteral(130) into ReturnStatement(131) at 0", "Update SimpleName: identifier(160) to index", "Update TextElement:  the property to get(161) to  the index to use as an argument to the get method", "Move IfStatement(137) into Block(128) at 0", "Insert IfStatement(127) into Block(128) at 1", "Update SimpleName: identifier(184) to index", "Move MethodInvocation(117) into IfStatement(112) at 0", "Move MethodInvocation(128) into IfStatement(127) at 0", "Insert Block(126) into IfStatement(127) at 1", "Update SimpleName: toInteger(257) to castInteger", "Update SimpleName: key(258) to identifier", "Insert ReturnStatement(110) into Block(111) at 0", "Move ReturnStatement(149) into Block(126) at 0", "Insert ClassInstanceCreation(109) into ReturnStatement(110) at 0", "Insert ClassInstanceCreation(124) into ReturnStatement(125) at 0", "Insert SimpleType: ListGetExecutor(105) into ClassInstanceCreation(109) at 0", "Insert SimpleName: clazz(106) into ClassInstanceCreation(109) at 1", "Insert SimpleName: ARRAY_GET(107) into ClassInstanceCreation(109) at 2", "Insert SimpleName: index(108) into ClassInstanceCreation(109) at 3", "Move SimpleType: ListGetExecutor(143) into ClassInstanceCreation(124) at 0", "Move SimpleName: clazz(144) into ClassInstanceCreation(124) at 1", "Update SimpleName: method(145) to LIST_GET", "Move SimpleName: method(145) into ClassInstanceCreation(124) at 2", "Move SimpleName: index(146) into ClassInstanceCreation(124) at 3", "Insert SimpleName: ListGetExecutor(104) into SimpleType: ListGetExecutor(105) at 0", "Delete SimpleName: method(118)", "Delete SimpleName: ARRAY_GET(119)", "Delete Assignment: =(120)", "Delete ExpressionStatement(121)", "Delete Block(122)", "Delete SimpleName: method(129)", "Delete SimpleName: LIST_GET(130)", "Delete Assignment: =(131)", "Delete ExpressionStatement(132)", "Delete Block(133)", "Delete IfStatement(134)", "Delete IfStatement(135)", "Delete SimpleName: method(138)", "Delete NullLiteral(139)", "Delete InfixExpression: ==(140)", "Delete NullLiteral(141)", "Delete ClassInstanceCreation(147)", "Delete ConditionalExpression(148)", "Delete QualifiedName: java.lang.reflect.Method(98)", "Delete SimpleType: java.lang.reflect.Method(99)", "Delete SimpleName: method(100)", "Delete NullLiteral(101)", "Delete VariableDeclarationFragment(102)", "Delete VariableDeclarationStatement(103)", "Delete SimpleName: index(106)", "Delete SimpleName: toInteger(107)", "Delete SimpleName: identifier(108)", "Delete MethodInvocation(109)", "Delete VariableDeclarationFragment(110)", "Delete VariableDeclarationStatement(111)", "Delete Block(150)", "Delete SimpleName: Object(250)", "Delete SimpleType: Object(251)", "Delete SimpleName: key(252)", "Delete SingleVariableDeclaration(253)"]}}, {"ListSetExecutor_cluster": {"actions": [{"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 1"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS NullLiteral to ReturnStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ReturnStatement to Block at 0"]}, {"root": "UPDATE from toInteger to castInteger", "operations": ["UPD SimpleName: toInteger from toInteger to castInteger", "UPD SimpleName: toInteger from toInteger to castInteger"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: index to ClassInstanceCreation at 3", "INS SimpleType: ListSetExecutor to ClassInstanceCreation at 0", "INS SimpleName: ListSetExecutor to SimpleType: ListSetExecutor at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: clazz to ClassInstanceCreation at 1", "INS SimpleName: ARRAY_SET to ClassInstanceCreation at 2"]}, {"root": "INS ClassInstanceCreation to ReturnStatement at 0", "operations": ["INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleName: index to ClassInstanceCreation at 3", "MOV SimpleName: clazz to ClassInstanceCreation at 1", "MOV SimpleType: ListSetExecutor to ClassInstanceCreation at 0", "MOV SimpleName: method to ClassInstanceCreation at 2"]}, {"root": "UPDATE from method to LIST_SET", "operations": ["UPD SimpleName: method from method to LIST_SET"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: ARRAY_SET", "DEL SimpleName: LIST_SET", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: method", "DEL SimpleName: method", "DEL IfStatement", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL ConditionalExpression", "operations": ["DEL ClassInstanceCreation", "DEL ConditionalExpression", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: method", "DEL NullLiteral"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: method", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleType: java.lang.reflect.Method", "DEL VariableDeclarationStatement"]}]}}, {"ListSetExecutor_diff": {"operations": ["Insert IfStatement(150) into Block(153) at 1", "Insert ReturnStatement(152) into Block(153) at 2", "Move InfixExpression: !=(127) into IfStatement(150) at 0", "Insert Block(149) into IfStatement(150) at 1", "Insert NullLiteral(151) into ReturnStatement(152) at 0", "Move IfStatement(150) into Block(149) at 0", "Insert IfStatement(148) into Block(149) at 1", "Update SimpleName: toInteger(114) to castInteger", "Move MethodInvocation(130) into IfStatement(133) at 0", "Move MethodInvocation(141) into IfStatement(148) at 0", "Insert Block(147) into IfStatement(148) at 1", "Update SimpleName: toInteger(295) to castInteger", "Insert ReturnStatement(131) into Block(132) at 0", "Move ReturnStatement(162) into Block(147) at 0", "Insert ClassInstanceCreation(130) into ReturnStatement(131) at 0", "Insert ClassInstanceCreation(145) into ReturnStatement(146) at 0", "Insert SimpleType: ListSetExecutor(126) into ClassInstanceCreation(130) at 0", "Insert SimpleName: clazz(127) into ClassInstanceCreation(130) at 1", "Insert SimpleName: ARRAY_SET(128) into ClassInstanceCreation(130) at 2", "Insert SimpleName: index(129) into ClassInstanceCreation(130) at 3", "Move SimpleType: ListSetExecutor(156) into ClassInstanceCreation(145) at 0", "Move SimpleName: clazz(157) into ClassInstanceCreation(145) at 1", "Update SimpleName: method(158) to LIST_SET", "Move SimpleName: method(158) into ClassInstanceCreation(145) at 2", "Move SimpleName: index(159) into ClassInstanceCreation(145) at 3", "Insert SimpleName: ListSetExecutor(125) into SimpleType: ListSetExecutor(126) at 0", "Delete SimpleName: method(131)", "Delete SimpleName: ARRAY_SET(132)", "Delete Assignment: =(133)", "Delete ExpressionStatement(134)", "Delete Block(135)", "Delete SimpleName: method(142)", "Delete SimpleName: LIST_SET(143)", "Delete Assignment: =(144)", "Delete ExpressionStatement(145)", "Delete Block(146)", "Delete IfStatement(147)", "Delete IfStatement(148)", "Delete SimpleName: method(151)", "Delete NullLiteral(152)", "Delete InfixExpression: ==(153)", "Delete NullLiteral(154)", "Delete ClassInstanceCreation(160)", "Delete ConditionalExpression(161)", "Delete QualifiedName: java.lang.reflect.Method(119)", "Delete SimpleType: java.lang.reflect.Method(120)", "Delete SimpleName: method(121)", "Delete NullLiteral(122)", "Delete VariableDeclarationFragment(123)", "Delete VariableDeclarationStatement(124)"]}}, {"MapGetExecutor_cluster": {"actions": []}}, {"MapGetExecutor_diff": {"operations": []}}, {"MapSetExecutor_cluster": {"actions": []}}, {"MapSetExecutor_diff": {"operations": []}}, {"MethodExecutor_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: If this method is a vararg method, vaClass is the component type of the vararg array.  to TagElement at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS TagElement to Javadoc at 0", "INS Modifier: private to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: vaClass to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: vastart to Assignment: = at 1", "INS SimpleName: vastart to VariableDeclarationFragment at 0", "INS SimpleName: formal to InfixExpression: != at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: vaclass to Assignment: = at 1", "INS Modifier: private to MethodDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: vaClass to Assignment: = at 0", "INS NullLiteral to InfixExpression: != at 1", "INS PrefixExpression: - to VariableDeclarationFragment at 1", "INS SimpleName: vaStart to Assignment: = at 0", "INS InfixExpression: && to IfStatement at 0", "INS ExpressionStatement to Block at 4", "INS IfStatement to Block at 1", "INS VariableDeclarationStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: vastart to Assignment: = at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 5", "INS Block to MethodDeclaration at 6", "INS SimpleName: vaclass to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS IfStatement to Block at 3", "INS SimpleName: vaclass to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: invoke to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Block to MethodDeclaration at 8"]}, {"root": "UPDATE from boolean to int", "operations": ["UPD PrimitiveType: boolean from boolean to int"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: Class<?> to FieldDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: MethodExecutor to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: IllegalAccessException to MethodDeclaration at 6", "MOV SimpleType: Object to MethodDeclaration at 2", "MOV SimpleType: InvocationTargetException to MethodDeclaration at 7", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 1", "INS StringLiteral: \"SuspiciousSystemArraycopy\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS SimpleName: vastart to VariableDeclarationFragment at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: vaStart to VariableDeclarationFragment at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: vaclass to VariableDeclarationFragment at 0", "INS SimpleName: vaClass to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 8", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from isVarArgs to vaStart", "operations": ["UPD SimpleName: isVarArgs from isVarArgs to vaStart"]}, {"root": "MOVE from Block", "operations": ["MOV SuperConstructorInvocation to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV IfStatement to Block at 3", "MOV ReturnStatement to Block at 4"]}, {"root": "UPDATE from Whether this method handles varargs.  to If this method is a vararg method, vaStart is the last argument index. ", "operations": ["UPD TextElement: Whether this method handles varargs.  from Whether this method handles varargs.  to If this method is a vararg method, vaStart is the last argument index. "]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Class<?> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "UPDATE from >= to !=", "operations": ["UPD InfixExpression: >= from >= to !="]}, {"root": "UPDATE from  The actual parameters being passed to this method to  The actual arguments being passed to this method", "operations": ["UPD TextElement:  The actual parameters being passed to this method from  The actual parameters being passed to this method to  The actual arguments being passed to this method"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Class<?> to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from index to vaClass", "operations": ["UPD SimpleName: index from index to vaClass"]}, {"root": "INS NullLiteral to InfixExpression: >= at 2", "operations": ["INS NullLiteral to InfixExpression: >= at 2"]}, {"root": "UPDATE from size to varargc", "operations": ["UPD SimpleName: size from size to varargc", "UPD SimpleName: size from size to varargc", "UPD SimpleName: size from size to varargc"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from index to vastart", "operations": ["UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: i from i to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart", "UPD SimpleName: index from index to vastart"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: Object[] to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from lastActual to varargs", "operations": ["UPD SimpleName: lastActual from lastActual to varargs", "UPD SimpleName: lastActual from lastActual to varargs"]}, {"root": "UPDATE from Array to System", "operations": ["UPD SimpleName: Array from Array to System"]}, {"root": "UPDATE from set to arraycopy", "operations": ["UPD SimpleName: set from set to arraycopy"]}, {"root": "UPDATE from lastActual to actual", "operations": ["UPD SimpleName: lastActual from lastActual to actual"]}, {"root": "INS SimpleName: varargs to MethodInvocation at 4", "operations": ["INS SimpleName: varargs to MethodInvocation at 4"]}, {"root": "INS NumberLiteral: 0 to MethodInvocation at 5", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 5"]}, {"root": "INS SimpleName: varargc to MethodInvocation at 6", "operations": ["INS SimpleName: varargc to MethodInvocation at 6"]}, {"root": "UPDATE from isVarArgMethod to method", "operations": ["UPD SimpleName: isVarArgMethod from isVarArgMethod to method"]}, {"root": "UPDATE from method to isVarArgs", "operations": ["UPD SimpleName: method from method to isVarArgs"]}, {"root": "UPDATE from type to vaclass", "operations": ["UPD SimpleName: type from type to vaclass", "UPD SimpleName: type from type to vaclass", "UPD SimpleName: type from type to vaclass"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: Object[] to ArrayCreation at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV InfixExpression: - to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getComponentType to MethodInvocation at 1", "MOV ArrayAccess to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "DEL QualifiedName: args.length", "operations": ["DEL QualifiedName: args.length"]}, {"root": "DEL SimpleName: type", "operations": ["DEL SimpleName: type"]}, {"root": "DEL SimpleName: index", "operations": ["DEL SimpleName: index"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL Modifier: private", "DEL Block", "DEL Assignment: =", "DEL SimpleName: isVarArgs"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Block", "DEL Block", "DEL SimpleName: index", "DEL SimpleName: isVarArgs", "DEL SimpleName: type", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: invoke", "DEL MethodInvocation", "DEL IfStatement", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL VariableDeclarationFragment"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: type"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: index"]}, {"root": "DEL ArrayAccess", "operations": ["DEL SimpleName: actual", "DEL ArrayAccess", "DEL SimpleName: i", "DEL InfixExpression: +", "DEL SimpleName: index"]}, {"root": "DEL ForStatement", "operations": ["DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL Block", "DEL SimpleName: size", "DEL SimpleName: i", "DEL SimpleName: i", "DEL ForStatement", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL VariableDeclarationExpression", "DEL PostfixExpression: ++", "DEL SimpleName: i"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL IfStatement", "DEL NullLiteral", "DEL NumberLiteral: 1", "DEL QualifiedName: formal.length", "DEL BooleanLiteral: false", "DEL InfixExpression: -", "DEL SimpleName: getParameterTypes", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleName: m", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL ArrayAccess", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleType: Class", "DEL SimpleName: isArray", "DEL SimpleName: formal", "DEL Javadoc", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: last", "DEL Block", "DEL TagElement", "DEL ArrayType: Class<?>[]", "DEL QualifiedName: java.lang.reflect.Method", "DEL PrimitiveType: boolean", "DEL TextElement:  true if method is vararg, false otherwise", "DEL VariableDeclarationFragment", "DEL SimpleName: formal", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL InfixExpression: ||", "DEL SimpleName: Class", "DEL TextElement:  a the method to check", "DEL WildcardType: ?", "DEL TextElement: Determines if a method can accept a variable number of arguments.", "DEL SimpleName: formal", "DEL SimpleName: isVarArgMethod", "DEL SimpleType: java.lang.reflect.Method", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: m", "DEL SimpleName: m", "DEL InfixExpression: ==", "DEL Block", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TagElement: @return", "DEL ParameterizedType: Class<?>", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SimpleName: last", "DEL QualifiedName: formal.length"]}]}}, {"MethodExecutor_diff": {"operations": ["Insert FieldDeclaration(36) into TypeDeclaration: class(588) at 6", "Insert MethodDeclaration(276) into TypeDeclaration: class(588) at 8", "Insert MethodDeclaration(340) into TypeDeclaration: class(588) at 9", "Update PrimitiveType: boolean(21) to int", "Insert Javadoc(27) into FieldDeclaration(36) at 0", "Insert Modifier: private(28) into FieldDeclaration(36) at 1", "Insert Modifier: final(29) into FieldDeclaration(36) at 2", "Move ParameterizedType: Class<?>(584) into FieldDeclaration(36) at 3", "Insert VariableDeclarationFragment(35) into FieldDeclaration(36) at 4", "Move Javadoc(180) into MethodDeclaration(276) at 0", "Insert Modifier: private(193) into MethodDeclaration(276) at 1", "Move SimpleName: MethodExecutor(182) into MethodDeclaration(276) at 2", "Move SingleVariableDeclaration(188) into MethodDeclaration(276) at 3", "Move SingleVariableDeclaration(192) into MethodDeclaration(276) at 4", "Move SingleVariableDeclaration(196) into MethodDeclaration(276) at 5", "Insert Block(275) into MethodDeclaration(276) at 6", "Move MarkerAnnotation(214) into MethodDeclaration(340) at 0", "Insert Modifier: public(279) into MethodDeclaration(340) at 1", "Move SimpleType: Object(217) into MethodDeclaration(340) at 2", "Insert SimpleName: invoke(282) into MethodDeclaration(340) at 3", "Move SingleVariableDeclaration(222) into MethodDeclaration(340) at 4", "Move SingleVariableDeclaration(228) into MethodDeclaration(340) at 5", "Move SimpleType: IllegalAccessException(230) into MethodDeclaration(340) at 6", "Move SimpleType: InvocationTargetException(232) into MethodDeclaration(340) at 7", "Insert Block(339) into MethodDeclaration(340) at 8", "Insert SingleMemberAnnotation(431) into MethodDeclaration(587) at 1", "Insert Block(586) into MethodDeclaration(587) at 6", "Update SimpleName: isVarArgs(22) to vaStart", "Insert TagElement(26) into Javadoc(27) at 0", "Insert SimpleName: vaClass(34) into VariableDeclarationFragment(35) at 0", "Move SuperConstructorInvocation(200) into Block(275) at 0", "Insert VariableDeclarationStatement(218) into Block(275) at 1", "Insert VariableDeclarationStatement(226) into Block(275) at 2", "Insert IfStatement(266) into Block(275) at 3", "Insert ExpressionStatement(270) into Block(275) at 4", "Insert ExpressionStatement(274) into Block(275) at 5", "Move IfStatement(277) into Block(339) at 0", "Move IfStatement(310) into Block(339) at 1", "Insert SimpleName: SuppressWarnings(429) into SingleMemberAnnotation(431) at 0", "Insert StringLiteral: \"SuspiciousSystemArraycopy\"(430) into SingleMemberAnnotation(431) at 1", "Insert VariableDeclarationStatement(452) into Block(586) at 0", "Insert VariableDeclarationStatement(458) into Block(586) at 1", "Move VariableDeclarationStatement(429) into Block(586) at 2", "Move IfStatement(560) into Block(586) at 3", "Move ReturnStatement(562) into Block(586) at 4", "Update TextElement: Whether this method handles varargs. (16) to If this method is a vararg method, vaStart is the last argument index. ", "Insert TextElement: If this method is a vararg method, vaClass is the component type of the vararg array. (25) into TagElement(26) at 0", "Insert PrimitiveType: int(213) into VariableDeclarationStatement(218) at 0", "Insert VariableDeclarationFragment(217) into VariableDeclarationStatement(218) at 1", "Move ParameterizedType: Class<?>(256) into VariableDeclarationStatement(226) at 0", "Insert VariableDeclarationFragment(225) into VariableDeclarationStatement(226) at 1", "Move InfixExpression: !=(204) into IfStatement(266) at 0", "Insert Block(265) into IfStatement(266) at 1", "Insert Assignment: =(269) into ExpressionStatement(270) at 0", "Insert Assignment: =(273) into ExpressionStatement(274) at 0", "Update InfixExpression: >=(267) to !=", "Update TextElement:  The actual parameters being passed to this method(395) to  The actual arguments being passed to this method", "Insert Modifier: final(444) into VariableDeclarationStatement(452) at 0", "Move ParameterizedType: Class<?>(410) into VariableDeclarationStatement(452) at 1", "Insert VariableDeclarationFragment(451) into VariableDeclarationStatement(452) at 2", "Insert Modifier: final(453) into VariableDeclarationStatement(458) at 0", "Insert PrimitiveType: int(454) into VariableDeclarationStatement(458) at 1", "Insert VariableDeclarationFragment(457) into VariableDeclarationStatement(458) at 2", "Insert SimpleName: vastart(214) into VariableDeclarationFragment(217) at 0", "Insert PrefixExpression: -(216) into VariableDeclarationFragment(217) at 1", "Insert SimpleName: vaclass(223) into VariableDeclarationFragment(225) at 0", "Insert NullLiteral(224) into VariableDeclarationFragment(225) at 1", "Move VariableDeclarationStatement(245) into Block(265) at 0", "Insert IfStatement(264) into Block(265) at 1", "Insert SimpleName: vaStart(267) into Assignment: =(269) at 0", "Insert SimpleName: vastart(268) into Assignment: =(269) at 1", "Insert SimpleName: vaClass(271) into Assignment: =(273) at 0", "Insert SimpleName: vaclass(272) into Assignment: =(273) at 1", "Update SimpleName: index(266) to vaClass", "Insert NullLiteral(298) into InfixExpression: !=(299) at 1", "Insert SimpleName: vaclass(449) into VariableDeclarationFragment(451) at 0", "Insert SimpleName: vaClass(450) into VariableDeclarationFragment(451) at 1", "Insert SimpleName: vastart(455) into VariableDeclarationFragment(457) at 0", "Insert SimpleName: vaStart(456) into VariableDeclarationFragment(457) at 1", "Update SimpleName: size(424) to varargc", "Update SimpleName: size(430) to varargc", "Move ExpressionStatement(522) into Block(582) at 1", "Insert NumberLiteral: 1(215) into PrefixExpression: -(216) at 0", "Insert InfixExpression: &&(248) into IfStatement(264) at 0", "Insert Block(263) into IfStatement(264) at 1", "Update SimpleName: index(426) to vastart", "Move SimpleType: Object(463) into VariableDeclarationStatement(538) at 0", "Move ArrayType: Object[](533) into VariableDeclarationStatement(562) at 0", "Insert InfixExpression: !=(244) into InfixExpression: &&(248) at 0", "Move MethodInvocation(207) into InfixExpression: &&(248) at 1", "Insert ExpressionStatement(254) into Block(263) at 0", "Insert ExpressionStatement(262) into Block(263) at 1", "Update SimpleName: lastActual(494) to varargs", "Update SimpleName: Array(512) to System", "Update SimpleName: set(513) to arraycopy", "Update SimpleName: lastActual(514) to actual", "Update SimpleName: i(515) to vastart", "Insert SimpleName: varargs(543) into MethodInvocation(546) at 4", "Insert NumberLiteral: 0(544) into MethodInvocation(546) at 5", "Insert SimpleName: varargc(545) into MethodInvocation(546) at 6", "Update SimpleName: index(546) to vastart", "Update SimpleName: lastActual(552) to varargs", "Insert SimpleName: formal(242) into InfixExpression: !=(244) at 0", "Insert NullLiteral(243) into InfixExpression: !=(244) at 1", "Update SimpleName: isVarArgMethod(205) to method", "Update SimpleName: method(206) to isVarArgs", "Insert Assignment: =(253) into ExpressionStatement(254) at 0", "Insert Assignment: =(261) into ExpressionStatement(262) at 0", "Update SimpleName: index(434) to vastart", "Update SimpleName: type(497) to vaclass", "Update SimpleName: size(498) to varargc", "Move ArrayType: Object[](528) into ArrayCreation(560) at 0", "Update SimpleName: index(550) to vastart", "Insert SimpleName: vastart(249) into Assignment: =(253) at 0", "Move InfixExpression: -(250) into Assignment: =(253) at 1", "Insert SimpleName: vaclass(255) into Assignment: =(261) at 0", "Insert MethodInvocation(260) into Assignment: =(261) at 1", "Update SimpleName: index(534) to vastart", "Move ArrayAccess(260) into MethodInvocation(260) at 0", "Move SimpleName: getComponentType(261) into MethodInvocation(260) at 1", "Move SimpleType: Object(493) into VariableDeclarationStatement(508) at 0", "Update SimpleName: index(259) to vastart", "Update SimpleName: index(444) to vastart", "Update SimpleName: type(454) to vaclass", "Update SimpleName: type(467) to vaclass", "Update SimpleName: index(477) to vastart", "Update SimpleName: index(482) to vastart", "Delete QualifiedName: args.length(265)", "Delete SimpleName: type(270)", "Delete SimpleName: index(271)", "Delete Modifier: private(181)", "Delete SimpleName: isVarArgs(201)", "Delete InfixExpression: &&(208)", "Delete Assignment: =(209)", "Delete ExpressionStatement(210)", "Delete Block(211)", "Delete MethodDeclaration(212)", "Delete Modifier: public(215)", "Delete SimpleName: invoke(218)", "Delete SimpleName: isVarArgs(233)", "Delete PrimitiveType: int(246)", "Delete SimpleName: index(247)", "Delete VariableDeclarationFragment(251)", "Delete VariableDeclarationStatement(252)", "Delete SimpleName: type(257)", "Delete MethodInvocation(262)", "Delete VariableDeclarationFragment(263)", "Delete VariableDeclarationStatement(264)", "Delete Block(278)", "Delete IfStatement(279)", "Delete Block(311)", "Delete MethodDeclaration(312)", "Delete SimpleName: type(411)", "Delete SingleVariableDeclaration(412)", "Delete PrimitiveType: int(413)", "Delete SimpleName: index(414)", "Delete SingleVariableDeclaration(415)", "Delete SimpleName: actual(516)", "Delete SimpleName: index(517)", "Delete SimpleName: i(518)", "Delete InfixExpression: +(519)", "Delete ArrayAccess(520)", "Delete PrimitiveType: int(502)", "Delete SimpleName: i(503)", "Delete NumberLiteral: 0(504)", "Delete VariableDeclarationFragment(505)", "Delete VariableDeclarationExpression(506)", "Delete SimpleName: i(507)", "Delete SimpleName: size(508)", "Delete InfixExpression: <(509)", "Delete SimpleName: i(510)", "Delete PostfixExpression: ++(511)", "Delete Block(523)", "Delete ForStatement(524)", "Delete Block(563)", "Delete TextElement: Determines if a method can accept a variable number of arguments.(565)", "Delete TagElement(566)", "Delete SimpleName: m(567)", "Delete TextElement:  a the method to check(568)", "Delete TagElement: @param(569)", "Delete TextElement:  true if method is vararg, false otherwise(570)", "Delete TagElement: @return(571)", "Delete Javadoc(572)", "Delete Modifier: private(573)", "Delete Modifier: static(574)", "Delete PrimitiveType: boolean(575)", "Delete SimpleName: isVarArgMethod(576)", "Delete QualifiedName: java.lang.reflect.Method(577)", "Delete SimpleType: java.lang.reflect.Method(578)", "Delete SimpleName: m(579)", "Delete SingleVariableDeclaration(580)", "Delete Dimension(585)", "Delete ArrayType: Class<?>[](586)", "Delete SimpleName: formal(587)", "Delete SimpleName: m(588)", "Delete SimpleName: getParameterTypes(589)", "Delete MethodInvocation(590)", "Delete VariableDeclarationFragment(591)", "Delete VariableDeclarationStatement(592)", "Delete SimpleName: formal(593)", "Delete NullLiteral(594)", "Delete InfixExpression: ==(595)", "Delete QualifiedName: formal.length(596)", "Delete NumberLiteral: 0(597)", "Delete InfixExpression: ==(598)", "Delete InfixExpression: ||(599)", "Delete BooleanLiteral: false(600)", "Delete ReturnStatement(601)", "Delete Block(602)", "Delete SimpleName: Class(603)", "Delete SimpleType: Class(604)", "Delete WildcardType: ?(605)", "Delete ParameterizedType: Class<?>(606)", "Delete SimpleName: last(607)", "Delete SimpleName: formal(608)", "Delete QualifiedName: formal.length(609)", "Delete NumberLiteral: 1(610)", "Delete InfixExpression: -(611)", "Delete ArrayAccess(612)", "Delete VariableDeclarationFragment(613)", "Delete VariableDeclarationStatement(614)", "Delete SimpleName: last(615)", "Delete SimpleName: isArray(616)", "Delete MethodInvocation(617)", "Delete ReturnStatement(618)", "Delete Block(619)", "Delete IfStatement(620)", "Delete Block(621)", "Delete MethodDeclaration(622)"]}}, {"MethodKey_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: app to SingleVariableDeclaration at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: isVarArgs to MethodDeclaration at 3", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: T to SimpleType: T at 0", "INS Modifier: abstract to MethodDeclaration at 1", "INS SimpleType: T to SingleVariableDeclaration at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleType: Object to TypeLiteral at 0", "INS TypeLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: formal to InfixExpression: == at 0", "INS IfStatement to Block at 2", "INS SimpleName: Object to SimpleType: Object at 0", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to ReturnStatement at 0"]}, {"root": "UPDATE from  the intended method arguments to     the intended method arguments", "operations": ["UPD TextElement:  the intended method arguments from  the intended method arguments to     the intended method arguments"]}, {"root": "UPDATE from  the intended method parameters to     the intended method parameters", "operations": ["UPD TextElement:  the intended method parameters from  the intended method parameters to     the intended method parameters"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: == to ParenthesizedExpression at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: isArray to MethodInvocation at 1", "INS SimpleName: actual to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 1", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS SimpleName: formal to MethodInvocation at 0", "INS SimpleName: isArray to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0"]}, {"root": "UPDATE from we run across ambiguous overloading.  Caught to we run across ambiguous overloading. Caught", "operations": ["UPD TextElement: we run across ambiguous overloading.  Caught from we run across ambiguous overloading.  Caught to we run across ambiguous overloading. Caught"]}, {"root": "UPDATE from classes to actuals", "operations": ["UPD SimpleName: classes from classes to actuals", "UPD SimpleName: classes from classes to actuals", "UPD SimpleName: classes from classes to actuals", "UPD SimpleName: classes from classes to actuals", "UPD SimpleName: classes from classes to actuals"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleName: isVarArgs to MethodInvocation at 0", "INS SimpleName: method to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS IfStatement to Block at 2", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS NumberLiteral: 1 to InfixExpression: > at 1", "INS SimpleName: formals to ArrayAccess at 0", "INS QualifiedName: actuals.length to InfixExpression: < at 1", "INS QualifiedName: formals.length to InfixExpression: > at 0", "INS SimpleName: actuals to ArrayAccess at 0", "INS BooleanLiteral: false to MethodInvocation at 3", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: i to ArrayAccess at 1", "INS IfStatement to Block at 3", "INS QualifiedName: formals.length to InfixExpression: - at 0", "INS InfixExpression: > to IfStatement at 0", "INS ReturnStatement to Block at 2", "INS QualifiedName: actuals.length to InfixExpression: > at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS InfixExpression: > to IfStatement at 0", "INS InfixExpression: - to InfixExpression: > at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS ForStatement to Block at 1", "INS ArrayAccess to MethodInvocation at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS QualifiedName: actuals.length to InfixExpression: - at 1", "INS Block to ForStatement at 3", "INS ArrayAccess to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS SimpleName: isConvertible to MethodInvocation at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 0"]}, {"root": "UPDATE from  true if this is the last parameter which can tbe be a primitive array (vararg call) to  true if this is the last parameter which can be a primitive array (vararg call)", "operations": ["UPD TextElement:  true if this is the last parameter which can tbe be a primitive array (vararg call) from  true if this is the last parameter which can tbe be a primitive array (vararg call) to  true if this is the last parameter which can be a primitive array (vararg call)"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: == to IfStatement at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS SimpleName: isVarArgs to MethodInvocation at 1", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: isVarArgs to MethodDeclaration at 3", "INS SimpleName: app to SingleVariableDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: Method to SimpleType: Method at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: app to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS WildcardType: ? to ParameterizedType: Constructor<?> at 1", "INS ParameterizedType: Constructor<?> to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: app to SingleVariableDeclaration at 1", "INS SimpleName: app to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Constructor to SimpleType: Constructor at 0", "INS SimpleType: Constructor to ParameterizedType: Constructor<?> at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isVarArgs to MethodDeclaration at 3", "INS SimpleName: isVarArgs to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from methodArgs to formals", "operations": ["UPD SimpleName: methodArgs from methodArgs to formals", "UPD SimpleName: methodArgs from methodArgs to formals", "UPD SimpleName: methodArgs from methodArgs to formals", "UPD SimpleName: methodArgs from methodArgs to formals", "UPD SimpleName: methodArgs from methodArgs to formals"]}, {"root": "UPDATE from methodArgs.length to formals.length", "operations": ["UPD QualifiedName: methodArgs.length from methodArgs.length to formals.length", "UPD QualifiedName: methodArgs.length from methodArgs.length to formals.length", "UPD QualifiedName: methodArgs.length from methodArgs.length to formals.length", "UPD QualifiedName: methodArgs.length from methodArgs.length to formals.length"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV QualifiedName: methodArgs.length to InfixExpression: == at 0", "MOV QualifiedName: classes.length to InfixExpression: == at 1"]}, {"root": "UPDATE from classes.length to actuals.length", "operations": ["UPD QualifiedName: classes.length from classes.length to actuals.length", "UPD QualifiedName: classes.length from classes.length to actuals.length", "UPD QualifiedName: classes.length from classes.length to actuals.length", "UPD QualifiedName: classes.length from classes.length to actuals.length", "UPD QualifiedName: classes.length from classes.length to actuals.length"]}, {"root": "INS ForStatement to Block at 0", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS ForStatement to Block at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ForStatement", "operations": ["MOV VariableDeclarationExpression to ForStatement at 0", "MOV PrefixExpression: ++ to ForStatement at 2", "MOV InfixExpression: < to ForStatement at 1", "MOV Block to ForStatement at 3"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PrefixExpression: ++ to ForStatement at 2"]}, {"root": "INS PrefixExpression: ++ to ForStatement at 2", "operations": ["INS PrefixExpression: ++ to ForStatement at 2", "INS SimpleName: i to PrefixExpression: ++ at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from lastarg to i", "operations": ["UPD SimpleName: lastarg from lastarg to i"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: lastarg to VariableDeclarationFragment at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS ArrayAccess to MethodInvocation at 0", "operations": ["INS SimpleName: formals to ArrayAccess at 0", "INS QualifiedName: formals.length to InfixExpression: - at 0", "INS ArrayAccess to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS InfixExpression: - to ArrayAccess at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: false to ReturnStatement at 0"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL ArrayAccess", "DEL InfixExpression: &&", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL InfixExpression: +", "DEL QualifiedName: methodArgs.length", "DEL NumberLiteral: 1", "DEL InfixExpression: -", "DEL QualifiedName: classes.length", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL NumberLiteral: 1", "DEL QualifiedName: methodArgs.length", "DEL SimpleName: isArray", "DEL MethodInvocation", "DEL SimpleName: methodArgs", "DEL ParenthesizedExpression"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL InfixExpression: -", "DEL SimpleName: Class", "DEL QualifiedName: methodArgs.length", "DEL VariableDeclarationStatement", "DEL WildcardType: ?", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL ParameterizedType: Class<?>", "DEL SimpleName: methodArgs", "DEL NumberLiteral: 1", "DEL SimpleType: Class"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: isArray", "DEL SimpleName: lastarg", "DEL MethodInvocation", "DEL PrefixExpression: !"]}, {"root": "DEL ForStatement", "operations": ["DEL ForStatement"]}, {"root": "DEL SimpleName: lastarg", "operations": ["DEL SimpleName: lastarg"]}]}}, {"MethodKey_diff": {"operations": ["Insert MethodDeclaration(1468) into TypeDeclaration: class(2360) at 7", "Insert IfStatement(920) into Block(1157) at 2", "Insert Modifier: protected(1460) into MethodDeclaration(1468) at 0", "Insert Modifier: abstract(1461) into MethodDeclaration(1468) at 1", "Insert PrimitiveType: boolean(1462) into MethodDeclaration(1468) at 2", "Insert SimpleName: isVarArgs(1463) into MethodDeclaration(1468) at 3", "Insert SingleVariableDeclaration(1467) into MethodDeclaration(1468) at 4", "Update TextElement:  the intended method arguments(271) to     the intended method arguments", "Update TextElement:  the intended method parameters(453) to     the intended method parameters", "Insert InfixExpression: ==(916) into IfStatement(920) at 0", "Insert Block(919) into IfStatement(920) at 1", "Insert InfixExpression: &&(1224) into IfStatement(1228) at 0", "Update TextElement: we run across ambiguous overloading.  Caught(1384) to we run across ambiguous overloading. Caught", "Insert SimpleType: T(1465) into SingleVariableDeclaration(1467) at 0", "Insert SimpleName: app(1466) into SingleVariableDeclaration(1467) at 1", "Update SimpleName: classes(2012) to actuals", "Insert IfStatement(2116) into Block(2240) at 2", "Insert IfStatement(2158) into Block(2240) at 3", "Insert SimpleName: formal(912) into InfixExpression: ==(916) at 0", "Insert TypeLiteral(915) into InfixExpression: ==(916) at 1", "Insert ReturnStatement(918) into Block(919) at 0", "Move MethodInvocation(1206) into InfixExpression: &&(1224) at 0", "Insert ParenthesizedExpression(1223) into InfixExpression: &&(1224) at 1", "Insert SimpleName: T(1464) into SimpleType: T(1465) at 0", "Update TextElement:  true if this is the last parameter which can tbe be a primitive array (vararg call)(1863) to  true if this is the last parameter which can be a primitive array (vararg call)", "Insert InfixExpression: ==(2055) into IfStatement(2108) at 0", "Insert PrefixExpression: !(2112) into IfStatement(2116) at 0", "Insert Block(2115) into IfStatement(2116) at 1", "Insert InfixExpression: >(2119) into IfStatement(2158) at 0", "Insert Block(2157) into IfStatement(2158) at 1", "Insert MethodDeclaration(2412) into AnonymousClassDeclaration(2413) at 1", "Insert MethodDeclaration(2476) into AnonymousClassDeclaration(2477) at 1", "Insert SimpleType: Object(914) into TypeLiteral(915) at 0", "Insert BooleanLiteral: true(917) into ReturnStatement(918) at 0", "Insert InfixExpression: ==(1222) into ParenthesizedExpression(1223) at 0", "Update SimpleName: methodArgs(2020) to formals", "Update QualifiedName: methodArgs.length(2026) to formals.length", "Move QualifiedName: methodArgs.length(2026) into InfixExpression: ==(2055) at 0", "Update QualifiedName: classes.length(2027) to actuals.length", "Move QualifiedName: classes.length(2027) into InfixExpression: ==(2055) at 1", "Insert MethodInvocation(2111) into PrefixExpression: !(2112) at 0", "Insert ReturnStatement(2114) into Block(2115) at 0", "Insert QualifiedName: formals.length(2117) into InfixExpression: >(2119) at 0", "Insert QualifiedName: actuals.length(2118) into InfixExpression: >(2119) at 1", "Insert IfStatement(2128) into Block(2157) at 0", "Insert ForStatement(2154) into Block(2157) at 1", "Insert ReturnStatement(2156) into Block(2157) at 2", "Insert ForStatement(2193) into Block(2236) at 0", "Insert MarkerAnnotation(2399) into MethodDeclaration(2412) at 0", "Insert Modifier: public(2400) into MethodDeclaration(2412) at 1", "Insert PrimitiveType: boolean(2401) into MethodDeclaration(2412) at 2", "Insert SimpleName: isVarArgs(2402) into MethodDeclaration(2412) at 3", "Insert SingleVariableDeclaration(2406) into MethodDeclaration(2412) at 4", "Insert Block(2411) into MethodDeclaration(2412) at 5", "Insert MarkerAnnotation(2461) into MethodDeclaration(2476) at 0", "Insert Modifier: public(2462) into MethodDeclaration(2476) at 1", "Insert PrimitiveType: boolean(2463) into MethodDeclaration(2476) at 2", "Insert SimpleName: isVarArgs(2464) into MethodDeclaration(2476) at 3", "Insert SingleVariableDeclaration(2470) into MethodDeclaration(2476) at 4", "Insert Block(2475) into MethodDeclaration(2476) at 5", "Insert SimpleName: Object(913) into SimpleType: Object(914) at 0", "Insert MethodInvocation(1218) into InfixExpression: ==(1222) at 0", "Insert MethodInvocation(1221) into InfixExpression: ==(1222) at 1", "Insert SimpleName: isVarArgs(2109) into MethodInvocation(2111) at 0", "Insert SimpleName: method(2110) into MethodInvocation(2111) at 1", "Insert BooleanLiteral: false(2113) into ReturnStatement(2114) at 0", "Insert InfixExpression: >(2124) into IfStatement(2128) at 0", "Move Block(2123) into IfStatement(2128) at 1", "Move VariableDeclarationExpression(2129) into ForStatement(2154) at 0", "Insert InfixExpression: <(2136) into ForStatement(2154) at 1", "Move PrefixExpression: ++(2136) into ForStatement(2154) at 2", "Insert Block(2153) into ForStatement(2154) at 3", "Insert BooleanLiteral: true(2155) into ReturnStatement(2156) at 0", "Update QualifiedName: methodArgs.length(2098) to formals.length", "Update QualifiedName: classes.length(2101) to actuals.length", "Insert VariableDeclarationExpression(2170) into ForStatement(2193) at 0", "Move InfixExpression: <(2134) into ForStatement(2193) at 1", "Move PrefixExpression: ++(2174) into ForStatement(2193) at 2", "Move Block(2151) into ForStatement(2193) at 3", "Insert PrefixExpression: ++(2219) into ForStatement(2233) at 2", "Insert SimpleName: Override(2398) into MarkerAnnotation(2399) at 0", "Insert SimpleType: Method(2404) into SingleVariableDeclaration(2406) at 0", "Insert SimpleName: app(2405) into SingleVariableDeclaration(2406) at 1", "Insert ReturnStatement(2410) into Block(2411) at 0", "Insert SimpleName: Override(2460) into MarkerAnnotation(2461) at 0", "Insert ParameterizedType: Constructor<?>(2468) into SingleVariableDeclaration(2470) at 0", "Insert SimpleName: app(2469) into SingleVariableDeclaration(2470) at 1", "Insert ReturnStatement(2474) into Block(2475) at 0", "Insert SimpleName: formal(1216) into MethodInvocation(1218) at 0", "Insert SimpleName: isArray(1217) into MethodInvocation(1218) at 1", "Insert SimpleName: actual(1219) into MethodInvocation(1221) at 0", "Insert SimpleName: isArray(1220) into MethodInvocation(1221) at 1", "Update QualifiedName: classes.length(2051) to actuals.length", "Insert InfixExpression: -(2122) into InfixExpression: >(2124) at 0", "Insert NumberLiteral: 1(2123) into InfixExpression: >(2124) at 1", "Insert SimpleName: i(2134) into InfixExpression: <(2136) at 0", "Insert QualifiedName: actuals.length(2135) into InfixExpression: <(2136) at 1", "Insert IfStatement(2152) into Block(2153) at 0", "Insert PrimitiveType: int(2166) into VariableDeclarationExpression(2170) at 0", "Insert VariableDeclarationFragment(2169) into VariableDeclarationExpression(2170) at 1", "Update QualifiedName: classes.length(2171) to actuals.length", "Insert SimpleName: i(2218) into PrefixExpression: ++(2219) at 0", "Insert SimpleName: Method(2403) into SimpleType: Method(2404) at 0", "Insert MethodInvocation(2409) into ReturnStatement(2410) at 0", "Insert SimpleType: Constructor(2466) into ParameterizedType: Constructor<?>(2468) at 0", "Insert WildcardType: ?(2467) into ParameterizedType: Constructor<?>(2468) at 1", "Insert MethodInvocation(2473) into ReturnStatement(2474) at 0", "Insert QualifiedName: formals.length(2120) into InfixExpression: -(2122) at 0", "Insert QualifiedName: actuals.length(2121) into InfixExpression: -(2122) at 1", "Insert PrefixExpression: !(2148) into IfStatement(2152) at 0", "Move Block(2149) into IfStatement(2152) at 1", "Update SimpleName: lastarg(2109) to i", "Move SimpleName: lastarg(2109) into VariableDeclarationFragment(2169) at 0", "Insert NumberLiteral: 0(2168) into VariableDeclarationFragment(2169) at 1", "Update QualifiedName: methodArgs.length(2131) to formals.length", "Move Block(2185) into IfStatement(2191) at 1", "Insert ArrayAccess(2203) into MethodInvocation(2205) at 0", "Insert Block(2230) into IfStatement(2231) at 1", "Insert SimpleName: app(2407) into MethodInvocation(2409) at 0", "Insert SimpleName: isVarArgs(2408) into MethodInvocation(2409) at 1", "Insert SimpleName: Constructor(2465) into SimpleType: Constructor(2466) at 0", "Insert SimpleName: app(2471) into MethodInvocation(2473) at 0", "Insert SimpleName: isVarArgs(2472) into MethodInvocation(2473) at 1", "Insert MethodInvocation(2147) into PrefixExpression: !(2148) at 0", "Insert SimpleName: formals(2199) into ArrayAccess(2203) at 0", "Insert InfixExpression: -(2202) into ArrayAccess(2203) at 1", "Update QualifiedName: methodArgs.length(2165) to formals.length", "Insert ReturnStatement(2229) into Block(2230) at 0", "Insert SimpleName: isConvertible(2139) into MethodInvocation(2147) at 0", "Insert ArrayAccess(2142) into MethodInvocation(2147) at 1", "Insert ArrayAccess(2145) into MethodInvocation(2147) at 2", "Insert BooleanLiteral: false(2146) into MethodInvocation(2147) at 3", "Insert QualifiedName: formals.length(2200) into InfixExpression: -(2202) at 0", "Insert NumberLiteral: 1(2201) into InfixExpression: -(2202) at 1", "Insert BooleanLiteral: false(2228) into ReturnStatement(2229) at 0", "Update SimpleName: methodArgs(2056) to formals", "Update SimpleName: classes(2059) to actuals", "Insert SimpleName: formals(2140) into ArrayAccess(2142) at 0", "Insert SimpleName: i(2141) into ArrayAccess(2142) at 1", "Insert SimpleName: actuals(2143) into ArrayAccess(2145) at 0", "Insert SimpleName: i(2144) into ArrayAccess(2145) at 1", "Update SimpleName: methodArgs(2138) to formals", "Update SimpleName: classes(2141) to actuals", "Update SimpleName: classes(2177) to actuals", "Update QualifiedName: classes.length(2066) to actuals.length", "Update SimpleName: methodArgs(2070) to formals", "Update SimpleName: methodArgs(2077) to formals", "Update SimpleName: classes(2080) to actuals", "Delete InfixExpression: ==(2028)", "Delete QualifiedName: methodArgs.length(2029)", "Delete QualifiedName: classes.length(2030)", "Delete NumberLiteral: 1(2031)", "Delete InfixExpression: +(2032)", "Delete InfixExpression: ==(2033)", "Delete ParenthesizedExpression(2034)", "Delete SimpleName: methodArgs(2035)", "Delete QualifiedName: methodArgs.length(2036)", "Delete NumberLiteral: 1(2037)", "Delete InfixExpression: -(2038)", "Delete ArrayAccess(2039)", "Delete SimpleName: isArray(2040)", "Delete MethodInvocation(2041)", "Delete InfixExpression: &&(2042)", "Delete ParenthesizedExpression(2043)", "Delete InfixExpression: ||(2044)", "Delete SimpleName: Class(2105)", "Delete SimpleType: Class(2106)", "Delete WildcardType: ?(2107)", "Delete ParameterizedType: Class<?>(2108)", "Delete SimpleName: methodArgs(2110)", "Delete QualifiedName: methodArgs.length(2111)", "Delete NumberLiteral: 1(2112)", "Delete InfixExpression: -(2113)", "Delete ArrayAccess(2114)", "Delete VariableDeclarationFragment(2115)", "Delete VariableDeclarationStatement(2116)", "Delete SimpleName: lastarg(2117)", "Delete SimpleName: isArray(2118)", "Delete MethodInvocation(2119)", "Delete PrefixExpression: !(2120)", "Delete IfStatement(2124)", "Delete ForStatement(2152)", "Delete SimpleName: lastarg(2158)"]}}, {"PropertyGetExecutor_cluster": {"actions": [{"root": "INS IfStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS NullLiteral to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: property to InfixExpression: == at 0", "INS SimpleName: property to MethodInvocation at 0", "INS InfixExpression: || to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "UPDATE from toString to castString", "operations": ["UPD SimpleName: toString from toString to castString"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"PropertyGetExecutor_diff": {"operations": ["Insert IfStatement(295) into Block(378) at 0", "Insert InfixExpression: ||(291) into IfStatement(295) at 0", "Insert Block(294) into IfStatement(295) at 1", "Insert InfixExpression: ==(287) into InfixExpression: ||(291) at 0", "Insert MethodInvocation(290) into InfixExpression: ||(291) at 1", "Insert ReturnStatement(293) into Block(294) at 0", "Insert SimpleName: property(285) into InfixExpression: ==(287) at 0", "Insert NullLiteral(286) into InfixExpression: ==(287) at 1", "Insert SimpleName: property(288) into MethodInvocation(290) at 0", "Insert SimpleName: isEmpty(289) into MethodInvocation(290) at 1", "Insert NullLiteral(292) into ReturnStatement(293) at 0", "Update SimpleName: toString(199) to castString", "Delete NullLiteral(288)"]}}, {"PropertySetExecutor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: java.lang.reflect.Array to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: arg to InfixExpression: != at 0", "INS Modifier: private to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS TextElement: Checks wether an argument is an empty array. to TagElement at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: arg to TagElement: @param at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: arg to MethodInvocation at 0", "INS SimpleName: Array to MethodInvocation at 0", "INS TagElement to Javadoc at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS TextElement:  the argument to TagElement: @param at 1", "INS TextElement:  true if <code>arg</code> is an empty array to TagElement: @return at 0", "INS SimpleName: getLength to MethodInvocation at 1", "INS SimpleName: arg to SingleVariableDeclaration at 1", "INS SimpleName: isEmptyArray to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ParenthesizedExpression to ReturnStatement at 0", "INS SimpleName: arg to MethodInvocation at 2", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: isArray to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS TagElement: @return to Javadoc at 2", "INS ReturnStatement to Block at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 7", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: Introspector to SingleVariableDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS NullLiteral to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: clazz to TagElement: @param at 0", "INS TextElement:        the introspector to TagElement: @param at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS TagElement: @param to Javadoc at 3", "INS ParameterizedType: Class<?> to ArrayType: Class<?>[] at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: paramTypes.length to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: clazz to MethodInvocation at 2", "INS SimpleName: methodName to TagElement: @param at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS Block to MethodDeclaration at 8", "INS SimpleName: candidate to ReturnStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: java.lang.reflect.Method to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: java.lang.reflect.Method to SimpleType: java.lang.reflect.Method at 0", "INS SimpleName: methodName to SingleVariableDeclaration at 1", "INS TagElement: @param to Javadoc at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: java.lang.reflect.Method to SingleVariableDeclaration at 0", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS TextElement: <p>This checks only one method with that name accepts an array as sole parameter. to TagElement at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: methods to InfixExpression: != at 0", "INS Dimension to ArrayType: Class<?>[] at 1", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS QualifiedName: java.lang.reflect.Method to SimpleType: java.lang.reflect.Method at 0", "INS SimpleName: paramTypes to ArrayAccess at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: is to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: methodName to MethodInvocation at 3", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: isArray to MethodInvocation at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: candidate to VariableDeclarationFragment at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: method to Assignment: = at 1", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS SimpleName: Introspector to SimpleType: Introspector at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleType: java.lang.reflect.Method to ArrayType: java.lang.reflect.Method[] at 0", "INS ReturnStatement to Block at 3", "INS ArrayType: Class<?>[] to VariableDeclarationStatement at 0", "INS SimpleName: paramTypes to VariableDeclarationFragment at 0", "INS TagElement: @param to Javadoc at 1", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: methods to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS IfStatement to Block at 2", "INS SimpleName: lookupSetEmptyArray to MethodDeclaration at 4", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS SimpleName: is to TagElement: @param at 0", "INS SimpleName: is to SingleVariableDeclaration at 1", "INS SimpleType: java.lang.reflect.Method to MethodDeclaration at 3", "INS SimpleName: candidate to Assignment: = at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: clazz to SingleVariableDeclaration at 2", "INS EnhancedForStatement to Block at 0", "INS SimpleName: method to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TextElement:     the class to find the get method from to TagElement: @param at 1", "INS TextElement: Finds an empty array property setter method by <code>methodName</code>. to TagElement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS ArrayType: java.lang.reflect.Method[] to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: java.lang.reflect.Method to SimpleType: java.lang.reflect.Method at 0", "INS SimpleName: getMethods to MethodInvocation at 1", "INS TagElement: @return to Javadoc at 4", "INS ArrayAccess to MethodInvocation at 0", "INS SimpleName: candidate to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 1", "INS QualifiedName: java.lang.reflect.Method to SimpleType: java.lang.reflect.Method at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: methods to EnhancedForStatement at 1", "INS TextElement:  the method name to find to TagElement: @param at 1", "INS TextElement:          the sole method that accepts an array as parameter to TagElement: @return at 0", "INS Dimension to ArrayType: java.lang.reflect.Method[] at 1", "INS Block to EnhancedForStatement at 2", "INS InfixExpression: != to IfStatement at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS SimpleName: componentType to InfixExpression: != at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: newInstance to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Array to MethodInvocation at 0", "INS NumberLiteral: 0 to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: componentType to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: componentType to MethodInvocation at 2", "INS SimpleName: getComponentType to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: isEmptyArray to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: arg to Assignment: = at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: componentType to VariableDeclarationFragment at 0", "INS SimpleName: arg to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS Block to MethodDeclaration at 8", "INS ParameterizedType: Class<?> to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: isEmpty to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS NullLiteral to ReturnStatement at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: property to InfixExpression: == at 0", "INS SimpleName: property to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS IfStatement to Block at 0", "INS InfixExpression: == to InfixExpression: || at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS MethodInvocation to InfixExpression: && at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isEmptyArray to MethodInvocation at 0", "INS SimpleName: clazz to MethodInvocation at 2", "INS SimpleName: toUpperCase to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: setCharAt to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: SET_START_INDEX to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: method to Assignment: = at 0", "INS SimpleName: sb to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: c to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS InfixExpression: && to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 2", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: lookupSetEmptyArray to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: is to MethodInvocation at 1", "INS SimpleName: arg to MethodInvocation at 1", "INS SimpleName: Character to MethodInvocation at 0", "INS IfStatement to Block at 6"]}, {"root": "UPDATE from  the introspector to        the introspector", "operations": ["UPD TextElement:  the introspector from  the introspector to        the introspector", "UPD TextElement:  the introspector from  the introspector to        the introspector"]}, {"root": "UPDATE from  the class to find the get method from to     the class to find the get method from", "operations": ["UPD TextElement:  the class to find the get method from from  the class to find the get method from to     the class to find the get method from", "UPD TextElement:  the class to find the get method from from  the class to find the get method from to     the class to find the get method from"]}, {"root": "UPDATE from  the value to assign to the property to       the value to assign to the property", "operations": ["UPD TextElement:  the value to assign to the property from  the value to assign to the property to       the value to assign to the property", "UPD TextElement:  the value to assign to the property from  the value to assign to the property to       the value to assign to the property"]}, {"root": "UPDATE from  the class the set method applies to to   the class the set method applies to", "operations": ["UPD TextElement:  the class the set method applies to from  the class the set method applies to to   the class the set method applies to"]}, {"root": "UPDATE from  the key to use as 1st argument to the set method to     the key to use as 1st argument to the set method", "operations": ["UPD TextElement:  the key to use as 1st argument to the set method from  the key to use as 1st argument to the set method to     the key to use as 1st argument to the set method"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: && to IfStatement at 0"]}, {"root": "UPDATE from <p>The method to be found should be named \"set{P,p}property.</p> to <p>The method to be found should be named \"set{P,p}property.", "operations": ["UPD TextElement: <p>The method to be found should be named \"set{P,p}property.</p> from <p>The method to be found should be named \"set{P,p}property.</p> to <p>The method to be found should be named \"set{P,p}property."]}, {"root": "INS TextElement: As a special case, any empty array will try to find a valid array-setting non-ambiguous method. to TagElement at 4", "operations": ["INS TextElement: As a special case, any empty array will try to find a valid array-setting non-ambiguous method. to TagElement at 4"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS InfixExpression: != to ConditionalExpression at 0", "operations": ["INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: method to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS NullLiteral to ConditionalExpression at 4", "operations": ["INS NullLiteral to ConditionalExpression at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1", "MOV InfixExpression: && to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from pargs to arg", "operations": ["UPD SimpleName: pargs from pargs to arg"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "UPDATE from toString to castString", "operations": ["UPD SimpleName: toString from toString to castString"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS SimpleName: method to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: c to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setCharAt to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: toLowerCase to MethodInvocation at 1", "INS SimpleName: SET_START_INDEX to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: Character to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: lookupSetEmptyArray to MethodInvocation at 0", "INS SimpleName: clazz to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS SimpleName: method to Assignment: = at 0", "INS SimpleName: is to MethodInvocation at 1"]}, {"root": "UPDATE from Object to Class", "operations": ["UPD SimpleName: Object from Object to Class"]}, {"root": "MOVE from SimpleType: Class", "operations": ["MOV SimpleName: Object to SimpleType: Class at 0"]}, {"root": "UPDATE from equals to getComponentType", "operations": ["UPD SimpleName: equals from equals to getComponentType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: arg", "DEL SimpleName: pargs", "DEL Dimension", "DEL SimpleType: Object", "DEL ArrayType: Object[]", "DEL Block", "DEL ArrayInitializer", "DEL Block", "DEL VariableDeclarationFragment"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: ||", "DEL InfixExpression: &&", "DEL SimpleName: arg", "DEL NullLiteral", "DEL ParenthesizedExpression", "DEL InfixExpression: &&", "DEL InfixExpression: =="]}]}}, {"PropertySetExecutor_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(622) at 1", "Insert QualifiedName: java.lang.reflect.Array(2) into ImportDeclaration(3) at 0", "Insert MethodDeclaration(338) into TypeDeclaration: class(621) at 11", "Insert MethodDeclaration(620) into TypeDeclaration: class(621) at 13", "Update Modifier: private(28) to protected", "Update Modifier: private(113) to protected", "Insert Block(233) into MethodDeclaration(234) at 8", "Insert Javadoc(310) into MethodDeclaration(338) at 0", "Insert Modifier: private(311) into MethodDeclaration(338) at 1", "Insert Modifier: static(312) into MethodDeclaration(338) at 2", "Insert PrimitiveType: boolean(313) into MethodDeclaration(338) at 3", "Insert SimpleName: isEmptyArray(314) into MethodDeclaration(338) at 4", "Insert SingleVariableDeclaration(318) into MethodDeclaration(338) at 5", "Insert Block(337) into MethodDeclaration(338) at 6", "Insert Javadoc(532) into MethodDeclaration(620) at 0", "Insert Modifier: private(533) into MethodDeclaration(620) at 1", "Insert Modifier: static(534) into MethodDeclaration(620) at 2", "Insert SimpleType: java.lang.reflect.Method(536) into MethodDeclaration(620) at 3", "Insert SimpleName: lookupSetEmptyArray(537) into MethodDeclaration(620) at 4", "Insert SingleVariableDeclaration(541) into MethodDeclaration(620) at 5", "Insert SingleVariableDeclaration(548) into MethodDeclaration(620) at 6", "Insert SingleVariableDeclaration(552) into MethodDeclaration(620) at 7", "Insert Block(619) into MethodDeclaration(620) at 8", "Insert IfStatement(87) into Block(111) at 0", "Insert IfStatement(230) into Block(233) at 0", "Move ReturnStatement(187) into Block(233) at 1", "Insert TagElement(304) into Javadoc(310) at 0", "Insert TagElement: @param(307) into Javadoc(310) at 1", "Insert TagElement: @return(309) into Javadoc(310) at 2", "Insert SimpleType: Object(316) into SingleVariableDeclaration(318) at 0", "Insert SimpleName: arg(317) into SingleVariableDeclaration(318) at 1", "Insert ReturnStatement(336) into Block(337) at 0", "Insert IfStatement(513) into Block(516) at 6", "Insert TagElement(520) into Javadoc(532) at 0", "Insert TagElement: @param(523) into Javadoc(532) at 1", "Insert TagElement: @param(526) into Javadoc(532) at 2", "Insert TagElement: @param(529) into Javadoc(532) at 3", "Insert TagElement: @return(531) into Javadoc(532) at 4", "Insert QualifiedName: java.lang.reflect.Method(535) into SimpleType: java.lang.reflect.Method(536) at 0", "Insert SimpleType: Introspector(539) into SingleVariableDeclaration(541) at 0", "Insert SimpleName: is(540) into SingleVariableDeclaration(541) at 1", "Insert Modifier: final(542) into SingleVariableDeclaration(548) at 0", "Insert ParameterizedType: Class<?>(546) into SingleVariableDeclaration(548) at 1", "Insert SimpleName: clazz(547) into SingleVariableDeclaration(548) at 2", "Insert SimpleType: String(550) into SingleVariableDeclaration(552) at 0", "Insert SimpleName: methodName(551) into SingleVariableDeclaration(552) at 1", "Insert VariableDeclarationStatement(558) into Block(619) at 0", "Insert VariableDeclarationStatement(570) into Block(619) at 1", "Insert IfStatement(616) into Block(619) at 2", "Insert ReturnStatement(618) into Block(619) at 3", "Update TextElement:  the introspector(39) to        the introspector", "Update TextElement:  the class to find the get method from(42) to     the class to find the get method from", "Update TextElement:  the value to assign to the property(48) to       the value to assign to the property", "Insert InfixExpression: ||(83) into IfStatement(87) at 0", "Insert Block(86) into IfStatement(87) at 1", "Update TextElement:  the class the set method applies to(104) to   the class the set method applies to", "Update TextElement:  the key to use as 1st argument to the set method(110) to     the key to use as 1st argument to the set method", "Move InfixExpression: !=(177) into IfStatement(230) at 0", "Insert Block(229) into IfStatement(230) at 1", "Insert InfixExpression: &&(273) into IfStatement(298) at 0", "Insert TextElement: Checks wether an argument is an empty array.(303) into TagElement(304) at 0", "Insert SimpleName: arg(305) into TagElement: @param(307) at 0", "Insert TextElement:  the argument(306) into TagElement: @param(307) at 1", "Insert TextElement:  true if <code>arg</code> is an empty array(308) into TagElement: @return(309) at 0", "Insert SimpleName: Object(315) into SimpleType: Object(316) at 0", "Insert ParenthesizedExpression(335) into ReturnStatement(336) at 0", "Update TextElement: <p>The method to be found should be named \"set{P,p}property.</p>(278) to <p>The method to be found should be named \"set{P,p}property.", "Insert TextElement: As a special case, any empty array will try to find a valid array-setting non-ambiguous method.(344) into TagElement(345) at 4", "Update TextElement:  the introspector(281) to        the introspector", "Update TextElement:  the class to find the get method from(284) to     the class to find the get method from", "Update TextElement:  the value to assign to the property(290) to       the value to assign to the property", "Move InfixExpression: ==(373) into IfStatement(513) at 0", "Insert Block(512) into IfStatement(513) at 1", "Insert TextElement: Finds an empty array property setter method by <code>methodName</code>.(518) into TagElement(520) at 0", "Insert TextElement: <p>This checks only one method with that name accepts an array as sole parameter.(519) into TagElement(520) at 1", "Insert SimpleName: is(521) into TagElement: @param(523) at 0", "Insert TextElement:        the introspector(522) into TagElement: @param(523) at 1", "Insert SimpleName: clazz(524) into TagElement: @param(526) at 0", "Insert TextElement:     the class to find the get method from(525) into TagElement: @param(526) at 1", "Insert SimpleName: methodName(527) into TagElement: @param(529) at 0", "Insert TextElement:  the method name to find(528) into TagElement: @param(529) at 1", "Insert TextElement:          the sole method that accepts an array as parameter(530) into TagElement: @return(531) at 0", "Insert SimpleName: Introspector(538) into SimpleType: Introspector(539) at 0", "Insert SimpleType: Class(544) into ParameterizedType: Class<?>(546) at 0", "Insert WildcardType: ?(545) into ParameterizedType: Class<?>(546) at 1", "Insert SimpleName: String(549) into SimpleType: String(550) at 0", "Insert SimpleType: java.lang.reflect.Method(554) into VariableDeclarationStatement(558) at 0", "Insert VariableDeclarationFragment(557) into VariableDeclarationStatement(558) at 1", "Insert ArrayType: java.lang.reflect.Method[](562) into VariableDeclarationStatement(570) at 0", "Insert VariableDeclarationFragment(569) into VariableDeclarationStatement(570) at 1", "Insert InfixExpression: !=(573) into IfStatement(616) at 0", "Insert Block(615) into IfStatement(616) at 1", "Insert SimpleName: candidate(617) into ReturnStatement(618) at 0", "Insert InfixExpression: ==(79) into InfixExpression: ||(83) at 0", "Insert MethodInvocation(82) into InfixExpression: ||(83) at 1", "Insert ReturnStatement(85) into Block(86) at 0", "Insert InfixExpression: !=(101) into ConditionalExpression(109) at 0", "Insert NullLiteral(108) into ConditionalExpression(109) at 2", "Insert IfStatement(222) into Block(229) at 0", "Move ExpressionStatement(183) into Block(229) at 1", "Move InfixExpression: &&(221) into InfixExpression: &&(273) at 0", "Move MethodInvocation(227) into InfixExpression: &&(273) at 1", "Insert InfixExpression: &&(334) into ParenthesizedExpression(335) at 0", "Move ExpressionStatement(382) into Block(512) at 0", "Move ExpressionStatement(393) into Block(512) at 1", "Insert IfStatement(511) into Block(512) at 2", "Insert SimpleName: Class(543) into SimpleType: Class(544) at 0", "Insert QualifiedName: java.lang.reflect.Method(553) into SimpleType: java.lang.reflect.Method(554) at 0", "Insert SimpleName: candidate(555) into VariableDeclarationFragment(557) at 0", "Insert NullLiteral(556) into VariableDeclarationFragment(557) at 1", "Insert SimpleType: java.lang.reflect.Method(560) into ArrayType: java.lang.reflect.Method[](562) at 0", "Insert Dimension(561) into ArrayType: java.lang.reflect.Method[](562) at 1", "Insert SimpleName: methods(563) into VariableDeclarationFragment(569) at 0", "Insert MethodInvocation(568) into VariableDeclarationFragment(569) at 1", "Insert SimpleName: methods(571) into InfixExpression: !=(573) at 0", "Insert NullLiteral(572) into InfixExpression: !=(573) at 1", "Insert EnhancedForStatement(614) into Block(615) at 0", "Insert SimpleName: property(77) into InfixExpression: ==(79) at 0", "Insert NullLiteral(78) into InfixExpression: ==(79) at 1", "Insert SimpleName: property(80) into MethodInvocation(82) at 0", "Insert SimpleName: isEmpty(81) into MethodInvocation(82) at 1", "Insert NullLiteral(84) into ReturnStatement(85) at 0", "Insert SimpleName: method(99) into InfixExpression: !=(101) at 0", "Insert NullLiteral(100) into InfixExpression: !=(101) at 1", "Insert MethodInvocation(183) into IfStatement(222) at 0", "Insert Block(221) into IfStatement(222) at 1", "Insert InfixExpression: &&(327) into InfixExpression: &&(334) at 0", "Insert InfixExpression: ==(333) into InfixExpression: &&(334) at 1", "Insert InfixExpression: &&(466) into IfStatement(511) at 0", "Insert Block(510) into IfStatement(511) at 1", "Insert QualifiedName: java.lang.reflect.Method(559) into SimpleType: java.lang.reflect.Method(560) at 0", "Insert SimpleName: is(564) into MethodInvocation(568) at 0", "Insert SimpleName: getMethods(565) into MethodInvocation(568) at 1", "Insert SimpleName: clazz(566) into MethodInvocation(568) at 2", "Insert SimpleName: methodName(567) into MethodInvocation(568) at 3", "Insert SingleVariableDeclaration(577) into EnhancedForStatement(614) at 0", "Insert SimpleName: methods(578) into EnhancedForStatement(614) at 1", "Insert Block(613) into EnhancedForStatement(614) at 2", "Insert SimpleName: isEmptyArray(181) into MethodInvocation(183) at 0", "Insert SimpleName: arg(182) into MethodInvocation(183) at 1", "Insert VariableDeclarationStatement(197) into Block(221) at 0", "Insert IfStatement(220) into Block(221) at 1", "Update SimpleName: pargs(181) to arg", "Insert InfixExpression: !=(321) into InfixExpression: &&(327) at 0", "Insert MethodInvocation(326) into InfixExpression: &&(327) at 1", "Insert MethodInvocation(331) into InfixExpression: ==(333) at 0", "Insert NumberLiteral: 0(332) into InfixExpression: ==(333) at 1", "Move InfixExpression: ==(89) into InfixExpression: &&(466) at 0", "Insert MethodInvocation(465) into InfixExpression: &&(466) at 1", "Insert ExpressionStatement(475) into Block(510) at 0", "Insert ExpressionStatement(485) into Block(510) at 1", "Move IfStatement(395) into Block(510) at 2", "Insert SimpleType: java.lang.reflect.Method(575) into SingleVariableDeclaration(577) at 0", "Insert SimpleName: method(576) into SingleVariableDeclaration(577) at 1", "Insert VariableDeclarationStatement(590) into Block(613) at 0", "Insert IfStatement(612) into Block(613) at 1", "Insert ParameterizedType: Class<?>(187) into VariableDeclarationStatement(197) at 0", "Insert VariableDeclarationFragment(196) into VariableDeclarationStatement(197) at 1", "Insert InfixExpression: &&(210) into IfStatement(220) at 0", "Insert Block(219) into IfStatement(220) at 1", "Update SimpleName: toString(217) to castString", "Insert SimpleName: arg(319) into InfixExpression: !=(321) at 0", "Insert NullLiteral(320) into InfixExpression: !=(321) at 1", "Insert MethodInvocation(324) into MethodInvocation(326) at 0", "Insert SimpleName: isArray(325) into MethodInvocation(326) at 1", "Insert SimpleName: Array(328) into MethodInvocation(331) at 0", "Insert SimpleName: getLength(329) into MethodInvocation(331) at 1", "Insert SimpleName: arg(330) into MethodInvocation(331) at 2", "Insert SimpleName: isEmptyArray(463) into MethodInvocation(465) at 0", "Insert SimpleName: arg(464) into MethodInvocation(465) at 1", "Insert MethodInvocation(474) into ExpressionStatement(475) at 0", "Insert Assignment: =(484) into ExpressionStatement(485) at 0", "Insert InfixExpression: ==(488) into IfStatement(509) at 0", "Insert QualifiedName: java.lang.reflect.Method(574) into SimpleType: java.lang.reflect.Method(575) at 0", "Insert ArrayType: Class<?>[](584) into VariableDeclarationStatement(590) at 0", "Insert VariableDeclarationFragment(589) into VariableDeclarationStatement(590) at 1", "Insert InfixExpression: &&(599) into IfStatement(612) at 0", "Insert Block(611) into IfStatement(612) at 1", "Insert SimpleType: Class(185) into ParameterizedType: Class<?>(187) at 0", "Insert WildcardType: ?(186) into ParameterizedType: Class<?>(187) at 1", "Insert SimpleName: componentType(188) into VariableDeclarationFragment(196) at 0", "Move MethodInvocation(241) into VariableDeclarationFragment(196) at 1", "Insert InfixExpression: !=(200) into InfixExpression: &&(210) at 0", "Insert PrefixExpression: !(209) into InfixExpression: &&(210) at 1", "Insert ExpressionStatement(218) into Block(219) at 0", "Insert SimpleName: arg(322) into MethodInvocation(324) at 0", "Insert SimpleName: getClass(323) into MethodInvocation(324) at 1", "Insert SimpleName: sb(467) into MethodInvocation(474) at 0", "Insert SimpleName: setCharAt(468) into MethodInvocation(474) at 1", "Insert SimpleName: SET_START_INDEX(469) into MethodInvocation(474) at 2", "Insert MethodInvocation(473) into MethodInvocation(474) at 3", "Insert SimpleName: method(476) into Assignment: =(484) at 0", "Insert MethodInvocation(483) into Assignment: =(484) at 1", "Insert SimpleName: method(486) into InfixExpression: ==(488) at 0", "Insert NullLiteral(487) into InfixExpression: ==(488) at 1", "Insert ExpressionStatement(497) into Block(508) at 0", "Insert ExpressionStatement(507) into Block(508) at 1", "Insert ParameterizedType: Class<?>(582) into ArrayType: Class<?>[](584) at 0", "Insert Dimension(583) into ArrayType: Class<?>[](584) at 1", "Insert SimpleName: paramTypes(585) into VariableDeclarationFragment(589) at 0", "Insert MethodInvocation(588) into VariableDeclarationFragment(589) at 1", "Insert InfixExpression: ==(593) into InfixExpression: &&(599) at 0", "Insert MethodInvocation(598) into InfixExpression: &&(599) at 1", "Insert IfStatement(606) into Block(611) at 0", "Insert ExpressionStatement(610) into Block(611) at 1", "Update SimpleName: Object(166) to Class", "Move SimpleName: Object(166) into SimpleType: Class(185) at 0", "Update SimpleName: equals(237) to getComponentType", "Insert SimpleName: componentType(198) into InfixExpression: !=(200) at 0", "Insert NullLiteral(199) into InfixExpression: !=(200) at 1", "Insert MethodInvocation(208) into PrefixExpression: !(209) at 0", "Insert Assignment: =(217) into ExpressionStatement(218) at 0", "Insert SimpleName: Character(470) into MethodInvocation(473) at 0", "Insert SimpleName: toUpperCase(471) into MethodInvocation(473) at 1", "Insert SimpleName: c(472) into MethodInvocation(473) at 2", "Insert SimpleName: lookupSetEmptyArray(477) into MethodInvocation(483) at 0", "Insert SimpleName: is(478) into MethodInvocation(483) at 1", "Insert SimpleName: clazz(479) into MethodInvocation(483) at 2", "Insert MethodInvocation(482) into MethodInvocation(483) at 3", "Insert MethodInvocation(496) into ExpressionStatement(497) at 0", "Insert Assignment: =(506) into ExpressionStatement(507) at 0", "Insert SimpleType: Class(580) into ParameterizedType: Class<?>(582) at 0", "Insert WildcardType: ?(581) into ParameterizedType: Class<?>(582) at 1", "Insert SimpleName: method(586) into MethodInvocation(588) at 0", "Insert SimpleName: getParameterTypes(587) into MethodInvocation(588) at 1", "Insert QualifiedName: paramTypes.length(591) into InfixExpression: ==(593) at 0", "Insert NumberLiteral: 1(592) into InfixExpression: ==(593) at 1", "Insert ArrayAccess(596) into MethodInvocation(598) at 0", "Insert SimpleName: isArray(597) into MethodInvocation(598) at 1", "Insert InfixExpression: !=(602) into IfStatement(606) at 0", "Insert Block(605) into IfStatement(606) at 1", "Insert Assignment: =(609) into ExpressionStatement(610) at 0", "Insert SimpleName: componentType(201) into MethodInvocation(208) at 0", "Insert SimpleName: equals(202) into MethodInvocation(208) at 1", "Insert MethodInvocation(207) into MethodInvocation(208) at 2", "Insert SimpleName: arg(211) into Assignment: =(217) at 0", "Insert MethodInvocation(216) into Assignment: =(217) at 1", "Insert SimpleName: sb(480) into MethodInvocation(482) at 0", "Insert SimpleName: toString(481) into MethodInvocation(482) at 1", "Insert SimpleName: sb(489) into MethodInvocation(496) at 0", "Insert SimpleName: setCharAt(490) into MethodInvocation(496) at 1", "Insert SimpleName: SET_START_INDEX(491) into MethodInvocation(496) at 2", "Insert MethodInvocation(495) into MethodInvocation(496) at 3", "Insert SimpleName: method(498) into Assignment: =(506) at 0", "Insert MethodInvocation(505) into Assignment: =(506) at 1", "Insert SimpleName: Class(579) into SimpleType: Class(580) at 0", "Insert SimpleName: paramTypes(594) into ArrayAccess(596) at 0", "Insert NumberLiteral: 0(595) into ArrayAccess(596) at 1", "Insert SimpleName: candidate(600) into InfixExpression: !=(602) at 0", "Insert NullLiteral(601) into InfixExpression: !=(602) at 1", "Insert ReturnStatement(604) into Block(605) at 0", "Insert SimpleName: candidate(607) into Assignment: =(609) at 0", "Insert SimpleName: method(608) into Assignment: =(609) at 1", "Move MethodInvocation(240) into MethodInvocation(207) at 0", "Insert SimpleName: getComponentType(206) into MethodInvocation(207) at 1", "Insert SimpleName: Array(212) into MethodInvocation(216) at 0", "Insert SimpleName: newInstance(213) into MethodInvocation(216) at 1", "Insert SimpleName: componentType(214) into MethodInvocation(216) at 2", "Insert NumberLiteral: 0(215) into MethodInvocation(216) at 3", "Insert SimpleName: Character(492) into MethodInvocation(495) at 0", "Insert SimpleName: toLowerCase(493) into MethodInvocation(495) at 1", "Insert SimpleName: c(494) into MethodInvocation(495) at 2", "Insert SimpleName: lookupSetEmptyArray(499) into MethodInvocation(505) at 0", "Insert SimpleName: is(500) into MethodInvocation(505) at 1", "Insert SimpleName: clazz(501) into MethodInvocation(505) at 2", "Insert MethodInvocation(504) into MethodInvocation(505) at 3", "Insert NullLiteral(603) into ReturnStatement(604) at 0", "Insert SimpleName: sb(502) into MethodInvocation(504) at 0", "Insert SimpleName: toString(503) into MethodInvocation(504) at 1", "Delete Modifier: final(10)", "Delete NullLiteral(90)", "Delete SimpleType: Object(167)", "Delete Dimension(168)", "Delete ArrayType: Object[](169)", "Delete SimpleName: pargs(170)", "Delete SimpleName: arg(171)", "Delete ArrayInitializer(172)", "Delete VariableDeclarationFragment(173)", "Delete VariableDeclarationStatement(174)", "Delete Block(184)", "Delete IfStatement(185)", "Delete Block(188)", "Delete InfixExpression: &&(228)", "Delete SimpleName: arg(229)", "Delete NullLiteral(230)", "Delete InfixExpression: ==(231)", "Delete InfixExpression: ||(242)", "Delete ParenthesizedExpression(243)", "Delete InfixExpression: &&(244)"]}}, {"Uberspect_cluster": {"actions": [{"root": "UPDATE from org.apache.commons.logging.Log to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: org.apache.commons.logging.Log from org.apache.commons.logging.Log to org.apache.log4j.Logger"]}, {"root": "UPDATE from Log to Logger", "operations": ["UPD SimpleName: Log from Log to Logger", "UPD SimpleName: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger", "UPD SimpleType: Log from Log to Logger"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: castInteger to MethodInvocation at 1", "INS SimpleName: identifier to MethodInvocation at 2", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS SimpleName: index to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 7", "INS SimpleType: Integer to VariableDeclarationStatement at 0", "INS SimpleName: AbstractExecutor to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: index to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 8"]}, {"root": "INS IfStatement to Block at 13", "operations": ["INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 1", "INS IfStatement to Block at 13", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: index to InfixExpression: == at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS VariableDeclarationStatement to Block at 7", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: AbstractExecutor to MethodInvocation at 0", "INS SimpleName: castInteger to MethodInvocation at 1", "INS SimpleType: Integer to VariableDeclarationStatement at 0", "INS SimpleName: index to VariableDeclarationFragment at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS SimpleName: identifier to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS SimpleName: index to InfixExpression: != at 0", "INS IfStatement to Block at 8", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "INS IfStatement to Block at 13", "operations": ["INS SimpleName: index to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 13", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1"]}, {"root": "INS TextElement: Gets the field named by to TagElement at 0", "operations": ["INS TextElement: Gets the field named by to TagElement at 0"]}, {"root": "UPDATE from Gets the field named by <code>key</code> for the class <code>c</code>. to <code>key</code> for the class", "operations": ["UPD TextElement: Gets the field named by <code>key</code> for the class <code>c</code>. from Gets the field named by <code>key</code> for the class <code>c</code>. to <code>key</code> for the class"]}, {"root": "INS TextElement: <code>c</code>. to TagElement at 2", "operations": ["INS TextElement: <code>c</code>. to TagElement at 2"]}, {"root": "UPDATE from Gets the method defined by <code>name</code> and to Gets the method defined by", "operations": ["UPD TextElement: Gets the method defined by <code>name</code> and from Gets the method defined by <code>name</code> and to Gets the method defined by"]}, {"root": "INS TextElement: <code>name</code> and to TagElement at 1", "operations": ["INS TextElement: <code>name</code> and to TagElement at 1"]}, {"root": "UPDATE from <code>params</code> for the Class <code>c</code>. to <code>params</code> for the Class", "operations": ["UPD TextElement: <code>params</code> for the Class <code>c</code>. from <code>params</code> for the Class <code>c</code>. to <code>params</code> for the Class"]}, {"root": "INS TextElement: <code>c</code>. to TagElement at 3", "operations": ["INS TextElement: <code>c</code>. to TagElement at 3"]}, {"root": "INS TextElement: Gets the method defined by to TagElement at 0", "operations": ["INS TextElement: Gets the method defined by to TagElement at 0"]}, {"root": "UPDATE from Gets the method defined by <code>key</code> and for the Class <code>c</code>. to <code>key</code> and for the Class", "operations": ["UPD TextElement: Gets the method defined by <code>key</code> and for the Class <code>c</code>. from Gets the method defined by <code>key</code> and for the Class <code>c</code>. to <code>key</code> and for the Class"]}, {"root": "INS TextElement: <code>c</code>. to TagElement at 2", "operations": ["INS TextElement: <code>c</code>. to TagElement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 1", "MOV ExpressionStatement to Block at 2", "MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 1", "MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "UPDATE from toString to castString", "operations": ["UPD SimpleName: toString from toString to castString", "UPD SimpleName: toString from toString to castString"]}, {"root": "UPDATE from && to !=", "operations": ["UPD InfixExpression: && from && to !=", "UPD InfixExpression: && from && to !="]}, {"root": "INS SimpleName: property to InfixExpression: && at 0", "operations": ["INS SimpleName: property to InfixExpression: && at 0"]}, {"root": "INS SimpleName: identifier to InfixExpression: && at 1", "operations": ["INS SimpleName: identifier to InfixExpression: && at 1"]}, {"root": "INS SimpleName: property to InfixExpression: && at 0", "operations": ["INS SimpleName: property to InfixExpression: && at 0"]}, {"root": "INS SimpleName: identifier to InfixExpression: && at 1", "operations": ["INS SimpleName: identifier to InfixExpression: && at 1"]}, {"root": "UPDATE from identifier to index", "operations": ["UPD SimpleName: identifier from identifier to index"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL SimpleName: String", "DEL SimpleName: identifier", "DEL SimpleType: String", "DEL PrefixExpression: !", "DEL ParenthesizedExpression", "DEL InstanceofExpression"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL SimpleName: identifier", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL SimpleName: String", "DEL InstanceofExpression", "DEL PrefixExpression: !"]}]}}, {"Uberspect_diff": {"operations": ["Update QualifiedName: org.apache.commons.logging.Log(10) to org.apache.log4j.Logger", "Update SimpleType: Log(57) to Logger", "Update SimpleName: Log(56) to Logger", "Update SimpleType: Log(106) to Logger", "Insert VariableDeclarationStatement(699) into Block(802) at 7", "Insert IfStatement(720) into Block(802) at 8", "Insert IfStatement(799) into Block(802) at 11", "Insert VariableDeclarationStatement(905) into Block(996) at 7", "Insert IfStatement(927) into Block(996) at 8", "Insert IfStatement(993) into Block(996) at 11", "Update SimpleName: Log(105) to Logger", "Insert TextElement: Gets the field named by(328) into TagElement(331) at 0", "Update TextElement: Gets the field named by <code>key</code> for the class <code>c</code>.(328) to <code>key</code> for the class", "Insert TextElement: <code>c</code>.(330) into TagElement(331) at 2", "Update TextElement: Gets the method defined by <code>name</code> and(395) to Gets the method defined by", "Insert TextElement: <code>name</code> and(398) into TagElement(401) at 1", "Update TextElement: <code>params</code> for the Class <code>c</code>.(396) to <code>params</code> for the Class", "Insert TextElement: <code>c</code>.(400) into TagElement(401) at 3", "Insert TextElement: Gets the method defined by(452) into TagElement(455) at 0", "Update TextElement: Gets the method defined by <code>key</code> and for the Class <code>c</code>.(448) to <code>key</code> and for the Class", "Insert TextElement: <code>c</code>.(454) into TagElement(455) at 2", "Insert SimpleType: Integer(692) into VariableDeclarationStatement(699) at 0", "Insert VariableDeclarationFragment(698) into VariableDeclarationStatement(699) at 1", "Insert InfixExpression: !=(702) into IfStatement(720) at 0", "Insert Block(719) into IfStatement(720) at 1", "Move InfixExpression: !=(719) into IfStatement(799) at 0", "Insert Block(798) into IfStatement(799) at 1", "Insert SimpleType: Integer(898) into VariableDeclarationStatement(905) at 0", "Insert VariableDeclarationFragment(904) into VariableDeclarationStatement(905) at 1", "Insert InfixExpression: !=(908) into IfStatement(927) at 0", "Insert Block(926) into IfStatement(927) at 1", "Move InfixExpression: !=(910) into IfStatement(993) at 0", "Insert Block(992) into IfStatement(993) at 1", "Insert SimpleName: Integer(691) into SimpleType: Integer(692) at 0", "Insert SimpleName: index(693) into VariableDeclarationFragment(698) at 0", "Insert MethodInvocation(697) into VariableDeclarationFragment(698) at 1", "Insert SimpleName: index(700) into InfixExpression: !=(702) at 0", "Insert NullLiteral(701) into InfixExpression: !=(702) at 1", "Move ExpressionStatement(693) into Block(719) at 0", "Move IfStatement(776) into Block(719) at 1", "Move IfStatement(744) into Block(798) at 0", "Insert IfStatement(797) into Block(798) at 1", "Insert SimpleName: Integer(897) into SimpleType: Integer(898) at 0", "Insert SimpleName: index(899) into VariableDeclarationFragment(904) at 0", "Insert MethodInvocation(903) into VariableDeclarationFragment(904) at 1", "Insert SimpleName: index(906) into InfixExpression: !=(908) at 0", "Insert NullLiteral(907) into InfixExpression: !=(908) at 1", "Move ExpressionStatement(883) into Block(926) at 0", "Move IfStatement(890) into Block(926) at 1", "Move IfStatement(936) into Block(992) at 0", "Insert IfStatement(991) into Block(992) at 1", "Update SimpleName: toString(614) to castString", "Insert SimpleName: AbstractExecutor(694) into MethodInvocation(697) at 0", "Insert SimpleName: castInteger(695) into MethodInvocation(697) at 1", "Insert SimpleName: identifier(696) into MethodInvocation(697) at 2", "Update InfixExpression: &&(726) to !=", "Insert InfixExpression: ==(763) into IfStatement(797) at 0", "Insert Block(796) into IfStatement(797) at 1", "Update SimpleName: toString(817) to castString", "Insert SimpleName: AbstractExecutor(900) into MethodInvocation(903) at 0", "Insert SimpleName: castInteger(901) into MethodInvocation(903) at 1", "Insert SimpleName: identifier(902) into MethodInvocation(903) at 2", "Update InfixExpression: &&(917) to !=", "Insert InfixExpression: ==(972) into IfStatement(991) at 0", "Insert Block(990) into IfStatement(991) at 1", "Insert SimpleName: property(740) into InfixExpression: !=(742) at 0", "Insert SimpleName: identifier(741) into InfixExpression: !=(742) at 1", "Insert SimpleName: index(761) into InfixExpression: ==(763) at 0", "Insert NullLiteral(762) into InfixExpression: ==(763) at 1", "Move ExpressionStatement(753) into Block(796) at 0", "Move IfStatement(760) into Block(796) at 1", "Move ExpressionStatement(769) into Block(796) at 2", "Move IfStatement(700) into Block(796) at 3", "Insert SimpleName: property(948) into InfixExpression: !=(950) at 0", "Insert SimpleName: identifier(949) into InfixExpression: !=(950) at 1", "Insert SimpleName: index(970) into InfixExpression: ==(972) at 0", "Insert NullLiteral(971) into InfixExpression: ==(972) at 1", "Move ExpressionStatement(946) into Block(990) at 0", "Move IfStatement(953) into Block(990) at 1", "Update SimpleName: identifier(690) to index", "Delete SimpleName: identifier(720)", "Delete SimpleName: String(721)", "Delete SimpleType: String(722)", "Delete InstanceofExpression(723)", "Delete ParenthesizedExpression(724)", "Delete PrefixExpression: !(725)", "Delete SimpleName: identifier(911)", "Delete SimpleName: String(912)", "Delete SimpleType: String(913)", "Delete InstanceofExpression(914)", "Delete ParenthesizedExpression(915)", "Delete PrefixExpression: !(916)"]}}], "commit_stats": [{"total_files": 82, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}