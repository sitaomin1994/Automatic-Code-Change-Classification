{"application": "apache-commons-codec", "csha": "7f7bc85528d7ec75b5c5c49b0bb3f83dc99653d9", "files": [{"Base64_cluster": {"actions": [{"root": "UPDATE from Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode to Since this class operates directly on byte streams, and not character streams, it is hard-coded to only", "operations": ["UPD TextElement: Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode from Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode to Since this class operates directly on byte streams, and not character streams, it is hard-coded to only"]}, {"root": "UPDATE from character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc). to encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252,", "operations": ["UPD TextElement: character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc). from character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc). to encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252,"]}, {"root": "INS TextElement: UTF-8, etc). to TagElement at 17", "operations": ["INS TextElement: UTF-8, etc). to TagElement at 17"]}, {"root": "UPDATE from This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in to This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified", "operations": ["UPD TextElement: This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in from This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in to This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified"]}, {"root": "UPDATE from Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64 to in Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64", "operations": ["UPD TextElement: Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64 from Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64 to in Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64"]}, {"root": "UPDATE from When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE. to When encoding the line length is 76, the line separator is CRLF, and the encoding table is", "operations": ["UPD TextElement: When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE. from When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE. to When encoding the line length is 76, the line separator is CRLF, and the encoding table is"]}, {"root": "INS TextElement: STANDARD_ENCODE_TABLE. to TagElement at 3", "operations": ["INS TextElement: STANDARD_ENCODE_TABLE. to TagElement at 3"]}, {"root": "UPDATE from , URL-safe encoding is used. In most cases this should be set to to , URL-safe encoding is used. In most cases this should be set to ", "operations": ["UPD TextElement: , URL-safe encoding is used. In most cases this should be set to from , URL-safe encoding is used. In most cases this should be set to to , URL-safe encoding is used. In most cases this should be set to "]}, {"root": "UPDATE from Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of", "operations": ["UPD TextElement: Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). from Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of", "UPD TextElement: Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). from Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of", "UPD TextElement: Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). from Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of"]}, {"root": "UPDATE from If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when", "operations": ["UPD TextElement: If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. from If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when", "UPD TextElement: If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. from If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when", "UPD TextElement: If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. from If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding. to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when"]}, {"root": "INS TextElement: decoding. to TagElement: @param at 3", "operations": ["INS TextElement: decoding. to TagElement: @param at 3"]}, {"root": "INS TextElement: decoding. to TagElement: @param at 3", "operations": ["INS TextElement: decoding. to TagElement: @param at 3"]}, {"root": "INS TextElement: decoding. to TagElement: @param at 3", "operations": ["INS TextElement: decoding. to TagElement: @param at 3"]}, {"root": "UPDATE from  the context to be used to the context to be used", "operations": ["UPD TextElement:  the context to be used from  the context to be used to the context to be used", "UPD TextElement:  the context to be used from  the context to be used to the context to be used"]}]}}, {"Base64_diff": {"operations": ["Update TextElement: Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode(19) to Since this class operates directly on byte streams, and not character streams, it is hard-coded to only", "Update TextElement: character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).(20) to encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252,", "Insert TextElement: UTF-8, etc).(21) into TagElement(26) at 17", "Update TextElement: This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in(244) to This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified", "Update TextElement: Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64(245) to in Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64", "Update TextElement: When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE.(524) to When encoding the line length is 76, the line separator is CRLF, and the encoding table is", "Insert TextElement: STANDARD_ENCODE_TABLE.(526) into TagElement(531) at 3", "Update TextElement: , URL-safe encoding is used. In most cases this should be set to(534) to , URL-safe encoding is used. In most cases this should be set to ", "Update TextElement: Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).(566) to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of", "Update TextElement: If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.(567) to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when", "Insert TextElement: decoding.(570) into TagElement: @param(571) at 3", "Update TextElement: Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).(595) to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of", "Update TextElement: If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.(596) to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when", "Insert TextElement: decoding.(600) into TagElement: @param(601) at 3", "Update TextElement: Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).(636) to Each line of encoded data will be at most of the given length (rounded down to nearest multiple of", "Update TextElement: If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.(637) to 4). If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when", "Insert TextElement: decoding.(642) into TagElement: @param(643) at 3", "Update TextElement:  the context to be used(821) to the context to be used", "Update TextElement:  the context to be used(1181) to the context to be used"]}}, {"BaseNCodec_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: useChunking to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from Extracts buffered data into the provided byte[] array, starting at position bPos, to Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail", "operations": ["UPD TextElement: Extracts buffered data into the provided byte[] array, starting at position bPos, from Extracts buffered data into the provided byte[] array, starting at position bPos, to Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail"]}, {"root": "UPDATE from up to a maximum of bAvail bytes. Returns how many bytes were actually extracted. to bytes. Returns how many bytes were actually extracted.", "operations": ["UPD TextElement: up to a maximum of bAvail bytes. Returns how many bytes were actually extracted. from up to a maximum of bAvail bytes. Returns how many bytes were actually extracted. to bytes. Returns how many bytes were actually extracted."]}, {"root": "INS TextElement: <p> to TagElement at 2", "operations": ["INS TextElement: <p> to TagElement at 2"]}, {"root": "INS TextElement: Package protected for access from I/O streams. to TagElement at 3", "operations": ["INS TextElement: Package protected for access from I/O streams. to TagElement at 3"]}, {"root": "UPDATE from  the context to be used to the context to be used", "operations": ["UPD TextElement:  the context to be used from  the context to be used to the context to be used"]}, {"root": "UPDATE from Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the to Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of", "operations": ["UPD TextElement: Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the from Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the to Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of"]}, {"root": "UPDATE from Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]. to the Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].", "operations": ["UPD TextElement: Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]. from Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]. to the Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]."]}, {"root": "UPDATE from Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the to Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of", "operations": ["UPD TextElement: Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the from Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the to Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of"]}, {"root": "UPDATE from Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String. to the Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.", "operations": ["UPD TextElement: Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String. from Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String. to the Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String."]}, {"root": "UPDATE from  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied. to  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String", "operations": ["UPD TextElement:  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied. from  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied. to  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String"]}, {"root": "INS TextElement: supplied. to TagElement: @return at 1", "operations": ["INS TextElement: supplied. to TagElement: @return at 1"]}, {"root": "UPDATE from Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to to Variable tracks how many characters have been written to the current line. Only used when encoding. We use", "operations": ["UPD TextElement: Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to from Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to to Variable tracks how many characters have been written to the current line. Only used when encoding. We use"]}, {"root": "UPDATE from make sure each encoded line never goes beyond lineLength (if lineLength > 0). to it to make sure each encoded line never goes beyond lineLength (if lineLength > 0).", "operations": ["UPD TextElement: make sure each encoded line never goes beyond lineLength (if lineLength > 0). from make sure each encoded line never goes beyond lineLength (if lineLength > 0). to it to make sure each encoded line never goes beyond lineLength (if lineLength > 0)."]}, {"root": "UPDATE from Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. to Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. This", "operations": ["UPD TextElement: Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. from Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. to Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. This"]}, {"root": "UPDATE from This variable helps track that. to variable helps track that.", "operations": ["UPD TextElement: This variable helps track that. from This variable helps track that. to variable helps track that."]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV InfixExpression: && to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: useChunking to ConditionalExpression at 0", "operations": ["INS SimpleName: useChunking to ConditionalExpression at 0"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression"]}]}}, {"BaseNCodec_diff": {"operations": ["Insert VariableDeclarationStatement(299) into Block(320) at 2", "Insert Modifier: final(288) into VariableDeclarationStatement(299) at 0", "Insert PrimitiveType: boolean(289) into VariableDeclarationStatement(299) at 1", "Insert VariableDeclarationFragment(298) into VariableDeclarationStatement(299) at 2", "Update TextElement: Extracts buffered data into the provided byte[] array, starting at position bPos,(483) to Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail", "Update TextElement: up to a maximum of bAvail bytes. Returns how many bytes were actually extracted.(484) to bytes. Returns how many bytes were actually extracted.", "Insert TextElement: <p>(490) into TagElement(492) at 2", "Insert TextElement: Package protected for access from I/O streams.(491) into TagElement(492) at 3", "Update TextElement:  the context to be used(496) to the context to be used", "Update TextElement: Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the(598) to Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of", "Update TextElement: Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].(599) to the Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].", "Update TextElement: Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the(700) to Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of", "Update TextElement: Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.(701) to the Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.", "Update TextElement:  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.(706) to  An object (of type byte[]) containing the binary data which corresponds to the byte[] or String", "Insert TextElement: supplied.(714) into TagElement: @return(715) at 1", "Update TextElement: Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to(80) to Variable tracks how many characters have been written to the current line. Only used when encoding. We use", "Update TextElement: make sure each encoded line never goes beyond lineLength (if lineLength > 0).(81) to it to make sure each encoded line never goes beyond lineLength (if lineLength > 0).", "Update TextElement: Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding.(88) to Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding. This", "Update TextElement: This variable helps track that.(89) to variable helps track that.", "Insert SimpleName: useChunking(290) into VariableDeclarationFragment(298) at 0", "Move InfixExpression: &&(297) into VariableDeclarationFragment(298) at 1", "Insert SimpleName: useChunking(303) into ConditionalExpression(311) at 0", "Delete ParenthesizedExpression(298)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}