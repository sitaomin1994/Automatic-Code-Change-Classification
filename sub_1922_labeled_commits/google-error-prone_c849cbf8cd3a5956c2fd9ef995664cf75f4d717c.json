{"application": "google-error-prone", "csha": "c849cbf8cd3a5956c2fd9ef995664cf75f4d717c", "files": [{"GuavaSelfEquals_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.bugpatterns", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.BugPattern.Category.GUAVA"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.BugPattern.SeverityLevel.ERROR", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.matchers.Matchers.allOf", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.matchers.Matchers.sameArgument", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.matchers.Matchers.staticMethod", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.BugPattern"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.VisitorState"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.fixes.Fix"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.fixes.SuggestedFix", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.matchers.Description", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.matchers.Matcher", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.util.ASTHelpers"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.ExpressionTree"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.MethodInvocationTree"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.source.tree.Tree", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.Tree.Kind"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.util.TreePath"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.tools.javac.code.Symbol.TypeSymbol"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCBlock", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCFieldAccess", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.tree.JCTree.JCVariableDecl", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.annotation.Nullable", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: getParentPath", "DEL MemberValuePair", "DEL Modifier: static", "DEL SimpleName: VisitorState", "DEL MethodDeclaration", "DEL ParameterizedType: List<? extends ExpressionTree>", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: generateFix", "DEL SimpleName: declaration", "DEL SimpleType: MethodInvocationTree", "DEL SimpleName: getLeaf", "DEL SimpleName: List", "DEL SimpleType: JCVariableDecl", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: JCVariableDecl", "DEL SimpleType: JCFieldAccess", "DEL SimpleName: jcTree", "DEL TextElement: Points out if an object is tested for equality to itself using Guava Libraries.", "DEL SimpleName: methodInvocationTree", "DEL SimpleName: ExpressionTree", "DEL WildcardType: ? extends JCTree", "DEL Block", "DEL MethodInvocation", "DEL QualifiedName: Kind.IDENTIFIER", "DEL SimpleName: ASTHelpers", "DEL SimpleType: VisitorState", "DEL MarkerAnnotation", "DEL SimpleName: Fix", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: JCFieldAccess", "DEL MethodInvocation", "DEL SimpleName: fieldFix", "DEL CastExpression", "DEL SimpleName: state", "DEL SimpleName: List", "DEL PrefixExpression: !", "DEL SimpleType: VisitorState", "DEL Block", "DEL SimpleType: ExpressionTree", "DEL TagElement", "DEL SimpleName: describe", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: toReplace", "DEL PrimitiveType: void", "DEL SimpleName: prefixWith", "DEL SimpleType: Fix", "DEL Modifier: protected", "DEL StringLiteral: \"equal\"", "DEL WildcardType: ? extends ExpressionTree", "DEL SimpleName: args", "DEL NumberLiteral: 0", "DEL SimpleName: members", "DEL MethodInvocation", "DEL SwitchStatement", "DEL SimpleType: MethodInvocationTree", "DEL Modifier: static", "DEL SimpleName: toString", "DEL SimpleName: IDENTIFIER", "DEL SimpleName: toReplace", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleType: ExpressionTree", "DEL SingleVariableDeclaration", "DEL SimpleType: Tree", "DEL StringLiteral: \"Expected arg \"", "DEL Modifier: protected", "DEL InfixExpression: &&", "DEL SimpleName: get", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: explanation", "DEL SimpleName: Matcher", "DEL SimpleName: getKind", "DEL SimpleName: getExpression", "DEL SimpleName: state", "DEL SimpleName: methodInvocationTree", "DEL TextElement: Finds a replacement for toReplace expression tree if possible. ", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: getMembers", "DEL TagElement: @author", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL Block", "DEL SimpleName: verifyArgsType", "DEL Block", "DEL SimpleName: JCBlock", "DEL VariableDeclarationStatement", "DEL MemberValuePair", "DEL SwitchCase", "DEL SingleVariableDeclaration", "DEL SimpleName: GUAVA", "DEL StringLiteral: \"com.google.common.base.Objects\"", "DEL SimpleName: getLeaf", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: ExpressionTree", "DEL SimpleName: toReplace", "DEL VariableDeclarationFragment", "DEL SimpleName: jcTree", "DEL SimpleName: getKind", "DEL MethodInvocation", "DEL SimpleName: toReplace", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: toReplace", "DEL NullLiteral", "DEL SimpleName: toReplace", "DEL SimpleName: arg", "DEL Javadoc", "DEL Assignment: =", "DEL SimpleType: IllegalStateException", "DEL SimpleType: Matcher", "DEL SimpleName: Fix", "DEL SimpleName: path", "DEL SimpleName: state", "DEL SimpleName: SuggestedFix", "DEL Modifier: final", "DEL SimpleType: Tree", "DEL MethodInvocation", "DEL SimpleName: summary", "DEL SimpleType: ExpressionTree", "DEL SimpleName: args", "DEL StringLiteral: \".\"", "DEL StringLiteral: \" to be a field access or identifier\"", "DEL TagElement", "DEL SimpleType: Fix", "DEL SimpleName: severity", "DEL MethodInvocation", "DEL SimpleName: members", "DEL SimpleName: describe", "DEL SimpleName: describeMatch", "DEL TextElement: Example: Objects.equal(foo, foo)", "DEL SimpleName: SuggestedFix", "DEL SimpleName: BugPattern", "DEL VariableDeclarationFragment", "DEL SimpleName: path", "DEL Modifier: private", "DEL SimpleName: get", "DEL NumberLiteral: 1", "DEL SimpleName: replace", "DEL TextElement:  alexeagle@google.com (Alex Eagle)", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: GUAVA_MATCHER", "DEL SimpleName: ExpressionTree", "DEL SimpleName: MEMBER_SELECT", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: getTypes", "DEL SimpleName: tree", "DEL SimpleName: toReplace", "DEL SimpleName: name", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: methodInvocationTree", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: state", "DEL Javadoc", "DEL NullLiteral", "DEL NormalAnnotation", "DEL SimpleName: SuggestedFix", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL SimpleName: getStatements", "DEL SimpleName: get", "DEL ParameterizedType: List<? extends JCTree>", "DEL SimpleName: JCClassDecl", "DEL SimpleName: methodInvocationTree", "DEL SimpleName: allOf", "DEL SimpleName: get", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: staticMethod", "DEL SimpleName: ERROR", "DEL SimpleName: getPath", "DEL SimpleName: VisitorState", "DEL SimpleName: getKind", "DEL SimpleName: path", "DEL Block", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: tree", "DEL SimpleName: jcTree", "DEL EnhancedForStatement", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: named", "DEL MethodInvocation", "DEL SimpleName: arg", "DEL CastExpression", "DEL SimpleName: getArguments", "DEL IfStatement", "DEL Block", "DEL SimpleName: path", "DEL SimpleName: methodInvocationTree", "DEL Block", "DEL SimpleName: state", "DEL QualifiedName: Description.NO_MATCH", "DEL Block", "DEL SimpleType: Description", "DEL NumberLiteral: 0", "DEL MemberValuePair", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL SimpleType: Fix", "DEL SimpleName: state", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: variableTypeSymbol", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL SimpleName: JCVariableDecl", "DEL SimpleName: members", "DEL SimpleName: methodInvocationTree", "DEL SimpleType: MethodInvocationTree", "DEL SimpleName: getLeaf", "DEL SimpleType: Description", "DEL SimpleName: members", "DEL NumberLiteral: 1", "DEL StringLiteral: \"An object is tested for equality to itself using Guava Libraries\"", "DEL QualifiedName: Kind.IDENTIFIER", "DEL SimpleType: JCClassDecl", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: args", "DEL SimpleName: MethodInvocationTreeMatcher", "DEL MethodInvocation", "DEL SimpleType: JCVariableDecl", "DEL SimpleName: methodInvocationTree", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL ArrayInitializer", "DEL SimpleType: BugChecker", "DEL MethodInvocation", "DEL SimpleName: TreePath", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: state", "DEL Block", "DEL SimpleName: getKind", "DEL QualifiedName: Kind.VARIABLE", "DEL SimpleName: path", "DEL SimpleName: matches", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: Fix", "DEL MethodInvocation", "DEL SimpleName: VisitorState", "DEL ParameterizedType: Matcher<MethodInvocationTree>", "DEL SimpleType: MethodInvocationTree", "DEL SimpleName: MethodInvocationTree", "DEL Modifier: static", "DEL SimpleName: Nullable", "DEL SimpleName: path", "DEL SimpleName: toReplace", "DEL SimpleName: args", "DEL ReturnStatement", "DEL SimpleName: declaration", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL MemberValuePair", "DEL SimpleType: VisitorState", "DEL Block", "DEL IfStatement", "DEL InfixExpression: ==", "DEL StringLiteral: \"The arguments to this equal method are the same object, so it always returns \"", "DEL SimpleName: fieldFix", "DEL InfixExpression: ==", "DEL SimpleName: Tree", "DEL SimpleType: Fix", "DEL MethodInvocation", "DEL SimpleName: getType", "DEL Block", "DEL SimpleName: toReplace", "DEL MemberValuePair", "DEL SimpleName: verifyArgsType", "DEL Block", "DEL SimpleName: toReplace", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: state", "DEL SingleVariableDeclaration", "DEL SimpleType: VisitorState", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: declaration", "DEL NumberLiteral: 1", "DEL StringLiteral: \"true\"", "DEL SimpleName: Description", "DEL SimpleName: getKind", "DEL IfStatement", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: path", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: get", "DEL InfixExpression: +", "DEL SimpleName: toReplace", "DEL SimpleName: getSymbol", "DEL SingleVariableDeclaration", "DEL InfixExpression: +", "DEL SimpleName: MethodInvocationTree", "DEL SimpleName: fieldFix", "DEL SimpleName: path", "DEL MethodInvocation", "DEL SingleMemberAnnotation", "DEL Block", "DEL SimpleType: TypeSymbol", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: JCTree", "DEL SimpleName: getName", "DEL SimpleName: generateFix", "DEL InfixExpression: !=", "DEL SimpleName: arg", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: IllegalStateException", "DEL SimpleName: methodInvocationTree", "DEL QualifiedName: Kind.BLOCK", "DEL InfixExpression: !=", "DEL IfStatement", "DEL SimpleName: MethodInvocationTree", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: erasure", "DEL MethodInvocation", "DEL SimpleName: variableTypeSymbol", "DEL ExpressionStatement", "DEL SimpleName: getName", "DEL MethodInvocation", "DEL SimpleName: SuppressWarnings", "DEL SimpleType: ExpressionTree", "DEL SimpleType: JCTree", "DEL SimpleName: getLeaf", "DEL QualifiedName: Kind.CLASS", "DEL SimpleName: getKind", "DEL SimpleName: JCTree", "DEL TextElement: Matches calls to the Guava method Objects.equal() in which the two arguments are the same", "DEL ParenthesizedExpression", "DEL SimpleName: path", "DEL SimpleName: VisitorState", "DEL ExpressionStatement", "DEL SimpleName: ExpressionTree", "DEL SimpleType: List", "DEL CastExpression", "DEL SimpleName: matchMethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: replace", "DEL MethodInvocation", "DEL SimpleName: onClass", "DEL SimpleName: args", "DEL ExpressionStatement", "DEL SimpleName: GuavaSelfEquals", "DEL SimpleName: state", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL TextElement: Verifies arguments to be either identifiers or field accesses. ", "DEL BreakStatement", "DEL Modifier: public", "DEL FieldAccess", "DEL SimpleName: JCTree", "DEL TextElement: reference.", "DEL MethodInvocation", "DEL SimpleName: getArguments", "DEL SimpleType: JCBlock", "DEL MethodInvocation", "DEL SimpleName: getKind", "DEL SimpleName: GUAVA_MATCHER", "DEL InfixExpression: !=", "DEL SimpleName: state", "DEL QualifiedName: Kind.CLASS", "DEL SimpleName: getKind", "DEL SimpleName: declaration", "DEL IfStatement", "DEL Modifier: protected", "DEL SimpleName: TypeSymbol", "DEL StringLiteral: \"GuavaSelfEquals\"", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: Fix", "DEL Modifier: private", "DEL SimpleName: Tree", "DEL SimpleName: getTypes", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: ASTHelpers", "DEL Assignment: =", "DEL SimpleName: tsym", "DEL SimpleName: getLeaf", "DEL SimpleName: Description", "DEL SimpleType: MethodInvocationTreeMatcher", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL WhileStatement", "DEL SimpleName: category", "DEL MethodDeclaration", "DEL SimpleName: toReplace", "DEL ReturnStatement", "DEL SimpleName: MethodInvocationTree", "DEL SimpleName: methodInvocationTree", "DEL SimpleName: methodInvocationTree", "DEL SimpleName: BugChecker", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL EnhancedForStatement", "DEL SimpleName: isMemberOf", "DEL MethodInvocation", "DEL SimpleName: state", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: fix", "DEL SimpleName: fieldFix", "DEL CastExpression", "DEL MethodInvocation", "DEL Block", "DEL QualifiedName: Kind.IDENTIFIER", "DEL SimpleName: fieldFix", "DEL MethodInvocation", "DEL SimpleName: sameArgument", "DEL Assignment: =", "DEL SimpleName: path", "DEL StringLiteral: \"true.  Either change the arguments to point to different objects or substitute true.\"", "DEL SimpleType: TreePath", "DEL MethodInvocation", "DEL SimpleName: fix"]}]}}, {"GuavaSelfEquals_diff": {"operations": ["Delete QualifiedName: com.google.errorprone.bugpatterns(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.errorprone.BugPattern.Category.GUAVA(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.errorprone.BugPattern.SeverityLevel.ERROR(4)", "Delete ImportDeclaration(5)", "Delete ImportDeclaration(7)", "Delete ImportDeclaration(9)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.errorprone.BugPattern(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.errorprone.VisitorState(14)", "Delete ImportDeclaration(15)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.errorprone.fixes.Fix(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.errorprone.fixes.SuggestedFix(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.errorprone.matchers.Description(22)", "Delete ImportDeclaration(23)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.errorprone.util.ASTHelpers(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.sun.source.tree.ExpressionTree(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.sun.source.tree.MethodInvocationTree(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.sun.source.tree.Tree(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.sun.source.tree.Tree.Kind(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.sun.source.util.TreePath(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: com.sun.tools.javac.code.Symbol.TypeSymbol(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCBlock(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCFieldAccess(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: com.sun.tools.javac.tree.JCTree.JCVariableDecl(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: java.util.List(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: javax.annotation.Nullable(52)", "Delete ImportDeclaration(53)", "Delete TextElement: Points out if an object is tested for equality to itself using Guava Libraries.(54)", "Delete TagElement(55)", "Delete TextElement:  alexeagle@google.com (Alex Eagle)(56)", "Delete TagElement: @author(57)", "Delete Javadoc(58)", "Delete SimpleName: BugPattern(59)", "Delete SimpleName: name(60)", "Delete StringLiteral: \"GuavaSelfEquals\"(61)", "Delete MemberValuePair(62)", "Delete SimpleName: summary(63)", "Delete StringLiteral: \"An object is tested for equality to itself using Guava Libraries\"(64)", "Delete MemberValuePair(65)", "Delete SimpleName: explanation(66)", "Delete StringLiteral: \"The arguments to this equal method are the same object, so it always returns \"(67)", "Delete StringLiteral: \"true.  Either change the arguments to point to different objects or substitute true.\"(68)", "Delete InfixExpression: +(69)", "Delete MemberValuePair(70)", "Delete SimpleName: category(71)", "Delete SimpleName: GUAVA(72)", "Delete MemberValuePair(73)", "Delete SimpleName: severity(74)", "Delete SimpleName: ERROR(75)", "Delete MemberValuePair(76)", "Delete NormalAnnotation(77)", "Delete Modifier: public(78)", "Delete SimpleName: GuavaSelfEquals(79)", "Delete SimpleName: BugChecker(80)", "Delete SimpleType: BugChecker(81)", "Delete TextElement: reference.(85)", "Delete TextElement: Example: Objects.equal(foo, foo)(86)", "Delete TagElement(87)", "Delete Javadoc(88)", "Delete SimpleName: SuppressWarnings(89)", "Delete StringLiteral: \"unchecked\"(90)", "Delete ArrayInitializer(91)", "Delete SingleMemberAnnotation(92)", "Delete Modifier: private(93)", "Delete Modifier: static(94)", "Delete Modifier: final(95)", "Delete SimpleName: MethodInvocationTree(98)", "Delete SimpleType: MethodInvocationTree(99)", "Delete SimpleName: GUAVA_MATCHER(101)", "Delete SimpleName: allOf(102)", "Delete SimpleName: staticMethod(103)", "Delete MethodInvocation(104)", "Delete SimpleName: onClass(105)", "Delete StringLiteral: \"com.google.common.base.Objects\"(106)", "Delete MethodInvocation(107)", "Delete SimpleName: named(108)", "Delete StringLiteral: \"equal\"(109)", "Delete MethodInvocation(110)", "Delete SimpleName: sameArgument(111)", "Delete NumberLiteral: 0(112)", "Delete NumberLiteral: 1(113)", "Delete MethodInvocation(114)", "Delete MethodInvocation(115)", "Delete VariableDeclarationFragment(116)", "Delete FieldDeclaration(117)", "Delete SimpleName: Override(118)", "Delete MarkerAnnotation(119)", "Delete Modifier: public(120)", "Delete SimpleName: Description(121)", "Delete SimpleType: Description(122)", "Delete SimpleName: matchMethodInvocation(123)", "Delete SimpleName: MethodInvocationTree(124)", "Delete SimpleType: MethodInvocationTree(125)", "Delete SimpleName: methodInvocationTree(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: VisitorState(128)", "Delete SimpleType: VisitorState(129)", "Delete SimpleName: state(130)", "Delete SingleVariableDeclaration(131)", "Delete SimpleName: GUAVA_MATCHER(132)", "Delete SimpleName: matches(133)", "Delete SimpleName: methodInvocationTree(134)", "Delete SimpleName: state(135)", "Delete MethodInvocation(136)", "Delete PrefixExpression: !(137)", "Delete QualifiedName: Description.NO_MATCH(138)", "Delete ReturnStatement(139)", "Delete Block(140)", "Delete IfStatement(141)", "Delete SimpleName: describe(142)", "Delete SimpleName: methodInvocationTree(143)", "Delete SimpleName: state(144)", "Delete MethodInvocation(145)", "Delete ReturnStatement(146)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete Modifier: private(149)", "Delete SimpleName: Description(150)", "Delete SimpleType: Description(151)", "Delete SimpleName: describe(152)", "Delete SimpleName: MethodInvocationTree(153)", "Delete SimpleType: MethodInvocationTree(154)", "Delete SimpleName: methodInvocationTree(155)", "Delete SingleVariableDeclaration(156)", "Delete SimpleName: VisitorState(157)", "Delete SimpleType: VisitorState(158)", "Delete SimpleName: state(159)", "Delete SingleVariableDeclaration(160)", "Delete SimpleName: verifyArgsType(161)", "Delete SimpleName: methodInvocationTree(162)", "Delete MethodInvocation(163)", "Delete ExpressionStatement(164)", "Delete SimpleName: List(165)", "Delete SimpleType: List(166)", "Delete SimpleName: ExpressionTree(167)", "Delete SimpleType: ExpressionTree(168)", "Delete WildcardType: ? extends ExpressionTree(169)", "Delete ParameterizedType: List<? extends ExpressionTree>(170)", "Delete SimpleName: args(171)", "Delete SimpleName: methodInvocationTree(172)", "Delete SimpleName: getArguments(173)", "Delete MethodInvocation(174)", "Delete VariableDeclarationFragment(175)", "Delete VariableDeclarationStatement(176)", "Delete SimpleName: ExpressionTree(177)", "Delete SimpleType: ExpressionTree(178)", "Delete SimpleName: toReplace(179)", "Delete VariableDeclarationFragment(180)", "Delete VariableDeclarationStatement(181)", "Delete SimpleName: args(182)", "Delete SimpleName: get(183)", "Delete NumberLiteral: 1(184)", "Delete MethodInvocation(185)", "Delete SimpleName: getKind(186)", "Delete MethodInvocation(187)", "Delete QualifiedName: Kind.IDENTIFIER(188)", "Delete InfixExpression: ==(189)", "Delete SimpleName: toReplace(190)", "Delete SimpleName: args(191)", "Delete SimpleName: get(192)", "Delete NumberLiteral: 1(193)", "Delete MethodInvocation(194)", "Delete Assignment: =(195)", "Delete ExpressionStatement(196)", "Delete Block(197)", "Delete SimpleName: args(198)", "Delete SimpleName: get(199)", "Delete NumberLiteral: 0(200)", "Delete MethodInvocation(201)", "Delete SimpleName: getKind(202)", "Delete MethodInvocation(203)", "Delete QualifiedName: Kind.IDENTIFIER(204)", "Delete InfixExpression: ==(205)", "Delete SimpleName: toReplace(206)", "Delete SimpleName: args(207)", "Delete SimpleName: get(208)", "Delete NumberLiteral: 0(209)", "Delete MethodInvocation(210)", "Delete Assignment: =(211)", "Delete ExpressionStatement(212)", "Delete Block(213)", "Delete SimpleName: toReplace(214)", "Delete SimpleName: args(215)", "Delete SimpleName: get(216)", "Delete NumberLiteral: 1(217)", "Delete MethodInvocation(218)", "Delete Assignment: =(219)", "Delete ExpressionStatement(220)", "Delete Block(221)", "Delete IfStatement(222)", "Delete IfStatement(223)", "Delete SimpleName: Fix(224)", "Delete SimpleType: Fix(225)", "Delete SimpleName: fix(226)", "Delete SimpleName: generateFix(227)", "Delete SimpleName: methodInvocationTree(228)", "Delete SimpleName: state(229)", "Delete SimpleName: toReplace(230)", "Delete MethodInvocation(231)", "Delete VariableDeclarationFragment(232)", "Delete VariableDeclarationStatement(233)", "Delete SimpleName: methodInvocationTree(235)", "Delete SimpleName: fix(236)", "Delete MethodInvocation(237)", "Delete ReturnStatement(238)", "Delete Block(239)", "Delete MethodDeclaration(240)", "Delete TextElement: Verifies arguments to be either identifiers or field accesses. (241)", "Delete TagElement(242)", "Delete Javadoc(243)", "Delete Modifier: protected(244)", "Delete Modifier: static(245)", "Delete PrimitiveType: void(246)", "Delete SimpleName: verifyArgsType(247)", "Delete SimpleName: MethodInvocationTree(248)", "Delete SimpleType: MethodInvocationTree(249)", "Delete SimpleName: methodInvocationTree(250)", "Delete SingleVariableDeclaration(251)", "Delete SimpleName: ExpressionTree(252)", "Delete SimpleType: ExpressionTree(253)", "Delete SimpleName: arg(254)", "Delete SingleVariableDeclaration(255)", "Delete SimpleName: methodInvocationTree(256)", "Delete SimpleName: getArguments(257)", "Delete MethodInvocation(258)", "Delete SimpleName: arg(259)", "Delete SimpleName: getKind(260)", "Delete MethodInvocation(261)", "Delete SimpleName: IDENTIFIER(262)", "Delete SwitchCase(263)", "Delete SimpleName: MEMBER_SELECT(264)", "Delete SwitchCase(265)", "Delete BreakStatement(266)", "Delete SwitchCase(267)", "Delete SimpleName: IllegalStateException(268)", "Delete SimpleType: IllegalStateException(269)", "Delete StringLiteral: \"Expected arg \"(270)", "Delete SimpleName: arg(271)", "Delete StringLiteral: \" to be a field access or identifier\"(272)", "Delete InfixExpression: +(273)", "Delete ClassInstanceCreation(274)", "Delete ThrowStatement(275)", "Delete SwitchStatement(276)", "Delete Block(277)", "Delete EnhancedForStatement(278)", "Delete Block(279)", "Delete MethodDeclaration(280)", "Delete TextElement: Finds a replacement for toReplace expression tree if possible. (281)", "Delete TagElement(282)", "Delete Javadoc(283)", "Delete Modifier: protected(284)", "Delete Modifier: static(285)", "Delete SimpleName: Fix(286)", "Delete SimpleType: Fix(287)", "Delete SimpleName: generateFix(288)", "Delete SimpleName: Tree(289)", "Delete SimpleType: Tree(290)", "Delete SimpleName: tree(291)", "Delete SingleVariableDeclaration(292)", "Delete SimpleName: VisitorState(293)", "Delete SimpleType: VisitorState(294)", "Delete SimpleName: state(295)", "Delete SingleVariableDeclaration(296)", "Delete SimpleName: ExpressionTree(297)", "Delete SimpleType: ExpressionTree(298)", "Delete SimpleName: toReplace(299)", "Delete SingleVariableDeclaration(300)", "Delete SimpleName: Fix(301)", "Delete SimpleType: Fix(302)", "Delete SimpleName: fieldFix(303)", "Delete SimpleName: fieldFix(304)", "Delete SimpleName: toReplace(305)", "Delete SimpleName: state(306)", "Delete MethodInvocation(307)", "Delete VariableDeclarationFragment(308)", "Delete VariableDeclarationStatement(309)", "Delete SimpleName: fieldFix(310)", "Delete NullLiteral(311)", "Delete InfixExpression: !=(312)", "Delete SimpleName: fieldFix(313)", "Delete ReturnStatement(314)", "Delete Block(315)", "Delete IfStatement(316)", "Delete SimpleName: SuggestedFix(317)", "Delete SimpleName: replace(318)", "Delete SimpleName: tree(319)", "Delete StringLiteral: \"true\"(320)", "Delete MethodInvocation(321)", "Delete ReturnStatement(322)", "Delete Block(323)", "Delete MethodDeclaration(324)", "Delete SimpleName: Nullable(325)", "Delete MarkerAnnotation(326)", "Delete Modifier: protected(327)", "Delete Modifier: static(328)", "Delete SimpleName: Fix(329)", "Delete SimpleType: Fix(330)", "Delete SimpleName: fieldFix(331)", "Delete SimpleName: Tree(332)", "Delete SimpleType: Tree(333)", "Delete SimpleName: toReplace(334)", "Delete SingleVariableDeclaration(335)", "Delete SimpleName: VisitorState(336)", "Delete SimpleType: VisitorState(337)", "Delete SimpleName: state(338)", "Delete SingleVariableDeclaration(339)", "Delete SimpleName: TreePath(340)", "Delete SimpleType: TreePath(341)", "Delete SimpleName: path(342)", "Delete SimpleName: state(343)", "Delete SimpleName: getPath(344)", "Delete MethodInvocation(345)", "Delete VariableDeclarationFragment(346)", "Delete VariableDeclarationStatement(347)", "Delete SimpleName: path(348)", "Delete NullLiteral(349)", "Delete InfixExpression: !=(350)", "Delete SimpleName: path(351)", "Delete SimpleName: getLeaf(352)", "Delete MethodInvocation(353)", "Delete SimpleName: getKind(354)", "Delete MethodInvocation(355)", "Delete QualifiedName: Kind.CLASS(356)", "Delete InfixExpression: !=(357)", "Delete InfixExpression: &&(358)", "Delete SimpleName: path(359)", "Delete SimpleName: getLeaf(360)", "Delete MethodInvocation(361)", "Delete SimpleName: getKind(362)", "Delete MethodInvocation(363)", "Delete QualifiedName: Kind.BLOCK(364)", "Delete InfixExpression: !=(365)", "Delete InfixExpression: &&(366)", "Delete SimpleName: path(367)", "Delete SimpleName: path(368)", "Delete SimpleName: getParentPath(369)", "Delete MethodInvocation(370)", "Delete Assignment: =(371)", "Delete ExpressionStatement(372)", "Delete Block(373)", "Delete WhileStatement(374)", "Delete SimpleName: path(375)", "Delete NullLiteral(376)", "Delete InfixExpression: ==(377)", "Delete NullLiteral(378)", "Delete ReturnStatement(379)", "Delete Block(380)", "Delete IfStatement(381)", "Delete SimpleName: List(382)", "Delete SimpleType: List(383)", "Delete SimpleName: JCTree(384)", "Delete SimpleType: JCTree(385)", "Delete WildcardType: ? extends JCTree(386)", "Delete ParameterizedType: List<? extends JCTree>(387)", "Delete SimpleName: members(388)", "Delete VariableDeclarationFragment(389)", "Delete VariableDeclarationStatement(390)", "Delete SimpleName: path(391)", "Delete SimpleName: getLeaf(392)", "Delete MethodInvocation(393)", "Delete SimpleName: getKind(394)", "Delete MethodInvocation(395)", "Delete QualifiedName: Kind.CLASS(396)", "Delete InfixExpression: ==(397)", "Delete SimpleName: members(398)", "Delete SimpleName: JCClassDecl(399)", "Delete SimpleType: JCClassDecl(400)", "Delete SimpleName: path(401)", "Delete SimpleName: getLeaf(402)", "Delete MethodInvocation(403)", "Delete CastExpression(404)", "Delete ParenthesizedExpression(405)", "Delete SimpleName: getMembers(406)", "Delete MethodInvocation(407)", "Delete Assignment: =(408)", "Delete ExpressionStatement(409)", "Delete Block(410)", "Delete SimpleName: members(411)", "Delete SimpleName: JCBlock(412)", "Delete SimpleType: JCBlock(413)", "Delete SimpleName: path(414)", "Delete SimpleName: getLeaf(415)", "Delete MethodInvocation(416)", "Delete CastExpression(417)", "Delete ParenthesizedExpression(418)", "Delete SimpleName: getStatements(419)", "Delete MethodInvocation(420)", "Delete Assignment: =(421)", "Delete ExpressionStatement(422)", "Delete Block(423)", "Delete IfStatement(424)", "Delete SimpleName: JCTree(425)", "Delete SimpleType: JCTree(426)", "Delete SimpleName: jcTree(427)", "Delete SingleVariableDeclaration(428)", "Delete SimpleName: members(429)", "Delete SimpleName: jcTree(430)", "Delete SimpleName: getKind(431)", "Delete MethodInvocation(432)", "Delete QualifiedName: Kind.VARIABLE(433)", "Delete InfixExpression: ==(434)", "Delete SimpleName: JCVariableDecl(435)", "Delete SimpleType: JCVariableDecl(436)", "Delete SimpleName: declaration(437)", "Delete SimpleName: JCVariableDecl(438)", "Delete SimpleType: JCVariableDecl(439)", "Delete SimpleName: jcTree(440)", "Delete CastExpression(441)", "Delete VariableDeclarationFragment(442)", "Delete VariableDeclarationStatement(443)", "Delete SimpleName: TypeSymbol(444)", "Delete SimpleType: TypeSymbol(445)", "Delete SimpleName: variableTypeSymbol(446)", "Delete SimpleName: state(447)", "Delete SimpleName: getTypes(448)", "Delete MethodInvocation(449)", "Delete SimpleName: erasure(450)", "Delete SimpleName: ASTHelpers(451)", "Delete SimpleName: getType(452)", "Delete SimpleName: declaration(453)", "Delete MethodInvocation(454)", "Delete MethodInvocation(455)", "Delete SimpleName: tsym(456)", "Delete FieldAccess(457)", "Delete VariableDeclarationFragment(458)", "Delete VariableDeclarationStatement(459)", "Delete SimpleName: ASTHelpers(460)", "Delete SimpleName: getSymbol(461)", "Delete SimpleName: toReplace(462)", "Delete MethodInvocation(463)", "Delete SimpleName: isMemberOf(464)", "Delete SimpleName: variableTypeSymbol(465)", "Delete SimpleName: state(466)", "Delete SimpleName: getTypes(467)", "Delete MethodInvocation(468)", "Delete MethodInvocation(469)", "Delete SimpleName: toReplace(470)", "Delete SimpleName: getKind(471)", "Delete MethodInvocation(472)", "Delete QualifiedName: Kind.IDENTIFIER(473)", "Delete InfixExpression: ==(474)", "Delete SimpleName: SuggestedFix(475)", "Delete SimpleName: prefixWith(476)", "Delete SimpleName: toReplace(477)", "Delete SimpleName: declaration(478)", "Delete SimpleName: getName(479)", "Delete MethodInvocation(480)", "Delete StringLiteral: \".\"(481)", "Delete InfixExpression: +(482)", "Delete MethodInvocation(483)", "Delete ReturnStatement(484)", "Delete Block(485)", "Delete SimpleName: SuggestedFix(486)", "Delete SimpleName: replace(487)", "Delete SimpleName: JCFieldAccess(488)", "Delete SimpleType: JCFieldAccess(489)", "Delete SimpleName: toReplace(490)", "Delete CastExpression(491)", "Delete ParenthesizedExpression(492)", "Delete SimpleName: getExpression(493)", "Delete MethodInvocation(494)", "Delete SimpleName: declaration(495)", "Delete SimpleName: getName(496)", "Delete MethodInvocation(497)", "Delete SimpleName: toString(498)", "Delete MethodInvocation(499)", "Delete MethodInvocation(500)", "Delete ReturnStatement(501)", "Delete Block(502)", "Delete IfStatement(503)", "Delete Block(504)", "Delete IfStatement(505)", "Delete Block(506)", "Delete IfStatement(507)", "Delete Block(508)", "Delete EnhancedForStatement(509)", "Delete NullLiteral(510)", "Delete ReturnStatement(511)", "Delete Block(512)", "Delete MethodDeclaration(513)", "Delete TypeDeclaration: class(514)"]}}, {"SelfEquality_cluster": {"actions": [{"root": "UPDATE from GuavaSelfEquals to SelfEquals", "operations": ["UPD SimpleName: GuavaSelfEquals from GuavaSelfEquals to SelfEquals"]}]}}, {"SelfEquality_diff": {"operations": ["Update SimpleName: GuavaSelfEquals(205) to SelfEquals"]}}, {"SelfEquals_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.google.errorprone.matchers.Description.NO_MATCH to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: com.google.errorprone.matchers.Matchers.anyOf to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: com.google.errorprone.matchers.Matchers.sameArgument to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: com.google.errorprone.matchers.method.MethodMatchers.staticMethod to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS ImportDeclaration to CompilationUnit at 14", "INS QualifiedName: com.google.errorprone.fixes.SuggestedFix to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: com.google.errorprone.util.ASTHelpers to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: com.sun.source.tree.Tree to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS QualifiedName: com.sun.source.tree.Tree.Kind to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 21"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS ImportDeclaration to CompilationUnit at 22", "INS QualifiedName: com.sun.source.util.TreePath to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 23", "operations": ["INS ImportDeclaration to CompilationUnit at 23", "INS QualifiedName: com.sun.tools.javac.code.Symbol.TypeSymbol to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: com.sun.tools.javac.tree.JCTree to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 25", "operations": ["INS QualifiedName: com.sun.tools.javac.tree.JCTree.JCBlock to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 25"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS ImportDeclaration to CompilationUnit at 26", "INS QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 27", "operations": ["INS QualifiedName: com.sun.tools.javac.tree.JCTree.JCFieldAccess to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 27"]}, {"root": "INS ImportDeclaration to CompilationUnit at 28", "operations": ["INS QualifiedName: com.sun.tools.javac.tree.JCTree.JCVariableDecl to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 28"]}, {"root": "INS ImportDeclaration to CompilationUnit at 30", "operations": ["INS ImportDeclaration to CompilationUnit at 30", "INS QualifiedName: javax.annotation.Nullable to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: staticMethod to MethodInvocation at 0", "INS Modifier: final to FieldDeclaration at 2", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SimpleName: allOf to MethodInvocation at 0", "INS SimpleType: Matcher to ParameterizedType: Matcher<MethodInvocationTree> at 0", "INS SimpleName: STATIC_MATCHER to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS StringLiteral: \"com.google.common.base.Objects\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"equals\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: named to MethodInvocation at 1", "INS SimpleName: sameArgument to MethodInvocation at 0", "INS SimpleName: named to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: staticMethod to MethodInvocation at 0", "INS SimpleName: onClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 1", "INS StringLiteral: \"java.util.Objects\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS ParameterizedType: Matcher<MethodInvocationTree> to FieldDeclaration at 3", "INS SimpleName: anyOf to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleType: MethodInvocationTree to ParameterizedType: Matcher<MethodInvocationTree> at 1", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"equal\" to MethodInvocation at 2", "INS SimpleName: onClass to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: matchMethodInvocation to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Description to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected"]}, {"root": "INS Modifier: static to MethodDeclaration at 2", "operations": ["INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS SimpleType: Fix to MethodDeclaration at 3", "operations": ["INS SimpleName: Fix to SimpleType: Fix at 0", "INS SimpleType: Fix to MethodDeclaration at 3"]}, {"root": "INS SimpleName: fieldFix to MethodDeclaration at 4", "operations": ["INS SimpleName: fieldFix to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: toReplace to SingleVariableDeclaration at 1", "INS SimpleName: Tree to SimpleType: Tree at 0", "INS SimpleType: Tree to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from  bhagwani@google.com (Sumit Bhagwani) to  bhagwani@google.com (Sumit Bhagwani) ", "operations": ["UPD TextElement:  bhagwani@google.com (Sumit Bhagwani) from  bhagwani@google.com (Sumit Bhagwani) to  bhagwani@google.com (Sumit Bhagwani) "]}, {"root": "UPDATE from \"An object is tested for equality to itself\" to \"Testing an object for equality with itself will always be true.\"", "operations": ["UPD StringLiteral: \"An object is tested for equality to itself\" from \"An object is tested for equality to itself\" to \"Testing an object for equality with itself will always be true.\""]}, {"root": "UPDATE from EQUALS_MATCHER to INSTANCE_MATCHER", "operations": ["UPD SimpleName: EQUALS_MATCHER from EQUALS_MATCHER to INSTANCE_MATCHER"]}, {"root": "UPDATE from methodInvocationTree to tree", "operations": ["UPD SimpleName: methodInvocationTree from methodInvocationTree to tree", "UPD SimpleName: methodInvocationTree from methodInvocationTree to tree"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: getArguments to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: args to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tree to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: toReplace to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 2", "INS SimpleName: toReplace to Assignment: = at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS SimpleName: INSTANCE_MATCHER to MethodInvocation at 0", "INS SimpleName: tree to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: NO_MATCH to ReturnStatement at 0", "INS SimpleName: state to MethodInvocation at 3", "INS SimpleName: matches to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: description to VariableDeclarationFragment at 0", "INS SimpleName: tree to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3", "INS QualifiedName: Description.Builder to SimpleType: Description.Builder at 0", "INS SimpleName: buildDescription to MethodInvocation at 0", "INS SimpleType: Description.Builder to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleName: fix to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS SimpleName: fix to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: fix to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: description to MethodInvocation at 0", "INS IfStatement to Block at 5", "INS SimpleName: addFix to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS SimpleName: build to MethodInvocation at 1", "INS ReturnStatement to Block at 6", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: description to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getPath to MethodInvocation at 1", "INS SimpleName: path to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: TreePath to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: state to MethodInvocation at 0"]}, {"root": "INS WhileStatement to Block at 1", "operations": ["INS SimpleName: getLeaf to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS InfixExpression: && to WhileStatement at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: getLeaf to MethodInvocation at 1", "INS QualifiedName: Kind.BLOCK to InfixExpression: != at 1", "INS SimpleName: path to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: path to InfixExpression: != at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: path to MethodInvocation at 0", "INS SimpleName: path to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getParentPath to MethodInvocation at 1", "INS QualifiedName: Kind.CLASS to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: path to Assignment: = at 0", "INS Block to WhileStatement at 1", "INS WhileStatement to Block at 1", "INS InfixExpression: != to InfixExpression: && at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: path to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleType: List to ParameterizedType: List<? extends JCTree> at 0", "INS SimpleName: JCTree to SimpleType: JCTree at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: List to SimpleType: List at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleType: JCTree to WildcardType: ? extends JCTree at 0", "INS ParameterizedType: List<? extends JCTree> to VariableDeclarationStatement at 0", "INS WildcardType: ? extends JCTree to ParameterizedType: List<? extends JCTree> at 1", "INS SimpleName: members to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS Block to IfStatement at 2", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: getLeaf to MethodInvocation at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 4", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: members to Assignment: = at 0", "INS SimpleName: path to MethodInvocation at 0", "INS SimpleName: getLeaf to MethodInvocation at 1", "INS QualifiedName: Kind.CLASS to InfixExpression: == at 1", "INS SimpleType: JCBlock to CastExpression at 0", "INS SimpleName: JCBlock to SimpleType: JCBlock at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: path to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to CastExpression at 1"]}, {"root": "INS EnhancedForStatement to Block at 5", "operations": ["INS SimpleName: getKind to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS EnhancedForStatement to Block at 5", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: SuggestedFix to MethodInvocation at 0", "INS SimpleName: JCFieldAccess to SimpleType: JCFieldAccess at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: jcTree to MethodInvocation at 0", "INS SimpleName: JCTree to SimpleType: JCTree at 0", "INS QualifiedName: Kind.IDENTIFIER to InfixExpression: == at 1", "INS QualifiedName: Kind.VARIABLE to InfixExpression: == at 1", "INS SimpleType: JCFieldAccess to CastExpression at 0", "INS IfStatement to Block at 2", "INS SimpleName: jcTree to SingleVariableDeclaration at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: toReplace to MethodInvocation at 2", "INS SimpleName: declaration to MethodInvocation at 0", "INS SimpleName: state to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: ASTHelpers to MethodInvocation at 0", "INS SimpleName: replace to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: toReplace to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: members to EnhancedForStatement at 1", "INS SimpleName: variableTypeSymbol to MethodInvocation at 2", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: getExpression to MethodInvocation at 1", "INS SimpleName: toReplace to CastExpression at 1", "INS SimpleType: JCTree to SingleVariableDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: getSymbol to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getTypes to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: isMemberOf to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 2", "INS IfStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 6"]}, {"root": "UPDATE from Description to Matcher", "operations": ["UPD SimpleName: Description from Description to Matcher"]}, {"root": "MOVE from SimpleType: Matcher", "operations": ["MOV SimpleName: Description to SimpleType: Matcher at 0"]}, {"root": "MOVE from SimpleType: MethodInvocationTree", "operations": ["MOV SimpleName: MethodInvocationTree to SimpleType: MethodInvocationTree at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<? extends ExpressionTree> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ExpressionTree to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Fix to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from EQUALS_MATCHER to STATIC_MATCHER", "operations": ["UPD SimpleName: EQUALS_MATCHER from EQUALS_MATCHER to STATIC_MATCHER"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: EQUALS_MATCHER to MethodInvocation at 0", "MOV SimpleName: state to MethodInvocation at 3", "MOV SimpleName: methodInvocationTree to MethodInvocation at 2", "MOV SimpleName: matches to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: args to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: Kind.IDENTIFIER to InfixExpression: != at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: toReplace to Assignment: = at 0", "INS SimpleName: args to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: get to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleName: get to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: args to MethodInvocation at 0", "INS QualifiedName: Kind.IDENTIFIER to InfixExpression: == at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: args to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: toReplace to Assignment: = at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from describe to fieldFix", "operations": ["UPD SimpleName: describe from describe to fieldFix"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methodInvocationTree to MethodInvocation at 1", "MOV SimpleName: describe to MethodInvocation at 0", "MOV SimpleName: state to MethodInvocation at 2"]}, {"root": "UPDATE from methodInvocationTree to toReplace", "operations": ["UPD SimpleName: methodInvocationTree from methodInvocationTree to toReplace"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: getMembers to MethodInvocation at 1", "INS SimpleName: members to Assignment: = at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: JCClassDecl to SimpleType: JCClassDecl at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: JCClassDecl to CastExpression at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from getArguments to getStatements", "operations": ["UPD SimpleName: getArguments from getArguments to getStatements"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getArguments to MethodInvocation at 1"]}, {"root": "INS SimpleType: JCVariableDecl to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: JCVariableDecl to SimpleType: JCVariableDecl at 0", "INS SimpleType: JCVariableDecl to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: TypeSymbol to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: TypeSymbol to SimpleType: TypeSymbol at 0", "INS SimpleType: TypeSymbol to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: declaration to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: declaration to VariableDeclarationFragment at 0"]}, {"root": "INS CastExpression to VariableDeclarationFragment at 1", "operations": ["INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: JCVariableDecl to SimpleType: JCVariableDecl at 0", "INS SimpleName: jcTree to CastExpression at 1", "INS SimpleType: JCVariableDecl to CastExpression at 0"]}, {"root": "UPDATE from fix to variableTypeSymbol", "operations": ["UPD SimpleName: fix from fix to variableTypeSymbol"]}, {"root": "INS FieldAccess to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ASTHelpers to MethodInvocation at 0", "INS SimpleName: tsym to FieldAccess at 1", "INS MethodInvocation to MethodInvocation at 0", "INS FieldAccess to VariableDeclarationFragment at 1", "INS MethodInvocation to FieldAccess at 0"]}, {"root": "UPDATE from verifyArgsType to path", "operations": ["UPD SimpleName: verifyArgsType from verifyArgsType to path"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: verifyArgsType to MethodInvocation at 0", "MOV SimpleName: methodInvocationTree to MethodInvocation at 1"]}, {"root": "UPDATE from methodInvocationTree to getLeaf", "operations": ["UPD SimpleName: methodInvocationTree from methodInvocationTree to getLeaf"]}, {"root": "UPDATE from methodInvocationTree to erasure", "operations": ["UPD SimpleName: methodInvocationTree from methodInvocationTree to erasure"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toReplace to MethodInvocation at 2", "MOV SimpleName: methodInvocationTree to MethodInvocation at 1", "MOV SimpleName: state to MethodInvocation at 1", "MOV SimpleName: generateFix to MethodInvocation at 1", "MOV SimpleName: GuavaSelfEquals to MethodInvocation at 0"]}, {"root": "UPDATE from GuavaSelfEquals to state", "operations": ["UPD SimpleName: GuavaSelfEquals from GuavaSelfEquals to state"]}, {"root": "UPDATE from generateFix to getTypes", "operations": ["UPD SimpleName: generateFix from generateFix to getTypes"]}, {"root": "UPDATE from state to getType", "operations": ["UPD SimpleName: state from state to getType"]}, {"root": "UPDATE from toReplace to declaration", "operations": ["UPD SimpleName: toReplace from toReplace to declaration", "UPD SimpleName: methodInvocationTree from methodInvocationTree to declaration"]}, {"root": "INS SimpleName: SuggestedFix to MethodInvocation at 0", "operations": ["INS SimpleName: SuggestedFix to MethodInvocation at 0"]}, {"root": "UPDATE from describeMatch to prefixWith", "operations": ["UPD SimpleName: describeMatch from describeMatch to prefixWith"]}, {"root": "INS SimpleName: toReplace to MethodInvocation at 2", "operations": ["INS SimpleName: toReplace to MethodInvocation at 2"]}, {"root": "INS InfixExpression: + to MethodInvocation at 3", "operations": ["INS InfixExpression: + to MethodInvocation at 3", "INS StringLiteral: \".\" to InfixExpression: + at 1", "INS MethodInvocation to InfixExpression: + at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methodInvocationTree to MethodInvocation at 0", "MOV SimpleName: fix to MethodInvocation at 1"]}, {"root": "UPDATE from fix to getName", "operations": ["UPD SimpleName: fix from fix to getName"]}, {"root": "DEL TagElement", "operations": ["DEL TextElement: Points out if an object is tested for equality to itself.", "DEL TagElement"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Example: foo.equals(foo)", "DEL Javadoc", "DEL TextElement: Matches calls to any instance method called \"equals\" with exactly one argument in which the", "DEL TagElement", "DEL TextElement: receiver is the same reference as the argument."]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL QualifiedName: Description.NO_MATCH"]}, {"root": "DEL IfStatement", "operations": ["DEL PrefixExpression: !", "DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleType: MethodInvocationTree", "DEL SimpleName: methodInvocationTree", "DEL Modifier: public", "DEL SimpleName: matchMethodInvocation", "DEL SimpleType: Description", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: describe", "operations": ["DEL SimpleName: describe"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: GuavaSelfEquals", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: toReplace", "operations": ["DEL SimpleName: toReplace"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: methodInvocationTree", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}]}}, {"SelfEquals_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(459) at 3", "Insert ImportDeclaration(11) into CompilationUnit(459) at 5", "Insert ImportDeclaration(17) into CompilationUnit(459) at 8", "Insert ImportDeclaration(19) into CompilationUnit(459) at 9", "Insert ImportDeclaration(29) into CompilationUnit(459) at 14", "Insert ImportDeclaration(35) into CompilationUnit(459) at 17", "Insert ImportDeclaration(41) into CompilationUnit(459) at 20", "Insert ImportDeclaration(43) into CompilationUnit(459) at 21", "Insert ImportDeclaration(45) into CompilationUnit(459) at 22", "Insert ImportDeclaration(47) into CompilationUnit(459) at 23", "Insert ImportDeclaration(49) into CompilationUnit(459) at 24", "Insert ImportDeclaration(51) into CompilationUnit(459) at 25", "Insert ImportDeclaration(53) into CompilationUnit(459) at 26", "Insert ImportDeclaration(55) into CompilationUnit(459) at 27", "Insert ImportDeclaration(57) into CompilationUnit(459) at 28", "Insert ImportDeclaration(61) into CompilationUnit(459) at 30", "Insert QualifiedName: com.google.errorprone.matchers.Description.NO_MATCH(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: com.google.errorprone.fixes.SuggestedFix(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: com.google.errorprone.util.ASTHelpers(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: com.sun.source.tree.Tree(40) into ImportDeclaration(41) at 0", "Insert QualifiedName: com.sun.source.tree.Tree.Kind(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: com.sun.source.util.TreePath(44) into ImportDeclaration(45) at 0", "Insert QualifiedName: com.sun.tools.javac.code.Symbol.TypeSymbol(46) into ImportDeclaration(47) at 0", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree(48) into ImportDeclaration(49) at 0", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree.JCBlock(50) into ImportDeclaration(51) at 0", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree.JCClassDecl(52) into ImportDeclaration(53) at 0", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree.JCFieldAccess(54) into ImportDeclaration(55) at 0", "Insert QualifiedName: com.sun.tools.javac.tree.JCTree.JCVariableDecl(56) into ImportDeclaration(57) at 0", "Insert QualifiedName: javax.annotation.Nullable(60) into ImportDeclaration(61) at 0", "Insert FieldDeclaration(146) into TypeDeclaration: class(458) at 7", "Insert MethodDeclaration(268) into TypeDeclaration: class(458) at 8", "Insert Modifier: private(112) into FieldDeclaration(146) at 0", "Insert Modifier: static(113) into FieldDeclaration(146) at 1", "Insert Modifier: final(114) into FieldDeclaration(146) at 2", "Insert VariableDeclarationFragment(145) into FieldDeclaration(146) at 4", "Move MarkerAnnotation(88) into MethodDeclaration(268) at 0", "Insert Modifier: public(149) into MethodDeclaration(268) at 1", "Move SimpleType: Description(120) into MethodDeclaration(268) at 2", "Insert SimpleName: matchMethodInvocation(152) into MethodDeclaration(268) at 3", "Move SingleVariableDeclaration(125) into MethodDeclaration(268) at 4", "Move SingleVariableDeclaration(129) into MethodDeclaration(268) at 5", "Move Block(116) into MethodDeclaration(268) at 6", "Insert MarkerAnnotation(270) into MethodDeclaration(457) at 0", "Update Modifier: private(118) to protected", "Insert Modifier: static(272) into MethodDeclaration(457) at 2", "Insert SimpleType: Fix(274) into MethodDeclaration(457) at 3", "Insert SimpleName: fieldFix(275) into MethodDeclaration(457) at 4", "Insert SingleVariableDeclaration(279) into MethodDeclaration(457) at 5", "Move SingleVariableDeclaration(100) into MethodDeclaration(457) at 6", "Update TextElement:  bhagwani@google.com (Sumit Bhagwani)(32) to  bhagwani@google.com (Sumit Bhagwani) ", "Update StringLiteral: \"An object is tested for equality to itself\"(40) to \"Testing an object for equality with itself will always be true.\"", "Update SimpleName: EQUALS_MATCHER(68) to INSTANCE_MATCHER", "Insert SimpleName: STATIC_MATCHER(120) into VariableDeclarationFragment(145) at 0", "Insert MethodInvocation(144) into VariableDeclarationFragment(145) at 1", "Update SimpleName: methodInvocationTree(124) to tree", "Insert VariableDeclarationStatement(172) into Block(267) at 0", "Insert VariableDeclarationStatement(177) into Block(267) at 1", "Insert IfStatement(235) into Block(267) at 2", "Insert VariableDeclarationStatement(243) into Block(267) at 3", "Insert VariableDeclarationStatement(252) into Block(267) at 4", "Insert IfStatement(262) into Block(267) at 5", "Insert ReturnStatement(266) into Block(267) at 6", "Insert SimpleName: Nullable(269) into MarkerAnnotation(270) at 0", "Insert SimpleName: Fix(273) into SimpleType: Fix(274) at 0", "Insert SimpleType: Tree(277) into SingleVariableDeclaration(279) at 0", "Insert SimpleName: toReplace(278) into SingleVariableDeclaration(279) at 1", "Insert VariableDeclarationStatement(291) into Block(456) at 0", "Insert WhileStatement(318) into Block(456) at 1", "Insert IfStatement(325) into Block(456) at 2", "Insert VariableDeclarationStatement(334) into Block(456) at 3", "Insert IfStatement(368) into Block(456) at 4", "Insert EnhancedForStatement(453) into Block(456) at 5", "Insert ReturnStatement(455) into Block(456) at 6", "Move SimpleName: MethodInvocationTree(93) into SimpleType: MethodInvocationTree(118) at 0", "Insert SimpleName: allOf(121) into MethodInvocation(144) at 0", "Insert MethodInvocation(139) into MethodInvocation(144) at 1", "Insert MethodInvocation(143) into MethodInvocation(144) at 2", "Move ParameterizedType: List<? extends ExpressionTree>(140) into VariableDeclarationStatement(172) at 0", "Insert VariableDeclarationFragment(171) into VariableDeclarationStatement(172) at 1", "Move SimpleType: ExpressionTree(148) into VariableDeclarationStatement(177) at 0", "Insert VariableDeclarationFragment(176) into VariableDeclarationStatement(177) at 1", "Insert MethodInvocation(182) into IfStatement(235) at 0", "Insert Block(190) into IfStatement(235) at 1", "Insert IfStatement(234) into IfStatement(235) at 2", "Insert SimpleType: Description.Builder(237) into VariableDeclarationStatement(243) at 0", "Insert VariableDeclarationFragment(242) into VariableDeclarationStatement(243) at 1", "Move SimpleType: Fix(157) into VariableDeclarationStatement(252) at 0", "Insert VariableDeclarationFragment(251) into VariableDeclarationStatement(252) at 1", "Insert InfixExpression: !=(255) into IfStatement(262) at 0", "Insert Block(261) into IfStatement(262) at 1", "Insert MethodInvocation(265) into ReturnStatement(266) at 0", "Insert SimpleName: Tree(276) into SimpleType: Tree(277) at 0", "Insert SimpleType: TreePath(285) into VariableDeclarationStatement(291) at 0", "Insert VariableDeclarationFragment(290) into VariableDeclarationStatement(291) at 1", "Insert InfixExpression: &&(310) into WhileStatement(318) at 0", "Insert Block(317) into WhileStatement(318) at 1", "Insert InfixExpression: ==(321) into IfStatement(325) at 0", "Insert Block(324) into IfStatement(325) at 1", "Insert ParameterizedType: List<? extends JCTree>(331) into VariableDeclarationStatement(334) at 0", "Insert VariableDeclarationFragment(333) into VariableDeclarationStatement(334) at 1", "Insert InfixExpression: ==(341) into IfStatement(368) at 0", "Insert Block(354) into IfStatement(368) at 1", "Insert Block(367) into IfStatement(368) at 2", "Insert SingleVariableDeclaration(372) into EnhancedForStatement(453) at 0", "Insert SimpleName: members(373) into EnhancedForStatement(453) at 1", "Insert Block(452) into EnhancedForStatement(453) at 2", "Insert NullLiteral(454) into ReturnStatement(455) at 0", "Insert SimpleName: anyOf(122) into MethodInvocation(139) at 0", "Insert MethodInvocation(130) into MethodInvocation(139) at 1", "Insert MethodInvocation(138) into MethodInvocation(139) at 2", "Insert SimpleName: sameArgument(140) into MethodInvocation(143) at 0", "Insert NumberLiteral: 0(141) into MethodInvocation(143) at 1", "Insert NumberLiteral: 1(142) into MethodInvocation(143) at 2", "Insert SimpleName: args(167) into VariableDeclarationFragment(171) at 0", "Insert MethodInvocation(170) into VariableDeclarationFragment(171) at 1", "Insert SimpleName: toReplace(175) into VariableDeclarationFragment(176) at 0", "Insert SimpleName: INSTANCE_MATCHER(178) into MethodInvocation(182) at 0", "Insert SimpleName: matches(179) into MethodInvocation(182) at 1", "Insert SimpleName: tree(180) into MethodInvocation(182) at 2", "Insert SimpleName: state(181) into MethodInvocation(182) at 3", "Insert ExpressionStatement(189) into Block(190) at 0", "Insert MethodInvocation(195) into IfStatement(234) at 0", "Move Block(109) into IfStatement(234) at 1", "Insert Block(233) into IfStatement(234) at 2", "Insert QualifiedName: Description.Builder(236) into SimpleType: Description.Builder(237) at 0", "Insert SimpleName: description(238) into VariableDeclarationFragment(242) at 0", "Insert MethodInvocation(241) into VariableDeclarationFragment(242) at 1", "Insert SimpleName: fix(246) into VariableDeclarationFragment(251) at 0", "Insert MethodInvocation(250) into VariableDeclarationFragment(251) at 1", "Insert SimpleName: fix(253) into InfixExpression: !=(255) at 0", "Insert NullLiteral(254) into InfixExpression: !=(255) at 1", "Insert ExpressionStatement(260) into Block(261) at 0", "Insert SimpleName: description(263) into MethodInvocation(265) at 0", "Insert SimpleName: build(264) into MethodInvocation(265) at 1", "Insert SimpleName: TreePath(284) into SimpleType: TreePath(285) at 0", "Insert SimpleName: path(286) into VariableDeclarationFragment(290) at 0", "Insert MethodInvocation(289) into VariableDeclarationFragment(290) at 1", "Insert InfixExpression: &&(302) into InfixExpression: &&(310) at 0", "Insert InfixExpression: !=(309) into InfixExpression: &&(310) at 1", "Insert ExpressionStatement(316) into Block(317) at 0", "Insert SimpleName: path(319) into InfixExpression: ==(321) at 0", "Insert NullLiteral(320) into InfixExpression: ==(321) at 1", "Insert ReturnStatement(323) into Block(324) at 0", "Insert SimpleType: List(327) into ParameterizedType: List<? extends JCTree>(331) at 0", "Insert WildcardType: ? extends JCTree(330) into ParameterizedType: List<? extends JCTree>(331) at 1", "Insert SimpleName: members(332) into VariableDeclarationFragment(333) at 0", "Insert MethodInvocation(339) into InfixExpression: ==(341) at 0", "Insert QualifiedName: Kind.CLASS(340) into InfixExpression: ==(341) at 1", "Move ExpressionStatement(134) into Block(354) at 0", "Insert ExpressionStatement(366) into Block(367) at 0", "Insert SimpleType: JCTree(370) into SingleVariableDeclaration(372) at 0", "Insert SimpleName: jcTree(371) into SingleVariableDeclaration(372) at 1", "Insert IfStatement(451) into Block(452) at 0", "Insert MethodInvocation(127) into MethodInvocation(130) at 0", "Insert SimpleName: named(128) into MethodInvocation(130) at 1", "Insert StringLiteral: \"equal\"(129) into MethodInvocation(130) at 2", "Insert MethodInvocation(135) into MethodInvocation(138) at 0", "Insert SimpleName: named(136) into MethodInvocation(138) at 1", "Insert StringLiteral: \"equals\"(137) into MethodInvocation(138) at 2", "Insert SimpleName: tree(168) into MethodInvocation(170) at 0", "Insert SimpleName: getArguments(169) into MethodInvocation(170) at 1", "Insert Assignment: =(188) into ExpressionStatement(189) at 0", "Update SimpleName: EQUALS_MATCHER(101) to STATIC_MATCHER", "Move SimpleName: EQUALS_MATCHER(101) into MethodInvocation(195) at 0", "Move SimpleName: matches(102) into MethodInvocation(195) at 1", "Update SimpleName: methodInvocationTree(103) to tree", "Move SimpleName: methodInvocationTree(103) into MethodInvocation(195) at 2", "Move SimpleName: state(104) into MethodInvocation(195) at 3", "Insert IfStatement(229) into Block(230) at 0", "Insert ReturnStatement(232) into Block(233) at 0", "Insert SimpleName: buildDescription(239) into MethodInvocation(241) at 0", "Insert SimpleName: tree(240) into MethodInvocation(241) at 1", "Update SimpleName: describe(111) to fieldFix", "Move SimpleName: describe(111) into MethodInvocation(250) at 0", "Update SimpleName: methodInvocationTree(112) to toReplace", "Move SimpleName: methodInvocationTree(112) into MethodInvocation(250) at 1", "Move SimpleName: state(113) into MethodInvocation(250) at 2", "Insert MethodInvocation(259) into ExpressionStatement(260) at 0", "Insert SimpleName: state(287) into MethodInvocation(289) at 0", "Insert SimpleName: getPath(288) into MethodInvocation(289) at 1", "Insert InfixExpression: !=(294) into InfixExpression: &&(302) at 0", "Insert InfixExpression: !=(301) into InfixExpression: &&(302) at 1", "Insert MethodInvocation(307) into InfixExpression: !=(309) at 0", "Insert QualifiedName: Kind.BLOCK(308) into InfixExpression: !=(309) at 1", "Insert Assignment: =(315) into ExpressionStatement(316) at 0", "Insert NullLiteral(322) into ReturnStatement(323) at 0", "Insert SimpleName: List(326) into SimpleType: List(327) at 0", "Insert SimpleType: JCTree(329) into WildcardType: ? extends JCTree(330) at 0", "Insert MethodInvocation(337) into MethodInvocation(339) at 0", "Insert SimpleName: getKind(338) into MethodInvocation(339) at 1", "Insert Assignment: =(352) into ExpressionStatement(353) at 0", "Insert Assignment: =(365) into ExpressionStatement(366) at 0", "Insert SimpleName: JCTree(369) into SimpleType: JCTree(370) at 0", "Insert InfixExpression: ==(378) into IfStatement(451) at 0", "Insert Block(450) into IfStatement(451) at 1", "Insert MethodInvocation(124) into MethodInvocation(127) at 0", "Insert SimpleName: onClass(125) into MethodInvocation(127) at 1", "Insert StringLiteral: \"com.google.common.base.Objects\"(126) into MethodInvocation(127) at 2", "Insert MethodInvocation(132) into MethodInvocation(135) at 0", "Insert SimpleName: onClass(133) into MethodInvocation(135) at 1", "Insert StringLiteral: \"java.util.Objects\"(134) into MethodInvocation(135) at 2", "Insert SimpleName: toReplace(183) into Assignment: =(188) at 0", "Move MethodInvocation(153) into Assignment: =(188) at 1", "Insert InfixExpression: &&(212) into IfStatement(229) at 0", "Insert Block(220) into IfStatement(229) at 1", "Insert Block(228) into IfStatement(229) at 2", "Insert SimpleName: NO_MATCH(231) into ReturnStatement(232) at 0", "Insert SimpleName: description(256) into MethodInvocation(259) at 0", "Insert SimpleName: addFix(257) into MethodInvocation(259) at 1", "Insert SimpleName: fix(258) into MethodInvocation(259) at 2", "Insert SimpleName: path(292) into InfixExpression: !=(294) at 0", "Insert NullLiteral(293) into InfixExpression: !=(294) at 1", "Insert MethodInvocation(299) into InfixExpression: !=(301) at 0", "Insert QualifiedName: Kind.CLASS(300) into InfixExpression: !=(301) at 1", "Insert MethodInvocation(305) into MethodInvocation(307) at 0", "Insert SimpleName: getKind(306) into MethodInvocation(307) at 1", "Insert SimpleName: path(311) into Assignment: =(315) at 0", "Insert MethodInvocation(314) into Assignment: =(315) at 1", "Insert SimpleName: JCTree(328) into SimpleType: JCTree(329) at 0", "Insert SimpleName: path(335) into MethodInvocation(337) at 0", "Insert SimpleName: getLeaf(336) into MethodInvocation(337) at 1", "Insert SimpleName: members(342) into Assignment: =(352) at 0", "Insert MethodInvocation(351) into Assignment: =(352) at 1", "Insert SimpleName: members(355) into Assignment: =(365) at 0", "Insert MethodInvocation(364) into Assignment: =(365) at 1", "Insert MethodInvocation(376) into InfixExpression: ==(378) at 0", "Insert QualifiedName: Kind.VARIABLE(377) into InfixExpression: ==(378) at 1", "Move VariableDeclarationStatement(155) into Block(450) at 0", "Move VariableDeclarationStatement(166) into Block(450) at 1", "Insert IfStatement(449) into Block(450) at 2", "Insert SimpleName: staticMethod(123) into MethodInvocation(124) at 0", "Insert SimpleName: staticMethod(131) into MethodInvocation(132) at 0", "Insert InfixExpression: ==(203) into InfixExpression: &&(212) at 0", "Insert InfixExpression: !=(211) into InfixExpression: &&(212) at 1", "Insert ExpressionStatement(219) into Block(220) at 0", "Insert ExpressionStatement(227) into Block(228) at 0", "Insert MethodInvocation(297) into MethodInvocation(299) at 0", "Insert SimpleName: getKind(298) into MethodInvocation(299) at 1", "Insert SimpleName: path(303) into MethodInvocation(305) at 0", "Insert SimpleName: getLeaf(304) into MethodInvocation(305) at 1", "Insert SimpleName: path(312) into MethodInvocation(314) at 0", "Insert SimpleName: getParentPath(313) into MethodInvocation(314) at 1", "Insert ParenthesizedExpression(349) into MethodInvocation(351) at 0", "Insert SimpleName: getMembers(350) into MethodInvocation(351) at 1", "Insert ParenthesizedExpression(362) into MethodInvocation(364) at 0", "Update SimpleName: getArguments(143) to getStatements", "Move SimpleName: getArguments(143) into MethodInvocation(364) at 1", "Insert SimpleName: jcTree(374) into MethodInvocation(376) at 0", "Insert SimpleName: getKind(375) into MethodInvocation(376) at 1", "Insert SimpleType: JCVariableDecl(380) into VariableDeclarationStatement(387) at 0", "Insert SimpleType: TypeSymbol(389) into VariableDeclarationStatement(403) at 0", "Insert MethodInvocation(413) into IfStatement(449) at 0", "Insert Block(448) into IfStatement(449) at 1", "Insert MethodInvocation(201) into InfixExpression: ==(203) at 0", "Insert QualifiedName: Kind.IDENTIFIER(202) into InfixExpression: ==(203) at 1", "Insert MethodInvocation(209) into InfixExpression: !=(211) at 0", "Insert QualifiedName: Kind.IDENTIFIER(210) into InfixExpression: !=(211) at 1", "Insert Assignment: =(218) into ExpressionStatement(219) at 0", "Insert Assignment: =(226) into ExpressionStatement(227) at 0", "Insert SimpleName: path(295) into MethodInvocation(297) at 0", "Insert SimpleName: getLeaf(296) into MethodInvocation(297) at 1", "Insert CastExpression(348) into ParenthesizedExpression(349) at 0", "Insert CastExpression(361) into ParenthesizedExpression(362) at 0", "Insert SimpleName: JCVariableDecl(379) into SimpleType: JCVariableDecl(380) at 0", "Insert SimpleName: declaration(381) into VariableDeclarationFragment(386) at 0", "Insert CastExpression(385) into VariableDeclarationFragment(386) at 1", "Insert SimpleName: TypeSymbol(388) into SimpleType: TypeSymbol(389) at 0", "Update SimpleName: fix(158) to variableTypeSymbol", "Insert FieldAccess(401) into VariableDeclarationFragment(402) at 1", "Insert MethodInvocation(407) into MethodInvocation(413) at 0", "Insert SimpleName: isMemberOf(408) into MethodInvocation(413) at 1", "Insert SimpleName: variableTypeSymbol(409) into MethodInvocation(413) at 2", "Insert MethodInvocation(412) into MethodInvocation(413) at 3", "Insert IfStatement(447) into Block(448) at 0", "Insert MethodInvocation(199) into MethodInvocation(201) at 0", "Insert SimpleName: getKind(200) into MethodInvocation(201) at 1", "Insert MethodInvocation(207) into MethodInvocation(209) at 0", "Insert SimpleName: getKind(208) into MethodInvocation(209) at 1", "Insert SimpleName: toReplace(213) into Assignment: =(218) at 0", "Insert MethodInvocation(217) into Assignment: =(218) at 1", "Insert SimpleName: toReplace(221) into Assignment: =(226) at 0", "Insert MethodInvocation(225) into Assignment: =(226) at 1", "Insert SimpleType: JCClassDecl(344) into CastExpression(348) at 0", "Insert MethodInvocation(347) into CastExpression(348) at 1", "Insert SimpleType: JCBlock(357) into CastExpression(361) at 0", "Insert MethodInvocation(360) into CastExpression(361) at 1", "Insert SimpleType: JCVariableDecl(383) into CastExpression(385) at 0", "Insert SimpleName: jcTree(384) into CastExpression(385) at 1", "Insert MethodInvocation(399) into FieldAccess(401) at 0", "Insert SimpleName: tsym(400) into FieldAccess(401) at 1", "Insert SimpleName: ASTHelpers(404) into MethodInvocation(407) at 0", "Insert SimpleName: getSymbol(405) into MethodInvocation(407) at 1", "Insert SimpleName: toReplace(406) into MethodInvocation(407) at 2", "Insert SimpleName: state(410) into MethodInvocation(412) at 0", "Insert SimpleName: getTypes(411) into MethodInvocation(412) at 1", "Insert InfixExpression: ==(418) into IfStatement(447) at 0", "Insert Block(429) into IfStatement(447) at 1", "Insert Block(446) into IfStatement(447) at 2", "Insert SimpleName: args(196) into MethodInvocation(199) at 0", "Insert SimpleName: get(197) into MethodInvocation(199) at 1", "Insert NumberLiteral: 0(198) into MethodInvocation(199) at 2", "Insert SimpleName: args(204) into MethodInvocation(207) at 0", "Insert SimpleName: get(205) into MethodInvocation(207) at 1", "Insert NumberLiteral: 1(206) into MethodInvocation(207) at 2", "Insert SimpleName: args(214) into MethodInvocation(217) at 0", "Insert SimpleName: get(215) into MethodInvocation(217) at 1", "Insert NumberLiteral: 0(216) into MethodInvocation(217) at 2", "Insert SimpleName: args(222) into MethodInvocation(225) at 0", "Insert SimpleName: get(223) into MethodInvocation(225) at 1", "Insert NumberLiteral: 1(224) into MethodInvocation(225) at 2", "Insert SimpleName: JCClassDecl(343) into SimpleType: JCClassDecl(344) at 0", "Update SimpleName: verifyArgsType(131) to path", "Move SimpleName: verifyArgsType(131) into MethodInvocation(347) at 0", "Update SimpleName: methodInvocationTree(132) to getLeaf", "Move SimpleName: methodInvocationTree(132) into MethodInvocation(347) at 1", "Insert SimpleName: JCBlock(356) into SimpleType: JCBlock(357) at 0", "Insert SimpleName: path(358) into MethodInvocation(360) at 0", "Insert SimpleName: getLeaf(359) into MethodInvocation(360) at 1", "Insert SimpleName: JCVariableDecl(382) into SimpleType: JCVariableDecl(383) at 0", "Insert MethodInvocation(393) into MethodInvocation(399) at 0", "Update SimpleName: methodInvocationTree(161) to erasure", "Move SimpleName: methodInvocationTree(161) into MethodInvocation(399) at 1", "Insert MethodInvocation(398) into MethodInvocation(399) at 2", "Insert MethodInvocation(416) into InfixExpression: ==(418) at 0", "Insert QualifiedName: Kind.IDENTIFIER(417) into InfixExpression: ==(418) at 1", "Move ReturnStatement(171) into Block(429) at 0", "Insert ReturnStatement(445) into Block(446) at 0", "Update SimpleName: GuavaSelfEquals(159) to state", "Move SimpleName: GuavaSelfEquals(159) into MethodInvocation(393) at 0", "Update SimpleName: generateFix(160) to getTypes", "Move SimpleName: generateFix(160) into MethodInvocation(393) at 1", "Insert SimpleName: ASTHelpers(395) into MethodInvocation(398) at 0", "Update SimpleName: state(162) to getType", "Move SimpleName: state(162) into MethodInvocation(398) at 1", "Update SimpleName: toReplace(163) to declaration", "Move SimpleName: toReplace(163) into MethodInvocation(398) at 2", "Insert SimpleName: toReplace(414) into MethodInvocation(416) at 0", "Insert SimpleName: getKind(415) into MethodInvocation(416) at 1", "Insert MethodInvocation(444) into ReturnStatement(445) at 0", "Insert SimpleName: SuggestedFix(419) into MethodInvocation(427) at 0", "Insert SimpleName: toReplace(421) into MethodInvocation(427) at 2", "Insert InfixExpression: +(426) into MethodInvocation(427) at 3", "Insert SimpleName: SuggestedFix(430) into MethodInvocation(444) at 0", "Insert SimpleName: replace(431) into MethodInvocation(444) at 1", "Insert MethodInvocation(438) into MethodInvocation(444) at 2", "Insert MethodInvocation(443) into MethodInvocation(444) at 3", "Insert MethodInvocation(424) into InfixExpression: +(426) at 0", "Insert StringLiteral: \".\"(425) into InfixExpression: +(426) at 1", "Insert ParenthesizedExpression(436) into MethodInvocation(438) at 0", "Insert SimpleName: getExpression(437) into MethodInvocation(438) at 1", "Insert MethodInvocation(441) into MethodInvocation(443) at 0", "Insert SimpleName: toString(442) into MethodInvocation(443) at 1", "Update SimpleName: methodInvocationTree(168) to declaration", "Move SimpleName: methodInvocationTree(168) into MethodInvocation(424) at 0", "Update SimpleName: fix(169) to getName", "Move SimpleName: fix(169) into MethodInvocation(424) at 1", "Insert CastExpression(435) into ParenthesizedExpression(436) at 0", "Insert SimpleName: declaration(439) into MethodInvocation(441) at 0", "Insert SimpleName: getName(440) into MethodInvocation(441) at 1", "Insert SimpleType: JCFieldAccess(433) into CastExpression(435) at 0", "Insert SimpleName: toReplace(434) into CastExpression(435) at 1", "Insert SimpleName: JCFieldAccess(432) into SimpleType: JCFieldAccess(433) at 0", "Delete TextElement: Points out if an object is tested for equality to itself.(30)", "Delete TagElement(31)", "Delete TextElement: receiver is the same reference as the argument.(56)", "Delete TextElement: Example: foo.equals(foo)(57)", "Delete TagElement(58)", "Delete Javadoc(59)", "Delete QualifiedName: Description.NO_MATCH(107)", "Delete ReturnStatement(108)", "Delete MethodInvocation(105)", "Delete PrefixExpression: !(106)", "Delete IfStatement(110)", "Delete MethodInvocation(114)", "Delete ReturnStatement(115)", "Delete Modifier: public(89)", "Delete SimpleType: Description(91)", "Delete SimpleName: matchMethodInvocation(92)", "Delete SimpleType: MethodInvocationTree(94)", "Delete SimpleName: methodInvocationTree(95)", "Delete SingleVariableDeclaration(96)", "Delete MethodDeclaration(117)", "Delete SimpleName: describe(121)", "Delete SimpleName: GuavaSelfEquals(130)", "Delete MethodInvocation(133)", "Delete SimpleName: toReplace(149)", "Delete MethodInvocation(164)", "Delete SimpleName: args(141)", "Delete SimpleName: methodInvocationTree(142)", "Delete MethodInvocation(144)", "Delete VariableDeclarationFragment(145)", "Delete VariableDeclarationStatement(146)"]}}, {"TruthSelfEquals_cluster": {"actions": [{"root": "UPDATE from GuavaSelfEquals to SelfEquals", "operations": ["UPD SimpleName: GuavaSelfEquals from GuavaSelfEquals to SelfEquals"]}]}}, {"TruthSelfEquals_diff": {"operations": ["Update SimpleName: GuavaSelfEquals(287) to SelfEquals"]}}, {"BuiltInCheckerSuppliers_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.bugpatterns.GuavaSelfEquals"]}, {"root": "DEL TypeLiteral", "operations": ["DEL SimpleType: GuavaSelfEquals", "DEL TypeLiteral", "DEL SimpleName: GuavaSelfEquals"]}]}}, {"BuiltInCheckerSuppliers_diff": {"operations": ["Delete QualifiedName: com.google.errorprone.bugpatterns.GuavaSelfEquals(112)", "Delete ImportDeclaration(113)", "Delete SimpleName: GuavaSelfEquals(680)", "Delete SimpleType: GuavaSelfEquals(681)", "Delete TypeLiteral(682)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}