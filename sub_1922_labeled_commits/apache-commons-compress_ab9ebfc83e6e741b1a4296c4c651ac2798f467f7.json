{"application": "apache-commons-compress", "csha": "ab9ebfc83e6e741b1a4296c4c651ac2798f467f7", "files": [{"AsiExtraField_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 28", "MOV MethodDeclaration to TypeDeclaration: class at 15"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS PrimitiveType: int to FieldDeclaration at 3", "INS NumberLiteral: 4 to VariableDeclarationFragment at 1", "INS SimpleName: WORD to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getCentralDirectoryData to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 28", "INS SimpleName: uid to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS FieldAccess to Assignment: = at 0", "INS Block to MethodDeclaration at 5", "INS TextElement:  the group id to TagElement: @param at 1", "INS ThisExpression to FieldAccess at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: gid to FieldAccess at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: setGroupId to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: gid to TagElement: @param at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: gid to Assignment: = at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 32", "INS ReturnStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: getGroupId to MethodDeclaration at 3", "INS SimpleName: gid to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: int to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS SimpleName: setLinkedFile to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 34", "operations": ["INS SimpleName: link to ReturnStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 34", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: getLinkedFile to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS SimpleName: setMode to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: mode to SingleVariableDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 36"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS TextElement:  if true, this entry is a directory to TagElement: @param at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getMode to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS TagElement: @param to Javadoc at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: mode to Assignment: = at 0", "INS SimpleName: dirFlag to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: dirFlag to FieldAccess at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: setDirectory to MethodDeclaration at 3", "INS SimpleName: dirFlag to TagElement: @param at 0", "INS SimpleName: dirFlag to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: mode to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from setGroupId to AsiExtraField", "operations": ["UPD SimpleName: setGroupId from setGroupId to AsiExtraField"]}, {"root": "UPDATE from getHeaderID to getHeaderId", "operations": ["UPD SimpleName: getHeaderID from getHeaderID to getHeaderId"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: getLocalFileDataLength to MethodDeclaration at 3", "MOV SimpleType: ZipShort to MethodDeclaration at 2"]}, {"root": "UPDATE from setUserId to getLocalFileDataLength", "operations": ["UPD SimpleName: setUserId from setUserId to getLocalFileDataLength"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ArrayType: byte[] to MethodDeclaration at 2", "MOV Block to MethodDeclaration at 4"]}, {"root": "UPDATE from getLocalFileDataLength to setUserId", "operations": ["UPD SimpleName: getLocalFileDataLength from getLocalFileDataLength to setUserId"]}, {"root": "UPDATE from getMode to getUserId", "operations": ["UPD SimpleName: getMode from getMode to getUserId", "UPD SimpleName: getUserID from getUserID to getUserId"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from getUserID to getMode", "operations": ["UPD SimpleName: getUserID from getUserID to getMode"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 6"]}, {"root": "UPDATE from Adds Unix file permission and UID/GID fields as well as symbolic link to Adds Unix file permission and UID/GID fields as well as symbolic", "operations": ["UPD TextElement: Adds Unix file permission and UID/GID fields as well as symbolic link from Adds Unix file permission and UID/GID fields as well as symbolic link to Adds Unix file permission and UID/GID fields as well as symbolic"]}, {"root": "UPDATE from handling. <p> to link handling.", "operations": ["UPD TextElement: handling. <p> from handling. <p> to link handling."]}, {"root": "UPDATE from This class uses the ASi extra field in the format: <pre> to <p>This class uses the ASi extra field in the format:", "operations": ["UPD TextElement: This class uses the ASi extra field in the format: <pre> from This class uses the ASi extra field in the format: <pre> to <p>This class uses the ASi extra field in the format:"]}, {"root": "INS TextElement: <pre> to TagElement at 3", "operations": ["INS TextElement: <pre> to TagElement at 3"]}, {"root": "UPDATE from </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a to </pre>", "operations": ["UPD TextElement: </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a from </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a to </pre>"]}, {"root": "UPDATE from href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\"> to taken from appnote.iz (Info-ZIP note, 981119) found at <a", "operations": ["UPD TextElement: href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\"> from href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\"> to taken from appnote.iz (Info-ZIP note, 981119) found at <a"]}, {"root": "UPDATE from ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p> to href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\">ftp://ftp.uu.net/pub/archiving/zip/doc/</a></p>", "operations": ["UPD TextElement: ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p> from ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p> to href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\">ftp://ftp.uu.net/pub/archiving/zip/doc/</a></p>"]}, {"root": "UPDATE from Short is two bytes and Long is four bytes in big endian byte and word order, to <p>Short is two bytes and Long is four bytes in big endian byte and", "operations": ["UPD TextElement: Short is two bytes and Long is four bytes in big endian byte and word order, from Short is two bytes and Long is four bytes in big endian byte and word order, to <p>Short is two bytes and Long is four bytes in big endian byte and"]}, {"root": "UPDATE from device numbers are currently not supported.</p> to word order, device numbers are currently not supported.</p>", "operations": ["UPD TextElement: device numbers are currently not supported.</p> from device numbers are currently not supported.</p> to word order, device numbers are currently not supported.</p>"]}, {"root": "UPDATE from m_mode to mode", "operations": ["UPD SimpleName: m_mode from m_mode to mode", "UPD SimpleName: m_mode from m_mode to mode", "UPD SimpleName: m_uid from m_uid to mode"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_mode to uid", "operations": ["UPD SimpleName: m_mode from m_mode to uid", "UPD SimpleName: m_uid from m_uid to uid", "UPD SimpleName: m_uid from m_uid to uid"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_gid to gid", "operations": ["UPD SimpleName: m_gid from m_gid to gid", "UPD SimpleName: m_gid from m_gid to gid"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_link to link", "operations": ["UPD SimpleName: m_link from m_link to link", "UPD SimpleName: m_link from m_link to link", "UPD SimpleName: m_link from m_link to link"]}, {"root": "UPDATE from m_dirFlag to dirFlag", "operations": ["UPD SimpleName: m_dirFlag from m_dirFlag to dirFlag", "UPD SimpleName: m_dirFlag from m_dirFlag to dirFlag"]}, {"root": "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_crc to crc", "operations": ["UPD SimpleName: m_crc from m_crc to crc", "UPD SimpleName: m_crc from m_crc to crc", "UPD SimpleName: m_crc from m_crc to crc", "UPD SimpleName: m_crc from m_crc to crc", "UPD SimpleName: m_crc from m_crc to crc", "UPD SimpleName: m_crc from m_crc to crc", "UPD SimpleName: m_crc from m_crc to crc"]}, {"root": "UPDATE from @param to ", "operations": ["UPD TagElement: @param from @param to "]}, {"root": "UPDATE from  to @return", "operations": ["UPD TagElement from  to @return", "UPD TagElement: @deprecated from @deprecated to @return", "UPD TagElement: @param from @param to @return"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: WORD to InfixExpression: + at 0", "INS ReturnStatement to Block at 0", "INS NumberLiteral: 2 to InfixExpression: + at 3", "INS NumberLiteral: 2 to InfixExpression: + at 4", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: WORD to InfixExpression: + at 2", "INS NumberLiteral: 2 to InfixExpression: + at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2", "MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 1", "MOV TagElement: @since to Javadoc at 3", "MOV TagElement: @return to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2", "MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "UPDATE from @see to @param", "operations": ["UPD TagElement: @see from @see to @param", "UPD TagElement: @since from @since to @param", "UPD TagElement: @return from @return to @param"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: uid to Assignment: = at 1", "INS SimpleName: uid to FieldAccess at 1", "INS ExpressionStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @return to Javadoc at 1", "MOV TagElement: @since to Javadoc at 1", "MOV TagElement: @deprecated to Javadoc at 1", "MOV TagElement: @see to Javadoc at 1", "MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: name to Assignment: = at 1", "INS SimpleName: link to Assignment: = at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2", "MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: mode to MethodInvocation at 1", "INS SimpleName: getMode to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: mode to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ArrayType: byte[] to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from buffer to data", "operations": ["UPD SimpleName: buffer from buffer to data", "UPD SimpleName: buffer from buffer to data", "UPD SimpleName: buffer from buffer to data"]}, {"root": "UPDATE from File this entry points to, if it is a symbolic link. <p> to File this entry points to, if it is a symbolic link.", "operations": ["UPD TextElement: File this entry points to, if it is a symbolic link. <p> from File this entry points to, if it is a symbolic link. <p> to File this entry points to, if it is a symbolic link."]}, {"root": "UPDATE from empty string - if entry is not a symbolic link.</p> to <p>empty string - if entry is not a symbolic link.</p>", "operations": ["UPD TextElement: empty string - if entry is not a symbolic link.</p> from empty string - if entry is not a symbolic link.</p> to <p>empty string - if entry is not a symbolic link.</p>"]}, {"root": "UPDATE from  The new GroupId value to Constructor for AsiExtraField. ", "operations": ["UPD TextElement:  The new GroupId value from  The new GroupId value to Constructor for AsiExtraField. "]}, {"root": "UPDATE from  The HeaderId value to  the value for the header id for this extrafield", "operations": ["UPD TextElement:  The HeaderId value from  The HeaderId value to  the value for the header id for this extrafield"]}, {"root": "UPDATE from Set the user id. to Length of the extra field in the local file data - without", "operations": ["UPD TextElement: Set the user id. from Set the user id. to Length of the extra field in the local file data - without"]}, {"root": "INS TextElement: Header-ID or length specifier. to TagElement at 1", "operations": ["INS TextElement: Header-ID or length specifier. to TagElement at 1"]}, {"root": "UPDATE from  The new UserId value to  a <code>ZipShort</code> for the length of the data of this extra field", "operations": ["UPD TextElement:  The new UserId value from  The new UserId value to  a <code>ZipShort</code> for the length of the data of this extra field"]}, {"root": "UPDATE from  The CentralDirectoryLength value to  the centralDirectory length", "operations": ["UPD TextElement:  The CentralDirectoryLength value from  The CentralDirectoryLength value to  the centralDirectory length"]}, {"root": "UPDATE from The actual data to put into local file data - without Header-ID or length to The actual data to put into local file data - without Header-ID", "operations": ["UPD TextElement: The actual data to put into local file data - without Header-ID or length from The actual data to put into local file data - without Header-ID or length to The actual data to put into local file data - without Header-ID"]}, {"root": "UPDATE from specifier. to or length specifier.", "operations": ["UPD TextElement: specifier. from specifier. to or length specifier."]}, {"root": "UPDATE from  The LocalFileDataData value to  get the data", "operations": ["UPD TextElement:  The LocalFileDataData value from  The LocalFileDataData value to  get the data"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Length of the extra field in the local file data - without Header-ID or to  the local file data", "operations": ["UPD TextElement: Length of the extra field in the local file data - without Header-ID or from Length of the extra field in the local file data - without Header-ID or to  the local file data"]}, {"root": "INS SimpleName: uid to TagElement: @return at 0", "operations": ["INS SimpleName: uid to TagElement: @return at 0"]}, {"root": "UPDATE from  The LocalFileDataLength value to  the user id", "operations": ["UPD TextElement:  The LocalFileDataLength value from  The LocalFileDataLength value to  the user id", "UPD TextElement:  The Mode value from  The Mode value to  the user id"]}, {"root": "UPDATE from  The UserId value to  the group id", "operations": ["UPD TextElement:  The UserId value from  The UserId value to  the group id"]}, {"root": "INS SimpleName: name to TagElement: @since at 0", "operations": ["INS SimpleName: name to TagElement: @since at 0"]}, {"root": "UPDATE from  1.1 to  Name of the file this entry links to, empty String", "operations": ["UPD TextElement:  1.1 from  1.1 to  Name of the file this entry links to, empty String"]}, {"root": "INS TextElement: if it is not a symbolic link. to TagElement: @since at 2", "operations": ["INS TextElement: if it is not a symbolic link. to TagElement: @since at 2"]}, {"root": "UPDATE from  Use getUserID() to  name of the file this entry links to if it is a", "operations": ["UPD TextElement:  Use getUserID() from  Use getUserID() to  name of the file this entry links to if it is a"]}, {"root": "INS TextElement: symbolic link, the empty string otherwise. to TagElement: @deprecated at 1", "operations": ["INS TextElement: symbolic link, the empty string otherwise. to TagElement: @deprecated at 1"]}, {"root": "UPDATE from  The Link value to  true if this is a symbolic link", "operations": ["UPD TextElement:  The Link value from  The Link value to  true if this is a symbolic link"]}, {"root": "INS SimpleName: mode to TagElement: @see at 0", "operations": ["INS SimpleName: mode to TagElement: @see at 0"]}, {"root": "INS TextElement:  the file mode to TagElement: @see at 1", "operations": ["INS TextElement:  the file mode to TagElement: @see at 1"]}, {"root": "UPDATE from  The UserID value to  the file mode", "operations": ["UPD TextElement:  The UserID value from  The UserID value to  the file mode"]}, {"root": "UPDATE from  The Directory value to  true if this entry is a directory", "operations": ["UPD TextElement:  The Directory value from  The Directory value to  true if this entry is a directory"]}, {"root": "UPDATE from  the buffer to  an array of bytes", "operations": ["UPD TextElement:  the buffer from  the buffer to  an array of bytes"]}, {"root": "UPDATE from  the offset into buffer to  the start offset", "operations": ["UPD TextElement:  the offset into buffer from  the offset into buffer to  the start offset"]}, {"root": "UPDATE from  the length of data in buffer to  the number of bytes in the array from offset", "operations": ["UPD TextElement:  the length of data in buffer from  the length of data in buffer to  the number of bytes in the array from offset"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from  Description of Parameter to  the mode", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  the mode"]}, {"root": "UPDATE from  The Mode value to  the type with the mode", "operations": ["UPD TextElement:  The Mode value from  The Mode value to  the type with the mode"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ZipShort to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: WORD to MethodInvocation at 6", "operations": ["INS SimpleName: WORD to MethodInvocation at 6"]}, {"root": "INS SimpleName: WORD to MethodInvocation at 6", "operations": ["INS SimpleName: WORD to MethodInvocation at 6"]}, {"root": "INS SimpleName: WORD to MethodInvocation at 5", "operations": ["INS SimpleName: WORD to MethodInvocation at 5"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV FieldAccess to InfixExpression: + at 5"]}, {"root": "INS SimpleName: ZipShort to MethodInvocation at 0", "operations": ["INS SimpleName: ZipShort to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS SimpleName: ZipLong to MethodInvocation at 0", "operations": ["INS SimpleName: ZipLong to MethodInvocation at 0"]}, {"root": "INS SimpleName: getBytes to MethodInvocation at 1", "operations": ["INS SimpleName: getBytes to MethodInvocation at 1"]}, {"root": "INS QualifiedName: linkArray.length to MethodInvocation at 2", "operations": ["INS QualifiedName: linkArray.length to MethodInvocation at 2"]}, {"root": "INS SimpleName: ZipShort to MethodInvocation at 0", "operations": ["INS SimpleName: ZipShort to MethodInvocation at 0"]}, {"root": "INS SimpleName: getBytes to MethodInvocation at 1", "operations": ["INS SimpleName: getBytes to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: ZipShort to MethodInvocation at 0", "operations": ["INS SimpleName: ZipShort to MethodInvocation at 0"]}, {"root": "INS SimpleName: getBytes to MethodInvocation at 1", "operations": ["INS SimpleName: getBytes to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "INS SimpleName: ZipLong to MethodInvocation at 0", "operations": ["INS SimpleName: ZipLong to MethodInvocation at 0"]}, {"root": "INS SimpleName: getBytes to MethodInvocation at 1", "operations": ["INS SimpleName: getBytes to MethodInvocation at 1"]}, {"root": "INS SimpleName: checksum to MethodInvocation at 2", "operations": ["INS SimpleName: checksum to MethodInvocation at 2"]}, {"root": "INS SimpleName: ZipLong to MethodInvocation at 0", "operations": ["INS SimpleName: ZipLong to MethodInvocation at 0"]}, {"root": "INS SimpleName: getValue to MethodInvocation at 1", "operations": ["INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS SimpleName: data to MethodInvocation at 2", "operations": ["INS SimpleName: data to MethodInvocation at 2"]}, {"root": "INS SimpleName: offset to MethodInvocation at 3", "operations": ["INS SimpleName: offset to MethodInvocation at 3"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "INS SimpleName: WORD to InfixExpression: + at 1", "operations": ["INS SimpleName: WORD to InfixExpression: + at 1"]}, {"root": "INS SimpleName: WORD to InfixExpression: - at 1", "operations": ["INS SimpleName: WORD to InfixExpression: - at 1"]}, {"root": "INS SimpleName: ZipShort to MethodInvocation at 0", "operations": ["INS SimpleName: ZipShort to MethodInvocation at 0"]}, {"root": "INS SimpleName: getValue to MethodInvocation at 1", "operations": ["INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS SimpleName: tmp to MethodInvocation at 2", "operations": ["INS SimpleName: tmp to MethodInvocation at 2"]}, {"root": "INS NumberLiteral: 0 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 3"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "INS SimpleName: ZipShort to MethodInvocation at 0", "operations": ["INS SimpleName: ZipShort to MethodInvocation at 0"]}, {"root": "INS SimpleName: getValue to MethodInvocation at 1", "operations": ["INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS SimpleName: tmp to MethodInvocation at 2", "operations": ["INS SimpleName: tmp to MethodInvocation at 2"]}, {"root": "INS NumberLiteral: 6 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 6 to MethodInvocation at 3"]}, {"root": "INS SimpleName: ZipShort to MethodInvocation at 0", "operations": ["INS SimpleName: ZipShort to MethodInvocation at 0"]}, {"root": "INS SimpleName: getValue to MethodInvocation at 1", "operations": ["INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS SimpleName: tmp to MethodInvocation at 2", "operations": ["INS SimpleName: tmp to MethodInvocation at 2"]}, {"root": "INS NumberLiteral: 8 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 8 to MethodInvocation at 3"]}, {"root": "INS SimpleName: WORD to InfixExpression: - at 1", "operations": ["INS SimpleName: WORD to InfixExpression: - at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getUserID to MethodInvocation at 0"]}, {"root": "UPDATE from getGroupID to getGroupId", "operations": ["UPD SimpleName: getGroupID from getGroupID to getGroupId"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getGroupID to MethodInvocation at 0"]}, {"root": "INS SimpleName: WORD to InfixExpression: + at 1", "operations": ["INS SimpleName: WORD to InfixExpression: + at 1"]}, {"root": "INS SimpleName: WORD to InfixExpression: - at 1", "operations": ["INS SimpleName: WORD to InfixExpression: - at 1"]}, {"root": "INS SimpleName: ZipLong to MethodInvocation at 0", "operations": ["INS SimpleName: ZipLong to MethodInvocation at 0"]}, {"root": "INS SimpleName: getValue to MethodInvocation at 1", "operations": ["INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS SimpleName: tmp to MethodInvocation at 2", "operations": ["INS SimpleName: tmp to MethodInvocation at 2"]}, {"root": "INS NumberLiteral: 2 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 2 to MethodInvocation at 3"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: setDirectory", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL TextElement:  The new Directory value", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: dirFlag", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL SimpleName: dirFlag", "DEL Block", "DEL SimpleName: m_dirFlag", "DEL SimpleName: getMode", "DEL SimpleName: m_mode", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: dirFlag", "DEL SimpleName: m_mode", "DEL Modifier: public"]}, {"root": "DEL SimpleName: gid", "operations": ["DEL SimpleName: gid"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: m_gid", "DEL SimpleName: gid", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL Modifier: public", "DEL SimpleName: m_mode", "DEL SimpleName: name", "DEL SimpleName: m_link", "DEL SimpleName: setLinkedFile", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: m_mode", "DEL SimpleName: name", "DEL SimpleName: name", "DEL TextElement:  Name of the file this entry links to, empty String if it is", "DEL SimpleName: getMode", "DEL MethodInvocation", "DEL TextElement: not a symbolic link.", "DEL Assignment: =", "DEL Modifier: final", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Javadoc"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: mode", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: setMode", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: mode", "DEL PrimitiveType: int", "DEL TextElement:  The new Mode value", "DEL Modifier: public"]}, {"root": "DEL SimpleName: uid", "operations": ["DEL SimpleName: uid"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TagElement: @deprecated", "DEL TextElement:  Use setUserID(int)"]}, {"root": "DEL TagElement: @see", "operations": ["DEL TagElement: @see", "DEL SimpleName: setUserID", "DEL MethodRef", "DEL PrimitiveType: int", "DEL MethodRefParameter"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: uid", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL Modifier: final"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: uid", "DEL SimpleName: m_uid"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: uid", "DEL SimpleName: uid", "DEL SimpleName: uid", "DEL Modifier: public", "DEL Block", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL SimpleName: setUserID", "DEL Modifier: final", "DEL TextElement:  The new UserId value", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: m_uid"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL TextElement:  The CentralDirectoryData value", "DEL Javadoc", "DEL SimpleName: getCentralDirectoryData", "DEL TagElement: @return", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: getGroupID", "DEL TextElement:  The GroupId value", "DEL PrimitiveType: int", "DEL TextElement: Get the group id.", "DEL TagElement: @return", "DEL Modifier: public", "DEL SimpleName: m_gid", "DEL Block", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @deprecated", "DEL MethodDeclaration", "DEL TagElement: @see", "DEL PrimitiveType: int", "DEL SimpleName: m_gid", "DEL SimpleName: getGroupId", "DEL MethodRef", "DEL SimpleName: getGroupID", "DEL ReturnStatement", "DEL Javadoc", "DEL TagElement: @return", "DEL Block", "DEL TextElement:  The GroupId value", "DEL Modifier: public", "DEL TextElement:  Use getGroupID() instead"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: m_link", "DEL Modifier: public", "DEL TagElement: @return", "DEL TextElement: the empty string otherwise.", "DEL MethodDeclaration", "DEL TextElement:  name of the file this entry links to if it is a symbolic link,", "DEL SimpleName: getLinkedFile", "DEL Block"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: ZipShort", "DEL SimpleType: ZipShort", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: ZipLong", "DEL SimpleType: ZipLong", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression", "DEL QualifiedName: linkArray.length"]}, {"root": "DEL SimpleName: getBytes", "operations": ["DEL SimpleName: getBytes"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: ZipShort", "DEL SimpleType: ZipShort", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression"]}, {"root": "DEL SimpleName: getBytes", "operations": ["DEL SimpleName: getBytes"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL MethodInvocation", "DEL SimpleName: ZipShort", "DEL ParenthesizedExpression", "DEL SimpleType: ZipShort", "DEL ClassInstanceCreation"]}, {"root": "DEL SimpleName: getBytes", "operations": ["DEL SimpleName: getBytes"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: checksum", "DEL SimpleType: ZipLong", "DEL SimpleName: ZipLong", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation"]}, {"root": "DEL SimpleName: getBytes", "operations": ["DEL SimpleName: getBytes"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL TextElement: length specifier.", "operations": ["DEL TextElement: length specifier."]}, {"root": "DEL ReturnStatement", "operations": ["DEL NumberLiteral: 4", "DEL NumberLiteral: 2", "DEL ReturnStatement", "DEL NumberLiteral: 2", "DEL ClassInstanceCreation", "DEL NumberLiteral: 4", "DEL NumberLiteral: 2", "DEL InfixExpression: +"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL MethodDeclaration"]}, {"root": "DEL MethodRef", "operations": ["DEL MethodRef", "DEL SimpleName: getUserID"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: m_uid"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: int", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: getUserId"]}, {"root": "DEL TagElement", "operations": ["DEL TextElement: Get the user id.", "DEL TagElement"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL SimpleName: buffer", "DEL ParenthesizedExpression", "DEL SimpleType: ZipLong", "DEL SimpleName: ZipLong"]}, {"root": "DEL SimpleName: getValue", "operations": ["DEL SimpleName: getValue"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression", "DEL SimpleName: tmp", "DEL SimpleType: ZipShort", "DEL ClassInstanceCreation", "DEL SimpleName: ZipShort", "DEL NumberLiteral: 0"]}, {"root": "DEL SimpleName: getValue", "operations": ["DEL SimpleName: getValue"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: ZipLong", "DEL ParenthesizedExpression", "DEL NumberLiteral: 2", "DEL SimpleType: ZipLong", "DEL SimpleName: tmp"]}, {"root": "DEL SimpleName: getValue", "operations": ["DEL SimpleName: getValue"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL NumberLiteral: 6", "DEL SimpleName: tmp", "DEL ClassInstanceCreation", "DEL SimpleName: ZipShort", "DEL SimpleType: ZipShort", "DEL ParenthesizedExpression"]}, {"root": "DEL SimpleName: getValue", "operations": ["DEL SimpleName: getValue"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: ZipShort", "DEL SimpleName: tmp", "DEL NumberLiteral: 8", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression", "DEL SimpleType: ZipShort"]}, {"root": "DEL SimpleName: getValue", "operations": ["DEL SimpleName: getValue"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"AsiExtraField_diff": {"operations": ["Move MethodDeclaration(339) into TypeDeclaration: class(816) at 15", "Move MethodDeclaration(635) into TypeDeclaration: class(816) at 28", "Insert FieldDeclaration(54) into TypeDeclaration: class(816) at 7", "Insert MethodDeclaration(363) into TypeDeclaration: class(816) at 19", "Insert MethodDeclaration(385) into TypeDeclaration: class(816) at 20", "Insert MethodDeclaration(421) into TypeDeclaration: class(816) at 22", "Insert MethodDeclaration(435) into TypeDeclaration: class(816) at 23", "Insert MethodDeclaration(463) into TypeDeclaration: class(816) at 24", "Insert MethodDeclaration(479) into TypeDeclaration: class(816) at 25", "Insert MethodDeclaration(522) into TypeDeclaration: class(816) at 27", "Insert MethodDeclaration(564) into TypeDeclaration: class(816) at 29", "Insert Modifier: private(47) into FieldDeclaration(54) at 0", "Insert Modifier: static(48) into FieldDeclaration(54) at 1", "Insert Modifier: final(49) into FieldDeclaration(54) at 2", "Insert PrimitiveType: int(50) into FieldDeclaration(54) at 3", "Insert VariableDeclarationFragment(53) into FieldDeclaration(54) at 4", "Update SimpleName: setGroupId(150) to AsiExtraField", "Update SimpleName: getHeaderID(335) to getHeaderId", "Move SimpleType: ZipShort(534) into MethodDeclaration(177) at 2", "Update SimpleName: setUserId(229) to getLocalFileDataLength", "Insert Javadoc(353) into MethodDeclaration(363) at 0", "Insert Modifier: public(354) into MethodDeclaration(363) at 1", "Move ArrayType: byte[](269) into MethodDeclaration(363) at 2", "Insert SimpleName: getCentralDirectoryData(358) into MethodDeclaration(363) at 3", "Move Block(274) into MethodDeclaration(363) at 4", "Insert Javadoc(371) into MethodDeclaration(385) at 0", "Move Modifier: public(532) into MethodDeclaration(385) at 1", "Insert PrimitiveType: void(373) into MethodDeclaration(385) at 2", "Update SimpleName: getLocalFileDataLength(535) to setUserId", "Move SimpleName: getLocalFileDataLength(535) into MethodDeclaration(385) at 3", "Insert SingleVariableDeclaration(377) into MethodDeclaration(385) at 4", "Move Block(552) into MethodDeclaration(385) at 5", "Update SimpleName: getMode(563) to getUserId", "Insert Javadoc(407) into MethodDeclaration(421) at 0", "Insert Modifier: public(408) into MethodDeclaration(421) at 1", "Insert PrimitiveType: void(409) into MethodDeclaration(421) at 2", "Insert SimpleName: setGroupId(410) into MethodDeclaration(421) at 3", "Move SingleVariableDeclaration(153) into MethodDeclaration(421) at 4", "Insert Block(420) into MethodDeclaration(421) at 5", "Insert Javadoc(428) into MethodDeclaration(435) at 0", "Insert Modifier: public(429) into MethodDeclaration(435) at 1", "Insert PrimitiveType: int(430) into MethodDeclaration(435) at 2", "Insert SimpleName: getGroupId(431) into MethodDeclaration(435) at 3", "Insert Block(434) into MethodDeclaration(435) at 4", "Insert Javadoc(444) into MethodDeclaration(463) at 0", "Insert Modifier: public(445) into MethodDeclaration(463) at 1", "Insert PrimitiveType: void(446) into MethodDeclaration(463) at 2", "Insert SimpleName: setLinkedFile(447) into MethodDeclaration(463) at 3", "Insert SingleVariableDeclaration(451) into MethodDeclaration(463) at 4", "Move Block(210) into MethodDeclaration(463) at 5", "Insert Javadoc(471) into MethodDeclaration(479) at 0", "Insert Modifier: public(472) into MethodDeclaration(479) at 1", "Move SimpleType: String(350) into MethodDeclaration(479) at 2", "Insert SimpleName: getLinkedFile(475) into MethodDeclaration(479) at 3", "Insert Block(478) into MethodDeclaration(479) at 4", "Insert Javadoc(506) into MethodDeclaration(522) at 0", "Move Modifier: public(580) into MethodDeclaration(522) at 1", "Insert PrimitiveType: void(508) into MethodDeclaration(522) at 2", "Insert SimpleName: setMode(509) into MethodDeclaration(522) at 3", "Insert SingleVariableDeclaration(512) into MethodDeclaration(522) at 4", "Move Block(585) into MethodDeclaration(522) at 5", "Update SimpleName: getUserID(594) to getMode", "Insert Javadoc(544) into MethodDeclaration(564) at 0", "Insert Modifier: public(545) into MethodDeclaration(564) at 1", "Insert PrimitiveType: void(546) into MethodDeclaration(564) at 2", "Insert SimpleName: setDirectory(547) into MethodDeclaration(564) at 3", "Insert SingleVariableDeclaration(550) into MethodDeclaration(564) at 4", "Insert Block(563) into MethodDeclaration(564) at 5", "Move TagElement: @throws(649) into Javadoc(599) at 6", "Update TextElement: Adds Unix file permission and UID/GID fields as well as symbolic link(6) to Adds Unix file permission and UID/GID fields as well as symbolic", "Update TextElement: handling. <p>(7) to link handling.", "Update TextElement: This class uses the ASi extra field in the format: <pre>(8) to <p>This class uses the ASi extra field in the format:", "Insert TextElement: <pre>(9) into TagElement(25) at 3", "Update TextElement: </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a(19) to </pre>", "Update TextElement: href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\">(20) to taken from appnote.iz (Info-ZIP note, 981119) found at <a", "Update TextElement: ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p>(21) to href=\"ftp://ftp.uu.net/pub/archiving/zip/doc/\">ftp://ftp.uu.net/pub/archiving/zip/doc/</a></p>", "Update TextElement: Short is two bytes and Long is four bytes in big endian byte and word order,(22) to <p>Short is two bytes and Long is four bytes in big endian byte and", "Update TextElement: device numbers are currently not supported.</p>(23) to word order, device numbers are currently not supported.</p>", "Insert SimpleName: WORD(51) into VariableDeclarationFragment(53) at 0", "Insert NumberLiteral: 4(52) into VariableDeclarationFragment(53) at 1", "Update SimpleName: m_mode(53) to mode", "Insert NumberLiteral: 0(63) into VariableDeclarationFragment(64) at 1", "Update SimpleName: m_uid(63) to uid", "Insert NumberLiteral: 0(74) into VariableDeclarationFragment(75) at 1", "Update SimpleName: m_gid(73) to gid", "Insert NumberLiteral: 0(85) into VariableDeclarationFragment(86) at 1", "Update SimpleName: m_link(85) to link", "Update SimpleName: m_dirFlag(96) to dirFlag", "Insert BooleanLiteral: false(109) into VariableDeclarationFragment(110) at 1", "Update SimpleName: m_crc(107) to crc", "Update TagElement: @param(144) to ", "Update TagElement: @param(216) to @return", "Move TagElement: @since(264) into Javadoc(155) at 2", "Insert ReturnStatement(175) into Block(176) at 0", "Move TagElement(260) into Javadoc(184) at 0", "Move TagElement: @since(218) into Javadoc(184) at 3", "Move TagElement: @since(195) into Javadoc(201) at 2", "Move TagElement(277) into Javadoc(353) at 0", "Update TagElement(526) to @return", "Move TagElement(526) into Javadoc(353) at 1", "Move TagElement: @since(311) into Javadoc(353) at 2", "Move TagElement(241) into Javadoc(371) at 0", "Update TagElement: @return(528) to @param", "Move TagElement: @return(528) into Javadoc(371) at 1", "Move TagElement: @since(362) into Javadoc(371) at 2", "Insert PrimitiveType: int(375) into SingleVariableDeclaration(377) at 0", "Insert SimpleName: uid(376) into SingleVariableDeclaration(377) at 1", "Insert ExpressionStatement(383) into Block(384) at 0", "Move TagElement(569) into Javadoc(392) at 0", "Move TagElement: @since(297) into Javadoc(392) at 3", "Move TagElement(141) into Javadoc(407) at 0", "Insert TagElement: @param(404) into Javadoc(407) at 1", "Move TagElement: @since(146) into Javadoc(407) at 2", "Insert ExpressionStatement(419) into Block(420) at 0", "Move TagElement(307) into Javadoc(428) at 0", "Move TagElement: @return(571) into Javadoc(428) at 1", "Move TagElement: @since(281) into Javadoc(428) at 2", "Insert ReturnStatement(433) into Block(434) at 0", "Move TagElement(161) into Javadoc(444) at 0", "Update TagElement: @since(573) to @param", "Move TagElement: @since(573) into Javadoc(444) at 1", "Move TagElement: @since(167) into Javadoc(444) at 2", "Move SimpleType: String(174) into SingleVariableDeclaration(451) at 0", "Insert SimpleName: name(450) into SingleVariableDeclaration(451) at 1", "Insert ExpressionStatement(455) into Block(462) at 0", "Move TagElement(341) into Javadoc(471) at 0", "Update TagElement: @deprecated(575) to @return", "Move TagElement: @deprecated(575) into Javadoc(471) at 1", "Move TagElement: @since(346) into Javadoc(471) at 2", "Insert ReturnStatement(477) into Block(478) at 0", "Move TagElement(190) into Javadoc(506) at 0", "Update TagElement: @see(578) to @param", "Move TagElement: @see(578) into Javadoc(506) at 1", "Move TagElement: @since(559) into Javadoc(506) at 2", "Insert PrimitiveType: int(510) into SingleVariableDeclaration(512) at 0", "Insert SimpleName: mode(511) into SingleVariableDeclaration(512) at 1", "Insert ExpressionStatement(520) into Block(521) at 0", "Move TagElement(555) into Javadoc(529) at 0", "Move TagElement: @since(530) into Javadoc(529) at 3", "Move TagElement(114) into Javadoc(544) at 0", "Insert TagElement: @param(541) into Javadoc(544) at 1", "Move TagElement: @since(119) into Javadoc(544) at 2", "Insert PrimitiveType: boolean(548) into SingleVariableDeclaration(550) at 0", "Insert SimpleName: dirFlag(549) into SingleVariableDeclaration(550) at 1", "Insert ExpressionStatement(556) into Block(563) at 0", "Insert ExpressionStatement(562) into Block(563) at 1", "Move ArrayType: byte[](489) into SingleVariableDeclaration(607) at 0", "Update SimpleName: buffer(660) to data", "Update TextElement: File this entry points to, if it is a symbolic link. <p>(76) to File this entry points to, if it is a symbolic link.", "Update TextElement: empty string - if entry is not a symbolic link.</p>(77) to <p>empty string - if entry is not a symbolic link.</p>", "Update TextElement:  The new GroupId value(143) to Constructor for AsiExtraField. ", "Update TextElement:  The HeaderId value(327) to  the value for the header id for this extrafield", "Update TextElement: Set the user id.(212) to Length of the extra field in the local file data - without", "Insert TextElement: Header-ID or length specifier.(149) into TagElement(150) at 1", "Update TextElement:  The new UserId value(215) to  a <code>ZipShort</code> for the length of the data of this extra field", "Insert ClassInstanceCreation(174) into ReturnStatement(175) at 0", "Update TextElement:  The CentralDirectoryLength value(278) to  the centralDirectory length", "Update TextElement: The actual data to put into local file data - without Header-ID or length(356) to The actual data to put into local file data - without Header-ID", "Update TextElement: specifier.(357) to or length specifier.", "Update TextElement:  The LocalFileDataData value(359) to  get the data", "Move ArrayType: byte[](659) into VariableDeclarationStatement(321) at 0", "Update TextElement: Length of the extra field in the local file data - without Header-ID or(524) to  the local file data", "Insert SimpleName: uid(366) into TagElement: @param(368) at 0", "Update TextElement:  The LocalFileDataLength value(527) to  the user id", "Insert Assignment: =(382) into ExpressionStatement(383) at 0", "Update TextElement:  The Mode value(556) to  the user id", "Update SimpleName: m_mode(564) to uid", "Insert SimpleName: gid(402) into TagElement: @param(404) at 0", "Insert TextElement:  the group id(403) into TagElement: @param(404) at 1", "Insert Assignment: =(418) into ExpressionStatement(419) at 0", "Update TextElement:  The UserId value(570) to  the group id", "Insert SimpleName: gid(432) into ReturnStatement(433) at 0", "Insert SimpleName: name(438) into TagElement: @param(441) at 0", "Update TextElement:  1.1(572) to  Name of the file this entry links to, empty String", "Insert TextElement: if it is not a symbolic link.(440) into TagElement: @param(441) at 2", "Insert Assignment: =(454) into ExpressionStatement(455) at 0", "Update TextElement:  Use getUserID()(574) to  name of the file this entry links to if it is a", "Insert TextElement: symbolic link, the empty string otherwise.(467) into TagElement: @return(468) at 1", "Insert SimpleName: link(476) into ReturnStatement(477) at 0", "Update TextElement:  The Link value(619) to  true if this is a symbolic link", "Insert SimpleName: mode(501) into TagElement: @param(503) at 0", "Insert TextElement:  the file mode(502) into TagElement: @param(503) at 1", "Insert Assignment: =(519) into ExpressionStatement(520) at 0", "Update TextElement:  The UserID value(589) to  the file mode", "Update SimpleName: m_uid(595) to mode", "Insert SimpleName: dirFlag(539) into TagElement: @param(541) at 0", "Insert TextElement:  if true, this entry is a directory(540) into TagElement: @param(541) at 1", "Insert Assignment: =(555) into ExpressionStatement(556) at 0", "Insert Assignment: =(561) into ExpressionStatement(562) at 0", "Update TextElement:  The Directory value(601) to  true if this entry is a directory", "Update SimpleName: buffer(638) to data", "Update TextElement:  the buffer(639) to  an array of bytes", "Update TextElement:  the offset into buffer(642) to  the start offset", "Update TextElement:  the length of data in buffer(645) to  the number of bytes in the array from offset", "Move ArrayType: byte[](764) into VariableDeclarationStatement(637) at 0", "Move ArrayType: byte[](690) into VariableDeclarationStatement(712) at 0", "Update TextElement:  Description of Parameter(844) to  the mode", "Update TextElement:  The Mode value(846) to  the type with the mode", "Move SimpleType: ZipShort(537) into ClassInstanceCreation(174) at 0", "Insert InfixExpression: +(173) into ClassInstanceCreation(174) at 1", "Insert SimpleName: WORD(255) into MethodInvocation(256) at 6", "Update SimpleName: m_crc(467) to crc", "Update SimpleName: m_crc(471) to crc", "Insert SimpleName: WORD(331) into MethodInvocation(332) at 6", "Insert SimpleName: WORD(339) into MethodInvocation(341) at 5", "Insert FieldAccess(380) into Assignment: =(382) at 0", "Insert SimpleName: uid(381) into Assignment: =(382) at 1", "Insert FieldAccess(416) into Assignment: =(418) at 0", "Insert SimpleName: gid(417) into Assignment: =(418) at 1", "Insert SimpleName: link(452) into Assignment: =(454) at 0", "Insert SimpleName: name(453) into Assignment: =(454) at 1", "Update SimpleName: m_mode(204) to mode", "Insert FieldAccess(515) into Assignment: =(519) at 0", "Insert MethodInvocation(518) into Assignment: =(519) at 1", "Insert FieldAccess(553) into Assignment: =(555) at 0", "Insert SimpleName: dirFlag(554) into Assignment: =(555) at 1", "Insert SimpleName: mode(557) into Assignment: =(561) at 0", "Insert MethodInvocation(560) into Assignment: =(561) at 1", "Update SimpleName: m_dirFlag(609) to dirFlag", "Update SimpleName: buffer(699) to data", "Update SimpleName: m_crc(710) to crc", "Update SimpleName: m_crc(714) to crc", "Update SimpleName: m_uid(778) to uid", "Update SimpleName: m_gid(789) to gid", "Insert SimpleName: WORD(162) into InfixExpression: +(173) at 0", "Insert NumberLiteral: 2(163) into InfixExpression: +(173) at 1", "Insert SimpleName: WORD(164) into InfixExpression: +(173) at 2", "Insert NumberLiteral: 2(165) into InfixExpression: +(173) at 3", "Insert NumberLiteral: 2(166) into InfixExpression: +(173) at 4", "Move FieldAccess(548) into InfixExpression: +(173) at 5", "Insert SimpleName: ZipShort(225) into MethodInvocation(229) at 0", "Move MethodInvocation(390) into MethodInvocation(229) at 3", "Insert SimpleName: ZipLong(248) into MethodInvocation(251) at 0", "Insert SimpleName: getBytes(249) into MethodInvocation(251) at 1", "Insert QualifiedName: linkArray.length(250) into MethodInvocation(251) at 2", "Insert SimpleName: ZipShort(260) into MethodInvocation(264) at 0", "Insert SimpleName: getBytes(261) into MethodInvocation(264) at 1", "Insert MethodInvocation(263) into MethodInvocation(264) at 2", "Insert SimpleName: ZipShort(273) into MethodInvocation(277) at 0", "Insert SimpleName: getBytes(274) into MethodInvocation(277) at 1", "Insert MethodInvocation(276) into MethodInvocation(277) at 2", "Update SimpleName: m_crc(478) to crc", "Move ArrayType: byte[](485) into ArrayCreation(319) at 0", "Insert SimpleName: ZipLong(324) into MethodInvocation(327) at 0", "Insert SimpleName: getBytes(325) into MethodInvocation(327) at 1", "Insert SimpleName: checksum(326) into MethodInvocation(327) at 2", "Insert ThisExpression(378) into FieldAccess(380) at 0", "Insert SimpleName: uid(379) into FieldAccess(380) at 1", "Insert ThisExpression(414) into FieldAccess(416) at 0", "Insert SimpleName: gid(415) into FieldAccess(416) at 1", "Insert ThisExpression(513) into FieldAccess(515) at 0", "Insert SimpleName: mode(514) into FieldAccess(515) at 1", "Insert SimpleName: getMode(516) into MethodInvocation(518) at 0", "Insert SimpleName: mode(517) into MethodInvocation(518) at 1", "Insert ThisExpression(551) into FieldAccess(553) at 0", "Insert SimpleName: dirFlag(552) into FieldAccess(553) at 1", "Insert SimpleName: getMode(558) into MethodInvocation(560) at 0", "Insert SimpleName: mode(559) into MethodInvocation(560) at 1", "Insert SimpleName: ZipLong(618) into MethodInvocation(622) at 0", "Insert SimpleName: getValue(619) into MethodInvocation(622) at 1", "Insert SimpleName: data(620) into MethodInvocation(622) at 2", "Insert SimpleName: offset(621) into MethodInvocation(622) at 3", "Move ArrayType: byte[](760) into ArrayCreation(635) at 0", "Insert SimpleName: WORD(642) into InfixExpression: +(643) at 1", "Insert SimpleName: WORD(647) into InfixExpression: -(648) at 1", "Update SimpleName: m_crc(721) to crc", "Insert SimpleName: ZipShort(689) into MethodInvocation(693) at 0", "Insert SimpleName: getValue(690) into MethodInvocation(693) at 1", "Insert SimpleName: tmp(691) into MethodInvocation(693) at 2", "Insert NumberLiteral: 0(692) into MethodInvocation(693) at 3", "Move ArrayType: byte[](686) into ArrayCreation(710) at 0", "Insert SimpleName: ZipShort(714) into MethodInvocation(718) at 0", "Insert SimpleName: getValue(715) into MethodInvocation(718) at 1", "Insert SimpleName: tmp(716) into MethodInvocation(718) at 2", "Insert NumberLiteral: 6(717) into MethodInvocation(718) at 3", "Insert SimpleName: ZipShort(722) into MethodInvocation(726) at 0", "Insert SimpleName: getValue(723) into MethodInvocation(726) at 1", "Insert SimpleName: tmp(724) into MethodInvocation(726) at 2", "Insert NumberLiteral: 8(725) into MethodInvocation(726) at 3", "Insert SimpleName: WORD(218) into InfixExpression: -(219) at 1", "Update SimpleName: getUserID(430) to getUserId", "Move SimpleName: getUserID(430) into MethodInvocation(263) at 0", "Update SimpleName: getGroupID(446) to getGroupId", "Move SimpleName: getGroupID(446) into MethodInvocation(276) at 0", "Insert SimpleName: WORD(317) into InfixExpression: +(318) at 1", "Insert SimpleName: WORD(633) into InfixExpression: -(634) at 1", "Update SimpleName: m_link(803) to link", "Update SimpleName: m_link(817) to link", "Insert SimpleName: ZipLong(704) into MethodInvocation(708) at 0", "Insert SimpleName: getValue(705) into MethodInvocation(708) at 1", "Insert SimpleName: tmp(706) into MethodInvocation(708) at 2", "Insert NumberLiteral: 2(707) into MethodInvocation(708) at 3", "Delete SimpleName: dirFlag(115)", "Delete TextElement:  The new Directory value(116)", "Delete TagElement: @param(117)", "Delete Javadoc(120)", "Delete Modifier: public(121)", "Delete PrimitiveType: void(122)", "Delete SimpleName: setDirectory(123)", "Delete Modifier: final(124)", "Delete PrimitiveType: boolean(125)", "Delete SimpleName: dirFlag(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: m_dirFlag(128)", "Delete SimpleName: dirFlag(129)", "Delete Assignment: =(130)", "Delete ExpressionStatement(131)", "Delete SimpleName: m_mode(132)", "Delete SimpleName: getMode(133)", "Delete SimpleName: m_mode(134)", "Delete MethodInvocation(135)", "Delete Assignment: =(136)", "Delete ExpressionStatement(137)", "Delete Block(138)", "Delete MethodDeclaration(139)", "Delete SimpleName: gid(142)", "Delete PrimitiveType: void(149)", "Delete SimpleName: m_gid(154)", "Delete SimpleName: gid(155)", "Delete Assignment: =(156)", "Delete ExpressionStatement(157)", "Delete SimpleName: name(162)", "Delete TextElement:  Name of the file this entry links to, empty String if it is(163)", "Delete TextElement: not a symbolic link.(164)", "Delete TagElement: @param(165)", "Delete Javadoc(168)", "Delete Modifier: public(169)", "Delete PrimitiveType: void(170)", "Delete SimpleName: setLinkedFile(171)", "Delete Modifier: final(172)", "Delete SimpleName: name(175)", "Delete SingleVariableDeclaration(176)", "Delete SimpleName: m_link(177)", "Delete SimpleName: name(178)", "Delete Assignment: =(179)", "Delete ExpressionStatement(180)", "Delete SimpleName: m_mode(181)", "Delete SimpleName: getMode(182)", "Delete SimpleName: m_mode(183)", "Delete MethodInvocation(184)", "Delete Assignment: =(185)", "Delete ExpressionStatement(186)", "Delete Block(187)", "Delete MethodDeclaration(188)", "Delete SimpleName: mode(191)", "Delete TextElement:  The new Mode value(192)", "Delete TagElement: @param(193)", "Delete Javadoc(196)", "Delete Modifier: public(197)", "Delete PrimitiveType: void(198)", "Delete SimpleName: setMode(199)", "Delete Modifier: final(200)", "Delete PrimitiveType: int(201)", "Delete SimpleName: mode(202)", "Delete SingleVariableDeclaration(203)", "Delete MethodDeclaration(211)", "Delete SimpleName: uid(214)", "Delete TextElement:  Use setUserID(int)(219)", "Delete TagElement: @deprecated(220)", "Delete SimpleName: setUserID(221)", "Delete PrimitiveType: int(222)", "Delete MethodRefParameter(223)", "Delete MethodRef(224)", "Delete TagElement: @see(225)", "Delete PrimitiveType: void(228)", "Delete Modifier: final(230)", "Delete PrimitiveType: int(231)", "Delete SimpleName: uid(232)", "Delete SingleVariableDeclaration(233)", "Delete SimpleName: m_uid(234)", "Delete SimpleName: uid(235)", "Delete Assignment: =(236)", "Delete ExpressionStatement(237)", "Delete SimpleName: uid(242)", "Delete TextElement:  The new UserId value(243)", "Delete TagElement: @param(244)", "Delete Javadoc(245)", "Delete Modifier: public(246)", "Delete PrimitiveType: void(247)", "Delete SimpleName: setUserID(248)", "Delete Modifier: final(249)", "Delete PrimitiveType: int(250)", "Delete SimpleName: uid(251)", "Delete SingleVariableDeclaration(252)", "Delete SimpleName: m_uid(253)", "Delete SimpleName: uid(254)", "Delete Assignment: =(255)", "Delete ExpressionStatement(256)", "Delete Block(257)", "Delete MethodDeclaration(258)", "Delete TextElement:  The CentralDirectoryData value(261)", "Delete TagElement: @return(262)", "Delete Javadoc(265)", "Delete Modifier: public(266)", "Delete SimpleName: getCentralDirectoryData(270)", "Delete MethodDeclaration(275)", "Delete TextElement: Get the group id.(292)", "Delete TagElement(293)", "Delete TextElement:  The GroupId value(294)", "Delete TagElement: @return(295)", "Delete Javadoc(298)", "Delete Modifier: public(299)", "Delete PrimitiveType: int(300)", "Delete SimpleName: getGroupID(301)", "Delete SimpleName: m_gid(302)", "Delete ReturnStatement(303)", "Delete Block(304)", "Delete MethodDeclaration(305)", "Delete TextElement:  The GroupId value(308)", "Delete TagElement: @return(309)", "Delete TextElement:  Use getGroupID() instead(312)", "Delete TagElement: @deprecated(313)", "Delete SimpleName: getGroupID(314)", "Delete MethodRef(315)", "Delete TagElement: @see(316)", "Delete Javadoc(317)", "Delete Modifier: public(318)", "Delete PrimitiveType: int(319)", "Delete SimpleName: getGroupId(320)", "Delete SimpleName: m_gid(321)", "Delete ReturnStatement(322)", "Delete Block(323)", "Delete MethodDeclaration(324)", "Delete TextElement:  name of the file this entry links to if it is a symbolic link,(342)", "Delete TextElement: the empty string otherwise.(343)", "Delete TagElement: @return(344)", "Delete Javadoc(347)", "Delete Modifier: public(348)", "Delete SimpleName: getLinkedFile(351)", "Delete SimpleName: m_link(352)", "Delete ReturnStatement(353)", "Delete Block(354)", "Delete MethodDeclaration(355)", "Delete NumberLiteral: 4(380)", "Delete SimpleName: ZipShort(387)", "Delete SimpleType: ZipShort(388)", "Delete ClassInstanceCreation(391)", "Delete ParenthesizedExpression(392)", "Delete SimpleName: ZipLong(413)", "Delete SimpleType: ZipLong(414)", "Delete QualifiedName: linkArray.length(415)", "Delete ClassInstanceCreation(416)", "Delete ParenthesizedExpression(417)", "Delete SimpleName: getBytes(418)", "Delete NumberLiteral: 4(423)", "Delete SimpleName: ZipShort(428)", "Delete SimpleType: ZipShort(429)", "Delete MethodInvocation(431)", "Delete ClassInstanceCreation(432)", "Delete ParenthesizedExpression(433)", "Delete SimpleName: getBytes(434)", "Delete SimpleName: ZipShort(444)", "Delete SimpleType: ZipShort(445)", "Delete MethodInvocation(447)", "Delete ClassInstanceCreation(448)", "Delete ParenthesizedExpression(449)", "Delete SimpleName: getBytes(450)", "Delete NumberLiteral: 4(491)", "Delete SimpleName: ZipLong(498)", "Delete SimpleType: ZipLong(499)", "Delete SimpleName: checksum(500)", "Delete ClassInstanceCreation(501)", "Delete ParenthesizedExpression(502)", "Delete SimpleName: getBytes(503)", "Delete NumberLiteral: 4(508)", "Delete NumberLiteral: 4(516)", "Delete TextElement: length specifier.(525)", "Delete NumberLiteral: 4(538)", "Delete NumberLiteral: 2(539)", "Delete NumberLiteral: 4(540)", "Delete NumberLiteral: 2(541)", "Delete NumberLiteral: 2(542)", "Delete InfixExpression: +(549)", "Delete ClassInstanceCreation(550)", "Delete ReturnStatement(551)", "Delete Javadoc(531)", "Delete MethodDeclaration(553)", "Delete SimpleName: getUserID(576)", "Delete MethodRef(577)", "Delete SimpleName: m_uid(583)", "Delete ReturnStatement(584)", "Delete Javadoc(579)", "Delete PrimitiveType: int(581)", "Delete SimpleName: getUserId(582)", "Delete MethodDeclaration(586)", "Delete TextElement: Get the user id.(587)", "Delete TagElement(588)", "Delete Modifier: final(656)", "Delete Modifier: final(662)", "Delete Modifier: final(666)", "Delete SimpleName: ZipLong(674)", "Delete SimpleType: ZipLong(675)", "Delete SimpleName: buffer(676)", "Delete SimpleName: offset(677)", "Delete ClassInstanceCreation(678)", "Delete ParenthesizedExpression(679)", "Delete SimpleName: getValue(680)", "Delete NumberLiteral: 4(692)", "Delete NumberLiteral: 4(701)", "Delete NumberLiteral: 4(706)", "Delete SimpleName: ZipShort(748)", "Delete SimpleType: ZipShort(749)", "Delete SimpleName: tmp(750)", "Delete NumberLiteral: 0(751)", "Delete ClassInstanceCreation(752)", "Delete ParenthesizedExpression(753)", "Delete SimpleName: getValue(754)", "Delete SimpleName: ZipLong(766)", "Delete SimpleType: ZipLong(767)", "Delete SimpleName: tmp(768)", "Delete NumberLiteral: 2(769)", "Delete ClassInstanceCreation(770)", "Delete ParenthesizedExpression(771)", "Delete SimpleName: getValue(772)", "Delete SimpleName: ZipShort(779)", "Delete SimpleType: ZipShort(780)", "Delete SimpleName: tmp(781)", "Delete NumberLiteral: 6(782)", "Delete ClassInstanceCreation(783)", "Delete ParenthesizedExpression(784)", "Delete SimpleName: getValue(785)", "Delete SimpleName: ZipShort(790)", "Delete SimpleType: ZipShort(791)", "Delete SimpleName: tmp(792)", "Delete NumberLiteral: 8(793)", "Delete ClassInstanceCreation(794)", "Delete ParenthesizedExpression(795)", "Delete SimpleName: getValue(796)", "Delete Modifier: final(854)"]}}, {"UnrecognizedExtraField_cluster": {"actions": [{"root": "UPDATE from setHeaderID to setHeaderId", "operations": ["UPD SimpleName: setHeaderID from setHeaderID to setHeaderId"]}, {"root": "UPDATE from getHeaderID to getHeaderId", "operations": ["UPD SimpleName: getHeaderID from getHeaderID to getHeaderId"]}]}}, {"UnrecognizedExtraField_diff": {"operations": ["Update SimpleName: setHeaderID(77) to setHeaderId", "Update SimpleName: getHeaderID(164) to getHeaderId"]}}, {"ZipArchiveEntry_cluster": {"actions": [{"root": "UPDATE from getHeaderID to getHeaderId", "operations": ["UPD SimpleName: getHeaderID from getHeaderID to getHeaderId", "UPD SimpleName: getHeaderID from getHeaderID to getHeaderId", "UPD SimpleName: getHeaderID from getHeaderID to getHeaderId"]}]}}, {"ZipArchiveEntry_diff": {"operations": ["Update SimpleName: getHeaderID(791) to getHeaderId", "Update SimpleName: getHeaderID(829) to getHeaderId", "Update SimpleName: getHeaderID(971) to getHeaderId"]}}, {"ZipEntry_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 31", "MOV MethodDeclaration to TypeDeclaration: class at 32", "MOV MethodDeclaration to TypeDeclaration: class at 31"]}, {"root": "UPDATE from java.util.ArrayList to java.util.Vector", "operations": ["UPD QualifiedName: java.util.ArrayList from java.util.ArrayList to java.util.Vector"]}, {"root": "INS SimpleType: Cloneable to TypeDeclaration: class at 4", "operations": ["INS SimpleName: Cloneable to SimpleType: Cloneable at 0", "INS SimpleType: Cloneable to TypeDeclaration: class at 4"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: PLATFORM_FAT to VariableDeclarationFragment at 1", "INS PrimitiveType: int to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: platform to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 10"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 15", "INS Block to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 18", "INS Javadoc to MethodDeclaration at 0", "INS StringLiteral: \"\" to SuperConstructorInvocation at 0", "INS SuperConstructorInvocation to Block at 0", "INS SimpleName: ZipEntry to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS Modifier: protected to MethodDeclaration at 1", "INS TagElement: @since to Javadoc at 0", "INS TextElement:  1.9 to TagElement: @since at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TagElement: @return to Javadoc at 1", "INS SimpleName: clone to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS TextElement: Overwrite clone. to TagElement at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS CastExpression to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 5", "INS TextElement:  a cloned copy of this ZipEntry to TagElement: @return at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: e to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleName: getInternalAttributes to MethodDeclaration at 3", "INS SimpleName: internalAttributes to ReturnStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 29", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: extraFields to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS TextElement: setCompressedSize via reflection.</p> to TagElement at 2", "INS SimpleName: setCompressedSize to MethodInvocation at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS TextElement: Make this class work in JDK 1.1 like a 1.2 class. to TagElement at 0", "INS SimpleName: size to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: size to MethodInvocation at 1", "INS TextElement: Use setCompressedSize directly. to TagElement: @deprecated at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TextElement: <p>This either stores the size for later usage or invokes to TagElement at 1", "INS TagElement to Javadoc at 0", "INS TextElement:  the size to use to TagElement: @param at 1", "INS TagElement: @deprecated to Javadoc at 2", "INS TextElement:  since 1.7. to TagElement: @deprecated at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: size to TagElement: @param at 0", "INS SimpleName: setComprSize to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS TagElement: @param to Javadoc at 1", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS Modifier: public to MethodDeclaration at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS TagElement: @since to Javadoc at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: getName to SuperMethodInvocation at 0", "INS TextElement:  1.9 to TagElement: @since at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getName to MethodDeclaration at 3", "INS TextElement: Get the name of the entry. to TagElement at 0", "INS InfixExpression: == to ConditionalExpression at 0", "INS SuperMethodInvocation to ConditionalExpression at 1", "INS TagElement: @return to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  the entry name to TagElement: @return at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: name to ConditionalExpression at 2", "INS SimpleName: name to InfixExpression: == at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: getName to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS TextElement:  true if the entry is a directory to TagElement: @return at 0", "INS SimpleName: isDirectory to MethodDeclaration at 3", "INS TextElement:  1.10 to TagElement: @since at 0", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @since to Javadoc at 2", "INS TextElement: Is this entry a directory? to TagElement at 0", "INS TagElement: @return to Javadoc at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: endsWith to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS StringLiteral: \"/\" to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: name to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: name to Assignment: = at 1", "INS TagElement: @param to Javadoc at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: setName to MethodDeclaration at 3", "INS Modifier: protected to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: name to FieldAccess at 1", "INS Block to MethodDeclaration at 5", "INS TextElement:  the name to use to TagElement: @param at 1", "INS SimpleName: String to SimpleType: String at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TextElement: Set the name of the entry. to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS SimpleName: getName to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS TextElement:  Ant 1.7 to TagElement: @since at 0", "INS SimpleName: hashCode to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS TagElement: @return to Javadoc at 1", "INS SimpleName: hashCode to MethodDeclaration at 3", "INS PrimitiveType: int to MethodDeclaration at 2", "INS TextElement: Get the hashCode of the entry. to TagElement at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TagElement: @since to Javadoc at 2", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: This uses the name as the hashcode. to TagElement at 1", "INS TagElement to Javadoc at 0", "INS TextElement:  a hashcode. to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS SimpleName: o to TagElement: @param at 0", "INS ThisExpression to InfixExpression: == at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Javadoc to MethodDeclaration at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS TextElement:  the object to compare to to TagElement: @param at 1", "INS TagElement: @return to Javadoc at 2", "INS ParenthesizedExpression to ReturnStatement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS TextElement:  true if this object is the same as <code>o</code> to TagElement: @return at 0", "INS TagElement: @param to Javadoc at 1", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS SimpleName: equals to MethodDeclaration at 3", "INS TagElement: @since to Javadoc at 3", "INS SimpleName: o to InfixExpression: == at 1", "INS SimpleName: o to SingleVariableDeclaration at 1", "INS TextElement: The equality method. In this case, the implementation returns 'this == o' to TagElement at 0", "INS Block to MethodDeclaration at 5", "INS TextElement:  Ant 1.7 to TagElement: @since at 0", "INS TagElement to Javadoc at 0", "INS TextElement: which is basically the equals method of the Object class. to TagElement at 1"]}, {"root": "UPDATE from static to public", "operations": ["UPD Modifier: static from static to public", "UPD Modifier: static from static to public", "UPD Modifier: private from private to public", "UPD Modifier: static from static to public", "UPD Modifier: private from private to public"]}, {"root": "INS Modifier: final to FieldDeclaration at 3", "operations": ["INS Modifier: final to FieldDeclaration at 3"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 4", "operations": ["INS PrimitiveType: int to FieldDeclaration at 4"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 4", "operations": ["INS PrimitiveType: int to FieldDeclaration at 4"]}, {"root": "INS Modifier: final to FieldDeclaration at 3", "operations": ["INS Modifier: final to FieldDeclaration at 3"]}, {"root": "UPDATE from void to int", "operations": ["UPD PrimitiveType: void from void to int", "UPD PrimitiveType: long from long to int", "UPD PrimitiveType: void from void to int", "UPD PrimitiveType: boolean from boolean to int"]}, {"root": "INS Modifier: static to FieldDeclaration at 1", "operations": ["INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 3", "operations": ["INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "UPDATE from Long to Vector", "operations": ["UPD SimpleName: Long from Long to Vector", "UPD SimpleType: Long from Long to Vector"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: ZipEntry to MethodDeclaration at 2", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleType: ZipException to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Object to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS SimpleName: setInternalAttributes to MethodDeclaration at 4", "operations": ["INS SimpleName: setInternalAttributes to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: value to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: getExternalAttributes to MethodDeclaration at 3"]}, {"root": "UPDATE from boolean to long", "operations": ["UPD PrimitiveType: boolean from boolean to long"]}, {"root": "UPDATE from haveSetCompressedSize to getExternalAttributes", "operations": ["UPD SimpleName: haveSetCompressedSize from haveSetCompressedSize to getExternalAttributes"]}, {"root": "UPDATE from performSetCompressedSize to setExternalAttributes", "operations": ["UPD SimpleName: performSetCompressedSize from performSetCompressedSize to setExternalAttributes", "UPD SimpleName: getSize from getSize to setExternalAttributes"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS Block to MethodDeclaration at 7"]}, {"root": "UPDATE from setComprSize to setUnixMode", "operations": ["UPD SimpleName: setComprSize from setComprSize to setUnixMode"]}, {"root": "UPDATE from setExternalAttributes to getUnixMode", "operations": ["UPD SimpleName: setExternalAttributes from setExternalAttributes to getUnixMode"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS InfixExpression: >> to ParenthesizedExpression at 0", "INS SimpleName: SHORT_SHIFT to InfixExpression: >> at 1", "INS NumberLiteral: 0 to ConditionalExpression at 1", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: SHORT_MASK to InfixExpression: & at 1", "INS MethodInvocation to InfixExpression: >> at 0", "INS SimpleName: getExternalAttributes to MethodInvocation at 0", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: PLATFORM_UNIX to InfixExpression: != at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: platform to InfixExpression: != at 0", "INS CastExpression to ConditionalExpression at 2", "INS PrimitiveType: int to CastExpression at 0"]}, {"root": "UPDATE from setExtraFields to getPlatform", "operations": ["UPD SimpleName: setExtraFields from setExtraFields to getPlatform"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleName: platform to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "UPDATE from setInternalAttributes to setPlatform", "operations": ["UPD SimpleName: setInternalAttributes from setInternalAttributes to setPlatform"]}, {"root": "UPDATE from long to void", "operations": ["UPD PrimitiveType: long from long to void"]}, {"root": "UPDATE from getCompressedSize to setExtraFields", "operations": ["UPD SimpleName: getCompressedSize from getCompressedSize to setExtraFields", "UPD SimpleName: size from size to setExtraFields"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: fields to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV ArrayType: ZipExtraField[] to MethodDeclaration at 2"]}, {"root": "UPDATE from getExternalAttributes to getExtraFields", "operations": ["UPD SimpleName: getExternalAttributes from getExternalAttributes to getExtraFields"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "UPDATE from Extension that adds better handling of extra fields and provides access to to Extension that adds better handling of extra fields and provides", "operations": ["UPD TextElement: Extension that adds better handling of extra fields and provides access to from Extension that adds better handling of extra fields and provides access to to Extension that adds better handling of extra fields and provides"]}, {"root": "UPDATE from the internal and external file attributes. to access to the internal and external file attributes.", "operations": ["UPD TextElement: the internal and external file attributes. from the internal and external file attributes. to access to the internal and external file attributes."]}, {"root": "UPDATE from c_setCompressedSizeMethod to PLATFORM_UNIX", "operations": ["UPD SimpleName: c_setCompressedSizeMethod from c_setCompressedSizeMethod to PLATFORM_UNIX"]}, {"root": "INS NumberLiteral: 3 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 3 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from c_lockReflection to PLATFORM_FAT", "operations": ["UPD SimpleName: c_lockReflection from c_lockReflection to PLATFORM_FAT"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from c_triedToGetMethod to SHORT_MASK", "operations": ["UPD SimpleName: c_triedToGetMethod from c_triedToGetMethod to SHORT_MASK"]}, {"root": "INS NumberLiteral: 0xFFFF to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0xFFFF to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_extraFields to SHORT_SHIFT", "operations": ["UPD SimpleName: m_extraFields from m_extraFields to SHORT_SHIFT"]}, {"root": "INS NumberLiteral: 16 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 16 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_internalAttributes to internalAttributes", "operations": ["UPD SimpleName: m_internalAttributes from m_internalAttributes to internalAttributes", "UPD SimpleName: c_setCompressedSizeMethod from c_setCompressedSizeMethod to internalAttributes"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_externalAttributes to externalAttributes", "operations": ["UPD SimpleName: m_externalAttributes from m_externalAttributes to externalAttributes"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from m_extraFields to extraFields", "operations": ["UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: entry from entry to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: m_compressedSize from m_compressedSize to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields", "UPD SimpleName: m_extraFields from m_extraFields to extraFields"]}, {"root": "INS NullLiteral to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "UPDATE from @exception to @throws", "operations": ["UPD TagElement: @exception from @exception to @throws", "UPD TagElement: @exception from @exception to @throws"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV IfStatement to Block at 2", "MOV SuperConstructorInvocation to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 3"]}, {"root": "UPDATE from @since to @param", "operations": ["UPD TagElement: @since from @since to @param", "UPD TagElement: @since from @since to @param"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 4"]}, {"root": "UPDATE from size to value", "operations": ["UPD SimpleName: size from size to value", "UPD SimpleName: size from size to value"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from size to mode", "operations": ["UPD SimpleName: size from size to mode", "UPD SimpleName: size from size to mode"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Unix permission. to TagElement at 0"]}, {"root": "UPDATE from @param to @return", "operations": ["UPD TagElement: @param from @param to @return"]}, {"root": "INS TagElement: @since to Javadoc at 2", "operations": ["INS TextElement:  Ant 1.6 to TagElement: @since at 0", "INS TagElement: @since to Javadoc at 2"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: by&quot; part of the central file header. to TagElement at 1", "INS TextElement: Platform specification to put into the &quot;version made to TagElement at 0"]}, {"root": "INS TagElement: @return to Javadoc at 1", "operations": ["INS TextElement: has been called, in which case PLATORM_UNIX will be returned. to TagElement: @return at 2", "INS TagElement: @link to TagElement: @return at 1", "INS SimpleName: setUnixMode to MemberRef at 0", "INS TextElement:  PLATFORM_FAT unless  to TagElement: @return at 0", "INS MemberRef to TagElement: @link at 0", "INS TagElement: @return to Javadoc at 1"]}, {"root": "INS TagElement: @since to Javadoc at 2", "operations": ["INS TagElement: @since to Javadoc at 2", "INS TextElement:  Ant 1.5.2 to TagElement: @since at 0"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: Set the platform (UNIX or FAT). to TagElement at 0"]}, {"root": "INS TagElement: @since to Javadoc at 2", "operations": ["INS TagElement: @since to Javadoc at 2", "INS TextElement:  1.9 to TagElement: @since at 0"]}, {"root": "UPDATE from value to platform", "operations": ["UPD SimpleName: value from value to platform", "UPD SimpleName: value from value to platform", "UPD SimpleName: value from value to platform", "UPD SimpleName: m_compressedSize from m_compressedSize to platform"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 4"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ArrayType: ZipExtraField[] to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "UPDATE from extraField to ze", "operations": ["UPD SimpleName: extraField from extraField to ze", "UPD SimpleName: extraField from extraField to ze", "UPD SimpleName: extraField from extraField to ze", "UPD SimpleName: extraField from extraField to ze"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: extraFields to Assignment: = at 0", "INS SimpleName: extraFields to InfixExpression: == at 0", "INS SimpleName: Vector to SimpleType: Vector at 0", "INS SimpleType: Vector to ClassInstanceCreation at 0", "INS InfixExpression: == to IfStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: ZipShort to SingleVariableDeclaration at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleType: Vector to ClassInstanceCreation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: extraFields to InfixExpression: == at 0", "INS SimpleName: Vector to SimpleType: Vector at 0", "INS IfStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: extraFields to Assignment: = at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS TagElement: @throws to Javadoc at 4", "operations": ["INS TagElement: @throws to Javadoc at 4", "INS SimpleName: RuntimeException to TagElement: @throws at 0", "INS TextElement:  on error to TagElement: @throws at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Object to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from  the name of entry to  the name of the entry", "operations": ["UPD TextElement:  the name of entry from  the name of entry to  the name of the entry"]}, {"root": "UPDATE from  the JDK ZipEntry to adapt to  the entry to get fields from", "operations": ["UPD TextElement:  the JDK ZipEntry to adapt from  the JDK ZipEntry to adapt to  the entry to get fields from", "UPD TextElement:  the entry to adapt from  the entry to adapt to  the entry to get fields from"]}, {"root": "UPDATE from  if can not create entry to  on error", "operations": ["UPD TextElement:  if can not create entry from  if can not create entry to  on error", "UPD TextElement:  if can not create entry from  if can not create entry to  on error"]}, {"root": "INS SimpleName: entry to SuperConstructorInvocation at 0", "operations": ["INS SimpleName: entry to SuperConstructorInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ZipEntry to VariableDeclarationStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: != at 1", "INS CastExpression to ConditionalExpression at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: Vector to SimpleType: Vector at 0", "INS SimpleType: Vector to CastExpression at 0", "INS QualifiedName: e.extraFields to Assignment: = at 0", "INS ConditionalExpression to Assignment: = at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: extraFields to InfixExpression: != at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from  The InternalAttributes value to  the internal file attributes", "operations": ["UPD TextElement:  The InternalAttributes value from  The InternalAttributes value to  the internal file attributes"]}, {"root": "INS SimpleName: value to TagElement: @since at 0", "operations": ["INS SimpleName: value to TagElement: @since at 0"]}, {"root": "UPDATE from  The new ComprSize value to  an <code>int</code> value", "operations": ["UPD TextElement:  The new ComprSize value from  The new ComprSize value to  an <code>int</code> value", "UPD TextElement:  1.2 from  1.2 to  an <code>int</code> value"]}, {"root": "UPDATE from  The ExternalAttributes value to  the external file attributes", "operations": ["UPD TextElement:  The ExternalAttributes value from  The ExternalAttributes value to  the external file attributes"]}, {"root": "INS SimpleName: externalAttributes to ReturnStatement at 0", "operations": ["INS SimpleName: externalAttributes to ReturnStatement at 0"]}, {"root": "UPDATE from  Description of Parameter to  an <code>long</code> value", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  an <code>long</code> value"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: externalAttributes to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: value to Assignment: = at 1"]}, {"root": "UPDATE from Make this class work in JDK 1.1 like a 1.2 class. <p> to Sets Unix permissions in a way that is understood by Info-Zip's", "operations": ["UPD TextElement: Make this class work in JDK 1.1 like a 1.2 class. <p> from Make this class work in JDK 1.1 like a 1.2 class. <p> to Sets Unix permissions in a way that is understood by Info-Zip's"]}, {"root": "UPDATE from This either stores the size for later usage or invokes setCompressedSize to unzip command.", "operations": ["UPD TextElement: This either stores the size for later usage or invokes setCompressedSize from This either stores the size for later usage or invokes setCompressedSize to unzip command."]}, {"root": "UPDATE from  1.2 to  Ant 1.5.2", "operations": ["UPD TextElement:  1.2 from  1.2 to  Ant 1.5.2"]}, {"root": "UPDATE from  The new ExternalAttributes value to  the unix permissions", "operations": ["UPD TextElement:  The new ExternalAttributes value from  The new ExternalAttributes value to  the unix permissions"]}, {"root": "UPDATE from  The new InternalAttributes value to  an <code>int</code> value - 0 is FAT, 3 is UNIX", "operations": ["UPD TextElement:  The new InternalAttributes value from  The new InternalAttributes value to  an <code>int</code> value - 0 is FAT, 3 is UNIX"]}, {"root": "INS SimpleName: fields to TagElement: @since at 0", "operations": ["INS SimpleName: fields to TagElement: @since at 0"]}, {"root": "UPDATE from  1.2 to  an array of extra fields", "operations": ["UPD TextElement:  1.2 from  1.2 to  an array of extra fields"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleType: Vector to ClassInstanceCreation at 0", "INS SimpleName: Vector to SimpleType: Vector at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: extraFields to Assignment: = at 0"]}, {"root": "UPDATE from  The ExtraFields value to  an array of the extra fields", "operations": ["UPD TextElement:  The ExtraFields value from  The ExtraFields value to  an array of the extra fields"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: ZipExtraField[] to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from m_internalAttributes to result", "operations": ["UPD SimpleName: m_internalAttributes from m_internalAttributes to result"]}, {"root": "UPDATE from Adds an extra fields - replacing an already present extra field of the to Adds an extra fields - replacing an already present extra field", "operations": ["UPD TextElement: Adds an extra fields - replacing an already present extra field of the from Adds an extra fields - replacing an already present extra field of the to Adds an extra fields - replacing an already present extra field"]}, {"root": "UPDATE from same type. to of the same type.", "operations": ["UPD TextElement: same type. from same type. to of the same type."]}, {"root": "UPDATE from  The feature to be added to the ExtraField attribute to  an extra field", "operations": ["UPD TextElement:  The feature to be added to the ExtraField attribute from  The feature to be added to the ExtraField attribute to  an extra field"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ZipShort to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "UPDATE from  Description of Parameter to  the type of extra field to remove", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  the type of extra field to remove"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "UPDATE from  The new Extra value to  an array of bytes to be parsed into extra fields", "operations": ["UPD TextElement:  The new Extra value from  The new Extra value to  an array of bytes to be parsed into extra fields"]}, {"root": "UPDATE from  if fail to set extra data to  if the bytes cannot be parsed", "operations": ["UPD TextElement:  if fail to set extra data from  if fail to set extra data to  if the bytes cannot be parsed"]}, {"root": "UPDATE from  seems to access the extra data directly, to  seems to access the extra data", "operations": ["UPD TextElement:  seems to access the extra data directly, from  seems to access the extra data directly, to  seems to access the extra data"]}, {"root": "UPDATE from so overriding getExtra doesn't help - we need to modify super's data to directly, so overriding getExtra doesn't help - we need to", "operations": ["UPD TextElement: so overriding getExtra doesn't help - we need to modify super's data from so overriding getExtra doesn't help - we need to modify super's data to directly, so overriding getExtra doesn't help - we need to"]}, {"root": "UPDATE from directly. to modify super's data directly.", "operations": ["UPD TextElement: directly. from directly. to modify super's data directly."]}, {"root": "UPDATE from  The LocalFileDataExtra value to  the extra data for local file", "operations": ["UPD TextElement:  The LocalFileDataExtra value from  The LocalFileDataExtra value to  the extra data for local file"]}, {"root": "UPDATE from  The CentralDirectoryExtra value to  the central directory extra data", "operations": ["UPD TextElement:  The CentralDirectoryExtra value from  The CentralDirectoryExtra value to  the central directory extra data"]}, {"root": "UPDATE from entry to e", "operations": ["UPD SimpleName: entry from entry to e", "UPD SimpleName: entry from entry to e", "UPD SimpleName: setSize from setSize to e"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: entry to MethodInvocation at 0", "MOV SimpleName: getTime to MethodInvocation at 1"]}, {"root": "UPDATE from getTime to setInternalAttributes", "operations": ["UPD SimpleName: getTime from getTime to setInternalAttributes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: entry to MethodInvocation at 0", "MOV SimpleName: getSize to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: value to Assignment: = at 1", "operations": ["INS SimpleName: value to Assignment: = at 1"]}, {"root": "INS SimpleName: setExternalAttributes to MethodInvocation at 0", "operations": ["INS SimpleName: setExternalAttributes to MethodInvocation at 0"]}, {"root": "INS InfixExpression: | to MethodInvocation at 1", "operations": ["INS ConditionalExpression to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: | at 1", "INS NumberLiteral: 0x10 to ConditionalExpression at 1", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS InfixExpression: == to ConditionalExpression at 0", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS NumberLiteral: 0200 to InfixExpression: & at 1", "INS NumberLiteral: 0 to ConditionalExpression at 2", "INS SimpleName: SHORT_SHIFT to InfixExpression: << at 1", "INS ParenthesizedExpression to InfixExpression: | at 0", "INS SimpleName: mode to InfixExpression: << at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS SimpleName: isDirectory to MethodInvocation at 0", "INS NumberLiteral: 0 to ConditionalExpression at 2", "INS NumberLiteral: 1 to ConditionalExpression at 1", "INS InfixExpression: | to MethodInvocation at 1", "INS SimpleName: mode to InfixExpression: & at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS MethodInvocation to ConditionalExpression at 0", "INS ParenthesizedExpression to InfixExpression: | at 2"]}, {"root": "INS SimpleName: PLATFORM_UNIX to Assignment: = at 1", "operations": ["INS SimpleName: PLATFORM_UNIX to Assignment: = at 1"]}, {"root": "UPDATE from  The new ExtraFields value to  setUnixMode", "operations": ["UPD TextElement:  The new ExtraFields value from  The new ExtraFields value to  setUnixMode"]}, {"root": "MOVE from TagElement: @link", "operations": ["MOV TextElement:  The new ExtraFields value to TagElement: @link at 1"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: platform to FieldAccess at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toArray to MethodInvocation at 1", "MOV SimpleName: m_extraFields to MethodInvocation at 0", "MOV SimpleName: result to MethodInvocation at 2"]}, {"root": "UPDATE from toArray to copyInto", "operations": ["UPD SimpleName: toArray from toArray to copyInto"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "operations": ["INS SimpleName: fieldsSize to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: extraFields to MethodInvocation at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV PrefixExpression: ! to InfixExpression: && at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to IfStatement at 0"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "operations": ["INS SimpleName: size to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "INS SimpleName: extraFields to MethodInvocation at 0", "INS SimpleName: fieldsSize to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV PrefixExpression: ! to InfixExpression: && at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: ZipEntry to CastExpression at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SuperMethodInvocation to CastExpression at 1"]}, {"root": "INS ArrayCreation to ReturnStatement at 0", "operations": ["INS ArrayCreation to ReturnStatement at 0", "INS NumberLiteral: 0 to ArrayCreation at 1"]}, {"root": "UPDATE from getHeaderID to getHeaderId", "operations": ["UPD SimpleName: getHeaderID from getHeaderID to getHeaderId", "UPD SimpleName: getHeaderID from getHeaderID to getHeaderId", "UPD SimpleName: getHeaderID from getHeaderID to getHeaderId"]}, {"root": "INS SimpleName: fieldsSize to InfixExpression: < at 1", "operations": ["INS SimpleName: fieldsSize to InfixExpression: < at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS SimpleName: fieldsSize to InfixExpression: < at 1", "operations": ["INS SimpleName: fieldsSize to InfixExpression: < at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Exception to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from add to addElement", "operations": ["UPD SimpleName: add from add to addElement", "UPD SimpleName: add from add to addElement"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: ZipExtraField[] to ArrayCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV SimpleName: type to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMethod to MethodInvocation at 1", "MOV SimpleName: entry to MethodInvocation at 0"]}, {"root": "UPDATE from getMethod to clone", "operations": ["UPD SimpleName: getMethod from getMethod to clone"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getHeaderID to MethodInvocation at 1"]}, {"root": "UPDATE from set to setElementAt", "operations": ["UPD SimpleName: set from set to setElementAt"]}, {"root": "INS SimpleName: ze to MethodInvocation at 2", "operations": ["INS SimpleName: ze to MethodInvocation at 2"]}, {"root": "UPDATE from remove to removeElementAt", "operations": ["UPD SimpleName: remove from remove to removeElementAt"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: ZipExtraField to CastExpression at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV MethodInvocation to CastExpression at 1", "MOV SimpleType: ZipExtraField to CastExpression at 0"]}, {"root": "UPDATE from get to elementAt", "operations": ["UPD SimpleName: get from get to elementAt", "UPD SimpleName: get from get to elementAt"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Helper for JDK 1.1", "DEL TagElement: @since", "DEL TextElement:  1.2", "DEL TagElement", "DEL Javadoc"]}, {"root": "DEL SimpleType: Method", "operations": ["DEL SimpleType: Method", "DEL SimpleName: Method"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @since", "DEL Javadoc", "DEL TagElement", "DEL TextElement: Helper for JDK 1.1", "DEL TextElement:  1.2"]}, {"root": "DEL SimpleType: Object", "operations": ["DEL SimpleName: Object", "DEL SimpleType: Object"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  1.2", "DEL TagElement", "DEL Javadoc", "DEL TextElement: Helper for JDK 1.1", "DEL TagElement: @since"]}, {"root": "DEL SimpleType: ArrayList", "operations": ["DEL SimpleName: ArrayList", "DEL SimpleType: ArrayList"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: ArrayList", "DEL ClassInstanceCreation", "DEL SimpleName: ArrayList"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @since", "DEL Javadoc", "DEL TextElement:  1.2", "DEL TextElement: Helper for JDK 1.1 <-> 1.2 incompatibility.", "DEL TagElement"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getName", "DEL SimpleName: entry"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: setCrc", "DEL SimpleName: setComprSize", "DEL NumberLiteral: 0", "DEL SimpleName: crc", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: crc", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: cSize", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL MethodDeclaration", "DEL SimpleName: getCompressedSize", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL SimpleName: size", "DEL IfStatement", "DEL Block", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL SimpleName: setComment", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL InfixExpression: >", "DEL IfStatement", "DEL SimpleName: crc", "DEL InfixExpression: >", "DEL NumberLiteral: 0", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL SimpleName: getComment", "DEL Modifier: final", "DEL InfixExpression: >", "DEL SimpleName: cSize", "DEL Block", "DEL PrimitiveType: long", "DEL VariableDeclarationFragment", "DEL SimpleName: cSize", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getCrc"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: setMethod"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: setTime", "DEL MethodInvocation"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: Try to get a handle to the setCompressedSize method."]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL MethodInvocation", "operations": ["DEL StringLiteral: \"setCompressedSize\"", "DEL QualifiedName: Long.TYPE", "DEL SimpleName: getMethod", "DEL ArrayCreation", "DEL ArrayInitializer", "DEL ArrayType: Class[]", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL SimpleType: java.util.zip.ZipEntry", "DEL SimpleName: Class", "DEL TypeLiteral", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleType: Class"]}, {"root": "DEL SimpleName: checkSCS", "operations": ["DEL SimpleName: checkSCS"]}, {"root": "DEL Block", "operations": ["DEL TryStatement", "DEL Block", "DEL SimpleName: NoSuchMethodException", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL Block", "DEL BooleanLiteral: true", "DEL Block", "DEL CatchClause", "DEL SimpleName: c_triedToGetMethod", "DEL IfStatement", "DEL SimpleName: c_lockReflection", "DEL SimpleType: NoSuchMethodException", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL SynchronizedStatement", "DEL SimpleName: c_triedToGetMethod", "DEL Assignment: =", "DEL SimpleName: nse"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TagElement", "DEL TextElement:  Description of the Returned Value", "DEL TextElement:  1.2", "DEL TagElement: @since", "DEL TextElement: Are we running JDK 1.2 or higher?", "DEL TagElement: @return"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: checkSCS", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: c_setCompressedSizeMethod"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: Invoke setCompressedSize via reflection."]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL TextElement:  Description of Parameter", "DEL SimpleName: entry"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: entry", "DEL Modifier: final", "DEL SimpleName: ZipEntry", "DEL SimpleType: ZipEntry", "DEL SingleVariableDeclaration"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: c_setCompressedSizeMethod", "DEL SimpleName: s", "DEL SimpleName: invoke", "DEL SimpleName: entry"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ArrayType: Long[]", "DEL ArrayInitializer", "DEL Modifier: final", "DEL SimpleName: message", "DEL SimpleType: Throwable", "DEL SimpleName: getMessage", "DEL SimpleName: nested", "DEL ClassInstanceCreation", "DEL SimpleName: RuntimeException", "DEL SimpleName: getMessage", "DEL SimpleName: Long", "DEL InfixExpression: +", "DEL SimpleName: nested", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL Dimension", "DEL SimpleType: Throwable", "DEL StringLiteral: \"of \"", "DEL SimpleName: message", "DEL SingleVariableDeclaration", "DEL SimpleName: getTargetException", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TryStatement", "DEL SimpleName: message", "DEL VariableDeclarationFragment", "DEL SimpleName: s", "DEL SimpleName: entry", "DEL SimpleType: InvocationTargetException", "DEL SimpleType: Long", "DEL SimpleType: RuntimeException", "DEL ThrowStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"Exception setting the compressed size \"", "DEL StringLiteral: \"Exception setting the compressed size \"", "DEL Modifier: final", "DEL ThrowStatement", "DEL SimpleName: Long", "DEL VariableDeclarationStatement", "DEL SimpleName: Throwable", "DEL SimpleName: message", "DEL Modifier: final", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: Throwable", "DEL CatchClause", "DEL Block", "DEL SimpleName: RuntimeException", "DEL SimpleName: t", "DEL StringLiteral: \": \"", "DEL InfixExpression: +", "DEL StringLiteral: \"of \"", "DEL StringLiteral: \": \"", "DEL SimpleName: t", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: InvocationTargetException", "DEL VariableDeclarationStatement", "DEL SimpleType: Long", "DEL SimpleType: RuntimeException", "DEL SimpleName: entry", "DEL SimpleName: size", "DEL SimpleName: ite", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: ite", "DEL Block"]}, {"root": "DEL TextElement: via reflection.</p>", "operations": ["DEL TextElement: via reflection.</p>"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: performSetCompressedSize", "operations": ["DEL SimpleName: performSetCompressedSize"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: size", "operations": ["DEL SimpleName: size"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: Long", "DEL SimpleType: Long", "DEL SimpleName: size"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: haveSetCompressedSize"]}, {"root": "DEL SimpleName: externalAttributes", "operations": ["DEL SimpleName: externalAttributes"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL PrimitiveType: long", "DEL SimpleName: externalAttributes"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL SimpleName: m_externalAttributes", "DEL SimpleName: externalAttributes", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL TagElement: @param", "operations": ["DEL SimpleName: fields", "DEL TagElement: @param"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: fields"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: m_internalAttributes", "operations": ["DEL SimpleName: m_internalAttributes"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: Override to make this class work in JDK 1.1 like a 1.2 class."]}, {"root": "DEL TagElement: @return", "operations": ["DEL TextElement:  The CompressedSize value", "DEL TagElement: @return"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: m_extraFields", "DEL MethodInvocation", "DEL SimpleName: clear"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: longValue", "DEL SuperMethodInvocation", "DEL InfixExpression: !=", "DEL IfStatement", "DEL ReturnStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: getCompressedSize", "DEL Block", "DEL SimpleName: m_compressedSize", "DEL SimpleName: m_compressedSize", "DEL Block", "DEL ReturnStatement"]}, {"root": "DEL SimpleName: m_externalAttributes", "operations": ["DEL SimpleName: m_externalAttributes"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodDeclaration", "DEL PrimitiveType: long"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getExtraFields", "DEL Modifier: public", "DEL Block", "DEL MethodInvocation", "DEL CastExpression", "DEL ReturnStatement", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: getInternalAttributes"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: size", "DEL SimpleName: m_extraFields", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: extraField", "operations": ["DEL SimpleName: extraField"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: ZipExtraField", "DEL SimpleName: other", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: ZipExtraField", "DEL CastExpression", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: other", "DEL IfStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: printStackTrace", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement:  Description of the Returned Value", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL SimpleName: e", "DEL TagElement", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: setExternalAttributes", "DEL NullLiteral", "DEL QualifiedName: java.util.zip.ZipEntry", "DEL ExpressionStatement", "DEL Assignment: =", "DEL TextElement: Overwrite clone", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: setExtraFields", "DEL Modifier: public", "DEL SimpleName: setInternalAttributes", "DEL ExpressionStatement", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: entry", "DEL Block", "DEL SimpleName: entry", "DEL TryStatement", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: entry", "DEL SimpleName: entry", "DEL SimpleName: entry", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleType: java.util.zip.ZipEntry", "DEL SimpleName: clone"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: m_extraFields"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"ZipEntry_diff": {"operations": ["Move MethodDeclaration(551) into TypeDeclaration: class(975) at 31", "Move MethodDeclaration(638) into TypeDeclaration: class(975) at 32", "Move MethodDeclaration(764) into TypeDeclaration: class(975) at 31", "Update QualifiedName: java.util.ArrayList(6) to java.util.Vector", "Insert SimpleType: Cloneable(15) into TypeDeclaration: class(975) at 4", "Insert FieldDeclaration(59) into TypeDeclaration: class(975) at 10", "Insert FieldDeclaration(79) into TypeDeclaration: class(975) at 13", "Insert MethodDeclaration(145) into TypeDeclaration: class(975) at 15", "Insert MethodDeclaration(198) into TypeDeclaration: class(975) at 17", "Insert MethodDeclaration(255) into TypeDeclaration: class(975) at 18", "Insert MethodDeclaration(269) into TypeDeclaration: class(975) at 19", "Insert MethodDeclaration(534) into TypeDeclaration: class(975) at 28", "Insert MethodDeclaration(871) into TypeDeclaration: class(975) at 35", "Insert MethodDeclaration(892) into TypeDeclaration: class(975) at 36", "Insert MethodDeclaration(910) into TypeDeclaration: class(975) at 37", "Insert MethodDeclaration(931) into TypeDeclaration: class(975) at 38", "Insert MethodDeclaration(949) into TypeDeclaration: class(975) at 39", "Insert MethodDeclaration(974) into TypeDeclaration: class(975) at 40", "Insert SimpleName: Cloneable(14) into SimpleType: Cloneable(15) at 0", "Update Modifier: private(23) to public", "Insert Modifier: final(18) into FieldDeclaration(23) at 2", "Insert PrimitiveType: int(19) into FieldDeclaration(23) at 3", "Update Modifier: private(35) to public", "Insert PrimitiveType: int(27) into FieldDeclaration(31) at 3", "Insert Modifier: final(34) into FieldDeclaration(39) at 2", "Update PrimitiveType: boolean(53) to int", "Insert Modifier: static(41) into FieldDeclaration(47) at 1", "Insert PrimitiveType: int(43) into FieldDeclaration(47) at 3", "Insert Modifier: private(54) into FieldDeclaration(59) at 0", "Insert PrimitiveType: int(55) into FieldDeclaration(59) at 1", "Insert VariableDeclarationFragment(58) into FieldDeclaration(59) at 2", "Update SimpleType: Long(84) to Vector", "Insert Modifier: private(73) into FieldDeclaration(79) at 0", "Move SimpleType: String(100) into FieldDeclaration(79) at 1", "Insert VariableDeclarationFragment(78) into FieldDeclaration(79) at 2", "Move Javadoc(117) into MethodDeclaration(145) at 0", "Move Modifier: public(118) into MethodDeclaration(145) at 1", "Move SimpleName: ZipEntry(119) into MethodDeclaration(145) at 2", "Move SingleVariableDeclaration(123) into MethodDeclaration(145) at 3", "Move SimpleType: ZipException(125) into MethodDeclaration(145) at 4", "Insert Block(144) into MethodDeclaration(145) at 5", "Insert Javadoc(192) into MethodDeclaration(198) at 0", "Insert Modifier: protected(193) into MethodDeclaration(198) at 1", "Insert SimpleName: ZipEntry(194) into MethodDeclaration(198) at 2", "Insert Block(197) into MethodDeclaration(198) at 3", "Insert Javadoc(205) into MethodDeclaration(255) at 0", "Insert Modifier: public(206) into MethodDeclaration(255) at 1", "Move SimpleType: Object(867) into MethodDeclaration(255) at 2", "Insert SimpleName: clone(209) into MethodDeclaration(255) at 3", "Insert Block(254) into MethodDeclaration(255) at 4", "Move Javadoc(724) into MethodDeclaration(269) at 0", "Insert Modifier: public(263) into MethodDeclaration(269) at 1", "Insert PrimitiveType: int(264) into MethodDeclaration(269) at 2", "Insert SimpleName: getInternalAttributes(265) into MethodDeclaration(269) at 3", "Insert Block(268) into MethodDeclaration(269) at 4", "Update Modifier: static(278) to public", "Insert SimpleName: setInternalAttributes(280) into MethodDeclaration(289) at 3", "Insert SingleVariableDeclaration(283) into MethodDeclaration(289) at 4", "Insert Block(288) into MethodDeclaration(289) at 5", "Move Javadoc(669) into MethodDeclaration(303) at 0", "Update Modifier: static(326) to public", "Update PrimitiveType: boolean(327) to long", "Update SimpleName: haveSetCompressedSize(328) to getExternalAttributes", "Update Modifier: static(350) to public", "Update SimpleName: performSetCompressedSize(352) to setExternalAttributes", "Insert Block(322) into MethodDeclaration(323) at 5", "Update SimpleName: setComprSize(460) to setUnixMode", "Update PrimitiveType: void(493) to int", "Update SimpleName: setExternalAttributes(494) to getUnixMode", "Insert Block(395) into MethodDeclaration(396) at 4", "Update PrimitiveType: void(561) to int", "Update SimpleName: setExtraFields(562) to getPlatform", "Insert Block(415) into MethodDeclaration(416) at 4", "Update Modifier: public(606) to protected", "Update SimpleName: setInternalAttributes(608) to setPlatform", "Update PrimitiveType: long(647) to void", "Update SimpleName: getCompressedSize(648) to setExtraFields", "Insert SingleVariableDeclaration(455) into MethodDeclaration(485) at 4", "Move Block(596) into MethodDeclaration(485) at 5", "Move Javadoc(683) into MethodDeclaration(534) at 0", "Move Modifier: public(670) into MethodDeclaration(534) at 1", "Move ArrayType: ZipExtraField[](688) into MethodDeclaration(534) at 2", "Update SimpleName: getExternalAttributes(672) to getExtraFields", "Move SimpleName: getExternalAttributes(672) into MethodDeclaration(534) at 3", "Insert Block(533) into MethodDeclaration(534) at 4", "Insert Javadoc(859) into MethodDeclaration(871) at 0", "Insert Modifier: public(860) into MethodDeclaration(871) at 1", "Insert PrimitiveType: void(861) into MethodDeclaration(871) at 2", "Insert SimpleName: setComprSize(862) into MethodDeclaration(871) at 3", "Insert SingleVariableDeclaration(865) into MethodDeclaration(871) at 4", "Insert Block(870) into MethodDeclaration(871) at 5", "Insert Javadoc(878) into MethodDeclaration(892) at 0", "Insert Modifier: public(879) into MethodDeclaration(892) at 1", "Move SimpleType: String(425) into MethodDeclaration(892) at 2", "Insert SimpleName: getName(882) into MethodDeclaration(892) at 3", "Insert Block(891) into MethodDeclaration(892) at 4", "Insert Javadoc(899) into MethodDeclaration(910) at 0", "Insert Modifier: public(900) into MethodDeclaration(910) at 1", "Insert PrimitiveType: boolean(901) into MethodDeclaration(910) at 2", "Insert SimpleName: isDirectory(902) into MethodDeclaration(910) at 3", "Insert Block(909) into MethodDeclaration(910) at 4", "Insert Javadoc(916) into MethodDeclaration(931) at 0", "Insert Modifier: protected(917) into MethodDeclaration(931) at 1", "Insert PrimitiveType: void(918) into MethodDeclaration(931) at 2", "Insert SimpleName: setName(919) into MethodDeclaration(931) at 3", "Insert SingleVariableDeclaration(923) into MethodDeclaration(931) at 4", "Insert Block(930) into MethodDeclaration(931) at 5", "Insert Javadoc(939) into MethodDeclaration(949) at 0", "Insert Modifier: public(940) into MethodDeclaration(949) at 1", "Insert PrimitiveType: int(941) into MethodDeclaration(949) at 2", "Insert SimpleName: hashCode(942) into MethodDeclaration(949) at 3", "Insert Block(948) into MethodDeclaration(949) at 4", "Insert Javadoc(960) into MethodDeclaration(974) at 0", "Insert Modifier: public(961) into MethodDeclaration(974) at 1", "Insert PrimitiveType: boolean(962) into MethodDeclaration(974) at 2", "Insert SimpleName: equals(963) into MethodDeclaration(974) at 3", "Insert SingleVariableDeclaration(967) into MethodDeclaration(974) at 4", "Insert Block(973) into MethodDeclaration(974) at 5", "Update TextElement: Extension that adds better handling of extra fields and provides access to(10) to Extension that adds better handling of extra fields and provides", "Update TextElement: the internal and external file attributes.(11) to access to the internal and external file attributes.", "Update SimpleName: c_setCompressedSizeMethod(27) to PLATFORM_UNIX", "Insert NumberLiteral: 3(21) into VariableDeclarationFragment(22) at 1", "Update SimpleName: c_lockReflection(40) to PLATFORM_FAT", "Insert NumberLiteral: 0(29) into VariableDeclarationFragment(30) at 1", "Update SimpleName: c_triedToGetMethod(54) to SHORT_MASK", "Insert NumberLiteral: 0xFFFF(37) into VariableDeclarationFragment(38) at 1", "Update SimpleName: m_extraFields(61) to SHORT_SHIFT", "Insert NumberLiteral: 16(45) into VariableDeclarationFragment(46) at 1", "Update SimpleName: m_internalAttributes(69) to internalAttributes", "Insert NumberLiteral: 0(51) into VariableDeclarationFragment(52) at 1", "Insert SimpleName: platform(56) into VariableDeclarationFragment(58) at 0", "Insert SimpleName: PLATFORM_FAT(57) into VariableDeclarationFragment(58) at 1", "Update SimpleName: m_externalAttributes(74) to externalAttributes", "Insert NumberLiteral: 0(63) into VariableDeclarationFragment(64) at 1", "Update SimpleName: Long(83) to Vector", "Update SimpleName: m_compressedSize(85) to extraFields", "Insert NullLiteral(70) into VariableDeclarationFragment(71) at 1", "Insert SimpleName: name(76) into VariableDeclarationFragment(78) at 0", "Insert NullLiteral(77) into VariableDeclarationFragment(78) at 1", "Move SimpleType: String(398) into SingleVariableDeclaration(93) at 0", "Move TagElement: @since(236) into Javadoc(108) at 2", "Update TagElement: @exception(114) to @throws", "Move SuperConstructorInvocation(129) into Block(144) at 0", "Move VariableDeclarationStatement(208) into Block(144) at 1", "Move IfStatement(224) into Block(144) at 2", "Update TagElement: @exception(234) to @throws", "Move TagElement: @since(116) into Javadoc(156) at 3", "Insert TagElement: @since(191) into Javadoc(192) at 0", "Insert SuperConstructorInvocation(196) into Block(197) at 0", "Insert TagElement(200) into Javadoc(205) at 0", "Insert TagElement: @return(202) into Javadoc(205) at 1", "Move TagElement: @since(863) into Javadoc(205) at 2", "Insert VariableDeclarationStatement(219) into Block(254) at 0", "Move ExpressionStatement(141) into Block(254) at 1", "Move ExpressionStatement(147) into Block(254) at 2", "Insert ExpressionStatement(245) into Block(254) at 3", "Move ExpressionStatement(162) into Block(254) at 4", "Insert ReturnStatement(253) into Block(254) at 5", "Insert ReturnStatement(267) into Block(268) at 0", "Move TagElement(599) into Javadoc(277) at 0", "Update TagElement: @since(275) to @param", "Move TagElement: @since(604) into Javadoc(277) at 3", "Insert PrimitiveType: int(281) into SingleVariableDeclaration(283) at 0", "Insert SimpleName: value(282) into SingleVariableDeclaration(283) at 1", "Move ExpressionStatement(303) into Block(288) at 0", "Move TagElement(485) into Javadoc(311) at 0", "Move TagElement: @since(490) into Javadoc(311) at 4", "Update SimpleName: size(360) to value", "Move ExpressionStatement(380) into Block(322) at 0", "Update PrimitiveType: long(462) to int", "Update SimpleName: size(463) to mode", "Move ExpressionStatement(471) into Block(367) at 0", "Move ExpressionStatement(479) into Block(367) at 1", "Insert TagElement(370) into Javadoc(375) at 0", "Update TagElement: @param(488) to @return", "Insert TagElement: @since(374) into Javadoc(375) at 2", "Insert ReturnStatement(394) into Block(395) at 0", "Insert TagElement(399) into Javadoc(409) at 0", "Insert TagElement: @return(406) into Javadoc(409) at 1", "Insert TagElement: @since(408) into Javadoc(409) at 2", "Insert ReturnStatement(414) into Block(415) at 0", "Insert TagElement(418) into Javadoc(424) at 0", "Insert TagElement: @since(423) into Javadoc(424) at 2", "Update SimpleName: value(611) to platform", "Move TagElement(553) into Javadoc(446) at 0", "Update TagElement: @since(644) to @param", "Move TagElement: @since(558) into Javadoc(446) at 4", "Move ArrayType: ZipExtraField[](694) into SingleVariableDeclaration(455) at 0", "Insert SimpleName: fields(454) into SingleVariableDeclaration(455) at 1", "Insert IfStatement(510) into Block(533) at 0", "Move VariableDeclarationStatement(705) into Block(533) at 1", "Insert ExpressionStatement(530) into Block(533) at 2", "Move ReturnStatement(729) into Block(533) at 3", "Update SimpleName: extraField(780) to ze", "Insert IfStatement(561) into Block(632) at 0", "Move SimpleType: ZipShort(784) into SingleVariableDeclaration(648) at 0", "Insert IfStatement(659) into Block(720) at 0", "Insert TagElement: @throws(734) into Javadoc(735) at 4", "Insert TagElement(850) into Javadoc(859) at 0", "Insert TagElement: @param(853) into Javadoc(859) at 1", "Insert TagElement: @deprecated(856) into Javadoc(859) at 2", "Move TagElement: @since(347) into Javadoc(859) at 3", "Insert PrimitiveType: long(863) into SingleVariableDeclaration(865) at 0", "Insert SimpleName: size(864) into SingleVariableDeclaration(865) at 1", "Insert ExpressionStatement(869) into Block(870) at 0", "Insert TagElement(873) into Javadoc(878) at 0", "Insert TagElement: @return(875) into Javadoc(878) at 1", "Insert TagElement: @since(877) into Javadoc(878) at 2", "Insert ReturnStatement(890) into Block(891) at 0", "Insert TagElement(894) into Javadoc(899) at 0", "Insert TagElement: @return(896) into Javadoc(899) at 1", "Insert TagElement: @since(898) into Javadoc(899) at 2", "Insert ReturnStatement(908) into Block(909) at 0", "Insert TagElement(912) into Javadoc(916) at 0", "Insert TagElement: @param(915) into Javadoc(916) at 1", "Insert SimpleType: String(921) into SingleVariableDeclaration(923) at 0", "Insert SimpleName: name(922) into SingleVariableDeclaration(923) at 1", "Insert ExpressionStatement(929) into Block(930) at 0", "Insert TagElement(934) into Javadoc(939) at 0", "Insert TagElement: @return(936) into Javadoc(939) at 1", "Insert TagElement: @since(938) into Javadoc(939) at 2", "Insert ReturnStatement(947) into Block(948) at 0", "Insert TagElement(952) into Javadoc(960) at 0", "Insert TagElement: @param(955) into Javadoc(960) at 1", "Insert TagElement: @return(957) into Javadoc(960) at 2", "Insert TagElement: @since(959) into Javadoc(960) at 3", "Move SimpleType: Object(42) into SingleVariableDeclaration(967) at 0", "Insert SimpleName: o(966) into SingleVariableDeclaration(967) at 1", "Insert ReturnStatement(972) into Block(973) at 0", "Update TextElement:  the name of entry(91) to  the name of the entry", "Update TextElement:  the JDK ZipEntry to adapt(110) to  the entry to get fields from", "Update TextElement:  if can not create entry(113) to  on error", "Insert SimpleName: entry(117) into SuperConstructorInvocation(118) at 0", "Update TextElement:  the entry to adapt(230) to  the entry to get fields from", "Update TextElement:  if can not create entry(233) to  on error", "Insert TextElement:  1.9(190) into TagElement: @since(191) at 0", "Insert StringLiteral: \"\"(195) into SuperConstructorInvocation(196) at 0", "Insert TextElement: Overwrite clone.(199) into TagElement(200) at 0", "Insert TextElement:  a cloned copy of this ZipEntry(201) into TagElement: @return(202) at 0", "Move SimpleType: ZipEntry(870) into VariableDeclarationStatement(219) at 0", "Insert VariableDeclarationFragment(218) into VariableDeclarationStatement(219) at 1", "Insert Assignment: =(232) into ExpressionStatement(233) at 0", "Insert MethodInvocation(238) into ExpressionStatement(239) at 0", "Insert MethodInvocation(244) into ExpressionStatement(245) at 0", "Insert SimpleName: e(252) into ReturnStatement(253) at 0", "Update TextElement:  The InternalAttributes value(720) to  the internal file attributes", "Insert SimpleName: internalAttributes(266) into ReturnStatement(267) at 0", "Insert SimpleName: value(272) into TagElement: @param(274) at 0", "Update TextElement:  1.2(274) to  an <code>int</code> value", "Update TextElement:  The ExternalAttributes value(665) to  the external file attributes", "Insert SimpleName: externalAttributes(300) into ReturnStatement(301) at 0", "Update SimpleName: size(343) to value", "Update TextElement:  Description of Parameter(344) to  an <code>long</code> value", "Insert Assignment: =(320) into ExpressionStatement(321) at 0", "Update TextElement: Make this class work in JDK 1.1 like a 1.2 class. <p>(448) to Sets Unix permissions in a way that is understood by Info-Zip's", "Update TextElement: This either stores the size for later usage or invokes setCompressedSize(449) to unzip command.", "Update SimpleName: size(452) to mode", "Update TextElement:  The new ComprSize value(453) to  an <code>int</code> value", "Update TextElement:  1.2(455) to  Ant 1.5.2", "Insert TextElement: Unix permission.(369) into TagElement(370) at 0", "Update TextElement:  The new ExternalAttributes value(487) to  the unix permissions", "Insert TextElement:  Ant 1.6(373) into TagElement: @since(374) at 0", "Insert ConditionalExpression(393) into ReturnStatement(394) at 0", "Insert TextElement: Platform specification to put into the &quot;version made(397) into TagElement(399) at 0", "Insert TextElement: by&quot; part of the central file header.(398) into TagElement(399) at 1", "Insert TextElement:  PLATFORM_FAT unless (400) into TagElement: @return(406) at 0", "Insert TagElement: @link(404) into TagElement: @return(406) at 1", "Insert TextElement: has been called, in which case PLATORM_UNIX will be returned.(405) into TagElement: @return(406) at 2", "Insert TextElement:  Ant 1.5.2(407) into TagElement: @since(408) at 0", "Insert SimpleName: platform(413) into ReturnStatement(414) at 0", "Insert TextElement: Set the platform (UNIX or FAT).(417) into TagElement(418) at 0", "Update SimpleName: value(600) to platform", "Update TextElement:  The new InternalAttributes value(601) to  an <code>int</code> value - 0 is FAT, 3 is UNIX", "Insert TextElement:  1.9(422) into TagElement: @since(423) at 0", "Insert SimpleName: fields(441) into TagElement: @param(443) at 0", "Update TextElement:  1.2(643) to  an array of extra fields", "Insert Assignment: =(460) into ExpressionStatement(461) at 0", "Update TextElement:  The ExtraFields value(679) to  an array of the extra fields", "Insert InfixExpression: ==(501) into IfStatement(510) at 0", "Insert Block(509) into IfStatement(510) at 1", "Move ArrayType: ZipExtraField[](709) into VariableDeclarationStatement(525) at 0", "Insert MethodInvocation(529) into ExpressionStatement(530) at 0", "Update SimpleName: m_internalAttributes(728) to result", "Update TextElement: Adds an extra fields - replacing an already present extra field of the(765) to Adds an extra fields - replacing an already present extra field", "Update TextElement: same type.(766) to of the same type.", "Update SimpleName: extraField(768) to ze", "Update TextElement:  The feature to be added to the ExtraField attribute(769) to  an extra field", "Insert InfixExpression: ==(553) into IfStatement(561) at 0", "Insert Block(560) into IfStatement(561) at 1", "Move SimpleType: ZipShort(936) into VariableDeclarationStatement(569) at 0", "Move PostfixExpression: ++(958) into ForStatement(619) at 2", "Update TextElement:  Description of Parameter(926) to  the type of extra field to remove", "Insert InfixExpression: ==(651) into IfStatement(659) at 0", "Insert Block(658) into IfStatement(659) at 1", "Move PostfixExpression: ++(810) into ForStatement(708) at 2", "Update TextElement:  The new Extra value(508) to  an array of bytes to be parsed into extra fields", "Update TextElement:  if fail to set extra data(511) to  if the bytes cannot be parsed", "Insert SimpleName: RuntimeException(732) into TagElement: @throws(734) at 0", "Insert TextElement:  on error(733) into TagElement: @throws(734) at 1", "Update TextElement:  seems to access the extra data directly,(1002) to  seems to access the extra data", "Update TextElement: so overriding getExtra doesn't help - we need to modify super's data(1003) to directly, so overriding getExtra doesn't help - we need to", "Update TextElement: directly.(1004) to modify super's data directly.", "Update TextElement:  The LocalFileDataExtra value(734) to  the extra data for local file", "Update TextElement:  The CentralDirectoryExtra value(621) to  the central directory extra data", "Insert TextElement: Make this class work in JDK 1.1 like a 1.2 class.(847) into TagElement(850) at 0", "Insert TextElement: <p>This either stores the size for later usage or invokes(848) into TagElement(850) at 1", "Insert TextElement: setCompressedSize via reflection.</p>(849) into TagElement(850) at 2", "Insert SimpleName: size(851) into TagElement: @param(853) at 0", "Insert TextElement:  the size to use(852) into TagElement: @param(853) at 1", "Insert TextElement:  since 1.7.(854) into TagElement: @deprecated(856) at 0", "Insert TextElement: Use setCompressedSize directly.(855) into TagElement: @deprecated(856) at 1", "Insert MethodInvocation(868) into ExpressionStatement(869) at 0", "Insert TextElement: Get the name of the entry.(872) into TagElement(873) at 0", "Insert TextElement:  the entry name(874) into TagElement: @return(875) at 0", "Insert TextElement:  1.9(876) into TagElement: @since(877) at 0", "Insert ConditionalExpression(889) into ReturnStatement(890) at 0", "Insert TextElement: Is this entry a directory?(893) into TagElement(894) at 0", "Insert TextElement:  true if the entry is a directory(895) into TagElement: @return(896) at 0", "Insert TextElement:  1.10(897) into TagElement: @since(898) at 0", "Insert MethodInvocation(907) into ReturnStatement(908) at 0", "Insert TextElement: Set the name of the entry.(911) into TagElement(912) at 0", "Insert SimpleName: name(913) into TagElement: @param(915) at 0", "Insert TextElement:  the name to use(914) into TagElement: @param(915) at 1", "Insert SimpleName: String(920) into SimpleType: String(921) at 0", "Insert Assignment: =(928) into ExpressionStatement(929) at 0", "Insert TextElement: Get the hashCode of the entry.(932) into TagElement(934) at 0", "Insert TextElement: This uses the name as the hashcode.(933) into TagElement(934) at 1", "Insert TextElement:  a hashcode.(935) into TagElement: @return(936) at 0", "Insert TextElement:  Ant 1.7(937) into TagElement: @since(938) at 0", "Insert MethodInvocation(946) into ReturnStatement(947) at 0", "Insert TextElement: The equality method. In this case, the implementation returns 'this == o'(950) into TagElement(952) at 0", "Insert TextElement: which is basically the equals method of the Object class.(951) into TagElement(952) at 1", "Insert SimpleName: o(953) into TagElement: @param(955) at 0", "Insert TextElement:  the object to compare to(954) into TagElement: @param(955) at 1", "Insert TextElement:  true if this object is the same as <code>o</code>(956) into TagElement: @return(957) at 0", "Insert TextElement:  Ant 1.7(958) into TagElement: @since(959) at 0", "Insert ParenthesizedExpression(971) into ReturnStatement(972) at 0", "Insert SimpleName: e(212) into VariableDeclarationFragment(218) at 0", "Insert CastExpression(217) into VariableDeclarationFragment(218) at 1", "Insert QualifiedName: e.extraFields(220) into Assignment: =(232) at 0", "Insert ConditionalExpression(231) into Assignment: =(232) at 1", "Update SimpleName: entry(143) to e", "Move SimpleName: entry(143) into MethodInvocation(238) at 0", "Update SimpleName: getTime(144) to setInternalAttributes", "Move SimpleName: getTime(144) into MethodInvocation(238) at 1", "Move MethodInvocation(904) into MethodInvocation(238) at 2", "Update SimpleName: entry(151) to e", "Move SimpleName: entry(151) into MethodInvocation(244) at 0", "Update SimpleName: getSize(152) to setExternalAttributes", "Move SimpleName: getSize(152) into MethodInvocation(244) at 1", "Move MethodInvocation(910) into MethodInvocation(244) at 2", "Update SimpleName: setSize(159) to e", "Update SimpleName: size(160) to setExtraFields", "Move MethodInvocation(916) into MethodInvocation(250) at 2", "Update SimpleName: c_setCompressedSizeMethod(288) to internalAttributes", "Insert SimpleName: value(285) into Assignment: =(286) at 1", "Insert SimpleName: externalAttributes(318) into Assignment: =(320) at 0", "Insert SimpleName: value(319) into Assignment: =(320) at 1", "Insert SimpleName: setExternalAttributes(339) into MethodInvocation(361) at 0", "Insert InfixExpression: |(360) into MethodInvocation(361) at 1", "Update SimpleName: m_compressedSize(473) to platform", "Insert SimpleName: PLATFORM_UNIX(364) into Assignment: =(365) at 1", "Insert InfixExpression: !=(381) into ConditionalExpression(393) at 0", "Insert NumberLiteral: 0(382) into ConditionalExpression(393) at 1", "Insert CastExpression(392) into ConditionalExpression(393) at 2", "Insert MemberRef(402) into TagElement: @link(404) at 0", "Update TextElement:  The new ExtraFields value(555) to  setUnixMode", "Move TextElement:  The new ExtraFields value(555) into TagElement: @link(404) at 1", "Insert FieldAccess(433) into Assignment: =(435) at 0", "Update SimpleName: value(614) to platform", "Insert SimpleName: extraFields(456) into Assignment: =(460) at 0", "Insert ClassInstanceCreation(459) into Assignment: =(460) at 1", "Insert SimpleName: extraFields(499) into InfixExpression: ==(501) at 0", "Insert NullLiteral(500) into InfixExpression: ==(501) at 1", "Move ReturnStatement(674) into Block(509) at 0", "Update SimpleName: m_extraFields(710) to extraFields", "Move SimpleName: m_extraFields(710) into MethodInvocation(529) at 0", "Update SimpleName: toArray(711) to copyInto", "Move SimpleName: toArray(711) into MethodInvocation(529) at 1", "Move SimpleName: result(712) into MethodInvocation(529) at 2", "Insert SimpleName: extraFields(551) into InfixExpression: ==(553) at 0", "Insert NullLiteral(552) into InfixExpression: ==(553) at 1", "Insert ExpressionStatement(559) into Block(560) at 0", "Insert VariableDeclarationFragment(583) into VariableDeclarationExpression(584) at 2", "Move PrefixExpression: !(950) into InfixExpression: &&(590) at 0", "Insert IfStatement(617) into Block(618) at 0", "Insert SimpleName: extraFields(649) into InfixExpression: ==(651) at 0", "Insert NullLiteral(650) into InfixExpression: ==(651) at 1", "Insert ExpressionStatement(657) into Block(658) at 0", "Insert VariableDeclarationFragment(673) into VariableDeclarationExpression(674) at 2", "Move PrefixExpression: !(802) into InfixExpression: &&(680) at 0", "Insert SimpleName: setCompressedSize(866) into MethodInvocation(868) at 0", "Insert SimpleName: size(867) into MethodInvocation(868) at 1", "Insert InfixExpression: ==(885) into ConditionalExpression(889) at 0", "Insert SuperMethodInvocation(887) into ConditionalExpression(889) at 1", "Insert SimpleName: name(888) into ConditionalExpression(889) at 2", "Insert MethodInvocation(904) into MethodInvocation(907) at 0", "Insert SimpleName: endsWith(905) into MethodInvocation(907) at 1", "Insert StringLiteral: \"/\"(906) into MethodInvocation(907) at 2", "Insert FieldAccess(926) into Assignment: =(928) at 0", "Insert SimpleName: name(927) into Assignment: =(928) at 1", "Insert MethodInvocation(944) into MethodInvocation(946) at 0", "Insert SimpleName: hashCode(945) into MethodInvocation(946) at 1", "Insert InfixExpression: ==(970) into ParenthesizedExpression(971) at 0", "Move SimpleType: ZipEntry(877) into CastExpression(217) at 0", "Move SuperMethodInvocation(881) into CastExpression(217) at 1", "Insert InfixExpression: !=(223) into ConditionalExpression(231) at 0", "Insert CastExpression(229) into ConditionalExpression(231) at 1", "Insert NullLiteral(230) into ConditionalExpression(231) at 2", "Insert ParenthesizedExpression(343) into InfixExpression: |(360) at 0", "Insert ParenthesizedExpression(353) into InfixExpression: |(360) at 1", "Insert ParenthesizedExpression(359) into InfixExpression: |(360) at 2", "Insert SimpleName: platform(379) into InfixExpression: !=(381) at 0", "Insert SimpleName: PLATFORM_UNIX(380) into InfixExpression: !=(381) at 1", "Insert PrimitiveType: int(383) into CastExpression(392) at 0", "Insert ParenthesizedExpression(391) into CastExpression(392) at 1", "Insert SimpleName: setUnixMode(401) into MemberRef(402) at 0", "Insert ThisExpression(431) into FieldAccess(433) at 0", "Insert SimpleName: platform(432) into FieldAccess(433) at 1", "Insert SimpleType: Vector(458) into ClassInstanceCreation(459) at 0", "Insert ArrayCreation(507) into ReturnStatement(508) at 0", "Insert Assignment: =(558) into ExpressionStatement(559) at 0", "Update SimpleName: extraField(786) to ze", "Update SimpleName: getHeaderID(787) to getHeaderId", "Insert SimpleName: fieldsSize(579) into VariableDeclarationFragment(583) at 0", "Insert MethodInvocation(582) into VariableDeclarationFragment(583) at 1", "Insert SimpleName: fieldsSize(588) into InfixExpression: <(589) at 1", "Insert MethodInvocation(605) into IfStatement(617) at 0", "Move Block(840) into IfStatement(617) at 1", "Insert Assignment: =(656) into ExpressionStatement(657) at 0", "Insert SimpleName: fieldsSize(669) into VariableDeclarationFragment(673) at 0", "Insert MethodInvocation(672) into VariableDeclarationFragment(673) at 1", "Insert SimpleName: fieldsSize(678) into InfixExpression: <(679) at 1", "Move SimpleType: Exception(889) into SingleVariableDeclaration(757) at 0", "Insert SimpleName: name(883) into InfixExpression: ==(885) at 0", "Insert NullLiteral(884) into InfixExpression: ==(885) at 1", "Insert SimpleName: getName(886) into SuperMethodInvocation(887) at 0", "Insert SimpleName: getName(903) into MethodInvocation(904) at 0", "Insert ThisExpression(924) into FieldAccess(926) at 0", "Insert SimpleName: name(925) into FieldAccess(926) at 1", "Insert SimpleName: getName(943) into MethodInvocation(944) at 0", "Insert ThisExpression(968) into InfixExpression: ==(970) at 0", "Insert SimpleName: o(969) into InfixExpression: ==(970) at 1", "Insert SimpleName: extraFields(221) into InfixExpression: !=(223) at 0", "Insert NullLiteral(222) into InfixExpression: !=(223) at 1", "Insert SimpleType: Vector(225) into CastExpression(229) at 0", "Insert MethodInvocation(228) into CastExpression(229) at 1", "Insert InfixExpression: <<(342) into ParenthesizedExpression(343) at 0", "Insert ConditionalExpression(352) into ParenthesizedExpression(353) at 0", "Insert ConditionalExpression(358) into ParenthesizedExpression(359) at 0", "Insert InfixExpression: &(390) into ParenthesizedExpression(391) at 0", "Insert SimpleName: Vector(457) into SimpleType: Vector(458) at 0", "Update SimpleName: m_extraFields(584) to extraFields", "Update SimpleName: add(585) to addElement", "Move ArrayType: ZipExtraField[](567) into ArrayCreation(507) at 0", "Insert NumberLiteral: 0(506) into ArrayCreation(507) at 1", "Update SimpleName: m_extraFields(700) to extraFields", "Insert SimpleName: extraFields(554) into Assignment: =(558) at 0", "Insert ClassInstanceCreation(557) into Assignment: =(558) at 1", "Insert SimpleName: extraFields(580) into MethodInvocation(582) at 0", "Insert SimpleName: size(581) into MethodInvocation(582) at 1", "Insert MethodInvocation(602) into MethodInvocation(605) at 0", "Move SimpleName: equals(827) into MethodInvocation(605) at 1", "Move SimpleName: type(828) into MethodInvocation(605) at 2", "Move ExpressionStatement(980) into Block(616) at 1", "Update SimpleName: m_extraFields(846) to extraFields", "Update SimpleName: add(847) to addElement", "Update SimpleName: extraField(848) to ze", "Insert SimpleName: extraFields(652) into Assignment: =(656) at 0", "Insert ClassInstanceCreation(655) into Assignment: =(656) at 1", "Insert SimpleName: extraFields(670) into MethodInvocation(672) at 0", "Insert SimpleName: size(671) into MethodInvocation(672) at 1", "Move ExpressionStatement(839) into Block(705) at 1", "Move SimpleName: Exception(536) into SimpleType: Exception(755) at 0", "Insert SimpleName: Vector(224) into SimpleType: Vector(225) at 0", "Update SimpleName: entry(137) to extraFields", "Move SimpleName: entry(137) into MethodInvocation(228) at 0", "Update SimpleName: getMethod(138) to clone", "Move SimpleName: getMethod(138) into MethodInvocation(228) at 1", "Insert SimpleName: mode(340) into InfixExpression: <<(342) at 0", "Insert SimpleName: SHORT_SHIFT(341) into InfixExpression: <<(342) at 1", "Insert InfixExpression: ==(349) into ConditionalExpression(352) at 0", "Insert NumberLiteral: 1(350) into ConditionalExpression(352) at 1", "Insert NumberLiteral: 0(351) into ConditionalExpression(352) at 2", "Insert MethodInvocation(355) into ConditionalExpression(358) at 0", "Insert NumberLiteral: 0x10(356) into ConditionalExpression(358) at 1", "Insert NumberLiteral: 0(357) into ConditionalExpression(358) at 2", "Insert ParenthesizedExpression(388) into InfixExpression: &(390) at 0", "Insert SimpleName: SHORT_MASK(389) into InfixExpression: &(390) at 1", "Insert SimpleType: Vector(556) into ClassInstanceCreation(557) at 0", "Insert ParenthesizedExpression(600) into MethodInvocation(602) at 0", "Update SimpleName: getHeaderID(825) to getHeaderId", "Move SimpleName: getHeaderID(825) into MethodInvocation(602) at 1", "Insert SimpleType: Vector(654) into ClassInstanceCreation(655) at 0", "Update SimpleName: getHeaderID(967) to getHeaderId", "Insert ParenthesizedExpression(347) into InfixExpression: ==(349) at 0", "Insert NumberLiteral: 0(348) into InfixExpression: ==(349) at 1", "Insert SimpleName: isDirectory(354) into MethodInvocation(355) at 0", "Insert InfixExpression: >>(387) into ParenthesizedExpression(388) at 0", "Insert SimpleName: Vector(555) into SimpleType: Vector(556) at 0", "Insert CastExpression(599) into ParenthesizedExpression(600) at 0", "Update SimpleName: m_extraFields(830) to extraFields", "Update SimpleName: set(831) to setElementAt", "Insert SimpleName: ze(608) into MethodInvocation(610) at 2", "Insert SimpleName: Vector(653) into SimpleType: Vector(654) at 0", "Update SimpleName: m_extraFields(972) to extraFields", "Update SimpleName: remove(973) to removeElementAt", "Insert InfixExpression: &(346) into ParenthesizedExpression(347) at 0", "Insert MethodInvocation(385) into InfixExpression: >>(387) at 0", "Insert SimpleName: SHORT_SHIFT(386) into InfixExpression: >>(387) at 1", "Move SimpleType: ZipExtraField(960) into CastExpression(599) at 0", "Move MethodInvocation(820) into CastExpression(599) at 1", "Move SimpleType: ZipExtraField(816) into CastExpression(689) at 0", "Insert SimpleName: mode(344) into InfixExpression: &(346) at 0", "Insert NumberLiteral: 0200(345) into InfixExpression: &(346) at 1", "Insert SimpleName: getExternalAttributes(384) into MethodInvocation(385) at 0", "Update SimpleName: m_extraFields(817) to extraFields", "Update SimpleName: get(818) to elementAt", "Update SimpleName: m_extraFields(961) to extraFields", "Update SimpleName: get(962) to elementAt", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Helper for JDK 1.1(18)", "Delete TagElement(19)", "Delete TextElement:  1.2(20)", "Delete TagElement: @since(21)", "Delete Javadoc(22)", "Delete SimpleName: Method(25)", "Delete SimpleType: Method(26)", "Delete TextElement: Helper for JDK 1.1(30)", "Delete TagElement(31)", "Delete TextElement:  1.2(32)", "Delete TagElement: @since(33)", "Delete Javadoc(34)", "Delete SimpleName: Object(38)", "Delete SimpleType: Object(39)", "Delete ClassInstanceCreation(43)", "Delete TextElement: Helper for JDK 1.1(46)", "Delete TagElement(47)", "Delete TextElement:  1.2(48)", "Delete TagElement: @since(49)", "Delete Javadoc(50)", "Delete SimpleName: ArrayList(59)", "Delete SimpleType: ArrayList(60)", "Delete SimpleName: ArrayList(62)", "Delete SimpleType: ArrayList(63)", "Delete ClassInstanceCreation(64)", "Delete TextElement: Helper for JDK 1.1 <-> 1.2 incompatibility.(77)", "Delete TagElement(78)", "Delete TextElement:  1.2(79)", "Delete TagElement: @since(80)", "Delete Javadoc(81)", "Delete Modifier: final(98)", "Delete SimpleName: entry(126)", "Delete SimpleName: getName(127)", "Delete MethodInvocation(128)", "Delete Modifier: final(199)", "Delete SimpleName: setComment(130)", "Delete SimpleName: entry(131)", "Delete SimpleName: getComment(132)", "Delete MethodInvocation(133)", "Delete MethodInvocation(134)", "Delete ExpressionStatement(135)", "Delete Modifier: final(148)", "Delete PrimitiveType: long(149)", "Delete SimpleName: size(150)", "Delete MethodInvocation(153)", "Delete VariableDeclarationFragment(154)", "Delete VariableDeclarationStatement(155)", "Delete SimpleName: size(156)", "Delete NumberLiteral: 0(157)", "Delete InfixExpression: >(158)", "Delete Block(163)", "Delete IfStatement(164)", "Delete Modifier: final(165)", "Delete PrimitiveType: long(166)", "Delete SimpleName: cSize(167)", "Delete SimpleName: entry(168)", "Delete SimpleName: getCompressedSize(169)", "Delete MethodInvocation(170)", "Delete VariableDeclarationFragment(171)", "Delete VariableDeclarationStatement(172)", "Delete SimpleName: cSize(173)", "Delete NumberLiteral: 0(174)", "Delete InfixExpression: >(175)", "Delete SimpleName: setComprSize(176)", "Delete SimpleName: cSize(177)", "Delete MethodInvocation(178)", "Delete ExpressionStatement(179)", "Delete Block(180)", "Delete IfStatement(181)", "Delete Modifier: final(182)", "Delete PrimitiveType: long(183)", "Delete SimpleName: crc(184)", "Delete SimpleName: entry(185)", "Delete SimpleName: getCrc(186)", "Delete MethodInvocation(187)", "Delete VariableDeclarationFragment(188)", "Delete VariableDeclarationStatement(189)", "Delete SimpleName: crc(190)", "Delete NumberLiteral: 0(191)", "Delete InfixExpression: >(192)", "Delete SimpleName: setCrc(193)", "Delete SimpleName: crc(194)", "Delete MethodInvocation(195)", "Delete ExpressionStatement(196)", "Delete Block(197)", "Delete IfStatement(198)", "Delete Block(225)", "Delete MethodDeclaration(226)", "Delete Modifier: final(240)", "Delete SimpleName: setMethod(136)", "Delete MethodInvocation(139)", "Delete MethodInvocation(140)", "Delete SimpleName: setTime(142)", "Delete MethodInvocation(145)", "Delete MethodInvocation(146)", "Delete TextElement: Try to get a handle to the setCompressedSize method.(272)", "Delete TagElement(273)", "Delete Modifier: private(277)", "Delete QualifiedName: java.util.zip.ZipEntry(289)", "Delete SimpleType: java.util.zip.ZipEntry(290)", "Delete TypeLiteral(291)", "Delete SimpleName: getMethod(292)", "Delete StringLiteral: \"setCompressedSize\"(293)", "Delete SimpleName: Class(294)", "Delete SimpleType: Class(295)", "Delete Dimension(296)", "Delete ArrayType: Class[](297)", "Delete QualifiedName: Long.TYPE(298)", "Delete ArrayInitializer(299)", "Delete ArrayCreation(300)", "Delete MethodInvocation(301)", "Delete SimpleName: checkSCS(280)", "Delete SimpleName: c_triedToGetMethod(281)", "Delete PrefixExpression: !(282)", "Delete SimpleName: c_lockReflection(283)", "Delete SimpleName: c_triedToGetMethod(284)", "Delete BooleanLiteral: true(285)", "Delete Assignment: =(286)", "Delete ExpressionStatement(287)", "Delete Block(304)", "Delete SimpleName: NoSuchMethodException(305)", "Delete SimpleType: NoSuchMethodException(306)", "Delete SimpleName: nse(307)", "Delete SingleVariableDeclaration(308)", "Delete Block(309)", "Delete CatchClause(310)", "Delete TryStatement(311)", "Delete Block(312)", "Delete SynchronizedStatement(313)", "Delete Block(314)", "Delete IfStatement(315)", "Delete Block(316)", "Delete TextElement: Are we running JDK 1.2 or higher?(318)", "Delete TagElement(319)", "Delete TextElement:  Description of the Returned Value(320)", "Delete TagElement: @return(321)", "Delete TextElement:  1.2(322)", "Delete TagElement: @since(323)", "Delete Javadoc(324)", "Delete Modifier: private(325)", "Delete SimpleName: checkSCS(329)", "Delete MethodInvocation(330)", "Delete ExpressionStatement(331)", "Delete SimpleName: c_setCompressedSizeMethod(332)", "Delete NullLiteral(333)", "Delete InfixExpression: !=(334)", "Delete TextElement: Invoke setCompressedSize via reflection.(338)", "Delete TagElement(339)", "Delete SimpleName: entry(340)", "Delete TextElement:  Description of Parameter(341)", "Delete TagElement: @param(342)", "Delete Modifier: private(349)", "Delete Modifier: final(353)", "Delete SimpleName: ZipEntry(354)", "Delete SimpleType: ZipEntry(355)", "Delete SimpleName: entry(356)", "Delete SingleVariableDeclaration(357)", "Delete Modifier: final(358)", "Delete SimpleName: c_setCompressedSizeMethod(375)", "Delete SimpleName: invoke(376)", "Delete SimpleName: entry(377)", "Delete SimpleName: s(378)", "Delete MethodInvocation(379)", "Delete Modifier: final(362)", "Delete SimpleName: Long(363)", "Delete SimpleType: Long(364)", "Delete Dimension(365)", "Delete ArrayType: Long[](366)", "Delete SimpleName: s(367)", "Delete SimpleName: Long(368)", "Delete SimpleType: Long(369)", "Delete SimpleName: size(370)", "Delete ClassInstanceCreation(371)", "Delete ArrayInitializer(372)", "Delete VariableDeclarationFragment(373)", "Delete VariableDeclarationStatement(374)", "Delete Block(381)", "Delete Modifier: final(382)", "Delete SimpleName: InvocationTargetException(383)", "Delete SimpleType: InvocationTargetException(384)", "Delete SimpleName: ite(385)", "Delete SingleVariableDeclaration(386)", "Delete Modifier: final(387)", "Delete SimpleName: Throwable(388)", "Delete SimpleType: Throwable(389)", "Delete SimpleName: nested(390)", "Delete SimpleName: ite(391)", "Delete SimpleName: getTargetException(392)", "Delete MethodInvocation(393)", "Delete VariableDeclarationFragment(394)", "Delete VariableDeclarationStatement(395)", "Delete Modifier: final(396)", "Delete SimpleName: message(399)", "Delete StringLiteral: \"Exception setting the compressed size \"(400)", "Delete StringLiteral: \"of \"(401)", "Delete InfixExpression: +(402)", "Delete SimpleName: entry(403)", "Delete StringLiteral: \": \"(404)", "Delete SimpleName: nested(405)", "Delete SimpleName: getMessage(406)", "Delete MethodInvocation(407)", "Delete InfixExpression: +(408)", "Delete VariableDeclarationFragment(409)", "Delete VariableDeclarationStatement(410)", "Delete SimpleName: RuntimeException(411)", "Delete SimpleType: RuntimeException(412)", "Delete SimpleName: message(413)", "Delete ClassInstanceCreation(414)", "Delete ThrowStatement(415)", "Delete Block(416)", "Delete CatchClause(417)", "Delete Modifier: final(418)", "Delete SimpleName: Throwable(419)", "Delete SimpleType: Throwable(420)", "Delete SimpleName: t(421)", "Delete SingleVariableDeclaration(422)", "Delete Modifier: final(423)", "Delete SimpleName: message(426)", "Delete StringLiteral: \"Exception setting the compressed size \"(427)", "Delete StringLiteral: \"of \"(428)", "Delete InfixExpression: +(429)", "Delete SimpleName: entry(430)", "Delete StringLiteral: \": \"(431)", "Delete SimpleName: t(432)", "Delete SimpleName: getMessage(433)", "Delete MethodInvocation(434)", "Delete InfixExpression: +(435)", "Delete VariableDeclarationFragment(436)", "Delete VariableDeclarationStatement(437)", "Delete SimpleName: RuntimeException(438)", "Delete SimpleType: RuntimeException(439)", "Delete SimpleName: message(440)", "Delete ClassInstanceCreation(441)", "Delete ThrowStatement(442)", "Delete Block(443)", "Delete CatchClause(444)", "Delete TryStatement(445)", "Delete Block(446)", "Delete TextElement: via reflection.</p>(450)", "Delete Modifier: final(461)", "Delete SimpleName: performSetCompressedSize(467)", "Delete ThisExpression(468)", "Delete SimpleName: size(469)", "Delete SimpleName: Long(474)", "Delete SimpleType: Long(475)", "Delete SimpleName: size(476)", "Delete ClassInstanceCreation(477)", "Delete SimpleName: haveSetCompressedSize(465)", "Delete MethodInvocation(466)", "Delete Block(472)", "Delete Block(480)", "Delete IfStatement(481)", "Delete SimpleName: externalAttributes(486)", "Delete Modifier: final(495)", "Delete PrimitiveType: long(496)", "Delete SimpleName: externalAttributes(497)", "Delete SingleVariableDeclaration(498)", "Delete SimpleName: m_externalAttributes(499)", "Delete SimpleName: externalAttributes(500)", "Delete Assignment: =(501)", "Delete ExpressionStatement(502)", "Delete Block(503)", "Delete SimpleName: fields(554)", "Delete TagElement: @param(556)", "Delete Modifier: final(563)", "Delete SimpleName: fields(568)", "Delete SingleVariableDeclaration(569)", "Delete Modifier: final(609)", "Delete SimpleName: m_internalAttributes(613)", "Delete TextElement: Override to make this class work in JDK 1.1 like a 1.2 class.(639)", "Delete TagElement(640)", "Delete TextElement:  The CompressedSize value(641)", "Delete TagElement: @return(642)", "Delete SimpleName: m_extraFields(570)", "Delete SimpleName: clear(571)", "Delete MethodInvocation(572)", "Delete SimpleName: m_compressedSize(649)", "Delete NullLiteral(650)", "Delete InfixExpression: !=(651)", "Delete SimpleName: m_compressedSize(652)", "Delete SimpleName: longValue(653)", "Delete MethodInvocation(654)", "Delete ReturnStatement(655)", "Delete Block(656)", "Delete IfStatement(657)", "Delete SimpleName: getCompressedSize(658)", "Delete SuperMethodInvocation(659)", "Delete ReturnStatement(660)", "Delete Block(661)", "Delete SimpleName: m_externalAttributes(673)", "Delete Modifier: final(690)", "Delete PrimitiveType: long(671)", "Delete Block(675)", "Delete MethodDeclaration(676)", "Delete Modifier: public(684)", "Delete SimpleName: getExtraFields(689)", "Delete MethodInvocation(713)", "Delete CastExpression(714)", "Delete ReturnStatement(715)", "Delete Block(716)", "Delete MethodDeclaration(717)", "Delete Modifier: public(725)", "Delete PrimitiveType: int(726)", "Delete SimpleName: getInternalAttributes(727)", "Delete Block(730)", "Delete MethodDeclaration(731)", "Delete Modifier: final(777)", "Delete Modifier: final(782)", "Delete SimpleName: m_extraFields(804)", "Delete SimpleName: size(805)", "Delete MethodInvocation(806)", "Delete SimpleName: extraField(833)", "Delete Modifier: final(811)", "Delete SimpleName: ZipExtraField(812)", "Delete SimpleType: ZipExtraField(813)", "Delete SimpleName: other(814)", "Delete CastExpression(821)", "Delete VariableDeclarationFragment(822)", "Delete VariableDeclarationStatement(823)", "Delete SimpleName: other(824)", "Delete MethodInvocation(826)", "Delete MethodInvocation(829)", "Delete IfStatement(841)", "Delete TextElement: Overwrite clone(858)", "Delete TagElement(859)", "Delete TextElement:  Description of the Returned Value(860)", "Delete TagElement: @return(861)", "Delete Javadoc(864)", "Delete Modifier: public(865)", "Delete SimpleName: clone(868)", "Delete SimpleName: entry(871)", "Delete NullLiteral(872)", "Delete VariableDeclarationFragment(873)", "Delete VariableDeclarationStatement(874)", "Delete SimpleName: entry(875)", "Delete QualifiedName: java.util.zip.ZipEntry(878)", "Delete SimpleType: java.util.zip.ZipEntry(879)", "Delete CastExpression(882)", "Delete ClassInstanceCreation(883)", "Delete Assignment: =(884)", "Delete ExpressionStatement(885)", "Delete Block(886)", "Delete Modifier: final(887)", "Delete SimpleName: e(890)", "Delete SingleVariableDeclaration(891)", "Delete SimpleName: e(892)", "Delete SimpleName: printStackTrace(893)", "Delete MethodInvocation(894)", "Delete ExpressionStatement(895)", "Delete NullLiteral(896)", "Delete ReturnStatement(897)", "Delete Block(898)", "Delete CatchClause(899)", "Delete TryStatement(900)", "Delete SimpleName: entry(901)", "Delete SimpleName: setInternalAttributes(902)", "Delete MethodInvocation(905)", "Delete ExpressionStatement(906)", "Delete SimpleName: entry(907)", "Delete SimpleName: setExternalAttributes(908)", "Delete MethodInvocation(911)", "Delete ExpressionStatement(912)", "Delete SimpleName: entry(913)", "Delete SimpleName: setExtraFields(914)", "Delete MethodInvocation(917)", "Delete ExpressionStatement(918)", "Delete SimpleName: entry(919)", "Delete ReturnStatement(920)", "Delete Block(921)", "Delete MethodDeclaration(922)", "Delete Modifier: final(934)", "Delete SimpleName: m_extraFields(952)", "Delete SimpleName: size(953)", "Delete MethodInvocation(954)", "Delete Modifier: final(519)", "Delete Modifier: final(535)"]}}, {"ZipExtraField_cluster": {"actions": [{"root": "UPDATE from getHeaderID to getHeaderId", "operations": ["UPD SimpleName: getHeaderID from getHeaderID to getHeaderId"]}]}}, {"ZipExtraField_diff": {"operations": ["Update SimpleName: getHeaderID(25) to getHeaderId"]}}, {"ZipLong_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS PrimitiveType: int to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 4 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: WORD to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 0xFF to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: BYTE_MASK to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: BYTE_1 to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: BYTE_1_MASK to VariableDeclarationFragment at 0", "INS NumberLiteral: 0xFF00 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: BYTE_1_SHIFT to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: static to FieldDeclaration at 1", "INS NumberLiteral: 8 to VariableDeclarationFragment at 1", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 10", "INS PrimitiveType: int to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: BYTE_2 to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 2 to VariableDeclarationFragment at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: BYTE_2_MASK to VariableDeclarationFragment at 0", "INS NumberLiteral: 0xFF0000 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: BYTE_2_SHIFT to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 2", "INS NumberLiteral: 16 to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS SimpleName: BYTE_3 to VariableDeclarationFragment at 0", "INS NumberLiteral: 3 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 0xFF000000L to VariableDeclarationFragment at 1", "INS PrimitiveType: long to FieldDeclaration at 3", "INS SimpleName: BYTE_3_MASK to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 14"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 15", "operations": ["INS PrimitiveType: int to FieldDeclaration at 3", "INS NumberLiteral: 24 to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: BYTE_3_SHIFT to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 15", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 19"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: ZipLong to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: value to MethodInvocation at 2", "INS TextElement: Get value as four bytes in big endian byte order. to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: getBytes to MethodDeclaration at 3", "INS TextElement:  value as four bytes in big endian order to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS TagElement: @return to Javadoc at 2", "INS ReturnStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: getValue to MethodDeclaration at 3", "INS TextElement: Get value as Java long. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS TagElement to Javadoc at 0", "INS TextElement:  value as a long to TagElement: @return at 0", "INS SimpleName: value to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: long to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS PrimitiveType: long to MethodDeclaration at 3", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: getValue to MethodInvocation at 0", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: bytes to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: byte[] at 1", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS Modifier: static to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getValue to MethodDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement:  the value stored in the ZipLong to TagElement: @return at 0", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS TagElement: @return to Javadoc at 1", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: ZipLong to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ArrayType: byte[] to MethodDeclaration at 2"]}, {"root": "INS Modifier: static to MethodDeclaration at 2", "operations": ["INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Modifier: static to MethodDeclaration at 2", "operations": ["INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: offset to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: hashCode to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0", "MOV Block to MethodDeclaration at 4", "MOV PrimitiveType: int to MethodDeclaration at 2"]}, {"root": "UPDATE from Utility class that represents a four byte integer with conversion rules for to Utility class that represents a four byte integer with conversion", "operations": ["UPD TextElement: Utility class that represents a four byte integer with conversion rules for from Utility class that represents a four byte integer with conversion rules for to Utility class that represents a four byte integer with conversion"]}, {"root": "UPDATE from the big endian byte order of ZIP files. to rules for the big endian byte order of ZIP files.", "operations": ["UPD TextElement: the big endian byte order of ZIP files. from the big endian byte order of ZIP files. to rules for the big endian byte order of ZIP files."]}, {"root": "UPDATE from m_value to value", "operations": ["UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ArrayType: byte[] to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from buffer to bytes", "operations": ["UPD SimpleName: buffer from buffer to bytes", "UPD SimpleName: buffer from buffer to bytes", "UPD SimpleName: buffer from buffer to bytes", "UPD SimpleName: buffer from buffer to bytes", "UPD SimpleName: buffer from buffer to bytes"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ArrayType: byte[] to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: value to TagElement: @param at 0", "INS TextElement:  the value to convert to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TextElement:  the array of bytes to TagElement: @param at 1", "INS SimpleName: bytes to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TextElement:  the offset to start to TagElement: @param at 1", "INS SimpleName: offset to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS ArrayAccess to InfixExpression: << at 0", "INS SimpleName: BYTE_3_MASK to InfixExpression: & at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS InfixExpression: + to ArrayAccess at 1", "INS SimpleName: offset to InfixExpression: + at 0", "INS SimpleName: BYTE_3_SHIFT to InfixExpression: << at 1", "INS InfixExpression: & to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: BYTE_3 to InfixExpression: + at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: value to Assignment: += at 0", "INS SimpleName: BYTE_2_MASK to InfixExpression: & at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: BYTE_2 to InfixExpression: + at 1", "INS SimpleName: offset to InfixExpression: + at 0", "INS InfixExpression: & to Assignment: += at 1", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 1", "INS ArrayAccess to InfixExpression: << at 0", "INS InfixExpression: + to ArrayAccess at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: BYTE_2_SHIFT to InfixExpression: << at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: BYTE_1 to InfixExpression: + at 1", "INS InfixExpression: + to ArrayAccess at 1", "INS SimpleName: value to Assignment: += at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS ExpressionStatement to Block at 2", "INS InfixExpression: & to Assignment: += at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: BYTE_1_SHIFT to InfixExpression: << at 1", "INS ArrayAccess to InfixExpression: << at 0", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS SimpleName: offset to InfixExpression: + at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: bytes to ArrayAccess at 0", "INS ParenthesizedExpression to Assignment: += at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: value to Assignment: += at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: BYTE_MASK to InfixExpression: & at 1", "INS SimpleName: offset to ArrayAccess at 1", "INS ArrayAccess to InfixExpression: & at 0"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: bytes to TagElement: @param at 0", "INS TextElement:  the array of bytes to TagElement: @param at 1"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: Override to make two instances with same value equal. to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "UPDATE from  the value to  the long to store as a ZipLong", "operations": ["UPD TextElement:  the value from  the value to  the long to store as a ZipLong"]}, {"root": "UPDATE from  buffer to read data from to  the bytes to store as a ZipLong", "operations": ["UPD TextElement:  buffer to read data from from  buffer to read data from to  the bytes to store as a ZipLong", "UPD TextElement:  the buffer to read data from from  the buffer to read data from to  the bytes to store as a ZipLong"]}, {"root": "UPDATE from  offset into buffer to  the offset to start", "operations": ["UPD TextElement:  offset into buffer from  offset into buffer to  the offset to start"]}, {"root": "UPDATE from Get value as two bytes in big endian byte order. to Get value as four bytes in big endian byte order.", "operations": ["UPD TextElement: Get value as two bytes in big endian byte order. from Get value as two bytes in big endian byte order. to Get value as four bytes in big endian byte order."]}, {"root": "UPDATE from  The value as bytes to  value as four bytes in big endian byte order", "operations": ["UPD TextElement:  The value as bytes from  The value as bytes to  value as four bytes in big endian byte order"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Get value as Java int. to Helper method to get the value as a Java long from four bytes starting at given array offset", "operations": ["UPD TextElement: Get value as Java int. from Get value as Java int. to Helper method to get the value as a Java long from four bytes starting at given array offset"]}, {"root": "UPDATE from  The value to  the correspondanding Java long value", "operations": ["UPD TextElement:  The value from  The value to  the correspondanding Java long value", "UPD TextElement:  the hashcode from  the hashcode to  the correspondanding Java long value"]}, {"root": "UPDATE from Override to make two instances with same value equal. to Helper method to get the value as a Java long from a four-byte array", "operations": ["UPD TextElement: Override to make two instances with same value equal. from Override to make two instances with same value equal. to Helper method to get the value as a Java long from a four-byte array"]}, {"root": "UPDATE from  the object to compare against to  an object to compare", "operations": ["UPD TextElement:  the object to compare against from  the object to compare against to  an object to compare"]}, {"root": "UPDATE from  true if equyal, false otherwise to  true if the objects are equal", "operations": ["UPD TextElement:  true if equyal, false otherwise from  true if equyal, false otherwise to  true if the objects are equal"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: value to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS SimpleName: bytes to MethodInvocation at 2", "INS SimpleName: offset to MethodInvocation at 3", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS ArrayType: byte[] to ArrayCreation at 0", "operations": ["INS ArrayType: byte[] to ArrayCreation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0"]}, {"root": "INS SimpleName: WORD to ArrayCreation at 1", "operations": ["INS SimpleName: WORD to ArrayCreation at 1"]}, {"root": "INS SimpleName: BYTE_1 to ArrayAccess at 1", "operations": ["INS SimpleName: BYTE_1 to ArrayAccess at 1"]}, {"root": "INS SimpleName: BYTE_2 to ArrayAccess at 1", "operations": ["INS SimpleName: BYTE_2 to ArrayAccess at 1"]}, {"root": "INS SimpleName: BYTE_3 to ArrayAccess at 1", "operations": ["INS SimpleName: BYTE_3 to ArrayAccess at 1"]}, {"root": "INS SimpleName: BYTE_1_SHIFT to InfixExpression: >> at 1", "operations": ["INS SimpleName: BYTE_1_SHIFT to InfixExpression: >> at 1"]}, {"root": "INS SimpleName: BYTE_2_SHIFT to InfixExpression: >> at 1", "operations": ["INS SimpleName: BYTE_2_SHIFT to InfixExpression: >> at 1"]}, {"root": "INS SimpleName: BYTE_3_SHIFT to InfixExpression: >> at 1", "operations": ["INS SimpleName: BYTE_3_SHIFT to InfixExpression: >> at 1"]}, {"root": "INS SimpleName: BYTE_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_MASK to InfixExpression: & at 1"]}, {"root": "INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1"]}, {"root": "INS SimpleName: BYTE_2_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_2_MASK to InfixExpression: & at 1"]}, {"root": "INS SimpleName: BYTE_3_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_3_MASK to InfixExpression: & at 1"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: m_value", "operations": ["DEL SimpleName: m_value"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL InfixExpression: &", "operations": ["DEL InfixExpression: +", "DEL NumberLiteral: 24", "DEL InfixExpression: &", "DEL InfixExpression: <<", "DEL ArrayAccess", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0xFF000000l", "DEL SimpleName: offset", "DEL NumberLiteral: 3", "DEL SimpleName: buffer"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL SimpleName: m_value", "DEL InfixExpression: <<", "DEL ExpressionStatement", "DEL SimpleName: m_value", "DEL SimpleName: offset", "DEL SimpleName: m_value", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: offset", "DEL NumberLiteral: 0xFF0000", "DEL ParenthesizedExpression", "DEL InfixExpression: <<", "DEL InfixExpression: +", "DEL InfixExpression: &", "DEL InfixExpression: &", "DEL SimpleName: buffer", "DEL Assignment: +=", "DEL NumberLiteral: 16", "DEL ParenthesizedExpression", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL SimpleName: buffer", "DEL InfixExpression: +", "DEL Block", "DEL InfixExpression: &", "DEL ArrayAccess", "DEL NumberLiteral: 0xFF00", "DEL NumberLiteral: 8", "DEL Assignment: +=", "DEL NumberLiteral: 0xFF", "DEL ArrayAccess", "DEL ArrayAccess", "DEL SimpleName: buffer", "DEL NumberLiteral: 2"]}, {"root": "DEL NumberLiteral: 4", "operations": ["DEL NumberLiteral: 4"]}, {"root": "DEL NumberLiteral: 0xFF", "operations": ["DEL NumberLiteral: 0xFF"]}, {"root": "DEL NumberLiteral: 1", "operations": ["DEL NumberLiteral: 1"]}, {"root": "DEL NumberLiteral: 0xFF00", "operations": ["DEL NumberLiteral: 0xFF00"]}, {"root": "DEL NumberLiteral: 8", "operations": ["DEL NumberLiteral: 8"]}, {"root": "DEL NumberLiteral: 2", "operations": ["DEL NumberLiteral: 2"]}, {"root": "DEL NumberLiteral: 0xFF0000", "operations": ["DEL NumberLiteral: 0xFF0000"]}, {"root": "DEL NumberLiteral: 16", "operations": ["DEL NumberLiteral: 16"]}, {"root": "DEL NumberLiteral: 3", "operations": ["DEL NumberLiteral: 3"]}, {"root": "DEL NumberLiteral: 0xFF000000l", "operations": ["DEL NumberLiteral: 0xFF000000l"]}, {"root": "DEL NumberLiteral: 24", "operations": ["DEL NumberLiteral: 24"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}]}}, {"ZipLong_diff": {"operations": ["Insert FieldDeclaration(18) into TypeDeclaration: class(454) at 5", "Insert FieldDeclaration(26) into TypeDeclaration: class(454) at 6", "Insert FieldDeclaration(34) into TypeDeclaration: class(454) at 7", "Insert FieldDeclaration(42) into TypeDeclaration: class(454) at 8", "Insert FieldDeclaration(50) into TypeDeclaration: class(454) at 9", "Insert FieldDeclaration(58) into TypeDeclaration: class(454) at 10", "Insert FieldDeclaration(66) into TypeDeclaration: class(454) at 11", "Insert FieldDeclaration(74) into TypeDeclaration: class(454) at 12", "Insert FieldDeclaration(82) into TypeDeclaration: class(454) at 13", "Insert FieldDeclaration(90) into TypeDeclaration: class(454) at 14", "Insert FieldDeclaration(98) into TypeDeclaration: class(454) at 15", "Insert MethodDeclaration(175) into TypeDeclaration: class(454) at 19", "Insert MethodDeclaration(194) into TypeDeclaration: class(454) at 20", "Insert MethodDeclaration(208) into TypeDeclaration: class(454) at 21", "Insert MethodDeclaration(394) into TypeDeclaration: class(454) at 24", "Insert MethodDeclaration(453) into TypeDeclaration: class(454) at 26", "Insert Modifier: private(11) into FieldDeclaration(18) at 0", "Insert Modifier: static(12) into FieldDeclaration(18) at 1", "Insert Modifier: final(13) into FieldDeclaration(18) at 2", "Insert PrimitiveType: int(14) into FieldDeclaration(18) at 3", "Insert VariableDeclarationFragment(17) into FieldDeclaration(18) at 4", "Insert Modifier: private(19) into FieldDeclaration(26) at 0", "Insert Modifier: static(20) into FieldDeclaration(26) at 1", "Insert Modifier: final(21) into FieldDeclaration(26) at 2", "Insert PrimitiveType: int(22) into FieldDeclaration(26) at 3", "Insert VariableDeclarationFragment(25) into FieldDeclaration(26) at 4", "Insert Modifier: private(27) into FieldDeclaration(34) at 0", "Insert Modifier: static(28) into FieldDeclaration(34) at 1", "Insert Modifier: final(29) into FieldDeclaration(34) at 2", "Insert PrimitiveType: int(30) into FieldDeclaration(34) at 3", "Insert VariableDeclarationFragment(33) into FieldDeclaration(34) at 4", "Insert Modifier: private(35) into FieldDeclaration(42) at 0", "Insert Modifier: static(36) into FieldDeclaration(42) at 1", "Insert Modifier: final(37) into FieldDeclaration(42) at 2", "Insert PrimitiveType: int(38) into FieldDeclaration(42) at 3", "Insert VariableDeclarationFragment(41) into FieldDeclaration(42) at 4", "Insert Modifier: private(43) into FieldDeclaration(50) at 0", "Insert Modifier: static(44) into FieldDeclaration(50) at 1", "Insert Modifier: final(45) into FieldDeclaration(50) at 2", "Insert PrimitiveType: int(46) into FieldDeclaration(50) at 3", "Insert VariableDeclarationFragment(49) into FieldDeclaration(50) at 4", "Insert Modifier: private(51) into FieldDeclaration(58) at 0", "Insert Modifier: static(52) into FieldDeclaration(58) at 1", "Insert Modifier: final(53) into FieldDeclaration(58) at 2", "Insert PrimitiveType: int(54) into FieldDeclaration(58) at 3", "Insert VariableDeclarationFragment(57) into FieldDeclaration(58) at 4", "Insert Modifier: private(59) into FieldDeclaration(66) at 0", "Insert Modifier: static(60) into FieldDeclaration(66) at 1", "Insert Modifier: final(61) into FieldDeclaration(66) at 2", "Insert PrimitiveType: int(62) into FieldDeclaration(66) at 3", "Insert VariableDeclarationFragment(65) into FieldDeclaration(66) at 4", "Insert Modifier: private(67) into FieldDeclaration(74) at 0", "Insert Modifier: static(68) into FieldDeclaration(74) at 1", "Insert Modifier: final(69) into FieldDeclaration(74) at 2", "Insert PrimitiveType: int(70) into FieldDeclaration(74) at 3", "Insert VariableDeclarationFragment(73) into FieldDeclaration(74) at 4", "Insert Modifier: private(75) into FieldDeclaration(82) at 0", "Insert Modifier: static(76) into FieldDeclaration(82) at 1", "Insert Modifier: final(77) into FieldDeclaration(82) at 2", "Insert PrimitiveType: int(78) into FieldDeclaration(82) at 3", "Insert VariableDeclarationFragment(81) into FieldDeclaration(82) at 4", "Insert Modifier: private(83) into FieldDeclaration(90) at 0", "Insert Modifier: static(84) into FieldDeclaration(90) at 1", "Insert Modifier: final(85) into FieldDeclaration(90) at 2", "Insert PrimitiveType: long(86) into FieldDeclaration(90) at 3", "Insert VariableDeclarationFragment(89) into FieldDeclaration(90) at 4", "Insert Modifier: private(91) into FieldDeclaration(98) at 0", "Insert Modifier: static(92) into FieldDeclaration(98) at 1", "Insert Modifier: final(93) into FieldDeclaration(98) at 2", "Insert PrimitiveType: int(94) into FieldDeclaration(98) at 3", "Insert VariableDeclarationFragment(97) into FieldDeclaration(98) at 4", "Move Javadoc(67) into MethodDeclaration(175) at 0", "Move Modifier: public(68) into MethodDeclaration(175) at 1", "Move SimpleName: ZipLong(69) into MethodDeclaration(175) at 2", "Move SingleVariableDeclaration(75) into MethodDeclaration(175) at 3", "Move SingleVariableDeclaration(79) into MethodDeclaration(175) at 4", "Insert Block(174) into MethodDeclaration(175) at 5", "Insert Javadoc(182) into MethodDeclaration(194) at 0", "Insert Modifier: public(183) into MethodDeclaration(194) at 1", "Move ArrayType: byte[](73) into MethodDeclaration(194) at 2", "Insert SimpleName: getBytes(187) into MethodDeclaration(194) at 3", "Insert Block(193) into MethodDeclaration(194) at 4", "Insert Javadoc(201) into MethodDeclaration(208) at 0", "Insert Modifier: public(202) into MethodDeclaration(208) at 1", "Insert PrimitiveType: long(203) into MethodDeclaration(208) at 2", "Insert SimpleName: getValue(204) into MethodDeclaration(208) at 3", "Insert Block(207) into MethodDeclaration(208) at 4", "Insert Modifier: static(218) into MethodDeclaration(294) at 2", "Insert SingleVariableDeclaration(225) into MethodDeclaration(294) at 5", "Insert Modifier: static(307) into MethodDeclaration(370) at 2", "Insert SingleVariableDeclaration(314) into MethodDeclaration(370) at 5", "Insert SingleVariableDeclaration(317) into MethodDeclaration(370) at 6", "Move Javadoc(275) into MethodDeclaration(394) at 0", "Move Modifier: public(276) into MethodDeclaration(394) at 1", "Insert Modifier: static(380) into MethodDeclaration(394) at 2", "Insert PrimitiveType: long(381) into MethodDeclaration(394) at 3", "Insert SimpleName: getValue(382) into MethodDeclaration(394) at 4", "Insert SingleVariableDeclaration(387) into MethodDeclaration(394) at 5", "Insert Block(393) into MethodDeclaration(394) at 6", "Insert Javadoc(444) into MethodDeclaration(453) at 0", "Insert Modifier: public(445) into MethodDeclaration(453) at 1", "Move PrimitiveType: int(277) into MethodDeclaration(453) at 2", "Move SimpleName: hashCode(278) into MethodDeclaration(453) at 3", "Move Block(283) into MethodDeclaration(453) at 4", "Update TextElement: Utility class that represents a four byte integer with conversion rules for(2) to Utility class that represents a four byte integer with conversion", "Update TextElement: the big endian byte order of ZIP files.(3) to rules for the big endian byte order of ZIP files.", "Insert SimpleName: WORD(15) into VariableDeclarationFragment(17) at 0", "Insert NumberLiteral: 4(16) into VariableDeclarationFragment(17) at 1", "Insert SimpleName: BYTE_MASK(23) into VariableDeclarationFragment(25) at 0", "Insert NumberLiteral: 0xFF(24) into VariableDeclarationFragment(25) at 1", "Insert SimpleName: BYTE_1(31) into VariableDeclarationFragment(33) at 0", "Insert NumberLiteral: 1(32) into VariableDeclarationFragment(33) at 1", "Insert SimpleName: BYTE_1_MASK(39) into VariableDeclarationFragment(41) at 0", "Insert NumberLiteral: 0xFF00(40) into VariableDeclarationFragment(41) at 1", "Insert SimpleName: BYTE_1_SHIFT(47) into VariableDeclarationFragment(49) at 0", "Insert NumberLiteral: 8(48) into VariableDeclarationFragment(49) at 1", "Insert SimpleName: BYTE_2(55) into VariableDeclarationFragment(57) at 0", "Insert NumberLiteral: 2(56) into VariableDeclarationFragment(57) at 1", "Insert SimpleName: BYTE_2_MASK(63) into VariableDeclarationFragment(65) at 0", "Insert NumberLiteral: 0xFF0000(64) into VariableDeclarationFragment(65) at 1", "Insert SimpleName: BYTE_2_SHIFT(71) into VariableDeclarationFragment(73) at 0", "Insert NumberLiteral: 16(72) into VariableDeclarationFragment(73) at 1", "Insert SimpleName: BYTE_3(79) into VariableDeclarationFragment(81) at 0", "Insert NumberLiteral: 3(80) into VariableDeclarationFragment(81) at 1", "Insert SimpleName: BYTE_3_MASK(87) into VariableDeclarationFragment(89) at 0", "Insert NumberLiteral: 0xFF000000L(88) into VariableDeclarationFragment(89) at 1", "Insert SimpleName: BYTE_3_SHIFT(95) into VariableDeclarationFragment(97) at 0", "Insert NumberLiteral: 24(96) into VariableDeclarationFragment(97) at 1", "Update SimpleName: m_value(13) to value", "Move ArrayType: byte[](144) into SingleVariableDeclaration(139) at 0", "Update SimpleName: buffer(50) to bytes", "Move ArrayType: byte[](148) into SingleVariableDeclaration(162) at 0", "Update SimpleName: buffer(74) to bytes", "Move ExpressionStatement(92) into Block(174) at 0", "Insert TagElement(177) into Javadoc(182) at 0", "Move TagElement: @since(135) into Javadoc(182) at 1", "Insert TagElement: @return(181) into Javadoc(182) at 2", "Insert ReturnStatement(192) into Block(193) at 0", "Insert TagElement(196) into Javadoc(201) at 0", "Move TagElement: @since(216) into Javadoc(201) at 1", "Insert TagElement: @return(200) into Javadoc(201) at 2", "Insert ReturnStatement(206) into Block(207) at 0", "Insert TagElement: @param(213) into Javadoc(216) at 1", "Insert PrimitiveType: long(223) into SingleVariableDeclaration(225) at 0", "Insert SimpleName: value(224) into SingleVariableDeclaration(225) at 1", "Insert TagElement: @param(299) into Javadoc(305) at 1", "Insert TagElement: @param(302) into Javadoc(305) at 2", "Insert ArrayType: byte[](312) into SingleVariableDeclaration(314) at 0", "Insert SimpleName: bytes(313) into SingleVariableDeclaration(314) at 1", "Insert PrimitiveType: int(315) into SingleVariableDeclaration(317) at 0", "Insert SimpleName: offset(316) into SingleVariableDeclaration(317) at 1", "Insert VariableDeclarationStatement(331) into Block(369) at 0", "Insert ExpressionStatement(344) into Block(369) at 1", "Insert ExpressionStatement(357) into Block(369) at 2", "Insert ExpressionStatement(366) into Block(369) at 3", "Insert TagElement: @param(375) into Javadoc(378) at 1", "Insert ArrayType: byte[](385) into SingleVariableDeclaration(387) at 0", "Insert SimpleName: bytes(386) into SingleVariableDeclaration(387) at 1", "Insert ReturnStatement(392) into Block(393) at 0", "Insert TagElement(396) into Javadoc(404) at 0", "Move TagElement(226) into Javadoc(444) at 0", "Insert TagElement: @return(441) into Javadoc(444) at 1", "Move TagElement: @since(274) into Javadoc(444) at 2", "Update TextElement:  the value(19) to  the long to store as a ZipLong", "Update SimpleName: buffer(38) to bytes", "Update TextElement:  the buffer to read data from(39) to  the bytes to store as a ZipLong", "Update SimpleName: buffer(52) to bytes", "Update SimpleName: buffer(59) to bytes", "Update TextElement:  buffer to read data from(60) to  the bytes to store as a ZipLong", "Update TextElement:  offset into buffer(63) to  the offset to start", "Insert TextElement: Get value as four bytes in big endian byte order.(176) into TagElement(177) at 0", "Insert TextElement:  value as four bytes in big endian order(180) into TagElement: @return(181) at 0", "Insert MethodInvocation(191) into ReturnStatement(192) at 0", "Insert TextElement: Get value as Java long.(195) into TagElement(196) at 0", "Insert TextElement:  value as a long(199) into TagElement: @return(200) at 0", "Insert SimpleName: value(205) into ReturnStatement(206) at 0", "Update TextElement: Get value as two bytes in big endian byte order.(130) to Get value as four bytes in big endian byte order.", "Insert SimpleName: value(211) into TagElement: @param(213) at 0", "Insert TextElement:  the value to convert(212) into TagElement: @param(213) at 1", "Update TextElement:  The value as bytes(132) to  value as four bytes in big endian byte order", "Move ArrayType: byte[](49) into VariableDeclarationStatement(236) at 0", "Update TextElement: Get value as Java int.(211) to Helper method to get the value as a Java long from four bytes starting at given array offset", "Insert SimpleName: bytes(297) into TagElement: @param(299) at 0", "Insert TextElement:  the array of bytes(298) into TagElement: @param(299) at 1", "Insert SimpleName: offset(300) into TagElement: @param(302) at 0", "Insert TextElement:  the offset to start(301) into TagElement: @param(302) at 1", "Update TextElement:  The value(213) to  the correspondanding Java long value", "Insert PrimitiveType: byte(310) into ArrayType: byte[](312) at 0", "Insert Dimension(311) into ArrayType: byte[](312) at 1", "Insert PrimitiveType: long(318) into VariableDeclarationStatement(331) at 0", "Insert VariableDeclarationFragment(330) into VariableDeclarationStatement(331) at 1", "Insert Assignment: +=(343) into ExpressionStatement(344) at 0", "Insert Assignment: +=(356) into ExpressionStatement(357) at 0", "Insert Assignment: +=(365) into ExpressionStatement(366) at 0", "Update SimpleName: m_value(221) to value", "Update TextElement: Override to make two instances with same value equal.(269) to Helper method to get the value as a Java long from a four-byte array", "Insert SimpleName: bytes(373) into TagElement: @param(375) at 0", "Insert TextElement:  the array of bytes(374) into TagElement: @param(375) at 1", "Update TextElement:  the hashcode(271) to  the correspondanding Java long value", "Insert PrimitiveType: byte(383) into ArrayType: byte[](385) at 0", "Insert Dimension(384) into ArrayType: byte[](385) at 1", "Insert MethodInvocation(391) into ReturnStatement(392) at 0", "Insert TextElement: Override to make two instances with same value equal.(395) into TagElement(396) at 0", "Update TextElement:  the object to compare against(228) to  an object to compare", "Update TextElement:  true if equyal, false otherwise(230) to  true if the objects are equal", "Insert TextElement:  the value stored in the ZipLong(440) into TagElement: @return(441) at 0", "Insert FieldAccess(119) into Assignment: =(121) at 0", "Update SimpleName: m_value(80) to value", "Insert MethodInvocation(171) into Assignment: =(172) at 1", "Insert SimpleName: ZipLong(188) into MethodInvocation(191) at 0", "Insert SimpleName: getBytes(189) into MethodInvocation(191) at 1", "Insert SimpleName: value(190) into MethodInvocation(191) at 2", "Insert SimpleName: value(319) into VariableDeclarationFragment(330) at 0", "Insert InfixExpression: &(329) into VariableDeclarationFragment(330) at 1", "Insert SimpleName: value(332) into Assignment: +=(343) at 0", "Insert InfixExpression: &(342) into Assignment: +=(343) at 1", "Insert SimpleName: value(345) into Assignment: +=(356) at 0", "Insert InfixExpression: &(355) into Assignment: +=(356) at 1", "Insert SimpleName: value(358) into Assignment: +=(365) at 0", "Insert ParenthesizedExpression(364) into Assignment: +=(365) at 1", "Insert SimpleName: getValue(388) into MethodInvocation(391) at 0", "Insert SimpleName: bytes(389) into MethodInvocation(391) at 1", "Insert NumberLiteral: 0(390) into MethodInvocation(391) at 2", "Update SimpleName: m_value(257) to value", "Update SimpleName: m_value(280) to value", "Insert ThisExpression(117) into FieldAccess(119) at 0", "Insert SimpleName: value(118) into FieldAccess(119) at 1", "Insert SimpleName: ZipLong(167) into MethodInvocation(171) at 0", "Insert SimpleName: getValue(168) into MethodInvocation(171) at 1", "Insert SimpleName: bytes(169) into MethodInvocation(171) at 2", "Insert SimpleName: offset(170) into MethodInvocation(171) at 3", "Insert ArrayType: byte[](232) into ArrayCreation(234) at 0", "Insert SimpleName: WORD(233) into ArrayCreation(234) at 1", "Insert SimpleName: BYTE_1(250) into ArrayAccess(251) at 1", "Insert SimpleName: BYTE_2(264) into ArrayAccess(265) at 1", "Insert SimpleName: BYTE_3(278) into ArrayAccess(279) at 1", "Insert ParenthesizedExpression(327) into InfixExpression: &(329) at 0", "Insert SimpleName: BYTE_3_MASK(328) into InfixExpression: &(329) at 1", "Insert ParenthesizedExpression(340) into InfixExpression: &(342) at 0", "Insert SimpleName: BYTE_2_MASK(341) into InfixExpression: &(342) at 1", "Insert ParenthesizedExpression(353) into InfixExpression: &(355) at 0", "Insert SimpleName: BYTE_1_MASK(354) into InfixExpression: &(355) at 1", "Insert InfixExpression: &(363) into ParenthesizedExpression(364) at 0", "Insert PrimitiveType: byte(230) into ArrayType: byte[](232) at 0", "Insert Dimension(231) into ArrayType: byte[](232) at 1", "Insert InfixExpression: <<(326) into ParenthesizedExpression(327) at 0", "Insert InfixExpression: <<(339) into ParenthesizedExpression(340) at 0", "Insert InfixExpression: <<(352) into ParenthesizedExpression(353) at 0", "Insert ArrayAccess(361) into InfixExpression: &(363) at 0", "Insert SimpleName: BYTE_MASK(362) into InfixExpression: &(363) at 1", "Insert SimpleName: BYTE_1_SHIFT(257) into InfixExpression: >>(258) at 1", "Insert SimpleName: BYTE_2_SHIFT(271) into InfixExpression: >>(272) at 1", "Insert SimpleName: BYTE_3_SHIFT(285) into InfixExpression: >>(286) at 1", "Insert ArrayAccess(324) into InfixExpression: <<(326) at 0", "Insert SimpleName: BYTE_3_SHIFT(325) into InfixExpression: <<(326) at 1", "Insert ArrayAccess(337) into InfixExpression: <<(339) at 0", "Insert SimpleName: BYTE_2_SHIFT(338) into InfixExpression: <<(339) at 1", "Insert ArrayAccess(350) into InfixExpression: <<(352) at 0", "Insert SimpleName: BYTE_1_SHIFT(351) into InfixExpression: <<(352) at 1", "Insert SimpleName: bytes(359) into ArrayAccess(361) at 0", "Insert SimpleName: offset(360) into ArrayAccess(361) at 1", "Update SimpleName: m_value(157) to value", "Insert SimpleName: BYTE_MASK(242) into InfixExpression: &(243) at 1", "Insert SimpleName: bytes(320) into ArrayAccess(324) at 0", "Insert InfixExpression: +(323) into ArrayAccess(324) at 1", "Insert SimpleName: bytes(333) into ArrayAccess(337) at 0", "Insert InfixExpression: +(336) into ArrayAccess(337) at 1", "Insert SimpleName: bytes(346) into ArrayAccess(350) at 0", "Insert InfixExpression: +(349) into ArrayAccess(350) at 1", "Update SimpleName: m_value(169) to value", "Insert SimpleName: BYTE_1_MASK(254) into InfixExpression: &(255) at 1", "Update SimpleName: m_value(183) to value", "Insert SimpleName: BYTE_2_MASK(268) into InfixExpression: &(269) at 1", "Update SimpleName: m_value(197) to value", "Insert SimpleName: BYTE_3_MASK(282) into InfixExpression: &(283) at 1", "Insert SimpleName: offset(321) into InfixExpression: +(323) at 0", "Insert SimpleName: BYTE_3(322) into InfixExpression: +(323) at 1", "Insert SimpleName: offset(334) into InfixExpression: +(336) at 0", "Insert SimpleName: BYTE_2(335) into InfixExpression: +(336) at 1", "Insert SimpleName: offset(347) into InfixExpression: +(349) at 0", "Insert SimpleName: BYTE_1(348) into InfixExpression: +(349) at 1", "Delete Modifier: final(26)", "Delete SimpleName: m_value(30)", "Delete Modifier: final(46)", "Delete Modifier: final(70)", "Delete Modifier: final(76)", "Delete SimpleName: buffer(81)", "Delete SimpleName: offset(82)", "Delete NumberLiteral: 3(83)", "Delete InfixExpression: +(84)", "Delete ArrayAccess(85)", "Delete NumberLiteral: 24(86)", "Delete InfixExpression: <<(87)", "Delete ParenthesizedExpression(88)", "Delete NumberLiteral: 0xFF000000l(89)", "Delete InfixExpression: &(90)", "Delete SimpleName: m_value(93)", "Delete SimpleName: buffer(94)", "Delete SimpleName: offset(95)", "Delete NumberLiteral: 2(96)", "Delete InfixExpression: +(97)", "Delete ArrayAccess(98)", "Delete NumberLiteral: 16(99)", "Delete InfixExpression: <<(100)", "Delete ParenthesizedExpression(101)", "Delete NumberLiteral: 0xFF0000(102)", "Delete InfixExpression: &(103)", "Delete Assignment: +=(104)", "Delete ExpressionStatement(105)", "Delete SimpleName: m_value(106)", "Delete SimpleName: buffer(107)", "Delete SimpleName: offset(108)", "Delete NumberLiteral: 1(109)", "Delete InfixExpression: +(110)", "Delete ArrayAccess(111)", "Delete NumberLiteral: 8(112)", "Delete InfixExpression: <<(113)", "Delete ParenthesizedExpression(114)", "Delete NumberLiteral: 0xFF00(115)", "Delete InfixExpression: &(116)", "Delete Assignment: +=(117)", "Delete ExpressionStatement(118)", "Delete SimpleName: m_value(119)", "Delete SimpleName: buffer(120)", "Delete SimpleName: offset(121)", "Delete ArrayAccess(122)", "Delete NumberLiteral: 0xFF(123)", "Delete InfixExpression: &(124)", "Delete ParenthesizedExpression(125)", "Delete Assignment: +=(126)", "Delete ExpressionStatement(127)", "Delete Block(128)", "Delete MethodDeclaration(129)", "Delete NumberLiteral: 4(149)", "Delete NumberLiteral: 0xFF(158)", "Delete NumberLiteral: 1(166)", "Delete NumberLiteral: 0xFF00(170)", "Delete NumberLiteral: 8(173)", "Delete NumberLiteral: 2(180)", "Delete NumberLiteral: 0xFF0000(184)", "Delete NumberLiteral: 16(187)", "Delete NumberLiteral: 3(194)", "Delete NumberLiteral: 0xFF000000l(198)", "Delete NumberLiteral: 24(201)", "Delete Modifier: final(238)", "Delete MethodDeclaration(284)"]}}, {"ZipOutputStream_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: java.io.File to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.io.FileOutputStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.io.FilterOutputStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: java.io.RandomAccessFile to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: java.util.Vector to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS TypeDeclaration: class to CompilationUnit at 17", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: level to InfixExpression: < at 0", "INS ExpressionStatement to Block at 15", "INS TextElement:  an <code>int</code> from java.util.zip.ZipEntry to TagElement: @param at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: flush to MethodDeclaration at 3", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: entry to InfixExpression: == at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: seek to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" instead of \" to InfixExpression: + at 4", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: getTime to MethodInvocation at 1", "INS FieldAccess to Assignment: = at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: zipMethod to InfixExpression: == at 0", "INS SimpleName: written to Assignment: += at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS MethodInvocation to CastExpression at 1", "INS QualifiedName: name.length to MethodInvocation at 2", "INS Javadoc to MethodDeclaration at 0", "INS ReturnStatement to Block at 5", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: flush to MethodInvocation at 1", "INS SimpleName: time to MethodInvocation at 0", "INS ParenthesizedExpression to InfixExpression: | at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: level to FieldAccess at 1", "INS SimpleName: written to Assignment: += at 0", "INS ExpressionStatement to Block at 16", "INS SimpleName: realCrc to VariableDeclarationFragment at 0", "INS SimpleName: localDataStart to MethodInvocation at 2", "INS TagElement: @since to Javadoc at 1", "INS SimpleName: deflateUntilInputIsNeeded to MethodDeclaration at 2", "INS Block to IfStatement at 2", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @since to Javadoc at 2", "INS SimpleName: setLength to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: len to InfixExpression: > at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS IfStatement to Block at 4", "INS SimpleName: zipMethod to MethodInvocation at 2", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: BYTE_MASK to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: deflate to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: written to InfixExpression: - at 0", "INS TextElement: Convert a Date object to a DOS date/time field. to TagElement at 0", "INS TextElement: the  to TagElement at 15", "INS SimpleName: ze to MethodInvocation at 2", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: STORED to MemberRef at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS SimpleName: ZERO to MethodInvocation at 1", "INS StringLiteral: \"uncompressed size is required for\" to InfixExpression: + at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS InfixExpression: == to IfStatement at 0", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS TextElement:  the file to zip to to TagElement: @param at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: size to MethodInvocation at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: b to SingleVariableDeclaration at 1", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: out to MethodInvocation at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS SimpleName: offsets to MethodInvocation at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS ThrowStatement to Block at 0", "INS VariableDeclarationStatement to Block at 3", "INS ExpressionStatement to Block at 2", "INS Modifier: protected to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: raf to Assignment: = at 0", "INS TextElement:  the value to treat as unsigned int. to TagElement: @param at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS NullLiteral to SuperConstructorInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS TextElement:  on error to TagElement: @throws at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: | to MethodInvocation at 2", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: raf to InfixExpression: != at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: >> to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 0", "INS QualifiedName: Integer.MAX_VALUE to CastExpression at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: time to MethodInvocation at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS QualifiedName: name.length to Assignment: += at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: encoding to VariableDeclarationFragment at 0", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS TextElement: <p>This class will try to use  to TagElement at 6", "INS ExpressionStatement to Block at 5", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS QualifiedName: data.length to MethodInvocation at 3", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: level to InfixExpression: != at 1", "INS Modifier: private to FieldDeclaration at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: writeOut to MethodInvocation at 0", "INS TagElement to Javadoc at 0", "INS ExpressionStatement to Block at 15", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: LFH_SIG to MethodInvocation at 1", "INS SimpleName: out to TagElement: @param at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: entry to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: IOException to TagElement: @throws at 0", "INS TagElement: @throws to Javadoc at 2", "INS ThrowStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: raf to Assignment: = at 0", "INS SimpleName: setInput to MethodInvocation at 1", "INS ExpressionStatement to Block at 17", "INS SimpleName: written to Assignment: += at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: raf to InfixExpression: != at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: ze to TagElement: @param at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: dataStart to InfixExpression: - at 1", "INS MethodInvocation to InfixExpression: + at 0", "INS SimpleName: entry to VariableDeclarationFragment at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: raf to InfixExpression: != at 0", "INS SimpleName: writeLocalFileHeader to MethodInvocation at 0", "INS TextElement:  the encoding value to TagElement: @param at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: length to InfixExpression: - at 0", "INS ExpressionStatement to Block at 29", "INS IfStatement to Block at 0", "INS SimpleName: ze to TagElement: @param at 0", "INS Modifier: protected to FieldDeclaration at 1", "INS SimpleName: Vector to SimpleType: Vector at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: offset to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: ZERO to MethodInvocation at 1", "INS NumberLiteral: 512 to VariableDeclarationFragment at 1", "INS TextElement: Writes a single byte to ZIP entry. to TagElement at 0", "INS SimpleName: cdOffset to VariableDeclarationFragment at 0", "INS SimpleName: written to InfixExpression: - at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement:  STORED to TagElement: @link at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 34", "INS SimpleName: extra to MethodInvocation at 1", "INS TagElement: @since to Javadoc at 2", "INS SimpleName: def to MethodInvocation at 0", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 2", "INS SimpleName: IOException to TagElement: @throws at 0", "INS SimpleName: written to MethodInvocation at 2", "INS SimpleName: ze to SingleVariableDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 12", "INS SimpleName: WORD to Assignment: += at 1", "INS TagElement: @throws to Javadoc at 3", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  1.14 to TagElement: @since at 0", "INS Javadoc to TypeDeclaration: class at 0", "INS InfixExpression: * to InfixExpression: + at 0", "INS FieldDeclaration to TypeDeclaration: class at 15", "INS SimpleName: extra to VariableDeclarationFragment at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS PrefixExpression: ! to WhileStatement at 0", "INS Block to IfStatement at 2", "INS Javadoc to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS SimpleName: addElement to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: deflateUntilInputIsNeeded to MethodInvocation at 0", "INS SimpleName: getSize to MethodInvocation at 1", "INS SimpleName: file to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 18", "INS SimpleName: ZERO to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: finished to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS NumberLiteral: 8 to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: + to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to CatchClause at 1", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 50", "INS MethodDeclaration to TypeDeclaration: class at 54", "INS SimpleName: i to InfixExpression: < at 0", "INS BooleanLiteral: true to ClassInstanceCreation at 2", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS ExpressionStatement to Block at 9", "INS Assignment: += to ExpressionStatement at 0", "INS StringLiteral: \"\" to VariableDeclarationFragment at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 4", "INS TextElement:  can be called.</p> to TagElement at 20", "INS SimpleName: setTime to MethodInvocation at 1", "INS SimpleName: WORD to Assignment: += at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS TextElement:  the number of bytes to write to TagElement: @param at 1", "INS QualifiedName: Deflater.BEST_COMPRESSION to InfixExpression: > at 1", "INS TextElement: Assumes a negative integer really is a positive integer that to TagElement at 0", "INS TextElement: This Deflater object is used for output. to TagElement at 0", "INS ArrayType: byte[] to FieldDeclaration at 4", "INS StringLiteral: \"bad size for entry \" to InfixExpression: + at 0", "INS SimpleName: done to InfixExpression: + at 1", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS Modifier: final to VariableDeclarationStatement at 0", "INS TextElement:  method, here setting the CRC and to TagElement at 17", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS StringLiteral: \" method when not writing to a file\" to InfixExpression: + at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: getFilePointer to MethodInvocation at 1", "INS SimpleName: ZipOutputStream to MethodDeclaration at 2", "INS TagElement: @throws to Javadoc at 2", "INS SimpleName: length to MethodInvocation at 4", "INS NumberLiteral: 1 to InfixExpression: >> at 1", "INS Javadoc to MethodDeclaration at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: != at 1", "INS TextElement: entry? to TagElement at 1", "INS InfixExpression: == to IfStatement at 0", "INS InfixExpression: - to Assignment: = at 1", "INS IfStatement to Block at 0", "INS TextElement:  1.15 to TagElement: @since at 0", "INS FieldDeclaration to TypeDeclaration: class at 49", "INS SimpleName: DEFLATED to MemberRef at 0", "INS ExpressionStatement to Block at 10", "INS SimpleName: getBytes to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS MethodInvocation to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: += to ExpressionStatement at 0", "INS TextElement:  the compression level. to TagElement: @param at 1", "INS ExpressionStatement to Block at 10", "INS SimpleName: written to Assignment: += at 0", "INS ExpressionStatement to Block at 0", "INS TagElement: @throws to Javadoc at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS IfStatement to Block at 3", "INS SimpleName: crc to MethodInvocation at 0", "INS ArrayType: byte[] to FieldDeclaration at 4", "INS TextElement: href=\"http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html\">http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html</a>. to TagElement at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleType: IOException to MethodDeclaration at 4", "INS Modifier: static to FieldDeclaration at 2", "INS SimpleName: ze to MethodInvocation at 0", "INS SimpleName: level to MethodInvocation at 2", "INS TagElement: @since to Javadoc at 2", "INS TextElement:  the byte to write to TagElement: @param at 1", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS TagElement: @throws to Javadoc at 2", "INS SimpleName: entries to MethodInvocation at 0", "INS SimpleName: level to ClassInstanceCreation at 1", "INS ParenthesizedExpression to InfixExpression: | at 2", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: finish to MethodDeclaration at 3", "INS SimpleName: DOS_TIME_MIN to VariableDeclarationFragment at 0", "INS ForStatement to Block at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: writeCentralFileHeader to MethodDeclaration at 3", "INS ExpressionStatement to Block at 30", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS TextElement:  1.14 to TagElement: @since at 0", "INS SimpleName: method to VariableDeclarationFragment at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: time to TagElement: @param at 0", "INS IfStatement to Block at 0", "INS SimpleName: dataStart to InfixExpression: - at 1", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: getSize to MethodInvocation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: reset to MethodInvocation at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: raf to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ParenthesizedExpression to InfixExpression: | at 4", "INS SimpleName: crc to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS FieldDeclaration to TypeDeclaration: class at 47", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: raf to InfixExpression: == at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Block to TryStatement at 0", "INS SimpleName: getInternalAttributes to MethodInvocation at 1", "INS TextElement:  1.14 to TagElement: @since at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: setComment to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: ze to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: getCrc to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: setLevel to MethodDeclaration at 3", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS NumberLiteral: 12 to Assignment: += at 1", "INS ExpressionStatement to Block at 21", "INS ExpressionStatement to Block at 2", "INS TextElement: Creates a new ZIP OutputStream writing to a File.  Will use to TagElement at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 1 to ArrayCreation at 1", "INS ExpressionStatement to Block at 2", "INS TextElement: uncompressed size for  to TagElement at 3", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: b to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: method to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 1", "INS TagElement: @param to Javadoc at 3", "INS ExpressionStatement to Block at 4", "INS SimpleName: Vector to SimpleType: Vector at 0", "INS SimpleName: offset to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: cdLength to Assignment: = at 0", "INS ExpressionStatement to Block at 6", "INS InfixExpression: < to IfStatement at 0", "INS SimpleType: File to SingleVariableDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 27", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: entries to MethodInvocation at 0", "INS TextElement: Writes the &quot;End of central dir record&quot;. to TagElement at 0", "INS FieldDeclaration to TypeDeclaration: class at 16", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getTime to MethodInvocation at 1", "INS PrimitiveType: int to FieldDeclaration at 3", "INS TextElement: has wrapped around and re-creates the original value. to TagElement at 1", "INS InfixExpression: != to ReturnStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: SHORT to Assignment: += at 1", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS SimpleName: getMethod to MethodInvocation at 1", "INS SimpleName: FileOutputStream to SimpleType: FileOutputStream at 0", "INS InfixExpression: - to MethodInvocation at 4", "INS MethodDeclaration to TypeDeclaration: class at 56", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: getCrc to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 2", "INS SimpleName: ze to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 5", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS TagElement: @link to TagElement at 16", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS SimpleName: data to MethodInvocation at 1", "INS TextElement:  on error to TagElement: @throws at 1", "INS TextElement:  1.26 to TagElement: @since at 0", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS InfixExpression: + to ReturnStatement at 0", "INS SimpleName: offset to SingleVariableDeclaration at 1", "INS SimpleName: WORD to Assignment: += at 1", "INS SimpleName: cdLength to VariableDeclarationFragment at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: b to InfixExpression: & at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleType: ZipEntry to SingleVariableDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 3", "INS TextElement:  1.14 to TagElement: @since at 0", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS SimpleName: writeLocalFileHeader to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: ze to Assignment: = at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: SHORT to Assignment: += at 1", "INS QualifiedName: commentB.length to Assignment: += at 1", "INS IfStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: java.util.zip.DeflaterOutputStream to TagElement: @link at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: ze to MethodInvocation at 0", "INS SimpleName: CFH_SIG to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 5", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: comment to Assignment: = at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: SHORT to Assignment: += at 1", "INS InfixExpression: + to MethodInvocation at 3", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: def to MethodInvocation at 0", "INS TextElement: <p>For seekable streams, you don't need to calculate the CRC or to TagElement at 2", "INS SimpleName: def to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: WORD to Assignment: += at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS BooleanLiteral: false to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 3", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS TextElement: Flushes this output stream and forces any buffered output bytes to TagElement at 0", "INS Modifier: private to FieldDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 60", "INS Modifier: protected to MethodDeclaration at 1", "INS TagElement: @throws to Javadoc at 1", "INS SimpleName: offset to MethodInvocation at 3", "INS Modifier: protected to FieldDeclaration at 1", "INS Assignment: += to ExpressionStatement at 0", "INS Block to ForStatement at 3", "INS SimpleName: deflateUntilInputIsNeeded to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: fullblocks to InfixExpression: < at 1", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleType: ZipEntry to FieldDeclaration at 2", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: comm to VariableDeclarationFragment at 0", "INS TagElement: @throws to Javadoc at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: raf to InfixExpression: == at 0", "INS MethodInvocation to ReturnStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: getBytes to MethodInvocation at 1", "INS TagElement: @since to Javadoc at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: raf to MethodInvocation at 0", "INS SimpleName: BUFFER_SIZE to VariableDeclarationFragment at 0", "INS CatchClause to TryStatement at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Modifier: final to MethodDeclaration at 2", "INS SimpleName: buff to ArrayAccess at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: buff to VariableDeclarationFragment at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @since to Javadoc at 1", "INS TextElement: random access if possible. to TagElement at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: BUFFER_SIZE to ArrayCreation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS IfStatement to Block at 11", "INS Block to MethodDeclaration at 5", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS TagElement to Javadoc at 0", "INS TextElement: Optional random access output. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS SimpleName: getSeconds to MethodInvocation at 1", "INS SimpleName: hasCompressionLevelChanged to Assignment: = at 0", "INS TagElement: @since to Javadoc at 3", "INS TextElement:   if an I/O error occurs. to TagElement: @exception at 1", "INS Block to IfStatement at 1", "INS SimpleName: DEFLATED to InfixExpression: == at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: data to MethodInvocation at 2", "INS TextElement: Data for local header data to TagElement at 0", "INS SimpleName: setMethod to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS TypeDeclaration: class to CompilationUnit at 17", "INS TextElement:  the entry to write to TagElement: @param at 1", "INS SimpleName: getBytes to MethodInvocation at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: encoding to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS TagElement: @since to Javadoc at 1", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS NumberLiteral: 10 to MethodInvocation at 2", "INS SimpleName: FilterOutputStream to SimpleType: FilterOutputStream at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS SimpleName: finish to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: writeOut to MethodDeclaration at 4", "INS SimpleName: setCrc to MethodInvocation at 1", "INS SimpleName: toDosTime to MethodInvocation at 0", "INS TagElement to Javadoc at 0", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: comment to VariableDeclarationFragment at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS TextElement:  when you know that the output is going to go to a to TagElement at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getEncoding to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: deflate to MethodInvocation at 1", "INS Assignment: += to ExpressionStatement at 0", "INS CastExpression to MethodInvocation at 1", "INS StringLiteral: \"crc checksum is required for STORED\" to InfixExpression: + at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: adjustToLong to MethodDeclaration at 4", "INS ArrayType: byte[] to FieldDeclaration at 4", "INS ExpressionStatement to Block at 13", "INS SimpleName: raf to InfixExpression: == at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: size to VariableDeclarationFragment at 0", "INS TextElement:  the number of bytes to write to TagElement: @param at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS ExpressionStatement to Block at 4", "INS SimpleName: comment to TagElement: @param at 0", "INS Modifier: private to FieldDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 35", "INS Modifier: protected to FieldDeclaration at 1", "INS PrimitiveType: long to FieldDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS InfixExpression: > to IfStatement at 0", "INS ExpressionStatement to Block at 5", "INS ExpressionStatement to Block at 1", "INS SimpleName: DEFLATER_BLOCK_SIZE to InfixExpression: * at 1", "INS SimpleName: SHORT to VariableDeclarationFragment at 0", "INS SimpleName: LZERO to MethodInvocation at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: WORD to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement: . to TagElement at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @throws to Javadoc at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 8192 to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS ExpressionStatement to Block at 23", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TextElement:  1.1 to TagElement: @since at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: written to Assignment: += at 0", "INS ExpressionStatement to Block at 28", "INS Modifier: protected to MethodDeclaration at 1", "INS ArrayType: byte[] to FieldDeclaration at 4", "INS TagElement: @return to Javadoc at 2", "INS Assignment: += to ExpressionStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: offset to MethodInvocation at 2", "INS PrimitiveType: int to FieldDeclaration at 4", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS TagElement: @exception to Javadoc at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement: Revision 1.13.</p> to TagElement at 5", "INS SimpleName: data to TagElement: @param at 0", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS SimpleName: getBytes to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 17", "INS ExpressionStatement to Block at 20", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: realCrc to MethodInvocation at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: level to VariableDeclarationFragment at 0", "INS QualifiedName: name.length to Assignment: += at 1", "INS MethodDeclaration to TypeDeclaration: class at 35", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: DEFLATED to VariableDeclarationFragment at 0", "INS SimpleName: length to TagElement: @param at 0", "INS Block to IfStatement at 1", "INS QualifiedName: java.util.zip.DeflaterOutputStream to TagElement: @link at 0", "INS SimpleName: close to MethodInvocation at 1", "INS SimpleName: entries to VariableDeclarationFragment at 0", "INS SimpleName: WORD to Assignment: += at 1", "INS ExpressionStatement to Block at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleName: extra to VariableDeclarationFragment at 0", "INS TextElement: This method indicates whether this archive is writing to a seekable stream (i.e., to a random to TagElement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS Assignment: += to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to TryStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: time to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS FieldDeclaration to TypeDeclaration: class at 23", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: getDate to MethodInvocation at 1", "INS SimpleName: setLevel to MethodInvocation at 1", "INS TextElement:  the entry to write to TagElement: @param at 1", "INS ExpressionStatement to Block at 38", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: written to InfixExpression: - at 0", "INS SimpleName: time to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 53", "INS SimpleType: ZipEntry to SingleVariableDeclaration at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS Assignment: += to ExpressionStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: raf to VariableDeclarationFragment at 0", "INS TagElement: @param to Javadoc at 3", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: written to Assignment: += at 0", "INS Modifier: public to FieldDeclaration at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to CatchClause at 1", "INS SimpleName: out to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 33", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: level to FieldAccess at 1", "INS SimpleName: writeOut to MethodDeclaration at 4", "INS SimpleName: method to TagElement: @param at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS TextElement:  DeflaterOutputStream to TagElement: @link at 1", "INS IfStatement to Block at 0", "INS PrimitiveType: int to FieldDeclaration at 3", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleType: IOException to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: private to FieldDeclaration at 1", "INS TagElement: @link to TagElement at 7", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS InfixExpression: < to InfixExpression: || at 0", "INS SimpleName: fullblocks to InfixExpression: * at 0", "INS Block to MethodDeclaration at 5", "INS TextElement:  the unsigned int as a long. to TagElement: @return at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS ExpressionStatement to Block at 6", "INS SimpleName: entries to MethodInvocation at 0", "INS SimpleType: FileOutputStream to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: STORED to MemberRef at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: write to MethodDeclaration at 3", "INS Modifier: final to FieldDeclaration at 3", "INS SimpleName: DEFLATED to InfixExpression: == at 1", "INS SimpleName: elementAt to MethodInvocation at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: length to SingleVariableDeclaration at 1", "INS TagElement: @since to Javadoc at 2", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 7", "INS SimpleType: ZipEntry to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: length to MethodInvocation at 4", "INS SimpleName: written to Assignment: += at 0", "INS Dimension to ArrayType: byte[] at 1", "INS InfixExpression: != to IfStatement at 0", "INS TextElement: <p>For a list of possible values see <a to TagElement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: raf to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS ExpressionStatement to Block at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS SimpleType: IOException to MethodDeclaration at 5", "INS TextElement: Convert a Date object to a DOS date/time field. to TagElement at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: encoding to Assignment: = at 1", "INS SimpleName: put to MethodInvocation at 1", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: data.length to MethodInvocation at 2", "INS SimpleName: ze to MethodInvocation at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: done to VariableDeclarationFragment at 0", "INS TextElement:  the date as a byte array to TagElement: @return at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: raf to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getBytes to MethodInvocation at 0", "INS TextElement:  the entry to write to TagElement: @param at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TagElement to Javadoc at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: extra to MethodInvocation at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 18", "INS Block to IfStatement at 1", "INS NumberLiteral: 0x00002100L to MethodInvocation at 2", "INS Modifier: final to MethodDeclaration at 2", "INS TextElement: Offset for CRC entry in the local file header data for the to TagElement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 4", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: WORD to Assignment: += at 1", "INS SimpleName: cdOffset to MethodInvocation at 2", "INS SimpleName: offset to MethodInvocation at 3", "INS SimpleName: LZERO to MethodInvocation at 1", "INS SimpleName: write to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS InfixExpression: || to IfStatement at 0", "INS Assignment: += to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: cdOffset to InfixExpression: - at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS TextElement: Sets the compression level for subsequent entries. to TagElement at 0", "INS InfixExpression: < to ForStatement at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: getCompressedSize to MethodInvocation at 1", "INS TextElement:  the start position to write from to TagElement: @param at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: setMethod to MethodDeclaration at 3", "INS ExpressionStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: extra.length to MethodInvocation at 2", "INS SimpleName: fullblocks to VariableDeclarationFragment at 0", "INS SimpleName: length to InfixExpression: <= at 0", "INS TextElement: Reimplementation of  to TagElement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: name to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to FieldDeclaration at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Javadoc to MethodDeclaration at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 3", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS TextElement: backwards compatibility.  This class used to extend  to TagElement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: getMonth to MethodInvocation at 1", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: encoding to FieldAccess at 1", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: written to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: t to TagElement: @param at 0", "INS SimpleName: ze to TagElement: @param at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement: This buffer servers as a Deflater. to TagElement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: getBytes to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS WhileStatement to Block at 0", "INS SimpleName: DEFLATER_BLOCK_SIZE to InfixExpression: <= at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS FieldDeclaration to TypeDeclaration: class at 17", "INS NumberLiteral: 5 to InfixExpression: << at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TextElement:  the byte array to write to TagElement: @param at 1", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS QualifiedName: commentB.length to MethodInvocation at 2", "INS SimpleName: done to InfixExpression: < at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ze to MethodInvocation at 2", "INS SimpleName: writeCentralFileHeader to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @throws to Javadoc at 2", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: entries to MethodInvocation at 0", "INS TextElement:  the entry to write to TagElement: @param at 1", "INS Modifier: final to MethodDeclaration at 2", "INS TextElement: uncompressed size information is required before  to TagElement at 18", "INS ExpressionStatement to Block at 1", "INS TextElement: to be written out to the stream. to TagElement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: file to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 2", "INS Modifier: protected to MethodDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 3", "INS SimpleName: dataStart to VariableDeclarationFragment at 0", "INS TextElement: Writes next block of compressed data to the output stream. to TagElement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getCrc to MethodInvocation at 1", "INS PrimitiveType: long to FieldDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: SHORT to Assignment: += at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: seek to MethodInvocation at 1", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS TagElement: @return to Javadoc at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: out to InfixExpression: != at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: needsInput to MethodInvocation at 1", "INS QualifiedName: extra.length to MethodInvocation at 2", "INS Assignment: += to ExpressionStatement at 0", "INS Modifier: static to FieldDeclaration at 2", "INS SimpleName: written to InfixExpression: - at 0", "INS MethodDeclaration to TypeDeclaration: class at 52", "INS Block to MethodDeclaration at 5", "INS SimpleName: offset to MethodInvocation at 3", "INS Modifier: private to FieldDeclaration at 1", "INS TextElement:  up to to TagElement at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TextElement:   if an I/O error occurs. to TagElement: @exception at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: final to FieldDeclaration at 3", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS TextElement: <p>Default is Deflater.DEFAULT_COMPRESSION.</p> to TagElement at 1", "INS SimpleName: level to TagElement: @param at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: ZipEntry to CastExpression at 0", "INS SimpleName: length to Assignment: += at 1", "INS SimpleName: STORED to VariableDeclarationFragment at 0", "INS Block to IfStatement at 2", "INS NumberLiteral: 2 to VariableDeclarationFragment at 1", "INS TextElement:  1.14 to TagElement: @since at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS NullLiteral to InfixExpression: == at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 1", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: level to Assignment: = at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ExpressionStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 14", "INS TryStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS IfStatement to Block at 4", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: IOException to TagElement: @exception at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: public to TypeDeclaration: class at 1", "INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: written to Assignment: += at 0", "INS TextElement: The encoding to use for filenames and the file comment. to TagElement at 0", "INS SimpleName: DEFLATER_BLOCK_SIZE to InfixExpression: * at 1", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: data to SingleVariableDeclaration at 1", "INS SimpleName: closeEntry to MethodDeclaration at 3", "INS SimpleName: getExternalAttributes to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS TextElement: backwards compatibility.  This class used to extend  to TagElement at 2", "INS SimpleName: num to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 3", "INS TextElement: associated with the stream. to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS ParenthesizedExpression to InfixExpression: * at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: EOCD_SIG to VariableDeclarationFragment at 0", "INS SimpleName: putNextEntry to MemberRef at 0", "INS ExpressionStatement to Block at 10", "INS Block to IfStatement at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: STORED to InfixExpression: == at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: write to MethodDeclaration at 3", "INS ExpressionStatement to Block at 6", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: SHORT to Assignment: += at 1", "INS TextElement:  1.14 to TagElement: @since at 0", "INS ExpressionStatement to Block at 23", "INS TextElement:  the outputstream to zip to TagElement: @param at 1", "INS SimpleName: def to VariableDeclarationFragment at 0", "INS Block to IfStatement at 2", "INS InfixExpression: - to InfixExpression: != at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: raf to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS SimpleName: comment to FieldAccess at 1", "INS PrimitiveType: void to MethodDeclaration at 3", "INS Modifier: protected to FieldDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS TextElement: Default compression level for deflated entries. to TagElement at 0", "INS TextElement:  1.17 to TagElement: @since at 0", "INS SimpleName: b to MethodInvocation at 2", "INS ExpressionStatement to Block at 6", "INS SimpleType: FilterOutputStream to TypeDeclaration: class at 3", "INS SimpleName: year to VariableDeclarationFragment at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: toDosTime to MethodDeclaration at 4", "INS TextElement: Closes this output stream and releases any system resources to TagElement at 0", "INS PrimitiveType: long to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: b to TagElement: @param at 0", "INS FieldDeclaration to TypeDeclaration: class at 22", "INS QualifiedName: java.io.RandomAccessFile to TagElement: @link at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NullLiteral to Assignment: = at 1", "INS ParenthesizedExpression to InfixExpression: + at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ZipEntry to SimpleType: ZipEntry at 0", "INS SimpleName: ZipEntry to SimpleType: ZipEntry at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS StringLiteral: \": \" to InfixExpression: + at 2", "INS SimpleName: localDataStart to VariableDeclarationFragment at 0", "INS TextElement:  that does handle the extended to TagElement at 2", "INS Assignment: += to ExpressionStatement at 0", "INS PrimitiveType: int to FieldDeclaration at 2", "INS SimpleName: ze to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: data to TagElement: @param at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: i to SingleVariableDeclaration at 1", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: offset to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS TagElement: @throws to Javadoc at 4", "INS SimpleName: def to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS SimpleName: dataStart to Assignment: = at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: value to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: << at 0", "INS SimpleName: ZERO to MethodInvocation at 1", "INS TagElement: @exception to Javadoc at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: DEFLATER_BLOCK_SIZE to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 20", "INS NumberLiteral: 0xFF to VariableDeclarationFragment at 1", "INS TextElement: <p>Delegates to the three arg method.</p> to TagElement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 4 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS TagElement to Javadoc at 0", "INS FieldDeclaration to TypeDeclaration: class at 29", "INS MethodDeclaration to TypeDeclaration: class at 59", "INS NullLiteral to InfixExpression: != at 1", "INS NumberLiteral: 0 to MethodInvocation at 3", "INS SimpleName: getCompressedSize to MethodInvocation at 1", "INS Javadoc to FieldDeclaration at 0", "INS Javadoc to FieldDeclaration at 0", "INS TextElement:  the start position to write from to TagElement: @param at 1", "INS SimpleName: commentB to MethodInvocation at 1", "INS SimpleName: method to FieldAccess at 1", "INS SimpleName: DEFLATER_BLOCK_SIZE to MethodInvocation at 4", "INS TextElement: Revision 1.13.</p> to TagElement at 5", "INS Assignment: = to ExpressionStatement at 0", "INS TagElement: @link to TagElement at 4", "INS Modifier: final to FieldDeclaration at 2", "INS TextElement:  the date as a <code>ZipLong</code> to TagElement: @return at 0", "INS ExpressionStatement to Block at 1", "INS TextElement:  entries before to TagElement at 5", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 61", "INS InfixExpression: | to VariableDeclarationFragment at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 21", "INS NumberLiteral: 1 to MethodInvocation at 3", "INS Modifier: static to FieldDeclaration at 2", "INS TextElement: Writes bytes to ZIP entry. to TagElement at 0", "INS SimpleName: length to SingleVariableDeclaration at 1", "INS SimpleType: Vector to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: ZipEntry to SingleVariableDeclaration at 0", "INS SimpleName: length to InfixExpression: / at 0", "INS TryStatement to Block at 1", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: DEFAULT_COMPRESSION to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: isSeekable to MethodDeclaration at 3", "INS SimpleName: toDosTime to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: entry to MethodInvocation at 2", "INS TextElement: Write bytes to output or random access file. to TagElement at 0", "INS SimpleName: SHORT to Assignment: += at 1", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: hasCompressionLevelChanged to Assignment: = at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @since to Javadoc at 2", "INS SimpleName: zipMethod to VariableDeclarationFragment at 0", "INS SimpleName: WORD to Assignment: += at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS Block to IfStatement at 1", "INS SimpleName: written to Assignment: += at 0", "INS MethodInvocation to InfixExpression: >> at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: raf to InfixExpression: != at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: IOException to TagElement: @throws at 0", "INS Modifier: protected to FieldDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS TextElement: a Data Descriptor to store size and CRC information for  to TagElement at 11", "INS NumberLiteral: 16 to Assignment: += at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS TextElement:  number of milliseconds since the epoch to TagElement: @param at 1", "INS SimpleName: def to MethodInvocation at 0", "INS SimpleName: entriesSize to VariableDeclarationFragment at 0", "INS NumberLiteral: 1900 to InfixExpression: + at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS Javadoc to FieldDeclaration at 0", "INS SimpleName: ze to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Block to WhileStatement at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS IfStatement to Block at 4", "INS ExpressionStatement to Block at 36", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: setEncoding to MethodDeclaration at 3", "INS SimpleName: entry to MethodInvocation at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS Dimension to ArrayType: byte[] at 1", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: written to Assignment: = at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS ArrayType: byte[] to CastExpression at 0", "INS QualifiedName: Deflater.DEFAULT_COMPRESSION to VariableDeclarationFragment at 1", "INS QualifiedName: Deflater.DEFAULT_COMPRESSION to InfixExpression: < at 1", "INS SimpleType: RandomAccessFile to FieldDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: i to TagElement: @param at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to MethodDeclaration at 6", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: localDataStart to Assignment: = at 0", "INS SimpleName: WORD to Assignment: += at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \": \" to InfixExpression: + at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: offset to TagElement: @param at 0", "INS ExpressionStatement to Block at 19", "INS TextElement: attributes and extra fields with different layouts for local file to TagElement at 4", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: != to ParenthesizedExpression at 0", "INS TextElement:  the byte array to write to TagElement: @param at 1", "INS SimpleName: length to MethodInvocation at 4", "INS SimpleName: ZipEntry to SimpleType: ZipEntry at 0", "INS SimpleName: DEFLATED to InfixExpression: == at 1", "INS Javadoc to FieldDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: num to VariableDeclarationFragment at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS TextElement: Has the compression level changed when compared to the last to TagElement at 0", "INS IfStatement to Block at 4", "INS Modifier: private to FieldDeclaration at 1", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: long to CastExpression at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: method to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 34", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS NumberLiteral: 2 to InfixExpression: * at 0", "INS TextElement: calculate them yourself.  Unfortunately this is not possible for to TagElement at 14", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: toHexString to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: IOException to TagElement: @throws at 0", "INS FieldDeclaration to TypeDeclaration: class at 48", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS TextElement:  the comment to TagElement: @param at 1", "INS NumberLiteral: 0X02014B50L to MethodInvocation at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS InfixExpression: < to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement to Javadoc at 0", "INS TextElement: RandomAccessFile to TagElement: @link at 1", "INS Assignment: += to ExpressionStatement at 0", "INS TagElement to Javadoc at 0", "INS Assignment: += to ExpressionStatement at 0", "INS TextElement:  Ant 1.7 to TagElement: @since at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 1", "INS Assignment: += to ExpressionStatement at 0", "INS ExpressionStatement to Block at 7", "INS TextElement: file.</p> to TagElement at 9", "INS SimpleName: entry to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: deflateUntilInputIsNeeded to MethodInvocation at 0", "INS SimpleName: save to MethodInvocation at 2", "INS SimpleName: ze to MethodInvocation at 0", "INS SimpleName: written to Assignment: += at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: protected to FieldDeclaration at 1", "INS SimpleName: size to MethodInvocation at 2", "INS SimpleName: out to InfixExpression: != at 0", "INS SimpleName: getMethod to MethodInvocation at 1", "INS SimpleName: raf to MethodInvocation at 0", "INS Javadoc to FieldDeclaration at 0", "INS Javadoc to FieldDeclaration at 0", "INS ExpressionStatement to Block at 26", "INS SimpleName: buf to MethodInvocation at 2", "INS SimpleName: getSize to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 2", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MemberRef to TagElement: @link at 0", "INS ExpressionStatement to Block at 4", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 19", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS SuperConstructorInvocation to Block at 0", "INS VariableDeclarationStatement to Block at 3", "INS ExpressionStatement to Block at 22", "INS SimpleName: i to ReturnStatement at 0", "INS SimpleName: i to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: setCrc to MethodInvocation at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getTime to MethodInvocation at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS ExpressionStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS StringLiteral: \"rw\" to ClassInstanceCreation at 2", "INS SimpleName: written to Assignment: += at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleType: IOException to MethodDeclaration at 8", "INS TagElement: @param to Javadoc at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: ZipEntry to SimpleType: ZipEntry at 0", "INS Block to IfStatement at 2", "INS SimpleType: Vector to FieldDeclaration at 2", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: buff to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: IOException to TagElement: @exception at 0", "INS SimpleName: ze to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: buf to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: writeDataDescriptor to MethodDeclaration at 3", "INS SimpleName: written to Assignment: = at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS TextElement: Sets the default compression method for subsequent entries. to TagElement at 0", "INS NumberLiteral: 16 to InfixExpression: << at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: setCompressedSize to MethodInvocation at 1", "INS SimpleName: offsets to MethodInvocation at 0", "INS SimpleName: comment to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement: <p>Stolen from InfoZip's <code>fileio.c</code></p> to TagElement at 1", "INS IfStatement to Block at 6", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: toDosTime to MethodInvocation at 0", "INS InfixExpression: << to ParenthesizedExpression at 0", "INS SimpleName: def to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 32", "INS CastExpression to MethodInvocation at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS SimpleName: length to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 51", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS Modifier: private to FieldDeclaration at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS NumberLiteral: 20 to MethodInvocation at 2", "INS TagElement: @since to Javadoc at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: written to Assignment: += at 0", "INS TagElement: @since to Javadoc at 5", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS TagElement to Javadoc at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 4", "INS SimpleName: toDosTime to MethodDeclaration at 4", "INS Modifier: final to FieldDeclaration at 3", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS NumberLiteral: 10 to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: i to InfixExpression: * at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: DD_SIG to VariableDeclarationFragment at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS TagElement: @since to Javadoc at 1", "INS SimpleName: written to Assignment: += at 0", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"bad CRC checksum for entry \" to InfixExpression: + at 0", "INS TextElement: data and central directory entries. to TagElement at 5", "INS SimpleName: ze to MethodInvocation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 27", "INS SimpleName: IOException to TagElement: @throws at 0", "INS Modifier: private to FieldDeclaration at 1", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: encoding to TagElement: @param at 0", "INS IfStatement to Block at 3", "INS TextElement:  1.14 to TagElement: @since at 0", "INS IfStatement to Block at 5", "INS Modifier: public to FieldDeclaration at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: getCrc to MethodInvocation at 1", "INS SimpleName: LFH_SIG to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS TagElement: @link to TagElement at 3", "INS FieldDeclaration to TypeDeclaration: class at 46", "INS SimpleName: length to MethodInvocation at 4", "INS Block to MethodDeclaration at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: ZipEntry to SimpleType: ZipEntry at 0", "INS Modifier: final to FieldDeclaration at 3", "INS StringLiteral: \"Invalid compression level: \" to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: ze to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS SimpleName: hasCompressionLevelChanged to InfixExpression: && at 1", "INS ThisExpression to FieldAccess at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: length to InfixExpression: > at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @throws to Javadoc at 2", "INS SimpleName: close to MethodInvocation at 1", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: File to SimpleType: File at 0", "INS InfixExpression: > to IfStatement at 0", "INS ParenthesizedExpression to InfixExpression: | at 5", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: getBytes to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement: The encoding to use for filenames and the file comment. to TagElement at 0", "INS InfixExpression: && to IfStatement at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 4", "INS SimpleName: getBytes to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS TextElement: <p>For a list of possible values see <a to TagElement at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS FieldDeclaration to TypeDeclaration: class at 30", "INS SimpleName: zipMethod to InfixExpression: == at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: CFH_SIG to MethodInvocation at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS ExpressionStatement to Block at 8", "INS InfixExpression: == to InfixExpression: && at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: t to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 37", "INS NumberLiteral: 0X08074B50L to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: private to FieldDeclaration at 0", "INS TagElement: @since to Javadoc at 3", "INS Modifier: private to FieldDeclaration at 1", "INS Block to MethodDeclaration at 8", "INS QualifiedName: name.length to MethodInvocation at 2", "INS NumberLiteral: 8 to InfixExpression: << at 1", "INS MethodInvocation to InfixExpression: + at 3", "INS TextElement:  true if seekable to TagElement: @return at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS QualifiedName: java.util.zip.ZipEntry.DEFLATED to VariableDeclarationFragment at 1", "INS SimpleName: out to MethodInvocation at 0", "INS TextElement: <p>This attribute is only protected to provide a level of API to TagElement at 1", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: raf to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS IfStatement to IfStatement at 2", "INS TagElement: @throws to Javadoc at 1", "INS SimpleName: data to MethodInvocation at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: writeDataDescriptor to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS TagElement to Javadoc at 0", "INS SimpleName: level to InfixExpression: > at 0", "INS SimpleName: getHours to MethodInvocation at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS CastExpression to ParenthesizedExpression at 0", "INS TagElement: @link to TagElement at 7", "INS Assignment: += to ExpressionStatement at 0", "INS ExpressionStatement to Block at 6", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement:  1.14 to TagElement: @since at 0", "INS SimpleName: Long to MethodInvocation at 0", "INS SimpleName: RandomAccessFile to SimpleType: RandomAccessFile at 0", "INS TextElement: Writes the central file header entry. to TagElement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS NumberLiteral: 20 to MethodInvocation at 2", "INS ExpressionStatement to Block at 3", "INS QualifiedName: java.util.zip.ZipEntry.DEFLATED to VariableDeclarationFragment at 1", "INS SimpleName: level to InfixExpression: + at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: IOException to TagElement: @throws at 0", "INS SimpleName: raf to InfixExpression: != at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: RandomAccessFile to SimpleType: RandomAccessFile at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS Modifier: public to FieldDeclaration at 1", "INS SimpleName: done to InfixExpression: - at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @since to Javadoc at 2", "INS VariableDeclarationStatement to Block at 16", "INS SimpleName: file to ClassInstanceCreation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: len to MethodInvocation at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 2", "INS InfixExpression: / to VariableDeclarationFragment at 1", "INS NumberLiteral: 20 to InfixExpression: | at 1", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS ExpressionStatement to Block at 19", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: getLocalFileDataExtra to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 62", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 57", "INS TextElement: href=\"http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html\">http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html</a>. to TagElement at 2", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: out to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: Deflater to SimpleType: Deflater at 0", "INS SimpleName: data to SingleVariableDeclaration at 1", "INS SimpleName: DEFAULT_COMPRESSION to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: entries to MethodInvocation at 0", "INS Modifier: static to FieldDeclaration at 1", "INS StringLiteral: \" instead of \" to InfixExpression: + at 4", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS SimpleName: setSize to MethodInvocation at 1", "INS SimpleName: written to Assignment: += at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS Javadoc to FieldDeclaration at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: def to MethodInvocation at 0", "INS SimpleName: ze to MethodInvocation at 0", "INS TextElement:  1.14 to TagElement: @since at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS SimpleName: b to MethodInvocation at 2", "INS SimpleName: month to VariableDeclarationFragment at 0", "INS InfixExpression: <= to IfStatement at 0", "INS SimpleName: getBytes to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Deflater to FieldDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: IOException to TagElement: @throws at 0", "INS SimpleName: data to VariableDeclarationFragment at 0", "INS SimpleName: getYear to MethodInvocation at 1", "INS SimpleName: getSize to MethodInvocation at 1", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS TagElement: @param to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS Modifier: final to FieldDeclaration at 3", "INS TextElement:  1.34 to TagElement: @since at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: DEFLATER_BLOCK_SIZE to InfixExpression: / at 1", "INS ExpressionStatement to Block at 24", "INS TextElement: <p>If RandomAccessFile cannot be used, this implementation will use to TagElement at 10", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS TextElement:  1.14 to TagElement: @since at 0", "INS SimpleName: length to TagElement: @param at 0", "INS IfStatement to Block at 0", "INS SimpleName: hasCompressionLevelChanged to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ze to SingleVariableDeclaration at 1", "INS SimpleName: len to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 25", "INS ExpressionStatement to Block at 1", "INS SimpleName: getSize to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS SimpleName: ze to TagElement: @param at 0", "INS ExpressionStatement to Block at 9", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS ExpressionStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getCompressedSize to MethodInvocation at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: file to TagElement: @param at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS ExpressionStatement to Block at 2", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: inner to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: offset to TagElement: @param at 0", "INS FieldAccess to Assignment: = at 0", "INS TextElement: invoking  to TagElement at 6", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: SHORT to Assignment: += at 1", "INS SuperConstructorInvocation to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS TagElement to Javadoc at 0", "INS Modifier: final to FieldDeclaration at 2", "INS TagElement to Javadoc at 0", "INS SimpleName: BYTE_MASK to InfixExpression: & at 1", "INS TextElement:  1.5 to TagElement: @since at 0", "INS TagElement: @link to TagElement at 12", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS ExpressionStatement to Block at 11", "INS NumberLiteral: 0X06054B50L to MethodInvocation at 2", "INS TextElement: access file). to TagElement at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to IfStatement at 1", "INS TagElement to Javadoc at 0", "INS Block to IfStatement at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 6", "INS IfStatement to Block at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: time to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS TextElement: Defaults to the platform's default character encoding.</p> to TagElement at 3", "INS PrimitiveType: long to FieldDeclaration at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS InfixExpression: + to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: RandomAccessFile to ClassInstanceCreation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: close to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: close to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS Dimension to ArrayType: byte[] at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS FieldDeclaration to TypeDeclaration: class at 28", "INS SimpleName: setInput to MethodInvocation at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS ArrayType: byte[] to MethodDeclaration at 3", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS StringLiteral: \" file\" to InfixExpression: + at 2", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: SHORT to Assignment: += at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS QualifiedName: extra.length to Assignment: += at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: num to MethodInvocation at 1", "INS SimpleName: removeAllElements to MethodInvocation at 1", "INS SimpleName: time to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: getComment to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: b to SingleVariableDeclaration at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: setInput to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: out to SuperConstructorInvocation at 0", "INS SimpleName: setCompressedSize to MethodInvocation at 1", "INS TextElement: underlying stream. to TagElement at 1", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: dataStart to InfixExpression: - at 1", "INS SimpleName: getCentralDirectoryExtra to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: SHORT to Assignment: += at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS TagElement: @throws to Javadoc at 3", "INS TextElement: Write bytes to output or random access file. to TagElement at 0", "INS ExpressionStatement to Block at 1", "INS Modifier: static to FieldDeclaration at 1", "INS TextElement:  entries, this means, you don't need to to TagElement at 13", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: deflate to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: static to FieldDeclaration at 2", "INS IfStatement to Block at 2", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 1", "INS PrimitiveType: long to FieldDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS Block to ForStatement at 3", "INS SimpleName: getPlatform to MethodInvocation at 1", "INS ForStatement to Block at 2", "INS CastExpression to Assignment: = at 1", "INS TagElement: @link to TagElement at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS TextElement: Writes the data descriptor entry. to TagElement at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Javadoc to MethodDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Defaults to the platform's default character encoding.</p> to TagElement at 3", "INS Block to IfStatement at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SimpleName: write to MethodInvocation at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS TagElement: @throws to Javadoc at 3", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS TextElement: <p>This attribute is only protected to provide a level of API to TagElement at 1", "INS SimpleName: ZipOutputStream to MethodDeclaration at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ArrayType: byte[] to FieldDeclaration at 4", "INS Block to IfStatement at 1", "INS SimpleName: entry to MethodInvocation at 1", "INS SimpleName: written to Assignment: += at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS Modifier: static to MethodDeclaration at 2", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: writeOut to MethodInvocation at 0", "INS QualifiedName: buf.length to MethodInvocation at 4", "INS Block to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS TextElement:  up to to TagElement at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: b to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: b to MethodInvocation at 2", "INS SimpleName: ZipOutputStream to TypeDeclaration: class at 2", "INS TextElement:  the byte array to write to TagElement: @param at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: ZERO to MethodInvocation at 1", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS FieldDeclaration to TypeDeclaration: class at 20", "INS SimpleName: data to MethodInvocation at 1", "INS SimpleName: length to InfixExpression: < at 1", "INS InfixExpression: != to IfStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Modifier: protected to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: entriesSize to InfixExpression: < at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" STORED method when not writing to a\" to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 14", "INS SimpleName: getSize to MethodInvocation at 1", "INS SimpleName: offsets to MethodInvocation at 0", "INS FieldAccess to InfixExpression: != at 0", "INS ParenthesizedExpression to InfixExpression: | at 0", "INS TagElement: @since to Javadoc at 1", "INS ParenthesizedExpression to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Modifier: final to FieldDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: DD_SIG to MethodInvocation at 1", "INS SimpleName: time to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: * to VariableDeclarationFragment at 1", "INS TextElement: functionality of this package, especially internal/external file to TagElement at 3", "INS PrimitiveType: int to FieldDeclaration at 2", "INS SimpleName: writeOut to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: private to FieldDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: offset to InfixExpression: + at 0", "INS SimpleName: EOCD_SIG to MethodInvocation at 1", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: > to InfixExpression: || at 1", "INS SimpleName: ZipEntry to SimpleType: ZipEntry at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS NumberLiteral: 0X04034B50L to MethodInvocation at 2", "INS SimpleName: name to MethodInvocation at 1", "INS Dimension to ArrayType: byte[] at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: clear to MethodInvocation at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS TextElement:  DEFLATED to TagElement: @link at 1", "INS Block to MethodDeclaration at 5", "INS TextElement:  on error to TagElement: @throws at 1", "INS ExpressionStatement to Block at 2", "INS QualifiedName: extra.length to Assignment: += at 1", "INS TextElement: Finishs writing the contents and closes this as well as the to TagElement at 0", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 31", "INS VariableDeclarationStatement to Block at 13", "INS Javadoc to MethodDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 5", "INS SimpleName: written to Assignment: = at 1", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: b to TagElement: @param at 0", "INS TextElement:  if an invalid compression level is specified. to TagElement: @throws at 1", "INS SimpleName: cdOffset to Assignment: = at 0", "INS SimpleName: time to VariableDeclarationFragment at 0", "INS SimpleName: ze to SingleVariableDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: save to VariableDeclarationFragment at 0", "INS SimpleName: getMethod to MethodInvocation at 1", "INS SimpleName: out to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleType: IOException to MethodDeclaration at 5", "INS Block to MethodDeclaration at 6", "INS NumberLiteral: 2 to InfixExpression: + at 1", "INS SimpleName: ze to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: realCrc to InfixExpression: != at 1", "INS SimpleName: update to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: raf to MethodInvocation at 0", "INS TextElement: current entry starts here. to TagElement at 1", "INS SimpleName: getCrc to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: crc to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 14", "INS SimpleName: putNextEntry to MethodDeclaration at 3", "INS SimpleName: ZipLong to MethodInvocation at 0", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS PrimitiveType: long to FieldDeclaration at 2", "INS SimpleName: i to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: writeOut to MethodInvocation at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS InfixExpression: * to InfixExpression: + at 1", "INS Modifier: private to FieldDeclaration at 1", "INS TagElement: @since to Javadoc at 3", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: getMinutes to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS TextElement:  on error to TagElement: @throws at 1", "INS SimpleName: entry to Assignment: = at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS Block to IfStatement at 1", "INS SimpleName: written to Assignment: += at 0", "INS SimpleName: cdLength to MethodInvocation at 2", "INS SimpleName: SHORT to Assignment: += at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: raf to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 8 to MethodInvocation at 2", "INS Javadoc to MethodDeclaration at 0", "INS NumberLiteral: 11 to InfixExpression: << at 1", "INS FieldDeclaration to TypeDeclaration: class at 55", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: LZERO to MethodInvocation at 1", "INS TextElement:  on error to TagElement: @throws at 1", "INS TextElement:  the <code>Date</code> to convert to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1", "INS NumberLiteral: 12 to Assignment: += at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: writeCentralDirectoryEnd to MethodDeclaration at 3", "INS SimpleName: realCrc to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: <p>Default is DEFLATED.</p> to TagElement at 1", "INS TextElement:  DeflaterOutputStream to TagElement: @link at 1", "INS QualifiedName: java.util.zip.ZipEntry.STORED to VariableDeclarationFragment at 1", "INS SimpleName: size to MethodInvocation at 2", "INS TextElement: Compression method for stored entries. to TagElement at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 24", "MOV FieldDeclaration to TypeDeclaration: class at 26", "MOV FieldDeclaration to TypeDeclaration: class at 18", "MOV MethodDeclaration to TypeDeclaration: class at 58", "MOV FieldDeclaration to TypeDeclaration: class at 25"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 2", "MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: byte[] to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ZipLong to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @link to TagElement at 19", "MOV TagElement: @link to TagElement at 1"]}, {"root": "UPDATE from m_crc to crc", "operations": ["UPD SimpleName: m_crc from m_crc to crc"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 1"]}, {"root": "UPDATE from m_offsets to offsets", "operations": ["UPD SimpleName: m_offsets from m_offsets to offsets"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: OutputStream to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ArrayType: byte[] to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0", "MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 22", "MOV IfStatement to Block at 21"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 3"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "UPDATE from @exception to @throws", "operations": ["UPD TagElement: @exception from @exception to @throws"]}, {"root": "UPDATE from Holds the offsets of the LFH starts for each entry to Holds the offsets of the LFH starts for each entry.", "operations": ["UPD TextElement: Holds the offsets of the LFH starts for each entry from Holds the offsets of the LFH starts for each entry to Holds the offsets of the LFH starts for each entry."]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Deflater to ClassInstanceCreation at 0"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS SimpleName: raf to InfixExpression: != at 0", "INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: byte[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Date to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Retrieve the bytes for the given String in the encoding set for this to Retrieve the bytes for the given String in the encoding set for", "operations": ["UPD TextElement: Retrieve the bytes for the given String in the encoding set for this from Retrieve the bytes for the given String in the encoding set for this to Retrieve the bytes for the given String in the encoding set for"]}, {"root": "UPDATE from Stream. to this Stream.", "operations": ["UPD TextElement: Stream. from Stream. to this Stream."]}, {"root": "UPDATE from  the name to decode to  the string to get bytes from", "operations": ["UPD TextElement:  the name to decode from  the name to decode to  the string to get bytes from"]}, {"root": "UPDATE from  the bytes for string to  the bytes as a byte array", "operations": ["UPD TextElement:  the bytes for string from  the bytes for string to  the bytes as a byte array"]}, {"root": "UPDATE from  if fail to retrieve bytes for specified string to  on error", "operations": ["UPD TextElement:  if fail to retrieve bytes for specified string from  if fail to retrieve bytes for specified string to  on error"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV WhileStatement to Block at 1", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV PrefixExpression: - to InfixExpression: == at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Date to ClassInstanceCreation at 0", "MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV PrefixExpression: - to InfixExpression: == at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: != to InfixExpression: || at 0"]}, {"root": "UPDATE from comment to commentB", "operations": ["UPD SimpleName: comment from comment to commentB"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleType: ZipLong to ClassInstanceCreation at 0"]}, {"root": "UPDATE from m_encoding to encoding", "operations": ["UPD SimpleName: m_encoding from m_encoding to encoding", "UPD SimpleName: m_encoding from m_encoding to encoding"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: setSize to MethodInvocation at 1", "INS SimpleName: entry to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: entry to MethodInvocation at 0", "INS SimpleName: setCompressedSize to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: byte[] to ArrayCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from InfixExpression: |", "operations": ["MOV ParenthesizedExpression to InfixExpression: | at 1", "MOV ParenthesizedExpression to InfixExpression: | at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from Assignment: +=", "operations": ["MOV MethodInvocation to Assignment: += at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV PrefixExpression: - to InfixExpression: == at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV PrefixExpression: - to InfixExpression: == at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from m_entry to adjustToLong", "operations": ["UPD SimpleName: m_entry from m_entry to adjustToLong", "UPD SimpleName: m_entry from m_entry to adjustToLong"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ZipException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ZipException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ZipException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ZipException to ClassInstanceCreation at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 5"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PostfixExpression: ++ to ForStatement at 2", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Calendar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.zip.DeflaterOutputStream"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: setSize", "operations": ["DEL SimpleName: setSize"]}, {"root": "DEL SimpleName: setComprSize", "operations": ["DEL SimpleName: setComprSize"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL InfixExpression: >>", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL Modifier: private", "DEL Block", "DEL SimpleName: finish", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TextElement:  The new Level value", "DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: write", "DEL ParenthesizedExpression", "DEL SimpleName: ZipArchiveEntry", "DEL SimpleName: m_written", "DEL SimpleName: get", "DEL VariableDeclarationStatement", "DEL SimpleName: m_written", "DEL Modifier: final", "DEL NumberLiteral: 10", "DEL SimpleName: getBytes", "DEL InfixExpression: <<", "DEL VariableDeclarationFragment", "DEL SimpleName: output", "DEL ExpressionStatement", "DEL NumberLiteral: 16", "DEL SimpleName: toHexString", "DEL Modifier: final", "DEL SimpleName: out", "DEL TagElement: @since", "DEL Assignment: +=", "DEL ClassInstanceCreation", "DEL NumberLiteral: 8", "DEL MethodInvocation", "DEL SimpleType: ZipArchiveEntry", "DEL ClassInstanceCreation", "DEL SimpleName: ZipLong", "DEL Modifier: final", "DEL SimpleName: toDosTime", "DEL MethodInvocation", "DEL SimpleName: out", "DEL SimpleName: level", "DEL Assignment: +=", "DEL SimpleName: m_entry", "DEL InfixExpression: ==", "DEL NumberLiteral: 4", "DEL ClassInstanceCreation", "DEL SimpleName: m_written", "DEL SimpleName: DOS_TIME_MIN", "DEL MethodInvocation", "DEL SimpleType: ZipShort", "DEL MethodInvocation", "DEL Modifier: private", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: extra", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0xFF0000", "DEL SimpleName: ZipLong", "DEL MethodDeclaration", "DEL SimpleName: getCrc", "DEL NumberLiteral: 2", "DEL SimpleName: name", "DEL PrimitiveType: int", "DEL QualifiedName: extra.length", "DEL TagElement: @throws", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL ArrayCreation", "DEL FieldDeclaration", "DEL NumberLiteral: 0", "DEL Assignment: +=", "DEL SimpleType: ZipShort", "DEL SimpleName: LFH_SIG", "DEL SimpleName: ZipLong", "DEL TextElement: Writes bytes to ZIP entry. <p>", "DEL SingleVariableDeclaration", "DEL SimpleName: ZipLong", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: buffer", "DEL SimpleName: out", "DEL Block", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL SimpleName: encoding", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: getBytes", "DEL SimpleName: ZipShort", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: update", "DEL SimpleName: ZipLong", "DEL Block", "DEL SimpleName: write", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL SimpleName: out", "DEL QualifiedName: Calendar.HOUR_OF_DAY", "DEL SimpleName: out", "DEL SimpleName: cal", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL SimpleName: m_entry", "DEL Assignment: =", "DEL TextElement: The encoding to use for filenames and the file comment. <p>", "DEL VariableDeclarationStatement", "DEL SimpleName: m_written", "DEL Modifier: public", "DEL SimpleName: size", "DEL NumberLiteral: 4", "DEL SimpleName: put", "DEL MethodInvocation", "DEL SimpleName: setComprSize", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: ZipLong", "DEL MethodInvocation", "DEL NumberLiteral: 4", "DEL MethodInvocation", "DEL TagElement: @exception", "DEL SimpleName: m_entry", "DEL SimpleName: m_entries", "DEL SimpleName: buffer", "DEL TextElement:  if an IO failure causes operation to fail", "DEL TextElement:  when an IO error causes operation to fail", "DEL SimpleName: m_written", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL Modifier: public", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL Assignment: +=", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL StringLiteral: \"\"", "DEL SimpleName: result", "DEL SimpleName: m_entries", "DEL Modifier: final", "DEL SimpleName: entry", "DEL NumberLiteral: 8", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: out", "DEL QualifiedName: ZipEntry.STORED", "DEL SimpleType: ZipLong", "DEL ExpressionStatement", "DEL TextElement: </a>. Defaults to the platform's default character encoding.</p>", "DEL TextElement: Override is necessary to support STORED entries, as well as calculationg", "DEL ParenthesizedExpression", "DEL SimpleName: entry", "DEL ClassInstanceCreation", "DEL SimpleName: write", "DEL SimpleName: getBytes", "DEL IfStatement", "DEL InfixExpression: >>", "DEL TextElement: Sets the default compression method for subsequent entries. <p>", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ZipOutputStream", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Assignment: +=", "DEL SimpleName: write", "DEL SimpleName: getBytes", "DEL FieldDeclaration", "DEL SimpleName: out", "DEL SimpleName: write", "DEL SimpleName: m_entry", "DEL ClassInstanceCreation", "DEL SimpleName: ZipLong", "DEL SimpleName: ArrayList", "DEL SimpleName: m_entries", "DEL NumberLiteral: 2", "DEL TextElement: For a list of possible values see <a", "DEL SimpleName: method", "DEL InfixExpression: -", "DEL SimpleName: m_crc", "DEL SimpleName: getSize", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: m_dataStart", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL SimpleName: ZipLong", "DEL SimpleType: ZipLong", "DEL TagElement: @throws", "DEL Block", "DEL SimpleType: ArrayList", "DEL MethodInvocation", "DEL TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: getTime", "DEL TextElement: Compression method for deflated entries.", "DEL MethodInvocation", "DEL QualifiedName: name.length", "DEL PrimitiveType: int", "DEL SimpleName: write", "DEL VariableDeclarationFragment", "DEL TypeDeclaration: class", "DEL Assignment: +=", "DEL MethodInvocation", "DEL SimpleName: m_written", "DEL SimpleName: m_entries", "DEL SimpleName: getSize", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: EOCD_SIG", "DEL ExpressionStatement", "DEL SimpleName: ZipShort", "DEL SimpleName: m_entry", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: Convert a Date object to a DOS date/time field. <p>", "DEL MethodInvocation", "DEL SimpleName: ZERO", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: getLocalFileDataExtra", "DEL SimpleName: m_written", "DEL QualifiedName: Calendar.DAY_OF_MONTH", "DEL SimpleName: offset", "DEL NumberLiteral: 2", "DEL ParenthesizedExpression", "DEL FieldDeclaration", "DEL SimpleName: m_entry", "DEL SimpleName: length", "DEL NumberLiteral: 2", "DEL SimpleName: out", "DEL InfixExpression: &", "DEL ArrayAccess", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL SimpleName: m_cdLength", "DEL SimpleType: ZipLong", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: m_written", "DEL TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: extra", "DEL SimpleName: name", "DEL TextElement:  1.1", "DEL SimpleName: ze", "DEL ExpressionStatement", "DEL SimpleName: getBytes", "DEL SimpleType: ZipShort", "DEL VariableDeclarationFragment", "DEL TextElement:  Description of the Returned Value", "DEL Assignment: =", "DEL SimpleType: ZipLong", "DEL Block", "DEL TextElement: Finishs writing the contents and closes this as well as the underlying", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: extra", "DEL SimpleName: get", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: out", "DEL SimpleName: DEFLATED", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: m_written", "DEL SimpleName: ZipLong", "DEL SimpleType: ZipLong", "DEL SimpleType: ZipLong", "DEL TextElement: stream.", "DEL MethodInvocation", "DEL SimpleName: write", "DEL Modifier: private", "DEL SimpleType: ZipArchiveEntry", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL ClassInstanceCreation", "DEL Block", "DEL NumberLiteral: 4", "DEL Assignment: =", "DEL SimpleName: out", "DEL SimpleName: out", "DEL SimpleType: ZipShort", "DEL TextElement: Default is DEFLATED.</p>", "DEL PrimitiveType: void", "DEL SimpleName: ZipShort", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: m_dataStart", "DEL ExpressionStatement", "DEL SimpleType: DeflaterOutputStream", "DEL MethodInvocation", "DEL Modifier: private", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL Assignment: =", "DEL Block", "DEL SimpleName: writeCentralFileHeader", "DEL SimpleName: m_level", "DEL InfixExpression: ==", "DEL SimpleName: write", "DEL SimpleName: toDosTime", "DEL SimpleType: ZipLong", "DEL SingleVariableDeclaration", "DEL SimpleName: write", "DEL NumberLiteral: 5", "DEL SimpleType: ZipShort", "DEL SimpleName: out", "DEL Block", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL TextElement: </a>. Defaults to the platform's default character encoding.</p>", "DEL SimpleName: buffer", "DEL SimpleName: m_written", "DEL SimpleName: method", "DEL SimpleName: m_written", "DEL SimpleName: write", "DEL SimpleName: write", "DEL SimpleName: out", "DEL TextElement: The encoding to use for filenames and the file comment. <p>", "DEL TextElement:  Description of Parameter", "DEL SimpleName: out", "DEL NumberLiteral: 2", "DEL SimpleName: getCompressedSize", "DEL TextElement:  the entry", "DEL SimpleName: write", "DEL SimpleName: ZipLong", "DEL NumberLiteral: 0X06054B50L", "DEL TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html", "DEL MethodInvocation", "DEL Modifier: final", "DEL Block", "DEL NumberLiteral: 1", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL QualifiedName: comment.length", "DEL SimpleName: IOException", "DEL SimpleType: ZipLong", "DEL SimpleType: ArrayList", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL TagElement: @param", "DEL Modifier: protected", "DEL SimpleName: ZipArchiveEntry", "DEL SimpleName: ZipShort", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL SimpleName: out", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleType: ZipLong", "DEL TagElement", "DEL SimpleName: ZipLong", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL Assignment: =", "DEL TagElement", "DEL ParenthesizedExpression", "DEL SimpleType: ZipLong", "DEL SimpleName: m_entry", "DEL SimpleName: size", "DEL ParenthesizedExpression", "DEL NumberLiteral: 20", "DEL SimpleName: writeDataDescriptor", "DEL Modifier: protected", "DEL SimpleType: ZipArchiveEntry", "DEL SimpleName: get", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: getBytes", "DEL SimpleName: out", "DEL SimpleName: result", "DEL ClassInstanceCreation", "DEL SimpleName: STORED", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: m_written", "DEL SimpleName: write", "DEL SimpleName: get", "DEL Assignment: +=", "DEL SimpleName: LZERO", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: getBytes", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL TagElement: @param", "DEL InfixExpression: >>", "DEL MethodInvocation", "DEL SimpleName: write", "DEL Javadoc", "DEL Modifier: public", "DEL MethodDeclaration", "DEL Modifier: public", "DEL TextElement: Data for current entry started here.", "DEL SimpleName: m_method", "DEL ParenthesizedExpression", "DEL InfixExpression: <", "DEL SimpleName: getCompressedSize", "DEL ClassInstanceCreation", "DEL SimpleName: realCrc", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: ZipLong", "DEL ExpressionStatement", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: ZipShort", "DEL SimpleName: write", "DEL FieldDeclaration", "DEL CastExpression", "DEL SimpleName: data", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Modifier: static", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: num", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SimpleName: write", "DEL ExpressionStatement", "DEL TextElement: Writes the central file header entry", "DEL SimpleName: ZipShort", "DEL MethodInvocation", "DEL SimpleName: write", "DEL QualifiedName: comment.length", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0xFF000000l", "DEL ExpressionStatement", "DEL SimpleName: setEncoding", "DEL PrimitiveType: int", "DEL SimpleName: m_written", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: IOException", "DEL ClassInstanceCreation", "DEL SimpleName: m_written", "DEL NumberLiteral: 24", "DEL Block", "DEL SimpleName: m_dataStart", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL TextElement:  The new Comment value", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleType: ZipLong", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL TextElement: Reimplementation of ", "DEL FieldDeclaration", "DEL SimpleName: year", "DEL SimpleName: m_offsets", "DEL TextElement:  the zip entry", "DEL SimpleName: setLevel", "DEL QualifiedName: extra.length", "DEL ReturnStatement", "DEL SimpleName: ZipLong", "DEL SimpleName: entry", "DEL TextElement: Stolen from InfoZip's <code>fileio.c</code></p>", "DEL SimpleName: out", "DEL FieldDeclaration", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL TagElement: @exception", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL SimpleName: write", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: write", "DEL Assignment: +=", "DEL SimpleName: write", "DEL SimpleType: ZipShort", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: clear", "DEL VariableDeclarationFragment", "DEL SimpleName: output", "DEL SimpleName: month", "DEL MethodInvocation", "DEL SimpleName: ZipShort", "DEL SimpleName: out", "DEL MethodInvocation", "DEL SimpleName: m_entry", "DEL SimpleName: out", "DEL SimpleName: m_written", "DEL FieldDeclaration", "DEL TextElement:  if an IO failure causes operation to fail", "DEL TextElement: This implementation will use a Data Descriptor to store size and CRC", "DEL SimpleName: out", "DEL SimpleName: value", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL Modifier: public", "DEL FieldDeclaration", "DEL CastExpression", "DEL TagElement: @param", "DEL Assignment: +=", "DEL SimpleName: ZipShort", "DEL TextElement: this package, especially internal/external file attributes and extra fields", "DEL SimpleName: getBytes", "DEL MethodInvocation", "DEL QualifiedName: Calendar.MINUTE", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement", "DEL Assignment: +=", "DEL MethodInvocation", "DEL SimpleName: ZipLong", "DEL SimpleName: getBytes", "DEL SimpleName: LZERO", "DEL SimpleName: m_offsets", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: realCrc", "DEL SimpleName: getCrc", "DEL SimpleName: m_encoding", "DEL SimpleName: getTime", "DEL SimpleName: m_written", "DEL MethodInvocation", "DEL SimpleName: m_entries", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL TextElement:  will be called.</p>", "DEL PrimitiveType: void", "DEL Assignment: +=", "DEL ExpressionStatement", "DEL TextElement: with different layouts for local file data and central directory entries. <p>", "DEL SimpleName: getCentralDirectoryExtra", "DEL SimpleName: getBytes", "DEL SimpleName: getBytes", "DEL PrimitiveType: long", "DEL FieldDeclaration", "DEL Assignment: =", "DEL SimpleName: DEFLATED", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL SimpleName: toDosTime", "DEL MethodInvocation", "DEL SimpleName: out", "DEL SimpleName: write", "DEL SimpleName: m_entry", "DEL SimpleName: write", "DEL SuperMethodInvocation", "DEL SimpleName: realCrc", "DEL Modifier: final", "DEL SimpleName: writeCentralFileHeader", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL Javadoc", "DEL Modifier: final", "DEL QualifiedName: name.length", "DEL NumberLiteral: 12", "DEL Modifier: public", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: time", "DEL MethodInvocation", "DEL SimpleName: ZipArchiveEntry", "DEL SimpleName: out", "DEL Javadoc", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: writeLocalFileHeader", "DEL SimpleName: m_entry", "DEL StringLiteral: \"uncompressed size is required for STORED method\"", "DEL SimpleName: write", "DEL SimpleName: ZipLong", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL SimpleName: ZipLong", "DEL SimpleName: offset", "DEL MethodDeclaration", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: m_written", "DEL MethodInvocation", "DEL SimpleType: ZipLong", "DEL PrimitiveType: int", "DEL SimpleName: ZipLong", "DEL IfStatement", "DEL InfixExpression: ==", "DEL ParenthesizedExpression", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: out", "DEL SimpleName: out", "DEL Block", "DEL Modifier: public", "DEL SimpleType: ZipArchiveEntry", "DEL SimpleType: ZipShort", "DEL StringLiteral: \": \"", "DEL CastExpression", "DEL SimpleName: value", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"bad CRC checksum for entry \"", "DEL SimpleName: out", "DEL NumberLiteral: 11", "DEL MethodInvocation", "DEL TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html", "DEL ExpressionStatement", "DEL SimpleName: ArrayList", "DEL SimpleName: getInternalAttributes", "DEL TextElement: For a list of possible values see <a", "DEL SimpleName: reset", "DEL SimpleType: ZipLong", "DEL MethodDeclaration", "DEL SimpleName: time", "DEL ParenthesizedExpression", "DEL Block", "DEL TextElement:  if an IO failure causes operation to fail", "DEL FieldDeclaration", "DEL SimpleName: entry", "DEL SimpleName: get", "DEL TagElement", "DEL TextElement:  that does handle the extended functionality of", "DEL SimpleName: offset", "DEL CastExpression", "DEL NumberLiteral: 20", "DEL SimpleName: ZERO", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: length", "DEL ParenthesizedExpression", "DEL SimpleName: write", "DEL Modifier: protected", "DEL TextElement: Default is Deflater.DEFAULT_COMPRESSION.</p>", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getMethod", "DEL Modifier: protected", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: write", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL SimpleName: m_written", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: ZERO", "DEL SimpleName: out", "DEL SimpleName: ZERO", "DEL Modifier: static", "DEL SimpleName: m_entry", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: ZipLong", "DEL SimpleName: getEncoding", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: write", "DEL TextElement: them yourself. Unfortunately this is not possible for the STORED method, here", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL InfixExpression: <<", "DEL SingleVariableDeclaration", "DEL SimpleName: DEFLATED", "DEL SimpleName: m_written", "DEL ExpressionStatement", "DEL TagElement", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL NumberLiteral: 4", "DEL NumberLiteral: 2", "DEL ParenthesizedExpression", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: m_written", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL SimpleName: m_crc", "DEL SimpleName: m_written", "DEL SimpleName: entry", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleType: ZipLong", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL NumberLiteral: 1", "DEL Modifier: public", "DEL Block", "DEL SimpleName: getBytes", "DEL Modifier: protected", "DEL SimpleName: DD_SIG", "DEL SimpleName: write", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"crc checksum is required for STORED method\"", "DEL SimpleName: getSize", "DEL ParenthesizedExpression", "DEL SimpleName: LZERO", "DEL QualifiedName: extra.length", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleType: ZipShort", "DEL SimpleName: write", "DEL NumberLiteral: 16", "DEL ExpressionStatement", "DEL SimpleName: m_cdOffset", "DEL ReturnStatement", "DEL SimpleName: getMethod", "DEL QualifiedName: ZipEntry.DEFLATED", "DEL SimpleName: out", "DEL PrimitiveType: int", "DEL SimpleType: ZipArchiveEntry", "DEL MethodInvocation", "DEL SimpleName: m_cdOffset", "DEL MethodInvocation", "DEL NumberLiteral: 4", "DEL MethodInvocation", "DEL Assignment: +=", "DEL Block", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: ze", "DEL SimpleName: out", "DEL SimpleName: num", "DEL SimpleType: ZipLong", "DEL MethodInvocation", "DEL SimpleName: m_encoding", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL SimpleName: ZipLong", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL SimpleName: getSize", "DEL SimpleName: out", "DEL SimpleName: m_entry", "DEL SimpleName: cal", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: m_offsets", "DEL SimpleName: writeLocalFileHeader", "DEL ParenthesizedExpression", "DEL FieldDeclaration", "DEL SimpleName: m_entry", "DEL SimpleName: getBytes", "DEL Assignment: +=", "DEL SimpleName: ZipArchiveEntry", "DEL ExpressionStatement", "DEL SimpleName: DEFLATED", "DEL QualifiedName: extra.length", "DEL VariableDeclarationFragment", "DEL SimpleName: cal", "DEL SimpleName: write", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: ZipLong", "DEL PrimitiveType: void", "DEL IfStatement", "DEL TextElement: CRC automatically for DEFLATED entries.</p>", "DEL SimpleName: setTime", "DEL IfStatement", "DEL SimpleName: m_level", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL NumberLiteral: 10", "DEL Assignment: +=", "DEL SimpleName: out", "DEL SimpleName: getMethod", "DEL SimpleName: comm", "DEL SimpleName: cal", "DEL Assignment: +=", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL IfStatement", "DEL Modifier: private", "DEL SimpleName: cal", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression", "DEL SimpleName: DD_SIG", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL SimpleName: m_written", "DEL SimpleName: write", "DEL SimpleName: out", "DEL SimpleName: m_cdLength", "DEL Block", "DEL Modifier: public", "DEL SimpleName: m_cdOffset", "DEL NumberLiteral: 2", "DEL SimpleName: m_written", "DEL QualifiedName: name.length", "DEL ExpressionStatement", "DEL InfixExpression: >>", "DEL SimpleName: ZipShort", "DEL SimpleType: ZipLong", "DEL SimpleName: m_entry", "DEL Modifier: static", "DEL SimpleName: m_written", "DEL SimpleName: m_written", "DEL NumberLiteral: 0X04034B50L", "DEL SimpleName: out", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: m_entry", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleType: ZipLong", "DEL SimpleType: ZipShort", "DEL SimpleName: out", "DEL SimpleName: ZipLong", "DEL NumberLiteral: 2", "DEL ExpressionStatement", "DEL TextElement:  Description of Parameter", "DEL SimpleName: cal", "DEL ExpressionStatement", "DEL SimpleName: Long", "DEL VariableDeclarationStatement", "DEL SimpleName: write", "DEL QualifiedName: Calendar.SECOND", "DEL ExpressionStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: write", "DEL SimpleName: getBytes", "DEL TextElement:  if an IO error causes operation to fail", "DEL ParenthesizedExpression", "DEL QualifiedName: data.length", "DEL SimpleName: ZipArchiveEntry", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleType: ZipShort", "DEL Assignment: =", "DEL SimpleName: getCrc", "DEL MethodInvocation", "DEL SimpleName: getValue", "DEL SimpleName: getBytes", "DEL SimpleName: STORED", "DEL SuperConstructorInvocation", "DEL MethodInvocation", "DEL SimpleName: result", "DEL Assignment: +=", "DEL SimpleName: m_written", "DEL SimpleType: ZipArchiveEntry", "DEL Modifier: static", "DEL IfStatement", "DEL SimpleName: m_written", "DEL SimpleName: m_entry", "DEL SimpleName: out", "DEL InfixExpression: &", "DEL SimpleName: name", "DEL ParenthesizedExpression", "DEL TagElement: @exception", "DEL SimpleName: out", "DEL SimpleName: IOException", "DEL Block", "DEL SimpleType: ZipLong", "DEL IfStatement", "DEL SimpleName: entry", "DEL SimpleName: out", "DEL SimpleName: Calendar", "DEL SimpleName: getBytes", "DEL SimpleName: m_cdOffset", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL SimpleName: getBytes", "DEL SimpleName: m_entry", "DEL TagElement", "DEL TagElement", "DEL SimpleName: m_written", "DEL ParenthesizedExpression", "DEL SimpleName: def", "DEL ClassInstanceCreation", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL TextElement: Sets the compression level for subsequent entries. <p>", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL NumberLiteral: 8", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL ArrayAccess", "DEL SimpleName: data", "DEL SimpleName: write", "DEL Assignment: =", "DEL SimpleName: ZipLong", "DEL VariableDeclarationFragment", "DEL SimpleName: EOCD_SIG", "DEL NumberLiteral: 12", "DEL NumberLiteral: 4", "DEL Block", "DEL ExpressionStatement", "DEL TextElement: information for DEFLATED entries, this means, you don't need to calculate", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL Assignment: +=", "DEL SimpleName: getMethod", "DEL SimpleName: getBytes", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: getBytes", "DEL SimpleName: out", "DEL SimpleName: getBytes", "DEL Assignment: =", "DEL SimpleName: m_written", "DEL SimpleName: m_written", "DEL SimpleName: extra", "DEL SimpleType: Calendar", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: out", "DEL StringLiteral: \": \"", "DEL SimpleType: ZipShort", "DEL QualifiedName: Calendar.YEAR", "DEL MethodInvocation", "DEL SimpleName: m_written", "DEL SimpleType: ZipLong", "DEL SimpleName: output", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL NullLiteral", "DEL SimpleName: out", "DEL ExpressionStatement", "DEL SimpleName: ZipLong", "DEL SimpleName: write", "DEL SimpleName: ZipShort", "DEL ClassInstanceCreation", "DEL PrimitiveType: long", "DEL SimpleName: comment", "DEL SimpleName: m_entry", "DEL SimpleName: m_cdLength", "DEL VariableDeclarationFragment", "DEL TextElement: Writes the &quot;End of central dir record&quot;", "DEL SimpleName: write", "DEL Modifier: protected", "DEL NumberLiteral: 2", "DEL Javadoc", "DEL SimpleName: setComment", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: getName", "DEL Modifier: protected", "DEL SimpleName: m_written", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: getExternalAttributes", "DEL SimpleName: putNextEntry", "DEL SimpleName: write", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: length", "DEL InfixExpression: ==", "DEL SimpleName: encoding", "DEL SimpleName: getBytes", "DEL ThrowStatement", "DEL SimpleName: m_entry", "DEL SimpleName: m_entry", "DEL SimpleName: out", "DEL ThrowStatement", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL Block", "DEL SimpleName: out", "DEL TagElement", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL SimpleName: clear", "DEL SimpleName: comment", "DEL MethodInvocation", "DEL SimpleName: out", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: getCrc", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: out", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL Assignment: +=", "DEL InfixExpression: |", "DEL ArrayAccess", "DEL IfStatement", "DEL Block", "DEL SimpleType: ZipShort", "DEL SimpleName: write", "DEL ParenthesizedExpression", "DEL SimpleName: entry", "DEL SimpleName: m_entry", "DEL SimpleName: m_entry", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: write", "DEL SingleVariableDeclaration", "DEL SimpleType: ZipShort", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement", "DEL Assignment: =", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL Block", "DEL TagElement: @return", "DEL InfixExpression: -", "DEL SimpleName: ZipArchiveEntry", "DEL ParenthesizedExpression", "DEL PrimitiveType: long", "DEL InfixExpression: +", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL Assignment: +=", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleName: setMethod", "DEL SimpleName: setCrc", "DEL Modifier: final", "DEL TextElement:  when an IO erro causes operation to fail", "DEL SimpleName: ZipLong", "DEL ClassInstanceCreation", "DEL PrimitiveType: byte", "DEL ParenthesizedExpression", "DEL SimpleName: getBytes", "DEL SimpleName: comment", "DEL PrimitiveType: void", "DEL SimpleName: getBytes", "DEL VariableDeclarationFragment", "DEL SimpleName: m_comment", "DEL ExpressionStatement", "DEL SimpleName: m_dataStart", "DEL SimpleName: writeCentralDirectoryEnd", "DEL ExpressionStatement", "DEL SimpleName: Calendar", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TextElement:  when an IO error causes operation to fail", "DEL InfixExpression: &", "DEL FieldDeclaration", "DEL ForStatement", "DEL SimpleName: m_written", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: getValue", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: m_method", "DEL TextElement:  if an IO failure causes operation to fail", "DEL ClassInstanceCreation", "DEL SimpleType: ZipArchiveEntry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: write", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL SimpleName: length", "DEL StringLiteral: \"bad size for entry \"", "DEL Block", "DEL SimpleName: write", "DEL ExpressionStatement", "DEL SimpleType: ZipLong", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL SimpleName: m_method", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: m_entry", "DEL SimpleName: ZipLong", "DEL SimpleName: getBytes", "DEL SimpleName: getBytes", "DEL SimpleType: ZipLong", "DEL CastExpression", "DEL ParenthesizedExpression", "DEL SimpleName: cal", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: IOException", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: m_entries", "DEL PrimitiveType: void", "DEL Assignment: +=", "DEL MethodInvocation", "DEL SimpleName: m_entry", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleType: ZipShort", "DEL SimpleName: m_comment", "DEL SimpleName: setLevel", "DEL SimpleName: getBytes", "DEL SimpleName: getBytes", "DEL SimpleName: m_crc", "DEL MethodInvocation", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TextElement:  The new Encoding value", "DEL SimpleName: size", "DEL SimpleName: m_level", "DEL SimpleName: ZipShort", "DEL NumberLiteral: 4", "DEL SimpleName: level", "DEL SimpleName: out", "DEL TagElement", "DEL SimpleName: closeEntry", "DEL Modifier: public", "DEL NumberLiteral: 0X08074B50L", "DEL SimpleName: m_entry", "DEL InfixExpression: +", "DEL Javadoc", "DEL SimpleName: setTime", "DEL ClassInstanceCreation", "DEL SimpleType: ZipShort", "DEL SimpleType: ZipLong", "DEL TextElement:  the zip entry", "DEL TagElement", "DEL SimpleName: out", "DEL MethodInvocation", "DEL StringLiteral: \" instead of \"", "DEL SimpleName: write", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: ZipLong", "DEL NumberLiteral: 2", "DEL TextElement:  the offset to write to", "DEL MethodInvocation", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleType: ZipLong", "DEL SimpleName: getBytes", "DEL SimpleName: ZipLong", "DEL SimpleType: ZipLong", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: writeDataDescriptor", "DEL Block", "DEL SimpleName: result", "DEL SimpleName: m_comment", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: m_entry", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: get", "DEL TextElement:  the output stream to write to", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL SimpleName: ZipOutputStream", "DEL NumberLiteral: 1", "DEL SimpleName: getBytes", "DEL VariableDeclarationStatement", "DEL SimpleName: getBytes", "DEL SimpleName: getBytes", "DEL ParenthesizedExpression", "DEL SimpleName: ZipShort", "DEL VariableDeclarationStatement", "DEL SimpleName: write", "DEL MethodInvocation", "DEL NumberLiteral: 0X02014B50L", "DEL MethodInvocation", "DEL SimpleName: ZipLong", "DEL NumberLiteral: 3", "DEL SimpleName: write", "DEL SimpleName: write", "DEL MethodDeclaration", "DEL SimpleName: buffer", "DEL SimpleName: result", "DEL ParenthesizedExpression", "DEL TagElement: @param", "DEL SimpleName: write", "DEL SimpleName: CFH_SIG", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL Modifier: private", "DEL Modifier: final", "DEL SimpleName: m_written", "DEL SimpleName: IOException", "DEL SimpleName: length", "DEL Modifier: public", "DEL SimpleName: DeflaterOutputStream", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: ZERO", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: CFH_SIG", "DEL TextElement:  the buffer to write to", "DEL MethodInvocation", "DEL SimpleName: getComment", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL NumberLiteral: 20", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL SimpleName: ZipShort", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL SimpleName: entry", "DEL SimpleName: ZipShort", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: getBytes", "DEL ClassInstanceCreation", "DEL SimpleName: ZipShort", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: result", "DEL SimpleName: out", "DEL NumberLiteral: 0xFF", "DEL SimpleName: m_entry", "DEL Block", "DEL NumberLiteral: 16", "DEL Modifier: static", "DEL ExpressionStatement", "DEL SimpleName: setMethod", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: m_encoding", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL Modifier: static", "DEL Modifier: final", "DEL Modifier: protected", "DEL Block", "DEL SimpleName: ZipArchiveEntry", "DEL SimpleName: getBytes", "DEL NumberLiteral: 0x00002100L", "DEL Assignment: +=", "DEL SimpleName: getSize", "DEL NumberLiteral: 0xFF00", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ZipShort", "DEL ExpressionStatement", "DEL SimpleType: ZipShort", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: ZipShort", "DEL QualifiedName: Deflater.DEFAULT_COMPRESSION", "DEL InfixExpression: <<", "DEL TextElement: Writes the data descriptor entry", "DEL SimpleName: ZipShort", "DEL ExpressionStatement", "DEL Assignment: +=", "DEL SimpleName: buffer", "DEL SimpleName: LFH_SIG", "DEL QualifiedName: Deflater.DEFAULT_COMPRESSION", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleName: getInstance", "DEL SimpleName: out", "DEL TagElement: @throws", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: write", "DEL SimpleName: write", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleType: ZipLong", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL TextElement: setting the CRC and uncompressed size information is required before ", "DEL SimpleName: m_written", "DEL ClassInstanceCreation", "DEL StringLiteral: \" instead of \"", "DEL SimpleName: num", "DEL TextElement:  The new Method value", "DEL SimpleName: cal", "DEL Assignment: +=", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: IOException", "DEL SimpleName: getBytes", "DEL SimpleName: write", "DEL ThrowStatement", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL QualifiedName: name.length", "DEL ExpressionStatement", "DEL QualifiedName: Calendar.MONTH", "DEL InfixExpression: &", "DEL Modifier: private", "DEL SimpleName: ZipLong", "DEL MethodDeclaration", "DEL NumberLiteral: 4", "DEL TextElement:  the length of data to write", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: method", "DEL ClassInstanceCreation", "DEL Modifier: protected", "DEL Block", "DEL ExpressionStatement"]}]}}, {"ZipOutputStream_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(2484) at 1", "Insert ImportDeclaration(5) into CompilationUnit(2484) at 2", "Insert ImportDeclaration(7) into CompilationUnit(2484) at 3", "Insert ImportDeclaration(13) into CompilationUnit(2484) at 6", "Insert ImportDeclaration(21) into CompilationUnit(2484) at 10", "Insert TypeDeclaration: class(2483) into CompilationUnit(2484) at 14", "Insert QualifiedName: java.io.File(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: java.io.FileOutputStream(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.io.FilterOutputStream(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: java.io.RandomAccessFile(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: java.util.Vector(20) into ImportDeclaration(21) at 0", "Insert Javadoc(63) into TypeDeclaration: class(2483) at 0", "Insert Modifier: public(64) into TypeDeclaration: class(2483) at 1", "Insert SimpleName: ZipOutputStream(65) into TypeDeclaration: class(2483) at 2", "Insert SimpleType: FilterOutputStream(67) into TypeDeclaration: class(2483) at 3", "Insert FieldDeclaration(75) into TypeDeclaration: class(2483) at 4", "Insert FieldDeclaration(83) into TypeDeclaration: class(2483) at 5", "Insert FieldDeclaration(91) into TypeDeclaration: class(2483) at 6", "Insert FieldDeclaration(99) into TypeDeclaration: class(2483) at 7", "Insert FieldDeclaration(107) into TypeDeclaration: class(2483) at 8", "Insert FieldDeclaration(120) into TypeDeclaration: class(2483) at 9", "Insert FieldDeclaration(133) into TypeDeclaration: class(2483) at 10", "Insert FieldDeclaration(146) into TypeDeclaration: class(2483) at 11", "Insert FieldDeclaration(157) into TypeDeclaration: class(2483) at 12", "Insert FieldDeclaration(169) into TypeDeclaration: class(2483) at 13", "Insert FieldDeclaration(180) into TypeDeclaration: class(2483) at 14", "Insert FieldDeclaration(192) into TypeDeclaration: class(2483) at 15", "Insert FieldDeclaration(203) into TypeDeclaration: class(2483) at 16", "Insert FieldDeclaration(217) into TypeDeclaration: class(2483) at 17", "Move FieldDeclaration(256) into TypeDeclaration: class(2483) at 18", "Insert FieldDeclaration(242) into TypeDeclaration: class(2483) at 19", "Insert FieldDeclaration(253) into TypeDeclaration: class(2483) at 20", "Insert FieldDeclaration(265) into TypeDeclaration: class(2483) at 21", "Insert FieldDeclaration(276) into TypeDeclaration: class(2483) at 22", "Insert FieldDeclaration(287) into TypeDeclaration: class(2483) at 23", "Move FieldDeclaration(62) into TypeDeclaration: class(2483) at 24", "Move FieldDeclaration(81) into TypeDeclaration: class(2483) at 25", "Move FieldDeclaration(321) into TypeDeclaration: class(2483) at 26", "Insert FieldDeclaration(352) into TypeDeclaration: class(2483) at 27", "Insert FieldDeclaration(375) into TypeDeclaration: class(2483) at 28", "Insert FieldDeclaration(399) into TypeDeclaration: class(2483) at 29", "Insert FieldDeclaration(411) into TypeDeclaration: class(2483) at 30", "Insert MethodDeclaration(429) into TypeDeclaration: class(2483) at 31", "Insert MethodDeclaration(502) into TypeDeclaration: class(2483) at 32", "Insert MethodDeclaration(530) into TypeDeclaration: class(2483) at 33", "Insert MethodDeclaration(556) into TypeDeclaration: class(2483) at 34", "Insert MethodDeclaration(571) into TypeDeclaration: class(2483) at 35", "Insert MethodDeclaration(638) into TypeDeclaration: class(2483) at 36", "Insert MethodDeclaration(863) into TypeDeclaration: class(2483) at 37", "Insert MethodDeclaration(996) into TypeDeclaration: class(2483) at 38", "Insert MethodDeclaration(1019) into TypeDeclaration: class(2483) at 39", "Insert MethodDeclaration(1070) into TypeDeclaration: class(2483) at 40", "Insert MethodDeclaration(1093) into TypeDeclaration: class(2483) at 41", "Insert MethodDeclaration(1239) into TypeDeclaration: class(2483) at 42", "Insert MethodDeclaration(1289) into TypeDeclaration: class(2483) at 43", "Insert MethodDeclaration(1326) into TypeDeclaration: class(2483) at 44", "Insert MethodDeclaration(1351) into TypeDeclaration: class(2483) at 45", "Insert FieldDeclaration(1369) into TypeDeclaration: class(2483) at 46", "Insert FieldDeclaration(1387) into TypeDeclaration: class(2483) at 47", "Insert FieldDeclaration(1405) into TypeDeclaration: class(2483) at 48", "Insert FieldDeclaration(1423) into TypeDeclaration: class(2483) at 49", "Insert MethodDeclaration(1460) into TypeDeclaration: class(2483) at 50", "Insert MethodDeclaration(1688) into TypeDeclaration: class(2483) at 51", "Insert MethodDeclaration(1757) into TypeDeclaration: class(2483) at 52", "Insert MethodDeclaration(2054) into TypeDeclaration: class(2483) at 53", "Insert MethodDeclaration(2135) into TypeDeclaration: class(2483) at 54", "Insert FieldDeclaration(2153) into TypeDeclaration: class(2483) at 55", "Insert MethodDeclaration(2183) into TypeDeclaration: class(2483) at 56", "Insert MethodDeclaration(2284) into TypeDeclaration: class(2483) at 57", "Move MethodDeclaration(1119) into TypeDeclaration: class(2483) at 58", "Insert MethodDeclaration(2371) into TypeDeclaration: class(2483) at 59", "Insert MethodDeclaration(2427) into TypeDeclaration: class(2483) at 60", "Insert MethodDeclaration(2466) into TypeDeclaration: class(2483) at 61", "Insert MethodDeclaration(2482) into TypeDeclaration: class(2483) at 62", "Insert TagElement(62) into Javadoc(63) at 0", "Insert SimpleName: FilterOutputStream(66) into SimpleType: FilterOutputStream(67) at 0", "Insert Modifier: private(68) into FieldDeclaration(75) at 0", "Insert Modifier: static(69) into FieldDeclaration(75) at 1", "Insert Modifier: final(70) into FieldDeclaration(75) at 2", "Insert PrimitiveType: int(71) into FieldDeclaration(75) at 3", "Insert VariableDeclarationFragment(74) into FieldDeclaration(75) at 4", "Insert Modifier: private(76) into FieldDeclaration(83) at 0", "Insert Modifier: static(77) into FieldDeclaration(83) at 1", "Insert Modifier: final(78) into FieldDeclaration(83) at 2", "Insert PrimitiveType: int(79) into FieldDeclaration(83) at 3", "Insert VariableDeclarationFragment(82) into FieldDeclaration(83) at 4", "Insert Modifier: private(84) into FieldDeclaration(91) at 0", "Insert Modifier: static(85) into FieldDeclaration(91) at 1", "Insert Modifier: final(86) into FieldDeclaration(91) at 2", "Insert PrimitiveType: int(87) into FieldDeclaration(91) at 3", "Insert VariableDeclarationFragment(90) into FieldDeclaration(91) at 4", "Insert Modifier: private(92) into FieldDeclaration(99) at 0", "Insert Modifier: static(93) into FieldDeclaration(99) at 1", "Insert Modifier: final(94) into FieldDeclaration(99) at 2", "Insert PrimitiveType: int(95) into FieldDeclaration(99) at 3", "Insert VariableDeclarationFragment(98) into FieldDeclaration(99) at 4", "Insert Modifier: private(100) into FieldDeclaration(107) at 0", "Insert Modifier: static(101) into FieldDeclaration(107) at 1", "Insert Modifier: final(102) into FieldDeclaration(107) at 2", "Insert PrimitiveType: int(103) into FieldDeclaration(107) at 3", "Insert VariableDeclarationFragment(106) into FieldDeclaration(107) at 4", "Move Javadoc(99) into FieldDeclaration(120) at 0", "Insert Modifier: public(113) into FieldDeclaration(120) at 1", "Insert Modifier: static(114) into FieldDeclaration(120) at 2", "Insert Modifier: final(115) into FieldDeclaration(120) at 3", "Insert PrimitiveType: int(116) into FieldDeclaration(120) at 4", "Insert VariableDeclarationFragment(119) into FieldDeclaration(120) at 5", "Insert Javadoc(125) into FieldDeclaration(133) at 0", "Insert Modifier: public(126) into FieldDeclaration(133) at 1", "Insert Modifier: static(127) into FieldDeclaration(133) at 2", "Insert Modifier: final(128) into FieldDeclaration(133) at 3", "Insert PrimitiveType: int(129) into FieldDeclaration(133) at 4", "Insert VariableDeclarationFragment(132) into FieldDeclaration(133) at 5", "Insert Javadoc(138) into FieldDeclaration(146) at 0", "Insert Modifier: public(139) into FieldDeclaration(146) at 1", "Insert Modifier: static(140) into FieldDeclaration(146) at 2", "Insert Modifier: final(141) into FieldDeclaration(146) at 3", "Insert PrimitiveType: int(142) into FieldDeclaration(146) at 4", "Insert VariableDeclarationFragment(145) into FieldDeclaration(146) at 5", "Move Javadoc(341) into FieldDeclaration(157) at 0", "Insert Modifier: private(152) into FieldDeclaration(157) at 1", "Insert SimpleType: ZipEntry(154) into FieldDeclaration(157) at 2", "Insert VariableDeclarationFragment(156) into FieldDeclaration(157) at 3", "Move Javadoc(197) into FieldDeclaration(169) at 0", "Insert Modifier: private(163) into FieldDeclaration(169) at 1", "Move SimpleType: String(200) into FieldDeclaration(169) at 2", "Insert VariableDeclarationFragment(168) into FieldDeclaration(169) at 3", "Move Javadoc(209) into FieldDeclaration(180) at 0", "Insert Modifier: private(175) into FieldDeclaration(180) at 1", "Insert PrimitiveType: int(176) into FieldDeclaration(180) at 2", "Insert VariableDeclarationFragment(179) into FieldDeclaration(180) at 3", "Insert Javadoc(186) into FieldDeclaration(192) at 0", "Insert Modifier: private(187) into FieldDeclaration(192) at 1", "Insert PrimitiveType: boolean(188) into FieldDeclaration(192) at 2", "Insert VariableDeclarationFragment(191) into FieldDeclaration(192) at 3", "Move Javadoc(220) into FieldDeclaration(203) at 0", "Insert Modifier: private(198) into FieldDeclaration(203) at 1", "Insert PrimitiveType: int(199) into FieldDeclaration(203) at 2", "Insert VariableDeclarationFragment(202) into FieldDeclaration(203) at 3", "Move Javadoc(231) into FieldDeclaration(217) at 0", "Insert Modifier: private(209) into FieldDeclaration(217) at 1", "Insert SimpleType: Vector(211) into FieldDeclaration(217) at 2", "Insert VariableDeclarationFragment(216) into FieldDeclaration(217) at 3", "Move Javadoc(261) into FieldDeclaration(242) at 0", "Insert Modifier: private(237) into FieldDeclaration(242) at 1", "Insert PrimitiveType: long(238) into FieldDeclaration(242) at 2", "Insert VariableDeclarationFragment(241) into FieldDeclaration(242) at 3", "Insert Javadoc(247) into FieldDeclaration(253) at 0", "Insert Modifier: private(248) into FieldDeclaration(253) at 1", "Insert PrimitiveType: long(249) into FieldDeclaration(253) at 2", "Insert VariableDeclarationFragment(252) into FieldDeclaration(253) at 3", "Insert Javadoc(259) into FieldDeclaration(265) at 0", "Insert Modifier: private(260) into FieldDeclaration(265) at 1", "Insert PrimitiveType: long(261) into FieldDeclaration(265) at 2", "Insert VariableDeclarationFragment(264) into FieldDeclaration(265) at 3", "Move Javadoc(281) into FieldDeclaration(276) at 0", "Insert Modifier: private(271) into FieldDeclaration(276) at 1", "Insert PrimitiveType: long(272) into FieldDeclaration(276) at 2", "Insert VariableDeclarationFragment(275) into FieldDeclaration(276) at 3", "Move Javadoc(296) into FieldDeclaration(287) at 0", "Insert Modifier: private(282) into FieldDeclaration(287) at 1", "Insert PrimitiveType: long(283) into FieldDeclaration(287) at 2", "Insert VariableDeclarationFragment(286) into FieldDeclaration(287) at 3", "Insert Javadoc(345) into FieldDeclaration(352) at 0", "Insert Modifier: private(346) into FieldDeclaration(352) at 1", "Move SimpleType: String(333) into FieldDeclaration(352) at 2", "Insert VariableDeclarationFragment(351) into FieldDeclaration(352) at 3", "Insert Javadoc(364) into FieldDeclaration(375) at 0", "Insert Modifier: protected(365) into FieldDeclaration(375) at 1", "Insert SimpleType: Deflater(367) into FieldDeclaration(375) at 2", "Insert VariableDeclarationFragment(374) into FieldDeclaration(375) at 3", "Insert Javadoc(387) into FieldDeclaration(399) at 0", "Insert Modifier: protected(388) into FieldDeclaration(399) at 1", "Move ArrayType: byte[](1016) into FieldDeclaration(399) at 2", "Insert VariableDeclarationFragment(398) into FieldDeclaration(399) at 3", "Insert Javadoc(404) into FieldDeclaration(411) at 0", "Insert Modifier: private(405) into FieldDeclaration(411) at 1", "Insert SimpleType: RandomAccessFile(407) into FieldDeclaration(411) at 2", "Insert VariableDeclarationFragment(410) into FieldDeclaration(411) at 3", "Insert Javadoc(419) into MethodDeclaration(429) at 0", "Insert Modifier: public(420) into MethodDeclaration(429) at 1", "Insert SimpleName: ZipOutputStream(421) into MethodDeclaration(429) at 2", "Insert SingleVariableDeclaration(425) into MethodDeclaration(429) at 3", "Insert Block(428) into MethodDeclaration(429) at 4", "Insert Javadoc(441) into MethodDeclaration(502) at 0", "Insert Modifier: public(442) into MethodDeclaration(502) at 1", "Insert SimpleName: ZipOutputStream(443) into MethodDeclaration(502) at 2", "Insert SingleVariableDeclaration(447) into MethodDeclaration(502) at 3", "Insert SimpleType: IOException(449) into MethodDeclaration(502) at 4", "Insert Block(501) into MethodDeclaration(502) at 5", "Insert Javadoc(521) into MethodDeclaration(530) at 0", "Insert Modifier: public(522) into MethodDeclaration(530) at 1", "Insert PrimitiveType: boolean(523) into MethodDeclaration(530) at 2", "Insert SimpleName: isSeekable(524) into MethodDeclaration(530) at 3", "Insert Block(529) into MethodDeclaration(530) at 4", "Insert Javadoc(541) into MethodDeclaration(556) at 0", "Insert Modifier: public(542) into MethodDeclaration(556) at 1", "Insert PrimitiveType: void(543) into MethodDeclaration(556) at 2", "Insert SimpleName: setEncoding(544) into MethodDeclaration(556) at 3", "Move SingleVariableDeclaration(585) into MethodDeclaration(556) at 4", "Insert Block(555) into MethodDeclaration(556) at 5", "Move Javadoc(641) into MethodDeclaration(571) at 0", "Insert Modifier: public(564) into MethodDeclaration(571) at 1", "Move SimpleType: String(644) into MethodDeclaration(571) at 2", "Insert SimpleName: getEncoding(567) into MethodDeclaration(571) at 3", "Insert Block(570) into MethodDeclaration(571) at 4", "Insert Javadoc(580) into MethodDeclaration(638) at 0", "Insert Modifier: public(581) into MethodDeclaration(638) at 1", "Insert PrimitiveType: void(582) into MethodDeclaration(638) at 2", "Insert SimpleName: finish(583) into MethodDeclaration(638) at 3", "Move SimpleType: IOException(808) into MethodDeclaration(638) at 4", "Insert Block(637) into MethodDeclaration(638) at 5", "Insert Javadoc(646) into MethodDeclaration(863) at 0", "Insert Modifier: public(647) into MethodDeclaration(863) at 1", "Insert PrimitiveType: void(648) into MethodDeclaration(863) at 2", "Insert SimpleName: closeEntry(649) into MethodDeclaration(863) at 3", "Move SimpleType: IOException(662) into MethodDeclaration(863) at 4", "Insert Block(862) into MethodDeclaration(863) at 5", "Insert Javadoc(874) into MethodDeclaration(996) at 0", "Insert Modifier: public(875) into MethodDeclaration(996) at 1", "Insert PrimitiveType: void(876) into MethodDeclaration(996) at 2", "Insert SimpleName: putNextEntry(877) into MethodDeclaration(996) at 3", "Insert SingleVariableDeclaration(881) into MethodDeclaration(996) at 4", "Move SimpleType: IOException(900) into MethodDeclaration(996) at 5", "Insert Block(995) into MethodDeclaration(996) at 6", "Insert Javadoc(1004) into MethodDeclaration(1019) at 0", "Insert Modifier: public(1005) into MethodDeclaration(1019) at 1", "Insert PrimitiveType: void(1006) into MethodDeclaration(1019) at 2", "Insert SimpleName: setComment(1007) into MethodDeclaration(1019) at 3", "Move SingleVariableDeclaration(560) into MethodDeclaration(1019) at 4", "Insert Block(1018) into MethodDeclaration(1019) at 5", "Insert Javadoc(1031) into MethodDeclaration(1070) at 0", "Insert Modifier: public(1032) into MethodDeclaration(1070) at 1", "Insert PrimitiveType: void(1033) into MethodDeclaration(1070) at 2", "Insert SimpleName: setLevel(1034) into MethodDeclaration(1070) at 3", "Move SingleVariableDeclaration(606) into MethodDeclaration(1070) at 4", "Insert Block(1069) into MethodDeclaration(1070) at 5", "Insert Javadoc(1079) into MethodDeclaration(1093) at 0", "Insert Modifier: public(1080) into MethodDeclaration(1093) at 1", "Insert PrimitiveType: void(1081) into MethodDeclaration(1093) at 2", "Insert SimpleName: setMethod(1082) into MethodDeclaration(1093) at 3", "Insert SingleVariableDeclaration(1085) into MethodDeclaration(1093) at 4", "Insert Block(1092) into MethodDeclaration(1093) at 5", "Insert Javadoc(1108) into MethodDeclaration(1239) at 0", "Insert Modifier: public(1109) into MethodDeclaration(1239) at 1", "Insert PrimitiveType: void(1110) into MethodDeclaration(1239) at 2", "Insert SimpleName: write(1111) into MethodDeclaration(1239) at 3", "Insert SingleVariableDeclaration(1116) into MethodDeclaration(1239) at 4", "Insert SingleVariableDeclaration(1119) into MethodDeclaration(1239) at 5", "Insert SingleVariableDeclaration(1122) into MethodDeclaration(1239) at 6", "Move SimpleType: IOException(1028) into MethodDeclaration(1239) at 7", "Insert Block(1238) into MethodDeclaration(1239) at 8", "Insert Javadoc(1251) into MethodDeclaration(1289) at 0", "Insert Modifier: public(1252) into MethodDeclaration(1289) at 1", "Insert PrimitiveType: void(1253) into MethodDeclaration(1289) at 2", "Insert SimpleName: write(1254) into MethodDeclaration(1289) at 3", "Insert SingleVariableDeclaration(1257) into MethodDeclaration(1289) at 4", "Insert SimpleType: IOException(1259) into MethodDeclaration(1289) at 5", "Insert Block(1288) into MethodDeclaration(1289) at 6", "Insert Javadoc(1298) into MethodDeclaration(1326) at 0", "Insert Modifier: public(1299) into MethodDeclaration(1326) at 1", "Insert PrimitiveType: void(1300) into MethodDeclaration(1326) at 2", "Insert SimpleName: close(1301) into MethodDeclaration(1326) at 3", "Move SimpleType: IOException(1132) into MethodDeclaration(1326) at 4", "Insert Block(1325) into MethodDeclaration(1326) at 5", "Insert Javadoc(1335) into MethodDeclaration(1351) at 0", "Insert Modifier: public(1336) into MethodDeclaration(1351) at 1", "Insert PrimitiveType: void(1337) into MethodDeclaration(1351) at 2", "Insert SimpleName: flush(1338) into MethodDeclaration(1351) at 3", "Insert SimpleType: IOException(1340) into MethodDeclaration(1351) at 4", "Insert Block(1350) into MethodDeclaration(1351) at 5", "Move Javadoc(112) into FieldDeclaration(1369) at 0", "Insert Modifier: protected(1357) into FieldDeclaration(1369) at 1", "Insert Modifier: static(1358) into FieldDeclaration(1369) at 2", "Insert Modifier: final(1359) into FieldDeclaration(1369) at 3", "Insert ArrayType: byte[](1362) into FieldDeclaration(1369) at 4", "Insert VariableDeclarationFragment(1368) into FieldDeclaration(1369) at 5", "Move Javadoc(129) into FieldDeclaration(1387) at 0", "Insert Modifier: protected(1375) into FieldDeclaration(1387) at 1", "Insert Modifier: static(1376) into FieldDeclaration(1387) at 2", "Insert Modifier: final(1377) into FieldDeclaration(1387) at 3", "Insert ArrayType: byte[](1380) into FieldDeclaration(1387) at 4", "Insert VariableDeclarationFragment(1386) into FieldDeclaration(1387) at 5", "Move Javadoc(146) into FieldDeclaration(1405) at 0", "Insert Modifier: protected(1393) into FieldDeclaration(1405) at 1", "Insert Modifier: static(1394) into FieldDeclaration(1405) at 2", "Insert Modifier: final(1395) into FieldDeclaration(1405) at 3", "Insert ArrayType: byte[](1398) into FieldDeclaration(1405) at 4", "Insert VariableDeclarationFragment(1404) into FieldDeclaration(1405) at 5", "Move Javadoc(163) into FieldDeclaration(1423) at 0", "Insert Modifier: protected(1411) into FieldDeclaration(1423) at 1", "Insert Modifier: static(1412) into FieldDeclaration(1423) at 2", "Insert Modifier: final(1413) into FieldDeclaration(1423) at 3", "Insert ArrayType: byte[](1416) into FieldDeclaration(1423) at 4", "Insert VariableDeclarationFragment(1422) into FieldDeclaration(1423) at 5", "Insert Javadoc(1431) into MethodDeclaration(1460) at 0", "Insert Modifier: protected(1432) into MethodDeclaration(1460) at 1", "Insert Modifier: final(1433) into MethodDeclaration(1460) at 2", "Insert PrimitiveType: void(1434) into MethodDeclaration(1460) at 3", "Insert SimpleName: deflate(1435) into MethodDeclaration(1460) at 4", "Insert SimpleType: IOException(1437) into MethodDeclaration(1460) at 5", "Insert Block(1459) into MethodDeclaration(1460) at 6", "Insert Javadoc(1471) into MethodDeclaration(1688) at 0", "Insert Modifier: protected(1472) into MethodDeclaration(1688) at 1", "Insert PrimitiveType: void(1473) into MethodDeclaration(1688) at 2", "Insert SimpleName: writeLocalFileHeader(1474) into MethodDeclaration(1688) at 3", "Insert SingleVariableDeclaration(1478) into MethodDeclaration(1688) at 4", "Move SimpleType: IOException(1672) into MethodDeclaration(1688) at 5", "Insert Block(1687) into MethodDeclaration(1688) at 6", "Insert Javadoc(1699) into MethodDeclaration(1757) at 0", "Insert Modifier: protected(1700) into MethodDeclaration(1757) at 1", "Insert PrimitiveType: void(1701) into MethodDeclaration(1757) at 2", "Insert SimpleName: writeDataDescriptor(1702) into MethodDeclaration(1757) at 3", "Insert SingleVariableDeclaration(1706) into MethodDeclaration(1757) at 4", "Move SimpleType: IOException(1591) into MethodDeclaration(1757) at 5", "Insert Block(1756) into MethodDeclaration(1757) at 6", "Insert Javadoc(1768) into MethodDeclaration(2054) at 0", "Insert Modifier: protected(1769) into MethodDeclaration(2054) at 1", "Insert PrimitiveType: void(1770) into MethodDeclaration(2054) at 2", "Insert SimpleName: writeCentralFileHeader(1771) into MethodDeclaration(2054) at 3", "Insert SingleVariableDeclaration(1775) into MethodDeclaration(2054) at 4", "Move SimpleType: IOException(1236) into MethodDeclaration(2054) at 5", "Insert Block(2053) into MethodDeclaration(2054) at 6", "Insert Javadoc(2062) into MethodDeclaration(2135) at 0", "Insert Modifier: protected(2063) into MethodDeclaration(2135) at 1", "Insert PrimitiveType: void(2064) into MethodDeclaration(2135) at 2", "Insert SimpleName: writeCentralDirectoryEnd(2065) into MethodDeclaration(2135) at 3", "Insert SimpleType: IOException(2067) into MethodDeclaration(2135) at 4", "Insert Block(2134) into MethodDeclaration(2135) at 5", "Move Javadoc(180) into FieldDeclaration(2153) at 0", "Insert Modifier: private(2141) into FieldDeclaration(2153) at 1", "Insert Modifier: static(2142) into FieldDeclaration(2153) at 2", "Insert Modifier: final(2143) into FieldDeclaration(2153) at 3", "Insert ArrayType: byte[](2146) into FieldDeclaration(2153) at 4", "Insert VariableDeclarationFragment(2152) into FieldDeclaration(2153) at 5", "Insert Javadoc(2163) into MethodDeclaration(2183) at 0", "Insert Modifier: protected(2164) into MethodDeclaration(2183) at 1", "Insert Modifier: static(2165) into MethodDeclaration(2183) at 2", "Move SimpleType: ZipLong(386) into MethodDeclaration(2183) at 3", "Insert SimpleName: toDosTime(2168) into MethodDeclaration(2183) at 4", "Move SingleVariableDeclaration(391) into MethodDeclaration(2183) at 5", "Insert Block(2182) into MethodDeclaration(2183) at 6", "Insert Javadoc(2194) into MethodDeclaration(2284) at 0", "Insert Modifier: protected(2195) into MethodDeclaration(2284) at 1", "Insert Modifier: static(2196) into MethodDeclaration(2284) at 2", "Insert ArrayType: byte[](2199) into MethodDeclaration(2284) at 3", "Insert SimpleName: toDosTime(2200) into MethodDeclaration(2284) at 4", "Insert SingleVariableDeclaration(2203) into MethodDeclaration(2284) at 5", "Insert Block(2283) into MethodDeclaration(2284) at 6", "Insert Javadoc(2352) into MethodDeclaration(2371) at 0", "Insert Modifier: protected(2353) into MethodDeclaration(2371) at 1", "Insert Modifier: final(2354) into MethodDeclaration(2371) at 2", "Insert PrimitiveType: void(2355) into MethodDeclaration(2371) at 3", "Insert SimpleName: writeOut(2356) into MethodDeclaration(2371) at 4", "Insert SingleVariableDeclaration(2361) into MethodDeclaration(2371) at 5", "Insert SimpleType: IOException(2363) into MethodDeclaration(2371) at 6", "Insert Block(2370) into MethodDeclaration(2371) at 7", "Insert Javadoc(2388) into MethodDeclaration(2427) at 0", "Insert Modifier: protected(2389) into MethodDeclaration(2427) at 1", "Insert Modifier: final(2390) into MethodDeclaration(2427) at 2", "Insert PrimitiveType: void(2391) into MethodDeclaration(2427) at 3", "Insert SimpleName: writeOut(2392) into MethodDeclaration(2427) at 4", "Insert SingleVariableDeclaration(2397) into MethodDeclaration(2427) at 5", "Insert SingleVariableDeclaration(2400) into MethodDeclaration(2427) at 6", "Insert SingleVariableDeclaration(2403) into MethodDeclaration(2427) at 7", "Insert SimpleType: IOException(2405) into MethodDeclaration(2427) at 8", "Insert Block(2426) into MethodDeclaration(2427) at 9", "Insert Javadoc(2438) into MethodDeclaration(2466) at 0", "Insert Modifier: protected(2439) into MethodDeclaration(2466) at 1", "Insert Modifier: static(2440) into MethodDeclaration(2466) at 2", "Insert PrimitiveType: long(2441) into MethodDeclaration(2466) at 3", "Insert SimpleName: adjustToLong(2442) into MethodDeclaration(2466) at 4", "Insert SingleVariableDeclaration(2445) into MethodDeclaration(2466) at 5", "Insert Block(2465) into MethodDeclaration(2466) at 6", "Insert Modifier: private(2467) into MethodDeclaration(2482) at 0", "Insert PrimitiveType: void(2468) into MethodDeclaration(2482) at 1", "Insert SimpleName: deflateUntilInputIsNeeded(2469) into MethodDeclaration(2482) at 2", "Insert SimpleType: IOException(2471) into MethodDeclaration(2482) at 3", "Insert Block(2481) into MethodDeclaration(2482) at 4", "Insert TextElement: Reimplementation of (28) into TagElement(62) at 0", "Move TagElement: @link(27) into TagElement(62) at 1", "Insert TextElement:  that does handle the extended(32) into TagElement(62) at 2", "Insert TextElement: functionality of this package, especially internal/external file(33) into TagElement(62) at 3", "Insert TextElement: attributes and extra fields with different layouts for local file(34) into TagElement(62) at 4", "Insert TextElement: data and central directory entries.(35) into TagElement(62) at 5", "Insert TextElement: <p>This class will try to use (36) into TagElement(62) at 6", "Insert TagElement: @link(39) into TagElement(62) at 7", "Insert TextElement:  when you know that the output is going to go to a(40) into TagElement(62) at 8", "Insert TextElement: file.</p>(41) into TagElement(62) at 9", "Insert TextElement: <p>If RandomAccessFile cannot be used, this implementation will use(42) into TagElement(62) at 10", "Insert TextElement: a Data Descriptor to store size and CRC information for (43) into TagElement(62) at 11", "Insert TagElement: @link(47) into TagElement(62) at 12", "Insert TextElement:  entries, this means, you don't need to(48) into TagElement(62) at 13", "Insert TextElement: calculate them yourself.  Unfortunately this is not possible for(49) into TagElement(62) at 14", "Insert TextElement: the (50) into TagElement(62) at 15", "Insert TagElement: @link(54) into TagElement(62) at 16", "Insert TextElement:  method, here setting the CRC and(55) into TagElement(62) at 17", "Insert TextElement: uncompressed size information is required before (56) into TagElement(62) at 18", "Move TagElement: @link(38) into TagElement(62) at 19", "Insert TextElement:  can be called.</p>(61) into TagElement(62) at 20", "Insert SimpleName: BYTE_MASK(72) into VariableDeclarationFragment(74) at 0", "Insert NumberLiteral: 0xFF(73) into VariableDeclarationFragment(74) at 1", "Insert SimpleName: SHORT(80) into VariableDeclarationFragment(82) at 0", "Insert NumberLiteral: 2(81) into VariableDeclarationFragment(82) at 1", "Insert SimpleName: WORD(88) into VariableDeclarationFragment(90) at 0", "Insert NumberLiteral: 4(89) into VariableDeclarationFragment(90) at 1", "Insert SimpleName: BUFFER_SIZE(96) into VariableDeclarationFragment(98) at 0", "Insert NumberLiteral: 512(97) into VariableDeclarationFragment(98) at 1", "Insert SimpleName: DEFLATER_BLOCK_SIZE(104) into VariableDeclarationFragment(106) at 0", "Insert NumberLiteral: 8192(105) into VariableDeclarationFragment(106) at 1", "Insert SimpleName: DEFLATED(117) into VariableDeclarationFragment(119) at 0", "Insert QualifiedName: java.util.zip.ZipEntry.DEFLATED(118) into VariableDeclarationFragment(119) at 1", "Insert TagElement(122) into Javadoc(125) at 0", "Insert TagElement: @since(124) into Javadoc(125) at 1", "Insert SimpleName: DEFAULT_COMPRESSION(130) into VariableDeclarationFragment(132) at 0", "Insert QualifiedName: Deflater.DEFAULT_COMPRESSION(131) into VariableDeclarationFragment(132) at 1", "Insert TagElement(135) into Javadoc(138) at 0", "Insert TagElement: @since(137) into Javadoc(138) at 1", "Insert SimpleName: STORED(143) into VariableDeclarationFragment(145) at 0", "Insert QualifiedName: java.util.zip.ZipEntry.STORED(144) into VariableDeclarationFragment(145) at 1", "Insert SimpleName: ZipEntry(153) into SimpleType: ZipEntry(154) at 0", "Insert SimpleName: entry(155) into VariableDeclarationFragment(156) at 0", "Insert SimpleName: comment(166) into VariableDeclarationFragment(168) at 0", "Insert StringLiteral: \"\"(167) into VariableDeclarationFragment(168) at 1", "Insert SimpleName: level(177) into VariableDeclarationFragment(179) at 0", "Insert SimpleName: DEFAULT_COMPRESSION(178) into VariableDeclarationFragment(179) at 1", "Insert TagElement(183) into Javadoc(186) at 0", "Insert TagElement: @since(185) into Javadoc(186) at 1", "Insert SimpleName: hasCompressionLevelChanged(189) into VariableDeclarationFragment(191) at 0", "Insert BooleanLiteral: false(190) into VariableDeclarationFragment(191) at 1", "Insert SimpleName: method(200) into VariableDeclarationFragment(202) at 0", "Insert QualifiedName: java.util.zip.ZipEntry.DEFLATED(201) into VariableDeclarationFragment(202) at 1", "Insert SimpleName: Vector(210) into SimpleType: Vector(211) at 0", "Insert SimpleName: entries(212) into VariableDeclarationFragment(216) at 0", "Insert ClassInstanceCreation(215) into VariableDeclarationFragment(216) at 1", "Update SimpleName: m_crc(251) to crc", "Insert SimpleName: written(239) into VariableDeclarationFragment(241) at 0", "Insert NumberLiteral: 0(240) into VariableDeclarationFragment(241) at 1", "Insert TagElement(244) into Javadoc(247) at 0", "Move TagElement: @since(270) into Javadoc(247) at 1", "Insert SimpleName: dataStart(250) into VariableDeclarationFragment(252) at 0", "Insert NumberLiteral: 0(251) into VariableDeclarationFragment(252) at 1", "Insert TagElement(256) into Javadoc(259) at 0", "Insert TagElement: @since(258) into Javadoc(259) at 1", "Insert SimpleName: localDataStart(262) into VariableDeclarationFragment(264) at 0", "Insert NumberLiteral: 0(263) into VariableDeclarationFragment(264) at 1", "Insert SimpleName: cdOffset(273) into VariableDeclarationFragment(275) at 0", "Insert NumberLiteral: 0(274) into VariableDeclarationFragment(275) at 1", "Insert SimpleName: cdLength(284) into VariableDeclarationFragment(286) at 0", "Insert NumberLiteral: 0(285) into VariableDeclarationFragment(286) at 1", "Update SimpleName: m_offsets(316) to offsets", "Insert TagElement(342) into Javadoc(345) at 0", "Move TagElement: @since(329) into Javadoc(345) at 1", "Insert SimpleName: encoding(349) into VariableDeclarationFragment(351) at 0", "Insert NullLiteral(350) into VariableDeclarationFragment(351) at 1", "Insert TagElement(361) into Javadoc(364) at 0", "Insert TagElement: @since(363) into Javadoc(364) at 1", "Insert SimpleName: Deflater(366) into SimpleType: Deflater(367) at 0", "Insert SimpleName: def(368) into VariableDeclarationFragment(374) at 0", "Insert ClassInstanceCreation(373) into VariableDeclarationFragment(374) at 1", "Insert TagElement(384) into Javadoc(387) at 0", "Insert TagElement: @since(386) into Javadoc(387) at 1", "Insert SimpleName: buf(392) into VariableDeclarationFragment(398) at 0", "Insert ArrayCreation(397) into VariableDeclarationFragment(398) at 1", "Insert TagElement(401) into Javadoc(404) at 0", "Insert TagElement: @since(403) into Javadoc(404) at 1", "Insert SimpleName: RandomAccessFile(406) into SimpleType: RandomAccessFile(407) at 0", "Insert SimpleName: raf(408) into VariableDeclarationFragment(410) at 0", "Insert NullLiteral(409) into VariableDeclarationFragment(410) at 1", "Move TagElement(349) into Javadoc(419) at 0", "Insert TagElement: @param(416) into Javadoc(419) at 1", "Move TagElement: @since(354) into Javadoc(419) at 2", "Move SimpleType: OutputStream(360) into SingleVariableDeclaration(425) at 0", "Insert SimpleName: out(424) into SingleVariableDeclaration(425) at 1", "Insert SuperConstructorInvocation(427) into Block(428) at 0", "Insert TagElement(432) into Javadoc(441) at 0", "Insert TagElement: @param(435) into Javadoc(441) at 1", "Insert TagElement: @since(437) into Javadoc(441) at 2", "Insert TagElement: @throws(440) into Javadoc(441) at 3", "Insert SimpleType: File(445) into SingleVariableDeclaration(447) at 0", "Insert SimpleName: file(446) into SingleVariableDeclaration(447) at 1", "Insert SimpleName: IOException(448) into SimpleType: IOException(449) at 0", "Insert SuperConstructorInvocation(451) into Block(501) at 0", "Insert TryStatement(500) into Block(501) at 1", "Insert TagElement(516) into Javadoc(521) at 0", "Insert TagElement: @return(518) into Javadoc(521) at 1", "Insert TagElement: @since(520) into Javadoc(521) at 2", "Insert ReturnStatement(528) into Block(529) at 0", "Insert TagElement(535) into Javadoc(541) at 0", "Insert TagElement: @param(538) into Javadoc(541) at 1", "Move TagElement: @since(577) into Javadoc(541) at 2", "Insert ExpressionStatement(554) into Block(555) at 0", "Insert ReturnStatement(569) into Block(570) at 0", "Insert TagElement(574) into Javadoc(580) at 0", "Move TagElement: @since(599) into Javadoc(580) at 1", "Insert TagElement: @throws(579) into Javadoc(580) at 2", "Move ExpressionStatement(811) into Block(637) at 0", "Insert ExpressionStatement(592) into Block(637) at 1", "Insert ForStatement(619) into Block(637) at 2", "Insert ExpressionStatement(625) into Block(637) at 3", "Move ExpressionStatement(869) into Block(637) at 4", "Insert ExpressionStatement(632) into Block(637) at 5", "Insert ExpressionStatement(636) into Block(637) at 6", "Move TagElement(651) into Javadoc(646) at 0", "Move TagElement: @since(656) into Javadoc(646) at 1", "Insert TagElement: @throws(645) into Javadoc(646) at 2", "Insert IfStatement(657) into Block(862) at 0", "Insert VariableDeclarationStatement(664) into Block(862) at 1", "Insert ExpressionStatement(668) into Block(862) at 2", "Insert IfStatement(804) into Block(862) at 3", "Insert IfStatement(853) into Block(862) at 4", "Insert ExpressionStatement(857) into Block(862) at 5", "Insert ExpressionStatement(861) into Block(862) at 6", "Move TagElement(881) into Javadoc(874) at 0", "Insert TagElement: @param(868) into Javadoc(874) at 1", "Move TagElement: @since(889) into Javadoc(874) at 2", "Insert TagElement: @throws(873) into Javadoc(874) at 3", "Insert SimpleType: ZipEntry(879) into SingleVariableDeclaration(881) at 0", "Insert SimpleName: ze(880) into SingleVariableDeclaration(881) at 1", "Move ExpressionStatement(903) into Block(995) at 0", "Insert ExpressionStatement(890) into Block(995) at 1", "Insert ExpressionStatement(895) into Block(995) at 2", "Insert IfStatement(908) into Block(995) at 3", "Insert IfStatement(923) into Block(995) at 4", "Insert IfStatement(972) into Block(995) at 5", "Insert IfStatement(990) into Block(995) at 6", "Insert ExpressionStatement(994) into Block(995) at 7", "Move TagElement(547) into Javadoc(1004) at 0", "Insert TagElement: @param(1001) into Javadoc(1004) at 1", "Move TagElement: @since(552) into Javadoc(1004) at 2", "Insert ExpressionStatement(1017) into Block(1018) at 0", "Insert TagElement(1022) into Javadoc(1031) at 0", "Insert TagElement: @param(1025) into Javadoc(1031) at 1", "Insert TagElement: @throws(1028) into Javadoc(1031) at 2", "Move TagElement: @since(1225) into Javadoc(1031) at 3", "Insert IfStatement(1053) into Block(1069) at 0", "Insert ExpressionStatement(1062) into Block(1069) at 1", "Insert ExpressionStatement(1068) into Block(1069) at 2", "Insert TagElement(1073) into Javadoc(1079) at 0", "Insert TagElement: @param(1076) into Javadoc(1079) at 1", "Move TagElement: @since(1126) into Javadoc(1079) at 2", "Insert PrimitiveType: int(1083) into SingleVariableDeclaration(1085) at 0", "Insert SimpleName: method(1084) into SingleVariableDeclaration(1085) at 1", "Insert ExpressionStatement(1091) into Block(1092) at 0", "Insert TagElement(1095) into Javadoc(1108) at 0", "Insert TagElement: @param(1098) into Javadoc(1108) at 1", "Insert TagElement: @param(1101) into Javadoc(1108) at 2", "Insert TagElement: @param(1104) into Javadoc(1108) at 3", "Insert TagElement: @throws(1107) into Javadoc(1108) at 4", "Move ArrayType: byte[](1152) into SingleVariableDeclaration(1116) at 0", "Insert SimpleName: b(1115) into SingleVariableDeclaration(1116) at 1", "Insert PrimitiveType: int(1117) into SingleVariableDeclaration(1119) at 0", "Insert SimpleName: offset(1118) into SingleVariableDeclaration(1119) at 1", "Insert PrimitiveType: int(1120) into SingleVariableDeclaration(1122) at 0", "Insert SimpleName: length(1121) into SingleVariableDeclaration(1122) at 1", "Insert IfStatement(1230) into Block(1238) at 0", "Insert ExpressionStatement(1237) into Block(1238) at 1", "Insert TagElement(1242) into Javadoc(1251) at 0", "Insert TagElement: @param(1245) into Javadoc(1251) at 1", "Insert TagElement: @since(1247) into Javadoc(1251) at 2", "Insert TagElement: @throws(1250) into Javadoc(1251) at 3", "Insert PrimitiveType: int(1255) into SingleVariableDeclaration(1257) at 0", "Insert SimpleName: b(1256) into SingleVariableDeclaration(1257) at 1", "Insert SimpleName: IOException(1258) into SimpleType: IOException(1259) at 0", "Insert VariableDeclarationStatement(1270) into Block(1288) at 0", "Insert ExpressionStatement(1281) into Block(1288) at 1", "Insert ExpressionStatement(1287) into Block(1288) at 2", "Insert TagElement(1292) into Javadoc(1298) at 0", "Insert TagElement: @exception(1295) into Javadoc(1298) at 1", "Insert TagElement: @since(1297) into Javadoc(1298) at 2", "Insert ExpressionStatement(1306) into Block(1325) at 0", "Insert IfStatement(1315) into Block(1325) at 1", "Insert IfStatement(1324) into Block(1325) at 2", "Insert TagElement(1329) into Javadoc(1335) at 0", "Insert TagElement: @exception(1332) into Javadoc(1335) at 1", "Insert TagElement: @since(1334) into Javadoc(1335) at 2", "Insert SimpleName: IOException(1339) into SimpleType: IOException(1340) at 0", "Insert IfStatement(1349) into Block(1350) at 0", "Insert PrimitiveType: byte(1360) into ArrayType: byte[](1362) at 0", "Insert Dimension(1361) into ArrayType: byte[](1362) at 1", "Insert SimpleName: LFH_SIG(1363) into VariableDeclarationFragment(1368) at 0", "Insert MethodInvocation(1367) into VariableDeclarationFragment(1368) at 1", "Insert PrimitiveType: byte(1378) into ArrayType: byte[](1380) at 0", "Insert Dimension(1379) into ArrayType: byte[](1380) at 1", "Insert SimpleName: DD_SIG(1381) into VariableDeclarationFragment(1386) at 0", "Insert MethodInvocation(1385) into VariableDeclarationFragment(1386) at 1", "Insert PrimitiveType: byte(1396) into ArrayType: byte[](1398) at 0", "Insert Dimension(1397) into ArrayType: byte[](1398) at 1", "Insert SimpleName: CFH_SIG(1399) into VariableDeclarationFragment(1404) at 0", "Insert MethodInvocation(1403) into VariableDeclarationFragment(1404) at 1", "Insert PrimitiveType: byte(1414) into ArrayType: byte[](1416) at 0", "Insert Dimension(1415) into ArrayType: byte[](1416) at 1", "Insert SimpleName: EOCD_SIG(1417) into VariableDeclarationFragment(1422) at 0", "Insert MethodInvocation(1421) into VariableDeclarationFragment(1422) at 1", "Insert TagElement(1425) into Javadoc(1431) at 0", "Insert TagElement: @throws(1428) into Javadoc(1431) at 1", "Insert TagElement: @since(1430) into Javadoc(1431) at 2", "Insert SimpleName: IOException(1436) into SimpleType: IOException(1437) at 0", "Insert VariableDeclarationStatement(1447) into Block(1459) at 0", "Insert IfStatement(1458) into Block(1459) at 1", "Move TagElement(1653) into Javadoc(1471) at 0", "Insert TagElement: @param(1465) into Javadoc(1471) at 1", "Insert TagElement: @throws(1468) into Javadoc(1471) at 2", "Move TagElement: @since(1661) into Javadoc(1471) at 3", "Insert SimpleType: ZipEntry(1476) into SingleVariableDeclaration(1478) at 0", "Insert SimpleName: ze(1477) into SingleVariableDeclaration(1478) at 1", "Insert ExpressionStatement(1489) into Block(1687) at 0", "Insert ExpressionStatement(1493) into Block(1687) at 1", "Insert ExpressionStatement(1497) into Block(1687) at 2", "Insert VariableDeclarationStatement(1505) into Block(1687) at 3", "Insert IfStatement(1540) into Block(1687) at 4", "Insert ExpressionStatement(1544) into Block(1687) at 5", "Insert ExpressionStatement(1551) into Block(1687) at 6", "Insert ExpressionStatement(1555) into Block(1687) at 7", "Insert ExpressionStatement(1563) into Block(1687) at 8", "Insert ExpressionStatement(1567) into Block(1687) at 9", "Insert ExpressionStatement(1571) into Block(1687) at 10", "Insert IfStatement(1620) into Block(1687) at 11", "Insert ExpressionStatement(1624) into Block(1687) at 12", "Insert VariableDeclarationStatement(1635) into Block(1687) at 13", "Insert ExpressionStatement(1642) into Block(1687) at 14", "Insert ExpressionStatement(1646) into Block(1687) at 15", "Insert VariableDeclarationStatement(1655) into Block(1687) at 16", "Insert ExpressionStatement(1662) into Block(1687) at 17", "Insert ExpressionStatement(1666) into Block(1687) at 18", "Insert ExpressionStatement(1670) into Block(1687) at 19", "Insert ExpressionStatement(1674) into Block(1687) at 20", "Insert ExpressionStatement(1678) into Block(1687) at 21", "Insert ExpressionStatement(1682) into Block(1687) at 22", "Insert ExpressionStatement(1686) into Block(1687) at 23", "Insert TagElement(1690) into Javadoc(1699) at 0", "Insert TagElement: @param(1693) into Javadoc(1699) at 1", "Insert TagElement: @throws(1696) into Javadoc(1699) at 2", "Move TagElement: @since(1581) into Javadoc(1699) at 3", "Insert SimpleType: ZipEntry(1704) into SingleVariableDeclaration(1706) at 0", "Insert SimpleName: ze(1705) into SingleVariableDeclaration(1706) at 1", "Move IfStatement(1599) into Block(1756) at 0", "Insert ExpressionStatement(1724) into Block(1756) at 1", "Insert ExpressionStatement(1733) into Block(1756) at 2", "Insert ExpressionStatement(1742) into Block(1756) at 3", "Insert ExpressionStatement(1751) into Block(1756) at 4", "Insert ExpressionStatement(1755) into Block(1756) at 5", "Insert TagElement(1759) into Javadoc(1768) at 0", "Insert TagElement: @param(1762) into Javadoc(1768) at 1", "Insert TagElement: @throws(1765) into Javadoc(1768) at 2", "Move TagElement: @since(381) into Javadoc(1768) at 3", "Insert SimpleType: ZipEntry(1773) into SingleVariableDeclaration(1775) at 0", "Insert SimpleName: ze(1774) into SingleVariableDeclaration(1775) at 1", "Insert ExpressionStatement(1781) into Block(2053) at 0", "Insert ExpressionStatement(1785) into Block(2053) at 1", "Insert ExpressionStatement(1799) into Block(2053) at 2", "Insert ExpressionStatement(1803) into Block(2053) at 3", "Insert IfStatement(1840) into Block(2053) at 4", "Insert ExpressionStatement(1844) into Block(2053) at 5", "Insert ExpressionStatement(1853) into Block(2053) at 6", "Insert ExpressionStatement(1857) into Block(2053) at 7", "Insert ExpressionStatement(1865) into Block(2053) at 8", "Insert ExpressionStatement(1869) into Block(2053) at 9", "Insert ExpressionStatement(1878) into Block(2053) at 10", "Insert ExpressionStatement(1887) into Block(2053) at 11", "Insert ExpressionStatement(1896) into Block(2053) at 12", "Insert ExpressionStatement(1900) into Block(2053) at 13", "Insert VariableDeclarationStatement(1911) into Block(2053) at 14", "Insert ExpressionStatement(1918) into Block(2053) at 15", "Insert ExpressionStatement(1922) into Block(2053) at 16", "Insert VariableDeclarationStatement(1931) into Block(2053) at 17", "Insert ExpressionStatement(1938) into Block(2053) at 18", "Insert ExpressionStatement(1942) into Block(2053) at 19", "Insert VariableDeclarationStatement(1950) into Block(2053) at 20", "Move IfStatement(1457) into Block(2053) at 21", "Move VariableDeclarationStatement(1466) into Block(2053) at 22", "Insert ExpressionStatement(1975) into Block(2053) at 23", "Insert ExpressionStatement(1979) into Block(2053) at 24", "Insert ExpressionStatement(1983) into Block(2053) at 25", "Insert ExpressionStatement(1987) into Block(2053) at 26", "Insert ExpressionStatement(1996) into Block(2053) at 27", "Insert ExpressionStatement(2000) into Block(2053) at 28", "Insert ExpressionStatement(2009) into Block(2053) at 29", "Insert ExpressionStatement(2013) into Block(2053) at 30", "Insert ExpressionStatement(2024) into Block(2053) at 31", "Insert ExpressionStatement(2028) into Block(2053) at 32", "Insert ExpressionStatement(2032) into Block(2053) at 33", "Insert ExpressionStatement(2036) into Block(2053) at 34", "Insert ExpressionStatement(2040) into Block(2053) at 35", "Insert ExpressionStatement(2044) into Block(2053) at 36", "Insert ExpressionStatement(2048) into Block(2053) at 37", "Insert ExpressionStatement(2052) into Block(2053) at 38", "Insert TagElement(2056) into Javadoc(2062) at 0", "Insert TagElement: @throws(2059) into Javadoc(2062) at 1", "Move TagElement: @since(802) into Javadoc(2062) at 2", "Insert SimpleName: IOException(2066) into SimpleType: IOException(2067) at 0", "Insert ExpressionStatement(2071) into Block(2134) at 0", "Insert ExpressionStatement(2075) into Block(2134) at 1", "Insert ExpressionStatement(2079) into Block(2134) at 2", "Insert VariableDeclarationStatement(2091) into Block(2134) at 3", "Insert ExpressionStatement(2095) into Block(2134) at 4", "Insert ExpressionStatement(2099) into Block(2134) at 5", "Insert ExpressionStatement(2106) into Block(2134) at 6", "Insert ExpressionStatement(2113) into Block(2134) at 7", "Insert VariableDeclarationStatement(2122) into Block(2134) at 8", "Insert ExpressionStatement(2129) into Block(2134) at 9", "Insert ExpressionStatement(2133) into Block(2134) at 10", "Insert PrimitiveType: byte(2144) into ArrayType: byte[](2146) at 0", "Insert Dimension(2145) into ArrayType: byte[](2146) at 1", "Insert SimpleName: DOS_TIME_MIN(2147) into VariableDeclarationFragment(2152) at 0", "Insert MethodInvocation(2151) into VariableDeclarationFragment(2152) at 1", "Insert TagElement(2155) into Javadoc(2163) at 0", "Insert TagElement: @param(2158) into Javadoc(2163) at 1", "Insert TagElement: @return(2160) into Javadoc(2163) at 2", "Move TagElement: @since(620) into Javadoc(2163) at 3", "Insert ReturnStatement(2181) into Block(2182) at 0", "Insert TagElement(2186) into Javadoc(2194) at 0", "Insert TagElement: @param(2189) into Javadoc(2194) at 1", "Insert TagElement: @return(2191) into Javadoc(2194) at 2", "Insert TagElement: @since(2193) into Javadoc(2194) at 3", "Insert PrimitiveType: byte(2197) into ArrayType: byte[](2199) at 0", "Insert Dimension(2198) into ArrayType: byte[](2199) at 1", "Insert PrimitiveType: long(2201) into SingleVariableDeclaration(2203) at 0", "Insert SimpleName: t(2202) into SingleVariableDeclaration(2203) at 1", "Insert VariableDeclarationStatement(2212) into Block(2283) at 0", "Insert VariableDeclarationStatement(2221) into Block(2283) at 1", "Move IfStatement(429) into Block(2283) at 2", "Insert VariableDeclarationStatement(2237) into Block(2283) at 3", "Insert VariableDeclarationStatement(2277) into Block(2283) at 4", "Insert ReturnStatement(2282) into Block(2283) at 5", "Update TagElement: @exception(1073) to @throws", "Insert TagElement(2343) into Javadoc(2352) at 0", "Insert TagElement: @param(2346) into Javadoc(2352) at 1", "Insert TagElement: @throws(2349) into Javadoc(2352) at 2", "Insert TagElement: @since(2351) into Javadoc(2352) at 3", "Insert ArrayType: byte[](2359) into SingleVariableDeclaration(2361) at 0", "Insert SimpleName: data(2360) into SingleVariableDeclaration(2361) at 1", "Insert SimpleName: IOException(2362) into SimpleType: IOException(2363) at 0", "Insert ExpressionStatement(2369) into Block(2370) at 0", "Insert TagElement(2373) into Javadoc(2388) at 0", "Insert TagElement: @param(2376) into Javadoc(2388) at 1", "Insert TagElement: @param(2379) into Javadoc(2388) at 2", "Insert TagElement: @param(2382) into Javadoc(2388) at 3", "Insert TagElement: @throws(2385) into Javadoc(2388) at 4", "Insert TagElement: @since(2387) into Javadoc(2388) at 5", "Insert ArrayType: byte[](2395) into SingleVariableDeclaration(2397) at 0", "Insert SimpleName: data(2396) into SingleVariableDeclaration(2397) at 1", "Insert PrimitiveType: int(2398) into SingleVariableDeclaration(2400) at 0", "Insert SimpleName: offset(2399) into SingleVariableDeclaration(2400) at 1", "Insert PrimitiveType: int(2401) into SingleVariableDeclaration(2403) at 0", "Insert SimpleName: length(2402) into SingleVariableDeclaration(2403) at 1", "Insert SimpleName: IOException(2404) into SimpleType: IOException(2405) at 0", "Insert IfStatement(2425) into Block(2426) at 0", "Insert TagElement(2430) into Javadoc(2438) at 0", "Insert TagElement: @param(2433) into Javadoc(2438) at 1", "Insert TagElement: @return(2435) into Javadoc(2438) at 2", "Insert TagElement: @since(2437) into Javadoc(2438) at 3", "Insert PrimitiveType: int(2443) into SingleVariableDeclaration(2445) at 0", "Insert SimpleName: i(2444) into SingleVariableDeclaration(2445) at 1", "Insert IfStatement(2464) into Block(2465) at 0", "Insert SimpleName: IOException(2470) into SimpleType: IOException(2471) at 0", "Insert WhileStatement(2480) into Block(2481) at 0", "Insert QualifiedName: java.io.RandomAccessFile(37) into TagElement: @link(39) at 0", "Insert TextElement: RandomAccessFile(38) into TagElement: @link(39) at 1", "Insert MemberRef(45) into TagElement: @link(47) at 0", "Insert TextElement:  DEFLATED(46) into TagElement: @link(47) at 1", "Insert MemberRef(52) into TagElement: @link(54) at 0", "Insert TextElement:  STORED(53) into TagElement: @link(54) at 1", "Insert TextElement: Default compression level for deflated entries.(121) into TagElement(122) at 0", "Insert TextElement:  Ant 1.7(123) into TagElement: @since(124) at 0", "Insert TextElement: Compression method for stored entries.(134) into TagElement(135) at 0", "Insert TextElement:  1.1(136) into TagElement: @since(137) at 0", "Insert TextElement: Has the compression level changed when compared to the last(181) into TagElement(183) at 0", "Insert TextElement: entry?(182) into TagElement(183) at 1", "Insert TextElement:  1.5(184) into TagElement: @since(185) at 0", "Insert SimpleType: Vector(214) into ClassInstanceCreation(215) at 0", "Insert TextElement: Data for local header data(243) into TagElement(244) at 0", "Insert TextElement: Offset for CRC entry in the local file header data for the(254) into TagElement(256) at 0", "Insert TextElement: current entry starts here.(255) into TagElement(256) at 1", "Insert TextElement:  1.15(257) into TagElement: @since(258) at 0", "Update TextElement: Holds the offsets of the LFH starts for each entry(307) to Holds the offsets of the LFH starts for each entry.", "Insert TextElement: The encoding to use for filenames and the file comment.(338) into TagElement(342) at 0", "Insert TextElement: <p>For a list of possible values see <a(339) into TagElement(342) at 1", "Insert TextElement: href=\"http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html\">http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html</a>.(340) into TagElement(342) at 2", "Insert TextElement: Defaults to the platform's default character encoding.</p>(341) into TagElement(342) at 3", "Insert TextElement: This Deflater object is used for output.(353) into TagElement(361) at 0", "Insert TextElement: <p>This attribute is only protected to provide a level of API(354) into TagElement(361) at 1", "Insert TextElement: backwards compatibility.  This class used to extend (355) into TagElement(361) at 2", "Insert TagElement: @link(358) into TagElement(361) at 3", "Insert TextElement:  up to(359) into TagElement(361) at 4", "Insert TextElement: Revision 1.13.</p>(360) into TagElement(361) at 5", "Insert TextElement:  1.14(362) into TagElement: @since(363) at 0", "Move SimpleType: Deflater(365) into ClassInstanceCreation(373) at 0", "Insert SimpleName: level(371) into ClassInstanceCreation(373) at 1", "Insert BooleanLiteral: true(372) into ClassInstanceCreation(373) at 2", "Insert TextElement: This buffer servers as a Deflater.(376) into TagElement(384) at 0", "Insert TextElement: <p>This attribute is only protected to provide a level of API(377) into TagElement(384) at 1", "Insert TextElement: backwards compatibility.  This class used to extend (378) into TagElement(384) at 2", "Insert TagElement: @link(381) into TagElement(384) at 3", "Insert TextElement:  up to(382) into TagElement(384) at 4", "Insert TextElement: Revision 1.13.</p>(383) into TagElement(384) at 5", "Insert TextElement:  1.14(385) into TagElement: @since(386) at 0", "Move ArrayType: byte[](476) into ArrayCreation(397) at 0", "Insert SimpleName: BUFFER_SIZE(396) into ArrayCreation(397) at 1", "Insert TextElement: Optional random access output.(400) into TagElement(401) at 0", "Insert TextElement:  1.14(402) into TagElement: @since(403) at 0", "Insert SimpleName: out(414) into TagElement: @param(416) at 0", "Insert TextElement:  the outputstream to zip(415) into TagElement: @param(416) at 1", "Insert SimpleName: out(426) into SuperConstructorInvocation(427) at 0", "Insert TextElement: Creates a new ZIP OutputStream writing to a File.  Will use(430) into TagElement(432) at 0", "Insert TextElement: random access if possible.(431) into TagElement(432) at 1", "Insert SimpleName: file(433) into TagElement: @param(435) at 0", "Insert TextElement:  the file to zip to(434) into TagElement: @param(435) at 1", "Insert TextElement:  1.14(436) into TagElement: @since(437) at 0", "Insert SimpleName: IOException(438) into TagElement: @throws(440) at 0", "Insert TextElement:  on error(439) into TagElement: @throws(440) at 1", "Insert SimpleName: File(444) into SimpleType: File(445) at 0", "Insert NullLiteral(450) into SuperConstructorInvocation(451) at 0", "Insert Block(465) into TryStatement(500) at 0", "Insert CatchClause(499) into TryStatement(500) at 1", "Insert TextElement: This method indicates whether this archive is writing to a seekable stream (i.e., to a random(503) into TagElement(516) at 0", "Insert TextElement: access file).(504) into TagElement(516) at 1", "Insert TextElement: <p>For seekable streams, you don't need to calculate the CRC or(505) into TagElement(516) at 2", "Insert TextElement: uncompressed size for (506) into TagElement(516) at 3", "Insert TagElement: @link(509) into TagElement(516) at 4", "Insert TextElement:  entries before(510) into TagElement(516) at 5", "Insert TextElement: invoking (511) into TagElement(516) at 6", "Insert TagElement: @link(514) into TagElement(516) at 7", "Insert TextElement: .(515) into TagElement(516) at 8", "Insert TextElement:  true if seekable(517) into TagElement: @return(518) at 0", "Insert TextElement:  1.17(519) into TagElement: @since(520) at 0", "Insert InfixExpression: !=(527) into ReturnStatement(528) at 0", "Insert TextElement: The encoding to use for filenames and the file comment.(531) into TagElement(535) at 0", "Insert TextElement: <p>For a list of possible values see <a(532) into TagElement(535) at 1", "Insert TextElement: href=\"http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html\">http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html</a>.(533) into TagElement(535) at 2", "Insert TextElement: Defaults to the platform's default character encoding.</p>(534) into TagElement(535) at 3", "Insert SimpleName: encoding(536) into TagElement: @param(538) at 0", "Insert TextElement:  the encoding value(537) into TagElement: @param(538) at 1", "Insert Assignment: =(553) into ExpressionStatement(554) at 0", "Insert SimpleName: encoding(568) into ReturnStatement(569) at 0", "Insert TextElement: Finishs writing the contents and closes this as well as the(572) into TagElement(574) at 0", "Insert TextElement: underlying stream.(573) into TagElement(574) at 1", "Insert SimpleName: IOException(577) into TagElement: @throws(579) at 0", "Insert TextElement:  on error(578) into TagElement: @throws(579) at 1", "Insert Assignment: =(591) into ExpressionStatement(592) at 0", "Insert VariableDeclarationExpression(602) into ForStatement(619) at 0", "Insert InfixExpression: <(605) into ForStatement(619) at 1", "Insert PostfixExpression: ++(607) into ForStatement(619) at 2", "Insert Block(618) into ForStatement(619) at 3", "Insert Assignment: =(624) into ExpressionStatement(625) at 0", "Insert MethodInvocation(631) into ExpressionStatement(632) at 0", "Insert MethodInvocation(635) into ExpressionStatement(636) at 0", "Insert SimpleName: IOException(643) into TagElement: @throws(645) at 0", "Insert TextElement:  on error(644) into TagElement: @throws(645) at 1", "Insert InfixExpression: ==(654) into IfStatement(657) at 0", "Move Block(667) into IfStatement(657) at 1", "Insert PrimitiveType: long(658) into VariableDeclarationStatement(664) at 0", "Insert VariableDeclarationFragment(663) into VariableDeclarationStatement(664) at 1", "Insert MethodInvocation(667) into ExpressionStatement(668) at 0", "Move InfixExpression: ==(1782) into IfStatement(804) at 0", "Insert Block(720) into IfStatement(804) at 1", "Insert IfStatement(803) into IfStatement(804) at 2", "Insert InfixExpression: !=(807) into IfStatement(853) at 0", "Insert Block(852) into IfStatement(853) at 1", "Insert MethodInvocation(856) into ExpressionStatement(857) at 0", "Insert Assignment: =(860) into ExpressionStatement(861) at 0", "Insert SimpleName: ze(866) into TagElement: @param(868) at 0", "Insert TextElement:  the entry to write(867) into TagElement: @param(868) at 1", "Insert SimpleName: IOException(871) into TagElement: @throws(873) at 0", "Insert TextElement:  on error(872) into TagElement: @throws(873) at 1", "Insert SimpleName: ZipEntry(878) into SimpleType: ZipEntry(879) at 0", "Insert Assignment: =(889) into ExpressionStatement(890) at 0", "Insert MethodInvocation(894) into ExpressionStatement(895) at 0", "Insert InfixExpression: ==(901) into IfStatement(908) at 0", "Insert Block(907) into IfStatement(908) at 1", "Insert InfixExpression: ==(914) into IfStatement(923) at 0", "Insert Block(922) into IfStatement(923) at 1", "Insert InfixExpression: &&(932) into IfStatement(972) at 0", "Insert Block(971) into IfStatement(972) at 1", "Insert InfixExpression: &&(979) into IfStatement(990) at 0", "Insert Block(989) into IfStatement(990) at 1", "Insert MethodInvocation(993) into ExpressionStatement(994) at 0", "Insert SimpleName: comment(999) into TagElement: @param(1001) at 0", "Insert TextElement:  the comment(1000) into TagElement: @param(1001) at 1", "Insert Assignment: =(1016) into ExpressionStatement(1017) at 0", "Insert TextElement: Sets the compression level for subsequent entries.(1020) into TagElement(1022) at 0", "Insert TextElement: <p>Default is Deflater.DEFAULT_COMPRESSION.</p>(1021) into TagElement(1022) at 1", "Insert SimpleName: level(1023) into TagElement: @param(1025) at 0", "Insert TextElement:  the compression level.(1024) into TagElement: @param(1025) at 1", "Insert SimpleName: IllegalArgumentException(1026) into TagElement: @throws(1028) at 0", "Insert TextElement:  if an invalid compression level is specified.(1027) into TagElement: @throws(1028) at 1", "Insert InfixExpression: ||(1044) into IfStatement(1053) at 0", "Insert Block(1052) into IfStatement(1053) at 1", "Insert Assignment: =(1061) into ExpressionStatement(1062) at 0", "Insert Assignment: =(1067) into ExpressionStatement(1068) at 0", "Insert TextElement: Sets the default compression method for subsequent entries.(1071) into TagElement(1073) at 0", "Insert TextElement: <p>Default is DEFLATED.</p>(1072) into TagElement(1073) at 1", "Insert SimpleName: method(1074) into TagElement: @param(1076) at 0", "Insert TextElement:  an <code>int</code> from java.util.zip.ZipEntry(1075) into TagElement: @param(1076) at 1", "Insert Assignment: =(1090) into ExpressionStatement(1091) at 0", "Insert TextElement: Writes bytes to ZIP entry.(1094) into TagElement(1095) at 0", "Insert SimpleName: b(1096) into TagElement: @param(1098) at 0", "Insert TextElement:  the byte array to write(1097) into TagElement: @param(1098) at 1", "Insert SimpleName: offset(1099) into TagElement: @param(1101) at 0", "Insert TextElement:  the start position to write from(1100) into TagElement: @param(1101) at 1", "Insert SimpleName: length(1102) into TagElement: @param(1104) at 0", "Insert TextElement:  the number of bytes to write(1103) into TagElement: @param(1104) at 1", "Insert SimpleName: IOException(1105) into TagElement: @throws(1107) at 0", "Insert TextElement:  on error(1106) into TagElement: @throws(1107) at 1", "Move InfixExpression: ==(1267) into IfStatement(1230) at 0", "Insert Block(1218) into IfStatement(1230) at 1", "Insert Block(1229) into IfStatement(1230) at 2", "Insert MethodInvocation(1236) into ExpressionStatement(1237) at 0", "Insert TextElement: Writes a single byte to ZIP entry.(1240) into TagElement(1242) at 0", "Insert TextElement: <p>Delegates to the three arg method.</p>(1241) into TagElement(1242) at 1", "Insert SimpleName: b(1243) into TagElement: @param(1245) at 0", "Insert TextElement:  the byte to write(1244) into TagElement: @param(1245) at 1", "Insert TextElement:  1.14(1246) into TagElement: @since(1247) at 0", "Insert SimpleName: IOException(1248) into TagElement: @throws(1250) at 0", "Insert TextElement:  on error(1249) into TagElement: @throws(1250) at 1", "Move ArrayType: byte[](1191) into VariableDeclarationStatement(1270) at 0", "Insert VariableDeclarationFragment(1269) into VariableDeclarationStatement(1270) at 1", "Insert Assignment: =(1280) into ExpressionStatement(1281) at 0", "Insert MethodInvocation(1286) into ExpressionStatement(1287) at 0", "Insert TextElement: Closes this output stream and releases any system resources(1290) into TagElement(1292) at 0", "Insert TextElement: associated with the stream.(1291) into TagElement(1292) at 1", "Insert SimpleName: IOException(1293) into TagElement: @exception(1295) at 0", "Insert TextElement:   if an I/O error occurs.(1294) into TagElement: @exception(1295) at 1", "Insert TextElement:  1.14(1296) into TagElement: @since(1297) at 0", "Insert MethodInvocation(1305) into ExpressionStatement(1306) at 0", "Insert InfixExpression: !=(1309) into IfStatement(1315) at 0", "Insert Block(1314) into IfStatement(1315) at 1", "Insert InfixExpression: !=(1318) into IfStatement(1324) at 0", "Insert Block(1323) into IfStatement(1324) at 1", "Insert TextElement: Flushes this output stream and forces any buffered output bytes(1327) into TagElement(1329) at 0", "Insert TextElement: to be written out to the stream.(1328) into TagElement(1329) at 1", "Insert SimpleName: IOException(1330) into TagElement: @exception(1332) at 0", "Insert TextElement:   if an I/O error occurs.(1331) into TagElement: @exception(1332) at 1", "Insert TextElement:  1.14(1333) into TagElement: @since(1334) at 0", "Insert InfixExpression: !=(1343) into IfStatement(1349) at 0", "Insert Block(1348) into IfStatement(1349) at 1", "Insert SimpleName: ZipLong(1364) into MethodInvocation(1367) at 0", "Insert SimpleName: getBytes(1365) into MethodInvocation(1367) at 1", "Insert NumberLiteral: 0X04034B50L(1366) into MethodInvocation(1367) at 2", "Insert SimpleName: ZipLong(1382) into MethodInvocation(1385) at 0", "Insert SimpleName: getBytes(1383) into MethodInvocation(1385) at 1", "Insert NumberLiteral: 0X08074B50L(1384) into MethodInvocation(1385) at 2", "Insert SimpleName: ZipLong(1400) into MethodInvocation(1403) at 0", "Insert SimpleName: getBytes(1401) into MethodInvocation(1403) at 1", "Insert NumberLiteral: 0X02014B50L(1402) into MethodInvocation(1403) at 2", "Insert SimpleName: ZipLong(1418) into MethodInvocation(1421) at 0", "Insert SimpleName: getBytes(1419) into MethodInvocation(1421) at 1", "Insert NumberLiteral: 0X06054B50L(1420) into MethodInvocation(1421) at 2", "Insert TextElement: Writes next block of compressed data to the output stream.(1424) into TagElement(1425) at 0", "Insert SimpleName: IOException(1426) into TagElement: @throws(1428) at 0", "Insert TextElement:  on error(1427) into TagElement: @throws(1428) at 1", "Insert TextElement:  1.14(1429) into TagElement: @since(1430) at 0", "Insert PrimitiveType: int(1438) into VariableDeclarationStatement(1447) at 0", "Insert VariableDeclarationFragment(1446) into VariableDeclarationStatement(1447) at 1", "Insert InfixExpression: >(1450) into IfStatement(1458) at 0", "Insert Block(1457) into IfStatement(1458) at 1", "Insert SimpleName: ze(1463) into TagElement: @param(1465) at 0", "Insert TextElement:  the entry to write(1464) into TagElement: @param(1465) at 1", "Insert SimpleName: IOException(1466) into TagElement: @throws(1468) at 0", "Insert TextElement:  on error(1467) into TagElement: @throws(1468) at 1", "Insert SimpleName: ZipEntry(1475) into SimpleType: ZipEntry(1476) at 0", "Insert MethodInvocation(1488) into ExpressionStatement(1489) at 0", "Insert MethodInvocation(1492) into ExpressionStatement(1493) at 0", "Insert Assignment: +=(1496) into ExpressionStatement(1497) at 0", "Insert Modifier: final(1498) into VariableDeclarationStatement(1505) at 0", "Insert PrimitiveType: int(1499) into VariableDeclarationStatement(1505) at 1", "Insert VariableDeclarationFragment(1504) into VariableDeclarationStatement(1505) at 2", "Insert InfixExpression: &&(1512) into IfStatement(1540) at 0", "Insert Block(1527) into IfStatement(1540) at 1", "Insert Block(1539) into IfStatement(1540) at 2", "Insert Assignment: +=(1543) into ExpressionStatement(1544) at 0", "Insert MethodInvocation(1550) into ExpressionStatement(1551) at 0", "Insert Assignment: +=(1554) into ExpressionStatement(1555) at 0", "Insert MethodInvocation(1562) into ExpressionStatement(1563) at 0", "Insert Assignment: +=(1566) into ExpressionStatement(1567) at 0", "Insert Assignment: =(1570) into ExpressionStatement(1571) at 0", "Insert InfixExpression: ||(1578) into IfStatement(1620) at 0", "Insert Block(1591) into IfStatement(1620) at 1", "Insert Block(1619) into IfStatement(1620) at 2", "Insert Assignment: +=(1623) into ExpressionStatement(1624) at 0", "Move ArrayType: byte[](1419) into VariableDeclarationStatement(1635) at 0", "Insert VariableDeclarationFragment(1634) into VariableDeclarationStatement(1635) at 1", "Insert MethodInvocation(1641) into ExpressionStatement(1642) at 0", "Insert Assignment: +=(1645) into ExpressionStatement(1646) at 0", "Move ArrayType: byte[](480) into VariableDeclarationStatement(1655) at 0", "Insert VariableDeclarationFragment(1654) into VariableDeclarationStatement(1655) at 1", "Insert MethodInvocation(1661) into ExpressionStatement(1662) at 0", "Insert Assignment: +=(1665) into ExpressionStatement(1666) at 0", "Insert MethodInvocation(1669) into ExpressionStatement(1670) at 0", "Insert Assignment: +=(1673) into ExpressionStatement(1674) at 0", "Insert MethodInvocation(1677) into ExpressionStatement(1678) at 0", "Insert Assignment: +=(1681) into ExpressionStatement(1682) at 0", "Insert Assignment: =(1685) into ExpressionStatement(1686) at 0", "Insert TextElement: Writes the data descriptor entry.(1689) into TagElement(1690) at 0", "Insert SimpleName: ze(1691) into TagElement: @param(1693) at 0", "Insert TextElement:  the entry to write(1692) into TagElement: @param(1693) at 1", "Insert SimpleName: IOException(1694) into TagElement: @throws(1696) at 0", "Insert TextElement:  on error(1695) into TagElement: @throws(1696) at 1", "Insert SimpleName: ZipEntry(1703) into SimpleType: ZipEntry(1704) at 0", "Insert InfixExpression: ||(1717) into IfStatement(1720) at 0", "Insert MethodInvocation(1723) into ExpressionStatement(1724) at 0", "Insert MethodInvocation(1732) into ExpressionStatement(1733) at 0", "Insert MethodInvocation(1741) into ExpressionStatement(1742) at 0", "Insert MethodInvocation(1750) into ExpressionStatement(1751) at 0", "Insert Assignment: +=(1754) into ExpressionStatement(1755) at 0", "Insert TextElement: Writes the central file header entry.(1758) into TagElement(1759) at 0", "Insert SimpleName: ze(1760) into TagElement: @param(1762) at 0", "Insert TextElement:  the entry to write(1761) into TagElement: @param(1762) at 1", "Insert SimpleName: IOException(1763) into TagElement: @throws(1765) at 0", "Insert TextElement:  on error(1764) into TagElement: @throws(1765) at 1", "Insert SimpleName: ZipEntry(1772) into SimpleType: ZipEntry(1773) at 0", "Insert MethodInvocation(1780) into ExpressionStatement(1781) at 0", "Insert Assignment: +=(1784) into ExpressionStatement(1785) at 0", "Insert MethodInvocation(1798) into ExpressionStatement(1799) at 0", "Insert Assignment: +=(1802) into ExpressionStatement(1803) at 0", "Insert InfixExpression: &&(1812) into IfStatement(1840) at 0", "Insert Block(1827) into IfStatement(1840) at 1", "Insert Block(1839) into IfStatement(1840) at 2", "Insert Assignment: +=(1843) into ExpressionStatement(1844) at 0", "Insert MethodInvocation(1852) into ExpressionStatement(1853) at 0", "Insert Assignment: +=(1856) into ExpressionStatement(1857) at 0", "Insert MethodInvocation(1864) into ExpressionStatement(1865) at 0", "Insert Assignment: +=(1868) into ExpressionStatement(1869) at 0", "Insert MethodInvocation(1877) into ExpressionStatement(1878) at 0", "Insert MethodInvocation(1886) into ExpressionStatement(1887) at 0", "Insert MethodInvocation(1895) into ExpressionStatement(1896) at 0", "Insert Assignment: +=(1899) into ExpressionStatement(1900) at 0", "Move ArrayType: byte[](1872) into VariableDeclarationStatement(1911) at 0", "Insert VariableDeclarationFragment(1910) into VariableDeclarationStatement(1911) at 1", "Insert MethodInvocation(1917) into ExpressionStatement(1918) at 0", "Insert Assignment: +=(1921) into ExpressionStatement(1922) at 0", "Move ArrayType: byte[](1846) into VariableDeclarationStatement(1931) at 0", "Insert VariableDeclarationFragment(1930) into VariableDeclarationStatement(1931) at 1", "Insert MethodInvocation(1937) into ExpressionStatement(1938) at 0", "Insert Assignment: +=(1941) into ExpressionStatement(1942) at 0", "Move SimpleType: String(1442) into VariableDeclarationStatement(1950) at 0", "Insert VariableDeclarationFragment(1949) into VariableDeclarationStatement(1950) at 1", "Insert MethodInvocation(1974) into ExpressionStatement(1975) at 0", "Insert Assignment: +=(1978) into ExpressionStatement(1979) at 0", "Insert MethodInvocation(1982) into ExpressionStatement(1983) at 0", "Insert Assignment: +=(1986) into ExpressionStatement(1987) at 0", "Insert MethodInvocation(1995) into ExpressionStatement(1996) at 0", "Insert Assignment: +=(1999) into ExpressionStatement(2000) at 0", "Insert MethodInvocation(2008) into ExpressionStatement(2009) at 0", "Insert Assignment: +=(2012) into ExpressionStatement(2013) at 0", "Insert MethodInvocation(2023) into ExpressionStatement(2024) at 0", "Insert Assignment: +=(2027) into ExpressionStatement(2028) at 0", "Insert MethodInvocation(2031) into ExpressionStatement(2032) at 0", "Insert Assignment: +=(2035) into ExpressionStatement(2036) at 0", "Insert MethodInvocation(2039) into ExpressionStatement(2040) at 0", "Insert Assignment: +=(2043) into ExpressionStatement(2044) at 0", "Insert MethodInvocation(2047) into ExpressionStatement(2048) at 0", "Insert Assignment: +=(2051) into ExpressionStatement(2052) at 0", "Insert TextElement: Writes the &quot;End of central dir record&quot;.(2055) into TagElement(2056) at 0", "Insert SimpleName: IOException(2057) into TagElement: @throws(2059) at 0", "Insert TextElement:  on error(2058) into TagElement: @throws(2059) at 1", "Insert MethodInvocation(2070) into ExpressionStatement(2071) at 0", "Insert MethodInvocation(2074) into ExpressionStatement(2075) at 0", "Insert MethodInvocation(2078) into ExpressionStatement(2079) at 0", "Insert ArrayType: byte[](2082) into VariableDeclarationStatement(2091) at 0", "Insert VariableDeclarationFragment(2090) into VariableDeclarationStatement(2091) at 1", "Insert MethodInvocation(2094) into ExpressionStatement(2095) at 0", "Insert MethodInvocation(2098) into ExpressionStatement(2099) at 0", "Insert MethodInvocation(2105) into ExpressionStatement(2106) at 0", "Insert MethodInvocation(2112) into ExpressionStatement(2113) at 0", "Insert ArrayType: byte[](2116) into VariableDeclarationStatement(2122) at 0", "Insert VariableDeclarationFragment(2121) into VariableDeclarationStatement(2122) at 1", "Insert MethodInvocation(2128) into ExpressionStatement(2129) at 0", "Insert MethodInvocation(2132) into ExpressionStatement(2133) at 0", "Insert SimpleName: ZipLong(2148) into MethodInvocation(2151) at 0", "Insert SimpleName: getBytes(2149) into MethodInvocation(2151) at 1", "Insert NumberLiteral: 0x00002100L(2150) into MethodInvocation(2151) at 2", "Insert TextElement: Convert a Date object to a DOS date/time field.(2154) into TagElement(2155) at 0", "Insert SimpleName: time(2156) into TagElement: @param(2158) at 0", "Insert TextElement:  the <code>Date</code> to convert(2157) into TagElement: @param(2158) at 1", "Insert TextElement:  the date as a <code>ZipLong</code>(2159) into TagElement: @return(2160) at 0", "Insert ClassInstanceCreation(2180) into ReturnStatement(2181) at 0", "Insert TextElement: Convert a Date object to a DOS date/time field.(2184) into TagElement(2186) at 0", "Insert TextElement: <p>Stolen from InfoZip's <code>fileio.c</code></p>(2185) into TagElement(2186) at 1", "Insert SimpleName: t(2187) into TagElement: @param(2189) at 0", "Insert TextElement:  number of milliseconds since the epoch(2188) into TagElement: @param(2189) at 1", "Insert TextElement:  the date as a byte array(2190) into TagElement: @return(2191) at 0", "Insert TextElement:  1.26(2192) into TagElement: @since(2193) at 0", "Move SimpleType: Date(1764) into VariableDeclarationStatement(2212) at 0", "Insert VariableDeclarationFragment(2211) into VariableDeclarationStatement(2212) at 1", "Insert PrimitiveType: int(2213) into VariableDeclarationStatement(2221) at 0", "Insert VariableDeclarationFragment(2220) into VariableDeclarationStatement(2221) at 1", "Insert PrimitiveType: int(2229) into VariableDeclarationStatement(2237) at 0", "Insert VariableDeclarationFragment(2236) into VariableDeclarationStatement(2237) at 1", "Insert PrimitiveType: long(2238) into VariableDeclarationStatement(2277) at 0", "Insert VariableDeclarationFragment(2276) into VariableDeclarationStatement(2277) at 1", "Insert MethodInvocation(2281) into ReturnStatement(2282) at 0", "Update TextElement: Retrieve the bytes for the given String in the encoding set for this(1063) to Retrieve the bytes for the given String in the encoding set for", "Update TextElement: Stream.(1064) to this Stream.", "Update TextElement:  the name to decode(1067) to  the string to get bytes from", "Update TextElement:  the bytes for string(1069) to  the bytes as a byte array", "Update TextElement:  if fail to retrieve bytes for specified string(1072) to  on error", "Insert TextElement: Write bytes to output or random access file.(2342) into TagElement(2343) at 0", "Insert SimpleName: data(2344) into TagElement: @param(2346) at 0", "Insert TextElement:  the byte array to write(2345) into TagElement: @param(2346) at 1", "Insert SimpleName: IOException(2347) into TagElement: @throws(2349) at 0", "Insert TextElement:  on error(2348) into TagElement: @throws(2349) at 1", "Insert TextElement:  1.14(2350) into TagElement: @since(2351) at 0", "Insert PrimitiveType: byte(2357) into ArrayType: byte[](2359) at 0", "Insert Dimension(2358) into ArrayType: byte[](2359) at 1", "Insert MethodInvocation(2368) into ExpressionStatement(2369) at 0", "Insert TextElement: Write bytes to output or random access file.(2372) into TagElement(2373) at 0", "Insert SimpleName: data(2374) into TagElement: @param(2376) at 0", "Insert TextElement:  the byte array to write(2375) into TagElement: @param(2376) at 1", "Insert SimpleName: offset(2377) into TagElement: @param(2379) at 0", "Insert TextElement:  the start position to write from(2378) into TagElement: @param(2379) at 1", "Insert SimpleName: length(2380) into TagElement: @param(2382) at 0", "Insert TextElement:  the number of bytes to write(2381) into TagElement: @param(2382) at 1", "Insert SimpleName: IOException(2383) into TagElement: @throws(2385) at 0", "Insert TextElement:  on error(2384) into TagElement: @throws(2385) at 1", "Insert TextElement:  1.14(2386) into TagElement: @since(2387) at 0", "Insert PrimitiveType: byte(2393) into ArrayType: byte[](2395) at 0", "Insert Dimension(2394) into ArrayType: byte[](2395) at 1", "Insert InfixExpression: !=(2408) into IfStatement(2425) at 0", "Insert Block(2416) into IfStatement(2425) at 1", "Insert Block(2424) into IfStatement(2425) at 2", "Insert TextElement: Assumes a negative integer really is a positive integer that(2428) into TagElement(2430) at 0", "Insert TextElement: has wrapped around and re-creates the original value.(2429) into TagElement(2430) at 1", "Insert SimpleName: i(2431) into TagElement: @param(2433) at 0", "Insert TextElement:  the value to treat as unsigned int.(2432) into TagElement: @param(2433) at 1", "Insert TextElement:  the unsigned int as a long.(2434) into TagElement: @return(2435) at 0", "Insert TextElement:  1.34(2436) into TagElement: @since(2437) at 0", "Insert InfixExpression: <(2448) into IfStatement(2464) at 0", "Insert Block(2460) into IfStatement(2464) at 1", "Insert Block(2463) into IfStatement(2464) at 2", "Insert PrefixExpression: !(2475) into WhileStatement(2480) at 0", "Insert Block(2479) into WhileStatement(2480) at 1", "Insert SimpleName: DEFLATED(44) into MemberRef(45) at 0", "Insert SimpleName: STORED(51) into MemberRef(52) at 0", "Insert SimpleName: Vector(213) into SimpleType: Vector(214) at 0", "Insert QualifiedName: java.util.zip.DeflaterOutputStream(356) into TagElement: @link(358) at 0", "Insert TextElement:  DeflaterOutputStream(357) into TagElement: @link(358) at 1", "Insert QualifiedName: java.util.zip.DeflaterOutputStream(379) into TagElement: @link(381) at 0", "Insert TextElement:  DeflaterOutputStream(380) into TagElement: @link(381) at 1", "Insert ExpressionStatement(459) into Block(465) at 0", "Insert ExpressionStatement(464) into Block(465) at 1", "Insert SingleVariableDeclaration(469) into CatchClause(499) at 0", "Insert Block(498) into CatchClause(499) at 1", "Insert MemberRef(508) into TagElement: @link(509) at 0", "Insert MemberRef(513) into TagElement: @link(514) at 0", "Insert SimpleName: raf(525) into InfixExpression: !=(527) at 0", "Insert NullLiteral(526) into InfixExpression: !=(527) at 1", "Insert FieldAccess(551) into Assignment: =(553) at 0", "Insert SimpleName: encoding(552) into Assignment: =(553) at 1", "Insert SimpleName: cdOffset(589) into Assignment: =(591) at 0", "Insert SimpleName: written(590) into Assignment: =(591) at 1", "Insert PrimitiveType: int(593) into VariableDeclarationExpression(602) at 0", "Insert VariableDeclarationFragment(596) into VariableDeclarationExpression(602) at 1", "Insert VariableDeclarationFragment(601) into VariableDeclarationExpression(602) at 2", "Insert SimpleName: i(603) into InfixExpression: <(605) at 0", "Insert SimpleName: entriesSize(604) into InfixExpression: <(605) at 1", "Insert SimpleName: i(606) into PostfixExpression: ++(607) at 0", "Insert ExpressionStatement(617) into Block(618) at 0", "Insert SimpleName: cdLength(620) into Assignment: =(624) at 0", "Insert InfixExpression: -(623) into Assignment: =(624) at 1", "Insert SimpleName: offsets(629) into MethodInvocation(631) at 0", "Insert SimpleName: clear(630) into MethodInvocation(631) at 1", "Insert SimpleName: entries(633) into MethodInvocation(635) at 0", "Insert SimpleName: removeAllElements(634) into MethodInvocation(635) at 1", "Insert SimpleName: entry(652) into InfixExpression: ==(654) at 0", "Insert NullLiteral(653) into InfixExpression: ==(654) at 1", "Insert SimpleName: realCrc(659) into VariableDeclarationFragment(663) at 0", "Insert MethodInvocation(662) into VariableDeclarationFragment(663) at 1", "Insert SimpleName: crc(665) into MethodInvocation(667) at 0", "Insert SimpleName: reset(666) into MethodInvocation(667) at 1", "Move ExpressionStatement(688) into Block(720) at 0", "Move WhileStatement(697) into Block(720) at 1", "Move ExpressionStatement(704) into Block(720) at 2", "Move ExpressionStatement(711) into Block(720) at 3", "Insert ExpressionStatement(709) into Block(720) at 4", "Move ExpressionStatement(720) into Block(720) at 5", "Insert ExpressionStatement(719) into Block(720) at 6", "Insert InfixExpression: ==(723) into IfStatement(803) at 0", "Insert Block(779) into IfStatement(803) at 1", "Insert Block(802) into IfStatement(803) at 2", "Insert SimpleName: raf(805) into InfixExpression: !=(807) at 0", "Insert NullLiteral(806) into InfixExpression: !=(807) at 1", "Insert VariableDeclarationStatement(814) into Block(852) at 0", "Insert ExpressionStatement(819) into Block(852) at 1", "Insert ExpressionStatement(828) into Block(852) at 2", "Insert ExpressionStatement(837) into Block(852) at 3", "Insert ExpressionStatement(846) into Block(852) at 4", "Insert ExpressionStatement(851) into Block(852) at 5", "Insert SimpleName: writeDataDescriptor(854) into MethodInvocation(856) at 0", "Insert SimpleName: entry(855) into MethodInvocation(856) at 1", "Insert SimpleName: entry(858) into Assignment: =(860) at 0", "Insert NullLiteral(859) into Assignment: =(860) at 1", "Insert SimpleName: entry(887) into Assignment: =(889) at 0", "Insert SimpleName: ze(888) into Assignment: =(889) at 1", "Insert SimpleName: entries(891) into MethodInvocation(894) at 0", "Insert SimpleName: addElement(892) into MethodInvocation(894) at 1", "Insert SimpleName: entry(893) into MethodInvocation(894) at 2", "Move MethodInvocation(1749) into InfixExpression: ==(901) at 0", "Move PrefixExpression: -(963) into InfixExpression: ==(901) at 1", "Insert ExpressionStatement(906) into Block(907) at 0", "Move MethodInvocation(1337) into InfixExpression: ==(914) at 0", "Move PrefixExpression: -(917) into InfixExpression: ==(914) at 1", "Insert ExpressionStatement(921) into Block(922) at 0", "Insert InfixExpression: ==(928) into InfixExpression: &&(932) at 0", "Insert InfixExpression: ==(931) into InfixExpression: &&(932) at 1", "Insert IfStatement(948) into Block(971) at 0", "Insert IfStatement(963) into Block(971) at 1", "Insert ExpressionStatement(970) into Block(971) at 2", "Move InfixExpression: ==(1697) into InfixExpression: &&(979) at 0", "Insert SimpleName: hasCompressionLevelChanged(978) into InfixExpression: &&(979) at 1", "Insert ExpressionStatement(984) into Block(989) at 0", "Insert ExpressionStatement(988) into Block(989) at 1", "Insert SimpleName: writeLocalFileHeader(991) into MethodInvocation(993) at 0", "Insert SimpleName: entry(992) into MethodInvocation(993) at 1", "Insert FieldAccess(1014) into Assignment: =(1016) at 0", "Insert SimpleName: comment(1015) into Assignment: =(1016) at 1", "Insert InfixExpression: <(1040) into InfixExpression: ||(1044) at 0", "Insert InfixExpression: >(1043) into InfixExpression: ||(1044) at 1", "Insert ThrowStatement(1051) into Block(1052) at 0", "Insert SimpleName: hasCompressionLevelChanged(1054) into Assignment: =(1061) at 0", "Insert ParenthesizedExpression(1060) into Assignment: =(1061) at 1", "Insert FieldAccess(1065) into Assignment: =(1067) at 0", "Insert SimpleName: level(1066) into Assignment: =(1067) at 1", "Insert FieldAccess(1088) into Assignment: =(1090) at 0", "Insert SimpleName: method(1089) into Assignment: =(1090) at 1", "Insert IfStatement(1217) into Block(1218) at 0", "Insert ExpressionStatement(1224) into Block(1229) at 0", "Insert ExpressionStatement(1228) into Block(1229) at 1", "Insert SimpleName: crc(1231) into MethodInvocation(1236) at 0", "Insert SimpleName: update(1232) into MethodInvocation(1236) at 1", "Insert SimpleName: b(1233) into MethodInvocation(1236) at 2", "Insert SimpleName: offset(1234) into MethodInvocation(1236) at 3", "Insert SimpleName: length(1235) into MethodInvocation(1236) at 4", "Insert SimpleName: buff(1263) into VariableDeclarationFragment(1269) at 0", "Insert ArrayCreation(1268) into VariableDeclarationFragment(1269) at 1", "Insert ArrayAccess(1273) into Assignment: =(1280) at 0", "Insert CastExpression(1279) into Assignment: =(1280) at 1", "Insert SimpleName: write(1282) into MethodInvocation(1286) at 0", "Insert SimpleName: buff(1283) into MethodInvocation(1286) at 1", "Insert NumberLiteral: 0(1284) into MethodInvocation(1286) at 2", "Insert NumberLiteral: 1(1285) into MethodInvocation(1286) at 3", "Insert SimpleName: finish(1304) into MethodInvocation(1305) at 0", "Insert SimpleName: raf(1307) into InfixExpression: !=(1309) at 0", "Insert NullLiteral(1308) into InfixExpression: !=(1309) at 1", "Insert ExpressionStatement(1313) into Block(1314) at 0", "Insert SimpleName: out(1316) into InfixExpression: !=(1318) at 0", "Insert NullLiteral(1317) into InfixExpression: !=(1318) at 1", "Insert ExpressionStatement(1322) into Block(1323) at 0", "Insert SimpleName: out(1341) into InfixExpression: !=(1343) at 0", "Insert NullLiteral(1342) into InfixExpression: !=(1343) at 1", "Insert ExpressionStatement(1347) into Block(1348) at 0", "Insert SimpleName: len(1439) into VariableDeclarationFragment(1446) at 0", "Insert MethodInvocation(1445) into VariableDeclarationFragment(1446) at 1", "Insert SimpleName: len(1448) into InfixExpression: >(1450) at 0", "Insert NumberLiteral: 0(1449) into InfixExpression: >(1450) at 1", "Insert ExpressionStatement(1456) into Block(1457) at 0", "Insert SimpleName: offsets(1481) into MethodInvocation(1488) at 0", "Insert SimpleName: put(1482) into MethodInvocation(1488) at 1", "Insert SimpleName: ze(1483) into MethodInvocation(1488) at 2", "Insert MethodInvocation(1487) into MethodInvocation(1488) at 3", "Insert SimpleName: writeOut(1490) into MethodInvocation(1492) at 0", "Insert SimpleName: LFH_SIG(1491) into MethodInvocation(1492) at 1", "Insert SimpleName: written(1494) into Assignment: +=(1496) at 0", "Insert SimpleName: WORD(1495) into Assignment: +=(1496) at 1", "Insert SimpleName: zipMethod(1500) into VariableDeclarationFragment(1504) at 0", "Insert MethodInvocation(1503) into VariableDeclarationFragment(1504) at 1", "Insert InfixExpression: ==(1508) into InfixExpression: &&(1512) at 0", "Insert InfixExpression: ==(1511) into InfixExpression: &&(1512) at 1", "Insert ExpressionStatement(1519) into Block(1527) at 0", "Insert ExpressionStatement(1526) into Block(1527) at 1", "Insert ExpressionStatement(1534) into Block(1539) at 0", "Insert ExpressionStatement(1538) into Block(1539) at 1", "Insert SimpleName: written(1541) into Assignment: +=(1543) at 0", "Insert SimpleName: WORD(1542) into Assignment: +=(1543) at 1", "Insert SimpleName: writeOut(1545) into MethodInvocation(1550) at 0", "Insert MethodInvocation(1549) into MethodInvocation(1550) at 1", "Insert SimpleName: written(1552) into Assignment: +=(1554) at 0", "Insert SimpleName: SHORT(1553) into Assignment: +=(1554) at 1", "Insert SimpleName: writeOut(1556) into MethodInvocation(1562) at 0", "Insert MethodInvocation(1561) into MethodInvocation(1562) at 1", "Insert SimpleName: written(1564) into Assignment: +=(1566) at 0", "Insert SimpleName: WORD(1565) into Assignment: +=(1566) at 1", "Insert SimpleName: localDataStart(1568) into Assignment: =(1570) at 0", "Insert SimpleName: written(1569) into Assignment: =(1570) at 1", "Insert InfixExpression: ==(1574) into InfixExpression: ||(1578) at 0", "Insert InfixExpression: !=(1577) into InfixExpression: ||(1578) at 1", "Insert ExpressionStatement(1582) into Block(1591) at 0", "Insert ExpressionStatement(1586) into Block(1591) at 1", "Insert ExpressionStatement(1590) into Block(1591) at 2", "Insert ExpressionStatement(1600) into Block(1619) at 0", "Insert ExpressionStatement(1609) into Block(1619) at 1", "Insert ExpressionStatement(1618) into Block(1619) at 2", "Insert SimpleName: written(1621) into Assignment: +=(1623) at 0", "Insert NumberLiteral: 12(1622) into Assignment: +=(1623) at 1", "Insert SimpleName: name(1628) into VariableDeclarationFragment(1634) at 0", "Insert MethodInvocation(1633) into VariableDeclarationFragment(1634) at 1", "Insert SimpleName: writeOut(1636) into MethodInvocation(1641) at 0", "Insert MethodInvocation(1640) into MethodInvocation(1641) at 1", "Insert SimpleName: written(1643) into Assignment: +=(1645) at 0", "Insert SimpleName: SHORT(1644) into Assignment: +=(1645) at 1", "Insert SimpleName: extra(1650) into VariableDeclarationFragment(1654) at 0", "Insert MethodInvocation(1653) into VariableDeclarationFragment(1654) at 1", "Insert SimpleName: writeOut(1656) into MethodInvocation(1661) at 0", "Insert MethodInvocation(1660) into MethodInvocation(1661) at 1", "Insert SimpleName: written(1663) into Assignment: +=(1665) at 0", "Insert SimpleName: SHORT(1664) into Assignment: +=(1665) at 1", "Insert SimpleName: writeOut(1667) into MethodInvocation(1669) at 0", "Insert SimpleName: name(1668) into MethodInvocation(1669) at 1", "Insert SimpleName: written(1671) into Assignment: +=(1673) at 0", "Insert QualifiedName: name.length(1672) into Assignment: +=(1673) at 1", "Insert SimpleName: writeOut(1675) into MethodInvocation(1677) at 0", "Insert SimpleName: extra(1676) into MethodInvocation(1677) at 1", "Insert SimpleName: written(1679) into Assignment: +=(1681) at 0", "Insert QualifiedName: extra.length(1680) into Assignment: +=(1681) at 1", "Insert SimpleName: dataStart(1683) into Assignment: =(1685) at 0", "Insert SimpleName: written(1684) into Assignment: =(1685) at 1", "Move InfixExpression: !=(1596) into InfixExpression: ||(1717) at 0", "Insert InfixExpression: !=(1716) into InfixExpression: ||(1717) at 1", "Insert SimpleName: writeOut(1721) into MethodInvocation(1723) at 0", "Insert SimpleName: DD_SIG(1722) into MethodInvocation(1723) at 1", "Insert SimpleName: writeOut(1725) into MethodInvocation(1732) at 0", "Insert MethodInvocation(1731) into MethodInvocation(1732) at 1", "Insert SimpleName: writeOut(1734) into MethodInvocation(1741) at 0", "Insert MethodInvocation(1740) into MethodInvocation(1741) at 1", "Insert SimpleName: writeOut(1743) into MethodInvocation(1750) at 0", "Insert MethodInvocation(1749) into MethodInvocation(1750) at 1", "Insert SimpleName: written(1752) into Assignment: +=(1754) at 0", "Insert NumberLiteral: 16(1753) into Assignment: +=(1754) at 1", "Insert SimpleName: writeOut(1778) into MethodInvocation(1780) at 0", "Insert SimpleName: CFH_SIG(1779) into MethodInvocation(1780) at 1", "Insert SimpleName: written(1782) into Assignment: +=(1784) at 0", "Insert SimpleName: WORD(1783) into Assignment: +=(1784) at 1", "Insert SimpleName: writeOut(1786) into MethodInvocation(1798) at 0", "Insert MethodInvocation(1797) into MethodInvocation(1798) at 1", "Insert SimpleName: written(1800) into Assignment: +=(1802) at 0", "Insert SimpleName: SHORT(1801) into Assignment: +=(1802) at 1", "Insert InfixExpression: ==(1808) into InfixExpression: &&(1812) at 0", "Insert InfixExpression: ==(1811) into InfixExpression: &&(1812) at 1", "Insert ExpressionStatement(1819) into Block(1827) at 0", "Insert ExpressionStatement(1826) into Block(1827) at 1", "Insert ExpressionStatement(1834) into Block(1839) at 0", "Insert ExpressionStatement(1838) into Block(1839) at 1", "Insert SimpleName: written(1841) into Assignment: +=(1843) at 0", "Insert SimpleName: WORD(1842) into Assignment: +=(1843) at 1", "Insert SimpleName: writeOut(1845) into MethodInvocation(1852) at 0", "Insert MethodInvocation(1851) into MethodInvocation(1852) at 1", "Insert SimpleName: written(1854) into Assignment: +=(1856) at 0", "Insert SimpleName: SHORT(1855) into Assignment: +=(1856) at 1", "Insert SimpleName: writeOut(1858) into MethodInvocation(1864) at 0", "Insert MethodInvocation(1863) into MethodInvocation(1864) at 1", "Insert SimpleName: written(1866) into Assignment: +=(1868) at 0", "Insert SimpleName: WORD(1867) into Assignment: +=(1868) at 1", "Insert SimpleName: writeOut(1870) into MethodInvocation(1877) at 0", "Insert MethodInvocation(1876) into MethodInvocation(1877) at 1", "Insert SimpleName: writeOut(1879) into MethodInvocation(1886) at 0", "Insert MethodInvocation(1885) into MethodInvocation(1886) at 1", "Insert SimpleName: writeOut(1888) into MethodInvocation(1895) at 0", "Insert MethodInvocation(1894) into MethodInvocation(1895) at 1", "Insert SimpleName: written(1897) into Assignment: +=(1899) at 0", "Insert NumberLiteral: 12(1898) into Assignment: +=(1899) at 1", "Insert SimpleName: name(1904) into VariableDeclarationFragment(1910) at 0", "Insert MethodInvocation(1909) into VariableDeclarationFragment(1910) at 1", "Insert SimpleName: writeOut(1912) into MethodInvocation(1917) at 0", "Insert MethodInvocation(1916) into MethodInvocation(1917) at 1", "Insert SimpleName: written(1919) into Assignment: +=(1921) at 0", "Insert SimpleName: SHORT(1920) into Assignment: +=(1921) at 1", "Insert SimpleName: extra(1926) into VariableDeclarationFragment(1930) at 0", "Insert MethodInvocation(1929) into VariableDeclarationFragment(1930) at 1", "Insert SimpleName: writeOut(1932) into MethodInvocation(1937) at 0", "Insert MethodInvocation(1936) into MethodInvocation(1937) at 1", "Insert SimpleName: written(1939) into Assignment: +=(1941) at 0", "Insert SimpleName: SHORT(1940) into Assignment: +=(1941) at 1", "Insert SimpleName: comm(1945) into VariableDeclarationFragment(1949) at 0", "Insert MethodInvocation(1948) into VariableDeclarationFragment(1949) at 1", "Update SimpleName: comment(1461) to commentB", "Insert SimpleName: writeOut(1969) into MethodInvocation(1974) at 0", "Insert MethodInvocation(1973) into MethodInvocation(1974) at 1", "Insert SimpleName: written(1976) into Assignment: +=(1978) at 0", "Insert SimpleName: SHORT(1977) into Assignment: +=(1978) at 1", "Insert SimpleName: writeOut(1980) into MethodInvocation(1982) at 0", "Insert SimpleName: ZERO(1981) into MethodInvocation(1982) at 1", "Insert SimpleName: written(1984) into Assignment: +=(1986) at 0", "Insert SimpleName: SHORT(1985) into Assignment: +=(1986) at 1", "Insert SimpleName: writeOut(1988) into MethodInvocation(1995) at 0", "Insert MethodInvocation(1994) into MethodInvocation(1995) at 1", "Insert SimpleName: written(1997) into Assignment: +=(1999) at 0", "Insert SimpleName: SHORT(1998) into Assignment: +=(1999) at 1", "Insert SimpleName: writeOut(2001) into MethodInvocation(2008) at 0", "Insert MethodInvocation(2007) into MethodInvocation(2008) at 1", "Insert SimpleName: written(2010) into Assignment: +=(2012) at 0", "Insert SimpleName: WORD(2011) into Assignment: +=(2012) at 1", "Insert SimpleName: writeOut(2014) into MethodInvocation(2023) at 0", "Insert CastExpression(2022) into MethodInvocation(2023) at 1", "Insert SimpleName: written(2025) into Assignment: +=(2027) at 0", "Insert SimpleName: WORD(2026) into Assignment: +=(2027) at 1", "Insert SimpleName: writeOut(2029) into MethodInvocation(2031) at 0", "Insert SimpleName: name(2030) into MethodInvocation(2031) at 1", "Insert SimpleName: written(2033) into Assignment: +=(2035) at 0", "Insert QualifiedName: name.length(2034) into Assignment: +=(2035) at 1", "Insert SimpleName: writeOut(2037) into MethodInvocation(2039) at 0", "Insert SimpleName: extra(2038) into MethodInvocation(2039) at 1", "Insert SimpleName: written(2041) into Assignment: +=(2043) at 0", "Insert QualifiedName: extra.length(2042) into Assignment: +=(2043) at 1", "Insert SimpleName: writeOut(2045) into MethodInvocation(2047) at 0", "Insert SimpleName: commentB(2046) into MethodInvocation(2047) at 1", "Insert SimpleName: written(2049) into Assignment: +=(2051) at 0", "Insert QualifiedName: commentB.length(2050) into Assignment: +=(2051) at 1", "Insert SimpleName: writeOut(2068) into MethodInvocation(2070) at 0", "Insert SimpleName: EOCD_SIG(2069) into MethodInvocation(2070) at 1", "Insert SimpleName: writeOut(2072) into MethodInvocation(2074) at 0", "Insert SimpleName: ZERO(2073) into MethodInvocation(2074) at 1", "Insert SimpleName: writeOut(2076) into MethodInvocation(2078) at 0", "Insert SimpleName: ZERO(2077) into MethodInvocation(2078) at 1", "Insert PrimitiveType: byte(2080) into ArrayType: byte[](2082) at 0", "Insert Dimension(2081) into ArrayType: byte[](2082) at 1", "Insert SimpleName: num(2083) into VariableDeclarationFragment(2090) at 0", "Insert MethodInvocation(2089) into VariableDeclarationFragment(2090) at 1", "Insert SimpleName: writeOut(2092) into MethodInvocation(2094) at 0", "Insert SimpleName: num(2093) into MethodInvocation(2094) at 1", "Insert SimpleName: writeOut(2096) into MethodInvocation(2098) at 0", "Insert SimpleName: num(2097) into MethodInvocation(2098) at 1", "Insert SimpleName: writeOut(2100) into MethodInvocation(2105) at 0", "Insert MethodInvocation(2104) into MethodInvocation(2105) at 1", "Insert SimpleName: writeOut(2107) into MethodInvocation(2112) at 0", "Insert MethodInvocation(2111) into MethodInvocation(2112) at 1", "Insert PrimitiveType: byte(2114) into ArrayType: byte[](2116) at 0", "Insert Dimension(2115) into ArrayType: byte[](2116) at 1", "Insert SimpleName: data(2117) into VariableDeclarationFragment(2121) at 0", "Insert MethodInvocation(2120) into VariableDeclarationFragment(2121) at 1", "Insert SimpleName: writeOut(2123) into MethodInvocation(2128) at 0", "Insert MethodInvocation(2127) into MethodInvocation(2128) at 1", "Insert SimpleName: writeOut(2130) into MethodInvocation(2132) at 0", "Insert SimpleName: data(2131) into MethodInvocation(2132) at 1", "Move SimpleType: ZipLong(1828) into ClassInstanceCreation(2180) at 0", "Insert MethodInvocation(2179) into ClassInstanceCreation(2180) at 1", "Insert SimpleName: time(2206) into VariableDeclarationFragment(2211) at 0", "Insert ClassInstanceCreation(2210) into VariableDeclarationFragment(2211) at 1", "Insert SimpleName: year(2214) into VariableDeclarationFragment(2220) at 0", "Insert InfixExpression: +(2219) into VariableDeclarationFragment(2220) at 1", "Insert SimpleName: month(2230) into VariableDeclarationFragment(2236) at 0", "Insert InfixExpression: +(2235) into VariableDeclarationFragment(2236) at 1", "Insert SimpleName: value(2239) into VariableDeclarationFragment(2276) at 0", "Insert InfixExpression: |(2275) into VariableDeclarationFragment(2276) at 1", "Insert SimpleName: ZipLong(2278) into MethodInvocation(2281) at 0", "Insert SimpleName: getBytes(2279) into MethodInvocation(2281) at 1", "Insert SimpleName: value(2280) into MethodInvocation(2281) at 2", "Update SimpleName: m_encoding(1088) to encoding", "Insert SimpleName: writeOut(2364) into MethodInvocation(2368) at 0", "Insert SimpleName: data(2365) into MethodInvocation(2368) at 1", "Insert NumberLiteral: 0(2366) into MethodInvocation(2368) at 2", "Insert QualifiedName: data.length(2367) into MethodInvocation(2368) at 3", "Insert SimpleName: raf(2406) into InfixExpression: !=(2408) at 0", "Insert NullLiteral(2407) into InfixExpression: !=(2408) at 1", "Insert ExpressionStatement(2415) into Block(2416) at 0", "Insert ExpressionStatement(2423) into Block(2424) at 0", "Insert SimpleName: i(2446) into InfixExpression: <(2448) at 0", "Insert NumberLiteral: 0(2447) into InfixExpression: <(2448) at 1", "Insert ReturnStatement(2459) into Block(2460) at 0", "Insert ReturnStatement(2462) into Block(2463) at 0", "Insert MethodInvocation(2474) into PrefixExpression: !(2475) at 0", "Insert ExpressionStatement(2478) into Block(2479) at 0", "Insert Assignment: =(458) into ExpressionStatement(459) at 0", "Insert MethodInvocation(463) into ExpressionStatement(464) at 0", "Insert SimpleType: IOException(467) into SingleVariableDeclaration(469) at 0", "Insert SimpleName: e(468) into SingleVariableDeclaration(469) at 1", "Insert IfStatement(490) into Block(498) at 0", "Insert ExpressionStatement(497) into Block(498) at 1", "Insert SimpleName: STORED(507) into MemberRef(508) at 0", "Insert SimpleName: putNextEntry(512) into MemberRef(513) at 0", "Insert ThisExpression(549) into FieldAccess(551) at 0", "Insert SimpleName: encoding(550) into FieldAccess(551) at 1", "Insert SimpleName: i(594) into VariableDeclarationFragment(596) at 0", "Insert NumberLiteral: 0(595) into VariableDeclarationFragment(596) at 1", "Insert SimpleName: entriesSize(597) into VariableDeclarationFragment(601) at 0", "Insert MethodInvocation(600) into VariableDeclarationFragment(601) at 1", "Insert MethodInvocation(616) into ExpressionStatement(617) at 0", "Insert SimpleName: written(621) into InfixExpression: -(623) at 0", "Insert SimpleName: cdOffset(622) into InfixExpression: -(623) at 1", "Insert SimpleName: crc(660) into MethodInvocation(662) at 0", "Insert SimpleName: getValue(661) into MethodInvocation(662) at 1", "Insert MethodInvocation(694) into ExpressionStatement(695) at 0", "Insert MethodInvocation(703) into ExpressionStatement(704) at 0", "Insert MethodInvocation(708) into ExpressionStatement(709) at 0", "Insert Assignment: +=(718) into ExpressionStatement(719) at 0", "Insert SimpleName: raf(721) into InfixExpression: ==(723) at 0", "Insert NullLiteral(722) into InfixExpression: ==(723) at 1", "Insert IfStatement(751) into Block(779) at 0", "Insert IfStatement(778) into Block(779) at 1", "Insert VariableDeclarationStatement(786) into Block(802) at 0", "Insert ExpressionStatement(791) into Block(802) at 1", "Insert ExpressionStatement(796) into Block(802) at 2", "Insert ExpressionStatement(801) into Block(802) at 3", "Insert PrimitiveType: long(808) into VariableDeclarationStatement(814) at 0", "Insert VariableDeclarationFragment(813) into VariableDeclarationStatement(814) at 1", "Insert MethodInvocation(818) into ExpressionStatement(819) at 0", "Insert MethodInvocation(827) into ExpressionStatement(828) at 0", "Insert MethodInvocation(836) into ExpressionStatement(837) at 0", "Insert MethodInvocation(845) into ExpressionStatement(846) at 0", "Insert MethodInvocation(850) into ExpressionStatement(851) at 0", "Insert MethodInvocation(905) into ExpressionStatement(906) at 0", "Insert MethodInvocation(920) into ExpressionStatement(921) at 0", "Move MethodInvocation(1319) into InfixExpression: ==(928) at 0", "Insert SimpleName: STORED(927) into InfixExpression: ==(928) at 1", "Insert SimpleName: raf(929) into InfixExpression: ==(931) at 0", "Insert NullLiteral(930) into InfixExpression: ==(931) at 1", "Insert InfixExpression: ==(938) into IfStatement(948) at 0", "Insert Block(947) into IfStatement(948) at 1", "Insert InfixExpression: ==(954) into IfStatement(963) at 0", "Insert Block(962) into IfStatement(963) at 1", "Insert MethodInvocation(969) into ExpressionStatement(970) at 0", "Insert MethodInvocation(983) into ExpressionStatement(984) at 0", "Insert Assignment: =(987) into ExpressionStatement(988) at 0", "Insert ThisExpression(1012) into FieldAccess(1014) at 0", "Insert SimpleName: comment(1013) into FieldAccess(1014) at 1", "Insert SimpleName: level(1038) into InfixExpression: <(1040) at 0", "Insert QualifiedName: Deflater.DEFAULT_COMPRESSION(1039) into InfixExpression: <(1040) at 1", "Insert SimpleName: level(1041) into InfixExpression: >(1043) at 0", "Insert QualifiedName: Deflater.BEST_COMPRESSION(1042) into InfixExpression: >(1043) at 1", "Insert ClassInstanceCreation(1050) into ThrowStatement(1051) at 0", "Insert InfixExpression: !=(1059) into ParenthesizedExpression(1060) at 0", "Insert ThisExpression(1063) into FieldAccess(1065) at 0", "Insert SimpleName: level(1064) into FieldAccess(1065) at 1", "Insert ThisExpression(1086) into FieldAccess(1088) at 0", "Insert SimpleName: method(1087) into FieldAccess(1088) at 1", "Insert InfixExpression: >(1132) into IfStatement(1217) at 0", "Insert Block(1216) into IfStatement(1217) at 1", "Insert MethodInvocation(1223) into ExpressionStatement(1224) at 0", "Insert Assignment: +=(1227) into ExpressionStatement(1228) at 0", "Move ArrayType: byte[](1393) into ArrayCreation(1268) at 0", "Insert NumberLiteral: 1(1267) into ArrayCreation(1268) at 1", "Insert SimpleName: buff(1271) into ArrayAccess(1273) at 0", "Insert NumberLiteral: 0(1272) into ArrayAccess(1273) at 1", "Insert PrimitiveType: byte(1274) into CastExpression(1279) at 0", "Insert ParenthesizedExpression(1278) into CastExpression(1279) at 1", "Insert MethodInvocation(1312) into ExpressionStatement(1313) at 0", "Insert MethodInvocation(1321) into ExpressionStatement(1322) at 0", "Insert MethodInvocation(1346) into ExpressionStatement(1347) at 0", "Insert SimpleName: def(1440) into MethodInvocation(1445) at 0", "Insert SimpleName: deflate(1441) into MethodInvocation(1445) at 1", "Insert SimpleName: buf(1442) into MethodInvocation(1445) at 2", "Insert NumberLiteral: 0(1443) into MethodInvocation(1445) at 3", "Insert QualifiedName: buf.length(1444) into MethodInvocation(1445) at 4", "Insert MethodInvocation(1455) into ExpressionStatement(1456) at 0", "Insert SimpleName: ZipLong(1484) into MethodInvocation(1487) at 0", "Insert SimpleName: getBytes(1485) into MethodInvocation(1487) at 1", "Insert SimpleName: written(1486) into MethodInvocation(1487) at 2", "Insert SimpleName: ze(1501) into MethodInvocation(1503) at 0", "Insert SimpleName: getMethod(1502) into MethodInvocation(1503) at 1", "Insert SimpleName: zipMethod(1506) into InfixExpression: ==(1508) at 0", "Insert SimpleName: DEFLATED(1507) into InfixExpression: ==(1508) at 1", "Insert SimpleName: raf(1509) into InfixExpression: ==(1511) at 0", "Insert NullLiteral(1510) into InfixExpression: ==(1511) at 1", "Insert MethodInvocation(1518) into ExpressionStatement(1519) at 0", "Insert MethodInvocation(1525) into ExpressionStatement(1526) at 0", "Insert MethodInvocation(1533) into ExpressionStatement(1534) at 0", "Insert MethodInvocation(1537) into ExpressionStatement(1538) at 0", "Insert SimpleName: ZipShort(1546) into MethodInvocation(1549) at 0", "Insert SimpleName: getBytes(1547) into MethodInvocation(1549) at 1", "Insert SimpleName: zipMethod(1548) into MethodInvocation(1549) at 2", "Insert SimpleName: toDosTime(1557) into MethodInvocation(1561) at 0", "Insert MethodInvocation(1560) into MethodInvocation(1561) at 1", "Insert SimpleName: zipMethod(1572) into InfixExpression: ==(1574) at 0", "Insert SimpleName: DEFLATED(1573) into InfixExpression: ==(1574) at 1", "Insert SimpleName: raf(1575) into InfixExpression: !=(1577) at 0", "Insert NullLiteral(1576) into InfixExpression: !=(1577) at 1", "Insert MethodInvocation(1581) into ExpressionStatement(1582) at 0", "Insert MethodInvocation(1585) into ExpressionStatement(1586) at 0", "Insert MethodInvocation(1589) into ExpressionStatement(1590) at 0", "Insert MethodInvocation(1599) into ExpressionStatement(1600) at 0", "Insert MethodInvocation(1608) into ExpressionStatement(1609) at 0", "Insert MethodInvocation(1617) into ExpressionStatement(1618) at 0", "Insert SimpleName: getBytes(1629) into MethodInvocation(1633) at 0", "Insert MethodInvocation(1632) into MethodInvocation(1633) at 1", "Insert SimpleName: ZipShort(1637) into MethodInvocation(1640) at 0", "Insert SimpleName: getBytes(1638) into MethodInvocation(1640) at 1", "Insert QualifiedName: name.length(1639) into MethodInvocation(1640) at 2", "Insert SimpleName: ze(1651) into MethodInvocation(1653) at 0", "Insert SimpleName: getLocalFileDataExtra(1652) into MethodInvocation(1653) at 1", "Insert SimpleName: ZipShort(1657) into MethodInvocation(1660) at 0", "Insert SimpleName: getBytes(1658) into MethodInvocation(1660) at 1", "Insert QualifiedName: extra.length(1659) into MethodInvocation(1660) at 2", "Insert SimpleName: raf(1714) into InfixExpression: !=(1716) at 0", "Insert NullLiteral(1715) into InfixExpression: !=(1716) at 1", "Insert SimpleName: ZipLong(1726) into MethodInvocation(1731) at 0", "Insert SimpleName: getBytes(1727) into MethodInvocation(1731) at 1", "Move MethodInvocation(1805) into MethodInvocation(1731) at 2", "Insert SimpleName: ZipLong(1735) into MethodInvocation(1740) at 0", "Insert SimpleName: getBytes(1736) into MethodInvocation(1740) at 1", "Insert MethodInvocation(1739) into MethodInvocation(1740) at 2", "Insert SimpleName: ZipLong(1744) into MethodInvocation(1749) at 0", "Insert SimpleName: getBytes(1745) into MethodInvocation(1749) at 1", "Move MethodInvocation(1818) into MethodInvocation(1749) at 2", "Insert SimpleName: ZipShort(1787) into MethodInvocation(1797) at 0", "Insert SimpleName: getBytes(1788) into MethodInvocation(1797) at 1", "Insert InfixExpression: |(1796) into MethodInvocation(1797) at 2", "Insert MethodInvocation(1806) into InfixExpression: ==(1808) at 0", "Insert SimpleName: DEFLATED(1807) into InfixExpression: ==(1808) at 1", "Insert SimpleName: raf(1809) into InfixExpression: ==(1811) at 0", "Insert NullLiteral(1810) into InfixExpression: ==(1811) at 1", "Insert MethodInvocation(1818) into ExpressionStatement(1819) at 0", "Insert MethodInvocation(1825) into ExpressionStatement(1826) at 0", "Insert MethodInvocation(1833) into ExpressionStatement(1834) at 0", "Insert MethodInvocation(1837) into ExpressionStatement(1838) at 0", "Insert SimpleName: ZipShort(1846) into MethodInvocation(1851) at 0", "Insert SimpleName: getBytes(1847) into MethodInvocation(1851) at 1", "Insert MethodInvocation(1850) into MethodInvocation(1851) at 2", "Insert SimpleName: toDosTime(1859) into MethodInvocation(1863) at 0", "Insert MethodInvocation(1862) into MethodInvocation(1863) at 1", "Insert SimpleName: ZipLong(1871) into MethodInvocation(1876) at 0", "Insert SimpleName: getBytes(1872) into MethodInvocation(1876) at 1", "Insert MethodInvocation(1875) into MethodInvocation(1876) at 2", "Insert SimpleName: ZipLong(1880) into MethodInvocation(1885) at 0", "Insert SimpleName: getBytes(1881) into MethodInvocation(1885) at 1", "Insert MethodInvocation(1884) into MethodInvocation(1885) at 2", "Insert SimpleName: ZipLong(1889) into MethodInvocation(1894) at 0", "Insert SimpleName: getBytes(1890) into MethodInvocation(1894) at 1", "Insert MethodInvocation(1893) into MethodInvocation(1894) at 2", "Insert SimpleName: getBytes(1905) into MethodInvocation(1909) at 0", "Insert MethodInvocation(1908) into MethodInvocation(1909) at 1", "Insert SimpleName: ZipShort(1913) into MethodInvocation(1916) at 0", "Insert SimpleName: getBytes(1914) into MethodInvocation(1916) at 1", "Insert QualifiedName: name.length(1915) into MethodInvocation(1916) at 2", "Insert SimpleName: ze(1927) into MethodInvocation(1929) at 0", "Insert SimpleName: getCentralDirectoryExtra(1928) into MethodInvocation(1929) at 1", "Insert SimpleName: ZipShort(1933) into MethodInvocation(1936) at 0", "Insert SimpleName: getBytes(1934) into MethodInvocation(1936) at 1", "Insert QualifiedName: extra.length(1935) into MethodInvocation(1936) at 2", "Insert SimpleName: ze(1946) into MethodInvocation(1948) at 0", "Insert SimpleName: getComment(1947) into MethodInvocation(1948) at 1", "Insert SimpleName: ZipShort(1970) into MethodInvocation(1973) at 0", "Insert SimpleName: getBytes(1971) into MethodInvocation(1973) at 1", "Insert QualifiedName: commentB.length(1972) into MethodInvocation(1973) at 2", "Insert SimpleName: ZipShort(1989) into MethodInvocation(1994) at 0", "Insert SimpleName: getBytes(1990) into MethodInvocation(1994) at 1", "Insert MethodInvocation(1993) into MethodInvocation(1994) at 2", "Insert SimpleName: ZipLong(2002) into MethodInvocation(2007) at 0", "Insert SimpleName: getBytes(2003) into MethodInvocation(2007) at 1", "Insert MethodInvocation(2006) into MethodInvocation(2007) at 2", "Insert ArrayType: byte[](2017) into CastExpression(2022) at 0", "Insert MethodInvocation(2021) into CastExpression(2022) at 1", "Insert SimpleName: ZipShort(2084) into MethodInvocation(2089) at 0", "Insert SimpleName: getBytes(2085) into MethodInvocation(2089) at 1", "Insert MethodInvocation(2088) into MethodInvocation(2089) at 2", "Insert SimpleName: ZipLong(2101) into MethodInvocation(2104) at 0", "Insert SimpleName: getBytes(2102) into MethodInvocation(2104) at 1", "Insert SimpleName: cdLength(2103) into MethodInvocation(2104) at 2", "Insert SimpleName: ZipLong(2108) into MethodInvocation(2111) at 0", "Insert SimpleName: getBytes(2109) into MethodInvocation(2111) at 1", "Insert SimpleName: cdOffset(2110) into MethodInvocation(2111) at 2", "Insert SimpleName: getBytes(2118) into MethodInvocation(2120) at 0", "Insert SimpleName: comment(2119) into MethodInvocation(2120) at 1", "Insert SimpleName: ZipShort(2124) into MethodInvocation(2127) at 0", "Insert SimpleName: getBytes(2125) into MethodInvocation(2127) at 1", "Insert QualifiedName: data.length(2126) into MethodInvocation(2127) at 2", "Insert SimpleName: toDosTime(2175) into MethodInvocation(2179) at 0", "Insert MethodInvocation(2178) into MethodInvocation(2179) at 1", "Move SimpleType: Date(1334) into ClassInstanceCreation(2210) at 0", "Insert SimpleName: t(2209) into ClassInstanceCreation(2210) at 1", "Insert MethodInvocation(2217) into InfixExpression: +(2219) at 0", "Insert NumberLiteral: 1900(2218) into InfixExpression: +(2219) at 1", "Insert MethodInvocation(2233) into InfixExpression: +(2235) at 0", "Insert NumberLiteral: 1(2234) into InfixExpression: +(2235) at 1", "Move ParenthesizedExpression(438) into InfixExpression: |(2275) at 0", "Move ParenthesizedExpression(442) into InfixExpression: |(2275) at 1", "Insert ParenthesizedExpression(2256) into InfixExpression: |(2275) at 2", "Insert ParenthesizedExpression(2262) into InfixExpression: |(2275) at 3", "Insert ParenthesizedExpression(2268) into InfixExpression: |(2275) at 4", "Insert ParenthesizedExpression(2274) into InfixExpression: |(2275) at 5", "Insert MethodInvocation(2414) into ExpressionStatement(2415) at 0", "Insert MethodInvocation(2422) into ExpressionStatement(2423) at 0", "Insert InfixExpression: +(2458) into ReturnStatement(2459) at 0", "Insert SimpleName: i(2461) into ReturnStatement(2462) at 0", "Insert SimpleName: def(2472) into MethodInvocation(2474) at 0", "Insert SimpleName: needsInput(2473) into MethodInvocation(2474) at 1", "Insert MethodInvocation(2477) into ExpressionStatement(2478) at 0", "Insert SimpleName: raf(452) into Assignment: =(458) at 0", "Insert ClassInstanceCreation(457) into Assignment: =(458) at 1", "Insert SimpleName: raf(460) into MethodInvocation(463) at 0", "Insert SimpleName: setLength(461) into MethodInvocation(463) at 1", "Insert NumberLiteral: 0(462) into MethodInvocation(463) at 2", "Insert SimpleName: IOException(466) into SimpleType: IOException(467) at 0", "Insert InfixExpression: !=(472) into IfStatement(490) at 0", "Insert Block(489) into IfStatement(490) at 1", "Insert Assignment: =(496) into ExpressionStatement(497) at 0", "Insert SimpleName: entries(598) into MethodInvocation(600) at 0", "Insert SimpleName: size(599) into MethodInvocation(600) at 1", "Insert SimpleName: writeCentralFileHeader(608) into MethodInvocation(616) at 0", "Insert CastExpression(615) into MethodInvocation(616) at 1", "Insert SimpleName: entry(687) into MethodInvocation(694) at 0", "Insert SimpleName: setSize(688) into MethodInvocation(694) at 1", "Move MethodInvocation(703) into MethodInvocation(694) at 2", "Insert SimpleName: entry(696) into MethodInvocation(703) at 0", "Insert SimpleName: setCompressedSize(697) into MethodInvocation(703) at 1", "Move MethodInvocation(710) into MethodInvocation(703) at 2", "Insert SimpleName: entry(705) into MethodInvocation(708) at 0", "Insert SimpleName: setCrc(706) into MethodInvocation(708) at 1", "Insert SimpleName: realCrc(707) into MethodInvocation(708) at 2", "Insert SimpleName: written(714) into Assignment: +=(718) at 0", "Move MethodInvocation(1367) into Assignment: +=(718) at 1", "Insert InfixExpression: !=(728) into IfStatement(751) at 0", "Insert Block(750) into IfStatement(751) at 1", "Insert InfixExpression: !=(758) into IfStatement(778) at 0", "Insert Block(777) into IfStatement(778) at 1", "Insert PrimitiveType: long(780) into VariableDeclarationStatement(786) at 0", "Insert VariableDeclarationFragment(785) into VariableDeclarationStatement(786) at 1", "Insert MethodInvocation(790) into ExpressionStatement(791) at 0", "Insert MethodInvocation(795) into ExpressionStatement(796) at 0", "Insert MethodInvocation(800) into ExpressionStatement(801) at 0", "Insert SimpleName: save(809) into VariableDeclarationFragment(813) at 0", "Insert MethodInvocation(812) into VariableDeclarationFragment(813) at 1", "Insert SimpleName: raf(815) into MethodInvocation(818) at 0", "Insert SimpleName: seek(816) into MethodInvocation(818) at 1", "Insert SimpleName: localDataStart(817) into MethodInvocation(818) at 2", "Insert SimpleName: writeOut(820) into MethodInvocation(827) at 0", "Insert MethodInvocation(826) into MethodInvocation(827) at 1", "Insert SimpleName: writeOut(829) into MethodInvocation(836) at 0", "Insert MethodInvocation(835) into MethodInvocation(836) at 1", "Insert SimpleName: writeOut(838) into MethodInvocation(845) at 0", "Insert MethodInvocation(844) into MethodInvocation(845) at 1", "Insert SimpleName: raf(847) into MethodInvocation(850) at 0", "Insert SimpleName: seek(848) into MethodInvocation(850) at 1", "Insert SimpleName: save(849) into MethodInvocation(850) at 2", "Insert SimpleName: entry(902) into MethodInvocation(905) at 0", "Insert SimpleName: setMethod(903) into MethodInvocation(905) at 1", "Insert SimpleName: method(904) into MethodInvocation(905) at 2", "Insert SimpleName: entry(915) into MethodInvocation(920) at 0", "Insert SimpleName: setTime(916) into MethodInvocation(920) at 1", "Move MethodInvocation(936) into MethodInvocation(920) at 2", "Insert MethodInvocation(935) into InfixExpression: ==(938) at 0", "Move PrefixExpression: -(930) into InfixExpression: ==(938) at 1", "Insert ThrowStatement(946) into Block(947) at 0", "Insert MethodInvocation(951) into InfixExpression: ==(954) at 0", "Move PrefixExpression: -(950) into InfixExpression: ==(954) at 1", "Insert ThrowStatement(961) into Block(962) at 0", "Insert SimpleName: entry(964) into MethodInvocation(969) at 0", "Insert SimpleName: setCompressedSize(965) into MethodInvocation(969) at 1", "Move MethodInvocation(1380) into MethodInvocation(969) at 2", "Insert SimpleName: def(980) into MethodInvocation(983) at 0", "Insert SimpleName: setLevel(981) into MethodInvocation(983) at 1", "Insert SimpleName: level(982) into MethodInvocation(983) at 2", "Insert SimpleName: hasCompressionLevelChanged(985) into Assignment: =(987) at 0", "Insert BooleanLiteral: false(986) into Assignment: =(987) at 1", "Insert SimpleType: IllegalArgumentException(1046) into ClassInstanceCreation(1050) at 0", "Insert InfixExpression: +(1049) into ClassInstanceCreation(1050) at 1", "Insert FieldAccess(1057) into InfixExpression: !=(1059) at 0", "Insert SimpleName: level(1058) into InfixExpression: !=(1059) at 1", "Insert SimpleName: length(1130) into InfixExpression: >(1132) at 0", "Insert NumberLiteral: 0(1131) into InfixExpression: >(1132) at 1", "Insert IfStatement(1215) into Block(1216) at 0", "Insert SimpleName: writeOut(1219) into MethodInvocation(1223) at 0", "Insert SimpleName: b(1220) into MethodInvocation(1223) at 1", "Insert SimpleName: offset(1221) into MethodInvocation(1223) at 2", "Insert SimpleName: length(1222) into MethodInvocation(1223) at 3", "Insert SimpleName: written(1225) into Assignment: +=(1227) at 0", "Insert SimpleName: length(1226) into Assignment: +=(1227) at 1", "Insert InfixExpression: &(1277) into ParenthesizedExpression(1278) at 0", "Insert SimpleName: raf(1310) into MethodInvocation(1312) at 0", "Insert SimpleName: close(1311) into MethodInvocation(1312) at 1", "Insert SimpleName: out(1319) into MethodInvocation(1321) at 0", "Insert SimpleName: close(1320) into MethodInvocation(1321) at 1", "Insert SimpleName: out(1344) into MethodInvocation(1346) at 0", "Insert SimpleName: flush(1345) into MethodInvocation(1346) at 1", "Insert SimpleName: writeOut(1451) into MethodInvocation(1455) at 0", "Insert SimpleName: buf(1452) into MethodInvocation(1455) at 1", "Insert NumberLiteral: 0(1453) into MethodInvocation(1455) at 2", "Insert SimpleName: len(1454) into MethodInvocation(1455) at 3", "Insert SimpleName: writeOut(1513) into MethodInvocation(1518) at 0", "Insert MethodInvocation(1517) into MethodInvocation(1518) at 1", "Insert SimpleName: writeOut(1520) into MethodInvocation(1525) at 0", "Insert MethodInvocation(1524) into MethodInvocation(1525) at 1", "Insert SimpleName: writeOut(1528) into MethodInvocation(1533) at 0", "Insert MethodInvocation(1532) into MethodInvocation(1533) at 1", "Insert SimpleName: writeOut(1535) into MethodInvocation(1537) at 0", "Insert SimpleName: ZERO(1536) into MethodInvocation(1537) at 1", "Insert SimpleName: ze(1558) into MethodInvocation(1560) at 0", "Insert SimpleName: getTime(1559) into MethodInvocation(1560) at 1", "Insert SimpleName: writeOut(1579) into MethodInvocation(1581) at 0", "Insert SimpleName: LZERO(1580) into MethodInvocation(1581) at 1", "Insert SimpleName: writeOut(1583) into MethodInvocation(1585) at 0", "Insert SimpleName: LZERO(1584) into MethodInvocation(1585) at 1", "Insert SimpleName: writeOut(1587) into MethodInvocation(1589) at 0", "Insert SimpleName: LZERO(1588) into MethodInvocation(1589) at 1", "Insert SimpleName: writeOut(1592) into MethodInvocation(1599) at 0", "Insert MethodInvocation(1598) into MethodInvocation(1599) at 1", "Insert SimpleName: writeOut(1601) into MethodInvocation(1608) at 0", "Insert MethodInvocation(1607) into MethodInvocation(1608) at 1", "Insert SimpleName: writeOut(1610) into MethodInvocation(1617) at 0", "Insert MethodInvocation(1616) into MethodInvocation(1617) at 1", "Insert SimpleName: ze(1630) into MethodInvocation(1632) at 0", "Insert SimpleName: getName(1631) into MethodInvocation(1632) at 1", "Insert SimpleName: entry(1737) into MethodInvocation(1739) at 0", "Insert SimpleName: getCompressedSize(1738) into MethodInvocation(1739) at 1", "Insert ParenthesizedExpression(1794) into InfixExpression: |(1796) at 0", "Insert NumberLiteral: 20(1795) into InfixExpression: |(1796) at 1", "Insert SimpleName: ze(1804) into MethodInvocation(1806) at 0", "Insert SimpleName: getMethod(1805) into MethodInvocation(1806) at 1", "Insert SimpleName: writeOut(1813) into MethodInvocation(1818) at 0", "Insert MethodInvocation(1817) into MethodInvocation(1818) at 1", "Insert SimpleName: writeOut(1820) into MethodInvocation(1825) at 0", "Insert MethodInvocation(1824) into MethodInvocation(1825) at 1", "Insert SimpleName: writeOut(1828) into MethodInvocation(1833) at 0", "Insert MethodInvocation(1832) into MethodInvocation(1833) at 1", "Insert SimpleName: writeOut(1835) into MethodInvocation(1837) at 0", "Insert SimpleName: ZERO(1836) into MethodInvocation(1837) at 1", "Insert SimpleName: ze(1848) into MethodInvocation(1850) at 0", "Insert SimpleName: getMethod(1849) into MethodInvocation(1850) at 1", "Insert SimpleName: ze(1860) into MethodInvocation(1862) at 0", "Insert SimpleName: getTime(1861) into MethodInvocation(1862) at 1", "Insert SimpleName: ze(1873) into MethodInvocation(1875) at 0", "Insert SimpleName: getCrc(1874) into MethodInvocation(1875) at 1", "Insert SimpleName: ze(1882) into MethodInvocation(1884) at 0", "Insert SimpleName: getCompressedSize(1883) into MethodInvocation(1884) at 1", "Insert SimpleName: ze(1891) into MethodInvocation(1893) at 0", "Insert SimpleName: getSize(1892) into MethodInvocation(1893) at 1", "Insert SimpleName: ze(1906) into MethodInvocation(1908) at 0", "Insert SimpleName: getName(1907) into MethodInvocation(1908) at 1", "Insert SimpleName: ze(1991) into MethodInvocation(1993) at 0", "Insert SimpleName: getInternalAttributes(1992) into MethodInvocation(1993) at 1", "Insert SimpleName: ze(2004) into MethodInvocation(2006) at 0", "Insert SimpleName: getExternalAttributes(2005) into MethodInvocation(2006) at 1", "Insert PrimitiveType: byte(2015) into ArrayType: byte[](2017) at 0", "Insert Dimension(2016) into ArrayType: byte[](2017) at 1", "Insert SimpleName: offsets(2018) into MethodInvocation(2021) at 0", "Insert SimpleName: get(2019) into MethodInvocation(2021) at 1", "Insert SimpleName: ze(2020) into MethodInvocation(2021) at 2", "Insert SimpleName: entries(2086) into MethodInvocation(2088) at 0", "Insert SimpleName: size(2087) into MethodInvocation(2088) at 1", "Insert SimpleName: time(2176) into MethodInvocation(2178) at 0", "Insert SimpleName: getTime(2177) into MethodInvocation(2178) at 1", "Insert SimpleName: time(2215) into MethodInvocation(2217) at 0", "Insert SimpleName: getYear(2216) into MethodInvocation(2217) at 1", "Insert SimpleName: time(2231) into MethodInvocation(2233) at 0", "Insert SimpleName: getMonth(2232) into MethodInvocation(2233) at 1", "Insert InfixExpression: <<(2255) into ParenthesizedExpression(2256) at 0", "Insert InfixExpression: <<(2261) into ParenthesizedExpression(2262) at 0", "Insert InfixExpression: <<(2267) into ParenthesizedExpression(2268) at 0", "Insert InfixExpression: >>(2273) into ParenthesizedExpression(2274) at 0", "Insert SimpleName: raf(2409) into MethodInvocation(2414) at 0", "Insert SimpleName: write(2410) into MethodInvocation(2414) at 1", "Insert SimpleName: data(2411) into MethodInvocation(2414) at 2", "Insert SimpleName: offset(2412) into MethodInvocation(2414) at 3", "Insert SimpleName: length(2413) into MethodInvocation(2414) at 4", "Insert SimpleName: out(2417) into MethodInvocation(2422) at 0", "Insert SimpleName: write(2418) into MethodInvocation(2422) at 1", "Insert SimpleName: data(2419) into MethodInvocation(2422) at 2", "Insert SimpleName: offset(2420) into MethodInvocation(2422) at 3", "Insert SimpleName: length(2421) into MethodInvocation(2422) at 4", "Insert InfixExpression: +(2456) into InfixExpression: +(2458) at 0", "Insert SimpleName: i(2457) into InfixExpression: +(2458) at 1", "Insert SimpleName: deflate(2476) into MethodInvocation(2477) at 0", "Insert SimpleType: RandomAccessFile(454) into ClassInstanceCreation(457) at 0", "Insert SimpleName: file(455) into ClassInstanceCreation(457) at 1", "Insert StringLiteral: \"rw\"(456) into ClassInstanceCreation(457) at 2", "Insert SimpleName: raf(470) into InfixExpression: !=(472) at 0", "Insert NullLiteral(471) into InfixExpression: !=(472) at 1", "Insert TryStatement(484) into Block(489) at 0", "Insert ExpressionStatement(488) into Block(489) at 1", "Insert SimpleName: out(491) into Assignment: =(496) at 0", "Insert ClassInstanceCreation(495) into Assignment: =(496) at 1", "Insert SimpleType: ZipEntry(610) into CastExpression(615) at 0", "Insert MethodInvocation(614) into CastExpression(615) at 1", "Update SimpleName: m_entry(698) to adjustToLong", "Update SimpleName: m_entry(705) to adjustToLong", "Insert MethodInvocation(726) into InfixExpression: !=(728) at 0", "Insert SimpleName: realCrc(727) into InfixExpression: !=(728) at 1", "Insert ThrowStatement(749) into Block(750) at 0", "Insert MethodInvocation(754) into InfixExpression: !=(758) at 0", "Insert InfixExpression: -(757) into InfixExpression: !=(758) at 1", "Insert ThrowStatement(776) into Block(777) at 0", "Insert SimpleName: size(781) into VariableDeclarationFragment(785) at 0", "Insert InfixExpression: -(784) into VariableDeclarationFragment(785) at 1", "Insert SimpleName: entry(787) into MethodInvocation(790) at 0", "Insert SimpleName: setSize(788) into MethodInvocation(790) at 1", "Insert SimpleName: size(789) into MethodInvocation(790) at 2", "Insert SimpleName: entry(792) into MethodInvocation(795) at 0", "Insert SimpleName: setCompressedSize(793) into MethodInvocation(795) at 1", "Insert SimpleName: size(794) into MethodInvocation(795) at 2", "Insert SimpleName: entry(797) into MethodInvocation(800) at 0", "Insert SimpleName: setCrc(798) into MethodInvocation(800) at 1", "Insert SimpleName: realCrc(799) into MethodInvocation(800) at 2", "Insert SimpleName: raf(810) into MethodInvocation(812) at 0", "Insert SimpleName: getFilePointer(811) into MethodInvocation(812) at 1", "Insert SimpleName: ZipLong(821) into MethodInvocation(826) at 0", "Insert SimpleName: getBytes(822) into MethodInvocation(826) at 1", "Move MethodInvocation(1354) into MethodInvocation(826) at 2", "Insert SimpleName: ZipLong(830) into MethodInvocation(835) at 0", "Insert SimpleName: getBytes(831) into MethodInvocation(835) at 1", "Insert MethodInvocation(834) into MethodInvocation(835) at 2", "Insert SimpleName: ZipLong(839) into MethodInvocation(844) at 0", "Insert SimpleName: getBytes(840) into MethodInvocation(844) at 1", "Move MethodInvocation(1831) into MethodInvocation(844) at 2", "Insert SimpleName: entry(933) into MethodInvocation(935) at 0", "Insert SimpleName: getSize(934) into MethodInvocation(935) at 1", "Insert ClassInstanceCreation(945) into ThrowStatement(946) at 0", "Insert SimpleName: entry(949) into MethodInvocation(951) at 0", "Insert SimpleName: getCrc(950) into MethodInvocation(951) at 1", "Insert ClassInstanceCreation(960) into ThrowStatement(961) at 0", "Insert SimpleName: IllegalArgumentException(1045) into SimpleType: IllegalArgumentException(1046) at 0", "Insert StringLiteral: \"Invalid compression level: \"(1047) into InfixExpression: +(1049) at 0", "Insert SimpleName: level(1048) into InfixExpression: +(1049) at 1", "Insert ThisExpression(1055) into FieldAccess(1057) at 0", "Insert SimpleName: level(1056) into FieldAccess(1057) at 1", "Insert PrefixExpression: !(1136) into IfStatement(1215) at 0", "Insert Block(1214) into IfStatement(1215) at 1", "Insert SimpleName: b(1275) into InfixExpression: &(1277) at 0", "Insert SimpleName: BYTE_MASK(1276) into InfixExpression: &(1277) at 1", "Insert SimpleName: ZipShort(1514) into MethodInvocation(1517) at 0", "Insert SimpleName: getBytes(1515) into MethodInvocation(1517) at 1", "Insert NumberLiteral: 20(1516) into MethodInvocation(1517) at 2", "Insert SimpleName: ZipShort(1521) into MethodInvocation(1524) at 0", "Insert SimpleName: getBytes(1522) into MethodInvocation(1524) at 1", "Insert NumberLiteral: 8(1523) into MethodInvocation(1524) at 2", "Insert SimpleName: ZipShort(1529) into MethodInvocation(1532) at 0", "Insert SimpleName: getBytes(1530) into MethodInvocation(1532) at 1", "Insert NumberLiteral: 10(1531) into MethodInvocation(1532) at 2", "Insert SimpleName: ZipLong(1593) into MethodInvocation(1598) at 0", "Insert SimpleName: getBytes(1594) into MethodInvocation(1598) at 1", "Insert MethodInvocation(1597) into MethodInvocation(1598) at 2", "Insert SimpleName: ZipLong(1602) into MethodInvocation(1607) at 0", "Insert SimpleName: getBytes(1603) into MethodInvocation(1607) at 1", "Insert MethodInvocation(1606) into MethodInvocation(1607) at 2", "Insert SimpleName: ZipLong(1611) into MethodInvocation(1616) at 0", "Insert SimpleName: getBytes(1612) into MethodInvocation(1616) at 1", "Insert MethodInvocation(1615) into MethodInvocation(1616) at 2", "Insert InfixExpression: <<(1793) into ParenthesizedExpression(1794) at 0", "Insert SimpleName: ZipShort(1814) into MethodInvocation(1817) at 0", "Insert SimpleName: getBytes(1815) into MethodInvocation(1817) at 1", "Insert NumberLiteral: 20(1816) into MethodInvocation(1817) at 2", "Insert SimpleName: ZipShort(1821) into MethodInvocation(1824) at 0", "Insert SimpleName: getBytes(1822) into MethodInvocation(1824) at 1", "Insert NumberLiteral: 8(1823) into MethodInvocation(1824) at 2", "Insert SimpleName: ZipShort(1829) into MethodInvocation(1832) at 0", "Insert SimpleName: getBytes(1830) into MethodInvocation(1832) at 1", "Insert NumberLiteral: 10(1831) into MethodInvocation(1832) at 2", "Insert MethodInvocation(2253) into InfixExpression: <<(2255) at 0", "Insert NumberLiteral: 16(2254) into InfixExpression: <<(2255) at 1", "Insert MethodInvocation(2259) into InfixExpression: <<(2261) at 0", "Insert NumberLiteral: 11(2260) into InfixExpression: <<(2261) at 1", "Insert MethodInvocation(2265) into InfixExpression: <<(2267) at 0", "Insert NumberLiteral: 5(2266) into InfixExpression: <<(2267) at 1", "Insert MethodInvocation(2271) into InfixExpression: >>(2273) at 0", "Insert NumberLiteral: 1(2272) into InfixExpression: >>(2273) at 1", "Insert InfixExpression: *(2454) into InfixExpression: +(2456) at 0", "Insert NumberLiteral: 2(2455) into InfixExpression: +(2456) at 1", "Insert SimpleName: RandomAccessFile(453) into SimpleType: RandomAccessFile(454) at 0", "Insert Block(477) into TryStatement(484) at 0", "Insert CatchClause(483) into TryStatement(484) at 1", "Insert Assignment: =(487) into ExpressionStatement(488) at 0", "Insert SimpleType: FileOutputStream(493) into ClassInstanceCreation(495) at 0", "Insert SimpleName: file(494) into ClassInstanceCreation(495) at 1", "Insert SimpleName: ZipEntry(609) into SimpleType: ZipEntry(610) at 0", "Insert SimpleName: entries(611) into MethodInvocation(614) at 0", "Insert SimpleName: elementAt(612) into MethodInvocation(614) at 1", "Insert SimpleName: i(613) into MethodInvocation(614) at 2", "Insert SimpleName: entry(724) into MethodInvocation(726) at 0", "Insert SimpleName: getCrc(725) into MethodInvocation(726) at 1", "Insert ClassInstanceCreation(748) into ThrowStatement(749) at 0", "Insert SimpleName: entry(752) into MethodInvocation(754) at 0", "Insert SimpleName: getSize(753) into MethodInvocation(754) at 1", "Insert SimpleName: written(755) into InfixExpression: -(757) at 0", "Insert SimpleName: dataStart(756) into InfixExpression: -(757) at 1", "Insert ClassInstanceCreation(775) into ThrowStatement(776) at 0", "Insert SimpleName: written(782) into InfixExpression: -(784) at 0", "Insert SimpleName: dataStart(783) into InfixExpression: -(784) at 1", "Insert SimpleName: entry(832) into MethodInvocation(834) at 0", "Insert SimpleName: getCompressedSize(833) into MethodInvocation(834) at 1", "Move SimpleType: ZipException(966) into ClassInstanceCreation(945) at 0", "Insert InfixExpression: +(944) into ClassInstanceCreation(945) at 1", "Move SimpleType: ZipException(953) into ClassInstanceCreation(960) at 0", "Insert InfixExpression: +(959) into ClassInstanceCreation(960) at 1", "Insert MethodInvocation(1135) into PrefixExpression: !(1136) at 0", "Insert IfStatement(1213) into Block(1214) at 0", "Insert SimpleName: ze(1595) into MethodInvocation(1597) at 0", "Insert SimpleName: getCrc(1596) into MethodInvocation(1597) at 1", "Insert SimpleName: ze(1604) into MethodInvocation(1606) at 0", "Insert SimpleName: getSize(1605) into MethodInvocation(1606) at 1", "Insert SimpleName: ze(1613) into MethodInvocation(1615) at 0", "Insert SimpleName: getSize(1614) into MethodInvocation(1615) at 1", "Insert MethodInvocation(1791) into InfixExpression: <<(1793) at 0", "Insert NumberLiteral: 8(1792) into InfixExpression: <<(1793) at 1", "Insert SimpleName: time(2251) into MethodInvocation(2253) at 0", "Insert SimpleName: getDate(2252) into MethodInvocation(2253) at 1", "Insert SimpleName: time(2257) into MethodInvocation(2259) at 0", "Insert SimpleName: getHours(2258) into MethodInvocation(2259) at 1", "Insert SimpleName: time(2263) into MethodInvocation(2265) at 0", "Insert SimpleName: getMinutes(2264) into MethodInvocation(2265) at 1", "Insert SimpleName: time(2269) into MethodInvocation(2271) at 0", "Insert SimpleName: getSeconds(2270) into MethodInvocation(2271) at 1", "Update SimpleName: m_encoding(1098) to encoding", "Insert NumberLiteral: 2(2449) into InfixExpression: *(2454) at 0", "Insert ParenthesizedExpression(2453) into InfixExpression: *(2454) at 1", "Insert ExpressionStatement(476) into Block(477) at 0", "Insert SingleVariableDeclaration(481) into CatchClause(483) at 0", "Insert Block(482) into CatchClause(483) at 1", "Insert SimpleName: raf(485) into Assignment: =(487) at 0", "Insert NullLiteral(486) into Assignment: =(487) at 1", "Insert SimpleName: FileOutputStream(492) into SimpleType: FileOutputStream(493) at 0", "Move SimpleType: ZipException(734) into ClassInstanceCreation(748) at 0", "Insert InfixExpression: +(747) into ClassInstanceCreation(748) at 1", "Move SimpleType: ZipException(764) into ClassInstanceCreation(775) at 0", "Insert InfixExpression: +(774) into ClassInstanceCreation(775) at 1", "Insert StringLiteral: \"uncompressed size is required for\"(941) into InfixExpression: +(944) at 0", "Insert StringLiteral: \" STORED method when not writing to a\"(942) into InfixExpression: +(944) at 1", "Insert StringLiteral: \" file\"(943) into InfixExpression: +(944) at 2", "Insert StringLiteral: \"crc checksum is required for STORED\"(957) into InfixExpression: +(959) at 0", "Insert StringLiteral: \" method when not writing to a file\"(958) into InfixExpression: +(959) at 1", "Insert SimpleName: def(1133) into MethodInvocation(1135) at 0", "Insert SimpleName: finished(1134) into MethodInvocation(1135) at 1", "Insert InfixExpression: <=(1139) into IfStatement(1213) at 0", "Insert Block(1150) into IfStatement(1213) at 1", "Insert Block(1212) into IfStatement(1213) at 2", "Insert SimpleName: ze(1789) into MethodInvocation(1791) at 0", "Insert SimpleName: getPlatform(1790) into MethodInvocation(1791) at 1", "Insert CastExpression(2452) into ParenthesizedExpression(2453) at 0", "Insert MethodInvocation(475) into ExpressionStatement(476) at 0", "Insert SimpleType: IOException(479) into SingleVariableDeclaration(481) at 0", "Insert SimpleName: inner(480) into SingleVariableDeclaration(481) at 1", "Insert StringLiteral: \"bad CRC checksum for entry \"(731) into InfixExpression: +(747) at 0", "Move MethodInvocation(1851) into InfixExpression: +(747) at 1", "Insert StringLiteral: \": \"(735) into InfixExpression: +(747) at 2", "Insert MethodInvocation(741) into InfixExpression: +(747) at 3", "Insert StringLiteral: \" instead of \"(742) into InfixExpression: +(747) at 4", "Move MethodInvocation(750) into InfixExpression: +(747) at 5", "Insert StringLiteral: \"bad size for entry \"(761) into InfixExpression: +(774) at 0", "Move MethodInvocation(1398) into InfixExpression: +(774) at 1", "Insert StringLiteral: \": \"(765) into InfixExpression: +(774) at 2", "Insert MethodInvocation(768) into InfixExpression: +(774) at 3", "Insert StringLiteral: \" instead of \"(769) into InfixExpression: +(774) at 4", "Insert ParenthesizedExpression(773) into InfixExpression: +(774) at 5", "Insert SimpleName: length(1137) into InfixExpression: <=(1139) at 0", "Insert SimpleName: DEFLATER_BLOCK_SIZE(1138) into InfixExpression: <=(1139) at 1", "Insert ExpressionStatement(1146) into Block(1150) at 0", "Insert ExpressionStatement(1149) into Block(1150) at 1", "Insert VariableDeclarationStatement(1158) into Block(1212) at 0", "Insert ForStatement(1184) into Block(1212) at 1", "Insert VariableDeclarationStatement(1192) into Block(1212) at 2", "Insert IfStatement(1211) into Block(1212) at 3", "Insert PrimitiveType: long(2450) into CastExpression(2452) at 0", "Insert QualifiedName: Integer.MAX_VALUE(2451) into CastExpression(2452) at 1", "Insert SimpleName: raf(473) into MethodInvocation(475) at 0", "Insert SimpleName: close(474) into MethodInvocation(475) at 1", "Insert SimpleName: IOException(478) into SimpleType: IOException(479) at 0", "Insert SimpleName: Long(736) into MethodInvocation(741) at 0", "Insert SimpleName: toHexString(737) into MethodInvocation(741) at 1", "Insert MethodInvocation(740) into MethodInvocation(741) at 2", "Insert SimpleName: entry(766) into MethodInvocation(768) at 0", "Insert SimpleName: getSize(767) into MethodInvocation(768) at 1", "Insert InfixExpression: -(772) into ParenthesizedExpression(773) at 0", "Insert MethodInvocation(1145) into ExpressionStatement(1146) at 0", "Insert MethodInvocation(1148) into ExpressionStatement(1149) at 0", "Insert Modifier: final(1151) into VariableDeclarationStatement(1158) at 0", "Insert PrimitiveType: int(1152) into VariableDeclarationStatement(1158) at 1", "Insert VariableDeclarationFragment(1157) into VariableDeclarationStatement(1158) at 2", "Move VariableDeclarationExpression(831) into ForStatement(1184) at 0", "Insert InfixExpression: <(1166) into ForStatement(1184) at 1", "Move PostfixExpression: ++(836) into ForStatement(1184) at 2", "Insert Block(1183) into ForStatement(1184) at 3", "Insert Modifier: final(1185) into VariableDeclarationStatement(1192) at 0", "Insert PrimitiveType: int(1186) into VariableDeclarationStatement(1192) at 1", "Insert VariableDeclarationFragment(1191) into VariableDeclarationStatement(1192) at 2", "Insert InfixExpression: <(1195) into IfStatement(1211) at 0", "Insert Block(1210) into IfStatement(1211) at 1", "Insert SimpleName: entry(738) into MethodInvocation(740) at 0", "Insert SimpleName: getCrc(739) into MethodInvocation(740) at 1", "Insert SimpleName: written(770) into InfixExpression: -(772) at 0", "Insert SimpleName: dataStart(771) into InfixExpression: -(772) at 1", "Insert SimpleName: def(1140) into MethodInvocation(1145) at 0", "Insert SimpleName: setInput(1141) into MethodInvocation(1145) at 1", "Insert SimpleName: b(1142) into MethodInvocation(1145) at 2", "Insert SimpleName: offset(1143) into MethodInvocation(1145) at 3", "Insert SimpleName: length(1144) into MethodInvocation(1145) at 4", "Insert SimpleName: deflateUntilInputIsNeeded(1147) into MethodInvocation(1148) at 0", "Insert SimpleName: fullblocks(1153) into VariableDeclarationFragment(1157) at 0", "Insert InfixExpression: /(1156) into VariableDeclarationFragment(1157) at 1", "Insert SimpleName: i(1164) into InfixExpression: <(1166) at 0", "Insert SimpleName: fullblocks(1165) into InfixExpression: <(1166) at 1", "Insert ExpressionStatement(1179) into Block(1183) at 0", "Insert ExpressionStatement(1182) into Block(1183) at 1", "Insert SimpleName: done(1187) into VariableDeclarationFragment(1191) at 0", "Insert InfixExpression: *(1190) into VariableDeclarationFragment(1191) at 1", "Insert SimpleName: done(1193) into InfixExpression: <(1195) at 0", "Insert SimpleName: length(1194) into InfixExpression: <(1195) at 1", "Insert ExpressionStatement(1206) into Block(1210) at 0", "Insert ExpressionStatement(1209) into Block(1210) at 1", "Insert SimpleName: length(1154) into InfixExpression: /(1156) at 0", "Insert SimpleName: DEFLATER_BLOCK_SIZE(1155) into InfixExpression: /(1156) at 1", "Insert MethodInvocation(1178) into ExpressionStatement(1179) at 0", "Insert MethodInvocation(1181) into ExpressionStatement(1182) at 0", "Insert SimpleName: fullblocks(1188) into InfixExpression: *(1190) at 0", "Insert SimpleName: DEFLATER_BLOCK_SIZE(1189) into InfixExpression: *(1190) at 1", "Insert MethodInvocation(1205) into ExpressionStatement(1206) at 0", "Insert MethodInvocation(1208) into ExpressionStatement(1209) at 0", "Insert SimpleName: def(1169) into MethodInvocation(1178) at 0", "Insert SimpleName: setInput(1170) into MethodInvocation(1178) at 1", "Insert SimpleName: b(1171) into MethodInvocation(1178) at 2", "Insert InfixExpression: +(1176) into MethodInvocation(1178) at 3", "Insert SimpleName: DEFLATER_BLOCK_SIZE(1177) into MethodInvocation(1178) at 4", "Insert SimpleName: deflateUntilInputIsNeeded(1180) into MethodInvocation(1181) at 0", "Insert SimpleName: def(1196) into MethodInvocation(1205) at 0", "Insert SimpleName: setInput(1197) into MethodInvocation(1205) at 1", "Insert SimpleName: b(1198) into MethodInvocation(1205) at 2", "Insert InfixExpression: +(1201) into MethodInvocation(1205) at 3", "Insert InfixExpression: -(1204) into MethodInvocation(1205) at 4", "Insert SimpleName: deflateUntilInputIsNeeded(1207) into MethodInvocation(1208) at 0", "Insert SimpleName: offset(1172) into InfixExpression: +(1176) at 0", "Insert InfixExpression: *(1175) into InfixExpression: +(1176) at 1", "Insert SimpleName: offset(1199) into InfixExpression: +(1201) at 0", "Insert SimpleName: done(1200) into InfixExpression: +(1201) at 1", "Insert SimpleName: length(1202) into InfixExpression: -(1204) at 0", "Insert SimpleName: done(1203) into InfixExpression: -(1204) at 1", "Insert SimpleName: i(1173) into InfixExpression: *(1175) at 0", "Insert SimpleName: DEFLATER_BLOCK_SIZE(1174) into InfixExpression: *(1175) at 1", "Delete QualifiedName: java.util.ArrayList(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Calendar(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.zip.DeflaterOutputStream(20)", "Delete ImportDeclaration(21)", "Delete Modifier: final(248)", "Delete Modifier: final(313)", "Delete SimpleName: setSize(699)", "Delete SimpleName: setComprSize(706)", "Delete TextElement: Reimplementation of (24)", "Delete TextElement:  that does handle the extended functionality of(28)", "Delete TextElement: this package, especially internal/external file attributes and extra fields(29)", "Delete TextElement: with different layouts for local file data and central directory entries. <p>(30)", "Delete TextElement: This implementation will use a Data Descriptor to store size and CRC(31)", "Delete TextElement: information for DEFLATED entries, this means, you don't need to calculate(32)", "Delete TextElement: them yourself. Unfortunately this is not possible for the STORED method, here(33)", "Delete TextElement: setting the CRC and uncompressed size information is required before (34)", "Delete TextElement:  will be called.</p>(39)", "Delete TagElement(40)", "Delete Javadoc(41)", "Delete Modifier: public(42)", "Delete SimpleName: ZipOutputStream(43)", "Delete SimpleName: DeflaterOutputStream(44)", "Delete SimpleType: DeflaterOutputStream(45)", "Delete TextElement: Compression method for deflated entries.(82)", "Delete TagElement(83)", "Delete TextElement:  1.1(84)", "Delete TagElement: @since(85)", "Delete Javadoc(86)", "Delete Modifier: public(87)", "Delete Modifier: static(88)", "Delete Modifier: final(89)", "Delete PrimitiveType: int(90)", "Delete SimpleName: DEFLATED(91)", "Delete QualifiedName: ZipEntry.DEFLATED(92)", "Delete VariableDeclarationFragment(93)", "Delete FieldDeclaration(94)", "Delete Modifier: public(100)", "Delete Modifier: static(101)", "Delete Modifier: final(102)", "Delete PrimitiveType: int(103)", "Delete SimpleName: STORED(104)", "Delete QualifiedName: ZipEntry.STORED(105)", "Delete VariableDeclarationFragment(106)", "Delete FieldDeclaration(107)", "Delete Modifier: protected(113)", "Delete Modifier: static(114)", "Delete Modifier: final(115)", "Delete SimpleName: ZipLong(116)", "Delete SimpleType: ZipLong(117)", "Delete SimpleName: LFH_SIG(118)", "Delete SimpleName: ZipLong(119)", "Delete SimpleType: ZipLong(120)", "Delete NumberLiteral: 0X04034B50L(121)", "Delete ClassInstanceCreation(122)", "Delete VariableDeclarationFragment(123)", "Delete FieldDeclaration(124)", "Delete Modifier: protected(130)", "Delete Modifier: static(131)", "Delete Modifier: final(132)", "Delete SimpleName: ZipLong(133)", "Delete SimpleType: ZipLong(134)", "Delete SimpleName: DD_SIG(135)", "Delete SimpleName: ZipLong(136)", "Delete SimpleType: ZipLong(137)", "Delete NumberLiteral: 0X08074B50L(138)", "Delete ClassInstanceCreation(139)", "Delete VariableDeclarationFragment(140)", "Delete FieldDeclaration(141)", "Delete Modifier: protected(147)", "Delete Modifier: static(148)", "Delete Modifier: final(149)", "Delete SimpleName: ZipLong(150)", "Delete SimpleType: ZipLong(151)", "Delete SimpleName: CFH_SIG(152)", "Delete SimpleName: ZipLong(153)", "Delete SimpleType: ZipLong(154)", "Delete NumberLiteral: 0X02014B50L(155)", "Delete ClassInstanceCreation(156)", "Delete VariableDeclarationFragment(157)", "Delete FieldDeclaration(158)", "Delete Modifier: protected(164)", "Delete Modifier: static(165)", "Delete Modifier: final(166)", "Delete SimpleName: ZipLong(167)", "Delete SimpleType: ZipLong(168)", "Delete SimpleName: EOCD_SIG(169)", "Delete SimpleName: ZipLong(170)", "Delete SimpleType: ZipLong(171)", "Delete NumberLiteral: 0X06054B50L(172)", "Delete ClassInstanceCreation(173)", "Delete VariableDeclarationFragment(174)", "Delete FieldDeclaration(175)", "Delete Modifier: private(181)", "Delete Modifier: static(182)", "Delete Modifier: final(183)", "Delete SimpleName: ZipLong(184)", "Delete SimpleType: ZipLong(185)", "Delete SimpleName: DOS_TIME_MIN(186)", "Delete SimpleName: ZipLong(187)", "Delete SimpleType: ZipLong(188)", "Delete NumberLiteral: 0x00002100L(189)", "Delete ClassInstanceCreation(190)", "Delete VariableDeclarationFragment(191)", "Delete FieldDeclaration(192)", "Delete Modifier: private(198)", "Delete SimpleName: m_comment(201)", "Delete StringLiteral: \"\"(202)", "Delete VariableDeclarationFragment(203)", "Delete FieldDeclaration(204)", "Delete Modifier: private(210)", "Delete PrimitiveType: int(211)", "Delete SimpleName: m_level(212)", "Delete QualifiedName: Deflater.DEFAULT_COMPRESSION(213)", "Delete VariableDeclarationFragment(214)", "Delete FieldDeclaration(215)", "Delete Modifier: private(221)", "Delete PrimitiveType: int(222)", "Delete SimpleName: m_method(223)", "Delete SimpleName: DEFLATED(224)", "Delete VariableDeclarationFragment(225)", "Delete FieldDeclaration(226)", "Delete Modifier: private(232)", "Delete Modifier: final(233)", "Delete SimpleName: ArrayList(234)", "Delete SimpleType: ArrayList(235)", "Delete SimpleName: m_entries(236)", "Delete SimpleName: ArrayList(237)", "Delete SimpleType: ArrayList(238)", "Delete ClassInstanceCreation(239)", "Delete VariableDeclarationFragment(240)", "Delete FieldDeclaration(241)", "Delete Modifier: private(262)", "Delete PrimitiveType: long(263)", "Delete SimpleName: m_written(264)", "Delete VariableDeclarationFragment(265)", "Delete FieldDeclaration(266)", "Delete TextElement: Data for current entry started here.(267)", "Delete TagElement(268)", "Delete Javadoc(271)", "Delete Modifier: private(272)", "Delete PrimitiveType: long(273)", "Delete SimpleName: m_dataStart(274)", "Delete VariableDeclarationFragment(275)", "Delete FieldDeclaration(276)", "Delete Modifier: private(282)", "Delete SimpleName: ZipLong(283)", "Delete SimpleType: ZipLong(284)", "Delete SimpleName: m_cdOffset(285)", "Delete SimpleName: ZipLong(286)", "Delete SimpleType: ZipLong(287)", "Delete NumberLiteral: 0(288)", "Delete ClassInstanceCreation(289)", "Delete VariableDeclarationFragment(290)", "Delete FieldDeclaration(291)", "Delete Modifier: private(297)", "Delete SimpleName: ZipLong(298)", "Delete SimpleType: ZipLong(299)", "Delete SimpleName: m_cdLength(300)", "Delete SimpleName: ZipLong(301)", "Delete SimpleType: ZipLong(302)", "Delete NumberLiteral: 0(303)", "Delete ClassInstanceCreation(304)", "Delete VariableDeclarationFragment(305)", "Delete FieldDeclaration(306)", "Delete TextElement: The encoding to use for filenames and the file comment. <p>(322)", "Delete TextElement: For a list of possible values see <a(323)", "Delete TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">(324)", "Delete TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html(325)", "Delete TextElement: </a>. Defaults to the platform's default character encoding.</p>(326)", "Delete TagElement(327)", "Delete Javadoc(330)", "Delete Modifier: private(331)", "Delete SimpleName: m_encoding(334)", "Delete VariableDeclarationFragment(335)", "Delete FieldDeclaration(336)", "Delete Modifier: private(342)", "Delete SimpleName: ZipArchiveEntry(343)", "Delete SimpleType: ZipArchiveEntry(344)", "Delete SimpleName: m_entry(345)", "Delete VariableDeclarationFragment(346)", "Delete FieldDeclaration(347)", "Delete SimpleName: output(350)", "Delete TextElement:  the output stream to write to(351)", "Delete TagElement: @param(352)", "Delete Javadoc(355)", "Delete Modifier: public(356)", "Delete SimpleName: ZipOutputStream(357)", "Delete Modifier: final(358)", "Delete SimpleName: output(361)", "Delete SingleVariableDeclaration(362)", "Delete SimpleName: output(363)", "Delete QualifiedName: Deflater.DEFAULT_COMPRESSION(366)", "Delete BooleanLiteral: true(367)", "Delete ClassInstanceCreation(368)", "Delete SuperConstructorInvocation(369)", "Delete Block(370)", "Delete MethodDeclaration(371)", "Delete TextElement: Convert a Date object to a DOS date/time field. <p>(372)", "Delete TextElement: Stolen from InfoZip's <code>fileio.c</code></p>(373)", "Delete TagElement(374)", "Delete SimpleName: time(375)", "Delete TextElement:  Description of Parameter(376)", "Delete TagElement: @param(377)", "Delete TextElement:  Description of the Returned Value(378)", "Delete TagElement: @return(379)", "Delete Javadoc(382)", "Delete Modifier: protected(383)", "Delete Modifier: static(384)", "Delete SimpleName: toDosTime(387)", "Delete SimpleName: Calendar(392)", "Delete SimpleType: Calendar(393)", "Delete SimpleName: cal(394)", "Delete SimpleName: Calendar(395)", "Delete SimpleName: getInstance(396)", "Delete MethodInvocation(397)", "Delete VariableDeclarationFragment(398)", "Delete VariableDeclarationStatement(399)", "Delete SimpleName: cal(400)", "Delete SimpleName: setTime(401)", "Delete SimpleName: time(402)", "Delete MethodInvocation(403)", "Delete ExpressionStatement(404)", "Delete PrimitiveType: int(405)", "Delete SimpleName: year(406)", "Delete SimpleName: cal(407)", "Delete SimpleName: get(408)", "Delete QualifiedName: Calendar.YEAR(409)", "Delete MethodInvocation(410)", "Delete VariableDeclarationFragment(411)", "Delete VariableDeclarationStatement(412)", "Delete PrimitiveType: int(413)", "Delete SimpleName: month(414)", "Delete SimpleName: cal(415)", "Delete SimpleName: get(416)", "Delete QualifiedName: Calendar.MONTH(417)", "Delete MethodInvocation(418)", "Delete NumberLiteral: 1(419)", "Delete InfixExpression: +(420)", "Delete VariableDeclarationFragment(421)", "Delete VariableDeclarationStatement(422)", "Delete PrimitiveType: long(430)", "Delete SimpleName: value(431)", "Delete SimpleName: cal(443)", "Delete SimpleName: get(444)", "Delete QualifiedName: Calendar.DAY_OF_MONTH(445)", "Delete MethodInvocation(446)", "Delete NumberLiteral: 16(447)", "Delete InfixExpression: <<(448)", "Delete ParenthesizedExpression(449)", "Delete SimpleName: cal(450)", "Delete SimpleName: get(451)", "Delete QualifiedName: Calendar.HOUR_OF_DAY(452)", "Delete MethodInvocation(453)", "Delete NumberLiteral: 11(454)", "Delete InfixExpression: <<(455)", "Delete ParenthesizedExpression(456)", "Delete SimpleName: cal(457)", "Delete SimpleName: get(458)", "Delete QualifiedName: Calendar.MINUTE(459)", "Delete MethodInvocation(460)", "Delete NumberLiteral: 5(461)", "Delete InfixExpression: <<(462)", "Delete ParenthesizedExpression(463)", "Delete SimpleName: cal(464)", "Delete SimpleName: get(465)", "Delete QualifiedName: Calendar.SECOND(466)", "Delete MethodInvocation(467)", "Delete NumberLiteral: 1(468)", "Delete InfixExpression: >>(469)", "Delete ParenthesizedExpression(470)", "Delete InfixExpression: |(471)", "Delete VariableDeclarationFragment(472)", "Delete VariableDeclarationStatement(473)", "Delete SimpleName: result(477)", "Delete NumberLiteral: 4(481)", "Delete ArrayCreation(482)", "Delete VariableDeclarationFragment(483)", "Delete VariableDeclarationStatement(484)", "Delete SimpleName: result(485)", "Delete NumberLiteral: 0(486)", "Delete ArrayAccess(487)", "Delete PrimitiveType: byte(488)", "Delete SimpleName: value(489)", "Delete NumberLiteral: 0xFF(490)", "Delete InfixExpression: &(491)", "Delete ParenthesizedExpression(492)", "Delete ParenthesizedExpression(493)", "Delete CastExpression(494)", "Delete Assignment: =(495)", "Delete ExpressionStatement(496)", "Delete SimpleName: result(497)", "Delete NumberLiteral: 1(498)", "Delete ArrayAccess(499)", "Delete PrimitiveType: byte(500)", "Delete SimpleName: value(501)", "Delete NumberLiteral: 0xFF00(502)", "Delete InfixExpression: &(503)", "Delete ParenthesizedExpression(504)", "Delete NumberLiteral: 8(505)", "Delete InfixExpression: >>(506)", "Delete ParenthesizedExpression(507)", "Delete CastExpression(508)", "Delete Assignment: =(509)", "Delete ExpressionStatement(510)", "Delete SimpleName: result(511)", "Delete NumberLiteral: 2(512)", "Delete ArrayAccess(513)", "Delete PrimitiveType: byte(514)", "Delete SimpleName: value(515)", "Delete NumberLiteral: 0xFF0000(516)", "Delete InfixExpression: &(517)", "Delete ParenthesizedExpression(518)", "Delete NumberLiteral: 16(519)", "Delete InfixExpression: >>(520)", "Delete ParenthesizedExpression(521)", "Delete CastExpression(522)", "Delete Assignment: =(523)", "Delete ExpressionStatement(524)", "Delete SimpleName: result(525)", "Delete NumberLiteral: 3(526)", "Delete ArrayAccess(527)", "Delete PrimitiveType: byte(528)", "Delete SimpleName: value(529)", "Delete NumberLiteral: 0xFF000000l(530)", "Delete InfixExpression: &(531)", "Delete ParenthesizedExpression(532)", "Delete NumberLiteral: 24(533)", "Delete InfixExpression: >>(534)", "Delete ParenthesizedExpression(535)", "Delete CastExpression(536)", "Delete Assignment: =(537)", "Delete ExpressionStatement(538)", "Delete SimpleName: ZipLong(539)", "Delete SimpleType: ZipLong(540)", "Delete SimpleName: result(541)", "Delete ClassInstanceCreation(542)", "Delete ReturnStatement(543)", "Delete Block(544)", "Delete MethodDeclaration(545)", "Delete SimpleName: comment(548)", "Delete TextElement:  The new Comment value(549)", "Delete TagElement: @param(550)", "Delete Javadoc(553)", "Delete Modifier: public(554)", "Delete PrimitiveType: void(555)", "Delete SimpleName: setComment(556)", "Delete SimpleName: m_comment(561)", "Delete SimpleName: comment(562)", "Delete Assignment: =(563)", "Delete ExpressionStatement(564)", "Delete Block(565)", "Delete MethodDeclaration(566)", "Delete TextElement: The encoding to use for filenames and the file comment. <p>(567)", "Delete TextElement: For a list of possible values see <a(568)", "Delete TextElement: href=\"http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html\">(569)", "Delete TextElement: http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html(570)", "Delete TextElement: </a>. Defaults to the platform's default character encoding.</p>(571)", "Delete TagElement(572)", "Delete SimpleName: encoding(573)", "Delete TextElement:  The new Encoding value(574)", "Delete TagElement: @param(575)", "Delete Javadoc(578)", "Delete Modifier: public(579)", "Delete PrimitiveType: void(580)", "Delete SimpleName: setEncoding(581)", "Delete SimpleName: m_encoding(586)", "Delete SimpleName: encoding(587)", "Delete Assignment: =(588)", "Delete ExpressionStatement(589)", "Delete Block(590)", "Delete MethodDeclaration(591)", "Delete TextElement: Sets the compression level for subsequent entries. <p>(592)", "Delete TextElement: Default is Deflater.DEFAULT_COMPRESSION.</p>(593)", "Delete TagElement(594)", "Delete SimpleName: level(595)", "Delete TextElement:  The new Level value(596)", "Delete TagElement: @param(597)", "Delete Javadoc(600)", "Delete Modifier: public(601)", "Delete PrimitiveType: void(602)", "Delete SimpleName: setLevel(603)", "Delete SimpleName: m_level(607)", "Delete SimpleName: level(608)", "Delete Assignment: =(609)", "Delete ExpressionStatement(610)", "Delete Block(611)", "Delete MethodDeclaration(612)", "Delete TextElement: Sets the default compression method for subsequent entries. <p>(613)", "Delete TextElement: Default is DEFLATED.</p>(614)", "Delete TagElement(615)", "Delete SimpleName: method(616)", "Delete TextElement:  The new Method value(617)", "Delete TagElement: @param(618)", "Delete Javadoc(621)", "Delete Modifier: public(622)", "Delete PrimitiveType: void(623)", "Delete SimpleName: setMethod(624)", "Delete Modifier: final(625)", "Delete PrimitiveType: int(626)", "Delete SimpleName: method(627)", "Delete SingleVariableDeclaration(628)", "Delete SimpleName: m_method(629)", "Delete SimpleName: method(630)", "Delete Assignment: =(631)", "Delete ExpressionStatement(632)", "Delete Block(633)", "Delete MethodDeclaration(634)", "Delete Modifier: public(642)", "Delete SimpleName: getEncoding(645)", "Delete SimpleName: m_encoding(646)", "Delete ReturnStatement(647)", "Delete Block(648)", "Delete MethodDeclaration(649)", "Delete SimpleName: IOException(652)", "Delete TextElement:  if an IO failure causes operation to fail(653)", "Delete TagElement: @throws(654)", "Delete Javadoc(657)", "Delete Modifier: public(658)", "Delete PrimitiveType: void(659)", "Delete SimpleName: closeEntry(660)", "Delete SimpleName: m_entry(663)", "Delete NullLiteral(664)", "Delete InfixExpression: ==(665)", "Delete IfStatement(668)", "Delete PrimitiveType: long(669)", "Delete SimpleName: realCrc(670)", "Delete SimpleName: m_crc(671)", "Delete SimpleName: getValue(672)", "Delete MethodInvocation(673)", "Delete VariableDeclarationFragment(674)", "Delete VariableDeclarationStatement(675)", "Delete SimpleName: m_crc(676)", "Delete SimpleName: reset(677)", "Delete MethodInvocation(678)", "Delete ExpressionStatement(679)", "Delete SimpleName: m_entry(680)", "Delete SimpleName: getMethod(681)", "Delete MethodInvocation(682)", "Delete SimpleName: DEFLATED(683)", "Delete InfixExpression: ==(684)", "Delete SimpleName: m_entry(712)", "Delete SimpleName: setCrc(713)", "Delete SimpleName: realCrc(714)", "Delete MethodInvocation(715)", "Delete ExpressionStatement(716)", "Delete SimpleName: m_written(721)", "Delete SimpleName: m_entry(722)", "Delete SimpleName: getCompressedSize(723)", "Delete MethodInvocation(724)", "Delete Assignment: +=(725)", "Delete ExpressionStatement(726)", "Delete Block(727)", "Delete SimpleName: m_entry(728)", "Delete SimpleName: getCrc(729)", "Delete MethodInvocation(730)", "Delete SimpleName: realCrc(731)", "Delete InfixExpression: !=(732)", "Delete StringLiteral: \"bad CRC checksum for entry \"(735)", "Delete SimpleName: m_entry(736)", "Delete SimpleName: getName(737)", "Delete MethodInvocation(738)", "Delete StringLiteral: \": \"(739)", "Delete SimpleName: Long(740)", "Delete SimpleName: toHexString(741)", "Delete SimpleName: m_entry(742)", "Delete SimpleName: getCrc(743)", "Delete MethodInvocation(744)", "Delete MethodInvocation(745)", "Delete StringLiteral: \" instead of \"(746)", "Delete InfixExpression: +(751)", "Delete ClassInstanceCreation(752)", "Delete ThrowStatement(753)", "Delete Block(754)", "Delete IfStatement(755)", "Delete SimpleName: m_entry(756)", "Delete SimpleName: getSize(757)", "Delete MethodInvocation(758)", "Delete SimpleName: m_written(759)", "Delete SimpleName: m_dataStart(760)", "Delete InfixExpression: -(761)", "Delete InfixExpression: !=(762)", "Delete StringLiteral: \"bad size for entry \"(765)", "Delete SimpleName: m_entry(766)", "Delete SimpleName: getName(767)", "Delete MethodInvocation(768)", "Delete StringLiteral: \": \"(769)", "Delete SimpleName: m_entry(770)", "Delete SimpleName: getSize(771)", "Delete MethodInvocation(772)", "Delete StringLiteral: \" instead of \"(773)", "Delete SimpleName: m_written(774)", "Delete SimpleName: m_dataStart(775)", "Delete InfixExpression: -(776)", "Delete ParenthesizedExpression(777)", "Delete InfixExpression: +(778)", "Delete ClassInstanceCreation(779)", "Delete ThrowStatement(780)", "Delete Block(781)", "Delete IfStatement(782)", "Delete Block(783)", "Delete IfStatement(784)", "Delete SimpleName: writeDataDescriptor(785)", "Delete SimpleName: m_entry(786)", "Delete MethodInvocation(787)", "Delete ExpressionStatement(788)", "Delete SimpleName: m_entry(789)", "Delete NullLiteral(790)", "Delete Assignment: =(791)", "Delete ExpressionStatement(792)", "Delete Block(793)", "Delete MethodDeclaration(794)", "Delete TextElement: Finishs writing the contents and closes this as well as the underlying(795)", "Delete TextElement: stream.(796)", "Delete TagElement(797)", "Delete SimpleName: IOException(798)", "Delete TextElement:  if an IO failure causes operation to fail(799)", "Delete TagElement: @throws(800)", "Delete Javadoc(803)", "Delete Modifier: public(804)", "Delete PrimitiveType: void(805)", "Delete SimpleName: finish(806)", "Delete SimpleName: m_cdOffset(812)", "Delete SimpleName: ZipLong(813)", "Delete SimpleType: ZipLong(814)", "Delete SimpleName: m_written(815)", "Delete ClassInstanceCreation(816)", "Delete Assignment: =(817)", "Delete ExpressionStatement(818)", "Delete Modifier: final(819)", "Delete PrimitiveType: int(820)", "Delete SimpleName: size(821)", "Delete SimpleName: m_entries(822)", "Delete SimpleName: size(823)", "Delete MethodInvocation(824)", "Delete VariableDeclarationFragment(825)", "Delete VariableDeclarationStatement(826)", "Delete SimpleName: i(832)", "Delete SimpleName: size(833)", "Delete InfixExpression: <(834)", "Delete Modifier: final(837)", "Delete SimpleName: ZipArchiveEntry(838)", "Delete SimpleType: ZipArchiveEntry(839)", "Delete SimpleName: entry(840)", "Delete SimpleName: ZipArchiveEntry(841)", "Delete SimpleType: ZipArchiveEntry(842)", "Delete SimpleName: m_entries(843)", "Delete SimpleName: get(844)", "Delete SimpleName: i(845)", "Delete MethodInvocation(846)", "Delete CastExpression(847)", "Delete VariableDeclarationFragment(848)", "Delete VariableDeclarationStatement(849)", "Delete SimpleName: writeCentralFileHeader(850)", "Delete SimpleName: entry(851)", "Delete MethodInvocation(852)", "Delete ExpressionStatement(853)", "Delete Block(854)", "Delete ForStatement(855)", "Delete SimpleName: m_cdLength(856)", "Delete SimpleName: ZipLong(857)", "Delete SimpleType: ZipLong(858)", "Delete SimpleName: m_written(859)", "Delete SimpleName: m_cdOffset(860)", "Delete SimpleName: getValue(861)", "Delete MethodInvocation(862)", "Delete InfixExpression: -(863)", "Delete ClassInstanceCreation(864)", "Delete Assignment: =(865)", "Delete ExpressionStatement(866)", "Delete SimpleName: m_offsets(870)", "Delete SimpleName: clear(871)", "Delete MethodInvocation(872)", "Delete ExpressionStatement(873)", "Delete SimpleName: m_entries(874)", "Delete SimpleName: clear(875)", "Delete MethodInvocation(876)", "Delete ExpressionStatement(877)", "Delete Block(878)", "Delete MethodDeclaration(879)", "Delete SimpleName: entry(882)", "Delete TextElement:  the entry(883)", "Delete TagElement: @param(884)", "Delete SimpleName: IOException(885)", "Delete TextElement:  if an IO failure causes operation to fail(886)", "Delete TagElement: @throws(887)", "Delete Javadoc(890)", "Delete Modifier: public(891)", "Delete PrimitiveType: void(892)", "Delete SimpleName: putNextEntry(893)", "Delete Modifier: final(894)", "Delete SimpleName: ZipArchiveEntry(895)", "Delete SimpleType: ZipArchiveEntry(896)", "Delete SimpleName: entry(897)", "Delete SingleVariableDeclaration(898)", "Delete SimpleName: m_entry(904)", "Delete SimpleName: entry(905)", "Delete Assignment: =(906)", "Delete ExpressionStatement(907)", "Delete SimpleName: m_entries(908)", "Delete SimpleName: add(909)", "Delete SimpleName: m_entry(910)", "Delete MethodInvocation(911)", "Delete ExpressionStatement(912)", "Delete SimpleName: m_entry(913)", "Delete SimpleName: getMethod(914)", "Delete MethodInvocation(915)", "Delete InfixExpression: ==(918)", "Delete SimpleName: m_entry(919)", "Delete SimpleName: setMethod(920)", "Delete SimpleName: m_method(921)", "Delete MethodInvocation(922)", "Delete ExpressionStatement(923)", "Delete Block(924)", "Delete IfStatement(925)", "Delete SimpleName: m_entry(926)", "Delete SimpleName: getTime(927)", "Delete MethodInvocation(928)", "Delete InfixExpression: ==(931)", "Delete SimpleName: m_entry(932)", "Delete SimpleName: setTime(933)", "Delete MethodInvocation(937)", "Delete ExpressionStatement(938)", "Delete Block(939)", "Delete IfStatement(940)", "Delete SimpleName: m_entry(941)", "Delete SimpleName: getMethod(942)", "Delete MethodInvocation(943)", "Delete SimpleName: STORED(944)", "Delete InfixExpression: ==(945)", "Delete SimpleName: m_entry(946)", "Delete SimpleName: getSize(947)", "Delete MethodInvocation(948)", "Delete InfixExpression: ==(951)", "Delete StringLiteral: \"uncompressed size is required for STORED method\"(954)", "Delete ClassInstanceCreation(955)", "Delete ThrowStatement(956)", "Delete Block(957)", "Delete IfStatement(958)", "Delete SimpleName: m_entry(959)", "Delete SimpleName: getCrc(960)", "Delete MethodInvocation(961)", "Delete InfixExpression: ==(964)", "Delete StringLiteral: \"crc checksum is required for STORED method\"(967)", "Delete ClassInstanceCreation(968)", "Delete ThrowStatement(969)", "Delete Block(970)", "Delete IfStatement(971)", "Delete SimpleName: m_entry(972)", "Delete SimpleName: setComprSize(973)", "Delete SimpleName: m_entry(974)", "Delete SimpleName: getSize(975)", "Delete MethodInvocation(976)", "Delete MethodInvocation(977)", "Delete ExpressionStatement(978)", "Delete Block(979)", "Delete SimpleName: def(980)", "Delete SimpleName: setLevel(981)", "Delete SimpleName: m_level(982)", "Delete MethodInvocation(983)", "Delete ExpressionStatement(984)", "Delete Block(985)", "Delete IfStatement(986)", "Delete SimpleName: writeLocalFileHeader(987)", "Delete SimpleName: m_entry(988)", "Delete MethodInvocation(989)", "Delete ExpressionStatement(990)", "Delete Block(991)", "Delete MethodDeclaration(992)", "Delete TextElement: Writes bytes to ZIP entry. <p>(993)", "Delete TextElement: Override is necessary to support STORED entries, as well as calculationg(994)", "Delete TextElement: CRC automatically for DEFLATED entries.</p>(995)", "Delete TagElement(996)", "Delete SimpleName: buffer(997)", "Delete TextElement:  the buffer to write to(998)", "Delete TagElement: @param(999)", "Delete SimpleName: offset(1000)", "Delete TextElement:  the offset to write to(1001)", "Delete TagElement: @param(1002)", "Delete SimpleName: length(1003)", "Delete TextElement:  the length of data to write(1004)", "Delete TagElement: @param(1005)", "Delete SimpleName: IOException(1006)", "Delete TextElement:  if an IO error causes operation to fail(1007)", "Delete TagElement: @exception(1008)", "Delete Javadoc(1009)", "Delete Modifier: public(1010)", "Delete PrimitiveType: void(1011)", "Delete SimpleName: write(1012)", "Delete Modifier: final(1013)", "Delete SimpleName: buffer(1017)", "Delete SingleVariableDeclaration(1018)", "Delete Modifier: final(1019)", "Delete PrimitiveType: int(1020)", "Delete SimpleName: offset(1021)", "Delete SingleVariableDeclaration(1022)", "Delete Modifier: final(1023)", "Delete PrimitiveType: int(1024)", "Delete SimpleName: length(1025)", "Delete SingleVariableDeclaration(1026)", "Delete SimpleName: m_entry(1029)", "Delete SimpleName: getMethod(1030)", "Delete MethodInvocation(1031)", "Delete SimpleName: DEFLATED(1032)", "Delete InfixExpression: ==(1033)", "Delete SimpleName: write(1034)", "Delete SimpleName: buffer(1035)", "Delete SimpleName: offset(1036)", "Delete SimpleName: length(1037)", "Delete SuperMethodInvocation(1038)", "Delete ExpressionStatement(1039)", "Delete Block(1040)", "Delete SimpleName: out(1041)", "Delete SimpleName: write(1042)", "Delete SimpleName: buffer(1043)", "Delete SimpleName: offset(1044)", "Delete SimpleName: length(1045)", "Delete MethodInvocation(1046)", "Delete ExpressionStatement(1047)", "Delete SimpleName: m_written(1048)", "Delete SimpleName: length(1049)", "Delete Assignment: +=(1050)", "Delete ExpressionStatement(1051)", "Delete Block(1052)", "Delete IfStatement(1053)", "Delete SimpleName: m_crc(1054)", "Delete SimpleName: update(1055)", "Delete SimpleName: buffer(1056)", "Delete SimpleName: offset(1057)", "Delete SimpleName: length(1058)", "Delete MethodInvocation(1059)", "Delete ExpressionStatement(1060)", "Delete Block(1061)", "Delete MethodDeclaration(1062)", "Delete TextElement: Writes the &quot;End of central dir record&quot;(1120)", "Delete TagElement(1121)", "Delete SimpleName: IOException(1122)", "Delete TextElement:  when an IO erro causes operation to fail(1123)", "Delete TagElement: @exception(1124)", "Delete Javadoc(1127)", "Delete Modifier: protected(1128)", "Delete PrimitiveType: void(1129)", "Delete SimpleName: writeCentralDirectoryEnd(1130)", "Delete SimpleName: out(1133)", "Delete SimpleName: write(1134)", "Delete SimpleName: EOCD_SIG(1135)", "Delete SimpleName: getBytes(1136)", "Delete MethodInvocation(1137)", "Delete MethodInvocation(1138)", "Delete ExpressionStatement(1139)", "Delete SimpleName: out(1140)", "Delete SimpleName: write(1141)", "Delete SimpleName: ZERO(1142)", "Delete MethodInvocation(1143)", "Delete ExpressionStatement(1144)", "Delete SimpleName: out(1145)", "Delete SimpleName: write(1146)", "Delete SimpleName: ZERO(1147)", "Delete MethodInvocation(1148)", "Delete ExpressionStatement(1149)", "Delete SimpleName: num(1153)", "Delete SimpleName: ZipShort(1154)", "Delete SimpleType: ZipShort(1155)", "Delete SimpleName: m_entries(1156)", "Delete SimpleName: size(1157)", "Delete MethodInvocation(1158)", "Delete ClassInstanceCreation(1159)", "Delete ParenthesizedExpression(1160)", "Delete SimpleName: getBytes(1161)", "Delete MethodInvocation(1162)", "Delete VariableDeclarationFragment(1163)", "Delete VariableDeclarationStatement(1164)", "Delete SimpleName: out(1165)", "Delete SimpleName: write(1166)", "Delete SimpleName: num(1167)", "Delete MethodInvocation(1168)", "Delete ExpressionStatement(1169)", "Delete SimpleName: out(1170)", "Delete SimpleName: write(1171)", "Delete SimpleName: num(1172)", "Delete MethodInvocation(1173)", "Delete ExpressionStatement(1174)", "Delete SimpleName: out(1175)", "Delete SimpleName: write(1176)", "Delete SimpleName: m_cdLength(1177)", "Delete SimpleName: getBytes(1178)", "Delete MethodInvocation(1179)", "Delete MethodInvocation(1180)", "Delete ExpressionStatement(1181)", "Delete SimpleName: out(1182)", "Delete SimpleName: write(1183)", "Delete SimpleName: m_cdOffset(1184)", "Delete SimpleName: getBytes(1185)", "Delete MethodInvocation(1186)", "Delete MethodInvocation(1187)", "Delete ExpressionStatement(1188)", "Delete SimpleName: data(1192)", "Delete SimpleName: getBytes(1193)", "Delete SimpleName: m_comment(1194)", "Delete MethodInvocation(1195)", "Delete VariableDeclarationFragment(1196)", "Delete VariableDeclarationStatement(1197)", "Delete SimpleName: out(1198)", "Delete SimpleName: write(1199)", "Delete SimpleName: ZipShort(1200)", "Delete SimpleType: ZipShort(1201)", "Delete QualifiedName: data.length(1202)", "Delete ClassInstanceCreation(1203)", "Delete ParenthesizedExpression(1204)", "Delete SimpleName: getBytes(1205)", "Delete MethodInvocation(1206)", "Delete MethodInvocation(1207)", "Delete ExpressionStatement(1208)", "Delete SimpleName: out(1209)", "Delete SimpleName: write(1210)", "Delete SimpleName: data(1211)", "Delete MethodInvocation(1212)", "Delete ExpressionStatement(1213)", "Delete Block(1214)", "Delete MethodDeclaration(1215)", "Delete TextElement: Writes the central file header entry(1216)", "Delete TagElement(1217)", "Delete SimpleName: entry(1218)", "Delete TextElement:  the zip entry(1219)", "Delete TagElement: @param(1220)", "Delete SimpleName: IOException(1221)", "Delete TextElement:  when an IO error causes operation to fail(1222)", "Delete TagElement: @throws(1223)", "Delete Javadoc(1226)", "Delete Modifier: protected(1227)", "Delete PrimitiveType: void(1228)", "Delete SimpleName: writeCentralFileHeader(1229)", "Delete Modifier: final(1230)", "Delete SimpleName: ZipArchiveEntry(1231)", "Delete SimpleType: ZipArchiveEntry(1232)", "Delete SimpleName: entry(1233)", "Delete SingleVariableDeclaration(1234)", "Delete SimpleName: out(1237)", "Delete SimpleName: write(1238)", "Delete SimpleName: CFH_SIG(1239)", "Delete SimpleName: getBytes(1240)", "Delete MethodInvocation(1241)", "Delete MethodInvocation(1242)", "Delete ExpressionStatement(1243)", "Delete SimpleName: m_written(1244)", "Delete NumberLiteral: 4(1245)", "Delete Assignment: +=(1246)", "Delete ExpressionStatement(1247)", "Delete SimpleName: out(1248)", "Delete SimpleName: write(1249)", "Delete SimpleName: ZipShort(1250)", "Delete SimpleType: ZipShort(1251)", "Delete NumberLiteral: 20(1252)", "Delete ClassInstanceCreation(1253)", "Delete ParenthesizedExpression(1254)", "Delete SimpleName: getBytes(1255)", "Delete MethodInvocation(1256)", "Delete MethodInvocation(1257)", "Delete ExpressionStatement(1258)", "Delete SimpleName: m_written(1259)", "Delete NumberLiteral: 2(1260)", "Delete Assignment: +=(1261)", "Delete ExpressionStatement(1262)", "Delete SimpleName: out(1268)", "Delete SimpleName: write(1269)", "Delete SimpleName: ZipShort(1270)", "Delete SimpleType: ZipShort(1271)", "Delete NumberLiteral: 20(1272)", "Delete ClassInstanceCreation(1273)", "Delete ParenthesizedExpression(1274)", "Delete SimpleName: getBytes(1275)", "Delete MethodInvocation(1276)", "Delete MethodInvocation(1277)", "Delete ExpressionStatement(1278)", "Delete SimpleName: out(1279)", "Delete SimpleName: write(1280)", "Delete SimpleName: ZipShort(1281)", "Delete SimpleType: ZipShort(1282)", "Delete NumberLiteral: 8(1283)", "Delete ClassInstanceCreation(1284)", "Delete ParenthesizedExpression(1285)", "Delete SimpleName: getBytes(1286)", "Delete MethodInvocation(1287)", "Delete MethodInvocation(1288)", "Delete ExpressionStatement(1289)", "Delete Block(1290)", "Delete SimpleName: out(1291)", "Delete SimpleName: write(1292)", "Delete SimpleName: ZipShort(1293)", "Delete SimpleType: ZipShort(1294)", "Delete NumberLiteral: 10(1295)", "Delete ClassInstanceCreation(1296)", "Delete ParenthesizedExpression(1297)", "Delete SimpleName: getBytes(1298)", "Delete MethodInvocation(1299)", "Delete MethodInvocation(1300)", "Delete ExpressionStatement(1301)", "Delete SimpleName: out(1302)", "Delete SimpleName: write(1303)", "Delete SimpleName: ZERO(1304)", "Delete MethodInvocation(1305)", "Delete ExpressionStatement(1306)", "Delete Block(1307)", "Delete IfStatement(1308)", "Delete SimpleName: m_written(1309)", "Delete NumberLiteral: 4(1310)", "Delete Assignment: +=(1311)", "Delete ExpressionStatement(1312)", "Delete SimpleName: out(1313)", "Delete SimpleName: write(1314)", "Delete SimpleName: ZipShort(1315)", "Delete SimpleType: ZipShort(1316)", "Delete ClassInstanceCreation(1320)", "Delete ParenthesizedExpression(1321)", "Delete SimpleName: getBytes(1322)", "Delete MethodInvocation(1323)", "Delete MethodInvocation(1324)", "Delete ExpressionStatement(1325)", "Delete SimpleName: m_written(1326)", "Delete NumberLiteral: 2(1327)", "Delete Assignment: +=(1328)", "Delete ExpressionStatement(1329)", "Delete SimpleName: out(1330)", "Delete SimpleName: write(1331)", "Delete SimpleName: toDosTime(1332)", "Delete ClassInstanceCreation(1338)", "Delete MethodInvocation(1339)", "Delete SimpleName: getBytes(1340)", "Delete MethodInvocation(1341)", "Delete MethodInvocation(1342)", "Delete ExpressionStatement(1343)", "Delete SimpleName: m_written(1344)", "Delete NumberLiteral: 4(1345)", "Delete Assignment: +=(1346)", "Delete ExpressionStatement(1347)", "Delete SimpleName: out(1348)", "Delete SimpleName: write(1349)", "Delete SimpleName: ZipLong(1350)", "Delete SimpleType: ZipLong(1351)", "Delete ClassInstanceCreation(1355)", "Delete ParenthesizedExpression(1356)", "Delete SimpleName: getBytes(1357)", "Delete MethodInvocation(1358)", "Delete MethodInvocation(1359)", "Delete ExpressionStatement(1360)", "Delete SimpleName: out(1361)", "Delete SimpleName: write(1362)", "Delete SimpleName: ZipLong(1363)", "Delete SimpleType: ZipLong(1364)", "Delete ClassInstanceCreation(1368)", "Delete ParenthesizedExpression(1369)", "Delete SimpleName: getBytes(1370)", "Delete MethodInvocation(1371)", "Delete MethodInvocation(1372)", "Delete ExpressionStatement(1373)", "Delete SimpleName: out(1374)", "Delete SimpleName: write(1375)", "Delete SimpleName: ZipLong(1376)", "Delete SimpleType: ZipLong(1377)", "Delete ClassInstanceCreation(1381)", "Delete ParenthesizedExpression(1382)", "Delete SimpleName: getBytes(1383)", "Delete MethodInvocation(1384)", "Delete MethodInvocation(1385)", "Delete ExpressionStatement(1386)", "Delete SimpleName: m_written(1387)", "Delete NumberLiteral: 12(1388)", "Delete Assignment: +=(1389)", "Delete ExpressionStatement(1390)", "Delete SimpleName: name(1394)", "Delete SimpleName: getBytes(1395)", "Delete MethodInvocation(1399)", "Delete VariableDeclarationFragment(1400)", "Delete VariableDeclarationStatement(1401)", "Delete SimpleName: out(1402)", "Delete SimpleName: write(1403)", "Delete SimpleName: ZipShort(1404)", "Delete SimpleType: ZipShort(1405)", "Delete QualifiedName: name.length(1406)", "Delete ClassInstanceCreation(1407)", "Delete ParenthesizedExpression(1408)", "Delete SimpleName: getBytes(1409)", "Delete MethodInvocation(1410)", "Delete MethodInvocation(1411)", "Delete ExpressionStatement(1412)", "Delete SimpleName: m_written(1413)", "Delete NumberLiteral: 2(1414)", "Delete Assignment: +=(1415)", "Delete ExpressionStatement(1416)", "Delete SimpleName: extra(1420)", "Delete SimpleName: entry(1421)", "Delete SimpleName: getCentralDirectoryExtra(1422)", "Delete MethodInvocation(1423)", "Delete VariableDeclarationFragment(1424)", "Delete VariableDeclarationStatement(1425)", "Delete SimpleName: out(1426)", "Delete SimpleName: write(1427)", "Delete SimpleName: ZipShort(1428)", "Delete SimpleType: ZipShort(1429)", "Delete QualifiedName: extra.length(1430)", "Delete ClassInstanceCreation(1431)", "Delete ParenthesizedExpression(1432)", "Delete SimpleName: getBytes(1433)", "Delete MethodInvocation(1434)", "Delete MethodInvocation(1435)", "Delete ExpressionStatement(1436)", "Delete SimpleName: m_written(1437)", "Delete NumberLiteral: 2(1438)", "Delete Assignment: +=(1439)", "Delete ExpressionStatement(1440)", "Delete SimpleName: comm(1443)", "Delete SimpleName: entry(1444)", "Delete SimpleName: getComment(1445)", "Delete MethodInvocation(1446)", "Delete VariableDeclarationFragment(1447)", "Delete VariableDeclarationStatement(1448)", "Delete SimpleName: out(1467)", "Delete SimpleName: write(1468)", "Delete SimpleName: ZipShort(1469)", "Delete SimpleType: ZipShort(1470)", "Delete QualifiedName: comment.length(1471)", "Delete ClassInstanceCreation(1472)", "Delete ParenthesizedExpression(1473)", "Delete SimpleName: getBytes(1474)", "Delete MethodInvocation(1475)", "Delete MethodInvocation(1476)", "Delete ExpressionStatement(1477)", "Delete SimpleName: m_written(1478)", "Delete NumberLiteral: 2(1479)", "Delete Assignment: +=(1480)", "Delete ExpressionStatement(1481)", "Delete SimpleName: out(1482)", "Delete SimpleName: write(1483)", "Delete SimpleName: ZERO(1484)", "Delete MethodInvocation(1485)", "Delete ExpressionStatement(1486)", "Delete SimpleName: m_written(1487)", "Delete NumberLiteral: 2(1488)", "Delete Assignment: +=(1489)", "Delete ExpressionStatement(1490)", "Delete SimpleName: out(1491)", "Delete SimpleName: write(1492)", "Delete SimpleName: ZipShort(1493)", "Delete SimpleType: ZipShort(1494)", "Delete SimpleName: entry(1495)", "Delete SimpleName: getInternalAttributes(1496)", "Delete MethodInvocation(1497)", "Delete ClassInstanceCreation(1498)", "Delete ParenthesizedExpression(1499)", "Delete SimpleName: getBytes(1500)", "Delete MethodInvocation(1501)", "Delete MethodInvocation(1502)", "Delete ExpressionStatement(1503)", "Delete SimpleName: m_written(1504)", "Delete NumberLiteral: 2(1505)", "Delete Assignment: +=(1506)", "Delete ExpressionStatement(1507)", "Delete SimpleName: out(1508)", "Delete SimpleName: write(1509)", "Delete SimpleName: ZipLong(1510)", "Delete SimpleType: ZipLong(1511)", "Delete SimpleName: entry(1512)", "Delete SimpleName: getExternalAttributes(1513)", "Delete MethodInvocation(1514)", "Delete ClassInstanceCreation(1515)", "Delete ParenthesizedExpression(1516)", "Delete SimpleName: getBytes(1517)", "Delete MethodInvocation(1518)", "Delete MethodInvocation(1519)", "Delete ExpressionStatement(1520)", "Delete SimpleName: m_written(1521)", "Delete NumberLiteral: 4(1522)", "Delete Assignment: +=(1523)", "Delete ExpressionStatement(1524)", "Delete SimpleName: out(1525)", "Delete SimpleName: write(1526)", "Delete SimpleName: ZipLong(1527)", "Delete SimpleType: ZipLong(1528)", "Delete SimpleName: m_offsets(1529)", "Delete SimpleName: get(1530)", "Delete SimpleName: entry(1531)", "Delete MethodInvocation(1532)", "Delete CastExpression(1533)", "Delete ParenthesizedExpression(1534)", "Delete SimpleName: getBytes(1535)", "Delete MethodInvocation(1536)", "Delete MethodInvocation(1537)", "Delete ExpressionStatement(1538)", "Delete SimpleName: m_written(1539)", "Delete NumberLiteral: 4(1540)", "Delete Assignment: +=(1541)", "Delete ExpressionStatement(1542)", "Delete SimpleName: out(1543)", "Delete SimpleName: write(1544)", "Delete SimpleName: name(1545)", "Delete MethodInvocation(1546)", "Delete ExpressionStatement(1547)", "Delete SimpleName: m_written(1548)", "Delete QualifiedName: name.length(1549)", "Delete Assignment: +=(1550)", "Delete ExpressionStatement(1551)", "Delete SimpleName: out(1552)", "Delete SimpleName: write(1553)", "Delete SimpleName: extra(1554)", "Delete MethodInvocation(1555)", "Delete ExpressionStatement(1556)", "Delete SimpleName: m_written(1557)", "Delete QualifiedName: extra.length(1558)", "Delete Assignment: +=(1559)", "Delete ExpressionStatement(1560)", "Delete SimpleName: out(1561)", "Delete SimpleName: write(1562)", "Delete SimpleName: comment(1563)", "Delete MethodInvocation(1564)", "Delete ExpressionStatement(1565)", "Delete SimpleName: m_written(1566)", "Delete QualifiedName: comment.length(1567)", "Delete Assignment: +=(1568)", "Delete ExpressionStatement(1569)", "Delete Block(1570)", "Delete MethodDeclaration(1571)", "Delete TextElement: Writes the data descriptor entry(1572)", "Delete TagElement(1573)", "Delete SimpleName: ze(1574)", "Delete TextElement:  Description of Parameter(1575)", "Delete TagElement: @param(1576)", "Delete SimpleName: IOException(1577)", "Delete TextElement:  if an IO failure causes operation to fail(1578)", "Delete TagElement: @throws(1579)", "Delete Javadoc(1582)", "Delete Modifier: protected(1583)", "Delete PrimitiveType: void(1584)", "Delete SimpleName: writeDataDescriptor(1585)", "Delete SimpleName: ZipArchiveEntry(1586)", "Delete SimpleType: ZipArchiveEntry(1587)", "Delete SimpleName: ze(1588)", "Delete SingleVariableDeclaration(1589)", "Delete SimpleName: out(1600)", "Delete SimpleName: write(1601)", "Delete SimpleName: DD_SIG(1602)", "Delete SimpleName: getBytes(1603)", "Delete MethodInvocation(1604)", "Delete MethodInvocation(1605)", "Delete ExpressionStatement(1606)", "Delete SimpleName: out(1607)", "Delete SimpleName: write(1608)", "Delete SimpleName: ZipLong(1609)", "Delete SimpleType: ZipLong(1610)", "Delete SimpleName: m_entry(1611)", "Delete SimpleName: getCrc(1612)", "Delete MethodInvocation(1613)", "Delete ClassInstanceCreation(1614)", "Delete ParenthesizedExpression(1615)", "Delete SimpleName: getBytes(1616)", "Delete MethodInvocation(1617)", "Delete MethodInvocation(1618)", "Delete ExpressionStatement(1619)", "Delete SimpleName: out(1620)", "Delete SimpleName: write(1621)", "Delete SimpleName: ZipLong(1622)", "Delete SimpleType: ZipLong(1623)", "Delete SimpleName: m_entry(1624)", "Delete SimpleName: getCompressedSize(1625)", "Delete MethodInvocation(1626)", "Delete ClassInstanceCreation(1627)", "Delete ParenthesizedExpression(1628)", "Delete SimpleName: getBytes(1629)", "Delete MethodInvocation(1630)", "Delete MethodInvocation(1631)", "Delete ExpressionStatement(1632)", "Delete SimpleName: out(1633)", "Delete SimpleName: write(1634)", "Delete SimpleName: ZipLong(1635)", "Delete SimpleType: ZipLong(1636)", "Delete SimpleName: m_entry(1637)", "Delete SimpleName: getSize(1638)", "Delete MethodInvocation(1639)", "Delete ClassInstanceCreation(1640)", "Delete ParenthesizedExpression(1641)", "Delete SimpleName: getBytes(1642)", "Delete MethodInvocation(1643)", "Delete MethodInvocation(1644)", "Delete ExpressionStatement(1645)", "Delete SimpleName: m_written(1646)", "Delete NumberLiteral: 16(1647)", "Delete Assignment: +=(1648)", "Delete ExpressionStatement(1649)", "Delete Block(1650)", "Delete MethodDeclaration(1651)", "Delete SimpleName: entry(1654)", "Delete TextElement:  the zip entry(1655)", "Delete TagElement: @param(1656)", "Delete SimpleName: IOException(1657)", "Delete TextElement:  when an IO error causes operation to fail(1658)", "Delete TagElement: @exception(1659)", "Delete Javadoc(1662)", "Delete Modifier: protected(1663)", "Delete PrimitiveType: void(1664)", "Delete SimpleName: writeLocalFileHeader(1665)", "Delete Modifier: final(1666)", "Delete SimpleName: ZipArchiveEntry(1667)", "Delete SimpleType: ZipArchiveEntry(1668)", "Delete SimpleName: entry(1669)", "Delete SingleVariableDeclaration(1670)", "Delete SimpleName: m_offsets(1673)", "Delete SimpleName: put(1674)", "Delete SimpleName: entry(1675)", "Delete SimpleName: ZipLong(1676)", "Delete SimpleType: ZipLong(1677)", "Delete SimpleName: m_written(1678)", "Delete ClassInstanceCreation(1679)", "Delete MethodInvocation(1680)", "Delete ExpressionStatement(1681)", "Delete SimpleName: out(1682)", "Delete SimpleName: write(1683)", "Delete SimpleName: LFH_SIG(1684)", "Delete SimpleName: getBytes(1685)", "Delete MethodInvocation(1686)", "Delete MethodInvocation(1687)", "Delete ExpressionStatement(1688)", "Delete SimpleName: m_written(1689)", "Delete NumberLiteral: 4(1690)", "Delete Assignment: +=(1691)", "Delete ExpressionStatement(1692)", "Delete SimpleName: out(1698)", "Delete SimpleName: write(1699)", "Delete SimpleName: ZipShort(1700)", "Delete SimpleType: ZipShort(1701)", "Delete NumberLiteral: 20(1702)", "Delete ClassInstanceCreation(1703)", "Delete ParenthesizedExpression(1704)", "Delete SimpleName: getBytes(1705)", "Delete MethodInvocation(1706)", "Delete MethodInvocation(1707)", "Delete ExpressionStatement(1708)", "Delete SimpleName: out(1709)", "Delete SimpleName: write(1710)", "Delete SimpleName: ZipShort(1711)", "Delete SimpleType: ZipShort(1712)", "Delete NumberLiteral: 8(1713)", "Delete ClassInstanceCreation(1714)", "Delete ParenthesizedExpression(1715)", "Delete SimpleName: getBytes(1716)", "Delete MethodInvocation(1717)", "Delete MethodInvocation(1718)", "Delete ExpressionStatement(1719)", "Delete Block(1720)", "Delete SimpleName: out(1721)", "Delete SimpleName: write(1722)", "Delete SimpleName: ZipShort(1723)", "Delete SimpleType: ZipShort(1724)", "Delete NumberLiteral: 10(1725)", "Delete ClassInstanceCreation(1726)", "Delete ParenthesizedExpression(1727)", "Delete SimpleName: getBytes(1728)", "Delete MethodInvocation(1729)", "Delete MethodInvocation(1730)", "Delete ExpressionStatement(1731)", "Delete SimpleName: out(1732)", "Delete SimpleName: write(1733)", "Delete SimpleName: ZERO(1734)", "Delete MethodInvocation(1735)", "Delete ExpressionStatement(1736)", "Delete Block(1737)", "Delete IfStatement(1738)", "Delete SimpleName: m_written(1739)", "Delete NumberLiteral: 4(1740)", "Delete Assignment: +=(1741)", "Delete ExpressionStatement(1742)", "Delete SimpleName: out(1743)", "Delete SimpleName: write(1744)", "Delete SimpleName: ZipShort(1745)", "Delete SimpleType: ZipShort(1746)", "Delete ClassInstanceCreation(1750)", "Delete ParenthesizedExpression(1751)", "Delete SimpleName: getBytes(1752)", "Delete MethodInvocation(1753)", "Delete MethodInvocation(1754)", "Delete ExpressionStatement(1755)", "Delete SimpleName: m_written(1756)", "Delete NumberLiteral: 2(1757)", "Delete Assignment: +=(1758)", "Delete ExpressionStatement(1759)", "Delete SimpleName: out(1760)", "Delete SimpleName: write(1761)", "Delete SimpleName: toDosTime(1762)", "Delete SimpleName: entry(1765)", "Delete SimpleName: getTime(1766)", "Delete MethodInvocation(1767)", "Delete ClassInstanceCreation(1768)", "Delete MethodInvocation(1769)", "Delete SimpleName: getBytes(1770)", "Delete MethodInvocation(1771)", "Delete MethodInvocation(1772)", "Delete ExpressionStatement(1773)", "Delete SimpleName: m_written(1774)", "Delete NumberLiteral: 4(1775)", "Delete Assignment: +=(1776)", "Delete ExpressionStatement(1777)", "Delete SimpleName: out(1783)", "Delete SimpleName: write(1784)", "Delete SimpleName: LZERO(1785)", "Delete MethodInvocation(1786)", "Delete ExpressionStatement(1787)", "Delete SimpleName: out(1788)", "Delete SimpleName: write(1789)", "Delete SimpleName: LZERO(1790)", "Delete MethodInvocation(1791)", "Delete ExpressionStatement(1792)", "Delete SimpleName: out(1793)", "Delete SimpleName: write(1794)", "Delete SimpleName: LZERO(1795)", "Delete MethodInvocation(1796)", "Delete ExpressionStatement(1797)", "Delete Block(1798)", "Delete SimpleName: out(1799)", "Delete SimpleName: write(1800)", "Delete SimpleName: ZipLong(1801)", "Delete SimpleType: ZipLong(1802)", "Delete ClassInstanceCreation(1806)", "Delete ParenthesizedExpression(1807)", "Delete SimpleName: getBytes(1808)", "Delete MethodInvocation(1809)", "Delete MethodInvocation(1810)", "Delete ExpressionStatement(1811)", "Delete SimpleName: out(1812)", "Delete SimpleName: write(1813)", "Delete SimpleName: ZipLong(1814)", "Delete SimpleType: ZipLong(1815)", "Delete ClassInstanceCreation(1819)", "Delete ParenthesizedExpression(1820)", "Delete SimpleName: getBytes(1821)", "Delete MethodInvocation(1822)", "Delete MethodInvocation(1823)", "Delete ExpressionStatement(1824)", "Delete SimpleName: out(1825)", "Delete SimpleName: write(1826)", "Delete ClassInstanceCreation(1832)", "Delete ParenthesizedExpression(1833)", "Delete SimpleName: getBytes(1834)", "Delete MethodInvocation(1835)", "Delete MethodInvocation(1836)", "Delete ExpressionStatement(1837)", "Delete Block(1838)", "Delete IfStatement(1839)", "Delete SimpleName: m_written(1840)", "Delete NumberLiteral: 12(1841)", "Delete Assignment: +=(1842)", "Delete ExpressionStatement(1843)", "Delete SimpleName: name(1847)", "Delete SimpleName: getBytes(1848)", "Delete MethodInvocation(1852)", "Delete VariableDeclarationFragment(1853)", "Delete VariableDeclarationStatement(1854)", "Delete SimpleName: out(1855)", "Delete SimpleName: write(1856)", "Delete SimpleName: ZipShort(1857)", "Delete SimpleType: ZipShort(1858)", "Delete QualifiedName: name.length(1859)", "Delete ClassInstanceCreation(1860)", "Delete ParenthesizedExpression(1861)", "Delete SimpleName: getBytes(1862)", "Delete MethodInvocation(1863)", "Delete MethodInvocation(1864)", "Delete ExpressionStatement(1865)", "Delete SimpleName: m_written(1866)", "Delete NumberLiteral: 2(1867)", "Delete Assignment: +=(1868)", "Delete ExpressionStatement(1869)", "Delete SimpleName: extra(1873)", "Delete SimpleName: entry(1874)", "Delete SimpleName: getLocalFileDataExtra(1875)", "Delete MethodInvocation(1876)", "Delete VariableDeclarationFragment(1877)", "Delete VariableDeclarationStatement(1878)", "Delete SimpleName: out(1879)", "Delete SimpleName: write(1880)", "Delete SimpleName: ZipShort(1881)", "Delete SimpleType: ZipShort(1882)", "Delete QualifiedName: extra.length(1883)", "Delete ClassInstanceCreation(1884)", "Delete ParenthesizedExpression(1885)", "Delete SimpleName: getBytes(1886)", "Delete MethodInvocation(1887)", "Delete MethodInvocation(1888)", "Delete ExpressionStatement(1889)", "Delete SimpleName: m_written(1890)", "Delete NumberLiteral: 2(1891)", "Delete Assignment: +=(1892)", "Delete ExpressionStatement(1893)", "Delete SimpleName: out(1894)", "Delete SimpleName: write(1895)", "Delete SimpleName: name(1896)", "Delete MethodInvocation(1897)", "Delete ExpressionStatement(1898)", "Delete SimpleName: m_written(1899)", "Delete QualifiedName: name.length(1900)", "Delete Assignment: +=(1901)", "Delete ExpressionStatement(1902)", "Delete SimpleName: out(1903)", "Delete SimpleName: write(1904)", "Delete SimpleName: extra(1905)", "Delete MethodInvocation(1906)", "Delete ExpressionStatement(1907)", "Delete SimpleName: m_written(1908)", "Delete QualifiedName: extra.length(1909)", "Delete Assignment: +=(1910)", "Delete ExpressionStatement(1911)", "Delete SimpleName: m_dataStart(1912)", "Delete SimpleName: m_written(1913)", "Delete Assignment: =(1914)", "Delete ExpressionStatement(1915)", "Delete Block(1916)", "Delete MethodDeclaration(1917)", "Delete TypeDeclaration: class(1918)"]}}, {"ZipShort_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS NumberLiteral: 0xFF to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: BYTE_MASK to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS Modifier: final to FieldDeclaration at 2", "INS NumberLiteral: 0xFF00 to VariableDeclarationFragment at 1", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS PrimitiveType: int to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: BYTE_1_MASK to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS PrimitiveType: int to FieldDeclaration at 3", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: BYTE_1_SHIFT to VariableDeclarationFragment at 0", "INS NumberLiteral: 8 to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS CastExpression to Assignment: = at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: value to InfixExpression: & at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS ArrayType: byte[] to MethodDeclaration at 3", "INS TextElement: Get value as two bytes in big endian byte order. to TagElement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS TagElement: @return to Javadoc at 2", "INS PrimitiveType: byte to CastExpression at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: static to MethodDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: result to ReturnStatement at 0", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS ArrayType: byte[] to VariableDeclarationStatement at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS InfixExpression: >> to ParenthesizedExpression at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ArrayType: byte[] to ArrayCreation at 0", "INS SimpleName: result to ArrayAccess at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS Dimension to ArrayType: byte[] at 1", "INS TextElement:  the converted int as a byte array in big endian byte order to TagElement: @return at 0", "INS ArrayAccess to Assignment: = at 0", "INS NumberLiteral: 2 to ArrayCreation at 1", "INS SimpleName: BYTE_1_SHIFT to InfixExpression: >> at 1", "INS CastExpression to Assignment: = at 1", "INS TagElement: @param to Javadoc at 1", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: getBytes to MethodDeclaration at 4", "INS SimpleName: value to InfixExpression: & at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS PrimitiveType: byte to CastExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1", "INS ExpressionStatement to Block at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS TextElement:  the Java int to convert to bytes to TagElement: @param at 1", "INS ExpressionStatement to Block at 2", "INS Block to MethodDeclaration at 6", "INS SimpleName: result to ArrayAccess at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to ArrayAccess at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: value to TagElement: @param at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: BYTE_MASK to InfixExpression: & at 1", "INS ReturnStatement to Block at 3", "INS ParenthesizedExpression to InfixExpression: >> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: getValue to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: bytes to TagElement: @param at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: bytes to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS Modifier: static to MethodDeclaration at 2", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 3", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS TagElement: @param to Javadoc at 1", "INS TextElement: Helper method to get the value as a java int from a two-byte array to TagElement at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: getValue to MethodInvocation at 0", "INS TextElement:  the array of bytes to TagElement: @param at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS TagElement: @return to Javadoc at 2", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: getValue to MethodDeclaration at 4", "INS TextElement:  the correspondanding java int value to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS PrimitiveType: int to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 1", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS TextElement:  the value stored in the ZipShort to TagElement: @return at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS Dimension to ArrayType: byte[] at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: offset to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS SimpleName: offset to MethodInvocation at 3", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: ZipShort to MethodInvocation at 0", "INS SimpleName: value to Assignment: = at 0", "INS SimpleName: bytes to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleName: hashCode to MethodDeclaration at 3", "MOV PrimitiveType: int to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Block to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from Utility class that represents a two byte integer with conversion rules for to Utility class that represents a two byte integer with conversion", "operations": ["UPD TextElement: Utility class that represents a two byte integer with conversion rules for from Utility class that represents a two byte integer with conversion rules for to Utility class that represents a two byte integer with conversion"]}, {"root": "UPDATE from the big endian byte order of ZIP files. to rules for the big endian byte order of ZIP files.", "operations": ["UPD TextElement: the big endian byte order of ZIP files. from the big endian byte order of ZIP files. to rules for the big endian byte order of ZIP files."]}, {"root": "UPDATE from m_value to value", "operations": ["UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value", "UPD SimpleName: m_value from m_value to value"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS TagElement: @param to Javadoc at 1", "INS SimpleName: bytes to TagElement: @param at 0", "INS TextElement:  the array of bytes to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TextElement:  the offset to start to TagElement: @param at 1", "INS SimpleName: offset to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS SimpleName: value to ReturnStatement at 0", "INS ReturnStatement to Block at 3"]}, {"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: Override to make two instances with same value equal. to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @since to Javadoc at 2"]}, {"root": "UPDATE from  Description of Parameter to  the int to store as a ZipShort", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  the int to store as a ZipShort"]}, {"root": "UPDATE from  Description of Parameter to  the bytes to store as a ZipShort", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  the bytes to store as a ZipShort", "UPD TextElement:  Description of Parameter from  Description of Parameter to  the bytes to store as a ZipShort"]}, {"root": "UPDATE from  Description of Parameter to  the offset to start", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  the offset to start"]}, {"root": "UPDATE from  The Bytes value to  the value as a a two byte array in big endian byte order", "operations": ["UPD TextElement:  The Bytes value from  The Bytes value to  the value as a a two byte array in big endian byte order"]}, {"root": "UPDATE from  The Value value to  value as a Java int", "operations": ["UPD TextElement:  The Value value from  The Value value to  value as a Java int"]}, {"root": "UPDATE from Override to make two instances with same value equal. to Helper method to get the value as a java int from two bytes starting at given array offset", "operations": ["UPD TextElement: Override to make two instances with same value equal. from Override to make two instances with same value equal. to Helper method to get the value as a java int from two bytes starting at given array offset"]}, {"root": "UPDATE from  Description of the Returned Value to  the correspondanding java int value", "operations": ["UPD TextElement:  Description of the Returned Value from  Description of the Returned Value to  the correspondanding java int value"]}, {"root": "UPDATE from  Description of Parameter to  an object to compare", "operations": ["UPD TextElement:  Description of Parameter from  Description of Parameter to  an object to compare"]}, {"root": "UPDATE from  Description of the Returned Value to  true if the objects are equal", "operations": ["UPD TextElement:  Description of the Returned Value from  Description of the Returned Value to  true if the objects are equal"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV InfixExpression: & to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1"]}, {"root": "INS SimpleName: BYTE_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_MASK to InfixExpression: & at 1"]}, {"root": "INS SimpleName: BYTE_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_MASK to InfixExpression: & at 1"]}, {"root": "INS SimpleName: BYTE_1_SHIFT to InfixExpression: >> at 1", "operations": ["INS SimpleName: BYTE_1_SHIFT to InfixExpression: >> at 1"]}, {"root": "INS SimpleName: BYTE_1_SHIFT to InfixExpression: << at 1", "operations": ["INS SimpleName: BYTE_1_SHIFT to InfixExpression: << at 1"]}, {"root": "INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1", "operations": ["INS SimpleName: BYTE_1_MASK to InfixExpression: & at 1"]}, {"root": "DEL NumberLiteral: 0xFF", "operations": ["DEL NumberLiteral: 0xFF"]}, {"root": "DEL NumberLiteral: 0xFF00", "operations": ["DEL NumberLiteral: 0xFF00"]}, {"root": "DEL NumberLiteral: 8", "operations": ["DEL NumberLiteral: 8"]}, {"root": "DEL NumberLiteral: 8", "operations": ["DEL NumberLiteral: 8"]}, {"root": "DEL NumberLiteral: 0xFF00", "operations": ["DEL NumberLiteral: 0xFF00"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: m_value", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL NumberLiteral: 0xFF", "operations": ["DEL NumberLiteral: 0xFF"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}]}}, {"ZipShort_diff": {"operations": ["Insert FieldDeclaration(18) into TypeDeclaration: class(366) at 5", "Insert FieldDeclaration(26) into TypeDeclaration: class(366) at 6", "Insert FieldDeclaration(34) into TypeDeclaration: class(366) at 7", "Insert MethodDeclaration(234) into TypeDeclaration: class(366) at 14", "Insert MethodDeclaration(284) into TypeDeclaration: class(366) at 15", "Insert MethodDeclaration(308) into TypeDeclaration: class(366) at 16", "Insert MethodDeclaration(365) into TypeDeclaration: class(366) at 18", "Insert Modifier: private(11) into FieldDeclaration(18) at 0", "Insert Modifier: static(12) into FieldDeclaration(18) at 1", "Insert Modifier: final(13) into FieldDeclaration(18) at 2", "Insert PrimitiveType: int(14) into FieldDeclaration(18) at 3", "Insert VariableDeclarationFragment(17) into FieldDeclaration(18) at 4", "Insert Modifier: private(19) into FieldDeclaration(26) at 0", "Insert Modifier: static(20) into FieldDeclaration(26) at 1", "Insert Modifier: final(21) into FieldDeclaration(26) at 2", "Insert PrimitiveType: int(22) into FieldDeclaration(26) at 3", "Insert VariableDeclarationFragment(25) into FieldDeclaration(26) at 4", "Insert Modifier: private(27) into FieldDeclaration(34) at 0", "Insert Modifier: static(28) into FieldDeclaration(34) at 1", "Insert Modifier: final(29) into FieldDeclaration(34) at 2", "Insert PrimitiveType: int(30) into FieldDeclaration(34) at 3", "Insert VariableDeclarationFragment(33) into FieldDeclaration(34) at 4", "Insert SingleVariableDeclaration(98) into MethodDeclaration(111) at 3", "Insert SingleVariableDeclaration(101) into MethodDeclaration(111) at 4", "Insert Block(110) into MethodDeclaration(111) at 5", "Insert Javadoc(185) into MethodDeclaration(234) at 0", "Insert Modifier: public(186) into MethodDeclaration(234) at 1", "Insert Modifier: static(187) into MethodDeclaration(234) at 2", "Insert ArrayType: byte[](190) into MethodDeclaration(234) at 3", "Insert SimpleName: getBytes(191) into MethodDeclaration(234) at 4", "Insert SingleVariableDeclaration(194) into MethodDeclaration(234) at 5", "Insert Block(233) into MethodDeclaration(234) at 6", "Move Javadoc(217) into MethodDeclaration(284) at 0", "Move Modifier: public(218) into MethodDeclaration(284) at 1", "Insert Modifier: static(247) into MethodDeclaration(284) at 2", "Move PrimitiveType: int(219) into MethodDeclaration(284) at 3", "Insert SimpleName: getValue(249) into MethodDeclaration(284) at 4", "Move SingleVariableDeclaration(74) into MethodDeclaration(284) at 5", "Move SingleVariableDeclaration(77) into MethodDeclaration(284) at 6", "Move Block(100) into MethodDeclaration(284) at 7", "Insert Javadoc(292) into MethodDeclaration(308) at 0", "Insert Modifier: public(293) into MethodDeclaration(308) at 1", "Insert Modifier: static(294) into MethodDeclaration(308) at 2", "Insert PrimitiveType: int(295) into MethodDeclaration(308) at 3", "Insert SimpleName: getValue(296) into MethodDeclaration(308) at 4", "Insert SingleVariableDeclaration(301) into MethodDeclaration(308) at 5", "Insert Block(307) into MethodDeclaration(308) at 6", "Insert Javadoc(358) into MethodDeclaration(365) at 0", "Insert Modifier: public(359) into MethodDeclaration(365) at 1", "Insert PrimitiveType: int(360) into MethodDeclaration(365) at 2", "Move SimpleName: hashCode(220) into MethodDeclaration(365) at 3", "Move Block(223) into MethodDeclaration(365) at 4", "Update TextElement: Utility class that represents a two byte integer with conversion rules for(2) to Utility class that represents a two byte integer with conversion", "Update TextElement: the big endian byte order of ZIP files.(3) to rules for the big endian byte order of ZIP files.", "Insert SimpleName: BYTE_MASK(15) into VariableDeclarationFragment(17) at 0", "Insert NumberLiteral: 0xFF(16) into VariableDeclarationFragment(17) at 1", "Insert SimpleName: BYTE_1_MASK(23) into VariableDeclarationFragment(25) at 0", "Insert NumberLiteral: 0xFF00(24) into VariableDeclarationFragment(25) at 1", "Insert SimpleName: BYTE_1_SHIFT(31) into VariableDeclarationFragment(33) at 0", "Insert NumberLiteral: 8(32) into VariableDeclarationFragment(33) at 1", "Update SimpleName: m_value(13) to value", "Insert ArrayType: byte[](96) into SingleVariableDeclaration(98) at 0", "Insert SimpleName: bytes(97) into SingleVariableDeclaration(98) at 1", "Insert PrimitiveType: int(99) into SingleVariableDeclaration(101) at 0", "Insert SimpleName: offset(100) into SingleVariableDeclaration(101) at 1", "Insert ExpressionStatement(109) into Block(110) at 0", "Insert TagElement(179) into Javadoc(185) at 0", "Insert TagElement: @param(182) into Javadoc(185) at 1", "Insert TagElement: @return(184) into Javadoc(185) at 2", "Insert PrimitiveType: byte(188) into ArrayType: byte[](190) at 0", "Insert Dimension(189) into ArrayType: byte[](190) at 1", "Insert PrimitiveType: int(192) into SingleVariableDeclaration(194) at 0", "Insert SimpleName: value(193) into SingleVariableDeclaration(194) at 1", "Insert VariableDeclarationStatement(205) into Block(233) at 0", "Insert ExpressionStatement(216) into Block(233) at 1", "Insert ExpressionStatement(230) into Block(233) at 2", "Insert ReturnStatement(232) into Block(233) at 3", "Insert TagElement: @param(239) into Javadoc(245) at 1", "Insert TagElement: @param(242) into Javadoc(245) at 2", "Insert VariableDeclarationStatement(271) into Block(283) at 0", "Insert ReturnStatement(282) into Block(283) at 2", "Insert TagElement(286) into Javadoc(292) at 0", "Insert TagElement: @param(289) into Javadoc(292) at 1", "Insert TagElement: @return(291) into Javadoc(292) at 2", "Insert ArrayType: byte[](299) into SingleVariableDeclaration(301) at 0", "Insert SimpleName: bytes(300) into SingleVariableDeclaration(301) at 1", "Insert ReturnStatement(306) into Block(307) at 0", "Insert TagElement(310) into Javadoc(318) at 0", "Move TagElement(169) into Javadoc(358) at 0", "Insert TagElement: @return(355) into Javadoc(358) at 1", "Move TagElement: @since(216) into Javadoc(358) at 2", "Update TextElement:  Description of Parameter(19) to  the int to store as a ZipShort", "Update TextElement:  Description of Parameter(40) to  the bytes to store as a ZipShort", "Update TextElement:  Description of Parameter(60) to  the bytes to store as a ZipShort", "Update TextElement:  Description of Parameter(63) to  the offset to start", "Insert PrimitiveType: byte(94) into ArrayType: byte[](96) at 0", "Insert Dimension(95) into ArrayType: byte[](96) at 1", "Insert Assignment: =(108) into ExpressionStatement(109) at 0", "Update TextElement:  The Bytes value(104) to  the value as a a two byte array in big endian byte order", "Update TextElement:  The Value value(156) to  value as a Java int", "Update SimpleName: m_value(164) to value", "Insert TextElement: Get value as two bytes in big endian byte order.(178) into TagElement(179) at 0", "Insert SimpleName: value(180) into TagElement: @param(182) at 0", "Insert TextElement:  the Java int to convert to bytes(181) into TagElement: @param(182) at 1", "Insert TextElement:  the converted int as a byte array in big endian byte order(183) into TagElement: @return(184) at 0", "Insert ArrayType: byte[](197) into VariableDeclarationStatement(205) at 0", "Insert VariableDeclarationFragment(204) into VariableDeclarationStatement(205) at 1", "Insert Assignment: =(215) into ExpressionStatement(216) at 0", "Insert Assignment: =(229) into ExpressionStatement(230) at 0", "Insert SimpleName: result(231) into ReturnStatement(232) at 0", "Update TextElement: Override to make two instances with same value equal.(211) to Helper method to get the value as a java int from two bytes starting at given array offset", "Insert SimpleName: bytes(237) into TagElement: @param(239) at 0", "Insert TextElement:  the array of bytes(238) into TagElement: @param(239) at 1", "Insert SimpleName: offset(240) into TagElement: @param(242) at 0", "Insert TextElement:  the offset to start(241) into TagElement: @param(242) at 1", "Update TextElement:  Description of the Returned Value(213) to  the correspondanding java int value", "Insert PrimitiveType: int(258) into VariableDeclarationStatement(271) at 0", "Insert VariableDeclarationFragment(270) into VariableDeclarationStatement(271) at 1", "Insert SimpleName: value(281) into ReturnStatement(282) at 0", "Insert TextElement: Helper method to get the value as a java int from a two-byte array(285) into TagElement(286) at 0", "Insert SimpleName: bytes(287) into TagElement: @param(289) at 0", "Insert TextElement:  the array of bytes(288) into TagElement: @param(289) at 1", "Insert TextElement:  the correspondanding java int value(290) into TagElement: @return(291) at 0", "Insert PrimitiveType: byte(297) into ArrayType: byte[](299) at 0", "Insert Dimension(298) into ArrayType: byte[](299) at 1", "Insert MethodInvocation(305) into ReturnStatement(306) at 0", "Insert TextElement: Override to make two instances with same value equal.(309) into TagElement(310) at 0", "Update TextElement:  Description of Parameter(171) to  an object to compare", "Update TextElement:  Description of the Returned Value(173) to  true if the objects are equal", "Insert TextElement:  the value stored in the ZipShort(354) into TagElement: @return(355) at 0", "Update SimpleName: m_value(221) to value", "Insert SimpleName: value(102) into Assignment: =(108) at 0", "Insert MethodInvocation(107) into Assignment: =(108) at 1", "Insert PrimitiveType: byte(195) into ArrayType: byte[](197) at 0", "Insert Dimension(196) into ArrayType: byte[](197) at 1", "Insert SimpleName: result(198) into VariableDeclarationFragment(204) at 0", "Insert ArrayCreation(203) into VariableDeclarationFragment(204) at 1", "Insert ArrayAccess(208) into Assignment: =(215) at 0", "Insert CastExpression(214) into Assignment: =(215) at 1", "Insert ArrayAccess(219) into Assignment: =(229) at 0", "Insert CastExpression(228) into Assignment: =(229) at 1", "Insert SimpleName: value(259) into VariableDeclarationFragment(270) at 0", "Move InfixExpression: &(88) into VariableDeclarationFragment(270) at 1", "Update SimpleName: m_value(91) to value", "Insert SimpleName: getValue(302) into MethodInvocation(305) at 0", "Insert SimpleName: bytes(303) into MethodInvocation(305) at 1", "Insert NumberLiteral: 0(304) into MethodInvocation(305) at 2", "Update SimpleName: m_value(199) to value", "Update SimpleName: m_value(30) to value", "Insert SimpleName: ZipShort(103) into MethodInvocation(107) at 0", "Insert SimpleName: getValue(104) into MethodInvocation(107) at 1", "Insert SimpleName: bytes(105) into MethodInvocation(107) at 2", "Insert SimpleName: offset(106) into MethodInvocation(107) at 3", "Insert ArrayType: byte[](201) into ArrayCreation(203) at 0", "Insert NumberLiteral: 2(202) into ArrayCreation(203) at 1", "Insert SimpleName: result(206) into ArrayAccess(208) at 0", "Insert NumberLiteral: 0(207) into ArrayAccess(208) at 1", "Insert PrimitiveType: byte(209) into CastExpression(214) at 0", "Insert ParenthesizedExpression(213) into CastExpression(214) at 1", "Insert SimpleName: result(217) into ArrayAccess(219) at 0", "Insert NumberLiteral: 1(218) into ArrayAccess(219) at 1", "Insert PrimitiveType: byte(220) into CastExpression(228) at 0", "Insert ParenthesizedExpression(227) into CastExpression(228) at 1", "Insert SimpleName: BYTE_1_MASK(268) into InfixExpression: &(269) at 1", "Insert PrimitiveType: byte(199) into ArrayType: byte[](201) at 0", "Insert Dimension(200) into ArrayType: byte[](201) at 1", "Insert InfixExpression: &(212) into ParenthesizedExpression(213) at 0", "Insert InfixExpression: >>(226) into ParenthesizedExpression(227) at 0", "Insert SimpleName: BYTE_MASK(276) into InfixExpression: &(277) at 1", "Update SimpleName: m_value(129) to value", "Insert SimpleName: BYTE_MASK(140) into InfixExpression: &(141) at 1", "Insert SimpleName: BYTE_1_SHIFT(154) into InfixExpression: >>(155) at 1", "Insert SimpleName: value(210) into InfixExpression: &(212) at 0", "Insert SimpleName: BYTE_MASK(211) into InfixExpression: &(212) at 1", "Insert ParenthesizedExpression(224) into InfixExpression: >>(226) at 0", "Insert SimpleName: BYTE_1_SHIFT(225) into InfixExpression: >>(226) at 1", "Insert SimpleName: BYTE_1_SHIFT(265) into InfixExpression: <<(266) at 1", "Insert InfixExpression: &(223) into ParenthesizedExpression(224) at 0", "Update SimpleName: m_value(140) to value", "Insert SimpleName: BYTE_1_MASK(151) into InfixExpression: &(152) at 1", "Insert SimpleName: value(221) into InfixExpression: &(223) at 0", "Insert SimpleName: BYTE_1_MASK(222) into InfixExpression: &(223) at 1", "Delete NumberLiteral: 0xFF(130)", "Delete NumberLiteral: 0xFF00(141)", "Delete NumberLiteral: 8(144)", "Delete NumberLiteral: 8(84)", "Delete NumberLiteral: 0xFF00(87)", "Delete SimpleName: m_value(78)", "Delete Assignment: =(89)", "Delete ExpressionStatement(90)", "Delete NumberLiteral: 0xFF(95)", "Delete MethodDeclaration(224)"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 0, "testing": "False", "maintenance": "True", "build": "False"}]}