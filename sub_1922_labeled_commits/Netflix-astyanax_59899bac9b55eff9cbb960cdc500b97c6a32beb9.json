{"application": "Netflix-astyanax", "csha": "59899bac9b55eff9cbb960cdc500b97c6a32beb9", "files": [{"MutationBatch_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 13", "operations": ["INS SimpleType: BatchPolicy to SingleVariableDeclaration at 0", "INS SimpleName: policy to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Policy dictating how the batch will actually be executed. to TagElement at 0", "INS TextElement: NMutationBatchPolicy - break up the batch for no more than N mutations in each batch to TagElement at 3", "INS TextElement: SingleBatchPolicy - execute the entire batch in one shot to TagElement at 1", "INS SimpleName: MutationBatch to SimpleType: MutationBatch at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: BatchPolicy to SimpleType: BatchPolicy at 0", "INS MethodDeclaration to TypeDeclaration: interface at 13", "INS TextElement: MaxSizeBatchPolicy - break up the batch so that the aggregate mutation size does not exceed a max size to TagElement at 4", "INS SimpleType: MutationBatch to MethodDeclaration at 1", "INS SimpleName: withBatchingPolicy to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: policy to SingleVariableDeclaration at 1", "INS TextElement: TokenAwareBatchPolicy - break up the batch by token and execute each batch in a separate thread to TagElement at 2"]}]}}, {"MutationBatch_diff": {"operations": ["Insert MethodDeclaration(222) into TypeDeclaration: interface(260) at 13", "Insert Javadoc(214) into MethodDeclaration(222) at 0", "Insert SimpleType: MutationBatch(216) into MethodDeclaration(222) at 1", "Insert SimpleName: withBatchingPolicy(217) into MethodDeclaration(222) at 2", "Insert SingleVariableDeclaration(221) into MethodDeclaration(222) at 3", "Insert TagElement(210) into Javadoc(214) at 0", "Insert TagElement: @param(212) into Javadoc(214) at 1", "Insert TagElement: @return(213) into Javadoc(214) at 2", "Insert SimpleName: MutationBatch(215) into SimpleType: MutationBatch(216) at 0", "Insert SimpleType: BatchPolicy(219) into SingleVariableDeclaration(221) at 0", "Insert SimpleName: policy(220) into SingleVariableDeclaration(221) at 1", "Insert TextElement: Policy dictating how the batch will actually be executed.(205) into TagElement(210) at 0", "Insert TextElement: SingleBatchPolicy - execute the entire batch in one shot(206) into TagElement(210) at 1", "Insert TextElement: TokenAwareBatchPolicy - break up the batch by token and execute each batch in a separate thread(207) into TagElement(210) at 2", "Insert TextElement: NMutationBatchPolicy - break up the batch for no more than N mutations in each batch(208) into TagElement(210) at 3", "Insert TextElement: MaxSizeBatchPolicy - break up the batch so that the aggregate mutation size does not exceed a max size(209) into TagElement(210) at 4", "Insert SimpleName: policy(211) into TagElement: @param(212) at 0", "Insert SimpleName: BatchPolicy(218) into SimpleType: BatchPolicy(219) at 0"]}}, {"AstyanaxConfigurationImpl_cluster": {"actions": [{"root": "UPDATE from NodeDiscoveryType.DISCOVERY_SERVICE to NodeDiscoveryType.NONE", "operations": ["UPD QualifiedName: NodeDiscoveryType.DISCOVERY_SERVICE from NodeDiscoveryType.DISCOVERY_SERVICE to NodeDiscoveryType.NONE"]}]}}, {"AstyanaxConfigurationImpl_diff": {"operations": ["Update QualifiedName: NodeDiscoveryType.DISCOVERY_SERVICE(84) to NodeDiscoveryType.NONE"]}}, {"ReverseIndexQuery_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS PrimitiveType: int to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 18", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: shardColumnLimit to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS SimpleType: ReverseIndexQuery to ParameterizedType: ReverseIndexQuery<K,C,V> at 0", "INS SimpleType: V to ParameterizedType: ReverseIndexQuery<K,C,V> at 3", "INS ParameterizedType: ReverseIndexQuery<K,C,V> to MethodDeclaration at 1", "INS SimpleName: size to Assignment: = at 1", "INS SimpleType: C to ParameterizedType: ReverseIndexQuery<K,C,V> at 2", "INS SimpleName: C to SimpleType: C at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: V to SimpleType: V at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS SimpleName: ReverseIndexQuery to SimpleType: ReverseIndexQuery at 0", "INS SimpleName: K to SimpleType: K at 0", "INS SimpleType: K to ParameterizedType: ReverseIndexQuery<K,C,V> at 1", "INS ThisExpression to FieldAccess at 0", "INS ReturnStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: shardColumnLimit to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: size to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS ThisExpression to ReturnStatement at 0", "INS SimpleName: setShardNextPageSize to MethodDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Set the number shard keys to fetch for the first query to TagElement at 0", "INS SimpleName: size to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @return to Javadoc at 2", "INS TagElement to Javadoc at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SimpleName: size to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement: Set the number columns to read from each shard when paginating. to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: shardColumnLimit to VariableDeclarationFragment at 1", "INS SimpleName: pageSize to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: columnLimit to Assignment: = at 1", "INS SimpleName: pageSize to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to IfStatement at 1", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS IfStatement to Block at 4", "INS SimpleName: pageSize to Assignment: = at 0"]}, {"root": "UPDATE from columnLimit to pageSize", "operations": ["UPD SimpleName: columnLimit from columnLimit to pageSize", "UPD SimpleName: columnLimit from columnLimit to pageSize"]}]}}, {"ReverseIndexQuery_diff": {"operations": ["Insert FieldDeclaration(260) into TypeDeclaration: class(1528) at 18", "Insert MethodDeclaration(731) into TypeDeclaration: class(1528) at 38", "Insert Modifier: private(255) into FieldDeclaration(260) at 0", "Insert PrimitiveType: int(256) into FieldDeclaration(260) at 1", "Insert VariableDeclarationFragment(259) into FieldDeclaration(260) at 2", "Insert Javadoc(653) into MethodDeclaration(677) at 0", "Insert Javadoc(683) into MethodDeclaration(707) at 0", "Insert Modifier: public(708) into MethodDeclaration(731) at 0", "Insert ParameterizedType: ReverseIndexQuery<K,C,V>(717) into MethodDeclaration(731) at 1", "Insert SimpleName: setShardNextPageSize(718) into MethodDeclaration(731) at 2", "Insert SingleVariableDeclaration(721) into MethodDeclaration(731) at 3", "Insert Block(730) into MethodDeclaration(731) at 4", "Insert SimpleName: shardColumnLimit(257) into VariableDeclarationFragment(259) at 0", "Insert NumberLiteral: 0(258) into VariableDeclarationFragment(259) at 1", "Insert TagElement(649) into Javadoc(653) at 0", "Insert TagElement: @param(651) into Javadoc(653) at 1", "Insert TagElement: @return(652) into Javadoc(653) at 2", "Insert TagElement(679) into Javadoc(683) at 0", "Insert TagElement: @param(681) into Javadoc(683) at 1", "Insert TagElement: @return(682) into Javadoc(683) at 2", "Insert SimpleType: ReverseIndexQuery(710) into ParameterizedType: ReverseIndexQuery<K,C,V>(717) at 0", "Insert SimpleType: K(712) into ParameterizedType: ReverseIndexQuery<K,C,V>(717) at 1", "Insert SimpleType: C(714) into ParameterizedType: ReverseIndexQuery<K,C,V>(717) at 2", "Insert SimpleType: V(716) into ParameterizedType: ReverseIndexQuery<K,C,V>(717) at 3", "Insert PrimitiveType: int(719) into SingleVariableDeclaration(721) at 0", "Insert SimpleName: size(720) into SingleVariableDeclaration(721) at 1", "Insert ExpressionStatement(727) into Block(730) at 0", "Insert ReturnStatement(729) into Block(730) at 1", "Insert TextElement: Set the number shard keys to fetch for the first query(648) into TagElement(649) at 0", "Insert SimpleName: size(650) into TagElement: @param(651) at 0", "Insert TextElement: Set the number columns to read from each shard when paginating.(678) into TagElement(679) at 0", "Insert SimpleName: size(680) into TagElement: @param(681) at 0", "Insert SimpleName: ReverseIndexQuery(709) into SimpleType: ReverseIndexQuery(710) at 0", "Insert SimpleName: K(711) into SimpleType: K(712) at 0", "Insert SimpleName: C(713) into SimpleType: C(714) at 0", "Insert SimpleName: V(715) into SimpleType: V(716) at 0", "Insert Assignment: =(726) into ExpressionStatement(727) at 0", "Insert ThisExpression(728) into ReturnStatement(729) at 0", "Insert FieldAccess(724) into Assignment: =(726) at 0", "Insert SimpleName: size(725) into Assignment: =(726) at 1", "Insert ThisExpression(722) into FieldAccess(724) at 0", "Insert SimpleName: shardColumnLimit(723) into FieldAccess(724) at 1", "Insert VariableDeclarationStatement(1227) into Block(1428) at 3", "Insert IfStatement(1235) into Block(1428) at 4", "Insert PrimitiveType: int(1223) into VariableDeclarationStatement(1227) at 0", "Insert VariableDeclarationFragment(1226) into VariableDeclarationStatement(1227) at 1", "Insert InfixExpression: ==(1230) into IfStatement(1235) at 0", "Insert ExpressionStatement(1234) into IfStatement(1235) at 1", "Insert SimpleName: pageSize(1224) into VariableDeclarationFragment(1226) at 0", "Insert SimpleName: shardColumnLimit(1225) into VariableDeclarationFragment(1226) at 1", "Insert SimpleName: pageSize(1228) into InfixExpression: ==(1230) at 0", "Insert NumberLiteral: 0(1229) into InfixExpression: ==(1230) at 1", "Insert Assignment: =(1233) into ExpressionStatement(1234) at 0", "Insert SimpleName: pageSize(1231) into Assignment: =(1233) at 0", "Insert SimpleName: columnLimit(1232) into Assignment: =(1233) at 1", "Update SimpleName: columnLimit(1359) to pageSize", "Update SimpleName: columnLimit(1244) to pageSize"]}}, {"AsyncResult_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: See the License for the specific language governing permissions and", "DEL Javadoc", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: Licensed under the Apache License, Version 2.0 (the \"License\");", "DEL PackageDeclaration", "DEL TagElement", "DEL TextElement: you may not use this file except in compliance with the License.", "DEL QualifiedName: com.netflix.astyanax.thrift", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: limitations under the License.", "DEL TextElement: Copyright 2011 Netflix", "DEL TextElement: You may obtain a copy of the License at"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL SimpleType: R", "DEL SimpleType: Exception", "DEL SimpleName: R", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: AsyncResult", "DEL SimpleName: R", "DEL SimpleName: exception", "DEL SimpleName: result", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: R", "DEL ExpressionStatement", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleType: Exception", "DEL TypeParameter", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: result", "DEL SimpleType: R", "DEL Assignment: =", "DEL SimpleName: result", "DEL SimpleName: exception", "DEL FieldDeclaration", "DEL ThisExpression", "DEL SimpleName: Exception", "DEL SimpleName: AsyncResult", "DEL SimpleName: Exception", "DEL Block", "DEL SimpleName: exception", "DEL SimpleName: result", "DEL SimpleName: exception"]}]}}, {"AsyncResult_diff": {"operations": ["Delete TextElement: Copyright 2011 Netflix(0)", "Delete TextElement: Licensed under the Apache License, Version 2.0 (the \"License\");(1)", "Delete TextElement: you may not use this file except in compliance with the License.(2)", "Delete TextElement: You may obtain a copy of the License at(3)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(4)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(5)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(6)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(7)", "Delete TextElement: See the License for the specific language governing permissions and(8)", "Delete TextElement: limitations under the License.(9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete QualifiedName: com.netflix.astyanax.thrift(12)", "Delete PackageDeclaration(13)", "Delete SimpleName: AsyncResult(14)", "Delete SimpleName: R(15)", "Delete TypeParameter(16)", "Delete Modifier: final(17)", "Delete SimpleName: R(18)", "Delete SimpleType: R(19)", "Delete SimpleName: result(20)", "Delete VariableDeclarationFragment(21)", "Delete FieldDeclaration(22)", "Delete Modifier: final(23)", "Delete SimpleName: Exception(24)", "Delete SimpleType: Exception(25)", "Delete SimpleName: exception(26)", "Delete VariableDeclarationFragment(27)", "Delete FieldDeclaration(28)", "Delete SimpleName: AsyncResult(29)", "Delete SimpleName: R(30)", "Delete SimpleType: R(31)", "Delete SimpleName: result(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: Exception(34)", "Delete SimpleType: Exception(35)", "Delete SimpleName: exception(36)", "Delete SingleVariableDeclaration(37)", "Delete ThisExpression(38)", "Delete SimpleName: result(39)", "Delete FieldAccess(40)", "Delete SimpleName: result(41)", "Delete Assignment: =(42)", "Delete ExpressionStatement(43)", "Delete ThisExpression(44)", "Delete SimpleName: exception(45)", "Delete FieldAccess(46)", "Delete SimpleName: exception(47)", "Delete Assignment: =(48)", "Delete ExpressionStatement(49)", "Delete Block(50)", "Delete MethodDeclaration(51)", "Delete TypeDeclaration: class(52)"]}}, {"ThriftColumnFamilyQueryImpl_cluster": {"actions": [{"root": "INS NullLiteral to ReturnStatement at 0", "operations": ["INS NullLiteral to ReturnStatement at 0"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: toByteBuffer", "DEL FieldAccess", "DEL SimpleName: next", "DEL SimpleName: columnFamily", "DEL SimpleName: getToken", "DEL SimpleName: getKeySerializer", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: partitioner", "DEL SimpleName: token", "DEL SimpleName: iterator", "DEL SimpleName: keys", "DEL MethodInvocation"]}]}}, {"ThriftColumnFamilyQueryImpl_diff": {"operations": ["Insert NullLiteral(1854) into ReturnStatement(1855) at 0", "Delete SimpleName: partitioner(1854)", "Delete SimpleName: getToken(1855)", "Delete SimpleName: columnFamily(1856)", "Delete SimpleName: getKeySerializer(1857)", "Delete MethodInvocation(1858)", "Delete SimpleName: toByteBuffer(1859)", "Delete SimpleName: keys(1860)", "Delete SimpleName: iterator(1861)", "Delete MethodInvocation(1862)", "Delete SimpleName: next(1863)", "Delete MethodInvocation(1864)", "Delete MethodInvocation(1865)", "Delete MethodInvocation(1866)", "Delete SimpleName: token(1867)", "Delete FieldAccess(1868)"]}}, {"ThriftKeyspaceImpl_cluster": {"actions": []}}, {"ThriftKeyspaceImpl_diff": {"operations": []}}, {"SmaLatencyScoreStrategyImpl_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 7", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS PrimitiveType: int to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: windowSize to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: badnessThreshold to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS PrimitiveType: double to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: getUpdateInterval to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: updateInterval to ReturnStatement at 0", "INS Block to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: getBadnessThreshold to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Block to MethodDeclaration at 3", "INS SimpleName: badnessThreshold to ReturnStatement at 0", "INS PrimitiveType: double to MethodDeclaration at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 16", "INS Modifier: public to MethodDeclaration at 0", "INS PrimitiveType: int to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS Block to MethodDeclaration at 3", "INS SimpleName: getName to MethodDeclaration at 2", "INS StringLiteral: \"SMA\" to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 2", "operations": ["INS PrimitiveType: int to FieldDeclaration at 2"]}, {"root": "INS PrimitiveType: int to FieldDeclaration at 2", "operations": ["INS PrimitiveType: int to FieldDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: resetInterval to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: double to SingleVariableDeclaration at 0", "INS SimpleName: badnessThreshold to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS PrimitiveType: int to MethodDeclaration at 1", "operations": ["INS PrimitiveType: int to MethodDeclaration at 1"]}, {"root": "UPDATE from getLatencyAwareResetInterval to getResetInterval", "operations": ["UPD SimpleName: getLatencyAwareResetInterval from getLatencyAwareResetInterval to getResetInterval", "UPD SimpleName: getName from getName to getResetInterval", "UPD SimpleName: getLatencyAwareResetInterval from getLatencyAwareResetInterval to getResetInterval", "UPD SimpleName: getLatencyAwareResetInterval from getLatencyAwareResetInterval to getResetInterval"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 0", "MOV Block to MethodDeclaration at 3", "MOV SimpleName: getConfig to MethodDeclaration at 2"]}, {"root": "UPDATE from getLatencyAwareWindowSize to getWindowSize", "operations": ["UPD SimpleName: getLatencyAwareWindowSize from getLatencyAwareWindowSize to getWindowSize", "UPD SimpleName: getConfig from getConfig to getWindowSize"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 1"]}, {"root": "UPDATE from config to updateInterval", "operations": ["UPD SimpleName: config from config to updateInterval", "UPD SimpleName: config from config to updateInterval", "UPD SimpleName: config from config to updateInterval"]}, {"root": "UPDATE from name to resetInterval", "operations": ["UPD SimpleName: name from name to resetInterval"]}, {"root": "INS PrimitiveType: int to SingleVariableDeclaration at 0", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: updateInterval to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: updateInterval to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from name to windowSize", "operations": ["UPD SimpleName: name from name to windowSize", "UPD SimpleName: name from name to windowSize", "UPD SimpleName: name from name to windowSize", "UPD SimpleName: config from config to windowSize"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: name to SingleVariableDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: resetInterval to FieldAccess at 1", "INS SimpleName: resetInterval to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: badnessThreshold to FieldAccess at 1", "INS ExpressionStatement to Block at 2", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: badnessThreshold to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS SimpleName: resetInterval to ReturnStatement at 0", "operations": ["INS SimpleName: resetInterval to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 1", "operations": ["INS ThisExpression to ClassInstanceCreation at 1"]}, {"root": "UPDATE from config to toString", "operations": ["UPD SimpleName: config from config to toString"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: config to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 0"]}, {"root": "UPDATE from \",sen=\" to \"]\"", "operations": ["UPD StringLiteral: \",sen=\" from \",sen=\" to \"]\""]}, {"root": "UPDATE from getLatencyAwareUpdateInterval to getUpdateInterval", "operations": ["UPD SimpleName: getLatencyAwareUpdateInterval from getLatencyAwareUpdateInterval to getUpdateInterval", "UPD SimpleName: getLatencyAwareUpdateInterval from getLatencyAwareUpdateInterval to getUpdateInterval", "UPD SimpleName: getLatencyAwareUpdateInterval from getLatencyAwareUpdateInterval to getUpdateInterval"]}, {"root": "UPDATE from getLatencyAwareBadnessThreshold to getBadnessThreshold", "operations": ["UPD SimpleName: getLatencyAwareBadnessThreshold from getLatencyAwareBadnessThreshold to getBadnessThreshold", "UPD SimpleName: getLatencyAwareBadnessThreshold from getLatencyAwareBadnessThreshold to getBadnessThreshold"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration"]}, {"root": "DEL SimpleType: ConnectionPoolConfiguration", "operations": ["DEL SimpleName: ConnectionPoolConfiguration", "DEL SimpleType: ConnectionPoolConfiguration"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: ConnectionPoolConfiguration", "DEL StringLiteral: \"SMA\"", "DEL Modifier: public", "DEL SimpleName: config", "DEL SimpleName: config", "DEL SimpleType: ConnectionPoolConfiguration", "DEL MethodDeclaration", "DEL ConstructorInvocation", "DEL SimpleName: SmaLatencyScoreStrategyImpl", "DEL SingleVariableDeclaration", "DEL Block"]}, {"root": "DEL SimpleType: ConnectionPoolConfiguration", "operations": ["DEL SimpleType: ConnectionPoolConfiguration", "DEL SimpleName: ConnectionPoolConfiguration"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: String"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getConfig"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: name"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: ConnectionPoolConfiguration", "DEL MethodDeclaration", "DEL SimpleName: ConnectionPoolConfiguration"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: config", "operations": ["DEL SimpleName: config"]}, {"root": "DEL SimpleName: append", "operations": ["DEL SimpleName: append"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getLatencyAwareSentinelCompare", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"]\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: toString"]}]}}, {"SmaLatencyScoreStrategyImpl_diff": {"operations": ["Move FieldDeclaration(44) into TypeDeclaration: class(681) at 6", "Move MethodDeclaration(558) into TypeDeclaration: class(681) at 11", "Insert FieldDeclaration(70) into TypeDeclaration: class(681) at 7", "Insert FieldDeclaration(76) into TypeDeclaration: class(681) at 8", "Insert MethodDeclaration(185) into TypeDeclaration: class(681) at 12", "Insert MethodDeclaration(199) into TypeDeclaration: class(681) at 14", "Insert MethodDeclaration(206) into TypeDeclaration: class(681) at 15", "Insert MethodDeclaration(591) into TypeDeclaration: class(681) at 21", "Insert PrimitiveType: int(55) into FieldDeclaration(58) at 2", "Insert PrimitiveType: int(61) into FieldDeclaration(64) at 2", "Insert Modifier: private(65) into FieldDeclaration(70) at 0", "Insert Modifier: final(66) into FieldDeclaration(70) at 1", "Insert PrimitiveType: int(67) into FieldDeclaration(70) at 2", "Insert VariableDeclarationFragment(69) into FieldDeclaration(70) at 3", "Insert Modifier: private(71) into FieldDeclaration(76) at 0", "Insert Modifier: final(72) into FieldDeclaration(76) at 1", "Insert PrimitiveType: double(73) into FieldDeclaration(76) at 2", "Insert VariableDeclarationFragment(75) into FieldDeclaration(76) at 3", "Insert SingleVariableDeclaration(84) into MethodDeclaration(144) at 3", "Insert SingleVariableDeclaration(87) into MethodDeclaration(144) at 4", "Insert SingleVariableDeclaration(90) into MethodDeclaration(144) at 5", "Move ExpressionStatement(129) into Block(143) at 1", "Insert Modifier: public(179) into MethodDeclaration(185) at 0", "Insert PrimitiveType: int(180) into MethodDeclaration(185) at 1", "Insert SimpleName: getUpdateInterval(181) into MethodDeclaration(185) at 2", "Insert Block(184) into MethodDeclaration(185) at 3", "Insert PrimitiveType: int(187) into MethodDeclaration(192) at 1", "Update SimpleName: getName(552) to getResetInterval", "Move Modifier: public(559) into MethodDeclaration(199) at 0", "Insert PrimitiveType: double(194) into MethodDeclaration(199) at 1", "Insert SimpleName: getBadnessThreshold(195) into MethodDeclaration(199) at 2", "Insert Block(198) into MethodDeclaration(199) at 3", "Insert Modifier: public(200) into MethodDeclaration(206) at 0", "Insert PrimitiveType: int(201) into MethodDeclaration(206) at 1", "Update SimpleName: getConfig(562) to getWindowSize", "Move SimpleName: getConfig(562) into MethodDeclaration(206) at 2", "Move Block(565) into MethodDeclaration(206) at 3", "Insert Modifier: public(584) into MethodDeclaration(591) at 0", "Move SimpleType: String(551) into MethodDeclaration(591) at 1", "Insert SimpleName: getName(587) into MethodDeclaration(591) at 2", "Insert Block(590) into MethodDeclaration(591) at 3", "Update SimpleName: config(42) to updateInterval", "Update SimpleName: name(66) to resetInterval", "Insert SimpleName: windowSize(68) into VariableDeclarationFragment(69) at 0", "Insert SimpleName: badnessThreshold(74) into VariableDeclarationFragment(75) at 0", "Insert PrimitiveType: int(79) into SingleVariableDeclaration(81) at 0", "Insert SimpleName: updateInterval(80) into SingleVariableDeclaration(81) at 1", "Insert PrimitiveType: int(82) into SingleVariableDeclaration(84) at 0", "Insert SimpleName: resetInterval(83) into SingleVariableDeclaration(84) at 1", "Insert PrimitiveType: int(85) into SingleVariableDeclaration(87) at 0", "Update SimpleName: name(88) to windowSize", "Move SimpleName: name(88) into SingleVariableDeclaration(87) at 1", "Insert PrimitiveType: double(88) into SingleVariableDeclaration(90) at 0", "Insert SimpleName: badnessThreshold(89) into SingleVariableDeclaration(90) at 1", "Insert ExpressionStatement(102) into Block(143) at 1", "Insert ExpressionStatement(108) into Block(143) at 2", "Insert ReturnStatement(183) into Block(184) at 0", "Insert ReturnStatement(197) into Block(198) at 0", "Insert ReturnStatement(589) into Block(590) at 0", "Insert Assignment: =(101) into ExpressionStatement(102) at 0", "Insert Assignment: =(107) into ExpressionStatement(108) at 0", "Insert SimpleName: updateInterval(182) into ReturnStatement(183) at 0", "Insert SimpleName: resetInterval(189) into ReturnStatement(190) at 0", "Insert SimpleName: badnessThreshold(196) into ReturnStatement(197) at 0", "Update SimpleName: config(563) to windowSize", "Insert StringLiteral: \"SMA\"(588) into ReturnStatement(589) at 0", "Move MethodInvocation(619) into ReturnStatement(638) at 0", "Update SimpleName: config(93) to updateInterval", "Insert FieldAccess(99) into Assignment: =(101) at 0", "Insert SimpleName: resetInterval(100) into Assignment: =(101) at 1", "Insert FieldAccess(105) into Assignment: =(107) at 0", "Insert SimpleName: badnessThreshold(106) into Assignment: =(107) at 1", "Update SimpleName: name(127) to windowSize", "Insert ThisExpression(151) into ClassInstanceCreation(152) at 1", "Update SimpleName: config(616) to toString", "Move SimpleName: config(616) into MethodInvocation(637) at 1", "Update SimpleName: config(91) to updateInterval", "Insert ThisExpression(97) into FieldAccess(99) at 0", "Insert SimpleName: resetInterval(98) into FieldAccess(99) at 1", "Insert ThisExpression(103) into FieldAccess(105) at 0", "Insert SimpleName: badnessThreshold(104) into FieldAccess(105) at 1", "Update SimpleName: name(125) to windowSize", "Move ClassInstanceCreation(276) into MethodInvocation(269) at 0", "Move ClassInstanceCreation(226) into MethodInvocation(317) at 0", "Update StringLiteral: \",sen=\"(613) to \"]\"", "Update SimpleName: getLatencyAwareUpdateInterval(229) to getUpdateInterval", "Update SimpleName: getLatencyAwareResetInterval(279) to getResetInterval", "Update SimpleName: getLatencyAwareBadnessThreshold(609) to getBadnessThreshold", "Update SimpleName: getLatencyAwareBadnessThreshold(517) to getBadnessThreshold", "Update SimpleName: getLatencyAwareUpdateInterval(601) to getUpdateInterval", "Update SimpleName: getLatencyAwareUpdateInterval(215) to getUpdateInterval", "Update SimpleName: getLatencyAwareResetInterval(265) to getResetInterval", "Update SimpleName: getLatencyAwareResetInterval(593) to getResetInterval", "Update SimpleName: getLatencyAwareWindowSize(585) to getWindowSize", "Delete QualifiedName: com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: ConnectionPoolConfiguration(40)", "Delete SimpleType: ConnectionPoolConfiguration(41)", "Delete SimpleName: String(64)", "Delete SimpleType: String(65)", "Delete Modifier: public(69)", "Delete SimpleName: SmaLatencyScoreStrategyImpl(70)", "Delete SimpleName: ConnectionPoolConfiguration(71)", "Delete SimpleType: ConnectionPoolConfiguration(72)", "Delete SimpleName: config(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: config(75)", "Delete StringLiteral: \"SMA\"(76)", "Delete ConstructorInvocation(77)", "Delete Block(78)", "Delete MethodDeclaration(79)", "Delete SimpleName: ConnectionPoolConfiguration(82)", "Delete SimpleType: ConnectionPoolConfiguration(83)", "Delete SimpleName: config(84)", "Delete SimpleName: String(86)", "Delete SimpleType: String(87)", "Delete SingleVariableDeclaration(89)", "Delete SimpleName: getConfig(138)", "Delete MethodInvocation(139)", "Delete ThisExpression(553)", "Delete SimpleName: name(554)", "Delete FieldAccess(555)", "Delete SimpleName: config(214)", "Delete SimpleName: config(228)", "Delete SimpleName: config(264)", "Delete SimpleName: config(278)", "Delete SimpleName: config(516)", "Delete SimpleName: ConnectionPoolConfiguration(560)", "Delete SimpleType: ConnectionPoolConfiguration(561)", "Delete MethodDeclaration(566)", "Delete SimpleName: config(584)", "Delete SimpleName: config(592)", "Delete SimpleName: config(600)", "Delete SimpleName: config(608)", "Delete SimpleName: append(615)", "Delete SimpleName: getLatencyAwareSentinelCompare(617)", "Delete MethodInvocation(618)", "Delete SimpleName: append(620)", "Delete StringLiteral: \"]\"(621)", "Delete MethodInvocation(622)", "Delete SimpleName: toString(623)", "Delete MethodInvocation(624)"]}}, {"SmaLatencyScoreStrategyInstanceImpl_cluster": {"actions": [{"root": "UPDATE from ConnectionPoolConfiguration to SmaLatencyScoreStrategyImpl", "operations": ["UPD SimpleType: ConnectionPoolConfiguration from ConnectionPoolConfiguration to SmaLatencyScoreStrategyImpl", "UPD SimpleName: ConnectionPoolConfiguration from ConnectionPoolConfiguration to SmaLatencyScoreStrategyImpl", "UPD SimpleType: ConnectionPoolConfiguration from ConnectionPoolConfiguration to SmaLatencyScoreStrategyImpl", "UPD SimpleName: ConnectionPoolConfiguration from ConnectionPoolConfiguration to SmaLatencyScoreStrategyImpl"]}, {"root": "UPDATE from config to strategy", "operations": ["UPD SimpleName: config from config to strategy", "UPD SimpleName: config from config to strategy", "UPD SimpleName: config from config to strategy", "UPD SimpleName: config from config to strategy", "UPD SimpleName: config from config to strategy", "UPD SimpleName: config from config to strategy"]}, {"root": "UPDATE from getLatencyAwareWindowSize to getWindowSize", "operations": ["UPD SimpleName: getLatencyAwareWindowSize from getLatencyAwareWindowSize to getWindowSize", "UPD SimpleName: getLatencyAwareWindowSize from getLatencyAwareWindowSize to getWindowSize"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration"]}]}}, {"SmaLatencyScoreStrategyInstanceImpl_diff": {"operations": ["Update SimpleType: ConnectionPoolConfiguration(33) to SmaLatencyScoreStrategyImpl", "Update SimpleName: ConnectionPoolConfiguration(32) to SmaLatencyScoreStrategyImpl", "Update SimpleName: config(34) to strategy", "Update SimpleType: ConnectionPoolConfiguration(58) to SmaLatencyScoreStrategyImpl", "Update SimpleName: config(59) to strategy", "Update SimpleName: ConnectionPoolConfiguration(57) to SmaLatencyScoreStrategyImpl", "Update SimpleName: config(64) to strategy", "Update SimpleName: config(62) to strategy", "Update SimpleName: config(93) to strategy", "Update SimpleName: getLatencyAwareWindowSize(94) to getWindowSize", "Update SimpleName: config(196) to strategy", "Update SimpleName: getLatencyAwareWindowSize(197) to getWindowSize", "Delete QualifiedName: com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration(6)", "Delete ImportDeclaration(7)"]}}], "commit_stats": [{"total_files": 11, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "True"}]}