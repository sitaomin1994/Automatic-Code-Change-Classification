{"application": "apache-helix", "csha": "e2a5c62fa43c015dec0f0a7e295dabeb9ab15886", "files": [{"BaseDataAccessor_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: THROW_EXCEPTION_IFNOTEXIST to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: public to FieldDeclaration at 0", "INS PrimitiveType: int to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS NumberLiteral: 0x10 to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: THROW_EXCEPTION_IFNOTEXIST to InfixExpression: & at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS ParenthesizedExpression to InfixExpression: > at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SimpleName: options to InfixExpression: & at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: isThrowExceptionIfNotExist to MethodDeclaration at 3", "INS InfixExpression: > to ReturnStatement at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS Modifier: static to MethodDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: options to SingleVariableDeclaration at 1"]}]}}, {"BaseDataAccessor_diff": {"operations": ["Insert FieldDeclaration(55) into TypeDeclaration: class(124) at 7", "Insert MethodDeclaration(123) into TypeDeclaration: class(124) at 9", "Insert Modifier: public(49) into FieldDeclaration(55) at 0", "Insert Modifier: static(50) into FieldDeclaration(55) at 1", "Insert PrimitiveType: int(51) into FieldDeclaration(55) at 2", "Insert VariableDeclarationFragment(54) into FieldDeclaration(55) at 3", "Insert Modifier: public(108) into MethodDeclaration(123) at 0", "Insert Modifier: static(109) into MethodDeclaration(123) at 1", "Insert PrimitiveType: boolean(110) into MethodDeclaration(123) at 2", "Insert SimpleName: isThrowExceptionIfNotExist(111) into MethodDeclaration(123) at 3", "Insert SingleVariableDeclaration(114) into MethodDeclaration(123) at 4", "Insert Block(122) into MethodDeclaration(123) at 5", "Insert SimpleName: THROW_EXCEPTION_IFNOTEXIST(52) into VariableDeclarationFragment(54) at 0", "Insert NumberLiteral: 0x10(53) into VariableDeclarationFragment(54) at 1", "Insert PrimitiveType: int(112) into SingleVariableDeclaration(114) at 0", "Insert SimpleName: options(113) into SingleVariableDeclaration(114) at 1", "Insert ReturnStatement(121) into Block(122) at 0", "Insert InfixExpression: >(120) into ReturnStatement(121) at 0", "Insert ParenthesizedExpression(118) into InfixExpression: >(120) at 0", "Insert NumberLiteral: 0(119) into InfixExpression: >(120) at 1", "Insert InfixExpression: &(117) into ParenthesizedExpression(118) at 0", "Insert SimpleName: options(115) into InfixExpression: &(117) at 0", "Insert SimpleName: THROW_EXCEPTION_IFNOTEXIST(116) into InfixExpression: &(117) at 1"]}}, {"HelixManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 24", "operations": ["INS SimpleType: ZNRecord to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 1", "INS MethodDeclaration to TypeDeclaration: interface at 24", "INS SimpleName: getHelixPropertyStore to MethodDeclaration at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleType: ZkHelixPropertyStore to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 0", "INS ParameterizedType: ZkHelixPropertyStore<ZNRecord> to MethodDeclaration at 0", "INS SimpleName: ZkHelixPropertyStore to SimpleType: ZkHelixPropertyStore at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}]}}, {"HelixManager_diff": {"operations": ["Insert ImportDeclaration(29) into CompilationUnit(472) at 8", "Insert QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore(28) into ImportDeclaration(29) at 0", "Insert MethodDeclaration(403) into TypeDeclaration: interface(471) at 24", "Insert MarkerAnnotation(389) into MethodDeclaration(396) at 1", "Insert ParameterizedType: ZkHelixPropertyStore<ZNRecord>(401) into MethodDeclaration(403) at 0", "Insert SimpleName: getHelixPropertyStore(402) into MethodDeclaration(403) at 1", "Insert SimpleName: Deprecated(388) into MarkerAnnotation(389) at 0", "Insert SimpleType: ZkHelixPropertyStore(398) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(401) at 0", "Insert SimpleType: ZNRecord(400) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(401) at 1", "Insert SimpleName: ZkHelixPropertyStore(397) into SimpleType: ZkHelixPropertyStore(398) at 0", "Insert SimpleName: ZNRecord(399) into SimpleType: ZNRecord(400) at 0"]}}, {"PropertyPathConfig_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 15", "operations": ["INS StringLiteral: \"/{clusterName}/HELIX_PROPERTYSTORE\" to MethodInvocation at 3", "INS SimpleName: addEntry to MethodInvocation at 0", "INS QualifiedName: PropertyType.HELIX_PROPERTYSTORE to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS ExpressionStatement to Block at 15", "INS MethodInvocation to ExpressionStatement at 0"]}]}}, {"PropertyPathConfig_diff": {"operations": ["Insert ExpressionStatement(352) into Block(533) at 15", "Insert MethodInvocation(351) into ExpressionStatement(352) at 0", "Insert SimpleName: addEntry(347) into MethodInvocation(351) at 0", "Insert QualifiedName: PropertyType.HELIX_PROPERTYSTORE(348) into MethodInvocation(351) at 1", "Insert NumberLiteral: 1(349) into MethodInvocation(351) at 2", "Insert StringLiteral: \"/{clusterName}/HELIX_PROPERTYSTORE\"(350) into MethodInvocation(351) at 3"]}}, {"PropertyType_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 10", "operations": ["INS SimpleName: HELIX_PROPERTYSTORE to EnumConstantDeclaration at 0", "INS BooleanLiteral: false to EnumConstantDeclaration at 3", "INS QualifiedName: Type.CLUSTER to EnumConstantDeclaration at 1", "INS BooleanLiteral: true to EnumConstantDeclaration at 2", "INS EnumConstantDeclaration to EnumDeclaration at 10"]}]}}, {"PropertyType_diff": {"operations": ["Insert EnumConstantDeclaration(82) into EnumDeclaration(507) at 10", "Insert SimpleName: HELIX_PROPERTYSTORE(78) into EnumConstantDeclaration(82) at 0", "Insert QualifiedName: Type.CLUSTER(79) into EnumConstantDeclaration(82) at 1", "Insert BooleanLiteral: true(80) into EnumConstantDeclaration(82) at 2", "Insert BooleanLiteral: false(81) into EnumConstantDeclaration(82) at 3"]}}, {"Message_cluster": {"actions": [{"root": "UPDATE from SetGroupMsgCountDown to setGroupMsgCountDown", "operations": ["UPD SimpleName: SetGroupMsgCountDown from SetGroupMsgCountDown to setGroupMsgCountDown"]}]}}, {"Message_diff": {"operations": ["Update SimpleName: SetGroupMsgCountDown(1394) to setGroupMsgCountDown"]}}, {"DynamicFileHelixManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 42", "operations": ["INS QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 42"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 55", "operations": ["INS ParameterizedType: ZkHelixPropertyStore<ZNRecord> to MethodDeclaration at 2", "INS SimpleType: ZNRecord to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getHelixPropertyStore to MethodDeclaration at 3", "INS SimpleType: ZkHelixPropertyStore to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS SimpleName: ZkHelixPropertyStore to SimpleType: ZkHelixPropertyStore at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 55"]}]}}, {"DynamicFileHelixManager_diff": {"operations": ["Insert ImportDeclaration(97) into CompilationUnit(1292) at 42", "Insert QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore(96) into ImportDeclaration(97) at 0", "Insert MethodDeclaration(1290) into TypeDeclaration: class(1291) at 55", "Insert MarkerAnnotation(1279) into MethodDeclaration(1290) at 0", "Insert Modifier: public(1280) into MethodDeclaration(1290) at 1", "Insert ParameterizedType: ZkHelixPropertyStore<ZNRecord>(1285) into MethodDeclaration(1290) at 2", "Insert SimpleName: getHelixPropertyStore(1286) into MethodDeclaration(1290) at 3", "Insert Block(1289) into MethodDeclaration(1290) at 4", "Insert SimpleName: Override(1278) into MarkerAnnotation(1279) at 0", "Insert SimpleType: ZkHelixPropertyStore(1282) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(1285) at 0", "Insert SimpleType: ZNRecord(1284) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(1285) at 1", "Insert ReturnStatement(1288) into Block(1289) at 0", "Insert SimpleName: ZkHelixPropertyStore(1281) into SimpleType: ZkHelixPropertyStore(1282) at 0", "Insert SimpleName: ZNRecord(1283) into SimpleType: ZNRecord(1284) at 0", "Insert NullLiteral(1287) into ReturnStatement(1288) at 0"]}}, {"StaticFileHelixManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 38", "operations": ["INS ImportDeclaration to CompilationUnit at 38", "INS QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 48", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 48", "INS ReturnStatement to Block at 0", "INS SimpleType: ZNRecord to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: ZkHelixPropertyStore to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 0", "INS SimpleName: getHelixPropertyStore to MethodDeclaration at 3", "INS ParameterizedType: ZkHelixPropertyStore<ZNRecord> to MethodDeclaration at 2", "INS NullLiteral to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: ZkHelixPropertyStore to SimpleType: ZkHelixPropertyStore at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0"]}]}}, {"StaticFileHelixManager_diff": {"operations": ["Insert ImportDeclaration(89) into CompilationUnit(1753) at 38", "Insert QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore(88) into ImportDeclaration(89) at 0", "Insert MethodDeclaration(1751) into TypeDeclaration: class(1752) at 48", "Insert MarkerAnnotation(1740) into MethodDeclaration(1751) at 0", "Insert Modifier: public(1741) into MethodDeclaration(1751) at 1", "Insert ParameterizedType: ZkHelixPropertyStore<ZNRecord>(1746) into MethodDeclaration(1751) at 2", "Insert SimpleName: getHelixPropertyStore(1747) into MethodDeclaration(1751) at 3", "Insert Block(1750) into MethodDeclaration(1751) at 4", "Insert SimpleName: Override(1739) into MarkerAnnotation(1740) at 0", "Insert SimpleType: ZkHelixPropertyStore(1743) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(1746) at 0", "Insert SimpleType: ZNRecord(1745) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(1746) at 1", "Insert ReturnStatement(1749) into Block(1750) at 0", "Insert SimpleName: ZkHelixPropertyStore(1742) into SimpleType: ZkHelixPropertyStore(1743) at 0", "Insert SimpleName: ZNRecord(1744) into SimpleType: ZNRecord(1745) at 0", "Insert NullLiteral(1748) into ReturnStatement(1749) at 0"]}}, {"WriteThroughCache_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: com.linkedin.helix.BaseDataAccessor.Option to ImportDeclaration at 0"]}, {"root": "INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4", "operations": ["INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}]}}, {"WriteThroughCache_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(304) at 7", "Insert QualifiedName: com.linkedin.helix.BaseDataAccessor.Option(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST(211) into MethodInvocation(212) at 4", "Delete NumberLiteral: 0(209)"]}}, {"ZKHelixManager_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 65", "operations": ["INS ImportDeclaration to CompilationUnit at 65", "INS QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 27", "operations": ["INS SimpleName: ZkHelixPropertyStore to SimpleType: ZkHelixPropertyStore at 0", "INS ParameterizedType: ZkHelixPropertyStore<ZNRecord> to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: _helixPropertyStore to VariableDeclarationFragment at 0", "INS SimpleType: ZkHelixPropertyStore to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 0", "INS SimpleType: ZNRecord to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS FieldDeclaration to TypeDeclaration: class at 27"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 67", "operations": ["INS SimpleName: ZkHelixPropertyStore to SimpleType: ZkHelixPropertyStore at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: _helixPropertyStore to ReturnStatement at 0", "INS SimpleName: path to ClassInstanceCreation at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getHelixPropertyStore to MethodDeclaration at 4", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: _zkClient to ClassInstanceCreation at 1", "INS SimpleType: ZNRecord to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ZkBaseDataAccessor to ParameterizedType: ZkBaseDataAccessor<ZNRecord> at 0", "INS SimpleType: ZNRecord to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 1", "INS SimpleName: ZkHelixPropertyStore to SimpleType: ZkHelixPropertyStore at 0", "INS SimpleName: PropertyPathConfig to MethodInvocation at 0", "INS SimpleName: _helixPropertyStore to InfixExpression: == at 0", "INS SimpleName: path to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: getPath to MethodInvocation at 1", "INS ParameterizedType: ZkHelixPropertyStore<ZNRecord> to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: _clusterName to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NullLiteral to ClassInstanceCreation at 3", "INS Modifier: public to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS MethodDeclaration to TypeDeclaration: class at 67", "INS ParameterizedType: ZkHelixPropertyStore<ZNRecord> to MethodDeclaration at 3", "INS SimpleName: ZkBaseDataAccessor to SimpleType: ZkBaseDataAccessor at 0", "INS Modifier: synchronized to MethodDeclaration at 2", "INS SimpleType: ZkHelixPropertyStore to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 0", "INS SimpleType: ZkHelixPropertyStore to ParameterizedType: ZkHelixPropertyStore<ZNRecord> at 0", "INS SimpleName: checkConnected to MethodInvocation at 0", "INS QualifiedName: PropertyType.HELIX_PROPERTYSTORE to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleType: ZNRecord to ParameterizedType: ZkBaseDataAccessor<ZNRecord> at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS ParameterizedType: ZkBaseDataAccessor<ZNRecord> to ClassInstanceCreation at 0", "INS InfixExpression: == to IfStatement at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: ZNRecord to SimpleType: ZNRecord at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: _helixPropertyStore to Assignment: = at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}]}}, {"ZKHelixManager_diff": {"operations": ["Insert ImportDeclaration(143) into CompilationUnit(2979) at 65", "Insert QualifiedName: com.linkedin.helix.store.zk.ZkHelixPropertyStore(142) into ImportDeclaration(143) at 0", "Insert FieldDeclaration(333) into TypeDeclaration: class(2978) at 27", "Insert MethodDeclaration(2827) into TypeDeclaration: class(2978) at 67", "Insert Modifier: private(325) into FieldDeclaration(333) at 0", "Insert ParameterizedType: ZkHelixPropertyStore<ZNRecord>(330) into FieldDeclaration(333) at 1", "Insert VariableDeclarationFragment(332) into FieldDeclaration(333) at 2", "Insert MarkerAnnotation(2731) into MethodDeclaration(2777) at 0", "Insert MarkerAnnotation(2779) into MethodDeclaration(2827) at 0", "Insert Modifier: public(2780) into MethodDeclaration(2827) at 1", "Insert Modifier: synchronized(2781) into MethodDeclaration(2827) at 2", "Insert ParameterizedType: ZkHelixPropertyStore<ZNRecord>(2786) into MethodDeclaration(2827) at 3", "Insert SimpleName: getHelixPropertyStore(2787) into MethodDeclaration(2827) at 4", "Insert Block(2826) into MethodDeclaration(2827) at 5", "Insert SimpleType: ZkHelixPropertyStore(327) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(330) at 0", "Insert SimpleType: ZNRecord(329) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(330) at 1", "Insert SimpleName: _helixPropertyStore(331) into VariableDeclarationFragment(332) at 0", "Insert SimpleName: Deprecated(2730) into MarkerAnnotation(2731) at 0", "Insert SimpleName: Override(2778) into MarkerAnnotation(2779) at 0", "Insert SimpleType: ZkHelixPropertyStore(2783) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(2786) at 0", "Insert SimpleType: ZNRecord(2785) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(2786) at 1", "Insert ExpressionStatement(2790) into Block(2826) at 0", "Insert IfStatement(2823) into Block(2826) at 1", "Insert ReturnStatement(2825) into Block(2826) at 2", "Insert SimpleName: ZkHelixPropertyStore(326) into SimpleType: ZkHelixPropertyStore(327) at 0", "Insert SimpleName: ZNRecord(328) into SimpleType: ZNRecord(329) at 0", "Insert SimpleName: ZkHelixPropertyStore(2782) into SimpleType: ZkHelixPropertyStore(2783) at 0", "Insert SimpleName: ZNRecord(2784) into SimpleType: ZNRecord(2785) at 0", "Insert MethodInvocation(2789) into ExpressionStatement(2790) at 0", "Insert InfixExpression: ==(2793) into IfStatement(2823) at 0", "Insert Block(2822) into IfStatement(2823) at 1", "Insert SimpleName: _helixPropertyStore(2824) into ReturnStatement(2825) at 0", "Insert SimpleName: checkConnected(2788) into MethodInvocation(2789) at 0", "Insert SimpleName: _helixPropertyStore(2791) into InfixExpression: ==(2793) at 0", "Insert NullLiteral(2792) into InfixExpression: ==(2793) at 1", "Insert VariableDeclarationStatement(2803) into Block(2822) at 0", "Insert ExpressionStatement(2821) into Block(2822) at 1", "Insert SimpleType: String(2795) into VariableDeclarationStatement(2803) at 0", "Insert VariableDeclarationFragment(2802) into VariableDeclarationStatement(2803) at 1", "Insert Assignment: =(2820) into ExpressionStatement(2821) at 0", "Insert SimpleName: String(2794) into SimpleType: String(2795) at 0", "Insert SimpleName: path(2796) into VariableDeclarationFragment(2802) at 0", "Insert MethodInvocation(2801) into VariableDeclarationFragment(2802) at 1", "Insert SimpleName: _helixPropertyStore(2804) into Assignment: =(2820) at 0", "Insert ClassInstanceCreation(2819) into Assignment: =(2820) at 1", "Insert SimpleName: PropertyPathConfig(2797) into MethodInvocation(2801) at 0", "Insert SimpleName: getPath(2798) into MethodInvocation(2801) at 1", "Insert QualifiedName: PropertyType.HELIX_PROPERTYSTORE(2799) into MethodInvocation(2801) at 2", "Insert SimpleName: _clusterName(2800) into MethodInvocation(2801) at 3", "Insert ParameterizedType: ZkHelixPropertyStore<ZNRecord>(2809) into ClassInstanceCreation(2819) at 0", "Insert ClassInstanceCreation(2816) into ClassInstanceCreation(2819) at 1", "Insert SimpleName: path(2817) into ClassInstanceCreation(2819) at 2", "Insert NullLiteral(2818) into ClassInstanceCreation(2819) at 3", "Insert SimpleType: ZkHelixPropertyStore(2806) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(2809) at 0", "Insert SimpleType: ZNRecord(2808) into ParameterizedType: ZkHelixPropertyStore<ZNRecord>(2809) at 1", "Insert ParameterizedType: ZkBaseDataAccessor<ZNRecord>(2814) into ClassInstanceCreation(2816) at 0", "Insert SimpleName: _zkClient(2815) into ClassInstanceCreation(2816) at 1", "Insert SimpleName: ZkHelixPropertyStore(2805) into SimpleType: ZkHelixPropertyStore(2806) at 0", "Insert SimpleName: ZNRecord(2807) into SimpleType: ZNRecord(2808) at 0", "Insert SimpleType: ZkBaseDataAccessor(2811) into ParameterizedType: ZkBaseDataAccessor<ZNRecord>(2814) at 0", "Insert SimpleType: ZNRecord(2813) into ParameterizedType: ZkBaseDataAccessor<ZNRecord>(2814) at 1", "Insert SimpleName: ZkBaseDataAccessor(2810) into SimpleType: ZkBaseDataAccessor(2811) at 0", "Insert SimpleName: ZNRecord(2812) into SimpleType: ZNRecord(2813) at 0"]}}, {"ZkBaseDataAccessor_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: expectVersion to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: T to MethodDeclaration at 4", "MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from stat to setstat", "operations": ["UPD SimpleName: stat from stat to setstat", "UPD SimpleName: stat from stat to setstat", "UPD SimpleName: stat from stat to setstat", "UPD SimpleName: stat from stat to setstat"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: data to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS TryStatement to Block at 1", "operations": ["INS TryStatement to Block at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS Block to TryStatement at 0", "INS SimpleName: ZkNoNodeException to SimpleType: ZkNoNodeException at 0", "INS SimpleName: options to MethodInvocation at 2", "INS SimpleName: data to Assignment: = at 0", "INS SimpleName: e to ThrowStatement at 0", "INS SimpleName: isThrowExceptionIfNotExist to MethodInvocation at 1", "INS SimpleType: ZkNoNodeException to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS SimpleName: Option to MethodInvocation at 0", "INS CatchClause to TryStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to IfStatement at 0", "INS ThrowStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: T to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: data to ReturnStatement at 0", "operations": ["INS SimpleName: data to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV PrefixExpression: - to MethodInvocation at 5"]}, {"root": "INS CatchClause to TryStatement at 2", "operations": ["INS SimpleName: e to SingleVariableDeclaration at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: ZkBadVersionException to SingleVariableDeclaration at 0", "INS SimpleName: ZkBadVersionException to SimpleType: ZkBadVersionException at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS CatchClause to TryStatement at 2", "INS SimpleName: e to ThrowStatement at 0", "INS Block to CatchClause at 1"]}, {"root": "INS SimpleName: expectVersion to MethodInvocation at 4", "operations": ["INS SimpleName: expectVersion to MethodInvocation at 4"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement: throw ZkNoNodeException if NoNode return null if node with empty value", "DEL TagElement"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL SimpleName: SuppressWarnings", "DEL SingleMemberAnnotation", "DEL StringLiteral: \"unchecked\""]}, {"root": "DEL CastExpression", "operations": ["DEL CastExpression"]}]}}, {"ZkBaseDataAccessor_diff": {"operations": ["Insert SingleVariableDeclaration(367) into MethodDeclaration(512) at 8", "Move SimpleType: T(791) into MethodDeclaration(829) at 4", "Update SimpleName: stat(361) to setstat", "Insert PrimitiveType: int(365) into SingleVariableDeclaration(367) at 0", "Insert SimpleName: expectVersion(366) into SingleVariableDeclaration(367) at 1", "Insert VariableDeclarationStatement(801) into Block(828) at 0", "Insert TryStatement(825) into Block(828) at 1", "Update SimpleName: stat(337) to setstat", "Move SimpleType: T(777) into VariableDeclarationStatement(801) at 0", "Insert VariableDeclarationFragment(800) into VariableDeclarationStatement(801) at 1", "Insert Block(810) into TryStatement(825) at 0", "Insert CatchClause(824) into TryStatement(825) at 1", "Insert SimpleName: data(826) into ReturnStatement(827) at 0", "Move PrefixExpression: -(405) into MethodInvocation(333) at 5", "Insert SimpleName: data(798) into VariableDeclarationFragment(800) at 0", "Insert NullLiteral(799) into VariableDeclarationFragment(800) at 1", "Insert ExpressionStatement(809) into Block(810) at 0", "Insert SingleVariableDeclaration(814) into CatchClause(824) at 0", "Insert Block(823) into CatchClause(824) at 1", "Insert CatchClause(488) into TryStatement(505) at 2", "Insert Assignment: =(808) into ExpressionStatement(809) at 0", "Insert SimpleType: ZkNoNodeException(812) into SingleVariableDeclaration(814) at 0", "Insert SimpleName: e(813) into SingleVariableDeclaration(814) at 1", "Insert IfStatement(822) into Block(823) at 0", "Insert SingleVariableDeclaration(484) into CatchClause(488) at 0", "Insert Block(487) into CatchClause(488) at 1", "Insert SimpleName: data(802) into Assignment: =(808) at 0", "Move MethodInvocation(796) into Assignment: =(808) at 1", "Insert SimpleName: ZkNoNodeException(811) into SimpleType: ZkNoNodeException(812) at 0", "Insert MethodInvocation(818) into IfStatement(822) at 0", "Insert Block(821) into IfStatement(822) at 1", "Insert SimpleType: ZkBadVersionException(482) into SingleVariableDeclaration(484) at 0", "Insert SimpleName: e(483) into SingleVariableDeclaration(484) at 1", "Insert ThrowStatement(486) into Block(487) at 0", "Insert SimpleName: Option(815) into MethodInvocation(818) at 0", "Insert SimpleName: isThrowExceptionIfNotExist(816) into MethodInvocation(818) at 1", "Insert SimpleName: options(817) into MethodInvocation(818) at 2", "Insert ThrowStatement(820) into Block(821) at 0", "Update SimpleName: stat(409) to setstat", "Insert SimpleName: ZkBadVersionException(481) into SimpleType: ZkBadVersionException(482) at 0", "Insert SimpleName: e(485) into ThrowStatement(486) at 0", "Insert SimpleName: e(819) into ThrowStatement(820) at 0", "Insert SimpleName: expectVersion(409) into MethodInvocation(410) at 4", "Update SimpleName: stat(415) to setstat", "Delete TextElement: throw ZkNoNodeException if NoNode return null if node with empty value(767)", "Delete TagElement(768)", "Delete Javadoc(769)", "Delete SimpleName: SuppressWarnings(770)", "Delete StringLiteral: \"unchecked\"(771)", "Delete SingleMemberAnnotation(772)", "Delete CastExpression(797)"]}}, {"ZkCacheBaseDataAccessor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 22"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: java.util.concurrent.TimeUnit to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: org.I0Itec.zkclient.serialize.ZkSerializer to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 43"]}, {"root": "UPDATE from com.linkedin.helix.BaseDataAccessor to com.linkedin.helix.store.HelixPropertyStore", "operations": ["UPD QualifiedName: com.linkedin.helix.BaseDataAccessor from com.linkedin.helix.BaseDataAccessor to com.linkedin.helix.store.HelixPropertyStore"]}, {"root": "INS ParameterizedType: HelixPropertyStore<T> to TypeDeclaration: class at 3", "operations": ["INS ParameterizedType: HelixPropertyStore<T> to TypeDeclaration: class at 3", "INS SimpleType: HelixPropertyStore to ParameterizedType: HelixPropertyStore<T> at 0", "INS SimpleName: HelixPropertyStore to SimpleType: HelixPropertyStore at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS FieldDeclaration to TypeDeclaration: class at 11", "INS ParameterizedType: List<String> to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: _wtCachePaths to VariableDeclarationFragment at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS Modifier: final to FieldDeclaration at 0", "INS SimpleName: _zkCachePaths to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<String> to FieldDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: HelixGroupCommit to SimpleType: HelixGroupCommit at 0", "INS Modifier: final to FieldDeclaration at 0", "INS SimpleType: HelixGroupCommit to ParameterizedType: HelixGroupCommit<T> at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: _groupCommit to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: HelixGroupCommit to ParameterizedType: HelixGroupCommit<T> at 0", "INS SimpleName: HelixGroupCommit to SimpleType: HelixGroupCommit at 0", "INS SimpleName: T to SimpleType: T at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS SimpleType: T to ParameterizedType: HelixGroupCommit<T> at 1", "INS ParameterizedType: HelixGroupCommit<T> to ClassInstanceCreation at 0", "INS ParameterizedType: HelixGroupCommit<T> to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 16", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: ZkClient to FieldDeclaration at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: ZkClient to SimpleType: ZkClient at 0", "INS SimpleName: _zkclient to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 16"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: o2 to MethodInvocation at 0", "INS SimpleName: _cacheMap to Assignment: = at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: o1 to MethodInvocation at 0", "INS SimpleName: ZkCacheBaseDataAccessor to MethodDeclaration at 1", "INS SimpleName: o1 to SingleVariableDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS ExpressionStatement to Block at 4", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: TreeMap to SimpleType: TreeMap at 0", "INS StringLiteral: \"/\" to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Cache to SimpleType: Cache at 0", "INS ParameterizedType: TreeMap<String,Cache<T>> to ClassInstanceCreation at 0", "INS SimpleName: compare to MethodDeclaration at 3", "INS SimpleName: length to FieldAccess at 1", "INS StringLiteral: \"/\" to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 1", "INS InfixExpression: - to ReturnStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS FieldAccess to VariableDeclarationFragment at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: _zkCachePaths to Assignment: = at 0", "INS ParameterizedType: Comparator<String> to ClassInstanceCreation at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: TreeMap<String,Cache<T>> at 1", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleType: T to ParameterizedType: Cache<T> at 1", "INS SimpleType: String to ParameterizedType: Comparator<String> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: split to MethodInvocation at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: _wtCachePaths to Assignment: = at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: len2 to InfixExpression: - at 1", "INS Modifier: public to MethodDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleType: Comparator to ParameterizedType: Comparator<String> at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: wtCachePaths to Assignment: = at 1", "INS SimpleName: len1 to VariableDeclarationFragment at 0", "INS SimpleType: TreeMap to ParameterizedType: TreeMap<String,Cache<T>> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: split to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: o2 to SingleVariableDeclaration at 1", "INS SimpleName: len2 to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ExpressionStatement to Block at 2", "INS PrimitiveType: int to MethodDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS ParameterizedType: Cache<T> to ParameterizedType: TreeMap<String,Cache<T>> at 2", "INS SimpleName: Comparator to SimpleType: Comparator at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: zkCachePaths to Assignment: = at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: len1 to InfixExpression: - at 0", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleType: Cache to ParameterizedType: Cache<T> at 0", "INS FieldAccess to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 3", "INS ReturnStatement to Block at 2", "INS SimpleName: length to FieldAccess at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: chrootPath to MethodInvocation at 0", "INS SimpleType: ZkSerializer to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: _wtCachePaths to Assignment: = at 0", "INS IfStatement to Block at 3", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: _chrootPath to Assignment: = at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleName: wtCachePaths to SingleVariableDeclaration at 1", "INS SimpleType: ZkClient to ClassInstanceCreation at 0", "INS QualifiedName: ZkClient.DEFAULT_SESSION_TIMEOUT to ClassInstanceCreation at 2", "INS SimpleName: ZkClient to SimpleType: ZkClient at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: validatePath to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: _baseAccessor to Assignment: = at 0", "INS ParameterizedType: ZkBaseDataAccessor<T> to ClassInstanceCreation at 0", "INS SimpleName: chrootPath to Assignment: = at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: zkCachePaths to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: ZkSerializer to SimpleType: ZkSerializer at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: zkAddress to ClassInstanceCreation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: chrootPath to SingleVariableDeclaration at 1", "INS SimpleName: waitUntilConnected to MethodInvocation at 1", "INS SimpleName: start to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleName: ZkCacheBaseDataAccessor to MethodDeclaration at 1", "INS SimpleName: _zkclient to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS Block to IfStatement at 2", "INS SimpleName: _chrootPath to Assignment: = at 0", "INS SimpleName: zkCachePaths to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 4", "INS Block to IfStatement at 1", "INS SimpleName: _zkclient to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "INS SimpleName: zkAddress to SingleVariableDeclaration at 1", "INS SimpleName: wtCachePaths to Assignment: = at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: _zkCachePaths to Assignment: = at 0", "INS SimpleName: serializer to ClassInstanceCreation at 4", "INS SimpleName: chrootPath to InfixExpression: == at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS NullLiteral to Assignment: = at 1", "INS SimpleName: chrootPath to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS ClassInstanceCreation to Assignment: = at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: List to SimpleType: List at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ExpressionStatement to Block at 7", "INS QualifiedName: ZkClient.DEFAULT_CONNECTION_TIMEOUT to ClassInstanceCreation at 3", "INS SimpleName: _zkclient to ClassInstanceCreation at 1", "INS QualifiedName: TimeUnit.MILLISECONDS to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: ZkClient.DEFAULT_CONNECTION_TIMEOUT to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to InfixExpression: || at 1", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: serializer to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"/\" to MethodInvocation at 2", "INS SimpleName: PathUtils to MethodInvocation at 0"]}, {"root": "MOVE from ParameterizedType: ZkBaseDataAccessor<T>", "operations": ["MOV SimpleType: BaseDataAccessor to ParameterizedType: ZkBaseDataAccessor<T> at 0", "MOV SimpleType: T to ParameterizedType: HelixPropertyStore<T> at 1"]}, {"root": "UPDATE from final to protected", "operations": ["UPD Modifier: final from final to protected"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from ZkCacheBaseDataAccessor to start", "operations": ["UPD SimpleName: ZkCacheBaseDataAccessor from ZkCacheBaseDataAccessor to start"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 1", "MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 1", "MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from ParameterizedType: HelixGroupCommit<T>", "operations": ["MOV SimpleType: T to ParameterizedType: HelixGroupCommit<T> at 1"]}, {"root": "INS SimpleName: _groupCommit to MethodInvocation at 0", "operations": ["INS SimpleName: _groupCommit to MethodInvocation at 0"]}, {"root": "INS SimpleName: commit to MethodInvocation at 1", "operations": ["INS SimpleName: commit to MethodInvocation at 1"]}, {"root": "UPDATE from update to options", "operations": ["UPD SimpleName: update from update to options"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS Block to IfStatement at 2"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: close to MethodInvocation at 1", "INS NullLiteral to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: _zkclient to MethodInvocation at 0", "INS SimpleName: _zkclient to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: _zkclient to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "UPDATE from chrootPath to _chrootPath", "operations": ["UPD SimpleName: chrootPath from chrootPath to _chrootPath", "UPD SimpleName: chrootPath from chrootPath to _chrootPath"]}, {"root": "UPDATE from wtCachePaths to _wtCachePaths", "operations": ["UPD SimpleName: wtCachePaths from wtCachePaths to _wtCachePaths", "UPD SimpleName: wtCachePaths from wtCachePaths to _wtCachePaths", "UPD SimpleName: wtCachePaths from wtCachePaths to _wtCachePaths", "UPD SimpleName: wtCachePaths from wtCachePaths to _wtCachePaths", "UPD SimpleName: wtCachePaths from wtCachePaths to _wtCachePaths"]}, {"root": "UPDATE from zkCachePaths to _zkCachePaths", "operations": ["UPD SimpleName: zkCachePaths from zkCachePaths to _zkCachePaths", "UPD SimpleName: zkCachePaths from zkCachePaths to _zkCachePaths", "UPD SimpleName: zkCachePaths from zkCachePaths to _zkCachePaths", "UPD SimpleName: zkCachePaths from zkCachePaths to _zkCachePaths", "UPD SimpleName: zkCachePaths from zkCachePaths to _zkCachePaths"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "UPDATE from baseAccessor to _baseAccessor", "operations": ["UPD SimpleName: baseAccessor from baseAccessor to _baseAccessor", "UPD SimpleName: baseAccessor from baseAccessor to _baseAccessor"]}, {"root": "UPDATE from BaseDataAccessor to ZkBaseDataAccessor", "operations": ["UPD SimpleType: BaseDataAccessor from BaseDataAccessor to ZkBaseDataAccessor", "UPD SimpleName: BaseDataAccessor from BaseDataAccessor to ZkBaseDataAccessor"]}, {"root": "MOVE from ParameterizedType: ZkBaseDataAccessor<T>", "operations": ["MOV SimpleType: T to ParameterizedType: ZkBaseDataAccessor<T> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS SimpleName: Option to MethodInvocation at 0", "INS SimpleName: isThrowExceptionIfNotExist to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS CatchClause to TryStatement at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: options to MethodInvocation at 2"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: _zkCachePaths to MethodInvocation at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: _zkCachePaths to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: warn to MethodInvocation at 1", "INS StringLiteral: \"ZkCachePaths is null or empty. Will not start ZkCacheEventThread\" to MethodInvocation at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS Block to IfStatement at 2"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS PrefixExpression: - to MethodInvocation at 6", "operations": ["INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS PrefixExpression: - to MethodInvocation at 6"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS InfixExpression: | to MethodInvocation at 4", "operations": ["INS SimpleName: options to InfixExpression: | at 0", "INS InfixExpression: | to MethodInvocation at 4", "INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to InfixExpression: | at 1"]}, {"root": "DEL ParameterizedType: BaseDataAccessor<T>", "operations": ["DEL ParameterizedType: BaseDataAccessor<T>"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: options", "operations": ["DEL SimpleName: options"]}, {"root": "DEL SimpleName: options", "operations": ["DEL SimpleName: options"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: stat", "DEL SimpleName: stat", "DEL SimpleName: path", "DEL SimpleType: String", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL TryStatement", "DEL SimpleName: options", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: data", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: returnNullIfPathNotExists", "DEL SimpleName: Stat", "DEL MethodDeclaration", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL SimpleName: get", "DEL PrefixExpression: !", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL SimpleName: data", "DEL SimpleName: data", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: path", "DEL SimpleType: Stat", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: returnNullIfPathNotExists", "DEL SimpleName: options", "DEL Modifier: public", "DEL IfStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: start", "DEL Block", "DEL PrimitiveType: void"]}]}}, {"ZkCacheBaseDataAccessor_diff": {"operations": ["Move ImportDeclaration(37) into CompilationUnit(3266) at 22", "Insert ImportDeclaration(17) into CompilationUnit(3266) at 8", "Insert ImportDeclaration(29) into CompilationUnit(3266) at 14", "Move MethodDeclaration(356) into TypeDeclaration: class(3265) at 43", "Insert QualifiedName: java.util.concurrent.TimeUnit(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: org.I0Itec.zkclient.serialize.ZkSerializer(28) into ImportDeclaration(29) at 0", "Update QualifiedName: com.linkedin.helix.BaseDataAccessor(36) to com.linkedin.helix.store.HelixPropertyStore", "Insert ParameterizedType: HelixPropertyStore<T>(58) into TypeDeclaration: class(3265) at 3", "Insert FieldDeclaration(128) into TypeDeclaration: class(3265) at 10", "Insert FieldDeclaration(137) into TypeDeclaration: class(3265) at 11", "Insert FieldDeclaration(152) into TypeDeclaration: class(3265) at 12", "Insert FieldDeclaration(175) into TypeDeclaration: class(3265) at 15", "Insert MethodDeclaration(326) into TypeDeclaration: class(3265) at 17", "Insert MethodDeclaration(477) into TypeDeclaration: class(3265) at 18", "Insert SimpleType: HelixPropertyStore(55) into ParameterizedType: HelixPropertyStore<T>(58) at 0", "Move SimpleType: T(53) into ParameterizedType: HelixPropertyStore<T>(58) at 1", "Update Modifier: final(69) to protected", "Insert Modifier: final(120) into FieldDeclaration(128) at 0", "Insert ParameterizedType: List<String>(125) into FieldDeclaration(128) at 1", "Insert VariableDeclarationFragment(127) into FieldDeclaration(128) at 2", "Insert Modifier: final(129) into FieldDeclaration(137) at 0", "Insert ParameterizedType: List<String>(134) into FieldDeclaration(137) at 1", "Insert VariableDeclarationFragment(136) into FieldDeclaration(137) at 2", "Insert Modifier: final(138) into FieldDeclaration(152) at 0", "Insert ParameterizedType: HelixGroupCommit<T>(143) into FieldDeclaration(152) at 1", "Insert VariableDeclarationFragment(151) into FieldDeclaration(152) at 2", "Insert Modifier: private(169) into FieldDeclaration(175) at 0", "Insert SimpleType: ZkClient(171) into FieldDeclaration(175) at 1", "Insert VariableDeclarationFragment(174) into FieldDeclaration(175) at 2", "Insert Modifier: public(199) into MethodDeclaration(326) at 0", "Insert SimpleName: ZkCacheBaseDataAccessor(200) into MethodDeclaration(326) at 1", "Move SingleVariableDeclaration(164) into MethodDeclaration(326) at 2", "Move SingleVariableDeclaration(168) into MethodDeclaration(326) at 3", "Move SingleVariableDeclaration(175) into MethodDeclaration(326) at 4", "Move SingleVariableDeclaration(182) into MethodDeclaration(326) at 5", "Insert Block(325) into MethodDeclaration(326) at 6", "Insert Modifier: public(327) into MethodDeclaration(477) at 0", "Insert SimpleName: ZkCacheBaseDataAccessor(328) into MethodDeclaration(477) at 1", "Insert SingleVariableDeclaration(332) into MethodDeclaration(477) at 2", "Insert SingleVariableDeclaration(336) into MethodDeclaration(477) at 3", "Insert SingleVariableDeclaration(340) into MethodDeclaration(477) at 4", "Insert SingleVariableDeclaration(347) into MethodDeclaration(477) at 5", "Insert SingleVariableDeclaration(354) into MethodDeclaration(477) at 6", "Insert Block(476) into MethodDeclaration(477) at 7", "Insert MarkerAnnotation(2970) into MethodDeclaration(2997) at 0", "Insert MarkerAnnotation(2999) into MethodDeclaration(3026) at 0", "Insert MarkerAnnotation(3028) into MethodDeclaration(3186) at 0", "Insert PrimitiveType: void(3030) into MethodDeclaration(3186) at 2", "Update SimpleName: ZkCacheBaseDataAccessor(157) to start", "Insert MarkerAnnotation(3188) into MethodDeclaration(3264) at 0", "Insert SimpleName: HelixPropertyStore(54) into SimpleType: HelixPropertyStore(55) at 0", "Insert SimpleType: List(122) into ParameterizedType: List<String>(125) at 0", "Insert SimpleType: String(124) into ParameterizedType: List<String>(125) at 1", "Insert SimpleName: _wtCachePaths(126) into VariableDeclarationFragment(127) at 0", "Insert SimpleType: List(131) into ParameterizedType: List<String>(134) at 0", "Insert SimpleType: String(133) into ParameterizedType: List<String>(134) at 1", "Insert SimpleName: _zkCachePaths(135) into VariableDeclarationFragment(136) at 0", "Insert SimpleType: HelixGroupCommit(140) into ParameterizedType: HelixGroupCommit<T>(143) at 0", "Insert SimpleType: T(142) into ParameterizedType: HelixGroupCommit<T>(143) at 1", "Insert SimpleName: _groupCommit(144) into VariableDeclarationFragment(151) at 0", "Insert ClassInstanceCreation(150) into VariableDeclarationFragment(151) at 1", "Insert SimpleName: ZkClient(170) into SimpleType: ZkClient(171) at 0", "Insert SimpleName: _zkclient(172) into VariableDeclarationFragment(174) at 0", "Insert NullLiteral(173) into VariableDeclarationFragment(174) at 1", "Move ExpressionStatement(221) into Block(325) at 0", "Move IfStatement(217) into Block(325) at 1", "Insert ExpressionStatement(257) into Block(325) at 2", "Insert ExpressionStatement(261) into Block(325) at 3", "Insert ExpressionStatement(321) into Block(325) at 4", "Move ExpressionStatement(224) into Block(325) at 5", "Insert SimpleType: String(330) into SingleVariableDeclaration(332) at 0", "Insert SimpleName: zkAddress(331) into SingleVariableDeclaration(332) at 1", "Insert SimpleType: ZkSerializer(334) into SingleVariableDeclaration(336) at 0", "Insert SimpleName: serializer(335) into SingleVariableDeclaration(336) at 1", "Insert SimpleType: String(338) into SingleVariableDeclaration(340) at 0", "Insert SimpleName: chrootPath(339) into SingleVariableDeclaration(340) at 1", "Insert ParameterizedType: List<String>(345) into SingleVariableDeclaration(347) at 0", "Insert SimpleName: wtCachePaths(346) into SingleVariableDeclaration(347) at 1", "Insert ParameterizedType: List<String>(352) into SingleVariableDeclaration(354) at 0", "Insert SimpleName: zkCachePaths(353) into SingleVariableDeclaration(354) at 1", "Insert ExpressionStatement(364) into Block(476) at 0", "Insert ExpressionStatement(370) into Block(476) at 1", "Insert ExpressionStatement(380) into Block(476) at 2", "Insert IfStatement(404) into Block(476) at 3", "Insert ExpressionStatement(408) into Block(476) at 4", "Insert ExpressionStatement(412) into Block(476) at 5", "Move ExpressionStatement(308) into Block(476) at 6", "Insert ExpressionStatement(475) into Block(476) at 7", "Insert SimpleName: Override(2969) into MarkerAnnotation(2970) at 0", "Insert SimpleName: Override(2998) into MarkerAnnotation(2999) at 0", "Insert SimpleName: Override(3027) into MarkerAnnotation(3028) at 0", "Move TryStatement(2986) into Block(3185) at 1", "Move ExpressionStatement(2991) into Block(3185) at 2", "Insert SimpleName: Override(3187) into MarkerAnnotation(3188) at 0", "Insert SimpleName: List(121) into SimpleType: List(122) at 0", "Insert SimpleName: String(123) into SimpleType: String(124) at 0", "Insert SimpleName: List(130) into SimpleType: List(131) at 0", "Insert SimpleName: String(132) into SimpleType: String(133) at 0", "Insert SimpleName: HelixGroupCommit(139) into SimpleType: HelixGroupCommit(140) at 0", "Insert SimpleName: T(141) into SimpleType: T(142) at 0", "Insert ParameterizedType: HelixGroupCommit<T>(149) into ClassInstanceCreation(150) at 0", "Insert Assignment: =(256) into ExpressionStatement(257) at 0", "Insert Assignment: =(260) into ExpressionStatement(261) at 0", "Insert Assignment: =(320) into ExpressionStatement(321) at 0", "Insert SimpleName: String(329) into SimpleType: String(330) at 0", "Insert SimpleName: ZkSerializer(333) into SimpleType: ZkSerializer(334) at 0", "Insert SimpleName: String(337) into SimpleType: String(338) at 0", "Insert SimpleType: List(342) into ParameterizedType: List<String>(345) at 0", "Insert SimpleType: String(344) into ParameterizedType: List<String>(345) at 1", "Insert SimpleType: List(349) into ParameterizedType: List<String>(352) at 0", "Insert SimpleType: String(351) into ParameterizedType: List<String>(352) at 1", "Insert Assignment: =(363) into ExpressionStatement(364) at 0", "Insert MethodInvocation(369) into ExpressionStatement(370) at 0", "Insert Assignment: =(379) into ExpressionStatement(380) at 0", "Insert InfixExpression: ||(388) into IfStatement(404) at 0", "Insert Block(393) into IfStatement(404) at 1", "Insert Block(403) into IfStatement(404) at 2", "Insert Assignment: =(407) into ExpressionStatement(408) at 0", "Insert Assignment: =(411) into ExpressionStatement(412) at 0", "Insert MethodInvocation(474) into ExpressionStatement(475) at 0", "Insert SimpleType: HelixGroupCommit(146) into ParameterizedType: HelixGroupCommit<T>(149) at 0", "Move SimpleType: T(1297) into ParameterizedType: HelixGroupCommit<T>(149) at 1", "Insert SimpleName: _wtCachePaths(254) into Assignment: =(256) at 0", "Insert SimpleName: wtCachePaths(255) into Assignment: =(256) at 1", "Insert SimpleName: _zkCachePaths(258) into Assignment: =(260) at 0", "Insert SimpleName: zkCachePaths(259) into Assignment: =(260) at 1", "Insert SimpleName: _cacheMap(262) into Assignment: =(320) at 0", "Insert ClassInstanceCreation(319) into Assignment: =(320) at 1", "Insert SimpleName: List(341) into SimpleType: List(342) at 0", "Insert SimpleName: String(343) into SimpleType: String(344) at 0", "Insert SimpleName: List(348) into SimpleType: List(349) at 0", "Insert SimpleName: String(350) into SimpleType: String(351) at 0", "Insert SimpleName: _zkclient(355) into Assignment: =(363) at 0", "Insert ClassInstanceCreation(362) into Assignment: =(363) at 1", "Insert SimpleName: _zkclient(365) into MethodInvocation(369) at 0", "Insert SimpleName: waitUntilConnected(366) into MethodInvocation(369) at 1", "Insert QualifiedName: ZkClient.DEFAULT_CONNECTION_TIMEOUT(367) into MethodInvocation(369) at 2", "Insert QualifiedName: TimeUnit.MILLISECONDS(368) into MethodInvocation(369) at 3", "Insert SimpleName: _baseAccessor(371) into Assignment: =(379) at 0", "Insert ClassInstanceCreation(378) into Assignment: =(379) at 1", "Insert InfixExpression: ==(383) into InfixExpression: ||(388) at 0", "Insert MethodInvocation(387) into InfixExpression: ||(388) at 1", "Insert ExpressionStatement(392) into Block(393) at 0", "Insert ExpressionStatement(398) into Block(403) at 0", "Insert ExpressionStatement(402) into Block(403) at 1", "Insert SimpleName: _wtCachePaths(405) into Assignment: =(407) at 0", "Insert SimpleName: wtCachePaths(406) into Assignment: =(407) at 1", "Insert SimpleName: _zkCachePaths(409) into Assignment: =(411) at 0", "Insert SimpleName: zkCachePaths(410) into Assignment: =(411) at 1", "Insert SimpleName: start(473) into MethodInvocation(474) at 0", "Insert SimpleName: _groupCommit(1118) into MethodInvocation(1124) at 0", "Insert SimpleName: commit(1119) into MethodInvocation(1124) at 1", "Update SimpleName: update(996) to options", "Insert IfStatement(3090) into Block(3091) at 1", "Insert IfStatement(3208) into Block(3240) at 1", "Insert SimpleName: HelixGroupCommit(145) into SimpleType: HelixGroupCommit(146) at 0", "Insert ParameterizedType: TreeMap<String,Cache<T>>(272) into ClassInstanceCreation(319) at 0", "Insert ClassInstanceCreation(318) into ClassInstanceCreation(319) at 1", "Insert SimpleType: ZkClient(357) into ClassInstanceCreation(362) at 0", "Insert SimpleName: zkAddress(358) into ClassInstanceCreation(362) at 1", "Insert QualifiedName: ZkClient.DEFAULT_SESSION_TIMEOUT(359) into ClassInstanceCreation(362) at 2", "Insert QualifiedName: ZkClient.DEFAULT_CONNECTION_TIMEOUT(360) into ClassInstanceCreation(362) at 3", "Insert SimpleName: serializer(361) into ClassInstanceCreation(362) at 4", "Insert ParameterizedType: ZkBaseDataAccessor<T>(376) into ClassInstanceCreation(378) at 0", "Insert SimpleName: _zkclient(377) into ClassInstanceCreation(378) at 1", "Insert SimpleName: chrootPath(381) into InfixExpression: ==(383) at 0", "Insert NullLiteral(382) into InfixExpression: ==(383) at 1", "Insert SimpleName: chrootPath(384) into MethodInvocation(387) at 0", "Insert SimpleName: equals(385) into MethodInvocation(387) at 1", "Insert StringLiteral: \"/\"(386) into MethodInvocation(387) at 2", "Insert Assignment: =(391) into ExpressionStatement(392) at 0", "Insert MethodInvocation(397) into ExpressionStatement(398) at 0", "Insert Assignment: =(401) into ExpressionStatement(402) at 0", "Update SimpleName: chrootPath(186) to _chrootPath", "Update SimpleName: wtCachePaths(188) to _wtCachePaths", "Update SimpleName: zkCachePaths(190) to _zkCachePaths", "Move InfixExpression: !=(2941) into IfStatement(3090) at 0", "Move Block(2950) into IfStatement(3090) at 1", "Insert Block(3089) into IfStatement(3090) at 2", "Update SimpleName: baseAccessor(231) to _baseAccessor", "Update SimpleName: wtCachePaths(232) to _wtCachePaths", "Update SimpleName: baseAccessor(242) to _baseAccessor", "Update SimpleName: chrootPath(243) to _chrootPath", "Update SimpleName: zkCachePaths(244) to _zkCachePaths", "Update SimpleName: wtCachePaths(309) to _wtCachePaths", "Update SimpleName: wtCachePaths(321) to _wtCachePaths", "Update SimpleName: zkCachePaths(332) to _zkCachePaths", "Update SimpleName: zkCachePaths(344) to _zkCachePaths", "Insert InfixExpression: !=(3198) into IfStatement(3208) at 0", "Insert Block(3207) into IfStatement(3208) at 1", "Insert SimpleType: TreeMap(264) into ParameterizedType: TreeMap<String,Cache<T>>(272) at 0", "Insert SimpleType: String(266) into ParameterizedType: TreeMap<String,Cache<T>>(272) at 1", "Insert ParameterizedType: Cache<T>(271) into ParameterizedType: TreeMap<String,Cache<T>>(272) at 2", "Insert ParameterizedType: Comparator<String>(277) into ClassInstanceCreation(318) at 0", "Insert AnonymousClassDeclaration(317) into ClassInstanceCreation(318) at 1", "Insert SimpleName: ZkClient(356) into SimpleType: ZkClient(357) at 0", "Update SimpleType: BaseDataAccessor(51) to ZkBaseDataAccessor", "Move SimpleType: BaseDataAccessor(51) into ParameterizedType: ZkBaseDataAccessor<T>(376) at 0", "Move SimpleType: T(1280) into ParameterizedType: ZkBaseDataAccessor<T>(376) at 1", "Insert SimpleName: _chrootPath(389) into Assignment: =(391) at 0", "Insert NullLiteral(390) into Assignment: =(391) at 1", "Insert SimpleName: PathUtils(394) into MethodInvocation(397) at 0", "Insert SimpleName: validatePath(395) into MethodInvocation(397) at 1", "Insert SimpleName: chrootPath(396) into MethodInvocation(397) at 2", "Insert SimpleName: _chrootPath(399) into Assignment: =(401) at 0", "Insert SimpleName: chrootPath(400) into Assignment: =(401) at 1", "Move IfStatement(2951) into Block(3089) at 0", "Update SimpleName: wtCachePaths(312) to _wtCachePaths", "Update SimpleName: zkCachePaths(335) to _zkCachePaths", "Insert SimpleName: _zkclient(3196) into InfixExpression: !=(3198) at 0", "Insert NullLiteral(3197) into InfixExpression: !=(3198) at 1", "Insert ExpressionStatement(3202) into Block(3207) at 0", "Insert ExpressionStatement(3206) into Block(3207) at 1", "Insert SimpleName: TreeMap(263) into SimpleType: TreeMap(264) at 0", "Insert SimpleName: String(265) into SimpleType: String(266) at 0", "Insert SimpleType: Cache(268) into ParameterizedType: Cache<T>(271) at 0", "Insert SimpleType: T(270) into ParameterizedType: Cache<T>(271) at 1", "Insert SimpleType: Comparator(274) into ParameterizedType: Comparator<String>(277) at 0", "Insert SimpleType: String(276) into ParameterizedType: Comparator<String>(277) at 1", "Insert MethodDeclaration(316) into AnonymousClassDeclaration(317) at 0", "Update SimpleName: BaseDataAccessor(50) to ZkBaseDataAccessor", "Insert CatchClause(1396) into TryStatement(1402) at 1", "Insert InfixExpression: ||(3064) into IfStatement(3088) at 0", "Insert Block(3070) into IfStatement(3088) at 1", "Insert Block(3087) into IfStatement(3088) at 2", "Insert MethodInvocation(3201) into ExpressionStatement(3202) at 0", "Insert Assignment: =(3205) into ExpressionStatement(3206) at 0", "Insert SimpleName: Cache(267) into SimpleType: Cache(268) at 0", "Insert SimpleName: T(269) into SimpleType: T(270) at 0", "Insert SimpleName: Comparator(273) into SimpleType: Comparator(274) at 0", "Insert SimpleName: String(275) into SimpleType: String(276) at 0", "Insert MarkerAnnotation(279) into MethodDeclaration(316) at 0", "Insert Modifier: public(280) into MethodDeclaration(316) at 1", "Insert PrimitiveType: int(281) into MethodDeclaration(316) at 2", "Insert SimpleName: compare(282) into MethodDeclaration(316) at 3", "Insert SingleVariableDeclaration(286) into MethodDeclaration(316) at 4", "Insert SingleVariableDeclaration(290) into MethodDeclaration(316) at 5", "Insert Block(315) into MethodDeclaration(316) at 6", "Move SingleVariableDeclaration(1314) into CatchClause(1396) at 0", "Insert Block(1395) into CatchClause(1396) at 1", "Insert InfixExpression: ==(3060) into InfixExpression: ||(3064) at 0", "Insert MethodInvocation(3063) into InfixExpression: ||(3064) at 1", "Insert ExpressionStatement(3069) into Block(3070) at 0", "Move ExpressionStatement(2956) into Block(3087) at 0", "Move ExpressionStatement(2963) into Block(3087) at 1", "Move ExpressionStatement(2967) into Block(3087) at 2", "Insert SimpleName: _zkclient(3199) into MethodInvocation(3201) at 0", "Insert SimpleName: close(3200) into MethodInvocation(3201) at 1", "Insert SimpleName: _zkclient(3203) into Assignment: =(3205) at 0", "Insert NullLiteral(3204) into Assignment: =(3205) at 1", "Insert SimpleName: Override(278) into MarkerAnnotation(279) at 0", "Insert SimpleType: String(284) into SingleVariableDeclaration(286) at 0", "Insert SimpleName: o1(285) into SingleVariableDeclaration(286) at 1", "Insert SimpleType: String(288) into SingleVariableDeclaration(290) at 0", "Insert SimpleName: o2(289) into SingleVariableDeclaration(290) at 1", "Insert VariableDeclarationStatement(300) into Block(315) at 0", "Insert VariableDeclarationStatement(310) into Block(315) at 1", "Insert ReturnStatement(314) into Block(315) at 2", "Insert PrefixExpression: -(970) into MethodInvocation(972) at 6", "Insert IfStatement(1394) into Block(1395) at 0", "Insert SimpleName: _zkCachePaths(3058) into InfixExpression: ==(3060) at 0", "Insert NullLiteral(3059) into InfixExpression: ==(3060) at 1", "Insert SimpleName: _zkCachePaths(3061) into MethodInvocation(3063) at 0", "Insert SimpleName: isEmpty(3062) into MethodInvocation(3063) at 1", "Insert MethodInvocation(3068) into ExpressionStatement(3069) at 0", "Insert SimpleName: String(283) into SimpleType: String(284) at 0", "Insert SimpleName: String(287) into SimpleType: String(288) at 0", "Insert PrimitiveType: int(291) into VariableDeclarationStatement(300) at 0", "Insert VariableDeclarationFragment(299) into VariableDeclarationStatement(300) at 1", "Insert PrimitiveType: int(301) into VariableDeclarationStatement(310) at 0", "Insert VariableDeclarationFragment(309) into VariableDeclarationStatement(310) at 1", "Insert InfixExpression: -(313) into ReturnStatement(314) at 0", "Insert NumberLiteral: 1(969) into PrefixExpression: -(970) at 0", "Insert MethodInvocation(1390) into IfStatement(1394) at 0", "Move Block(1319) into IfStatement(1394) at 1", "Insert SimpleName: LOG(3065) into MethodInvocation(3068) at 0", "Insert SimpleName: warn(3066) into MethodInvocation(3068) at 1", "Insert StringLiteral: \"ZkCachePaths is null or empty. Will not start ZkCacheEventThread\"(3067) into MethodInvocation(3068) at 2", "Insert SimpleName: len1(292) into VariableDeclarationFragment(299) at 0", "Insert FieldAccess(298) into VariableDeclarationFragment(299) at 1", "Insert SimpleName: len2(302) into VariableDeclarationFragment(309) at 0", "Insert FieldAccess(308) into VariableDeclarationFragment(309) at 1", "Insert SimpleName: len1(311) into InfixExpression: -(313) at 0", "Insert SimpleName: len2(312) into InfixExpression: -(313) at 1", "Insert InfixExpression: |(1371) into MethodInvocation(1372) at 4", "Insert SimpleName: Option(1387) into MethodInvocation(1390) at 0", "Insert SimpleName: isThrowExceptionIfNotExist(1388) into MethodInvocation(1390) at 1", "Insert SimpleName: options(1389) into MethodInvocation(1390) at 2", "Insert MethodInvocation(296) into FieldAccess(298) at 0", "Insert SimpleName: length(297) into FieldAccess(298) at 1", "Insert MethodInvocation(306) into FieldAccess(308) at 0", "Insert SimpleName: length(307) into FieldAccess(308) at 1", "Insert SimpleName: options(1369) into InfixExpression: |(1371) at 0", "Insert QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST(1370) into InfixExpression: |(1371) at 1", "Insert SimpleName: o1(293) into MethodInvocation(296) at 0", "Insert SimpleName: split(294) into MethodInvocation(296) at 1", "Insert StringLiteral: \"/\"(295) into MethodInvocation(296) at 2", "Insert SimpleName: o2(303) into MethodInvocation(306) at 0", "Insert SimpleName: split(304) into MethodInvocation(306) at 1", "Insert StringLiteral: \"/\"(305) into MethodInvocation(306) at 2", "Delete ParameterizedType: BaseDataAccessor<T>(54)", "Delete Modifier: final(79)", "Delete SimpleName: options(999)", "Delete SimpleName: options(1245)", "Delete Modifier: public(1278)", "Delete SimpleName: get(1281)", "Delete SimpleName: String(1282)", "Delete SimpleType: String(1283)", "Delete SimpleName: path(1284)", "Delete SingleVariableDeclaration(1285)", "Delete SimpleName: Stat(1286)", "Delete SimpleType: Stat(1287)", "Delete SimpleName: stat(1288)", "Delete SingleVariableDeclaration(1289)", "Delete PrimitiveType: boolean(1290)", "Delete SimpleName: returnNullIfPathNotExists(1291)", "Delete SingleVariableDeclaration(1292)", "Delete PrimitiveType: int(1293)", "Delete SimpleName: options(1294)", "Delete SingleVariableDeclaration(1295)", "Delete SimpleName: data(1298)", "Delete NullLiteral(1299)", "Delete VariableDeclarationFragment(1300)", "Delete VariableDeclarationStatement(1301)", "Delete SimpleName: data(1302)", "Delete SimpleName: get(1303)", "Delete SimpleName: path(1304)", "Delete SimpleName: stat(1305)", "Delete SimpleName: options(1306)", "Delete MethodInvocation(1307)", "Delete Assignment: =(1308)", "Delete ExpressionStatement(1309)", "Delete Block(1310)", "Delete SimpleName: returnNullIfPathNotExists(1315)", "Delete PrefixExpression: !(1316)", "Delete IfStatement(1320)", "Delete Block(1321)", "Delete CatchClause(1322)", "Delete TryStatement(1323)", "Delete SimpleName: data(1324)", "Delete ReturnStatement(1325)", "Delete Block(1326)", "Delete MethodDeclaration(1327)", "Delete ReturnStatement(2949)", "Delete PrimitiveType: void(2933)", "Delete SimpleName: start(2934)", "Delete Block(2992)", "Delete MethodDeclaration(2993)"]}}, {"ZkCachedDataAccessor_cluster": {"actions": [{"root": "INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4", "operations": ["INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4"]}, {"root": "INS PrefixExpression: - to MethodInvocation at 6", "operations": ["INS PrefixExpression: - to MethodInvocation at 6", "INS NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4", "operations": ["INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}]}}, {"ZkCachedDataAccessor_diff": {"operations": ["Insert QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST(917) into MethodInvocation(918) at 4", "Insert PrefixExpression: -(1304) into MethodInvocation(1306) at 6", "Insert NumberLiteral: 1(1303) into PrefixExpression: -(1304) at 0", "Insert QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST(3609) into MethodInvocation(3610) at 4", "Delete NumberLiteral: 0(917)", "Delete NumberLiteral: 0(3607)"]}}, {"ZkCallbackCache_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: com.linkedin.helix.BaseDataAccessor.Option to ImportDeclaration at 0"]}, {"root": "INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4", "operations": ["INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4"]}, {"root": "INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4", "operations": ["INS QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST to MethodInvocation at 4"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}]}}, {"ZkCallbackCache_diff": {"operations": ["Insert ImportDeclaration(27) into CompilationUnit(970) at 13", "Insert QualifiedName: com.linkedin.helix.BaseDataAccessor.Option(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST(500) into MethodInvocation(501) at 4", "Insert QualifiedName: Option.THROW_EXCEPTION_IFNOTEXIST(341) into MethodInvocation(342) at 4", "Delete NumberLiteral: 0(339)", "Delete NumberLiteral: 0(498)"]}}, {"HelixTaskExecutor_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 13", "operations": ["INS VariableDeclarationStatement to Block at 13"]}, {"root": "INS VariableDeclarationStatement to Block at 14", "operations": ["INS SimpleType: Message to ParameterizedType: List<Message> at 1", "INS VariableDeclarationStatement to Block at 14", "INS SimpleType: List to ParameterizedType: List<Message> at 0", "INS ParameterizedType: List<Message> to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 16", "operations": ["INS TryStatement to Block at 0", "INS Block to CatchClause at 1", "INS Block to IfStatement at 1", "INS CatchClause to TryStatement at 1", "INS IfStatement to Block at 16"]}, {"root": "INS IfStatement to Block at 17", "operations": ["INS Block to ForStatement at 3", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: handleMessage to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ForStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to MethodInvocation at 2", "INS IfStatement to Block at 17"]}, {"root": "UPDATE from List<String> to List<MessageHandler>", "operations": ["UPD ParameterizedType: List<String> from List<String> to List<MessageHandler>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<String> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: > to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: > to IfStatement at 0"]}, {"root": "UPDATE from String to MessageHandler", "operations": ["UPD SimpleName: String from String to MessageHandler", "UPD SimpleType: String from String to MessageHandler"]}, {"root": "UPDATE from createMessageHandler to handlers", "operations": ["UPD SimpleName: createMessageHandler from createMessageHandler to handlers", "UPD SimpleName: msg from msg to handlers", "UPD SimpleName: countDown from countDown to handlers"]}, {"root": "UPDATE from msg to handleMessages", "operations": ["UPD SimpleName: msg from msg to handleMessages", "UPD SimpleName: logger from logger to handleMessages"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS ParameterizedType: ArrayList<MessageHandler> to ClassInstanceCreation at 0", "operations": ["INS ParameterizedType: ArrayList<MessageHandler> to ClassInstanceCreation at 0", "INS SimpleName: MessageHandler to SimpleType: MessageHandler at 0", "INS SimpleType: MessageHandler to ParameterizedType: ArrayList<MessageHandler> at 1", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<MessageHandler> at 0"]}, {"root": "UPDATE from String to List", "operations": ["UPD SimpleName: String from String to List"]}, {"root": "MOVE from SimpleType: List", "operations": ["MOV SimpleName: String to SimpleType: List at 0"]}, {"root": "MOVE from SimpleType: Message", "operations": ["MOV SimpleName: Message to SimpleType: Message at 0"]}, {"root": "INS ParameterizedType: ArrayList<Message> to ClassInstanceCreation at 0", "operations": ["INS SimpleType: Message to ParameterizedType: ArrayList<Message> at 1", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<Message> at 0", "INS ParameterizedType: ArrayList<Message> to ClassInstanceCreation at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 3", "INS SimpleName: msg to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: logger to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: handler to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: handlers to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: handler to MethodInvocation at 2", "INS StringLiteral: \"Creating handler for group message \" to InfixExpression: + at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS Block to TryStatement at 0", "INS SimpleName: warn to MethodInvocation at 1", "INS SimpleName: handleMessages to MethodInvocation at 0", "INS SimpleName: msg to InfixExpression: + at 3", "INS SimpleName: partitionName to MethodInvocation at 2", "INS ContinueStatement to Block at 1", "INS SimpleName: msg to MethodInvocation at 0", "INS SimpleName: partitionName to InfixExpression: + at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setGroupMsgCountDown to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: msg to MethodInvocation at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: getMsgId to MethodInvocation at 1", "INS SimpleName: changeContext to MethodInvocation at 2", "INS ExpressionStatement to Block at 6", "INS Block to EnhancedForStatement at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: msg to MethodInvocation at 2", "INS SimpleType: MessageHandler to VariableDeclarationStatement at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 4", "INS InfixExpression: + to MethodInvocation at 2", "INS TryStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: msg to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS EnhancedForStatement to Block at 2", "INS StringLiteral: \"Message handler factory not found for group message type:\" to InfixExpression: + at 0", "INS SimpleName: countDown to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 5", "INS StringLiteral: \", message:\" to InfixExpression: + at 2", "INS SimpleName: info to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: partitionNames to EnhancedForStatement at 1", "INS SimpleName: createMessageHandler to MethodInvocation at 0", "INS SimpleName: MessageHandler to SimpleType: MessageHandler at 0", "INS SimpleName: setPartitionName to MethodInvocation at 1", "INS StringLiteral: \"/\" to InfixExpression: + at 2", "INS SimpleName: logger to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV VariableDeclarationExpression to ForStatement at 0", "MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV MethodInvocation to InfixExpression: < at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from AtomicInteger to ArrayList", "operations": ["UPD SimpleName: AtomicInteger from AtomicInteger to ArrayList"]}, {"root": "MOVE from SimpleType: ArrayList", "operations": ["MOV SimpleName: AtomicInteger to SimpleType: ArrayList at 0"]}, {"root": "MOVE from SimpleType: Message", "operations": ["MOV SimpleName: Message to SimpleType: Message at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2", "MOV InfixExpression: == to IfStatement at 0"]}, {"root": "UPDATE from getMsgId to size", "operations": ["UPD SimpleName: getMsgId from getMsgId to size"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Message to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV IfStatement to Block at 6", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 3"]}, {"root": "UPDATE from msg to handleMessage", "operations": ["UPD SimpleName: msg from msg to handleMessage"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "UPDATE from msg to logger", "operations": ["UPD SimpleName: msg from msg to logger"]}, {"root": "UPDATE from setPartitionName to error", "operations": ["UPD SimpleName: setPartitionName from setPartitionName to error"]}, {"root": "UPDATE from partitionName to e", "operations": ["UPD SimpleName: partitionName from partitionName to e"]}, {"root": "UPDATE from getMsgType to get", "operations": ["UPD SimpleName: getMsgType from getMsgType to get", "UPD SimpleName: msg from msg to get"]}, {"root": "UPDATE from changeContext to i", "operations": ["UPD SimpleName: changeContext from changeContext to i"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: logger to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getMsgType to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS SimpleName: handler to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: handlers to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: message to MethodInvocation at 2", "INS SimpleName: handleMessages to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS ParameterizedType: List<String> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: List<String> to VariableDeclarationStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "operations": ["INS SimpleName: countDown to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ContinueStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1", "MOV SimpleType: AtomicInteger to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: String to SimpleType: String at 0", "operations": ["INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: msg to VariableDeclarationFragment at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "operations": ["INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0"]}, {"root": "INS SimpleName: Message to SimpleType: Message at 0", "operations": ["INS SimpleName: Message to SimpleType: Message at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Message to ClassInstanceCreation at 0", "MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: Message to SimpleType: Message at 0", "operations": ["INS SimpleName: Message to SimpleType: Message at 0"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV MethodInvocation to InfixExpression: + at 1"]}, {"root": "INS SimpleName: getMsgType to MethodInvocation at 1", "operations": ["INS SimpleName: getMsgType to MethodInvocation at 1"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL CatchClause", "DEL SimpleName: println", "DEL TryStatement", "DEL SimpleName: e", "DEL Block", "DEL QualifiedName: System.out", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL ContinueStatement", "DEL SimpleName: msg", "DEL SimpleName: changeContext", "DEL ForStatement", "DEL InfixExpression: +", "DEL StringLiteral: \"Message handler factory not found for message type:\"", "DEL SimpleName: info", "DEL Block", "DEL SimpleName: readMsgs", "DEL SimpleName: readMsgs", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: get", "DEL TryStatement", "DEL SimpleName: partitionNames", "DEL Block", "DEL IfStatement", "DEL SimpleName: size", "DEL SimpleName: message", "DEL Block", "DEL Block", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL InfixExpression: <", "DEL SimpleName: scheduleTask", "DEL ExpressionStatement", "DEL SimpleName: partitionName", "DEL StringLiteral: \"/\"", "DEL MethodInvocation", "DEL SimpleName: logger", "DEL SimpleName: message", "DEL SimpleName: i", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"Creating handler for message \"", "DEL SimpleName: handler", "DEL SimpleName: warn", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL EnhancedForStatement", "DEL StringLiteral: \", message:\"", "DEL SimpleName: msg", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: SetGroupMsgCountDown", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: countDown"]}]}}, {"HelixTaskExecutor_diff": {"operations": ["Insert VariableDeclarationStatement(1184) into Block(1820) at 13", "Insert VariableDeclarationStatement(1198) into Block(1820) at 14", "Insert IfStatement(1768) into Block(1820) at 16", "Insert IfStatement(1819) into Block(1820) at 17", "Update ParameterizedType: List<String>(1595) to List<MessageHandler>", "Move ParameterizedType: List<String>(1595) into VariableDeclarationStatement(1184) at 0", "Move VariableDeclarationFragment(1611) into VariableDeclarationStatement(1184) at 1", "Insert ParameterizedType: List<Message>(1189) into VariableDeclarationStatement(1198) at 0", "Move VariableDeclarationFragment(1627) into VariableDeclarationStatement(1198) at 1", "Move InfixExpression: >(1487) into IfStatement(1768) at 0", "Insert Block(1767) into IfStatement(1768) at 1", "Move InfixExpression: >(1513) into IfStatement(1819) at 0", "Insert Block(1818) into IfStatement(1819) at 1", "Update SimpleType: String(1594) to MessageHandler", "Update SimpleName: countDown(1604) to handlers", "Insert SimpleType: List(1186) into ParameterizedType: List<Message>(1189) at 0", "Insert SimpleType: Message(1188) into ParameterizedType: List<Message>(1189) at 1", "Update SimpleName: msg(1620) to handleMessages", "Insert TryStatement(1766) into Block(1767) at 0", "Move ExpressionStatement(1519) into Block(1818) at 0", "Insert ForStatement(1817) into Block(1818) at 1", "Update SimpleName: String(1593) to MessageHandler", "Insert ParameterizedType: ArrayList<MessageHandler>(1181) into ClassInstanceCreation(1182) at 0", "Update SimpleName: String(1613) to List", "Move SimpleName: String(1613) into SimpleType: List(1186) at 0", "Move SimpleName: Message(1618) into SimpleType: Message(1188) at 0", "Insert ParameterizedType: ArrayList<Message>(1195) into ClassInstanceCreation(1196) at 0", "Insert Block(1698) into IfStatement(1740) at 1", "Move Block(1494) into TryStatement(1766) at 0", "Insert CatchClause(1765) into TryStatement(1766) at 1", "Move VariableDeclarationExpression(1524) into ForStatement(1817) at 0", "Insert InfixExpression: <(1789) into ForStatement(1817) at 1", "Move PostfixExpression: ++(1531) into ForStatement(1817) at 2", "Insert Block(1816) into ForStatement(1817) at 3", "Insert SimpleType: ArrayList(1178) into ParameterizedType: ArrayList<MessageHandler>(1181) at 0", "Insert SimpleType: MessageHandler(1180) into ParameterizedType: ArrayList<MessageHandler>(1181) at 1", "Insert SimpleType: ArrayList(1192) into ParameterizedType: ArrayList<Message>(1195) at 0", "Insert SimpleType: Message(1194) into ParameterizedType: ArrayList<Message>(1195) at 1", "Insert IfStatement(1697) into Block(1698) at 0", "Move SingleVariableDeclaration(1498) into CatchClause(1765) at 0", "Insert Block(1764) into CatchClause(1765) at 1", "Insert SimpleName: i(1785) into InfixExpression: <(1789) at 0", "Move MethodInvocation(1644) into InfixExpression: <(1789) at 1", "Move VariableDeclarationStatement(1658) into Block(1816) at 0", "Insert VariableDeclarationStatement(1809) into Block(1816) at 1", "Move ExpressionStatement(1681) into Block(1816) at 2", "Update SimpleName: AtomicInteger(1605) to ArrayList", "Move SimpleName: AtomicInteger(1605) into SimpleType: ArrayList(1178) at 0", "Insert SimpleName: MessageHandler(1179) into SimpleType: MessageHandler(1180) at 0", "Insert SimpleName: ArrayList(1191) into SimpleType: ArrayList(1192) at 0", "Move SimpleName: Message(1621) into SimpleType: Message(1194) at 0", "Move InfixExpression: ==(1247) into IfStatement(1697) at 0", "Insert Block(1686) into IfStatement(1697) at 1", "Move Block(1436) into IfStatement(1697) at 2", "Move ExpressionStatement(1633) into Block(1764) at 0", "Update SimpleName: msg(1642) to handlers", "Update SimpleName: getMsgId(1643) to size", "Move SimpleType: Message(1533) into VariableDeclarationStatement(1809) at 0", "Insert VariableDeclarationFragment(1808) into VariableDeclarationStatement(1809) at 1", "Insert TryStatement(1507) into Block(1686) at 0", "Move ExpressionStatement(1252) into Block(1686) at 1", "Move ExpressionStatement(1261) into Block(1686) at 2", "Move ExpressionStatement(1270) into Block(1686) at 3", "Move ExpressionStatement(1280) into Block(1686) at 4", "Move ExpressionStatement(1285) into Block(1686) at 5", "Move IfStatement(1425) into Block(1686) at 6", "Insert SimpleName: handleMessage(1803) into VariableDeclarationFragment(1808) at 0", "Insert MethodInvocation(1807) into VariableDeclarationFragment(1808) at 1", "Update SimpleName: msg(1677) to handleMessage", "Insert Block(1429) into TryStatement(1507) at 0", "Move CatchClause(1763) into TryStatement(1507) at 1", "Update SimpleName: msg(1629) to logger", "Update SimpleName: setPartitionName(1630) to error", "Update SimpleName: partitionName(1631) to e", "Update SimpleName: createMessageHandler(1653) to handlers", "Update SimpleName: msg(1654) to get", "Update SimpleName: changeContext(1655) to i", "Update SimpleName: logger(1662) to handleMessages", "Move SimpleName: logger(1662) into MethodInvocation(1807) at 0", "Update SimpleName: getMsgType(1666) to get", "Move SimpleName: getMsgType(1666) into MethodInvocation(1807) at 1", "Insert SimpleName: i(1806) into MethodInvocation(1807) at 2", "Insert IfStatement(1428) into Block(1429) at 0", "Move PrefixExpression: !(1544) into IfStatement(1428) at 0", "Move Block(1438) into IfStatement(1428) at 1", "Insert Block(1427) into IfStatement(1428) at 2", "Move ExpressionStatement(1557) into Block(1329) at 0", "Move VariableDeclarationStatement(1566) into Block(1329) at 1", "Insert ExpressionStatement(1323) into Block(1329) at 3", "Insert ExpressionStatement(1328) into Block(1329) at 4", "Move VariableDeclarationStatement(1601) into Block(1427) at 0", "Move VariableDeclarationStatement(1612) into Block(1427) at 1", "Insert EnhancedForStatement(1426) into Block(1427) at 2", "Move InfixExpression: ==(1569) into IfStatement(1318) at 0", "Insert MethodInvocation(1322) into ExpressionStatement(1323) at 0", "Insert MethodInvocation(1327) into ExpressionStatement(1328) at 0", "Insert ParameterizedType: List<String>(1334) into VariableDeclarationStatement(1340) at 0", "Insert VariableDeclarationFragment(1350) into VariableDeclarationStatement(1351) at 1", "Move SingleVariableDeclaration(1616) into EnhancedForStatement(1426) at 0", "Insert SimpleName: partitionNames(1356) into EnhancedForStatement(1426) at 1", "Insert Block(1425) into EnhancedForStatement(1426) at 2", "Move ExpressionStatement(1580) into Block(1317) at 0", "Move ContinueStatement(1581) into Block(1317) at 1", "Insert SimpleName: handlers(1319) into MethodInvocation(1322) at 0", "Insert SimpleName: add(1320) into MethodInvocation(1322) at 1", "Insert SimpleName: handler(1321) into MethodInvocation(1322) at 2", "Insert SimpleName: handleMessages(1324) into MethodInvocation(1327) at 0", "Insert SimpleName: add(1325) into MethodInvocation(1327) at 1", "Insert SimpleName: message(1326) into MethodInvocation(1327) at 2", "Insert SimpleType: List(1331) into ParameterizedType: List<String>(1334) at 0", "Insert SimpleType: String(1333) into ParameterizedType: List<String>(1334) at 1", "Insert SimpleName: countDown(1343) into VariableDeclarationFragment(1350) at 0", "Insert ClassInstanceCreation(1349) into VariableDeclarationFragment(1350) at 1", "Move VariableDeclarationStatement(1628) into Block(1425) at 0", "Insert ExpressionStatement(1372) into Block(1425) at 1", "Insert ExpressionStatement(1377) into Block(1425) at 2", "Insert ExpressionStatement(1388) into Block(1425) at 3", "Insert VariableDeclarationStatement(1397) into Block(1425) at 4", "Insert IfStatement(1414) into Block(1425) at 5", "Insert ExpressionStatement(1419) into Block(1425) at 6", "Insert ExpressionStatement(1424) into Block(1425) at 7", "Insert SimpleName: List(1330) into SimpleType: List(1331) at 0", "Insert SimpleName: String(1332) into SimpleType: String(1333) at 0", "Move SimpleType: AtomicInteger(1606) into ClassInstanceCreation(1349) at 0", "Move MethodInvocation(1609) into ClassInstanceCreation(1349) at 1", "Insert SimpleName: String(1352) into SimpleType: String(1353) at 0", "Insert VariableDeclarationFragment(1366) into VariableDeclarationStatement(1367) at 1", "Insert MethodInvocation(1371) into ExpressionStatement(1372) at 0", "Insert MethodInvocation(1376) into ExpressionStatement(1377) at 0", "Insert MethodInvocation(1387) into ExpressionStatement(1388) at 0", "Insert SimpleType: MessageHandler(1390) into VariableDeclarationStatement(1397) at 0", "Insert VariableDeclarationFragment(1396) into VariableDeclarationStatement(1397) at 1", "Move InfixExpression: ==(1661) into IfStatement(1414) at 0", "Insert Block(1413) into IfStatement(1414) at 1", "Insert MethodInvocation(1418) into ExpressionStatement(1419) at 0", "Insert MethodInvocation(1423) into ExpressionStatement(1424) at 0", "Insert SimpleName: AtomicInteger(1344) into SimpleType: AtomicInteger(1345) at 0", "Insert SimpleName: Message(1357) into SimpleType: Message(1358) at 0", "Insert SimpleName: msg(1359) into VariableDeclarationFragment(1366) at 0", "Insert ClassInstanceCreation(1365) into VariableDeclarationFragment(1366) at 1", "Insert SimpleName: msg(1368) into MethodInvocation(1371) at 0", "Insert SimpleName: setPartitionName(1369) into MethodInvocation(1371) at 1", "Insert SimpleName: partitionName(1370) into MethodInvocation(1371) at 2", "Insert SimpleName: msg(1373) into MethodInvocation(1376) at 0", "Insert SimpleName: setGroupMsgCountDown(1374) into MethodInvocation(1376) at 1", "Insert SimpleName: countDown(1375) into MethodInvocation(1376) at 2", "Insert SimpleName: logger(1378) into MethodInvocation(1387) at 0", "Insert SimpleName: info(1379) into MethodInvocation(1387) at 1", "Insert InfixExpression: +(1386) into MethodInvocation(1387) at 2", "Insert SimpleName: MessageHandler(1389) into SimpleType: MessageHandler(1390) at 0", "Insert SimpleName: handler(1391) into VariableDeclarationFragment(1396) at 0", "Insert MethodInvocation(1395) into VariableDeclarationFragment(1396) at 1", "Insert ExpressionStatement(1411) into Block(1413) at 0", "Insert ContinueStatement(1412) into Block(1413) at 1", "Insert SimpleName: handlers(1415) into MethodInvocation(1418) at 0", "Insert SimpleName: add(1416) into MethodInvocation(1418) at 1", "Insert SimpleName: handler(1417) into MethodInvocation(1418) at 2", "Insert SimpleName: handleMessages(1420) into MethodInvocation(1423) at 0", "Insert SimpleName: add(1421) into MethodInvocation(1423) at 1", "Insert SimpleName: msg(1422) into MethodInvocation(1423) at 2", "Move SimpleType: Message(1622) into ClassInstanceCreation(1365) at 0", "Move MethodInvocation(1625) into ClassInstanceCreation(1365) at 1", "Insert StringLiteral: \"Creating handler for group message \"(1380) into InfixExpression: +(1386) at 0", "Insert MethodInvocation(1383) into InfixExpression: +(1386) at 1", "Insert StringLiteral: \"/\"(1384) into InfixExpression: +(1386) at 2", "Insert SimpleName: partitionName(1385) into InfixExpression: +(1386) at 3", "Insert SimpleName: createMessageHandler(1392) into MethodInvocation(1395) at 0", "Insert SimpleName: msg(1393) into MethodInvocation(1395) at 1", "Insert SimpleName: changeContext(1394) into MethodInvocation(1395) at 2", "Insert MethodInvocation(1410) into ExpressionStatement(1411) at 0", "Insert SimpleName: Message(1360) into SimpleType: Message(1361) at 0", "Insert SimpleName: msg(1381) into MethodInvocation(1383) at 0", "Insert SimpleName: getMsgId(1382) into MethodInvocation(1383) at 1", "Insert SimpleName: logger(1401) into MethodInvocation(1410) at 0", "Insert SimpleName: warn(1402) into MethodInvocation(1410) at 1", "Insert InfixExpression: +(1409) into MethodInvocation(1410) at 2", "Insert StringLiteral: \"Message handler factory not found for group message type:\"(1403) into InfixExpression: +(1409) at 0", "Move MethodInvocation(1667) into InfixExpression: +(1409) at 1", "Insert StringLiteral: \", message:\"(1407) into InfixExpression: +(1409) at 2", "Insert SimpleName: msg(1408) into InfixExpression: +(1409) at 3", "Insert SimpleName: getMsgType(1405) into MethodInvocation(1406) at 1", "Delete QualifiedName: System.out(1499)", "Delete SimpleName: println(1500)", "Delete SimpleName: e(1501)", "Delete MethodInvocation(1502)", "Delete ExpressionStatement(1503)", "Delete Block(1504)", "Delete CatchClause(1505)", "Delete TryStatement(1506)", "Delete Block(1507)", "Delete IfStatement(1508)", "Delete SimpleName: i(1525)", "Delete SimpleName: readMsgs(1526)", "Delete SimpleName: size(1527)", "Delete MethodInvocation(1528)", "Delete InfixExpression: <(1529)", "Delete SimpleName: message(1534)", "Delete SimpleName: readMsgs(1535)", "Delete SimpleName: get(1536)", "Delete SimpleName: i(1537)", "Delete MethodInvocation(1538)", "Delete VariableDeclarationFragment(1539)", "Delete VariableDeclarationStatement(1540)", "Delete SimpleName: scheduleTask(1584)", "Delete SimpleName: message(1585)", "Delete SimpleName: handler(1586)", "Delete SimpleName: changeContext(1587)", "Delete MethodInvocation(1588)", "Delete ExpressionStatement(1589)", "Delete Block(1590)", "Delete SimpleName: partitionNames(1617)", "Delete SimpleName: msg(1634)", "Delete SimpleName: SetGroupMsgCountDown(1635)", "Delete SimpleName: countDown(1636)", "Delete MethodInvocation(1637)", "Delete ExpressionStatement(1638)", "Delete SimpleName: logger(1639)", "Delete SimpleName: info(1640)", "Delete StringLiteral: \"Creating handler for message \"(1641)", "Delete StringLiteral: \"/\"(1645)", "Delete SimpleName: partitionName(1646)", "Delete InfixExpression: +(1647)", "Delete MethodInvocation(1648)", "Delete ExpressionStatement(1649)", "Delete SimpleName: warn(1663)", "Delete StringLiteral: \"Message handler factory not found for message type:\"(1664)", "Delete StringLiteral: \", message:\"(1668)", "Delete SimpleName: msg(1669)", "Delete InfixExpression: +(1670)", "Delete MethodInvocation(1671)", "Delete ExpressionStatement(1672)", "Delete ContinueStatement(1673)", "Delete Block(1674)", "Delete IfStatement(1675)", "Delete Block(1682)", "Delete EnhancedForStatement(1683)", "Delete Block(1684)", "Delete IfStatement(1685)", "Delete Block(1686)", "Delete TryStatement(1764)", "Delete Block(1765)", "Delete ForStatement(1766)", "Delete Block(1767)", "Delete IfStatement(1768)"]}}, {"ZKPropertyStore_cluster": {"actions": [{"root": "INS MarkerAnnotation to TypeDeclaration: class at 0", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to TypeDeclaration: class at 0"]}]}}, {"ZKPropertyStore_diff": {"operations": ["Insert MarkerAnnotation(61) into TypeDeclaration: class(2238) at 0", "Insert SimpleName: Deprecated(60) into MarkerAnnotation(61) at 0"]}}, {"ZkHelixPropertyStore_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: org.I0Itec.zkclient.serialize.ZkSerializer to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: zkAddress to SuperConstructorInvocation at 0", "INS SimpleName: chrootPath to SingleVariableDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ParameterizedType: List<String> to SingleVariableDeclaration at 0", "INS SimpleName: zkCachePaths to SuperConstructorInvocation at 4", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: ZkSerializer to SingleVariableDeclaration at 0", "INS SimpleName: serializer to SingleVariableDeclaration at 1", "INS SimpleName: chrootPath to SuperConstructorInvocation at 2", "INS SimpleName: ZkHelixPropertyStore to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS Block to MethodDeclaration at 6", "INS NullLiteral to SuperConstructorInvocation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ZkSerializer to SimpleType: ZkSerializer at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS SimpleName: serializer to SuperConstructorInvocation at 1", "INS SimpleName: zkAddress to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SuperConstructorInvocation to Block at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: zkCachePaths to SingleVariableDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: serializer to SuperConstructorInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: serializer to SingleVariableDeclaration at 1", "INS SimpleType: ZkSerializer to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS NullLiteral to SuperConstructorInvocation at 4", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ZkSerializer to SimpleType: ZkSerializer at 0", "INS SimpleName: chrootPath to SingleVariableDeclaration at 1", "INS SimpleName: zkAddress to SuperConstructorInvocation at 0", "INS SimpleName: ZkHelixPropertyStore to MethodDeclaration at 1", "INS SimpleName: chrootPath to SuperConstructorInvocation at 2", "INS NullLiteral to SuperConstructorInvocation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: zkAddress to SingleVariableDeclaration at 1", "INS SuperConstructorInvocation to Block at 0"]}]}}, {"ZkHelixPropertyStore_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(412) at 4", "Insert QualifiedName: org.I0Itec.zkclient.serialize.ZkSerializer(8) into ImportDeclaration(9) at 0", "Insert MethodDeclaration(88) into TypeDeclaration: class(411) at 5", "Insert MethodDeclaration(110) into TypeDeclaration: class(411) at 6", "Insert Modifier: public(60) into MethodDeclaration(88) at 0", "Insert SimpleName: ZkHelixPropertyStore(61) into MethodDeclaration(88) at 1", "Insert SingleVariableDeclaration(65) into MethodDeclaration(88) at 2", "Insert SingleVariableDeclaration(69) into MethodDeclaration(88) at 3", "Insert SingleVariableDeclaration(73) into MethodDeclaration(88) at 4", "Insert SingleVariableDeclaration(80) into MethodDeclaration(88) at 5", "Insert Block(87) into MethodDeclaration(88) at 6", "Insert Modifier: public(89) into MethodDeclaration(110) at 0", "Insert SimpleName: ZkHelixPropertyStore(90) into MethodDeclaration(110) at 1", "Insert SingleVariableDeclaration(94) into MethodDeclaration(110) at 2", "Insert SingleVariableDeclaration(98) into MethodDeclaration(110) at 3", "Insert SingleVariableDeclaration(102) into MethodDeclaration(110) at 4", "Insert Block(109) into MethodDeclaration(110) at 5", "Insert SimpleType: String(63) into SingleVariableDeclaration(65) at 0", "Insert SimpleName: zkAddress(64) into SingleVariableDeclaration(65) at 1", "Insert SimpleType: ZkSerializer(67) into SingleVariableDeclaration(69) at 0", "Insert SimpleName: serializer(68) into SingleVariableDeclaration(69) at 1", "Insert SimpleType: String(71) into SingleVariableDeclaration(73) at 0", "Insert SimpleName: chrootPath(72) into SingleVariableDeclaration(73) at 1", "Insert ParameterizedType: List<String>(78) into SingleVariableDeclaration(80) at 0", "Insert SimpleName: zkCachePaths(79) into SingleVariableDeclaration(80) at 1", "Insert SuperConstructorInvocation(86) into Block(87) at 0", "Insert SimpleType: String(92) into SingleVariableDeclaration(94) at 0", "Insert SimpleName: zkAddress(93) into SingleVariableDeclaration(94) at 1", "Insert SimpleType: ZkSerializer(96) into SingleVariableDeclaration(98) at 0", "Insert SimpleName: serializer(97) into SingleVariableDeclaration(98) at 1", "Insert SimpleType: String(100) into SingleVariableDeclaration(102) at 0", "Insert SimpleName: chrootPath(101) into SingleVariableDeclaration(102) at 1", "Insert SuperConstructorInvocation(108) into Block(109) at 0", "Insert SimpleName: String(62) into SimpleType: String(63) at 0", "Insert SimpleName: ZkSerializer(66) into SimpleType: ZkSerializer(67) at 0", "Insert SimpleName: String(70) into SimpleType: String(71) at 0", "Insert SimpleType: List(75) into ParameterizedType: List<String>(78) at 0", "Insert SimpleType: String(77) into ParameterizedType: List<String>(78) at 1", "Insert SimpleName: zkAddress(81) into SuperConstructorInvocation(86) at 0", "Insert SimpleName: serializer(82) into SuperConstructorInvocation(86) at 1", "Insert SimpleName: chrootPath(83) into SuperConstructorInvocation(86) at 2", "Insert NullLiteral(84) into SuperConstructorInvocation(86) at 3", "Insert SimpleName: zkCachePaths(85) into SuperConstructorInvocation(86) at 4", "Insert SimpleName: String(91) into SimpleType: String(92) at 0", "Insert SimpleName: ZkSerializer(95) into SimpleType: ZkSerializer(96) at 0", "Insert SimpleName: String(99) into SimpleType: String(100) at 0", "Insert SimpleName: zkAddress(103) into SuperConstructorInvocation(108) at 0", "Insert SimpleName: serializer(104) into SuperConstructorInvocation(108) at 1", "Insert SimpleName: chrootPath(105) into SuperConstructorInvocation(108) at 2", "Insert NullLiteral(106) into SuperConstructorInvocation(108) at 3", "Insert NullLiteral(107) into SuperConstructorInvocation(108) at 4", "Insert SimpleName: List(74) into SimpleType: List(75) at 0", "Insert SimpleName: String(76) into SimpleType: String(77) at 0"]}}], "commit_stats": [{"total_files": 26, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}