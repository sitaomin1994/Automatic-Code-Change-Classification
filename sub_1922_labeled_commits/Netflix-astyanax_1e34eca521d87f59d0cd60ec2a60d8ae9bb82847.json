{"application": "Netflix-astyanax", "csha": "1e34eca521d87f59d0cd60ec2a60d8ae9bb82847", "files": [{"AstyanaxContext_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: com.netflix.astyanax.connectionpool.impl.OldHostSupplierAdapter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "UPDATE from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "operations": ["UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "UPDATE from tokenRangeSupplier to supplier", "operations": ["UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to supplier", "UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to supplier"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: Map", "DEL SimpleName: BigInteger", "DEL SimpleType: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: BigInteger"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: BigInteger", "DEL SimpleType: BigInteger", "DEL SimpleName: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: Map"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: BigInteger", "DEL SimpleType: BigInteger", "DEL SimpleType: Map"]}]}}, {"AstyanaxContext_diff": {"operations": ["Insert ImportDeclaration(39) into CompilationUnit(873) at 19", "Insert QualifiedName: com.netflix.astyanax.connectionpool.impl.OldHostSupplierAdapter(38) into ImportDeclaration(39) at 0", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(183) to Supplier<List<Host>>", "Move ParameterizedType: List<Host>(181) into ParameterizedType: Supplier<List<Host>>(180) at 1", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(284) to Supplier<List<Host>>", "Update SimpleName: tokenRangeSupplier(285) to supplier", "Move ParameterizedType: List<Host>(282) into ParameterizedType: Supplier<List<Host>>(276) at 1", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(526) to Supplier<List<Host>>", "Update SimpleName: tokenRangeSupplier(290) to supplier", "Move ParameterizedType: List<Host>(524) into ParameterizedType: Supplier<List<Host>>(513) at 1", "Delete SimpleName: Map(173)", "Delete SimpleType: Map(174)", "Delete SimpleName: BigInteger(175)", "Delete SimpleType: BigInteger(176)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(182)", "Delete SimpleName: Map(274)", "Delete SimpleType: Map(275)", "Delete SimpleName: BigInteger(276)", "Delete SimpleType: BigInteger(277)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(283)", "Delete SimpleName: Map(516)", "Delete SimpleType: Map(517)", "Delete SimpleName: BigInteger(518)", "Delete SimpleType: BigInteger(519)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(525)"]}}, {"ConnectionPool_cluster": {"actions": [{"root": "UPDATE from java.util.Map to java.util.Collection", "operations": ["UPD QualifiedName: java.util.Map from java.util.Map to java.util.Collection"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 9", "operations": ["INS ParameterizedType: List<HostConnectionPool<CL>> to MethodDeclaration at 1", "INS SimpleType: HostConnectionPool to ParameterizedType: HostConnectionPool<CL> at 0", "INS SimpleName: getPools to MethodDeclaration at 2", "INS SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1", "INS TagElement to Javadoc at 0", "INS ParameterizedType: HostConnectionPool<CL> to ParameterizedType: List<HostConnectionPool<CL>> at 1", "INS TextElement: Get all pools to TagElement at 0", "INS SimpleName: CL to SimpleType: CL at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: HostConnectionPool to SimpleType: HostConnectionPool at 0", "INS MethodDeclaration to TypeDeclaration: interface at 9", "INS TagElement: @return to Javadoc at 1"]}, {"root": "MOVE from ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["MOV SimpleType: Host to ParameterizedType: Map<BigInteger,List<Host>> at 1", "MOV SimpleType: List to ParameterizedType: List<HostConnectionPool<CL>> at 0"]}, {"root": "UPDATE from Map<BigInteger,List<Host>> to Collection<Host>", "operations": ["UPD ParameterizedType: Map<BigInteger,List<Host>> from Map<BigInteger,List<Host>> to Collection<Host>"]}, {"root": "UPDATE from ring to hosts", "operations": ["UPD SimpleName: ring from ring to hosts", "UPD SimpleName: ring from ring to hosts"]}, {"root": "UPDATE from Sets the complete set of hosts keyed by token. to Set the complete set of hosts in the ring", "operations": ["UPD TextElement: Sets the complete set of hosts keyed by token. from Sets the complete set of hosts keyed by token. to Set the complete set of hosts in the ring"]}, {"root": "UPDATE from Map to Collection", "operations": ["UPD SimpleType: Map from Map to Collection", "UPD SimpleName: Map from Map to Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.math.BigInteger"]}, {"root": "DEL SimpleType: BigInteger", "operations": ["DEL SimpleType: BigInteger", "DEL SimpleName: BigInteger"]}, {"root": "DEL ParameterizedType: List<Host>", "operations": ["DEL ParameterizedType: List<Host>"]}]}}, {"ConnectionPool_diff": {"operations": ["Update QualifiedName: java.util.Map(18) to java.util.Collection", "Insert MethodDeclaration(128) into TypeDeclaration: interface(217) at 9", "Insert Javadoc(118) into MethodDeclaration(128) at 0", "Insert ParameterizedType: List<HostConnectionPool<CL>>(126) into MethodDeclaration(128) at 1", "Insert SimpleName: getPools(127) into MethodDeclaration(128) at 2", "Insert TagElement(116) into Javadoc(118) at 0", "Insert TagElement: @return(117) into Javadoc(118) at 1", "Move SimpleType: List(129) into ParameterizedType: List<HostConnectionPool<CL>>(126) at 0", "Insert ParameterizedType: HostConnectionPool<CL>(125) into ParameterizedType: List<HostConnectionPool<CL>>(126) at 1", "Update ParameterizedType: Map<BigInteger,List<Host>>(133) to Collection<Host>", "Update SimpleName: ring(134) to hosts", "Insert TextElement: Get all pools(115) into TagElement(116) at 0", "Insert SimpleType: HostConnectionPool(122) into ParameterizedType: HostConnectionPool<CL>(125) at 0", "Insert SimpleType: CL(124) into ParameterizedType: HostConnectionPool<CL>(125) at 1", "Update TextElement: Sets the complete set of hosts keyed by token.(117) to Set the complete set of hosts in the ring", "Update SimpleName: ring(119) to hosts", "Update SimpleType: Map(125) to Collection", "Move SimpleType: Host(131) into ParameterizedType: Collection<Host>(140) at 1", "Insert SimpleName: HostConnectionPool(121) into SimpleType: HostConnectionPool(122) at 0", "Insert SimpleName: CL(123) into SimpleType: CL(124) at 0", "Update SimpleName: Map(124) to Collection", "Delete QualifiedName: java.math.BigInteger(14)", "Delete ImportDeclaration(15)", "Delete SimpleName: BigInteger(126)", "Delete SimpleType: BigInteger(127)", "Delete ParameterizedType: List<Host>(132)"]}}, {"ConnectionPoolConfiguration_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.netflix.astyanax.partitioner.Partitioner to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 21", "operations": ["INS PrimitiveType: int to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: interface at 21", "INS TagElement to Javadoc at 0", "INS TextElement: and free up connections. to TagElement at 2", "INS TagElement: @return to Javadoc at 1", "INS TextElement: the least blocked host.  The idea here is to quarantine hosts that are slow to respond to TagElement at 1", "INS SimpleName: getBlockedThreadThreshold to MethodDeclaration at 2", "INS TextElement: Return the threshold for disabling hosts that have nBlockedThreads more than to TagElement at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 22", "operations": ["INS TextElement: or are blocked.  For example, a ratio of 0.75 with a connection pool of 12 hosts will  to TagElement at 1", "INS PrimitiveType: float to MethodDeclaration at 1", "INS TextElement: ensure that no more than 4 hosts can be quaratined. to TagElement at 2", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Return the ratio for keeping a minimum number of hosts in the pool even if they are slow to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: interface at 22", "INS SimpleName: getMinHostInPoolRatio to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 35", "operations": ["INS SimpleName: getPartitioner to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: Partitioner to MethodDeclaration at 1", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS MethodDeclaration to TypeDeclaration: interface at 35", "INS TextElement: Get the partitioner used to convert row keys to TOKEN to TagElement at 0", "INS TagElement to Javadoc at 0"]}]}}, {"ConnectionPoolConfiguration_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(286) at 3", "Insert QualifiedName: com.netflix.astyanax.partitioner.Partitioner(18) into ImportDeclaration(19) at 0", "Insert MethodDeclaration(183) into TypeDeclaration: interface(285) at 21", "Insert MethodDeclaration(192) into TypeDeclaration: interface(285) at 22", "Insert MethodDeclaration(284) into TypeDeclaration: interface(285) at 35", "Insert Javadoc(180) into MethodDeclaration(183) at 0", "Insert PrimitiveType: int(181) into MethodDeclaration(183) at 1", "Insert SimpleName: getBlockedThreadThreshold(182) into MethodDeclaration(183) at 2", "Insert Javadoc(189) into MethodDeclaration(192) at 0", "Insert PrimitiveType: float(190) into MethodDeclaration(192) at 1", "Insert SimpleName: getMinHostInPoolRatio(191) into MethodDeclaration(192) at 2", "Insert Javadoc(280) into MethodDeclaration(284) at 0", "Insert SimpleType: Partitioner(282) into MethodDeclaration(284) at 1", "Insert SimpleName: getPartitioner(283) into MethodDeclaration(284) at 2", "Insert TagElement(178) into Javadoc(180) at 0", "Insert TagElement: @return(179) into Javadoc(180) at 1", "Insert TagElement(187) into Javadoc(189) at 0", "Insert TagElement: @return(188) into Javadoc(189) at 1", "Insert TagElement(278) into Javadoc(280) at 0", "Insert TagElement: @return(279) into Javadoc(280) at 1", "Insert SimpleName: Partitioner(281) into SimpleType: Partitioner(282) at 0", "Insert TextElement: Return the threshold for disabling hosts that have nBlockedThreads more than(175) into TagElement(178) at 0", "Insert TextElement: the least blocked host.  The idea here is to quarantine hosts that are slow to respond(176) into TagElement(178) at 1", "Insert TextElement: and free up connections.(177) into TagElement(178) at 2", "Insert TextElement: Return the ratio for keeping a minimum number of hosts in the pool even if they are slow(184) into TagElement(187) at 0", "Insert TextElement: or are blocked.  For example, a ratio of 0.75 with a connection pool of 12 hosts will (185) into TagElement(187) at 1", "Insert TextElement: ensure that no more than 4 hosts can be quaratined.(186) into TagElement(187) at 2", "Insert TextElement: Get the partitioner used to convert row keys to TOKEN(277) into TagElement(278) at 0"]}}, {"ConnectionPoolMonitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 26", "operations": ["INS SimpleName: getInterruptedCount to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: long to MethodDeclaration at 1", "INS TextElement: Number of times operations were cancelled  to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: interface at 26", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 1"]}]}}, {"ConnectionPoolMonitor_diff": {"operations": ["Insert MethodDeclaration(229) into TypeDeclaration: interface(316) at 26", "Insert Javadoc(226) into MethodDeclaration(229) at 0", "Insert PrimitiveType: long(227) into MethodDeclaration(229) at 1", "Insert SimpleName: getInterruptedCount(228) into MethodDeclaration(229) at 2", "Insert TagElement(224) into Javadoc(226) at 0", "Insert TagElement: @return(225) into Javadoc(226) at 1", "Insert TextElement: Number of times operations were cancelled (223) into TagElement(224) at 0"]}}, {"Host_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.util.List to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: com.google.common.collect.Lists to ImportDeclaration at 0"]}, {"root": "INS ParameterizedType: Comparable<Host> to TypeDeclaration: class at 3", "operations": ["INS SimpleName: Host to SimpleType: Host at 0", "INS SimpleType: Host to ParameterizedType: Comparable<Host> at 1", "INS ParameterizedType: Comparable<Host> to TypeDeclaration: class at 3", "INS SimpleType: Comparable to ParameterizedType: Comparable<Host> at 0", "INS SimpleName: Comparable to SimpleType: Comparable at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleType: TokenRange to ParameterizedType: List<TokenRange> at 1", "INS SimpleName: TokenRange to SimpleType: TokenRange at 0", "INS FieldDeclaration to TypeDeclaration: class at 14", "INS SimpleType: List to ParameterizedType: List<TokenRange> at 0", "INS SimpleName: ranges to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ParameterizedType: List<TokenRange> to FieldDeclaration at 1", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 34", "operations": ["INS ReturnStatement to Block at 1", "INS ThisExpression to ReturnStatement at 0", "INS SimpleName: ranges to Assignment: = at 1", "INS SimpleName: ranges to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: TokenRange to SimpleType: TokenRange at 0", "INS SimpleType: List to ParameterizedType: List<TokenRange> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: Host to MethodDeclaration at 1", "INS SimpleName: Host to SimpleType: Host at 0", "INS ParameterizedType: List<TokenRange> to SingleVariableDeclaration at 0", "INS SimpleName: ranges to SingleVariableDeclaration at 1", "INS SimpleName: setTokenRanges to MethodDeclaration at 2", "INS SimpleType: TokenRange to ParameterizedType: List<TokenRange> at 1", "INS MethodDeclaration to TypeDeclaration: class at 34"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 35", "operations": ["INS SimpleType: TokenRange to ParameterizedType: List<TokenRange> at 1", "INS SimpleName: getTokenRanges to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: TokenRange to SimpleType: TokenRange at 0", "INS MethodDeclaration to TypeDeclaration: class at 35", "INS SimpleType: List to ParameterizedType: List<TokenRange> at 0", "INS FieldAccess to ReturnStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS ParameterizedType: List<TokenRange> to MethodDeclaration at 1", "INS SimpleName: ranges to FieldAccess at 1", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 36", "INS SimpleName: other to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: int to MethodDeclaration at 2", "INS ThisExpression to FieldAccess at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: comp to Assignment: = at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: - to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 1", "INS QualifiedName: other.ipAddress to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: compareTo to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS QualifiedName: other.port to InfixExpression: - at 1", "INS SimpleName: ipAddress to FieldAccess at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: compareTo to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationStatement to Block at 0", "INS FieldAccess to InfixExpression: - at 0", "INS SimpleType: Host to SingleVariableDeclaration at 0", "INS SimpleName: comp to VariableDeclarationFragment at 0", "INS SimpleName: comp to InfixExpression: == at 0", "INS SimpleName: comp to ReturnStatement at 0", "INS SimpleName: port to FieldAccess at 1", "INS SimpleName: Host to SimpleType: Host at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from setDc to setRack", "operations": ["UPD SimpleName: setDc from setDc to setRack"]}, {"root": "UPDATE from getDc to getRack", "operations": ["UPD SimpleName: getDc from getDc to getRack"]}, {"root": "UPDATE from UKNOWN_DC to UKNOWN_RACK", "operations": ["UPD SimpleName: UKNOWN_DC from UKNOWN_DC to UKNOWN_RACK", "UPD SimpleName: UKNOWN_DC from UKNOWN_DC to UKNOWN_RACK"]}, {"root": "UPDATE from dc to rack", "operations": ["UPD SimpleName: dc from dc to rack", "UPD SimpleName: dc from dc to rack", "UPD SimpleName: dc from dc to rack", "UPD SimpleName: dc from dc to rack", "UPD SimpleName: dc from dc to rack"]}, {"root": "UPDATE from ipPattern to IP_ADDR_PATTERN", "operations": ["UPD SimpleName: ipPattern from ipPattern to IP_ADDR_PATTERN", "UPD SimpleName: ipPattern from ipPattern to IP_ADDR_PATTERN"]}]}}, {"Host_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(694) at 3", "Insert ImportDeclaration(27) into CompilationUnit(694) at 7", "Insert QualifiedName: java.util.List(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: com.google.common.collect.Lists(26) into ImportDeclaration(27) at 0", "Insert ParameterizedType: Comparable<Host>(43) into TypeDeclaration: class(693) at 3", "Insert FieldDeclaration(134) into TypeDeclaration: class(693) at 14", "Insert MethodDeclaration(643) into TypeDeclaration: class(693) at 34", "Insert MethodDeclaration(656) into TypeDeclaration: class(693) at 35", "Insert MethodDeclaration(692) into TypeDeclaration: class(693) at 36", "Insert SimpleType: Comparable(40) into ParameterizedType: Comparable<Host>(43) at 0", "Insert SimpleType: Host(42) into ParameterizedType: Comparable<Host>(43) at 1", "Insert Modifier: private(123) into FieldDeclaration(134) at 0", "Insert ParameterizedType: List<TokenRange>(128) into FieldDeclaration(134) at 1", "Insert VariableDeclarationFragment(133) into FieldDeclaration(134) at 2", "Update SimpleName: setDc(579) to setRack", "Update SimpleName: getDc(597) to getRack", "Insert Modifier: public(623) into MethodDeclaration(643) at 0", "Insert SimpleType: Host(625) into MethodDeclaration(643) at 1", "Insert SimpleName: setTokenRanges(626) into MethodDeclaration(643) at 2", "Insert SingleVariableDeclaration(633) into MethodDeclaration(643) at 3", "Insert Block(642) into MethodDeclaration(643) at 4", "Insert Modifier: public(644) into MethodDeclaration(656) at 0", "Insert ParameterizedType: List<TokenRange>(649) into MethodDeclaration(656) at 1", "Insert SimpleName: getTokenRanges(650) into MethodDeclaration(656) at 2", "Insert Block(655) into MethodDeclaration(656) at 3", "Insert MarkerAnnotation(658) into MethodDeclaration(692) at 0", "Insert Modifier: public(659) into MethodDeclaration(692) at 1", "Insert PrimitiveType: int(660) into MethodDeclaration(692) at 2", "Insert SimpleName: compareTo(661) into MethodDeclaration(692) at 3", "Insert SingleVariableDeclaration(665) into MethodDeclaration(692) at 4", "Insert Block(691) into MethodDeclaration(692) at 5", "Insert SimpleName: Comparable(39) into SimpleType: Comparable(40) at 0", "Insert SimpleName: Host(41) into SimpleType: Host(42) at 0", "Update SimpleName: UKNOWN_DC(51) to UKNOWN_RACK", "Update SimpleName: dc(92) to rack", "Update SimpleName: UKNOWN_DC(93) to UKNOWN_RACK", "Insert SimpleType: List(125) into ParameterizedType: List<TokenRange>(128) at 0", "Insert SimpleType: TokenRange(127) into ParameterizedType: List<TokenRange>(128) at 1", "Insert SimpleName: ranges(129) into VariableDeclarationFragment(133) at 0", "Insert MethodInvocation(132) into VariableDeclarationFragment(133) at 1", "Update SimpleName: ipPattern(118) to IP_ADDR_PATTERN", "Update SimpleName: dc(582) to rack", "Insert SimpleName: Host(624) into SimpleType: Host(625) at 0", "Insert ParameterizedType: List<TokenRange>(631) into SingleVariableDeclaration(633) at 0", "Insert SimpleName: ranges(632) into SingleVariableDeclaration(633) at 1", "Insert ExpressionStatement(639) into Block(642) at 0", "Insert ReturnStatement(641) into Block(642) at 1", "Insert SimpleType: List(646) into ParameterizedType: List<TokenRange>(649) at 0", "Insert SimpleType: TokenRange(648) into ParameterizedType: List<TokenRange>(649) at 1", "Insert ReturnStatement(654) into Block(655) at 0", "Insert SimpleName: Override(657) into MarkerAnnotation(658) at 0", "Insert SimpleType: Host(663) into SingleVariableDeclaration(665) at 0", "Insert SimpleName: other(664) into SingleVariableDeclaration(665) at 1", "Insert VariableDeclarationStatement(675) into Block(691) at 0", "Insert IfStatement(688) into Block(691) at 1", "Insert ReturnStatement(690) into Block(691) at 2", "Insert SimpleName: List(124) into SimpleType: List(125) at 0", "Insert SimpleName: TokenRange(126) into SimpleType: TokenRange(127) at 0", "Insert SimpleName: Lists(130) into MethodInvocation(132) at 0", "Insert SimpleName: newArrayList(131) into MethodInvocation(132) at 1", "Update SimpleName: dc(598) to rack", "Insert SimpleType: List(628) into ParameterizedType: List<TokenRange>(631) at 0", "Insert SimpleType: TokenRange(630) into ParameterizedType: List<TokenRange>(631) at 1", "Insert Assignment: =(638) into ExpressionStatement(639) at 0", "Insert ThisExpression(640) into ReturnStatement(641) at 0", "Insert SimpleName: List(645) into SimpleType: List(646) at 0", "Insert SimpleName: TokenRange(647) into SimpleType: TokenRange(648) at 0", "Insert FieldAccess(653) into ReturnStatement(654) at 0", "Insert SimpleName: Host(662) into SimpleType: Host(663) at 0", "Insert PrimitiveType: int(666) into VariableDeclarationStatement(675) at 0", "Insert VariableDeclarationFragment(674) into VariableDeclarationStatement(675) at 1", "Insert InfixExpression: ==(678) into IfStatement(688) at 0", "Insert Block(687) into IfStatement(688) at 1", "Insert SimpleName: comp(689) into ReturnStatement(690) at 0", "Update SimpleName: dc(587) to rack", "Insert SimpleName: List(627) into SimpleType: List(628) at 0", "Insert SimpleName: TokenRange(629) into SimpleType: TokenRange(630) at 0", "Insert FieldAccess(636) into Assignment: =(638) at 0", "Insert SimpleName: ranges(637) into Assignment: =(638) at 1", "Insert ThisExpression(651) into FieldAccess(653) at 0", "Insert SimpleName: ranges(652) into FieldAccess(653) at 1", "Insert SimpleName: comp(667) into VariableDeclarationFragment(674) at 0", "Insert MethodInvocation(673) into VariableDeclarationFragment(674) at 1", "Insert SimpleName: comp(676) into InfixExpression: ==(678) at 0", "Insert NumberLiteral: 0(677) into InfixExpression: ==(678) at 1", "Insert ExpressionStatement(686) into Block(687) at 0", "Update SimpleName: ipPattern(220) to IP_ADDR_PATTERN", "Update SimpleName: dc(585) to rack", "Insert ThisExpression(634) into FieldAccess(636) at 0", "Insert SimpleName: ranges(635) into FieldAccess(636) at 1", "Insert FieldAccess(670) into MethodInvocation(673) at 0", "Insert SimpleName: compareTo(671) into MethodInvocation(673) at 1", "Insert QualifiedName: other.ipAddress(672) into MethodInvocation(673) at 2", "Insert Assignment: =(685) into ExpressionStatement(686) at 0", "Insert ThisExpression(668) into FieldAccess(670) at 0", "Insert SimpleName: ipAddress(669) into FieldAccess(670) at 1", "Insert SimpleName: comp(679) into Assignment: =(685) at 0", "Insert InfixExpression: -(684) into Assignment: =(685) at 1", "Insert FieldAccess(682) into InfixExpression: -(684) at 0", "Insert QualifiedName: other.port(683) into InfixExpression: -(684) at 1", "Insert ThisExpression(680) into FieldAccess(682) at 0", "Insert SimpleName: port(681) into FieldAccess(682) at 1"]}}, {"HostConnectionPool_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: interface", "operations": ["MOV MethodDeclaration to TypeDeclaration: interface at 20"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 20", "operations": ["INS PrimitiveType: int to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: interface at 20", "INS SimpleName: getFailedOpenConnectionCount to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 1", "INS TextElement: Get the total number of failed connection open attempts to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 21", "operations": ["INS MethodDeclaration to TypeDeclaration: interface at 21", "INS TextElement: Get total number of connections closed to TagElement at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: getClosedConnectionCount to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 22", "operations": ["INS SimpleName: getErrorsSinceLastSuccess to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: interface at 22", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS TagElement: @return to Javadoc at 1", "INS TextElement: Get number of errors since the last successful operation to TagElement at 0"]}, {"root": "UPDATE from double to int", "operations": ["UPD PrimitiveType: double from double to int"]}, {"root": "UPDATE from getMeanLatency to getOpenedConnectionCount", "operations": ["UPD SimpleName: getMeanLatency from getMeanLatency to getOpenedConnectionCount"]}, {"root": "UPDATE from Get the average latency as calculated by the scoring strategy to Get total number of connections opened since the pool was created", "operations": ["UPD TextElement: Get the average latency as calculated by the scoring strategy from Get the average latency as calculated by the scoring strategy to Get total number of connections opened since the pool was created"]}]}}, {"HostConnectionPool_diff": {"operations": ["Move MethodDeclaration(189) into TypeDeclaration: interface(226) at 20", "Insert MethodDeclaration(211) into TypeDeclaration: interface(226) at 20", "Insert MethodDeclaration(218) into TypeDeclaration: interface(226) at 21", "Insert MethodDeclaration(225) into TypeDeclaration: interface(226) at 22", "Update PrimitiveType: double(187) to int", "Update SimpleName: getMeanLatency(188) to getOpenedConnectionCount", "Insert Javadoc(208) into MethodDeclaration(211) at 0", "Insert PrimitiveType: int(209) into MethodDeclaration(211) at 1", "Insert SimpleName: getFailedOpenConnectionCount(210) into MethodDeclaration(211) at 2", "Insert Javadoc(215) into MethodDeclaration(218) at 0", "Insert PrimitiveType: int(216) into MethodDeclaration(218) at 1", "Insert SimpleName: getClosedConnectionCount(217) into MethodDeclaration(218) at 2", "Insert Javadoc(222) into MethodDeclaration(225) at 0", "Insert PrimitiveType: int(223) into MethodDeclaration(225) at 1", "Insert SimpleName: getErrorsSinceLastSuccess(224) into MethodDeclaration(225) at 2", "Insert TagElement(206) into Javadoc(208) at 0", "Insert TagElement: @return(207) into Javadoc(208) at 1", "Insert TagElement(213) into Javadoc(215) at 0", "Insert TagElement: @return(214) into Javadoc(215) at 1", "Insert TagElement(220) into Javadoc(222) at 0", "Insert TagElement: @return(221) into Javadoc(222) at 1", "Update TextElement: Get the average latency as calculated by the scoring strategy(183) to Get total number of connections opened since the pool was created", "Insert TextElement: Get the total number of failed connection open attempts(205) into TagElement(206) at 0", "Insert TextElement: Get total number of connections closed(212) into TagElement(213) at 0", "Insert TextElement: Get number of errors since the last successful operation(219) into TagElement(220) at 0"]}}, {"LatencyScoreStrategy_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL SimpleName: getMean", "DEL TextElement: Get the mean for the sample window", "DEL TagElement", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL PrimitiveType: double"]}]}}, {"LatencyScoreStrategy_diff": {"operations": ["Delete TextElement: Get the mean for the sample window(54)", "Delete TagElement(55)", "Delete TagElement: @return(56)", "Delete Javadoc(57)", "Delete PrimitiveType: double(58)", "Delete SimpleName: getMean(59)", "Delete MethodDeclaration(60)"]}}, {"LatencyScoreStrategyType_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 4", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 4", "INS SimpleName: EMA to EnumConstantDeclaration at 0"]}]}}, {"LatencyScoreStrategyType_diff": {"operations": ["Insert EnumConstantDeclaration(9) into EnumDeclaration(10) at 4", "Insert SimpleName: EMA(8) into EnumConstantDeclaration(9) at 0"]}}, {"Operation_cluster": {"actions": [{"root": "UPDATE from java.math.BigInteger to java.nio.ByteBuffer", "operations": ["UPD QualifiedName: java.math.BigInteger from java.math.BigInteger to java.nio.ByteBuffer"]}, {"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from getToken to getRowKey", "operations": ["UPD SimpleName: getToken from getToken to getRowKey"]}]}}, {"Operation_diff": {"operations": ["Update QualifiedName: java.math.BigInteger(14) to java.nio.ByteBuffer", "Update SimpleType: BigInteger(66) to ByteBuffer", "Update SimpleName: getToken(67) to getRowKey", "Update SimpleName: BigInteger(65) to ByteBuffer"]}}, {"OperationResult_cluster": {"actions": [{"root": "UPDATE from Return the length of time to perform the operation. Does not include to Return the length of time to perform the operation to the remote service. Does not include", "operations": ["UPD TextElement: Return the length of time to perform the operation. Does not include from Return the length of time to perform the operation. Does not include to Return the length of time to perform the operation to the remote service. Does not include"]}]}}, {"OperationResult_diff": {"operations": ["Update TextElement: Return the length of time to perform the operation. Does not include(44) to Return the length of time to perform the operation to the remote service. Does not include"]}}, {"TokenRange_cluster": {"actions": [{"root": "INS Javadoc to TypeDeclaration: interface at 0", "operations": ["INS Javadoc to TypeDeclaration: interface at 0", "INS TagElement: @author to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS TextElement:  elandau to TagElement: @author at 0", "INS TextElement: Represents a contiguous range of tokens. to TagElement at 0"]}]}}, {"TokenRange_diff": {"operations": ["Insert Javadoc(20) into TypeDeclaration: interface(38) at 0", "Insert TagElement(17) into Javadoc(20) at 0", "Insert TagElement: @author(19) into Javadoc(20) at 1", "Insert TextElement: Represents a contiguous range of tokens.(16) into TagElement(17) at 0", "Insert TextElement:  elandau(18) into TagElement: @author(19) at 0"]}}, {"FilteringHostSupplier_cluster": {"actions": [{"root": "UPDATE from java.util.Map.Entry to javax.annotation.Nullable", "operations": ["UPD QualifiedName: java.util.Map.Entry from java.util.Map.Entry to javax.annotation.Nullable"]}, {"root": "UPDATE from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "operations": ["UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "INS ParameterizedType: Supplier<List<Host>> to FieldDeclaration at 2", "operations": ["INS ParameterizedType: Supplier<List<Host>> to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: Supplier<Map<BigInteger,List<Host>>> to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<Host> to MethodDeclaration at 2"]}, {"root": "MOVE from ParameterizedType: Supplier<List<Host>>", "operations": ["MOV SimpleType: Supplier to ParameterizedType: Supplier<List<Host>> at 0"]}, {"root": "MOVE from ParameterizedType: Supplier<List<Host>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<List<Host>> at 1"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Supplier<Map<BigInteger,List<Host>>> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from filterSupplier to sourceSupplier", "operations": ["UPD SimpleName: filterSupplier from filterSupplier to sourceSupplier"]}, {"root": "UPDATE from sourceSupplier to filterSupplier", "operations": ["UPD SimpleName: sourceSupplier from sourceSupplier to filterSupplier"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 4"]}, {"root": "INS ReturnStatement to Block at 5", "operations": ["INS ReturnStatement to Block at 5", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<Host> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<Host> to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: filterList to EnhancedForStatement at 1", "operations": ["INS SimpleName: filterList to EnhancedForStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: newArrayList to MethodInvocation at 1", "MOV SimpleName: Lists to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from Maps to Lists", "operations": ["UPD SimpleName: Maps from Maps to Lists"]}, {"root": "UPDATE from newHashMap to newArrayList", "operations": ["UPD SimpleName: newHashMap from newHashMap to newArrayList"]}, {"root": "UPDATE from token to sourceList", "operations": ["UPD SimpleName: token from token to sourceList"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: token to MethodInvocation at 2"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Host to SingleVariableDeclaration at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.math.BigInteger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Function", "DEL ImportDeclaration"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleType: Map", "DEL SimpleType: BigInteger", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: BigInteger", "DEL SimpleName: Map"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleType: Map", "DEL SimpleName: BigInteger", "DEL SimpleName: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: BigInteger"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: BigInteger", "DEL SimpleType: Map", "DEL SimpleType: BigInteger", "DEL SimpleName: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>"]}, {"root": "DEL ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["DEL ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: Map", "DEL SimpleType: Map", "DEL SimpleType: BigInteger", "DEL SimpleName: BigInteger"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: BigInteger", "DEL SimpleName: Map", "DEL SimpleType: BigInteger", "DEL SimpleType: Map"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: Map", "DEL SimpleType: BigInteger", "DEL SimpleType: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: BigInteger"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: Map", "DEL SimpleName: BigInteger", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: BigInteger", "DEL SimpleType: Map"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleType: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: BigInteger", "DEL SimpleName: BigInteger", "DEL SimpleName: Map"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: token", "DEL SimpleName: getValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getValue", "DEL MethodInvocation"]}, {"root": "DEL SimpleType: Host", "operations": ["DEL SimpleName: Host", "DEL SimpleType: Host"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: BigInteger", "DEL SimpleType: List", "DEL SimpleName: entrySet", "DEL SimpleName: token", "DEL SimpleType: Host", "DEL ParameterizedType: List<Host>", "DEL SingleVariableDeclaration", "DEL SimpleType: Entry", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: BigInteger", "DEL SimpleName: Entry", "DEL ParameterizedType: Entry<BigInteger,List<Host>>", "DEL EnhancedForStatement", "DEL SimpleName: Host", "DEL SimpleName: List", "DEL SimpleName: filterList"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: Map", "DEL SimpleType: BigInteger", "DEL SimpleName: Map", "DEL SimpleName: response", "DEL SimpleName: Maps", "DEL SimpleName: Host", "DEL SimpleName: List", "DEL ParameterizedType: List<Host>", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL MethodInvocation", "DEL SimpleType: Host", "DEL VariableDeclarationStatement", "DEL SimpleName: BigInteger", "DEL SimpleType: List", "DEL SimpleName: newHashMap"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleType: Host", "DEL SimpleName: token", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: apply", "DEL SimpleName: host", "DEL SimpleName: Host", "DEL SimpleName: getKey", "DEL SimpleName: sourceList", "DEL MethodInvocation", "DEL SimpleName: Collections2", "DEL SimpleType: Entry", "DEL SimpleType: Host", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: put", "DEL ParameterizedType: List<Host>", "DEL SimpleName: BigInteger", "DEL SimpleType: List", "DEL SimpleName: host", "DEL SimpleType: BigInteger", "DEL SimpleName: lookup", "DEL SimpleName: Host", "DEL SimpleName: getIpAddress", "DEL ReturnStatement", "DEL SimpleType: Host", "DEL SimpleName: transform", "DEL SimpleName: response", "DEL SimpleType: Host", "DEL SimpleName: token", "DEL SimpleName: get", "DEL SimpleName: Host", "DEL SimpleName: entrySet", "DEL ParameterizedType: Function<Host,Host>", "DEL EnhancedForStatement", "DEL MarkerAnnotation", "DEL SimpleName: List", "DEL MethodInvocation", "DEL Block", "DEL ParameterizedType: Entry<BigInteger,List<Host>>", "DEL MethodDeclaration", "DEL SimpleName: Function", "DEL SimpleName: Host", "DEL SimpleName: Entry", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL AnonymousClassDeclaration", "DEL SimpleType: Function"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: response", "DEL ReturnStatement"]}]}}, {"FilteringHostSupplier_diff": {"operations": ["Update QualifiedName: java.util.Map.Entry(8) to javax.annotation.Nullable", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(44) to Supplier<List<Host>>", "Move SingleVariableDeclaration(97) into MethodDeclaration(97) at 4", "Move ParameterizedType: List<Host>(138) into ParameterizedType: Supplier<List<Host>>(35) at 1", "Insert ParameterizedType: Supplier<List<Host>>(45) into FieldDeclaration(48) at 2", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(59) to Supplier<List<Host>>", "Move ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(59) into FieldDeclaration(61) at 2", "Move ParameterizedType: List<Host>(108) into MethodDeclaration(234) at 2", "Move SimpleType: Supplier(99) into ParameterizedType: Supplier<List<Host>>(45) at 0", "Move ParameterizedType: List<Host>(42) into ParameterizedType: Supplier<List<Host>>(45) at 1", "Move ParameterizedType: List<Host>(57) into ParameterizedType: Supplier<List<Host>>(58) at 1", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(77) to Supplier<List<Host>>", "Move ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(77) into SingleVariableDeclaration(73) at 0", "Update SimpleName: filterSupplier(111) to sourceSupplier", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(95) to Supplier<List<Host>>", "Update SimpleName: sourceSupplier(96) to filterSupplier", "Move EnhancedForStatement(258) into Block(233) at 4", "Insert ReturnStatement(232) into Block(233) at 5", "Move ParameterizedType: List<Host>(75) into ParameterizedType: Supplier<List<Host>>(71) at 1", "Move ParameterizedType: List<Host>(93) into ParameterizedType: Supplier<List<Host>>(81) at 1", "Move ParameterizedType: List<Host>(165) into VariableDeclarationStatement(117) at 0", "Move ParameterizedType: List<Host>(149) into VariableDeclarationStatement(125) at 0", "Insert SimpleName: filterList(172) into EnhancedForStatement(197) at 1", "Insert MethodInvocation(231) into ReturnStatement(232) at 0", "Move SimpleName: Lists(297) into MethodInvocation(231) at 0", "Move SimpleName: newArrayList(298) into MethodInvocation(231) at 1", "Move MethodInvocation(331) into MethodInvocation(231) at 2", "Update SimpleName: Maps(152) to Lists", "Update SimpleName: newHashMap(153) to newArrayList", "Update SimpleName: token(303) to sourceList", "Move SimpleName: token(303) into MethodInvocation(230) at 2", "Insert MarkerAnnotation(214) into SingleVariableDeclaration(218) at 0", "Move SimpleType: Host(335) into SingleVariableDeclaration(218) at 1", "Insert SimpleName: Nullable(213) into MarkerAnnotation(214) at 0", "Delete QualifiedName: java.math.BigInteger(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Function(10)", "Delete ImportDeclaration(11)", "Delete SimpleName: Map(34)", "Delete SimpleType: Map(35)", "Delete SimpleName: BigInteger(36)", "Delete SimpleType: BigInteger(37)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(43)", "Delete SimpleName: Map(49)", "Delete SimpleType: Map(50)", "Delete SimpleName: BigInteger(51)", "Delete SimpleType: BigInteger(52)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(58)", "Delete SimpleName: Map(67)", "Delete SimpleType: Map(68)", "Delete SimpleName: BigInteger(69)", "Delete SimpleType: BigInteger(70)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(76)", "Delete SimpleName: Map(100)", "Delete SimpleType: Map(101)", "Delete SimpleName: BigInteger(102)", "Delete SimpleType: BigInteger(103)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(109)", "Delete ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(110)", "Delete SimpleName: Map(85)", "Delete SimpleType: Map(86)", "Delete SimpleName: BigInteger(87)", "Delete SimpleType: BigInteger(88)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(94)", "Delete SimpleName: Map(130)", "Delete SimpleType: Map(131)", "Delete SimpleName: BigInteger(132)", "Delete SimpleType: BigInteger(133)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(139)", "Delete SimpleName: Map(141)", "Delete SimpleType: Map(142)", "Delete SimpleName: BigInteger(143)", "Delete SimpleType: BigInteger(144)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(150)", "Delete SimpleName: Map(157)", "Delete SimpleType: Map(158)", "Delete SimpleName: BigInteger(159)", "Delete SimpleType: BigInteger(160)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(166)", "Delete SimpleName: token(231)", "Delete SimpleName: getValue(232)", "Delete MethodInvocation(233)", "Delete SimpleName: getValue(304)", "Delete MethodInvocation(305)", "Delete SimpleName: Host(316)", "Delete SimpleType: Host(317)", "Delete SimpleName: Entry(212)", "Delete SimpleType: Entry(213)", "Delete SimpleName: BigInteger(214)", "Delete SimpleType: BigInteger(215)", "Delete SimpleName: List(216)", "Delete SimpleType: List(217)", "Delete SimpleName: Host(218)", "Delete SimpleType: Host(219)", "Delete ParameterizedType: List<Host>(220)", "Delete ParameterizedType: Entry<BigInteger,List<Host>>(221)", "Delete SimpleName: token(222)", "Delete SingleVariableDeclaration(223)", "Delete SimpleName: filterList(224)", "Delete SimpleName: entrySet(225)", "Delete MethodInvocation(226)", "Delete Block(259)", "Delete EnhancedForStatement(260)", "Delete SimpleName: Map(261)", "Delete SimpleType: Map(262)", "Delete SimpleName: BigInteger(263)", "Delete SimpleType: BigInteger(264)", "Delete SimpleName: List(265)", "Delete SimpleType: List(266)", "Delete SimpleName: Host(267)", "Delete SimpleType: Host(268)", "Delete ParameterizedType: List<Host>(269)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(270)", "Delete SimpleName: response(271)", "Delete SimpleName: Maps(272)", "Delete SimpleName: newHashMap(273)", "Delete MethodInvocation(274)", "Delete VariableDeclarationFragment(275)", "Delete VariableDeclarationStatement(276)", "Delete SimpleName: Entry(277)", "Delete SimpleType: Entry(278)", "Delete SimpleName: BigInteger(279)", "Delete SimpleType: BigInteger(280)", "Delete SimpleName: List(281)", "Delete SimpleType: List(282)", "Delete SimpleName: Host(283)", "Delete SimpleType: Host(284)", "Delete ParameterizedType: List<Host>(285)", "Delete ParameterizedType: Entry<BigInteger,List<Host>>(286)", "Delete SimpleName: token(287)", "Delete SingleVariableDeclaration(288)", "Delete SimpleName: sourceList(289)", "Delete SimpleName: entrySet(290)", "Delete MethodInvocation(291)", "Delete SimpleName: response(292)", "Delete SimpleName: put(293)", "Delete SimpleName: token(294)", "Delete SimpleName: getKey(295)", "Delete MethodInvocation(296)", "Delete SimpleName: Collections2(299)", "Delete SimpleName: transform(300)", "Delete SimpleName: Function(332)", "Delete SimpleType: Function(333)", "Delete SimpleName: Host(336)", "Delete SimpleType: Host(337)", "Delete ParameterizedType: Function<Host,Host>(338)", "Delete SimpleName: Override(339)", "Delete MarkerAnnotation(340)", "Delete Modifier: public(341)", "Delete SimpleName: Host(342)", "Delete SimpleType: Host(343)", "Delete SimpleName: apply(344)", "Delete SimpleName: Host(345)", "Delete SimpleType: Host(346)", "Delete SimpleName: host(347)", "Delete SingleVariableDeclaration(348)", "Delete SimpleName: lookup(349)", "Delete SimpleName: get(350)", "Delete SimpleName: host(351)", "Delete SimpleName: getIpAddress(352)", "Delete MethodInvocation(353)", "Delete MethodInvocation(354)", "Delete ReturnStatement(355)", "Delete Block(356)", "Delete MethodDeclaration(357)", "Delete AnonymousClassDeclaration(358)", "Delete ClassInstanceCreation(359)", "Delete MethodInvocation(360)", "Delete MethodInvocation(361)", "Delete MethodInvocation(362)", "Delete ExpressionStatement(363)", "Delete Block(364)", "Delete EnhancedForStatement(365)", "Delete SimpleName: response(366)", "Delete ReturnStatement(367)"]}}, {"RingDescribeHostSupplier_cluster": {"actions": [{"root": "UPDATE from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "operations": ["UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<Host> to MethodDeclaration at 2", "MOV SimpleType: Map to ParameterizedType: Function<String,Host> at 0"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS EnhancedForStatement to Block at 1", "INS Block to EnhancedForStatement at 2"]}, {"root": "UPDATE from Function<String,Host> to Map<String,Host>", "operations": ["UPD ParameterizedType: Function<String,Host> from Function<String,Host> to Map<String,Host>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Function<String,Host> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0", "MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: ipToHost to MethodInvocation at 0", "INS SimpleName: values to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Lists to MethodInvocation at 0"]}, {"root": "UPDATE from hosts to ipToHost", "operations": ["UPD SimpleName: hosts from hosts to ipToHost", "UPD SimpleName: range from range to ipToHost"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 0"]}, {"root": "UPDATE from newLinkedHashMap to newHashMap", "operations": ["UPD SimpleName: newLinkedHashMap from newLinkedHashMap to newHashMap"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Host to VariableDeclarationStatement at 0", "MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1", "MOV SimpleName: transform to MethodInvocation at 1", "MOV SimpleName: Lists to MethodInvocation at 0"]}, {"root": "UPDATE from ip to endpoint", "operations": ["UPD SimpleName: ip from ip to endpoint"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: host to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ipToHost to MethodInvocation at 0", "INS SimpleName: endpoint to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: endpoint to ClassInstanceCreation at 1", "INS ClassInstanceCreation to Assignment: = at 1", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: endpoint to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: host to MethodInvocation at 3", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: host to InfixExpression: == at 0", "INS SimpleName: host to Assignment: = at 0", "INS SimpleName: defaultPort to ClassInstanceCreation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: range to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "UPDATE from put to get", "operations": ["UPD SimpleName: put from put to get"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: put to MethodInvocation at 1"]}, {"root": "UPDATE from Lists to host", "operations": ["UPD SimpleName: Lists from Lists to host"]}, {"root": "UPDATE from transform to getTokenRanges", "operations": ["UPD SimpleName: transform from transform to getTokenRanges"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: range to MethodInvocation at 0", "MOV SimpleName: getEndToken to MethodInvocation at 1"]}, {"root": "UPDATE from getEndToken to put", "operations": ["UPD SimpleName: getEndToken from getEndToken to put"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Host to ClassInstanceCreation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.math.BigInteger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Function"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: BigInteger", "DEL SimpleType: Map", "DEL SimpleName: BigInteger"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleType: BigInteger", "DEL SimpleName: BigInteger", "DEL ParameterizedType: Map<BigInteger,List<Host>>"]}, {"root": "DEL SimpleType: Function", "operations": ["DEL SimpleType: Function", "DEL SimpleName: Function"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleType: BigInteger", "DEL ParameterizedType: List<Host>", "DEL SimpleName: List", "DEL SimpleName: Map", "DEL SimpleType: Host", "DEL SimpleName: Host", "DEL SimpleType: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: BigInteger", "DEL SimpleType: List"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: hosts", "DEL SimpleName: defaultPort", "DEL SimpleName: apply", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleName: ip", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: BigInteger", "DEL Modifier: public", "DEL Block", "DEL AnonymousClassDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: BigInteger", "DEL ClassInstanceCreation", "DEL SimpleName: Override"]}, {"root": "DEL SimpleName: hosts", "operations": ["DEL SimpleName: hosts"]}]}}, {"RingDescribeHostSupplier_diff": {"operations": ["Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(44) to Supplier<List<Host>>", "Move ParameterizedType: List<Host>(42) into ParameterizedType: Supplier<List<Host>>(35) at 1", "Move ParameterizedType: List<Host>(162) into MethodDeclaration(240) at 2", "Insert EnhancedForStatement(218) into Block(226) at 1", "Update ParameterizedType: Function<String,Host>(209) to Map<String,Host>", "Move ParameterizedType: Function<String,Host>(209) into VariableDeclarationStatement(163) at 0", "Move SingleVariableDeclaration(184) into EnhancedForStatement(218) at 0", "Move MethodInvocation(189) into EnhancedForStatement(218) at 1", "Insert Block(217) into EnhancedForStatement(218) at 2", "Insert MethodInvocation(224) into ReturnStatement(225) at 0", "Move SimpleType: Map(155) into ParameterizedType: Map<String,Host>(157) at 0", "Update SimpleName: hosts(175) to ipToHost", "Move EnhancedForStatement(234) into Block(217) at 0", "Insert SimpleName: Lists(219) into MethodInvocation(224) at 0", "Insert SimpleName: newArrayList(220) into MethodInvocation(224) at 1", "Insert MethodInvocation(223) into MethodInvocation(224) at 2", "Update SimpleName: newLinkedHashMap(177) to newHashMap", "Move SingleVariableDeclaration(219) into EnhancedForStatement(216) at 0", "Move MethodInvocation(202) into EnhancedForStatement(216) at 1", "Insert SimpleName: ipToHost(221) into MethodInvocation(223) at 0", "Insert SimpleName: values(222) into MethodInvocation(223) at 1", "Update SimpleName: ip(218) to endpoint", "Insert VariableDeclarationStatement(188) into Block(215) at 0", "Insert IfStatement(207) into Block(215) at 1", "Insert ExpressionStatement(214) into Block(215) at 2", "Move SimpleType: Host(214) into VariableDeclarationStatement(188) at 0", "Insert VariableDeclarationFragment(187) into VariableDeclarationStatement(188) at 1", "Insert InfixExpression: ==(191) into IfStatement(207) at 0", "Insert Block(206) into IfStatement(207) at 1", "Insert MethodInvocation(213) into ExpressionStatement(214) at 0", "Insert SimpleName: host(182) into VariableDeclarationFragment(187) at 0", "Insert MethodInvocation(186) into VariableDeclarationFragment(187) at 1", "Insert SimpleName: host(189) into InfixExpression: ==(191) at 0", "Insert NullLiteral(190) into InfixExpression: ==(191) at 1", "Insert ExpressionStatement(199) into Block(206) at 0", "Insert ExpressionStatement(205) into Block(206) at 1", "Insert MethodInvocation(210) into MethodInvocation(213) at 0", "Insert SimpleName: add(211) into MethodInvocation(213) at 1", "Insert SimpleName: range(212) into MethodInvocation(213) at 2", "Insert SimpleName: ipToHost(183) into MethodInvocation(186) at 0", "Update SimpleName: put(191) to get", "Move SimpleName: put(191) into MethodInvocation(186) at 1", "Insert SimpleName: endpoint(185) into MethodInvocation(186) at 2", "Insert Assignment: =(198) into ExpressionStatement(199) at 0", "Insert MethodInvocation(204) into ExpressionStatement(205) at 0", "Update SimpleName: Lists(198) to host", "Move SimpleName: Lists(198) into MethodInvocation(210) at 0", "Update SimpleName: transform(199) to getTokenRanges", "Move SimpleName: transform(199) into MethodInvocation(210) at 1", "Insert SimpleName: host(192) into Assignment: =(198) at 0", "Insert ClassInstanceCreation(197) into Assignment: =(198) at 1", "Update SimpleName: range(194) to ipToHost", "Move SimpleName: range(194) into MethodInvocation(204) at 0", "Update SimpleName: getEndToken(195) to put", "Move SimpleName: getEndToken(195) into MethodInvocation(204) at 1", "Insert SimpleName: endpoint(202) into MethodInvocation(204) at 2", "Insert SimpleName: host(203) into MethodInvocation(204) at 3", "Move SimpleType: Host(221) into ClassInstanceCreation(197) at 0", "Insert SimpleName: endpoint(195) into ClassInstanceCreation(197) at 1", "Insert SimpleName: defaultPort(196) into ClassInstanceCreation(197) at 2", "Delete QualifiedName: java.math.BigInteger(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Function(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: Map(34)", "Delete SimpleType: Map(35)", "Delete SimpleName: BigInteger(36)", "Delete SimpleType: BigInteger(37)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(43)", "Delete SimpleName: BigInteger(156)", "Delete SimpleType: BigInteger(157)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(163)", "Delete SimpleName: Function(203)", "Delete SimpleType: Function(204)", "Delete SimpleName: Map(165)", "Delete SimpleType: Map(166)", "Delete SimpleName: BigInteger(167)", "Delete SimpleType: BigInteger(168)", "Delete SimpleName: List(169)", "Delete SimpleType: List(170)", "Delete SimpleName: Host(171)", "Delete SimpleType: Host(172)", "Delete ParameterizedType: List<Host>(173)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(174)", "Delete SimpleName: hosts(190)", "Delete SimpleName: BigInteger(192)", "Delete SimpleType: BigInteger(193)", "Delete MethodInvocation(196)", "Delete ClassInstanceCreation(197)", "Delete SimpleName: Override(210)", "Delete MarkerAnnotation(211)", "Delete Modifier: public(212)", "Delete SimpleName: apply(215)", "Delete SimpleName: ip(222)", "Delete SimpleName: defaultPort(223)", "Delete ClassInstanceCreation(224)", "Delete ReturnStatement(225)", "Delete Block(226)", "Delete MethodDeclaration(227)", "Delete AnonymousClassDeclaration(228)", "Delete ClassInstanceCreation(229)", "Delete MethodInvocation(230)", "Delete MethodInvocation(231)", "Delete ExpressionStatement(232)", "Delete SimpleName: hosts(235)"]}}, {"BigInteger127Partitioner_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleType: BigInteger127Partitioner to ClassInstanceCreation at 0", "INS SimpleType: BigInteger127Partitioner to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: BigInteger127Partitioner to SimpleType: BigInteger127Partitioner at 0", "INS SimpleName: instance to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: BigInteger127Partitioner to SimpleType: BigInteger127Partitioner at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: get to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: Partitioner to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: instance to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS Block to MethodDeclaration at 2", "INS SimpleName: BigInteger127Partitioner to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Modifier: protected to MethodDeclaration at 0"]}]}}, {"BigInteger127Partitioner_diff": {"operations": ["Insert FieldDeclaration(86) into TypeDeclaration: class(377) at 7", "Insert MethodDeclaration(95) into TypeDeclaration: class(377) at 8", "Insert MethodDeclaration(99) into TypeDeclaration: class(377) at 9", "Insert Modifier: private(76) into FieldDeclaration(86) at 0", "Insert Modifier: static(77) into FieldDeclaration(86) at 1", "Insert Modifier: final(78) into FieldDeclaration(86) at 2", "Insert SimpleType: BigInteger127Partitioner(80) into FieldDeclaration(86) at 3", "Insert VariableDeclarationFragment(85) into FieldDeclaration(86) at 4", "Insert Modifier: public(87) into MethodDeclaration(95) at 0", "Insert Modifier: static(88) into MethodDeclaration(95) at 1", "Insert SimpleType: Partitioner(90) into MethodDeclaration(95) at 2", "Insert SimpleName: get(91) into MethodDeclaration(95) at 3", "Insert Block(94) into MethodDeclaration(95) at 4", "Insert Modifier: protected(96) into MethodDeclaration(99) at 0", "Insert SimpleName: BigInteger127Partitioner(97) into MethodDeclaration(99) at 1", "Insert Block(98) into MethodDeclaration(99) at 2", "Insert SimpleName: BigInteger127Partitioner(79) into SimpleType: BigInteger127Partitioner(80) at 0", "Insert SimpleName: instance(81) into VariableDeclarationFragment(85) at 0", "Insert ClassInstanceCreation(84) into VariableDeclarationFragment(85) at 1", "Insert SimpleName: Partitioner(89) into SimpleType: Partitioner(90) at 0", "Insert ReturnStatement(93) into Block(94) at 0", "Insert SimpleType: BigInteger127Partitioner(83) into ClassInstanceCreation(84) at 0", "Insert SimpleName: instance(92) into ReturnStatement(93) at 0", "Insert SimpleName: BigInteger127Partitioner(82) into SimpleType: BigInteger127Partitioner(83) at 0"]}}, {"EmptyConnectionPoolMonitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS SimpleName: getInterruptedCount to MethodDeclaration at 3", "INS NumberLiteral: 0 to ReturnStatement at 0", "INS PrimitiveType: long to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from \"EmptyConnectionPoolMonitor\" to \"EmptyConnectionPoolMonitor[]\"", "operations": ["UPD StringLiteral: \"EmptyConnectionPoolMonitor\" from \"EmptyConnectionPoolMonitor\" to \"EmptyConnectionPoolMonitor[]\""]}]}}, {"EmptyConnectionPoolMonitor_diff": {"operations": ["Insert MethodDeclaration(448) into TypeDeclaration: class(449) at 36", "Insert MarkerAnnotation(441) into MethodDeclaration(448) at 0", "Insert Modifier: public(442) into MethodDeclaration(448) at 1", "Insert PrimitiveType: long(443) into MethodDeclaration(448) at 2", "Insert SimpleName: getInterruptedCount(444) into MethodDeclaration(448) at 3", "Insert Block(447) into MethodDeclaration(448) at 4", "Insert SimpleName: Override(440) into MarkerAnnotation(441) at 0", "Insert ReturnStatement(446) into Block(447) at 0", "Update StringLiteral: \"EmptyConnectionPoolMonitor\"(73) to \"EmptyConnectionPoolMonitor[]\"", "Insert NumberLiteral: 0(445) into ReturnStatement(446) at 0"]}}, {"EmptyLatencyScoreStrategyImpl_cluster": {"actions": [{"root": "UPDATE from \"Empty[]\" to \"EmptyLatencyScoreStrategy[]\"", "operations": ["UPD StringLiteral: \"Empty[]\" from \"Empty[]\" to \"EmptyLatencyScoreStrategy[]\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL PrimitiveType: double", "DEL MarkerAnnotation", "DEL SimpleName: getMean", "DEL NumberLiteral: 0"]}]}}, {"EmptyLatencyScoreStrategyImpl_diff": {"operations": ["Update StringLiteral: \"Empty[]\"(172) to \"EmptyLatencyScoreStrategy[]\"", "Delete SimpleName: Override(67)", "Delete MarkerAnnotation(68)", "Delete Modifier: public(69)", "Delete PrimitiveType: double(70)", "Delete SimpleName: getMean(71)", "Delete NumberLiteral: 0(72)", "Delete ReturnStatement(73)", "Delete Block(74)", "Delete MethodDeclaration(75)"]}}, {"AbstractOperationImpl_cluster": {"actions": [{"root": "UPDATE from java.math.BigInteger to java.nio.ByteBuffer", "operations": ["UPD QualifiedName: java.math.BigInteger from java.math.BigInteger to java.nio.ByteBuffer"]}, {"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from getToken to getRowKey", "operations": ["UPD SimpleName: getToken from getToken to getRowKey"]}]}}, {"AbstractOperationImpl_diff": {"operations": ["Update QualifiedName: java.math.BigInteger(14) to java.nio.ByteBuffer", "Update SimpleType: BigInteger(100) to ByteBuffer", "Update SimpleName: getToken(101) to getRowKey", "Update SimpleName: BigInteger(99) to ByteBuffer"]}}, {"ThriftColumnFamilyQueryImpl_cluster": {"actions": [{"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from getToken to getRowKey", "operations": ["UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "INS QualifiedName: range.start_key to ReturnStatement at 0", "operations": ["INS QualifiedName: range.start_key to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleType: RandomPartitioner", "DEL ClassInstanceCreation", "DEL Modifier: static", "DEL SimpleType: RandomPartitioner", "DEL Modifier: final", "DEL SimpleName: RandomPartitioner", "DEL Modifier: private", "DEL SimpleName: RandomPartitioner", "DEL SimpleName: partitioner", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldAccess", "operations": ["DEL MethodInvocation", "DEL SimpleName: getToken", "DEL SimpleName: partitioner", "DEL FieldAccess", "DEL SimpleName: token"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: token", "DEL SimpleName: getToken", "DEL SimpleName: partitioner", "DEL MethodInvocation"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: partitioner", "DEL SimpleName: token", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: getToken"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: getToken", "DEL SimpleName: partitioner", "DEL MethodInvocation", "DEL SimpleName: token", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: partitioner", "DEL FieldAccess", "DEL QualifiedName: range.start_key", "DEL MethodInvocation", "DEL SimpleName: getToken", "DEL SimpleName: token"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: token", "DEL MethodInvocation", "DEL SimpleName: getToken", "DEL SimpleName: partitioner"]}]}}, {"ThriftColumnFamilyQueryImpl_diff": {"operations": ["Update SimpleType: BigInteger(899) to ByteBuffer", "Update SimpleName: getToken(900) to getRowKey", "Update SimpleType: BigInteger(1772) to ByteBuffer", "Update SimpleName: getToken(1773) to getRowKey", "Update SimpleType: BigInteger(2026) to ByteBuffer", "Update SimpleName: getToken(2027) to getRowKey", "Update SimpleType: BigInteger(2290) to ByteBuffer", "Update SimpleName: getToken(2291) to getRowKey", "Update SimpleName: BigInteger(898) to ByteBuffer", "Update SimpleName: BigInteger(1771) to ByteBuffer", "Update SimpleName: BigInteger(2025) to ByteBuffer", "Update SimpleName: BigInteger(2289) to ByteBuffer", "Move MethodInvocation(908) into ReturnStatement(891) at 0", "Move MethodInvocation(1784) into ReturnStatement(1757) at 0", "Update SimpleType: BigInteger(595) to ByteBuffer", "Update SimpleName: getToken(596) to getRowKey", "Update SimpleType: BigInteger(998) to ByteBuffer", "Update SimpleName: getToken(999) to getRowKey", "Update SimpleType: BigInteger(3032) to ByteBuffer", "Update SimpleName: getToken(3033) to getRowKey", "Update SimpleName: BigInteger(594) to ByteBuffer", "Update SimpleName: BigInteger(997) to ByteBuffer", "Update SimpleName: BigInteger(3031) to ByteBuffer", "Move MethodInvocation(604) into ReturnStatement(592) at 0", "Move MethodInvocation(1007) into ReturnStatement(985) at 0", "Insert QualifiedName: range.start_key(3008) into ReturnStatement(3009) at 0", "Update SimpleType: BigInteger(3557) to ByteBuffer", "Update SimpleName: getToken(3558) to getRowKey", "Update SimpleName: BigInteger(3556) to ByteBuffer", "Move MethodInvocation(3571) into ReturnStatement(3534) at 0", "Delete Modifier: private(222)", "Delete Modifier: static(223)", "Delete Modifier: final(224)", "Delete SimpleName: RandomPartitioner(225)", "Delete SimpleType: RandomPartitioner(226)", "Delete SimpleName: partitioner(227)", "Delete SimpleName: RandomPartitioner(228)", "Delete SimpleType: RandomPartitioner(229)", "Delete ClassInstanceCreation(230)", "Delete VariableDeclarationFragment(231)", "Delete FieldDeclaration(232)", "Delete SimpleName: partitioner(597)", "Delete SimpleName: getToken(598)", "Delete MethodInvocation(605)", "Delete SimpleName: token(606)", "Delete FieldAccess(607)", "Delete SimpleName: partitioner(901)", "Delete SimpleName: getToken(902)", "Delete MethodInvocation(909)", "Delete SimpleName: token(910)", "Delete FieldAccess(911)", "Delete SimpleName: partitioner(1000)", "Delete SimpleName: getToken(1001)", "Delete MethodInvocation(1008)", "Delete SimpleName: token(1009)", "Delete FieldAccess(1010)", "Delete SimpleName: partitioner(1777)", "Delete SimpleName: getToken(1778)", "Delete MethodInvocation(1785)", "Delete SimpleName: token(1786)", "Delete FieldAccess(1787)", "Delete SimpleName: partitioner(3039)", "Delete SimpleName: getToken(3040)", "Delete QualifiedName: range.start_key(3041)", "Delete MethodInvocation(3042)", "Delete SimpleName: token(3043)", "Delete FieldAccess(3044)", "Delete SimpleName: partitioner(3564)", "Delete SimpleName: getToken(3565)", "Delete MethodInvocation(3572)", "Delete SimpleName: token(3573)", "Delete FieldAccess(3574)"]}}, {"ThriftKeyspaceImpl_cluster": {"actions": [{"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from getToken to getRowKey", "operations": ["UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.math.BigInteger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.cassandra.dht.RandomPartitioner"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: partitioner", "DEL SimpleType: RandomPartitioner", "DEL SimpleName: RandomPartitioner", "DEL Modifier: private", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleType: RandomPartitioner", "DEL FieldDeclaration", "DEL Modifier: static", "DEL SimpleName: RandomPartitioner"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: partitioner", "DEL MethodInvocation", "DEL SimpleName: token", "DEL SimpleName: getToken"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: getToken", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: token", "DEL SimpleName: partitioner"]}, {"root": "DEL FieldAccess", "operations": ["DEL MethodInvocation", "DEL SimpleName: token", "DEL SimpleName: getToken", "DEL SimpleName: partitioner", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL SimpleName: token", "DEL SimpleName: partitioner", "DEL MethodInvocation", "DEL SimpleName: getToken", "DEL FieldAccess"]}, {"root": "DEL FieldAccess", "operations": ["DEL MethodInvocation", "DEL SimpleName: getToken", "DEL FieldAccess", "DEL SimpleName: token", "DEL SimpleName: partitioner"]}]}}, {"ThriftKeyspaceImpl_diff": {"operations": ["Update SimpleType: BigInteger(353) to ByteBuffer", "Update SimpleName: getToken(354) to getRowKey", "Update SimpleName: BigInteger(352) to ByteBuffer", "Update SimpleType: BigInteger(1033) to ByteBuffer", "Update SimpleName: getToken(1034) to getRowKey", "Update SimpleType: BigInteger(1189) to ByteBuffer", "Update SimpleName: getToken(1190) to getRowKey", "Update SimpleType: BigInteger(1376) to ByteBuffer", "Update SimpleName: getToken(1377) to getRowKey", "Update SimpleType: BigInteger(1527) to ByteBuffer", "Update SimpleName: getToken(1528) to getRowKey", "Move MethodInvocation(370) into ReturnStatement(354) at 0", "Update SimpleName: BigInteger(1032) to ByteBuffer", "Update SimpleName: BigInteger(1188) to ByteBuffer", "Update SimpleName: BigInteger(1375) to ByteBuffer", "Update SimpleName: BigInteger(1526) to ByteBuffer", "Move MethodInvocation(1042) into ReturnStatement(1021) at 0", "Move MethodInvocation(1198) into ReturnStatement(1172) at 0", "Move MethodInvocation(1385) into ReturnStatement(1354) at 0", "Move MethodInvocation(1536) into ReturnStatement(1500) at 0", "Delete QualifiedName: java.math.BigInteger(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.cassandra.dht.RandomPartitioner(30)", "Delete ImportDeclaration(31)", "Delete Modifier: private(107)", "Delete Modifier: static(108)", "Delete Modifier: final(109)", "Delete SimpleName: RandomPartitioner(110)", "Delete SimpleType: RandomPartitioner(111)", "Delete SimpleName: partitioner(112)", "Delete SimpleName: RandomPartitioner(113)", "Delete SimpleType: RandomPartitioner(114)", "Delete ClassInstanceCreation(115)", "Delete VariableDeclarationFragment(116)", "Delete FieldDeclaration(117)", "Delete SimpleName: partitioner(361)", "Delete SimpleName: getToken(362)", "Delete MethodInvocation(371)", "Delete SimpleName: token(372)", "Delete FieldAccess(373)", "Delete SimpleName: partitioner(1035)", "Delete SimpleName: getToken(1036)", "Delete MethodInvocation(1043)", "Delete SimpleName: token(1044)", "Delete FieldAccess(1045)", "Delete SimpleName: partitioner(1191)", "Delete SimpleName: getToken(1192)", "Delete MethodInvocation(1199)", "Delete SimpleName: token(1200)", "Delete FieldAccess(1201)", "Delete SimpleName: partitioner(1378)", "Delete SimpleName: getToken(1379)", "Delete MethodInvocation(1386)", "Delete SimpleName: token(1387)", "Delete FieldAccess(1388)", "Delete SimpleName: partitioner(1529)", "Delete SimpleName: getToken(1530)", "Delete MethodInvocation(1537)", "Delete SimpleName: token(1538)", "Delete FieldAccess(1539)"]}}, {"ThriftSyncConnectionFactoryImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 33", "operations": ["INS ImportDeclaration to CompilationUnit at 33", "INS QualifiedName: java.util.concurrent.TimeUnit to ImportDeclaration at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: System to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: addLatencySample to MethodInvocation at 1", "INS SimpleName: nanoTime to MethodInvocation at 1", "INS SimpleName: cpConfig to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getSocketTimeout to MethodInvocation at 1", "INS SimpleName: pool to MethodInvocation at 0", "INS QualifiedName: TimeUnit.NANOSECONDS to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: TimeUnit.MILLISECONDS to MethodInvocation at 3", "INS SimpleName: convert to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 1", "INS QualifiedName: TimeUnit.NANOSECONDS to MethodInvocation at 0", "INS SimpleName: nanoTime to MethodInvocation at 1", "INS QualifiedName: TimeUnit.MILLISECONDS to MethodInvocation at 3", "INS SimpleName: pool to MethodInvocation at 0", "INS SimpleName: getSocketTimeout to MethodInvocation at 1", "INS SimpleName: System to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: addLatencySample to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: convert to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: cpConfig to MethodInvocation at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: cpConfig to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: TimeUnit.NANOSECONDS to MethodInvocation at 0", "INS SimpleName: getSocketTimeout to MethodInvocation at 1", "INS QualifiedName: TimeUnit.MILLISECONDS to MethodInvocation at 3"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from latency to convert", "operations": ["UPD SimpleName: latency from latency to convert", "UPD SimpleName: latency from latency to convert"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: latency to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: cpConfig to MethodInvocation at 0", "INS QualifiedName: TimeUnit.MILLISECONDS to MethodInvocation at 3", "INS QualifiedName: TimeUnit.NANOSECONDS to MethodInvocation at 0", "INS SimpleName: getSocketTimeout to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: addLatencySample to MethodInvocation at 1", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: cpConfig to MethodInvocation at 0", "INS SimpleName: pool to MethodInvocation at 0", "INS QualifiedName: TimeUnit.NANOSECONDS to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getSocketTimeout to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: TimeUnit.MILLISECONDS to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: nanoTime to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: convert to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: latency to MethodInvocation at 1"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}]}}, {"ThriftSyncConnectionFactoryImpl_diff": {"operations": ["Insert ImportDeclaration(79) into CompilationUnit(1187) at 33", "Insert QualifiedName: java.util.concurrent.TimeUnit(78) into ImportDeclaration(79) at 0", "Insert ExpressionStatement(781) into Block(814) at 0", "Insert ExpressionStatement(839) into Block(876) at 1", "Insert Block(607) into IfStatement(608) at 1", "Insert MethodInvocation(780) into ExpressionStatement(781) at 0", "Insert MethodInvocation(838) into ExpressionStatement(839) at 0", "Insert ExpressionStatement(606) into Block(607) at 0", "Insert SimpleName: pool(768) into MethodInvocation(780) at 0", "Insert SimpleName: addLatencySample(769) into MethodInvocation(780) at 1", "Insert MethodInvocation(776) into MethodInvocation(780) at 2", "Insert MethodInvocation(779) into MethodInvocation(780) at 3", "Insert SimpleName: pool(826) into MethodInvocation(838) at 0", "Insert SimpleName: addLatencySample(827) into MethodInvocation(838) at 1", "Insert MethodInvocation(834) into MethodInvocation(838) at 2", "Insert MethodInvocation(837) into MethodInvocation(838) at 3", "Insert Block(504) into IfStatement(505) at 1", "Move MethodInvocation(590) into ExpressionStatement(606) at 0", "Insert QualifiedName: TimeUnit.NANOSECONDS(770) into MethodInvocation(776) at 0", "Insert SimpleName: convert(771) into MethodInvocation(776) at 1", "Insert MethodInvocation(774) into MethodInvocation(776) at 2", "Insert QualifiedName: TimeUnit.MILLISECONDS(775) into MethodInvocation(776) at 3", "Insert SimpleName: System(777) into MethodInvocation(779) at 0", "Insert SimpleName: nanoTime(778) into MethodInvocation(779) at 1", "Insert QualifiedName: TimeUnit.NANOSECONDS(828) into MethodInvocation(834) at 0", "Insert SimpleName: convert(829) into MethodInvocation(834) at 1", "Insert MethodInvocation(832) into MethodInvocation(834) at 2", "Insert QualifiedName: TimeUnit.MILLISECONDS(833) into MethodInvocation(834) at 3", "Insert SimpleName: System(835) into MethodInvocation(837) at 0", "Insert SimpleName: nanoTime(836) into MethodInvocation(837) at 1", "Insert ExpressionStatement(503) into Block(504) at 0", "Insert MethodInvocation(603) into MethodInvocation(605) at 2", "Insert SimpleName: cpConfig(772) into MethodInvocation(774) at 0", "Insert SimpleName: getSocketTimeout(773) into MethodInvocation(774) at 1", "Insert SimpleName: cpConfig(830) into MethodInvocation(832) at 0", "Insert SimpleName: getSocketTimeout(831) into MethodInvocation(832) at 1", "Move MethodInvocation(494) into ExpressionStatement(503) at 0", "Insert QualifiedName: TimeUnit.NANOSECONDS(597) into MethodInvocation(603) at 0", "Update SimpleName: latency(588) to convert", "Move SimpleName: latency(588) into MethodInvocation(603) at 1", "Insert MethodInvocation(601) into MethodInvocation(603) at 2", "Insert QualifiedName: TimeUnit.MILLISECONDS(602) into MethodInvocation(603) at 3", "Insert MethodInvocation(500) into MethodInvocation(502) at 2", "Insert SimpleName: cpConfig(599) into MethodInvocation(601) at 0", "Insert SimpleName: getSocketTimeout(600) into MethodInvocation(601) at 1", "Insert ExpressionStatement(939) into Block(949) at 0", "Insert QualifiedName: TimeUnit.NANOSECONDS(494) into MethodInvocation(500) at 0", "Update SimpleName: latency(492) to convert", "Move SimpleName: latency(492) into MethodInvocation(500) at 1", "Insert MethodInvocation(498) into MethodInvocation(500) at 2", "Insert QualifiedName: TimeUnit.MILLISECONDS(499) into MethodInvocation(500) at 3", "Insert MethodInvocation(938) into ExpressionStatement(939) at 0", "Insert SimpleName: cpConfig(496) into MethodInvocation(498) at 0", "Insert SimpleName: getSocketTimeout(497) into MethodInvocation(498) at 1", "Insert SimpleName: pool(926) into MethodInvocation(938) at 0", "Insert SimpleName: addLatencySample(927) into MethodInvocation(938) at 1", "Insert MethodInvocation(934) into MethodInvocation(938) at 2", "Insert MethodInvocation(937) into MethodInvocation(938) at 3", "Insert QualifiedName: TimeUnit.NANOSECONDS(928) into MethodInvocation(934) at 0", "Insert SimpleName: convert(929) into MethodInvocation(934) at 1", "Insert MethodInvocation(932) into MethodInvocation(934) at 2", "Insert QualifiedName: TimeUnit.MILLISECONDS(933) into MethodInvocation(934) at 3", "Insert SimpleName: System(935) into MethodInvocation(937) at 0", "Insert SimpleName: nanoTime(936) into MethodInvocation(937) at 1", "Insert SimpleName: cpConfig(930) into MethodInvocation(932) at 0", "Insert SimpleName: getSocketTimeout(931) into MethodInvocation(932) at 1", "Delete ExpressionStatement(495)", "Delete ExpressionStatement(591)"]}}, {"ConnectionException_cluster": {"actions": [{"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \"host=\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 0", "INS StringLiteral: \"(\" to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: latencyWithPool to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: host to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \", latency=\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"]\" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \", attempts=\" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: attemptCount to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: latency to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS StringLiteral: \": [\" to MethodInvocation at 2", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS StringLiteral: \")\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SuperMethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL InfixExpression: +", "DEL StringLiteral: \"(\"", "DEL StringLiteral: \"), attempts=\"", "DEL SimpleName: host", "DEL StringLiteral: \", latency=\"", "DEL SimpleName: attemptCount", "DEL StringLiteral: \": [host=\"", "DEL SimpleName: latency", "DEL StringLiteral: \"] \"", "DEL SimpleName: latencyWithPool"]}]}}, {"ConnectionException_diff": {"operations": ["Insert MethodInvocation(252) into ReturnStatement(253) at 0", "Insert MethodInvocation(250) into MethodInvocation(252) at 0", "Insert SimpleName: toString(251) into MethodInvocation(252) at 1", "Insert MethodInvocation(246) into MethodInvocation(250) at 0", "Insert SimpleName: append(247) into MethodInvocation(250) at 1", "Move SuperMethodInvocation(217) into MethodInvocation(250) at 2", "Insert MethodInvocation(243) into MethodInvocation(246) at 0", "Insert SimpleName: append(244) into MethodInvocation(246) at 1", "Insert StringLiteral: \"]\"(245) into MethodInvocation(246) at 2", "Insert MethodInvocation(240) into MethodInvocation(243) at 0", "Insert SimpleName: append(241) into MethodInvocation(243) at 1", "Insert SimpleName: attemptCount(242) into MethodInvocation(243) at 2", "Insert MethodInvocation(237) into MethodInvocation(240) at 0", "Insert SimpleName: append(238) into MethodInvocation(240) at 1", "Insert StringLiteral: \", attempts=\"(239) into MethodInvocation(240) at 2", "Insert MethodInvocation(234) into MethodInvocation(237) at 0", "Insert SimpleName: append(235) into MethodInvocation(237) at 1", "Insert StringLiteral: \")\"(236) into MethodInvocation(237) at 2", "Insert MethodInvocation(231) into MethodInvocation(234) at 0", "Insert SimpleName: append(232) into MethodInvocation(234) at 1", "Insert SimpleName: latencyWithPool(233) into MethodInvocation(234) at 2", "Insert MethodInvocation(228) into MethodInvocation(231) at 0", "Insert SimpleName: append(229) into MethodInvocation(231) at 1", "Insert StringLiteral: \"(\"(230) into MethodInvocation(231) at 2", "Insert MethodInvocation(225) into MethodInvocation(228) at 0", "Insert SimpleName: append(226) into MethodInvocation(228) at 1", "Insert SimpleName: latency(227) into MethodInvocation(228) at 2", "Insert MethodInvocation(222) into MethodInvocation(225) at 0", "Insert SimpleName: append(223) into MethodInvocation(225) at 1", "Insert StringLiteral: \", latency=\"(224) into MethodInvocation(225) at 2", "Insert MethodInvocation(217) into MethodInvocation(222) at 0", "Insert SimpleName: append(218) into MethodInvocation(222) at 1", "Insert MethodInvocation(221) into MethodInvocation(222) at 2", "Insert MethodInvocation(214) into MethodInvocation(217) at 0", "Insert SimpleName: append(215) into MethodInvocation(217) at 1", "Insert StringLiteral: \"host=\"(216) into MethodInvocation(217) at 2", "Insert SimpleName: host(219) into MethodInvocation(221) at 0", "Insert SimpleName: toString(220) into MethodInvocation(221) at 1", "Insert MethodInvocation(211) into MethodInvocation(214) at 0", "Insert SimpleName: append(212) into MethodInvocation(214) at 1", "Insert StringLiteral: \": [\"(213) into MethodInvocation(214) at 2", "Insert ClassInstanceCreation(205) into MethodInvocation(211) at 0", "Insert SimpleName: append(206) into MethodInvocation(211) at 1", "Move MethodInvocation(206) into MethodInvocation(211) at 2", "Insert SimpleType: StringBuilder(204) into ClassInstanceCreation(205) at 0", "Insert SimpleName: StringBuilder(203) into SimpleType: StringBuilder(204) at 0", "Delete StringLiteral: \": [host=\"(207)", "Delete SimpleName: host(208)", "Delete StringLiteral: \", latency=\"(209)", "Delete SimpleName: latency(210)", "Delete StringLiteral: \"(\"(211)", "Delete SimpleName: latencyWithPool(212)", "Delete StringLiteral: \"), attempts=\"(213)", "Delete SimpleName: attemptCount(214)", "Delete StringLiteral: \"] \"(215)", "Delete InfixExpression: +(218)"]}}, {"AbstractHostPartitionConnectionPool_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleName: copyOf to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: hosts to MethodInvocation at 0", "INS SimpleName: getPools to MethodDeclaration at 3", "INS SimpleName: values to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: ImmutableList to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 23"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "UPDATE from Collection<HostConnectionPool<CL>> to List<HostConnectionPool<CL>>", "operations": ["UPD ParameterizedType: Collection<HostConnectionPool<CL>> from Collection<HostConnectionPool<CL>> to List<HostConnectionPool<CL>>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Collection<HostConnectionPool<CL>> to MethodDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6", "INS SimpleName: changed to IfStatement at 0", "INS IfStatement to Block at 4", "INS ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from ParameterizedType: Collection<Host>", "operations": ["MOV SimpleType: Host to ParameterizedType: Collection<Host> at 1", "MOV SimpleType: List to ParameterizedType: Collection<HostConnectionPool<CL>> at 0"]}, {"root": "INS ParameterizedType: Collection<Host> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: Collection<Host> to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 2"]}, {"root": "MOVE from ParameterizedType: Collection<Host>", "operations": ["MOV SimpleType: Collection to ParameterizedType: Collection<Host> at 0"]}, {"root": "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: ring to EnhancedForStatement at 1", "operations": ["INS SimpleName: ring to EnhancedForStatement at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: config to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: config to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from pools to changed", "operations": ["UPD SimpleName: pools from pools to changed"]}, {"root": "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: changed to Assignment: = at 0", "INS IfStatement to Block at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: changed to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: config to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: getPartitioner to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "UPDATE from latencyScoreStrategy to getLatencyScoreStrategy", "operations": ["UPD SimpleName: latencyScoreStrategy from latencyScoreStrategy to getLatencyScoreStrategy", "UPD SimpleName: latencyScoreStrategy from latencyScoreStrategy to getLatencyScoreStrategy"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: latencyScoreStrategy to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: latencyScoreStrategy to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from tokens to topology", "operations": ["UPD SimpleName: tokens from tokens to topology"]}, {"root": "UPDATE from put to setPools", "operations": ["UPD SimpleName: put from put to setPools"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "UPDATE from entry to hosts", "operations": ["UPD SimpleName: entry from entry to hosts"]}, {"root": "UPDATE from getKey to values", "operations": ["UPD SimpleName: getKey from getKey to values"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.BigInteger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Maps"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.astyanax.connectionpool.LatencyScoreStrategy"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: LatencyScoreStrategy", "DEL Modifier: private", "DEL SimpleName: LatencyScoreStrategy", "DEL SimpleName: latencyScoreStrategy", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: latencyScoreStrategy", "DEL FieldAccess", "DEL ExpressionStatement"]}, {"root": "DEL FieldAccess", "operations": ["DEL FieldAccess", "DEL SimpleName: latencyScoreStrategy", "DEL ThisExpression"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: List", "DEL SimpleType: Host", "DEL VariableDeclarationFragment", "DEL SimpleName: BigInteger", "DEL ParameterizedType: List<Host>", "DEL SimpleType: List", "DEL SimpleName: Map", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: Map", "DEL SimpleName: Maps", "DEL SimpleName: Host", "DEL SimpleType: BigInteger", "DEL SimpleName: newHashMap", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: ring"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \"0\"", "DEL ClassInstanceCreation", "DEL SimpleName: ring", "DEL SimpleType: BigInteger", "DEL SimpleName: put", "DEL MethodInvocation", "DEL SimpleName: BigInteger"]}, {"root": "DEL SimpleName: ring", "operations": ["DEL SimpleName: ring"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block", "DEL SimpleName: refresh"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleType: Map", "DEL SimpleName: BigInteger", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleType: BigInteger", "DEL SimpleName: Map", "DEL ParameterizedType: List<Host>"]}, {"root": "DEL ParameterizedType: Set<HostConnectionPool<CL>>", "operations": ["DEL SimpleName: Set", "DEL ParameterizedType: Set<HostConnectionPool<CL>>", "DEL SimpleType: HostConnectionPool", "DEL ParameterizedType: HostConnectionPool<CL>", "DEL SimpleType: CL", "DEL SimpleName: HostConnectionPool", "DEL SimpleType: Set", "DEL SimpleName: CL"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: newHashSet", "DEL SimpleName: Sets"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: entry", "DEL SimpleName: getValue", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}, {"root": "DEL SimpleName: pools", "operations": ["DEL SimpleName: pools"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: ring", "DEL SimpleName: Host", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParameterizedType: List<Host>", "DEL SimpleName: BigInteger", "DEL EnhancedForStatement", "DEL QualifiedName: Map.Entry", "DEL Block", "DEL SimpleName: host", "DEL SingleVariableDeclaration", "DEL SimpleType: BigInteger", "DEL EnhancedForStatement", "DEL SimpleName: List", "DEL SimpleType: Map.Entry", "DEL SingleVariableDeclaration", "DEL SimpleName: tokens", "DEL ParameterizedType: Map.Entry<BigInteger,List<Host>>", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: BigInteger", "DEL SimpleType: Host", "DEL SimpleName: host", "DEL SimpleName: entry", "DEL SimpleName: BigInteger", "DEL SimpleName: getHostPool", "DEL SimpleType: List", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: entrySet", "DEL SimpleName: tokens", "DEL SimpleName: newHashMap", "DEL ExpressionStatement", "DEL SimpleName: topology", "DEL SimpleName: entrySet", "DEL MethodInvocation", "DEL ParameterizedType: List<Host>", "DEL SimpleName: Map", "DEL SimpleType: Host", "DEL SimpleName: Host", "DEL SimpleType: BigInteger", "DEL SimpleType: Map", "DEL ParameterizedType: Map.Entry<BigInteger,List<Host>>", "DEL SimpleName: setPools", "DEL SimpleName: ring", "DEL SimpleName: Host", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: Maps", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleType: Host", "DEL SimpleName: add", "DEL SimpleName: entry", "DEL QualifiedName: Map.Entry", "DEL SimpleType: Map.Entry", "DEL Block", "DEL SimpleType: BigInteger", "DEL ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>", "DEL SimpleName: List", "DEL SimpleType: List", "DEL SimpleName: getValue", "DEL SimpleName: pools"]}]}}, {"AbstractHostPartitionConnectionPool_diff": {"operations": ["Insert MethodDeclaration(567) into TypeDeclaration: class(864) at 22", "Move ExpressionStatement(188) into Block(197) at 4", "Insert MarkerAnnotation(548) into MethodDeclaration(567) at 0", "Insert Modifier: public(549) into MethodDeclaration(567) at 1", "Update ParameterizedType: Collection<HostConnectionPool<CL>>(756) to List<HostConnectionPool<CL>>", "Move ParameterizedType: Collection<HostConnectionPool<CL>>(756) into MethodDeclaration(567) at 2", "Insert SimpleName: getPools(558) into MethodDeclaration(567) at 3", "Insert Block(566) into MethodDeclaration(567) at 4", "Insert Block(720) into MethodDeclaration(721) at 6", "Insert SimpleName: Override(547) into MarkerAnnotation(548) at 0", "Move SimpleType: List(676) into ParameterizedType: List<HostConnectionPool<CL>>(557) at 0", "Insert ReturnStatement(565) into Block(566) at 0", "Insert ParameterizedType: Collection<Host>(652) into SingleVariableDeclaration(654) at 0", "Move VariableDeclarationStatement(696) into Block(720) at 0", "Move VariableDeclarationStatement(792) into Block(720) at 1", "Move EnhancedForStatement(730) into Block(720) at 2", "Move EnhancedForStatement(744) into Block(720) at 3", "Insert IfStatement(719) into Block(720) at 4", "Insert MethodInvocation(564) into ReturnStatement(565) at 0", "Move SimpleType: Collection(750) into ParameterizedType: Collection<Host>(652) at 0", "Move SimpleType: Host(678) into ParameterizedType: Collection<Host>(652) at 1", "Insert PrimitiveType: boolean(669) into VariableDeclarationStatement(673) at 0", "Insert SimpleName: ring(678) into EnhancedForStatement(694) at 1", "Insert SimpleName: changed(711) into IfStatement(719) at 0", "Insert ExpressionStatement(718) into IfStatement(719) at 1", "Insert MethodInvocation(240) into MethodInvocation(266) at 0", "Insert MethodInvocation(310) into MethodInvocation(312) at 0", "Insert SimpleName: ImmutableList(559) into MethodInvocation(564) at 0", "Insert SimpleName: copyOf(560) into MethodInvocation(564) at 1", "Insert MethodInvocation(563) into MethodInvocation(564) at 2", "Move ExpressionStatement(630) into Block(615) at 0", "Move ExpressionStatement(633) into Block(615) at 1", "Update SimpleName: pools(787) to changed", "Insert BooleanLiteral: false(671) into VariableDeclarationFragment(672) at 1", "Insert IfStatement(687) into Block(693) at 0", "Insert ExpressionStatement(708) into Block(709) at 1", "Move MethodInvocation(815) into ExpressionStatement(718) at 0", "Insert MethodInvocation(190) into ClassInstanceCreation(194) at 1", "Move MethodInvocation(200) into ClassInstanceCreation(194) at 2", "Insert SimpleName: config(238) into MethodInvocation(240) at 0", "Update SimpleName: latencyScoreStrategy(283) to getLatencyScoreStrategy", "Move SimpleName: latencyScoreStrategy(283) into MethodInvocation(240) at 1", "Insert SimpleName: config(308) into MethodInvocation(310) at 0", "Update SimpleName: latencyScoreStrategy(351) to getLatencyScoreStrategy", "Move SimpleName: latencyScoreStrategy(351) into MethodInvocation(310) at 1", "Insert SimpleName: hosts(561) into MethodInvocation(563) at 0", "Insert SimpleName: values(562) into MethodInvocation(563) at 1", "Move MethodInvocation(722) into IfStatement(687) at 0", "Insert ExpressionStatement(686) into IfStatement(687) at 1", "Insert Assignment: =(707) into ExpressionStatement(708) at 0", "Update SimpleName: tokens(809) to topology", "Update SimpleName: put(810) to setPools", "Insert SimpleName: config(188) into MethodInvocation(190) at 0", "Insert SimpleName: getPartitioner(189) into MethodInvocation(190) at 1", "Move MethodInvocation(274) into MethodInvocation(234) at 1", "Insert Assignment: =(685) into ExpressionStatement(686) at 0", "Insert SimpleName: changed(705) into Assignment: =(707) at 0", "Insert BooleanLiteral: true(706) into Assignment: =(707) at 1", "Update SimpleName: entry(811) to hosts", "Update SimpleName: getKey(812) to values", "Insert SimpleName: changed(683) into Assignment: =(685) at 0", "Insert BooleanLiteral: true(684) into Assignment: =(685) at 1", "Delete QualifiedName: java.math.BigInteger(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Map(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.common.collect.Maps(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.netflix.astyanax.connectionpool.LatencyScoreStrategy(48)", "Delete ImportDeclaration(49)", "Delete Modifier: private(137)", "Delete Modifier: final(138)", "Delete SimpleName: LatencyScoreStrategy(139)", "Delete SimpleType: LatencyScoreStrategy(140)", "Delete SimpleName: latencyScoreStrategy(141)", "Delete VariableDeclarationFragment(142)", "Delete FieldDeclaration(143)", "Delete ThisExpression(195)", "Delete SimpleName: latencyScoreStrategy(196)", "Delete FieldAccess(197)", "Delete Assignment: =(201)", "Delete ExpressionStatement(202)", "Delete ThisExpression(211)", "Delete SimpleName: latencyScoreStrategy(212)", "Delete FieldAccess(213)", "Delete SimpleName: Map(250)", "Delete SimpleType: Map(251)", "Delete SimpleName: BigInteger(252)", "Delete SimpleType: BigInteger(253)", "Delete SimpleName: List(254)", "Delete SimpleType: List(255)", "Delete SimpleName: Host(256)", "Delete SimpleType: Host(257)", "Delete ParameterizedType: List<Host>(258)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(259)", "Delete SimpleName: ring(260)", "Delete SimpleName: Maps(261)", "Delete SimpleName: newHashMap(262)", "Delete MethodInvocation(263)", "Delete VariableDeclarationFragment(264)", "Delete VariableDeclarationStatement(265)", "Delete SimpleName: ring(266)", "Delete SimpleName: put(267)", "Delete SimpleName: BigInteger(268)", "Delete SimpleType: BigInteger(269)", "Delete StringLiteral: \"0\"(270)", "Delete ClassInstanceCreation(271)", "Delete MethodInvocation(275)", "Delete ExpressionStatement(276)", "Delete SimpleName: ring(278)", "Delete SimpleName: refresh(625)", "Delete Block(634)", "Delete IfStatement(635)", "Delete SimpleName: Map(671)", "Delete SimpleType: Map(672)", "Delete SimpleName: BigInteger(673)", "Delete SimpleType: BigInteger(674)", "Delete ParameterizedType: List<Host>(679)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(680)", "Delete SimpleName: Set(779)", "Delete SimpleType: Set(780)", "Delete SimpleName: HostConnectionPool(781)", "Delete SimpleType: HostConnectionPool(782)", "Delete SimpleName: CL(783)", "Delete SimpleType: CL(784)", "Delete ParameterizedType: HostConnectionPool<CL>(785)", "Delete ParameterizedType: Set<HostConnectionPool<CL>>(786)", "Delete SimpleName: Sets(788)", "Delete SimpleName: newHashSet(789)", "Delete MethodInvocation(790)", "Delete SimpleName: entry(716)", "Delete SimpleName: getValue(717)", "Delete MethodInvocation(718)", "Delete ExpressionStatement(723)", "Delete SimpleName: pools(814)", "Delete QualifiedName: Map.Entry(697)", "Delete SimpleType: Map.Entry(698)", "Delete SimpleName: BigInteger(699)", "Delete SimpleType: BigInteger(700)", "Delete SimpleName: List(701)", "Delete SimpleType: List(702)", "Delete SimpleName: Host(703)", "Delete SimpleType: Host(704)", "Delete ParameterizedType: List<Host>(705)", "Delete ParameterizedType: Map.Entry<BigInteger,List<Host>>(706)", "Delete SimpleName: entry(707)", "Delete SingleVariableDeclaration(708)", "Delete SimpleName: ring(709)", "Delete SimpleName: entrySet(710)", "Delete MethodInvocation(711)", "Delete Block(731)", "Delete EnhancedForStatement(732)", "Delete SimpleName: Map(745)", "Delete SimpleType: Map(746)", "Delete SimpleName: BigInteger(747)", "Delete SimpleType: BigInteger(748)", "Delete ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>(757)", "Delete SimpleName: tokens(758)", "Delete SimpleName: Maps(759)", "Delete SimpleName: newHashMap(760)", "Delete MethodInvocation(761)", "Delete VariableDeclarationFragment(762)", "Delete VariableDeclarationStatement(763)", "Delete QualifiedName: Map.Entry(764)", "Delete SimpleType: Map.Entry(765)", "Delete SimpleName: BigInteger(766)", "Delete SimpleType: BigInteger(767)", "Delete SimpleName: List(768)", "Delete SimpleType: List(769)", "Delete SimpleName: Host(770)", "Delete SimpleType: Host(771)", "Delete ParameterizedType: List<Host>(772)", "Delete ParameterizedType: Map.Entry<BigInteger,List<Host>>(773)", "Delete SimpleName: entry(774)", "Delete SingleVariableDeclaration(775)", "Delete SimpleName: ring(776)", "Delete SimpleName: entrySet(777)", "Delete MethodInvocation(778)", "Delete SimpleName: Host(793)", "Delete SimpleType: Host(794)", "Delete SimpleName: host(795)", "Delete SingleVariableDeclaration(796)", "Delete SimpleName: entry(797)", "Delete SimpleName: getValue(798)", "Delete MethodInvocation(799)", "Delete SimpleName: pools(800)", "Delete SimpleName: add(801)", "Delete SimpleName: getHostPool(802)", "Delete SimpleName: host(803)", "Delete MethodInvocation(804)", "Delete MethodInvocation(805)", "Delete ExpressionStatement(806)", "Delete Block(807)", "Delete EnhancedForStatement(808)", "Delete ExpressionStatement(816)", "Delete Block(817)", "Delete EnhancedForStatement(818)", "Delete SimpleName: topology(819)", "Delete SimpleName: setPools(820)", "Delete SimpleName: tokens(821)", "Delete MethodInvocation(822)", "Delete ExpressionStatement(823)", "Delete Block(824)"]}}, {"AbstractOperationFilter_cluster": {"actions": [{"root": "UPDATE from java.math.BigInteger to java.nio.ByteBuffer", "operations": ["UPD QualifiedName: java.math.BigInteger from java.math.BigInteger to java.nio.ByteBuffer"]}, {"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from getToken to getRowKey", "operations": ["UPD SimpleName: getToken from getToken to getRowKey", "UPD SimpleName: getToken from getToken to getRowKey"]}]}}, {"AbstractOperationFilter_diff": {"operations": ["Update QualifiedName: java.math.BigInteger(2) to java.nio.ByteBuffer", "Update SimpleType: BigInteger(76) to ByteBuffer", "Update SimpleName: getToken(77) to getRowKey", "Update SimpleName: BigInteger(75) to ByteBuffer", "Update SimpleName: getToken(79) to getRowKey"]}}, {"BagOfConnectionsConnectionPoolImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "UPDATE from RuntimeException to InterruptedOperationException", "operations": ["UPD SimpleType: RuntimeException from RuntimeException to InterruptedOperationException", "UPD SimpleName: RuntimeException from RuntimeException to InterruptedOperationException"]}]}}, {"BagOfConnectionsConnectionPoolImpl_diff": {"operations": ["Insert ImportDeclaration(29) into CompilationUnit(681) at 14", "Insert QualifiedName: com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException(28) into ImportDeclaration(29) at 0", "Update SimpleType: RuntimeException(220) to InterruptedOperationException", "Update SimpleName: RuntimeException(219) to InterruptedOperationException"]}}, {"ConnectionPoolConfigurationImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: com.netflix.astyanax.partitioner.BigInteger127Partitioner to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: com.netflix.astyanax.partitioner.Partitioner to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 52"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 26", "operations": ["INS NumberLiteral: 0.65f to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 26", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: DEFAULT_MIN_HOST_IN_POOL_RATIO to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS PrimitiveType: float to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 27", "operations": ["INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 27", "INS PrimitiveType: int to FieldDeclaration at 3", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: DEFAULT_BLOCKED_THREAD_THRESHOLD to VariableDeclarationFragment at 0", "INS NumberLiteral: 10 to VariableDeclarationFragment at 1", "INS Modifier: public to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 29", "operations": ["INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS SimpleName: BigInteger127Partitioner to MethodInvocation at 0", "INS FieldDeclaration to TypeDeclaration: class at 29", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: public to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: Partitioner to FieldDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: DEFAULT_PARTITIONER to VariableDeclarationFragment at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 54", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: DEFAULT_MIN_HOST_IN_POOL_RATIO to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 54", "INS PrimitiveType: float to FieldDeclaration at 1", "INS SimpleName: minHostInPoolRatio to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 55", "operations": ["INS PrimitiveType: int to FieldDeclaration at 1", "INS SimpleName: DEFAULT_BLOCKED_THREAD_THRESHOLD to VariableDeclarationFragment at 1", "INS SimpleName: blockedThreadThreshold to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 55"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 62", "operations": ["INS SimpleName: partitioner to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 62", "INS SimpleType: Partitioner to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS SimpleName: DEFAULT_PARTITIONER to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 125", "operations": ["INS FieldAccess to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getPartitioner to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS SimpleType: Partitioner to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 125", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: partitioner to FieldAccess at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 126", "operations": ["INS SimpleName: partitioner to SingleVariableDeclaration at 1", "INS SimpleName: partitioner to Assignment: = at 1", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS SimpleType: Partitioner to SingleVariableDeclaration at 0", "INS SimpleName: ConnectionPoolConfigurationImpl to SimpleType: ConnectionPoolConfigurationImpl at 0", "INS SimpleName: setPartitioner to MethodDeclaration at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: partitioner to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 126", "INS SimpleType: ConnectionPoolConfigurationImpl to MethodDeclaration at 1", "INS ThisExpression to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 127", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: getBlockedThreadThreshold to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: blockedThreadThreshold to FieldAccess at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS FieldAccess to ReturnStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 127"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 128", "operations": ["INS SimpleName: threshold to Assignment: = at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ConnectionPoolConfigurationImpl to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS SimpleName: blockedThreadThreshold to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS FieldAccess to Assignment: = at 0", "INS ReturnStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS MethodDeclaration to TypeDeclaration: class at 128", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: setBlockedThreadThreshold to MethodDeclaration at 2", "INS SimpleName: ConnectionPoolConfigurationImpl to SimpleType: ConnectionPoolConfigurationImpl at 0", "INS SimpleName: threshold to SingleVariableDeclaration at 1", "INS ThisExpression to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 129", "operations": ["INS PrimitiveType: float to MethodDeclaration at 2", "INS SimpleName: minHostInPoolRatio to FieldAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 129", "INS ReturnStatement to Block at 0", "INS SimpleName: getMinHostInPoolRatio to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ThisExpression to FieldAccess at 0", "INS Modifier: public to MethodDeclaration at 1", "INS FieldAccess to ReturnStatement at 0", "INS Block to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 130", "operations": ["INS SimpleType: ConnectionPoolConfigurationImpl to MethodDeclaration at 1", "INS ReturnStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: ConnectionPoolConfigurationImpl to SimpleType: ConnectionPoolConfigurationImpl at 0", "INS ThisExpression to ReturnStatement at 0", "INS PrimitiveType: float to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: minHostInPoolRatio to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: setMinHostInPoolRatio to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 130", "INS SimpleName: ratio to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: ratio to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0"]}]}}, {"ConnectionPoolConfigurationImpl_diff": {"operations": ["Insert ImportDeclaration(35) into CompilationUnit(1518) at 11", "Insert ImportDeclaration(37) into CompilationUnit(1518) at 12", "Move FieldDeclaration(390) into TypeDeclaration: class(1517) at 52", "Insert QualifiedName: com.netflix.astyanax.partitioner.BigInteger127Partitioner(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: com.netflix.astyanax.partitioner.Partitioner(36) into ImportDeclaration(37) at 0", "Insert FieldDeclaration(245) into TypeDeclaration: class(1517) at 26", "Insert FieldDeclaration(253) into TypeDeclaration: class(1517) at 27", "Insert FieldDeclaration(275) into TypeDeclaration: class(1517) at 29", "Insert FieldDeclaration(426) into TypeDeclaration: class(1517) at 54", "Insert FieldDeclaration(432) into TypeDeclaration: class(1517) at 55", "Insert FieldDeclaration(485) into TypeDeclaration: class(1517) at 62", "Insert MethodDeclaration(1442) into TypeDeclaration: class(1517) at 125", "Insert MethodDeclaration(1460) into TypeDeclaration: class(1517) at 126", "Insert MethodDeclaration(1471) into TypeDeclaration: class(1517) at 127", "Insert MethodDeclaration(1488) into TypeDeclaration: class(1517) at 128", "Insert MethodDeclaration(1499) into TypeDeclaration: class(1517) at 129", "Insert MethodDeclaration(1516) into TypeDeclaration: class(1517) at 130", "Insert Modifier: public(238) into FieldDeclaration(245) at 0", "Insert Modifier: static(239) into FieldDeclaration(245) at 1", "Insert Modifier: final(240) into FieldDeclaration(245) at 2", "Insert PrimitiveType: float(241) into FieldDeclaration(245) at 3", "Insert VariableDeclarationFragment(244) into FieldDeclaration(245) at 4", "Insert Modifier: public(246) into FieldDeclaration(253) at 0", "Insert Modifier: static(247) into FieldDeclaration(253) at 1", "Insert Modifier: final(248) into FieldDeclaration(253) at 2", "Insert PrimitiveType: int(249) into FieldDeclaration(253) at 3", "Insert VariableDeclarationFragment(252) into FieldDeclaration(253) at 4", "Insert Modifier: public(265) into FieldDeclaration(275) at 0", "Insert Modifier: static(266) into FieldDeclaration(275) at 1", "Insert Modifier: final(267) into FieldDeclaration(275) at 2", "Insert SimpleType: Partitioner(269) into FieldDeclaration(275) at 3", "Insert VariableDeclarationFragment(274) into FieldDeclaration(275) at 4", "Insert Modifier: private(421) into FieldDeclaration(426) at 0", "Insert PrimitiveType: float(422) into FieldDeclaration(426) at 1", "Insert VariableDeclarationFragment(425) into FieldDeclaration(426) at 2", "Insert Modifier: private(427) into FieldDeclaration(432) at 0", "Insert PrimitiveType: int(428) into FieldDeclaration(432) at 1", "Insert VariableDeclarationFragment(431) into FieldDeclaration(432) at 2", "Insert Modifier: private(479) into FieldDeclaration(485) at 0", "Insert SimpleType: Partitioner(481) into FieldDeclaration(485) at 1", "Insert VariableDeclarationFragment(484) into FieldDeclaration(485) at 2", "Insert MarkerAnnotation(1432) into MethodDeclaration(1442) at 0", "Insert Modifier: public(1433) into MethodDeclaration(1442) at 1", "Insert SimpleType: Partitioner(1435) into MethodDeclaration(1442) at 2", "Insert SimpleName: getPartitioner(1436) into MethodDeclaration(1442) at 3", "Insert Block(1441) into MethodDeclaration(1442) at 4", "Insert Modifier: public(1443) into MethodDeclaration(1460) at 0", "Insert SimpleType: ConnectionPoolConfigurationImpl(1445) into MethodDeclaration(1460) at 1", "Insert SimpleName: setPartitioner(1446) into MethodDeclaration(1460) at 2", "Insert SingleVariableDeclaration(1450) into MethodDeclaration(1460) at 3", "Insert Block(1459) into MethodDeclaration(1460) at 4", "Insert MarkerAnnotation(1462) into MethodDeclaration(1471) at 0", "Insert Modifier: public(1463) into MethodDeclaration(1471) at 1", "Insert PrimitiveType: int(1464) into MethodDeclaration(1471) at 2", "Insert SimpleName: getBlockedThreadThreshold(1465) into MethodDeclaration(1471) at 3", "Insert Block(1470) into MethodDeclaration(1471) at 4", "Insert Modifier: public(1472) into MethodDeclaration(1488) at 0", "Insert SimpleType: ConnectionPoolConfigurationImpl(1474) into MethodDeclaration(1488) at 1", "Insert SimpleName: setBlockedThreadThreshold(1475) into MethodDeclaration(1488) at 2", "Insert SingleVariableDeclaration(1478) into MethodDeclaration(1488) at 3", "Insert Block(1487) into MethodDeclaration(1488) at 4", "Insert MarkerAnnotation(1490) into MethodDeclaration(1499) at 0", "Insert Modifier: public(1491) into MethodDeclaration(1499) at 1", "Insert PrimitiveType: float(1492) into MethodDeclaration(1499) at 2", "Insert SimpleName: getMinHostInPoolRatio(1493) into MethodDeclaration(1499) at 3", "Insert Block(1498) into MethodDeclaration(1499) at 4", "Insert Modifier: public(1500) into MethodDeclaration(1516) at 0", "Insert SimpleType: ConnectionPoolConfigurationImpl(1502) into MethodDeclaration(1516) at 1", "Insert SimpleName: setMinHostInPoolRatio(1503) into MethodDeclaration(1516) at 2", "Insert SingleVariableDeclaration(1506) into MethodDeclaration(1516) at 3", "Insert Block(1515) into MethodDeclaration(1516) at 4", "Insert SimpleName: DEFAULT_MIN_HOST_IN_POOL_RATIO(242) into VariableDeclarationFragment(244) at 0", "Insert NumberLiteral: 0.65f(243) into VariableDeclarationFragment(244) at 1", "Insert SimpleName: DEFAULT_BLOCKED_THREAD_THRESHOLD(250) into VariableDeclarationFragment(252) at 0", "Insert NumberLiteral: 10(251) into VariableDeclarationFragment(252) at 1", "Insert SimpleName: Partitioner(268) into SimpleType: Partitioner(269) at 0", "Insert SimpleName: DEFAULT_PARTITIONER(270) into VariableDeclarationFragment(274) at 0", "Insert MethodInvocation(273) into VariableDeclarationFragment(274) at 1", "Insert SimpleName: minHostInPoolRatio(423) into VariableDeclarationFragment(425) at 0", "Insert SimpleName: DEFAULT_MIN_HOST_IN_POOL_RATIO(424) into VariableDeclarationFragment(425) at 1", "Insert SimpleName: blockedThreadThreshold(429) into VariableDeclarationFragment(431) at 0", "Insert SimpleName: DEFAULT_BLOCKED_THREAD_THRESHOLD(430) into VariableDeclarationFragment(431) at 1", "Insert SimpleName: Partitioner(480) into SimpleType: Partitioner(481) at 0", "Insert SimpleName: partitioner(482) into VariableDeclarationFragment(484) at 0", "Insert SimpleName: DEFAULT_PARTITIONER(483) into VariableDeclarationFragment(484) at 1", "Insert SimpleName: Override(1431) into MarkerAnnotation(1432) at 0", "Insert SimpleName: Partitioner(1434) into SimpleType: Partitioner(1435) at 0", "Insert ReturnStatement(1440) into Block(1441) at 0", "Insert SimpleName: ConnectionPoolConfigurationImpl(1444) into SimpleType: ConnectionPoolConfigurationImpl(1445) at 0", "Insert SimpleType: Partitioner(1448) into SingleVariableDeclaration(1450) at 0", "Insert SimpleName: partitioner(1449) into SingleVariableDeclaration(1450) at 1", "Insert ExpressionStatement(1456) into Block(1459) at 0", "Insert ReturnStatement(1458) into Block(1459) at 1", "Insert SimpleName: Override(1461) into MarkerAnnotation(1462) at 0", "Insert ReturnStatement(1469) into Block(1470) at 0", "Insert SimpleName: ConnectionPoolConfigurationImpl(1473) into SimpleType: ConnectionPoolConfigurationImpl(1474) at 0", "Insert PrimitiveType: int(1476) into SingleVariableDeclaration(1478) at 0", "Insert SimpleName: threshold(1477) into SingleVariableDeclaration(1478) at 1", "Insert ExpressionStatement(1484) into Block(1487) at 0", "Insert ReturnStatement(1486) into Block(1487) at 1", "Insert SimpleName: Override(1489) into MarkerAnnotation(1490) at 0", "Insert ReturnStatement(1497) into Block(1498) at 0", "Insert SimpleName: ConnectionPoolConfigurationImpl(1501) into SimpleType: ConnectionPoolConfigurationImpl(1502) at 0", "Insert PrimitiveType: float(1504) into SingleVariableDeclaration(1506) at 0", "Insert SimpleName: ratio(1505) into SingleVariableDeclaration(1506) at 1", "Insert ExpressionStatement(1512) into Block(1515) at 0", "Insert ReturnStatement(1514) into Block(1515) at 1", "Insert SimpleName: BigInteger127Partitioner(271) into MethodInvocation(273) at 0", "Insert SimpleName: get(272) into MethodInvocation(273) at 1", "Insert FieldAccess(1439) into ReturnStatement(1440) at 0", "Insert SimpleName: Partitioner(1447) into SimpleType: Partitioner(1448) at 0", "Insert Assignment: =(1455) into ExpressionStatement(1456) at 0", "Insert ThisExpression(1457) into ReturnStatement(1458) at 0", "Insert FieldAccess(1468) into ReturnStatement(1469) at 0", "Insert Assignment: =(1483) into ExpressionStatement(1484) at 0", "Insert ThisExpression(1485) into ReturnStatement(1486) at 0", "Insert FieldAccess(1496) into ReturnStatement(1497) at 0", "Insert Assignment: =(1511) into ExpressionStatement(1512) at 0", "Insert ThisExpression(1513) into ReturnStatement(1514) at 0", "Insert ThisExpression(1437) into FieldAccess(1439) at 0", "Insert SimpleName: partitioner(1438) into FieldAccess(1439) at 1", "Insert FieldAccess(1453) into Assignment: =(1455) at 0", "Insert SimpleName: partitioner(1454) into Assignment: =(1455) at 1", "Insert ThisExpression(1466) into FieldAccess(1468) at 0", "Insert SimpleName: blockedThreadThreshold(1467) into FieldAccess(1468) at 1", "Insert FieldAccess(1481) into Assignment: =(1483) at 0", "Insert SimpleName: threshold(1482) into Assignment: =(1483) at 1", "Insert ThisExpression(1494) into FieldAccess(1496) at 0", "Insert SimpleName: minHostInPoolRatio(1495) into FieldAccess(1496) at 1", "Insert FieldAccess(1509) into Assignment: =(1511) at 0", "Insert SimpleName: ratio(1510) into Assignment: =(1511) at 1", "Insert ThisExpression(1451) into FieldAccess(1453) at 0", "Insert SimpleName: partitioner(1452) into FieldAccess(1453) at 1", "Insert ThisExpression(1479) into FieldAccess(1481) at 0", "Insert SimpleName: blockedThreadThreshold(1480) into FieldAccess(1481) at 1", "Insert ThisExpression(1507) into FieldAccess(1509) at 0", "Insert SimpleName: minHostInPoolRatio(1508) into FieldAccess(1509) at 1"]}}, {"CountingConnectionPoolMonitor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: com.netflix.astyanax.connectionpool.exceptions.HostDownException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS QualifiedName: com.netflix.astyanax.connectionpool.exceptions.TransportException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 16"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS SimpleType: CountingConnectionPoolMonitor to TypeLiteral at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: getLogger to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: CountingConnectionPoolMonitor to SimpleType: CountingConnectionPoolMonitor at 0", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS SimpleType: Logger to FieldDeclaration at 2", "INS SimpleName: LoggerFactory to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 22", "operations": ["INS SimpleName: AtomicLong to SimpleType: AtomicLong at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: AtomicLong to FieldDeclaration at 1", "INS SimpleName: interruptedCount to VariableDeclarationFragment at 0", "INS SimpleName: AtomicLong to SimpleType: AtomicLong at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: AtomicLong to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 22"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 23", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: AtomicLong to ClassInstanceCreation at 0", "INS SimpleType: AtomicLong to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 23", "INS SimpleName: AtomicLong to SimpleType: AtomicLong at 0", "INS SimpleName: transportErrorCount to VariableDeclarationFragment at 0", "INS SimpleName: AtomicLong to SimpleType: AtomicLong at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 56", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: interruptedCount to FieldAccess at 1", "INS FieldAccess to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getInterruptedCount to MethodDeclaration at 3", "INS ThisExpression to FieldAccess at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: get to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 56", "INS PrimitiveType: long to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: getHostName to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS StringLiteral: \"AddHost: \" to InfixExpression: + at 0", "INS SimpleName: host to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: getHostName to MethodInvocation at 1", "INS SimpleName: host to MethodInvocation at 0", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS StringLiteral: \"RemoveHost: \" to InfixExpression: + at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: host to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: getHostName to MethodInvocation at 1", "INS StringLiteral: \"Reactivating \" to InfixExpression: + at 0", "INS SimpleName: LOG to MethodInvocation at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InstanceofExpression to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InstanceofExpression to IfStatement at 0"]}, {"root": "INS InstanceofExpression to IfStatement at 0", "operations": ["INS SimpleType: InterruptedOperationException to InstanceofExpression at 1", "INS SimpleName: reason to InstanceofExpression at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: InterruptedOperationException to SimpleType: InterruptedOperationException at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: interruptedCount to FieldAccess at 1", "INS FieldAccess to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS InstanceofExpression to IfStatement at 0", "operations": ["INS SimpleType: HostDownException to InstanceofExpression at 1", "INS SimpleName: HostDownException to SimpleType: HostDownException at 0", "INS SimpleName: reason to InstanceofExpression at 0", "INS InstanceofExpression to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS SimpleName: hostDownCount to FieldAccess at 1", "INS Block to IfStatement at 1", "INS FieldAccess to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS InstanceofExpression to IfStatement at 0", "operations": ["INS SimpleName: TransportException to SimpleType: TransportException at 0", "INS SimpleName: reason to InstanceofExpression at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: TransportException to InstanceofExpression at 1"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS SimpleName: reason to MethodInvocation at 3", "INS SimpleName: reason to MethodInvocation at 0", "INS SimpleName: error to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: LOG to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \",down=\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: transportErrorCount to FieldAccess at 1", "INS FieldAccess to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: append to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1", "MOV StringLiteral: \",down=\" to MethodInvocation at 2"]}, {"root": "UPDATE from \",down=\" to \",remove=\"", "operations": ["UPD StringLiteral: \",down=\" from \",down=\" to \",remove=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"add=\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from \",remove=\" to \"], Hosts[\"", "operations": ["UPD StringLiteral: \",remove=\" from \",remove=\" to \"], Hosts[\""]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: transportErrorCount to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from \"add=\" to \",transport=\"", "operations": ["UPD StringLiteral: \"add=\" from \"add=\" to \",transport=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1", "MOV StringLiteral: \"], Hosts[\" to MethodInvocation at 2"]}, {"root": "UPDATE from \"], Hosts[\" to \",exhausted=\"", "operations": ["UPD StringLiteral: \"], Hosts[\" from \"], Hosts[\" to \",exhausted=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: interruptedCount to MethodInvocation at 0"]}, {"root": "UPDATE from \",poolExhausted=\" to \",interrupted=\"", "operations": ["UPD StringLiteral: \",poolExhausted=\" from \",poolExhausted=\" to \",interrupted=\""]}, {"root": "UPDATE from \",unknownErrorCount=\" to \",unknown=\"", "operations": ["UPD StringLiteral: \",unknownErrorCount=\" from \",unknownErrorCount=\" to \",unknown=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \",return=\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1", "MOV StringLiteral: \",return=\" to MethodInvocation at 2"]}, {"root": "UPDATE from \",return=\" to \",borrow=\"", "operations": ["UPD StringLiteral: \",return=\" from \",return=\" to \",borrow=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: connectionCreateFailureCount to MethodInvocation at 0"]}, {"root": "UPDATE from \",borrow=\" to \",failed=\"", "operations": ["UPD StringLiteral: \",borrow=\" from \",borrow=\" to \",failed=\""]}]}}, {"CountingConnectionPoolMonitor_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(1160) at 3", "Insert ImportDeclaration(9) into CompilationUnit(1160) at 4", "Insert ImportDeclaration(31) into CompilationUnit(1160) at 15", "Insert ImportDeclaration(33) into CompilationUnit(1160) at 16", "Insert ImportDeclaration(35) into CompilationUnit(1160) at 17", "Insert QualifiedName: org.slf4j.Logger(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: com.netflix.astyanax.connectionpool.exceptions.HostDownException(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: com.netflix.astyanax.connectionpool.exceptions.TransportException(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException(34) into ImportDeclaration(35) at 0", "Insert FieldDeclaration(52) into TypeDeclaration: class(1159) at 3", "Insert FieldDeclaration(223) into TypeDeclaration: class(1159) at 22", "Insert FieldDeclaration(232) into TypeDeclaration: class(1159) at 23", "Insert MethodDeclaration(867) into TypeDeclaration: class(1159) at 56", "Insert Modifier: private(40) into FieldDeclaration(52) at 0", "Insert Modifier: static(41) into FieldDeclaration(52) at 1", "Insert SimpleType: Logger(43) into FieldDeclaration(52) at 2", "Insert VariableDeclarationFragment(51) into FieldDeclaration(52) at 3", "Insert Modifier: private(215) into FieldDeclaration(223) at 0", "Insert SimpleType: AtomicLong(217) into FieldDeclaration(223) at 1", "Insert VariableDeclarationFragment(222) into FieldDeclaration(223) at 2", "Insert Modifier: private(224) into FieldDeclaration(232) at 0", "Insert SimpleType: AtomicLong(226) into FieldDeclaration(232) at 1", "Insert VariableDeclarationFragment(231) into FieldDeclaration(232) at 2", "Insert MarkerAnnotation(856) into MethodDeclaration(867) at 0", "Insert Modifier: public(857) into MethodDeclaration(867) at 1", "Insert PrimitiveType: long(858) into MethodDeclaration(867) at 2", "Insert SimpleName: getInterruptedCount(859) into MethodDeclaration(867) at 3", "Insert Block(866) into MethodDeclaration(867) at 4", "Insert SimpleName: Logger(42) into SimpleType: Logger(43) at 0", "Insert SimpleName: LOG(44) into VariableDeclarationFragment(51) at 0", "Insert MethodInvocation(50) into VariableDeclarationFragment(51) at 1", "Insert SimpleName: AtomicLong(216) into SimpleType: AtomicLong(217) at 0", "Insert SimpleName: interruptedCount(218) into VariableDeclarationFragment(222) at 0", "Insert ClassInstanceCreation(221) into VariableDeclarationFragment(222) at 1", "Insert SimpleName: AtomicLong(225) into SimpleType: AtomicLong(226) at 0", "Insert SimpleName: transportErrorCount(227) into VariableDeclarationFragment(231) at 0", "Insert ClassInstanceCreation(230) into VariableDeclarationFragment(231) at 1", "Insert ExpressionStatement(697) into Block(704) at 0", "Insert ExpressionStatement(734) into Block(741) at 0", "Insert ExpressionStatement(809) into Block(816) at 0", "Insert SimpleName: Override(855) into MarkerAnnotation(856) at 0", "Insert ReturnStatement(865) into Block(866) at 0", "Insert SimpleName: LoggerFactory(45) into MethodInvocation(50) at 0", "Insert SimpleName: getLogger(46) into MethodInvocation(50) at 1", "Insert TypeLiteral(49) into MethodInvocation(50) at 2", "Insert SimpleType: AtomicLong(220) into ClassInstanceCreation(221) at 0", "Insert SimpleType: AtomicLong(229) into ClassInstanceCreation(230) at 0", "Insert IfStatement(366) into IfStatement(367) at 2", "Insert MethodInvocation(696) into ExpressionStatement(697) at 0", "Insert MethodInvocation(733) into ExpressionStatement(734) at 0", "Insert MethodInvocation(808) into ExpressionStatement(809) at 0", "Insert MethodInvocation(864) into ReturnStatement(865) at 0", "Insert SimpleType: CountingConnectionPoolMonitor(48) into TypeLiteral(49) at 0", "Insert SimpleName: AtomicLong(219) into SimpleType: AtomicLong(220) at 0", "Insert SimpleName: AtomicLong(228) into SimpleType: AtomicLong(229) at 0", "Move InstanceofExpression(230) into IfStatement(366) at 0", "Move Block(237) into IfStatement(366) at 1", "Insert IfStatement(365) into IfStatement(366) at 2", "Insert SimpleName: LOG(689) into MethodInvocation(696) at 0", "Insert SimpleName: info(690) into MethodInvocation(696) at 1", "Insert InfixExpression: +(695) into MethodInvocation(696) at 2", "Insert SimpleName: LOG(726) into MethodInvocation(733) at 0", "Insert SimpleName: info(727) into MethodInvocation(733) at 1", "Insert InfixExpression: +(732) into MethodInvocation(733) at 2", "Insert SimpleName: LOG(801) into MethodInvocation(808) at 0", "Insert SimpleName: info(802) into MethodInvocation(808) at 1", "Insert InfixExpression: +(807) into MethodInvocation(808) at 2", "Insert FieldAccess(862) into MethodInvocation(864) at 0", "Insert SimpleName: get(863) into MethodInvocation(864) at 1", "Insert SimpleName: CountingConnectionPoolMonitor(47) into SimpleType: CountingConnectionPoolMonitor(48) at 0", "Move InstanceofExpression(241) into IfStatement(365) at 0", "Move Block(248) into IfStatement(365) at 1", "Insert IfStatement(364) into IfStatement(365) at 2", "Insert StringLiteral: \"AddHost: \"(691) into InfixExpression: +(695) at 0", "Insert MethodInvocation(694) into InfixExpression: +(695) at 1", "Insert StringLiteral: \"RemoveHost: \"(728) into InfixExpression: +(732) at 0", "Insert MethodInvocation(731) into InfixExpression: +(732) at 1", "Insert StringLiteral: \"Reactivating \"(803) into InfixExpression: +(807) at 0", "Insert MethodInvocation(806) into InfixExpression: +(807) at 1", "Insert ThisExpression(860) into FieldAccess(862) at 0", "Insert SimpleName: interruptedCount(861) into FieldAccess(862) at 1", "Move InstanceofExpression(252) into IfStatement(364) at 0", "Move Block(259) into IfStatement(364) at 1", "Move IfStatement(281) into IfStatement(364) at 2", "Insert SimpleName: host(692) into MethodInvocation(694) at 0", "Insert SimpleName: getHostName(693) into MethodInvocation(694) at 1", "Insert SimpleName: host(729) into MethodInvocation(731) at 0", "Insert SimpleName: getHostName(730) into MethodInvocation(731) at 1", "Insert SimpleName: host(804) into MethodInvocation(806) at 0", "Insert SimpleName: getHostName(805) into MethodInvocation(806) at 1", "Move InstanceofExpression(263) into IfStatement(363) at 0", "Move Block(270) into IfStatement(363) at 1", "Insert InstanceofExpression(315) into IfStatement(362) at 0", "Insert Block(322) into IfStatement(362) at 1", "Insert SimpleName: reason(312) into InstanceofExpression(315) at 0", "Insert SimpleType: InterruptedOperationException(314) into InstanceofExpression(315) at 1", "Insert ExpressionStatement(321) into Block(322) at 0", "Insert InstanceofExpression(326) into IfStatement(361) at 0", "Insert Block(333) into IfStatement(361) at 1", "Insert SimpleName: InterruptedOperationException(313) into SimpleType: InterruptedOperationException(314) at 0", "Insert MethodInvocation(320) into ExpressionStatement(321) at 0", "Insert SimpleName: reason(323) into InstanceofExpression(326) at 0", "Insert SimpleType: HostDownException(325) into InstanceofExpression(326) at 1", "Insert ExpressionStatement(332) into Block(333) at 0", "Insert InstanceofExpression(337) into IfStatement(360) at 0", "Insert Block(359) into IfStatement(360) at 2", "Insert MethodInvocation(1099) into MethodInvocation(1104) at 0", "Insert SimpleName: append(1100) into MethodInvocation(1104) at 1", "Insert FieldAccess(318) into MethodInvocation(320) at 0", "Insert SimpleName: incrementAndGet(319) into MethodInvocation(320) at 1", "Insert SimpleName: HostDownException(324) into SimpleType: HostDownException(325) at 0", "Insert MethodInvocation(331) into ExpressionStatement(332) at 0", "Insert SimpleName: reason(334) into InstanceofExpression(337) at 0", "Insert SimpleType: TransportException(336) into InstanceofExpression(337) at 1", "Insert ExpressionStatement(343) into Block(344) at 0", "Insert ExpressionStatement(352) into Block(359) at 0", "Move ExpressionStatement(276) into Block(359) at 1", "Move MethodInvocation(950) into MethodInvocation(1099) at 0", "Move SimpleName: append(951) into MethodInvocation(1099) at 1", "Insert StringLiteral: \",down=\"(1098) into MethodInvocation(1099) at 2", "Insert ThisExpression(316) into FieldAccess(318) at 0", "Insert SimpleName: interruptedCount(317) into FieldAccess(318) at 1", "Insert FieldAccess(329) into MethodInvocation(331) at 0", "Insert SimpleName: incrementAndGet(330) into MethodInvocation(331) at 1", "Insert SimpleName: TransportException(335) into SimpleType: TransportException(336) at 0", "Insert MethodInvocation(342) into ExpressionStatement(343) at 0", "Insert MethodInvocation(351) into ExpressionStatement(352) at 0", "Insert MethodInvocation(1091) into MethodInvocation(1096) at 0", "Insert SimpleName: append(1092) into MethodInvocation(1096) at 1", "Move MethodInvocation(946) into MethodInvocation(1096) at 2", "Insert ThisExpression(327) into FieldAccess(329) at 0", "Insert SimpleName: hostDownCount(328) into FieldAccess(329) at 1", "Insert FieldAccess(340) into MethodInvocation(342) at 0", "Insert SimpleName: incrementAndGet(341) into MethodInvocation(342) at 1", "Insert SimpleName: LOG(345) into MethodInvocation(351) at 0", "Insert SimpleName: error(346) into MethodInvocation(351) at 1", "Insert MethodInvocation(349) into MethodInvocation(351) at 2", "Insert SimpleName: reason(350) into MethodInvocation(351) at 3", "Move MethodInvocation(947) into MethodInvocation(1091) at 0", "Move SimpleName: append(948) into MethodInvocation(1091) at 1", "Update StringLiteral: \",down=\"(949) to \",remove=\"", "Move StringLiteral: \",down=\"(949) into MethodInvocation(1091) at 2", "Insert ThisExpression(338) into FieldAccess(340) at 0", "Insert SimpleName: transportErrorCount(339) into FieldAccess(340) at 1", "Insert SimpleName: reason(347) into MethodInvocation(349) at 0", "Insert SimpleName: toString(348) into MethodInvocation(349) at 1", "Insert MethodInvocation(1083) into MethodInvocation(1088) at 0", "Insert SimpleName: append(1084) into MethodInvocation(1088) at 1", "Move MethodInvocation(938) into MethodInvocation(1088) at 2", "Move MethodInvocation(942) into MethodInvocation(1083) at 0", "Move SimpleName: append(943) into MethodInvocation(1083) at 1", "Insert StringLiteral: \"add=\"(1082) into MethodInvocation(1083) at 2", "Update StringLiteral: \",remove=\"(941) to \"], Hosts[\"", "Insert MethodInvocation(1076) into MethodInvocation(1077) at 2", "Update StringLiteral: \"add=\"(933) to \",transport=\"", "Insert SimpleName: transportErrorCount(1074) into MethodInvocation(1076) at 0", "Insert SimpleName: get(1075) into MethodInvocation(1076) at 1", "Insert MethodInvocation(1064) into MethodInvocation(1069) at 0", "Insert SimpleName: append(1065) into MethodInvocation(1069) at 1", "Move MethodInvocation(927) into MethodInvocation(1069) at 2", "Move MethodInvocation(928) into MethodInvocation(1064) at 0", "Move SimpleName: append(929) into MethodInvocation(1064) at 1", "Update StringLiteral: \"], Hosts[\"(930) to \",exhausted=\"", "Move StringLiteral: \"], Hosts[\"(930) into MethodInvocation(1064) at 2", "Insert MethodInvocation(1060) into MethodInvocation(1061) at 2", "Update StringLiteral: \",poolExhausted=\"(922) to \",interrupted=\"", "Insert SimpleName: interruptedCount(1058) into MethodInvocation(1060) at 0", "Insert SimpleName: get(1059) into MethodInvocation(1060) at 1", "Update StringLiteral: \",unknownErrorCount=\"(914) to \",unknown=\"", "Insert MethodInvocation(989) into MethodInvocation(994) at 0", "Insert SimpleName: append(990) into MethodInvocation(994) at 1", "Move MethodInvocation(856) into MethodInvocation(989) at 0", "Move SimpleName: append(857) into MethodInvocation(989) at 1", "Insert StringLiteral: \",return=\"(988) into MethodInvocation(989) at 2", "Insert MethodInvocation(981) into MethodInvocation(986) at 0", "Insert SimpleName: append(982) into MethodInvocation(986) at 1", "Move MethodInvocation(852) into MethodInvocation(986) at 2", "Move MethodInvocation(853) into MethodInvocation(981) at 0", "Move SimpleName: append(854) into MethodInvocation(981) at 1", "Update StringLiteral: \",return=\"(855) to \",borrow=\"", "Move StringLiteral: \",return=\"(855) into MethodInvocation(981) at 2", "Insert MethodInvocation(977) into MethodInvocation(978) at 2", "Update StringLiteral: \",borrow=\"(847) to \",failed=\"", "Insert SimpleName: connectionCreateFailureCount(975) into MethodInvocation(977) at 0", "Insert SimpleName: get(976) into MethodInvocation(977) at 1"]}}, {"FixedRetryBackoffStrategy_cluster": {"actions": [{"root": "UPDATE from timeout to interval", "operations": ["UPD SimpleName: timeout from timeout to interval", "UPD SimpleName: timeout from timeout to interval", "UPD SimpleName: timeout from timeout to interval", "UPD SimpleName: timeout from timeout to interval", "UPD SimpleName: timeout from timeout to interval"]}]}}, {"FixedRetryBackoffStrategy_diff": {"operations": ["Update SimpleName: timeout(23) to interval", "Update SimpleName: timeout(35) to interval", "Update SimpleName: timeout(43) to interval", "Update SimpleName: timeout(41) to interval", "Update SimpleName: timeout(88) to interval"]}}, {"HostConnectionPoolPartition_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: org.apache.commons.lang.StringUtils to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: com.google.common.base.Function to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: com.google.common.collect.Collections2 to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 9", "MOV MethodDeclaration to TypeDeclaration: class at 16"]}, {"root": "UPDATE from java.math.BigInteger to javax.annotation.Nullable", "operations": ["UPD QualifiedName: java.math.BigInteger from java.math.BigInteger to javax.annotation.Nullable"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected"]}, {"root": "INS PrimitiveType: boolean to MethodDeclaration at 2", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "INS SimpleName: hasPool to MethodDeclaration at 3", "operations": ["INS SimpleName: hasPool to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from Collection of pools that own a partition of the ring to Collection of hosts that are grouped by a certain criteria (such as token or rack)", "operations": ["UPD TextElement: Collection of pools that own a partition of the ring from Collection of pools that own a partition of the ring to Collection of hosts that are grouped by a certain criteria (such as token or rack)"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: pool to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from Return the list of active hosts (i.e. hosts that are not down) to Return the list of active hosts.  Active hosts are those deemed by the ", "operations": ["UPD TextElement: Return the list of active hosts (i.e. hosts that are not down) from Return the list of active hosts (i.e. hosts that are not down) to Return the list of active hosts.  Active hosts are those deemed by the "]}, {"root": "INS TextElement: latency score strategy to be alive and responsive.   to TagElement at 1", "operations": ["INS TextElement: latency score strategy to be alive and responsive.   to TagElement at 1"]}, {"root": "UPDATE from Token or shard identifying this partition. to Returns true if a pool is contained in this partition", "operations": ["UPD TextElement: Token or shard identifying this partition. from Token or shard identifying this partition. to Returns true if a pool is contained in this partition"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: pools to MethodInvocation at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS SimpleName: pool to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toString to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV StringLiteral: \"]\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV SimpleName: id to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV StringLiteral: \"HostConnectionPoolPartition[\" to MethodInvocation at 2", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from \"HostConnectionPoolPartition[\" to \"BaseHostConnectionPoolPartition[\"", "operations": ["UPD StringLiteral: \"HostConnectionPoolPartition[\" from \"HostConnectionPoolPartition[\" to \"BaseHostConnectionPoolPartition[\""]}, {"root": "UPDATE from id to StringUtils", "operations": ["UPD SimpleName: id from id to StringUtils"]}, {"root": "UPDATE from append to join", "operations": ["UPD SimpleName: append from append to join"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV StringLiteral: \",\" to MethodInvocation at 3"]}, {"root": "UPDATE from sb to Collections2", "operations": ["UPD SimpleName: sb from sb to Collections2"]}, {"root": "INS SimpleName: transform to MethodInvocation at 1", "operations": ["INS SimpleName: transform to MethodInvocation at 1"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 3", "operations": ["INS SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1", "INS SimpleName: Function to SimpleType: Function at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: CL to SimpleType: CL at 0", "INS SimpleName: HostConnectionPool to SimpleType: HostConnectionPool at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1", "INS ParameterizedType: HostConnectionPool<CL> to SingleVariableDeclaration at 1", "INS ParameterizedType: Function<HostConnectionPool<CL>,String> to ClassInstanceCreation at 0", "INS SimpleName: host to SingleVariableDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: HostConnectionPool to ParameterizedType: HostConnectionPool<CL> at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: HostConnectionPool to SimpleType: HostConnectionPool at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: CL to SimpleType: CL at 0", "INS ParameterizedType: HostConnectionPool<CL> to ParameterizedType: Function<HostConnectionPool<CL>,String> at 1", "INS SimpleType: String to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Function to ParameterizedType: Function<HostConnectionPool<CL>,String> at 0", "INS SimpleName: apply to MethodDeclaration at 3", "INS SimpleType: String to ParameterizedType: Function<HostConnectionPool<CL>,String> at 2", "INS SimpleType: HostConnectionPool to ParameterizedType: HostConnectionPool<CL> at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getHostName to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from pool to host", "operations": ["UPD SimpleName: pool from pool to host"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: BigInteger", "DEL SimpleName: id", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: BigInteger", "DEL Modifier: private", "DEL Modifier: final"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: BigInteger", "DEL SingleVariableDeclaration", "DEL SimpleName: id", "DEL SimpleName: BigInteger"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL FieldAccess", "DEL SimpleName: id", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: id"]}, {"root": "DEL SimpleType: BigInteger", "operations": ["DEL SimpleName: BigInteger", "DEL SimpleType: BigInteger"]}, {"root": "DEL SimpleName: id", "operations": ["DEL SimpleName: id"]}, {"root": "DEL SimpleName: id", "operations": ["DEL SimpleName: id"]}, {"root": "DEL SimpleName: append", "operations": ["DEL SimpleName: append"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: StringBuilder", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationFragment", "DEL SimpleName: sb", "DEL VariableDeclarationStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: sb", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \": \"", "DEL SimpleName: sb", "DEL MethodInvocation"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL Block", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL EnhancedForStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: sb"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: sb", "DEL MethodInvocation"]}]}}, {"HostConnectionPoolPartition_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(480) at 7", "Insert ImportDeclaration(15) into CompilationUnit(480) at 7", "Insert ImportDeclaration(19) into CompilationUnit(480) at 9", "Insert ImportDeclaration(21) into CompilationUnit(480) at 10", "Move FieldDeclaration(50) into TypeDeclaration: class(479) at 9", "Move MethodDeclaration(322) into TypeDeclaration: class(479) at 16", "Update QualifiedName: java.math.BigInteger(2) to javax.annotation.Nullable", "Insert QualifiedName: org.apache.commons.lang.StringUtils(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: com.google.common.base.Function(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: com.google.common.collect.Collections2(20) into ImportDeclaration(21) at 0", "Update Modifier: private(51) to protected", "Update Modifier: private(62) to protected", "Update Modifier: private(84) to protected", "Update Modifier: private(44) to protected", "Insert PrimitiveType: boolean(342) into MethodDeclaration(357) at 2", "Insert SimpleName: hasPool(343) into MethodDeclaration(357) at 3", "Move SingleVariableDeclaration(445) into MethodDeclaration(357) at 4", "Update TextElement: Collection of pools that own a partition of the ring(24) to Collection of hosts that are grouped by a certain criteria (such as token or rack)", "Insert TagElement: @param(338) into Javadoc(340) at 1", "Insert ReturnStatement(476) into Block(477) at 0", "Update TextElement: Return the list of active hosts (i.e. hosts that are not down)(323) to Return the list of active hosts.  Active hosts are those deemed by the ", "Insert TextElement: latency score strategy to be alive and responsive.  (301) into TagElement(302) at 1", "Update TextElement: Token or shard identifying this partition.(311) to Returns true if a pool is contained in this partition", "Insert SimpleName: pool(337) into TagElement: @param(338) at 0", "Insert MethodInvocation(354) into ReturnStatement(355) at 0", "Insert MethodInvocation(475) into ReturnStatement(476) at 0", "Insert SimpleName: pools(351) into MethodInvocation(354) at 0", "Insert SimpleName: contains(352) into MethodInvocation(354) at 1", "Insert SimpleName: pool(353) into MethodInvocation(354) at 2", "Insert MethodInvocation(473) into MethodInvocation(475) at 0", "Move SimpleName: toString(468) into MethodInvocation(475) at 1", "Insert MethodInvocation(470) into MethodInvocation(473) at 0", "Move SimpleName: append(463) into MethodInvocation(473) at 1", "Move StringLiteral: \"]\"(464) into MethodInvocation(473) at 2", "Insert MethodInvocation(424) into MethodInvocation(470) at 0", "Move SimpleName: append(432) into MethodInvocation(470) at 1", "Insert MethodInvocation(469) into MethodInvocation(470) at 2", "Move ClassInstanceCreation(423) into MethodInvocation(424) at 0", "Move SimpleName: append(427) into MethodInvocation(424) at 1", "Update StringLiteral: \"HostConnectionPoolPartition[\"(428) to \"BaseHostConnectionPoolPartition[\"", "Move StringLiteral: \"HostConnectionPoolPartition[\"(428) into MethodInvocation(424) at 2", "Update SimpleName: id(433) to StringUtils", "Move SimpleName: id(433) into MethodInvocation(469) at 0", "Update SimpleName: append(435) to join", "Move SimpleName: append(435) into MethodInvocation(469) at 1", "Move MethodInvocation(455) into MethodInvocation(469) at 2", "Move StringLiteral: \",\"(457) into MethodInvocation(469) at 3", "Update SimpleName: sb(448) to Collections2", "Insert SimpleName: transform(429) into MethodInvocation(467) at 1", "Move MethodInvocation(447) into MethodInvocation(467) at 2", "Insert ClassInstanceCreation(466) into MethodInvocation(467) at 3", "Insert ParameterizedType: Function<HostConnectionPool<CL>,String>(441) into ClassInstanceCreation(466) at 0", "Insert AnonymousClassDeclaration(465) into ClassInstanceCreation(466) at 1", "Insert SimpleType: Function(433) into ParameterizedType: Function<HostConnectionPool<CL>,String>(441) at 0", "Insert ParameterizedType: HostConnectionPool<CL>(438) into ParameterizedType: Function<HostConnectionPool<CL>,String>(441) at 1", "Insert SimpleType: String(440) into ParameterizedType: Function<HostConnectionPool<CL>,String>(441) at 2", "Insert MethodDeclaration(464) into AnonymousClassDeclaration(465) at 0", "Insert SimpleName: Function(432) into SimpleType: Function(433) at 0", "Insert SimpleType: HostConnectionPool(435) into ParameterizedType: HostConnectionPool<CL>(438) at 0", "Insert SimpleType: CL(437) into ParameterizedType: HostConnectionPool<CL>(438) at 1", "Insert SimpleName: String(439) into SimpleType: String(440) at 0", "Insert MarkerAnnotation(443) into MethodDeclaration(464) at 0", "Insert Modifier: public(444) into MethodDeclaration(464) at 1", "Insert SimpleType: String(446) into MethodDeclaration(464) at 2", "Insert SimpleName: apply(447) into MethodDeclaration(464) at 3", "Insert SingleVariableDeclaration(456) into MethodDeclaration(464) at 4", "Insert Block(463) into MethodDeclaration(464) at 5", "Insert SimpleName: HostConnectionPool(434) into SimpleType: HostConnectionPool(435) at 0", "Insert SimpleName: CL(436) into SimpleType: CL(437) at 0", "Insert SimpleName: Override(442) into MarkerAnnotation(443) at 0", "Insert SimpleName: String(445) into SimpleType: String(446) at 0", "Insert MarkerAnnotation(449) into SingleVariableDeclaration(456) at 0", "Insert ParameterizedType: HostConnectionPool<CL>(454) into SingleVariableDeclaration(456) at 1", "Insert SimpleName: host(455) into SingleVariableDeclaration(456) at 2", "Insert ReturnStatement(462) into Block(463) at 0", "Insert SimpleName: Nullable(448) into MarkerAnnotation(449) at 0", "Insert SimpleType: HostConnectionPool(451) into ParameterizedType: HostConnectionPool<CL>(454) at 0", "Insert SimpleType: CL(453) into ParameterizedType: HostConnectionPool<CL>(454) at 1", "Insert MethodInvocation(461) into ReturnStatement(462) at 0", "Insert SimpleName: HostConnectionPool(450) into SimpleType: HostConnectionPool(451) at 0", "Insert SimpleName: CL(452) into SimpleType: CL(453) at 0", "Move MethodInvocation(452) into MethodInvocation(461) at 0", "Move SimpleName: getHostName(453) into MethodInvocation(461) at 1", "Update SimpleName: pool(450) to host", "Delete Modifier: private(37)", "Delete Modifier: final(38)", "Delete SimpleName: BigInteger(39)", "Delete SimpleType: BigInteger(40)", "Delete SimpleName: id(41)", "Delete VariableDeclarationFragment(42)", "Delete FieldDeclaration(43)", "Delete SimpleName: BigInteger(114)", "Delete SimpleType: BigInteger(115)", "Delete SimpleName: id(116)", "Delete SingleVariableDeclaration(117)", "Delete ThisExpression(122)", "Delete SimpleName: id(123)", "Delete FieldAccess(124)", "Delete SimpleName: id(125)", "Delete Assignment: =(126)", "Delete ExpressionStatement(127)", "Delete SimpleName: BigInteger(316)", "Delete SimpleType: BigInteger(317)", "Delete SimpleName: id(318)", "Delete SimpleName: id(319)", "Delete SimpleName: append(449)", "Delete MethodInvocation(454)", "Delete SimpleName: StringBuilder(418)", "Delete SimpleType: StringBuilder(419)", "Delete SimpleName: sb(420)", "Delete VariableDeclarationFragment(424)", "Delete VariableDeclarationStatement(425)", "Delete SimpleName: sb(426)", "Delete MethodInvocation(429)", "Delete ExpressionStatement(430)", "Delete SimpleName: sb(431)", "Delete MethodInvocation(434)", "Delete StringLiteral: \": \"(436)", "Delete MethodInvocation(437)", "Delete ExpressionStatement(438)", "Delete SimpleName: append(456)", "Delete MethodInvocation(458)", "Delete ExpressionStatement(459)", "Delete Block(460)", "Delete EnhancedForStatement(461)", "Delete SimpleName: sb(462)", "Delete MethodInvocation(465)", "Delete ExpressionStatement(466)", "Delete SimpleName: sb(467)", "Delete MethodInvocation(469)", "Delete ReturnStatement(470)"]}}, {"NodeDiscoveryImpl_cluster": {"actions": [{"root": "UPDATE from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "operations": ["UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>", "UPD ParameterizedType: Supplier<Map<BigInteger,List<Host>>> from Supplier<Map<BigInteger,List<Host>>> to Supplier<List<Host>>"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "UPDATE from tokenRangeSupplier to hostSupplier", "operations": ["UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to hostSupplier", "UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to hostSupplier", "UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to hostSupplier", "UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to hostSupplier", "UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to hostSupplier", "UPD SimpleName: tokenRangeSupplier from tokenRangeSupplier to hostSupplier"]}, {"root": "MOVE from ParameterizedType: Supplier<Map<BigInteger,List<Host>>>", "operations": ["MOV ParameterizedType: List<Host> to ParameterizedType: Supplier<Map<BigInteger,List<Host>>> at 1"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toString to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: tokenRangeSupplier to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.math.BigInteger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map.Entry"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL SimpleName: Map", "DEL SimpleType: BigInteger", "DEL SimpleType: Map", "DEL SimpleName: BigInteger", "DEL ParameterizedType: Map<BigInteger,List<Host>>"]}, {"root": "DEL ParameterizedType: Map<BigInteger,List<Host>>", "operations": ["DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL SimpleName: BigInteger", "DEL SimpleType: Map", "DEL SimpleType: BigInteger", "DEL SimpleName: Map"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: StringBuilder", "DEL SimpleName: StringBuilder", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: sb", "DEL SimpleType: StringBuilder"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: Host", "DEL SimpleName: List", "DEL SimpleType: Map", "DEL VariableDeclarationStatement", "DEL SimpleName: hosts", "DEL SimpleName: Map", "DEL SimpleName: BigInteger", "DEL SimpleType: List", "DEL SimpleType: BigInteger", "DEL ParameterizedType: List<Host>", "DEL SimpleName: Host", "DEL ParameterizedType: Map<BigInteger,List<Host>>", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: hosts", "DEL Assignment: ="]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: first", "DEL BooleanLiteral: true", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SimpleName: append", "DEL SimpleName: List", "DEL SimpleType: Entry", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL IfStatement", "DEL SimpleName: sb", "DEL SimpleName: getValue", "DEL EnhancedForStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: BigInteger", "DEL StringLiteral: \"]\"", "DEL SimpleType: BigInteger", "DEL BooleanLiteral: false", "DEL SimpleName: token", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL StringLiteral: \",\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: token", "DEL SimpleName: hosts", "DEL SimpleName: sb", "DEL SimpleName: firstHost", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \",\"", "DEL ExpressionStatement", "DEL ParameterizedType: Entry<BigInteger,List<Host>>", "DEL SimpleName: host", "DEL SimpleName: Host", "DEL MethodInvocation", "DEL SimpleType: Host", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL VariableDeclarationStatement", "DEL SimpleName: append", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Assignment: =", "DEL ParameterizedType: List<Host>", "DEL StringLiteral: \":[\"", "DEL SimpleName: Entry", "DEL SimpleName: firstHost", "DEL SimpleType: List", "DEL BooleanLiteral: true", "DEL SimpleName: host", "DEL SimpleName: first", "DEL EnhancedForStatement", "DEL SimpleName: Host", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: firstHost", "DEL ExpressionStatement", "DEL SimpleName: entrySet", "DEL ExpressionStatement", "DEL SimpleName: first", "DEL SimpleType: Host", "DEL Assignment: =", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: token", "DEL SimpleName: sb", "DEL SimpleName: append", "DEL SimpleName: getHostName"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: sb"]}]}}, {"NodeDiscoveryImpl_diff": {"operations": ["Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(112) to Supplier<List<Host>>", "Move ParameterizedType: List<Host>(110) into ParameterizedType: Supplier<List<Host>>(101) at 1", "Update SimpleName: tokenRangeSupplier(113) to hostSupplier", "Update ParameterizedType: Supplier<Map<BigInteger,List<Host>>>(189) to Supplier<List<Host>>", "Update SimpleName: tokenRangeSupplier(190) to hostSupplier", "Move ParameterizedType: List<Host>(187) into ParameterizedType: Supplier<List<Host>>(173) at 1", "Update SimpleName: tokenRangeSupplier(213) to hostSupplier", "Insert ReturnStatement(371) into Block(372) at 0", "Update SimpleName: tokenRangeSupplier(211) to hostSupplier", "Insert MethodInvocation(370) into ReturnStatement(371) at 0", "Insert MethodInvocation(368) into MethodInvocation(370) at 0", "Move SimpleName: toString(490) into MethodInvocation(370) at 1", "Update SimpleName: tokenRangeSupplier(295) to hostSupplier", "Update SimpleName: tokenRangeSupplier(404) to hostSupplier", "Move SimpleName: tokenRangeSupplier(404) into MethodInvocation(368) at 0", "Move SimpleName: get(405) into MethodInvocation(368) at 1", "Delete QualifiedName: java.math.BigInteger(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Map(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Map.Entry(20)", "Delete ImportDeclaration(21)", "Delete SimpleName: Map(102)", "Delete SimpleType: Map(103)", "Delete SimpleName: BigInteger(104)", "Delete SimpleType: BigInteger(105)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(111)", "Delete SimpleName: Map(179)", "Delete SimpleType: Map(180)", "Delete SimpleName: BigInteger(181)", "Delete SimpleType: BigInteger(182)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(188)", "Delete SimpleName: StringBuilder(382)", "Delete SimpleType: StringBuilder(383)", "Delete SimpleName: sb(384)", "Delete SimpleName: StringBuilder(385)", "Delete SimpleType: StringBuilder(386)", "Delete ClassInstanceCreation(387)", "Delete VariableDeclarationFragment(388)", "Delete VariableDeclarationStatement(389)", "Delete SimpleName: Map(390)", "Delete SimpleType: Map(391)", "Delete SimpleName: BigInteger(392)", "Delete SimpleType: BigInteger(393)", "Delete SimpleName: List(394)", "Delete SimpleType: List(395)", "Delete SimpleName: Host(396)", "Delete SimpleType: Host(397)", "Delete ParameterizedType: List<Host>(398)", "Delete ParameterizedType: Map<BigInteger,List<Host>>(399)", "Delete SimpleName: hosts(400)", "Delete VariableDeclarationFragment(401)", "Delete VariableDeclarationStatement(402)", "Delete SimpleName: hosts(403)", "Delete MethodInvocation(406)", "Delete Assignment: =(407)", "Delete ExpressionStatement(408)", "Delete PrimitiveType: boolean(409)", "Delete SimpleName: first(410)", "Delete BooleanLiteral: true(411)", "Delete VariableDeclarationFragment(412)", "Delete VariableDeclarationStatement(413)", "Delete SimpleName: Entry(414)", "Delete SimpleType: Entry(415)", "Delete SimpleName: BigInteger(416)", "Delete SimpleType: BigInteger(417)", "Delete SimpleName: List(418)", "Delete SimpleType: List(419)", "Delete SimpleName: Host(420)", "Delete SimpleType: Host(421)", "Delete ParameterizedType: List<Host>(422)", "Delete ParameterizedType: Entry<BigInteger,List<Host>>(423)", "Delete SimpleName: token(424)", "Delete SingleVariableDeclaration(425)", "Delete SimpleName: hosts(426)", "Delete SimpleName: entrySet(427)", "Delete MethodInvocation(428)", "Delete SimpleName: first(429)", "Delete PrefixExpression: !(430)", "Delete SimpleName: sb(431)", "Delete SimpleName: append(432)", "Delete StringLiteral: \",\"(433)", "Delete MethodInvocation(434)", "Delete ExpressionStatement(435)", "Delete SimpleName: first(436)", "Delete BooleanLiteral: false(437)", "Delete Assignment: =(438)", "Delete ExpressionStatement(439)", "Delete IfStatement(440)", "Delete SimpleName: sb(441)", "Delete SimpleName: append(442)", "Delete SimpleName: token(443)", "Delete MethodInvocation(444)", "Delete SimpleName: append(445)", "Delete StringLiteral: \":[\"(446)", "Delete MethodInvocation(447)", "Delete ExpressionStatement(448)", "Delete PrimitiveType: boolean(449)", "Delete SimpleName: firstHost(450)", "Delete BooleanLiteral: true(451)", "Delete VariableDeclarationFragment(452)", "Delete VariableDeclarationStatement(453)", "Delete SimpleName: Host(454)", "Delete SimpleType: Host(455)", "Delete SimpleName: host(456)", "Delete SingleVariableDeclaration(457)", "Delete SimpleName: token(458)", "Delete SimpleName: getValue(459)", "Delete MethodInvocation(460)", "Delete SimpleName: firstHost(461)", "Delete PrefixExpression: !(462)", "Delete SimpleName: sb(463)", "Delete SimpleName: append(464)", "Delete StringLiteral: \",\"(465)", "Delete MethodInvocation(466)", "Delete ExpressionStatement(467)", "Delete SimpleName: firstHost(468)", "Delete BooleanLiteral: false(469)", "Delete Assignment: =(470)", "Delete ExpressionStatement(471)", "Delete IfStatement(472)", "Delete SimpleName: sb(473)", "Delete SimpleName: append(474)", "Delete SimpleName: host(475)", "Delete SimpleName: getHostName(476)", "Delete MethodInvocation(477)", "Delete MethodInvocation(478)", "Delete ExpressionStatement(479)", "Delete Block(480)", "Delete EnhancedForStatement(481)", "Delete SimpleName: sb(482)", "Delete SimpleName: append(483)", "Delete StringLiteral: \"]\"(484)", "Delete MethodInvocation(485)", "Delete ExpressionStatement(486)", "Delete Block(487)", "Delete EnhancedForStatement(488)", "Delete SimpleName: sb(489)", "Delete MethodInvocation(491)", "Delete ReturnStatement(492)"]}}, {"SimpleHostConnectionPool_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 31"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 43"]}, {"root": "UPDATE from com.netflix.astyanax.connectionpool.exceptions.TransportException to com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException", "operations": ["UPD QualifiedName: com.netflix.astyanax.connectionpool.exceptions.TransportException from com.netflix.astyanax.connectionpool.exceptions.TransportException to com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 14", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: AtomicInteger to ClassInstanceCreation at 0", "INS SimpleName: openConnections to VariableDeclarationFragment at 0", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS NumberLiteral: 0 to ClassInstanceCreation at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: AtomicInteger to FieldDeclaration at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 15", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS SimpleName: failedOpenConnections to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS NumberLiteral: 0 to ClassInstanceCreation at 1", "INS FieldDeclaration to TypeDeclaration: class at 15", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleType: AtomicInteger to ClassInstanceCreation at 0", "INS SimpleType: AtomicInteger to FieldDeclaration at 2", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: closedConnections to VariableDeclarationFragment at 0", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: AtomicInteger to FieldDeclaration at 2", "INS SimpleType: AtomicInteger to ClassInstanceCreation at 0", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS NumberLiteral: 0 to ClassInstanceCreation at 1", "INS FieldDeclaration to TypeDeclaration: class at 16", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 17", "operations": ["INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS NumberLiteral: 0 to ClassInstanceCreation at 1", "INS SimpleType: AtomicInteger to FieldDeclaration at 2", "INS SimpleName: borrowedCount to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 17", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS SimpleType: AtomicInteger to ClassInstanceCreation at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: AtomicInteger to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: returnedCount to VariableDeclarationFragment at 0", "INS SimpleType: AtomicInteger to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS NumberLiteral: 0 to ClassInstanceCreation at 1", "INS FieldDeclaration to TypeDeclaration: class at 18"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleType: AtomicInteger to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 19", "INS NumberLiteral: 0 to ClassInstanceCreation at 1", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS SimpleType: AtomicInteger to ClassInstanceCreation at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: errorsSinceLastSuccess to VariableDeclarationFragment at 0", "INS SimpleName: AtomicInteger to SimpleType: AtomicInteger at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS ExpressionStatement to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS IfStatement to Block at 0", "INS SimpleName: noteError to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 1", "INS NumberLiteral: 3 to InfixExpression: > at 1", "INS SimpleName: reason to MethodInvocation at 1", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: errorsSinceLastSuccess to MethodInvocation at 0", "INS SimpleName: markAsDown to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS SimpleName: ConnectionException to SimpleType: ConnectionException at 0", "INS SimpleType: ConnectionException to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: > at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: private to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 51", "operations": ["INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getFailedOpenConnectionCount to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 51", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: failedOpenConnections to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 52", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 52", "INS SimpleName: closedConnections to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getClosedConnectionCount to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 56", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 56", "INS PrimitiveType: int to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: errorsSinceLastSuccess to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getErrorsSinceLastSuccess to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6", "INS IfStatement to Block at 3", "INS Block to IfStatement at 1"]}, {"root": "UPDATE from double to int", "operations": ["UPD PrimitiveType: double from double to int"]}, {"root": "UPDATE from getMeanLatency to getOpenedConnectionCount", "operations": ["UPD SimpleName: getMeanLatency from getMeanLatency to getOpenedConnectionCount"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 2", "MOV ReturnStatement to Block at 6", "MOV IfStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS CatchClause to TryStatement at 2", "operations": ["INS ThrowStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ce to ThrowStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: ConnectionException to SimpleType: ConnectionException at 0", "INS SimpleName: decrementAndGet to MethodInvocation at 1", "INS SimpleName: UnknownException to SimpleType: UnknownException at 0", "INS SimpleType: ConnectionException to VariableDeclarationStatement at 0", "INS SimpleName: t to ClassInstanceCreation at 1", "INS SimpleName: failedOpenConnections to MethodInvocation at 0", "INS SimpleName: activeCount to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to CatchClause at 1", "INS SimpleType: UnknownException to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS SimpleName: ce to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 3", "INS CatchClause to TryStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: noteError to MethodInvocation at 0", "INS SimpleName: ce to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS StringLiteral: \",score=\" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS StringLiteral: \"]\" to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: returnedCount to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: / to MethodInvocation at 2", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \",pending=\" to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS NumberLiteral: 1000000 to InfixExpression: / at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS StringLiteral: \",blocked=\" to MethodInvocation at 2"]}, {"root": "UPDATE from count to remaining", "operations": ["UPD SimpleName: count from count to remaining", "UPD SimpleName: count from count to remaining", "UPD SimpleName: count from count to remaining"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 3"]}, {"root": "UPDATE from internalCloseConnection to returnedCount", "operations": ["UPD SimpleName: internalCloseConnection from internalCloseConnection to returnedCount"]}, {"root": "UPDATE from connection to incrementAndGet", "operations": ["UPD SimpleName: connection from connection to incrementAndGet"]}, {"root": "UPDATE from markAsDown to errorsSinceLastSuccess", "operations": ["UPD SimpleName: markAsDown from markAsDown to errorsSinceLastSuccess"]}, {"root": "UPDATE from ce to set", "operations": ["UPD SimpleName: ce from ce to set"]}, {"root": "INS NumberLiteral: 0 to MethodInvocation at 2", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS SimpleName: closedConnections to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from latencyStrategy to openConnections", "operations": ["UPD SimpleName: latencyStrategy from latencyStrategy to openConnections"]}, {"root": "UPDATE from getMean to get", "operations": ["UPD SimpleName: getMean from getMean to get"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "UPDATE from Exception to ConnectionException", "operations": ["UPD SimpleType: Exception from Exception to ConnectionException", "UPD SimpleName: Exception from Exception to ConnectionException"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS SimpleName: failedOpenConnections to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: noteError to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 1", "INS ExpressionStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: borrowedCount to MethodInvocation at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ReturnStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: closedConnections to MethodInvocation at 0"]}, {"root": "MOVE from InfixExpression: /", "operations": ["MOV MethodInvocation to InfixExpression: / at 0"]}, {"root": "UPDATE from markAsDown to noteError", "operations": ["UPD SimpleName: markAsDown from markAsDown to noteError", "UPD SimpleName: markAsDown from markAsDown to noteError"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: set to MethodInvocation at 1", "INS SimpleName: errorsSinceLastSuccess to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS ExpressionStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: openConnections to MethodInvocation at 0", "INS SimpleName: incrementAndGet to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from PoolTimeoutException to InterruptedOperationException", "operations": ["UPD SimpleName: PoolTimeoutException from PoolTimeoutException to InterruptedOperationException", "UPD SimpleType: PoolTimeoutException from PoolTimeoutException to InterruptedOperationException"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from toString to append", "operations": ["UPD SimpleName: toString from toString to append", "UPD SimpleName: idle from idle to append"]}, {"root": "INS StringLiteral: \",return=\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \",return=\" to MethodInvocation at 2"]}, {"root": "INS TryStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: t to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: printStackTrace to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS TryStatement to Block at 1", "INS Block to TryStatement at 0", "INS CatchClause to TryStatement at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: borrowedCount to MethodInvocation at 0"]}, {"root": "INS StringLiteral: \",borrow=\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \",borrow=\" to MethodInvocation at 2"]}, {"root": "UPDATE from toString to getName", "operations": ["UPD SimpleName: toString from toString to getName"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from \",score=\" to \")\"", "operations": ["UPD StringLiteral: \",score=\" from \",score=\" to \")\""]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: failedOpenConnections to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS SimpleName: openConnections to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: incrementAndGet to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: failedOpenConnections to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from \",pending=\" to \",failed=\"", "operations": ["UPD StringLiteral: \",pending=\" from \",pending=\" to \",failed=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: closedConnections to MethodInvocation at 0"]}, {"root": "UPDATE from \",blocked=\" to \",closed=\"", "operations": ["UPD StringLiteral: \",blocked=\" from \",blocked=\" to \",closed=\""]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \",busy=\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: - to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "INS SimpleName: idle to MethodInvocation at 2", "operations": ["INS SimpleName: idle to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \",idle=\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \",idle=\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: open to MethodInvocation at 2", "operations": ["INS SimpleName: open to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \"open=\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"open=\" to MethodInvocation at 2"]}, {"root": "UPDATE from \",open=\" to \",connections(\"", "operations": ["UPD StringLiteral: \",open=\" from \",open=\" to \",connections(\""]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.astyanax.connectionpool.exceptions.ConnectionAbortedException"]}, {"root": "DEL IfStatement", "operations": ["DEL StringLiteral: \"Can't borrow connection.  Host is down.\"", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleType: HostDownException", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: HostDownException"]}, {"root": "DEL Block", "operations": ["DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \"Too many clients blocked on this pool \"", "DEL InfixExpression: +", "DEL InfixExpression: <=", "DEL IfStatement", "DEL SimpleName: config", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: blockedThreads", "DEL MethodInvocation", "DEL SimpleName: PoolTimeoutException", "DEL SimpleName: setHost", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleType: PoolTimeoutException", "DEL SimpleName: getHost", "DEL SimpleName: getMaxBlockedThreadsPerHost", "DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: addTimeoutSample", "DEL SimpleName: badHostDetector", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: suspend", "DEL SimpleName: retryContext", "DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL InstanceofExpression", "DEL SimpleName: ce", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL InstanceofExpression", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: ce", "DEL Block", "DEL SimpleName: ce", "DEL SimpleName: TransportException", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: ConnectionAbortedException", "DEL InstanceofExpression", "DEL SimpleName: TimeoutException", "DEL Block", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleType: TransportException", "DEL SimpleType: TimeoutException", "DEL SimpleType: ConnectionAbortedException"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: isShutdown"]}, {"root": "DEL SimpleName: open", "operations": ["DEL SimpleName: open"]}, {"root": "DEL StringLiteral: \",busy=\"", "operations": ["DEL StringLiteral: \",busy=\""]}, {"root": "DEL StringLiteral: \",idle=\"", "operations": ["DEL StringLiteral: \",idle=\""]}, {"root": "DEL StringLiteral: \"]\"", "operations": ["DEL StringLiteral: \"]\""]}]}}, {"SimpleHostConnectionPool_diff": {"operations": ["Move ImportDeclaration(63) into CompilationUnit(1805) at 31", "Move MethodDeclaration(1459) into TypeDeclaration: class(1804) at 43", "Update QualifiedName: com.netflix.astyanax.connectionpool.exceptions.TransportException(60) to com.netflix.astyanax.connectionpool.exceptions.InterruptedOperationException", "Insert FieldDeclaration(216) into TypeDeclaration: class(1804) at 14", "Insert FieldDeclaration(227) into TypeDeclaration: class(1804) at 15", "Insert FieldDeclaration(238) into TypeDeclaration: class(1804) at 16", "Insert FieldDeclaration(249) into TypeDeclaration: class(1804) at 17", "Insert FieldDeclaration(260) into TypeDeclaration: class(1804) at 18", "Insert FieldDeclaration(271) into TypeDeclaration: class(1804) at 19", "Insert MethodDeclaration(981) into TypeDeclaration: class(1804) at 38", "Insert MethodDeclaration(1544) into TypeDeclaration: class(1804) at 51", "Insert MethodDeclaration(1555) into TypeDeclaration: class(1804) at 52", "Insert MethodDeclaration(1610) into TypeDeclaration: class(1804) at 56", "Insert Modifier: private(206) into FieldDeclaration(216) at 0", "Insert Modifier: final(207) into FieldDeclaration(216) at 1", "Insert SimpleType: AtomicInteger(209) into FieldDeclaration(216) at 2", "Insert VariableDeclarationFragment(215) into FieldDeclaration(216) at 3", "Insert Modifier: private(217) into FieldDeclaration(227) at 0", "Insert Modifier: final(218) into FieldDeclaration(227) at 1", "Insert SimpleType: AtomicInteger(220) into FieldDeclaration(227) at 2", "Insert VariableDeclarationFragment(226) into FieldDeclaration(227) at 3", "Insert Modifier: private(228) into FieldDeclaration(238) at 0", "Insert Modifier: final(229) into FieldDeclaration(238) at 1", "Insert SimpleType: AtomicInteger(231) into FieldDeclaration(238) at 2", "Insert VariableDeclarationFragment(237) into FieldDeclaration(238) at 3", "Insert Modifier: private(239) into FieldDeclaration(249) at 0", "Insert Modifier: final(240) into FieldDeclaration(249) at 1", "Insert SimpleType: AtomicInteger(242) into FieldDeclaration(249) at 2", "Insert VariableDeclarationFragment(248) into FieldDeclaration(249) at 3", "Insert Modifier: private(250) into FieldDeclaration(260) at 0", "Insert Modifier: final(251) into FieldDeclaration(260) at 1", "Insert SimpleType: AtomicInteger(253) into FieldDeclaration(260) at 2", "Insert VariableDeclarationFragment(259) into FieldDeclaration(260) at 3", "Insert Modifier: private(261) into FieldDeclaration(271) at 0", "Insert Modifier: final(262) into FieldDeclaration(271) at 1", "Insert SimpleType: AtomicInteger(264) into FieldDeclaration(271) at 2", "Insert VariableDeclarationFragment(270) into FieldDeclaration(271) at 3", "Insert Block(909) into MethodDeclaration(910) at 6", "Insert Modifier: private(963) into MethodDeclaration(981) at 0", "Insert PrimitiveType: void(964) into MethodDeclaration(981) at 1", "Insert SimpleName: noteError(965) into MethodDeclaration(981) at 2", "Insert SingleVariableDeclaration(969) into MethodDeclaration(981) at 3", "Insert Block(980) into MethodDeclaration(981) at 4", "Update PrimitiveType: double(1452) to int", "Update SimpleName: getMeanLatency(1453) to getOpenedConnectionCount", "Insert MarkerAnnotation(1535) into MethodDeclaration(1544) at 0", "Insert Modifier: public(1536) into MethodDeclaration(1544) at 1", "Insert PrimitiveType: int(1537) into MethodDeclaration(1544) at 2", "Insert SimpleName: getFailedOpenConnectionCount(1538) into MethodDeclaration(1544) at 3", "Insert Block(1543) into MethodDeclaration(1544) at 4", "Insert MarkerAnnotation(1546) into MethodDeclaration(1555) at 0", "Insert Modifier: public(1547) into MethodDeclaration(1555) at 1", "Insert PrimitiveType: int(1548) into MethodDeclaration(1555) at 2", "Insert SimpleName: getClosedConnectionCount(1549) into MethodDeclaration(1555) at 3", "Insert Block(1554) into MethodDeclaration(1555) at 4", "Insert MarkerAnnotation(1601) into MethodDeclaration(1610) at 0", "Insert Modifier: public(1602) into MethodDeclaration(1610) at 1", "Insert PrimitiveType: int(1603) into MethodDeclaration(1610) at 2", "Insert SimpleName: getErrorsSinceLastSuccess(1604) into MethodDeclaration(1610) at 3", "Insert Block(1609) into MethodDeclaration(1610) at 4", "Insert SimpleName: AtomicInteger(208) into SimpleType: AtomicInteger(209) at 0", "Insert SimpleName: openConnections(210) into VariableDeclarationFragment(215) at 0", "Insert ClassInstanceCreation(214) into VariableDeclarationFragment(215) at 1", "Insert SimpleName: AtomicInteger(219) into SimpleType: AtomicInteger(220) at 0", "Insert SimpleName: failedOpenConnections(221) into VariableDeclarationFragment(226) at 0", "Insert ClassInstanceCreation(225) into VariableDeclarationFragment(226) at 1", "Insert SimpleName: AtomicInteger(230) into SimpleType: AtomicInteger(231) at 0", "Insert SimpleName: closedConnections(232) into VariableDeclarationFragment(237) at 0", "Insert ClassInstanceCreation(236) into VariableDeclarationFragment(237) at 1", "Insert SimpleName: AtomicInteger(241) into SimpleType: AtomicInteger(242) at 0", "Insert SimpleName: borrowedCount(243) into VariableDeclarationFragment(248) at 0", "Insert ClassInstanceCreation(247) into VariableDeclarationFragment(248) at 1", "Insert SimpleName: AtomicInteger(252) into SimpleType: AtomicInteger(253) at 0", "Insert SimpleName: returnedCount(254) into VariableDeclarationFragment(259) at 0", "Insert ClassInstanceCreation(258) into VariableDeclarationFragment(259) at 1", "Insert SimpleName: AtomicInteger(263) into SimpleType: AtomicInteger(264) at 0", "Insert SimpleName: errorsSinceLastSuccess(265) into VariableDeclarationFragment(270) at 0", "Insert ClassInstanceCreation(269) into VariableDeclarationFragment(270) at 1", "Move ExpressionStatement(817) into Block(909) at 0", "Move ExpressionStatement(798) into Block(909) at 1", "Move VariableDeclarationStatement(806) into Block(909) at 2", "Insert IfStatement(871) into Block(909) at 3", "Move ExpressionStatement(856) into Block(909) at 4", "Move IfStatement(895) into Block(909) at 5", "Move ReturnStatement(897) into Block(909) at 6", "Insert SimpleType: ConnectionException(967) into SingleVariableDeclaration(969) at 0", "Insert SimpleName: reason(968) into SingleVariableDeclaration(969) at 1", "Insert IfStatement(979) into Block(980) at 0", "Insert SimpleName: Override(1534) into MarkerAnnotation(1535) at 0", "Insert ReturnStatement(1542) into Block(1543) at 0", "Insert SimpleName: Override(1545) into MarkerAnnotation(1546) at 0", "Insert ReturnStatement(1553) into Block(1554) at 0", "Insert SimpleName: Override(1600) into MarkerAnnotation(1601) at 0", "Insert ReturnStatement(1608) into Block(1609) at 0", "Insert SimpleType: AtomicInteger(212) into ClassInstanceCreation(214) at 0", "Insert NumberLiteral: 0(213) into ClassInstanceCreation(214) at 1", "Insert SimpleType: AtomicInteger(223) into ClassInstanceCreation(225) at 0", "Insert NumberLiteral: 0(224) into ClassInstanceCreation(225) at 1", "Insert SimpleType: AtomicInteger(234) into ClassInstanceCreation(236) at 0", "Insert NumberLiteral: 0(235) into ClassInstanceCreation(236) at 1", "Insert SimpleType: AtomicInteger(245) into ClassInstanceCreation(247) at 0", "Insert NumberLiteral: 0(246) into ClassInstanceCreation(247) at 1", "Insert SimpleType: AtomicInteger(256) into ClassInstanceCreation(258) at 0", "Insert NumberLiteral: 0(257) into ClassInstanceCreation(258) at 1", "Insert SimpleType: AtomicInteger(267) into ClassInstanceCreation(269) at 0", "Insert NumberLiteral: 0(268) into ClassInstanceCreation(269) at 1", "Insert Block(780) into TryStatement(814) at 0", "Move InfixExpression: !=(809) into IfStatement(871) at 0", "Insert Block(870) into IfStatement(871) at 1", "Insert SimpleName: ConnectionException(966) into SimpleType: ConnectionException(967) at 0", "Insert InfixExpression: >(974) into IfStatement(979) at 0", "Insert ExpressionStatement(978) into IfStatement(979) at 1", "Insert CatchClause(1247) into TryStatement(1248) at 2", "Insert MethodInvocation(1541) into ReturnStatement(1542) at 0", "Insert MethodInvocation(1552) into ReturnStatement(1553) at 0", "Insert MethodInvocation(1607) into ReturnStatement(1608) at 0", "Insert MethodInvocation(1800) into ReturnStatement(1801) at 0", "Insert SimpleName: AtomicInteger(211) into SimpleType: AtomicInteger(212) at 0", "Insert SimpleName: AtomicInteger(222) into SimpleType: AtomicInteger(223) at 0", "Insert SimpleName: AtomicInteger(233) into SimpleType: AtomicInteger(234) at 0", "Insert SimpleName: AtomicInteger(244) into SimpleType: AtomicInteger(245) at 0", "Insert SimpleName: AtomicInteger(255) into SimpleType: AtomicInteger(256) at 0", "Insert SimpleName: AtomicInteger(266) into SimpleType: AtomicInteger(267) at 0", "Update SimpleName: count(437) to remaining", "Insert ExpressionStatement(749) into Block(780) at 0", "Move ExpressionStatement(701) into Block(780) at 1", "Move IfStatement(707) into Block(780) at 2", "Move ThrowStatement(774) into Block(780) at 3", "Update SimpleName: internalCloseConnection(814) to returnedCount", "Update SimpleName: connection(815) to incrementAndGet", "Move IfStatement(830) into Block(870) at 0", "Update SimpleName: markAsDown(853) to errorsSinceLastSuccess", "Update SimpleName: ce(854) to set", "Insert NumberLiteral: 0(874) into MethodInvocation(875) at 2", "Insert ExpressionStatement(949) into Block(954) at 0", "Insert MethodInvocation(972) into InfixExpression: >(974) at 0", "Insert NumberLiteral: 3(973) into InfixExpression: >(974) at 1", "Insert MethodInvocation(977) into ExpressionStatement(978) at 0", "Insert SingleVariableDeclaration(1222) into CatchClause(1247) at 0", "Insert Block(1246) into CatchClause(1247) at 1", "Update SimpleName: latencyStrategy(1454) to openConnections", "Update SimpleName: getMean(1455) to get", "Insert SimpleName: failedOpenConnections(1539) into MethodInvocation(1541) at 0", "Insert SimpleName: get(1540) into MethodInvocation(1541) at 1", "Insert SimpleName: closedConnections(1550) into MethodInvocation(1552) at 0", "Insert SimpleName: get(1551) into MethodInvocation(1552) at 1", "Insert SimpleName: errorsSinceLastSuccess(1605) into MethodInvocation(1607) at 0", "Insert SimpleName: get(1606) into MethodInvocation(1607) at 1", "Insert MethodInvocation(1798) into MethodInvocation(1800) at 0", "Insert SimpleName: toString(1799) into MethodInvocation(1800) at 1", "Update SimpleName: count(467) to remaining", "Update SimpleName: count(501) to remaining", "Move MethodInvocation(689) into ExpressionStatement(749) at 0", "Move InstanceofExpression(837) into IfStatement(869) at 0", "Insert MethodInvocation(948) into ExpressionStatement(949) at 0", "Insert SimpleName: errorsSinceLastSuccess(970) into MethodInvocation(972) at 0", "Insert SimpleName: incrementAndGet(971) into MethodInvocation(972) at 1", "Insert SimpleName: markAsDown(975) into MethodInvocation(977) at 0", "Insert SimpleName: reason(976) into MethodInvocation(977) at 1", "Update SimpleType: Exception(1145) to ConnectionException", "Insert ExpressionStatement(1206) into Block(1217) at 0", "Insert ExpressionStatement(1214) into Block(1217) at 2", "Insert SimpleType: Throwable(1220) into SingleVariableDeclaration(1222) at 0", "Insert SimpleName: t(1221) into SingleVariableDeclaration(1222) at 1", "Insert ExpressionStatement(1226) into Block(1246) at 0", "Insert ExpressionStatement(1230) into Block(1246) at 1", "Insert VariableDeclarationStatement(1239) into Block(1246) at 2", "Insert ExpressionStatement(1243) into Block(1246) at 3", "Insert ThrowStatement(1245) into Block(1246) at 4", "Insert MethodInvocation(1795) into MethodInvocation(1798) at 0", "Insert SimpleName: append(1796) into MethodInvocation(1798) at 1", "Insert StringLiteral: \"]\"(1797) into MethodInvocation(1798) at 2", "Insert ExpressionStatement(692) into Block(703) at 0", "Move ExpressionStatement(841) into Block(868) at 2", "Move ReturnStatement(860) into Block(868) at 3", "Insert SimpleName: closedConnections(946) into MethodInvocation(948) at 0", "Insert SimpleName: incrementAndGet(947) into MethodInvocation(948) at 1", "Update SimpleName: Exception(1144) to ConnectionException", "Insert MethodInvocation(1205) into ExpressionStatement(1206) at 0", "Insert MethodInvocation(1213) into ExpressionStatement(1214) at 0", "Insert SimpleName: Throwable(1219) into SimpleType: Throwable(1220) at 0", "Insert MethodInvocation(1225) into ExpressionStatement(1226) at 0", "Insert MethodInvocation(1229) into ExpressionStatement(1230) at 0", "Insert SimpleType: ConnectionException(1232) into VariableDeclarationStatement(1239) at 0", "Insert VariableDeclarationFragment(1238) into VariableDeclarationStatement(1239) at 1", "Insert MethodInvocation(1242) into ExpressionStatement(1243) at 0", "Insert SimpleName: ce(1244) into ThrowStatement(1245) at 0", "Insert ExpressionStatement(1656) into Block(1661) at 0", "Insert MethodInvocation(1789) into MethodInvocation(1795) at 0", "Insert SimpleName: append(1790) into MethodInvocation(1795) at 1", "Insert InfixExpression: /(1794) into MethodInvocation(1795) at 2", "Insert MethodInvocation(691) into ExpressionStatement(692) at 0", "Insert SimpleName: failedOpenConnections(1203) into MethodInvocation(1205) at 0", "Insert SimpleName: incrementAndGet(1204) into MethodInvocation(1205) at 1", "Insert SimpleName: noteError(1211) into MethodInvocation(1213) at 0", "Insert SimpleName: e(1212) into MethodInvocation(1213) at 1", "Insert SimpleName: failedOpenConnections(1223) into MethodInvocation(1225) at 0", "Insert SimpleName: incrementAndGet(1224) into MethodInvocation(1225) at 1", "Insert SimpleName: activeCount(1227) into MethodInvocation(1229) at 0", "Insert SimpleName: decrementAndGet(1228) into MethodInvocation(1229) at 1", "Insert SimpleName: ConnectionException(1231) into SimpleType: ConnectionException(1232) at 0", "Insert SimpleName: ce(1233) into VariableDeclarationFragment(1238) at 0", "Insert ClassInstanceCreation(1237) into VariableDeclarationFragment(1238) at 1", "Insert SimpleName: noteError(1240) into MethodInvocation(1242) at 0", "Insert SimpleName: ce(1241) into MethodInvocation(1242) at 1", "Insert MethodInvocation(1655) into ExpressionStatement(1656) at 0", "Insert MethodInvocation(1786) into MethodInvocation(1789) at 0", "Insert SimpleName: append(1787) into MethodInvocation(1789) at 1", "Insert StringLiteral: \",score=\"(1788) into MethodInvocation(1789) at 2", "Move MethodInvocation(1617) into InfixExpression: /(1794) at 0", "Insert NumberLiteral: 1000000(1793) into InfixExpression: /(1794) at 1", "Insert SimpleName: borrowedCount(689) into MethodInvocation(691) at 0", "Insert SimpleName: incrementAndGet(690) into MethodInvocation(691) at 1", "Update SimpleName: markAsDown(825) to noteError", "Insert ExpressionStatement(1179) into Block(1189) at 2", "Insert ExpressionStatement(1188) into Block(1189) at 4", "Insert SimpleType: UnknownException(1235) into ClassInstanceCreation(1237) at 0", "Insert SimpleName: t(1236) into ClassInstanceCreation(1237) at 1", "Insert SimpleName: closedConnections(1653) into MethodInvocation(1655) at 0", "Insert SimpleName: incrementAndGet(1654) into MethodInvocation(1655) at 1", "Insert MethodInvocation(1782) into MethodInvocation(1786) at 0", "Insert SimpleName: append(1783) into MethodInvocation(1786) at 1", "Move MethodInvocation(1610) into MethodInvocation(1786) at 2", "Update SimpleType: PoolTimeoutException(736) to InterruptedOperationException", "Insert MethodInvocation(1178) into ExpressionStatement(1179) at 0", "Insert MethodInvocation(1187) into ExpressionStatement(1188) at 0", "Insert SimpleName: UnknownException(1234) into SimpleType: UnknownException(1235) at 0", "Insert MethodInvocation(1779) into MethodInvocation(1782) at 0", "Insert SimpleName: append(1780) into MethodInvocation(1782) at 1", "Insert StringLiteral: \",pending=\"(1781) into MethodInvocation(1782) at 2", "Update SimpleName: PoolTimeoutException(735) to InterruptedOperationException", "Insert SimpleName: errorsSinceLastSuccess(1175) into MethodInvocation(1178) at 0", "Insert SimpleName: set(1176) into MethodInvocation(1178) at 1", "Insert NumberLiteral: 0(1177) into MethodInvocation(1178) at 2", "Insert SimpleName: openConnections(1185) into MethodInvocation(1187) at 0", "Insert SimpleName: incrementAndGet(1186) into MethodInvocation(1187) at 1", "Insert MethodInvocation(1775) into MethodInvocation(1779) at 0", "Insert SimpleName: append(1776) into MethodInvocation(1779) at 1", "Move MethodInvocation(1603) into MethodInvocation(1779) at 2", "Insert MethodInvocation(1772) into MethodInvocation(1775) at 0", "Insert SimpleName: append(1773) into MethodInvocation(1775) at 1", "Insert StringLiteral: \",blocked=\"(1774) into MethodInvocation(1775) at 2", "Move MethodInvocation(1623) into MethodInvocation(1772) at 0", "Insert SimpleName: append(1768) into MethodInvocation(1772) at 1", "Insert MethodInvocation(1771) into MethodInvocation(1772) at 2", "Update SimpleName: toString(1622) to append", "Insert StringLiteral: \",return=\"(1766) into MethodInvocation(1767) at 2", "Insert SimpleName: returnedCount(1769) into MethodInvocation(1771) at 0", "Insert SimpleName: get(1770) into MethodInvocation(1771) at 1", "Insert TryStatement(1089) into Block(1091) at 1", "Insert MethodInvocation(1763) into MethodInvocation(1764) at 2", "Insert Block(1078) into TryStatement(1089) at 0", "Insert CatchClause(1088) into TryStatement(1089) at 1", "Insert StringLiteral: \",borrow=\"(1758) into MethodInvocation(1759) at 2", "Insert SimpleName: borrowedCount(1761) into MethodInvocation(1763) at 0", "Insert SimpleName: get(1762) into MethodInvocation(1763) at 1", "Update SimpleName: toString(1008) to getName", "Move ExpressionStatement(1025) into Block(1078) at 0", "Move ExpressionStatement(1030) into Block(1078) at 1", "Move ExpressionStatement(1037) into Block(1078) at 2", "Move ExpressionStatement(1043) into Block(1078) at 3", "Insert SingleVariableDeclaration(1082) into CatchClause(1088) at 0", "Insert Block(1087) into CatchClause(1088) at 1", "Update StringLiteral: \",score=\"(1613) to \")\"", "Insert SimpleType: Throwable(1080) into SingleVariableDeclaration(1082) at 0", "Insert SimpleName: t(1081) into SingleVariableDeclaration(1082) at 1", "Insert ExpressionStatement(1086) into Block(1087) at 0", "Insert MethodInvocation(1752) into MethodInvocation(1753) at 2", "Insert SimpleName: Throwable(1079) into SimpleType: Throwable(1080) at 0", "Insert MethodInvocation(1085) into ExpressionStatement(1086) at 0", "Insert ExpressionStatement(1347) into Block(1364) at 0", "Insert ExpressionStatement(1385) into Block(1404) at 0", "Update StringLiteral: \",pending=\"(1606) to \",failed=\"", "Insert SimpleName: failedOpenConnections(1750) into MethodInvocation(1752) at 0", "Insert SimpleName: get(1751) into MethodInvocation(1752) at 1", "Insert SimpleName: t(1083) into MethodInvocation(1085) at 0", "Insert SimpleName: printStackTrace(1084) into MethodInvocation(1085) at 1", "Insert MethodInvocation(1346) into ExpressionStatement(1347) at 0", "Insert MethodInvocation(1384) into ExpressionStatement(1385) at 0", "Insert MethodInvocation(1744) into MethodInvocation(1745) at 2", "Insert SimpleName: openConnections(1344) into MethodInvocation(1346) at 0", "Insert SimpleName: incrementAndGet(1345) into MethodInvocation(1346) at 1", "Insert SimpleName: failedOpenConnections(1382) into MethodInvocation(1384) at 0", "Insert SimpleName: incrementAndGet(1383) into MethodInvocation(1384) at 1", "Update StringLiteral: \",blocked=\"(1599) to \",closed=\"", "Insert SimpleName: closedConnections(1742) into MethodInvocation(1744) at 0", "Insert SimpleName: get(1743) into MethodInvocation(1744) at 1", "Insert MethodInvocation(1732) into MethodInvocation(1737) at 0", "Update SimpleName: idle(1596) to append", "Move InfixExpression: -(1590) into MethodInvocation(1737) at 4", "Update SimpleName: markAsDown(1298) to noteError", "Move MethodInvocation(1594) into MethodInvocation(1732) at 0", "Move SimpleName: append(1595) into MethodInvocation(1732) at 1", "Insert StringLiteral: \",busy=\"(1731) into MethodInvocation(1732) at 2", "Insert SimpleName: idle(1728) into MethodInvocation(1729) at 2", "Insert StringLiteral: \",idle=\"(1725) into MethodInvocation(1726) at 2", "Insert SimpleName: open(1722) into MethodInvocation(1723) at 2", "Insert StringLiteral: \"open=\"(1719) into MethodInvocation(1720) at 2", "Update StringLiteral: \",open=\"(1579) to \",connections(\"", "Move MethodInvocation(553) into PrefixExpression: !(1713) at 0", "Delete QualifiedName: com.netflix.astyanax.connectionpool.exceptions.ConnectionAbortedException(56)", "Delete ImportDeclaration(57)", "Delete SimpleName: HostDownException(554)", "Delete SimpleType: HostDownException(555)", "Delete StringLiteral: \"Can't borrow connection.  Host is down.\"(556)", "Delete ClassInstanceCreation(557)", "Delete ThrowStatement(558)", "Delete Block(559)", "Delete IfStatement(560)", "Delete SimpleName: config(690)", "Delete SimpleName: getMaxBlockedThreadsPerHost(691)", "Delete MethodInvocation(692)", "Delete InfixExpression: <=(693)", "Delete Block(708)", "Delete SimpleName: PoolTimeoutException(709)", "Delete SimpleType: PoolTimeoutException(710)", "Delete StringLiteral: \"Too many clients blocked on this pool \"(711)", "Delete SimpleName: blockedThreads(712)", "Delete SimpleName: get(713)", "Delete MethodInvocation(714)", "Delete InfixExpression: +(715)", "Delete ClassInstanceCreation(716)", "Delete SimpleName: setHost(717)", "Delete SimpleName: getHost(718)", "Delete MethodInvocation(719)", "Delete MethodInvocation(720)", "Delete ThrowStatement(721)", "Delete Block(722)", "Delete IfStatement(723)", "Delete Block(724)", "Delete SimpleName: badHostDetector(818)", "Delete SimpleName: addTimeoutSample(819)", "Delete MethodInvocation(820)", "Delete SimpleName: retryContext(821)", "Delete SimpleName: suspend(822)", "Delete MethodInvocation(823)", "Delete ExpressionStatement(824)", "Delete SimpleName: ce(810)", "Delete SimpleName: TimeoutException(811)", "Delete SimpleType: TimeoutException(812)", "Delete InstanceofExpression(813)", "Delete BooleanLiteral: true(831)", "Delete ReturnStatement(832)", "Delete Block(833)", "Delete SimpleName: ce(842)", "Delete SimpleName: TransportException(843)", "Delete SimpleType: TransportException(844)", "Delete InstanceofExpression(845)", "Delete SimpleName: ce(846)", "Delete SimpleName: ConnectionAbortedException(847)", "Delete SimpleType: ConnectionAbortedException(848)", "Delete InstanceofExpression(849)", "Delete ParenthesizedExpression(850)", "Delete PrefixExpression: !(851)", "Delete InfixExpression: &&(852)", "Delete Block(857)", "Delete IfStatement(858)", "Delete Block(861)", "Delete IfStatement(862)", "Delete IfStatement(863)", "Delete Block(864)", "Delete IfStatement(865)", "Delete Block(898)", "Delete SimpleName: isShutdown(1574)", "Delete MethodInvocation(1575)", "Delete SimpleName: open(1582)", "Delete StringLiteral: \",busy=\"(1585)", "Delete StringLiteral: \",idle=\"(1593)", "Delete StringLiteral: \"]\"(1620)"]}}, {"SmaLatencyScoreStrategyImpl_cluster": {"actions": [{"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: updateInterval", "DEL Modifier: final", "DEL Modifier: private"]}]}}, {"SmaLatencyScoreStrategyImpl_diff": {"operations": ["Delete Modifier: private(51)", "Delete Modifier: final(52)", "Delete PrimitiveType: int(53)", "Delete SimpleName: updateInterval(54)", "Delete VariableDeclarationFragment(55)", "Delete FieldDeclaration(56)"]}}, {"SmaLatencyScoreStrategyInstanceImpl_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.astyanax.connectionpool.impl", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.NoSuchElementException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.LinkedBlockingQueue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.astyanax.connectionpool.LatencyScoreStrategy"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL SimpleName: LinkedBlockingQueue", "DEL FieldAccess", "DEL SimpleName: clear", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL Block", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleName: remove", "DEL SimpleName: getWindowSize", "DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: e", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: sample", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0", "DEL CatchClause", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: latencies", "DEL InfixExpression: /", "DEL Block", "DEL SimpleName: sum", "DEL Modifier: public", "DEL Assignment: +=", "DEL PostfixExpression: ++", "DEL SimpleName: addSample", "DEL SimpleType: Long", "DEL SimpleType: LinkedBlockingQueue", "DEL SimpleName: latencies", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: SmaLatencyScoreStrategyInstanceImpl", "DEL SimpleName: Long", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: count", "DEL PrimitiveType: void", "DEL QualifiedName: LatencyScoreStrategy.Instance", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: NoSuchElementException", "DEL SimpleName: SmaLatencyScoreStrategyInstanceImpl", "DEL Modifier: private", "DEL SimpleName: offer", "DEL TypeDeclaration: class", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL NumberLiteral: 0.0d", "DEL NumberLiteral: 0", "DEL MarkerAnnotation", "DEL ParameterizedType: LinkedBlockingQueue<Long>", "DEL InfixExpression: >", "DEL SimpleName: cachedScore", "DEL SimpleType: SmaLatencyScoreStrategyImpl", "DEL SimpleName: strategy", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Block", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL SimpleName: getMean", "DEL SimpleName: count", "DEL SimpleType: LinkedBlockingQueue", "DEL SimpleName: LinkedBlockingQueue", "DEL SimpleName: d", "DEL SimpleName: latencies", "DEL SimpleName: update", "DEL SimpleName: cachedScore", "DEL NumberLiteral: 0.0", "DEL SimpleName: sum", "DEL SimpleName: cachedScore", "DEL ExpressionStatement", "DEL SimpleType: Long", "DEL SimpleName: Override", "DEL PrimitiveType: long", "DEL ExpressionStatement", "DEL SimpleName: strategy", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL EnhancedForStatement", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL Modifier: volatile", "DEL ParameterizedType: LinkedBlockingQueue<Long>", "DEL VariableDeclarationFragment", "DEL SimpleName: count", "DEL SimpleName: latencies", "DEL PrimitiveType: int", "DEL SimpleName: count", "DEL PrimitiveType: double", "DEL Block", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: SmaLatencyScoreStrategyImpl", "DEL ExpressionStatement", "DEL Modifier: final", "DEL MarkerAnnotation", "DEL SimpleType: LatencyScoreStrategy.Instance", "DEL SimpleName: getScore", "DEL SimpleName: sample", "DEL SimpleName: reset", "DEL SimpleName: Double", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: d", "DEL Block", "DEL SimpleName: offer", "DEL ExpressionStatement", "DEL SimpleName: sample", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SimpleName: latencies", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: private", "DEL SimpleName: Override", "DEL SimpleName: Long", "DEL SimpleType: Double", "DEL SimpleType: NoSuchElementException", "DEL PrimitiveType: long", "DEL PrimitiveType: double", "DEL Block", "DEL SimpleName: latencies", "DEL ClassInstanceCreation", "DEL SimpleName: latencies", "DEL ConditionalExpression", "DEL SimpleName: sum", "DEL Modifier: public", "DEL SimpleName: getMean", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL TryStatement", "DEL FieldDeclaration"]}]}}, {"SmaLatencyScoreStrategyInstanceImpl_diff": {"operations": ["Delete QualifiedName: com.netflix.astyanax.connectionpool.impl(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.NoSuchElementException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.concurrent.LinkedBlockingQueue(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.netflix.astyanax.connectionpool.LatencyScoreStrategy(6)", "Delete ImportDeclaration(7)", "Delete Modifier: public(8)", "Delete SimpleName: SmaLatencyScoreStrategyInstanceImpl(9)", "Delete QualifiedName: LatencyScoreStrategy.Instance(10)", "Delete SimpleType: LatencyScoreStrategy.Instance(11)", "Delete Modifier: private(12)", "Delete Modifier: final(13)", "Delete SimpleName: LinkedBlockingQueue(14)", "Delete SimpleType: LinkedBlockingQueue(15)", "Delete SimpleName: Long(16)", "Delete SimpleType: Long(17)", "Delete ParameterizedType: LinkedBlockingQueue<Long>(18)", "Delete SimpleName: latencies(19)", "Delete VariableDeclarationFragment(20)", "Delete FieldDeclaration(21)", "Delete Modifier: private(22)", "Delete Modifier: volatile(23)", "Delete SimpleName: Double(24)", "Delete SimpleType: Double(25)", "Delete SimpleName: cachedScore(26)", "Delete NumberLiteral: 0.0d(27)", "Delete VariableDeclarationFragment(28)", "Delete FieldDeclaration(29)", "Delete Modifier: public(30)", "Delete SimpleName: SmaLatencyScoreStrategyInstanceImpl(31)", "Delete SimpleName: SmaLatencyScoreStrategyImpl(32)", "Delete SimpleType: SmaLatencyScoreStrategyImpl(33)", "Delete SimpleName: strategy(34)", "Delete SingleVariableDeclaration(35)", "Delete ThisExpression(36)", "Delete SimpleName: latencies(37)", "Delete FieldAccess(38)", "Delete SimpleName: LinkedBlockingQueue(39)", "Delete SimpleType: LinkedBlockingQueue(40)", "Delete SimpleName: Long(41)", "Delete SimpleType: Long(42)", "Delete ParameterizedType: LinkedBlockingQueue<Long>(43)", "Delete SimpleName: strategy(44)", "Delete SimpleName: getWindowSize(45)", "Delete MethodInvocation(46)", "Delete ClassInstanceCreation(47)", "Delete Assignment: =(48)", "Delete ExpressionStatement(49)", "Delete Block(50)", "Delete MethodDeclaration(51)", "Delete SimpleName: Override(52)", "Delete MarkerAnnotation(53)", "Delete Modifier: public(54)", "Delete PrimitiveType: void(55)", "Delete SimpleName: addSample(56)", "Delete PrimitiveType: long(57)", "Delete SimpleName: sample(58)", "Delete SingleVariableDeclaration(59)", "Delete SimpleName: latencies(60)", "Delete SimpleName: offer(61)", "Delete SimpleName: sample(62)", "Delete MethodInvocation(63)", "Delete PrefixExpression: !(64)", "Delete SimpleName: latencies(65)", "Delete SimpleName: remove(66)", "Delete MethodInvocation(67)", "Delete ExpressionStatement(68)", "Delete Block(69)", "Delete SimpleName: NoSuchElementException(70)", "Delete SimpleType: NoSuchElementException(71)", "Delete SimpleName: e(72)", "Delete SingleVariableDeclaration(73)", "Delete Block(74)", "Delete CatchClause(75)", "Delete TryStatement(76)", "Delete SimpleName: latencies(77)", "Delete SimpleName: offer(78)", "Delete SimpleName: sample(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete Block(82)", "Delete IfStatement(83)", "Delete Block(84)", "Delete MethodDeclaration(85)", "Delete SimpleName: Override(86)", "Delete MarkerAnnotation(87)", "Delete Modifier: public(88)", "Delete PrimitiveType: double(89)", "Delete SimpleName: getScore(90)", "Delete SimpleName: cachedScore(91)", "Delete ReturnStatement(92)", "Delete Block(93)", "Delete MethodDeclaration(94)", "Delete SimpleName: Override(95)", "Delete MarkerAnnotation(96)", "Delete Modifier: public(97)", "Delete PrimitiveType: void(98)", "Delete SimpleName: reset(99)", "Delete SimpleName: latencies(100)", "Delete SimpleName: clear(101)", "Delete MethodInvocation(102)", "Delete ExpressionStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete SimpleName: Override(106)", "Delete MarkerAnnotation(107)", "Delete Modifier: public(108)", "Delete PrimitiveType: void(109)", "Delete SimpleName: update(110)", "Delete SimpleName: cachedScore(111)", "Delete SimpleName: getMean(112)", "Delete MethodInvocation(113)", "Delete Assignment: =(114)", "Delete ExpressionStatement(115)", "Delete Block(116)", "Delete MethodDeclaration(117)", "Delete SimpleName: Override(118)", "Delete MarkerAnnotation(119)", "Delete Modifier: public(120)", "Delete PrimitiveType: double(121)", "Delete SimpleName: getMean(122)", "Delete PrimitiveType: long(123)", "Delete SimpleName: sum(124)", "Delete NumberLiteral: 0(125)", "Delete VariableDeclarationFragment(126)", "Delete VariableDeclarationStatement(127)", "Delete PrimitiveType: int(128)", "Delete SimpleName: count(129)", "Delete NumberLiteral: 0(130)", "Delete VariableDeclarationFragment(131)", "Delete VariableDeclarationStatement(132)", "Delete PrimitiveType: long(133)", "Delete SimpleName: d(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: latencies(136)", "Delete SimpleName: sum(137)", "Delete SimpleName: d(138)", "Delete Assignment: +=(139)", "Delete ExpressionStatement(140)", "Delete SimpleName: count(141)", "Delete PostfixExpression: ++(142)", "Delete ExpressionStatement(143)", "Delete Block(144)", "Delete EnhancedForStatement(145)", "Delete SimpleName: count(146)", "Delete NumberLiteral: 0(147)", "Delete InfixExpression: >(148)", "Delete ParenthesizedExpression(149)", "Delete SimpleName: sum(150)", "Delete SimpleName: count(151)", "Delete InfixExpression: /(152)", "Delete NumberLiteral: 0.0(153)", "Delete ConditionalExpression(154)", "Delete ReturnStatement(155)", "Delete Block(156)", "Delete MethodDeclaration(157)", "Delete TypeDeclaration: class(158)"]}}, {"TokenAwareConnectionPoolImpl_cluster": {"actions": [{"root": "UPDATE from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "operations": ["UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>"]}, {"root": "UPDATE from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "operations": ["UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition"]}, {"root": "UPDATE from getToken to getRowKey", "operations": ["UPD SimpleName: getToken from getToken to getRowKey"]}]}}, {"TokenAwareConnectionPoolImpl_diff": {"operations": ["Update ParameterizedType: HostConnectionPoolPartition<CL>(192) to TokenHostConnectionPoolPartition<CL>", "Update SimpleType: HostConnectionPoolPartition(189) to TokenHostConnectionPoolPartition", "Update SimpleName: HostConnectionPoolPartition(188) to TokenHostConnectionPoolPartition", "Update SimpleName: getToken(197) to getRowKey"]}}, {"TokenPartitionedTopology_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: java.nio.ByteBuffer to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS ImportDeclaration to CompilationUnit at 14", "INS QualifiedName: com.google.common.collect.Maps to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS ImportDeclaration to CompilationUnit at 18", "INS QualifiedName: com.netflix.astyanax.connectionpool.TokenRange to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS ImportDeclaration to CompilationUnit at 19", "INS QualifiedName: com.netflix.astyanax.partitioner.Partitioner to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: private to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Javadoc to FieldDeclaration at 0", "INS SimpleName: partitioner to VariableDeclarationFragment at 0", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Assume random partitioner, for now to TagElement at 0", "INS SimpleType: Partitioner to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 9"]}, {"root": "UPDATE from AtomicReference<List<HostConnectionPoolPartition<CL>>> to AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>", "operations": ["UPD ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>> from AtomicReference<List<HostConnectionPoolPartition<CL>>> to AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>", "UPD ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>> from AtomicReference<List<HostConnectionPoolPartition<CL>>> to AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>"]}, {"root": "UPDATE from NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>> to NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>", "operations": ["UPD ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>> from NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>> to NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>> to FieldDeclaration at 2"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 3", "operations": ["INS SimpleName: tokenToPartitionMap to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>> to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "UPDATE from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "operations": ["UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: Partitioner to SimpleType: Partitioner at 0", "INS SimpleType: Partitioner to SingleVariableDeclaration at 0", "INS SimpleName: partitioner to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 2"]}, {"root": "MOVE from ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>>", "operations": ["MOV SimpleType: AtomicReference to ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>> at 0"]}, {"root": "UPDATE from List<HostConnectionPoolPartition<CL>> to List<TokenHostConnectionPoolPartition<CL>>", "operations": ["UPD ParameterizedType: List<HostConnectionPoolPartition<CL>> from List<HostConnectionPoolPartition<CL>> to List<TokenHostConnectionPoolPartition<CL>>", "UPD ParameterizedType: List<HostConnectionPoolPartition<CL>> from List<HostConnectionPoolPartition<CL>> to List<TokenHostConnectionPoolPartition<CL>>", "UPD ParameterizedType: List<HostConnectionPoolPartition<CL>> from List<HostConnectionPoolPartition<CL>> to List<TokenHostConnectionPoolPartition<CL>>", "UPD ParameterizedType: List<HostConnectionPoolPartition<CL>> from List<HostConnectionPoolPartition<CL>> to List<TokenHostConnectionPoolPartition<CL>>"]}, {"root": "UPDATE from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "operations": ["UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: partitioner to FieldAccess at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: partitioner to Assignment: = at 1"]}, {"root": "MOVE from ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>>", "operations": ["MOV SimpleType: BigInteger to ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>> at 1", "MOV SimpleType: Map to ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>> at 0", "MOV ParameterizedType: Collection<HostConnectionPool<CL>> to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: keySet to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 4", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: tokenHostMap to MethodInvocation at 0", "INS SimpleName: tokensToRemove to VariableDeclarationFragment at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: Sets to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS EnhancedForStatement to Block at 5", "operations": ["INS SimpleName: entrySet to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: TokenHostConnectionPoolPartition to SimpleType: TokenHostConnectionPoolPartition at 0", "INS SimpleType: TokenHostConnectionPoolPartition to ParameterizedType: TokenHostConnectionPoolPartition<CL> at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: partition to VariableDeclarationFragment at 0", "INS ParameterizedType: List<HostConnectionPool<CL>> to ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>> at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: tokenToPartitionMap to MethodInvocation at 0", "INS SimpleName: HostConnectionPool to SimpleType: HostConnectionPool at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: tokenToPartitionMap to MethodInvocation at 0", "INS SimpleName: tokenHostMap to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to EnhancedForStatement at 1", "INS ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>> to SingleVariableDeclaration at 0", "INS SimpleName: token to MethodInvocation at 2", "INS SimpleName: put to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: entry to SingleVariableDeclaration at 1", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: partition to MethodInvocation at 3", "INS ParameterizedType: HostConnectionPool<CL> to ParameterizedType: List<HostConnectionPool<CL>> at 1", "INS SimpleName: token to MethodInvocation at 2", "INS ParameterizedType: TokenHostConnectionPoolPartition<CL> to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: HostConnectionPool to ParameterizedType: HostConnectionPool<CL> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: didChange to Assignment: = at 0", "INS EnhancedForStatement to Block at 5", "INS IfStatement to Block at 3"]}, {"root": "INS SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1", "operations": ["INS SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1", "INS SimpleName: CL to SimpleType: CL at 0"]}, {"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleType: BigInteger from BigInteger to ByteBuffer", "UPD SimpleName: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from token to rowkey", "operations": ["UPD SimpleName: token from token to rowkey"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: rowkey to InfixExpression: == at 0", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: getAllPools to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: token to VariableDeclarationFragment at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: partitioner to MethodInvocation at 0", "INS SimpleName: rowkey to MethodInvocation at 2", "INS SimpleName: BigInteger to SimpleType: BigInteger at 0", "INS SimpleName: getTokenForKey to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: BigInteger to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: BigInteger to VariableDeclarationStatement at 0", "INS SimpleName: BigInteger to SimpleType: BigInteger at 0"]}, {"root": "INS SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1", "operations": ["INS SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1", "INS SimpleName: CL to SimpleType: CL at 0"]}, {"root": "MOVE from ParameterizedType: List<HostConnectionPoolPartition<CL>>", "operations": ["MOV SimpleType: List to ParameterizedType: List<HostConnectionPoolPartition<CL>> at 0"]}, {"root": "UPDATE from Lookup of start token to partition  to Lookup of end token to partition ", "operations": ["UPD TextElement: Lookup of start token to partition  from Lookup of start token to partition  to Lookup of end token to partition "]}, {"root": "INS ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: List to ParameterizedType: List<HostConnectionPool<CL>> at 0", "INS ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>> to VariableDeclarationStatement at 0", "INS SimpleName: HostConnectionPool to SimpleType: HostConnectionPool at 0", "INS SimpleName: CL to SimpleType: CL at 0", "INS SimpleType: HostConnectionPool to ParameterizedType: HostConnectionPool<CL> at 0", "INS SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1", "INS ParameterizedType: List<HostConnectionPool<CL>> to ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>> at 2", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: HostConnectionPool<CL> to ParameterizedType: List<HostConnectionPool<CL>> at 1"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "operations": ["INS SimpleName: tokenHostMap to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SimpleName: ring to EnhancedForStatement at 1", "operations": ["INS SimpleName: ring to EnhancedForStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Set<BigInteger> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>>", "operations": ["MOV SimpleType: AtomicReference to ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>> at 0"]}, {"root": "MOVE from ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>", "operations": ["MOV ParameterizedType: HostConnectionPoolPartition<CL> to ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>> at 2", "MOV SimpleType: BigInteger to ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>> at 1", "MOV SimpleType: NonBlockingHashMap to ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>> at 0"]}, {"root": "INS ParameterizedType: HostConnectionPool<CL> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: HostConnectionPool<CL> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from isEmpty to pool", "operations": ["UPD SimpleName: isEmpty from isEmpty to pool", "UPD SimpleName: entry from entry to pool"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: pool to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS IfStatement to Block at 1"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS SimpleName: getTokenRanges to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: getHost to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS EnhancedForStatement to Block at 2", "INS SimpleName: BigInteger to SimpleType: BigInteger at 0", "INS SimpleType: TokenRange to SingleVariableDeclaration at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: BigInteger to ClassInstanceCreation at 0", "INS Block to EnhancedForStatement at 2", "INS ExpressionStatement to Block at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: BigInteger to VariableDeclarationStatement at 0", "INS SimpleName: pool to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: range to SingleVariableDeclaration at 1", "INS SimpleName: BigInteger to SimpleType: BigInteger at 0", "INS SimpleName: endToken to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: TokenRange to SimpleType: TokenRange at 0", "INS SimpleName: partition to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: pool to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 1", "MOV IfStatement to Block at 4", "MOV IfStatement to Block at 2"]}, {"root": "UPDATE from tokens to tokenToPartitionMap", "operations": ["UPD SimpleName: tokens from tokens to tokenToPartitionMap", "UPD SimpleName: tokens from tokens to tokenToPartitionMap", "UPD SimpleName: tokens from tokens to tokenToPartitionMap", "UPD SimpleName: tokens from tokens to tokenToPartitionMap"]}, {"root": "INS SimpleType: List to ParameterizedType: List<HostConnectionPoolPartition<CL>> at 0", "operations": ["INS SimpleType: List to ParameterizedType: List<HostConnectionPoolPartition<CL>> at 0", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "MOVE from ParameterizedType: List<HostConnectionPoolPartition<CL>>", "operations": ["MOV SimpleType: List to ParameterizedType: List<HostConnectionPoolPartition<CL>> at 0"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "UPDATE from tokens to Maps", "operations": ["UPD SimpleName: tokens from tokens to Maps"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tokens to MethodInvocation at 0", "MOV SimpleName: keySet to MethodInvocation at 1"]}, {"root": "UPDATE from keySet to newHashMap", "operations": ["UPD SimpleName: keySet from keySet to newHashMap"]}, {"root": "MOVE from ParameterizedType: HostConnectionPool<CL>", "operations": ["MOV SimpleType: HostConnectionPool to ParameterizedType: HostConnectionPool<CL> at 0", "MOV SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>>", "operations": ["MOV SimpleType: Entry to ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>> at 0", "MOV SimpleType: BigInteger to ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>> at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "UPDATE from entry to allPools", "operations": ["UPD SimpleName: entry from entry to allPools"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getValue to MethodInvocation at 1", "MOV SimpleName: entry to MethodInvocation at 0"]}, {"root": "UPDATE from getValue to add", "operations": ["UPD SimpleName: getValue from getValue to add"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from ParameterizedType: List<HostConnectionPool<CL>>", "operations": ["MOV SimpleType: List to ParameterizedType: List<HostConnectionPool<CL>> at 0"]}, {"root": "MOVE from ParameterizedType: TokenHostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: TokenHostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from tokens to tokenHostMap", "operations": ["UPD SimpleName: tokens from tokens to tokenHostMap", "UPD SimpleName: tokens from tokens to tokenHostMap", "UPD SimpleName: tokens from tokens to tokenHostMap"]}, {"root": "MOVE from ParameterizedType: List<HostConnectionPoolPartition<CL>>", "operations": ["MOV SimpleType: List to ParameterizedType: List<HostConnectionPoolPartition<CL>> at 0"]}, {"root": "INS FieldAccess to MethodInvocation at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: allPools to FieldAccess at 1"]}, {"root": "UPDATE from getValue to hasPool", "operations": ["UPD SimpleName: getValue from getValue to hasPool"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getValue to MethodInvocation at 1"]}, {"root": "INS ParameterizedType: List<HostConnectionPool<CL>> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<HostConnectionPool<CL>> at 0", "INS ParameterizedType: List<HostConnectionPool<CL>> to VariableDeclarationStatement at 0", "INS ParameterizedType: HostConnectionPool<CL> to ParameterizedType: List<HostConnectionPool<CL>> at 1"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS SimpleName: partition to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from ParameterizedType: HostConnectionPool<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: partition to Assignment: = at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from HostConnectionPoolPartition to HostConnectionPool", "operations": ["UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to HostConnectionPool", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to HostConnectionPool"]}, {"root": "MOVE from ParameterizedType: HostConnectionPool<CL>", "operations": ["MOV SimpleType: HostConnectionPoolPartition to ParameterizedType: HostConnectionPool<CL> at 0", "MOV SimpleType: CL to ParameterizedType: HostConnectionPool<CL> at 1"]}, {"root": "UPDATE from token to endToken", "operations": ["UPD SimpleName: token from token to endToken", "UPD SimpleName: token from token to endToken"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "MOVE from ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["MOV SimpleType: CL to ParameterizedType: HostConnectionPoolPartition<CL> at 1"]}, {"root": "UPDATE from entry to range", "operations": ["UPD SimpleName: entry from entry to range"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getValue to MethodInvocation at 1", "MOV SimpleName: entry to MethodInvocation at 0"]}, {"root": "UPDATE from getValue to getEndToken", "operations": ["UPD SimpleName: getValue from getValue to getEndToken"]}, {"root": "DEL ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>>", "operations": ["DEL ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>>"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: tokens", "DEL ClassInstanceCreation"]}, {"root": "DEL ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>", "operations": ["DEL ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: tokensToRemove", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Sets", "DEL SimpleName: newHashSet"]}, {"root": "DEL ParameterizedType: Entry<BigInteger,Collection<HostConnectionPool<CL>>>", "operations": ["DEL SimpleName: Collection", "DEL ParameterizedType: Entry<BigInteger,Collection<HostConnectionPool<CL>>>", "DEL ParameterizedType: HostConnectionPool<CL>", "DEL SimpleType: Collection", "DEL ParameterizedType: Collection<HostConnectionPool<CL>>"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: entrySet", "DEL SimpleName: ring"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: entry"]}, {"root": "DEL ParameterizedType: HostConnectionPoolPartition<CL>", "operations": ["DEL ParameterizedType: HostConnectionPoolPartition<CL>"]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: allPools", "DEL MethodInvocation", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: addAll"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: refresh", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: allPools", "DEL ExpressionStatement", "DEL SimpleName: refresh", "DEL MethodInvocation"]}]}}, {"TokenPartitionedTopology_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(945) at 2", "Insert ImportDeclaration(29) into CompilationUnit(945) at 14", "Insert ImportDeclaration(37) into CompilationUnit(945) at 18", "Insert ImportDeclaration(39) into CompilationUnit(945) at 19", "Insert QualifiedName: java.nio.ByteBuffer(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: com.google.common.collect.Maps(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: com.netflix.astyanax.connectionpool.TokenRange(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: com.netflix.astyanax.partitioner.Partitioner(38) into ImportDeclaration(39) at 0", "Insert FieldDeclaration(147) into TypeDeclaration: class(944) at 9", "Update ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>>(65) to AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>", "Update ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>>(105) to NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>", "Move ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>>(105) into FieldDeclaration(116) at 2", "Insert VariableDeclarationFragment(115) into FieldDeclaration(116) at 3", "Update ParameterizedType: HostConnectionPoolPartition<CL>(117) to TokenHostConnectionPoolPartition<CL>", "Insert Javadoc(140) into FieldDeclaration(147) at 0", "Insert Modifier: private(141) into FieldDeclaration(147) at 1", "Insert Modifier: final(142) into FieldDeclaration(147) at 2", "Insert SimpleType: Partitioner(144) into FieldDeclaration(147) at 3", "Insert VariableDeclarationFragment(146) into FieldDeclaration(147) at 4", "Insert SingleVariableDeclaration(291) into MethodDeclaration(324) at 2", "Update ParameterizedType: HostConnectionPoolPartition<CL>(302) to TokenHostConnectionPoolPartition<CL>", "Move VariableDeclarationStatement(356) into Block(645) at 3", "Move VariableDeclarationStatement(370) into Block(645) at 2", "Move EnhancedForStatement(597) into Block(709) at 2", "Update ParameterizedType: HostConnectionPoolPartition<CL>(611) to TokenHostConnectionPoolPartition<CL>", "Update ParameterizedType: HostConnectionPoolPartition<CL>(693) to TokenHostConnectionPoolPartition<CL>", "Move SimpleType: AtomicReference(68) into ParameterizedType: AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>(73) at 0", "Update ParameterizedType: List<HostConnectionPoolPartition<CL>>(64) to List<TokenHostConnectionPoolPartition<CL>>", "Update ParameterizedType: HostConnectionPoolPartition<CL>(104) to TokenHostConnectionPoolPartition<CL>", "Insert SimpleName: tokenToPartitionMap(103) into VariableDeclarationFragment(115) at 0", "Insert ClassInstanceCreation(114) into VariableDeclarationFragment(115) at 1", "Update SimpleType: HostConnectionPoolPartition(114) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(62) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(125) at 1", "Insert TagElement(139) into Javadoc(140) at 0", "Insert SimpleName: Partitioner(143) into SimpleType: Partitioner(144) at 0", "Insert SimpleName: partitioner(145) into VariableDeclarationFragment(146) at 0", "Insert SimpleType: Partitioner(289) into SingleVariableDeclaration(291) at 0", "Insert SimpleName: partitioner(290) into SingleVariableDeclaration(291) at 1", "Insert ExpressionStatement(307) into Block(323) at 1", "Update SimpleType: HostConnectionPoolPartition(299) to TokenHostConnectionPoolPartition", "Move ParameterizedType: Collection<HostConnectionPool<CL>>(339) into SingleVariableDeclaration(365) at 0", "Insert VariableDeclarationStatement(503) into Block(645) at 4", "Insert EnhancedForStatement(580) into Block(645) at 5", "Update SimpleType: HostConnectionPoolPartition(608) to TokenHostConnectionPoolPartition", "Insert SimpleType: CL(717) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(718) at 1", "Update SimpleType: BigInteger(614) to ByteBuffer", "Update SimpleName: token(615) to rowkey", "Insert IfStatement(730) into Block(810) at 0", "Insert VariableDeclarationStatement(742) into Block(810) at 1", "Update SimpleType: HostConnectionPoolPartition(690) to TokenHostConnectionPoolPartition", "Insert SimpleType: CL(818) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(819) at 1", "Move SimpleType: List(70) into ParameterizedType: List<TokenHostConnectionPoolPartition<CL>>(72) at 0", "Update ParameterizedType: HostConnectionPoolPartition<CL>(63) to TokenHostConnectionPoolPartition<CL>", "Update ParameterizedType: AtomicReference<List<HostConnectionPoolPartition<CL>>>(77) to AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>", "Update TextElement: Lookup of start token to partition (81) to Lookup of end token to partition ", "Update SimpleType: HostConnectionPoolPartition(101) to TokenHostConnectionPoolPartition", "Insert ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>(113) into ClassInstanceCreation(114) at 0", "Update SimpleName: HostConnectionPoolPartition(113) to TokenHostConnectionPoolPartition", "Insert TextElement: Assume random partitioner, for now(138) into TagElement(139) at 0", "Insert SimpleName: Partitioner(288) into SimpleType: Partitioner(289) at 0", "Insert Assignment: =(306) into ExpressionStatement(307) at 0", "Update SimpleName: HostConnectionPoolPartition(298) to TokenHostConnectionPoolPartition", "Insert ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>>(397) into VariableDeclarationStatement(403) at 0", "Insert VariableDeclarationFragment(402) into VariableDeclarationStatement(403) at 1", "Insert SimpleName: ring(411) into EnhancedForStatement(489) at 1", "Move ParameterizedType: Set<BigInteger>(347) into VariableDeclarationStatement(503) at 0", "Insert VariableDeclarationFragment(502) into VariableDeclarationStatement(503) at 1", "Insert SingleVariableDeclaration(518) into EnhancedForStatement(580) at 0", "Insert MethodInvocation(521) into EnhancedForStatement(580) at 1", "Insert Block(579) into EnhancedForStatement(580) at 2", "Update SimpleName: HostConnectionPoolPartition(607) to TokenHostConnectionPoolPartition", "Insert SimpleName: CL(716) into SimpleType: CL(717) at 0", "Update SimpleName: BigInteger(613) to ByteBuffer", "Insert InfixExpression: ==(726) into IfStatement(730) at 0", "Insert ReturnStatement(729) into IfStatement(730) at 1", "Insert SimpleType: BigInteger(732) into VariableDeclarationStatement(742) at 0", "Insert VariableDeclarationFragment(741) into VariableDeclarationStatement(742) at 1", "Update ParameterizedType: List<HostConnectionPoolPartition<CL>>(624) to List<TokenHostConnectionPoolPartition<CL>>", "Update SimpleName: HostConnectionPoolPartition(689) to TokenHostConnectionPoolPartition", "Insert SimpleName: CL(817) into SimpleType: CL(818) at 0", "Update SimpleType: HostConnectionPoolPartition(60) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(74) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(71) at 1", "Move SimpleType: AtomicReference(56) into ParameterizedType: AtomicReference<List<TokenHostConnectionPoolPartition<CL>>>(85) at 0", "Update ParameterizedType: List<HostConnectionPoolPartition<CL>>(76) to List<TokenHostConnectionPoolPartition<CL>>", "Update SimpleName: HostConnectionPoolPartition(100) to TokenHostConnectionPoolPartition", "Move SimpleType: NonBlockingHashMap(86) into ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>(113) at 0", "Move SimpleType: BigInteger(88) into ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>(113) at 1", "Update ParameterizedType: HostConnectionPoolPartition<CL>(93) to TokenHostConnectionPoolPartition<CL>", "Move ParameterizedType: HostConnectionPoolPartition<CL>(93) into ParameterizedType: NonBlockingHashMap<BigInteger,TokenHostConnectionPoolPartition<CL>>(113) at 2", "Insert FieldAccess(304) into Assignment: =(306) at 0", "Insert SimpleName: partitioner(305) into Assignment: =(306) at 1", "Update ParameterizedType: HostConnectionPoolPartition<CL>(312) to TokenHostConnectionPoolPartition<CL>", "Move SimpleType: Map(329) into ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>>(397) at 0", "Move SimpleType: BigInteger(331) into ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>>(397) at 1", "Insert ParameterizedType: List<HostConnectionPool<CL>>(396) into ParameterizedType: Map<BigInteger,List<HostConnectionPool<CL>>>(397) at 2", "Insert SimpleName: tokenHostMap(398) into VariableDeclarationFragment(402) at 0", "Insert MethodInvocation(401) into VariableDeclarationFragment(402) at 1", "Insert ParameterizedType: HostConnectionPool<CL>(408) into SingleVariableDeclaration(410) at 0", "Update SimpleName: entry(389) to pool", "Insert ExpressionStatement(416) into Block(488) at 0", "Insert IfStatement(428) into Block(488) at 1", "Insert EnhancedForStatement(487) into Block(488) at 2", "Insert SimpleName: tokensToRemove(495) into VariableDeclarationFragment(502) at 0", "Insert MethodInvocation(501) into VariableDeclarationFragment(502) at 1", "Insert ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>>(516) into SingleVariableDeclaration(518) at 0", "Insert SimpleName: entry(517) into SingleVariableDeclaration(518) at 1", "Insert SimpleName: tokenHostMap(519) into MethodInvocation(521) at 0", "Insert SimpleName: entrySet(520) into MethodInvocation(521) at 1", "Move VariableDeclarationStatement(401) into Block(579) at 0", "Move ExpressionStatement(418) into Block(579) at 1", "Insert VariableDeclarationStatement(546) into Block(579) at 2", "Insert IfStatement(567) into Block(579) at 3", "Move IfStatement(469) into Block(579) at 4", "Update ParameterizedType: HostConnectionPoolPartition<CL>(586) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: tokens(589) to tokenToPartitionMap", "Insert SimpleName: rowkey(724) into InfixExpression: ==(726) at 0", "Insert NullLiteral(725) into InfixExpression: ==(726) at 1", "Insert MethodInvocation(728) into ReturnStatement(729) at 0", "Insert SimpleName: BigInteger(731) into SimpleType: BigInteger(732) at 0", "Insert SimpleName: token(733) into VariableDeclarationFragment(741) at 0", "Insert ClassInstanceCreation(740) into VariableDeclarationFragment(741) at 1", "Insert SimpleType: List(744) into ParameterizedType: List<TokenHostConnectionPoolPartition<CL>>(750) at 0", "Update ParameterizedType: HostConnectionPoolPartition<CL>(623) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: tokens(704) to tokenToPartitionMap", "Update ParameterizedType: HostConnectionPoolPartition<CL>(732) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: tokens(735) to tokenToPartitionMap", "Update SimpleName: HostConnectionPoolPartition(59) to TokenHostConnectionPoolPartition", "Move SimpleType: List(58) into ParameterizedType: List<TokenHostConnectionPoolPartition<CL>>(84) at 0", "Update ParameterizedType: HostConnectionPoolPartition<CL>(75) to TokenHostConnectionPoolPartition<CL>", "Update SimpleType: HostConnectionPoolPartition(90) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(116) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(112) at 1", "Insert ThisExpression(302) into FieldAccess(304) at 0", "Insert SimpleName: partitioner(303) into FieldAccess(304) at 1", "Update ParameterizedType: HostConnectionPoolPartition<CL>(287) to TokenHostConnectionPoolPartition<CL>", "Update SimpleType: HostConnectionPoolPartition(309) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(226) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(340) at 1", "Insert SimpleType: List(390) into ParameterizedType: List<HostConnectionPool<CL>>(396) at 0", "Insert ParameterizedType: HostConnectionPool<CL>(395) into ParameterizedType: List<HostConnectionPool<CL>>(396) at 1", "Update SimpleName: tokens(351) to Maps", "Move SimpleName: tokens(351) into MethodInvocation(401) at 0", "Update SimpleName: keySet(352) to newHashMap", "Move SimpleName: keySet(352) into MethodInvocation(401) at 1", "Move SimpleType: HostConnectionPool(383) into ParameterizedType: HostConnectionPool<CL>(408) at 0", "Move SimpleType: CL(385) into ParameterizedType: HostConnectionPool<CL>(408) at 1", "Insert MethodInvocation(415) into ExpressionStatement(416) at 0", "Insert PrefixExpression: !(423) into IfStatement(428) at 0", "Move ExpressionStatement(428) into IfStatement(428) at 1", "Insert SingleVariableDeclaration(432) into EnhancedForStatement(487) at 0", "Insert MethodInvocation(437) into EnhancedForStatement(487) at 1", "Insert Block(486) into EnhancedForStatement(487) at 2", "Insert SimpleName: Sets(496) into MethodInvocation(501) at 0", "Insert SimpleName: newHashSet(497) into MethodInvocation(501) at 1", "Insert MethodInvocation(500) into MethodInvocation(501) at 2", "Move SimpleType: Entry(377) into ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>>(516) at 0", "Move SimpleType: BigInteger(379) into ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>>(516) at 1", "Insert ParameterizedType: List<HostConnectionPool<CL>>(515) into ParameterizedType: Entry<BigInteger,List<HostConnectionPool<CL>>>(516) at 2", "Insert ParameterizedType: TokenHostConnectionPoolPartition<CL>(539) into VariableDeclarationStatement(546) at 0", "Insert VariableDeclarationFragment(545) into VariableDeclarationStatement(546) at 1", "Move InfixExpression: ==(444) into IfStatement(567) at 0", "Insert Block(566) into IfStatement(567) at 1", "Update ParameterizedType: List<HostConnectionPoolPartition<CL>>(498) to List<TokenHostConnectionPoolPartition<CL>>", "Update SimpleType: HostConnectionPoolPartition(583) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(692) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(697) at 1", "Insert SimpleName: getAllPools(727) into MethodInvocation(728) at 0", "Insert SimpleType: BigInteger(735) into ClassInstanceCreation(740) at 0", "Insert MethodInvocation(739) into ClassInstanceCreation(740) at 1", "Insert SimpleName: List(743) into SimpleType: List(744) at 0", "Update SimpleType: HostConnectionPoolPartition(620) to TokenHostConnectionPoolPartition", "Update SimpleType: HostConnectionPoolPartition(729) to TokenHostConnectionPoolPartition", "Update SimpleType: HostConnectionPoolPartition(72) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(92) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(83) at 1", "Update SimpleName: HostConnectionPoolPartition(89) to TokenHostConnectionPoolPartition", "Update SimpleType: HostConnectionPoolPartition(284) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(311) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(315) at 1", "Update SimpleName: HostConnectionPoolPartition(308) to TokenHostConnectionPoolPartition", "Insert SimpleName: List(389) into SimpleType: List(390) at 0", "Insert SimpleType: HostConnectionPool(392) into ParameterizedType: HostConnectionPool<CL>(395) at 0", "Insert SimpleType: CL(394) into ParameterizedType: HostConnectionPool<CL>(395) at 1", "Update SimpleName: entry(402) to allPools", "Move SimpleName: entry(402) into MethodInvocation(415) at 0", "Update SimpleName: getValue(403) to add", "Move SimpleName: getValue(403) into MethodInvocation(415) at 1", "Insert SimpleName: pool(414) into MethodInvocation(415) at 2", "Move MethodInvocation(411) into PrefixExpression: !(423) at 0", "Insert SimpleType: TokenRange(430) into SingleVariableDeclaration(432) at 0", "Insert SimpleName: range(431) into SingleVariableDeclaration(432) at 1", "Insert MethodInvocation(435) into MethodInvocation(437) at 0", "Insert SimpleName: getTokenRanges(436) into MethodInvocation(437) at 1", "Insert VariableDeclarationStatement(448) into Block(486) at 0", "Move VariableDeclarationStatement(441) into Block(486) at 1", "Move IfStatement(458) into Block(486) at 2", "Insert ExpressionStatement(485) into Block(486) at 3", "Insert SimpleName: tokenHostMap(498) into MethodInvocation(500) at 0", "Insert SimpleName: keySet(499) into MethodInvocation(500) at 1", "Move SimpleType: List(492) into ParameterizedType: List<HostConnectionPool<CL>>(515) at 0", "Insert ParameterizedType: HostConnectionPool<CL>(514) into ParameterizedType: List<HostConnectionPool<CL>>(515) at 1", "Insert SimpleType: TokenHostConnectionPoolPartition(536) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(539) at 0", "Move SimpleType: CL(585) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(539) at 1", "Insert SimpleName: partition(540) into VariableDeclarationFragment(545) at 0", "Insert MethodInvocation(544) into VariableDeclarationFragment(545) at 1", "Move ExpressionStatement(450) into Block(566) at 0", "Insert ExpressionStatement(561) into Block(566) at 1", "Insert ExpressionStatement(565) into Block(566) at 2", "Update SimpleName: tokens(479) to tokenHostMap", "Move SimpleType: List(618) into ParameterizedType: List<TokenHostConnectionPoolPartition<CL>>(605) at 0", "Update ParameterizedType: HostConnectionPoolPartition<CL>(497) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: HostConnectionPoolPartition(582) to TokenHostConnectionPoolPartition", "Insert SimpleName: BigInteger(734) into SimpleType: BigInteger(735) at 0", "Insert SimpleName: partitioner(736) into MethodInvocation(739) at 0", "Insert SimpleName: getTokenForKey(737) into MethodInvocation(739) at 1", "Insert SimpleName: rowkey(738) into MethodInvocation(739) at 2", "Update SimpleName: HostConnectionPoolPartition(619) to TokenHostConnectionPoolPartition", "Update SimpleName: HostConnectionPoolPartition(728) to TokenHostConnectionPoolPartition", "Update SimpleName: HostConnectionPoolPartition(71) to TokenHostConnectionPoolPartition", "Update ParameterizedType: HostConnectionPoolPartition<CL>(162) to TokenHostConnectionPoolPartition<CL>", "Update ParameterizedType: HostConnectionPoolPartition<CL>(227) to TokenHostConnectionPoolPartition<CL>", "Update ParameterizedType: HostConnectionPoolPartition<CL>(242) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: HostConnectionPoolPartition(283) to TokenHostConnectionPoolPartition", "Insert SimpleName: HostConnectionPool(391) into SimpleType: HostConnectionPool(392) at 0", "Insert SimpleName: CL(393) into SimpleType: CL(394) at 0", "Insert FieldAccess(419) into MethodInvocation(422) at 0", "Update SimpleName: getValue(408) to hasPool", "Move SimpleName: getValue(408) into MethodInvocation(422) at 1", "Update SimpleName: isEmpty(410) to pool", "Insert SimpleName: TokenRange(429) into SimpleType: TokenRange(430) at 0", "Insert SimpleName: pool(433) into MethodInvocation(435) at 0", "Insert SimpleName: getHost(434) into MethodInvocation(435) at 1", "Insert SimpleType: BigInteger(439) into VariableDeclarationStatement(448) at 0", "Insert VariableDeclarationFragment(447) into VariableDeclarationStatement(448) at 1", "Insert ParameterizedType: List<HostConnectionPool<CL>>(456) into VariableDeclarationStatement(463) at 0", "Insert InfixExpression: ==(466) into IfStatement(480) at 0", "Insert MethodInvocation(484) into ExpressionStatement(485) at 0", "Insert SimpleType: HostConnectionPool(511) into ParameterizedType: HostConnectionPool<CL>(514) at 0", "Move SimpleType: CL(496) into ParameterizedType: HostConnectionPool<CL>(514) at 1", "Insert SimpleName: TokenHostConnectionPoolPartition(535) into SimpleType: TokenHostConnectionPoolPartition(536) at 0", "Insert SimpleName: tokenToPartitionMap(541) into MethodInvocation(544) at 0", "Insert SimpleName: get(542) into MethodInvocation(544) at 1", "Insert SimpleName: token(543) into MethodInvocation(544) at 2", "Insert MethodInvocation(560) into ExpressionStatement(561) at 0", "Insert Assignment: =(564) into ExpressionStatement(565) at 0", "Update SimpleType: HostConnectionPoolPartition(494) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(610) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(604) at 1", "Update SimpleType: HostConnectionPoolPartition(159) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(167) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(180) at 1", "Update SimpleType: HostConnectionPoolPartition(224) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(241) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(245) at 1", "Update SimpleType: HostConnectionPoolPartition(239) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(232) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(260) at 1", "Insert ThisExpression(417) into FieldAccess(419) at 0", "Insert SimpleName: allPools(418) into FieldAccess(419) at 1", "Insert SimpleName: BigInteger(438) into SimpleType: BigInteger(439) at 0", "Insert SimpleName: endToken(440) into VariableDeclarationFragment(447) at 0", "Insert ClassInstanceCreation(446) into VariableDeclarationFragment(447) at 1", "Insert SimpleType: List(450) into ParameterizedType: List<HostConnectionPool<CL>>(456) at 0", "Insert ParameterizedType: HostConnectionPool<CL>(455) into ParameterizedType: List<HostConnectionPool<CL>>(456) at 1", "Insert SimpleName: partition(464) into InfixExpression: ==(466) at 0", "Insert NullLiteral(465) into InfixExpression: ==(466) at 1", "Insert ExpressionStatement(472) into Block(479) at 0", "Insert SimpleName: partition(481) into MethodInvocation(484) at 0", "Insert SimpleName: add(482) into MethodInvocation(484) at 1", "Insert SimpleName: pool(483) into MethodInvocation(484) at 2", "Insert SimpleName: HostConnectionPool(510) into SimpleType: HostConnectionPool(511) at 0", "Insert SimpleName: tokenToPartitionMap(556) into MethodInvocation(560) at 0", "Insert SimpleName: put(557) into MethodInvocation(560) at 1", "Insert SimpleName: token(558) into MethodInvocation(560) at 2", "Insert SimpleName: partition(559) into MethodInvocation(560) at 3", "Insert SimpleName: didChange(562) into Assignment: =(564) at 0", "Insert BooleanLiteral: true(563) into Assignment: =(564) at 1", "Update SimpleName: HostConnectionPoolPartition(493) to TokenHostConnectionPoolPartition", "Update SimpleName: tokens(502) to tokenToPartitionMap", "Update SimpleName: HostConnectionPoolPartition(158) to TokenHostConnectionPoolPartition", "Update ParameterizedType: HostConnectionPoolPartition<CL>(168) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: HostConnectionPoolPartition(223) to TokenHostConnectionPoolPartition", "Update ParameterizedType: HostConnectionPoolPartition<CL>(233) to TokenHostConnectionPoolPartition<CL>", "Update SimpleName: HostConnectionPoolPartition(238) to TokenHostConnectionPoolPartition", "Update ParameterizedType: HostConnectionPoolPartition<CL>(248) to TokenHostConnectionPoolPartition<CL>", "Insert SimpleType: BigInteger(442) into ClassInstanceCreation(446) at 0", "Insert MethodInvocation(445) into ClassInstanceCreation(446) at 1", "Insert SimpleName: List(449) into SimpleType: List(450) at 0", "Update SimpleType: HostConnectionPoolPartition(431) to HostConnectionPool", "Move SimpleType: HostConnectionPoolPartition(431) into ParameterizedType: HostConnectionPool<CL>(455) at 0", "Move SimpleType: CL(433) into ParameterizedType: HostConnectionPool<CL>(455) at 1", "Update SimpleName: tokens(436) to tokenHostMap", "Update SimpleName: token(438) to endToken", "Insert Assignment: =(471) into ExpressionStatement(472) at 0", "Update SimpleType: HostConnectionPoolPartition(165) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(161) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(186) at 1", "Update SimpleType: HostConnectionPoolPartition(230) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(247) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(251) at 1", "Update SimpleType: HostConnectionPoolPartition(245) to TokenHostConnectionPoolPartition", "Move SimpleType: CL(286) into ParameterizedType: TokenHostConnectionPoolPartition<CL>(266) at 1", "Insert SimpleName: BigInteger(441) into SimpleType: BigInteger(442) at 0", "Update SimpleName: entry(421) to range", "Move SimpleName: entry(421) into MethodInvocation(445) at 0", "Update SimpleName: getValue(422) to getEndToken", "Move SimpleName: getValue(422) into MethodInvocation(445) at 1", "Update SimpleName: HostConnectionPoolPartition(430) to HostConnectionPool", "Insert SimpleName: partition(467) into Assignment: =(471) at 0", "Insert MethodInvocation(470) into Assignment: =(471) at 1", "Update SimpleName: tokens(451) to tokenHostMap", "Update SimpleName: token(453) to endToken", "Update SimpleName: HostConnectionPoolPartition(164) to TokenHostConnectionPoolPartition", "Update SimpleName: HostConnectionPoolPartition(229) to TokenHostConnectionPoolPartition", "Update SimpleName: HostConnectionPoolPartition(244) to TokenHostConnectionPoolPartition", "Insert SimpleName: Lists(468) into MethodInvocation(470) at 0", "Insert SimpleName: newArrayList(469) into MethodInvocation(470) at 1", "Delete ParameterizedType: NonBlockingHashMap<BigInteger,HostConnectionPoolPartition<CL>>(94)", "Delete SimpleName: tokens(95)", "Delete ClassInstanceCreation(106)", "Delete VariableDeclarationFragment(107)", "Delete ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>(340)", "Delete SimpleName: tokensToRemove(348)", "Delete SimpleName: Sets(349)", "Delete SimpleName: newHashSet(350)", "Delete MethodInvocation(353)", "Delete MethodInvocation(354)", "Delete VariableDeclarationFragment(355)", "Delete SimpleName: Collection(380)", "Delete SimpleType: Collection(381)", "Delete ParameterizedType: HostConnectionPool<CL>(386)", "Delete ParameterizedType: Collection<HostConnectionPool<CL>>(387)", "Delete ParameterizedType: Entry<BigInteger,Collection<HostConnectionPool<CL>>>(388)", "Delete SimpleName: ring(391)", "Delete SimpleName: entrySet(392)", "Delete MethodInvocation(393)", "Delete SimpleName: entry(407)", "Delete MethodInvocation(409)", "Delete ParameterizedType: HostConnectionPoolPartition<CL>(434)", "Delete MethodInvocation(404)", "Delete NullLiteral(405)", "Delete InfixExpression: !=(406)", "Delete PrefixExpression: !(412)", "Delete InfixExpression: &&(413)", "Delete SimpleName: allPools(419)", "Delete SimpleName: addAll(420)", "Delete MethodInvocation(423)", "Delete MethodInvocation(424)", "Delete IfStatement(429)", "Delete Block(470)", "Delete IfStatement(471)", "Delete SimpleName: refresh(745)", "Delete MethodInvocation(746)", "Delete ExpressionStatement(747)", "Delete SimpleName: allPools(768)", "Delete SimpleName: refresh(769)", "Delete MethodInvocation(770)", "Delete ExpressionStatement(771)"]}}, {"TokenRangeImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: com.google.common.collect.Lists to ImportDeclaration at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Lists to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: endpoints to InfixExpression: != at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS ExpressionStatement to IfStatement at 2", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: endpoints to FieldAccess at 1", "INS MethodInvocation to Assignment: = at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 1"]}]}}, {"TokenRangeImpl_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(159) at 3", "Insert QualifiedName: com.google.common.collect.Lists(18) into ImportDeclaration(19) at 0", "Insert IfStatement(99) into Block(100) at 2", "Insert InfixExpression: !=(81) into IfStatement(99) at 0", "Move ExpressionStatement(85) into IfStatement(99) at 1", "Insert ExpressionStatement(98) into IfStatement(99) at 2", "Insert SimpleName: endpoints(79) into InfixExpression: !=(81) at 0", "Insert NullLiteral(80) into InfixExpression: !=(81) at 1", "Insert Assignment: =(97) into ExpressionStatement(98) at 0", "Insert FieldAccess(93) into Assignment: =(97) at 0", "Insert MethodInvocation(96) into Assignment: =(97) at 1", "Insert ThisExpression(91) into FieldAccess(93) at 0", "Insert SimpleName: endpoints(92) into FieldAccess(93) at 1", "Insert SimpleName: Lists(94) into MethodInvocation(96) at 0", "Insert SimpleName: newArrayList(95) into MethodInvocation(96) at 1"]}}, {"Topology_cluster": {"actions": [{"root": "UPDATE from java.math.BigInteger to java.nio.ByteBuffer", "operations": ["UPD QualifiedName: java.math.BigInteger from java.math.BigInteger to java.nio.ByteBuffer"]}, {"root": "UPDATE from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "operations": ["UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>", "UPD ParameterizedType: HostConnectionPoolPartition<CL> from HostConnectionPoolPartition<CL> to TokenHostConnectionPoolPartition<CL>"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Collection<HostConnectionPool<CL>> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "operations": ["UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleType: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition", "UPD SimpleName: HostConnectionPoolPartition from HostConnectionPoolPartition to TokenHostConnectionPoolPartition"]}, {"root": "UPDATE from BigInteger to ByteBuffer", "operations": ["UPD SimpleName: BigInteger from BigInteger to ByteBuffer", "UPD SimpleType: BigInteger from BigInteger to ByteBuffer"]}, {"root": "UPDATE from token to rowkey", "operations": ["UPD SimpleName: token from token to rowkey"]}, {"root": "UPDATE from Add a pool without knowing it's token. This pool will be added to the all to Add a pool without knowing its token. This pool will be added to the all", "operations": ["UPD TextElement: Add a pool without knowing it's token. This pool will be added to the all from Add a pool without knowing it's token. This pool will be added to the all to Add a pool without knowing its token. This pool will be added to the all"]}, {"root": "UPDATE from Search for the partition that owns this token to Get the partition best suited to handle a row key", "operations": ["UPD TextElement: Search for the partition that owns this token from Search for the partition that owns this token to Get the partition best suited to handle a row key"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>", "operations": ["DEL SimpleType: Map", "DEL ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>", "DEL SimpleName: BigInteger", "DEL SimpleName: Map", "DEL SimpleType: BigInteger"]}]}}, {"Topology_diff": {"operations": ["Update QualifiedName: java.math.BigInteger(2) to java.nio.ByteBuffer", "Update ParameterizedType: HostConnectionPoolPartition<CL>(115) to TokenHostConnectionPoolPartition<CL>", "Update ParameterizedType: HostConnectionPoolPartition<CL>(130) to TokenHostConnectionPoolPartition<CL>", "Move ParameterizedType: Collection<HostConnectionPool<CL>>(33) into SingleVariableDeclaration(29) at 0", "Update SimpleType: HostConnectionPoolPartition(112) to TokenHostConnectionPoolPartition", "Update SimpleType: BigInteger(118) to ByteBuffer", "Update SimpleName: token(119) to rowkey", "Update SimpleType: HostConnectionPoolPartition(127) to TokenHostConnectionPoolPartition", "Update TextElement: Add a pool without knowing it's token. This pool will be added to the all(38) to Add a pool without knowing its token. This pool will be added to the all", "Update TextElement: Search for the partition that owns this token(105) to Get the partition best suited to handle a row key", "Update SimpleName: HostConnectionPoolPartition(111) to TokenHostConnectionPoolPartition", "Update SimpleName: BigInteger(117) to ByteBuffer", "Update SimpleName: HostConnectionPoolPartition(126) to TokenHostConnectionPoolPartition", "Delete QualifiedName: java.util.Map(6)", "Delete ImportDeclaration(7)", "Delete SimpleName: Map(22)", "Delete SimpleType: Map(23)", "Delete SimpleName: BigInteger(24)", "Delete SimpleType: BigInteger(25)", "Delete ParameterizedType: Map<BigInteger,Collection<HostConnectionPool<CL>>>(34)"]}}, {"AllRowsReader_cluster": {"actions": [{"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: BigInteger127Partitioner to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: BigInteger127Partitioner", "DEL SimpleName: BigInteger127Partitioner", "DEL ClassInstanceCreation"]}]}}, {"AllRowsReader_diff": {"operations": ["Insert MethodInvocation(102) into VariableDeclarationFragment(103) at 1", "Insert SimpleName: BigInteger127Partitioner(100) into MethodInvocation(102) at 0", "Insert SimpleName: get(101) into MethodInvocation(102) at 1", "Delete SimpleName: BigInteger127Partitioner(100)", "Delete SimpleType: BigInteger127Partitioner(101)", "Delete ClassInstanceCreation(102)"]}}], "commit_stats": [{"total_files": 64, "deleted_files": 1, "testing": "True", "maintenance": "True", "build": "False"}]}