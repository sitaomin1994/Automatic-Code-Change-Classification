{"application": "apache-commons-dbcp", "csha": "fee5cc302a833fca4b78ed86747f2e44756aa7a4", "files": [{"PStmtKey_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from that to obj", "operations": ["UPD SimpleName: that from that to obj", "UPD SimpleName: that from that to obj"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS ThisExpression to InfixExpression: == at 0", "INS IfStatement to Block at 0", "INS SimpleName: obj to InfixExpression: == at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: obj to InfixExpression: == at 0", "INS IfStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS MethodInvocation to InfixExpression: != at 0", "INS MethodInvocation to InfixExpression: != at 1", "INS SimpleName: getClass to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 2", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: obj to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS NumberLiteral: 31 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS SimpleName: prime to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS NumberLiteral: 0 to ConditionalExpression at 1", "INS SimpleName: result to InfixExpression: * at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 2", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS InfixExpression: + to Assignment: = at 1", "INS InfixExpression: * to InfixExpression: + at 0", "INS SimpleName: prime to InfixExpression: * at 0", "INS SimpleName: result to Assignment: = at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: result to Assignment: = at 0", "INS NumberLiteral: 0 to ConditionalExpression at 1", "INS SimpleName: _resultSetConcurrency to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: * to InfixExpression: + at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: prime to InfixExpression: * at 0", "INS SimpleName: result to InfixExpression: * at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: _resultSetConcurrency to MethodInvocation at 0", "INS InfixExpression: + to Assignment: = at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: hashCode to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: + at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: result to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS SimpleName: prime to InfixExpression: * at 0", "INS ExpressionStatement to Block at 4", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: result to InfixExpression: * at 1", "INS InfixExpression: * to InfixExpression: + at 0"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: result to InfixExpression: * at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: result to Assignment: = at 0", "INS SimpleName: prime to InfixExpression: * at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS InfixExpression: + to Assignment: = at 1", "INS ExpressionStatement to Block at 5", "INS InfixExpression: * to InfixExpression: + at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ParenthesizedExpression to InfixExpression: + at 1", "INS NullLiteral to InfixExpression: == at 1", "INS NumberLiteral: 0 to ConditionalExpression at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS SimpleName: result to InfixExpression: * at 1", "INS SimpleName: result to Assignment: = at 0", "INS InfixExpression: * to InfixExpression: + at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: + to Assignment: = at 1", "INS ExpressionStatement to Block at 6"]}, {"root": "INS ReturnStatement to Block at 7", "operations": ["INS SimpleName: result to ReturnStatement at 0", "INS ReturnStatement to Block at 7"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ReturnStatement to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PStmtKey to VariableDeclarationStatement at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: PStmtKey to CastExpression at 0"]}, {"root": "UPDATE from _sql to _stmtType", "operations": ["UPD SimpleName: _sql from _sql to _stmtType"]}, {"root": "MOVE from InfixExpression: +", "operations": ["MOV SimpleName: _sql to InfixExpression: + at 1", "MOV SimpleName: _catalog to InfixExpression: * at 0"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV ConditionalExpression to ParenthesizedExpression at 0"]}, {"root": "UPDATE from _catalog to prime", "operations": ["UPD SimpleName: _catalog from _catalog to prime"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "INS ParenthesizedExpression to ConditionalExpression at 0", "operations": ["INS InfixExpression: == to ParenthesizedExpression at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 3", "operations": ["INS SimpleName: hashCode to MethodInvocation at 1", "INS SimpleName: _resultSetType to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 3"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: == to ParenthesizedExpression at 0"]}, {"root": "UPDATE from _sql to _resultSetType", "operations": ["UPD SimpleName: _sql from _sql to _resultSetType"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV SimpleName: _sql to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV SimpleName: _sql to InfixExpression: == at 0"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: ClassCastException", "DEL SimpleName: e", "DEL SimpleType: NullPointerException", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SimpleType: ClassCastException", "DEL Block", "DEL CatchClause", "DEL Block", "DEL TryStatement", "DEL SimpleName: e", "DEL SimpleName: NullPointerException"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL NullLiteral", "DEL InfixExpression: =="]}, {"root": "DEL IfStatement", "operations": ["DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: hashCode", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL InfixExpression: +", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL ParenthesizedExpression", "DEL ConditionalExpression", "DEL NullLiteral"]}]}}, {"PStmtKey_diff": {"operations": ["Move Block(336) into MethodDeclaration(358) at 5", "Update SimpleName: that(262) to obj", "Insert IfStatement(269) into Block(357) at 0", "Insert IfStatement(275) into Block(357) at 1", "Insert IfStatement(284) into Block(357) at 2", "Insert VariableDeclarationStatement(369) into Block(453) at 0", "Insert VariableDeclarationStatement(374) into Block(453) at 1", "Insert ExpressionStatement(391) into Block(453) at 2", "Insert ExpressionStatement(408) into Block(453) at 3", "Insert ExpressionStatement(425) into Block(453) at 4", "Insert ExpressionStatement(442) into Block(453) at 5", "Insert ExpressionStatement(450) into Block(453) at 6", "Insert ReturnStatement(452) into Block(453) at 7", "Insert InfixExpression: ==(266) into IfStatement(269) at 0", "Insert ReturnStatement(268) into IfStatement(269) at 1", "Insert InfixExpression: ==(272) into IfStatement(275) at 0", "Move ReturnStatement(350) into IfStatement(275) at 1", "Insert InfixExpression: !=(281) into IfStatement(284) at 0", "Move ReturnStatement(342) into IfStatement(284) at 1", "Move SimpleType: PStmtKey(268) into VariableDeclarationStatement(293) at 0", "Insert Modifier: final(364) into VariableDeclarationStatement(369) at 0", "Insert PrimitiveType: int(365) into VariableDeclarationStatement(369) at 1", "Insert VariableDeclarationFragment(368) into VariableDeclarationStatement(369) at 2", "Insert PrimitiveType: int(370) into VariableDeclarationStatement(374) at 0", "Insert VariableDeclarationFragment(373) into VariableDeclarationStatement(374) at 1", "Insert Assignment: =(390) into ExpressionStatement(391) at 0", "Insert Assignment: =(407) into ExpressionStatement(408) at 0", "Insert Assignment: =(424) into ExpressionStatement(425) at 0", "Insert Assignment: =(441) into ExpressionStatement(442) at 0", "Insert Assignment: =(449) into ExpressionStatement(450) at 0", "Insert SimpleName: result(451) into ReturnStatement(452) at 0", "Insert ThisExpression(264) into InfixExpression: ==(266) at 0", "Insert SimpleName: obj(265) into InfixExpression: ==(266) at 1", "Insert BooleanLiteral: true(267) into ReturnStatement(268) at 0", "Insert SimpleName: obj(270) into InfixExpression: ==(272) at 0", "Insert NullLiteral(271) into InfixExpression: ==(272) at 1", "Insert MethodInvocation(277) into InfixExpression: !=(281) at 0", "Insert MethodInvocation(280) into InfixExpression: !=(281) at 1", "Insert SimpleName: prime(366) into VariableDeclarationFragment(368) at 0", "Insert NumberLiteral: 31(367) into VariableDeclarationFragment(368) at 1", "Insert SimpleName: result(371) into VariableDeclarationFragment(373) at 0", "Insert NumberLiteral: 1(372) into VariableDeclarationFragment(373) at 1", "Insert SimpleName: result(375) into Assignment: =(390) at 0", "Insert InfixExpression: +(389) into Assignment: =(390) at 1", "Insert SimpleName: result(392) into Assignment: =(407) at 0", "Insert InfixExpression: +(406) into Assignment: =(407) at 1", "Insert SimpleName: result(409) into Assignment: =(424) at 0", "Insert InfixExpression: +(423) into Assignment: =(424) at 1", "Insert SimpleName: result(426) into Assignment: =(441) at 0", "Insert InfixExpression: +(440) into Assignment: =(441) at 1", "Insert SimpleName: result(443) into Assignment: =(449) at 0", "Insert InfixExpression: +(448) into Assignment: =(449) at 1", "Insert SimpleName: getClass(276) into MethodInvocation(277) at 0", "Insert SimpleName: obj(278) into MethodInvocation(280) at 0", "Insert SimpleName: getClass(279) into MethodInvocation(280) at 1", "Move SimpleType: PStmtKey(265) into CastExpression(291) at 0", "Update SimpleName: that(269) to obj", "Insert InfixExpression: *(378) into InfixExpression: +(389) at 0", "Insert ParenthesizedExpression(388) into InfixExpression: +(389) at 1", "Insert InfixExpression: *(395) into InfixExpression: +(406) at 0", "Insert ParenthesizedExpression(405) into InfixExpression: +(406) at 1", "Insert InfixExpression: *(412) into InfixExpression: +(423) at 0", "Insert ParenthesizedExpression(422) into InfixExpression: +(423) at 1", "Insert InfixExpression: *(429) into InfixExpression: +(440) at 0", "Insert ParenthesizedExpression(439) into InfixExpression: +(440) at 1", "Insert InfixExpression: *(446) into InfixExpression: +(448) at 0", "Update SimpleName: _sql(381) to _stmtType", "Move SimpleName: _sql(381) into InfixExpression: +(448) at 1", "Insert SimpleName: prime(376) into InfixExpression: *(378) at 0", "Insert SimpleName: result(377) into InfixExpression: *(378) at 1", "Insert ConditionalExpression(387) into ParenthesizedExpression(388) at 0", "Insert SimpleName: prime(393) into InfixExpression: *(395) at 0", "Insert SimpleName: result(394) into InfixExpression: *(395) at 1", "Insert ConditionalExpression(404) into ParenthesizedExpression(405) at 0", "Insert SimpleName: prime(410) into InfixExpression: *(412) at 0", "Insert SimpleName: result(411) into InfixExpression: *(412) at 1", "Move ConditionalExpression(371) into ParenthesizedExpression(422) at 0", "Insert SimpleName: prime(427) into InfixExpression: *(429) at 0", "Insert SimpleName: result(428) into InfixExpression: *(429) at 1", "Insert ConditionalExpression(438) into ParenthesizedExpression(439) at 0", "Update SimpleName: _catalog(380) to prime", "Move SimpleName: _catalog(380) into InfixExpression: *(446) at 0", "Insert SimpleName: result(445) into InfixExpression: *(446) at 1", "Insert ParenthesizedExpression(382) into ConditionalExpression(387) at 0", "Insert NumberLiteral: 0(383) into ConditionalExpression(387) at 1", "Move MethodInvocation(379) into ConditionalExpression(387) at 2", "Insert ParenthesizedExpression(399) into ConditionalExpression(404) at 0", "Insert NumberLiteral: 0(400) into ConditionalExpression(404) at 1", "Insert MethodInvocation(403) into ConditionalExpression(404) at 2", "Insert ParenthesizedExpression(416) into ConditionalExpression(421) at 0", "Insert MethodInvocation(420) into ConditionalExpression(421) at 2", "Insert ParenthesizedExpression(433) into ConditionalExpression(438) at 0", "Insert NumberLiteral: 0(434) into ConditionalExpression(438) at 1", "Move MethodInvocation(370) into ConditionalExpression(438) at 2", "Move InfixExpression: ==(363) into ParenthesizedExpression(382) at 0", "Insert InfixExpression: ==(398) into ParenthesizedExpression(399) at 0", "Insert SimpleName: _resultSetConcurrency(401) into MethodInvocation(403) at 0", "Insert SimpleName: hashCode(402) into MethodInvocation(403) at 1", "Insert InfixExpression: ==(415) into ParenthesizedExpression(416) at 0", "Insert SimpleName: _resultSetType(418) into MethodInvocation(420) at 0", "Insert SimpleName: hashCode(419) into MethodInvocation(420) at 1", "Insert InfixExpression: ==(432) into ParenthesizedExpression(433) at 0", "Insert SimpleName: _resultSetConcurrency(396) into InfixExpression: ==(398) at 0", "Insert NullLiteral(397) into InfixExpression: ==(398) at 1", "Update SimpleName: _sql(365) to _resultSetType", "Move SimpleName: _sql(365) into InfixExpression: ==(415) at 0", "Insert NullLiteral(414) into InfixExpression: ==(415) at 1", "Move SimpleName: _sql(375) into InfixExpression: ==(432) at 0", "Insert NullLiteral(431) into InfixExpression: ==(432) at 1", "Delete SimpleName: ClassCastException(337)", "Delete SimpleType: ClassCastException(338)", "Delete SimpleName: e(339)", "Delete SingleVariableDeclaration(340)", "Delete Block(343)", "Delete CatchClause(344)", "Delete SimpleName: NullPointerException(345)", "Delete SimpleType: NullPointerException(346)", "Delete SimpleName: e(347)", "Delete SingleVariableDeclaration(348)", "Delete Block(351)", "Delete CatchClause(352)", "Delete TryStatement(353)", "Delete Block(354)", "Delete NullLiteral(364)", "Delete InfixExpression: ==(366)", "Delete ParenthesizedExpression(372)", "Delete ReturnStatement(373)", "Delete NullLiteral(374)", "Delete InfixExpression: ==(376)", "Delete InfixExpression: +(382)", "Delete ParenthesizedExpression(383)", "Delete SimpleName: hashCode(384)", "Delete MethodInvocation(385)", "Delete ConditionalExpression(386)", "Delete ParenthesizedExpression(387)", "Delete ReturnStatement(388)", "Delete IfStatement(389)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}