{"application": "apache-commons-csv", "csha": "8a5f777a0e1fc896ba6de71c7af68b32dda2cc39", "files": [{"CSVParser_cluster": {"actions": [{"root": "INS TextElement: The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream. to TagElement at 5", "operations": ["INS TextElement: The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream. to TagElement at 5"]}, {"root": "UPDATE from starting with '#', you write: to To parse a CSV input from a file, you write:", "operations": ["UPD TextElement: starting with '#', you write: from starting with '#', you write: to To parse a CSV input from a file, you write:"]}, {"root": "UPDATE from Reader in = new StringReader(&quot;a\\tb\\nc\\td&quot;); to File csvData = new File(&quot;/path/to/csv&quot;);", "operations": ["UPD TextElement: Reader in = new StringReader(&quot;a\\tb\\nc\\td&quot;); from Reader in = new StringReader(&quot;a\\tb\\nc\\td&quot;); to File csvData = new File(&quot;/path/to/csv&quot;);"]}, {"root": "UPDATE from Iterable&lt;CSVRecord&gt; parser = CSVFormat.DEFAULT to CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);", "operations": ["UPD TextElement: Iterable&lt;CSVRecord&gt; parser = CSVFormat.DEFAULT from Iterable&lt;CSVRecord&gt; parser = CSVFormat.DEFAULT to CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);"]}, {"root": "UPDATE from for (CSVRecord record : parser) { to for (CSVRecord csvRecord : parser) {", "operations": ["UPD TextElement: for (CSVRecord record : parser) { from for (CSVRecord record : parser) { to for (CSVRecord csvRecord : parser) {", "UPD TextElement: for (CSVRecord csvRecord : parse) { from for (CSVRecord csvRecord : parse) { to for (CSVRecord csvRecord : parser) {"]}, {"root": "INS TextElement: This will read the parse the contents of the file using the to TagElement at 42", "operations": ["INS TextElement: This will read the parse the contents of the file using the to TagElement at 42"]}, {"root": "INS TextElement: <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format. to TagElement at 43", "operations": ["INS TextElement: <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format. to TagElement at 43"]}, {"root": "INS TextElement: </p> to TagElement at 44", "operations": ["INS TextElement: </p> to TagElement at 44"]}, {"root": "INS TextElement: <p> to TagElement at 45", "operations": ["INS TextElement: <p> to TagElement at 45"]}, {"root": "UPDATE from To parse CSV input in a given format like Excel, you write: to To parse CSV input in a format like Excel, you write:", "operations": ["UPD TextElement: To parse CSV input in a given format like Excel, you write: from To parse CSV input in a given format like Excel, you write: to To parse CSV input in a format like Excel, you write:"]}, {"root": "UPDATE from Iterable&lt;CSVRecord&gt; parser = CSVFormat.EXCEL.parse(in); to CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);", "operations": ["UPD TextElement: Iterable&lt;CSVRecord&gt; parser = CSVFormat.EXCEL.parse(in); from Iterable&lt;CSVRecord&gt; parser = CSVFormat.EXCEL.parse(in); to CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);"]}, {"root": "INS TextElement: <p> to TagElement at 55", "operations": ["INS TextElement: <p> to TagElement at 55"]}, {"root": "INS TextElement: If the predefined formats don't match the format at hands, custom formats can be defined. More information about to TagElement at 56", "operations": ["INS TextElement: If the predefined formats don't match the format at hands, custom formats can be defined. More information about to TagElement at 56"]}, {"root": "INS TextElement: customising CSVFormats is available in  to TagElement at 57", "operations": ["INS TextElement: customising CSVFormats is available in  to TagElement at 57"]}, {"root": "INS TagElement: @link to TagElement at 58", "operations": ["INS SimpleName: CSVFormat to TagElement: @link at 0", "INS TagElement: @link to TagElement at 58", "INS TextElement:  CSVFormat JavaDoc to TagElement: @link at 1"]}, {"root": "INS TextElement: . to TagElement at 59", "operations": ["INS TextElement: . to TagElement at 59"]}, {"root": "INS TextElement: </p> to TagElement at 60", "operations": ["INS TextElement: </p> to TagElement at 60"]}, {"root": "DEL TextElement: To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator, and comments", "operations": ["DEL TextElement: To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator, and comments"]}, {"root": "DEL TextElement: .withCommentStart('#')", "operations": ["DEL TextElement: .withCommentStart('#')"]}, {"root": "DEL TextElement: .withDelimiter('\\t')", "operations": ["DEL TextElement: .withDelimiter('\\t')"]}, {"root": "DEL TextElement: .withQuoteChar('\"').parse(in);", "operations": ["DEL TextElement: .withQuoteChar('\"').parse(in);"]}, {"root": "DEL TextElement: Reader in = new StringReader(\"a;b\\nc;d\");", "operations": ["DEL TextElement: Reader in = new StringReader(\"a;b\\nc;d\");"]}]}}, {"CSVParser_diff": {"operations": ["Insert TextElement: The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.(40) into TagElement(133) at 5", "Update TextElement: starting with '#', you write:(91) to To parse a CSV input from a file, you write:", "Update TextElement: Reader in = new StringReader(&quot;a\\tb\\nc\\td&quot;);(94) to File csvData = new File(&quot;/path/to/csv&quot;);", "Update TextElement: Iterable&lt;CSVRecord&gt; parser = CSVFormat.DEFAULT(95) to CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);", "Update TextElement: for (CSVRecord csvRecord : parse) {(99) to for (CSVRecord csvRecord : parser) {", "Insert TextElement: This will read the parse the contents of the file using the(101) into TagElement(133) at 38", "Insert TextElement: <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.(102) into TagElement(133) at 39", "Insert TextElement: </p>(103) into TagElement(133) at 40", "Insert TextElement: <p>(104) into TagElement(133) at 41", "Update TextElement: To parse CSV input in a given format like Excel, you write:(104) to To parse CSV input in a format like Excel, you write:", "Update TextElement: Iterable&lt;CSVRecord&gt; parser = CSVFormat.EXCEL.parse(in);(108) to CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);", "Update TextElement: for (CSVRecord record : parser) {(109) to for (CSVRecord csvRecord : parser) {", "Insert TextElement: <p>(113) into TagElement(133) at 50", "Insert TextElement: If the predefined formats don't match the format at hands, custom formats can be defined. More information about(114) into TagElement(133) at 51", "Insert TextElement: customising CSVFormats is available in (115) into TagElement(133) at 52", "Insert TagElement: @link(118) into TagElement(133) at 53", "Insert TextElement: .(119) into TagElement(133) at 54", "Insert TextElement: </p>(120) into TagElement(133) at 55", "Insert SimpleName: CSVFormat(116) into TagElement: @link(118) at 0", "Insert TextElement:  CSVFormat JavaDoc(117) into TagElement: @link(118) at 1", "Delete TextElement: To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator, and comments(90)", "Delete TextElement: .withCommentStart('#')(96)", "Delete TextElement: .withDelimiter('\\t')(97)", "Delete TextElement: .withQuoteChar('\"').parse(in);(98)", "Delete TextElement: Reader in = new StringReader(\"a;b\\nc;d\");(107)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}