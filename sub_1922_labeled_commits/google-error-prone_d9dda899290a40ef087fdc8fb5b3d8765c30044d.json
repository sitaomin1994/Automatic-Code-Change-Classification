{"application": "google-error-prone", "csha": "d9dda899290a40ef087fdc8fb5b3d8765c30044d", "files": [{"JDKCompatible_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS ReturnStatement to Block at 0", "INS TextElement: Note that returning false does not necessarily mean that the expression can be non-null. to TagElement at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: isDefinitelyNull to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS TextElement:  exprPath to TagElement: @code at 0", "INS SimpleName: exprPath to MethodInvocation at 2", "INS Modifier: static to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS TextElement:  is null. to TagElement at 2", "INS TextElement: Returns true if the leaf of  to TagElement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isDefinitelyNull to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS TagElement: @code to TagElement at 1", "INS SimpleName: backingShim to MethodInvocation at 0", "INS SimpleName: context to MethodInvocation at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "UPDATE from path to exprPath", "operations": ["UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath", "UPD SimpleName: tree from tree to exprPath", "UPD SimpleName: path from path to exprPath"]}, {"root": "UPDATE from Tree to TreePath", "operations": ["UPD SimpleType: Tree from Tree to TreePath", "UPD SimpleName: Tree from Tree to TreePath"]}, {"root": "UPDATE from MethodTree to Context", "operations": ["UPD SimpleName: MethodTree from MethodTree to Context", "UPD SimpleType: MethodTree from MethodTree to Context"]}, {"root": "UPDATE from enclosingMethod to context", "operations": ["UPD SimpleName: enclosingMethod from enclosingMethod to context"]}, {"root": "UPDATE from Returns the value of  to Returns the value of the leaf of ", "operations": ["UPD TextElement: Returns the value of  from Returns the value of  to Returns the value of the leaf of "]}, {"root": "UPDATE from  if it is determined to be a constant (always evaluates to the to , if it is determined to be a constant", "operations": ["UPD TextElement:  if it is determined to be a constant (always evaluates to the from  if it is determined to be a constant (always evaluates to the to , if it is determined to be a constant"]}, {"root": "UPDATE from same numeric value), and null otherwise. Note that returning null does not necessarily mean the to (always evaluates to the same numeric value), and null otherwise.", "operations": ["UPD TextElement: same numeric value), and null otherwise. Note that returning null does not necessarily mean the from same numeric value), and null otherwise. Note that returning null does not necessarily mean the to (always evaluates to the same numeric value), and null otherwise."]}, {"root": "UPDATE from expression is *not* a constant. to Note that returning null does not necessarily mean the expression is *not* a constant.", "operations": ["UPD TextElement: expression is *not* a constant. from expression is *not* a constant. to Note that returning null does not necessarily mean the expression is *not* a constant."]}, {"root": "UPDATE from Wraps DataFlow.dataflow and nullness propagation, and returns true if  to Returns true if the leaf of ", "operations": ["UPD TextElement: Wraps DataFlow.dataflow and nullness propagation, and returns true if  from Wraps DataFlow.dataflow and nullness propagation, and returns true if  to Returns true if the leaf of "]}, {"root": "UPDATE from  is a to  is non-null.", "operations": ["UPD TextElement:  is a from  is a to  is non-null."]}, {"root": "UPDATE from non-null expression. to Note that returning false does not necessarily mean that the expression can be null.", "operations": ["UPD TextElement: non-null expression. from non-null expression. to Note that returning false does not necessarily mean that the expression can be null."]}, {"root": "UPDATE from  tree to  exprPath", "operations": ["UPD TextElement:  tree from  tree to  exprPath", "UPD TextElement:  tree from  tree to  exprPath"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.MethodTree"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.source.tree.Tree", "DEL ImportDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: Tree", "DEL SimpleName: tree"]}, {"root": "DEL SimpleName: tree", "operations": ["DEL SimpleName: tree"]}, {"root": "DEL SimpleName: tree", "operations": ["DEL SimpleName: tree"]}, {"root": "DEL SimpleName: enclosingMethod", "operations": ["DEL SimpleName: enclosingMethod"]}]}}, {"JDKCompatible_diff": {"operations": ["Insert MethodDeclaration(339) into TypeDeclaration: class(340) at 15", "Insert Javadoc(319) into MethodDeclaration(339) at 0", "Insert Modifier: public(320) into MethodDeclaration(339) at 1", "Insert Modifier: static(321) into MethodDeclaration(339) at 2", "Insert PrimitiveType: boolean(322) into MethodDeclaration(339) at 3", "Insert SimpleName: isDefinitelyNull(323) into MethodDeclaration(339) at 4", "Move SingleVariableDeclaration(317) into MethodDeclaration(339) at 5", "Move SingleVariableDeclaration(321) into MethodDeclaration(339) at 6", "Insert Block(338) into MethodDeclaration(339) at 7", "Update SimpleName: path(280) to exprPath", "Update SimpleType: Tree(307) to TreePath", "Update SimpleName: tree(308) to exprPath", "Update SimpleType: MethodTree(311) to Context", "Update SimpleName: enclosingMethod(312) to context", "Insert TagElement(318) into Javadoc(319) at 0", "Update SimpleName: path(316) to exprPath", "Insert ReturnStatement(337) into Block(338) at 0", "Update TextElement: Returns the value of (261) to Returns the value of the leaf of ", "Update TextElement:  if it is determined to be a constant (always evaluates to the(264) to , if it is determined to be a constant", "Update TextElement: same numeric value), and null otherwise. Note that returning null does not necessarily mean the(265) to (always evaluates to the same numeric value), and null otherwise.", "Update TextElement: expression is *not* a constant.(266) to Note that returning null does not necessarily mean the expression is *not* a constant.", "Update TextElement: Wraps DataFlow.dataflow and nullness propagation, and returns true if (295) to Returns true if the leaf of ", "Update TextElement:  is a(298) to  is non-null.", "Update TextElement: non-null expression.(299) to Note that returning false does not necessarily mean that the expression can be null.", "Update SimpleName: Tree(306) to TreePath", "Update SimpleName: MethodTree(310) to Context", "Insert TextElement: Returns true if the leaf of (313) into TagElement(318) at 0", "Insert TagElement: @code(315) into TagElement(318) at 1", "Insert TextElement:  is null.(316) into TagElement(318) at 2", "Insert TextElement: Note that returning false does not necessarily mean that the expression can be non-null.(317) into TagElement(318) at 3", "Insert MethodInvocation(336) into ReturnStatement(337) at 0", "Update TextElement:  tree(262) to  exprPath", "Update SimpleName: path(289) to exprPath", "Update TextElement:  tree(296) to  exprPath", "Update SimpleName: path(326) to exprPath", "Insert TextElement:  exprPath(314) into TagElement: @code(315) at 0", "Insert SimpleName: backingShim(332) into MethodInvocation(336) at 0", "Insert SimpleName: isDefinitelyNull(333) into MethodInvocation(336) at 1", "Insert SimpleName: exprPath(334) into MethodInvocation(336) at 2", "Insert SimpleName: context(335) into MethodInvocation(336) at 3", "Delete QualifiedName: com.sun.source.tree.MethodTree(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.sun.source.tree.Tree(4)", "Delete ImportDeclaration(5)", "Delete SimpleName: Tree(274)", "Delete SimpleType: Tree(275)", "Delete SimpleName: tree(276)", "Delete SingleVariableDeclaration(277)", "Delete SimpleName: tree(288)", "Delete SimpleName: tree(324)", "Delete SimpleName: enclosingMethod(325)"]}}, {"JDKShim_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Block to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from path to exprPath", "operations": ["UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.source.tree.MethodTree", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.Tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: tree", "DEL SimpleType: Tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Tree", "DEL SimpleName: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: MethodTree", "DEL SimpleType: MethodTree", "DEL SimpleName: enclosingMethod", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: Tree", "DEL SimpleName: Tree", "DEL SimpleName: tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: MethodTree", "DEL SimpleName: enclosingMethod", "DEL SimpleName: MethodTree", "DEL SingleVariableDeclaration"]}]}}, {"JDKShim_diff": {"operations": ["Move SingleVariableDeclaration(348) into MethodDeclaration(315) at 4", "Move SingleVariableDeclaration(352) into MethodDeclaration(315) at 5", "Move Block(355) into MethodDeclaration(315) at 6", "Move SingleVariableDeclaration(323) into MethodDeclaration(332) at 4", "Move SingleVariableDeclaration(327) into MethodDeclaration(332) at 5", "Move Block(330) into MethodDeclaration(332) at 6", "Update SimpleName: path(297) to exprPath", "Update SimpleName: path(347) to exprPath", "Update SimpleName: path(322) to exprPath", "Delete QualifiedName: com.sun.source.tree.MethodTree(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.sun.source.tree.Tree(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: Tree(291)", "Delete SimpleType: Tree(292)", "Delete SimpleName: tree(293)", "Delete SingleVariableDeclaration(294)", "Delete SimpleName: Tree(312)", "Delete SimpleType: Tree(313)", "Delete SimpleName: tree(314)", "Delete SingleVariableDeclaration(315)", "Delete SimpleName: MethodTree(316)", "Delete SimpleType: MethodTree(317)", "Delete SimpleName: enclosingMethod(318)", "Delete SingleVariableDeclaration(319)", "Delete SimpleName: Tree(337)", "Delete SimpleType: Tree(338)", "Delete SimpleName: tree(339)", "Delete SingleVariableDeclaration(340)", "Delete SimpleName: MethodTree(341)", "Delete SimpleType: MethodTree(342)", "Delete SimpleName: enclosingMethod(343)", "Delete SingleVariableDeclaration(344)"]}}, {"JDKShim_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Block to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from path to exprPath", "operations": ["UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.source.tree.MethodTree", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.Tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: tree", "DEL SimpleType: Tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Tree", "DEL SimpleName: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: MethodTree", "DEL SimpleType: MethodTree", "DEL SimpleName: enclosingMethod", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: Tree", "DEL SimpleName: Tree", "DEL SimpleName: tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: MethodTree", "DEL SimpleName: enclosingMethod", "DEL SimpleName: MethodTree", "DEL SingleVariableDeclaration"]}]}}, {"JDKShim_diff": {"operations": ["Move SingleVariableDeclaration(348) into MethodDeclaration(315) at 4", "Move SingleVariableDeclaration(352) into MethodDeclaration(315) at 5", "Move Block(355) into MethodDeclaration(315) at 6", "Move SingleVariableDeclaration(323) into MethodDeclaration(332) at 4", "Move SingleVariableDeclaration(327) into MethodDeclaration(332) at 5", "Move Block(330) into MethodDeclaration(332) at 6", "Update SimpleName: path(297) to exprPath", "Update SimpleName: path(347) to exprPath", "Update SimpleName: path(322) to exprPath", "Delete QualifiedName: com.sun.source.tree.MethodTree(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.sun.source.tree.Tree(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: Tree(291)", "Delete SimpleType: Tree(292)", "Delete SimpleName: tree(293)", "Delete SingleVariableDeclaration(294)", "Delete SimpleName: Tree(312)", "Delete SimpleType: Tree(313)", "Delete SimpleName: tree(314)", "Delete SingleVariableDeclaration(315)", "Delete SimpleName: MethodTree(316)", "Delete SimpleType: MethodTree(317)", "Delete SimpleName: enclosingMethod(318)", "Delete SingleVariableDeclaration(319)", "Delete SimpleName: Tree(337)", "Delete SimpleType: Tree(338)", "Delete SimpleName: tree(339)", "Delete SingleVariableDeclaration(340)", "Delete SimpleName: MethodTree(341)", "Delete SimpleType: MethodTree(342)", "Delete SimpleName: enclosingMethod(343)", "Delete SingleVariableDeclaration(344)"]}}, {"JDKCompatibleShim_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "UPDATE from path to exprPath", "operations": ["UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath", "UPD SimpleName: path from path to exprPath"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.MethodTree"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.Tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: tree", "DEL SimpleType: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: Tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: Tree", "DEL SimpleName: Tree", "DEL SimpleName: tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: MethodTree", "DEL SingleVariableDeclaration", "DEL SimpleType: MethodTree", "DEL SimpleName: enclosingMethod"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Tree", "DEL SimpleType: Tree", "DEL SingleVariableDeclaration", "DEL SimpleName: tree"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: enclosingMethod", "DEL SimpleType: MethodTree", "DEL SimpleName: MethodTree"]}]}}, {"JDKCompatibleShim_diff": {"operations": ["Move SingleVariableDeclaration(191) into MethodDeclaration(150) at 2", "Move SingleVariableDeclaration(153) into MethodDeclaration(161) at 2", "Move SingleVariableDeclaration(195) into MethodDeclaration(161) at 3", "Move SingleVariableDeclaration(172) into MethodDeclaration(172) at 2", "Move SingleVariableDeclaration(176) into MethodDeclaration(172) at 3", "Update SimpleName: path(190) to exprPath", "Update SimpleName: path(152) to exprPath", "Update SimpleName: path(171) to exprPath", "Delete QualifiedName: com.sun.source.tree.MethodTree(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.sun.source.tree.Tree(4)", "Delete ImportDeclaration(5)", "Delete SimpleName: Tree(146)", "Delete SimpleType: Tree(147)", "Delete SimpleName: tree(148)", "Delete SingleVariableDeclaration(149)", "Delete SimpleName: Tree(161)", "Delete SimpleType: Tree(162)", "Delete SimpleName: tree(163)", "Delete SingleVariableDeclaration(164)", "Delete SimpleName: MethodTree(165)", "Delete SimpleType: MethodTree(166)", "Delete SimpleName: enclosingMethod(167)", "Delete SingleVariableDeclaration(168)", "Delete SimpleName: Tree(180)", "Delete SimpleType: Tree(181)", "Delete SimpleName: tree(182)", "Delete SingleVariableDeclaration(183)", "Delete SimpleName: MethodTree(184)", "Delete SimpleType: MethodTree(185)", "Delete SimpleName: enclosingMethod(186)", "Delete SingleVariableDeclaration(187)"]}}, {"DefinitelyNonNull_cluster": {"actions": [{"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.util.ASTHelpers"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.sun.source.tree.MethodTree"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: MethodTree", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: MethodTree", "DEL SimpleName: enclosingMethod", "DEL SimpleName: MethodTree", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleName: ASTHelpers", "DEL SimpleName: MethodTree", "DEL SimpleName: findEnclosingNode"]}, {"root": "DEL IfStatement", "operations": ["DEL ReturnStatement", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: enclosingMethod"]}, {"root": "DEL SimpleName: tree", "operations": ["DEL SimpleName: tree"]}, {"root": "DEL SimpleName: enclosingMethod", "operations": ["DEL SimpleName: enclosingMethod"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getPath", "DEL SimpleName: state", "DEL MethodInvocation"]}]}}, {"DefinitelyNonNull_diff": {"operations": ["Move MethodInvocation(60) into MethodInvocation(68) at 2", "Delete QualifiedName: com.google.errorprone.util.ASTHelpers(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.sun.source.tree.MethodTree(16)", "Delete ImportDeclaration(17)", "Delete SimpleName: MethodTree(53)", "Delete SimpleType: MethodTree(54)", "Delete SimpleName: enclosingMethod(55)", "Delete SimpleName: ASTHelpers(56)", "Delete SimpleName: findEnclosingNode(57)", "Delete SimpleName: MethodTree(61)", "Delete SimpleType: MethodTree(62)", "Delete TypeLiteral(63)", "Delete MethodInvocation(64)", "Delete VariableDeclarationFragment(65)", "Delete VariableDeclarationStatement(66)", "Delete SimpleName: enclosingMethod(67)", "Delete NullLiteral(68)", "Delete InfixExpression: ==(69)", "Delete BooleanLiteral: false(70)", "Delete ReturnStatement(71)", "Delete Block(72)", "Delete IfStatement(73)", "Delete SimpleName: tree(89)", "Delete SimpleName: enclosingMethod(90)", "Delete SimpleName: state(91)", "Delete SimpleName: getPath(92)", "Delete MethodInvocation(93)"]}}, {"DataFlow_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.sun.source.tree.BlockTree to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: com.sun.source.tree.ExpressionTree to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.sun.source.tree.Tree to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS MethodInvocation to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: path to InfixExpression: != at 0", "INS SimpleName: path to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: isInstance to MethodInvocation at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS SimpleType: TreePath to MethodDeclaration at 3", "INS SimpleName: path to ReturnStatement at 0", "INS SimpleName: T to SimpleType: T at 0", "INS Block to WhileStatement at 1", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: klass to SingleVariableDeclaration at 1", "INS SimpleType: Class to ParameterizedType: Class<T> at 0", "INS SimpleName: getParentPath to MethodInvocation at 1", "INS ParameterizedType: Class<T> to SingleVariableDeclaration at 0", "INS InfixExpression: && to WhileStatement at 0", "INS SimpleName: getLeaf to MethodInvocation at 1", "INS SimpleName: path to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleName: klass to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: path to MethodInvocation at 0", "INS WhileStatement to Block at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: T to ParameterizedType: Class<T> at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: findPathFromEnclosingNodeToTopLevel to MethodDeclaration at 4", "INS NullLiteral to InfixExpression: != at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: T to TypeParameter at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS Block to MethodDeclaration at 7", "INS Modifier: public to MethodDeclaration at 0", "INS TypeParameter to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: exprPath to SingleVariableDeclaration at 1", "INS SimpleType: S to ParameterizedType: Store<S> at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: methodDataflow to MethodInvocation at 0", "INS SimpleType: TreePath to VariableDeclarationStatement at 1", "INS TypeParameter to MethodDeclaration at 3", "INS TagElement: @code to TagElement at 4", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: ExpressionTree to SimpleType: ExpressionTree at 0", "INS SimpleType: T to SingleVariableDeclaration at 0", "INS SimpleType: Store to ParameterizedType: Store<S> at 0", "INS ReturnStatement to Block at 5", "INS SimpleType: ExpressionTree to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: A to SimpleType: A at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: findPathFromEnclosingNodeToTopLevel to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: AbstractValue to SimpleType: AbstractValue at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: ExpressionTree to SimpleType: ExpressionTree at 0", "INS SimpleName: Store to SimpleType: Store at 0", "INS SimpleType: ExpressionTree to CastExpression at 0", "INS StringLiteral: \"Leaf of exprPath must be of type ExpressionTree, but was %s\" to MethodInvocation at 3", "INS SimpleName: S to TypeParameter at 0", "INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS SimpleType: AbstractValue to ParameterizedType: AbstractValue<A> at 0", "INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS SimpleType: ExpressionTree to InstanceofExpression at 1", "INS SimpleName: enclosingMethodPath to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS TypeParameter to MethodDeclaration at 5", "INS SimpleType: Context to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 10", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: A to SimpleType: A at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to MethodDeclaration at 11", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: A to ParameterizedType: AbstractValue<A> at 1", "INS TextElement:  transfer to TagElement: @code at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ParameterizedType: TransferFunction<A,S> to TypeParameter at 1", "INS ParameterizedType: Store<S> to TypeParameter at 1", "INS SimpleName: TransferFunction to SimpleType: TransferFunction at 0", "INS TypeParameter to MethodDeclaration at 4", "INS TextElement: which is the leaf of  to TagElement at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS TextElement:  exprPath to TagElement: @code at 0", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: T to TypeParameter at 0", "INS SimpleName: getAnalysis to MethodInvocation at 1", "INS NullLiteral to ReturnStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: leaf to VariableDeclarationFragment at 0", "INS SimpleType: A to MethodDeclaration at 6", "INS InstanceofExpression to MethodInvocation at 2", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: enclosingMethodPath to InfixExpression: == at 0", "INS SimpleName: S to SimpleType: S at 0", "INS TextElement:  dataflow analysis to compute the abstract value of the expression to TagElement at 2", "INS SimpleName: Context to SimpleType: Context at 0", "INS SimpleName: A to SimpleType: A at 0", "INS SimpleName: context to SingleVariableDeclaration at 1", "INS TextElement: Run the  to TagElement at 0", "INS SimpleName: transfer to MethodInvocation at 3", "INS SimpleName: transfer to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS IfStatement to Block at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: exprPath to MethodInvocation at 0", "INS SimpleName: leaf to MethodInvocation at 0", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: A to TypeParameter at 0", "INS SimpleName: S to SimpleType: S at 0", "INS SimpleName: exprPath to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 3", "INS TextElement: . to TagElement at 5", "INS SimpleType: S to ParameterizedType: TransferFunction<A,S> at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: expressionDataflow to MethodDeclaration at 7", "INS SimpleName: enclosingMethodPath to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: leaf to InstanceofExpression at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: MethodTree to TypeLiteral at 0", "INS SimpleType: Tree to VariableDeclarationStatement at 1", "INS SimpleName: expr to VariableDeclarationFragment at 0", "INS TagElement: @code to TagElement at 1", "INS SimpleType: TransferFunction to ParameterizedType: TransferFunction<A,S> at 0", "INS SimpleType: A to ParameterizedType: TransferFunction<A,S> at 1", "INS SimpleName: T to SimpleType: T at 0", "INS SimpleName: context to MethodInvocation at 2", "INS SimpleName: ExpressionTree to SimpleType: ExpressionTree at 0", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS SimpleType: TreePath to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 4", "INS ParameterizedType: AbstractValue<A> to TypeParameter at 1", "INS SimpleName: getLeaf to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Tree to SimpleType: Tree at 0", "INS SimpleName: leaf to CastExpression at 1", "INS SimpleName: MethodTree to SimpleType: MethodTree at 0", "INS SimpleName: expr to MethodInvocation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Run the  to TagElement at 0", "INS TextElement:  transfer to TagElement: @code at 0", "INS TextElement:  methodPath to TagElement: @code at 0", "INS TagElement: @code to TagElement at 1", "INS TextElement: . to TagElement at 4", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  dataflow analysis over the method which is the leaf of the to TagElement at 2", "INS TagElement: @code to TagElement at 3"]}, {"root": "UPDATE from dataflow to methodDataflow", "operations": ["UPD SimpleName: dataflow from dataflow to methodDataflow"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 5"]}, {"root": "INS SimpleType: TreePath to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS SimpleType: TreePath to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from path to methodPath", "operations": ["UPD SimpleName: path from path to methodPath", "UPD SimpleName: method from method to methodPath"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: methodPath to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: leaf to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Tree to SimpleType: Tree at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: getLeaf to MethodInvocation at 1", "INS SimpleType: Tree to VariableDeclarationStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS InstanceofExpression to MethodInvocation at 2", "INS StringLiteral: \"Leaf of methodPath must be of type MethodTree, but was %s\" to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: MethodTree to InstanceofExpression at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: leaf to InstanceofExpression at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: MethodTree to SimpleType: MethodTree at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: leaf to MethodInvocation at 0", "INS SimpleName: checkArgument to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: MethodTree to SimpleType: MethodTree at 0", "INS SimpleName: method to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: leaf to CastExpression at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: MethodTree to VariableDeclarationStatement at 1", "INS CastExpression to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleType: BlockTree to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: body to VariableDeclarationFragment at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: BlockTree to SimpleType: BlockTree at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS SimpleName: bodyPath to VariableDeclarationFragment at 0", "INS SimpleType: TreePath to ClassInstanceCreation at 0", "INS SimpleName: methodPath to ClassInstanceCreation at 1", "INS SimpleName: body to ClassInstanceCreation at 2", "INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: TreePath to SimpleType: TreePath at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleType: TreePath to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 8"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: body to MethodInvocation at 2", "operations": ["INS SimpleName: body to MethodInvocation at 2"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: MethodTree to CastExpression at 0"]}, {"root": "UPDATE from path to bodyPath", "operations": ["UPD SimpleName: path from path to bodyPath"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 5", "operations": ["INS BooleanLiteral: false to MethodInvocation at 5"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 6", "operations": ["INS BooleanLiteral: false to MethodInvocation at 6"]}]}}, {"DataFlow_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(496) at 2", "Insert ImportDeclaration(11) into CompilationUnit(496) at 5", "Insert ImportDeclaration(15) into CompilationUnit(496) at 7", "Insert QualifiedName: com.sun.source.tree.BlockTree(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: com.sun.source.tree.ExpressionTree(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: com.sun.source.tree.Tree(14) into ImportDeclaration(15) at 0", "Insert MethodDeclaration(133) into TypeDeclaration: class(495) at 5", "Insert MethodDeclaration(494) into TypeDeclaration: class(495) at 7", "Insert Modifier: public(92) into MethodDeclaration(133) at 0", "Insert Modifier: static(93) into MethodDeclaration(133) at 1", "Insert TypeParameter(95) into MethodDeclaration(133) at 2", "Insert SimpleType: TreePath(97) into MethodDeclaration(133) at 3", "Insert SimpleName: findPathFromEnclosingNodeToTopLevel(98) into MethodDeclaration(133) at 4", "Move SingleVariableDeclaration(128) into MethodDeclaration(133) at 5", "Insert SingleVariableDeclaration(109) into MethodDeclaration(133) at 6", "Insert Block(132) into MethodDeclaration(133) at 7", "Insert Javadoc(142) into MethodDeclaration(379) at 0", "Update SimpleName: dataflow(120) to methodDataflow", "Move VariableDeclarationStatement(162) into Block(378) at 5", "Insert Javadoc(389) into MethodDeclaration(494) at 0", "Insert Modifier: public(390) into MethodDeclaration(494) at 1", "Insert Modifier: static(391) into MethodDeclaration(494) at 2", "Insert TypeParameter(398) into MethodDeclaration(494) at 3", "Insert TypeParameter(405) into MethodDeclaration(494) at 4", "Insert TypeParameter(414) into MethodDeclaration(494) at 5", "Insert SimpleType: A(416) into MethodDeclaration(494) at 6", "Insert SimpleName: expressionDataflow(417) into MethodDeclaration(494) at 7", "Insert SingleVariableDeclaration(421) into MethodDeclaration(494) at 8", "Insert SingleVariableDeclaration(425) into MethodDeclaration(494) at 9", "Insert SingleVariableDeclaration(429) into MethodDeclaration(494) at 10", "Insert Block(493) into MethodDeclaration(494) at 11", "Insert SimpleName: T(94) into TypeParameter(95) at 0", "Insert SimpleName: TreePath(96) into SimpleType: TreePath(97) at 0", "Insert ParameterizedType: Class<T>(107) into SingleVariableDeclaration(109) at 0", "Insert SimpleName: klass(108) into SingleVariableDeclaration(109) at 1", "Insert WhileStatement(129) into Block(132) at 0", "Insert ReturnStatement(131) into Block(132) at 1", "Insert TagElement(141) into Javadoc(142) at 0", "Insert SimpleType: TreePath(179) into SingleVariableDeclaration(181) at 0", "Update SimpleName: method(123) to methodPath", "Insert VariableDeclarationStatement(198) into Block(378) at 0", "Insert ExpressionStatement(212) into Block(378) at 1", "Insert VariableDeclarationStatement(222) into Block(378) at 2", "Insert VariableDeclarationStatement(231) into Block(378) at 3", "Insert VariableDeclarationStatement(286) into Block(378) at 8", "Insert TagElement(388) into Javadoc(389) at 0", "Insert SimpleName: A(392) into TypeParameter(398) at 0", "Insert ParameterizedType: AbstractValue<A>(397) into TypeParameter(398) at 1", "Insert SimpleName: S(399) into TypeParameter(405) at 0", "Insert ParameterizedType: Store<S>(404) into TypeParameter(405) at 1", "Insert SimpleName: T(406) into TypeParameter(414) at 0", "Insert ParameterizedType: TransferFunction<A,S>(413) into TypeParameter(414) at 1", "Insert SimpleName: A(415) into SimpleType: A(416) at 0", "Insert SimpleType: TreePath(419) into SingleVariableDeclaration(421) at 0", "Insert SimpleName: exprPath(420) into SingleVariableDeclaration(421) at 1", "Insert SimpleType: Context(423) into SingleVariableDeclaration(425) at 0", "Insert SimpleName: context(424) into SingleVariableDeclaration(425) at 1", "Insert SimpleType: T(427) into SingleVariableDeclaration(429) at 0", "Insert SimpleName: transfer(428) into SingleVariableDeclaration(429) at 1", "Insert VariableDeclarationStatement(438) into Block(493) at 0", "Insert ExpressionStatement(452) into Block(493) at 1", "Insert VariableDeclarationStatement(462) into Block(493) at 2", "Insert VariableDeclarationStatement(474) into Block(493) at 3", "Insert IfStatement(481) into Block(493) at 4", "Insert ReturnStatement(492) into Block(493) at 5", "Insert SimpleType: Class(104) into ParameterizedType: Class<T>(107) at 0", "Insert SimpleType: T(106) into ParameterizedType: Class<T>(107) at 1", "Insert InfixExpression: &&(121) into WhileStatement(129) at 0", "Insert Block(128) into WhileStatement(129) at 1", "Insert SimpleName: path(130) into ReturnStatement(131) at 0", "Insert TextElement: Run the (134) into TagElement(141) at 0", "Insert TagElement: @code(136) into TagElement(141) at 1", "Insert TextElement:  dataflow analysis over the method which is the leaf of the(137) into TagElement(141) at 2", "Insert TagElement: @code(139) into TagElement(141) at 3", "Insert TextElement: .(140) into TagElement(141) at 4", "Insert SimpleName: TreePath(178) into SimpleType: TreePath(179) at 0", "Insert Modifier: final(190) into VariableDeclarationStatement(198) at 0", "Insert SimpleType: Tree(192) into VariableDeclarationStatement(198) at 1", "Insert VariableDeclarationFragment(197) into VariableDeclarationStatement(198) at 2", "Insert MethodInvocation(211) into ExpressionStatement(212) at 0", "Insert Modifier: final(213) into VariableDeclarationStatement(222) at 0", "Insert SimpleType: MethodTree(215) into VariableDeclarationStatement(222) at 1", "Insert VariableDeclarationFragment(221) into VariableDeclarationStatement(222) at 2", "Insert Modifier: final(223) into VariableDeclarationStatement(231) at 0", "Insert SimpleType: BlockTree(225) into VariableDeclarationStatement(231) at 1", "Insert VariableDeclarationFragment(230) into VariableDeclarationStatement(231) at 2", "Insert Modifier: final(248) into VariableDeclarationStatement(257) at 0", "Insert Modifier: final(258) into VariableDeclarationStatement(264) at 0", "Insert Modifier: final(265) into VariableDeclarationStatement(275) at 0", "Insert Modifier: final(276) into VariableDeclarationStatement(286) at 0", "Insert SimpleType: TreePath(278) into VariableDeclarationStatement(286) at 1", "Insert VariableDeclarationFragment(285) into VariableDeclarationStatement(286) at 2", "Insert TextElement: Run the (380) into TagElement(388) at 0", "Insert TagElement: @code(382) into TagElement(388) at 1", "Insert TextElement:  dataflow analysis to compute the abstract value of the expression(383) into TagElement(388) at 2", "Insert TextElement: which is the leaf of (384) into TagElement(388) at 3", "Insert TagElement: @code(386) into TagElement(388) at 4", "Insert TextElement: .(387) into TagElement(388) at 5", "Insert SimpleType: AbstractValue(394) into ParameterizedType: AbstractValue<A>(397) at 0", "Insert SimpleType: A(396) into ParameterizedType: AbstractValue<A>(397) at 1", "Insert SimpleType: Store(401) into ParameterizedType: Store<S>(404) at 0", "Insert SimpleType: S(403) into ParameterizedType: Store<S>(404) at 1", "Insert SimpleType: TransferFunction(408) into ParameterizedType: TransferFunction<A,S>(413) at 0", "Insert SimpleType: A(410) into ParameterizedType: TransferFunction<A,S>(413) at 1", "Insert SimpleType: S(412) into ParameterizedType: TransferFunction<A,S>(413) at 2", "Insert SimpleName: TreePath(418) into SimpleType: TreePath(419) at 0", "Insert SimpleName: Context(422) into SimpleType: Context(423) at 0", "Insert SimpleName: T(426) into SimpleType: T(427) at 0", "Insert Modifier: final(430) into VariableDeclarationStatement(438) at 0", "Insert SimpleType: Tree(432) into VariableDeclarationStatement(438) at 1", "Insert VariableDeclarationFragment(437) into VariableDeclarationStatement(438) at 2", "Insert MethodInvocation(451) into ExpressionStatement(452) at 0", "Insert Modifier: final(453) into VariableDeclarationStatement(462) at 0", "Insert SimpleType: ExpressionTree(455) into VariableDeclarationStatement(462) at 1", "Insert VariableDeclarationFragment(461) into VariableDeclarationStatement(462) at 2", "Insert Modifier: final(463) into VariableDeclarationStatement(474) at 0", "Insert SimpleType: TreePath(465) into VariableDeclarationStatement(474) at 1", "Insert VariableDeclarationFragment(473) into VariableDeclarationStatement(474) at 2", "Insert InfixExpression: ==(477) into IfStatement(481) at 0", "Insert Block(480) into IfStatement(481) at 1", "Insert MethodInvocation(491) into ReturnStatement(492) at 0", "Insert SimpleName: Class(103) into SimpleType: Class(104) at 0", "Insert SimpleName: T(105) into SimpleType: T(106) at 0", "Insert InfixExpression: !=(112) into InfixExpression: &&(121) at 0", "Insert PrefixExpression: !(120) into InfixExpression: &&(121) at 1", "Insert ExpressionStatement(127) into Block(128) at 0", "Insert TextElement:  transfer(135) into TagElement: @code(136) at 0", "Insert TextElement:  methodPath(138) into TagElement: @code(139) at 0", "Insert SimpleName: Tree(191) into SimpleType: Tree(192) at 0", "Insert SimpleName: leaf(193) into VariableDeclarationFragment(197) at 0", "Insert MethodInvocation(196) into VariableDeclarationFragment(197) at 1", "Insert SimpleName: Preconditions(199) into MethodInvocation(211) at 0", "Insert SimpleName: checkArgument(200) into MethodInvocation(211) at 1", "Insert InstanceofExpression(204) into MethodInvocation(211) at 2", "Insert StringLiteral: \"Leaf of methodPath must be of type MethodTree, but was %s\"(205) into MethodInvocation(211) at 3", "Insert MethodInvocation(210) into MethodInvocation(211) at 4", "Insert SimpleName: MethodTree(214) into SimpleType: MethodTree(215) at 0", "Insert SimpleName: method(216) into VariableDeclarationFragment(221) at 0", "Insert CastExpression(220) into VariableDeclarationFragment(221) at 1", "Insert SimpleName: BlockTree(224) into SimpleType: BlockTree(225) at 0", "Insert SimpleName: body(226) into VariableDeclarationFragment(230) at 0", "Move MethodInvocation(141) into VariableDeclarationFragment(230) at 1", "Insert SimpleName: body(234) into MethodInvocation(246) at 2", "Insert SimpleName: TreePath(277) into SimpleType: TreePath(278) at 0", "Insert SimpleName: bodyPath(279) into VariableDeclarationFragment(285) at 0", "Insert ClassInstanceCreation(284) into VariableDeclarationFragment(285) at 1", "Insert TextElement:  transfer(381) into TagElement: @code(382) at 0", "Insert TextElement:  exprPath(385) into TagElement: @code(386) at 0", "Insert SimpleName: AbstractValue(393) into SimpleType: AbstractValue(394) at 0", "Insert SimpleName: A(395) into SimpleType: A(396) at 0", "Insert SimpleName: Store(400) into SimpleType: Store(401) at 0", "Insert SimpleName: S(402) into SimpleType: S(403) at 0", "Insert SimpleName: TransferFunction(407) into SimpleType: TransferFunction(408) at 0", "Insert SimpleName: A(409) into SimpleType: A(410) at 0", "Insert SimpleName: S(411) into SimpleType: S(412) at 0", "Insert SimpleName: Tree(431) into SimpleType: Tree(432) at 0", "Insert SimpleName: leaf(433) into VariableDeclarationFragment(437) at 0", "Insert MethodInvocation(436) into VariableDeclarationFragment(437) at 1", "Insert SimpleName: Preconditions(439) into MethodInvocation(451) at 0", "Insert SimpleName: checkArgument(440) into MethodInvocation(451) at 1", "Insert InstanceofExpression(444) into MethodInvocation(451) at 2", "Insert StringLiteral: \"Leaf of exprPath must be of type ExpressionTree, but was %s\"(445) into MethodInvocation(451) at 3", "Insert MethodInvocation(450) into MethodInvocation(451) at 4", "Insert SimpleName: ExpressionTree(454) into SimpleType: ExpressionTree(455) at 0", "Insert SimpleName: expr(456) into VariableDeclarationFragment(461) at 0", "Insert CastExpression(460) into VariableDeclarationFragment(461) at 1", "Insert SimpleName: TreePath(464) into SimpleType: TreePath(465) at 0", "Insert SimpleName: enclosingMethodPath(466) into VariableDeclarationFragment(473) at 0", "Insert MethodInvocation(472) into VariableDeclarationFragment(473) at 1", "Insert SimpleName: enclosingMethodPath(475) into InfixExpression: ==(477) at 0", "Insert NullLiteral(476) into InfixExpression: ==(477) at 1", "Insert ReturnStatement(479) into Block(480) at 0", "Insert MethodInvocation(488) into MethodInvocation(491) at 0", "Insert SimpleName: getValue(489) into MethodInvocation(491) at 1", "Insert SimpleName: expr(490) into MethodInvocation(491) at 2", "Insert SimpleName: path(110) into InfixExpression: !=(112) at 0", "Insert NullLiteral(111) into InfixExpression: !=(112) at 1", "Insert ParenthesizedExpression(119) into PrefixExpression: !(120) at 0", "Insert Assignment: =(126) into ExpressionStatement(127) at 0", "Insert SimpleName: methodPath(194) into MethodInvocation(196) at 0", "Insert SimpleName: getLeaf(195) into MethodInvocation(196) at 1", "Insert SimpleName: leaf(201) into InstanceofExpression(204) at 0", "Insert SimpleType: MethodTree(203) into InstanceofExpression(204) at 1", "Insert MethodInvocation(208) into MethodInvocation(210) at 0", "Insert SimpleName: getName(209) into MethodInvocation(210) at 1", "Move SimpleType: MethodTree(122) into CastExpression(220) at 0", "Insert SimpleName: leaf(219) into CastExpression(220) at 1", "Insert SimpleType: TreePath(281) into ClassInstanceCreation(284) at 0", "Insert SimpleName: methodPath(282) into ClassInstanceCreation(284) at 1", "Insert SimpleName: body(283) into ClassInstanceCreation(284) at 2", "Update SimpleName: path(158) to bodyPath", "Insert BooleanLiteral: false(304) into MethodInvocation(306) at 5", "Insert BooleanLiteral: false(305) into MethodInvocation(306) at 6", "Insert SimpleName: exprPath(434) into MethodInvocation(436) at 0", "Insert SimpleName: getLeaf(435) into MethodInvocation(436) at 1", "Insert SimpleName: leaf(441) into InstanceofExpression(444) at 0", "Insert SimpleType: ExpressionTree(443) into InstanceofExpression(444) at 1", "Insert MethodInvocation(448) into MethodInvocation(450) at 0", "Insert SimpleName: getName(449) into MethodInvocation(450) at 1", "Insert SimpleType: ExpressionTree(458) into CastExpression(460) at 0", "Insert SimpleName: leaf(459) into CastExpression(460) at 1", "Insert SimpleName: findPathFromEnclosingNodeToTopLevel(467) into MethodInvocation(472) at 0", "Insert SimpleName: exprPath(468) into MethodInvocation(472) at 1", "Insert TypeLiteral(471) into MethodInvocation(472) at 2", "Insert NullLiteral(478) into ReturnStatement(479) at 0", "Insert MethodInvocation(486) into MethodInvocation(488) at 0", "Insert SimpleName: getAnalysis(487) into MethodInvocation(488) at 1", "Insert MethodInvocation(118) into ParenthesizedExpression(119) at 0", "Insert SimpleName: path(122) into Assignment: =(126) at 0", "Insert MethodInvocation(125) into Assignment: =(126) at 1", "Insert SimpleName: MethodTree(202) into SimpleType: MethodTree(203) at 0", "Insert SimpleName: leaf(206) into MethodInvocation(208) at 0", "Insert SimpleName: getClass(207) into MethodInvocation(208) at 1", "Insert SimpleName: TreePath(280) into SimpleType: TreePath(281) at 0", "Insert SimpleName: ExpressionTree(442) into SimpleType: ExpressionTree(443) at 0", "Insert SimpleName: leaf(446) into MethodInvocation(448) at 0", "Insert SimpleName: getClass(447) into MethodInvocation(448) at 1", "Insert SimpleName: ExpressionTree(457) into SimpleType: ExpressionTree(458) at 0", "Insert SimpleType: MethodTree(470) into TypeLiteral(471) at 0", "Insert SimpleName: methodDataflow(482) into MethodInvocation(486) at 0", "Insert SimpleName: enclosingMethodPath(483) into MethodInvocation(486) at 1", "Insert SimpleName: context(484) into MethodInvocation(486) at 2", "Insert SimpleName: transfer(485) into MethodInvocation(486) at 3", "Insert SimpleName: klass(113) into MethodInvocation(118) at 0", "Insert SimpleName: isInstance(114) into MethodInvocation(118) at 1", "Insert MethodInvocation(117) into MethodInvocation(118) at 2", "Insert SimpleName: path(123) into MethodInvocation(125) at 0", "Insert SimpleName: getParentPath(124) into MethodInvocation(125) at 1", "Update SimpleName: path(146) to methodPath", "Insert SimpleName: MethodTree(469) into SimpleType: MethodTree(470) at 0", "Insert SimpleName: path(115) into MethodInvocation(117) at 0", "Insert SimpleName: getLeaf(116) into MethodInvocation(117) at 1"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 1, "testing": "True", "maintenance": "True", "build": "False"}]}