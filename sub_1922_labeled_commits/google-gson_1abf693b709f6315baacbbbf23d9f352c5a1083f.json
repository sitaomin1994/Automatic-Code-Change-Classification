{"application": "google-gson", "csha": "1abf693b709f6315baacbbbf23d9f352c5a1083f", "files": [{"JsonParser_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 5", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS SimpleName: valueWithInQuotes to ClassInstanceCreation at 1", "INS SimpleName: JsonPrimitive to SimpleType: JsonPrimitive at 0", "INS SimpleName: value to MethodInvocation at 0", "INS SimpleName: jj_consume_token to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SwitchStatement to Block at 2", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS BreakStatement to SwitchStatement at 12", "INS SimpleName: jj_ntk to ConditionalExpression at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleType: ParseException to ClassInstanceCreation at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS PrefixExpression: - to MethodInvocation at 1", "INS ConditionalExpression to SwitchStatement at 0", "INS ReturnStatement to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: t to Assignment: = at 0", "INS BreakStatement to SwitchStatement at 6", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS SwitchCase to SwitchStatement at 13", "INS QualifiedName: t.image to VariableDeclarationFragment at 1", "INS SimpleType: Token to VariableDeclarationStatement at 0", "INS SwitchCase to SwitchStatement at 7", "INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SINGLE_QUOTE_LITERAL to MethodInvocation at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS MethodInvocation to InfixExpression: - at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: jj_ntk to MethodInvocation at 0", "INS SimpleName: jj_ntk to InfixExpression: == at 0", "INS Block to SwitchStatement at 5", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: jj_consume_token to MethodInvocation at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleType: JsonPrimitive to ClassInstanceCreation at 0", "INS SimpleName: t to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS VariableDeclarationStatement to SwitchStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Token to SimpleType: Token at 0", "INS SimpleName: substring to MethodInvocation at 1", "INS ExpressionStatement to SwitchStatement at 2", "INS ThrowStatement to SwitchStatement at 16", "INS SwitchCase to SwitchStatement at 1", "INS InfixExpression: - to MethodInvocation at 3", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS PrefixExpression: - to InfixExpression: == at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to SwitchStatement at 15", "INS SimpleName: value to MethodInvocation at 0", "INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0", "INS BooleanLiteral: true to IfStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: QUOTE to SwitchCase at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to SwitchStatement at 4", "INS SimpleName: valueWithInQuotes to VariableDeclarationFragment at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 12", "MOV SwitchCase to SwitchStatement at 12", "MOV SwitchCase to SwitchStatement at 2", "MOV SwitchCase to SwitchStatement at 1", "MOV SwitchCase to SwitchStatement at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 9", "MOV SwitchCase to SwitchStatement at 5", "MOV SwitchCase to SwitchStatement at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 1", "MOV ExpressionStatement to SwitchStatement at 11", "MOV ExpressionStatement to SwitchStatement at 14", "MOV SwitchCase to SwitchStatement at 11", "MOV SwitchCase to SwitchStatement at 11", "MOV SwitchCase to SwitchStatement at 15", "MOV ExpressionStatement to SwitchStatement at 13"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 9", "MOV SwitchCase to SwitchStatement at 6"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 3", "MOV SwitchStatement to SwitchStatement at 9", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to SwitchStatement at 8", "MOV Block to SwitchStatement at 11", "MOV ExpressionStatement to SwitchStatement at 10"]}, {"root": "INS ForStatement to Block at 5", "operations": ["INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS PrefixExpression: - to Assignment: = at 1", "INS InfixExpression: < to ForStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS ExpressionStatement to ForStatement at 3", "INS ForStatement to Block at 5", "INS SimpleName: jj_la1 to ArrayAccess at 0", "INS NumberLiteral: 14 to InfixExpression: < at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS ArrayAccess to Assignment: = at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ForStatement to Block at 5", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 3", "MOV ForStatement to Block at 5", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 4"]}, {"root": "INS BreakStatement to SwitchStatement at 3", "operations": ["INS BreakStatement to SwitchStatement at 3"]}, {"root": "INS BreakStatement to SwitchStatement at 8", "operations": ["INS BreakStatement to SwitchStatement at 8"]}, {"root": "INS SwitchCase to SwitchStatement at 11", "operations": ["INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 11"]}, {"root": "INS SwitchCase to SwitchStatement at 18", "operations": ["INS SwitchCase to SwitchStatement at 18", "INS NumberLiteral: 19 to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 1", "operations": ["INS SwitchCase to SwitchStatement at 1", "INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 2", "operations": ["INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 2"]}, {"root": "INS SwitchCase to SwitchStatement at 10", "operations": ["INS SwitchCase to SwitchStatement at 10", "INS NumberLiteral: 26 to SwitchCase at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 13", "operations": ["INS BreakStatement to SwitchStatement at 13"]}, {"root": "INS BreakStatement to SwitchStatement at 16", "operations": ["INS BreakStatement to SwitchStatement at 16"]}, {"root": "INS SwitchCase to SwitchStatement at 25", "operations": ["INS SwitchCase to SwitchStatement at 25", "INS NumberLiteral: 19 to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 1", "operations": ["INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 1"]}, {"root": "INS BreakStatement to SwitchStatement at 10", "operations": ["INS BreakStatement to SwitchStatement at 10"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 14"]}, {"root": "INS ExpressionStatement to SwitchStatement at 7", "operations": ["INS NumberLiteral: 12 to ArrayAccess at 1", "INS SimpleName: jj_gen to Assignment: = at 1", "INS ExpressionStatement to SwitchStatement at 7", "INS SimpleName: jj_la1 to ArrayAccess at 0", "INS ArrayAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: int[] to ArrayCreation at 0"]}, {"root": "UPDATE from 13 to 14", "operations": ["UPD NumberLiteral: 13 from 13 to 14", "UPD NumberLiteral: 13 from 13 to 14", "UPD NumberLiteral: 13 from 13 to 14", "UPD NumberLiteral: 13 from 13 to 14", "UPD NumberLiteral: 13 from 13 to 14", "UPD NumberLiteral: 13 from 13 to 14", "UPD NumberLiteral: 13 from 13 to 14"]}, {"root": "MOVE from ForStatement", "operations": ["MOV ExpressionStatement to ForStatement at 3", "MOV PostfixExpression: ++ to ForStatement at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: boolean[] to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from 23 to 25", "operations": ["UPD NumberLiteral: 23 from 23 to 25", "UPD NumberLiteral: 23 from 23 to 25", "UPD NumberLiteral: 23 from 23 to 25", "UPD NumberLiteral: 15 from 15 to 25", "UPD NumberLiteral: 23 from 23 to 25", "UPD NumberLiteral: 23 from 23 to 25"]}, {"root": "UPDATE from 24 to 26", "operations": ["UPD NumberLiteral: 24 from 24 to 26", "UPD NumberLiteral: 22 from 22 to 26", "UPD NumberLiteral: 23 from 23 to 26", "UPD NumberLiteral: 20 from 20 to 26", "UPD NumberLiteral: 24 from 24 to 26"]}, {"root": "UPDATE from 15 to 17", "operations": ["UPD NumberLiteral: 15 from 15 to 17"]}, {"root": "UPDATE from 16 to 18", "operations": ["UPD NumberLiteral: 16 from 16 to 18"]}, {"root": "UPDATE from 15 to 19", "operations": ["UPD NumberLiteral: 15 from 15 to 19", "UPD NumberLiteral: 17 from 17 to 19", "UPD NumberLiteral: 17 from 17 to 19"]}, {"root": "UPDATE from 19 to 21", "operations": ["UPD NumberLiteral: 19 from 19 to 21"]}, {"root": "UPDATE from 20 to 22", "operations": ["UPD NumberLiteral: 20 from 20 to 22"]}, {"root": "UPDATE from 21 to 23", "operations": ["UPD NumberLiteral: 21 from 21 to 23"]}, {"root": "INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0", "operations": ["INS SimpleName: SINGLE_QUOTE_LITERAL to SwitchCase at 0"]}, {"root": "UPDATE from 25 to 27", "operations": ["UPD NumberLiteral: 25 from 25 to 27", "UPD NumberLiteral: 25 from 25 to 27"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from 26 to 28", "operations": ["UPD NumberLiteral: 26 from 26 to 28", "UPD NumberLiteral: 26 from 26 to 28", "UPD NumberLiteral: 26 from 26 to 28"]}, {"root": "UPDATE from 18 to 20", "operations": ["UPD NumberLiteral: 18 from 18 to 20", "UPD NumberLiteral: 18 from 18 to 20"]}, {"root": "UPDATE from 22 to 24", "operations": ["UPD NumberLiteral: 22 from 22 to 24", "UPD NumberLiteral: 22 from 22 to 24"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: int[] to ArrayCreation at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV PrefixExpression: - to Assignment: = at 1"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: boolean[] to ArrayCreation at 0"]}, {"root": "UPDATE from 12 to 13", "operations": ["UPD NumberLiteral: 12 from 12 to 13"]}, {"root": "UPDATE from 0x1d280c0 to 0x74a0340", "operations": ["UPD NumberLiteral: 0x1d280c0 from 0x1d280c0 to 0x74a0340", "UPD NumberLiteral: 0x1d280c0 from 0x1d280c0 to 0x74a0340", "UPD NumberLiteral: 0x1d280c0 from 0x1d280c0 to 0x74a0340"]}, {"root": "UPDATE from 0x80 to 0x300", "operations": ["UPD NumberLiteral: 0x80 from 0x80 to 0x300", "UPD NumberLiteral: 0x4c00 from 0x4c00 to 0x300"]}, {"root": "UPDATE from 0x40000 to 0x100000", "operations": ["UPD NumberLiteral: 0x40000 from 0x40000 to 0x100000", "UPD NumberLiteral: 0x40000 from 0x40000 to 0x100000"]}, {"root": "UPDATE from 0x1c000c0 to 0x7000340", "operations": ["UPD NumberLiteral: 0x1c000c0 from 0x1c000c0 to 0x7000340"]}, {"root": "UPDATE from 0x2000000 to 0x8000000", "operations": ["UPD NumberLiteral: 0x2000000 from 0x2000000 to 0x8000000"]}, {"root": "UPDATE from 0x1000000 to 0x4000000", "operations": ["UPD NumberLiteral: 0x1000000 from 0x1000000 to 0x4000000"]}, {"root": "UPDATE from 0x4c00 to 0x13000", "operations": ["UPD NumberLiteral: 0x4c00 from 0x4c00 to 0x13000", "UPD NumberLiteral: 0x4c00 from 0x4c00 to 0x13000"]}, {"root": "INS NumberLiteral: 0x13000 to ArrayInitializer at 13", "operations": ["INS NumberLiteral: 0x13000 to ArrayInitializer at 13"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV SimpleName: jj_la1 to ArrayAccess at 0"]}, {"root": "MOVE from PrefixExpression: -", "operations": ["MOV NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL SwitchCase", "operations": ["DEL NumberLiteral: 18", "DEL SwitchCase"]}, {"root": "DEL SwitchCase", "operations": ["DEL SwitchCase", "DEL NumberLiteral: 18"]}, {"root": "DEL NumberLiteral: 15", "operations": ["DEL NumberLiteral: 15"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL ForStatement", "operations": ["DEL InfixExpression: <", "DEL NumberLiteral: 13", "DEL ForStatement", "DEL SimpleName: i"]}]}}, {"JsonParser_diff": {"operations": ["Insert Block(1142) into MethodDeclaration(1143) at 5", "Move SwitchCase(48) into SwitchStatement(105) at 12", "Move SwitchCase(68) into SwitchStatement(105) at 2", "Move SwitchCase(70) into SwitchStatement(105) at 12", "Move SwitchCase(80) into SwitchStatement(105) at 1", "Move SwitchCase(329) into SwitchStatement(359) at 5", "Move SwitchCase(337) into SwitchStatement(359) at 9", "Move SwitchCase(461) into SwitchStatement(545) at 11", "Move SwitchCase(463) into SwitchStatement(545) at 15", "Move ExpressionStatement(468) into SwitchStatement(545) at 11", "Move SwitchCase(471) into SwitchStatement(545) at 1", "Move ExpressionStatement(476) into SwitchStatement(545) at 13", "Move ExpressionStatement(484) into SwitchStatement(545) at 14", "Move SwitchCase(515) into SwitchStatement(545) at 11", "Move SwitchCase(587) into SwitchStatement(655) at 9", "Move SwitchCase(600) into SwitchStatement(655) at 6", "Move VariableDeclarationStatement(1008) into Block(1142) at 0", "Insert VariableDeclarationStatement(1023) into Block(1142) at 1", "Insert SwitchStatement(1136) into Block(1142) at 2", "Move ThrowStatement(1060) into Block(1142) at 3", "Insert ForStatement(1552) into Block(1553) at 5", "Move ForStatement(1712) into Block(1696) at 5", "Move ForStatement(1758) into Block(1750) at 5", "Move ExpressionStatement(1725) into Block(1795) at 0", "Move ExpressionStatement(1731) into Block(1795) at 1", "Move ExpressionStatement(1736) into Block(1795) at 2", "Move ExpressionStatement(1740) into Block(1795) at 3", "Move ForStatement(1667) into Block(1795) at 4", "Move ExpressionStatement(1679) into Block(1841) at 0", "Move ExpressionStatement(1685) into Block(1841) at 1", "Move ExpressionStatement(1690) into Block(1841) at 2", "Move ExpressionStatement(1694) into Block(1841) at 3", "Move ForStatement(1470) into Block(1841) at 4", "Insert BreakStatement(54) into SwitchStatement(105) at 3", "Insert BreakStatement(62) into SwitchStatement(105) at 6", "Insert SwitchCase(66) into SwitchStatement(105) at 8", "Insert SwitchCase(82) into SwitchStatement(105) at 15", "Insert SwitchCase(147) into SwitchStatement(163) at 1", "Move SwitchCase(56) into SwitchStatement(253) at 1", "Insert SwitchCase(331) into SwitchStatement(359) at 2", "Insert SwitchCase(345) into SwitchStatement(359) at 9", "Move SwitchCase(333) into SwitchStatement(428) at 1", "Insert BreakStatement(485) into SwitchStatement(545) at 11", "Insert BreakStatement(493) into SwitchStatement(545) at 14", "Insert SwitchCase(523) into SwitchStatement(545) at 23", "Insert SwitchCase(580) into SwitchStatement(655) at 1", "Insert BreakStatement(608) into SwitchStatement(655) at 10", "Insert SimpleType: Token(1020) into VariableDeclarationStatement(1023) at 0", "Insert VariableDeclarationFragment(1022) into VariableDeclarationStatement(1023) at 1", "Insert ConditionalExpression(1032) into SwitchStatement(1136) at 0", "Insert SwitchCase(1034) into SwitchStatement(1136) at 1", "Insert ExpressionStatement(1040) into SwitchStatement(1136) at 2", "Insert VariableDeclarationStatement(1046) into SwitchStatement(1136) at 3", "Insert VariableDeclarationStatement(1060) into SwitchStatement(1136) at 4", "Insert Block(1068) into SwitchStatement(1136) at 5", "Insert BreakStatement(1069) into SwitchStatement(1136) at 6", "Insert SwitchCase(1071) into SwitchStatement(1136) at 7", "Move ExpressionStatement(1012) into SwitchStatement(1136) at 8", "Move SwitchStatement(1041) into SwitchStatement(1136) at 9", "Move ExpressionStatement(1045) into SwitchStatement(1136) at 10", "Move Block(1055) into SwitchStatement(1136) at 11", "Insert BreakStatement(1119) into SwitchStatement(1136) at 12", "Insert SwitchCase(1120) into SwitchStatement(1136) at 13", "Move ExpressionStatement(1108) into SwitchStatement(1136) at 14", "Insert ExpressionStatement(1131) into SwitchStatement(1136) at 15", "Insert ThrowStatement(1135) into SwitchStatement(1136) at 16", "Insert ExpressionStatement(1189) into SwitchStatement(1191) at 7", "Move ArrayType: int[](1367) into ArrayCreation(1424) at 0", "Update NumberLiteral: 13(1342) to 14", "Insert VariableDeclarationExpression(1539) into ForStatement(1552) at 0", "Insert InfixExpression: <(1542) into ForStatement(1552) at 1", "Insert PostfixExpression: ++(1544) into ForStatement(1552) at 2", "Insert ExpressionStatement(1551) into ForStatement(1552) at 3", "Move PostfixExpression: ++(1605) into ForStatement(1638) at 2", "Move ExpressionStatement(1612) into ForStatement(1638) at 3", "Move ArrayType: boolean[](1971) into VariableDeclarationStatement(2057) at 0", "Insert SimpleName: SINGLE_QUOTE_LITERAL(65) into SwitchCase(66) at 0", "Update NumberLiteral: 15(47) to 25", "Update NumberLiteral: 23(69) to 26", "Insert NumberLiteral: 19(81) into SwitchCase(82) at 0", "Update NumberLiteral: 15(132) to 17", "Insert SimpleName: SINGLE_QUOTE_LITERAL(146) into SwitchCase(147) at 0", "Update NumberLiteral: 16(161) to 18", "Update NumberLiteral: 17(192) to 19", "Update NumberLiteral: 19(278) to 21", "Update NumberLiteral: 20(312) to 22", "Insert SimpleName: SINGLE_QUOTE_LITERAL(330) into SwitchCase(331) at 0", "Update NumberLiteral: 15(328) to 19", "Update NumberLiteral: 23(336) to 25", "Insert NumberLiteral: 26(344) into SwitchCase(345) at 0", "Update NumberLiteral: 21(355) to 23", "Insert SimpleName: SINGLE_QUOTE_LITERAL(458) into SwitchCase(459) at 0", "Update NumberLiteral: 20(478) to 26", "Update NumberLiteral: 23(500) to 25", "Insert NumberLiteral: 19(522) into SwitchCase(523) at 0", "Insert SimpleName: SINGLE_QUOTE_LITERAL(579) into SwitchCase(580) at 0", "Update NumberLiteral: 22(599) to 26", "Update NumberLiteral: 23(614) to 25", "Update NumberLiteral: 25(686) to 27", "Update NumberLiteral: 24(841) to 26", "Update NumberLiteral: 25(900) to 27", "Insert SimpleName: Token(1019) into SimpleType: Token(1020) at 0", "Insert SimpleName: t(1021) into VariableDeclarationFragment(1022) at 0", "Insert ParenthesizedExpression(1028) into ConditionalExpression(1032) at 0", "Insert MethodInvocation(1030) into ConditionalExpression(1032) at 1", "Insert SimpleName: jj_ntk(1031) into ConditionalExpression(1032) at 2", "Insert SimpleName: SINGLE_QUOTE_LITERAL(1033) into SwitchCase(1034) at 0", "Insert Assignment: =(1039) into ExpressionStatement(1040) at 0", "Insert SimpleType: String(1042) into VariableDeclarationStatement(1046) at 0", "Insert VariableDeclarationFragment(1045) into VariableDeclarationStatement(1046) at 1", "Insert SimpleType: String(1048) into VariableDeclarationStatement(1060) at 0", "Insert VariableDeclarationFragment(1059) into VariableDeclarationStatement(1060) at 1", "Insert IfStatement(1067) into Block(1068) at 0", "Insert SimpleName: QUOTE(1070) into SwitchCase(1071) at 0", "Insert MethodInvocation(1130) into ExpressionStatement(1131) at 0", "Insert ClassInstanceCreation(1134) into ThrowStatement(1135) at 0", "Insert Assignment: =(1188) into ExpressionStatement(1189) at 0", "Insert PrimitiveType: int(1535) into VariableDeclarationExpression(1539) at 0", "Insert VariableDeclarationFragment(1538) into VariableDeclarationExpression(1539) at 1", "Insert SimpleName: i(1540) into InfixExpression: <(1542) at 0", "Insert NumberLiteral: 14(1541) into InfixExpression: <(1542) at 1", "Insert SimpleName: i(1543) into PostfixExpression: ++(1544) at 0", "Insert Assignment: =(1550) into ExpressionStatement(1551) at 0", "Move PrimitiveType: int(1596) into VariableDeclarationExpression(1625) at 0", "Move VariableDeclarationFragment(1599) into VariableDeclarationExpression(1625) at 1", "Update NumberLiteral: 13(1545) to 14", "Update NumberLiteral: 13(1701) to 14", "Update NumberLiteral: 13(1747) to 14", "Update NumberLiteral: 13(1656) to 14", "Update NumberLiteral: 13(1459) to 14", "Update NumberLiteral: 26(1982) to 28", "Update NumberLiteral: 13(2016) to 14", "Update NumberLiteral: 26(2066) to 28", "Update NumberLiteral: 18(233) to 20", "Update NumberLiteral: 18(406) to 20", "Update NumberLiteral: 22(489) to 24", "Update NumberLiteral: 23(503) to 25", "Update NumberLiteral: 17(517) to 19", "Update NumberLiteral: 22(602) to 24", "Update NumberLiteral: 23(617) to 25", "Update NumberLiteral: 24(844) to 26", "Insert InfixExpression: ==(1027) into ParenthesizedExpression(1028) at 0", "Insert SimpleName: jj_ntk(1029) into MethodInvocation(1030) at 0", "Insert SimpleName: t(1035) into Assignment: =(1039) at 0", "Insert MethodInvocation(1038) into Assignment: =(1039) at 1", "Insert SimpleName: String(1041) into SimpleType: String(1042) at 0", "Insert SimpleName: value(1043) into VariableDeclarationFragment(1045) at 0", "Insert QualifiedName: t.image(1044) into VariableDeclarationFragment(1045) at 1", "Insert SimpleName: String(1047) into SimpleType: String(1048) at 0", "Insert SimpleName: valueWithInQuotes(1049) into VariableDeclarationFragment(1059) at 0", "Insert MethodInvocation(1058) into VariableDeclarationFragment(1059) at 1", "Insert BooleanLiteral: true(1061) into IfStatement(1067) at 0", "Insert ReturnStatement(1066) into IfStatement(1067) at 1", "Insert SimpleName: jj_consume_token(1127) into MethodInvocation(1130) at 0", "Insert PrefixExpression: -(1129) into MethodInvocation(1130) at 1", "Insert SimpleType: ParseException(1133) into ClassInstanceCreation(1134) at 0", "Insert ArrayAccess(1186) into Assignment: =(1188) at 0", "Insert SimpleName: jj_gen(1187) into Assignment: =(1188) at 1", "Move ArrayType: int[](1341) into ArrayCreation(1464) at 0", "Insert SimpleName: i(1536) into VariableDeclarationFragment(1538) at 0", "Insert NumberLiteral: 0(1537) into VariableDeclarationFragment(1538) at 1", "Insert ArrayAccess(1547) into Assignment: =(1550) at 0", "Insert PrefixExpression: -(1549) into Assignment: =(1550) at 1", "Move NumberLiteral: 0(1541) into VariableDeclarationFragment(1624) at 1", "Move PrefixExpression: -(1553) into Assignment: =(1636) at 1", "Move ArrayType: boolean[](1967) into ArrayCreation(2055) at 0", "Update NumberLiteral: 26(1972) to 28", "Insert SimpleName: jj_ntk(1024) into InfixExpression: ==(1027) at 0", "Insert PrefixExpression: -(1026) into InfixExpression: ==(1027) at 1", "Insert SimpleName: jj_consume_token(1036) into MethodInvocation(1038) at 0", "Insert SimpleName: SINGLE_QUOTE_LITERAL(1037) into MethodInvocation(1038) at 1", "Insert SimpleName: value(1050) into MethodInvocation(1058) at 0", "Insert SimpleName: substring(1051) into MethodInvocation(1058) at 1", "Insert NumberLiteral: 1(1052) into MethodInvocation(1058) at 2", "Insert InfixExpression: -(1057) into MethodInvocation(1058) at 3", "Insert ClassInstanceCreation(1065) into ReturnStatement(1066) at 0", "Insert NumberLiteral: 1(1128) into PrefixExpression: -(1129) at 0", "Insert SimpleName: ParseException(1132) into SimpleType: ParseException(1133) at 0", "Insert SimpleName: jj_la1(1184) into ArrayAccess(1186) at 0", "Insert NumberLiteral: 12(1185) into ArrayAccess(1186) at 1", "Update NumberLiteral: 12(1168) to 13", "Update NumberLiteral: 0x1d280c0(1368) to 0x74a0340", "Update NumberLiteral: 0x80(1369) to 0x300", "Update NumberLiteral: 0x40000(1370) to 0x100000", "Update NumberLiteral: 0x1d280c0(1371) to 0x74a0340", "Update NumberLiteral: 0x40000(1372) to 0x100000", "Update NumberLiteral: 0x1d280c0(1373) to 0x74a0340", "Update NumberLiteral: 0x1c000c0(1374) to 0x7000340", "Update NumberLiteral: 0x2000000(1375) to 0x8000000", "Update NumberLiteral: 0x1000000(1377) to 0x4000000", "Update NumberLiteral: 0x4c00(1378) to 0x13000", "Update NumberLiteral: 0x4c00(1379) to 0x300", "Update NumberLiteral: 0x4c00(1380) to 0x13000", "Insert NumberLiteral: 0x13000(1462) into ArrayInitializer(1463) at 13", "Insert SimpleName: jj_la1(1545) into ArrayAccess(1547) at 0", "Insert SimpleName: i(1546) into ArrayAccess(1547) at 1", "Insert NumberLiteral: 1(1548) into PrefixExpression: -(1549) at 0", "Move SimpleName: i(1550) into ArrayAccess(1633) at 1", "Insert NumberLiteral: 1(1025) into PrefixExpression: -(1026) at 0", "Insert MethodInvocation(1055) into InfixExpression: -(1057) at 0", "Insert NumberLiteral: 1(1056) into InfixExpression: -(1057) at 1", "Insert SimpleType: JsonPrimitive(1063) into ClassInstanceCreation(1065) at 0", "Insert SimpleName: valueWithInQuotes(1064) into ClassInstanceCreation(1065) at 1", "Insert SimpleName: value(1053) into MethodInvocation(1055) at 0", "Insert SimpleName: length(1054) into MethodInvocation(1055) at 1", "Insert SimpleName: JsonPrimitive(1062) into SimpleType: JsonPrimitive(1063) at 0", "Delete BreakStatement(54)", "Delete BreakStatement(62)", "Delete NumberLiteral: 18(230)", "Delete SwitchCase(231)", "Delete NumberLiteral: 18(403)", "Delete SwitchCase(404)", "Delete NumberLiteral: 15(470)", "Delete BreakStatement(459)", "Delete BreakStatement(469)", "Delete BreakStatement(598)", "Delete Block(1061)", "Delete SimpleName: i(1601)", "Delete NumberLiteral: 13(1602)", "Delete InfixExpression: <(1603)", "Delete ForStatement(1613)"]}}, {"JsonParserConstants_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: interface at 6", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 1", "INS PrimitiveType: int to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: interface at 6", "INS NumberLiteral: 8 to VariableDeclarationFragment at 1", "INS SimpleName: SINGLE_QUOTE_LITERAL to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: interface at 8", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: interface at 8", "INS PrimitiveType: int to FieldDeclaration at 0", "INS SimpleName: ENDQUOTE to VariableDeclarationFragment at 0", "INS NumberLiteral: 11 to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from QUOTE to ESCAPE_CHAR", "operations": ["UPD SimpleName: QUOTE from QUOTE to ESCAPE_CHAR"]}, {"root": "UPDATE from ENDQUOTE to QUOTE", "operations": ["UPD SimpleName: ENDQUOTE from ENDQUOTE to QUOTE"]}, {"root": "UPDATE from 10 to 12", "operations": ["UPD NumberLiteral: 10 from 10 to 12"]}, {"root": "UPDATE from 11 to 13", "operations": ["UPD NumberLiteral: 11 from 11 to 13"]}, {"root": "UPDATE from 13 to 15", "operations": ["UPD NumberLiteral: 13 from 13 to 15"]}, {"root": "UPDATE from 14 to 16", "operations": ["UPD NumberLiteral: 14 from 14 to 16"]}, {"root": "INS StringLiteral: \"<ESCAPE_CHAR>\" to ArrayInitializer at 7", "operations": ["INS StringLiteral: \"<ESCAPE_CHAR>\" to ArrayInitializer at 7"]}, {"root": "INS StringLiteral: \"<SINGLE_QUOTE_LITERAL>\" to ArrayInitializer at 8", "operations": ["INS StringLiteral: \"<SINGLE_QUOTE_LITERAL>\" to ArrayInitializer at 8"]}]}}, {"JsonParserConstants_diff": {"operations": ["Insert FieldDeclaration(30) into TypeDeclaration: interface(117) at 6", "Insert FieldDeclaration(40) into TypeDeclaration: interface(117) at 8", "Insert PrimitiveType: int(26) into FieldDeclaration(30) at 0", "Insert VariableDeclarationFragment(29) into FieldDeclaration(30) at 1", "Insert PrimitiveType: int(36) into FieldDeclaration(40) at 0", "Insert VariableDeclarationFragment(39) into FieldDeclaration(40) at 1", "Update SimpleName: QUOTE(22) to ESCAPE_CHAR", "Insert SimpleName: SINGLE_QUOTE_LITERAL(27) into VariableDeclarationFragment(29) at 0", "Insert NumberLiteral: 8(28) into VariableDeclarationFragment(29) at 1", "Update SimpleName: ENDQUOTE(27) to QUOTE", "Insert SimpleName: ENDQUOTE(37) into VariableDeclarationFragment(39) at 0", "Insert NumberLiteral: 11(38) into VariableDeclarationFragment(39) at 1", "Update NumberLiteral: 10(33) to 12", "Update NumberLiteral: 11(38) to 13", "Update NumberLiteral: 13(43) to 15", "Update NumberLiteral: 14(48) to 16", "Insert StringLiteral: \"<ESCAPE_CHAR>\"(93) into ArrayInitializer(114) at 7", "Insert StringLiteral: \"<SINGLE_QUOTE_LITERAL>\"(94) into ArrayInitializer(114) at 8"]}}, {"JsonParserTokenManager_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 46", "MOV FieldDeclaration to TypeDeclaration: class at 23", "MOV FieldDeclaration to TypeDeclaration: class at 22"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: int[] to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: long[] to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: long[] to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ArrayType: int[] to FieldDeclaration at 2"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 18", "MOV ReturnStatement to SwitchStatement at 11", "MOV ReturnStatement to SwitchStatement at 25", "MOV ReturnStatement to SwitchStatement at 4", "MOV SwitchCase to SwitchStatement at 20", "MOV SwitchCase to SwitchStatement at 16", "MOV SwitchCase to SwitchStatement at 22", "MOV ReturnStatement to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 24"]}, {"root": "MOVE from ArrayInitializer", "operations": ["MOV PrefixExpression: - to ArrayInitializer at 7", "MOV PrefixExpression: - to ArrayInitializer at 7", "MOV PrefixExpression: - to ArrayInitializer at 11", "MOV NumberLiteral: 1 to ArrayInitializer at 16"]}, {"root": "UPDATE from jjstateSet to jjrounds", "operations": ["UPD SimpleName: jjstateSet from jjstateSet to jjrounds"]}, {"root": "UPDATE from jjrounds to jjstateSet", "operations": ["UPD SimpleName: jjrounds from jjrounds to jjstateSet"]}, {"root": "INS NumberLiteral: 4 to ArrayInitializer at 0", "operations": ["INS NumberLiteral: 4 to ArrayInitializer at 0"]}, {"root": "INS NumberLiteral: 5 to ArrayInitializer at 1", "operations": ["INS NumberLiteral: 5 to ArrayInitializer at 1"]}, {"root": "INS NumberLiteral: 7 to ArrayInitializer at 2", "operations": ["INS NumberLiteral: 7 to ArrayInitializer at 2"]}, {"root": "INS NullLiteral to ArrayInitializer at 7", "operations": ["INS NullLiteral to ArrayInitializer at 7"]}, {"root": "INS NullLiteral to ArrayInitializer at 8", "operations": ["INS NullLiteral to ArrayInitializer at 8"]}, {"root": "INS PrefixExpression: - to ArrayInitializer at 26", "operations": ["INS PrefixExpression: - to ArrayInitializer at 26", "INS NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "INS PrefixExpression: - to ArrayInitializer at 27", "operations": ["INS PrefixExpression: - to ArrayInitializer at 27", "INS NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "UPDATE from 0x3ffcee1L to 0xfff3b61L", "operations": ["UPD NumberLiteral: 0x3ffcee1L from 0x3ffcee1L to 0xfff3b61L"]}, {"root": "UPDATE from 0x1100L to 0x4400L", "operations": ["UPD NumberLiteral: 0x1100L from 0x1100L to 0x4400L"]}, {"root": "UPDATE from 4 to 16", "operations": ["UPD NumberLiteral: 4 from 4 to 16", "UPD NumberLiteral: 14 from 14 to 16", "UPD NumberLiteral: 14 from 14 to 16", "UPD NumberLiteral: 14 from 14 to 16", "UPD NumberLiteral: 14 from 14 to 16"]}, {"root": "UPDATE from 4 to 8", "operations": ["UPD NumberLiteral: 4 from 4 to 8", "UPD NumberLiteral: 3 from 3 to 8", "UPD NumberLiteral: 3 from 3 to 8"]}, {"root": "UPDATE from 7 to 9", "operations": ["UPD NumberLiteral: 7 from 7 to 9"]}, {"root": "UPDATE from 24 to 26", "operations": ["UPD NumberLiteral: 24 from 24 to 26"]}, {"root": "UPDATE from 25 to 27", "operations": ["UPD NumberLiteral: 25 from 25 to 27"]}, {"root": "UPDATE from 19 to 22", "operations": ["UPD NumberLiteral: 19 from 19 to 22"]}, {"root": "UPDATE from jjMoveStringLiteralDfa1_0 to jjStopAtPos", "operations": ["UPD SimpleName: jjMoveStringLiteralDfa1_0 from jjMoveStringLiteralDfa1_0 to jjStopAtPos"]}, {"root": "UPDATE from 0x800000L to 0", "operations": ["UPD NumberLiteral: 0x800000L from 0x800000L to 0"]}, {"root": "INS NumberLiteral: 23 to MethodInvocation at 2", "operations": ["INS NumberLiteral: 23 to MethodInvocation at 2"]}, {"root": "UPDATE from 0x20000L to 0x2000000L", "operations": ["UPD NumberLiteral: 0x20000L from 0x20000L to 0x2000000L", "UPD NumberLiteral: 0x800000L from 0x800000L to 0x2000000L", "UPD NumberLiteral: 0x800000L from 0x800000L to 0x2000000L", "UPD NumberLiteral: 0x800000L from 0x800000L to 0x2000000L"]}, {"root": "UPDATE from 0x20000L to 0x80000L", "operations": ["UPD NumberLiteral: 0x20000L from 0x20000L to 0x80000L", "UPD NumberLiteral: 0x400000L from 0x400000L to 0x80000L", "UPD NumberLiteral: 0x20000L from 0x20000L to 0x80000L"]}, {"root": "UPDATE from jjStopAtPos to jjMoveStringLiteralDfa1_0", "operations": ["UPD SimpleName: jjStopAtPos from jjStopAtPos to jjMoveStringLiteralDfa1_0"]}, {"root": "UPDATE from 0 to 0x1000000L", "operations": ["UPD NumberLiteral: 0 from 0 to 0x1000000L", "UPD NumberLiteral: 0x400000L from 0x400000L to 0x1000000L", "UPD NumberLiteral: 0x400000L from 0x400000L to 0x1000000L", "UPD NumberLiteral: 0x400000L from 0x400000L to 0x1000000L"]}, {"root": "UPDATE from 16 to 17", "operations": ["UPD NumberLiteral: 16 from 16 to 17"]}, {"root": "UPDATE from 0x820000L to 0x2080000L", "operations": ["UPD NumberLiteral: 0x820000L from 0x820000L to 0x2080000L"]}, {"root": "UPDATE from 12 to 14", "operations": ["UPD NumberLiteral: 12 from 12 to 14"]}, {"root": "UPDATE from 8 to 10", "operations": ["UPD NumberLiteral: 8 from 8 to 10"]}, {"root": "UPDATE from 22 to 24", "operations": ["UPD NumberLiteral: 22 from 22 to 24"]}, {"root": "UPDATE from 17 to 19", "operations": ["UPD NumberLiteral: 17 from 17 to 19"]}, {"root": "UPDATE from 23 to 25", "operations": ["UPD NumberLiteral: 23 from 23 to 25"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 10", "MOV ExpressionStatement to IfStatement at 1", "MOV IfStatement to SwitchStatement at 10"]}, {"root": "MOVE from DoStatement", "operations": ["MOV InfixExpression: != to DoStatement at 1"]}, {"root": "MOVE from DoStatement", "operations": ["MOV InfixExpression: != to DoStatement at 1"]}, {"root": "MOVE from DoStatement", "operations": ["MOV InfixExpression: != to DoStatement at 1"]}, {"root": "INS InfixExpression: != to DoStatement at 1", "operations": ["INS SimpleName: startsAt to InfixExpression: != at 1", "INS SimpleName: i to InfixExpression: != at 0", "INS InfixExpression: != to DoStatement at 1"]}, {"root": "INS IfStatement to SwitchStatement at 2", "operations": ["INS IfStatement to Block at 0", "INS IfStatement to IfStatement at 2", "INS NumberLiteral: 0L to InfixExpression: != at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to SwitchStatement at 2", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS InfixExpression: > to IfStatement at 0", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: l to InfixExpression: & at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: jjCheckNAddStates to MethodInvocation at 0", "INS NumberLiteral: 39 to InfixExpression: == at 1", "INS NumberLiteral: 6 to InfixExpression: > at 1", "INS ExpressionStatement to IfStatement at 1", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS SimpleName: curChar to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0x3ff000000000000L to InfixExpression: & at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: kind to InfixExpression: > at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: jjCheckNAdd to MethodInvocation at 0"]}, {"root": "INS IfStatement to SwitchStatement at 10", "operations": ["INS IfStatement to SwitchStatement at 10", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: kind to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: kind to InfixExpression: > at 0", "INS NumberLiteral: 6 to InfixExpression: > at 1", "INS NumberLiteral: 6 to Assignment: = at 1"]}, {"root": "INS BreakStatement to SwitchStatement at 12", "operations": ["INS BreakStatement to SwitchStatement at 12"]}, {"root": "INS IfStatement to SwitchStatement at 14", "operations": ["INS ExpressionStatement to IfStatement at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS IfStatement to SwitchStatement at 14", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: jjCheckNAddStates to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS SimpleName: curChar to InfixExpression: == at 0", "INS NumberLiteral: 39 to InfixExpression: == at 1"]}, {"root": "INS SwitchCase to SwitchStatement at 16", "operations": ["INS SwitchCase to SwitchStatement at 16", "INS NumberLiteral: 4 to SwitchCase at 0"]}, {"root": "INS IfStatement to SwitchStatement at 17", "operations": ["INS NumberLiteral: 0L to InfixExpression: != at 1", "INS SimpleName: l to InfixExpression: & at 1", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS IfStatement to SwitchStatement at 17", "INS ExpressionStatement to IfStatement at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: jjCheckNAddStates to MethodInvocation at 0", "INS NumberLiteral: 0xffffff7fffffdbffL to InfixExpression: & at 0", "INS InfixExpression: != to IfStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 18", "operations": ["INS BreakStatement to SwitchStatement at 18"]}, {"root": "INS SwitchCase to SwitchStatement at 19", "operations": ["INS NumberLiteral: 6 to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 19"]}, {"root": "INS IfStatement to SwitchStatement at 20", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 1", "INS NumberLiteral: 0x8400000000L to InfixExpression: & at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS NumberLiteral: 0L to InfixExpression: != at 1", "INS ExpressionStatement to IfStatement at 1", "INS IfStatement to SwitchStatement at 20", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: l to InfixExpression: & at 1", "INS SimpleName: jjCheckNAddStates to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 21", "operations": ["INS BreakStatement to SwitchStatement at 21"]}, {"root": "INS SwitchCase to SwitchStatement at 22", "operations": ["INS SwitchCase to SwitchStatement at 22", "INS NumberLiteral: 7 to SwitchCase at 0"]}, {"root": "INS IfStatement to SwitchStatement at 23", "operations": ["INS InfixExpression: == to InfixExpression: && at 0", "INS SimpleName: curChar to InfixExpression: == at 0", "INS NumberLiteral: 8 to Assignment: = at 1", "INS NumberLiteral: 39 to InfixExpression: == at 1", "INS SimpleName: kind to Assignment: = at 0", "INS SimpleName: kind to InfixExpression: > at 0", "INS NumberLiteral: 8 to InfixExpression: > at 1", "INS ExpressionStatement to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to SwitchStatement at 23", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: > to InfixExpression: && at 1"]}, {"root": "INS BreakStatement to SwitchStatement at 24", "operations": ["INS BreakStatement to SwitchStatement at 24"]}, {"root": "INS SwitchCase to SwitchStatement at 25", "operations": ["INS SwitchCase to SwitchStatement at 25"]}, {"root": "INS BreakStatement to SwitchStatement at 26", "operations": ["INS BreakStatement to SwitchStatement at 26"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS NumberLiteral: 5 to InfixExpression: > at 1", "INS InfixExpression: > to InfixExpression: && at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: kind to InfixExpression: > at 0"]}, {"root": "INS NumberLiteral: 3 to SwitchCase at 0", "operations": ["INS NumberLiteral: 3 to SwitchCase at 0"]}, {"root": "INS IfStatement to SwitchStatement at 3", "operations": ["INS IfStatement to SwitchStatement at 3", "INS SimpleName: kind to InfixExpression: > at 0", "INS InfixExpression: > to IfStatement at 0", "INS NumberLiteral: 5 to InfixExpression: > at 1"]}, {"root": "INS IfStatement to SwitchStatement at 8", "operations": ["INS NumberLiteral: 0 to MethodInvocation at 1", "INS NumberLiteral: 0xffffffffefffffffL to InfixExpression: & at 0", "INS SimpleName: l to InfixExpression: & at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: jjCheckNAddStates to MethodInvocation at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS ExpressionStatement to IfStatement at 1", "INS IfStatement to SwitchStatement at 8", "INS NumberLiteral: 0L to InfixExpression: != at 1"]}, {"root": "INS SwitchCase to SwitchStatement at 10", "operations": ["INS NumberLiteral: 5 to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 10"]}, {"root": "INS IfStatement to SwitchStatement at 11", "operations": ["INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: jjnewStateCnt to PostfixExpression: ++ at 0", "INS SimpleName: curChar to InfixExpression: == at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to IfStatement at 1", "INS IfStatement to SwitchStatement at 11", "INS NumberLiteral: 6 to Assignment: = at 1", "INS NumberLiteral: 92 to InfixExpression: == at 1", "INS SimpleName: jjstateSet to ArrayAccess at 0", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 12", "operations": ["INS BreakStatement to SwitchStatement at 12"]}, {"root": "INS SwitchCase to SwitchStatement at 13", "operations": ["INS SwitchCase to SwitchStatement at 13", "INS NumberLiteral: 6 to SwitchCase at 0"]}, {"root": "INS IfStatement to SwitchStatement at 14", "operations": ["INS NumberLiteral: 0L to InfixExpression: != at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: jjCheckNAddStates to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS SimpleName: l to InfixExpression: & at 1", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS NumberLiteral: 0x14404410000000L to InfixExpression: & at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to SwitchStatement at 14", "INS ExpressionStatement to IfStatement at 1", "INS NumberLiteral: 2 to MethodInvocation at 2"]}, {"root": "INS BreakStatement to SwitchStatement at 15", "operations": ["INS BreakStatement to SwitchStatement at 15"]}, {"root": "INS SwitchCase to SwitchStatement at 16", "operations": ["INS SwitchCase to SwitchStatement at 16"]}, {"root": "INS BreakStatement to SwitchStatement at 17", "operations": ["INS BreakStatement to SwitchStatement at 17"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ArrayAccess to SwitchStatement at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 1", "operations": ["INS NumberLiteral: 4 to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 1"]}, {"root": "INS IfStatement to SwitchStatement at 2", "operations": ["INS SimpleName: l1 to MethodInvocation at 4", "INS IfStatement to SwitchStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 2", "INS NumberLiteral: 0 to MethodInvocation at 1", "INS SimpleName: jjCanMove_0 to MethodInvocation at 0", "INS SimpleName: hiByte to MethodInvocation at 1", "INS SimpleName: l2 to MethodInvocation at 5", "INS SimpleName: jjAddStates to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: i1 to MethodInvocation at 2", "INS SimpleName: i2 to MethodInvocation at 3", "INS ExpressionStatement to IfStatement at 1"]}, {"root": "INS BreakStatement to SwitchStatement at 3", "operations": ["INS BreakStatement to SwitchStatement at 3"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 1", "MOV ArrayAccess to SwitchStatement at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ArrayAccess to SwitchStatement at 0", "MOV SwitchCase to SwitchStatement at 1"]}, {"root": "INS ArrayAccess to SwitchStatement at 0", "operations": ["INS ArrayAccess to SwitchStatement at 0", "INS SimpleName: jjstateSet to ArrayAccess at 0", "INS PrefixExpression: -- to ArrayAccess at 1", "INS SimpleName: i to PrefixExpression: -- at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 1"]}, {"root": "INS NumberLiteral: 4 to SwitchCase at 0", "operations": ["INS NumberLiteral: 4 to SwitchCase at 0"]}, {"root": "INS ExpressionStatement to IfStatement at 1", "operations": ["INS NumberLiteral: 13 to Assignment: = at 1", "INS ExpressionStatement to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: kind to Assignment: = at 0"]}, {"root": "UPDATE from 11 to 13", "operations": ["UPD NumberLiteral: 11 from 11 to 13"]}, {"root": "UPDATE from 10 to 12", "operations": ["UPD NumberLiteral: 10 from 10 to 12", "UPD NumberLiteral: 10 from 10 to 12", "UPD NumberLiteral: 10 from 10 to 12", "UPD NumberLiteral: 10 from 10 to 12", "UPD NumberLiteral: 10 from 10 to 12", "UPD NumberLiteral: 10 from 10 to 12"]}, {"root": "MOVE from IfStatement", "operations": ["MOV ExpressionStatement to IfStatement at 1"]}, {"root": "UPDATE from 9 to 11", "operations": ["UPD NumberLiteral: 9 from 9 to 11"]}, {"root": "DEL NumberLiteral: 15", "operations": ["DEL NumberLiteral: 15"]}, {"root": "DEL ArrayAccess", "operations": ["DEL PrefixExpression: --", "DEL SimpleName: jjstateSet", "DEL ArrayAccess", "DEL SimpleName: i"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: startsAt", "DEL SimpleName: i", "DEL InfixExpression: !="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL NumberLiteral: 9", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: kind"]}]}}, {"JsonParserTokenManager_diff": {"operations": ["Move FieldDeclaration(1805) into TypeDeclaration: class(3146) at 22", "Move FieldDeclaration(1818) into TypeDeclaration: class(3146) at 23", "Move FieldDeclaration(2338) into TypeDeclaration: class(3146) at 46", "Move ArrayType: int[](2330) into FieldDeclaration(2293) at 2", "Move ArrayType: long[](2314) into FieldDeclaration(2467) at 2", "Move ArrayType: long[](2294) into FieldDeclaration(2487) at 2", "Move ArrayType: int[](2127) into FieldDeclaration(2519) at 2", "Move ReturnStatement(672) into SwitchStatement(746) at 25", "Move ReturnStatement(693) into SwitchStatement(746) at 11", "Move ReturnStatement(700) into SwitchStatement(746) at 4", "Move ReturnStatement(707) into SwitchStatement(746) at 10", "Move SwitchCase(709) into SwitchStatement(746) at 16", "Move SwitchCase(715) into SwitchStatement(746) at 18", "Move SwitchCase(721) into SwitchStatement(746) at 20", "Move SwitchCase(727) into SwitchStatement(746) at 22", "Move SwitchCase(734) into SwitchStatement(746) at 24", "Move PrefixExpression: -(2259) into ArrayInitializer(2455) at 7", "Move PrefixExpression: -(2263) into ArrayInitializer(2455) at 11", "Move NumberLiteral: 1(2264) into ArrayInitializer(2455) at 16", "Move PrefixExpression: -(2268) into ArrayInitializer(2455) at 7", "Update SimpleName: jjstateSet(2344) to jjrounds", "Update SimpleName: jjrounds(2331) to jjstateSet", "Insert NumberLiteral: 4(2288) into ArrayInitializer(2291) at 0", "Insert NumberLiteral: 5(2289) into ArrayInitializer(2291) at 1", "Insert NumberLiteral: 7(2290) into ArrayInitializer(2291) at 2", "Insert NullLiteral(2359) into ArrayInitializer(2380) at 7", "Insert NullLiteral(2360) into ArrayInitializer(2380) at 8", "Insert PrefixExpression: -(2452) into ArrayInitializer(2455) at 26", "Insert PrefixExpression: -(2454) into ArrayInitializer(2455) at 27", "Update NumberLiteral: 0x3ffcee1L(2296) to 0xfff3b61L", "Update NumberLiteral: 0x1100L(2316) to 0x4400L", "Update NumberLiteral: 4(2335) to 16", "Update NumberLiteral: 3(1062) to 8", "Insert NumberLiteral: 1(2451) into PrefixExpression: -(2452) at 0", "Insert NumberLiteral: 1(2453) into PrefixExpression: -(2454) at 0", "Update NumberLiteral: 4(2432) to 8", "Update NumberLiteral: 7(663) to 9", "Update NumberLiteral: 24(677) to 26", "Update NumberLiteral: 25(684) to 27", "Update NumberLiteral: 19(691) to 22", "Update SimpleName: jjMoveStringLiteralDfa1_0(710) to jjStopAtPos", "Update NumberLiteral: 0x800000L(711) to 0", "Insert NumberLiteral: 23(705) into MethodInvocation(706) at 2", "Update NumberLiteral: 0x20000L(717) to 0x2000000L", "Update NumberLiteral: 0x400000L(723) to 0x80000L", "Update SimpleName: jjStopAtPos(728) to jjMoveStringLiteralDfa1_0", "Update NumberLiteral: 0(729) to 0x1000000L", "Update NumberLiteral: 16(737) to 17", "Update NumberLiteral: 0x800000L(782) to 0x2000000L", "Update NumberLiteral: 0x400000L(789) to 0x1000000L", "Update NumberLiteral: 0x20000L(796) to 0x80000L", "Update NumberLiteral: 0x820000L(858) to 0x2080000L", "Update NumberLiteral: 0x400000L(865) to 0x1000000L", "Update NumberLiteral: 0x800000L(957) to 0x2000000L", "Update NumberLiteral: 12(1419) to 14", "Update NumberLiteral: 8(1781) to 10", "Update NumberLiteral: 22(933) to 24", "Update NumberLiteral: 17(948) to 19", "Update NumberLiteral: 23(1025) to 25", "Update NumberLiteral: 0x400000L(926) to 0x1000000L", "Update NumberLiteral: 0x20000L(941) to 0x80000L", "Update NumberLiteral: 0x800000L(1018) to 0x2000000L", "Move SwitchCase(1109) into SwitchStatement(1264) at 10", "Move IfStatement(1117) into SwitchStatement(1264) at 10", "Move ExpressionStatement(1125) into SwitchStatement(1264) at 10", "Move InfixExpression: !=(1559) into DoStatement(1445) at 1", "Update NumberLiteral: 3(1290) to 8", "Move InfixExpression: !=(1979) into DoStatement(1745) at 1", "Move InfixExpression: !=(2060) into DoStatement(2139) at 1", "Insert InfixExpression: !=(2219) into DoStatement(2220) at 1", "Insert IfStatement(1162) into SwitchStatement(1264) at 2", "Insert IfStatement(1199) into SwitchStatement(1264) at 9", "Insert BreakStatement(1204) into SwitchStatement(1264) at 11", "Insert IfStatement(1215) into SwitchStatement(1264) at 13", "Insert SwitchCase(1218) into SwitchStatement(1264) at 15", "Insert IfStatement(1230) into SwitchStatement(1264) at 16", "Insert BreakStatement(1231) into SwitchStatement(1264) at 17", "Insert SwitchCase(1233) into SwitchStatement(1264) at 18", "Insert IfStatement(1245) into SwitchStatement(1264) at 19", "Insert BreakStatement(1246) into SwitchStatement(1264) at 20", "Insert SwitchCase(1248) into SwitchStatement(1264) at 21", "Insert IfStatement(1260) into SwitchStatement(1264) at 22", "Insert BreakStatement(1261) into SwitchStatement(1264) at 23", "Insert SwitchCase(1262) into SwitchStatement(1264) at 24", "Insert BreakStatement(1263) into SwitchStatement(1264) at 25", "Insert SimpleName: i(2217) into InfixExpression: !=(2219) at 0", "Insert SimpleName: startsAt(2218) into InfixExpression: !=(2219) at 1", "Insert InfixExpression: !=(1139) into IfStatement(1162) at 0", "Insert Block(1152) into IfStatement(1162) at 1", "Insert IfStatement(1161) into IfStatement(1162) at 2", "Insert InfixExpression: &&(1175) into IfStatement(1180) at 0", "Insert InfixExpression: >(1194) into IfStatement(1199) at 0", "Insert ExpressionStatement(1198) into IfStatement(1199) at 1", "Insert NumberLiteral: 3(1205) into SwitchCase(1206) at 0", "Insert InfixExpression: ==(1209) into IfStatement(1215) at 0", "Insert ExpressionStatement(1214) into IfStatement(1215) at 1", "Insert NumberLiteral: 4(1217) into SwitchCase(1218) at 0", "Insert InfixExpression: !=(1224) into IfStatement(1230) at 0", "Insert ExpressionStatement(1229) into IfStatement(1230) at 1", "Insert NumberLiteral: 6(1232) into SwitchCase(1233) at 0", "Insert InfixExpression: !=(1239) into IfStatement(1245) at 0", "Insert ExpressionStatement(1244) into IfStatement(1245) at 1", "Insert NumberLiteral: 7(1247) into SwitchCase(1248) at 0", "Insert InfixExpression: &&(1255) into IfStatement(1260) at 0", "Insert ExpressionStatement(1259) into IfStatement(1260) at 1", "Insert IfStatement(1307) into SwitchStatement(1362) at 3", "Insert IfStatement(1329) into SwitchStatement(1362) at 7", "Insert SwitchCase(1332) into SwitchStatement(1362) at 9", "Insert IfStatement(1343) into SwitchStatement(1362) at 10", "Insert BreakStatement(1344) into SwitchStatement(1362) at 11", "Insert SwitchCase(1346) into SwitchStatement(1362) at 12", "Insert IfStatement(1358) into SwitchStatement(1362) at 13", "Insert BreakStatement(1359) into SwitchStatement(1362) at 14", "Insert SwitchCase(1360) into SwitchStatement(1362) at 15", "Insert BreakStatement(1361) into SwitchStatement(1362) at 16", "Move ArrayAccess(1538) into SwitchStatement(1440) at 0", "Insert SwitchCase(1423) into SwitchStatement(1440) at 1", "Insert IfStatement(1436) into SwitchStatement(1440) at 2", "Insert BreakStatement(1437) into SwitchStatement(1440) at 3", "Move ArrayAccess(1958) into SwitchStatement(1740) at 0", "Move ArrayAccess(2034) into SwitchStatement(2134) at 0", "Move SwitchCase(2036) into SwitchStatement(2134) at 1", "Insert ArrayAccess(2193) into SwitchStatement(2215) at 0", "Move SwitchCase(1960) into SwitchStatement(2215) at 1", "Insert ParenthesizedExpression(1137) into InfixExpression: !=(1139) at 0", "Insert NumberLiteral: 0L(1138) into InfixExpression: !=(1139) at 1", "Insert IfStatement(1147) into Block(1152) at 0", "Insert ExpressionStatement(1151) into Block(1152) at 1", "Insert InfixExpression: ==(1155) into IfStatement(1161) at 0", "Insert ExpressionStatement(1160) into IfStatement(1161) at 1", "Move InfixExpression: !=(1134) into InfixExpression: &&(1175) at 0", "Insert InfixExpression: >(1174) into InfixExpression: &&(1175) at 1", "Insert SimpleName: kind(1192) into InfixExpression: >(1194) at 0", "Insert NumberLiteral: 6(1193) into InfixExpression: >(1194) at 1", "Insert Assignment: =(1197) into ExpressionStatement(1198) at 0", "Insert SimpleName: curChar(1207) into InfixExpression: ==(1209) at 0", "Insert NumberLiteral: 39(1208) into InfixExpression: ==(1209) at 1", "Insert MethodInvocation(1213) into ExpressionStatement(1214) at 0", "Insert ParenthesizedExpression(1222) into InfixExpression: !=(1224) at 0", "Insert NumberLiteral: 0L(1223) into InfixExpression: !=(1224) at 1", "Insert MethodInvocation(1228) into ExpressionStatement(1229) at 0", "Insert ParenthesizedExpression(1237) into InfixExpression: !=(1239) at 0", "Insert NumberLiteral: 0L(1238) into InfixExpression: !=(1239) at 1", "Insert MethodInvocation(1243) into ExpressionStatement(1244) at 0", "Insert InfixExpression: ==(1251) into InfixExpression: &&(1255) at 0", "Insert InfixExpression: >(1254) into InfixExpression: &&(1255) at 1", "Insert Assignment: =(1258) into ExpressionStatement(1259) at 0", "Insert InfixExpression: >(1302) into IfStatement(1307) at 0", "Move ExpressionStatement(1182) into IfStatement(1307) at 1", "Insert NumberLiteral: 4(1316) into SwitchCase(1317) at 0", "Insert InfixExpression: !=(1323) into IfStatement(1329) at 0", "Insert ExpressionStatement(1328) into IfStatement(1329) at 1", "Insert NumberLiteral: 5(1331) into SwitchCase(1332) at 0", "Insert InfixExpression: ==(1335) into IfStatement(1343) at 0", "Insert ExpressionStatement(1342) into IfStatement(1343) at 1", "Insert NumberLiteral: 6(1345) into SwitchCase(1346) at 0", "Insert InfixExpression: !=(1352) into IfStatement(1358) at 0", "Insert ExpressionStatement(1357) into IfStatement(1358) at 1", "Insert NumberLiteral: 4(1422) into SwitchCase(1423) at 0", "Insert MethodInvocation(1430) into IfStatement(1436) at 0", "Insert ExpressionStatement(1435) into IfStatement(1436) at 1", "Insert ExpressionStatement(1735) into IfStatement(1736) at 1", "Insert SimpleName: jjstateSet(2190) into ArrayAccess(2193) at 0", "Insert PrefixExpression: --(2192) into ArrayAccess(2193) at 1", "Update NumberLiteral: 14(305) to 16", "Update NumberLiteral: 14(309) to 16", "Insert InfixExpression: &(1136) into ParenthesizedExpression(1137) at 0", "Insert InfixExpression: >(1142) into IfStatement(1147) at 0", "Move ExpressionStatement(1121) into IfStatement(1147) at 1", "Insert MethodInvocation(1150) into ExpressionStatement(1151) at 0", "Insert SimpleName: curChar(1153) into InfixExpression: ==(1155) at 0", "Insert NumberLiteral: 39(1154) into InfixExpression: ==(1155) at 1", "Insert MethodInvocation(1159) into ExpressionStatement(1160) at 0", "Insert SimpleName: kind(1172) into InfixExpression: >(1174) at 0", "Insert NumberLiteral: 5(1173) into InfixExpression: >(1174) at 1", "Insert SimpleName: kind(1195) into Assignment: =(1197) at 0", "Insert NumberLiteral: 6(1196) into Assignment: =(1197) at 1", "Insert SimpleName: jjCheckNAddStates(1210) into MethodInvocation(1213) at 0", "Insert NumberLiteral: 0(1211) into MethodInvocation(1213) at 1", "Insert NumberLiteral: 2(1212) into MethodInvocation(1213) at 2", "Insert InfixExpression: &(1221) into ParenthesizedExpression(1222) at 0", "Insert SimpleName: jjCheckNAddStates(1225) into MethodInvocation(1228) at 0", "Insert NumberLiteral: 0(1226) into MethodInvocation(1228) at 1", "Insert NumberLiteral: 2(1227) into MethodInvocation(1228) at 2", "Insert InfixExpression: &(1236) into ParenthesizedExpression(1237) at 0", "Insert SimpleName: jjCheckNAddStates(1240) into MethodInvocation(1243) at 0", "Insert NumberLiteral: 0(1241) into MethodInvocation(1243) at 1", "Insert NumberLiteral: 2(1242) into MethodInvocation(1243) at 2", "Insert SimpleName: curChar(1249) into InfixExpression: ==(1251) at 0", "Insert NumberLiteral: 39(1250) into InfixExpression: ==(1251) at 1", "Insert SimpleName: kind(1252) into InfixExpression: >(1254) at 0", "Insert NumberLiteral: 8(1253) into InfixExpression: >(1254) at 1", "Insert SimpleName: kind(1256) into Assignment: =(1258) at 0", "Insert NumberLiteral: 8(1257) into Assignment: =(1258) at 1", "Insert SimpleName: kind(1300) into InfixExpression: >(1302) at 0", "Insert NumberLiteral: 5(1301) into InfixExpression: >(1302) at 1", "Insert ParenthesizedExpression(1321) into InfixExpression: !=(1323) at 0", "Insert NumberLiteral: 0L(1322) into InfixExpression: !=(1323) at 1", "Insert MethodInvocation(1327) into ExpressionStatement(1328) at 0", "Insert SimpleName: curChar(1333) into InfixExpression: ==(1335) at 0", "Insert NumberLiteral: 92(1334) into InfixExpression: ==(1335) at 1", "Insert Assignment: =(1341) into ExpressionStatement(1342) at 0", "Insert ParenthesizedExpression(1350) into InfixExpression: !=(1352) at 0", "Insert NumberLiteral: 0L(1351) into InfixExpression: !=(1352) at 1", "Insert MethodInvocation(1356) into ExpressionStatement(1357) at 0", "Insert SimpleName: jjCanMove_0(1424) into MethodInvocation(1430) at 0", "Insert SimpleName: hiByte(1425) into MethodInvocation(1430) at 1", "Insert SimpleName: i1(1426) into MethodInvocation(1430) at 2", "Insert SimpleName: i2(1427) into MethodInvocation(1430) at 3", "Insert SimpleName: l1(1428) into MethodInvocation(1430) at 4", "Insert SimpleName: l2(1429) into MethodInvocation(1430) at 5", "Insert MethodInvocation(1434) into ExpressionStatement(1435) at 0", "Update NumberLiteral: 11(1506) to 13", "Insert Assignment: =(1734) into ExpressionStatement(1735) at 0", "Update NumberLiteral: 10(1926) to 12", "Insert SimpleName: i(2191) into PrefixExpression: --(2192) at 0", "Update NumberLiteral: 14(402) to 16", "Update NumberLiteral: 14(406) to 16", "Insert NumberLiteral: 0x3ff000000000000L(1134) into InfixExpression: &(1136) at 0", "Insert SimpleName: l(1135) into InfixExpression: &(1136) at 1", "Insert SimpleName: kind(1140) into InfixExpression: >(1142) at 0", "Insert NumberLiteral: 6(1141) into InfixExpression: >(1142) at 1", "Insert SimpleName: jjCheckNAdd(1148) into MethodInvocation(1150) at 0", "Insert NumberLiteral: 2(1149) into MethodInvocation(1150) at 1", "Insert SimpleName: jjCheckNAddStates(1156) into MethodInvocation(1159) at 0", "Insert NumberLiteral: 0(1157) into MethodInvocation(1159) at 1", "Insert NumberLiteral: 2(1158) into MethodInvocation(1159) at 2", "Insert NumberLiteral: 0xffffff7fffffdbffL(1219) into InfixExpression: &(1221) at 0", "Insert SimpleName: l(1220) into InfixExpression: &(1221) at 1", "Insert NumberLiteral: 0x8400000000L(1234) into InfixExpression: &(1236) at 0", "Insert SimpleName: l(1235) into InfixExpression: &(1236) at 1", "Insert InfixExpression: &(1320) into ParenthesizedExpression(1321) at 0", "Insert SimpleName: jjCheckNAddStates(1324) into MethodInvocation(1327) at 0", "Insert NumberLiteral: 0(1325) into MethodInvocation(1327) at 1", "Insert NumberLiteral: 2(1326) into MethodInvocation(1327) at 2", "Insert ArrayAccess(1339) into Assignment: =(1341) at 0", "Insert NumberLiteral: 6(1340) into Assignment: =(1341) at 1", "Insert InfixExpression: &(1349) into ParenthesizedExpression(1350) at 0", "Insert SimpleName: jjCheckNAddStates(1353) into MethodInvocation(1356) at 0", "Insert NumberLiteral: 0(1354) into MethodInvocation(1356) at 1", "Insert NumberLiteral: 2(1355) into MethodInvocation(1356) at 2", "Insert SimpleName: jjAddStates(1431) into MethodInvocation(1434) at 0", "Insert NumberLiteral: 0(1432) into MethodInvocation(1434) at 1", "Insert NumberLiteral: 2(1433) into MethodInvocation(1434) at 2", "Insert SimpleName: kind(1732) into Assignment: =(1734) at 0", "Insert NumberLiteral: 13(1733) into Assignment: =(1734) at 1", "Update NumberLiteral: 10(1894) to 12", "Move ExpressionStatement(1550) into IfStatement(2071) at 1", "Update NumberLiteral: 10(1968) to 12", "Update NumberLiteral: 10(2045) to 12", "Update NumberLiteral: 10(2049) to 12", "Insert NumberLiteral: 0xffffffffefffffffL(1318) into InfixExpression: &(1320) at 0", "Insert SimpleName: l(1319) into InfixExpression: &(1320) at 1", "Insert SimpleName: jjstateSet(1336) into ArrayAccess(1339) at 0", "Insert PostfixExpression: ++(1338) into ArrayAccess(1339) at 1", "Insert NumberLiteral: 0x14404410000000L(1347) into InfixExpression: &(1349) at 0", "Insert SimpleName: l(1348) into InfixExpression: &(1349) at 1", "Update NumberLiteral: 10(1897) to 12", "Update NumberLiteral: 9(1906) to 11", "Insert SimpleName: jjnewStateCnt(1337) into PostfixExpression: ++(1338) at 0", "Delete NumberLiteral: 15(730)", "Delete SimpleName: jjstateSet(1249)", "Delete SimpleName: i(1250)", "Delete PrefixExpression: --(1251)", "Delete ArrayAccess(1252)", "Delete SimpleName: i(1257)", "Delete SimpleName: startsAt(1258)", "Delete InfixExpression: !=(1259)", "Delete SimpleName: kind(1908)", "Delete NumberLiteral: 9(1909)", "Delete Assignment: =(1910)", "Delete ExpressionStatement(1911)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}