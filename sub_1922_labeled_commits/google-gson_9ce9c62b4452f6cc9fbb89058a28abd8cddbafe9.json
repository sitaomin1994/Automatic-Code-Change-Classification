{"application": "google-gson", "csha": "9ce9c62b4452f6cc9fbb89058a28abd8cddbafe9", "files": [{"JsonElementReader_cluster": {"actions": [{"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: This reader walks the elements of a JsonElement as if it was coming from a to TagElement at 0", "INS TextElement: character stream. to TagElement at 1", "INS TagElement to Javadoc at 0"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: JsonToken to VariableDeclarationStatement at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS StringLiteral: \" but was \" to InfixExpression: + at 2", "INS SimpleName: JsonToken to SimpleType: JsonToken at 0", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: != at 1", "INS Block to MethodDeclaration at 5", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: token to VariableDeclarationFragment at 0", "INS SimpleName: token to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS ThrowStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: token to InfixExpression: + at 3", "INS Block to IfStatement at 1", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: JsonToken.STRING to InfixExpression: + at 1", "INS IfStatement to Block at 1", "INS SimpleName: token to InfixExpression: != at 0", "INS QualifiedName: JsonToken.STRING to InfixExpression: != at 1", "INS SimpleName: peek to MethodInvocation at 0", "INS StringLiteral: \"Expected \" to InfixExpression: + at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: JsonToken to VariableDeclarationStatement at 0", "INS SimpleName: peek to MethodInvocation at 0", "INS SimpleName: JsonToken to SimpleType: JsonToken at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: token to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS StringLiteral: \" but was \" to InfixExpression: + at 2", "INS StringLiteral: \"Expected \" to InfixExpression: + at 0", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: != at 1", "INS QualifiedName: JsonToken.STRING to InfixExpression: != at 1", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: token to InfixExpression: + at 3", "INS IfStatement to Block at 1", "INS SimpleName: token to InfixExpression: != at 0", "INS SimpleName: token to InfixExpression: != at 0", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS PrimitiveType: double to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS SimpleName: result to ReturnStatement at 0", "INS ReturnStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: JsonToken to VariableDeclarationStatement at 0", "INS SimpleName: JsonToken to SimpleType: JsonToken at 0", "INS SimpleName: peek to MethodInvocation at 0", "INS SimpleName: token to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS ThrowStatement to Block at 0", "INS QualifiedName: JsonToken.STRING to InfixExpression: != at 1", "INS StringLiteral: \"Expected \" to InfixExpression: + at 0", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: + at 1", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: != at 1", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: token to InfixExpression: != at 0", "INS SimpleName: token to InfixExpression: + at 3", "INS IfStatement to Block at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS StringLiteral: \" but was \" to InfixExpression: + at 2", "INS InfixExpression: && to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: token to InfixExpression: != at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: result to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS SimpleName: result to ReturnStatement at 0", "INS ReturnStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: token to VariableDeclarationFragment at 0", "INS SimpleName: JsonToken to SimpleType: JsonToken at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: peek to MethodInvocation at 0", "INS SimpleType: JsonToken to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS IfStatement to Block at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS ThrowStatement to Block at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: != at 1", "INS StringLiteral: \" but was \" to InfixExpression: + at 2", "INS SimpleName: token to InfixExpression: + at 3", "INS SimpleName: token to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS QualifiedName: JsonToken.STRING to InfixExpression: != at 1", "INS QualifiedName: JsonToken.NUMBER to InfixExpression: + at 1", "INS SimpleName: token to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS StringLiteral: \"Expected \" to InfixExpression: + at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS ReturnStatement to Block at 4", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0", "MOV SimpleType: JsonPrimitive to CastExpression at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0", "MOV SimpleType: JsonPrimitive to CastExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAsDouble to MethodInvocation at 1", "MOV ParenthesizedExpression to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ParenthesizedExpression to MethodInvocation at 0", "MOV SimpleName: getAsLong to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAsInt to MethodInvocation at 1", "MOV ParenthesizedExpression to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to CastExpression at 1", "operations": ["INS SimpleName: peekStack to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1"]}, {"root": "INS MethodInvocation to CastExpression at 1", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: peekStack to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to CastExpression at 1", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: peekStack to MethodInvocation at 0"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement: Creates a new instance that reads a JSON-encoded stream from ", "DEL TagElement", "DEL TextElement:  in", "DEL TagElement: @code", "DEL TextElement: ."]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL QualifiedName: JsonToken.STRING", "DEL ExpressionStatement", "DEL SimpleName: expect", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: expect", "DEL MethodInvocation", "DEL QualifiedName: JsonToken.NUMBER", "DEL ExpressionStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: expect", "DEL QualifiedName: JsonToken.NUMBER"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL QualifiedName: JsonToken.NUMBER", "DEL SimpleName: expect"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}]}}, {"JsonElementReader_diff": {"operations": ["Insert TagElement(30) into Javadoc(31) at 0", "Insert Block(552) into MethodDeclaration(553) at 5", "Move MarkerAnnotation(597) into MethodDeclaration(642) at 0", "Move SimpleType: IOException(602) into MethodDeclaration(642) at 5", "Move MarkerAnnotation(619) into MethodDeclaration(693) at 0", "Move SimpleType: IOException(624) into MethodDeclaration(693) at 4", "Move MarkerAnnotation(575) into MethodDeclaration(744) at 0", "Move SimpleType: IOException(580) into MethodDeclaration(744) at 4", "Insert TextElement: This reader walks the elements of a JsonElement as if it was coming from a(28) into TagElement(30) at 0", "Insert TextElement: character stream.(29) into TagElement(30) at 1", "Insert VariableDeclarationStatement(524) into Block(552) at 0", "Insert IfStatement(542) into Block(552) at 1", "Move ReturnStatement(533) into Block(552) at 2", "Insert VariableDeclarationStatement(605) into Block(641) at 0", "Insert IfStatement(623) into Block(641) at 1", "Insert VariableDeclarationStatement(635) into Block(641) at 2", "Insert ExpressionStatement(638) into Block(641) at 3", "Insert ReturnStatement(640) into Block(641) at 4", "Insert VariableDeclarationStatement(656) into Block(692) at 0", "Insert IfStatement(674) into Block(692) at 1", "Insert VariableDeclarationStatement(686) into Block(692) at 2", "Insert ExpressionStatement(689) into Block(692) at 3", "Insert ReturnStatement(691) into Block(692) at 4", "Insert VariableDeclarationStatement(707) into Block(743) at 0", "Insert IfStatement(725) into Block(743) at 1", "Insert VariableDeclarationStatement(737) into Block(743) at 2", "Insert ExpressionStatement(740) into Block(743) at 3", "Insert ReturnStatement(742) into Block(743) at 4", "Insert SimpleType: JsonToken(519) into VariableDeclarationStatement(524) at 0", "Insert VariableDeclarationFragment(523) into VariableDeclarationStatement(524) at 1", "Insert InfixExpression: &&(531) into IfStatement(542) at 0", "Insert Block(541) into IfStatement(542) at 1", "Insert SimpleType: JsonToken(600) into VariableDeclarationStatement(605) at 0", "Insert VariableDeclarationFragment(604) into VariableDeclarationStatement(605) at 1", "Insert InfixExpression: &&(612) into IfStatement(623) at 0", "Insert Block(622) into IfStatement(623) at 1", "Insert PrimitiveType: double(624) into VariableDeclarationStatement(635) at 0", "Insert VariableDeclarationFragment(634) into VariableDeclarationStatement(635) at 1", "Move MethodInvocation(632) into ExpressionStatement(638) at 0", "Insert SimpleName: result(639) into ReturnStatement(640) at 0", "Insert SimpleType: JsonToken(651) into VariableDeclarationStatement(656) at 0", "Insert VariableDeclarationFragment(655) into VariableDeclarationStatement(656) at 1", "Insert InfixExpression: &&(663) into IfStatement(674) at 0", "Insert Block(673) into IfStatement(674) at 1", "Insert PrimitiveType: long(675) into VariableDeclarationStatement(686) at 0", "Insert VariableDeclarationFragment(685) into VariableDeclarationStatement(686) at 1", "Move MethodInvocation(610) into ExpressionStatement(689) at 0", "Insert SimpleName: result(690) into ReturnStatement(691) at 0", "Insert SimpleType: JsonToken(702) into VariableDeclarationStatement(707) at 0", "Insert VariableDeclarationFragment(706) into VariableDeclarationStatement(707) at 1", "Insert InfixExpression: &&(714) into IfStatement(725) at 0", "Insert Block(724) into IfStatement(725) at 1", "Insert PrimitiveType: int(726) into VariableDeclarationStatement(737) at 0", "Insert VariableDeclarationFragment(736) into VariableDeclarationStatement(737) at 1", "Move MethodInvocation(588) into ExpressionStatement(740) at 0", "Insert SimpleName: result(741) into ReturnStatement(742) at 0", "Insert SimpleName: JsonToken(518) into SimpleType: JsonToken(519) at 0", "Insert SimpleName: token(520) into VariableDeclarationFragment(523) at 0", "Insert MethodInvocation(522) into VariableDeclarationFragment(523) at 1", "Insert InfixExpression: !=(527) into InfixExpression: &&(531) at 0", "Insert InfixExpression: !=(530) into InfixExpression: &&(531) at 1", "Insert ThrowStatement(540) into Block(541) at 0", "Insert SimpleName: JsonToken(599) into SimpleType: JsonToken(600) at 0", "Insert SimpleName: token(601) into VariableDeclarationFragment(604) at 0", "Insert MethodInvocation(603) into VariableDeclarationFragment(604) at 1", "Insert InfixExpression: !=(608) into InfixExpression: &&(612) at 0", "Insert InfixExpression: !=(611) into InfixExpression: &&(612) at 1", "Insert ThrowStatement(621) into Block(622) at 0", "Insert SimpleName: result(625) into VariableDeclarationFragment(634) at 0", "Insert MethodInvocation(633) into VariableDeclarationFragment(634) at 1", "Insert SimpleName: JsonToken(650) into SimpleType: JsonToken(651) at 0", "Insert SimpleName: token(652) into VariableDeclarationFragment(655) at 0", "Insert MethodInvocation(654) into VariableDeclarationFragment(655) at 1", "Insert InfixExpression: !=(659) into InfixExpression: &&(663) at 0", "Insert InfixExpression: !=(662) into InfixExpression: &&(663) at 1", "Insert ThrowStatement(672) into Block(673) at 0", "Insert SimpleName: result(676) into VariableDeclarationFragment(685) at 0", "Insert MethodInvocation(684) into VariableDeclarationFragment(685) at 1", "Insert SimpleName: JsonToken(701) into SimpleType: JsonToken(702) at 0", "Insert SimpleName: token(703) into VariableDeclarationFragment(706) at 0", "Insert MethodInvocation(705) into VariableDeclarationFragment(706) at 1", "Insert InfixExpression: !=(710) into InfixExpression: &&(714) at 0", "Insert InfixExpression: !=(713) into InfixExpression: &&(714) at 1", "Insert ThrowStatement(723) into Block(724) at 0", "Insert SimpleName: result(727) into VariableDeclarationFragment(736) at 0", "Insert MethodInvocation(735) into VariableDeclarationFragment(736) at 1", "Insert SimpleName: peek(521) into MethodInvocation(522) at 0", "Insert SimpleName: token(525) into InfixExpression: !=(527) at 0", "Insert QualifiedName: JsonToken.STRING(526) into InfixExpression: !=(527) at 1", "Insert SimpleName: token(528) into InfixExpression: !=(530) at 0", "Insert QualifiedName: JsonToken.NUMBER(529) into InfixExpression: !=(530) at 1", "Insert ClassInstanceCreation(539) into ThrowStatement(540) at 0", "Insert SimpleName: peek(602) into MethodInvocation(603) at 0", "Insert SimpleName: token(606) into InfixExpression: !=(608) at 0", "Insert QualifiedName: JsonToken.NUMBER(607) into InfixExpression: !=(608) at 1", "Insert SimpleName: token(609) into InfixExpression: !=(611) at 0", "Insert QualifiedName: JsonToken.STRING(610) into InfixExpression: !=(611) at 1", "Insert ClassInstanceCreation(620) into ThrowStatement(621) at 0", "Move ParenthesizedExpression(590) into MethodInvocation(633) at 0", "Move SimpleName: getAsDouble(591) into MethodInvocation(633) at 1", "Insert SimpleName: peek(653) into MethodInvocation(654) at 0", "Insert SimpleName: token(657) into InfixExpression: !=(659) at 0", "Insert QualifiedName: JsonToken.NUMBER(658) into InfixExpression: !=(659) at 1", "Insert SimpleName: token(660) into InfixExpression: !=(662) at 0", "Insert QualifiedName: JsonToken.STRING(661) into InfixExpression: !=(662) at 1", "Insert ClassInstanceCreation(671) into ThrowStatement(672) at 0", "Move ParenthesizedExpression(612) into MethodInvocation(684) at 0", "Move SimpleName: getAsLong(613) into MethodInvocation(684) at 1", "Insert SimpleName: peek(704) into MethodInvocation(705) at 0", "Insert SimpleName: token(708) into InfixExpression: !=(710) at 0", "Insert QualifiedName: JsonToken.NUMBER(709) into InfixExpression: !=(710) at 1", "Insert SimpleName: token(711) into InfixExpression: !=(713) at 0", "Insert QualifiedName: JsonToken.STRING(712) into InfixExpression: !=(713) at 1", "Insert ClassInstanceCreation(722) into ThrowStatement(723) at 0", "Move ParenthesizedExpression(634) into MethodInvocation(735) at 0", "Move SimpleName: getAsInt(635) into MethodInvocation(735) at 1", "Insert SimpleType: IllegalStateException(533) into ClassInstanceCreation(539) at 0", "Insert InfixExpression: +(538) into ClassInstanceCreation(539) at 1", "Insert SimpleType: IllegalStateException(614) into ClassInstanceCreation(620) at 0", "Insert InfixExpression: +(619) into ClassInstanceCreation(620) at 1", "Insert SimpleType: IllegalStateException(665) into ClassInstanceCreation(671) at 0", "Insert InfixExpression: +(670) into ClassInstanceCreation(671) at 1", "Insert SimpleType: IllegalStateException(716) into ClassInstanceCreation(722) at 0", "Insert InfixExpression: +(721) into ClassInstanceCreation(722) at 1", "Insert SimpleName: IllegalStateException(532) into SimpleType: IllegalStateException(533) at 0", "Insert StringLiteral: \"Expected \"(534) into InfixExpression: +(538) at 0", "Insert QualifiedName: JsonToken.STRING(535) into InfixExpression: +(538) at 1", "Insert StringLiteral: \" but was \"(536) into InfixExpression: +(538) at 2", "Insert SimpleName: token(537) into InfixExpression: +(538) at 3", "Insert SimpleName: IllegalStateException(613) into SimpleType: IllegalStateException(614) at 0", "Insert StringLiteral: \"Expected \"(615) into InfixExpression: +(619) at 0", "Insert QualifiedName: JsonToken.NUMBER(616) into InfixExpression: +(619) at 1", "Insert StringLiteral: \" but was \"(617) into InfixExpression: +(619) at 2", "Insert SimpleName: token(618) into InfixExpression: +(619) at 3", "Move SimpleType: JsonPrimitive(630) into CastExpression(630) at 0", "Insert MethodInvocation(629) into CastExpression(630) at 1", "Insert SimpleName: IllegalStateException(664) into SimpleType: IllegalStateException(665) at 0", "Insert StringLiteral: \"Expected \"(666) into InfixExpression: +(670) at 0", "Insert QualifiedName: JsonToken.NUMBER(667) into InfixExpression: +(670) at 1", "Insert StringLiteral: \" but was \"(668) into InfixExpression: +(670) at 2", "Insert SimpleName: token(669) into InfixExpression: +(670) at 3", "Insert MethodInvocation(680) into CastExpression(681) at 1", "Insert SimpleName: IllegalStateException(715) into SimpleType: IllegalStateException(716) at 0", "Insert StringLiteral: \"Expected \"(717) into InfixExpression: +(721) at 0", "Insert QualifiedName: JsonToken.NUMBER(718) into InfixExpression: +(721) at 1", "Insert StringLiteral: \" but was \"(719) into InfixExpression: +(721) at 2", "Insert SimpleName: token(720) into InfixExpression: +(721) at 3", "Move SimpleType: JsonPrimitive(586) into CastExpression(732) at 0", "Insert MethodInvocation(731) into CastExpression(732) at 1", "Insert SimpleName: peekStack(628) into MethodInvocation(629) at 0", "Insert SimpleName: peekStack(679) into MethodInvocation(680) at 0", "Insert SimpleName: peekStack(730) into MethodInvocation(731) at 0", "Delete TextElement: Creates a new instance that reads a JSON-encoded stream from (99)", "Delete TextElement:  in(100)", "Delete TagElement: @code(101)", "Delete TextElement: .(102)", "Delete TagElement(103)", "Delete Javadoc(104)", "Delete SimpleName: expect(521)", "Delete QualifiedName: JsonToken.STRING(522)", "Delete MethodInvocation(523)", "Delete ExpressionStatement(524)", "Delete Block(534)", "Delete SimpleName: expect(581)", "Delete QualifiedName: JsonToken.NUMBER(582)", "Delete MethodInvocation(583)", "Delete ExpressionStatement(584)", "Delete MethodInvocation(592)", "Delete ReturnStatement(593)", "Delete SimpleName: expect(603)", "Delete QualifiedName: JsonToken.NUMBER(604)", "Delete MethodInvocation(605)", "Delete ExpressionStatement(606)", "Delete MethodInvocation(614)", "Delete ReturnStatement(615)", "Delete SimpleName: expect(625)", "Delete QualifiedName: JsonToken.NUMBER(626)", "Delete MethodInvocation(627)", "Delete ExpressionStatement(628)", "Delete MethodInvocation(636)", "Delete ReturnStatement(637)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}