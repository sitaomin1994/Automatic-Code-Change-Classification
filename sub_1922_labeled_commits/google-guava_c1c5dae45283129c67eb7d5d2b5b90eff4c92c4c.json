{"application": "google-guava", "csha": "c1c5dae45283129c67eb7d5d2b5b90eff4c92c4c", "files": [{"AbstractGraph_cluster": {"actions": [{"root": "UPDATE from Graph<N,E> to Graph<N>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from incidentEdges to adjacentNodes", "operations": ["UPD SimpleName: incidentEdges from incidentEdges to adjacentNodes"]}, {"root": "UPDATE from inEdges to predecessors", "operations": ["UPD SimpleName: inEdges from inEdges to predecessors"]}, {"root": "UPDATE from outEdges to successors", "operations": ["UPD SimpleName: outEdges from outEdges to successors"]}, {"root": "UPDATE from Graph<?,?> to Graph<?>", "operations": ["UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Graph<?>"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement:  Edge parameter type", "DEL SimpleName: E", "DEL TextElement: <", "DEL TagElement: @param", "DEL TextElement: >"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL WildcardType: ?", "operations": ["DEL WildcardType: ?"]}]}}, {"AbstractGraph_diff": {"operations": ["Update ParameterizedType: Graph<N,E>(50) to Graph<N>", "Move MarkerAnnotation(86) into MethodDeclaration(58) at 0", "Move SingleVariableDeclaration(93) into MethodDeclaration(58) at 5", "Move MarkerAnnotation(52) into MethodDeclaration(75) at 0", "Move SingleVariableDeclaration(59) into MethodDeclaration(75) at 5", "Move MarkerAnnotation(69) into MethodDeclaration(92) at 0", "Move SingleVariableDeclaration(76) into MethodDeclaration(92) at 4", "Update SimpleName: incidentEdges(60) to adjacentNodes", "Update SimpleName: inEdges(77) to predecessors", "Update SimpleName: outEdges(94) to successors", "Update ParameterizedType: Graph<?,?>(130) to Graph<?>", "Delete TextElement: <(31)", "Delete SimpleName: E(32)", "Delete TextElement: >(33)", "Delete TextElement:  Edge parameter type(34)", "Delete TagElement: @param(35)", "Delete SimpleName: E(42)", "Delete TypeParameter(43)", "Delete SimpleName: E(48)", "Delete SimpleType: E(49)", "Delete WildcardType: ?(129)"]}}, {"ConfigurableGraph_cluster": {"actions": [{"root": "UPDATE from AbstractGraph<N,E> to AbstractConfigurableGraph<N>", "operations": ["UPD ParameterizedType: AbstractGraph<N,E> from AbstractGraph<N,E> to AbstractConfigurableGraph<N>"]}, {"root": "INS ParameterizedType: MutableGraph<N> to TypeDeclaration: class at 5", "operations": ["INS ParameterizedType: MutableGraph<N> to TypeDeclaration: class at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: predecessors to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: removeSuccessor to MethodInvocation at 1", "INS EnhancedForStatement to Block at 3", "INS Block to EnhancedForStatement at 2", "INS IfStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS EnhancedForStatement to Block at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: predecessor to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: predecessor to MethodInvocation at 2", "INS SimpleName: nodeConnections to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 33", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS SimpleName: removeEdge to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 2"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 30"]}, {"root": "UPDATE from AbstractGraph to AbstractConfigurableGraph", "operations": ["UPD SimpleType: AbstractGraph from AbstractGraph to AbstractConfigurableGraph", "UPD SimpleName: AbstractGraph from AbstractGraph to AbstractConfigurableGraph"]}, {"root": "MOVE from ParameterizedType: AbstractGraph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: AbstractGraph<N,E> at 1"]}, {"root": "UPDATE from Map to MutableGraph", "operations": ["UPD SimpleType: Map from Map to MutableGraph", "UPD SimpleName: Map from Map to MutableGraph"]}, {"root": "MOVE from ParameterizedType: MutableGraph<N>", "operations": ["MOV SimpleType: Map to ParameterizedType: MutableGraph<N> at 0"]}, {"root": "MOVE from ParameterizedType: MutableGraph<N>", "operations": ["MOV SimpleType: N to ParameterizedType: MutableGraph<N> at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: boolean to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV Modifier: public to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV SimpleName: removeNode to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 7"]}, {"root": "UPDATE from NodeConnections<N,E> to NodeAdjacencies<N>", "operations": ["UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>"]}, {"root": "UPDATE from <p>Time complexities for mutation methods: to <p>Time complexities for mutation methods are all O(1) except for ", "operations": ["UPD TextElement: <p>Time complexities for mutation methods: from <p>Time complexities for mutation methods: to <p>Time complexities for mutation methods are all O(1) except for "]}, {"root": "UPDATE from <ul> to ,", "operations": ["UPD TextElement: <ul> from <ul> to ,"]}, {"root": "UPDATE from <li> to which is in O(d_node) where d_node is the degree of ", "operations": ["UPD TextElement: <li> from <li> to which is in O(d_node) where d_node is the degree of "]}, {"root": "UPDATE from : O(1). to .", "operations": ["UPD TextElement: : O(1). from : O(1). to ."]}, {"root": "UPDATE from GraphBuilder<? super N,? super E> to GraphBuilder<? super N>", "operations": ["UPD ParameterizedType: GraphBuilder<? super N,? super E> from GraphBuilder<? super N,? super E> to GraphBuilder<? super N>", "UPD ParameterizedType: GraphBuilder<? super N,? super E> from GraphBuilder<? super N,? super E> to GraphBuilder<? super N>"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SuperConstructorInvocation to Block at 0", "INS SimpleName: builder to SuperConstructorInvocation at 0"]}, {"root": "UPDATE from Map<N,NodeConnections<N,E>> to Map<N,NodeAdjacencies<N>>", "operations": ["UPD ParameterizedType: Map<N,NodeConnections<N,E>> from Map<N,NodeConnections<N,E>> to Map<N,NodeAdjacencies<N>>"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SimpleName: builder to SuperConstructorInvocation at 0", "INS SimpleName: nodeConnections to SuperConstructorInvocation at 1", "INS SuperConstructorInvocation to Block at 0"]}, {"root": "MOVE from TagElement: @throws", "operations": ["MOV TagElement: @code to TagElement: @throws at 10", "MOV TagElement: @code to TagElement: @throws at 12"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 5", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 4", "MOV IfStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \"node1\" to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"node2\" to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 7", "operations": ["INS IfStatement to Block at 7", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: connectionsN1 to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: connectionsN2 to InfixExpression: == at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS SimpleName: result to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 8", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 9"]}, {"root": "INS ReturnStatement to Block at 10", "operations": ["INS ReturnStatement to Block at 10", "INS SimpleName: result to ReturnStatement at 0"]}, {"root": "UPDATE from NodeConnections to NodeAdjacencies", "operations": ["UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "UPDATE from  addNode(N node) to  node", "operations": ["UPD TextElement:  addNode(N node) from  addNode(N node) to  node"]}, {"root": "UPDATE from the given node and edge maps. May be used for either mutable or immutable graphs. to the given node maps. May be used for either mutable or immutable graphs.", "operations": ["UPD TextElement: the given node and edge maps. May be used for either mutable or immutable graphs. from the given node and edge maps. May be used for either mutable or immutable graphs. to the given node maps. May be used for either mutable or immutable graphs."]}, {"root": "MOVE from ParameterizedType: Map<N,NodeConnections<N,E>>", "operations": ["MOV SimpleType: N to ParameterizedType: Map<N,NodeConnections<N,E>> at 1", "MOV SimpleType: Map to ParameterizedType: Map<N,NodeConnections<N,E>> at 0"]}, {"root": "UPDATE from Add nodes that are not elements of the graph, then add  to Add an edge between ", "operations": ["UPD TextElement: Add nodes that are not elements of the graph, then add  from Add nodes that are not elements of the graph, then add  to Add an edge between "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 3", "MOV TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from  edge to  and ", "operations": ["UPD TextElement:  edge from  edge to  and "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  edge to TagElement at 2"]}, {"root": "INS TextElement: ; if these nodes are not already to TagElement at 4", "operations": ["INS TextElement: ; if these nodes are not already to TagElement at 4"]}, {"root": "UPDATE from  between them. to present in this graph, then add them.", "operations": ["UPD TextElement:  between them. from  between them. to present in this graph, then add them."]}, {"root": "UPDATE from  already exists between  to  if an edge already exists between ", "operations": ["UPD TextElement:  already exists between  from  already exists between  to  if an edge already exists between "]}, {"root": "UPDATE from Also, if self-loops are not allowed, and  to  if self-loops are not allowed, and ", "operations": ["UPD TextElement: Also, if self-loops are not allowed, and  from Also, if self-loops are not allowed, and  to  if self-loops are not allowed, and "]}, {"root": "UPDATE from  is equal to  to  is equal to", "operations": ["UPD TextElement:  is equal to  from  is equal to  to  is equal to"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: && to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV SimpleName: containsN1 to InfixExpression: && at 0", "MOV MethodInvocation to InfixExpression: && at 2", "MOV SimpleName: containsN2 to InfixExpression: && at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: N to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: successor to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: successor to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from node2 to successors", "operations": ["UPD SimpleName: node2 from node2 to successors", "UPD SimpleName: removeEdgeAndUpdateConnections from removeEdgeAndUpdateConnections to successors"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: removeEdgeAndUpdateConnections to MethodInvocation at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: N to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from incidentNodes to checkNotNull", "operations": ["UPD SimpleName: incidentNodes from incidentNodes to checkNotNull", "UPD SimpleName: incidentNodes from incidentNodes to checkNotNull"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: incidentNodes to MethodInvocation at 0", "MOV SimpleName: node1 to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node2 to MethodInvocation at 1", "MOV SimpleName: incidentNodes to MethodInvocation at 0"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to ConditionalExpression at 0", "operations": ["INS SimpleName: isDirected to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 0"]}, {"root": "INS MethodInvocation to InfixExpression: || at 0", "operations": ["INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: allowsSelfLoops to MethodInvocation at 0"]}, {"root": "UPDATE from edge to node2", "operations": ["UPD SimpleName: edge from edge to node2"]}, {"root": "UPDATE from edgesConnecting to nodeConnections", "operations": ["UPD SimpleName: edgesConnecting from edgesConnecting to nodeConnections", "UPD SimpleName: ImmutableList from ImmutableList to nodeConnections", "UPD SimpleName: removeEdgeAndUpdateConnections from removeEdgeAndUpdateConnections to nodeConnections"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 0", "MOV SimpleName: copyOf to MethodInvocation at 1"]}, {"root": "UPDATE from copyOf to get", "operations": ["UPD SimpleName: copyOf from copyOf to get", "UPD SimpleName: edge from edge to get"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 2"]}, {"root": "UPDATE from DirectedNodeConnections to DirectedNodeAdjacencies", "operations": ["UPD SimpleName: DirectedNodeConnections from DirectedNodeConnections to DirectedNodeAdjacencies"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleType: N to MethodInvocation at 1"]}, {"root": "UPDATE from UndirectedNodeConnections to UndirectedNodeAdjacencies", "operations": ["UPD SimpleName: UndirectedNodeConnections from UndirectedNodeConnections to UndirectedNodeAdjacencies"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleType: N to MethodInvocation at 1"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: edgesConnecting to MethodInvocation at 0", "MOV SimpleName: node1 to MethodInvocation at 2"]}, {"root": "UPDATE from edges to node", "operations": ["UPD SimpleName: edges from edges to node", "UPD SimpleName: edge from edge to node"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: edges to MethodInvocation at 0"]}, {"root": "UPDATE from contains to equals", "operations": ["UPD SimpleName: contains from contains to equals"]}, {"root": "UPDATE from edge to successor", "operations": ["UPD SimpleName: edge from edge to successor", "UPD SimpleName: Graphs from Graphs to successor"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from parallelEdges to removePredecessor", "operations": ["UPD SimpleName: parallelEdges from parallelEdges to removePredecessor"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Graphs to MethodInvocation at 2", "MOV SimpleName: edge to MethodInvocation at 2", "MOV SimpleName: parallelEdges to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: removeEdgeAndUpdateConnections to MethodInvocation at 0", "MOV SimpleName: edge to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.graph.GraphErrorMessageUtils.ADDING_PARALLEL_EDGE"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.graph.GraphErrorMessageUtils.EDGE_NOT_IN_GRAPH"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.graph.GraphErrorMessageUtils.NODE_NOT_IN_GRAPH"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.graph.GraphErrorMessageUtils.NOT_AVAILABLE_ON_UNDIRECTED"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.graph.GraphErrorMessageUtils.REUSING_EDGE"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.ImmutableList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.ImmutableSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Maps"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Sets"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TextElement: <p>This class maintains a map of ", "operations": ["DEL TextElement: <p>This class maintains a map of "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: NodeConnections", "DEL TagElement: @link"]}, {"root": "DEL TextElement:  for every node", "operations": ["DEL TextElement:  for every node"]}, {"root": "DEL TextElement: and ", "operations": ["DEL TextElement: and "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: IncidentNodes", "DEL TagElement: @link"]}, {"root": "DEL TextElement:  for every edge.", "operations": ["DEL TextElement:  for every edge."]}, {"root": "DEL TextElement: <p>", "operations": ["DEL TextElement: <p>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  Set"]}, {"root": "DEL TextElement: -returning accessors return unmodifiable views: the view returned will reflect", "operations": ["DEL TextElement: -returning accessors return unmodifiable views: the view returned will reflect"]}, {"root": "DEL TextElement: changes to the graph (if the graph is mutable) but may not be modified by the user.", "operations": ["DEL TextElement: changes to the graph (if the graph is mutable) but may not be modified by the user."]}, {"root": "DEL TextElement: The behavior of the returned view is undefined in the following cases:", "operations": ["DEL TextElement: The behavior of the returned view is undefined in the following cases:"]}, {"root": "DEL TextElement: <ul>", "operations": ["DEL TextElement: <ul>"]}, {"root": "DEL TextElement: <li>Removing the element on which the accessor is called (e.g.:", "operations": ["DEL TextElement: <li>Removing the element on which the accessor is called (e.g.:"]}, {"root": "DEL TextElement: <pre>", "operations": ["DEL TextElement: <pre>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement: Set<N> adjacentNodes = adjacentNodes(node);", "DEL TextElement: graph.removeNode(node);"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TextElement: At this point, the contents of ", "operations": ["DEL TextElement: At this point, the contents of "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  adjacentNodes", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  are undefined.", "operations": ["DEL TextElement:  are undefined."]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TextElement: <p>The time complexity of all ", "operations": ["DEL TextElement: <p>The time complexity of all "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  Set", "DEL TagElement: @code"]}, {"root": "DEL TextElement: -returning accessors is O(1), since views are returned.", "operations": ["DEL TextElement: -returning accessors is O(1), since views are returned."]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  addEdge(E edge, N node1, N node2)"]}, {"root": "DEL TextElement: : O(1).", "operations": ["DEL TextElement: : O(1)."]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TextElement: : O(d_node).", "operations": ["DEL TextElement: : O(d_node)."]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  removeEdge(E edge)"]}, {"root": "DEL TextElement: : O(1), unless this graph allows parallel edges;", "operations": ["DEL TextElement: : O(1), unless this graph allows parallel edges;"]}, {"root": "DEL TextElement: in that case this method is O(min(outD_edgeSource, inD_edgeTarget)).", "operations": ["DEL TextElement: in that case this method is O(min(outD_edgeSource, inD_edgeTarget))."]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TextElement: where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the", "operations": ["DEL TextElement: where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the"]}, {"root": "DEL TextElement: out-degree of node.", "operations": ["DEL TextElement: out-degree of node."]}, {"root": "DEL TagElement: @param", "operations": ["DEL SimpleName: E", "DEL TagElement: @param", "DEL TextElement:  Edge parameter type", "DEL TextElement: >", "DEL TextElement: <"]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: E", "DEL TypeParameter"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleName: DEFAULT_MAP_SIZE", "DEL NumberLiteral: 11", "DEL Modifier: static", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: private", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: isDirected", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL SimpleName: allowsParallelEdges", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: private", "DEL PrimitiveType: boolean"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL SimpleName: allowsSelfLoops", "DEL Modifier: final", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleType: NodeConnections", "DEL SimpleName: nodeConnections", "DEL VariableDeclarationFragment", "DEL SimpleName: NodeConnections", "DEL Modifier: final", "DEL SimpleType: E", "DEL SimpleName: E", "DEL Modifier: private", "DEL ParameterizedType: Map<N,NodeConnections<N,E>>", "DEL ParameterizedType: NodeConnections<N,E>"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: IncidentNodes", "DEL SimpleName: IncidentNodes", "DEL Modifier: private", "DEL FieldDeclaration", "DEL SimpleType: E", "DEL SimpleName: E", "DEL VariableDeclarationFragment", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleName: edgeToIncidentNodes", "DEL Modifier: final", "DEL ParameterizedType: Map<E,IncidentNodes<N>>"]}, {"root": "DEL WildcardType: ? super E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E", "DEL WildcardType: ? super E"]}, {"root": "DEL ConstructorInvocation", "operations": ["DEL QualifiedName: builder.expectedNodeCount", "DEL ParameterizedType: NodeConnections<N,E>", "DEL MethodInvocation", "DEL SimpleName: E", "DEL SimpleName: Maps", "DEL SimpleName: Maps", "DEL MethodInvocation", "DEL SimpleName: newLinkedHashMapWithExpectedSize", "DEL SimpleName: IncidentNodes", "DEL MethodInvocation", "DEL SimpleName: N", "DEL SimpleType: E", "DEL SimpleType: E", "DEL SimpleName: or", "DEL QualifiedName: builder.expectedEdgeCount", "DEL SimpleName: NodeConnections", "DEL SimpleName: E", "DEL ConstructorInvocation", "DEL SimpleType: IncidentNodes", "DEL SimpleName: newLinkedHashMapWithExpectedSize", "DEL SimpleName: DEFAULT_MAP_SIZE", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleName: N", "DEL SimpleType: N", "DEL SimpleName: DEFAULT_MAP_SIZE", "DEL SimpleType: N", "DEL SimpleType: N", "DEL SimpleType: NodeConnections", "DEL SimpleName: or", "DEL SimpleName: N"]}, {"root": "DEL WildcardType: ? super E", "operations": ["DEL SimpleName: E", "DEL WildcardType: ? super E", "DEL SimpleType: E"]}, {"root": "DEL SimpleType: Map", "operations": ["DEL SimpleName: Map", "DEL SimpleType: Map"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Map", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleName: IncidentNodes", "DEL SimpleName: E", "DEL SingleVariableDeclaration", "DEL SimpleType: E", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleType: IncidentNodes", "DEL SimpleName: Map", "DEL ParameterizedType: Map<E,IncidentNodes<N>>"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: isDirected", "DEL QualifiedName: builder.directed", "DEL Assignment: =", "DEL FieldAccess", "DEL ThisExpression", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL ThisExpression", "DEL QualifiedName: builder.allowsParallelEdges", "DEL SimpleName: allowsParallelEdges", "DEL FieldAccess", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL QualifiedName: builder.allowsSelfLoops", "DEL FieldAccess", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: allowsSelfLoops", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: nodeConnections", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: nodeConnections", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: checkNotNull"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: checkNotNull", "DEL ThisExpression", "DEL Assignment: =", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleName: edgeToIncidentNodes", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Set", "DEL MethodDeclaration", "DEL SimpleName: nodes", "DEL MethodInvocation", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Collections", "DEL ParameterizedType: Set<N>", "DEL SimpleName: nodeConnections", "DEL MarkerAnnotation", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: keySet", "DEL SimpleName: unmodifiableSet", "DEL SimpleType: Set"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: Set<E>", "DEL SimpleName: keySet", "DEL SimpleName: unmodifiableSet", "DEL Modifier: public", "DEL SimpleName: edges", "DEL MethodDeclaration", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleName: E", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: Set", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleType: E", "DEL MethodInvocation", "DEL SimpleName: Collections", "DEL SimpleType: Set"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleName: isDirected", "DEL PrimitiveType: boolean", "DEL SimpleName: isDirected", "DEL Block", "DEL Modifier: public", "DEL MarkerAnnotation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: allowsParallelEdges", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: allowsParallelEdges", "DEL MethodDeclaration", "DEL PrimitiveType: boolean"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL SimpleName: allowsSelfLoops", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleName: allowsSelfLoops", "DEL MarkerAnnotation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: E", "DEL MethodDeclaration", "DEL SimpleName: incidentEdges", "DEL ParameterizedType: Set<E>", "DEL SimpleType: E", "DEL SimpleName: Set", "DEL MethodInvocation", "DEL SimpleName: incidentEdges", "DEL Block", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: checkedConnections", "DEL SimpleName: node", "DEL Modifier: public", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: Override", "DEL SimpleType: Set"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL SimpleName: edge", "DEL SimpleName: incidentNodes", "DEL SimpleName: checkedIncidentNodes", "DEL ParameterizedType: Set<N>", "DEL SimpleName: Override", "DEL SimpleName: Set", "DEL Modifier: public", "DEL SimpleType: Object", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: edge"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: adjacentNodes", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL Block", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL Modifier: public", "DEL SimpleName: adjacentNodes", "DEL ParameterizedType: Set<N>", "DEL SimpleName: Set", "DEL SimpleName: checkedConnections"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Sets", "DEL SimpleName: edge", "DEL SimpleType: E", "DEL SimpleName: incidentNodesIterator", "DEL SimpleName: hasNext", "DEL SimpleName: endpointsIncidentEdges", "DEL ParameterizedType: Iterator<N>", "DEL SimpleName: edge", "DEL ReturnStatement", "DEL SimpleName: next", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: endpointsIncidentEdges", "DEL SimpleName: endpointsIncidentEdges", "DEL SimpleName: incidentNodesIterator", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: iterator", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: next", "DEL SimpleType: E", "DEL ParameterizedType: Set<E>", "DEL SimpleName: of", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: Override", "DEL ParameterizedType: Set<E>", "DEL Modifier: public", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL SimpleName: union", "DEL SimpleName: Set", "DEL SimpleName: incidentNodesIterator", "DEL SimpleType: Iterator", "DEL VariableDeclarationFragment", "DEL SimpleName: incidentEdges", "DEL SimpleName: Sets", "DEL SimpleName: edge", "DEL SimpleName: incidentNodes", "DEL SimpleName: E", "DEL SimpleName: incidentNodesIterator", "DEL SimpleName: Set", "DEL SingleVariableDeclaration", "DEL SimpleName: incidentEdges", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL WhileStatement", "DEL MethodInvocation", "DEL SimpleName: ImmutableSet", "DEL SimpleName: E", "DEL Assignment: =", "DEL SimpleName: endpointsIncidentEdges", "DEL SimpleName: difference", "DEL SimpleName: adjacentEdges", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Set", "DEL SimpleName: E", "DEL SimpleType: E", "DEL SimpleName: inEdgesN2", "DEL SimpleName: Set", "DEL SimpleName: Set", "DEL TagElement: @link", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL SimpleName: Sets", "DEL TextElement: , the set of self-loop edges is returned.", "DEL TextElement: <ol>", "DEL IfStatement", "DEL TextElement: .", "DEL MethodInvocation", "DEL SimpleName: allowsSelfLoops", "DEL TextElement:  is equal to ", "DEL SimpleType: E", "DEL TextElement: Otherwise, returns the intersection of these two sets, using ", "DEL SimpleType: Set", "DEL ReturnStatement", "DEL SimpleName: outEdgesN1", "DEL SimpleName: outEdges", "DEL SimpleName: filter", "DEL SimpleName: Sets", "DEL TagElement: @code", "DEL SimpleName: selfLoopEdges", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TextElement: .", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: inEdgesN2", "DEL SimpleName: intersection", "DEL ParameterizedType: Set<E>", "DEL TagElement: @code", "DEL MethodInvocation", "DEL SimpleName: inEdgesN2", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: Sets", "DEL InfixExpression: <=", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: ImmutableSet", "DEL SimpleName: node1", "DEL ParameterizedType: Set<E>", "DEL SimpleName: E", "DEL TextElement: <li>Incoming edges of ", "DEL TextElement: If ", "DEL MethodInvocation", "DEL SimpleName: unmodifiableSet", "DEL SimpleName: size", "DEL TagElement", "DEL ConditionalExpression", "DEL SimpleName: Collections", "DEL SimpleType: Set", "DEL SimpleName: of", "DEL TextElement: <li>Outgoing edges of ", "DEL SimpleName: outEdgesN1", "DEL MethodDeclaration", "DEL MemberRef", "DEL SimpleName: intersection", "DEL SimpleName: Graphs", "DEL SimpleName: selfLoopEdges", "DEL SimpleName: selfLoopPredicate", "DEL SimpleName: inEdgesN2", "DEL ThisExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: outEdgesN1", "DEL SimpleName: E", "DEL SimpleName: E", "DEL SimpleName: outEdgesN1", "DEL SimpleName: node2", "DEL SimpleType: Set", "DEL SimpleName: edgesConnecting", "DEL TextElement: :", "DEL ParenthesizedExpression", "DEL SimpleName: intersection", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: Sets", "DEL MethodInvocation", "DEL SimpleType: E", "DEL TextElement:  node2", "DEL Block", "DEL Modifier: public", "DEL MethodInvocation", "DEL ParameterizedType: Set<E>", "DEL SimpleType: E", "DEL ParameterizedType: Set<E>", "DEL SimpleName: Set", "DEL SimpleName: outEdgesN1", "DEL ReturnStatement", "DEL TextElement: </ol>", "DEL TextElement:  node1", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: inEdges"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleType: E", "DEL SimpleName: checkedConnections", "DEL MethodInvocation", "DEL SimpleName: inEdges", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL SimpleName: node", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL SimpleName: Override", "DEL Modifier: public", "DEL SimpleName: E", "DEL ParameterizedType: Set<E>", "DEL SimpleName: inEdges", "DEL SimpleName: node", "DEL SimpleName: Set", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: Set<E>", "DEL SimpleName: outEdges", "DEL SimpleName: Object", "DEL SimpleName: E", "DEL SimpleType: Set", "DEL SimpleName: outEdges", "DEL MethodInvocation", "DEL Modifier: public", "DEL Block", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleType: E", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL SimpleName: Override", "DEL SimpleName: checkedConnections", "DEL MarkerAnnotation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleType: Set", "DEL ParameterizedType: Set<N>", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: predecessors", "DEL MethodInvocation", "DEL SimpleName: predecessors", "DEL SimpleName: node", "DEL Modifier: public", "DEL SimpleName: Set", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: checkedConnections", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: N", "DEL SimpleName: successors", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL SimpleType: Set", "DEL Block", "DEL SimpleName: node", "DEL ParameterizedType: Set<N>", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: Set", "DEL MarkerAnnotation", "DEL SimpleName: successors", "DEL SimpleName: N", "DEL MethodInvocation", "DEL SimpleName: checkedConnections", "DEL SimpleName: node"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: isDirected", "DEL SimpleName: edge", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: checkedIncidentNodes", "DEL SimpleName: edge", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: NOT_AVAILABLE_ON_UNDIRECTED", "DEL Modifier: public", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleName: source", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: N", "DEL SimpleName: N", "DEL SimpleType: Object", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleName: node1"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Object", "DEL Block", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SimpleName: N", "DEL SimpleName: Object", "DEL SimpleName: isDirected", "DEL MethodInvocation", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: edge", "DEL SimpleName: node2", "DEL SimpleName: target", "DEL SimpleName: NOT_AVAILABLE_ON_UNDIRECTED", "DEL SimpleName: edge", "DEL IfStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL SimpleType: N", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: checkedIncidentNodes", "DEL Block", "DEL SimpleType: UnsupportedOperationException", "DEL Modifier: public"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement:  if ", "operations": ["DEL TextElement:  if "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  edge"]}, {"root": "DEL TextElement:  if an edge (other than ", "operations": ["DEL TextElement:  if an edge (other than "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  edge"]}, {"root": "DEL TextElement: ) already", "operations": ["DEL TextElement: ) already"]}, {"root": "DEL TextElement: exists from ", "operations": ["DEL TextElement: exists from "]}, {"root": "DEL TextElement:  to ", "operations": ["DEL TextElement:  to "]}, {"root": "DEL TextElement: , and this is not a multigraph.", "operations": ["DEL TextElement: , and this is not a multigraph."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node1"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node2"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: edge", "DEL SimpleName: E", "DEL SingleVariableDeclaration", "DEL SimpleType: E"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: checkNotNull", "DEL SimpleName: edge", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"edge\""]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: IncidentNodes", "DEL SimpleType: IncidentNodes", "DEL SimpleName: incidentNodes", "DEL VariableDeclarationFragment", "DEL SimpleName: node1", "DEL SimpleType: N", "DEL MethodInvocation", "DEL SimpleName: IncidentNodes", "DEL SimpleName: of", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleName: node2", "DEL VariableDeclarationStatement", "DEL SimpleName: N"]}, {"root": "DEL SimpleName: allowsSelfLoops", "operations": ["DEL SimpleName: allowsSelfLoops"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: incidentNodes", "DEL MethodInvocation", "DEL SimpleName: isSelfLoop"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: contains", "DEL MethodInvocation", "DEL SimpleName: edge", "DEL MethodInvocation", "DEL SimpleName: edges"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: REUSING_EDGE", "DEL SimpleName: incidentNodes", "DEL ExpressionStatement", "DEL SimpleName: checkArgument", "DEL MethodInvocation", "DEL SimpleName: edge", "DEL Block", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: edge", "DEL SimpleName: incidentNodes"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: contains", "DEL ExpressionStatement", "DEL SimpleName: containsN2", "DEL SimpleName: node2", "DEL IfStatement", "DEL SimpleName: successors", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: node2", "DEL SimpleName: checkArgument", "DEL MethodInvocation", "DEL SimpleName: ADDING_PARALLEL_EDGE", "DEL ParenthesizedExpression", "DEL PrefixExpression: !", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: node1", "DEL MethodInvocation", "DEL SimpleName: containsN1", "DEL SimpleName: allowsParallelEdges", "DEL SimpleName: node1"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleType: N", "DEL SimpleName: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleName: edge", "operations": ["DEL SimpleName: edge"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleName: edge", "operations": ["DEL SimpleName: edge"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: edge", "DEL SimpleName: put", "DEL SimpleName: incidentNodes", "DEL SimpleName: edgeToIncidentNodes", "DEL MethodInvocation"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleName: edge", "operations": ["DEL SimpleName: edge"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: isEmpty"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: N", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleName: checkedIncidentNodes", "DEL SimpleName: IncidentNodes", "DEL SimpleName: edge", "DEL SimpleType: N", "DEL SimpleType: IncidentNodes", "DEL SimpleName: incidentNodes", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: node1", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: node2", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleType: N", "DEL SimpleName: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: disconnectIncidentNodes", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: connectionsN1", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: removeOutEdge", "DEL SimpleName: edge"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: connectionsN2", "DEL SimpleName: edge", "DEL SimpleName: removeInEdge", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleName: edge", "DEL ExpressionStatement", "DEL SimpleName: remove"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL EnhancedForStatement", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: incidentEdges", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: edge"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: checkNotNull", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: Object", "DEL Block", "DEL PrimitiveType: boolean", "DEL MarkerAnnotation", "DEL SimpleName: removeEdge", "DEL SimpleName: edge", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL SimpleName: edge", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"edge\""]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  if ", "DEL TagElement: @throws", "DEL TextElement: by ", "DEL TextElement: <p>Unlike ", "DEL SimpleName: Object", "DEL SimpleName: IllegalArgumentException", "DEL TagElement", "DEL SimpleName: removeEdgeAndUpdateConnections", "DEL TagElement: @link", "DEL Modifier: private", "DEL TextElement:  is not present in the graph.", "DEL SimpleType: Object", "DEL SimpleName: edge", "DEL PrimitiveType: boolean", "DEL TagElement: @code", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL TextElement: . This should be set when all parallel edges are or will be removed.", "DEL MethodRefParameter", "DEL MethodDeclaration", "DEL TextElement:  edge", "DEL MethodRef", "DEL SimpleName: disconnectIncidentNodes", "DEL Javadoc", "DEL TagElement: @code", "DEL TextElement:  disconnectIncidentNodes", "DEL TextElement: If ", "DEL TagElement: @code", "DEL TextElement:  is true, disconnects the nodes formerly connected", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL TextElement: , this method is guaranteed to run in O(1) time.", "DEL SimpleType: Object", "DEL SimpleName: removeEdge", "DEL TextElement:  edge"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleName: isDirected", "operations": ["DEL SimpleName: isDirected"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: NodeConnections", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleType: NodeConnections", "DEL Modifier: private", "DEL SimpleType: E", "DEL StringLiteral: \"node\"", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: connections", "DEL SimpleName: node", "DEL SimpleName: E", "DEL SimpleType: NodeConnections", "DEL ReturnStatement", "DEL SimpleName: N", "DEL ParameterizedType: NodeConnections<N,E>", "DEL MethodDeclaration", "DEL SimpleName: connections", "DEL ParameterizedType: NodeConnections<N,E>", "DEL SimpleName: checkedConnections", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: N", "DEL ExpressionStatement", "DEL SimpleName: connections", "DEL SimpleName: NODE_NOT_IN_GRAPH", "DEL SimpleName: node", "DEL SimpleName: NodeConnections", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: checkNotNull", "DEL SimpleName: E", "DEL SimpleName: N", "DEL NullLiteral", "DEL SimpleType: N", "DEL SimpleType: E", "DEL SimpleName: checkArgument"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: N", "DEL Modifier: private", "DEL SimpleName: checkedIncidentNodes", "DEL ExpressionStatement", "DEL SimpleType: IncidentNodes", "DEL Block", "DEL SimpleName: Object", "DEL ParameterizedType: IncidentNodes<N>", "DEL ReturnStatement", "DEL SimpleName: get", "DEL SimpleName: checkArgument", "DEL SimpleName: incidentNodes", "DEL SimpleName: edge", "DEL MethodInvocation", "DEL SimpleName: N", "DEL SimpleName: checkNotNull", "DEL SimpleType: N", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleName: incidentNodes", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: incidentNodes", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ParameterizedType: IncidentNodes<N>", "DEL MethodInvocation", "DEL SimpleName: IncidentNodes", "DEL SimpleName: edge", "DEL ExpressionStatement", "DEL SimpleName: edge", "DEL StringLiteral: \"edge\"", "DEL VariableDeclarationStatement", "DEL SimpleName: EDGE_NOT_IN_GRAPH", "DEL SimpleName: IncidentNodes", "DEL SimpleType: N", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleType: IncidentNodes", "DEL SimpleName: edge", "DEL NullLiteral"]}]}}, {"ConfigurableGraph_diff": {"operations": ["Update ParameterizedType: AbstractGraph<N,E>(125) to AbstractConfigurableGraph<N>", "Insert ParameterizedType: MutableGraph<N>(53) into TypeDeclaration: class(480) at 4", "Insert MethodDeclaration(379) into TypeDeclaration: class(480) at 9", "Insert MethodDeclaration(456) into TypeDeclaration: class(480) at 10", "Move TagElement: @code(86) into TagElement(28) at 30", "Update SimpleType: AbstractGraph(120) to AbstractConfigurableGraph", "Move SimpleType: N(178) into ParameterizedType: AbstractConfigurableGraph<N>(48) at 1", "Update SimpleType: Map(172) to MutableGraph", "Move SimpleType: Map(172) into ParameterizedType: MutableGraph<N>(53) at 0", "Move SimpleType: N(161) into ParameterizedType: MutableGraph<N>(53) at 1", "Move SingleVariableDeclaration(254) into MethodDeclaration(72) at 2", "Move SingleVariableDeclaration(201) into MethodDeclaration(105) at 2", "Move MarkerAnnotation(1035) into MethodDeclaration(379) at 0", "Move MarkerAnnotation(1037) into MethodDeclaration(379) at 1", "Move Modifier: public(1038) into MethodDeclaration(379) at 2", "Move PrimitiveType: boolean(1039) into MethodDeclaration(379) at 3", "Move SimpleName: removeNode(1040) into MethodDeclaration(379) at 4", "Move SingleVariableDeclaration(1044) into MethodDeclaration(379) at 5", "Insert Block(378) into MethodDeclaration(379) at 6", "Move MarkerAnnotation(534) into MethodDeclaration(456) at 0", "Move MarkerAnnotation(1089) into MethodDeclaration(456) at 1", "Insert Modifier: public(384) into MethodDeclaration(456) at 2", "Insert PrimitiveType: boolean(385) into MethodDeclaration(456) at 3", "Insert SimpleName: removeEdge(386) into MethodDeclaration(456) at 4", "Move SingleVariableDeclaration(545) into MethodDeclaration(456) at 5", "Move SingleVariableDeclaration(549) into MethodDeclaration(456) at 6", "Move Block(1244) into MethodDeclaration(456) at 7", "Update ParameterizedType: NodeConnections<N,E>(1253) to NodeAdjacencies<N>", "Update TextElement: <p>Time complexities for mutation methods:(74) to <p>Time complexities for mutation methods are all O(1) except for ", "Update TextElement: <ul>(75) to ,", "Update TextElement: <li>(76) to which is in O(d_node) where d_node is the degree of ", "Update TextElement: : O(1).(79) to .", "Update SimpleName: AbstractGraph(119) to AbstractConfigurableGraph", "Update SimpleName: Map(171) to MutableGraph", "Update ParameterizedType: GraphBuilder<? super N,? super E>(252) to GraphBuilder<? super N>", "Insert SuperConstructorInvocation(70) into Block(71) at 0", "Update ParameterizedType: GraphBuilder<? super N,? super E>(199) to GraphBuilder<? super N>", "Update ParameterizedType: Map<N,NodeConnections<N,E>>(266) to Map<N,NodeAdjacencies<N>>", "Insert SuperConstructorInvocation(103) into Block(104) at 0", "Move TagElement: @code(829) into TagElement: @throws(170) at 10", "Move TagElement: @code(832) into TagElement: @throws(170) at 12", "Move ExpressionStatement(1049) into Block(378) at 0", "Move IfStatement(1059) into Block(378) at 1", "Insert EnhancedForStatement(350) into Block(378) at 2", "Insert EnhancedForStatement(370) into Block(378) at 3", "Move ExpressionStatement(1081) into Block(378) at 4", "Move ReturnStatement(1083) into Block(378) at 5", "Insert ExpressionStatement(399) into Block(455) at 0", "Insert ExpressionStatement(404) into Block(455) at 1", "Insert IfStatement(439) into Block(455) at 4", "Insert VariableDeclarationStatement(447) into Block(455) at 5", "Move ExpressionStatement(1226) into Block(455) at 9", "Insert ReturnStatement(454) into Block(455) at 7", "Update SimpleType: NodeConnections(1248) to NodeAdjacencies", "Move SimpleType: N(457) into ParameterizedType: NodeAdjacencies<N>(462) at 1", "Update TextElement:  addNode(N node)(77) to  node", "Insert SimpleName: builder(69) into SuperConstructorInvocation(70) at 0", "Update TextElement: the given node and edge maps. May be used for either mutable or immutable graphs.(240) to the given node maps. May be used for either mutable or immutable graphs.", "Move SimpleType: Map(155) into ParameterizedType: Map<N,NodeAdjacencies<N>>(98) at 0", "Move SimpleType: N(157) into ParameterizedType: Map<N,NodeAdjacencies<N>>(98) at 1", "Update ParameterizedType: NodeConnections<N,E>(265) to NodeAdjacencies<N>", "Insert SimpleName: builder(101) into SuperConstructorInvocation(103) at 0", "Insert SimpleName: nodeConnections(102) into SuperConstructorInvocation(103) at 1", "Update TextElement: Add nodes that are not elements of the graph, then add (803) to Add an edge between ", "Move TagElement: @code(510) into TagElement(161) at 1", "Update TextElement:  edge(804) to  and ", "Move TextElement:  edge(804) into TagElement(161) at 2", "Move TagElement: @code(513) into TagElement(161) at 3", "Insert TextElement: ; if these nodes are not already(148) into TagElement(161) at 4", "Update TextElement:  between them.(806) to present in this graph, then add them.", "Update TextElement:  already exists between (813) to  if an edge already exists between ", "Update TextElement: Also, if self-loops are not allowed, and (834) to  if self-loops are not allowed, and ", "Update TextElement:  is equal to (837) to  is equal to", "Insert InfixExpression: &&(239) into IfStatement(243) at 0", "Insert Block(242) into IfStatement(243) at 1", "Update ParameterizedType: NodeConnections<N,E>(982) to NodeAdjacencies<N>", "Move VariableDeclarationFragment(1200) into VariableDeclarationStatement(263) at 1", "Update ParameterizedType: NodeConnections<N,E>(1010) to NodeAdjacencies<N>", "Move VariableDeclarationFragment(1214) into VariableDeclarationStatement(288) at 1", "Move SingleVariableDeclaration(1063) into EnhancedForStatement(350) at 0", "Insert MethodInvocation(333) into EnhancedForStatement(350) at 1", "Insert Block(349) into EnhancedForStatement(350) at 2", "Insert SingleVariableDeclaration(354) into EnhancedForStatement(370) at 0", "Insert MethodInvocation(360) into EnhancedForStatement(370) at 1", "Insert Block(369) into EnhancedForStatement(370) at 2", "Insert MethodInvocation(398) into ExpressionStatement(399) at 0", "Insert MethodInvocation(403) into ExpressionStatement(404) at 0", "Update ParameterizedType: NodeConnections<N,E>(1194) to NodeAdjacencies<N>", "Move VariableDeclarationFragment(988) into VariableDeclarationStatement(416) at 1", "Update ParameterizedType: NodeConnections<N,E>(1208) to NodeAdjacencies<N>", "Move VariableDeclarationFragment(1016) into VariableDeclarationStatement(428) at 1", "Insert InfixExpression: ||(435) into IfStatement(439) at 0", "Move Block(1110) into IfStatement(439) at 1", "Insert PrimitiveType: boolean(440) into VariableDeclarationStatement(447) at 0", "Insert VariableDeclarationFragment(446) into VariableDeclarationStatement(447) at 1", "Insert SimpleName: result(453) into ReturnStatement(454) at 0", "Update SimpleName: NodeConnections(1247) to NodeAdjacencies", "Update SimpleType: NodeConnections(260) to NodeAdjacencies", "Move SimpleType: N(122) into ParameterizedType: NodeAdjacencies<N>(97) at 1", "Move SimpleName: containsN1(925) into InfixExpression: &&(239) at 0", "Move SimpleName: containsN2(926) into InfixExpression: &&(239) at 1", "Move MethodInvocation(933) into InfixExpression: &&(239) at 2", "Move ReturnStatement(944) into Block(242) at 0", "Update SimpleType: NodeConnections(977) to NodeAdjacencies", "Move SimpleType: N(258) into ParameterizedType: NodeAdjacencies<N>(256) at 1", "Update SimpleType: NodeConnections(1005) to NodeAdjacencies", "Move SimpleType: N(276) into ParameterizedType: NodeAdjacencies<N>(281) at 1", "Move SimpleType: N(1181) into SingleVariableDeclaration(327) at 0", "Insert SimpleName: successor(326) into SingleVariableDeclaration(327) at 1", "Insert MethodInvocation(331) into MethodInvocation(333) at 0", "Update SimpleName: removeEdgeAndUpdateConnections(1070) to successors", "Move SimpleName: removeEdgeAndUpdateConnections(1070) into MethodInvocation(333) at 1", "Insert IfStatement(348) into Block(349) at 0", "Move SimpleType: N(1173) into SingleVariableDeclaration(354) at 0", "Insert SimpleName: predecessor(353) into SingleVariableDeclaration(354) at 1", "Move MethodInvocation(1303) into MethodInvocation(360) at 0", "Insert SimpleName: predecessors(359) into MethodInvocation(360) at 1", "Insert ExpressionStatement(368) into Block(369) at 0", "Update SimpleName: incidentNodes(1175) to checkNotNull", "Move SimpleName: incidentNodes(1175) into MethodInvocation(398) at 0", "Move SimpleName: node1(1176) into MethodInvocation(398) at 1", "Insert StringLiteral: \"node1\"(397) into MethodInvocation(398) at 2", "Update SimpleName: incidentNodes(1183) to checkNotNull", "Move SimpleName: incidentNodes(1183) into MethodInvocation(403) at 0", "Move SimpleName: node2(1184) into MethodInvocation(403) at 1", "Insert StringLiteral: \"node2\"(402) into MethodInvocation(403) at 2", "Update SimpleType: NodeConnections(1189) to NodeAdjacencies", "Move SimpleType: N(407) into ParameterizedType: NodeAdjacencies<N>(409) at 1", "Update SimpleType: NodeConnections(1203) to NodeAdjacencies", "Move SimpleType: N(426) into ParameterizedType: NodeAdjacencies<N>(421) at 1", "Insert InfixExpression: ==(431) into InfixExpression: ||(435) at 0", "Insert InfixExpression: ==(434) into InfixExpression: ||(435) at 1", "Insert SimpleName: result(441) into VariableDeclarationFragment(446) at 0", "Move MethodInvocation(1220) into VariableDeclarationFragment(446) at 1", "Insert MethodInvocation(465) into ConditionalExpression(476) at 0", "Update SimpleName: NodeConnections(259) to NodeAdjacencies", "Insert MethodInvocation(199) into InfixExpression: ||(205) at 0", "Update SimpleName: edge(932) to node2", "Update SimpleName: NodeConnections(976) to NodeAdjacencies", "Update SimpleName: NodeConnections(1004) to NodeAdjacencies", "Update SimpleName: ImmutableList(1064) to nodeConnections", "Move SimpleName: ImmutableList(1064) into MethodInvocation(331) at 0", "Update SimpleName: copyOf(1065) to get", "Move SimpleName: copyOf(1065) into MethodInvocation(331) at 1", "Move SimpleName: node(1067) into MethodInvocation(331) at 2", "Move PrefixExpression: !(1107) into IfStatement(348) at 0", "Insert Block(347) into IfStatement(348) at 1", "Insert MethodInvocation(367) into ExpressionStatement(368) at 0", "Update SimpleName: NodeConnections(1188) to NodeAdjacencies", "Update SimpleName: NodeConnections(1202) to NodeAdjacencies", "Insert SimpleName: connectionsN1(429) into InfixExpression: ==(431) at 0", "Insert NullLiteral(430) into InfixExpression: ==(431) at 1", "Insert SimpleName: connectionsN2(432) into InfixExpression: ==(434) at 0", "Insert NullLiteral(433) into InfixExpression: ==(434) at 1", "Insert SimpleName: isDirected(464) into MethodInvocation(465) at 0", "Update SimpleName: DirectedNodeConnections(1256) to DirectedNodeAdjacencies", "Move SimpleType: N(323) into MethodInvocation(470) at 1", "Update SimpleName: UndirectedNodeConnections(1263) to UndirectedNodeAdjacencies", "Move SimpleType: N(677) into MethodInvocation(475) at 1", "Insert SimpleName: allowsSelfLoops(198) into MethodInvocation(199) at 0", "Move MethodInvocation(564) into PrefixExpression: !(204) at 0", "Insert MethodInvocation(233) into MethodInvocation(235) at 0", "Update SimpleName: node2(929) to successors", "Move ExpressionStatement(1122) into Block(347) at 0", "Insert MethodInvocation(364) into MethodInvocation(367) at 0", "Insert SimpleName: removeSuccessor(365) into MethodInvocation(367) at 1", "Insert SimpleName: node(366) into MethodInvocation(367) at 2", "Update SimpleName: edgesConnecting(927) to nodeConnections", "Move SimpleName: edgesConnecting(927) into MethodInvocation(233) at 0", "Insert SimpleName: get(231) into MethodInvocation(233) at 1", "Move SimpleName: node1(928) into MethodInvocation(233) at 2", "Update SimpleName: edges(1102) to node", "Move SimpleName: edges(1102) into MethodInvocation(337) at 0", "Update SimpleName: contains(1104) to equals", "Update SimpleName: edge(1105) to successor", "Insert SimpleName: nodeConnections(361) into MethodInvocation(364) at 0", "Insert SimpleName: get(362) into MethodInvocation(364) at 1", "Insert SimpleName: predecessor(363) into MethodInvocation(364) at 2", "Insert MethodInvocation(342) into MethodInvocation(345) at 0", "Update SimpleName: parallelEdges(1115) to removePredecessor", "Move SimpleName: parallelEdges(1115) into MethodInvocation(345) at 1", "Update SimpleName: edge(1117) to node", "Move SimpleName: edge(1117) into MethodInvocation(345) at 2", "Update SimpleName: removeEdgeAndUpdateConnections(1112) to nodeConnections", "Move SimpleName: removeEdgeAndUpdateConnections(1112) into MethodInvocation(342) at 0", "Update SimpleName: edge(1113) to get", "Move SimpleName: edge(1113) into MethodInvocation(342) at 1", "Update SimpleName: Graphs(1114) to successor", "Move SimpleName: Graphs(1114) into MethodInvocation(342) at 2", "Delete QualifiedName: com.google.common.graph.GraphErrorMessageUtils.ADDING_PARALLEL_EDGE(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.common.graph.GraphErrorMessageUtils.EDGE_NOT_IN_GRAPH(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.common.graph.GraphErrorMessageUtils.NODE_NOT_IN_GRAPH(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.common.graph.GraphErrorMessageUtils.NOT_AVAILABLE_ON_UNDIRECTED(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.common.graph.GraphErrorMessageUtils.REUSING_EDGE(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.common.collect.ImmutableList(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.common.collect.ImmutableSet(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.common.collect.Maps(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.common.collect.Sets(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.Collections(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.Iterator(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.Set(34)", "Delete ImportDeclaration(35)", "Delete TextElement: <p>This class maintains a map of (44)", "Delete SimpleName: NodeConnections(45)", "Delete TagElement: @link(46)", "Delete TextElement:  for every node(47)", "Delete TextElement: and (48)", "Delete SimpleName: IncidentNodes(49)", "Delete TagElement: @link(50)", "Delete TextElement:  for every edge.(51)", "Delete TextElement: <p>(52)", "Delete TextElement:  Set(53)", "Delete TagElement: @code(54)", "Delete TextElement: -returning accessors return unmodifiable views: the view returned will reflect(55)", "Delete TextElement: changes to the graph (if the graph is mutable) but may not be modified by the user.(56)", "Delete TextElement: The behavior of the returned view is undefined in the following cases:(57)", "Delete TextElement: <ul>(58)", "Delete TextElement: <li>Removing the element on which the accessor is called (e.g.:(59)", "Delete TextElement: <pre>(60)", "Delete TextElement: Set<N> adjacentNodes = adjacentNodes(node);(61)", "Delete TextElement: graph.removeNode(node);(62)", "Delete TagElement: @code(63)", "Delete TextElement: </pre>(64)", "Delete TextElement: At this point, the contents of (65)", "Delete TextElement:  adjacentNodes(66)", "Delete TagElement: @code(67)", "Delete TextElement:  are undefined.(68)", "Delete TextElement: </ul>(69)", "Delete TextElement: <p>The time complexity of all (70)", "Delete TextElement:  Set(71)", "Delete TagElement: @code(72)", "Delete TextElement: -returning accessors is O(1), since views are returned.(73)", "Delete TextElement: <li>(80)", "Delete TextElement:  addEdge(E edge, N node1, N node2)(81)", "Delete TagElement: @code(82)", "Delete TextElement: : O(1).(83)", "Delete TextElement: <li>(84)", "Delete TextElement: : O(d_node).(87)", "Delete TextElement: <li>(88)", "Delete TextElement:  removeEdge(E edge)(89)", "Delete TagElement: @code(90)", "Delete TextElement: : O(1), unless this graph allows parallel edges;(91)", "Delete TextElement: in that case this method is O(min(outD_edgeSource, inD_edgeTarget)).(92)", "Delete TextElement: </ul>(93)", "Delete TextElement: where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the(94)", "Delete TextElement: out-degree of node.(95)", "Delete TextElement: <(108)", "Delete SimpleName: E(109)", "Delete TextElement: >(110)", "Delete TextElement:  Edge parameter type(111)", "Delete TagElement: @param(112)", "Delete SimpleName: E(117)", "Delete TypeParameter(118)", "Delete SimpleName: E(123)", "Delete SimpleType: E(124)", "Delete Modifier: private(126)", "Delete Modifier: static(127)", "Delete Modifier: final(128)", "Delete PrimitiveType: int(129)", "Delete SimpleName: DEFAULT_MAP_SIZE(130)", "Delete NumberLiteral: 11(131)", "Delete VariableDeclarationFragment(132)", "Delete FieldDeclaration(133)", "Delete Modifier: private(134)", "Delete Modifier: final(135)", "Delete PrimitiveType: boolean(136)", "Delete SimpleName: isDirected(137)", "Delete VariableDeclarationFragment(138)", "Delete FieldDeclaration(139)", "Delete Modifier: private(140)", "Delete Modifier: final(141)", "Delete PrimitiveType: boolean(142)", "Delete SimpleName: allowsParallelEdges(143)", "Delete VariableDeclarationFragment(144)", "Delete FieldDeclaration(145)", "Delete Modifier: private(146)", "Delete Modifier: final(147)", "Delete PrimitiveType: boolean(148)", "Delete SimpleName: allowsSelfLoops(149)", "Delete VariableDeclarationFragment(150)", "Delete FieldDeclaration(151)", "Delete Modifier: private(152)", "Delete Modifier: final(153)", "Delete SimpleName: NodeConnections(158)", "Delete SimpleType: NodeConnections(159)", "Delete SimpleName: E(162)", "Delete SimpleType: E(163)", "Delete ParameterizedType: NodeConnections<N,E>(164)", "Delete ParameterizedType: Map<N,NodeConnections<N,E>>(165)", "Delete SimpleName: nodeConnections(166)", "Delete VariableDeclarationFragment(167)", "Delete FieldDeclaration(168)", "Delete Modifier: private(169)", "Delete Modifier: final(170)", "Delete SimpleName: E(173)", "Delete SimpleType: E(174)", "Delete SimpleName: IncidentNodes(175)", "Delete SimpleType: IncidentNodes(176)", "Delete ParameterizedType: IncidentNodes<N>(179)", "Delete ParameterizedType: Map<E,IncidentNodes<N>>(180)", "Delete SimpleName: edgeToIncidentNodes(181)", "Delete VariableDeclarationFragment(182)", "Delete FieldDeclaration(183)", "Delete SimpleName: E(249)", "Delete SimpleType: E(250)", "Delete WildcardType: ? super E(251)", "Delete SimpleName: builder(202)", "Delete SimpleName: Maps(203)", "Delete SimpleName: N(204)", "Delete SimpleType: N(205)", "Delete SimpleName: NodeConnections(206)", "Delete SimpleType: NodeConnections(207)", "Delete SimpleName: N(208)", "Delete SimpleType: N(209)", "Delete SimpleName: E(210)", "Delete SimpleType: E(211)", "Delete ParameterizedType: NodeConnections<N,E>(212)", "Delete SimpleName: newLinkedHashMapWithExpectedSize(213)", "Delete QualifiedName: builder.expectedNodeCount(214)", "Delete SimpleName: or(215)", "Delete SimpleName: DEFAULT_MAP_SIZE(216)", "Delete MethodInvocation(217)", "Delete MethodInvocation(218)", "Delete SimpleName: Maps(219)", "Delete SimpleName: E(220)", "Delete SimpleType: E(221)", "Delete SimpleName: IncidentNodes(222)", "Delete SimpleType: IncidentNodes(223)", "Delete SimpleName: N(224)", "Delete SimpleType: N(225)", "Delete ParameterizedType: IncidentNodes<N>(226)", "Delete SimpleName: newLinkedHashMapWithExpectedSize(227)", "Delete QualifiedName: builder.expectedEdgeCount(228)", "Delete SimpleName: or(229)", "Delete SimpleName: DEFAULT_MAP_SIZE(230)", "Delete MethodInvocation(231)", "Delete MethodInvocation(232)", "Delete ConstructorInvocation(233)", "Delete SimpleName: E(196)", "Delete SimpleType: E(197)", "Delete WildcardType: ? super E(198)", "Delete SimpleName: Map(255)", "Delete SimpleType: Map(256)", "Delete SimpleName: N(261)", "Delete SimpleType: N(262)", "Delete SimpleName: E(263)", "Delete SimpleType: E(264)", "Delete SimpleName: Map(269)", "Delete SimpleType: Map(270)", "Delete SimpleName: E(271)", "Delete SimpleType: E(272)", "Delete SimpleName: IncidentNodes(273)", "Delete SimpleType: IncidentNodes(274)", "Delete ParameterizedType: IncidentNodes<N>(277)", "Delete ParameterizedType: Map<E,IncidentNodes<N>>(278)", "Delete SimpleName: edgeToIncidentNodes(279)", "Delete SingleVariableDeclaration(280)", "Delete ThisExpression(281)", "Delete SimpleName: isDirected(282)", "Delete FieldAccess(283)", "Delete QualifiedName: builder.directed(284)", "Delete Assignment: =(285)", "Delete ExpressionStatement(286)", "Delete ThisExpression(287)", "Delete SimpleName: allowsParallelEdges(288)", "Delete FieldAccess(289)", "Delete QualifiedName: builder.allowsParallelEdges(290)", "Delete Assignment: =(291)", "Delete ExpressionStatement(292)", "Delete ThisExpression(293)", "Delete SimpleName: allowsSelfLoops(294)", "Delete FieldAccess(295)", "Delete QualifiedName: builder.allowsSelfLoops(296)", "Delete Assignment: =(297)", "Delete ExpressionStatement(298)", "Delete ThisExpression(299)", "Delete SimpleName: nodeConnections(300)", "Delete FieldAccess(301)", "Delete SimpleName: checkNotNull(302)", "Delete SimpleName: nodeConnections(303)", "Delete MethodInvocation(304)", "Delete Assignment: =(305)", "Delete ExpressionStatement(306)", "Delete ThisExpression(307)", "Delete SimpleName: edgeToIncidentNodes(308)", "Delete FieldAccess(309)", "Delete SimpleName: checkNotNull(310)", "Delete SimpleName: edgeToIncidentNodes(311)", "Delete MethodInvocation(312)", "Delete Assignment: =(313)", "Delete ExpressionStatement(314)", "Delete SimpleName: Override(317)", "Delete MarkerAnnotation(318)", "Delete Modifier: public(319)", "Delete SimpleName: Set(320)", "Delete SimpleType: Set(321)", "Delete ParameterizedType: Set<N>(324)", "Delete SimpleName: nodes(325)", "Delete SimpleName: Collections(326)", "Delete SimpleName: unmodifiableSet(327)", "Delete SimpleName: nodeConnections(328)", "Delete SimpleName: keySet(329)", "Delete MethodInvocation(330)", "Delete MethodInvocation(331)", "Delete ReturnStatement(332)", "Delete Block(333)", "Delete MethodDeclaration(334)", "Delete SimpleName: Override(335)", "Delete MarkerAnnotation(336)", "Delete Modifier: public(337)", "Delete SimpleName: Set(338)", "Delete SimpleType: Set(339)", "Delete SimpleName: E(340)", "Delete SimpleType: E(341)", "Delete ParameterizedType: Set<E>(342)", "Delete SimpleName: edges(343)", "Delete SimpleName: Collections(344)", "Delete SimpleName: unmodifiableSet(345)", "Delete SimpleName: edgeToIncidentNodes(346)", "Delete SimpleName: keySet(347)", "Delete MethodInvocation(348)", "Delete MethodInvocation(349)", "Delete ReturnStatement(350)", "Delete Block(351)", "Delete MethodDeclaration(352)", "Delete SimpleName: Override(353)", "Delete MarkerAnnotation(354)", "Delete Modifier: public(355)", "Delete PrimitiveType: boolean(356)", "Delete SimpleName: isDirected(357)", "Delete SimpleName: isDirected(358)", "Delete ReturnStatement(359)", "Delete Block(360)", "Delete MethodDeclaration(361)", "Delete SimpleName: Override(362)", "Delete MarkerAnnotation(363)", "Delete Modifier: public(364)", "Delete PrimitiveType: boolean(365)", "Delete SimpleName: allowsParallelEdges(366)", "Delete SimpleName: allowsParallelEdges(367)", "Delete ReturnStatement(368)", "Delete Block(369)", "Delete MethodDeclaration(370)", "Delete SimpleName: Override(371)", "Delete MarkerAnnotation(372)", "Delete Modifier: public(373)", "Delete PrimitiveType: boolean(374)", "Delete SimpleName: allowsSelfLoops(375)", "Delete SimpleName: allowsSelfLoops(376)", "Delete ReturnStatement(377)", "Delete Block(378)", "Delete MethodDeclaration(379)", "Delete SimpleName: Override(380)", "Delete MarkerAnnotation(381)", "Delete Modifier: public(382)", "Delete SimpleName: Set(383)", "Delete SimpleType: Set(384)", "Delete SimpleName: E(385)", "Delete SimpleType: E(386)", "Delete ParameterizedType: Set<E>(387)", "Delete SimpleName: incidentEdges(388)", "Delete SimpleName: Object(389)", "Delete SimpleType: Object(390)", "Delete SimpleName: node(391)", "Delete SingleVariableDeclaration(392)", "Delete SimpleName: checkedConnections(393)", "Delete SimpleName: node(394)", "Delete MethodInvocation(395)", "Delete SimpleName: incidentEdges(396)", "Delete MethodInvocation(397)", "Delete ReturnStatement(398)", "Delete Block(399)", "Delete MethodDeclaration(400)", "Delete SimpleName: Override(401)", "Delete MarkerAnnotation(402)", "Delete Modifier: public(403)", "Delete SimpleName: Set(404)", "Delete SimpleType: Set(405)", "Delete ParameterizedType: Set<N>(408)", "Delete SimpleName: incidentNodes(409)", "Delete SimpleName: Object(410)", "Delete SimpleType: Object(411)", "Delete SimpleName: edge(412)", "Delete SingleVariableDeclaration(413)", "Delete SimpleName: checkedIncidentNodes(414)", "Delete SimpleName: edge(415)", "Delete MethodInvocation(416)", "Delete ReturnStatement(417)", "Delete Block(418)", "Delete MethodDeclaration(419)", "Delete SimpleName: Override(420)", "Delete MarkerAnnotation(421)", "Delete Modifier: public(422)", "Delete SimpleName: Set(423)", "Delete SimpleType: Set(424)", "Delete ParameterizedType: Set<N>(427)", "Delete SimpleName: adjacentNodes(428)", "Delete SimpleName: Object(429)", "Delete SimpleType: Object(430)", "Delete SimpleName: node(431)", "Delete SingleVariableDeclaration(432)", "Delete SimpleName: checkedConnections(433)", "Delete SimpleName: node(434)", "Delete MethodInvocation(435)", "Delete SimpleName: adjacentNodes(436)", "Delete MethodInvocation(437)", "Delete ReturnStatement(438)", "Delete Block(439)", "Delete MethodDeclaration(440)", "Delete SimpleName: Override(441)", "Delete MarkerAnnotation(442)", "Delete Modifier: public(443)", "Delete SimpleName: Set(444)", "Delete SimpleType: Set(445)", "Delete SimpleName: E(446)", "Delete SimpleType: E(447)", "Delete ParameterizedType: Set<E>(448)", "Delete SimpleName: adjacentEdges(449)", "Delete SimpleName: Object(450)", "Delete SimpleType: Object(451)", "Delete SimpleName: edge(452)", "Delete SingleVariableDeclaration(453)", "Delete SimpleName: Iterator(454)", "Delete SimpleType: Iterator(455)", "Delete ParameterizedType: Iterator<N>(458)", "Delete SimpleName: incidentNodesIterator(459)", "Delete SimpleName: incidentNodes(460)", "Delete SimpleName: edge(461)", "Delete MethodInvocation(462)", "Delete SimpleName: iterator(463)", "Delete MethodInvocation(464)", "Delete VariableDeclarationFragment(465)", "Delete VariableDeclarationStatement(466)", "Delete SimpleName: Set(467)", "Delete SimpleType: Set(468)", "Delete SimpleName: E(469)", "Delete SimpleType: E(470)", "Delete ParameterizedType: Set<E>(471)", "Delete SimpleName: endpointsIncidentEdges(472)", "Delete SimpleName: incidentEdges(473)", "Delete SimpleName: incidentNodesIterator(474)", "Delete SimpleName: next(475)", "Delete MethodInvocation(476)", "Delete MethodInvocation(477)", "Delete VariableDeclarationFragment(478)", "Delete VariableDeclarationStatement(479)", "Delete SimpleName: incidentNodesIterator(480)", "Delete SimpleName: hasNext(481)", "Delete MethodInvocation(482)", "Delete SimpleName: endpointsIncidentEdges(483)", "Delete SimpleName: Sets(484)", "Delete SimpleName: union(485)", "Delete SimpleName: incidentEdges(486)", "Delete SimpleName: incidentNodesIterator(487)", "Delete SimpleName: next(488)", "Delete MethodInvocation(489)", "Delete MethodInvocation(490)", "Delete SimpleName: endpointsIncidentEdges(491)", "Delete MethodInvocation(492)", "Delete Assignment: =(493)", "Delete ExpressionStatement(494)", "Delete Block(495)", "Delete WhileStatement(496)", "Delete SimpleName: Sets(497)", "Delete SimpleName: difference(498)", "Delete SimpleName: endpointsIncidentEdges(499)", "Delete SimpleName: ImmutableSet(500)", "Delete SimpleName: of(501)", "Delete SimpleName: edge(502)", "Delete MethodInvocation(503)", "Delete MethodInvocation(504)", "Delete ReturnStatement(505)", "Delete Block(506)", "Delete MethodDeclaration(507)", "Delete TextElement: If (508)", "Delete TextElement:  is equal to (511)", "Delete TextElement: , the set of self-loop edges is returned.(514)", "Delete TextElement: Otherwise, returns the intersection of these two sets, using (515)", "Delete SimpleName: Sets(516)", "Delete SimpleName: intersection(517)", "Delete MemberRef(518)", "Delete TagElement: @link(519)", "Delete TextElement: :(520)", "Delete TextElement: <ol>(521)", "Delete TextElement: <li>Outgoing edges of (522)", "Delete TextElement:  node1(523)", "Delete TagElement: @code(524)", "Delete TextElement: .(525)", "Delete TextElement: <li>Incoming edges of (526)", "Delete TextElement:  node2(527)", "Delete TagElement: @code(528)", "Delete TextElement: .(529)", "Delete TextElement: </ol>(530)", "Delete TagElement(531)", "Delete Javadoc(532)", "Delete Modifier: public(535)", "Delete SimpleName: Set(536)", "Delete SimpleType: Set(537)", "Delete SimpleName: E(538)", "Delete SimpleType: E(539)", "Delete ParameterizedType: Set<E>(540)", "Delete SimpleName: edgesConnecting(541)", "Delete SimpleName: Set(550)", "Delete SimpleType: Set(551)", "Delete SimpleName: E(552)", "Delete SimpleType: E(553)", "Delete ParameterizedType: Set<E>(554)", "Delete SimpleName: outEdgesN1(555)", "Delete SimpleName: outEdges(556)", "Delete SimpleName: node1(557)", "Delete MethodInvocation(558)", "Delete VariableDeclarationFragment(559)", "Delete VariableDeclarationStatement(560)", "Delete SimpleName: allowsSelfLoops(565)", "Delete PrefixExpression: !(566)", "Delete SimpleName: ImmutableSet(567)", "Delete SimpleName: of(568)", "Delete MethodInvocation(569)", "Delete ReturnStatement(570)", "Delete Block(571)", "Delete IfStatement(572)", "Delete SimpleName: Set(573)", "Delete SimpleType: Set(574)", "Delete SimpleName: E(575)", "Delete SimpleType: E(576)", "Delete ParameterizedType: Set<E>(577)", "Delete SimpleName: selfLoopEdges(578)", "Delete SimpleName: Sets(579)", "Delete SimpleName: filter(580)", "Delete SimpleName: outEdgesN1(581)", "Delete SimpleName: Graphs(582)", "Delete SimpleName: selfLoopPredicate(583)", "Delete ThisExpression(584)", "Delete MethodInvocation(585)", "Delete MethodInvocation(586)", "Delete VariableDeclarationFragment(587)", "Delete VariableDeclarationStatement(588)", "Delete SimpleName: Collections(589)", "Delete SimpleName: unmodifiableSet(590)", "Delete SimpleName: selfLoopEdges(591)", "Delete MethodInvocation(592)", "Delete ReturnStatement(593)", "Delete Block(594)", "Delete IfStatement(595)", "Delete SimpleName: Set(596)", "Delete SimpleType: Set(597)", "Delete SimpleName: E(598)", "Delete SimpleType: E(599)", "Delete ParameterizedType: Set<E>(600)", "Delete SimpleName: inEdgesN2(601)", "Delete SimpleName: inEdges(602)", "Delete SimpleName: node2(603)", "Delete MethodInvocation(604)", "Delete VariableDeclarationFragment(605)", "Delete VariableDeclarationStatement(606)", "Delete SimpleName: outEdgesN1(607)", "Delete SimpleName: size(608)", "Delete MethodInvocation(609)", "Delete SimpleName: inEdgesN2(610)", "Delete SimpleName: size(611)", "Delete MethodInvocation(612)", "Delete InfixExpression: <=(613)", "Delete ParenthesizedExpression(614)", "Delete SimpleName: Sets(615)", "Delete SimpleName: intersection(616)", "Delete SimpleName: outEdgesN1(617)", "Delete SimpleName: inEdgesN2(618)", "Delete MethodInvocation(619)", "Delete SimpleName: Sets(620)", "Delete SimpleName: intersection(621)", "Delete SimpleName: inEdgesN2(622)", "Delete SimpleName: outEdgesN1(623)", "Delete MethodInvocation(624)", "Delete ConditionalExpression(625)", "Delete ReturnStatement(626)", "Delete Block(627)", "Delete MethodDeclaration(628)", "Delete SimpleName: Override(629)", "Delete MarkerAnnotation(630)", "Delete Modifier: public(631)", "Delete SimpleName: Set(632)", "Delete SimpleType: Set(633)", "Delete SimpleName: E(634)", "Delete SimpleType: E(635)", "Delete ParameterizedType: Set<E>(636)", "Delete SimpleName: inEdges(637)", "Delete SimpleName: Object(638)", "Delete SimpleType: Object(639)", "Delete SimpleName: node(640)", "Delete SingleVariableDeclaration(641)", "Delete SimpleName: checkedConnections(642)", "Delete SimpleName: node(643)", "Delete MethodInvocation(644)", "Delete SimpleName: inEdges(645)", "Delete MethodInvocation(646)", "Delete ReturnStatement(647)", "Delete Block(648)", "Delete MethodDeclaration(649)", "Delete SimpleName: Override(650)", "Delete MarkerAnnotation(651)", "Delete Modifier: public(652)", "Delete SimpleName: Set(653)", "Delete SimpleType: Set(654)", "Delete SimpleName: E(655)", "Delete SimpleType: E(656)", "Delete ParameterizedType: Set<E>(657)", "Delete SimpleName: outEdges(658)", "Delete SimpleName: Object(659)", "Delete SimpleType: Object(660)", "Delete SimpleName: node(661)", "Delete SingleVariableDeclaration(662)", "Delete SimpleName: checkedConnections(663)", "Delete SimpleName: node(664)", "Delete MethodInvocation(665)", "Delete SimpleName: outEdges(666)", "Delete MethodInvocation(667)", "Delete ReturnStatement(668)", "Delete Block(669)", "Delete MethodDeclaration(670)", "Delete SimpleName: Override(671)", "Delete MarkerAnnotation(672)", "Delete Modifier: public(673)", "Delete SimpleName: Set(674)", "Delete SimpleType: Set(675)", "Delete ParameterizedType: Set<N>(678)", "Delete SimpleName: predecessors(679)", "Delete SimpleName: Object(680)", "Delete SimpleType: Object(681)", "Delete SimpleName: node(682)", "Delete SingleVariableDeclaration(683)", "Delete SimpleName: checkedConnections(684)", "Delete SimpleName: node(685)", "Delete MethodInvocation(686)", "Delete SimpleName: predecessors(687)", "Delete MethodInvocation(688)", "Delete ReturnStatement(689)", "Delete Block(690)", "Delete MethodDeclaration(691)", "Delete SimpleName: Override(692)", "Delete MarkerAnnotation(693)", "Delete Modifier: public(694)", "Delete SimpleName: Set(695)", "Delete SimpleType: Set(696)", "Delete SimpleName: N(697)", "Delete SimpleType: N(698)", "Delete ParameterizedType: Set<N>(699)", "Delete SimpleName: successors(700)", "Delete SimpleName: Object(701)", "Delete SimpleType: Object(702)", "Delete SimpleName: node(703)", "Delete SingleVariableDeclaration(704)", "Delete SimpleName: checkedConnections(705)", "Delete SimpleName: node(706)", "Delete MethodInvocation(707)", "Delete SimpleName: successors(708)", "Delete MethodInvocation(709)", "Delete ReturnStatement(710)", "Delete Block(711)", "Delete MethodDeclaration(712)", "Delete SimpleName: Override(713)", "Delete MarkerAnnotation(714)", "Delete Modifier: public(715)", "Delete SimpleName: N(716)", "Delete SimpleType: N(717)", "Delete SimpleName: source(718)", "Delete SimpleName: Object(719)", "Delete SimpleType: Object(720)", "Delete SimpleName: edge(721)", "Delete SingleVariableDeclaration(722)", "Delete SimpleName: isDirected(723)", "Delete PrefixExpression: !(724)", "Delete SimpleName: UnsupportedOperationException(725)", "Delete SimpleType: UnsupportedOperationException(726)", "Delete SimpleName: NOT_AVAILABLE_ON_UNDIRECTED(727)", "Delete ClassInstanceCreation(728)", "Delete ThrowStatement(729)", "Delete Block(730)", "Delete IfStatement(731)", "Delete SimpleName: checkedIncidentNodes(732)", "Delete SimpleName: edge(733)", "Delete MethodInvocation(734)", "Delete SimpleName: node1(735)", "Delete MethodInvocation(736)", "Delete ReturnStatement(737)", "Delete Block(738)", "Delete MethodDeclaration(739)", "Delete SimpleName: Override(740)", "Delete MarkerAnnotation(741)", "Delete Modifier: public(742)", "Delete SimpleName: N(743)", "Delete SimpleType: N(744)", "Delete SimpleName: target(745)", "Delete SimpleName: Object(746)", "Delete SimpleType: Object(747)", "Delete SimpleName: edge(748)", "Delete SingleVariableDeclaration(749)", "Delete SimpleName: isDirected(750)", "Delete PrefixExpression: !(751)", "Delete SimpleName: UnsupportedOperationException(752)", "Delete SimpleType: UnsupportedOperationException(753)", "Delete SimpleName: NOT_AVAILABLE_ON_UNDIRECTED(754)", "Delete ClassInstanceCreation(755)", "Delete ThrowStatement(756)", "Delete Block(757)", "Delete IfStatement(758)", "Delete SimpleName: checkedIncidentNodes(759)", "Delete SimpleName: edge(760)", "Delete MethodInvocation(761)", "Delete SimpleName: node2(762)", "Delete MethodInvocation(763)", "Delete ReturnStatement(764)", "Delete Block(765)", "Delete MethodDeclaration(766)", "Delete TagElement: @code(805)", "Delete TextElement:  if (810)", "Delete TextElement:  edge(811)", "Delete TagElement: @code(812)", "Delete TextElement:  if an edge (other than (823)", "Delete TextElement:  edge(824)", "Delete TagElement: @code(825)", "Delete TextElement: ) already(826)", "Delete TextElement: exists from (827)", "Delete TextElement:  to (830)", "Delete TextElement: , and this is not a multigraph.(833)", "Delete TextElement:  node1(835)", "Delete TagElement: @code(836)", "Delete TextElement:  node2(838)", "Delete TagElement: @code(839)", "Delete SimpleName: E(850)", "Delete SimpleType: E(851)", "Delete SimpleName: edge(852)", "Delete SingleVariableDeclaration(853)", "Delete SimpleName: checkNotNull(862)", "Delete SimpleName: edge(863)", "Delete StringLiteral: \"edge\"(864)", "Delete MethodInvocation(865)", "Delete ExpressionStatement(866)", "Delete SimpleName: IncidentNodes(877)", "Delete SimpleType: IncidentNodes(878)", "Delete SimpleName: N(879)", "Delete SimpleType: N(880)", "Delete ParameterizedType: IncidentNodes<N>(881)", "Delete SimpleName: incidentNodes(882)", "Delete SimpleName: IncidentNodes(883)", "Delete SimpleName: of(884)", "Delete SimpleName: node1(885)", "Delete SimpleName: node2(886)", "Delete MethodInvocation(887)", "Delete VariableDeclarationFragment(888)", "Delete VariableDeclarationStatement(889)", "Delete SimpleName: allowsSelfLoops(891)", "Delete SimpleName: incidentNodes(892)", "Delete SimpleName: isSelfLoop(893)", "Delete MethodInvocation(894)", "Delete SimpleName: edges(919)", "Delete MethodInvocation(920)", "Delete SimpleName: contains(921)", "Delete SimpleName: edge(922)", "Delete MethodInvocation(923)", "Delete SimpleName: checkArgument(924)", "Delete InfixExpression: &&(934)", "Delete SimpleName: REUSING_EDGE(935)", "Delete SimpleName: edge(936)", "Delete SimpleName: incidentNodes(937)", "Delete SimpleName: edge(938)", "Delete MethodInvocation(939)", "Delete SimpleName: incidentNodes(940)", "Delete MethodInvocation(941)", "Delete ExpressionStatement(942)", "Delete Block(945)", "Delete SimpleName: allowsParallelEdges(946)", "Delete PrefixExpression: !(947)", "Delete SimpleName: checkArgument(948)", "Delete SimpleName: containsN1(949)", "Delete SimpleName: containsN2(950)", "Delete SimpleName: successors(951)", "Delete SimpleName: node1(952)", "Delete MethodInvocation(953)", "Delete SimpleName: contains(954)", "Delete SimpleName: node2(955)", "Delete MethodInvocation(956)", "Delete InfixExpression: &&(957)", "Delete ParenthesizedExpression(958)", "Delete PrefixExpression: !(959)", "Delete SimpleName: ADDING_PARALLEL_EDGE(960)", "Delete SimpleName: node1(961)", "Delete SimpleName: node2(962)", "Delete MethodInvocation(963)", "Delete ExpressionStatement(964)", "Delete Block(965)", "Delete IfStatement(966)", "Delete SimpleName: N(978)", "Delete SimpleType: N(979)", "Delete SimpleName: E(980)", "Delete SimpleType: E(981)", "Delete SimpleName: edge(993)", "Delete SimpleName: N(1006)", "Delete SimpleType: N(1007)", "Delete SimpleName: E(1008)", "Delete SimpleType: E(1009)", "Delete SimpleName: edge(1021)", "Delete SimpleName: edgeToIncidentNodes(1024)", "Delete SimpleName: put(1025)", "Delete SimpleName: edge(1026)", "Delete SimpleName: incidentNodes(1027)", "Delete MethodInvocation(1028)", "Delete ExpressionStatement(1029)", "Delete SimpleName: E(1060)", "Delete SimpleType: E(1061)", "Delete SimpleName: edge(1062)", "Delete MethodInvocation(1103)", "Delete ThisExpression(1116)", "Delete MethodInvocation(1118)", "Delete SimpleName: isEmpty(1119)", "Delete MethodInvocation(1120)", "Delete SimpleName: IncidentNodes(1161)", "Delete SimpleType: IncidentNodes(1162)", "Delete SimpleName: N(1163)", "Delete SimpleType: N(1164)", "Delete ParameterizedType: IncidentNodes<N>(1165)", "Delete SimpleName: incidentNodes(1166)", "Delete SimpleName: checkedIncidentNodes(1167)", "Delete SimpleName: edge(1168)", "Delete MethodInvocation(1169)", "Delete VariableDeclarationFragment(1170)", "Delete VariableDeclarationStatement(1171)", "Delete SimpleName: node1(1174)", "Delete MethodInvocation(1177)", "Delete VariableDeclarationFragment(1178)", "Delete VariableDeclarationStatement(1179)", "Delete SimpleName: node2(1182)", "Delete MethodInvocation(1185)", "Delete VariableDeclarationFragment(1186)", "Delete VariableDeclarationStatement(1187)", "Delete SimpleName: N(1190)", "Delete SimpleType: N(1191)", "Delete SimpleName: E(1192)", "Delete SimpleType: E(1193)", "Delete SimpleName: N(1204)", "Delete SimpleType: N(1205)", "Delete SimpleName: E(1206)", "Delete SimpleType: E(1207)", "Delete SimpleName: disconnectIncidentNodes(1216)", "Delete ExpressionStatement(1221)", "Delete Block(1227)", "Delete IfStatement(1228)", "Delete SimpleName: connectionsN1(1229)", "Delete SimpleName: removeOutEdge(1230)", "Delete SimpleName: edge(1231)", "Delete MethodInvocation(1232)", "Delete ExpressionStatement(1233)", "Delete SimpleName: connectionsN2(1234)", "Delete SimpleName: removeInEdge(1235)", "Delete SimpleName: edge(1236)", "Delete MethodInvocation(1237)", "Delete ExpressionStatement(1238)", "Delete SimpleName: edgeToIncidentNodes(1239)", "Delete SimpleName: remove(1240)", "Delete SimpleName: edge(1241)", "Delete MethodInvocation(1242)", "Delete ExpressionStatement(1243)", "Delete SimpleName: incidentEdges(1066)", "Delete MethodInvocation(1068)", "Delete MethodInvocation(1069)", "Delete SimpleName: edge(1071)", "Delete BooleanLiteral: true(1072)", "Delete MethodInvocation(1073)", "Delete ExpressionStatement(1074)", "Delete Block(1075)", "Delete EnhancedForStatement(1076)", "Delete Block(1084)", "Delete MethodDeclaration(1085)", "Delete SimpleName: Override(1086)", "Delete MarkerAnnotation(1087)", "Delete Modifier: public(1090)", "Delete PrimitiveType: boolean(1091)", "Delete SimpleName: removeEdge(1092)", "Delete SimpleName: Object(1093)", "Delete SimpleType: Object(1094)", "Delete SimpleName: edge(1095)", "Delete SingleVariableDeclaration(1096)", "Delete SimpleName: checkNotNull(1097)", "Delete SimpleName: edge(1098)", "Delete StringLiteral: \"edge\"(1099)", "Delete MethodInvocation(1100)", "Delete ExpressionStatement(1101)", "Delete IfStatement(1111)", "Delete BooleanLiteral: true(1123)", "Delete ReturnStatement(1124)", "Delete Block(1125)", "Delete MethodDeclaration(1126)", "Delete TextElement: If (1127)", "Delete TextElement:  disconnectIncidentNodes(1128)", "Delete TagElement: @code(1129)", "Delete TextElement:  is true, disconnects the nodes formerly connected(1130)", "Delete TextElement: by (1131)", "Delete TextElement:  edge(1132)", "Delete TagElement: @code(1133)", "Delete TextElement: . This should be set when all parallel edges are or will be removed.(1134)", "Delete TextElement: <p>Unlike (1135)", "Delete SimpleName: removeEdge(1136)", "Delete SimpleName: Object(1137)", "Delete SimpleType: Object(1138)", "Delete MethodRefParameter(1139)", "Delete MethodRef(1140)", "Delete TagElement: @link(1141)", "Delete TextElement: , this method is guaranteed to run in O(1) time.(1142)", "Delete TagElement(1143)", "Delete SimpleName: IllegalArgumentException(1144)", "Delete TextElement:  if (1145)", "Delete TextElement:  edge(1146)", "Delete TagElement: @code(1147)", "Delete TextElement:  is not present in the graph.(1148)", "Delete TagElement: @throws(1149)", "Delete Javadoc(1150)", "Delete Modifier: private(1151)", "Delete PrimitiveType: void(1152)", "Delete SimpleName: removeEdgeAndUpdateConnections(1153)", "Delete SimpleName: Object(1154)", "Delete SimpleType: Object(1155)", "Delete SimpleName: edge(1156)", "Delete SingleVariableDeclaration(1157)", "Delete PrimitiveType: boolean(1158)", "Delete SimpleName: disconnectIncidentNodes(1159)", "Delete SingleVariableDeclaration(1160)", "Delete MethodDeclaration(1245)", "Delete SimpleName: N(1249)", "Delete SimpleType: N(1250)", "Delete SimpleName: E(1251)", "Delete SimpleType: E(1252)", "Delete SimpleName: isDirected(1255)", "Delete SimpleName: N(1257)", "Delete SimpleType: N(1258)", "Delete SimpleName: E(1259)", "Delete SimpleType: E(1260)", "Delete SimpleName: N(1264)", "Delete SimpleType: N(1265)", "Delete SimpleName: E(1266)", "Delete SimpleType: E(1267)", "Delete Modifier: private(1274)", "Delete SimpleName: NodeConnections(1275)", "Delete SimpleType: NodeConnections(1276)", "Delete SimpleName: N(1277)", "Delete SimpleType: N(1278)", "Delete SimpleName: E(1279)", "Delete SimpleType: E(1280)", "Delete ParameterizedType: NodeConnections<N,E>(1281)", "Delete SimpleName: checkedConnections(1282)", "Delete SimpleName: Object(1283)", "Delete SimpleType: Object(1284)", "Delete SimpleName: node(1285)", "Delete SingleVariableDeclaration(1286)", "Delete SimpleName: checkNotNull(1287)", "Delete SimpleName: node(1288)", "Delete StringLiteral: \"node\"(1289)", "Delete MethodInvocation(1290)", "Delete ExpressionStatement(1291)", "Delete SimpleName: NodeConnections(1292)", "Delete SimpleType: NodeConnections(1293)", "Delete SimpleName: N(1294)", "Delete SimpleType: N(1295)", "Delete SimpleName: E(1296)", "Delete SimpleType: E(1297)", "Delete ParameterizedType: NodeConnections<N,E>(1298)", "Delete SimpleName: connections(1299)", "Delete VariableDeclarationFragment(1304)", "Delete VariableDeclarationStatement(1305)", "Delete SimpleName: checkArgument(1306)", "Delete SimpleName: connections(1307)", "Delete NullLiteral(1308)", "Delete InfixExpression: !=(1309)", "Delete SimpleName: NODE_NOT_IN_GRAPH(1310)", "Delete SimpleName: node(1311)", "Delete MethodInvocation(1312)", "Delete ExpressionStatement(1313)", "Delete SimpleName: connections(1314)", "Delete ReturnStatement(1315)", "Delete Block(1316)", "Delete MethodDeclaration(1317)", "Delete Modifier: private(1318)", "Delete SimpleName: IncidentNodes(1319)", "Delete SimpleType: IncidentNodes(1320)", "Delete SimpleName: N(1321)", "Delete SimpleType: N(1322)", "Delete ParameterizedType: IncidentNodes<N>(1323)", "Delete SimpleName: checkedIncidentNodes(1324)", "Delete SimpleName: Object(1325)", "Delete SimpleType: Object(1326)", "Delete SimpleName: edge(1327)", "Delete SingleVariableDeclaration(1328)", "Delete SimpleName: checkNotNull(1329)", "Delete SimpleName: edge(1330)", "Delete StringLiteral: \"edge\"(1331)", "Delete MethodInvocation(1332)", "Delete ExpressionStatement(1333)", "Delete SimpleName: IncidentNodes(1334)", "Delete SimpleType: IncidentNodes(1335)", "Delete SimpleName: N(1336)", "Delete SimpleType: N(1337)", "Delete ParameterizedType: IncidentNodes<N>(1338)", "Delete SimpleName: incidentNodes(1339)", "Delete SimpleName: edgeToIncidentNodes(1340)", "Delete SimpleName: get(1341)", "Delete SimpleName: edge(1342)", "Delete MethodInvocation(1343)", "Delete VariableDeclarationFragment(1344)", "Delete VariableDeclarationStatement(1345)", "Delete SimpleName: checkArgument(1346)", "Delete SimpleName: incidentNodes(1347)", "Delete NullLiteral(1348)", "Delete InfixExpression: !=(1349)", "Delete SimpleName: EDGE_NOT_IN_GRAPH(1350)", "Delete SimpleName: edge(1351)", "Delete MethodInvocation(1352)", "Delete ExpressionStatement(1353)", "Delete SimpleName: incidentNodes(1354)", "Delete ReturnStatement(1355)", "Delete Block(1356)", "Delete MethodDeclaration(1357)"]}}, {"DirectedNodeConnections_cluster": {"actions": []}}, {"DirectedNodeConnections_diff": {"operations": []}}, {"Graph_cluster": {"actions": [{"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 10", "MOV TagElement: @code to TagElement at 130", "MOV TagElement: @code to TagElement at 291", "MOV TagElement: @code to TagElement at 79", "MOV TagElement: @code to TagElement at 10", "MOV TagElement: @code to TagElement at 226", "MOV TagElement: @code to TagElement at 143", "MOV TagElement: @code to TagElement at 276", "MOV TagElement: @code to TagElement at 79", "MOV TagElement: @code to TagElement at 124", "MOV TagElement: @code to TagElement at 168", "MOV TagElement: @code to TagElement at 272"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Set<N> to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Set<N> to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Set<N> to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "UPDATE from A graph consisting of a set of nodes of type N and a set of edges of type E. to A graph consisting of a set of nodes of type N and a set of (implicit) edges.", "operations": ["UPD TextElement: A graph consisting of a set of nodes of type N and a set of edges of type E. from A graph consisting of a set of nodes of type N and a set of edges of type E. to A graph consisting of a set of nodes of type N and a set of (implicit) edges."]}, {"root": "UPDATE from <li>hyperedges (edges which are incident to arbitrary sets of nodes) to Users that want edges to be first-class objects should use the subtype ", "operations": ["UPD TextElement: <li>hyperedges (edges which are incident to arbitrary sets of nodes) from <li>hyperedges (edges which are incident to arbitrary sets of nodes) to Users that want edges to be first-class objects should use the subtype "]}, {"root": "UPDATE from @code to @link", "operations": ["UPD TagElement: @code from @code to @link", "UPD TagElement: @code from @code to @link", "UPD TagElement: @code from @code to @link", "UPD TagElement: @code from @code to @link", "UPD TagElement: @code from @code to @link"]}, {"root": "UPDATE from  and  to  instead.", "operations": ["UPD TextElement:  and  from  and  to  instead."]}, {"root": "UPDATE from  are <b>incident</b> to each other if the set of to <p>For convenience, we may use the term 'graph' to refer to any subtype of ", "operations": ["UPD TextElement:  are <b>incident</b> to each other if the set of from  are <b>incident</b> to each other if the set of to <p>For convenience, we may use the term 'graph' to refer to any subtype of "]}, {"root": "UPDATE from 's endpoints includes  to ,", "operations": ["UPD TextElement: 's endpoints includes  from 's endpoints includes  to ,"]}, {"root": "UPDATE from  and  to including ", "operations": ["UPD TextElement:  and  from  and  to including "]}, {"root": "UPDATE from  is an <b>incoming edge</b> of a  to <p>Users that wish to modify a ", "operations": ["UPD TextElement:  is an <b>incoming edge</b> of a  from  is an <b>incoming edge</b> of a  to <p>Users that wish to modify a "]}, {"root": "UPDATE from  if it can be traversed (in to  must work with its subinterface,", "operations": ["UPD TextElement:  if it can be traversed (in from  if it can be traversed (in to  must work with its subinterface,"]}, {"root": "UPDATE from the direction, if any, of  to <p>This interface permits, but does not enforce, any of the following variations of graphs:", "operations": ["UPD TextElement: the direction, if any, of  from the direction, if any, of  to <p>This interface permits, but does not enforce, any of the following variations of graphs:"]}, {"root": "UPDATE from <li>Note: <b>undirected</b> edges are both incoming and outgoing edges of a  to <li>directed and undirected edges", "operations": ["UPD TextElement: <li>Note: <b>undirected</b> edges are both incoming and outgoing edges of a  from <li>Note: <b>undirected</b> edges are both incoming and outgoing edges of a  to <li>directed and undirected edges"]}, {"root": "UPDATE from while <b>directed</b> edges are either incoming or outgoing edges of  to <li>hyperedges (edges which are incident to arbitrary sets of nodes)", "operations": ["UPD TextElement: while <b>directed</b> edges are either incoming or outgoing edges of  from while <b>directed</b> edges are either incoming or outgoing edges of  to <li>hyperedges (edges which are incident to arbitrary sets of nodes)"]}, {"root": "UPDATE from  node to <li>nodes and edges with attributes (for example, weighted edges)", "operations": ["UPD TextElement:  node from  node to <li>nodes and edges with attributes (for example, weighted edges)"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  node to TagElement at 65"]}, {"root": "UPDATE from (and not both, unless the edge is a self-loop). to <li>nodes and edges of different types (for example, bipartite or multimodal graphs)", "operations": ["UPD TextElement: (and not both, unless the edge is a self-loop). from (and not both, unless the edge is a self-loop). to <li>nodes and edges of different types (for example, bipartite or multimodal graphs)"]}, {"root": "UPDATE from <br>Thus, in the following example  to <li>internal representations as matrices, adjacency lists, adjacency maps, etc.", "operations": ["UPD TextElement: <br>Thus, in the following example  from <br>Thus, in the following example  to <li>internal representations as matrices, adjacency lists, adjacency maps, etc."]}, {"root": "UPDATE from  edge1 to </ul>", "operations": ["UPD TextElement:  edge1 from  edge1 to </ul>", "UPD TextElement:  (and is not itself  from  (and is not itself  to </ul>"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  edge1 to TagElement at 69"]}, {"root": "UPDATE from  is an incoming edge of  to <p>Extensions or implementations of this interface may enforce or disallow any or all", "operations": ["UPD TextElement:  is an incoming edge of  from  is an incoming edge of  to <p>Extensions or implementations of this interface may enforce or disallow any or all"]}, {"root": "UPDATE from an outgoing edge of  to of these variations.", "operations": ["UPD TextElement: an outgoing edge of  from an outgoing edge of  to of these variations."]}, {"root": "UPDATE from , while  to <p>Definitions:", "operations": ["UPD TextElement: , while  from , while  to <p>Definitions:"]}, {"root": "UPDATE from  edge2 to <ul>", "operations": ["UPD TextElement:  edge2 from  edge2 to <ul>", "UPD TextElement:  node from  node to <ul>"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  edge2 to TagElement at 75"]}, {"root": "UPDATE from <li>A node  to <li>", "operations": ["UPD TextElement: <li>A node  from <li>A node  to <li>", "UPD TextElement:  (and is not itself  from  (and is not itself  to <li>", "UPD TextElement:  if it is incident to an outgoing from  if it is incident to an outgoing to <li>", "UPD TextElement:  is both an incoming and an outgoing from  is both an incoming and an outgoing to <li>", "UPD TextElement:  if it is incident to an incoming from  if it is incident to an incoming to <li>"]}, {"root": "UPDATE from  if  to  and ", "operations": ["UPD TextElement:  if  from  if  to  and ", "UPD TextElement:  node3 from  node3 to  and "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  node3 to TagElement at 79"]}, {"root": "UPDATE from  and  to  are mutually <b>adjacent</b> (or <b>connected</b> in", "operations": ["UPD TextElement:  and  from  and  to  are mutually <b>adjacent</b> (or <b>connected</b> in"]}, {"root": "UPDATE from : to  if an edge has been added between them:", "operations": ["UPD TextElement: : from : to  if an edge has been added between them:"]}, {"root": "UPDATE from directedGraph.addEdge(edge1, node1, node2); to graph.addEdge(node1, node2);  // after this returns, node1 and node2 are adjacent", "operations": ["UPD TextElement: directedGraph.addEdge(edge1, node1, node2); from directedGraph.addEdge(edge1, node1, node2); to graph.addEdge(node1, node2);  // after this returns, node1 and node2 are adjacent"]}, {"root": "UPDATE from <li>A node  to In this example, if ", "operations": ["UPD TextElement: <li>A node  from <li>A node  to In this example, if "]}, {"root": "UPDATE from  is a <b>predecessor</b> of  to  is <b>directed</b>, then:", "operations": ["UPD TextElement:  is a <b>predecessor</b> of  from  is a <b>predecessor</b> of  to  is <b>directed</b>, then:"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  node to TagElement at 94"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 97", "MOV TagElement: @code to TagElement at 102", "MOV TagElement: @code to TagElement at 120", "MOV TagElement: @code to TagElement at 104", "MOV TagElement: @code to TagElement at 113", "MOV TagElement: @code to TagElement at 151"]}, {"root": "UPDATE from  of  to  is a <b>predecessor</b> of {code node2} in ", "operations": ["UPD TextElement:  of  from  of  to  is a <b>predecessor</b> of {code node2} in "]}, {"root": "UPDATE from  node to  is a <b>successor</b> of ", "operations": ["UPD TextElement:  node from  node to  is a <b>successor</b> of "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  node to TagElement at 103"]}, {"root": "UPDATE from  is a <b>successor</b> of  to  in ", "operations": ["UPD TextElement:  is a <b>successor</b> of  from  is a <b>successor</b> of  to  in ", "UPD TextElement:  of  from  of  to  in ", "UPD TextElement:  unless  from  unless  to  in "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 111", "MOV TagElement: @code to TagElement at 118"]}, {"root": "UPDATE from  succ to  has an (implicit) outgoing edge to ", "operations": ["UPD TextElement:  succ from  succ to  has an (implicit) outgoing edge to "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  succ to TagElement at 112"]}, {"root": "UPDATE from  edge to  has an (implicit) incoming edge from ", "operations": ["UPD TextElement:  edge from  edge to  has an (implicit) incoming edge from "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  edge to TagElement at 119"]}, {"root": "UPDATE from  unless  to If ", "operations": ["UPD TextElement:  unless  from  unless  to If "]}, {"root": "UPDATE from <li>Directed edges only: to  is <b>undirected</b>, then:", "operations": ["UPD TextElement: <li>Directed edges only: from <li>Directed edges only: to  is <b>undirected</b>, then:"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 154", "MOV TagElement: @code to TagElement at 133"]}, {"root": "UPDATE from  is an outgoing edge to  are mutually predecessors and successors", "operations": ["UPD TextElement:  is an outgoing edge from  is an outgoing edge to  are mutually predecessors and successors"]}, {"root": "UPDATE from of  to in ", "operations": ["UPD TextElement: of  from of  to in "]}, {"root": "UPDATE from  is a <b>target</b> of  to  has an (implicit) edge in ", "operations": ["UPD TextElement:  is a <b>target</b> of  from  is a <b>target</b> of  to  has an (implicit) edge in "]}, {"root": "UPDATE from  if  to  that is both outgoing to", "operations": ["UPD TextElement:  if  from  if  to  that is both outgoing to"]}, {"root": "UPDATE from  edge to to ", "operations": ["UPD TextElement:  edge from  edge to to "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  edge to TagElement at 150"]}, {"root": "UPDATE from  is an incoming edge to  and incoming from ", "operations": ["UPD TextElement:  is an incoming edge from  is an incoming edge to  and incoming from "]}, {"root": "UPDATE from . to , and vice versa.", "operations": ["UPD TextElement: . from . to , and vice versa."]}, {"root": "INS TextElement: <li>A self-loop is an edge that connects a node to itself. to TagElement at 158", "operations": ["INS TextElement: <li>A self-loop is an edge that connects a node to itself. to TagElement at 158"]}, {"root": "UPDATE from <li><b>Nodes/edges must be useable as  to <li><b>Nodes must be useable as ", "operations": ["UPD TextElement: <li><b>Nodes/edges must be useable as  from <li><b>Nodes/edges must be useable as  to <li><b>Nodes must be useable as "]}, {"root": "UPDATE from  implementations. to .", "operations": ["UPD TextElement:  implementations. from  implementations. to ."]}, {"root": "UPDATE from <li>If graph elements have mutable state, both of the following must be true: to <li>If graph elements have mutable state:", "operations": ["UPD TextElement: <li>If graph elements have mutable state, both of the following must be true: from <li>If graph elements have mutable state, both of the following must be true: to <li>If graph elements have mutable state:"]}, {"root": "UPDATE from interchangeable.  In particular, when adding such elements to a graph, you should create to interchangeable.  In particular, when adding such elements to a graph, you should", "operations": ["UPD TextElement: interchangeable.  In particular, when adding such elements to a graph, you should create from interchangeable.  In particular, when adding such elements to a graph, you should create to interchangeable.  In particular, when adding such elements to a graph, you should"]}, {"root": "UPDATE from them once and store the reference if you will need to refer to those elements more than to create them once and store the reference if you will need to refer to those elements", "operations": ["UPD TextElement: them once and store the reference if you will need to refer to those elements more than from them once and store the reference if you will need to refer to those elements more than to create them once and store the reference if you will need to refer to those elements"]}, {"root": "UPDATE from once during creation (rather than passing  to more than once during creation (rather than passing ", "operations": ["UPD TextElement: once during creation (rather than passing  from once during creation (rather than passing  to more than once during creation (rather than passing "]}, {"root": "UPDATE from  to each to to each ", "operations": ["UPD TextElement:  to each from  to each to to each "]}, {"root": "UPDATE from <br>Generally speaking, your design may be more robust if you use immutable nodes/edges and to <br>Generally speaking, your design may be more robust if you use immutable nodes and", "operations": ["UPD TextElement: <br>Generally speaking, your design may be more robust if you use immutable nodes/edges and from <br>Generally speaking, your design may be more robust if you use immutable nodes/edges and to <br>Generally speaking, your design may be more robust if you use immutable nodes and"]}, {"root": "UPDATE from <li>There are no Node or Edge classes built in.  So you can have a  to <li>There are no Node classes built in.  So you can have a ", "operations": ["UPD TextElement: <li>There are no Node or Edge classes built in.  So you can have a  from <li>There are no Node or Edge classes built in.  So you can have a  to <li>There are no Node classes built in.  So you can have a "]}, {"root": "UPDATE from <li>This framework supports multiple mechanisms for storing the topology of a graph, including: to <li>This framework supports multiple mechanisms for storing the topology of a graph,", "operations": ["UPD TextElement: <li>This framework supports multiple mechanisms for storing the topology of a graph, including: from <li>This framework supports multiple mechanisms for storing the topology of a graph, including: to <li>This framework supports multiple mechanisms for storing the topology of a graph,"]}, {"root": "INS TextElement: including: to TagElement at 210", "operations": ["INS TextElement: including: to TagElement at 210"]}, {"root": "UPDATE from <li>the Graph implementation stores the topology (for example, by storing a  to <li>the Graph implementation stores the topology (for example, by storing a", "operations": ["UPD TextElement: <li>the Graph implementation stores the topology (for example, by storing a  from <li>the Graph implementation stores the topology (for example, by storing a  to <li>the Graph implementation stores the topology (for example, by storing a"]}, {"root": "UPDATE from that maps nodes onto their incident edges); this implies that the nodes and edges to  that maps nodes onto their adjacent nodes); this implies that the nodes", "operations": ["UPD TextElement: that maps nodes onto their incident edges); this implies that the nodes and edges from that maps nodes onto their incident edges); this implies that the nodes and edges to  that maps nodes onto their adjacent nodes); this implies that the nodes"]}, {"root": "UPDATE from  of incident edges); to  of adjacent nodes);", "operations": ["UPD TextElement:  of incident edges); from  of incident edges); to  of adjacent nodes);"]}, {"root": "UPDATE from  if passed a node/edge to  if passed an element", "operations": ["UPD TextElement:  if passed a node/edge from  if passed a node/edge to  if passed an element"]}, {"root": "UPDATE from <li>Accessors take Object parameters rather than N/E generic type specifiers to match the pattern to <li>Accessors take Object parameters rather than generic type specifiers to match the pattern", "operations": ["UPD TextElement: <li>Accessors take Object parameters rather than N/E generic type specifiers to match the pattern from <li>Accessors take Object parameters rather than N/E generic type specifiers to match the pattern to <li>Accessors take Object parameters rather than generic type specifiers to match the pattern"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 12"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: in this graph, returns  to TagElement at 9", "MOV TagElement: @code to TagElement at 10"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 1"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @throws to Javadoc at 1"]}, {"root": "INS SimpleName: Network to TagElement: @code at 0", "operations": ["INS SimpleName: Network to TagElement: @code at 0"]}, {"root": "INS SimpleName: Graph to TagElement: @code at 0", "operations": ["INS SimpleName: Graph to TagElement: @code at 0"]}, {"root": "INS SimpleName: Network to TagElement: @code at 0", "operations": ["INS SimpleName: Network to TagElement: @code at 0"]}, {"root": "INS SimpleName: Hypergraph to TagElement: @code at 0", "operations": ["INS SimpleName: Hypergraph to TagElement: @code at 0"]}, {"root": "UPDATE from  node to  Graph", "operations": ["UPD TextElement:  node from  node to  Graph"]}, {"root": "INS SimpleName: MutableNetwork to TagElement: @code at 0", "operations": ["INS SimpleName: MutableNetwork to TagElement: @code at 0"]}, {"root": "UPDATE from  edge to  graph", "operations": ["UPD TextElement:  edge from  edge to  graph", "UPD TextElement:  node from  node to  graph", "UPD TextElement:  node from  node to  graph", "UPD TextElement:  pred from  pred to  graph", "UPD TextElement:  node from  node to  graph", "UPD TextElement:  node from  node to  graph", "UPD TextElement:  edge from  edge to  graph", "UPD TextElement:  node4 from  node4 to  graph", "UPD TextElement:  edge from  edge to  graph"]}, {"root": "UPDATE from  Graph<Integer, String> to  Graph<Integer>", "operations": ["UPD TextElement:  Graph<Integer, String> from  Graph<Integer, String> to  Graph<Integer>"]}, {"root": "UPDATE from  Graph<Author,Publication> to  Graph<Author>", "operations": ["UPD TextElement:  Graph<Author,Publication> from  Graph<Author,Publication> to  Graph<Author>"]}, {"root": "UPDATE from  Graph<Webpage,Link> to  Graph<Webpage>", "operations": ["UPD TextElement:  Graph<Webpage,Link> from  Graph<Webpage,Link> to  Graph<Webpage>"]}, {"root": "UPDATE from  Map<N, E> to  Map<N, N>", "operations": ["UPD TextElement:  Map<N, E> from  Map<N, E> to  Map<N, N>"]}, {"root": "UPDATE from Returns the nodes which have an  to Returns the nodes which have an incident edge in common with ", "operations": ["UPD TextElement: Returns the nodes which have an  from Returns the nodes which have an  to Returns the nodes which have an incident edge in common with "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from  <i>against</i> the direction to 's incoming edges <i>against</i> the direction (if any) of the edge.", "operations": ["UPD TextElement:  <i>against</i> the direction from  <i>against</i> the direction to 's incoming edges <i>against</i> the direction (if any) of the edge."]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 3"]}, {"root": "UPDATE from  in the direction (if any) of the to 's outgoing edges in the direction (if any) of the edge.", "operations": ["UPD TextElement:  in the direction (if any) of the from  in the direction (if any) of the to 's outgoing edges in the direction (if any) of the edge."]}, {"root": "UPDATE from Returns the number of edges  to Returns the number of edges incident in this graph to ", "operations": ["UPD TextElement: Returns the number of edges  from Returns the number of edges  to Returns the number of edges incident in this graph to "]}, {"root": "UPDATE from .  If this node has more than  to .  If this node has more than", "operations": ["UPD TextElement: .  If this node has more than  from .  If this node has more than  to .  If this node has more than", "UPD TextElement: .  If this node has more than  from .  If this node has more than  to .  If this node has more than", "UPD TextElement: .  If this node has more than  from .  If this node has more than  to .  If this node has more than"]}, {"root": "UPDATE from in this graph, returns  to  incident edges in this graph, returns ", "operations": ["UPD TextElement: in this graph, returns  from in this graph, returns  to  incident edges in this graph, returns "]}, {"root": "UPDATE from Returns the number of  to Returns the number of incoming edges in this graph of ", "operations": ["UPD TextElement: Returns the number of  from Returns the number of  to Returns the number of incoming edges in this graph of "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 11", "MOV TagElement: @code to TagElement at 7"]}, {"root": "UPDATE from in this graph, returns  to  incoming edges in this graph, returns ", "operations": ["UPD TextElement: in this graph, returns  from in this graph, returns  to  incoming edges in this graph, returns "]}, {"root": "UPDATE from Returns the number of  to Returns the number of outgoing edges in this graph of ", "operations": ["UPD TextElement: Returns the number of  from Returns the number of  to Returns the number of outgoing edges in this graph of "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 10", "MOV TagElement: @code to TagElement at 7"]}, {"root": "UPDATE from in this graph, returns  to  outgoing edges in this graph, returns ", "operations": ["UPD TextElement: in this graph, returns  from in this graph, returns  to  outgoing edges in this graph, returns "]}, {"root": "UPDATE from  is a graph that has the same node/edge relationships to  is a graph that has the same node relationships", "operations": ["UPD TextElement:  is a graph that has the same node/edge relationships from  is a graph that has the same node/edge relationships to  is a graph that has the same node relationships"]}, {"root": "UPDATE from <li>A and B have the same edge set to <li>A and B have the same adjacency relationships, e.g., for each ", "operations": ["UPD TextElement: <li>A and B have the same edge set from <li>A and B have the same edge set to <li>A and B have the same adjacency relationships, e.g., for each "]}, {"root": "UPDATE from <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B to  the sets of", "operations": ["UPD TextElement: <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B from <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B to  the sets of"]}, {"root": "UPDATE from its incident edge/node set in A is the same as its incident edge/node set in B. to successor and predecessor nodes are the same in both graphs.", "operations": ["UPD TextElement: its incident edge/node set in A is the same as its incident edge/node set in B. from its incident edge/node set in A is the same as its incident edge/node set in B. to successor and predecessor nodes are the same in both graphs."]}, {"root": "UPDATE from <br>Thus, every edge in A and B connect the same nodes in the same direction (if any). to <br>This implies that every edge in A and B connects the same nodes in the same", "operations": ["UPD TextElement: <br>Thus, every edge in A and B connect the same nodes in the same direction (if any). from <br>Thus, every edge in A and B connect the same nodes in the same direction (if any). to <br>This implies that every edge in A and B connects the same nodes in the same"]}, {"root": "INS TextElement: direction (if any). to TagElement at 14", "operations": ["INS TextElement: direction (if any). to TagElement at 14"]}, {"root": "UPDATE from <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be to <p>Graph properties are <b>not</b> respected by this method. For example, two relations may", "operations": ["UPD TextElement: <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be from <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be to <p>Graph properties are <b>not</b> respected by this method. For example, two relations may"]}, {"root": "UPDATE from considered equal even if one allows parallel edges and the other doesn't. Additionally, the to be considered equal even if one allows self-loops and the other doesn't. Additionally, the", "operations": ["UPD TextElement: considered equal even if one allows parallel edges and the other doesn't. Additionally, the from considered equal even if one allows parallel edges and the other doesn't. Additionally, the to be considered equal even if one allows self-loops and the other doesn't. Additionally, the"]}, {"root": "UPDATE from order in which edges or nodes are added to the graph, and the order in which they are iterated to order in which edges or nodes are added to the graph, and the order in which they are", "operations": ["UPD TextElement: order in which edges or nodes are added to the graph, and the order in which they are iterated from order in which edges or nodes are added to the graph, and the order in which they are iterated to order in which edges or nodes are added to the graph, and the order in which they are"]}, {"root": "UPDATE from over, are irrelevant. to iterated over, are irrelevant.", "operations": ["UPD TextElement: over, are irrelevant. from over, are irrelevant. to iterated over, are irrelevant."]}, {"root": "UPDATE from of a map from each of the graph's nodes to their incident edges. to of a map from each of the graph's nodes to their adjacent nodes.", "operations": ["UPD TextElement: of a map from each of the graph's nodes to their incident edges. from of a map from each of the graph's nodes to their incident edges. to of a map from each of the graph's nodes to their adjacent nodes."]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.annotations.CanIgnoreReturnValue"]}, {"root": "DEL TextElement: <p>This interface permits, but does not enforce, any of the following variations of graphs:", "operations": ["DEL TextElement: <p>This interface permits, but does not enforce, any of the following variations of graphs:"]}, {"root": "DEL TextElement: <ul>", "operations": ["DEL TextElement: <ul>"]}, {"root": "DEL TextElement: <li>directed and undirected edges", "operations": ["DEL TextElement: <li>directed and undirected edges"]}, {"root": "DEL TextElement: <li>nodes and edges with attributes (for example, weighted edges)", "operations": ["DEL TextElement: <li>nodes and edges with attributes (for example, weighted edges)"]}, {"root": "DEL TextElement: <li>nodes and edges of different types (for example, bipartite or multimodal graphs)", "operations": ["DEL TextElement: <li>nodes and edges of different types (for example, bipartite or multimodal graphs)"]}, {"root": "DEL TextElement: <li>parallel edges (multiple edges which connect a single set of vertices)", "operations": ["DEL TextElement: <li>parallel edges (multiple edges which connect a single set of vertices)"]}, {"root": "DEL TextElement: <li>internal representations as matrices, adjacency lists, adjacency maps, etc.", "operations": ["DEL TextElement: <li>internal representations as matrices, adjacency lists, adjacency maps, etc."]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TextElement: <p>Extensions or implementations of this interface may enforce or disallow any or all", "operations": ["DEL TextElement: <p>Extensions or implementations of this interface may enforce or disallow any or all"]}, {"root": "DEL TextElement: of these variations.", "operations": ["DEL TextElement: of these variations."]}, {"root": "DEL TextElement: <p>Definitions:", "operations": ["DEL TextElement: <p>Definitions:"]}, {"root": "DEL TextElement: <ul>", "operations": ["DEL TextElement: <ul>"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TextElement:  edge", "operations": ["DEL TextElement:  edge"]}, {"root": "DEL TextElement:  edge", "operations": ["DEL TextElement:  edge"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TextElement:  are mutually <b>adjacent</b> if both are incident", "operations": ["DEL TextElement:  are mutually <b>adjacent</b> if both are incident"]}, {"root": "DEL TextElement: to a common ", "operations": ["DEL TextElement: to a common "]}, {"root": "DEL TextElement:  edge", "operations": ["DEL TextElement:  edge"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TextElement: <br>Similarly, ", "operations": ["DEL TextElement: <br>Similarly, "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  edge1", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  edge2", "operations": ["DEL TextElement:  edge2"]}, {"root": "DEL TextElement:  are mutually adjacent if both are", "operations": ["DEL TextElement:  are mutually adjacent if both are"]}, {"root": "DEL TextElement: incident to a common ", "operations": ["DEL TextElement: incident to a common "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement: <li>Elements are <b>connected</b> if they are either incident or adjacent.", "operations": ["DEL TextElement: <li>Elements are <b>connected</b> if they are either incident or adjacent."]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  edge", "DEL TagElement: @code"]}, {"root": "DEL TextElement: the direction, if any, of ", "operations": ["DEL TextElement: the direction, if any, of "]}, {"root": "DEL TextElement:  edge", "operations": ["DEL TextElement:  edge"]}, {"root": "DEL TextElement: ) from a node adjacent to ", "operations": ["DEL TextElement: ) from a node adjacent to "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement: <li>", "operations": ["DEL TextElement: <li>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  edge"]}, {"root": "DEL TextElement:  is an <b>outgoing edge</b> of ", "operations": ["DEL TextElement:  is an <b>outgoing edge</b> of "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  if it can be traversed (in", "operations": ["DEL TextElement:  if it can be traversed (in"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  edge", "DEL TagElement: @code"]}, {"root": "DEL TextElement: ) from ", "operations": ["DEL TextElement: ) from "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  to reach a node adjacent to", "operations": ["DEL TextElement:  to reach a node adjacent to"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node"]}, {"root": "DEL TextElement: ,", "operations": ["DEL TextElement: ,"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement:  and", "operations": ["DEL TextElement:  and"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement: edge of both ", "operations": ["DEL TextElement: edge of both "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement: undirectedGraph.addEdge(edge2, node3, node4);", "operations": ["DEL TextElement: undirectedGraph.addEdge(edge2, node3, node4);"]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  edge", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement:  is", "operations": ["DEL TextElement:  is"]}, {"root": "DEL TextElement: a self-loop).", "operations": ["DEL TextElement: a self-loop)."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node"]}, {"root": "DEL TextElement:  is", "operations": ["DEL TextElement:  is"]}, {"root": "DEL TextElement: a self-loop).", "operations": ["DEL TextElement: a self-loop)."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  is a <b>source</b> of ", "operations": ["DEL TextElement:  is a <b>source</b> of "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  edge", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  edge"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement: of ", "operations": ["DEL TextElement: of "]}, {"root": "DEL TextElement: , and the same for edges.", "operations": ["DEL TextElement: , and the same for edges."]}, {"root": "DEL TextElement: <li>If you would otherwise have duplicate edges (e.g. weighted edges represented by a Double),", "operations": ["DEL TextElement: <li>If you would otherwise have duplicate edges (e.g. weighted edges represented by a Double),"]}, {"root": "DEL TextElement: you can instead wrap the edges in a custom class that defers to ", "operations": ["DEL TextElement: you can instead wrap the edges in a custom class that defers to "]}, {"root": "DEL TagElement: @link", "operations": ["DEL TagElement: @link", "DEL SimpleName: Object"]}, {"root": "DEL TextElement:  for its", "operations": ["DEL TextElement:  for its"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  equals()", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  and ", "operations": ["DEL TextElement:  and "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  hashCode()", "DEL TagElement: @code"]}, {"root": "DEL TextElement: <li>Users that are not interested in edges as first-class objects have a couple of options:", "operations": ["DEL TextElement: <li>Users that are not interested in edges as first-class objects have a couple of options:"]}, {"root": "DEL TextElement: <ul>", "operations": ["DEL TextElement: <ul>"]}, {"root": "DEL TextElement: <li>pass in arbitrary Objects as edges: ", "operations": ["DEL TextElement: <li>pass in arbitrary Objects as edges: "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  addEdge(new Object(), n1, n2)", "DEL TagElement: @code"]}, {"root": "DEL TextElement: <li>create an implementation of (or subinterface of, or class delegating to) Graph", "operations": ["DEL TextElement: <li>create an implementation of (or subinterface of, or class delegating to) Graph"]}, {"root": "DEL TextElement: that only exposes node-related methods.", "operations": ["DEL TextElement: that only exposes node-related methods."]}, {"root": "DEL TextElement: </ul>", "operations": ["DEL TextElement: </ul>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement: <li>Traversing a directed graph edge-wise:", "operations": ["DEL TextElement: <li>Traversing a directed graph edge-wise:"]}, {"root": "DEL TextElement: <pre><code>", "operations": ["DEL TextElement: <pre><code>"]}, {"root": "DEL TextElement: // Update the shortest-path distances of the successors to ", "operations": ["DEL TextElement: // Update the shortest-path distances of the successors to "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node"]}, {"root": "DEL TextElement: // in a directed graph (inner loop of Dijkstra's algorithm):", "operations": ["DEL TextElement: // in a directed graph (inner loop of Dijkstra's algorithm):"]}, {"root": "DEL TextElement: void updateDistances(N node) {", "operations": ["DEL TextElement: void updateDistances(N node) {"]}, {"root": "DEL TextElement: nodeDistance = distances.get(node);", "operations": ["DEL TextElement: nodeDistance = distances.get(node);"]}, {"root": "DEL TextElement: for (E outEdge : graph.outEdges(node)) {", "operations": ["DEL TextElement: for (E outEdge : graph.outEdges(node)) {"]}, {"root": "DEL TextElement: N target = graph.target(outEdge);", "operations": ["DEL TextElement: N target = graph.target(outEdge);"]}, {"root": "DEL TextElement: double targetDistance = nodeDistance + outEdge.getWeight();", "operations": ["DEL TextElement: double targetDistance = nodeDistance + outEdge.getWeight();"]}, {"root": "DEL TextElement: if (targetDistance < distances.get(target)) {", "operations": ["DEL TextElement: if (targetDistance < distances.get(target)) {"]}, {"root": "DEL TextElement: distances.put(target, targetDistance);", "operations": ["DEL TextElement: distances.put(target, targetDistance);"]}, {"root": "DEL TextElement: }", "operations": ["DEL TextElement: }"]}, {"root": "DEL TextElement: }", "operations": ["DEL TextElement: }"]}, {"root": "DEL TextElement: }", "operations": ["DEL TextElement: }"]}, {"root": "DEL TextElement: </code></pre>", "operations": ["DEL TextElement: </code></pre>"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement:  Edge parameter type", "DEL SimpleName: E", "DEL TextElement: <", "DEL TagElement: @param", "DEL TextElement: >"]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: E", "DEL TypeParameter"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Set", "DEL Javadoc", "DEL TextElement: Returns all edges in this graph. ", "DEL ParameterizedType: Set<E>", "DEL SimpleName: edges", "DEL SimpleType: Set", "DEL TagElement", "DEL SimpleType: E", "DEL MethodDeclaration", "DEL SimpleName: E"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: .", "DEL TextElement: Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph", "DEL TagElement", "DEL SimpleName: UnsupportedOperationException", "DEL TagElement: @link", "DEL PrimitiveType: boolean", "DEL SimpleName: allowsParallelEdges", "DEL Javadoc", "DEL TextElement: that does not allow them will throw an ", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: E", "DEL ParameterizedType: Set<E>", "DEL SimpleName: Set", "DEL SimpleType: E", "DEL TextElement: .", "DEL TextElement: Returns the edges whose endpoints in this graph include ", "DEL TagElement", "DEL SimpleName: incidentEdges", "DEL SimpleType: Set", "DEL Javadoc"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: <p>For self-loop edges, the returned set's size will be 1. If the graph is", "DEL TagElement", "DEL TagElement: @code", "DEL SimpleName: Object", "DEL TextElement: Returns the nodes which are the endpoints of ", "DEL SimpleName: isDirected", "DEL TextElement:  edge", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: incidentNodes", "DEL TextElement:  is not a self-loop, the", "DEL MethodRef", "DEL TextElement:  is not an element of this graph", "DEL TagElement: @linkplain", "DEL TextElement:  directed", "DEL TextElement:  edge", "DEL TextElement:  in this graph.", "DEL TextElement: iteration order will be ", "DEL SimpleName: edge", "DEL TextElement:  edge", "DEL TextElement:  if ", "DEL SimpleType: Object", "DEL TagElement: @code", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL TagElement: @throws", "DEL TextElement:  [source(edge), target(edge)]", "DEL TextElement: .", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement:  and ", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @linkplain", "operations": ["DEL SimpleName: Object", "DEL TagElement: @linkplain", "DEL SimpleName: incidentEdges", "DEL MethodRef", "DEL MethodRefParameter", "DEL TextElement:  incident edge", "DEL SimpleType: Object"]}, {"root": "DEL TextElement: in common with ", "operations": ["DEL TextElement: in common with "]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL SimpleType: Object", "DEL TextElement:  is not an element of this graph", "DEL TextElement:  incident node", "DEL SimpleName: adjacentEdges", "DEL SingleVariableDeclaration", "DEL TagElement: @linkplain", "DEL ParameterizedType: Set<E>", "DEL TagElement: @throws", "DEL TagElement: @code", "DEL SimpleType: E", "DEL SimpleType: Object", "DEL MethodRef", "DEL TextElement:  edge", "DEL SimpleName: IllegalArgumentException", "DEL TextElement:  in this graph.", "DEL TagElement: @code", "DEL SimpleName: Set", "DEL SimpleName: incidentNodes", "DEL TextElement: in common with ", "DEL TextElement:  edge", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement: generally for non-hypergraphs, edges are not considered to be self-adjacent.", "DEL SimpleName: Object", "DEL TextElement: <p>Whether an edge is considered adjacent to itself is not defined by this interface, but", "DEL MethodRefParameter", "DEL SimpleName: E", "DEL SimpleName: Object", "DEL TextElement: Returns the edges which have an ", "DEL TextElement:  if ", "DEL SimpleName: edge", "DEL SimpleType: Set"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  outEdges(node1)", "DEL TagElement: @code", "DEL TextElement: <p>This set is the intersection of ", "DEL TagElement: @code", "DEL SimpleName: IllegalArgumentException", "DEL Javadoc", "DEL TextElement: .", "DEL TextElement:  inEdges(node2)", "DEL TextElement:  and ", "DEL TextElement:  is not an element", "DEL SimpleName: node1", "DEL TextElement: Returns the set of edges that connect ", "DEL TextElement:  node1", "DEL SimpleName: node2", "DEL TextElement:  to ", "DEL TextElement:  if ", "DEL TextElement:  node2", "DEL SimpleName: Set", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: Object", "DEL TagElement: @throws", "DEL MethodDeclaration", "DEL TagElement: @code", "DEL TextElement: , then it is the set of self-loop edges for that node.", "DEL TextElement:  is equal to ", "DEL TagElement: @code", "DEL ParameterizedType: Set<E>", "DEL TextElement:  or ", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleType: E", "DEL SimpleName: E", "DEL SimpleName: Object", "DEL TextElement: of this graph", "DEL SimpleName: edgesConnecting", "DEL TextElement: . If", "DEL SimpleType: Set"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: Returns all edges in this graph which can be traversed in the direction (if any) of the edge", "DEL SimpleName: inEdges", "DEL ParameterizedType: Set<E>", "DEL SimpleType: E", "DEL TagElement", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL TextElement:  node", "DEL SimpleType: Set", "DEL TextElement: to end at ", "DEL SimpleName: Set", "DEL SimpleName: E", "DEL Javadoc", "DEL TextElement: ."]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Set", "DEL SimpleName: E", "DEL SimpleName: Set", "DEL SimpleName: outEdges", "DEL TagElement", "DEL TextElement: Returns all edges in this graph which can be traversed in the direction (if any) of the edge", "DEL MethodDeclaration", "DEL ParameterizedType: Set<E>", "DEL Javadoc", "DEL TextElement: .", "DEL TextElement: starting from ", "DEL TextElement:  node", "DEL SimpleType: E", "DEL TagElement: @code"]}, {"root": "DEL TextElement: 's ", "operations": ["DEL TextElement: 's "]}, {"root": "DEL TagElement: @linkplain", "operations": ["DEL TagElement: @linkplain", "DEL MethodRef", "DEL TextElement:  incoming edges", "DEL SimpleName: Object", "DEL SimpleName: inEdges", "DEL MethodRefParameter", "DEL SimpleType: Object"]}, {"root": "DEL TextElement: (if any) of the edge.", "operations": ["DEL TextElement: (if any) of the edge."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node"]}, {"root": "DEL TextElement: 's ", "operations": ["DEL TextElement: 's "]}, {"root": "DEL TagElement: @linkplain", "operations": ["DEL TagElement: @linkplain", "DEL MethodRefParameter", "DEL TextElement:  outgoing edges", "DEL MethodRef", "DEL SimpleName: Object", "DEL SimpleName: outEdges", "DEL SimpleType: Object"]}, {"root": "DEL TextElement: edge.", "operations": ["DEL TextElement: edge."]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @throws", "operations": ["DEL TextElement:  if ", "DEL TagElement: @code", "DEL SimpleName: IllegalArgumentException", "DEL TextElement:  is not an element of this graph", "DEL TagElement: @throws", "DEL TextElement:  node"]}, {"root": "DEL ParameterizedType: Set<N>", "operations": ["DEL ParameterizedType: Set<N>", "DEL SimpleName: Set", "DEL SimpleType: Set", "DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleType: Object"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: For a directed graph, returns the node for which ", "DEL TextElement:  is an outgoing edge.", "DEL TextElement:  edge", "DEL SingleVariableDeclaration", "DEL SimpleName: edge", "DEL SimpleName: N", "DEL TextElement: For an undirected graph, throws an ", "DEL TextElement: .", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: source", "DEL TagElement: @link", "DEL SimpleType: N", "DEL SimpleName: Object", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement: @code"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement:  is an incoming edge.", "DEL SimpleType: N", "DEL TextElement: For an undirected graph, throws an ", "DEL SimpleName: N", "DEL SimpleName: edge", "DEL Javadoc", "DEL TagElement: @link", "DEL TextElement: For a directed graph, returns the node for which ", "DEL SimpleName: target", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: UnsupportedOperationException", "DEL TextElement: .", "DEL TextElement:  edge", "DEL TagElement: @code", "DEL MethodDeclaration"]}, {"root": "DEL TagElement: @linkplain", "operations": ["DEL TagElement: @linkplain", "DEL SimpleName: Object", "DEL TextElement:  incident", "DEL MethodRefParameter", "DEL SimpleType: Object", "DEL SimpleName: incidentEdges", "DEL MethodRef"]}, {"root": "DEL TextElement:  in this graph", "operations": ["DEL TextElement:  in this graph"]}, {"root": "DEL TextElement: to ", "operations": ["DEL TextElement: to "]}, {"root": "DEL TextElement:  incident edges", "operations": ["DEL TextElement:  incident edges"]}, {"root": "DEL TextElement: <p>Equivalent to ", "operations": ["DEL TextElement: <p>Equivalent to "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  incidentEdges(node).size()"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TagElement: @linkplain", "operations": ["DEL MethodRef", "DEL SimpleType: Object", "DEL SimpleName: inEdges", "DEL MethodRefParameter", "DEL TextElement:  incoming edges", "DEL TagElement: @linkplain", "DEL SimpleName: Object"]}, {"root": "DEL TextElement:  in this graph", "operations": ["DEL TextElement:  in this graph"]}, {"root": "DEL TextElement: of ", "operations": ["DEL TextElement: of "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  node", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  incoming edges", "operations": ["DEL TextElement:  incoming edges"]}, {"root": "DEL TextElement: <p>Equivalent to ", "operations": ["DEL TextElement: <p>Equivalent to "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  inEdges(node).size()", "DEL TagElement: @code"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TagElement: @throws", "operations": ["DEL TagElement: @throws", "DEL TagElement: @code", "DEL TextElement:  is not an element of this graph", "DEL TextElement:  node", "DEL TextElement:  if ", "DEL SimpleName: IllegalArgumentException"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Object", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: Object"]}, {"root": "DEL TagElement: @linkplain", "operations": ["DEL MethodRef", "DEL SimpleName: outEdges", "DEL SimpleType: Object", "DEL TextElement:  outgoing edges", "DEL MethodRefParameter", "DEL TagElement: @linkplain", "DEL SimpleName: Object"]}, {"root": "DEL TextElement:  in this graph", "operations": ["DEL TextElement:  in this graph"]}, {"root": "DEL TextElement: of ", "operations": ["DEL TextElement: of "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  node"]}, {"root": "DEL TextElement:  outgoing edges", "operations": ["DEL TextElement:  outgoing edges"]}, {"root": "DEL TextElement: <p>Equivalent to ", "operations": ["DEL TextElement: <p>Equivalent to "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  outEdges(node).size()"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL TagElement: @throws", "operations": ["DEL TagElement: @throws", "DEL TextElement:  if ", "DEL TagElement: @code", "DEL TextElement:  node", "DEL SimpleName: IllegalArgumentException", "DEL TextElement:  is not an element of this graph"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: node"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL TextElement:  ", "DEL SimpleName: N", "DEL TagElement: @code", "DEL SimpleName: node", "DEL TextElement:  if the add operation is not supported by this graph", "DEL SimpleName: addNode", "DEL TextElement:  to this graph (optional operation).", "DEL TextElement:  Map", "DEL TagElement: @code", "DEL TextElement: Adds ", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement:  iff the graph was modified as a result of this call", "DEL TagElement", "DEL SimpleName: UnsupportedOperationException", "DEL MarkerAnnotation", "DEL SimpleName: CanIgnoreReturnValue", "DEL TagElement: @return", "DEL TextElement:  true", "DEL TagElement: @throws", "DEL SingleVariableDeclaration", "DEL SimpleType: N", "DEL TextElement:  keys must be; they must also be non-null.", "DEL TextElement: <p><b>Nodes must be unique</b>, just as "]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  keys must be; they must also be non-null.", "DEL TextElement:  node1", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: node2", "DEL TextElement: <p><b>Edges must be unique</b>, just as ", "DEL TextElement:  already connects ", "DEL TagElement: @code", "DEL TextElement:  node2", "DEL TextElement:  if the add operation is not supported by this graph", "DEL MethodDeclaration", "DEL TagElement: @throws", "DEL TextElement:  to this graph, connecting ", "DEL TextElement: then this method will have no effect and will return ", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement:  to ", "DEL TextElement: already connected to ", "DEL Javadoc", "DEL SimpleName: edge", "DEL TextElement:  node1", "DEL TextElement:  node2", "DEL TagElement: @code", "DEL TextElement:  edge", "DEL SimpleName: N", "DEL TextElement:  node1", "DEL SimpleName: E", "DEL TagElement: @code", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: N", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement:  edge", "DEL TextElement:  Map", "DEL TextElement:  edge", "DEL TagElement: @code", "DEL TextElement:  already exists and connects nodes other than", "DEL SingleVariableDeclaration", "DEL TextElement: Adds ", "DEL SimpleType: E", "DEL TextElement: unspecified. Suggested behaviors include (a) silently adding ", "DEL TextElement: , or if the graph is not a multigraph and ", "DEL SimpleType: N", "DEL TextElement:  ", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement:  IllegalArgumentException", "DEL TextElement:  in this graph", "DEL TextElement:  and ", "DEL TextElement:  false", "DEL TextElement: .", "DEL TextElement:  and ", "DEL TagElement: @code", "DEL PrimitiveType: boolean", "DEL TextElement: (optional operation).", "DEL TextElement: <p>Behavior if ", "DEL TextElement:  is", "DEL TextElement:  true", "DEL TextElement: <p>If ", "DEL TagElement: @throws", "DEL SimpleName: addEdge", "DEL MarkerAnnotation", "DEL TextElement: .", "DEL TextElement:  to ", "DEL TagElement: @return", "DEL TextElement:  node2", "DEL TextElement:  iff the graph was modified as a result of this call", "DEL TagElement: @code", "DEL TagElement", "DEL TagElement: @code", "DEL TextElement:  and ", "DEL TextElement: (in the specified order if order is significant, as for directed graphs, else in any order),", "DEL SingleVariableDeclaration", "DEL SimpleType: N", "DEL TextElement:  if ", "DEL TextElement:  are not already elements of the graph is", "DEL SimpleName: CanIgnoreReturnValue", "DEL SimpleName: node1", "DEL SingleVariableDeclaration", "DEL TextElement: to the graph or (b) throwing "]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: removeNode", "DEL TextElement:  from this graph, if it is present (optional operation).", "DEL TagElement: @throws", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL SimpleName: UnsupportedOperationException", "DEL TextElement: In general, all edges incident to ", "DEL TagElement: @code", "DEL TextElement:  in this graph will also be removed.", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: CanIgnoreReturnValue", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL TextElement:  true", "DEL TagElement", "DEL TextElement:  iff the graph was modified as a result of this call", "DEL SimpleName: node", "DEL TextElement: (This is not true for hyperedges.)", "DEL TextElement: Removes ", "DEL TextElement:  if the remove operation is not supported by this graph", "DEL TextElement:  node", "DEL PrimitiveType: boolean", "DEL TagElement: @code", "DEL TagElement: @return"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  ", "DEL SimpleName: CanIgnoreReturnValue", "DEL TagElement: @code", "DEL Javadoc", "DEL TagElement: @code", "DEL SimpleName: edge", "DEL SimpleName: UnsupportedOperationException", "DEL TextElement:  edge", "DEL TextElement:  edge", "DEL TagElement", "DEL TextElement:  true", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL PrimitiveType: boolean", "DEL MarkerAnnotation", "DEL TextElement:  are unaffected (although implementations may choose", "DEL SimpleName: removeEdge", "DEL MethodDeclaration", "DEL TextElement:  from this graph, if it is present (optional operation).", "DEL TagElement: @code", "DEL TextElement:  iff the graph was modified as a result of this call", "DEL TextElement: to disallow certain configurations, e.g., isolated nodes).", "DEL TextElement: In general, nodes incident to ", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL TextElement: Removes ", "DEL TagElement: @throws", "DEL TextElement:  if the remove operation is not supported by this graph"]}]}}, {"Graph_diff": {"operations": ["Move TagElement: @code(39) into TagElement(310) at 79", "Move TagElement: @code(42) into TagElement(310) at 79", "Move TagElement: @code(105) into TagElement(310) at 124", "Move TagElement: @code(109) into TagElement(310) at 130", "Move TagElement: @code(194) into TagElement(310) at 226", "Move TagElement: @code(202) into TagElement(310) at 168", "Move TagElement: @code(235) into TagElement(310) at 143", "Move TagElement: @code(305) into TagElement(310) at 291", "Move TagElement: @code(366) into TagElement(310) at 276", "Move TagElement: @code(371) into TagElement(310) at 272", "Move ParameterizedType: Set<N>(789) into MethodDeclaration(432) at 1", "Move SingleVariableDeclaration(794) into MethodDeclaration(432) at 4", "Move ParameterizedType: Set<N>(626) into MethodDeclaration(458) at 1", "Move SingleVariableDeclaration(759) into MethodDeclaration(458) at 3", "Move ParameterizedType: Set<N>(595) into MethodDeclaration(492) at 1", "Move SingleVariableDeclaration(735) into MethodDeclaration(492) at 4", "Move SingleVariableDeclaration(631) into MethodDeclaration(551) at 3", "Move SingleVariableDeclaration(564) into MethodDeclaration(576) at 3", "Update TextElement: A graph consisting of a set of nodes of type N and a set of edges of type E.(10) to A graph consisting of a set of nodes of type N and a set of (implicit) edges.", "Update TextElement: <li>hyperedges (edges which are incident to arbitrary sets of nodes)(14) to Users that want edges to be first-class objects should use the subtype ", "Update TagElement: @code(26) to @link", "Update TextElement:  and (27) to  instead.", "Update TextElement:  are <b>incident</b> to each other if the set of(30) to <p>For convenience, we may use the term 'graph' to refer to any subtype of ", "Update TagElement: @code(32) to @link", "Update TextElement: 's endpoints includes (33) to ,", "Update TextElement:  and (40) to including ", "Update TagElement: @code(46) to @link", "Update TagElement: @code(53) to @link", "Update TextElement:  is an <b>incoming edge</b> of a (63) to <p>Users that wish to modify a ", "Update TextElement:  if it can be traversed (in(66) to  must work with its subinterface,", "Update TagElement: @code(69) to @link", "Update TextElement: the direction, if any, of (81) to <p>This interface permits, but does not enforce, any of the following variations of graphs:", "Update TextElement: <li>Note: <b>undirected</b> edges are both incoming and outgoing edges of a (92) to <li>directed and undirected edges", "Update TextElement: while <b>directed</b> edges are either incoming or outgoing edges of (96) to <li>hyperedges (edges which are incident to arbitrary sets of nodes)", "Update TextElement:  node(97) to <li>nodes and edges with attributes (for example, weighted edges)", "Move TextElement:  node(97) into TagElement(310) at 65", "Update TextElement: (and not both, unless the edge is a self-loop).(99) to <li>nodes and edges of different types (for example, bipartite or multimodal graphs)", "Update TextElement: <br>Thus, in the following example (100) to <li>internal representations as matrices, adjacency lists, adjacency maps, etc.", "Update TextElement:  edge1(101) to </ul>", "Move TextElement:  edge1(101) into TagElement(310) at 69", "Update TextElement:  is an incoming edge of (103) to <p>Extensions or implementations of this interface may enforce or disallow any or all", "Update TextElement: an outgoing edge of (107) to of these variations.", "Update TextElement: , while (110) to <p>Definitions:", "Update TextElement:  edge2(111) to <ul>", "Move TextElement:  edge2(111) into TagElement(310) at 75", "Update TextElement:  is both an incoming and an outgoing(113) to <li>", "Update TextElement:  node3(115) to  and ", "Move TextElement:  node3(115) into TagElement(310) at 79", "Update TextElement:  and (117) to  are mutually <b>adjacent</b> (or <b>connected</b> in", "Update TextElement: :(120) to  if an edge has been added between them:", "Update TextElement: directedGraph.addEdge(edge1, node1, node2);(122) to graph.addEdge(node1, node2);  // after this returns, node1 and node2 are adjacent", "Update TextElement: <li>A node (126) to In this example, if ", "Update TextElement:  is a <b>predecessor</b> of (129) to  is <b>directed</b>, then:", "Update TextElement:  node(130) to <ul>", "Move TextElement:  node(130) into TagElement(310) at 94", "Update TextElement:  if it is incident to an incoming(132) to <li>", "Move TagElement: @code(1066) into TagElement(310) at 97", "Update TextElement:  of (135) to  is a <b>predecessor</b> of {code node2} in ", "Update TextElement:  (and is not itself (138) to <li>", "Move TagElement: @code(1069) into TagElement(310) at 102", "Update TextElement:  node(139) to  is a <b>successor</b> of ", "Move TextElement:  node(139) into TagElement(310) at 103", "Move TagElement: @code(1059) into TagElement(310) at 104", "Update TextElement:  unless (141) to  in ", "Update TextElement: <li>A node (146) to <li>", "Move TagElement: @code(681) into TagElement(310) at 111", "Update TextElement:  succ(147) to  has an (implicit) outgoing edge to ", "Move TextElement:  succ(147) into TagElement(310) at 112", "Move TagElement: @code(1062) into TagElement(310) at 113", "Update TextElement:  is a <b>successor</b> of (149) to  in ", "Update TextElement:  if it is incident to an outgoing(152) to <li>", "Move TagElement: @code(684) into TagElement(310) at 118", "Update TextElement:  edge(153) to  has an (implicit) incoming edge from ", "Move TextElement:  edge(153) into TagElement(310) at 119", "Move TagElement: @code(1047) into TagElement(310) at 120", "Update TextElement:  of (155) to  in ", "Update TextElement:  (and is not itself (158) to </ul>", "Update TextElement:  unless (161) to If ", "Update TextElement: <li>Directed edges only:(166) to  is <b>undirected</b>, then:", "Move TagElement: @code(690) into TagElement(310) at 133", "Update TextElement:  if (174) to  and ", "Update TextElement:  is an outgoing edge(177) to  are mutually predecessors and successors", "Update TextElement: of (178) to in ", "Update TextElement:  is a <b>target</b> of (185) to  has an (implicit) edge in ", "Update TextElement:  if (188) to  that is both outgoing to", "Update TextElement:  edge(189) to to ", "Move TextElement:  edge(189) into TagElement(310) at 150", "Move TagElement: @code(1050) into TagElement(310) at 151", "Update TextElement:  is an incoming edge(191) to  and incoming from ", "Move TagElement: @code(693) into TagElement(310) at 154", "Update TextElement: .(195) to , and vice versa.", "Insert TextElement: <li>A self-loop is an edge that connects a node to itself.(125) into TagElement(310) at 88", "Update TextElement: <li><b>Nodes/edges must be useable as (200) to <li><b>Nodes must be useable as ", "Update TextElement:  implementations.(226) to .", "Update TextElement: <li>If graph elements have mutable state, both of the following must be true:(227) to <li>If graph elements have mutable state:", "Update TextElement: interchangeable.  In particular, when adding such elements to a graph, you should create(238) to interchangeable.  In particular, when adding such elements to a graph, you should", "Update TextElement: them once and store the reference if you will need to refer to those elements more than(239) to create them once and store the reference if you will need to refer to those elements", "Update TextElement: once during creation (rather than passing (240) to more than once during creation (rather than passing ", "Update TextElement:  to each(243) to to each ", "Update TextElement: <br>Generally speaking, your design may be more robust if you use immutable nodes/edges and(249) to <br>Generally speaking, your design may be more robust if you use immutable nodes and", "Update TextElement: <li>There are no Node or Edge classes built in.  So you can have a (251) to <li>There are no Node classes built in.  So you can have a ", "Update TextElement: <li>This framework supports multiple mechanisms for storing the topology of a graph, including:(261) to <li>This framework supports multiple mechanisms for storing the topology of a graph,", "Insert TextElement: including:(180) into TagElement(310) at 132", "Update TextElement: <li>the Graph implementation stores the topology (for example, by storing a (263) to <li>the Graph implementation stores the topology (for example, by storing a", "Update TextElement: that maps nodes onto their incident edges); this implies that the nodes and edges(266) to  that maps nodes onto their adjacent nodes); this implies that the nodes", "Update TextElement:  of incident edges);(271) to  of adjacent nodes);", "Update TextElement:  if passed a node/edge(310) to  if passed an element", "Update TextElement: <li>Accessors take Object parameters rather than N/E generic type specifiers to match the pattern(312) to <li>Accessors take Object parameters rather than generic type specifiers to match the pattern", "Move TagElement: @throws(783) into Javadoc(421) at 1", "Move TagElement: @throws(748) into Javadoc(447) at 1", "Move TagElement: @code(814) into TagElement(474) at 12", "Move TagElement: @throws(724) into Javadoc(481) at 1", "Move TagElement: @code(889) into TagElement(512) at 10", "Move TextElement: in this graph, returns (891) into TagElement(512) at 9", "Move TagElement: @throws(553) into Javadoc(544) at 1", "Move TagElement: @throws(620) into Javadoc(569) at 1", "Insert SimpleName: Network(10) into TagElement: @link(11) at 0", "Insert SimpleName: Graph(14) into TagElement: @link(15) at 0", "Insert SimpleName: Network(18) into TagElement: @link(19) at 0", "Insert SimpleName: Hypergraph(21) into TagElement: @link(22) at 0", "Update TextElement:  node(64) to  Graph", "Insert SimpleName: MutableNetwork(28) into TagElement: @link(29) at 0", "Update TextElement:  node4(118) to  graph", "Update TextElement:  pred(127) to  graph", "Update TextElement:  node(136) to  graph", "Update TextElement:  edge(142) to  graph", "Update TextElement:  node(150) to  graph", "Update TextElement:  node(156) to  graph", "Update TextElement:  edge(162) to  graph", "Update TextElement:  node(179) to  graph", "Update TextElement:  edge(186) to  graph", "Update TextElement:  Graph<Integer, String>(252) to  Graph<Integer>", "Update TextElement:  Graph<Author,Publication>(255) to  Graph<Author>", "Update TextElement:  Graph<Webpage,Link>(258) to  Graph<Webpage>", "Update TextElement:  Map<N, E>(264) to  Map<N, N>", "Update TextElement: Returns the nodes which have an (602) to Returns the nodes which have an incident edge in common with ", "Move TagElement: @code(1121) into TagElement(414) at 1", "Move TagElement: @code(1003) into TagElement(440) at 1", "Update TextElement:  <i>against</i> the direction(775) to 's incoming edges <i>against</i> the direction (if any) of the edge.", "Move TagElement: @code(612) into TagElement(474) at 3", "Update TextElement:  in the direction (if any) of the(810) to 's outgoing edges in the direction (if any) of the edge.", "Move TagElement: @code(35) into TagElement(474) at 10", "Update TextElement: Returns the number of edges (875) to Returns the number of edges incident in this graph to ", "Update TextElement: .  If this node has more than (887) to .  If this node has more than", "Update TextElement: in this graph, returns (891) to  incident edges in this graph, returns ", "Update TextElement: Returns the number of (923) to Returns the number of incoming edges in this graph of ", "Move TagElement: @code(763) into TagElement(537) at 1", "Update TextElement: .  If this node has more than (935) to .  If this node has more than", "Move TagElement: @code(980) into TagElement(537) at 7", "Update TextElement: in this graph, returns (939) to  incoming edges in this graph, returns ", "Move TagElement: @code(976) into TagElement(537) at 11", "Update TextElement: Returns the number of (962) to Returns the number of outgoing edges in this graph of ", "Move TagElement: @code(545) into TagElement(562) at 1", "Update TextElement: .  If this node has more than (974) to .  If this node has more than", "Move TagElement: @code(941) into TagElement(562) at 7", "Update TextElement: in this graph, returns (978) to  outgoing edges in this graph, returns ", "Move TagElement: @code(937) into TagElement(562) at 10", "Update TextElement:  is a graph that has the same node/edge relationships(1181) to  is a graph that has the same node relationships", "Update TextElement: <li>A and B have the same edge set(1186) to <li>A and B have the same adjacency relationships, e.g., for each ", "Move TagElement: @code(29) into TagElement(612) at 10", "Update TextElement: <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B(1187) to  the sets of", "Update TextElement: its incident edge/node set in A is the same as its incident edge/node set in B.(1188) to successor and predecessor nodes are the same in both graphs.", "Update TextElement: <br>Thus, every edge in A and B connect the same nodes in the same direction (if any).(1189) to <br>This implies that every edge in A and B connects the same nodes in the same", "Insert TextElement: direction (if any).(594) into TagElement(612) at 14", "Update TextElement: <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may be(1191) to <p>Graph properties are <b>not</b> respected by this method. For example, two relations may", "Update TextElement: considered equal even if one allows parallel edges and the other doesn't. Additionally, the(1192) to be considered equal even if one allows self-loops and the other doesn't. Additionally, the", "Update TextElement: order in which edges or nodes are added to the graph, and the order in which they are iterated(1193) to order in which edges or nodes are added to the graph, and the order in which they are", "Update TextElement: over, are irrelevant.(1194) to iterated over, are irrelevant.", "Update TextElement: of a map from each of the graph's nodes to their incident edges.(1221) to of a map from each of the graph's nodes to their adjacent nodes.", "Delete QualifiedName: com.google.errorprone.annotations.CanIgnoreReturnValue(4)", "Delete ImportDeclaration(5)", "Delete TextElement: <p>This interface permits, but does not enforce, any of the following variations of graphs:(11)", "Delete TextElement: <ul>(12)", "Delete TextElement: <li>directed and undirected edges(13)", "Delete TextElement: <li>nodes and edges with attributes (for example, weighted edges)(15)", "Delete TextElement: <li>nodes and edges of different types (for example, bipartite or multimodal graphs)(16)", "Delete TextElement: <li>parallel edges (multiple edges which connect a single set of vertices)(17)", "Delete TextElement: <li>internal representations as matrices, adjacency lists, adjacency maps, etc.(18)", "Delete TextElement: </ul>(19)", "Delete TextElement: <p>Extensions or implementations of this interface may enforce or disallow any or all(20)", "Delete TextElement: of these variations.(21)", "Delete TextElement: <p>Definitions:(22)", "Delete TextElement: <ul>(23)", "Delete TextElement: <li>(24)", "Delete TextElement:  edge(25)", "Delete TextElement:  edge(31)", "Delete TextElement: .(36)", "Delete TextElement: <li>(37)", "Delete TextElement:  are mutually <b>adjacent</b> if both are incident(43)", "Delete TextElement: to a common (44)", "Delete TextElement:  edge(45)", "Delete TextElement: .(47)", "Delete TextElement: <br>Similarly, (48)", "Delete TextElement:  edge1(49)", "Delete TagElement: @code(50)", "Delete TextElement:  edge2(52)", "Delete TextElement:  are mutually adjacent if both are(54)", "Delete TextElement: incident to a common (55)", "Delete TextElement:  node(56)", "Delete TagElement: @code(57)", "Delete TextElement: <li>Elements are <b>connected</b> if they are either incident or adjacent.(59)", "Delete TextElement: <li>(60)", "Delete TextElement:  edge(61)", "Delete TagElement: @code(62)", "Delete TextElement: the direction, if any, of (67)", "Delete TextElement:  edge(68)", "Delete TextElement: ) from a node adjacent to (70)", "Delete TextElement:  node(71)", "Delete TagElement: @code(72)", "Delete TextElement: <li>(74)", "Delete TextElement:  edge(75)", "Delete TagElement: @code(76)", "Delete TextElement:  is an <b>outgoing edge</b> of (77)", "Delete TextElement:  node(78)", "Delete TagElement: @code(79)", "Delete TextElement:  if it can be traversed (in(80)", "Delete TextElement:  edge(82)", "Delete TagElement: @code(83)", "Delete TextElement: ) from (84)", "Delete TextElement:  node(85)", "Delete TagElement: @code(86)", "Delete TextElement:  to reach a node adjacent to(87)", "Delete TextElement:  node(88)", "Delete TagElement: @code(89)", "Delete TextElement: .(90)", "Delete TextElement:  node(93)", "Delete TagElement: @code(94)", "Delete TextElement: ,(95)", "Delete TagElement: @code(98)", "Delete TagElement: @code(102)", "Delete TextElement:  and(106)", "Delete TagElement: @code(112)", "Delete TextElement: edge of both (114)", "Delete TagElement: @code(116)", "Delete TextElement: undirectedGraph.addEdge(edge2, node3, node4);(123)", "Delete TextElement: </ul>(125)", "Delete TagElement: @code(131)", "Delete TextElement:  edge(133)", "Delete TagElement: @code(134)", "Delete TagElement: @code(140)", "Delete TextElement:  is(144)", "Delete TextElement: a self-loop).(145)", "Delete TagElement: @code(148)", "Delete TagElement: @code(154)", "Delete TextElement:  node(159)", "Delete TagElement: @code(160)", "Delete TextElement:  is(164)", "Delete TextElement: a self-loop).(165)", "Delete TextElement:  node(169)", "Delete TagElement: @code(170)", "Delete TextElement:  is a <b>source</b> of (171)", "Delete TextElement:  edge(172)", "Delete TagElement: @code(173)", "Delete TextElement:  edge(175)", "Delete TagElement: @code(176)", "Delete TextElement: .(181)", "Delete TextElement:  node(183)", "Delete TagElement: @code(184)", "Delete TagElement: @code(190)", "Delete TextElement: of (192)", "Delete TextElement: , and the same for edges.(215)", "Delete TextElement: <li>If you would otherwise have duplicate edges (e.g. weighted edges represented by a Double),(216)", "Delete TextElement: you can instead wrap the edges in a custom class that defers to (217)", "Delete SimpleName: Object(218)", "Delete TagElement: @link(219)", "Delete TextElement:  for its(220)", "Delete TextElement:  equals()(221)", "Delete TagElement: @code(222)", "Delete TextElement:  and (223)", "Delete TextElement:  hashCode()(224)", "Delete TagElement: @code(225)", "Delete TextElement: <li>Users that are not interested in edges as first-class objects have a couple of options:(275)", "Delete TextElement: <ul>(276)", "Delete TextElement: <li>pass in arbitrary Objects as edges: (277)", "Delete TextElement:  addEdge(new Object(), n1, n2)(278)", "Delete TagElement: @code(279)", "Delete TextElement: <li>create an implementation of (or subinterface of, or class delegating to) Graph(280)", "Delete TextElement: that only exposes node-related methods.(281)", "Delete TextElement: </ul>(283)", "Delete TextElement:  node(386)", "Delete TagElement: @code(387)", "Delete TextElement: <li>Traversing a directed graph edge-wise:(398)", "Delete TextElement: <pre><code>(399)", "Delete TextElement: // Update the shortest-path distances of the successors to (400)", "Delete TextElement:  node(401)", "Delete TagElement: @code(402)", "Delete TextElement: // in a directed graph (inner loop of Dijkstra's algorithm):(403)", "Delete TextElement: void updateDistances(N node) {(404)", "Delete TextElement: nodeDistance = distances.get(node);(405)", "Delete TextElement: for (E outEdge : graph.outEdges(node)) {(406)", "Delete TextElement: N target = graph.target(outEdge);(407)", "Delete TextElement: double targetDistance = nodeDistance + outEdge.getWeight();(408)", "Delete TextElement: if (targetDistance < distances.get(target)) {(409)", "Delete TextElement: distances.put(target, targetDistance);(410)", "Delete TextElement: }(411)", "Delete TextElement: }(412)", "Delete TextElement: }(413)", "Delete TextElement: </code></pre>(414)", "Delete TextElement: <(424)", "Delete SimpleName: E(425)", "Delete TextElement: >(426)", "Delete TextElement:  Edge parameter type(427)", "Delete TagElement: @param(428)", "Delete SimpleName: E(438)", "Delete TypeParameter(439)", "Delete TextElement: Returns all edges in this graph. (450)", "Delete TagElement(451)", "Delete Javadoc(452)", "Delete SimpleName: Set(453)", "Delete SimpleType: Set(454)", "Delete SimpleName: E(455)", "Delete SimpleType: E(456)", "Delete ParameterizedType: Set<E>(457)", "Delete SimpleName: edges(458)", "Delete MethodDeclaration(459)", "Delete TextElement: Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph(523)", "Delete TextElement: that does not allow them will throw an (524)", "Delete SimpleName: UnsupportedOperationException(525)", "Delete TagElement: @link(526)", "Delete TextElement: .(527)", "Delete TagElement(528)", "Delete Javadoc(529)", "Delete PrimitiveType: boolean(530)", "Delete SimpleName: allowsParallelEdges(531)", "Delete MethodDeclaration(532)", "Delete TextElement: Returns the edges whose endpoints in this graph include (543)", "Delete TextElement: .(546)", "Delete TagElement(547)", "Delete Javadoc(554)", "Delete SimpleName: Set(555)", "Delete SimpleType: Set(556)", "Delete SimpleName: E(557)", "Delete SimpleType: E(558)", "Delete ParameterizedType: Set<E>(559)", "Delete SimpleName: incidentEdges(560)", "Delete MethodDeclaration(565)", "Delete TextElement: Returns the nodes which are the endpoints of (566)", "Delete TextElement:  edge(567)", "Delete TagElement: @code(568)", "Delete TextElement:  in this graph.(569)", "Delete TextElement: <p>For self-loop edges, the returned set's size will be 1. If the graph is(570)", "Delete SimpleName: isDirected(571)", "Delete MethodRef(572)", "Delete TextElement:  directed(573)", "Delete TagElement: @linkplain(574)", "Delete TextElement:  and (575)", "Delete TextElement:  edge(576)", "Delete TagElement: @code(577)", "Delete TextElement:  is not a self-loop, the(578)", "Delete TextElement: iteration order will be (579)", "Delete TextElement:  [source(edge), target(edge)](580)", "Delete TagElement: @code(581)", "Delete TextElement: .(582)", "Delete TagElement(583)", "Delete SimpleName: IllegalArgumentException(584)", "Delete TextElement:  if (585)", "Delete TextElement:  edge(586)", "Delete TagElement: @code(587)", "Delete TextElement:  is not an element of this graph(588)", "Delete TagElement: @throws(589)", "Delete Javadoc(590)", "Delete SimpleName: incidentNodes(596)", "Delete SimpleName: Object(597)", "Delete SimpleType: Object(598)", "Delete SimpleName: edge(599)", "Delete SingleVariableDeclaration(600)", "Delete MethodDeclaration(601)", "Delete SimpleName: incidentEdges(603)", "Delete SimpleName: Object(604)", "Delete SimpleType: Object(605)", "Delete MethodRefParameter(606)", "Delete MethodRef(607)", "Delete TextElement:  incident edge(608)", "Delete TagElement: @linkplain(609)", "Delete TextElement: in common with (610)", "Delete TextElement: Returns the edges which have an (633)", "Delete SimpleName: incidentNodes(634)", "Delete SimpleName: Object(635)", "Delete SimpleType: Object(636)", "Delete MethodRefParameter(637)", "Delete MethodRef(638)", "Delete TextElement:  incident node(639)", "Delete TagElement: @linkplain(640)", "Delete TextElement: in common with (641)", "Delete TextElement:  edge(642)", "Delete TagElement: @code(643)", "Delete TextElement:  in this graph.(644)", "Delete TextElement: <p>Whether an edge is considered adjacent to itself is not defined by this interface, but(645)", "Delete TextElement: generally for non-hypergraphs, edges are not considered to be self-adjacent.(646)", "Delete TagElement(647)", "Delete SimpleName: IllegalArgumentException(648)", "Delete TextElement:  if (649)", "Delete TextElement:  edge(650)", "Delete TagElement: @code(651)", "Delete TextElement:  is not an element of this graph(652)", "Delete TagElement: @throws(653)", "Delete Javadoc(654)", "Delete SimpleName: Set(655)", "Delete SimpleType: Set(656)", "Delete SimpleName: E(657)", "Delete SimpleType: E(658)", "Delete ParameterizedType: Set<E>(659)", "Delete SimpleName: adjacentEdges(660)", "Delete SimpleName: Object(661)", "Delete SimpleType: Object(662)", "Delete SimpleName: edge(663)", "Delete SingleVariableDeclaration(664)", "Delete MethodDeclaration(665)", "Delete TextElement: Returns the set of edges that connect (666)", "Delete TextElement:  node1(667)", "Delete TagElement: @code(668)", "Delete TextElement:  to (669)", "Delete TextElement:  node2(670)", "Delete TagElement: @code(671)", "Delete TextElement: .(672)", "Delete TextElement: <p>This set is the intersection of (673)", "Delete TextElement:  outEdges(node1)(674)", "Delete TagElement: @code(675)", "Delete TextElement:  and (676)", "Delete TextElement:  inEdges(node2)(677)", "Delete TagElement: @code(678)", "Delete TextElement: . If(679)", "Delete TextElement:  is equal to (682)", "Delete TextElement: , then it is the set of self-loop edges for that node.(685)", "Delete TagElement(686)", "Delete SimpleName: IllegalArgumentException(687)", "Delete TextElement:  if (688)", "Delete TextElement:  or (691)", "Delete TextElement:  is not an element(694)", "Delete TextElement: of this graph(695)", "Delete TagElement: @throws(696)", "Delete Javadoc(697)", "Delete SimpleName: Set(698)", "Delete SimpleType: Set(699)", "Delete SimpleName: E(700)", "Delete SimpleType: E(701)", "Delete ParameterizedType: Set<E>(702)", "Delete SimpleName: edgesConnecting(703)", "Delete SimpleName: Object(704)", "Delete SimpleType: Object(705)", "Delete SimpleName: node1(706)", "Delete SingleVariableDeclaration(707)", "Delete SimpleName: Object(708)", "Delete SimpleType: Object(709)", "Delete SimpleName: node2(710)", "Delete SingleVariableDeclaration(711)", "Delete MethodDeclaration(712)", "Delete TextElement: Returns all edges in this graph which can be traversed in the direction (if any) of the edge(713)", "Delete TextElement: to end at (714)", "Delete TextElement:  node(715)", "Delete TagElement: @code(716)", "Delete TextElement: .(717)", "Delete TagElement(718)", "Delete Javadoc(725)", "Delete SimpleName: Set(726)", "Delete SimpleType: Set(727)", "Delete SimpleName: E(728)", "Delete SimpleType: E(729)", "Delete ParameterizedType: Set<E>(730)", "Delete SimpleName: inEdges(731)", "Delete MethodDeclaration(736)", "Delete TextElement: Returns all edges in this graph which can be traversed in the direction (if any) of the edge(737)", "Delete TextElement: starting from (738)", "Delete TextElement:  node(739)", "Delete TagElement: @code(740)", "Delete TextElement: .(741)", "Delete TagElement(742)", "Delete Javadoc(749)", "Delete SimpleName: Set(750)", "Delete SimpleType: Set(751)", "Delete SimpleName: E(752)", "Delete SimpleType: E(753)", "Delete ParameterizedType: Set<E>(754)", "Delete SimpleName: outEdges(755)", "Delete MethodDeclaration(760)", "Delete TextElement: 's (767)", "Delete SimpleName: inEdges(768)", "Delete SimpleName: Object(769)", "Delete SimpleType: Object(770)", "Delete MethodRefParameter(771)", "Delete MethodRef(772)", "Delete TextElement:  incoming edges(773)", "Delete TagElement: @linkplain(774)", "Delete TextElement: (if any) of the edge.(776)", "Delete TextElement:  node(800)", "Delete TagElement: @code(801)", "Delete TextElement: 's (802)", "Delete SimpleName: outEdges(803)", "Delete SimpleName: Object(804)", "Delete SimpleType: Object(805)", "Delete MethodRefParameter(806)", "Delete MethodRef(807)", "Delete TextElement:  outgoing edges(808)", "Delete TagElement: @linkplain(809)", "Delete TextElement: edge.(811)", "Delete TextElement:  node(817)", "Delete TagElement: @code(818)", "Delete SimpleName: IllegalArgumentException(821)", "Delete TextElement:  if (822)", "Delete TextElement:  node(823)", "Delete TagElement: @code(824)", "Delete TextElement:  is not an element of this graph(825)", "Delete TagElement: @throws(826)", "Delete SimpleName: Set(828)", "Delete SimpleType: Set(829)", "Delete SimpleName: N(830)", "Delete SimpleType: N(831)", "Delete ParameterizedType: Set<N>(832)", "Delete SimpleName: Object(834)", "Delete SimpleType: Object(835)", "Delete SimpleName: node(836)", "Delete SingleVariableDeclaration(837)", "Delete TextElement: For a directed graph, returns the node for which (839)", "Delete TextElement:  edge(840)", "Delete TagElement: @code(841)", "Delete TextElement:  is an outgoing edge.(842)", "Delete TextElement: For an undirected graph, throws an (843)", "Delete SimpleName: UnsupportedOperationException(844)", "Delete TagElement: @link(845)", "Delete TextElement: .(846)", "Delete TagElement(847)", "Delete Javadoc(848)", "Delete SimpleName: N(849)", "Delete SimpleType: N(850)", "Delete SimpleName: source(851)", "Delete SimpleName: Object(852)", "Delete SimpleType: Object(853)", "Delete SimpleName: edge(854)", "Delete SingleVariableDeclaration(855)", "Delete MethodDeclaration(856)", "Delete TextElement: For a directed graph, returns the node for which (857)", "Delete TextElement:  edge(858)", "Delete TagElement: @code(859)", "Delete TextElement:  is an incoming edge.(860)", "Delete TextElement: For an undirected graph, throws an (861)", "Delete SimpleName: UnsupportedOperationException(862)", "Delete TagElement: @link(863)", "Delete TextElement: .(864)", "Delete TagElement(865)", "Delete Javadoc(866)", "Delete SimpleName: N(867)", "Delete SimpleType: N(868)", "Delete SimpleName: target(869)", "Delete SimpleName: Object(870)", "Delete SimpleType: Object(871)", "Delete SimpleName: edge(872)", "Delete SingleVariableDeclaration(873)", "Delete MethodDeclaration(874)", "Delete SimpleName: incidentEdges(876)", "Delete SimpleName: Object(877)", "Delete SimpleType: Object(878)", "Delete MethodRefParameter(879)", "Delete MethodRef(880)", "Delete TextElement:  incident(881)", "Delete TagElement: @linkplain(882)", "Delete TextElement:  in this graph(883)", "Delete TextElement: to (884)", "Delete TextElement:  incident edges(890)", "Delete TextElement: <p>Equivalent to (895)", "Delete TextElement:  incidentEdges(node).size()(896)", "Delete TagElement: @code(897)", "Delete TextElement: .(898)", "Delete SimpleName: inEdges(924)", "Delete SimpleName: Object(925)", "Delete SimpleType: Object(926)", "Delete MethodRefParameter(927)", "Delete MethodRef(928)", "Delete TextElement:  incoming edges(929)", "Delete TagElement: @linkplain(930)", "Delete TextElement:  in this graph(931)", "Delete TextElement: of (932)", "Delete TextElement:  node(933)", "Delete TagElement: @code(934)", "Delete TextElement:  incoming edges(938)", "Delete TextElement: <p>Equivalent to (943)", "Delete TextElement:  inEdges(node).size()(944)", "Delete TagElement: @code(945)", "Delete TextElement: .(946)", "Delete SimpleName: IllegalArgumentException(948)", "Delete TextElement:  if (949)", "Delete TextElement:  node(950)", "Delete TagElement: @code(951)", "Delete TextElement:  is not an element of this graph(952)", "Delete TagElement: @throws(953)", "Delete SimpleName: Object(957)", "Delete SimpleType: Object(958)", "Delete SimpleName: node(959)", "Delete SingleVariableDeclaration(960)", "Delete SimpleName: outEdges(963)", "Delete SimpleName: Object(964)", "Delete SimpleType: Object(965)", "Delete MethodRefParameter(966)", "Delete MethodRef(967)", "Delete TextElement:  outgoing edges(968)", "Delete TagElement: @linkplain(969)", "Delete TextElement:  in this graph(970)", "Delete TextElement: of (971)", "Delete TextElement:  node(972)", "Delete TagElement: @code(973)", "Delete TextElement:  outgoing edges(977)", "Delete TextElement: <p>Equivalent to (982)", "Delete TextElement:  outEdges(node).size()(983)", "Delete TagElement: @code(984)", "Delete TextElement: .(985)", "Delete SimpleName: IllegalArgumentException(987)", "Delete TextElement:  if (988)", "Delete TextElement:  node(989)", "Delete TagElement: @code(990)", "Delete TextElement:  is not an element of this graph(991)", "Delete TagElement: @throws(992)", "Delete SimpleName: Object(996)", "Delete SimpleType: Object(997)", "Delete SimpleName: node(998)", "Delete SingleVariableDeclaration(999)", "Delete TextElement: Adds (1001)", "Delete TextElement:  to this graph (optional operation).(1004)", "Delete TextElement: <p><b>Nodes must be unique</b>, just as (1005)", "Delete TextElement:  Map(1006)", "Delete TagElement: @code(1007)", "Delete TextElement:  keys must be; they must also be non-null.(1008)", "Delete TagElement(1009)", "Delete TextElement:  (1010)", "Delete TextElement:  true(1011)", "Delete TagElement: @code(1012)", "Delete TextElement:  iff the graph was modified as a result of this call(1013)", "Delete TagElement: @return(1014)", "Delete SimpleName: UnsupportedOperationException(1015)", "Delete TextElement:  if the add operation is not supported by this graph(1016)", "Delete TagElement: @throws(1017)", "Delete Javadoc(1018)", "Delete SimpleName: CanIgnoreReturnValue(1019)", "Delete MarkerAnnotation(1020)", "Delete PrimitiveType: boolean(1021)", "Delete SimpleName: addNode(1022)", "Delete SimpleName: N(1023)", "Delete SimpleType: N(1024)", "Delete SimpleName: node(1025)", "Delete SingleVariableDeclaration(1026)", "Delete MethodDeclaration(1027)", "Delete TextElement: Adds (1028)", "Delete TextElement:  edge(1029)", "Delete TagElement: @code(1030)", "Delete TextElement:  to this graph, connecting (1031)", "Delete TextElement:  node1(1032)", "Delete TagElement: @code(1033)", "Delete TextElement:  to (1034)", "Delete TextElement:  node2(1035)", "Delete TagElement: @code(1036)", "Delete TextElement: (optional operation).(1037)", "Delete TextElement: <p><b>Edges must be unique</b>, just as (1038)", "Delete TextElement:  Map(1039)", "Delete TagElement: @code(1040)", "Delete TextElement:  keys must be; they must also be non-null.(1041)", "Delete TextElement: <p>If (1042)", "Delete TextElement:  edge(1043)", "Delete TagElement: @code(1044)", "Delete TextElement:  already connects (1045)", "Delete TextElement:  to (1048)", "Delete TextElement:  in this graph(1051)", "Delete TextElement: (in the specified order if order is significant, as for directed graphs, else in any order),(1052)", "Delete TextElement: then this method will have no effect and will return (1053)", "Delete TextElement:  false(1054)", "Delete TagElement: @code(1055)", "Delete TextElement: .(1056)", "Delete TextElement: <p>Behavior if (1057)", "Delete TextElement:  and (1060)", "Delete TextElement:  are not already elements of the graph is(1063)", "Delete TextElement: unspecified. Suggested behaviors include (a) silently adding (1064)", "Delete TextElement:  and (1067)", "Delete TextElement: to the graph or (b) throwing (1070)", "Delete TextElement:  IllegalArgumentException(1071)", "Delete TagElement: @code(1072)", "Delete TextElement: .(1073)", "Delete TagElement(1074)", "Delete TextElement:  (1075)", "Delete TextElement:  true(1076)", "Delete TagElement: @code(1077)", "Delete TextElement:  iff the graph was modified as a result of this call(1078)", "Delete TagElement: @return(1079)", "Delete SimpleName: IllegalArgumentException(1080)", "Delete TextElement:  if (1081)", "Delete TextElement:  edge(1082)", "Delete TagElement: @code(1083)", "Delete TextElement:  already exists and connects nodes other than(1084)", "Delete TextElement:  node1(1085)", "Delete TagElement: @code(1086)", "Delete TextElement:  and (1087)", "Delete TextElement:  node2(1088)", "Delete TagElement: @code(1089)", "Delete TextElement: , or if the graph is not a multigraph and (1090)", "Delete TextElement:  node1(1091)", "Delete TagElement: @code(1092)", "Delete TextElement:  is(1093)", "Delete TextElement: already connected to (1094)", "Delete TextElement:  node2(1095)", "Delete TagElement: @code(1096)", "Delete TagElement: @throws(1097)", "Delete SimpleName: UnsupportedOperationException(1098)", "Delete TextElement:  if the add operation is not supported by this graph(1099)", "Delete TagElement: @throws(1100)", "Delete Javadoc(1101)", "Delete SimpleName: CanIgnoreReturnValue(1102)", "Delete MarkerAnnotation(1103)", "Delete PrimitiveType: boolean(1104)", "Delete SimpleName: addEdge(1105)", "Delete SimpleName: E(1106)", "Delete SimpleType: E(1107)", "Delete SimpleName: edge(1108)", "Delete SingleVariableDeclaration(1109)", "Delete SimpleName: N(1110)", "Delete SimpleType: N(1111)", "Delete SimpleName: node1(1112)", "Delete SingleVariableDeclaration(1113)", "Delete SimpleName: N(1114)", "Delete SimpleType: N(1115)", "Delete SimpleName: node2(1116)", "Delete SingleVariableDeclaration(1117)", "Delete MethodDeclaration(1118)", "Delete TextElement: Removes (1119)", "Delete TextElement:  from this graph, if it is present (optional operation).(1122)", "Delete TextElement: In general, all edges incident to (1123)", "Delete TextElement:  node(1124)", "Delete TagElement: @code(1125)", "Delete TextElement:  in this graph will also be removed.(1126)", "Delete TextElement: (This is not true for hyperedges.)(1127)", "Delete TagElement(1128)", "Delete TextElement:  (1129)", "Delete TextElement:  true(1130)", "Delete TagElement: @code(1131)", "Delete TextElement:  iff the graph was modified as a result of this call(1132)", "Delete TagElement: @return(1133)", "Delete SimpleName: UnsupportedOperationException(1134)", "Delete TextElement:  if the remove operation is not supported by this graph(1135)", "Delete TagElement: @throws(1136)", "Delete Javadoc(1137)", "Delete SimpleName: CanIgnoreReturnValue(1138)", "Delete MarkerAnnotation(1139)", "Delete PrimitiveType: boolean(1140)", "Delete SimpleName: removeNode(1141)", "Delete SimpleName: Object(1142)", "Delete SimpleType: Object(1143)", "Delete SimpleName: node(1144)", "Delete SingleVariableDeclaration(1145)", "Delete MethodDeclaration(1146)", "Delete TextElement: Removes (1147)", "Delete TextElement:  edge(1148)", "Delete TagElement: @code(1149)", "Delete TextElement:  from this graph, if it is present (optional operation).(1150)", "Delete TextElement: In general, nodes incident to (1151)", "Delete TextElement:  edge(1152)", "Delete TagElement: @code(1153)", "Delete TextElement:  are unaffected (although implementations may choose(1154)", "Delete TextElement: to disallow certain configurations, e.g., isolated nodes).(1155)", "Delete TagElement(1156)", "Delete TextElement:  (1157)", "Delete TextElement:  true(1158)", "Delete TagElement: @code(1159)", "Delete TextElement:  iff the graph was modified as a result of this call(1160)", "Delete TagElement: @return(1161)", "Delete SimpleName: UnsupportedOperationException(1162)", "Delete TextElement:  if the remove operation is not supported by this graph(1163)", "Delete TagElement: @throws(1164)", "Delete Javadoc(1165)", "Delete SimpleName: CanIgnoreReturnValue(1166)", "Delete MarkerAnnotation(1167)", "Delete PrimitiveType: boolean(1168)", "Delete SimpleName: removeEdge(1169)", "Delete SimpleName: Object(1170)", "Delete SimpleType: Object(1171)", "Delete SimpleName: edge(1172)", "Delete SingleVariableDeclaration(1173)", "Delete MethodDeclaration(1174)"]}}, {"GraphBuilder_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: directed to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement: if false, creates an instance for graphs whose edges are each undirected. to TagElement: @param at 2", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS TextElement: Creates a new instance with the specified edge directionality. to TagElement at 0", "INS TextElement:  if true, creates an instance for graphs whose edges are each directed; to TagElement: @param at 1"]}, {"root": "INS Modifier: final to FieldDeclaration at 0", "operations": ["INS Modifier: final to FieldDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: private to MethodDeclaration at 1", "MOV SimpleName: GraphBuilder to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4", "MOV ParameterizedType: GraphBuilder<N,E> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS ParameterizedType: GraphBuilder<Object> to MethodDeclaration at 3", "operations": ["INS ParameterizedType: GraphBuilder<Object> to MethodDeclaration at 3"]}, {"root": "UPDATE from GraphBuilder<Object,Object> to GraphBuilder<Object>", "operations": ["UPD ParameterizedType: GraphBuilder<Object,Object> from GraphBuilder<Object,Object> to GraphBuilder<Object>", "UPD ParameterizedType: GraphBuilder<Object,Object> from GraphBuilder<Object,Object> to GraphBuilder<Object>", "UPD ParameterizedType: GraphBuilder<Object,Object> from GraphBuilder<Object,Object> to GraphBuilder<Object>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: GraphBuilder<Object,Object> to MethodDeclaration at 3"]}, {"root": "INS ParameterizedType: GraphBuilder<N> to MethodDeclaration at 4", "operations": ["INS ParameterizedType: GraphBuilder<N> to MethodDeclaration at 4"]}, {"root": "UPDATE from GraphBuilder<N,E> to GraphBuilder<N>", "operations": ["UPD ParameterizedType: GraphBuilder<N,E> from GraphBuilder<N,E> to GraphBuilder<N>", "UPD ParameterizedType: GraphBuilder<N,E> from GraphBuilder<N,E> to GraphBuilder<N>", "UPD ParameterizedType: GraphBuilder<N,E> from GraphBuilder<N,E> to GraphBuilder<N>"]}, {"root": "UPDATE from Graph<N1,E1> to MutableGraph<N1>", "operations": ["UPD ParameterizedType: Graph<N1,E1> from Graph<N1,E1> to MutableGraph<N1>"]}, {"root": "UPDATE from allowsParallelEdges to directed", "operations": ["UPD SimpleName: allowsParallelEdges from allowsParallelEdges to directed"]}, {"root": "MOVE from ParameterizedType: GraphBuilder<N>", "operations": ["MOV SimpleType: N to ParameterizedType: GraphBuilder<N> at 1", "MOV SimpleType: GraphBuilder to ParameterizedType: GraphBuilder<Object> at 0"]}, {"root": "MOVE from ParameterizedType: GraphBuilder<Object>", "operations": ["MOV SimpleType: Object to ParameterizedType: GraphBuilder<Object> at 1", "MOV SimpleType: GraphBuilder to ParameterizedType: GraphBuilder<N> at 0"]}, {"root": "UPDATE from Graph<N,E> to Graph<N>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>"]}, {"root": "MOVE from ParameterizedType: GraphBuilder<N,E>", "operations": ["MOV SimpleType: GraphBuilder to ParameterizedType: GraphBuilder<N,E> at 0", "MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: GraphBuilder<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: GraphBuilder<N,E> at 1"]}, {"root": "UPDATE from Graph to MutableGraph", "operations": ["UPD SimpleName: Graph from Graph to MutableGraph", "UPD SimpleType: Graph from Graph to MutableGraph"]}, {"root": "INS ClassInstanceCreation to ReturnStatement at 0", "operations": ["INS BooleanLiteral: true to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "INS ClassInstanceCreation to ReturnStatement at 0", "operations": ["INS BooleanLiteral: false to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: GraphBuilder<Object,Object> to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: GraphBuilder<Object,Object> to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 0", "MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from ConfigurableGraph<N1,E1> to ConfigurableGraph<N1>", "operations": ["UPD ParameterizedType: ConfigurableGraph<N1,E1> from ConfigurableGraph<N1,E1> to ConfigurableGraph<N1>"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: GraphBuilder<N,E> to ClassInstanceCreation at 0"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: directed", "DEL SimpleType: Boolean", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: Boolean"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL NullLiteral", "DEL SimpleType: Comparator", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: Comparator", "DEL SimpleName: E", "DEL SimpleName: edgeComparator", "DEL SimpleType: E", "DEL ParameterizedType: Comparator<E>"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL ThisExpression"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: Integer", "DEL SimpleName: expectedEdgeCount", "DEL SimpleName: Optional", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleType: Optional", "DEL SimpleName: Integer", "DEL SimpleName: absent", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Optional<Integer>", "DEL SimpleName: Optional"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodDeclaration"]}, {"root": "DEL SimpleType: Object", "operations": ["DEL SimpleType: Object", "DEL SimpleName: Object"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: directed", "DEL ClassInstanceCreation"]}, {"root": "DEL SimpleType: Object", "operations": ["DEL SimpleType: Object", "DEL SimpleName: Object"]}, {"root": "DEL SimpleType: Object", "operations": ["DEL SimpleName: Object", "DEL SimpleType: Object"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: directed", "DEL ParameterizedType: GraphBuilder<Object,Object>", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL BooleanLiteral: false"]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: E", "DEL TypeParameter"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL ParameterizedType: GraphBuilder<N,E>", "operations": ["DEL SimpleType: E", "DEL ParameterizedType: GraphBuilder<N,E>", "DEL SimpleName: E"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: allowsParallelEdges", "DEL SimpleName: directed", "DEL MethodInvocation", "DEL SimpleName: allowsParallelEdges", "DEL MethodInvocation", "DEL SimpleName: graph"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Graph", "DEL Modifier: private", "DEL TagElement", "DEL SimpleName: undirected", "DEL MethodDeclaration", "DEL SimpleName: directed", "DEL MethodRef", "DEL TextElement: or ", "DEL SimpleName: from", "DEL Javadoc", "DEL TextElement: , ", "DEL SimpleName: Graph", "DEL TagElement: @link", "DEL TextElement: This value should be set by ", "DEL SimpleName: directed", "DEL TagElement: @link", "DEL TextElement: ,", "DEL TagElement: @link", "DEL TextElement: .", "DEL MethodRef", "DEL MethodRef", "DEL MethodRefParameter"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: GraphBuilder<N,E>", "DEL SimpleName: E", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: UnsupportedOperationException", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: allowsParallelEdges", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: allowsParallelEdges", "DEL TextElement: Specifies whether the graph will allow parallel edges. Attempting to add a parallel edge to", "DEL TagElement: @link", "DEL Block", "DEL SimpleName: allowsParallelEdges", "DEL MethodDeclaration", "DEL SimpleName: allowsParallelEdges", "DEL ThisExpression", "DEL Assignment: =", "DEL TextElement: .", "DEL SimpleType: E", "DEL FieldAccess", "DEL TagElement", "DEL TextElement: a graph that does not allow them will throw an ", "DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleType: GraphBuilder", "operations": ["DEL SimpleName: GraphBuilder", "DEL SimpleType: GraphBuilder"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleType: N", "DEL SimpleName: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL ParameterizedType: GraphBuilder<N,E>", "operations": ["DEL ParameterizedType: GraphBuilder<N,E>", "DEL SimpleType: E", "DEL SimpleName: GraphBuilder", "DEL SimpleName: E", "DEL SimpleType: N", "DEL SimpleName: N", "DEL SimpleType: GraphBuilder"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: E", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: Optional", "DEL PrimitiveType: int", "DEL TagElement: @code", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL TextElement:  expectedEdgeCount", "DEL SimpleName: expectedEdgeCount", "DEL SimpleName: expectedEdgeCount", "DEL TagElement: @throws", "DEL SimpleType: E", "DEL SimpleName: GraphBuilder", "DEL ThisExpression", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL TextElement:  is negative", "DEL TextElement:  if ", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: expectedEdgeCount", "DEL SimpleType: GraphBuilder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: expectedEdgeCount", "DEL Block", "DEL SimpleName: checkArgument", "DEL SimpleName: IllegalArgumentException", "DEL TextElement: Specifies the expected number of edges in the graph.", "DEL ParameterizedType: GraphBuilder<N,E>", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: expectedEdgeCount", "DEL SimpleType: N", "DEL SimpleName: of", "DEL InfixExpression: >=", "DEL Assignment: =", "DEL SimpleName: expectedEdgeCount", "DEL SimpleName: N", "DEL StringLiteral: \"The expected number of edges can't be negative: %s\""]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: E1", "DEL SimpleType: E", "DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E1", "operations": ["DEL SimpleName: E1", "DEL SimpleType: E1"]}, {"root": "DEL SimpleType: E1", "operations": ["DEL SimpleName: E1", "DEL SimpleType: E1"]}]}}, {"GraphBuilder_diff": {"operations": ["Insert MethodDeclaration(79) into TypeDeclaration: class(285) at 9", "Insert Modifier: final(30) into FieldDeclaration(34) at 0", "Insert Javadoc(66) into MethodDeclaration(79) at 0", "Move Modifier: private(88) into MethodDeclaration(79) at 1", "Move SimpleName: GraphBuilder(89) into MethodDeclaration(79) at 2", "Move SingleVariableDeclaration(257) into MethodDeclaration(79) at 3", "Move Block(266) into MethodDeclaration(79) at 4", "Insert ParameterizedType: GraphBuilder<Object>(92) into MethodDeclaration(103) at 3", "Update ParameterizedType: GraphBuilder<Object,Object>(114) to GraphBuilder<Object>", "Move ParameterizedType: GraphBuilder<Object,Object>(114) into MethodDeclaration(127) at 3", "Insert ParameterizedType: GraphBuilder<N>(162) into MethodDeclaration(187) at 4", "Update ParameterizedType: GraphBuilder<N,E>(311) to GraphBuilder<N>", "Update ParameterizedType: GraphBuilder<N,E>(253) to GraphBuilder<N>", "Move ParameterizedType: GraphBuilder<N,E>(253) into MethodDeclaration(254) at 2", "Update ParameterizedType: Graph<N1,E1>(434) to MutableGraph<N1>", "Update SimpleName: allowsParallelEdges(39) to directed", "Insert TagElement(61) into Javadoc(66) at 0", "Insert TagElement: @param(65) into Javadoc(66) at 1", "Move SimpleType: GraphBuilder(277) into ParameterizedType: GraphBuilder<Object>(92) at 0", "Move SimpleType: Object(141) into ParameterizedType: GraphBuilder<Object>(92) at 1", "Move SimpleType: GraphBuilder(139) into ParameterizedType: GraphBuilder<N>(162) at 0", "Move SimpleType: N(279) into ParameterizedType: GraphBuilder<N>(162) at 1", "Update ParameterizedType: Graph<N,E>(198) to Graph<N>", "Move SimpleType: GraphBuilder(202) into ParameterizedType: GraphBuilder<N>(200) at 0", "Move SimpleType: N(195) into ParameterizedType: GraphBuilder<N>(200) at 1", "Update SimpleType: Graph(429) to MutableGraph", "Insert TextElement: Creates a new instance with the specified edge directionality.(60) into TagElement(61) at 0", "Insert SimpleName: directed(62) into TagElement: @param(65) at 0", "Insert TextElement:  if true, creates an instance for graphs whose edges are each directed;(63) into TagElement: @param(65) at 1", "Insert TextElement: if false, creates an instance for graphs whose edges are each undirected.(64) into TagElement: @param(65) at 2", "Insert ClassInstanceCreation(100) into ReturnStatement(101) at 0", "Insert ClassInstanceCreation(124) into ReturnStatement(125) at 0", "Move SimpleType: N(204) into ParameterizedType: Graph<N>(168) at 1", "Update SimpleName: Graph(428) to MutableGraph", "Update ParameterizedType: GraphBuilder<Object,Object>(106) to GraphBuilder<Object>", "Move ParameterizedType: GraphBuilder<Object,Object>(106) into ClassInstanceCreation(100) at 0", "Insert BooleanLiteral: true(99) into ClassInstanceCreation(100) at 1", "Update ParameterizedType: GraphBuilder<Object,Object>(136) to GraphBuilder<Object>", "Move ParameterizedType: GraphBuilder<Object,Object>(136) into ClassInstanceCreation(124) at 0", "Insert BooleanLiteral: false(123) into ClassInstanceCreation(124) at 1", "Move ClassInstanceCreation(208) into MethodInvocation(184) at 0", "Update ParameterizedType: ConfigurableGraph<N1,E1>(442) to ConfigurableGraph<N1>", "Update ParameterizedType: GraphBuilder<N,E>(190) to GraphBuilder<N>", "Move ParameterizedType: GraphBuilder<N,E>(190) into ClassInstanceCreation(179) at 0", "Move MethodInvocation(212) into ClassInstanceCreation(179) at 1", "Delete SimpleName: E(30)", "Delete TypeParameter(31)", "Delete SimpleName: Boolean(32)", "Delete SimpleType: Boolean(33)", "Delete SimpleName: directed(34)", "Delete NullLiteral(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete BooleanLiteral: false(40)", "Delete SimpleName: Comparator(57)", "Delete SimpleType: Comparator(58)", "Delete SimpleName: E(59)", "Delete SimpleType: E(60)", "Delete ParameterizedType: Comparator<E>(61)", "Delete SimpleName: edgeComparator(62)", "Delete NullLiteral(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete ThisExpression(264)", "Delete ReturnStatement(265)", "Delete SimpleName: Optional(77)", "Delete SimpleType: Optional(78)", "Delete SimpleName: Integer(79)", "Delete SimpleType: Integer(80)", "Delete ParameterizedType: Optional<Integer>(81)", "Delete SimpleName: expectedEdgeCount(82)", "Delete SimpleName: Optional(83)", "Delete SimpleName: absent(84)", "Delete MethodInvocation(85)", "Delete VariableDeclarationFragment(86)", "Delete FieldDeclaration(87)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete SimpleName: Object(104)", "Delete SimpleType: Object(105)", "Delete ClassInstanceCreation(115)", "Delete SimpleName: directed(116)", "Delete BooleanLiteral: true(117)", "Delete MethodInvocation(118)", "Delete SimpleName: Object(112)", "Delete SimpleType: Object(113)", "Delete SimpleName: Object(134)", "Delete SimpleType: Object(135)", "Delete SimpleName: Object(142)", "Delete SimpleType: Object(143)", "Delete ParameterizedType: GraphBuilder<Object,Object>(144)", "Delete ClassInstanceCreation(145)", "Delete SimpleName: directed(146)", "Delete BooleanLiteral: false(147)", "Delete MethodInvocation(148)", "Delete SimpleName: E(182)", "Delete TypeParameter(183)", "Delete SimpleName: E(196)", "Delete SimpleType: E(197)", "Delete SimpleName: E(188)", "Delete SimpleType: E(189)", "Delete SimpleName: E(205)", "Delete SimpleType: E(206)", "Delete ParameterizedType: GraphBuilder<N,E>(207)", "Delete SimpleName: directed(209)", "Delete MethodInvocation(213)", "Delete SimpleName: allowsParallelEdges(214)", "Delete SimpleName: graph(215)", "Delete SimpleName: allowsParallelEdges(216)", "Delete MethodInvocation(217)", "Delete MethodInvocation(218)", "Delete TextElement: This value should be set by (227)", "Delete SimpleName: directed(228)", "Delete MethodRef(229)", "Delete TagElement: @link(230)", "Delete TextElement: , (231)", "Delete SimpleName: undirected(232)", "Delete MethodRef(233)", "Delete TagElement: @link(234)", "Delete TextElement: ,(235)", "Delete TextElement: or (236)", "Delete SimpleName: from(237)", "Delete SimpleName: Graph(238)", "Delete SimpleType: Graph(239)", "Delete MethodRefParameter(240)", "Delete MethodRef(241)", "Delete TagElement: @link(242)", "Delete TextElement: .(243)", "Delete TagElement(244)", "Delete Javadoc(245)", "Delete Modifier: private(246)", "Delete SimpleName: directed(254)", "Delete MethodDeclaration(267)", "Delete TextElement: Specifies whether the graph will allow parallel edges. Attempting to add a parallel edge to(268)", "Delete TextElement: a graph that does not allow them will throw an (269)", "Delete SimpleName: UnsupportedOperationException(270)", "Delete TagElement: @link(271)", "Delete TextElement: .(272)", "Delete TagElement(273)", "Delete Javadoc(274)", "Delete Modifier: public(275)", "Delete SimpleName: E(280)", "Delete SimpleType: E(281)", "Delete ParameterizedType: GraphBuilder<N,E>(282)", "Delete SimpleName: allowsParallelEdges(283)", "Delete PrimitiveType: boolean(284)", "Delete SimpleName: allowsParallelEdges(285)", "Delete SingleVariableDeclaration(286)", "Delete ThisExpression(287)", "Delete SimpleName: allowsParallelEdges(288)", "Delete FieldAccess(289)", "Delete SimpleName: allowsParallelEdges(290)", "Delete Assignment: =(291)", "Delete ExpressionStatement(292)", "Delete ThisExpression(293)", "Delete ReturnStatement(294)", "Delete Block(295)", "Delete MethodDeclaration(296)", "Delete SimpleName: GraphBuilder(305)", "Delete SimpleType: GraphBuilder(306)", "Delete SimpleName: N(307)", "Delete SimpleType: N(308)", "Delete SimpleName: E(309)", "Delete SimpleType: E(310)", "Delete SimpleName: E(251)", "Delete SimpleType: E(252)", "Delete SimpleName: GraphBuilder(336)", "Delete SimpleType: GraphBuilder(337)", "Delete SimpleName: N(338)", "Delete SimpleType: N(339)", "Delete SimpleName: E(340)", "Delete SimpleType: E(341)", "Delete ParameterizedType: GraphBuilder<N,E>(342)", "Delete TextElement: Specifies the expected number of edges in the graph.(368)", "Delete TagElement(369)", "Delete SimpleName: IllegalArgumentException(370)", "Delete TextElement:  if (371)", "Delete TextElement:  expectedEdgeCount(372)", "Delete TagElement: @code(373)", "Delete TextElement:  is negative(374)", "Delete TagElement: @throws(375)", "Delete Javadoc(376)", "Delete Modifier: public(377)", "Delete SimpleName: GraphBuilder(378)", "Delete SimpleType: GraphBuilder(379)", "Delete SimpleName: N(380)", "Delete SimpleType: N(381)", "Delete SimpleName: E(382)", "Delete SimpleType: E(383)", "Delete ParameterizedType: GraphBuilder<N,E>(384)", "Delete SimpleName: expectedEdgeCount(385)", "Delete PrimitiveType: int(386)", "Delete SimpleName: expectedEdgeCount(387)", "Delete SingleVariableDeclaration(388)", "Delete SimpleName: checkArgument(389)", "Delete SimpleName: expectedEdgeCount(390)", "Delete NumberLiteral: 0(391)", "Delete InfixExpression: >=(392)", "Delete StringLiteral: \"The expected number of edges can't be negative: %s\"(393)", "Delete SimpleName: expectedEdgeCount(394)", "Delete MethodInvocation(395)", "Delete ExpressionStatement(396)", "Delete ThisExpression(397)", "Delete SimpleName: expectedEdgeCount(398)", "Delete FieldAccess(399)", "Delete SimpleName: Optional(400)", "Delete SimpleName: of(401)", "Delete SimpleName: expectedEdgeCount(402)", "Delete MethodInvocation(403)", "Delete Assignment: =(404)", "Delete ExpressionStatement(405)", "Delete ThisExpression(406)", "Delete ReturnStatement(407)", "Delete Block(408)", "Delete MethodDeclaration(409)", "Delete SimpleName: E1(424)", "Delete SimpleName: E(425)", "Delete SimpleType: E(426)", "Delete TypeParameter(427)", "Delete SimpleName: E1(432)", "Delete SimpleType: E1(433)", "Delete SimpleName: E1(440)", "Delete SimpleType: E1(441)"]}}, {"GraphProperties_cluster": {"actions": [{"root": "UPDATE from Graph<?,?> to Graph<?>", "operations": ["UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Graph<?>", "UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Graph<?>"]}, {"root": "UPDATE from Graph<N,?> to Graph<N>", "operations": ["UPD ParameterizedType: Graph<N,?> from Graph<N,?> to Graph<N>"]}, {"root": "DEL WildcardType: ?", "operations": ["DEL WildcardType: ?"]}, {"root": "DEL WildcardType: ?", "operations": ["DEL WildcardType: ?"]}, {"root": "DEL WildcardType: ?", "operations": ["DEL WildcardType: ?"]}]}}, {"GraphProperties_diff": {"operations": ["Update ParameterizedType: Graph<?,?>(45) to Graph<?>", "Update ParameterizedType: Graph<?,?>(115) to Graph<?>", "Update ParameterizedType: Graph<N,?>(228) to Graph<N>", "Delete WildcardType: ?(44)", "Delete WildcardType: ?(114)", "Delete WildcardType: ?(227)"]}}, {"Graphs_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: com.google.common.base.Joiner to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: java.util.List to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: GRAPH_FORMAT to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS StringLiteral: \"%s, nodes: %s, edges: %s\" to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleType: String to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS Modifier: private to FieldDeclaration at 0", "INS StringLiteral: \"<%s -> %s>\" to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: DIRECTED_FORMAT to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleType: String to FieldDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: UNDIRECTED_FORMAT to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: String to FieldDeclaration at 3", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS StringLiteral: \"[%s, %s]\" to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: alwaysTrue to MethodInvocation at 1", "INS TypeParameter to MethodDeclaration at 3", "INS TagElement: @code to TagElement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS TextElement:  graph to TagElement: @code at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: Predicates to MethodInvocation at 0", "INS SimpleName: copyOf to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS ParameterizedType: MutableGraph<N> to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: N to TypeParameter at 0", "INS TextElement: , using the same nodes. to TagElement at 2", "INS SimpleName: graph to SingleVariableDeclaration at 1", "INS SimpleName: MutableGraph to SimpleType: MutableGraph at 0", "INS TagElement to Javadoc at 0", "INS ReturnStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: graph to MethodInvocation at 1", "INS SimpleName: copyOf to MethodDeclaration at 5", "INS SimpleType: MutableGraph to ParameterizedType: MutableGraph<N> at 0", "INS TextElement: Creates a mutable copy of  to TagElement at 0", "INS Block to MethodDeclaration at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS ParameterizedType: MutableNetwork<N,E> to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: MutableNetwork to ParameterizedType: MutableNetwork<N,E> at 0", "INS SimpleName: copyOf to MethodDeclaration at 6", "INS SimpleType: N to ParameterizedType: MutableNetwork<N,E> at 1", "INS SimpleName: MutableNetwork to SimpleType: MutableNetwork at 0", "INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS TagElement to Javadoc at 0", "INS SimpleName: copy to SingleVariableDeclaration at 1", "INS ParameterizedType: MutableNetwork<N,?> to SingleVariableDeclaration at 0", "INS SimpleName: MutableNetwork to SimpleType: MutableNetwork at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement: @code to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS TextElement: Copies all nodes from  to TagElement at 0", "INS SimpleType: MutableNetwork to ParameterizedType: MutableNetwork<N,?> at 0", "INS SimpleName: mergeNodesFrom to MethodInvocation at 0", "INS SimpleName: original to SingleVariableDeclaration at 1", "INS SimpleName: copy to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS TextElement:  into  to TagElement at 2", "INS SimpleName: mergeNodesFrom to MethodDeclaration at 5", "INS TextElement:  copy to TagElement: @code at 0", "INS SimpleName: alwaysTrue to MethodInvocation at 1", "INS SimpleType: N to ParameterizedType: Graph<N> at 1", "INS TextElement:  original to TagElement: @code at 0", "INS TagElement: @code to TagElement at 3", "INS SimpleName: original to MethodInvocation at 1", "INS ParameterizedType: Graph<N> to SingleVariableDeclaration at 0", "INS TextElement: . to TagElement at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeParameter to MethodDeclaration at 3", "INS Block to MethodDeclaration at 8", "INS SimpleName: N to TypeParameter at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: N to SimpleType: N at 0", "INS PrimitiveType: void to MethodDeclaration at 4", "INS SimpleType: N to ParameterizedType: MutableNetwork<N,?> at 1", "INS SimpleName: Predicates to MethodInvocation at 0", "INS WildcardType: ? to ParameterizedType: MutableNetwork<N,?> at 2", "INS MethodDeclaration to TypeDeclaration: class at 18"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: N to SimpleType: N at 0", "INS TextElement:  copy to TagElement: @code at 0", "INS SimpleName: original to MethodInvocation at 1", "INS StringLiteral: \"copy\" to MethodInvocation at 2", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: node to MethodInvocation at 2", "INS TagElement: @code to TagElement at 3", "INS SimpleName: copy to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: Predicate to ParameterizedType: Predicate<? super N> at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: MutableNetwork to ParameterizedType: MutableNetwork<N,?> at 0", "INS StringLiteral: \"nodePredicate\" to MethodInvocation at 2", "INS WildcardType: ? super N to ParameterizedType: Predicate<? super N> at 1", "INS SimpleName: nodePredicate to MethodInvocation at 3", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: N to ParameterizedType: Graph<N> at 1", "INS TextElement:  original to TagElement: @code at 0", "INS TextElement:  that satisfy  to TagElement at 4", "INS Block to MethodDeclaration at 10", "INS ParameterizedType: Predicate<? super N> to SingleVariableDeclaration at 0", "INS SimpleType: N to WildcardType: ? super N at 0", "INS TypeParameter to MethodDeclaration at 3", "INS WildcardType: ? to ParameterizedType: MutableNetwork<N,?> at 2", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: mergeNodesFrom to MethodDeclaration at 6", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: nodePredicate to SingleVariableDeclaration at 1", "INS ParameterizedType: Graph<N> to SingleVariableDeclaration at 0", "INS SimpleType: N to ParameterizedType: MutableNetwork<N,?> at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: Sets to MethodInvocation at 0", "INS EnhancedForStatement to Block at 3", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS TextElement:  nodePredicate to TagElement: @code at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: N to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS TagElement: @code to TagElement at 1", "INS SimpleName: Predicate to SimpleType: Predicate at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: original to SingleVariableDeclaration at 1", "INS SimpleName: copy to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS StringLiteral: \"original\" to MethodInvocation at 2", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS TextElement:  into  to TagElement at 2", "INS SimpleName: nodes to MethodInvocation at 1", "INS TextElement: . to TagElement at 6", "INS SimpleName: addNode to MethodInvocation at 1", "INS SimpleName: nodePredicate to MethodInvocation at 1", "INS SimpleName: filter to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 5", "INS TextElement: Copies all nodes from  to TagElement at 0", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement: @code to TagElement at 5", "INS SimpleName: copy to MethodInvocation at 1", "INS ParameterizedType: MutableNetwork<N,?> to SingleVariableDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: N to TypeParameter at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: original to MethodInvocation at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: MutableNetwork to SimpleType: MutableNetwork at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS Block to IfStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to Block at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS ParameterizedType: Network<?,?> to CastExpression at 0", "INS TextElement: s cannot be equal to TagElement at 14", "INS MethodRef to TagElement: @see at 0", "INS SimpleName: Network to TagElement: @link at 0", "INS ReturnStatement to Block at 0", "INS CastExpression to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS TagElement: @link to TagElement at 8", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 2", "INS IfStatement to Block at 2", "INS SimpleType: Network to ParameterizedType: Network<?,?> at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: Network to TagElement: @link at 0", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: Network to SimpleType: Network at 0", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 1", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS SimpleName: graph1 to SingleVariableDeclaration at 2", "INS TextElement: to  to TagElement at 15", "INS TagElement to Javadoc at 0", "INS CastExpression to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleType: Network to InstanceofExpression at 1", "INS TagElement: @see to Javadoc at 1", "INS TextElement:  graph2 to TagElement: @code at 0", "INS TextElement:  and  to TagElement at 2", "INS ReturnStatement to Block at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: graph1 to InfixExpression: == at 0", "INS SimpleName: graph1 to InfixExpression: == at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS ReturnStatement to Block at 0", "INS IfStatement to Block at 4", "INS SimpleType: Network to InstanceofExpression at 1", "INS SimpleName: node to MethodInvocation at 2", "INS TextElement:  graph1 to TagElement: @code at 0", "INS Block to MethodDeclaration at 7", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: graph2 to CastExpression at 1", "INS SimpleName: graph1 to MethodInvocation at 0", "INS SimpleName: graph1 to InstanceofExpression at 0", "INS TextElement: s. to TagElement at 17", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 1", "INS SimpleName: graph2 to InfixExpression: == at 0", "INS TagElement: @link to TagElement at 11", "INS ParameterizedType: Graph<?> to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: isDirected to MethodInvocation at 1", "INS SimpleName: graph1 to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 2", "INS InfixExpression: == to InfixExpression: || at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: successors to MethodInvocation at 1", "INS SimpleType: Network to InstanceofExpression at 1", "INS WildcardType: ? to ParameterizedType: Graph<?> at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: graph1 to MethodInvocation at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: bothUndirected to VariableDeclarationFragment at 0", "INS SimpleName: Network to TagElement: @link at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: bothUndirected to PrefixExpression: ! at 0", "INS SimpleName: graph1 to InstanceofExpression at 0", "INS InstanceofExpression to InfixExpression: || at 0", "INS SimpleName: predecessors to MethodInvocation at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS TagElement: @link to TagElement at 16", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: nodes to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: nodes to MethodInvocation at 1", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: graph2 to InstanceofExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TextElement: s that are not also  to TagElement at 12", "INS MethodInvocation to PrefixExpression: ! at 0", "INS TextElement:  have the same node connections. to TagElement at 4", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 3", "INS SimpleName: Network to MethodRef at 0", "INS Block to EnhancedForStatement at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS TextElement: In particular,  to TagElement at 10", "INS SimpleName: predecessors to MethodInvocation at 1", "INS SimpleName: Network to SimpleType: Network at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: false to ReturnStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: equals to MethodRef at 1", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: graph2 to InstanceofExpression at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleName: nodes to MethodInvocation at 1", "INS SimpleName: graph2 to InfixExpression: == at 1", "INS SimpleName: equal to MethodDeclaration at 4", "INS SimpleName: graph2 to MethodInvocation at 0", "INS SimpleName: Network to TagElement: @link at 0", "INS ParameterizedType: Graph<?> to SingleVariableDeclaration at 1", "INS SimpleType: Network to InstanceofExpression at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Network to ParameterizedType: Network<?,?> at 0", "INS SimpleName: graph2 to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS InstanceofExpression to InfixExpression: && at 1", "INS IfStatement to Block at 1", "INS TextElement:  instances can only be equal to other  to TagElement at 7", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: successors to MethodInvocation at 1", "INS TagElement: @link to TagElement at 6", "INS SimpleName: graph2 to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS TagElement: @code to TagElement at 3", "INS TextElement:  instances. to TagElement at 9", "INS SimpleName: graph2 to SingleVariableDeclaration at 2", "INS SimpleName: graph1 to CastExpression at 1", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS SimpleName: Graph to TagElement: @link at 0", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 2", "INS TagElement: @code to TagElement at 1", "INS EnhancedForStatement to Block at 5", "INS InfixExpression: && to IfStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: graph1 to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TextElement: <p>Note:  to TagElement at 5", "INS MethodInvocation to MethodInvocation at 2", "INS ParameterizedType: Network<?,?> to CastExpression at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: node to MethodInvocation at 2", "INS ReturnStatement to Block at 6", "INS IfStatement to Block at 0", "INS TagElement: @link to TagElement at 13", "INS InstanceofExpression to InfixExpression: && at 0", "INS SimpleName: graph2 to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: graph1 to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: node to MethodInvocation at 2", "INS WildcardType: ? to ParameterizedType: Graph<?> at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: equal to MethodInvocation at 0", "INS SimpleName: isDirected to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS TextElement: Returns true iff  to TagElement at 0", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: hashCode to MethodInvocation at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: graph to SingleVariableDeclaration at 1", "INS SimpleName: graph to CastExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: hashCode to MethodDeclaration at 4", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS PrimitiveType: int to MethodDeclaration at 3", "INS WildcardType: ? to ParameterizedType: Graph<?> at 1", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleType: Network to ParameterizedType: Network<?,?> at 0", "INS SimpleName: nodeToAdjacentNodes to MethodInvocation at 0", "INS ParameterizedType: Graph<?> to SingleVariableDeclaration at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ParameterizedType: Network<?,?> to CastExpression at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: graph to MethodInvocation at 1", "INS SimpleName: hashCode to MethodInvocation at 1", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 2", "INS MethodInvocation to ConditionalExpression at 2", "INS Block to MethodDeclaration at 6", "INS SimpleName: graph to InstanceofExpression at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 1", "INS SimpleType: Network to InstanceofExpression at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS CastExpression to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS TextElement: . Encodes edge direction if  to TagElement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: graph to InstanceofExpression at 0", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: getPropertiesString to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ParameterizedType: Graph<?> to SingleVariableDeclaration at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS TagElement: @code to TagElement at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 6", "INS TextElement:  graph to TagElement: @code at 0", "INS MethodInvocation to MethodInvocation at 4", "INS ReturnStatement to Block at 1", "INS SimpleName: adjacentNodesString to MethodInvocation at 0", "INS SimpleType: Network to InstanceofExpression at 1", "INS Javadoc to MethodDeclaration at 0", "INS IfStatement to Block at 0", "INS SimpleName: GRAPH_FORMAT to MethodInvocation at 2", "INS SimpleName: graph to MethodInvocation at 0", "INS WildcardType: ? to ParameterizedType: Graph<?> at 1", "INS SimpleName: toString to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS TextElement: Returns a string representation of  to TagElement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: graph to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: toString to MethodDeclaration at 4", "INS TextElement:  graph to TagElement: @code at 0", "INS SimpleName: graph to MethodInvocation at 1", "INS TagElement: @code to TagElement at 1", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 1", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SimpleType: String to MethodDeclaration at 3", "INS SimpleName: nodes to MethodInvocation at 1", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 2", "INS SimpleName: graph to CastExpression at 1", "INS TextElement: is directed. to TagElement at 4", "INS CastExpression to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to MethodInvocation at 5", "INS ParameterizedType: Network<?,?> to CastExpression at 0", "INS SimpleType: Network to ParameterizedType: Network<?,?> at 0", "INS SimpleName: graph to SingleVariableDeclaration at 1", "INS SimpleName: Network to SimpleType: Network at 0", "INS Block to IfStatement at 1", "INS Modifier: static to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS ParameterizedType: List<String> to VariableDeclarationStatement at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleType: N to SingleVariableDeclaration at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<String> at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: isDirected to MethodInvocation at 1", "INS SimpleName: adjacencies to MethodInvocation at 2", "INS SimpleName: nodes to MethodInvocation at 1", "INS TextElement: . to TagElement at 2", "INS MethodInvocation to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS ConditionalExpression to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: node to MethodInvocation at 3", "INS SimpleName: on to MethodInvocation at 1", "INS TextElement:  graph to TagElement: @code at 0", "INS Modifier: private to MethodDeclaration at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS Modifier: static to MethodDeclaration at 2", "INS Block to MethodDeclaration at 7", "INS ReturnStatement to Block at 3", "INS SimpleName: DIRECTED_FORMAT to ConditionalExpression at 1", "INS SimpleName: UNDIRECTED_FORMAT to ConditionalExpression at 2", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: Joiner to MethodInvocation at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: adjacentNodesString to MethodDeclaration at 5", "INS TypeParameter to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS StringLiteral: \"{%s}\" to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: adjacencies to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: format to MethodInvocation at 1", "INS StringLiteral: \", \" to MethodInvocation at 2", "INS SimpleName: successor to MethodInvocation at 4", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 29", "INS SimpleName: graph to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: adjacencies to MethodInvocation at 0", "INS EnhancedForStatement to Block at 2", "INS SimpleType: N to ParameterizedType: Graph<N> at 1", "INS StringLiteral: \"graph\" to MethodInvocation at 2", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: N to TypeParameter at 0", "INS TagElement: @code to TagElement at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS EnhancedForStatement to Block at 0", "INS SimpleName: graph to SingleVariableDeclaration at 2", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS ParameterizedType: Graph<N> to SingleVariableDeclaration at 1", "INS SimpleName: format to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: successors to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: String to MethodDeclaration at 4", "INS Block to EnhancedForStatement at 2", "INS TextElement: Returns a String of the adjacent node relationships for  to TagElement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: String to ParameterizedType: List<String> at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: String to ParameterizedType: ArrayList<String> at 1", "INS SimpleType: List to ParameterizedType: List<String> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: successor to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: graph to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ParameterizedType: ArrayList<String> to ClassInstanceCreation at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: join to MethodInvocation at 1", "INS SimpleType: N to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS SimpleType: Map to ParameterizedType: Map<N,Set<N>> at 0", "INS SimpleType: Set to ParameterizedType: Set<N> at 0", "INS ParameterizedType: Set<N> to ParameterizedType: Function<N,Set<N>> at 2", "INS SimpleName: adjacentNodes to MethodInvocation at 1", "INS SimpleName: asMap to MethodInvocation at 1", "INS SimpleName: N to SimpleType: N at 0", "INS ParameterizedType: Graph<N> to SingleVariableDeclaration at 1", "INS ParameterizedType: Function<N,Set<N>> to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: graph to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: Function to SimpleType: Function at 0", "INS SimpleType: Set to ParameterizedType: Set<N> at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: N to ParameterizedType: Graph<N> at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS Modifier: static to MethodDeclaration at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS TypeParameter to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: Set to ParameterizedType: Set<N> at 0", "INS SimpleName: N to TypeParameter at 0", "INS ParameterizedType: Map<N,Set<N>> to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: nodes to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleType: N to ParameterizedType: Set<N> at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: N to ParameterizedType: Set<N> at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Maps to MethodInvocation at 0", "INS SimpleType: N to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: N to ParameterizedType: Map<N,Set<N>> at 1", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS SimpleName: graph to SingleVariableDeclaration at 2", "INS SimpleType: Function to ParameterizedType: Function<N,Set<N>> at 0", "INS SimpleName: nodeToAdjacentNodes to MethodDeclaration at 4", "INS StringLiteral: \"graph\" to MethodInvocation at 2", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: N to ParameterizedType: Set<N> at 1", "INS SimpleName: N to SimpleType: N at 0", "INS ParameterizedType: Set<N> to ParameterizedType: Map<N,Set<N>> at 2", "INS ParameterizedType: Set<N> to MethodDeclaration at 2", "INS SimpleType: N to ParameterizedType: Function<N,Set<N>> at 1", "INS SimpleName: apply to MethodDeclaration at 3", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS SimpleName: graph to MethodInvocation at 0", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: allowsSelfLoops to MethodInvocation at 1", "INS SimpleName: graph to InstanceofExpression at 0", "INS TagElement: @code to TagElement at 1", "INS MethodInvocation to MethodInvocation at 4", "INS ReturnStatement to Block at 1", "INS CastExpression to MethodInvocation at 1", "INS SimpleType: Network to ParameterizedType: Network<?,?> at 0", "INS TextElement: . to TagElement at 2", "INS SimpleName: graph to CastExpression at 1", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS SimpleName: isDirected to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: getPropertiesString to MethodInvocation at 0", "INS SimpleName: getPropertiesString to MethodDeclaration at 4", "INS TextElement: Returns a string representation of the properties of  to TagElement at 0", "INS ParameterizedType: Graph<?> to SingleVariableDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS Block to MethodDeclaration at 6", "INS SimpleType: String to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ReturnStatement at 0", "INS WildcardType: ? to ParameterizedType: Network<?,?> at 2", "INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Network to InstanceofExpression at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS StringLiteral: \"isDirected: %s, allowsSelfLoops: %s\" to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS SimpleName: graph to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS TextElement:  graph to TagElement: @code at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS WildcardType: ? to ParameterizedType: Graph<?> at 1", "INS ParameterizedType: Network<?,?> to CastExpression at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: , using all of its elements that satisfy to TagElement at 2", "INS TagElement: @code to TagElement at 3", "INS TextElement:  graph to TagElement: @code at 0", "INS TextElement:  and  to TagElement at 4", "INS TextElement: . to TagElement at 6", "INS TagElement: @code to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @code to TagElement at 5", "INS TextElement:  edgePredicate to TagElement: @code at 0", "INS TextElement: Creates a mutable copy of  to TagElement at 0", "INS TextElement:  nodePredicate to TagElement: @code at 0"]}, {"root": "INS TypeParameter to MethodDeclaration at 4", "operations": ["INS SimpleName: N to TypeParameter at 0", "INS TypeParameter to MethodDeclaration at 4"]}, {"root": "UPDATE from Graph<N,E> to MutableGraph<N>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableGraph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableGraph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableGraph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableGraph<N>"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SimpleName: graph to SingleVariableDeclaration at 1", "INS ParameterizedType: Graph<N> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 10", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 10", "INS SimpleName: nodePredicate to SingleVariableDeclaration at 1"]}, {"root": "INS Block to MethodDeclaration at 11", "operations": ["INS SimpleName: apply to MethodInvocation at 1", "INS SimpleName: copy to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: nodes to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: nodePredicate to MethodInvocation at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: successor to MethodInvocation at 3", "INS SimpleName: addNode to MethodInvocation at 1", "INS SimpleName: nodePredicate to MethodInvocation at 0", "INS SimpleType: N to SingleVariableDeclaration at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleName: successor to SingleVariableDeclaration at 1", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: addEdge to MethodInvocation at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleType: N to SingleVariableDeclaration at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: node to MethodInvocation at 2", "INS Block to MethodDeclaration at 11", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: node to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS Block to EnhancedForStatement at 2", "INS ReturnStatement to Block at 4", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: successor to MethodInvocation at 2", "INS SimpleName: nodePredicate to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: graph to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: successors to MethodInvocation at 1", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: apply to MethodInvocation at 1", "INS SimpleName: N to SimpleType: N at 0", "INS SimpleName: N to SimpleType: N at 0", "INS StringLiteral: \"nodePredicate\" to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: graph to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: copy to MethodInvocation at 0", "INS SimpleName: copy to MethodInvocation at 0", "INS StringLiteral: \"graph\" to MethodInvocation at 2", "INS EnhancedForStatement to Block at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV TypeParameter to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0", "MOV Block to MethodDeclaration at 8", "MOV TypeParameter to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS ParameterizedType: MutableNetwork<N,E> to MethodDeclaration at 5", "operations": ["INS SimpleType: MutableNetwork to ParameterizedType: MutableNetwork<N,E> at 0", "INS SimpleName: MutableNetwork to SimpleType: MutableNetwork at 0", "INS SimpleType: N to ParameterizedType: MutableNetwork<N,E> at 1", "INS ParameterizedType: MutableNetwork<N,E> to MethodDeclaration at 5", "INS SimpleName: N to SimpleType: N at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV TypeParameter to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS ParameterizedType: Network<N,E> to SingleVariableDeclaration at 0", "INS SimpleType: N to ParameterizedType: Network<N,E> at 1", "INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleName: original to SingleVariableDeclaration at 1", "INS SimpleType: Network to ParameterizedType: Network<N,E> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: N to SimpleType: N at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Returns the hash code of  to TagElement at 0", "INS TagElement to Javadoc at 0", "INS MethodRef to TagElement: @see at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @see to Javadoc at 1", "INS SimpleName: hashCode to MethodRef at 1", "INS TagElement: @code to TagElement at 1", "INS TextElement: . to TagElement at 2", "INS TextElement:  graph to TagElement: @code at 0", "INS SimpleName: Network to MethodRef at 0"]}, {"root": "UPDATE from Graph<N,?> to Network<N,?>", "operations": ["UPD ParameterizedType: Graph<N,?> from Graph<N,?> to Network<N,?>"]}, {"root": "UPDATE from Graph<N,E> to Network<N,E>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Network<N,E>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Network<N,E>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Network<N,E>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Network<N,E>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Network<N,E>"]}, {"root": "UPDATE from Graph<N,E> to MutableNetwork<N,E>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableNetwork<N,E>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableNetwork<N,E>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to MutableNetwork<N,E>"]}, {"root": "MOVE from ParameterizedType: MutableGraph<N>", "operations": ["MOV SimpleType: N to ParameterizedType: MutableGraph<N> at 1"]}, {"root": "UPDATE from Graph<N,E> to Graph<N>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Graph<N,E> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Graph to MutableGraph", "operations": ["UPD SimpleName: Graph from Graph to MutableGraph", "UPD SimpleType: Graph from Graph to MutableGraph", "UPD SimpleType: Graph from Graph to MutableGraph", "UPD SimpleType: Graph from Graph to MutableGraph", "UPD SimpleName: Graph from Graph to MutableGraph", "UPD SimpleName: Graph from Graph to MutableGraph", "UPD SimpleType: Graph from Graph to MutableGraph", "UPD SimpleName: Graph from Graph to MutableGraph"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1", "MOV SimpleType: Graph to ParameterizedType: Graph<N> at 0"]}, {"root": "UPDATE from Graph<N,E> to Predicate<? super N>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Predicate<? super N>"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Graph<N,E> to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1", "MOV SimpleType: E to ParameterizedType: MutableNetwork<N,E> at 2"]}, {"root": "UPDATE from original to graph", "operations": ["UPD SimpleName: original from original to graph"]}, {"root": "MOVE from ParameterizedType: MutableNetwork<N,E>", "operations": ["MOV SimpleType: E to ParameterizedType: MutableNetwork<N,E> at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS ParameterizedType: MutableNetwork<N,E> to VariableDeclarationStatement at 0", "INS SimpleName: nodes to MethodInvocation at 1", "INS SimpleType: E to ParameterizedType: MutableNetwork<N,E> at 2", "INS SimpleName: N to SimpleType: N at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: graph to MethodInvocation at 0", "INS SimpleName: graph to MethodInvocation at 2", "INS SimpleName: build to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: from to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: NetworkBuilder to MethodInvocation at 0", "INS SimpleName: E to SimpleType: E at 0", "INS SimpleName: expectedEdgeCount to MethodInvocation at 1", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: expectedNodeCount to MethodInvocation at 1", "INS SimpleName: copy to VariableDeclarationFragment at 0", "INS SimpleName: MutableNetwork to SimpleType: MutableNetwork at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: MutableNetwork to ParameterizedType: MutableNetwork<N,E> at 0", "INS SimpleType: N to ParameterizedType: MutableNetwork<N,E> at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Graph<?,?> to Network<?,?>", "operations": ["UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Network<?,?>", "UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Network<?,?>", "UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Network<?,?>", "UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Network<?,?>", "UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Network<?,?>", "UPD ParameterizedType: Graph<?,?> from Graph<?,?> to Network<?,?>"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "UPDATE from Graph<?,E> to Network<?,E>", "operations": ["UPD ParameterizedType: Graph<?,E> from Graph<?,E> to Network<?,E>"]}, {"root": "UPDATE from Graph to Network", "operations": ["UPD SimpleName: Graph from Graph to Network", "UPD SimpleType: Graph from Graph to Network", "UPD SimpleType: N from N to Network", "UPD SimpleName: N from N to Network", "UPD SimpleType: Graph from Graph to Network", "UPD SimpleType: Graph from Graph to Network", "UPD SimpleName: Graph from Graph to Network", "UPD SimpleName: Graph from Graph to Network", "UPD SimpleType: Graph from Graph to Network", "UPD SimpleName: Graph from Graph to Network", "UPD SimpleName: Graph from Graph to Network"]}, {"root": "UPDATE from Graph to MutableNetwork", "operations": ["UPD SimpleType: Graph from Graph to MutableNetwork", "UPD SimpleName: Graph from Graph to MutableNetwork", "UPD SimpleName: Graph from Graph to MutableNetwork", "UPD SimpleType: Graph from Graph to MutableNetwork"]}, {"root": "MOVE from ParameterizedType: Graph<N>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N> at 1"]}, {"root": "UPDATE from Graph to Predicate", "operations": ["UPD SimpleType: Graph from Graph to Predicate", "UPD SimpleName: Graph from Graph to Predicate"]}, {"root": "INS WildcardType: ? super N to ParameterizedType: Graph<N,E> at 1", "operations": ["INS SimpleType: N to WildcardType: ? super N at 0", "INS WildcardType: ? super N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1", "MOV SimpleType: E to ParameterizedType: Graph<N,E> at 2"]}, {"root": "MOVE from ParameterizedType: Graph<?,E>", "operations": ["MOV SimpleType: E to ParameterizedType: Graph<?,E> at 2", "MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: Network<N,E>", "operations": ["MOV SimpleType: E to ParameterizedType: Network<N,E> at 2", "MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<N,E> at 0", "operations": ["INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleType: Network to ParameterizedType: Graph<N,E> at 0"]}, {"root": "INS SimpleType: N to ParameterizedType: Graph<N,E> at 1", "operations": ["INS SimpleName: N to SimpleType: N at 0", "INS SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: Graph<N>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<N> at 0"]}, {"root": "MOVE from ParameterizedType: Graph<N>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<N> at 0"]}, {"root": "INS SimpleType: MutableNetwork to ParameterizedType: Graph<N,E> at 0", "operations": ["INS SimpleName: MutableNetwork to SimpleType: MutableNetwork at 0", "INS SimpleType: MutableNetwork to ParameterizedType: Graph<N,E> at 0"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: E to ParameterizedType: Graph<N,E> at 3", "MOV SimpleType: Graph to ParameterizedType: Graph<?> at 0"]}, {"root": "MOVE from ParameterizedType: Graph<?>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<?> at 0"]}, {"root": "MOVE from ParameterizedType: Graph<?>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<?> at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "operations": ["INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "INS SimpleName: Network to SimpleType: Network at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "operations": ["INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "INS SimpleName: Network to SimpleType: Network at 0"]}, {"root": "MOVE from ParameterizedType: Graph<?>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<?> at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "operations": ["INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "operations": ["INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,E> at 0", "operations": ["INS SimpleType: Network to ParameterizedType: Graph<?,E> at 0", "INS SimpleName: Network to SimpleType: Network at 0"]}, {"root": "MOVE from ParameterizedType: Graph<N>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<N> at 0"]}, {"root": "UPDATE from E to N", "operations": ["UPD SimpleName: E from E to N", "UPD SimpleName: E from E to N", "UPD SimpleType: E from E to N"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: E to ParameterizedType: Graph<N,E> at 2"]}, {"root": "MOVE from ParameterizedType: Graph<N>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<N> at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "operations": ["INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0"]}, {"root": "MOVE from ParameterizedType: Graph<?>", "operations": ["MOV SimpleType: Graph to ParameterizedType: Graph<?> at 0"]}, {"root": "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0", "operations": ["INS SimpleName: Network to SimpleType: Network at 0", "INS SimpleType: Network to ParameterizedType: Graph<?,?> at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from SimpleType: E", "operations": ["MOV SimpleName: E to SimpleType: E at 0"]}, {"root": "MOVE from MethodRef", "operations": ["MOV MethodRefParameter to MethodRef at 2"]}, {"root": "INS MethodRefParameter to MethodRef at 2", "operations": ["INS SimpleType: Object to MethodRefParameter at 0", "INS MethodRefParameter to MethodRef at 2", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS SimpleName: GRAPH_FORMAT to MethodInvocation at 2", "operations": ["INS SimpleName: GRAPH_FORMAT to MethodInvocation at 2"]}, {"root": "MOVE from SimpleType: N", "operations": ["MOV SimpleName: E to SimpleType: N at 0"]}, {"root": "UPDATE from expectedEdgeCount to build", "operations": ["UPD SimpleName: expectedEdgeCount from expectedEdgeCount to build"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: build", "DEL MethodInvocation"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: graph", "DEL SingleVariableDeclaration"]}, {"root": "DEL StringLiteral: \"%s, nodes: %s, edges: %s\"", "operations": ["DEL StringLiteral: \"%s, nodes: %s, edges: %s\""]}]}}, {"Graphs_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(2171) at 5", "Insert ImportDeclaration(25) into CompilationUnit(2171) at 12", "Insert ImportDeclaration(29) into CompilationUnit(2171) at 14", "Move MethodDeclaration(624) into TypeDeclaration: class(2170) at 13", "Insert QualifiedName: com.google.common.base.Joiner(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.util.ArrayList(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: java.util.List(28) into ImportDeclaration(29) at 0", "Insert FieldDeclaration(59) into TypeDeclaration: class(2170) at 5", "Insert FieldDeclaration(68) into TypeDeclaration: class(2170) at 6", "Insert FieldDeclaration(77) into TypeDeclaration: class(2170) at 7", "Insert MethodDeclaration(501) into TypeDeclaration: class(2170) at 12", "Insert MethodDeclaration(772) into TypeDeclaration: class(2170) at 16", "Insert MethodDeclaration(959) into TypeDeclaration: class(2170) at 18", "Insert MethodDeclaration(1037) into TypeDeclaration: class(2170) at 19", "Insert MethodDeclaration(1354) into TypeDeclaration: class(2170) at 22", "Insert MethodDeclaration(1540) into TypeDeclaration: class(2170) at 24", "Insert MethodDeclaration(1621) into TypeDeclaration: class(2170) at 26", "Insert MethodDeclaration(1832) into TypeDeclaration: class(2170) at 29", "Insert MethodDeclaration(1981) into TypeDeclaration: class(2170) at 31", "Insert MethodDeclaration(2135) into TypeDeclaration: class(2170) at 33", "Insert Modifier: private(51) into FieldDeclaration(59) at 0", "Insert Modifier: static(52) into FieldDeclaration(59) at 1", "Insert Modifier: final(53) into FieldDeclaration(59) at 2", "Insert SimpleType: String(55) into FieldDeclaration(59) at 3", "Insert VariableDeclarationFragment(58) into FieldDeclaration(59) at 4", "Insert Modifier: private(60) into FieldDeclaration(68) at 0", "Insert Modifier: static(61) into FieldDeclaration(68) at 1", "Insert Modifier: final(62) into FieldDeclaration(68) at 2", "Insert SimpleType: String(64) into FieldDeclaration(68) at 3", "Insert VariableDeclarationFragment(67) into FieldDeclaration(68) at 4", "Insert Modifier: private(69) into FieldDeclaration(77) at 0", "Insert Modifier: static(70) into FieldDeclaration(77) at 1", "Insert Modifier: final(71) into FieldDeclaration(77) at 2", "Insert SimpleType: String(73) into FieldDeclaration(77) at 3", "Insert VariableDeclarationFragment(76) into FieldDeclaration(77) at 4", "Insert Javadoc(475) into MethodDeclaration(501) at 0", "Insert Modifier: public(476) into MethodDeclaration(501) at 1", "Insert Modifier: static(477) into MethodDeclaration(501) at 2", "Insert TypeParameter(479) into MethodDeclaration(501) at 3", "Insert ParameterizedType: MutableGraph<N>(484) into MethodDeclaration(501) at 4", "Insert SimpleName: copyOf(485) into MethodDeclaration(501) at 5", "Insert SingleVariableDeclaration(492) into MethodDeclaration(501) at 6", "Insert Block(500) into MethodDeclaration(501) at 7", "Insert Javadoc(513) into MethodDeclaration(615) at 0", "Insert TypeParameter(517) into MethodDeclaration(615) at 3", "Update ParameterizedType: Graph<N,E>(455) to MutableGraph<N>", "Insert SingleVariableDeclaration(530) into MethodDeclaration(615) at 6", "Insert SingleVariableDeclaration(538) into MethodDeclaration(615) at 7", "Insert Block(614) into MethodDeclaration(615) at 8", "Move Javadoc(442) into MethodDeclaration(772) at 0", "Insert Modifier: public(738) into MethodDeclaration(772) at 1", "Insert Modifier: static(739) into MethodDeclaration(772) at 2", "Move TypeParameter(446) into MethodDeclaration(772) at 3", "Move TypeParameter(448) into MethodDeclaration(772) at 4", "Insert ParameterizedType: MutableNetwork<N,E>(750) into MethodDeclaration(772) at 5", "Insert SimpleName: copyOf(751) into MethodDeclaration(772) at 6", "Move SingleVariableDeclaration(777) into MethodDeclaration(772) at 7", "Move Block(476) into MethodDeclaration(772) at 8", "Insert ParameterizedType: MutableNetwork<N,E>(797) into MethodDeclaration(919) at 5", "Insert Javadoc(928) into MethodDeclaration(959) at 0", "Insert Modifier: public(929) into MethodDeclaration(959) at 1", "Insert Modifier: static(930) into MethodDeclaration(959) at 2", "Insert TypeParameter(932) into MethodDeclaration(959) at 3", "Insert PrimitiveType: void(933) into MethodDeclaration(959) at 4", "Insert SimpleName: mergeNodesFrom(934) into MethodDeclaration(959) at 5", "Insert SingleVariableDeclaration(941) into MethodDeclaration(959) at 6", "Insert SingleVariableDeclaration(949) into MethodDeclaration(959) at 7", "Insert Block(958) into MethodDeclaration(959) at 8", "Insert Javadoc(971) into MethodDeclaration(1037) at 0", "Insert Modifier: public(972) into MethodDeclaration(1037) at 1", "Insert Modifier: static(973) into MethodDeclaration(1037) at 2", "Insert TypeParameter(975) into MethodDeclaration(1037) at 3", "Move TypeParameter(639) into MethodDeclaration(1037) at 4", "Insert PrimitiveType: void(978) into MethodDeclaration(1037) at 5", "Insert SimpleName: mergeNodesFrom(979) into MethodDeclaration(1037) at 6", "Insert SingleVariableDeclaration(986) into MethodDeclaration(1037) at 7", "Insert SingleVariableDeclaration(994) into MethodDeclaration(1037) at 8", "Insert SingleVariableDeclaration(1002) into MethodDeclaration(1037) at 9", "Insert Block(1036) into MethodDeclaration(1037) at 10", "Insert SingleVariableDeclaration(1064) into MethodDeclaration(1083) at 7", "Insert Javadoc(1203) into MethodDeclaration(1354) at 0", "Insert Modifier: public(1204) into MethodDeclaration(1354) at 1", "Insert Modifier: static(1205) into MethodDeclaration(1354) at 2", "Insert PrimitiveType: boolean(1206) into MethodDeclaration(1354) at 3", "Insert SimpleName: equal(1207) into MethodDeclaration(1354) at 4", "Insert SingleVariableDeclaration(1215) into MethodDeclaration(1354) at 5", "Insert SingleVariableDeclaration(1223) into MethodDeclaration(1354) at 6", "Insert Block(1353) into MethodDeclaration(1354) at 7", "Move Javadoc(1035) into MethodDeclaration(1540) at 0", "Insert Modifier: public(1508) into MethodDeclaration(1540) at 1", "Insert Modifier: static(1509) into MethodDeclaration(1540) at 2", "Insert PrimitiveType: int(1510) into MethodDeclaration(1540) at 3", "Insert SimpleName: hashCode(1511) into MethodDeclaration(1540) at 4", "Insert SingleVariableDeclaration(1517) into MethodDeclaration(1540) at 5", "Insert Block(1539) into MethodDeclaration(1540) at 6", "Insert Javadoc(1550) into MethodDeclaration(1569) at 0", "Insert Javadoc(1578) into MethodDeclaration(1621) at 0", "Insert Modifier: public(1579) into MethodDeclaration(1621) at 1", "Insert Modifier: static(1580) into MethodDeclaration(1621) at 2", "Insert SimpleType: String(1582) into MethodDeclaration(1621) at 3", "Insert SimpleName: toString(1583) into MethodDeclaration(1621) at 4", "Insert SingleVariableDeclaration(1589) into MethodDeclaration(1621) at 5", "Insert Block(1620) into MethodDeclaration(1621) at 6", "Insert Javadoc(1750) into MethodDeclaration(1832) at 0", "Insert Modifier: private(1751) into MethodDeclaration(1832) at 1", "Insert Modifier: static(1752) into MethodDeclaration(1832) at 2", "Insert TypeParameter(1754) into MethodDeclaration(1832) at 3", "Insert SimpleType: String(1756) into MethodDeclaration(1832) at 4", "Insert SimpleName: adjacentNodesString(1757) into MethodDeclaration(1832) at 5", "Insert SingleVariableDeclaration(1765) into MethodDeclaration(1832) at 6", "Insert Block(1831) into MethodDeclaration(1832) at 7", "Insert Modifier: private(1913) into MethodDeclaration(1981) at 0", "Insert Modifier: static(1914) into MethodDeclaration(1981) at 1", "Insert TypeParameter(1916) into MethodDeclaration(1981) at 2", "Insert ParameterizedType: Map<N,Set<N>>(1926) into MethodDeclaration(1981) at 3", "Insert SimpleName: nodeToAdjacentNodes(1927) into MethodDeclaration(1981) at 4", "Insert SingleVariableDeclaration(1935) into MethodDeclaration(1981) at 5", "Insert Block(1980) into MethodDeclaration(1981) at 6", "Insert Javadoc(2095) into MethodDeclaration(2135) at 0", "Insert Modifier: private(2096) into MethodDeclaration(2135) at 1", "Insert Modifier: static(2097) into MethodDeclaration(2135) at 2", "Insert SimpleType: String(2099) into MethodDeclaration(2135) at 3", "Insert SimpleName: getPropertiesString(2100) into MethodDeclaration(2135) at 4", "Insert SingleVariableDeclaration(2106) into MethodDeclaration(2135) at 5", "Insert Block(2134) into MethodDeclaration(2135) at 6", "Insert SimpleName: String(54) into SimpleType: String(55) at 0", "Insert SimpleName: GRAPH_FORMAT(56) into VariableDeclarationFragment(58) at 0", "Insert StringLiteral: \"%s, nodes: %s, edges: %s\"(57) into VariableDeclarationFragment(58) at 1", "Insert SimpleName: String(63) into SimpleType: String(64) at 0", "Insert SimpleName: DIRECTED_FORMAT(65) into VariableDeclarationFragment(67) at 0", "Insert StringLiteral: \"<%s -> %s>\"(66) into VariableDeclarationFragment(67) at 1", "Insert SimpleName: String(72) into SimpleType: String(73) at 0", "Insert SimpleName: UNDIRECTED_FORMAT(74) into VariableDeclarationFragment(76) at 0", "Insert StringLiteral: \"[%s, %s]\"(75) into VariableDeclarationFragment(76) at 1", "Update ParameterizedType: Graph<N,?>(86) to Network<N,?>", "Update ParameterizedType: Graph<N,E>(211) to Network<N,E>", "Update ParameterizedType: Graph<N,E>(329) to MutableNetwork<N,E>", "Insert TagElement(474) into Javadoc(475) at 0", "Insert SimpleName: N(478) into TypeParameter(479) at 0", "Insert SimpleType: MutableGraph(481) into ParameterizedType: MutableGraph<N>(484) at 0", "Move SimpleType: N(460) into ParameterizedType: MutableGraph<N>(484) at 1", "Update ParameterizedType: Graph<N,E>(502) to Graph<N>", "Move ParameterizedType: Graph<N,E>(502) into SingleVariableDeclaration(492) at 0", "Insert SimpleName: graph(491) into SingleVariableDeclaration(492) at 1", "Insert ReturnStatement(499) into Block(500) at 0", "Insert TagElement(512) into Javadoc(513) at 0", "Insert SimpleName: N(516) into TypeParameter(517) at 0", "Update SimpleType: Graph(450) to MutableGraph", "Move SimpleType: N(507) into ParameterizedType: MutableGraph<N>(522) at 1", "Insert ParameterizedType: Graph<N>(528) into SingleVariableDeclaration(530) at 0", "Insert SimpleName: graph(529) into SingleVariableDeclaration(530) at 1", "Update ParameterizedType: Graph<N,E>(463) to Predicate<? super N>", "Move ParameterizedType: Graph<N,E>(463) into SingleVariableDeclaration(538) at 0", "Insert SimpleName: nodePredicate(537) into SingleVariableDeclaration(538) at 1", "Insert ExpressionStatement(543) into Block(614) at 0", "Insert ExpressionStatement(548) into Block(614) at 1", "Move VariableDeclarationStatement(573) into Block(614) at 2", "Insert EnhancedForStatement(611) into Block(614) at 3", "Insert ReturnStatement(613) into Block(614) at 4", "Update ParameterizedType: Graph<N,E>(648) to Graph<N>", "Update ParameterizedType: Graph<N,E>(657) to MutableGraph<N>", "Update ParameterizedType: Graph<N,E>(696) to Graph<N>", "Update ParameterizedType: Graph<N,E>(705) to MutableGraph<N>", "Insert SimpleType: MutableNetwork(745) into ParameterizedType: MutableNetwork<N,E>(750) at 0", "Insert SimpleType: N(747) into ParameterizedType: MutableNetwork<N,E>(750) at 1", "Move SimpleType: E(704) into ParameterizedType: MutableNetwork<N,E>(750) at 2", "Update ParameterizedType: Graph<N,E>(775) to Network<N,E>", "Update SimpleName: original(776) to graph", "Insert SimpleType: MutableNetwork(792) into ParameterizedType: MutableNetwork<N,E>(797) at 0", "Insert SimpleType: N(794) into ParameterizedType: MutableNetwork<N,E>(797) at 1", "Move SimpleType: E(783) into ParameterizedType: MutableNetwork<N,E>(797) at 2", "Update ParameterizedType: Graph<N,E>(510) to Network<N,E>", "Insert VariableDeclarationStatement(868) into Block(918) at 3", "Insert TagElement(927) into Javadoc(928) at 0", "Insert SimpleName: N(931) into TypeParameter(932) at 0", "Insert ParameterizedType: Graph<N>(939) into SingleVariableDeclaration(941) at 0", "Insert SimpleName: original(940) into SingleVariableDeclaration(941) at 1", "Insert ParameterizedType: MutableNetwork<N,?>(947) into SingleVariableDeclaration(949) at 0", "Insert SimpleName: copy(948) into SingleVariableDeclaration(949) at 1", "Insert ExpressionStatement(957) into Block(958) at 0", "Insert TagElement(970) into Javadoc(971) at 0", "Insert SimpleName: N(974) into TypeParameter(975) at 0", "Insert ParameterizedType: Graph<N>(984) into SingleVariableDeclaration(986) at 0", "Insert SimpleName: original(985) into SingleVariableDeclaration(986) at 1", "Insert ParameterizedType: MutableNetwork<N,?>(992) into SingleVariableDeclaration(994) at 0", "Insert SimpleName: copy(993) into SingleVariableDeclaration(994) at 1", "Insert ParameterizedType: Predicate<? super N>(1000) into SingleVariableDeclaration(1002) at 0", "Insert SimpleName: nodePredicate(1001) into SingleVariableDeclaration(1002) at 1", "Insert ExpressionStatement(1007) into Block(1036) at 0", "Insert ExpressionStatement(1012) into Block(1036) at 1", "Insert ExpressionStatement(1017) into Block(1036) at 2", "Insert EnhancedForStatement(1035) into Block(1036) at 3", "Insert ParameterizedType: Network<N,E>(1062) into SingleVariableDeclaration(1064) at 0", "Insert SimpleName: original(1063) into SingleVariableDeclaration(1064) at 1", "Update ParameterizedType: Graph<N,E>(784) to MutableNetwork<N,E>", "Update ParameterizedType: Graph<N,E>(824) to Network<N,E>", "Update ParameterizedType: Graph<N,E>(833) to MutableNetwork<N,E>", "Insert TagElement(1195) into Javadoc(1203) at 0", "Insert TagElement: @see(1202) into Javadoc(1203) at 1", "Move MarkerAnnotation(913) into SingleVariableDeclaration(1215) at 0", "Insert ParameterizedType: Graph<?>(1213) into SingleVariableDeclaration(1215) at 1", "Insert SimpleName: graph1(1214) into SingleVariableDeclaration(1215) at 2", "Move MarkerAnnotation(904) into SingleVariableDeclaration(1223) at 0", "Insert ParameterizedType: Graph<?>(1221) into SingleVariableDeclaration(1223) at 1", "Insert SimpleName: graph2(1222) into SingleVariableDeclaration(1223) at 2", "Insert IfStatement(1251) into Block(1353) at 0", "Insert IfStatement(1264) into Block(1353) at 1", "Insert IfStatement(1271) into Block(1353) at 2", "Insert IfStatement(1282) into Block(1353) at 3", "Insert IfStatement(1295) into Block(1353) at 4", "Insert EnhancedForStatement(1350) into Block(1353) at 5", "Insert ReturnStatement(1352) into Block(1353) at 6", "Insert MarkerAnnotation(1376) into SingleVariableDeclaration(1383) at 0", "Update ParameterizedType: Graph<?,?>(909) to Network<?,?>", "Insert MarkerAnnotation(1385) into SingleVariableDeclaration(1392) at 0", "Update ParameterizedType: Graph<?,?>(918) to Network<?,?>", "Insert ParameterizedType: Graph<?>(1515) into SingleVariableDeclaration(1517) at 0", "Insert SimpleName: graph(1516) into SingleVariableDeclaration(1517) at 1", "Insert ReturnStatement(1538) into Block(1539) at 0", "Insert TagElement(1545) into Javadoc(1550) at 0", "Insert TagElement: @see(1549) into Javadoc(1550) at 1", "Update ParameterizedType: Graph<?,?>(1044) to Network<?,?>", "Insert TagElement(1577) into Javadoc(1578) at 0", "Insert SimpleName: String(1581) into SimpleType: String(1582) at 0", "Insert ParameterizedType: Graph<?>(1587) into SingleVariableDeclaration(1589) at 0", "Insert SimpleName: graph(1588) into SingleVariableDeclaration(1589) at 1", "Insert IfStatement(1605) into Block(1620) at 0", "Insert ReturnStatement(1619) into Block(1620) at 1", "Update ParameterizedType: Graph<?,?>(1073) to Network<?,?>", "Update ParameterizedType: Graph<?,E>(1139) to Network<?,E>", "Insert TagElement(1749) into Javadoc(1750) at 0", "Insert SimpleName: N(1753) into TypeParameter(1754) at 0", "Insert SimpleName: String(1755) into SimpleType: String(1756) at 0", "Insert Modifier: final(1758) into SingleVariableDeclaration(1765) at 0", "Insert ParameterizedType: Graph<N>(1763) into SingleVariableDeclaration(1765) at 1", "Insert SimpleName: graph(1764) into SingleVariableDeclaration(1765) at 2", "Insert ExpressionStatement(1770) into Block(1831) at 0", "Insert VariableDeclarationStatement(1784) into Block(1831) at 1", "Insert EnhancedForStatement(1818) into Block(1831) at 2", "Insert ReturnStatement(1830) into Block(1831) at 3", "Update ParameterizedType: Graph<N,E>(1209) to Network<N,E>", "Insert SimpleName: N(1915) into TypeParameter(1916) at 0", "Insert SimpleType: Map(1918) into ParameterizedType: Map<N,Set<N>>(1926) at 0", "Insert SimpleType: N(1920) into ParameterizedType: Map<N,Set<N>>(1926) at 1", "Insert ParameterizedType: Set<N>(1925) into ParameterizedType: Map<N,Set<N>>(1926) at 2", "Insert Modifier: final(1928) into SingleVariableDeclaration(1935) at 0", "Insert ParameterizedType: Graph<N>(1933) into SingleVariableDeclaration(1935) at 1", "Insert SimpleName: graph(1934) into SingleVariableDeclaration(1935) at 2", "Insert ExpressionStatement(1940) into Block(1980) at 0", "Insert ReturnStatement(1979) into Block(1980) at 1", "Update ParameterizedType: Graph<?,?>(1292) to Network<?,?>", "Insert TagElement(2094) into Javadoc(2095) at 0", "Insert SimpleName: String(2098) into SimpleType: String(2099) at 0", "Insert ParameterizedType: Graph<?>(2104) into SingleVariableDeclaration(2106) at 0", "Insert SimpleName: graph(2105) into SingleVariableDeclaration(2106) at 1", "Insert IfStatement(2122) into Block(2134) at 0", "Insert ReturnStatement(2133) into Block(2134) at 1", "Update ParameterizedType: Graph<?,?>(1381) to Network<?,?>", "Update SimpleType: Graph(82) to Network", "Update SimpleType: Graph(206) to Network", "Update SimpleType: Graph(324) to MutableNetwork", "Insert TextElement: Creates a mutable copy of (470) into TagElement(474) at 0", "Insert TagElement: @code(472) into TagElement(474) at 1", "Insert TextElement: , using the same nodes.(473) into TagElement(474) at 2", "Insert SimpleName: MutableGraph(480) into SimpleType: MutableGraph(481) at 0", "Insert MethodInvocation(498) into ReturnStatement(499) at 0", "Insert TextElement: Creates a mutable copy of (502) into TagElement(512) at 0", "Insert TagElement: @code(504) into TagElement(512) at 1", "Insert TextElement: , using all of its elements that satisfy(505) into TagElement(512) at 2", "Insert TagElement: @code(507) into TagElement(512) at 3", "Insert TextElement:  and (508) into TagElement(512) at 4", "Insert TagElement: @code(510) into TagElement(512) at 5", "Insert TextElement: .(511) into TagElement(512) at 6", "Update SimpleName: Graph(449) to MutableGraph", "Move SimpleType: Graph(505) into ParameterizedType: Graph<N>(528) at 0", "Move SimpleType: N(452) into ParameterizedType: Graph<N>(528) at 1", "Update SimpleType: Graph(458) to Predicate", "Insert WildcardType: ? super N(535) into ParameterizedType: Predicate<? super N>(536) at 1", "Insert MethodInvocation(542) into ExpressionStatement(543) at 0", "Insert MethodInvocation(547) into ExpressionStatement(548) at 0", "Update ParameterizedType: Graph<N,E>(550) to MutableGraph<N>", "Insert SingleVariableDeclaration(573) into EnhancedForStatement(611) at 0", "Insert MethodInvocation(576) into EnhancedForStatement(611) at 1", "Insert Block(610) into EnhancedForStatement(611) at 2", "Insert SimpleName: copy(612) into ReturnStatement(613) at 0", "Move SimpleType: N(654) into ParameterizedType: Graph<N>(635) at 1", "Update SimpleType: Graph(652) to MutableGraph", "Move SimpleType: N(645) into ParameterizedType: MutableGraph<N>(642) at 1", "Move SimpleType: N(702) into ParameterizedType: Graph<N>(679) at 1", "Update SimpleType: Graph(700) to MutableGraph", "Move SimpleType: N(693) into ParameterizedType: MutableGraph<N>(686) at 1", "Insert SimpleName: MutableNetwork(744) into SimpleType: MutableNetwork(745) at 0", "Insert SimpleName: N(746) into SimpleType: N(747) at 0", "Update SimpleType: Graph(770) to Network", "Insert SimpleName: MutableNetwork(791) into SimpleType: MutableNetwork(792) at 0", "Insert SimpleName: N(793) into SimpleType: N(794) at 0", "Insert SimpleType: Network(800) into ParameterizedType: Network<N,E>(805) at 0", "Insert SimpleType: N(802) into ParameterizedType: Network<N,E>(805) at 1", "Insert ParameterizedType: MutableNetwork<N,E>(845) into VariableDeclarationStatement(868) at 0", "Insert VariableDeclarationFragment(867) into VariableDeclarationStatement(868) at 1", "Insert TextElement: Copies all nodes from (920) into TagElement(927) at 0", "Insert TagElement: @code(922) into TagElement(927) at 1", "Insert TextElement:  into (923) into TagElement(927) at 2", "Insert TagElement: @code(925) into TagElement(927) at 3", "Insert TextElement: .(926) into TagElement(927) at 4", "Move SimpleType: Graph(915) into ParameterizedType: Graph<N>(939) at 0", "Insert SimpleType: N(938) into ParameterizedType: Graph<N>(939) at 1", "Insert SimpleType: MutableNetwork(943) into ParameterizedType: MutableNetwork<N,?>(947) at 0", "Insert SimpleType: N(945) into ParameterizedType: MutableNetwork<N,?>(947) at 1", "Insert WildcardType: ?(946) into ParameterizedType: MutableNetwork<N,?>(947) at 2", "Insert MethodInvocation(956) into ExpressionStatement(957) at 0", "Insert TextElement: Copies all nodes from (960) into TagElement(970) at 0", "Insert TagElement: @code(962) into TagElement(970) at 1", "Insert TextElement:  into (963) into TagElement(970) at 2", "Insert TagElement: @code(965) into TagElement(970) at 3", "Insert TextElement:  that satisfy (966) into TagElement(970) at 4", "Insert TagElement: @code(968) into TagElement(970) at 5", "Insert TextElement: .(969) into TagElement(970) at 6", "Move SimpleType: Graph(1041) into ParameterizedType: Graph<N>(984) at 0", "Insert SimpleType: N(983) into ParameterizedType: Graph<N>(984) at 1", "Insert SimpleType: MutableNetwork(988) into ParameterizedType: MutableNetwork<N,?>(992) at 0", "Insert SimpleType: N(990) into ParameterizedType: MutableNetwork<N,?>(992) at 1", "Insert WildcardType: ?(991) into ParameterizedType: MutableNetwork<N,?>(992) at 2", "Insert SimpleType: Predicate(996) into ParameterizedType: Predicate<? super N>(1000) at 0", "Insert WildcardType: ? super N(999) into ParameterizedType: Predicate<? super N>(1000) at 1", "Insert MethodInvocation(1006) into ExpressionStatement(1007) at 0", "Insert MethodInvocation(1011) into ExpressionStatement(1012) at 0", "Insert MethodInvocation(1016) into ExpressionStatement(1017) at 0", "Insert SingleVariableDeclaration(1021) into EnhancedForStatement(1035) at 0", "Insert MethodInvocation(1028) into EnhancedForStatement(1035) at 1", "Insert Block(1034) into EnhancedForStatement(1035) at 2", "Insert SimpleType: Network(1057) into ParameterizedType: Network<N,E>(1062) at 0", "Insert SimpleType: N(1059) into ParameterizedType: Network<N,E>(1062) at 1", "Move SimpleType: E(695) into ParameterizedType: Network<N,E>(1062) at 2", "Update SimpleType: Graph(779) to MutableNetwork", "Move SimpleType: E(656) into ParameterizedType: MutableNetwork<N,E>(1071) at 2", "Update SimpleType: Graph(819) to Network", "Insert SimpleType: MutableNetwork(1115) into ParameterizedType: MutableNetwork<N,E>(1120) at 0", "Move SimpleType: E(1138) into ParameterizedType: MutableNetwork<N,E>(1120) at 3", "Insert TextElement: Returns true iff (1170) into TagElement(1195) at 0", "Insert TagElement: @code(1172) into TagElement(1195) at 1", "Insert TextElement:  and (1173) into TagElement(1195) at 2", "Insert TagElement: @code(1175) into TagElement(1195) at 3", "Insert TextElement:  have the same node connections.(1176) into TagElement(1195) at 4", "Insert TextElement: <p>Note: (1177) into TagElement(1195) at 5", "Insert TagElement: @link(1179) into TagElement(1195) at 6", "Insert TextElement:  instances can only be equal to other (1180) into TagElement(1195) at 7", "Insert TagElement: @link(1182) into TagElement(1195) at 8", "Insert TextElement:  instances.(1183) into TagElement(1195) at 9", "Insert TextElement: In particular, (1184) into TagElement(1195) at 10", "Insert TagElement: @link(1186) into TagElement(1195) at 11", "Insert TextElement: s that are not also (1187) into TagElement(1195) at 12", "Insert TagElement: @link(1189) into TagElement(1195) at 13", "Insert TextElement: s cannot be equal(1190) into TagElement(1195) at 14", "Insert TextElement: to (1191) into TagElement(1195) at 15", "Insert TagElement: @link(1193) into TagElement(1195) at 16", "Insert TextElement: s.(1194) into TagElement(1195) at 17", "Insert MethodRef(1201) into TagElement: @see(1202) at 0", "Move SimpleType: Graph(1204) into ParameterizedType: Graph<?>(1213) at 0", "Insert WildcardType: ?(1212) into ParameterizedType: Graph<?>(1213) at 1", "Move SimpleType: Graph(1289) into ParameterizedType: Graph<?>(1221) at 0", "Insert WildcardType: ?(1220) into ParameterizedType: Graph<?>(1221) at 1", "Insert InfixExpression: &&(1232) into IfStatement(1251) at 0", "Insert Block(1250) into IfStatement(1251) at 1", "Insert InfixExpression: ||(1260) into IfStatement(1264) at 0", "Insert Block(1263) into IfStatement(1264) at 1", "Insert InfixExpression: ==(1267) into IfStatement(1271) at 0", "Insert Block(1270) into IfStatement(1271) at 1", "Insert InfixExpression: ||(1278) into IfStatement(1282) at 0", "Insert Block(1281) into IfStatement(1282) at 1", "Insert PrefixExpression: !(1291) into IfStatement(1295) at 0", "Insert Block(1294) into IfStatement(1295) at 1", "Insert SingleVariableDeclaration(1299) into EnhancedForStatement(1350) at 0", "Insert MethodInvocation(1302) into EnhancedForStatement(1350) at 1", "Insert Block(1349) into EnhancedForStatement(1350) at 2", "Insert BooleanLiteral: true(1351) into ReturnStatement(1352) at 0", "Insert SimpleName: Nullable(1375) into MarkerAnnotation(1376) at 0", "Insert SimpleType: Network(1378) into ParameterizedType: Network<?,?>(1381) at 0", "Insert SimpleName: Nullable(1384) into MarkerAnnotation(1385) at 0", "Insert SimpleType: Network(1387) into ParameterizedType: Network<?,?>(1390) at 0", "Move SimpleType: Graph(1378) into ParameterizedType: Graph<?>(1515) at 0", "Insert WildcardType: ?(1514) into ParameterizedType: Graph<?>(1515) at 1", "Insert ConditionalExpression(1537) into ReturnStatement(1538) at 0", "Insert TextElement: Returns the hash code of (1541) into TagElement(1545) at 0", "Insert TagElement: @code(1543) into TagElement(1545) at 1", "Insert TextElement: .(1544) into TagElement(1545) at 2", "Insert MethodRef(1548) into TagElement: @see(1549) at 0", "Insert SimpleType: Network(1556) into ParameterizedType: Network<?,?>(1559) at 0", "Insert TextElement: Returns a string representation of (1570) into TagElement(1577) at 0", "Insert TagElement: @code(1572) into TagElement(1577) at 1", "Insert TextElement: . Encodes edge direction if (1573) into TagElement(1577) at 2", "Insert TagElement: @code(1575) into TagElement(1577) at 3", "Insert TextElement: is directed.(1576) into TagElement(1577) at 4", "Move SimpleType: Graph(1135) into ParameterizedType: Graph<?>(1587) at 0", "Insert WildcardType: ?(1586) into ParameterizedType: Graph<?>(1587) at 1", "Insert InstanceofExpression(1593) into IfStatement(1605) at 0", "Insert Block(1604) into IfStatement(1605) at 1", "Insert MethodInvocation(1618) into ReturnStatement(1619) at 0", "Insert SimpleType: Network(1637) into ParameterizedType: Network<?,?>(1640) at 0", "Insert SimpleType: Network(1702) into ParameterizedType: Network<?,E>(1706) at 0", "Move SimpleType: E(647) into ParameterizedType: Network<?,E>(1706) at 2", "Insert TextElement: Returns a String of the adjacent node relationships for (1745) into TagElement(1749) at 0", "Insert TagElement: @code(1747) into TagElement(1749) at 1", "Insert TextElement: .(1748) into TagElement(1749) at 2", "Move SimpleType: Graph(1070) into ParameterizedType: Graph<N>(1763) at 0", "Insert SimpleType: N(1762) into ParameterizedType: Graph<N>(1763) at 1", "Insert MethodInvocation(1769) into ExpressionStatement(1770) at 0", "Insert ParameterizedType: List<String>(1775) into VariableDeclarationStatement(1784) at 0", "Insert VariableDeclarationFragment(1783) into VariableDeclarationStatement(1784) at 1", "Insert SingleVariableDeclaration(1788) into EnhancedForStatement(1818) at 0", "Insert MethodInvocation(1791) into EnhancedForStatement(1818) at 1", "Insert Block(1817) into EnhancedForStatement(1818) at 2", "Insert MethodInvocation(1829) into ReturnStatement(1830) at 0", "Update SimpleType: N(1206) to Network", "Update SimpleType: E(1208) to N", "Move SimpleType: E(549) into ParameterizedType: Network<N,E>(1864) at 2", "Insert SimpleName: Map(1917) into SimpleType: Map(1918) at 0", "Insert SimpleName: N(1919) into SimpleType: N(1920) at 0", "Insert SimpleType: Set(1922) into ParameterizedType: Set<N>(1925) at 0", "Insert SimpleType: N(1924) into ParameterizedType: Set<N>(1925) at 1", "Move SimpleType: Graph(906) into ParameterizedType: Graph<N>(1933) at 0", "Insert SimpleType: N(1932) into ParameterizedType: Graph<N>(1933) at 1", "Insert MethodInvocation(1939) into ExpressionStatement(1940) at 0", "Insert MethodInvocation(1978) into ReturnStatement(1979) at 0", "Insert SimpleType: Network(2013) into ParameterizedType: Network<?,?>(2016) at 0", "Insert TextElement: Returns a string representation of the properties of (2090) into TagElement(2094) at 0", "Insert TagElement: @code(2092) into TagElement(2094) at 1", "Insert TextElement: .(2093) into TagElement(2094) at 2", "Move SimpleType: Graph(828) into ParameterizedType: Graph<?>(2104) at 0", "Insert WildcardType: ?(2103) into ParameterizedType: Graph<?>(2104) at 1", "Insert InstanceofExpression(2110) into IfStatement(2122) at 0", "Insert Block(2121) into IfStatement(2122) at 1", "Insert MethodInvocation(2132) into ReturnStatement(2133) at 0", "Insert SimpleType: Network(2148) into ParameterizedType: Network<?,?>(2151) at 0", "Update SimpleName: Graph(81) to Network", "Update SimpleName: Graph(205) to Network", "Update SimpleName: Graph(323) to MutableNetwork", "Insert TextElement:  graph(471) into TagElement: @code(472) at 0", "Insert SimpleName: copyOf(493) into MethodInvocation(498) at 0", "Insert SimpleName: graph(494) into MethodInvocation(498) at 1", "Insert MethodInvocation(497) into MethodInvocation(498) at 2", "Insert TextElement:  graph(503) into TagElement: @code(504) at 0", "Insert TextElement:  nodePredicate(506) into TagElement: @code(507) at 0", "Insert TextElement:  edgePredicate(509) into TagElement: @code(510) at 0", "Update SimpleName: Graph(457) to Predicate", "Insert SimpleType: N(534) into WildcardType: ? super N(535) at 0", "Insert SimpleName: checkNotNull(539) into MethodInvocation(542) at 0", "Insert SimpleName: graph(540) into MethodInvocation(542) at 1", "Insert StringLiteral: \"graph\"(541) into MethodInvocation(542) at 2", "Insert SimpleName: checkNotNull(544) into MethodInvocation(547) at 0", "Insert SimpleName: nodePredicate(545) into MethodInvocation(547) at 1", "Insert StringLiteral: \"nodePredicate\"(546) into MethodInvocation(547) at 2", "Update SimpleType: Graph(545) to MutableGraph", "Move MethodInvocation(569) into VariableDeclarationFragment(568) at 1", "Insert SimpleType: N(571) into SingleVariableDeclaration(573) at 0", "Insert SimpleName: node(572) into SingleVariableDeclaration(573) at 1", "Insert SimpleName: graph(574) into MethodInvocation(576) at 0", "Insert SimpleName: nodes(575) into MethodInvocation(576) at 1", "Insert IfStatement(609) into Block(610) at 0", "Update SimpleName: Graph(651) to MutableGraph", "Update SimpleName: Graph(699) to MutableGraph", "Update SimpleName: Graph(769) to Network", "Insert SimpleName: Network(799) into SimpleType: Network(800) at 0", "Insert SimpleName: N(801) into SimpleType: N(802) at 0", "Insert SimpleType: MutableNetwork(840) into ParameterizedType: MutableNetwork<N,E>(845) at 0", "Insert SimpleType: N(842) into ParameterizedType: MutableNetwork<N,E>(845) at 1", "Insert SimpleType: E(844) into ParameterizedType: MutableNetwork<N,E>(845) at 2", "Insert SimpleName: copy(846) into VariableDeclarationFragment(867) at 0", "Insert MethodInvocation(866) into VariableDeclarationFragment(867) at 1", "Insert TextElement:  original(921) into TagElement: @code(922) at 0", "Insert TextElement:  copy(924) into TagElement: @code(925) at 0", "Insert SimpleName: N(937) into SimpleType: N(938) at 0", "Insert SimpleName: MutableNetwork(942) into SimpleType: MutableNetwork(943) at 0", "Insert SimpleName: N(944) into SimpleType: N(945) at 0", "Insert SimpleName: mergeNodesFrom(950) into MethodInvocation(956) at 0", "Insert SimpleName: original(951) into MethodInvocation(956) at 1", "Insert SimpleName: copy(952) into MethodInvocation(956) at 2", "Insert MethodInvocation(955) into MethodInvocation(956) at 3", "Insert TextElement:  original(961) into TagElement: @code(962) at 0", "Insert TextElement:  copy(964) into TagElement: @code(965) at 0", "Insert TextElement:  nodePredicate(967) into TagElement: @code(968) at 0", "Insert SimpleName: N(982) into SimpleType: N(983) at 0", "Insert SimpleName: MutableNetwork(987) into SimpleType: MutableNetwork(988) at 0", "Insert SimpleName: N(989) into SimpleType: N(990) at 0", "Insert SimpleName: Predicate(995) into SimpleType: Predicate(996) at 0", "Insert SimpleType: N(998) into WildcardType: ? super N(999) at 0", "Insert SimpleName: checkNotNull(1003) into MethodInvocation(1006) at 0", "Insert SimpleName: original(1004) into MethodInvocation(1006) at 1", "Insert StringLiteral: \"original\"(1005) into MethodInvocation(1006) at 2", "Insert SimpleName: checkNotNull(1008) into MethodInvocation(1011) at 0", "Insert SimpleName: copy(1009) into MethodInvocation(1011) at 1", "Insert StringLiteral: \"copy\"(1010) into MethodInvocation(1011) at 2", "Insert SimpleName: checkNotNull(1013) into MethodInvocation(1016) at 0", "Insert SimpleName: nodePredicate(1014) into MethodInvocation(1016) at 1", "Insert StringLiteral: \"nodePredicate\"(1015) into MethodInvocation(1016) at 2", "Insert SimpleType: N(1019) into SingleVariableDeclaration(1021) at 0", "Insert SimpleName: node(1020) into SingleVariableDeclaration(1021) at 1", "Insert SimpleName: Sets(1022) into MethodInvocation(1028) at 0", "Insert SimpleName: filter(1023) into MethodInvocation(1028) at 1", "Insert MethodInvocation(1026) into MethodInvocation(1028) at 2", "Insert SimpleName: nodePredicate(1027) into MethodInvocation(1028) at 3", "Insert ExpressionStatement(1033) into Block(1034) at 0", "Insert SimpleName: Network(1056) into SimpleType: Network(1057) at 0", "Insert SimpleName: N(1058) into SimpleType: N(1059) at 0", "Update SimpleName: Graph(778) to MutableNetwork", "Update SimpleName: Graph(818) to Network", "Insert SimpleName: MutableNetwork(1114) into SimpleType: MutableNetwork(1115) at 0", "Insert TextElement:  graph1(1171) into TagElement: @code(1172) at 0", "Insert TextElement:  graph2(1174) into TagElement: @code(1175) at 0", "Insert SimpleName: Network(1178) into TagElement: @link(1179) at 0", "Insert SimpleName: Network(1181) into TagElement: @link(1182) at 0", "Insert SimpleName: Graph(1185) into TagElement: @link(1186) at 0", "Insert SimpleName: Network(1188) into TagElement: @link(1189) at 0", "Insert SimpleName: Network(1192) into TagElement: @link(1193) at 0", "Insert SimpleName: Network(1196) into MethodRef(1201) at 0", "Insert SimpleName: equals(1197) into MethodRef(1201) at 1", "Move MethodRefParameter(895) into MethodRef(1201) at 2", "Insert InstanceofExpression(1227) into InfixExpression: &&(1232) at 0", "Insert InstanceofExpression(1231) into InfixExpression: &&(1232) at 1", "Insert ReturnStatement(1249) into Block(1250) at 0", "Insert InstanceofExpression(1255) into InfixExpression: ||(1260) at 0", "Insert InstanceofExpression(1259) into InfixExpression: ||(1260) at 1", "Insert ReturnStatement(1262) into Block(1263) at 0", "Insert SimpleName: graph1(1265) into InfixExpression: ==(1267) at 0", "Insert SimpleName: graph2(1266) into InfixExpression: ==(1267) at 1", "Insert ReturnStatement(1269) into Block(1270) at 0", "Insert InfixExpression: ==(1274) into InfixExpression: ||(1278) at 0", "Insert InfixExpression: ==(1277) into InfixExpression: ||(1278) at 1", "Insert ReturnStatement(1280) into Block(1281) at 0", "Insert MethodInvocation(1290) into PrefixExpression: !(1291) at 0", "Insert ReturnStatement(1293) into Block(1294) at 0", "Insert SimpleType: Object(1297) into SingleVariableDeclaration(1299) at 0", "Insert SimpleName: node(1298) into SingleVariableDeclaration(1299) at 1", "Insert SimpleName: graph1(1300) into MethodInvocation(1302) at 0", "Insert SimpleName: nodes(1301) into MethodInvocation(1302) at 1", "Insert IfStatement(1317) into Block(1349) at 0", "Insert VariableDeclarationStatement(1330) into Block(1349) at 1", "Insert IfStatement(1348) into Block(1349) at 2", "Update SimpleName: Graph(891) to Network", "Insert MethodRefParameter(1367) into MethodRef(1368) at 2", "Insert SimpleName: Network(1377) into SimpleType: Network(1378) at 0", "Insert SimpleName: Network(1386) into SimpleType: Network(1387) at 0", "Insert ParenthesizedExpression(1522) into ConditionalExpression(1537) at 0", "Insert MethodInvocation(1531) into ConditionalExpression(1537) at 1", "Insert MethodInvocation(1536) into ConditionalExpression(1537) at 2", "Insert TextElement:  graph(1542) into TagElement: @code(1543) at 0", "Insert SimpleName: Network(1546) into MethodRef(1548) at 0", "Insert SimpleName: hashCode(1547) into MethodRef(1548) at 1", "Insert SimpleName: Network(1555) into SimpleType: Network(1556) at 0", "Insert TextElement:  graph(1571) into TagElement: @code(1572) at 0", "Insert TextElement:  graph(1574) into TagElement: @code(1575) at 0", "Insert SimpleName: graph(1590) into InstanceofExpression(1593) at 0", "Insert SimpleType: Network(1592) into InstanceofExpression(1593) at 1", "Insert ReturnStatement(1603) into Block(1604) at 0", "Insert SimpleName: String(1606) into MethodInvocation(1618) at 0", "Insert SimpleName: format(1607) into MethodInvocation(1618) at 1", "Insert SimpleName: GRAPH_FORMAT(1608) into MethodInvocation(1618) at 2", "Insert MethodInvocation(1611) into MethodInvocation(1618) at 3", "Insert MethodInvocation(1614) into MethodInvocation(1618) at 4", "Insert MethodInvocation(1617) into MethodInvocation(1618) at 5", "Insert SimpleName: Network(1636) into SimpleType: Network(1637) at 0", "Insert SimpleName: GRAPH_FORMAT(1645) into MethodInvocation(1661) at 2", "Insert SimpleName: Network(1701) into SimpleType: Network(1702) at 0", "Insert TextElement:  graph(1746) into TagElement: @code(1747) at 0", "Insert SimpleName: N(1761) into SimpleType: N(1762) at 0", "Insert SimpleName: checkNotNull(1766) into MethodInvocation(1769) at 0", "Insert SimpleName: graph(1767) into MethodInvocation(1769) at 1", "Insert StringLiteral: \"graph\"(1768) into MethodInvocation(1769) at 2", "Insert SimpleType: List(1772) into ParameterizedType: List<String>(1775) at 0", "Insert SimpleType: String(1774) into ParameterizedType: List<String>(1775) at 1", "Insert SimpleName: adjacencies(1776) into VariableDeclarationFragment(1783) at 0", "Insert ClassInstanceCreation(1782) into VariableDeclarationFragment(1783) at 1", "Insert SimpleType: N(1786) into SingleVariableDeclaration(1788) at 0", "Insert SimpleName: node(1787) into SingleVariableDeclaration(1788) at 1", "Insert SimpleName: graph(1789) into MethodInvocation(1791) at 0", "Insert SimpleName: nodes(1790) into MethodInvocation(1791) at 1", "Insert EnhancedForStatement(1816) into Block(1817) at 0", "Insert SimpleName: String(1819) into MethodInvocation(1829) at 0", "Insert SimpleName: format(1820) into MethodInvocation(1829) at 1", "Insert StringLiteral: \"{%s}\"(1821) into MethodInvocation(1829) at 2", "Insert MethodInvocation(1828) into MethodInvocation(1829) at 3", "Update SimpleName: N(1205) to Network", "Update SimpleName: E(1207) to N", "Insert SimpleName: Set(1921) into SimpleType: Set(1922) at 0", "Insert SimpleName: N(1923) into SimpleType: N(1924) at 0", "Insert SimpleName: N(1931) into SimpleType: N(1932) at 0", "Insert SimpleName: checkNotNull(1936) into MethodInvocation(1939) at 0", "Insert SimpleName: graph(1937) into MethodInvocation(1939) at 1", "Insert StringLiteral: \"graph\"(1938) into MethodInvocation(1939) at 2", "Insert SimpleName: Maps(1941) into MethodInvocation(1978) at 0", "Insert SimpleName: asMap(1942) into MethodInvocation(1978) at 1", "Insert MethodInvocation(1945) into MethodInvocation(1978) at 2", "Insert ClassInstanceCreation(1977) into MethodInvocation(1978) at 3", "Insert SimpleName: Network(2012) into SimpleType: Network(2013) at 0", "Insert TextElement:  graph(2091) into TagElement: @code(2092) at 0", "Insert SimpleName: graph(2107) into InstanceofExpression(2110) at 0", "Insert SimpleType: Network(2109) into InstanceofExpression(2110) at 1", "Insert ReturnStatement(2120) into Block(2121) at 0", "Insert SimpleName: String(2123) into MethodInvocation(2132) at 0", "Insert SimpleName: format(2124) into MethodInvocation(2132) at 1", "Insert StringLiteral: \"isDirected: %s, allowsSelfLoops: %s\"(2125) into MethodInvocation(2132) at 2", "Insert MethodInvocation(2128) into MethodInvocation(2132) at 3", "Insert MethodInvocation(2131) into MethodInvocation(2132) at 4", "Insert SimpleName: Network(2147) into SimpleType: Network(2148) at 0", "Insert SimpleName: Predicates(495) into MethodInvocation(497) at 0", "Insert SimpleName: alwaysTrue(496) into MethodInvocation(497) at 1", "Update SimpleName: E(461) to N", "Move SimpleName: E(461) into SimpleType: N(534) at 0", "Update SimpleName: Graph(544) to MutableGraph", "Update SimpleName: expectedEdgeCount(563) to build", "Insert SimpleName: N(570) into SimpleType: N(571) at 0", "Insert MethodInvocation(580) into IfStatement(609) at 0", "Insert Block(608) into IfStatement(609) at 1", "Insert SimpleName: MutableNetwork(839) into SimpleType: MutableNetwork(840) at 0", "Insert SimpleName: N(841) into SimpleType: N(842) at 0", "Insert SimpleName: E(843) into SimpleType: E(844) at 0", "Insert MethodInvocation(864) into MethodInvocation(866) at 0", "Insert SimpleName: build(865) into MethodInvocation(866) at 1", "Insert SimpleName: Predicates(953) into MethodInvocation(955) at 0", "Insert SimpleName: alwaysTrue(954) into MethodInvocation(955) at 1", "Insert SimpleName: N(997) into SimpleType: N(998) at 0", "Insert SimpleName: N(1018) into SimpleType: N(1019) at 0", "Insert SimpleName: original(1024) into MethodInvocation(1026) at 0", "Insert SimpleName: nodes(1025) into MethodInvocation(1026) at 1", "Insert MethodInvocation(1032) into ExpressionStatement(1033) at 0", "Insert SimpleName: graph1(1224) into InstanceofExpression(1227) at 0", "Insert SimpleType: Network(1226) into InstanceofExpression(1227) at 1", "Insert SimpleName: graph2(1228) into InstanceofExpression(1231) at 0", "Insert SimpleType: Network(1230) into InstanceofExpression(1231) at 1", "Insert MethodInvocation(1248) into ReturnStatement(1249) at 0", "Insert SimpleName: graph1(1252) into InstanceofExpression(1255) at 0", "Insert SimpleType: Network(1254) into InstanceofExpression(1255) at 1", "Insert SimpleName: graph2(1256) into InstanceofExpression(1259) at 0", "Insert SimpleType: Network(1258) into InstanceofExpression(1259) at 1", "Insert BooleanLiteral: false(1261) into ReturnStatement(1262) at 0", "Insert BooleanLiteral: true(1268) into ReturnStatement(1269) at 0", "Insert SimpleName: graph1(1272) into InfixExpression: ==(1274) at 0", "Insert NullLiteral(1273) into InfixExpression: ==(1274) at 1", "Insert SimpleName: graph2(1275) into InfixExpression: ==(1277) at 0", "Insert NullLiteral(1276) into InfixExpression: ==(1277) at 1", "Insert BooleanLiteral: false(1279) into ReturnStatement(1280) at 0", "Insert MethodInvocation(1285) into MethodInvocation(1290) at 0", "Insert SimpleName: equals(1286) into MethodInvocation(1290) at 1", "Insert MethodInvocation(1289) into MethodInvocation(1290) at 2", "Insert BooleanLiteral: false(1292) into ReturnStatement(1293) at 0", "Insert SimpleName: Object(1296) into SimpleType: Object(1297) at 0", "Insert PrefixExpression: !(1313) into IfStatement(1317) at 0", "Insert Block(1316) into IfStatement(1317) at 1", "Insert PrimitiveType: boolean(1318) into VariableDeclarationStatement(1330) at 0", "Insert VariableDeclarationFragment(1329) into VariableDeclarationStatement(1330) at 1", "Insert InfixExpression: &&(1344) into IfStatement(1348) at 0", "Insert Block(1347) into IfStatement(1348) at 1", "Insert SimpleType: Object(1366) into MethodRefParameter(1367) at 0", "Insert InstanceofExpression(1521) into ParenthesizedExpression(1522) at 0", "Insert SimpleName: hashCode(1523) into MethodInvocation(1531) at 0", "Insert CastExpression(1530) into MethodInvocation(1531) at 1", "Insert MethodInvocation(1534) into MethodInvocation(1536) at 0", "Insert SimpleName: hashCode(1535) into MethodInvocation(1536) at 1", "Insert SimpleName: Network(1591) into SimpleType: Network(1592) at 0", "Insert MethodInvocation(1602) into ReturnStatement(1603) at 0", "Insert SimpleName: getPropertiesString(1609) into MethodInvocation(1611) at 0", "Insert SimpleName: graph(1610) into MethodInvocation(1611) at 1", "Insert SimpleName: graph(1612) into MethodInvocation(1614) at 0", "Insert SimpleName: nodes(1613) into MethodInvocation(1614) at 1", "Insert SimpleName: adjacentNodesString(1615) into MethodInvocation(1617) at 0", "Insert SimpleName: graph(1616) into MethodInvocation(1617) at 1", "Insert SimpleName: List(1771) into SimpleType: List(1772) at 0", "Insert SimpleName: String(1773) into SimpleType: String(1774) at 0", "Insert ParameterizedType: ArrayList<String>(1781) into ClassInstanceCreation(1782) at 0", "Insert SimpleName: N(1785) into SimpleType: N(1786) at 0", "Insert SingleVariableDeclaration(1795) into EnhancedForStatement(1816) at 0", "Insert MethodInvocation(1799) into EnhancedForStatement(1816) at 1", "Insert Block(1815) into EnhancedForStatement(1816) at 2", "Insert MethodInvocation(1825) into MethodInvocation(1828) at 0", "Insert SimpleName: join(1826) into MethodInvocation(1828) at 1", "Insert SimpleName: adjacencies(1827) into MethodInvocation(1828) at 2", "Insert SimpleName: graph(1943) into MethodInvocation(1945) at 0", "Insert SimpleName: nodes(1944) into MethodInvocation(1945) at 1", "Insert ParameterizedType: Function<N,Set<N>>(1955) into ClassInstanceCreation(1977) at 0", "Insert AnonymousClassDeclaration(1976) into ClassInstanceCreation(1977) at 1", "Insert SimpleName: Network(2108) into SimpleType: Network(2109) at 0", "Insert MethodInvocation(2119) into ReturnStatement(2120) at 0", "Insert SimpleName: graph(2126) into MethodInvocation(2128) at 0", "Insert SimpleName: isDirected(2127) into MethodInvocation(2128) at 1", "Insert SimpleName: graph(2129) into MethodInvocation(2131) at 0", "Insert SimpleName: allowsSelfLoops(2130) into MethodInvocation(2131) at 1", "Insert SimpleName: nodePredicate(577) into MethodInvocation(580) at 0", "Insert SimpleName: apply(578) into MethodInvocation(580) at 1", "Insert SimpleName: node(579) into MethodInvocation(580) at 2", "Insert ExpressionStatement(585) into Block(608) at 0", "Insert EnhancedForStatement(607) into Block(608) at 1", "Insert MethodInvocation(857) into MethodInvocation(864) at 0", "Insert SimpleName: expectedEdgeCount(858) into MethodInvocation(864) at 1", "Move MethodInvocation(568) into MethodInvocation(864) at 2", "Insert SimpleName: copy(1029) into MethodInvocation(1032) at 0", "Insert SimpleName: addNode(1030) into MethodInvocation(1032) at 1", "Insert SimpleName: node(1031) into MethodInvocation(1032) at 2", "Insert SimpleName: Network(1225) into SimpleType: Network(1226) at 0", "Insert SimpleName: Network(1229) into SimpleType: Network(1230) at 0", "Insert SimpleName: equal(1233) into MethodInvocation(1248) at 0", "Insert CastExpression(1240) into MethodInvocation(1248) at 1", "Insert CastExpression(1247) into MethodInvocation(1248) at 2", "Insert SimpleName: Network(1253) into SimpleType: Network(1254) at 0", "Insert SimpleName: Network(1257) into SimpleType: Network(1258) at 0", "Insert SimpleName: graph1(1283) into MethodInvocation(1285) at 0", "Insert SimpleName: nodes(1284) into MethodInvocation(1285) at 1", "Insert SimpleName: graph2(1287) into MethodInvocation(1289) at 0", "Insert SimpleName: nodes(1288) into MethodInvocation(1289) at 1", "Insert MethodInvocation(1312) into PrefixExpression: !(1313) at 0", "Insert ReturnStatement(1315) into Block(1316) at 0", "Insert SimpleName: bothUndirected(1319) into VariableDeclarationFragment(1329) at 0", "Insert InfixExpression: &&(1328) into VariableDeclarationFragment(1329) at 1", "Insert PrefixExpression: !(1332) into InfixExpression: &&(1344) at 0", "Insert PrefixExpression: !(1343) into InfixExpression: &&(1344) at 1", "Insert ReturnStatement(1346) into Block(1347) at 0", "Insert SimpleName: Object(1365) into SimpleType: Object(1366) at 0", "Insert SimpleName: graph(1518) into InstanceofExpression(1521) at 0", "Insert SimpleType: Network(1520) into InstanceofExpression(1521) at 1", "Insert ParameterizedType: Network<?,?>(1528) into CastExpression(1530) at 0", "Insert SimpleName: graph(1529) into CastExpression(1530) at 1", "Insert SimpleName: nodeToAdjacentNodes(1532) into MethodInvocation(1534) at 0", "Insert SimpleName: graph(1533) into MethodInvocation(1534) at 1", "Insert SimpleName: toString(1594) into MethodInvocation(1602) at 0", "Insert CastExpression(1601) into MethodInvocation(1602) at 1", "Insert SimpleType: ArrayList(1778) into ParameterizedType: ArrayList<String>(1781) at 0", "Insert SimpleType: String(1780) into ParameterizedType: ArrayList<String>(1781) at 1", "Insert SimpleType: N(1793) into SingleVariableDeclaration(1795) at 0", "Insert SimpleName: successor(1794) into SingleVariableDeclaration(1795) at 1", "Insert SimpleName: graph(1796) into MethodInvocation(1799) at 0", "Insert SimpleName: successors(1797) into MethodInvocation(1799) at 1", "Insert SimpleName: node(1798) into MethodInvocation(1799) at 2", "Insert ExpressionStatement(1814) into Block(1815) at 0", "Insert SimpleName: Joiner(1822) into MethodInvocation(1825) at 0", "Insert SimpleName: on(1823) into MethodInvocation(1825) at 1", "Insert StringLiteral: \", \"(1824) into MethodInvocation(1825) at 2", "Insert SimpleType: Function(1947) into ParameterizedType: Function<N,Set<N>>(1955) at 0", "Insert SimpleType: N(1949) into ParameterizedType: Function<N,Set<N>>(1955) at 1", "Insert ParameterizedType: Set<N>(1954) into ParameterizedType: Function<N,Set<N>>(1955) at 2", "Insert MethodDeclaration(1975) into AnonymousClassDeclaration(1976) at 0", "Insert SimpleName: getPropertiesString(2111) into MethodInvocation(2119) at 0", "Insert CastExpression(2118) into MethodInvocation(2119) at 1", "Insert MethodInvocation(584) into ExpressionStatement(585) at 0", "Insert SingleVariableDeclaration(589) into EnhancedForStatement(607) at 0", "Insert MethodInvocation(593) into EnhancedForStatement(607) at 1", "Insert Block(606) into EnhancedForStatement(607) at 2", "Insert MethodInvocation(850) into MethodInvocation(857) at 0", "Insert SimpleName: expectedNodeCount(851) into MethodInvocation(857) at 1", "Insert MethodInvocation(856) into MethodInvocation(857) at 2", "Insert ParameterizedType: Network<?,?>(1238) into CastExpression(1240) at 0", "Insert SimpleName: graph1(1239) into CastExpression(1240) at 1", "Insert ParameterizedType: Network<?,?>(1245) into CastExpression(1247) at 0", "Insert SimpleName: graph2(1246) into CastExpression(1247) at 1", "Insert MethodInvocation(1306) into MethodInvocation(1312) at 0", "Insert SimpleName: equals(1307) into MethodInvocation(1312) at 1", "Insert MethodInvocation(1311) into MethodInvocation(1312) at 2", "Insert BooleanLiteral: false(1314) into ReturnStatement(1315) at 0", "Insert PrefixExpression: !(1323) into InfixExpression: &&(1328) at 0", "Insert PrefixExpression: !(1327) into InfixExpression: &&(1328) at 1", "Insert SimpleName: bothUndirected(1331) into PrefixExpression: !(1332) at 0", "Insert MethodInvocation(1342) into PrefixExpression: !(1343) at 0", "Insert BooleanLiteral: false(1345) into ReturnStatement(1346) at 0", "Insert SimpleName: Network(1519) into SimpleType: Network(1520) at 0", "Insert SimpleType: Network(1525) into ParameterizedType: Network<?,?>(1528) at 0", "Insert WildcardType: ?(1526) into ParameterizedType: Network<?,?>(1528) at 1", "Insert WildcardType: ?(1527) into ParameterizedType: Network<?,?>(1528) at 2", "Insert ParameterizedType: Network<?,?>(1599) into CastExpression(1601) at 0", "Insert SimpleName: graph(1600) into CastExpression(1601) at 1", "Insert SimpleName: ArrayList(1777) into SimpleType: ArrayList(1778) at 0", "Insert SimpleName: String(1779) into SimpleType: String(1780) at 0", "Insert SimpleName: N(1792) into SimpleType: N(1793) at 0", "Insert MethodInvocation(1813) into ExpressionStatement(1814) at 0", "Insert SimpleName: Function(1946) into SimpleType: Function(1947) at 0", "Insert SimpleName: N(1948) into SimpleType: N(1949) at 0", "Insert SimpleType: Set(1951) into ParameterizedType: Set<N>(1954) at 0", "Insert SimpleType: N(1953) into ParameterizedType: Set<N>(1954) at 1", "Insert MarkerAnnotation(1957) into MethodDeclaration(1975) at 0", "Insert Modifier: public(1958) into MethodDeclaration(1975) at 1", "Insert ParameterizedType: Set<N>(1963) into MethodDeclaration(1975) at 2", "Insert SimpleName: apply(1964) into MethodDeclaration(1975) at 3", "Insert SingleVariableDeclaration(1968) into MethodDeclaration(1975) at 4", "Insert Block(1974) into MethodDeclaration(1975) at 5", "Insert ParameterizedType: Network<?,?>(2116) into CastExpression(2118) at 0", "Insert SimpleName: graph(2117) into CastExpression(2118) at 1", "Insert SimpleName: copy(581) into MethodInvocation(584) at 0", "Insert SimpleName: addNode(582) into MethodInvocation(584) at 1", "Insert SimpleName: node(583) into MethodInvocation(584) at 2", "Insert SimpleType: N(587) into SingleVariableDeclaration(589) at 0", "Insert SimpleName: successor(588) into SingleVariableDeclaration(589) at 1", "Insert SimpleName: graph(590) into MethodInvocation(593) at 0", "Insert SimpleName: successors(591) into MethodInvocation(593) at 1", "Insert SimpleName: node(592) into MethodInvocation(593) at 2", "Insert IfStatement(605) into Block(606) at 0", "Insert SimpleName: NetworkBuilder(847) into MethodInvocation(850) at 0", "Insert SimpleName: from(848) into MethodInvocation(850) at 1", "Insert SimpleName: graph(849) into MethodInvocation(850) at 2", "Insert MethodInvocation(854) into MethodInvocation(856) at 0", "Insert SimpleName: size(855) into MethodInvocation(856) at 1", "Insert SimpleType: Network(1235) into ParameterizedType: Network<?,?>(1238) at 0", "Insert WildcardType: ?(1236) into ParameterizedType: Network<?,?>(1238) at 1", "Insert WildcardType: ?(1237) into ParameterizedType: Network<?,?>(1238) at 2", "Insert SimpleType: Network(1242) into ParameterizedType: Network<?,?>(1245) at 0", "Insert WildcardType: ?(1243) into ParameterizedType: Network<?,?>(1245) at 1", "Insert WildcardType: ?(1244) into ParameterizedType: Network<?,?>(1245) at 2", "Insert SimpleName: graph1(1303) into MethodInvocation(1306) at 0", "Insert SimpleName: successors(1304) into MethodInvocation(1306) at 1", "Insert SimpleName: node(1305) into MethodInvocation(1306) at 2", "Insert SimpleName: graph2(1308) into MethodInvocation(1311) at 0", "Insert SimpleName: successors(1309) into MethodInvocation(1311) at 1", "Insert SimpleName: node(1310) into MethodInvocation(1311) at 2", "Insert MethodInvocation(1322) into PrefixExpression: !(1323) at 0", "Insert MethodInvocation(1326) into PrefixExpression: !(1327) at 0", "Insert MethodInvocation(1336) into MethodInvocation(1342) at 0", "Insert SimpleName: equals(1337) into MethodInvocation(1342) at 1", "Insert MethodInvocation(1341) into MethodInvocation(1342) at 2", "Insert SimpleName: Network(1524) into SimpleType: Network(1525) at 0", "Insert SimpleType: Network(1596) into ParameterizedType: Network<?,?>(1599) at 0", "Insert WildcardType: ?(1597) into ParameterizedType: Network<?,?>(1599) at 1", "Insert WildcardType: ?(1598) into ParameterizedType: Network<?,?>(1599) at 2", "Insert SimpleName: adjacencies(1800) into MethodInvocation(1813) at 0", "Insert SimpleName: add(1801) into MethodInvocation(1813) at 1", "Insert MethodInvocation(1812) into MethodInvocation(1813) at 2", "Insert SimpleName: Set(1950) into SimpleType: Set(1951) at 0", "Insert SimpleName: N(1952) into SimpleType: N(1953) at 0", "Insert SimpleName: Override(1956) into MarkerAnnotation(1957) at 0", "Insert SimpleType: Set(1960) into ParameterizedType: Set<N>(1963) at 0", "Insert SimpleType: N(1962) into ParameterizedType: Set<N>(1963) at 1", "Insert SimpleType: N(1966) into SingleVariableDeclaration(1968) at 0", "Insert SimpleName: node(1967) into SingleVariableDeclaration(1968) at 1", "Insert ReturnStatement(1973) into Block(1974) at 0", "Insert SimpleType: Network(2113) into ParameterizedType: Network<?,?>(2116) at 0", "Insert WildcardType: ?(2114) into ParameterizedType: Network<?,?>(2116) at 1", "Insert WildcardType: ?(2115) into ParameterizedType: Network<?,?>(2116) at 2", "Insert SimpleName: N(586) into SimpleType: N(587) at 0", "Insert MethodInvocation(597) into IfStatement(605) at 0", "Insert Block(604) into IfStatement(605) at 1", "Insert SimpleName: graph(852) into MethodInvocation(854) at 0", "Insert SimpleName: nodes(853) into MethodInvocation(854) at 1", "Insert SimpleName: Network(1234) into SimpleType: Network(1235) at 0", "Insert SimpleName: Network(1241) into SimpleType: Network(1242) at 0", "Insert SimpleName: graph1(1320) into MethodInvocation(1322) at 0", "Insert SimpleName: isDirected(1321) into MethodInvocation(1322) at 1", "Insert SimpleName: graph2(1324) into MethodInvocation(1326) at 0", "Insert SimpleName: isDirected(1325) into MethodInvocation(1326) at 1", "Insert SimpleName: graph1(1333) into MethodInvocation(1336) at 0", "Insert SimpleName: predecessors(1334) into MethodInvocation(1336) at 1", "Insert SimpleName: node(1335) into MethodInvocation(1336) at 2", "Insert SimpleName: graph2(1338) into MethodInvocation(1341) at 0", "Insert SimpleName: predecessors(1339) into MethodInvocation(1341) at 1", "Insert SimpleName: node(1340) into MethodInvocation(1341) at 2", "Insert SimpleName: Network(1595) into SimpleType: Network(1596) at 0", "Insert SimpleName: String(1802) into MethodInvocation(1812) at 0", "Insert SimpleName: format(1803) into MethodInvocation(1812) at 1", "Insert ConditionalExpression(1809) into MethodInvocation(1812) at 2", "Insert SimpleName: node(1810) into MethodInvocation(1812) at 3", "Insert SimpleName: successor(1811) into MethodInvocation(1812) at 4", "Insert SimpleName: Set(1959) into SimpleType: Set(1960) at 0", "Insert SimpleName: N(1961) into SimpleType: N(1962) at 0", "Insert SimpleName: N(1965) into SimpleType: N(1966) at 0", "Insert MethodInvocation(1972) into ReturnStatement(1973) at 0", "Insert SimpleName: Network(2112) into SimpleType: Network(2113) at 0", "Insert SimpleName: nodePredicate(594) into MethodInvocation(597) at 0", "Insert SimpleName: apply(595) into MethodInvocation(597) at 1", "Insert SimpleName: successor(596) into MethodInvocation(597) at 2", "Insert ExpressionStatement(603) into Block(604) at 0", "Insert MethodInvocation(1806) into ConditionalExpression(1809) at 0", "Insert SimpleName: DIRECTED_FORMAT(1807) into ConditionalExpression(1809) at 1", "Insert SimpleName: UNDIRECTED_FORMAT(1808) into ConditionalExpression(1809) at 2", "Insert SimpleName: graph(1969) into MethodInvocation(1972) at 0", "Insert SimpleName: adjacentNodes(1970) into MethodInvocation(1972) at 1", "Insert SimpleName: node(1971) into MethodInvocation(1972) at 2", "Insert MethodInvocation(602) into ExpressionStatement(603) at 0", "Insert SimpleName: graph(1804) into MethodInvocation(1806) at 0", "Insert SimpleName: isDirected(1805) into MethodInvocation(1806) at 1", "Insert SimpleName: copy(598) into MethodInvocation(602) at 0", "Insert SimpleName: addEdge(599) into MethodInvocation(602) at 1", "Insert SimpleName: node(600) into MethodInvocation(602) at 2", "Insert SimpleName: successor(601) into MethodInvocation(602) at 3", "Delete SimpleName: E(500)", "Delete SimpleType: E(501)", "Delete SimpleName: E(453)", "Delete SimpleType: E(454)", "Delete SimpleType: E(462)", "Delete SimpleName: build(570)", "Delete MethodInvocation(571)", "Delete SimpleName: graph(464)", "Delete SingleVariableDeclaration(465)", "Delete StringLiteral: \"%s, nodes: %s, edges: %s\"(1078)"]}}, {"Hypergraph_cluster": {"actions": [{"root": "UPDATE from Graph<N,E> to Network<N,E>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Network<N,E>"]}, {"root": "UPDATE from Graph to Network", "operations": ["UPD SimpleName: Graph from Graph to Network", "UPD SimpleType: Graph from Graph to Network"]}, {"root": "UPDATE from @code to @link", "operations": ["UPD TagElement: @code from @code to @link"]}, {"root": "INS SimpleName: Network to TagElement: @code at 0", "operations": ["INS SimpleName: Network to TagElement: @code at 0"]}, {"root": "DEL TextElement:  Graph", "operations": ["DEL TextElement:  Graph"]}]}}, {"Hypergraph_diff": {"operations": ["Update ParameterizedType: Graph<N,E>(54) to Network<N,E>", "Update SimpleType: Graph(49) to Network", "Update TagElement: @code(8) to @link", "Update SimpleName: Graph(48) to Network", "Insert SimpleName: Network(7) into TagElement: @link(8) at 0", "Delete TextElement:  Graph(7)"]}}, {"ImmutableGraph_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from com.google.common.collect.ImmutableSet to com.google.common.base.Preconditions.checkArgument", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableSet from com.google.common.collect.ImmutableSet to com.google.common.base.Preconditions.checkArgument"]}, {"root": "UPDATE from ConfigurableGraph<N,E> to AbstractConfigurableGraph<N>", "operations": ["UPD ParameterizedType: ConfigurableGraph<N,E> from ConfigurableGraph<N,E> to AbstractConfigurableGraph<N>"]}, {"root": "UPDATE from ConfigurableGraph to AbstractConfigurableGraph", "operations": ["UPD SimpleType: ConfigurableGraph from ConfigurableGraph to AbstractConfigurableGraph", "UPD SimpleName: ConfigurableGraph from ConfigurableGraph to AbstractConfigurableGraph"]}, {"root": "MOVE from ParameterizedType: ConfigurableGraph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: ConfigurableGraph<N,E> at 1"]}, {"root": "UPDATE from ImmutableGraph<N,E> to ImmutableGraph<N>", "operations": ["UPD ParameterizedType: ImmutableGraph<N,E> from ImmutableGraph<N,E> to ImmutableGraph<N>", "UPD ParameterizedType: ImmutableGraph<N,E> from ImmutableGraph<N,E> to ImmutableGraph<N>", "UPD ParameterizedType: ImmutableGraph<N,E> from ImmutableGraph<N,E> to ImmutableGraph<N>", "UPD ParameterizedType: ImmutableGraph<N,E> from ImmutableGraph<N,E> to ImmutableGraph<N>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: ImmutableGraph<N,E> to MethodDeclaration at 5"]}, {"root": "UPDATE from Map<N,NodeConnections<N,E>> to Map<N,NodeAdjacencies<N>>", "operations": ["UPD ParameterizedType: Map<N,NodeConnections<N,E>> from Map<N,NodeConnections<N,E>> to Map<N,NodeAdjacencies<N>>"]}, {"root": "UPDATE from NodeConnections<N,E> to NodeAdjacencies<N>", "operations": ["UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>", "UPD ParameterizedType: NodeConnections<N,E> from NodeConnections<N,E> to NodeAdjacencies<N>"]}, {"root": "UPDATE from  whose contents will never change. Instances of this class should be obtained to  whose relationships are constant. Instances of this class may be obtained", "operations": ["UPD TextElement:  whose contents will never change. Instances of this class should be obtained from  whose contents will never change. Instances of this class should be obtained to  whose relationships are constant. Instances of this class may be obtained"]}, {"root": "UPDATE from Graph<N,E> to Graph<N>", "operations": ["UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>", "UPD ParameterizedType: Graph<N,E> from Graph<N,E> to Graph<N>"]}, {"root": "MOVE from ParameterizedType: ImmutableGraph<N,E>", "operations": ["MOV SimpleType: ImmutableGraph to ParameterizedType: ImmutableGraph<N,E> at 0", "MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: ImmutableGraph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: ImmutableGraph<N,E> at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS PrefixExpression: ! to MethodInvocation at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS SimpleName: Network to SimpleType: Network at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: checkArgument to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Network to InstanceofExpression at 1", "INS StringLiteral: \"Input must not implement common.graph.Network\" to MethodInvocation at 2", "INS SimpleName: graph to InstanceofExpression at 0"]}, {"root": "MOVE from ParameterizedType: Map<N,NodeConnections<N,E>>", "operations": ["MOV SimpleType: N to ParameterizedType: Map<N,NodeConnections<N,E>> at 1", "MOV SimpleType: ImmutableGraph to ParameterizedType: ImmutableGraph<N,E> at 0"]}, {"root": "UPDATE from NodeConnections to NodeAdjacencies", "operations": ["UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleName: NodeConnections from NodeConnections to NodeAdjacencies", "UPD SimpleType: NodeConnections from NodeConnections to NodeAdjacencies"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: ImmutableGraph<N>", "operations": ["MOV SimpleType: ImmutableGraph to ParameterizedType: ImmutableGraph<N> at 0", "MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "MOVE from ParameterizedType: ImmutableGraph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: ImmutableGraph<N,E> at 1"]}, {"root": "UPDATE from E to Graph", "operations": ["UPD SimpleType: E from E to Graph", "UPD SimpleName: E from E to Graph"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N,E> at 3"]}, {"root": "UPDATE from ImmutableMap.Builder<N,NodeConnections<N,E>> to ImmutableMap.Builder<N,NodeAdjacencies<N>>", "operations": ["UPD ParameterizedType: ImmutableMap.Builder<N,NodeConnections<N,E>> from ImmutableMap.Builder<N,NodeConnections<N,E>> to ImmutableMap.Builder<N,NodeAdjacencies<N>>"]}, {"root": "MOVE from ParameterizedType: NodeConnections<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: NodeConnections<N,E> at 1", "MOV SimpleType: Graph to ParameterizedType: Graph<N,E> at 0"]}, {"root": "MOVE from ParameterizedType: Graph<N,E>", "operations": ["MOV SimpleType: N to ParameterizedType: Graph<N,E> at 1"]}, {"root": "INS ParameterizedType: ImmutableGraph<N> to CastExpression at 0", "operations": ["INS ParameterizedType: ImmutableGraph<N> to CastExpression at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: ImmutableGraph<N,E> to ClassInstanceCreation at 0"]}, {"root": "UPDATE from DirectedNodeConnections to DirectedNodeAdjacencies", "operations": ["UPD SimpleName: DirectedNodeConnections from DirectedNodeConnections to DirectedNodeAdjacencies"]}, {"root": "UPDATE from UndirectedNodeConnections to UndirectedNodeAdjacencies", "operations": ["UPD SimpleName: UndirectedNodeConnections from UndirectedNodeConnections to UndirectedNodeAdjacencies"]}, {"root": "MOVE from ParameterizedType: ImmutableGraph<N>", "operations": ["MOV SimpleType: N to ParameterizedType: ImmutableGraph<N> at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.annotations.CanIgnoreReturnValue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL SimpleName: E", "DEL TextElement: >", "DEL TextElement: <", "DEL TextElement:  Edge parameter type"]}, {"root": "DEL TypeParameter", "operations": ["DEL SimpleName: E", "DEL TypeParameter"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: graph", "DEL SimpleName: getEdgeToIncidentNodes", "DEL MethodInvocation"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL ParameterizedType: ImmutableGraph<N,E>", "operations": ["DEL ParameterizedType: ImmutableGraph<N,E>", "DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: node", "DEL SimpleName: N", "DEL SimpleType: N", "DEL ClassInstanceCreation", "DEL TextElement: Guaranteed to throw an exception and leave the graph unmodified.", "DEL Modifier: final", "DEL TextElement:  Unsupported operation.", "DEL SimpleName: CanIgnoreReturnValue", "DEL TagElement", "DEL TagElement: @throws", "DEL Modifier: public", "DEL SimpleName: Deprecated", "DEL Javadoc", "DEL ThrowStatement", "DEL TagElement: @deprecated", "DEL SingleVariableDeclaration", "DEL SimpleType: UnsupportedOperationException", "DEL MarkerAnnotation", "DEL PrimitiveType: boolean", "DEL SimpleName: addNode", "DEL TextElement:  always", "DEL SimpleName: UnsupportedOperationException", "DEL Block", "DEL MarkerAnnotation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: UnsupportedOperationException", "DEL MarkerAnnotation", "DEL SimpleName: Deprecated", "DEL SimpleName: addEdge", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: edge", "DEL TextElement: Guaranteed to throw an exception and leave the graph unmodified.", "DEL SingleVariableDeclaration", "DEL SimpleName: node1", "DEL PrimitiveType: boolean", "DEL SimpleName: UnsupportedOperationException", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL SimpleName: E", "DEL SimpleName: N", "DEL SimpleType: N", "DEL SimpleName: Override", "DEL SimpleType: N", "DEL MethodDeclaration", "DEL TagElement: @deprecated", "DEL TextElement:  Unsupported operation.", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SimpleName: UnsupportedOperationException", "DEL Javadoc", "DEL TagElement: @throws", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement:  always", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleName: CanIgnoreReturnValue", "DEL SimpleName: N", "DEL SimpleType: E", "DEL SimpleName: node2"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MarkerAnnotation", "DEL TextElement:  always", "DEL Block", "DEL SimpleName: Deprecated", "DEL TagElement", "DEL Modifier: final", "DEL SimpleType: Object", "DEL TagElement: @deprecated", "DEL Modifier: public", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: UnsupportedOperationException", "DEL TextElement:  Unsupported operation.", "DEL TextElement: Guaranteed to throw an exception and leave the graph unmodified.", "DEL SingleVariableDeclaration", "DEL SimpleName: removeNode", "DEL SimpleName: CanIgnoreReturnValue", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL SimpleName: node", "DEL SimpleType: UnsupportedOperationException", "DEL MarkerAnnotation", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement: @throws", "DEL PrimitiveType: boolean", "DEL MarkerAnnotation", "DEL SimpleName: Override", "DEL ThrowStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @deprecated", "DEL SimpleName: edge", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: UnsupportedOperationException", "DEL ClassInstanceCreation", "DEL TextElement: Guaranteed to throw an exception and leave the graph unmodified.", "DEL TextElement:  Unsupported operation.", "DEL ThrowStatement", "DEL TagElement: @throws", "DEL MarkerAnnotation", "DEL SimpleName: Deprecated", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL Javadoc", "DEL MarkerAnnotation", "DEL TextElement:  always", "DEL Modifier: final", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: removeEdge", "DEL PrimitiveType: boolean", "DEL SimpleName: CanIgnoreReturnValue", "DEL Modifier: public", "DEL TagElement", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Block", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL SimpleName: edgesConnecting", "DEL SimpleName: node2", "DEL SimpleName: ImmutableSet", "DEL SuperMethodInvocation", "DEL SimpleName: node2", "DEL ParameterizedType: Set<E>", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL SimpleName: Set", "DEL SimpleType: E", "DEL SimpleName: edgesConnecting", "DEL SimpleType: Set", "DEL SimpleName: Override", "DEL SimpleName: E", "DEL SimpleName: node1", "DEL Modifier: public", "DEL SimpleName: node1", "DEL SimpleName: copyOf"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL ParameterizedType: ImmutableMap.Builder<E,IncidentNodes<N>>", "DEL SimpleName: getEdgeToIncidentNodes", "DEL ExpressionStatement", "DEL ParameterizedType: Graph<N,E>", "DEL SimpleName: edges", "DEL SimpleType: Map", "DEL QualifiedName: ImmutableMap.Builder", "DEL Block", "DEL SimpleName: E", "DEL SimpleName: edge", "DEL Modifier: private", "DEL SimpleName: E", "DEL SingleVariableDeclaration", "DEL SimpleName: E", "DEL SingleVariableDeclaration", "DEL SimpleName: of", "DEL TypeParameter", "DEL TypeParameter", "DEL SimpleName: Map", "DEL Modifier: static", "DEL SimpleType: E", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: N", "DEL SimpleName: ImmutableMap", "DEL SimpleName: put", "DEL SimpleName: IncidentNodes", "DEL SimpleName: build", "DEL SimpleName: builder", "DEL SimpleName: edge", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ParameterizedType: Map<E,IncidentNodes<N>>", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleName: graph", "DEL SimpleType: IncidentNodes", "DEL SimpleName: graph", "DEL SimpleName: N", "DEL SimpleName: E", "DEL SimpleType: E", "DEL VariableDeclarationFragment", "DEL EnhancedForStatement", "DEL SimpleName: edgeToIncidentNodes", "DEL SimpleType: E", "DEL SimpleType: N", "DEL SimpleName: edgeToIncidentNodes", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleName: IncidentNodes", "DEL SimpleName: incidentNodes", "DEL SimpleType: E", "DEL ParameterizedType: IncidentNodes<N>", "DEL SimpleType: ImmutableMap.Builder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: E", "DEL MethodInvocation", "DEL SimpleType: IncidentNodes", "DEL MethodInvocation", "DEL SimpleName: IncidentNodes", "DEL SimpleName: graph", "DEL ReturnStatement", "DEL SimpleName: edge"]}, {"root": "DEL TypeParameter", "operations": ["DEL TypeParameter", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleType: E", "DEL SimpleName: E"]}, {"root": "DEL SimpleType: Graph", "operations": ["DEL SimpleType: Graph", "DEL SimpleName: Graph"]}, {"root": "DEL SimpleType: N", "operations": ["DEL SimpleName: N", "DEL SimpleType: N"]}, {"root": "DEL SimpleType: E", "operations": ["DEL SimpleName: E", "DEL SimpleType: E"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: inEdges", "DEL SimpleName: node", "DEL SimpleName: graph", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: graph", "DEL SimpleName: outEdges"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: graph", "DEL SimpleName: node", "DEL SimpleName: incidentEdges", "DEL MethodInvocation"]}]}}, {"ImmutableGraph_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(263) at 1", "Update QualifiedName: com.google.common.collect.ImmutableSet(6) to com.google.common.base.Preconditions.checkArgument", "Update ParameterizedType: ConfigurableGraph<N,E>(61) to AbstractConfigurableGraph<N>", "Update SimpleType: ConfigurableGraph(56) to AbstractConfigurableGraph", "Move SimpleType: N(415) into ParameterizedType: AbstractConfigurableGraph<N>(48) at 1", "Update ParameterizedType: ImmutableGraph<N,E>(104) to ImmutableGraph<N>", "Update ParameterizedType: ImmutableGraph<N,E>(135) to ImmutableGraph<N>", "Move ParameterizedType: ImmutableGraph<N,E>(135) into MethodDeclaration(153) at 5", "Update ParameterizedType: Map<N,NodeConnections<N,E>>(342) to Map<N,NodeAdjacencies<N>>", "Update ParameterizedType: NodeConnections<N,E>(476) to NodeAdjacencies<N>", "Update TextElement:  whose contents will never change. Instances of this class should be obtained(17) to  whose relationships are constant. Instances of this class may be obtained", "Update SimpleName: ConfigurableGraph(55) to AbstractConfigurableGraph", "Update ParameterizedType: Graph<N,E>(70) to Graph<N>", "Move SimpleType: ImmutableGraph(164) into ParameterizedType: ImmutableGraph<N>(82) at 0", "Move SimpleType: N(67) into ParameterizedType: ImmutableGraph<N>(82) at 1", "Update ParameterizedType: Graph<N,E>(112) to Graph<N>", "Insert ExpressionStatement(100) into Block(122) at 0", "Update ParameterizedType: ImmutableGraph<N,E>(169) to ImmutableGraph<N>", "Move SimpleType: N(158) into ParameterizedType: Map<N,NodeAdjacencies<N>>(167) at 1", "Update ParameterizedType: NodeConnections<N,E>(341) to NodeAdjacencies<N>", "Update ParameterizedType: Graph<N,E>(350) to Graph<N>", "Update SimpleType: NodeConnections(471) to NodeAdjacencies", "Move SimpleType: N(338) into ParameterizedType: NodeAdjacencies<N>(224) at 1", "Update ParameterizedType: Graph<N,E>(484) to Graph<N>", "Move SimpleType: N(58) into ParameterizedType: Graph<N>(55) at 1", "Move SimpleType: N(101) into ParameterizedType: Graph<N>(88) at 1", "Insert MethodInvocation(99) into ExpressionStatement(100) at 0", "Move SimpleType: ImmutableGraph(156) into ParameterizedType: ImmutableGraph<N>(145) at 0", "Move SimpleType: N(408) into ParameterizedType: ImmutableGraph<N>(145) at 1", "Update SimpleType: NodeConnections(336) to NodeAdjacencies", "Move SimpleType: N(166) into ParameterizedType: NodeAdjacencies<N>(166) at 1", "Move SimpleType: Graph(413) into ParameterizedType: Graph<N>(173) at 0", "Move SimpleType: N(360) into ParameterizedType: Graph<N>(173) at 1", "Update ParameterizedType: ImmutableMap.Builder<N,NodeConnections<N,E>>(364) to ImmutableMap.Builder<N,NodeAdjacencies<N>>", "Update SimpleName: NodeConnections(470) to NodeAdjacencies", "Move SimpleType: Graph(345) into ParameterizedType: Graph<N>(230) at 0", "Move SimpleType: N(334) into ParameterizedType: Graph<N>(230) at 1", "Insert SimpleName: checkArgument(91) into MethodInvocation(99) at 0", "Insert PrefixExpression: !(97) into MethodInvocation(99) at 1", "Insert StringLiteral: \"Input must not implement common.graph.Network\"(98) into MethodInvocation(99) at 2", "Update SimpleName: NodeConnections(335) to NodeAdjacencies", "Update SimpleName: E(348) to Graph", "Move SimpleName: E(348) into SimpleType: Graph(170) at 0", "Update ParameterizedType: NodeConnections<N,E>(363) to NodeAdjacencies<N>", "Insert ParenthesizedExpression(96) into PrefixExpression: !(97) at 0", "Insert ParameterizedType: ImmutableGraph<N>(110) into CastExpression(112) at 0", "Update ParameterizedType: ImmutableGraph<N,E>(126) to ImmutableGraph<N>", "Move ParameterizedType: ImmutableGraph<N,E>(126) into ClassInstanceCreation(119) at 0", "Update SimpleType: NodeConnections(358) to NodeAdjacencies", "Move SimpleType: N(347) into ParameterizedType: NodeAdjacencies<N>(184) at 1", "Update SimpleName: DirectedNodeConnections(494) to DirectedNodeAdjacencies", "Update SimpleName: UndirectedNodeConnections(513) to UndirectedNodeAdjacencies", "Insert InstanceofExpression(95) into ParenthesizedExpression(96) at 0", "Move SimpleType: ImmutableGraph(99) into ParameterizedType: ImmutableGraph<N>(110) at 0", "Move SimpleType: N(109) into ParameterizedType: ImmutableGraph<N>(110) at 1", "Update SimpleName: NodeConnections(357) to NodeAdjacencies", "Insert SimpleName: graph(92) into InstanceofExpression(95) at 0", "Insert SimpleType: Network(94) into InstanceofExpression(95) at 1", "Insert SimpleName: Network(93) into SimpleType: Network(94) at 0", "Delete QualifiedName: com.google.errorprone.annotations.CanIgnoreReturnValue(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Set(12)", "Delete ImportDeclaration(13)", "Delete TextElement: <(42)", "Delete SimpleName: E(43)", "Delete TextElement: >(44)", "Delete TextElement:  Edge parameter type(45)", "Delete TagElement: @param(46)", "Delete SimpleName: E(53)", "Delete TypeParameter(54)", "Delete SimpleName: E(59)", "Delete SimpleType: E(60)", "Delete SimpleName: E(68)", "Delete SimpleType: E(69)", "Delete SimpleName: getEdgeToIncidentNodes(80)", "Delete SimpleName: graph(81)", "Delete MethodInvocation(82)", "Delete SimpleName: E(96)", "Delete TypeParameter(97)", "Delete SimpleName: E(102)", "Delete SimpleType: E(103)", "Delete SimpleName: E(110)", "Delete SimpleType: E(111)", "Delete SimpleName: E(124)", "Delete SimpleType: E(125)", "Delete SimpleName: E(133)", "Delete SimpleType: E(134)", "Delete SimpleName: E(153)", "Delete TypeParameter(154)", "Delete SimpleName: E(159)", "Delete SimpleType: E(160)", "Delete ParameterizedType: ImmutableGraph<N,E>(161)", "Delete SimpleName: E(167)", "Delete SimpleType: E(168)", "Delete TextElement: Guaranteed to throw an exception and leave the graph unmodified.(178)", "Delete TagElement(179)", "Delete SimpleName: UnsupportedOperationException(180)", "Delete TextElement:  always(181)", "Delete TagElement: @throws(182)", "Delete TextElement:  Unsupported operation.(183)", "Delete TagElement: @deprecated(184)", "Delete Javadoc(185)", "Delete SimpleName: CanIgnoreReturnValue(186)", "Delete MarkerAnnotation(187)", "Delete SimpleName: Deprecated(188)", "Delete MarkerAnnotation(189)", "Delete SimpleName: Override(190)", "Delete MarkerAnnotation(191)", "Delete Modifier: public(192)", "Delete Modifier: final(193)", "Delete PrimitiveType: boolean(194)", "Delete SimpleName: addNode(195)", "Delete SimpleName: N(196)", "Delete SimpleType: N(197)", "Delete SimpleName: node(198)", "Delete SingleVariableDeclaration(199)", "Delete SimpleName: UnsupportedOperationException(200)", "Delete SimpleType: UnsupportedOperationException(201)", "Delete ClassInstanceCreation(202)", "Delete ThrowStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete TextElement: Guaranteed to throw an exception and leave the graph unmodified.(206)", "Delete TagElement(207)", "Delete SimpleName: UnsupportedOperationException(208)", "Delete TextElement:  always(209)", "Delete TagElement: @throws(210)", "Delete TextElement:  Unsupported operation.(211)", "Delete TagElement: @deprecated(212)", "Delete Javadoc(213)", "Delete SimpleName: CanIgnoreReturnValue(214)", "Delete MarkerAnnotation(215)", "Delete SimpleName: Deprecated(216)", "Delete MarkerAnnotation(217)", "Delete SimpleName: Override(218)", "Delete MarkerAnnotation(219)", "Delete Modifier: public(220)", "Delete Modifier: final(221)", "Delete PrimitiveType: boolean(222)", "Delete SimpleName: addEdge(223)", "Delete SimpleName: E(224)", "Delete SimpleType: E(225)", "Delete SimpleName: edge(226)", "Delete SingleVariableDeclaration(227)", "Delete SimpleName: N(228)", "Delete SimpleType: N(229)", "Delete SimpleName: node1(230)", "Delete SingleVariableDeclaration(231)", "Delete SimpleName: N(232)", "Delete SimpleType: N(233)", "Delete SimpleName: node2(234)", "Delete SingleVariableDeclaration(235)", "Delete SimpleName: UnsupportedOperationException(236)", "Delete SimpleType: UnsupportedOperationException(237)", "Delete ClassInstanceCreation(238)", "Delete ThrowStatement(239)", "Delete Block(240)", "Delete MethodDeclaration(241)", "Delete TextElement: Guaranteed to throw an exception and leave the graph unmodified.(242)", "Delete TagElement(243)", "Delete SimpleName: UnsupportedOperationException(244)", "Delete TextElement:  always(245)", "Delete TagElement: @throws(246)", "Delete TextElement:  Unsupported operation.(247)", "Delete TagElement: @deprecated(248)", "Delete Javadoc(249)", "Delete SimpleName: CanIgnoreReturnValue(250)", "Delete MarkerAnnotation(251)", "Delete SimpleName: Deprecated(252)", "Delete MarkerAnnotation(253)", "Delete SimpleName: Override(254)", "Delete MarkerAnnotation(255)", "Delete Modifier: public(256)", "Delete Modifier: final(257)", "Delete PrimitiveType: boolean(258)", "Delete SimpleName: removeNode(259)", "Delete SimpleName: Object(260)", "Delete SimpleType: Object(261)", "Delete SimpleName: node(262)", "Delete SingleVariableDeclaration(263)", "Delete SimpleName: UnsupportedOperationException(264)", "Delete SimpleType: UnsupportedOperationException(265)", "Delete ClassInstanceCreation(266)", "Delete ThrowStatement(267)", "Delete Block(268)", "Delete MethodDeclaration(269)", "Delete TextElement: Guaranteed to throw an exception and leave the graph unmodified.(270)", "Delete TagElement(271)", "Delete SimpleName: UnsupportedOperationException(272)", "Delete TextElement:  always(273)", "Delete TagElement: @throws(274)", "Delete TextElement:  Unsupported operation.(275)", "Delete TagElement: @deprecated(276)", "Delete Javadoc(277)", "Delete SimpleName: CanIgnoreReturnValue(278)", "Delete MarkerAnnotation(279)", "Delete SimpleName: Deprecated(280)", "Delete MarkerAnnotation(281)", "Delete SimpleName: Override(282)", "Delete MarkerAnnotation(283)", "Delete Modifier: public(284)", "Delete Modifier: final(285)", "Delete PrimitiveType: boolean(286)", "Delete SimpleName: removeEdge(287)", "Delete SimpleName: Object(288)", "Delete SimpleType: Object(289)", "Delete SimpleName: edge(290)", "Delete SingleVariableDeclaration(291)", "Delete SimpleName: UnsupportedOperationException(292)", "Delete SimpleType: UnsupportedOperationException(293)", "Delete ClassInstanceCreation(294)", "Delete ThrowStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete SimpleName: Override(298)", "Delete MarkerAnnotation(299)", "Delete Modifier: public(300)", "Delete SimpleName: Set(301)", "Delete SimpleType: Set(302)", "Delete SimpleName: E(303)", "Delete SimpleType: E(304)", "Delete ParameterizedType: Set<E>(305)", "Delete SimpleName: edgesConnecting(306)", "Delete SimpleName: Object(307)", "Delete SimpleType: Object(308)", "Delete SimpleName: node1(309)", "Delete SingleVariableDeclaration(310)", "Delete SimpleName: Object(311)", "Delete SimpleType: Object(312)", "Delete SimpleName: node2(313)", "Delete SingleVariableDeclaration(314)", "Delete SimpleName: ImmutableSet(315)", "Delete SimpleName: copyOf(316)", "Delete SimpleName: edgesConnecting(317)", "Delete SimpleName: node1(318)", "Delete SimpleName: node2(319)", "Delete SuperMethodInvocation(320)", "Delete MethodInvocation(321)", "Delete ReturnStatement(322)", "Delete Block(323)", "Delete MethodDeclaration(324)", "Delete SimpleName: E(329)", "Delete TypeParameter(330)", "Delete SimpleName: E(339)", "Delete SimpleType: E(340)", "Delete SimpleName: E(361)", "Delete SimpleType: E(362)", "Delete Modifier: private(395)", "Delete Modifier: static(396)", "Delete SimpleName: N(397)", "Delete TypeParameter(398)", "Delete SimpleName: E(399)", "Delete TypeParameter(400)", "Delete SimpleName: Map(401)", "Delete SimpleType: Map(402)", "Delete SimpleName: E(403)", "Delete SimpleType: E(404)", "Delete SimpleName: IncidentNodes(405)", "Delete SimpleType: IncidentNodes(406)", "Delete ParameterizedType: IncidentNodes<N>(409)", "Delete ParameterizedType: Map<E,IncidentNodes<N>>(410)", "Delete SimpleName: getEdgeToIncidentNodes(411)", "Delete SimpleName: E(416)", "Delete SimpleType: E(417)", "Delete ParameterizedType: Graph<N,E>(418)", "Delete SimpleName: graph(419)", "Delete SingleVariableDeclaration(420)", "Delete QualifiedName: ImmutableMap.Builder(421)", "Delete SimpleType: ImmutableMap.Builder(422)", "Delete SimpleName: E(423)", "Delete SimpleType: E(424)", "Delete SimpleName: IncidentNodes(425)", "Delete SimpleType: IncidentNodes(426)", "Delete SimpleName: N(427)", "Delete SimpleType: N(428)", "Delete ParameterizedType: IncidentNodes<N>(429)", "Delete ParameterizedType: ImmutableMap.Builder<E,IncidentNodes<N>>(430)", "Delete SimpleName: edgeToIncidentNodes(431)", "Delete SimpleName: ImmutableMap(432)", "Delete SimpleName: builder(433)", "Delete MethodInvocation(434)", "Delete VariableDeclarationFragment(435)", "Delete VariableDeclarationStatement(436)", "Delete SimpleName: E(437)", "Delete SimpleType: E(438)", "Delete SimpleName: edge(439)", "Delete SingleVariableDeclaration(440)", "Delete SimpleName: graph(441)", "Delete SimpleName: edges(442)", "Delete MethodInvocation(443)", "Delete SimpleName: edgeToIncidentNodes(444)", "Delete SimpleName: put(445)", "Delete SimpleName: edge(446)", "Delete SimpleName: IncidentNodes(447)", "Delete SimpleName: of(448)", "Delete SimpleName: graph(449)", "Delete SimpleName: incidentNodes(450)", "Delete SimpleName: edge(451)", "Delete MethodInvocation(452)", "Delete MethodInvocation(453)", "Delete MethodInvocation(454)", "Delete ExpressionStatement(455)", "Delete Block(456)", "Delete EnhancedForStatement(457)", "Delete SimpleName: edgeToIncidentNodes(458)", "Delete SimpleName: build(459)", "Delete MethodInvocation(460)", "Delete ReturnStatement(461)", "Delete Block(462)", "Delete MethodDeclaration(463)", "Delete SimpleName: E(468)", "Delete TypeParameter(469)", "Delete SimpleName: N(472)", "Delete SimpleType: N(473)", "Delete SimpleName: E(474)", "Delete SimpleType: E(475)", "Delete SimpleName: Graph(478)", "Delete SimpleType: Graph(479)", "Delete SimpleName: N(480)", "Delete SimpleType: N(481)", "Delete SimpleName: E(482)", "Delete SimpleType: E(483)", "Delete SimpleName: graph(504)", "Delete SimpleName: inEdges(505)", "Delete SimpleName: node(506)", "Delete MethodInvocation(507)", "Delete SimpleName: graph(508)", "Delete SimpleName: outEdges(509)", "Delete SimpleName: node(510)", "Delete MethodInvocation(511)", "Delete SimpleName: graph(519)", "Delete SimpleName: incidentEdges(520)", "Delete SimpleName: node(521)", "Delete MethodInvocation(522)"]}}, {"NodeConnections_cluster": {"actions": [{"root": "UPDATE from An interface for representing an origin node's adjacent nodes and incident edges in a graph. to An interface for representing an origin node's adjacent nodes and incident edges in a network.", "operations": ["UPD TextElement: An interface for representing an origin node's adjacent nodes and incident edges in a graph. from An interface for representing an origin node's adjacent nodes and incident edges in a graph. to An interface for representing an origin node's adjacent nodes and incident edges in a network."]}, {"root": "UPDATE from between two (formally) connected nodes,  to between two (formerly) connected nodes, ", "operations": ["UPD TextElement: between two (formally) connected nodes,  from between two (formally) connected nodes,  to between two (formerly) connected nodes, ", "UPD TextElement: between two (formally) connected nodes,  from between two (formally) connected nodes,  to between two (formerly) connected nodes, "]}]}}, {"NodeConnections_diff": {"operations": ["Update TextElement: An interface for representing an origin node's adjacent nodes and incident edges in a graph.(4) to An interface for representing an origin node's adjacent nodes and incident edges in a network.", "Update TextElement: between two (formally) connected nodes, (70) to between two (formerly) connected nodes, ", "Update TextElement: between two (formally) connected nodes, (88) to between two (formerly) connected nodes, "]}}, {"UndirectedNodeConnections_cluster": {"actions": [{"root": "UPDATE from A class representing an origin node's adjacent nodes and incident edges in an undirected graph. to A class representing an origin node's adjacent nodes and incident edges in an undirected network.", "operations": ["UPD TextElement: A class representing an origin node's adjacent nodes and incident edges in an undirected graph. from A class representing an origin node's adjacent nodes and incident edges in an undirected graph. to A class representing an origin node's adjacent nodes and incident edges in an undirected network."]}]}}, {"UndirectedNodeConnections_diff": {"operations": ["Update TextElement: A class representing an origin node's adjacent nodes and incident edges in an undirected graph.(18) to A class representing an origin node's adjacent nodes and incident edges in an undirected network."]}}], "commit_stats": [{"total_files": 48, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}