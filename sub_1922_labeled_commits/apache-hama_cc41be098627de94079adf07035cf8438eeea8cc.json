{"application": "apache-hama", "csha": "cc41be098627de94079adf07035cf8438eeea8cc", "files": [{"AbstractVector_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: org.apache.hadoop.io.IntWritable to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.apache.hadoop.io.Text to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.apache.hadoop.io.Writable to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.HMapWritable from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable", "UPD QualifiedName: org.apache.hama.io.HMapWritable from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "INS SimpleType: MapWritable to FieldDeclaration at 1", "operations": ["INS SimpleType: MapWritable to FieldDeclaration at 1"]}, {"root": "UPDATE from Iterator<DoubleEntry> to Iterator<Writable>", "operations": ["UPD ParameterizedType: Iterator<DoubleEntry> from Iterator<DoubleEntry> to Iterator<Writable>"]}, {"root": "INS SimpleType: MapWritable to MethodDeclaration at 2", "operations": ["INS SimpleType: MapWritable to MethodDeclaration at 2"]}, {"root": "UPDATE from HMapWritable to MapWritable", "operations": ["UPD SimpleName: HMapWritable from HMapWritable to MapWritable", "UPD SimpleName: HMapWritable from HMapWritable to MapWritable", "UPD SimpleName: HMapWritable from HMapWritable to MapWritable"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "UPDATE from DoubleEntry to Writable", "operations": ["UPD SimpleType: DoubleEntry from DoubleEntry to Writable", "UPD SimpleName: DoubleEntry from DoubleEntry to Writable"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: x to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS ExpressionStatement to IfStatement at 1", "INS NumberLiteral: 1 to Assignment: = at 1", "INS SimpleName: entries to FieldAccess at 1", "INS FieldAccess to InfixExpression: != at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: x to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: entries to FieldAccess at 1", "INS SimpleName: Text to SimpleType: Text at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: containsKey to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS IfStatement to Block at 1", "INS SimpleType: Text to ClassInstanceCreation at 0", "INS StringLiteral: \"row\" to ClassInstanceCreation at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS SimpleType: IntWritable to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: index to ClassInstanceCreation at 1"]}, {"root": "INS InfixExpression: - to ConditionalExpression at 1", "operations": ["INS InfixExpression: - to ConditionalExpression at 1", "INS SimpleName: x to InfixExpression: - at 1"]}, {"root": "MOVE from InfixExpression: -", "operations": ["MOV MethodInvocation to InfixExpression: - at 0"]}, {"root": "INS ParenthesizedExpression to MethodInvocation at 0", "operations": ["INS MethodInvocation to CastExpression at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: DoubleEntry to SimpleType: DoubleEntry at 0", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: index to ClassInstanceCreation at 1", "INS SimpleType: DoubleEntry to CastExpression at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: IntWritable to ClassInstanceCreation at 0"]}, {"root": "INS SimpleType: MapWritable to ClassInstanceCreation at 0", "operations": ["INS SimpleType: MapWritable to ClassInstanceCreation at 0"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV FieldAccess to MethodInvocation at 0"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL SimpleType: Integer", "DEL SimpleType: HMapWritable", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleType: DoubleEntry", "DEL SimpleName: Integer", "DEL SimpleName: DoubleEntry"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: index"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL SimpleName: Integer", "DEL SimpleType: HMapWritable", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleName: DoubleEntry", "DEL SimpleType: Integer", "DEL SimpleType: DoubleEntry"]}, {"root": "DEL SimpleName: index", "operations": ["DEL SimpleName: index"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL SimpleType: Integer", "DEL SimpleType: DoubleEntry", "DEL SimpleType: HMapWritable", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleName: Integer", "DEL SimpleName: DoubleEntry"]}]}}, {"AbstractVector_diff": {"operations": ["Move ImportDeclaration(21) into CompilationUnit(265) at 4", "Insert ImportDeclaration(21) into CompilationUnit(265) at 2", "Insert ImportDeclaration(25) into CompilationUnit(265) at 4", "Insert ImportDeclaration(27) into CompilationUnit(265) at 5", "Insert QualifiedName: org.apache.hadoop.io.IntWritable(20) into ImportDeclaration(21) at 0", "Update QualifiedName: org.apache.hama.io.HMapWritable(22) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.hadoop.io.Text(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: org.apache.hadoop.io.Writable(26) into ImportDeclaration(27) at 0", "Update Modifier: public(30) to protected", "Insert SimpleType: MapWritable(38) into FieldDeclaration(41) at 1", "Update ParameterizedType: Iterator<DoubleEntry>(178) to Iterator<Writable>", "Insert SimpleType: MapWritable(256) into MethodDeclaration(263) at 2", "Update SimpleName: HMapWritable(31) to MapWritable", "Move SimpleName: HMapWritable(31) into SimpleType: MapWritable(38) at 0", "Update SimpleType: DoubleEntry(177) to Writable", "Insert VariableDeclarationStatement(208) into Block(245) at 0", "Insert IfStatement(228) into Block(245) at 1", "Update SimpleName: HMapWritable(222) to MapWritable", "Move SimpleName: HMapWritable(222) into SimpleType: MapWritable(256) at 0", "Update SimpleName: DoubleEntry(176) to Writable", "Insert PrimitiveType: int(204) into VariableDeclarationStatement(208) at 0", "Insert VariableDeclarationFragment(207) into VariableDeclarationStatement(208) at 1", "Insert InfixExpression: &&(223) into IfStatement(228) at 0", "Insert ExpressionStatement(227) into IfStatement(228) at 1", "Insert ClassInstanceCreation(138) into MethodInvocation(143) at 2", "Insert SimpleName: x(205) into VariableDeclarationFragment(207) at 0", "Insert NumberLiteral: 0(206) into VariableDeclarationFragment(207) at 1", "Insert InfixExpression: !=(213) into InfixExpression: &&(223) at 0", "Insert MethodInvocation(222) into InfixExpression: &&(223) at 1", "Insert Assignment: =(226) into ExpressionStatement(227) at 0", "Insert InfixExpression: -(241) into ConditionalExpression(243) at 1", "Update QualifiedName: org.apache.hama.io.HMapWritable(215) to org.apache.hadoop.io.MapWritable", "Insert SimpleType: IntWritable(136) into ClassInstanceCreation(138) at 0", "Insert SimpleName: index(137) into ClassInstanceCreation(138) at 1", "Insert FieldAccess(211) into InfixExpression: !=(213) at 0", "Insert NullLiteral(212) into InfixExpression: !=(213) at 1", "Insert FieldAccess(216) into MethodInvocation(222) at 0", "Insert SimpleName: containsKey(217) into MethodInvocation(222) at 1", "Insert ClassInstanceCreation(221) into MethodInvocation(222) at 2", "Insert SimpleName: x(224) into Assignment: =(226) at 0", "Insert NumberLiteral: 1(225) into Assignment: =(226) at 1", "Move MethodInvocation(208) into InfixExpression: -(241) at 0", "Insert SimpleName: x(240) into InfixExpression: -(241) at 1", "Insert SimpleName: IntWritable(135) into SimpleType: IntWritable(136) at 0", "Insert ThisExpression(209) into FieldAccess(211) at 0", "Insert SimpleName: entries(210) into FieldAccess(211) at 1", "Insert ThisExpression(214) into FieldAccess(216) at 0", "Insert SimpleName: entries(215) into FieldAccess(216) at 1", "Insert SimpleType: Text(219) into ClassInstanceCreation(221) at 0", "Insert StringLiteral: \"row\"(220) into ClassInstanceCreation(221) at 1", "Insert ParenthesizedExpression(72) into MethodInvocation(74) at 0", "Insert SimpleType: MapWritable(125) into ClassInstanceCreation(126) at 0", "Insert SimpleName: Text(218) into SimpleType: Text(219) at 0", "Insert CastExpression(71) into ParenthesizedExpression(72) at 0", "Update SimpleName: HMapWritable(116) to MapWritable", "Move SimpleName: HMapWritable(116) into SimpleType: MapWritable(125) at 0", "Insert SimpleType: DoubleEntry(61) into CastExpression(71) at 0", "Insert MethodInvocation(70) into CastExpression(71) at 1", "Insert SimpleName: DoubleEntry(60) into SimpleType: DoubleEntry(61) at 0", "Move FieldAccess(61) into MethodInvocation(70) at 0", "Move SimpleName: get(62) into MethodInvocation(70) at 1", "Insert ClassInstanceCreation(69) into MethodInvocation(70) at 2", "Insert SimpleType: IntWritable(67) into ClassInstanceCreation(69) at 0", "Insert SimpleName: index(68) into ClassInstanceCreation(69) at 1", "Insert SimpleName: IntWritable(66) into SimpleType: IntWritable(67) at 0", "Delete SimpleType: HMapWritable(32)", "Delete SimpleName: Integer(33)", "Delete SimpleType: Integer(34)", "Delete SimpleName: DoubleEntry(35)", "Delete SimpleType: DoubleEntry(36)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(37)", "Delete SimpleName: index(63)", "Delete MethodInvocation(64)", "Delete SimpleType: HMapWritable(117)", "Delete SimpleName: Integer(118)", "Delete SimpleType: Integer(119)", "Delete SimpleName: DoubleEntry(120)", "Delete SimpleType: DoubleEntry(121)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(122)", "Delete SimpleName: index(132)", "Delete SimpleType: HMapWritable(223)", "Delete SimpleName: Integer(224)", "Delete SimpleType: Integer(225)", "Delete SimpleName: DoubleEntry(226)", "Delete SimpleType: DoubleEntry(227)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(228)"]}}, {"DenseMatrix_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 12"]}, {"root": "UPDATE from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.HMapWritable from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "INS SimpleType: MapWritable to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: MapWritable to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from HMapWritable to MapWritable", "operations": ["UPD SimpleName: HMapWritable from HMapWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: HMapWritable from HMapWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "UPDATE from entrySet to update", "operations": ["UPD SimpleName: entrySet from entrySet to update"]}, {"root": "INS SimpleName: putAll to MethodInvocation at 1", "operations": ["INS SimpleName: putAll to MethodInvocation at 1"]}, {"root": "INS SimpleType: MapWritable to ClassInstanceCreation at 0", "operations": ["INS SimpleType: MapWritable to ClassInstanceCreation at 0"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS SimpleType: IntWritable to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.io.VectorWritable"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL SimpleType: HMapWritable", "DEL SimpleType: Integer", "DEL SimpleName: DoubleEntry", "DEL SimpleName: Integer", "DEL SimpleType: DoubleEntry", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL SimpleType: HMapWritable", "DEL SimpleType: DoubleEntry", "DEL SimpleName: DoubleEntry", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleType: Integer", "DEL SimpleName: Integer"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: update", "DEL SimpleName: putAll"]}]}}, {"DenseMatrix_diff": {"operations": ["Move ImportDeclaration(71) into CompilationUnit(2106) at 12", "Update QualifiedName: org.apache.hama.io.HMapWritable(70) to org.apache.hadoop.io.MapWritable", "Insert SimpleType: MapWritable(1143) into VariableDeclarationStatement(1149) at 0", "Move MethodInvocation(1233) into ExpressionStatement(1224) at 0", "Move MethodInvocation(1231) into MethodInvocation(1223) at 2", "Update SimpleName: HMapWritable(1144) to MapWritable", "Move SimpleName: HMapWritable(1144) into SimpleType: MapWritable(1143) at 0", "Update SimpleName: entrySet(1232) to update", "Insert SimpleName: putAll(1215) into MethodInvocation(1223) at 1", "Update SimpleType: VectorWritable(705) to MapWritable", "Insert SimpleType: MapWritable(1146) into ClassInstanceCreation(1147) at 0", "Update SimpleType: VectorWritable(1382) to MapWritable", "Update SimpleType: VectorWritable(1535) to MapWritable", "Update SimpleName: VectorWritable(704) to MapWritable", "Update SimpleName: HMapWritable(1152) to MapWritable", "Move SimpleName: HMapWritable(1152) into SimpleType: MapWritable(1146) at 0", "Insert ClassInstanceCreation(1165) into MethodInvocation(1173) at 2", "Update SimpleName: VectorWritable(1381) to MapWritable", "Update SimpleName: VectorWritable(1534) to MapWritable", "Insert SimpleType: IntWritable(1158) into ClassInstanceCreation(1165) at 0", "Move MethodInvocation(1174) into ClassInstanceCreation(1165) at 1", "Insert SimpleName: IntWritable(1157) into SimpleType: IntWritable(1158) at 0", "Delete QualifiedName: org.apache.hama.io.VectorWritable(74)", "Delete ImportDeclaration(75)", "Delete SimpleType: HMapWritable(1145)", "Delete SimpleName: Integer(1146)", "Delete SimpleType: Integer(1147)", "Delete SimpleName: DoubleEntry(1148)", "Delete SimpleType: DoubleEntry(1149)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(1150)", "Delete SimpleType: HMapWritable(1153)", "Delete SimpleName: Integer(1154)", "Delete SimpleType: Integer(1155)", "Delete SimpleName: DoubleEntry(1156)", "Delete SimpleType: DoubleEntry(1157)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(1158)", "Delete SimpleName: update(1223)", "Delete SimpleName: putAll(1224)", "Delete MethodInvocation(1234)"]}}, {"DenseVector_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.hadoop.io.IntWritable to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: org.apache.hadoop.io.Text to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.hadoop.io.Writable to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9"]}, {"root": "UPDATE from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.HMapWritable from org.apache.hama.io.HMapWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleType: MapWritable to SingleVariableDeclaration at 0", "INS SimpleName: MapWritable to SimpleType: MapWritable at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: DenseVector to MethodDeclaration at 1", "INS SimpleName: m to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleType: IntWritable to ClassInstanceCreation at 0", "INS SimpleName: setRow to MethodDeclaration at 2", "INS SimpleName: row to SingleVariableDeclaration at 1", "INS SimpleType: Text to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: Text to SimpleType: Text at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS PrimitiveType: void to MethodDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: row to ClassInstanceCreation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: entries to FieldAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS StringLiteral: \"row\" to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleType: IntWritable to CastExpression at 0", "INS SimpleName: get to MethodInvocation at 1", "INS StringLiteral: \"row\" to ClassInstanceCreation at 1", "INS SimpleName: entries to FieldAccess at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: Text to SimpleType: Text at 0", "INS SimpleName: getRow to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: Text to ClassInstanceCreation at 0", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS ReturnStatement to Block at 0", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: row to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: m to SingleVariableDeclaration at 1", "INS SimpleType: MapWritable to SingleVariableDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleName: m to Assignment: = at 1", "INS FieldAccess to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: put to MethodInvocation at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: entries to FieldAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: row to ClassInstanceCreation at 1", "INS SimpleName: entries to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS StringLiteral: \"row\" to ClassInstanceCreation at 1", "INS SimpleType: IntWritable to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: Text to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: entries to FieldAccess at 1", "INS ThisExpression to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: getRow to MethodInvocation at 1", "INS SimpleName: setRow to MethodInvocation at 1", "INS SimpleName: containsKey to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: Text to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: res to MethodInvocation at 0", "INS ExpressionStatement to IfStatement at 1", "INS FieldAccess to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"row\" to ClassInstanceCreation at 1", "INS SimpleName: Text to SimpleType: Text at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from HMapWritable to MapWritable", "operations": ["UPD SimpleName: HMapWritable from HMapWritable to MapWritable", "UPD SimpleName: HMapWritable from HMapWritable to MapWritable", "UPD SimpleName: HMapWritable from HMapWritable to MapWritable"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "UPDATE from Set<Integer> to Set<Writable>", "operations": ["UPD ParameterizedType: Set<Integer> from Set<Integer> to Set<Writable>", "UPD ParameterizedType: Set<Integer> from Set<Integer> to Set<Writable>"]}, {"root": "UPDATE from Iterator<Integer> to Iterator<Writable>", "operations": ["UPD ParameterizedType: Iterator<Integer> from Iterator<Integer> to Iterator<Writable>", "UPD ParameterizedType: Iterator<Integer> from Iterator<Integer> to Iterator<Writable>"]}, {"root": "INS SimpleType: MapWritable to ClassInstanceCreation at 0", "operations": ["INS SimpleType: MapWritable to ClassInstanceCreation at 0"]}, {"root": "UPDATE from Map.Entry<Integer,DoubleEntry> to Map.Entry<Writable,Writable>", "operations": ["UPD ParameterizedType: Map.Entry<Integer,DoubleEntry> from Map.Entry<Integer,DoubleEntry> to Map.Entry<Writable,Writable>"]}, {"root": "MOVE from ParameterizedType: Set<Integer>", "operations": ["MOV SimpleType: Set to ParameterizedType: Set<Integer> at 0"]}, {"root": "UPDATE from Integer to Writable", "operations": ["UPD SimpleName: Integer from Integer to Writable", "UPD SimpleName: Integer from Integer to Writable", "UPD SimpleType: Integer from Integer to Writable", "UPD SimpleType: Integer from Integer to Writable", "UPD SimpleType: Integer from Integer to Writable", "UPD SimpleType: Integer from Integer to Writable", "UPD SimpleName: Integer from Integer to Writable", "UPD SimpleType: Integer from Integer to Writable", "UPD SimpleName: Integer from Integer to Writable", "UPD SimpleName: Integer from Integer to Writable"]}, {"root": "MOVE from ParameterizedType: Set<Integer>", "operations": ["MOV SimpleType: Set to ParameterizedType: Set<Integer> at 0"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "INS SimpleType: MapWritable to ClassInstanceCreation at 0", "operations": ["INS SimpleType: MapWritable to ClassInstanceCreation at 0"]}, {"root": "INS SimpleType: Writable to ParameterizedType: Map.Entry<Integer,DoubleEntry> at 2", "operations": ["INS SimpleType: Writable to ParameterizedType: Map.Entry<Integer,DoubleEntry> at 2", "INS SimpleName: Writable to SimpleType: Writable at 0"]}, {"root": "MOVE from SimpleType: MapWritable", "operations": ["MOV SimpleName: HMapWritable to SimpleType: MapWritable at 0"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: IntWritable to ClassInstanceCreation at 0", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0"]}, {"root": "UPDATE from Integer to Text", "operations": ["UPD SimpleName: Integer from Integer to Text"]}, {"root": "MOVE from SimpleType: Text", "operations": ["MOV SimpleName: Integer to SimpleType: Text at 0"]}, {"root": "UPDATE from DoubleEntry to IntWritable", "operations": ["UPD SimpleName: DoubleEntry from DoubleEntry to IntWritable"]}, {"root": "MOVE from SimpleType: IntWritable", "operations": ["MOV SimpleName: DoubleEntry to SimpleType: IntWritable at 0"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleName: i to ClassInstanceCreation at 1", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: IntWritable to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to Assignment: += at 1", "operations": ["INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS MethodInvocation to Assignment: += at 1", "INS SimpleType: IntWritable to CastExpression at 0", "INS MethodInvocation to MethodInvocation at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: get to MethodInvocation at 0", "INS ParenthesizedExpression to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleType: IntWritable to CastExpression at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: DoubleEntry to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV MethodInvocation to CastExpression at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV MethodInvocation to CastExpression at 1"]}, {"root": "INS ParenthesizedExpression to MethodInvocation at 0", "operations": ["INS ParenthesizedExpression to MethodInvocation at 0", "INS CastExpression to ParenthesizedExpression at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: DoubleEntry to CastExpression at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV MethodInvocation to CastExpression at 1"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL SimpleName: DoubleEntry", "DEL SimpleName: Integer", "DEL SimpleType: DoubleEntry", "DEL SimpleType: HMapWritable", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleType: Integer"]}, {"root": "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "operations": ["DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleType: DoubleEntry", "DEL SimpleType: Integer", "DEL SimpleName: DoubleEntry", "DEL SimpleType: HMapWritable", "DEL SimpleName: Integer"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: HMapWritable", "DEL SimpleName: m", "DEL SimpleType: DoubleEntry", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleType: Integer"]}, {"root": "DEL SimpleName: i", "operations": ["DEL SimpleName: i"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}]}}, {"DenseVector_diff": {"operations": ["Move ImportDeclaration(29) into CompilationUnit(779) at 8", "Insert ImportDeclaration(29) into CompilationUnit(779) at 6", "Insert ImportDeclaration(33) into CompilationUnit(779) at 8", "Insert ImportDeclaration(35) into CompilationUnit(779) at 9", "Move MethodDeclaration(89) into TypeDeclaration: class(778) at 9", "Insert QualifiedName: org.apache.hadoop.io.IntWritable(28) into ImportDeclaration(29) at 0", "Update QualifiedName: org.apache.hama.io.HMapWritable(30) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.hadoop.io.Text(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: org.apache.hadoop.io.Writable(34) into ImportDeclaration(35) at 0", "Insert MethodDeclaration(85) into TypeDeclaration: class(778) at 7", "Insert MethodDeclaration(190) into TypeDeclaration: class(778) at 10", "Insert MethodDeclaration(211) into TypeDeclaration: class(778) at 11", "Insert Modifier: public(72) into MethodDeclaration(85) at 0", "Insert SimpleName: DenseVector(73) into MethodDeclaration(85) at 1", "Insert SingleVariableDeclaration(77) into MethodDeclaration(85) at 2", "Move Block(88) into MethodDeclaration(85) at 3", "Insert SingleVariableDeclaration(142) into MethodDeclaration(168) at 2", "Insert SingleVariableDeclaration(146) into MethodDeclaration(168) at 3", "Insert Block(167) into MethodDeclaration(168) at 4", "Insert Modifier: public(169) into MethodDeclaration(190) at 0", "Insert PrimitiveType: void(170) into MethodDeclaration(190) at 1", "Insert SimpleName: setRow(171) into MethodDeclaration(190) at 2", "Insert SingleVariableDeclaration(174) into MethodDeclaration(190) at 3", "Insert Block(189) into MethodDeclaration(190) at 4", "Insert Modifier: public(191) into MethodDeclaration(211) at 0", "Insert PrimitiveType: int(192) into MethodDeclaration(211) at 1", "Insert SimpleName: getRow(193) into MethodDeclaration(211) at 2", "Insert Block(210) into MethodDeclaration(211) at 3", "Insert SimpleType: MapWritable(75) into SingleVariableDeclaration(77) at 0", "Insert SimpleName: m(76) into SingleVariableDeclaration(77) at 1", "Insert PrimitiveType: int(140) into SingleVariableDeclaration(142) at 0", "Insert SimpleName: row(141) into SingleVariableDeclaration(142) at 1", "Insert SimpleType: MapWritable(144) into SingleVariableDeclaration(146) at 0", "Insert SimpleName: m(145) into SingleVariableDeclaration(146) at 1", "Insert ExpressionStatement(152) into Block(167) at 0", "Insert ExpressionStatement(166) into Block(167) at 1", "Insert PrimitiveType: int(172) into SingleVariableDeclaration(174) at 0", "Insert SimpleName: row(173) into SingleVariableDeclaration(174) at 1", "Insert ExpressionStatement(188) into Block(189) at 0", "Insert ReturnStatement(209) into Block(210) at 0", "Move VariableDeclarationStatement(565) into Block(615) at 2", "Move VariableDeclarationStatement(518) into Block(678) at 2", "Insert IfStatement(739) into Block(762) at 1", "Insert SimpleName: MapWritable(74) into SimpleType: MapWritable(75) at 0", "Update SimpleName: HMapWritable(73) to MapWritable", "Move SimpleName: HMapWritable(73) into SimpleType: MapWritable(144) at 0", "Insert Assignment: =(151) into ExpressionStatement(152) at 0", "Insert MethodInvocation(165) into ExpressionStatement(166) at 0", "Insert MethodInvocation(187) into ExpressionStatement(188) at 0", "Insert MethodInvocation(208) into ReturnStatement(209) at 0", "Update ParameterizedType: Set<Integer>(499) to Set<Writable>", "Update ParameterizedType: Iterator<Integer>(559) to Iterator<Writable>", "Update ParameterizedType: Set<Integer>(548) to Set<Writable>", "Update ParameterizedType: Iterator<Integer>(512) to Iterator<Writable>", "Insert MethodInvocation(731) into IfStatement(739) at 0", "Insert ExpressionStatement(738) into IfStatement(739) at 1", "Insert SimpleType: MapWritable(67) into ClassInstanceCreation(68) at 0", "Insert FieldAccess(149) into Assignment: =(151) at 0", "Insert SimpleName: m(150) into Assignment: =(151) at 1", "Insert FieldAccess(155) into MethodInvocation(165) at 0", "Insert SimpleName: put(156) into MethodInvocation(165) at 1", "Insert ClassInstanceCreation(160) into MethodInvocation(165) at 2", "Insert ClassInstanceCreation(164) into MethodInvocation(165) at 3", "Insert FieldAccess(177) into MethodInvocation(187) at 0", "Insert SimpleName: put(178) into MethodInvocation(187) at 1", "Insert ClassInstanceCreation(182) into MethodInvocation(187) at 2", "Insert ClassInstanceCreation(186) into MethodInvocation(187) at 3", "Insert ParenthesizedExpression(206) into MethodInvocation(208) at 0", "Insert SimpleName: get(207) into MethodInvocation(208) at 1", "Update ParameterizedType: Map.Entry<Integer,DoubleEntry>(386) to Map.Entry<Writable,Writable>", "Move SimpleType: Set(545) into ParameterizedType: Set<Writable>(574) at 0", "Update SimpleType: Integer(498) to Writable", "Update SimpleType: Integer(558) to Writable", "Move SimpleType: Set(496) into ParameterizedType: Set<Writable>(629) at 0", "Update SimpleType: Integer(547) to Writable", "Update SimpleType: Integer(511) to Writable", "Insert FieldAccess(725) into MethodInvocation(731) at 0", "Insert SimpleName: containsKey(726) into MethodInvocation(731) at 1", "Insert ClassInstanceCreation(730) into MethodInvocation(731) at 2", "Insert MethodInvocation(737) into ExpressionStatement(738) at 0", "Update SimpleName: HMapWritable(60) to MapWritable", "Move SimpleName: HMapWritable(60) into SimpleType: MapWritable(67) at 0", "Insert SimpleType: MapWritable(96) into ClassInstanceCreation(97) at 0", "Insert ThisExpression(147) into FieldAccess(149) at 0", "Insert SimpleName: entries(148) into FieldAccess(149) at 1", "Insert ThisExpression(153) into FieldAccess(155) at 0", "Insert SimpleName: entries(154) into FieldAccess(155) at 1", "Insert SimpleType: Text(158) into ClassInstanceCreation(160) at 0", "Insert StringLiteral: \"row\"(159) into ClassInstanceCreation(160) at 1", "Insert SimpleType: IntWritable(162) into ClassInstanceCreation(164) at 0", "Insert SimpleName: row(163) into ClassInstanceCreation(164) at 1", "Insert ThisExpression(175) into FieldAccess(177) at 0", "Insert SimpleName: entries(176) into FieldAccess(177) at 1", "Insert SimpleType: Text(180) into ClassInstanceCreation(182) at 0", "Insert StringLiteral: \"row\"(181) into ClassInstanceCreation(182) at 1", "Insert SimpleType: IntWritable(184) into ClassInstanceCreation(186) at 0", "Insert SimpleName: row(185) into ClassInstanceCreation(186) at 1", "Insert CastExpression(205) into ParenthesizedExpression(206) at 0", "Update SimpleType: Integer(383) to Writable", "Insert SimpleType: Writable(456) into ParameterizedType: Map.Entry<Writable,Writable>(457) at 2", "Update SimpleName: Integer(497) to Writable", "Update SimpleName: Integer(557) to Writable", "Update SimpleName: Integer(546) to Writable", "Update SimpleName: Integer(510) to Writable", "Insert ThisExpression(723) into FieldAccess(725) at 0", "Insert SimpleName: entries(724) into FieldAccess(725) at 1", "Insert SimpleType: Text(728) into ClassInstanceCreation(730) at 0", "Insert StringLiteral: \"row\"(729) into ClassInstanceCreation(730) at 1", "Insert SimpleName: res(732) into MethodInvocation(737) at 0", "Insert SimpleName: setRow(733) into MethodInvocation(737) at 1", "Insert MethodInvocation(736) into MethodInvocation(737) at 2", "Update SimpleName: HMapWritable(99) to MapWritable", "Move SimpleName: HMapWritable(99) into SimpleType: MapWritable(96) at 0", "Insert ClassInstanceCreation(125) into MethodInvocation(132) at 2", "Update SimpleName: Integer(75) to Text", "Move SimpleName: Integer(75) into SimpleType: Text(158) at 0", "Update SimpleName: DoubleEntry(77) to IntWritable", "Move SimpleName: DoubleEntry(77) into SimpleType: IntWritable(162) at 0", "Insert SimpleName: Text(179) into SimpleType: Text(180) at 0", "Insert SimpleName: IntWritable(183) into SimpleType: IntWritable(184) at 0", "Insert SimpleType: IntWritable(195) into CastExpression(205) at 0", "Insert MethodInvocation(204) into CastExpression(205) at 1", "Insert ClassInstanceCreation(342) into MethodInvocation(347) at 2", "Update SimpleName: Integer(382) to Writable", "Insert SimpleName: Writable(455) into SimpleType: Writable(456) at 0", "Insert MethodInvocation(608) into Assignment: +=(609) at 1", "Insert MethodInvocation(662) into VariableDeclarationFragment(663) at 1", "Insert SimpleName: Text(727) into SimpleType: Text(728) at 0", "Insert ThisExpression(734) into MethodInvocation(736) at 0", "Insert SimpleName: getRow(735) into MethodInvocation(736) at 1", "Insert SimpleType: IntWritable(118) into ClassInstanceCreation(125) at 0", "Move MethodInvocation(131) into ClassInstanceCreation(125) at 1", "Insert SimpleName: IntWritable(194) into SimpleType: IntWritable(195) at 0", "Insert FieldAccess(198) into MethodInvocation(204) at 0", "Insert SimpleName: get(199) into MethodInvocation(204) at 1", "Insert ClassInstanceCreation(203) into MethodInvocation(204) at 2", "Insert SimpleType: IntWritable(340) into ClassInstanceCreation(342) at 0", "Insert SimpleName: i(341) into ClassInstanceCreation(342) at 1", "Move SimpleType: DoubleEntry(385) into ClassInstanceCreation(485) at 0", "Insert SimpleName: get(598) into MethodInvocation(608) at 0", "Insert MethodInvocation(607) into MethodInvocation(608) at 1", "Insert SimpleName: get(652) into MethodInvocation(662) at 0", "Insert MethodInvocation(661) into MethodInvocation(662) at 1", "Insert SimpleName: IntWritable(117) into SimpleType: IntWritable(118) at 0", "Insert ThisExpression(196) into FieldAccess(198) at 0", "Insert SimpleName: entries(197) into FieldAccess(198) at 1", "Insert SimpleType: Text(201) into ClassInstanceCreation(203) at 0", "Insert StringLiteral: \"row\"(202) into ClassInstanceCreation(203) at 1", "Insert SimpleName: IntWritable(339) into SimpleType: IntWritable(340) at 0", "Insert ParenthesizedExpression(605) into MethodInvocation(607) at 0", "Move SimpleName: get(523) into MethodInvocation(607) at 1", "Insert ParenthesizedExpression(659) into MethodInvocation(661) at 0", "Move SimpleName: get(571) into MethodInvocation(661) at 1", "Insert SimpleName: Text(200) into SimpleType: Text(201) at 0", "Insert ParenthesizedExpression(480) into MethodInvocation(482) at 0", "Insert CastExpression(604) into ParenthesizedExpression(605) at 0", "Insert CastExpression(658) into ParenthesizedExpression(659) at 0", "Insert CastExpression(479) into ParenthesizedExpression(480) at 0", "Insert SimpleType: IntWritable(600) into CastExpression(604) at 0", "Move MethodInvocation(574) into CastExpression(604) at 1", "Insert SimpleType: IntWritable(654) into CastExpression(658) at 0", "Move MethodInvocation(526) into CastExpression(658) at 1", "Move SimpleType: DoubleEntry(402) into CastExpression(479) at 0", "Move MethodInvocation(405) into CastExpression(479) at 1", "Insert SimpleName: IntWritable(599) into SimpleType: IntWritable(600) at 0", "Insert SimpleName: IntWritable(653) into SimpleType: IntWritable(654) at 0", "Delete SimpleType: HMapWritable(61)", "Delete SimpleName: Integer(62)", "Delete SimpleType: Integer(63)", "Delete SimpleName: DoubleEntry(64)", "Delete SimpleType: DoubleEntry(65)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(66)", "Delete SimpleType: HMapWritable(100)", "Delete SimpleName: Integer(101)", "Delete SimpleType: Integer(102)", "Delete SimpleName: DoubleEntry(103)", "Delete SimpleType: DoubleEntry(104)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(105)", "Delete SimpleType: HMapWritable(74)", "Delete SimpleType: Integer(76)", "Delete SimpleType: DoubleEntry(78)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(79)", "Delete SimpleName: m(80)", "Delete SingleVariableDeclaration(81)", "Delete SimpleName: i(271)", "Delete MethodInvocation(527)", "Delete MethodInvocation(575)"]}}, {"Vector_cluster": {"actions": [{"root": "UPDATE from org.apache.hama.io.DoubleEntry to org.apache.hadoop.io.Writable", "operations": ["UPD QualifiedName: org.apache.hama.io.DoubleEntry from org.apache.hama.io.DoubleEntry to org.apache.hadoop.io.Writable"]}, {"root": "UPDATE from Iterator<DoubleEntry> to Iterator<Writable>", "operations": ["UPD ParameterizedType: Iterator<DoubleEntry> from Iterator<DoubleEntry> to Iterator<Writable>"]}, {"root": "UPDATE from DoubleEntry to Writable", "operations": ["UPD SimpleType: DoubleEntry from DoubleEntry to Writable", "UPD SimpleName: DoubleEntry from DoubleEntry to Writable"]}]}}, {"Vector_diff": {"operations": ["Update QualifiedName: org.apache.hama.io.DoubleEntry(20) to org.apache.hadoop.io.Writable", "Update ParameterizedType: Iterator<DoubleEntry>(240) to Iterator<Writable>", "Update SimpleType: DoubleEntry(239) to Writable", "Update SimpleName: DoubleEntry(238) to Writable"]}}, {"ExampleDriver_cluster": {"actions": [{"root": "UPDATE from \"random\" to \"rand\"", "operations": ["UPD StringLiteral: \"random\" from \"random\" to \"rand\""]}]}}, {"ExampleDriver_diff": {"operations": ["Update StringLiteral: \"random\"(42) to \"rand\""]}}, {"FileMatrixBlockMult_cluster": {"actions": [{"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: DenseVector from DenseVector to MapWritable", "UPD SimpleName: DenseVector from DenseVector to MapWritable"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: row to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "UPDATE from OutputCollector<BlockID,VectorWritable> to OutputCollector<BlockID,MapWritable>", "operations": ["UPD ParameterizedType: OutputCollector<BlockID,VectorWritable> from OutputCollector<BlockID,VectorWritable> to OutputCollector<BlockID,MapWritable>"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: row to MethodInvocation at 2", "INS SimpleName: setRow to MethodInvocation at 1", "INS SimpleName: res to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 3"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 4"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: res to MethodInvocation at 0", "INS SimpleName: getEntries to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: startColumn to MethodInvocation at 2", "MOV SimpleName: endColumn to MethodInvocation at 3", "MOV SimpleName: subVector to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.io.VectorWritable"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL PrimitiveType: int"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationStatement"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: VectorWritable", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: VectorWritable"]}, {"root": "DEL SimpleName: res", "operations": ["DEL SimpleName: res"]}]}}, {"FileMatrixBlockMult_diff": {"operations": ["Update SimpleType: DenseVector(240) to MapWritable", "Insert SingleVariableDeclaration(233) into MethodDeclaration(290) at 3", "Update ParameterizedType: OutputCollector<BlockID,VectorWritable>(145) to OutputCollector<BlockID,MapWritable>", "Update SimpleName: DenseVector(239) to MapWritable", "Insert PrimitiveType: int(231) into SingleVariableDeclaration(233) at 0", "Insert SimpleName: row(232) into SingleVariableDeclaration(233) at 1", "Insert ExpressionStatement(252) into Block(289) at 1", "Update SimpleType: VectorWritable(144) to MapWritable", "Move VariableDeclarationFragment(160) into VariableDeclarationStatement(167) at 2", "Move VariableDeclarationFragment(169) into VariableDeclarationStatement(167) at 3", "Move VariableDeclarationFragment(180) into VariableDeclarationStatement(167) at 4", "Insert MethodInvocation(251) into ExpressionStatement(252) at 0", "Insert MethodInvocation(287) into ReturnStatement(288) at 0", "Update SimpleName: VectorWritable(143) to MapWritable", "Insert SimpleName: res(248) into MethodInvocation(251) at 0", "Insert SimpleName: setRow(249) into MethodInvocation(251) at 1", "Insert SimpleName: row(250) into MethodInvocation(251) at 2", "Insert SimpleName: res(285) into MethodInvocation(287) at 0", "Insert SimpleName: getEntries(286) into MethodInvocation(287) at 1", "Insert MethodInvocation(211) into MethodInvocation(212) at 3", "Move SimpleName: subVector(218) into MethodInvocation(211) at 0", "Move MethodInvocation(217) into MethodInvocation(211) at 1", "Move SimpleName: startColumn(219) into MethodInvocation(211) at 2", "Move SimpleName: endColumn(220) into MethodInvocation(211) at 3", "Delete QualifiedName: org.apache.hama.io.VectorWritable(60)", "Delete ImportDeclaration(61)", "Delete PrimitiveType: int(158)", "Delete VariableDeclarationStatement(161)", "Delete PrimitiveType: int(162)", "Delete VariableDeclarationStatement(170)", "Delete PrimitiveType: int(177)", "Delete VariableDeclarationStatement(181)", "Delete SimpleName: VectorWritable(213)", "Delete SimpleType: VectorWritable(214)", "Delete MethodInvocation(221)", "Delete ClassInstanceCreation(222)", "Delete SimpleName: res(288)"]}}, {"RandomMatrix_cluster": {"actions": [{"root": "UPDATE from \"random  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\" to \"rand  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\"", "operations": ["UPD StringLiteral: \"random  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\" from \"random  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\" to \"rand  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\""]}]}}, {"RandomMatrix_diff": {"operations": ["Update StringLiteral: \"random  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\"(43) to \"rand  [-m maps] [-r reduces] <rows> <columns> <matrix_name>\""]}}, {"RowCyclicAdditionMap_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: org.apache.hama.DenseVector to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> to Mapper<IntWritable,MapWritable,IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> from Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> to Mapper<IntWritable,MapWritable,IntWritable,MapWritable>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from Class<VectorWritable> to Class<MapWritable>", "operations": ["UPD ParameterizedType: Class<VectorWritable> from Class<VectorWritable> to Class<MapWritable>"]}, {"root": "UPDATE from OutputCollector<IntWritable,VectorWritable> to OutputCollector<IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: OutputCollector<IntWritable,VectorWritable> from OutputCollector<IntWritable,VectorWritable> to OutputCollector<IntWritable,MapWritable>"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: a to VariableDeclarationFragment at 0", "INS SimpleName: DenseVector to SimpleType: DenseVector at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: DenseVector to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: value to ClassInstanceCreation at 1", "INS SimpleType: DenseVector to VariableDeclarationStatement at 0", "INS SimpleName: DenseVector to SimpleType: DenseVector at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: b to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: c to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: DenseVector to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: b to MethodInvocation at 2", "INS SimpleName: DenseVector to SimpleType: DenseVector at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: collect to MethodInvocation at 1", "INS SimpleName: key to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: add to MethodInvocation at 0", "MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from add to output", "operations": ["UPD SimpleName: add from add to output"]}, {"root": "UPDATE from VectorWritable to DenseVector", "operations": ["UPD SimpleType: VectorWritable from VectorWritable to DenseVector", "UPD SimpleName: VectorWritable from VectorWritable to DenseVector"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: VectorWritable to ClassInstanceCreation at 0"]}, {"root": "UPDATE from key to a", "operations": ["UPD SimpleName: key from key to a"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: key to MethodInvocation at 0"]}, {"root": "UPDATE from get to add", "operations": ["UPD SimpleName: get from get to add"]}, {"root": "UPDATE from value to c", "operations": ["UPD SimpleName: value from value to c"]}, {"root": "UPDATE from getDenseVector to getEntries", "operations": ["UPD SimpleName: getDenseVector from getDenseVector to getEntries"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: key", "DEL SimpleName: output", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleName: collect"]}]}}, {"RowCyclicAdditionMap_diff": {"operations": ["Move ImportDeclaration(41) into CompilationUnit(279) at 3", "Insert ImportDeclaration(41) into CompilationUnit(279) at 12", "Update QualifiedName: org.apache.hama.io.VectorWritable(40) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.hama.DenseVector(40) into ImportDeclaration(41) at 0", "Update ParameterizedType: Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable>(60) to Mapper<IntWritable,MapWritable,IntWritable,MapWritable>", "Update SimpleType: VectorWritable(55) to MapWritable", "Update SimpleType: VectorWritable(59) to MapWritable", "Update SimpleName: VectorWritable(54) to MapWritable", "Update SimpleName: VectorWritable(58) to MapWritable", "Update ParameterizedType: Class<VectorWritable>(160) to Class<MapWritable>", "Update SimpleType: VectorWritable(219) to MapWritable", "Update ParameterizedType: OutputCollector<IntWritable,VectorWritable>(228) to OutputCollector<IntWritable,MapWritable>", "Insert VariableDeclarationStatement(249) into Block(276) at 0", "Insert VariableDeclarationStatement(258) into Block(276) at 1", "Insert VariableDeclarationStatement(267) into Block(276) at 2", "Insert ExpressionStatement(275) into Block(276) at 3", "Update SimpleType: VectorWritable(159) to MapWritable", "Update SimpleName: VectorWritable(218) to MapWritable", "Update SimpleType: VectorWritable(227) to MapWritable", "Insert SimpleType: DenseVector(240) into VariableDeclarationStatement(249) at 0", "Insert VariableDeclarationFragment(248) into VariableDeclarationStatement(249) at 1", "Insert SimpleType: DenseVector(251) into VariableDeclarationStatement(258) at 0", "Insert VariableDeclarationFragment(257) into VariableDeclarationStatement(258) at 1", "Insert SimpleType: DenseVector(260) into VariableDeclarationStatement(267) at 0", "Insert VariableDeclarationFragment(266) into VariableDeclarationStatement(267) at 1", "Insert MethodInvocation(274) into ExpressionStatement(275) at 0", "Update SimpleName: VectorWritable(158) to MapWritable", "Update SimpleName: VectorWritable(226) to MapWritable", "Insert SimpleName: DenseVector(239) into SimpleType: DenseVector(240) at 0", "Insert SimpleName: a(241) into VariableDeclarationFragment(248) at 0", "Move MethodInvocation(250) into VariableDeclarationFragment(248) at 1", "Insert SimpleName: DenseVector(250) into SimpleType: DenseVector(251) at 0", "Insert SimpleName: b(252) into VariableDeclarationFragment(257) at 0", "Insert ClassInstanceCreation(256) into VariableDeclarationFragment(257) at 1", "Insert SimpleName: DenseVector(259) into SimpleType: DenseVector(260) at 0", "Insert SimpleName: c(261) into VariableDeclarationFragment(266) at 0", "Insert MethodInvocation(265) into VariableDeclarationFragment(266) at 1", "Update SimpleName: add(251) to output", "Move SimpleName: add(251) into MethodInvocation(274) at 0", "Insert SimpleName: collect(269) into MethodInvocation(274) at 1", "Insert SimpleName: key(270) into MethodInvocation(274) at 2", "Move MethodInvocation(254) into MethodInvocation(274) at 3", "Update SimpleType: VectorWritable(241) to DenseVector", "Move SimpleType: VectorWritable(241) into ClassInstanceCreation(256) at 0", "Insert SimpleName: value(255) into ClassInstanceCreation(256) at 1", "Update SimpleName: key(242) to a", "Move SimpleName: key(242) into MethodInvocation(265) at 0", "Update SimpleName: get(243) to add", "Move SimpleName: get(243) into MethodInvocation(265) at 1", "Insert SimpleName: b(264) into MethodInvocation(265) at 2", "Update SimpleName: value(252) to c", "Update SimpleName: getDenseVector(253) to getEntries", "Update SimpleName: VectorWritable(240) to DenseVector", "Delete SimpleName: output(237)", "Delete SimpleName: collect(238)", "Delete SimpleName: key(239)", "Delete MethodInvocation(244)", "Delete MethodInvocation(255)", "Delete ClassInstanceCreation(256)", "Delete MethodInvocation(257)", "Delete ExpressionStatement(258)"]}}, {"RowCyclicAdditionReduce_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>", "operations": ["UPD ParameterizedType: Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> from Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from Iterator<VectorWritable> to Iterator<MapWritable>", "operations": ["UPD ParameterizedType: Iterator<VectorWritable> from Iterator<VectorWritable> to Iterator<MapWritable>"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from entrySet to update", "operations": ["UPD SimpleName: entrySet from entrySet to update"]}, {"root": "INS SimpleName: putAll to MethodInvocation at 1", "operations": ["INS SimpleName: putAll to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: update", "DEL MethodInvocation", "DEL SimpleName: putAll"]}]}}, {"RowCyclicAdditionReduce_diff": {"operations": ["Move ImportDeclaration(39) into CompilationUnit(178) at 5", "Update QualifiedName: org.apache.hama.io.VectorWritable(38) to org.apache.hadoop.io.MapWritable", "Update ParameterizedType: Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate>(56) to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>", "Update SimpleType: VectorWritable(51) to MapWritable", "Update SimpleName: VectorWritable(50) to MapWritable", "Update ParameterizedType: Iterator<VectorWritable>(133) to Iterator<MapWritable>", "Update SimpleType: VectorWritable(132) to MapWritable", "Move MethodInvocation(168) into ExpressionStatement(168) at 0", "Move MethodInvocation(166) into MethodInvocation(167) at 2", "Update SimpleName: VectorWritable(131) to MapWritable", "Update SimpleName: entrySet(167) to update", "Insert SimpleName: putAll(163) into MethodInvocation(167) at 1", "Delete SimpleName: update(162)", "Delete SimpleName: putAll(163)", "Delete MethodInvocation(169)"]}}, {"SIMDMultiplyMap_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS ImportDeclaration to CompilationUnit at 15", "INS QualifiedName: org.apache.hama.io.DoubleEntry to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> to Mapper<IntWritable,MapWritable,IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> from Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> to Mapper<IntWritable,MapWritable,IntWritable,MapWritable>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from Class<VectorWritable> to Class<MapWritable>", "operations": ["UPD ParameterizedType: Class<VectorWritable> from Class<VectorWritable> to Class<MapWritable>"]}, {"root": "UPDATE from OutputCollector<IntWritable,VectorWritable> to OutputCollector<IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: OutputCollector<IntWritable,VectorWritable> from OutputCollector<IntWritable,VectorWritable> to OutputCollector<IntWritable,MapWritable>"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3"]}, {"root": "UPDATE from key to sum", "operations": ["UPD SimpleName: key from key to sum"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: key to MethodInvocation at 0"]}, {"root": "UPDATE from get to getEntries", "operations": ["UPD SimpleName: get from get to getEntries"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleType: IntWritable to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: i to ClassInstanceCreation at 1", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS SimpleName: DoubleEntry to SimpleType: DoubleEntry at 0", "INS SimpleType: DoubleEntry to CastExpression at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: getValue to MethodInvocation at 1", "INS ParenthesizedExpression to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 0", "MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: i"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleType: VectorWritable", "DEL SimpleName: sum", "DEL SimpleName: VectorWritable", "DEL MethodInvocation"]}]}}, {"SIMDMultiplyMap_diff": {"operations": ["Move ImportDeclaration(45) into CompilationUnit(309) at 3", "Insert ImportDeclaration(47) into CompilationUnit(309) at 15", "Update QualifiedName: org.apache.hama.io.VectorWritable(44) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.hama.io.DoubleEntry(46) into ImportDeclaration(47) at 0", "Update ParameterizedType: Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable>(67) to Mapper<IntWritable,MapWritable,IntWritable,MapWritable>", "Update SimpleType: VectorWritable(62) to MapWritable", "Update SimpleType: VectorWritable(66) to MapWritable", "Update SimpleName: VectorWritable(61) to MapWritable", "Update SimpleName: VectorWritable(65) to MapWritable", "Update ParameterizedType: Class<VectorWritable>(178) to Class<MapWritable>", "Update SimpleType: VectorWritable(237) to MapWritable", "Update ParameterizedType: OutputCollector<IntWritable,VectorWritable>(246) to OutputCollector<IntWritable,MapWritable>", "Update SimpleType: VectorWritable(177) to MapWritable", "Update SimpleName: VectorWritable(236) to MapWritable", "Update SimpleType: VectorWritable(245) to MapWritable", "Update SimpleName: VectorWritable(176) to MapWritable", "Update SimpleName: VectorWritable(244) to MapWritable", "Insert MethodInvocation(303) into MethodInvocation(304) at 3", "Update SimpleName: key(292) to sum", "Move SimpleName: key(292) into MethodInvocation(303) at 0", "Update SimpleName: get(293) to getEntries", "Move SimpleName: get(293) into MethodInvocation(303) at 1", "Insert MethodInvocation(292) into MethodInvocation(293) at 2", "Insert ParenthesizedExpression(290) into MethodInvocation(292) at 0", "Insert SimpleName: getValue(291) into MethodInvocation(292) at 1", "Insert CastExpression(289) into ParenthesizedExpression(290) at 0", "Insert SimpleType: DoubleEntry(281) into CastExpression(289) at 0", "Insert MethodInvocation(288) into CastExpression(289) at 1", "Insert SimpleName: DoubleEntry(280) into SimpleType: DoubleEntry(281) at 0", "Move SimpleName: value(278) into MethodInvocation(288) at 0", "Move SimpleName: get(279) into MethodInvocation(288) at 1", "Insert ClassInstanceCreation(287) into MethodInvocation(288) at 2", "Insert SimpleType: IntWritable(285) into ClassInstanceCreation(287) at 0", "Insert SimpleName: i(286) into ClassInstanceCreation(287) at 1", "Insert SimpleName: IntWritable(284) into SimpleType: IntWritable(285) at 0", "Delete SimpleName: i(280)", "Delete MethodInvocation(281)", "Delete SimpleName: VectorWritable(290)", "Delete SimpleType: VectorWritable(291)", "Delete MethodInvocation(294)", "Delete SimpleName: sum(295)", "Delete ClassInstanceCreation(296)"]}}, {"SIMDMultiplyReduce_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>", "operations": ["UPD ParameterizedType: Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> from Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from Iterator<VectorWritable> to Iterator<MapWritable>", "operations": ["UPD ParameterizedType: Iterator<VectorWritable> from Iterator<VectorWritable> to Iterator<MapWritable>"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from entrySet to update", "operations": ["UPD SimpleName: entrySet from entrySet to update"]}, {"root": "INS SimpleName: putAll to MethodInvocation at 1", "operations": ["INS SimpleName: putAll to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: putAll", "DEL SimpleName: update", "DEL MethodInvocation"]}]}}, {"SIMDMultiplyReduce_diff": {"operations": ["Move ImportDeclaration(39) into CompilationUnit(193) at 5", "Update QualifiedName: org.apache.hama.io.VectorWritable(38) to org.apache.hadoop.io.MapWritable", "Update ParameterizedType: Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate>(58) to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>", "Update SimpleType: VectorWritable(53) to MapWritable", "Update SimpleName: VectorWritable(52) to MapWritable", "Update ParameterizedType: Iterator<VectorWritable>(148) to Iterator<MapWritable>", "Update SimpleType: VectorWritable(147) to MapWritable", "Move MethodInvocation(183) into ExpressionStatement(183) at 0", "Move MethodInvocation(181) into MethodInvocation(182) at 2", "Update SimpleName: VectorWritable(146) to MapWritable", "Update SimpleName: entrySet(182) to update", "Insert SimpleName: putAll(178) into MethodInvocation(182) at 1", "Delete SimpleName: update(177)", "Delete SimpleName: putAll(178)", "Delete MethodInvocation(184)"]}}, {"HMapWritable_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: limitations under the License.", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL QualifiedName: org.apache.hama.io", "DEL TextElement: Copyright 2007 The Apache Software Foundation", "DEL PackageDeclaration", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TagElement", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL Javadoc", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: or more contributor license agreements.  See the NOTICE file"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.DataInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.DataOutput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.TreeMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.atomic.AtomicReference"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.conf.Configurable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.conf.Configuration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.HStoreKey"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.hbase.io.ImmutableBytesWritable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.util.Bytes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.io.Text", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.io.Writable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.util.ReflectionUtils", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.util.BytesUtil"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL SimpleName: putAll", "DEL SimpleName: SuppressWarnings", "DEL MethodInvocation", "DEL SimpleName: put", "DEL PostfixExpression: ++", "DEL SimpleName: key", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: addToMap", "DEL SingleMemberAnnotation", "DEL SimpleType: Integer", "DEL SimpleName: CODE_TO_CLASS", "DEL ReturnStatement", "DEL SimpleName: Integer", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL Modifier: protected", "DEL SimpleType: DoubleEntry", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: Configuration", "DEL SimpleName: write", "DEL SimpleName: AtomicReference", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: DoubleEntry", "DEL MethodInvocation", "DEL SimpleName: clear", "DEL Modifier: public", "DEL SimpleName: out", "DEL ThisExpression", "DEL SimpleName: Map", "DEL PostfixExpression: ++", "DEL Javadoc", "DEL TextElement:  ", "DEL SimpleName: Integer", "DEL SimpleType: V", "DEL SimpleName: newInstance", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: CODE_TO_CLASS", "DEL SimpleName: code", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL SimpleType: Byte", "DEL SimpleName: DataInput", "DEL SimpleName: code", "DEL SimpleType: Configuration", "DEL SimpleType: Integer", "DEL SimpleType: Writable", "DEL MethodDeclaration", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL SimpleType: Byte", "DEL SingleVariableDeclaration", "DEL SimpleName: Configurable", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: V", "DEL FieldAccess", "DEL SimpleName: remove", "DEL SimpleName: getKey", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL FieldAccess", "DEL SimpleName: key", "DEL SimpleName: containsValue", "DEL TextElement:  ", "DEL StringLiteral: \"boxing\"", "DEL SimpleName: code", "DEL TextElement:  ", "DEL SimpleName: writeByteArray", "DEL SimpleName: Integer", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL SimpleName: Configuration", "DEL SimpleName: Object", "DEL SimpleName: V", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL SimpleType: TreeMap", "DEL SimpleName: Class", "DEL SimpleName: BytesUtil", "DEL ParameterizedType: Entry<Integer,V>", "DEL SimpleName: conf", "DEL SimpleName: in", "DEL SimpleName: getClass", "DEL SimpleName: V", "DEL Modifier: static", "DEL SimpleName: conf", "DEL SimpleName: put", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: in", "DEL SimpleName: out", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: readByteArray", "DEL Modifier: final", "DEL Modifier: public", "DEL Javadoc", "DEL ParameterizedType: Map<Class<?>,Byte>", "DEL ParameterizedType: Class<?>", "DEL ExpressionStatement", "DEL SimpleName: code", "DEL SimpleName: IOException", "DEL TypeLiteral", "DEL SimpleName: clazz", "DEL SimpleName: in", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL SimpleType: DataOutput", "DEL ParameterizedType: HashMap<Class<?>,Byte>", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL SimpleName: get", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: containsValue", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: instance", "DEL SimpleType: V", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TagElement: @inheritDoc", "DEL TagElement", "DEL SimpleName: keySet", "DEL SimpleName: V", "DEL PostfixExpression: ++", "DEL ThisExpression", "DEL SimpleName: Configuration", "DEL SimpleType: Class", "DEL SimpleName: Set", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleType: ImmutableBytesWritable", "DEL SimpleName: getClass", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL SimpleName: keySet", "DEL SimpleName: value", "DEL PrimitiveType: byte", "DEL ParameterizedType: Map<Integer,V>", "DEL SimpleName: in", "DEL WildcardType: ?", "DEL SimpleType: Map", "DEL SimpleName: getValue", "DEL StringLiteral: \"unchecked\"", "DEL MethodDeclaration", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL Modifier: public", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: e", "DEL ThisExpression", "DEL TagElement: @inheritDoc", "DEL Modifier: public", "DEL SimpleName: isEmpty", "DEL Block", "DEL SimpleType: AtomicReference", "DEL SimpleName: V", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Integer", "DEL TypeParameter", "DEL SimpleName: Byte", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: String", "DEL InfixExpression: <", "DEL SimpleName: Object", "DEL Javadoc", "DEL ParameterizedType: AtomicReference<Configuration>", "DEL SimpleName: readFields", "DEL SimpleName: out", "DEL SimpleName: BytesUtil", "DEL ParameterizedType: Set<Entry<Integer,V>>", "DEL Modifier: public", "DEL FieldAccess", "DEL SimpleName: Bytes", "DEL Modifier: static", "DEL SimpleType: IOException", "DEL SimpleName: set", "DEL TagElement: @inheritDoc", "DEL SimpleName: addToMap", "DEL TextElement:  the conf ", "DEL MethodInvocation", "DEL SimpleName: put", "DEL SimpleType: Writable", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleType: IOException", "DEL TextElement:  ", "DEL SimpleName: Integer", "DEL SimpleName: V", "DEL SimpleName: id", "DEL SimpleType: Map", "DEL FieldDeclaration", "DEL SimpleName: AtomicReference", "DEL MethodDeclaration", "DEL SimpleType: Integer", "DEL SimpleName: instance", "DEL SimpleName: getId", "DEL SimpleName: V", "DEL TextElement:  ", "DEL Modifier: public", "DEL ParameterizedType: Class<?>", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL SimpleName: remove", "DEL Javadoc", "DEL ReturnStatement", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL Block", "DEL TextElement:  ", "DEL SimpleName: value", "DEL EnhancedForStatement", "DEL FieldDeclaration", "DEL SimpleType: Integer", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Text", "DEL WildcardType: ?", "DEL TagElement: @inheritDoc", "DEL SimpleName: entrySet", "DEL SimpleName: i", "DEL SimpleType: Class", "DEL ThisExpression", "DEL SimpleName: NullPointerException", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: instance", "DEL SimpleName: key", "DEL SimpleType: Set", "DEL SingleVariableDeclaration", "DEL TextElement:  the Class class for the specified id ", "DEL InfixExpression: ==", "DEL SimpleName: V", "DEL SimpleName: getClass", "DEL TagElement", "DEL IfStatement", "DEL Modifier: protected", "DEL FieldAccess", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleName: instance", "DEL SimpleName: setConf", "DEL SimpleName: instance", "DEL SimpleName: addToMap", "DEL VariableDeclarationFragment", "DEL SimpleName: getColumnIndex", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SimpleType: HashMap", "DEL SimpleName: Configuration", "DEL TypeLiteral", "DEL SimpleName: addToMap", "DEL SimpleName: instance", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: clear", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: instance", "DEL PrimitiveType: int", "DEL SimpleName: containsKey", "DEL TextElement:  ", "DEL Block", "DEL SimpleType: Integer", "DEL FieldAccess", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: instance", "DEL SimpleName: getColumnIndex", "DEL MethodInvocation", "DEL SimpleName: b", "DEL SimpleName: readByte", "DEL SimpleName: instance", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SimpleName: put", "DEL SimpleName: key", "DEL SimpleName: get", "DEL ParameterizedType: AtomicReference<Configuration>", "DEL StringLiteral: \"Nothing for : \"", "DEL SimpleName: Integer", "DEL TagElement", "DEL SimpleName: clazz", "DEL Modifier: public", "DEL SimpleName: instance", "DEL MethodInvocation", "DEL SimpleName: V", "DEL Modifier: final", "DEL SimpleName: e", "DEL SimpleName: value", "DEL ReturnStatement", "DEL SimpleName: out", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: entries", "DEL TypeParameter", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Byte", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL SingleMemberAnnotation", "DEL SimpleType: Configurable", "DEL TagElement: @return", "DEL SimpleName: Text", "DEL SimpleName: readInt", "DEL SimpleType: Configuration", "DEL Dimension", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Entry", "DEL SimpleName: code", "DEL PrimitiveType: void", "DEL SimpleType: Object", "DEL SimpleType: Integer", "DEL SimpleName: writeByte", "DEL SimpleName: ReflectionUtils", "DEL SimpleName: Integer", "DEL SimpleName: getValue", "DEL SimpleType: Byte", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: put", "DEL SimpleName: V", "DEL SimpleName: size", "DEL TagElement", "DEL SimpleType: Writable", "DEL Modifier: public", "DEL TypeLiteral", "DEL TextElement:  ", "DEL PostfixExpression: ++", "DEL PrimitiveType: byte", "DEL SimpleType: Class", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL PrimitiveType: void", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL SimpleName: Map", "DEL SimpleName: instance", "DEL SimpleName: conf", "DEL CastExpression", "DEL SimpleType: Class", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: i", "DEL ReturnStatement", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: instance", "DEL SimpleName: m", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: get", "DEL SimpleName: HashMap", "DEL SimpleName: addToMap", "DEL ParameterizedType: Map<Integer,V>", "DEL SimpleName: m", "DEL ParameterizedType: Map.Entry<Integer,V>", "DEL ExpressionStatement", "DEL SimpleType: Entry", "DEL SimpleName: CLASS_TO_CODE", "DEL FieldAccess", "DEL VariableDeclarationExpression", "DEL SimpleName: getConf", "DEL Modifier: public", "DEL CastExpression", "DEL PrimitiveType: int", "DEL ParameterizedType: Collection<V>", "DEL SimpleName: Class", "DEL SimpleName: v", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Byte", "DEL SimpleName: value", "DEL ParameterizedType: Class<?>", "DEL SimpleName: IOException", "DEL SimpleName: Writable", "DEL ExpressionStatement", "DEL SimpleName: instance", "DEL Modifier: public", "DEL SimpleType: Byte", "DEL WildcardType: ?", "DEL SimpleName: toString", "DEL SimpleName: out", "DEL TextElement:  the id for the specified Class ", "DEL Block", "DEL WildcardType: ? extends Integer", "DEL Block", "DEL SimpleName: instance", "DEL Block", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: Bytes", "DEL SimpleName: b", "DEL SimpleType: Set", "DEL VariableDeclarationStatement", "DEL SimpleName: Map", "DEL SimpleName: CLASS_TO_CODE", "DEL SingleVariableDeclaration", "DEL SimpleName: putAll", "DEL SimpleName: code", "DEL MethodInvocation", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleType: Integer", "DEL SimpleType: Configuration", "DEL WildcardType: ? extends V", "DEL SimpleName: ImmutableBytesWritable", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL SimpleName: Byte", "DEL MethodInvocation", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: entrySet", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL Block", "DEL SimpleType: HStoreKey", "DEL ReturnStatement", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: containsKey", "DEL SimpleName: key", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: HashMap", "DEL SimpleName: value", "DEL SimpleName: code", "DEL TextElement:  the conf to set ", "DEL SimpleName: clazz", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL MethodDeclaration", "DEL SimpleName: DataOutput", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement:  ", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: Collection", "DEL Javadoc", "DEL SimpleName: conf", "DEL ThrowStatement", "DEL SimpleName: code", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: conf", "DEL TagElement", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL ThisExpression", "DEL Javadoc", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Map<? extends Integer,? extends V>", "DEL Block", "DEL SimpleType: V", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: write", "DEL TextElement:  ", "DEL SimpleName: writeInt", "DEL SimpleName: value", "DEL SimpleName: Class", "DEL Block", "DEL SimpleName: in", "DEL SingleVariableDeclaration", "DEL SimpleName: instance", "DEL ForStatement", "DEL MethodDeclaration", "DEL ParameterizedType: TreeMap<Integer,V>", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ParameterizedType: HashMap<Byte,Class<?>>", "DEL SimpleType: Writable", "DEL SimpleName: HMapWritable", "DEL SimpleName: getId", "DEL SimpleName: Byte", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: K", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Set", "DEL Block", "DEL SimpleName: key", "DEL SimpleType: DataInput", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: entrySet", "DEL SimpleName: entries", "DEL SimpleName: CLASS_TO_CODE", "DEL SimpleName: HStoreKey", "DEL ParameterizedType: Map<Byte,Class<?>>", "DEL Javadoc", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: Collection", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: addToMap", "DEL TagElement", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: code", "DEL SimpleName: values", "DEL SimpleName: value", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: toString", "DEL SimpleType: HashMap", "DEL SimpleType: Map", "DEL InfixExpression: +", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: Writable", "DEL SimpleType: V", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: Configuration", "DEL SimpleType: Map.Entry", "DEL SimpleName: instance", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL SimpleName: V", "DEL SimpleType: NullPointerException", "DEL Block", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: get", "DEL SimpleName: e", "DEL Javadoc", "DEL Block", "DEL PostfixExpression: ++", "DEL ParameterizedType: Set<Integer>", "DEL Modifier: public", "DEL SimpleName: id", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: Map", "DEL SimpleType: Object", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL SimpleName: Writable", "DEL SimpleName: v", "DEL ThisExpression", "DEL SimpleName: b", "DEL SimpleName: clear", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: TreeMap", "DEL TagElement", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: Writable", "DEL Javadoc", "DEL NullLiteral", "DEL ArrayType: byte[]", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: AtomicReference", "DEL PostfixExpression: ++", "DEL Initializer", "DEL SimpleName: instance", "DEL SimpleName: isEmpty", "DEL Modifier: public", "DEL SimpleName: values", "DEL SimpleType: V", "DEL SimpleName: readFields", "DEL SimpleName: Class", "DEL SimpleName: Integer", "DEL SimpleName: conf", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: size", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL SimpleName: CODE_TO_CLASS", "DEL SimpleName: Byte", "DEL SimpleName: instance", "DEL Javadoc", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: getConf"]}]}}, {"HMapWritable_diff": {"operations": ["Delete TextElement: Copyright 2007 The Apache Software Foundation(0)", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(1)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(2)", "Delete TextElement: distributed with this work for additional information(3)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(4)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(5)", "Delete TextElement: \"License\"); you may not use this file except in compliance(6)", "Delete TextElement: with the License.  You may obtain a copy of the License at(7)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(8)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(9)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(10)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(11)", "Delete TextElement: See the License for the specific language governing permissions and(12)", "Delete TextElement: limitations under the License.(13)", "Delete TagElement(14)", "Delete Javadoc(15)", "Delete QualifiedName: org.apache.hama.io(16)", "Delete PackageDeclaration(17)", "Delete QualifiedName: java.io.DataInput(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.io.DataOutput(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.io.IOException(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.Collection(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.HashMap(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.Map(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.Set(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.TreeMap(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: java.util.concurrent.atomic.AtomicReference(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.hadoop.conf.Configurable(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: org.apache.hadoop.conf.Configuration(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: org.apache.hadoop.hbase.HStoreKey(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: org.apache.hadoop.hbase.io.ImmutableBytesWritable(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.hadoop.hbase.util.Bytes(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: org.apache.hadoop.io.Text(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: org.apache.hadoop.io.Writable(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: org.apache.hadoop.util.ReflectionUtils(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: org.apache.hama.util.BytesUtil(52)", "Delete ImportDeclaration(53)", "Delete Modifier: public(54)", "Delete SimpleName: HMapWritable(55)", "Delete SimpleName: K(56)", "Delete TypeParameter(57)", "Delete SimpleName: V(58)", "Delete TypeParameter(59)", "Delete SimpleName: Map(60)", "Delete SimpleType: Map(61)", "Delete SimpleName: Integer(62)", "Delete SimpleType: Integer(63)", "Delete SimpleName: V(64)", "Delete SimpleType: V(65)", "Delete ParameterizedType: Map<Integer,V>(66)", "Delete SimpleName: Writable(67)", "Delete SimpleType: Writable(68)", "Delete SimpleName: Configurable(69)", "Delete SimpleType: Configurable(70)", "Delete Modifier: private(71)", "Delete SimpleName: AtomicReference(72)", "Delete SimpleType: AtomicReference(73)", "Delete SimpleName: Configuration(74)", "Delete SimpleType: Configuration(75)", "Delete ParameterizedType: AtomicReference<Configuration>(76)", "Delete SimpleName: conf(77)", "Delete SimpleName: AtomicReference(78)", "Delete SimpleType: AtomicReference(79)", "Delete SimpleName: Configuration(80)", "Delete SimpleType: Configuration(81)", "Delete ParameterizedType: AtomicReference<Configuration>(82)", "Delete ClassInstanceCreation(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete Modifier: static(86)", "Delete Modifier: final(87)", "Delete SimpleName: Map(88)", "Delete SimpleType: Map(89)", "Delete SimpleName: Byte(90)", "Delete SimpleType: Byte(91)", "Delete SimpleName: Class(92)", "Delete SimpleType: Class(93)", "Delete WildcardType: ?(94)", "Delete ParameterizedType: Class<?>(95)", "Delete ParameterizedType: Map<Byte,Class<?>>(96)", "Delete SimpleName: CODE_TO_CLASS(97)", "Delete SimpleName: HashMap(98)", "Delete SimpleType: HashMap(99)", "Delete SimpleName: Byte(100)", "Delete SimpleType: Byte(101)", "Delete SimpleName: Class(102)", "Delete SimpleType: Class(103)", "Delete WildcardType: ?(104)", "Delete ParameterizedType: Class<?>(105)", "Delete ParameterizedType: HashMap<Byte,Class<?>>(106)", "Delete ClassInstanceCreation(107)", "Delete VariableDeclarationFragment(108)", "Delete FieldDeclaration(109)", "Delete Modifier: static(110)", "Delete Modifier: final(111)", "Delete SimpleName: Map(112)", "Delete SimpleType: Map(113)", "Delete SimpleName: Class(114)", "Delete SimpleType: Class(115)", "Delete WildcardType: ?(116)", "Delete ParameterizedType: Class<?>(117)", "Delete SimpleName: Byte(118)", "Delete SimpleType: Byte(119)", "Delete ParameterizedType: Map<Class<?>,Byte>(120)", "Delete SimpleName: CLASS_TO_CODE(121)", "Delete SimpleName: HashMap(122)", "Delete SimpleType: HashMap(123)", "Delete SimpleName: Class(124)", "Delete SimpleType: Class(125)", "Delete WildcardType: ?(126)", "Delete ParameterizedType: Class<?>(127)", "Delete SimpleName: Byte(128)", "Delete SimpleType: Byte(129)", "Delete ParameterizedType: HashMap<Class<?>,Byte>(130)", "Delete ClassInstanceCreation(131)", "Delete VariableDeclarationFragment(132)", "Delete FieldDeclaration(133)", "Delete Modifier: static(134)", "Delete PrimitiveType: byte(135)", "Delete SimpleName: code(136)", "Delete NumberLiteral: 0(137)", "Delete VariableDeclarationFragment(138)", "Delete VariableDeclarationStatement(139)", "Delete SimpleName: addToMap(140)", "Delete SimpleName: HStoreKey(141)", "Delete SimpleType: HStoreKey(142)", "Delete TypeLiteral(143)", "Delete SimpleName: code(144)", "Delete PostfixExpression: ++(145)", "Delete MethodInvocation(146)", "Delete ExpressionStatement(147)", "Delete SimpleName: addToMap(148)", "Delete SimpleName: ImmutableBytesWritable(149)", "Delete SimpleType: ImmutableBytesWritable(150)", "Delete TypeLiteral(151)", "Delete SimpleName: code(152)", "Delete PostfixExpression: ++(153)", "Delete MethodInvocation(154)", "Delete ExpressionStatement(155)", "Delete SimpleName: addToMap(156)", "Delete SimpleName: Text(157)", "Delete SimpleType: Text(158)", "Delete TypeLiteral(159)", "Delete SimpleName: code(160)", "Delete PostfixExpression: ++(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete SimpleName: addToMap(164)", "Delete SimpleName: DoubleEntry(165)", "Delete SimpleType: DoubleEntry(166)", "Delete TypeLiteral(167)", "Delete SimpleName: code(168)", "Delete PostfixExpression: ++(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)", "Delete SimpleName: addToMap(172)", "Delete PrimitiveType: byte(173)", "Delete Dimension(174)", "Delete ArrayType: byte[](175)", "Delete TypeLiteral(176)", "Delete SimpleName: code(177)", "Delete PostfixExpression: ++(178)", "Delete MethodInvocation(179)", "Delete ExpressionStatement(180)", "Delete Block(181)", "Delete Initializer(182)", "Delete SimpleName: SuppressWarnings(183)", "Delete StringLiteral: \"boxing\"(184)", "Delete SingleMemberAnnotation(185)", "Delete Modifier: private(186)", "Delete Modifier: static(187)", "Delete PrimitiveType: void(188)", "Delete SimpleName: addToMap(189)", "Delete Modifier: final(190)", "Delete SimpleName: Class(191)", "Delete SimpleType: Class(192)", "Delete WildcardType: ?(193)", "Delete ParameterizedType: Class<?>(194)", "Delete SimpleName: clazz(195)", "Delete SingleVariableDeclaration(196)", "Delete Modifier: final(197)", "Delete PrimitiveType: byte(198)", "Delete SimpleName: code(199)", "Delete SingleVariableDeclaration(200)", "Delete SimpleName: CLASS_TO_CODE(201)", "Delete SimpleName: put(202)", "Delete SimpleName: clazz(203)", "Delete SimpleName: code(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete SimpleName: CODE_TO_CLASS(207)", "Delete SimpleName: put(208)", "Delete SimpleName: code(209)", "Delete SimpleName: clazz(210)", "Delete MethodInvocation(211)", "Delete ExpressionStatement(212)", "Delete Block(213)", "Delete MethodDeclaration(214)", "Delete Modifier: private(215)", "Delete SimpleName: Map(216)", "Delete SimpleType: Map(217)", "Delete SimpleName: Integer(218)", "Delete SimpleType: Integer(219)", "Delete SimpleName: V(220)", "Delete SimpleType: V(221)", "Delete ParameterizedType: Map<Integer,V>(222)", "Delete SimpleName: instance(223)", "Delete SimpleName: TreeMap(224)", "Delete SimpleType: TreeMap(225)", "Delete SimpleName: Integer(226)", "Delete SimpleType: Integer(227)", "Delete SimpleName: V(228)", "Delete SimpleType: V(229)", "Delete ParameterizedType: TreeMap<Integer,V>(230)", "Delete ClassInstanceCreation(231)", "Delete VariableDeclarationFragment(232)", "Delete FieldDeclaration(233)", "Delete TextElement:  the conf (234)", "Delete TagElement: @return(235)", "Delete Javadoc(236)", "Delete Modifier: public(237)", "Delete SimpleName: Configuration(238)", "Delete SimpleType: Configuration(239)", "Delete SimpleName: getConf(240)", "Delete SimpleName: conf(241)", "Delete SimpleName: get(242)", "Delete MethodInvocation(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete MethodDeclaration(246)", "Delete SimpleName: conf(247)", "Delete TextElement:  the conf to set (248)", "Delete TagElement: @param(249)", "Delete Javadoc(250)", "Delete Modifier: public(251)", "Delete PrimitiveType: void(252)", "Delete SimpleName: setConf(253)", "Delete SimpleName: Configuration(254)", "Delete SimpleType: Configuration(255)", "Delete SimpleName: conf(256)", "Delete SingleVariableDeclaration(257)", "Delete ThisExpression(258)", "Delete SimpleName: conf(259)", "Delete FieldAccess(260)", "Delete SimpleName: set(261)", "Delete SimpleName: conf(262)", "Delete MethodInvocation(263)", "Delete ExpressionStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TagElement: @inheritDoc(267)", "Delete TextElement:  (268)", "Delete TagElement(269)", "Delete Javadoc(270)", "Delete Modifier: public(271)", "Delete PrimitiveType: void(272)", "Delete SimpleName: clear(273)", "Delete SimpleName: instance(274)", "Delete SimpleName: clear(275)", "Delete MethodInvocation(276)", "Delete ExpressionStatement(277)", "Delete Block(278)", "Delete MethodDeclaration(279)", "Delete TagElement: @inheritDoc(280)", "Delete TextElement:  (281)", "Delete TagElement(282)", "Delete Javadoc(283)", "Delete Modifier: public(284)", "Delete PrimitiveType: boolean(285)", "Delete SimpleName: containsKey(286)", "Delete SimpleName: Object(287)", "Delete SimpleType: Object(288)", "Delete SimpleName: key(289)", "Delete SingleVariableDeclaration(290)", "Delete SimpleName: instance(291)", "Delete SimpleName: containsKey(292)", "Delete SimpleName: key(293)", "Delete MethodInvocation(294)", "Delete ReturnStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete TagElement: @inheritDoc(298)", "Delete TextElement:  (299)", "Delete TagElement(300)", "Delete Javadoc(301)", "Delete Modifier: public(302)", "Delete PrimitiveType: boolean(303)", "Delete SimpleName: containsValue(304)", "Delete SimpleName: Object(305)", "Delete SimpleType: Object(306)", "Delete SimpleName: value(307)", "Delete SingleVariableDeclaration(308)", "Delete SimpleName: instance(309)", "Delete SimpleName: containsValue(310)", "Delete SimpleName: value(311)", "Delete MethodInvocation(312)", "Delete ReturnStatement(313)", "Delete Block(314)", "Delete MethodDeclaration(315)", "Delete TagElement: @inheritDoc(316)", "Delete TextElement:  (317)", "Delete TagElement(318)", "Delete Javadoc(319)", "Delete Modifier: public(320)", "Delete SimpleName: Set(321)", "Delete SimpleType: Set(322)", "Delete SimpleName: Entry(323)", "Delete SimpleType: Entry(324)", "Delete SimpleName: Integer(325)", "Delete SimpleType: Integer(326)", "Delete SimpleName: V(327)", "Delete SimpleType: V(328)", "Delete ParameterizedType: Entry<Integer,V>(329)", "Delete ParameterizedType: Set<Entry<Integer,V>>(330)", "Delete SimpleName: entrySet(331)", "Delete SimpleName: instance(332)", "Delete SimpleName: entrySet(333)", "Delete MethodInvocation(334)", "Delete ReturnStatement(335)", "Delete Block(336)", "Delete MethodDeclaration(337)", "Delete TagElement: @inheritDoc(338)", "Delete TextElement:  (339)", "Delete TagElement(340)", "Delete Javadoc(341)", "Delete Modifier: public(342)", "Delete SimpleName: V(343)", "Delete SimpleType: V(344)", "Delete SimpleName: get(345)", "Delete SimpleName: Object(346)", "Delete SimpleType: Object(347)", "Delete SimpleName: key(348)", "Delete SingleVariableDeclaration(349)", "Delete SimpleName: instance(350)", "Delete SimpleName: get(351)", "Delete SimpleName: key(352)", "Delete MethodInvocation(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete TagElement: @inheritDoc(357)", "Delete TextElement:  (358)", "Delete TagElement(359)", "Delete Javadoc(360)", "Delete Modifier: public(361)", "Delete PrimitiveType: boolean(362)", "Delete SimpleName: isEmpty(363)", "Delete SimpleName: instance(364)", "Delete SimpleName: isEmpty(365)", "Delete MethodInvocation(366)", "Delete ReturnStatement(367)", "Delete Block(368)", "Delete MethodDeclaration(369)", "Delete TagElement: @inheritDoc(370)", "Delete TextElement:  (371)", "Delete TagElement(372)", "Delete Javadoc(373)", "Delete Modifier: public(374)", "Delete SimpleName: Set(375)", "Delete SimpleType: Set(376)", "Delete SimpleName: Integer(377)", "Delete SimpleType: Integer(378)", "Delete ParameterizedType: Set<Integer>(379)", "Delete SimpleName: keySet(380)", "Delete SimpleName: instance(381)", "Delete SimpleName: keySet(382)", "Delete MethodInvocation(383)", "Delete ReturnStatement(384)", "Delete Block(385)", "Delete MethodDeclaration(386)", "Delete TagElement: @inheritDoc(387)", "Delete TextElement:  (388)", "Delete TagElement(389)", "Delete Javadoc(390)", "Delete Modifier: public(391)", "Delete PrimitiveType: int(392)", "Delete SimpleName: size(393)", "Delete SimpleName: instance(394)", "Delete SimpleName: size(395)", "Delete MethodInvocation(396)", "Delete ReturnStatement(397)", "Delete Block(398)", "Delete MethodDeclaration(399)", "Delete TagElement: @inheritDoc(400)", "Delete TextElement:  (401)", "Delete TagElement(402)", "Delete Javadoc(403)", "Delete Modifier: public(404)", "Delete SimpleName: Collection(405)", "Delete SimpleType: Collection(406)", "Delete SimpleName: V(407)", "Delete SimpleType: V(408)", "Delete ParameterizedType: Collection<V>(409)", "Delete SimpleName: values(410)", "Delete SimpleName: instance(411)", "Delete SimpleName: values(412)", "Delete MethodInvocation(413)", "Delete ReturnStatement(414)", "Delete Block(415)", "Delete MethodDeclaration(416)", "Delete TextElement:  the Class class for the specified id (417)", "Delete TagElement: @return(418)", "Delete Javadoc(419)", "Delete Modifier: protected(420)", "Delete SimpleName: Class(421)", "Delete SimpleType: Class(422)", "Delete WildcardType: ?(423)", "Delete ParameterizedType: Class<?>(424)", "Delete SimpleName: getClass(425)", "Delete PrimitiveType: byte(426)", "Delete SimpleName: id(427)", "Delete SingleVariableDeclaration(428)", "Delete SimpleName: CODE_TO_CLASS(429)", "Delete SimpleName: get(430)", "Delete SimpleName: id(431)", "Delete MethodInvocation(432)", "Delete ReturnStatement(433)", "Delete Block(434)", "Delete MethodDeclaration(435)", "Delete TextElement:  the id for the specified Class (436)", "Delete TagElement: @return(437)", "Delete Javadoc(438)", "Delete Modifier: protected(439)", "Delete PrimitiveType: byte(440)", "Delete SimpleName: getId(441)", "Delete SimpleName: Class(442)", "Delete SimpleType: Class(443)", "Delete WildcardType: ?(444)", "Delete ParameterizedType: Class<?>(445)", "Delete SimpleName: clazz(446)", "Delete SingleVariableDeclaration(447)", "Delete SimpleName: Byte(448)", "Delete SimpleType: Byte(449)", "Delete SimpleName: b(450)", "Delete SimpleName: CLASS_TO_CODE(451)", "Delete SimpleName: get(452)", "Delete SimpleName: clazz(453)", "Delete MethodInvocation(454)", "Delete VariableDeclarationFragment(455)", "Delete VariableDeclarationStatement(456)", "Delete SimpleName: b(457)", "Delete NullLiteral(458)", "Delete InfixExpression: ==(459)", "Delete SimpleName: NullPointerException(460)", "Delete SimpleType: NullPointerException(461)", "Delete StringLiteral: \"Nothing for : \"(462)", "Delete SimpleName: clazz(463)", "Delete InfixExpression: +(464)", "Delete ClassInstanceCreation(465)", "Delete ThrowStatement(466)", "Delete Block(467)", "Delete IfStatement(468)", "Delete SimpleName: b(469)", "Delete ReturnStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete SimpleName: Override(473)", "Delete MarkerAnnotation(474)", "Delete Modifier: public(475)", "Delete SimpleName: String(476)", "Delete SimpleType: String(477)", "Delete SimpleName: toString(478)", "Delete ThisExpression(479)", "Delete SimpleName: instance(480)", "Delete FieldAccess(481)", "Delete SimpleName: toString(482)", "Delete MethodInvocation(483)", "Delete ReturnStatement(484)", "Delete Block(485)", "Delete MethodDeclaration(486)", "Delete TagElement: @inheritDoc(487)", "Delete TextElement:  (488)", "Delete TagElement(489)", "Delete Javadoc(490)", "Delete Modifier: public(491)", "Delete PrimitiveType: void(492)", "Delete SimpleName: write(493)", "Delete SimpleName: DataOutput(494)", "Delete SimpleType: DataOutput(495)", "Delete SimpleName: out(496)", "Delete SingleVariableDeclaration(497)", "Delete SimpleName: IOException(498)", "Delete SimpleType: IOException(499)", "Delete SimpleName: out(500)", "Delete SimpleName: writeInt(501)", "Delete ThisExpression(502)", "Delete SimpleName: instance(503)", "Delete FieldAccess(504)", "Delete SimpleName: size(505)", "Delete MethodInvocation(506)", "Delete MethodInvocation(507)", "Delete ExpressionStatement(508)", "Delete QualifiedName: Map.Entry(509)", "Delete SimpleType: Map.Entry(510)", "Delete SimpleName: Integer(511)", "Delete SimpleType: Integer(512)", "Delete SimpleName: V(513)", "Delete SimpleType: V(514)", "Delete ParameterizedType: Map.Entry<Integer,V>(515)", "Delete SimpleName: e(516)", "Delete SingleVariableDeclaration(517)", "Delete SimpleName: instance(518)", "Delete SimpleName: entrySet(519)", "Delete MethodInvocation(520)", "Delete SimpleName: Bytes(521)", "Delete SimpleName: writeByteArray(522)", "Delete SimpleName: out(523)", "Delete SimpleName: BytesUtil(524)", "Delete SimpleName: getColumnIndex(525)", "Delete SimpleName: e(526)", "Delete SimpleName: getKey(527)", "Delete MethodInvocation(528)", "Delete MethodInvocation(529)", "Delete MethodInvocation(530)", "Delete ExpressionStatement(531)", "Delete SimpleName: out(532)", "Delete SimpleName: writeByte(533)", "Delete SimpleName: getId(534)", "Delete SimpleName: e(535)", "Delete SimpleName: getValue(536)", "Delete MethodInvocation(537)", "Delete SimpleName: getClass(538)", "Delete MethodInvocation(539)", "Delete MethodInvocation(540)", "Delete MethodInvocation(541)", "Delete ExpressionStatement(542)", "Delete SimpleName: Writable(543)", "Delete SimpleType: Writable(544)", "Delete SimpleName: e(545)", "Delete SimpleName: getValue(546)", "Delete MethodInvocation(547)", "Delete CastExpression(548)", "Delete ParenthesizedExpression(549)", "Delete SimpleName: write(550)", "Delete SimpleName: out(551)", "Delete MethodInvocation(552)", "Delete ExpressionStatement(553)", "Delete Block(554)", "Delete EnhancedForStatement(555)", "Delete Block(556)", "Delete MethodDeclaration(557)", "Delete TagElement: @inheritDoc(558)", "Delete TextElement:  (559)", "Delete TagElement(560)", "Delete Javadoc(561)", "Delete SimpleName: SuppressWarnings(562)", "Delete StringLiteral: \"unchecked\"(563)", "Delete SingleMemberAnnotation(564)", "Delete Modifier: public(565)", "Delete PrimitiveType: void(566)", "Delete SimpleName: readFields(567)", "Delete SimpleName: DataInput(568)", "Delete SimpleType: DataInput(569)", "Delete SimpleName: in(570)", "Delete SingleVariableDeclaration(571)", "Delete SimpleName: IOException(572)", "Delete SimpleType: IOException(573)", "Delete ThisExpression(574)", "Delete SimpleName: instance(575)", "Delete FieldAccess(576)", "Delete SimpleName: clear(577)", "Delete MethodInvocation(578)", "Delete ExpressionStatement(579)", "Delete PrimitiveType: int(580)", "Delete SimpleName: entries(581)", "Delete SimpleName: in(582)", "Delete SimpleName: readInt(583)", "Delete MethodInvocation(584)", "Delete VariableDeclarationFragment(585)", "Delete VariableDeclarationStatement(586)", "Delete PrimitiveType: int(587)", "Delete SimpleName: i(588)", "Delete NumberLiteral: 0(589)", "Delete VariableDeclarationFragment(590)", "Delete VariableDeclarationExpression(591)", "Delete SimpleName: i(592)", "Delete SimpleName: entries(593)", "Delete InfixExpression: <(594)", "Delete SimpleName: i(595)", "Delete PostfixExpression: ++(596)", "Delete PrimitiveType: byte(597)", "Delete Dimension(598)", "Delete ArrayType: byte[](599)", "Delete SimpleName: key(600)", "Delete SimpleName: Bytes(601)", "Delete SimpleName: readByteArray(602)", "Delete SimpleName: in(603)", "Delete MethodInvocation(604)", "Delete VariableDeclarationFragment(605)", "Delete VariableDeclarationStatement(606)", "Delete SimpleName: Writable(607)", "Delete SimpleType: Writable(608)", "Delete SimpleName: value(609)", "Delete SimpleName: Writable(610)", "Delete SimpleType: Writable(611)", "Delete SimpleName: ReflectionUtils(612)", "Delete SimpleName: newInstance(613)", "Delete SimpleName: getClass(614)", "Delete SimpleName: in(615)", "Delete SimpleName: readByte(616)", "Delete MethodInvocation(617)", "Delete MethodInvocation(618)", "Delete SimpleName: getConf(619)", "Delete MethodInvocation(620)", "Delete MethodInvocation(621)", "Delete CastExpression(622)", "Delete VariableDeclarationFragment(623)", "Delete VariableDeclarationStatement(624)", "Delete SimpleName: value(625)", "Delete SimpleName: readFields(626)", "Delete SimpleName: in(627)", "Delete MethodInvocation(628)", "Delete ExpressionStatement(629)", "Delete SimpleName: V(630)", "Delete SimpleType: V(631)", "Delete SimpleName: v(632)", "Delete SimpleName: V(633)", "Delete SimpleType: V(634)", "Delete SimpleName: value(635)", "Delete CastExpression(636)", "Delete VariableDeclarationFragment(637)", "Delete VariableDeclarationStatement(638)", "Delete ThisExpression(639)", "Delete SimpleName: instance(640)", "Delete FieldAccess(641)", "Delete SimpleName: put(642)", "Delete SimpleName: BytesUtil(643)", "Delete SimpleName: getColumnIndex(644)", "Delete SimpleName: key(645)", "Delete MethodInvocation(646)", "Delete SimpleName: v(647)", "Delete MethodInvocation(648)", "Delete ExpressionStatement(649)", "Delete Block(650)", "Delete ForStatement(651)", "Delete Block(652)", "Delete MethodDeclaration(653)", "Delete Modifier: public(654)", "Delete PrimitiveType: void(655)", "Delete SimpleName: putAll(656)", "Delete SimpleName: Map(657)", "Delete SimpleType: Map(658)", "Delete SimpleName: Integer(659)", "Delete SimpleType: Integer(660)", "Delete WildcardType: ? extends Integer(661)", "Delete SimpleName: V(662)", "Delete SimpleType: V(663)", "Delete WildcardType: ? extends V(664)", "Delete ParameterizedType: Map<? extends Integer,? extends V>(665)", "Delete SimpleName: m(666)", "Delete SingleVariableDeclaration(667)", "Delete ThisExpression(668)", "Delete SimpleName: instance(669)", "Delete FieldAccess(670)", "Delete SimpleName: putAll(671)", "Delete SimpleName: m(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete Block(675)", "Delete MethodDeclaration(676)", "Delete Modifier: public(677)", "Delete SimpleName: V(678)", "Delete SimpleType: V(679)", "Delete SimpleName: remove(680)", "Delete SimpleName: Object(681)", "Delete SimpleType: Object(682)", "Delete SimpleName: key(683)", "Delete SingleVariableDeclaration(684)", "Delete ThisExpression(685)", "Delete SimpleName: instance(686)", "Delete FieldAccess(687)", "Delete SimpleName: remove(688)", "Delete SimpleName: key(689)", "Delete MethodInvocation(690)", "Delete ReturnStatement(691)", "Delete Block(692)", "Delete MethodDeclaration(693)", "Delete Modifier: public(694)", "Delete SimpleName: V(695)", "Delete SimpleType: V(696)", "Delete SimpleName: put(697)", "Delete SimpleName: Integer(698)", "Delete SimpleType: Integer(699)", "Delete SimpleName: key(700)", "Delete SingleVariableDeclaration(701)", "Delete SimpleName: V(702)", "Delete SimpleType: V(703)", "Delete SimpleName: value(704)", "Delete SingleVariableDeclaration(705)", "Delete ThisExpression(706)", "Delete SimpleName: instance(707)", "Delete FieldAccess(708)", "Delete SimpleName: put(709)", "Delete SimpleName: key(710)", "Delete SimpleName: value(711)", "Delete MethodInvocation(712)", "Delete ReturnStatement(713)", "Delete Block(714)", "Delete MethodDeclaration(715)", "Delete TypeDeclaration: class(716)"]}}, {"VectorMapWritable_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: limitations under the License.", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL QualifiedName: org.apache.hama.io", "DEL TextElement: Copyright 2007 The Apache Software Foundation", "DEL PackageDeclaration", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TagElement", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL Javadoc", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: or more contributor license agreements.  See the NOTICE file"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.DataInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.DataOutput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.TreeMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.atomic.AtomicReference"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.conf.Configurable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.conf.Configuration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.HStoreKey"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.hbase.io.ImmutableBytesWritable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.util.Bytes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.io.Text", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.io.Writable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.util.ReflectionUtils", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.util.BytesUtil"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL SimpleName: putAll", "DEL SimpleName: SuppressWarnings", "DEL MethodInvocation", "DEL SimpleName: put", "DEL PostfixExpression: ++", "DEL SimpleName: key", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: addToMap", "DEL SingleMemberAnnotation", "DEL SimpleType: Integer", "DEL SimpleName: CODE_TO_CLASS", "DEL ReturnStatement", "DEL SimpleName: Integer", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL Modifier: protected", "DEL SimpleType: DoubleEntry", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: Configuration", "DEL SimpleName: write", "DEL SimpleName: AtomicReference", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: DoubleEntry", "DEL MethodInvocation", "DEL SimpleName: clear", "DEL Modifier: public", "DEL SimpleName: out", "DEL ThisExpression", "DEL SimpleName: Map", "DEL PostfixExpression: ++", "DEL Javadoc", "DEL TextElement:  ", "DEL SimpleName: Integer", "DEL SimpleType: V", "DEL SimpleName: newInstance", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: CODE_TO_CLASS", "DEL SimpleName: code", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL SimpleType: Byte", "DEL SimpleName: DataInput", "DEL SimpleName: code", "DEL SimpleType: Configuration", "DEL SimpleType: Integer", "DEL SimpleType: Writable", "DEL MethodDeclaration", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL SimpleType: Byte", "DEL SingleVariableDeclaration", "DEL SimpleName: Configurable", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: V", "DEL FieldAccess", "DEL SimpleName: remove", "DEL SimpleName: getKey", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL FieldAccess", "DEL SimpleName: key", "DEL SimpleName: containsValue", "DEL TextElement:  ", "DEL StringLiteral: \"boxing\"", "DEL SimpleName: code", "DEL TextElement:  ", "DEL SimpleName: writeByteArray", "DEL SimpleName: Integer", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL SimpleName: Configuration", "DEL SimpleName: Object", "DEL SimpleName: V", "DEL PrimitiveType: byte", "DEL ClassInstanceCreation", "DEL SimpleType: TreeMap", "DEL SimpleName: Class", "DEL SimpleName: BytesUtil", "DEL ParameterizedType: Entry<Integer,V>", "DEL SimpleName: conf", "DEL SimpleName: in", "DEL SimpleName: getClass", "DEL SimpleName: V", "DEL Modifier: static", "DEL SimpleName: conf", "DEL SimpleName: put", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: in", "DEL SimpleName: out", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: readByteArray", "DEL Modifier: final", "DEL Modifier: public", "DEL Javadoc", "DEL ParameterizedType: Map<Class<?>,Byte>", "DEL ParameterizedType: Class<?>", "DEL ExpressionStatement", "DEL SimpleName: code", "DEL SimpleName: IOException", "DEL TypeLiteral", "DEL SimpleName: clazz", "DEL SimpleName: in", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL SimpleType: DataOutput", "DEL ParameterizedType: HashMap<Class<?>,Byte>", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL SimpleName: get", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: containsValue", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: instance", "DEL SimpleType: V", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TagElement: @inheritDoc", "DEL TagElement", "DEL SimpleName: keySet", "DEL SimpleName: V", "DEL PostfixExpression: ++", "DEL ThisExpression", "DEL SimpleName: Configuration", "DEL SimpleType: Class", "DEL SimpleName: Set", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleType: ImmutableBytesWritable", "DEL SimpleName: getClass", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL SimpleName: keySet", "DEL SimpleName: value", "DEL PrimitiveType: byte", "DEL ParameterizedType: Map<Integer,V>", "DEL SimpleName: in", "DEL WildcardType: ?", "DEL SimpleType: Map", "DEL SimpleName: getValue", "DEL StringLiteral: \"unchecked\"", "DEL MethodDeclaration", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleType: V", "DEL Modifier: public", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: e", "DEL ThisExpression", "DEL TagElement: @inheritDoc", "DEL Modifier: public", "DEL SimpleName: isEmpty", "DEL Block", "DEL SimpleType: AtomicReference", "DEL SimpleName: V", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Integer", "DEL TypeParameter", "DEL SimpleName: Byte", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: String", "DEL InfixExpression: <", "DEL SimpleName: Object", "DEL Javadoc", "DEL ParameterizedType: AtomicReference<Configuration>", "DEL SimpleName: readFields", "DEL SimpleName: out", "DEL SimpleName: BytesUtil", "DEL ParameterizedType: Set<Entry<Integer,V>>", "DEL Modifier: public", "DEL FieldAccess", "DEL SimpleName: Bytes", "DEL Modifier: static", "DEL SimpleType: IOException", "DEL SimpleName: set", "DEL TagElement: @inheritDoc", "DEL SimpleName: addToMap", "DEL TextElement:  the conf ", "DEL MethodInvocation", "DEL SimpleName: put", "DEL SimpleType: Writable", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleType: IOException", "DEL TextElement:  ", "DEL SimpleName: Integer", "DEL SimpleName: V", "DEL SimpleName: id", "DEL SimpleType: Map", "DEL FieldDeclaration", "DEL SimpleName: AtomicReference", "DEL MethodDeclaration", "DEL SimpleType: Integer", "DEL SimpleName: instance", "DEL SimpleName: getId", "DEL SimpleName: V", "DEL TextElement:  ", "DEL Modifier: public", "DEL ParameterizedType: Class<?>", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL SimpleName: remove", "DEL Javadoc", "DEL ReturnStatement", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL Block", "DEL TextElement:  ", "DEL SimpleName: value", "DEL EnhancedForStatement", "DEL FieldDeclaration", "DEL SimpleType: Integer", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Text", "DEL WildcardType: ?", "DEL TagElement: @inheritDoc", "DEL SimpleName: entrySet", "DEL SimpleName: i", "DEL SimpleType: Class", "DEL ThisExpression", "DEL SimpleName: NullPointerException", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: instance", "DEL SimpleName: key", "DEL SimpleType: Set", "DEL SingleVariableDeclaration", "DEL TextElement:  the Class class for the specified id ", "DEL InfixExpression: ==", "DEL SimpleName: V", "DEL SimpleName: getClass", "DEL TagElement", "DEL IfStatement", "DEL Modifier: protected", "DEL FieldAccess", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleName: instance", "DEL SimpleName: setConf", "DEL SimpleName: instance", "DEL SimpleName: addToMap", "DEL VariableDeclarationFragment", "DEL SimpleName: getColumnIndex", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SimpleType: HashMap", "DEL SimpleName: Configuration", "DEL TypeLiteral", "DEL SimpleName: addToMap", "DEL SimpleName: instance", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: clear", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: instance", "DEL PrimitiveType: int", "DEL SimpleName: containsKey", "DEL TextElement:  ", "DEL Block", "DEL SimpleType: Integer", "DEL FieldAccess", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: instance", "DEL SimpleName: getColumnIndex", "DEL MethodInvocation", "DEL SimpleName: b", "DEL SimpleName: readByte", "DEL SimpleName: instance", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SimpleName: put", "DEL SimpleName: key", "DEL SimpleName: get", "DEL ParameterizedType: AtomicReference<Configuration>", "DEL StringLiteral: \"Nothing for : \"", "DEL SimpleName: Integer", "DEL TagElement", "DEL SimpleName: clazz", "DEL Modifier: public", "DEL SimpleName: instance", "DEL MethodInvocation", "DEL SimpleName: V", "DEL Modifier: final", "DEL SimpleName: e", "DEL SimpleName: value", "DEL ReturnStatement", "DEL SimpleName: out", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: entries", "DEL TypeParameter", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Byte", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL SingleMemberAnnotation", "DEL SimpleType: Configurable", "DEL TagElement: @return", "DEL SimpleName: Text", "DEL SimpleName: readInt", "DEL SimpleType: Configuration", "DEL Dimension", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Entry", "DEL SimpleName: code", "DEL PrimitiveType: void", "DEL SimpleType: Object", "DEL SimpleType: Integer", "DEL SimpleName: writeByte", "DEL SimpleName: ReflectionUtils", "DEL SimpleName: Integer", "DEL SimpleName: getValue", "DEL SimpleType: Byte", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: put", "DEL SimpleName: V", "DEL SimpleName: size", "DEL TagElement", "DEL SimpleType: Writable", "DEL Modifier: public", "DEL TypeLiteral", "DEL TextElement:  ", "DEL PostfixExpression: ++", "DEL PrimitiveType: byte", "DEL SimpleType: Class", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL PrimitiveType: void", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL SimpleName: Map", "DEL SimpleName: instance", "DEL SimpleName: conf", "DEL CastExpression", "DEL SimpleType: Class", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL Block", "DEL SimpleType: V", "DEL SimpleName: i", "DEL ReturnStatement", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: instance", "DEL SimpleName: m", "DEL VariableDeclarationFragment", "DEL PrimitiveType: byte", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: get", "DEL SimpleName: HashMap", "DEL SimpleName: addToMap", "DEL ParameterizedType: Map<Integer,V>", "DEL SimpleName: m", "DEL ParameterizedType: Map.Entry<Integer,V>", "DEL ExpressionStatement", "DEL SimpleType: Entry", "DEL SimpleName: CLASS_TO_CODE", "DEL FieldAccess", "DEL VariableDeclarationExpression", "DEL SimpleName: getConf", "DEL Modifier: public", "DEL CastExpression", "DEL PrimitiveType: int", "DEL ParameterizedType: Collection<V>", "DEL SimpleName: Class", "DEL SimpleName: v", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Byte", "DEL SimpleName: value", "DEL ParameterizedType: Class<?>", "DEL SimpleName: IOException", "DEL SimpleName: Writable", "DEL ExpressionStatement", "DEL SimpleName: instance", "DEL Modifier: public", "DEL SimpleType: Byte", "DEL WildcardType: ?", "DEL SimpleName: toString", "DEL SimpleName: out", "DEL TextElement:  the id for the specified Class ", "DEL Block", "DEL WildcardType: ? extends Integer", "DEL Block", "DEL SimpleName: instance", "DEL Block", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: Bytes", "DEL SimpleName: b", "DEL SimpleType: Set", "DEL VariableDeclarationStatement", "DEL SimpleName: Map", "DEL SimpleName: CLASS_TO_CODE", "DEL SingleVariableDeclaration", "DEL SimpleName: putAll", "DEL SimpleName: code", "DEL MethodInvocation", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleType: Integer", "DEL SimpleType: Configuration", "DEL WildcardType: ? extends V", "DEL SimpleName: ImmutableBytesWritable", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL SimpleName: Byte", "DEL MethodInvocation", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: entrySet", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL Block", "DEL SimpleType: HStoreKey", "DEL ReturnStatement", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: containsKey", "DEL SimpleName: key", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: HashMap", "DEL SimpleName: value", "DEL SimpleName: code", "DEL TextElement:  the conf to set ", "DEL SimpleName: clazz", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL MethodDeclaration", "DEL SimpleName: DataOutput", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement:  ", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: Collection", "DEL Javadoc", "DEL SimpleName: conf", "DEL ThrowStatement", "DEL SimpleName: code", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: conf", "DEL TagElement", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL ThisExpression", "DEL Javadoc", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Map<? extends Integer,? extends V>", "DEL Block", "DEL SimpleType: V", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: write", "DEL TextElement:  ", "DEL SimpleName: writeInt", "DEL SimpleName: value", "DEL SimpleName: Class", "DEL Block", "DEL SimpleName: in", "DEL SingleVariableDeclaration", "DEL SimpleName: instance", "DEL ForStatement", "DEL MethodDeclaration", "DEL ParameterizedType: TreeMap<Integer,V>", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ParameterizedType: HashMap<Byte,Class<?>>", "DEL SimpleType: Writable", "DEL SimpleName: VectorMapWritable", "DEL SimpleName: getId", "DEL SimpleName: Byte", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: K", "DEL ArrayType: byte[]", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Set", "DEL Block", "DEL SimpleName: key", "DEL SimpleType: DataInput", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: entrySet", "DEL SimpleName: entries", "DEL SimpleName: CLASS_TO_CODE", "DEL SimpleName: HStoreKey", "DEL ParameterizedType: Map<Byte,Class<?>>", "DEL Javadoc", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: Collection", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: addToMap", "DEL TagElement", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: code", "DEL SimpleName: values", "DEL SimpleName: value", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: toString", "DEL SimpleType: HashMap", "DEL SimpleType: Map", "DEL InfixExpression: +", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: Writable", "DEL SimpleType: V", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: Configuration", "DEL SimpleType: Map.Entry", "DEL SimpleName: instance", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL SimpleName: V", "DEL SimpleType: NullPointerException", "DEL Block", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: get", "DEL SimpleName: e", "DEL Javadoc", "DEL Block", "DEL PostfixExpression: ++", "DEL ParameterizedType: Set<Integer>", "DEL Modifier: public", "DEL SimpleName: id", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: Map", "DEL SimpleType: Object", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL SimpleName: Writable", "DEL SimpleName: v", "DEL ThisExpression", "DEL SimpleName: b", "DEL SimpleName: clear", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: TreeMap", "DEL TagElement", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: Writable", "DEL Javadoc", "DEL NullLiteral", "DEL ArrayType: byte[]", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: AtomicReference", "DEL PostfixExpression: ++", "DEL Initializer", "DEL SimpleName: instance", "DEL SimpleName: isEmpty", "DEL Modifier: public", "DEL SimpleName: values", "DEL SimpleType: V", "DEL SimpleName: readFields", "DEL SimpleName: Class", "DEL SimpleName: Integer", "DEL SimpleName: conf", "DEL SimpleType: V", "DEL MethodInvocation", "DEL SimpleName: size", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL SimpleName: CODE_TO_CLASS", "DEL SimpleName: Byte", "DEL SimpleName: instance", "DEL Javadoc", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: getConf"]}]}}, {"VectorMapWritable_diff": {"operations": ["Delete TextElement: Copyright 2007 The Apache Software Foundation(0)", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(1)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(2)", "Delete TextElement: distributed with this work for additional information(3)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(4)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(5)", "Delete TextElement: \"License\"); you may not use this file except in compliance(6)", "Delete TextElement: with the License.  You may obtain a copy of the License at(7)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(8)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(9)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(10)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(11)", "Delete TextElement: See the License for the specific language governing permissions and(12)", "Delete TextElement: limitations under the License.(13)", "Delete TagElement(14)", "Delete Javadoc(15)", "Delete QualifiedName: org.apache.hama.io(16)", "Delete PackageDeclaration(17)", "Delete QualifiedName: java.io.DataInput(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.io.DataOutput(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.io.IOException(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.Collection(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.HashMap(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.Map(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.Set(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.TreeMap(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: java.util.concurrent.atomic.AtomicReference(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.hadoop.conf.Configurable(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: org.apache.hadoop.conf.Configuration(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: org.apache.hadoop.hbase.HStoreKey(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: org.apache.hadoop.hbase.io.ImmutableBytesWritable(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.hadoop.hbase.util.Bytes(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: org.apache.hadoop.io.Text(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: org.apache.hadoop.io.Writable(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: org.apache.hadoop.util.ReflectionUtils(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: org.apache.hama.util.BytesUtil(52)", "Delete ImportDeclaration(53)", "Delete Modifier: public(54)", "Delete SimpleName: VectorMapWritable(55)", "Delete SimpleName: K(56)", "Delete TypeParameter(57)", "Delete SimpleName: V(58)", "Delete TypeParameter(59)", "Delete SimpleName: Map(60)", "Delete SimpleType: Map(61)", "Delete SimpleName: Integer(62)", "Delete SimpleType: Integer(63)", "Delete SimpleName: V(64)", "Delete SimpleType: V(65)", "Delete ParameterizedType: Map<Integer,V>(66)", "Delete SimpleName: Writable(67)", "Delete SimpleType: Writable(68)", "Delete SimpleName: Configurable(69)", "Delete SimpleType: Configurable(70)", "Delete Modifier: private(71)", "Delete SimpleName: AtomicReference(72)", "Delete SimpleType: AtomicReference(73)", "Delete SimpleName: Configuration(74)", "Delete SimpleType: Configuration(75)", "Delete ParameterizedType: AtomicReference<Configuration>(76)", "Delete SimpleName: conf(77)", "Delete SimpleName: AtomicReference(78)", "Delete SimpleType: AtomicReference(79)", "Delete SimpleName: Configuration(80)", "Delete SimpleType: Configuration(81)", "Delete ParameterizedType: AtomicReference<Configuration>(82)", "Delete ClassInstanceCreation(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete Modifier: static(86)", "Delete Modifier: final(87)", "Delete SimpleName: Map(88)", "Delete SimpleType: Map(89)", "Delete SimpleName: Byte(90)", "Delete SimpleType: Byte(91)", "Delete SimpleName: Class(92)", "Delete SimpleType: Class(93)", "Delete WildcardType: ?(94)", "Delete ParameterizedType: Class<?>(95)", "Delete ParameterizedType: Map<Byte,Class<?>>(96)", "Delete SimpleName: CODE_TO_CLASS(97)", "Delete SimpleName: HashMap(98)", "Delete SimpleType: HashMap(99)", "Delete SimpleName: Byte(100)", "Delete SimpleType: Byte(101)", "Delete SimpleName: Class(102)", "Delete SimpleType: Class(103)", "Delete WildcardType: ?(104)", "Delete ParameterizedType: Class<?>(105)", "Delete ParameterizedType: HashMap<Byte,Class<?>>(106)", "Delete ClassInstanceCreation(107)", "Delete VariableDeclarationFragment(108)", "Delete FieldDeclaration(109)", "Delete Modifier: static(110)", "Delete Modifier: final(111)", "Delete SimpleName: Map(112)", "Delete SimpleType: Map(113)", "Delete SimpleName: Class(114)", "Delete SimpleType: Class(115)", "Delete WildcardType: ?(116)", "Delete ParameterizedType: Class<?>(117)", "Delete SimpleName: Byte(118)", "Delete SimpleType: Byte(119)", "Delete ParameterizedType: Map<Class<?>,Byte>(120)", "Delete SimpleName: CLASS_TO_CODE(121)", "Delete SimpleName: HashMap(122)", "Delete SimpleType: HashMap(123)", "Delete SimpleName: Class(124)", "Delete SimpleType: Class(125)", "Delete WildcardType: ?(126)", "Delete ParameterizedType: Class<?>(127)", "Delete SimpleName: Byte(128)", "Delete SimpleType: Byte(129)", "Delete ParameterizedType: HashMap<Class<?>,Byte>(130)", "Delete ClassInstanceCreation(131)", "Delete VariableDeclarationFragment(132)", "Delete FieldDeclaration(133)", "Delete Modifier: static(134)", "Delete PrimitiveType: byte(135)", "Delete SimpleName: code(136)", "Delete NumberLiteral: 0(137)", "Delete VariableDeclarationFragment(138)", "Delete VariableDeclarationStatement(139)", "Delete SimpleName: addToMap(140)", "Delete SimpleName: HStoreKey(141)", "Delete SimpleType: HStoreKey(142)", "Delete TypeLiteral(143)", "Delete SimpleName: code(144)", "Delete PostfixExpression: ++(145)", "Delete MethodInvocation(146)", "Delete ExpressionStatement(147)", "Delete SimpleName: addToMap(148)", "Delete SimpleName: ImmutableBytesWritable(149)", "Delete SimpleType: ImmutableBytesWritable(150)", "Delete TypeLiteral(151)", "Delete SimpleName: code(152)", "Delete PostfixExpression: ++(153)", "Delete MethodInvocation(154)", "Delete ExpressionStatement(155)", "Delete SimpleName: addToMap(156)", "Delete SimpleName: Text(157)", "Delete SimpleType: Text(158)", "Delete TypeLiteral(159)", "Delete SimpleName: code(160)", "Delete PostfixExpression: ++(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete SimpleName: addToMap(164)", "Delete SimpleName: DoubleEntry(165)", "Delete SimpleType: DoubleEntry(166)", "Delete TypeLiteral(167)", "Delete SimpleName: code(168)", "Delete PostfixExpression: ++(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)", "Delete SimpleName: addToMap(172)", "Delete PrimitiveType: byte(173)", "Delete Dimension(174)", "Delete ArrayType: byte[](175)", "Delete TypeLiteral(176)", "Delete SimpleName: code(177)", "Delete PostfixExpression: ++(178)", "Delete MethodInvocation(179)", "Delete ExpressionStatement(180)", "Delete Block(181)", "Delete Initializer(182)", "Delete SimpleName: SuppressWarnings(183)", "Delete StringLiteral: \"boxing\"(184)", "Delete SingleMemberAnnotation(185)", "Delete Modifier: private(186)", "Delete Modifier: static(187)", "Delete PrimitiveType: void(188)", "Delete SimpleName: addToMap(189)", "Delete Modifier: final(190)", "Delete SimpleName: Class(191)", "Delete SimpleType: Class(192)", "Delete WildcardType: ?(193)", "Delete ParameterizedType: Class<?>(194)", "Delete SimpleName: clazz(195)", "Delete SingleVariableDeclaration(196)", "Delete Modifier: final(197)", "Delete PrimitiveType: byte(198)", "Delete SimpleName: code(199)", "Delete SingleVariableDeclaration(200)", "Delete SimpleName: CLASS_TO_CODE(201)", "Delete SimpleName: put(202)", "Delete SimpleName: clazz(203)", "Delete SimpleName: code(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete SimpleName: CODE_TO_CLASS(207)", "Delete SimpleName: put(208)", "Delete SimpleName: code(209)", "Delete SimpleName: clazz(210)", "Delete MethodInvocation(211)", "Delete ExpressionStatement(212)", "Delete Block(213)", "Delete MethodDeclaration(214)", "Delete Modifier: private(215)", "Delete SimpleName: Map(216)", "Delete SimpleType: Map(217)", "Delete SimpleName: Integer(218)", "Delete SimpleType: Integer(219)", "Delete SimpleName: V(220)", "Delete SimpleType: V(221)", "Delete ParameterizedType: Map<Integer,V>(222)", "Delete SimpleName: instance(223)", "Delete SimpleName: TreeMap(224)", "Delete SimpleType: TreeMap(225)", "Delete SimpleName: Integer(226)", "Delete SimpleType: Integer(227)", "Delete SimpleName: V(228)", "Delete SimpleType: V(229)", "Delete ParameterizedType: TreeMap<Integer,V>(230)", "Delete ClassInstanceCreation(231)", "Delete VariableDeclarationFragment(232)", "Delete FieldDeclaration(233)", "Delete TextElement:  the conf (234)", "Delete TagElement: @return(235)", "Delete Javadoc(236)", "Delete Modifier: public(237)", "Delete SimpleName: Configuration(238)", "Delete SimpleType: Configuration(239)", "Delete SimpleName: getConf(240)", "Delete SimpleName: conf(241)", "Delete SimpleName: get(242)", "Delete MethodInvocation(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete MethodDeclaration(246)", "Delete SimpleName: conf(247)", "Delete TextElement:  the conf to set (248)", "Delete TagElement: @param(249)", "Delete Javadoc(250)", "Delete Modifier: public(251)", "Delete PrimitiveType: void(252)", "Delete SimpleName: setConf(253)", "Delete SimpleName: Configuration(254)", "Delete SimpleType: Configuration(255)", "Delete SimpleName: conf(256)", "Delete SingleVariableDeclaration(257)", "Delete ThisExpression(258)", "Delete SimpleName: conf(259)", "Delete FieldAccess(260)", "Delete SimpleName: set(261)", "Delete SimpleName: conf(262)", "Delete MethodInvocation(263)", "Delete ExpressionStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TagElement: @inheritDoc(267)", "Delete TextElement:  (268)", "Delete TagElement(269)", "Delete Javadoc(270)", "Delete Modifier: public(271)", "Delete PrimitiveType: void(272)", "Delete SimpleName: clear(273)", "Delete SimpleName: instance(274)", "Delete SimpleName: clear(275)", "Delete MethodInvocation(276)", "Delete ExpressionStatement(277)", "Delete Block(278)", "Delete MethodDeclaration(279)", "Delete TagElement: @inheritDoc(280)", "Delete TextElement:  (281)", "Delete TagElement(282)", "Delete Javadoc(283)", "Delete Modifier: public(284)", "Delete PrimitiveType: boolean(285)", "Delete SimpleName: containsKey(286)", "Delete SimpleName: Object(287)", "Delete SimpleType: Object(288)", "Delete SimpleName: key(289)", "Delete SingleVariableDeclaration(290)", "Delete SimpleName: instance(291)", "Delete SimpleName: containsKey(292)", "Delete SimpleName: key(293)", "Delete MethodInvocation(294)", "Delete ReturnStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete TagElement: @inheritDoc(298)", "Delete TextElement:  (299)", "Delete TagElement(300)", "Delete Javadoc(301)", "Delete Modifier: public(302)", "Delete PrimitiveType: boolean(303)", "Delete SimpleName: containsValue(304)", "Delete SimpleName: Object(305)", "Delete SimpleType: Object(306)", "Delete SimpleName: value(307)", "Delete SingleVariableDeclaration(308)", "Delete SimpleName: instance(309)", "Delete SimpleName: containsValue(310)", "Delete SimpleName: value(311)", "Delete MethodInvocation(312)", "Delete ReturnStatement(313)", "Delete Block(314)", "Delete MethodDeclaration(315)", "Delete TagElement: @inheritDoc(316)", "Delete TextElement:  (317)", "Delete TagElement(318)", "Delete Javadoc(319)", "Delete Modifier: public(320)", "Delete SimpleName: Set(321)", "Delete SimpleType: Set(322)", "Delete SimpleName: Entry(323)", "Delete SimpleType: Entry(324)", "Delete SimpleName: Integer(325)", "Delete SimpleType: Integer(326)", "Delete SimpleName: V(327)", "Delete SimpleType: V(328)", "Delete ParameterizedType: Entry<Integer,V>(329)", "Delete ParameterizedType: Set<Entry<Integer,V>>(330)", "Delete SimpleName: entrySet(331)", "Delete SimpleName: instance(332)", "Delete SimpleName: entrySet(333)", "Delete MethodInvocation(334)", "Delete ReturnStatement(335)", "Delete Block(336)", "Delete MethodDeclaration(337)", "Delete TagElement: @inheritDoc(338)", "Delete TextElement:  (339)", "Delete TagElement(340)", "Delete Javadoc(341)", "Delete Modifier: public(342)", "Delete SimpleName: V(343)", "Delete SimpleType: V(344)", "Delete SimpleName: get(345)", "Delete SimpleName: Object(346)", "Delete SimpleType: Object(347)", "Delete SimpleName: key(348)", "Delete SingleVariableDeclaration(349)", "Delete SimpleName: instance(350)", "Delete SimpleName: get(351)", "Delete SimpleName: key(352)", "Delete MethodInvocation(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete TagElement: @inheritDoc(357)", "Delete TextElement:  (358)", "Delete TagElement(359)", "Delete Javadoc(360)", "Delete Modifier: public(361)", "Delete PrimitiveType: boolean(362)", "Delete SimpleName: isEmpty(363)", "Delete SimpleName: instance(364)", "Delete SimpleName: isEmpty(365)", "Delete MethodInvocation(366)", "Delete ReturnStatement(367)", "Delete Block(368)", "Delete MethodDeclaration(369)", "Delete TagElement: @inheritDoc(370)", "Delete TextElement:  (371)", "Delete TagElement(372)", "Delete Javadoc(373)", "Delete Modifier: public(374)", "Delete SimpleName: Set(375)", "Delete SimpleType: Set(376)", "Delete SimpleName: Integer(377)", "Delete SimpleType: Integer(378)", "Delete ParameterizedType: Set<Integer>(379)", "Delete SimpleName: keySet(380)", "Delete SimpleName: instance(381)", "Delete SimpleName: keySet(382)", "Delete MethodInvocation(383)", "Delete ReturnStatement(384)", "Delete Block(385)", "Delete MethodDeclaration(386)", "Delete TagElement: @inheritDoc(387)", "Delete TextElement:  (388)", "Delete TagElement(389)", "Delete Javadoc(390)", "Delete Modifier: public(391)", "Delete PrimitiveType: int(392)", "Delete SimpleName: size(393)", "Delete SimpleName: instance(394)", "Delete SimpleName: size(395)", "Delete MethodInvocation(396)", "Delete ReturnStatement(397)", "Delete Block(398)", "Delete MethodDeclaration(399)", "Delete TagElement: @inheritDoc(400)", "Delete TextElement:  (401)", "Delete TagElement(402)", "Delete Javadoc(403)", "Delete Modifier: public(404)", "Delete SimpleName: Collection(405)", "Delete SimpleType: Collection(406)", "Delete SimpleName: V(407)", "Delete SimpleType: V(408)", "Delete ParameterizedType: Collection<V>(409)", "Delete SimpleName: values(410)", "Delete SimpleName: instance(411)", "Delete SimpleName: values(412)", "Delete MethodInvocation(413)", "Delete ReturnStatement(414)", "Delete Block(415)", "Delete MethodDeclaration(416)", "Delete TextElement:  the Class class for the specified id (417)", "Delete TagElement: @return(418)", "Delete Javadoc(419)", "Delete Modifier: protected(420)", "Delete SimpleName: Class(421)", "Delete SimpleType: Class(422)", "Delete WildcardType: ?(423)", "Delete ParameterizedType: Class<?>(424)", "Delete SimpleName: getClass(425)", "Delete PrimitiveType: byte(426)", "Delete SimpleName: id(427)", "Delete SingleVariableDeclaration(428)", "Delete SimpleName: CODE_TO_CLASS(429)", "Delete SimpleName: get(430)", "Delete SimpleName: id(431)", "Delete MethodInvocation(432)", "Delete ReturnStatement(433)", "Delete Block(434)", "Delete MethodDeclaration(435)", "Delete TextElement:  the id for the specified Class (436)", "Delete TagElement: @return(437)", "Delete Javadoc(438)", "Delete Modifier: protected(439)", "Delete PrimitiveType: byte(440)", "Delete SimpleName: getId(441)", "Delete SimpleName: Class(442)", "Delete SimpleType: Class(443)", "Delete WildcardType: ?(444)", "Delete ParameterizedType: Class<?>(445)", "Delete SimpleName: clazz(446)", "Delete SingleVariableDeclaration(447)", "Delete SimpleName: Byte(448)", "Delete SimpleType: Byte(449)", "Delete SimpleName: b(450)", "Delete SimpleName: CLASS_TO_CODE(451)", "Delete SimpleName: get(452)", "Delete SimpleName: clazz(453)", "Delete MethodInvocation(454)", "Delete VariableDeclarationFragment(455)", "Delete VariableDeclarationStatement(456)", "Delete SimpleName: b(457)", "Delete NullLiteral(458)", "Delete InfixExpression: ==(459)", "Delete SimpleName: NullPointerException(460)", "Delete SimpleType: NullPointerException(461)", "Delete StringLiteral: \"Nothing for : \"(462)", "Delete SimpleName: clazz(463)", "Delete InfixExpression: +(464)", "Delete ClassInstanceCreation(465)", "Delete ThrowStatement(466)", "Delete Block(467)", "Delete IfStatement(468)", "Delete SimpleName: b(469)", "Delete ReturnStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete SimpleName: Override(473)", "Delete MarkerAnnotation(474)", "Delete Modifier: public(475)", "Delete SimpleName: String(476)", "Delete SimpleType: String(477)", "Delete SimpleName: toString(478)", "Delete ThisExpression(479)", "Delete SimpleName: instance(480)", "Delete FieldAccess(481)", "Delete SimpleName: toString(482)", "Delete MethodInvocation(483)", "Delete ReturnStatement(484)", "Delete Block(485)", "Delete MethodDeclaration(486)", "Delete TagElement: @inheritDoc(487)", "Delete TextElement:  (488)", "Delete TagElement(489)", "Delete Javadoc(490)", "Delete Modifier: public(491)", "Delete PrimitiveType: void(492)", "Delete SimpleName: write(493)", "Delete SimpleName: DataOutput(494)", "Delete SimpleType: DataOutput(495)", "Delete SimpleName: out(496)", "Delete SingleVariableDeclaration(497)", "Delete SimpleName: IOException(498)", "Delete SimpleType: IOException(499)", "Delete SimpleName: out(500)", "Delete SimpleName: writeInt(501)", "Delete ThisExpression(502)", "Delete SimpleName: instance(503)", "Delete FieldAccess(504)", "Delete SimpleName: size(505)", "Delete MethodInvocation(506)", "Delete MethodInvocation(507)", "Delete ExpressionStatement(508)", "Delete QualifiedName: Map.Entry(509)", "Delete SimpleType: Map.Entry(510)", "Delete SimpleName: Integer(511)", "Delete SimpleType: Integer(512)", "Delete SimpleName: V(513)", "Delete SimpleType: V(514)", "Delete ParameterizedType: Map.Entry<Integer,V>(515)", "Delete SimpleName: e(516)", "Delete SingleVariableDeclaration(517)", "Delete SimpleName: instance(518)", "Delete SimpleName: entrySet(519)", "Delete MethodInvocation(520)", "Delete SimpleName: Bytes(521)", "Delete SimpleName: writeByteArray(522)", "Delete SimpleName: out(523)", "Delete SimpleName: BytesUtil(524)", "Delete SimpleName: getColumnIndex(525)", "Delete SimpleName: e(526)", "Delete SimpleName: getKey(527)", "Delete MethodInvocation(528)", "Delete MethodInvocation(529)", "Delete MethodInvocation(530)", "Delete ExpressionStatement(531)", "Delete SimpleName: out(532)", "Delete SimpleName: writeByte(533)", "Delete SimpleName: getId(534)", "Delete SimpleName: e(535)", "Delete SimpleName: getValue(536)", "Delete MethodInvocation(537)", "Delete SimpleName: getClass(538)", "Delete MethodInvocation(539)", "Delete MethodInvocation(540)", "Delete MethodInvocation(541)", "Delete ExpressionStatement(542)", "Delete SimpleName: Writable(543)", "Delete SimpleType: Writable(544)", "Delete SimpleName: e(545)", "Delete SimpleName: getValue(546)", "Delete MethodInvocation(547)", "Delete CastExpression(548)", "Delete ParenthesizedExpression(549)", "Delete SimpleName: write(550)", "Delete SimpleName: out(551)", "Delete MethodInvocation(552)", "Delete ExpressionStatement(553)", "Delete Block(554)", "Delete EnhancedForStatement(555)", "Delete Block(556)", "Delete MethodDeclaration(557)", "Delete TagElement: @inheritDoc(558)", "Delete TextElement:  (559)", "Delete TagElement(560)", "Delete Javadoc(561)", "Delete SimpleName: SuppressWarnings(562)", "Delete StringLiteral: \"unchecked\"(563)", "Delete SingleMemberAnnotation(564)", "Delete Modifier: public(565)", "Delete PrimitiveType: void(566)", "Delete SimpleName: readFields(567)", "Delete SimpleName: DataInput(568)", "Delete SimpleType: DataInput(569)", "Delete SimpleName: in(570)", "Delete SingleVariableDeclaration(571)", "Delete SimpleName: IOException(572)", "Delete SimpleType: IOException(573)", "Delete ThisExpression(574)", "Delete SimpleName: instance(575)", "Delete FieldAccess(576)", "Delete SimpleName: clear(577)", "Delete MethodInvocation(578)", "Delete ExpressionStatement(579)", "Delete PrimitiveType: int(580)", "Delete SimpleName: entries(581)", "Delete SimpleName: in(582)", "Delete SimpleName: readInt(583)", "Delete MethodInvocation(584)", "Delete VariableDeclarationFragment(585)", "Delete VariableDeclarationStatement(586)", "Delete PrimitiveType: int(587)", "Delete SimpleName: i(588)", "Delete NumberLiteral: 0(589)", "Delete VariableDeclarationFragment(590)", "Delete VariableDeclarationExpression(591)", "Delete SimpleName: i(592)", "Delete SimpleName: entries(593)", "Delete InfixExpression: <(594)", "Delete SimpleName: i(595)", "Delete PostfixExpression: ++(596)", "Delete PrimitiveType: byte(597)", "Delete Dimension(598)", "Delete ArrayType: byte[](599)", "Delete SimpleName: key(600)", "Delete SimpleName: Bytes(601)", "Delete SimpleName: readByteArray(602)", "Delete SimpleName: in(603)", "Delete MethodInvocation(604)", "Delete VariableDeclarationFragment(605)", "Delete VariableDeclarationStatement(606)", "Delete SimpleName: Writable(607)", "Delete SimpleType: Writable(608)", "Delete SimpleName: value(609)", "Delete SimpleName: Writable(610)", "Delete SimpleType: Writable(611)", "Delete SimpleName: ReflectionUtils(612)", "Delete SimpleName: newInstance(613)", "Delete SimpleName: getClass(614)", "Delete SimpleName: in(615)", "Delete SimpleName: readByte(616)", "Delete MethodInvocation(617)", "Delete MethodInvocation(618)", "Delete SimpleName: getConf(619)", "Delete MethodInvocation(620)", "Delete MethodInvocation(621)", "Delete CastExpression(622)", "Delete VariableDeclarationFragment(623)", "Delete VariableDeclarationStatement(624)", "Delete SimpleName: value(625)", "Delete SimpleName: readFields(626)", "Delete SimpleName: in(627)", "Delete MethodInvocation(628)", "Delete ExpressionStatement(629)", "Delete SimpleName: V(630)", "Delete SimpleType: V(631)", "Delete SimpleName: v(632)", "Delete SimpleName: V(633)", "Delete SimpleType: V(634)", "Delete SimpleName: value(635)", "Delete CastExpression(636)", "Delete VariableDeclarationFragment(637)", "Delete VariableDeclarationStatement(638)", "Delete ThisExpression(639)", "Delete SimpleName: instance(640)", "Delete FieldAccess(641)", "Delete SimpleName: put(642)", "Delete SimpleName: BytesUtil(643)", "Delete SimpleName: getColumnIndex(644)", "Delete SimpleName: key(645)", "Delete MethodInvocation(646)", "Delete SimpleName: v(647)", "Delete MethodInvocation(648)", "Delete ExpressionStatement(649)", "Delete Block(650)", "Delete ForStatement(651)", "Delete Block(652)", "Delete MethodDeclaration(653)", "Delete Modifier: public(654)", "Delete PrimitiveType: void(655)", "Delete SimpleName: putAll(656)", "Delete SimpleName: Map(657)", "Delete SimpleType: Map(658)", "Delete SimpleName: Integer(659)", "Delete SimpleType: Integer(660)", "Delete WildcardType: ? extends Integer(661)", "Delete SimpleName: V(662)", "Delete SimpleType: V(663)", "Delete WildcardType: ? extends V(664)", "Delete ParameterizedType: Map<? extends Integer,? extends V>(665)", "Delete SimpleName: m(666)", "Delete SingleVariableDeclaration(667)", "Delete ThisExpression(668)", "Delete SimpleName: instance(669)", "Delete FieldAccess(670)", "Delete SimpleName: putAll(671)", "Delete SimpleName: m(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete Block(675)", "Delete MethodDeclaration(676)", "Delete Modifier: public(677)", "Delete SimpleName: V(678)", "Delete SimpleType: V(679)", "Delete SimpleName: remove(680)", "Delete SimpleName: Object(681)", "Delete SimpleType: Object(682)", "Delete SimpleName: key(683)", "Delete SingleVariableDeclaration(684)", "Delete ThisExpression(685)", "Delete SimpleName: instance(686)", "Delete FieldAccess(687)", "Delete SimpleName: remove(688)", "Delete SimpleName: key(689)", "Delete MethodInvocation(690)", "Delete ReturnStatement(691)", "Delete Block(692)", "Delete MethodDeclaration(693)", "Delete Modifier: public(694)", "Delete SimpleName: V(695)", "Delete SimpleType: V(696)", "Delete SimpleName: put(697)", "Delete SimpleName: Integer(698)", "Delete SimpleType: Integer(699)", "Delete SimpleName: key(700)", "Delete SingleVariableDeclaration(701)", "Delete SimpleName: V(702)", "Delete SimpleType: V(703)", "Delete SimpleName: value(704)", "Delete SingleVariableDeclaration(705)", "Delete ThisExpression(706)", "Delete SimpleName: instance(707)", "Delete FieldAccess(708)", "Delete SimpleName: put(709)", "Delete SimpleName: key(710)", "Delete SimpleName: value(711)", "Delete MethodInvocation(712)", "Delete ReturnStatement(713)", "Delete Block(714)", "Delete MethodDeclaration(715)", "Delete TypeDeclaration: class(716)"]}}, {"VectorUpdate_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.hadoop.io.IntWritable to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: org.apache.hadoop.io.MapWritable to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: org.apache.hadoop.io.Writable to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: putAll to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<Writable,Writable> at 0", "INS SimpleName: entries to MethodInvocation at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: IntWritable to SimpleType: IntWritable at 0", "INS MethodInvocation to CastExpression at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleType: DoubleEntry to CastExpression at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS EnhancedForStatement to Block at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: Writable to SimpleType: Writable at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: entrySet to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: entries to SingleVariableDeclaration at 1", "INS SimpleType: IntWritable to CastExpression at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: getKey to MethodInvocation at 1", "INS SimpleName: MapWritable to SimpleType: MapWritable at 0", "INS SimpleName: e to MethodInvocation at 0", "INS ParameterizedType: Map.Entry<Writable,Writable> to SingleVariableDeclaration at 0", "INS SimpleName: DoubleEntry to SimpleType: DoubleEntry at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Block to EnhancedForStatement at 2", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS SimpleName: put to MethodInvocation at 0", "INS SimpleType: Writable to ParameterizedType: Map.Entry<Writable,Writable> at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS MethodInvocation to CastExpression at 1", "INS SimpleType: MapWritable to SingleVariableDeclaration at 0", "INS SimpleType: Writable to ParameterizedType: Map.Entry<Writable,Writable> at 2", "INS SimpleName: Writable to SimpleType: Writable at 0"]}]}}, {"VectorUpdate_diff": {"operations": ["Insert ImportDeclaration(29) into CompilationUnit(333) at 6", "Insert ImportDeclaration(31) into CompilationUnit(333) at 7", "Insert ImportDeclaration(33) into CompilationUnit(333) at 8", "Insert QualifiedName: org.apache.hadoop.io.IntWritable(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: org.apache.hadoop.io.MapWritable(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: org.apache.hadoop.io.Writable(32) into ImportDeclaration(33) at 0", "Insert MethodDeclaration(331) into TypeDeclaration: class(332) at 13", "Insert Modifier: public(288) into MethodDeclaration(331) at 0", "Insert PrimitiveType: void(289) into MethodDeclaration(331) at 1", "Insert SimpleName: putAll(290) into MethodDeclaration(331) at 2", "Insert SingleVariableDeclaration(294) into MethodDeclaration(331) at 3", "Insert Block(330) into MethodDeclaration(331) at 4", "Insert SimpleType: MapWritable(292) into SingleVariableDeclaration(294) at 0", "Insert SimpleName: entries(293) into SingleVariableDeclaration(294) at 1", "Insert EnhancedForStatement(329) into Block(330) at 0", "Insert SimpleName: MapWritable(291) into SimpleType: MapWritable(292) at 0", "Insert SingleVariableDeclaration(303) into EnhancedForStatement(329) at 0", "Insert MethodInvocation(306) into EnhancedForStatement(329) at 1", "Insert Block(328) into EnhancedForStatement(329) at 2", "Insert ParameterizedType: Map.Entry<Writable,Writable>(301) into SingleVariableDeclaration(303) at 0", "Insert SimpleName: e(302) into SingleVariableDeclaration(303) at 1", "Insert SimpleName: entries(304) into MethodInvocation(306) at 0", "Insert SimpleName: entrySet(305) into MethodInvocation(306) at 1", "Insert ExpressionStatement(327) into Block(328) at 0", "Insert SimpleType: Map.Entry(296) into ParameterizedType: Map.Entry<Writable,Writable>(301) at 0", "Insert SimpleType: Writable(298) into ParameterizedType: Map.Entry<Writable,Writable>(301) at 1", "Insert SimpleType: Writable(300) into ParameterizedType: Map.Entry<Writable,Writable>(301) at 2", "Insert MethodInvocation(326) into ExpressionStatement(327) at 0", "Insert QualifiedName: Map.Entry(295) into SimpleType: Map.Entry(296) at 0", "Insert SimpleName: Writable(297) into SimpleType: Writable(298) at 0", "Insert SimpleName: Writable(299) into SimpleType: Writable(300) at 0", "Insert SimpleName: put(307) into MethodInvocation(326) at 0", "Insert MethodInvocation(316) into MethodInvocation(326) at 1", "Insert MethodInvocation(325) into MethodInvocation(326) at 2", "Insert ParenthesizedExpression(314) into MethodInvocation(316) at 0", "Insert SimpleName: get(315) into MethodInvocation(316) at 1", "Insert ParenthesizedExpression(323) into MethodInvocation(325) at 0", "Insert SimpleName: getValue(324) into MethodInvocation(325) at 1", "Insert CastExpression(313) into ParenthesizedExpression(314) at 0", "Insert CastExpression(322) into ParenthesizedExpression(323) at 0", "Insert SimpleType: IntWritable(309) into CastExpression(313) at 0", "Insert MethodInvocation(312) into CastExpression(313) at 1", "Insert SimpleType: DoubleEntry(318) into CastExpression(322) at 0", "Insert MethodInvocation(321) into CastExpression(322) at 1", "Insert SimpleName: IntWritable(308) into SimpleType: IntWritable(309) at 0", "Insert SimpleName: e(310) into MethodInvocation(312) at 0", "Insert SimpleName: getKey(311) into MethodInvocation(312) at 1", "Insert SimpleName: DoubleEntry(317) into SimpleType: DoubleEntry(318) at 0", "Insert SimpleName: e(319) into MethodInvocation(321) at 0", "Insert SimpleName: getValue(320) into MethodInvocation(321) at 1"]}}, {"VectorWritable_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TagElement", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: Copyright 2007 The Apache Software Foundation", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: limitations under the License.", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL PackageDeclaration", "DEL Javadoc", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL QualifiedName: org.apache.hama.io", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.DataInput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.DataOutput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.TreeSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.util.Bytes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.io.Writable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hama.DenseVector", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hama.Vector", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hama.util.BytesUtil", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL WildcardType: ? extends Integer", "DEL ClassInstanceCreation", "DEL SimpleName: c", "DEL SimpleName: column", "DEL SimpleType: HMapWritable", "DEL SimpleName: entries", "DEL MethodInvocation", "DEL ReturnStatement", "DEL WildcardType: ? extends DoubleEntry", "DEL SimpleName: Collection", "DEL SimpleName: Integer", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL FieldAccess", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: TreeSet", "DEL Block", "DEL SimpleName: result", "DEL SimpleName: entries", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleType: DoubleEntry", "DEL SingleVariableDeclaration", "DEL Block", "DEL StringLiteral: \"VectorWritable is read-only!\"", "DEL SimpleType: DoubleEntry", "DEL StringLiteral: \"Don't support containsValue!\"", "DEL SimpleName: row", "DEL SimpleName: entries", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: row", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: DataOutput", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: VectorWritable", "DEL SimpleName: entry", "DEL SimpleName: value", "DEL SimpleName: entries", "DEL SingleVariableDeclaration", "DEL SimpleType: Map", "DEL MethodDeclaration", "DEL Modifier: final", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: Double", "DEL SimpleType: Vector", "DEL SimpleName: addition", "DEL MethodDeclaration", "DEL SimpleName: UnsupportedOperationException", "DEL PrimitiveType: boolean", "DEL SimpleName: Map", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL SimpleName: HMapWritable", "DEL SimpleType: HMapWritable", "DEL SimpleName: Integer", "DEL TypeDeclaration: class", "DEL SimpleName: entries", "DEL SimpleName: DoubleEntry", "DEL SimpleType: Writable", "DEL SimpleName: column", "DEL Modifier: public", "DEL QualifiedName: Map.Entry", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL Block", "DEL Block", "DEL ParameterizedType: Map<? extends Integer,? extends DoubleEntry>", "DEL ExpressionStatement", "DEL StringLiteral: \"Not implemented yet\"", "DEL Block", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL SimpleType: DoubleEntry", "DEL SimpleType: DoubleEntry", "DEL SimpleName: isEmpty", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: readByteArray", "DEL SimpleType: DoubleEntry", "DEL FieldAccess", "DEL SimpleName: key", "DEL SimpleName: row", "DEL SingleVariableDeclaration", "DEL Block", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: VectorWritable", "DEL ReturnStatement", "DEL SimpleType: Integer", "DEL ParameterizedType: Map<Integer,DoubleEntry>", "DEL Modifier: final", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleName: UnsupportedOperationException", "DEL Javadoc", "DEL ThisExpression", "DEL Block", "DEL SimpleName: Entries", "DEL SimpleName: getValue", "DEL QualifiedName: Map.Entry", "DEL SimpleName: DoubleEntry", "DEL SimpleName: remove", "DEL SimpleName: readFields", "DEL SimpleName: get", "DEL Assignment: =", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL ParameterizedType: Collection<DoubleEntry>", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: BytesUtil", "DEL SimpleName: Integer", "DEL SimpleName: HMapWritable", "DEL SimpleName: entries", "DEL FieldDeclaration", "DEL FieldAccess", "DEL ParameterizedType: Set<Integer>", "DEL SimpleName: row", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: DoubleEntry", "DEL ReturnStatement", "DEL Block", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleType: Set", "DEL SimpleType: IOException", "DEL SimpleType: IOException", "DEL QualifiedName: v.entries", "DEL SimpleName: entries", "DEL EnhancedForStatement", "DEL ThisExpression", "DEL ThrowStatement", "DEL SimpleName: DoubleEntry", "DEL SimpleName: DataInput", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL ParameterizedType: HMapWritable<Integer,DoubleEntry>", "DEL Modifier: public", "DEL Block", "DEL SimpleName: entrySet", "DEL PrimitiveType: byte", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: VectorWritable", "DEL StringLiteral: \"VectorDatum is read-only!\"", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: DenseVector", "DEL ThisExpression", "DEL SimpleName: DoubleEntry", "DEL SimpleType: Integer", "DEL ThrowStatement", "DEL SimpleName: result", "DEL Dimension", "DEL SimpleName: entries", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL FieldAccess", "DEL SimpleType: Integer", "DEL SingleVariableDeclaration", "DEL SimpleName: ArrayList", "DEL ThrowStatement", "DEL SimpleName: get", "DEL ReturnStatement", "DEL SimpleType: DoubleEntry", "DEL SimpleName: entry", "DEL TagElement", "DEL SimpleType: HMapWritable", "DEL SimpleName: in", "DEL SimpleName: getKey", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: write", "DEL MethodDeclaration", "DEL ArrayType: byte[]", "DEL SimpleName: key", "DEL SimpleName: Integer", "DEL SimpleType: DoubleEntry", "DEL Block", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL SimpleType: UnsupportedOperationException", "DEL ExpressionStatement", "DEL SimpleName: DoubleEntry", "DEL SimpleName: DenseVector", "DEL SimpleType: TreeSet", "DEL SimpleName: keySet", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: Map", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: in", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleName: Integer", "DEL ClassInstanceCreation", "DEL SimpleName: Integer", "DEL SimpleName: entrySet", "DEL Modifier: public", "DEL SimpleType: DoubleEntry", "DEL ThisExpression", "DEL SimpleName: UnsupportedOperationException", "DEL FieldAccess", "DEL SimpleName: entries", "DEL PrimitiveType: void", "DEL SimpleType: DoubleEntry", "DEL SimpleName: clear", "DEL SimpleName: DoubleEntry", "DEL ParameterizedType: TreeSet<Integer>", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL SimpleName: Integer", "DEL SimpleName: entries", "DEL SingleVariableDeclaration", "DEL SimpleName: column", "DEL FieldAccess", "DEL SimpleName: IOException", "DEL SimpleName: DoubleEntry", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL ThrowStatement", "DEL SimpleName: DenseVector", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: entries", "DEL SimpleName: out", "DEL Block", "DEL SimpleType: DoubleEntry", "DEL ThisExpression", "DEL SimpleName: DoubleEntry", "DEL Modifier: static", "DEL CastExpression", "DEL ParameterizedType: ArrayList<DoubleEntry>", "DEL SimpleType: Integer", "DEL PrimitiveType: int", "DEL SimpleName: HMapWritable", "DEL SimpleName: DoubleEntry", "DEL SimpleName: entries", "DEL Modifier: public", "DEL Block", "DEL ArrayType: byte[]", "DEL SimpleType: DoubleEntry", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: VectorWritable", "DEL SimpleName: result", "DEL SimpleName: DoubleEntry", "DEL MethodInvocation", "DEL SimpleName: column", "DEL Block", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: Map.Entry", "DEL SimpleType: DoubleEntry", "DEL SimpleName: get", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL SimpleName: ArrayList", "DEL SimpleType: Integer", "DEL Modifier: public", "DEL ParameterizedType: Set<Map.Entry<Integer,DoubleEntry>>", "DEL TypeDeclaration: class", "DEL SimpleType: DenseVector", "DEL SimpleName: entry", "DEL SimpleType: Integer", "DEL SimpleType: DoubleEntry", "DEL Block", "DEL SimpleType: UnsupportedOperationException", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Block", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleType: VectorWritable", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: out", "DEL ArrayType: byte[]", "DEL SimpleName: Integer", "DEL ExpressionStatement", "DEL SimpleName: Writable", "DEL SimpleName: setValue", "DEL SimpleName: Bytes", "DEL SimpleName: containsKey", "DEL MethodDeclaration", "DEL SimpleName: containsValue", "DEL Modifier: public", "DEL Assignment: =", "DEL Modifier: final", "DEL StringLiteral: \"Not implemented yet\"", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: w", "DEL SimpleName: column", "DEL SimpleType: Integer", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: Integer", "DEL SimpleType: Set", "DEL SimpleType: DoubleEntry", "DEL ConstructorInvocation", "DEL StringLiteral: \"VectorWritable is read-only!\"", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ParameterizedType: ArrayList<DoubleEntry>", "DEL SimpleName: Set", "DEL SimpleName: BytesUtil", "DEL SimpleType: Double", "DEL ThrowStatement", "DEL SimpleName: DoubleEntry", "DEL ExpressionStatement", "DEL FieldAccess", "DEL SimpleType: DoubleEntry", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SimpleName: intToBytes", "DEL SimpleName: key", "DEL SimpleType: Integer", "DEL SimpleName: key", "DEL SimpleName: row", "DEL SimpleName: v", "DEL SimpleName: w", "DEL SimpleName: Collections", "DEL ThrowStatement", "DEL SimpleName: Integer", "DEL StringLiteral: \"VectorWritable is read-only!\"", "DEL ArrayType: byte[]", "DEL FieldAccess", "DEL SimpleType: Collection", "DEL SimpleType: Integer", "DEL SimpleType: UnsupportedOperationException", "DEL MethodDeclaration", "DEL SimpleType: DoubleEntry", "DEL MethodDeclaration", "DEL SimpleName: DenseVector", "DEL Block", "DEL SimpleType: DoubleEntry", "DEL SimpleType: Set", "DEL SimpleName: m", "DEL VariableDeclarationFragment", "DEL SimpleName: Integer", "DEL SimpleName: containsKey", "DEL SimpleName: writeByteArray", "DEL SimpleName: values", "DEL MethodDeclaration", "DEL SimpleType: DataInput", "DEL MethodDeclaration", "DEL Block", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: Object", "DEL SimpleType: DoubleEntry", "DEL SimpleName: Vector", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL ThisExpression", "DEL PrimitiveType: byte", "DEL SimpleName: result", "DEL SimpleName: readFields", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: DoubleEntry", "DEL PrimitiveType: boolean", "DEL SimpleName: getValue", "DEL Block", "DEL SimpleName: entries", "DEL SimpleType: Integer", "DEL PrimitiveType: void", "DEL SimpleName: entries", "DEL ThisExpression", "DEL SimpleType: Object", "DEL SimpleType: Map.Entry", "DEL SimpleName: get", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TextElement: The inner class for an entry of row.", "DEL SimpleName: DoubleEntry", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL SimpleName: DoubleEntry", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Modifier: public", "DEL ArrayType: byte[]", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleName: isEmpty", "DEL MethodInvocation", "DEL ParameterizedType: Set<Integer>", "DEL SimpleName: Bytes", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL SimpleName: UnsupportedOperationException", "DEL SingleVariableDeclaration", "DEL SimpleName: Integer", "DEL VariableDeclarationFragment", "DEL SimpleName: bytesToInt", "DEL SimpleName: out", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL Dimension", "DEL ThisExpression", "DEL MethodDeclaration", "DEL ThisExpression", "DEL SimpleName: entries", "DEL Block", "DEL MethodInvocation", "DEL Dimension", "DEL PrimitiveType: byte", "DEL SimpleName: size", "DEL ClassInstanceCreation", "DEL SimpleType: Writable", "DEL SimpleName: unmodifiableSet", "DEL PrimitiveType: byte", "DEL SimpleName: DoubleEntry", "DEL SimpleName: VectorWritable", "DEL SimpleName: DoubleEntry", "DEL SimpleName: Set", "DEL SimpleName: in", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: DoubleEntry", "DEL SimpleName: column", "DEL ClassInstanceCreation", "DEL SimpleName: DoubleEntry", "DEL VariableDeclarationFragment", "DEL SimpleName: w", "DEL SimpleName: putAll", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: row", "DEL Modifier: public", "DEL ParameterizedType: Map.Entry<byte[],DoubleEntry>", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: DoubleEntry", "DEL ReturnStatement", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: w", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: DoubleEntry", "DEL SimpleName: bs", "DEL SimpleName: entries", "DEL ParameterizedType: Map.Entry<Integer,DoubleEntry>", "DEL SimpleName: Writable", "DEL SimpleName: add", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleName: Integer", "DEL SimpleType: DoubleEntry", "DEL SimpleName: IOException", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SimpleName: Set", "DEL SimpleType: DataOutput", "DEL Dimension", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: keySet", "DEL Assignment: =", "DEL SimpleType: Integer", "DEL SimpleName: getDenseVector", "DEL MethodDeclaration", "DEL SimpleType: ArrayList", "DEL SimpleName: Entries", "DEL SimpleName: put", "DEL Assignment: =", "DEL SimpleName: add", "DEL SimpleName: Object", "DEL SimpleName: column", "DEL Block", "DEL ReturnStatement", "DEL ThisExpression", "DEL PrimitiveType: byte", "DEL SimpleName: values", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL ThisExpression", "DEL SimpleType: ArrayList", "DEL SimpleName: Integer", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: key", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: result", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleType: DenseVector", "DEL SimpleName: v2"]}]}}, {"VectorWritable_diff": {"operations": ["Delete TextElement: Copyright 2007 The Apache Software Foundation(0)", "Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(1)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(2)", "Delete TextElement: distributed with this work for additional information(3)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(4)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(5)", "Delete TextElement: \"License\"); you may not use this file except in compliance(6)", "Delete TextElement: with the License.  You may obtain a copy of the License at(7)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(8)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(9)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(10)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(11)", "Delete TextElement: See the License for the specific language governing permissions and(12)", "Delete TextElement: limitations under the License.(13)", "Delete TagElement(14)", "Delete Javadoc(15)", "Delete QualifiedName: org.apache.hama.io(16)", "Delete PackageDeclaration(17)", "Delete QualifiedName: java.io.DataInput(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.io.DataOutput(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.io.IOException(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.ArrayList(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.Collection(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.Collections(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.Map(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.Set(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: java.util.TreeSet(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.hadoop.hbase.util.Bytes(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: org.apache.hadoop.io.Writable(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: org.apache.hama.DenseVector(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: org.apache.hama.Vector(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.hama.util.BytesUtil(44)", "Delete ImportDeclaration(45)", "Delete Modifier: public(46)", "Delete SimpleName: VectorWritable(47)", "Delete SimpleName: Writable(48)", "Delete SimpleType: Writable(49)", "Delete SimpleName: Map(50)", "Delete SimpleType: Map(51)", "Delete SimpleName: Integer(52)", "Delete SimpleType: Integer(53)", "Delete SimpleName: DoubleEntry(54)", "Delete SimpleType: DoubleEntry(55)", "Delete ParameterizedType: Map<Integer,DoubleEntry>(56)", "Delete Modifier: public(57)", "Delete SimpleName: Integer(58)", "Delete SimpleType: Integer(59)", "Delete SimpleName: row(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete Modifier: public(63)", "Delete SimpleName: HMapWritable(64)", "Delete SimpleType: HMapWritable(65)", "Delete SimpleName: Integer(66)", "Delete SimpleType: Integer(67)", "Delete SimpleName: DoubleEntry(68)", "Delete SimpleType: DoubleEntry(69)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(70)", "Delete SimpleName: entries(71)", "Delete VariableDeclarationFragment(72)", "Delete FieldDeclaration(73)", "Delete Modifier: public(74)", "Delete SimpleName: VectorWritable(75)", "Delete SimpleName: HMapWritable(76)", "Delete SimpleType: HMapWritable(77)", "Delete SimpleName: Integer(78)", "Delete SimpleType: Integer(79)", "Delete SimpleName: DoubleEntry(80)", "Delete SimpleType: DoubleEntry(81)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(82)", "Delete ClassInstanceCreation(83)", "Delete ConstructorInvocation(84)", "Delete Block(85)", "Delete MethodDeclaration(86)", "Delete Modifier: public(87)", "Delete SimpleName: VectorWritable(88)", "Delete SimpleName: HMapWritable(89)", "Delete SimpleType: HMapWritable(90)", "Delete SimpleName: Integer(91)", "Delete SimpleType: Integer(92)", "Delete SimpleName: DoubleEntry(93)", "Delete SimpleType: DoubleEntry(94)", "Delete ParameterizedType: HMapWritable<Integer,DoubleEntry>(95)", "Delete SimpleName: entries(96)", "Delete SingleVariableDeclaration(97)", "Delete ThisExpression(98)", "Delete SimpleName: entries(99)", "Delete FieldAccess(100)", "Delete SimpleName: entries(101)", "Delete Assignment: =(102)", "Delete ExpressionStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete Modifier: public(106)", "Delete SimpleName: VectorWritable(107)", "Delete PrimitiveType: int(108)", "Delete SimpleName: row(109)", "Delete SingleVariableDeclaration(110)", "Delete SimpleName: DenseVector(111)", "Delete SimpleType: DenseVector(112)", "Delete SimpleName: v(113)", "Delete SingleVariableDeclaration(114)", "Delete ThisExpression(115)", "Delete SimpleName: row(116)", "Delete FieldAccess(117)", "Delete SimpleName: row(118)", "Delete Assignment: =(119)", "Delete ExpressionStatement(120)", "Delete ThisExpression(121)", "Delete SimpleName: entries(122)", "Delete FieldAccess(123)", "Delete QualifiedName: v.entries(124)", "Delete Assignment: =(125)", "Delete ExpressionStatement(126)", "Delete Block(127)", "Delete MethodDeclaration(128)", "Delete Modifier: public(129)", "Delete SimpleName: DenseVector(130)", "Delete SimpleType: DenseVector(131)", "Delete SimpleName: getDenseVector(132)", "Delete SimpleName: DenseVector(133)", "Delete SimpleType: DenseVector(134)", "Delete SimpleName: entries(135)", "Delete ClassInstanceCreation(136)", "Delete ReturnStatement(137)", "Delete Block(138)", "Delete MethodDeclaration(139)", "Delete Modifier: public(140)", "Delete SimpleName: Double(141)", "Delete SimpleType: Double(142)", "Delete SimpleName: get(143)", "Delete SimpleName: Integer(144)", "Delete SimpleType: Integer(145)", "Delete SimpleName: column(146)", "Delete SingleVariableDeclaration(147)", "Delete ThisExpression(148)", "Delete SimpleName: entries(149)", "Delete FieldAccess(150)", "Delete SimpleName: get(151)", "Delete SimpleName: column(152)", "Delete MethodInvocation(153)", "Delete SimpleName: getValue(154)", "Delete MethodInvocation(155)", "Delete ReturnStatement(156)", "Delete Block(157)", "Delete MethodDeclaration(158)", "Delete Modifier: public(159)", "Delete PrimitiveType: int(160)", "Delete SimpleName: size(161)", "Delete ThisExpression(162)", "Delete SimpleName: entries(163)", "Delete FieldAccess(164)", "Delete SimpleName: size(165)", "Delete MethodInvocation(166)", "Delete ReturnStatement(167)", "Delete Block(168)", "Delete MethodDeclaration(169)", "Delete Modifier: public(170)", "Delete SimpleName: DoubleEntry(171)", "Delete SimpleType: DoubleEntry(172)", "Delete SimpleName: put(173)", "Delete SimpleName: Integer(174)", "Delete SimpleType: Integer(175)", "Delete SimpleName: key(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: DoubleEntry(178)", "Delete SimpleType: DoubleEntry(179)", "Delete SimpleName: value(180)", "Delete SingleVariableDeclaration(181)", "Delete SimpleName: UnsupportedOperationException(182)", "Delete SimpleType: UnsupportedOperationException(183)", "Delete StringLiteral: \"VectorWritable is read-only!\"(184)", "Delete ClassInstanceCreation(185)", "Delete ThrowStatement(186)", "Delete Block(187)", "Delete MethodDeclaration(188)", "Delete Modifier: public(189)", "Delete SimpleName: DoubleEntry(190)", "Delete SimpleType: DoubleEntry(191)", "Delete SimpleName: get(192)", "Delete SimpleName: Object(193)", "Delete SimpleType: Object(194)", "Delete SimpleName: key(195)", "Delete SingleVariableDeclaration(196)", "Delete ThisExpression(197)", "Delete SimpleName: entries(198)", "Delete FieldAccess(199)", "Delete SimpleName: get(200)", "Delete SimpleName: key(201)", "Delete MethodInvocation(202)", "Delete ReturnStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete Modifier: public(206)", "Delete SimpleName: DoubleEntry(207)", "Delete SimpleType: DoubleEntry(208)", "Delete SimpleName: remove(209)", "Delete SimpleName: Object(210)", "Delete SimpleType: Object(211)", "Delete SimpleName: key(212)", "Delete SingleVariableDeclaration(213)", "Delete SimpleName: UnsupportedOperationException(214)", "Delete SimpleType: UnsupportedOperationException(215)", "Delete StringLiteral: \"VectorWritable is read-only!\"(216)", "Delete ClassInstanceCreation(217)", "Delete ThrowStatement(218)", "Delete Block(219)", "Delete MethodDeclaration(220)", "Delete Modifier: public(221)", "Delete PrimitiveType: boolean(222)", "Delete SimpleName: containsKey(223)", "Delete SimpleName: Object(224)", "Delete SimpleType: Object(225)", "Delete SimpleName: key(226)", "Delete SingleVariableDeclaration(227)", "Delete SimpleName: entries(228)", "Delete SimpleName: containsKey(229)", "Delete SimpleName: key(230)", "Delete MethodInvocation(231)", "Delete ReturnStatement(232)", "Delete Block(233)", "Delete MethodDeclaration(234)", "Delete Modifier: public(235)", "Delete PrimitiveType: boolean(236)", "Delete SimpleName: containsValue(237)", "Delete SimpleName: Object(238)", "Delete SimpleType: Object(239)", "Delete SimpleName: value(240)", "Delete SingleVariableDeclaration(241)", "Delete SimpleName: UnsupportedOperationException(242)", "Delete SimpleType: UnsupportedOperationException(243)", "Delete StringLiteral: \"Don't support containsValue!\"(244)", "Delete ClassInstanceCreation(245)", "Delete ThrowStatement(246)", "Delete Block(247)", "Delete MethodDeclaration(248)", "Delete Modifier: public(249)", "Delete PrimitiveType: boolean(250)", "Delete SimpleName: isEmpty(251)", "Delete SimpleName: entries(252)", "Delete SimpleName: isEmpty(253)", "Delete MethodInvocation(254)", "Delete ReturnStatement(255)", "Delete Block(256)", "Delete MethodDeclaration(257)", "Delete Modifier: public(258)", "Delete PrimitiveType: void(259)", "Delete SimpleName: clear(260)", "Delete SimpleName: UnsupportedOperationException(261)", "Delete SimpleType: UnsupportedOperationException(262)", "Delete StringLiteral: \"VectorDatum is read-only!\"(263)", "Delete ClassInstanceCreation(264)", "Delete ThrowStatement(265)", "Delete Block(266)", "Delete MethodDeclaration(267)", "Delete Modifier: public(268)", "Delete SimpleName: Set(269)", "Delete SimpleType: Set(270)", "Delete SimpleName: Integer(271)", "Delete SimpleType: Integer(272)", "Delete ParameterizedType: Set<Integer>(273)", "Delete SimpleName: keySet(274)", "Delete SimpleName: Set(275)", "Delete SimpleType: Set(276)", "Delete SimpleName: Integer(277)", "Delete SimpleType: Integer(278)", "Delete ParameterizedType: Set<Integer>(279)", "Delete SimpleName: result(280)", "Delete SimpleName: TreeSet(281)", "Delete SimpleType: TreeSet(282)", "Delete SimpleName: Integer(283)", "Delete SimpleType: Integer(284)", "Delete ParameterizedType: TreeSet<Integer>(285)", "Delete ClassInstanceCreation(286)", "Delete VariableDeclarationFragment(287)", "Delete VariableDeclarationStatement(288)", "Delete SimpleName: Integer(289)", "Delete SimpleType: Integer(290)", "Delete SimpleName: w(291)", "Delete SingleVariableDeclaration(292)", "Delete SimpleName: entries(293)", "Delete SimpleName: keySet(294)", "Delete MethodInvocation(295)", "Delete SimpleName: result(296)", "Delete SimpleName: add(297)", "Delete SimpleName: w(298)", "Delete MethodInvocation(299)", "Delete ExpressionStatement(300)", "Delete Block(301)", "Delete EnhancedForStatement(302)", "Delete SimpleName: result(303)", "Delete ReturnStatement(304)", "Delete Block(305)", "Delete MethodDeclaration(306)", "Delete Modifier: public(307)", "Delete SimpleName: Set(308)", "Delete SimpleType: Set(309)", "Delete QualifiedName: Map.Entry(310)", "Delete SimpleType: Map.Entry(311)", "Delete SimpleName: Integer(312)", "Delete SimpleType: Integer(313)", "Delete SimpleName: DoubleEntry(314)", "Delete SimpleType: DoubleEntry(315)", "Delete ParameterizedType: Map.Entry<Integer,DoubleEntry>(316)", "Delete ParameterizedType: Set<Map.Entry<Integer,DoubleEntry>>(317)", "Delete SimpleName: entrySet(318)", "Delete SimpleName: Collections(319)", "Delete SimpleName: unmodifiableSet(320)", "Delete ThisExpression(321)", "Delete SimpleName: entries(322)", "Delete FieldAccess(323)", "Delete SimpleName: entrySet(324)", "Delete MethodInvocation(325)", "Delete MethodInvocation(326)", "Delete ReturnStatement(327)", "Delete Block(328)", "Delete MethodDeclaration(329)", "Delete Modifier: public(330)", "Delete SimpleName: Collection(331)", "Delete SimpleType: Collection(332)", "Delete SimpleName: DoubleEntry(333)", "Delete SimpleType: DoubleEntry(334)", "Delete ParameterizedType: Collection<DoubleEntry>(335)", "Delete SimpleName: values(336)", "Delete SimpleName: ArrayList(337)", "Delete SimpleType: ArrayList(338)", "Delete SimpleName: DoubleEntry(339)", "Delete SimpleType: DoubleEntry(340)", "Delete ParameterizedType: ArrayList<DoubleEntry>(341)", "Delete SimpleName: result(342)", "Delete SimpleName: ArrayList(343)", "Delete SimpleType: ArrayList(344)", "Delete SimpleName: DoubleEntry(345)", "Delete SimpleType: DoubleEntry(346)", "Delete ParameterizedType: ArrayList<DoubleEntry>(347)", "Delete ClassInstanceCreation(348)", "Delete VariableDeclarationFragment(349)", "Delete VariableDeclarationStatement(350)", "Delete SimpleName: Writable(351)", "Delete SimpleType: Writable(352)", "Delete SimpleName: w(353)", "Delete SingleVariableDeclaration(354)", "Delete SimpleName: entries(355)", "Delete SimpleName: values(356)", "Delete MethodInvocation(357)", "Delete SimpleName: result(358)", "Delete SimpleName: add(359)", "Delete SimpleName: DoubleEntry(360)", "Delete SimpleType: DoubleEntry(361)", "Delete SimpleName: w(362)", "Delete CastExpression(363)", "Delete MethodInvocation(364)", "Delete ExpressionStatement(365)", "Delete Block(366)", "Delete EnhancedForStatement(367)", "Delete SimpleName: result(368)", "Delete ReturnStatement(369)", "Delete Block(370)", "Delete MethodDeclaration(371)", "Delete Modifier: public(372)", "Delete PrimitiveType: void(373)", "Delete SimpleName: readFields(374)", "Delete Modifier: final(375)", "Delete SimpleName: DataInput(376)", "Delete SimpleType: DataInput(377)", "Delete SimpleName: in(378)", "Delete SingleVariableDeclaration(379)", "Delete SimpleName: IOException(380)", "Delete SimpleType: IOException(381)", "Delete ThisExpression(382)", "Delete SimpleName: row(383)", "Delete FieldAccess(384)", "Delete SimpleName: BytesUtil(385)", "Delete SimpleName: bytesToInt(386)", "Delete SimpleName: Bytes(387)", "Delete SimpleName: readByteArray(388)", "Delete SimpleName: in(389)", "Delete MethodInvocation(390)", "Delete MethodInvocation(391)", "Delete Assignment: =(392)", "Delete ExpressionStatement(393)", "Delete ThisExpression(394)", "Delete SimpleName: entries(395)", "Delete FieldAccess(396)", "Delete SimpleName: readFields(397)", "Delete SimpleName: in(398)", "Delete MethodInvocation(399)", "Delete ExpressionStatement(400)", "Delete Block(401)", "Delete MethodDeclaration(402)", "Delete Modifier: public(403)", "Delete PrimitiveType: void(404)", "Delete SimpleName: write(405)", "Delete Modifier: final(406)", "Delete SimpleName: DataOutput(407)", "Delete SimpleType: DataOutput(408)", "Delete SimpleName: out(409)", "Delete SingleVariableDeclaration(410)", "Delete SimpleName: IOException(411)", "Delete SimpleType: IOException(412)", "Delete SimpleName: Bytes(413)", "Delete SimpleName: writeByteArray(414)", "Delete SimpleName: out(415)", "Delete SimpleName: BytesUtil(416)", "Delete SimpleName: intToBytes(417)", "Delete ThisExpression(418)", "Delete SimpleName: row(419)", "Delete FieldAccess(420)", "Delete MethodInvocation(421)", "Delete MethodInvocation(422)", "Delete ExpressionStatement(423)", "Delete ThisExpression(424)", "Delete SimpleName: entries(425)", "Delete FieldAccess(426)", "Delete SimpleName: write(427)", "Delete SimpleName: out(428)", "Delete MethodInvocation(429)", "Delete ExpressionStatement(430)", "Delete Block(431)", "Delete MethodDeclaration(432)", "Delete Modifier: public(433)", "Delete SimpleName: VectorWritable(434)", "Delete SimpleType: VectorWritable(435)", "Delete SimpleName: addition(436)", "Delete SimpleName: Integer(437)", "Delete SimpleType: Integer(438)", "Delete SimpleName: bs(439)", "Delete SingleVariableDeclaration(440)", "Delete SimpleName: Vector(441)", "Delete SimpleType: Vector(442)", "Delete SimpleName: v2(443)", "Delete SingleVariableDeclaration(444)", "Delete SimpleName: UnsupportedOperationException(445)", "Delete SimpleType: UnsupportedOperationException(446)", "Delete StringLiteral: \"Not implemented yet\"(447)", "Delete ClassInstanceCreation(448)", "Delete ThrowStatement(449)", "Delete Block(450)", "Delete MethodDeclaration(451)", "Delete Modifier: public(452)", "Delete PrimitiveType: void(453)", "Delete SimpleName: putAll(454)", "Delete SimpleName: Map(455)", "Delete SimpleType: Map(456)", "Delete SimpleName: Integer(457)", "Delete SimpleType: Integer(458)", "Delete WildcardType: ? extends Integer(459)", "Delete SimpleName: DoubleEntry(460)", "Delete SimpleType: DoubleEntry(461)", "Delete WildcardType: ? extends DoubleEntry(462)", "Delete ParameterizedType: Map<? extends Integer,? extends DoubleEntry>(463)", "Delete SimpleName: m(464)", "Delete SingleVariableDeclaration(465)", "Delete SimpleName: UnsupportedOperationException(466)", "Delete SimpleType: UnsupportedOperationException(467)", "Delete StringLiteral: \"Not implemented yet\"(468)", "Delete ClassInstanceCreation(469)", "Delete ThrowStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete TextElement: The inner class for an entry of row.(473)", "Delete TagElement(474)", "Delete Javadoc(475)", "Delete Modifier: public(476)", "Delete Modifier: static(477)", "Delete SimpleName: Entries(478)", "Delete QualifiedName: Map.Entry(479)", "Delete SimpleType: Map.Entry(480)", "Delete PrimitiveType: byte(481)", "Delete Dimension(482)", "Delete ArrayType: byte[](483)", "Delete SimpleName: DoubleEntry(484)", "Delete SimpleType: DoubleEntry(485)", "Delete ParameterizedType: Map.Entry<byte[],DoubleEntry>(486)", "Delete Modifier: private(487)", "Delete Modifier: final(488)", "Delete PrimitiveType: byte(489)", "Delete Dimension(490)", "Delete ArrayType: byte[](491)", "Delete SimpleName: column(492)", "Delete VariableDeclarationFragment(493)", "Delete FieldDeclaration(494)", "Delete Modifier: private(495)", "Delete Modifier: final(496)", "Delete SimpleName: DoubleEntry(497)", "Delete SimpleType: DoubleEntry(498)", "Delete SimpleName: entry(499)", "Delete VariableDeclarationFragment(500)", "Delete FieldDeclaration(501)", "Delete SimpleName: Entries(502)", "Delete PrimitiveType: byte(503)", "Delete Dimension(504)", "Delete ArrayType: byte[](505)", "Delete SimpleName: column(506)", "Delete SingleVariableDeclaration(507)", "Delete SimpleName: DoubleEntry(508)", "Delete SimpleType: DoubleEntry(509)", "Delete SimpleName: entry(510)", "Delete SingleVariableDeclaration(511)", "Delete ThisExpression(512)", "Delete SimpleName: column(513)", "Delete FieldAccess(514)", "Delete SimpleName: column(515)", "Delete Assignment: =(516)", "Delete ExpressionStatement(517)", "Delete ThisExpression(518)", "Delete SimpleName: entry(519)", "Delete FieldAccess(520)", "Delete SimpleName: entry(521)", "Delete Assignment: =(522)", "Delete ExpressionStatement(523)", "Delete Block(524)", "Delete MethodDeclaration(525)", "Delete Modifier: public(526)", "Delete SimpleName: DoubleEntry(527)", "Delete SimpleType: DoubleEntry(528)", "Delete SimpleName: setValue(529)", "Delete SimpleName: DoubleEntry(530)", "Delete SimpleType: DoubleEntry(531)", "Delete SimpleName: c(532)", "Delete SingleVariableDeclaration(533)", "Delete SimpleName: UnsupportedOperationException(534)", "Delete SimpleType: UnsupportedOperationException(535)", "Delete StringLiteral: \"VectorWritable is read-only!\"(536)", "Delete ClassInstanceCreation(537)", "Delete ThrowStatement(538)", "Delete Block(539)", "Delete MethodDeclaration(540)", "Delete Modifier: public(541)", "Delete PrimitiveType: byte(542)", "Delete Dimension(543)", "Delete ArrayType: byte[](544)", "Delete SimpleName: getKey(545)", "Delete PrimitiveType: byte(546)", "Delete Dimension(547)", "Delete ArrayType: byte[](548)", "Delete SimpleName: key(549)", "Delete SimpleName: column(550)", "Delete VariableDeclarationFragment(551)", "Delete VariableDeclarationStatement(552)", "Delete SimpleName: key(553)", "Delete ReturnStatement(554)", "Delete Block(555)", "Delete MethodDeclaration(556)", "Delete Modifier: public(557)", "Delete SimpleName: DoubleEntry(558)", "Delete SimpleType: DoubleEntry(559)", "Delete SimpleName: getValue(560)", "Delete SimpleName: entry(561)", "Delete ReturnStatement(562)", "Delete Block(563)", "Delete MethodDeclaration(564)", "Delete TypeDeclaration: class(565)", "Delete TypeDeclaration: class(566)"]}}, {"CollectBlocksMap_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Mapper<K,V,BlockID,VectorWritable> to Mapper<K,V,BlockID,MapWritable>", "operations": ["UPD ParameterizedType: Mapper<K,V,BlockID,VectorWritable> from Mapper<K,V,BlockID,VectorWritable> to Mapper<K,V,BlockID,MapWritable>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable"]}]}}, {"CollectBlocksMap_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(64) at 1", "Update QualifiedName: org.apache.hama.io.VectorWritable(24) to org.apache.hadoop.io.MapWritable", "Update ParameterizedType: Mapper<K,V,BlockID,VectorWritable>(62) to Mapper<K,V,BlockID,MapWritable>", "Update SimpleType: VectorWritable(61) to MapWritable", "Update SimpleName: VectorWritable(60) to MapWritable"]}}, {"CollectBlocksMapReduceBase_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}]}}, {"CollectBlocksMapReduceBase_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(295) at 1", "Update QualifiedName: org.apache.hama.io.VectorWritable(24) to org.apache.hadoop.io.MapWritable", "Update SimpleType: VectorWritable(214) to MapWritable", "Update SimpleName: VectorWritable(213) to MapWritable"]}}, {"CollectBlocksMapper_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: org.apache.log4j.Logger to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from CollectBlocksMap<IntWritable,VectorWritable> to CollectBlocksMap<IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: CollectBlocksMap<IntWritable,VectorWritable> from CollectBlocksMap<IntWritable,VectorWritable> to CollectBlocksMap<IntWritable,MapWritable>"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: Logger to SimpleType: Logger at 0", "INS SimpleName: getLogger to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 0", "INS SimpleName: CollectBlocksMapper to SimpleType: CollectBlocksMapper at 0", "INS SimpleType: CollectBlocksMapper to TypeLiteral at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleType: Logger to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: Logger to MethodInvocation at 0", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from OutputCollector<BlockID,VectorWritable> to OutputCollector<BlockID,MapWritable>", "operations": ["UPD ParameterizedType: OutputCollector<BlockID,VectorWritable> from OutputCollector<BlockID,VectorWritable> to OutputCollector<BlockID,MapWritable>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 3"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 4"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleType: DenseVector to ClassInstanceCreation at 0", "INS SimpleName: DenseVector to SimpleType: DenseVector at 0", "INS SimpleName: value to ClassInstanceCreation at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getEntries to MethodInvocation at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL PrimitiveType: int"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: getDenseVector"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL PrimitiveType: int"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: VectorWritable", "DEL ClassInstanceCreation", "DEL SimpleName: VectorWritable"]}]}}, {"CollectBlocksMapper_diff": {"operations": ["Move ImportDeclaration(29) into CompilationUnit(169) at 3", "Insert ImportDeclaration(31) into CompilationUnit(169) at 8", "Update QualifiedName: org.apache.hama.io.VectorWritable(28) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.log4j.Logger(30) into ImportDeclaration(31) at 0", "Update ParameterizedType: CollectBlocksMap<IntWritable,VectorWritable>(43) to CollectBlocksMap<IntWritable,MapWritable>", "Insert FieldDeclaration(58) into TypeDeclaration: class(168) at 5", "Update SimpleType: VectorWritable(42) to MapWritable", "Insert Modifier: static(46) into FieldDeclaration(58) at 0", "Insert Modifier: final(47) into FieldDeclaration(58) at 1", "Insert SimpleType: Logger(49) into FieldDeclaration(58) at 2", "Insert VariableDeclarationFragment(57) into FieldDeclaration(58) at 3", "Update SimpleName: VectorWritable(41) to MapWritable", "Insert SimpleName: Logger(48) into SimpleType: Logger(49) at 0", "Insert SimpleName: LOG(50) into VariableDeclarationFragment(57) at 0", "Insert MethodInvocation(56) into VariableDeclarationFragment(57) at 1", "Update SimpleType: VectorWritable(54) to MapWritable", "Update ParameterizedType: OutputCollector<BlockID,VectorWritable>(63) to OutputCollector<BlockID,MapWritable>", "Insert SimpleName: Logger(51) into MethodInvocation(56) at 0", "Insert SimpleName: getLogger(52) into MethodInvocation(56) at 1", "Insert TypeLiteral(55) into MethodInvocation(56) at 2", "Update SimpleName: VectorWritable(53) to MapWritable", "Update SimpleType: VectorWritable(62) to MapWritable", "Move VariableDeclarationFragment(78) into VariableDeclarationStatement(102) at 2", "Move VariableDeclarationFragment(87) into VariableDeclarationStatement(102) at 3", "Move VariableDeclarationFragment(100) into VariableDeclarationStatement(102) at 4", "Insert SimpleType: CollectBlocksMapper(54) into TypeLiteral(55) at 0", "Update SimpleName: VectorWritable(61) to MapWritable", "Insert ClassInstanceCreation(112) into VariableDeclarationFragment(113) at 1", "Insert SimpleName: CollectBlocksMapper(53) into SimpleType: CollectBlocksMapper(54) at 0", "Insert SimpleType: DenseVector(107) into ClassInstanceCreation(112) at 0", "Move MethodInvocation(137) into ClassInstanceCreation(112) at 1", "Insert SimpleName: value(111) into ClassInstanceCreation(112) at 2", "Insert SimpleName: DenseVector(106) into SimpleType: DenseVector(107) at 0", "Insert MethodInvocation(152) into MethodInvocation(153) at 3", "Move MethodInvocation(142) into MethodInvocation(152) at 0", "Insert SimpleName: getEntries(151) into MethodInvocation(152) at 1", "Delete PrimitiveType: int(76)", "Delete VariableDeclarationStatement(79)", "Delete PrimitiveType: int(80)", "Delete VariableDeclarationStatement(88)", "Delete SimpleName: value(92)", "Delete SimpleName: getDenseVector(93)", "Delete MethodInvocation(94)", "Delete PrimitiveType: int(97)", "Delete VariableDeclarationStatement(101)", "Delete SimpleName: VectorWritable(133)", "Delete SimpleType: VectorWritable(134)", "Delete ClassInstanceCreation(143)"]}}, {"CollectBlocksReducer_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: org.apache.commons.logging.Log to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: org.apache.commons.logging.LogFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: org.apache.hama.DenseVector to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Reducer<BlockID,VectorWritable,BlockID,BlockWritable> to Reducer<BlockID,MapWritable,BlockID,BlockWritable>", "operations": ["UPD ParameterizedType: Reducer<BlockID,VectorWritable,BlockID,BlockWritable> from Reducer<BlockID,VectorWritable,BlockID,BlockWritable> to Reducer<BlockID,MapWritable,BlockID,BlockWritable>"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleName: LogFactory to MethodInvocation at 0", "INS Modifier: static to FieldDeclaration at 0", "INS SimpleName: Log to SimpleType: Log at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleType: Log to FieldDeclaration at 2", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: getLog to MethodInvocation at 1", "INS SimpleName: CollectBlocksReducer to SimpleType: CollectBlocksReducer at 0", "INS SimpleType: CollectBlocksReducer to TypeLiteral at 0", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from Iterator<VectorWritable> to Iterator<MapWritable>", "operations": ["UPD ParameterizedType: Iterator<VectorWritable> from Iterator<VectorWritable> to Iterator<MapWritable>"]}, {"root": "UPDATE from VectorWritable to DenseVector", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to DenseVector", "UPD SimpleType: VectorWritable from VectorWritable to DenseVector"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: DenseVector to SimpleType: DenseVector at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: DenseVector to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "INS MethodInvocation to InfixExpression: - at 0", "operations": ["INS SimpleName: vw to MethodInvocation at 0", "INS SimpleName: getRow to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: - at 0"]}, {"root": "DEL QualifiedName: vw.row", "operations": ["DEL QualifiedName: vw.row"]}]}}, {"CollectBlocksReducer_diff": {"operations": ["Move ImportDeclaration(33) into CompilationUnit(360) at 3", "Insert ImportDeclaration(21) into CompilationUnit(360) at 3", "Insert ImportDeclaration(23) into CompilationUnit(360) at 4", "Insert ImportDeclaration(33) into CompilationUnit(360) at 9", "Insert QualifiedName: org.apache.commons.logging.Log(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.apache.commons.logging.LogFactory(22) into ImportDeclaration(23) at 0", "Update QualifiedName: org.apache.hama.io.VectorWritable(32) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.hama.DenseVector(32) into ImportDeclaration(33) at 0", "Update ParameterizedType: Reducer<BlockID,VectorWritable,BlockID,BlockWritable>(53) to Reducer<BlockID,MapWritable,BlockID,BlockWritable>", "Insert FieldDeclaration(72) into TypeDeclaration: class(359) at 5", "Update SimpleType: VectorWritable(48) to MapWritable", "Insert Modifier: static(60) into FieldDeclaration(72) at 0", "Insert Modifier: final(61) into FieldDeclaration(72) at 1", "Insert SimpleType: Log(63) into FieldDeclaration(72) at 2", "Insert VariableDeclarationFragment(71) into FieldDeclaration(72) at 3", "Update SimpleName: VectorWritable(47) to MapWritable", "Insert SimpleName: Log(62) into SimpleType: Log(63) at 0", "Insert SimpleName: LOG(64) into VariableDeclarationFragment(71) at 0", "Insert MethodInvocation(70) into VariableDeclarationFragment(71) at 1", "Update ParameterizedType: Iterator<VectorWritable>(67) to Iterator<MapWritable>", "Insert SimpleName: LogFactory(65) into MethodInvocation(70) at 0", "Insert SimpleName: getLog(66) into MethodInvocation(70) at 1", "Insert TypeLiteral(69) into MethodInvocation(70) at 2", "Update SimpleType: VectorWritable(66) to MapWritable", "Insert SimpleType: CollectBlocksReducer(68) into TypeLiteral(69) at 0", "Update SimpleName: VectorWritable(65) to MapWritable", "Insert SimpleName: CollectBlocksReducer(67) into SimpleType: CollectBlocksReducer(68) at 0", "Update SimpleType: VectorWritable(165) to DenseVector", "Update SimpleName: VectorWritable(164) to DenseVector", "Insert ClassInstanceCreation(191) into VariableDeclarationFragment(192) at 1", "Insert SimpleType: DenseVector(187) into ClassInstanceCreation(191) at 0", "Move MethodInvocation(169) into ClassInstanceCreation(191) at 1", "Insert MethodInvocation(208) into InfixExpression: -(210) at 0", "Insert SimpleName: DenseVector(186) into SimpleType: DenseVector(187) at 0", "Insert SimpleName: vw(206) into MethodInvocation(208) at 0", "Insert SimpleName: getRow(207) into MethodInvocation(208) at 1", "Delete QualifiedName: vw.row(184)"]}}, {"RandomMatrixMap_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Mapper<IntWritable,IntWritable,IntWritable,VectorWritable> to Mapper<IntWritable,IntWritable,IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: Mapper<IntWritable,IntWritable,IntWritable,VectorWritable> from Mapper<IntWritable,IntWritable,IntWritable,VectorWritable> to Mapper<IntWritable,IntWritable,IntWritable,MapWritable>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from OutputCollector<IntWritable,VectorWritable> to OutputCollector<IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: OutputCollector<IntWritable,VectorWritable> from OutputCollector<IntWritable,VectorWritable> to OutputCollector<IntWritable,MapWritable>"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: vector to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getEntries to MethodInvocation at 1"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: vector", "DEL SimpleType: VectorWritable", "DEL SimpleName: VectorWritable", "DEL SimpleName: i", "DEL ClassInstanceCreation"]}]}}, {"RandomMatrixMap_diff": {"operations": ["Move ImportDeclaration(35) into CompilationUnit(186) at 3", "Update QualifiedName: org.apache.hama.io.VectorWritable(34) to org.apache.hadoop.io.MapWritable", "Update ParameterizedType: Mapper<IntWritable,IntWritable,IntWritable,VectorWritable>(57) to Mapper<IntWritable,IntWritable,IntWritable,MapWritable>", "Update SimpleType: VectorWritable(56) to MapWritable", "Update SimpleName: VectorWritable(55) to MapWritable", "Update ParameterizedType: OutputCollector<IntWritable,VectorWritable>(104) to OutputCollector<IntWritable,MapWritable>", "Update SimpleType: VectorWritable(103) to MapWritable", "Update SimpleName: VectorWritable(102) to MapWritable", "Insert MethodInvocation(159) into MethodInvocation(160) at 3", "Insert SimpleName: vector(157) into MethodInvocation(159) at 0", "Insert SimpleName: getEntries(158) into MethodInvocation(159) at 1", "Delete SimpleName: VectorWritable(157)", "Delete SimpleType: VectorWritable(158)", "Delete SimpleName: i(159)", "Delete SimpleName: vector(160)", "Delete ClassInstanceCreation(161)"]}}, {"RandomMatrixReduce_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>", "operations": ["UPD ParameterizedType: Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> from Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate> to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from Iterator<VectorWritable> to Iterator<MapWritable>", "operations": ["UPD ParameterizedType: Iterator<VectorWritable> from Iterator<VectorWritable> to Iterator<MapWritable>"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from entrySet to update", "operations": ["UPD SimpleName: entrySet from entrySet to update"]}, {"root": "INS SimpleName: putAll to MethodInvocation at 1", "operations": ["INS SimpleName: putAll to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: putAll", "DEL MethodInvocation", "DEL SimpleName: update"]}]}}, {"RandomMatrixReduce_diff": {"operations": ["Move ImportDeclaration(39) into CompilationUnit(200) at 5", "Update QualifiedName: org.apache.hama.io.VectorWritable(38) to org.apache.hadoop.io.MapWritable", "Update ParameterizedType: Reducer<IntWritable,VectorWritable,IntWritable,VectorUpdate>(56) to Reducer<IntWritable,MapWritable,IntWritable,VectorUpdate>", "Update SimpleType: VectorWritable(51) to MapWritable", "Update SimpleName: VectorWritable(50) to MapWritable", "Update ParameterizedType: Iterator<VectorWritable>(146) to Iterator<MapWritable>", "Update SimpleType: VectorWritable(145) to MapWritable", "Move MethodInvocation(181) into ExpressionStatement(181) at 0", "Move MethodInvocation(179) into MethodInvocation(180) at 2", "Update SimpleName: VectorWritable(144) to MapWritable", "Update SimpleName: entrySet(180) to update", "Insert SimpleName: putAll(176) into MethodInvocation(180) at 1", "Delete SimpleName: update(175)", "Delete SimpleName: putAll(176)", "Delete MethodInvocation(182)"]}}, {"VectorInputFormat_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS ImportDeclaration to CompilationUnit at 18", "INS QualifiedName: org.apache.hama.DenseVector to ImportDeclaration at 0"]}, {"root": "UPDATE from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable", "operations": ["UPD QualifiedName: org.apache.hama.io.VectorWritable from org.apache.hama.io.VectorWritable to org.apache.hadoop.io.MapWritable"]}, {"root": "UPDATE from InputFormat<IntWritable,VectorWritable> to InputFormat<IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: InputFormat<IntWritable,VectorWritable> from InputFormat<IntWritable,VectorWritable> to InputFormat<IntWritable,MapWritable>"]}, {"root": "UPDATE from VectorWritable to MapWritable", "operations": ["UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable", "UPD SimpleName: VectorWritable from VectorWritable to MapWritable", "UPD SimpleType: VectorWritable from VectorWritable to MapWritable"]}, {"root": "UPDATE from RecordReader<IntWritable,VectorWritable> to RecordReader<IntWritable,MapWritable>", "operations": ["UPD ParameterizedType: RecordReader<IntWritable,VectorWritable> from RecordReader<IntWritable,VectorWritable> to RecordReader<IntWritable,MapWritable>", "UPD ParameterizedType: RecordReader<IntWritable,VectorWritable> from RecordReader<IntWritable,VectorWritable> to RecordReader<IntWritable,MapWritable>"]}, {"root": "UPDATE from Iterate over an HBase table data, return (IntWritable, VectorWritable) pairs to Iterate over an HBase table data, return (IntWritable, MapWritable) pairs", "operations": ["UPD TextElement: Iterate over an HBase table data, return (IntWritable, VectorWritable) pairs from Iterate over an HBase table data, return (IntWritable, VectorWritable) pairs to Iterate over an HBase table data, return (IntWritable, MapWritable) pairs"]}, {"root": "UPDATE from  VectorWritable to  MapWritable", "operations": ["UPD TextElement:  VectorWritable from  VectorWritable to  MapWritable"]}, {"root": "UPDATE from  VectorWritable as input value to  MapWritable as input value", "operations": ["UPD TextElement:  VectorWritable as input value from  VectorWritable as input value to  MapWritable as input value"]}, {"root": "UPDATE from Converts Scanner.next() to IntWritable, VectorWritable to Converts Scanner.next() to IntWritable, MapWritable", "operations": ["UPD TextElement: Converts Scanner.next() to IntWritable, VectorWritable from Converts Scanner.next() to IntWritable, VectorWritable to Converts Scanner.next() to IntWritable, MapWritable"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: result to ClassInstanceCreation at 1", "INS SimpleName: DenseVector to SimpleType: DenseVector at 0", "INS SimpleType: DenseVector to ClassInstanceCreation at 0", "INS SimpleName: getEntries to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "DEL SimpleName: result", "operations": ["DEL SimpleName: result"]}]}}, {"VectorInputFormat_diff": {"operations": ["Move ImportDeclaration(51) into CompilationUnit(509) at 10", "Insert ImportDeclaration(53) into CompilationUnit(509) at 18", "Update QualifiedName: org.apache.hama.io.VectorWritable(50) to org.apache.hadoop.io.MapWritable", "Insert QualifiedName: org.apache.hama.DenseVector(52) into ImportDeclaration(53) at 0", "Update ParameterizedType: InputFormat<IntWritable,VectorWritable>(64) to InputFormat<IntWritable,MapWritable>", "Update SimpleType: VectorWritable(63) to MapWritable", "Update ParameterizedType: RecordReader<IntWritable,VectorWritable>(100) to RecordReader<IntWritable,MapWritable>", "Update ParameterizedType: RecordReader<IntWritable,VectorWritable>(387) to RecordReader<IntWritable,MapWritable>", "Update SimpleName: VectorWritable(62) to MapWritable", "Update SimpleType: VectorWritable(99) to MapWritable", "Update SimpleType: VectorWritable(205) to MapWritable", "Update SimpleType: VectorWritable(386) to MapWritable", "Update TextElement: Iterate over an HBase table data, return (IntWritable, VectorWritable) pairs(86) to Iterate over an HBase table data, return (IntWritable, MapWritable) pairs", "Update SimpleName: VectorWritable(98) to MapWritable", "Update SimpleName: VectorWritable(204) to MapWritable", "Update SimpleType: VectorWritable(233) to MapWritable", "Update SimpleName: VectorWritable(385) to MapWritable", "Update TextElement:  VectorWritable(196) to  MapWritable", "Update TextElement:  VectorWritable as input value(217) to  MapWritable as input value", "Update TextElement: Converts Scanner.next() to IntWritable, VectorWritable(218) to Converts Scanner.next() to IntWritable, MapWritable", "Update SimpleName: VectorWritable(232) to MapWritable", "Update SimpleType: VectorWritable(208) to MapWritable", "Update SimpleName: VectorWritable(207) to MapWritable", "Insert MethodInvocation(331) into MethodInvocation(333) at 2", "Insert ClassInstanceCreation(329) into MethodInvocation(331) at 0", "Insert SimpleName: getEntries(330) into MethodInvocation(331) at 1", "Insert SimpleType: DenseVector(327) into ClassInstanceCreation(329) at 0", "Insert SimpleName: result(328) into ClassInstanceCreation(329) at 1", "Insert SimpleName: DenseVector(326) into SimpleType: DenseVector(327) at 0", "Delete SimpleName: result(324)"]}}], "commit_stats": [{"total_files": 27, "deleted_files": 3, "testing": "True", "maintenance": "False", "build": "False"}]}