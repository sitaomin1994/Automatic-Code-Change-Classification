{"application": "google-caja", "csha": "35a701842dd34f8827de9399bd189dfb0df2e954", "files": [{"CharProducer_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 22"]}, {"root": "INS TypeDeclaration: class to CompilationUnit at 6", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: start to VariableDeclarationFragment at 0", "INS SimpleName: length to MethodDeclaration at 2", "INS InfixExpression: + to ClassInstanceCreation at 3", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ArrayType: char[] to FieldDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleName: buf to SingleVariableDeclaration at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS Modifier: public to MethodDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 2", "INS StringLiteral: \"\" to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS ThisExpression to FieldAccess at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: subSequence to MethodDeclaration at 2", "INS InfixExpression: < to InfixExpression: || at 1", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: start to InfixExpression: == at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: start to Assignment: = at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleName: end to InfixExpression: == at 1", "INS SimpleName: end to InfixExpression: + at 1", "INS Modifier: public to MethodDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: index to InfixExpression: + at 1", "INS SimpleName: charAt to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS TypeDeclaration: class to CompilationUnit at 6", "INS FieldAccess to InfixExpression: + at 0", "INS ReturnStatement to Block at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: BufferBackedSequence to MethodDeclaration at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: start to FieldAccess at 1", "INS Dimension to ArrayType: char[] at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: start to InfixExpression: - at 1", "INS SimpleName: start to InfixExpression: < at 0", "INS SimpleName: end to InfixExpression: + at 0", "INS InfixExpression: > to InfixExpression: || at 1", "INS SimpleName: index to SingleVariableDeclaration at 1", "INS SimpleName: end to Assignment: = at 1", "INS SimpleName: end to InfixExpression: - at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: IndexOutOfBoundsException to SimpleType: IndexOutOfBoundsException at 0", "INS SimpleName: start to InfixExpression: == at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: BufferBackedSequence to TypeDeclaration: class at 0", "INS ReturnStatement to Block at 0", "INS FieldAccess to InfixExpression: + at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: end to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS PrimitiveType: char to MethodDeclaration at 1", "INS SimpleName: start to InfixExpression: + at 0", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS Modifier: final to FieldDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS ThisExpression to FieldAccess at 0", "INS Modifier: private to FieldDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Modifier: private to FieldDeclaration at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: start to FieldAccess at 1", "INS SimpleName: buf to FieldAccess at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: start to FieldAccess at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: buf to Assignment: = at 1", "INS IfStatement to Block at 2", "INS InfixExpression: < to InfixExpression: || at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: end to InfixExpression: == at 0", "INS SimpleName: end to FieldAccess at 1", "INS InfixExpression: || to IfStatement at 0", "INS ArrayType: char[] to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: end to FieldAccess at 1", "INS SimpleType: CharSequence to TypeDeclaration: class at 1", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: + to ArrayAccess at 1", "INS PrimitiveType: int to FieldDeclaration at 2", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS InfixExpression: - to ReturnStatement at 0", "INS SimpleType: BufferBackedSequence to ClassInstanceCreation at 0", "INS IfStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: IndexOutOfBoundsException to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 3", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: buf to ClassInstanceCreation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS FieldAccess to InfixExpression: + at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ClassInstanceCreation to ReturnStatement at 0", "INS FieldAccess to InfixExpression: > at 1", "INS SimpleType: CharSequence to MethodDeclaration at 1", "INS IfStatement to Block at 1", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS Modifier: final to FieldDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: + to InfixExpression: > at 0", "INS InfixExpression: || to InfixExpression: || at 0", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 5", "INS ArrayAccess to ReturnStatement at 0", "INS SimpleName: start to FieldAccess at 1", "INS FieldAccess to InfixExpression: == at 1", "INS SimpleName: end to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: start to InfixExpression: + at 0", "INS InfixExpression: + to ClassInstanceCreation at 2", "INS ThisExpression to ReturnStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: end to SingleVariableDeclaration at 1", "INS SimpleName: BufferBackedSequence to SimpleType: BufferBackedSequence at 0", "INS ThisExpression to FieldAccess at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: start to InfixExpression: < at 1", "INS PrimitiveType: int to FieldDeclaration at 2", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0"]}, {"root": "INS SimpleType: CharSequence to TypeDeclaration: class at 4", "operations": ["INS SimpleType: CharSequence to TypeDeclaration: class at 4", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS Block to MethodDeclaration at 4", "INS SimpleName: limit to InfixExpression: - at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS InfixExpression: - to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: offset to InfixExpression: - at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 24", "INS PrimitiveType: char to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: i to SingleVariableDeclaration at 1", "INS SimpleName: charAt to MethodDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 0"]}, {"root": "INS SimpleType: CharSequence to MethodDeclaration at 1", "operations": ["INS SimpleType: CharSequence to MethodDeclaration at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0"]}, {"root": "INS SimpleName: subSequence to MethodDeclaration at 2", "operations": ["INS SimpleName: subSequence to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: start to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: end to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: final to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 4", "MOV SimpleName: read to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 0", "MOV PrimitiveType: int to MethodDeclaration at 2"]}, {"root": "UPDATE from read to length", "operations": ["UPD SimpleName: read from read to length", "UPD SimpleName: toCharArray from toCharArray to length"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: > to InfixExpression: || at 0", "INS SimpleName: start to InfixExpression: < at 1", "INS SimpleName: start to InfixExpression: < at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS InfixExpression: < to InfixExpression: || at 1", "INS InfixExpression: < to InfixExpression: || at 1", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS InfixExpression: || to InfixExpression: || at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ThrowStatement to Block at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: IndexOutOfBoundsException to ClassInstanceCreation at 0", "INS SimpleName: IndexOutOfBoundsException to SimpleType: IndexOutOfBoundsException at 0"]}, {"root": "INS ClassInstanceCreation to ReturnStatement at 0", "operations": ["INS SimpleName: BufferBackedSequence to SimpleType: BufferBackedSequence at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: buf to ClassInstanceCreation at 1", "INS SimpleName: start to InfixExpression: + at 0", "INS SimpleName: offset to InfixExpression: + at 1", "INS SimpleName: end to InfixExpression: + at 0", "INS SimpleType: BufferBackedSequence to ClassInstanceCreation at 0", "INS SimpleName: offset to InfixExpression: + at 1", "INS InfixExpression: + to ClassInstanceCreation at 3", "INS InfixExpression: + to ClassInstanceCreation at 2"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS InfixExpression: || to IfStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS InfixExpression: >= to InfixExpression: || at 1", "INS Assignment: += to ParenthesizedExpression at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS InfixExpression: < to InfixExpression: || at 0", "INS ParenthesizedExpression to InfixExpression: >= at 0", "INS SimpleName: i to Assignment: += at 0", "INS SimpleName: offset to Assignment: += at 1"]}, {"root": "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0"]}, {"root": "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS SimpleName: s to MethodInvocation at 0", "INS SimpleName: s to CastExpression at 1", "INS MethodInvocation to ArrayCreation at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: buf to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayType: char[] to ArrayCreation at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS ForStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS InstanceofExpression to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: buf to Assignment: = at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: toCharArray to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS ArrayCreation to Assignment: = at 1", "INS Dimension to ArrayType: char[] at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: i to MethodInvocation at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: s to InstanceofExpression at 0", "INS Block to ForStatement at 3", "INS SimpleName: s to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS PrefixExpression: ++ to ForStatement at 2", "INS SimpleName: charAt to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS SimpleName: i to ArrayAccess at 1", "INS QualifiedName: buf.length to InfixExpression: < at 1"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: IndexOutOfBoundsException to ClassInstanceCreation at 0", "INS SimpleName: IndexOutOfBoundsException to SimpleType: IndexOutOfBoundsException at 0"]}, {"root": "INS SimpleName: i to ArrayAccess at 1", "operations": ["INS SimpleName: i to ArrayAccess at 1"]}, {"root": "MOVE from InfixExpression: >=", "operations": ["MOV SimpleName: limit to InfixExpression: >= at 1"]}, {"root": "INS ArrayCreation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to ArrayCreation at 1", "INS ArrayType: char[] to ArrayCreation at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS Dimension to ArrayType: char[] at 1", "INS ArrayCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV SimpleType: String to InstanceofExpression at 1"]}, {"root": "UPDATE from offset to end", "operations": ["UPD SimpleName: offset from offset to end"]}, {"root": "MOVE from InfixExpression: >", "operations": ["MOV SimpleName: offset to InfixExpression: > at 0", "MOV SimpleName: limit to InfixExpression: > at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toCharArray to MethodInvocation at 1", "MOV SimpleName: s to MethodInvocation at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: String to CastExpression at 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL PrimitiveType: int", "operations": ["DEL PrimitiveType: int"]}, {"root": "DEL SimpleName: lookahead", "operations": ["DEL SimpleName: lookahead"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: =="]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL PrefixExpression: -", "DEL Block"]}, {"root": "DEL ArrayAccess", "operations": ["DEL SimpleName: offset", "DEL SimpleName: buf", "DEL ArrayAccess"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: offset", "DEL InfixExpression: =="]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL PrefixExpression: -", "DEL NumberLiteral: 1"]}, {"root": "DEL PostfixExpression: ++", "operations": ["DEL SimpleName: offset", "DEL PostfixExpression: ++"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}]}}, {"CharProducer_diff": {"operations": ["Move MethodDeclaration(248) into TypeDeclaration: class(1605) at 22", "Insert TypeDeclaration: class(1754) into CompilationUnit(1755) at 6", "Insert SimpleType: CharSequence(19) into TypeDeclaration: class(1605) at 4", "Insert MethodDeclaration(350) into TypeDeclaration: class(1605) at 22", "Insert MethodDeclaration(378) into TypeDeclaration: class(1605) at 23", "Insert SimpleName: BufferBackedSequence(1606) into TypeDeclaration: class(1754) at 0", "Insert SimpleType: CharSequence(1608) into TypeDeclaration: class(1754) at 1", "Insert FieldDeclaration(1614) into TypeDeclaration: class(1754) at 2", "Insert FieldDeclaration(1620) into TypeDeclaration: class(1754) at 3", "Insert FieldDeclaration(1628) into TypeDeclaration: class(1754) at 4", "Insert MethodDeclaration(1660) into TypeDeclaration: class(1754) at 5", "Insert MethodDeclaration(1674) into TypeDeclaration: class(1754) at 6", "Insert MethodDeclaration(1683) into TypeDeclaration: class(1754) at 7", "Insert MethodDeclaration(1753) into TypeDeclaration: class(1754) at 8", "Insert SimpleName: CharSequence(18) into SimpleType: CharSequence(19) at 0", "Insert SimpleType: CharSequence(303) into MethodDeclaration(340) at 1", "Insert SimpleName: subSequence(304) into MethodDeclaration(340) at 2", "Insert SingleVariableDeclaration(307) into MethodDeclaration(340) at 3", "Insert SingleVariableDeclaration(310) into MethodDeclaration(340) at 4", "Move Modifier: public(249) into MethodDeclaration(350) at 0", "Move Modifier: final(250) into MethodDeclaration(350) at 1", "Move PrimitiveType: int(251) into MethodDeclaration(350) at 2", "Update SimpleName: read(252) to length", "Move SimpleName: read(252) into MethodDeclaration(350) at 3", "Insert Block(349) into MethodDeclaration(350) at 4", "Insert Modifier: public(351) into MethodDeclaration(378) at 0", "Insert PrimitiveType: char(352) into MethodDeclaration(378) at 1", "Insert SimpleName: charAt(353) into MethodDeclaration(378) at 2", "Insert SingleVariableDeclaration(356) into MethodDeclaration(378) at 3", "Move Block(266) into MethodDeclaration(378) at 4", "Insert SimpleName: CharSequence(1607) into SimpleType: CharSequence(1608) at 0", "Insert Modifier: private(1609) into FieldDeclaration(1614) at 0", "Insert Modifier: final(1610) into FieldDeclaration(1614) at 1", "Insert PrimitiveType: int(1611) into FieldDeclaration(1614) at 2", "Insert VariableDeclarationFragment(1613) into FieldDeclaration(1614) at 3", "Insert Modifier: private(1615) into FieldDeclaration(1620) at 0", "Insert Modifier: final(1616) into FieldDeclaration(1620) at 1", "Insert PrimitiveType: int(1617) into FieldDeclaration(1620) at 2", "Insert VariableDeclarationFragment(1619) into FieldDeclaration(1620) at 3", "Insert Modifier: private(1621) into FieldDeclaration(1628) at 0", "Insert Modifier: final(1622) into FieldDeclaration(1628) at 1", "Insert ArrayType: char[](1625) into FieldDeclaration(1628) at 2", "Insert VariableDeclarationFragment(1627) into FieldDeclaration(1628) at 3", "Insert SimpleName: BufferBackedSequence(1629) into MethodDeclaration(1660) at 0", "Insert SingleVariableDeclaration(1634) into MethodDeclaration(1660) at 1", "Insert SingleVariableDeclaration(1637) into MethodDeclaration(1660) at 2", "Insert SingleVariableDeclaration(1640) into MethodDeclaration(1660) at 3", "Insert Block(1659) into MethodDeclaration(1660) at 4", "Insert Modifier: public(1661) into MethodDeclaration(1674) at 0", "Insert PrimitiveType: char(1662) into MethodDeclaration(1674) at 1", "Insert SimpleName: charAt(1663) into MethodDeclaration(1674) at 2", "Insert SingleVariableDeclaration(1666) into MethodDeclaration(1674) at 3", "Insert Block(1673) into MethodDeclaration(1674) at 4", "Insert Modifier: public(1675) into MethodDeclaration(1683) at 0", "Insert PrimitiveType: int(1676) into MethodDeclaration(1683) at 1", "Insert SimpleName: length(1677) into MethodDeclaration(1683) at 2", "Insert Block(1682) into MethodDeclaration(1683) at 3", "Insert Modifier: public(1684) into MethodDeclaration(1753) at 0", "Insert SimpleType: CharSequence(1686) into MethodDeclaration(1753) at 1", "Insert SimpleName: subSequence(1687) into MethodDeclaration(1753) at 2", "Insert SingleVariableDeclaration(1690) into MethodDeclaration(1753) at 3", "Insert SingleVariableDeclaration(1693) into MethodDeclaration(1753) at 4", "Insert Block(1752) into MethodDeclaration(1753) at 5", "Insert SimpleName: CharSequence(302) into SimpleType: CharSequence(303) at 0", "Insert PrimitiveType: int(305) into SingleVariableDeclaration(307) at 0", "Insert SimpleName: start(306) into SingleVariableDeclaration(307) at 1", "Insert PrimitiveType: int(308) into SingleVariableDeclaration(310) at 0", "Insert SimpleName: end(309) into SingleVariableDeclaration(310) at 1", "Insert ReturnStatement(348) into Block(349) at 0", "Insert PrimitiveType: int(354) into SingleVariableDeclaration(356) at 0", "Insert SimpleName: i(355) into SingleVariableDeclaration(356) at 1", "Insert SimpleName: start(1612) into VariableDeclarationFragment(1613) at 0", "Insert SimpleName: end(1618) into VariableDeclarationFragment(1619) at 0", "Insert PrimitiveType: char(1623) into ArrayType: char[](1625) at 0", "Insert Dimension(1624) into ArrayType: char[](1625) at 1", "Insert SimpleName: buf(1626) into VariableDeclarationFragment(1627) at 0", "Insert ArrayType: char[](1632) into SingleVariableDeclaration(1634) at 0", "Insert SimpleName: buf(1633) into SingleVariableDeclaration(1634) at 1", "Insert PrimitiveType: int(1635) into SingleVariableDeclaration(1637) at 0", "Insert SimpleName: start(1636) into SingleVariableDeclaration(1637) at 1", "Insert PrimitiveType: int(1638) into SingleVariableDeclaration(1640) at 0", "Insert SimpleName: end(1639) into SingleVariableDeclaration(1640) at 1", "Insert ExpressionStatement(1646) into Block(1659) at 0", "Insert ExpressionStatement(1652) into Block(1659) at 1", "Insert ExpressionStatement(1658) into Block(1659) at 2", "Insert PrimitiveType: int(1664) into SingleVariableDeclaration(1666) at 0", "Insert SimpleName: index(1665) into SingleVariableDeclaration(1666) at 1", "Insert ReturnStatement(1672) into Block(1673) at 0", "Insert ReturnStatement(1681) into Block(1682) at 0", "Insert SimpleName: CharSequence(1685) into SimpleType: CharSequence(1686) at 0", "Insert PrimitiveType: int(1688) into SingleVariableDeclaration(1690) at 0", "Insert SimpleName: start(1689) into SingleVariableDeclaration(1690) at 1", "Insert PrimitiveType: int(1691) into SingleVariableDeclaration(1693) at 0", "Insert SimpleName: end(1692) into SingleVariableDeclaration(1693) at 1", "Insert IfStatement(1716) into Block(1752) at 0", "Insert IfStatement(1723) into Block(1752) at 1", "Insert IfStatement(1736) into Block(1752) at 2", "Insert ReturnStatement(1751) into Block(1752) at 3", "Insert InfixExpression: ||(321) into IfStatement(327) at 0", "Insert Block(326) into IfStatement(327) at 1", "Insert ClassInstanceCreation(337) into ReturnStatement(338) at 0", "Insert InfixExpression: -(347) into ReturnStatement(348) at 0", "Insert InfixExpression: ||(366) into IfStatement(372) at 0", "Insert SimpleType: CharSequence(509) into SingleVariableDeclaration(511) at 0", "Insert SimpleType: CharSequence(532) into SingleVariableDeclaration(534) at 0", "Insert IfStatement(599) into Block(607) at 1", "Insert PrimitiveType: char(1630) into ArrayType: char[](1632) at 0", "Insert Dimension(1631) into ArrayType: char[](1632) at 1", "Insert Assignment: =(1645) into ExpressionStatement(1646) at 0", "Insert Assignment: =(1651) into ExpressionStatement(1652) at 0", "Insert Assignment: =(1657) into ExpressionStatement(1658) at 0", "Insert ArrayAccess(1671) into ReturnStatement(1672) at 0", "Insert InfixExpression: -(1680) into ReturnStatement(1681) at 0", "Insert InfixExpression: ||(1710) into IfStatement(1716) at 0", "Insert Block(1715) into IfStatement(1716) at 1", "Insert InfixExpression: ==(1719) into IfStatement(1723) at 0", "Insert Block(1722) into IfStatement(1723) at 1", "Insert InfixExpression: &&(1732) into IfStatement(1736) at 0", "Insert Block(1735) into IfStatement(1736) at 1", "Insert ClassInstanceCreation(1750) into ReturnStatement(1751) at 0", "Insert InfixExpression: ||(317) into InfixExpression: ||(321) at 0", "Insert InfixExpression: <(320) into InfixExpression: ||(321) at 1", "Insert ThrowStatement(325) into Block(326) at 0", "Insert SimpleType: BufferBackedSequence(329) into ClassInstanceCreation(337) at 0", "Insert SimpleName: buf(330) into ClassInstanceCreation(337) at 1", "Insert InfixExpression: +(333) into ClassInstanceCreation(337) at 2", "Insert InfixExpression: +(336) into ClassInstanceCreation(337) at 3", "Insert SimpleName: limit(345) into InfixExpression: -(347) at 0", "Insert SimpleName: offset(346) into InfixExpression: -(347) at 1", "Insert InfixExpression: <(359) into InfixExpression: ||(366) at 0", "Insert InfixExpression: >=(365) into InfixExpression: ||(366) at 1", "Insert ThrowStatement(370) into Block(371) at 0", "Insert SimpleName: i(374) into ArrayAccess(375) at 1", "Insert SimpleName: CharSequence(508) into SimpleType: CharSequence(509) at 0", "Insert SimpleName: CharSequence(531) into SimpleType: CharSequence(532) at 0", "Insert InstanceofExpression(555) into IfStatement(599) at 0", "Insert Block(566) into IfStatement(599) at 1", "Insert Block(598) into IfStatement(599) at 2", "Insert FieldAccess(1643) into Assignment: =(1645) at 0", "Insert SimpleName: start(1644) into Assignment: =(1645) at 1", "Insert FieldAccess(1649) into Assignment: =(1651) at 0", "Insert SimpleName: end(1650) into Assignment: =(1651) at 1", "Insert FieldAccess(1655) into Assignment: =(1657) at 0", "Insert SimpleName: buf(1656) into Assignment: =(1657) at 1", "Insert SimpleName: buf(1667) into ArrayAccess(1671) at 0", "Insert InfixExpression: +(1670) into ArrayAccess(1671) at 1", "Insert SimpleName: end(1678) into InfixExpression: -(1680) at 0", "Insert SimpleName: start(1679) into InfixExpression: -(1680) at 1", "Insert InfixExpression: ||(1700) into InfixExpression: ||(1710) at 0", "Insert InfixExpression: >(1709) into InfixExpression: ||(1710) at 1", "Insert ThrowStatement(1714) into Block(1715) at 0", "Insert SimpleName: start(1717) into InfixExpression: ==(1719) at 0", "Insert SimpleName: end(1718) into InfixExpression: ==(1719) at 1", "Insert ReturnStatement(1721) into Block(1722) at 0", "Insert InfixExpression: ==(1726) into InfixExpression: &&(1732) at 0", "Insert InfixExpression: ==(1731) into InfixExpression: &&(1732) at 1", "Insert ReturnStatement(1734) into Block(1735) at 0", "Insert SimpleType: BufferBackedSequence(1738) into ClassInstanceCreation(1750) at 0", "Insert SimpleName: buf(1739) into ClassInstanceCreation(1750) at 1", "Insert InfixExpression: +(1744) into ClassInstanceCreation(1750) at 2", "Insert InfixExpression: +(1749) into ClassInstanceCreation(1750) at 3", "Insert InfixExpression: >(313) into InfixExpression: ||(317) at 0", "Insert InfixExpression: <(316) into InfixExpression: ||(317) at 1", "Insert SimpleName: end(318) into InfixExpression: <(320) at 0", "Insert SimpleName: start(319) into InfixExpression: <(320) at 1", "Insert ClassInstanceCreation(324) into ThrowStatement(325) at 0", "Insert SimpleName: BufferBackedSequence(328) into SimpleType: BufferBackedSequence(329) at 0", "Insert SimpleName: start(331) into InfixExpression: +(333) at 0", "Insert SimpleName: offset(332) into InfixExpression: +(333) at 1", "Insert SimpleName: end(334) into InfixExpression: +(336) at 0", "Insert SimpleName: offset(335) into InfixExpression: +(336) at 1", "Insert SimpleName: i(357) into InfixExpression: <(359) at 0", "Insert NumberLiteral: 0(358) into InfixExpression: <(359) at 1", "Insert ParenthesizedExpression(363) into InfixExpression: >=(365) at 0", "Move SimpleName: limit(254) into InfixExpression: >=(365) at 1", "Insert ClassInstanceCreation(369) into ThrowStatement(370) at 0", "Insert ArrayCreation(549) into VariableDeclarationFragment(550) at 1", "Insert SimpleName: s(552) into InstanceofExpression(555) at 0", "Move SimpleType: String(466) into InstanceofExpression(555) at 1", "Insert ExpressionStatement(565) into Block(566) at 0", "Insert ExpressionStatement(576) into Block(598) at 0", "Insert ForStatement(597) into Block(598) at 1", "Insert ThisExpression(1641) into FieldAccess(1643) at 0", "Insert SimpleName: start(1642) into FieldAccess(1643) at 1", "Insert ThisExpression(1647) into FieldAccess(1649) at 0", "Insert SimpleName: end(1648) into FieldAccess(1649) at 1", "Insert ThisExpression(1653) into FieldAccess(1655) at 0", "Insert SimpleName: buf(1654) into FieldAccess(1655) at 1", "Insert SimpleName: start(1668) into InfixExpression: +(1670) at 0", "Insert SimpleName: index(1669) into InfixExpression: +(1670) at 1", "Insert InfixExpression: <(1696) into InfixExpression: ||(1700) at 0", "Insert InfixExpression: <(1699) into InfixExpression: ||(1700) at 1", "Insert InfixExpression: +(1705) into InfixExpression: >(1709) at 0", "Insert FieldAccess(1708) into InfixExpression: >(1709) at 1", "Insert ClassInstanceCreation(1713) into ThrowStatement(1714) at 0", "Insert StringLiteral: \"\"(1720) into ReturnStatement(1721) at 0", "Insert SimpleName: start(1724) into InfixExpression: ==(1726) at 0", "Insert NumberLiteral: 0(1725) into InfixExpression: ==(1726) at 1", "Insert SimpleName: end(1727) into InfixExpression: ==(1731) at 0", "Insert FieldAccess(1730) into InfixExpression: ==(1731) at 1", "Insert ThisExpression(1733) into ReturnStatement(1734) at 0", "Insert SimpleName: BufferBackedSequence(1737) into SimpleType: BufferBackedSequence(1738) at 0", "Insert SimpleName: start(1740) into InfixExpression: +(1744) at 0", "Insert FieldAccess(1743) into InfixExpression: +(1744) at 1", "Insert SimpleName: end(1745) into InfixExpression: +(1749) at 0", "Insert FieldAccess(1748) into InfixExpression: +(1749) at 1", "Update SimpleName: offset(235) to end", "Move SimpleName: offset(235) into InfixExpression: >(313) at 0", "Move SimpleName: limit(236) into InfixExpression: >(313) at 1", "Insert SimpleName: start(314) into InfixExpression: <(316) at 0", "Insert NumberLiteral: 0(315) into InfixExpression: <(316) at 1", "Insert SimpleType: IndexOutOfBoundsException(323) into ClassInstanceCreation(324) at 0", "Insert Assignment: +=(362) into ParenthesizedExpression(363) at 0", "Insert SimpleType: IndexOutOfBoundsException(368) into ClassInstanceCreation(369) at 0", "Insert ArrayType: char[](545) into ArrayCreation(549) at 0", "Insert MethodInvocation(548) into ArrayCreation(549) at 1", "Insert Assignment: =(564) into ExpressionStatement(565) at 0", "Insert Assignment: =(575) into ExpressionStatement(576) at 0", "Insert VariableDeclarationExpression(581) into ForStatement(597) at 0", "Insert InfixExpression: <(584) into ForStatement(597) at 1", "Insert PrefixExpression: ++(586) into ForStatement(597) at 2", "Insert Block(596) into ForStatement(597) at 3", "Insert SimpleName: start(1694) into InfixExpression: <(1696) at 0", "Insert NumberLiteral: 0(1695) into InfixExpression: <(1696) at 1", "Insert SimpleName: end(1697) into InfixExpression: <(1699) at 0", "Insert SimpleName: start(1698) into InfixExpression: <(1699) at 1", "Insert FieldAccess(1703) into InfixExpression: +(1705) at 0", "Insert SimpleName: end(1704) into InfixExpression: +(1705) at 1", "Insert ThisExpression(1706) into FieldAccess(1708) at 0", "Insert SimpleName: end(1707) into FieldAccess(1708) at 1", "Insert SimpleType: IndexOutOfBoundsException(1712) into ClassInstanceCreation(1713) at 0", "Insert ThisExpression(1728) into FieldAccess(1730) at 0", "Insert SimpleName: end(1729) into FieldAccess(1730) at 1", "Insert ThisExpression(1741) into FieldAccess(1743) at 0", "Insert SimpleName: start(1742) into FieldAccess(1743) at 1", "Insert ThisExpression(1746) into FieldAccess(1748) at 0", "Insert SimpleName: start(1747) into FieldAccess(1748) at 1", "Insert SimpleName: IndexOutOfBoundsException(322) into SimpleType: IndexOutOfBoundsException(323) at 0", "Insert SimpleName: i(360) into Assignment: +=(362) at 0", "Insert SimpleName: offset(361) into Assignment: +=(362) at 1", "Insert SimpleName: IndexOutOfBoundsException(367) into SimpleType: IndexOutOfBoundsException(368) at 0", "Insert PrimitiveType: char(543) into ArrayType: char[](545) at 0", "Insert Dimension(544) into ArrayType: char[](545) at 1", "Move SimpleName: s(500) into MethodInvocation(548) at 0", "Update SimpleName: toCharArray(501) to length", "Move SimpleName: toCharArray(501) into MethodInvocation(548) at 1", "Insert SimpleName: buf(556) into Assignment: =(564) at 0", "Insert MethodInvocation(563) into Assignment: =(564) at 1", "Insert SimpleName: buf(567) into Assignment: =(575) at 0", "Insert ArrayCreation(574) into Assignment: =(575) at 1", "Insert PrimitiveType: int(577) into VariableDeclarationExpression(581) at 0", "Insert VariableDeclarationFragment(580) into VariableDeclarationExpression(581) at 1", "Insert SimpleName: i(582) into InfixExpression: <(584) at 0", "Insert QualifiedName: buf.length(583) into InfixExpression: <(584) at 1", "Insert SimpleName: i(585) into PrefixExpression: ++(586) at 0", "Insert ExpressionStatement(595) into Block(596) at 0", "Insert ThisExpression(1701) into FieldAccess(1703) at 0", "Insert SimpleName: start(1702) into FieldAccess(1703) at 1", "Insert SimpleName: IndexOutOfBoundsException(1711) into SimpleType: IndexOutOfBoundsException(1712) at 0", "Insert ParenthesizedExpression(561) into MethodInvocation(563) at 0", "Insert SimpleName: toCharArray(562) into MethodInvocation(563) at 1", "Insert ArrayType: char[](570) into ArrayCreation(574) at 0", "Insert MethodInvocation(573) into ArrayCreation(574) at 1", "Insert SimpleName: i(578) into VariableDeclarationFragment(580) at 0", "Insert NumberLiteral: 0(579) into VariableDeclarationFragment(580) at 1", "Insert Assignment: =(594) into ExpressionStatement(595) at 0", "Insert CastExpression(560) into ParenthesizedExpression(561) at 0", "Insert PrimitiveType: char(568) into ArrayType: char[](570) at 0", "Insert Dimension(569) into ArrayType: char[](570) at 1", "Insert SimpleName: s(571) into MethodInvocation(573) at 0", "Insert SimpleName: length(572) into MethodInvocation(573) at 1", "Insert ArrayAccess(589) into Assignment: =(594) at 0", "Insert MethodInvocation(593) into Assignment: =(594) at 1", "Move SimpleType: String(489) into CastExpression(560) at 0", "Insert SimpleName: s(559) into CastExpression(560) at 1", "Insert SimpleName: buf(587) into ArrayAccess(589) at 0", "Insert SimpleName: i(588) into ArrayAccess(589) at 1", "Insert SimpleName: s(590) into MethodInvocation(593) at 0", "Insert SimpleName: charAt(591) into MethodInvocation(593) at 1", "Insert SimpleName: i(592) into MethodInvocation(593) at 2", "Delete MethodDeclaration(267)", "Delete Modifier: final(232)", "Delete PrimitiveType: int(233)", "Delete SimpleName: lookahead(234)", "Delete InfixExpression: ==(237)", "Delete NumberLiteral: 1(238)", "Delete PrefixExpression: -(239)", "Delete ReturnStatement(240)", "Delete Block(241)", "Delete SimpleName: buf(243)", "Delete SimpleName: offset(244)", "Delete ArrayAccess(245)", "Delete SimpleName: offset(253)", "Delete InfixExpression: ==(255)", "Delete NumberLiteral: 1(256)", "Delete PrefixExpression: -(257)", "Delete ReturnStatement(258)", "Delete SimpleName: offset(262)", "Delete PostfixExpression: ++(263)", "Delete MethodInvocation(502)"]}}, {"CssLexer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: com.google.caja.util.Lists to ImportDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to CompilationUnit at 12", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: ch to InfixExpression: == at 0", "INS SimpleName: end to ArrayAccess at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: start to InfixExpression: == at 0", "INS InfixExpression: >= to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0", "INS CharacterLiteral: '+' to InfixExpression: == at 0", "INS MethodInvocation to ClassInstanceCreation at 3", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS SimpleName: valueOf to MethodInvocation at 1", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS CharacterLiteral: '0' to InfixExpression: >= at 1", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS SimpleName: parseEscapeBody to MethodInvocation at 0", "INS IfStatement to IfStatement at 2", "INS InfixExpression: == to IfStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: ch to InfixExpression: > at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS IfStatement to Block at 0", "INS SimpleName: parseNmStart to MethodInvocation at 0", "INS SimpleName: ch to InfixExpression: <= at 0", "INS SimpleName: end to MethodInvocation at 3", "INS IfStatement to Block at 2", "INS CharacterLiteral: '\\n' to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS Block to WhileStatement at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: < to InfixExpression: && at 1", "INS SimpleName: ch to Assignment: = at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: start to ArrayAccess at 1", "INS SimpleName: offset to SingleVariableDeclaration at 1", "INS ArrayAccess to InfixExpression: == at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS SimpleName: start to InfixExpression: > at 1", "INS Block to IfStatement at 1", "INS SimpleName: parseNum to MethodDeclaration at 4", "INS SimpleName: start to ArrayAccess at 1", "INS SimpleName: parseIdent to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS Block to MethodDeclaration at 7", "INS SimpleName: limit to InfixExpression: < at 1", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: end to Assignment: = at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleName: type to MethodInvocation at 3", "INS SimpleName: cp to MethodInvocation at 0", "INS CharacterLiteral: '\\n' to InfixExpression: == at 1", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS StringLiteral: \"\" to InfixExpression: + at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: limit to MethodInvocation at 3", "INS SimpleName: ch to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: tailEnd to InfixExpression: >= at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS IfStatement to Block at 9", "INS SimpleName: parseNmChar to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: produce to MethodDeclaration at 2", "INS SimpleName: limit to InfixExpression: - at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to WhileStatement at 1", "INS SimpleName: ch to MethodInvocation at 1", "INS SimpleName: uriEnd to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: stringEnd to InfixExpression: < at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: stringEnd to ConditionalExpression at 1", "INS ReturnStatement to Block at 2", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to Assignment: = at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: numEnd to InfixExpression: >= at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS QualifiedName: MessagePart.Factory to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: end to MethodInvocation at 3", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS CharacterLiteral: '9' to InfixExpression: <= at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: isRange to VariableDeclarationFragment at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: parseEscapeBody to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 28", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS QualifiedName: MessageType.EXPECTED_TOKEN to ClassInstanceCreation at 1", "INS IfStatement to Block at 1", "INS Modifier: private to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: start to InfixExpression: + at 0", "INS SimpleName: buf to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ArrayAccess to InfixExpression: == at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: end to MethodInvocation at 3", "INS Block to WhileStatement at 1", "INS IfStatement to Block at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS MethodInvocation to Assignment: = at 1", "INS Block to MethodDeclaration at 7", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: end to ReturnStatement at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS ArrayAccess to InfixExpression: == at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: limit to InfixExpression: == at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: limit to InfixExpression: == at 1", "INS MethodInvocation to ClassInstanceCreation at 4", "INS SimpleName: end to InfixExpression: - at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationStatement to Block at 1", "INS Block to IfStatement at 1", "INS ArrayAccess to InfixExpression: == at 0", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS SimpleName: isHexChar to MethodInvocation at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS SimpleName: stringEnd to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: limit to InfixExpression: == at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: toMessagePart to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: offset to InfixExpression: == at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to WhileStatement at 1", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS CharacterLiteral: '0' to InfixExpression: >= at 1", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: type to Assignment: = at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: ch to InfixExpression: >= at 0", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 2", "INS Block to DoStatement at 0", "INS SimpleName: parseUri to MethodDeclaration at 2", "INS ConditionalExpression to ReturnStatement at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: end to ArrayAccess at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: buf to SingleVariableDeclaration at 1", "INS ArrayAccess to InfixExpression: != at 1", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS Block to IfStatement at 1", "INS SimpleName: parseEscapeBody to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS CharacterLiteral: '9' to InfixExpression: <= at 1", "INS SimpleName: i to MethodInvocation at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: end to Assignment: = at 0", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: start to InfixExpression: + at 0", "INS IfStatement to Block at 2", "INS InfixExpression: + to ReturnStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: || to IfStatement at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: parseWhitespace to MethodInvocation at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: end to ReturnStatement at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS InfixExpression: && to DoStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: limit to InfixExpression: == at 1", "INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS InfixExpression: == to ConditionalExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS StringLiteral: \"\" to InfixExpression: + at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS IfStatement to Block at 1", "INS InfixExpression: | to ParenthesizedExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS AssertStatement to Block at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS Block to MethodDeclaration at 7", "INS VariableDeclarationStatement to Block at 5", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS CharacterLiteral: '-' to InfixExpression: != at 0", "INS SimpleName: toMessagePart to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: ch to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: end to InfixExpression: < at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: end to Assignment: = at 0", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: identEnd to Assignment: = at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: end to MethodInvocation at 2", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS ForStatement to Block at 4", "INS SimpleName: nameEnd to VariableDeclarationFragment at 0", "INS ThrowStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: len to InfixExpression: + at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS SimpleName: isLineBreak to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: ch to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS Block to IfStatement at 1", "INS SimpleName: end to ReturnStatement at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS ArrayAccess to MethodInvocation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: end to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS ArrayAccess to Assignment: = at 1", "INS SimpleName: limit to MethodInvocation at 3", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: start to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: getLimit to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayAccess to InfixExpression: == at 1", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS CharacterLiteral: '?' to InfixExpression: == at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS QualifiedName: MessagePart.Factory to MethodInvocation at 0", "INS Assignment: = to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS Block to MethodDeclaration at 7", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: end to InfixExpression: == at 0", "INS Modifier: private to MethodDeclaration at 0", "INS PrefixExpression: - to ReturnStatement at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS SimpleName: start to InfixExpression: != at 1", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: end to ArrayAccess at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: buf to ArrayAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: ch to InfixExpression: + at 1", "INS PrimitiveType: int to MethodDeclaration at 2", "INS CharacterLiteral: '9' to InfixExpression: > at 1", "INS SimpleName: valueOf to MethodInvocation at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS StringLiteral: \"url(\" to MethodInvocation at 3", "INS IfStatement to Block at 6", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: parseName to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS PrefixExpression: - to ReturnStatement at 0", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS ConditionalExpression to MethodInvocation at 2", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: start to InfixExpression: == at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 3", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS PrimitiveType: int to MethodDeclaration at 3", "INS SimpleName: end to Assignment: = at 0", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to MethodInvocation at 2", "INS PrefixExpression: - to ConditionalExpression at 2", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: start to InfixExpression: - at 1", "INS Modifier: static to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 4", "INS Modifier: static to MethodDeclaration at 1", "INS ParenthesizedExpression to InfixExpression: >= at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS BooleanLiteral: true to DoStatement at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: end to InfixExpression: - at 0", "INS VariableDeclarationStatement to Block at 3", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: || to InfixExpression: || at 0", "INS ReturnStatement to Block at 5", "INS SwitchCase to SwitchStatement at 5", "INS SimpleName: parseString to MethodInvocation at 0", "INS SimpleName: toMessagePart to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: start to InfixExpression: != at 0", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: isRange to IfStatement at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: start to InfixExpression: + at 0", "INS SimpleName: end to ArrayAccess at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS IfStatement to Block at 1", "INS ReturnStatement to Block at 3", "INS IfStatement to IfStatement at 2", "INS SimpleName: buf to ArrayAccess at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS CharacterLiteral: '=' to InfixExpression: == at 0", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: start to ArrayAccess at 1", "INS Block to IfStatement at 1", "INS ArrayAccess to InfixExpression: == at 1", "INS SimpleName: ch to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: chB to InfixExpression: | at 0", "INS CharacterLiteral: 'A' to InfixExpression: >= at 1", "INS InfixExpression: || to IfStatement at 0", "INS CharacterLiteral: '\\n' to InfixExpression: == at 0", "INS IfStatement to Block at 1", "INS SimpleName: identEnd to Assignment: = at 0", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS Block to ForStatement at 3", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: parseWhitespace to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS ThrowStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS ReturnStatement to Block at 3", "INS SimpleName: chB to VariableDeclarationFragment at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS InfixExpression: && to WhileStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: end to ArrayAccess at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: match to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Modifier: static to MethodDeclaration at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS ThrowStatement to Block at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS IfStatement to Block at 5", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: isLineBreak to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: CssLexer to MethodInvocation at 0", "INS DoStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS InfixExpression: >= to AssertStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS SimpleName: nmCharEnd to Assignment: = at 1", "INS IfStatement to Block at 1", "INS Modifier: static to MethodDeclaration at 1", "INS CharacterLiteral: '/' to InfixExpression: == at 1", "INS MethodInvocation to ClassInstanceCreation at 4", "INS WhileStatement to Block at 3", "INS InfixExpression: <= to InfixExpression: && at 1", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS InfixExpression: == to IfStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS ArrayAccess to InfixExpression: == at 1", "INS SimpleName: isUriChar to MethodInvocation at 0", "INS CharacterLiteral: '?' to InfixExpression: == at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: identEnd to Assignment: = at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: limit to ArrayAccess at 1", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS InfixExpression: || to IfStatement at 0", "INS ArrayAccess to Assignment: = at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: limit to InfixExpression: < at 1", "INS ThrowStatement to Block at 8", "INS SimpleName: limit to InfixExpression: < at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS IfStatement to Block at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleName: end to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: >= to ConditionalExpression at 0", "INS IfStatement to Block at 4", "INS SimpleName: identEnd to VariableDeclarationFragment at 0", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS SimpleName: end to InfixExpression: != at 0", "INS DoStatement to Block at 1", "INS Block to IfStatement at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS SimpleName: buf to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: ch to InfixExpression: <= at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS ReturnStatement to Block at 4", "INS SimpleName: limit to InfixExpression: == at 1", "INS Modifier: private to MethodDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: parseInt to MethodInvocation at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: buf to ArrayAccess at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodInvocation to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: ch to InfixExpression: == at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: start to InfixExpression: + at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: - to ReturnStatement at 0", "INS SimpleName: identEnd to Assignment: = at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS MethodInvocation to Assignment: = at 1", "INS CharacterLiteral: '*' to InfixExpression: == at 1", "INS SimpleName: chM to InfixExpression: == at 1", "INS SimpleName: start to InfixExpression: + at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS WhileStatement to Block at 6", "INS InfixExpression: < to InfixExpression: && at 0", "INS ParenthesizedExpression to InfixExpression: >= at 0", "INS SimpleName: end to MethodInvocation at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: uriEnd to ConditionalExpression at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS SimpleName: start to VariableDeclarationFragment at 1", "INS SimpleName: limit to InfixExpression: == at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ClassInstanceCreation at 2", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS InfixExpression: - to MethodInvocation at 3", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS InfixExpression: < to InfixExpression: && at 1", "INS SimpleName: parseRange to MethodDeclaration at 3", "INS SimpleName: limit to InfixExpression: == at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ConditionalExpression to Assignment: = at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS InfixExpression: && to WhileStatement at 0", "INS Block to IfStatement at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: >= to IfStatement at 0", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: end to MethodInvocation at 2", "INS PrimitiveType: char to SingleVariableDeclaration at 0", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS SimpleName: ch to InfixExpression: >= at 0", "INS SimpleName: start to VariableDeclarationFragment at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS SimpleName: parseEscapeBody to MethodInvocation at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS InfixExpression: >= to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS SimpleName: end to ReturnStatement at 0", "INS SimpleName: start to InfixExpression: == at 0", "INS Block to DoStatement at 0", "INS ForStatement to Block at 2", "INS ReturnStatement to Block at 5", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS InfixExpression: && to IfStatement at 0", "INS CharacterLiteral: 'Z' to InfixExpression: < at 1", "INS ReturnStatement to Block at 3", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS InfixExpression: >= to InfixExpression: && at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: CssLexer to MethodInvocation at 0", "INS ReturnStatement to Block at 8", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: == at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: parseNmStart to MethodInvocation at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS SimpleName: parseString to MethodDeclaration at 3", "INS ArrayAccess to InfixExpression: != at 1", "INS IfStatement to Block at 2", "INS InfixExpression: < to InfixExpression: && at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: end to ReturnStatement at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: ++ to InfixExpression: == at 0", "INS IfStatement to Block at 2", "INS InfixExpression: >= to ForStatement at 1", "INS SimpleName: match to MethodInvocation at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0x20 to InfixExpression: | at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS SimpleName: parseUri to MethodInvocation at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS ReturnStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: end to InfixExpression: - at 0", "INS MethodInvocation to InfixExpression: >= at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: start to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS Block to WhileStatement at 1", "INS Dimension to ArrayType: char[] at 1", "INS MethodInvocation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ThrowStatement to Block at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS InfixExpression: <= to InfixExpression: && at 1", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: >= at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: CssSplitter to TypeDeclaration: class at 1", "INS InfixExpression: >= to InfixExpression: && at 0", "INS ParenthesizedExpression to InfixExpression: >= at 0", "INS CharacterLiteral: '.' to InfixExpression: == at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS Block to WhileStatement at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: parseMatch to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS InfixExpression: + to ConditionalExpression at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: parseNmChar to MethodDeclaration at 3", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: end to InfixExpression: < at 0", "INS ArrayAccess to InfixExpression: == at 1", "INS IfStatement to Block at 2", "INS SimpleName: chB to InfixExpression: < at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: uriEnd to InfixExpression: < at 0", "INS BreakStatement to Block at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: parseNmChar to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: numEnd to Assignment: = at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to InfixExpression: == at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS SimpleName: stringEnd to InfixExpression: < at 0", "INS SwitchStatement to Block at 0", "INS VariableDeclarationStatement to Block at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: parseRange to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 1", "INS InfixExpression: > to AssertStatement at 0", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: end to Assignment: = at 0", "INS Block to IfStatement at 2", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS CharacterLiteral: '\\\\' to InfixExpression: == at 1", "INS CharacterLiteral: '\\r' to InfixExpression: == at 1", "INS SimpleName: nmCharEnd to Assignment: = at 0", "INS PrefixExpression: - to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS PrefixExpression: - to ReturnStatement at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS ExpressionStatement to Block at 5", "INS SimpleName: cp to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS WhileStatement to Block at 0", "INS SimpleName: ch to Assignment: = at 0", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS Assignment: = to MethodInvocation at 2", "INS PrefixExpression: - to ConditionalExpression at 2", "INS Block to IfStatement at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS Block to MethodDeclaration at 6", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: >= to ForStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: identEnd to InfixExpression: >= at 0", "INS ForStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: end to MethodInvocation at 2", "INS PrefixExpression: - to ReturnStatement at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS AssertStatement to Block at 10", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: end to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: identEnd to Assignment: = at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: buf to MethodInvocation at 1", "INS PrefixExpression: - to InfixExpression: != at 1", "INS SimpleName: start to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS CharacterLiteral: '0' to InfixExpression: < at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: ch to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isNum to IfStatement at 0", "INS SimpleName: ch to InfixExpression: == at 0", "INS SimpleName: toMessagePart to MethodDeclaration at 3", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS IfStatement to IfStatement at 2", "INS QualifiedName: MessageType.UNRECOGNIZED_ESCAPE to ClassInstanceCreation at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS CharacterLiteral: '9' to InfixExpression: <= at 1", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to Assignment: = at 0", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayAccess to Assignment: = at 1", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS SimpleName: end to InfixExpression: == at 0", "INS InfixExpression: - to InfixExpression: == at 0", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS IfStatement to IfStatement at 2", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: identEnd to InfixExpression: != at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: limit to InfixExpression: == at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS InfixExpression: <= to InfixExpression: && at 1", "INS Block to IfStatement at 1", "INS InfixExpression: && to WhileStatement at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS InfixExpression: + to ReturnStatement at 0", "INS SimpleName: numEnd to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS Block to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: end to ConditionalExpression at 1", "INS MethodInvocation to ClassInstanceCreation at 4", "INS SimpleName: cp to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS ArrayAccess to InfixExpression: == at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS SimpleName: end to ArrayAccess at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: ch to Assignment: = at 0", "INS SimpleName: end to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS InfixExpression: && to InfixExpression: && at 0", "INS PrefixExpression: ++ to InfixExpression: == at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS Block to IfStatement at 1", "INS SimpleName: end to SingleVariableDeclaration at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: commentPos to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: end to ArrayAccess at 1", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS SimpleName: stringEnd to InfixExpression: >= at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS Modifier: static to MethodDeclaration at 1", "INS InfixExpression: >= to IfStatement at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: ch to MethodInvocation at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS QualifiedName: MessageType.MALFORMED_NUMBER to ClassInstanceCreation at 1", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS InfixExpression: != to IfStatement at 0", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: start to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS ArrayAccess to InfixExpression: == at 1", "INS NumberLiteral: 4 to InfixExpression: == at 1", "INS ForStatement to Block at 2", "INS SimpleName: end to ArrayAccess at 1", "INS ReturnStatement to Block at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS SimpleName: nmCharEnd to VariableDeclarationFragment at 0", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS SimpleName: parseNmChar to MethodInvocation at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: end to MethodInvocation at 2", "INS InfixExpression: < to ConditionalExpression at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS Modifier: static to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: chB to InfixExpression: == at 0", "INS Block to MethodDeclaration at 6", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: end to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS SimpleName: start to ArrayAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrefixExpression: - to ReturnStatement at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS IfStatement to Block at 1", "INS SimpleName: start to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleName: start to InfixExpression: + at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: end to InfixExpression: + at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: end to MethodInvocation at 3", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS CharacterLiteral: '%' to InfixExpression: == at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to Assignment: = at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: getLimit to MethodInvocation at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: end to MethodInvocation at 2", "INS IfStatement to IfStatement at 2", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: isNum to Assignment: = at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS Block to ForStatement at 3", "INS SimpleName: getLimit to MethodInvocation at 1", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS VariableDeclarationStatement to Block at 7", "INS InfixExpression: + to ReturnStatement at 0", "INS QualifiedName: MessageType.UNTERMINATED_STRING_TOKEN to ClassInstanceCreation at 1", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: limit to InfixExpression: < at 1", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: start to ArrayAccess at 1", "INS SimpleName: end to ArrayAccess at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS InfixExpression: < to IfStatement at 0", "INS WhileStatement to Block at 3", "INS SimpleName: parseIdent to MethodInvocation at 0", "INS SimpleName: end to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: parseWhitespace to MethodDeclaration at 2", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS Block to IfStatement at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: limit to SingleVariableDeclaration at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: ch to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: end to ReturnStatement at 0", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS Block to WhileStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: end to Assignment: = at 0", "INS ArrayAccess to InfixExpression: == at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 0", "INS SimpleName: end to MethodInvocation at 3", "INS IfStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: limit to InfixExpression: < at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS ArrayType: char[] to VariableDeclarationStatement at 0", "INS PrefixExpression: - to ReturnStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: end to Assignment: = at 0", "INS InfixExpression: && to IfStatement at 0", "INS Modifier: static to MethodDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS CharacterLiteral: '0' to InfixExpression: >= at 1", "INS SimpleName: isLineBreak to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: parseInt to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: start to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: end to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: end to ArrayAccess at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS Modifier: private to MethodDeclaration at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: end to ArrayAccess at 1", "INS IfStatement to Block at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: CssLexer to MethodInvocation at 0", "INS SimpleName: ch to Assignment: = at 0", "INS IfStatement to Block at 2", "INS SimpleName: parseInt to MethodInvocation at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: limit to InfixExpression: < at 1", "INS Block to IfStatement at 1", "INS InfixExpression: && to WhileStatement at 0", "INS SimpleName: end to InfixExpression: == at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS ExpressionStatement to Block at 11", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: end to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS IfStatement to Block at 3", "INS SimpleName: isHexChar to MethodInvocation at 1", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: start to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: end to ReturnStatement at 0", "INS CharacterLiteral: '-' to InfixExpression: == at 1", "INS Block to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: end to MethodInvocation at 3", "INS ParenthesizedExpression to InfixExpression: < at 0", "INS Block to IfStatement at 1", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: buf to ArrayAccess at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: chB to InfixExpression: >= at 0", "INS SimpleName: end to ArrayAccess at 1", "INS ArrayAccess to InfixExpression: == at 0", "INS VariableDeclarationStatement to Block at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS PrefixExpression: - to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS QualifiedName: CssTokenType.PUNCTUATION to Assignment: = at 1", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS IfStatement to IfStatement at 2", "INS InfixExpression: + to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: i to InfixExpression: + at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ch to InfixExpression: >= at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 3", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: MessagePart to SimpleType: MessagePart at 0", "INS SimpleName: end to ArrayAccess at 1", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: isLineBreak to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS Dimension to ArrayType: char[] at 1", "INS IfStatement to Block at 2", "INS CharacterLiteral: '(' to InfixExpression: == at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: end to Assignment: = at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: >= to IfStatement at 0", "INS WhileStatement to Block at 4", "INS SimpleName: isNum to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: filePositionForOffsets to MethodInvocation at 1", "INS SimpleName: start to MethodInvocation at 2", "INS IfStatement to Block at 7", "INS Dimension to ArrayType: char[] at 1", "INS IfStatement to IfStatement at 2", "INS CharacterLiteral: ')' to InfixExpression: != at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: parseNmStart to MethodDeclaration at 3", "INS NumberLiteral: 0 to InfixExpression: < at 1", "INS SimpleName: end to ArrayAccess at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS InfixExpression: - to InfixExpression: < at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: end to InfixExpression: > at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: start to ArrayAccess at 1", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: < to InfixExpression: && at 1", "INS ArrayAccess to InfixExpression: + at 1", "INS IfStatement to Block at 4", "INS VariableDeclarationStatement to Block at 3", "INS InfixExpression: < to WhileStatement at 0", "INS InfixExpression: >= to InfixExpression: && at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS VariableDeclarationStatement to Block at 8", "INS Block to IfStatement at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS QualifiedName: MessagePart.Factory to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS IfStatement to Block at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to MethodInvocation at 3", "INS SimpleName: limit to InfixExpression: < at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 7", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS CharacterLiteral: '\\\\' to InfixExpression: == at 1", "INS ReturnStatement to Block at 4", "INS ExpressionStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: tailEnd to Assignment: = at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: end to InfixExpression: == at 0", "INS SimpleName: parseInt to MethodDeclaration at 3", "INS SimpleName: start to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleName: end to MethodInvocation at 3", "INS SimpleName: limit to MethodInvocation at 3", "INS SimpleName: parseMatch to MethodDeclaration at 3", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: parseString to MethodInvocation at 0", "INS SimpleName: valueOf to MethodInvocation at 1", "INS ArrayAccess to InfixExpression: == at 1", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: end to Assignment: = at 0", "INS Block to MethodDeclaration at 6", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: end to ReturnStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"<end-of-input>\" to ConditionalExpression at 1", "INS SimpleName: len to InfixExpression: < at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 4", "INS IfStatement to Block at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: pending to Assignment: = at 0", "INS SimpleName: ch to SwitchStatement at 0", "INS SimpleName: offset to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 1", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleType: CharProducer to SingleVariableDeclaration at 0", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS InfixExpression: < to InfixExpression: || at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS SimpleName: start to InfixExpression: - at 1", "INS SimpleType: MessagePart to MethodDeclaration at 2", "INS InfixExpression: < to WhileStatement at 0", "INS WhileStatement to Block at 0", "INS Block to ForStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: match to SingleVariableDeclaration at 1", "INS Block to ForStatement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: < to InfixExpression: && at 0", "INS ExpressionStatement to Block at 2", "INS Block to MethodDeclaration at 7", "INS SimpleName: ch to InfixExpression: == at 0", "INS SimpleName: parseNum to MethodInvocation at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: start to InfixExpression: + at 0", "INS SimpleName: start to InfixExpression: + at 0", "INS InfixExpression: + to ArrayAccess at 1", "INS QualifiedName: MessageType.EXPECTED_TOKEN to ClassInstanceCreation at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: getLimit to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS ArrayAccess to Assignment: = at 1", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: end to ArrayAccess at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: end to ReturnStatement at 0", "INS SimpleName: nmCharEnd to VariableDeclarationFragment at 0", "INS SimpleName: parseWhitespace to MethodInvocation at 0", "INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: getBuffer to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS InfixExpression: && to WhileStatement at 0", "INS SimpleName: instance to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS InfixExpression: && to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: cp to MethodInvocation at 1", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS CharacterLiteral: '\\\\' to InfixExpression: == at 1", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS PrimitiveType: char to VariableDeclarationStatement at 0", "INS CharacterLiteral: '?' to InfixExpression: == at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS ReturnStatement to Block at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: end to Assignment: = at 0", "INS SimpleName: ch to VariableDeclarationFragment at 0", "INS QualifiedName: MessageType.MALFORMED_STRING to ClassInstanceCreation at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS InfixExpression: >= to InfixExpression: && at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleName: len to VariableDeclarationFragment at 0", "INS SimpleName: buf to VariableDeclarationFragment at 0", "INS SimpleName: nmCharEnd to Assignment: = at 0", "INS SimpleName: parseName to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: start to InfixExpression: + at 0", "INS PrefixExpression: - to ReturnStatement at 0", "INS SimpleName: Token to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS SimpleName: cp to SingleVariableDeclaration at 1", "INS SimpleName: start to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: end to InfixExpression: >= at 0", "INS SimpleName: end to Assignment: = at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: getLimit to MethodInvocation at 1", "INS PrefixExpression: ++ to ExpressionStatement at 0", "INS QualifiedName: MessageType.EXPECTED_TOKEN to ClassInstanceCreation at 1", "INS InfixExpression: < to InfixExpression: && at 1", "INS InfixExpression: - to MethodInvocation at 2", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: limit to InfixExpression: < at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: chM to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS TypeDeclaration: class to CompilationUnit at 12", "INS InfixExpression: == to InfixExpression: && at 0", "INS InfixExpression: < to InfixExpression: && at 0", "INS ThrowStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 0", "INS WhileStatement to Block at 7", "INS Modifier: final to TypeDeclaration: class at 0", "INS IfStatement to Block at 3", "INS SimpleName: cp to MethodInvocation at 0", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: chM to InfixExpression: == at 1", "INS SimpleName: isSpaceChar to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: >= to InfixExpression: && at 1", "INS Block to IfStatement at 1", "INS SimpleName: start to MethodInvocation at 2", "INS SimpleName: parseIdent to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: limit to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 4", "INS CharacterLiteral: '\\r' to InfixExpression: == at 1", "INS SimpleName: start to MethodInvocation at 3", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS SimpleName: end to PrefixExpression: ++ at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to MethodDeclaration at 7", "INS IfStatement to IfStatement at 2", "INS SimpleName: ch to InfixExpression: <= at 0", "INS SimpleName: nmCharEnd to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS IfStatement to Block at 4", "INS Modifier: static to MethodDeclaration at 2", "INS InfixExpression: == to IfStatement at 0", "INS VariableDeclarationStatement to Block at 3", "INS InfixExpression: != to ConditionalExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: > to InfixExpression: || at 1", "INS SimpleName: parseIdent to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV ParameterizedType: TokenStream<CssTokenType> to TypeDeclaration: class at 2", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV FieldDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 16", "MOV FieldDeclaration to TypeDeclaration: class at 3", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV MethodDeclaration to TypeDeclaration: class at 10", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV MethodDeclaration to TypeDeclaration: class at 27"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 5"]}, {"root": "INS Modifier: static to MethodDeclaration at 1", "operations": ["INS Modifier: static to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 7", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseException to MethodDeclaration at 6"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: newLinkedList to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 6", "MOV IfStatement to Block at 1", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 3", "MOV IfStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 12", "MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ArrayType: char[] to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV InfixExpression: < to ForStatement at 1", "MOV PrefixExpression: ++ to ForStatement at 2"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 6", "MOV SwitchCase to SwitchStatement at 1", "MOV SwitchCase to SwitchStatement at 3"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 2"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 4"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS SimpleName: limit to InfixExpression: == at 1", "INS SimpleName: start to InfixExpression: == at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationExpression", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PrefixExpression: ++ to ForStatement at 2", "MOV InfixExpression: < to InfixExpression: && at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 1"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV MethodInvocation to InfixExpression: != at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: >= to InfixExpression: && at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: || to IfStatement at 0"]}, {"root": "INS PrefixExpression: - to ReturnStatement at 0", "operations": ["INS PrefixExpression: - to ReturnStatement at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Message to ClassInstanceCreation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV MethodInvocation to ArrayAccess at 0"]}, {"root": "MOVE from ForStatement", "operations": ["MOV InfixExpression: >= to ForStatement at 1", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: || to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: >= to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: >= to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: >= to InfixExpression: && at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV MethodInvocation to ArrayAccess at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ArrayAccess", "operations": ["MOV MethodInvocation to ArrayAccess at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from getCurrentPosition to filePositionForOffsets", "operations": ["UPD SimpleName: getCurrentPosition from getCurrentPosition to filePositionForOffsets", "UPD SimpleName: toFilePosition from toFilePosition to filePositionForOffsets", "UPD SimpleName: toFilePosition from toFilePosition to filePositionForOffsets"]}, {"root": "INS SimpleName: start to MethodInvocation at 2", "operations": ["INS SimpleName: start to MethodInvocation at 2"]}, {"root": "INS SimpleName: start to MethodInvocation at 3", "operations": ["INS SimpleName: start to MethodInvocation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 3", "MOV SimpleType: Message to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: FilePosition to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Message to ClassInstanceCreation at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Message to ClassInstanceCreation at 0", "MOV MethodInvocation to ClassInstanceCreation at 3"]}, {"root": "UPDATE from < to ==", "operations": ["UPD InfixExpression: < from < to ==", "UPD InfixExpression: < from < to =="]}, {"root": "INS PrefixExpression: ++ to ExpressionStatement at 0", "operations": ["INS SimpleName: end to PrefixExpression: ++ at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: end to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: identEnd to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: || to IfStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from chi to end", "operations": ["UPD SimpleName: chi from chi to end", "UPD SimpleName: chi from chi to end"]}, {"root": "INS SimpleName: limit to InfixExpression: < at 1", "operations": ["INS SimpleName: limit to InfixExpression: < at 1"]}, {"root": "INS ArrayAccess to Assignment: = at 1", "operations": ["INS SimpleName: end to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 1", "INS SimpleName: buf to ArrayAccess at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS InfixExpression: >= to IfStatement at 0", "operations": ["INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS SimpleName: nameEnd to InfixExpression: >= at 0", "INS InfixExpression: >= to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: || to IfStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Message to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: nameEnd to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: end to Assignment: = at 0"]}, {"root": "INS PrimitiveType: int to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "UPDATE from breaks to cp", "operations": ["UPD SimpleName: breaks from breaks to cp", "UPD SimpleName: breaks from breaks to cp"]}, {"root": "UPDATE from spos to start", "operations": ["UPD SimpleName: spos from spos to start", "UPD SimpleName: spos from spos to start"]}, {"root": "INS SimpleName: end to MethodInvocation at 3", "operations": ["INS SimpleName: end to MethodInvocation at 3"]}, {"root": "UPDATE from tail to tailEnd", "operations": ["UPD SimpleName: tail from tail to tailEnd"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: parseMatch to MethodInvocation at 0", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: end to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ConditionalExpression to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: != to InfixExpression: && at 1", "INS InfixExpression: < to InfixExpression: && at 0", "INS SimpleName: end to InfixExpression: < at 0", "INS SimpleName: buf to ArrayAccess at 0", "INS SimpleName: end to ArrayAccess at 1", "INS ArrayAccess to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: limit to InfixExpression: < at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS ExpressionStatement to Block at 5", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: cp to MethodInvocation at 1", "INS SimpleName: parseIdent to MethodInvocation at 0", "INS SimpleName: end to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: identEnd to Assignment: = at 0"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS InfixExpression: >= to IfStatement at 0", "INS SimpleName: identEnd to Assignment: = at 1", "INS SimpleName: end to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: identEnd to InfixExpression: >= at 0", "INS IfStatement to IfStatement at 2", "INS NumberLiteral: 0 to InfixExpression: >= at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 6", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV CharacterLiteral: '{' to InfixExpression: != at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 8"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV InfixExpression: - to InfixExpression: == at 0"]}, {"root": "INS PrefixExpression: ++ to ExpressionStatement at 0", "operations": ["INS SimpleName: end to PrefixExpression: ++ at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0"]}, {"root": "INS InfixExpression: != to InfixExpression: && at 0", "operations": ["INS SimpleName: end to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: limit to InfixExpression: != at 1"]}, {"root": "INS SimpleName: limit to InfixExpression: < at 1", "operations": ["INS SimpleName: limit to InfixExpression: < at 1"]}, {"root": "INS ArrayAccess to Assignment: = at 1", "operations": ["INS SimpleName: end to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 1", "INS SimpleName: buf to ArrayAccess at 0"]}, {"root": "INS ArrayAccess to InfixExpression: == at 1", "operations": ["INS ArrayAccess to InfixExpression: == at 1", "INS SimpleName: end to ArrayAccess at 1", "INS SimpleName: buf to ArrayAccess at 0"]}, {"root": "INS PrefixExpression: ++ to ExpressionStatement at 0", "operations": ["INS SimpleName: end to PrefixExpression: ++ at 0", "INS PrefixExpression: ++ to ExpressionStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ParseException to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: end to MethodInvocation at 3", "operations": ["INS SimpleName: end to MethodInvocation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Message to ClassInstanceCreation at 0", "MOV MethodInvocation to ClassInstanceCreation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 3", "MOV SimpleType: Message to ClassInstanceCreation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.regex.Pattern"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ParameterizedType: LinkedList<Token<CssTokenType>>", "DEL SimpleName: CssTokenType", "DEL ParameterizedType: Token<CssTokenType>", "DEL SimpleType: CssTokenType", "DEL ClassInstanceCreation", "DEL SimpleType: Token", "DEL SimpleName: Token", "DEL SimpleName: LinkedList", "DEL SimpleType: LinkedList"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: chi", "DEL ExpressionStatement", "DEL SimpleName: read", "DEL Assignment: =", "DEL SimpleName: cp"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL CastExpression", "operations": ["DEL PrimitiveType: char", "DEL CastExpression", "DEL SimpleName: chi"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: ch", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: parseName", "DEL MethodInvocation", "DEL SimpleName: sb"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: ch", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: append"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: read", "DEL ExpressionStatement"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL MethodInvocation", "DEL SimpleName: lookahead", "DEL InfixExpression: !=", "DEL SimpleName: cp"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: read", "DEL SimpleName: chi", "DEL MethodInvocation", "DEL SimpleName: cp"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL CastExpression", "operations": ["DEL SimpleName: chi", "DEL CastExpression", "DEL PrimitiveType: char"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: append", "DEL SimpleName: ch"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: parseIdent", "DEL MethodInvocation", "DEL SimpleName: sb"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: lookahead"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: append", "DEL CharacterLiteral: '%'", "DEL SimpleName: sb"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: read", "DEL ExpressionStatement", "DEL SimpleName: cp"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL SimpleName: ch", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: read", "DEL SimpleName: cp", "DEL MethodInvocation"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL SimpleName: cp"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: getBuffer", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL WhileStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL ThrowStatement", "DEL StringLiteral: \" : \"", "DEL SimpleName: cp", "DEL ClassInstanceCreation", "DEL SimpleName: chi", "DEL SimpleName: ch", "DEL SimpleName: chi", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL Modifier: private", "DEL CharacterLiteral: '?'", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: sb", "DEL QualifiedName: MessageType.UNTERMINATED_STRING_TOKEN", "DEL SimpleName: parseNmChar", "DEL SimpleName: append", "DEL SimpleName: lookahead", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: cp", "DEL SimpleName: ch", "DEL SimpleName: chi", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL Modifier: final", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: sb", "DEL PrimitiveType: boolean", "DEL SimpleName: cp", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: sb", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: matches", "DEL WhileStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: parseIdent", "DEL SimpleName: len", "DEL SimpleName: isHexChar", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL IfStatement", "DEL ConditionalExpression", "DEL SimpleName: parseEscape", "DEL SimpleName: cp", "DEL Assignment: =", "DEL Assignment: =", "DEL CharacterLiteral: '('", "DEL InfixExpression: &&", "DEL PrimitiveType: char", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL SimpleName: parseWhitespace", "DEL ReturnStatement", "DEL SimpleName: getCurrentPosition", "DEL SimpleName: sb", "DEL VariableDeclarationStatement", "DEL SimpleName: getOffset", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL BooleanLiteral: false", "DEL SimpleName: read", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: Pattern", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: sb", "DEL IfStatement", "DEL SimpleName: cp", "DEL SimpleName: append", "DEL SimpleName: read", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleName: getCurrentPosition", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL SimpleName: la", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: result", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: cp", "DEL Block", "DEL SimpleName: read", "DEL PrimitiveType: char", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL InfixExpression: <", "DEL SimpleName: parseWhitespace", "DEL ArrayAccess", "DEL IfStatement", "DEL SimpleName: start", "DEL SimpleName: valueOf", "DEL ThrowStatement", "DEL TypeDeclaration: class", "DEL SimpleName: breaks", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: ParseException", "DEL ThrowStatement", "DEL SimpleName: sb", "DEL IfStatement", "DEL SimpleName: sb", "DEL Block", "DEL SimpleName: sb", "DEL ArrayAccess", "DEL SimpleType: ParseException", "DEL SimpleName: type", "DEL ExpressionStatement", "DEL SimpleName: chi", "DEL SimpleName: lookahead", "DEL CharacterLiteral: ')'", "DEL MethodInvocation", "DEL SimpleName: lookahead", "DEL SingleVariableDeclaration", "DEL SimpleName: sb", "DEL SimpleName: cp", "DEL SimpleName: chi", "DEL CharacterLiteral: '\\n'", "DEL MethodInvocation", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: chi", "DEL SimpleName: isEmpty", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL ArrayAccess", "DEL CharacterLiteral: '\\f'", "DEL PrimitiveType: int", "DEL SimpleName: getCharInFile", "DEL SimpleName: ch", "DEL SimpleName: chi", "DEL IfStatement", "DEL SimpleName: parseNmChar", "DEL ExpressionStatement", "DEL SimpleName: buffer", "DEL SimpleName: parseOneStringChar", "DEL IfStatement", "DEL SimpleName: append", "DEL SimpleName: getCharInFile", "DEL SimpleName: parseInt", "DEL StringLiteral: \" : \"", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: cp", "DEL QualifiedName: MessageType.EXPECTED_TOKEN", "DEL QualifiedName: MessagePart.Factory", "DEL SimpleName: ParseException", "DEL SimpleName: cp", "DEL SimpleType: SourceBreaks", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: cp", "DEL IfStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL ForStatement", "DEL SimpleName: ch2", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: isUriChar", "DEL SimpleName: sb", "DEL NumberLiteral: 0", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: la", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleType: StringBuilder", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: ch", "DEL InfixExpression: ==", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL NumberLiteral: 1", "DEL InfixExpression: >", "DEL SimpleName: CssLexer", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: cp", "DEL VariableDeclarationFragment", "DEL SimpleName: pending", "DEL BooleanLiteral: true", "DEL PrimitiveType: int", "DEL SimpleName: read", "DEL Block", "DEL SimpleName: start", "DEL CastExpression", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleType: StringBuilder", "DEL SimpleName: cp", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: isEmpty", "DEL SimpleName: consume", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL SimpleName: isHexChar", "DEL ForStatement", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleName: tail", "DEL AssertStatement", "DEL SimpleName: sb", "DEL SimpleName: chi", "DEL SimpleName: limit", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: sb", "DEL SimpleName: append", "DEL SimpleName: tail", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL Modifier: private", "DEL IfStatement", "DEL ForStatement", "DEL SimpleName: read", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL QualifiedName: MessageType.MALFORMED_STRING", "DEL SimpleName: chi", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: lookahead", "DEL CharacterLiteral: '\"'", "DEL InfixExpression: !=", "DEL Modifier: private", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL BooleanLiteral: false", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: parseNmChar", "DEL Block", "DEL SimpleName: toFilePosition", "DEL Assignment: =", "DEL SimpleName: cp", "DEL Assignment: =", "DEL QualifiedName: MessagePart.Factory", "DEL PrimitiveType: int", "DEL InfixExpression: >=", "DEL CastExpression", "DEL SimpleName: read", "DEL IfStatement", "DEL SimpleName: cp", "DEL PrimitiveType: char", "DEL SimpleName: CssLexer", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL QualifiedName: MessageType.UNTERMINATED_STRING_TOKEN", "DEL ParenthesizedExpression", "DEL SimpleName: chi", "DEL Block", "DEL WhileStatement", "DEL ExpressionStatement", "DEL SimpleName: getOffset", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: cp", "DEL InfixExpression: >=", "DEL CharacterLiteral: '/'", "DEL SimpleName: length", "DEL CharacterLiteral: '='", "DEL InfixExpression: ||", "DEL SimpleName: matchedTail", "DEL SimpleName: buffer", "DEL ExpressionStatement", "DEL Modifier: final", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: sb", "DEL SimpleName: chi", "DEL IfStatement", "DEL SimpleName: cp", "DEL SimpleName: sb", "DEL SwitchCase", "DEL InfixExpression: &&", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: ch", "DEL SimpleName: sb", "DEL Modifier: private", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '0'", "DEL InfixExpression: -", "DEL Block", "DEL Block", "DEL InfixExpression: >=", "DEL ClassInstanceCreation", "DEL SimpleName: buf", "DEL IfStatement", "DEL ReturnStatement", "DEL Block", "DEL VariableDeclarationExpression", "DEL QualifiedName: MessagePart.Factory", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL InfixExpression: <=", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: parseNum", "DEL MethodInvocation", "DEL SimpleName: read", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL ClassInstanceCreation", "DEL PrimitiveType: void", "DEL SimpleName: sb", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: la", "DEL SimpleName: parseEscape", "DEL Block", "DEL SimpleName: ch", "DEL SimpleName: getOffset", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: read", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL ExpressionStatement", "DEL SimpleName: ch", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL SimpleName: offset", "DEL CharacterLiteral: '.'", "DEL ClassInstanceCreation", "DEL SimpleName: ch2", "DEL Block", "DEL MethodInvocation", "DEL QualifiedName: MessageType.EXPECTED_TOKEN", "DEL SimpleName: parseInt", "DEL SimpleName: String", "DEL SimpleName: cp", "DEL SimpleName: read", "DEL VariableDeclarationExpression", "DEL ExpressionStatement", "DEL SimpleName: cp", "DEL ClassInstanceCreation", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL CharacterLiteral: '-'", "DEL SimpleName: cp", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL Assignment: =", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: cp", "DEL InfixExpression: ==", "DEL InfixExpression: &&", "DEL SimpleName: StringBuilder", "DEL SimpleName: parseNum", "DEL SimpleName: sb", "DEL SimpleName: parseEscapeBody", "DEL Block", "DEL SimpleName: cp", "DEL InfixExpression: >=", "DEL SimpleName: parseEscapeBody", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL CharacterLiteral: '9'", "DEL QualifiedName: MessageType.EXPECTED_TOKEN", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL IfStatement", "DEL SimpleName: consume", "DEL SimpleName: append", "DEL SimpleName: ch", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: chi", "DEL IfStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: char", "DEL CharacterLiteral: '\\n'", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: getSourceBreaks", "DEL CharacterLiteral: '\\n'", "DEL PrefixExpression: !", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL AssertStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ThrowStatement", "DEL Block", "DEL PrimitiveType: boolean", "DEL Modifier: private", "DEL VariableDeclarationExpression", "DEL Block", "DEL CastExpression", "DEL SimpleName: read", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL SimpleName: toFilePosition", "DEL SimpleName: parseIdent", "DEL SimpleName: lookahead", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: ')'", "DEL InfixExpression: !=", "DEL CharacterLiteral: '0'", "DEL SimpleName: epos", "DEL PrimitiveType: char", "DEL VariableDeclarationStatement", "DEL SimpleName: length", "DEL SimpleName: ch", "DEL CharacterLiteral: '\\r'", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL Block", "DEL PrimitiveType: char", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL ForStatement", "DEL SimpleName: read", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: toFilePosition", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: chi", "DEL SimpleName: limit", "DEL CharacterLiteral: '.'", "DEL MethodInvocation", "DEL CharacterLiteral: '9'", "DEL SimpleName: lookahead", "DEL Modifier: private", "DEL SimpleName: toFilePosition", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL StringLiteral: \"ch=\"", "DEL VariableDeclarationStatement", "DEL SimpleName: chi", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: consume", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: toFilePosition", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: getCurrentPosition", "DEL WhileStatement", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: breaks", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: sb", "DEL IfStatement", "DEL SimpleName: sb", "DEL ArrayType: char[]", "DEL SimpleName: read", "DEL PrimitiveType: char", "DEL SimpleName: StringBuilder", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL InfixExpression: ||", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: spos", "DEL SimpleName: breaks", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\n'", "DEL SimpleType: ParseException", "DEL SimpleName: epos", "DEL Block", "DEL SimpleName: getCharInFile", "DEL ExpressionStatement", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: chi", "DEL SimpleName: chi", "DEL Modifier: private", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: parseNmStart", "DEL Block", "DEL SimpleName: parseUri", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: isNum", "DEL IfStatement", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: parseInt", "DEL NumberLiteral: 1", "DEL SimpleName: parseNmStart", "DEL SimpleName: start", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL SimpleName: read", "DEL BreakStatement", "DEL ReturnStatement", "DEL SimpleName: breaks", "DEL ReturnStatement", "DEL SimpleName: chi", "DEL SimpleName: sb", "DEL ReturnStatement", "DEL QualifiedName: MessagePart.Factory", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: parseString", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL QualifiedName: CssTokenType.PUNCTUATION", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: valueOf", "DEL SimpleName: cp", "DEL SimpleName: chi", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL Modifier: static", "DEL SimpleName: chi", "DEL CastExpression", "DEL SimpleName: read", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL PrimitiveType: char", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: sb", "DEL Block", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL PrimitiveType: char", "DEL SimpleName: parseNmChar", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL CharacterLiteral: '9'", "DEL BooleanLiteral: false", "DEL ArrayAccess", "DEL SimpleName: getOffset", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL ExpressionStatement", "DEL SimpleName: chi", "DEL SimpleName: chi", "DEL MethodInvocation", "DEL CharacterLiteral: '\\''", "DEL PrimitiveType: int", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: produce", "DEL SimpleName: StringBuilder", "DEL CharacterLiteral: '?'", "DEL SimpleName: append", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: valueOf", "DEL MethodDeclaration", "DEL CharacterLiteral: '*'", "DEL PrimitiveType: char", "DEL ExpressionStatement", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: cp", "DEL Block", "DEL PrimitiveType: int", "DEL CharacterLiteral: '\\\"'", "DEL SimpleName: ch", "DEL Block", "DEL Modifier: private", "DEL SimpleName: parseRange", "DEL SimpleName: CssSplitter", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: cp", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: isNum", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: ch", "DEL SimpleName: append", "DEL SimpleName: isEmpty", "DEL SimpleName: consume", "DEL ReturnStatement", "DEL SimpleName: type", "DEL SwitchCase", "DEL IfStatement", "DEL SimpleName: cp", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: cp", "DEL SimpleName: lookahead", "DEL Block", "DEL Block", "DEL SimpleName: chi", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL SimpleName: chi", "DEL SimpleName: cp", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: parseNmStart", "DEL SimpleType: StringBuilder", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL InfixExpression: ==", "DEL SimpleName: append", "DEL SimpleName: cp", "DEL SimpleName: commentPos", "DEL Block", "DEL SimpleName: parseWhitespace", "DEL CastExpression", "DEL SimpleName: sb", "DEL SimpleName: chi", "DEL VariableDeclarationFragment", "DEL InfixExpression: >=", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: Token", "DEL VariableDeclarationFragment", "DEL SimpleName: StringBuilder", "DEL SimpleName: chi", "DEL ClassInstanceCreation", "DEL SimpleName: spos", "DEL SimpleName: ch", "DEL IfStatement", "DEL ExpressionStatement", "DEL Modifier: private", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: ch", "DEL CastExpression", "DEL SimpleName: buffer", "DEL SimpleName: ch", "DEL Block", "DEL IfStatement", "DEL SimpleName: limit", "DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleName: cp", "DEL ParenthesizedExpression", "DEL SimpleName: sb", "DEL SimpleName: consume", "DEL Block", "DEL InfixExpression: ==", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: read", "DEL Dimension", "DEL SimpleName: chi", "DEL InfixExpression: ==", "DEL SimpleName: sb", "DEL ReturnStatement", "DEL SimpleName: cp", "DEL ExpressionStatement", "DEL SimpleName: read", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: ParseException", "DEL ExpressionStatement", "DEL SimpleName: lookahead", "DEL VariableDeclarationStatement", "DEL SimpleName: getCharInFile", "DEL SimpleName: chi", "DEL SimpleName: cp", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: isSpaceChar", "DEL MethodInvocation", "DEL CastExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: parseString", "DEL MethodInvocation", "DEL Block", "DEL PrimitiveType: void", "DEL ParenthesizedExpression", "DEL WhileStatement", "DEL SimpleName: append", "DEL SimpleName: read", "DEL SimpleName: cp", "DEL Block", "DEL SimpleName: parseWhitespace", "DEL SimpleName: cp", "DEL Assignment: =", "DEL SimpleName: parseEscape", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL Block", "DEL InfixExpression: ==", "DEL PrimitiveType: char", "DEL MethodInvocation", "DEL SimpleName: chi", "DEL ReturnStatement", "DEL SimpleName: cp", "DEL SimpleName: parseUri", "DEL IfStatement", "DEL SimpleName: spos", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: read", "DEL SimpleName: cp", "DEL SimpleName: parseEscapeOrNewline", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: lookahead", "DEL SimpleName: cp", "DEL SimpleName: epos", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL IfStatement", "DEL SimpleName: chi", "DEL SimpleName: StringBuilder", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: lookahead", "DEL Block", "DEL SimpleName: chi", "DEL SimpleName: chi", "DEL SimpleName: CssLexer", "DEL StringLiteral: \"^url\\\\($\"", "DEL SimpleName: cp", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL PrimitiveType: char", "DEL Block", "DEL CharacterLiteral: '+'", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: parseIdent", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL CharacterLiteral: '0'", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL PrimitiveType: char", "DEL SimpleName: SourceBreaks", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL SimpleName: cp", "DEL IfStatement", "DEL CharacterLiteral: '?'", "DEL SimpleName: read", "DEL SimpleName: charAt", "DEL PrimitiveType: char", "DEL InfixExpression: <=", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL QualifiedName: MessageType.UNRECOGNIZED_ESCAPE", "DEL InfixExpression: >=", "DEL IfStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: append", "DEL SimpleName: isRange", "DEL SimpleName: ch", "DEL SimpleType: StringBuilder", "DEL SimpleName: cp", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: cp", "DEL BooleanLiteral: false", "DEL SimpleName: StringBuilder", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: Message", "DEL SimpleName: read", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: append", "DEL SimpleName: parseName", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: ch", "DEL SimpleName: cp", "DEL CharacterLiteral: '\\r'", "DEL MethodInvocation", "DEL SimpleName: URL_RE", "DEL SimpleName: sb", "DEL SimpleName: read", "DEL SimpleName: getOffset", "DEL ForStatement", "DEL SimpleName: ParseException", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: sb", "DEL Assignment: =", "DEL SimpleName: getOffset", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: sb", "DEL ThrowStatement", "DEL SimpleName: ch", "DEL QualifiedName: Pattern.CASE_INSENSITIVE", "DEL BooleanLiteral: true", "DEL SimpleName: consume", "DEL SimpleName: chi", "DEL InfixExpression: <", "DEL IfStatement", "DEL SimpleName: chi", "DEL SimpleName: la", "DEL Assignment: =", "DEL CharacterLiteral: '%'", "DEL SimpleName: matcher", "DEL SimpleName: offset", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL MethodDeclaration", "DEL SimpleName: sb", "DEL SimpleName: valueOf", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: cp", "DEL VariableDeclarationStatement", "DEL SimpleName: cp", "DEL SimpleName: chi", "DEL SimpleName: sb", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL SimpleName: chi", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL CharacterLiteral: '-'", "DEL IfStatement", "DEL SimpleType: ParseException", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: chi", "DEL SimpleName: sb", "DEL PrimitiveType: int", "DEL SimpleName: chi", "DEL SimpleName: lookahead", "DEL SingleVariableDeclaration", "DEL SimpleName: sb", "DEL SimpleName: getOffset", "DEL SimpleName: getCharInFile", "DEL MethodInvocation", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: lookahead", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: ch", "DEL SimpleName: ch", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL PrimitiveType: void", "DEL Block", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: read", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL CharacterLiteral: '='", "DEL Block", "DEL SimpleName: StringBuilder", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: append", "DEL SimpleName: read", "DEL SimpleName: cp", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getCurrentPosition", "DEL BooleanLiteral: false", "DEL PrimitiveType: char", "DEL IfStatement", "DEL SimpleName: offset", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: epos", "DEL Block", "DEL WhileStatement", "DEL SwitchStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL Block", "DEL VariableDeclarationFragment", "DEL PrimitiveType: char", "DEL Block", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: Pattern", "DEL CharacterLiteral: '9'", "DEL SimpleType: StringBuilder", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: sb", "DEL CastExpression", "DEL Block", "DEL SimpleName: chi", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL ExpressionStatement", "DEL SimpleName: getOffset", "DEL SimpleName: lookahead", "DEL SimpleName: lookahead", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: cp", "DEL SimpleName: append", "DEL SimpleName: parseIdent", "DEL CharacterLiteral: '?'", "DEL SimpleName: StringBuilder", "DEL SimpleName: buffer", "DEL SimpleName: getCharInFile", "DEL NumberLiteral: 0", "DEL SimpleName: getCurrentPosition", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ThrowStatement", "DEL SimpleName: getCharInFile", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL QualifiedName: MessageType.MALFORMED_NUMBER", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL InfixExpression: >=", "DEL SimpleName: sb", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL CharacterLiteral: '('", "DEL SimpleName: cp", "DEL SimpleName: StringBuilder", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: length", "DEL SimpleName: length", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleType: StringBuilder", "DEL SimpleName: chi", "DEL MethodInvocation", "DEL SimpleName: getOffset", "DEL SimpleName: ch", "DEL SimpleName: append", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: parseOneStringChar", "DEL DoStatement", "DEL SimpleName: chi", "DEL SimpleName: sb", "DEL BooleanLiteral: false", "DEL CharacterLiteral: '\\''", "DEL SimpleName: spos", "DEL SimpleName: lookahead", "DEL Modifier: private", "DEL SimpleName: read", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: sb", "DEL SimpleName: cp", "DEL SimpleName: cp", "DEL SimpleName: append", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\r'", "DEL PrimitiveType: void", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: true", "DEL ParenthesizedExpression", "DEL PrimitiveType: boolean", "DEL SimpleName: epos", "DEL SimpleName: sb", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: append", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL IfStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SwitchStatement", "DEL IfStatement", "DEL CharacterLiteral: '-'", "DEL SingleVariableDeclaration", "DEL InfixExpression: >", "DEL SimpleName: sb", "DEL CharacterLiteral: '+'", "DEL MethodInvocation", "DEL SimpleName: isRange", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: chi", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: sb", "DEL SimpleName: tail", "DEL SimpleName: cp", "DEL SimpleName: getOffset", "DEL CharacterLiteral: '?'", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL IfStatement", "DEL BreakStatement", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: StringBuilder", "DEL SimpleName: length", "DEL SimpleName: cp", "DEL CharacterLiteral: '%'", "DEL SimpleName: sb", "DEL SimpleName: la", "DEL SimpleType: StringBuilder", "DEL SimpleName: chi", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL SimpleName: sb", "DEL SimpleName: result", "DEL CharacterLiteral: '\\r'", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: ch", "DEL SimpleName: lookahead", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\f'", "DEL ClassInstanceCreation", "DEL SimpleName: la", "DEL SimpleName: start", "DEL MethodInvocation", "DEL Modifier: private", "DEL Assignment: =", "DEL Block", "DEL SimpleName: la", "DEL SimpleName: consume", "DEL IfStatement", "DEL QualifiedName: MessagePart.Factory", "DEL ExpressionStatement", "DEL StringLiteral: \" : \"", "DEL SwitchCase", "DEL SimpleName: matchedTail", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: lookahead", "DEL MethodDeclaration", "DEL SimpleType: Pattern", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL SimpleName: getOffset", "DEL VariableDeclarationExpression", "DEL SimpleName: cp", "DEL DoStatement", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL SimpleName: ch", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL IfStatement", "DEL PrimitiveType: char", "DEL SimpleName: append", "DEL SimpleName: chi", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL SimpleName: read", "DEL CastExpression", "DEL SimpleName: sb", "DEL SimpleName: cp", "DEL ReturnStatement", "DEL InfixExpression: >=", "DEL Block", "DEL SimpleName: sb", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: lookahead", "DEL SimpleName: la", "DEL SingleVariableDeclaration", "DEL SimpleName: sb", "DEL InfixExpression: !=", "DEL SimpleName: lookahead", "DEL Assignment: =", "DEL SimpleName: sb", "DEL StringLiteral: \"<end-of-input>\"", "DEL IfStatement", "DEL SimpleName: chi", "DEL QualifiedName: MessagePart.Factory", "DEL SimpleName: spos", "DEL SimpleName: sb", "DEL SimpleName: lookahead", "DEL BreakStatement", "DEL SimpleName: read", "DEL Block", "DEL BreakStatement", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: parseEscapeBody", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: ch", "DEL SimpleName: lookahead", "DEL SimpleName: tail", "DEL ExpressionStatement", "DEL SimpleName: cp", "DEL InfixExpression: <", "DEL VariableDeclarationStatement", "DEL SimpleName: lookahead", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: URL_RE", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: parseEscapeOrNewline", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL CharacterLiteral: '0'", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: type", "DEL SimpleName: instance", "DEL SimpleName: toString", "DEL CastExpression", "DEL SimpleName: append", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: append", "DEL SimpleName: cp", "DEL Block", "DEL SimpleName: matchedTail", "DEL SimpleName: cp", "DEL SimpleName: sb", "DEL SimpleName: compile", "DEL InfixExpression: ||", "DEL PrimitiveType: char", "DEL SimpleName: isEmpty", "DEL SimpleName: cp", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: getSourceBreaks", "DEL IfStatement", "DEL SimpleName: ch", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL SimpleName: lookahead", "DEL SimpleName: sb", "DEL SimpleName: parseInt", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: sb", "DEL SimpleName: valueOf", "DEL SimpleName: StringBuilder", "DEL SimpleName: ch", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: getOffset", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL Block", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL SimpleName: lookahead", "DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleName: parseRange", "DEL SimpleName: sb", "DEL InfixExpression: &&", "DEL BooleanLiteral: true", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL SimpleName: cp", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL InfixExpression: <=", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: ParseException", "DEL ExpressionStatement", "DEL SimpleName: cp", "DEL SimpleName: buffer", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: breaks", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL BooleanLiteral: true", "DEL SimpleName: ch", "DEL SimpleName: cp", "DEL MethodInvocation", "DEL SimpleName: chi", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleType: Message", "DEL SimpleName: read", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleName: sb", "DEL SimpleName: cp", "DEL SimpleName: sb", "DEL CastExpression", "DEL ClassInstanceCreation", "DEL SimpleName: cp", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: read", "DEL SimpleName: ch2", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL PrimitiveType: char", "DEL SingleVariableDeclaration", "DEL PrimitiveType: char", "DEL Modifier: private", "DEL SimpleName: append", "DEL SimpleName: parseString", "DEL NumberLiteral: 1", "DEL SimpleName: read", "DEL SwitchCase", "DEL PrimitiveType: int", "DEL PrimitiveType: char", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL IfStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\\\'", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL SimpleName: tail", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: start"]}]}}, {"CssLexer_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(3113) at 6", "Insert TypeDeclaration: class(3112) into CompilationUnit(3113) at 11", "Insert QualifiedName: com.google.caja.util.Lists(12) into ImportDeclaration(13) at 0", "Insert Modifier: final(748) into TypeDeclaration: class(3112) at 0", "Insert SimpleName: CssSplitter(749) into TypeDeclaration: class(3112) at 1", "Move ParameterizedType: TokenStream<CssTokenType>(760) into TypeDeclaration: class(3112) at 2", "Move FieldDeclaration(767) into TypeDeclaration: class(3112) at 3", "Move FieldDeclaration(774) into TypeDeclaration: class(3112) at 4", "Move FieldDeclaration(779) into TypeDeclaration: class(3112) at 5", "Move FieldDeclaration(788) into TypeDeclaration: class(3112) at 6", "Move MethodDeclaration(833) into TypeDeclaration: class(3112) at 7", "Move MethodDeclaration(847) into TypeDeclaration: class(3112) at 8", "Move MethodDeclaration(885) into TypeDeclaration: class(3112) at 9", "Move MethodDeclaration(891) into TypeDeclaration: class(3112) at 10", "Move MethodDeclaration(905) into TypeDeclaration: class(3112) at 11", "Insert MethodDeclaration(1822) into TypeDeclaration: class(3112) at 12", "Insert MethodDeclaration(1931) into TypeDeclaration: class(3112) at 13", "Insert MethodDeclaration(2110) into TypeDeclaration: class(3112) at 14", "Insert MethodDeclaration(2180) into TypeDeclaration: class(3112) at 15", "Move MethodDeclaration(2265) into TypeDeclaration: class(3112) at 16", "Insert MethodDeclaration(2239) into TypeDeclaration: class(3112) at 17", "Insert MethodDeclaration(2272) into TypeDeclaration: class(3112) at 18", "Insert MethodDeclaration(2383) into TypeDeclaration: class(3112) at 19", "Insert MethodDeclaration(2469) into TypeDeclaration: class(3112) at 20", "Insert MethodDeclaration(2521) into TypeDeclaration: class(3112) at 21", "Insert MethodDeclaration(2573) into TypeDeclaration: class(3112) at 22", "Insert MethodDeclaration(2632) into TypeDeclaration: class(3112) at 23", "Insert MethodDeclaration(2699) into TypeDeclaration: class(3112) at 24", "Insert MethodDeclaration(2876) into TypeDeclaration: class(3112) at 25", "Insert MethodDeclaration(3062) into TypeDeclaration: class(3112) at 26", "Move MethodDeclaration(3164) into TypeDeclaration: class(3112) at 27", "Insert MethodDeclaration(3111) into TypeDeclaration: class(3112) at 28", "Insert Modifier: private(900) into MethodDeclaration(1822) at 0", "Insert PrimitiveType: void(901) into MethodDeclaration(1822) at 1", "Insert SimpleName: produce(902) into MethodDeclaration(1822) at 2", "Move SimpleType: ParseException(930) into MethodDeclaration(1822) at 3", "Insert Block(1821) into MethodDeclaration(1822) at 4", "Insert Modifier: private(1823) into MethodDeclaration(1931) at 0", "Insert Modifier: static(1824) into MethodDeclaration(1931) at 1", "Insert PrimitiveType: int(1825) into MethodDeclaration(1931) at 2", "Insert SingleVariableDeclaration(1830) into MethodDeclaration(1931) at 4", "Insert SingleVariableDeclaration(1833) into MethodDeclaration(1931) at 5", "Insert SingleVariableDeclaration(1837) into MethodDeclaration(1931) at 6", "Insert Block(1930) into MethodDeclaration(1931) at 7", "Insert Modifier: private(1932) into MethodDeclaration(2110) at 0", "Insert Modifier: static(1933) into MethodDeclaration(2110) at 1", "Insert PrimitiveType: int(1934) into MethodDeclaration(2110) at 2", "Insert SimpleName: parseString(1935) into MethodDeclaration(2110) at 3", "Insert SingleVariableDeclaration(1939) into MethodDeclaration(2110) at 4", "Insert SingleVariableDeclaration(1942) into MethodDeclaration(2110) at 5", "Move SimpleType: ParseException(1942) into MethodDeclaration(2110) at 6", "Insert Block(2109) into MethodDeclaration(2110) at 7", "Insert Modifier: private(2111) into MethodDeclaration(2180) at 0", "Insert PrimitiveType: int(2112) into MethodDeclaration(2180) at 1", "Insert SimpleName: parseUri(2113) into MethodDeclaration(2180) at 2", "Insert SingleVariableDeclaration(2117) into MethodDeclaration(2180) at 3", "Insert SingleVariableDeclaration(2120) into MethodDeclaration(2180) at 4", "Move SimpleType: ParseException(2119) into MethodDeclaration(2180) at 5", "Insert Block(2179) into MethodDeclaration(2180) at 6", "Insert Modifier: static(2182) into MethodDeclaration(2217) at 1", "Insert Modifier: private(2218) into MethodDeclaration(2239) at 0", "Insert Modifier: static(2219) into MethodDeclaration(2239) at 1", "Insert PrimitiveType: boolean(2220) into MethodDeclaration(2239) at 2", "Insert SimpleName: isLineBreak(2221) into MethodDeclaration(2239) at 3", "Insert SingleVariableDeclaration(2224) into MethodDeclaration(2239) at 4", "Insert Block(2238) into MethodDeclaration(2239) at 5", "Insert Modifier: private(2240) into MethodDeclaration(2272) at 0", "Insert PrimitiveType: int(2241) into MethodDeclaration(2272) at 1", "Insert SimpleName: parseWhitespace(2242) into MethodDeclaration(2272) at 2", "Insert SingleVariableDeclaration(2247) into MethodDeclaration(2272) at 3", "Insert SingleVariableDeclaration(2250) into MethodDeclaration(2272) at 4", "Insert SingleVariableDeclaration(2253) into MethodDeclaration(2272) at 5", "Insert Block(2271) into MethodDeclaration(2272) at 6", "Move Javadoc(2337) into MethodDeclaration(2383) at 0", "Insert Modifier: private(2277) into MethodDeclaration(2383) at 1", "Insert Modifier: static(2278) into MethodDeclaration(2383) at 2", "Insert PrimitiveType: int(2279) into MethodDeclaration(2383) at 3", "Insert SimpleName: parseNum(2280) into MethodDeclaration(2383) at 4", "Insert SingleVariableDeclaration(2284) into MethodDeclaration(2383) at 5", "Insert SingleVariableDeclaration(2287) into MethodDeclaration(2383) at 6", "Move SimpleType: ParseException(2346) into MethodDeclaration(2383) at 7", "Insert Block(2382) into MethodDeclaration(2383) at 8", "Insert Modifier: private(2384) into MethodDeclaration(2469) at 0", "Insert Modifier: static(2385) into MethodDeclaration(2469) at 1", "Insert PrimitiveType: int(2386) into MethodDeclaration(2469) at 2", "Insert SimpleName: parseInt(2387) into MethodDeclaration(2469) at 3", "Insert SingleVariableDeclaration(2391) into MethodDeclaration(2469) at 4", "Insert SingleVariableDeclaration(2394) into MethodDeclaration(2469) at 5", "Insert Block(2468) into MethodDeclaration(2469) at 6", "Insert Modifier: private(2470) into MethodDeclaration(2521) at 0", "Insert Modifier: static(2471) into MethodDeclaration(2521) at 1", "Insert PrimitiveType: int(2472) into MethodDeclaration(2521) at 2", "Insert SimpleName: parseIdent(2473) into MethodDeclaration(2521) at 3", "Insert SingleVariableDeclaration(2477) into MethodDeclaration(2521) at 4", "Insert SingleVariableDeclaration(2480) into MethodDeclaration(2521) at 5", "Move SimpleType: ParseException(2474) into MethodDeclaration(2521) at 6", "Insert Block(2520) into MethodDeclaration(2521) at 7", "Insert Modifier: private(2522) into MethodDeclaration(2573) at 0", "Insert Modifier: static(2523) into MethodDeclaration(2573) at 1", "Insert PrimitiveType: int(2524) into MethodDeclaration(2573) at 2", "Insert SimpleName: parseName(2525) into MethodDeclaration(2573) at 3", "Insert SingleVariableDeclaration(2529) into MethodDeclaration(2573) at 4", "Insert SingleVariableDeclaration(2532) into MethodDeclaration(2573) at 5", "Move SimpleType: ParseException(2499) into MethodDeclaration(2573) at 6", "Insert Block(2572) into MethodDeclaration(2573) at 7", "Insert Modifier: private(2574) into MethodDeclaration(2632) at 0", "Insert Modifier: static(2575) into MethodDeclaration(2632) at 1", "Insert PrimitiveType: int(2576) into MethodDeclaration(2632) at 2", "Insert SimpleName: parseNmStart(2577) into MethodDeclaration(2632) at 3", "Insert SingleVariableDeclaration(2581) into MethodDeclaration(2632) at 4", "Insert SingleVariableDeclaration(2584) into MethodDeclaration(2632) at 5", "Move SimpleType: ParseException(2524) into MethodDeclaration(2632) at 6", "Insert Block(2631) into MethodDeclaration(2632) at 7", "Insert Modifier: private(2633) into MethodDeclaration(2699) at 0", "Insert Modifier: static(2634) into MethodDeclaration(2699) at 1", "Insert PrimitiveType: int(2635) into MethodDeclaration(2699) at 2", "Insert SimpleName: parseNmChar(2636) into MethodDeclaration(2699) at 3", "Insert SingleVariableDeclaration(2640) into MethodDeclaration(2699) at 4", "Insert SingleVariableDeclaration(2643) into MethodDeclaration(2699) at 5", "Move SimpleType: ParseException(2627) into MethodDeclaration(2699) at 6", "Insert Block(2698) into MethodDeclaration(2699) at 7", "Insert Modifier: private(2700) into MethodDeclaration(2876) at 0", "Insert Modifier: static(2701) into MethodDeclaration(2876) at 1", "Insert PrimitiveType: int(2702) into MethodDeclaration(2876) at 2", "Insert SimpleName: parseEscapeBody(2703) into MethodDeclaration(2876) at 3", "Insert SingleVariableDeclaration(2707) into MethodDeclaration(2876) at 4", "Insert SingleVariableDeclaration(2710) into MethodDeclaration(2876) at 5", "Move SimpleType: ParseException(2723) into MethodDeclaration(2876) at 6", "Insert Block(2875) into MethodDeclaration(2876) at 7", "Insert Modifier: private(2877) into MethodDeclaration(3062) at 0", "Insert Modifier: static(2878) into MethodDeclaration(3062) at 1", "Insert PrimitiveType: int(2879) into MethodDeclaration(3062) at 2", "Insert SimpleName: parseRange(2880) into MethodDeclaration(3062) at 3", "Insert SingleVariableDeclaration(2884) into MethodDeclaration(3062) at 4", "Insert SingleVariableDeclaration(2887) into MethodDeclaration(3062) at 5", "Move SimpleType: ParseException(2963) into MethodDeclaration(3062) at 6", "Insert Block(3061) into MethodDeclaration(3062) at 7", "Insert Modifier: private(3080) into MethodDeclaration(3111) at 0", "Insert Modifier: static(3081) into MethodDeclaration(3111) at 1", "Insert SimpleType: MessagePart(3083) into MethodDeclaration(3111) at 2", "Insert SimpleName: toMessagePart(3084) into MethodDeclaration(3111) at 3", "Insert SingleVariableDeclaration(3088) into MethodDeclaration(3111) at 4", "Insert SingleVariableDeclaration(3091) into MethodDeclaration(3111) at 5", "Insert Block(3110) into MethodDeclaration(3111) at 6", "Insert MethodInvocation(62) into VariableDeclarationFragment(63) at 1", "Move IfStatement(936) into Block(1821) at 0", "Move IfStatement(942) into Block(1821) at 1", "Insert VariableDeclarationStatement(925) into Block(1821) at 2", "Move VariableDeclarationStatement(1956) into Block(1821) at 3", "Insert VariableDeclarationStatement(940) into Block(1821) at 4", "Insert VariableDeclarationStatement(947) into Block(1821) at 5", "Move VariableDeclarationStatement(989) into Block(1821) at 6", "Insert VariableDeclarationStatement(959) into Block(1821) at 7", "Insert VariableDeclarationStatement(963) into Block(1821) at 8", "Insert IfStatement(1794) into Block(1821) at 9", "Insert AssertStatement(1798) into Block(1821) at 10", "Insert ExpressionStatement(1815) into Block(1821) at 11", "Move ExpressionStatement(2331) into Block(1821) at 12", "Insert SimpleType: CharProducer(1828) into SingleVariableDeclaration(1830) at 0", "Insert SimpleName: cp(1829) into SingleVariableDeclaration(1830) at 1", "Insert PrimitiveType: int(1831) into SingleVariableDeclaration(1833) at 0", "Insert SimpleName: start(1832) into SingleVariableDeclaration(1833) at 1", "Move SimpleType: String(1340) into SingleVariableDeclaration(1837) at 0", "Insert SimpleName: match(1836) into SingleVariableDeclaration(1837) at 1", "Insert VariableDeclarationStatement(1844) into Block(1930) at 0", "Insert VariableDeclarationStatement(1851) into Block(1930) at 1", "Insert IfStatement(1861) into Block(1930) at 2", "Insert VariableDeclarationStatement(1870) into Block(1930) at 3", "Insert ForStatement(1925) into Block(1930) at 4", "Insert ReturnStatement(1929) into Block(1930) at 5", "Insert SimpleType: CharProducer(1937) into SingleVariableDeclaration(1939) at 0", "Insert SimpleName: cp(1938) into SingleVariableDeclaration(1939) at 1", "Insert PrimitiveType: int(1940) into SingleVariableDeclaration(1942) at 0", "Insert SimpleName: start(1941) into SingleVariableDeclaration(1942) at 1", "Move VariableDeclarationStatement(1963) into Block(2109) at 0", "Insert IfStatement(1959) into Block(2109) at 1", "Insert VariableDeclarationStatement(1968) into Block(2109) at 2", "Insert VariableDeclarationStatement(1975) into Block(2109) at 3", "Move IfStatement(1990) into Block(2109) at 4", "Move VariableDeclarationStatement(1995) into Block(2109) at 5", "Insert VariableDeclarationStatement(1999) into Block(2109) at 6", "Insert WhileStatement(2095) into Block(2109) at 7", "Insert ThrowStatement(2108) into Block(2109) at 8", "Insert SimpleType: CharProducer(2115) into SingleVariableDeclaration(2117) at 0", "Insert SimpleName: cp(2116) into SingleVariableDeclaration(2117) at 1", "Insert PrimitiveType: int(2118) into SingleVariableDeclaration(2120) at 0", "Insert SimpleName: start(2119) into SingleVariableDeclaration(2120) at 1", "Move VariableDeclarationStatement(2281) into Block(2179) at 0", "Insert VariableDeclarationStatement(2138) into Block(2179) at 1", "Move VariableDeclarationStatement(2293) into Block(2179) at 2", "Insert WhileStatement(2176) into Block(2179) at 3", "Insert ReturnStatement(2178) into Block(2179) at 4", "Insert PrimitiveType: char(2222) into SingleVariableDeclaration(2224) at 0", "Insert SimpleName: ch(2223) into SingleVariableDeclaration(2224) at 1", "Insert SwitchStatement(2237) into Block(2238) at 0", "Move ArrayType: char[](1966) into SingleVariableDeclaration(2247) at 0", "Insert SimpleName: buf(2246) into SingleVariableDeclaration(2247) at 1", "Insert PrimitiveType: int(2248) into SingleVariableDeclaration(2250) at 0", "Insert SimpleName: end(2249) into SingleVariableDeclaration(2250) at 1", "Insert PrimitiveType: int(2251) into SingleVariableDeclaration(2253) at 0", "Insert SimpleName: limit(2252) into SingleVariableDeclaration(2253) at 1", "Insert WhileStatement(2268) into Block(2271) at 0", "Insert ReturnStatement(2270) into Block(2271) at 1", "Insert SimpleType: CharProducer(2282) into SingleVariableDeclaration(2284) at 0", "Insert SimpleName: cp(2283) into SingleVariableDeclaration(2284) at 1", "Insert PrimitiveType: int(2285) into SingleVariableDeclaration(2287) at 0", "Insert SimpleName: start(2286) into SingleVariableDeclaration(2287) at 1", "Insert VariableDeclarationStatement(2297) into Block(2382) at 0", "Insert AssertStatement(2301) into Block(2382) at 1", "Insert VariableDeclarationStatement(2308) into Block(2382) at 2", "Insert VariableDeclarationStatement(2317) into Block(2382) at 3", "Insert IfStatement(2379) into Block(2382) at 4", "Insert ReturnStatement(2381) into Block(2382) at 5", "Insert SimpleType: CharProducer(2389) into SingleVariableDeclaration(2391) at 0", "Insert SimpleName: cp(2390) into SingleVariableDeclaration(2391) at 1", "Insert PrimitiveType: int(2392) into SingleVariableDeclaration(2394) at 0", "Insert SimpleName: start(2393) into SingleVariableDeclaration(2394) at 1", "Insert VariableDeclarationStatement(2401) into Block(2468) at 0", "Insert IfStatement(2409) into Block(2468) at 1", "Insert VariableDeclarationStatement(2418) into Block(2468) at 2", "Insert VariableDeclarationStatement(2425) into Block(2468) at 3", "Insert IfStatement(2467) into Block(2468) at 4", "Insert SimpleType: CharProducer(2475) into SingleVariableDeclaration(2477) at 0", "Insert SimpleName: cp(2476) into SingleVariableDeclaration(2477) at 1", "Insert PrimitiveType: int(2478) into SingleVariableDeclaration(2480) at 0", "Insert SimpleName: start(2479) into SingleVariableDeclaration(2480) at 1", "Insert VariableDeclarationStatement(2490) into Block(2520) at 0", "Insert IfStatement(2498) into Block(2520) at 1", "Insert ForStatement(2517) into Block(2520) at 2", "Insert ReturnStatement(2519) into Block(2520) at 3", "Insert SimpleType: CharProducer(2527) into SingleVariableDeclaration(2529) at 0", "Insert SimpleName: cp(2528) into SingleVariableDeclaration(2529) at 1", "Insert PrimitiveType: int(2530) into SingleVariableDeclaration(2532) at 0", "Insert SimpleName: start(2531) into SingleVariableDeclaration(2532) at 1", "Insert VariableDeclarationStatement(2542) into Block(2572) at 0", "Insert IfStatement(2550) into Block(2572) at 1", "Insert ForStatement(2569) into Block(2572) at 2", "Insert ReturnStatement(2571) into Block(2572) at 3", "Insert SimpleType: CharProducer(2579) into SingleVariableDeclaration(2581) at 0", "Insert SimpleName: cp(2580) into SingleVariableDeclaration(2581) at 1", "Insert PrimitiveType: int(2582) into SingleVariableDeclaration(2584) at 0", "Insert SimpleName: start(2583) into SingleVariableDeclaration(2584) at 1", "Insert IfStatement(2596) into Block(2631) at 0", "Insert VariableDeclarationStatement(2605) into Block(2631) at 1", "Insert IfStatement(2615) into Block(2631) at 2", "Insert IfStatement(2627) into Block(2631) at 3", "Insert ReturnStatement(2630) into Block(2631) at 4", "Insert SimpleType: CharProducer(2638) into SingleVariableDeclaration(2640) at 0", "Insert SimpleName: cp(2639) into SingleVariableDeclaration(2640) at 1", "Insert PrimitiveType: int(2641) into SingleVariableDeclaration(2643) at 0", "Insert SimpleName: start(2642) into SingleVariableDeclaration(2643) at 1", "Insert VariableDeclarationStatement(2653) into Block(2698) at 0", "Insert IfStatement(2660) into Block(2698) at 1", "Insert IfStatement(2694) into Block(2698) at 2", "Insert ReturnStatement(2697) into Block(2698) at 3", "Insert SimpleType: CharProducer(2705) into SingleVariableDeclaration(2707) at 0", "Insert SimpleName: cp(2706) into SingleVariableDeclaration(2707) at 1", "Insert PrimitiveType: int(2708) into SingleVariableDeclaration(2710) at 0", "Insert SimpleName: start(2709) into SingleVariableDeclaration(2710) at 1", "Insert VariableDeclarationStatement(2719) into Block(2875) at 0", "Insert VariableDeclarationStatement(2728) into Block(2875) at 1", "Move IfStatement(2754) into Block(2875) at 2", "Insert VariableDeclarationStatement(2761) into Block(2875) at 3", "Insert IfStatement(2874) into Block(2875) at 4", "Insert SimpleType: CharProducer(2882) into SingleVariableDeclaration(2884) at 0", "Insert SimpleName: cp(2883) into SingleVariableDeclaration(2884) at 1", "Insert PrimitiveType: int(2885) into SingleVariableDeclaration(2887) at 0", "Insert SimpleName: start(2886) into SingleVariableDeclaration(2887) at 1", "Insert VariableDeclarationStatement(2898) into Block(3061) at 0", "Insert VariableDeclarationStatement(2905) into Block(3061) at 1", "Insert VariableDeclarationStatement(2910) into Block(3061) at 2", "Move VariableDeclarationStatement(2972) into Block(3061) at 3", "Insert VariableDeclarationStatement(2928) into Block(3061) at 4", "Insert IfStatement(2950) into Block(3061) at 5", "Insert WhileStatement(2970) into Block(3061) at 6", "Insert IfStatement(3052) into Block(3061) at 7", "Insert ReturnStatement(3060) into Block(3061) at 8", "Insert SimpleName: MessagePart(3082) into SimpleType: MessagePart(3083) at 0", "Insert SimpleType: CharProducer(3086) into SingleVariableDeclaration(3088) at 0", "Insert SimpleName: cp(3087) into SingleVariableDeclaration(3088) at 1", "Insert PrimitiveType: int(3089) into SingleVariableDeclaration(3091) at 0", "Insert SimpleName: offset(3090) into SingleVariableDeclaration(3091) at 1", "Insert ReturnStatement(3109) into Block(3110) at 0", "Insert SimpleName: Lists(60) into MethodInvocation(62) at 0", "Insert SimpleName: newLinkedList(61) into MethodInvocation(62) at 1", "Insert ArrayType: char[](919) into VariableDeclarationStatement(925) at 0", "Insert VariableDeclarationFragment(924) into VariableDeclarationStatement(925) at 1", "Insert Modifier: final(926) into VariableDeclarationStatement(933) at 0", "Insert PrimitiveType: int(934) into VariableDeclarationStatement(940) at 0", "Insert VariableDeclarationFragment(939) into VariableDeclarationStatement(940) at 1", "Insert PrimitiveType: int(941) into VariableDeclarationStatement(947) at 0", "Insert VariableDeclarationFragment(946) into VariableDeclarationStatement(947) at 1", "Insert PrimitiveType: char(953) into VariableDeclarationStatement(959) at 0", "Insert VariableDeclarationFragment(958) into VariableDeclarationStatement(959) at 1", "Insert PrimitiveType: int(960) into VariableDeclarationStatement(963) at 0", "Insert VariableDeclarationFragment(962) into VariableDeclarationStatement(963) at 1", "Move MethodInvocation(993) into IfStatement(1794) at 0", "Insert Block(980) into IfStatement(1794) at 1", "Insert IfStatement(1793) into IfStatement(1794) at 2", "Insert InfixExpression: >(1797) into AssertStatement(1798) at 0", "Insert Assignment: =(1814) into ExpressionStatement(1815) at 0", "Insert SimpleName: CharProducer(1827) into SimpleType: CharProducer(1828) at 0", "Insert PrimitiveType: int(1838) into VariableDeclarationStatement(1844) at 0", "Insert VariableDeclarationFragment(1843) into VariableDeclarationStatement(1844) at 1", "Insert PrimitiveType: int(1845) into VariableDeclarationStatement(1851) at 0", "Insert VariableDeclarationFragment(1850) into VariableDeclarationStatement(1851) at 1", "Insert InfixExpression: <(1856) into IfStatement(1861) at 0", "Insert Block(1860) into IfStatement(1861) at 1", "Insert ArrayType: char[](1864) into VariableDeclarationStatement(1870) at 0", "Insert VariableDeclarationFragment(1869) into VariableDeclarationStatement(1870) at 1", "Insert VariableDeclarationExpression(1875) into ForStatement(1925) at 0", "Move InfixExpression: <(1400) into ForStatement(1925) at 1", "Move PrefixExpression: ++(1402) into ForStatement(1925) at 2", "Insert Block(1924) into ForStatement(1925) at 3", "Insert InfixExpression: +(1928) into ReturnStatement(1929) at 0", "Insert SimpleName: CharProducer(1936) into SimpleType: CharProducer(1937) at 0", "Insert InfixExpression: ==(1954) into IfStatement(1959) at 0", "Insert Block(1958) into IfStatement(1959) at 1", "Insert ArrayType: char[](1962) into VariableDeclarationStatement(1968) at 0", "Insert VariableDeclarationFragment(1967) into VariableDeclarationStatement(1968) at 1", "Insert PrimitiveType: char(1969) into VariableDeclarationStatement(1975) at 0", "Insert VariableDeclarationFragment(1974) into VariableDeclarationStatement(1975) at 1", "Insert PrimitiveType: int(1993) into VariableDeclarationStatement(1999) at 0", "Insert VariableDeclarationFragment(1998) into VariableDeclarationStatement(1999) at 1", "Insert InfixExpression: <(2002) into WhileStatement(2095) at 0", "Insert Block(2094) into WhileStatement(2095) at 1", "Insert ClassInstanceCreation(2107) into ThrowStatement(2108) at 0", "Insert SimpleName: CharProducer(2114) into SimpleType: CharProducer(2115) at 0", "Insert PrimitiveType: int(2132) into VariableDeclarationStatement(2138) at 0", "Insert VariableDeclarationFragment(2137) into VariableDeclarationStatement(2138) at 1", "Insert InfixExpression: <(2146) into WhileStatement(2176) at 0", "Insert Block(2175) into WhileStatement(2176) at 1", "Insert SimpleName: end(2177) into ReturnStatement(2178) at 0", "Insert SimpleName: ch(2225) into SwitchStatement(2237) at 0", "Move SwitchCase(2149) into SwitchStatement(2237) at 1", "Move SwitchCase(2661) into SwitchStatement(2237) at 2", "Move SwitchCase(2151) into SwitchStatement(2237) at 3", "Move ReturnStatement(2175) into SwitchStatement(2237) at 4", "Insert SwitchCase(2234) into SwitchStatement(2237) at 5", "Move ReturnStatement(2157) into SwitchStatement(2237) at 6", "Insert InfixExpression: &&(2263) into WhileStatement(2268) at 0", "Insert Block(2267) into WhileStatement(2268) at 1", "Insert SimpleName: end(2269) into ReturnStatement(2270) at 0", "Insert SimpleName: CharProducer(2281) into SimpleType: CharProducer(2282) at 0", "Insert PrimitiveType: int(2290) into VariableDeclarationStatement(2297) at 0", "Insert VariableDeclarationFragment(2296) into VariableDeclarationStatement(2297) at 1", "Insert InfixExpression: >=(2300) into AssertStatement(2301) at 0", "Insert PrimitiveType: int(2302) into VariableDeclarationStatement(2308) at 0", "Insert VariableDeclarationFragment(2307) into VariableDeclarationStatement(2308) at 1", "Insert ArrayType: char[](2311) into VariableDeclarationStatement(2317) at 0", "Insert VariableDeclarationFragment(2316) into VariableDeclarationStatement(2317) at 1", "Insert InfixExpression: &&(2326) into IfStatement(2379) at 0", "Insert Block(2378) into IfStatement(2379) at 1", "Insert SimpleName: end(2380) into ReturnStatement(2381) at 0", "Insert SimpleName: CharProducer(2388) into SimpleType: CharProducer(2389) at 0", "Insert PrimitiveType: int(2395) into VariableDeclarationStatement(2401) at 0", "Insert VariableDeclarationFragment(2400) into VariableDeclarationStatement(2401) at 1", "Insert InfixExpression: ==(2404) into IfStatement(2409) at 0", "Insert Block(2408) into IfStatement(2409) at 1", "Insert ArrayType: char[](2412) into VariableDeclarationStatement(2418) at 0", "Insert VariableDeclarationFragment(2417) into VariableDeclarationStatement(2418) at 1", "Insert PrimitiveType: char(2419) into VariableDeclarationStatement(2425) at 0", "Insert VariableDeclarationFragment(2424) into VariableDeclarationStatement(2425) at 1", "Insert InfixExpression: &&(2432) into IfStatement(2467) at 0", "Insert Block(2462) into IfStatement(2467) at 1", "Insert Block(2466) into IfStatement(2467) at 2", "Insert SimpleName: CharProducer(2474) into SimpleType: CharProducer(2475) at 0", "Insert PrimitiveType: int(2483) into VariableDeclarationStatement(2490) at 0", "Insert VariableDeclarationFragment(2489) into VariableDeclarationStatement(2490) at 1", "Insert InfixExpression: <(2493) into IfStatement(2498) at 0", "Insert Block(2497) into IfStatement(2498) at 1", "Insert VariableDeclarationExpression(2502) into ForStatement(2517) at 0", "Insert InfixExpression: >=(2511) into ForStatement(2517) at 1", "Insert Block(2516) into ForStatement(2517) at 2", "Insert SimpleName: end(2518) into ReturnStatement(2519) at 0", "Insert SimpleName: CharProducer(2526) into SimpleType: CharProducer(2527) at 0", "Insert PrimitiveType: int(2535) into VariableDeclarationStatement(2542) at 0", "Insert VariableDeclarationFragment(2541) into VariableDeclarationStatement(2542) at 1", "Insert InfixExpression: <(2545) into IfStatement(2550) at 0", "Insert Block(2549) into IfStatement(2550) at 1", "Insert VariableDeclarationExpression(2554) into ForStatement(2569) at 0", "Insert InfixExpression: >=(2563) into ForStatement(2569) at 1", "Insert Block(2568) into ForStatement(2569) at 2", "Insert SimpleName: end(2570) into ReturnStatement(2571) at 0", "Insert SimpleName: CharProducer(2578) into SimpleType: CharProducer(2579) at 0", "Insert InfixExpression: ==(2591) into IfStatement(2596) at 0", "Insert Block(2595) into IfStatement(2596) at 1", "Insert PrimitiveType: char(2597) into VariableDeclarationStatement(2605) at 0", "Insert VariableDeclarationFragment(2604) into VariableDeclarationStatement(2605) at 1", "Move MethodInvocation(2546) into IfStatement(2615) at 0", "Insert Block(2614) into IfStatement(2615) at 1", "Insert InfixExpression: ==(2618) into IfStatement(2627) at 0", "Insert Block(2626) into IfStatement(2627) at 1", "Insert PrefixExpression: -(2629) into ReturnStatement(2630) at 0", "Insert SimpleName: CharProducer(2637) into SimpleType: CharProducer(2638) at 0", "Insert PrimitiveType: int(2646) into VariableDeclarationStatement(2653) at 0", "Insert VariableDeclarationFragment(2652) into VariableDeclarationStatement(2653) at 1", "Insert InfixExpression: >=(2656) into IfStatement(2660) at 0", "Insert Block(2659) into IfStatement(2660) at 1", "Insert InfixExpression: !=(2665) into IfStatement(2694) at 0", "Insert Block(2693) into IfStatement(2694) at 1", "Insert PrefixExpression: -(2696) into ReturnStatement(2697) at 0", "Insert SimpleName: CharProducer(2704) into SimpleType: CharProducer(2705) at 0", "Insert PrimitiveType: int(2713) into VariableDeclarationStatement(2719) at 0", "Insert VariableDeclarationFragment(2718) into VariableDeclarationStatement(2719) at 1", "Insert ArrayType: char[](2722) into VariableDeclarationStatement(2728) at 0", "Insert VariableDeclarationFragment(2727) into VariableDeclarationStatement(2728) at 1", "Insert InfixExpression: ==(2731) into IfStatement(2754) at 0", "Insert PrimitiveType: char(2755) into VariableDeclarationStatement(2761) at 0", "Insert VariableDeclarationFragment(2760) into VariableDeclarationStatement(2761) at 1", "Move MethodInvocation(2765) into IfStatement(2874) at 0", "Insert Block(2843) into IfStatement(2874) at 1", "Insert IfStatement(2873) into IfStatement(2874) at 2", "Insert SimpleName: CharProducer(2881) into SimpleType: CharProducer(2882) at 0", "Insert ArrayType: char[](2892) into VariableDeclarationStatement(2898) at 0", "Insert VariableDeclarationFragment(2897) into VariableDeclarationStatement(2898) at 1", "Insert PrimitiveType: int(2899) into VariableDeclarationStatement(2905) at 0", "Insert VariableDeclarationFragment(2904) into VariableDeclarationStatement(2905) at 1", "Insert PrimitiveType: int(2906) into VariableDeclarationStatement(2910) at 0", "Insert VariableDeclarationFragment(2909) into VariableDeclarationStatement(2910) at 1", "Insert PrimitiveType: boolean(2916) into VariableDeclarationStatement(2928) at 0", "Insert VariableDeclarationFragment(2927) into VariableDeclarationStatement(2928) at 1", "Insert SimpleName: isRange(2929) into IfStatement(2950) at 0", "Insert Block(2949) into IfStatement(2950) at 1", "Insert InfixExpression: &&(2965) into WhileStatement(2970) at 0", "Insert Block(2969) into WhileStatement(2970) at 1", "Move PrefixExpression: !(3040) into IfStatement(3052) at 0", "Insert Block(3051) into IfStatement(3052) at 1", "Insert ConditionalExpression(3059) into ReturnStatement(3060) at 0", "Insert SimpleName: CharProducer(3085) into SimpleType: CharProducer(3086) at 0", "Insert MethodInvocation(3108) into ReturnStatement(3109) at 0", "Insert PrimitiveType: char(917) into ArrayType: char[](919) at 0", "Insert Dimension(918) into ArrayType: char[](919) at 1", "Insert SimpleName: buf(920) into VariableDeclarationFragment(924) at 0", "Insert MethodInvocation(923) into VariableDeclarationFragment(924) at 1", "Insert SimpleName: limit(935) into VariableDeclarationFragment(939) at 0", "Insert MethodInvocation(938) into VariableDeclarationFragment(939) at 1", "Insert SimpleName: end(942) into VariableDeclarationFragment(946) at 0", "Insert InfixExpression: +(945) into VariableDeclarationFragment(946) at 1", "Insert SimpleName: ch(954) into VariableDeclarationFragment(958) at 0", "Insert ArrayAccess(957) into VariableDeclarationFragment(958) at 1", "Insert SimpleName: identEnd(961) into VariableDeclarationFragment(962) at 0", "Insert ExpressionStatement(975) into Block(980) at 0", "Move ExpressionStatement(1010) into Block(980) at 1", "Move InfixExpression: ==(1014) into IfStatement(1793) at 0", "Insert Block(1146) into IfStatement(1793) at 1", "Insert IfStatement(1792) into IfStatement(1793) at 2", "Insert SimpleName: end(1795) into InfixExpression: >(1797) at 0", "Insert SimpleName: start(1796) into InfixExpression: >(1797) at 1", "Insert SimpleName: pending(1799) into Assignment: =(1814) at 0", "Insert MethodInvocation(1813) into Assignment: =(1814) at 1", "Insert SimpleName: len(1839) into VariableDeclarationFragment(1843) at 0", "Insert MethodInvocation(1842) into VariableDeclarationFragment(1843) at 1", "Insert SimpleName: limit(1846) into VariableDeclarationFragment(1850) at 0", "Insert MethodInvocation(1849) into VariableDeclarationFragment(1850) at 1", "Insert InfixExpression: -(1854) into InfixExpression: <(1856) at 0", "Insert SimpleName: len(1855) into InfixExpression: <(1856) at 1", "Insert ReturnStatement(1859) into Block(1860) at 0", "Insert PrimitiveType: char(1862) into ArrayType: char[](1864) at 0", "Insert Dimension(1863) into ArrayType: char[](1864) at 1", "Insert SimpleName: buf(1865) into VariableDeclarationFragment(1869) at 0", "Insert MethodInvocation(1868) into VariableDeclarationFragment(1869) at 1", "Insert PrimitiveType: int(1871) into VariableDeclarationExpression(1875) at 0", "Move VariableDeclarationFragment(1391) into VariableDeclarationExpression(1875) at 1", "Insert VariableDeclarationStatement(1889) into Block(1924) at 0", "Insert VariableDeclarationStatement(1897) into Block(1924) at 1", "Insert IfStatement(1923) into Block(1924) at 2", "Insert SimpleName: start(1926) into InfixExpression: +(1928) at 0", "Insert SimpleName: len(1927) into InfixExpression: +(1928) at 1", "Insert SimpleName: start(1952) into InfixExpression: ==(1954) at 0", "Insert SimpleName: limit(1953) into InfixExpression: ==(1954) at 1", "Insert ReturnStatement(1957) into Block(1958) at 0", "Insert PrimitiveType: char(1960) into ArrayType: char[](1962) at 0", "Insert Dimension(1961) into ArrayType: char[](1962) at 1", "Insert SimpleName: buf(1963) into VariableDeclarationFragment(1967) at 0", "Insert MethodInvocation(1966) into VariableDeclarationFragment(1967) at 1", "Insert SimpleName: ch(1970) into VariableDeclarationFragment(1974) at 0", "Insert ArrayAccess(1973) into VariableDeclarationFragment(1974) at 1", "Insert SimpleName: end(1994) into VariableDeclarationFragment(1998) at 0", "Insert InfixExpression: +(1997) into VariableDeclarationFragment(1998) at 1", "Insert SimpleName: end(2000) into InfixExpression: <(2002) at 0", "Insert SimpleName: limit(2001) into InfixExpression: <(2002) at 1", "Insert ExpressionStatement(2008) into Block(2094) at 0", "Insert ExpressionStatement(2011) into Block(2094) at 1", "Insert IfStatement(2093) into Block(2094) at 2", "Move SimpleType: ParseException(2088) into ClassInstanceCreation(2107) at 0", "Insert ClassInstanceCreation(2106) into ClassInstanceCreation(2107) at 1", "Insert SimpleName: limit(2133) into VariableDeclarationFragment(2137) at 0", "Insert MethodInvocation(2136) into VariableDeclarationFragment(2137) at 1", "Insert SimpleName: end(2144) into InfixExpression: <(2146) at 0", "Insert SimpleName: limit(2145) into InfixExpression: <(2146) at 1", "Insert IfStatement(2174) into Block(2175) at 0", "Move InfixExpression: <(2303) into InfixExpression: &&(2263) at 0", "Move MethodInvocation(2311) into InfixExpression: &&(2263) at 1", "Insert ExpressionStatement(2266) into Block(2267) at 0", "Insert SimpleName: end(2291) into VariableDeclarationFragment(2296) at 0", "Insert MethodInvocation(2295) into VariableDeclarationFragment(2296) at 1", "Insert SimpleName: end(2298) into InfixExpression: >=(2300) at 0", "Insert NumberLiteral: 0(2299) into InfixExpression: >=(2300) at 1", "Insert SimpleName: limit(2303) into VariableDeclarationFragment(2307) at 0", "Insert MethodInvocation(2306) into VariableDeclarationFragment(2307) at 1", "Insert PrimitiveType: char(2309) into ArrayType: char[](2311) at 0", "Insert Dimension(2310) into ArrayType: char[](2311) at 1", "Insert SimpleName: buf(2312) into VariableDeclarationFragment(2316) at 0", "Insert MethodInvocation(2315) into VariableDeclarationFragment(2316) at 1", "Insert InfixExpression: <(2320) into InfixExpression: &&(2326) at 0", "Insert InfixExpression: ==(2325) into InfixExpression: &&(2326) at 1", "Insert ExpressionStatement(2329) into Block(2378) at 0", "Insert VariableDeclarationStatement(2333) into Block(2378) at 1", "Insert IfStatement(2372) into Block(2378) at 2", "Insert ReturnStatement(2377) into Block(2378) at 3", "Insert SimpleName: limit(2396) into VariableDeclarationFragment(2400) at 0", "Insert MethodInvocation(2399) into VariableDeclarationFragment(2400) at 1", "Insert SimpleName: start(2402) into InfixExpression: ==(2404) at 0", "Insert SimpleName: limit(2403) into InfixExpression: ==(2404) at 1", "Insert ReturnStatement(2407) into Block(2408) at 0", "Insert PrimitiveType: char(2410) into ArrayType: char[](2412) at 0", "Insert Dimension(2411) into ArrayType: char[](2412) at 1", "Insert SimpleName: buf(2413) into VariableDeclarationFragment(2417) at 0", "Insert MethodInvocation(2416) into VariableDeclarationFragment(2417) at 1", "Insert SimpleName: ch(2420) into VariableDeclarationFragment(2424) at 0", "Insert ArrayAccess(2423) into VariableDeclarationFragment(2424) at 1", "Insert InfixExpression: >=(2428) into InfixExpression: &&(2432) at 0", "Insert InfixExpression: <=(2431) into InfixExpression: &&(2432) at 1", "Insert VariableDeclarationStatement(2437) into Block(2462) at 0", "Insert DoStatement(2459) into Block(2462) at 1", "Insert ReturnStatement(2461) into Block(2462) at 2", "Insert ReturnStatement(2465) into Block(2466) at 0", "Insert SimpleName: end(2484) into VariableDeclarationFragment(2489) at 0", "Insert MethodInvocation(2488) into VariableDeclarationFragment(2489) at 1", "Insert SimpleName: end(2491) into InfixExpression: <(2493) at 0", "Insert NumberLiteral: 0(2492) into InfixExpression: <(2493) at 1", "Insert ReturnStatement(2496) into Block(2497) at 0", "Insert PrimitiveType: int(2499) into VariableDeclarationExpression(2502) at 0", "Insert VariableDeclarationFragment(2501) into VariableDeclarationExpression(2502) at 1", "Insert ParenthesizedExpression(2509) into InfixExpression: >=(2511) at 0", "Insert NumberLiteral: 0(2510) into InfixExpression: >=(2511) at 1", "Insert ExpressionStatement(2515) into Block(2516) at 0", "Insert SimpleName: end(2536) into VariableDeclarationFragment(2541) at 0", "Insert MethodInvocation(2540) into VariableDeclarationFragment(2541) at 1", "Insert SimpleName: end(2543) into InfixExpression: <(2545) at 0", "Insert NumberLiteral: 0(2544) into InfixExpression: <(2545) at 1", "Insert ReturnStatement(2548) into Block(2549) at 0", "Insert PrimitiveType: int(2551) into VariableDeclarationExpression(2554) at 0", "Insert VariableDeclarationFragment(2553) into VariableDeclarationExpression(2554) at 1", "Insert ParenthesizedExpression(2561) into InfixExpression: >=(2563) at 0", "Insert NumberLiteral: 0(2562) into InfixExpression: >=(2563) at 1", "Insert ExpressionStatement(2567) into Block(2568) at 0", "Insert SimpleName: start(2587) into InfixExpression: ==(2591) at 0", "Move MethodInvocation(2298) into InfixExpression: ==(2591) at 1", "Insert ReturnStatement(2594) into Block(2595) at 0", "Insert SimpleName: ch(2598) into VariableDeclarationFragment(2604) at 0", "Insert ArrayAccess(2603) into VariableDeclarationFragment(2604) at 1", "Insert ReturnStatement(2613) into Block(2614) at 0", "Insert SimpleName: ch(2616) into InfixExpression: ==(2618) at 0", "Insert CharacterLiteral: '\\\\'(2617) into InfixExpression: ==(2618) at 1", "Insert ReturnStatement(2625) into Block(2626) at 0", "Insert NumberLiteral: 1(2628) into PrefixExpression: -(2629) at 0", "Insert SimpleName: end(2647) into VariableDeclarationFragment(2652) at 0", "Insert MethodInvocation(2651) into VariableDeclarationFragment(2652) at 1", "Insert SimpleName: end(2654) into InfixExpression: >=(2656) at 0", "Insert NumberLiteral: 0(2655) into InfixExpression: >=(2656) at 1", "Insert ReturnStatement(2658) into Block(2659) at 0", "Insert SimpleName: start(2661) into InfixExpression: !=(2665) at 0", "Move MethodInvocation(1365) into InfixExpression: !=(2665) at 1", "Insert VariableDeclarationStatement(2674) into Block(2693) at 0", "Insert IfStatement(2692) into Block(2693) at 1", "Insert NumberLiteral: 1(2695) into PrefixExpression: -(2696) at 0", "Insert SimpleName: limit(2714) into VariableDeclarationFragment(2718) at 0", "Insert MethodInvocation(2717) into VariableDeclarationFragment(2718) at 1", "Insert PrimitiveType: char(2720) into ArrayType: char[](2722) at 0", "Insert Dimension(2721) into ArrayType: char[](2722) at 1", "Insert SimpleName: buf(2723) into VariableDeclarationFragment(2727) at 0", "Insert MethodInvocation(2726) into VariableDeclarationFragment(2727) at 1", "Insert SimpleName: start(2729) into InfixExpression: ==(2731) at 0", "Insert SimpleName: limit(2730) into InfixExpression: ==(2731) at 1", "Insert SimpleName: ch(2756) into VariableDeclarationFragment(2760) at 0", "Insert ArrayAccess(2759) into VariableDeclarationFragment(2760) at 1", "Insert VariableDeclarationStatement(2772) into Block(2843) at 0", "Insert ForStatement(2805) into Block(2843) at 1", "Insert IfStatement(2840) into Block(2843) at 2", "Insert ReturnStatement(2842) into Block(2843) at 3", "Insert MethodInvocation(2846) into IfStatement(2873) at 0", "Insert Block(2867) into IfStatement(2873) at 1", "Insert Block(2872) into IfStatement(2873) at 2", "Insert PrimitiveType: char(2890) into ArrayType: char[](2892) at 0", "Insert Dimension(2891) into ArrayType: char[](2892) at 1", "Insert SimpleName: buf(2893) into VariableDeclarationFragment(2897) at 0", "Insert MethodInvocation(2896) into VariableDeclarationFragment(2897) at 1", "Insert SimpleName: limit(2900) into VariableDeclarationFragment(2904) at 0", "Insert MethodInvocation(2903) into VariableDeclarationFragment(2904) at 1", "Insert SimpleName: end(2907) into VariableDeclarationFragment(2909) at 0", "Insert SimpleName: start(2908) into VariableDeclarationFragment(2909) at 1", "Insert SimpleName: isRange(2917) into VariableDeclarationFragment(2927) at 0", "Insert InfixExpression: &&(2926) into VariableDeclarationFragment(2927) at 1", "Insert WhileStatement(2948) into Block(2949) at 0", "Insert InfixExpression: &&(2960) into InfixExpression: &&(2965) at 0", "Move InfixExpression: >=(2991) into InfixExpression: &&(2965) at 1", "Insert ExpressionStatement(2968) into Block(2969) at 0", "Insert IfStatement(3004) into Block(3051) at 0", "Insert ExpressionStatement(3007) into Block(3051) at 1", "Move ExpressionStatement(3089) into Block(3051) at 2", "Insert WhileStatement(3030) into Block(3051) at 3", "Insert WhileStatement(3050) into Block(3051) at 4", "Insert InfixExpression: !=(3055) into ConditionalExpression(3059) at 0", "Insert SimpleName: end(3056) into ConditionalExpression(3059) at 1", "Insert PrefixExpression: -(3058) into ConditionalExpression(3059) at 2", "Insert QualifiedName: MessagePart.Factory(3092) into MethodInvocation(3108) at 0", "Insert SimpleName: valueOf(3093) into MethodInvocation(3108) at 1", "Insert ConditionalExpression(3107) into MethodInvocation(3108) at 2", "Insert SimpleName: cp(921) into MethodInvocation(923) at 0", "Insert SimpleName: getBuffer(922) into MethodInvocation(923) at 1", "Insert SimpleName: cp(936) into MethodInvocation(938) at 0", "Insert SimpleName: getLimit(937) into MethodInvocation(938) at 1", "Insert SimpleName: start(943) into InfixExpression: +(945) at 0", "Insert NumberLiteral: 1(944) into InfixExpression: +(945) at 1", "Insert SimpleName: buf(955) into ArrayAccess(957) at 0", "Insert SimpleName: start(956) into ArrayAccess(957) at 1", "Insert Assignment: =(974) into ExpressionStatement(975) at 0", "Insert IfStatement(1145) into Block(1146) at 0", "Move InfixExpression: ||(1213) into IfStatement(1792) at 0", "Insert Block(1173) into IfStatement(1792) at 1", "Insert IfStatement(1791) into IfStatement(1792) at 2", "Insert SimpleName: Token(1800) into MethodInvocation(1813) at 0", "Insert SimpleName: instance(1801) into MethodInvocation(1813) at 1", "Insert MethodInvocation(1806) into MethodInvocation(1813) at 2", "Insert SimpleName: type(1807) into MethodInvocation(1813) at 3", "Insert MethodInvocation(1812) into MethodInvocation(1813) at 4", "Insert SimpleName: match(1840) into MethodInvocation(1842) at 0", "Insert SimpleName: length(1841) into MethodInvocation(1842) at 1", "Insert SimpleName: cp(1847) into MethodInvocation(1849) at 0", "Insert SimpleName: getLimit(1848) into MethodInvocation(1849) at 1", "Insert SimpleName: limit(1852) into InfixExpression: -(1854) at 0", "Insert SimpleName: start(1853) into InfixExpression: -(1854) at 1", "Insert PrefixExpression: -(1858) into ReturnStatement(1859) at 0", "Insert SimpleName: cp(1866) into MethodInvocation(1868) at 0", "Insert SimpleName: getBuffer(1867) into MethodInvocation(1868) at 1", "Insert PrimitiveType: char(1881) into VariableDeclarationStatement(1889) at 0", "Insert VariableDeclarationFragment(1888) into VariableDeclarationStatement(1889) at 1", "Insert PrimitiveType: char(1890) into VariableDeclarationStatement(1897) at 0", "Insert VariableDeclarationFragment(1896) into VariableDeclarationStatement(1897) at 1", "Insert PrefixExpression: !(1918) into IfStatement(1923) at 0", "Insert Block(1922) into IfStatement(1923) at 1", "Insert PrefixExpression: -(1956) into ReturnStatement(1957) at 0", "Insert SimpleName: cp(1964) into MethodInvocation(1966) at 0", "Insert SimpleName: getBuffer(1965) into MethodInvocation(1966) at 1", "Insert SimpleName: buf(1971) into ArrayAccess(1973) at 0", "Insert SimpleName: start(1972) into ArrayAccess(1973) at 1", "Insert PrefixExpression: -(1984) into ReturnStatement(1985) at 0", "Insert SimpleName: start(1995) into InfixExpression: +(1997) at 0", "Insert NumberLiteral: 1(1996) into InfixExpression: +(1997) at 1", "Insert Assignment: =(2007) into ExpressionStatement(2008) at 0", "Insert PrefixExpression: ++(2010) into ExpressionStatement(2011) at 0", "Move InfixExpression: ==(2030) into IfStatement(2093) at 0", "Insert Block(2017) into IfStatement(2093) at 1", "Insert IfStatement(2092) into IfStatement(2093) at 2", "Move SimpleType: Message(2090) into ClassInstanceCreation(2106) at 0", "Insert QualifiedName: MessageType.UNTERMINATED_STRING_TOKEN(2100) into ClassInstanceCreation(2106) at 1", "Insert MethodInvocation(2105) into ClassInstanceCreation(2106) at 2", "Insert SimpleName: cp(2134) into MethodInvocation(2136) at 0", "Insert SimpleName: getLimit(2135) into MethodInvocation(2136) at 1", "Insert MethodInvocation(2151) into IfStatement(2174) at 0", "Insert Block(2155) into IfStatement(2174) at 1", "Insert IfStatement(2173) into IfStatement(2174) at 2", "Insert PrefixExpression: ++(2265) into ExpressionStatement(2266) at 0", "Insert SimpleName: parseInt(2292) into MethodInvocation(2295) at 0", "Insert SimpleName: cp(2293) into MethodInvocation(2295) at 1", "Insert SimpleName: start(2294) into MethodInvocation(2295) at 2", "Insert SimpleName: cp(2304) into MethodInvocation(2306) at 0", "Insert SimpleName: getLimit(2305) into MethodInvocation(2306) at 1", "Insert SimpleName: cp(2313) into MethodInvocation(2315) at 0", "Insert SimpleName: getBuffer(2314) into MethodInvocation(2315) at 1", "Insert SimpleName: end(2318) into InfixExpression: <(2320) at 0", "Insert SimpleName: limit(2319) into InfixExpression: <(2320) at 1", "Insert CharacterLiteral: '.'(2321) into InfixExpression: ==(2325) at 0", "Insert ArrayAccess(2324) into InfixExpression: ==(2325) at 1", "Insert PrefixExpression: ++(2328) into ExpressionStatement(2329) at 0", "Insert PrimitiveType: char(2330) into VariableDeclarationStatement(2333) at 0", "Insert VariableDeclarationFragment(2332) into VariableDeclarationStatement(2333) at 1", "Insert InfixExpression: ||(2349) into IfStatement(2372) at 0", "Insert Block(2371) into IfStatement(2372) at 1", "Insert MethodInvocation(2376) into ReturnStatement(2377) at 0", "Insert SimpleName: cp(2397) into MethodInvocation(2399) at 0", "Insert SimpleName: getLimit(2398) into MethodInvocation(2399) at 1", "Insert PrefixExpression: -(2406) into ReturnStatement(2407) at 0", "Insert SimpleName: cp(2414) into MethodInvocation(2416) at 0", "Insert SimpleName: getBuffer(2415) into MethodInvocation(2416) at 1", "Insert SimpleName: buf(2421) into ArrayAccess(2423) at 0", "Insert SimpleName: start(2422) into ArrayAccess(2423) at 1", "Insert SimpleName: ch(2426) into InfixExpression: >=(2428) at 0", "Insert CharacterLiteral: '0'(2427) into InfixExpression: >=(2428) at 1", "Insert SimpleName: ch(2429) into InfixExpression: <=(2431) at 0", "Insert CharacterLiteral: '9'(2430) into InfixExpression: <=(2431) at 1", "Insert PrimitiveType: int(2433) into VariableDeclarationStatement(2437) at 0", "Insert VariableDeclarationFragment(2436) into VariableDeclarationStatement(2437) at 1", "Insert Block(2451) into DoStatement(2459) at 0", "Insert InfixExpression: &&(2458) into DoStatement(2459) at 1", "Insert SimpleName: end(2460) into ReturnStatement(2461) at 0", "Insert PrefixExpression: -(2464) into ReturnStatement(2465) at 0", "Insert SimpleName: parseNmStart(2485) into MethodInvocation(2488) at 0", "Insert SimpleName: cp(2486) into MethodInvocation(2488) at 1", "Insert SimpleName: start(2487) into MethodInvocation(2488) at 2", "Insert PrefixExpression: -(2495) into ReturnStatement(2496) at 0", "Insert SimpleName: nmCharEnd(2500) into VariableDeclarationFragment(2501) at 0", "Insert Assignment: =(2508) into ParenthesizedExpression(2509) at 0", "Insert Assignment: =(2514) into ExpressionStatement(2515) at 0", "Insert SimpleName: parseNmChar(2537) into MethodInvocation(2540) at 0", "Insert SimpleName: cp(2538) into MethodInvocation(2540) at 1", "Insert SimpleName: start(2539) into MethodInvocation(2540) at 2", "Insert PrefixExpression: -(2547) into ReturnStatement(2548) at 0", "Insert SimpleName: nmCharEnd(2552) into VariableDeclarationFragment(2553) at 0", "Insert Assignment: =(2560) into ParenthesizedExpression(2561) at 0", "Insert Assignment: =(2566) into ExpressionStatement(2567) at 0", "Insert PrefixExpression: -(2593) into ReturnStatement(2594) at 0", "Move MethodInvocation(2587) into ArrayAccess(2603) at 0", "Insert SimpleName: start(2602) into ArrayAccess(2603) at 1", "Insert InfixExpression: +(2612) into ReturnStatement(2613) at 0", "Insert MethodInvocation(2624) into ReturnStatement(2625) at 0", "Insert SimpleName: parseNmStart(2648) into MethodInvocation(2651) at 0", "Insert SimpleName: cp(2649) into MethodInvocation(2651) at 1", "Insert SimpleName: start(2650) into MethodInvocation(2651) at 2", "Insert SimpleName: end(2657) into ReturnStatement(2658) at 0", "Insert PrimitiveType: char(2666) into VariableDeclarationStatement(2674) at 0", "Insert VariableDeclarationFragment(2673) into VariableDeclarationStatement(2674) at 1", "Insert InfixExpression: ||(2686) into IfStatement(2692) at 0", "Insert Block(2691) into IfStatement(2692) at 1", "Insert SimpleName: cp(2715) into MethodInvocation(2717) at 0", "Insert SimpleName: getLimit(2716) into MethodInvocation(2717) at 1", "Insert SimpleName: cp(2724) into MethodInvocation(2726) at 0", "Insert SimpleName: getBuffer(2725) into MethodInvocation(2726) at 1", "Insert SimpleName: buf(2757) into ArrayAccess(2759) at 0", "Insert SimpleName: start(2758) into ArrayAccess(2759) at 1", "Insert PrimitiveType: int(2766) into VariableDeclarationStatement(2772) at 0", "Insert VariableDeclarationFragment(2771) into VariableDeclarationStatement(2772) at 1", "Move VariableDeclarationExpression(2775) into ForStatement(2805) at 0", "Move InfixExpression: >=(2779) into ForStatement(2805) at 1", "Move PrefixExpression: ++(2305) into ForStatement(2805) at 2", "Insert Block(2804) into ForStatement(2805) at 3", "Insert InfixExpression: &&(2817) into IfStatement(2840) at 0", "Insert Block(2839) into IfStatement(2840) at 1", "Insert SimpleName: end(2841) into ReturnStatement(2842) at 0", "Insert SimpleName: isLineBreak(2844) into MethodInvocation(2846) at 0", "Insert SimpleName: ch(2845) into MethodInvocation(2846) at 1", "Insert ThrowStatement(2866) into Block(2867) at 0", "Insert ReturnStatement(2871) into Block(2872) at 0", "Insert SimpleName: cp(2894) into MethodInvocation(2896) at 0", "Insert SimpleName: getBuffer(2895) into MethodInvocation(2896) at 1", "Insert SimpleName: cp(2901) into MethodInvocation(2903) at 0", "Insert SimpleName: getLimit(2902) into MethodInvocation(2903) at 1", "Insert InfixExpression: <(2920) into InfixExpression: &&(2926) at 0", "Insert InfixExpression: ==(2925) into InfixExpression: &&(2926) at 1", "Insert InfixExpression: &&(2943) into WhileStatement(2948) at 0", "Insert Block(2947) into WhileStatement(2948) at 1", "Insert InfixExpression: <(2953) into InfixExpression: &&(2960) at 0", "Insert MethodInvocation(2959) into InfixExpression: &&(2960) at 1", "Insert PrefixExpression: ++(2967) into ExpressionStatement(2968) at 0", "Insert InfixExpression: ||(2981) into IfStatement(3004) at 0", "Insert Block(3003) into IfStatement(3004) at 1", "Insert PrefixExpression: ++(3006) into ExpressionStatement(3007) at 0", "Insert InfixExpression: &&(3025) into WhileStatement(3030) at 0", "Insert Block(3029) into WhileStatement(3030) at 1", "Insert InfixExpression: &&(3045) into WhileStatement(3050) at 0", "Insert Block(3049) into WhileStatement(3050) at 1", "Insert SimpleName: end(3053) into InfixExpression: !=(3055) at 0", "Insert SimpleName: start(3054) into InfixExpression: !=(3055) at 1", "Insert NumberLiteral: 1(3057) into PrefixExpression: -(3058) at 0", "Insert InfixExpression: ==(3098) into ConditionalExpression(3107) at 0", "Insert StringLiteral: \"<end-of-input>\"(3099) into ConditionalExpression(3107) at 1", "Insert InfixExpression: +(3106) into ConditionalExpression(3107) at 2", "Insert SimpleName: end(968) into Assignment: =(974) at 0", "Insert MethodInvocation(973) into Assignment: =(974) at 1", "Insert InfixExpression: &&(992) into IfStatement(1145) at 0", "Move Block(1130) into IfStatement(1145) at 1", "Insert IfStatement(1144) into IfStatement(1145) at 2", "Insert IfStatement(1168) into Block(1173) at 0", "Move ExpressionStatement(1303) into Block(1173) at 1", "Move InfixExpression: ||(1251) into IfStatement(1791) at 0", "Insert Block(1192) into IfStatement(1791) at 1", "Insert IfStatement(1790) into IfStatement(1791) at 2", "Insert SimpleName: cp(1802) into MethodInvocation(1806) at 0", "Insert SimpleName: toString(1803) into MethodInvocation(1806) at 1", "Insert SimpleName: start(1804) into MethodInvocation(1806) at 2", "Insert SimpleName: end(1805) into MethodInvocation(1806) at 3", "Insert SimpleName: cp(1808) into MethodInvocation(1812) at 0", "Insert SimpleName: filePositionForOffsets(1809) into MethodInvocation(1812) at 1", "Insert SimpleName: start(1810) into MethodInvocation(1812) at 2", "Insert SimpleName: end(1811) into MethodInvocation(1812) at 3", "Insert NumberLiteral: 1(1857) into PrefixExpression: -(1858) at 0", "Insert SimpleName: chB(1882) into VariableDeclarationFragment(1888) at 0", "Insert ArrayAccess(1887) into VariableDeclarationFragment(1888) at 1", "Insert SimpleName: chM(1891) into VariableDeclarationFragment(1896) at 0", "Insert MethodInvocation(1895) into VariableDeclarationFragment(1896) at 1", "Insert ParenthesizedExpression(1917) into PrefixExpression: !(1918) at 0", "Insert ReturnStatement(1921) into Block(1922) at 0", "Insert NumberLiteral: 1(1955) into PrefixExpression: -(1956) at 0", "Insert NumberLiteral: 1(1983) into PrefixExpression: -(1984) at 0", "Insert SimpleName: ch(2003) into Assignment: =(2007) at 0", "Insert ArrayAccess(2006) into Assignment: =(2007) at 1", "Insert SimpleName: end(2009) into PrefixExpression: ++(2010) at 0", "Insert ReturnStatement(2016) into Block(2017) at 0", "Insert InfixExpression: ==(2020) into IfStatement(2092) at 0", "Insert Block(2063) into IfStatement(2092) at 1", "Insert IfStatement(2091) into IfStatement(2092) at 2", "Insert SimpleName: cp(2101) into MethodInvocation(2105) at 0", "Insert SimpleName: filePositionForOffsets(2102) into MethodInvocation(2105) at 1", "Insert SimpleName: start(2103) into MethodInvocation(2105) at 2", "Insert SimpleName: end(2104) into MethodInvocation(2105) at 3", "Insert SimpleName: isUriChar(2147) into MethodInvocation(2151) at 0", "Insert ArrayAccess(2150) into MethodInvocation(2151) at 1", "Insert ExpressionStatement(2154) into Block(2155) at 0", "Insert InfixExpression: ==(2160) into IfStatement(2173) at 0", "Insert Block(2170) into IfStatement(2173) at 1", "Insert Block(2172) into IfStatement(2173) at 2", "Insert SimpleName: end(2264) into PrefixExpression: ++(2265) at 0", "Insert SimpleName: buf(2322) into ArrayAccess(2324) at 0", "Insert SimpleName: end(2323) into ArrayAccess(2324) at 1", "Insert SimpleName: end(2327) into PrefixExpression: ++(2328) at 0", "Insert SimpleName: ch(2331) into VariableDeclarationFragment(2332) at 0", "Insert InfixExpression: ||(2345) into InfixExpression: ||(2349) at 0", "Insert InfixExpression: >(2348) into InfixExpression: ||(2349) at 1", "Insert ThrowStatement(2370) into Block(2371) at 0", "Insert SimpleName: parseInt(2373) into MethodInvocation(2376) at 0", "Insert SimpleName: cp(2374) into MethodInvocation(2376) at 1", "Insert SimpleName: end(2375) into MethodInvocation(2376) at 2", "Insert NumberLiteral: 1(2405) into PrefixExpression: -(2406) at 0", "Insert SimpleName: end(2434) into VariableDeclarationFragment(2436) at 0", "Insert SimpleName: start(2435) into VariableDeclarationFragment(2436) at 1", "Insert IfStatement(2444) into Block(2451) at 0", "Insert ExpressionStatement(2450) into Block(2451) at 1", "Insert InfixExpression: >=(2454) into InfixExpression: &&(2458) at 0", "Insert InfixExpression: <=(2457) into InfixExpression: &&(2458) at 1", "Insert NumberLiteral: 1(2463) into PrefixExpression: -(2464) at 0", "Insert NumberLiteral: 1(2494) into PrefixExpression: -(2495) at 0", "Insert SimpleName: nmCharEnd(2503) into Assignment: =(2508) at 0", "Insert MethodInvocation(2507) into Assignment: =(2508) at 1", "Insert SimpleName: end(2512) into Assignment: =(2514) at 0", "Insert SimpleName: nmCharEnd(2513) into Assignment: =(2514) at 1", "Insert NumberLiteral: 1(2546) into PrefixExpression: -(2547) at 0", "Insert SimpleName: nmCharEnd(2555) into Assignment: =(2560) at 0", "Insert MethodInvocation(2559) into Assignment: =(2560) at 1", "Insert SimpleName: end(2564) into Assignment: =(2566) at 0", "Insert SimpleName: nmCharEnd(2565) into Assignment: =(2566) at 1", "Insert NumberLiteral: 1(2592) into PrefixExpression: -(2593) at 0", "Insert SimpleName: start(2610) into InfixExpression: +(2612) at 0", "Insert NumberLiteral: 1(2611) into InfixExpression: +(2612) at 1", "Insert SimpleName: parseEscapeBody(2619) into MethodInvocation(2624) at 0", "Insert SimpleName: cp(2620) into MethodInvocation(2624) at 1", "Insert InfixExpression: +(2623) into MethodInvocation(2624) at 2", "Insert SimpleName: ch(2667) into VariableDeclarationFragment(2673) at 0", "Insert ArrayAccess(2672) into VariableDeclarationFragment(2673) at 1", "Insert ParenthesizedExpression(2682) into InfixExpression: ||(2686) at 0", "Insert InfixExpression: ==(2685) into InfixExpression: ||(2686) at 1", "Insert ReturnStatement(2690) into Block(2691) at 0", "Insert SimpleName: end(2767) into VariableDeclarationFragment(2771) at 0", "Insert InfixExpression: +(2770) into VariableDeclarationFragment(2771) at 1", "Insert IfStatement(2789) into Block(2804) at 0", "Insert ExpressionStatement(2795) into Block(2804) at 1", "Move IfStatement(2805) into Block(2804) at 2", "Insert InfixExpression: <(2808) into InfixExpression: &&(2817) at 0", "Insert MethodInvocation(2816) into InfixExpression: &&(2817) at 1", "Insert ExpressionStatement(2820) into Block(2839) at 0", "Insert IfStatement(2838) into Block(2839) at 1", "Insert ClassInstanceCreation(2865) into ThrowStatement(2866) at 0", "Insert InfixExpression: +(2870) into ReturnStatement(2871) at 0", "Insert SimpleName: end(2918) into InfixExpression: <(2920) at 0", "Insert SimpleName: limit(2919) into InfixExpression: <(2920) at 1", "Insert ArrayAccess(2923) into InfixExpression: ==(2925) at 0", "Insert CharacterLiteral: '?'(2924) into InfixExpression: ==(2925) at 1", "Insert InfixExpression: &&(2938) into InfixExpression: &&(2943) at 0", "Move InfixExpression: >=(3129) into InfixExpression: &&(2943) at 1", "Insert ExpressionStatement(2946) into Block(2947) at 0", "Insert SimpleName: end(2951) into InfixExpression: <(2953) at 0", "Insert SimpleName: limit(2952) into InfixExpression: <(2953) at 1", "Insert SimpleName: CssLexer(2954) into MethodInvocation(2959) at 0", "Insert SimpleName: isHexChar(2955) into MethodInvocation(2959) at 1", "Insert ArrayAccess(2958) into MethodInvocation(2959) at 2", "Insert SimpleName: end(2966) into PrefixExpression: ++(2967) at 0", "Insert InfixExpression: ==(2975) into InfixExpression: ||(2981) at 0", "Insert InfixExpression: !=(2980) into InfixExpression: ||(2981) at 1", "Insert ThrowStatement(3002) into Block(3003) at 0", "Insert SimpleName: end(3005) into PrefixExpression: ++(3006) at 0", "Insert InfixExpression: &&(3020) into InfixExpression: &&(3025) at 0", "Move InfixExpression: >=(3024) into InfixExpression: &&(3025) at 1", "Insert ExpressionStatement(3028) into Block(3029) at 0", "Insert InfixExpression: &&(3040) into InfixExpression: &&(3045) at 0", "Move InfixExpression: >=(3098) into InfixExpression: &&(3045) at 1", "Insert ExpressionStatement(3048) into Block(3049) at 0", "Insert SimpleName: offset(3094) into InfixExpression: ==(3098) at 0", "Insert MethodInvocation(3097) into InfixExpression: ==(3098) at 1", "Insert StringLiteral: \"\"(3100) into InfixExpression: +(3106) at 0", "Insert ArrayAccess(3105) into InfixExpression: +(3106) at 1", "Insert SimpleName: parseWhitespace(969) into MethodInvocation(973) at 0", "Insert SimpleName: buf(970) into MethodInvocation(973) at 1", "Insert SimpleName: end(971) into MethodInvocation(973) at 2", "Insert SimpleName: limit(972) into MethodInvocation(973) at 3", "Insert InfixExpression: <(986) into InfixExpression: &&(992) at 0", "Insert InfixExpression: ==(991) into InfixExpression: &&(992) at 1", "Insert InfixExpression: &&(1091) into IfStatement(1144) at 0", "Insert Block(1138) into IfStatement(1144) at 1", "Move Block(1203) into IfStatement(1144) at 2", "Insert InfixExpression: &&(1162) into IfStatement(1168) at 0", "Insert Block(1166) into IfStatement(1168) at 1", "Insert Block(1167) into IfStatement(1168) at 2", "Insert ExpressionStatement(1187) into Block(1192) at 0", "Move ExpressionStatement(1259) into Block(1192) at 1", "Move InfixExpression: ==(1263) into IfStatement(1790) at 0", "Insert Block(1222) into IfStatement(1790) at 1", "Insert IfStatement(1789) into IfStatement(1790) at 2", "Insert SimpleName: buf(1883) into ArrayAccess(1887) at 0", "Insert InfixExpression: +(1886) into ArrayAccess(1887) at 1", "Insert SimpleName: match(1892) into MethodInvocation(1895) at 0", "Insert SimpleName: charAt(1893) into MethodInvocation(1895) at 1", "Insert SimpleName: i(1894) into MethodInvocation(1895) at 2", "Insert InfixExpression: ||(1916) into ParenthesizedExpression(1917) at 0", "Insert PrefixExpression: -(1920) into ReturnStatement(1921) at 0", "Insert SimpleName: buf(2004) into ArrayAccess(2006) at 0", "Insert SimpleName: end(2005) into ArrayAccess(2006) at 1", "Insert SimpleName: end(2015) into ReturnStatement(2016) at 0", "Insert SimpleName: ch(2018) into InfixExpression: ==(2020) at 0", "Insert CharacterLiteral: '\\\\'(2019) into InfixExpression: ==(2020) at 1", "Insert IfStatement(2062) into Block(2063) at 0", "Insert MethodInvocation(2066) into IfStatement(2091) at 0", "Insert Block(2090) into IfStatement(2091) at 1", "Insert SimpleName: buf(2148) into ArrayAccess(2150) at 0", "Insert SimpleName: end(2149) into ArrayAccess(2150) at 1", "Insert PrefixExpression: ++(2153) into ExpressionStatement(2154) at 0", "Insert ArrayAccess(2158) into InfixExpression: ==(2160) at 0", "Insert CharacterLiteral: '\\\\'(2159) into InfixExpression: ==(2160) at 1", "Insert ExpressionStatement(2169) into Block(2170) at 0", "Insert BreakStatement(2171) into Block(2172) at 0", "Insert InfixExpression: ==(2336) into InfixExpression: ||(2345) at 0", "Insert InfixExpression: <(2344) into InfixExpression: ||(2345) at 1", "Insert SimpleName: ch(2346) into InfixExpression: >(2348) at 0", "Insert CharacterLiteral: '9'(2347) into InfixExpression: >(2348) at 1", "Insert ClassInstanceCreation(2369) into ThrowStatement(2370) at 0", "Insert InfixExpression: ==(2441) into IfStatement(2444) at 0", "Move Block(2314) into IfStatement(2444) at 1", "Insert Assignment: =(2449) into ExpressionStatement(2450) at 0", "Insert SimpleName: ch(2452) into InfixExpression: >=(2454) at 0", "Insert CharacterLiteral: '0'(2453) into InfixExpression: >=(2454) at 1", "Insert SimpleName: ch(2455) into InfixExpression: <=(2457) at 0", "Insert CharacterLiteral: '9'(2456) into InfixExpression: <=(2457) at 1", "Insert SimpleName: parseNmChar(2504) into MethodInvocation(2507) at 0", "Insert SimpleName: cp(2505) into MethodInvocation(2507) at 1", "Insert SimpleName: end(2506) into MethodInvocation(2507) at 2", "Insert SimpleName: parseNmChar(2556) into MethodInvocation(2559) at 0", "Insert SimpleName: cp(2557) into MethodInvocation(2559) at 1", "Insert SimpleName: end(2558) into MethodInvocation(2559) at 2", "Insert SimpleName: start(2621) into InfixExpression: +(2623) at 0", "Insert NumberLiteral: 1(2622) into InfixExpression: +(2623) at 1", "Move MethodInvocation(2536) into ArrayAccess(2672) at 0", "Insert SimpleName: start(2671) into ArrayAccess(2672) at 1", "Insert InfixExpression: &&(2681) into ParenthesizedExpression(2682) at 0", "Insert SimpleName: ch(2683) into InfixExpression: ==(2685) at 0", "Insert CharacterLiteral: '-'(2684) into InfixExpression: ==(2685) at 1", "Insert InfixExpression: +(2689) into ReturnStatement(2690) at 0", "Insert SimpleName: start(2768) into InfixExpression: +(2770) at 0", "Insert NumberLiteral: 1(2769) into InfixExpression: +(2770) at 1", "Insert InfixExpression: ==(2786) into IfStatement(2789) at 0", "Move Block(2790) into IfStatement(2789) at 1", "Insert Assignment: =(2794) into ExpressionStatement(2795) at 0", "Insert SimpleName: end(2806) into InfixExpression: <(2808) at 0", "Insert SimpleName: limit(2807) into InfixExpression: <(2808) at 1", "Insert SimpleName: CssLexer(2809) into MethodInvocation(2816) at 0", "Insert SimpleName: isSpaceChar(2810) into MethodInvocation(2816) at 1", "Insert Assignment: =(2815) into MethodInvocation(2816) at 2", "Insert PrefixExpression: ++(2819) into ExpressionStatement(2820) at 0", "Insert InfixExpression: &&(2833) into IfStatement(2838) at 0", "Insert Block(2837) into IfStatement(2838) at 1", "Move SimpleType: ParseException(2879) into ClassInstanceCreation(2865) at 0", "Insert ClassInstanceCreation(2864) into ClassInstanceCreation(2865) at 1", "Insert SimpleName: start(2868) into InfixExpression: +(2870) at 0", "Insert NumberLiteral: 1(2869) into InfixExpression: +(2870) at 1", "Insert SimpleName: buf(2921) into ArrayAccess(2923) at 0", "Insert SimpleName: limit(2922) into ArrayAccess(2923) at 1", "Insert InfixExpression: <(2932) into InfixExpression: &&(2938) at 0", "Insert InfixExpression: ==(2937) into InfixExpression: &&(2938) at 1", "Insert PrefixExpression: ++(2945) into ExpressionStatement(2946) at 0", "Insert SimpleName: buf(2956) into ArrayAccess(2958) at 0", "Insert SimpleName: end(2957) into ArrayAccess(2958) at 1", "Insert SimpleName: end(2973) into InfixExpression: ==(2975) at 0", "Insert SimpleName: limit(2974) into InfixExpression: ==(2975) at 1", "Insert CharacterLiteral: '-'(2976) into InfixExpression: !=(2980) at 0", "Insert ArrayAccess(2979) into InfixExpression: !=(2980) at 1", "Insert ClassInstanceCreation(3001) into ThrowStatement(3002) at 0", "Insert InfixExpression: <(3014) into InfixExpression: &&(3020) at 0", "Insert InfixExpression: ==(3019) into InfixExpression: &&(3020) at 1", "Insert PrefixExpression: ++(3027) into ExpressionStatement(3028) at 0", "Insert InfixExpression: <(3033) into InfixExpression: &&(3040) at 0", "Insert MethodInvocation(3039) into InfixExpression: &&(3040) at 1", "Insert PrefixExpression: ++(3047) into ExpressionStatement(3048) at 0", "Insert SimpleName: cp(3095) into MethodInvocation(3097) at 0", "Insert SimpleName: getLimit(3096) into MethodInvocation(3097) at 1", "Move MethodInvocation(1970) into ArrayAccess(3105) at 0", "Insert SimpleName: offset(3104) into ArrayAccess(3105) at 1", "Insert SimpleName: end(984) into InfixExpression: <(986) at 0", "Insert SimpleName: limit(985) into InfixExpression: <(986) at 1", "Insert ArrayAccess(989) into InfixExpression: ==(991) at 0", "Insert CharacterLiteral: '*'(990) into InfixExpression: ==(991) at 1", "Move ExpressionStatement(1061) into Block(1055) at 5", "Insert InfixExpression: <(1085) into InfixExpression: &&(1091) at 0", "Insert InfixExpression: ==(1090) into InfixExpression: &&(1091) at 1", "Insert DoStatement(1117) into Block(1138) at 0", "Move ExpressionStatement(1172) into Block(1138) at 1", "Insert VariableDeclarationStatement(1131) into Block(1138) at 2", "Move ExpressionStatement(1197) into Block(1138) at 3", "Insert InfixExpression: <(1156) into InfixExpression: &&(1162) at 0", "Insert InfixExpression: ==(1161) into InfixExpression: &&(1162) at 1", "Insert ExpressionStatement(1165) into Block(1166) at 0", "Insert Assignment: =(1186) into ExpressionStatement(1187) at 0", "Insert ExpressionStatement(1202) into Block(1222) at 0", "Insert IfStatement(1221) into Block(1222) at 1", "Move InfixExpression: ==(1290) into IfStatement(1789) at 0", "Insert Block(1230) into IfStatement(1789) at 1", "Insert IfStatement(1788) into IfStatement(1789) at 2", "Insert SimpleName: start(1884) into InfixExpression: +(1886) at 0", "Insert SimpleName: i(1885) into InfixExpression: +(1886) at 1", "Insert InfixExpression: ==(1900) into InfixExpression: ||(1916) at 0", "Insert ParenthesizedExpression(1915) into InfixExpression: ||(1916) at 1", "Insert NumberLiteral: 1(1919) into PrefixExpression: -(1920) at 0", "Insert InfixExpression: &&(2031) into IfStatement(2062) at 0", "Insert Block(2053) into IfStatement(2062) at 1", "Insert Block(2061) into IfStatement(2062) at 2", "Insert SimpleName: isLineBreak(2064) into MethodInvocation(2066) at 0", "Insert SimpleName: ch(2065) into MethodInvocation(2066) at 1", "Insert ThrowStatement(2089) into Block(2090) at 0", "Insert SimpleName: end(2152) into PrefixExpression: ++(2153) at 0", "Insert SimpleName: buf(2156) into ArrayAccess(2158) at 0", "Insert SimpleName: end(2157) into ArrayAccess(2158) at 1", "Insert Assignment: =(2168) into ExpressionStatement(2169) at 0", "Insert SimpleName: end(2334) into InfixExpression: ==(2336) at 0", "Insert SimpleName: limit(2335) into InfixExpression: ==(2336) at 1", "Insert ParenthesizedExpression(2342) into InfixExpression: <(2344) at 0", "Insert CharacterLiteral: '0'(2343) into InfixExpression: <(2344) at 1", "Move SimpleType: ParseException(2385) into ClassInstanceCreation(2369) at 0", "Insert ClassInstanceCreation(2368) into ClassInstanceCreation(2369) at 1", "Insert PrefixExpression: ++(2439) into InfixExpression: ==(2441) at 0", "Insert SimpleName: limit(2440) into InfixExpression: ==(2441) at 1", "Insert SimpleName: ch(2445) into Assignment: =(2449) at 0", "Insert ArrayAccess(2448) into Assignment: =(2449) at 1", "Insert InfixExpression: >=(2677) into InfixExpression: &&(2681) at 0", "Insert InfixExpression: <=(2680) into InfixExpression: &&(2681) at 1", "Insert SimpleName: start(2687) into InfixExpression: +(2689) at 0", "Insert NumberLiteral: 1(2688) into InfixExpression: +(2689) at 1", "Update SimpleName: getCurrentPosition(2740) to filePositionForOffsets", "Insert SimpleName: start(2739) into MethodInvocation(2741) at 2", "Insert SimpleName: start(2740) into MethodInvocation(2741) at 3", "Insert SimpleName: end(2784) into InfixExpression: ==(2786) at 0", "Insert SimpleName: limit(2785) into InfixExpression: ==(2786) at 1", "Insert SimpleName: ch(2790) into Assignment: =(2794) at 0", "Insert ArrayAccess(2793) into Assignment: =(2794) at 1", "Insert SimpleName: ch(2811) into Assignment: =(2815) at 0", "Insert ArrayAccess(2814) into Assignment: =(2815) at 1", "Insert SimpleName: end(2818) into PrefixExpression: ++(2819) at 0", "Insert InfixExpression: &&(2827) into InfixExpression: &&(2833) at 0", "Insert InfixExpression: ==(2832) into InfixExpression: &&(2833) at 1", "Insert ExpressionStatement(2836) into Block(2837) at 0", "Move SimpleType: Message(2881) into ClassInstanceCreation(2864) at 0", "Insert QualifiedName: MessageType.UNRECOGNIZED_ESCAPE(2851) into ClassInstanceCreation(2864) at 1", "Insert MethodInvocation(2856) into ClassInstanceCreation(2864) at 2", "Move MethodInvocation(2892) into ClassInstanceCreation(2864) at 3", "Insert SimpleName: end(2930) into InfixExpression: <(2932) at 0", "Insert SimpleName: limit(2931) into InfixExpression: <(2932) at 1", "Insert CharacterLiteral: '?'(2933) into InfixExpression: ==(2937) at 0", "Insert ArrayAccess(2936) into InfixExpression: ==(2937) at 1", "Insert SimpleName: end(2944) into PrefixExpression: ++(2945) at 0", "Insert SimpleName: buf(2977) into ArrayAccess(2979) at 0", "Insert SimpleName: end(2978) into ArrayAccess(2979) at 1", "Move SimpleType: ParseException(3051) into ClassInstanceCreation(3001) at 0", "Insert ClassInstanceCreation(3000) into ClassInstanceCreation(3001) at 1", "Insert SimpleName: end(3012) into InfixExpression: <(3014) at 0", "Insert SimpleName: limit(3013) into InfixExpression: <(3014) at 1", "Insert CharacterLiteral: '?'(3015) into InfixExpression: ==(3019) at 0", "Insert ArrayAccess(3018) into InfixExpression: ==(3019) at 1", "Insert SimpleName: end(3026) into PrefixExpression: ++(3027) at 0", "Insert SimpleName: end(3031) into InfixExpression: <(3033) at 0", "Insert SimpleName: limit(3032) into InfixExpression: <(3033) at 1", "Insert SimpleName: CssLexer(3034) into MethodInvocation(3039) at 0", "Insert SimpleName: isHexChar(3035) into MethodInvocation(3039) at 1", "Insert ArrayAccess(3038) into MethodInvocation(3039) at 2", "Insert SimpleName: end(3046) into PrefixExpression: ++(3047) at 0", "Insert SimpleName: buf(987) into ArrayAccess(989) at 0", "Insert SimpleName: end(988) into ArrayAccess(989) at 1", "Insert SimpleName: end(1083) into InfixExpression: <(1085) at 0", "Insert SimpleName: limit(1084) into InfixExpression: <(1085) at 1", "Insert ArrayAccess(1088) into InfixExpression: ==(1090) at 0", "Insert CharacterLiteral: '/'(1089) into InfixExpression: ==(1090) at 1", "Insert Block(1115) into DoStatement(1117) at 0", "Insert BooleanLiteral: true(1116) into DoStatement(1117) at 1", "Move SimpleType: FilePosition(1183) into VariableDeclarationStatement(1131) at 0", "Insert VariableDeclarationFragment(1130) into VariableDeclarationStatement(1131) at 1", "Insert SimpleName: end(1154) into InfixExpression: <(1156) at 0", "Insert SimpleName: limit(1155) into InfixExpression: <(1156) at 1", "Insert CharacterLiteral: '='(1157) into InfixExpression: ==(1161) at 0", "Insert ArrayAccess(1160) into InfixExpression: ==(1161) at 1", "Insert PrefixExpression: ++(1164) into ExpressionStatement(1165) at 0", "Insert SimpleName: end(1181) into Assignment: =(1186) at 0", "Insert MethodInvocation(1185) into Assignment: =(1186) at 1", "Insert Assignment: =(1201) into ExpressionStatement(1202) at 0", "Insert InfixExpression: !=(1206) into IfStatement(1221) at 0", "Move Block(1280) into IfStatement(1221) at 1", "Move Block(1285) into IfStatement(1221) at 2", "Insert ExpressionStatement(1229) into Block(1230) at 0", "Move InfixExpression: ==(1307) into IfStatement(1788) at 0", "Insert Block(1260) into IfStatement(1788) at 1", "Insert IfStatement(1787) into IfStatement(1788) at 2", "Insert SimpleName: chB(1898) into InfixExpression: ==(1900) at 0", "Insert SimpleName: chM(1899) into InfixExpression: ==(1900) at 1", "Insert InfixExpression: &&(1914) into ParenthesizedExpression(1915) at 0", "Insert InfixExpression: <(2023) into InfixExpression: &&(2031) at 0", "Insert MethodInvocation(2030) into InfixExpression: &&(2031) at 1", "Insert ExpressionStatement(2034) into Block(2053) at 0", "Insert IfStatement(2052) into Block(2053) at 1", "Insert ExpressionStatement(2060) into Block(2061) at 0", "Insert ClassInstanceCreation(2088) into ThrowStatement(2089) at 0", "Insert SimpleName: end(2161) into Assignment: =(2168) at 0", "Insert MethodInvocation(2167) into Assignment: =(2168) at 1", "Insert Assignment: =(2341) into ParenthesizedExpression(2342) at 0", "Move SimpleType: Message(2387) into ClassInstanceCreation(2368) at 0", "Insert QualifiedName: MessageType.MALFORMED_NUMBER(2354) into ClassInstanceCreation(2368) at 1", "Insert MethodInvocation(2359) into ClassInstanceCreation(2368) at 2", "Insert MethodInvocation(2367) into ClassInstanceCreation(2368) at 3", "Insert SimpleName: end(2438) into PrefixExpression: ++(2439) at 0", "Insert SimpleName: buf(2446) into ArrayAccess(2448) at 0", "Insert SimpleName: end(2447) into ArrayAccess(2448) at 1", "Insert SimpleName: ch(2675) into InfixExpression: >=(2677) at 0", "Insert CharacterLiteral: '0'(2676) into InfixExpression: >=(2677) at 1", "Insert SimpleName: ch(2678) into InfixExpression: <=(2680) at 0", "Insert CharacterLiteral: '9'(2679) into InfixExpression: <=(2680) at 1", "Insert SimpleName: buf(2791) into ArrayAccess(2793) at 0", "Insert SimpleName: end(2792) into ArrayAccess(2793) at 1", "Insert SimpleName: buf(2812) into ArrayAccess(2814) at 0", "Insert SimpleName: end(2813) into ArrayAccess(2814) at 1", "Move InfixExpression: ==(2840) into InfixExpression: &&(2827) at 0", "Insert InfixExpression: <(2826) into InfixExpression: &&(2827) at 1", "Insert CharacterLiteral: '\\n'(2828) into InfixExpression: ==(2832) at 0", "Insert ArrayAccess(2831) into InfixExpression: ==(2832) at 1", "Insert PrefixExpression: ++(2835) into ExpressionStatement(2836) at 0", "Insert SimpleName: cp(2852) into MethodInvocation(2856) at 0", "Insert SimpleName: filePositionForOffsets(2853) into MethodInvocation(2856) at 1", "Insert SimpleName: start(2854) into MethodInvocation(2856) at 2", "Insert SimpleName: start(2855) into MethodInvocation(2856) at 3", "Insert SimpleName: buf(2934) into ArrayAccess(2936) at 0", "Insert SimpleName: end(2935) into ArrayAccess(2936) at 1", "Move SimpleType: Message(3053) into ClassInstanceCreation(3000) at 0", "Insert QualifiedName: MessageType.EXPECTED_TOKEN(2986) into ClassInstanceCreation(3000) at 1", "Insert MethodInvocation(2991) into ClassInstanceCreation(3000) at 2", "Move MethodInvocation(3061) into ClassInstanceCreation(3000) at 3", "Insert MethodInvocation(2999) into ClassInstanceCreation(3000) at 4", "Insert SimpleName: buf(3016) into ArrayAccess(3018) at 0", "Insert SimpleName: end(3017) into ArrayAccess(3018) at 1", "Insert SimpleName: buf(3036) into ArrayAccess(3038) at 0", "Insert SimpleName: end(3037) into ArrayAccess(3038) at 1", "Update InfixExpression: <(1047) to ==", "Insert PrefixExpression: ++(1053) into ExpressionStatement(1054) at 0", "Insert SimpleName: buf(1086) into ArrayAccess(1088) at 0", "Insert SimpleName: end(1087) into ArrayAccess(1088) at 1", "Insert IfStatement(1098) into Block(1115) at 0", "Insert ExpressionStatement(1104) into Block(1115) at 1", "Insert IfStatement(1114) into Block(1115) at 2", "Insert SimpleName: commentPos(1124) into VariableDeclarationFragment(1130) at 0", "Insert MethodInvocation(1129) into VariableDeclarationFragment(1130) at 1", "Insert SimpleName: buf(1158) into ArrayAccess(1160) at 0", "Insert SimpleName: end(1159) into ArrayAccess(1160) at 1", "Insert SimpleName: end(1163) into PrefixExpression: ++(1164) at 0", "Insert SimpleName: parseString(1182) into MethodInvocation(1185) at 0", "Insert SimpleName: cp(1183) into MethodInvocation(1185) at 1", "Insert SimpleName: start(1184) into MethodInvocation(1185) at 2", "Insert SimpleName: identEnd(1196) into Assignment: =(1201) at 0", "Insert MethodInvocation(1200) into Assignment: =(1201) at 1", "Insert SimpleName: identEnd(1203) into InfixExpression: !=(1206) at 0", "Insert PrefixExpression: -(1205) into InfixExpression: !=(1206) at 1", "Insert ExpressionStatement(1214) into Block(1215) at 1", "Insert Assignment: =(1228) into ExpressionStatement(1229) at 0", "Insert VariableDeclarationStatement(1241) into Block(1260) at 0", "Move IfStatement(1330) into Block(1260) at 1", "Move InfixExpression: ||(1338) into IfStatement(1787) at 0", "Insert Block(1295) into IfStatement(1787) at 1", "Insert IfStatement(1786) into IfStatement(1787) at 2", "Insert InfixExpression: &&(1910) into InfixExpression: &&(1914) at 0", "Insert InfixExpression: <(1913) into InfixExpression: &&(1914) at 1", "Insert SimpleName: end(2021) into InfixExpression: <(2023) at 0", "Insert SimpleName: limit(2022) into InfixExpression: <(2023) at 1", "Insert SimpleName: isLineBreak(2024) into MethodInvocation(2030) at 0", "Insert Assignment: =(2029) into MethodInvocation(2030) at 1", "Insert PrefixExpression: ++(2033) into ExpressionStatement(2034) at 0", "Insert InfixExpression: &&(2047) into IfStatement(2052) at 0", "Insert Block(2051) into IfStatement(2052) at 1", "Insert Assignment: =(2059) into ExpressionStatement(2060) at 0", "Move SimpleType: ParseException(2063) into ClassInstanceCreation(2088) at 0", "Insert ClassInstanceCreation(2087) into ClassInstanceCreation(2088) at 1", "Insert SimpleName: parseEscapeBody(2162) into MethodInvocation(2167) at 0", "Insert SimpleName: cp(2163) into MethodInvocation(2167) at 1", "Insert InfixExpression: +(2166) into MethodInvocation(2167) at 2", "Insert SimpleName: ch(2337) into Assignment: =(2341) at 0", "Insert ArrayAccess(2340) into Assignment: =(2341) at 1", "Insert SimpleName: cp(2355) into MethodInvocation(2359) at 0", "Insert SimpleName: filePositionForOffsets(2356) into MethodInvocation(2359) at 1", "Insert SimpleName: start(2357) into MethodInvocation(2359) at 2", "Insert SimpleName: end(2358) into MethodInvocation(2359) at 3", "Insert QualifiedName: MessagePart.Factory(2360) into MethodInvocation(2367) at 0", "Insert SimpleName: valueOf(2361) into MethodInvocation(2367) at 1", "Insert MethodInvocation(2366) into MethodInvocation(2367) at 2", "Insert SimpleName: end(2824) into InfixExpression: <(2826) at 0", "Insert SimpleName: limit(2825) into InfixExpression: <(2826) at 1", "Insert SimpleName: buf(2829) into ArrayAccess(2831) at 0", "Insert SimpleName: end(2830) into ArrayAccess(2831) at 1", "Insert SimpleName: end(2834) into PrefixExpression: ++(2835) at 0", "Insert SimpleName: cp(2987) into MethodInvocation(2991) at 0", "Insert SimpleName: filePositionForOffsets(2988) into MethodInvocation(2991) at 1", "Insert SimpleName: end(2989) into MethodInvocation(2991) at 2", "Insert SimpleName: end(2990) into MethodInvocation(2991) at 3", "Insert SimpleName: toMessagePart(2996) into MethodInvocation(2999) at 0", "Insert SimpleName: cp(2997) into MethodInvocation(2999) at 1", "Insert SimpleName: end(2998) into MethodInvocation(2999) at 2", "Update SimpleName: chi(1045) to end", "Insert SimpleName: limit(999) into InfixExpression: ==(1000) at 1", "Insert ArrayAccess(1007) into Assignment: =(1008) at 1", "Insert SimpleName: end(1052) into PrefixExpression: ++(1053) at 0", "Insert InfixExpression: ==(1095) into IfStatement(1098) at 0", "Move Block(2221) into IfStatement(1098) at 1", "Insert Assignment: =(1103) into ExpressionStatement(1104) at 0", "Insert InfixExpression: ||(1111) into IfStatement(1114) at 0", "Move Block(1164) into IfStatement(1114) at 1", "Insert SimpleName: cp(1125) into MethodInvocation(1129) at 0", "Insert SimpleName: filePositionForOffsets(1126) into MethodInvocation(1129) at 1", "Insert SimpleName: start(1127) into MethodInvocation(1129) at 2", "Insert SimpleName: end(1128) into MethodInvocation(1129) at 3", "Insert SimpleName: parseIdent(1197) into MethodInvocation(1200) at 0", "Insert SimpleName: cp(1198) into MethodInvocation(1200) at 1", "Insert SimpleName: end(1199) into MethodInvocation(1200) at 2", "Insert NumberLiteral: 1(1204) into PrefixExpression: -(1205) at 0", "Insert Assignment: =(1213) into ExpressionStatement(1214) at 0", "Insert SimpleName: type(1226) into Assignment: =(1228) at 0", "Insert QualifiedName: CssTokenType.PUNCTUATION(1227) into Assignment: =(1228) at 1", "Insert PrimitiveType: int(1234) into VariableDeclarationStatement(1241) at 0", "Insert VariableDeclarationFragment(1240) into VariableDeclarationStatement(1241) at 1", "Insert InfixExpression: >=(1244) into IfStatement(1259) at 0", "Move VariableDeclarationStatement(1349) into Block(1295) at 0", "Insert IfStatement(1290) into Block(1295) at 1", "Move ExpressionStatement(1362) into Block(1295) at 2", "Move InfixExpression: ||(1453) into IfStatement(1786) at 0", "Insert Block(1392) into IfStatement(1786) at 1", "Insert IfStatement(1785) into IfStatement(1786) at 2", "Insert InfixExpression: ==(1906) into InfixExpression: &&(1910) at 0", "Insert InfixExpression: >=(1909) into InfixExpression: &&(1910) at 1", "Insert SimpleName: chB(1911) into InfixExpression: <(1913) at 0", "Insert CharacterLiteral: 'Z'(1912) into InfixExpression: <(1913) at 1", "Insert SimpleName: ch(2025) into Assignment: =(2029) at 0", "Insert ArrayAccess(2028) into Assignment: =(2029) at 1", "Insert SimpleName: end(2032) into PrefixExpression: ++(2033) at 0", "Insert InfixExpression: &&(2041) into InfixExpression: &&(2047) at 0", "Insert InfixExpression: ==(2046) into InfixExpression: &&(2047) at 1", "Insert ExpressionStatement(2050) into Block(2051) at 0", "Insert SimpleName: end(2054) into Assignment: =(2059) at 0", "Insert MethodInvocation(2058) into Assignment: =(2059) at 1", "Move SimpleType: Message(2065) into ClassInstanceCreation(2087) at 0", "Insert QualifiedName: MessageType.MALFORMED_STRING(2071) into ClassInstanceCreation(2087) at 1", "Insert MethodInvocation(2080) into ClassInstanceCreation(2087) at 2", "Insert MethodInvocation(2086) into ClassInstanceCreation(2087) at 3", "Insert SimpleName: end(2164) into InfixExpression: +(2166) at 0", "Insert NumberLiteral: 1(2165) into InfixExpression: +(2166) at 1", "Insert SimpleName: buf(2338) into ArrayAccess(2340) at 0", "Insert SimpleName: end(2339) into ArrayAccess(2340) at 1", "Insert SimpleName: cp(2362) into MethodInvocation(2366) at 0", "Insert SimpleName: toString(2363) into MethodInvocation(2366) at 1", "Insert SimpleName: start(2364) into MethodInvocation(2366) at 2", "Insert SimpleName: end(2365) into MethodInvocation(2366) at 3", "Insert SimpleName: buf(1005) into ArrayAccess(1007) at 0", "Insert SimpleName: end(1006) into ArrayAccess(1007) at 1", "Insert PrefixExpression: ++(1093) into InfixExpression: ==(1095) at 0", "Insert SimpleName: limit(1094) into InfixExpression: ==(1095) at 1", "Insert SimpleName: ch(1099) into Assignment: =(1103) at 0", "Insert ArrayAccess(1102) into Assignment: =(1103) at 1", "Insert InfixExpression: ==(1107) into InfixExpression: ||(1111) at 0", "Insert InfixExpression: ==(1110) into InfixExpression: ||(1111) at 1", "Insert SimpleName: end(1211) into Assignment: =(1213) at 0", "Insert SimpleName: identEnd(1212) into Assignment: =(1213) at 1", "Insert SimpleName: nameEnd(1235) into VariableDeclarationFragment(1240) at 0", "Insert MethodInvocation(1239) into VariableDeclarationFragment(1240) at 1", "Insert SimpleName: nameEnd(1242) into InfixExpression: >=(1244) at 0", "Insert NumberLiteral: 0(1243) into InfixExpression: >=(1244) at 1", "Insert ExpressionStatement(1252) into Block(1253) at 1", "Insert PrimitiveType: int(1268) into VariableDeclarationStatement(1281) at 0", "Insert InfixExpression: >=(1284) into IfStatement(1290) at 0", "Insert Block(1289) into IfStatement(1290) at 1", "Move VariableDeclarationStatement(1457) into Block(1392) at 0", "Insert IfStatement(1349) into Block(1392) at 1", "Insert IfStatement(1391) into Block(1392) at 2", "Insert InfixExpression: >=(1401) into IfStatement(1785) at 0", "Insert Block(1596) into IfStatement(1785) at 1", "Move IfStatement(1882) into IfStatement(1785) at 2", "Insert ParenthesizedExpression(1904) into InfixExpression: ==(1906) at 0", "Insert SimpleName: chM(1905) into InfixExpression: ==(1906) at 1", "Insert SimpleName: chB(1907) into InfixExpression: >=(1909) at 0", "Insert CharacterLiteral: 'A'(1908) into InfixExpression: >=(1909) at 1", "Insert SimpleName: buf(2026) into ArrayAccess(2028) at 0", "Insert SimpleName: end(2027) into ArrayAccess(2028) at 1", "Insert InfixExpression: ==(2037) into InfixExpression: &&(2041) at 0", "Insert InfixExpression: <(2040) into InfixExpression: &&(2041) at 1", "Insert ArrayAccess(2044) into InfixExpression: ==(2046) at 0", "Insert CharacterLiteral: '\\n'(2045) into InfixExpression: ==(2046) at 1", "Insert PrefixExpression: ++(2049) into ExpressionStatement(2050) at 0", "Insert SimpleName: parseEscapeBody(2055) into MethodInvocation(2058) at 0", "Insert SimpleName: cp(2056) into MethodInvocation(2058) at 1", "Insert SimpleName: end(2057) into MethodInvocation(2058) at 2", "Insert SimpleName: cp(2072) into MethodInvocation(2080) at 0", "Insert SimpleName: filePositionForOffsets(2073) into MethodInvocation(2080) at 1", "Insert InfixExpression: -(2076) into MethodInvocation(2080) at 2", "Insert InfixExpression: -(2079) into MethodInvocation(2080) at 3", "Insert QualifiedName: MessagePart.Factory(2081) into MethodInvocation(2086) at 0", "Insert SimpleName: valueOf(2082) into MethodInvocation(2086) at 1", "Insert InfixExpression: +(2085) into MethodInvocation(2086) at 2", "Update SimpleName: breaks(1117) to cp", "Update SimpleName: toFilePosition(1118) to filePositionForOffsets", "Update SimpleName: spos(1119) to start", "Insert SimpleName: end(1071) into MethodInvocation(1072) at 3", "Insert SimpleName: end(1092) into PrefixExpression: ++(1093) at 0", "Insert SimpleName: buf(1100) into ArrayAccess(1102) at 0", "Insert SimpleName: end(1101) into ArrayAccess(1102) at 1", "Insert SimpleName: ch(1105) into InfixExpression: ==(1107) at 0", "Insert CharacterLiteral: '\\r'(1106) into InfixExpression: ==(1107) at 1", "Insert SimpleName: ch(1108) into InfixExpression: ==(1110) at 0", "Insert CharacterLiteral: '\\n'(1109) into InfixExpression: ==(1110) at 1", "Insert SimpleName: parseName(1236) into MethodInvocation(1239) at 0", "Insert SimpleName: cp(1237) into MethodInvocation(1239) at 1", "Insert SimpleName: end(1238) into MethodInvocation(1239) at 2", "Insert Assignment: =(1251) into ExpressionStatement(1252) at 0", "Update SimpleName: tail(1341) to tailEnd", "Insert MethodInvocation(1279) into VariableDeclarationFragment(1280) at 1", "Insert SimpleName: tailEnd(1282) into InfixExpression: >=(1284) at 0", "Insert NumberLiteral: 0(1283) into InfixExpression: >=(1284) at 1", "Insert ExpressionStatement(1288) into Block(1289) at 0", "Move InfixExpression: ==(1460) into IfStatement(1349) at 0", "Insert Block(1336) into IfStatement(1349) at 1", "Insert Block(1348) into IfStatement(1349) at 2", "Insert SimpleName: isNum(1350) into IfStatement(1391) at 0", "Insert Block(1385) into IfStatement(1391) at 1", "Move Block(1518) into IfStatement(1391) at 2", "Insert ParenthesizedExpression(1399) into InfixExpression: >=(1401) at 0", "Insert NumberLiteral: 0(1400) into InfixExpression: >=(1401) at 1", "Insert ExpressionStatement(1405) into Block(1596) at 0", "Insert IfStatement(1595) into Block(1596) at 1", "Insert InfixExpression: |(1903) into ParenthesizedExpression(1904) at 0", "Insert SimpleName: ch(2035) into InfixExpression: ==(2037) at 0", "Insert CharacterLiteral: '\\r'(2036) into InfixExpression: ==(2037) at 1", "Insert SimpleName: end(2038) into InfixExpression: <(2040) at 0", "Insert SimpleName: limit(2039) into InfixExpression: <(2040) at 1", "Insert SimpleName: buf(2042) into ArrayAccess(2044) at 0", "Insert SimpleName: end(2043) into ArrayAccess(2044) at 1", "Insert SimpleName: end(2048) into PrefixExpression: ++(2049) at 0", "Insert SimpleName: end(2074) into InfixExpression: -(2076) at 0", "Insert NumberLiteral: 1(2075) into InfixExpression: -(2076) at 1", "Insert SimpleName: end(2077) into InfixExpression: -(2079) at 0", "Insert NumberLiteral: 1(2078) into InfixExpression: -(2079) at 1", "Insert StringLiteral: \"\"(2083) into InfixExpression: +(2085) at 0", "Insert SimpleName: ch(2084) into InfixExpression: +(2085) at 1", "Insert SimpleName: end(1249) into Assignment: =(1251) at 0", "Insert SimpleName: nameEnd(1250) into Assignment: =(1251) at 1", "Insert SimpleName: cp(1271) into MethodInvocation(1279) at 1", "Insert SimpleName: end(1272) into MethodInvocation(1279) at 2", "Move ConditionalExpression(1347) into MethodInvocation(1279) at 3", "Insert Assignment: =(1287) into ExpressionStatement(1288) at 0", "Insert VariableDeclarationStatement(1322) into Block(1336) at 0", "Insert ExpressionStatement(1328) into Block(1336) at 1", "Insert IfStatement(1335) into Block(1336) at 2", "Move ExpressionStatement(1480) into Block(1348) at 0", "Insert ExpressionStatement(1347) into Block(1348) at 1", "Insert ExpressionStatement(1357) into Block(1385) at 0", "Insert IfStatement(1380) into Block(1385) at 1", "Move ExpressionStatement(1512) into Block(1385) at 2", "Insert Assignment: =(1398) into ParenthesizedExpression(1399) at 0", "Insert Assignment: =(1404) into ExpressionStatement(1405) at 0", "Insert InfixExpression: &&(1424) into IfStatement(1595) at 0", "Insert Block(1439) into IfStatement(1595) at 1", "Insert IfStatement(1594) into IfStatement(1595) at 2", "Insert SimpleName: chB(1901) into InfixExpression: |(1903) at 0", "Insert NumberLiteral: 0x20(1902) into InfixExpression: |(1903) at 1", "Insert SimpleName: end(1285) into Assignment: =(1287) at 0", "Insert SimpleName: tailEnd(1286) into Assignment: =(1287) at 1", "Insert PrimitiveType: int(1315) into VariableDeclarationStatement(1322) at 0", "Insert VariableDeclarationFragment(1321) into VariableDeclarationStatement(1322) at 1", "Insert Assignment: =(1327) into ExpressionStatement(1328) at 0", "Insert SimpleName: isNum(1329) into IfStatement(1335) at 0", "Insert Block(1334) into IfStatement(1335) at 1", "Insert Assignment: =(1346) into ExpressionStatement(1347) at 0", "Insert Assignment: =(1356) into ExpressionStatement(1357) at 0", "Insert InfixExpression: >=(1360) into IfStatement(1380) at 0", "Insert Block(1365) into IfStatement(1380) at 1", "Insert IfStatement(1379) into IfStatement(1380) at 2", "Insert SimpleName: identEnd(1393) into Assignment: =(1398) at 0", "Insert MethodInvocation(1397) into Assignment: =(1398) at 1", "Insert SimpleName: end(1402) into Assignment: =(1404) at 0", "Insert SimpleName: identEnd(1403) into Assignment: =(1404) at 1", "Insert InfixExpression: &&(1418) into InfixExpression: &&(1424) at 0", "Insert InfixExpression: ==(1423) into InfixExpression: &&(1424) at 1", "Move ExpressionStatement(1542) into Block(1439) at 0", "Insert ExpressionStatement(1431) into Block(1439) at 1", "Insert ExpressionStatement(1438) into Block(1439) at 2", "Insert InfixExpression: &&(1448) into IfStatement(1594) at 0", "Insert Block(1588) into IfStatement(1594) at 1", "Move Block(1679) into IfStatement(1594) at 2", "Insert InfixExpression: &&(1610) into IfStatement(1777) at 0", "Insert SimpleName: numEnd(1316) into VariableDeclarationFragment(1321) at 0", "Insert MethodInvocation(1320) into VariableDeclarationFragment(1321) at 1", "Insert SimpleName: isNum(1323) into Assignment: =(1327) at 0", "Insert InfixExpression: >=(1326) into Assignment: =(1327) at 1", "Insert ExpressionStatement(1333) into Block(1334) at 0", "Insert SimpleName: end(1341) into Assignment: =(1346) at 0", "Insert MethodInvocation(1345) into Assignment: =(1346) at 1", "Insert SimpleName: identEnd(1351) into Assignment: =(1356) at 0", "Insert MethodInvocation(1355) into Assignment: =(1356) at 1", "Insert SimpleName: identEnd(1358) into InfixExpression: >=(1360) at 0", "Insert NumberLiteral: 0(1359) into InfixExpression: >=(1360) at 1", "Insert ExpressionStatement(1364) into Block(1365) at 0", "Insert InfixExpression: &&(1374) into IfStatement(1379) at 0", "Insert Block(1378) into IfStatement(1379) at 1", "Insert SimpleName: parseIdent(1394) into MethodInvocation(1397) at 0", "Insert SimpleName: cp(1395) into MethodInvocation(1397) at 1", "Insert SimpleName: start(1396) into MethodInvocation(1397) at 2", "Insert InfixExpression: &&(1414) into InfixExpression: &&(1418) at 0", "Insert InfixExpression: <(1417) into InfixExpression: &&(1418) at 1", "Insert CharacterLiteral: '+'(1419) into InfixExpression: ==(1423) at 0", "Insert ArrayAccess(1422) into InfixExpression: ==(1423) at 1", "Insert PrefixExpression: ++(1430) into ExpressionStatement(1431) at 0", "Insert Assignment: =(1437) into ExpressionStatement(1438) at 0", "Insert InfixExpression: <(1442) into InfixExpression: &&(1448) at 0", "Insert InfixExpression: ==(1447) into InfixExpression: &&(1448) at 1", "Insert ExpressionStatement(1451) into Block(1588) at 0", "Insert IfStatement(1587) into Block(1588) at 1", "Insert InfixExpression: <(1604) into InfixExpression: &&(1610) at 0", "Insert InfixExpression: !=(1609) into InfixExpression: &&(1610) at 1", "Insert ExpressionStatement(1748) into Block(1776) at 5", "Insert IfStatement(1771) into Block(1776) at 6", "Insert SimpleName: parseInt(1317) into MethodInvocation(1320) at 0", "Insert SimpleName: cp(1318) into MethodInvocation(1320) at 1", "Insert SimpleName: end(1319) into MethodInvocation(1320) at 2", "Insert SimpleName: numEnd(1324) into InfixExpression: >=(1326) at 0", "Insert NumberLiteral: 0(1325) into InfixExpression: >=(1326) at 1", "Insert Assignment: =(1332) into ExpressionStatement(1333) at 0", "Insert SimpleName: parseNum(1342) into MethodInvocation(1345) at 0", "Insert SimpleName: cp(1343) into MethodInvocation(1345) at 1", "Insert SimpleName: start(1344) into MethodInvocation(1345) at 2", "Insert SimpleName: parseIdent(1352) into MethodInvocation(1355) at 0", "Insert SimpleName: cp(1353) into MethodInvocation(1355) at 1", "Insert SimpleName: end(1354) into MethodInvocation(1355) at 2", "Insert Assignment: =(1363) into ExpressionStatement(1364) at 0", "Insert InfixExpression: <(1368) into InfixExpression: &&(1374) at 0", "Insert InfixExpression: ==(1373) into InfixExpression: &&(1374) at 1", "Insert ExpressionStatement(1377) into Block(1378) at 0", "Insert InfixExpression: ==(1410) into InfixExpression: &&(1414) at 0", "Move InfixExpression: ==(1531) into InfixExpression: &&(1414) at 1", "Insert SimpleName: end(1415) into InfixExpression: <(1417) at 0", "Insert SimpleName: limit(1416) into InfixExpression: <(1417) at 1", "Insert SimpleName: buf(1420) into ArrayAccess(1422) at 0", "Insert SimpleName: end(1421) into ArrayAccess(1422) at 1", "Insert SimpleName: end(1429) into PrefixExpression: ++(1430) at 0", "Insert SimpleName: end(1432) into Assignment: =(1437) at 0", "Insert MethodInvocation(1436) into Assignment: =(1437) at 1", "Insert SimpleName: end(1440) into InfixExpression: <(1442) at 0", "Insert SimpleName: limit(1441) into InfixExpression: <(1442) at 1", "Insert CharacterLiteral: '('(1443) into InfixExpression: ==(1447) at 0", "Insert ArrayAccess(1446) into InfixExpression: ==(1447) at 1", "Insert PrefixExpression: ++(1450) into ExpressionStatement(1451) at 0", "Insert InfixExpression: &&(1464) into IfStatement(1587) at 0", "Insert Block(1581) into IfStatement(1587) at 1", "Move Block(1672) into IfStatement(1587) at 2", "Insert SimpleName: end(1602) into InfixExpression: <(1604) at 0", "Insert SimpleName: limit(1603) into InfixExpression: <(1604) at 1", "Insert ArrayAccess(1607) into InfixExpression: !=(1609) at 0", "Move CharacterLiteral: '{'(1700) into InfixExpression: !=(1609) at 1", "Move ExpressionStatement(1744) into Block(1719) at 5", "Insert Assignment: =(1747) into ExpressionStatement(1748) at 0", "Insert InfixExpression: >=(1751) into IfStatement(1771) at 0", "Insert Block(1756) into IfStatement(1771) at 1", "Insert IfStatement(1770) into IfStatement(1771) at 2", "Insert SimpleName: end(1330) into Assignment: =(1332) at 0", "Insert SimpleName: numEnd(1331) into Assignment: =(1332) at 1", "Insert SimpleName: end(1361) into Assignment: =(1363) at 0", "Insert SimpleName: identEnd(1362) into Assignment: =(1363) at 1", "Insert SimpleName: end(1366) into InfixExpression: <(1368) at 0", "Insert SimpleName: limit(1367) into InfixExpression: <(1368) at 1", "Insert CharacterLiteral: '%'(1369) into InfixExpression: ==(1373) at 0", "Insert ArrayAccess(1372) into InfixExpression: ==(1373) at 1", "Insert PrefixExpression: ++(1376) into ExpressionStatement(1377) at 0", "Insert InfixExpression: -(1408) into InfixExpression: ==(1410) at 0", "Insert NumberLiteral: 1(1409) into InfixExpression: ==(1410) at 1", "Insert SimpleName: parseRange(1433) into MethodInvocation(1436) at 0", "Insert SimpleName: cp(1434) into MethodInvocation(1436) at 1", "Insert SimpleName: end(1435) into MethodInvocation(1436) at 2", "Insert SimpleName: buf(1444) into ArrayAccess(1446) at 0", "Insert SimpleName: end(1445) into ArrayAccess(1446) at 1", "Insert SimpleName: end(1449) into PrefixExpression: ++(1450) at 0", "Insert InfixExpression: ==(1456) into InfixExpression: &&(1464) at 0", "Insert InfixExpression: >=(1463) into InfixExpression: &&(1464) at 1", "Insert ExpressionStatement(1472) into Block(1581) at 0", "Insert VariableDeclarationStatement(1480) into Block(1581) at 1", "Insert VariableDeclarationStatement(1494) into Block(1581) at 2", "Insert IfStatement(1524) into Block(1581) at 3", "Insert ExpressionStatement(1533) into Block(1581) at 4", "Insert ExpressionStatement(1541) into Block(1581) at 5", "Insert IfStatement(1573) into Block(1581) at 6", "Insert ExpressionStatement(1576) into Block(1581) at 7", "Move ExpressionStatement(1666) into Block(1581) at 8", "Insert SimpleName: buf(1605) into ArrayAccess(1607) at 0", "Insert SimpleName: end(1606) into ArrayAccess(1607) at 1", "Insert SimpleName: identEnd(1742) into Assignment: =(1747) at 0", "Insert MethodInvocation(1746) into Assignment: =(1747) at 1", "Insert SimpleName: identEnd(1749) into InfixExpression: >=(1751) at 0", "Insert NumberLiteral: 0(1750) into InfixExpression: >=(1751) at 1", "Insert ExpressionStatement(1755) into Block(1756) at 0", "Move InfixExpression: &&(1849) into IfStatement(1770) at 0", "Move Block(1859) into IfStatement(1770) at 1", "Insert SimpleName: buf(1370) into ArrayAccess(1372) at 0", "Insert SimpleName: end(1371) into ArrayAccess(1372) at 1", "Insert SimpleName: end(1375) into PrefixExpression: ++(1376) at 0", "Insert SimpleName: end(1406) into InfixExpression: -(1408) at 0", "Insert SimpleName: start(1407) into InfixExpression: -(1408) at 1", "Move InfixExpression: -(2324) into InfixExpression: ==(1456) at 0", "Insert NumberLiteral: 4(1455) into InfixExpression: ==(1456) at 1", "Insert MethodInvocation(1461) into InfixExpression: >=(1463) at 0", "Insert NumberLiteral: 0(1462) into InfixExpression: >=(1463) at 1", "Insert Assignment: =(1471) into ExpressionStatement(1472) at 0", "Insert PrimitiveType: int(1473) into VariableDeclarationStatement(1480) at 0", "Insert VariableDeclarationFragment(1479) into VariableDeclarationStatement(1480) at 1", "Insert PrimitiveType: int(1481) into VariableDeclarationStatement(1494) at 0", "Insert VariableDeclarationFragment(1493) into VariableDeclarationStatement(1494) at 1", "Insert InfixExpression: &&(1501) into IfStatement(1524) at 0", "Insert Block(1523) into IfStatement(1524) at 1", "Insert Assignment: =(1532) into ExpressionStatement(1533) at 0", "Insert Assignment: =(1540) into ExpressionStatement(1541) at 0", "Insert InfixExpression: ||(1550) into IfStatement(1573) at 0", "Insert Block(1572) into IfStatement(1573) at 1", "Insert PrefixExpression: ++(1575) into ExpressionStatement(1576) at 0", "Update InfixExpression: <(1730) to ==", "Insert PrefixExpression: ++(1717) into ExpressionStatement(1718) at 0", "Insert SimpleName: parseIdent(1743) into MethodInvocation(1746) at 0", "Insert SimpleName: cp(1744) into MethodInvocation(1746) at 1", "Insert SimpleName: end(1745) into MethodInvocation(1746) at 2", "Insert Assignment: =(1754) into ExpressionStatement(1755) at 0", "Insert InfixExpression: !=(1759) into InfixExpression: &&(1765) at 0", "Insert SimpleName: cp(1458) into MethodInvocation(1461) at 1", "Insert SimpleName: start(1459) into MethodInvocation(1461) at 2", "Insert StringLiteral: \"url(\"(1460) into MethodInvocation(1461) at 3", "Insert SimpleName: end(1465) into Assignment: =(1471) at 0", "Insert MethodInvocation(1470) into Assignment: =(1471) at 1", "Insert SimpleName: stringEnd(1474) into VariableDeclarationFragment(1479) at 0", "Insert MethodInvocation(1478) into VariableDeclarationFragment(1479) at 1", "Insert SimpleName: uriEnd(1482) into VariableDeclarationFragment(1493) at 0", "Insert ConditionalExpression(1492) into VariableDeclarationFragment(1493) at 1", "Insert InfixExpression: <(1497) into InfixExpression: &&(1501) at 0", "Insert InfixExpression: <(1500) into InfixExpression: &&(1501) at 1", "Insert ThrowStatement(1522) into Block(1523) at 0", "Insert SimpleName: end(1525) into Assignment: =(1532) at 0", "Insert ConditionalExpression(1531) into Assignment: =(1532) at 1", "Insert SimpleName: end(1534) into Assignment: =(1540) at 0", "Insert MethodInvocation(1539) into Assignment: =(1540) at 1", "Insert InfixExpression: ==(1544) into InfixExpression: ||(1550) at 0", "Insert InfixExpression: !=(1549) into InfixExpression: ||(1550) at 1", "Insert ThrowStatement(1571) into Block(1572) at 0", "Insert SimpleName: end(1574) into PrefixExpression: ++(1575) at 0", "Update SimpleName: chi(1728) to end", "Insert SimpleName: limit(1632) into InfixExpression: ==(1633) at 1", "Insert ArrayAccess(1640) into Assignment: =(1641) at 1", "Insert SimpleName: end(1716) into PrefixExpression: ++(1717) at 0", "Insert SimpleName: end(1752) into Assignment: =(1754) at 0", "Insert SimpleName: identEnd(1753) into Assignment: =(1754) at 1", "Insert SimpleName: end(1757) into InfixExpression: !=(1759) at 0", "Insert SimpleName: limit(1758) into InfixExpression: !=(1759) at 1", "Insert ArrayAccess(1763) into InfixExpression: ==(1764) at 1", "Insert PrefixExpression: ++(1767) into ExpressionStatement(1768) at 0", "Insert SimpleName: parseWhitespace(1466) into MethodInvocation(1470) at 0", "Insert SimpleName: buf(1467) into MethodInvocation(1470) at 1", "Insert SimpleName: end(1468) into MethodInvocation(1470) at 2", "Insert SimpleName: limit(1469) into MethodInvocation(1470) at 3", "Insert SimpleName: parseString(1475) into MethodInvocation(1478) at 0", "Insert SimpleName: cp(1476) into MethodInvocation(1478) at 1", "Insert SimpleName: end(1477) into MethodInvocation(1478) at 2", "Insert InfixExpression: <(1485) into ConditionalExpression(1492) at 0", "Insert MethodInvocation(1489) into ConditionalExpression(1492) at 1", "Insert PrefixExpression: -(1491) into ConditionalExpression(1492) at 2", "Insert SimpleName: stringEnd(1495) into InfixExpression: <(1497) at 0", "Insert NumberLiteral: 0(1496) into InfixExpression: <(1497) at 1", "Insert SimpleName: uriEnd(1498) into InfixExpression: <(1500) at 0", "Insert NumberLiteral: 0(1499) into InfixExpression: <(1500) at 1", "Insert ClassInstanceCreation(1521) into ThrowStatement(1522) at 0", "Insert InfixExpression: >=(1528) into ConditionalExpression(1531) at 0", "Insert SimpleName: stringEnd(1529) into ConditionalExpression(1531) at 1", "Insert SimpleName: uriEnd(1530) into ConditionalExpression(1531) at 2", "Insert SimpleName: parseWhitespace(1535) into MethodInvocation(1539) at 0", "Insert SimpleName: buf(1536) into MethodInvocation(1539) at 1", "Insert SimpleName: end(1537) into MethodInvocation(1539) at 2", "Insert SimpleName: limit(1538) into MethodInvocation(1539) at 3", "Insert SimpleName: end(1542) into InfixExpression: ==(1544) at 0", "Insert SimpleName: limit(1543) into InfixExpression: ==(1544) at 1", "Insert CharacterLiteral: ')'(1545) into InfixExpression: !=(1549) at 0", "Insert ArrayAccess(1548) into InfixExpression: !=(1549) at 1", "Insert ClassInstanceCreation(1570) into ThrowStatement(1571) at 0", "Insert SimpleName: buf(1638) into ArrayAccess(1640) at 0", "Insert SimpleName: end(1639) into ArrayAccess(1640) at 1", "Insert SimpleName: buf(1761) into ArrayAccess(1763) at 0", "Insert SimpleName: end(1762) into ArrayAccess(1763) at 1", "Insert SimpleName: end(1766) into PrefixExpression: ++(1767) at 0", "Insert SimpleName: stringEnd(1483) into InfixExpression: <(1485) at 0", "Insert NumberLiteral: 0(1484) into InfixExpression: <(1485) at 1", "Insert SimpleName: parseUri(1486) into MethodInvocation(1489) at 0", "Insert SimpleName: cp(1487) into MethodInvocation(1489) at 1", "Insert SimpleName: end(1488) into MethodInvocation(1489) at 2", "Insert NumberLiteral: 1(1490) into PrefixExpression: -(1491) at 0", "Move SimpleType: ParseException(1591) into ClassInstanceCreation(1521) at 0", "Insert ClassInstanceCreation(1520) into ClassInstanceCreation(1521) at 1", "Insert SimpleName: stringEnd(1526) into InfixExpression: >=(1528) at 0", "Insert NumberLiteral: 0(1527) into InfixExpression: >=(1528) at 1", "Insert SimpleName: buf(1546) into ArrayAccess(1548) at 0", "Insert SimpleName: end(1547) into ArrayAccess(1548) at 1", "Move SimpleType: ParseException(1632) into ClassInstanceCreation(1570) at 0", "Insert ClassInstanceCreation(1569) into ClassInstanceCreation(1570) at 1", "Update SimpleName: breaks(1831) to cp", "Update SimpleName: toFilePosition(1832) to filePositionForOffsets", "Update SimpleName: spos(1833) to start", "Insert SimpleName: end(1735) into MethodInvocation(1736) at 3", "Move SimpleType: Message(1593) into ClassInstanceCreation(1520) at 0", "Insert QualifiedName: MessageType.EXPECTED_TOKEN(1506) into ClassInstanceCreation(1520) at 1", "Insert MethodInvocation(1511) into ClassInstanceCreation(1520) at 2", "Move MethodInvocation(1607) into ClassInstanceCreation(1520) at 3", "Insert MethodInvocation(1519) into ClassInstanceCreation(1520) at 4", "Move SimpleType: Message(1634) into ClassInstanceCreation(1569) at 0", "Insert QualifiedName: MessageType.EXPECTED_TOKEN(1555) into ClassInstanceCreation(1569) at 1", "Insert MethodInvocation(1560) into ClassInstanceCreation(1569) at 2", "Move MethodInvocation(1648) into ClassInstanceCreation(1569) at 3", "Insert MethodInvocation(1568) into ClassInstanceCreation(1569) at 4", "Insert SimpleName: cp(1507) into MethodInvocation(1511) at 0", "Insert SimpleName: filePositionForOffsets(1508) into MethodInvocation(1511) at 1", "Insert SimpleName: end(1509) into MethodInvocation(1511) at 2", "Insert SimpleName: end(1510) into MethodInvocation(1511) at 3", "Insert SimpleName: toMessagePart(1516) into MethodInvocation(1519) at 0", "Insert SimpleName: cp(1517) into MethodInvocation(1519) at 1", "Insert SimpleName: end(1518) into MethodInvocation(1519) at 2", "Insert SimpleName: cp(1556) into MethodInvocation(1560) at 0", "Insert SimpleName: filePositionForOffsets(1557) into MethodInvocation(1560) at 1", "Insert SimpleName: end(1558) into MethodInvocation(1560) at 2", "Insert SimpleName: end(1559) into MethodInvocation(1560) at 3", "Insert SimpleName: toMessagePart(1565) into MethodInvocation(1568) at 0", "Insert SimpleName: cp(1566) into MethodInvocation(1568) at 1", "Insert SimpleName: end(1567) into MethodInvocation(1568) at 2", "Delete QualifiedName: java.util.regex.Pattern(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: LinkedList(60)", "Delete SimpleType: LinkedList(61)", "Delete SimpleName: Token(62)", "Delete SimpleType: Token(63)", "Delete SimpleName: CssTokenType(64)", "Delete SimpleType: CssTokenType(65)", "Delete ParameterizedType: Token<CssTokenType>(66)", "Delete ParameterizedType: LinkedList<Token<CssTokenType>>(67)", "Delete ClassInstanceCreation(68)", "Delete SimpleName: chi(1039)", "Delete SimpleName: cp(1040)", "Delete SimpleName: read(1041)", "Delete MethodInvocation(1042)", "Delete Assignment: =(1043)", "Delete ExpressionStatement(1044)", "Delete NumberLiteral: 0(1046)", "Delete PrimitiveType: char(1052)", "Delete SimpleName: chi(1053)", "Delete CastExpression(1054)", "Delete SimpleName: sb(1057)", "Delete SimpleName: append(1058)", "Delete SimpleName: ch(1059)", "Delete MethodInvocation(1060)", "Delete SimpleName: parseName(1317)", "Delete SimpleName: sb(1318)", "Delete MethodInvocation(1319)", "Delete SimpleName: sb(1688)", "Delete SimpleName: append(1689)", "Delete SimpleName: ch(1690)", "Delete MethodInvocation(1691)", "Delete ExpressionStatement(1692)", "Delete SimpleName: cp(1693)", "Delete SimpleName: read(1694)", "Delete MethodInvocation(1695)", "Delete ExpressionStatement(1696)", "Delete SimpleName: cp(1697)", "Delete SimpleName: lookahead(1698)", "Delete MethodInvocation(1699)", "Delete InfixExpression: !=(1701)", "Delete SimpleName: chi(1722)", "Delete SimpleName: cp(1723)", "Delete SimpleName: read(1724)", "Delete MethodInvocation(1725)", "Delete Assignment: =(1726)", "Delete ExpressionStatement(1727)", "Delete NumberLiteral: 0(1729)", "Delete PrimitiveType: char(1735)", "Delete SimpleName: chi(1736)", "Delete CastExpression(1737)", "Delete SimpleName: sb(1740)", "Delete SimpleName: append(1741)", "Delete SimpleName: ch(1742)", "Delete MethodInvocation(1743)", "Delete SimpleName: parseIdent(1840)", "Delete SimpleName: sb(1841)", "Delete MethodInvocation(1842)", "Delete PrefixExpression: !(1843)", "Delete SimpleName: cp(1845)", "Delete SimpleName: lookahead(1846)", "Delete MethodInvocation(1847)", "Delete SimpleName: sb(1850)", "Delete SimpleName: append(1851)", "Delete CharacterLiteral: '%'(1852)", "Delete MethodInvocation(1853)", "Delete SimpleName: cp(1855)", "Delete SimpleName: read(1856)", "Delete MethodInvocation(1857)", "Delete ExpressionStatement(1858)", "Delete IfStatement(1860)", "Delete SimpleName: sb(1868)", "Delete SimpleName: append(1869)", "Delete SimpleName: ch(1870)", "Delete MethodInvocation(1871)", "Delete ExpressionStatement(1872)", "Delete SimpleName: cp(1873)", "Delete SimpleName: read(1874)", "Delete MethodInvocation(1875)", "Delete ExpressionStatement(1876)", "Delete BooleanLiteral: false(1987)", "Delete SimpleName: cp(2731)", "Delete SimpleName: isEmpty(2732)", "Delete MethodInvocation(2733)", "Delete Modifier: final(754)", "Delete SimpleName: CssSplitter(755)", "Delete Modifier: private(906)", "Delete Modifier: static(907)", "Delete Modifier: final(908)", "Delete SimpleName: Pattern(909)", "Delete SimpleType: Pattern(910)", "Delete SimpleName: URL_RE(911)", "Delete SimpleName: Pattern(912)", "Delete SimpleName: compile(913)", "Delete StringLiteral: \"^url\\\\($\"(914)", "Delete QualifiedName: Pattern.CASE_INSENSITIVE(915)", "Delete MethodInvocation(916)", "Delete VariableDeclarationFragment(917)", "Delete FieldDeclaration(918)", "Delete Modifier: private(919)", "Delete PrimitiveType: int(920)", "Delete SimpleName: spos(921)", "Delete VariableDeclarationFragment(922)", "Delete SimpleName: epos(923)", "Delete VariableDeclarationFragment(924)", "Delete FieldDeclaration(925)", "Delete Modifier: private(926)", "Delete PrimitiveType: void(927)", "Delete SimpleName: produce(928)", "Delete SimpleName: SourceBreaks(943)", "Delete SimpleType: SourceBreaks(944)", "Delete SimpleName: breaks(945)", "Delete SimpleName: cp(946)", "Delete SimpleName: getSourceBreaks(947)", "Delete SimpleName: cp(948)", "Delete SimpleName: getOffset(949)", "Delete MethodInvocation(950)", "Delete MethodInvocation(951)", "Delete VariableDeclarationFragment(952)", "Delete VariableDeclarationStatement(953)", "Delete SimpleName: spos(954)", "Delete SimpleName: cp(955)", "Delete SimpleName: getCharInFile(956)", "Delete SimpleName: cp(957)", "Delete SimpleName: getOffset(958)", "Delete MethodInvocation(959)", "Delete MethodInvocation(960)", "Delete Assignment: =(961)", "Delete ExpressionStatement(962)", "Delete SimpleName: StringBuilder(963)", "Delete SimpleType: StringBuilder(964)", "Delete SimpleName: sb(965)", "Delete SimpleName: StringBuilder(966)", "Delete SimpleType: StringBuilder(967)", "Delete ClassInstanceCreation(968)", "Delete VariableDeclarationFragment(969)", "Delete VariableDeclarationStatement(970)", "Delete PrimitiveType: int(971)", "Delete SimpleName: chi(972)", "Delete SimpleName: cp(973)", "Delete SimpleName: lookahead(974)", "Delete MethodInvocation(975)", "Delete VariableDeclarationFragment(976)", "Delete VariableDeclarationStatement(977)", "Delete PrimitiveType: char(978)", "Delete SimpleName: ch(979)", "Delete PrimitiveType: char(980)", "Delete SimpleName: chi(981)", "Delete CastExpression(982)", "Delete VariableDeclarationFragment(983)", "Delete VariableDeclarationStatement(984)", "Delete SimpleName: sb(994)", "Delete SimpleName: append(995)", "Delete SimpleName: ch(996)", "Delete MethodInvocation(997)", "Delete ExpressionStatement(998)", "Delete SimpleName: cp(999)", "Delete SimpleName: read(1000)", "Delete MethodInvocation(1001)", "Delete ExpressionStatement(1002)", "Delete SimpleName: parseWhitespace(1003)", "Delete SimpleName: sb(1004)", "Delete MethodInvocation(1005)", "Delete ExpressionStatement(1006)", "Delete Block(1011)", "Delete SimpleName: sb(1015)", "Delete SimpleName: append(1016)", "Delete SimpleName: ch(1017)", "Delete MethodInvocation(1018)", "Delete ExpressionStatement(1019)", "Delete SimpleName: cp(1020)", "Delete SimpleName: read(1021)", "Delete MethodInvocation(1022)", "Delete ExpressionStatement(1023)", "Delete PrimitiveType: int(1024)", "Delete SimpleName: la(1025)", "Delete SimpleName: cp(1026)", "Delete SimpleName: lookahead(1027)", "Delete MethodInvocation(1028)", "Delete VariableDeclarationFragment(1029)", "Delete VariableDeclarationStatement(1030)", "Delete SimpleName: la(1031)", "Delete CharacterLiteral: '*'(1032)", "Delete InfixExpression: ==(1033)", "Delete SimpleName: la(1131)", "Delete CharacterLiteral: '/'(1132)", "Delete InfixExpression: ==(1133)", "Delete SimpleName: sb(1134)", "Delete SimpleName: append(1135)", "Delete PrimitiveType: char(1136)", "Delete SimpleName: la(1137)", "Delete CastExpression(1138)", "Delete MethodInvocation(1139)", "Delete ExpressionStatement(1140)", "Delete SimpleName: cp(1141)", "Delete SimpleName: consume(1142)", "Delete NumberLiteral: 1(1143)", "Delete MethodInvocation(1144)", "Delete ExpressionStatement(1145)", "Delete SimpleName: la(1146)", "Delete SimpleName: cp(1147)", "Delete SimpleName: lookahead(1148)", "Delete MethodInvocation(1149)", "Delete Assignment: =(1150)", "Delete ExpressionStatement(1151)", "Delete SimpleName: la(1152)", "Delete NumberLiteral: 0(1153)", "Delete InfixExpression: <(1154)", "Delete SimpleName: la(1155)", "Delete CharacterLiteral: '\\r'(1156)", "Delete InfixExpression: ==(1157)", "Delete InfixExpression: ||(1158)", "Delete SimpleName: la(1159)", "Delete CharacterLiteral: '\\n'(1160)", "Delete InfixExpression: ==(1161)", "Delete InfixExpression: ||(1162)", "Delete IfStatement(1165)", "Delete Block(1166)", "Delete BooleanLiteral: true(1167)", "Delete DoStatement(1168)", "Delete SimpleName: epos(1173)", "Delete SimpleName: cp(1174)", "Delete SimpleName: getCharInFile(1175)", "Delete SimpleName: cp(1176)", "Delete SimpleName: getOffset(1177)", "Delete MethodInvocation(1178)", "Delete MethodInvocation(1179)", "Delete Assignment: =(1180)", "Delete ExpressionStatement(1181)", "Delete SimpleName: commentPos(1184)", "Delete SimpleName: breaks(1185)", "Delete SimpleName: toFilePosition(1186)", "Delete SimpleName: spos(1187)", "Delete SimpleName: epos(1188)", "Delete MethodInvocation(1189)", "Delete VariableDeclarationFragment(1190)", "Delete VariableDeclarationStatement(1191)", "Delete Block(1198)", "Delete IfStatement(1204)", "Delete IfStatement(1205)", "Delete Block(1206)", "Delete SimpleName: sb(1214)", "Delete SimpleName: append(1215)", "Delete SimpleName: ch(1216)", "Delete MethodInvocation(1217)", "Delete ExpressionStatement(1218)", "Delete SimpleName: cp(1219)", "Delete SimpleName: read(1220)", "Delete MethodInvocation(1221)", "Delete ExpressionStatement(1222)", "Delete CharacterLiteral: '='(1223)", "Delete SimpleName: cp(1224)", "Delete SimpleName: lookahead(1225)", "Delete MethodInvocation(1226)", "Delete InfixExpression: ==(1227)", "Delete SimpleName: sb(1228)", "Delete SimpleName: append(1229)", "Delete CharacterLiteral: '='(1230)", "Delete MethodInvocation(1231)", "Delete ExpressionStatement(1232)", "Delete SimpleName: cp(1233)", "Delete SimpleName: read(1234)", "Delete MethodInvocation(1235)", "Delete ExpressionStatement(1236)", "Delete Block(1237)", "Delete Block(1238)", "Delete IfStatement(1239)", "Delete SimpleName: type(1240)", "Delete QualifiedName: CssTokenType.PUNCTUATION(1241)", "Delete Assignment: =(1242)", "Delete ExpressionStatement(1243)", "Delete Block(1244)", "Delete SimpleName: parseString(1252)", "Delete SimpleName: sb(1253)", "Delete MethodInvocation(1254)", "Delete ExpressionStatement(1255)", "Delete Block(1260)", "Delete SimpleName: sb(1264)", "Delete SimpleName: append(1265)", "Delete SimpleName: ch(1266)", "Delete MethodInvocation(1267)", "Delete ExpressionStatement(1268)", "Delete SimpleName: cp(1269)", "Delete SimpleName: read(1270)", "Delete MethodInvocation(1271)", "Delete ExpressionStatement(1272)", "Delete SimpleName: parseIdent(1273)", "Delete SimpleName: sb(1274)", "Delete MethodInvocation(1275)", "Delete IfStatement(1286)", "Delete Block(1287)", "Delete SimpleName: sb(1291)", "Delete SimpleName: append(1292)", "Delete SimpleName: ch(1293)", "Delete MethodInvocation(1294)", "Delete ExpressionStatement(1295)", "Delete SimpleName: cp(1296)", "Delete SimpleName: read(1297)", "Delete MethodInvocation(1298)", "Delete ExpressionStatement(1299)", "Delete Block(1304)", "Delete SimpleName: sb(1308)", "Delete SimpleName: append(1309)", "Delete SimpleName: ch(1310)", "Delete MethodInvocation(1311)", "Delete ExpressionStatement(1312)", "Delete SimpleName: cp(1313)", "Delete SimpleName: read(1314)", "Delete MethodInvocation(1315)", "Delete ExpressionStatement(1316)", "Delete Block(1331)", "Delete SimpleName: sb(1350)", "Delete SimpleName: append(1351)", "Delete SimpleName: ch(1352)", "Delete MethodInvocation(1353)", "Delete ExpressionStatement(1354)", "Delete SimpleName: cp(1355)", "Delete SimpleName: read(1356)", "Delete MethodInvocation(1357)", "Delete ExpressionStatement(1358)", "Delete SimpleName: cp(1366)", "Delete SimpleName: getOffset(1367)", "Delete MethodInvocation(1368)", "Delete InfixExpression: -(1369)", "Delete SimpleName: tail(1370)", "Delete SimpleName: length(1371)", "Delete MethodInvocation(1372)", "Delete InfixExpression: >=(1373)", "Delete PrimitiveType: boolean(1374)", "Delete SimpleName: matchedTail(1375)", "Delete BooleanLiteral: true(1376)", "Delete VariableDeclarationFragment(1377)", "Delete VariableDeclarationStatement(1378)", "Delete PrimitiveType: char(1379)", "Delete Dimension(1380)", "Delete ArrayType: char[](1381)", "Delete SimpleName: buffer(1382)", "Delete SimpleName: cp(1383)", "Delete SimpleName: getBuffer(1384)", "Delete MethodInvocation(1385)", "Delete VariableDeclarationFragment(1386)", "Delete VariableDeclarationStatement(1387)", "Delete PrimitiveType: int(1388)", "Delete SimpleName: len(1392)", "Delete SimpleName: tail(1393)", "Delete SimpleName: length(1394)", "Delete MethodInvocation(1395)", "Delete VariableDeclarationFragment(1396)", "Delete VariableDeclarationExpression(1397)", "Delete SimpleName: buffer(1403)", "Delete SimpleName: i(1404)", "Delete SimpleName: cp(1405)", "Delete SimpleName: getOffset(1406)", "Delete MethodInvocation(1407)", "Delete InfixExpression: +(1408)", "Delete ArrayAccess(1409)", "Delete SimpleName: tail(1410)", "Delete SimpleName: charAt(1411)", "Delete SimpleName: i(1412)", "Delete MethodInvocation(1413)", "Delete InfixExpression: !=(1414)", "Delete SimpleName: matchedTail(1415)", "Delete BooleanLiteral: false(1416)", "Delete Assignment: =(1417)", "Delete ExpressionStatement(1418)", "Delete BreakStatement(1419)", "Delete Block(1420)", "Delete IfStatement(1421)", "Delete Block(1422)", "Delete ForStatement(1423)", "Delete SimpleName: matchedTail(1424)", "Delete SimpleName: sb(1425)", "Delete SimpleName: append(1426)", "Delete SimpleName: tail(1427)", "Delete MethodInvocation(1428)", "Delete ExpressionStatement(1429)", "Delete SimpleName: cp(1430)", "Delete SimpleName: consume(1431)", "Delete SimpleName: tail(1432)", "Delete SimpleName: length(1433)", "Delete MethodInvocation(1434)", "Delete MethodInvocation(1435)", "Delete ExpressionStatement(1436)", "Delete Block(1437)", "Delete IfStatement(1438)", "Delete Block(1439)", "Delete IfStatement(1440)", "Delete Block(1441)", "Delete SimpleName: sb(1461)", "Delete SimpleName: append(1462)", "Delete SimpleName: ch(1463)", "Delete MethodInvocation(1464)", "Delete ExpressionStatement(1465)", "Delete SimpleName: cp(1466)", "Delete SimpleName: read(1467)", "Delete MethodInvocation(1468)", "Delete ExpressionStatement(1469)", "Delete SimpleName: isNum(1470)", "Delete SimpleName: parseInt(1471)", "Delete SimpleName: sb(1472)", "Delete MethodInvocation(1473)", "Delete Assignment: =(1474)", "Delete ExpressionStatement(1475)", "Delete Block(1476)", "Delete SimpleName: parseNum(1481)", "Delete SimpleName: sb(1482)", "Delete MethodInvocation(1483)", "Delete ExpressionStatement(1484)", "Delete Block(1485)", "Delete IfStatement(1486)", "Delete SimpleName: isNum(1487)", "Delete SimpleName: parseIdent(1488)", "Delete SimpleName: sb(1489)", "Delete MethodInvocation(1490)", "Delete PrefixExpression: !(1491)", "Delete CharacterLiteral: '%'(1492)", "Delete SimpleName: cp(1493)", "Delete SimpleName: lookahead(1494)", "Delete MethodInvocation(1495)", "Delete InfixExpression: ==(1496)", "Delete InfixExpression: &&(1497)", "Delete SimpleName: sb(1498)", "Delete SimpleName: append(1499)", "Delete CharacterLiteral: '%'(1500)", "Delete MethodInvocation(1501)", "Delete ExpressionStatement(1502)", "Delete SimpleName: cp(1503)", "Delete SimpleName: read(1504)", "Delete MethodInvocation(1505)", "Delete ExpressionStatement(1506)", "Delete Block(1507)", "Delete IfStatement(1508)", "Delete Block(1513)", "Delete IfStatement(1519)", "Delete Block(1520)", "Delete SimpleName: parseIdent(1521)", "Delete SimpleName: sb(1522)", "Delete MethodInvocation(1523)", "Delete SimpleName: sb(1524)", "Delete SimpleName: length(1525)", "Delete MethodInvocation(1526)", "Delete NumberLiteral: 1(1527)", "Delete InfixExpression: ==(1528)", "Delete InfixExpression: &&(1532)", "Delete CharacterLiteral: '+'(1533)", "Delete SimpleName: cp(1534)", "Delete SimpleName: lookahead(1535)", "Delete MethodInvocation(1536)", "Delete InfixExpression: ==(1537)", "Delete InfixExpression: &&(1538)", "Delete SimpleName: sb(1543)", "Delete SimpleName: append(1544)", "Delete CharacterLiteral: '+'(1545)", "Delete MethodInvocation(1546)", "Delete ExpressionStatement(1547)", "Delete SimpleName: cp(1548)", "Delete SimpleName: read(1549)", "Delete MethodInvocation(1550)", "Delete ExpressionStatement(1551)", "Delete SimpleName: parseRange(1552)", "Delete SimpleName: sb(1553)", "Delete MethodInvocation(1554)", "Delete ExpressionStatement(1555)", "Delete Block(1556)", "Delete CharacterLiteral: '('(1557)", "Delete SimpleName: cp(1558)", "Delete SimpleName: lookahead(1559)", "Delete MethodInvocation(1560)", "Delete InfixExpression: ==(1561)", "Delete SimpleName: sb(1562)", "Delete SimpleName: append(1563)", "Delete CharacterLiteral: '('(1564)", "Delete MethodInvocation(1565)", "Delete ExpressionStatement(1566)", "Delete SimpleName: cp(1567)", "Delete SimpleName: read(1568)", "Delete MethodInvocation(1569)", "Delete ExpressionStatement(1570)", "Delete SimpleName: URL_RE(1571)", "Delete SimpleName: matcher(1572)", "Delete SimpleName: sb(1573)", "Delete MethodInvocation(1574)", "Delete SimpleName: matches(1575)", "Delete MethodInvocation(1576)", "Delete SimpleName: parseWhitespace(1577)", "Delete SimpleName: sb(1578)", "Delete MethodInvocation(1579)", "Delete ExpressionStatement(1580)", "Delete SimpleName: parseString(1581)", "Delete SimpleName: sb(1582)", "Delete MethodInvocation(1583)", "Delete SimpleName: parseUri(1584)", "Delete SimpleName: sb(1585)", "Delete MethodInvocation(1586)", "Delete InfixExpression: ||(1587)", "Delete ParenthesizedExpression(1588)", "Delete PrefixExpression: !(1589)", "Delete QualifiedName: MessageType.EXPECTED_TOKEN(1594)", "Delete SimpleName: breaks(1595)", "Delete SimpleName: toFilePosition(1596)", "Delete SimpleName: cp(1597)", "Delete SimpleName: getCharInFile(1598)", "Delete SimpleName: cp(1599)", "Delete SimpleName: getOffset(1600)", "Delete MethodInvocation(1601)", "Delete MethodInvocation(1602)", "Delete MethodInvocation(1603)", "Delete QualifiedName: MessagePart.Factory(1608)", "Delete SimpleName: valueOf(1609)", "Delete SimpleName: ch(1610)", "Delete MethodInvocation(1611)", "Delete ClassInstanceCreation(1612)", "Delete ClassInstanceCreation(1613)", "Delete ThrowStatement(1614)", "Delete Block(1615)", "Delete IfStatement(1616)", "Delete SimpleName: parseWhitespace(1617)", "Delete SimpleName: sb(1618)", "Delete MethodInvocation(1619)", "Delete ExpressionStatement(1620)", "Delete PrimitiveType: int(1621)", "Delete SimpleName: ch2(1622)", "Delete SimpleName: cp(1623)", "Delete SimpleName: read(1624)", "Delete MethodInvocation(1625)", "Delete VariableDeclarationFragment(1626)", "Delete VariableDeclarationStatement(1627)", "Delete CharacterLiteral: ')'(1628)", "Delete SimpleName: ch2(1629)", "Delete InfixExpression: !=(1630)", "Delete QualifiedName: MessageType.EXPECTED_TOKEN(1635)", "Delete SimpleName: breaks(1636)", "Delete SimpleName: toFilePosition(1637)", "Delete SimpleName: cp(1638)", "Delete SimpleName: getCharInFile(1639)", "Delete SimpleName: cp(1640)", "Delete SimpleName: getOffset(1641)", "Delete MethodInvocation(1642)", "Delete MethodInvocation(1643)", "Delete MethodInvocation(1644)", "Delete QualifiedName: MessagePart.Factory(1649)", "Delete SimpleName: valueOf(1650)", "Delete SimpleName: ch2(1651)", "Delete MethodInvocation(1652)", "Delete ClassInstanceCreation(1653)", "Delete ClassInstanceCreation(1654)", "Delete ThrowStatement(1655)", "Delete Block(1656)", "Delete IfStatement(1657)", "Delete SimpleName: sb(1658)", "Delete SimpleName: append(1659)", "Delete CharacterLiteral: ')'(1660)", "Delete MethodInvocation(1661)", "Delete ExpressionStatement(1662)", "Delete Block(1667)", "Delete IfStatement(1673)", "Delete Block(1674)", "Delete IfStatement(1680)", "Delete IfStatement(1681)", "Delete Block(1682)", "Delete IfStatement(1883)", "Delete IfStatement(1884)", "Delete IfStatement(1885)", "Delete IfStatement(1886)", "Delete IfStatement(1887)", "Delete IfStatement(1888)", "Delete IfStatement(1889)", "Delete IfStatement(1890)", "Delete IfStatement(1891)", "Delete IfStatement(1892)", "Delete SimpleName: epos(1893)", "Delete SimpleName: cp(1894)", "Delete SimpleName: getCharInFile(1895)", "Delete SimpleName: cp(1896)", "Delete SimpleName: getOffset(1897)", "Delete MethodInvocation(1898)", "Delete MethodInvocation(1899)", "Delete Assignment: =(1900)", "Delete ExpressionStatement(1901)", "Delete SimpleName: sb(1902)", "Delete SimpleName: length(1903)", "Delete MethodInvocation(1904)", "Delete NumberLiteral: 0(1905)", "Delete InfixExpression: >(1906)", "Delete StringLiteral: \"ch=\"(1907)", "Delete SimpleName: ch(1908)", "Delete StringLiteral: \" : \"(1909)", "Delete SimpleName: chi(1910)", "Delete StringLiteral: \" : \"(1911)", "Delete SimpleName: spos(1912)", "Delete StringLiteral: \" : \"(1913)", "Delete SimpleName: type(1914)", "Delete InfixExpression: +(1915)", "Delete AssertStatement(1916)", "Delete SimpleName: pending(1917)", "Delete SimpleName: Token(1918)", "Delete SimpleName: instance(1919)", "Delete SimpleName: sb(1920)", "Delete SimpleName: toString(1921)", "Delete MethodInvocation(1922)", "Delete SimpleName: type(1923)", "Delete SimpleName: breaks(1924)", "Delete SimpleName: toFilePosition(1925)", "Delete SimpleName: spos(1926)", "Delete SimpleName: epos(1927)", "Delete MethodInvocation(1928)", "Delete MethodInvocation(1929)", "Delete Assignment: =(1930)", "Delete ExpressionStatement(1931)", "Delete Block(1932)", "Delete MethodDeclaration(1933)", "Delete Modifier: private(1934)", "Delete PrimitiveType: boolean(1935)", "Delete SimpleName: parseString(1936)", "Delete SimpleName: StringBuilder(1937)", "Delete SimpleType: StringBuilder(1938)", "Delete SimpleName: sb(1939)", "Delete SingleVariableDeclaration(1940)", "Delete SimpleName: cp(1943)", "Delete SimpleName: isEmpty(1944)", "Delete MethodInvocation(1945)", "Delete BooleanLiteral: false(1946)", "Delete ReturnStatement(1947)", "Delete Block(1948)", "Delete IfStatement(1949)", "Delete SimpleName: buffer(1967)", "Delete VariableDeclarationFragment(1971)", "Delete VariableDeclarationStatement(1972)", "Delete PrimitiveType: char(1973)", "Delete SimpleName: ch(1974)", "Delete SimpleName: buffer(1975)", "Delete SimpleName: start(1976)", "Delete ArrayAccess(1977)", "Delete VariableDeclarationFragment(1978)", "Delete VariableDeclarationStatement(1979)", "Delete SimpleName: sb(1996)", "Delete SimpleName: append(1997)", "Delete SimpleName: ch(1998)", "Delete MethodInvocation(1999)", "Delete ExpressionStatement(2000)", "Delete SimpleName: cp(2001)", "Delete SimpleName: consume(2002)", "Delete NumberLiteral: 1(2003)", "Delete MethodInvocation(2004)", "Delete ExpressionStatement(2005)", "Delete PrimitiveType: int(2006)", "Delete SimpleName: offset(2007)", "Delete VariableDeclarationFragment(2008)", "Delete VariableDeclarationExpression(2009)", "Delete SimpleName: offset(2010)", "Delete SimpleName: cp(2011)", "Delete SimpleName: getOffset(2012)", "Delete MethodInvocation(2013)", "Delete Assignment: =(2014)", "Delete ParenthesizedExpression(2015)", "Delete SimpleName: limit(2016)", "Delete InfixExpression: <(2017)", "Delete SimpleName: ch(2018)", "Delete SimpleName: buffer(2019)", "Delete SimpleName: offset(2020)", "Delete ArrayAccess(2021)", "Delete Assignment: =(2022)", "Delete ExpressionStatement(2023)", "Delete SimpleName: parseOneStringChar(2024)", "Delete SimpleName: sb(2025)", "Delete MethodInvocation(2026)", "Delete PrefixExpression: !(2027)", "Delete SimpleName: sb(2031)", "Delete SimpleName: append(2032)", "Delete SimpleName: ch(2033)", "Delete MethodInvocation(2034)", "Delete ExpressionStatement(2035)", "Delete SimpleName: cp(2036)", "Delete SimpleName: consume(2037)", "Delete NumberLiteral: 1(2038)", "Delete MethodInvocation(2039)", "Delete ExpressionStatement(2040)", "Delete BooleanLiteral: true(2041)", "Delete ReturnStatement(2042)", "Delete Block(2043)", "Delete SimpleName: ch(2044)", "Delete CharacterLiteral: '\\''(2045)", "Delete InfixExpression: ==(2046)", "Delete SimpleName: ch(2047)", "Delete CharacterLiteral: '\"'(2048)", "Delete InfixExpression: ==(2049)", "Delete InfixExpression: ||(2050)", "Delete SimpleName: sb(2051)", "Delete SimpleName: append(2052)", "Delete SimpleName: ch(2053)", "Delete MethodInvocation(2054)", "Delete ExpressionStatement(2055)", "Delete SimpleName: cp(2056)", "Delete SimpleName: consume(2057)", "Delete NumberLiteral: 1(2058)", "Delete MethodInvocation(2059)", "Delete ExpressionStatement(2060)", "Delete Block(2061)", "Delete QualifiedName: MessageType.MALFORMED_STRING(2066)", "Delete SimpleName: cp(2067)", "Delete SimpleName: getCurrentPosition(2068)", "Delete MethodInvocation(2069)", "Delete QualifiedName: MessagePart.Factory(2070)", "Delete SimpleName: valueOf(2071)", "Delete SimpleName: String(2072)", "Delete SimpleName: valueOf(2073)", "Delete SimpleName: ch(2074)", "Delete MethodInvocation(2075)", "Delete MethodInvocation(2076)", "Delete ClassInstanceCreation(2077)", "Delete ClassInstanceCreation(2078)", "Delete ThrowStatement(2079)", "Delete Block(2080)", "Delete IfStatement(2081)", "Delete IfStatement(2082)", "Delete Block(2083)", "Delete IfStatement(2084)", "Delete Block(2085)", "Delete ForStatement(2086)", "Delete QualifiedName: MessageType.UNTERMINATED_STRING_TOKEN(2091)", "Delete SimpleName: cp(2092)", "Delete SimpleName: getSourceBreaks(2093)", "Delete SimpleName: start(2094)", "Delete MethodInvocation(2095)", "Delete SimpleName: toFilePosition(2096)", "Delete SimpleName: cp(2097)", "Delete SimpleName: getCharInFile(2098)", "Delete SimpleName: start(2099)", "Delete MethodInvocation(2100)", "Delete SimpleName: cp(2101)", "Delete SimpleName: getCharInFile(2102)", "Delete SimpleName: limit(2103)", "Delete MethodInvocation(2104)", "Delete MethodInvocation(2105)", "Delete ClassInstanceCreation(2106)", "Delete ClassInstanceCreation(2107)", "Delete ThrowStatement(2108)", "Delete Block(2109)", "Delete MethodDeclaration(2110)", "Delete Modifier: private(2111)", "Delete PrimitiveType: boolean(2112)", "Delete SimpleName: parseOneStringChar(2113)", "Delete SimpleName: StringBuilder(2114)", "Delete SimpleType: StringBuilder(2115)", "Delete SimpleName: sb(2116)", "Delete SingleVariableDeclaration(2117)", "Delete SimpleName: cp(2120)", "Delete SimpleName: isEmpty(2121)", "Delete MethodInvocation(2122)", "Delete SimpleName: ParseException(2123)", "Delete SimpleType: ParseException(2124)", "Delete SimpleName: Message(2125)", "Delete SimpleType: Message(2126)", "Delete QualifiedName: MessageType.UNTERMINATED_STRING_TOKEN(2127)", "Delete SimpleName: cp(2128)", "Delete SimpleName: getCurrentPosition(2129)", "Delete MethodInvocation(2130)", "Delete ClassInstanceCreation(2131)", "Delete ClassInstanceCreation(2132)", "Delete ThrowStatement(2133)", "Delete Block(2134)", "Delete IfStatement(2135)", "Delete PrimitiveType: char(2136)", "Delete SimpleName: ch(2137)", "Delete PrimitiveType: char(2138)", "Delete SimpleName: cp(2139)", "Delete SimpleName: lookahead(2140)", "Delete MethodInvocation(2141)", "Delete CastExpression(2142)", "Delete VariableDeclarationFragment(2143)", "Delete VariableDeclarationStatement(2144)", "Delete SimpleName: ch(2145)", "Delete CharacterLiteral: '\\n'(2146)", "Delete SwitchCase(2147)", "Delete CharacterLiteral: '\\\"'(2152)", "Delete SwitchCase(2153)", "Delete CharacterLiteral: '\\''(2154)", "Delete SwitchCase(2155)", "Delete CharacterLiteral: '\\\\'(2158)", "Delete SwitchCase(2159)", "Delete SimpleName: parseEscapeOrNewline(2160)", "Delete SimpleName: sb(2161)", "Delete MethodInvocation(2162)", "Delete ReturnStatement(2163)", "Delete SwitchStatement(2164)", "Delete SimpleName: cp(2165)", "Delete SimpleName: read(2166)", "Delete MethodInvocation(2167)", "Delete ExpressionStatement(2168)", "Delete SimpleName: sb(2169)", "Delete SimpleName: append(2170)", "Delete SimpleName: ch(2171)", "Delete MethodInvocation(2172)", "Delete ExpressionStatement(2173)", "Delete Block(2176)", "Delete MethodDeclaration(2177)", "Delete Modifier: private(2178)", "Delete PrimitiveType: boolean(2179)", "Delete SimpleName: parseUri(2180)", "Delete SimpleName: StringBuilder(2181)", "Delete SimpleType: StringBuilder(2182)", "Delete SimpleName: sb(2183)", "Delete SingleVariableDeclaration(2184)", "Delete SimpleName: ParseException(2185)", "Delete SimpleType: ParseException(2186)", "Delete PrimitiveType: int(2187)", "Delete SimpleName: chi(2188)", "Delete VariableDeclarationFragment(2189)", "Delete VariableDeclarationExpression(2190)", "Delete SimpleName: chi(2191)", "Delete SimpleName: cp(2192)", "Delete SimpleName: lookahead(2193)", "Delete MethodInvocation(2194)", "Delete Assignment: =(2195)", "Delete ParenthesizedExpression(2196)", "Delete NumberLiteral: 0(2197)", "Delete InfixExpression: >=(2198)", "Delete SimpleName: isUriChar(2199)", "Delete PrimitiveType: char(2200)", "Delete SimpleName: chi(2201)", "Delete CastExpression(2202)", "Delete MethodInvocation(2203)", "Delete SimpleName: sb(2204)", "Delete SimpleName: append(2205)", "Delete PrimitiveType: char(2206)", "Delete SimpleName: chi(2207)", "Delete CastExpression(2208)", "Delete MethodInvocation(2209)", "Delete ExpressionStatement(2210)", "Delete SimpleName: cp(2211)", "Delete SimpleName: read(2212)", "Delete MethodInvocation(2213)", "Delete ExpressionStatement(2214)", "Delete Block(2215)", "Delete SimpleName: parseEscape(2216)", "Delete SimpleName: sb(2217)", "Delete MethodInvocation(2218)", "Delete PrefixExpression: !(2219)", "Delete IfStatement(2222)", "Delete IfStatement(2223)", "Delete Block(2224)", "Delete ForStatement(2225)", "Delete BooleanLiteral: true(2226)", "Delete ReturnStatement(2227)", "Delete Block(2228)", "Delete MethodDeclaration(2229)", "Delete Modifier: private(2266)", "Delete PrimitiveType: void(2267)", "Delete SimpleName: parseWhitespace(2268)", "Delete SimpleName: StringBuilder(2269)", "Delete SimpleType: StringBuilder(2270)", "Delete SimpleName: sb(2271)", "Delete SingleVariableDeclaration(2272)", "Delete PrimitiveType: int(2282)", "Delete SimpleName: start(2283)", "Delete SimpleName: cp(2284)", "Delete SimpleName: getOffset(2285)", "Delete MethodInvocation(2286)", "Delete VariableDeclarationFragment(2287)", "Delete VariableDeclarationStatement(2288)", "Delete PrimitiveType: int(2294)", "Delete SimpleName: limit(2295)", "Delete VariableDeclarationFragment(2299)", "Delete VariableDeclarationExpression(2300)", "Delete PrefixExpression: !(2312)", "Delete IfStatement(2315)", "Delete Block(2316)", "Delete ForStatement(2317)", "Delete SimpleName: sb(2318)", "Delete SimpleName: append(2319)", "Delete SimpleName: buf(2320)", "Delete SimpleName: start(2321)", "Delete MethodInvocation(2325)", "Delete ExpressionStatement(2326)", "Delete Block(2332)", "Delete MethodDeclaration(2333)", "Delete Modifier: private(2338)", "Delete PrimitiveType: void(2339)", "Delete SimpleName: parseNum(2340)", "Delete SimpleName: StringBuilder(2341)", "Delete SimpleType: StringBuilder(2342)", "Delete SimpleName: sb(2343)", "Delete SingleVariableDeclaration(2344)", "Delete PrimitiveType: boolean(2347)", "Delete SimpleName: result(2348)", "Delete SimpleName: parseInt(2349)", "Delete SimpleName: sb(2350)", "Delete MethodInvocation(2351)", "Delete VariableDeclarationFragment(2352)", "Delete VariableDeclarationStatement(2353)", "Delete SimpleName: result(2354)", "Delete AssertStatement(2355)", "Delete CharacterLiteral: '.'(2356)", "Delete SimpleName: cp(2357)", "Delete SimpleName: lookahead(2358)", "Delete MethodInvocation(2359)", "Delete InfixExpression: ==(2360)", "Delete SimpleName: sb(2361)", "Delete SimpleName: append(2362)", "Delete CharacterLiteral: '.'(2363)", "Delete MethodInvocation(2364)", "Delete ExpressionStatement(2365)", "Delete SimpleName: cp(2366)", "Delete SimpleName: read(2367)", "Delete MethodInvocation(2368)", "Delete ExpressionStatement(2369)", "Delete PrimitiveType: int(2370)", "Delete SimpleName: chi(2371)", "Delete SimpleName: cp(2372)", "Delete SimpleName: lookahead(2373)", "Delete MethodInvocation(2374)", "Delete VariableDeclarationFragment(2375)", "Delete VariableDeclarationStatement(2376)", "Delete SimpleName: chi(2377)", "Delete CharacterLiteral: '0'(2378)", "Delete InfixExpression: <(2379)", "Delete SimpleName: chi(2380)", "Delete CharacterLiteral: '9'(2381)", "Delete InfixExpression: >(2382)", "Delete InfixExpression: ||(2383)", "Delete QualifiedName: MessageType.MALFORMED_NUMBER(2388)", "Delete SimpleName: cp(2389)", "Delete SimpleName: getCurrentPosition(2390)", "Delete MethodInvocation(2391)", "Delete QualifiedName: MessagePart.Factory(2392)", "Delete SimpleName: valueOf(2393)", "Delete SimpleName: sb(2394)", "Delete SimpleName: toString(2395)", "Delete MethodInvocation(2396)", "Delete MethodInvocation(2397)", "Delete ClassInstanceCreation(2398)", "Delete ClassInstanceCreation(2399)", "Delete ThrowStatement(2400)", "Delete Block(2401)", "Delete IfStatement(2402)", "Delete SimpleName: parseInt(2403)", "Delete SimpleName: sb(2404)", "Delete MethodInvocation(2405)", "Delete ExpressionStatement(2406)", "Delete Block(2407)", "Delete IfStatement(2408)", "Delete Block(2409)", "Delete MethodDeclaration(2410)", "Delete Modifier: private(2411)", "Delete PrimitiveType: boolean(2412)", "Delete SimpleName: parseInt(2413)", "Delete SimpleName: StringBuilder(2414)", "Delete SimpleType: StringBuilder(2415)", "Delete SimpleName: sb(2416)", "Delete SingleVariableDeclaration(2417)", "Delete PrimitiveType: int(2418)", "Delete SimpleName: chi(2419)", "Delete SimpleName: cp(2420)", "Delete SimpleName: lookahead(2421)", "Delete MethodInvocation(2422)", "Delete VariableDeclarationFragment(2423)", "Delete VariableDeclarationStatement(2424)", "Delete SimpleName: chi(2425)", "Delete CharacterLiteral: '0'(2426)", "Delete InfixExpression: >=(2427)", "Delete SimpleName: chi(2428)", "Delete CharacterLiteral: '9'(2429)", "Delete InfixExpression: <=(2430)", "Delete InfixExpression: &&(2431)", "Delete SimpleName: sb(2432)", "Delete SimpleName: append(2433)", "Delete PrimitiveType: char(2434)", "Delete SimpleName: chi(2435)", "Delete CastExpression(2436)", "Delete MethodInvocation(2437)", "Delete ExpressionStatement(2438)", "Delete SimpleName: cp(2439)", "Delete SimpleName: read(2440)", "Delete MethodInvocation(2441)", "Delete ExpressionStatement(2442)", "Delete Block(2443)", "Delete SimpleName: chi(2444)", "Delete SimpleName: cp(2445)", "Delete SimpleName: lookahead(2446)", "Delete MethodInvocation(2447)", "Delete Assignment: =(2448)", "Delete ParenthesizedExpression(2449)", "Delete CharacterLiteral: '0'(2450)", "Delete InfixExpression: >=(2451)", "Delete SimpleName: chi(2452)", "Delete CharacterLiteral: '9'(2453)", "Delete InfixExpression: <=(2454)", "Delete InfixExpression: &&(2455)", "Delete DoStatement(2456)", "Delete BooleanLiteral: true(2457)", "Delete ReturnStatement(2458)", "Delete Block(2459)", "Delete BooleanLiteral: false(2460)", "Delete ReturnStatement(2461)", "Delete Block(2462)", "Delete IfStatement(2463)", "Delete Block(2464)", "Delete MethodDeclaration(2465)", "Delete Modifier: private(2466)", "Delete PrimitiveType: boolean(2467)", "Delete SimpleName: parseIdent(2468)", "Delete SimpleName: StringBuilder(2469)", "Delete SimpleType: StringBuilder(2470)", "Delete SimpleName: sb(2471)", "Delete SingleVariableDeclaration(2472)", "Delete SimpleName: parseNmStart(2475)", "Delete SimpleName: sb(2476)", "Delete MethodInvocation(2477)", "Delete SimpleName: parseNmChar(2478)", "Delete SimpleName: sb(2479)", "Delete MethodInvocation(2480)", "Delete Block(2481)", "Delete WhileStatement(2482)", "Delete BooleanLiteral: true(2483)", "Delete ReturnStatement(2484)", "Delete Block(2485)", "Delete IfStatement(2486)", "Delete BooleanLiteral: false(2487)", "Delete ReturnStatement(2488)", "Delete Block(2489)", "Delete MethodDeclaration(2490)", "Delete Modifier: private(2491)", "Delete PrimitiveType: boolean(2492)", "Delete SimpleName: parseName(2493)", "Delete SimpleName: StringBuilder(2494)", "Delete SimpleType: StringBuilder(2495)", "Delete SimpleName: sb(2496)", "Delete SingleVariableDeclaration(2497)", "Delete SimpleName: parseNmChar(2500)", "Delete SimpleName: sb(2501)", "Delete MethodInvocation(2502)", "Delete SimpleName: parseNmChar(2503)", "Delete SimpleName: sb(2504)", "Delete MethodInvocation(2505)", "Delete Block(2506)", "Delete WhileStatement(2507)", "Delete BooleanLiteral: true(2508)", "Delete ReturnStatement(2509)", "Delete Block(2510)", "Delete IfStatement(2511)", "Delete BooleanLiteral: false(2512)", "Delete ReturnStatement(2513)", "Delete Block(2514)", "Delete MethodDeclaration(2515)", "Delete Modifier: private(2516)", "Delete PrimitiveType: boolean(2517)", "Delete SimpleName: parseNmStart(2518)", "Delete SimpleName: StringBuilder(2519)", "Delete SimpleType: StringBuilder(2520)", "Delete SimpleName: sb(2521)", "Delete SingleVariableDeclaration(2522)", "Delete SimpleName: cp(2525)", "Delete SimpleName: isEmpty(2526)", "Delete MethodInvocation(2527)", "Delete BooleanLiteral: false(2528)", "Delete ReturnStatement(2529)", "Delete Block(2530)", "Delete IfStatement(2531)", "Delete PrimitiveType: char(2532)", "Delete SimpleName: ch(2533)", "Delete SimpleName: cp(2537)", "Delete SimpleName: getOffset(2538)", "Delete MethodInvocation(2539)", "Delete ArrayAccess(2540)", "Delete VariableDeclarationFragment(2541)", "Delete VariableDeclarationStatement(2542)", "Delete SimpleName: sb(2547)", "Delete SimpleName: append(2548)", "Delete SimpleName: ch(2549)", "Delete MethodInvocation(2550)", "Delete ExpressionStatement(2551)", "Delete SimpleName: cp(2552)", "Delete SimpleName: consume(2553)", "Delete NumberLiteral: 1(2554)", "Delete MethodInvocation(2555)", "Delete ExpressionStatement(2556)", "Delete BooleanLiteral: true(2557)", "Delete ReturnStatement(2558)", "Delete Block(2559)", "Delete IfStatement(2560)", "Delete SimpleName: parseEscape(2561)", "Delete SimpleName: sb(2562)", "Delete MethodInvocation(2563)", "Delete ReturnStatement(2564)", "Delete Block(2565)", "Delete MethodDeclaration(2566)", "Delete Modifier: private(2567)", "Delete PrimitiveType: boolean(2568)", "Delete SimpleName: parseEscape(2569)", "Delete SimpleName: StringBuilder(2570)", "Delete SimpleType: StringBuilder(2571)", "Delete SimpleName: sb(2572)", "Delete SingleVariableDeclaration(2573)", "Delete SimpleName: ParseException(2574)", "Delete SimpleType: ParseException(2575)", "Delete SimpleName: cp(2576)", "Delete SimpleName: isEmpty(2577)", "Delete MethodInvocation(2578)", "Delete BooleanLiteral: false(2579)", "Delete ReturnStatement(2580)", "Delete Block(2581)", "Delete IfStatement(2582)", "Delete PrimitiveType: char(2583)", "Delete SimpleName: ch(2584)", "Delete SimpleName: cp(2588)", "Delete SimpleName: getOffset(2589)", "Delete MethodInvocation(2590)", "Delete ArrayAccess(2591)", "Delete VariableDeclarationFragment(2592)", "Delete VariableDeclarationStatement(2593)", "Delete SimpleName: ch(2594)", "Delete CharacterLiteral: '\\\\'(2595)", "Delete InfixExpression: !=(2596)", "Delete BooleanLiteral: false(2597)", "Delete ReturnStatement(2598)", "Delete Block(2599)", "Delete IfStatement(2600)", "Delete SimpleName: sb(2601)", "Delete SimpleName: append(2602)", "Delete SimpleName: ch(2603)", "Delete MethodInvocation(2604)", "Delete ExpressionStatement(2605)", "Delete SimpleName: cp(2606)", "Delete SimpleName: consume(2607)", "Delete NumberLiteral: 1(2608)", "Delete MethodInvocation(2609)", "Delete ExpressionStatement(2610)", "Delete SimpleName: parseEscapeBody(2611)", "Delete SimpleName: sb(2612)", "Delete MethodInvocation(2613)", "Delete ExpressionStatement(2614)", "Delete BooleanLiteral: true(2615)", "Delete ReturnStatement(2616)", "Delete Block(2617)", "Delete MethodDeclaration(2618)", "Delete Modifier: private(2619)", "Delete PrimitiveType: boolean(2620)", "Delete SimpleName: parseEscapeOrNewline(2621)", "Delete SimpleName: StringBuilder(2622)", "Delete SimpleType: StringBuilder(2623)", "Delete SimpleName: sb(2624)", "Delete SingleVariableDeclaration(2625)", "Delete PrimitiveType: int(2628)", "Delete SimpleName: chi(2629)", "Delete SimpleName: cp(2630)", "Delete SimpleName: lookahead(2631)", "Delete MethodInvocation(2632)", "Delete VariableDeclarationFragment(2633)", "Delete VariableDeclarationStatement(2634)", "Delete SimpleName: chi(2635)", "Delete CharacterLiteral: '\\\\'(2636)", "Delete InfixExpression: !=(2637)", "Delete BooleanLiteral: false(2638)", "Delete ReturnStatement(2639)", "Delete Block(2640)", "Delete IfStatement(2641)", "Delete SimpleName: sb(2642)", "Delete SimpleName: append(2643)", "Delete PrimitiveType: char(2644)", "Delete SimpleName: chi(2645)", "Delete CastExpression(2646)", "Delete MethodInvocation(2647)", "Delete ExpressionStatement(2648)", "Delete SimpleName: cp(2649)", "Delete SimpleName: read(2650)", "Delete MethodInvocation(2651)", "Delete ExpressionStatement(2652)", "Delete SimpleName: chi(2653)", "Delete SimpleName: cp(2654)", "Delete SimpleName: lookahead(2655)", "Delete MethodInvocation(2656)", "Delete Assignment: =(2657)", "Delete ExpressionStatement(2658)", "Delete SimpleName: chi(2659)", "Delete CharacterLiteral: '\\f'(2662)", "Delete SwitchCase(2663)", "Delete SimpleName: sb(2664)", "Delete SimpleName: append(2665)", "Delete PrimitiveType: char(2666)", "Delete SimpleName: chi(2667)", "Delete CastExpression(2668)", "Delete MethodInvocation(2669)", "Delete ExpressionStatement(2670)", "Delete SimpleName: cp(2671)", "Delete SimpleName: read(2672)", "Delete MethodInvocation(2673)", "Delete ExpressionStatement(2674)", "Delete BreakStatement(2675)", "Delete CharacterLiteral: '\\r'(2676)", "Delete SwitchCase(2677)", "Delete SimpleName: sb(2678)", "Delete SimpleName: append(2679)", "Delete CharacterLiteral: '\\r'(2680)", "Delete MethodInvocation(2681)", "Delete ExpressionStatement(2682)", "Delete SimpleName: cp(2683)", "Delete SimpleName: read(2684)", "Delete MethodInvocation(2685)", "Delete ExpressionStatement(2686)", "Delete CharacterLiteral: '\\n'(2687)", "Delete SimpleName: cp(2688)", "Delete SimpleName: lookahead(2689)", "Delete MethodInvocation(2690)", "Delete InfixExpression: ==(2691)", "Delete SimpleName: sb(2692)", "Delete SimpleName: append(2693)", "Delete CharacterLiteral: '\\n'(2694)", "Delete MethodInvocation(2695)", "Delete ExpressionStatement(2696)", "Delete SimpleName: cp(2697)", "Delete SimpleName: read(2698)", "Delete MethodInvocation(2699)", "Delete ExpressionStatement(2700)", "Delete Block(2701)", "Delete IfStatement(2702)", "Delete BreakStatement(2703)", "Delete SwitchCase(2704)", "Delete SimpleName: parseEscapeBody(2705)", "Delete SimpleName: sb(2706)", "Delete MethodInvocation(2707)", "Delete ExpressionStatement(2708)", "Delete BreakStatement(2709)", "Delete SwitchStatement(2710)", "Delete BooleanLiteral: true(2711)", "Delete ReturnStatement(2712)", "Delete Block(2713)", "Delete MethodDeclaration(2714)", "Delete Modifier: private(2715)", "Delete PrimitiveType: void(2716)", "Delete SimpleName: parseEscapeBody(2717)", "Delete SimpleName: StringBuilder(2718)", "Delete SimpleType: StringBuilder(2719)", "Delete SimpleName: sb(2720)", "Delete SingleVariableDeclaration(2721)", "Delete PrimitiveType: int(2724)", "Delete SimpleName: chi(2725)", "Delete SimpleName: cp(2726)", "Delete SimpleName: read(2727)", "Delete MethodInvocation(2728)", "Delete VariableDeclarationFragment(2729)", "Delete VariableDeclarationStatement(2730)", "Delete PrimitiveType: char(2755)", "Delete SimpleName: ch(2756)", "Delete PrimitiveType: char(2757)", "Delete SimpleName: chi(2758)", "Delete CastExpression(2759)", "Delete VariableDeclarationFragment(2760)", "Delete VariableDeclarationStatement(2761)", "Delete SimpleName: sb(2766)", "Delete SimpleName: append(2767)", "Delete SimpleName: ch(2768)", "Delete MethodInvocation(2769)", "Delete ExpressionStatement(2770)", "Delete SimpleName: chi(2780)", "Delete SimpleName: cp(2781)", "Delete SimpleName: lookahead(2782)", "Delete MethodInvocation(2783)", "Delete Assignment: =(2784)", "Delete ExpressionStatement(2785)", "Delete SimpleName: chi(2786)", "Delete NumberLiteral: 0(2787)", "Delete InfixExpression: <(2788)", "Delete IfStatement(2791)", "Delete SimpleName: ch(2792)", "Delete PrimitiveType: char(2793)", "Delete SimpleName: chi(2794)", "Delete CastExpression(2795)", "Delete Assignment: =(2796)", "Delete ExpressionStatement(2797)", "Delete SimpleName: sb(2806)", "Delete SimpleName: append(2807)", "Delete SimpleName: ch(2808)", "Delete MethodInvocation(2809)", "Delete ExpressionStatement(2810)", "Delete SimpleName: cp(2811)", "Delete SimpleName: read(2812)", "Delete MethodInvocation(2813)", "Delete ExpressionStatement(2814)", "Delete Block(2815)", "Delete ForStatement(2816)", "Delete SimpleName: chi(2817)", "Delete NumberLiteral: 0(2818)", "Delete InfixExpression: >=(2819)", "Delete SimpleName: CssLexer(2820)", "Delete SimpleName: isSpaceChar(2821)", "Delete SimpleName: ch(2822)", "Delete PrimitiveType: char(2823)", "Delete SimpleName: chi(2824)", "Delete CastExpression(2825)", "Delete Assignment: =(2826)", "Delete MethodInvocation(2827)", "Delete InfixExpression: &&(2828)", "Delete SimpleName: sb(2829)", "Delete SimpleName: append(2830)", "Delete SimpleName: ch(2831)", "Delete MethodInvocation(2832)", "Delete ExpressionStatement(2833)", "Delete SimpleName: cp(2834)", "Delete SimpleName: read(2835)", "Delete MethodInvocation(2836)", "Delete ExpressionStatement(2837)", "Delete CharacterLiteral: '\\n'(2841)", "Delete SimpleName: cp(2842)", "Delete SimpleName: lookahead(2843)", "Delete MethodInvocation(2844)", "Delete InfixExpression: ==(2845)", "Delete InfixExpression: &&(2846)", "Delete SimpleName: sb(2847)", "Delete SimpleName: append(2848)", "Delete SimpleName: ch(2849)", "Delete MethodInvocation(2850)", "Delete ExpressionStatement(2851)", "Delete SimpleName: cp(2852)", "Delete SimpleName: read(2853)", "Delete MethodInvocation(2854)", "Delete ExpressionStatement(2855)", "Delete Block(2856)", "Delete IfStatement(2857)", "Delete Block(2858)", "Delete IfStatement(2859)", "Delete Block(2860)", "Delete SimpleName: ch(2861)", "Delete CharacterLiteral: '\\r'(2862)", "Delete InfixExpression: !=(2863)", "Delete SimpleName: ch(2864)", "Delete CharacterLiteral: '\\n'(2865)", "Delete InfixExpression: !=(2866)", "Delete InfixExpression: &&(2867)", "Delete SimpleName: ch(2868)", "Delete CharacterLiteral: '\\f'(2869)", "Delete InfixExpression: !=(2870)", "Delete InfixExpression: &&(2871)", "Delete SimpleName: sb(2872)", "Delete SimpleName: append(2873)", "Delete SimpleName: ch(2874)", "Delete MethodInvocation(2875)", "Delete ExpressionStatement(2876)", "Delete Block(2877)", "Delete QualifiedName: MessageType.UNRECOGNIZED_ESCAPE(2882)", "Delete SimpleName: cp(2883)", "Delete SimpleName: getCurrentPosition(2884)", "Delete MethodInvocation(2885)", "Delete ClassInstanceCreation(2893)", "Delete ClassInstanceCreation(2894)", "Delete ThrowStatement(2895)", "Delete Block(2896)", "Delete IfStatement(2897)", "Delete IfStatement(2898)", "Delete Block(2899)", "Delete MethodDeclaration(2900)", "Delete Modifier: private(2901)", "Delete PrimitiveType: boolean(2902)", "Delete SimpleName: parseNmChar(2903)", "Delete SimpleName: StringBuilder(2904)", "Delete SimpleType: StringBuilder(2905)", "Delete SimpleName: sb(2906)", "Delete SingleVariableDeclaration(2907)", "Delete SimpleName: ParseException(2908)", "Delete SimpleType: ParseException(2909)", "Delete SimpleName: parseNmStart(2910)", "Delete SimpleName: sb(2911)", "Delete MethodInvocation(2912)", "Delete BooleanLiteral: true(2913)", "Delete ReturnStatement(2914)", "Delete Block(2915)", "Delete IfStatement(2916)", "Delete PrimitiveType: int(2917)", "Delete SimpleName: chi(2918)", "Delete SimpleName: cp(2919)", "Delete SimpleName: lookahead(2920)", "Delete MethodInvocation(2921)", "Delete VariableDeclarationFragment(2922)", "Delete VariableDeclarationStatement(2923)", "Delete SimpleName: chi(2924)", "Delete CharacterLiteral: '0'(2925)", "Delete InfixExpression: >=(2926)", "Delete SimpleName: chi(2927)", "Delete CharacterLiteral: '9'(2928)", "Delete InfixExpression: <=(2929)", "Delete InfixExpression: &&(2930)", "Delete ParenthesizedExpression(2931)", "Delete SimpleName: chi(2932)", "Delete CharacterLiteral: '-'(2933)", "Delete InfixExpression: ==(2934)", "Delete InfixExpression: ||(2935)", "Delete SimpleName: sb(2936)", "Delete SimpleName: append(2937)", "Delete PrimitiveType: char(2938)", "Delete SimpleName: chi(2939)", "Delete CastExpression(2940)", "Delete MethodInvocation(2941)", "Delete ExpressionStatement(2942)", "Delete SimpleName: cp(2943)", "Delete SimpleName: read(2944)", "Delete MethodInvocation(2945)", "Delete ExpressionStatement(2946)", "Delete BooleanLiteral: true(2947)", "Delete ReturnStatement(2948)", "Delete Block(2949)", "Delete IfStatement(2950)", "Delete BooleanLiteral: false(2951)", "Delete ReturnStatement(2952)", "Delete Block(2953)", "Delete MethodDeclaration(2954)", "Delete Modifier: private(2955)", "Delete PrimitiveType: void(2956)", "Delete SimpleName: parseRange(2957)", "Delete SimpleName: StringBuilder(2958)", "Delete SimpleType: StringBuilder(2959)", "Delete SimpleName: sb(2960)", "Delete SingleVariableDeclaration(2961)", "Delete PrimitiveType: int(2964)", "Delete SimpleName: chi(2965)", "Delete VariableDeclarationFragment(2966)", "Delete VariableDeclarationStatement(2967)", "Delete PrimitiveType: boolean(2973)", "Delete SimpleName: isRange(2974)", "Delete CharacterLiteral: '?'(2975)", "Delete SimpleName: cp(2976)", "Delete SimpleName: lookahead(2977)", "Delete MethodInvocation(2978)", "Delete InfixExpression: ==(2979)", "Delete VariableDeclarationFragment(2980)", "Delete VariableDeclarationStatement(2981)", "Delete SimpleName: isRange(2982)", "Delete CharacterLiteral: '?'(2983)", "Delete SimpleName: cp(2984)", "Delete SimpleName: lookahead(2985)", "Delete MethodInvocation(2986)", "Delete InfixExpression: ==(2987)", "Delete InfixExpression: &&(2992)", "Delete SimpleName: sb(2993)", "Delete SimpleName: append(2994)", "Delete CharacterLiteral: '?'(2995)", "Delete MethodInvocation(2996)", "Delete ExpressionStatement(2997)", "Delete SimpleName: cp(2998)", "Delete SimpleName: read(2999)", "Delete MethodInvocation(3000)", "Delete ExpressionStatement(3001)", "Delete Block(3002)", "Delete WhileStatement(3003)", "Delete Block(3004)", "Delete IfStatement(3005)", "Delete SimpleName: chi(3006)", "Delete SimpleName: cp(3007)", "Delete SimpleName: lookahead(3008)", "Delete MethodInvocation(3009)", "Delete Assignment: =(3010)", "Delete ParenthesizedExpression(3011)", "Delete NumberLiteral: 0(3012)", "Delete InfixExpression: >=(3013)", "Delete SimpleName: CssLexer(3014)", "Delete SimpleName: isHexChar(3015)", "Delete PrimitiveType: char(3016)", "Delete SimpleName: chi(3017)", "Delete CastExpression(3018)", "Delete MethodInvocation(3019)", "Delete InfixExpression: &&(3020)", "Delete InfixExpression: &&(3025)", "Delete SimpleName: sb(3026)", "Delete SimpleName: append(3027)", "Delete PrimitiveType: char(3028)", "Delete SimpleName: chi(3029)", "Delete CastExpression(3030)", "Delete MethodInvocation(3031)", "Delete ExpressionStatement(3032)", "Delete SimpleName: cp(3033)", "Delete SimpleName: read(3034)", "Delete MethodInvocation(3035)", "Delete ExpressionStatement(3036)", "Delete Block(3037)", "Delete WhileStatement(3038)", "Delete SimpleName: chi(3041)", "Delete SimpleName: cp(3042)", "Delete SimpleName: read(3043)", "Delete MethodInvocation(3044)", "Delete Assignment: =(3045)", "Delete ExpressionStatement(3046)", "Delete CharacterLiteral: '-'(3047)", "Delete SimpleName: chi(3048)", "Delete InfixExpression: !=(3049)", "Delete QualifiedName: MessageType.EXPECTED_TOKEN(3054)", "Delete SimpleName: cp(3055)", "Delete SimpleName: getCurrentPosition(3056)", "Delete MethodInvocation(3057)", "Delete SimpleName: chi(3062)", "Delete NumberLiteral: 0(3063)", "Delete InfixExpression: <(3064)", "Delete QualifiedName: MessagePart.Factory(3065)", "Delete SimpleName: valueOf(3066)", "Delete PrimitiveType: char(3067)", "Delete SimpleName: chi(3068)", "Delete CastExpression(3069)", "Delete MethodInvocation(3070)", "Delete QualifiedName: MessagePart.Factory(3071)", "Delete SimpleName: valueOf(3072)", "Delete StringLiteral: \"<end-of-input>\"(3073)", "Delete MethodInvocation(3074)", "Delete ConditionalExpression(3075)", "Delete ClassInstanceCreation(3076)", "Delete ClassInstanceCreation(3077)", "Delete ThrowStatement(3078)", "Delete Block(3079)", "Delete IfStatement(3080)", "Delete SimpleName: sb(3081)", "Delete SimpleName: append(3082)", "Delete CharacterLiteral: '-'(3083)", "Delete MethodInvocation(3084)", "Delete ExpressionStatement(3085)", "Delete CharacterLiteral: '?'(3090)", "Delete SimpleName: cp(3091)", "Delete SimpleName: lookahead(3092)", "Delete MethodInvocation(3093)", "Delete InfixExpression: ==(3094)", "Delete InfixExpression: &&(3099)", "Delete SimpleName: sb(3100)", "Delete SimpleName: append(3101)", "Delete CharacterLiteral: '?'(3102)", "Delete MethodInvocation(3103)", "Delete ExpressionStatement(3104)", "Delete SimpleName: cp(3105)", "Delete SimpleName: read(3106)", "Delete MethodInvocation(3107)", "Delete ExpressionStatement(3108)", "Delete Block(3109)", "Delete WhileStatement(3110)", "Delete SimpleName: chi(3111)", "Delete SimpleName: cp(3112)", "Delete SimpleName: lookahead(3113)", "Delete MethodInvocation(3114)", "Delete Assignment: =(3115)", "Delete ParenthesizedExpression(3116)", "Delete NumberLiteral: 0(3117)", "Delete InfixExpression: >=(3118)", "Delete SimpleName: CssLexer(3119)", "Delete SimpleName: isHexChar(3120)", "Delete PrimitiveType: char(3121)", "Delete SimpleName: chi(3122)", "Delete CastExpression(3123)", "Delete MethodInvocation(3124)", "Delete InfixExpression: &&(3125)", "Delete InfixExpression: &&(3130)", "Delete SimpleName: sb(3131)", "Delete SimpleName: append(3132)", "Delete PrimitiveType: char(3133)", "Delete SimpleName: chi(3134)", "Delete CastExpression(3135)", "Delete MethodInvocation(3136)", "Delete ExpressionStatement(3137)", "Delete SimpleName: cp(3138)", "Delete SimpleName: read(3139)", "Delete MethodInvocation(3140)", "Delete ExpressionStatement(3141)", "Delete Block(3142)", "Delete WhileStatement(3143)", "Delete Block(3144)", "Delete IfStatement(3145)", "Delete Block(3146)", "Delete MethodDeclaration(3147)", "Delete TypeDeclaration: class(3165)"]}}, {"BuildServiceImplementation_cluster": {"actions": [{"root": "UPDATE from com.google.caja.ancillary.opt.Fact to com.google.caja.ancillary.opt.JsOptimizer", "operations": ["UPD QualifiedName: com.google.caja.ancillary.opt.Fact from com.google.caja.ancillary.opt.Fact to com.google.caja.ancillary.opt.JsOptimizer"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "INS SimpleName: loadEnvJsonFile to MethodDeclaration at 3", "operations": ["INS SimpleName: loadEnvJsonFile to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS Block to MethodDeclaration at 10", "operations": ["INS Block to MethodDeclaration at 10"]}, {"root": "UPDATE from SimpleMessageQueue to JsOptimizer", "operations": ["UPD SimpleType: SimpleMessageQueue from SimpleMessageQueue to JsOptimizer", "UPD SimpleName: ParseException from ParseException to JsOptimizer", "UPD SimpleName: SimpleMessageQueue from SimpleMessageQueue to JsOptimizer", "UPD SimpleType: SimpleMessageQueue from SimpleMessageQueue to JsOptimizer", "UPD SimpleName: SimpleMessageQueue from SimpleMessageQueue to JsOptimizer", "UPD SimpleType: ParseException from ParseException to JsOptimizer"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: ParseException to SingleVariableDeclaration at 0", "MOV SimpleName: ex to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from ex to op", "operations": ["UPD SimpleName: ex from ex to op", "UPD SimpleName: ex from ex to op"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0", "MOV TryStatement to Block at 3", "MOV TryStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 4", "MOV EnhancedForStatement to Block at 2"]}, {"root": "UPDATE from toMessageQueue to setEnvJson", "operations": ["UPD SimpleName: toMessageQueue from toMessageQueue to setEnvJson"]}, {"root": "UPDATE from mq to envJson", "operations": ["UPD SimpleName: mq from mq to envJson"]}, {"root": "UPDATE from optMq to optimizer", "operations": ["UPD SimpleName: optMq from optMq to optimizer", "UPD SimpleName: block from block to optimizer"]}, {"root": "UPDATE from block to outputJs", "operations": ["UPD SimpleName: block from block to outputJs"]}, {"root": "INS SimpleName: mq to ClassInstanceCreation at 1", "operations": ["INS SimpleName: mq to ClassInstanceCreation at 1"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from appendChild to addInput", "operations": ["UPD SimpleName: appendChild from appendChild to addInput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.ancillary.opt.LocalVarRenamer", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.ancillary.opt.ParseTreeKB", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Block"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.js.Literal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.js.StringLiteral", "DEL ImportDeclaration"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: optimizer", "DEL Assignment: ="]}, {"root": "DEL SimpleName: block", "operations": ["DEL SimpleName: block"]}, {"root": "DEL SimpleName: optMq", "operations": ["DEL SimpleName: optMq"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: block", "DEL SimpleName: block", "DEL SimpleType: LocalVarRenamer", "DEL InfixExpression: &&", "DEL SimpleName: optMq", "DEL SimpleName: get", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: block", "DEL ExpressionStatement", "DEL SimpleType: SimpleMessageQueue", "DEL SimpleType: SimpleMessageQueue", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: LocalVarRenamer", "DEL SimpleName: passed", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: optimize", "DEL SimpleName: mq", "DEL SimpleName: passed", "DEL ClassInstanceCreation", "DEL QualifiedName: Boolean.TRUE", "DEL Assignment: =", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: passed", "DEL ClassInstanceCreation", "DEL StringLiteral: \"rename\"", "DEL SimpleName: SimpleMessageQueue", "DEL IfStatement", "DEL SimpleType: ParseTreeKB", "DEL VariableDeclarationFragment", "DEL SimpleName: outputJs", "DEL SimpleName: ParseTreeKB", "DEL SimpleName: Block", "DEL SimpleName: Block", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleType: Block", "DEL SimpleName: optMq", "DEL SimpleName: equals", "DEL PrefixExpression: !", "DEL Assignment: =", "DEL Block", "DEL SimpleName: optimizer", "DEL SimpleName: hasErrors", "DEL Block", "DEL SimpleName: block", "DEL InfixExpression: !=", "DEL SimpleName: passed", "DEL VariableDeclarationFragment", "DEL SimpleName: options", "DEL NullLiteral", "DEL SimpleType: Block", "DEL ExpressionStatement", "DEL SimpleName: optimizer", "DEL MethodInvocation", "DEL SimpleName: SimpleMessageQueue"]}, {"root": "DEL SimpleType: ParseTreeKB", "operations": ["DEL SimpleType: ParseTreeKB", "DEL SimpleName: ParseTreeKB"]}, {"root": "DEL SimpleName: loadEnvJsonFile", "operations": ["DEL SimpleName: loadEnvJsonFile"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: ParseTreeKB", "DEL SimpleName: kb", "DEL SimpleType: ParseTreeKB", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: kb", "operations": ["DEL SimpleName: kb"]}, {"root": "DEL SimpleName: kb", "operations": ["DEL SimpleName: kb"]}, {"root": "DEL SimpleName: kb", "operations": ["DEL SimpleName: kb"]}, {"root": "DEL Block", "operations": ["DEL InfixExpression: +", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: kb", "DEL SimpleName: children", "DEL SimpleType: StringLiteral", "DEL SimpleType: Literal", "DEL SimpleName: parts", "DEL SimpleName: rawExpr", "DEL InfixExpression: <", "DEL SimpleName: expr", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: parts", "DEL VariableDeclarationFragment", "DEL SimpleName: rawExpr", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: StringLiteral", "DEL Assignment: =", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: addFact", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleType: CharProducer", "DEL SimpleName: kb", "DEL SimpleType: List", "DEL SimpleName: ParseTreeKB", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: sl", "DEL NullLiteral", "DEL StringLiteral: \" \"", "DEL SimpleName: parts", "DEL Block", "DEL SimpleName: is", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: rawExpr", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: getValue", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: envJson", "DEL ExpressionStatement", "DEL SimpleName: kb", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL SimpleName: i", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: List", "DEL SimpleName: sl", "DEL SimpleName: Expression", "DEL SimpleName: Literal", "DEL SimpleName: expr", "DEL SimpleName: n", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: valueCp", "DEL WildcardType: ? extends Expression", "DEL SimpleName: length", "DEL SimpleName: n", "DEL ExpressionStatement", "DEL SimpleName: rawExpr", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: get", "DEL SimpleName: size", "DEL SimpleName: valueCp", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL InfixExpression: -", "DEL SimpleName: i", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleType: Expression", "DEL SimpleName: rawExpr", "DEL MethodInvocation", "DEL SimpleName: getFilePosition", "DEL SimpleType: ParseTreeKB", "DEL SimpleName: Literal", "DEL ClassInstanceCreation", "DEL SimpleName: Fact", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \" \"", "DEL SimpleName: kb", "DEL QualifiedName: CharProducer.Factory", "DEL VariableDeclarationStatement", "DEL Block", "DEL ParameterizedType: List<? extends Expression>", "DEL SimpleType: Expression", "DEL SimpleName: StringLiteral", "DEL SimpleName: parts", "DEL VariableDeclarationFragment", "DEL SimpleName: Expression", "DEL VariableDeclarationStatement", "DEL SimpleType: Literal", "DEL VariableDeclarationExpression", "DEL SimpleName: fromString", "DEL SimpleName: mq", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: substring", "DEL QualifiedName: CharProducer.Factory", "DEL SimpleName: i", "DEL SimpleName: parser", "DEL NumberLiteral: 1", "DEL ForStatement", "DEL MethodInvocation", "DEL SimpleName: CharProducer", "DEL SimpleName: value", "DEL MethodInvocation", "DEL Assignment: +=", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL NumberLiteral: 2", "DEL SimpleName: fromJsString", "DEL SimpleName: sl", "DEL VariableDeclarationStatement", "DEL SimpleType: StringLiteral", "DEL SimpleName: parseExpression", "DEL CastExpression", "DEL SimpleName: get", "DEL TryStatement", "DEL MethodInvocation"]}]}}, {"BuildServiceImplementation_diff": {"operations": ["Update QualifiedName: com.google.caja.ancillary.opt.Fact(2) to com.google.caja.ancillary.opt.JsOptimizer", "Insert PrimitiveType: void(1530) into MethodDeclaration(1651) at 2", "Insert SimpleName: loadEnvJsonFile(1531) into MethodDeclaration(1651) at 3", "Insert SingleVariableDeclaration(1539) into MethodDeclaration(1651) at 5", "Insert Block(1650) into MethodDeclaration(1651) at 7", "Update SimpleType: ParseException(1851) to JsOptimizer", "Move SimpleType: ParseException(1851) into SingleVariableDeclaration(1539) at 0", "Update SimpleName: ex(1852) to op", "Move SimpleName: ex(1852) into SingleVariableDeclaration(1539) at 1", "Move VariableDeclarationStatement(1625) into Block(1650) at 0", "Move TryStatement(1652) into Block(1650) at 1", "Move VariableDeclarationStatement(1657) into Block(1650) at 2", "Move TryStatement(1724) into Block(1650) at 3", "Move ExpressionStatement(1858) into Block(1650) at 4", "Move Block(763) into IfStatement(727) at 2", "Update SimpleName: ParseException(1850) to JsOptimizer", "Move ExpressionStatement(648) into Block(726) at 0", "Move EnhancedForStatement(732) into Block(726) at 2", "Move ExpressionStatement(801) into Block(726) at 4", "Update SimpleName: ex(1854) to op", "Update SimpleName: toMessageQueue(1855) to setEnvJson", "Update SimpleName: mq(1856) to envJson", "Update SimpleType: SimpleMessageQueue(748) to JsOptimizer", "Update SimpleName: SimpleMessageQueue(747) to JsOptimizer", "Update SimpleName: optMq(749) to optimizer", "Update SimpleName: block(755) to outputJs", "Update SimpleType: SimpleMessageQueue(751) to JsOptimizer", "Insert SimpleName: mq(636) into ClassInstanceCreation(637) at 1", "Update SimpleName: SimpleMessageQueue(750) to JsOptimizer", "Move MethodInvocation(671) into ExpressionStatement(656) at 0", "Update SimpleName: block(696) to optimizer", "Update SimpleName: appendChild(697) to addInput", "Delete QualifiedName: com.google.caja.ancillary.opt.LocalVarRenamer(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.caja.ancillary.opt.ParseTreeKB(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.caja.parser.js.Block(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.caja.parser.js.Literal(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.google.caja.parser.js.StringLiteral(44)", "Delete ImportDeclaration(45)", "Delete SimpleName: optimizer(666)", "Delete Assignment: =(672)", "Delete SimpleName: block(758)", "Delete SimpleName: optMq(759)", "Delete SimpleName: Block(637)", "Delete SimpleType: Block(638)", "Delete SimpleName: block(639)", "Delete SimpleName: Block(640)", "Delete SimpleType: Block(641)", "Delete ClassInstanceCreation(642)", "Delete VariableDeclarationFragment(643)", "Delete VariableDeclarationStatement(644)", "Delete SimpleName: ParseTreeKB(649)", "Delete SimpleType: ParseTreeKB(650)", "Delete SimpleName: optimizer(651)", "Delete NullLiteral(652)", "Delete VariableDeclarationFragment(653)", "Delete VariableDeclarationStatement(654)", "Delete SimpleName: passed(733)", "Delete SimpleName: passed(734)", "Delete SimpleName: hasErrors(735)", "Delete SimpleName: mq(736)", "Delete MethodInvocation(737)", "Delete PrefixExpression: !(738)", "Delete InfixExpression: &&(739)", "Delete Assignment: =(740)", "Delete ExpressionStatement(741)", "Delete SimpleName: passed(742)", "Delete SimpleName: optimizer(743)", "Delete NullLiteral(744)", "Delete InfixExpression: !=(745)", "Delete InfixExpression: &&(746)", "Delete IfStatement(764)", "Delete SimpleName: passed(765)", "Delete QualifiedName: Boolean.TRUE(766)", "Delete SimpleName: equals(767)", "Delete SimpleName: options(768)", "Delete SimpleName: get(769)", "Delete StringLiteral: \"rename\"(770)", "Delete MethodInvocation(771)", "Delete MethodInvocation(772)", "Delete InfixExpression: &&(773)", "Delete SimpleName: SimpleMessageQueue(774)", "Delete SimpleType: SimpleMessageQueue(775)", "Delete SimpleName: optMq(776)", "Delete SimpleName: SimpleMessageQueue(777)", "Delete SimpleType: SimpleMessageQueue(778)", "Delete ClassInstanceCreation(779)", "Delete VariableDeclarationFragment(780)", "Delete VariableDeclarationStatement(781)", "Delete SimpleName: block(782)", "Delete SimpleName: LocalVarRenamer(783)", "Delete SimpleType: LocalVarRenamer(784)", "Delete SimpleName: optMq(785)", "Delete ClassInstanceCreation(786)", "Delete SimpleName: optimize(787)", "Delete SimpleName: block(788)", "Delete MethodInvocation(789)", "Delete Assignment: =(790)", "Delete ExpressionStatement(791)", "Delete Block(792)", "Delete IfStatement(793)", "Delete SimpleName: outputJs(794)", "Delete SimpleName: block(795)", "Delete Assignment: =(796)", "Delete ExpressionStatement(797)", "Delete Block(802)", "Delete SimpleName: ParseTreeKB(1606)", "Delete SimpleType: ParseTreeKB(1607)", "Delete SimpleName: loadEnvJsonFile(1608)", "Delete SimpleName: ParseTreeKB(1613)", "Delete SimpleType: ParseTreeKB(1614)", "Delete SimpleName: kb(1615)", "Delete SingleVariableDeclaration(1616)", "Delete SimpleName: kb(1648)", "Delete SimpleName: kb(1699)", "Delete SimpleName: kb(1720)", "Delete SimpleName: kb(1725)", "Delete NullLiteral(1726)", "Delete InfixExpression: ==(1727)", "Delete SimpleName: kb(1728)", "Delete SimpleName: ParseTreeKB(1729)", "Delete SimpleType: ParseTreeKB(1730)", "Delete ClassInstanceCreation(1731)", "Delete Assignment: =(1732)", "Delete ExpressionStatement(1733)", "Delete Block(1734)", "Delete IfStatement(1735)", "Delete SimpleName: List(1736)", "Delete SimpleType: List(1737)", "Delete SimpleName: Expression(1738)", "Delete SimpleType: Expression(1739)", "Delete WildcardType: ? extends Expression(1740)", "Delete ParameterizedType: List<? extends Expression>(1741)", "Delete SimpleName: parts(1742)", "Delete SimpleName: envJson(1743)", "Delete SimpleName: children(1744)", "Delete MethodInvocation(1745)", "Delete VariableDeclarationFragment(1746)", "Delete VariableDeclarationStatement(1747)", "Delete PrimitiveType: int(1748)", "Delete SimpleName: i(1749)", "Delete NumberLiteral: 0(1750)", "Delete VariableDeclarationFragment(1751)", "Delete SimpleName: n(1752)", "Delete SimpleName: parts(1753)", "Delete SimpleName: size(1754)", "Delete MethodInvocation(1755)", "Delete VariableDeclarationFragment(1756)", "Delete VariableDeclarationExpression(1757)", "Delete SimpleName: i(1758)", "Delete SimpleName: n(1759)", "Delete InfixExpression: <(1760)", "Delete SimpleName: i(1761)", "Delete NumberLiteral: 2(1762)", "Delete Assignment: +=(1763)", "Delete SimpleName: StringLiteral(1764)", "Delete SimpleType: StringLiteral(1765)", "Delete SimpleName: sl(1766)", "Delete SimpleName: StringLiteral(1767)", "Delete SimpleType: StringLiteral(1768)", "Delete SimpleName: parts(1769)", "Delete SimpleName: get(1770)", "Delete SimpleName: i(1771)", "Delete MethodInvocation(1772)", "Delete CastExpression(1773)", "Delete VariableDeclarationFragment(1774)", "Delete VariableDeclarationStatement(1775)", "Delete SimpleName: Literal(1776)", "Delete SimpleType: Literal(1777)", "Delete SimpleName: value(1778)", "Delete SimpleName: Literal(1779)", "Delete SimpleType: Literal(1780)", "Delete SimpleName: parts(1781)", "Delete SimpleName: get(1782)", "Delete SimpleName: i(1783)", "Delete NumberLiteral: 1(1784)", "Delete InfixExpression: +(1785)", "Delete MethodInvocation(1786)", "Delete CastExpression(1787)", "Delete VariableDeclarationFragment(1788)", "Delete VariableDeclarationStatement(1789)", "Delete SimpleName: String(1790)", "Delete SimpleType: String(1791)", "Delete SimpleName: rawExpr(1792)", "Delete SimpleName: sl(1793)", "Delete SimpleName: getValue(1794)", "Delete MethodInvocation(1795)", "Delete VariableDeclarationFragment(1796)", "Delete VariableDeclarationStatement(1797)", "Delete SimpleName: rawExpr(1798)", "Delete StringLiteral: \" \"(1799)", "Delete SimpleName: rawExpr(1800)", "Delete SimpleName: substring(1801)", "Delete NumberLiteral: 1(1802)", "Delete SimpleName: rawExpr(1803)", "Delete SimpleName: length(1804)", "Delete MethodInvocation(1805)", "Delete NumberLiteral: 1(1806)", "Delete InfixExpression: -(1807)", "Delete MethodInvocation(1808)", "Delete StringLiteral: \" \"(1809)", "Delete InfixExpression: +(1810)", "Delete Assignment: =(1811)", "Delete ExpressionStatement(1812)", "Delete SimpleName: CharProducer(1813)", "Delete SimpleType: CharProducer(1814)", "Delete SimpleName: valueCp(1815)", "Delete QualifiedName: CharProducer.Factory(1816)", "Delete SimpleName: fromJsString(1817)", "Delete QualifiedName: CharProducer.Factory(1818)", "Delete SimpleName: fromString(1819)", "Delete SimpleName: rawExpr(1820)", "Delete SimpleName: sl(1821)", "Delete SimpleName: getFilePosition(1822)", "Delete MethodInvocation(1823)", "Delete MethodInvocation(1824)", "Delete MethodInvocation(1825)", "Delete VariableDeclarationFragment(1826)", "Delete VariableDeclarationStatement(1827)", "Delete SimpleName: Expression(1828)", "Delete SimpleType: Expression(1829)", "Delete SimpleName: expr(1830)", "Delete SimpleName: parser(1831)", "Delete SimpleName: valueCp(1832)", "Delete SimpleName: mq(1833)", "Delete MethodInvocation(1834)", "Delete SimpleName: parseExpression(1835)", "Delete BooleanLiteral: true(1836)", "Delete MethodInvocation(1837)", "Delete VariableDeclarationFragment(1838)", "Delete VariableDeclarationStatement(1839)", "Delete SimpleName: kb(1840)", "Delete SimpleName: addFact(1841)", "Delete SimpleName: expr(1842)", "Delete SimpleName: Fact(1843)", "Delete SimpleName: is(1844)", "Delete SimpleName: value(1845)", "Delete MethodInvocation(1846)", "Delete MethodInvocation(1847)", "Delete ExpressionStatement(1848)", "Delete Block(1849)", "Delete SingleVariableDeclaration(1853)", "Delete Block(1859)", "Delete CatchClause(1860)", "Delete TryStatement(1861)", "Delete Block(1862)", "Delete ForStatement(1863)", "Delete SimpleName: kb(1864)", "Delete ReturnStatement(1865)", "Delete Block(1866)"]}}, {"PluginCompilerMain_cluster": {"actions": [{"root": "INS ParenthesizedExpression to InfixExpression: || at 2", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 2", "INS SimpleName: cp to MethodInvocation at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS PrefixExpression: ! to InfixExpression: && at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 1"]}, {"root": "INS ArrayAccess to InfixExpression: == at 0", "operations": ["INS SimpleName: getOffset to MethodInvocation at 1", "INS MethodInvocation to ArrayAccess at 1", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: cp to MethodInvocation at 0", "INS ArrayAccess to InfixExpression: == at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: cp to MethodInvocation at 0", "MOV SimpleName: lookahead to MethodInvocation at 1"]}, {"root": "UPDATE from lookahead to getBuffer", "operations": ["UPD SimpleName: lookahead from lookahead to getBuffer"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}]}}, {"PluginCompilerMain_diff": {"operations": ["Insert ParenthesizedExpression(769) into InfixExpression: ||(770) at 2", "Insert InfixExpression: &&(768) into ParenthesizedExpression(769) at 0", "Insert PrefixExpression: !(758) into InfixExpression: &&(768) at 0", "Move InfixExpression: ==(759) into InfixExpression: &&(768) at 1", "Insert MethodInvocation(757) into PrefixExpression: !(758) at 0", "Insert ArrayAccess(765) into InfixExpression: ==(767) at 0", "Insert SimpleName: cp(755) into MethodInvocation(757) at 0", "Insert SimpleName: isEmpty(756) into MethodInvocation(757) at 1", "Insert MethodInvocation(761) into ArrayAccess(765) at 0", "Insert MethodInvocation(764) into ArrayAccess(765) at 1", "Move SimpleName: cp(755) into MethodInvocation(761) at 0", "Update SimpleName: lookahead(756) to getBuffer", "Move SimpleName: lookahead(756) into MethodInvocation(761) at 1", "Insert SimpleName: cp(762) into MethodInvocation(764) at 0", "Insert SimpleName: getOffset(763) into MethodInvocation(764) at 1", "Delete MethodInvocation(757)"]}}, {"JsMinimalPrinter_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: lastToken to Assignment: = at 0", "INS NullLiteral to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0"]}]}}, {"JsMinimalPrinter_diff": {"operations": ["Insert ExpressionStatement(228) into Block(229) at 1", "Insert Assignment: =(227) into ExpressionStatement(228) at 0", "Insert SimpleName: lastToken(225) into Assignment: =(227) at 0", "Insert NullLiteral(226) into Assignment: =(227) at 1"]}}, {"RenderContext_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS TextElement: True iff object ctor keys that are JS identifiers can be rendered without to TagElement at 0", "INS PrimitiveType: boolean to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Javadoc to FieldDeclaration at 0", "INS SimpleName: rawObjKeys to VariableDeclarationFragment at 0", "INS TextElement: quotes. to TagElement at 1", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS TagElement to Javadoc at 0", "INS Modifier: private to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleName: rawObjKeys to MethodDeclaration at 3", "INS SimpleName: rawObjKeys to ReturnStatement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Modifier: final to MethodDeclaration at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS Block to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: b to SingleVariableDeclaration at 1", "INS SimpleName: withRawObjKeys to MethodDeclaration at 2", "INS SimpleName: RenderContext to SimpleType: RenderContext at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: json to ClassInstanceCreation at 3", "INS SimpleType: RenderContext to ClassInstanceCreation at 0", "INS SimpleName: asciiOnly to ClassInstanceCreation at 1", "INS SimpleName: asXml to FieldAccess at 1", "INS SimpleName: RenderContext to SimpleType: RenderContext at 0", "INS SimpleType: RenderContext to MethodDeclaration at 1", "INS FieldAccess to InfixExpression: != at 1", "INS SimpleName: b to InfixExpression: != at 0", "INS SimpleName: b to ClassInstanceCreation at 5", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: out to ClassInstanceCreation at 6", "INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to ConditionalExpression at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ThisExpression to ConditionalExpression at 2", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS SimpleName: asXml to ClassInstanceCreation at 4", "INS SimpleName: embeddable to ClassInstanceCreation at 2", "INS InfixExpression: != to ConditionalExpression at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: rawObjKeys to SingleVariableDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS SimpleName: rawObjKeys to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: rawObjKeys to Assignment: = at 1", "INS ExpressionStatement to Block at 5", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS BooleanLiteral: false to ConstructorInvocation at 4", "operations": ["INS BooleanLiteral: false to ConstructorInvocation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: RenderContext to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: rawObjKeys to ClassInstanceCreation at 6", "operations": ["INS SimpleName: rawObjKeys to ClassInstanceCreation at 6"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: RenderContext to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: rawObjKeys to ClassInstanceCreation at 5", "operations": ["INS SimpleName: rawObjKeys to ClassInstanceCreation at 5"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: RenderContext to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: rawObjKeys to ClassInstanceCreation at 5", "operations": ["INS SimpleName: rawObjKeys to ClassInstanceCreation at 5"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: RenderContext to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: rawObjKeys to ClassInstanceCreation at 5", "operations": ["INS SimpleName: rawObjKeys to ClassInstanceCreation at 5"]}]}}, {"RenderContext_diff": {"operations": ["Insert FieldDeclaration(56) into TypeDeclaration: class(336) at 7", "Insert MethodDeclaration(202) into TypeDeclaration: class(336) at 15", "Insert MethodDeclaration(335) into TypeDeclaration: class(336) at 21", "Insert Javadoc(50) into FieldDeclaration(56) at 0", "Insert Modifier: private(51) into FieldDeclaration(56) at 1", "Insert Modifier: final(52) into FieldDeclaration(56) at 2", "Insert PrimitiveType: boolean(53) into FieldDeclaration(56) at 3", "Insert VariableDeclarationFragment(55) into FieldDeclaration(56) at 4", "Insert SingleVariableDeclaration(95) into MethodDeclaration(146) at 6", "Insert Modifier: public(195) into MethodDeclaration(202) at 0", "Insert Modifier: final(196) into MethodDeclaration(202) at 1", "Insert PrimitiveType: boolean(197) into MethodDeclaration(202) at 2", "Insert SimpleName: rawObjKeys(198) into MethodDeclaration(202) at 3", "Insert Block(201) into MethodDeclaration(202) at 4", "Insert Modifier: public(310) into MethodDeclaration(335) at 0", "Insert SimpleType: RenderContext(312) into MethodDeclaration(335) at 1", "Insert SimpleName: withRawObjKeys(313) into MethodDeclaration(335) at 2", "Insert SingleVariableDeclaration(316) into MethodDeclaration(335) at 3", "Insert Block(334) into MethodDeclaration(335) at 4", "Insert TagElement(49) into Javadoc(50) at 0", "Insert SimpleName: rawObjKeys(54) into VariableDeclarationFragment(55) at 0", "Insert PrimitiveType: boolean(93) into SingleVariableDeclaration(95) at 0", "Insert SimpleName: rawObjKeys(94) into SingleVariableDeclaration(95) at 1", "Insert ExpressionStatement(138) into Block(145) at 5", "Insert ReturnStatement(200) into Block(201) at 0", "Insert SimpleName: RenderContext(311) into SimpleType: RenderContext(312) at 0", "Insert PrimitiveType: boolean(314) into SingleVariableDeclaration(316) at 0", "Insert SimpleName: b(315) into SingleVariableDeclaration(316) at 1", "Insert ReturnStatement(333) into Block(334) at 0", "Insert TextElement: True iff object ctor keys that are JS identifiers can be rendered without(47) into TagElement(49) at 0", "Insert TextElement: quotes.(48) into TagElement(49) at 1", "Insert BooleanLiteral: false(74) into ConstructorInvocation(76) at 4", "Insert Assignment: =(137) into ExpressionStatement(138) at 0", "Insert SimpleName: rawObjKeys(199) into ReturnStatement(200) at 0", "Insert ConditionalExpression(332) into ReturnStatement(333) at 0", "Insert FieldAccess(135) into Assignment: =(137) at 0", "Insert SimpleName: rawObjKeys(136) into Assignment: =(137) at 1", "Insert InfixExpression: !=(321) into ConditionalExpression(332) at 0", "Insert ClassInstanceCreation(330) into ConditionalExpression(332) at 1", "Insert ThisExpression(331) into ConditionalExpression(332) at 2", "Insert ThisExpression(133) into FieldAccess(135) at 0", "Insert SimpleName: rawObjKeys(134) into FieldAccess(135) at 1", "Move SimpleType: RenderContext(218) into ClassInstanceCreation(230) at 0", "Insert SimpleName: rawObjKeys(228) into ClassInstanceCreation(230) at 5", "Move SimpleType: RenderContext(241) into ClassInstanceCreation(254) at 0", "Insert SimpleName: rawObjKeys(252) into ClassInstanceCreation(254) at 5", "Move SimpleType: RenderContext(266) into ClassInstanceCreation(278) at 0", "Insert SimpleName: rawObjKeys(276) into ClassInstanceCreation(278) at 5", "Move SimpleType: RenderContext(195) into ClassInstanceCreation(304) at 0", "Insert SimpleName: rawObjKeys(302) into ClassInstanceCreation(304) at 5", "Insert SimpleName: b(317) into InfixExpression: !=(321) at 0", "Insert FieldAccess(320) into InfixExpression: !=(321) at 1", "Insert SimpleType: RenderContext(323) into ClassInstanceCreation(330) at 0", "Insert SimpleName: asciiOnly(324) into ClassInstanceCreation(330) at 1", "Insert SimpleName: embeddable(325) into ClassInstanceCreation(330) at 2", "Insert SimpleName: json(326) into ClassInstanceCreation(330) at 3", "Insert SimpleName: asXml(327) into ClassInstanceCreation(330) at 4", "Insert SimpleName: b(328) into ClassInstanceCreation(330) at 5", "Insert SimpleName: out(329) into ClassInstanceCreation(330) at 6", "Insert ThisExpression(318) into FieldAccess(320) at 0", "Insert SimpleName: asXml(319) into FieldAccess(320) at 1", "Insert SimpleName: RenderContext(322) into SimpleType: RenderContext(323) at 0"]}}, {"CajolingService_cluster": {"actions": [{"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS StringLiteral: \"deprecation\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}]}}, {"CajolingService_diff": {"operations": ["Insert SingleMemberAnnotation(340) into MethodDeclaration(493) at 0", "Insert MarkerAnnotation(82) into MethodDeclaration(97) at 0", "Insert SimpleName: SuppressWarnings(338) into SingleMemberAnnotation(340) at 0", "Insert StringLiteral: \"deprecation\"(339) into SingleMemberAnnotation(340) at 1", "Insert SimpleName: Override(81) into MarkerAnnotation(82) at 0"]}}, {"JsdocMain_cluster": {"actions": [{"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: drain to MethodInvocation at 2"]}, {"root": "UPDATE from drain to toString", "operations": ["UPD SimpleName: drain from drain to toString"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL SimpleName: sb", "DEL ForStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL CastExpression", "DEL SimpleType: StringBuilder", "DEL SimpleName: ch", "DEL SimpleName: ch", "DEL Block", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL SimpleName: ch", "DEL SimpleName: drain", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: StringBuilder", "DEL PrimitiveType: char", "DEL MethodInvocation", "DEL SimpleName: cp", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: append", "DEL InfixExpression: >=", "DEL SimpleName: toString", "DEL SimpleName: CharProducer", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: sb", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: read", "DEL Block", "DEL SimpleType: StringBuilder", "DEL MethodDeclaration", "DEL VariableDeclarationExpression", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleType: CharProducer", "DEL SimpleName: cp", "DEL Modifier: static", "DEL SimpleName: sb", "DEL NumberLiteral: 0"]}]}}, {"JsdocMain_diff": {"operations": ["Move SimpleName: drain(1036) into MethodInvocation(1041) at 2", "Update SimpleName: drain(1036) to toString", "Delete Modifier: private(1587)", "Delete Modifier: static(1588)", "Delete SimpleName: String(1589)", "Delete SimpleType: String(1590)", "Delete SimpleName: drain(1591)", "Delete SimpleName: CharProducer(1592)", "Delete SimpleType: CharProducer(1593)", "Delete SimpleName: cp(1594)", "Delete SingleVariableDeclaration(1595)", "Delete SimpleName: StringBuilder(1596)", "Delete SimpleType: StringBuilder(1597)", "Delete SimpleName: sb(1598)", "Delete SimpleName: StringBuilder(1599)", "Delete SimpleType: StringBuilder(1600)", "Delete ClassInstanceCreation(1601)", "Delete VariableDeclarationFragment(1602)", "Delete VariableDeclarationStatement(1603)", "Delete PrimitiveType: int(1604)", "Delete SimpleName: ch(1605)", "Delete VariableDeclarationFragment(1606)", "Delete VariableDeclarationExpression(1607)", "Delete SimpleName: ch(1608)", "Delete SimpleName: cp(1609)", "Delete SimpleName: read(1610)", "Delete MethodInvocation(1611)", "Delete Assignment: =(1612)", "Delete ParenthesizedExpression(1613)", "Delete NumberLiteral: 0(1614)", "Delete InfixExpression: >=(1615)", "Delete SimpleName: sb(1616)", "Delete SimpleName: append(1617)", "Delete PrimitiveType: char(1618)", "Delete SimpleName: ch(1619)", "Delete CastExpression(1620)", "Delete MethodInvocation(1621)", "Delete ExpressionStatement(1622)", "Delete Block(1623)", "Delete ForStatement(1624)", "Delete SimpleName: sb(1625)", "Delete SimpleName: toString(1626)", "Delete MethodInvocation(1627)", "Delete ReturnStatement(1628)", "Delete Block(1629)", "Delete MethodDeclaration(1630)"]}}, {"HtmlQuasiBuilder_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.caja.lexer.CharProducer to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.google.caja.lexer.HtmlLexer to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: com.google.caja.lexer.TokenStream to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: com.google.caja.util.Sets to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS ImportDeclaration to CompilationUnit at 22", "INS QualifiedName: java.util.Set to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleType: String to ParameterizedType: Set<String> at 1", "INS SimpleName: Sets to MethodInvocation at 0", "INS TextElement: Tags that are ignored in HTML5 unless seen inside a certain other tag, and to TagElement at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS Modifier: private to FieldDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"<option\" to MethodInvocation at 9", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0", "INS StringLiteral: \"<tr\" to MethodInvocation at 6", "INS StringLiteral: \"<th\" to MethodInvocation at 8", "INS ParameterizedType: Set<String> to FieldDeclaration at 4", "INS StringLiteral: \"<caption\" to MethodInvocation at 5", "INS SimpleName: PROBLEMATIC_TAGS to VariableDeclarationFragment at 0", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"<tfoot\" to MethodInvocation at 4", "INS TextElement: so cannot appear at the top level of a parsed HTML5 document fragment. to TagElement at 1", "INS StringLiteral: \"<tbody\" to MethodInvocation at 3", "INS StringLiteral: \"<thead\" to MethodInvocation at 2", "INS StringLiteral: \"<td\" to MethodInvocation at 7", "INS Modifier: static to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 3", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleType: Set to ParameterizedType: Set<String> at 0", "INS FieldDeclaration to TypeDeclaration: class at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SimpleType: Document to MethodDeclaration at 2", "INS TextElement: The document used to create DOM nodes.  to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS Block to MethodDeclaration at 4", "INS SimpleName: getDocument to MethodDeclaration at 3", "INS SimpleName: Document to SimpleType: Document at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: doc to ReturnStatement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: isProblematic to VariableDeclarationFragment at 0", "INS QualifiedName: t.type to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 0", "INS ParameterizedType: TokenQueue<HtmlTokenType> to ClassInstanceCreation at 0", "INS SimpleType: Token to ParameterizedType: Token<HtmlTokenType> at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: ParseException to MethodDeclaration at 3", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS QualifiedName: InputSource.UNKNOWN to ClassInstanceCreation at 2", "INS Block to TryStatement at 0", "INS ParameterizedType: Token<HtmlTokenType> to VariableDeclarationStatement at 0", "INS SimpleName: Strings to MethodInvocation at 0", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS SimpleType: TokenStream to ParameterizedType: TokenStream<HtmlTokenType> at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SwitchCase to SwitchStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS SimpleName: Token to SimpleType: Token at 0", "INS SimpleName: lexer to VariableDeclarationFragment at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: t to VariableDeclarationFragment at 0", "INS SimpleName: HtmlLexer to SimpleType: HtmlLexer at 0", "INS SimpleName: next to MethodDeclaration at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: TAGBEGIN to SwitchCase at 0", "INS StringLiteral: \":\" to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: toLowerCase to MethodInvocation at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: TokenStream to SimpleType: TokenStream at 0", "INS QualifiedName: InputSource.UNKNOWN to MethodInvocation at 3", "INS BreakStatement to SwitchStatement at 7", "INS SimpleType: CharProducer to VariableDeclarationStatement at 0", "INS SimpleName: fromString to MethodInvocation at 1", "INS QualifiedName: t.text to MethodInvocation at 0", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS SimpleName: TokenStream to SimpleType: TokenStream at 0", "INS SimpleType: HtmlTokenType to ParameterizedType: TokenQueue<HtmlTokenType> at 1", "INS SimpleName: TokenQueue to SimpleType: TokenQueue at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: Token to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleType: TokenQueue to ParameterizedType: TokenQueue<HtmlTokenType> at 0", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleName: t to ReturnStatement at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: CharProducer to SimpleType: CharProducer at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: Token<HtmlTokenType> to MethodDeclaration at 1", "INS SimpleName: caseFilter to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SwitchCase to SwitchStatement at 3", "INS SimpleName: hasNext to MethodDeclaration at 2", "INS QualifiedName: t.pos to MethodInvocation at 4", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS QualifiedName: t.type to SwitchStatement at 0", "INS ExpressionStatement to Block at 2", "INS QualifiedName: firstTag.text to MethodInvocation at 2", "INS IfStatement to Block at 7", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: CharProducer.Factory to MethodInvocation at 0", "INS SimpleType: HtmlTokenType to ParameterizedType: TokenStream<HtmlTokenType> at 1", "INS SimpleName: TokenStream to SimpleType: TokenStream at 0", "INS SimpleType: ParseException to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: TokenStream<HtmlTokenType> to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS SimpleType: TokenStream to ParameterizedType: TokenStream<HtmlTokenType> at 0", "INS SimpleName: isDocument to PrefixExpression: ! at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: HtmlTokenType to ParameterizedType: TokenStream<HtmlTokenType> at 1", "INS SimpleName: TAGEND to SwitchCase at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: HtmlLexer to ClassInstanceCreation at 0", "INS SimpleName: caseFilter to ClassInstanceCreation at 1", "INS SimpleName: firstTag to VariableDeclarationFragment at 0", "INS Block to IfStatement at 2", "INS SimpleType: Token to ParameterizedType: Token<HtmlTokenType> at 0", "INS SimpleName: tq to Assignment: = at 0", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS ExpressionStatement to Block at 0", "INS ParameterizedType: TokenStream<HtmlTokenType> to VariableDeclarationStatement at 1", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SwitchCase to SwitchStatement at 2", "INS SimpleType: HtmlTokenType to ParameterizedType: Token<HtmlTokenType> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: t to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: contains to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS BreakStatement to SwitchStatement at 5", "INS SimpleName: cp to ClassInstanceCreation at 1", "INS SimpleName: lexer to MethodInvocation at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS SimpleType: HtmlTokenType to ParameterizedType: TokenStream<HtmlTokenType> at 1", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS ParameterizedType: Token<HtmlTokenType> to VariableDeclarationStatement at 0", "INS SimpleType: TokenStream to ParameterizedType: TokenStream<HtmlTokenType> at 0", "INS SimpleType: Token to ParameterizedType: Token<HtmlTokenType> at 0", "INS SimpleName: lexer to MethodInvocation at 0", "INS SimpleName: PROBLEMATIC_TAGS to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParameterizedType: TokenStream<HtmlTokenType> to ClassInstanceCreation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SwitchCase to SwitchStatement at 6", "INS SimpleName: ATTRNAME to SwitchCase at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: isProblematic to IfStatement at 0", "INS SimpleName: cp to VariableDeclarationFragment at 0", "INS SimpleType: HtmlTokenType to ParameterizedType: Token<HtmlTokenType> at 1", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS IfStatement to SwitchStatement at 4", "INS SimpleType: HtmlTokenType to ParameterizedType: Token<HtmlTokenType> at 1", "INS SimpleName: Token to SimpleType: Token at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: hasNext to MethodInvocation at 1", "INS SimpleName: firstTag to InfixExpression: != at 0", "INS SimpleName: instance to MethodInvocation at 1", "INS SwitchStatement to Block at 1", "INS SimpleName: quasiHtml to MethodInvocation at 2", "INS SimpleName: Token to SimpleType: Token at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 8", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 9", "MOV WhileStatement to Block at 5"]}, {"root": "UPDATE from DomParser to doc", "operations": ["UPD SimpleName: DomParser from DomParser to doc"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: DomParser to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "INS Block to WhileStatement at 1", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS Block to WhileStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: firstTag to Assignment: = at 0", "INS SimpleName: t to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleName: firstTag to InfixExpression: == at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ParameterizedType: TokenQueue<HtmlTokenType> to ClassInstanceCreation at 0", "INS QualifiedName: InputSource.UNKNOWN to ClassInstanceCreation at 2", "INS SimpleName: TokenQueue to SimpleType: TokenQueue at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: clone to MethodInvocation at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: HtmlTokenType to SimpleType: HtmlTokenType at 0", "INS SimpleType: TokenQueue to ParameterizedType: TokenQueue<HtmlTokenType> at 0", "INS SimpleType: HtmlTokenType to ParameterizedType: TokenQueue<HtmlTokenType> at 1", "INS SimpleName: cp to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS SimpleName: isProblematic to ClassInstanceCreation at 2", "operations": ["INS SimpleName: isProblematic to ClassInstanceCreation at 2"]}, {"root": "UPDATE from StringReader to HtmlLexer", "operations": ["UPD SimpleName: StringReader from StringReader to HtmlLexer", "UPD SimpleType: StringReader from StringReader to HtmlLexer"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StringReader to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: Strings to MethodInvocation at 0", "INS SimpleName: equalsIgnoreCase to MethodInvocation at 1", "INS QualifiedName: t.text to MethodInvocation at 3", "INS MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV StringLiteral: \"<html\" to MethodInvocation at 2"]}, {"root": "UPDATE from IOException to ParseException", "operations": ["UPD SimpleName: IOException from IOException to ParseException", "UPD SimpleName: RuntimeException from RuntimeException to ParseException"]}, {"root": "MOVE from SimpleType: ParseException", "operations": ["MOV SimpleName: IOException to SimpleType: ParseException at 0"]}, {"root": "MOVE from SimpleType: ParseException", "operations": ["MOV SimpleName: RuntimeException to SimpleType: ParseException at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: makeTokenQueue", "DEL SimpleName: quasiHtml", "DEL ClassInstanceCreation", "DEL QualifiedName: FilePosition.UNKNOWN", "DEL MethodInvocation", "DEL SimpleName: DomParser", "DEL BooleanLiteral: false"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: equals"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL CatchClause", "operations": ["DEL StringLiteral: \"Can't drain StringReader\"", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: IOException", "DEL SimpleName: ex", "DEL Block", "DEL CatchClause", "DEL ClassInstanceCreation", "DEL SimpleName: ex", "DEL SimpleType: RuntimeException"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: makeDocument", "DEL NullLiteral", "DEL NullLiteral", "DEL MethodInvocation"]}]}}, {"HtmlQuasiBuilder_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(2036) at 1", "Insert ImportDeclaration(7) into CompilationUnit(2036) at 3", "Insert ImportDeclaration(21) into CompilationUnit(2036) at 10", "Insert ImportDeclaration(31) into CompilationUnit(2036) at 15", "Insert ImportDeclaration(45) into CompilationUnit(2036) at 22", "Insert QualifiedName: com.google.caja.lexer.CharProducer(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.caja.lexer.HtmlLexer(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: com.google.caja.lexer.TokenStream(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: com.google.caja.util.Sets(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: java.util.Set(44) into ImportDeclaration(45) at 0", "Insert FieldDeclaration(222) into TypeDeclaration: class(2035) at 7", "Insert MethodDeclaration(662) into TypeDeclaration: class(2035) at 10", "Insert Javadoc(200) into FieldDeclaration(222) at 0", "Insert Modifier: private(201) into FieldDeclaration(222) at 1", "Insert Modifier: static(202) into FieldDeclaration(222) at 2", "Insert Modifier: final(203) into FieldDeclaration(222) at 3", "Insert ParameterizedType: Set<String>(208) into FieldDeclaration(222) at 4", "Insert VariableDeclarationFragment(221) into FieldDeclaration(222) at 5", "Insert Javadoc(654) into MethodDeclaration(662) at 0", "Insert Modifier: public(655) into MethodDeclaration(662) at 1", "Insert SimpleType: Document(657) into MethodDeclaration(662) at 2", "Insert SimpleName: getDocument(658) into MethodDeclaration(662) at 3", "Insert Block(661) into MethodDeclaration(662) at 4", "Insert TagElement(199) into Javadoc(200) at 0", "Insert SimpleType: Set(205) into ParameterizedType: Set<String>(208) at 0", "Insert SimpleType: String(207) into ParameterizedType: Set<String>(208) at 1", "Insert SimpleName: PROBLEMATIC_TAGS(209) into VariableDeclarationFragment(221) at 0", "Insert MethodInvocation(220) into VariableDeclarationFragment(221) at 1", "Insert TagElement(653) into Javadoc(654) at 0", "Insert SimpleName: Document(656) into SimpleType: Document(657) at 0", "Insert ReturnStatement(660) into Block(661) at 0", "Insert TextElement: Tags that are ignored in HTML5 unless seen inside a certain other tag, and(197) into TagElement(199) at 0", "Insert TextElement: so cannot appear at the top level of a parsed HTML5 document fragment.(198) into TagElement(199) at 1", "Insert SimpleName: Set(204) into SimpleType: Set(205) at 0", "Insert SimpleName: String(206) into SimpleType: String(207) at 0", "Insert SimpleName: Sets(210) into MethodInvocation(220) at 0", "Insert SimpleName: newHashSet(211) into MethodInvocation(220) at 1", "Insert StringLiteral: \"<thead\"(212) into MethodInvocation(220) at 2", "Insert StringLiteral: \"<tbody\"(213) into MethodInvocation(220) at 3", "Insert StringLiteral: \"<tfoot\"(214) into MethodInvocation(220) at 4", "Insert StringLiteral: \"<caption\"(215) into MethodInvocation(220) at 5", "Insert StringLiteral: \"<tr\"(216) into MethodInvocation(220) at 6", "Insert StringLiteral: \"<td\"(217) into MethodInvocation(220) at 7", "Insert StringLiteral: \"<th\"(218) into MethodInvocation(220) at 8", "Insert StringLiteral: \"<option\"(219) into MethodInvocation(220) at 9", "Insert TextElement: The document used to create DOM nodes. (652) into TagElement(653) at 0", "Insert SimpleName: doc(659) into ReturnStatement(660) at 0", "Insert Block(525) into TryStatement(540) at 0", "Insert VariableDeclarationStatement(277) into Block(525) at 0", "Move VariableDeclarationStatement(248) into Block(525) at 1", "Move VariableDeclarationStatement(253) into Block(525) at 2", "Move VariableDeclarationStatement(261) into Block(525) at 3", "Insert VariableDeclarationStatement(320) into Block(525) at 4", "Move WhileStatement(296) into Block(525) at 5", "Insert VariableDeclarationStatement(381) into Block(525) at 6", "Insert IfStatement(495) into Block(525) at 7", "Move VariableDeclarationStatement(314) into Block(525) at 8", "Move ExpressionStatement(330) into Block(525) at 9", "Update SimpleName: DomParser(451) to doc", "Move SimpleName: DomParser(451) into MethodInvocation(634) at 2", "Move IfStatement(1779) into Block(1967) at 1", "Insert SimpleType: CharProducer(269) into VariableDeclarationStatement(277) at 0", "Insert VariableDeclarationFragment(276) into VariableDeclarationStatement(277) at 1", "Insert ParameterizedType: Token<HtmlTokenType>(316) into VariableDeclarationStatement(320) at 0", "Insert VariableDeclarationFragment(319) into VariableDeclarationStatement(320) at 1", "Insert Block(362) into WhileStatement(363) at 1", "Insert PrimitiveType: boolean(364) into VariableDeclarationStatement(381) at 0", "Insert VariableDeclarationFragment(380) into VariableDeclarationStatement(381) at 1", "Insert SimpleName: isProblematic(382) into IfStatement(495) at 0", "Insert Block(488) into IfStatement(495) at 1", "Insert Block(494) into IfStatement(495) at 2", "Insert SimpleName: CharProducer(268) into SimpleType: CharProducer(269) at 0", "Insert SimpleName: cp(270) into VariableDeclarationFragment(276) at 0", "Insert MethodInvocation(275) into VariableDeclarationFragment(276) at 1", "Insert ClassInstanceCreation(296) into VariableDeclarationFragment(297) at 1", "Insert SimpleType: Token(313) into ParameterizedType: Token<HtmlTokenType>(316) at 0", "Insert SimpleType: HtmlTokenType(315) into ParameterizedType: Token<HtmlTokenType>(316) at 1", "Insert SimpleName: firstTag(317) into VariableDeclarationFragment(319) at 0", "Insert NullLiteral(318) into VariableDeclarationFragment(319) at 1", "Move VariableDeclarationStatement(276) into Block(362) at 0", "Insert IfStatement(361) into Block(362) at 1", "Insert SimpleName: isProblematic(365) into VariableDeclarationFragment(380) at 0", "Insert InfixExpression: &&(379) into VariableDeclarationFragment(380) at 1", "Insert VariableDeclarationStatement(395) into Block(488) at 0", "Insert VariableDeclarationStatement(476) into Block(488) at 1", "Insert ExpressionStatement(487) into Block(488) at 2", "Move ExpressionStatement(301) into Block(494) at 0", "Insert QualifiedName: CharProducer.Factory(271) into MethodInvocation(275) at 0", "Insert SimpleName: fromString(272) into MethodInvocation(275) at 1", "Insert SimpleName: quasiHtml(273) into MethodInvocation(275) at 2", "Insert QualifiedName: InputSource.UNKNOWN(274) into MethodInvocation(275) at 3", "Insert ParameterizedType: TokenQueue<HtmlTokenType>(288) into ClassInstanceCreation(296) at 0", "Insert ClassInstanceCreation(294) into ClassInstanceCreation(296) at 1", "Insert QualifiedName: InputSource.UNKNOWN(295) into ClassInstanceCreation(296) at 2", "Insert SimpleName: Token(312) into SimpleType: Token(313) at 0", "Insert SimpleName: HtmlTokenType(314) into SimpleType: HtmlTokenType(315) at 0", "Move InfixExpression: ==(279) into IfStatement(361) at 0", "Insert Block(360) into IfStatement(361) at 1", "Insert InfixExpression: &&(371) into InfixExpression: &&(379) at 0", "Insert MethodInvocation(378) into InfixExpression: &&(379) at 1", "Insert Modifier: final(383) into VariableDeclarationStatement(395) at 0", "Insert ParameterizedType: TokenStream<HtmlTokenType>(388) into VariableDeclarationStatement(395) at 1", "Insert VariableDeclarationFragment(394) into VariableDeclarationStatement(395) at 2", "Insert Modifier: final(396) into VariableDeclarationStatement(476) at 0", "Insert ParameterizedType: TokenStream<HtmlTokenType>(401) into VariableDeclarationStatement(476) at 1", "Insert VariableDeclarationFragment(475) into VariableDeclarationStatement(476) at 2", "Insert Assignment: =(486) into ExpressionStatement(487) at 0", "Insert SimpleName: isProblematic(502) into ClassInstanceCreation(506) at 2", "Insert SimpleType: TokenQueue(285) into ParameterizedType: TokenQueue<HtmlTokenType>(288) at 0", "Insert SimpleType: HtmlTokenType(287) into ParameterizedType: TokenQueue<HtmlTokenType>(288) at 1", "Update SimpleType: StringReader(242) to HtmlLexer", "Move SimpleType: StringReader(242) into ClassInstanceCreation(294) at 0", "Insert MethodInvocation(293) into ClassInstanceCreation(294) at 1", "Insert IfStatement(347) into Block(360) at 0", "Move IfStatement(294) into Block(360) at 1", "Insert PrefixExpression: !(367) into InfixExpression: &&(371) at 0", "Insert InfixExpression: !=(370) into InfixExpression: &&(371) at 1", "Insert SimpleName: PROBLEMATIC_TAGS(372) into MethodInvocation(378) at 0", "Insert SimpleName: contains(373) into MethodInvocation(378) at 1", "Insert MethodInvocation(377) into MethodInvocation(378) at 2", "Insert SimpleType: TokenStream(385) into ParameterizedType: TokenStream<HtmlTokenType>(388) at 0", "Insert SimpleType: HtmlTokenType(387) into ParameterizedType: TokenStream<HtmlTokenType>(388) at 1", "Insert SimpleName: lexer(389) into VariableDeclarationFragment(394) at 0", "Insert ClassInstanceCreation(393) into VariableDeclarationFragment(394) at 1", "Insert SimpleType: TokenStream(398) into ParameterizedType: TokenStream<HtmlTokenType>(401) at 0", "Insert SimpleType: HtmlTokenType(400) into ParameterizedType: TokenStream<HtmlTokenType>(401) at 1", "Insert SimpleName: caseFilter(402) into VariableDeclarationFragment(475) at 0", "Insert ClassInstanceCreation(474) into VariableDeclarationFragment(475) at 1", "Insert SimpleName: tq(477) into Assignment: =(486) at 0", "Insert ClassInstanceCreation(485) into Assignment: =(486) at 1", "Insert SimpleName: TokenQueue(284) into SimpleType: TokenQueue(285) at 0", "Insert SimpleName: HtmlTokenType(286) into SimpleType: HtmlTokenType(287) at 0", "Update SimpleName: StringReader(241) to HtmlLexer", "Insert SimpleName: cp(291) into MethodInvocation(293) at 0", "Insert SimpleName: clone(292) into MethodInvocation(293) at 1", "Insert InfixExpression: ==(341) into IfStatement(347) at 0", "Insert Block(346) into IfStatement(347) at 1", "Insert MethodInvocation(352) into IfStatement(359) at 0", "Insert SimpleName: isDocument(366) into PrefixExpression: !(367) at 0", "Insert SimpleName: firstTag(368) into InfixExpression: !=(370) at 0", "Insert NullLiteral(369) into InfixExpression: !=(370) at 1", "Insert SimpleName: Strings(374) into MethodInvocation(377) at 0", "Insert SimpleName: toLowerCase(375) into MethodInvocation(377) at 1", "Insert QualifiedName: firstTag.text(376) into MethodInvocation(377) at 2", "Insert SimpleName: TokenStream(384) into SimpleType: TokenStream(385) at 0", "Insert SimpleName: HtmlTokenType(386) into SimpleType: HtmlTokenType(387) at 0", "Insert SimpleType: HtmlLexer(391) into ClassInstanceCreation(393) at 0", "Insert SimpleName: cp(392) into ClassInstanceCreation(393) at 1", "Insert SimpleName: TokenStream(397) into SimpleType: TokenStream(398) at 0", "Insert SimpleName: HtmlTokenType(399) into SimpleType: HtmlTokenType(400) at 0", "Insert ParameterizedType: TokenStream<HtmlTokenType>(407) into ClassInstanceCreation(474) at 0", "Insert AnonymousClassDeclaration(473) into ClassInstanceCreation(474) at 1", "Insert ParameterizedType: TokenQueue<HtmlTokenType>(482) into ClassInstanceCreation(485) at 0", "Insert SimpleName: caseFilter(483) into ClassInstanceCreation(485) at 1", "Insert QualifiedName: InputSource.UNKNOWN(484) into ClassInstanceCreation(485) at 2", "Insert SimpleName: firstTag(339) into InfixExpression: ==(341) at 0", "Insert NullLiteral(340) into InfixExpression: ==(341) at 1", "Insert ExpressionStatement(345) into Block(346) at 0", "Insert SimpleName: Strings(348) into MethodInvocation(352) at 0", "Insert SimpleName: equalsIgnoreCase(349) into MethodInvocation(352) at 1", "Move StringLiteral: \"<html\"(280) into MethodInvocation(352) at 2", "Insert QualifiedName: t.text(351) into MethodInvocation(352) at 3", "Insert SimpleName: HtmlLexer(390) into SimpleType: HtmlLexer(391) at 0", "Insert SimpleType: TokenStream(404) into ParameterizedType: TokenStream<HtmlTokenType>(407) at 0", "Insert SimpleType: HtmlTokenType(406) into ParameterizedType: TokenStream<HtmlTokenType>(407) at 1", "Insert MethodDeclaration(418) into AnonymousClassDeclaration(473) at 0", "Insert MethodDeclaration(472) into AnonymousClassDeclaration(473) at 1", "Insert SimpleType: TokenQueue(479) into ParameterizedType: TokenQueue<HtmlTokenType>(482) at 0", "Insert SimpleType: HtmlTokenType(481) into ParameterizedType: TokenQueue<HtmlTokenType>(482) at 1", "Insert Assignment: =(344) into ExpressionStatement(345) at 0", "Insert SimpleName: TokenStream(403) into SimpleType: TokenStream(404) at 0", "Insert SimpleName: HtmlTokenType(405) into SimpleType: HtmlTokenType(406) at 0", "Insert Modifier: public(408) into MethodDeclaration(418) at 0", "Insert PrimitiveType: boolean(409) into MethodDeclaration(418) at 1", "Insert SimpleName: hasNext(410) into MethodDeclaration(418) at 2", "Insert SimpleType: ParseException(412) into MethodDeclaration(418) at 3", "Insert Block(417) into MethodDeclaration(418) at 4", "Insert Modifier: public(419) into MethodDeclaration(472) at 0", "Insert ParameterizedType: Token<HtmlTokenType>(424) into MethodDeclaration(472) at 1", "Insert SimpleName: next(425) into MethodDeclaration(472) at 2", "Insert SimpleType: ParseException(427) into MethodDeclaration(472) at 3", "Insert Block(471) into MethodDeclaration(472) at 4", "Insert SimpleName: TokenQueue(478) into SimpleType: TokenQueue(479) at 0", "Insert SimpleName: HtmlTokenType(480) into SimpleType: HtmlTokenType(481) at 0", "Insert SimpleName: firstTag(342) into Assignment: =(344) at 0", "Insert SimpleName: t(343) into Assignment: =(344) at 1", "Update SimpleName: IOException(332) to ParseException", "Move SimpleName: IOException(332) into SimpleType: ParseException(412) at 0", "Insert ReturnStatement(416) into Block(417) at 0", "Insert SimpleType: Token(421) into ParameterizedType: Token<HtmlTokenType>(424) at 0", "Insert SimpleType: HtmlTokenType(423) into ParameterizedType: Token<HtmlTokenType>(424) at 1", "Update SimpleName: RuntimeException(336) to ParseException", "Move SimpleName: RuntimeException(336) into SimpleType: ParseException(427) at 0", "Insert VariableDeclarationStatement(438) into Block(471) at 0", "Insert SwitchStatement(468) into Block(471) at 1", "Insert ReturnStatement(470) into Block(471) at 2", "Insert MethodInvocation(415) into ReturnStatement(416) at 0", "Insert SimpleName: Token(420) into SimpleType: Token(421) at 0", "Insert SimpleName: HtmlTokenType(422) into SimpleType: HtmlTokenType(423) at 0", "Insert ParameterizedType: Token<HtmlTokenType>(432) into VariableDeclarationStatement(438) at 0", "Insert VariableDeclarationFragment(437) into VariableDeclarationStatement(438) at 1", "Insert QualifiedName: t.type(439) into SwitchStatement(468) at 0", "Insert SwitchCase(441) into SwitchStatement(468) at 1", "Insert SwitchCase(443) into SwitchStatement(468) at 2", "Insert SwitchCase(445) into SwitchStatement(468) at 3", "Insert IfStatement(464) into SwitchStatement(468) at 4", "Insert BreakStatement(465) into SwitchStatement(468) at 5", "Insert SwitchCase(466) into SwitchStatement(468) at 6", "Insert BreakStatement(467) into SwitchStatement(468) at 7", "Insert SimpleName: t(469) into ReturnStatement(470) at 0", "Insert SimpleName: lexer(413) into MethodInvocation(415) at 0", "Insert SimpleName: hasNext(414) into MethodInvocation(415) at 1", "Insert SimpleType: Token(429) into ParameterizedType: Token<HtmlTokenType>(432) at 0", "Insert SimpleType: HtmlTokenType(431) into ParameterizedType: Token<HtmlTokenType>(432) at 1", "Insert SimpleName: t(433) into VariableDeclarationFragment(437) at 0", "Insert MethodInvocation(436) into VariableDeclarationFragment(437) at 1", "Insert SimpleName: TAGBEGIN(440) into SwitchCase(441) at 0", "Insert SimpleName: TAGEND(442) into SwitchCase(443) at 0", "Insert SimpleName: ATTRNAME(444) into SwitchCase(445) at 0", "Insert PrefixExpression: !(450) into IfStatement(464) at 0", "Insert Block(463) into IfStatement(464) at 1", "Insert SimpleName: Token(428) into SimpleType: Token(429) at 0", "Insert SimpleName: HtmlTokenType(430) into SimpleType: HtmlTokenType(431) at 0", "Insert SimpleName: lexer(434) into MethodInvocation(436) at 0", "Insert SimpleName: next(435) into MethodInvocation(436) at 1", "Insert MethodInvocation(449) into PrefixExpression: !(450) at 0", "Insert ExpressionStatement(462) into Block(463) at 0", "Insert QualifiedName: t.text(446) into MethodInvocation(449) at 0", "Insert SimpleName: contains(447) into MethodInvocation(449) at 1", "Insert StringLiteral: \":\"(448) into MethodInvocation(449) at 2", "Insert Assignment: =(461) into ExpressionStatement(462) at 0", "Insert SimpleName: t(451) into Assignment: =(461) at 0", "Insert MethodInvocation(460) into Assignment: =(461) at 1", "Insert SimpleName: Token(452) into MethodInvocation(460) at 0", "Insert SimpleName: instance(453) into MethodInvocation(460) at 1", "Move MethodInvocation(285) into MethodInvocation(460) at 2", "Insert QualifiedName: t.type(458) into MethodInvocation(460) at 3", "Insert QualifiedName: t.pos(459) into MethodInvocation(460) at 4", "Delete SimpleName: DomParser(238)", "Delete SimpleName: makeTokenQueue(239)", "Delete QualifiedName: FilePosition.UNKNOWN(240)", "Delete SimpleName: quasiHtml(243)", "Delete ClassInstanceCreation(244)", "Delete BooleanLiteral: false(245)", "Delete MethodInvocation(246)", "Delete SimpleName: equals(281)", "Delete MethodInvocation(286)", "Delete InfixExpression: &&(287)", "Delete Block(295)", "Delete BooleanLiteral: false(308)", "Delete Block(331)", "Delete SimpleType: IOException(333)", "Delete SimpleName: ex(334)", "Delete SingleVariableDeclaration(335)", "Delete SimpleType: RuntimeException(337)", "Delete StringLiteral: \"Can't drain StringReader\"(338)", "Delete SimpleName: ex(339)", "Delete ClassInstanceCreation(340)", "Delete ThrowStatement(341)", "Delete Block(342)", "Delete CatchClause(343)", "Delete SimpleName: makeDocument(452)", "Delete NullLiteral(453)", "Delete NullLiteral(454)", "Delete MethodInvocation(455)"]}}, {"Block_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: rc to MethodInvocation at 1", "INS SimpleName: RenderContext to SimpleType: RenderContext at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getOut to MethodInvocation at 1", "INS SimpleName: rc to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 6", "INS SimpleName: TokenConsumer to SimpleType: TokenConsumer at 0", "INS SimpleName: renderBody to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: renderBlock to MethodDeclaration at 3", "INS SimpleName: out to VariableDeclarationFragment at 0", "INS SimpleType: RenderContext to SingleVariableDeclaration at 0", "INS SimpleType: TokenConsumer to VariableDeclarationStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: rc to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ExpressionStatement to Block at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from renderBlock to renderBody", "operations": ["UPD SimpleName: renderBlock from renderBlock to renderBody"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 4"]}]}}, {"Block_diff": {"operations": ["Insert MethodDeclaration(218) into TypeDeclaration: class(309) at 13", "Move MarkerAnnotation(178) into MethodDeclaration(218) at 0", "Insert Modifier: public(179) into MethodDeclaration(218) at 1", "Insert PrimitiveType: void(180) into MethodDeclaration(218) at 2", "Insert SimpleName: renderBlock(181) into MethodDeclaration(218) at 3", "Insert SingleVariableDeclaration(185) into MethodDeclaration(218) at 4", "Move SingleVariableDeclaration(188) into MethodDeclaration(218) at 5", "Insert Block(217) into MethodDeclaration(218) at 6", "Update SimpleName: renderBlock(181) to renderBody", "Insert SimpleType: RenderContext(183) into SingleVariableDeclaration(185) at 0", "Insert SimpleName: rc(184) into SingleVariableDeclaration(185) at 1", "Insert VariableDeclarationStatement(196) into Block(217) at 0", "Move ExpressionStatement(202) into Block(217) at 1", "Move ExpressionStatement(207) into Block(217) at 2", "Insert ExpressionStatement(211) into Block(217) at 3", "Move ExpressionStatement(262) into Block(217) at 4", "Insert SimpleName: RenderContext(182) into SimpleType: RenderContext(183) at 0", "Insert SimpleType: TokenConsumer(190) into VariableDeclarationStatement(196) at 0", "Insert VariableDeclarationFragment(195) into VariableDeclarationStatement(196) at 1", "Insert MethodInvocation(210) into ExpressionStatement(211) at 0", "Insert SimpleName: TokenConsumer(189) into SimpleType: TokenConsumer(190) at 0", "Insert SimpleName: out(191) into VariableDeclarationFragment(195) at 0", "Insert MethodInvocation(194) into VariableDeclarationFragment(195) at 1", "Insert SimpleName: renderBody(208) into MethodInvocation(210) at 0", "Insert SimpleName: rc(209) into MethodInvocation(210) at 1", "Insert SimpleName: rc(192) into MethodInvocation(194) at 0", "Insert SimpleName: getOut(193) into MethodInvocation(194) at 1"]}}, {"CatchStmt_cluster": {"actions": [{"root": "UPDATE from Statement to Block", "operations": ["UPD SimpleType: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block"]}]}}, {"CatchStmt_diff": {"operations": ["Update SimpleType: Statement(33) to Block", "Update SimpleType: Statement(166) to Block", "Update SimpleName: Statement(32) to Block", "Update SimpleType: Statement(90) to Block", "Update SimpleName: Statement(165) to Block", "Update SimpleName: Statement(89) to Block", "Update SimpleType: Statement(70) to Block", "Update SimpleName: Statement(69) to Block", "Update SimpleType: Statement(146) to Block", "Update SimpleName: Statement(145) to Block"]}}, {"FinallyStmt_cluster": {"actions": [{"root": "UPDATE from Statement to Block", "operations": ["UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block"]}, {"root": "UPDATE from List<? extends Statement> to List<? extends Block>", "operations": ["UPD ParameterizedType: List<? extends Statement> from List<? extends Statement> to List<? extends Block>"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: size to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: IndexOutOfBoundsException to SimpleType: IndexOutOfBoundsException at 0", "INS SimpleName: children to MethodInvocation at 0", "INS SimpleType: IndexOutOfBoundsException to ClassInstanceCreation at 0", "INS NumberLiteral: 1 to InfixExpression: != at 1", "INS ClassInstanceCreation to ThrowStatement at 0"]}, {"root": "UPDATE from ? extends Statement to ? extends Block", "operations": ["UPD WildcardType: ? extends Statement from ? extends Statement to ? extends Block"]}]}}, {"FinallyStmt_diff": {"operations": ["Update SimpleType: Statement(18) to Block", "Update SimpleType: Statement(77) to Block", "Update SimpleName: Statement(17) to Block", "Update ParameterizedType: List<? extends Statement>(43) to List<? extends Block>", "Update SimpleType: Statement(61) to Block", "Update SimpleName: Statement(76) to Block", "Insert IfStatement(115) into Block(116) at 2", "Update WildcardType: ? extends Statement(42) to ? extends Block", "Update SimpleName: Statement(60) to Block", "Insert InfixExpression: !=(109) into IfStatement(115) at 0", "Insert Block(114) into IfStatement(115) at 1", "Update SimpleType: Statement(41) to Block", "Update SimpleType: Statement(66) to Block", "Insert MethodInvocation(107) into InfixExpression: !=(109) at 0", "Insert NumberLiteral: 1(108) into InfixExpression: !=(109) at 1", "Insert ThrowStatement(113) into Block(114) at 0", "Update SimpleName: Statement(40) to Block", "Update SimpleName: Statement(65) to Block", "Update SimpleType: Statement(95) to Block", "Insert MethodInvocation(105) into MethodInvocation(107) at 0", "Insert SimpleName: size(106) into MethodInvocation(107) at 1", "Insert ClassInstanceCreation(112) into ThrowStatement(113) at 0", "Update SimpleName: Statement(94) to Block", "Insert SimpleName: children(104) into MethodInvocation(105) at 0", "Insert SimpleType: IndexOutOfBoundsException(111) into ClassInstanceCreation(112) at 0", "Insert SimpleName: IndexOutOfBoundsException(110) into SimpleType: IndexOutOfBoundsException(111) at 0"]}}, {"ObjectConstructor_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.google.caja.parser.ParserBase to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: uqVal to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: uqVal to MethodInvocation at 2", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: uqVal to Assignment: = at 0", "INS PrefixExpression: ! to InfixExpression: && at 3", "INS MethodInvocation to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: key to InstanceofExpression at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS MethodInvocation to InfixExpression: && at 2", "INS SimpleName: consume to MethodInvocation at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: key to CastExpression at 1", "INS IfStatement to Block at 3", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS InstanceofExpression to InfixExpression: && at 1", "INS SimpleName: isJavascriptIdentifier to MethodInvocation at 1", "INS SimpleName: out to MethodInvocation at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS Block to IfStatement at 1", "INS SimpleName: uqVal to MethodInvocation at 2", "INS SimpleName: uqVal to MethodInvocation at 2", "INS SimpleType: StringLiteral to CastExpression at 0", "INS SimpleName: rawObjKeys to MethodInvocation at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS StringLiteral: \"set\" to MethodInvocation at 0", "INS StringLiteral: \"get\" to MethodInvocation at 0", "INS SimpleName: rc to MethodInvocation at 0", "INS Assignment: = to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: StringLiteral to SimpleType: StringLiteral at 0", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: getUnquotedValue to MethodInvocation at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS SimpleName: StringLiteral to SimpleType: StringLiteral at 0", "INS SimpleName: ParserBase to MethodInvocation at 0", "INS SimpleType: StringLiteral to InstanceofExpression at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}]}}, {"ObjectConstructor_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(524) at 3", "Insert QualifiedName: com.google.caja.parser.ParserBase(6) into ImportDeclaration(7) at 0", "Insert VariableDeclarationStatement(411) into Block(497) at 2", "Insert IfStatement(455) into Block(497) at 3", "Insert SimpleType: String(408) into VariableDeclarationStatement(411) at 0", "Insert VariableDeclarationFragment(410) into VariableDeclarationStatement(411) at 1", "Insert InfixExpression: &&(442) into IfStatement(455) at 0", "Insert Block(448) into IfStatement(455) at 1", "Insert Block(454) into IfStatement(455) at 2", "Insert SimpleName: String(407) into SimpleType: String(408) at 0", "Insert SimpleName: uqVal(409) into VariableDeclarationFragment(410) at 0", "Insert MethodInvocation(414) into InfixExpression: &&(442) at 0", "Insert InstanceofExpression(418) into InfixExpression: &&(442) at 1", "Insert MethodInvocation(430) into InfixExpression: &&(442) at 2", "Insert PrefixExpression: !(441) into InfixExpression: &&(442) at 3", "Insert ExpressionStatement(447) into Block(448) at 0", "Move ExpressionStatement(409) into Block(454) at 0", "Insert SimpleName: rc(412) into MethodInvocation(414) at 0", "Insert SimpleName: rawObjKeys(413) into MethodInvocation(414) at 1", "Insert SimpleName: key(415) into InstanceofExpression(418) at 0", "Insert SimpleType: StringLiteral(417) into InstanceofExpression(418) at 1", "Insert SimpleName: ParserBase(419) into MethodInvocation(430) at 0", "Insert SimpleName: isJavascriptIdentifier(420) into MethodInvocation(430) at 1", "Insert Assignment: =(429) into MethodInvocation(430) at 2", "Insert ParenthesizedExpression(440) into PrefixExpression: !(441) at 0", "Insert MethodInvocation(446) into ExpressionStatement(447) at 0", "Insert SimpleName: StringLiteral(416) into SimpleType: StringLiteral(417) at 0", "Insert SimpleName: uqVal(421) into Assignment: =(429) at 0", "Insert MethodInvocation(428) into Assignment: =(429) at 1", "Insert InfixExpression: ||(439) into ParenthesizedExpression(440) at 0", "Insert SimpleName: out(443) into MethodInvocation(446) at 0", "Insert SimpleName: consume(444) into MethodInvocation(446) at 1", "Insert SimpleName: uqVal(445) into MethodInvocation(446) at 2", "Insert ParenthesizedExpression(426) into MethodInvocation(428) at 0", "Insert SimpleName: getUnquotedValue(427) into MethodInvocation(428) at 1", "Insert MethodInvocation(434) into InfixExpression: ||(439) at 0", "Insert MethodInvocation(438) into InfixExpression: ||(439) at 1", "Insert CastExpression(425) into ParenthesizedExpression(426) at 0", "Insert StringLiteral: \"get\"(431) into MethodInvocation(434) at 0", "Insert SimpleName: equals(432) into MethodInvocation(434) at 1", "Insert SimpleName: uqVal(433) into MethodInvocation(434) at 2", "Insert StringLiteral: \"set\"(435) into MethodInvocation(438) at 0", "Insert SimpleName: equals(436) into MethodInvocation(438) at 1", "Insert SimpleName: uqVal(437) into MethodInvocation(438) at 2", "Insert SimpleType: StringLiteral(423) into CastExpression(425) at 0", "Insert SimpleName: key(424) into CastExpression(425) at 1", "Insert SimpleName: StringLiteral(422) into SimpleType: StringLiteral(423) at 0"]}}, {"Operation_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: Expression to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: right to MethodInvocation at 0", "INS SimpleName: left to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: create to MethodInvocation at 0", "INS SimpleName: right to SingleVariableDeclaration at 1", "INS SimpleName: getFilePosition to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: Operation to SimpleType: Operation at 0", "INS SimpleName: left to MethodInvocation at 3", "INS SimpleName: getFilePosition to MethodInvocation at 1", "INS SimpleType: Expression to SingleVariableDeclaration at 0", "INS SimpleType: Expression to SingleVariableDeclaration at 0", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: middle to SingleVariableDeclaration at 1", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: FilePosition to MethodInvocation at 0", "INS SimpleName: span to MethodInvocation at 1", "INS SimpleName: left to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: right to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: middle to MethodInvocation at 4", "INS Modifier: static to MethodDeclaration at 1", "INS QualifiedName: Operator.TERNARY to MethodInvocation at 2", "INS SimpleType: Operation to MethodDeclaration at 2", "INS SimpleName: createTernary to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0"]}]}}, {"Operation_diff": {"operations": ["Insert MethodDeclaration(333) into TypeDeclaration: class(2615) at 12", "Insert Modifier: public(299) into MethodDeclaration(333) at 0", "Insert Modifier: static(300) into MethodDeclaration(333) at 1", "Insert SimpleType: Operation(302) into MethodDeclaration(333) at 2", "Insert SimpleName: createTernary(303) into MethodDeclaration(333) at 3", "Insert SingleVariableDeclaration(307) into MethodDeclaration(333) at 4", "Insert SingleVariableDeclaration(311) into MethodDeclaration(333) at 5", "Insert SingleVariableDeclaration(315) into MethodDeclaration(333) at 6", "Insert Block(332) into MethodDeclaration(333) at 7", "Insert SimpleName: Operation(301) into SimpleType: Operation(302) at 0", "Insert SimpleType: Expression(305) into SingleVariableDeclaration(307) at 0", "Insert SimpleName: left(306) into SingleVariableDeclaration(307) at 1", "Insert SimpleType: Expression(309) into SingleVariableDeclaration(311) at 0", "Insert SimpleName: middle(310) into SingleVariableDeclaration(311) at 1", "Insert SimpleType: Expression(313) into SingleVariableDeclaration(315) at 0", "Insert SimpleName: right(314) into SingleVariableDeclaration(315) at 1", "Insert ReturnStatement(331) into Block(332) at 0", "Insert SimpleName: Expression(304) into SimpleType: Expression(305) at 0", "Insert SimpleName: Expression(308) into SimpleType: Expression(309) at 0", "Insert SimpleName: Expression(312) into SimpleType: Expression(313) at 0", "Insert MethodInvocation(330) into ReturnStatement(331) at 0", "Insert SimpleName: create(316) into MethodInvocation(330) at 0", "Insert MethodInvocation(325) into MethodInvocation(330) at 1", "Insert QualifiedName: Operator.TERNARY(326) into MethodInvocation(330) at 2", "Insert SimpleName: left(327) into MethodInvocation(330) at 3", "Insert SimpleName: middle(328) into MethodInvocation(330) at 4", "Insert SimpleName: right(329) into MethodInvocation(330) at 5", "Insert SimpleName: FilePosition(317) into MethodInvocation(325) at 0", "Insert SimpleName: span(318) into MethodInvocation(325) at 1", "Insert MethodInvocation(321) into MethodInvocation(325) at 2", "Insert MethodInvocation(324) into MethodInvocation(325) at 3", "Insert SimpleName: left(319) into MethodInvocation(321) at 0", "Insert SimpleName: getFilePosition(320) into MethodInvocation(321) at 1", "Insert SimpleName: right(322) into MethodInvocation(324) at 0", "Insert SimpleName: getFilePosition(323) into MethodInvocation(324) at 1"]}}, {"Parser_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 37", "operations": ["INS SimpleType: Block to CastExpression at 0", "INS QualifiedName: Punctuation.LCURLY to MethodInvocation at 2", "INS SimpleType: ParseException to MethodDeclaration at 3", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: Block to SimpleType: Block at 0", "INS SimpleName: expectToken to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: tq to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS SimpleName: ParseException to SimpleType: ParseException at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: Block to SimpleType: Block at 0", "INS SimpleName: parseTerminatedStatement to MethodInvocation at 0", "INS SimpleType: Block to MethodDeclaration at 1", "INS MethodInvocation to CastExpression at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: lookaheadToken to MethodInvocation at 1", "INS QualifiedName: Punctuation.LCURLY to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: tq to MethodInvocation at 0", "INS SimpleName: parseBodyBlock to MethodDeclaration at 2", "INS ReturnStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: tq to MethodInvocation at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleType: MessageLevel to VariableDeclarationStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS QualifiedName: Punctuation.RCURLY to MethodInvocation at 2", "INS SimpleName: lookaheadToken to MethodInvocation at 1", "INS QualifiedName: MessageLevel.LOG to ConditionalExpression at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS InfixExpression: || to ConditionalExpression at 0", "INS SimpleName: lvl to VariableDeclarationFragment at 0", "INS QualifiedName: MessageLevel.LINT to ConditionalExpression at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: MessageLevel to SimpleType: MessageLevel at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: tq to MethodInvocation at 0"]}, {"root": "INS SimpleName: lvl to MethodInvocation at 3", "operations": ["INS SimpleName: lvl to MethodInvocation at 3"]}, {"root": "UPDATE from Statement to Block", "operations": ["UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block"]}, {"root": "UPDATE from parseBody to parseBodyBlock", "operations": ["UPD SimpleName: parseBody from parseBody to parseBodyBlock", "UPD SimpleName: parseBody from parseBody to parseBodyBlock", "UPD SimpleName: parseBody from parseBody to parseBodyBlock"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}]}}, {"Parser_diff": {"operations": ["Insert MethodDeclaration(4926) into TypeDeclaration: class(5564) at 37", "Insert Modifier: private(4901) into MethodDeclaration(4926) at 0", "Insert SimpleType: Block(4903) into MethodDeclaration(4926) at 1", "Insert SimpleName: parseBodyBlock(4904) into MethodDeclaration(4926) at 2", "Insert SimpleType: ParseException(4906) into MethodDeclaration(4926) at 3", "Insert Block(4925) into MethodDeclaration(4926) at 4", "Insert SimpleName: Block(4902) into SimpleType: Block(4903) at 0", "Insert SimpleName: ParseException(4905) into SimpleType: ParseException(4906) at 0", "Insert IfStatement(4918) into Block(4925) at 0", "Insert ReturnStatement(4924) into Block(4925) at 1", "Insert PrefixExpression: !(4911) into IfStatement(4918) at 0", "Insert Block(4917) into IfStatement(4918) at 1", "Insert CastExpression(4923) into ReturnStatement(4924) at 0", "Insert VariableDeclarationStatement(4553) into Block(4561) at 1", "Insert MethodInvocation(4910) into PrefixExpression: !(4911) at 0", "Insert ExpressionStatement(4916) into Block(4917) at 0", "Insert SimpleType: Block(4920) into CastExpression(4923) at 0", "Insert MethodInvocation(4922) into CastExpression(4923) at 1", "Insert SimpleType: MessageLevel(4539) into VariableDeclarationStatement(4553) at 0", "Insert VariableDeclarationFragment(4552) into VariableDeclarationStatement(4553) at 1", "Insert SimpleName: tq(4907) into MethodInvocation(4910) at 0", "Insert SimpleName: lookaheadToken(4908) into MethodInvocation(4910) at 1", "Insert QualifiedName: Punctuation.LCURLY(4909) into MethodInvocation(4910) at 2", "Insert MethodInvocation(4915) into ExpressionStatement(4916) at 0", "Insert SimpleName: Block(4919) into SimpleType: Block(4920) at 0", "Insert SimpleName: parseTerminatedStatement(4921) into MethodInvocation(4922) at 0", "Insert SimpleName: MessageLevel(4538) into SimpleType: MessageLevel(4539) at 0", "Insert SimpleName: lvl(4540) into VariableDeclarationFragment(4552) at 0", "Insert ConditionalExpression(4551) into VariableDeclarationFragment(4552) at 1", "Insert SimpleName: lvl(4557) into MethodInvocation(4559) at 3", "Insert SimpleName: tq(4912) into MethodInvocation(4915) at 0", "Insert SimpleName: expectToken(4913) into MethodInvocation(4915) at 1", "Insert QualifiedName: Punctuation.LCURLY(4914) into MethodInvocation(4915) at 2", "Update SimpleType: Statement(1995) to Block", "Insert InfixExpression: ||(4548) into ConditionalExpression(4551) at 0", "Insert QualifiedName: MessageLevel.LOG(4549) into ConditionalExpression(4551) at 1", "Insert QualifiedName: MessageLevel.LINT(4550) into ConditionalExpression(4551) at 2", "Update SimpleName: Statement(1994) to Block", "Insert MethodInvocation(4543) into InfixExpression: ||(4548) at 0", "Insert MethodInvocation(4547) into InfixExpression: ||(4548) at 1", "Update SimpleName: parseBody(1997) to parseBodyBlock", "Update SimpleType: Statement(2081) to Block", "Update SimpleType: Statement(2121) to Block", "Insert SimpleName: tq(4541) into MethodInvocation(4543) at 0", "Insert SimpleName: isEmpty(4542) into MethodInvocation(4543) at 1", "Insert SimpleName: tq(4544) into MethodInvocation(4547) at 0", "Insert SimpleName: lookaheadToken(4545) into MethodInvocation(4547) at 1", "Insert QualifiedName: Punctuation.RCURLY(4546) into MethodInvocation(4547) at 2", "Update SimpleName: Statement(2080) to Block", "Update SimpleName: Statement(2120) to Block", "Update SimpleName: parseBody(2083) to parseBodyBlock", "Update SimpleName: parseBody(2123) to parseBodyBlock", "Delete BooleanLiteral: true(1998)", "Delete BooleanLiteral: true(2084)", "Delete BooleanLiteral: true(2124)"]}}, {"TryStmt_cluster": {"actions": [{"root": "UPDATE from Statement to Block", "operations": ["UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block"]}, {"root": "INS CastExpression to Assignment: = at 1", "operations": ["INS SimpleType: Block to CastExpression at 0", "INS SimpleName: Block to SimpleType: Block at 0", "INS CastExpression to Assignment: = at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV MethodInvocation to CastExpression at 1"]}]}}, {"TryStmt_diff": {"operations": ["Update SimpleType: Statement(20) to Block", "Update SimpleType: Statement(251) to Block", "Update SimpleName: Statement(19) to Block", "Update SimpleType: Statement(82) to Block", "Update SimpleName: Statement(250) to Block", "Update SimpleName: Statement(81) to Block", "Insert CastExpression(162) into Assignment: =(163) at 1", "Insert SimpleType: Block(157) into CastExpression(162) at 0", "Move MethodInvocation(159) into CastExpression(162) at 1", "Insert SimpleName: Block(156) into SimpleType: Block(157) at 0"]}}, {"CajitaRewriter_cluster": {"actions": [{"root": "UPDATE from Statement to Block", "operations": ["UPD SimpleName: Statement from Statement to Block", "UPD SimpleType: Statement from Statement to Block"]}]}}, {"CajitaRewriter_diff": {"operations": ["Update SimpleType: Statement(561) to Block", "Update SimpleName: Statement(560) to Block"]}}, {"Scope_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 5", "operations": ["INS SimpleName: type to InfixExpression: == at 0", "INS StringLiteral: \"this\" to MethodInvocation at 0", "INS StringLiteral: \"arguments\" to MethodInvocation at 0", "INS SimpleName: type to InfixExpression: == at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS QualifiedName: ScopeType.PROGRAM to InfixExpression: == at 1", "INS SimpleName: name to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: && at 1", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: name to MethodInvocation at 2", "INS InfixExpression: == to InfixExpression: && at 0", "INS IfStatement to Block at 2", "INS StringLiteral: \"this\" to MethodInvocation at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS IfStatement to IfStatement at 2", "INS SimpleName: equals to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS QualifiedName: ScopeType.FUNCTION_BODY to InfixExpression: == at 1", "INS SimpleName: name to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS StringLiteral: \"this\" to MethodInvocation at 0", "INS SimpleName: isThis to VariableDeclarationFragment at 0", "INS SimpleName: name to MethodInvocation at 2", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: equals to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"arguments\" to MethodInvocation at 0", "INS SimpleName: name to MethodInvocation at 2", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: isArguments to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS InfixExpression: || to VariableDeclarationFragment at 1", "INS SimpleName: isThis to InfixExpression: || at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isArguments to InfixExpression: || at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: isThisOrArguments to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3", "MOV IfStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "INS Block to ForStatement at 3", "operations": ["INS InfixExpression: == to InfixExpression: && at 0", "INS QualifiedName: ScopeType.FUNCTION_BODY to InfixExpression: == at 1", "INS SimpleName: isThis to InfixExpression: && at 1", "INS Block to ForStatement at 3", "INS ReturnStatement to Block at 0", "INS IfStatement to Block at 1", "INS QualifiedName: s.type to InfixExpression: == at 0", "INS SimpleName: s to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to IfStatement at 1", "INS QualifiedName: ScopeType.PROGRAM to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: isThisOrArguments to IfStatement at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 1", "INS SimpleName: s to ReturnStatement at 0", "INS QualifiedName: s.type to InfixExpression: == at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"Scope_diff": {"operations": ["Insert Block(1291) into MethodDeclaration(1292) at 5", "Insert VariableDeclarationStatement(959) into Block(1018) at 0", "Insert VariableDeclarationStatement(967) into Block(1018) at 1", "Insert VariableDeclarationStatement(974) into Block(1018) at 2", "Move IfStatement(1206) into Block(1291) at 0", "Move IfStatement(1213) into Block(1291) at 1", "Insert IfStatement(1285) into Block(1291) at 2", "Move ReturnStatement(1218) into Block(1291) at 3", "Insert PrimitiveType: boolean(952) into VariableDeclarationStatement(959) at 0", "Insert VariableDeclarationFragment(958) into VariableDeclarationStatement(959) at 1", "Insert PrimitiveType: boolean(960) into VariableDeclarationStatement(967) at 0", "Insert VariableDeclarationFragment(966) into VariableDeclarationStatement(967) at 1", "Insert PrimitiveType: boolean(968) into VariableDeclarationStatement(974) at 0", "Insert VariableDeclarationFragment(973) into VariableDeclarationStatement(974) at 1", "Insert Block(1014) into ForStatement(1015) at 3", "Insert InfixExpression: &&(1269) into IfStatement(1285) at 0", "Insert Block(1272) into IfStatement(1285) at 1", "Insert IfStatement(1284) into IfStatement(1285) at 2", "Insert SimpleName: isThis(953) into VariableDeclarationFragment(958) at 0", "Insert MethodInvocation(957) into VariableDeclarationFragment(958) at 1", "Insert SimpleName: isArguments(961) into VariableDeclarationFragment(966) at 0", "Insert MethodInvocation(965) into VariableDeclarationFragment(966) at 1", "Insert SimpleName: isThisOrArguments(969) into VariableDeclarationFragment(973) at 0", "Insert InfixExpression: ||(972) into VariableDeclarationFragment(973) at 1", "Move IfStatement(971) into Block(1014) at 0", "Insert IfStatement(1013) into Block(1014) at 1", "Insert InfixExpression: ==(1258) into InfixExpression: &&(1269) at 0", "Insert ParenthesizedExpression(1268) into InfixExpression: &&(1269) at 1", "Insert ReturnStatement(1271) into Block(1272) at 0", "Insert InfixExpression: &&(1280) into IfStatement(1284) at 0", "Insert Block(1283) into IfStatement(1284) at 1", "Insert StringLiteral: \"this\"(954) into MethodInvocation(957) at 0", "Insert SimpleName: equals(955) into MethodInvocation(957) at 1", "Insert SimpleName: name(956) into MethodInvocation(957) at 2", "Insert StringLiteral: \"arguments\"(962) into MethodInvocation(965) at 0", "Insert SimpleName: equals(963) into MethodInvocation(965) at 1", "Insert SimpleName: name(964) into MethodInvocation(965) at 2", "Insert SimpleName: isThis(970) into InfixExpression: ||(972) at 0", "Insert SimpleName: isArguments(971) into InfixExpression: ||(972) at 1", "Insert SimpleName: isThisOrArguments(995) into IfStatement(1013) at 0", "Insert Block(1012) into IfStatement(1013) at 1", "Insert SimpleName: type(1256) into InfixExpression: ==(1258) at 0", "Insert QualifiedName: ScopeType.FUNCTION_BODY(1257) into InfixExpression: ==(1258) at 1", "Insert InfixExpression: ||(1267) into ParenthesizedExpression(1268) at 0", "Insert BooleanLiteral: false(1270) into ReturnStatement(1271) at 0", "Insert InfixExpression: ==(1275) into InfixExpression: &&(1280) at 0", "Insert MethodInvocation(1279) into InfixExpression: &&(1280) at 1", "Insert ReturnStatement(1282) into Block(1283) at 0", "Insert IfStatement(1002) into Block(1012) at 0", "Insert IfStatement(1011) into Block(1012) at 1", "Insert MethodInvocation(1262) into InfixExpression: ||(1267) at 0", "Insert MethodInvocation(1266) into InfixExpression: ||(1267) at 1", "Insert SimpleName: type(1273) into InfixExpression: ==(1275) at 0", "Insert QualifiedName: ScopeType.PROGRAM(1274) into InfixExpression: ==(1275) at 1", "Insert StringLiteral: \"this\"(1276) into MethodInvocation(1279) at 0", "Insert SimpleName: equals(1277) into MethodInvocation(1279) at 1", "Insert SimpleName: name(1278) into MethodInvocation(1279) at 2", "Insert BooleanLiteral: false(1281) into ReturnStatement(1282) at 0", "Insert InfixExpression: ==(998) into IfStatement(1002) at 0", "Insert Block(1001) into IfStatement(1002) at 1", "Insert InfixExpression: &&(1007) into IfStatement(1011) at 0", "Insert Block(1010) into IfStatement(1011) at 1", "Insert StringLiteral: \"this\"(1259) into MethodInvocation(1262) at 0", "Insert SimpleName: equals(1260) into MethodInvocation(1262) at 1", "Insert SimpleName: name(1261) into MethodInvocation(1262) at 2", "Insert StringLiteral: \"arguments\"(1263) into MethodInvocation(1266) at 0", "Insert SimpleName: equals(1264) into MethodInvocation(1266) at 1", "Insert SimpleName: name(1265) into MethodInvocation(1266) at 2", "Insert QualifiedName: s.type(996) into InfixExpression: ==(998) at 0", "Insert QualifiedName: ScopeType.FUNCTION_BODY(997) into InfixExpression: ==(998) at 1", "Insert ReturnStatement(1000) into Block(1001) at 0", "Insert InfixExpression: ==(1005) into InfixExpression: &&(1007) at 0", "Insert SimpleName: isThis(1006) into InfixExpression: &&(1007) at 1", "Insert ReturnStatement(1009) into Block(1010) at 0", "Insert SimpleName: s(999) into ReturnStatement(1000) at 0", "Insert QualifiedName: s.type(1003) into InfixExpression: ==(1005) at 0", "Insert QualifiedName: ScopeType.PROGRAM(1004) into InfixExpression: ==(1005) at 1", "Insert SimpleName: s(1008) into ReturnStatement(1009) at 0", "Delete Block(972)", "Delete Block(1219)"]}}, {"CompileHtmlStage_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.util.Callback", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.lexer.FilePosition"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}]}}, {"CompileHtmlStage_diff": {"operations": ["Delete QualifiedName: com.google.caja.util.Callback(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.caja.lexer.FilePosition(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: java.io.IOException(58)", "Delete ImportDeclaration(59)"]}}], "commit_stats": [{"total_files": 31, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "True"}]}