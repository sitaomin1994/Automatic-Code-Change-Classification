{"application": "apache-helix", "csha": "91b32bff94262a459e982b9abfadefa48d8303c9", "files": [{"AutoRebalanceStrategy_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: capacityAcceptor to InfixExpression: != at 0", "INS SimpleName: capacityAcceptor to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: replica to TagElement: @param at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS TextElement:  true if the assignment succeeded, false otherwise to TagElement: @return at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: current to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: current to MethodInvocation at 0", "INS SimpleName: capacityDonor to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: size to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS QualifiedName: current.hasCeilingCapacity to PrefixExpression: ! at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS InfixExpression: % to MethodInvocation at 2", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: current to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: startIndex to InfixExpression: + at 0", "INS QualifiedName: current.capacity to InfixExpression: == at 0", "INS SimpleName: replica to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS NullLiteral to InfixExpression: != at 1", "INS ForStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: capacityAcceptor to Assignment: = at 0", "INS SimpleName: startIndex to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: index to InfixExpression: < at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  The replica to assign to TagElement: @param at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to InfixExpression: % at 1", "INS SimpleName: capacityAcceptor to InfixExpression: != at 0", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS QualifiedName: current.hasCeilingCapacity to InfixExpression: && at 0", "INS SimpleName: _liveNodesList to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS InfixExpression: + to InfixExpression: < at 1", "INS SimpleName: current to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: != at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: computeRandomStartIndex to MethodInvocation at 0", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: _liveNodesList to MethodInvocation at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: current.currentlyAssigned to InfixExpression: > at 1", "INS IfStatement to Block at 2", "INS SimpleName: index to InfixExpression: % at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: capacityDonor to InfixExpression: != at 0", "INS SimpleName: _liveNodesList to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: startIndex to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS QualifiedName: current.currentlyAssigned to InfixExpression: == at 1", "INS IfStatement to Block at 4", "INS SimpleName: replica to MethodInvocation at 2", "INS InfixExpression: == to InfixExpression: && at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleType: Replica to SingleVariableDeclaration at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: replica to MethodInvocation at 1", "INS ReturnStatement to Block at 5", "INS SimpleName: assignOrphanByMakingRoom to MethodDeclaration at 3", "INS SimpleName: capacityDonor to InfixExpression: != at 0", "INS SimpleName: Replica to SimpleType: Replica at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: canAddIfCapacity to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: replica to MethodInvocation at 2", "INS InfixExpression: != to InfixExpression: && at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: capacityAcceptor to MethodInvocation at 0", "INS SimpleName: steal to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: replica to MethodInvocation at 3", "INS SimpleName: capacityAcceptor to InfixExpression: == at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: current.capacity to InfixExpression: > at 0", "INS SimpleName: capacityDonor to VariableDeclarationFragment at 0", "INS SimpleName: size to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS TextElement: If an orphan can't be assigned normally, see if a node can borrow capacity to accept it to TagElement at 0", "INS Block to IfStatement at 1", "INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: capacityDonor to InfixExpression: == at 0", "INS InfixExpression: < to ForStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: canAddIfCapacity to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS BreakStatement to Block at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: index to PostfixExpression: ++ at 0", "INS SimpleName: index to VariableDeclarationFragment at 0", "INS SimpleName: current to Assignment: = at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: capacityDonor to Assignment: = at 0", "INS Block to ForStatement at 3", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS ReturnStatement to Block at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: computeRandomStartIndex to MethodDeclaration at 3", "INS SimpleType: Replica to SingleVariableDeclaration at 1", "INS SimpleName: Replica to SimpleType: Replica at 0", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: replica to SingleVariableDeclaration at 2", "INS TextElement:  The starting node index to try to TagElement: @return at 0", "INS Modifier: private to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS TextElement: Get a live node index to try first for a replica so that each possible start index is to TagElement at 0", "INS TextElement: roughly uniformly assigned. to TagElement at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS TagElement: @return to Javadoc at 2", "INS TextElement:  The replica to assign to TagElement: @param at 1", "INS PrimitiveType: int to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: replica to TagElement: @param at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS Modifier: public to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: hasCeilingCapacity to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS PrimitiveType: boolean to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: replica to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: canAddIfCapacity to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: Replica to SimpleType: Replica at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleType: Replica to SingleVariableDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: canAdd to MethodDeclaration at 3", "INS SimpleName: replica to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS Block to MethodDeclaration at 6", "INS SimpleName: replica to TagElement: @param at 0", "INS SimpleName: Replica to SimpleType: Replica at 0", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS PostfixExpression: -- to ExpressionStatement at 0", "INS SimpleName: donor to TagElement: @param at 0", "INS TextElement:  The node that has excess capacity to TagElement: @param at 1", "INS SimpleName: steal to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: currentlyAssigned to PostfixExpression: ++ at 0", "INS SimpleName: replica to SingleVariableDeclaration at 1", "INS SimpleName: nonPreferred to MethodInvocation at 0", "INS SimpleName: hasCeilingCapacity to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PostfixExpression: ++ to ExpressionStatement at 0", "INS TextElement:  The replica to receive to TagElement: @param at 1", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 5", "INS SimpleName: replica to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Replica to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 2", "INS BooleanLiteral: false to Assignment: = at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TagElement: @param to Javadoc at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: add to MethodInvocation at 1", "INS QualifiedName: donor.hasCeilingCapacity to Assignment: = at 0", "INS SimpleName: capacity to PostfixExpression: ++ at 0", "INS SimpleName: donor to SingleVariableDeclaration at 1", "INS TextElement: Receive a replica by stealing capacity from another Node to TagElement at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS QualifiedName: donor.capacity to PostfixExpression: -- at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: replica to TagElement: @param at 0", "INS TagElement to Javadoc at 0", "INS TextElement: Check if this replica can be legally added to this node, provided that it has enough to TagElement at 0", "INS TextElement:  The replica to test to TagElement: @param at 1", "INS TextElement: capacity. to TagElement at 1", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @return to Javadoc at 2", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  true if the assignment can be made, false otherwise to TagElement: @return at 0"]}, {"root": "UPDATE from canAdd to canAddIfCapacity", "operations": ["UPD SimpleName: canAdd from canAdd to canAddIfCapacity"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV InfixExpression: % to ReturnStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS QualifiedName: node.hasCeilingCapacity to Assignment: = at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS SimpleName: usingCeiling to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 6", "INS SimpleName: usingCeiling to Assignment: = at 1", "INS QualifiedName: node.hasCeilingCapacity to Assignment: = at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: added to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: computeRandomStartIndex to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: added to PrefixExpression: ! at 0", "INS SimpleName: added to Assignment: = at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS IfStatement to Block at 5", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS IfStatement to Block at 6", "INS Block to IfStatement at 1", "INS SimpleName: added to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS BooleanLiteral: true to Assignment: = at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: usingCeiling to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: startIndex to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: replica to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS ExpressionStatement to Block at 2", "INS SimpleName: added to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "UPDATE from _liveNodesList to assignOrphanByMakingRoom", "operations": ["UPD SimpleName: _liveNodesList from _liveNodesList to assignOrphanByMakingRoom"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: _liveNodesList to MethodInvocation at 0", "MOV SimpleName: size to MethodInvocation at 1"]}, {"root": "UPDATE from size to replica", "operations": ["UPD SimpleName: size from size to replica"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: computeRandomStartIndex to MethodInvocation at 0", "INS SimpleName: replica to MethodInvocation at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL NumberLiteral: 0x7FFFFFFF", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL InfixExpression: %", "DEL VariableDeclarationFragment", "DEL InfixExpression: &", "DEL SimpleName: hashCode", "DEL ParenthesizedExpression"]}]}}, {"AutoRebalanceStrategy_diff": {"operations": ["Insert MethodDeclaration(1286) into TypeDeclaration: class(2671) at 21", "Insert MethodDeclaration(1789) into TypeDeclaration: class(2671) at 25", "Insert Javadoc(1158) into MethodDeclaration(1286) at 0", "Insert Modifier: private(1159) into MethodDeclaration(1286) at 1", "Insert PrimitiveType: boolean(1160) into MethodDeclaration(1286) at 2", "Insert SimpleName: assignOrphanByMakingRoom(1161) into MethodDeclaration(1286) at 3", "Insert SingleVariableDeclaration(1165) into MethodDeclaration(1286) at 4", "Insert Block(1285) into MethodDeclaration(1286) at 5", "Insert Javadoc(1768) into MethodDeclaration(1789) at 0", "Insert Modifier: private(1769) into MethodDeclaration(1789) at 1", "Insert PrimitiveType: int(1770) into MethodDeclaration(1789) at 2", "Insert SimpleName: computeRandomStartIndex(1771) into MethodDeclaration(1789) at 3", "Insert SingleVariableDeclaration(1776) into MethodDeclaration(1789) at 4", "Insert Block(1788) into MethodDeclaration(1789) at 5", "Insert FieldDeclaration(2281) into TypeDeclaration: class(2522) at 4", "Insert MethodDeclaration(2377) into TypeDeclaration: class(2522) at 10", "Insert MethodDeclaration(2477) into TypeDeclaration: class(2522) at 12", "Insert TagElement(1152) into Javadoc(1158) at 0", "Insert TagElement: @param(1155) into Javadoc(1158) at 1", "Insert TagElement: @return(1157) into Javadoc(1158) at 2", "Insert SimpleType: Replica(1163) into SingleVariableDeclaration(1165) at 0", "Insert SimpleName: replica(1164) into SingleVariableDeclaration(1165) at 1", "Insert VariableDeclarationStatement(1171) into Block(1285) at 0", "Insert VariableDeclarationStatement(1177) into Block(1285) at 1", "Insert VariableDeclarationStatement(1184) into Block(1285) at 2", "Insert ForStatement(1265) into Block(1285) at 3", "Insert IfStatement(1282) into Block(1285) at 4", "Insert ReturnStatement(1284) into Block(1285) at 5", "Insert TagElement(1762) into Javadoc(1768) at 0", "Insert TagElement: @param(1765) into Javadoc(1768) at 1", "Insert TagElement: @return(1767) into Javadoc(1768) at 2", "Insert Modifier: final(1772) into SingleVariableDeclaration(1776) at 0", "Insert SimpleType: Replica(1774) into SingleVariableDeclaration(1776) at 1", "Insert SimpleName: replica(1775) into SingleVariableDeclaration(1776) at 2", "Insert ReturnStatement(1787) into Block(1788) at 0", "Insert Modifier: public(2277) into FieldDeclaration(2281) at 0", "Insert PrimitiveType: boolean(2278) into FieldDeclaration(2281) at 1", "Insert VariableDeclarationFragment(2280) into FieldDeclaration(2281) at 2", "Move Javadoc(2161) into MethodDeclaration(2377) at 0", "Insert Modifier: public(2358) into MethodDeclaration(2377) at 1", "Insert PrimitiveType: boolean(2359) into MethodDeclaration(2377) at 2", "Insert SimpleName: canAdd(2360) into MethodDeclaration(2377) at 3", "Insert SingleVariableDeclaration(2364) into MethodDeclaration(2377) at 4", "Insert Block(2376) into MethodDeclaration(2377) at 5", "Insert Javadoc(2386) into MethodDeclaration(2433) at 0", "Update SimpleName: canAdd(2164) to canAddIfCapacity", "Insert Javadoc(2442) into MethodDeclaration(2477) at 0", "Insert Modifier: public(2443) into MethodDeclaration(2477) at 1", "Insert PrimitiveType: void(2444) into MethodDeclaration(2477) at 2", "Insert SimpleName: steal(2445) into MethodDeclaration(2477) at 3", "Insert SingleVariableDeclaration(2449) into MethodDeclaration(2477) at 4", "Insert SingleVariableDeclaration(2453) into MethodDeclaration(2477) at 5", "Insert Block(2476) into MethodDeclaration(2477) at 6", "Insert TextElement: If an orphan can't be assigned normally, see if a node can borrow capacity to accept it(1151) into TagElement(1152) at 0", "Insert SimpleName: replica(1153) into TagElement: @param(1155) at 0", "Insert TextElement:  The replica to assign(1154) into TagElement: @param(1155) at 1", "Insert TextElement:  true if the assignment succeeded, false otherwise(1156) into TagElement: @return(1157) at 0", "Insert SimpleName: Replica(1162) into SimpleType: Replica(1163) at 0", "Insert SimpleType: Node(1167) into VariableDeclarationStatement(1171) at 0", "Insert VariableDeclarationFragment(1170) into VariableDeclarationStatement(1171) at 1", "Insert SimpleType: Node(1173) into VariableDeclarationStatement(1177) at 0", "Insert VariableDeclarationFragment(1176) into VariableDeclarationStatement(1177) at 1", "Insert PrimitiveType: int(1178) into VariableDeclarationStatement(1184) at 0", "Insert VariableDeclarationFragment(1183) into VariableDeclarationStatement(1184) at 1", "Insert VariableDeclarationExpression(1189) into ForStatement(1265) at 0", "Insert InfixExpression: <(1196) into ForStatement(1265) at 1", "Insert PostfixExpression: ++(1198) into ForStatement(1265) at 2", "Insert Block(1264) into ForStatement(1265) at 3", "Insert InfixExpression: &&(1272) into IfStatement(1282) at 0", "Insert Block(1281) into IfStatement(1282) at 1", "Insert BooleanLiteral: false(1283) into ReturnStatement(1284) at 0", "Insert TextElement: Get a live node index to try first for a replica so that each possible start index is(1760) into TagElement(1762) at 0", "Insert TextElement: roughly uniformly assigned.(1761) into TagElement(1762) at 1", "Insert SimpleName: replica(1763) into TagElement: @param(1765) at 0", "Insert TextElement:  The replica to assign(1764) into TagElement: @param(1765) at 1", "Insert TextElement:  The starting node index to try(1766) into TagElement: @return(1767) at 0", "Insert SimpleName: Replica(1773) into SimpleType: Replica(1774) at 0", "Move InfixExpression: %(1174) into ReturnStatement(1787) at 0", "Insert SimpleName: hasCeilingCapacity(2279) into VariableDeclarationFragment(2280) at 0", "Insert SimpleType: Replica(2362) into SingleVariableDeclaration(2364) at 0", "Insert SimpleName: replica(2363) into SingleVariableDeclaration(2364) at 1", "Move IfStatement(2181) into Block(2376) at 0", "Insert ReturnStatement(2375) into Block(2376) at 1", "Insert TagElement(2380) into Javadoc(2386) at 0", "Insert TagElement: @param(2383) into Javadoc(2386) at 1", "Insert TagElement: @return(2385) into Javadoc(2386) at 2", "Insert TagElement(2435) into Javadoc(2442) at 0", "Insert TagElement: @param(2438) into Javadoc(2442) at 1", "Insert TagElement: @param(2441) into Javadoc(2442) at 2", "Insert SimpleType: Node(2447) into SingleVariableDeclaration(2449) at 0", "Insert SimpleName: donor(2448) into SingleVariableDeclaration(2449) at 1", "Insert SimpleType: Replica(2451) into SingleVariableDeclaration(2453) at 0", "Insert SimpleName: replica(2452) into SingleVariableDeclaration(2453) at 1", "Insert ExpressionStatement(2457) into Block(2476) at 0", "Insert ExpressionStatement(2460) into Block(2476) at 1", "Insert ExpressionStatement(2464) into Block(2476) at 2", "Insert ExpressionStatement(2467) into Block(2476) at 3", "Insert ExpressionStatement(2470) into Block(2476) at 4", "Insert ExpressionStatement(2475) into Block(2476) at 5", "Insert ExpressionStatement(755) into Block(762) at 2", "Insert VariableDeclarationStatement(780) into Block(848) at 0", "Insert ExpressionStatement(842) into Block(848) at 6", "Insert VariableDeclarationStatement(1049) into Block(1129) at 1", "Insert VariableDeclarationStatement(1056) into Block(1129) at 2", "Insert IfStatement(1121) into Block(1129) at 4", "Insert IfStatement(1128) into Block(1129) at 5", "Insert SimpleName: Node(1166) into SimpleType: Node(1167) at 0", "Insert SimpleName: capacityDonor(1168) into VariableDeclarationFragment(1170) at 0", "Insert NullLiteral(1169) into VariableDeclarationFragment(1170) at 1", "Insert SimpleName: Node(1172) into SimpleType: Node(1173) at 0", "Insert SimpleName: capacityAcceptor(1174) into VariableDeclarationFragment(1176) at 0", "Insert NullLiteral(1175) into VariableDeclarationFragment(1176) at 1", "Insert SimpleName: startIndex(1179) into VariableDeclarationFragment(1183) at 0", "Insert MethodInvocation(1182) into VariableDeclarationFragment(1183) at 1", "Insert PrimitiveType: int(1185) into VariableDeclarationExpression(1189) at 0", "Insert VariableDeclarationFragment(1188) into VariableDeclarationExpression(1189) at 1", "Insert SimpleName: index(1190) into InfixExpression: <(1196) at 0", "Insert InfixExpression: +(1195) into InfixExpression: <(1196) at 1", "Insert SimpleName: index(1197) into PostfixExpression: ++(1198) at 0", "Insert VariableDeclarationStatement(1211) into Block(1264) at 0", "Insert IfStatement(1253) into Block(1264) at 1", "Insert IfStatement(1263) into Block(1264) at 2", "Insert InfixExpression: !=(1268) into InfixExpression: &&(1272) at 0", "Insert InfixExpression: !=(1271) into InfixExpression: &&(1272) at 1", "Insert ExpressionStatement(1278) into Block(1281) at 0", "Insert ReturnStatement(1280) into Block(1281) at 1", "Insert SimpleName: Replica(2361) into SimpleType: Replica(2362) at 0", "Insert MethodInvocation(2374) into ReturnStatement(2375) at 0", "Insert TextElement: Check if this replica can be legally added to this node, provided that it has enough(2378) into TagElement(2380) at 0", "Insert TextElement: capacity.(2379) into TagElement(2380) at 1", "Insert SimpleName: replica(2381) into TagElement: @param(2383) at 0", "Insert TextElement:  The replica to test(2382) into TagElement: @param(2383) at 1", "Insert TextElement:  true if the assignment can be made, false otherwise(2384) into TagElement: @return(2385) at 0", "Insert TextElement: Receive a replica by stealing capacity from another Node(2434) into TagElement(2435) at 0", "Insert SimpleName: donor(2436) into TagElement: @param(2438) at 0", "Insert TextElement:  The node that has excess capacity(2437) into TagElement: @param(2438) at 1", "Insert SimpleName: replica(2439) into TagElement: @param(2441) at 0", "Insert TextElement:  The replica to receive(2440) into TagElement: @param(2441) at 1", "Insert SimpleName: Node(2446) into SimpleType: Node(2447) at 0", "Insert SimpleName: Replica(2450) into SimpleType: Replica(2451) at 0", "Insert Assignment: =(2456) into ExpressionStatement(2457) at 0", "Insert PostfixExpression: --(2459) into ExpressionStatement(2460) at 0", "Insert Assignment: =(2463) into ExpressionStatement(2464) at 0", "Insert PostfixExpression: ++(2466) into ExpressionStatement(2467) at 0", "Insert PostfixExpression: ++(2469) into ExpressionStatement(2470) at 0", "Insert MethodInvocation(2474) into ExpressionStatement(2475) at 0", "Insert Assignment: =(754) into ExpressionStatement(755) at 0", "Insert PrimitiveType: boolean(776) into VariableDeclarationStatement(780) at 0", "Insert VariableDeclarationFragment(779) into VariableDeclarationStatement(780) at 1", "Insert Assignment: =(841) into ExpressionStatement(842) at 0", "Insert PrimitiveType: boolean(1045) into VariableDeclarationStatement(1049) at 0", "Insert VariableDeclarationFragment(1048) into VariableDeclarationStatement(1049) at 1", "Move PrimitiveType: int(1028) into VariableDeclarationStatement(1056) at 0", "Insert VariableDeclarationFragment(1055) into VariableDeclarationStatement(1056) at 1", "Insert PrefixExpression: !(1113) into IfStatement(1121) at 0", "Insert Block(1120) into IfStatement(1121) at 1", "Insert SimpleName: added(1122) into IfStatement(1128) at 0", "Insert Block(1127) into IfStatement(1128) at 1", "Insert SimpleName: computeRandomStartIndex(1180) into MethodInvocation(1182) at 0", "Insert SimpleName: replica(1181) into MethodInvocation(1182) at 1", "Insert SimpleName: index(1186) into VariableDeclarationFragment(1188) at 0", "Insert SimpleName: startIndex(1187) into VariableDeclarationFragment(1188) at 1", "Insert SimpleName: startIndex(1191) into InfixExpression: +(1195) at 0", "Insert MethodInvocation(1194) into InfixExpression: +(1195) at 1", "Insert SimpleType: Node(1200) into VariableDeclarationStatement(1211) at 0", "Insert VariableDeclarationFragment(1210) into VariableDeclarationStatement(1211) at 1", "Insert InfixExpression: &&(1226) into IfStatement(1253) at 0", "Insert Block(1231) into IfStatement(1253) at 1", "Insert IfStatement(1252) into IfStatement(1253) at 2", "Insert InfixExpression: &&(1260) into IfStatement(1263) at 0", "Insert Block(1262) into IfStatement(1263) at 1", "Insert SimpleName: capacityDonor(1266) into InfixExpression: !=(1268) at 0", "Insert NullLiteral(1267) into InfixExpression: !=(1268) at 1", "Insert SimpleName: capacityAcceptor(1269) into InfixExpression: !=(1271) at 0", "Insert NullLiteral(1270) into InfixExpression: !=(1271) at 1", "Insert MethodInvocation(1277) into ExpressionStatement(1278) at 0", "Insert BooleanLiteral: true(1279) into ReturnStatement(1280) at 0", "Insert SimpleName: canAddIfCapacity(2372) into MethodInvocation(2374) at 0", "Insert SimpleName: replica(2373) into MethodInvocation(2374) at 1", "Insert QualifiedName: donor.hasCeilingCapacity(2454) into Assignment: =(2456) at 0", "Insert BooleanLiteral: false(2455) into Assignment: =(2456) at 1", "Insert QualifiedName: donor.capacity(2458) into PostfixExpression: --(2459) at 0", "Insert SimpleName: hasCeilingCapacity(2461) into Assignment: =(2463) at 0", "Insert BooleanLiteral: true(2462) into Assignment: =(2463) at 1", "Insert SimpleName: capacity(2465) into PostfixExpression: ++(2466) at 0", "Insert SimpleName: currentlyAssigned(2468) into PostfixExpression: ++(2469) at 0", "Insert SimpleName: nonPreferred(2471) into MethodInvocation(2474) at 0", "Insert SimpleName: add(2472) into MethodInvocation(2474) at 1", "Insert SimpleName: replica(2473) into MethodInvocation(2474) at 2", "Insert QualifiedName: node.hasCeilingCapacity(752) into Assignment: =(754) at 0", "Insert BooleanLiteral: false(753) into Assignment: =(754) at 1", "Insert SimpleName: usingCeiling(777) into VariableDeclarationFragment(779) at 0", "Insert BooleanLiteral: false(778) into VariableDeclarationFragment(779) at 1", "Insert ExpressionStatement(816) into Block(817) at 2", "Insert QualifiedName: node.hasCeilingCapacity(839) into Assignment: =(841) at 0", "Insert SimpleName: usingCeiling(840) into Assignment: =(841) at 1", "Insert SimpleName: added(1046) into VariableDeclarationFragment(1048) at 0", "Insert BooleanLiteral: false(1047) into VariableDeclarationFragment(1048) at 1", "Move SimpleName: startIndex(1029) into VariableDeclarationFragment(1055) at 0", "Insert MethodInvocation(1054) into VariableDeclarationFragment(1055) at 1", "Insert SimpleName: added(1112) into PrefixExpression: !(1113) at 0", "Insert ExpressionStatement(1119) into Block(1120) at 0", "Move ExpressionStatement(1091) into Block(1127) at 0", "Insert SimpleName: _liveNodesList(1192) into MethodInvocation(1194) at 0", "Insert SimpleName: size(1193) into MethodInvocation(1194) at 1", "Insert SimpleName: Node(1199) into SimpleType: Node(1200) at 0", "Insert SimpleName: current(1201) into VariableDeclarationFragment(1210) at 0", "Insert MethodInvocation(1209) into VariableDeclarationFragment(1210) at 1", "Insert InfixExpression: &&(1222) into InfixExpression: &&(1226) at 0", "Insert InfixExpression: ==(1225) into InfixExpression: &&(1226) at 1", "Insert ExpressionStatement(1230) into Block(1231) at 0", "Insert InfixExpression: &&(1246) into IfStatement(1252) at 0", "Insert Block(1251) into IfStatement(1252) at 1", "Insert InfixExpression: !=(1256) into InfixExpression: &&(1260) at 0", "Insert InfixExpression: !=(1259) into InfixExpression: &&(1260) at 1", "Insert BreakStatement(1261) into Block(1262) at 0", "Insert SimpleName: capacityAcceptor(1273) into MethodInvocation(1277) at 0", "Insert SimpleName: steal(1274) into MethodInvocation(1277) at 1", "Insert SimpleName: capacityDonor(1275) into MethodInvocation(1277) at 2", "Insert SimpleName: replica(1276) into MethodInvocation(1277) at 3", "Insert Assignment: =(815) into ExpressionStatement(816) at 0", "Insert SimpleName: computeRandomStartIndex(1052) into MethodInvocation(1054) at 0", "Move SimpleName: replica(1030) into MethodInvocation(1054) at 1", "Insert Assignment: =(1118) into ExpressionStatement(1119) at 0", "Insert SimpleName: _liveNodesList(1202) into MethodInvocation(1209) at 0", "Insert SimpleName: get(1203) into MethodInvocation(1209) at 1", "Insert InfixExpression: %(1208) into MethodInvocation(1209) at 2", "Insert InfixExpression: &&(1216) into InfixExpression: &&(1222) at 0", "Insert PrefixExpression: !(1221) into InfixExpression: &&(1222) at 1", "Insert SimpleName: capacityDonor(1223) into InfixExpression: ==(1225) at 0", "Insert NullLiteral(1224) into InfixExpression: ==(1225) at 1", "Insert Assignment: =(1229) into ExpressionStatement(1230) at 0", "Insert InfixExpression: &&(1242) into InfixExpression: &&(1246) at 0", "Insert InfixExpression: ==(1245) into InfixExpression: &&(1246) at 1", "Insert ExpressionStatement(1250) into Block(1251) at 0", "Insert SimpleName: capacityDonor(1254) into InfixExpression: !=(1256) at 0", "Insert NullLiteral(1255) into InfixExpression: !=(1256) at 1", "Insert SimpleName: capacityAcceptor(1257) into InfixExpression: !=(1259) at 0", "Insert NullLiteral(1258) into InfixExpression: !=(1259) at 1", "Insert SimpleName: usingCeiling(813) into Assignment: =(815) at 0", "Insert BooleanLiteral: true(814) into Assignment: =(815) at 1", "Insert ExpressionStatement(1106) into Block(1108) at 2", "Insert SimpleName: added(1114) into Assignment: =(1118) at 0", "Insert MethodInvocation(1117) into Assignment: =(1118) at 1", "Insert SimpleName: index(1204) into InfixExpression: %(1208) at 0", "Insert MethodInvocation(1207) into InfixExpression: %(1208) at 1", "Insert QualifiedName: current.hasCeilingCapacity(1212) into InfixExpression: &&(1216) at 0", "Insert InfixExpression: >(1215) into InfixExpression: &&(1216) at 1", "Insert MethodInvocation(1220) into PrefixExpression: !(1221) at 0", "Insert SimpleName: capacityDonor(1227) into Assignment: =(1229) at 0", "Insert SimpleName: current(1228) into Assignment: =(1229) at 1", "Insert InfixExpression: &&(1237) into InfixExpression: &&(1242) at 0", "Insert MethodInvocation(1241) into InfixExpression: &&(1242) at 1", "Insert SimpleName: capacityAcceptor(1243) into InfixExpression: ==(1245) at 0", "Insert NullLiteral(1244) into InfixExpression: ==(1245) at 1", "Insert Assignment: =(1249) into ExpressionStatement(1250) at 0", "Insert Assignment: =(1105) into ExpressionStatement(1106) at 0", "Update SimpleName: _liveNodesList(1036) to assignOrphanByMakingRoom", "Move SimpleName: _liveNodesList(1036) into MethodInvocation(1117) at 0", "Update SimpleName: size(1037) to replica", "Move SimpleName: size(1037) into MethodInvocation(1117) at 1", "Insert SimpleName: _liveNodesList(1205) into MethodInvocation(1207) at 0", "Insert SimpleName: size(1206) into MethodInvocation(1207) at 1", "Insert QualifiedName: current.capacity(1213) into InfixExpression: >(1215) at 0", "Insert QualifiedName: current.currentlyAssigned(1214) into InfixExpression: >(1215) at 1", "Insert SimpleName: current(1217) into MethodInvocation(1220) at 0", "Insert SimpleName: canAddIfCapacity(1218) into MethodInvocation(1220) at 1", "Insert SimpleName: replica(1219) into MethodInvocation(1220) at 2", "Insert PrefixExpression: !(1233) into InfixExpression: &&(1237) at 0", "Insert InfixExpression: ==(1236) into InfixExpression: &&(1237) at 1", "Insert SimpleName: current(1238) into MethodInvocation(1241) at 0", "Insert SimpleName: canAddIfCapacity(1239) into MethodInvocation(1241) at 1", "Insert SimpleName: replica(1240) into MethodInvocation(1241) at 2", "Insert SimpleName: capacityAcceptor(1247) into Assignment: =(1249) at 0", "Insert SimpleName: current(1248) into Assignment: =(1249) at 1", "Insert SimpleName: added(1103) into Assignment: =(1105) at 0", "Insert BooleanLiteral: true(1104) into Assignment: =(1105) at 1", "Insert QualifiedName: current.hasCeilingCapacity(1232) into PrefixExpression: !(1233) at 0", "Insert QualifiedName: current.capacity(1234) into InfixExpression: ==(1236) at 0", "Insert QualifiedName: current.currentlyAssigned(1235) into InfixExpression: ==(1236) at 1", "Insert MethodInvocation(1335) into VariableDeclarationFragment(1336) at 1", "Insert SimpleName: computeRandomStartIndex(1333) into MethodInvocation(1335) at 0", "Insert SimpleName: replica(1334) into MethodInvocation(1335) at 1", "Delete SimpleName: hashCode(1031)", "Delete MethodInvocation(1032)", "Delete NumberLiteral: 0x7FFFFFFF(1033)", "Delete InfixExpression: &(1034)", "Delete ParenthesizedExpression(1035)", "Delete MethodInvocation(1038)", "Delete InfixExpression: %(1039)", "Delete VariableDeclarationFragment(1040)", "Delete VariableDeclarationStatement(1041)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "True"}]}