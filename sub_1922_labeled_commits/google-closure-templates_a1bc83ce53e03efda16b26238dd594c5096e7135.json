{"application": "google-closure-templates", "csha": "a1bc83ce53e03efda16b26238dd594c5096e7135", "files": [{"LazyClosureCompiler_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: com.google.template.soy.jbcsrc.BytecodeUtils.constant to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 36", "operations": ["INS QualifiedName: com.google.template.soy.soytree.RawTextNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 36"]}, {"root": "INS ImportDeclaration to CompilationUnit at 40", "operations": ["INS QualifiedName: com.google.template.soy.soytree.SoyNode.StandaloneNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 40"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: builder to InfixExpression: == at 0", "INS SimpleName: enumReference to MethodInvocation at 1", "INS SimpleName: renderUnit to MethodInvocation at 0", "INS SimpleName: getContentKind to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS QualifiedName: MethodRef.STRING_DATA_FOR_VALUE to MethodInvocation at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: child to SingleVariableDeclaration at 1", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS SimpleName: StandaloneNode to SimpleType: StandaloneNode at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS IfStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: kind to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS NullLiteral to InfixExpression: == at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: absent to MethodInvocation at 1", "INS SimpleName: builder to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleType: Expression to VariableDeclarationStatement at 0", "INS SimpleName: kind to InfixExpression: == at 0", "INS SimpleName: renderUnit to SingleVariableDeclaration at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: accessor to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleType: Expression to MethodInvocation at 1", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleName: FieldRef to MethodInvocation at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: RawTextNode to InstanceofExpression at 1", "INS SimpleName: of to MethodInvocation at 2", "INS SimpleName: constant to VariableDeclarationFragment at 0", "INS SimpleName: Optional to MethodInvocation at 0", "INS SimpleName: of to MethodInvocation at 2", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS SimpleName: builder to Assignment: = at 0", "INS SimpleName: RawTextNode to SimpleType: RawTextNode at 0", "INS SimpleName: child to InstanceofExpression at 0", "INS ParameterizedType: Optional<Expression> to MethodDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Expression to MethodInvocation at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: invoke to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: StringBuilder to VariableDeclarationStatement at 0", "INS SimpleName: renderUnit to MethodInvocation at 0", "INS StringLiteral: \"\" to ConditionalExpression at 1", "INS ExpressionStatement to Block at 0", "INS EnhancedForStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 3", "INS Block to IfStatement at 2", "INS SimpleName: constant to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleType: RenderUnitNode to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: StandaloneNode to SingleVariableDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS SimpleName: ContentKind to SimpleType: ContentKind at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleType: Optional to ParameterizedType: Optional<Expression> at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Optional to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS ConditionalExpression to MethodInvocation at 1", "INS QualifiedName: MethodRef.ORDAIN_AS_SAFE to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleType: ContentKind to VariableDeclarationStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: constant to MethodInvocation at 2", "INS SimpleName: Optional to SimpleType: Optional at 0", "INS SimpleName: RenderUnitNode to SimpleType: RenderUnitNode at 0", "INS SimpleName: getChildren to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: builder to InfixExpression: == at 0", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS Block to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS SimpleName: Optional to MethodInvocation at 0", "INS SimpleName: RawTextNode to SimpleType: RawTextNode at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getRawText to MethodInvocation at 1", "INS SimpleType: Expression to ParameterizedType: Optional<Expression> at 1", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS SimpleName: kind to VariableDeclarationFragment at 0", "INS SimpleName: constant to MethodInvocation at 2", "INS SimpleName: child to CastExpression at 1", "INS SimpleType: RawTextNode to CastExpression at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS ReturnStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: asRawTextOnly to MethodDeclaration at 2", "INS NullLiteral to InfixExpression: == at 1", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: Optional to ParameterizedType: Optional<Expression> at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: asRawText to VariableDeclarationFragment at 0", "INS SimpleName: asRawTextOnly to MethodInvocation at 0", "INS SimpleType: Expression to ParameterizedType: Optional<Expression> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Optional to SimpleType: Optional at 0", "INS SimpleName: Expression to SimpleType: Expression at 0", "INS ParameterizedType: Optional<Expression> to VariableDeclarationStatement at 0", "INS SimpleName: renderUnit to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: asRawText to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS SimpleName: isPresent to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: asRawText to MethodInvocation at 0"]}]}}, {"LazyClosureCompiler_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(2247) at 3", "Insert ImportDeclaration(73) into CompilationUnit(2247) at 36", "Insert ImportDeclaration(81) into CompilationUnit(2247) at 40", "Insert QualifiedName: com.google.template.soy.jbcsrc.BytecodeUtils.constant(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: com.google.template.soy.soytree.RawTextNode(72) into ImportDeclaration(73) at 0", "Insert QualifiedName: com.google.template.soy.soytree.SoyNode.StandaloneNode(80) into ImportDeclaration(81) at 0", "Insert MethodDeclaration(738) into TypeDeclaration: class(2246) at 20", "Insert Modifier: private(623) into MethodDeclaration(738) at 0", "Insert ParameterizedType: Optional<Expression>(628) into MethodDeclaration(738) at 1", "Insert SimpleName: asRawTextOnly(629) into MethodDeclaration(738) at 2", "Insert SingleVariableDeclaration(633) into MethodDeclaration(738) at 3", "Insert Block(737) into MethodDeclaration(738) at 4", "Insert VariableDeclarationStatement(547) into Block(621) at 0", "Insert IfStatement(556) into Block(621) at 1", "Insert SimpleType: Optional(625) into ParameterizedType: Optional<Expression>(628) at 0", "Insert SimpleType: Expression(627) into ParameterizedType: Optional<Expression>(628) at 1", "Insert SimpleType: RenderUnitNode(631) into SingleVariableDeclaration(633) at 0", "Insert SimpleName: renderUnit(632) into SingleVariableDeclaration(633) at 1", "Insert VariableDeclarationStatement(639) into Block(737) at 0", "Insert EnhancedForStatement(681) into Block(737) at 1", "Insert VariableDeclarationStatement(689) into Block(737) at 2", "Insert VariableDeclarationStatement(704) into Block(737) at 3", "Insert IfStatement(736) into Block(737) at 4", "Insert ParameterizedType: Optional<Expression>(541) into VariableDeclarationStatement(547) at 0", "Insert VariableDeclarationFragment(546) into VariableDeclarationStatement(547) at 1", "Insert MethodInvocation(550) into IfStatement(556) at 0", "Insert Block(555) into IfStatement(556) at 1", "Insert SimpleName: Optional(624) into SimpleType: Optional(625) at 0", "Insert SimpleName: Expression(626) into SimpleType: Expression(627) at 0", "Insert SimpleName: RenderUnitNode(630) into SimpleType: RenderUnitNode(631) at 0", "Insert SimpleType: StringBuilder(635) into VariableDeclarationStatement(639) at 0", "Insert VariableDeclarationFragment(638) into VariableDeclarationStatement(639) at 1", "Insert SingleVariableDeclaration(643) into EnhancedForStatement(681) at 0", "Insert MethodInvocation(646) into EnhancedForStatement(681) at 1", "Insert Block(680) into EnhancedForStatement(681) at 2", "Insert SimpleType: ContentKind(683) into VariableDeclarationStatement(689) at 0", "Insert VariableDeclarationFragment(688) into VariableDeclarationStatement(689) at 1", "Insert SimpleType: Expression(691) into VariableDeclarationStatement(704) at 0", "Insert VariableDeclarationFragment(703) into VariableDeclarationStatement(704) at 1", "Insert InfixExpression: ==(707) into IfStatement(736) at 0", "Insert Block(718) into IfStatement(736) at 1", "Insert Block(735) into IfStatement(736) at 2", "Insert SimpleType: Optional(538) into ParameterizedType: Optional<Expression>(541) at 0", "Insert SimpleType: Expression(540) into ParameterizedType: Optional<Expression>(541) at 1", "Insert SimpleName: asRawText(542) into VariableDeclarationFragment(546) at 0", "Insert MethodInvocation(545) into VariableDeclarationFragment(546) at 1", "Insert SimpleName: asRawText(548) into MethodInvocation(550) at 0", "Insert SimpleName: isPresent(549) into MethodInvocation(550) at 1", "Insert ReturnStatement(554) into Block(555) at 0", "Insert SimpleName: StringBuilder(634) into SimpleType: StringBuilder(635) at 0", "Insert SimpleName: builder(636) into VariableDeclarationFragment(638) at 0", "Insert NullLiteral(637) into VariableDeclarationFragment(638) at 1", "Insert SimpleType: StandaloneNode(641) into SingleVariableDeclaration(643) at 0", "Insert SimpleName: child(642) into SingleVariableDeclaration(643) at 1", "Insert SimpleName: renderUnit(644) into MethodInvocation(646) at 0", "Insert SimpleName: getChildren(645) into MethodInvocation(646) at 1", "Insert IfStatement(679) into Block(680) at 0", "Insert SimpleName: ContentKind(682) into SimpleType: ContentKind(683) at 0", "Insert SimpleName: kind(684) into VariableDeclarationFragment(688) at 0", "Insert MethodInvocation(687) into VariableDeclarationFragment(688) at 1", "Insert SimpleName: Expression(690) into SimpleType: Expression(691) at 0", "Insert SimpleName: constant(692) into VariableDeclarationFragment(703) at 0", "Insert MethodInvocation(702) into VariableDeclarationFragment(703) at 1", "Insert SimpleName: kind(705) into InfixExpression: ==(707) at 0", "Insert NullLiteral(706) into InfixExpression: ==(707) at 1", "Insert ReturnStatement(717) into Block(718) at 0", "Insert ReturnStatement(734) into Block(735) at 0", "Insert SimpleName: Optional(537) into SimpleType: Optional(538) at 0", "Insert SimpleName: Expression(539) into SimpleType: Expression(540) at 0", "Insert SimpleName: asRawTextOnly(543) into MethodInvocation(545) at 0", "Insert SimpleName: renderUnit(544) into MethodInvocation(545) at 1", "Insert MethodInvocation(553) into ReturnStatement(554) at 0", "Insert SimpleName: StandaloneNode(640) into SimpleType: StandaloneNode(641) at 0", "Insert InstanceofExpression(650) into IfStatement(679) at 0", "Insert Block(673) into IfStatement(679) at 1", "Insert Block(678) into IfStatement(679) at 2", "Insert SimpleName: renderUnit(685) into MethodInvocation(687) at 0", "Insert SimpleName: getContentKind(686) into MethodInvocation(687) at 1", "Insert SimpleName: constant(693) into MethodInvocation(702) at 0", "Insert ConditionalExpression(701) into MethodInvocation(702) at 1", "Insert MethodInvocation(716) into ReturnStatement(717) at 0", "Insert MethodInvocation(733) into ReturnStatement(734) at 0", "Insert SimpleName: asRawText(551) into MethodInvocation(553) at 0", "Insert SimpleName: get(552) into MethodInvocation(553) at 1", "Insert SimpleName: child(647) into InstanceofExpression(650) at 0", "Insert SimpleType: RawTextNode(649) into InstanceofExpression(650) at 1", "Insert IfStatement(661) into Block(673) at 0", "Insert ExpressionStatement(672) into Block(673) at 1", "Insert ReturnStatement(677) into Block(678) at 0", "Insert InfixExpression: ==(696) into ConditionalExpression(701) at 0", "Insert StringLiteral: \"\"(697) into ConditionalExpression(701) at 1", "Insert MethodInvocation(700) into ConditionalExpression(701) at 2", "Insert SimpleName: Optional(708) into MethodInvocation(716) at 0", "Insert SimpleType: Expression(710) into MethodInvocation(716) at 1", "Insert SimpleName: of(711) into MethodInvocation(716) at 2", "Insert MethodInvocation(715) into MethodInvocation(716) at 3", "Insert SimpleName: Optional(719) into MethodInvocation(733) at 0", "Insert SimpleType: Expression(721) into MethodInvocation(733) at 1", "Insert SimpleName: of(722) into MethodInvocation(733) at 2", "Insert MethodInvocation(732) into MethodInvocation(733) at 3", "Insert SimpleName: RawTextNode(648) into SimpleType: RawTextNode(649) at 0", "Insert InfixExpression: ==(653) into IfStatement(661) at 0", "Insert Block(660) into IfStatement(661) at 1", "Insert MethodInvocation(671) into ExpressionStatement(672) at 0", "Insert MethodInvocation(676) into ReturnStatement(677) at 0", "Insert SimpleName: builder(694) into InfixExpression: ==(696) at 0", "Insert NullLiteral(695) into InfixExpression: ==(696) at 1", "Insert SimpleName: builder(698) into MethodInvocation(700) at 0", "Insert SimpleName: toString(699) into MethodInvocation(700) at 1", "Insert SimpleName: Expression(709) into SimpleType: Expression(710) at 0", "Insert QualifiedName: MethodRef.STRING_DATA_FOR_VALUE(712) into MethodInvocation(715) at 0", "Insert SimpleName: invoke(713) into MethodInvocation(715) at 1", "Insert SimpleName: constant(714) into MethodInvocation(715) at 2", "Insert SimpleName: Expression(720) into SimpleType: Expression(721) at 0", "Insert QualifiedName: MethodRef.ORDAIN_AS_SAFE(723) into MethodInvocation(732) at 0", "Insert SimpleName: invoke(724) into MethodInvocation(732) at 1", "Insert SimpleName: constant(725) into MethodInvocation(732) at 2", "Insert MethodInvocation(731) into MethodInvocation(732) at 3", "Insert SimpleName: builder(651) into InfixExpression: ==(653) at 0", "Insert NullLiteral(652) into InfixExpression: ==(653) at 1", "Insert ExpressionStatement(659) into Block(660) at 0", "Insert SimpleName: builder(662) into MethodInvocation(671) at 0", "Insert SimpleName: append(663) into MethodInvocation(671) at 1", "Insert MethodInvocation(670) into MethodInvocation(671) at 2", "Insert SimpleName: Optional(674) into MethodInvocation(676) at 0", "Insert SimpleName: absent(675) into MethodInvocation(676) at 1", "Insert MethodInvocation(729) into MethodInvocation(731) at 0", "Insert SimpleName: accessor(730) into MethodInvocation(731) at 1", "Insert Assignment: =(658) into ExpressionStatement(659) at 0", "Insert ParenthesizedExpression(668) into MethodInvocation(670) at 0", "Insert SimpleName: getRawText(669) into MethodInvocation(670) at 1", "Insert SimpleName: FieldRef(726) into MethodInvocation(729) at 0", "Insert SimpleName: enumReference(727) into MethodInvocation(729) at 1", "Insert SimpleName: kind(728) into MethodInvocation(729) at 2", "Insert SimpleName: builder(654) into Assignment: =(658) at 0", "Insert ClassInstanceCreation(657) into Assignment: =(658) at 1", "Insert CastExpression(667) into ParenthesizedExpression(668) at 0", "Insert SimpleType: StringBuilder(656) into ClassInstanceCreation(657) at 0", "Insert SimpleType: RawTextNode(665) into CastExpression(667) at 0", "Insert SimpleName: child(666) into CastExpression(667) at 1", "Insert SimpleName: StringBuilder(655) into SimpleType: StringBuilder(656) at 0", "Insert SimpleName: RawTextNode(664) into SimpleType: RawTextNode(665) at 0"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}