{"application": "apache-commons-jexl", "csha": "08b89d6670e1a63eaf518b3478576ad31523f587", "files": [{"ClassMap_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: java.util.Comparator to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: java.util.concurrent.ConcurrentHashMap to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: java.util.concurrent.ConcurrentMap to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 13", "MOV MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 11", "MOV MethodDeclaration to TypeDeclaration: class at 19", "MOV FieldDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS ParameterizedType: ConcurrentMap<MethodKey,Method> to FieldDeclaration at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleType: ConcurrentHashMap to ParameterizedType: ConcurrentHashMap<MethodKey,Method> at 0", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS Javadoc to FieldDeclaration at 0", "INS ParameterizedType: ConcurrentHashMap<MethodKey,Method> to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: byKey to VariableDeclarationFragment at 0", "INS SimpleName: ConcurrentMap to SimpleType: ConcurrentMap at 0", "INS SimpleType: ConcurrentMap to ParameterizedType: ConcurrentMap<MethodKey,Method> at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 14", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 14"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS TextElement: Find a Field using its name. to TagElement at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS TagElement to Javadoc at 0", "INS SimpleName: getField to MethodDeclaration at 2", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleType: java.util.Set to ParameterizedType: java.util.Set<String> at 0", "INS ArrayCreation to MethodInvocation at 2", "INS QualifiedName: java.util.Set to SimpleType: java.util.Set at 0", "INS SimpleName: byName to MethodInvocation at 0", "INS MethodInvocation to ArrayCreation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getMethodNames to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SimpleName: toArray to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: set to MethodInvocation at 0", "INS SimpleName: keySet to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: set to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS ParameterizedType: java.util.Set<String> to VariableDeclarationStatement at 0", "INS SimpleName: size to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS Block to MethodDeclaration at 5", "INS IfStatement to Block at 1", "INS Block to TryStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS SimpleName: methodKey to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 2", "INS SimpleName: cacheEntry to InfixExpression: == at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: methodList to VariableDeclarationFragment at 0", "INS SimpleName: getMethod to MethodDeclaration at 2", "INS SimpleType: Method to ParameterizedType: List<Method> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: cacheEntry to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getMethod to MethodInvocation at 1", "INS TryStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleType: List to ParameterizedType: List<Method> at 0", "INS Block to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: methodKey to MethodInvocation at 0", "INS ParameterizedType: List<Method> to VariableDeclarationStatement at 0", "INS SimpleType: Method to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: methodList to InfixExpression: != at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Method to SimpleType: Method at 0", "INS Block to CatchClause at 1", "INS IfStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: start to Assignment: = at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: end to InfixExpression: < at 0", "INS SimpleName: o1 to SingleVariableDeclaration at 1", "INS SimpleName: o2 to SingleVariableDeclaration at 1", "INS SimpleName: lmn to VariableDeclarationFragment at 0", "INS SimpleName: start to InfixExpression: < at 0", "INS ExpressionStatement to Block at 5", "INS IfStatement to Block at 1", "INS SimpleName: method to MethodInvocation at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: lm to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to WhileStatement at 1", "INS Block to MethodDeclaration at 8", "INS SimpleName: start to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 3", "INS MethodInvocation to MethodInvocation at 0", "INS BreakStatement to Block at 0", "INS QualifiedName: cache.byKey to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: size to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: start to VariableDeclarationFragment at 0", "INS WhileStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: < at 1", "INS QualifiedName: cache.byKey to MethodInvocation at 0", "INS SimpleName: end to Assignment: = at 1", "INS EnhancedForStatement to Block at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS SimpleName: compare to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: < at 1", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: compareTo to MethodInvocation at 1", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: create to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: end to VariableDeclarationFragment at 0", "INS InfixExpression: < to WhileStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS NumberLiteral: 1 to Assignment: += at 1", "INS ClassInstanceCreation to MethodInvocation at 3", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS InfixExpression: < to WhileStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS MethodInvocation to IfStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS IfStatement to Block at 1", "INS VariableDeclarationStatement to Block at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 3", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: end to Assignment: += at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS WhileStatement to Block at 4", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: lm to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to WhileStatement at 1", "INS SimpleName: sort to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: values to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS Block to IfStatement at 2", "INS SimpleName: lm to MethodInvocation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Method to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "UPDATE from createMethodCache to cacheMiss", "operations": ["UPD SimpleName: createMethodCache from createMethodCache to cacheMiss"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS TryStatement to Block at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getMethod to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 0", "INS StringLiteral: \"cacheMiss\" to MethodInvocation at 2", "INS Block to MethodDeclaration at 7", "INS ReturnStatement to Block at 0", "INS SimpleType: ClassMap to TypeLiteral at 0"]}, {"root": "INS ParameterizedType: Map<String,List<Method>> to FieldDeclaration at 4", "operations": ["INS SimpleType: String to ParameterizedType: Map<String,List<Method>> at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS ParameterizedType: List<Method> to ParameterizedType: Map<String,List<Method>> at 2", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Map<String,List<Method>> to FieldDeclaration at 4", "INS SimpleType: Method to ParameterizedType: List<Method> at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<Method> at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Javadoc to FieldDeclaration at 0", "MOV Modifier: private to FieldDeclaration at 1", "MOV Modifier: final to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: Map<String,Field> to FieldDeclaration at 3", "MOV VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS StringLiteral: \"LeakingThisInConstructor\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS SimpleName: ClassMap to MethodDeclaration at 2", "operations": ["INS SimpleName: ClassMap to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleType: Field to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ArrayType: String[] to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from get to getMethods", "operations": ["UPD SimpleName: get from get to getMethods"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: MethodKey.AmbiguousException to MethodDeclaration at 4", "MOV SimpleType: Method to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @return to Javadoc at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: static to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from populateMethodCacheWithInterface to populateWithInterface", "operations": ["UPD SimpleName: populateMethodCacheWithInterface from populateMethodCacheWithInterface to populateWithInterface", "UPD SimpleName: populateMethodCacheWithInterface from populateMethodCacheWithInterface to populateWithInterface", "UPD SimpleName: populateMethodCacheWithInterface from populateMethodCacheWithInterface to populateWithInterface"]}, {"root": "UPDATE from populateMethodCacheWith to populateWithClass", "operations": ["UPD SimpleName: populateMethodCacheWith from populateMethodCacheWith to populateWithClass", "UPD SimpleName: populateMethodCacheWith from populateMethodCacheWith to populateWithClass", "UPD SimpleName: populateMethodCacheWith from populateMethodCacheWith to populateWithClass"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "MOVE from ParameterizedType: ConcurrentHashMap<MethodKey,Method>", "operations": ["MOV SimpleType: Method to ParameterizedType: ConcurrentHashMap<MethodKey,Method> at 2", "MOV SimpleType: MethodKey to ParameterizedType: ConcurrentMap<MethodKey,Method> at 1"]}, {"root": "MOVE from ParameterizedType: ConcurrentMap<MethodKey,Method>", "operations": ["MOV SimpleType: Method to ParameterizedType: ConcurrentMap<MethodKey,Method> at 2"]}, {"root": "MOVE from ParameterizedType: Map<String,List<Method>>", "operations": ["MOV SimpleType: Map to ParameterizedType: Map<String,List<Method>> at 0"]}, {"root": "UPDATE from PRIMITIVE_SIZE to byName", "operations": ["UPD SimpleName: PRIMITIVE_SIZE from PRIMITIVE_SIZE to byName", "UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to byName", "UPD SimpleName: methodMap from methodMap to byName"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: List to ParameterizedType: List<Method> at 0", "INS SimpleType: String to ParameterizedType: HashMap<String,List<Method>> at 1", "INS SimpleType: Method to ParameterizedType: List<Method> at 1", "INS ParameterizedType: List<Method> to ParameterizedType: HashMap<String,List<Method>> at 2", "INS ParameterizedType: HashMap<String,List<Method>> to ClassInstanceCreation at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: log to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS ThisExpression to MethodInvocation at 1", "INS SimpleName: create to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: aClass to MethodInvocation at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @return to Javadoc at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from @return to @param", "operations": ["UPD TagElement: @return from @return to @param"]}, {"root": "INS SimpleType: ClassMap to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ClassMap to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from parm to cache", "operations": ["UPD SimpleName: parm from parm to cache"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 0"]}, {"root": "UPDATE from MethodCache to ClassMap", "operations": ["UPD SimpleName: MethodCache from MethodCache to ClassMap", "UPD SimpleName: MethodCache from MethodCache to ClassMap", "UPD SimpleType: MethodCache from MethodCache to ClassMap", "UPD SimpleName: MethodCache from MethodCache to ClassMap", "UPD SimpleName: Class from Class to ClassMap", "UPD SimpleType: MethodCache from MethodCache to ClassMap"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS TextElement: Uses ConcurrentMap since 3.0, marginally faster than 2.1 under contention. to TagElement at 11", "operations": ["INS TextElement: Uses ConcurrentMap since 3.0, marginally faster than 2.1 under contention. to TagElement at 11"]}, {"root": "UPDATE from The initial size of the primitive conversion map.  to Keep track of all methods with the same name; this is not modified after creation.", "operations": ["UPD TextElement: The initial size of the primitive conversion map.  from The initial size of the primitive conversion map.  to Keep track of all methods with the same name; this is not modified after creation."]}, {"root": "UPDATE from The primitive type to class conversion map.  to Cache of fields.", "operations": ["UPD TextElement: The primitive type to class conversion map.  from The primitive type to class conversion map.  to Cache of fields."]}, {"root": "INS ParameterizedType: List<Method> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<Method> to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<Method> at 0", "INS SimpleType: Method to ParameterizedType: List<Method> at 1", "INS SimpleName: Method to SimpleType: Method at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS SimpleName: cache to TagElement: @return at 0", "operations": ["INS SimpleName: cache to TagElement: @return at 0"]}, {"root": "UPDATE from  a newly allocated & filled up cache to  the ClassMap instance we create", "operations": ["UPD TextElement:  a newly allocated & filled up cache from  a newly allocated & filled up cache to  the ClassMap instance we create"]}, {"root": "MOVE from SimpleType: ClassMap", "operations": ["MOV SimpleName: Class to SimpleType: ClassMap at 0"]}, {"root": "MOVE from ParameterizedType: ConcurrentHashMap<MethodKey,Method>", "operations": ["MOV SimpleType: MethodKey to ParameterizedType: ConcurrentHashMap<MethodKey,Method> at 1"]}, {"root": "MOVE from ParameterizedType: HashMap<String,List<Method>>", "operations": ["MOV SimpleType: HashMap to ParameterizedType: HashMap<String,List<Method>> at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: fieldCache to Assignment: = at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: cache to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: fieldCache to Assignment: = at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from Class to String", "operations": ["UPD SimpleName: Class from Class to String", "UPD SimpleType: MethodKey from MethodKey to String", "UPD SimpleType: Class from Class to String", "UPD SimpleName: MethodKey from MethodKey to String"]}, {"root": "MOVE from ParameterizedType: java.util.Set<String>", "operations": ["MOV SimpleType: Class to ParameterizedType: java.util.Set<String> at 1"]}, {"root": "UPDATE from PRIMITIVE_TYPES to set", "operations": ["UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to set"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: PRIMITIVE_TYPES to VariableDeclarationFragment at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from MethodCache to ConcurrentHashMap", "operations": ["UPD SimpleName: MethodCache from MethodCache to ConcurrentHashMap"]}, {"root": "MOVE from SimpleType: ConcurrentHashMap", "operations": ["MOV SimpleName: MethodCache to SimpleType: ConcurrentHashMap at 0"]}, {"root": "UPDATE from clazz to aClass", "operations": ["UPD SimpleName: clazz from clazz to aClass"]}, {"root": "MOVE from ArrayCreation", "operations": ["MOV ArrayType: String[] to ArrayCreation at 0"]}, {"root": "UPDATE from PRIMITIVE_TYPES to byKey", "operations": ["UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to byKey", "UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to byKey", "UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to byKey", "UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to byKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: put to MethodInvocation at 1", "MOV SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0"]}, {"root": "UPDATE from put to get", "operations": ["UPD SimpleName: put from put to get", "UPD SimpleName: put from put to get", "UPD SimpleName: put from put to get"]}, {"root": "UPDATE from Class<?> to List<Method>", "operations": ["UPD ParameterizedType: Class<?> from Class<?> to List<Method>"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from Class to List", "operations": ["UPD SimpleName: Class from Class to List", "UPD SimpleType: Class from Class to List"]}, {"root": "INS SimpleType: Method to ParameterizedType: Class<?> at 1", "operations": ["INS SimpleType: Method to ParameterizedType: Class<?> at 1", "INS SimpleName: Method to SimpleType: Method at 0"]}, {"root": "UPDATE from put to lm", "operations": ["UPD SimpleName: put from put to lm", "UPD SimpleName: methods from methods to lm", "UPD SimpleName: prim from prim to lm", "UPD SimpleName: methods from methods to lm"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ParameterizedType: ArrayList<Method> to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS QualifiedName: cache.byKey to MethodInvocation at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<Method> at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "UPDATE from HashMap<MethodKey,Method> to Comparator<Method>", "operations": ["UPD ParameterizedType: HashMap<MethodKey,Method> from HashMap<MethodKey,Method> to Comparator<Method>"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: HashMap<MethodKey,Method> to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: put to MethodInvocation at 0", "MOV SimpleName: methodKey to MethodInvocation at 1"]}, {"root": "UPDATE from parm to size", "operations": ["UPD SimpleName: parm from parm to size", "UPD SimpleName: methodKey from methodKey to size"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<Method> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from SimpleType: ClassMap", "operations": ["MOV SimpleName: MethodCache to SimpleType: ClassMap at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 1"]}, {"root": "MOVE from ParameterizedType: ArrayList<Method>", "operations": ["MOV SimpleType: Method to ParameterizedType: ArrayList<Method> at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parm to MethodInvocation at 1"]}, {"root": "UPDATE from HashMap to Comparator", "operations": ["UPD SimpleName: HashMap from HashMap to Comparator", "UPD SimpleType: HashMap from HashMap to Comparator"]}, {"root": "UPDATE from Character to Method", "operations": ["UPD SimpleName: Character from Character to Method", "UPD SimpleName: MethodKey from MethodKey to Method", "UPD SimpleType: MethodKey from MethodKey to Method", "UPD SimpleName: MethodMap from MethodMap to Method"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS QualifiedName: cache.byName to MethodInvocation at 0", "operations": ["INS QualifiedName: cache.byName to MethodInvocation at 0"]}, {"root": "UPDATE from methodMap to put", "operations": ["UPD SimpleName: methodMap from methodMap to put"]}, {"root": "UPDATE from add to name", "operations": ["UPD SimpleName: add from add to name", "UPD SimpleName: methodKey from methodKey to name"]}, {"root": "UPDATE from method to lmn", "operations": ["UPD SimpleName: method from method to lmn"]}, {"root": "UPDATE from find to getName", "operations": ["UPD SimpleName: find from find to getName", "UPD SimpleName: CACHE_MISS from CACHE_MISS to getName", "UPD SimpleName: get from get to getName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: CACHE_MISS to MethodInvocation at 1", "MOV SimpleName: methodKey to MethodInvocation at 2", "MOV SimpleName: methods to MethodInvocation at 0", "MOV SimpleName: put to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methodKey to MethodInvocation at 2", "MOV SimpleName: method to MethodInvocation at 3", "MOV SimpleName: put to MethodInvocation at 1", "MOV SimpleName: methods to MethodInvocation at 0"]}, {"root": "UPDATE from put to subList", "operations": ["UPD SimpleName: put from put to subList"]}, {"root": "UPDATE from methodKey to start", "operations": ["UPD SimpleName: methodKey from methodKey to start", "UPD SimpleName: methodKey from methodKey to start"]}, {"root": "UPDATE from method to end", "operations": ["UPD SimpleName: method from method to end"]}, {"root": "MOVE from SimpleType: Method", "operations": ["MOV SimpleName: Character to SimpleType: Method at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: put to MethodInvocation at 1", "MOV SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: cacheEntry to Assignment: = at 0", "INS SimpleName: methodList to MethodInvocation at 2"]}, {"root": "INS SimpleName: methodKey to MethodInvocation at 2", "operations": ["INS SimpleName: methodKey to MethodInvocation at 2"]}, {"root": "INS SimpleName: CACHE_MISS to MethodInvocation at 3", "operations": ["INS SimpleName: CACHE_MISS to MethodInvocation at 3"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Method to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from methodKey to walk", "operations": ["UPD SimpleName: methodKey from methodKey to walk", "UPD SimpleName: methods from methods to walk"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: end to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: lm to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: methods to MethodInvocation at 0", "MOV SimpleName: methodKey to MethodInvocation at 2"]}, {"root": "UPDATE from get to equals", "operations": ["UPD SimpleName: get from get to equals"]}, {"root": "INS QualifiedName: cache.byKey to MethodInvocation at 0", "operations": ["INS QualifiedName: cache.byKey to MethodInvocation at 0"]}, {"root": "UPDATE from cache to putIfAbsent", "operations": ["UPD SimpleName: cache from cache to putIfAbsent"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleName: MethodKey to SimpleType: MethodKey at 0", "INS SimpleType: MethodKey to ClassInstanceCreation at 0", "INS SimpleName: mi to ClassInstanceCreation at 1", "INS ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "INS SimpleName: mi to MethodInvocation at 3", "operations": ["INS SimpleName: mi to MethodInvocation at 3"]}, {"root": "INS SimpleName: methodKey to MethodInvocation at 2", "operations": ["INS SimpleName: methodKey to MethodInvocation at 2"]}, {"root": "INS SimpleName: CACHE_MISS to MethodInvocation at 3", "operations": ["INS SimpleName: CACHE_MISS to MethodInvocation at 3"]}, {"root": "INS SimpleName: methodKey to MethodInvocation at 2", "operations": ["INS SimpleName: methodKey to MethodInvocation at 2"]}, {"root": "INS SimpleName: cacheEntry to MethodInvocation at 3", "operations": ["INS SimpleName: cacheEntry to MethodInvocation at 3"]}, {"root": "MOVE from SimpleType: Method", "operations": ["MOV SimpleName: MethodMap to SimpleType: Method at 0"]}, {"root": "UPDATE from PRIMITIVE_TYPES to methodKey", "operations": ["UPD SimpleName: PRIMITIVE_TYPES from PRIMITIVE_TYPES to methodKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: put to MethodInvocation at 1", "MOV SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0"]}, {"root": "UPDATE from put to getMostSpecificMethod", "operations": ["UPD SimpleName: put from put to getMostSpecificMethod"]}, {"root": "UPDATE from methods to o1", "operations": ["UPD SimpleName: methods from methods to o1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methods to MethodInvocation at 0", "MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "UPDATE from methodMap to o2", "operations": ["UPD SimpleName: methodMap from methodMap to o2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: methodMap to MethodInvocation at 0", "MOV SimpleName: find to MethodInvocation at 1"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL TagElement", "DEL SimpleName: methodCache", "DEL TextElement: cache of methods. ", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleType: MethodCache", "DEL Javadoc", "DEL SimpleName: MethodCache", "DEL Modifier: private"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Javadoc", "DEL TagElement", "DEL Modifier: final", "DEL FieldDeclaration", "DEL Modifier: private", "DEL TextElement: cache of fields. "]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: fieldCache", "DEL MethodDeclaration", "DEL SimpleName: ClassMap", "DEL SimpleName: createMethodCache", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: methodCache", "DEL SimpleName: aClass", "DEL Block", "DEL SimpleName: createFieldCache", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: aClass", "DEL SimpleName: log", "DEL Assignment: ="]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: clazz", "DEL Modifier: final", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL Javadoc", "DEL TextElement: <p>The clazz parameter <strong>must</strong> be this ClassMap key.</p>", "DEL ParameterizedType: Class<?>", "DEL TagElement: @param", "DEL SimpleName: clazz", "DEL TagElement", "DEL SimpleName: findField", "DEL SimpleName: Class", "DEL TextElement: Find a Field using its name.", "DEL TextElement:  the class to introspect"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: names", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: getMethodNames", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: methodCache"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: String", "DEL MethodDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: methodName", "DEL TagElement: @param", "DEL SimpleName: String", "DEL TextElement:  the seeked methods name", "DEL Dimension", "DEL SimpleName: Method", "DEL MethodInvocation", "DEL SimpleName: get", "DEL TextElement:  the array of methods", "DEL TagElement", "DEL ArrayType: Method[]", "DEL SimpleName: methodCache", "DEL TagElement: @return", "DEL SimpleType: Method", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: methodName", "DEL TextElement: Gets all the methods with a given name from this map.", "DEL SimpleName: methodName", "DEL SimpleName: get", "DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement: @param", "DEL TextElement:  the method key", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL Block", "DEL SimpleName: key", "DEL TextElement: Find a Method using the method name and parameter objects.", "DEL SimpleName: methodCache", "DEL MethodDeclaration", "DEL TextElement:  When more than one method is a match for the parameters.", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: findMethod", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL SimpleType: MethodKey.AmbiguousException", "DEL SimpleName: get", "DEL TagElement: @throws", "DEL TextElement:  A Method object representing the method to invoke or null.", "DEL SimpleName: key", "DEL TagElement", "DEL Javadoc", "DEL Modifier: final"]}, {"root": "DEL SimpleType: MethodCache", "operations": ["DEL SimpleName: MethodCache", "DEL SimpleType: MethodCache"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: MethodCache", "DEL Block", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL SimpleName: cache", "DEL ReturnStatement", "DEL SimpleName: MethodCache", "DEL SimpleName: cache", "DEL VariableDeclarationFragment", "DEL SimpleType: MethodCache"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL PrimitiveType: int", "operations": ["DEL PrimitiveType: int"]}, {"root": "DEL NumberLiteral: 13", "operations": ["DEL NumberLiteral: 13"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  the class to introspect", "DEL TextElement:  the map of fields (may be the empty map, can not be null)", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: clazz", "DEL TextElement: Creates a map of all public fields of a given class.", "DEL TagElement", "DEL TagElement: @param"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL ParameterizedType: Map<String,Field>", "operations": ["DEL SimpleType: Map", "DEL SimpleName: String", "DEL SimpleType: Field", "DEL SimpleName: Map", "DEL SimpleName: Field", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,Field>"]}, {"root": "DEL SimpleName: createFieldCache", "operations": ["DEL SimpleName: createFieldCache"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Class", "DEL SimpleName: clazz", "DEL ParameterizedType: Class<?>", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SimpleType: Class"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: cache"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: methodMap", "DEL SynchronizedStatement", "DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleType: Float", "DEL SimpleName: Float", "DEL QualifiedName: Float.TYPE"]}, {"root": "DEL QualifiedName: Integer.TYPE", "operations": ["DEL QualifiedName: Integer.TYPE"]}, {"root": "DEL TypeLiteral", "operations": ["DEL TypeLiteral", "DEL SimpleType: Integer", "DEL SimpleName: Integer"]}, {"root": "DEL QualifiedName: Long.TYPE", "operations": ["DEL QualifiedName: Long.TYPE"]}, {"root": "DEL TypeLiteral", "operations": ["DEL TypeLiteral", "DEL SimpleName: Long", "DEL SimpleType: Long"]}, {"root": "DEL QualifiedName: Short.TYPE", "operations": ["DEL QualifiedName: Short.TYPE"]}, {"root": "DEL TypeLiteral", "operations": ["DEL SimpleName: Short", "DEL TypeLiteral", "DEL SimpleType: Short"]}, {"root": "DEL ParameterizedType: Class<?>", "operations": ["DEL ParameterizedType: Class<?>", "DEL SimpleType: Class", "DEL WildcardType: ?"]}, {"root": "DEL WildcardType: ?", "operations": ["DEL WildcardType: ?"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: get", "DEL MethodInvocation"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleType: MethodKey", "DEL ClassInstanceCreation", "DEL SimpleName: MethodKey", "DEL SimpleName: method"]}, {"root": "DEL SimpleName: put", "operations": ["DEL SimpleName: put"]}, {"root": "DEL ArrayAccess", "operations": ["DEL SimpleName: methods", "DEL SimpleName: i", "DEL ArrayAccess"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL IfStatement", "DEL SimpleName: parm", "DEL TextElement: Cache of Methods, or CACHE_MISS, keyed by method", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL MethodDeclaration", "DEL Modifier: static", "DEL MethodInvocation", "DEL ParameterizedType: Map<MethodKey,Method>", "DEL SimpleName: Map", "DEL SimpleName: prim", "DEL SimpleName: methodMap", "DEL MethodInvocation", "DEL Block", "DEL Modifier: final", "DEL TypeDeclaration: class", "DEL Assignment: =", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: PRIMITIVE_TYPES", "DEL ParameterizedType: Map<Class<?>,Class<?>>", "DEL SimpleType: MethodCache", "DEL SimpleName: Class", "DEL Block", "DEL Javadoc", "DEL TagElement: @return", "DEL SimpleName: prim", "DEL TextElement: primitive type signature to the corresponding Object type so", "DEL TextElement: name and actual arguments used to find it.", "DEL QualifiedName: Character.TYPE", "DEL VariableDeclarationFragment", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL Javadoc", "DEL SimpleType: Character", "DEL TagElement: @param", "DEL InfixExpression: !=", "DEL SimpleType: Byte", "DEL SimpleName: methods", "DEL TryStatement", "DEL TagElement: @return", "DEL TextElement: Gets all the method names from this map.", "DEL QualifiedName: Double.TYPE", "DEL Block", "DEL QualifiedName: Byte.TYPE", "DEL ClassInstanceCreation", "DEL SimpleType: Boolean", "DEL SimpleName: put", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: PRIMITIVE_TYPES", "DEL ParameterizedType: Class<?>", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: Map", "DEL SimpleName: names", "DEL TextElement:  the equivalent object class ", "DEL MethodInvocation", "DEL ParameterizedType: Class<?>", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: CACHE_MISS", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: Boolean", "DEL Block", "DEL SimpleName: Class", "DEL ParameterizedType: Class<?>", "DEL SimpleName: methodMap", "DEL TextElement:  the method to add", "DEL ParameterizedType: Class<?>", "DEL SimpleType: MethodMap", "DEL ReturnStatement", "DEL Javadoc", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: MethodMap", "DEL MethodInvocation", "DEL SimpleName: getMethod", "DEL Modifier: final", "DEL SimpleName: methods", "DEL Block", "DEL NullLiteral", "DEL SimpleName: methodKey", "DEL SimpleType: MethodMap", "DEL SynchronizedStatement", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: put", "DEL TryStatement", "DEL TextElement: </p>", "DEL SimpleName: Byte", "DEL TagElement", "DEL SimpleName: method", "DEL SimpleName: cacheEntry", "DEL TextElement: </p>", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL TextElement: The method cache.", "DEL SimpleType: Double", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"cacheMiss\"", "DEL SimpleName: methodKey", "DEL ExpressionStatement", "DEL Modifier: static", "DEL NullLiteral", "DEL ParameterizedType: Class<?>", "DEL MethodDeclaration", "DEL TypeLiteral", "DEL Modifier: static", "DEL TypeLiteral", "DEL TextElement: <p>", "DEL FieldDeclaration", "DEL TextElement:  the array of method name", "DEL SimpleName: PRIMITIVE_SIZE", "DEL SynchronizedStatement", "DEL ExpressionStatement", "DEL SimpleName: methodKey", "DEL TextElement: correctly.", "DEL SimpleName: names", "DEL MethodDeclaration", "DEL TypeLiteral", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: cacheEntry", "DEL Modifier: static", "DEL MethodInvocation", "DEL TextElement: Converts a primitive type to its corresponding class.", "DEL ClassInstanceCreation", "DEL SimpleName: methodMap", "DEL Block", "DEL SimpleName: get", "DEL Javadoc", "DEL TextElement: Adds a method to the map.", "DEL WildcardType: ?", "DEL SimpleName: cacheMiss", "DEL SimpleType: Class", "DEL Block", "DEL SimpleName: cacheEntry", "DEL IfStatement", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL TypeLiteral", "DEL TextElement: <p>", "DEL Assignment: =", "DEL ConditionalExpression", "DEL SimpleName: Double", "DEL SimpleName: MethodCache", "DEL Modifier: private", "DEL CatchClause", "DEL Block", "DEL TagElement", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: put", "DEL SimpleName: put", "DEL MethodInvocation", "DEL SimpleName: cacheEntry", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL Modifier: final", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL Initializer", "DEL QualifiedName: Boolean.TYPE", "DEL WildcardType: ?", "DEL TextElement: introspection for methods with primitive types will work", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL ParameterizedType: HashMap<Class<?>,Class<?>>", "DEL MethodInvocation", "DEL SimpleName: methodMap", "DEL SimpleType: Class", "DEL TagElement", "DEL TextElement: Map of methods that are searchable according to method parameters to find a match.", "DEL Block", "DEL SimpleName: methodMap", "DEL Modifier: private", "DEL SimpleName: methods", "DEL TextElement:  a may-be primitive type class", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL Block", "DEL SimpleName: parm", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL TextElement: If the argument type is primitive then we want to convert our", "DEL ClassInstanceCreation", "DEL SimpleName: primitiveClass", "DEL Javadoc", "DEL TypeLiteral", "DEL PrimitiveType: void", "DEL SynchronizedStatement", "DEL SimpleType: Class", "DEL FieldDeclaration", "DEL Javadoc"]}]}}, {"ClassMap_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(951) at 1", "Insert ImportDeclaration(11) into CompilationUnit(951) at 5", "Insert ImportDeclaration(15) into CompilationUnit(951) at 7", "Insert ImportDeclaration(23) into CompilationUnit(951) at 11", "Insert ImportDeclaration(25) into CompilationUnit(951) at 12", "Move MethodDeclaration(151) into TypeDeclaration: class(950) at 13", "Move MethodDeclaration(245) into TypeDeclaration: class(950) at 12", "Insert QualifiedName: java.util.ArrayList(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.util.Comparator(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.concurrent.ConcurrentHashMap(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: java.util.concurrent.ConcurrentMap(24) into ImportDeclaration(25) at 0", "Move FieldDeclaration(650) into TypeDeclaration: class(950) at 11", "Insert FieldDeclaration(116) into TypeDeclaration: class(950) at 5", "Move FieldDeclaration(661) into TypeDeclaration: class(950) at 13", "Insert FieldDeclaration(160) into TypeDeclaration: class(950) at 7", "Insert MethodDeclaration(286) into TypeDeclaration: class(950) at 9", "Insert MethodDeclaration(347) into TypeDeclaration: class(950) at 11", "Move MethodDeclaration(1074) into TypeDeclaration: class(950) at 19", "Insert MethodDeclaration(520) into TypeDeclaration: class(950) at 13", "Insert MethodDeclaration(765) into TypeDeclaration: class(950) at 14", "Move Javadoc(613) into MethodDeclaration(69) at 0", "Update Modifier: private(327) to public", "Move SimpleType: Method(617) into MethodDeclaration(69) at 4", "Update SimpleName: createMethodCache(331) to cacheMiss", "Insert Block(68) into MethodDeclaration(69) at 5", "Insert Javadoc(96) into FieldDeclaration(116) at 0", "Insert Modifier: private(97) into FieldDeclaration(116) at 1", "Insert Modifier: final(98) into FieldDeclaration(116) at 2", "Insert ParameterizedType: ConcurrentMap<MethodKey,Method>(105) into FieldDeclaration(116) at 3", "Insert VariableDeclarationFragment(115) into FieldDeclaration(116) at 4", "Insert ParameterizedType: Map<String,List<Method>>(131) into FieldDeclaration(145) at 3", "Move Javadoc(664) into FieldDeclaration(160) at 0", "Move Modifier: private(665) into FieldDeclaration(160) at 1", "Move Modifier: final(667) into FieldDeclaration(160) at 2", "Move ParameterizedType: Map<String,Field>(53) into FieldDeclaration(160) at 3", "Move VariableDeclarationFragment(55) into FieldDeclaration(160) at 4", "Move Javadoc(65) into MethodDeclaration(263) at 0", "Insert SingleMemberAnnotation(172) into MethodDeclaration(263) at 1", "Insert SimpleName: ClassMap(173) into MethodDeclaration(263) at 2", "Move SingleVariableDeclaration(72) into MethodDeclaration(263) at 3", "Move SingleVariableDeclaration(76) into MethodDeclaration(263) at 4", "Insert Javadoc(271) into MethodDeclaration(286) at 0", "Move SimpleType: Field(105) into MethodDeclaration(286) at 1", "Insert SimpleName: getField(274) into MethodDeclaration(286) at 2", "Move SingleVariableDeclaration(118) into MethodDeclaration(286) at 3", "Move Block(124) into MethodDeclaration(286) at 4", "Move Javadoc(250) into MethodDeclaration(347) at 0", "Move ArrayType: String[](254) into MethodDeclaration(347) at 1", "Insert SimpleName: getMethodNames(322) into MethodDeclaration(347) at 2", "Insert Block(346) into MethodDeclaration(347) at 3", "Update SimpleName: get(1027) to getMethods", "Move Block(1071) into MethodDeclaration(404) at 4", "Move Javadoc(871) into MethodDeclaration(520) at 0", "Move SimpleType: Method(873) into MethodDeclaration(520) at 1", "Insert SimpleName: getMethod(428) into MethodDeclaration(520) at 2", "Move SingleVariableDeclaration(879) into MethodDeclaration(520) at 3", "Move SimpleType: MethodKey.AmbiguousException(881) into MethodDeclaration(520) at 4", "Insert Block(519) into MethodDeclaration(520) at 5", "Move Javadoc(326) into MethodDeclaration(765) at 0", "Move TagElement: @return(325) into Javadoc(533) at 1", "Insert Modifier: private(534) into MethodDeclaration(765) at 1", "Move Modifier: static(779) into MethodDeclaration(765) at 2", "Insert PrimitiveType: void(536) into MethodDeclaration(765) at 3", "Insert SimpleName: create(537) into MethodDeclaration(765) at 4", "Move SingleVariableDeclaration(790) into MethodDeclaration(765) at 5", "Move SingleVariableDeclaration(337) into MethodDeclaration(765) at 6", "Move SingleVariableDeclaration(341) into MethodDeclaration(765) at 7", "Insert Block(764) into MethodDeclaration(765) at 8", "Update SimpleName: populateMethodCacheWithInterface(425) to populateWithInterface", "Update SimpleName: populateMethodCacheWith(503) to populateWithClass", "Insert TryStatement(67) into Block(68) at 0", "Move TagElement(603) into Javadoc(96) at 0", "Insert SimpleType: ConcurrentMap(100) into ParameterizedType: ConcurrentMap<MethodKey,Method>(105) at 0", "Move SimpleType: MethodKey(823) into ParameterizedType: ConcurrentMap<MethodKey,Method>(105) at 1", "Move SimpleType: Method(833) into ParameterizedType: ConcurrentMap<MethodKey,Method>(105) at 2", "Insert SimpleName: byKey(106) into VariableDeclarationFragment(115) at 0", "Insert ClassInstanceCreation(114) into VariableDeclarationFragment(115) at 1", "Move SimpleType: Map(669) into ParameterizedType: Map<String,List<Method>>(131) at 0", "Insert SimpleType: String(125) into ParameterizedType: Map<String,List<Method>>(131) at 1", "Insert ParameterizedType: List<Method>(130) into ParameterizedType: Map<String,List<Method>>(131) at 2", "Update SimpleName: PRIMITIVE_SIZE(658) to byName", "Insert ClassInstanceCreation(143) into VariableDeclarationFragment(144) at 1", "Insert SimpleName: SuppressWarnings(170) into SingleMemberAnnotation(172) at 0", "Insert StringLiteral: \"LeakingThisInConstructor\"(171) into SingleMemberAnnotation(172) at 1", "Insert ExpressionStatement(189) into Block(262) at 0", "Insert TagElement(265) into Javadoc(271) at 0", "Move TagElement: @param(100) into Javadoc(271) at 1", "Move TagElement: @return(102) into Javadoc(271) at 2", "Insert VariableDeclarationStatement(333) into Block(346) at 0", "Insert ReturnStatement(345) into Block(346) at 1", "Insert VariableDeclarationStatement(444) into Block(519) at 0", "Insert IfStatement(516) into Block(519) at 1", "Move ReturnStatement(946) into Block(519) at 2", "Update TagElement: @return(325) to @param", "Insert SimpleType: ClassMap(539) into SingleVariableDeclaration(541) at 0", "Update SimpleName: parm(789) to cache", "Move ForStatement(405) into Block(764) at 0", "Insert IfStatement(763) into Block(764) at 1", "Update SimpleType: MethodCache(427) to ClassMap", "Update SimpleType: MethodCache(505) to ClassMap", "Insert Block(58) into TryStatement(67) at 0", "Move CatchClause(634) into TryStatement(67) at 1", "Insert TextElement: Uses ConcurrentMap since 3.0, marginally faster than 2.1 under contention.(94) into TagElement(95) at 11", "Insert SimpleName: ConcurrentMap(99) into SimpleType: ConcurrentMap(100) at 0", "Insert ParameterizedType: ConcurrentHashMap<MethodKey,Method>(113) into ClassInstanceCreation(114) at 0", "Update TextElement: The initial size of the primitive conversion map. (651) to Keep track of all methods with the same name; this is not modified after creation.", "Insert SimpleName: String(124) into SimpleType: String(125) at 0", "Insert SimpleType: List(127) into ParameterizedType: List<Method>(130) at 0", "Insert SimpleType: Method(129) into ParameterizedType: List<Method>(130) at 1", "Insert ParameterizedType: HashMap<String,List<Method>>(142) into ClassInstanceCreation(143) at 0", "Update TextElement: The primitive type to class conversion map. (662) to Cache of fields.", "Insert MethodInvocation(188) into ExpressionStatement(189) at 0", "Insert TextElement: Find a Field using its name.(264) into TagElement(265) at 0", "Insert ParameterizedType: java.util.Set<String>(327) into VariableDeclarationStatement(333) at 0", "Insert VariableDeclarationFragment(332) into VariableDeclarationStatement(333) at 1", "Insert MethodInvocation(344) into ReturnStatement(345) at 0", "Insert ParameterizedType: List<Method>(370) into VariableDeclarationStatement(377) at 0", "Insert SimpleType: Method(437) into VariableDeclarationStatement(444) at 0", "Insert VariableDeclarationFragment(443) into VariableDeclarationStatement(444) at 1", "Move InfixExpression: ==(894) into IfStatement(516) at 0", "Move Block(897) into IfStatement(516) at 1", "Insert IfStatement(515) into IfStatement(516) at 2", "Insert SimpleName: cache(524) into TagElement: @param(526) at 0", "Update TextElement:  a newly allocated & filled up cache(324) to  the ClassMap instance we create", "Update SimpleName: Class(785) to ClassMap", "Move SimpleName: Class(785) into SimpleType: ClassMap(539) at 0", "Insert PrefixExpression: !(611) into IfStatement(763) at 0", "Insert Block(762) into IfStatement(763) at 1", "Update SimpleName: MethodCache(426) to ClassMap", "Update SimpleName: MethodCache(504) to ClassMap", "Insert ReturnStatement(57) into Block(58) at 0", "Insert SimpleType: ConcurrentHashMap(108) into ParameterizedType: ConcurrentHashMap<MethodKey,Method>(113) at 0", "Move SimpleType: MethodKey(303) into ParameterizedType: ConcurrentHashMap<MethodKey,Method>(113) at 1", "Move SimpleType: Method(825) into ParameterizedType: ConcurrentHashMap<MethodKey,Method>(113) at 2", "Insert SimpleName: List(126) into SimpleType: List(127) at 0", "Insert SimpleName: Method(128) into SimpleType: Method(129) at 0", "Move SimpleType: HashMap(685) into ParameterizedType: HashMap<String,List<Method>>(142) at 0", "Insert SimpleType: String(136) into ParameterizedType: HashMap<String,List<Method>>(142) at 1", "Insert ParameterizedType: List<Method>(141) into ParameterizedType: HashMap<String,List<Method>>(142) at 2", "Insert SimpleName: create(184) into MethodInvocation(188) at 0", "Insert ThisExpression(185) into MethodInvocation(188) at 1", "Insert SimpleName: aClass(186) into MethodInvocation(188) at 2", "Insert SimpleName: log(187) into MethodInvocation(188) at 3", "Insert ExpressionStatement(252) into Block(253) at 2", "Insert ExpressionStatement(259) into Block(260) at 0", "Insert SimpleType: java.util.Set(324) into ParameterizedType: java.util.Set<String>(327) at 0", "Update SimpleType: Class(675) to String", "Move SimpleType: Class(675) into ParameterizedType: java.util.Set<String>(327) at 1", "Update SimpleName: PRIMITIVE_TYPES(679) to set", "Move SimpleName: PRIMITIVE_TYPES(679) into VariableDeclarationFragment(332) at 0", "Insert MethodInvocation(331) into VariableDeclarationFragment(332) at 1", "Insert SimpleName: set(334) into MethodInvocation(344) at 0", "Insert SimpleName: toArray(335) into MethodInvocation(344) at 1", "Insert ArrayCreation(343) into MethodInvocation(344) at 2", "Insert SimpleType: List(367) into ParameterizedType: List<Method>(370) at 0", "Insert SimpleType: Method(369) into ParameterizedType: List<Method>(370) at 1", "Insert SimpleName: Method(436) into SimpleType: Method(437) at 0", "Insert SimpleName: cacheEntry(438) into VariableDeclarationFragment(443) at 0", "Insert MethodInvocation(442) into VariableDeclarationFragment(443) at 1", "Move InfixExpression: ==(901) into IfStatement(515) at 0", "Insert Block(514) into IfStatement(515) at 1", "Insert MethodInvocation(610) into PrefixExpression: !(611) at 0", "Move VariableDeclarationStatement(801) into Block(762) at 0", "Insert EnhancedForStatement(642) into Block(762) at 1", "Insert ExpressionStatement(678) into Block(762) at 2", "Insert VariableDeclarationStatement(683) into Block(762) at 3", "Insert WhileStatement(761) into Block(762) at 4", "Insert MethodInvocation(56) into ReturnStatement(57) at 0", "Update SimpleName: MethodCache(619) to ConcurrentHashMap", "Move SimpleName: MethodCache(619) into SimpleType: ConcurrentHashMap(108) at 0", "Insert SimpleName: String(135) into SimpleType: String(136) at 0", "Insert SimpleType: List(138) into ParameterizedType: List<Method>(141) at 0", "Insert SimpleType: Method(140) into ParameterizedType: List<Method>(141) at 1", "Update SimpleName: clazz(181) to aClass", "Insert Assignment: =(251) into ExpressionStatement(252) at 0", "Insert Assignment: =(258) into ExpressionStatement(259) at 0", "Insert QualifiedName: java.util.Set(323) into SimpleType: java.util.Set(324) at 0", "Update SimpleName: Class(674) to String", "Insert SimpleName: byName(329) into MethodInvocation(331) at 0", "Insert SimpleName: keySet(330) into MethodInvocation(331) at 1", "Move ArrayType: String[](1004) into ArrayCreation(343) at 0", "Insert MethodInvocation(342) into ArrayCreation(343) at 1", "Insert SimpleName: List(366) into SimpleType: List(367) at 0", "Insert SimpleName: Method(368) into SimpleType: Method(369) at 0", "Update SimpleName: methodMap(1040) to byName", "Update SimpleName: PRIMITIVE_TYPES(707) to byKey", "Move SimpleName: PRIMITIVE_TYPES(707) into MethodInvocation(442) at 0", "Update SimpleName: put(708) to get", "Move SimpleName: put(708) into MethodInvocation(442) at 1", "Insert SimpleName: methodKey(441) into MethodInvocation(442) at 2", "Insert TryStatement(513) into Block(514) at 0", "Insert QualifiedName: cache.byKey(608) into MethodInvocation(610) at 0", "Insert SimpleName: isEmpty(609) into MethodInvocation(610) at 1", "Update ParameterizedType: Class<?>(794) to List<Method>", "Move SingleVariableDeclaration(962) into EnhancedForStatement(642) at 0", "Insert MethodInvocation(635) into EnhancedForStatement(642) at 1", "Insert Block(641) into EnhancedForStatement(642) at 2", "Insert MethodInvocation(677) into ExpressionStatement(678) at 0", "Insert PrimitiveType: int(679) into VariableDeclarationStatement(683) at 0", "Insert VariableDeclarationFragment(682) into VariableDeclarationStatement(683) at 1", "Insert InfixExpression: <(688) into WhileStatement(761) at 0", "Insert Block(760) into WhileStatement(761) at 1", "Insert TypeLiteral(53) into MethodInvocation(56) at 0", "Insert SimpleName: getMethod(54) into MethodInvocation(56) at 1", "Insert StringLiteral: \"cacheMiss\"(55) into MethodInvocation(56) at 2", "Insert SimpleName: List(137) into SimpleType: List(138) at 0", "Insert SimpleName: Method(139) into SimpleType: Method(140) at 0", "Insert SimpleName: fieldCache(249) into Assignment: =(251) at 0", "Insert SimpleName: cache(250) into Assignment: =(251) at 1", "Insert SimpleName: fieldCache(254) into Assignment: =(258) at 0", "Move MethodInvocation(240) into Assignment: =(258) at 1", "Insert SimpleName: set(340) into MethodInvocation(342) at 0", "Insert SimpleName: size(341) into MethodInvocation(342) at 1", "Insert Block(498) into TryStatement(513) at 0", "Insert CatchClause(512) into TryStatement(513) at 1", "Update SimpleType: Class(792) to List", "Insert SimpleType: Method(615) into ParameterizedType: List<Method>(616) at 1", "Update SimpleName: prim(795) to lm", "Insert ClassInstanceCreation(626) into VariableDeclarationFragment(627) at 1", "Insert QualifiedName: cache.byKey(633) into MethodInvocation(635) at 0", "Insert SimpleName: values(634) into MethodInvocation(635) at 1", "Insert ExpressionStatement(640) into Block(641) at 0", "Insert SimpleName: Collections(643) into MethodInvocation(677) at 0", "Insert SimpleName: sort(644) into MethodInvocation(677) at 1", "Insert SimpleName: lm(645) into MethodInvocation(677) at 2", "Insert ClassInstanceCreation(676) into MethodInvocation(677) at 3", "Insert SimpleName: start(680) into VariableDeclarationFragment(682) at 0", "Insert NumberLiteral: 0(681) into VariableDeclarationFragment(682) at 1", "Insert SimpleName: start(684) into InfixExpression: <(688) at 0", "Insert MethodInvocation(687) into InfixExpression: <(688) at 1", "Insert VariableDeclarationStatement(699) into Block(760) at 0", "Insert VariableDeclarationStatement(706) into Block(760) at 1", "Insert WhileStatement(736) into Block(760) at 2", "Insert VariableDeclarationStatement(749) into Block(760) at 3", "Move ExpressionStatement(989) into Block(760) at 4", "Insert ExpressionStatement(759) into Block(760) at 5", "Update SimpleName: populateMethodCacheWith(446) to populateWithClass", "Update SimpleName: populateMethodCacheWithInterface(476) to populateWithInterface", "Insert SimpleType: ClassMap(52) into TypeLiteral(53) at 0", "Insert VariableDeclarationStatement(467) into Block(498) at 0", "Insert IfStatement(479) into Block(498) at 1", "Insert IfStatement(497) into Block(498) at 2", "Move SingleVariableDeclaration(931) into CatchClause(512) at 0", "Insert Block(511) into CatchClause(512) at 1", "Update SimpleName: Class(791) to List", "Insert SimpleName: Method(614) into SimpleType: Method(615) at 0", "Insert ParameterizedType: ArrayList<Method>(622) into ClassInstanceCreation(626) at 0", "Insert MethodInvocation(625) into ClassInstanceCreation(626) at 1", "Insert MethodInvocation(639) into ExpressionStatement(640) at 0", "Update ParameterizedType: HashMap<MethodKey,Method>(834) to Comparator<Method>", "Move ParameterizedType: HashMap<MethodKey,Method>(834) into ClassInstanceCreation(676) at 0", "Insert AnonymousClassDeclaration(675) into ClassInstanceCreation(676) at 1", "Update SimpleName: put(913) to lm", "Move SimpleName: put(913) into MethodInvocation(687) at 0", "Update SimpleName: methodKey(914) to size", "Move SimpleName: methodKey(914) into MethodInvocation(687) at 1", "Insert SimpleType: String(690) into VariableDeclarationStatement(699) at 0", "Insert VariableDeclarationFragment(698) into VariableDeclarationStatement(699) at 1", "Insert PrimitiveType: int(700) into VariableDeclarationStatement(706) at 0", "Insert VariableDeclarationFragment(705) into VariableDeclarationStatement(706) at 1", "Insert InfixExpression: <(711) into WhileStatement(736) at 0", "Insert Block(735) into WhileStatement(736) at 1", "Move ParameterizedType: List<Method>(1038) into VariableDeclarationStatement(749) at 0", "Insert VariableDeclarationFragment(748) into VariableDeclarationStatement(749) at 1", "Insert Assignment: =(758) into ExpressionStatement(759) at 0", "Update SimpleName: MethodCache(342) to ClassMap", "Move SimpleName: MethodCache(342) into SimpleType: ClassMap(52) at 0", "Insert ParameterizedType: List<Method>(458) into VariableDeclarationStatement(467) at 0", "Insert VariableDeclarationFragment(466) into VariableDeclarationStatement(467) at 1", "Insert InfixExpression: !=(470) into IfStatement(479) at 0", "Insert Block(478) into IfStatement(479) at 1", "Insert InfixExpression: ==(482) into IfStatement(497) at 0", "Insert Block(489) into IfStatement(497) at 1", "Insert Block(496) into IfStatement(497) at 2", "Move ExpressionStatement(762) into Block(511) at 0", "Move ThrowStatement(939) into Block(511) at 1", "Update SimpleName: populateMethodCacheWith(364) to populateWithClass", "Update SimpleName: populateMethodCacheWithInterface(394) to populateWithInterface", "Insert SimpleType: ArrayList(619) into ParameterizedType: ArrayList<Method>(622) at 0", "Move SimpleType: Method(299) into ParameterizedType: ArrayList<Method>(622) at 1", "Insert QualifiedName: cache.byKey(623) into MethodInvocation(625) at 0", "Update SimpleName: parm(798) to size", "Move SimpleName: parm(798) into MethodInvocation(625) at 1", "Insert SimpleName: lm(636) into MethodInvocation(639) at 0", "Insert SimpleName: add(637) into MethodInvocation(639) at 1", "Insert SimpleName: method(638) into MethodInvocation(639) at 2", "Update SimpleType: HashMap(829) to Comparator", "Update SimpleType: MethodKey(831) to Method", "Insert MethodDeclaration(674) into AnonymousClassDeclaration(675) at 0", "Insert SimpleName: String(689) into SimpleType: String(690) at 0", "Insert SimpleName: name(691) into VariableDeclarationFragment(698) at 0", "Insert MethodInvocation(697) into VariableDeclarationFragment(698) at 1", "Insert SimpleName: end(701) into VariableDeclarationFragment(705) at 0", "Insert InfixExpression: +(704) into VariableDeclarationFragment(705) at 1", "Insert SimpleName: end(707) into InfixExpression: <(711) at 0", "Insert MethodInvocation(710) into InfixExpression: <(711) at 1", "Move VariableDeclarationStatement(972) into Block(735) at 0", "Insert IfStatement(734) into Block(735) at 1", "Insert SimpleName: lmn(742) into VariableDeclarationFragment(748) at 0", "Insert MethodInvocation(747) into VariableDeclarationFragment(748) at 1", "Insert QualifiedName: cache.byName(750) into MethodInvocation(754) at 0", "Update SimpleName: methodMap(985) to put", "Update SimpleName: add(986) to name", "Update SimpleName: method(987) to lmn", "Insert SimpleName: start(756) into Assignment: =(758) at 0", "Insert SimpleName: end(757) into Assignment: =(758) at 1", "Insert SimpleType: List(455) into ParameterizedType: List<Method>(458) at 0", "Insert SimpleType: Method(457) into ParameterizedType: List<Method>(458) at 1", "Insert SimpleName: methodList(459) into VariableDeclarationFragment(466) at 0", "Insert MethodInvocation(465) into VariableDeclarationFragment(466) at 1", "Insert SimpleName: methodList(468) into InfixExpression: !=(470) at 0", "Insert NullLiteral(469) into InfixExpression: !=(470) at 1", "Move ExpressionStatement(738) into Block(478) at 0", "Insert SimpleName: cacheEntry(480) into InfixExpression: ==(482) at 0", "Insert NullLiteral(481) into InfixExpression: ==(482) at 1", "Move ExpressionStatement(746) into Block(489) at 0", "Move ExpressionStatement(754) into Block(496) at 0", "Insert SimpleName: ArrayList(618) into SimpleType: ArrayList(619) at 0", "Update SimpleName: HashMap(828) to Comparator", "Update SimpleName: MethodKey(830) to Method", "Insert MarkerAnnotation(652) into MethodDeclaration(674) at 0", "Insert Modifier: public(653) into MethodDeclaration(674) at 1", "Insert PrimitiveType: int(654) into MethodDeclaration(674) at 2", "Insert SimpleName: compare(655) into MethodDeclaration(674) at 3", "Insert SingleVariableDeclaration(659) into MethodDeclaration(674) at 4", "Insert SingleVariableDeclaration(663) into MethodDeclaration(674) at 5", "Insert Block(673) into MethodDeclaration(674) at 6", "Insert MethodInvocation(695) into MethodInvocation(697) at 0", "Update SimpleName: CACHE_MISS(922) to getName", "Move SimpleName: CACHE_MISS(922) into MethodInvocation(697) at 1", "Insert SimpleName: start(702) into InfixExpression: +(704) at 0", "Insert NumberLiteral: 1(703) into InfixExpression: +(704) at 1", "Insert SimpleName: lm(708) into MethodInvocation(710) at 0", "Insert SimpleName: size(709) into MethodInvocation(710) at 1", "Update SimpleType: MethodKey(965) to String", "Insert MethodInvocation(726) into IfStatement(734) at 0", "Insert Block(731) into IfStatement(734) at 1", "Insert Block(733) into IfStatement(734) at 2", "Update SimpleName: methods(979) to lm", "Move SimpleName: methods(979) into MethodInvocation(747) at 0", "Update SimpleName: put(980) to subList", "Move SimpleName: put(980) into MethodInvocation(747) at 1", "Update SimpleName: methodKey(981) to start", "Move SimpleName: methodKey(981) into MethodInvocation(747) at 2", "Update SimpleName: method(982) to end", "Move SimpleName: method(982) into MethodInvocation(747) at 3", "Insert SimpleName: List(454) into SimpleType: List(455) at 0", "Update SimpleName: Character(718) to Method", "Move SimpleName: Character(718) into SimpleType: Method(457) at 0", "Update SimpleName: PRIMITIVE_TYPES(723) to byName", "Move SimpleName: PRIMITIVE_TYPES(723) into MethodInvocation(465) at 0", "Update SimpleName: put(724) to get", "Move SimpleName: put(724) into MethodInvocation(465) at 1", "Insert MethodInvocation(464) into MethodInvocation(465) at 2", "Insert Assignment: =(476) into ExpressionStatement(477) at 0", "Update SimpleName: PRIMITIVE_TYPES(755) to byKey", "Insert SimpleName: methodKey(505) into MethodInvocation(507) at 2", "Insert SimpleName: CACHE_MISS(506) into MethodInvocation(507) at 3", "Insert SimpleName: Override(651) into MarkerAnnotation(652) at 0", "Insert SimpleType: Method(657) into SingleVariableDeclaration(659) at 0", "Insert SimpleName: o1(658) into SingleVariableDeclaration(659) at 1", "Move SimpleType: Method(884) into SingleVariableDeclaration(663) at 0", "Insert SimpleName: o2(662) into SingleVariableDeclaration(663) at 1", "Insert ReturnStatement(672) into Block(673) at 0", "Update SimpleName: methods(919) to lm", "Move SimpleName: methods(919) into MethodInvocation(695) at 0", "Update SimpleName: put(920) to get", "Move SimpleName: put(920) into MethodInvocation(695) at 1", "Update SimpleName: methodKey(921) to start", "Move SimpleName: methodKey(921) into MethodInvocation(695) at 2", "Update SimpleName: MethodKey(964) to String", "Update SimpleName: methodKey(966) to walk", "Insert MethodInvocation(720) into VariableDeclarationFragment(721) at 1", "Update SimpleName: methods(973) to walk", "Move SimpleName: methods(973) into MethodInvocation(726) at 0", "Update SimpleName: get(974) to equals", "Move SimpleName: get(974) into MethodInvocation(726) at 1", "Update SimpleName: methodKey(975) to name", "Move SimpleName: methodKey(975) into MethodInvocation(726) at 2", "Insert ExpressionStatement(730) into Block(731) at 0", "Insert BreakStatement(732) into Block(733) at 0", "Insert QualifiedName: cache.byKey(913) into MethodInvocation(920) at 0", "Update SimpleName: cache(557) to putIfAbsent", "Insert ClassInstanceCreation(918) into MethodInvocation(920) at 2", "Insert SimpleName: mi(919) into MethodInvocation(920) at 3", "Insert SimpleName: methodKey(462) into MethodInvocation(464) at 0", "Insert SimpleName: getMethod(463) into MethodInvocation(464) at 1", "Insert SimpleName: cacheEntry(471) into Assignment: =(476) at 0", "Insert MethodInvocation(475) into Assignment: =(476) at 1", "Update SimpleName: PRIMITIVE_TYPES(739) to byKey", "Insert SimpleName: methodKey(485) into MethodInvocation(487) at 2", "Insert SimpleName: CACHE_MISS(486) into MethodInvocation(487) at 3", "Update SimpleName: PRIMITIVE_TYPES(747) to byKey", "Insert SimpleName: methodKey(492) into MethodInvocation(494) at 2", "Insert SimpleName: cacheEntry(493) into MethodInvocation(494) at 3", "Update SimpleName: MethodMap(846) to Method", "Move SimpleName: MethodMap(846) into SimpleType: Method(657) at 0", "Insert MethodInvocation(671) into ReturnStatement(672) at 0", "Insert MethodInvocation(718) into MethodInvocation(720) at 0", "Insert SimpleName: getName(719) into MethodInvocation(720) at 1", "Insert Assignment: +=(729) into ExpressionStatement(730) at 0", "Insert SimpleType: MethodKey(916) into ClassInstanceCreation(918) at 0", "Insert SimpleName: mi(917) into ClassInstanceCreation(918) at 1", "Update SimpleName: PRIMITIVE_TYPES(731) to methodKey", "Move SimpleName: PRIMITIVE_TYPES(731) into MethodInvocation(475) at 0", "Update SimpleName: put(732) to getMostSpecificMethod", "Move SimpleName: put(732) into MethodInvocation(475) at 1", "Insert SimpleName: methodList(474) into MethodInvocation(475) at 2", "Insert MethodInvocation(666) into MethodInvocation(671) at 0", "Insert SimpleName: compareTo(667) into MethodInvocation(671) at 1", "Insert MethodInvocation(670) into MethodInvocation(671) at 2", "Insert SimpleName: lm(715) into MethodInvocation(718) at 0", "Insert SimpleName: get(716) into MethodInvocation(718) at 1", "Insert SimpleName: end(717) into MethodInvocation(718) at 2", "Insert SimpleName: end(727) into Assignment: +=(729) at 0", "Insert NumberLiteral: 1(728) into Assignment: +=(729) at 1", "Insert SimpleName: MethodKey(915) into SimpleType: MethodKey(916) at 0", "Update SimpleName: methods(886) to o1", "Move SimpleName: methods(886) into MethodInvocation(666) at 0", "Update SimpleName: get(887) to getName", "Move SimpleName: get(887) into MethodInvocation(666) at 1", "Update SimpleName: methodMap(903) to o2", "Move SimpleName: methodMap(903) into MethodInvocation(670) at 0", "Update SimpleName: find(904) to getName", "Move SimpleName: find(904) into MethodInvocation(670) at 1", "Delete TextElement: cache of methods. (32)", "Delete TagElement(33)", "Delete Javadoc(34)", "Delete Modifier: private(35)", "Delete Modifier: final(36)", "Delete SimpleName: MethodCache(37)", "Delete SimpleType: MethodCache(38)", "Delete SimpleName: methodCache(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete TextElement: cache of fields. (42)", "Delete TagElement(43)", "Delete Javadoc(44)", "Delete Modifier: private(45)", "Delete Modifier: final(46)", "Delete FieldDeclaration(56)", "Delete SimpleName: ClassMap(66)", "Delete SimpleName: methodCache(77)", "Delete SimpleName: createMethodCache(78)", "Delete SimpleName: aClass(79)", "Delete SimpleName: log(80)", "Delete MethodInvocation(81)", "Delete Assignment: =(82)", "Delete ExpressionStatement(83)", "Delete SimpleName: fieldCache(84)", "Delete SimpleName: createFieldCache(85)", "Delete SimpleName: aClass(86)", "Delete MethodInvocation(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete TextElement: Find a Field using its name.(92)", "Delete TextElement: <p>The clazz parameter <strong>must</strong> be this ClassMap key.</p>(93)", "Delete TagElement(94)", "Delete SimpleName: clazz(95)", "Delete TextElement:  the class to introspect(96)", "Delete TagElement: @param(97)", "Delete Javadoc(103)", "Delete SimpleName: findField(106)", "Delete Modifier: final(107)", "Delete SimpleName: Class(108)", "Delete SimpleType: Class(109)", "Delete WildcardType: ?(110)", "Delete ParameterizedType: Class<?>(111)", "Delete SimpleName: clazz(112)", "Delete SingleVariableDeclaration(113)", "Delete MethodDeclaration(125)", "Delete SimpleName: getMethodNames(255)", "Delete SimpleName: methodCache(256)", "Delete SimpleName: names(257)", "Delete MethodInvocation(258)", "Delete ReturnStatement(259)", "Delete Block(260)", "Delete MethodDeclaration(261)", "Delete TextElement: Gets all the methods with a given name from this map.(262)", "Delete TagElement(263)", "Delete SimpleName: methodName(264)", "Delete TextElement:  the seeked methods name(265)", "Delete TagElement: @param(266)", "Delete TextElement:  the array of methods(267)", "Delete TagElement: @return(268)", "Delete Javadoc(269)", "Delete SimpleName: Method(270)", "Delete SimpleType: Method(271)", "Delete Dimension(272)", "Delete ArrayType: Method[](273)", "Delete SimpleName: get(274)", "Delete Modifier: final(275)", "Delete SimpleName: String(276)", "Delete SimpleType: String(277)", "Delete SimpleName: methodName(278)", "Delete SingleVariableDeclaration(279)", "Delete SimpleName: methodCache(280)", "Delete SimpleName: get(281)", "Delete SimpleName: methodName(282)", "Delete MethodInvocation(283)", "Delete ReturnStatement(284)", "Delete Block(285)", "Delete MethodDeclaration(286)", "Delete TextElement: Find a Method using the method name and parameter objects.(287)", "Delete TagElement(288)", "Delete SimpleName: key(289)", "Delete TextElement:  the method key(290)", "Delete TagElement: @param(291)", "Delete TextElement:  A Method object representing the method to invoke or null.(292)", "Delete TagElement: @return(293)", "Delete QualifiedName: MethodKey.AmbiguousException(294)", "Delete TextElement:  When more than one method is a match for the parameters.(295)", "Delete TagElement: @throws(296)", "Delete Javadoc(297)", "Delete SimpleName: findMethod(300)", "Delete Modifier: final(301)", "Delete SimpleName: key(304)", "Delete SingleVariableDeclaration(305)", "Delete QualifiedName: MethodKey.AmbiguousException(306)", "Delete SimpleType: MethodKey.AmbiguousException(307)", "Delete SimpleName: methodCache(308)", "Delete SimpleName: get(309)", "Delete SimpleName: key(310)", "Delete MethodInvocation(311)", "Delete ReturnStatement(312)", "Delete Block(313)", "Delete MethodDeclaration(314)", "Delete SimpleName: MethodCache(329)", "Delete SimpleType: MethodCache(330)", "Delete SimpleType: MethodCache(343)", "Delete SimpleName: cache(344)", "Delete SimpleName: MethodCache(345)", "Delete SimpleType: MethodCache(346)", "Delete ClassInstanceCreation(347)", "Delete VariableDeclarationFragment(348)", "Delete VariableDeclarationStatement(349)", "Delete SimpleName: cache(406)", "Delete ReturnStatement(407)", "Delete Block(408)", "Delete Modifier: static(655)", "Delete PrimitiveType: int(657)", "Delete NumberLiteral: 13(659)", "Delete TextElement: Creates a map of all public fields of a given class.(152)", "Delete TagElement(153)", "Delete SimpleName: clazz(154)", "Delete TextElement:  the class to introspect(155)", "Delete TagElement: @param(156)", "Delete TextElement:  the map of fields (may be the empty map, can not be null)(157)", "Delete TagElement: @return(158)", "Delete Javadoc(159)", "Delete Modifier: private(160)", "Delete Modifier: static(161)", "Delete SimpleName: Map(162)", "Delete SimpleType: Map(163)", "Delete SimpleName: String(164)", "Delete SimpleType: String(165)", "Delete SimpleName: Field(166)", "Delete SimpleType: Field(167)", "Delete ParameterizedType: Map<String,Field>(168)", "Delete SimpleName: createFieldCache(169)", "Delete SimpleName: Class(170)", "Delete SimpleType: Class(171)", "Delete WildcardType: ?(172)", "Delete ParameterizedType: Class<?>(173)", "Delete SimpleName: clazz(174)", "Delete SingleVariableDeclaration(175)", "Delete SimpleName: cache(235)", "Delete ReturnStatement(236)", "Delete ReturnStatement(241)", "Delete SimpleName: methodMap(1033)", "Delete SynchronizedStatement(1072)", "Delete Block(1073)", "Delete QualifiedName: Float.TYPE(733)", "Delete SimpleName: Float(734)", "Delete SimpleType: Float(735)", "Delete TypeLiteral(736)", "Delete MethodInvocation(737)", "Delete QualifiedName: Integer.TYPE(741)", "Delete SimpleName: Integer(742)", "Delete SimpleType: Integer(743)", "Delete TypeLiteral(744)", "Delete QualifiedName: Long.TYPE(749)", "Delete SimpleName: Long(750)", "Delete SimpleType: Long(751)", "Delete TypeLiteral(752)", "Delete QualifiedName: Short.TYPE(757)", "Delete SimpleName: Short(758)", "Delete SimpleType: Short(759)", "Delete TypeLiteral(760)", "Delete SimpleType: Class(786)", "Delete WildcardType: ?(787)", "Delete ParameterizedType: Class<?>(788)", "Delete WildcardType: ?(793)", "Delete SimpleName: PRIMITIVE_TYPES(796)", "Delete SimpleName: get(797)", "Delete MethodInvocation(799)", "Delete SimpleName: MethodKey(967)", "Delete SimpleType: MethodKey(968)", "Delete SimpleName: method(969)", "Delete ClassInstanceCreation(970)", "Delete SimpleName: put(558)", "Delete SimpleName: methods(559)", "Delete SimpleName: i(560)", "Delete ArrayAccess(561)", "Delete Javadoc(604)", "Delete Modifier: static(605)", "Delete Modifier: final(606)", "Delete SimpleName: MethodCache(607)", "Delete Modifier: public(614)", "Delete Modifier: static(615)", "Delete SimpleName: cacheMiss(618)", "Delete SimpleType: MethodCache(620)", "Delete TypeLiteral(621)", "Delete SimpleName: getMethod(622)", "Delete StringLiteral: \"cacheMiss\"(623)", "Delete MethodInvocation(624)", "Delete ReturnStatement(625)", "Delete Block(626)", "Delete TryStatement(635)", "Delete Block(636)", "Delete MethodDeclaration(637)", "Delete Modifier: static(666)", "Delete SimpleName: Class(670)", "Delete SimpleType: Class(671)", "Delete WildcardType: ?(672)", "Delete ParameterizedType: Class<?>(673)", "Delete WildcardType: ?(676)", "Delete ParameterizedType: Class<?>(677)", "Delete ParameterizedType: Map<Class<?>,Class<?>>(678)", "Delete VariableDeclarationFragment(680)", "Delete FieldDeclaration(681)", "Delete Modifier: static(682)", "Delete SimpleName: PRIMITIVE_TYPES(683)", "Delete SimpleName: Class(686)", "Delete SimpleType: Class(687)", "Delete WildcardType: ?(688)", "Delete ParameterizedType: Class<?>(689)", "Delete SimpleName: Class(690)", "Delete SimpleType: Class(691)", "Delete WildcardType: ?(692)", "Delete ParameterizedType: Class<?>(693)", "Delete ParameterizedType: HashMap<Class<?>,Class<?>>(694)", "Delete SimpleName: PRIMITIVE_SIZE(695)", "Delete ClassInstanceCreation(696)", "Delete Assignment: =(697)", "Delete ExpressionStatement(698)", "Delete SimpleName: PRIMITIVE_TYPES(699)", "Delete SimpleName: put(700)", "Delete QualifiedName: Boolean.TYPE(701)", "Delete SimpleName: Boolean(702)", "Delete SimpleType: Boolean(703)", "Delete TypeLiteral(704)", "Delete MethodInvocation(705)", "Delete ExpressionStatement(706)", "Delete QualifiedName: Byte.TYPE(709)", "Delete SimpleName: Byte(710)", "Delete SimpleType: Byte(711)", "Delete TypeLiteral(712)", "Delete MethodInvocation(713)", "Delete ExpressionStatement(714)", "Delete SimpleName: PRIMITIVE_TYPES(715)", "Delete SimpleName: put(716)", "Delete QualifiedName: Character.TYPE(717)", "Delete SimpleType: Character(719)", "Delete TypeLiteral(720)", "Delete MethodInvocation(721)", "Delete ExpressionStatement(722)", "Delete QualifiedName: Double.TYPE(725)", "Delete SimpleName: Double(726)", "Delete SimpleType: Double(727)", "Delete TypeLiteral(728)", "Delete MethodInvocation(729)", "Delete ExpressionStatement(730)", "Delete Block(763)", "Delete Initializer(764)", "Delete TextElement: Converts a primitive type to its corresponding class.(765)", "Delete TextElement: <p>(766)", "Delete TextElement: If the argument type is primitive then we want to convert our(767)", "Delete TextElement: primitive type signature to the corresponding Object type so(768)", "Delete TextElement: introspection for methods with primitive types will work(769)", "Delete TextElement: correctly.(770)", "Delete TextElement: </p>(771)", "Delete TagElement(772)", "Delete SimpleName: parm(773)", "Delete TextElement:  a may-be primitive type class(774)", "Delete TagElement: @param(775)", "Delete TextElement:  the equivalent object class (776)", "Delete TagElement: @return(777)", "Delete Javadoc(778)", "Delete SimpleName: Class(780)", "Delete SimpleType: Class(781)", "Delete WildcardType: ?(782)", "Delete ParameterizedType: Class<?>(783)", "Delete SimpleName: primitiveClass(784)", "Delete SimpleName: prim(802)", "Delete NullLiteral(803)", "Delete InfixExpression: ==(804)", "Delete SimpleName: parm(805)", "Delete SimpleName: prim(806)", "Delete ConditionalExpression(807)", "Delete ReturnStatement(808)", "Delete Block(809)", "Delete MethodDeclaration(810)", "Delete TextElement: The method cache.(811)", "Delete TextElement: <p>(812)", "Delete TextElement: Cache of Methods, or CACHE_MISS, keyed by method(813)", "Delete TextElement: name and actual arguments used to find it.(814)", "Delete TextElement: </p>(815)", "Delete TagElement(816)", "Delete Javadoc(817)", "Delete Modifier: private(818)", "Delete Modifier: final(819)", "Delete SimpleName: Map(820)", "Delete SimpleType: Map(821)", "Delete ParameterizedType: Map<MethodKey,Method>(826)", "Delete SimpleName: methods(827)", "Delete ClassInstanceCreation(835)", "Delete VariableDeclarationFragment(836)", "Delete FieldDeclaration(837)", "Delete TextElement: Map of methods that are searchable according to method parameters to find a match.(838)", "Delete TagElement(839)", "Delete Javadoc(840)", "Delete Modifier: private(841)", "Delete Modifier: final(842)", "Delete SimpleName: MethodMap(843)", "Delete SimpleType: MethodMap(844)", "Delete SimpleName: methodMap(845)", "Delete SimpleType: MethodMap(847)", "Delete ClassInstanceCreation(848)", "Delete VariableDeclarationFragment(849)", "Delete FieldDeclaration(850)", "Delete SimpleName: get(874)", "Delete SimpleName: methodMap(882)", "Delete SimpleName: cacheEntry(885)", "Delete SimpleName: methodKey(888)", "Delete MethodInvocation(889)", "Delete VariableDeclarationFragment(890)", "Delete VariableDeclarationStatement(891)", "Delete IfStatement(898)", "Delete SimpleName: cacheEntry(902)", "Delete SimpleName: methodKey(905)", "Delete MethodInvocation(906)", "Delete Assignment: =(907)", "Delete ExpressionStatement(908)", "Delete SimpleName: cacheEntry(909)", "Delete NullLiteral(910)", "Delete InfixExpression: !=(911)", "Delete SimpleName: methods(912)", "Delete SimpleName: cacheEntry(915)", "Delete MethodInvocation(916)", "Delete ExpressionStatement(917)", "Delete Block(918)", "Delete MethodInvocation(923)", "Delete ExpressionStatement(924)", "Delete Block(925)", "Delete IfStatement(926)", "Delete Block(927)", "Delete SimpleName: methods(932)", "Delete SimpleName: put(933)", "Delete SimpleName: methodKey(934)", "Delete SimpleName: CACHE_MISS(935)", "Delete MethodInvocation(936)", "Delete ExpressionStatement(937)", "Delete Block(940)", "Delete CatchClause(941)", "Delete TryStatement(942)", "Delete Block(943)", "Delete IfStatement(944)", "Delete Block(947)", "Delete SynchronizedStatement(948)", "Delete Block(949)", "Delete MethodDeclaration(950)", "Delete TextElement: Adds a method to the map.(951)", "Delete TagElement(952)", "Delete SimpleName: method(953)", "Delete TextElement:  the method to add(954)", "Delete TagElement: @param(955)", "Delete Javadoc(956)", "Delete PrimitiveType: void(957)", "Delete SimpleName: put(958)", "Delete SimpleName: methodMap(963)", "Delete MethodInvocation(976)", "Delete NullLiteral(977)", "Delete InfixExpression: ==(978)", "Delete MethodInvocation(983)", "Delete ExpressionStatement(984)", "Delete Block(990)", "Delete IfStatement(991)", "Delete Block(992)", "Delete SynchronizedStatement(993)", "Delete Block(994)", "Delete MethodDeclaration(995)", "Delete TextElement: Gets all the method names from this map.(996)", "Delete TagElement(997)", "Delete TextElement:  the array of method name(998)", "Delete TagElement: @return(999)", "Delete Javadoc(1000)", "Delete SimpleName: names(1005)", "Delete SimpleName: methodMap(1006)", "Delete SimpleName: methodMap(1007)", "Delete SimpleName: names(1008)", "Delete MethodInvocation(1009)", "Delete ReturnStatement(1010)", "Delete Block(1011)", "Delete SynchronizedStatement(1012)", "Delete Block(1013)", "Delete MethodDeclaration(1014)", "Delete TypeDeclaration: class(1075)"]}}, {"Introspector_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: java.util.concurrent.locks.ReadWriteLock to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: java.util.concurrent.locks.ReentrantReadWriteLock to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV TypeDeclaration: class to TypeDeclaration: class at 4", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV FieldDeclaration to TypeDeclaration: class at 7", "MOV MethodDeclaration to TypeDeclaration: class at 24", "MOV MethodDeclaration to TypeDeclaration: class at 24"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS Javadoc to FieldDeclaration at 0", "INS SimpleName: lock to VariableDeclarationFragment at 0", "INS SimpleName: ReadWriteLock to SimpleType: ReadWriteLock at 0", "INS SimpleType: ReentrantReadWriteLock to ClassInstanceCreation at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: ReadWriteLock to FieldDeclaration at 3", "INS TagElement to Javadoc at 0", "INS TextElement: The read/write lock. to TagElement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: ReentrantReadWriteLock to SimpleType: ReentrantReadWriteLock at 0", "INS Modifier: private to FieldDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS SimpleName: unlock to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: classMap to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: classMethodMaps to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 1", "INS SimpleName: writeLock to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TryStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: readLock to MethodInvocation at 1", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: get to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS TryStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS Block to TryStatement at 1", "INS IfStatement to Block at 2", "INS SimpleName: lock to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleName: readLock to MethodInvocation at 1", "INS SimpleName: unlock to MethodInvocation at 1", "INS SimpleName: lock to MethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: classMap to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: classMap to InfixExpression: == at 0", "INS SimpleName: lock to MethodInvocation at 0", "INS SimpleName: classMethodMaps to MethodInvocation at 0", "INS SimpleName: lock to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: writeLock to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: lock to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 2", "INS SimpleName: classMap to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 2", "INS IfStatement to Block at 2", "INS SimpleName: classMap to InfixExpression: == at 0", "INS SimpleName: lock to MethodInvocation at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS TryStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS Block to TryStatement at 1", "INS SimpleName: lock to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS TryStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: ctor to Assignment: = at 0", "INS SimpleName: constructorsMap to MethodInvocation at 0", "INS SimpleName: lock to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: readLock to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: key to MethodInvocation at 2", "INS SimpleName: lock to MethodInvocation at 0", "INS SimpleName: readLock to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: unlock to MethodInvocation at 1", "INS ExpressionStatement to Block at 1"]}, {"root": "INS TryStatement to Block at 2", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: lock to MethodInvocation at 0", "INS SimpleName: writeLock to MethodInvocation at 1", "INS TryStatement to Block at 2", "INS SimpleName: unlock to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to TryStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ClassMap to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from findField to getField", "operations": ["UPD SimpleName: findField from findField to getField"]}, {"root": "UPDATE from get to getMethods", "operations": ["UPD SimpleName: get from get to getMethods"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: writeLock to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: lock to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: lock to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ReturnStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS NullLiteral to ConditionalExpression at 1", "INS IfStatement to Block at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: ctor to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: ctor to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS ReturnStatement to Block at 6"]}, {"root": "UPDATE from == to !=", "operations": ["UPD InfixExpression: == from == to !="]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV SimpleName: ctor to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from findMethod to getMethod", "operations": ["UPD SimpleName: findMethod from findMethod to getMethod"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS NullLiteral to ConditionalExpression at 1", "INS MethodInvocation to ConditionalExpression at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: ctor to MethodInvocation at 2", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: CTOR_MISS to MethodInvocation at 0", "INS SimpleName: ctor to ConditionalExpression at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: classMap to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "DEL SimpleName: c", "operations": ["DEL SimpleName: c"]}, {"root": "DEL IfStatement", "operations": ["DEL ReturnStatement", "DEL NullLiteral", "DEL IfStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL Block", "operations": ["DEL SynchronizedStatement", "DEL SimpleName: constructorsMap", "DEL Block"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: classMap"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleName: classMethodMaps", "DEL SynchronizedStatement"]}]}}, {"Introspector_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(1237) at 11", "Insert ImportDeclaration(25) into CompilationUnit(1237) at 12", "Move FieldDeclaration(78) into TypeDeclaration: class(1236) at 7", "Move TypeDeclaration: class(516) into TypeDeclaration: class(1236) at 4", "Move FieldDeclaration(536) into TypeDeclaration: class(1236) at 5", "Move MethodDeclaration(718) into TypeDeclaration: class(1236) at 24", "Move MethodDeclaration(780) into TypeDeclaration: class(1236) at 24", "Insert QualifiedName: java.util.concurrent.locks.ReadWriteLock(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: java.util.concurrent.locks.ReentrantReadWriteLock(24) into ImportDeclaration(25) at 0", "Insert FieldDeclaration(114) into TypeDeclaration: class(1236) at 8", "Insert Javadoc(104) into FieldDeclaration(114) at 0", "Insert Modifier: private(105) into FieldDeclaration(114) at 1", "Insert Modifier: final(106) into FieldDeclaration(114) at 2", "Insert SimpleType: ReadWriteLock(108) into FieldDeclaration(114) at 3", "Insert VariableDeclarationFragment(113) into FieldDeclaration(114) at 4", "Move Block(1062) into MethodDeclaration(884) at 6", "Insert Block(990) into MethodDeclaration(991) at 5", "Insert TagElement(103) into Javadoc(104) at 0", "Insert SimpleName: ReadWriteLock(107) into SimpleType: ReadWriteLock(108) at 0", "Insert SimpleName: lock(109) into VariableDeclarationFragment(113) at 0", "Insert ClassInstanceCreation(112) into VariableDeclarationFragment(113) at 1", "Move VariableDeclarationStatement(845) into Block(883) at 0", "Insert TryStatement(652) into Block(883) at 1", "Insert TryStatement(882) into Block(883) at 2", "Insert VariableDeclarationStatement(907) into Block(990) at 0", "Insert TryStatement(929) into Block(990) at 1", "Insert IfStatement(987) into Block(990) at 2", "Move ReturnStatement(1114) into Block(990) at 3", "Insert TextElement: The read/write lock.(102) into TagElement(103) at 0", "Insert SimpleType: ReentrantReadWriteLock(111) into ClassInstanceCreation(112) at 0", "Insert Block(644) into TryStatement(652) at 0", "Insert Block(651) into TryStatement(652) at 1", "Move Block(1058) into TryStatement(882) at 0", "Insert Block(881) into TryStatement(882) at 1", "Move SimpleType: ClassMap(1086) into VariableDeclarationStatement(907) at 0", "Insert VariableDeclarationFragment(906) into VariableDeclarationStatement(907) at 1", "Insert Block(921) into TryStatement(929) at 0", "Insert Block(928) into TryStatement(929) at 1", "Insert InfixExpression: ==(932) into IfStatement(987) at 0", "Insert Block(986) into IfStatement(987) at 1", "Insert SimpleName: ReentrantReadWriteLock(110) into SimpleType: ReentrantReadWriteLock(111) at 0", "Move MethodInvocation(284) into MethodInvocation(408) at 0", "Update SimpleName: findField(352) to getField", "Update SimpleName: get(494) to getMethods", "Insert ExpressionStatement(623) into Block(644) at 0", "Insert ExpressionStatement(630) into Block(644) at 1", "Insert IfStatement(643) into Block(644) at 2", "Insert ExpressionStatement(650) into Block(651) at 0", "Insert ExpressionStatement(658) into Block(874) at 0", "Move ExpressionStatement(853) into Block(874) at 1", "Insert IfStatement(678) into Block(874) at 2", "Insert ReturnStatement(873) into Block(874) at 6", "Insert ExpressionStatement(880) into Block(881) at 0", "Insert SimpleName: classMap(905) into VariableDeclarationFragment(906) at 0", "Insert ExpressionStatement(913) into Block(921) at 0", "Insert ExpressionStatement(920) into Block(921) at 1", "Insert ExpressionStatement(927) into Block(928) at 0", "Insert SimpleName: classMap(930) into InfixExpression: ==(932) at 0", "Insert NullLiteral(931) into InfixExpression: ==(932) at 1", "Insert TryStatement(985) into Block(986) at 0", "Insert MethodInvocation(622) into ExpressionStatement(623) at 0", "Insert Assignment: =(629) into ExpressionStatement(630) at 0", "Update InfixExpression: ==(864) to !=", "Move InfixExpression: ==(864) into IfStatement(643) at 0", "Insert Block(642) into IfStatement(643) at 1", "Insert MethodInvocation(649) into ExpressionStatement(650) at 0", "Insert MethodInvocation(657) into ExpressionStatement(658) at 0", "Insert InfixExpression: !=(668) into IfStatement(678) at 0", "Insert Block(677) into IfStatement(678) at 1", "Move SimpleName: ctor(1060) into ReturnStatement(873) at 0", "Insert MethodInvocation(879) into ExpressionStatement(880) at 0", "Insert MethodInvocation(912) into ExpressionStatement(913) at 0", "Insert Assignment: =(919) into ExpressionStatement(920) at 0", "Insert MethodInvocation(926) into ExpressionStatement(927) at 0", "Insert Block(977) into TryStatement(985) at 0", "Insert Block(984) into TryStatement(985) at 1", "Move MethodInvocation(351) into MethodInvocation(341) at 0", "Update SimpleName: findMethod(285) to getMethod", "Insert MethodInvocation(620) into MethodInvocation(622) at 0", "Insert SimpleName: lock(621) into MethodInvocation(622) at 1", "Insert SimpleName: ctor(624) into Assignment: =(629) at 0", "Insert MethodInvocation(628) into Assignment: =(629) at 1", "Move ReturnStatement(1061) into Block(642) at 0", "Insert MethodInvocation(647) into MethodInvocation(649) at 0", "Insert SimpleName: unlock(648) into MethodInvocation(649) at 1", "Insert MethodInvocation(655) into MethodInvocation(657) at 0", "Insert SimpleName: lock(656) into MethodInvocation(657) at 1", "Insert SimpleName: ctor(666) into InfixExpression: !=(668) at 0", "Insert NullLiteral(667) into InfixExpression: !=(668) at 1", "Insert ReturnStatement(676) into Block(677) at 0", "Insert MethodInvocation(877) into MethodInvocation(879) at 0", "Insert SimpleName: unlock(878) into MethodInvocation(879) at 1", "Insert MethodInvocation(910) into MethodInvocation(912) at 0", "Insert SimpleName: lock(911) into MethodInvocation(912) at 1", "Insert SimpleName: classMap(914) into Assignment: =(919) at 0", "Insert MethodInvocation(918) into Assignment: =(919) at 1", "Insert MethodInvocation(924) into MethodInvocation(926) at 0", "Insert SimpleName: unlock(925) into MethodInvocation(926) at 1", "Insert ExpressionStatement(938) into Block(977) at 0", "Insert ExpressionStatement(945) into Block(977) at 1", "Insert IfStatement(976) into Block(977) at 2", "Insert ExpressionStatement(983) into Block(984) at 0", "Insert SimpleName: lock(618) into MethodInvocation(620) at 0", "Insert SimpleName: readLock(619) into MethodInvocation(620) at 1", "Insert SimpleName: constructorsMap(625) into MethodInvocation(628) at 0", "Insert SimpleName: get(626) into MethodInvocation(628) at 1", "Insert SimpleName: key(627) into MethodInvocation(628) at 2", "Insert ConditionalExpression(640) into ReturnStatement(641) at 0", "Insert SimpleName: lock(645) into MethodInvocation(647) at 0", "Insert SimpleName: readLock(646) into MethodInvocation(647) at 1", "Insert SimpleName: lock(653) into MethodInvocation(655) at 0", "Insert SimpleName: writeLock(654) into MethodInvocation(655) at 1", "Insert ConditionalExpression(675) into ReturnStatement(676) at 0", "Insert SimpleName: lock(875) into MethodInvocation(877) at 0", "Insert SimpleName: writeLock(876) into MethodInvocation(877) at 1", "Insert SimpleName: lock(908) into MethodInvocation(910) at 0", "Insert SimpleName: readLock(909) into MethodInvocation(910) at 1", "Insert SimpleName: classMethodMaps(915) into MethodInvocation(918) at 0", "Insert SimpleName: get(916) into MethodInvocation(918) at 1", "Insert SimpleName: c(917) into MethodInvocation(918) at 2", "Insert SimpleName: lock(922) into MethodInvocation(924) at 0", "Insert SimpleName: readLock(923) into MethodInvocation(924) at 1", "Insert MethodInvocation(937) into ExpressionStatement(938) at 0", "Insert Assignment: =(944) into ExpressionStatement(945) at 0", "Insert InfixExpression: ==(948) into IfStatement(976) at 0", "Move Block(1115) into IfStatement(976) at 1", "Insert MethodInvocation(982) into ExpressionStatement(983) at 0", "Insert MethodInvocation(637) into ConditionalExpression(640) at 0", "Insert NullLiteral(638) into ConditionalExpression(640) at 1", "Insert SimpleName: ctor(639) into ConditionalExpression(640) at 2", "Move MethodInvocation(857) into ConditionalExpression(675) at 0", "Insert NullLiteral(673) into ConditionalExpression(675) at 1", "Insert SimpleName: ctor(674) into ConditionalExpression(675) at 2", "Insert MethodInvocation(935) into MethodInvocation(937) at 0", "Insert SimpleName: lock(936) into MethodInvocation(937) at 1", "Insert SimpleName: classMap(939) into Assignment: =(944) at 0", "Insert MethodInvocation(943) into Assignment: =(944) at 1", "Insert SimpleName: classMap(946) into InfixExpression: ==(948) at 0", "Insert NullLiteral(947) into InfixExpression: ==(948) at 1", "Insert ExpressionStatement(955) into Block(975) at 0", "Insert MethodInvocation(980) into MethodInvocation(982) at 0", "Insert SimpleName: unlock(981) into MethodInvocation(982) at 1", "Insert SimpleName: CTOR_MISS(634) into MethodInvocation(637) at 0", "Insert SimpleName: equals(635) into MethodInvocation(637) at 1", "Insert SimpleName: ctor(636) into MethodInvocation(637) at 2", "Insert SimpleName: lock(933) into MethodInvocation(935) at 0", "Insert SimpleName: writeLock(934) into MethodInvocation(935) at 1", "Insert SimpleName: classMethodMaps(940) into MethodInvocation(943) at 0", "Insert SimpleName: get(941) into MethodInvocation(943) at 1", "Insert SimpleName: c(942) into MethodInvocation(943) at 2", "Insert Assignment: =(954) into ExpressionStatement(955) at 0", "Insert SimpleName: lock(978) into MethodInvocation(980) at 0", "Insert SimpleName: writeLock(979) into MethodInvocation(980) at 1", "Insert SimpleName: classMap(949) into Assignment: =(954) at 0", "Move MethodInvocation(1091) into Assignment: =(954) at 1", "Delete SimpleName: c(353)", "Delete NullLiteral(858)", "Delete ReturnStatement(859)", "Delete Block(860)", "Delete IfStatement(861)", "Delete IfStatement(1059)", "Delete SimpleName: constructorsMap(846)", "Delete SynchronizedStatement(1063)", "Delete Block(1064)", "Delete SimpleName: classMap(1087)", "Delete VariableDeclarationFragment(1092)", "Delete VariableDeclarationStatement(1093)", "Delete SimpleName: classMethodMaps(1084)", "Delete SynchronizedStatement(1116)", "Delete Block(1117)"]}}, {"MethodKey_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.util.HashMap to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: java.util.Map to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: The initial size of the primitive conversion map.  to TagElement at 0", "INS Modifier: private to FieldDeclaration at 1", "INS NumberLiteral: 13 to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 3", "INS PrimitiveType: int to FieldDeclaration at 4", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS Modifier: static to FieldDeclaration at 2", "INS SimpleName: PRIMITIVE_SIZE to VariableDeclarationFragment at 0", "INS Javadoc to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 5", "INS TagElement to Javadoc at 0", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS SimpleName: Class to SimpleType: Class at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS ParameterizedType: Class<?> to ParameterizedType: Map<Class<?>,Class<?>> at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS Modifier: final to FieldDeclaration at 3", "INS ParameterizedType: Map<Class<?>,Class<?>> to FieldDeclaration at 4", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Modifier: private to FieldDeclaration at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS Modifier: static to FieldDeclaration at 2", "INS ParameterizedType: Class<?> to ParameterizedType: Map<Class<?>,Class<?>> at 2", "INS TextElement: The primitive type to class conversion map.  to TagElement at 0", "INS Javadoc to FieldDeclaration at 0", "INS SimpleName: PRIMITIVE_TYPES to VariableDeclarationFragment at 0", "INS SimpleType: Map to ParameterizedType: Map<Class<?>,Class<?>> at 0"]}, {"root": "INS Initializer to TypeDeclaration: class at 6", "operations": ["INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Integer.TYPE to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleType: HashMap to ParameterizedType: HashMap<Class<?>,Class<?>> at 0", "INS ParameterizedType: Class<?> to ParameterizedType: HashMap<Class<?>,Class<?>> at 1", "INS ParameterizedType: Class<?> to ParameterizedType: HashMap<Class<?>,Class<?>> at 2", "INS ExpressionStatement to Block at 6", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: put to MethodInvocation at 1", "INS Block to Initializer at 1", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS ParameterizedType: HashMap<Class<?>,Class<?>> to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Character.TYPE to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Boolean.TYPE to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: put to MethodInvocation at 1", "INS QualifiedName: Long.TYPE to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS SimpleName: Byte to SimpleType: Byte at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Initializer to TypeDeclaration: class at 6", "INS SimpleName: PRIMITIVE_SIZE to ClassInstanceCreation at 1", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS QualifiedName: Double.TYPE to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Double to SimpleType: Double at 0", "INS Modifier: static to Initializer at 0", "INS ExpressionStatement to Block at 7", "INS ExpressionStatement to Block at 8", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleType: Short to TypeLiteral at 0", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS SimpleType: Boolean to TypeLiteral at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: put to MethodInvocation at 1", "INS QualifiedName: Float.TYPE to MethodInvocation at 2", "INS SimpleName: Short to SimpleType: Short at 0", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS TypeLiteral to MethodInvocation at 3", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS ExpressionStatement to Block at 5", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleType: Integer to TypeLiteral at 0", "INS SimpleName: Long to SimpleType: Long at 0", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS QualifiedName: Byte.TYPE to MethodInvocation at 2", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Byte to TypeLiteral at 0", "INS SimpleType: Float to TypeLiteral at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleType: Long to TypeLiteral at 0", "INS SimpleName: put to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Double to TypeLiteral at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 3", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: Float to SimpleType: Float at 0", "INS ExpressionStatement to Block at 2", "INS TypeLiteral to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS QualifiedName: Short.TYPE to MethodInvocation at 2", "INS SimpleType: Character to TypeLiteral at 0", "INS SimpleName: PRIMITIVE_TYPES to Assignment: = at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS InfixExpression: == to ConditionalExpression at 0", "INS SimpleName: parm to ConditionalExpression at 1", "INS SimpleName: prim to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: primitiveClass to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: get to MethodInvocation at 1", "INS TagElement: @param to Javadoc at 1", "INS TextElement: </p> to TagElement at 6", "INS TextElement:  a may-be primitive type class to TagElement: @param at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: parm to MethodInvocation at 2", "INS ConditionalExpression to ReturnStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 1", "INS TextElement: Converts a primitive type to its corresponding class. to TagElement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS TextElement: If the argument type is primitive then we want to convert our to TagElement at 2", "INS ParameterizedType: Class<?> to VariableDeclarationStatement at 0", "INS TagElement to Javadoc at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS TextElement: primitive type signature to the corresponding Object type so to TagElement at 3", "INS SimpleName: parm to TagElement: @param at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: prim to InfixExpression: == at 0", "INS TextElement: <p> to TagElement at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS TextElement:  the equivalent object class  to TagElement: @return at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: PRIMITIVE_TYPES to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: parm to SingleVariableDeclaration at 1", "INS TextElement: introspection for methods with primitive types will work to TagElement at 4", "INS TextElement: correctly. to TagElement at 5", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS ParameterizedType: Class<?> to MethodDeclaration at 2", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: prim to ConditionalExpression at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 15", "INS SimpleType: Constructor to ParameterizedType: Constructor<?> at 0", "INS MethodInvocation to ConstructorInvocation at 0", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS ConstructorInvocation to Block at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: aCtor to MethodInvocation at 0", "INS SimpleName: aCtor to MethodInvocation at 0", "INS ParameterizedType: Constructor<?> to SingleVariableDeclaration at 0", "INS WildcardType: ? to ParameterizedType: Constructor<?> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ConstructorInvocation at 1", "INS SimpleName: Constructor to SimpleType: Constructor at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS Block to MethodDeclaration at 3", "INS TextElement: Creates a key from a constructor. to TagElement at 0", "INS TextElement:  the constructor to generate the key from. to TagElement: @param at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: MethodKey to MethodDeclaration at 1", "INS SimpleName: aCtor to SingleVariableDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: aCtor to TagElement: @param at 0"]}, {"root": "UPDATE from Gets the most specific method that is applicable to actual argument types. to Gets the most specific method that is applicable to actual argument types.<p>", "operations": ["UPD TextElement: Gets the most specific method that is applicable to actual argument types. from Gets the most specific method that is applicable to actual argument types. to Gets the most specific method that is applicable to actual argument types.<p>"]}, {"root": "INS TextElement: Attempts to find the most specific applicable method using the to TagElement at 1", "operations": ["INS TextElement: Attempts to find the most specific applicable method using the to TagElement at 1"]}, {"root": "INS TextElement: algorithm described in the JLS section 15.12.2 (with the exception that it can't to TagElement at 2", "operations": ["INS TextElement: algorithm described in the JLS section 15.12.2 (with the exception that it can't to TagElement at 2"]}, {"root": "INS TextElement: distinguish a primitive type argument from an object type argument, since in reflection to TagElement at 3", "operations": ["INS TextElement: distinguish a primitive type argument from an object type argument, since in reflection to TagElement at 3"]}, {"root": "INS TextElement: primitive type arguments are represented by their object counterparts, so for an argument of to TagElement at 4", "operations": ["INS TextElement: primitive type arguments are represented by their object counterparts, so for an argument of to TagElement at 4"]}, {"root": "INS TextElement: type (say) java.lang.Integer, it will not be able to decide between a method that takes int and a to TagElement at 5", "operations": ["INS TextElement: type (say) java.lang.Integer, it will not be able to decide between a method that takes int and a to TagElement at 5"]}, {"root": "INS TextElement: method that takes java.lang.Integer as a parameter. to TagElement at 6", "operations": ["INS TextElement: method that takes java.lang.Integer as a parameter. to TagElement at 6"]}, {"root": "INS TextElement: </p> to TagElement at 7", "operations": ["INS TextElement: </p> to TagElement at 7"]}, {"root": "INS TextElement: <p> to TagElement at 8", "operations": ["INS TextElement: <p> to TagElement at 8"]}, {"root": "INS TextElement: This turns out to be a relatively rare case where this is needed - however, functionality to TagElement at 9", "operations": ["INS TextElement: This turns out to be a relatively rare case where this is needed - however, functionality to TagElement at 9"]}, {"root": "INS TextElement: like this is needed. to TagElement at 10", "operations": ["INS TextElement: like this is needed. to TagElement at 10"]}, {"root": "INS TextElement: </p> to TagElement at 11", "operations": ["INS TextElement: </p> to TagElement at 11"]}, {"root": "DEL QualifiedName: ClassMap.MethodCache", "operations": ["DEL QualifiedName: ClassMap.MethodCache"]}]}}, {"MethodKey_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(2340) at 7", "Move ImportDeclaration(5) into CompilationUnit(2340) at 6", "Move ImportDeclaration(7) into CompilationUnit(2340) at 5", "Insert ImportDeclaration(9) into CompilationUnit(2340) at 4", "Insert ImportDeclaration(17) into CompilationUnit(2340) at 8", "Insert QualifiedName: java.util.HashMap(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: java.util.Map(16) into ImportDeclaration(17) at 0", "Insert FieldDeclaration(50) into TypeDeclaration: class(2339) at 4", "Insert FieldDeclaration(70) into TypeDeclaration: class(2339) at 5", "Insert Initializer(153) into TypeDeclaration: class(2339) at 6", "Insert MethodDeclaration(199) into TypeDeclaration: class(2339) at 7", "Insert MethodDeclaration(448) into TypeDeclaration: class(2339) at 15", "Insert Javadoc(42) into FieldDeclaration(50) at 0", "Insert Modifier: private(43) into FieldDeclaration(50) at 1", "Insert Modifier: static(44) into FieldDeclaration(50) at 2", "Insert Modifier: final(45) into FieldDeclaration(50) at 3", "Insert PrimitiveType: int(46) into FieldDeclaration(50) at 4", "Insert VariableDeclarationFragment(49) into FieldDeclaration(50) at 5", "Insert Javadoc(53) into FieldDeclaration(70) at 0", "Insert Modifier: private(54) into FieldDeclaration(70) at 1", "Insert Modifier: static(55) into FieldDeclaration(70) at 2", "Insert Modifier: final(56) into FieldDeclaration(70) at 3", "Insert ParameterizedType: Map<Class<?>,Class<?>>(67) into FieldDeclaration(70) at 4", "Insert VariableDeclarationFragment(69) into FieldDeclaration(70) at 5", "Insert Modifier: static(71) into Initializer(153) at 0", "Insert Block(152) into Initializer(153) at 1", "Insert Javadoc(167) into MethodDeclaration(199) at 0", "Insert Modifier: static(168) into MethodDeclaration(199) at 1", "Insert ParameterizedType: Class<?>(172) into MethodDeclaration(199) at 2", "Insert SimpleName: primitiveClass(173) into MethodDeclaration(199) at 3", "Insert SingleVariableDeclaration(179) into MethodDeclaration(199) at 4", "Insert Block(198) into MethodDeclaration(199) at 5", "Insert Javadoc(430) into MethodDeclaration(448) at 0", "Insert SimpleName: MethodKey(431) into MethodDeclaration(448) at 1", "Insert SingleVariableDeclaration(437) into MethodDeclaration(448) at 2", "Insert Block(447) into MethodDeclaration(448) at 3", "Insert TagElement(41) into Javadoc(42) at 0", "Insert SimpleName: PRIMITIVE_SIZE(47) into VariableDeclarationFragment(49) at 0", "Insert NumberLiteral: 13(48) into VariableDeclarationFragment(49) at 1", "Insert TagElement(52) into Javadoc(53) at 0", "Insert SimpleType: Map(58) into ParameterizedType: Map<Class<?>,Class<?>>(67) at 0", "Insert ParameterizedType: Class<?>(62) into ParameterizedType: Map<Class<?>,Class<?>>(67) at 1", "Insert ParameterizedType: Class<?>(66) into ParameterizedType: Map<Class<?>,Class<?>>(67) at 2", "Insert SimpleName: PRIMITIVE_TYPES(68) into VariableDeclarationFragment(69) at 0", "Insert ExpressionStatement(87) into Block(152) at 0", "Insert ExpressionStatement(95) into Block(152) at 1", "Insert ExpressionStatement(103) into Block(152) at 2", "Insert ExpressionStatement(111) into Block(152) at 3", "Insert ExpressionStatement(119) into Block(152) at 4", "Insert ExpressionStatement(127) into Block(152) at 5", "Insert ExpressionStatement(135) into Block(152) at 6", "Insert ExpressionStatement(143) into Block(152) at 7", "Insert ExpressionStatement(151) into Block(152) at 8", "Insert TagElement(161) into Javadoc(167) at 0", "Insert TagElement: @param(164) into Javadoc(167) at 1", "Insert TagElement: @return(166) into Javadoc(167) at 2", "Insert SimpleType: Class(170) into ParameterizedType: Class<?>(172) at 0", "Insert WildcardType: ?(171) into ParameterizedType: Class<?>(172) at 1", "Insert ParameterizedType: Class<?>(177) into SingleVariableDeclaration(179) at 0", "Insert SimpleName: parm(178) into SingleVariableDeclaration(179) at 1", "Insert VariableDeclarationStatement(190) into Block(198) at 0", "Insert ReturnStatement(197) into Block(198) at 1", "Insert TagElement(426) into Javadoc(430) at 0", "Insert TagElement: @param(429) into Javadoc(430) at 1", "Insert ParameterizedType: Constructor<?>(435) into SingleVariableDeclaration(437) at 0", "Insert SimpleName: aCtor(436) into SingleVariableDeclaration(437) at 1", "Insert ConstructorInvocation(446) into Block(447) at 0", "Insert TextElement: The initial size of the primitive conversion map. (40) into TagElement(41) at 0", "Insert TextElement: The primitive type to class conversion map. (51) into TagElement(52) at 0", "Insert SimpleName: Map(57) into SimpleType: Map(58) at 0", "Insert SimpleType: Class(60) into ParameterizedType: Class<?>(62) at 0", "Insert WildcardType: ?(61) into ParameterizedType: Class<?>(62) at 1", "Insert SimpleType: Class(64) into ParameterizedType: Class<?>(66) at 0", "Insert WildcardType: ?(65) into ParameterizedType: Class<?>(66) at 1", "Insert Assignment: =(86) into ExpressionStatement(87) at 0", "Insert MethodInvocation(94) into ExpressionStatement(95) at 0", "Insert MethodInvocation(102) into ExpressionStatement(103) at 0", "Insert MethodInvocation(110) into ExpressionStatement(111) at 0", "Insert MethodInvocation(118) into ExpressionStatement(119) at 0", "Insert MethodInvocation(126) into ExpressionStatement(127) at 0", "Insert MethodInvocation(134) into ExpressionStatement(135) at 0", "Insert MethodInvocation(142) into ExpressionStatement(143) at 0", "Insert MethodInvocation(150) into ExpressionStatement(151) at 0", "Insert TextElement: Converts a primitive type to its corresponding class.(154) into TagElement(161) at 0", "Insert TextElement: <p>(155) into TagElement(161) at 1", "Insert TextElement: If the argument type is primitive then we want to convert our(156) into TagElement(161) at 2", "Insert TextElement: primitive type signature to the corresponding Object type so(157) into TagElement(161) at 3", "Insert TextElement: introspection for methods with primitive types will work(158) into TagElement(161) at 4", "Insert TextElement: correctly.(159) into TagElement(161) at 5", "Insert TextElement: </p>(160) into TagElement(161) at 6", "Insert SimpleName: parm(162) into TagElement: @param(164) at 0", "Insert TextElement:  a may-be primitive type class(163) into TagElement: @param(164) at 1", "Insert TextElement:  the equivalent object class (165) into TagElement: @return(166) at 0", "Insert SimpleName: Class(169) into SimpleType: Class(170) at 0", "Insert SimpleType: Class(175) into ParameterizedType: Class<?>(177) at 0", "Insert WildcardType: ?(176) into ParameterizedType: Class<?>(177) at 1", "Insert ParameterizedType: Class<?>(183) into VariableDeclarationStatement(190) at 0", "Insert VariableDeclarationFragment(189) into VariableDeclarationStatement(190) at 1", "Insert ConditionalExpression(196) into ReturnStatement(197) at 0", "Insert TextElement: Creates a key from a constructor.(425) into TagElement(426) at 0", "Insert SimpleName: aCtor(427) into TagElement: @param(429) at 0", "Insert TextElement:  the constructor to generate the key from.(428) into TagElement: @param(429) at 1", "Insert SimpleType: Constructor(433) into ParameterizedType: Constructor<?>(435) at 0", "Insert WildcardType: ?(434) into ParameterizedType: Constructor<?>(435) at 1", "Insert MethodInvocation(442) into ConstructorInvocation(446) at 0", "Insert MethodInvocation(445) into ConstructorInvocation(446) at 1", "Insert SimpleName: Class(59) into SimpleType: Class(60) at 0", "Insert SimpleName: Class(63) into SimpleType: Class(64) at 0", "Insert SimpleName: PRIMITIVE_TYPES(72) into Assignment: =(86) at 0", "Insert ClassInstanceCreation(85) into Assignment: =(86) at 1", "Insert SimpleName: PRIMITIVE_TYPES(88) into MethodInvocation(94) at 0", "Insert SimpleName: put(89) into MethodInvocation(94) at 1", "Insert QualifiedName: Boolean.TYPE(90) into MethodInvocation(94) at 2", "Insert TypeLiteral(93) into MethodInvocation(94) at 3", "Insert SimpleName: PRIMITIVE_TYPES(96) into MethodInvocation(102) at 0", "Insert SimpleName: put(97) into MethodInvocation(102) at 1", "Insert QualifiedName: Byte.TYPE(98) into MethodInvocation(102) at 2", "Insert TypeLiteral(101) into MethodInvocation(102) at 3", "Insert SimpleName: PRIMITIVE_TYPES(104) into MethodInvocation(110) at 0", "Insert SimpleName: put(105) into MethodInvocation(110) at 1", "Insert QualifiedName: Character.TYPE(106) into MethodInvocation(110) at 2", "Insert TypeLiteral(109) into MethodInvocation(110) at 3", "Insert SimpleName: PRIMITIVE_TYPES(112) into MethodInvocation(118) at 0", "Insert SimpleName: put(113) into MethodInvocation(118) at 1", "Insert QualifiedName: Double.TYPE(114) into MethodInvocation(118) at 2", "Insert TypeLiteral(117) into MethodInvocation(118) at 3", "Insert SimpleName: PRIMITIVE_TYPES(120) into MethodInvocation(126) at 0", "Insert SimpleName: put(121) into MethodInvocation(126) at 1", "Insert QualifiedName: Float.TYPE(122) into MethodInvocation(126) at 2", "Insert TypeLiteral(125) into MethodInvocation(126) at 3", "Insert SimpleName: PRIMITIVE_TYPES(128) into MethodInvocation(134) at 0", "Insert SimpleName: put(129) into MethodInvocation(134) at 1", "Insert QualifiedName: Integer.TYPE(130) into MethodInvocation(134) at 2", "Insert TypeLiteral(133) into MethodInvocation(134) at 3", "Insert SimpleName: PRIMITIVE_TYPES(136) into MethodInvocation(142) at 0", "Insert SimpleName: put(137) into MethodInvocation(142) at 1", "Insert QualifiedName: Long.TYPE(138) into MethodInvocation(142) at 2", "Insert TypeLiteral(141) into MethodInvocation(142) at 3", "Insert SimpleName: PRIMITIVE_TYPES(144) into MethodInvocation(150) at 0", "Insert SimpleName: put(145) into MethodInvocation(150) at 1", "Insert QualifiedName: Short.TYPE(146) into MethodInvocation(150) at 2", "Insert TypeLiteral(149) into MethodInvocation(150) at 3", "Insert SimpleName: Class(174) into SimpleType: Class(175) at 0", "Insert SimpleType: Class(181) into ParameterizedType: Class<?>(183) at 0", "Insert WildcardType: ?(182) into ParameterizedType: Class<?>(183) at 1", "Insert SimpleName: prim(184) into VariableDeclarationFragment(189) at 0", "Insert MethodInvocation(188) into VariableDeclarationFragment(189) at 1", "Insert InfixExpression: ==(193) into ConditionalExpression(196) at 0", "Insert SimpleName: parm(194) into ConditionalExpression(196) at 1", "Insert SimpleName: prim(195) into ConditionalExpression(196) at 2", "Insert SimpleName: Constructor(432) into SimpleType: Constructor(433) at 0", "Insert MethodInvocation(440) into MethodInvocation(442) at 0", "Insert SimpleName: getName(441) into MethodInvocation(442) at 1", "Insert SimpleName: aCtor(443) into MethodInvocation(445) at 0", "Insert SimpleName: getParameterTypes(444) into MethodInvocation(445) at 1", "Update TextElement: Gets the most specific method that is applicable to actual argument types.(1259) to Gets the most specific method that is applicable to actual argument types.<p>", "Insert TextElement: Attempts to find the most specific applicable method using the(1447) into TagElement(1458) at 1", "Insert TextElement: algorithm described in the JLS section 15.12.2 (with the exception that it can't(1448) into TagElement(1458) at 2", "Insert TextElement: distinguish a primitive type argument from an object type argument, since in reflection(1449) into TagElement(1458) at 3", "Insert TextElement: primitive type arguments are represented by their object counterparts, so for an argument of(1450) into TagElement(1458) at 4", "Insert TextElement: type (say) java.lang.Integer, it will not be able to decide between a method that takes int and a(1451) into TagElement(1458) at 5", "Insert TextElement: method that takes java.lang.Integer as a parameter.(1452) into TagElement(1458) at 6", "Insert TextElement: </p>(1453) into TagElement(1458) at 7", "Insert TextElement: <p>(1454) into TagElement(1458) at 8", "Insert TextElement: This turns out to be a relatively rare case where this is needed - however, functionality(1455) into TagElement(1458) at 9", "Insert TextElement: like this is needed.(1456) into TagElement(1458) at 10", "Insert TextElement: </p>(1457) into TagElement(1458) at 11", "Insert ParameterizedType: HashMap<Class<?>,Class<?>>(83) into ClassInstanceCreation(85) at 0", "Insert SimpleName: PRIMITIVE_SIZE(84) into ClassInstanceCreation(85) at 1", "Insert SimpleType: Boolean(92) into TypeLiteral(93) at 0", "Insert SimpleType: Byte(100) into TypeLiteral(101) at 0", "Insert SimpleType: Character(108) into TypeLiteral(109) at 0", "Insert SimpleType: Double(116) into TypeLiteral(117) at 0", "Insert SimpleType: Float(124) into TypeLiteral(125) at 0", "Insert SimpleType: Integer(132) into TypeLiteral(133) at 0", "Insert SimpleType: Long(140) into TypeLiteral(141) at 0", "Insert SimpleType: Short(148) into TypeLiteral(149) at 0", "Insert SimpleName: Class(180) into SimpleType: Class(181) at 0", "Insert SimpleName: PRIMITIVE_TYPES(185) into MethodInvocation(188) at 0", "Insert SimpleName: get(186) into MethodInvocation(188) at 1", "Insert SimpleName: parm(187) into MethodInvocation(188) at 2", "Insert SimpleName: prim(191) into InfixExpression: ==(193) at 0", "Insert NullLiteral(192) into InfixExpression: ==(193) at 1", "Insert SimpleName: aCtor(438) into MethodInvocation(440) at 0", "Insert SimpleName: getDeclaringClass(439) into MethodInvocation(440) at 1", "Insert SimpleType: HashMap(74) into ParameterizedType: HashMap<Class<?>,Class<?>>(83) at 0", "Insert ParameterizedType: Class<?>(78) into ParameterizedType: HashMap<Class<?>,Class<?>>(83) at 1", "Insert ParameterizedType: Class<?>(82) into ParameterizedType: HashMap<Class<?>,Class<?>>(83) at 2", "Insert SimpleName: Boolean(91) into SimpleType: Boolean(92) at 0", "Insert SimpleName: Byte(99) into SimpleType: Byte(100) at 0", "Insert SimpleName: Character(107) into SimpleType: Character(108) at 0", "Insert SimpleName: Double(115) into SimpleType: Double(116) at 0", "Insert SimpleName: Float(123) into SimpleType: Float(124) at 0", "Insert SimpleName: Integer(131) into SimpleType: Integer(132) at 0", "Insert SimpleName: Long(139) into SimpleType: Long(140) at 0", "Insert SimpleName: Short(147) into SimpleType: Short(148) at 0", "Insert SimpleName: HashMap(73) into SimpleType: HashMap(74) at 0", "Insert SimpleType: Class(76) into ParameterizedType: Class<?>(78) at 0", "Insert WildcardType: ?(77) into ParameterizedType: Class<?>(78) at 1", "Insert SimpleType: Class(80) into ParameterizedType: Class<?>(82) at 0", "Insert WildcardType: ?(81) into ParameterizedType: Class<?>(82) at 1", "Insert SimpleName: Class(75) into SimpleType: Class(76) at 0", "Insert SimpleName: Class(79) into SimpleType: Class(80) at 0", "Delete QualifiedName: ClassMap.MethodCache(344)"]}}, {"MethodMap_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl3.internal.introspection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: MethodKey.AmbiguousException", "DEL VariableDeclarationStatement", "DEL TagElement: @throws", "DEL SimpleName: get", "DEL Modifier: synchronized", "DEL SimpleName: method", "DEL SimpleName: methodByNameMap", "DEL ParameterizedType: java.util.Set<String>", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL NullLiteral", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: method", "DEL TextElement: Keep track of all methods with the same name.", "DEL TagElement", "DEL SimpleType: HashMap", "DEL SimpleType: Method", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL Javadoc", "DEL ExpressionStatement", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: method", "DEL TextElement: <p>", "DEL SingleVariableDeclaration", "DEL ParameterizedType: List<Method>", "DEL Javadoc", "DEL TextElement:  name of method", "DEL TextElement: most specific applicable method using the", "DEL TagElement", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL TextElement: their object counterparts, so for an argument of", "DEL Modifier: final", "DEL MethodDeclaration", "DEL TextElement: algorithm described in the JLS section", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL ParameterizedType: HashMap<String,List<Method>>", "DEL SimpleName: methodName", "DEL Dimension", "DEL SimpleName: String", "DEL ArrayCreation", "DEL TagElement: @since", "DEL VariableDeclarationFragment", "DEL TextElement: like this is needed.", "DEL ReturnStatement", "DEL SimpleName: methodList", "DEL SimpleName: Method", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL TextElement: method is applicable.", "DEL SimpleName: String", "DEL SimpleName: String", "DEL TextElement:  the most specific applicable method, or null if no", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL SimpleName: ArrayList", "DEL SimpleName: MethodMap", "DEL SimpleType: Method", "DEL InfixExpression: ==", "DEL TextElement: </p>", "DEL SimpleType: ArrayList", "DEL TextElement: where this is needed - however, functionality", "DEL Dimension", "DEL ClassInstanceCreation", "DEL SimpleName: methodList", "DEL SimpleName: methodByNameMap", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: method", "DEL SimpleType: Method", "DEL SimpleType: String", "DEL TextElement: </p>", "DEL SimpleName: String", "DEL SimpleName: args", "DEL SimpleName: find", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: set", "DEL QualifiedName: java.util.Set", "DEL SimpleType: Method", "DEL SimpleName: List", "DEL MethodInvocation", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL Block", "DEL SimpleName: Method", "DEL TextElement: Return a list of methods with the same name.", "DEL IfStatement", "DEL SimpleName: l", "DEL Javadoc", "DEL SimpleType: Method", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: get", "DEL MethodInvocation", "DEL TextElement: Add a method to a list of methods by name. For a particular class we are", "DEL TagElement: @throws", "DEL SimpleName: methodName", "DEL TextElement:  the key", "DEL SimpleType: MethodKey", "DEL SimpleName: List", "DEL Assignment: =", "DEL TextElement:  the method.", "DEL ClassInstanceCreation", "DEL TextElement:        the actual arguments with which the method is called", "DEL SimpleName: String", "DEL SimpleName: Method", "DEL TagElement: @param", "DEL SimpleName: put", "DEL SimpleName: keySet", "DEL ParameterizedType: List<Method>", "DEL SimpleName: get", "DEL SimpleName: methodByNameMap", "DEL SimpleName: methodKey", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL SimpleName: key", "DEL SimpleName: set", "DEL TextElement:  the method", "DEL SimpleType: MethodKey", "DEL Modifier: private", "DEL SimpleType: Method", "DEL SimpleName: get", "DEL TextElement: <p>", "DEL SimpleType: Method", "DEL TextElement: 15.12.2 (with the exception that it can't", "DEL TextElement:  1.0", "DEL TextElement: specific applicable method", "DEL MethodInvocation", "DEL TextElement: A map of method names to methods.", "DEL SimpleName: methodByNameMap", "DEL TextElement: keeping track of all the methods with the same name.", "DEL SimpleName: methodName", "DEL ExpressionStatement", "DEL SimpleName: find", "DEL ParameterizedType: Map<String,List<Method>>", "DEL SimpleName: key", "DEL SimpleName: Method", "DEL SimpleName: Method", "DEL TagElement: @return", "DEL SimpleName: args", "DEL TextElement: Finds a method by key.", "DEL SimpleName: find", "DEL ArrayType: String[]", "DEL Modifier: synchronized", "DEL SimpleType: MethodKey.AmbiguousException", "DEL TextElement: distinguish a primitive type argument from", "DEL Modifier: public", "DEL SimpleName: names", "DEL SingleVariableDeclaration", "DEL ParameterizedType: ArrayList<Method>", "DEL SimpleName: methodByNameMap", "DEL TagElement: @param", "DEL SimpleName: List", "DEL SimpleName: args", "DEL SimpleType: String", "DEL TextElement: type (say) java.lang.Integer, it will not be able", "DEL NullLiteral", "DEL Block", "DEL SimpleName: methodKey", "DEL SimpleName: Method", "DEL SimpleType: java.util.Set", "DEL SimpleName: List", "DEL ArrayType: String[]", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL TagElement: @return", "DEL SimpleName: String", "DEL TextElement: Find a method.  Attempts to find the", "DEL Block", "DEL SimpleName: HashMap", "DEL SimpleName: add", "DEL SimpleName: MethodKey", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: Map", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL Dimension", "DEL SimpleName: Method", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL TextElement:  if find is ambiguous", "DEL Modifier: synchronized", "DEL TagElement: @param", "DEL SimpleName: getMostSpecificMethod", "DEL SimpleName: Method", "DEL SimpleName: methodName", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Modifier: public", "DEL ReturnStatement", "DEL TextElement: an object type argument, since in reflection", "DEL SimpleType: Method", "DEL TextElement:  if there is more than one maximally", "DEL Javadoc", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: String", "DEL Modifier: public", "DEL TagElement: @return", "DEL TextElement: This turns out to be a relatively rare case", "DEL SimpleName: Method", "DEL SimpleName: l", "DEL SimpleType: Object", "DEL NullLiteral", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: l", "DEL TextElement: method that takes java.lang.Integer as a parameter.", "DEL TextElement:  the name.", "DEL SimpleType: String", "DEL SimpleType: Map", "DEL TagElement: @param", "DEL MethodInvocation", "DEL ParameterizedType: List<Method>", "DEL SimpleName: add", "DEL SimpleName: key", "DEL SimpleType: String", "DEL SimpleName: getName", "DEL PrimitiveType: void", "DEL SimpleName: methodName", "DEL TagElement", "DEL SimpleType: List", "DEL SimpleType: List", "DEL ParameterizedType: List<Method>", "DEL SimpleName: Object", "DEL Block", "DEL ArrayType: Object[]", "DEL SimpleName: l", "DEL SimpleName: l", "DEL MethodInvocation", "DEL SimpleName: toArray", "DEL SimpleName: getMethod", "DEL SimpleName: methodName", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL ExpressionStatement", "DEL TextElement:  the array of names", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: Returns the array of method names accessible in this class.", "DEL SimpleName: methodKey", "DEL TextElement: primitive type arguments are represented by", "DEL ParameterizedType: List<Method>", "DEL SimpleName: methodKey", "DEL TagElement", "DEL Block", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: List", "DEL SimpleName: set", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL TextElement: to decide between a method that takes int and a", "DEL SimpleName: MethodKey", "DEL SimpleName: methodList", "DEL Modifier: final", "DEL SimpleType: Method", "DEL SimpleType: List", "DEL Javadoc", "DEL TextElement:  List list of methods."]}]}}, {"MethodMap_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl3.internal.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Method(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.ArrayList(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.HashMap(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.List(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Map(10)", "Delete ImportDeclaration(11)", "Delete TextElement: A map of method names to methods.(12)", "Delete TagElement(13)", "Delete TextElement:  1.0(14)", "Delete TagElement: @since(15)", "Delete Javadoc(16)", "Delete Modifier: final(17)", "Delete SimpleName: MethodMap(18)", "Delete TextElement: Keep track of all methods with the same name.(19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete Modifier: private(22)", "Delete Modifier: final(23)", "Delete SimpleName: Map(24)", "Delete SimpleType: Map(25)", "Delete SimpleName: String(26)", "Delete SimpleType: String(27)", "Delete SimpleName: List(28)", "Delete SimpleType: List(29)", "Delete SimpleName: Method(30)", "Delete SimpleType: Method(31)", "Delete ParameterizedType: List<Method>(32)", "Delete ParameterizedType: Map<String,List<Method>>(33)", "Delete SimpleName: methodByNameMap(34)", "Delete SimpleName: HashMap(35)", "Delete SimpleType: HashMap(36)", "Delete SimpleName: String(37)", "Delete SimpleType: String(38)", "Delete SimpleName: List(39)", "Delete SimpleType: List(40)", "Delete SimpleName: Method(41)", "Delete SimpleType: Method(42)", "Delete ParameterizedType: List<Method>(43)", "Delete ParameterizedType: HashMap<String,List<Method>>(44)", "Delete ClassInstanceCreation(45)", "Delete VariableDeclarationFragment(46)", "Delete FieldDeclaration(47)", "Delete TextElement: Add a method to a list of methods by name. For a particular class we are(48)", "Delete TextElement: keeping track of all the methods with the same name.(49)", "Delete TagElement(50)", "Delete SimpleName: method(51)", "Delete TextElement:  the method.(52)", "Delete TagElement: @param(53)", "Delete Javadoc(54)", "Delete Modifier: public(55)", "Delete Modifier: synchronized(56)", "Delete PrimitiveType: void(57)", "Delete SimpleName: add(58)", "Delete SimpleName: Method(59)", "Delete SimpleType: Method(60)", "Delete SimpleName: method(61)", "Delete SingleVariableDeclaration(62)", "Delete SimpleName: String(63)", "Delete SimpleType: String(64)", "Delete SimpleName: methodName(65)", "Delete SimpleName: method(66)", "Delete SimpleName: getName(67)", "Delete MethodInvocation(68)", "Delete VariableDeclarationFragment(69)", "Delete VariableDeclarationStatement(70)", "Delete SimpleName: List(71)", "Delete SimpleType: List(72)", "Delete SimpleName: Method(73)", "Delete SimpleType: Method(74)", "Delete ParameterizedType: List<Method>(75)", "Delete SimpleName: l(76)", "Delete SimpleName: methodByNameMap(77)", "Delete SimpleName: get(78)", "Delete SimpleName: methodName(79)", "Delete MethodInvocation(80)", "Delete VariableDeclarationFragment(81)", "Delete VariableDeclarationStatement(82)", "Delete SimpleName: l(83)", "Delete NullLiteral(84)", "Delete InfixExpression: ==(85)", "Delete SimpleName: l(86)", "Delete SimpleName: ArrayList(87)", "Delete SimpleType: ArrayList(88)", "Delete SimpleName: Method(89)", "Delete SimpleType: Method(90)", "Delete ParameterizedType: ArrayList<Method>(91)", "Delete ClassInstanceCreation(92)", "Delete Assignment: =(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: methodByNameMap(95)", "Delete SimpleName: put(96)", "Delete SimpleName: methodName(97)", "Delete SimpleName: l(98)", "Delete MethodInvocation(99)", "Delete ExpressionStatement(100)", "Delete Block(101)", "Delete IfStatement(102)", "Delete SimpleName: l(103)", "Delete SimpleName: add(104)", "Delete SimpleName: method(105)", "Delete MethodInvocation(106)", "Delete ExpressionStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete TextElement: Return a list of methods with the same name.(110)", "Delete TagElement(111)", "Delete SimpleName: key(112)", "Delete TextElement:  the name.(113)", "Delete TagElement: @param(114)", "Delete TextElement:  List list of methods.(115)", "Delete TagElement: @return(116)", "Delete Javadoc(117)", "Delete Modifier: public(118)", "Delete Modifier: synchronized(119)", "Delete SimpleName: List(120)", "Delete SimpleType: List(121)", "Delete SimpleName: Method(122)", "Delete SimpleType: Method(123)", "Delete ParameterizedType: List<Method>(124)", "Delete SimpleName: get(125)", "Delete SimpleName: String(126)", "Delete SimpleType: String(127)", "Delete SimpleName: key(128)", "Delete SingleVariableDeclaration(129)", "Delete SimpleName: methodByNameMap(130)", "Delete SimpleName: get(131)", "Delete SimpleName: key(132)", "Delete MethodInvocation(133)", "Delete ReturnStatement(134)", "Delete Block(135)", "Delete MethodDeclaration(136)", "Delete TextElement: Returns the array of method names accessible in this class.(137)", "Delete TagElement(138)", "Delete TextElement:  the array of names(139)", "Delete TagElement: @return(140)", "Delete Javadoc(141)", "Delete Modifier: public(142)", "Delete Modifier: synchronized(143)", "Delete SimpleName: String(144)", "Delete SimpleType: String(145)", "Delete Dimension(146)", "Delete ArrayType: String[](147)", "Delete SimpleName: names(148)", "Delete QualifiedName: java.util.Set(149)", "Delete SimpleType: java.util.Set(150)", "Delete SimpleName: String(151)", "Delete SimpleType: String(152)", "Delete ParameterizedType: java.util.Set<String>(153)", "Delete SimpleName: set(154)", "Delete SimpleName: methodByNameMap(155)", "Delete SimpleName: keySet(156)", "Delete MethodInvocation(157)", "Delete VariableDeclarationFragment(158)", "Delete VariableDeclarationStatement(159)", "Delete SimpleName: set(160)", "Delete SimpleName: toArray(161)", "Delete SimpleName: String(162)", "Delete SimpleType: String(163)", "Delete Dimension(164)", "Delete ArrayType: String[](165)", "Delete SimpleName: set(166)", "Delete SimpleName: size(167)", "Delete MethodInvocation(168)", "Delete ArrayCreation(169)", "Delete MethodInvocation(170)", "Delete ReturnStatement(171)", "Delete Block(172)", "Delete MethodDeclaration(173)", "Delete TextElement: <p>(174)", "Delete TextElement: Find a method.  Attempts to find the(175)", "Delete TextElement: most specific applicable method using the(176)", "Delete TextElement: algorithm described in the JLS section(177)", "Delete TextElement: 15.12.2 (with the exception that it can't(178)", "Delete TextElement: distinguish a primitive type argument from(179)", "Delete TextElement: an object type argument, since in reflection(180)", "Delete TextElement: primitive type arguments are represented by(181)", "Delete TextElement: their object counterparts, so for an argument of(182)", "Delete TextElement: type (say) java.lang.Integer, it will not be able(183)", "Delete TextElement: to decide between a method that takes int and a(184)", "Delete TextElement: method that takes java.lang.Integer as a parameter.(185)", "Delete TextElement: </p>(186)", "Delete TextElement: <p>(187)", "Delete TextElement: This turns out to be a relatively rare case(188)", "Delete TextElement: where this is needed - however, functionality(189)", "Delete TextElement: like this is needed.(190)", "Delete TextElement: </p>(191)", "Delete TagElement(192)", "Delete SimpleName: methodName(193)", "Delete TextElement:  name of method(194)", "Delete TagElement: @param(195)", "Delete SimpleName: args(196)", "Delete TextElement:        the actual arguments with which the method is called(197)", "Delete TagElement: @param(198)", "Delete TextElement:  the most specific applicable method, or null if no(199)", "Delete TextElement: method is applicable.(200)", "Delete TagElement: @return(201)", "Delete QualifiedName: MethodKey.AmbiguousException(202)", "Delete TextElement:  if there is more than one maximally(203)", "Delete TextElement: specific applicable method(204)", "Delete TagElement: @throws(205)", "Delete Javadoc(206)", "Delete Modifier: public(207)", "Delete SimpleName: Method(208)", "Delete SimpleType: Method(209)", "Delete SimpleName: find(210)", "Delete SimpleName: String(211)", "Delete SimpleType: String(212)", "Delete SimpleName: methodName(213)", "Delete SingleVariableDeclaration(214)", "Delete SimpleName: Object(215)", "Delete SimpleType: Object(216)", "Delete Dimension(217)", "Delete ArrayType: Object[](218)", "Delete SimpleName: args(219)", "Delete SingleVariableDeclaration(220)", "Delete QualifiedName: MethodKey.AmbiguousException(221)", "Delete SimpleType: MethodKey.AmbiguousException(222)", "Delete SimpleName: find(223)", "Delete SimpleName: MethodKey(224)", "Delete SimpleType: MethodKey(225)", "Delete SimpleName: methodName(226)", "Delete SimpleName: args(227)", "Delete ClassInstanceCreation(228)", "Delete MethodInvocation(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete MethodDeclaration(232)", "Delete TextElement: Finds a method by key.(233)", "Delete TagElement(234)", "Delete SimpleName: methodKey(235)", "Delete TextElement:  the key(236)", "Delete TagElement: @param(237)", "Delete TextElement:  the method(238)", "Delete TagElement: @return(239)", "Delete QualifiedName: MethodKey.AmbiguousException(240)", "Delete TextElement:  if find is ambiguous(241)", "Delete TagElement: @throws(242)", "Delete Javadoc(243)", "Delete SimpleName: Method(244)", "Delete SimpleType: Method(245)", "Delete SimpleName: find(246)", "Delete SimpleName: MethodKey(247)", "Delete SimpleType: MethodKey(248)", "Delete SimpleName: methodKey(249)", "Delete SingleVariableDeclaration(250)", "Delete QualifiedName: MethodKey.AmbiguousException(251)", "Delete SimpleType: MethodKey.AmbiguousException(252)", "Delete SimpleName: List(253)", "Delete SimpleType: List(254)", "Delete SimpleName: Method(255)", "Delete SimpleType: Method(256)", "Delete ParameterizedType: List<Method>(257)", "Delete SimpleName: methodList(258)", "Delete SimpleName: get(259)", "Delete SimpleName: methodKey(260)", "Delete SimpleName: getMethod(261)", "Delete MethodInvocation(262)", "Delete MethodInvocation(263)", "Delete VariableDeclarationFragment(264)", "Delete VariableDeclarationStatement(265)", "Delete SimpleName: methodList(266)", "Delete NullLiteral(267)", "Delete InfixExpression: ==(268)", "Delete NullLiteral(269)", "Delete ReturnStatement(270)", "Delete Block(271)", "Delete IfStatement(272)", "Delete SimpleName: methodKey(273)", "Delete SimpleName: getMostSpecificMethod(274)", "Delete SimpleName: methodList(275)", "Delete MethodInvocation(276)", "Delete ReturnStatement(277)", "Delete Block(278)", "Delete MethodDeclaration(279)", "Delete TypeDeclaration: class(280)"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "True"}]}