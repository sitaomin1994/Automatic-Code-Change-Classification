{"application": "apache-helix", "csha": "f1df105878c368e7ef93735a6c4c96532fb806df", "files": [{"TargetState_cluster": {"actions": [{"root": "UPDATE from Enumeration of target states for a task. to Enumeration of target states for a job.", "operations": ["UPD TextElement: Enumeration of target states for a task. from Enumeration of target states for a task. to Enumeration of target states for a job."]}, {"root": "UPDATE from Indicates that the rebalancer must start/resume the task. to Indicates that the rebalancer must start/resume the job.", "operations": ["UPD TextElement: Indicates that the rebalancer must start/resume the task. from Indicates that the rebalancer must start/resume the task. to Indicates that the rebalancer must start/resume the job."]}, {"root": "UPDATE from Indicates that the rebalancer should stop any running task partitions and cease doing any to Indicates that the rebalancer should stop any running tasks and cease doing any", "operations": ["UPD TextElement: Indicates that the rebalancer should stop any running task partitions and cease doing any from Indicates that the rebalancer should stop any running task partitions and cease doing any to Indicates that the rebalancer should stop any running tasks and cease doing any"]}, {"root": "UPDATE from further task to further task assignments.", "operations": ["UPD TextElement: further task from further task to further task assignments."]}, {"root": "UPDATE from Indicates that the rebalancer must delete this task. to Indicates that the rebalancer must delete this job.", "operations": ["UPD TextElement: Indicates that the rebalancer must delete this task. from Indicates that the rebalancer must delete this task. to Indicates that the rebalancer must delete this job."]}, {"root": "DEL TextElement: assignments.", "operations": ["DEL TextElement: assignments."]}]}}, {"TargetState_diff": {"operations": ["Update TextElement: Enumeration of target states for a task.(2) to Enumeration of target states for a job.", "Update TextElement: Indicates that the rebalancer must start/resume the task.(7) to Indicates that the rebalancer must start/resume the job.", "Update TextElement: Indicates that the rebalancer should stop any running task partitions and cease doing any(12) to Indicates that the rebalancer should stop any running tasks and cease doing any", "Update TextElement: further task(13) to further task assignments.", "Update TextElement: Indicates that the rebalancer must delete this task.(19) to Indicates that the rebalancer must delete this job.", "Delete TextElement: assignments.(14)"]}}, {"Task_cluster": {"actions": [{"root": "UPDATE from  object indicating the status of the task and any additional context to  object indicating the status of the task and any additional", "operations": ["UPD TextElement:  object indicating the status of the task and any additional context from  object indicating the status of the task and any additional context to  object indicating the status of the task and any additional"]}, {"root": "INS TextElement: context to TagElement: @return at 3", "operations": ["INS TextElement: context to TagElement: @return at 3"]}]}}, {"Task_diff": {"operations": ["Update TextElement:  object indicating the status of the task and any additional context(12) to  object indicating the status of the task and any additional", "Insert TextElement: context(13) into TagElement: @return(19) at 3"]}}, {"TaskConfig_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7"]}, {"root": "UPDATE from java.util.Arrays to java.io.IOException", "operations": ["UPD QualifiedName: java.util.Arrays from java.util.Arrays to java.io.IOException"]}, {"root": "UPDATE from java.util.List to java.util.UUID", "operations": ["UPD QualifiedName: java.util.List from java.util.List to java.util.UUID"]}, {"root": "UPDATE from java.util.Set to org.apache.helix.task.beans.TaskBean", "operations": ["UPD QualifiedName: java.util.Set from java.util.Set to org.apache.helix.task.beans.TaskBean"]}, {"root": "UPDATE from com.google.common.base.Joiner to org.apache.log4j.Logger", "operations": ["UPD QualifiedName: com.google.common.base.Joiner from com.google.common.base.Joiner to org.apache.log4j.Logger"]}, {"root": "UPDATE from com.google.common.collect.ImmutableList to org.codehaus.jackson.map.ObjectMapper", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableList from com.google.common.collect.ImmutableList to org.codehaus.jackson.map.ObjectMapper"]}, {"root": "UPDATE from com.google.common.collect.ImmutableSet to com.google.common.collect.Maps", "operations": ["UPD QualifiedName: com.google.common.collect.ImmutableSet from com.google.common.collect.ImmutableSet to com.google.common.collect.Maps"]}, {"root": "INS EnumDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleName: TASK_ID to EnumConstantDeclaration at 0", "INS EnumConstantDeclaration to EnumDeclaration at 3", "INS Modifier: private to EnumDeclaration at 0", "INS SimpleName: TaskConfigFields to EnumDeclaration at 1", "INS SimpleName: TASK_COMMAND to EnumConstantDeclaration at 0", "INS EnumDeclaration to TypeDeclaration: class at 3", "INS EnumConstantDeclaration to EnumDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleType: Map to ParameterizedType: Map<String,String> at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 2", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleType: String to ParameterizedType: Map<String,String> at 1", "INS ParameterizedType: Map<String,String> to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: command to TagElement: @param at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ParameterizedType: Map<String,String> to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS SimpleName: configMap to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: configMap to InfixExpression: == at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: _configMap to Assignment: = at 0", "INS Block to MethodDeclaration at 6", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @param to Javadoc at 3", "INS SimpleName: configMap to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: configMap to Assignment: = at 1", "INS SimpleName: id to TagElement: @param at 0", "INS Block to IfStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS Block to MethodDeclaration at 5", "INS ConstructorInvocation to Block at 0", "INS SimpleName: TaskConfig to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: command to ConstructorInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: configMap to ConstructorInvocation at 1", "INS TextElement:  the command to invoke for the task to TagElement: @param at 1", "INS SimpleName: configMap to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TagElement: @param to Javadoc at 2", "INS NullLiteral to ConstructorInvocation at 2", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV MethodDeclaration to TypeDeclaration: class at 10", "MOV MethodDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SuperMethodInvocation to ReturnStatement at 0", "INS Block to CatchClause at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS CatchClause to TryStatement at 1", "INS ReturnStatement to Block at 2", "INS SimpleName: mapper to VariableDeclarationFragment at 0", "INS TryStatement to Block at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ReturnStatement to Block at 0", "INS ThisExpression to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleType: ObjectMapper to VariableDeclarationStatement at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: ObjectMapper to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: toString to SuperMethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS Modifier: static to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  plain bean describing the task to TagElement: @param at 1", "INS TagElement to Javadoc at 0", "INS TextElement:  instantiated TaskConfig to TagElement: @return at 0", "INS TextElement: Instantiate a typed configuration from a bean to TagElement at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: bean to TagElement: @param at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS TagElement: @return to Javadoc at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 14", "INS TagElement: @return to Javadoc at 2", "INS TagElement to Javadoc at 0", "INS TextElement: Instantiate a typed configuration from a raw string map to TagElement at 0", "INS TextElement:  instantiated TaskConfig to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  mixed map of configuration and task metadata to TagElement: @param at 1", "INS SimpleName: rawConfigMap to TagElement: @param at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private", "UPD Modifier: public from public to private"]}, {"root": "UPDATE from String to Logger", "operations": ["UPD SimpleName: String from String to Logger", "UPD SimpleType: String from String to Logger"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Modifier: public to FieldDeclaration at 0", "MOV Modifier: final to FieldDeclaration at 1"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleName: TaskConfig to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @return to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Unique identifier for this task to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  UUID as a string to TagElement: @return at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "UPDATE from build to getId", "operations": ["UPD SimpleName: build from build to getId"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "INS SimpleName: getCommand to MethodDeclaration at 3", "operations": ["INS SimpleName: getCommand to MethodDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @return to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Get the configuration map for this task's command to TagElement at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  map of configuration key to value to TagElement: @return at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Map<String,String> to MethodDeclaration at 2"]}, {"root": "INS SimpleName: getConfigMap to MethodDeclaration at 3", "operations": ["INS SimpleName: getConfigMap to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV SimpleName: setCommandConfig to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: Builder to MethodDeclaration at 3"]}, {"root": "UPDATE from Builder to TaskConfig", "operations": ["UPD SimpleName: Builder from Builder to TaskConfig", "UPD SimpleName: Builder from Builder to TaskConfig", "UPD SimpleType: Builder from Builder to TaskConfig", "UPD SimpleType: Builder from Builder to TaskConfig"]}, {"root": "UPDATE from setMaxAttemptsPerPartition to from", "operations": ["UPD SimpleName: setMaxAttemptsPerPartition from setMaxAttemptsPerPartition to from", "UPD SimpleName: setCommandConfig from setCommandConfig to from"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from public to static", "operations": ["UPD Modifier: public from public to static"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Builder to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 2", "MOV SimpleName: setMaxAttemptsPerPartition to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "UPDATE from Provides a typed interface to task configurations. to Configuration for an individual task to be run as part of a job.", "operations": ["UPD TextElement: Provides a typed interface to task configurations. from Provides a typed interface to task configurations. to Configuration for an individual task to be run as part of a job."]}, {"root": "INS SimpleName: LOG to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: LOG to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: getLogger to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0", "INS SimpleType: TaskConfig to TypeLiteral at 0", "INS SimpleName: Logger to MethodInvocation at 0"]}, {"root": "UPDATE from COMMAND to _configMap", "operations": ["UPD SimpleName: COMMAND from COMMAND to _configMap", "UPD SimpleName: Integer from Integer to _configMap"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement to Javadoc at 0"]}, {"root": "INS SimpleType: String to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from targetPartitionStates to command", "operations": ["UPD SimpleName: targetPartitionStates from targetPartitionStates to command", "UPD SimpleName: TaskConfig from TaskConfig to command"]}, {"root": "UPDATE from _targetPartitions to id", "operations": ["UPD SimpleName: _targetPartitions from _targetPartitions to id", "UPD SimpleName: workflow from workflow to id"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV IfStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from cfg to configMap", "operations": ["UPD SimpleName: cfg from cfg to configMap", "UPD SimpleName: cfgMap from cfgMap to configMap", "UPD SimpleName: cfgMap from cfgMap to configMap"]}, {"root": "UPDATE from @param to ", "operations": ["UPD TagElement: @param from @param to "]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: _configMap to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "UPDATE from String to TaskBean", "operations": ["UPD SimpleType: String from String to TaskBean", "UPD SimpleName: String from String to TaskBean"]}, {"root": "UPDATE from v to bean", "operations": ["UPD SimpleName: v from v to bean"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Map<String,String> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from v to rawConfigMap", "operations": ["UPD SimpleName: v from v to rawConfigMap"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: TaskConfigFields.TASK_ID to MethodInvocation at 0", "INS SimpleName: taskId to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: rawConfigMap to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: TaskConfigFields.TASK_COMMAND to MethodInvocation at 0", "INS SimpleName: command to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rawConfigMap to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ClassInstanceCreation to ReturnStatement at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: rawConfigMap to ClassInstanceCreation at 2", "INS SimpleName: taskId to ClassInstanceCreation at 3", "INS SimpleName: command to ClassInstanceCreation at 1"]}, {"root": "UPDATE from HashMap to Map", "operations": ["UPD SimpleName: HashMap from HashMap to Map", "UPD SimpleName: String from String to Map", "UPD SimpleType: HashMap from HashMap to Map"]}, {"root": "MOVE from SimpleType: Map", "operations": ["MOV SimpleName: String to SimpleType: Map at 0"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from The command configuration to be used by the task partitions.  to Instantiate the task config", "operations": ["UPD TextElement: The command configuration to be used by the task partitions.  from The command configuration to be used by the task partitions.  to Instantiate the task config", "UPD TextElement: A builder for  from A builder for  to Instantiate the task config"]}, {"root": "UPDATE from The timeout for a task partitions.  to  the command to invoke for the task", "operations": ["UPD TextElement: The timeout for a task partitions.  from The timeout for a task partitions.  to  the command to invoke for the task"]}, {"root": "MOVE from TagElement: @param", "operations": ["MOV TextElement: The timeout for a task partitions.  to TagElement: @param at 1"]}, {"root": "UPDATE from . Validates the configurations. to  configuration to be passed as part of the invocation", "operations": ["UPD TextElement: . Validates the configurations. from . Validates the configurations. to  configuration to be passed as part of the invocation", "UPD TextElement: The maximum number of times the task rebalancer may attempt to execute a task partitions.  from The maximum number of times the task rebalancer may attempt to execute a task partitions.  to  configuration to be passed as part of the invocation"]}, {"root": "MOVE from TagElement: @param", "operations": ["MOV TextElement: The maximum number of times the task rebalancer may attempt to execute a task partitions.  to TagElement: @param at 1"]}, {"root": "UPDATE from The number of concurrent tasks that are allowed to run on an instance.  to  existing task ID", "operations": ["UPD TextElement: The number of concurrent tasks that are allowed to run on an instance.  from The number of concurrent tasks that are allowed to run on an instance.  to  existing task ID"]}, {"root": "MOVE from TagElement: @param", "operations": ["MOV TextElement: The number of concurrent tasks that are allowed to run on an instance.  to TagElement: @param at 1"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from ParameterizedType: Map<String,String>", "operations": ["MOV SimpleType: HashMap to ParameterizedType: Map<String,String> at 0", "MOV SimpleType: String to ParameterizedType: Map<String,String> at 2", "MOV SimpleType: String to ParameterizedType: Map<String,String> at 1"]}, {"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to =="]}, {"root": "MOVE from TagElement: @param", "operations": ["MOV TextElement: . Validates the configurations. to TagElement: @param at 1", "MOV TextElement: A builder for  to TagElement at 0"]}, {"root": "MOVE from TagElement: @param", "operations": ["MOV SimpleName: TaskConfig to TagElement: @param at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: _configMap to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS QualifiedName: TaskConfigFields.TASK_ID to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from  A map of property names to their string representations. to Get the command to invoke for this task", "operations": ["UPD TextElement:  A map of property names to their string representations. from  A map of property names to their string representations. to Get the command to invoke for this task"]}, {"root": "UPDATE from  A  to  string command", "operations": ["UPD TextElement:  A  from  A  to  string command"]}, {"root": "INS ClassInstanceCreation to ReturnStatement at 0", "operations": ["INS QualifiedName: bean.taskConfigMap to ClassInstanceCreation at 2", "INS ClassInstanceCreation to ReturnStatement at 0", "INS QualifiedName: bean.command to ClassInstanceCreation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1"]}, {"root": "INS SimpleName: command to MethodInvocation at 3", "operations": ["INS SimpleName: command to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: toString to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: id to MethodInvocation at 3", "operations": ["INS SimpleName: id to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: parseInt to MethodInvocation at 1", "MOV SimpleName: Integer to MethodInvocation at 0"]}, {"root": "UPDATE from parseInt to get", "operations": ["UPD SimpleName: parseInt from parseInt to get", "UPD SimpleName: format from format to get", "UPD SimpleName: format from format to get"]}, {"root": "UPDATE from Integer to ObjectMapper", "operations": ["UPD SimpleName: Integer from Integer to ObjectMapper", "UPD SimpleName: Builder from Builder to ObjectMapper"]}, {"root": "MOVE from SimpleType: ObjectMapper", "operations": ["MOV SimpleName: Builder to SimpleType: ObjectMapper at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: TaskConfig to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: TaskConfig to ClassInstanceCreation at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: configMap to Assignment: = at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: id to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from TaskConfig.TIMEOUT_PER_PARTITION to TaskConfigFields.TASK_COMMAND", "operations": ["UPD QualifiedName: TaskConfig.TIMEOUT_PER_PARTITION from TaskConfig.TIMEOUT_PER_PARTITION to TaskConfigFields.TASK_COMMAND"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: TaskConfig.TIMEOUT_PER_PARTITION to MethodInvocation at 0"]}, {"root": "UPDATE from TaskConfig.MAX_ATTEMPTS_PER_PARTITION to TaskConfigFields.TASK_ID", "operations": ["UPD QualifiedName: TaskConfig.MAX_ATTEMPTS_PER_PARTITION from TaskConfig.MAX_ATTEMPTS_PER_PARTITION to TaskConfigFields.TASK_ID"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: TaskConfig.MAX_ATTEMPTS_PER_PARTITION to MethodInvocation at 0"]}, {"root": "INS QualifiedName: TaskConfigFields.TASK_COMMAND to MethodInvocation at 0", "operations": ["INS QualifiedName: TaskConfigFields.TASK_COMMAND to MethodInvocation at 0"]}, {"root": "UPDATE from String to toString", "operations": ["UPD SimpleName: String from String to toString", "UPD SimpleName: cfg from cfg to toString", "UPD SimpleName: join from join to toString", "UPD SimpleName: String from String to toString"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: format to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: format to MethodInvocation at 1"]}, {"root": "MOVE from SimpleType: ObjectMapper", "operations": ["MOV SimpleName: Integer to SimpleType: ObjectMapper at 0"]}, {"root": "UPDATE from ImmutableList to mapper", "operations": ["UPD SimpleName: ImmutableList from ImmutableList to mapper"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 0", "MOV SimpleName: copyOf to MethodInvocation at 1"]}, {"root": "UPDATE from copyOf to writeValueAsString", "operations": ["UPD SimpleName: copyOf from copyOf to writeValueAsString"]}, {"root": "UPDATE from Set to IOException", "operations": ["UPD SimpleName: Set from Set to IOException"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: Set to SimpleType: IOException at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"Could not serialize TaskConfig\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: String to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: String to MethodInvocation at 1"]}, {"root": "UPDATE from Joiner to Maps", "operations": ["UPD SimpleName: Joiner from Joiner to Maps"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: on to MethodInvocation at 1", "MOV SimpleName: Joiner to MethodInvocation at 0"]}, {"root": "UPDATE from on to newHashMap", "operations": ["UPD SimpleName: on from on to newHashMap"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: join to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from ImmutableSet to LOG", "operations": ["UPD SimpleName: ImmutableSet from ImmutableSet to LOG"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableSet to MethodInvocation at 0", "MOV SimpleName: v to MethodInvocation at 3", "MOV SimpleName: copyOf to MethodInvocation at 1"]}, {"root": "UPDATE from copyOf to error", "operations": ["UPD SimpleName: copyOf from copyOf to error"]}, {"root": "UPDATE from v to e", "operations": ["UPD SimpleName: v from v to e"]}, {"root": "UPDATE from Joiner to UUID", "operations": ["UPD SimpleName: Joiner from Joiner to UUID"]}, {"root": "UPDATE from on to randomUUID", "operations": ["UPD SimpleName: on from on to randomUUID"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: public", "DEL Javadoc", "DEL SimpleType: String", "DEL TagElement", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"WorkflowID\"", "DEL TextElement: The name of the workflow to which the task belongs. ", "DEL Modifier: final", "DEL Modifier: static", "DEL SimpleName: String", "DEL SimpleName: WORKFLOW_ID"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL TextElement: The name of the target resource. ", "DEL Javadoc"]}, {"root": "DEL SimpleName: TARGET_RESOURCE", "operations": ["DEL SimpleName: TARGET_RESOURCE"]}, {"root": "DEL StringLiteral: \"TargetResource\"", "operations": ["DEL StringLiteral: \"TargetResource\""]}, {"root": "DEL StringLiteral: \"Command\"", "operations": ["DEL StringLiteral: \"Command\""]}, {"root": "DEL ParameterizedType: Set<String>", "operations": ["DEL SimpleName: Set", "DEL ParameterizedType: Set<String>", "DEL SimpleType: Set", "DEL SimpleType: String"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \",\"", "DEL SimpleName: put", "DEL QualifiedName: TaskConfig.TARGET_PARTITION_STATES", "DEL SimpleName: join", "DEL SimpleName: cfgMap", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: _targetPartitionStates"]}, {"root": "DEL StringLiteral: \",\"", "operations": ["DEL StringLiteral: \",\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL QualifiedName: TaskConfig.TARGET_PARTITIONS", "DEL MethodInvocation", "DEL SimpleName: cfgMap", "DEL SimpleName: put", "DEL SimpleName: _targetPartitions"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"\"", "DEL InfixExpression: +", "DEL SimpleName: _timeoutPerPartition"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: _maxAttemptsPerPartition", "DEL StringLiteral: \"\"", "DEL InfixExpression: +"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: validate", "DEL ExpressionStatement"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: _timeoutPerPartition", "DEL SimpleName: _workflow", "DEL SimpleName: _numConcurrentTasksPerInstance", "DEL SimpleName: _command", "DEL ClassInstanceCreation", "DEL SimpleName: _commandConfig", "DEL SimpleName: _targetResource", "DEL SimpleName: _targetPartitions", "DEL SimpleName: _maxAttemptsPerPartition", "DEL SimpleName: _targetPartitionStates"]}, {"root": "DEL TagElement", "operations": ["DEL TextElement:  Map&lt;String, String&gt;", "DEL TextElement: Convenience method to build a ", "DEL SimpleName: TaskConfig", "DEL TextElement: .", "DEL TagElement: @link", "DEL TagElement: @code", "DEL TagElement", "DEL TextElement:  from a "]}, {"root": "DEL SimpleName: cfg", "operations": ["DEL SimpleName: cfg"]}, {"root": "DEL TagElement: @link", "operations": ["DEL TagElement: @link", "DEL SimpleName: Builder"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL SimpleName: get", "operations": ["DEL SimpleName: get"]}, {"root": "DEL SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE", "operations": ["DEL SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL SimpleType: Builder", "operations": ["DEL SimpleName: Builder", "DEL SimpleType: Builder"]}, {"root": "DEL SimpleName: fromMap", "operations": ["DEL SimpleName: fromMap"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: MAX_ATTEMPTS_PER_PARTITION", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: cfg", "DEL ExpressionStatement", "DEL SimpleName: containsKey", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: csvToIntList", "DEL MethodInvocation", "DEL SimpleName: Arrays", "DEL ExpressionStatement", "DEL SimpleName: cfg", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: cfg", "DEL IfStatement", "DEL SimpleName: asList", "DEL IfStatement", "DEL SimpleName: b", "DEL SimpleName: get", "DEL SimpleName: cfg", "DEL MethodInvocation", "DEL SimpleName: WORKFLOW_ID", "DEL SimpleName: COMMAND", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: get", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: TARGET_PARTITION_STATES", "DEL SimpleName: setTargetPartitionStates", "DEL Block", "DEL SimpleName: b", "DEL SimpleName: setTargetResource", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: parseLong", "DEL SimpleName: b", "DEL SimpleName: b", "DEL SimpleName: cfg", "DEL IfStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: Long", "DEL SimpleName: cfg", "DEL MethodInvocation", "DEL SimpleType: Builder", "DEL SimpleName: cfg", "DEL VariableDeclarationStatement", "DEL Block", "DEL Block", "DEL SimpleName: b", "DEL MethodInvocation", "DEL SimpleName: b", "DEL MethodInvocation", "DEL ParameterizedType: HashSet<String>", "DEL SimpleName: TIMEOUT_PER_PARTITION", "DEL Block", "DEL SimpleName: setTimeoutPerPartition", "DEL SimpleName: TARGET_RESOURCE", "DEL SimpleName: containsKey", "DEL SimpleName: setCommandConfig", "DEL SimpleName: containsKey", "DEL SimpleName: Builder", "DEL SimpleName: Builder", "DEL SimpleName: COMMAND_CONFIG", "DEL MethodInvocation", "DEL SimpleName: split", "DEL SimpleName: Integer", "DEL Block", "DEL SimpleName: setCommand", "DEL SimpleName: TARGET_PARTITIONS", "DEL SimpleName: cfg", "DEL StringLiteral: \",\"", "DEL SimpleName: MAX_ATTEMPTS_PER_PARTITION", "DEL SimpleName: HashSet", "DEL SimpleName: containsKey", "DEL SimpleName: COMMAND", "DEL SimpleName: setWorkflow", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: COMMAND_CONFIG", "DEL SimpleName: WORKFLOW_ID", "DEL SimpleName: cfg", "DEL SimpleName: cfg", "DEL IfStatement", "DEL SimpleName: parseInt", "DEL SimpleName: containsKey", "DEL ExpressionStatement", "DEL SimpleName: cfg", "DEL SimpleName: cfg", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: containsKey", "DEL SimpleName: cfg", "DEL ClassInstanceCreation", "DEL SimpleName: containsKey", "DEL IfStatement", "DEL SimpleName: cfg", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: TARGET_PARTITION_STATES", "DEL MethodInvocation", "DEL SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE", "DEL SimpleName: containsKey", "DEL MethodInvocation", "DEL SimpleName: containsKey", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: b", "DEL SimpleType: HashSet", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: b", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: TARGET_RESOURCE", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: cfg", "DEL SimpleName: setMaxAttemptsPerPartition", "DEL SimpleName: TARGET_PARTITIONS", "DEL SimpleName: b", "DEL Block", "DEL SimpleName: cfg", "DEL SimpleType: String", "DEL SimpleName: setNumConcurrentTasksPerInstance", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: setTargetPartitions", "DEL SimpleName: b", "DEL MethodInvocation", "DEL SimpleName: cfg", "DEL SimpleType: Builder", "DEL SimpleName: TIMEOUT_PER_PARTITION", "DEL SimpleName: b", "DEL SimpleName: get", "DEL Block"]}, {"root": "DEL SimpleType: Builder", "operations": ["DEL SimpleName: Builder", "DEL SimpleType: Builder"]}, {"root": "DEL SimpleName: setWorkflow", "operations": ["DEL SimpleName: setWorkflow"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: v", "DEL SimpleName: String"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: v", "DEL SimpleName: _workflow", "DEL ExpressionStatement", "DEL Assignment: ="]}, {"root": "DEL ReturnStatement", "operations": ["DEL ThisExpression", "DEL ReturnStatement"]}, {"root": "DEL Assignment: =", "operations": ["DEL MethodInvocation", "DEL SimpleName: _targetPartitionStates", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: _commandConfig", "DEL SimpleName: v"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL PrimitiveType: int", "operations": ["DEL PrimitiveType: int"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: IllegalArgumentException", "DEL ClassInstanceCreation", "DEL SimpleName: _targetResource", "DEL SimpleType: IllegalArgumentException", "DEL StringLiteral: \"%s cannot be null\"", "DEL NullLiteral", "DEL SimpleName: TARGET_RESOURCE", "DEL SimpleName: String", "DEL ThrowStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL InfixExpression: =="]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: _targetPartitionStates", "DEL SimpleName: TARGET_PARTITION_STATES", "DEL StringLiteral: \"%s cannot be an empty set\"", "DEL Block", "DEL SimpleName: _targetPartitionStates", "DEL SimpleType: IllegalArgumentException", "DEL MethodInvocation", "DEL ThrowStatement", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: isEmpty", "DEL ClassInstanceCreation", "DEL SimpleName: format", "DEL InfixExpression: !="]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL SimpleName: COMMAND", "DEL MethodInvocation", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalArgumentException", "DEL IfStatement", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: String", "DEL ThrowStatement", "DEL InfixExpression: ==", "DEL StringLiteral: \"%s cannot be null\"", "DEL SimpleName: _command"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: _timeoutPerPartition", "DEL SimpleName: format", "DEL StringLiteral: \"%s has invalid value %s\"", "DEL SimpleName: IllegalArgumentException", "DEL ClassInstanceCreation", "DEL SimpleName: TIMEOUT_PER_PARTITION", "DEL IfStatement", "DEL InfixExpression: <", "DEL ThrowStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleType: IllegalArgumentException", "DEL Block", "DEL SimpleName: _timeoutPerPartition"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: _numConcurrentTasksPerInstance", "DEL IfStatement", "DEL SimpleName: IllegalArgumentException", "DEL InfixExpression: <", "DEL StringLiteral: \"%s has invalid value %s\"", "DEL SimpleName: _numConcurrentTasksPerInstance", "DEL SimpleType: IllegalArgumentException", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: String", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE", "DEL SimpleName: format", "DEL ClassInstanceCreation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: _maxAttemptsPerPartition", "DEL ThrowStatement", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: MAX_ATTEMPTS_PER_PARTITION", "DEL SimpleType: IllegalArgumentException", "DEL ClassInstanceCreation", "DEL SimpleName: _maxAttemptsPerPartition", "DEL MethodInvocation", "DEL StringLiteral: \"%s has invalid value %s\"", "DEL SimpleName: String", "DEL SimpleName: format", "DEL NumberLiteral: 1", "DEL Block", "DEL InfixExpression: <", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL SimpleName: WORKFLOW_ID", "DEL SimpleName: String", "DEL SimpleName: _workflow", "DEL IfStatement", "DEL MethodInvocation", "DEL StringLiteral: \"%s cannot be null\"", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: format", "DEL Block", "DEL ThrowStatement", "DEL InfixExpression: ==", "DEL SimpleType: IllegalArgumentException", "DEL ClassInstanceCreation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Javadoc", "DEL TagElement", "DEL SimpleName: TARGET_PARTITION_STATES", "DEL TextElement: states.", "DEL Modifier: static", "DEL StringLiteral: \"TargetPartitionStates\"", "DEL VariableDeclarationFragment", "DEL TextElement: The set of the target partition states. The value must be a comma-separated list of partition", "DEL FieldDeclaration", "DEL SimpleType: String"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL TagElement", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: final", "DEL StringLiteral: \"TargetPartitions\"", "DEL SimpleType: String", "DEL TextElement: The set of the target partition ids. The value must be a comma-separated list of partition ids.", "DEL SimpleName: TARGET_PARTITIONS", "DEL Modifier: static"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL TagElement", "DEL Modifier: final", "DEL FieldDeclaration", "DEL Javadoc", "DEL Modifier: static", "DEL TextElement: The command that is to be run by participants. ", "DEL Modifier: public", "DEL SimpleType: String"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: String", "DEL StringLiteral: \"CommandConfig\"", "DEL Javadoc", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: COMMAND_CONFIG", "DEL SimpleType: String", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Modifier: static"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Javadoc", "DEL StringLiteral: \"TimeoutPerPartition\"", "DEL TagElement", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Modifier: static", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: TIMEOUT_PER_PARTITION"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: MAX_ATTEMPTS_PER_PARTITION", "DEL Javadoc", "DEL Modifier: static", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL StringLiteral: \"MaxAttemptsPerPartition\""]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL StringLiteral: \"ConcurrentTasksPerInstance\"", "DEL TagElement", "DEL Javadoc", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL Modifier: final", "DEL Modifier: static", "DEL SimpleType: String", "DEL SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: DEFAULT_TIMEOUT_PER_PARTITION", "DEL Modifier: final", "DEL NumberLiteral: 60", "DEL PrimitiveType: long", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1000", "DEL Modifier: public", "DEL NumberLiteral: 60", "DEL InfixExpression: *", "DEL FieldDeclaration", "DEL Modifier: static"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: DEFAULT_MAX_ATTEMPTS_PER_PARTITION", "DEL Modifier: static", "DEL Modifier: final", "DEL NumberLiteral: 10", "DEL FieldDeclaration", "DEL Modifier: public"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL NumberLiteral: 1", "DEL Modifier: static", "DEL Modifier: public", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: DEFAULT_NUM_CONCURRENT_TASKS_PER_INSTANCE", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: _workflow", "DEL Modifier: private"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: _targetResource", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: List", "DEL FieldDeclaration", "DEL ParameterizedType: List<Integer>", "DEL SimpleName: _targetPartitions", "DEL SimpleType: Integer", "DEL Modifier: final", "DEL SimpleName: Integer", "DEL VariableDeclarationFragment", "DEL SimpleType: List"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: _targetPartitionStates", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL SimpleType: Set", "DEL ParameterizedType: Set<String>", "DEL SimpleName: Set", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: String", "DEL Modifier: final", "DEL Modifier: private", "DEL SimpleName: String", "DEL SimpleName: _command"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleName: _commandConfig"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleName: _timeoutPerPartition", "DEL Modifier: private", "DEL PrimitiveType: long"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL Modifier: final", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: _numConcurrentTasksPerInstance", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: _maxAttemptsPerPartition", "DEL Modifier: private", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Modifier: final"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: List", "DEL SimpleName: targetResource", "DEL SimpleName: workflow", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: targetPartitions", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: targetPartitions", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: _timeoutPerPartition", "DEL SimpleName: numConcurrentTasksPerInstance", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: targetResource", "DEL SimpleName: _maxAttemptsPerPartition", "DEL SingleVariableDeclaration", "DEL SimpleName: _command", "DEL SimpleName: targetPartitionStates", "DEL SimpleName: numConcurrentTasksPerInstance", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: timeoutPerPartition", "DEL SimpleName: Integer", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: commandConfig", "DEL ExpressionStatement", "DEL SimpleName: command", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: maxAttemptsPerPartition", "DEL Assignment: =", "DEL SimpleName: _targetPartitionStates", "DEL SimpleName: _numConcurrentTasksPerInstance", "DEL Block", "DEL Modifier: private", "DEL SimpleName: commandConfig", "DEL SimpleName: _targetPartitions", "DEL SimpleName: _commandConfig", "DEL SimpleName: List", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ParameterizedType: List<Integer>", "DEL MethodDeclaration", "DEL SimpleName: _targetResource", "DEL SimpleName: maxAttemptsPerPartition", "DEL SimpleName: _workflow", "DEL SimpleName: timeoutPerPartition", "DEL SimpleType: Integer", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleType: String", "DEL Modifier: public", "DEL MethodDeclaration", "DEL QualifiedName: Workflow.UNSPECIFIED", "DEL SimpleName: _workflow", "DEL ReturnStatement", "DEL SimpleName: getWorkflow", "DEL ConditionalExpression", "DEL Block", "DEL SimpleName: _workflow"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: getTargetResource", "DEL SimpleName: String", "DEL ReturnStatement", "DEL Modifier: public", "DEL Block", "DEL SimpleName: _targetResource"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Integer", "DEL SimpleName: _targetPartitions", "DEL ParameterizedType: List<Integer>", "DEL SimpleName: getTargetPartitions", "DEL Modifier: public", "DEL SimpleName: List", "DEL SimpleType: List", "DEL MethodDeclaration", "DEL SimpleType: Integer", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: String", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: Set", "DEL SimpleName: _targetPartitionStates", "DEL ParameterizedType: Set<String>", "DEL Modifier: public", "DEL Block", "DEL SimpleType: Set", "DEL SimpleName: getTargetPartitionStates", "DEL SimpleName: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: _command", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: getCommand", "DEL Block", "DEL Modifier: public", "DEL SimpleName: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: String", "DEL SimpleName: getCommandConfig", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: _commandConfig", "DEL SimpleType: String", "DEL Modifier: public", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: _timeoutPerPartition", "DEL SimpleName: getTimeoutPerPartition", "DEL PrimitiveType: long", "DEL MethodDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: _numConcurrentTasksPerInstance", "DEL Block", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: getNumConcurrentTasksPerInstance", "DEL PrimitiveType: int", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: _maxAttemptsPerPartition", "DEL MethodDeclaration", "DEL SimpleName: getMaxAttemptsPerPartition", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: cfgMap", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: cfgMap", "DEL SimpleName: _workflow", "DEL SimpleName: cfgMap", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: _targetResource", "DEL QualifiedName: TaskConfig.WORKFLOW_ID", "DEL SimpleName: _command", "DEL SimpleName: cfgMap", "DEL SimpleName: put", "DEL SimpleName: put", "DEL QualifiedName: TaskConfig.COMMAND_CONFIG", "DEL SimpleName: put", "DEL MethodInvocation", "DEL SimpleName: _commandConfig", "DEL SimpleName: getResourceConfigMap", "DEL SimpleName: cfgMap", "DEL ExpressionStatement", "DEL ParameterizedType: HashMap<String,String>", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL QualifiedName: TaskConfig.TARGET_RESOURCE", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: cfgMap", "DEL SimpleName: put", "DEL VariableDeclarationStatement", "DEL QualifiedName: TaskConfig.COMMAND"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: _targetResource", "DEL SimpleName: v", "DEL SimpleName: parseInt", "DEL SimpleName: setCommand", "DEL SimpleType: Set", "DEL Block", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: List", "DEL SimpleType: Integer", "DEL VariableDeclarationStatement", "DEL SimpleName: v", "DEL SimpleName: Builder", "DEL Modifier: private", "DEL SimpleName: v", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: _maxAttemptsPerPartition", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ReturnStatement", "DEL ParameterizedType: List<Integer>", "DEL SimpleName: String", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: v", "DEL ThisExpression", "DEL SimpleType: String", "DEL SimpleName: _targetPartitions", "DEL SimpleName: Integer", "DEL FieldDeclaration", "DEL SimpleName: vals", "DEL Assignment: =", "DEL SimpleType: Builder", "DEL SimpleName: DEFAULT_TIMEOUT_PER_PARTITION", "DEL ExpressionStatement", "DEL SimpleName: _timeoutPerPartition", "DEL SimpleName: vals", "DEL SimpleName: split", "DEL SimpleName: _numConcurrentTasksPerInstance", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL SimpleName: l", "DEL ParameterizedType: List<Integer>", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: _command", "DEL SimpleName: _commandConfig", "DEL SimpleType: Builder", "DEL SimpleType: String", "DEL SimpleName: setTargetResource", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL ArrayType: String[]", "DEL VariableDeclarationFragment", "DEL StringLiteral: \",\"", "DEL SimpleType: ArrayList", "DEL SimpleName: String", "DEL ParameterizedType: List<Integer>", "DEL Assignment: =", "DEL Modifier: private", "DEL Modifier: private", "DEL SimpleName: _targetPartitions", "DEL ParameterizedType: List<Integer>", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: v", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: v", "DEL SimpleType: Set", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL SimpleType: Builder", "DEL SimpleName: csv", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: l", "DEL SimpleName: DEFAULT_NUM_CONCURRENT_TASKS_PER_INSTANCE", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL SimpleName: _targetResource", "DEL SimpleName: Integer", "DEL FieldDeclaration", "DEL Modifier: private", "DEL Modifier: private", "DEL SimpleName: l", "DEL ReturnStatement", "DEL SimpleName: v", "DEL SimpleName: String", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL SimpleName: setTargetPartitionStates", "DEL SimpleName: v", "DEL Assignment: =", "DEL SimpleType: Builder", "DEL Assignment: =", "DEL SimpleName: v", "DEL Modifier: private", "DEL SimpleName: Set", "DEL MethodDeclaration", "DEL ParameterizedType: Set<String>", "DEL SimpleName: List", "DEL FieldDeclaration", "DEL SimpleName: v", "DEL SimpleName: String", "DEL Modifier: static", "DEL SimpleName: Integer", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL Modifier: public", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: Integer", "DEL MethodDeclaration", "DEL SimpleName: Integer", "DEL SimpleName: ArrayList", "DEL PrimitiveType: void", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL ThisExpression", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: csv", "DEL SimpleType: List", "DEL Modifier: public", "DEL Block", "DEL SimpleType: String", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: Builder", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Builder", "DEL SimpleName: setNumConcurrentTasksPerInstance", "DEL ThisExpression", "DEL ThisExpression", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL SimpleName: Builder", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL PrimitiveType: long", "DEL SimpleType: String", "DEL SimpleName: Builder", "DEL SimpleName: String", "DEL SimpleType: List", "DEL ThisExpression", "DEL Assignment: =", "DEL PrimitiveType: long", "DEL SimpleName: v", "DEL SimpleName: _command", "DEL FieldDeclaration", "DEL Block", "DEL ThisExpression", "DEL ParameterizedType: Set<String>", "DEL SimpleName: Builder", "DEL SimpleName: _maxAttemptsPerPartition", "DEL SimpleType: Builder", "DEL ParameterizedType: ArrayList<Integer>", "DEL SimpleName: csvToIntList", "DEL SimpleType: String", "DEL SimpleType: Builder", "DEL SimpleType: List", "DEL SimpleName: _targetPartitionStates", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: DEFAULT_MAX_ATTEMPTS_PER_PARTITION", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL SimpleName: List", "DEL SimpleName: v", "DEL SimpleName: Integer", "DEL SimpleName: setTimeoutPerPartition", "DEL SingleVariableDeclaration", "DEL SimpleName: v", "DEL Modifier: private", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleType: String", "DEL Dimension", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleType: Integer", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: _timeoutPerPartition", "DEL VariableDeclarationFragment", "DEL SimpleName: validate", "DEL EnhancedForStatement", "DEL SimpleName: v", "DEL SimpleType: String", "DEL Block", "DEL SimpleType: Integer", "DEL SimpleName: _numConcurrentTasksPerInstance", "DEL SimpleName: _workflow", "DEL SimpleName: String", "DEL SimpleName: List", "DEL Block", "DEL SimpleName: String", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL SimpleName: setTargetPartitions"]}]}}, {"TaskConfig_diff": {"operations": ["Move ImportDeclaration(11) into CompilationUnit(332) at 7", "Update QualifiedName: java.util.Arrays(4) to java.io.IOException", "Update QualifiedName: java.util.List(10) to java.util.UUID", "Update QualifiedName: java.util.Set(14) to org.apache.helix.task.beans.TaskBean", "Update QualifiedName: com.google.common.base.Joiner(16) to org.apache.log4j.Logger", "Update QualifiedName: com.google.common.collect.ImmutableList(18) to org.codehaus.jackson.map.ObjectMapper", "Update QualifiedName: com.google.common.collect.ImmutableSet(20) to com.google.common.collect.Maps", "Insert EnumDeclaration(27) into TypeDeclaration: class(331) at 3", "Insert FieldDeclaration(53) into TypeDeclaration: class(331) at 5", "Insert MethodDeclaration(130) into TypeDeclaration: class(331) at 6", "Insert MethodDeclaration(160) into TypeDeclaration: class(331) at 7", "Move MethodDeclaration(578) into TypeDeclaration: class(331) at 9", "Move MethodDeclaration(770) into TypeDeclaration: class(331) at 10", "Move MethodDeclaration(786) into TypeDeclaration: class(331) at 11", "Insert MethodDeclaration(252) into TypeDeclaration: class(331) at 11", "Insert MethodDeclaration(277) into TypeDeclaration: class(331) at 12", "Insert MethodDeclaration(330) into TypeDeclaration: class(331) at 13", "Insert Modifier: private(21) into EnumDeclaration(27) at 0", "Insert SimpleName: TaskConfigFields(22) into EnumDeclaration(27) at 1", "Insert EnumConstantDeclaration(24) into EnumDeclaration(27) at 2", "Insert EnumConstantDeclaration(26) into EnumDeclaration(27) at 3", "Update Modifier: public(42) to private", "Update SimpleType: String(46) to Logger", "Update Modifier: public(55) to private", "Move Modifier: public(55) into FieldDeclaration(53) at 0", "Move Modifier: final(57) into FieldDeclaration(53) at 1", "Insert ParameterizedType: Map<String,String>(50) into FieldDeclaration(53) at 2", "Move VariableDeclarationFragment(86) into FieldDeclaration(53) at 3", "Insert Javadoc(65) into MethodDeclaration(130) at 0", "Insert Modifier: public(66) into MethodDeclaration(130) at 1", "Move SimpleName: TaskConfig(230) into MethodDeclaration(130) at 2", "Move SingleVariableDeclaration(252) into MethodDeclaration(130) at 3", "Insert SingleVariableDeclaration(80) into MethodDeclaration(130) at 4", "Move SingleVariableDeclaration(234) into MethodDeclaration(130) at 5", "Insert Block(129) into MethodDeclaration(130) at 6", "Insert Javadoc(139) into MethodDeclaration(160) at 0", "Insert Modifier: public(140) into MethodDeclaration(160) at 1", "Insert SimpleName: TaskConfig(141) into MethodDeclaration(160) at 2", "Move SingleVariableDeclaration(256) into MethodDeclaration(160) at 3", "Move SingleVariableDeclaration(609) into MethodDeclaration(160) at 4", "Insert Block(159) into MethodDeclaration(160) at 5", "Insert Javadoc(165) into MethodDeclaration(178) at 0", "Move SimpleType: String(166) into MethodDeclaration(178) at 2", "Update SimpleName: build(560) to getId", "Move SimpleType: String(173) into MethodDeclaration(196) at 2", "Insert SimpleName: getCommand(187) into MethodDeclaration(196) at 3", "Insert Block(195) into MethodDeclaration(196) at 4", "Insert Javadoc(201) into MethodDeclaration(214) at 0", "Move ParameterizedType: Map<String,String>(395) into MethodDeclaration(214) at 2", "Insert SimpleName: getConfigMap(210) into MethodDeclaration(214) at 3", "Insert MarkerAnnotation(216) into MethodDeclaration(252) at 0", "Move Modifier: public(787) into MethodDeclaration(252) at 1", "Move SimpleType: String(207) into MethodDeclaration(252) at 2", "Insert SimpleName: toString(220) into MethodDeclaration(252) at 3", "Insert Block(251) into MethodDeclaration(252) at 4", "Insert Javadoc(260) into MethodDeclaration(277) at 0", "Move Modifier: public(863) into MethodDeclaration(277) at 1", "Insert Modifier: static(262) into MethodDeclaration(277) at 2", "Update SimpleType: Builder(865) to TaskConfig", "Move SimpleType: Builder(865) into MethodDeclaration(277) at 3", "Update SimpleName: setCommandConfig(866) to from", "Move SimpleName: setCommandConfig(866) into MethodDeclaration(277) at 4", "Move SingleVariableDeclaration(870) into MethodDeclaration(277) at 5", "Move Block(877) into MethodDeclaration(277) at 6", "Insert Javadoc(285) into MethodDeclaration(330) at 0", "Move Modifier: public(894) into MethodDeclaration(330) at 1", "Update Modifier: public(909) to static", "Move Modifier: public(909) into MethodDeclaration(330) at 2", "Update SimpleType: Builder(911) to TaskConfig", "Move SimpleType: Builder(911) into MethodDeclaration(330) at 3", "Update SimpleName: setMaxAttemptsPerPartition(912) to from", "Move SimpleName: setMaxAttemptsPerPartition(912) into MethodDeclaration(330) at 4", "Move SingleVariableDeclaration(915) into MethodDeclaration(330) at 5", "Move Block(1032) into MethodDeclaration(330) at 6", "Update TextElement: Provides a typed interface to task configurations.(22) to Configuration for an individual task to be run as part of a job.", "Insert SimpleName: TASK_ID(23) into EnumConstantDeclaration(24) at 0", "Insert SimpleName: TASK_COMMAND(25) into EnumConstantDeclaration(26) at 0", "Update SimpleName: String(45) to Logger", "Insert SimpleName: LOG(33) into VariableDeclarationFragment(40) at 0", "Insert MethodInvocation(39) into VariableDeclarationFragment(40) at 1", "Insert SimpleType: Map(45) into ParameterizedType: Map<String,String>(50) at 0", "Insert SimpleType: String(47) into ParameterizedType: Map<String,String>(50) at 1", "Insert SimpleType: String(49) into ParameterizedType: Map<String,String>(50) at 2", "Update SimpleName: COMMAND(84) to _configMap", "Move TagElement(89) into Javadoc(65) at 0", "Insert TagElement: @param(58) into Javadoc(65) at 1", "Insert TagElement: @param(61) into Javadoc(65) at 2", "Insert TagElement: @param(64) into Javadoc(65) at 3", "Insert SimpleType: String(69) into SingleVariableDeclaration(71) at 0", "Update SimpleName: targetPartitionStates(251) to command", "Insert ParameterizedType: Map<String,String>(78) into SingleVariableDeclaration(80) at 0", "Insert SimpleName: configMap(79) into SingleVariableDeclaration(80) at 1", "Update SimpleName: workflow(233) to id", "Insert IfStatement(95) into Block(129) at 0", "Move IfStatement(467) into Block(129) at 1", "Move ExpressionStatement(475) into Block(129) at 2", "Move ExpressionStatement(483) into Block(129) at 3", "Insert ExpressionStatement(128) into Block(129) at 4", "Insert TagElement(132) into Javadoc(139) at 0", "Insert TagElement: @param(135) into Javadoc(139) at 1", "Insert TagElement: @param(138) into Javadoc(139) at 2", "Update SimpleName: cfg(608) to configMap", "Insert ConstructorInvocation(158) into Block(159) at 0", "Insert TagElement(162) into Javadoc(165) at 0", "Insert TagElement: @return(164) into Javadoc(165) at 1", "Update TagElement: @param(589) to ", "Insert ReturnStatement(194) into Block(195) at 0", "Insert TagElement(198) into Javadoc(201) at 0", "Insert TagElement: @return(200) into Javadoc(201) at 1", "Insert ReturnStatement(212) into Block(213) at 0", "Insert SimpleName: Override(215) into MarkerAnnotation(216) at 0", "Insert VariableDeclarationStatement(228) into Block(251) at 0", "Insert TryStatement(247) into Block(251) at 1", "Insert ReturnStatement(250) into Block(251) at 2", "Insert TagElement(254) into Javadoc(260) at 0", "Insert TagElement: @param(257) into Javadoc(260) at 1", "Insert TagElement: @return(259) into Javadoc(260) at 2", "Update SimpleName: Builder(864) to TaskConfig", "Update SimpleType: String(868) to TaskBean", "Update SimpleName: v(869) to bean", "Insert TagElement(279) into Javadoc(285) at 0", "Insert TagElement: @param(282) into Javadoc(285) at 1", "Insert TagElement: @return(284) into Javadoc(285) at 2", "Update SimpleName: Builder(910) to TaskConfig", "Move ParameterizedType: Map<String,String>(403) into SingleVariableDeclaration(299) at 0", "Update SimpleName: v(914) to rawConfigMap", "Insert VariableDeclarationStatement(310) into Block(329) at 0", "Insert VariableDeclarationStatement(321) into Block(329) at 1", "Insert ReturnStatement(328) into Block(329) at 2", "Insert SimpleName: Logger(34) into MethodInvocation(39) at 0", "Insert SimpleName: getLogger(35) into MethodInvocation(39) at 1", "Insert TypeLiteral(38) into MethodInvocation(39) at 2", "Update SimpleName: String(58) to Map", "Move SimpleName: String(58) into SimpleType: Map(45) at 0", "Move SimpleName: String(70) into SimpleType: String(47) at 0", "Move SimpleName: String(82) into SimpleType: String(49) at 0", "Update TextElement: The command configuration to be used by the task partitions. (88) to Instantiate the task config", "Insert SimpleName: command(56) into TagElement: @param(58) at 0", "Update TextElement: The timeout for a task partitions. (100) to  the command to invoke for the task", "Move TextElement: The timeout for a task partitions. (100) into TagElement: @param(58) at 1", "Insert SimpleName: configMap(59) into TagElement: @param(61) at 0", "Update TextElement: The maximum number of times the task rebalancer may attempt to execute a task partitions. (112) to  configuration to be passed as part of the invocation", "Move TextElement: The maximum number of times the task rebalancer may attempt to execute a task partitions. (112) into TagElement: @param(61) at 1", "Insert SimpleName: id(62) into TagElement: @param(64) at 0", "Update TextElement: The number of concurrent tasks that are allowed to run on an instance. (124) to  existing task ID", "Move TextElement: The number of concurrent tasks that are allowed to run on an instance. (124) into TagElement: @param(64) at 1", "Move SimpleName: String(248) into SimpleType: String(69) at 0", "Update SimpleType: HashMap(406) to Map", "Move SimpleType: HashMap(406) into ParameterizedType: Map<String,String>(78) at 0", "Move SimpleType: String(408) into ParameterizedType: Map<String,String>(78) at 1", "Move SimpleType: String(410) into ParameterizedType: Map<String,String>(78) at 2", "Insert InfixExpression: ==(87) into IfStatement(95) at 0", "Insert Block(94) into IfStatement(95) at 1", "Update InfixExpression: !=(453) to ==", "Insert Assignment: =(127) into ExpressionStatement(128) at 0", "Update TextElement: A builder for (488) to Instantiate the task config", "Move TextElement: A builder for (488) into TagElement(132) at 0", "Update SimpleName: TaskConfig(489) to command", "Move SimpleName: TaskConfig(489) into TagElement: @param(135) at 0", "Insert TextElement:  the command to invoke for the task(134) into TagElement: @param(135) at 1", "Insert SimpleName: configMap(136) into TagElement: @param(138) at 0", "Update TextElement: . Validates the configurations.(491) to  configuration to be passed as part of the invocation", "Move TextElement: . Validates the configurations.(491) into TagElement: @param(138) at 1", "Insert SimpleName: command(155) into ConstructorInvocation(158) at 0", "Insert SimpleName: configMap(156) into ConstructorInvocation(158) at 1", "Insert NullLiteral(157) into ConstructorInvocation(158) at 2", "Insert TextElement: Unique identifier for this task(161) into TagElement(162) at 0", "Insert TextElement:  UUID as a string(163) into TagElement: @return(164) at 0", "Insert MethodInvocation(175) into ReturnStatement(176) at 0", "Update TextElement:  A map of property names to their string representations.(588) to Get the command to invoke for this task", "Update TextElement:  A (590) to  string command", "Insert MethodInvocation(193) into ReturnStatement(194) at 0", "Insert TextElement: Get the configuration map for this task's command(197) into TagElement(198) at 0", "Insert TextElement:  map of configuration key to value(199) into TagElement: @return(200) at 0", "Insert SimpleName: _configMap(211) into ReturnStatement(212) at 0", "Insert SimpleType: ObjectMapper(222) into VariableDeclarationStatement(228) at 0", "Insert VariableDeclarationFragment(227) into VariableDeclarationStatement(228) at 1", "Insert Block(234) into TryStatement(247) at 0", "Insert CatchClause(246) into TryStatement(247) at 1", "Insert SuperMethodInvocation(249) into ReturnStatement(250) at 0", "Insert TextElement: Instantiate a typed configuration from a bean(253) into TagElement(254) at 0", "Insert SimpleName: bean(255) into TagElement: @param(257) at 0", "Insert TextElement:  plain bean describing the task(256) into TagElement: @param(257) at 1", "Insert TextElement:  instantiated TaskConfig(258) into TagElement: @return(259) at 0", "Update SimpleName: String(867) to TaskBean", "Insert ClassInstanceCreation(274) into ReturnStatement(275) at 0", "Insert TextElement: Instantiate a typed configuration from a raw string map(278) into TagElement(279) at 0", "Insert SimpleName: rawConfigMap(280) into TagElement: @param(282) at 0", "Insert TextElement:  mixed map of configuration and task metadata(281) into TagElement: @param(282) at 1", "Insert TextElement:  instantiated TaskConfig(283) into TagElement: @return(284) at 0", "Move SimpleType: String(258) into VariableDeclarationStatement(310) at 0", "Insert VariableDeclarationFragment(309) into VariableDeclarationStatement(310) at 1", "Move SimpleType: String(236) into VariableDeclarationStatement(321) at 0", "Insert VariableDeclarationFragment(320) into VariableDeclarationStatement(321) at 1", "Insert ClassInstanceCreation(327) into ReturnStatement(328) at 0", "Insert SimpleType: TaskConfig(37) into TypeLiteral(38) at 0", "Update SimpleName: HashMap(405) to Map", "Insert SimpleName: configMap(85) into InfixExpression: ==(87) at 0", "Insert NullLiteral(86) into InfixExpression: ==(87) at 1", "Move ExpressionStatement(450) into Block(94) at 0", "Update SimpleName: _targetPartitions(451) to id", "Update SimpleName: cfgMap(468) to configMap", "Insert MethodInvocation(113) into MethodInvocation(115) at 2", "Insert SimpleName: command(114) into MethodInvocation(115) at 3", "Update SimpleName: cfgMap(476) to configMap", "Insert MethodInvocation(121) into MethodInvocation(123) at 2", "Insert SimpleName: id(122) into MethodInvocation(123) at 3", "Insert SimpleName: _configMap(125) into Assignment: =(127) at 0", "Insert SimpleName: configMap(126) into Assignment: =(127) at 1", "Insert SimpleName: _configMap(170) into MethodInvocation(175) at 0", "Insert SimpleName: get(171) into MethodInvocation(175) at 1", "Insert MethodInvocation(174) into MethodInvocation(175) at 2", "Update SimpleName: Integer(739) to _configMap", "Move SimpleName: Integer(739) into MethodInvocation(193) at 0", "Update SimpleName: parseInt(740) to get", "Move SimpleName: parseInt(740) into MethodInvocation(193) at 1", "Move MethodInvocation(744) into MethodInvocation(193) at 2", "Update SimpleName: Builder(804) to ObjectMapper", "Move SimpleName: Builder(804) into SimpleType: ObjectMapper(222) at 0", "Insert SimpleName: mapper(223) into VariableDeclarationFragment(227) at 0", "Insert ClassInstanceCreation(226) into VariableDeclarationFragment(227) at 1", "Insert ReturnStatement(233) into Block(234) at 0", "Insert SingleVariableDeclaration(238) into CatchClause(246) at 0", "Insert Block(245) into CatchClause(246) at 1", "Insert SimpleName: toString(248) into SuperMethodInvocation(249) at 0", "Move SimpleType: TaskConfig(559) into ClassInstanceCreation(274) at 0", "Insert QualifiedName: bean.command(272) into ClassInstanceCreation(274) at 1", "Insert QualifiedName: bean.taskConfigMap(273) into ClassInstanceCreation(274) at 2", "Insert SimpleName: taskId(302) into VariableDeclarationFragment(309) at 0", "Insert MethodInvocation(308) into VariableDeclarationFragment(309) at 1", "Insert SimpleName: command(313) into VariableDeclarationFragment(320) at 0", "Insert MethodInvocation(319) into VariableDeclarationFragment(320) at 1", "Move SimpleType: TaskConfig(565) into ClassInstanceCreation(327) at 0", "Insert SimpleName: command(324) into ClassInstanceCreation(327) at 1", "Insert SimpleName: rawConfigMap(325) into ClassInstanceCreation(327) at 2", "Insert SimpleName: taskId(326) into ClassInstanceCreation(327) at 3", "Insert SimpleName: TaskConfig(36) into SimpleType: TaskConfig(37) at 0", "Insert Assignment: =(92) into ExpressionStatement(93) at 0", "Insert Assignment: =(105) into ExpressionStatement(106) at 0", "Update QualifiedName: TaskConfig.TIMEOUT_PER_PARTITION(470) to TaskConfigFields.TASK_COMMAND", "Move QualifiedName: TaskConfig.TIMEOUT_PER_PARTITION(470) into MethodInvocation(113) at 0", "Insert SimpleName: toString(112) into MethodInvocation(113) at 1", "Update QualifiedName: TaskConfig.MAX_ATTEMPTS_PER_PARTITION(478) to TaskConfigFields.TASK_ID", "Move QualifiedName: TaskConfig.MAX_ATTEMPTS_PER_PARTITION(478) into MethodInvocation(121) at 0", "Insert SimpleName: toString(120) into MethodInvocation(121) at 1", "Insert QualifiedName: TaskConfigFields.TASK_ID(172) into MethodInvocation(174) at 0", "Insert SimpleName: toString(173) into MethodInvocation(174) at 1", "Insert QualifiedName: TaskConfigFields.TASK_COMMAND(190) into MethodInvocation(192) at 0", "Update SimpleName: cfg(741) to toString", "Insert SimpleType: ObjectMapper(225) into ClassInstanceCreation(226) at 0", "Insert MethodInvocation(232) into ReturnStatement(233) at 0", "Insert SimpleType: IOException(236) into SingleVariableDeclaration(238) at 0", "Insert SimpleName: e(237) into SingleVariableDeclaration(238) at 1", "Move ExpressionStatement(842) into Block(245) at 0", "Insert SimpleName: rawConfigMap(303) into MethodInvocation(308) at 0", "Update SimpleName: format(933) to get", "Move SimpleName: format(933) into MethodInvocation(308) at 1", "Insert MethodInvocation(307) into MethodInvocation(308) at 2", "Insert SimpleName: rawConfigMap(314) into MethodInvocation(319) at 0", "Update SimpleName: format(965) to get", "Move SimpleName: format(965) into MethodInvocation(319) at 1", "Insert MethodInvocation(318) into MethodInvocation(319) at 2", "Insert SimpleName: configMap(88) into Assignment: =(92) at 0", "Insert MethodInvocation(91) into Assignment: =(92) at 1", "Insert SimpleName: id(99) into Assignment: =(105) at 0", "Insert MethodInvocation(104) into Assignment: =(105) at 1", "Update SimpleName: Integer(809) to ObjectMapper", "Move SimpleName: Integer(809) into SimpleType: ObjectMapper(225) at 0", "Update SimpleName: ImmutableList(815) to mapper", "Move SimpleName: ImmutableList(815) into MethodInvocation(232) at 0", "Update SimpleName: copyOf(816) to writeValueAsString", "Move SimpleName: copyOf(816) into MethodInvocation(232) at 1", "Insert ThisExpression(231) into MethodInvocation(232) at 2", "Update SimpleName: Set(829) to IOException", "Move SimpleName: Set(829) into SimpleType: IOException(236) at 0", "Insert MethodInvocation(243) into ExpressionStatement(244) at 0", "Insert QualifiedName: TaskConfigFields.TASK_ID(305) into MethodInvocation(307) at 0", "Update SimpleName: String(950) to toString", "Move SimpleName: String(950) into MethodInvocation(307) at 1", "Insert QualifiedName: TaskConfigFields.TASK_COMMAND(316) into MethodInvocation(318) at 0", "Update SimpleName: String(978) to toString", "Move SimpleName: String(978) into MethodInvocation(318) at 1", "Update SimpleName: Joiner(442) to Maps", "Move SimpleName: Joiner(442) into MethodInvocation(91) at 0", "Update SimpleName: on(443) to newHashMap", "Move SimpleName: on(443) into MethodInvocation(91) at 1", "Move MethodInvocation(460) into MethodInvocation(104) at 0", "Update SimpleName: join(461) to toString", "Move SimpleName: join(461) into MethodInvocation(104) at 1", "Update SimpleName: ImmutableSet(837) to LOG", "Move SimpleName: ImmutableSet(837) into MethodInvocation(243) at 0", "Update SimpleName: copyOf(838) to error", "Move SimpleName: copyOf(838) into MethodInvocation(243) at 1", "Insert StringLiteral: \"Could not serialize TaskConfig\"(241) into MethodInvocation(243) at 2", "Update SimpleName: v(839) to e", "Move SimpleName: v(839) into MethodInvocation(243) at 3", "Update SimpleName: Joiner(457) to UUID", "Update SimpleName: on(458) to randomUUID", "Delete QualifiedName: java.util.ArrayList(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.HashMap(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashSet(8)", "Delete ImportDeclaration(9)", "Delete TextElement: The name of the workflow to which the task belongs. (27)", "Delete TagElement(28)", "Delete Javadoc(29)", "Delete Modifier: public(30)", "Delete Modifier: static(31)", "Delete Modifier: final(32)", "Delete SimpleName: String(33)", "Delete SimpleType: String(34)", "Delete SimpleName: WORKFLOW_ID(35)", "Delete StringLiteral: \"WorkflowID\"(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete TextElement: The name of the target resource. (39)", "Delete TagElement(40)", "Delete Javadoc(41)", "Delete SimpleName: TARGET_RESOURCE(47)", "Delete StringLiteral: \"TargetResource\"(48)", "Delete StringLiteral: \"Command\"(85)", "Delete SimpleName: Set(246)", "Delete SimpleType: Set(247)", "Delete SimpleType: String(249)", "Delete ParameterizedType: Set<String>(250)", "Delete SimpleName: cfgMap(439)", "Delete SimpleName: put(440)", "Delete QualifiedName: TaskConfig.TARGET_PARTITION_STATES(441)", "Delete StringLiteral: \",\"(444)", "Delete MethodInvocation(445)", "Delete SimpleName: join(446)", "Delete SimpleName: _targetPartitionStates(447)", "Delete MethodInvocation(448)", "Delete MethodInvocation(449)", "Delete StringLiteral: \",\"(459)", "Delete SimpleName: cfgMap(454)", "Delete SimpleName: put(455)", "Delete QualifiedName: TaskConfig.TARGET_PARTITIONS(456)", "Delete SimpleName: _targetPartitions(462)", "Delete MethodInvocation(463)", "Delete MethodInvocation(464)", "Delete StringLiteral: \"\"(471)", "Delete SimpleName: _timeoutPerPartition(472)", "Delete InfixExpression: +(473)", "Delete StringLiteral: \"\"(479)", "Delete SimpleName: _maxAttemptsPerPartition(480)", "Delete InfixExpression: +(481)", "Delete SimpleName: validate(561)", "Delete MethodInvocation(562)", "Delete ExpressionStatement(563)", "Delete SimpleName: _workflow(566)", "Delete SimpleName: _targetResource(567)", "Delete SimpleName: _targetPartitions(568)", "Delete SimpleName: _targetPartitionStates(569)", "Delete SimpleName: _command(570)", "Delete SimpleName: _commandConfig(571)", "Delete SimpleName: _timeoutPerPartition(572)", "Delete SimpleName: _numConcurrentTasksPerInstance(573)", "Delete SimpleName: _maxAttemptsPerPartition(574)", "Delete ClassInstanceCreation(575)", "Delete TextElement: Convenience method to build a (579)", "Delete SimpleName: TaskConfig(580)", "Delete TagElement: @link(581)", "Delete TextElement:  from a (582)", "Delete TextElement:  Map&lt;String, String&gt;(583)", "Delete TagElement: @code(584)", "Delete TextElement: .(585)", "Delete TagElement(586)", "Delete SimpleName: cfg(587)", "Delete SimpleName: Builder(591)", "Delete TagElement: @link(592)", "Delete TextElement: .(593)", "Delete SimpleName: get(742)", "Delete SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE(743)", "Delete Modifier: static(597)", "Delete SimpleName: Builder(598)", "Delete SimpleType: Builder(599)", "Delete SimpleName: fromMap(600)", "Delete SimpleName: Builder(610)", "Delete SimpleType: Builder(611)", "Delete SimpleName: b(612)", "Delete SimpleName: Builder(613)", "Delete SimpleType: Builder(614)", "Delete ClassInstanceCreation(615)", "Delete VariableDeclarationFragment(616)", "Delete VariableDeclarationStatement(617)", "Delete SimpleName: cfg(618)", "Delete SimpleName: containsKey(619)", "Delete SimpleName: WORKFLOW_ID(620)", "Delete MethodInvocation(621)", "Delete SimpleName: b(622)", "Delete SimpleName: setWorkflow(623)", "Delete SimpleName: cfg(624)", "Delete SimpleName: get(625)", "Delete SimpleName: WORKFLOW_ID(626)", "Delete MethodInvocation(627)", "Delete MethodInvocation(628)", "Delete ExpressionStatement(629)", "Delete Block(630)", "Delete IfStatement(631)", "Delete SimpleName: cfg(632)", "Delete SimpleName: containsKey(633)", "Delete SimpleName: TARGET_RESOURCE(634)", "Delete MethodInvocation(635)", "Delete SimpleName: b(636)", "Delete SimpleName: setTargetResource(637)", "Delete SimpleName: cfg(638)", "Delete SimpleName: get(639)", "Delete SimpleName: TARGET_RESOURCE(640)", "Delete MethodInvocation(641)", "Delete MethodInvocation(642)", "Delete ExpressionStatement(643)", "Delete Block(644)", "Delete IfStatement(645)", "Delete SimpleName: cfg(646)", "Delete SimpleName: containsKey(647)", "Delete SimpleName: TARGET_PARTITIONS(648)", "Delete MethodInvocation(649)", "Delete SimpleName: b(650)", "Delete SimpleName: setTargetPartitions(651)", "Delete SimpleName: csvToIntList(652)", "Delete SimpleName: cfg(653)", "Delete SimpleName: get(654)", "Delete SimpleName: TARGET_PARTITIONS(655)", "Delete MethodInvocation(656)", "Delete MethodInvocation(657)", "Delete MethodInvocation(658)", "Delete ExpressionStatement(659)", "Delete Block(660)", "Delete IfStatement(661)", "Delete SimpleName: cfg(662)", "Delete SimpleName: containsKey(663)", "Delete SimpleName: TARGET_PARTITION_STATES(664)", "Delete MethodInvocation(665)", "Delete SimpleName: b(666)", "Delete SimpleName: setTargetPartitionStates(667)", "Delete SimpleName: HashSet(668)", "Delete SimpleType: HashSet(669)", "Delete SimpleName: String(670)", "Delete SimpleType: String(671)", "Delete ParameterizedType: HashSet<String>(672)", "Delete SimpleName: Arrays(673)", "Delete SimpleName: asList(674)", "Delete SimpleName: cfg(675)", "Delete SimpleName: get(676)", "Delete SimpleName: TARGET_PARTITION_STATES(677)", "Delete MethodInvocation(678)", "Delete SimpleName: split(679)", "Delete StringLiteral: \",\"(680)", "Delete MethodInvocation(681)", "Delete MethodInvocation(682)", "Delete ClassInstanceCreation(683)", "Delete MethodInvocation(684)", "Delete ExpressionStatement(685)", "Delete Block(686)", "Delete IfStatement(687)", "Delete SimpleName: cfg(688)", "Delete SimpleName: containsKey(689)", "Delete SimpleName: COMMAND(690)", "Delete MethodInvocation(691)", "Delete SimpleName: b(692)", "Delete SimpleName: setCommand(693)", "Delete SimpleName: cfg(694)", "Delete SimpleName: get(695)", "Delete SimpleName: COMMAND(696)", "Delete MethodInvocation(697)", "Delete MethodInvocation(698)", "Delete ExpressionStatement(699)", "Delete Block(700)", "Delete IfStatement(701)", "Delete SimpleName: cfg(702)", "Delete SimpleName: containsKey(703)", "Delete SimpleName: COMMAND_CONFIG(704)", "Delete MethodInvocation(705)", "Delete SimpleName: b(706)", "Delete SimpleName: setCommandConfig(707)", "Delete SimpleName: cfg(708)", "Delete SimpleName: get(709)", "Delete SimpleName: COMMAND_CONFIG(710)", "Delete MethodInvocation(711)", "Delete MethodInvocation(712)", "Delete ExpressionStatement(713)", "Delete Block(714)", "Delete IfStatement(715)", "Delete SimpleName: cfg(716)", "Delete SimpleName: containsKey(717)", "Delete SimpleName: TIMEOUT_PER_PARTITION(718)", "Delete MethodInvocation(719)", "Delete SimpleName: b(720)", "Delete SimpleName: setTimeoutPerPartition(721)", "Delete SimpleName: Long(722)", "Delete SimpleName: parseLong(723)", "Delete SimpleName: cfg(724)", "Delete SimpleName: get(725)", "Delete SimpleName: TIMEOUT_PER_PARTITION(726)", "Delete MethodInvocation(727)", "Delete MethodInvocation(728)", "Delete MethodInvocation(729)", "Delete ExpressionStatement(730)", "Delete Block(731)", "Delete IfStatement(732)", "Delete SimpleName: cfg(733)", "Delete SimpleName: containsKey(734)", "Delete SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE(735)", "Delete MethodInvocation(736)", "Delete SimpleName: b(737)", "Delete SimpleName: setNumConcurrentTasksPerInstance(738)", "Delete MethodInvocation(745)", "Delete MethodInvocation(746)", "Delete ExpressionStatement(747)", "Delete Block(748)", "Delete IfStatement(749)", "Delete SimpleName: cfg(750)", "Delete SimpleName: containsKey(751)", "Delete SimpleName: MAX_ATTEMPTS_PER_PARTITION(752)", "Delete MethodInvocation(753)", "Delete SimpleName: b(754)", "Delete SimpleName: setMaxAttemptsPerPartition(755)", "Delete SimpleName: Integer(756)", "Delete SimpleName: parseInt(757)", "Delete SimpleName: cfg(758)", "Delete SimpleName: get(759)", "Delete SimpleName: MAX_ATTEMPTS_PER_PARTITION(760)", "Delete MethodInvocation(761)", "Delete MethodInvocation(762)", "Delete MethodInvocation(763)", "Delete ExpressionStatement(764)", "Delete Block(765)", "Delete IfStatement(766)", "Delete SimpleName: b(767)", "Delete ReturnStatement(768)", "Delete Block(769)", "Delete SimpleName: Builder(772)", "Delete SimpleType: Builder(773)", "Delete SimpleName: setWorkflow(774)", "Delete SimpleName: String(775)", "Delete SimpleType: String(776)", "Delete SimpleName: v(777)", "Delete SingleVariableDeclaration(778)", "Delete SimpleName: _workflow(779)", "Delete SimpleName: v(780)", "Delete Assignment: =(781)", "Delete ExpressionStatement(782)", "Delete ThisExpression(783)", "Delete ReturnStatement(784)", "Delete SimpleName: _targetPartitionStates(836)", "Delete MethodInvocation(840)", "Delete Assignment: =(841)", "Delete SimpleName: _commandConfig(871)", "Delete SimpleName: v(872)", "Delete Assignment: =(873)", "Delete ExpressionStatement(874)", "Delete ThisExpression(875)", "Delete PrimitiveType: int(913)", "Delete SimpleName: _targetResource(927)", "Delete NullLiteral(928)", "Delete InfixExpression: ==(929)", "Delete SimpleName: IllegalArgumentException(930)", "Delete SimpleType: IllegalArgumentException(931)", "Delete SimpleName: String(932)", "Delete StringLiteral: \"%s cannot be null\"(934)", "Delete SimpleName: TARGET_RESOURCE(935)", "Delete MethodInvocation(936)", "Delete ClassInstanceCreation(937)", "Delete ThrowStatement(938)", "Delete Block(939)", "Delete IfStatement(940)", "Delete SimpleName: _targetPartitionStates(941)", "Delete NullLiteral(942)", "Delete InfixExpression: !=(943)", "Delete SimpleName: _targetPartitionStates(944)", "Delete SimpleName: isEmpty(945)", "Delete MethodInvocation(946)", "Delete InfixExpression: &&(947)", "Delete SimpleName: IllegalArgumentException(948)", "Delete SimpleType: IllegalArgumentException(949)", "Delete SimpleName: format(951)", "Delete StringLiteral: \"%s cannot be an empty set\"(952)", "Delete SimpleName: TARGET_PARTITION_STATES(953)", "Delete MethodInvocation(954)", "Delete ClassInstanceCreation(955)", "Delete ThrowStatement(956)", "Delete Block(957)", "Delete IfStatement(958)", "Delete SimpleName: _command(959)", "Delete NullLiteral(960)", "Delete InfixExpression: ==(961)", "Delete SimpleName: IllegalArgumentException(962)", "Delete SimpleType: IllegalArgumentException(963)", "Delete SimpleName: String(964)", "Delete StringLiteral: \"%s cannot be null\"(966)", "Delete SimpleName: COMMAND(967)", "Delete MethodInvocation(968)", "Delete ClassInstanceCreation(969)", "Delete ThrowStatement(970)", "Delete Block(971)", "Delete IfStatement(972)", "Delete SimpleName: _timeoutPerPartition(973)", "Delete NumberLiteral: 0(974)", "Delete InfixExpression: <(975)", "Delete SimpleName: IllegalArgumentException(976)", "Delete SimpleType: IllegalArgumentException(977)", "Delete SimpleName: format(979)", "Delete StringLiteral: \"%s has invalid value %s\"(980)", "Delete SimpleName: TIMEOUT_PER_PARTITION(981)", "Delete SimpleName: _timeoutPerPartition(982)", "Delete MethodInvocation(983)", "Delete ClassInstanceCreation(984)", "Delete ThrowStatement(985)", "Delete Block(986)", "Delete IfStatement(987)", "Delete SimpleName: _numConcurrentTasksPerInstance(988)", "Delete NumberLiteral: 1(989)", "Delete InfixExpression: <(990)", "Delete SimpleName: IllegalArgumentException(991)", "Delete SimpleType: IllegalArgumentException(992)", "Delete SimpleName: String(993)", "Delete SimpleName: format(994)", "Delete StringLiteral: \"%s has invalid value %s\"(995)", "Delete SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE(996)", "Delete SimpleName: _numConcurrentTasksPerInstance(997)", "Delete MethodInvocation(998)", "Delete ClassInstanceCreation(999)", "Delete ThrowStatement(1000)", "Delete Block(1001)", "Delete IfStatement(1002)", "Delete SimpleName: _maxAttemptsPerPartition(1003)", "Delete NumberLiteral: 1(1004)", "Delete InfixExpression: <(1005)", "Delete SimpleName: IllegalArgumentException(1006)", "Delete SimpleType: IllegalArgumentException(1007)", "Delete SimpleName: String(1008)", "Delete SimpleName: format(1009)", "Delete StringLiteral: \"%s has invalid value %s\"(1010)", "Delete SimpleName: MAX_ATTEMPTS_PER_PARTITION(1011)", "Delete SimpleName: _maxAttemptsPerPartition(1012)", "Delete MethodInvocation(1013)", "Delete ClassInstanceCreation(1014)", "Delete ThrowStatement(1015)", "Delete Block(1016)", "Delete IfStatement(1017)", "Delete SimpleName: _workflow(1018)", "Delete NullLiteral(1019)", "Delete InfixExpression: ==(1020)", "Delete SimpleName: IllegalArgumentException(1021)", "Delete SimpleType: IllegalArgumentException(1022)", "Delete SimpleName: String(1023)", "Delete SimpleName: format(1024)", "Delete StringLiteral: \"%s cannot be null\"(1025)", "Delete SimpleName: WORKFLOW_ID(1026)", "Delete MethodInvocation(1027)", "Delete ClassInstanceCreation(1028)", "Delete ThrowStatement(1029)", "Delete Block(1030)", "Delete IfStatement(1031)", "Delete TextElement: The set of the target partition states. The value must be a comma-separated list of partition(51)", "Delete TextElement: states.(52)", "Delete TagElement(53)", "Delete Javadoc(54)", "Delete Modifier: static(56)", "Delete SimpleType: String(59)", "Delete SimpleName: TARGET_PARTITION_STATES(60)", "Delete StringLiteral: \"TargetPartitionStates\"(61)", "Delete VariableDeclarationFragment(62)", "Delete FieldDeclaration(63)", "Delete TextElement: The set of the target partition ids. The value must be a comma-separated list of partition ids.(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: public(67)", "Delete Modifier: static(68)", "Delete Modifier: final(69)", "Delete SimpleType: String(71)", "Delete SimpleName: TARGET_PARTITIONS(72)", "Delete StringLiteral: \"TargetPartitions\"(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete TextElement: The command that is to be run by participants. (76)", "Delete TagElement(77)", "Delete Javadoc(78)", "Delete Modifier: public(79)", "Delete Modifier: static(80)", "Delete Modifier: final(81)", "Delete SimpleType: String(83)", "Delete FieldDeclaration(87)", "Delete Javadoc(90)", "Delete Modifier: public(91)", "Delete Modifier: static(92)", "Delete Modifier: final(93)", "Delete SimpleName: String(94)", "Delete SimpleType: String(95)", "Delete SimpleName: COMMAND_CONFIG(96)", "Delete StringLiteral: \"CommandConfig\"(97)", "Delete VariableDeclarationFragment(98)", "Delete FieldDeclaration(99)", "Delete TagElement(101)", "Delete Javadoc(102)", "Delete Modifier: public(103)", "Delete Modifier: static(104)", "Delete Modifier: final(105)", "Delete SimpleName: String(106)", "Delete SimpleType: String(107)", "Delete SimpleName: TIMEOUT_PER_PARTITION(108)", "Delete StringLiteral: \"TimeoutPerPartition\"(109)", "Delete VariableDeclarationFragment(110)", "Delete FieldDeclaration(111)", "Delete TagElement(113)", "Delete Javadoc(114)", "Delete Modifier: public(115)", "Delete Modifier: static(116)", "Delete Modifier: final(117)", "Delete SimpleName: String(118)", "Delete SimpleType: String(119)", "Delete SimpleName: MAX_ATTEMPTS_PER_PARTITION(120)", "Delete StringLiteral: \"MaxAttemptsPerPartition\"(121)", "Delete VariableDeclarationFragment(122)", "Delete FieldDeclaration(123)", "Delete TagElement(125)", "Delete Javadoc(126)", "Delete Modifier: public(127)", "Delete Modifier: static(128)", "Delete Modifier: final(129)", "Delete SimpleName: String(130)", "Delete SimpleType: String(131)", "Delete SimpleName: NUM_CONCURRENT_TASKS_PER_INSTANCE(132)", "Delete StringLiteral: \"ConcurrentTasksPerInstance\"(133)", "Delete VariableDeclarationFragment(134)", "Delete FieldDeclaration(135)", "Delete Modifier: public(136)", "Delete Modifier: static(137)", "Delete Modifier: final(138)", "Delete PrimitiveType: long(139)", "Delete SimpleName: DEFAULT_TIMEOUT_PER_PARTITION(140)", "Delete NumberLiteral: 60(141)", "Delete NumberLiteral: 60(142)", "Delete NumberLiteral: 1000(143)", "Delete InfixExpression: *(144)", "Delete VariableDeclarationFragment(145)", "Delete FieldDeclaration(146)", "Delete Modifier: public(147)", "Delete Modifier: static(148)", "Delete Modifier: final(149)", "Delete PrimitiveType: int(150)", "Delete SimpleName: DEFAULT_MAX_ATTEMPTS_PER_PARTITION(151)", "Delete NumberLiteral: 10(152)", "Delete VariableDeclarationFragment(153)", "Delete FieldDeclaration(154)", "Delete Modifier: public(155)", "Delete Modifier: static(156)", "Delete Modifier: final(157)", "Delete PrimitiveType: int(158)", "Delete SimpleName: DEFAULT_NUM_CONCURRENT_TASKS_PER_INSTANCE(159)", "Delete NumberLiteral: 1(160)", "Delete VariableDeclarationFragment(161)", "Delete FieldDeclaration(162)", "Delete Modifier: private(163)", "Delete Modifier: final(164)", "Delete SimpleName: _workflow(167)", "Delete VariableDeclarationFragment(168)", "Delete FieldDeclaration(169)", "Delete Modifier: private(170)", "Delete Modifier: final(171)", "Delete SimpleName: _targetResource(174)", "Delete VariableDeclarationFragment(175)", "Delete FieldDeclaration(176)", "Delete Modifier: private(177)", "Delete Modifier: final(178)", "Delete SimpleName: List(179)", "Delete SimpleType: List(180)", "Delete SimpleName: Integer(181)", "Delete SimpleType: Integer(182)", "Delete ParameterizedType: List<Integer>(183)", "Delete SimpleName: _targetPartitions(184)", "Delete VariableDeclarationFragment(185)", "Delete FieldDeclaration(186)", "Delete Modifier: private(187)", "Delete Modifier: final(188)", "Delete SimpleName: Set(189)", "Delete SimpleType: Set(190)", "Delete SimpleName: String(191)", "Delete SimpleType: String(192)", "Delete ParameterizedType: Set<String>(193)", "Delete SimpleName: _targetPartitionStates(194)", "Delete VariableDeclarationFragment(195)", "Delete FieldDeclaration(196)", "Delete Modifier: private(197)", "Delete Modifier: final(198)", "Delete SimpleName: String(199)", "Delete SimpleType: String(200)", "Delete SimpleName: _command(201)", "Delete VariableDeclarationFragment(202)", "Delete FieldDeclaration(203)", "Delete Modifier: private(204)", "Delete Modifier: final(205)", "Delete SimpleName: _commandConfig(208)", "Delete VariableDeclarationFragment(209)", "Delete FieldDeclaration(210)", "Delete Modifier: private(211)", "Delete Modifier: final(212)", "Delete PrimitiveType: long(213)", "Delete SimpleName: _timeoutPerPartition(214)", "Delete VariableDeclarationFragment(215)", "Delete FieldDeclaration(216)", "Delete Modifier: private(217)", "Delete Modifier: final(218)", "Delete PrimitiveType: int(219)", "Delete SimpleName: _numConcurrentTasksPerInstance(220)", "Delete VariableDeclarationFragment(221)", "Delete FieldDeclaration(222)", "Delete Modifier: private(223)", "Delete Modifier: final(224)", "Delete PrimitiveType: int(225)", "Delete SimpleName: _maxAttemptsPerPartition(226)", "Delete VariableDeclarationFragment(227)", "Delete FieldDeclaration(228)", "Delete Modifier: private(229)", "Delete SimpleName: targetResource(237)", "Delete SingleVariableDeclaration(238)", "Delete SimpleName: List(239)", "Delete SimpleType: List(240)", "Delete SimpleName: Integer(241)", "Delete SimpleType: Integer(242)", "Delete ParameterizedType: List<Integer>(243)", "Delete SimpleName: targetPartitions(244)", "Delete SingleVariableDeclaration(245)", "Delete SimpleName: commandConfig(259)", "Delete SingleVariableDeclaration(260)", "Delete PrimitiveType: long(261)", "Delete SimpleName: timeoutPerPartition(262)", "Delete SingleVariableDeclaration(263)", "Delete PrimitiveType: int(264)", "Delete SimpleName: numConcurrentTasksPerInstance(265)", "Delete SingleVariableDeclaration(266)", "Delete PrimitiveType: int(267)", "Delete SimpleName: maxAttemptsPerPartition(268)", "Delete SingleVariableDeclaration(269)", "Delete SimpleName: _workflow(270)", "Delete SimpleName: workflow(271)", "Delete Assignment: =(272)", "Delete ExpressionStatement(273)", "Delete SimpleName: _targetResource(274)", "Delete SimpleName: targetResource(275)", "Delete Assignment: =(276)", "Delete ExpressionStatement(277)", "Delete SimpleName: _targetPartitions(278)", "Delete SimpleName: targetPartitions(279)", "Delete Assignment: =(280)", "Delete ExpressionStatement(281)", "Delete SimpleName: _targetPartitionStates(282)", "Delete SimpleName: targetPartitionStates(283)", "Delete Assignment: =(284)", "Delete ExpressionStatement(285)", "Delete SimpleName: _command(286)", "Delete SimpleName: command(287)", "Delete Assignment: =(288)", "Delete ExpressionStatement(289)", "Delete SimpleName: _commandConfig(290)", "Delete SimpleName: commandConfig(291)", "Delete Assignment: =(292)", "Delete ExpressionStatement(293)", "Delete SimpleName: _timeoutPerPartition(294)", "Delete SimpleName: timeoutPerPartition(295)", "Delete Assignment: =(296)", "Delete ExpressionStatement(297)", "Delete SimpleName: _numConcurrentTasksPerInstance(298)", "Delete SimpleName: numConcurrentTasksPerInstance(299)", "Delete Assignment: =(300)", "Delete ExpressionStatement(301)", "Delete SimpleName: _maxAttemptsPerPartition(302)", "Delete SimpleName: maxAttemptsPerPartition(303)", "Delete Assignment: =(304)", "Delete ExpressionStatement(305)", "Delete Block(306)", "Delete MethodDeclaration(307)", "Delete Modifier: public(308)", "Delete SimpleName: String(309)", "Delete SimpleType: String(310)", "Delete SimpleName: getWorkflow(311)", "Delete SimpleName: _workflow(312)", "Delete NullLiteral(313)", "Delete InfixExpression: ==(314)", "Delete QualifiedName: Workflow.UNSPECIFIED(315)", "Delete SimpleName: _workflow(316)", "Delete ConditionalExpression(317)", "Delete ReturnStatement(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete Modifier: public(321)", "Delete SimpleName: String(322)", "Delete SimpleType: String(323)", "Delete SimpleName: getTargetResource(324)", "Delete SimpleName: _targetResource(325)", "Delete ReturnStatement(326)", "Delete Block(327)", "Delete MethodDeclaration(328)", "Delete Modifier: public(329)", "Delete SimpleName: List(330)", "Delete SimpleType: List(331)", "Delete SimpleName: Integer(332)", "Delete SimpleType: Integer(333)", "Delete ParameterizedType: List<Integer>(334)", "Delete SimpleName: getTargetPartitions(335)", "Delete SimpleName: _targetPartitions(336)", "Delete ReturnStatement(337)", "Delete Block(338)", "Delete MethodDeclaration(339)", "Delete Modifier: public(340)", "Delete SimpleName: Set(341)", "Delete SimpleType: Set(342)", "Delete SimpleName: String(343)", "Delete SimpleType: String(344)", "Delete ParameterizedType: Set<String>(345)", "Delete SimpleName: getTargetPartitionStates(346)", "Delete SimpleName: _targetPartitionStates(347)", "Delete ReturnStatement(348)", "Delete Block(349)", "Delete MethodDeclaration(350)", "Delete Modifier: public(351)", "Delete SimpleName: String(352)", "Delete SimpleType: String(353)", "Delete SimpleName: getCommand(354)", "Delete SimpleName: _command(355)", "Delete ReturnStatement(356)", "Delete Block(357)", "Delete MethodDeclaration(358)", "Delete Modifier: public(359)", "Delete SimpleName: String(360)", "Delete SimpleType: String(361)", "Delete SimpleName: getCommandConfig(362)", "Delete SimpleName: _commandConfig(363)", "Delete ReturnStatement(364)", "Delete Block(365)", "Delete MethodDeclaration(366)", "Delete Modifier: public(367)", "Delete PrimitiveType: long(368)", "Delete SimpleName: getTimeoutPerPartition(369)", "Delete SimpleName: _timeoutPerPartition(370)", "Delete ReturnStatement(371)", "Delete Block(372)", "Delete MethodDeclaration(373)", "Delete Modifier: public(374)", "Delete PrimitiveType: int(375)", "Delete SimpleName: getNumConcurrentTasksPerInstance(376)", "Delete SimpleName: _numConcurrentTasksPerInstance(377)", "Delete ReturnStatement(378)", "Delete Block(379)", "Delete MethodDeclaration(380)", "Delete Modifier: public(381)", "Delete PrimitiveType: int(382)", "Delete SimpleName: getMaxAttemptsPerPartition(383)", "Delete SimpleName: _maxAttemptsPerPartition(384)", "Delete ReturnStatement(385)", "Delete Block(386)", "Delete MethodDeclaration(387)", "Delete Modifier: public(388)", "Delete SimpleName: getResourceConfigMap(396)", "Delete SimpleName: cfgMap(404)", "Delete ParameterizedType: HashMap<String,String>(411)", "Delete ClassInstanceCreation(412)", "Delete VariableDeclarationFragment(413)", "Delete VariableDeclarationStatement(414)", "Delete SimpleName: cfgMap(415)", "Delete SimpleName: put(416)", "Delete QualifiedName: TaskConfig.WORKFLOW_ID(417)", "Delete SimpleName: _workflow(418)", "Delete MethodInvocation(419)", "Delete ExpressionStatement(420)", "Delete SimpleName: cfgMap(421)", "Delete SimpleName: put(422)", "Delete QualifiedName: TaskConfig.COMMAND(423)", "Delete SimpleName: _command(424)", "Delete MethodInvocation(425)", "Delete ExpressionStatement(426)", "Delete SimpleName: cfgMap(427)", "Delete SimpleName: put(428)", "Delete QualifiedName: TaskConfig.COMMAND_CONFIG(429)", "Delete SimpleName: _commandConfig(430)", "Delete MethodInvocation(431)", "Delete ExpressionStatement(432)", "Delete SimpleName: cfgMap(433)", "Delete SimpleName: put(434)", "Delete QualifiedName: TaskConfig.TARGET_RESOURCE(435)", "Delete SimpleName: _targetResource(436)", "Delete MethodInvocation(437)", "Delete ExpressionStatement(438)", "Delete SimpleName: cfgMap(484)", "Delete ReturnStatement(485)", "Delete Block(486)", "Delete MethodDeclaration(487)", "Delete TagElement: @link(490)", "Delete TagElement(492)", "Delete Javadoc(493)", "Delete Modifier: public(494)", "Delete Modifier: static(495)", "Delete SimpleName: Builder(496)", "Delete Modifier: private(497)", "Delete SimpleName: String(498)", "Delete SimpleType: String(499)", "Delete SimpleName: _workflow(500)", "Delete VariableDeclarationFragment(501)", "Delete FieldDeclaration(502)", "Delete Modifier: private(503)", "Delete SimpleName: String(504)", "Delete SimpleType: String(505)", "Delete SimpleName: _targetResource(506)", "Delete VariableDeclarationFragment(507)", "Delete FieldDeclaration(508)", "Delete Modifier: private(509)", "Delete SimpleName: List(510)", "Delete SimpleType: List(511)", "Delete SimpleName: Integer(512)", "Delete SimpleType: Integer(513)", "Delete ParameterizedType: List<Integer>(514)", "Delete SimpleName: _targetPartitions(515)", "Delete VariableDeclarationFragment(516)", "Delete FieldDeclaration(517)", "Delete Modifier: private(518)", "Delete SimpleName: Set(519)", "Delete SimpleType: Set(520)", "Delete SimpleName: String(521)", "Delete SimpleType: String(522)", "Delete ParameterizedType: Set<String>(523)", "Delete SimpleName: _targetPartitionStates(524)", "Delete VariableDeclarationFragment(525)", "Delete FieldDeclaration(526)", "Delete Modifier: private(527)", "Delete SimpleName: String(528)", "Delete SimpleType: String(529)", "Delete SimpleName: _command(530)", "Delete VariableDeclarationFragment(531)", "Delete FieldDeclaration(532)", "Delete Modifier: private(533)", "Delete SimpleName: String(534)", "Delete SimpleType: String(535)", "Delete SimpleName: _commandConfig(536)", "Delete VariableDeclarationFragment(537)", "Delete FieldDeclaration(538)", "Delete Modifier: private(539)", "Delete PrimitiveType: long(540)", "Delete SimpleName: _timeoutPerPartition(541)", "Delete SimpleName: DEFAULT_TIMEOUT_PER_PARTITION(542)", "Delete VariableDeclarationFragment(543)", "Delete FieldDeclaration(544)", "Delete Modifier: private(545)", "Delete PrimitiveType: int(546)", "Delete SimpleName: _numConcurrentTasksPerInstance(547)", "Delete SimpleName: DEFAULT_NUM_CONCURRENT_TASKS_PER_INSTANCE(548)", "Delete VariableDeclarationFragment(549)", "Delete FieldDeclaration(550)", "Delete Modifier: private(551)", "Delete PrimitiveType: int(552)", "Delete SimpleName: _maxAttemptsPerPartition(553)", "Delete SimpleName: DEFAULT_MAX_ATTEMPTS_PER_PARTITION(554)", "Delete VariableDeclarationFragment(555)", "Delete FieldDeclaration(556)", "Delete SimpleName: Builder(788)", "Delete SimpleType: Builder(789)", "Delete SimpleName: setTargetResource(790)", "Delete SimpleName: String(791)", "Delete SimpleType: String(792)", "Delete SimpleName: v(793)", "Delete SingleVariableDeclaration(794)", "Delete SimpleName: _targetResource(795)", "Delete SimpleName: v(796)", "Delete Assignment: =(797)", "Delete ExpressionStatement(798)", "Delete ThisExpression(799)", "Delete ReturnStatement(800)", "Delete Block(801)", "Delete MethodDeclaration(802)", "Delete Modifier: public(803)", "Delete SimpleType: Builder(805)", "Delete SimpleName: setTargetPartitions(806)", "Delete SimpleName: List(807)", "Delete SimpleType: List(808)", "Delete SimpleType: Integer(810)", "Delete ParameterizedType: List<Integer>(811)", "Delete SimpleName: v(812)", "Delete SingleVariableDeclaration(813)", "Delete SimpleName: _targetPartitions(814)", "Delete SimpleName: v(817)", "Delete MethodInvocation(818)", "Delete Assignment: =(819)", "Delete ExpressionStatement(820)", "Delete ThisExpression(821)", "Delete ReturnStatement(822)", "Delete Block(823)", "Delete MethodDeclaration(824)", "Delete Modifier: public(825)", "Delete SimpleName: Builder(826)", "Delete SimpleType: Builder(827)", "Delete SimpleName: setTargetPartitionStates(828)", "Delete SimpleType: Set(830)", "Delete SimpleName: String(831)", "Delete SimpleType: String(832)", "Delete ParameterizedType: Set<String>(833)", "Delete SimpleName: v(834)", "Delete SingleVariableDeclaration(835)", "Delete ThisExpression(843)", "Delete ReturnStatement(844)", "Delete Block(845)", "Delete MethodDeclaration(846)", "Delete Modifier: public(847)", "Delete SimpleName: Builder(848)", "Delete SimpleType: Builder(849)", "Delete SimpleName: setCommand(850)", "Delete SimpleName: String(851)", "Delete SimpleType: String(852)", "Delete SimpleName: v(853)", "Delete SingleVariableDeclaration(854)", "Delete SimpleName: _command(855)", "Delete SimpleName: v(856)", "Delete Assignment: =(857)", "Delete ExpressionStatement(858)", "Delete ThisExpression(859)", "Delete ReturnStatement(860)", "Delete Block(861)", "Delete MethodDeclaration(862)", "Delete MethodDeclaration(878)", "Delete Modifier: public(879)", "Delete SimpleName: Builder(880)", "Delete SimpleType: Builder(881)", "Delete SimpleName: setTimeoutPerPartition(882)", "Delete PrimitiveType: long(883)", "Delete SimpleName: v(884)", "Delete SingleVariableDeclaration(885)", "Delete SimpleName: _timeoutPerPartition(886)", "Delete SimpleName: v(887)", "Delete Assignment: =(888)", "Delete ExpressionStatement(889)", "Delete ThisExpression(890)", "Delete ReturnStatement(891)", "Delete Block(892)", "Delete MethodDeclaration(893)", "Delete SimpleName: Builder(895)", "Delete SimpleType: Builder(896)", "Delete SimpleName: setNumConcurrentTasksPerInstance(897)", "Delete PrimitiveType: int(898)", "Delete SimpleName: v(899)", "Delete SingleVariableDeclaration(900)", "Delete SimpleName: _numConcurrentTasksPerInstance(901)", "Delete SimpleName: v(902)", "Delete Assignment: =(903)", "Delete ExpressionStatement(904)", "Delete ThisExpression(905)", "Delete ReturnStatement(906)", "Delete Block(907)", "Delete MethodDeclaration(908)", "Delete SimpleName: _maxAttemptsPerPartition(916)", "Delete SimpleName: v(917)", "Delete Assignment: =(918)", "Delete ExpressionStatement(919)", "Delete ThisExpression(920)", "Delete ReturnStatement(921)", "Delete Block(922)", "Delete MethodDeclaration(923)", "Delete Modifier: private(924)", "Delete PrimitiveType: void(925)", "Delete SimpleName: validate(926)", "Delete MethodDeclaration(1033)", "Delete Modifier: private(1034)", "Delete Modifier: static(1035)", "Delete SimpleName: List(1036)", "Delete SimpleType: List(1037)", "Delete SimpleName: Integer(1038)", "Delete SimpleType: Integer(1039)", "Delete ParameterizedType: List<Integer>(1040)", "Delete SimpleName: csvToIntList(1041)", "Delete SimpleName: String(1042)", "Delete SimpleType: String(1043)", "Delete SimpleName: csv(1044)", "Delete SingleVariableDeclaration(1045)", "Delete SimpleName: String(1046)", "Delete SimpleType: String(1047)", "Delete Dimension(1048)", "Delete ArrayType: String[](1049)", "Delete SimpleName: vals(1050)", "Delete SimpleName: csv(1051)", "Delete SimpleName: split(1052)", "Delete StringLiteral: \",\"(1053)", "Delete MethodInvocation(1054)", "Delete VariableDeclarationFragment(1055)", "Delete VariableDeclarationStatement(1056)", "Delete SimpleName: List(1057)", "Delete SimpleType: List(1058)", "Delete SimpleName: Integer(1059)", "Delete SimpleType: Integer(1060)", "Delete ParameterizedType: List<Integer>(1061)", "Delete SimpleName: l(1062)", "Delete SimpleName: ArrayList(1063)", "Delete SimpleType: ArrayList(1064)", "Delete SimpleName: Integer(1065)", "Delete SimpleType: Integer(1066)", "Delete ParameterizedType: ArrayList<Integer>(1067)", "Delete ClassInstanceCreation(1068)", "Delete VariableDeclarationFragment(1069)", "Delete VariableDeclarationStatement(1070)", "Delete SimpleName: String(1071)", "Delete SimpleType: String(1072)", "Delete SimpleName: v(1073)", "Delete SingleVariableDeclaration(1074)", "Delete SimpleName: vals(1075)", "Delete SimpleName: l(1076)", "Delete SimpleName: add(1077)", "Delete SimpleName: Integer(1078)", "Delete SimpleName: parseInt(1079)", "Delete SimpleName: v(1080)", "Delete MethodInvocation(1081)", "Delete MethodInvocation(1082)", "Delete ExpressionStatement(1083)", "Delete Block(1084)", "Delete EnhancedForStatement(1085)", "Delete SimpleName: l(1086)", "Delete ReturnStatement(1087)", "Delete Block(1088)", "Delete MethodDeclaration(1089)", "Delete TypeDeclaration: class(1090)"]}}, {"TaskConstants_cluster": {"actions": []}}, {"TaskConstants_diff": {"operations": []}}, {"TaskContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.helix.task"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.TreeMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.helix.HelixProperty"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.helix.ZNRecord", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: map", "DEL SimpleName: Long", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: getPartitionState", "DEL VariableDeclarationStatement", "DEL SimpleName: str", "DEL MethodInvocation", "DEL StringLiteral: \"STATE\"", "DEL SimpleName: setMapField", "DEL SimpleName: HelixProperty", "DEL SimpleType: String", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: map", "DEL Block", "DEL IfStatement", "DEL SimpleName: put", "DEL SimpleName: tStr", "DEL SimpleName: valueOf", "DEL ReturnStatement", "DEL SimpleName: parseLong", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL SimpleName: map", "DEL SimpleName: String", "DEL SimpleName: TaskContext", "DEL ParameterizedType: Map<String,String>", "DEL StringLiteral: \"START_TIME\"", "DEL SimpleName: FINISH_TIME", "DEL SimpleName: parseLong", "DEL PrimitiveType: int", "DEL SimpleName: name", "DEL MethodInvocation", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: String", "DEL SimpleName: START_TIME", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: getPartitionFinishTime", "DEL ReturnStatement", "DEL SimpleName: str", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,String>", "DEL ExpressionStatement", "DEL Block", "DEL Modifier: public", "DEL NullLiteral", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: pStr", "DEL SimpleName: setPartitionNumAttempts", "DEL SimpleName: String", "DEL SimpleName: valueOf", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleType: ZNRecord", "DEL SimpleName: n", "DEL SimpleType: String", "DEL MethodInvocation", "DEL StringLiteral: \"NUM_ATTEMPTS\"", "DEL TextElement:  in the", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL Assignment: +=", "DEL SimpleName: String", "DEL SimpleName: getPartitionNumAttempts", "DEL SimpleName: t", "DEL SimpleType: Map", "DEL SimpleType: String", "DEL SimpleName: n", "DEL SimpleName: _record", "DEL SimpleName: TaskPartitionState", "DEL SimpleName: String", "DEL SimpleName: map", "DEL SimpleName: getSimpleField", "DEL SimpleName: record", "DEL TagElement", "DEL SimpleName: pStr", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: p", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: map", "DEL SimpleType: Map", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: PARTITION_STATE", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Modifier: static", "DEL SimpleName: String", "DEL SimpleName: pStr", "DEL ExpressionStatement", "DEL SimpleName: map", "DEL SimpleType: String", "DEL SimpleName: getMapField", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: ZNRecord", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: valueOf", "DEL VariableDeclarationFragment", "DEL SimpleName: _record", "DEL SimpleName: p", "DEL SimpleName: _record", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: String", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL NumberLiteral: 1", "DEL SimpleName: TreeMap", "DEL Assignment: =", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: map", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL SimpleName: Map", "DEL ThisExpression", "DEL SimpleName: _record", "DEL SimpleName: n", "DEL SimpleName: Integer", "DEL SimpleName: valueOf", "DEL SimpleName: TaskRebalancer", "DEL SimpleName: map", "DEL PrefixExpression: -", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: map", "DEL MethodDeclaration", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: map", "DEL SimpleName: START_TIME", "DEL SimpleName: String", "DEL SimpleType: TreeMap", "DEL SimpleName: getStartTime", "DEL SimpleName: NUM_ATTEMPTS", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: Map", "DEL IfStatement", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleType: TaskPartitionState", "DEL SimpleName: pId", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: map", "DEL Modifier: public", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL SimpleName: p", "DEL SimpleName: String", "DEL SimpleName: getMapField", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: setStartTime", "DEL IfStatement", "DEL SimpleName: get", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: p", "DEL StringLiteral: \"FINISH_TIME\"", "DEL NumberLiteral: 0", "DEL SimpleName: nStr", "DEL TagElement: @link", "DEL TextElement: Provides a typed interface to the context information stored by ", "DEL PrimitiveType: int", "DEL SimpleName: valueOf", "DEL SimpleName: TreeMap", "DEL MethodInvocation", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL Modifier: final", "DEL Modifier: static", "DEL IfStatement", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: pStr", "DEL NullLiteral", "DEL PrefixExpression: -", "DEL SimpleName: pId", "DEL ParameterizedType: TreeMap<String,String>", "DEL SimpleName: p", "DEL SimpleName: t", "DEL SimpleType: String", "DEL SimpleName: map", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: _record", "DEL Modifier: final", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: pStr", "DEL IfStatement", "DEL SimpleName: setMapField", "DEL SimpleName: getPartitionNumAttempts", "DEL SimpleName: getMapField", "DEL VariableDeclarationFragment", "DEL ParameterizedType: TreeMap<String,String>", "DEL SimpleName: p", "DEL SimpleName: put", "DEL PrimitiveType: void", "DEL ParameterizedType: Map<String,String>", "DEL NullLiteral", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: setPartitionState", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: map", "DEL PrefixExpression: -", "DEL SimpleName: _record", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: START_TIME", "DEL SimpleName: FINISH_TIME", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL SimpleName: valueOf", "DEL SimpleName: p", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: tStr", "DEL PrefixExpression: -", "DEL SimpleName: map", "DEL Modifier: static", "DEL SimpleType: String", "DEL SimpleName: _record", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: tStr", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: _record", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: map", "DEL SimpleName: PARTITION_STATE", "DEL SimpleType: String", "DEL SimpleName: n", "DEL PrimitiveType: int", "DEL SimpleName: tStr", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleType: Map", "DEL SimpleName: setPartitionNumAttempts", "DEL ClassInstanceCreation", "DEL SimpleName: TreeMap", "DEL SimpleName: p", "DEL SimpleName: _record", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: t", "DEL Modifier: public", "DEL SimpleName: pId", "DEL ReturnStatement", "DEL Block", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SimpleName: getMapField", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL SimpleType: String", "DEL Block", "DEL Block", "DEL SimpleName: String", "DEL Modifier: public", "DEL Modifier: final", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleType: TaskPartitionState", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleType: Map", "DEL ExpressionStatement", "DEL SimpleName: tStr", "DEL SuperConstructorInvocation", "DEL PrimitiveType: long", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: incrementNumAttempts", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: tStr", "DEL PrimitiveType: long", "DEL SimpleName: map", "DEL SimpleName: TaskContext", "DEL SimpleName: get", "DEL NullLiteral", "DEL Block", "DEL SimpleName: str", "DEL MethodInvocation", "DEL SimpleType: String", "DEL PrimitiveType: long", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleType: String", "DEL SimpleName: get", "DEL SimpleName: p", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: map", "DEL SimpleName: valueOf", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: s", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: setPartitionFinishTime", "DEL FieldDeclaration", "DEL SimpleType: TreeMap", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: pStr", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: nStr", "DEL NumberLiteral: 1", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: pStr", "DEL SimpleName: Map", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: n", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL SimpleName: n", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: getMapField", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: map", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL SimpleName: Long", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleName: map", "DEL SimpleName: map", "DEL SimpleName: pStr", "DEL SimpleName: TaskPartitionState", "DEL SimpleName: put", "DEL NullLiteral", "DEL SimpleType: Map", "DEL Block", "DEL SimpleName: setMapField", "DEL SimpleType: String", "DEL SimpleName: setSimpleField", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: PARTITION_STATE", "DEL SimpleName: record", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: _record", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: n", "DEL NullLiteral", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: NUM_ATTEMPTS", "DEL SimpleType: String", "DEL SimpleName: pStr", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: Map", "DEL SimpleName: p", "DEL Block", "DEL Block", "DEL Block", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL Block", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL SimpleName: map", "DEL Modifier: static", "DEL ParameterizedType: Map<String,String>", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: Map", "DEL SimpleName: valueOf", "DEL SimpleName: map", "DEL SimpleName: t", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getMapField", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: FINISH_TIME", "DEL IfStatement", "DEL SimpleName: map", "DEL SimpleName: nStr", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Modifier: public", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: p", "DEL SimpleName: map", "DEL NumberLiteral: 1", "DEL SimpleType: String", "DEL SimpleType: TreeMap", "DEL SimpleType: String", "DEL ParameterizedType: TreeMap<String,String>", "DEL MethodDeclaration", "DEL SimpleName: TaskPartitionState", "DEL SingleVariableDeclaration", "DEL SimpleType: Map", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: n", "DEL PrimitiveType: long", "DEL SimpleType: HelixProperty", "DEL PrimitiveType: int", "DEL SimpleName: _record", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: parseInt", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: s", "DEL SimpleName: p", "DEL TextElement: Helix property store.", "DEL InfixExpression: <", "DEL SimpleName: NUM_ATTEMPTS"]}]}}, {"TaskContext_diff": {"operations": ["Delete QualifiedName: org.apache.helix.task(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Map(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.TreeMap(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.helix.HelixProperty(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.helix.ZNRecord(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Provides a typed interface to the context information stored by (10)", "Delete SimpleName: TaskRebalancer(11)", "Delete TagElement: @link(12)", "Delete TextElement:  in the(13)", "Delete TextElement: Helix property store.(14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: TaskContext(18)", "Delete SimpleName: HelixProperty(19)", "Delete SimpleType: HelixProperty(20)", "Delete Modifier: public(21)", "Delete Modifier: static(22)", "Delete Modifier: final(23)", "Delete SimpleName: String(24)", "Delete SimpleType: String(25)", "Delete SimpleName: START_TIME(26)", "Delete StringLiteral: \"START_TIME\"(27)", "Delete VariableDeclarationFragment(28)", "Delete FieldDeclaration(29)", "Delete Modifier: public(30)", "Delete Modifier: static(31)", "Delete Modifier: final(32)", "Delete SimpleName: String(33)", "Delete SimpleType: String(34)", "Delete SimpleName: PARTITION_STATE(35)", "Delete StringLiteral: \"STATE\"(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete Modifier: public(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: String(42)", "Delete SimpleType: String(43)", "Delete SimpleName: NUM_ATTEMPTS(44)", "Delete StringLiteral: \"NUM_ATTEMPTS\"(45)", "Delete VariableDeclarationFragment(46)", "Delete FieldDeclaration(47)", "Delete Modifier: public(48)", "Delete Modifier: static(49)", "Delete Modifier: final(50)", "Delete SimpleName: String(51)", "Delete SimpleType: String(52)", "Delete SimpleName: FINISH_TIME(53)", "Delete StringLiteral: \"FINISH_TIME\"(54)", "Delete VariableDeclarationFragment(55)", "Delete FieldDeclaration(56)", "Delete Modifier: public(57)", "Delete SimpleName: TaskContext(58)", "Delete SimpleName: ZNRecord(59)", "Delete SimpleType: ZNRecord(60)", "Delete SimpleName: record(61)", "Delete SingleVariableDeclaration(62)", "Delete SimpleName: record(63)", "Delete SuperConstructorInvocation(64)", "Delete Block(65)", "Delete MethodDeclaration(66)", "Delete Modifier: public(67)", "Delete PrimitiveType: void(68)", "Delete SimpleName: setStartTime(69)", "Delete PrimitiveType: long(70)", "Delete SimpleName: t(71)", "Delete SingleVariableDeclaration(72)", "Delete SimpleName: _record(73)", "Delete SimpleName: setSimpleField(74)", "Delete SimpleName: START_TIME(75)", "Delete SimpleName: String(76)", "Delete SimpleName: valueOf(77)", "Delete SimpleName: t(78)", "Delete MethodInvocation(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete Block(82)", "Delete MethodDeclaration(83)", "Delete Modifier: public(84)", "Delete PrimitiveType: long(85)", "Delete SimpleName: getStartTime(86)", "Delete SimpleName: String(87)", "Delete SimpleType: String(88)", "Delete SimpleName: tStr(89)", "Delete SimpleName: _record(90)", "Delete SimpleName: getSimpleField(91)", "Delete SimpleName: START_TIME(92)", "Delete MethodInvocation(93)", "Delete VariableDeclarationFragment(94)", "Delete VariableDeclarationStatement(95)", "Delete SimpleName: tStr(96)", "Delete NullLiteral(97)", "Delete InfixExpression: ==(98)", "Delete NumberLiteral: 1(99)", "Delete PrefixExpression: -(100)", "Delete ReturnStatement(101)", "Delete Block(102)", "Delete IfStatement(103)", "Delete SimpleName: Long(104)", "Delete SimpleName: parseLong(105)", "Delete SimpleName: tStr(106)", "Delete MethodInvocation(107)", "Delete ReturnStatement(108)", "Delete Block(109)", "Delete MethodDeclaration(110)", "Delete Modifier: public(111)", "Delete PrimitiveType: void(112)", "Delete SimpleName: setPartitionState(113)", "Delete PrimitiveType: int(114)", "Delete SimpleName: p(115)", "Delete SingleVariableDeclaration(116)", "Delete SimpleName: TaskPartitionState(117)", "Delete SimpleType: TaskPartitionState(118)", "Delete SimpleName: s(119)", "Delete SingleVariableDeclaration(120)", "Delete SimpleName: String(121)", "Delete SimpleType: String(122)", "Delete SimpleName: pStr(123)", "Delete SimpleName: String(124)", "Delete SimpleName: valueOf(125)", "Delete SimpleName: p(126)", "Delete MethodInvocation(127)", "Delete VariableDeclarationFragment(128)", "Delete VariableDeclarationStatement(129)", "Delete SimpleName: Map(130)", "Delete SimpleType: Map(131)", "Delete SimpleName: String(132)", "Delete SimpleType: String(133)", "Delete SimpleName: String(134)", "Delete SimpleType: String(135)", "Delete ParameterizedType: Map<String,String>(136)", "Delete SimpleName: map(137)", "Delete SimpleName: _record(138)", "Delete SimpleName: getMapField(139)", "Delete SimpleName: pStr(140)", "Delete MethodInvocation(141)", "Delete VariableDeclarationFragment(142)", "Delete VariableDeclarationStatement(143)", "Delete SimpleName: map(144)", "Delete NullLiteral(145)", "Delete InfixExpression: ==(146)", "Delete SimpleName: map(147)", "Delete SimpleName: TreeMap(148)", "Delete SimpleType: TreeMap(149)", "Delete SimpleName: String(150)", "Delete SimpleType: String(151)", "Delete SimpleName: String(152)", "Delete SimpleType: String(153)", "Delete ParameterizedType: TreeMap<String,String>(154)", "Delete ClassInstanceCreation(155)", "Delete Assignment: =(156)", "Delete ExpressionStatement(157)", "Delete SimpleName: _record(158)", "Delete SimpleName: setMapField(159)", "Delete SimpleName: pStr(160)", "Delete SimpleName: map(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete Block(164)", "Delete IfStatement(165)", "Delete SimpleName: map(166)", "Delete SimpleName: put(167)", "Delete SimpleName: PARTITION_STATE(168)", "Delete SimpleName: s(169)", "Delete SimpleName: name(170)", "Delete MethodInvocation(171)", "Delete MethodInvocation(172)", "Delete ExpressionStatement(173)", "Delete Block(174)", "Delete MethodDeclaration(175)", "Delete Modifier: public(176)", "Delete SimpleName: TaskPartitionState(177)", "Delete SimpleType: TaskPartitionState(178)", "Delete SimpleName: getPartitionState(179)", "Delete PrimitiveType: int(180)", "Delete SimpleName: p(181)", "Delete SingleVariableDeclaration(182)", "Delete SimpleName: Map(183)", "Delete SimpleType: Map(184)", "Delete SimpleName: String(185)", "Delete SimpleType: String(186)", "Delete SimpleName: String(187)", "Delete SimpleType: String(188)", "Delete ParameterizedType: Map<String,String>(189)", "Delete SimpleName: map(190)", "Delete SimpleName: _record(191)", "Delete SimpleName: getMapField(192)", "Delete SimpleName: String(193)", "Delete SimpleName: valueOf(194)", "Delete SimpleName: p(195)", "Delete MethodInvocation(196)", "Delete MethodInvocation(197)", "Delete VariableDeclarationFragment(198)", "Delete VariableDeclarationStatement(199)", "Delete SimpleName: map(200)", "Delete NullLiteral(201)", "Delete InfixExpression: ==(202)", "Delete NullLiteral(203)", "Delete ReturnStatement(204)", "Delete Block(205)", "Delete IfStatement(206)", "Delete SimpleName: String(207)", "Delete SimpleType: String(208)", "Delete SimpleName: str(209)", "Delete SimpleName: map(210)", "Delete SimpleName: get(211)", "Delete SimpleName: PARTITION_STATE(212)", "Delete MethodInvocation(213)", "Delete VariableDeclarationFragment(214)", "Delete VariableDeclarationStatement(215)", "Delete SimpleName: str(216)", "Delete NullLiteral(217)", "Delete InfixExpression: !=(218)", "Delete SimpleName: TaskPartitionState(219)", "Delete SimpleName: valueOf(220)", "Delete SimpleName: str(221)", "Delete MethodInvocation(222)", "Delete ReturnStatement(223)", "Delete Block(224)", "Delete NullLiteral(225)", "Delete ReturnStatement(226)", "Delete Block(227)", "Delete IfStatement(228)", "Delete Block(229)", "Delete MethodDeclaration(230)", "Delete Modifier: public(231)", "Delete PrimitiveType: void(232)", "Delete SimpleName: setPartitionNumAttempts(233)", "Delete PrimitiveType: int(234)", "Delete SimpleName: p(235)", "Delete SingleVariableDeclaration(236)", "Delete PrimitiveType: int(237)", "Delete SimpleName: n(238)", "Delete SingleVariableDeclaration(239)", "Delete SimpleName: String(240)", "Delete SimpleType: String(241)", "Delete SimpleName: pStr(242)", "Delete SimpleName: String(243)", "Delete SimpleName: valueOf(244)", "Delete SimpleName: p(245)", "Delete MethodInvocation(246)", "Delete VariableDeclarationFragment(247)", "Delete VariableDeclarationStatement(248)", "Delete SimpleName: Map(249)", "Delete SimpleType: Map(250)", "Delete SimpleName: String(251)", "Delete SimpleType: String(252)", "Delete SimpleName: String(253)", "Delete SimpleType: String(254)", "Delete ParameterizedType: Map<String,String>(255)", "Delete SimpleName: map(256)", "Delete SimpleName: _record(257)", "Delete SimpleName: getMapField(258)", "Delete SimpleName: pStr(259)", "Delete MethodInvocation(260)", "Delete VariableDeclarationFragment(261)", "Delete VariableDeclarationStatement(262)", "Delete SimpleName: map(263)", "Delete NullLiteral(264)", "Delete InfixExpression: ==(265)", "Delete SimpleName: map(266)", "Delete SimpleName: TreeMap(267)", "Delete SimpleType: TreeMap(268)", "Delete SimpleName: String(269)", "Delete SimpleType: String(270)", "Delete SimpleName: String(271)", "Delete SimpleType: String(272)", "Delete ParameterizedType: TreeMap<String,String>(273)", "Delete ClassInstanceCreation(274)", "Delete Assignment: =(275)", "Delete ExpressionStatement(276)", "Delete SimpleName: _record(277)", "Delete SimpleName: setMapField(278)", "Delete SimpleName: pStr(279)", "Delete SimpleName: map(280)", "Delete MethodInvocation(281)", "Delete ExpressionStatement(282)", "Delete Block(283)", "Delete IfStatement(284)", "Delete SimpleName: map(285)", "Delete SimpleName: put(286)", "Delete SimpleName: NUM_ATTEMPTS(287)", "Delete SimpleName: String(288)", "Delete SimpleName: valueOf(289)", "Delete SimpleName: n(290)", "Delete MethodInvocation(291)", "Delete MethodInvocation(292)", "Delete ExpressionStatement(293)", "Delete Block(294)", "Delete MethodDeclaration(295)", "Delete Modifier: public(296)", "Delete PrimitiveType: int(297)", "Delete SimpleName: incrementNumAttempts(298)", "Delete PrimitiveType: int(299)", "Delete SimpleName: pId(300)", "Delete SingleVariableDeclaration(301)", "Delete PrimitiveType: int(302)", "Delete SimpleName: n(303)", "Delete ThisExpression(304)", "Delete SimpleName: getPartitionNumAttempts(305)", "Delete SimpleName: pId(306)", "Delete MethodInvocation(307)", "Delete VariableDeclarationFragment(308)", "Delete VariableDeclarationStatement(309)", "Delete SimpleName: n(310)", "Delete NumberLiteral: 0(311)", "Delete InfixExpression: <(312)", "Delete SimpleName: n(313)", "Delete NumberLiteral: 0(314)", "Delete Assignment: =(315)", "Delete ExpressionStatement(316)", "Delete Block(317)", "Delete IfStatement(318)", "Delete SimpleName: n(319)", "Delete NumberLiteral: 1(320)", "Delete Assignment: +=(321)", "Delete ExpressionStatement(322)", "Delete ThisExpression(323)", "Delete SimpleName: setPartitionNumAttempts(324)", "Delete SimpleName: pId(325)", "Delete SimpleName: n(326)", "Delete MethodInvocation(327)", "Delete ExpressionStatement(328)", "Delete SimpleName: n(329)", "Delete ReturnStatement(330)", "Delete Block(331)", "Delete MethodDeclaration(332)", "Delete Modifier: public(333)", "Delete PrimitiveType: int(334)", "Delete SimpleName: getPartitionNumAttempts(335)", "Delete PrimitiveType: int(336)", "Delete SimpleName: p(337)", "Delete SingleVariableDeclaration(338)", "Delete SimpleName: Map(339)", "Delete SimpleType: Map(340)", "Delete SimpleName: String(341)", "Delete SimpleType: String(342)", "Delete SimpleName: String(343)", "Delete SimpleType: String(344)", "Delete ParameterizedType: Map<String,String>(345)", "Delete SimpleName: map(346)", "Delete SimpleName: _record(347)", "Delete SimpleName: getMapField(348)", "Delete SimpleName: String(349)", "Delete SimpleName: valueOf(350)", "Delete SimpleName: p(351)", "Delete MethodInvocation(352)", "Delete MethodInvocation(353)", "Delete VariableDeclarationFragment(354)", "Delete VariableDeclarationStatement(355)", "Delete SimpleName: map(356)", "Delete NullLiteral(357)", "Delete InfixExpression: ==(358)", "Delete NumberLiteral: 1(359)", "Delete PrefixExpression: -(360)", "Delete ReturnStatement(361)", "Delete Block(362)", "Delete IfStatement(363)", "Delete SimpleName: String(364)", "Delete SimpleType: String(365)", "Delete SimpleName: nStr(366)", "Delete SimpleName: map(367)", "Delete SimpleName: get(368)", "Delete SimpleName: NUM_ATTEMPTS(369)", "Delete MethodInvocation(370)", "Delete VariableDeclarationFragment(371)", "Delete VariableDeclarationStatement(372)", "Delete SimpleName: nStr(373)", "Delete NullLiteral(374)", "Delete InfixExpression: ==(375)", "Delete NumberLiteral: 1(376)", "Delete PrefixExpression: -(377)", "Delete ReturnStatement(378)", "Delete Block(379)", "Delete IfStatement(380)", "Delete SimpleName: Integer(381)", "Delete SimpleName: parseInt(382)", "Delete SimpleName: nStr(383)", "Delete MethodInvocation(384)", "Delete ReturnStatement(385)", "Delete Block(386)", "Delete MethodDeclaration(387)", "Delete Modifier: public(388)", "Delete PrimitiveType: void(389)", "Delete SimpleName: setPartitionFinishTime(390)", "Delete PrimitiveType: int(391)", "Delete SimpleName: p(392)", "Delete SingleVariableDeclaration(393)", "Delete PrimitiveType: long(394)", "Delete SimpleName: t(395)", "Delete SingleVariableDeclaration(396)", "Delete SimpleName: String(397)", "Delete SimpleType: String(398)", "Delete SimpleName: pStr(399)", "Delete SimpleName: String(400)", "Delete SimpleName: valueOf(401)", "Delete SimpleName: p(402)", "Delete MethodInvocation(403)", "Delete VariableDeclarationFragment(404)", "Delete VariableDeclarationStatement(405)", "Delete SimpleName: Map(406)", "Delete SimpleType: Map(407)", "Delete SimpleName: String(408)", "Delete SimpleType: String(409)", "Delete SimpleName: String(410)", "Delete SimpleType: String(411)", "Delete ParameterizedType: Map<String,String>(412)", "Delete SimpleName: map(413)", "Delete SimpleName: _record(414)", "Delete SimpleName: getMapField(415)", "Delete SimpleName: pStr(416)", "Delete MethodInvocation(417)", "Delete VariableDeclarationFragment(418)", "Delete VariableDeclarationStatement(419)", "Delete SimpleName: map(420)", "Delete NullLiteral(421)", "Delete InfixExpression: ==(422)", "Delete SimpleName: map(423)", "Delete SimpleName: TreeMap(424)", "Delete SimpleType: TreeMap(425)", "Delete SimpleName: String(426)", "Delete SimpleType: String(427)", "Delete SimpleName: String(428)", "Delete SimpleType: String(429)", "Delete ParameterizedType: TreeMap<String,String>(430)", "Delete ClassInstanceCreation(431)", "Delete Assignment: =(432)", "Delete ExpressionStatement(433)", "Delete SimpleName: _record(434)", "Delete SimpleName: setMapField(435)", "Delete SimpleName: pStr(436)", "Delete SimpleName: map(437)", "Delete MethodInvocation(438)", "Delete ExpressionStatement(439)", "Delete Block(440)", "Delete IfStatement(441)", "Delete SimpleName: map(442)", "Delete SimpleName: put(443)", "Delete SimpleName: FINISH_TIME(444)", "Delete SimpleName: String(445)", "Delete SimpleName: valueOf(446)", "Delete SimpleName: t(447)", "Delete MethodInvocation(448)", "Delete MethodInvocation(449)", "Delete ExpressionStatement(450)", "Delete Block(451)", "Delete MethodDeclaration(452)", "Delete Modifier: public(453)", "Delete PrimitiveType: long(454)", "Delete SimpleName: getPartitionFinishTime(455)", "Delete PrimitiveType: int(456)", "Delete SimpleName: p(457)", "Delete SingleVariableDeclaration(458)", "Delete SimpleName: Map(459)", "Delete SimpleType: Map(460)", "Delete SimpleName: String(461)", "Delete SimpleType: String(462)", "Delete SimpleName: String(463)", "Delete SimpleType: String(464)", "Delete ParameterizedType: Map<String,String>(465)", "Delete SimpleName: map(466)", "Delete SimpleName: _record(467)", "Delete SimpleName: getMapField(468)", "Delete SimpleName: String(469)", "Delete SimpleName: valueOf(470)", "Delete SimpleName: p(471)", "Delete MethodInvocation(472)", "Delete MethodInvocation(473)", "Delete VariableDeclarationFragment(474)", "Delete VariableDeclarationStatement(475)", "Delete SimpleName: map(476)", "Delete NullLiteral(477)", "Delete InfixExpression: ==(478)", "Delete NumberLiteral: 1(479)", "Delete PrefixExpression: -(480)", "Delete ReturnStatement(481)", "Delete Block(482)", "Delete IfStatement(483)", "Delete SimpleName: String(484)", "Delete SimpleType: String(485)", "Delete SimpleName: tStr(486)", "Delete SimpleName: map(487)", "Delete SimpleName: get(488)", "Delete SimpleName: FINISH_TIME(489)", "Delete MethodInvocation(490)", "Delete VariableDeclarationFragment(491)", "Delete VariableDeclarationStatement(492)", "Delete SimpleName: tStr(493)", "Delete NullLiteral(494)", "Delete InfixExpression: ==(495)", "Delete NumberLiteral: 1(496)", "Delete PrefixExpression: -(497)", "Delete ReturnStatement(498)", "Delete Block(499)", "Delete IfStatement(500)", "Delete SimpleName: Long(501)", "Delete SimpleName: parseLong(502)", "Delete SimpleName: tStr(503)", "Delete MethodInvocation(504)", "Delete ReturnStatement(505)", "Delete Block(506)", "Delete MethodDeclaration(507)", "Delete TypeDeclaration: class(508)"]}}, {"TaskDriver_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS QualifiedName: org.apache.helix.PropertyKey to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 22"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS ImportDeclaration to CompilationUnit at 26", "INS QualifiedName: com.beust.jcommander.internal.Lists to ImportDeclaration at 0"]}, {"root": "UPDATE from java.util.ArrayList to java.util.Collections", "operations": ["UPD QualifiedName: java.util.ArrayList from java.util.ArrayList to java.util.Collections"]}, {"root": "UPDATE from scheduleTask to scheduleJob", "operations": ["UPD SimpleName: scheduleTask from scheduleTask to scheduleJob"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: jobConfig to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: JobConfig to SingleVariableDeclaration at 0", "INS SimpleName: JobConfig to SimpleType: JobConfig at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 1", "operations": ["INS StringLiteral: \"static-access\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 1"]}, {"root": "UPDATE from taskResource to jobResource", "operations": ["UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: task from task to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: numIndependentTasks to VariableDeclarationFragment at 0", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleName: jobConfig to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getTaskConfigMap to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationStatement to Block at 3", "INS SimpleType: HelixDataAccessor to VariableDeclarationStatement at 0", "INS SimpleName: accessor to VariableDeclarationFragment at 0", "INS SimpleName: getHelixDataAccessor to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: HelixDataAccessor to SimpleType: HelixDataAccessor at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: keyBuilder to VariableDeclarationFragment at 0", "INS SimpleName: accessor to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PropertyKey.Builder to VariableDeclarationStatement at 0", "INS QualifiedName: PropertyKey.Builder to SimpleType: PropertyKey.Builder at 0", "INS SimpleName: keyBuilder to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleName: resourceConfig to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 5", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: jobResource to ClassInstanceCreation at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: jobConfig to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: putAll to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS VariableDeclarationStatement to Block at 7", "INS SimpleName: getTaskConfigMap to MethodInvocation at 1", "INS SimpleName: Map to SimpleType: Map at 0", "INS ParameterizedType: Map<String,TaskConfig> to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Map to ParameterizedType: Map<String,TaskConfig> at 0", "INS SimpleName: taskConfigMap to VariableDeclarationFragment at 0", "INS SimpleName: jobConfig to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: values to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: taskConfig to MethodInvocation at 0", "INS EnhancedForStatement to Block at 0", "INS IfStatement to Block at 8", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: taskConfigMap to InfixExpression: != at 0", "INS SimpleName: getId to MethodInvocation at 1", "INS SimpleName: getRecord to MethodInvocation at 1", "INS SimpleName: taskConfigMap to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: setMapField to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: resourceConfig to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS SimpleName: accessor to MethodInvocation at 0", "INS SimpleName: resourceConfig to MethodInvocation at 3", "INS SimpleName: jobResource to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setProperty to MethodInvocation at 1", "INS SimpleName: keyBuilder to MethodInvocation at 0", "INS SimpleName: resourceConfig to MethodInvocation at 1", "INS ExpressionStatement to Block at 9", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS IfStatement to Block at 18", "operations": ["INS Block to IfStatement at 1", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: taskConfigMap to MethodInvocation at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS IfStatement to Block at 18", "INS Block to IfStatement at 2", "INS InfixExpression: != to InfixExpression: && at 0", "INS ExpressionStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleType: FixedTargetTaskRebalancer to TypeLiteral at 0", "INS SimpleName: FixedTargetTaskRebalancer to SimpleType: FixedTargetTaskRebalancer at 0", "INS SimpleName: taskConfigMap to InfixExpression: != at 0", "INS SimpleName: is to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: setRebalancerClassName to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to EnhancedForStatement at 1", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: keySet to MethodInvocation at 1"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: scheduleJob to MethodInvocation at 0", "INS SimpleName: flow to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: job to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: builder to VariableDeclarationFragment at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: JobConfig.Builder to SimpleType: JobConfig.Builder at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: get to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: JobConfig.Builder to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: addTaskConfigs to MethodInvocation at 1", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: getTaskConfigs to MethodInvocation at 1", "INS SimpleName: job to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from Posts new task to cluster  to Posts new job to cluster ", "operations": ["UPD TextElement: Posts new task to cluster  from Posts new task to cluster  to Posts new job to cluster "]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: HelixProperty to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: CustomModeISBuilder to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Public method to resume a task/workflow  to Public method to resume a job/workflow ", "operations": ["UPD TextElement: Public method to resume a task/workflow  from Public method to resume a task/workflow  to Public method to resume a job/workflow "]}, {"root": "UPDATE from Public method to stop a task/workflow  to Public method to stop a job/workflow ", "operations": ["UPD TextElement: Public method to stop a task/workflow  from Public method to stop a task/workflow  to Public method to stop a job/workflow "]}, {"root": "UPDATE from Public method to delete a task/workflow  to Public method to delete a job/workflow ", "operations": ["UPD TextElement: Public method to delete a task/workflow  from Public method to delete a task/workflow  to Public method to delete a job/workflow "]}, {"root": "INS SimpleType: HelixProperty to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS SimpleType: HelixProperty to VariableDeclarationStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from Constructs option group containing options required by all drivable tasks  to Constructs option group containing options required by all drivable jobs ", "operations": ["UPD TextElement: Constructs option group containing options required by all drivable tasks  from Constructs option group containing options required by all drivable tasks  to Constructs option group containing options required by all drivable jobs ", "UPD TextElement: Constructs option group containing options required by all drivable tasks  from Constructs option group containing options required by all drivable tasks  to Constructs option group containing options required by all drivable jobs "]}, {"root": "INS SingleMemberAnnotation to VariableDeclarationStatement at 0", "operations": ["INS SingleMemberAnnotation to VariableDeclarationStatement at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"static-access\" to SingleMemberAnnotation at 1"]}, {"root": "UPDATE from task to job", "operations": ["UPD SimpleName: task from task to job", "UPD SimpleName: pStr from pStr to job", "UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS InfixExpression: > to ParenthesizedExpression at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: numIndependentTasks to InfixExpression: > at 0", "INS SimpleName: numIndependentTasks to ConditionalExpression at 1"]}, {"root": "MOVE from ParameterizedType: Map<String,TaskConfig>", "operations": ["MOV SimpleType: String to ParameterizedType: Map<String,TaskConfig> at 1"]}, {"root": "MOVE from ParameterizedType: Map<String,TaskConfig>", "operations": ["MOV SimpleType: TaskConfig to ParameterizedType: Map<String,TaskConfig> at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from \"Task states are: \" to \"Job states are: \"", "operations": ["UPD StringLiteral: \"Task states are: \" from \"Task states are: \" to \"Job states are: \""]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: Lists to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "UPDATE from scheduleTask to flow", "operations": ["UPD SimpleName: scheduleTask from scheduleTask to flow"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: task to MethodInvocation at 1", "MOV SimpleName: scheduleTask to MethodInvocation at 0"]}, {"root": "UPDATE from task to getJobConfigs", "operations": ["UPD SimpleName: task from task to getJobConfigs"]}, {"root": "UPDATE from _admin to _manager", "operations": ["UPD SimpleName: _admin from _admin to _manager"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: _admin to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: HelixProperty to ClassInstanceCreation at 0"]}, {"root": "UPDATE from _clusterName to getSimpleFields", "operations": ["UPD SimpleName: _clusterName from _clusterName to getSimpleFields"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getResourceConfigScope to MethodInvocation at 1", "MOV SimpleName: taskResource to MethodInvocation at 1", "MOV SimpleName: TaskUtil to MethodInvocation at 0", "MOV SimpleName: _clusterName to MethodInvocation at 1"]}, {"root": "UPDATE from taskResource to getResourceConfigMap", "operations": ["UPD SimpleName: taskResource from taskResource to getResourceConfigMap"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CustomModeISBuilder to ClassInstanceCreation at 0"]}, {"root": "INS SimpleType: HelixProperty to ClassInstanceCreation at 0", "operations": ["INS SimpleName: HelixProperty to SimpleType: HelixProperty at 0", "INS SimpleType: HelixProperty to ClassInstanceCreation at 0"]}, {"root": "UPDATE from getTaskDag to getJobDag", "operations": ["UPD SimpleName: getTaskDag from getTaskDag to getJobDag", "UPD SimpleName: getTaskDag from getTaskDag to getJobDag"]}, {"root": "UPDATE from TaskContext to JobContext", "operations": ["UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<Integer> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: size to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from TaskUtil to resourceConfig", "operations": ["UPD SimpleName: TaskUtil from TaskUtil to resourceConfig"]}, {"root": "UPDATE from getResourceConfigScope to getRecord", "operations": ["UPD SimpleName: getResourceConfigScope from getResourceConfigScope to getRecord"]}, {"root": "UPDATE from tCtx to jCtx", "operations": ["UPD SimpleName: tCtx from tCtx to jCtx", "UPD SimpleName: tCtx from tCtx to jCtx", "UPD SimpleName: _admin from _admin to jCtx"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: partitions to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from partitions to Collections", "operations": ["UPD SimpleName: partitions from partitions to Collections"]}, {"root": "UPDATE from add to sort", "operations": ["UPD SimpleName: add from add to sort"]}, {"root": "UPDATE from parseInt to partitions", "operations": ["UPD SimpleName: parseInt from parseInt to partitions"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parseInt to MethodInvocation at 2"]}, {"root": "UPDATE from \"ZK address managing target cluster\" to \"ZK address managing cluster\"", "operations": ["UPD StringLiteral: \"ZK address managing target cluster\" from \"ZK address managing target cluster\" to \"ZK address managing cluster\""]}, {"root": "UPDATE from \"Target cluster name\" to \"Cluster name\"", "operations": ["UPD StringLiteral: \"Target cluster name\" from \"Target cluster name\" to \"Cluster name\""]}, {"root": "UPDATE from \"Target workflow or task\" to \"Workflow or job name\"", "operations": ["UPD StringLiteral: \"Target workflow or task\" from \"Target workflow or task\" to \"Workflow or job name\""]}, {"root": "UPDATE from TaskConfig.Builder to JobConfig.Builder", "operations": ["UPD QualifiedName: TaskConfig.Builder from TaskConfig.Builder to JobConfig.Builder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: TaskConfig.Builder to MethodInvocation at 0", "MOV SimpleName: fromMap to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV MethodInvocation to InfixExpression: != at 0"]}, {"root": "UPDATE from keySet to containsKey", "operations": ["UPD SimpleName: keySet from keySet to containsKey"]}, {"root": "INS SimpleName: job to MethodInvocation at 2", "operations": ["INS SimpleName: job to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 1"]}, {"root": "UPDATE from getTaskContext to getJobContext", "operations": ["UPD SimpleName: getTaskContext from getTaskContext to getJobContext"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: flow to MethodInvocation at 0", "INS SimpleName: getJobConfigs to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from TaskRebalancer to GenericTaskRebalancer", "operations": ["UPD SimpleName: TaskRebalancer from TaskRebalancer to GenericTaskRebalancer", "UPD SimpleType: TaskRebalancer from TaskRebalancer to GenericTaskRebalancer"]}, {"root": "UPDATE from getTaskState to getJobState", "operations": ["UPD SimpleName: getTaskState from getTaskState to getJobState"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: _admin to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPartitionSet to MethodInvocation at 1"]}, {"root": "UPDATE from taskConfig to jobConfig", "operations": ["UPD SimpleName: taskConfig from taskConfig to jobConfig"]}, {"root": "UPDATE from getResourceConfigMap to getConfigMap", "operations": ["UPD SimpleName: getResourceConfigMap from getResourceConfigMap to getConfigMap"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: setConfig"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: taskResource", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Integer", "DEL SimpleName: pStr", "DEL SimpleName: lastIndexOf", "DEL SimpleName: pStr", "DEL StringLiteral: \"_\"", "DEL InfixExpression: +", "DEL NumberLiteral: 1", "DEL SimpleName: length", "DEL SimpleName: substring", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: pStr", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: tCfg", "DEL SimpleName: task", "DEL SimpleName: getTaskCfg", "DEL MethodInvocation", "DEL SimpleName: TaskUtil", "DEL SimpleName: _manager", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: tCfg", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleName: getTargetPartitions", "DEL SimpleName: getResourceIdealState", "DEL ExpressionStatement", "DEL SimpleName: getTargetPartitions", "DEL SimpleName: tCfg", "DEL SimpleName: partitions", "DEL Block", "DEL ParameterizedType: ArrayList<Integer>", "DEL SimpleType: Integer", "DEL NullLiteral", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: partitions", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: ArrayList", "DEL SimpleName: ArrayList", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: tCfg", "DEL MethodInvocation", "DEL SimpleName: _clusterName", "DEL SimpleName: getTargetResource"]}]}}, {"TaskDriver_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(1564) at 4", "Insert ImportDeclaration(45) into CompilationUnit(1564) at 22", "Insert ImportDeclaration(53) into CompilationUnit(1564) at 26", "Update QualifiedName: java.util.ArrayList(4) to java.util.Collections", "Insert QualifiedName: org.apache.helix.PropertyKey(44) into ImportDeclaration(45) at 0", "Insert QualifiedName: com.beust.jcommander.internal.Lists(52) into ImportDeclaration(53) at 0", "Update SimpleName: scheduleTask(489) to scheduleJob", "Insert SingleVariableDeclaration(531) into MethodDeclaration(750) at 5", "Move SingleVariableDeclaration(782) into MethodDeclaration(858) at 4", "Insert SingleMemberAnnotation(1157) into MethodDeclaration(1267) at 1", "Update SimpleName: taskResource(492) to jobResource", "Insert SimpleType: JobConfig(529) into SingleVariableDeclaration(531) at 0", "Insert SimpleName: jobConfig(530) into SingleVariableDeclaration(531) at 1", "Insert VariableDeclarationStatement(542) into Block(749) at 0", "Insert VariableDeclarationStatement(579) into Block(749) at 3", "Insert VariableDeclarationStatement(587) into Block(749) at 4", "Insert VariableDeclarationStatement(596) into Block(749) at 5", "Insert ExpressionStatement(607) into Block(749) at 6", "Insert VariableDeclarationStatement(620) into Block(749) at 7", "Insert IfStatement(646) into Block(749) at 8", "Insert ExpressionStatement(655) into Block(749) at 9", "Insert IfStatement(741) into Block(749) at 17", "Update SimpleName: task(781) to jobResource", "Insert SimpleName: SuppressWarnings(1155) into SingleMemberAnnotation(1157) at 0", "Insert StringLiteral: \"static-access\"(1156) into SingleMemberAnnotation(1157) at 1", "Insert MethodInvocation(468) into EnhancedForStatement(515) at 1", "Insert Block(514) into EnhancedForStatement(515) at 2", "Update TextElement: Posts new task to cluster (484) to Posts new job to cluster ", "Insert SimpleName: JobConfig(528) into SimpleType: JobConfig(529) at 0", "Insert PrimitiveType: int(534) into VariableDeclarationStatement(542) at 0", "Insert VariableDeclarationFragment(541) into VariableDeclarationStatement(542) at 1", "Insert SimpleType: HelixDataAccessor(573) into VariableDeclarationStatement(579) at 0", "Insert VariableDeclarationFragment(578) into VariableDeclarationStatement(579) at 1", "Insert SimpleType: PropertyKey.Builder(581) into VariableDeclarationStatement(587) at 0", "Insert VariableDeclarationFragment(586) into VariableDeclarationStatement(587) at 1", "Move SimpleType: HelixProperty(687) into VariableDeclarationStatement(596) at 0", "Insert VariableDeclarationFragment(595) into VariableDeclarationStatement(596) at 1", "Insert MethodInvocation(606) into ExpressionStatement(607) at 0", "Insert ParameterizedType: Map<String,TaskConfig>(614) into VariableDeclarationStatement(620) at 0", "Insert VariableDeclarationFragment(619) into VariableDeclarationStatement(620) at 1", "Insert InfixExpression: !=(623) into IfStatement(646) at 0", "Insert Block(645) into IfStatement(646) at 1", "Insert MethodInvocation(654) into ExpressionStatement(655) at 0", "Move SimpleType: CustomModeISBuilder(539) into VariableDeclarationStatement(664) at 0", "Insert InfixExpression: &&(720) into IfStatement(741) at 0", "Insert Block(730) into IfStatement(741) at 1", "Insert Block(740) into IfStatement(741) at 2", "Update TextElement: Public method to resume a task/workflow (610) to Public method to resume a job/workflow ", "Update TextElement: Public method to stop a task/workflow (627) to Public method to stop a job/workflow ", "Update TextElement: Public method to delete a task/workflow (644) to Public method to delete a job/workflow ", "Insert SimpleType: HelixProperty(825) into VariableDeclarationStatement(832) at 0", "Move SingleVariableDeclaration(852) into EnhancedForStatement(1060) at 0", "Update TextElement: Constructs option group containing options required by all drivable tasks (1067) to Constructs option group containing options required by all drivable jobs ", "Update TextElement: Constructs option group containing options required by all drivable tasks (1180) to Constructs option group containing options required by all drivable jobs ", "Insert SingleMemberAnnotation(1278) into VariableDeclarationStatement(1292) at 0", "Update SimpleName: task(458) to job", "Insert MethodInvocation(466) into MethodInvocation(468) at 0", "Insert SimpleName: keySet(467) into MethodInvocation(468) at 1", "Insert VariableDeclarationStatement(482) into Block(514) at 0", "Insert IfStatement(506) into Block(514) at 1", "Insert ExpressionStatement(513) into Block(514) at 2", "Insert SimpleName: numIndependentTasks(535) into VariableDeclarationFragment(541) at 0", "Insert MethodInvocation(540) into VariableDeclarationFragment(541) at 1", "Insert ConditionalExpression(561) into VariableDeclarationFragment(562) at 1", "Update SimpleName: taskResource(518) to jobResource", "Insert SimpleName: HelixDataAccessor(572) into SimpleType: HelixDataAccessor(573) at 0", "Insert SimpleName: accessor(574) into VariableDeclarationFragment(578) at 0", "Insert MethodInvocation(577) into VariableDeclarationFragment(578) at 1", "Insert QualifiedName: PropertyKey.Builder(580) into SimpleType: PropertyKey.Builder(581) at 0", "Insert SimpleName: keyBuilder(582) into VariableDeclarationFragment(586) at 0", "Insert MethodInvocation(585) into VariableDeclarationFragment(586) at 1", "Insert SimpleName: resourceConfig(590) into VariableDeclarationFragment(595) at 0", "Insert ClassInstanceCreation(594) into VariableDeclarationFragment(595) at 1", "Insert MethodInvocation(601) into MethodInvocation(606) at 0", "Insert SimpleName: putAll(602) into MethodInvocation(606) at 1", "Insert MethodInvocation(605) into MethodInvocation(606) at 2", "Insert SimpleType: Map(609) into ParameterizedType: Map<String,TaskConfig>(614) at 0", "Move SimpleType: String(668) into ParameterizedType: Map<String,TaskConfig>(614) at 1", "Move SimpleType: TaskConfig(811) into ParameterizedType: Map<String,TaskConfig>(614) at 2", "Insert SimpleName: taskConfigMap(615) into VariableDeclarationFragment(619) at 0", "Insert MethodInvocation(618) into VariableDeclarationFragment(619) at 1", "Insert SimpleName: taskConfigMap(621) into InfixExpression: !=(623) at 0", "Insert NullLiteral(622) into InfixExpression: !=(623) at 1", "Insert EnhancedForStatement(644) into Block(645) at 0", "Insert SimpleName: accessor(647) into MethodInvocation(654) at 0", "Insert SimpleName: setProperty(648) into MethodInvocation(654) at 1", "Insert MethodInvocation(652) into MethodInvocation(654) at 2", "Insert SimpleName: resourceConfig(653) into MethodInvocation(654) at 3", "Insert InfixExpression: !=(715) into InfixExpression: &&(720) at 0", "Insert PrefixExpression: !(719) into InfixExpression: &&(720) at 1", "Move ExpressionStatement(600) into Block(730) at 0", "Insert ExpressionStatement(739) into Block(740) at 0", "Update SimpleName: taskResource(604) to jobResource", "Insert SimpleName: HelixProperty(824) into SimpleType: HelixProperty(825) at 0", "Update StringLiteral: \"Task states are: \"(771) to \"Job states are: \"", "Update SimpleName: pStr(851) to job", "Insert VariableDeclarationStatement(964) into Block(1059) at 2", "Move ExpressionStatement(880) into Block(1059) at 3", "Insert SimpleName: SuppressWarnings(1276) into SingleMemberAnnotation(1278) at 0", "Insert StringLiteral: \"static-access\"(1277) into SingleMemberAnnotation(1278) at 1", "Update SimpleName: scheduleTask(465) to flow", "Move SimpleName: scheduleTask(465) into MethodInvocation(466) at 0", "Update SimpleName: task(466) to getJobConfigs", "Move SimpleName: task(466) into MethodInvocation(466) at 1", "Insert SimpleType: JobConfig.Builder(470) into VariableDeclarationStatement(482) at 0", "Insert VariableDeclarationFragment(481) into VariableDeclarationStatement(482) at 1", "Insert InfixExpression: &&(494) into IfStatement(506) at 0", "Insert Block(505) into IfStatement(506) at 1", "Insert MethodInvocation(512) into ExpressionStatement(513) at 0", "Insert MethodInvocation(538) into MethodInvocation(540) at 0", "Insert SimpleName: size(539) into MethodInvocation(540) at 1", "Insert ParenthesizedExpression(548) into ConditionalExpression(561) at 0", "Insert SimpleName: numIndependentTasks(549) into ConditionalExpression(561) at 1", "Insert MethodInvocation(560) into ConditionalExpression(561) at 2", "Update SimpleName: _admin(523) to _manager", "Move SimpleName: _admin(523) into MethodInvocation(577) at 0", "Insert SimpleName: getHelixDataAccessor(576) into MethodInvocation(577) at 1", "Insert SimpleName: accessor(583) into MethodInvocation(585) at 0", "Insert SimpleName: keyBuilder(584) into MethodInvocation(585) at 1", "Move SimpleType: HelixProperty(684) into ClassInstanceCreation(594) at 0", "Insert SimpleName: jobResource(593) into ClassInstanceCreation(594) at 1", "Insert MethodInvocation(599) into MethodInvocation(601) at 0", "Update SimpleName: _clusterName(527) to getSimpleFields", "Move SimpleName: _clusterName(527) into MethodInvocation(601) at 1", "Insert SimpleName: jobConfig(603) into MethodInvocation(605) at 0", "Update SimpleName: taskResource(528) to getResourceConfigMap", "Move SimpleName: taskResource(528) into MethodInvocation(605) at 1", "Insert SimpleName: Map(608) into SimpleType: Map(609) at 0", "Insert SimpleName: jobConfig(616) into MethodInvocation(618) at 0", "Insert SimpleName: getTaskConfigMap(617) into MethodInvocation(618) at 1", "Move SingleVariableDeclaration(497) into EnhancedForStatement(644) at 0", "Insert MethodInvocation(630) into EnhancedForStatement(644) at 1", "Insert Block(643) into EnhancedForStatement(644) at 2", "Insert SimpleName: keyBuilder(649) into MethodInvocation(652) at 0", "Insert SimpleName: resourceConfig(650) into MethodInvocation(652) at 1", "Insert SimpleName: jobResource(651) into MethodInvocation(652) at 2", "Move SimpleType: CustomModeISBuilder(536) into ClassInstanceCreation(662) at 0", "Update SimpleName: taskResource(540) to jobResource", "Insert SimpleName: taskConfigMap(713) into InfixExpression: !=(715) at 0", "Insert NullLiteral(714) into InfixExpression: !=(715) at 1", "Insert MethodInvocation(718) into PrefixExpression: !(719) at 0", "Insert MethodInvocation(738) into ExpressionStatement(739) at 0", "Insert SimpleType: HelixProperty(828) into ClassInstanceCreation(830) at 0", "Update SimpleName: taskResource(688) to jobResource", "Update SimpleName: taskResource(708) to jobResource", "Update SimpleName: getTaskDag(784) to getJobDag", "Update SimpleType: TaskContext(801) to JobContext", "Move ParameterizedType: List<Integer>(824) into VariableDeclarationStatement(964) at 0", "Insert VariableDeclarationFragment(963) into VariableDeclarationStatement(964) at 1", "Insert QualifiedName: JobConfig.Builder(469) into SimpleType: JobConfig.Builder(470) at 0", "Insert SimpleName: builder(471) into VariableDeclarationFragment(481) at 0", "Insert MethodInvocation(480) into VariableDeclarationFragment(481) at 1", "Insert InfixExpression: !=(487) into InfixExpression: &&(494) at 0", "Move MethodInvocation(464) into InfixExpression: &&(494) at 1", "Insert ExpressionStatement(504) into Block(505) at 0", "Insert SimpleName: scheduleJob(507) into MethodInvocation(512) at 0", "Insert SimpleName: job(508) into MethodInvocation(512) at 1", "Insert MethodInvocation(511) into MethodInvocation(512) at 2", "Insert SimpleName: jobConfig(536) into MethodInvocation(538) at 0", "Insert SimpleName: getTaskConfigMap(537) into MethodInvocation(538) at 1", "Insert InfixExpression: >(547) into ParenthesizedExpression(548) at 0", "Move MethodInvocation(510) into MethodInvocation(560) at 0", "Move SimpleName: size(511) into MethodInvocation(560) at 1", "Update SimpleName: TaskUtil(525) to resourceConfig", "Move SimpleName: TaskUtil(525) into MethodInvocation(599) at 0", "Update SimpleName: getResourceConfigScope(526) to getRecord", "Move SimpleName: getResourceConfigScope(526) into MethodInvocation(599) at 1", "Insert SimpleName: taskConfigMap(628) into MethodInvocation(630) at 0", "Insert SimpleName: values(629) into MethodInvocation(630) at 1", "Insert ExpressionStatement(642) into Block(643) at 0", "Insert SimpleName: taskConfigMap(716) into MethodInvocation(718) at 0", "Insert SimpleName: isEmpty(717) into MethodInvocation(718) at 1", "Insert SimpleName: is(731) into MethodInvocation(738) at 0", "Insert SimpleName: setRebalancerClassName(732) into MethodInvocation(738) at 1", "Insert MethodInvocation(737) into MethodInvocation(738) at 2", "Insert SimpleName: HelixProperty(827) into SimpleType: HelixProperty(828) at 0", "Update SimpleName: TaskContext(800) to JobContext", "Update SimpleName: tCtx(802) to jCtx", "Move SimpleName: partitions(825) into VariableDeclarationFragment(963) at 0", "Insert MethodInvocation(962) into VariableDeclarationFragment(963) at 1", "Update SimpleName: partitions(862) to Collections", "Update SimpleName: add(863) to sort", "Update SimpleName: parseInt(865) to partitions", "Move SimpleName: parseInt(865) into MethodInvocation(968) at 2", "Update StringLiteral: \"ZK address managing target cluster\"(1085) to \"ZK address managing cluster\"", "Update StringLiteral: \"Target cluster name\"(1111) to \"Cluster name\"", "Update StringLiteral: \"Target workflow or task\"(1137) to \"Workflow or job name\"", "Update QualifiedName: TaskConfig.Builder(467) to JobConfig.Builder", "Move QualifiedName: TaskConfig.Builder(467) into MethodInvocation(480) at 0", "Move SimpleName: fromMap(468) into MethodInvocation(480) at 1", "Move MethodInvocation(474) into MethodInvocation(480) at 2", "Move MethodInvocation(471) into InfixExpression: !=(487) at 0", "Insert NullLiteral(486) into InfixExpression: !=(487) at 1", "Update SimpleName: keySet(463) to containsKey", "Insert SimpleName: job(492) into MethodInvocation(493) at 2", "Insert MethodInvocation(503) into ExpressionStatement(504) at 0", "Insert SimpleName: builder(509) into MethodInvocation(511) at 0", "Move SimpleName: build(476) into MethodInvocation(511) at 1", "Insert SimpleName: numIndependentTasks(545) into InfixExpression: >(547) at 0", "Insert NumberLiteral: 0(546) into InfixExpression: >(547) at 1", "Insert MethodInvocation(641) into ExpressionStatement(642) at 0", "Update SimpleName: taskResource(576) to jobResource", "Insert TypeLiteral(735) into MethodInvocation(737) at 0", "Insert SimpleName: getName(736) into MethodInvocation(737) at 1", "Update SimpleName: getTaskDag(751) to getJobDag", "Update SimpleName: task(791) to job", "Update SimpleName: getTaskContext(804) to getJobContext", "Update SimpleName: task(806) to job", "Insert SimpleName: Lists(957) into MethodInvocation(962) at 0", "Insert SimpleName: newArrayList(958) into MethodInvocation(962) at 1", "Insert MethodInvocation(961) into MethodInvocation(962) at 2", "Insert MethodInvocation(476) into MethodInvocation(479) at 0", "Update SimpleName: task(473) to job", "Insert SimpleName: builder(495) into MethodInvocation(503) at 0", "Insert SimpleName: addTaskConfigs(496) into MethodInvocation(503) at 1", "Insert MethodInvocation(502) into MethodInvocation(503) at 2", "Insert MethodInvocation(633) into MethodInvocation(641) at 0", "Insert SimpleName: setMapField(634) into MethodInvocation(641) at 1", "Insert MethodInvocation(637) into MethodInvocation(641) at 2", "Move MethodInvocation(532) into MethodInvocation(641) at 3", "Update SimpleType: TaskRebalancer(595) to GenericTaskRebalancer", "Insert SimpleType: FixedTargetTaskRebalancer(734) into TypeLiteral(735) at 0", "Update SimpleName: getTaskState(794) to getJobState", "Update SimpleName: task(795) to job", "Update SimpleName: _admin(853) to jCtx", "Move SimpleName: _admin(853) into MethodInvocation(961) at 0", "Move SimpleName: getPartitionSet(860) into MethodInvocation(961) at 1", "Insert SimpleName: flow(474) into MethodInvocation(476) at 0", "Insert SimpleName: getJobConfigs(475) into MethodInvocation(476) at 1", "Insert MethodInvocation(499) into MethodInvocation(502) at 0", "Insert SimpleName: get(500) into MethodInvocation(502) at 1", "Insert SimpleName: job(501) into MethodInvocation(502) at 2", "Update SimpleName: taskConfig(505) to jobConfig", "Insert SimpleName: resourceConfig(631) into MethodInvocation(633) at 0", "Insert SimpleName: getRecord(632) into MethodInvocation(633) at 1", "Insert SimpleName: taskConfig(635) into MethodInvocation(637) at 0", "Insert SimpleName: getId(636) into MethodInvocation(637) at 1", "Update SimpleName: getResourceConfigMap(531) to getConfigMap", "Update SimpleName: TaskRebalancer(594) to GenericTaskRebalancer", "Insert SimpleName: FixedTargetTaskRebalancer(733) into SimpleType: FixedTargetTaskRebalancer(734) at 0", "Update SimpleName: tCtx(911) to jCtx", "Insert SimpleName: flow(497) into MethodInvocation(499) at 0", "Insert SimpleName: getTaskConfigs(498) into MethodInvocation(499) at 1", "Delete MethodInvocation(475)", "Delete MethodInvocation(477)", "Delete MethodInvocation(478)", "Delete ExpressionStatement(479)", "Delete Block(480)", "Delete MethodInvocation(512)", "Delete SimpleName: setConfig(524)", "Delete MethodInvocation(529)", "Delete MethodInvocation(533)", "Delete ExpressionStatement(534)", "Delete SimpleName: taskResource(669)", "Delete SingleVariableDeclaration(670)", "Delete SimpleName: Integer(864)", "Delete SimpleName: pStr(866)", "Delete SimpleName: substring(867)", "Delete SimpleName: pStr(868)", "Delete SimpleName: lastIndexOf(869)", "Delete StringLiteral: \"_\"(870)", "Delete MethodInvocation(871)", "Delete NumberLiteral: 1(872)", "Delete InfixExpression: +(873)", "Delete SimpleName: pStr(874)", "Delete SimpleName: length(875)", "Delete MethodInvocation(876)", "Delete MethodInvocation(877)", "Delete MethodInvocation(878)", "Delete SimpleName: tCfg(812)", "Delete SimpleName: TaskUtil(813)", "Delete SimpleName: getTaskCfg(814)", "Delete SimpleName: _manager(815)", "Delete SimpleName: task(816)", "Delete MethodInvocation(817)", "Delete VariableDeclarationFragment(818)", "Delete VariableDeclarationStatement(819)", "Delete VariableDeclarationFragment(826)", "Delete VariableDeclarationStatement(827)", "Delete SimpleName: tCfg(828)", "Delete SimpleName: getTargetPartitions(829)", "Delete MethodInvocation(830)", "Delete NullLiteral(831)", "Delete InfixExpression: !=(832)", "Delete SimpleName: partitions(833)", "Delete SimpleName: tCfg(834)", "Delete SimpleName: getTargetPartitions(835)", "Delete MethodInvocation(836)", "Delete Assignment: =(837)", "Delete ExpressionStatement(838)", "Delete Block(839)", "Delete SimpleName: partitions(840)", "Delete SimpleName: ArrayList(841)", "Delete SimpleType: ArrayList(842)", "Delete SimpleName: Integer(843)", "Delete SimpleType: Integer(844)", "Delete ParameterizedType: ArrayList<Integer>(845)", "Delete ClassInstanceCreation(846)", "Delete Assignment: =(847)", "Delete ExpressionStatement(848)", "Delete SimpleName: getResourceIdealState(854)", "Delete SimpleName: _clusterName(855)", "Delete SimpleName: tCfg(856)", "Delete SimpleName: getTargetResource(857)", "Delete MethodInvocation(858)", "Delete MethodInvocation(859)", "Delete MethodInvocation(861)", "Delete Block(881)", "Delete EnhancedForStatement(882)", "Delete Block(883)", "Delete IfStatement(884)"]}}, {"TaskFactory_cluster": {"actions": [{"root": "UPDATE from String to TaskCallbackContext", "operations": ["UPD SimpleType: String from String to TaskCallbackContext", "UPD SimpleName: String from String to TaskCallbackContext"]}, {"root": "UPDATE from config to context", "operations": ["UPD SimpleName: config from config to context", "UPD SimpleName: config from config to context"]}, {"root": "UPDATE from  Configuration information for the task. to  Contextual information for the task, including task and job configurations", "operations": ["UPD TextElement:  Configuration information for the task. from  Configuration information for the task. to  Contextual information for the task, including task and job configurations"]}]}}, {"TaskFactory_diff": {"operations": ["Update SimpleType: String(28) to TaskCallbackContext", "Update SimpleName: config(29) to context", "Update SimpleName: config(15) to context", "Update TextElement:  Configuration information for the task.(16) to  Contextual information for the task, including task and job configurations", "Update SimpleName: String(27) to TaskCallbackContext"]}}, {"TaskPartitionState_cluster": {"actions": []}}, {"TaskPartitionState_diff": {"operations": []}}, {"TaskRebalancer_cluster": {"actions": [{"root": "INS Modifier: abstract to TypeDeclaration: class at 2", "operations": ["INS Modifier: abstract to TypeDeclaration: class at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS TagElement: @param to Javadoc at 5", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS TextElement:  cluster snapshot to TagElement: @param at 1", "INS TextElement:  the workflow context to TagElement: @param at 1", "INS TextElement:  the workflow configuration to TagElement: @param at 1", "INS TagElement: @return to Javadoc at 6", "INS SimpleName: cache to TagElement: @param at 0", "INS SimpleName: workflowCtx to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 4", "INS TagElement: @param to Javadoc at 3", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS TextElement: Get all the partitions that should be created by this task to TagElement at 0", "INS TextElement:  set of partition numbers to TagElement: @return at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleType: WorkflowContext to SingleVariableDeclaration at 0", "INS SimpleName: workflowCtx to SingleVariableDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: workflowCfg to TagElement: @param at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 10", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS SingleVariableDeclaration to MethodDeclaration at 11", "INS SimpleType: WorkflowContext to SingleVariableDeclaration at 0", "INS SimpleType: JobContext to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 13", "INS SimpleName: jobContext to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS SimpleName: workflowCtx to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 12", "MOV SingleVariableDeclaration to MethodDeclaration at 14"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SimpleName: cfg to TagElement: @param at 0", "INS SimpleName: job to MethodInvocation at 2", "INS SimpleName: ctx to TagElement: @param at 0", "INS Block to MethodDeclaration at 7", "INS TextElement:  Workflow config containing set of jobs to TagElement: @param at 1", "INS IfStatement to Block at 0", "INS EnhancedForStatement to Block at 0", "INS SimpleName: isWorkflowComplete to MethodDeclaration at 4", "INS Block to EnhancedForStatement at 2", "INS Modifier: private to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS TagElement: @param to Javadoc at 2", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS TextElement:  Workflow context containing job states to TagElement: @param at 1", "INS QualifiedName: TaskState.COMPLETED to InfixExpression: != at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 15", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS Block to MethodDeclaration at 7", "INS InfixExpression: != to InfixExpression: && at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS QualifiedName: TaskState.STOPPED to InfixExpression: != at 1", "INS SimpleName: cfg to MethodInvocation at 0", "INS Modifier: static to MethodDeclaration at 2", "INS SimpleName: isWorkflowStopped to MethodDeclaration at 4", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: getAllNodes to MethodInvocation at 1", "INS EnhancedForStatement to Block at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS IfStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS SimpleName: getJobDag to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 23", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: addAllPartitions to MethodDeclaration at 3", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: toAdd to SingleVariableDeclaration at 1", "INS SimpleName: toAdd to EnhancedForStatement at 1"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public", "UPD Modifier: private from private to public"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: private to MethodDeclaration at 1", "MOV Modifier: static to MethodDeclaration at 2", "MOV SimpleName: addAllPartitions to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from static to abstract", "operations": ["UPD Modifier: static from static to abstract", "UPD Modifier: static from static to abstract"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV ParameterizedType: Set<Integer> to MethodDeclaration at 3"]}, {"root": "UPDATE from addAllPartitions to getAllTaskPartitions", "operations": ["UPD SimpleName: addAllPartitions from addAllPartitions to getAllTaskPartitions"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 8", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 12", "MOV SimpleName: getTgtPartitionAssignment to MethodDeclaration at 4", "MOV Modifier: private to MethodDeclaration at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV Modifier: static to MethodDeclaration at 2", "MOV Javadoc to MethodDeclaration at 0", "MOV ParameterizedType: Map<String,SortedSet<Integer>> to MethodDeclaration at 3"]}, {"root": "UPDATE from getTgtPartitionAssignment to getTaskAssignment", "operations": ["UPD SimpleName: getTgtPartitionAssignment from getTgtPartitionAssignment to getTaskAssignment", "UPD SimpleName: getTgtPartitionAssignment from getTgtPartitionAssignment to getTaskAssignment"]}, {"root": "UPDATE from isTaskComplete to isJobComplete", "operations": ["UPD SimpleName: isTaskComplete from isTaskComplete to isJobComplete", "UPD SimpleName: isTaskComplete from isTaskComplete to isJobComplete"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement to Javadoc at 0", "MOV TagElement: @param to Javadoc at 2", "MOV TagElement: @return to Javadoc at 3"]}, {"root": "INS SimpleType: JobConfig to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: JobConfig to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from taskCfg to jobCfg", "operations": ["UPD SimpleName: taskCfg from taskCfg to jobCfg", "UPD SimpleName: tgtResourceIs from tgtResourceIs to jobCfg", "UPD SimpleName: taskCfg from taskCfg to jobCfg", "UPD SimpleName: taskCfg from taskCfg to jobCfg", "UPD SimpleName: ctx from ctx to jobCfg", "UPD SimpleName: taskCfg from taskCfg to jobCfg", "UPD SimpleName: taskCfg from taskCfg to jobCfg", "UPD SimpleName: pNames from pNames to jobCfg", "UPD SimpleName: taskCfg from taskCfg to jobCfg", "UPD SimpleName: tgtStates from tgtStates to jobCfg", "UPD SimpleName: tgtResourceIs from tgtResourceIs to jobCfg"]}, {"root": "UPDATE from TaskContext to JobContext", "operations": ["UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext", "UPD SimpleName: Integer from Integer to JobContext", "UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleType: String from String to JobContext", "UPD SimpleName: String from String to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext", "UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleName: IdealState from IdealState to JobContext", "UPD SimpleType: IdealState from IdealState to JobContext", "UPD SimpleType: TaskContext from TaskContext to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext", "UPD SimpleName: TaskContext from TaskContext to JobContext"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: pName to SingleVariableDeclaration at 1", "MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from taskCtx to jobCtx", "operations": ["UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: pName from pName to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx", "UPD SimpleName: cfg from cfg to jobCtx", "UPD SimpleName: tgtResourceIs from tgtResourceIs to jobCtx", "UPD SimpleName: taskCtx from taskCtx to jobCtx"]}, {"root": "UPDATE from TaskConfig to WorkflowConfig", "operations": ["UPD SimpleType: TaskConfig from TaskConfig to WorkflowConfig", "UPD SimpleType: String from String to WorkflowConfig", "UPD SimpleName: String from String to WorkflowConfig", "UPD SimpleName: TaskConfig from TaskConfig to WorkflowConfig"]}, {"root": "UPDATE from taskCfg to workflowCfg", "operations": ["UPD SimpleName: taskCfg from taskCfg to workflowCfg", "UPD SimpleName: tgtStates from tgtStates to workflowCfg", "UPD SimpleName: instance from instance to workflowCfg"]}, {"root": "UPDATE from String to ClusterDataCache", "operations": ["UPD SimpleType: String from String to ClusterDataCache", "UPD SimpleName: TaskContext from TaskContext to ClusterDataCache", "UPD SimpleType: TaskContext from TaskContext to ClusterDataCache", "UPD SimpleType: String from String to ClusterDataCache", "UPD SimpleName: String from String to ClusterDataCache", "UPD SimpleName: String from String to ClusterDataCache"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: pName to SingleVariableDeclaration at 1", "MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from pName to cache", "operations": ["UPD SimpleName: pName from pName to cache", "UPD SimpleName: taskCtx from taskCtx to cache", "UPD SimpleName: pName from pName to cache"]}, {"root": "INS TagElement: @param to Javadoc at 2", "operations": ["INS TextElement:  the previous task partition assignment to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: prevAssignment to TagElement: @param at 0"]}, {"root": "INS TagElement: @param to Javadoc at 4", "operations": ["INS TagElement: @param to Javadoc at 4", "INS SimpleName: jobCfg to TagElement: @param at 0", "INS TextElement:  the task configuration to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 7", "operations": ["INS SimpleName: workflowCtx to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 7", "INS TextElement:  the workflow context to TagElement: @param at 1"]}, {"root": "INS TagElement: @param to Javadoc at 9", "operations": ["INS TagElement: @param to Javadoc at 9", "INS SimpleName: cache to TagElement: @param at 0", "INS TextElement:  cluster snapshot to TagElement: @param at 1"]}, {"root": "UPDATE from IdealState to ResourceAssignment", "operations": ["UPD SimpleName: IdealState from IdealState to ResourceAssignment", "UPD SimpleType: IdealState from IdealState to ResourceAssignment"]}, {"root": "UPDATE from tgtIs to prevAssignment", "operations": ["UPD SimpleName: tgtIs from tgtIs to prevAssignment"]}, {"root": "INS SimpleType: JobConfig to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: JobConfig to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: instance to SingleVariableDeclaration at 1", "MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from includeSet to partitionSet", "operations": ["UPD SimpleName: includeSet from includeSet to partitionSet", "UPD SimpleName: includeSet from includeSet to partitionSet"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0", "MOV SimpleName: pName to SingleVariableDeclaration at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from taskResource to jobResource", "operations": ["UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource"]}, {"root": "UPDATE from TaskConfig to JobConfig", "operations": ["UPD SimpleType: TaskConfig from TaskConfig to JobConfig", "UPD SimpleName: String from String to JobConfig", "UPD SimpleName: String from String to JobConfig", "UPD SimpleName: TaskConfig from TaskConfig to JobConfig", "UPD SimpleType: TaskConfig from TaskConfig to JobConfig", "UPD SimpleName: TaskConfig from TaskConfig to JobConfig"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Set<Integer> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from pIds to destination", "operations": ["UPD SimpleName: pIds from pIds to destination", "UPD SimpleName: result from result to destination"]}, {"root": "UPDATE from  Workflow context containing task states to  the task configuration", "operations": ["UPD TextElement:  Workflow context containing task states from  Workflow context containing task states to  the task configuration"]}, {"root": "UPDATE from  The ideal state of the target resource. to  the task context", "operations": ["UPD TextElement:  The ideal state of the target resource. from  The ideal state of the target resource. to  the task context", "UPD TextElement:  Workflow config containing set of tasks from  Workflow config containing set of tasks to  the task context"]}, {"root": "MOVE from SimpleType: JobConfig", "operations": ["MOV SimpleName: String to SimpleType: JobConfig at 0"]}, {"root": "UPDATE from HashSet to WorkflowContext", "operations": ["UPD SimpleName: HashSet from HashSet to WorkflowContext", "UPD SimpleName: TreeSet from TreeSet to WorkflowContext"]}, {"root": "MOVE from SimpleType: WorkflowContext", "operations": ["MOV SimpleName: HashSet to SimpleType: WorkflowContext at 0"]}, {"root": "UPDATE from Get partition assignments for the target resource, but only for the partitions of interest. to Compute an assignment of tasks to instances", "operations": ["UPD TextElement: Get partition assignments for the target resource, but only for the partitions of interest. from Get partition assignments for the target resource, but only for the partitions of interest. to Compute an assignment of tasks to instances"]}, {"root": "UPDATE from  The current state of the instances in the cluster. to  the current state of the instances", "operations": ["UPD TextElement:  The current state of the instances in the cluster. from  The current state of the instances in the cluster. to  the current state of the instances"]}, {"root": "UPDATE from  The set of instances. to  the instances", "operations": ["UPD TextElement:  The set of instances. from  The set of instances. to  the instances"]}, {"root": "UPDATE from tgtIs to taskCtx", "operations": ["UPD SimpleName: tgtIs from tgtIs to taskCtx"]}, {"root": "UPDATE from  Only partitions in this set of states will be considered. If null, partitions to  the workflow configuration", "operations": ["UPD TextElement:  Only partitions in this set of states will be considered. If null, partitions from  Only partitions in this set of states will be considered. If null, partitions to  the workflow configuration"]}, {"root": "UPDATE from  The set of partitions to consider. to  the partitions to assign", "operations": ["UPD TextElement:  The set of partitions to consider. from  The set of partitions to consider. to  the partitions to assign"]}, {"root": "UPDATE from  A map of instance vs set of partition ids assigned to that instance. to  map of instances to set of partition numbers", "operations": ["UPD TextElement:  A map of instance vs set of partition ids assigned to that instance. from  A map of instance vs set of partition ids assigned to that instance. to  map of instances to set of partition numbers"]}, {"root": "MOVE from SimpleType: JobConfig", "operations": ["MOV SimpleName: String to SimpleType: JobConfig at 0"]}, {"root": "MOVE from SimpleType: JobContext", "operations": ["MOV SimpleName: Integer to SimpleType: JobContext at 0"]}, {"root": "MOVE from SimpleType: WorkflowContext", "operations": ["MOV SimpleName: TreeSet to SimpleType: WorkflowContext at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ResourceAssignment to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from Checks if the task has completed. to Checks if the job has completed.", "operations": ["UPD TextElement: Checks if the task has completed. from Checks if the task has completed. to Checks if the job has completed."]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from Cleans up all Helix state associated with this task, wiping workflow-level information if this to Cleans up all Helix state associated with this job, wiping workflow-level information if this", "operations": ["UPD TextElement: Cleans up all Helix state associated with this task, wiping workflow-level information if this from Cleans up all Helix state associated with this task, wiping workflow-level information if this to Cleans up all Helix state associated with this job, wiping workflow-level information if this"]}, {"root": "UPDATE from remaining task in its workflow. to is the last remaining job in its workflow.", "operations": ["UPD TextElement: remaining task in its workflow. from remaining task in its workflow. to is the last remaining job in its workflow."]}, {"root": "INS SingleVariableDeclaration to EnhancedForStatement at 0", "operations": ["INS SimpleName: job to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from setTaskContext to setJobContext", "operations": ["UPD SimpleName: setTaskContext from setTaskContext to setJobContext"]}, {"root": "UPDATE from taskTgtState to jobTgtState", "operations": ["UPD SimpleName: taskTgtState from taskTgtState to jobTgtState", "UPD SimpleName: taskTgtState from taskTgtState to jobTgtState", "UPD SimpleName: taskTgtState from taskTgtState to jobTgtState", "UPD SimpleName: taskTgtState from taskTgtState to jobTgtState"]}, {"root": "UPDATE from task to job", "operations": ["UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job", "UPD SimpleName: tgtIs from tgtIs to job", "UPD SimpleName: task from task to job"]}, {"root": "UPDATE from includeSet to getAllNodes", "operations": ["UPD SimpleName: includeSet from includeSet to getAllNodes"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: contains to MethodInvocation at 0", "MOV SimpleName: pId to MethodInvocation at 1", "MOV SimpleName: includeSet to MethodInvocation at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from getTaskCfg to getJobCfg", "operations": ["UPD SimpleName: getTaskCfg from getTaskCfg to getJobCfg"]}, {"root": "UPDATE from getTaskDag to getJobDag", "operations": ["UPD SimpleName: getTaskDag from getTaskDag to getJobDag", "UPD SimpleName: pName from pName to getJobDag", "UPD SimpleName: getTaskDag from getTaskDag to getJobDag"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from getTaskContext to getJobContext", "operations": ["UPD SimpleName: getTaskContext from getTaskContext to getJobContext"]}, {"root": "INS SimpleName: clusterData to MethodInvocation at 11", "operations": ["INS SimpleName: clusterData to MethodInvocation at 11"]}, {"root": "INS SimpleName: jobCtx to MethodInvocation at 2", "operations": ["INS SimpleName: jobCtx to MethodInvocation at 2"]}, {"root": "UPDATE from taskCfg to workflowConfig", "operations": ["UPD SimpleName: taskCfg from taskCfg to workflowConfig", "UPD SimpleName: taskCfg from taskCfg to workflowConfig"]}, {"root": "INS SimpleName: workflowCtx to MethodInvocation at 4", "operations": ["INS SimpleName: workflowCtx to MethodInvocation at 4"]}, {"root": "INS SimpleName: cache to MethodInvocation at 5", "operations": ["INS SimpleName: cache to MethodInvocation at 5"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ResourceAssignment to ClassInstanceCreation at 0"]}, {"root": "UPDATE from pId to cfg", "operations": ["UPD SimpleName: pId from pId to cfg"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: pName to MethodInvocation at 1", "MOV SimpleName: pId to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from getTaskState to getJobState", "operations": ["UPD SimpleName: getTaskState from getTaskState to getJobState", "UPD SimpleName: getTaskState from getTaskState to getJobState", "UPD SimpleName: pId from pId to getJobState", "UPD SimpleName: getCurrentState from getCurrentState to getJobState", "UPD SimpleName: getTaskState from getTaskState to getJobState", "UPD SimpleName: getTaskState from getTaskState to getJobState"]}, {"root": "UPDATE from setTaskState to setJobState", "operations": ["UPD SimpleName: setTaskState from setTaskState to setJobState", "UPD SimpleName: setTaskState from setTaskState to setJobState", "UPD SimpleName: setTaskState from setTaskState to setJobState", "UPD SimpleName: setTaskState from setTaskState to setJobState"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS SimpleName: containsKey to MethodInvocation at 1", "INS SimpleName: instance to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS ContinueStatement to Block at 0", "INS SimpleName: tgtPartitionAssignments to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "UPDATE from == to !=", "operations": ["UPD InfixExpression: == from == to !="]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: == to InfixExpression: && at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: result to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: String to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: prevAssignment to MethodInvocation at 2", "operations": ["INS SimpleName: prevAssignment to MethodInvocation at 2"]}, {"root": "INS SimpleName: jobCtx to MethodInvocation at 5", "operations": ["INS SimpleName: jobCtx to MethodInvocation at 5"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: taskCfg to MethodInvocation at 6", "MOV SimpleName: getTargetPartitionStates to MethodInvocation at 7"]}, {"root": "UPDATE from getTargetPartitionStates to workflowCtx", "operations": ["UPD SimpleName: getTargetPartitionStates from getTargetPartitionStates to workflowCtx"]}, {"root": "INS SimpleName: cache to MethodInvocation at 10", "operations": ["INS SimpleName: cache to MethodInvocation at 10"]}, {"root": "UPDATE from contains to ctx", "operations": ["UPD SimpleName: contains from contains to ctx", "UPD SimpleName: currStateOutput from currStateOutput to ctx"]}, {"root": "INS MethodInvocation to InfixExpression: == at 0", "operations": ["INS SimpleName: ctx to MethodInvocation at 0", "INS SimpleName: job to MethodInvocation at 2", "INS SimpleName: getJobState to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCurrentState to MethodInvocation at 1", "MOV SimpleName: currStateOutput to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tgtIs to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "UPDATE from getMaxAttemptsPerPartition to getMaxAttemptsPerTask", "operations": ["UPD SimpleName: getMaxAttemptsPerPartition from getMaxAttemptsPerPartition to getMaxAttemptsPerTask"]}, {"root": "UPDATE from getPartitionSet to allPartitions", "operations": ["UPD SimpleName: getPartitionSet from getPartitionSet to allPartitions"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPartitionSet to MethodInvocation at 1"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "DEL ParameterizedType: Set<String>", "operations": ["DEL SimpleName: Set", "DEL SimpleType: Set", "DEL SimpleType: String", "DEL ParameterizedType: Set<String>"]}, {"root": "DEL TextElement: do not need to", "operations": ["DEL TextElement: do not need to"]}, {"root": "DEL TextElement: be in any specific state to be considered.", "operations": ["DEL TextElement: be in any specific state to be considered."]}, {"root": "DEL ParameterizedType: Set<String>", "operations": ["DEL ParameterizedType: Set<String>", "DEL SimpleType: String", "DEL SimpleName: Set", "DEL SimpleType: Set"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: taskCfg", "DEL MethodInvocation", "DEL SimpleName: getTargetResource", "DEL SimpleName: clusterData", "DEL MethodInvocation", "DEL SimpleName: getIdealState"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: tgtResourceIs", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: tgtStates", "operations": ["DEL SimpleName: tgtStates"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: task", "DEL MethodInvocation", "DEL SimpleName: ctx", "DEL EnhancedForStatement", "DEL Modifier: static", "DEL Block", "DEL QualifiedName: TaskState.COMPLETED", "DEL MethodInvocation", "DEL SimpleName: getAllNodes", "DEL IfStatement", "DEL SimpleName: getTaskDag", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: task", "DEL SimpleName: isWorkflowComplete", "DEL MethodDeclaration", "DEL SimpleName: getTaskState", "DEL Block", "DEL SimpleName: cfg", "DEL Modifier: private", "DEL PrimitiveType: boolean"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL Modifier: static", "DEL Block", "DEL QualifiedName: TaskState.STOPPED", "DEL SimpleName: ctx", "DEL SimpleName: getTaskState", "DEL NullLiteral", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleName: isWorkflowStopped", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: task", "DEL Modifier: private", "DEL SimpleName: getAllNodes", "DEL SimpleName: cfg", "DEL Block", "DEL InfixExpression: !=", "DEL IfStatement", "DEL SimpleName: ctx", "DEL SimpleName: getTaskDag", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: getTaskState", "DEL MethodInvocation", "DEL SimpleName: task"]}, {"root": "DEL TextElement: is the last", "operations": ["DEL TextElement: is the last"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: get", "DEL SimpleName: instance", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: pNames", "DEL SimpleName: pIds", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL EnhancedForStatement", "DEL SimpleName: pId", "DEL SimpleName: add", "DEL SimpleName: pName", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: IdealState", "DEL ClassInstanceCreation", "DEL SimpleName: getPartitionSet", "DEL SimpleName: tgtResourceIs", "DEL VariableDeclarationFragment", "DEL SimpleName: taskCfg", "DEL SimpleName: add", "DEL Block", "DEL Block", "DEL Modifier: static", "DEL MethodInvocation", "DEL TextElement: use the list of all partition ids from the target resource.", "DEL MethodInvocation", "DEL IfStatement", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: pId", "DEL Javadoc", "DEL SimpleName: taskPartitions", "DEL SimpleType: HashSet", "DEL TextElement: <p/>", "DEL Block", "DEL SimpleType: Integer", "DEL ParameterizedType: HashSet<Integer>", "DEL Block", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: pId", "DEL SimpleName: taskCfg", "DEL SimpleName: IdealState", "DEL SimpleName: getTargetPartitions", "DEL EnhancedForStatement", "DEL SimpleName: pName", "DEL SimpleName: taskPartitions", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: add", "DEL TextElement: Returns the set of all partition ids for a task.", "DEL VariableDeclarationStatement", "DEL SimpleName: taskPartitions", "DEL SimpleName: getAllTaskPartitions", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: taskPartitions", "DEL TextElement: If a set of partition ids was explicitly specified in the config, that is used. Otherwise, we", "DEL TagElement", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: tgtResourceIs", "DEL SimpleName: getTargetPartitions", "DEL EnhancedForStatement", "DEL SingleVariableDeclaration", "DEL InfixExpression: !="]}, {"root": "DEL SimpleName: n", "operations": ["DEL SimpleName: n"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL SimpleName: Integer", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: HashMap", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL SimpleName: tgtStates", "DEL SimpleType: SortedSet", "DEL SimpleType: Integer", "DEL InfixExpression: ||", "DEL SimpleName: instanceList", "DEL VariableDeclarationFragment", "DEL ParameterizedType: SortedSet<Integer>", "DEL SimpleName: instanceList", "DEL MethodInvocation", "DEL ParameterizedType: HashMap<String,SortedSet<Integer>>", "DEL SimpleName: result", "DEL Block", "DEL EnhancedForStatement", "DEL SimpleName: Partition", "DEL SimpleName: String", "DEL SimpleType: SortedSet", "DEL SimpleName: pName", "DEL SimpleType: Map", "DEL SimpleType: HashMap", "DEL VariableDeclarationFragment", "DEL SimpleName: tgtIs", "DEL ParameterizedType: SortedSet<Integer>", "DEL Block", "DEL SimpleType: TreeSet", "DEL MethodInvocation", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleType: Integer", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleName: pId", "DEL SimpleName: getResourceName", "DEL SimpleName: contains", "DEL SingleVariableDeclaration", "DEL Block", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: put", "DEL SimpleType: Partition", "DEL ParameterizedType: Map<String,SortedSet<Integer>>", "DEL SimpleName: Integer", "DEL SimpleName: SortedSet", "DEL SimpleType: Integer", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleType: String", "DEL IfStatement", "DEL SimpleName: SortedSet", "DEL SimpleName: instance", "DEL SimpleName: instance", "DEL Block", "DEL VariableDeclarationStatement", "DEL EnhancedForStatement", "DEL ExpressionStatement", "DEL SimpleName: state", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: String", "DEL ParameterizedType: TreeSet<Integer>", "DEL SimpleName: instance", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: getPartitionSet", "DEL SimpleName: state"]}]}}, {"TaskRebalancer_diff": {"operations": ["Insert Modifier: abstract(61) into TypeDeclaration: class(2417) at 2", "Insert MethodDeclaration(135) into TypeDeclaration: class(2417) at 8", "Insert MethodDeclaration(223) into TypeDeclaration: class(2417) at 9", "Move SingleVariableDeclaration(496) into MethodDeclaration(1411) at 12", "Move SingleVariableDeclaration(515) into MethodDeclaration(1411) at 14", "Insert MethodDeclaration(1523) into TypeDeclaration: class(2417) at 14", "Insert MethodDeclaration(1583) into TypeDeclaration: class(2417) at 15", "Insert MethodDeclaration(1941) into TypeDeclaration: class(2417) at 21", "Insert Javadoc(106) into MethodDeclaration(135) at 0", "Update Modifier: private(1768) to public", "Move Modifier: private(1768) into MethodDeclaration(135) at 1", "Update Modifier: static(1769) to abstract", "Move Modifier: static(1769) into MethodDeclaration(135) at 2", "Move ParameterizedType: Set<Integer>(1880) into MethodDeclaration(135) at 3", "Update SimpleName: addAllPartitions(1771) to getAllTaskPartitions", "Move SimpleName: addAllPartitions(1771) into MethodDeclaration(135) at 4", "Move SingleVariableDeclaration(1778) into MethodDeclaration(135) at 5", "Insert SingleVariableDeclaration(122) into MethodDeclaration(135) at 6", "Move SingleVariableDeclaration(1889) into MethodDeclaration(135) at 7", "Insert SingleVariableDeclaration(130) into MethodDeclaration(135) at 8", "Insert SingleVariableDeclaration(134) into MethodDeclaration(135) at 9", "Move Javadoc(2106) into MethodDeclaration(223) at 0", "Update Modifier: private(2107) to public", "Move Modifier: private(2107) into MethodDeclaration(223) at 1", "Update Modifier: static(2108) to abstract", "Move Modifier: static(2108) into MethodDeclaration(223) at 2", "Move ParameterizedType: Map<String,SortedSet<Integer>>(2118) into MethodDeclaration(223) at 3", "Update SimpleName: getTgtPartitionAssignment(2119) to getTaskAssignment", "Move SimpleName: getTgtPartitionAssignment(2119) into MethodDeclaration(223) at 4", "Move SingleVariableDeclaration(2123) into MethodDeclaration(223) at 5", "Move SingleVariableDeclaration(2134) into MethodDeclaration(223) at 6", "Move SingleVariableDeclaration(2130) into MethodDeclaration(223) at 7", "Move SingleVariableDeclaration(2141) into MethodDeclaration(223) at 8", "Insert SingleVariableDeclaration(203) into MethodDeclaration(223) at 9", "Insert SingleVariableDeclaration(207) into MethodDeclaration(223) at 10", "Insert SingleVariableDeclaration(211) into MethodDeclaration(223) at 11", "Move SingleVariableDeclaration(2148) into MethodDeclaration(223) at 12", "Insert SingleVariableDeclaration(222) into MethodDeclaration(223) at 13", "Update SimpleName: isTaskComplete(1289) to isJobComplete", "Insert Javadoc(1486) into MethodDeclaration(1523) at 0", "Insert Modifier: private(1487) into MethodDeclaration(1523) at 1", "Insert Modifier: static(1488) into MethodDeclaration(1523) at 2", "Insert PrimitiveType: boolean(1489) into MethodDeclaration(1523) at 3", "Insert SimpleName: isWorkflowComplete(1490) into MethodDeclaration(1523) at 4", "Move SingleVariableDeclaration(1351) into MethodDeclaration(1523) at 5", "Move SingleVariableDeclaration(1355) into MethodDeclaration(1523) at 6", "Insert Block(1522) into MethodDeclaration(1523) at 7", "Move Javadoc(1396) into MethodDeclaration(1583) at 0", "Insert Modifier: private(1540) into MethodDeclaration(1583) at 1", "Insert Modifier: static(1541) into MethodDeclaration(1583) at 2", "Insert PrimitiveType: boolean(1542) into MethodDeclaration(1583) at 3", "Insert SimpleName: isWorkflowStopped(1543) into MethodDeclaration(1583) at 4", "Move SingleVariableDeclaration(1404) into MethodDeclaration(1583) at 5", "Move SingleVariableDeclaration(1408) into MethodDeclaration(1583) at 6", "Insert Block(1582) into MethodDeclaration(1583) at 7", "Insert Modifier: private(1910) into MethodDeclaration(1941) at 0", "Insert Modifier: static(1911) into MethodDeclaration(1941) at 1", "Insert PrimitiveType: void(1912) into MethodDeclaration(1941) at 2", "Insert SimpleName: addAllPartitions(1913) into MethodDeclaration(1941) at 3", "Insert SingleVariableDeclaration(1920) into MethodDeclaration(1941) at 4", "Move SingleVariableDeclaration(1785) into MethodDeclaration(1941) at 5", "Insert Block(1940) into MethodDeclaration(1941) at 6", "Update Modifier: private(2410) to protected", "Update Modifier: private(2432) to protected", "Insert TagElement(88) into Javadoc(106) at 0", "Move TagElement: @param(1332) into Javadoc(106) at 1", "Move TagElement: @param(1335) into Javadoc(106) at 2", "Insert TagElement: @param(97) into Javadoc(106) at 3", "Insert TagElement: @param(100) into Javadoc(106) at 4", "Insert TagElement: @param(103) into Javadoc(106) at 5", "Insert TagElement: @return(105) into Javadoc(106) at 6", "Insert SimpleType: JobConfig(116) into SingleVariableDeclaration(118) at 0", "Update SimpleName: pNames(1777) to jobCfg", "Update SimpleType: String(1787) to JobContext", "Move SimpleType: String(1787) into SingleVariableDeclaration(122) at 0", "Update SimpleName: pName(1788) to jobCtx", "Move SimpleName: pName(1788) into SingleVariableDeclaration(122) at 1", "Update SimpleType: TaskConfig(1887) to WorkflowConfig", "Update SimpleName: taskCfg(1888) to workflowCfg", "Insert SimpleType: WorkflowContext(128) into SingleVariableDeclaration(130) at 0", "Insert SimpleName: workflowCtx(129) into SingleVariableDeclaration(130) at 1", "Update SimpleType: String(1925) to ClusterDataCache", "Move SimpleType: String(1925) into SingleVariableDeclaration(134) at 0", "Update SimpleName: pName(1926) to cache", "Move SimpleName: pName(1926) into SingleVariableDeclaration(134) at 1", "Insert TagElement: @param(143) into Javadoc(167) at 2", "Insert TagElement: @param(149) into Javadoc(167) at 4", "Insert TagElement: @param(158) into Javadoc(167) at 7", "Insert TagElement: @param(164) into Javadoc(167) at 9", "Update SimpleType: IdealState(2132) to ResourceAssignment", "Update SimpleName: tgtIs(2133) to prevAssignment", "Insert SimpleType: JobConfig(197) into SingleVariableDeclaration(199) at 0", "Update SimpleName: tgtStates(2140) to jobCfg", "Insert SimpleType: JobContext(201) into SingleVariableDeclaration(203) at 0", "Insert SimpleName: jobContext(202) into SingleVariableDeclaration(203) at 1", "Update SimpleType: String(2174) to WorkflowConfig", "Move SimpleType: String(2174) into SingleVariableDeclaration(207) at 0", "Update SimpleName: instance(2175) to workflowCfg", "Move SimpleName: instance(2175) into SingleVariableDeclaration(207) at 1", "Insert SimpleType: WorkflowContext(209) into SingleVariableDeclaration(211) at 0", "Insert SimpleName: workflowCtx(210) into SingleVariableDeclaration(211) at 1", "Update SimpleName: includeSet(2147) to partitionSet", "Update SimpleType: String(2192) to ClusterDataCache", "Move SimpleType: String(2192) into SingleVariableDeclaration(222) at 0", "Update SimpleName: pName(2193) to cache", "Move SimpleName: pName(2193) into SingleVariableDeclaration(222) at 1", "Move SimpleType: String(675) into SingleVariableDeclaration(612) at 0", "Update SimpleName: taskResource(479) to jobResource", "Update SimpleType: TaskConfig(486) to JobConfig", "Update SimpleName: taskCfg(487) to jobCfg", "Update SimpleType: IdealState(494) to JobContext", "Update SimpleName: tgtResourceIs(495) to jobCtx", "Update SimpleType: TaskContext(513) to ClusterDataCache", "Update SimpleName: taskCtx(514) to cache", "Update SimpleType: TaskContext(1291) to JobContext", "Move TagElement(1329) into Javadoc(1486) at 0", "Insert TagElement: @param(1475) into Javadoc(1486) at 1", "Insert TagElement: @param(1478) into Javadoc(1486) at 2", "Move TagElement: @return(1342) into Javadoc(1486) at 3", "Insert EnhancedForStatement(1519) into Block(1522) at 0", "Move ReturnStatement(1438) into Block(1522) at 1", "Insert EnhancedForStatement(1579) into Block(1582) at 0", "Move ReturnStatement(1378) into Block(1582) at 1", "Move ParameterizedType: Set<Integer>(1894) into SingleVariableDeclaration(1920) at 0", "Insert SimpleName: toAdd(1919) into SingleVariableDeclaration(1920) at 1", "Update SimpleName: pIds(1784) to destination", "Insert EnhancedForStatement(1939) into Block(1940) at 0", "Update SimpleType: TaskContext(1830) to JobContext", "Update SimpleType: TaskContext(2022) to JobContext", "Update SimpleType: TaskContext(2054) to JobContext", "Insert TextElement: Get all the partitions that should be created by this task(87) into TagElement(88) at 0", "Update SimpleName: ctx(1330) to jobCfg", "Update TextElement:  Workflow context containing task states(1331) to  the task configuration", "Update SimpleName: cfg(1333) to jobCtx", "Update TextElement:  Workflow config containing set of tasks(1334) to  the task context", "Insert SimpleName: workflowCfg(95) into TagElement: @param(97) at 0", "Insert TextElement:  the workflow configuration(96) into TagElement: @param(97) at 1", "Insert SimpleName: workflowCtx(98) into TagElement: @param(100) at 0", "Insert TextElement:  the workflow context(99) into TagElement: @param(100) at 1", "Insert SimpleName: cache(101) into TagElement: @param(103) at 0", "Insert TextElement:  cluster snapshot(102) into TagElement: @param(103) at 1", "Insert TextElement:  set of partition numbers(104) into TagElement: @return(105) at 0", "Update SimpleName: String(1774) to JobConfig", "Move SimpleName: String(1774) into SimpleType: JobConfig(116) at 0", "Update SimpleName: String(1786) to JobContext", "Update SimpleName: TaskConfig(1886) to WorkflowConfig", "Update SimpleName: HashSet(1896) to WorkflowContext", "Move SimpleName: HashSet(1896) into SimpleType: WorkflowContext(128) at 0", "Update SimpleName: String(1924) to ClusterDataCache", "Update TextElement: Get partition assignments for the target resource, but only for the partitions of interest.(2085) to Compute an assignment of tasks to instances", "Update TextElement:  The current state of the instances in the cluster.(2088) to  the current state of the instances", "Insert SimpleName: prevAssignment(141) into TagElement: @param(143) at 0", "Insert TextElement:  the previous task partition assignment(142) into TagElement: @param(143) at 1", "Update TextElement:  The set of instances.(2091) to  the instances", "Insert SimpleName: jobCfg(147) into TagElement: @param(149) at 0", "Insert TextElement:  the task configuration(148) into TagElement: @param(149) at 1", "Update SimpleName: tgtIs(2093) to taskCtx", "Update TextElement:  The ideal state of the target resource.(2094) to  the task context", "Update SimpleName: tgtStates(2096) to workflowCfg", "Update TextElement:  Only partitions in this set of states will be considered. If null, partitions(2097) to  the workflow configuration", "Insert SimpleName: workflowCtx(156) into TagElement: @param(158) at 0", "Insert TextElement:  the workflow context(157) into TagElement: @param(158) at 1", "Update SimpleName: includeSet(2101) to partitionSet", "Update TextElement:  The set of partitions to consider.(2102) to  the partitions to assign", "Insert SimpleName: cache(162) into TagElement: @param(164) at 0", "Insert TextElement:  cluster snapshot(163) into TagElement: @param(164) at 1", "Update TextElement:  A map of instance vs set of partition ids assigned to that instance.(2104) to  map of instances to set of partition numbers", "Update SimpleName: IdealState(2131) to ResourceAssignment", "Update SimpleName: String(2137) to JobConfig", "Move SimpleName: String(2137) into SimpleType: JobConfig(197) at 0", "Update SimpleName: Integer(2155) to JobContext", "Move SimpleName: Integer(2155) into SimpleType: JobContext(201) at 0", "Update SimpleName: String(2173) to WorkflowConfig", "Update SimpleName: TreeSet(2181) to WorkflowContext", "Move SimpleName: TreeSet(2181) into SimpleType: WorkflowContext(209) at 0", "Update SimpleName: String(2191) to ClusterDataCache", "Update SimpleType: TaskConfig(133) to JobConfig", "Update SimpleType: TaskContext(285) to JobContext", "Move Block(221) into IfStatement(472) at 1", "Update SimpleName: TaskConfig(485) to JobConfig", "Update SimpleName: IdealState(493) to JobContext", "Update SimpleName: TaskContext(512) to ClusterDataCache", "Move SimpleType: ResourceAssignment(1220) into VariableDeclarationStatement(1367) at 0", "Update TextElement: Checks if the task has completed.(1269) to Checks if the job has completed.", "Update SimpleName: TaskContext(1290) to JobContext", "Insert SimpleName: ctx(1473) into TagElement: @param(1475) at 0", "Insert TextElement:  Workflow context containing job states(1474) into TagElement: @param(1475) at 1", "Insert SimpleName: cfg(1476) into TagElement: @param(1478) at 0", "Insert TextElement:  Workflow config containing set of jobs(1477) into TagElement: @param(1478) at 1", "Move SingleVariableDeclaration(1412) into EnhancedForStatement(1519) at 0", "Insert MethodInvocation(1507) into EnhancedForStatement(1519) at 1", "Insert Block(1518) into EnhancedForStatement(1519) at 2", "Move SingleVariableDeclaration(1602) into EnhancedForStatement(1579) at 0", "Insert MethodInvocation(1560) into EnhancedForStatement(1579) at 1", "Insert Block(1578) into EnhancedForStatement(1579) at 2", "Update TextElement: Cleans up all Helix state associated with this task, wiping workflow-level information if this(1472) to Cleans up all Helix state associated with this job, wiping workflow-level information if this", "Update TextElement: remaining task in its workflow.(1474) to is the last remaining job in its workflow.", "Insert SingleVariableDeclaration(1744) into EnhancedForStatement(1786) at 0", "Move SingleVariableDeclaration(1912) into EnhancedForStatement(1939) at 0", "Insert SimpleName: toAdd(1932) into EnhancedForStatement(1939) at 1", "Insert Block(1938) into EnhancedForStatement(1939) at 2", "Update SimpleName: TaskContext(1829) to JobContext", "Update SimpleName: TaskContext(2021) to JobContext", "Update SimpleName: TaskContext(2053) to JobContext", "Update SimpleName: TaskConfig(132) to JobConfig", "Update SimpleName: taskCfg(134) to jobCfg", "Update SimpleName: TaskContext(284) to JobContext", "Update SimpleName: taskCtx(286) to jobCtx", "Update SimpleName: taskCtx(294) to jobCtx", "Update SimpleName: setTaskContext(448) to setJobContext", "Update SimpleName: taskCtx(451) to jobCtx", "Update SimpleName: taskTgtState(525) to jobTgtState", "Update SimpleName: taskTgtState(531) to jobTgtState", "Update SimpleName: isTaskComplete(1029) to isJobComplete", "Update SimpleName: taskCtx(1030) to jobCtx", "Update SimpleName: taskTgtState(1059) to jobTgtState", "Update SimpleName: task(1411) to job", "Insert MethodInvocation(1505) into MethodInvocation(1507) at 0", "Update SimpleName: includeSet(2205) to getAllNodes", "Move SimpleName: includeSet(2205) into MethodInvocation(1507) at 1", "Insert IfStatement(1517) into Block(1518) at 0", "Update SimpleName: task(1601) to job", "Insert MethodInvocation(1558) into MethodInvocation(1560) at 0", "Insert SimpleName: getAllNodes(1559) into MethodInvocation(1560) at 1", "Insert IfStatement(1577) into Block(1578) at 0", "Move SimpleType: String(2215) into SingleVariableDeclaration(1744) at 0", "Insert SimpleName: job(1743) into SingleVariableDeclaration(1744) at 1", "Move ExpressionStatement(2245) into Block(1938) at 0", "Update SimpleName: getTaskCfg(136) to getJobCfg", "Update SimpleName: taskCfg(145) to jobCfg", "Update SimpleName: getTaskDag(197) to getJobDag", "Move Block(333) into IfStatement(360) at 1", "Update SimpleName: getTaskContext(288) to getJobContext", "Update SimpleName: taskCfg(377) to jobCfg", "Update SimpleName: taskCtx(392) to jobCtx", "Insert SimpleName: clusterData(526) into MethodInvocation(527) at 10", "Update SimpleName: tgtResourceIs(604) to jobCfg", "Insert SimpleName: jobCtx(737) into MethodInvocation(741) at 2", "Update SimpleName: taskCfg(605) to workflowConfig", "Insert SimpleName: workflowCtx(739) into MethodInvocation(741) at 4", "Insert SimpleName: cache(740) into MethodInvocation(741) at 5", "Move SimpleType: ResourceAssignment(1217) into ClassInstanceCreation(1365) at 0", "Update SimpleName: taskResource(1221) to jobResource", "Update SimpleName: pId(2200) to cfg", "Move SimpleName: pId(2200) into MethodInvocation(1505) at 0", "Update SimpleName: pName(2201) to getJobDag", "Move SimpleName: pName(2201) into MethodInvocation(1505) at 1", "Insert InfixExpression: !=(1513) into IfStatement(1517) at 0", "Move Block(1433) into IfStatement(1517) at 1", "Insert SimpleName: cfg(1556) into MethodInvocation(1558) at 0", "Insert SimpleName: getJobDag(1557) into MethodInvocation(1558) at 1", "Insert InfixExpression: &&(1573) into IfStatement(1577) at 0", "Move Block(1373) into IfStatement(1577) at 1", "Update SimpleName: getTaskDag(1604) to getJobDag", "Update SimpleName: taskCtx(297) to jobCtx", "Update SimpleName: taskCtx(307) to jobCtx", "Update SimpleName: getTaskState(317) to getJobState", "Update SimpleName: getTaskState(323) to getJobState", "Update SimpleName: setTaskState(535) to setJobState", "Update SimpleName: taskResource(536) to jobResource", "Update SimpleName: setTaskState(553) to setJobState", "Update SimpleName: taskResource(554) to jobResource", "Update SimpleName: setTaskState(1034) to setJobState", "Update SimpleName: taskResource(1035) to jobResource", "Update SimpleName: taskCtx(1076) to jobCtx", "Insert IfStatement(1267) into Block(1355) at 1", "Insert MethodInvocation(1511) into InfixExpression: !=(1513) at 0", "Insert QualifiedName: TaskState.COMPLETED(1512) into InfixExpression: !=(1513) at 1", "Insert InfixExpression: !=(1566) into InfixExpression: &&(1573) at 0", "Update InfixExpression: ==(2232) to !=", "Move InfixExpression: ==(2232) into InfixExpression: &&(1573) at 1", "Update SimpleName: result(2238) to destination", "Move SimpleName: result(2238) into MethodInvocation(1936) at 0", "Update SimpleType: TaskContext(299) to JobContext", "Move SimpleType: String(769) into VariableDeclarationStatement(822) at 0", "Insert SimpleType: String(904) into VariableDeclarationStatement(916) at 0", "Update SimpleName: getTgtPartitionAssignment(1091) to getTaskAssignment", "Insert SimpleName: prevAssignment(1226) into MethodInvocation(1234) at 2", "Update SimpleName: tgtResourceIs(1094) to jobCfg", "Insert SimpleName: jobCtx(1229) into MethodInvocation(1234) at 5", "Update SimpleName: taskCfg(1095) to workflowConfig", "Move SimpleName: taskCfg(1095) into MethodInvocation(1234) at 6", "Update SimpleName: getTargetPartitionStates(1096) to workflowCtx", "Move SimpleName: getTargetPartitionStates(1096) into MethodInvocation(1234) at 7", "Insert SimpleName: cache(1233) into MethodInvocation(1234) at 9", "Insert PrefixExpression: !(1264) into IfStatement(1267) at 0", "Insert Block(1266) into IfStatement(1267) at 1", "Update SimpleName: contains(2206) to ctx", "Move SimpleName: contains(2206) into MethodInvocation(1511) at 0", "Update SimpleName: pId(2207) to getJobState", "Move SimpleName: pId(2207) into MethodInvocation(1511) at 1", "Insert SimpleName: job(1510) into MethodInvocation(1511) at 2", "Insert MethodInvocation(1564) into InfixExpression: !=(1566) at 0", "Insert QualifiedName: TaskState.STOPPED(1565) into InfixExpression: !=(1566) at 1", "Insert MethodInvocation(1570) into InfixExpression: !=(1572) at 0", "Update SimpleName: getTaskState(203) to getJobState", "Update SimpleName: TaskContext(298) to JobContext", "Insert SimpleName: String(903) into SimpleType: String(904) at 0", "Insert MethodInvocation(1263) into PrefixExpression: !(1264) at 0", "Insert ContinueStatement(1265) into Block(1266) at 0", "Update SimpleName: taskResource(1250) to jobResource", "Update SimpleName: currStateOutput(2217) to ctx", "Move SimpleName: currStateOutput(2217) into MethodInvocation(1564) at 0", "Update SimpleName: getCurrentState(2218) to getJobState", "Move SimpleName: getCurrentState(2218) into MethodInvocation(1564) at 1", "Update SimpleName: tgtIs(2219) to job", "Move SimpleName: tgtIs(2219) into MethodInvocation(1564) at 2", "Insert SimpleName: ctx(1567) into MethodInvocation(1570) at 0", "Insert SimpleName: getJobState(1568) into MethodInvocation(1570) at 1", "Insert SimpleName: job(1569) into MethodInvocation(1570) at 2", "Update SimpleName: getTaskState(209) to getJobState", "Update SimpleName: taskResource(669) to jobResource", "Update SimpleName: taskResource(679) to jobResource", "Move ClassInstanceCreation(777) into MethodInvocation(820) at 3", "Update SimpleName: taskResource(773) to jobResource", "Move ClassInstanceCreation(683) into MethodInvocation(914) at 3", "Insert SimpleName: tgtPartitionAssignments(1260) into MethodInvocation(1263) at 0", "Insert SimpleName: containsKey(1261) into MethodInvocation(1263) at 1", "Insert SimpleName: instance(1262) into MethodInvocation(1263) at 2", "Update SimpleName: task(1613) to job", "Update SimpleName: task(1631) to job", "Update SimpleName: taskResource(758) to jobResource", "Update SimpleName: taskTgtState(856) to jobTgtState", "Update SimpleName: taskCtx(923) to jobCtx", "Update SimpleName: taskCtx(951) to jobCtx", "Update SimpleName: taskCfg(1138) to jobCfg", "Update SimpleName: task(1621) to job", "Update SimpleName: taskCtx(956) to jobCtx", "Update SimpleName: taskCfg(960) to jobCfg", "Update SimpleName: getMaxAttemptsPerPartition(961) to getMaxAttemptsPerTask", "Update SimpleName: setTaskState(965) to setJobState", "Update SimpleName: taskResource(966) to jobResource", "Update SimpleName: getPartitionSet(977) to allPartitions", "Move SimpleName: getPartitionSet(977) into MethodInvocation(1113) at 1", "Update SimpleName: taskResource(983) to jobResource", "Move SimpleName: String(1356) into SimpleType: String(1315) at 0", "Update SimpleName: taskResource(1175) to jobResource", "Delete SimpleName: Set(1772)", "Delete SimpleType: Set(1773)", "Delete SimpleType: String(1775)", "Delete ParameterizedType: Set<String>(1776)", "Delete TextElement: do not need to(2098)", "Delete TextElement: be in any specific state to be considered.(2099)", "Delete SimpleName: Set(2135)", "Delete SimpleType: Set(2136)", "Delete SimpleType: String(2138)", "Delete ParameterizedType: Set<String>(2139)", "Delete SimpleName: clusterData(379)", "Delete SimpleName: getIdealState(380)", "Delete SimpleName: taskCfg(381)", "Delete SimpleName: getTargetResource(382)", "Delete MethodInvocation(383)", "Delete MethodInvocation(384)", "Delete Modifier: static(473)", "Delete SimpleName: String(477)", "Delete SimpleType: String(478)", "Delete SimpleName: tgtResourceIs(976)", "Delete MethodInvocation(978)", "Delete MethodInvocation(1097)", "Delete SimpleName: tgtStates(2230)", "Delete Javadoc(1343)", "Delete Modifier: private(1344)", "Delete Modifier: static(1345)", "Delete PrimitiveType: boolean(1346)", "Delete SimpleName: isWorkflowComplete(1347)", "Delete SimpleName: task(1358)", "Delete SingleVariableDeclaration(1359)", "Delete SimpleName: cfg(1360)", "Delete SimpleName: getTaskDag(1361)", "Delete MethodInvocation(1362)", "Delete SimpleName: getAllNodes(1363)", "Delete MethodInvocation(1364)", "Delete SimpleName: ctx(1365)", "Delete SimpleName: getTaskState(1366)", "Delete SimpleName: task(1367)", "Delete MethodInvocation(1368)", "Delete QualifiedName: TaskState.COMPLETED(1369)", "Delete InfixExpression: !=(1370)", "Delete IfStatement(1374)", "Delete Block(1375)", "Delete EnhancedForStatement(1376)", "Delete Block(1379)", "Delete MethodDeclaration(1380)", "Delete Modifier: private(1397)", "Delete Modifier: static(1398)", "Delete PrimitiveType: boolean(1399)", "Delete SimpleName: isWorkflowStopped(1400)", "Delete SimpleName: cfg(1413)", "Delete SimpleName: getTaskDag(1414)", "Delete MethodInvocation(1415)", "Delete SimpleName: getAllNodes(1416)", "Delete MethodInvocation(1417)", "Delete SimpleName: ctx(1418)", "Delete SimpleName: getTaskState(1419)", "Delete SimpleName: task(1420)", "Delete MethodInvocation(1421)", "Delete QualifiedName: TaskState.STOPPED(1422)", "Delete InfixExpression: !=(1423)", "Delete SimpleName: ctx(1424)", "Delete SimpleName: getTaskState(1425)", "Delete SimpleName: task(1426)", "Delete MethodInvocation(1427)", "Delete NullLiteral(1428)", "Delete InfixExpression: !=(1429)", "Delete InfixExpression: &&(1430)", "Delete IfStatement(1434)", "Delete Block(1435)", "Delete EnhancedForStatement(1436)", "Delete Block(1439)", "Delete MethodDeclaration(1440)", "Delete TextElement: is the last(1473)", "Delete SimpleName: get(2239)", "Delete SimpleName: instance(2240)", "Delete MethodInvocation(2241)", "Delete PrimitiveType: void(1770)", "Delete SingleVariableDeclaration(1789)", "Delete SimpleName: pNames(1790)", "Delete SimpleName: pIds(1791)", "Delete SimpleName: add(1792)", "Delete SimpleName: pId(1793)", "Delete SimpleName: pName(1794)", "Delete MethodInvocation(1795)", "Delete MethodInvocation(1796)", "Delete ExpressionStatement(1797)", "Delete Block(1798)", "Delete EnhancedForStatement(1799)", "Delete Block(1800)", "Delete MethodDeclaration(1801)", "Delete TextElement: Returns the set of all partition ids for a task.(1868)", "Delete TextElement: <p/>(1869)", "Delete TextElement: If a set of partition ids was explicitly specified in the config, that is used. Otherwise, we(1870)", "Delete TextElement: use the list of all partition ids from the target resource.(1871)", "Delete TagElement(1872)", "Delete Javadoc(1873)", "Delete Modifier: private(1874)", "Delete Modifier: static(1875)", "Delete SimpleName: getAllTaskPartitions(1881)", "Delete SimpleName: IdealState(1882)", "Delete SimpleType: IdealState(1883)", "Delete SimpleName: tgtResourceIs(1884)", "Delete SingleVariableDeclaration(1885)", "Delete SimpleName: taskPartitions(1895)", "Delete SimpleType: HashSet(1897)", "Delete SimpleName: Integer(1898)", "Delete SimpleType: Integer(1899)", "Delete ParameterizedType: HashSet<Integer>(1900)", "Delete ClassInstanceCreation(1901)", "Delete VariableDeclarationFragment(1902)", "Delete VariableDeclarationStatement(1903)", "Delete SimpleName: taskCfg(1904)", "Delete SimpleName: getTargetPartitions(1905)", "Delete MethodInvocation(1906)", "Delete NullLiteral(1907)", "Delete InfixExpression: !=(1908)", "Delete SimpleName: taskCfg(1913)", "Delete SimpleName: getTargetPartitions(1914)", "Delete MethodInvocation(1915)", "Delete SimpleName: taskPartitions(1916)", "Delete SimpleName: add(1917)", "Delete SimpleName: pId(1918)", "Delete MethodInvocation(1919)", "Delete ExpressionStatement(1920)", "Delete Block(1921)", "Delete EnhancedForStatement(1922)", "Delete Block(1923)", "Delete SingleVariableDeclaration(1927)", "Delete SimpleName: tgtResourceIs(1928)", "Delete SimpleName: getPartitionSet(1929)", "Delete MethodInvocation(1930)", "Delete SimpleName: taskPartitions(1931)", "Delete SimpleName: add(1932)", "Delete SimpleName: pId(1933)", "Delete SimpleName: pName(1934)", "Delete MethodInvocation(1935)", "Delete MethodInvocation(1936)", "Delete ExpressionStatement(1937)", "Delete Block(1938)", "Delete EnhancedForStatement(1939)", "Delete Block(1940)", "Delete IfStatement(1941)", "Delete SimpleName: taskPartitions(1942)", "Delete ReturnStatement(1943)", "Delete Block(1944)", "Delete MethodDeclaration(1945)", "Delete SimpleName: n(1982)", "Delete SimpleName: Map(2149)", "Delete SimpleType: Map(2150)", "Delete SimpleName: String(2151)", "Delete SimpleType: String(2152)", "Delete SimpleName: SortedSet(2153)", "Delete SimpleType: SortedSet(2154)", "Delete SimpleType: Integer(2156)", "Delete ParameterizedType: SortedSet<Integer>(2157)", "Delete ParameterizedType: Map<String,SortedSet<Integer>>(2158)", "Delete SimpleName: result(2159)", "Delete SimpleName: HashMap(2160)", "Delete SimpleType: HashMap(2161)", "Delete SimpleName: String(2162)", "Delete SimpleType: String(2163)", "Delete SimpleName: SortedSet(2164)", "Delete SimpleType: SortedSet(2165)", "Delete SimpleName: Integer(2166)", "Delete SimpleType: Integer(2167)", "Delete ParameterizedType: SortedSet<Integer>(2168)", "Delete ParameterizedType: HashMap<String,SortedSet<Integer>>(2169)", "Delete ClassInstanceCreation(2170)", "Delete VariableDeclarationFragment(2171)", "Delete VariableDeclarationStatement(2172)", "Delete SingleVariableDeclaration(2176)", "Delete SimpleName: instanceList(2177)", "Delete SimpleName: result(2178)", "Delete SimpleName: put(2179)", "Delete SimpleName: instance(2180)", "Delete SimpleType: TreeSet(2182)", "Delete SimpleName: Integer(2183)", "Delete SimpleType: Integer(2184)", "Delete ParameterizedType: TreeSet<Integer>(2185)", "Delete ClassInstanceCreation(2186)", "Delete MethodInvocation(2187)", "Delete ExpressionStatement(2188)", "Delete Block(2189)", "Delete EnhancedForStatement(2190)", "Delete SingleVariableDeclaration(2194)", "Delete SimpleName: tgtIs(2195)", "Delete SimpleName: getPartitionSet(2196)", "Delete MethodInvocation(2197)", "Delete PrimitiveType: int(2198)", "Delete SimpleName: pId(2199)", "Delete MethodInvocation(2202)", "Delete VariableDeclarationFragment(2203)", "Delete VariableDeclarationStatement(2204)", "Delete MethodInvocation(2208)", "Delete SimpleName: String(2209)", "Delete SimpleType: String(2210)", "Delete SimpleName: instance(2211)", "Delete SingleVariableDeclaration(2212)", "Delete SimpleName: instanceList(2213)", "Delete SimpleName: state(2216)", "Delete SimpleName: getResourceName(2220)", "Delete MethodInvocation(2221)", "Delete SimpleName: Partition(2222)", "Delete SimpleType: Partition(2223)", "Delete SimpleName: pName(2224)", "Delete ClassInstanceCreation(2225)", "Delete SimpleName: instance(2226)", "Delete MethodInvocation(2227)", "Delete VariableDeclarationFragment(2228)", "Delete VariableDeclarationStatement(2229)", "Delete SimpleName: tgtStates(2233)", "Delete SimpleName: contains(2234)", "Delete SimpleName: state(2235)", "Delete MethodInvocation(2236)", "Delete InfixExpression: ||(2237)", "Delete Block(2246)", "Delete IfStatement(2247)", "Delete Block(2248)", "Delete EnhancedForStatement(2249)", "Delete Block(2250)", "Delete IfStatement(2251)", "Delete Block(2252)", "Delete EnhancedForStatement(2253)", "Delete SimpleName: result(2254)", "Delete ReturnStatement(2255)", "Delete Block(2256)", "Delete MethodDeclaration(2257)"]}}, {"TaskResult_cluster": {"actions": []}}, {"TaskResult_diff": {"operations": []}}, {"TaskRunner_cluster": {"actions": []}}, {"TaskRunner_diff": {"operations": []}}, {"TaskState_cluster": {"actions": []}}, {"TaskState_diff": {"operations": []}}, {"TaskStateModel_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: taskConfig to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationStatement to Block at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: command to VariableDeclarationFragment at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: _manager to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: JobContext to SimpleType: JobContext at 0", "INS SimpleType: JobContext to VariableDeclarationStatement at 0", "INS SimpleName: ctx to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: msg to MethodInvocation at 0", "INS SimpleName: getResourceName to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: TaskUtil to MethodInvocation at 0", "INS SimpleName: getJobContext to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS SimpleName: parseInt to MethodInvocation at 1", "INS SimpleName: taskPartition to MethodInvocation at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 2", "INS CharacterLiteral: '_' to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: pId to VariableDeclarationFragment at 0", "INS SimpleName: substring to MethodInvocation at 1", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: lastIndexOf to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: taskPartition to MethodInvocation at 0"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 1", "INS SimpleName: taskConfig to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: pId to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: taskConfig to Assignment: = at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: ctx to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getTaskConfig to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: taskConfig to MethodInvocation at 0", "INS SimpleName: ctx to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS IfStatement to Block at 5", "INS SimpleName: getTaskIdForPartition to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS SimpleName: taskConfig to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: cfg to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getCommand to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: command to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: getCommand to MethodInvocation at 1", "INS SimpleName: getTaskIdForPartition to MethodInvocation at 1", "INS SimpleName: pId to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: TaskCallbackContext to SimpleType: TaskCallbackContext at 0", "INS SimpleName: TaskCallbackContext to SimpleType: TaskCallbackContext at 0", "INS SimpleType: TaskCallbackContext to ClassInstanceCreation at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleType: TaskCallbackContext to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: callbackContext to VariableDeclarationFragment at 0"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: callbackContext to MethodInvocation at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: _manager to MethodInvocation at 2", "INS SimpleName: setManager to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: callbackContext to MethodInvocation at 0", "INS SimpleName: cfg to MethodInvocation at 2", "INS ExpressionStatement to Block at 8", "INS SimpleName: setJobConfig to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS ExpressionStatement to Block at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: taskConfig to MethodInvocation at 2", "INS SimpleName: callbackContext to MethodInvocation at 0", "INS SimpleName: setTaskConfig to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 10", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: _taskFactoryRegistry to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: containsKey to MethodInvocation at 1", "INS SimpleName: command to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: _taskFactoryRegistry to MethodInvocation at 0", "INS InfixExpression: || to InfixExpression: || at 0", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS Block to IfStatement at 1", "INS ThrowStatement to Block at 0", "INS InfixExpression: || to IfStatement at 0", "INS IfStatement to Block at 10", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: command to MethodInvocation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS StringLiteral: \"No callback implemented for task \" to InfixExpression: + at 0", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SimpleName: command to InfixExpression: + at 1", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS SimpleType: JobConfig to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: JobConfig to VariableDeclarationStatement at 0", "INS SimpleName: JobConfig to SimpleType: JobConfig at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: TaskConfig to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from getTaskCfg to getJobCfg", "operations": ["UPD SimpleName: getTaskCfg from getTaskCfg to getJobCfg"]}, {"root": "INS SimpleName: command to MethodInvocation at 2", "operations": ["INS SimpleName: command to MethodInvocation at 2"]}, {"root": "UPDATE from cfg to callbackContext", "operations": ["UPD SimpleName: cfg from cfg to callbackContext"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: cfg to MethodInvocation at 2"]}, {"root": "UPDATE from getTimeoutPerPartition to getTimeoutPerTask", "operations": ["UPD SimpleName: getTimeoutPerPartition from getTimeoutPerPartition to getTimeoutPerTask"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getCommandConfig"]}]}}, {"TaskStateModel_diff": {"operations": ["Insert VariableDeclarationStatement(926) into Block(1116) at 1", "Insert VariableDeclarationStatement(934) into Block(1116) at 2", "Insert VariableDeclarationStatement(946) into Block(1116) at 3", "Insert VariableDeclarationStatement(962) into Block(1116) at 4", "Insert IfStatement(998) into Block(1116) at 5", "Insert VariableDeclarationStatement(1006) into Block(1116) at 6", "Insert ExpressionStatement(1011) into Block(1116) at 7", "Insert ExpressionStatement(1016) into Block(1116) at 8", "Insert ExpressionStatement(1021) into Block(1116) at 9", "Insert IfStatement(1043) into Block(1116) at 10", "Insert SimpleType: JobConfig(910) into VariableDeclarationStatement(920) at 0", "Move SimpleType: TaskConfig(910) into VariableDeclarationStatement(926) at 0", "Insert VariableDeclarationFragment(925) into VariableDeclarationStatement(926) at 1", "Insert SimpleType: String(928) into VariableDeclarationStatement(934) at 0", "Insert VariableDeclarationFragment(933) into VariableDeclarationStatement(934) at 1", "Insert SimpleType: JobContext(936) into VariableDeclarationStatement(946) at 0", "Insert VariableDeclarationFragment(945) into VariableDeclarationStatement(946) at 1", "Insert PrimitiveType: int(947) into VariableDeclarationStatement(962) at 0", "Insert VariableDeclarationFragment(961) into VariableDeclarationStatement(962) at 1", "Insert InfixExpression: !=(968) into IfStatement(998) at 0", "Insert Block(997) into IfStatement(998) at 1", "Insert SimpleType: TaskCallbackContext(1000) into VariableDeclarationStatement(1006) at 0", "Insert VariableDeclarationFragment(1005) into VariableDeclarationStatement(1006) at 1", "Insert MethodInvocation(1010) into ExpressionStatement(1011) at 0", "Insert MethodInvocation(1015) into ExpressionStatement(1016) at 0", "Insert MethodInvocation(1020) into ExpressionStatement(1021) at 0", "Insert InfixExpression: ||(1034) into IfStatement(1043) at 0", "Insert Block(1042) into IfStatement(1043) at 1", "Insert SimpleName: JobConfig(909) into SimpleType: JobConfig(910) at 0", "Insert SimpleName: taskConfig(923) into VariableDeclarationFragment(925) at 0", "Insert NullLiteral(924) into VariableDeclarationFragment(925) at 1", "Insert SimpleName: String(927) into SimpleType: String(928) at 0", "Insert SimpleName: command(929) into VariableDeclarationFragment(933) at 0", "Move MethodInvocation(928) into VariableDeclarationFragment(933) at 1", "Insert SimpleName: JobContext(935) into SimpleType: JobContext(936) at 0", "Insert SimpleName: ctx(937) into VariableDeclarationFragment(945) at 0", "Insert MethodInvocation(944) into VariableDeclarationFragment(945) at 1", "Insert SimpleName: pId(948) into VariableDeclarationFragment(961) at 0", "Insert MethodInvocation(960) into VariableDeclarationFragment(961) at 1", "Insert MethodInvocation(966) into InfixExpression: !=(968) at 0", "Insert NullLiteral(967) into InfixExpression: !=(968) at 1", "Insert ExpressionStatement(978) into Block(997) at 0", "Insert IfStatement(996) into Block(997) at 1", "Insert SimpleName: TaskCallbackContext(999) into SimpleType: TaskCallbackContext(1000) at 0", "Insert SimpleName: callbackContext(1001) into VariableDeclarationFragment(1005) at 0", "Insert ClassInstanceCreation(1004) into VariableDeclarationFragment(1005) at 1", "Insert SimpleName: callbackContext(1007) into MethodInvocation(1010) at 0", "Insert SimpleName: setManager(1008) into MethodInvocation(1010) at 1", "Insert SimpleName: _manager(1009) into MethodInvocation(1010) at 2", "Insert SimpleName: callbackContext(1012) into MethodInvocation(1015) at 0", "Insert SimpleName: setJobConfig(1013) into MethodInvocation(1015) at 1", "Insert SimpleName: cfg(1014) into MethodInvocation(1015) at 2", "Insert SimpleName: callbackContext(1017) into MethodInvocation(1020) at 0", "Insert SimpleName: setTaskConfig(1018) into MethodInvocation(1020) at 1", "Insert SimpleName: taskConfig(1019) into MethodInvocation(1020) at 2", "Insert InfixExpression: ||(1028) into InfixExpression: ||(1034) at 0", "Insert PrefixExpression: !(1033) into InfixExpression: ||(1034) at 1", "Insert ThrowStatement(1041) into Block(1042) at 0", "Update SimpleName: getTaskCfg(913) to getJobCfg", "Insert SimpleName: TaskUtil(938) into MethodInvocation(944) at 0", "Insert SimpleName: getJobContext(939) into MethodInvocation(944) at 1", "Insert SimpleName: _manager(940) into MethodInvocation(944) at 2", "Insert MethodInvocation(943) into MethodInvocation(944) at 3", "Insert SimpleName: Integer(949) into MethodInvocation(960) at 0", "Insert SimpleName: parseInt(950) into MethodInvocation(960) at 1", "Insert MethodInvocation(959) into MethodInvocation(960) at 2", "Insert SimpleName: ctx(963) into MethodInvocation(966) at 0", "Insert SimpleName: getTaskIdForPartition(964) into MethodInvocation(966) at 1", "Insert SimpleName: pId(965) into MethodInvocation(966) at 2", "Insert Assignment: =(977) into ExpressionStatement(978) at 0", "Insert InfixExpression: !=(981) into IfStatement(996) at 0", "Insert Block(995) into IfStatement(996) at 1", "Insert SimpleType: TaskCallbackContext(1003) into ClassInstanceCreation(1004) at 0", "Insert InfixExpression: ==(1024) into InfixExpression: ||(1028) at 0", "Insert InfixExpression: ==(1027) into InfixExpression: ||(1028) at 1", "Insert MethodInvocation(1032) into PrefixExpression: !(1033) at 0", "Insert ClassInstanceCreation(1040) into ThrowStatement(1041) at 0", "Insert SimpleName: command(1049) into MethodInvocation(1050) at 2", "Update SimpleName: cfg(937) to callbackContext", "Move SimpleName: cfg(937) into MethodInvocation(1059) at 2", "Update SimpleName: getTimeoutPerPartition(993) to getTimeoutPerTask", "Insert SimpleName: msg(941) into MethodInvocation(943) at 0", "Insert SimpleName: getResourceName(942) into MethodInvocation(943) at 1", "Insert SimpleName: taskPartition(951) into MethodInvocation(959) at 0", "Insert SimpleName: substring(952) into MethodInvocation(959) at 1", "Insert InfixExpression: +(958) into MethodInvocation(959) at 2", "Insert SimpleName: taskConfig(969) into Assignment: =(977) at 0", "Insert MethodInvocation(976) into Assignment: =(977) at 1", "Insert SimpleName: taskConfig(979) into InfixExpression: !=(981) at 0", "Insert NullLiteral(980) into InfixExpression: !=(981) at 1", "Insert IfStatement(994) into Block(995) at 0", "Insert SimpleName: TaskCallbackContext(1002) into SimpleType: TaskCallbackContext(1003) at 0", "Insert SimpleName: command(1022) into InfixExpression: ==(1024) at 0", "Insert NullLiteral(1023) into InfixExpression: ==(1024) at 1", "Insert SimpleName: _taskFactoryRegistry(1025) into InfixExpression: ==(1027) at 0", "Insert NullLiteral(1026) into InfixExpression: ==(1027) at 1", "Insert SimpleName: _taskFactoryRegistry(1029) into MethodInvocation(1032) at 0", "Insert SimpleName: containsKey(1030) into MethodInvocation(1032) at 1", "Insert SimpleName: command(1031) into MethodInvocation(1032) at 2", "Insert SimpleType: IllegalStateException(1036) into ClassInstanceCreation(1040) at 0", "Insert InfixExpression: +(1039) into ClassInstanceCreation(1040) at 1", "Insert MethodInvocation(956) into InfixExpression: +(958) at 0", "Insert NumberLiteral: 1(957) into InfixExpression: +(958) at 1", "Insert SimpleName: cfg(970) into MethodInvocation(976) at 0", "Insert SimpleName: getTaskConfig(971) into MethodInvocation(976) at 1", "Insert MethodInvocation(975) into MethodInvocation(976) at 2", "Insert InfixExpression: !=(986) into IfStatement(994) at 0", "Insert Block(993) into IfStatement(994) at 1", "Insert SimpleName: IllegalStateException(1035) into SimpleType: IllegalStateException(1036) at 0", "Insert StringLiteral: \"No callback implemented for task \"(1037) into InfixExpression: +(1039) at 0", "Insert SimpleName: command(1038) into InfixExpression: +(1039) at 1", "Insert SimpleName: taskPartition(953) into MethodInvocation(956) at 0", "Insert SimpleName: lastIndexOf(954) into MethodInvocation(956) at 1", "Insert CharacterLiteral: '_'(955) into MethodInvocation(956) at 2", "Insert SimpleName: ctx(972) into MethodInvocation(975) at 0", "Insert SimpleName: getTaskIdForPartition(973) into MethodInvocation(975) at 1", "Insert SimpleName: pId(974) into MethodInvocation(975) at 2", "Insert MethodInvocation(984) into InfixExpression: !=(986) at 0", "Insert NullLiteral(985) into InfixExpression: !=(986) at 1", "Insert ExpressionStatement(992) into Block(993) at 0", "Insert SimpleName: taskConfig(982) into MethodInvocation(984) at 0", "Insert SimpleName: getCommand(983) into MethodInvocation(984) at 1", "Insert Assignment: =(991) into ExpressionStatement(992) at 0", "Insert SimpleName: command(987) into Assignment: =(991) at 0", "Insert MethodInvocation(990) into Assignment: =(991) at 1", "Insert SimpleName: taskConfig(988) into MethodInvocation(990) at 0", "Insert SimpleName: getCommand(989) into MethodInvocation(990) at 1", "Delete SimpleName: getCommandConfig(938)", "Delete MethodInvocation(939)"]}}, {"TaskStateModelFactory_cluster": {"actions": []}}, {"TaskStateModelFactory_diff": {"operations": []}}, {"Workflow_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: java.util.Collection to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: java.util.List to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: org.apache.helix.task.beans.JobBean to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS ImportDeclaration to CompilationUnit at 18", "INS QualifiedName: com.google.common.collect.Lists to ImportDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleType: List to ParameterizedType: List<TaskConfig> at 0", "INS SimpleType: String to ParameterizedType: Map<String,List<TaskConfig>> at 1", "INS Modifier: private to FieldDeclaration at 1", "INS TextElement: Containers the per-job configurations of all individually-specified tasks  to TagElement at 0", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0", "INS SimpleType: TaskConfig to ParameterizedType: List<TaskConfig> at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: Map to ParameterizedType: Map<String,List<TaskConfig>> at 0", "INS ParameterizedType: List<TaskConfig> to ParameterizedType: Map<String,List<TaskConfig>> at 2", "INS Javadoc to FieldDeclaration at 0", "INS ParameterizedType: Map<String,List<TaskConfig>> to FieldDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: Map to SimpleType: Map at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<TaskConfig> at 0", "INS SimpleType: TaskConfig to ParameterizedType: List<TaskConfig> at 1", "INS SimpleName: getTaskConfigs to MethodDeclaration at 2", "INS SimpleType: Map to ParameterizedType: Map<String,List<TaskConfig>> at 0", "INS ParameterizedType: Map<String,List<TaskConfig>> to MethodDeclaration at 1", "INS SimpleType: String to ParameterizedType: Map<String,List<TaskConfig>> at 1", "INS ParameterizedType: List<TaskConfig> to ParameterizedType: Map<String,List<TaskConfig>> at 2", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 7"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 3", "operations": ["INS SimpleName: _jobConfigs to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: taskConfigs to SingleVariableDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<TaskConfig> at 0", "INS ParameterizedType: Map<String,List<TaskConfig>> to SingleVariableDeclaration at 0", "INS SimpleType: TaskConfig to ParameterizedType: List<TaskConfig> at 1", "INS ParameterizedType: List<TaskConfig> to ParameterizedType: Map<String,List<TaskConfig>> at 2", "INS SimpleType: String to ParameterizedType: Map<String,List<TaskConfig>> at 1", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: Map to ParameterizedType: Map<String,List<TaskConfig>> at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from getTaskConfigs to getJobConfigs", "operations": ["UPD SimpleName: getTaskConfigs from getTaskConfigs to getJobConfigs"]}, {"root": "INS Block to MethodDeclaration at 3", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: _jobConfigs to ReturnStatement at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 3"]}, {"root": "INS SimpleType: JobConfig to MethodDeclaration at 2", "operations": ["INS SimpleType: JobConfig to MethodDeclaration at 2", "INS SimpleName: JobConfig to SimpleType: JobConfig at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: JobDag to SimpleType: JobDag at 0", "INS SimpleType: JobDag to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: node to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: addJobConfigMap to MethodDeclaration at 2", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Map to ParameterizedType: Map<String,String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: String to ParameterizedType: Map<String,String> at 1", "INS SimpleName: TaskUtil to MethodInvocation at 0", "INS SimpleType: Builder to MethodDeclaration at 1", "INS ParameterizedType: Map<String,String> to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: jobConfigMap to MethodInvocation at 2", "INS SimpleName: serializeJobConfigMap to MethodInvocation at 1", "INS SimpleName: jobConfigMap to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS QualifiedName: JobConfig.JOB_CONFIG_MAP to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: addConfig to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: entrySet to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS EnhancedForStatement to Block at 0", "INS SimpleName: JobConfig to SimpleType: JobConfig at 0", "INS SimpleName: addConfig to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS SimpleName: jobConfig to MethodInvocation at 0", "INS SimpleName: getResourceConfigMap to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Map.Entry<String,String> to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: getKey to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleType: String to ParameterizedType: Map.Entry<String,String> at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<String,String> at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: val to MethodInvocation at 3", "INS SimpleType: String to ParameterizedType: Map.Entry<String,String> at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: values to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS ThisExpression to ReturnStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: jobConfig to MethodInvocation at 0", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: key to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleType: JobConfig to SingleVariableDeclaration at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: jobConfig to SingleVariableDeclaration at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: addTaskConfigs to MethodInvocation at 0", "INS SimpleName: getTaskConfigMap to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: key to VariableDeclarationFragment at 0", "INS SimpleName: addJobConfig to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Builder to MethodDeclaration at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: val to VariableDeclarationFragment at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: TaskConfig to ParameterizedType: Collection<TaskConfig> at 1", "INS Block to MethodDeclaration at 5", "INS SimpleType: Collection to ParameterizedType: Collection<TaskConfig> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: Builder to SimpleType: Builder at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ParameterizedType: Collection<TaskConfig> to SingleVariableDeclaration at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: taskConfigs to MethodInvocation at 2", "INS SimpleType: Builder to MethodDeclaration at 1", "INS SimpleName: containsKey to MethodInvocation at 1", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: _jobConfigs to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleType: TaskConfig to ParameterizedType: ArrayList<TaskConfig> at 1", "INS SimpleName: taskConfigs to SingleVariableDeclaration at 1", "INS SimpleName: TreeMap to SimpleType: TreeMap at 0", "INS SimpleName: put to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS SimpleName: node to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS ParameterizedType: ArrayList<TaskConfig> to ClassInstanceCreation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: String to ParameterizedType: TreeMap<String,String> at 1", "INS SimpleName: addTaskConfigs to MethodDeclaration at 2", "INS SimpleName: _jobConfigs to MethodInvocation at 0", "INS SimpleName: _taskConfigs to MethodInvocation at 0", "INS SimpleName: node to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0", "INS ParameterizedType: TreeMap<String,String> to ClassInstanceCreation at 0", "INS SimpleType: String to ParameterizedType: TreeMap<String,String> at 2", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<TaskConfig> at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS ExpressionStatement to Block at 4", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleType: TreeMap to ParameterizedType: TreeMap<String,String> at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "UPDATE from Houses a task dag and config set to fully describe a task workflow to Houses a job dag and config set to fully describe a job workflow", "operations": ["UPD TextElement: Houses a task dag and config set to fully describe a task workflow from Houses a task dag and config set to fully describe a task workflow to Houses a job dag and config set to fully describe a job workflow"]}, {"root": "UPDATE from taskConfigs to jobConfigs", "operations": ["UPD SimpleName: taskConfigs from taskConfigs to jobConfigs"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: jobConfigs to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: _jobConfigs to Assignment: = at 0"]}, {"root": "UPDATE from task to job", "operations": ["UPD SimpleName: task from task to job", "UPD SimpleName: task from task to job"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS QualifiedName: JobConfig.Builder to SimpleType: JobConfig.Builder at 0", "INS SimpleName: b to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: JobConfig.Builder to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: b to MethodInvocation at 0", "INS SimpleName: _taskConfigs to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: _taskConfigs to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: _taskConfigs to InfixExpression: != at 0", "INS SimpleName: job to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: containsKey to MethodInvocation at 1", "INS SimpleName: addTaskConfigs to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: job to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleName: b to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 2", "operations": ["INS SimpleName: _jobConfigs to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS ParameterizedType: Map<String,List<TaskConfig>> to FieldDeclaration at 1", "operations": ["INS SimpleType: Map to ParameterizedType: Map<String,List<TaskConfig>> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<TaskConfig> to ParameterizedType: Map<String,List<TaskConfig>> at 2", "INS SimpleType: String to ParameterizedType: Map<String,List<TaskConfig>> at 1", "INS ParameterizedType: Map<String,List<TaskConfig>> to FieldDeclaration at 1", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: List to ParameterizedType: List<TaskConfig> at 0", "INS SimpleType: TaskConfig to ParameterizedType: List<TaskConfig> at 1"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS SimpleType: String to MethodDeclaration at 1", "operations": ["INS SimpleType: String to MethodDeclaration at 1", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from Contains the per-task configurations for all tasks specified in the provided dag  to Contains the per-job configurations for all jobs specified in the provided dag ", "operations": ["UPD TextElement: Contains the per-task configurations for all tasks specified in the provided dag  from Contains the per-task configurations for all tasks specified in the provided dag  to Contains the per-job configurations for all jobs specified in the provided dag "]}, {"root": "UPDATE from tasks: to jobs:", "operations": ["UPD TextElement: tasks: from tasks: to jobs:"]}, {"root": "UPDATE from - name : TaskA to - name : JobA", "operations": ["UPD TextElement: - name : TaskA from - name : TaskA to - name : JobA"]}, {"root": "UPDATE from - name : TaskB to - name : JobB", "operations": ["UPD TextElement: - name : TaskB from - name : TaskB to - name : JobB"]}, {"root": "UPDATE from parents : [TaskA] to parents : [JobA]", "operations": ["UPD TextElement: parents : [TaskA] from parents : [TaskA] to parents : [JobA]"]}, {"root": "UPDATE from - name : TaskC to - name : JobC", "operations": ["UPD TextElement: - name : TaskC from - name : TaskC to - name : JobC"]}, {"root": "UPDATE from - name : TaskD to - name : JobD", "operations": ["UPD TextElement: - name : TaskD from - name : TaskD to - name : JobD"]}, {"root": "UPDATE from parents : [TaskB, TaskC] to parents : [JobB, JobC]", "operations": ["UPD TextElement: parents : [TaskB, TaskC] from parents : [TaskB, TaskC] to parents : [JobB, JobC]"]}, {"root": "INS SingleVariableDeclaration to EnhancedForStatement at 0", "operations": ["INS SimpleType: JobBean to SingleVariableDeclaration at 0", "INS SimpleName: JobBean to SimpleType: JobBean at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: job to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from wf.tasks to wf.jobs", "operations": ["UPD QualifiedName: wf.tasks from wf.tasks to wf.jobs"]}, {"root": "UPDATE from Builds a TaskConfig from config map. Useful for validating configs  to Builds a JobConfig from config map. Useful for validating configs ", "operations": ["UPD TextElement: Builds a TaskConfig from config map. Useful for validating configs  from Builds a TaskConfig from config map. Useful for validating configs  to Builds a JobConfig from config map. Useful for validating configs "]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: _taskConfigs to Assignment: = at 0", "INS ParameterizedType: List<TaskConfig> to ParameterizedType: TreeMap<String,List<TaskConfig>> at 2", "INS SimpleType: List to ParameterizedType: List<TaskConfig> at 0", "INS SimpleName: TaskConfig to SimpleType: TaskConfig at 0", "INS SimpleType: TaskConfig to ParameterizedType: List<TaskConfig> at 1", "INS SimpleType: TreeMap to ParameterizedType: TreeMap<String,List<TaskConfig>> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: TreeMap<String,List<TaskConfig>> to ClassInstanceCreation at 0", "INS SimpleName: TreeMap to SimpleType: TreeMap at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: node to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: namespacify to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: node to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: _dag to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: addNode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: node to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS ReturnStatement to Block at 6", "INS ThisExpression to ReturnStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0", "MOV ReturnStatement to Block at 5"]}, {"root": "INS IfStatement to Block at 11", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: task to MethodInvocation at 2", "INS ParameterizedType: List<TaskConfig> to VariableDeclarationStatement at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: taskConfigs to MethodInvocation at 3", "INS QualifiedName: job.tasks to InfixExpression: != at 0", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<TaskConfig> at 0", "INS Block to IfStatement at 1", "INS EnhancedForStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: taskConfigs to VariableDeclarationFragment at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: builder to MethodInvocation at 0", "INS QualifiedName: job.tasks to EnhancedForStatement at 1", "INS SimpleName: from to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: addTaskConfigs to MethodInvocation at 1", "INS IfStatement to Block at 11", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: TaskConfig to MethodInvocation at 0", "INS QualifiedName: job.name to MethodInvocation at 2", "INS SimpleName: taskConfigs to MethodInvocation at 0"]}, {"root": "UPDATE from _taskConfigs to _jobConfigs", "operations": ["UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs", "UPD SimpleName: _taskConfigs from _taskConfigs to _jobConfigs"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: node to MethodInvocation at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: containsKey to MethodInvocation at 1", "INS SimpleName: _jobConfigs to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "UPDATE from getTaskDag to getJobDag", "operations": ["UPD SimpleName: getTaskDag from getTaskDag to getJobDag", "UPD SimpleName: getTaskDag from getTaskDag to getJobDag", "UPD SimpleName: getTaskDag from getTaskDag to getJobDag", "UPD SimpleName: getTaskDag from getTaskDag to getJobDag"]}, {"root": "UPDATE from TaskConfig.Builder to JobConfig.Builder", "operations": ["UPD QualifiedName: TaskConfig.Builder from TaskConfig.Builder to JobConfig.Builder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV QualifiedName: TaskConfig.Builder to MethodInvocation at 0", "MOV SimpleName: fromMap to MethodInvocation at 1"]}, {"root": "UPDATE from TaskDag to TaskConfig", "operations": ["UPD SimpleName: TaskDag from TaskDag to TaskConfig"]}, {"root": "MOVE from SimpleType: TaskConfig", "operations": ["MOV SimpleName: TaskDag to SimpleType: TaskConfig at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: _jobConfigs to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from getNamespacedTaskName to getNamespacedJobName", "operations": ["UPD SimpleName: getNamespacedTaskName from getNamespacedTaskName to getNamespacedJobName"]}, {"root": "INS SimpleName: _jobConfigs to ClassInstanceCreation at 3", "operations": ["INS SimpleName: _jobConfigs to ClassInstanceCreation at 3"]}, {"root": "UPDATE from task.name to job.name", "operations": ["UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name", "UPD QualifiedName: task.name from task.name to job.name"]}, {"root": "UPDATE from task.parents to job.parents", "operations": ["UPD QualifiedName: task.parents from task.parents to job.parents", "UPD QualifiedName: task.parents from task.parents to job.parents"]}, {"root": "UPDATE from TaskConfig.WORKFLOW_ID to JobConfig.WORKFLOW_ID", "operations": ["UPD QualifiedName: TaskConfig.WORKFLOW_ID from TaskConfig.WORKFLOW_ID to JobConfig.WORKFLOW_ID", "UPD QualifiedName: TaskConfig.WORKFLOW_ID from TaskConfig.WORKFLOW_ID to JobConfig.WORKFLOW_ID"]}, {"root": "UPDATE from TaskConfig.COMMAND to JobConfig.COMMAND", "operations": ["UPD QualifiedName: TaskConfig.COMMAND from TaskConfig.COMMAND to JobConfig.COMMAND"]}, {"root": "UPDATE from task.command to job.command", "operations": ["UPD QualifiedName: task.command from task.command to job.command"]}, {"root": "UPDATE from task.commandConfig to job.jobConfigMap", "operations": ["UPD QualifiedName: task.commandConfig from task.commandConfig to job.jobConfigMap", "UPD QualifiedName: task.commandConfig from task.commandConfig to job.jobConfigMap"]}, {"root": "UPDATE from TaskConfig.TARGET_RESOURCE to JobConfig.TARGET_RESOURCE", "operations": ["UPD QualifiedName: TaskConfig.TARGET_RESOURCE from TaskConfig.TARGET_RESOURCE to JobConfig.TARGET_RESOURCE"]}, {"root": "UPDATE from task.targetResource to job.targetResource", "operations": ["UPD QualifiedName: task.targetResource from task.targetResource to job.targetResource"]}, {"root": "UPDATE from task.targetPartitions to job.targetPartitionStates", "operations": ["UPD QualifiedName: task.targetPartitions from task.targetPartitions to job.targetPartitionStates", "UPD QualifiedName: task.targetPartitionStates from task.targetPartitionStates to job.targetPartitionStates"]}, {"root": "UPDATE from task.targetPartitions to job.targetPartitions", "operations": ["UPD QualifiedName: task.targetPartitions from task.targetPartitions to job.targetPartitions", "UPD QualifiedName: task.targetPartitionStates from task.targetPartitionStates to job.targetPartitions"]}, {"root": "UPDATE from TaskConfig.MAX_ATTEMPTS_PER_PARTITION to JobConfig.MAX_ATTEMPTS_PER_TASK", "operations": ["UPD QualifiedName: TaskConfig.MAX_ATTEMPTS_PER_PARTITION from TaskConfig.MAX_ATTEMPTS_PER_PARTITION to JobConfig.MAX_ATTEMPTS_PER_TASK"]}, {"root": "UPDATE from TaskConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE to JobConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE", "operations": ["UPD QualifiedName: TaskConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE from TaskConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE to JobConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE"]}, {"root": "UPDATE from TaskConfig.TIMEOUT_PER_PARTITION to JobConfig.TIMEOUT_PER_TASK", "operations": ["UPD QualifiedName: TaskConfig.TIMEOUT_PER_PARTITION from TaskConfig.TIMEOUT_PER_PARTITION to JobConfig.TIMEOUT_PER_TASK"]}, {"root": "UPDATE from TaskDag to JobDag", "operations": ["UPD SimpleType: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag"]}, {"root": "UPDATE from task.maxAttemptsPerPartition to job.maxAttemptsPerPartition", "operations": ["UPD QualifiedName: task.maxAttemptsPerPartition from task.maxAttemptsPerPartition to job.maxAttemptsPerPartition"]}, {"root": "UPDATE from task.numConcurrentTasksPerInstance to job.numConcurrentTasksPerInstance", "operations": ["UPD QualifiedName: task.numConcurrentTasksPerInstance from task.numConcurrentTasksPerInstance to job.numConcurrentTasksPerInstance"]}, {"root": "UPDATE from task.timeoutPerPartition to job.timeoutPerPartition", "operations": ["UPD QualifiedName: task.timeoutPerPartition from task.timeoutPerPartition to job.timeoutPerPartition"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from ParameterizedType: TreeMap<String,List<TaskConfig>>", "operations": ["MOV SimpleType: String to ParameterizedType: TreeMap<String,List<TaskConfig>> at 1"]}, {"root": "UPDATE from \"A task must have a name.\" to \"A job must have a name.\"", "operations": ["UPD StringLiteral: \"A task must have a name.\" from \"A task must have a name.\" to \"A job must have a name.\""]}, {"root": "UPDATE from TaskConfig.COMMAND_CONFIG to JobConfig.JOB_CONFIG_MAP", "operations": ["UPD QualifiedName: TaskConfig.COMMAND_CONFIG from TaskConfig.COMMAND_CONFIG to JobConfig.JOB_CONFIG_MAP"]}, {"root": "UPDATE from TaskConfig.TARGET_PARTITION_STATES to JobConfig.TARGET_PARTITION_STATES", "operations": ["UPD QualifiedName: TaskConfig.TARGET_PARTITION_STATES from TaskConfig.TARGET_PARTITION_STATES to JobConfig.TARGET_PARTITION_STATES"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 4"]}, {"root": "UPDATE from TaskConfig.TARGET_PARTITIONS to JobConfig.TARGET_PARTITIONS", "operations": ["UPD QualifiedName: TaskConfig.TARGET_PARTITIONS from TaskConfig.TARGET_PARTITIONS to JobConfig.TARGET_PARTITIONS"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 4"]}, {"root": "MOVE from ParameterizedType: List<TaskConfig>", "operations": ["MOV SimpleType: TaskConfig to ParameterizedType: List<TaskConfig> at 1"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL SimpleType: TaskDag", "operations": ["DEL SimpleType: TaskDag"]}]}}, {"Workflow_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(1179) at 6", "Insert ImportDeclaration(15) into CompilationUnit(1179) at 7", "Insert ImportDeclaration(19) into CompilationUnit(1179) at 9", "Insert ImportDeclaration(25) into CompilationUnit(1179) at 12", "Insert ImportDeclaration(37) into CompilationUnit(1179) at 18", "Insert QualifiedName: java.util.ArrayList(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: java.util.Collection(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.List(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.helix.task.beans.JobBean(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: com.google.common.collect.Lists(36) into ImportDeclaration(37) at 0", "Insert FieldDeclaration(108) into TypeDeclaration: class(1178) at 7", "Insert MethodDeclaration(210) into TypeDeclaration: class(1178) at 11", "Move FieldDeclaration(614) into TypeDeclaration: class(1177) at 7", "Insert VariableDeclarationFragment(90) into FieldDeclaration(91) at 3", "Insert Javadoc(94) into FieldDeclaration(108) at 0", "Insert Modifier: private(95) into FieldDeclaration(108) at 1", "Insert ParameterizedType: Map<String,List<TaskConfig>>(105) into FieldDeclaration(108) at 2", "Move VariableDeclarationFragment(80) into FieldDeclaration(108) at 3", "Insert SingleVariableDeclaration(147) into MethodDeclaration(168) at 6", "Update SimpleName: getTaskConfigs(147) to getJobConfigs", "Insert Block(193) into MethodDeclaration(194) at 3", "Insert Modifier: public(195) into MethodDeclaration(210) at 0", "Insert ParameterizedType: Map<String,List<TaskConfig>>(205) into MethodDeclaration(210) at 1", "Insert SimpleName: getTaskConfigs(206) into MethodDeclaration(210) at 2", "Move Block(150) into MethodDeclaration(210) at 3", "Insert SimpleType: JobConfig(675) into MethodDeclaration(716) at 2", "Insert FieldDeclaration(734) into TypeDeclaration: class(1177) at 5", "Insert MethodDeclaration(910) into TypeDeclaration: class(1177) at 11", "Insert MethodDeclaration(973) into TypeDeclaration: class(1177) at 12", "Insert MethodDeclaration(1049) into TypeDeclaration: class(1177) at 13", "Update TextElement: Houses a task dag and config set to fully describe a task workflow(28) to Houses a job dag and config set to fully describe a job workflow", "Insert SimpleName: _jobConfigs(89) into VariableDeclarationFragment(90) at 0", "Insert TagElement(93) into Javadoc(94) at 0", "Insert SimpleType: Map(97) into ParameterizedType: Map<String,List<TaskConfig>>(105) at 0", "Insert SimpleType: String(99) into ParameterizedType: Map<String,List<TaskConfig>>(105) at 1", "Insert ParameterizedType: List<TaskConfig>(104) into ParameterizedType: Map<String,List<TaskConfig>>(105) at 2", "Update SimpleName: taskConfigs(107) to jobConfigs", "Insert ParameterizedType: Map<String,List<TaskConfig>>(145) into SingleVariableDeclaration(147) at 0", "Insert SimpleName: taskConfigs(146) into SingleVariableDeclaration(147) at 1", "Insert ExpressionStatement(159) into Block(167) at 2", "Insert ReturnStatement(192) into Block(193) at 0", "Insert SimpleType: Map(197) into ParameterizedType: Map<String,List<TaskConfig>>(205) at 0", "Insert SimpleType: String(199) into ParameterizedType: Map<String,List<TaskConfig>>(205) at 1", "Insert ParameterizedType: List<TaskConfig>(204) into ParameterizedType: Map<String,List<TaskConfig>>(205) at 2", "Insert SimpleName: JobConfig(674) into SimpleType: JobConfig(675) at 0", "Update SimpleName: task(583) to job", "Insert VariableDeclarationStatement(692) into Block(715) at 0", "Insert IfStatement(710) into Block(715) at 1", "Insert ReturnStatement(714) into Block(715) at 2", "Insert Modifier: private(729) into FieldDeclaration(734) at 0", "Insert SimpleType: JobDag(731) into FieldDeclaration(734) at 1", "Move VariableDeclarationFragment(613) into FieldDeclaration(734) at 2", "Insert VariableDeclarationFragment(749) into FieldDeclaration(750) at 2", "Insert ParameterizedType: Map<String,List<TaskConfig>>(761) into FieldDeclaration(764) at 1", "Move VariableDeclarationFragment(629) into FieldDeclaration(764) at 2", "Insert Modifier: public(883) into MethodDeclaration(910) at 0", "Insert SimpleType: Builder(885) into MethodDeclaration(910) at 1", "Insert SimpleName: addJobConfigMap(886) into MethodDeclaration(910) at 2", "Insert SingleVariableDeclaration(890) into MethodDeclaration(910) at 3", "Insert SingleVariableDeclaration(899) into MethodDeclaration(910) at 4", "Insert Block(909) into MethodDeclaration(910) at 5", "Insert Modifier: public(911) into MethodDeclaration(973) at 0", "Insert SimpleType: Builder(913) into MethodDeclaration(973) at 1", "Insert SimpleName: addJobConfig(914) into MethodDeclaration(973) at 2", "Insert SingleVariableDeclaration(918) into MethodDeclaration(973) at 3", "Insert SingleVariableDeclaration(922) into MethodDeclaration(973) at 4", "Insert Block(972) into MethodDeclaration(973) at 5", "Insert Modifier: public(974) into MethodDeclaration(1049) at 0", "Insert SimpleType: Builder(976) into MethodDeclaration(1049) at 1", "Insert SimpleName: addTaskConfigs(977) into MethodDeclaration(1049) at 2", "Insert SingleVariableDeclaration(981) into MethodDeclaration(1049) at 3", "Insert SingleVariableDeclaration(988) into MethodDeclaration(1049) at 4", "Insert Block(1048) into MethodDeclaration(1049) at 5", "Insert SimpleType: String(1101) into MethodDeclaration(1114) at 1", "Update TextElement: Contains the per-task configurations for all tasks specified in the provided dag (63) to Contains the per-job configurations for all jobs specified in the provided dag ", "Insert TextElement: Containers the per-job configurations of all individually-specified tasks (92) into TagElement(93) at 0", "Insert SimpleName: Map(96) into SimpleType: Map(97) at 0", "Insert SimpleName: String(98) into SimpleType: String(99) at 0", "Insert SimpleType: List(101) into ParameterizedType: List<TaskConfig>(104) at 0", "Insert SimpleType: TaskConfig(103) into ParameterizedType: List<TaskConfig>(104) at 1", "Insert SimpleType: Map(137) into ParameterizedType: Map<String,List<TaskConfig>>(145) at 0", "Insert SimpleType: String(139) into ParameterizedType: Map<String,List<TaskConfig>>(145) at 1", "Insert ParameterizedType: List<TaskConfig>(144) into ParameterizedType: Map<String,List<TaskConfig>>(145) at 2", "Insert Assignment: =(158) into ExpressionStatement(159) at 0", "Insert SimpleName: _jobConfigs(191) into ReturnStatement(192) at 0", "Insert SimpleName: Map(196) into SimpleType: Map(197) at 0", "Insert SimpleName: String(198) into SimpleType: String(199) at 0", "Insert SimpleType: List(201) into ParameterizedType: List<TaskConfig>(204) at 0", "Insert SimpleType: TaskConfig(203) into ParameterizedType: List<TaskConfig>(204) at 1", "Update TextElement: tasks:(270) to jobs:", "Update TextElement: - name : TaskA(271) to - name : JobA", "Update TextElement: - name : TaskB(274) to - name : JobB", "Update TextElement: parents : [TaskA](275) to parents : [JobA]", "Update TextElement: - name : TaskC(278) to - name : JobC", "Update TextElement: - name : TaskD(281) to - name : JobD", "Update TextElement: parents : [TaskB, TaskC](282) to parents : [JobB, JobC]", "Insert SingleVariableDeclaration(430) into EnhancedForStatement(599) at 0", "Update QualifiedName: wf.tasks(372) to wf.jobs", "Update TextElement: Builds a TaskConfig from config map. Useful for validating configs (574) to Builds a JobConfig from config map. Useful for validating configs ", "Insert SimpleType: JobConfig.Builder(682) into VariableDeclarationStatement(692) at 0", "Insert VariableDeclarationFragment(691) into VariableDeclarationStatement(692) at 1", "Insert InfixExpression: &&(700) into IfStatement(710) at 0", "Insert Block(709) into IfStatement(710) at 1", "Insert MethodInvocation(713) into ReturnStatement(714) at 0", "Insert SimpleName: JobDag(730) into SimpleType: JobDag(731) at 0", "Insert SimpleName: _jobConfigs(748) into VariableDeclarationFragment(749) at 0", "Insert SimpleType: Map(753) into ParameterizedType: Map<String,List<TaskConfig>>(761) at 0", "Insert SimpleType: String(755) into ParameterizedType: Map<String,List<TaskConfig>>(761) at 1", "Insert ParameterizedType: List<TaskConfig>(760) into ParameterizedType: Map<String,List<TaskConfig>>(761) at 2", "Insert ExpressionStatement(815) into Block(821) at 3", "Insert ExpressionStatement(844) into Block(881) at 0", "Insert ExpressionStatement(849) into Block(881) at 1", "Insert ReturnStatement(880) into Block(881) at 4", "Insert SimpleName: Builder(884) into SimpleType: Builder(885) at 0", "Insert SimpleType: String(888) into SingleVariableDeclaration(890) at 0", "Insert SimpleName: node(889) into SingleVariableDeclaration(890) at 1", "Insert ParameterizedType: Map<String,String>(897) into SingleVariableDeclaration(899) at 0", "Insert SimpleName: jobConfigMap(898) into SingleVariableDeclaration(899) at 1", "Insert ReturnStatement(908) into Block(909) at 0", "Insert SimpleName: Builder(912) into SimpleType: Builder(913) at 0", "Insert SimpleType: String(916) into SingleVariableDeclaration(918) at 0", "Insert SimpleName: node(917) into SingleVariableDeclaration(918) at 1", "Insert SimpleType: JobConfig(920) into SingleVariableDeclaration(922) at 0", "Insert SimpleName: jobConfig(921) into SingleVariableDeclaration(922) at 1", "Insert EnhancedForStatement(960) into Block(972) at 0", "Insert ExpressionStatement(969) into Block(972) at 1", "Insert ReturnStatement(971) into Block(972) at 2", "Insert SimpleName: Builder(975) into SimpleType: Builder(976) at 0", "Insert SimpleType: String(979) into SingleVariableDeclaration(981) at 0", "Insert SimpleName: node(980) into SingleVariableDeclaration(981) at 1", "Insert ParameterizedType: Collection<TaskConfig>(986) into SingleVariableDeclaration(988) at 0", "Insert SimpleName: taskConfigs(987) into SingleVariableDeclaration(988) at 1", "Move ExpressionStatement(696) into Block(1048) at 0", "Move ExpressionStatement(701) into Block(1048) at 1", "Insert IfStatement(1017) into Block(1048) at 2", "Insert IfStatement(1037) into Block(1048) at 3", "Insert ExpressionStatement(1045) into Block(1048) at 4", "Move ReturnStatement(732) into Block(1048) at 5", "Insert SimpleName: String(1100) into SimpleType: String(1101) at 0", "Insert SimpleName: List(100) into SimpleType: List(101) at 0", "Insert SimpleName: TaskConfig(102) into SimpleType: TaskConfig(103) at 0", "Insert SimpleName: Map(136) into SimpleType: Map(137) at 0", "Insert SimpleName: String(138) into SimpleType: String(139) at 0", "Insert SimpleType: List(141) into ParameterizedType: List<TaskConfig>(144) at 0", "Insert SimpleType: TaskConfig(143) into ParameterizedType: List<TaskConfig>(144) at 1", "Insert SimpleName: _jobConfigs(156) into Assignment: =(158) at 0", "Insert SimpleName: jobConfigs(157) into Assignment: =(158) at 1", "Insert SimpleName: List(200) into SimpleType: List(201) at 0", "Insert SimpleName: TaskConfig(202) into SimpleType: TaskConfig(203) at 0", "Insert SimpleType: JobBean(428) into SingleVariableDeclaration(430) at 0", "Insert SimpleName: job(429) into SingleVariableDeclaration(430) at 1", "Insert IfStatement(597) into Block(598) at 11", "Update SimpleName: _taskConfigs(563) to _jobConfigs", "Insert QualifiedName: JobConfig.Builder(681) into SimpleType: JobConfig.Builder(682) at 0", "Insert SimpleName: b(683) into VariableDeclarationFragment(691) at 0", "Insert MethodInvocation(690) into VariableDeclarationFragment(691) at 1", "Insert InfixExpression: !=(695) into InfixExpression: &&(700) at 0", "Insert MethodInvocation(699) into InfixExpression: &&(700) at 1", "Insert ExpressionStatement(708) into Block(709) at 0", "Insert SimpleName: b(711) into MethodInvocation(713) at 0", "Move SimpleName: build(592) into MethodInvocation(713) at 1", "Insert SimpleName: Map(752) into SimpleType: Map(753) at 0", "Insert SimpleName: String(754) into SimpleType: String(755) at 0", "Insert SimpleType: List(757) into ParameterizedType: List<TaskConfig>(760) at 0", "Insert SimpleType: TaskConfig(759) into ParameterizedType: List<TaskConfig>(760) at 1", "Insert Assignment: =(814) into ExpressionStatement(815) at 0", "Insert Assignment: =(843) into ExpressionStatement(844) at 0", "Insert MethodInvocation(848) into ExpressionStatement(849) at 0", "Insert PrefixExpression: !(854) into IfStatement(869) at 0", "Insert ThisExpression(879) into ReturnStatement(880) at 0", "Insert SimpleName: String(887) into SimpleType: String(888) at 0", "Insert SimpleType: Map(892) into ParameterizedType: Map<String,String>(897) at 0", "Insert SimpleType: String(894) into ParameterizedType: Map<String,String>(897) at 1", "Insert SimpleType: String(896) into ParameterizedType: Map<String,String>(897) at 2", "Insert MethodInvocation(907) into ReturnStatement(908) at 0", "Insert SimpleName: String(915) into SimpleType: String(916) at 0", "Insert SimpleName: JobConfig(919) into SimpleType: JobConfig(920) at 0", "Insert SingleVariableDeclaration(931) into EnhancedForStatement(960) at 0", "Insert MethodInvocation(936) into EnhancedForStatement(960) at 1", "Insert Block(959) into EnhancedForStatement(960) at 2", "Insert MethodInvocation(968) into ExpressionStatement(969) at 0", "Insert ThisExpression(970) into ReturnStatement(971) at 0", "Insert SimpleName: String(978) into SimpleType: String(979) at 0", "Insert SimpleType: Collection(983) into ParameterizedType: Collection<TaskConfig>(986) at 0", "Insert SimpleType: TaskConfig(985) into ParameterizedType: Collection<TaskConfig>(986) at 1", "Move PrefixExpression: !(706) into IfStatement(1017) at 0", "Insert Block(1016) into IfStatement(1017) at 1", "Insert PrefixExpression: !(1022) into IfStatement(1037) at 0", "Insert Block(1036) into IfStatement(1037) at 1", "Insert MethodInvocation(1044) into ExpressionStatement(1045) at 0", "Insert SimpleName: List(140) into SimpleType: List(141) at 0", "Insert SimpleName: TaskConfig(142) into SimpleType: TaskConfig(143) at 0", "Insert SimpleName: JobBean(427) into SimpleType: JobBean(428) at 0", "Insert InfixExpression: !=(563) into IfStatement(597) at 0", "Insert Block(596) into IfStatement(597) at 1", "Update SimpleName: getTaskDag(554) to getJobDag", "Update QualifiedName: TaskConfig.Builder(585) to JobConfig.Builder", "Move QualifiedName: TaskConfig.Builder(585) into MethodInvocation(690) at 0", "Move SimpleName: fromMap(586) into MethodInvocation(690) at 1", "Move MethodInvocation(590) into MethodInvocation(690) at 2", "Insert SimpleName: _taskConfigs(693) into InfixExpression: !=(695) at 0", "Insert NullLiteral(694) into InfixExpression: !=(695) at 1", "Insert SimpleName: _taskConfigs(696) into MethodInvocation(699) at 0", "Insert SimpleName: containsKey(697) into MethodInvocation(699) at 1", "Insert SimpleName: job(698) into MethodInvocation(699) at 2", "Insert MethodInvocation(707) into ExpressionStatement(708) at 0", "Insert SimpleName: List(756) into SimpleType: List(757) at 0", "Update SimpleName: TaskDag(610) to TaskConfig", "Move SimpleName: TaskDag(610) into SimpleType: TaskConfig(759) at 0", "Update SimpleName: _taskConfigs(652) to _jobConfigs", "Insert SimpleName: _taskConfigs(802) into Assignment: =(814) at 0", "Insert ClassInstanceCreation(813) into Assignment: =(814) at 1", "Insert SimpleName: node(839) into Assignment: =(843) at 0", "Insert MethodInvocation(842) into Assignment: =(843) at 1", "Insert SimpleName: _dag(845) into MethodInvocation(848) at 0", "Insert SimpleName: addNode(846) into MethodInvocation(848) at 1", "Insert SimpleName: node(847) into MethodInvocation(848) at 2", "Insert MethodInvocation(853) into PrefixExpression: !(854) at 0", "Insert MethodInvocation(873) into MethodInvocation(877) at 0", "Insert SimpleName: Map(891) into SimpleType: Map(892) at 0", "Insert SimpleName: String(893) into SimpleType: String(894) at 0", "Insert SimpleName: String(895) into SimpleType: String(896) at 0", "Insert SimpleName: addConfig(900) into MethodInvocation(907) at 0", "Insert SimpleName: node(901) into MethodInvocation(907) at 1", "Insert QualifiedName: JobConfig.JOB_CONFIG_MAP(902) into MethodInvocation(907) at 2", "Insert MethodInvocation(906) into MethodInvocation(907) at 3", "Insert ParameterizedType: Map.Entry<String,String>(929) into SingleVariableDeclaration(931) at 0", "Insert SimpleName: e(930) into SingleVariableDeclaration(931) at 1", "Insert MethodInvocation(934) into MethodInvocation(936) at 0", "Insert SimpleName: entrySet(935) into MethodInvocation(936) at 1", "Insert VariableDeclarationStatement(944) into Block(959) at 0", "Insert VariableDeclarationStatement(952) into Block(959) at 1", "Insert ExpressionStatement(958) into Block(959) at 2", "Insert SimpleName: addTaskConfigs(961) into MethodInvocation(968) at 0", "Insert SimpleName: node(962) into MethodInvocation(968) at 1", "Insert MethodInvocation(967) into MethodInvocation(968) at 2", "Insert SimpleName: Collection(982) into SimpleType: Collection(983) at 0", "Insert SimpleName: TaskConfig(984) into SimpleType: TaskConfig(985) at 0", "Insert ExpressionStatement(1015) into Block(1016) at 0", "Insert MethodInvocation(1021) into PrefixExpression: !(1022) at 0", "Insert ExpressionStatement(1035) into Block(1036) at 0", "Move MethodInvocation(725) into MethodInvocation(1044) at 0", "Insert SimpleName: addAll(1042) into MethodInvocation(1044) at 1", "Insert SimpleName: taskConfigs(1043) into MethodInvocation(1044) at 2", "Update SimpleName: getNamespacedTaskName(793) to getNamespacedJobName", "Update SimpleName: _taskConfigs(808) to _jobConfigs", "Insert SimpleName: _jobConfigs(1171) into ClassInstanceCreation(1173) at 3", "Update SimpleName: getTaskDag(185) to getJobDag", "Update QualifiedName: task.name(373) to job.name", "Update QualifiedName: task.parents(383) to job.parents", "Update QualifiedName: task.name(403) to job.name", "Update QualifiedName: TaskConfig.WORKFLOW_ID(404) to JobConfig.WORKFLOW_ID", "Update QualifiedName: task.name(410) to job.name", "Update QualifiedName: TaskConfig.COMMAND(411) to JobConfig.COMMAND", "Update QualifiedName: task.command(412) to job.command", "Update QualifiedName: task.commandConfig(415) to job.jobConfigMap", "Update QualifiedName: task.name(431) to job.name", "Update QualifiedName: TaskConfig.TARGET_RESOURCE(432) to JobConfig.TARGET_RESOURCE", "Update QualifiedName: task.targetResource(433) to job.targetResource", "Update QualifiedName: task.targetPartitionStates(436) to job.targetPartitionStates", "Update QualifiedName: task.targetPartitions(454) to job.targetPartitions", "Update QualifiedName: task.name(474) to job.name", "Update QualifiedName: TaskConfig.MAX_ATTEMPTS_PER_PARTITION(475) to JobConfig.MAX_ATTEMPTS_PER_TASK", "Update QualifiedName: task.name(484) to job.name", "Update QualifiedName: TaskConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE(485) to JobConfig.NUM_CONCURRENT_TASKS_PER_INSTANCE", "Update QualifiedName: task.name(494) to job.name", "Update QualifiedName: TaskConfig.TIMEOUT_PER_PARTITION(495) to JobConfig.TIMEOUT_PER_TASK", "Insert QualifiedName: job.tasks(561) into InfixExpression: !=(563) at 0", "Insert NullLiteral(562) into InfixExpression: !=(563) at 1", "Insert VariableDeclarationStatement(574) into Block(596) at 0", "Insert EnhancedForStatement(589) into Block(596) at 1", "Insert ExpressionStatement(595) into Block(596) at 2", "Update SimpleName: _taskConfigs(517) to _jobConfigs", "Update SimpleName: _taskConfigs(587) to _jobConfigs", "Update SimpleName: task(589) to job", "Insert SimpleName: b(701) into MethodInvocation(707) at 0", "Insert SimpleName: addTaskConfigs(702) into MethodInvocation(707) at 1", "Insert MethodInvocation(706) into MethodInvocation(707) at 2", "Update SimpleType: TaskDag(648) to JobDag", "Insert ParameterizedType: TreeMap<String,List<TaskConfig>>(812) into ClassInstanceCreation(813) at 0", "Insert SimpleName: namespacify(840) into MethodInvocation(842) at 0", "Insert SimpleName: node(841) into MethodInvocation(842) at 1", "Insert SimpleName: _jobConfigs(850) into MethodInvocation(853) at 0", "Insert SimpleName: containsKey(851) into MethodInvocation(853) at 1", "Insert SimpleName: node(852) into MethodInvocation(853) at 2", "Insert SimpleName: _jobConfigs(870) into MethodInvocation(873) at 0", "Insert SimpleName: get(871) into MethodInvocation(873) at 1", "Insert SimpleName: node(872) into MethodInvocation(873) at 2", "Insert SimpleName: TaskUtil(903) into MethodInvocation(906) at 0", "Insert SimpleName: serializeJobConfigMap(904) into MethodInvocation(906) at 1", "Insert SimpleName: jobConfigMap(905) into MethodInvocation(906) at 2", "Insert SimpleType: Map.Entry(924) into ParameterizedType: Map.Entry<String,String>(929) at 0", "Insert SimpleType: String(926) into ParameterizedType: Map.Entry<String,String>(929) at 1", "Insert SimpleType: String(928) into ParameterizedType: Map.Entry<String,String>(929) at 2", "Insert SimpleName: jobConfig(932) into MethodInvocation(934) at 0", "Insert SimpleName: getResourceConfigMap(933) into MethodInvocation(934) at 1", "Insert SimpleType: String(938) into VariableDeclarationStatement(944) at 0", "Insert VariableDeclarationFragment(943) into VariableDeclarationStatement(944) at 1", "Insert SimpleType: String(946) into VariableDeclarationStatement(952) at 0", "Insert VariableDeclarationFragment(951) into VariableDeclarationStatement(952) at 1", "Insert MethodInvocation(957) into ExpressionStatement(958) at 0", "Insert MethodInvocation(965) into MethodInvocation(967) at 0", "Insert SimpleName: values(966) into MethodInvocation(967) at 1", "Insert MethodInvocation(1014) into ExpressionStatement(1015) at 0", "Insert SimpleName: _jobConfigs(1018) into MethodInvocation(1021) at 0", "Insert SimpleName: containsKey(1019) into MethodInvocation(1021) at 1", "Insert SimpleName: node(1020) into MethodInvocation(1021) at 2", "Insert MethodInvocation(1034) into ExpressionStatement(1035) at 0", "Update QualifiedName: task.parents(390) to job.parents", "Update QualifiedName: task.maxAttemptsPerPartition(478) to job.maxAttemptsPerPartition", "Update QualifiedName: task.numConcurrentTasksPerInstance(488) to job.numConcurrentTasksPerInstance", "Update QualifiedName: task.timeoutPerPartition(498) to job.timeoutPerPartition", "Insert ParameterizedType: List<TaskConfig>(568) into VariableDeclarationStatement(574) at 0", "Insert VariableDeclarationFragment(573) into VariableDeclarationStatement(574) at 1", "Move SingleVariableDeclaration(371) into EnhancedForStatement(589) at 0", "Insert QualifiedName: job.tasks(579) into EnhancedForStatement(589) at 1", "Insert Block(588) into EnhancedForStatement(589) at 2", "Insert MethodInvocation(594) into ExpressionStatement(595) at 0", "Update SimpleName: getTaskDag(522) to getJobDag", "Update SimpleName: _taskConfigs(540) to _jobConfigs", "Insert SimpleName: _taskConfigs(703) into MethodInvocation(706) at 0", "Insert SimpleName: get(704) into MethodInvocation(706) at 1", "Insert SimpleName: job(705) into MethodInvocation(706) at 2", "Update SimpleName: TaskDag(647) to JobDag", "Insert SimpleType: TreeMap(804) into ParameterizedType: TreeMap<String,List<TaskConfig>>(812) at 0", "Move SimpleType: String(786) into ParameterizedType: TreeMap<String,List<TaskConfig>>(812) at 1", "Insert ParameterizedType: List<TaskConfig>(811) into ParameterizedType: TreeMap<String,List<TaskConfig>>(812) at 2", "Update SimpleName: _taskConfigs(707) to _jobConfigs", "Insert QualifiedName: Map.Entry(923) into SimpleType: Map.Entry(924) at 0", "Insert SimpleName: String(925) into SimpleType: String(926) at 0", "Insert SimpleName: String(927) into SimpleType: String(928) at 0", "Insert SimpleName: String(937) into SimpleType: String(938) at 0", "Insert SimpleName: key(939) into VariableDeclarationFragment(943) at 0", "Insert MethodInvocation(942) into VariableDeclarationFragment(943) at 1", "Insert SimpleName: String(945) into SimpleType: String(946) at 0", "Insert SimpleName: val(947) into VariableDeclarationFragment(951) at 0", "Insert MethodInvocation(950) into VariableDeclarationFragment(951) at 1", "Insert SimpleName: addConfig(953) into MethodInvocation(957) at 0", "Insert SimpleName: node(954) into MethodInvocation(957) at 1", "Insert SimpleName: key(955) into MethodInvocation(957) at 2", "Insert SimpleName: val(956) into MethodInvocation(957) at 3", "Insert SimpleName: jobConfig(963) into MethodInvocation(965) at 0", "Insert SimpleName: getTaskConfigMap(964) into MethodInvocation(965) at 1", "Insert SimpleName: _taskConfigs(1005) into MethodInvocation(1014) at 0", "Insert SimpleName: put(1006) into MethodInvocation(1014) at 1", "Insert SimpleName: node(1007) into MethodInvocation(1014) at 2", "Insert ClassInstanceCreation(1013) into MethodInvocation(1014) at 3", "Insert SimpleName: _jobConfigs(1023) into MethodInvocation(1034) at 0", "Insert SimpleName: put(1024) into MethodInvocation(1034) at 1", "Insert SimpleName: node(1025) into MethodInvocation(1034) at 2", "Insert ClassInstanceCreation(1033) into MethodInvocation(1034) at 3", "Update QualifiedName: TaskConfig.WORKFLOW_ID(816) to JobConfig.WORKFLOW_ID", "Update StringLiteral: \"A task must have a name.\"(378) to \"A job must have a name.\"", "Update QualifiedName: task.name(420) to job.name", "Update QualifiedName: TaskConfig.COMMAND_CONFIG(421) to JobConfig.JOB_CONFIG_MAP", "Update QualifiedName: task.name(441) to job.name", "Update QualifiedName: TaskConfig.TARGET_PARTITION_STATES(442) to JobConfig.TARGET_PARTITION_STATES", "Move MethodInvocation(467) into MethodInvocation(509) at 4", "Update QualifiedName: task.name(459) to job.name", "Update QualifiedName: TaskConfig.TARGET_PARTITIONS(460) to JobConfig.TARGET_PARTITIONS", "Move MethodInvocation(449) into MethodInvocation(527) at 4", "Insert SimpleType: List(565) into ParameterizedType: List<TaskConfig>(568) at 0", "Move SimpleType: TaskConfig(579) into ParameterizedType: List<TaskConfig>(568) at 1", "Insert SimpleName: taskConfigs(569) into VariableDeclarationFragment(573) at 0", "Insert MethodInvocation(572) into VariableDeclarationFragment(573) at 1", "Insert ExpressionStatement(587) into Block(588) at 0", "Insert SimpleName: builder(590) into MethodInvocation(594) at 0", "Insert SimpleName: addTaskConfigs(591) into MethodInvocation(594) at 1", "Insert QualifiedName: job.name(592) into MethodInvocation(594) at 2", "Insert SimpleName: taskConfigs(593) into MethodInvocation(594) at 3", "Update SimpleName: getTaskDag(535) to getJobDag", "Insert SimpleName: TreeMap(803) into SimpleType: TreeMap(804) at 0", "Insert SimpleType: List(808) into ParameterizedType: List<TaskConfig>(811) at 0", "Insert SimpleType: TaskConfig(810) into ParameterizedType: List<TaskConfig>(811) at 1", "Insert SimpleName: e(940) into MethodInvocation(942) at 0", "Insert SimpleName: getKey(941) into MethodInvocation(942) at 1", "Insert SimpleName: e(948) into MethodInvocation(950) at 0", "Insert SimpleName: getValue(949) into MethodInvocation(950) at 1", "Insert ParameterizedType: ArrayList<TaskConfig>(1012) into ClassInstanceCreation(1013) at 0", "Insert ParameterizedType: TreeMap<String,String>(1032) into ClassInstanceCreation(1033) at 0", "Update SimpleName: _taskConfigs(811) to _jobConfigs", "Update QualifiedName: task.commandConfig(422) to job.jobConfigMap", "Update QualifiedName: task.targetPartitions(466) to job.targetPartitionStates", "Update QualifiedName: task.targetPartitionStates(448) to job.targetPartitions", "Insert SimpleName: List(564) into SimpleType: List(565) at 0", "Insert SimpleName: Lists(570) into MethodInvocation(572) at 0", "Insert SimpleName: newArrayList(571) into MethodInvocation(572) at 1", "Insert MethodInvocation(586) into ExpressionStatement(587) at 0", "Insert SimpleName: List(807) into SimpleType: List(808) at 0", "Insert SimpleName: TaskConfig(809) into SimpleType: TaskConfig(810) at 0", "Insert SimpleType: ArrayList(1009) into ParameterizedType: ArrayList<TaskConfig>(1012) at 0", "Insert SimpleType: TaskConfig(1011) into ParameterizedType: ArrayList<TaskConfig>(1012) at 1", "Insert SimpleType: TreeMap(1027) into ParameterizedType: TreeMap<String,String>(1032) at 0", "Insert SimpleType: String(1029) into ParameterizedType: TreeMap<String,String>(1032) at 1", "Insert SimpleType: String(1031) into ParameterizedType: TreeMap<String,String>(1032) at 2", "Update QualifiedName: task.name(394) to job.name", "Insert SimpleName: taskConfigs(580) into MethodInvocation(586) at 0", "Insert SimpleName: add(581) into MethodInvocation(586) at 1", "Insert MethodInvocation(585) into MethodInvocation(586) at 2", "Insert SimpleName: ArrayList(1008) into SimpleType: ArrayList(1009) at 0", "Insert SimpleName: TaskConfig(1010) into SimpleType: TaskConfig(1011) at 0", "Insert SimpleName: TreeMap(1026) into SimpleType: TreeMap(1027) at 0", "Insert SimpleName: String(1028) into SimpleType: String(1029) at 0", "Insert SimpleName: String(1030) into SimpleType: String(1031) at 0", "Insert SimpleName: TaskConfig(582) into MethodInvocation(585) at 0", "Insert SimpleName: from(583) into MethodInvocation(585) at 1", "Insert SimpleName: task(584) into MethodInvocation(585) at 2", "Delete MethodInvocation(591)", "Delete MethodInvocation(593)", "Delete ReturnStatement(594)", "Delete SimpleType: TaskDag(611)"]}}, {"WorkflowConfig_cluster": {"actions": [{"root": "UPDATE from TaskDag to JobDag", "operations": ["UPD SimpleType: TaskDag from TaskDag to JobDag", "UPD SimpleType: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag", "UPD SimpleType: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag", "UPD SimpleType: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag", "UPD SimpleType: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag", "UPD SimpleName: TaskDag from TaskDag to JobDag"]}, {"root": "UPDATE from getTaskDag to getJobDag", "operations": ["UPD SimpleName: getTaskDag from getTaskDag to getJobDag"]}, {"root": "UPDATE from _taskDag to _jobDag", "operations": ["UPD SimpleName: _taskDag from _taskDag to _jobDag", "UPD SimpleName: _taskDag from _taskDag to _jobDag", "UPD SimpleName: _taskDag from _taskDag to _jobDag"]}, {"root": "UPDATE from taskDag to jobDag", "operations": ["UPD SimpleName: taskDag from taskDag to jobDag", "UPD SimpleName: taskDag from taskDag to jobDag"]}, {"root": "UPDATE from TaskDag.EMPTY_DAG to JobDag.EMPTY_DAG", "operations": ["UPD QualifiedName: TaskDag.EMPTY_DAG from TaskDag.EMPTY_DAG to JobDag.EMPTY_DAG"]}]}}, {"WorkflowConfig_diff": {"operations": ["Update SimpleType: TaskDag(50) to JobDag", "Update SimpleType: TaskDag(94) to JobDag", "Update SimpleName: getTaskDag(95) to getJobDag", "Update SimpleName: TaskDag(49) to JobDag", "Update SimpleName: _taskDag(51) to _jobDag", "Update SimpleType: TaskDag(68) to JobDag", "Update SimpleName: taskDag(69) to jobDag", "Update SimpleName: TaskDag(93) to JobDag", "Update SimpleType: TaskDag(120) to JobDag", "Update SimpleName: TaskDag(67) to JobDag", "Update SimpleName: _taskDag(96) to _jobDag", "Update SimpleName: TaskDag(119) to JobDag", "Update QualifiedName: TaskDag.EMPTY_DAG(122) to JobDag.EMPTY_DAG", "Update SimpleType: TaskDag(163) to JobDag", "Update SimpleName: _taskDag(78) to _jobDag", "Update SimpleName: taskDag(79) to jobDag", "Update SimpleName: TaskDag(162) to JobDag", "Update SimpleName: TaskDag(250) to JobDag"]}}, {"WorkflowContext_cluster": {"actions": [{"root": "UPDATE from setTaskState to setJobState", "operations": ["UPD SimpleName: setTaskState from setTaskState to setJobState"]}, {"root": "UPDATE from getTaskState to getJobState", "operations": ["UPD SimpleName: getTaskState from getTaskState to getJobState"]}, {"root": "UPDATE from taskResource to jobResource", "operations": ["UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource", "UPD SimpleName: taskResource from taskResource to jobResource"]}]}}, {"WorkflowContext_diff": {"operations": ["Update SimpleName: setTaskState(161) to setJobState", "Update SimpleName: getTaskState(219) to getJobState", "Update SimpleName: taskResource(164) to jobResource", "Update SimpleName: taskResource(222) to jobResource", "Update SimpleName: taskResource(208) to jobResource", "Update SimpleName: taskResource(250) to jobResource"]}}, {"BestPossibleStateCalcStage_cluster": {"actions": [{"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 0", "INS StringLiteral: \". Skipping.\" to InfixExpression: + at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleType: Exception to SingleVariableDeclaration at 0", "INS SimpleName: logger to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS Block to IfStatement at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: resourceName to InfixExpression: + at 1", "INS StringLiteral: \"Error computing assignment for resource \" to InfixExpression: + at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: error to MethodInvocation at 1", "INS TryStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}]}}, {"BestPossibleStateCalcStage_diff": {"operations": ["Insert Block(526) into IfStatement(527) at 1", "Insert TryStatement(525) into Block(526) at 0", "Move Block(509) into TryStatement(525) at 0", "Insert CatchClause(524) into TryStatement(525) at 1", "Insert SingleVariableDeclaration(513) into CatchClause(524) at 0", "Insert Block(523) into CatchClause(524) at 1", "Insert SimpleType: Exception(511) into SingleVariableDeclaration(513) at 0", "Insert SimpleName: e(512) into SingleVariableDeclaration(513) at 1", "Insert ExpressionStatement(522) into Block(523) at 0", "Insert SimpleName: Exception(510) into SimpleType: Exception(511) at 0", "Insert MethodInvocation(521) into ExpressionStatement(522) at 0", "Insert SimpleName: logger(514) into MethodInvocation(521) at 0", "Insert SimpleName: error(515) into MethodInvocation(521) at 1", "Insert InfixExpression: +(519) into MethodInvocation(521) at 2", "Insert SimpleName: e(520) into MethodInvocation(521) at 3", "Insert StringLiteral: \"Error computing assignment for resource \"(516) into InfixExpression: +(519) at 0", "Insert SimpleName: resourceName(517) into InfixExpression: +(519) at 1", "Insert StringLiteral: \". Skipping.\"(518) into InfixExpression: +(519) at 2"]}}, {"CurrentStateOutput_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.util.Set to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.google.common.collect.Sets to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: currentStateMap to MethodInvocation at 0", "INS SimpleType: Set to ParameterizedType: Set<Partition> at 0", "INS SimpleType: Partition to ParameterizedType: Set<Partition> at 1", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: _pendingStateMap to MethodInvocation at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: keySet to MethodInvocation at 1", "INS SimpleName: partitionSet to VariableDeclarationFragment at 0", "INS SimpleType: Set to ParameterizedType: Set<Partition> at 0", "INS SimpleName: currentStateMap to InfixExpression: != at 0", "INS SimpleType: Map to ParameterizedType: Map<Partition,Map<String,String>> at 0", "INS Block to IfStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: String to ParameterizedType: Map<String,String> at 1", "INS SimpleName: partitionSet to MethodInvocation at 0", "INS SimpleName: partitionSet to ReturnStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: pendingStateMap to VariableDeclarationFragment at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: resourceId to MethodInvocation at 2", "INS ParameterizedType: Map<String,String> to ParameterizedType: Map<Partition,Map<String,String>> at 2", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationStatement to Block at 2", "INS Javadoc to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS Block to MethodDeclaration at 5", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: Partition to SimpleType: Partition at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 2", "INS TextElement: Get the partitions mapped in the current state to TagElement at 0", "INS TextElement:  set of mapped partitions, or empty set if there are none to TagElement: @return at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: _currentStateMap to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to Block at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Partition to SimpleType: Partition at 0", "INS SimpleType: Partition to ParameterizedType: Map<Partition,Map<String,String>> at 1", "INS TagElement to Javadoc at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: resourceId to TagElement: @param at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement:  resource to look up to TagElement: @param at 1", "INS IfStatement to Block at 3", "INS SimpleName: keySet to MethodInvocation at 1", "INS SimpleType: Map to ParameterizedType: Map<String,String> at 0", "INS ParameterizedType: Map<Partition,Map<String,String>> to VariableDeclarationStatement at 0", "INS ParameterizedType: Set<Partition> to MethodDeclaration at 2", "INS SimpleType: Partition to ParameterizedType: Map<Partition,Map<String,String>> at 1", "INS ParameterizedType: Set<Partition> to VariableDeclarationStatement at 0", "INS SimpleType: Map to ParameterizedType: Map<String,String> at 0", "INS ParameterizedType: Map<Partition,Map<String,String>> to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: pendingStateMap to MethodInvocation at 0", "INS SimpleName: partitionSet to MethodInvocation at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: pendingStateMap to InfixExpression: != at 0", "INS SimpleName: currentStateMap to VariableDeclarationFragment at 0", "INS SimpleName: resourceId to MethodInvocation at 2", "INS TagElement: @param to Javadoc at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: Partition to ParameterizedType: Set<Partition> at 1", "INS SimpleName: resourceId to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 5", "INS SimpleName: Sets to MethodInvocation at 0", "INS SimpleName: Partition to SimpleType: Partition at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: Partition to SimpleType: Partition at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Map to ParameterizedType: Map<Partition,Map<String,String>> at 0", "INS ParameterizedType: Map<String,String> to ParameterizedType: Map<Partition,Map<String,String>> at 2", "INS SimpleName: getCurrentStateMappedPartitions to MethodDeclaration at 3", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Block to IfStatement at 1"]}]}}, {"CurrentStateOutput_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(1249) at 4", "Insert ImportDeclaration(15) into CompilationUnit(1249) at 7", "Insert QualifiedName: java.util.Set(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: com.google.common.collect.Sets(14) into ImportDeclaration(15) at 0", "Insert MethodDeclaration(1211) into TypeDeclaration: class(1248) at 23", "Insert Javadoc(1123) into MethodDeclaration(1211) at 0", "Insert Modifier: public(1124) into MethodDeclaration(1211) at 1", "Insert ParameterizedType: Set<Partition>(1129) into MethodDeclaration(1211) at 2", "Insert SimpleName: getCurrentStateMappedPartitions(1130) into MethodDeclaration(1211) at 3", "Insert SingleVariableDeclaration(1134) into MethodDeclaration(1211) at 4", "Insert Block(1210) into MethodDeclaration(1211) at 5", "Insert TagElement(1117) into Javadoc(1123) at 0", "Insert TagElement: @param(1120) into Javadoc(1123) at 1", "Insert TagElement: @return(1122) into Javadoc(1123) at 2", "Insert SimpleType: Set(1126) into ParameterizedType: Set<Partition>(1129) at 0", "Insert SimpleType: Partition(1128) into ParameterizedType: Set<Partition>(1129) at 1", "Insert SimpleType: String(1132) into SingleVariableDeclaration(1134) at 0", "Insert SimpleName: resourceId(1133) into SingleVariableDeclaration(1134) at 1", "Insert VariableDeclarationStatement(1153) into Block(1210) at 0", "Insert VariableDeclarationStatement(1172) into Block(1210) at 1", "Insert VariableDeclarationStatement(1183) into Block(1210) at 2", "Insert IfStatement(1195) into Block(1210) at 3", "Insert IfStatement(1207) into Block(1210) at 4", "Insert ReturnStatement(1209) into Block(1210) at 5", "Insert TextElement: Get the partitions mapped in the current state(1116) into TagElement(1117) at 0", "Insert SimpleName: resourceId(1118) into TagElement: @param(1120) at 0", "Insert TextElement:  resource to look up(1119) into TagElement: @param(1120) at 1", "Insert TextElement:  set of mapped partitions, or empty set if there are none(1121) into TagElement: @return(1122) at 0", "Insert SimpleName: Set(1125) into SimpleType: Set(1126) at 0", "Insert SimpleName: Partition(1127) into SimpleType: Partition(1128) at 0", "Insert SimpleName: String(1131) into SimpleType: String(1132) at 0", "Insert ParameterizedType: Map<Partition,Map<String,String>>(1146) into VariableDeclarationStatement(1153) at 0", "Insert VariableDeclarationFragment(1152) into VariableDeclarationStatement(1153) at 1", "Insert ParameterizedType: Map<Partition,Map<String,String>>(1165) into VariableDeclarationStatement(1172) at 0", "Insert VariableDeclarationFragment(1171) into VariableDeclarationStatement(1172) at 1", "Insert ParameterizedType: Set<Partition>(1177) into VariableDeclarationStatement(1183) at 0", "Insert VariableDeclarationFragment(1182) into VariableDeclarationStatement(1183) at 1", "Insert InfixExpression: !=(1186) into IfStatement(1195) at 0", "Insert Block(1194) into IfStatement(1195) at 1", "Insert InfixExpression: !=(1198) into IfStatement(1207) at 0", "Insert Block(1206) into IfStatement(1207) at 1", "Insert SimpleName: partitionSet(1208) into ReturnStatement(1209) at 0", "Insert SimpleType: Map(1136) into ParameterizedType: Map<Partition,Map<String,String>>(1146) at 0", "Insert SimpleType: Partition(1138) into ParameterizedType: Map<Partition,Map<String,String>>(1146) at 1", "Insert ParameterizedType: Map<String,String>(1145) into ParameterizedType: Map<Partition,Map<String,String>>(1146) at 2", "Insert SimpleName: currentStateMap(1147) into VariableDeclarationFragment(1152) at 0", "Insert MethodInvocation(1151) into VariableDeclarationFragment(1152) at 1", "Insert SimpleType: Map(1155) into ParameterizedType: Map<Partition,Map<String,String>>(1165) at 0", "Insert SimpleType: Partition(1157) into ParameterizedType: Map<Partition,Map<String,String>>(1165) at 1", "Insert ParameterizedType: Map<String,String>(1164) into ParameterizedType: Map<Partition,Map<String,String>>(1165) at 2", "Insert SimpleName: pendingStateMap(1166) into VariableDeclarationFragment(1171) at 0", "Insert MethodInvocation(1170) into VariableDeclarationFragment(1171) at 1", "Insert SimpleType: Set(1174) into ParameterizedType: Set<Partition>(1177) at 0", "Insert SimpleType: Partition(1176) into ParameterizedType: Set<Partition>(1177) at 1", "Insert SimpleName: partitionSet(1178) into VariableDeclarationFragment(1182) at 0", "Insert MethodInvocation(1181) into VariableDeclarationFragment(1182) at 1", "Insert SimpleName: currentStateMap(1184) into InfixExpression: !=(1186) at 0", "Insert NullLiteral(1185) into InfixExpression: !=(1186) at 1", "Insert ExpressionStatement(1193) into Block(1194) at 0", "Insert SimpleName: pendingStateMap(1196) into InfixExpression: !=(1198) at 0", "Insert NullLiteral(1197) into InfixExpression: !=(1198) at 1", "Insert ExpressionStatement(1205) into Block(1206) at 0", "Insert SimpleName: Map(1135) into SimpleType: Map(1136) at 0", "Insert SimpleName: Partition(1137) into SimpleType: Partition(1138) at 0", "Insert SimpleType: Map(1140) into ParameterizedType: Map<String,String>(1145) at 0", "Insert SimpleType: String(1142) into ParameterizedType: Map<String,String>(1145) at 1", "Insert SimpleType: String(1144) into ParameterizedType: Map<String,String>(1145) at 2", "Insert SimpleName: _currentStateMap(1148) into MethodInvocation(1151) at 0", "Insert SimpleName: get(1149) into MethodInvocation(1151) at 1", "Insert SimpleName: resourceId(1150) into MethodInvocation(1151) at 2", "Insert SimpleName: Map(1154) into SimpleType: Map(1155) at 0", "Insert SimpleName: Partition(1156) into SimpleType: Partition(1157) at 0", "Insert SimpleType: Map(1159) into ParameterizedType: Map<String,String>(1164) at 0", "Insert SimpleType: String(1161) into ParameterizedType: Map<String,String>(1164) at 1", "Insert SimpleType: String(1163) into ParameterizedType: Map<String,String>(1164) at 2", "Insert SimpleName: _pendingStateMap(1167) into MethodInvocation(1170) at 0", "Insert SimpleName: get(1168) into MethodInvocation(1170) at 1", "Insert SimpleName: resourceId(1169) into MethodInvocation(1170) at 2", "Insert SimpleName: Set(1173) into SimpleType: Set(1174) at 0", "Insert SimpleName: Partition(1175) into SimpleType: Partition(1176) at 0", "Insert SimpleName: Sets(1179) into MethodInvocation(1181) at 0", "Insert SimpleName: newHashSet(1180) into MethodInvocation(1181) at 1", "Insert MethodInvocation(1192) into ExpressionStatement(1193) at 0", "Insert MethodInvocation(1204) into ExpressionStatement(1205) at 0", "Insert SimpleName: Map(1139) into SimpleType: Map(1140) at 0", "Insert SimpleName: String(1141) into SimpleType: String(1142) at 0", "Insert SimpleName: String(1143) into SimpleType: String(1144) at 0", "Insert SimpleName: Map(1158) into SimpleType: Map(1159) at 0", "Insert SimpleName: String(1160) into SimpleType: String(1161) at 0", "Insert SimpleName: String(1162) into SimpleType: String(1163) at 0", "Insert SimpleName: partitionSet(1187) into MethodInvocation(1192) at 0", "Insert SimpleName: addAll(1188) into MethodInvocation(1192) at 1", "Insert MethodInvocation(1191) into MethodInvocation(1192) at 2", "Insert SimpleName: partitionSet(1199) into MethodInvocation(1204) at 0", "Insert SimpleName: addAll(1200) into MethodInvocation(1204) at 1", "Insert MethodInvocation(1203) into MethodInvocation(1204) at 2", "Insert SimpleName: currentStateMap(1189) into MethodInvocation(1191) at 0", "Insert SimpleName: keySet(1190) into MethodInvocation(1191) at 1", "Insert SimpleName: pendingStateMap(1201) into MethodInvocation(1203) at 0", "Insert SimpleName: keySet(1202) into MethodInvocation(1203) at 1"]}}, {"TaskBean_cluster": {"actions": [{"root": "UPDATE from Map<String,Object> to Map<String,String>", "operations": ["UPD ParameterizedType: Map<String,Object> from Map<String,Object> to Map<String,String>"]}, {"root": "INS TextElement: Describes task-specific configuration, including an arbitrary map of to TagElement at 0", "operations": ["INS TextElement: Describes task-specific configuration, including an arbitrary map of to TagElement at 0"]}, {"root": "UPDATE from Bean class used for parsing task definitions from YAML. to key-value pairs to pass to the task", "operations": ["UPD TextElement: Bean class used for parsing task definitions from YAML. from Bean class used for parsing task definitions from YAML. to key-value pairs to pass to the task"]}, {"root": "MOVE from ParameterizedType: Map<String,Object>", "operations": ["MOV SimpleType: String to ParameterizedType: Map<String,Object> at 2"]}, {"root": "UPDATE from commandConfig to taskConfigMap", "operations": ["UPD SimpleName: commandConfig from commandConfig to taskConfigMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.helix.task.TaskConfig", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: name", "DEL Modifier: public", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: public", "DEL ParameterizedType: List<String>", "DEL SimpleName: List", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: parents", "DEL SimpleType: List"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: String", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: targetResource", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: targetPartitionStates", "DEL SimpleName: List", "DEL ParameterizedType: List<String>", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL SimpleName: String"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: List", "DEL FieldDeclaration", "DEL ParameterizedType: List<Integer>", "DEL SimpleName: targetPartitions", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleType: Integer", "DEL SimpleName: List", "DEL SimpleName: Integer"]}, {"root": "DEL SimpleType: Object", "operations": ["DEL SimpleType: Object", "DEL SimpleName: Object"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL QualifiedName: TaskConfig.DEFAULT_TIMEOUT_PER_PARTITION", "DEL FieldDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: timeoutPerPartition", "DEL VariableDeclarationFragment", "DEL Modifier: public"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL SimpleName: numConcurrentTasksPerInstance", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL QualifiedName: TaskConfig.DEFAULT_NUM_CONCURRENT_TASKS_PER_INSTANCE", "DEL PrimitiveType: int"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: maxAttemptsPerPartition", "DEL FieldDeclaration", "DEL QualifiedName: TaskConfig.DEFAULT_MAX_ATTEMPTS_PER_PARTITION", "DEL Modifier: public"]}]}}, {"TaskBean_diff": {"operations": ["Update ParameterizedType: Map<String,Object>(65) to Map<String,String>", "Insert TextElement: Describes task-specific configuration, including an arbitrary map of(4) into TagElement(6) at 0", "Update TextElement: Bean class used for parsing task definitions from YAML.(8) to key-value pairs to pass to the task", "Move SimpleType: String(23) into ParameterizedType: Map<String,String>(23) at 2", "Update SimpleName: commandConfig(66) to taskConfigMap", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.helix.task.TaskConfig(6)", "Delete ImportDeclaration(7)", "Delete Modifier: public(13)", "Delete SimpleName: String(14)", "Delete SimpleType: String(15)", "Delete SimpleName: name(16)", "Delete VariableDeclarationFragment(17)", "Delete FieldDeclaration(18)", "Delete Modifier: public(19)", "Delete SimpleName: List(20)", "Delete SimpleType: List(21)", "Delete ParameterizedType: List<String>(24)", "Delete SimpleName: parents(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete Modifier: public(28)", "Delete SimpleName: String(29)", "Delete SimpleType: String(30)", "Delete SimpleName: targetResource(31)", "Delete VariableDeclarationFragment(32)", "Delete FieldDeclaration(33)", "Delete Modifier: public(34)", "Delete SimpleName: List(35)", "Delete SimpleType: List(36)", "Delete SimpleName: String(37)", "Delete SimpleType: String(38)", "Delete ParameterizedType: List<String>(39)", "Delete SimpleName: targetPartitionStates(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete Modifier: public(43)", "Delete SimpleName: List(44)", "Delete SimpleType: List(45)", "Delete SimpleName: Integer(46)", "Delete SimpleType: Integer(47)", "Delete ParameterizedType: List<Integer>(48)", "Delete SimpleName: targetPartitions(49)", "Delete VariableDeclarationFragment(50)", "Delete FieldDeclaration(51)", "Delete SimpleName: Object(63)", "Delete SimpleType: Object(64)", "Delete Modifier: public(69)", "Delete PrimitiveType: long(70)", "Delete SimpleName: timeoutPerPartition(71)", "Delete QualifiedName: TaskConfig.DEFAULT_TIMEOUT_PER_PARTITION(72)", "Delete VariableDeclarationFragment(73)", "Delete FieldDeclaration(74)", "Delete Modifier: public(75)", "Delete PrimitiveType: int(76)", "Delete SimpleName: numConcurrentTasksPerInstance(77)", "Delete QualifiedName: TaskConfig.DEFAULT_NUM_CONCURRENT_TASKS_PER_INSTANCE(78)", "Delete VariableDeclarationFragment(79)", "Delete FieldDeclaration(80)", "Delete Modifier: public(81)", "Delete PrimitiveType: int(82)", "Delete SimpleName: maxAttemptsPerPartition(83)", "Delete QualifiedName: TaskConfig.DEFAULT_MAX_ATTEMPTS_PER_PARTITION(84)", "Delete VariableDeclarationFragment(85)", "Delete FieldDeclaration(86)"]}}, {"WorkflowBean_cluster": {"actions": [{"root": "UPDATE from List<TaskBean> to List<JobBean>", "operations": ["UPD ParameterizedType: List<TaskBean> from List<TaskBean> to List<JobBean>"]}, {"root": "UPDATE from TaskBean to JobBean", "operations": ["UPD SimpleName: TaskBean from TaskBean to JobBean", "UPD SimpleType: TaskBean from TaskBean to JobBean"]}, {"root": "UPDATE from tasks to jobs", "operations": ["UPD SimpleName: tasks from tasks to jobs"]}]}}, {"WorkflowBean_diff": {"operations": ["Update ParameterizedType: List<TaskBean>(26) to List<JobBean>", "Update SimpleType: TaskBean(25) to JobBean", "Update SimpleName: tasks(27) to jobs", "Update SimpleName: TaskBean(24) to JobBean"]}}], "commit_stats": [{"total_files": 35, "deleted_files": 2, "testing": "True", "maintenance": "True", "build": "False"}]}