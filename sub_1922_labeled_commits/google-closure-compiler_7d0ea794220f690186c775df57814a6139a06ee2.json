{"application": "google-closure-compiler", "csha": "7d0ea794220f690186c775df57814a6139a06ee2", "files": [{"CompilerOptions_cluster": {"actions": [{"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}]}}, {"CompilerOptions_diff": {"operations": ["Insert MarkerAnnotation(1427) into FieldDeclaration(1433) at 0", "Insert MarkerAnnotation(1435) into FieldDeclaration(1441) at 0", "Insert SimpleName: Nullable(1426) into MarkerAnnotation(1427) at 0", "Insert SimpleName: Nullable(1434) into MarkerAnnotation(1435) at 0"]}}, {"Denormalize_cluster": {"actions": [{"root": "UPDATE from com.google.common.base.Preconditions to com.google.common.base.Preconditions.checkState", "operations": ["UPD QualifiedName: com.google.common.base.Preconditions from com.google.common.base.Preconditions to com.google.common.base.Preconditions.checkState"]}, {"root": "UPDATE from The goal with this pass is to reverse the simplifications done in the to The goal with this pass is to reverse the simplifications done in the normalization pass that are", "operations": ["UPD TextElement: The goal with this pass is to reverse the simplifications done in the from The goal with this pass is to reverse the simplifications done in the to The goal with this pass is to reverse the simplifications done in the normalization pass that are"]}, {"root": "UPDATE from normalization pass that are not handled by other passes (such as to not handled by other passes (such as CollapseVariableDeclarations) to avoid making the resulting", "operations": ["UPD TextElement: normalization pass that are not handled by other passes (such as from normalization pass that are not handled by other passes (such as to not handled by other passes (such as CollapseVariableDeclarations) to avoid making the resulting"]}, {"root": "UPDATE from CollapseVariableDeclarations) to avoid making the resulting code larger. to code larger.", "operations": ["UPD TextElement: CollapseVariableDeclarations) to avoid making the resulting code larger. from CollapseVariableDeclarations) to avoid making the resulting code larger. to code larger."]}, {"root": "UPDATE from Currently this pass only does two things: to <p>Currently this pass only does two things:", "operations": ["UPD TextElement: Currently this pass only does two things: from Currently this pass only does two things: to <p>Currently this pass only does two things:"]}, {"root": "UPDATE from 1. Push statements into for-loop initializer. This: to <p>1. Push statements into for-loop initializer. This: <pre>var a = 0; for(;a<0;a++) {}</pre>", "operations": ["UPD TextElement: 1. Push statements into for-loop initializer. This: from 1. Push statements into for-loop initializer. This: to <p>1. Push statements into for-loop initializer. This: <pre>var a = 0; for(;a<0;a++) {}</pre>"]}, {"root": "UPDATE from for(var a = 0;a<0;a++) {} to becomes: <pre>for(var a = 0;a<0;a++) {}</pre>", "operations": ["UPD TextElement: for(var a = 0;a<0;a++) {} from for(var a = 0;a<0;a++) {} to becomes: <pre>for(var a = 0;a<0;a++) {}</pre>"]}, {"root": "UPDATE from 2. Fold assignments like x = x + 1 into x += 1 to <p>2. Fold assignments like x = x + 1 into x += 1", "operations": ["UPD TextElement: 2. Fold assignments like x = x + 1 into x += 1 from 2. Fold assignments like x = x + 1 into x += 1 to <p>2. Fold assignments like x = x + 1 into x += 1"]}, {"root": "DEL TextElement: var a = 0; for(;a<0;a++) {}", "operations": ["DEL TextElement: var a = 0; for(;a<0;a++) {}"]}, {"root": "DEL TextElement: becomes:", "operations": ["DEL TextElement: becomes:"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}]}}, {"Denormalize_diff": {"operations": ["Update QualifiedName: com.google.common.base.Preconditions(2) to com.google.common.base.Preconditions.checkState", "Update TextElement: The goal with this pass is to reverse the simplifications done in the(10) to The goal with this pass is to reverse the simplifications done in the normalization pass that are", "Update TextElement: normalization pass that are not handled by other passes (such as(11) to not handled by other passes (such as CollapseVariableDeclarations) to avoid making the resulting", "Update TextElement: CollapseVariableDeclarations) to avoid making the resulting code larger.(12) to code larger.", "Update TextElement: Currently this pass only does two things:(13) to <p>Currently this pass only does two things:", "Update TextElement: 1. Push statements into for-loop initializer. This:(14) to <p>1. Push statements into for-loop initializer. This: <pre>var a = 0; for(;a<0;a++) {}</pre>", "Update TextElement: for(var a = 0;a<0;a++) {}(17) to becomes: <pre>for(var a = 0;a<0;a++) {}</pre>", "Update TextElement: 2. Fold assignments like x = x + 1 into x += 1(18) to <p>2. Fold assignments like x = x + 1 into x += 1", "Delete TextElement: var a = 0; for(;a<0;a++) {}(15)", "Delete TextElement: becomes:(16)", "Delete SimpleName: Preconditions(289)"]}}, {"Node_cluster": {"actions": [{"root": "INS StringLiteral: \"\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: child to MethodInvocation at 3", "operations": ["INS SimpleName: child to MethodInvocation at 3"]}, {"root": "INS SimpleName: parent to MethodInvocation at 4", "operations": ["INS SimpleName: parent to MethodInvocation at 4"]}]}}, {"Node_diff": {"operations": ["Insert StringLiteral: \"\"(2809) into MethodInvocation(2812) at 2", "Insert SimpleName: child(2810) into MethodInvocation(2812) at 3", "Insert SimpleName: parent(2811) into MethodInvocation(2812) at 4"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}