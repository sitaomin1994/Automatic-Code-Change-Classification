{"application": "apache-avro", "csha": "0ba056f58b54d299fbe991102b5aa416ac3ab845", "files": [{"Schema_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: org.codehaus.jackson.node.DoubleNode to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS InfixExpression: == to ReturnStatement at 0", "INS SimpleName: isNaN to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleType: JsonNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: thatDefaultValue to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 2", "INS SimpleName: Double to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: thatDefaultValue to InfixExpression: == at 0", "INS SimpleName: getValueAsDouble to MethodInvocation at 1", "INS SimpleName: JsonNode to SimpleType: JsonNode at 0", "INS IfStatement to Block at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: defaultValueEquals to MethodDeclaration at 2", "INS ReturnStatement to IfStatement at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: defaultValue to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS ReturnStatement to IfStatement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: thatDefaultValue to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: thatDefaultValue to MethodInvocation at 2", "INS SimpleName: isNaN to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: getValueAsDouble to MethodInvocation at 1", "INS SimpleName: Double to MethodInvocation at 0", "INS SimpleName: defaultValue to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS MethodInvocation to InfixExpression: && at 2", "operations": ["INS MethodInvocation to InfixExpression: && at 2"]}, {"root": "UPDATE from defaultValue to defaultValueEquals", "operations": ["UPD SimpleName: defaultValue from defaultValue to defaultValueEquals"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: that.defaultValue to MethodInvocation at 1", "MOV SimpleName: defaultValue to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 9", "operations": ["INS SimpleName: defaultValue to VariableDeclarationFragment at 0", "INS SimpleType: JsonNode to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: JsonNode to SimpleType: JsonNode at 0", "INS VariableDeclarationStatement to Block at 9"]}, {"root": "INS IfStatement to Block at 10", "operations": ["INS SimpleType: DoubleNode to ClassInstanceCreation at 0", "INS SimpleName: getTextValue to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: valueOf to MethodInvocation at 1", "INS QualifiedName: Type.FLOAT to MethodInvocation at 0", "INS QualifiedName: Type.DOUBLE to MethodInvocation at 0", "INS SimpleName: isTextual to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to Block at 10", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: defaultValue to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS SimpleName: defaultValue to InfixExpression: != at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: defaultValue to Assignment: = at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to IfStatement at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: fieldSchema to MethodInvocation at 0", "INS SimpleName: defaultValue to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS SimpleName: fieldSchema to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: DoubleNode to SimpleType: DoubleNode at 0", "INS SimpleName: Double to MethodInvocation at 0", "INS ClassInstanceCreation to Assignment: = at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Field to VariableDeclarationStatement at 0", "MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Field to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: defaultValue to ClassInstanceCreation at 4", "operations": ["INS SimpleName: defaultValue to ClassInstanceCreation at 4"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL QualifiedName: that.defaultValue", "DEL NullLiteral", "DEL SimpleName: equals", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL ConditionalExpression", "DEL ParenthesizedExpression"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL QualifiedName: that.order", "DEL SimpleName: order", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: equals"]}]}}, {"Schema_diff": {"operations": ["Insert ImportDeclaration(64) into CompilationUnit(7196) at 24", "Insert QualifiedName: org.codehaus.jackson.node.DoubleNode(63) into ImportDeclaration(64) at 0", "Insert MethodDeclaration(1852) into TypeDeclaration: class(1868) at 27", "Insert Modifier: private(1817) into MethodDeclaration(1852) at 0", "Insert PrimitiveType: boolean(1818) into MethodDeclaration(1852) at 1", "Insert SimpleName: defaultValueEquals(1819) into MethodDeclaration(1852) at 2", "Insert SingleVariableDeclaration(1823) into MethodDeclaration(1852) at 3", "Insert Block(1851) into MethodDeclaration(1852) at 4", "Insert SimpleType: JsonNode(1821) into SingleVariableDeclaration(1823) at 0", "Insert SimpleName: thatDefaultValue(1822) into SingleVariableDeclaration(1823) at 1", "Insert IfStatement(1831) into Block(1851) at 0", "Insert IfStatement(1845) into Block(1851) at 1", "Insert ReturnStatement(1850) into Block(1851) at 2", "Insert SimpleName: JsonNode(1820) into SimpleType: JsonNode(1821) at 0", "Move InfixExpression: ==(1793) into IfStatement(1831) at 0", "Insert ReturnStatement(1830) into IfStatement(1831) at 1", "Insert MethodInvocation(1837) into IfStatement(1845) at 0", "Insert ReturnStatement(1844) into IfStatement(1845) at 1", "Insert MethodInvocation(1849) into ReturnStatement(1850) at 0", "Insert MethodInvocation(1795) into InfixExpression: &&(1800) at 2", "Insert InfixExpression: ==(1829) into ReturnStatement(1830) at 0", "Insert SimpleName: Double(1832) into MethodInvocation(1837) at 0", "Insert SimpleName: isNaN(1833) into MethodInvocation(1837) at 1", "Insert MethodInvocation(1836) into MethodInvocation(1837) at 2", "Insert MethodInvocation(1843) into ReturnStatement(1844) at 0", "Insert SimpleName: defaultValue(1846) into MethodInvocation(1849) at 0", "Insert SimpleName: equals(1847) into MethodInvocation(1849) at 1", "Insert SimpleName: thatDefaultValue(1848) into MethodInvocation(1849) at 2", "Update SimpleName: defaultValue(1797) to defaultValueEquals", "Move SimpleName: defaultValue(1797) into MethodInvocation(1795) at 0", "Move QualifiedName: that.defaultValue(1799) into MethodInvocation(1795) at 1", "Insert SimpleName: thatDefaultValue(1827) into InfixExpression: ==(1829) at 0", "Insert NullLiteral(1828) into InfixExpression: ==(1829) at 1", "Insert SimpleName: defaultValue(1834) into MethodInvocation(1836) at 0", "Insert SimpleName: getValueAsDouble(1835) into MethodInvocation(1836) at 1", "Insert SimpleName: Double(1838) into MethodInvocation(1843) at 0", "Insert SimpleName: isNaN(1839) into MethodInvocation(1843) at 1", "Insert MethodInvocation(1842) into MethodInvocation(1843) at 2", "Insert SimpleName: thatDefaultValue(1840) into MethodInvocation(1842) at 0", "Insert SimpleName: getValueAsDouble(1841) into MethodInvocation(1842) at 1", "Insert VariableDeclarationStatement(5493) into Block(5604) at 9", "Insert IfStatement(5528) into Block(5604) at 10", "Insert SimpleType: JsonNode(5486) into VariableDeclarationStatement(5493) at 0", "Insert VariableDeclarationFragment(5492) into VariableDeclarationStatement(5493) at 1", "Insert InfixExpression: &&(5515) into IfStatement(5528) at 0", "Insert ExpressionStatement(5527) into IfStatement(5528) at 1", "Move SimpleType: Field(5466) into VariableDeclarationStatement(5541) at 0", "Insert SimpleName: JsonNode(5485) into SimpleType: JsonNode(5486) at 0", "Insert SimpleName: defaultValue(5487) into VariableDeclarationFragment(5492) at 0", "Move MethodInvocation(5473) into VariableDeclarationFragment(5492) at 1", "Insert InfixExpression: &&(5511) into InfixExpression: &&(5515) at 0", "Insert MethodInvocation(5514) into InfixExpression: &&(5515) at 1", "Insert Assignment: =(5526) into ExpressionStatement(5527) at 0", "Insert InfixExpression: !=(5496) into InfixExpression: &&(5511) at 0", "Insert ParenthesizedExpression(5510) into InfixExpression: &&(5511) at 1", "Insert SimpleName: defaultValue(5512) into MethodInvocation(5514) at 0", "Insert SimpleName: isTextual(5513) into MethodInvocation(5514) at 1", "Insert SimpleName: defaultValue(5516) into Assignment: =(5526) at 0", "Insert ClassInstanceCreation(5525) into Assignment: =(5526) at 1", "Move SimpleType: Field(5463) into ClassInstanceCreation(5539) at 0", "Insert SimpleName: defaultValue(5537) into ClassInstanceCreation(5539) at 4", "Insert SimpleName: defaultValue(5494) into InfixExpression: !=(5496) at 0", "Insert NullLiteral(5495) into InfixExpression: !=(5496) at 1", "Insert InfixExpression: ||(5509) into ParenthesizedExpression(5510) at 0", "Insert SimpleType: DoubleNode(5518) into ClassInstanceCreation(5525) at 0", "Insert MethodInvocation(5524) into ClassInstanceCreation(5525) at 1", "Insert MethodInvocation(5502) into InfixExpression: ||(5509) at 0", "Insert MethodInvocation(5508) into InfixExpression: ||(5509) at 1", "Insert SimpleName: DoubleNode(5517) into SimpleType: DoubleNode(5518) at 0", "Insert SimpleName: Double(5519) into MethodInvocation(5524) at 0", "Insert SimpleName: valueOf(5520) into MethodInvocation(5524) at 1", "Insert MethodInvocation(5523) into MethodInvocation(5524) at 2", "Insert QualifiedName: Type.FLOAT(5497) into MethodInvocation(5502) at 0", "Insert SimpleName: equals(5498) into MethodInvocation(5502) at 1", "Insert MethodInvocation(5501) into MethodInvocation(5502) at 2", "Insert QualifiedName: Type.DOUBLE(5503) into MethodInvocation(5508) at 0", "Insert SimpleName: equals(5504) into MethodInvocation(5508) at 1", "Insert MethodInvocation(5507) into MethodInvocation(5508) at 2", "Insert SimpleName: defaultValue(5521) into MethodInvocation(5523) at 0", "Insert SimpleName: getTextValue(5522) into MethodInvocation(5523) at 1", "Insert SimpleName: fieldSchema(5499) into MethodInvocation(5501) at 0", "Insert SimpleName: getType(5500) into MethodInvocation(5501) at 1", "Insert SimpleName: fieldSchema(5505) into MethodInvocation(5507) at 0", "Insert SimpleName: getType(5506) into MethodInvocation(5507) at 1", "Delete QualifiedName: that.defaultValue(1794)", "Delete NullLiteral(1795)", "Delete InfixExpression: ==(1796)", "Delete SimpleName: equals(1798)", "Delete MethodInvocation(1800)", "Delete ParenthesizedExpression(1801)", "Delete ConditionalExpression(1802)", "Delete ParenthesizedExpression(1803)", "Delete SimpleName: order(1804)", "Delete SimpleName: equals(1805)", "Delete QualifiedName: that.order(1806)", "Delete MethodInvocation(1807)", "Delete ParenthesizedExpression(1808)"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}