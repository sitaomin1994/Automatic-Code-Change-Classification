{"application": "google-truth", "csha": "3d1bca61e4d56574dbd673c56c0196824545fa7a", "files": [{"IntegerSubject_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: Long to SimpleType: Long at 0", "INS SimpleName: isNotEqualTo to SuperMethodInvocation at 0", "INS SimpleName: isNotEqualTo to SuperMethodInvocation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS SimpleName: isNotEqualTo to SuperMethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: other to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: intValue to MethodInvocation at 1", "INS SimpleName: other to InfixExpression: == at 0", "INS SimpleType: Long to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS MethodInvocation to SuperMethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: other to SuperMethodInvocation at 1", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 2", "INS NullLiteral to SuperMethodInvocation at 1", "INS SimpleName: other to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS SimpleName: other to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS SimpleName: intValue to MethodInvocation at 1", "INS SimpleName: isNotEqualTo to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS SimpleName: other to SingleVariableDeclaration at 2", "INS IfStatement to Block at 0"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleName: other to InfixExpression: == at 0", "INS SimpleName: other to SuperMethodInvocation at 1", "INS SimpleName: other to InfixExpression: == at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: other to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: isEqualTo to SuperMethodInvocation at 0", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 2", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 2", "INS SimpleName: intValue to MethodInvocation at 1", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to SuperMethodInvocation at 1", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: isEqualTo to SuperMethodInvocation at 0"]}, {"root": "UPDATE from  Christian Gruber (cgruber@israfil.net) to  Christian Gruber", "operations": ["UPD TextElement:  Christian Gruber (cgruber@israfil.net) from  Christian Gruber (cgruber@israfil.net) to  Christian Gruber"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleType: Long to SingleVariableDeclaration at 1", "operations": ["INS SimpleType: Long to SingleVariableDeclaration at 1", "INS SimpleName: Long to SimpleType: Long at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from Ints to other", "operations": ["UPD SimpleName: Ints from Ints to other"]}, {"root": "UPDATE from saturatedCast to intValue", "operations": ["UPD SimpleName: saturatedCast from saturatedCast to intValue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.primitives.Ints", "DEL ImportDeclaration"]}, {"root": "DEL PrimitiveType: long", "operations": ["DEL PrimitiveType: long"]}, {"root": "DEL SimpleName: other", "operations": ["DEL SimpleName: other"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"IntegerSubject_diff": {"operations": ["Insert MethodDeclaration(172) into TypeDeclaration: class(173) at 9", "Insert Block(132) into MethodDeclaration(133) at 4", "Insert Modifier: public(134) into MethodDeclaration(172) at 0", "Insert PrimitiveType: void(135) into MethodDeclaration(172) at 1", "Insert SimpleName: isNotEqualTo(136) into MethodDeclaration(172) at 2", "Insert SingleVariableDeclaration(142) into MethodDeclaration(172) at 3", "Insert Block(171) into MethodDeclaration(172) at 4", "Update TextElement:  Christian Gruber (cgruber@israfil.net)(13) to  Christian Gruber", "Insert MarkerAnnotation(99) into SingleVariableDeclaration(103) at 0", "Insert SimpleType: Long(101) into SingleVariableDeclaration(103) at 1", "Insert IfStatement(131) into Block(132) at 0", "Insert MarkerAnnotation(138) into SingleVariableDeclaration(142) at 0", "Insert SimpleType: Long(140) into SingleVariableDeclaration(142) at 1", "Insert SimpleName: other(141) into SingleVariableDeclaration(142) at 2", "Insert IfStatement(170) into Block(171) at 0", "Insert SimpleName: Nullable(98) into MarkerAnnotation(99) at 0", "Insert SimpleName: Long(100) into SimpleType: Long(101) at 0", "Insert InfixExpression: ==(106) into IfStatement(131) at 0", "Insert Block(111) into IfStatement(131) at 1", "Insert Block(130) into IfStatement(131) at 2", "Insert SimpleName: Nullable(137) into MarkerAnnotation(138) at 0", "Insert SimpleName: Long(139) into SimpleType: Long(140) at 0", "Insert InfixExpression: ==(145) into IfStatement(170) at 0", "Insert Block(150) into IfStatement(170) at 1", "Insert Block(169) into IfStatement(170) at 2", "Insert SimpleName: other(104) into InfixExpression: ==(106) at 0", "Insert NullLiteral(105) into InfixExpression: ==(106) at 1", "Insert ExpressionStatement(110) into Block(111) at 0", "Insert IfStatement(129) into Block(130) at 0", "Insert SimpleName: other(143) into InfixExpression: ==(145) at 0", "Insert NullLiteral(144) into InfixExpression: ==(145) at 1", "Insert ExpressionStatement(149) into Block(150) at 0", "Insert IfStatement(168) into Block(169) at 0", "Insert SuperMethodInvocation(109) into ExpressionStatement(110) at 0", "Insert InfixExpression: ==(116) into IfStatement(129) at 0", "Insert Block(123) into IfStatement(129) at 1", "Insert Block(128) into IfStatement(129) at 2", "Insert SuperMethodInvocation(148) into ExpressionStatement(149) at 0", "Insert InfixExpression: ==(155) into IfStatement(168) at 0", "Insert Block(162) into IfStatement(168) at 1", "Insert Block(167) into IfStatement(168) at 2", "Insert SimpleName: isEqualTo(107) into SuperMethodInvocation(109) at 0", "Insert NullLiteral(108) into SuperMethodInvocation(109) at 1", "Insert MethodInvocation(114) into InfixExpression: ==(116) at 0", "Insert SimpleName: other(115) into InfixExpression: ==(116) at 1", "Move ExpressionStatement(109) into Block(123) at 0", "Insert ExpressionStatement(127) into Block(128) at 0", "Insert SimpleName: isNotEqualTo(146) into SuperMethodInvocation(148) at 0", "Insert NullLiteral(147) into SuperMethodInvocation(148) at 1", "Insert MethodInvocation(153) into InfixExpression: ==(155) at 0", "Insert SimpleName: other(154) into InfixExpression: ==(155) at 1", "Insert ExpressionStatement(161) into Block(162) at 0", "Insert ExpressionStatement(166) into Block(167) at 0", "Insert SimpleName: other(112) into MethodInvocation(114) at 0", "Insert SimpleName: intValue(113) into MethodInvocation(114) at 1", "Insert SuperMethodInvocation(126) into ExpressionStatement(127) at 0", "Insert SimpleName: other(151) into MethodInvocation(153) at 0", "Insert SimpleName: intValue(152) into MethodInvocation(153) at 1", "Insert SuperMethodInvocation(160) into ExpressionStatement(161) at 0", "Insert SuperMethodInvocation(165) into ExpressionStatement(166) at 0", "Insert SimpleName: isEqualTo(124) into SuperMethodInvocation(126) at 0", "Insert SimpleName: other(125) into SuperMethodInvocation(126) at 1", "Insert SimpleName: isNotEqualTo(156) into SuperMethodInvocation(160) at 0", "Insert MethodInvocation(159) into SuperMethodInvocation(160) at 1", "Insert SimpleName: isNotEqualTo(163) into SuperMethodInvocation(165) at 0", "Insert SimpleName: other(164) into SuperMethodInvocation(165) at 1", "Update SimpleName: Ints(104) to other", "Update SimpleName: saturatedCast(105) to intValue", "Insert SimpleName: other(157) into MethodInvocation(159) at 0", "Insert SimpleName: intValue(158) into MethodInvocation(159) at 1", "Delete QualifiedName: com.google.common.primitives.Ints(2)", "Delete ImportDeclaration(3)", "Delete PrimitiveType: long(100)", "Delete SimpleName: other(106)", "Delete Block(110)"]}}, {"LongSubject_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: other to InfixExpression: == at 0", "INS PrimitiveType: long to CastExpression at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS NullLiteral to ConditionalExpression at 1", "INS SimpleName: isNotEqualTo to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SuperMethodInvocation to ExpressionStatement at 0", "INS SimpleName: other to SingleVariableDeclaration at 2", "INS CastExpression to ConditionalExpression at 2", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ConditionalExpression to SuperMethodInvocation at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Integer to SingleVariableDeclaration at 1", "INS SimpleName: other to CastExpression at 1", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: isNotEqualTo to SuperMethodInvocation at 0"]}, {"root": "UPDATE from  Christian Gruber (cgruber@israfil.net) to  Christian Gruber", "operations": ["UPD TextElement:  Christian Gruber (cgruber@israfil.net) from  Christian Gruber (cgruber@israfil.net) to  Christian Gruber"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleType: Integer to SingleVariableDeclaration at 1", "operations": ["INS SimpleType: Integer to SingleVariableDeclaration at 1", "INS SimpleName: Integer to SimpleType: Integer at 0"]}, {"root": "INS SuperMethodInvocation to ExpressionStatement at 0", "operations": ["INS SuperMethodInvocation to ExpressionStatement at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: other to InfixExpression: == at 0", "INS ConditionalExpression to SuperMethodInvocation at 1", "INS SimpleName: isEqualTo to SuperMethodInvocation at 0", "INS NullLiteral to ConditionalExpression at 1", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV CastExpression to ConditionalExpression at 2"]}, {"root": "DEL PrimitiveType: int", "operations": ["DEL PrimitiveType: int"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: isEqualTo", "DEL MethodInvocation"]}]}}, {"LongSubject_diff": {"operations": ["Insert MethodDeclaration(140) into TypeDeclaration: class(141) at 9", "Insert Modifier: public(118) into MethodDeclaration(140) at 0", "Insert PrimitiveType: void(119) into MethodDeclaration(140) at 1", "Insert SimpleName: isNotEqualTo(120) into MethodDeclaration(140) at 2", "Insert SingleVariableDeclaration(126) into MethodDeclaration(140) at 3", "Insert Block(139) into MethodDeclaration(140) at 4", "Update TextElement:  Christian Gruber (cgruber@israfil.net)(11) to  Christian Gruber", "Insert MarkerAnnotation(99) into SingleVariableDeclaration(103) at 0", "Insert SimpleType: Integer(101) into SingleVariableDeclaration(103) at 1", "Insert MarkerAnnotation(122) into SingleVariableDeclaration(126) at 0", "Insert SimpleType: Integer(124) into SingleVariableDeclaration(126) at 1", "Insert SimpleName: other(125) into SingleVariableDeclaration(126) at 2", "Insert ExpressionStatement(138) into Block(139) at 0", "Insert SimpleName: Nullable(98) into MarkerAnnotation(99) at 0", "Insert SimpleName: Integer(100) into SimpleType: Integer(101) at 0", "Insert SuperMethodInvocation(114) into ExpressionStatement(115) at 0", "Insert SimpleName: Nullable(121) into MarkerAnnotation(122) at 0", "Insert SimpleName: Integer(123) into SimpleType: Integer(124) at 0", "Insert SuperMethodInvocation(137) into ExpressionStatement(138) at 0", "Insert SimpleName: isEqualTo(104) into SuperMethodInvocation(114) at 0", "Insert ConditionalExpression(113) into SuperMethodInvocation(114) at 1", "Insert SimpleName: isNotEqualTo(127) into SuperMethodInvocation(137) at 0", "Insert ConditionalExpression(136) into SuperMethodInvocation(137) at 1", "Insert ParenthesizedExpression(108) into ConditionalExpression(113) at 0", "Insert NullLiteral(109) into ConditionalExpression(113) at 1", "Move CastExpression(104) into ConditionalExpression(113) at 2", "Insert ParenthesizedExpression(131) into ConditionalExpression(136) at 0", "Insert NullLiteral(132) into ConditionalExpression(136) at 1", "Insert CastExpression(135) into ConditionalExpression(136) at 2", "Insert InfixExpression: ==(107) into ParenthesizedExpression(108) at 0", "Insert InfixExpression: ==(130) into ParenthesizedExpression(131) at 0", "Insert PrimitiveType: long(133) into CastExpression(135) at 0", "Insert SimpleName: other(134) into CastExpression(135) at 1", "Insert SimpleName: other(105) into InfixExpression: ==(107) at 0", "Insert NullLiteral(106) into InfixExpression: ==(107) at 1", "Insert SimpleName: other(128) into InfixExpression: ==(130) at 0", "Insert NullLiteral(129) into InfixExpression: ==(130) at 1", "Delete PrimitiveType: int(98)", "Delete SimpleName: isEqualTo(101)", "Delete MethodInvocation(105)"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}