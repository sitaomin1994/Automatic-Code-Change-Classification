{"application": "apache-mina", "csha": "8ee4890b444f3315ab5cc960d905edc83339d82b", "files": [{"CoapMessage_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 7", "INS PrimitiveType: int to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: version to FieldAccess at 1", "INS SimpleName: version to SingleVariableDeclaration at 1", "INS SimpleName: setVersion to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: version to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 23"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: MessageType to SimpleType: MessageType at 0", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: MessageType to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SimpleName: type to FieldAccess at 1", "INS SimpleName: type to SingleVariableDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: type to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: setType to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS FieldAccess to Assignment: = at 0", "INS SimpleName: code to FieldAccess at 1", "INS SimpleName: code to SingleVariableDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS SimpleName: setCode to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: code to Assignment: = at 1", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: id to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: id to Assignment: = at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: setId to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SimpleName: id to SingleVariableDeclaration at 1", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: token to FieldAccess at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: token to SingleVariableDeclaration at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: setToken to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: token to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Dimension to ArrayType: byte[] at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 28", "INS SimpleName: payload to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: payload to SingleVariableDeclaration at 1", "INS SimpleName: setPayload to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: payload to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Dimension to ArrayType: byte[] at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: setOptions to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: options to Assignment: = at 1", "INS SimpleType: CoapOption to ArrayType: CoapOption[] at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: options to FieldAccess at 1", "INS SimpleName: options to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS Dimension to ArrayType: CoapOption[] at 1", "INS SimpleName: CoapOption to SimpleType: CoapOption at 0", "INS MethodDeclaration to TypeDeclaration: class at 29", "INS ArrayType: CoapOption[] to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Block to MethodDeclaration at 4"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Modifier: private to FieldDeclaration at 0", "MOV VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: final", "DEL PrimitiveType: int"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"CoapMessage_diff": {"operations": ["Insert FieldDeclaration(47) into TypeDeclaration: class(699) at 7", "Insert MethodDeclaration(606) into TypeDeclaration: class(699) at 22", "Insert MethodDeclaration(621) into TypeDeclaration: class(699) at 23", "Insert MethodDeclaration(635) into TypeDeclaration: class(699) at 24", "Insert MethodDeclaration(649) into TypeDeclaration: class(699) at 25", "Insert MethodDeclaration(665) into TypeDeclaration: class(699) at 26", "Insert MethodDeclaration(681) into TypeDeclaration: class(699) at 27", "Insert MethodDeclaration(698) into TypeDeclaration: class(699) at 28", "Move Modifier: private(46) into FieldDeclaration(47) at 0", "Insert PrimitiveType: int(44) into FieldDeclaration(47) at 1", "Move VariableDeclarationFragment(50) into FieldDeclaration(47) at 2", "Insert Modifier: public(593) into MethodDeclaration(606) at 0", "Insert PrimitiveType: void(594) into MethodDeclaration(606) at 1", "Insert SimpleName: setVersion(595) into MethodDeclaration(606) at 2", "Insert SingleVariableDeclaration(598) into MethodDeclaration(606) at 3", "Insert Block(605) into MethodDeclaration(606) at 4", "Insert Modifier: public(607) into MethodDeclaration(621) at 0", "Insert PrimitiveType: void(608) into MethodDeclaration(621) at 1", "Insert SimpleName: setType(609) into MethodDeclaration(621) at 2", "Insert SingleVariableDeclaration(613) into MethodDeclaration(621) at 3", "Insert Block(620) into MethodDeclaration(621) at 4", "Insert Modifier: public(622) into MethodDeclaration(635) at 0", "Insert PrimitiveType: void(623) into MethodDeclaration(635) at 1", "Insert SimpleName: setCode(624) into MethodDeclaration(635) at 2", "Insert SingleVariableDeclaration(627) into MethodDeclaration(635) at 3", "Insert Block(634) into MethodDeclaration(635) at 4", "Insert Modifier: public(636) into MethodDeclaration(649) at 0", "Insert PrimitiveType: void(637) into MethodDeclaration(649) at 1", "Insert SimpleName: setId(638) into MethodDeclaration(649) at 2", "Insert SingleVariableDeclaration(641) into MethodDeclaration(649) at 3", "Insert Block(648) into MethodDeclaration(649) at 4", "Insert Modifier: public(650) into MethodDeclaration(665) at 0", "Insert PrimitiveType: void(651) into MethodDeclaration(665) at 1", "Insert SimpleName: setToken(652) into MethodDeclaration(665) at 2", "Insert SingleVariableDeclaration(657) into MethodDeclaration(665) at 3", "Insert Block(664) into MethodDeclaration(665) at 4", "Insert Modifier: public(666) into MethodDeclaration(681) at 0", "Insert PrimitiveType: void(667) into MethodDeclaration(681) at 1", "Insert SimpleName: setPayload(668) into MethodDeclaration(681) at 2", "Insert SingleVariableDeclaration(673) into MethodDeclaration(681) at 3", "Insert Block(680) into MethodDeclaration(681) at 4", "Insert Modifier: public(682) into MethodDeclaration(698) at 0", "Insert PrimitiveType: void(683) into MethodDeclaration(698) at 1", "Insert SimpleName: setOptions(684) into MethodDeclaration(698) at 2", "Insert SingleVariableDeclaration(690) into MethodDeclaration(698) at 3", "Insert Block(697) into MethodDeclaration(698) at 4", "Insert PrimitiveType: int(596) into SingleVariableDeclaration(598) at 0", "Insert SimpleName: version(597) into SingleVariableDeclaration(598) at 1", "Insert ExpressionStatement(604) into Block(605) at 0", "Insert SimpleType: MessageType(611) into SingleVariableDeclaration(613) at 0", "Insert SimpleName: type(612) into SingleVariableDeclaration(613) at 1", "Insert ExpressionStatement(619) into Block(620) at 0", "Insert PrimitiveType: int(625) into SingleVariableDeclaration(627) at 0", "Insert SimpleName: code(626) into SingleVariableDeclaration(627) at 1", "Insert ExpressionStatement(633) into Block(634) at 0", "Insert PrimitiveType: int(639) into SingleVariableDeclaration(641) at 0", "Insert SimpleName: id(640) into SingleVariableDeclaration(641) at 1", "Insert ExpressionStatement(647) into Block(648) at 0", "Insert ArrayType: byte[](655) into SingleVariableDeclaration(657) at 0", "Insert SimpleName: token(656) into SingleVariableDeclaration(657) at 1", "Insert ExpressionStatement(663) into Block(664) at 0", "Insert ArrayType: byte[](671) into SingleVariableDeclaration(673) at 0", "Insert SimpleName: payload(672) into SingleVariableDeclaration(673) at 1", "Insert ExpressionStatement(679) into Block(680) at 0", "Insert ArrayType: CoapOption[](688) into SingleVariableDeclaration(690) at 0", "Insert SimpleName: options(689) into SingleVariableDeclaration(690) at 1", "Insert ExpressionStatement(696) into Block(697) at 0", "Insert Assignment: =(603) into ExpressionStatement(604) at 0", "Insert SimpleName: MessageType(610) into SimpleType: MessageType(611) at 0", "Insert Assignment: =(618) into ExpressionStatement(619) at 0", "Insert Assignment: =(632) into ExpressionStatement(633) at 0", "Insert Assignment: =(646) into ExpressionStatement(647) at 0", "Insert PrimitiveType: byte(653) into ArrayType: byte[](655) at 0", "Insert Dimension(654) into ArrayType: byte[](655) at 1", "Insert Assignment: =(662) into ExpressionStatement(663) at 0", "Insert PrimitiveType: byte(669) into ArrayType: byte[](671) at 0", "Insert Dimension(670) into ArrayType: byte[](671) at 1", "Insert Assignment: =(678) into ExpressionStatement(679) at 0", "Insert SimpleType: CoapOption(686) into ArrayType: CoapOption[](688) at 0", "Insert Dimension(687) into ArrayType: CoapOption[](688) at 1", "Insert Assignment: =(695) into ExpressionStatement(696) at 0", "Insert FieldAccess(601) into Assignment: =(603) at 0", "Insert SimpleName: version(602) into Assignment: =(603) at 1", "Insert FieldAccess(616) into Assignment: =(618) at 0", "Insert SimpleName: type(617) into Assignment: =(618) at 1", "Insert FieldAccess(630) into Assignment: =(632) at 0", "Insert SimpleName: code(631) into Assignment: =(632) at 1", "Insert FieldAccess(644) into Assignment: =(646) at 0", "Insert SimpleName: id(645) into Assignment: =(646) at 1", "Insert FieldAccess(660) into Assignment: =(662) at 0", "Insert SimpleName: token(661) into Assignment: =(662) at 1", "Insert FieldAccess(676) into Assignment: =(678) at 0", "Insert SimpleName: payload(677) into Assignment: =(678) at 1", "Insert SimpleName: CoapOption(685) into SimpleType: CoapOption(686) at 0", "Insert FieldAccess(693) into Assignment: =(695) at 0", "Insert SimpleName: options(694) into Assignment: =(695) at 1", "Insert ThisExpression(599) into FieldAccess(601) at 0", "Insert SimpleName: version(600) into FieldAccess(601) at 1", "Insert ThisExpression(614) into FieldAccess(616) at 0", "Insert SimpleName: type(615) into FieldAccess(616) at 1", "Insert ThisExpression(628) into FieldAccess(630) at 0", "Insert SimpleName: code(629) into FieldAccess(630) at 1", "Insert ThisExpression(642) into FieldAccess(644) at 0", "Insert SimpleName: id(643) into FieldAccess(644) at 1", "Insert ThisExpression(658) into FieldAccess(660) at 0", "Insert SimpleName: token(659) into FieldAccess(660) at 1", "Insert ThisExpression(674) into FieldAccess(676) at 0", "Insert SimpleName: payload(675) into FieldAccess(676) at 1", "Insert ThisExpression(691) into FieldAccess(693) at 0", "Insert SimpleName: options(692) into FieldAccess(693) at 1", "Delete Modifier: final(28)", "Delete Modifier: final(34)", "Delete Modifier: final(41)", "Delete Modifier: final(47)", "Delete PrimitiveType: int(48)", "Delete FieldDeclaration(51)", "Delete Modifier: final(53)", "Delete Modifier: final(61)", "Delete Modifier: final(69)"]}}, {"IoSession_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 11"]}, {"root": "UPDATE from org.apache.mina.session.SslHelper to org.apache.mina.transport.nio.SslHelper", "operations": ["UPD QualifiedName: org.apache.mina.session.SslHelper from org.apache.mina.session.SslHelper to org.apache.mina.transport.nio.SslHelper"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Queue", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: WriteRequest", "DEL TextElement:  the write queue of this session", "DEL SimpleName: Queue", "DEL TagElement: @link", "DEL TextElement: Get the ", "DEL SimpleName: WriteRequest", "DEL ParameterizedType: Queue<WriteRequest>", "DEL TextElement:  of this session. The write queue contains the pending writes.", "DEL SimpleName: Queue", "DEL SimpleType: Queue", "DEL TagElement: @return", "DEL TagElement", "DEL SimpleName: getWriteQueue", "DEL Javadoc", "DEL MethodDeclaration"]}]}}, {"IoSession_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(631) at 11", "Update QualifiedName: org.apache.mina.session.SslHelper(16) to org.apache.mina.transport.nio.SslHelper", "Delete QualifiedName: java.util.Queue(6)", "Delete ImportDeclaration(7)", "Delete TextElement: Get the (632)", "Delete SimpleName: Queue(633)", "Delete TagElement: @link(634)", "Delete TextElement:  of this session. The write queue contains the pending writes.(635)", "Delete TagElement(636)", "Delete TextElement:  the write queue of this session(637)", "Delete TagElement: @return(638)", "Delete Javadoc(639)", "Delete SimpleName: Queue(640)", "Delete SimpleType: Queue(641)", "Delete SimpleName: WriteRequest(642)", "Delete SimpleType: WriteRequest(643)", "Delete ParameterizedType: Queue<WriteRequest>(644)", "Delete SimpleName: getWriteQueue(645)", "Delete MethodDeclaration(646)"]}}, {"AbstractIoSession_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 33"]}, {"root": "UPDATE from org.apache.mina.transport.nio.SelectorListener to org.apache.mina.transport.nio.SslHelper", "operations": ["UPD QualifiedName: org.apache.mina.transport.nio.SelectorListener from org.apache.mina.transport.nio.SelectorListener to org.apache.mina.transport.nio.SslHelper"]}, {"root": "UPDATE from selectorLoop to idleChecker", "operations": ["UPD SimpleName: selectorLoop from selectorLoop to idleChecker"]}, {"root": "UPDATE from  the selector loop in charge of processing this session read/write events to  the checker for idle session", "operations": ["UPD TextElement:  the selector loop in charge of processing this session read/write events from  the selector loop in charge of processing this session read/write events to  the checker for idle session"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.nio.channels.SelectableChannel", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.nio.channels.SocketChannel", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Queue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.atomic.AtomicBoolean"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.mina.util.AbstractIoFuture", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL TextElement: the NIO channel for this session ", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: SelectableChannel", "DEL SimpleName: channel", "DEL Modifier: protected", "DEL SimpleName: SelectableChannel"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Javadoc", "DEL Modifier: final", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleType: AtomicBoolean", "DEL SimpleType: AtomicBoolean", "DEL Modifier: private", "DEL SimpleName: registeredForWrite", "DEL TextElement: is this session registered for being polled for write ready events ", "DEL VariableDeclarationFragment", "DEL SimpleName: AtomicBoolean", "DEL SimpleName: AtomicBoolean"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL TextElement: the queue of pending writes for the session, to be dequeued by the ", "DEL SimpleName: DefaultWriteQueue", "DEL ParameterizedType: Queue<WriteRequest>", "DEL SimpleType: WriteRequest", "DEL TagElement: @link", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL SimpleType: Queue", "DEL SimpleName: Queue", "DEL SimpleName: WriteRequest", "DEL SimpleType: DefaultWriteQueue", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: writeQueue", "DEL Modifier: final", "DEL TextElement:  ", "DEL SimpleName: SelectorLoop"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: SelectableChannel", "DEL SimpleName: channel", "DEL SingleVariableDeclaration", "DEL SimpleName: SelectableChannel"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL ExpressionStatement", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: channel", "DEL SimpleName: channel"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TagElement", "DEL Modifier: protected", "DEL MethodDeclaration", "DEL Javadoc", "DEL Modifier: abstract", "DEL PrimitiveType: int", "DEL TextElement:  the message to write", "DEL SimpleType: Object", "DEL TagElement: @return", "DEL SimpleName: message", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TextElement: Writes the message immediately. If we can't write all the message, we will get back the number of written bytes.", "DEL SimpleName: writeDirect", "DEL TextElement:  the number of written bytes", "DEL SimpleName: message"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement:  The request containing the HeapBuffer", "DEL TextElement: Copy the HeapBuffer into a DirectBuffer, if needed.", "DEL SimpleName: WriteRequest", "DEL TagElement: @return", "DEL SimpleName: writeRequest", "DEL Javadoc", "DEL Modifier: protected", "DEL TextElement:  A flag to force the creation of a DirectBuffer", "DEL TagElement: @param", "DEL TagElement", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement:  A DirectBuffer", "DEL SimpleName: createNew", "DEL SingleVariableDeclaration", "DEL SimpleName: ByteBuffer", "DEL Modifier: abstract", "DEL MethodDeclaration", "DEL SimpleType: ByteBuffer", "DEL PrimitiveType: boolean", "DEL SimpleName: convertToDirectBuffer", "DEL SimpleName: createNew", "DEL SimpleType: WriteRequest", "DEL SimpleName: writeRequest"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL SimpleName: add", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: add", "DEL SimpleName: convertToDirectBuffer", "DEL SimpleName: ByteBuffer", "DEL SimpleName: DefaultWriteRequest", "DEL SimpleName: Override", "DEL Block", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: writeRequest", "DEL SimpleName: writeRequest", "DEL SimpleName: getAndSet", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: WriteRequest", "DEL MarkerAnnotation", "DEL Block", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: SSL_HELPER", "DEL SimpleName: writeRequest", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: getOriginalMessage", "DEL PrimitiveType: int", "DEL SimpleName: complete", "DEL SimpleName: written", "DEL SimpleName: writeQueue", "DEL NumberLiteral: 0", "DEL InfixExpression: ||", "DEL NullLiteral", "DEL SimpleName: written", "DEL InfixExpression: !=", "DEL PrefixExpression: !", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleType: DefaultWriteFuture", "DEL SimpleName: writeRequest", "DEL SimpleName: WriteRequest", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: DefaultWriteFuture", "DEL ClassInstanceCreation", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: DefaultWriteRequest", "DEL SimpleName: writeRequest", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: message", "DEL SimpleName: debug", "DEL StringLiteral: \"wrote {} bytes to {}\"", "DEL CastExpression", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: getMessage", "DEL SimpleName: highLevel", "DEL VariableDeclarationFragment", "DEL InfixExpression: >", "DEL SimpleName: writeQueue", "DEL MethodInvocation", "DEL SimpleName: future", "DEL SimpleName: writeQueue", "DEL SimpleType: Object", "DEL SimpleName: written", "DEL SimpleName: convertToDirectBuffer", "DEL SimpleName: written", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL SimpleName: writeRequest", "DEL SimpleName: isConnectedSecured", "DEL ExpressionStatement", "DEL SimpleName: ByteBuffer", "DEL Javadoc", "DEL SimpleName: writeRequest", "DEL SimpleName: getFuture", "DEL SimpleName: future", "DEL SimpleName: processWrite", "DEL SimpleName: future", "DEL IfStatement", "DEL SimpleName: sslHelper", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL CastExpression", "DEL Block", "DEL SimpleName: SslHelper", "DEL Assignment: =", "DEL SimpleName: IllegalStateException", "DEL Block", "DEL SimpleName: highLevel", "DEL MethodInvocation", "DEL TagElement", "DEL Block", "DEL SimpleType: DefaultWriteFuture", "DEL SimpleType: ByteBuffer", "DEL SimpleType: IllegalStateException", "DEL SimpleName: highLevel", "DEL SimpleName: written", "DEL ExpressionStatement", "DEL SimpleName: writeRequest", "DEL NullLiteral", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: writeRequest", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SynchronizedStatement", "DEL SimpleName: convertToDirectBuffer", "DEL SimpleName: getMessage", "DEL SimpleName: DefaultWriteFuture", "DEL SimpleName: writeRequest", "DEL SimpleName: processMessageSent", "DEL SimpleName: flushWriteQueue", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL ThrowStatement", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL SimpleName: writeQueue", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: getMessage", "DEL VariableDeclarationStatement", "DEL SimpleName: registeredForWrite", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL Assignment: =", "DEL IfStatement", "DEL ThisExpression", "DEL SimpleName: idleChecker", "DEL SimpleName: enqueueWriteRequest", "DEL SimpleName: writeRequest", "DEL MethodInvocation", "DEL SimpleType: SslHelper", "DEL SimpleName: getAttribute", "DEL ThisExpression", "DEL SimpleType: ByteBuffer", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: message", "DEL IfStatement", "DEL Assignment: =", "DEL Block", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: sessionWritten", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: true", "DEL SimpleName: isEmpty", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: writeRequest", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: writeQueue", "DEL Modifier: final", "DEL Block", "DEL SimpleName: remaining", "DEL SimpleType: WriteRequest", "DEL SimpleName: System", "DEL BooleanLiteral: true", "DEL SimpleName: remaining", "DEL ParenthesizedExpression", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: writeDirect", "DEL CastExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: sslHelper", "DEL SimpleName: message", "DEL ExpressionStatement", "DEL SimpleName: WriteRequest", "DEL MethodInvocation", "DEL SimpleName: remaining", "DEL SimpleName: writeRequest", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL SimpleName: sslHelper", "DEL SimpleName: currentTimeMillis", "DEL NumberLiteral: 0", "DEL SimpleName: incrementWrittenBytes", "DEL MethodInvocation", "DEL SimpleName: Object"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL PrimitiveType: void", "DEL Modifier: abstract", "DEL MethodDeclaration", "DEL SimpleName: flushWriteQueue"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: setNotRegisteredForWrite", "DEL SimpleName: set", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL PrimitiveType: void", "DEL Block", "DEL Modifier: public", "DEL SimpleName: registeredForWrite"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: registeredForWrite", "DEL SimpleName: get", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: isRegisteredForWrite", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Modifier: protected"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: WriteRequest", "DEL TagElement: @inheritDoc", "DEL SimpleName: getWriteQueue", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: Queue", "DEL Javadoc", "DEL SimpleName: Override", "DEL TagElement", "DEL Block", "DEL SimpleType: Queue", "DEL SimpleName: WriteRequest", "DEL ParameterizedType: Queue<WriteRequest>", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL SimpleName: writeQueue"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Void", "DEL TextElement:  ", "DEL TagElement", "DEL Modifier: private", "DEL BooleanLiteral: false", "DEL ParameterizedType: AbstractIoFuture<Void>", "DEL SimpleType: IoFuture", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL TextElement: we pre-allocate a close future for lock-less ", "DEL Modifier: protected", "DEL SimpleName: mayInterruptIfRunning", "DEL SimpleName: close", "DEL TagElement", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleType: Void", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: AbstractIoFuture", "DEL SimpleType: AbstractIoFuture", "DEL TagElement: @link", "DEL ParameterizedType: IoFuture<Void>", "DEL Modifier: final", "DEL MethodRefParameter", "DEL SimpleName: cancelOwner", "DEL SimpleType: Void", "DEL SimpleName: closeFuture", "DEL MethodRef", "DEL ClassInstanceCreation", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: IoFuture", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL AnonymousClassDeclaration", "DEL SimpleName: Void", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ClassInstanceCreation", "DEL ThisExpression", "DEL SimpleName: warn", "DEL StringLiteral: \"Session {} not opened\"", "DEL StringLiteral: \"cannot close an not opened session\"", "DEL SwitchCase", "DEL ThrowStatement", "DEL SimpleName: immediately", "DEL ExpressionStatement", "DEL SimpleName: processSessionClosed", "DEL Assignment: =", "DEL SimpleName: CLOSED", "DEL QualifiedName: SessionState.CLOSING", "DEL SimpleType: IoFuture", "DEL ClassInstanceCreation", "DEL SimpleName: LOG", "DEL ExpressionStatement", "DEL SimpleName: state", "DEL SimpleName: Void", "DEL SimpleName: LOG", "DEL Block", "DEL ExpressionStatement", "DEL BreakStatement", "DEL SimpleType: IllegalStateException", "DEL SimpleName: IllegalStateException", "DEL SimpleName: close", "DEL SimpleName: channelClose", "DEL Modifier: public", "DEL ThisExpression", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: CREATED", "DEL SwitchStatement", "DEL ThisExpression", "DEL SimpleName: warn", "DEL StringLiteral: \"Already closed session {}\"", "DEL BreakStatement", "DEL SwitchCase", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SwitchCase", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"Already closing session {}\"", "DEL IfStatement", "DEL ParameterizedType: IoFuture<Void>", "DEL SimpleName: closeFuture", "DEL ExpressionStatement", "DEL SimpleName: CONNECTED", "DEL SimpleName: CLOSING", "DEL SimpleName: LOG", "DEL SimpleName: IoFuture", "DEL SwitchCase", "DEL SimpleName: flushWriteQueue", "DEL Block", "DEL SwitchCase", "DEL SimpleName: error", "DEL StringLiteral: \"not implemented session state : \"", "DEL ThrowStatement", "DEL ExpressionStatement", "DEL SimpleType: IllegalStateException", "DEL SimpleName: IllegalStateException", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: boolean", "DEL SimpleName: state", "DEL SimpleType: Void", "DEL ExpressionStatement", "DEL BreakStatement", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL InfixExpression: +", "DEL SimpleName: state", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: immediately", "DEL TagElement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: Close the inner socket channel", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: channelClose", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL Modifier: abstract"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: chain", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleName: IoFilter", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: processException", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleType: RuntimeException", "DEL ExpressionStatement", "DEL SimpleName: getService", "DEL MethodInvocation", "DEL SimpleName: handler", "DEL SimpleName: handler", "DEL SimpleName: executor", "DEL ExpressionStatement", "DEL SimpleName: filter", "DEL IfStatement", "DEL SimpleName: execute", "DEL ClassInstanceCreation", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleType: OpenEvent", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: IoHandlerExecutor", "DEL SimpleType: IoFilter", "DEL SimpleName: LOG", "DEL VariableDeclarationStatement", "DEL SimpleName: executor", "DEL SimpleName: debug", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: getIoHandlerExecutor", "DEL PrimitiveType: void", "DEL TryStatement", "DEL SimpleName: sessionOpened", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL IfStatement", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleName: IoHandler", "DEL MethodInvocation", "DEL SimpleName: RuntimeException", "DEL MethodInvocation", "DEL SimpleName: IoHandlerExecutor", "DEL Block", "DEL CatchClause", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: getIoHandler", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @link", "DEL MethodInvocation", "DEL Modifier: final", "DEL Block", "DEL Block", "DEL SimpleName: filter", "DEL TextElement:  .", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: OpenEvent", "DEL SimpleType: IoHandler", "DEL SimpleName: e", "DEL SimpleName: processSessionCreated", "DEL Block", "DEL TextElement: process session open event using the filter chain. To be called by the session ", "DEL SimpleName: sessionOpened", "DEL ThisExpression", "DEL SimpleName: getService", "DEL SimpleName: e", "DEL StringLiteral: \"processing session open event\"", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: executor", "DEL EnhancedForStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: handler", "DEL Modifier: final", "DEL SimpleName: SelectorLoop"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: SelectorListener", "DEL IfStatement", "DEL SimpleName: ByteBuffer", "DEL SimpleName: highLevel", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: LOG", "DEL Javadoc", "DEL SimpleName: incrementWrittenBytes", "DEL SimpleName: writeRequest", "DEL MethodInvocation", "DEL SimpleName: getOriginalMessage", "DEL ExpressionStatement", "DEL SimpleName: getMessage", "DEL ExpressionStatement", "DEL StringLiteral: \"wrote {} bytes to {}\"", "DEL SimpleName: DefaultWriteFuture", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL PrefixExpression: !", "DEL SimpleType: DefaultWriteFuture", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: System", "DEL SimpleName: writeRequest", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: channelClose", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: e", "DEL Block", "DEL SimpleName: complete", "DEL Block", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleType: DefaultWriteFuture", "DEL SimpleName: channel", "DEL MethodInvocation", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: written", "DEL SimpleName: buf", "DEL SimpleName: selectorLoop", "DEL CastExpression", "DEL SimpleName: DefaultWriteFuture", "DEL StringLiteral: \"closing session {} have empty write queue, so we close it\"", "DEL SimpleName: LOG", "DEL SimpleName: poll", "DEL SimpleName: Object", "DEL Modifier: final", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL SimpleName: e", "DEL SimpleName: writeQueue", "DEL SimpleName: buf", "DEL DoStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: written", "DEL ThisExpression", "DEL SimpleName: setNotRegisteredForWrite", "DEL MethodInvocation", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"ready for write\"", "DEL TryStatement", "DEL SimpleName: isEmpty", "DEL SimpleName: processException", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: writeRequest", "DEL Modifier: final", "DEL SimpleName: isReadSuspended", "DEL SimpleName: currentTimeMillis", "DEL CastExpression", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: future", "DEL SimpleName: highLevel", "DEL PrimitiveType: int", "DEL SimpleName: debug", "DEL Modifier: final", "DEL SimpleName: peek", "DEL SimpleName: ByteBuffer", "DEL Block", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL SimpleType: DefaultWriteRequest", "DEL VariableDeclarationStatement", "DEL SimpleName: modifyRegistration", "DEL InfixExpression: >", "DEL Block", "DEL Block", "DEL StringLiteral: \"Exception while writing : \"", "DEL BreakStatement", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: writeRequest", "DEL SimpleName: writeQueue", "DEL NumberLiteral: 0", "DEL SimpleType: SocketChannel", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL InfixExpression: ==", "DEL SimpleName: SelectorLoop", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL SimpleName: SelectorListener", "DEL SimpleName: highLevel", "DEL SimpleName: buf", "DEL CatchClause", "DEL SimpleName: isClosing", "DEL NullLiteral", "DEL SimpleName: writeQueue", "DEL MethodInvocation", "DEL SimpleName: written", "DEL ThisExpression", "DEL SimpleName: remaining", "DEL CastExpression", "DEL Block", "DEL SimpleName: future", "DEL SimpleName: LOG", "DEL ParenthesizedExpression", "DEL SimpleType: WriteRequest", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: idleChecker", "DEL Block", "DEL BooleanLiteral: false", "DEL Modifier: final", "DEL SimpleName: sessionWritten", "DEL Block", "DEL Block", "DEL SynchronizedStatement", "DEL SimpleName: WriteRequest", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleName: writeQueue", "DEL ThisExpression", "DEL SimpleName: selectorLoop", "DEL ThisExpression", "DEL SimpleName: writeQueue", "DEL TextElement: Process a write operation. This will be executed only because the session has something to write into the", "DEL SimpleName: channel", "DEL InfixExpression: !=", "DEL SimpleType: ByteBuffer", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: processMessageSent", "DEL SimpleName: future", "DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL SimpleName: getFuture", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: SocketChannel", "DEL TextElement: channel.", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleType: SelectorLoop", "DEL VariableDeclarationStatement", "DEL SimpleName: write", "DEL SimpleName: DefaultWriteRequest", "DEL Block", "DEL SimpleName: written", "DEL SimpleName: error", "DEL StringLiteral: \"writable session : {}\"", "DEL Block", "DEL Block", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: processWrite", "DEL SimpleName: e", "DEL PrimitiveType: void", "DEL SimpleType: ByteBuffer", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: writeRequest", "DEL NullLiteral", "DEL PrefixExpression: !"]}]}}, {"AbstractIoSession_diff": {"operations": ["Move ImportDeclaration(63) into CompilationUnit(2101) at 33", "Update QualifiedName: org.apache.mina.transport.nio.SelectorListener(62) to org.apache.mina.transport.nio.SslHelper", "Update SimpleName: selectorLoop(366) to idleChecker", "Update TextElement:  the selector loop in charge of processing this session read/write events(367) to  the checker for idle session", "Delete QualifiedName: java.io.IOException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.nio.channels.SelectableChannel(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.nio.channels.SocketChannel(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Queue(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.concurrent.atomic.AtomicBoolean(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.apache.mina.util.AbstractIoFuture(66)", "Delete ImportDeclaration(67)", "Delete TextElement: the NIO channel for this session (106)", "Delete TagElement(107)", "Delete Javadoc(108)", "Delete Modifier: protected(109)", "Delete Modifier: final(110)", "Delete SimpleName: SelectableChannel(111)", "Delete SimpleType: SelectableChannel(112)", "Delete SimpleName: channel(113)", "Delete VariableDeclarationFragment(114)", "Delete FieldDeclaration(115)", "Delete TextElement: is this session registered for being polled for write ready events (288)", "Delete TagElement(289)", "Delete Javadoc(290)", "Delete Modifier: private(291)", "Delete Modifier: final(292)", "Delete SimpleName: AtomicBoolean(293)", "Delete SimpleType: AtomicBoolean(294)", "Delete SimpleName: registeredForWrite(295)", "Delete SimpleName: AtomicBoolean(296)", "Delete SimpleType: AtomicBoolean(297)", "Delete ClassInstanceCreation(298)", "Delete VariableDeclarationFragment(299)", "Delete FieldDeclaration(300)", "Delete TextElement: the queue of pending writes for the session, to be dequeued by the (301)", "Delete SimpleName: SelectorLoop(302)", "Delete TagElement: @link(303)", "Delete TextElement:  (304)", "Delete TagElement(305)", "Delete Javadoc(306)", "Delete Modifier: private(307)", "Delete Modifier: final(308)", "Delete SimpleName: Queue(309)", "Delete SimpleType: Queue(310)", "Delete SimpleName: WriteRequest(311)", "Delete SimpleType: WriteRequest(312)", "Delete ParameterizedType: Queue<WriteRequest>(313)", "Delete SimpleName: writeQueue(314)", "Delete SimpleName: DefaultWriteQueue(315)", "Delete SimpleType: DefaultWriteQueue(316)", "Delete ClassInstanceCreation(317)", "Delete VariableDeclarationFragment(318)", "Delete FieldDeclaration(319)", "Delete SimpleName: SelectableChannel(377)", "Delete SimpleType: SelectableChannel(378)", "Delete SimpleName: channel(379)", "Delete SingleVariableDeclaration(380)", "Delete ThisExpression(426)", "Delete SimpleName: channel(427)", "Delete FieldAccess(428)", "Delete SimpleName: channel(429)", "Delete Assignment: =(430)", "Delete ExpressionStatement(431)", "Delete TextElement: Writes the message immediately. If we can't write all the message, we will get back the number of written bytes.(1263)", "Delete TagElement(1264)", "Delete SimpleName: message(1265)", "Delete TextElement:  the message to write(1266)", "Delete TagElement: @param(1267)", "Delete TextElement:  the number of written bytes(1268)", "Delete TagElement: @return(1269)", "Delete Javadoc(1270)", "Delete Modifier: protected(1271)", "Delete Modifier: abstract(1272)", "Delete PrimitiveType: int(1273)", "Delete SimpleName: writeDirect(1274)", "Delete SimpleName: Object(1275)", "Delete SimpleType: Object(1276)", "Delete SimpleName: message(1277)", "Delete SingleVariableDeclaration(1278)", "Delete MethodDeclaration(1279)", "Delete TextElement: Copy the HeapBuffer into a DirectBuffer, if needed.(1280)", "Delete TagElement(1281)", "Delete SimpleName: writeRequest(1282)", "Delete TextElement:  The request containing the HeapBuffer(1283)", "Delete TagElement: @param(1284)", "Delete SimpleName: createNew(1285)", "Delete TextElement:  A flag to force the creation of a DirectBuffer(1286)", "Delete TagElement: @param(1287)", "Delete TextElement:  A DirectBuffer(1288)", "Delete TagElement: @return(1289)", "Delete Javadoc(1290)", "Delete Modifier: protected(1291)", "Delete Modifier: abstract(1292)", "Delete SimpleName: ByteBuffer(1293)", "Delete SimpleType: ByteBuffer(1294)", "Delete SimpleName: convertToDirectBuffer(1295)", "Delete SimpleName: WriteRequest(1296)", "Delete SimpleType: WriteRequest(1297)", "Delete SimpleName: writeRequest(1298)", "Delete SingleVariableDeclaration(1299)", "Delete PrimitiveType: boolean(1300)", "Delete SimpleName: createNew(1301)", "Delete SingleVariableDeclaration(1302)", "Delete MethodDeclaration(1303)", "Delete TagElement: @inheritDoc(1304)", "Delete TagElement(1305)", "Delete Javadoc(1306)", "Delete SimpleName: Override(1307)", "Delete MarkerAnnotation(1308)", "Delete Modifier: public(1309)", "Delete SimpleName: WriteRequest(1310)", "Delete SimpleType: WriteRequest(1311)", "Delete SimpleName: enqueueWriteRequest(1312)", "Delete SimpleName: WriteRequest(1313)", "Delete SimpleType: WriteRequest(1314)", "Delete SimpleName: writeRequest(1315)", "Delete SingleVariableDeclaration(1316)", "Delete SimpleName: isConnectedSecured(1317)", "Delete MethodInvocation(1318)", "Delete Modifier: final(1319)", "Delete SimpleName: SslHelper(1320)", "Delete SimpleType: SslHelper(1321)", "Delete SimpleName: sslHelper(1322)", "Delete SimpleName: getAttribute(1323)", "Delete SimpleName: SSL_HELPER(1324)", "Delete NullLiteral(1325)", "Delete MethodInvocation(1326)", "Delete VariableDeclarationFragment(1327)", "Delete VariableDeclarationStatement(1328)", "Delete SimpleName: sslHelper(1329)", "Delete NullLiteral(1330)", "Delete InfixExpression: ==(1331)", "Delete SimpleName: IllegalStateException(1332)", "Delete SimpleType: IllegalStateException(1333)", "Delete ClassInstanceCreation(1334)", "Delete ThrowStatement(1335)", "Delete Block(1336)", "Delete IfStatement(1337)", "Delete SimpleName: writeRequest(1338)", "Delete SimpleName: sslHelper(1339)", "Delete SimpleName: processWrite(1340)", "Delete ThisExpression(1341)", "Delete SimpleName: writeRequest(1342)", "Delete SimpleName: getMessage(1343)", "Delete MethodInvocation(1344)", "Delete SimpleName: writeQueue(1345)", "Delete MethodInvocation(1346)", "Delete Assignment: =(1347)", "Delete ExpressionStatement(1348)", "Delete Block(1349)", "Delete IfStatement(1350)", "Delete SimpleName: writeQueue(1351)", "Delete SimpleName: ByteBuffer(1352)", "Delete SimpleType: ByteBuffer(1353)", "Delete SimpleName: message(1354)", "Delete SimpleName: ByteBuffer(1355)", "Delete SimpleType: ByteBuffer(1356)", "Delete SimpleName: writeRequest(1357)", "Delete SimpleName: getMessage(1358)", "Delete MethodInvocation(1359)", "Delete CastExpression(1360)", "Delete VariableDeclarationFragment(1361)", "Delete VariableDeclarationStatement(1362)", "Delete SimpleName: writeQueue(1363)", "Delete SimpleName: isEmpty(1364)", "Delete MethodInvocation(1365)", "Delete SimpleName: message(1366)", "Delete SimpleName: convertToDirectBuffer(1367)", "Delete SimpleName: writeRequest(1368)", "Delete BooleanLiteral: false(1369)", "Delete MethodInvocation(1370)", "Delete Assignment: =(1371)", "Delete ExpressionStatement(1372)", "Delete PrimitiveType: int(1373)", "Delete SimpleName: written(1374)", "Delete SimpleName: writeDirect(1375)", "Delete SimpleName: writeRequest(1376)", "Delete SimpleName: getMessage(1377)", "Delete MethodInvocation(1378)", "Delete MethodInvocation(1379)", "Delete VariableDeclarationFragment(1380)", "Delete VariableDeclarationStatement(1381)", "Delete SimpleName: LOG(1382)", "Delete SimpleName: debug(1383)", "Delete StringLiteral: \"wrote {} bytes to {}\"(1384)", "Delete SimpleName: written(1385)", "Delete ThisExpression(1386)", "Delete MethodInvocation(1387)", "Delete ExpressionStatement(1388)", "Delete SimpleName: written(1389)", "Delete NumberLiteral: 0(1390)", "Delete InfixExpression: >(1391)", "Delete SimpleName: incrementWrittenBytes(1392)", "Delete SimpleName: written(1393)", "Delete MethodInvocation(1394)", "Delete ExpressionStatement(1395)", "Delete Block(1396)", "Delete IfStatement(1397)", "Delete SimpleName: idleChecker(1398)", "Delete SimpleName: sessionWritten(1399)", "Delete ThisExpression(1400)", "Delete SimpleName: System(1401)", "Delete SimpleName: currentTimeMillis(1402)", "Delete MethodInvocation(1403)", "Delete MethodInvocation(1404)", "Delete ExpressionStatement(1405)", "Delete PrimitiveType: int(1406)", "Delete SimpleName: remaining(1407)", "Delete SimpleName: message(1408)", "Delete SimpleName: remaining(1409)", "Delete MethodInvocation(1410)", "Delete VariableDeclarationFragment(1411)", "Delete VariableDeclarationStatement(1412)", "Delete SimpleName: written(1413)", "Delete NumberLiteral: 0(1414)", "Delete InfixExpression: <(1415)", "Delete ParenthesizedExpression(1416)", "Delete SimpleName: remaining(1417)", "Delete NumberLiteral: 0(1418)", "Delete InfixExpression: >(1419)", "Delete ParenthesizedExpression(1420)", "Delete InfixExpression: ||(1421)", "Delete SimpleName: convertToDirectBuffer(1422)", "Delete SimpleName: writeRequest(1423)", "Delete BooleanLiteral: true(1424)", "Delete MethodInvocation(1425)", "Delete ExpressionStatement(1426)", "Delete SimpleName: writeQueue(1427)", "Delete SimpleName: add(1428)", "Delete SimpleName: writeRequest(1429)", "Delete MethodInvocation(1430)", "Delete ExpressionStatement(1431)", "Delete SimpleName: registeredForWrite(1432)", "Delete SimpleName: getAndSet(1433)", "Delete BooleanLiteral: true(1434)", "Delete MethodInvocation(1435)", "Delete PrefixExpression: !(1436)", "Delete SimpleName: flushWriteQueue(1437)", "Delete MethodInvocation(1438)", "Delete ExpressionStatement(1439)", "Delete Block(1440)", "Delete IfStatement(1441)", "Delete Block(1442)", "Delete Modifier: final(1443)", "Delete SimpleName: DefaultWriteFuture(1444)", "Delete SimpleType: DefaultWriteFuture(1445)", "Delete SimpleName: future(1446)", "Delete SimpleName: DefaultWriteFuture(1447)", "Delete SimpleType: DefaultWriteFuture(1448)", "Delete SimpleName: writeRequest(1449)", "Delete SimpleName: getFuture(1450)", "Delete MethodInvocation(1451)", "Delete CastExpression(1452)", "Delete VariableDeclarationFragment(1453)", "Delete VariableDeclarationStatement(1454)", "Delete SimpleName: future(1455)", "Delete NullLiteral(1456)", "Delete InfixExpression: !=(1457)", "Delete SimpleName: future(1458)", "Delete SimpleName: complete(1459)", "Delete MethodInvocation(1460)", "Delete ExpressionStatement(1461)", "Delete Block(1462)", "Delete IfStatement(1463)", "Delete Modifier: final(1464)", "Delete SimpleName: Object(1465)", "Delete SimpleType: Object(1466)", "Delete SimpleName: highLevel(1467)", "Delete SimpleName: DefaultWriteRequest(1468)", "Delete SimpleType: DefaultWriteRequest(1469)", "Delete SimpleName: writeRequest(1470)", "Delete CastExpression(1471)", "Delete ParenthesizedExpression(1472)", "Delete SimpleName: getOriginalMessage(1473)", "Delete MethodInvocation(1474)", "Delete VariableDeclarationFragment(1475)", "Delete VariableDeclarationStatement(1476)", "Delete SimpleName: highLevel(1477)", "Delete NullLiteral(1478)", "Delete InfixExpression: !=(1479)", "Delete SimpleName: processMessageSent(1480)", "Delete SimpleName: highLevel(1481)", "Delete MethodInvocation(1482)", "Delete ExpressionStatement(1483)", "Delete Block(1484)", "Delete IfStatement(1485)", "Delete Block(1486)", "Delete IfStatement(1487)", "Delete Block(1488)", "Delete SimpleName: message(1489)", "Delete SimpleName: convertToDirectBuffer(1490)", "Delete SimpleName: writeRequest(1491)", "Delete BooleanLiteral: true(1492)", "Delete MethodInvocation(1493)", "Delete Assignment: =(1494)", "Delete ExpressionStatement(1495)", "Delete SimpleName: writeQueue(1496)", "Delete SimpleName: add(1497)", "Delete SimpleName: writeRequest(1498)", "Delete MethodInvocation(1499)", "Delete ExpressionStatement(1500)", "Delete Block(1501)", "Delete IfStatement(1502)", "Delete Block(1503)", "Delete SynchronizedStatement(1504)", "Delete SimpleName: writeRequest(1505)", "Delete ReturnStatement(1506)", "Delete Block(1507)", "Delete MethodDeclaration(1508)", "Delete Modifier: public(1509)", "Delete Modifier: abstract(1510)", "Delete PrimitiveType: void(1511)", "Delete SimpleName: flushWriteQueue(1512)", "Delete MethodDeclaration(1513)", "Delete Modifier: public(1514)", "Delete PrimitiveType: void(1515)", "Delete SimpleName: setNotRegisteredForWrite(1516)", "Delete SimpleName: registeredForWrite(1517)", "Delete SimpleName: set(1518)", "Delete BooleanLiteral: false(1519)", "Delete MethodInvocation(1520)", "Delete ExpressionStatement(1521)", "Delete Block(1522)", "Delete MethodDeclaration(1523)", "Delete Modifier: protected(1524)", "Delete PrimitiveType: boolean(1525)", "Delete SimpleName: isRegisteredForWrite(1526)", "Delete SimpleName: registeredForWrite(1527)", "Delete SimpleName: get(1528)", "Delete MethodInvocation(1529)", "Delete ReturnStatement(1530)", "Delete Block(1531)", "Delete MethodDeclaration(1532)", "Delete TagElement: @inheritDoc(1533)", "Delete TagElement(1534)", "Delete Javadoc(1535)", "Delete SimpleName: Override(1536)", "Delete MarkerAnnotation(1537)", "Delete Modifier: public(1538)", "Delete SimpleName: Queue(1539)", "Delete SimpleType: Queue(1540)", "Delete SimpleName: WriteRequest(1541)", "Delete SimpleType: WriteRequest(1542)", "Delete ParameterizedType: Queue<WriteRequest>(1543)", "Delete SimpleName: getWriteQueue(1544)", "Delete SimpleName: writeQueue(1545)", "Delete ReturnStatement(1546)", "Delete Block(1547)", "Delete MethodDeclaration(1548)", "Delete TextElement: we pre-allocate a close future for lock-less (1549)", "Delete SimpleName: close(1550)", "Delete PrimitiveType: boolean(1551)", "Delete MethodRefParameter(1552)", "Delete MethodRef(1553)", "Delete TagElement: @link(1554)", "Delete TextElement:  (1555)", "Delete TagElement(1556)", "Delete Javadoc(1557)", "Delete Modifier: private(1558)", "Delete Modifier: final(1559)", "Delete SimpleName: IoFuture(1560)", "Delete SimpleType: IoFuture(1561)", "Delete SimpleName: Void(1562)", "Delete SimpleType: Void(1563)", "Delete ParameterizedType: IoFuture<Void>(1564)", "Delete SimpleName: closeFuture(1565)", "Delete SimpleName: AbstractIoFuture(1566)", "Delete SimpleType: AbstractIoFuture(1567)", "Delete SimpleName: Void(1568)", "Delete SimpleType: Void(1569)", "Delete ParameterizedType: AbstractIoFuture<Void>(1570)", "Delete TagElement: @inheritDoc(1571)", "Delete TagElement(1572)", "Delete Javadoc(1573)", "Delete SimpleName: Override(1574)", "Delete MarkerAnnotation(1575)", "Delete Modifier: protected(1576)", "Delete PrimitiveType: boolean(1577)", "Delete SimpleName: cancelOwner(1578)", "Delete Modifier: final(1579)", "Delete PrimitiveType: boolean(1580)", "Delete SimpleName: mayInterruptIfRunning(1581)", "Delete SingleVariableDeclaration(1582)", "Delete BooleanLiteral: false(1583)", "Delete ReturnStatement(1584)", "Delete Block(1585)", "Delete MethodDeclaration(1586)", "Delete AnonymousClassDeclaration(1587)", "Delete ClassInstanceCreation(1588)", "Delete VariableDeclarationFragment(1589)", "Delete FieldDeclaration(1590)", "Delete TagElement: @inheritDoc(1591)", "Delete TagElement(1592)", "Delete Javadoc(1593)", "Delete SimpleName: Override(1594)", "Delete MarkerAnnotation(1595)", "Delete Modifier: public(1596)", "Delete SimpleName: IoFuture(1597)", "Delete SimpleType: IoFuture(1598)", "Delete SimpleName: Void(1599)", "Delete SimpleType: Void(1600)", "Delete ParameterizedType: IoFuture<Void>(1601)", "Delete SimpleName: close(1602)", "Delete Modifier: final(1603)", "Delete PrimitiveType: boolean(1604)", "Delete SimpleName: immediately(1605)", "Delete SingleVariableDeclaration(1606)", "Delete SimpleName: state(1607)", "Delete SimpleName: CREATED(1608)", "Delete SwitchCase(1609)", "Delete SimpleName: LOG(1610)", "Delete SimpleName: error(1611)", "Delete StringLiteral: \"Session {} not opened\"(1612)", "Delete ThisExpression(1613)", "Delete MethodInvocation(1614)", "Delete ExpressionStatement(1615)", "Delete SimpleName: IllegalStateException(1616)", "Delete SimpleType: IllegalStateException(1617)", "Delete StringLiteral: \"cannot close an not opened session\"(1618)", "Delete ClassInstanceCreation(1619)", "Delete ThrowStatement(1620)", "Delete SimpleName: CONNECTED(1621)", "Delete SwitchCase(1622)", "Delete SimpleName: state(1623)", "Delete QualifiedName: SessionState.CLOSING(1624)", "Delete Assignment: =(1625)", "Delete ExpressionStatement(1626)", "Delete SimpleName: immediately(1627)", "Delete SimpleName: channelClose(1628)", "Delete MethodInvocation(1629)", "Delete ExpressionStatement(1630)", "Delete SimpleName: processSessionClosed(1631)", "Delete MethodInvocation(1632)", "Delete ExpressionStatement(1633)", "Delete Block(1634)", "Delete SimpleName: flushWriteQueue(1635)", "Delete MethodInvocation(1636)", "Delete ExpressionStatement(1637)", "Delete Block(1638)", "Delete IfStatement(1639)", "Delete BreakStatement(1640)", "Delete SimpleName: CLOSING(1641)", "Delete SwitchCase(1642)", "Delete SimpleName: LOG(1643)", "Delete SimpleName: warn(1644)", "Delete StringLiteral: \"Already closing session {}\"(1645)", "Delete ThisExpression(1646)", "Delete MethodInvocation(1647)", "Delete ExpressionStatement(1648)", "Delete BreakStatement(1649)", "Delete SimpleName: CLOSED(1650)", "Delete SwitchCase(1651)", "Delete SimpleName: LOG(1652)", "Delete SimpleName: warn(1653)", "Delete StringLiteral: \"Already closed session {}\"(1654)", "Delete ThisExpression(1655)", "Delete MethodInvocation(1656)", "Delete ExpressionStatement(1657)", "Delete BreakStatement(1658)", "Delete SwitchCase(1659)", "Delete SimpleName: IllegalStateException(1660)", "Delete SimpleType: IllegalStateException(1661)", "Delete StringLiteral: \"not implemented session state : \"(1662)", "Delete SimpleName: state(1663)", "Delete InfixExpression: +(1664)", "Delete ClassInstanceCreation(1665)", "Delete ThrowStatement(1666)", "Delete SwitchStatement(1667)", "Delete SimpleName: closeFuture(1668)", "Delete ReturnStatement(1669)", "Delete Block(1670)", "Delete MethodDeclaration(1671)", "Delete TextElement: Close the inner socket channel(1672)", "Delete TagElement(1673)", "Delete Javadoc(1674)", "Delete Modifier: protected(1675)", "Delete Modifier: abstract(1676)", "Delete PrimitiveType: void(1677)", "Delete SimpleName: channelClose(1678)", "Delete MethodDeclaration(1679)", "Delete TextElement: process session open event using the filter chain. To be called by the session (1808)", "Delete SimpleName: SelectorLoop(1809)", "Delete TagElement: @link(1810)", "Delete TextElement:  .(1811)", "Delete TagElement(1812)", "Delete Javadoc(1813)", "Delete Modifier: public(1814)", "Delete PrimitiveType: void(1815)", "Delete SimpleName: processSessionCreated(1816)", "Delete SimpleName: LOG(1817)", "Delete SimpleName: debug(1818)", "Delete StringLiteral: \"processing session open event\"(1819)", "Delete MethodInvocation(1820)", "Delete ExpressionStatement(1821)", "Delete Modifier: final(1822)", "Delete SimpleName: IoFilter(1823)", "Delete SimpleType: IoFilter(1824)", "Delete SimpleName: filter(1825)", "Delete SingleVariableDeclaration(1826)", "Delete SimpleName: chain(1827)", "Delete SimpleName: filter(1828)", "Delete SimpleName: sessionOpened(1829)", "Delete ThisExpression(1830)", "Delete MethodInvocation(1831)", "Delete ExpressionStatement(1832)", "Delete Block(1833)", "Delete EnhancedForStatement(1834)", "Delete Modifier: final(1835)", "Delete SimpleName: IoHandler(1836)", "Delete SimpleType: IoHandler(1837)", "Delete SimpleName: handler(1838)", "Delete SimpleName: getService(1839)", "Delete MethodInvocation(1840)", "Delete SimpleName: getIoHandler(1841)", "Delete MethodInvocation(1842)", "Delete VariableDeclarationFragment(1843)", "Delete VariableDeclarationStatement(1844)", "Delete SimpleName: handler(1845)", "Delete NullLiteral(1846)", "Delete InfixExpression: !=(1847)", "Delete SimpleName: IoHandlerExecutor(1848)", "Delete SimpleType: IoHandlerExecutor(1849)", "Delete SimpleName: executor(1850)", "Delete SimpleName: getService(1851)", "Delete MethodInvocation(1852)", "Delete SimpleName: getIoHandlerExecutor(1853)", "Delete MethodInvocation(1854)", "Delete VariableDeclarationFragment(1855)", "Delete VariableDeclarationStatement(1856)", "Delete SimpleName: executor(1857)", "Delete NullLiteral(1858)", "Delete InfixExpression: !=(1859)", "Delete SimpleName: executor(1860)", "Delete SimpleName: execute(1861)", "Delete SimpleName: OpenEvent(1862)", "Delete SimpleType: OpenEvent(1863)", "Delete ThisExpression(1864)", "Delete ClassInstanceCreation(1865)", "Delete MethodInvocation(1866)", "Delete ExpressionStatement(1867)", "Delete Block(1868)", "Delete SimpleName: handler(1869)", "Delete SimpleName: sessionOpened(1870)", "Delete ThisExpression(1871)", "Delete MethodInvocation(1872)", "Delete ExpressionStatement(1873)", "Delete Block(1874)", "Delete IfStatement(1875)", "Delete Block(1876)", "Delete IfStatement(1877)", "Delete Block(1878)", "Delete Modifier: final(1879)", "Delete SimpleName: RuntimeException(1880)", "Delete SimpleType: RuntimeException(1881)", "Delete SimpleName: e(1882)", "Delete SingleVariableDeclaration(1883)", "Delete SimpleName: processException(1884)", "Delete SimpleName: e(1885)", "Delete MethodInvocation(1886)", "Delete ExpressionStatement(1887)", "Delete Block(1888)", "Delete CatchClause(1889)", "Delete TryStatement(1890)", "Delete Block(1891)", "Delete MethodDeclaration(1892)", "Delete TextElement: Process a write operation. This will be executed only because the session has something to write into the(2666)", "Delete TextElement: channel.(2667)", "Delete TagElement(2668)", "Delete Javadoc(2669)", "Delete Modifier: public(2670)", "Delete PrimitiveType: void(2671)", "Delete SimpleName: processWrite(2672)", "Delete SimpleName: SelectorLoop(2673)", "Delete SimpleType: SelectorLoop(2674)", "Delete SimpleName: selectorLoop(2675)", "Delete SingleVariableDeclaration(2676)", "Delete SimpleName: LOG(2677)", "Delete SimpleName: debug(2678)", "Delete StringLiteral: \"ready for write\"(2679)", "Delete MethodInvocation(2680)", "Delete ExpressionStatement(2681)", "Delete SimpleName: LOG(2682)", "Delete SimpleName: debug(2683)", "Delete StringLiteral: \"writable session : {}\"(2684)", "Delete ThisExpression(2685)", "Delete MethodInvocation(2686)", "Delete ExpressionStatement(2687)", "Delete Modifier: final(2688)", "Delete SimpleName: WriteRequest(2689)", "Delete SimpleType: WriteRequest(2690)", "Delete SimpleName: writeRequest(2691)", "Delete SimpleName: writeQueue(2692)", "Delete SimpleName: peek(2693)", "Delete MethodInvocation(2694)", "Delete VariableDeclarationFragment(2695)", "Delete VariableDeclarationStatement(2696)", "Delete SimpleName: writeRequest(2697)", "Delete NullLiteral(2698)", "Delete InfixExpression: ==(2699)", "Delete BreakStatement(2700)", "Delete Block(2701)", "Delete IfStatement(2702)", "Delete Modifier: final(2703)", "Delete SimpleName: ByteBuffer(2704)", "Delete SimpleType: ByteBuffer(2705)", "Delete SimpleName: buf(2706)", "Delete SimpleName: ByteBuffer(2707)", "Delete SimpleType: ByteBuffer(2708)", "Delete SimpleName: writeRequest(2709)", "Delete SimpleName: getMessage(2710)", "Delete MethodInvocation(2711)", "Delete CastExpression(2712)", "Delete VariableDeclarationFragment(2713)", "Delete VariableDeclarationStatement(2714)", "Delete Modifier: final(2715)", "Delete PrimitiveType: int(2716)", "Delete SimpleName: written(2717)", "Delete SimpleName: SocketChannel(2718)", "Delete SimpleType: SocketChannel(2719)", "Delete SimpleName: channel(2720)", "Delete CastExpression(2721)", "Delete ParenthesizedExpression(2722)", "Delete SimpleName: write(2723)", "Delete SimpleName: buf(2724)", "Delete MethodInvocation(2725)", "Delete VariableDeclarationFragment(2726)", "Delete VariableDeclarationStatement(2727)", "Delete SimpleName: LOG(2728)", "Delete SimpleName: debug(2729)", "Delete StringLiteral: \"wrote {} bytes to {}\"(2730)", "Delete SimpleName: written(2731)", "Delete ThisExpression(2732)", "Delete MethodInvocation(2733)", "Delete ExpressionStatement(2734)", "Delete SimpleName: written(2735)", "Delete NumberLiteral: 0(2736)", "Delete InfixExpression: >(2737)", "Delete SimpleName: incrementWrittenBytes(2738)", "Delete SimpleName: written(2739)", "Delete MethodInvocation(2740)", "Delete ExpressionStatement(2741)", "Delete Block(2742)", "Delete IfStatement(2743)", "Delete SimpleName: idleChecker(2744)", "Delete SimpleName: sessionWritten(2745)", "Delete ThisExpression(2746)", "Delete SimpleName: System(2747)", "Delete SimpleName: currentTimeMillis(2748)", "Delete MethodInvocation(2749)", "Delete MethodInvocation(2750)", "Delete ExpressionStatement(2751)", "Delete SimpleName: buf(2752)", "Delete SimpleName: remaining(2753)", "Delete MethodInvocation(2754)", "Delete NumberLiteral: 0(2755)", "Delete InfixExpression: ==(2756)", "Delete SimpleName: writeQueue(2757)", "Delete SimpleName: poll(2758)", "Delete MethodInvocation(2759)", "Delete ExpressionStatement(2760)", "Delete Modifier: final(2761)", "Delete SimpleName: DefaultWriteFuture(2762)", "Delete SimpleType: DefaultWriteFuture(2763)", "Delete SimpleName: future(2764)", "Delete SimpleName: DefaultWriteFuture(2765)", "Delete SimpleType: DefaultWriteFuture(2766)", "Delete SimpleName: writeRequest(2767)", "Delete SimpleName: getFuture(2768)", "Delete MethodInvocation(2769)", "Delete CastExpression(2770)", "Delete VariableDeclarationFragment(2771)", "Delete VariableDeclarationStatement(2772)", "Delete SimpleName: future(2773)", "Delete NullLiteral(2774)", "Delete InfixExpression: !=(2775)", "Delete SimpleName: future(2776)", "Delete SimpleName: complete(2777)", "Delete MethodInvocation(2778)", "Delete ExpressionStatement(2779)", "Delete Block(2780)", "Delete IfStatement(2781)", "Delete Modifier: final(2782)", "Delete SimpleName: Object(2783)", "Delete SimpleType: Object(2784)", "Delete SimpleName: highLevel(2785)", "Delete SimpleName: DefaultWriteRequest(2786)", "Delete SimpleType: DefaultWriteRequest(2787)", "Delete SimpleName: writeRequest(2788)", "Delete CastExpression(2789)", "Delete ParenthesizedExpression(2790)", "Delete SimpleName: getOriginalMessage(2791)", "Delete MethodInvocation(2792)", "Delete VariableDeclarationFragment(2793)", "Delete VariableDeclarationStatement(2794)", "Delete SimpleName: highLevel(2795)", "Delete NullLiteral(2796)", "Delete InfixExpression: !=(2797)", "Delete SimpleName: processMessageSent(2798)", "Delete SimpleName: highLevel(2799)", "Delete MethodInvocation(2800)", "Delete ExpressionStatement(2801)", "Delete Block(2802)", "Delete IfStatement(2803)", "Delete Block(2804)", "Delete BreakStatement(2805)", "Delete Block(2806)", "Delete IfStatement(2807)", "Delete Block(2808)", "Delete SimpleName: writeQueue(2809)", "Delete SimpleName: isEmpty(2810)", "Delete MethodInvocation(2811)", "Delete PrefixExpression: !(2812)", "Delete DoStatement(2813)", "Delete SimpleName: writeQueue(2814)", "Delete SimpleName: writeQueue(2815)", "Delete SimpleName: isEmpty(2816)", "Delete MethodInvocation(2817)", "Delete SimpleName: isClosing(2818)", "Delete MethodInvocation(2819)", "Delete SimpleName: LOG(2820)", "Delete SimpleName: debug(2821)", "Delete StringLiteral: \"closing session {} have empty write queue, so we close it\"(2822)", "Delete ThisExpression(2823)", "Delete MethodInvocation(2824)", "Delete ExpressionStatement(2825)", "Delete SimpleName: channelClose(2826)", "Delete MethodInvocation(2827)", "Delete ExpressionStatement(2828)", "Delete Block(2829)", "Delete SimpleName: selectorLoop(2830)", "Delete SimpleName: modifyRegistration(2831)", "Delete BooleanLiteral: false(2832)", "Delete SimpleName: isReadSuspended(2833)", "Delete MethodInvocation(2834)", "Delete PrefixExpression: !(2835)", "Delete BooleanLiteral: false(2836)", "Delete SimpleName: SelectorListener(2837)", "Delete SimpleType: SelectorListener(2838)", "Delete ThisExpression(2839)", "Delete CastExpression(2840)", "Delete SimpleName: channel(2841)", "Delete BooleanLiteral: false(2842)", "Delete MethodInvocation(2843)", "Delete ExpressionStatement(2844)", "Delete SimpleName: setNotRegisteredForWrite(2845)", "Delete MethodInvocation(2846)", "Delete ExpressionStatement(2847)", "Delete Block(2848)", "Delete IfStatement(2849)", "Delete Block(2850)", "Delete Block(2851)", "Delete IfStatement(2852)", "Delete Block(2853)", "Delete SynchronizedStatement(2854)", "Delete Block(2855)", "Delete Modifier: final(2856)", "Delete SimpleName: IOException(2857)", "Delete SimpleType: IOException(2858)", "Delete SimpleName: e(2859)", "Delete SingleVariableDeclaration(2860)", "Delete SimpleName: LOG(2861)", "Delete SimpleName: error(2862)", "Delete StringLiteral: \"Exception while writing : \"(2863)", "Delete SimpleName: e(2864)", "Delete MethodInvocation(2865)", "Delete ExpressionStatement(2866)", "Delete SimpleName: processException(2867)", "Delete SimpleName: e(2868)", "Delete MethodInvocation(2869)", "Delete ExpressionStatement(2870)", "Delete Block(2871)", "Delete CatchClause(2872)", "Delete TryStatement(2873)", "Delete Block(2874)", "Delete MethodDeclaration(2875)"]}}, {"CoapDecoder_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.mina.util.ByteBufferDumper"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL SimpleName: LOG", "DEL StringLiteral: \"decode\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: LOG", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL StringLiteral: \"nothing to decode\"", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: version", "DEL SimpleName: LOG", "DEL SimpleName: debug", "DEL StringLiteral: \"version : {}\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: type", "DEL StringLiteral: \"type : {}\"", "DEL SimpleName: LOG", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: LOG", "DEL MethodInvocation", "DEL StringLiteral: \"code : {}\"", "DEL SimpleName: debug", "DEL SimpleName: code", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: LOG", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: id", "DEL StringLiteral: \"id : {}\""]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"token : {}\"", "DEL IfStatement", "DEL SimpleName: isDebugEnabled", "DEL SimpleName: ByteBufferDumper", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: wrap", "DEL SimpleName: toHex", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL Block", "DEL SimpleName: ByteBuffer", "DEL SimpleName: token", "DEL SimpleName: LOG"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \"start of payload\"", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: LOG"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: wrap", "DEL StringLiteral: \"payload : {}\"", "DEL MethodInvocation", "DEL SimpleName: dump", "DEL SimpleName: ByteBuffer", "DEL SimpleName: debug", "DEL SimpleName: isDebugEnabled", "DEL ExpressionStatement", "DEL SimpleName: ByteBufferDumper", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL SimpleName: payload"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \"optionCode : {}\"", "DEL SimpleName: optionCode", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL SimpleName: LOG"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: optionLength", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL StringLiteral: \"optionLength : {}\"", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: debug", "DEL StringLiteral: \"option type : {}\"", "DEL SimpleName: LOG", "DEL SimpleName: optType", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"quartet value : {}\"", "DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL SimpleName: value"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: LOG", "DEL IfStatement", "DEL SimpleName: LOG", "DEL SimpleName: isDebugEnabled", "DEL Block", "DEL SimpleName: val", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL StringLiteral: \"byte : {}\""]}]}}, {"CoapDecoder_diff": {"operations": ["Move VariableDeclarationStatement(503) into Block(411) at 0", "Delete QualifiedName: org.apache.mina.util.ByteBufferDumper(20)", "Delete ImportDeclaration(21)", "Delete SimpleName: LOG(121)", "Delete SimpleName: debug(122)", "Delete StringLiteral: \"decode\"(123)", "Delete MethodInvocation(124)", "Delete ExpressionStatement(125)", "Delete SimpleName: LOG(131)", "Delete SimpleName: debug(132)", "Delete StringLiteral: \"nothing to decode\"(133)", "Delete MethodInvocation(134)", "Delete ExpressionStatement(135)", "Delete SimpleName: LOG(159)", "Delete SimpleName: debug(160)", "Delete StringLiteral: \"version : {}\"(161)", "Delete SimpleName: version(162)", "Delete MethodInvocation(163)", "Delete ExpressionStatement(164)", "Delete SimpleName: LOG(179)", "Delete SimpleName: debug(180)", "Delete StringLiteral: \"type : {}\"(181)", "Delete SimpleName: type(182)", "Delete MethodInvocation(183)", "Delete ExpressionStatement(184)", "Delete SimpleName: LOG(207)", "Delete SimpleName: debug(208)", "Delete StringLiteral: \"code : {}\"(209)", "Delete SimpleName: code(210)", "Delete MethodInvocation(211)", "Delete ExpressionStatement(212)", "Delete SimpleName: LOG(222)", "Delete SimpleName: debug(223)", "Delete StringLiteral: \"id : {}\"(224)", "Delete SimpleName: id(225)", "Delete MethodInvocation(226)", "Delete ExpressionStatement(227)", "Delete SimpleName: LOG(233)", "Delete SimpleName: isDebugEnabled(234)", "Delete MethodInvocation(235)", "Delete SimpleName: LOG(236)", "Delete SimpleName: debug(237)", "Delete StringLiteral: \"token : {}\"(238)", "Delete SimpleName: ByteBufferDumper(239)", "Delete SimpleName: toHex(240)", "Delete SimpleName: ByteBuffer(241)", "Delete SimpleName: wrap(242)", "Delete SimpleName: token(243)", "Delete MethodInvocation(244)", "Delete MethodInvocation(245)", "Delete MethodInvocation(246)", "Delete ExpressionStatement(247)", "Delete Block(248)", "Delete IfStatement(249)", "Delete SimpleName: LOG(291)", "Delete SimpleName: debug(292)", "Delete StringLiteral: \"start of payload\"(293)", "Delete MethodInvocation(294)", "Delete ExpressionStatement(295)", "Delete SimpleName: LOG(311)", "Delete SimpleName: isDebugEnabled(312)", "Delete MethodInvocation(313)", "Delete SimpleName: LOG(314)", "Delete SimpleName: debug(315)", "Delete StringLiteral: \"payload : {}\"(316)", "Delete SimpleName: ByteBufferDumper(317)", "Delete SimpleName: dump(318)", "Delete SimpleName: ByteBuffer(319)", "Delete SimpleName: wrap(320)", "Delete SimpleName: payload(321)", "Delete MethodInvocation(322)", "Delete MethodInvocation(323)", "Delete MethodInvocation(324)", "Delete ExpressionStatement(325)", "Delete Block(326)", "Delete IfStatement(327)", "Delete SimpleName: LOG(347)", "Delete SimpleName: debug(348)", "Delete StringLiteral: \"optionCode : {}\"(349)", "Delete SimpleName: optionCode(350)", "Delete MethodInvocation(351)", "Delete ExpressionStatement(352)", "Delete SimpleName: LOG(368)", "Delete SimpleName: debug(369)", "Delete StringLiteral: \"optionLength : {}\"(370)", "Delete SimpleName: optionLength(371)", "Delete MethodInvocation(372)", "Delete ExpressionStatement(373)", "Delete SimpleName: LOG(383)", "Delete SimpleName: debug(384)", "Delete StringLiteral: \"option type : {}\"(385)", "Delete SimpleName: optType(386)", "Delete MethodInvocation(387)", "Delete ExpressionStatement(388)", "Delete SimpleName: LOG(474)", "Delete SimpleName: debug(475)", "Delete StringLiteral: \"quartet value : {}\"(476)", "Delete SimpleName: value(477)", "Delete MethodInvocation(478)", "Delete ExpressionStatement(479)", "Delete SimpleName: LOG(489)", "Delete SimpleName: isDebugEnabled(490)", "Delete MethodInvocation(491)", "Delete SimpleName: LOG(504)", "Delete SimpleName: debug(505)", "Delete StringLiteral: \"byte : {}\"(506)", "Delete SimpleName: val(507)", "Delete MethodInvocation(508)", "Delete ExpressionStatement(509)", "Delete Block(510)", "Delete IfStatement(511)"]}}, {"CoapEncoder_cluster": {"actions": [{"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: LOG", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: message", "DEL StringLiteral: \"encoding {}\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: size", "DEL StringLiteral: \"computed size : {}\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: opt", "DEL StringLiteral: \"encode option {}\"", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL SimpleName: debug"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: optionQuartet", "DEL SimpleName: LOG", "DEL ExpressionStatement", "DEL StringLiteral: \"optionQuartet : {}\"", "DEL MethodInvocation", "DEL SimpleName: debug"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL StringLiteral: \"option length : {}\"", "DEL SimpleName: optionLength", "DEL SimpleName: LOG"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL StringLiteral: \"length byte : \"", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL SimpleName: optionLength", "DEL NumberLiteral: 13", "DEL InfixExpression: -", "DEL ParenthesizedExpression"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: isDebugEnabled"]}]}}, {"CoapEncoder_diff": {"operations": ["Move Block(440) into IfStatement(423) at 1", "Move ExpressionStatement(451) into Block(407) at 0", "Delete SimpleName: LOG(88)", "Delete SimpleName: debug(89)", "Delete StringLiteral: \"encoding {}\"(90)", "Delete SimpleName: message(91)", "Delete MethodInvocation(92)", "Delete ExpressionStatement(93)", "Delete SimpleName: LOG(236)", "Delete SimpleName: debug(237)", "Delete StringLiteral: \"computed size : {}\"(238)", "Delete SimpleName: size(239)", "Delete MethodInvocation(240)", "Delete ExpressionStatement(241)", "Delete SimpleName: LOG(329)", "Delete SimpleName: debug(330)", "Delete StringLiteral: \"encode option {}\"(331)", "Delete SimpleName: opt(332)", "Delete MethodInvocation(333)", "Delete ExpressionStatement(334)", "Delete SimpleName: LOG(369)", "Delete SimpleName: debug(370)", "Delete StringLiteral: \"optionQuartet : {}\"(371)", "Delete SimpleName: optionQuartet(372)", "Delete MethodInvocation(373)", "Delete ExpressionStatement(374)", "Delete SimpleName: LOG(418)", "Delete SimpleName: debug(419)", "Delete StringLiteral: \"option length : {}\"(420)", "Delete SimpleName: optionLength(421)", "Delete MethodInvocation(422)", "Delete ExpressionStatement(423)", "Delete SimpleName: LOG(430)", "Delete SimpleName: debug(431)", "Delete StringLiteral: \"length byte : \"(432)", "Delete SimpleName: optionLength(433)", "Delete NumberLiteral: 13(434)", "Delete InfixExpression: -(435)", "Delete ParenthesizedExpression(436)", "Delete InfixExpression: +(437)", "Delete MethodInvocation(438)", "Delete ExpressionStatement(439)", "Delete SimpleName: LOG(427)", "Delete SimpleName: isDebugEnabled(428)", "Delete MethodInvocation(429)", "Delete IfStatement(441)", "Delete Block(452)"]}}, {"ConnectFuture_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.mina.transport.nio", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.mina.api.IoSession", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.mina.util.AbstractIoFuture", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ExpressionStatement", "DEL SimpleName: session", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: e", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: IoSession", "DEL PrimitiveType: void", "DEL SimpleName: setResult", "DEL Block", "DEL TextElement: connection error", "DEL Block", "DEL SimpleName: IoSession", "DEL SimpleName: IoSession", "DEL PrimitiveType: void", "DEL SimpleName: cancelOwner", "DEL SimpleName: AbstractIoFuture", "DEL SimpleName: Exception", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: mayInterruptIfRunning", "DEL SimpleType: IoSession", "DEL TagElement", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: e", "DEL SimpleName: ConnectFuture", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: false", "DEL PrimitiveType: boolean", "DEL SimpleName: setException", "DEL TypeDeclaration: class", "DEL Javadoc", "DEL Modifier: protected", "DEL SimpleName: complete", "DEL ParameterizedType: AbstractIoFuture<IoSession>", "DEL SimpleType: AbstractIoFuture", "DEL MethodDeclaration", "DEL SimpleType: Exception", "DEL Modifier: public", "DEL SimpleName: error", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement: session connected", "DEL SimpleName: session"]}]}}, {"ConnectFuture_diff": {"operations": ["Delete QualifiedName: org.apache.mina.transport.nio(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.mina.api.IoSession(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.mina.util.AbstractIoFuture(4)", "Delete ImportDeclaration(5)", "Delete Modifier: public(6)", "Delete SimpleName: ConnectFuture(7)", "Delete SimpleName: AbstractIoFuture(8)", "Delete SimpleType: AbstractIoFuture(9)", "Delete SimpleName: IoSession(10)", "Delete SimpleType: IoSession(11)", "Delete ParameterizedType: AbstractIoFuture<IoSession>(12)", "Delete SimpleName: Override(13)", "Delete MarkerAnnotation(14)", "Delete Modifier: protected(15)", "Delete PrimitiveType: boolean(16)", "Delete SimpleName: cancelOwner(17)", "Delete PrimitiveType: boolean(18)", "Delete SimpleName: mayInterruptIfRunning(19)", "Delete SingleVariableDeclaration(20)", "Delete BooleanLiteral: false(21)", "Delete ReturnStatement(22)", "Delete Block(23)", "Delete MethodDeclaration(24)", "Delete TextElement: session connected(25)", "Delete TagElement(26)", "Delete Javadoc(27)", "Delete Modifier: public(28)", "Delete PrimitiveType: void(29)", "Delete SimpleName: complete(30)", "Delete SimpleName: IoSession(31)", "Delete SimpleType: IoSession(32)", "Delete SimpleName: session(33)", "Delete SingleVariableDeclaration(34)", "Delete SimpleName: setResult(35)", "Delete SimpleName: session(36)", "Delete MethodInvocation(37)", "Delete ExpressionStatement(38)", "Delete Block(39)", "Delete MethodDeclaration(40)", "Delete TextElement: connection error(41)", "Delete TagElement(42)", "Delete Javadoc(43)", "Delete Modifier: public(44)", "Delete PrimitiveType: void(45)", "Delete SimpleName: error(46)", "Delete SimpleName: Exception(47)", "Delete SimpleType: Exception(48)", "Delete SimpleName: e(49)", "Delete SingleVariableDeclaration(50)", "Delete SimpleName: setException(51)", "Delete SimpleName: e(52)", "Delete MethodInvocation(53)", "Delete ExpressionStatement(54)", "Delete Block(55)", "Delete MethodDeclaration(56)", "Delete TypeDeclaration: class(57)"]}}, {"RegistrationCallback_cluster": {"actions": [{"root": "INS Javadoc to TypeDeclaration: interface at 0", "operations": ["INS TagElement: @author to Javadoc at 1", "INS TextElement:  for being informed when the  to TagElement at 2", "INS SimpleName: NioSelectorLoop to TagElement: @link at 0", "INS SimpleName: SelectionKey to TagElement: @link at 0", "INS TextElement:  <a href=\"http://mina.apache.org\">Apache MINA Project</a> to TagElement: @author at 0", "INS TagElement: @link to TagElement at 3", "INS TextElement: To be used with  to TagElement at 0", "INS TagElement: @link to TagElement at 1", "INS Javadoc to TypeDeclaration: interface at 0", "INS TagElement to Javadoc at 0", "INS TextElement:  was created and registered. to TagElement at 4"]}]}}, {"RegistrationCallback_diff": {"operations": ["Insert Javadoc(14) into TypeDeclaration: interface(24) at 0", "Insert TagElement(11) into Javadoc(14) at 0", "Insert TagElement: @author(13) into Javadoc(14) at 1", "Insert TextElement: To be used with (4) into TagElement(11) at 0", "Insert TagElement: @link(6) into TagElement(11) at 1", "Insert TextElement:  for being informed when the (7) into TagElement(11) at 2", "Insert TagElement: @link(9) into TagElement(11) at 3", "Insert TextElement:  was created and registered.(10) into TagElement(11) at 4", "Insert TextElement:  <a href=\"http://mina.apache.org\">Apache MINA Project</a>(12) into TagElement: @author(13) at 0", "Insert SimpleName: NioSelectorLoop(5) into TagElement: @link(6) at 0", "Insert SimpleName: SelectionKey(8) into TagElement: @link(9) at 0"]}}, {"VmPipeAddress_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.mina.transport.vmpipe", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.net.SocketAddress", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL SimpleName: port", "DEL SimpleName: getPort", "DEL PrimitiveType: int", "DEL SimpleName: Override", "DEL SimpleName: o", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Block", "DEL SimpleName: port", "DEL Modifier: public", "DEL InfixExpression: +", "DEL InfixExpression: +", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleType: VmPipeAddress", "DEL Block", "DEL ReturnStatement", "DEL TagElement: @author", "DEL SimpleType: Object", "DEL SimpleName: Comparable", "DEL SimpleName: port", "DEL SimpleName: serialVersionUID", "DEL SimpleName: o", "DEL PrimitiveType: int", "DEL BooleanLiteral: false", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL StringLiteral: \"vm:server:\"", "DEL ThisExpression", "DEL Modifier: static", "DEL SimpleName: equals", "DEL MethodDeclaration", "DEL TextElement:  <a href=\"http://mina.apache.org\">Apache MINA Project</a>", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Block", "DEL InfixExpression: ==", "DEL Block", "DEL FieldDeclaration", "DEL SimpleType: Comparable", "DEL SimpleType: VmPipeAddress", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: VmPipeAddress", "DEL FieldAccess", "DEL Modifier: public", "DEL SimpleName: port", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL TagElement", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL TagElement", "DEL ParameterizedType: Comparable<VmPipeAddress>", "DEL SimpleName: o", "DEL FieldAccess", "DEL StringLiteral: \"vm:client:\"", "DEL BooleanLiteral: false", "DEL TagElement", "DEL SimpleName: port", "DEL TextElement: Returns the port number.", "DEL TextElement: A ", "DEL TagElement", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: VmPipeAddress", "DEL Block", "DEL SimpleName: compareTo", "DEL PrefixExpression: -", "DEL VariableDeclarationStatement", "DEL TagElement: @link", "DEL SimpleName: VmPipeAddress", "DEL TextElement: The VmPipe port ", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: port", "DEL ReturnStatement", "DEL SimpleType: VmPipeAddress", "DEL QualifiedName: o.port", "DEL QualifiedName: that.port", "DEL InfixExpression: -", "DEL SimpleName: Override", "DEL IfStatement", "DEL TextElement: Creates a new instance with the specifid port number.", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: toString", "DEL SimpleName: SocketAddress", "DEL Javadoc", "DEL SimpleName: port", "DEL TextElement:  which represents in-VM pipe port number. ", "DEL SimpleName: port", "DEL SimpleName: Override", "DEL Modifier: public", "DEL IfStatement", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: port", "DEL MethodDeclaration", "DEL SimpleType: VmPipeAddress", "DEL MethodDeclaration", "DEL SimpleName: that", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL Modifier: private", "DEL Modifier: private", "DEL NumberLiteral: 3257844376976830515L", "DEL FieldAccess", "DEL SimpleName: VmPipeAddress", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL SimpleName: port", "DEL CastExpression", "DEL Javadoc", "DEL SimpleName: o", "DEL IfStatement", "DEL SimpleName: o", "DEL SimpleName: o", "DEL ThisExpression", "DEL SimpleName: SocketAddress", "DEL NullLiteral", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL MarkerAnnotation", "DEL SimpleType: SocketAddress", "DEL Block", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL Block", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL ThisExpression", "DEL BooleanLiteral: true", "DEL InfixExpression: >=", "DEL SimpleName: port", "DEL SimpleName: VmPipeAddress", "DEL SingleVariableDeclaration", "DEL SimpleType: VmPipeAddress", "DEL SimpleName: hashCode", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL SimpleType: String", "DEL SimpleName: VmPipeAddress", "DEL SimpleName: VmPipeAddress"]}]}}, {"VmPipeAddress_diff": {"operations": ["Delete QualifiedName: org.apache.mina.transport.vmpipe(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.net.SocketAddress(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A (4)", "Delete SimpleName: SocketAddress(5)", "Delete TagElement: @link(6)", "Delete TextElement:  which represents in-VM pipe port number. (7)", "Delete TagElement(8)", "Delete TextElement:  <a href=\"http://mina.apache.org\">Apache MINA Project</a>(9)", "Delete TagElement: @author(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete SimpleName: VmPipeAddress(13)", "Delete SimpleName: SocketAddress(14)", "Delete SimpleType: SocketAddress(15)", "Delete SimpleName: Comparable(16)", "Delete SimpleType: Comparable(17)", "Delete SimpleName: VmPipeAddress(18)", "Delete SimpleType: VmPipeAddress(19)", "Delete ParameterizedType: Comparable<VmPipeAddress>(20)", "Delete Modifier: private(21)", "Delete Modifier: static(22)", "Delete Modifier: final(23)", "Delete PrimitiveType: long(24)", "Delete SimpleName: serialVersionUID(25)", "Delete NumberLiteral: 3257844376976830515L(26)", "Delete VariableDeclarationFragment(27)", "Delete FieldDeclaration(28)", "Delete TextElement: The VmPipe port (29)", "Delete TagElement(30)", "Delete Javadoc(31)", "Delete Modifier: private(32)", "Delete Modifier: final(33)", "Delete PrimitiveType: int(34)", "Delete SimpleName: port(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: Creates a new instance with the specifid port number.(38)", "Delete TagElement(39)", "Delete Javadoc(40)", "Delete Modifier: public(41)", "Delete SimpleName: VmPipeAddress(42)", "Delete PrimitiveType: int(43)", "Delete SimpleName: port(44)", "Delete SingleVariableDeclaration(45)", "Delete ThisExpression(46)", "Delete SimpleName: port(47)", "Delete FieldAccess(48)", "Delete SimpleName: port(49)", "Delete Assignment: =(50)", "Delete ExpressionStatement(51)", "Delete Block(52)", "Delete MethodDeclaration(53)", "Delete TextElement: Returns the port number.(54)", "Delete TagElement(55)", "Delete Javadoc(56)", "Delete Modifier: public(57)", "Delete PrimitiveType: int(58)", "Delete SimpleName: getPort(59)", "Delete SimpleName: port(60)", "Delete ReturnStatement(61)", "Delete Block(62)", "Delete MethodDeclaration(63)", "Delete SimpleName: Override(64)", "Delete MarkerAnnotation(65)", "Delete Modifier: public(66)", "Delete PrimitiveType: int(67)", "Delete SimpleName: hashCode(68)", "Delete SimpleName: port(69)", "Delete ReturnStatement(70)", "Delete Block(71)", "Delete MethodDeclaration(72)", "Delete SimpleName: Override(73)", "Delete MarkerAnnotation(74)", "Delete Modifier: public(75)", "Delete PrimitiveType: boolean(76)", "Delete SimpleName: equals(77)", "Delete SimpleName: Object(78)", "Delete SimpleType: Object(79)", "Delete SimpleName: o(80)", "Delete SingleVariableDeclaration(81)", "Delete SimpleName: o(82)", "Delete NullLiteral(83)", "Delete InfixExpression: ==(84)", "Delete BooleanLiteral: false(85)", "Delete ReturnStatement(86)", "Delete Block(87)", "Delete IfStatement(88)", "Delete ThisExpression(89)", "Delete SimpleName: o(90)", "Delete InfixExpression: ==(91)", "Delete BooleanLiteral: true(92)", "Delete ReturnStatement(93)", "Delete Block(94)", "Delete IfStatement(95)", "Delete SimpleName: o(96)", "Delete SimpleName: VmPipeAddress(97)", "Delete SimpleType: VmPipeAddress(98)", "Delete InstanceofExpression(99)", "Delete SimpleName: VmPipeAddress(100)", "Delete SimpleType: VmPipeAddress(101)", "Delete SimpleName: that(102)", "Delete SimpleName: VmPipeAddress(103)", "Delete SimpleType: VmPipeAddress(104)", "Delete SimpleName: o(105)", "Delete CastExpression(106)", "Delete VariableDeclarationFragment(107)", "Delete VariableDeclarationStatement(108)", "Delete ThisExpression(109)", "Delete SimpleName: port(110)", "Delete FieldAccess(111)", "Delete QualifiedName: that.port(112)", "Delete InfixExpression: ==(113)", "Delete ReturnStatement(114)", "Delete Block(115)", "Delete IfStatement(116)", "Delete BooleanLiteral: false(117)", "Delete ReturnStatement(118)", "Delete Block(119)", "Delete MethodDeclaration(120)", "Delete Modifier: public(121)", "Delete PrimitiveType: int(122)", "Delete SimpleName: compareTo(123)", "Delete SimpleName: VmPipeAddress(124)", "Delete SimpleType: VmPipeAddress(125)", "Delete SimpleName: o(126)", "Delete SingleVariableDeclaration(127)", "Delete ThisExpression(128)", "Delete SimpleName: port(129)", "Delete FieldAccess(130)", "Delete QualifiedName: o.port(131)", "Delete InfixExpression: -(132)", "Delete ReturnStatement(133)", "Delete Block(134)", "Delete MethodDeclaration(135)", "Delete SimpleName: Override(136)", "Delete MarkerAnnotation(137)", "Delete Modifier: public(138)", "Delete SimpleName: String(139)", "Delete SimpleType: String(140)", "Delete SimpleName: toString(141)", "Delete SimpleName: port(142)", "Delete NumberLiteral: 0(143)", "Delete InfixExpression: >=(144)", "Delete StringLiteral: \"vm:server:\"(145)", "Delete SimpleName: port(146)", "Delete InfixExpression: +(147)", "Delete ReturnStatement(148)", "Delete Block(149)", "Delete IfStatement(150)", "Delete StringLiteral: \"vm:client:\"(151)", "Delete SimpleName: port(152)", "Delete PrefixExpression: -(153)", "Delete InfixExpression: +(154)", "Delete ReturnStatement(155)", "Delete Block(156)", "Delete MethodDeclaration(157)", "Delete TypeDeclaration: class(158)"]}}, {"CoapGetServer_cluster": {"actions": [{"root": "UPDATE from org.apache.mina.transport.nio.udp.NioUdpServer to org.apache.mina.transport.nio.NioUdpServer", "operations": ["UPD QualifiedName: org.apache.mina.transport.nio.udp.NioUdpServer from org.apache.mina.transport.nio.udp.NioUdpServer to org.apache.mina.transport.nio.NioUdpServer"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS StringLiteral: \"closing\" to MethodInvocation at 2", "INS QualifiedName: System.err to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: println to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS SimpleName: println to MethodInvocation at 1", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"done!\" to MethodInvocation at 2", "INS QualifiedName: System.err to MethodInvocation at 0"]}]}}, {"CoapGetServer_diff": {"operations": ["Update QualifiedName: org.apache.mina.transport.nio.udp.NioUdpServer(26) to org.apache.mina.transport.nio.NioUdpServer", "Insert ExpressionStatement(302) into Block(308) at 5", "Insert ExpressionStatement(307) into Block(308) at 6", "Insert MethodInvocation(301) into ExpressionStatement(302) at 0", "Insert MethodInvocation(306) into ExpressionStatement(307) at 0", "Insert QualifiedName: System.err(298) into MethodInvocation(301) at 0", "Insert SimpleName: println(299) into MethodInvocation(301) at 1", "Insert StringLiteral: \"closing\"(300) into MethodInvocation(301) at 2", "Insert QualifiedName: System.err(303) into MethodInvocation(306) at 0", "Insert SimpleName: println(304) into MethodInvocation(306) at 1", "Insert StringLiteral: \"done!\"(305) into MethodInvocation(306) at 2"]}}, {"NioEchoClient_cluster": {"actions": [{"root": "UPDATE from org.apache.mina.transport.nio.tcp.NioTcpClient to org.apache.mina.transport.nio.NioTcpClient", "operations": ["UPD QualifiedName: org.apache.mina.transport.nio.tcp.NioTcpClient from org.apache.mina.transport.nio.tcp.NioTcpClient to org.apache.mina.transport.nio.NioTcpClient"]}]}}, {"NioEchoClient_diff": {"operations": ["Update QualifiedName: org.apache.mina.transport.nio.tcp.NioTcpClient(18) to org.apache.mina.transport.nio.NioTcpClient"]}}, {"NioEchoServer_cluster": {"actions": [{"root": "UPDATE from org.apache.mina.transport.nio.tcp.NioTcpServer to org.apache.mina.transport.nio.NioTcpServer", "operations": ["UPD QualifiedName: org.apache.mina.transport.nio.tcp.NioTcpServer from org.apache.mina.transport.nio.tcp.NioTcpServer to org.apache.mina.transport.nio.NioTcpServer"]}]}}, {"NioEchoServer_diff": {"operations": ["Update QualifiedName: org.apache.mina.transport.nio.tcp.NioTcpServer(26) to org.apache.mina.transport.nio.NioTcpServer"]}}, {"NioUdpEchoServer_cluster": {"actions": [{"root": "UPDATE from org.apache.mina.transport.nio.udp.NioUdpServer to org.apache.mina.transport.nio.NioUdpServer", "operations": ["UPD QualifiedName: org.apache.mina.transport.nio.udp.NioUdpServer from org.apache.mina.transport.nio.udp.NioUdpServer to org.apache.mina.transport.nio.NioUdpServer"]}]}}, {"NioUdpEchoServer_diff": {"operations": ["Update QualifiedName: org.apache.mina.transport.nio.udp.NioUdpServer(26) to org.apache.mina.transport.nio.NioUdpServer"]}}], "commit_stats": [{"total_files": 38, "deleted_files": 9, "testing": "True", "maintenance": "True", "build": "False"}]}