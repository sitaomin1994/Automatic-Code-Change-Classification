{"application": "Netflix-servo", "csha": "37256649f044d23ea585ae40d1867f715e3791c7", "files": [{"PeakRateCounter_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 6"]}, {"root": "UPDATE from java.util.concurrent.atomic.AtomicLong to java.util.concurrent.atomic.AtomicLongArray", "operations": ["UPD QualifiedName: java.util.concurrent.atomic.AtomicLong from java.util.concurrent.atomic.AtomicLong to java.util.concurrent.atomic.AtomicLongArray"]}, {"root": "UPDATE from AbstractMonitor<Long> to AbstractMonitor<Number>", "operations": ["UPD ParameterizedType: AbstractMonitor<Long> from AbstractMonitor<Long> to AbstractMonitor<Number>"]}, {"root": "UPDATE from ResettableMonitor<Long> to ResettableMonitor<Number>", "operations": ["UPD ParameterizedType: ResettableMonitor<Long> from ResettableMonitor<Long> to ResettableMonitor<Number>"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS ParameterizedType: AtomicReference<AtomicLongArray> to FieldDeclaration at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 7"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: AtomicLongArray to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: numBuckets to ClassInstanceCreation at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleType: AtomicLongArray to ParameterizedType: AtomicReference<AtomicLongArray> at 1", "INS ParameterizedType: AtomicReference<AtomicLongArray> to ClassInstanceCreation at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: intervalSeconds to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: buckets to Assignment: = at 0", "INS SimpleName: AtomicLongArray to SimpleType: AtomicLongArray at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Block to ForStatement at 3", "INS MethodInvocation to InfixExpression: < at 1", "INS Block to MethodDeclaration at 4", "INS InfixExpression: < to ForStatement at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleType: AtomicLongArray to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ForStatement to Block at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 20"]}, {"root": "UPDATE from Long to Number", "operations": ["UPD SimpleName: Long from Long to Number", "UPD SimpleType: Long from Long to Number", "UPD SimpleName: Long from Long to Number", "UPD SimpleType: Long from Long to Number", "UPD SimpleName: Long from Long to Number", "UPD SimpleName: Long from Long to Number", "UPD SimpleType: Long from Long to Number", "UPD SimpleName: Long from Long to Number", "UPD SimpleType: Long from Long to Number"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3", "MOV Modifier: private to FieldDeclaration at 0", "MOV Modifier: final to FieldDeclaration at 1"]}, {"root": "UPDATE from long to int", "operations": ["UPD PrimitiveType: long from long to int", "UPD PrimitiveType: long from long to int"]}, {"root": "UPDATE from TimestampedHashMap to PeakRateCounter", "operations": ["UPD SimpleName: TimestampedHashMap from TimestampedHashMap to PeakRateCounter"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: TimestampedHashMap to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Long to MethodDeclaration at 2", "MOV SimpleName: getAndResetValue to MethodDeclaration at 3", "MOV Javadoc to MethodDeclaration at 0", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from getAndResetValue to getValue", "operations": ["UPD SimpleName: getAndResetValue from getAndResetValue to getValue"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "INS SimpleType: Number to MethodDeclaration at 3", "operations": ["INS SimpleType: Number to MethodDeclaration at 3"]}, {"root": "INS SimpleName: getAndResetValue to MethodDeclaration at 4", "operations": ["INS SimpleName: getAndResetValue to MethodDeclaration at 4"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from int to void", "operations": ["UPD PrimitiveType: int from int to void"]}, {"root": "UPDATE from compare to increment", "operations": ["UPD SimpleName: compare from compare to increment"]}, {"root": "UPDATE from A resettable counter implementation backed by an  to A resettable counter. The value is the maximum", "operations": ["UPD TextElement: A resettable counter implementation backed by an  from A resettable counter implementation backed by an  to A resettable counter. The value is the maximum"]}, {"root": "UPDATE from The value is the maximum count per second until the counter is reset.  to count per second within the specified interval until the counter is reset.", "operations": ["UPD TextElement: The value is the maximum count per second until the counter is reset.  from The value is the maximum count per second until the counter is reset.  to count per second within the specified interval until the counter is reset."]}, {"root": "MOVE from ParameterizedType: AtomicReference<AtomicLongArray>", "operations": ["MOV SimpleType: AtomicReference to ParameterizedType: AtomicReference<AtomicLongArray> at 0"]}, {"root": "UPDATE from Long to AtomicLongArray", "operations": ["UPD SimpleName: Long from Long to AtomicLongArray", "UPD SimpleName: AtomicLong from AtomicLong to AtomicLongArray", "UPD SimpleType: AtomicLong from AtomicLong to AtomicLongArray", "UPD SimpleName: TimestampedHashMap from TimestampedHashMap to AtomicLongArray"]}, {"root": "MOVE from ParameterizedType: AtomicReference<AtomicLongArray>", "operations": ["MOV SimpleType: AtomicLong to ParameterizedType: AtomicReference<AtomicLongArray> at 1"]}, {"root": "UPDATE from timestamp to numBuckets", "operations": ["UPD SimpleName: timestamp from timestamp to numBuckets", "UPD SimpleName: timestamp from timestamp to numBuckets"]}, {"root": "MOVE from Block", "operations": ["MOV SuperConstructorInvocation to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 4"]}, {"root": "MOVE from SimpleType: Number", "operations": ["MOV SimpleName: Long to SimpleType: Number at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: amount to MethodInvocation at 3", "INS SimpleName: index to MethodInvocation at 2", "INS SimpleName: addAndGet to MethodInvocation at 1", "INS ExpressionStatement to Block at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS SimpleName: intervalSeconds to Assignment: = at 1", "operations": ["INS SimpleName: intervalSeconds to Assignment: = at 1"]}, {"root": "MOVE from SimpleType: AtomicLongArray", "operations": ["MOV SimpleName: TimestampedHashMap to SimpleType: AtomicLongArray at 0"]}, {"root": "UPDATE from now to counts", "operations": ["UPD SimpleName: now from now to counts", "UPD SimpleName: putIfAbsent from putIfAbsent to counts", "UPD SimpleName: count from count to counts"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from elapsedTime to max", "operations": ["UPD SimpleName: elapsedTime from elapsedTime to max"]}, {"root": "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: cnt to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: cnt to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from delta to i", "operations": ["UPD SimpleName: delta from delta to i", "UPD SimpleName: count from count to i", "UPD SimpleName: count from count to i"]}, {"root": "MOVE from InfixExpression: <", "operations": ["MOV SimpleName: count to InfixExpression: < at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV IfStatement to Block at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: buckets to MethodInvocation at 0"]}, {"root": "UPDATE from get to set", "operations": ["UPD SimpleName: get from get to set"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleType: AtomicLongArray to ClassInstanceCreation at 0", "INS SimpleName: numBuckets to ClassInstanceCreation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: AtomicLongArray to SimpleType: AtomicLongArray at 0"]}, {"root": "UPDATE from v1 to now", "operations": ["UPD SimpleName: v1 from v1 to now"]}, {"root": "INS InfixExpression: / to VariableDeclarationFragment at 1", "operations": ["INS InfixExpression: / to VariableDeclarationFragment at 1", "INS NumberLiteral: 1000L to InfixExpression: / at 1"]}, {"root": "UPDATE from v2 to index", "operations": ["UPD SimpleName: v2 from v2 to index"]}, {"root": "INS InfixExpression: % to VariableDeclarationFragment at 1", "operations": ["INS CastExpression to InfixExpression: % at 0", "INS SimpleName: numBuckets to InfixExpression: % at 1", "INS InfixExpression: % to VariableDeclarationFragment at 1", "INS SimpleName: now to CastExpression at 1", "INS PrimitiveType: int to CastExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: count to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addAndGet to MethodInvocation at 1", "MOV SimpleName: count to MethodInvocation at 0"]}, {"root": "UPDATE from addAndGet to length", "operations": ["UPD SimpleName: addAndGet from addAndGet to length"]}, {"root": "UPDATE from != to >", "operations": ["UPD InfixExpression: != from != to >"]}, {"root": "MOVE from InfixExpression: /", "operations": ["MOV MethodInvocation to InfixExpression: / at 0"]}, {"root": "MOVE from ParameterizedType: AtomicReference<AtomicLongArray>", "operations": ["MOV SimpleType: AtomicReference to ParameterizedType: AtomicReference<AtomicLongArray> at 0"]}, {"root": "UPDATE from count to cnt", "operations": ["UPD SimpleName: count from count to cnt", "UPD SimpleName: count from count to cnt"]}, {"root": "INS SimpleName: max to InfixExpression: != at 1", "operations": ["INS SimpleName: max to InfixExpression: != at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 1"]}, {"root": "MOVE from SimpleType: AtomicLongArray", "operations": ["MOV SimpleName: Long to SimpleType: AtomicLongArray at 0"]}, {"root": "UPDATE from bucketKey to get", "operations": ["UPD SimpleName: bucketKey from bucketKey to get"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: cnt to Assignment: = at 1", "INS SimpleName: max to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Serializable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Comparator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.ConcurrentHashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.concurrent.TimeUnit", "DEL ImportDeclaration"]}, {"root": "DEL TagElement: @link", "operations": ["DEL QualifiedName: java.util.concurrent.atomic.ConcurrentHashMap", "DEL TagElement: @link"]}, {"root": "DEL TextElement: .", "operations": ["DEL TextElement: ."]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: currentTimeMillis", "DEL SimpleName: System"]}, {"root": "DEL InfixExpression: -", "operations": ["DEL MethodInvocation", "DEL SimpleName: getTimestamp", "DEL SimpleName: now", "DEL InfixExpression: -"]}, {"root": "DEL SimpleName: currentBucketKey", "operations": ["DEL SimpleName: currentBucketKey"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: elapsedTime", "DEL QualifiedName: TimeUnit.MILLISECONDS", "DEL QualifiedName: TimeUnit.SECONDS", "DEL MethodInvocation", "DEL SimpleName: convert"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: count", "DEL MethodInvocation", "DEL SimpleName: amount", "DEL SimpleName: addAndGet"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL Block", "DEL SimpleName: bucketKey", "DEL ExpressionStatement", "DEL SimpleName: trimBuckets"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: remove", "operations": ["DEL SimpleName: remove"]}, {"root": "DEL SimpleName: key", "operations": ["DEL SimpleName: key"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement: Remove all but the current and max buckets.", "DEL TagElement"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL SimpleName: trimBuckets", "operations": ["DEL SimpleName: trimBuckets"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: currentBucketKey", "DEL SimpleType: Long", "DEL SingleVariableDeclaration"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: keySet", "DEL MethodInvocation", "DEL SimpleName: key", "DEL PrefixExpression: !", "DEL EnhancedForStatement", "DEL SimpleName: maxBucketKey", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: buckets", "DEL SimpleType: Set", "DEL SimpleName: Long", "DEL MethodInvocation", "DEL SimpleName: getMaxBucketKey", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: maxBucketKey", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Set", "DEL SimpleType: Long", "DEL SimpleName: keySet", "DEL PrefixExpression: !", "DEL ParameterizedType: Set<Long>", "DEL InfixExpression: &&", "DEL SimpleType: Long", "DEL SimpleName: Long", "DEL SimpleName: keySet", "DEL SimpleName: Long", "DEL SimpleName: equals", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleType: Long", "DEL SimpleName: key", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: equals", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: get", "DEL VariableDeclarationFragment", "DEL SimpleName: currentBucketKey"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL ParameterizedType: AtomicReference<TimestampedHashMap>", "DEL SimpleName: TimestampedHashMap", "DEL SimpleType: TimestampedHashMap"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block", "DEL SimpleName: buckets", "DEL ExpressionStatement", "DEL SimpleType: TimestampedHashMap", "DEL Assignment: =", "DEL ParameterizedType: AtomicReference<TimestampedHashMap>", "DEL SimpleName: TimestampedHashMap", "DEL SimpleType: TimestampedHashMap", "DEL Modifier: public", "DEL SimpleName: PeakRateCounter", "DEL ClassInstanceCreation", "DEL SimpleName: TimestampedHashMap", "DEL ClassInstanceCreation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL SimpleName: TimestampedHashMap", "DEL NumberLiteral: 1", "DEL SimpleType: Long", "DEL TextElement: The initialCapacity is set for a small number of values ", "DEL Block", "DEL PrimitiveType: long", "DEL SimpleName: Long", "DEL SuperConstructorInvocation", "DEL Javadoc", "DEL TextElement: ConcurrentHashMap is initialized with the goal of reducing memory ", "DEL TextElement: before reallocation.  ", "DEL SimpleName: getTimestamp", "DEL ParameterizedType: ConcurrentHashMap<Long,AtomicLong>", "DEL TypeDeclaration: class", "DEL SimpleType: ConcurrentHashMap", "DEL MethodDeclaration", "DEL TextElement: The load factor is set high for dense packing", "DEL MethodDeclaration", "DEL SimpleName: ConcurrentHashMap", "DEL Modifier: static", "DEL NumberLiteral: 8", "DEL TextElement: and GC load for very large number of counters typically used.", "DEL Block", "DEL TextElement: a sufficient throughput while reducing unnecessary memory loading", "DEL SimpleName: timestamp", "DEL NumberLiteral: 0.9f", "DEL ReturnStatement", "DEL TextElement: The concurrencyLevel is set low for concurrent writes to support"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: getValue", "DEL MethodInvocation", "DEL SimpleName: getMaxValue", "DEL Modifier: public", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleType: Long"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: buckets", "DEL ClassInstanceCreation", "DEL SimpleName: set", "DEL Block", "DEL SimpleType: TimestampedHashMap"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: v1", "DEL VariableDeclarationStatement", "DEL PrimitiveType: long", "DEL VariableDeclarationFragment"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: v2", "DEL PrimitiveType: long", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: v1", "operations": ["DEL SimpleName: v1"]}, {"root": "DEL SimpleName: v2", "operations": ["DEL SimpleName: v2"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: AtomicLong", "DEL SimpleType: Long", "DEL SimpleName: o1", "DEL SimpleName: AtomicLong", "DEL SimpleType: Map.Entry", "DEL SingleVariableDeclaration", "DEL QualifiedName: Map.Entry", "DEL SimpleName: Long", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL QualifiedName: Map.Entry", "DEL SimpleType: Map.Entry", "DEL SimpleType: Long", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL SimpleName: o2", "DEL SimpleName: AtomicLong", "DEL SimpleName: Long", "DEL SimpleType: AtomicLong"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getValue", "DEL MethodInvocation", "DEL SimpleName: o1", "DEL MethodInvocation", "DEL SimpleName: get"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: getValue", "DEL SimpleName: o2", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL InfixExpression: ==", "DEL ConditionalExpression", "DEL NumberLiteral: 1", "DEL SimpleName: v1", "DEL PrefixExpression: -", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL InfixExpression: >", "DEL SimpleName: v2", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0", "DEL SimpleName: v1", "DEL SimpleName: v2", "DEL ConditionalExpression"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: increment", "DEL SimpleName: incrementBucket", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: currentBucketKey", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL Block", "DEL PrimitiveType: long", "DEL SimpleName: amount", "DEL Modifier: public", "DEL VariableDeclarationStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleType: Long", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: AtomicLong", "DEL Block", "DEL Block", "DEL SimpleName: AtomicLong", "DEL Block", "DEL SimpleName: amount", "DEL PrimitiveType: long", "DEL SimpleName: amount", "DEL SimpleName: buckets", "DEL SimpleName: get", "DEL SimpleName: amount", "DEL MethodDeclaration", "DEL SimpleType: AtomicLong", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: get", "DEL SimpleName: delta", "DEL SimpleType: AtomicLong", "DEL PrimitiveType: void", "DEL IfStatement", "DEL SimpleName: bucketKey", "DEL SimpleName: Long", "DEL SimpleName: bucketKey", "DEL SimpleName: AtomicLong", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: incrementBucket", "DEL SimpleName: AtomicLong", "DEL VariableDeclarationFragment", "DEL NullLiteral"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: AtomicLong", "DEL SimpleName: MapEntryValueComparator", "DEL SimpleName: Comparator", "DEL SimpleType: Long", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL Modifier: static", "DEL SimpleType: Comparator", "DEL SimpleName: Long", "DEL SimpleType: Serializable", "DEL SimpleType: AtomicLong", "DEL SimpleName: Serializable", "DEL SimpleType: Map.Entry", "DEL QualifiedName: Map.Entry", "DEL TypeDeclaration: class", "DEL ParameterizedType: Comparator<Map.Entry<Long,AtomicLong>>"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleType: Map.Entry", "DEL Block", "DEL SimpleType: Map.Entry", "DEL ClassInstanceCreation", "DEL SimpleType: Long", "DEL SimpleType: Set", "DEL QualifiedName: Map.Entry", "DEL QualifiedName: Map.Entry", "DEL VariableDeclarationStatement", "DEL SimpleType: AtomicLong", "DEL SimpleName: Collections", "DEL QualifiedName: Map.Entry", "DEL SimpleName: entrySet", "DEL VariableDeclarationStatement", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL SimpleName: entrySet", "DEL SimpleName: AtomicLong", "DEL SimpleName: entrySet", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: Long", "DEL SimpleType: AtomicLong", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL SimpleName: Long", "DEL SimpleName: Comparator", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: AtomicLong", "DEL SimpleType: Map.Entry", "DEL NullLiteral", "DEL SimpleName: cmp", "DEL IfStatement", "DEL SimpleName: max", "DEL SimpleName: isEmpty", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL MethodDeclaration", "DEL SimpleName: buckets", "DEL ParameterizedType: Comparator<Map.Entry<Long,AtomicLong>>", "DEL SimpleName: MapEntryValueComparator", "DEL SimpleName: entrySet", "DEL ParameterizedType: Set<Map.Entry<Long,AtomicLong>>", "DEL Block", "DEL SimpleType: Map.Entry", "DEL SimpleName: AtomicLong", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: Long", "DEL SimpleName: Long", "DEL SimpleType: Long", "DEL SimpleName: max", "DEL SimpleName: getMaxBucket", "DEL SimpleName: Long", "DEL QualifiedName: Map.Entry", "DEL SimpleType: AtomicLong", "DEL SimpleName: AtomicLong", "DEL SimpleType: Comparator", "DEL SimpleType: Long", "DEL SimpleName: cmp", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL SimpleName: AtomicLong", "DEL Modifier: private", "DEL SimpleName: Set", "DEL MethodInvocation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleType: MapEntryValueComparator"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: Long", "DEL MethodDeclaration", "DEL SimpleName: Long", "DEL Block", "DEL SimpleName: getKey", "DEL SimpleName: getMaxBucketKey", "DEL SimpleName: getMaxBucket", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL SimpleType: Long", "DEL ParameterizedType: Map.Entry<Long,AtomicLong>", "DEL MethodInvocation", "DEL SimpleName: getValue", "DEL SimpleName: Long", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: getMaxBucket", "DEL NumberLiteral: 0", "DEL SimpleType: Map.Entry", "DEL SimpleName: bucket", "DEL SimpleName: getMaxBucket", "DEL SimpleName: AtomicLong", "DEL SimpleName: get", "DEL QualifiedName: Map.Entry", "DEL NullLiteral", "DEL PrimitiveType: long", "DEL SimpleName: getMaxValue", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: AtomicLong", "DEL MethodInvocation", "DEL SimpleName: bucket"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodInvocation", "DEL SimpleName: buckets", "DEL SimpleName: AtomicLong", "DEL SimpleType: Long", "DEL SimpleName: get", "DEL SimpleName: get", "DEL ReturnStatement", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL SimpleName: getBucketValue", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: Long", "DEL MethodInvocation", "DEL SimpleType: AtomicLong"]}]}}, {"PeakRateCounter_diff": {"operations": ["Move MethodDeclaration(466) into TypeDeclaration: class(324) at 6", "Update QualifiedName: java.util.concurrent.atomic.AtomicLong(32) to java.util.concurrent.atomic.AtomicLongArray", "Update ParameterizedType: AbstractMonitor<Long>(49) to AbstractMonitor<Number>", "Update ParameterizedType: ResettableMonitor<Long>(56) to ResettableMonitor<Number>", "Insert FieldDeclaration(49) into TypeDeclaration: class(324) at 6", "Move FieldDeclaration(106) into TypeDeclaration: class(324) at 7", "Insert MethodDeclaration(88) into TypeDeclaration: class(324) at 8", "Insert MethodDeclaration(145) into TypeDeclaration: class(324) at 9", "Move MethodDeclaration(537) into TypeDeclaration: class(324) at 20", "Update SimpleType: Long(48) to Number", "Update SimpleType: Long(55) to Number", "Move Modifier: private(57) into FieldDeclaration(49) at 0", "Move Modifier: final(58) into FieldDeclaration(49) at 1", "Insert ParameterizedType: AtomicReference<AtomicLongArray>(46) into FieldDeclaration(49) at 2", "Move VariableDeclarationFragment(65) into FieldDeclaration(49) at 3", "Update PrimitiveType: long(103) to int", "Insert Modifier: public(56) into MethodDeclaration(88) at 0", "Update SimpleName: TimestampedHashMap(116) to PeakRateCounter", "Move SimpleName: TimestampedHashMap(116) into MethodDeclaration(88) at 1", "Move SingleVariableDeclaration(72) into MethodDeclaration(88) at 2", "Insert SingleVariableDeclaration(64) into MethodDeclaration(88) at 3", "Insert Block(87) into MethodDeclaration(88) at 4", "Move MarkerAnnotation(137) into MethodDeclaration(145) at 0", "Move Modifier: public(152) into MethodDeclaration(145) at 1", "Update SimpleType: Long(154) to Number", "Move SimpleType: Long(154) into MethodDeclaration(145) at 2", "Update SimpleName: getAndResetValue(155) to getValue", "Move SimpleName: getAndResetValue(155) into MethodDeclaration(145) at 3", "Insert Block(144) into MethodDeclaration(145) at 4", "Move Javadoc(149) into MethodDeclaration(173) at 0", "Move MarkerAnnotation(151) into MethodDeclaration(173) at 1", "Insert Modifier: public(151) into MethodDeclaration(173) at 2", "Insert SimpleType: Number(153) into MethodDeclaration(173) at 3", "Insert SimpleName: getAndResetValue(154) into MethodDeclaration(173) at 4", "Insert Block(172) into MethodDeclaration(173) at 5", "Move Javadoc(297) into MethodDeclaration(323) at 0", "Move MarkerAnnotation(299) into MethodDeclaration(323) at 1", "Update PrimitiveType: int(484) to void", "Update SimpleName: compare(485) to increment", "Move SingleVariableDeclaration(305) into MethodDeclaration(323) at 6", "Update TextElement: A resettable counter implementation backed by an (36) to A resettable counter. The value is the maximum", "Update TextElement: The value is the maximum count per second until the counter is reset. (40) to count per second within the specified interval until the counter is reset.", "Update SimpleName: Long(47) to Number", "Update SimpleName: Long(54) to Number", "Move SimpleType: AtomicReference(60) into ParameterizedType: AtomicReference<AtomicLongArray>(46) at 0", "Update SimpleType: AtomicLong(99) to AtomicLongArray", "Move SimpleType: AtomicLong(99) into ParameterizedType: AtomicReference<AtomicLongArray>(46) at 1", "Update SimpleName: timestamp(104) to numBuckets", "Insert PrimitiveType: int(62) into SingleVariableDeclaration(64) at 0", "Insert SimpleName: intervalSeconds(63) into SingleVariableDeclaration(64) at 1", "Move SuperConstructorInvocation(77) into Block(87) at 0", "Move ExpressionStatement(126) into Block(87) at 1", "Insert ExpressionStatement(86) into Block(87) at 2", "Update SimpleName: Long(153) to Number", "Insert VariableDeclarationStatement(102) into Block(144) at 0", "Move VariableDeclarationStatement(323) into Block(144) at 1", "Move VariableDeclarationStatement(332) into Block(144) at 2", "Insert ForStatement(141) into Block(144) at 3", "Move ReturnStatement(605) into Block(144) at 4", "Update SimpleName: Long(412) to Number", "Move SimpleName: Long(412) into SimpleType: Number(153) at 0", "Move VariableDeclarationStatement(162) into Block(172) at 0", "Move ExpressionStatement(460) into Block(172) at 1", "Move ReturnStatement(171) into Block(172) at 2", "Insert ExpressionStatement(321) into Block(322) at 2", "Update SimpleName: AtomicLong(98) to AtomicLongArray", "Insert Assignment: =(85) into ExpressionStatement(86) at 0", "Insert SimpleType: AtomicLongArray(96) into VariableDeclarationStatement(102) at 0", "Move VariableDeclarationFragment(311) into VariableDeclarationStatement(102) at 1", "Insert VariableDeclarationExpression(116) into ForStatement(141) at 0", "Insert InfixExpression: <(121) into ForStatement(141) at 1", "Insert PostfixExpression: ++(123) into ForStatement(141) at 2", "Insert Block(140) into ForStatement(141) at 3", "Update SimpleType: Long(157) to Number", "Update PrimitiveType: long(513) to int", "Insert MethodInvocation(320) into ExpressionStatement(321) at 0", "Update SimpleName: timestamp(121) to numBuckets", "Insert SimpleName: intervalSeconds(71) into Assignment: =(72) at 1", "Insert SimpleName: buckets(74) into Assignment: =(85) at 0", "Insert ClassInstanceCreation(84) into Assignment: =(85) at 1", "Update SimpleName: TimestampedHashMap(165) to AtomicLongArray", "Move SimpleName: TimestampedHashMap(165) into SimpleType: AtomicLongArray(96) at 0", "Update SimpleName: now(307) to counts", "Move MethodInvocation(381) into VariableDeclarationFragment(101) at 1", "Update SimpleName: elapsedTime(314) to max", "Insert NumberLiteral: 0(105) into VariableDeclarationFragment(106) at 1", "Insert SimpleName: cnt(109) into VariableDeclarationFragment(110) at 0", "Insert PrimitiveType: int(112) into VariableDeclarationExpression(116) at 0", "Insert VariableDeclarationFragment(115) into VariableDeclarationExpression(116) at 1", "Update SimpleName: count(360) to i", "Move SimpleName: count(360) into InfixExpression: <(121) at 0", "Insert MethodInvocation(120) into InfixExpression: <(121) at 1", "Insert SimpleName: i(122) into PostfixExpression: ++(123) at 0", "Move ExpressionStatement(387) into Block(140) at 0", "Move IfStatement(402) into Block(140) at 1", "Update SimpleName: Long(156) to Number", "Move SimpleName: buckets(454) into MethodInvocation(168) at 0", "Update SimpleName: get(455) to set", "Move SimpleName: get(455) into MethodInvocation(168) at 1", "Insert ClassInstanceCreation(167) into MethodInvocation(168) at 2", "Update SimpleName: v1(505) to now", "Insert InfixExpression: /(302) into VariableDeclarationFragment(303) at 1", "Update SimpleName: v2(514) to index", "Insert InfixExpression: %(311) into VariableDeclarationFragment(312) at 1", "Move MethodInvocation(318) into MethodInvocation(320) at 0", "Insert SimpleName: addAndGet(317) into MethodInvocation(320) at 1", "Insert SimpleName: index(318) into MethodInvocation(320) at 2", "Insert SimpleName: amount(319) into MethodInvocation(320) at 3", "Insert ParameterizedType: AtomicReference<AtomicLongArray>(79) into ClassInstanceCreation(84) at 0", "Insert ClassInstanceCreation(83) into ClassInstanceCreation(84) at 1", "Update SimpleName: count(351) to i", "Move SimpleName: count(351) into VariableDeclarationFragment(115) at 0", "Insert NumberLiteral: 0(114) into VariableDeclarationFragment(115) at 1", "Update SimpleName: count(363) to counts", "Move SimpleName: count(363) into MethodInvocation(120) at 0", "Update SimpleName: addAndGet(364) to length", "Move SimpleName: addAndGet(364) into MethodInvocation(120) at 1", "Update InfixExpression: !=(390) to >", "Insert SimpleType: AtomicLongArray(165) into ClassInstanceCreation(167) at 0", "Insert SimpleName: numBuckets(166) into ClassInstanceCreation(167) at 1", "Move MethodInvocation(310) into InfixExpression: /(302) at 0", "Insert NumberLiteral: 1000L(301) into InfixExpression: /(302) at 1", "Insert CastExpression(309) into InfixExpression: %(311) at 0", "Insert SimpleName: numBuckets(310) into InfixExpression: %(311) at 1", "Move SimpleType: AtomicReference(80) into ParameterizedType: AtomicReference<AtomicLongArray>(79) at 0", "Insert SimpleType: AtomicLongArray(78) into ParameterizedType: AtomicReference<AtomicLongArray>(79) at 1", "Insert SimpleType: AtomicLongArray(81) into ClassInstanceCreation(83) at 0", "Insert SimpleName: numBuckets(82) into ClassInstanceCreation(83) at 1", "Update SimpleName: count(378) to cnt", "Update SimpleName: count(388) to cnt", "Insert SimpleName: max(132) into InfixExpression: >(133) at 1", "Insert SimpleName: AtomicLongArray(164) into SimpleType: AtomicLongArray(165) at 0", "Move MethodInvocation(213) into InfixExpression: ==(221) at 0", "Move MethodInvocation(220) into InfixExpression: ==(221) at 1", "Insert PrimitiveType: int(307) into CastExpression(309) at 0", "Insert SimpleName: now(308) into CastExpression(309) at 1", "Insert SimpleName: AtomicLongArray(77) into SimpleType: AtomicLongArray(78) at 0", "Update SimpleName: Long(139) to AtomicLongArray", "Move SimpleName: Long(139) into SimpleType: AtomicLongArray(81) at 0", "Update SimpleName: putIfAbsent(382) to counts", "Update SimpleName: bucketKey(383) to get", "Update SimpleName: delta(384) to i", "Insert Assignment: =(136) into ExpressionStatement(137) at 0", "Insert SimpleName: max(134) into Assignment: =(136) at 0", "Insert SimpleName: cnt(135) into Assignment: =(136) at 1", "Delete QualifiedName: java.io.Serializable(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Collections(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.Comparator(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.Map(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.Set(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.concurrent.ConcurrentHashMap(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.concurrent.TimeUnit(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.concurrent.atomic.ConcurrentHashMap(37)", "Delete TagElement: @link(38)", "Delete TextElement: .(39)", "Delete SimpleName: System(122)", "Delete SimpleName: currentTimeMillis(123)", "Delete MethodInvocation(124)", "Delete SimpleName: now(315)", "Delete SimpleName: getTimestamp(319)", "Delete MethodInvocation(320)", "Delete InfixExpression: -(321)", "Delete SimpleName: currentBucketKey(325)", "Delete QualifiedName: TimeUnit.SECONDS(326)", "Delete SimpleName: convert(327)", "Delete SimpleName: elapsedTime(328)", "Delete QualifiedName: TimeUnit.MILLISECONDS(329)", "Delete MethodInvocation(330)", "Delete NullLiteral(389)", "Delete SimpleName: count(391)", "Delete SimpleName: addAndGet(392)", "Delete SimpleName: amount(393)", "Delete MethodInvocation(394)", "Delete SimpleName: trimBuckets(397)", "Delete SimpleName: bucketKey(398)", "Delete MethodInvocation(399)", "Delete ExpressionStatement(400)", "Delete Block(401)", "Delete MethodInvocation(456)", "Delete SimpleName: remove(457)", "Delete SimpleName: key(458)", "Delete TextElement: Remove all but the current and max buckets.(407)", "Delete TagElement(408)", "Delete Javadoc(409)", "Delete PrimitiveType: void(410)", "Delete SimpleName: trimBuckets(411)", "Delete SimpleType: Long(413)", "Delete SimpleName: currentBucketKey(414)", "Delete SingleVariableDeclaration(415)", "Delete SimpleName: Long(416)", "Delete SimpleType: Long(417)", "Delete SimpleName: maxBucketKey(418)", "Delete SimpleName: getMaxBucketKey(419)", "Delete MethodInvocation(420)", "Delete VariableDeclarationFragment(421)", "Delete VariableDeclarationStatement(422)", "Delete SimpleName: Set(423)", "Delete SimpleType: Set(424)", "Delete SimpleName: Long(425)", "Delete SimpleType: Long(426)", "Delete ParameterizedType: Set<Long>(427)", "Delete SimpleName: keySet(428)", "Delete SimpleName: buckets(429)", "Delete SimpleName: get(430)", "Delete MethodInvocation(431)", "Delete SimpleName: keySet(432)", "Delete MethodInvocation(433)", "Delete VariableDeclarationFragment(434)", "Delete VariableDeclarationStatement(435)", "Delete SimpleName: Long(436)", "Delete SimpleType: Long(437)", "Delete SimpleName: key(438)", "Delete SingleVariableDeclaration(439)", "Delete SimpleName: keySet(440)", "Delete SimpleName: key(441)", "Delete SimpleName: equals(442)", "Delete SimpleName: maxBucketKey(443)", "Delete MethodInvocation(444)", "Delete PrefixExpression: !(445)", "Delete ParenthesizedExpression(446)", "Delete SimpleName: key(447)", "Delete SimpleName: equals(448)", "Delete SimpleName: currentBucketKey(449)", "Delete MethodInvocation(450)", "Delete PrefixExpression: !(451)", "Delete ParenthesizedExpression(452)", "Delete InfixExpression: &&(453)", "Delete Block(461)", "Delete IfStatement(462)", "Delete Block(463)", "Delete EnhancedForStatement(464)", "Delete Block(465)", "Delete SimpleName: TimestampedHashMap(61)", "Delete SimpleType: TimestampedHashMap(62)", "Delete ParameterizedType: AtomicReference<TimestampedHashMap>(63)", "Delete FieldDeclaration(66)", "Delete Modifier: public(67)", "Delete SimpleName: PeakRateCounter(68)", "Delete SimpleName: buckets(78)", "Delete SimpleName: TimestampedHashMap(81)", "Delete SimpleType: TimestampedHashMap(82)", "Delete ParameterizedType: AtomicReference<TimestampedHashMap>(83)", "Delete SimpleName: TimestampedHashMap(84)", "Delete SimpleType: TimestampedHashMap(85)", "Delete ClassInstanceCreation(86)", "Delete ClassInstanceCreation(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete Modifier: static(92)", "Delete SimpleName: TimestampedHashMap(93)", "Delete SimpleName: ConcurrentHashMap(94)", "Delete SimpleType: ConcurrentHashMap(95)", "Delete SimpleName: Long(96)", "Delete SimpleType: Long(97)", "Delete ParameterizedType: ConcurrentHashMap<Long,AtomicLong>(100)", "Delete TextElement: ConcurrentHashMap is initialized with the goal of reducing memory (107)", "Delete TextElement: and GC load for very large number of counters typically used.(108)", "Delete TextElement: The initialCapacity is set for a small number of values (109)", "Delete TextElement: before reallocation.  (110)", "Delete TextElement: The load factor is set high for dense packing(111)", "Delete TextElement: The concurrencyLevel is set low for concurrent writes to support(112)", "Delete TextElement: a sufficient throughput while reducing unnecessary memory loading(113)", "Delete TagElement(114)", "Delete Javadoc(115)", "Delete NumberLiteral: 8(117)", "Delete NumberLiteral: 0.9f(118)", "Delete NumberLiteral: 1(119)", "Delete SuperConstructorInvocation(120)", "Delete Block(127)", "Delete MethodDeclaration(128)", "Delete PrimitiveType: long(129)", "Delete SimpleName: getTimestamp(130)", "Delete SimpleName: timestamp(131)", "Delete ReturnStatement(132)", "Delete Block(133)", "Delete MethodDeclaration(134)", "Delete TypeDeclaration: class(135)", "Delete Modifier: public(138)", "Delete SimpleType: Long(140)", "Delete SimpleName: getValue(141)", "Delete SimpleName: getMaxValue(142)", "Delete MethodInvocation(143)", "Delete ReturnStatement(144)", "Delete Block(145)", "Delete MethodDeclaration(146)", "Delete SimpleName: buckets(163)", "Delete SimpleName: set(164)", "Delete SimpleType: TimestampedHashMap(166)", "Delete ClassInstanceCreation(167)", "Delete MethodInvocation(168)", "Delete ExpressionStatement(169)", "Delete Block(172)", "Delete MethodDeclaration(173)", "Delete PrimitiveType: long(209)", "Delete SimpleName: v1(210)", "Delete VariableDeclarationFragment(214)", "Delete VariableDeclarationStatement(215)", "Delete PrimitiveType: long(216)", "Delete SimpleName: v2(217)", "Delete VariableDeclarationFragment(221)", "Delete VariableDeclarationStatement(222)", "Delete SimpleName: v1(229)", "Delete SimpleName: v2(230)", "Delete SimpleName: Override(481)", "Delete MarkerAnnotation(482)", "Delete QualifiedName: Map.Entry(486)", "Delete SimpleType: Map.Entry(487)", "Delete SimpleName: Long(488)", "Delete SimpleType: Long(489)", "Delete SimpleName: AtomicLong(490)", "Delete SimpleType: AtomicLong(491)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(492)", "Delete SimpleName: o1(493)", "Delete SingleVariableDeclaration(494)", "Delete QualifiedName: Map.Entry(495)", "Delete SimpleType: Map.Entry(496)", "Delete SimpleName: Long(497)", "Delete SimpleType: Long(498)", "Delete SimpleName: AtomicLong(499)", "Delete SimpleType: AtomicLong(500)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(501)", "Delete SimpleName: o2(502)", "Delete SingleVariableDeclaration(503)", "Delete SimpleName: o1(506)", "Delete SimpleName: getValue(507)", "Delete MethodInvocation(508)", "Delete SimpleName: get(509)", "Delete MethodInvocation(510)", "Delete SimpleName: o2(515)", "Delete SimpleName: getValue(516)", "Delete MethodInvocation(517)", "Delete SimpleName: get(518)", "Delete MethodInvocation(519)", "Delete SimpleName: v1(522)", "Delete SimpleName: v2(523)", "Delete InfixExpression: ==(524)", "Delete NumberLiteral: 0(525)", "Delete SimpleName: v1(526)", "Delete SimpleName: v2(527)", "Delete InfixExpression: >(528)", "Delete NumberLiteral: 1(529)", "Delete NumberLiteral: 1(530)", "Delete PrefixExpression: -(531)", "Delete ConditionalExpression(532)", "Delete ConditionalExpression(533)", "Delete ParenthesizedExpression(534)", "Delete ReturnStatement(535)", "Delete Modifier: public(300)", "Delete PrimitiveType: void(301)", "Delete SimpleName: increment(302)", "Delete PrimitiveType: long(306)", "Delete VariableDeclarationStatement(312)", "Delete SimpleName: incrementBucket(333)", "Delete SimpleName: currentBucketKey(334)", "Delete SimpleName: amount(335)", "Delete MethodInvocation(336)", "Delete ExpressionStatement(337)", "Delete Block(338)", "Delete MethodDeclaration(339)", "Delete PrimitiveType: void(340)", "Delete SimpleName: incrementBucket(341)", "Delete SimpleName: Long(342)", "Delete SimpleType: Long(343)", "Delete SimpleName: bucketKey(344)", "Delete SingleVariableDeclaration(345)", "Delete PrimitiveType: long(346)", "Delete SimpleName: amount(347)", "Delete SingleVariableDeclaration(348)", "Delete SimpleName: AtomicLong(349)", "Delete SimpleType: AtomicLong(350)", "Delete SimpleName: buckets(352)", "Delete SimpleName: get(353)", "Delete MethodInvocation(354)", "Delete SimpleName: get(355)", "Delete SimpleName: bucketKey(356)", "Delete MethodInvocation(357)", "Delete VariableDeclarationFragment(358)", "Delete VariableDeclarationStatement(359)", "Delete NullLiteral(361)", "Delete InfixExpression: !=(362)", "Delete SimpleName: amount(365)", "Delete MethodInvocation(366)", "Delete ExpressionStatement(367)", "Delete Block(368)", "Delete SimpleName: AtomicLong(369)", "Delete SimpleType: AtomicLong(370)", "Delete SimpleName: delta(371)", "Delete SimpleName: AtomicLong(372)", "Delete SimpleType: AtomicLong(373)", "Delete SimpleName: amount(374)", "Delete ClassInstanceCreation(375)", "Delete VariableDeclarationFragment(376)", "Delete VariableDeclarationStatement(377)", "Delete Block(403)", "Delete IfStatement(404)", "Delete Block(405)", "Delete MethodDeclaration(406)", "Delete Modifier: static(467)", "Delete SimpleName: MapEntryValueComparator(468)", "Delete SimpleName: Comparator(469)", "Delete SimpleType: Comparator(470)", "Delete QualifiedName: Map.Entry(471)", "Delete SimpleType: Map.Entry(472)", "Delete SimpleName: Long(473)", "Delete SimpleType: Long(474)", "Delete SimpleName: AtomicLong(475)", "Delete SimpleType: AtomicLong(476)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(477)", "Delete ParameterizedType: Comparator<Map.Entry<Long,AtomicLong>>(478)", "Delete SimpleName: Serializable(479)", "Delete SimpleType: Serializable(480)", "Delete TypeDeclaration: class(538)", "Delete Modifier: private(539)", "Delete QualifiedName: Map.Entry(540)", "Delete SimpleType: Map.Entry(541)", "Delete SimpleName: Long(542)", "Delete SimpleType: Long(543)", "Delete SimpleName: AtomicLong(544)", "Delete SimpleType: AtomicLong(545)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(546)", "Delete SimpleName: getMaxBucket(547)", "Delete SimpleName: Set(548)", "Delete SimpleType: Set(549)", "Delete QualifiedName: Map.Entry(550)", "Delete SimpleType: Map.Entry(551)", "Delete SimpleName: Long(552)", "Delete SimpleType: Long(553)", "Delete SimpleName: AtomicLong(554)", "Delete SimpleType: AtomicLong(555)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(556)", "Delete ParameterizedType: Set<Map.Entry<Long,AtomicLong>>(557)", "Delete SimpleName: entrySet(558)", "Delete SimpleName: buckets(559)", "Delete SimpleName: get(560)", "Delete MethodInvocation(561)", "Delete SimpleName: entrySet(562)", "Delete MethodInvocation(563)", "Delete VariableDeclarationFragment(564)", "Delete VariableDeclarationStatement(565)", "Delete SimpleName: entrySet(566)", "Delete SimpleName: isEmpty(567)", "Delete MethodInvocation(568)", "Delete NullLiteral(569)", "Delete ReturnStatement(570)", "Delete Block(571)", "Delete IfStatement(572)", "Delete SimpleName: Comparator(573)", "Delete SimpleType: Comparator(574)", "Delete QualifiedName: Map.Entry(575)", "Delete SimpleType: Map.Entry(576)", "Delete SimpleName: Long(577)", "Delete SimpleType: Long(578)", "Delete SimpleName: AtomicLong(579)", "Delete SimpleType: AtomicLong(580)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(581)", "Delete ParameterizedType: Comparator<Map.Entry<Long,AtomicLong>>(582)", "Delete SimpleName: cmp(583)", "Delete SimpleName: MapEntryValueComparator(584)", "Delete SimpleType: MapEntryValueComparator(585)", "Delete ClassInstanceCreation(586)", "Delete VariableDeclarationFragment(587)", "Delete VariableDeclarationStatement(588)", "Delete QualifiedName: Map.Entry(589)", "Delete SimpleType: Map.Entry(590)", "Delete SimpleName: Long(591)", "Delete SimpleType: Long(592)", "Delete SimpleName: AtomicLong(593)", "Delete SimpleType: AtomicLong(594)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(595)", "Delete SimpleName: max(596)", "Delete SimpleName: Collections(597)", "Delete SimpleName: max(598)", "Delete SimpleName: entrySet(599)", "Delete SimpleName: cmp(600)", "Delete MethodInvocation(601)", "Delete VariableDeclarationFragment(602)", "Delete VariableDeclarationStatement(603)", "Delete Block(606)", "Delete MethodDeclaration(607)", "Delete SimpleName: Long(608)", "Delete SimpleType: Long(609)", "Delete SimpleName: getMaxBucketKey(610)", "Delete SimpleName: getMaxBucket(611)", "Delete MethodInvocation(612)", "Delete SimpleName: getKey(613)", "Delete MethodInvocation(614)", "Delete ReturnStatement(615)", "Delete Block(616)", "Delete MethodDeclaration(617)", "Delete PrimitiveType: long(618)", "Delete SimpleName: getMaxValue(619)", "Delete QualifiedName: Map.Entry(620)", "Delete SimpleType: Map.Entry(621)", "Delete SimpleName: Long(622)", "Delete SimpleType: Long(623)", "Delete SimpleName: AtomicLong(624)", "Delete SimpleType: AtomicLong(625)", "Delete ParameterizedType: Map.Entry<Long,AtomicLong>(626)", "Delete SimpleName: bucket(627)", "Delete SimpleName: getMaxBucket(628)", "Delete MethodInvocation(629)", "Delete VariableDeclarationFragment(630)", "Delete VariableDeclarationStatement(631)", "Delete SimpleName: bucket(632)", "Delete NullLiteral(633)", "Delete InfixExpression: ==(634)", "Delete NumberLiteral: 0(635)", "Delete SimpleName: getMaxBucket(636)", "Delete MethodInvocation(637)", "Delete SimpleName: getValue(638)", "Delete MethodInvocation(639)", "Delete SimpleName: get(640)", "Delete MethodInvocation(641)", "Delete ConditionalExpression(642)", "Delete ParenthesizedExpression(643)", "Delete ReturnStatement(644)", "Delete Block(645)", "Delete MethodDeclaration(646)", "Delete SimpleName: AtomicLong(647)", "Delete SimpleType: AtomicLong(648)", "Delete SimpleName: getBucketValue(649)", "Delete SimpleName: Long(650)", "Delete SimpleType: Long(651)", "Delete SimpleName: key(652)", "Delete SingleVariableDeclaration(653)", "Delete SimpleName: buckets(654)", "Delete SimpleName: get(655)", "Delete MethodInvocation(656)", "Delete SimpleName: get(657)", "Delete SimpleName: key(658)", "Delete MethodInvocation(659)", "Delete ReturnStatement(660)", "Delete Block(661)", "Delete MethodDeclaration(662)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}