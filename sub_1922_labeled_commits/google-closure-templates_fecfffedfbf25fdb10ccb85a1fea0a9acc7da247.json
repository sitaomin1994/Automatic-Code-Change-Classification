{"application": "google-closure-templates", "csha": "fecfffedfbf25fdb10ccb85a1fea0a9acc7da247", "files": [{"ParseErrors_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.exprparse", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.base.internal.BaseUtils.formatParseExceptionDetails", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.base.SourceLocation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.ErrorReporter", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.error.SoyErrorKind"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.SoyErrorKind.StyleAllowance", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: SourceLocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SwitchCase", "DEL SimpleName: String", "DEL QualifiedName: ExpressionParserConstants.DOLLAR_IDENT", "DEL SimpleName: reporter", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: reporter", "DEL SimpleName: reporter", "DEL Modifier: private", "DEL SimpleName: ErrorReporter", "DEL ExpressionStatement", "DEL QualifiedName: V1ExpressionErrors.LEGACY_AND_ERROR", "DEL SwitchCase", "DEL StringLiteral: \"eof\"", "DEL QualifiedName: ExpressionParserConstants.FLOAT", "DEL MethodInvocation", "DEL SimpleName: parentSourceLocation", "DEL QualifiedName: errorToken.image", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: AssertionError", "DEL SimpleName: getSoyFileParserTokenDisplayName", "DEL TextElement: Helpers for interpreting parse errors as soy errors. ", "DEL BreakStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL TextElement: Returns a human friendly display name for tokens. By default we use the generated token image", "DEL SimpleType: ParseException", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: reportExprParseException", "DEL SimpleName: errorLocation", "DEL SimpleName: errorLocation", "DEL SimpleName: errorToken", "DEL SimpleName: ParseException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SwitchCase", "DEL SwitchStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: report", "DEL SimpleName: ParseErrors", "DEL MethodInvocation", "DEL ArrayAccess", "DEL SimpleName: tokenId", "DEL SimpleName: report", "DEL MethodInvocation", "DEL SimpleName: tokenId", "DEL QualifiedName: ExpressionParserConstants.LEGACY_AND", "DEL SwitchStatement", "DEL SimpleName: StyleAllowance", "DEL SwitchCase", "DEL SimpleName: build", "DEL SwitchCase", "DEL SimpleType: AssertionError", "DEL QualifiedName: ExpressionParserConstants.LEGACY_NOT", "DEL SimpleName: ImmutableSet", "DEL StringLiteral: \"we should never expect the unexpected token\"", "DEL SimpleName: expected", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL QualifiedName: ExpressionParserConstants.STRING", "DEL QualifiedName: ImmutableSet.Builder", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: reporter", "DEL SingleVariableDeclaration", "DEL SimpleName: expectedTokenImages", "DEL Block", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL QualifiedName: ExpressionParserConstants.UNEXPECTED_TOKEN", "DEL ReturnStatement", "DEL Modifier: static", "DEL SimpleName: report", "DEL SimpleName: String", "DEL SwitchCase", "DEL Javadoc", "DEL SwitchCase", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: tokenId", "DEL SwitchCase", "DEL SimpleName: reporter", "DEL QualifiedName: V1ExpressionErrors.LEGACY_NOT_ERROR", "DEL SimpleName: errorToken", "DEL QualifiedName: e.expectedTokenSequences", "DEL ArrayType: int[]", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL StringLiteral: \"{0}\"", "DEL SimpleName: reporter", "DEL SimpleName: createSrcLoc", "DEL ReturnStatement", "DEL QualifiedName: ExpressionParserConstants.LEGACY_OR", "DEL ArrayAccess", "DEL SimpleName: SourceLocation", "DEL StringLiteral: \"variable\"", "DEL SimpleName: parentSourceLocation", "DEL SimpleName: asList", "DEL SimpleName: report", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: expectedTokenImages", "DEL SimpleName: errorLocation", "DEL SimpleName: of", "DEL SimpleName: report", "DEL SimpleName: SoyErrorKind", "DEL SimpleName: formatParseExceptionDetails", "DEL SimpleName: builder", "DEL QualifiedName: V1ExpressionErrors.LEGACY_DOUBLE_QUOTED_STRING", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL SwitchCase", "DEL QualifiedName: e.currentToken", "DEL Block", "DEL Modifier: private", "DEL SwitchCase", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: ParseErrors", "DEL QualifiedName: ExpressionParserConstants.IDENT", "DEL Block", "DEL ReturnStatement", "DEL QualifiedName: V1ExpressionErrors.LEGACY_OR_ERROR", "DEL StringLiteral: \"an identifier\"", "DEL SimpleName: errorLocation", "DEL SimpleName: values", "DEL SwitchCase", "DEL SimpleName: errorToken", "DEL QualifiedName: ExpressionParserConstants.tokenImage", "DEL TextElement: which is appropriate for literal tokens.", "DEL NumberLiteral: 0", "DEL SimpleType: Token", "DEL ExpressionStatement", "DEL SimpleName: Token", "DEL Modifier: static", "DEL SimpleType: String", "DEL SimpleType: ImmutableSet.Builder", "DEL SimpleName: errorLocation", "DEL MethodDeclaration", "DEL SimpleName: getSoyFileParserTokenDisplayName", "DEL SimpleName: errorLocation", "DEL SimpleType: ErrorReporter", "DEL StringLiteral: \"number\"", "DEL SimpleType: SourceLocation", "DEL TagElement", "DEL Dimension", "DEL QualifiedName: errorToken.next", "DEL SimpleName: SourceLocation", "DEL MethodInvocation", "DEL Javadoc", "DEL QualifiedName: errorToken.kind", "DEL SwitchCase", "DEL Assignment: =", "DEL QualifiedName: ExpressionParserConstants.DEC_INTEGER", "DEL ExpressionStatement", "DEL QualifiedName: ExpressionParserConstants.EOF", "DEL TypeDeclaration: class", "DEL SimpleName: e", "DEL QualifiedName: errorToken.next", "DEL ReturnStatement", "DEL SimpleName: expected", "DEL SimpleName: Tokens", "DEL ThrowStatement", "DEL QualifiedName: ExpressionParserConstants.HEX_INTEGER", "DEL StringLiteral: \"string\"", "DEL MethodInvocation", "DEL SimpleName: expectedTokenImages", "DEL Block", "DEL EnhancedForStatement", "DEL SingleVariableDeclaration", "DEL QualifiedName: ExpressionParserConstants.DOUBLE_QUOTE", "DEL ParameterizedType: ImmutableSet.Builder<String>"]}]}}, {"ParseErrors_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.exprparse(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.template.soy.base.internal.BaseUtils.formatParseExceptionDetails(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.collect.ImmutableSet(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.template.soy.base.SourceLocation(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.template.soy.error.ErrorReporter(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind.StyleAllowance(12)", "Delete ImportDeclaration(13)", "Delete TextElement: Helpers for interpreting parse errors as soy errors. (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: final(17)", "Delete SimpleName: ParseErrors(18)", "Delete Modifier: private(19)", "Delete SimpleName: ParseErrors(20)", "Delete Block(21)", "Delete MethodDeclaration(22)", "Delete Modifier: static(23)", "Delete PrimitiveType: void(24)", "Delete SimpleName: reportExprParseException(25)", "Delete SimpleName: ErrorReporter(26)", "Delete SimpleType: ErrorReporter(27)", "Delete SimpleName: reporter(28)", "Delete SingleVariableDeclaration(29)", "Delete SimpleName: SourceLocation(30)", "Delete SimpleType: SourceLocation(31)", "Delete SimpleName: parentSourceLocation(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: ParseException(34)", "Delete SimpleType: ParseException(35)", "Delete SimpleName: e(36)", "Delete SingleVariableDeclaration(37)", "Delete SimpleName: Token(38)", "Delete SimpleType: Token(39)", "Delete SimpleName: errorToken(40)", "Delete QualifiedName: e.currentToken(41)", "Delete VariableDeclarationFragment(42)", "Delete VariableDeclarationStatement(43)", "Delete QualifiedName: errorToken.next(44)", "Delete NullLiteral(45)", "Delete InfixExpression: !=(46)", "Delete SimpleName: errorToken(47)", "Delete QualifiedName: errorToken.next(48)", "Delete Assignment: =(49)", "Delete ExpressionStatement(50)", "Delete Block(51)", "Delete IfStatement(52)", "Delete SimpleName: SourceLocation(53)", "Delete SimpleType: SourceLocation(54)", "Delete SimpleName: errorLocation(55)", "Delete SimpleName: Tokens(56)", "Delete SimpleName: createSrcLoc(57)", "Delete SimpleName: parentSourceLocation(58)", "Delete SimpleName: errorToken(59)", "Delete MethodInvocation(60)", "Delete VariableDeclarationFragment(61)", "Delete VariableDeclarationStatement(62)", "Delete QualifiedName: errorToken.kind(63)", "Delete QualifiedName: ExpressionParserConstants.LEGACY_AND(64)", "Delete SwitchCase(65)", "Delete SimpleName: reporter(66)", "Delete SimpleName: report(67)", "Delete SimpleName: errorLocation(68)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_AND_ERROR(69)", "Delete MethodInvocation(70)", "Delete ExpressionStatement(71)", "Delete ReturnStatement(72)", "Delete QualifiedName: ExpressionParserConstants.LEGACY_OR(73)", "Delete SwitchCase(74)", "Delete SimpleName: reporter(75)", "Delete SimpleName: report(76)", "Delete SimpleName: errorLocation(77)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_OR_ERROR(78)", "Delete MethodInvocation(79)", "Delete ExpressionStatement(80)", "Delete ReturnStatement(81)", "Delete QualifiedName: ExpressionParserConstants.LEGACY_NOT(82)", "Delete SwitchCase(83)", "Delete SimpleName: reporter(84)", "Delete SimpleName: report(85)", "Delete SimpleName: errorLocation(86)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_NOT_ERROR(87)", "Delete MethodInvocation(88)", "Delete ExpressionStatement(89)", "Delete ReturnStatement(90)", "Delete QualifiedName: ExpressionParserConstants.DOUBLE_QUOTE(91)", "Delete SwitchCase(92)", "Delete SimpleName: reporter(93)", "Delete SimpleName: report(94)", "Delete SimpleName: errorLocation(95)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_DOUBLE_QUOTED_STRING(96)", "Delete MethodInvocation(97)", "Delete ExpressionStatement(98)", "Delete ReturnStatement(99)", "Delete SwitchCase(100)", "Delete BreakStatement(101)", "Delete SwitchStatement(102)", "Delete QualifiedName: ImmutableSet.Builder(103)", "Delete SimpleType: ImmutableSet.Builder(104)", "Delete SimpleName: String(105)", "Delete SimpleType: String(106)", "Delete ParameterizedType: ImmutableSet.Builder<String>(107)", "Delete SimpleName: expectedTokenImages(108)", "Delete SimpleName: ImmutableSet(109)", "Delete SimpleName: builder(110)", "Delete MethodInvocation(111)", "Delete VariableDeclarationFragment(112)", "Delete VariableDeclarationStatement(113)", "Delete PrimitiveType: int(114)", "Delete Dimension(115)", "Delete ArrayType: int[](116)", "Delete SimpleName: expected(117)", "Delete SingleVariableDeclaration(118)", "Delete QualifiedName: e.expectedTokenSequences(119)", "Delete SimpleName: expectedTokenImages(120)", "Delete SimpleName: add(121)", "Delete SimpleName: getSoyFileParserTokenDisplayName(122)", "Delete SimpleName: expected(123)", "Delete NumberLiteral: 0(124)", "Delete ArrayAccess(125)", "Delete MethodInvocation(126)", "Delete MethodInvocation(127)", "Delete ExpressionStatement(128)", "Delete Block(129)", "Delete EnhancedForStatement(130)", "Delete SimpleName: reporter(131)", "Delete SimpleName: report(132)", "Delete SimpleName: errorLocation(133)", "Delete SimpleName: SoyErrorKind(134)", "Delete SimpleName: of(135)", "Delete StringLiteral: \"{0}\"(136)", "Delete SimpleName: StyleAllowance(137)", "Delete SimpleName: values(138)", "Delete MethodInvocation(139)", "Delete MethodInvocation(140)", "Delete SimpleName: formatParseExceptionDetails(141)", "Delete QualifiedName: errorToken.image(142)", "Delete SimpleName: expectedTokenImages(143)", "Delete SimpleName: build(144)", "Delete MethodInvocation(145)", "Delete SimpleName: asList(146)", "Delete MethodInvocation(147)", "Delete MethodInvocation(148)", "Delete MethodInvocation(149)", "Delete ExpressionStatement(150)", "Delete Block(151)", "Delete MethodDeclaration(152)", "Delete TextElement: Returns a human friendly display name for tokens. By default we use the generated token image(153)", "Delete TextElement: which is appropriate for literal tokens.(154)", "Delete TagElement(155)", "Delete Javadoc(156)", "Delete Modifier: private(157)", "Delete Modifier: static(158)", "Delete SimpleName: String(159)", "Delete SimpleType: String(160)", "Delete SimpleName: getSoyFileParserTokenDisplayName(161)", "Delete PrimitiveType: int(162)", "Delete SimpleName: tokenId(163)", "Delete SingleVariableDeclaration(164)", "Delete SimpleName: tokenId(165)", "Delete QualifiedName: ExpressionParserConstants.EOF(166)", "Delete SwitchCase(167)", "Delete StringLiteral: \"eof\"(168)", "Delete ReturnStatement(169)", "Delete QualifiedName: ExpressionParserConstants.HEX_INTEGER(170)", "Delete SwitchCase(171)", "Delete QualifiedName: ExpressionParserConstants.DEC_INTEGER(172)", "Delete SwitchCase(173)", "Delete QualifiedName: ExpressionParserConstants.FLOAT(174)", "Delete SwitchCase(175)", "Delete StringLiteral: \"number\"(176)", "Delete ReturnStatement(177)", "Delete QualifiedName: ExpressionParserConstants.STRING(178)", "Delete SwitchCase(179)", "Delete StringLiteral: \"string\"(180)", "Delete ReturnStatement(181)", "Delete QualifiedName: ExpressionParserConstants.IDENT(182)", "Delete SwitchCase(183)", "Delete StringLiteral: \"an identifier\"(184)", "Delete ReturnStatement(185)", "Delete QualifiedName: ExpressionParserConstants.DOLLAR_IDENT(186)", "Delete SwitchCase(187)", "Delete StringLiteral: \"variable\"(188)", "Delete ReturnStatement(189)", "Delete QualifiedName: ExpressionParserConstants.UNEXPECTED_TOKEN(190)", "Delete SwitchCase(191)", "Delete SimpleName: AssertionError(192)", "Delete SimpleType: AssertionError(193)", "Delete StringLiteral: \"we should never expect the unexpected token\"(194)", "Delete ClassInstanceCreation(195)", "Delete ThrowStatement(196)", "Delete SwitchCase(197)", "Delete QualifiedName: ExpressionParserConstants.tokenImage(198)", "Delete SimpleName: tokenId(199)", "Delete ArrayAccess(200)", "Delete ReturnStatement(201)", "Delete SwitchStatement(202)", "Delete Block(203)", "Delete MethodDeclaration(204)", "Delete TypeDeclaration: class(205)"]}}, {"SoyParsingContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.exprparse", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.auto.value.AutoValue"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.base.SourceLocation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.error.ErrorReporter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.ExplodingErrorReporter", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.error.SoyErrorKind"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: aliasToNamespaceMap", "DEL MethodInvocation", "DEL TagElement: @code", "DEL SimpleType: ErrorReporter", "DEL TagElement: @code", "DEL SimpleType: SoyParsingContext", "DEL SimpleName: errorReporter", "DEL ParameterizedType: ImmutableMap<String,String>", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL SimpleType: SoyParsingContext", "DEL SimpleName: sourceLocation", "DEL MethodDeclaration", "DEL SimpleName: sourceName", "DEL MethodInvocation", "DEL TagElement", "DEL TextElement: Dealiases a name in the scope of this context (if it matches an alias). ", "DEL SimpleType: String", "DEL SimpleName: errorReporter", "DEL SimpleName: namespace", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleName: errorReporter", "DEL Javadoc", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TextElement:  and associated with the", "DEL ConditionalExpression", "DEL SimpleName: error", "DEL ReturnStatement", "DEL SimpleName: report", "DEL SimpleName: error", "DEL SimpleName: aliasToNamespaceMap", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: abstract", "DEL SimpleType: ErrorReporter", "DEL MethodInvocation", "DEL SimpleName: namespace", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: SoyParsingContext", "DEL Modifier: static", "DEL SimpleName: report", "DEL Modifier: public", "DEL SimpleType: SoyParsingContext", "DEL Block", "DEL Modifier: public", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: ErrorReporter", "DEL SimpleName: String", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Modifier: abstract", "DEL SimpleName: SoyParsingContext", "DEL SimpleType: String", "DEL TextElement: Creates a context with an exploding error reporter and no contextual data. Use this method for", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: ExplodingErrorReporter", "DEL SimpleName: alias", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: AutoValue", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: namespace", "DEL Javadoc", "DEL SimpleName: create", "DEL SimpleName: get", "DEL Modifier: abstract", "DEL MethodDeclaration", "DEL Block", "DEL TagElement", "DEL SimpleName: String", "DEL SimpleName: namespace", "DEL TextElement: non-file contexts such as error objects.", "DEL SimpleName: ImmutableMap", "DEL MarkerAnnotation", "DEL SimpleName: args", "DEL SimpleName: errorReporter", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: aliasToNamespaceMap", "DEL SimpleType: SoyParsingContext", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: errorReporter", "DEL MethodInvocation", "DEL TextElement: Holds information and services needed for parsing templates and expressions.", "DEL TextElement: given ", "DEL ClassInstanceCreation", "DEL SimpleName: create", "DEL SimpleName: empty", "DEL SingleVariableDeclaration", "DEL SimpleName: ImmutableMap", "DEL SimpleName: sourceName", "DEL SimpleType: SoyErrorKind", "DEL TextElement: The full namespace of the file being parsed. ", "DEL SimpleName: AutoValue_SoyParsingContext", "DEL TextElement: The alias declarations in the file, if any. ", "DEL SimpleType: ImmutableMap", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL TextElement: <p>Important: Do not use outside of Soy code (treat as superpackage-private).", "DEL SimpleName: exploding", "DEL SimpleName: errorReporter", "DEL TagElement", "DEL SimpleType: Object", "DEL TextElement:  args", "DEL SimpleType: AutoValue_SoyParsingContext", "DEL MethodDeclaration", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: ErrorReporter", "DEL Javadoc", "DEL SimpleName: SoyParsingContext", "DEL SimpleType: ErrorReporter", "DEL TextElement: . Convencience wrapper for errorReporter.", "DEL SimpleName: aliasToNamespaceMap", "DEL StringLiteral: \"fake.namespace\"", "DEL SimpleName: namespace", "DEL Modifier: public", "DEL Modifier: abstract", "DEL SimpleType: String", "DEL TextElement: that", "DEL Modifier: public", "DEL TagElement: @code", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: SoyErrorKind", "DEL Modifier: public", "DEL SimpleName: alias", "DEL TextElement:  error", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: String", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL TextElement:  sourceLocation", "DEL Javadoc", "DEL SimpleName: aliasToNamespaceMap", "DEL TextElement: Reports the given ", "DEL SimpleName: namespace", "DEL TagElement", "DEL TextElement: <p>Do not store this class beyond the lifetime of the parse; ErrorReporter is not reusable like", "DEL SimpleName: errorReporter", "DEL TagElement", "DEL SimpleName: SourceLocation", "DEL SimpleName: errorReporter", "DEL SimpleName: ErrorReporter", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL SimpleName: resolveAlias", "DEL SimpleType: String", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleName: create", "DEL SimpleType: String", "DEL TextElement: , formatted according to ", "DEL SimpleName: ErrorReporter", "DEL NullLiteral", "DEL SimpleName: empty", "DEL Block", "DEL ParameterizedType: ImmutableMap<String,String>", "DEL Block", "DEL SimpleName: of", "DEL Modifier: static", "DEL SimpleName: get", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: SoyParsingContext", "DEL SimpleName: withErrorReporter", "DEL SimpleName: sourceName", "DEL Modifier: static", "DEL Modifier: public", "DEL MethodDeclaration", "DEL Block", "DEL SimpleType: SourceLocation", "DEL SimpleType: ImmutableMap", "DEL SimpleName: ImmutableMap", "DEL SimpleName: sourceLocation", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL SimpleType: ErrorReporter", "DEL SingleVariableDeclaration", "DEL SimpleName: SoyParsingContext", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: alias", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: String"]}]}}, {"SoyParsingContext_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.exprparse(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.auto.value.AutoValue(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.collect.ImmutableMap(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.template.soy.base.SourceLocation(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.template.soy.error.ErrorReporter(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.template.soy.error.ExplodingErrorReporter(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind(12)", "Delete ImportDeclaration(13)", "Delete TextElement: Holds information and services needed for parsing templates and expressions.(14)", "Delete TextElement: <p>Do not store this class beyond the lifetime of the parse; ErrorReporter is not reusable like(15)", "Delete TextElement: that(16)", "Delete TextElement: <p>Important: Do not use outside of Soy code (treat as superpackage-private).(17)", "Delete TagElement(18)", "Delete Javadoc(19)", "Delete SimpleName: AutoValue(20)", "Delete MarkerAnnotation(21)", "Delete Modifier: public(22)", "Delete Modifier: abstract(23)", "Delete SimpleName: SoyParsingContext(24)", "Delete Modifier: public(25)", "Delete Modifier: static(26)", "Delete SimpleName: SoyParsingContext(27)", "Delete SimpleType: SoyParsingContext(28)", "Delete SimpleName: create(29)", "Delete SimpleName: ErrorReporter(30)", "Delete SimpleType: ErrorReporter(31)", "Delete SimpleName: errorReporter(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: String(34)", "Delete SimpleType: String(35)", "Delete SimpleName: namespace(36)", "Delete SingleVariableDeclaration(37)", "Delete SimpleName: ImmutableMap(38)", "Delete SimpleType: ImmutableMap(39)", "Delete SimpleName: String(40)", "Delete SimpleType: String(41)", "Delete SimpleName: String(42)", "Delete SimpleType: String(43)", "Delete ParameterizedType: ImmutableMap<String,String>(44)", "Delete SimpleName: aliasToNamespaceMap(45)", "Delete SingleVariableDeclaration(46)", "Delete SimpleName: AutoValue_SoyParsingContext(47)", "Delete SimpleType: AutoValue_SoyParsingContext(48)", "Delete SimpleName: errorReporter(49)", "Delete SimpleName: namespace(50)", "Delete SimpleName: aliasToNamespaceMap(51)", "Delete ClassInstanceCreation(52)", "Delete ReturnStatement(53)", "Delete Block(54)", "Delete MethodDeclaration(55)", "Delete Modifier: public(56)", "Delete Modifier: static(57)", "Delete SimpleName: SoyParsingContext(58)", "Delete SimpleType: SoyParsingContext(59)", "Delete SimpleName: empty(60)", "Delete SimpleName: ErrorReporter(61)", "Delete SimpleType: ErrorReporter(62)", "Delete SimpleName: errorReporter(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: String(65)", "Delete SimpleType: String(66)", "Delete SimpleName: namespace(67)", "Delete SingleVariableDeclaration(68)", "Delete SimpleName: create(69)", "Delete SimpleName: errorReporter(70)", "Delete SimpleName: namespace(71)", "Delete SimpleName: ImmutableMap(72)", "Delete SimpleName: String(73)", "Delete SimpleType: String(74)", "Delete SimpleName: String(75)", "Delete SimpleType: String(76)", "Delete SimpleName: of(77)", "Delete MethodInvocation(78)", "Delete MethodInvocation(79)", "Delete ReturnStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete TextElement: Creates a context with an exploding error reporter and no contextual data. Use this method for(83)", "Delete TextElement: non-file contexts such as error objects.(84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete Modifier: public(87)", "Delete Modifier: static(88)", "Delete SimpleName: SoyParsingContext(89)", "Delete SimpleType: SoyParsingContext(90)", "Delete SimpleName: exploding(91)", "Delete SimpleName: empty(92)", "Delete SimpleName: ExplodingErrorReporter(93)", "Delete SimpleName: get(94)", "Delete MethodInvocation(95)", "Delete StringLiteral: \"fake.namespace\"(96)", "Delete MethodInvocation(97)", "Delete ReturnStatement(98)", "Delete Block(99)", "Delete MethodDeclaration(100)", "Delete Modifier: public(101)", "Delete Modifier: abstract(102)", "Delete SimpleName: ErrorReporter(103)", "Delete SimpleType: ErrorReporter(104)", "Delete SimpleName: errorReporter(105)", "Delete MethodDeclaration(106)", "Delete TextElement: The full namespace of the file being parsed. (107)", "Delete TagElement(108)", "Delete Javadoc(109)", "Delete Modifier: public(110)", "Delete Modifier: abstract(111)", "Delete SimpleName: String(112)", "Delete SimpleType: String(113)", "Delete SimpleName: namespace(114)", "Delete MethodDeclaration(115)", "Delete TextElement: The alias declarations in the file, if any. (116)", "Delete TagElement(117)", "Delete Javadoc(118)", "Delete Modifier: abstract(119)", "Delete SimpleName: ImmutableMap(120)", "Delete SimpleType: ImmutableMap(121)", "Delete SimpleName: String(122)", "Delete SimpleType: String(123)", "Delete SimpleName: String(124)", "Delete SimpleType: String(125)", "Delete ParameterizedType: ImmutableMap<String,String>(126)", "Delete SimpleName: aliasToNamespaceMap(127)", "Delete MethodDeclaration(128)", "Delete TextElement: Dealiases a name in the scope of this context (if it matches an alias). (129)", "Delete TagElement(130)", "Delete Javadoc(131)", "Delete Modifier: public(132)", "Delete SimpleName: String(133)", "Delete SimpleType: String(134)", "Delete SimpleName: resolveAlias(135)", "Delete SimpleName: String(136)", "Delete SimpleType: String(137)", "Delete SimpleName: sourceName(138)", "Delete SingleVariableDeclaration(139)", "Delete SimpleName: String(140)", "Delete SimpleType: String(141)", "Delete SimpleName: alias(142)", "Delete SimpleName: aliasToNamespaceMap(143)", "Delete MethodInvocation(144)", "Delete SimpleName: get(145)", "Delete SimpleName: sourceName(146)", "Delete MethodInvocation(147)", "Delete VariableDeclarationFragment(148)", "Delete VariableDeclarationStatement(149)", "Delete SimpleName: alias(150)", "Delete NullLiteral(151)", "Delete InfixExpression: !=(152)", "Delete SimpleName: alias(153)", "Delete SimpleName: sourceName(154)", "Delete ConditionalExpression(155)", "Delete ReturnStatement(156)", "Delete Block(157)", "Delete MethodDeclaration(158)", "Delete TextElement: Reports the given (159)", "Delete TextElement:  error(160)", "Delete TagElement: @code(161)", "Delete TextElement: , formatted according to (162)", "Delete TextElement:  args(163)", "Delete TagElement: @code(164)", "Delete TextElement:  and associated with the(165)", "Delete TextElement: given (166)", "Delete TextElement:  sourceLocation(167)", "Delete TagElement: @code(168)", "Delete TextElement: . Convencience wrapper for errorReporter.(169)", "Delete TagElement(170)", "Delete Javadoc(171)", "Delete Modifier: public(172)", "Delete PrimitiveType: void(173)", "Delete SimpleName: report(174)", "Delete SimpleName: SourceLocation(175)", "Delete SimpleType: SourceLocation(176)", "Delete SimpleName: sourceLocation(177)", "Delete SingleVariableDeclaration(178)", "Delete SimpleName: SoyErrorKind(179)", "Delete SimpleType: SoyErrorKind(180)", "Delete SimpleName: error(181)", "Delete SingleVariableDeclaration(182)", "Delete SimpleName: Object(183)", "Delete SimpleType: Object(184)", "Delete SimpleName: args(185)", "Delete SingleVariableDeclaration(186)", "Delete SimpleName: errorReporter(187)", "Delete MethodInvocation(188)", "Delete SimpleName: report(189)", "Delete SimpleName: sourceLocation(190)", "Delete SimpleName: error(191)", "Delete SimpleName: args(192)", "Delete MethodInvocation(193)", "Delete ExpressionStatement(194)", "Delete Block(195)", "Delete MethodDeclaration(196)", "Delete Modifier: public(197)", "Delete SimpleName: SoyParsingContext(198)", "Delete SimpleType: SoyParsingContext(199)", "Delete SimpleName: withErrorReporter(200)", "Delete SimpleName: ErrorReporter(201)", "Delete SimpleType: ErrorReporter(202)", "Delete SimpleName: errorReporter(203)", "Delete SingleVariableDeclaration(204)", "Delete SimpleName: create(205)", "Delete SimpleName: errorReporter(206)", "Delete SimpleName: namespace(207)", "Delete MethodInvocation(208)", "Delete SimpleName: aliasToNamespaceMap(209)", "Delete MethodInvocation(210)", "Delete MethodInvocation(211)", "Delete ReturnStatement(212)", "Delete Block(213)", "Delete MethodDeclaration(214)", "Delete TypeDeclaration: class(215)"]}}, {"Tokens_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.template.soy.exprparse"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.base.SourceLocation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: SourceLocation", "DEL SimpleName: Math", "DEL SimpleName: getBeginLine", "DEL SimpleName: parentSourceLocation", "DEL SimpleName: createSrcLoc", "DEL SimpleName: max", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: max", "DEL SimpleName: getBeginColumn", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleType: SourceLocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: SourceLocation", "DEL Modifier: static", "DEL SimpleName: Token", "DEL InfixExpression: +", "DEL SimpleName: parentSourceLocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: token", "DEL SimpleName: parentSourceLocation", "DEL NumberLiteral: 1", "DEL SimpleName: Tokens", "DEL SimpleType: SourceLocation", "DEL TextElement: Helper for manipulating tokens ", "DEL MethodDeclaration", "DEL TextElement: Creates a new source location based on the parent source location and a given token. ", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: getFilePath", "DEL QualifiedName: token.beginColumn", "DEL MethodDeclaration", "DEL QualifiedName: token.endColumn", "DEL Modifier: final", "DEL SimpleName: getBeginColumn", "DEL SimpleName: parentSourceLocation", "DEL SimpleName: Math", "DEL SimpleName: max", "DEL Javadoc", "DEL SimpleName: parentSourceLocation", "DEL SimpleName: max", "DEL SimpleName: parentSourceLocation", "DEL TagElement", "DEL SimpleName: SourceLocation", "DEL SimpleName: Tokens", "DEL SimpleType: Token", "DEL SimpleName: getBeginLine", "DEL SimpleName: SourceLocation", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: Math", "DEL NumberLiteral: 1", "DEL Modifier: private", "DEL SimpleName: Math", "DEL TagElement", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration"]}]}}, {"Tokens_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.exprparse(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.template.soy.base.SourceLocation(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Helper for manipulating tokens (4)", "Delete TagElement(5)", "Delete Javadoc(6)", "Delete Modifier: final(7)", "Delete SimpleName: Tokens(8)", "Delete TextElement: Creates a new source location based on the parent source location and a given token. (9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete Modifier: static(12)", "Delete SimpleName: SourceLocation(13)", "Delete SimpleType: SourceLocation(14)", "Delete SimpleName: createSrcLoc(15)", "Delete SimpleName: SourceLocation(16)", "Delete SimpleType: SourceLocation(17)", "Delete SimpleName: parentSourceLocation(18)", "Delete SingleVariableDeclaration(19)", "Delete SimpleName: Token(20)", "Delete SimpleType: Token(21)", "Delete SimpleName: token(22)", "Delete SingleVariableDeclaration(23)", "Delete SimpleName: SourceLocation(24)", "Delete SimpleType: SourceLocation(25)", "Delete SimpleName: parentSourceLocation(26)", "Delete SimpleName: getFilePath(27)", "Delete MethodInvocation(28)", "Delete SimpleName: Math(29)", "Delete SimpleName: max(30)", "Delete NumberLiteral: 1(31)", "Delete SimpleName: parentSourceLocation(32)", "Delete SimpleName: getBeginLine(33)", "Delete MethodInvocation(34)", "Delete MethodInvocation(35)", "Delete SimpleName: Math(36)", "Delete SimpleName: max(37)", "Delete NumberLiteral: 1(38)", "Delete SimpleName: parentSourceLocation(39)", "Delete SimpleName: getBeginColumn(40)", "Delete MethodInvocation(41)", "Delete QualifiedName: token.beginColumn(42)", "Delete InfixExpression: +(43)", "Delete MethodInvocation(44)", "Delete SimpleName: Math(45)", "Delete SimpleName: max(46)", "Delete NumberLiteral: 1(47)", "Delete SimpleName: parentSourceLocation(48)", "Delete SimpleName: getBeginLine(49)", "Delete MethodInvocation(50)", "Delete MethodInvocation(51)", "Delete SimpleName: Math(52)", "Delete SimpleName: max(53)", "Delete NumberLiteral: 1(54)", "Delete SimpleName: parentSourceLocation(55)", "Delete SimpleName: getBeginColumn(56)", "Delete MethodInvocation(57)", "Delete QualifiedName: token.endColumn(58)", "Delete InfixExpression: +(59)", "Delete MethodInvocation(60)", "Delete ClassInstanceCreation(61)", "Delete ReturnStatement(62)", "Delete Block(63)", "Delete MethodDeclaration(64)", "Delete Modifier: private(65)", "Delete SimpleName: Tokens(66)", "Delete Block(67)", "Delete MethodDeclaration(68)", "Delete TypeDeclaration: class(69)"]}}, {"V1ExpressionErrors_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.exprparse", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.error.SoyErrorKind"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: LEGACY_AND_ERROR", "DEL SimpleName: LEGACY_DOUBLE_QUOTED_STRING", "DEL Modifier: public", "DEL SimpleType: SoyErrorKind", "DEL SimpleName: SoyErrorKind", "DEL SimpleType: SoyErrorKind", "DEL Modifier: static", "DEL Modifier: final", "DEL SimpleName: SoyErrorKind", "DEL FieldDeclaration", "DEL SimpleName: V1ExpressionErrors", "DEL Modifier: public", "DEL Javadoc", "DEL StringLiteral: \"Found use of ''!'' instead of the ''not'' operator.\"", "DEL Modifier: static", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: SoyErrorKind", "DEL FieldDeclaration", "DEL SimpleName: LEGACY_NOT_ERROR", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: SoyErrorKind", "DEL SimpleName: SoyErrorKind", "DEL FieldDeclaration", "DEL SimpleName: SoyErrorKind", "DEL SimpleType: SoyErrorKind", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: V1ExpressionErrors", "DEL Modifier: final", "DEL SimpleName: SoyErrorKind", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: of", "DEL MethodInvocation", "DEL Modifier: public", "DEL Modifier: static", "DEL SimpleName: LEGACY_OR_ERROR", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"Found use of ''||'' instead of the ''or'' operator.\"", "DEL SimpleName: of", "DEL Modifier: public", "DEL TypeDeclaration: class", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleName: of", "DEL StringLiteral: \"Found use of double quotes, Soy strings use single quotes.\"", "DEL SimpleType: SoyErrorKind", "DEL MethodInvocation", "DEL SimpleName: of", "DEL Modifier: static", "DEL SimpleName: SoyErrorKind", "DEL TagElement", "DEL MethodInvocation", "DEL TextElement: Permanent errors for Soy v1 expressions. ", "DEL StringLiteral: \"Found use of ''&&'' instead of the ''and'' operator.\"", "DEL Modifier: final"]}]}}, {"V1ExpressionErrors_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.exprparse(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Permanent errors for Soy v1 expressions. (4)", "Delete TagElement(5)", "Delete Javadoc(6)", "Delete Modifier: public(7)", "Delete Modifier: final(8)", "Delete SimpleName: V1ExpressionErrors(9)", "Delete Modifier: public(10)", "Delete Modifier: static(11)", "Delete Modifier: final(12)", "Delete SimpleName: SoyErrorKind(13)", "Delete SimpleType: SoyErrorKind(14)", "Delete SimpleName: LEGACY_AND_ERROR(15)", "Delete SimpleName: SoyErrorKind(16)", "Delete SimpleName: of(17)", "Delete StringLiteral: \"Found use of ''&&'' instead of the ''and'' operator.\"(18)", "Delete MethodInvocation(19)", "Delete VariableDeclarationFragment(20)", "Delete FieldDeclaration(21)", "Delete Modifier: public(22)", "Delete Modifier: static(23)", "Delete Modifier: final(24)", "Delete SimpleName: SoyErrorKind(25)", "Delete SimpleType: SoyErrorKind(26)", "Delete SimpleName: LEGACY_OR_ERROR(27)", "Delete SimpleName: SoyErrorKind(28)", "Delete SimpleName: of(29)", "Delete StringLiteral: \"Found use of ''||'' instead of the ''or'' operator.\"(30)", "Delete MethodInvocation(31)", "Delete VariableDeclarationFragment(32)", "Delete FieldDeclaration(33)", "Delete Modifier: public(34)", "Delete Modifier: static(35)", "Delete Modifier: final(36)", "Delete SimpleName: SoyErrorKind(37)", "Delete SimpleType: SoyErrorKind(38)", "Delete SimpleName: LEGACY_NOT_ERROR(39)", "Delete SimpleName: SoyErrorKind(40)", "Delete SimpleName: of(41)", "Delete StringLiteral: \"Found use of ''!'' instead of the ''not'' operator.\"(42)", "Delete MethodInvocation(43)", "Delete VariableDeclarationFragment(44)", "Delete FieldDeclaration(45)", "Delete Modifier: public(46)", "Delete Modifier: static(47)", "Delete Modifier: final(48)", "Delete SimpleName: SoyErrorKind(49)", "Delete SimpleType: SoyErrorKind(50)", "Delete SimpleName: LEGACY_DOUBLE_QUOTED_STRING(51)", "Delete SimpleName: SoyErrorKind(52)", "Delete SimpleName: of(53)", "Delete StringLiteral: \"Found use of double quotes, Soy strings use single quotes.\"(54)", "Delete MethodInvocation(55)", "Delete VariableDeclarationFragment(56)", "Delete FieldDeclaration(57)", "Delete Modifier: private(58)", "Delete SimpleName: V1ExpressionErrors(59)", "Delete Block(60)", "Delete MethodDeclaration(61)", "Delete TypeDeclaration: class(62)"]}}, {"ParseErrors_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.exprparse", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.base.internal.BaseUtils.formatParseExceptionDetails", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.base.SourceLocation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.ErrorReporter", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.error.SoyErrorKind"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.SoyErrorKind.StyleAllowance", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: SourceLocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SwitchCase", "DEL SimpleName: String", "DEL QualifiedName: ExpressionParserConstants.DOLLAR_IDENT", "DEL SimpleName: reporter", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: reporter", "DEL SimpleName: reporter", "DEL Modifier: private", "DEL SimpleName: ErrorReporter", "DEL ExpressionStatement", "DEL QualifiedName: V1ExpressionErrors.LEGACY_AND_ERROR", "DEL SwitchCase", "DEL StringLiteral: \"eof\"", "DEL QualifiedName: ExpressionParserConstants.FLOAT", "DEL MethodInvocation", "DEL SimpleName: parentSourceLocation", "DEL QualifiedName: errorToken.image", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: AssertionError", "DEL SimpleName: getSoyFileParserTokenDisplayName", "DEL TextElement: Helpers for interpreting parse errors as soy errors. ", "DEL BreakStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL TextElement: Returns a human friendly display name for tokens. By default we use the generated token image", "DEL SimpleType: ParseException", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: reportExprParseException", "DEL SimpleName: errorLocation", "DEL SimpleName: errorLocation", "DEL SimpleName: errorToken", "DEL SimpleName: ParseException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SwitchCase", "DEL SwitchStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: report", "DEL SimpleName: ParseErrors", "DEL MethodInvocation", "DEL ArrayAccess", "DEL SimpleName: tokenId", "DEL SimpleName: report", "DEL MethodInvocation", "DEL SimpleName: tokenId", "DEL QualifiedName: ExpressionParserConstants.LEGACY_AND", "DEL SwitchStatement", "DEL SimpleName: StyleAllowance", "DEL SwitchCase", "DEL SimpleName: build", "DEL SwitchCase", "DEL SimpleType: AssertionError", "DEL QualifiedName: ExpressionParserConstants.LEGACY_NOT", "DEL SimpleName: ImmutableSet", "DEL StringLiteral: \"we should never expect the unexpected token\"", "DEL SimpleName: expected", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL QualifiedName: ExpressionParserConstants.STRING", "DEL QualifiedName: ImmutableSet.Builder", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: reporter", "DEL SingleVariableDeclaration", "DEL SimpleName: expectedTokenImages", "DEL Block", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL QualifiedName: ExpressionParserConstants.UNEXPECTED_TOKEN", "DEL ReturnStatement", "DEL Modifier: static", "DEL SimpleName: report", "DEL SimpleName: String", "DEL SwitchCase", "DEL Javadoc", "DEL SwitchCase", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: tokenId", "DEL SwitchCase", "DEL SimpleName: reporter", "DEL QualifiedName: V1ExpressionErrors.LEGACY_NOT_ERROR", "DEL SimpleName: errorToken", "DEL QualifiedName: e.expectedTokenSequences", "DEL ArrayType: int[]", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL StringLiteral: \"{0}\"", "DEL SimpleName: reporter", "DEL SimpleName: createSrcLoc", "DEL ReturnStatement", "DEL QualifiedName: ExpressionParserConstants.LEGACY_OR", "DEL ArrayAccess", "DEL SimpleName: SourceLocation", "DEL StringLiteral: \"variable\"", "DEL SimpleName: parentSourceLocation", "DEL SimpleName: asList", "DEL SimpleName: report", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: expectedTokenImages", "DEL SimpleName: errorLocation", "DEL SimpleName: of", "DEL SimpleName: report", "DEL SimpleName: SoyErrorKind", "DEL SimpleName: formatParseExceptionDetails", "DEL SimpleName: builder", "DEL QualifiedName: V1ExpressionErrors.LEGACY_DOUBLE_QUOTED_STRING", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL SwitchCase", "DEL QualifiedName: e.currentToken", "DEL Block", "DEL Modifier: private", "DEL SwitchCase", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: ParseErrors", "DEL QualifiedName: ExpressionParserConstants.IDENT", "DEL Block", "DEL ReturnStatement", "DEL QualifiedName: V1ExpressionErrors.LEGACY_OR_ERROR", "DEL StringLiteral: \"an identifier\"", "DEL SimpleName: errorLocation", "DEL SimpleName: values", "DEL SwitchCase", "DEL SimpleName: errorToken", "DEL QualifiedName: ExpressionParserConstants.tokenImage", "DEL TextElement: which is appropriate for literal tokens.", "DEL NumberLiteral: 0", "DEL SimpleType: Token", "DEL ExpressionStatement", "DEL SimpleName: Token", "DEL Modifier: static", "DEL SimpleType: String", "DEL SimpleType: ImmutableSet.Builder", "DEL SimpleName: errorLocation", "DEL MethodDeclaration", "DEL SimpleName: getSoyFileParserTokenDisplayName", "DEL SimpleName: errorLocation", "DEL SimpleType: ErrorReporter", "DEL StringLiteral: \"number\"", "DEL SimpleType: SourceLocation", "DEL TagElement", "DEL Dimension", "DEL QualifiedName: errorToken.next", "DEL SimpleName: SourceLocation", "DEL MethodInvocation", "DEL Javadoc", "DEL QualifiedName: errorToken.kind", "DEL SwitchCase", "DEL Assignment: =", "DEL QualifiedName: ExpressionParserConstants.DEC_INTEGER", "DEL ExpressionStatement", "DEL QualifiedName: ExpressionParserConstants.EOF", "DEL TypeDeclaration: class", "DEL SimpleName: e", "DEL QualifiedName: errorToken.next", "DEL ReturnStatement", "DEL SimpleName: expected", "DEL SimpleName: Tokens", "DEL ThrowStatement", "DEL QualifiedName: ExpressionParserConstants.HEX_INTEGER", "DEL StringLiteral: \"string\"", "DEL MethodInvocation", "DEL SimpleName: expectedTokenImages", "DEL Block", "DEL EnhancedForStatement", "DEL SingleVariableDeclaration", "DEL QualifiedName: ExpressionParserConstants.DOUBLE_QUOTE", "DEL ParameterizedType: ImmutableSet.Builder<String>"]}]}}, {"ParseErrors_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.exprparse(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.template.soy.base.internal.BaseUtils.formatParseExceptionDetails(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.collect.ImmutableSet(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.template.soy.base.SourceLocation(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.template.soy.error.ErrorReporter(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind.StyleAllowance(12)", "Delete ImportDeclaration(13)", "Delete TextElement: Helpers for interpreting parse errors as soy errors. (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: final(17)", "Delete SimpleName: ParseErrors(18)", "Delete Modifier: private(19)", "Delete SimpleName: ParseErrors(20)", "Delete Block(21)", "Delete MethodDeclaration(22)", "Delete Modifier: static(23)", "Delete PrimitiveType: void(24)", "Delete SimpleName: reportExprParseException(25)", "Delete SimpleName: ErrorReporter(26)", "Delete SimpleType: ErrorReporter(27)", "Delete SimpleName: reporter(28)", "Delete SingleVariableDeclaration(29)", "Delete SimpleName: SourceLocation(30)", "Delete SimpleType: SourceLocation(31)", "Delete SimpleName: parentSourceLocation(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: ParseException(34)", "Delete SimpleType: ParseException(35)", "Delete SimpleName: e(36)", "Delete SingleVariableDeclaration(37)", "Delete SimpleName: Token(38)", "Delete SimpleType: Token(39)", "Delete SimpleName: errorToken(40)", "Delete QualifiedName: e.currentToken(41)", "Delete VariableDeclarationFragment(42)", "Delete VariableDeclarationStatement(43)", "Delete QualifiedName: errorToken.next(44)", "Delete NullLiteral(45)", "Delete InfixExpression: !=(46)", "Delete SimpleName: errorToken(47)", "Delete QualifiedName: errorToken.next(48)", "Delete Assignment: =(49)", "Delete ExpressionStatement(50)", "Delete Block(51)", "Delete IfStatement(52)", "Delete SimpleName: SourceLocation(53)", "Delete SimpleType: SourceLocation(54)", "Delete SimpleName: errorLocation(55)", "Delete SimpleName: Tokens(56)", "Delete SimpleName: createSrcLoc(57)", "Delete SimpleName: parentSourceLocation(58)", "Delete SimpleName: errorToken(59)", "Delete MethodInvocation(60)", "Delete VariableDeclarationFragment(61)", "Delete VariableDeclarationStatement(62)", "Delete QualifiedName: errorToken.kind(63)", "Delete QualifiedName: ExpressionParserConstants.LEGACY_AND(64)", "Delete SwitchCase(65)", "Delete SimpleName: reporter(66)", "Delete SimpleName: report(67)", "Delete SimpleName: errorLocation(68)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_AND_ERROR(69)", "Delete MethodInvocation(70)", "Delete ExpressionStatement(71)", "Delete ReturnStatement(72)", "Delete QualifiedName: ExpressionParserConstants.LEGACY_OR(73)", "Delete SwitchCase(74)", "Delete SimpleName: reporter(75)", "Delete SimpleName: report(76)", "Delete SimpleName: errorLocation(77)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_OR_ERROR(78)", "Delete MethodInvocation(79)", "Delete ExpressionStatement(80)", "Delete ReturnStatement(81)", "Delete QualifiedName: ExpressionParserConstants.LEGACY_NOT(82)", "Delete SwitchCase(83)", "Delete SimpleName: reporter(84)", "Delete SimpleName: report(85)", "Delete SimpleName: errorLocation(86)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_NOT_ERROR(87)", "Delete MethodInvocation(88)", "Delete ExpressionStatement(89)", "Delete ReturnStatement(90)", "Delete QualifiedName: ExpressionParserConstants.DOUBLE_QUOTE(91)", "Delete SwitchCase(92)", "Delete SimpleName: reporter(93)", "Delete SimpleName: report(94)", "Delete SimpleName: errorLocation(95)", "Delete QualifiedName: V1ExpressionErrors.LEGACY_DOUBLE_QUOTED_STRING(96)", "Delete MethodInvocation(97)", "Delete ExpressionStatement(98)", "Delete ReturnStatement(99)", "Delete SwitchCase(100)", "Delete BreakStatement(101)", "Delete SwitchStatement(102)", "Delete QualifiedName: ImmutableSet.Builder(103)", "Delete SimpleType: ImmutableSet.Builder(104)", "Delete SimpleName: String(105)", "Delete SimpleType: String(106)", "Delete ParameterizedType: ImmutableSet.Builder<String>(107)", "Delete SimpleName: expectedTokenImages(108)", "Delete SimpleName: ImmutableSet(109)", "Delete SimpleName: builder(110)", "Delete MethodInvocation(111)", "Delete VariableDeclarationFragment(112)", "Delete VariableDeclarationStatement(113)", "Delete PrimitiveType: int(114)", "Delete Dimension(115)", "Delete ArrayType: int[](116)", "Delete SimpleName: expected(117)", "Delete SingleVariableDeclaration(118)", "Delete QualifiedName: e.expectedTokenSequences(119)", "Delete SimpleName: expectedTokenImages(120)", "Delete SimpleName: add(121)", "Delete SimpleName: getSoyFileParserTokenDisplayName(122)", "Delete SimpleName: expected(123)", "Delete NumberLiteral: 0(124)", "Delete ArrayAccess(125)", "Delete MethodInvocation(126)", "Delete MethodInvocation(127)", "Delete ExpressionStatement(128)", "Delete Block(129)", "Delete EnhancedForStatement(130)", "Delete SimpleName: reporter(131)", "Delete SimpleName: report(132)", "Delete SimpleName: errorLocation(133)", "Delete SimpleName: SoyErrorKind(134)", "Delete SimpleName: of(135)", "Delete StringLiteral: \"{0}\"(136)", "Delete SimpleName: StyleAllowance(137)", "Delete SimpleName: values(138)", "Delete MethodInvocation(139)", "Delete MethodInvocation(140)", "Delete SimpleName: formatParseExceptionDetails(141)", "Delete QualifiedName: errorToken.image(142)", "Delete SimpleName: expectedTokenImages(143)", "Delete SimpleName: build(144)", "Delete MethodInvocation(145)", "Delete SimpleName: asList(146)", "Delete MethodInvocation(147)", "Delete MethodInvocation(148)", "Delete MethodInvocation(149)", "Delete ExpressionStatement(150)", "Delete Block(151)", "Delete MethodDeclaration(152)", "Delete TextElement: Returns a human friendly display name for tokens. By default we use the generated token image(153)", "Delete TextElement: which is appropriate for literal tokens.(154)", "Delete TagElement(155)", "Delete Javadoc(156)", "Delete Modifier: private(157)", "Delete Modifier: static(158)", "Delete SimpleName: String(159)", "Delete SimpleType: String(160)", "Delete SimpleName: getSoyFileParserTokenDisplayName(161)", "Delete PrimitiveType: int(162)", "Delete SimpleName: tokenId(163)", "Delete SingleVariableDeclaration(164)", "Delete SimpleName: tokenId(165)", "Delete QualifiedName: ExpressionParserConstants.EOF(166)", "Delete SwitchCase(167)", "Delete StringLiteral: \"eof\"(168)", "Delete ReturnStatement(169)", "Delete QualifiedName: ExpressionParserConstants.HEX_INTEGER(170)", "Delete SwitchCase(171)", "Delete QualifiedName: ExpressionParserConstants.DEC_INTEGER(172)", "Delete SwitchCase(173)", "Delete QualifiedName: ExpressionParserConstants.FLOAT(174)", "Delete SwitchCase(175)", "Delete StringLiteral: \"number\"(176)", "Delete ReturnStatement(177)", "Delete QualifiedName: ExpressionParserConstants.STRING(178)", "Delete SwitchCase(179)", "Delete StringLiteral: \"string\"(180)", "Delete ReturnStatement(181)", "Delete QualifiedName: ExpressionParserConstants.IDENT(182)", "Delete SwitchCase(183)", "Delete StringLiteral: \"an identifier\"(184)", "Delete ReturnStatement(185)", "Delete QualifiedName: ExpressionParserConstants.DOLLAR_IDENT(186)", "Delete SwitchCase(187)", "Delete StringLiteral: \"variable\"(188)", "Delete ReturnStatement(189)", "Delete QualifiedName: ExpressionParserConstants.UNEXPECTED_TOKEN(190)", "Delete SwitchCase(191)", "Delete SimpleName: AssertionError(192)", "Delete SimpleType: AssertionError(193)", "Delete StringLiteral: \"we should never expect the unexpected token\"(194)", "Delete ClassInstanceCreation(195)", "Delete ThrowStatement(196)", "Delete SwitchCase(197)", "Delete QualifiedName: ExpressionParserConstants.tokenImage(198)", "Delete SimpleName: tokenId(199)", "Delete ArrayAccess(200)", "Delete ReturnStatement(201)", "Delete SwitchStatement(202)", "Delete Block(203)", "Delete MethodDeclaration(204)", "Delete TypeDeclaration: class(205)"]}}, {"SourceItemInfo_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soyparse", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions.checkArgument"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.base.SourceLocation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL FieldAccess", "DEL SimpleName: filePath", "DEL Javadoc", "DEL SimpleName: SourceItemInfo", "DEL Assignment: =", "DEL TextElement: javacc primitives, at which point passing these glorified pairs around in the parser may be less", "DEL SimpleName: lineNumEnd", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: srcLocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: columnNum", "DEL SimpleName: parsedContent", "DEL Block", "DEL SimpleName: T", "DEL TextElement: Parsed content and information about the source from which it is derived.", "DEL Block", "DEL SimpleName: location", "DEL SimpleName: columnNum", "DEL SimpleName: SourceItemInfo", "DEL Modifier: private", "DEL SimpleName: parsedContent", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: necessary (e.g. every time something returns a SourceItemInfo, maybe it should be returning a", "DEL SimpleName: parsedContent", "DEL SimpleName: location", "DEL QualifiedName: begin.location", "DEL WildcardType: ?", "DEL QualifiedName: begin.location", "DEL SimpleName: parsedContent", "DEL VariableDeclarationFragment", "DEL SimpleName: columnNumEnd", "DEL SimpleName: T", "DEL SimpleName: getBeginColumn", "DEL SimpleName: parsedContent", "DEL SimpleType: T", "DEL PrimitiveType: int", "DEL TextElement: <p>TODO(lukes): consider whether or not this class carries its own weight. Maybe the grammar", "DEL SimpleName: lineNum", "DEL ParameterizedType: SourceItemInfo<?>", "DEL SimpleType: SourceItemInfo", "DEL SimpleName: SourceLocation", "DEL SimpleName: begin", "DEL FieldAccess", "DEL TagElement", "DEL Assignment: =", "DEL QualifiedName: begin.location", "DEL MethodInvocation", "DEL SimpleName: SourceItemInfo", "DEL SimpleName: checkArgument", "DEL TextElement: should be enhanced (or the AST refactored) so that we can more easily generate the AST from the", "DEL FieldDeclaration", "DEL SimpleType: SourceLocation", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: location", "DEL SimpleName: equals", "DEL SimpleName: SourceLocation", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: parsedContent", "DEL SimpleName: parsedContent", "DEL PrimitiveType: int", "DEL SimpleName: parsedContent", "DEL SimpleName: SourceLocation", "DEL SimpleName: parsedContent", "DEL SimpleName: getEndLine", "DEL SimpleName: parsedContent", "DEL SimpleName: T", "DEL SimpleType: SourceItemInfo", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: SourceLocation", "DEL SimpleName: location", "DEL SimpleName: SourceItemInfo", "DEL WildcardType: ?", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleType: SourceLocation", "DEL FieldDeclaration", "DEL SimpleName: T", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: filePath", "DEL ExpressionStatement", "DEL TextElement: SoyNode and every time we return a SourceItemInfo<Void>, why not a Token).", "DEL SimpleName: location", "DEL ThisExpression", "DEL ThisExpression", "DEL SimpleName: getFilePath", "DEL SimpleName: getBeginLine", "DEL SimpleName: lineNumEnd", "DEL QualifiedName: end.location", "DEL SingleVariableDeclaration", "DEL SimpleName: location", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: columnNumEnd", "DEL SimpleName: SourceItemInfo", "DEL MethodInvocation", "DEL SimpleName: SourceLocation", "DEL SimpleName: getFileName", "DEL ReturnStatement", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL QualifiedName: begin.location", "DEL ExpressionStatement", "DEL ParameterizedType: SourceItemInfo<?>", "DEL MethodDeclaration", "DEL ConstructorInvocation", "DEL SimpleType: T", "DEL QualifiedName: end.location", "DEL SimpleName: parsedContent", "DEL SimpleName: SourceItemInfo", "DEL ThisExpression", "DEL SimpleType: T", "DEL SimpleType: SourceLocation", "DEL Modifier: private", "DEL FieldAccess", "DEL SimpleName: T", "DEL SimpleType: T", "DEL MethodInvocation", "DEL Modifier: final", "DEL MethodDeclaration", "DEL TagElement", "DEL FieldAccess", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL ThisExpression", "DEL QualifiedName: end.location", "DEL SimpleName: T", "DEL SingleVariableDeclaration", "DEL TextElement: Content derived from tokens. ", "DEL Block", "DEL SimpleName: end", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TypeParameter", "DEL SimpleName: getEndColumn", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: lineNum", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleName: getFileName", "DEL SimpleType: T", "DEL SingleVariableDeclaration"]}]}}, {"SourceItemInfo_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.soyparse(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.base.Preconditions.checkArgument(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.template.soy.base.SourceLocation(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Parsed content and information about the source from which it is derived.(6)", "Delete TextElement: <p>TODO(lukes): consider whether or not this class carries its own weight. Maybe the grammar(7)", "Delete TextElement: should be enhanced (or the AST refactored) so that we can more easily generate the AST from the(8)", "Delete TextElement: javacc primitives, at which point passing these glorified pairs around in the parser may be less(9)", "Delete TextElement: necessary (e.g. every time something returns a SourceItemInfo, maybe it should be returning a(10)", "Delete TextElement: SoyNode and every time we return a SourceItemInfo<Void>, why not a Token).(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: final(14)", "Delete SimpleName: SourceItemInfo(15)", "Delete SimpleName: T(16)", "Delete TypeParameter(17)", "Delete Modifier: private(18)", "Delete Modifier: final(19)", "Delete SimpleName: T(20)", "Delete SimpleType: T(21)", "Delete SimpleName: parsedContent(22)", "Delete VariableDeclarationFragment(23)", "Delete FieldDeclaration(24)", "Delete Modifier: private(25)", "Delete Modifier: final(26)", "Delete SimpleName: SourceLocation(27)", "Delete SimpleType: SourceLocation(28)", "Delete SimpleName: location(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete SimpleName: SourceItemInfo(32)", "Delete SimpleName: T(33)", "Delete SimpleType: T(34)", "Delete SimpleName: parsedContent(35)", "Delete SingleVariableDeclaration(36)", "Delete SimpleName: SourceItemInfo(37)", "Delete SimpleType: SourceItemInfo(38)", "Delete WildcardType: ?(39)", "Delete ParameterizedType: SourceItemInfo<?>(40)", "Delete SimpleName: begin(41)", "Delete SingleVariableDeclaration(42)", "Delete SimpleName: SourceItemInfo(43)", "Delete SimpleType: SourceItemInfo(44)", "Delete WildcardType: ?(45)", "Delete ParameterizedType: SourceItemInfo<?>(46)", "Delete SimpleName: end(47)", "Delete SingleVariableDeclaration(48)", "Delete QualifiedName: begin.location(49)", "Delete SimpleName: getFilePath(50)", "Delete MethodInvocation(51)", "Delete SimpleName: parsedContent(52)", "Delete QualifiedName: begin.location(53)", "Delete SimpleName: getBeginLine(54)", "Delete MethodInvocation(55)", "Delete QualifiedName: begin.location(56)", "Delete SimpleName: getBeginColumn(57)", "Delete MethodInvocation(58)", "Delete QualifiedName: end.location(59)", "Delete SimpleName: getEndLine(60)", "Delete MethodInvocation(61)", "Delete QualifiedName: end.location(62)", "Delete SimpleName: getEndColumn(63)", "Delete MethodInvocation(64)", "Delete ConstructorInvocation(65)", "Delete SimpleName: checkArgument(66)", "Delete QualifiedName: begin.location(67)", "Delete SimpleName: getFileName(68)", "Delete MethodInvocation(69)", "Delete SimpleName: equals(70)", "Delete QualifiedName: end.location(71)", "Delete SimpleName: getFileName(72)", "Delete MethodInvocation(73)", "Delete MethodInvocation(74)", "Delete MethodInvocation(75)", "Delete ExpressionStatement(76)", "Delete Block(77)", "Delete MethodDeclaration(78)", "Delete SimpleName: SourceItemInfo(79)", "Delete SimpleName: String(80)", "Delete SimpleType: String(81)", "Delete SimpleName: filePath(82)", "Delete SingleVariableDeclaration(83)", "Delete SimpleName: T(84)", "Delete SimpleType: T(85)", "Delete SimpleName: parsedContent(86)", "Delete SingleVariableDeclaration(87)", "Delete PrimitiveType: int(88)", "Delete SimpleName: lineNum(89)", "Delete SingleVariableDeclaration(90)", "Delete PrimitiveType: int(91)", "Delete SimpleName: columnNum(92)", "Delete SingleVariableDeclaration(93)", "Delete PrimitiveType: int(94)", "Delete SimpleName: lineNumEnd(95)", "Delete SingleVariableDeclaration(96)", "Delete PrimitiveType: int(97)", "Delete SimpleName: columnNumEnd(98)", "Delete SingleVariableDeclaration(99)", "Delete ThisExpression(100)", "Delete SimpleName: location(101)", "Delete FieldAccess(102)", "Delete SimpleName: SourceLocation(103)", "Delete SimpleType: SourceLocation(104)", "Delete SimpleName: filePath(105)", "Delete SimpleName: lineNum(106)", "Delete SimpleName: columnNum(107)", "Delete SimpleName: lineNumEnd(108)", "Delete SimpleName: columnNumEnd(109)", "Delete ClassInstanceCreation(110)", "Delete Assignment: =(111)", "Delete ExpressionStatement(112)", "Delete ThisExpression(113)", "Delete SimpleName: parsedContent(114)", "Delete FieldAccess(115)", "Delete SimpleName: parsedContent(116)", "Delete Assignment: =(117)", "Delete ExpressionStatement(118)", "Delete Block(119)", "Delete MethodDeclaration(120)", "Delete SimpleName: SourceItemInfo(121)", "Delete SimpleName: T(122)", "Delete SimpleType: T(123)", "Delete SimpleName: parsedContent(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: SourceLocation(126)", "Delete SimpleType: SourceLocation(127)", "Delete SimpleName: location(128)", "Delete SingleVariableDeclaration(129)", "Delete ThisExpression(130)", "Delete SimpleName: location(131)", "Delete FieldAccess(132)", "Delete SimpleName: location(133)", "Delete Assignment: =(134)", "Delete ExpressionStatement(135)", "Delete ThisExpression(136)", "Delete SimpleName: parsedContent(137)", "Delete FieldAccess(138)", "Delete SimpleName: parsedContent(139)", "Delete Assignment: =(140)", "Delete ExpressionStatement(141)", "Delete Block(142)", "Delete MethodDeclaration(143)", "Delete TextElement: Content derived from tokens. (144)", "Delete TagElement(145)", "Delete Javadoc(146)", "Delete SimpleName: T(147)", "Delete SimpleType: T(148)", "Delete SimpleName: parsedContent(149)", "Delete SimpleName: parsedContent(150)", "Delete ReturnStatement(151)", "Delete Block(152)", "Delete MethodDeclaration(153)", "Delete SimpleName: SourceLocation(154)", "Delete SimpleType: SourceLocation(155)", "Delete SimpleName: srcLocation(156)", "Delete SimpleName: location(157)", "Delete ReturnStatement(158)", "Delete Block(159)", "Delete MethodDeclaration(160)", "Delete TypeDeclaration: class(161)"]}}, {"TemplateNode_cluster": {"actions": []}}, {"TemplateNode_diff": {"operations": []}}], "commit_stats": [{"total_files": 11, "deleted_files": 8, "testing": "True", "maintenance": "False", "build": "False"}]}