{"application": "apache-phoenix", "csha": "436bab01d125383f6172120337098509c5e86b9a", "files": [{"AlterTableWithViewsIT_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: phoenixConn to MethodInvocation at 0", "INS InfixExpression: + to Assignment: = at 1", "INS ParenthesizedExpression to InfixExpression: + at 2", "INS InfixExpression: + to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: conn to VariableDeclarationFragment at 0", "INS SimpleName: generateDDL to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: baseTableName to ClassInstanceCreation at 2", "INS TryStatement to Block at 12", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: baseTableName to VariableDeclarationFragment at 0", "INS SimpleName: PName to SimpleType: PName at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS StringLiteral: \" SET APPEND_ONLY_SCHEMA = true\" to InfixExpression: + at 2", "INS MethodInvocation to ConditionalExpression at 1", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: viewTable to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleType: Connection to VariableDeclarationExpression at 0", "INS StringLiteral: \" AS SELECT * FROM \" to InfixExpression: + at 2", "INS SimpleName: conn to MethodInvocation at 0", "INS ExpressionStatement to Block at 16", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"CONSTRAINT PK PRIMARY KEY (%s ID, COL1)) %s\" to InfixExpression: + at 6", "INS SimpleName: isMultiTenant to ConditionalExpression at 0", "INS StringLiteral: \"tenant1\" to MethodInvocation at 2", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS ExpressionStatement to Block at 19", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"CREATE TABLE \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 4", "INS SimpleType: PName to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS SimpleType: Connection to VariableDeclarationExpression at 0", "INS SimpleName: viewOfTable to VariableDeclarationFragment at 0", "INS SimpleName: conn to MethodInvocation at 0", "INS VariableDeclarationExpression to TryStatement at 0", "INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS SimpleName: DriverManager to MethodInvocation at 0", "INS StringLiteral: \" SET APPEND_ONLY_SCHEMA = true\" to InfixExpression: + at 2", "INS SimpleName: e to MethodInvocation at 0", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS ExpressionStatement to Block at 17", "INS SimpleName: Connection to SimpleType: Connection at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: table to Assignment: = at 0", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: ddl to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"CREATE VIEW \" to InfixExpression: + at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS SimpleName: isMultiTenant to ConditionalExpression at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: viewOfTable to InfixExpression: + at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: ddl to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 8", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleType: PhoenixConnection to VariableDeclarationStatement at 0", "INS SimpleName: table to VariableDeclarationFragment at 0", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS ExpressionStatement to Block at 9", "INS ExpressionStatement to Block at 13", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: newName to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: viewConn to MethodInvocation at 0", "INS SimpleName: unwrap to MethodInvocation at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"ALTER TABLE \" to InfixExpression: + at 0", "INS TryStatement to Block at 0", "INS TypeLiteral to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to ClassInstanceCreation at 1", "INS SimpleName: DriverManager to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: viewOfTable to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getConnection to MethodInvocation at 1", "INS Block to CatchClause at 1", "INS VariableDeclarationExpression to TryStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: baseTableName to ClassInstanceCreation at 2", "INS NullLiteral to ClassInstanceCreation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: viewConn to VariableDeclarationFragment at 0", "INS SimpleName: getUrl to MethodInvocation at 0", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS QualifiedName: SQLExceptionCode.CANNOT_ALTER_TABLE_PROPERTY_ON_VIEW to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 6", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: phoenixConn to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" COL1 integer NOT NULL,\" to InfixExpression: + at 4", "INS SimpleName: fail to MethodInvocation at 0", "INS StringLiteral: \"_VIEW\" to InfixExpression: + at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: testAlterAppendOnlySchema to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS SimpleType: PTable to VariableDeclarationStatement at 0", "INS StringLiteral: \"1\" to ConditionalExpression at 2", "INS StringLiteral: \"NONTXNTBL_\" to InfixExpression: + at 0", "INS SimpleName: PNameFactory to MethodInvocation at 0", "INS StringLiteral: \"ALTER VIEW \" to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS SimpleName: getTable to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Connection to SimpleType: Connection at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: baseTableName to InfixExpression: + at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tenantId to VariableDeclarationFragment at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: ddl to MethodInvocation at 2", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS ExpressionStatement to Block at 15", "INS SimpleName: unwrap to MethodInvocation at 1", "INS StringLiteral: \"0\" to ConditionalExpression at 1", "INS NullLiteral to ConditionalExpression at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: Test to MarkerAnnotation at 0", "INS SimpleName: phoenixConn to VariableDeclarationFragment at 0", "INS StringLiteral: \"CREATED_DATE DATE,\\n\" to InfixExpression: + at 5", "INS SimpleName: viewTable to MethodInvocation at 0", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: baseTableName to InfixExpression: + at 3", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to TryStatement at 2", "INS SimpleName: baseTableName to InfixExpression: + at 1", "INS StringLiteral: \" (\\n\" to InfixExpression: + at 2", "INS SimpleName: table to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS SimpleName: generateUniqueName to MethodInvocation at 0", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: conn to ConditionalExpression at 2", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 11", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ddl to VariableDeclarationFragment at 0", "INS SimpleName: getConnection to MethodInvocation at 1", "INS SimpleName: TENANT_SPECIFIC_URL1 to MethodInvocation at 2", "INS SimpleType: Exception to MethodDeclaration at 4", "INS ExpressionStatement to Block at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: isMultiTenant to ConditionalExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: viewConn to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: getTable to MethodInvocation at 1", "INS SimpleName: baseTableName to InfixExpression: + at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS SimpleName: phoenixConn to Assignment: = at 0", "INS StringLiteral: \"%s ID VARCHAR(15) NOT NULL,\\n\" to InfixExpression: + at 3", "INS InfixExpression: + to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationStatement to Block at 2", "INS SimpleName: tableName to InfixExpression: + at 0", "INS SimpleName: viewOfTable2 to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS StringLiteral: \"_VIEW2\" to InfixExpression: + at 1"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS SimpleName: viewOfTable2 to InfixExpression: + at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: viewConn to MethodInvocation at 0", "INS StringLiteral: \" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR ) AS SELECT * FROM \" to InfixExpression: + at 2", "INS SimpleName: tableName to InfixExpression: + at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS StringLiteral: \"CREATE VIEW \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS ExpressionStatement to Block at 7", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \" SET UPDATE_CACHE_FREQUENCY = 5\" to InfixExpression: + at 2", "INS SimpleName: execute to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"ALTER VIEW \" to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: viewOfTable2 to InfixExpression: + at 1", "INS SimpleName: viewConn to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 13", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PTable to VariableDeclarationStatement at 0", "INS SimpleName: getTable to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 13", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS SimpleName: viewTable1 to VariableDeclarationFragment at 0", "INS SimpleName: viewConn to MethodInvocation at 0", "INS SimpleName: unwrap to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleName: viewOfTable1 to ClassInstanceCreation at 2", "INS SimpleName: tenantId to ClassInstanceCreation at 1", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 17", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"SELECT * FROM \" to InfixExpression: + at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: viewOfTable2 to InfixExpression: + at 1", "INS ExpressionStatement to Block at 17", "INS SimpleName: viewConn to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 18", "operations": ["INS SimpleType: PTable to VariableDeclarationStatement at 0", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: viewOfTable2 to ClassInstanceCreation at 2", "INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS SimpleName: viewConn to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: tenantId to ClassInstanceCreation at 1", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS SimpleName: unwrap to MethodInvocation at 1", "INS SimpleName: getTable to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: viewTable2 to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 18", "INS SimpleName: PTable to SimpleType: PTable at 0"]}, {"root": "INS ExpressionStatement to Block at 19", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isImmutableRows to MethodInvocation at 1", "INS ExpressionStatement to Block at 19", "INS SimpleName: assertFalse to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: viewTable2 to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 20", "operations": ["INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getUpdateCacheFrequency to MethodInvocation at 1", "INS NumberLiteral: 5 to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 20", "INS SimpleName: viewTable2 to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 22", "operations": ["INS SimpleName: viewConn to MethodInvocation at 0", "INS ExpressionStatement to Block at 22", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"SELECT * FROM \" to InfixExpression: + at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: viewOfTable1 to InfixExpression: + at 1"]}, {"root": "INS ExpressionStatement to Block at 23", "operations": ["INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: viewConn to MethodInvocation at 0", "INS StringLiteral: \"SELECT * FROM \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 23", "INS SimpleName: createStatement to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: viewOfTable2 to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 29", "operations": ["INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: viewOfTable1 to ClassInstanceCreation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: tenantId to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 29", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS SimpleName: viewConn to MethodInvocation at 0", "INS SimpleName: viewTable1 to Assignment: = at 0", "INS SimpleName: unwrap to MethodInvocation at 1", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS SimpleName: getTable to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0"]}, {"root": "INS ExpressionStatement to Block at 33", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS SimpleName: viewTable2 to Assignment: = at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: tenantId to ClassInstanceCreation at 1", "INS SimpleName: viewConn to MethodInvocation at 0", "INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS ExpressionStatement to Block at 33", "INS SimpleName: getTable to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: viewOfTable2 to ClassInstanceCreation at 2", "INS SimpleName: unwrap to MethodInvocation at 1", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 34", "operations": ["INS ExpressionStatement to Block at 34", "INS SimpleName: isImmutableRows to MethodInvocation at 1", "INS SimpleName: viewTable2 to MethodInvocation at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 35", "operations": ["INS ExpressionStatement to Block at 35", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 5 to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getUpdateCacheFrequency to MethodInvocation at 1", "INS SimpleName: viewTable2 to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 14", "MOV VariableDeclarationStatement to Block at 10", "MOV ExpressionStatement to Block at 18"]}, {"root": "INS SimpleType: String to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from viewOfTable to viewOfTable1", "operations": ["UPD SimpleName: viewOfTable from viewOfTable to viewOfTable1", "UPD SimpleName: viewOfTable from viewOfTable to viewOfTable1"]}, {"root": "UPDATE from 0 to 15", "operations": ["UPD NumberLiteral: 0 from 0 to 15", "UPD NumberLiteral: 0 from 0 to 15"]}, {"root": "UPDATE from 123 to 10", "operations": ["UPD NumberLiteral: 123 from 123 to 10", "UPD NumberLiteral: 123 from 123 to 10"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: generateDDL to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from \"_VIEW\" to \"_VIEW1\"", "operations": ["UPD StringLiteral: \"_VIEW\" from \"_VIEW\" to \"_VIEW1\""]}, {"root": "INS StringLiteral: \" ) UPDATE_CACHE_FREQUENCY=15 \" to InfixExpression: + at 7", "operations": ["INS StringLiteral: \" ) UPDATE_CACHE_FREQUENCY=15 \" to InfixExpression: + at 7"]}, {"root": "INS ParenthesizedExpression to InfixExpression: + at 8", "operations": ["INS StringLiteral: \"%s\" to ConditionalExpression at 2", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: isMultiTenant to ConditionalExpression at 0", "INS ParenthesizedExpression to InfixExpression: + at 8", "INS StringLiteral: \",%s\" to ConditionalExpression at 1"]}, {"root": "UPDATE from viewTable to viewTable1", "operations": ["UPD SimpleName: viewTable from viewTable to viewTable1", "UPD SimpleName: viewTable from viewTable to viewTable1", "UPD SimpleName: viewTable from viewTable to viewTable1", "UPD SimpleName: viewTable from viewTable to viewTable1"]}, {"root": "UPDATE from \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=123\" to \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=10\"", "operations": ["UPD StringLiteral: \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=123\" from \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=123\" to \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=10\""]}, {"root": "UPDATE from \"ID VARCHAR(15) NOT NULL,\\n\" to \"%s ID VARCHAR(15) NOT NULL,\\n\"", "operations": ["UPD StringLiteral: \"ID VARCHAR(15) NOT NULL,\\n\" from \"ID VARCHAR(15) NOT NULL,\\n\" to \"%s ID VARCHAR(15) NOT NULL,\\n\""]}, {"root": "INS StringLiteral: \" COL1 integer NOT NULL,\" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \" COL1 integer NOT NULL,\" to InfixExpression: + at 4"]}, {"root": "UPDATE from \"CONSTRAINT PK PRIMARY KEY (ID))\" to \"CONSTRAINT PK PRIMARY KEY (%s ID, COL1)) %s\"", "operations": ["UPD StringLiteral: \"CONSTRAINT PK PRIMARY KEY (ID))\" from \"CONSTRAINT PK PRIMARY KEY (ID))\" to \"CONSTRAINT PK PRIMARY KEY (%s ID, COL1)) %s\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ddl to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.util.TestUtil.TEST_PROPERTIES"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Properties"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.util.PropertiesUtil"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.util.SchemaUtil", "DEL ImportDeclaration"]}, {"root": "DEL StringLiteral: \" ) %s\"", "operations": ["DEL StringLiteral: \" ) %s\""]}]}}, {"AlterTableWithViewsIT_diff": {"operations": ["Insert MethodDeclaration(4189) into TypeDeclaration: class(4190) at 23", "Insert MarkerAnnotation(3936) into MethodDeclaration(4189) at 0", "Insert Modifier: public(3937) into MethodDeclaration(4189) at 1", "Insert PrimitiveType: void(3938) into MethodDeclaration(4189) at 2", "Insert SimpleName: testAlterAppendOnlySchema(3939) into MethodDeclaration(4189) at 3", "Insert SimpleType: Exception(3941) into MethodDeclaration(4189) at 4", "Insert Block(4188) into MethodDeclaration(4189) at 5", "Insert SimpleName: Test(3935) into MarkerAnnotation(3936) at 0", "Insert SimpleName: Exception(3940) into SimpleType: Exception(3941) at 0", "Insert TryStatement(4187) into Block(4188) at 0", "Insert VariableDeclarationExpression(3951) into TryStatement(4187) at 0", "Insert VariableDeclarationExpression(3963) into TryStatement(4187) at 1", "Insert Block(4186) into TryStatement(4187) at 2", "Insert VariableDeclarationStatement(367) into Block(667) at 2", "Insert ExpressionStatement(417) into Block(667) at 6", "Insert ExpressionStatement(427) into Block(667) at 7", "Insert VariableDeclarationStatement(494) into Block(667) at 13", "Insert ExpressionStatement(516) into Block(667) at 16", "Insert VariableDeclarationStatement(534) into Block(667) at 17", "Insert ExpressionStatement(540) into Block(667) at 18", "Insert ExpressionStatement(547) into Block(667) at 19", "Insert ExpressionStatement(566) into Block(667) at 21", "Insert ExpressionStatement(575) into Block(667) at 22", "Insert ExpressionStatement(624) into Block(667) at 27", "Insert ExpressionStatement(653) into Block(667) at 30", "Insert ExpressionStatement(659) into Block(667) at 31", "Insert ExpressionStatement(666) into Block(667) at 32", "Insert SimpleType: Connection(3943) into VariableDeclarationExpression(3951) at 0", "Insert VariableDeclarationFragment(3950) into VariableDeclarationExpression(3951) at 1", "Insert SimpleType: Connection(3953) into VariableDeclarationExpression(3963) at 0", "Insert VariableDeclarationFragment(3962) into VariableDeclarationExpression(3963) at 1", "Insert VariableDeclarationStatement(3977) into Block(4186) at 0", "Insert VariableDeclarationStatement(3985) into Block(4186) at 1", "Insert VariableDeclarationStatement(3998) into Block(4186) at 2", "Insert ExpressionStatement(4007) into Block(4186) at 3", "Insert ExpressionStatement(4015) into Block(4186) at 4", "Insert ExpressionStatement(4022) into Block(4186) at 5", "Insert VariableDeclarationStatement(4033) into Block(4186) at 6", "Insert VariableDeclarationStatement(4046) into Block(4186) at 7", "Insert VariableDeclarationStatement(4058) into Block(4186) at 8", "Insert ExpressionStatement(4064) into Block(4186) at 9", "Move VariableDeclarationStatement(468) into Block(4186) at 10", "Insert ExpressionStatement(4088) into Block(4186) at 11", "Insert TryStatement(4118) into Block(4186) at 12", "Insert ExpressionStatement(4128) into Block(4186) at 13", "Move ExpressionStatement(500) into Block(4186) at 14", "Insert ExpressionStatement(4146) into Block(4186) at 15", "Insert ExpressionStatement(4157) into Block(4186) at 16", "Insert ExpressionStatement(4163) into Block(4186) at 17", "Move ExpressionStatement(549) into Block(4186) at 18", "Insert ExpressionStatement(4185) into Block(4186) at 19", "Insert SimpleType: String(353) into VariableDeclarationStatement(359) at 0", "Move SimpleType: String(361) into VariableDeclarationStatement(367) at 0", "Insert VariableDeclarationFragment(366) into VariableDeclarationStatement(367) at 1", "Insert MethodInvocation(416) into ExpressionStatement(417) at 0", "Insert MethodInvocation(426) into ExpressionStatement(427) at 0", "Insert SimpleType: PTable(478) into VariableDeclarationStatement(494) at 0", "Insert VariableDeclarationFragment(493) into VariableDeclarationStatement(494) at 1", "Insert MethodInvocation(515) into ExpressionStatement(516) at 0", "Insert SimpleType: PTable(518) into VariableDeclarationStatement(534) at 0", "Insert VariableDeclarationFragment(533) into VariableDeclarationStatement(534) at 1", "Insert MethodInvocation(539) into ExpressionStatement(540) at 0", "Insert MethodInvocation(546) into ExpressionStatement(547) at 0", "Insert MethodInvocation(565) into ExpressionStatement(566) at 0", "Insert MethodInvocation(574) into ExpressionStatement(575) at 0", "Insert Assignment: =(623) into ExpressionStatement(624) at 0", "Insert Assignment: =(652) into ExpressionStatement(653) at 0", "Insert MethodInvocation(658) into ExpressionStatement(659) at 0", "Insert MethodInvocation(665) into ExpressionStatement(666) at 0", "Insert SimpleName: Connection(3942) into SimpleType: Connection(3943) at 0", "Insert SimpleName: conn(3944) into VariableDeclarationFragment(3950) at 0", "Insert MethodInvocation(3949) into VariableDeclarationFragment(3950) at 1", "Insert SimpleName: Connection(3952) into SimpleType: Connection(3953) at 0", "Insert SimpleName: viewConn(3954) into VariableDeclarationFragment(3962) at 0", "Insert ConditionalExpression(3961) into VariableDeclarationFragment(3962) at 1", "Insert SimpleType: String(3965) into VariableDeclarationStatement(3977) at 0", "Insert VariableDeclarationFragment(3976) into VariableDeclarationStatement(3977) at 1", "Insert SimpleType: String(3979) into VariableDeclarationStatement(3985) at 0", "Insert VariableDeclarationFragment(3984) into VariableDeclarationStatement(3985) at 1", "Insert SimpleType: String(3987) into VariableDeclarationStatement(3998) at 0", "Insert VariableDeclarationFragment(3997) into VariableDeclarationStatement(3998) at 1", "Insert MethodInvocation(4006) into ExpressionStatement(4007) at 0", "Insert Assignment: =(4014) into ExpressionStatement(4015) at 0", "Insert MethodInvocation(4021) into ExpressionStatement(4022) at 0", "Insert SimpleType: PhoenixConnection(4024) into VariableDeclarationStatement(4033) at 0", "Insert VariableDeclarationFragment(4032) into VariableDeclarationStatement(4033) at 1", "Insert SimpleType: PTable(4035) into VariableDeclarationStatement(4046) at 0", "Insert VariableDeclarationFragment(4045) into VariableDeclarationStatement(4046) at 1", "Insert SimpleType: PName(4048) into VariableDeclarationStatement(4058) at 0", "Insert VariableDeclarationFragment(4057) into VariableDeclarationStatement(4058) at 1", "Insert MethodInvocation(4063) into ExpressionStatement(4064) at 0", "Insert MethodInvocation(4087) into ExpressionStatement(4088) at 0", "Insert Block(4102) into TryStatement(4118) at 0", "Insert CatchClause(4117) into TryStatement(4118) at 1", "Insert MethodInvocation(4127) into ExpressionStatement(4128) at 0", "Insert Assignment: =(4145) into ExpressionStatement(4146) at 0", "Insert Assignment: =(4156) into ExpressionStatement(4157) at 0", "Insert MethodInvocation(4162) into ExpressionStatement(4163) at 0", "Insert MethodInvocation(4184) into ExpressionStatement(4185) at 0", "Insert SimpleName: String(352) into SimpleType: String(353) at 0", "Update SimpleName: viewOfTable(362) to viewOfTable1", "Insert SimpleName: viewOfTable2(362) into VariableDeclarationFragment(366) at 0", "Insert InfixExpression: +(365) into VariableDeclarationFragment(366) at 1", "Insert MethodInvocation(409) into MethodInvocation(416) at 0", "Insert SimpleName: execute(410) into MethodInvocation(416) at 1", "Insert InfixExpression: +(415) into MethodInvocation(416) at 2", "Insert MethodInvocation(420) into MethodInvocation(426) at 0", "Insert SimpleName: execute(421) into MethodInvocation(426) at 1", "Insert InfixExpression: +(425) into MethodInvocation(426) at 2", "Update NumberLiteral: 0(445) to 15", "Insert SimpleName: PTable(477) into SimpleType: PTable(478) at 0", "Insert SimpleName: viewTable1(479) into VariableDeclarationFragment(493) at 0", "Insert MethodInvocation(492) into VariableDeclarationFragment(493) at 1", "Update NumberLiteral: 0(476) to 15", "Insert MethodInvocation(510) into MethodInvocation(515) at 0", "Insert SimpleName: execute(511) into MethodInvocation(515) at 1", "Insert InfixExpression: +(514) into MethodInvocation(515) at 2", "Insert SimpleName: PTable(517) into SimpleType: PTable(518) at 0", "Insert SimpleName: viewTable2(519) into VariableDeclarationFragment(533) at 0", "Insert MethodInvocation(532) into VariableDeclarationFragment(533) at 1", "Insert SimpleName: assertFalse(535) into MethodInvocation(539) at 0", "Insert MethodInvocation(538) into MethodInvocation(539) at 1", "Insert SimpleName: assertEquals(541) into MethodInvocation(546) at 0", "Insert NumberLiteral: 5(542) into MethodInvocation(546) at 1", "Insert MethodInvocation(545) into MethodInvocation(546) at 2", "Insert MethodInvocation(560) into MethodInvocation(565) at 0", "Insert SimpleName: execute(561) into MethodInvocation(565) at 1", "Insert InfixExpression: +(564) into MethodInvocation(565) at 2", "Insert MethodInvocation(569) into MethodInvocation(574) at 0", "Insert SimpleName: execute(570) into MethodInvocation(574) at 1", "Insert InfixExpression: +(573) into MethodInvocation(574) at 2", "Update NumberLiteral: 123(528) to 10", "Insert SimpleName: viewTable1(609) into Assignment: =(623) at 0", "Insert MethodInvocation(622) into Assignment: =(623) at 1", "Update NumberLiteral: 123(557) to 10", "Insert SimpleName: viewTable2(638) into Assignment: =(652) at 0", "Insert MethodInvocation(651) into Assignment: =(652) at 1", "Insert SimpleName: assertTrue(654) into MethodInvocation(658) at 0", "Insert MethodInvocation(657) into MethodInvocation(658) at 1", "Insert SimpleName: assertEquals(660) into MethodInvocation(665) at 0", "Insert NumberLiteral: 5(661) into MethodInvocation(665) at 1", "Insert MethodInvocation(664) into MethodInvocation(665) at 2", "Insert MethodInvocation(3803) into MethodInvocation(3804) at 2", "Insert SimpleName: DriverManager(3945) into MethodInvocation(3949) at 0", "Insert SimpleName: getConnection(3946) into MethodInvocation(3949) at 1", "Insert MethodInvocation(3948) into MethodInvocation(3949) at 2", "Insert SimpleName: isMultiTenant(3955) into ConditionalExpression(3961) at 0", "Insert MethodInvocation(3959) into ConditionalExpression(3961) at 1", "Insert SimpleName: conn(3960) into ConditionalExpression(3961) at 2", "Insert SimpleName: String(3964) into SimpleType: String(3965) at 0", "Insert SimpleName: baseTableName(3966) into VariableDeclarationFragment(3976) at 0", "Insert InfixExpression: +(3975) into VariableDeclarationFragment(3976) at 1", "Insert SimpleName: String(3978) into SimpleType: String(3979) at 0", "Insert SimpleName: viewOfTable(3980) into VariableDeclarationFragment(3984) at 0", "Insert InfixExpression: +(3983) into VariableDeclarationFragment(3984) at 1", "Insert SimpleName: String(3986) into SimpleType: String(3987) at 0", "Insert SimpleName: ddl(3988) into VariableDeclarationFragment(3997) at 0", "Insert InfixExpression: +(3996) into VariableDeclarationFragment(3997) at 1", "Insert MethodInvocation(4001) into MethodInvocation(4006) at 0", "Insert SimpleName: execute(4002) into MethodInvocation(4006) at 1", "Insert MethodInvocation(4005) into MethodInvocation(4006) at 2", "Insert SimpleName: ddl(4008) into Assignment: =(4014) at 0", "Insert InfixExpression: +(4013) into Assignment: =(4014) at 1", "Insert MethodInvocation(4018) into MethodInvocation(4021) at 0", "Insert SimpleName: execute(4019) into MethodInvocation(4021) at 1", "Insert SimpleName: ddl(4020) into MethodInvocation(4021) at 2", "Insert SimpleName: PhoenixConnection(4023) into SimpleType: PhoenixConnection(4024) at 0", "Insert SimpleName: phoenixConn(4025) into VariableDeclarationFragment(4032) at 0", "Insert MethodInvocation(4031) into VariableDeclarationFragment(4032) at 1", "Insert SimpleName: PTable(4034) into SimpleType: PTable(4035) at 0", "Insert SimpleName: table(4036) into VariableDeclarationFragment(4045) at 0", "Insert MethodInvocation(4044) into VariableDeclarationFragment(4045) at 1", "Insert SimpleName: PName(4047) into SimpleType: PName(4048) at 0", "Insert SimpleName: tenantId(4049) into VariableDeclarationFragment(4057) at 0", "Insert ConditionalExpression(4056) into VariableDeclarationFragment(4057) at 1", "Insert SimpleName: assertFalse(4059) into MethodInvocation(4063) at 0", "Insert MethodInvocation(4062) into MethodInvocation(4063) at 1", "Insert SimpleName: assertFalse(4083) into MethodInvocation(4087) at 0", "Insert MethodInvocation(4086) into MethodInvocation(4087) at 1", "Insert ExpressionStatement(4098) into Block(4102) at 0", "Insert ExpressionStatement(4101) into Block(4102) at 1", "Insert SingleVariableDeclaration(4106) into CatchClause(4117) at 0", "Insert Block(4116) into CatchClause(4117) at 1", "Insert MethodInvocation(4121) into MethodInvocation(4127) at 0", "Insert SimpleName: execute(4122) into MethodInvocation(4127) at 1", "Insert InfixExpression: +(4126) into MethodInvocation(4127) at 2", "Insert SimpleName: phoenixConn(4138) into Assignment: =(4145) at 0", "Insert MethodInvocation(4144) into Assignment: =(4145) at 1", "Insert SimpleName: table(4147) into Assignment: =(4156) at 0", "Insert MethodInvocation(4155) into Assignment: =(4156) at 1", "Insert SimpleName: assertTrue(4158) into MethodInvocation(4162) at 0", "Insert MethodInvocation(4161) into MethodInvocation(4162) at 1", "Insert SimpleName: assertTrue(4180) into MethodInvocation(4184) at 0", "Insert MethodInvocation(4183) into MethodInvocation(4184) at 1", "Update StringLiteral: \"_VIEW\"(364) to \"_VIEW1\"", "Insert SimpleName: tableName(363) into InfixExpression: +(365) at 0", "Insert StringLiteral: \"_VIEW2\"(364) into InfixExpression: +(365) at 1", "Insert StringLiteral: \" ) UPDATE_CACHE_FREQUENCY=15 \"(378) into InfixExpression: +(384) at 7", "Insert ParenthesizedExpression(383) into InfixExpression: +(384) at 8", "Update SimpleName: viewOfTable(396) to viewOfTable1", "Insert SimpleName: viewConn(407) into MethodInvocation(409) at 0", "Insert SimpleName: createStatement(408) into MethodInvocation(409) at 1", "Insert StringLiteral: \"CREATE VIEW \"(411) into InfixExpression: +(415) at 0", "Insert SimpleName: viewOfTable2(412) into InfixExpression: +(415) at 1", "Insert StringLiteral: \" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR ) AS SELECT * FROM \"(413) into InfixExpression: +(415) at 2", "Insert SimpleName: tableName(414) into InfixExpression: +(415) at 3", "Insert SimpleName: viewConn(418) into MethodInvocation(420) at 0", "Insert SimpleName: createStatement(419) into MethodInvocation(420) at 1", "Insert StringLiteral: \"ALTER VIEW \"(422) into InfixExpression: +(425) at 0", "Insert SimpleName: viewOfTable2(423) into InfixExpression: +(425) at 1", "Insert StringLiteral: \" SET UPDATE_CACHE_FREQUENCY = 5\"(424) into InfixExpression: +(425) at 2", "Insert MethodInvocation(485) into MethodInvocation(492) at 0", "Insert SimpleName: getTable(486) into MethodInvocation(492) at 1", "Insert ClassInstanceCreation(491) into MethodInvocation(492) at 2", "Update SimpleName: viewTable(470) to viewTable1", "Update SimpleName: viewTable(477) to viewTable1", "Insert SimpleName: viewConn(508) into MethodInvocation(510) at 0", "Insert SimpleName: createStatement(509) into MethodInvocation(510) at 1", "Insert StringLiteral: \"SELECT * FROM \"(512) into InfixExpression: +(514) at 0", "Insert SimpleName: viewOfTable2(513) into InfixExpression: +(514) at 1", "Insert MethodInvocation(525) into MethodInvocation(532) at 0", "Insert SimpleName: getTable(526) into MethodInvocation(532) at 1", "Insert ClassInstanceCreation(531) into MethodInvocation(532) at 2", "Insert SimpleName: viewTable2(536) into MethodInvocation(538) at 0", "Insert SimpleName: isImmutableRows(537) into MethodInvocation(538) at 1", "Insert SimpleName: viewTable2(543) into MethodInvocation(545) at 0", "Insert SimpleName: getUpdateCacheFrequency(544) into MethodInvocation(545) at 1", "Update StringLiteral: \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=123\"(488) to \" SET IMMUTABLE_ROWS=true, UPDATE_CACHE_FREQUENCY=10\"", "Insert SimpleName: viewConn(558) into MethodInvocation(560) at 0", "Insert SimpleName: createStatement(559) into MethodInvocation(560) at 1", "Insert StringLiteral: \"SELECT * FROM \"(562) into InfixExpression: +(564) at 0", "Insert SimpleName: viewOfTable1(563) into InfixExpression: +(564) at 1", "Insert SimpleName: viewConn(567) into MethodInvocation(569) at 0", "Insert SimpleName: createStatement(568) into MethodInvocation(569) at 1", "Insert StringLiteral: \"SELECT * FROM \"(571) into InfixExpression: +(573) at 0", "Insert SimpleName: viewOfTable2(572) into InfixExpression: +(573) at 1", "Insert MethodInvocation(615) into MethodInvocation(622) at 0", "Insert SimpleName: getTable(616) into MethodInvocation(622) at 1", "Insert ClassInstanceCreation(621) into MethodInvocation(622) at 2", "Update SimpleName: viewTable(551) to viewTable1", "Update SimpleName: viewTable(558) to viewTable1", "Insert MethodInvocation(644) into MethodInvocation(651) at 0", "Insert SimpleName: getTable(645) into MethodInvocation(651) at 1", "Insert ClassInstanceCreation(650) into MethodInvocation(651) at 2", "Insert SimpleName: viewTable2(655) into MethodInvocation(657) at 0", "Insert SimpleName: isImmutableRows(656) into MethodInvocation(657) at 1", "Insert SimpleName: viewTable2(662) into MethodInvocation(664) at 0", "Insert SimpleName: getUpdateCacheFrequency(663) into MethodInvocation(664) at 1", "Update StringLiteral: \"ID VARCHAR(15) NOT NULL,\\n\"(3686) to \"%s ID VARCHAR(15) NOT NULL,\\n\"", "Insert StringLiteral: \" COL1 integer NOT NULL,\"(3791) into InfixExpression: +(3794) at 4", "Update StringLiteral: \"CONSTRAINT PK PRIMARY KEY (ID))\"(3688) to \"CONSTRAINT PK PRIMARY KEY (%s ID, COL1)) %s\"", "Insert SimpleName: generateDDL(3801) into MethodInvocation(3803) at 0", "Move SimpleName: ddl(3696) into MethodInvocation(3803) at 1", "Insert SimpleName: getUrl(3947) into MethodInvocation(3948) at 0", "Insert SimpleName: DriverManager(3956) into MethodInvocation(3959) at 0", "Insert SimpleName: getConnection(3957) into MethodInvocation(3959) at 1", "Insert SimpleName: TENANT_SPECIFIC_URL1(3958) into MethodInvocation(3959) at 2", "Insert StringLiteral: \"NONTXNTBL_\"(3967) into InfixExpression: +(3975) at 0", "Insert MethodInvocation(3969) into InfixExpression: +(3975) at 1", "Insert ParenthesizedExpression(3974) into InfixExpression: +(3975) at 2", "Insert SimpleName: baseTableName(3981) into InfixExpression: +(3983) at 0", "Insert StringLiteral: \"_VIEW\"(3982) into InfixExpression: +(3983) at 1", "Insert StringLiteral: \"CREATE TABLE \"(3989) into InfixExpression: +(3996) at 0", "Insert SimpleName: baseTableName(3990) into InfixExpression: +(3996) at 1", "Insert StringLiteral: \" (\\n\"(3991) into InfixExpression: +(3996) at 2", "Insert StringLiteral: \"%s ID VARCHAR(15) NOT NULL,\\n\"(3992) into InfixExpression: +(3996) at 3", "Insert StringLiteral: \" COL1 integer NOT NULL,\"(3993) into InfixExpression: +(3996) at 4", "Insert StringLiteral: \"CREATED_DATE DATE,\\n\"(3994) into InfixExpression: +(3996) at 5", "Insert StringLiteral: \"CONSTRAINT PK PRIMARY KEY (%s ID, COL1)) %s\"(3995) into InfixExpression: +(3996) at 6", "Insert SimpleName: conn(3999) into MethodInvocation(4001) at 0", "Insert SimpleName: createStatement(4000) into MethodInvocation(4001) at 1", "Insert SimpleName: generateDDL(4003) into MethodInvocation(4005) at 0", "Insert SimpleName: ddl(4004) into MethodInvocation(4005) at 1", "Insert StringLiteral: \"CREATE VIEW \"(4009) into InfixExpression: +(4013) at 0", "Insert SimpleName: viewOfTable(4010) into InfixExpression: +(4013) at 1", "Insert StringLiteral: \" AS SELECT * FROM \"(4011) into InfixExpression: +(4013) at 2", "Insert SimpleName: baseTableName(4012) into InfixExpression: +(4013) at 3", "Insert SimpleName: viewConn(4016) into MethodInvocation(4018) at 0", "Insert SimpleName: createStatement(4017) into MethodInvocation(4018) at 1", "Insert SimpleName: conn(4026) into MethodInvocation(4031) at 0", "Insert SimpleName: unwrap(4027) into MethodInvocation(4031) at 1", "Insert TypeLiteral(4030) into MethodInvocation(4031) at 2", "Insert SimpleName: phoenixConn(4037) into MethodInvocation(4044) at 0", "Insert SimpleName: getTable(4038) into MethodInvocation(4044) at 1", "Insert ClassInstanceCreation(4043) into MethodInvocation(4044) at 2", "Insert SimpleName: isMultiTenant(4050) into ConditionalExpression(4056) at 0", "Insert MethodInvocation(4054) into ConditionalExpression(4056) at 1", "Insert NullLiteral(4055) into ConditionalExpression(4056) at 2", "Insert SimpleName: table(4060) into MethodInvocation(4062) at 0", "Insert SimpleName: isAppendOnlySchema(4061) into MethodInvocation(4062) at 1", "Insert SimpleName: viewTable(4084) into MethodInvocation(4086) at 0", "Insert SimpleName: isAppendOnlySchema(4085) into MethodInvocation(4086) at 1", "Insert MethodInvocation(4097) into ExpressionStatement(4098) at 0", "Insert MethodInvocation(4100) into ExpressionStatement(4101) at 0", "Insert SimpleType: SQLException(4104) into SingleVariableDeclaration(4106) at 0", "Insert SimpleName: e(4105) into SingleVariableDeclaration(4106) at 1", "Insert ExpressionStatement(4115) into Block(4116) at 0", "Insert SimpleName: conn(4119) into MethodInvocation(4121) at 0", "Insert SimpleName: createStatement(4120) into MethodInvocation(4121) at 1", "Insert StringLiteral: \"ALTER TABLE \"(4123) into InfixExpression: +(4126) at 0", "Insert SimpleName: baseTableName(4124) into InfixExpression: +(4126) at 1", "Insert StringLiteral: \" SET APPEND_ONLY_SCHEMA = true\"(4125) into InfixExpression: +(4126) at 2", "Insert SimpleName: conn(4139) into MethodInvocation(4144) at 0", "Insert SimpleName: unwrap(4140) into MethodInvocation(4144) at 1", "Insert TypeLiteral(4143) into MethodInvocation(4144) at 2", "Insert SimpleName: phoenixConn(4148) into MethodInvocation(4155) at 0", "Insert SimpleName: getTable(4149) into MethodInvocation(4155) at 1", "Insert ClassInstanceCreation(4154) into MethodInvocation(4155) at 2", "Insert SimpleName: table(4159) into MethodInvocation(4161) at 0", "Insert SimpleName: isAppendOnlySchema(4160) into MethodInvocation(4161) at 1", "Insert SimpleName: viewTable(4181) into MethodInvocation(4183) at 0", "Insert SimpleName: isAppendOnlySchema(4182) into MethodInvocation(4183) at 1", "Insert ConditionalExpression(382) into ParenthesizedExpression(383) at 0", "Insert SimpleName: viewConn(480) into MethodInvocation(485) at 0", "Insert SimpleName: unwrap(481) into MethodInvocation(485) at 1", "Insert TypeLiteral(484) into MethodInvocation(485) at 2", "Insert SimpleType: PTableKey(488) into ClassInstanceCreation(491) at 0", "Insert SimpleName: tenantId(489) into ClassInstanceCreation(491) at 1", "Insert SimpleName: viewOfTable1(490) into ClassInstanceCreation(491) at 2", "Insert SimpleName: viewConn(520) into MethodInvocation(525) at 0", "Insert SimpleName: unwrap(521) into MethodInvocation(525) at 1", "Insert TypeLiteral(524) into MethodInvocation(525) at 2", "Insert SimpleType: PTableKey(528) into ClassInstanceCreation(531) at 0", "Insert SimpleName: tenantId(529) into ClassInstanceCreation(531) at 1", "Insert SimpleName: viewOfTable2(530) into ClassInstanceCreation(531) at 2", "Insert SimpleName: viewConn(610) into MethodInvocation(615) at 0", "Insert SimpleName: unwrap(611) into MethodInvocation(615) at 1", "Insert TypeLiteral(614) into MethodInvocation(615) at 2", "Insert SimpleType: PTableKey(618) into ClassInstanceCreation(621) at 0", "Insert SimpleName: tenantId(619) into ClassInstanceCreation(621) at 1", "Insert SimpleName: viewOfTable1(620) into ClassInstanceCreation(621) at 2", "Insert SimpleName: viewConn(639) into MethodInvocation(644) at 0", "Insert SimpleName: unwrap(640) into MethodInvocation(644) at 1", "Insert TypeLiteral(643) into MethodInvocation(644) at 2", "Insert SimpleType: PTableKey(647) into ClassInstanceCreation(650) at 0", "Insert SimpleName: tenantId(648) into ClassInstanceCreation(650) at 1", "Insert SimpleName: viewOfTable2(649) into ClassInstanceCreation(650) at 2", "Insert SimpleName: generateUniqueName(3968) into MethodInvocation(3969) at 0", "Insert ConditionalExpression(3973) into ParenthesizedExpression(3974) at 0", "Insert SimpleType: PhoenixConnection(4029) into TypeLiteral(4030) at 0", "Insert SimpleType: PTableKey(4040) into ClassInstanceCreation(4043) at 0", "Insert NullLiteral(4041) into ClassInstanceCreation(4043) at 1", "Insert SimpleName: baseTableName(4042) into ClassInstanceCreation(4043) at 2", "Insert SimpleName: PNameFactory(4051) into MethodInvocation(4054) at 0", "Insert SimpleName: newName(4052) into MethodInvocation(4054) at 1", "Insert StringLiteral: \"tenant1\"(4053) into MethodInvocation(4054) at 2", "Insert MethodInvocation(4091) into MethodInvocation(4097) at 0", "Insert SimpleName: execute(4092) into MethodInvocation(4097) at 1", "Insert InfixExpression: +(4096) into MethodInvocation(4097) at 2", "Insert SimpleName: fail(4099) into MethodInvocation(4100) at 0", "Insert SimpleName: SQLException(4103) into SimpleType: SQLException(4104) at 0", "Insert MethodInvocation(4114) into ExpressionStatement(4115) at 0", "Insert SimpleType: PhoenixConnection(4142) into TypeLiteral(4143) at 0", "Insert SimpleType: PTableKey(4151) into ClassInstanceCreation(4154) at 0", "Insert NullLiteral(4152) into ClassInstanceCreation(4154) at 1", "Insert SimpleName: baseTableName(4153) into ClassInstanceCreation(4154) at 2", "Insert SimpleName: isMultiTenant(379) into ConditionalExpression(382) at 0", "Insert StringLiteral: \",%s\"(380) into ConditionalExpression(382) at 1", "Insert StringLiteral: \"%s\"(381) into ConditionalExpression(382) at 2", "Insert SimpleType: PhoenixConnection(483) into TypeLiteral(484) at 0", "Insert SimpleName: PTableKey(487) into SimpleType: PTableKey(488) at 0", "Insert SimpleType: PhoenixConnection(523) into TypeLiteral(524) at 0", "Insert SimpleName: PTableKey(527) into SimpleType: PTableKey(528) at 0", "Insert SimpleType: PhoenixConnection(613) into TypeLiteral(614) at 0", "Insert SimpleName: PTableKey(617) into SimpleType: PTableKey(618) at 0", "Insert SimpleType: PhoenixConnection(642) into TypeLiteral(643) at 0", "Insert SimpleName: PTableKey(646) into SimpleType: PTableKey(647) at 0", "Insert SimpleName: isMultiTenant(3970) into ConditionalExpression(3973) at 0", "Insert StringLiteral: \"0\"(3971) into ConditionalExpression(3973) at 1", "Insert StringLiteral: \"1\"(3972) into ConditionalExpression(3973) at 2", "Insert SimpleName: PhoenixConnection(4028) into SimpleType: PhoenixConnection(4029) at 0", "Insert SimpleName: PTableKey(4039) into SimpleType: PTableKey(4040) at 0", "Insert SimpleName: viewConn(4089) into MethodInvocation(4091) at 0", "Insert SimpleName: createStatement(4090) into MethodInvocation(4091) at 1", "Insert StringLiteral: \"ALTER VIEW \"(4093) into InfixExpression: +(4096) at 0", "Insert SimpleName: viewOfTable(4094) into InfixExpression: +(4096) at 1", "Insert StringLiteral: \" SET APPEND_ONLY_SCHEMA = true\"(4095) into InfixExpression: +(4096) at 2", "Insert SimpleName: assertEquals(4107) into MethodInvocation(4114) at 0", "Insert MethodInvocation(4110) into MethodInvocation(4114) at 1", "Insert MethodInvocation(4113) into MethodInvocation(4114) at 2", "Insert SimpleName: PhoenixConnection(4141) into SimpleType: PhoenixConnection(4142) at 0", "Insert SimpleName: PTableKey(4150) into SimpleType: PTableKey(4151) at 0", "Insert SimpleName: PhoenixConnection(482) into SimpleType: PhoenixConnection(483) at 0", "Insert SimpleName: PhoenixConnection(522) into SimpleType: PhoenixConnection(523) at 0", "Insert SimpleName: PhoenixConnection(612) into SimpleType: PhoenixConnection(613) at 0", "Insert SimpleName: PhoenixConnection(641) into SimpleType: PhoenixConnection(642) at 0", "Insert QualifiedName: SQLExceptionCode.CANNOT_ALTER_TABLE_PROPERTY_ON_VIEW(4108) into MethodInvocation(4110) at 0", "Insert SimpleName: getErrorCode(4109) into MethodInvocation(4110) at 1", "Insert SimpleName: e(4111) into MethodInvocation(4113) at 0", "Insert SimpleName: getErrorCode(4112) into MethodInvocation(4113) at 1", "Delete QualifiedName: org.apache.phoenix.util.TestUtil.TEST_PROPERTIES(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Properties(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.phoenix.util.PropertiesUtil(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: org.apache.phoenix.util.SchemaUtil(60)", "Delete ImportDeclaration(61)", "Delete StringLiteral: \" ) %s\"(378)"]}}, {"AppendOnlySchemaIT_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleName: PTable to SimpleType: PTable at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: view to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PTable to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getUpdateCacheFrequency to MethodInvocation at 1", "INS ExpressionStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 1000 to MethodInvocation at 1", "INS SimpleName: view to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 6", "operations": ["INS SimpleType: PColumn to TypeLiteral at 0", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: anyListOf to MethodInvocation at 0", "INS SimpleName: PColumn to SimpleType: PColumn at 0", "INS TypeLiteral to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: view to MethodInvocation at 0", "operations": ["INS SimpleName: view to MethodInvocation at 0"]}, {"root": "DEL StringLiteral: \" UPDATE_CACHE_FREQUENCY=1000\"", "operations": ["DEL StringLiteral: \" UPDATE_CACHE_FREQUENCY=1000\""]}]}}, {"AppendOnlySchemaIT_diff": {"operations": ["Insert VariableDeclarationStatement(1311) into Block(1326) at 6", "Insert ExpressionStatement(1325) into Block(1326) at 8", "Insert SimpleType: PTable(1298) into VariableDeclarationStatement(1311) at 0", "Insert VariableDeclarationFragment(1310) into VariableDeclarationStatement(1311) at 1", "Insert MethodInvocation(1324) into ExpressionStatement(1325) at 0", "Insert MethodInvocation(427) into MethodInvocation(428) at 6", "Insert SimpleName: PTable(1297) into SimpleType: PTable(1298) at 0", "Insert SimpleName: view(1299) into VariableDeclarationFragment(1310) at 0", "Move MethodInvocation(1304) into VariableDeclarationFragment(1310) at 1", "Insert SimpleName: assertEquals(1319) into MethodInvocation(1324) at 0", "Insert NumberLiteral: 1000(1320) into MethodInvocation(1324) at 1", "Insert MethodInvocation(1323) into MethodInvocation(1324) at 2", "Insert SimpleName: anyListOf(423) into MethodInvocation(427) at 0", "Insert TypeLiteral(426) into MethodInvocation(427) at 1", "Insert SimpleName: view(1314) into MethodInvocation(1316) at 0", "Insert SimpleName: view(1321) into MethodInvocation(1323) at 0", "Insert SimpleName: getUpdateCacheFrequency(1322) into MethodInvocation(1323) at 1", "Insert SimpleType: PColumn(425) into TypeLiteral(426) at 0", "Insert SimpleName: PColumn(424) into SimpleType: PColumn(425) at 0", "Delete StringLiteral: \" UPDATE_CACHE_FREQUENCY=1000\"(1278)"]}}, {"ImmutableTablePropIT_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: org.junit.Assert.assertEquals to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.junit.Assert.fail to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: java.sql.SQLException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: org.apache.phoenix.exception.SQLExceptionCode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 5", "operations": ["INS StringLiteral: \"\" to MethodInvocation at 2", "INS SimpleName: fail to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID to MethodInvocation at 0", "INS SimpleName: TEST_PROPERTIES to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getUrl to MethodInvocation at 0", "INS SimpleName: Test to MarkerAnnotation at 0", "INS StringLiteral: \"CREATE IMMUTABLE TABLE  \" to InfixExpression: + at 0", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS StringLiteral: \"CREATE IMMUTABLE TABLE  \" to InfixExpression: + at 0", "INS TryStatement to Block at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: mutableDataTableFullName to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS QualifiedName: SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID to MethodInvocation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: ddl to VariableDeclarationFragment at 0", "INS TryStatement to Block at 1", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: DriverManager to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleType: Connection to VariableDeclarationExpression at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to CatchClause at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: createStatement to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: deepCopy to MethodInvocation at 1", "INS SimpleType: Properties to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS StringLiteral: \"  CONSTRAINT pk PRIMARY KEY (a_string)) IMMUTABLE_ROWS=true\" to InfixExpression: + at 3", "INS SimpleName: ddl to MethodInvocation at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS SimpleName: props to VariableDeclarationFragment at 0", "INS SimpleName: ddl to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: props to MethodInvocation at 3", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationExpression to TryStatement at 0", "INS Block to TryStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS Block to TryStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to CatchClause at 1", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS StringLiteral: \"\" to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: mutableDataTableFullName to InfixExpression: + at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: execute to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getConnection to MethodInvocation at 1", "INS SimpleName: immutableDataTableFullName to InfixExpression: + at 1", "INS TryStatement to Block at 3", "INS SimpleName: conn to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: generateUniqueName to MethodInvocation at 0", "INS StringLiteral: \"  (a_string varchar not null, col1 integer\" to InfixExpression: + at 2", "INS SimpleName: getTableName to MethodInvocation at 1", "INS SimpleName: testImmutableKeywordAndProperty to MethodDeclaration at 3", "INS SimpleName: fail to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: PropertiesUtil to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: Statement to VariableDeclarationStatement at 0", "INS SimpleName: immutableDataTableFullName to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: getTableName to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"  (a_string varchar not null, col1 integer\" to InfixExpression: + at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: Statement to SimpleType: Statement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS Block to TryStatement at 0", "INS SimpleName: getErrorCode to MethodInvocation at 1", "INS StringLiteral: \"  CONSTRAINT pk PRIMARY KEY (a_string))  IMMUTABLE_ROWS=false\" to InfixExpression: + at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ddl to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Connection to SimpleType: Connection at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Properties to SimpleType: Properties at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: generateUniqueName to MethodInvocation at 0", "INS ExpressionStatement to Block at 0"]}]}}, {"ImmutableTablePropIT_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(452) at 2", "Insert ImportDeclaration(11) into CompilationUnit(452) at 5", "Insert ImportDeclaration(17) into CompilationUnit(452) at 8", "Insert ImportDeclaration(23) into CompilationUnit(452) at 11", "Insert QualifiedName: org.junit.Assert.assertEquals(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: org.junit.Assert.fail(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.sql.SQLException(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: org.apache.phoenix.exception.SQLExceptionCode(22) into ImportDeclaration(23) at 0", "Insert MethodDeclaration(450) into TypeDeclaration: class(451) at 5", "Insert MarkerAnnotation(321) into MethodDeclaration(450) at 0", "Insert Modifier: public(322) into MethodDeclaration(450) at 1", "Insert PrimitiveType: void(323) into MethodDeclaration(450) at 2", "Insert SimpleName: testImmutableKeywordAndProperty(324) into MethodDeclaration(450) at 3", "Insert SimpleType: Exception(326) into MethodDeclaration(450) at 4", "Insert Block(449) into MethodDeclaration(450) at 5", "Insert SimpleName: Test(320) into MarkerAnnotation(321) at 0", "Insert SimpleName: Exception(325) into SimpleType: Exception(326) at 0", "Insert VariableDeclarationStatement(335) into Block(449) at 0", "Insert VariableDeclarationStatement(346) into Block(449) at 1", "Insert VariableDeclarationStatement(357) into Block(449) at 2", "Insert TryStatement(448) into Block(449) at 3", "Insert SimpleType: Properties(328) into VariableDeclarationStatement(335) at 0", "Insert VariableDeclarationFragment(334) into VariableDeclarationStatement(335) at 1", "Insert SimpleType: String(337) into VariableDeclarationStatement(346) at 0", "Insert VariableDeclarationFragment(345) into VariableDeclarationStatement(346) at 1", "Insert SimpleType: String(348) into VariableDeclarationStatement(357) at 0", "Insert VariableDeclarationFragment(356) into VariableDeclarationStatement(357) at 1", "Insert VariableDeclarationExpression(368) into TryStatement(448) at 0", "Insert Block(447) into TryStatement(448) at 1", "Insert SimpleName: Properties(327) into SimpleType: Properties(328) at 0", "Insert SimpleName: props(329) into VariableDeclarationFragment(334) at 0", "Insert MethodInvocation(333) into VariableDeclarationFragment(334) at 1", "Insert SimpleName: String(336) into SimpleType: String(337) at 0", "Insert SimpleName: immutableDataTableFullName(338) into VariableDeclarationFragment(345) at 0", "Insert MethodInvocation(344) into VariableDeclarationFragment(345) at 1", "Insert SimpleName: String(347) into SimpleType: String(348) at 0", "Insert SimpleName: mutableDataTableFullName(349) into VariableDeclarationFragment(356) at 0", "Insert MethodInvocation(355) into VariableDeclarationFragment(356) at 1", "Insert SimpleType: Connection(359) into VariableDeclarationExpression(368) at 0", "Insert VariableDeclarationFragment(367) into VariableDeclarationExpression(368) at 1", "Insert VariableDeclarationStatement(376) into Block(447) at 0", "Insert TryStatement(411) into Block(447) at 1", "Insert TryStatement(446) into Block(447) at 2", "Insert SimpleName: PropertiesUtil(330) into MethodInvocation(333) at 0", "Insert SimpleName: deepCopy(331) into MethodInvocation(333) at 1", "Insert SimpleName: TEST_PROPERTIES(332) into MethodInvocation(333) at 2", "Insert SimpleName: SchemaUtil(339) into MethodInvocation(344) at 0", "Insert SimpleName: getTableName(340) into MethodInvocation(344) at 1", "Insert StringLiteral: \"\"(341) into MethodInvocation(344) at 2", "Insert MethodInvocation(343) into MethodInvocation(344) at 3", "Insert SimpleName: SchemaUtil(350) into MethodInvocation(355) at 0", "Insert SimpleName: getTableName(351) into MethodInvocation(355) at 1", "Insert StringLiteral: \"\"(352) into MethodInvocation(355) at 2", "Insert MethodInvocation(354) into MethodInvocation(355) at 3", "Insert SimpleName: Connection(358) into SimpleType: Connection(359) at 0", "Insert SimpleName: conn(360) into VariableDeclarationFragment(367) at 0", "Insert MethodInvocation(366) into VariableDeclarationFragment(367) at 1", "Insert SimpleType: Statement(370) into VariableDeclarationStatement(376) at 0", "Insert VariableDeclarationFragment(375) into VariableDeclarationStatement(376) at 1", "Insert Block(395) into TryStatement(411) at 0", "Insert CatchClause(410) into TryStatement(411) at 1", "Insert Block(430) into TryStatement(446) at 0", "Insert CatchClause(445) into TryStatement(446) at 1", "Insert SimpleName: generateUniqueName(342) into MethodInvocation(343) at 0", "Insert SimpleName: generateUniqueName(353) into MethodInvocation(354) at 0", "Insert SimpleName: DriverManager(361) into MethodInvocation(366) at 0", "Insert SimpleName: getConnection(362) into MethodInvocation(366) at 1", "Insert MethodInvocation(364) into MethodInvocation(366) at 2", "Insert SimpleName: props(365) into MethodInvocation(366) at 3", "Insert SimpleName: Statement(369) into SimpleType: Statement(370) at 0", "Insert SimpleName: stmt(371) into VariableDeclarationFragment(375) at 0", "Insert MethodInvocation(374) into VariableDeclarationFragment(375) at 1", "Insert VariableDeclarationStatement(386) into Block(395) at 0", "Insert ExpressionStatement(391) into Block(395) at 1", "Insert ExpressionStatement(394) into Block(395) at 2", "Insert SingleVariableDeclaration(399) into CatchClause(410) at 0", "Insert Block(409) into CatchClause(410) at 1", "Insert VariableDeclarationStatement(421) into Block(430) at 0", "Insert ExpressionStatement(426) into Block(430) at 1", "Insert ExpressionStatement(429) into Block(430) at 2", "Insert SingleVariableDeclaration(434) into CatchClause(445) at 0", "Insert Block(444) into CatchClause(445) at 1", "Insert SimpleName: getUrl(363) into MethodInvocation(364) at 0", "Insert SimpleName: conn(372) into MethodInvocation(374) at 0", "Insert SimpleName: createStatement(373) into MethodInvocation(374) at 1", "Insert SimpleType: String(378) into VariableDeclarationStatement(386) at 0", "Insert VariableDeclarationFragment(385) into VariableDeclarationStatement(386) at 1", "Insert MethodInvocation(390) into ExpressionStatement(391) at 0", "Insert MethodInvocation(393) into ExpressionStatement(394) at 0", "Insert SimpleType: SQLException(397) into SingleVariableDeclaration(399) at 0", "Insert SimpleName: e(398) into SingleVariableDeclaration(399) at 1", "Insert ExpressionStatement(408) into Block(409) at 0", "Insert SimpleType: String(413) into VariableDeclarationStatement(421) at 0", "Insert VariableDeclarationFragment(420) into VariableDeclarationStatement(421) at 1", "Insert MethodInvocation(425) into ExpressionStatement(426) at 0", "Insert MethodInvocation(428) into ExpressionStatement(429) at 0", "Insert SimpleType: SQLException(432) into SingleVariableDeclaration(434) at 0", "Insert SimpleName: e(433) into SingleVariableDeclaration(434) at 1", "Insert ExpressionStatement(443) into Block(444) at 0", "Insert SimpleName: String(377) into SimpleType: String(378) at 0", "Insert SimpleName: ddl(379) into VariableDeclarationFragment(385) at 0", "Insert InfixExpression: +(384) into VariableDeclarationFragment(385) at 1", "Insert SimpleName: stmt(387) into MethodInvocation(390) at 0", "Insert SimpleName: execute(388) into MethodInvocation(390) at 1", "Insert SimpleName: ddl(389) into MethodInvocation(390) at 2", "Insert SimpleName: fail(392) into MethodInvocation(393) at 0", "Insert SimpleName: SQLException(396) into SimpleType: SQLException(397) at 0", "Insert MethodInvocation(407) into ExpressionStatement(408) at 0", "Insert SimpleName: String(412) into SimpleType: String(413) at 0", "Insert SimpleName: ddl(414) into VariableDeclarationFragment(420) at 0", "Insert InfixExpression: +(419) into VariableDeclarationFragment(420) at 1", "Insert SimpleName: stmt(422) into MethodInvocation(425) at 0", "Insert SimpleName: execute(423) into MethodInvocation(425) at 1", "Insert SimpleName: ddl(424) into MethodInvocation(425) at 2", "Insert SimpleName: fail(427) into MethodInvocation(428) at 0", "Insert SimpleName: SQLException(431) into SimpleType: SQLException(432) at 0", "Insert MethodInvocation(442) into ExpressionStatement(443) at 0", "Insert StringLiteral: \"CREATE IMMUTABLE TABLE  \"(380) into InfixExpression: +(384) at 0", "Insert SimpleName: immutableDataTableFullName(381) into InfixExpression: +(384) at 1", "Insert StringLiteral: \"  (a_string varchar not null, col1 integer\"(382) into InfixExpression: +(384) at 2", "Insert StringLiteral: \"  CONSTRAINT pk PRIMARY KEY (a_string)) IMMUTABLE_ROWS=true\"(383) into InfixExpression: +(384) at 3", "Insert SimpleName: assertEquals(400) into MethodInvocation(407) at 0", "Insert MethodInvocation(403) into MethodInvocation(407) at 1", "Insert MethodInvocation(406) into MethodInvocation(407) at 2", "Insert StringLiteral: \"CREATE IMMUTABLE TABLE  \"(415) into InfixExpression: +(419) at 0", "Insert SimpleName: mutableDataTableFullName(416) into InfixExpression: +(419) at 1", "Insert StringLiteral: \"  (a_string varchar not null, col1 integer\"(417) into InfixExpression: +(419) at 2", "Insert StringLiteral: \"  CONSTRAINT pk PRIMARY KEY (a_string))  IMMUTABLE_ROWS=false\"(418) into InfixExpression: +(419) at 3", "Insert SimpleName: assertEquals(435) into MethodInvocation(442) at 0", "Insert MethodInvocation(438) into MethodInvocation(442) at 1", "Insert MethodInvocation(441) into MethodInvocation(442) at 2", "Insert QualifiedName: SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID(401) into MethodInvocation(403) at 0", "Insert SimpleName: getErrorCode(402) into MethodInvocation(403) at 1", "Insert SimpleName: e(404) into MethodInvocation(406) at 0", "Insert SimpleName: getErrorCode(405) into MethodInvocation(406) at 1", "Insert QualifiedName: SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID(436) into MethodInvocation(438) at 0", "Insert SimpleName: getErrorCode(437) into MethodInvocation(438) at 1", "Insert SimpleName: e(439) into MethodInvocation(441) at 0", "Insert SimpleName: getErrorCode(440) into MethodInvocation(441) at 1"]}}, {"MetaDataEndpointImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 70", "operations": ["INS QualifiedName: java.util.Map to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 70"]}, {"root": "INS ImportDeclaration to CompilationUnit at 208", "operations": ["INS QualifiedName: com.google.common.collect.Maps to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 208"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 5"]}, {"root": "UPDATE from List<Cell> to Map<TableProperty,Cell>", "operations": ["UPD ParameterizedType: List<Cell> from List<Cell> to Map<TableProperty,Cell>"]}, {"root": "UPDATE from List to Map", "operations": ["UPD SimpleType: List from List to Map", "UPD SimpleName: List from List to Map"]}, {"root": "INS SimpleType: TableProperty to ParameterizedType: List<Cell> at 1", "operations": ["INS SimpleType: TableProperty to ParameterizedType: List<Cell> at 1", "INS SimpleName: TableProperty to SimpleType: TableProperty at 0"]}, {"root": "UPDATE from tablePropertyCells to tablePropertyCellMap", "operations": ["UPD SimpleName: tablePropertyCells from tablePropertyCells to tablePropertyCellMap", "UPD SimpleName: tablePropertyCells from tablePropertyCells to tablePropertyCellMap", "UPD SimpleName: tablePropertyCells from tablePropertyCells to tablePropertyCellMap"]}, {"root": "UPDATE from Lists to Maps", "operations": ["UPD SimpleName: Lists from Lists to Maps"]}, {"root": "UPDATE from newArrayListWithExpectedSize to newHashMapWithExpectedSize", "operations": ["UPD SimpleName: newArrayListWithExpectedSize from newArrayListWithExpectedSize to newHashMapWithExpectedSize"]}, {"root": "INS IfStatement to Block at 20", "operations": ["INS ReturnStatement to Block at 1", "INS SimpleName: table to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 20", "INS ReturnStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: cacheKey to MethodInvocation at 2", "INS SimpleName: buildTable to MethodInvocation at 0", "INS SimpleName: region to MethodInvocation at 3", "INS SimpleName: key to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS SimpleName: result to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: table to ClassInstanceCreation at 3", "INS QualifiedName: HConstants.LATEST_TIMESTAMP to MethodInvocation at 4"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS MethodInvocation to EnhancedForStatement at 1", "operations": ["INS SimpleName: values to MethodInvocation at 1", "INS SimpleName: TableProperty to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: getPTableValue to MethodInvocation at 1", "INS SimpleName: view to MethodInvocation at 2", "INS SimpleName: basePhysicalTable to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tableProp to MethodInvocation at 0", "INS SimpleName: tablePropertyCell to InfixExpression: != at 0", "INS SimpleName: tablePropertyCellMap to MethodInvocation at 0", "INS SimpleName: tableProp to MethodInvocation at 2", "INS SimpleName: tableProp to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS IfStatement to Block at 1", "INS InfixExpression: || to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: tableProp to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: isMutableOnView to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: tablePropertyCell to VariableDeclarationFragment at 0", "INS SimpleName: getPTableValue to MethodInvocation at 1"]}, {"root": "INS SimpleType: TableProperty to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: TableProperty to SingleVariableDeclaration at 0", "INS SimpleName: TableProperty to SimpleType: TableProperty at 0"]}, {"root": "UPDATE from tablePropertyCell to tableProp", "operations": ["UPD SimpleName: tablePropertyCell from tablePropertyCell to tableProp"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Cell to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleName: currentTime to ClassInstanceCreation at 2", "MOV SimpleType: MetaDataMutationResult to ClassInstanceCreation at 0", "MOV QualifiedName: MutationCode.TABLE_ALREADY_EXISTS to ClassInstanceCreation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from add to put", "operations": ["UPD SimpleName: add from add to put"]}, {"root": "INS SimpleName: tableProp to MethodInvocation at 2", "operations": ["INS SimpleName: tableProp to MethodInvocation at 2"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ConditionalExpression", "DEL ClassInstanceCreation", "DEL SimpleName: result", "DEL ReturnStatement", "DEL NullLiteral"]}, {"root": "DEL SimpleName: tablePropertyCells", "operations": ["DEL SimpleName: tablePropertyCells"]}]}}, {"MetaDataEndpointImpl_diff": {"operations": ["Insert ImportDeclaration(141) into CompilationUnit(20437) at 70", "Insert ImportDeclaration(417) into CompilationUnit(20437) at 208", "Insert QualifiedName: java.util.Map(140) into ImportDeclaration(141) at 0", "Insert QualifiedName: com.google.common.collect.Maps(416) into ImportDeclaration(417) at 0", "Move VariableDeclarationStatement(10368) into Block(10855) at 5", "Update ParameterizedType: List<Cell>(11546) to Map<TableProperty,Cell>", "Update SimpleType: List(11543) to Map", "Insert SimpleType: TableProperty(11561) into ParameterizedType: Map<TableProperty,Cell>(11564) at 1", "Update SimpleName: tablePropertyCells(11547) to tablePropertyCellMap", "Update SimpleName: List(11542) to Map", "Insert SimpleName: TableProperty(11560) into SimpleType: TableProperty(11561) at 0", "Update SimpleName: Lists(11548) to Maps", "Update SimpleName: newArrayListWithExpectedSize(11549) to newHashMapWithExpectedSize", "Insert IfStatement(10826) into Block(10827) at 20", "Move InfixExpression: !=(10801) into IfStatement(10826) at 0", "Insert Block(10808) into IfStatement(10826) at 1", "Insert Block(10825) into IfStatement(10826) at 2", "Update SimpleName: tablePropertyCells(12428) to tablePropertyCellMap", "Insert MethodInvocation(12467) into EnhancedForStatement(12524) at 1", "Insert Block(12523) into EnhancedForStatement(12524) at 2", "Insert ReturnStatement(10807) into Block(10808) at 0", "Insert ExpressionStatement(10817) into Block(10825) at 0", "Insert ReturnStatement(10824) into Block(10825) at 1", "Insert SimpleType: TableProperty(12462) into SingleVariableDeclaration(12464) at 0", "Update SimpleName: tablePropertyCell(12444) to tableProp", "Insert SimpleName: TableProperty(12465) into MethodInvocation(12467) at 0", "Insert SimpleName: values(12466) into MethodInvocation(12467) at 1", "Insert VariableDeclarationStatement(12476) into Block(12523) at 0", "Insert IfStatement(12522) into Block(12523) at 1", "Insert SimpleName: result(10806) into ReturnStatement(10807) at 0", "Insert Assignment: =(10816) into ExpressionStatement(10817) at 0", "Insert ClassInstanceCreation(10823) into ReturnStatement(10824) at 0", "Insert SimpleName: TableProperty(12461) into SimpleType: TableProperty(12462) at 0", "Move SimpleType: Cell(12443) into VariableDeclarationStatement(12476) at 0", "Insert VariableDeclarationFragment(12475) into VariableDeclarationStatement(12476) at 1", "Insert InfixExpression: !=(12479) into IfStatement(12522) at 0", "Insert Block(12521) into IfStatement(12522) at 1", "Insert SimpleName: table(10809) into Assignment: =(10816) at 0", "Insert MethodInvocation(10815) into Assignment: =(10816) at 1", "Move SimpleType: MetaDataMutationResult(10804) into ClassInstanceCreation(10823) at 0", "Move QualifiedName: MutationCode.TABLE_ALREADY_EXISTS(10805) into ClassInstanceCreation(10823) at 1", "Move SimpleName: currentTime(10806) into ClassInstanceCreation(10823) at 2", "Insert SimpleName: table(10822) into ClassInstanceCreation(10823) at 3", "Insert SimpleName: tablePropertyCell(12470) into VariableDeclarationFragment(12475) at 0", "Insert MethodInvocation(12474) into VariableDeclarationFragment(12475) at 1", "Insert SimpleName: tablePropertyCell(12477) into InfixExpression: !=(12479) at 0", "Insert NullLiteral(12478) into InfixExpression: !=(12479) at 1", "Insert IfStatement(12520) into Block(12521) at 0", "Insert SimpleName: buildTable(10810) into MethodInvocation(10815) at 0", "Insert SimpleName: key(10811) into MethodInvocation(10815) at 1", "Insert SimpleName: cacheKey(10812) into MethodInvocation(10815) at 2", "Insert SimpleName: region(10813) into MethodInvocation(10815) at 3", "Insert QualifiedName: HConstants.LATEST_TIMESTAMP(10814) into MethodInvocation(10815) at 4", "Insert SimpleName: tablePropertyCellMap(12471) into MethodInvocation(12474) at 0", "Insert SimpleName: get(12472) into MethodInvocation(12474) at 1", "Insert SimpleName: tableProp(12473) into MethodInvocation(12474) at 2", "Insert InfixExpression: ||(12494) into IfStatement(12520) at 0", "Move Block(12471) into IfStatement(12520) at 1", "Insert PrefixExpression: !(12483) into InfixExpression: ||(12494) at 0", "Insert MethodInvocation(12493) into InfixExpression: ||(12494) at 1", "Insert MethodInvocation(12482) into PrefixExpression: !(12483) at 0", "Insert MethodInvocation(12487) into MethodInvocation(12493) at 0", "Insert SimpleName: equals(12488) into MethodInvocation(12493) at 1", "Insert MethodInvocation(12492) into MethodInvocation(12493) at 2", "Insert SimpleName: tableProp(12480) into MethodInvocation(12482) at 0", "Insert SimpleName: isMutableOnView(12481) into MethodInvocation(12482) at 1", "Insert SimpleName: tableProp(12484) into MethodInvocation(12487) at 0", "Insert SimpleName: getPTableValue(12485) into MethodInvocation(12487) at 1", "Insert SimpleName: view(12486) into MethodInvocation(12487) at 2", "Insert SimpleName: tableProp(12489) into MethodInvocation(12492) at 0", "Insert SimpleName: getPTableValue(12490) into MethodInvocation(12492) at 1", "Insert SimpleName: basePhysicalTable(12491) into MethodInvocation(12492) at 2", "Update SimpleName: tablePropertyCells(11737) to tablePropertyCellMap", "Update SimpleName: add(11738) to put", "Insert SimpleName: tableProp(11757) into MethodInvocation(11759) at 2", "Delete SimpleName: result(10802)", "Delete NullLiteral(10807)", "Delete ClassInstanceCreation(10808)", "Delete ConditionalExpression(10809)", "Delete ReturnStatement(10810)", "Delete SimpleName: tablePropertyCells(12446)"]}}, {"SQLExceptionCode_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 173", "operations": ["INS SimpleName: IMMUTABLE_TABLE_PROPERTY_INVALID to EnumConstantDeclaration at 0", "INS StringLiteral: \"IMMUTABLE table property cannot be used with CREATE IMMUTABLE TABLE statement \" to EnumConstantDeclaration at 3", "INS NumberLiteral: 1135 to EnumConstantDeclaration at 1", "INS EnumConstantDeclaration to EnumDeclaration at 173", "INS StringLiteral: \"XCL35\" to EnumConstantDeclaration at 2"]}]}}, {"SQLExceptionCode_diff": {"operations": ["Insert EnumConstantDeclaration(1363) into EnumDeclaration(1922) at 173", "Insert SimpleName: IMMUTABLE_TABLE_PROPERTY_INVALID(1359) into EnumConstantDeclaration(1363) at 0", "Insert NumberLiteral: 1135(1360) into EnumConstantDeclaration(1363) at 1", "Insert StringLiteral: \"XCL35\"(1361) into EnumConstantDeclaration(1363) at 2", "Insert StringLiteral: \"IMMUTABLE table property cannot be used with CREATE IMMUTABLE TABLE statement \"(1362) into EnumConstantDeclaration(1363) at 3"]}}, {"PhoenixConnection_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: long", "DEL SimpleName: columns", "DEL SimpleName: resolvedTime", "DEL ExpressionStatement", "DEL SimpleName: isTransactional", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: resolvedTime", "DEL SimpleType: SQLException", "DEL PrimitiveType: long", "DEL PrimitiveType: long", "DEL SimpleName: isMultitenant", "DEL SimpleName: tableName", "DEL SimpleName: isNamespaceMapped", "DEL SimpleName: String", "DEL SimpleName: storeNulls", "DEL ParameterizedType: List<PColumn>", "DEL SimpleName: isImmutableRows", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: tenantId", "DEL SimpleName: tenantId", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SimpleName: tableSeqNum", "DEL SimpleName: tableSeqNum", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: isMultitenant", "DEL SimpleName: columns", "DEL SimpleName: isImmutableRows", "DEL SingleVariableDeclaration", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: tableName", "DEL SimpleName: columns", "DEL PrimitiveType: void", "DEL SimpleName: tenantId", "DEL SingleVariableDeclaration", "DEL SimpleName: PName", "DEL SimpleName: addColumn", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: List", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: tableTimeStamp", "DEL SimpleType: List", "DEL PrimitiveType: boolean", "DEL SimpleName: resolvedTime", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: storeNulls", "DEL SimpleName: isTransactional", "DEL SimpleName: isWalDisabled", "DEL SimpleName: Override", "DEL SimpleType: PName", "DEL SimpleName: isWalDisabled", "DEL PrimitiveType: boolean", "DEL SimpleName: PColumn", "DEL SimpleName: tableSeqNum", "DEL SimpleName: isImmutableRows", "DEL SimpleName: storeNulls", "DEL SimpleType: PColumn", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: addColumn", "DEL SimpleName: metaData", "DEL SimpleName: updateCacheFrequency", "DEL Modifier: public", "DEL SimpleName: addColumn", "DEL SimpleName: isTransactional", "DEL SimpleName: isWalDisabled", "DEL SimpleName: getQueryServices", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: tableTimeStamp", "DEL PrimitiveType: long", "DEL SimpleName: isMultitenant", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: isNamespaceMapped", "DEL SimpleName: tableName", "DEL SimpleName: SQLException", "DEL SingleVariableDeclaration"]}]}}, {"PhoenixConnection_diff": {"operations": ["Delete SimpleName: Override(3714)", "Delete MarkerAnnotation(3715)", "Delete Modifier: public(3716)", "Delete PrimitiveType: void(3717)", "Delete SimpleName: addColumn(3718)", "Delete SimpleName: PName(3719)", "Delete SimpleType: PName(3720)", "Delete SimpleName: tenantId(3721)", "Delete SingleVariableDeclaration(3722)", "Delete SimpleName: String(3723)", "Delete SimpleType: String(3724)", "Delete SimpleName: tableName(3725)", "Delete SingleVariableDeclaration(3726)", "Delete SimpleName: List(3727)", "Delete SimpleType: List(3728)", "Delete SimpleName: PColumn(3729)", "Delete SimpleType: PColumn(3730)", "Delete ParameterizedType: List<PColumn>(3731)", "Delete SimpleName: columns(3732)", "Delete SingleVariableDeclaration(3733)", "Delete PrimitiveType: long(3734)", "Delete SimpleName: tableTimeStamp(3735)", "Delete SingleVariableDeclaration(3736)", "Delete PrimitiveType: long(3737)", "Delete SimpleName: tableSeqNum(3738)", "Delete SingleVariableDeclaration(3739)", "Delete PrimitiveType: boolean(3740)", "Delete SimpleName: isImmutableRows(3741)", "Delete SingleVariableDeclaration(3742)", "Delete PrimitiveType: boolean(3743)", "Delete SimpleName: isWalDisabled(3744)", "Delete SingleVariableDeclaration(3745)", "Delete PrimitiveType: boolean(3746)", "Delete SimpleName: isMultitenant(3747)", "Delete SingleVariableDeclaration(3748)", "Delete PrimitiveType: boolean(3749)", "Delete SimpleName: storeNulls(3750)", "Delete SingleVariableDeclaration(3751)", "Delete PrimitiveType: boolean(3752)", "Delete SimpleName: isTransactional(3753)", "Delete SingleVariableDeclaration(3754)", "Delete PrimitiveType: long(3755)", "Delete SimpleName: updateCacheFrequency(3756)", "Delete SingleVariableDeclaration(3757)", "Delete PrimitiveType: boolean(3758)", "Delete SimpleName: isNamespaceMapped(3759)", "Delete SingleVariableDeclaration(3760)", "Delete PrimitiveType: long(3761)", "Delete SimpleName: resolvedTime(3762)", "Delete SingleVariableDeclaration(3763)", "Delete SimpleName: SQLException(3764)", "Delete SimpleType: SQLException(3765)", "Delete SimpleName: metaData(3766)", "Delete SimpleName: addColumn(3767)", "Delete SimpleName: tenantId(3768)", "Delete SimpleName: tableName(3769)", "Delete SimpleName: columns(3770)", "Delete SimpleName: tableTimeStamp(3771)", "Delete SimpleName: tableSeqNum(3772)", "Delete SimpleName: isImmutableRows(3773)", "Delete SimpleName: isWalDisabled(3774)", "Delete SimpleName: isMultitenant(3775)", "Delete SimpleName: storeNulls(3776)", "Delete SimpleName: isTransactional(3777)", "Delete SimpleName: updateCacheFrequency(3778)", "Delete SimpleName: isNamespaceMapped(3779)", "Delete SimpleName: resolvedTime(3780)", "Delete MethodInvocation(3781)", "Delete ExpressionStatement(3782)", "Delete SimpleName: getQueryServices(3783)", "Delete MethodInvocation(3784)", "Delete SimpleName: addColumn(3785)", "Delete SimpleName: tenantId(3786)", "Delete SimpleName: tableName(3787)", "Delete SimpleName: columns(3788)", "Delete SimpleName: tableTimeStamp(3789)", "Delete SimpleName: tableSeqNum(3790)", "Delete SimpleName: isImmutableRows(3791)", "Delete SimpleName: isWalDisabled(3792)", "Delete SimpleName: isMultitenant(3793)", "Delete SimpleName: storeNulls(3794)", "Delete SimpleName: isTransactional(3795)", "Delete SimpleName: updateCacheFrequency(3796)", "Delete SimpleName: isNamespaceMapped(3797)", "Delete SimpleName: resolvedTime(3798)", "Delete MethodInvocation(3799)", "Delete ExpressionStatement(3800)", "Delete Block(3801)", "Delete MethodDeclaration(3802)"]}}, {"ConnectionQueryServices_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: org.apache.phoenix.schema.PColumn to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: columns to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleType: PColumn to ParameterizedType: List<PColumn> at 1", "INS SimpleName: PColumn to SimpleType: PColumn at 0", "INS SimpleType: List to ParameterizedType: List<PColumn> at 0", "INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<PColumn> to SingleVariableDeclaration at 0"]}]}}, {"ConnectionQueryServices_diff": {"operations": ["Insert ImportDeclaration(41) into CompilationUnit(826) at 20", "Insert QualifiedName: org.apache.phoenix.schema.PColumn(40) into ImportDeclaration(41) at 0", "Insert SingleVariableDeclaration(374) into MethodDeclaration(377) at 7", "Insert ParameterizedType: List<PColumn>(372) into SingleVariableDeclaration(374) at 0", "Insert SimpleName: columns(373) into SingleVariableDeclaration(374) at 1", "Insert SimpleType: List(369) into ParameterizedType: List<PColumn>(372) at 0", "Insert SimpleType: PColumn(371) into ParameterizedType: List<PColumn>(372) at 1", "Insert SimpleName: List(368) into SimpleType: List(369) at 0", "Insert SimpleName: PColumn(370) into SimpleType: PColumn(371) at 0"]}}, {"ConnectionQueryServicesImpl_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 8"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: isImmutableRows", "DEL SimpleName: isMultitenant", "DEL SingleVariableDeclaration", "DEL AnonymousClassDeclaration", "DEL TryStatement", "DEL SimpleType: PName", "DEL SimpleName: storeNulls", "DEL PrimitiveType: boolean", "DEL SimpleName: isWalDisabled", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: TableNotFoundException", "DEL SimpleName: tableName", "DEL SimpleName: tenantId", "DEL CatchClause", "DEL SimpleName: tableTimeStamp", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL Modifier: final", "DEL SimpleName: updateCacheFrequency", "DEL SimpleType: TableNotFoundException", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: SQLException", "DEL ClassInstanceCreation", "DEL SimpleType: SQLException", "DEL SimpleName: tableSeqNum", "DEL MarkerAnnotation", "DEL SimpleName: isNamespaceMapped", "DEL Modifier: final", "DEL Block", "DEL SimpleName: tableSeqNum", "DEL Modifier: final", "DEL SimpleName: storeNulls", "DEL Modifier: final", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: tableName", "DEL PrimitiveType: boolean", "DEL SimpleName: resolvedTime", "DEL Modifier: final", "DEL SimpleName: mutate", "DEL SimpleName: tableName", "DEL SimpleName: addColumn", "DEL SimpleName: e", "DEL Modifier: final", "DEL SimpleName: tableSeqNum", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: metaData", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: isMultitenant", "DEL SimpleType: SQLException", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL PrimitiveType: long", "DEL PrimitiveType: void", "DEL SimpleName: tenantId", "DEL PrimitiveType: boolean", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: Override", "DEL Modifier: final", "DEL SimpleName: SQLException", "DEL SimpleType: PMetaData", "DEL Modifier: final", "DEL SimpleName: addColumn", "DEL SimpleName: metaDataMutated", "DEL SimpleName: resolvedTime", "DEL Modifier: final", "DEL SimpleType: Mutator", "DEL SimpleName: metaData", "DEL SimpleName: isTransactional", "DEL SingleVariableDeclaration", "DEL SimpleName: columns", "DEL SimpleName: isImmutableRows", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: isWalDisabled", "DEL SimpleName: tenantId", "DEL SimpleName: PName", "DEL Modifier: final", "DEL SimpleName: PMetaData", "DEL SimpleName: isTransactional", "DEL SimpleName: Mutator", "DEL PrimitiveType: long", "DEL Block"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"ConnectionQueryServicesImpl_diff": {"operations": ["Move SingleVariableDeclaration(2225) into MethodDeclaration(8462) at 8", "Delete SimpleName: Override(2203)", "Delete MarkerAnnotation(2204)", "Delete Modifier: public(2205)", "Delete PrimitiveType: void(2206)", "Delete SimpleName: addColumn(2207)", "Delete Modifier: final(2208)", "Delete SimpleName: PName(2209)", "Delete SimpleType: PName(2210)", "Delete SimpleName: tenantId(2211)", "Delete SingleVariableDeclaration(2212)", "Delete Modifier: final(2213)", "Delete SimpleName: String(2214)", "Delete SimpleType: String(2215)", "Delete SimpleName: tableName(2216)", "Delete SingleVariableDeclaration(2217)", "Delete Modifier: final(2226)", "Delete PrimitiveType: long(2227)", "Delete SimpleName: tableTimeStamp(2228)", "Delete SingleVariableDeclaration(2229)", "Delete Modifier: final(2230)", "Delete PrimitiveType: long(2231)", "Delete SimpleName: tableSeqNum(2232)", "Delete SingleVariableDeclaration(2233)", "Delete Modifier: final(2234)", "Delete PrimitiveType: boolean(2235)", "Delete SimpleName: isImmutableRows(2236)", "Delete SingleVariableDeclaration(2237)", "Delete Modifier: final(2238)", "Delete PrimitiveType: boolean(2239)", "Delete SimpleName: isWalDisabled(2240)", "Delete SingleVariableDeclaration(2241)", "Delete Modifier: final(2242)", "Delete PrimitiveType: boolean(2243)", "Delete SimpleName: isMultitenant(2244)", "Delete SingleVariableDeclaration(2245)", "Delete Modifier: final(2246)", "Delete PrimitiveType: boolean(2247)", "Delete SimpleName: storeNulls(2248)", "Delete SingleVariableDeclaration(2249)", "Delete Modifier: final(2250)", "Delete PrimitiveType: boolean(2251)", "Delete SimpleName: isTransactional(2252)", "Delete SingleVariableDeclaration(2253)", "Delete Modifier: final(2254)", "Delete PrimitiveType: long(2255)", "Delete SimpleName: updateCacheFrequency(2256)", "Delete SingleVariableDeclaration(2257)", "Delete Modifier: final(2258)", "Delete PrimitiveType: boolean(2259)", "Delete SimpleName: isNamespaceMapped(2260)", "Delete SingleVariableDeclaration(2261)", "Delete Modifier: final(2262)", "Delete PrimitiveType: long(2263)", "Delete SimpleName: resolvedTime(2264)", "Delete SingleVariableDeclaration(2265)", "Delete SimpleName: SQLException(2266)", "Delete SimpleType: SQLException(2267)", "Delete SimpleName: metaDataMutated(2268)", "Delete SimpleName: tenantId(2269)", "Delete SimpleName: tableName(2270)", "Delete SimpleName: tableSeqNum(2271)", "Delete SimpleName: Mutator(2272)", "Delete SimpleType: Mutator(2273)", "Delete SimpleName: Override(2274)", "Delete MarkerAnnotation(2275)", "Delete Modifier: public(2276)", "Delete PrimitiveType: void(2277)", "Delete SimpleName: mutate(2278)", "Delete SimpleName: PMetaData(2279)", "Delete SimpleType: PMetaData(2280)", "Delete SimpleName: metaData(2281)", "Delete SingleVariableDeclaration(2282)", "Delete SimpleName: SQLException(2283)", "Delete SimpleType: SQLException(2284)", "Delete SimpleName: metaData(2285)", "Delete SimpleName: addColumn(2286)", "Delete SimpleName: tenantId(2287)", "Delete SimpleName: tableName(2288)", "Delete SimpleName: columns(2289)", "Delete SimpleName: tableTimeStamp(2290)", "Delete SimpleName: tableSeqNum(2291)", "Delete SimpleName: isImmutableRows(2292)", "Delete SimpleName: isWalDisabled(2293)", "Delete SimpleName: isMultitenant(2294)", "Delete SimpleName: storeNulls(2295)", "Delete SimpleName: isTransactional(2296)", "Delete SimpleName: updateCacheFrequency(2297)", "Delete SimpleName: isNamespaceMapped(2298)", "Delete SimpleName: resolvedTime(2299)", "Delete MethodInvocation(2300)", "Delete ExpressionStatement(2301)", "Delete Block(2302)", "Delete SimpleName: TableNotFoundException(2303)", "Delete SimpleType: TableNotFoundException(2304)", "Delete SimpleName: e(2305)", "Delete SingleVariableDeclaration(2306)", "Delete Block(2307)", "Delete CatchClause(2308)", "Delete TryStatement(2309)", "Delete Block(2310)", "Delete MethodDeclaration(2311)", "Delete AnonymousClassDeclaration(2312)", "Delete ClassInstanceCreation(2313)", "Delete MethodInvocation(2314)", "Delete ExpressionStatement(2315)", "Delete Block(2316)", "Delete MethodDeclaration(2317)", "Delete Modifier: final(2218)"]}}, {"ConnectionlessQueryServicesImpl_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS ParameterizedType: List<PColumn> to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getColumns to MethodInvocation at 1", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleType: PColumn to ParameterizedType: List<PColumn> at 1", "INS SimpleName: columns to VariableDeclarationFragment at 0", "INS SimpleType: List to ParameterizedType: List<PColumn> at 0", "INS Block to MethodDeclaration at 10", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Lists to MethodInvocation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleType: SQLException to MethodDeclaration at 9", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: MetaDataMutationResult to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 8", "MOV SimpleName: addColumn to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "UPDATE from isNamespaceMapped to columnsToBeAdded", "operations": ["UPD SimpleName: isNamespaceMapped from isNamespaceMapped to columnsToBeAdded", "UPD SimpleName: columns from columns to columnsToBeAdded"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from isTransactional to addAll", "operations": ["UPD SimpleName: isTransactional from isTransactional to addAll"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 3", "operations": ["INS MethodInvocation to ClassInstanceCreation at 3", "INS SimpleName: makePTable to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 2", "INS SimpleName: columns to MethodInvocation at 3", "INS SimpleName: PTableImpl to MethodInvocation at 0"]}, {"root": "UPDATE from PName to List", "operations": ["UPD SimpleName: PName from PName to List"]}, {"root": "MOVE from SimpleType: List", "operations": ["MOV SimpleName: PName to SimpleType: List at 0"]}, {"root": "UPDATE from String to PColumn", "operations": ["UPD SimpleName: String from String to PColumn"]}, {"root": "MOVE from SimpleType: PColumn", "operations": ["MOV SimpleName: String to SimpleType: PColumn at 0"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: isMultitenant", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: isImmutableRows", "DEL SingleVariableDeclaration", "DEL SimpleName: tableSeqNum", "DEL SimpleName: storeNulls", "DEL PrimitiveType: long", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SimpleName: isTransactional", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: resolvedTime", "DEL Block", "DEL SimpleName: tenantId", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleType: PName", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL SimpleName: isWalDisabled", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL PrimitiveType: boolean", "DEL PrimitiveType: boolean", "DEL SimpleType: SQLException", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SimpleName: tableName", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: SQLException", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: updateCacheFrequency", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: metaData", "operations": ["DEL SimpleName: metaData"]}, {"root": "DEL SimpleName: addColumn", "operations": ["DEL SimpleName: addColumn"]}, {"root": "DEL SimpleName: tenantId", "operations": ["DEL SimpleName: tenantId"]}, {"root": "DEL SimpleName: tableName", "operations": ["DEL SimpleName: tableName"]}, {"root": "DEL SimpleName: tableTimeStamp", "operations": ["DEL SimpleName: tableTimeStamp"]}, {"root": "DEL SimpleName: tableSeqNum", "operations": ["DEL SimpleName: tableSeqNum"]}, {"root": "DEL SimpleName: isImmutableRows", "operations": ["DEL SimpleName: isImmutableRows"]}, {"root": "DEL SimpleName: isWalDisabled", "operations": ["DEL SimpleName: isWalDisabled"]}, {"root": "DEL SimpleName: isMultitenant", "operations": ["DEL SimpleName: isMultitenant"]}, {"root": "DEL SimpleName: storeNulls", "operations": ["DEL SimpleName: storeNulls"]}, {"root": "DEL SimpleName: updateCacheFrequency", "operations": ["DEL SimpleName: updateCacheFrequency"]}, {"root": "DEL SimpleName: resolvedTime", "operations": ["DEL SimpleName: resolvedTime"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: addColumn", "DEL Block"]}]}}, {"ConnectionlessQueryServicesImpl_diff": {"operations": ["Insert MethodDeclaration(1171) into TypeDeclaration: class(2911) at 31", "Move MarkerAnnotation(1162) into MethodDeclaration(1171) at 0", "Move Modifier: public(570) into MethodDeclaration(1171) at 1", "Move SimpleType: MetaDataMutationResult(1165) into MethodDeclaration(1171) at 2", "Move SimpleName: addColumn(572) into MethodDeclaration(1171) at 3", "Move SingleVariableDeclaration(1173) into MethodDeclaration(1171) at 4", "Move SingleVariableDeclaration(1177) into MethodDeclaration(1171) at 5", "Move SingleVariableDeclaration(1194) into MethodDeclaration(1171) at 6", "Move SingleVariableDeclaration(1201) into MethodDeclaration(1171) at 7", "Move SingleVariableDeclaration(587) into MethodDeclaration(1171) at 8", "Move SimpleType: SQLException(1203) into MethodDeclaration(1171) at 9", "Insert Block(1170) into MethodDeclaration(1171) at 10", "Update SimpleName: columns(586) to columnsToBeAdded", "Insert VariableDeclarationStatement(1153) into Block(1170) at 0", "Move ExpressionStatement(636) into Block(1170) at 1", "Move ReturnStatement(1210) into Block(1170) at 2", "Insert ParameterizedType: List<PColumn>(1144) into VariableDeclarationStatement(1153) at 0", "Insert VariableDeclarationFragment(1152) into VariableDeclarationStatement(1153) at 1", "Insert SimpleType: List(1141) into ParameterizedType: List<PColumn>(1144) at 0", "Insert SimpleType: PColumn(1143) into ParameterizedType: List<PColumn>(1144) at 1", "Insert SimpleName: columns(1145) into VariableDeclarationFragment(1152) at 0", "Insert MethodInvocation(1151) into VariableDeclarationFragment(1152) at 1", "Update SimpleName: isTransactional(631) to addAll", "Update SimpleName: isNamespaceMapped(633) to columnsToBeAdded", "Insert MethodInvocation(1167) into ClassInstanceCreation(1168) at 3", "Update SimpleName: PName(573) to List", "Move SimpleName: PName(573) into SimpleType: List(1141) at 0", "Update SimpleName: String(577) to PColumn", "Move SimpleName: String(577) into SimpleType: PColumn(1143) at 0", "Insert SimpleName: Lists(1146) into MethodInvocation(1151) at 0", "Insert SimpleName: newArrayList(1147) into MethodInvocation(1151) at 1", "Insert MethodInvocation(1150) into MethodInvocation(1151) at 2", "Insert SimpleName: PTableImpl(1163) into MethodInvocation(1167) at 0", "Insert SimpleName: makePTable(1164) into MethodInvocation(1167) at 1", "Insert SimpleName: table(1165) into MethodInvocation(1167) at 2", "Insert SimpleName: columns(1166) into MethodInvocation(1167) at 3", "Insert SimpleName: table(1148) into MethodInvocation(1150) at 0", "Insert SimpleName: getColumns(1149) into MethodInvocation(1150) at 1", "Delete SimpleName: Override(568)", "Delete MarkerAnnotation(569)", "Delete PrimitiveType: void(571)", "Delete SimpleType: PName(574)", "Delete SimpleName: tenantId(575)", "Delete SingleVariableDeclaration(576)", "Delete SimpleType: String(578)", "Delete SimpleName: tableName(579)", "Delete SingleVariableDeclaration(580)", "Delete PrimitiveType: long(588)", "Delete SimpleName: tableTimeStamp(589)", "Delete SingleVariableDeclaration(590)", "Delete PrimitiveType: long(591)", "Delete SimpleName: tableSeqNum(592)", "Delete SingleVariableDeclaration(593)", "Delete PrimitiveType: boolean(594)", "Delete SimpleName: isImmutableRows(595)", "Delete SingleVariableDeclaration(596)", "Delete PrimitiveType: boolean(597)", "Delete SimpleName: isWalDisabled(598)", "Delete SingleVariableDeclaration(599)", "Delete PrimitiveType: boolean(600)", "Delete SimpleName: isMultitenant(601)", "Delete SingleVariableDeclaration(602)", "Delete PrimitiveType: boolean(603)", "Delete SimpleName: storeNulls(604)", "Delete SingleVariableDeclaration(605)", "Delete PrimitiveType: boolean(606)", "Delete SimpleName: isTransactional(607)", "Delete SingleVariableDeclaration(608)", "Delete PrimitiveType: long(609)", "Delete SimpleName: updateCacheFrequency(610)", "Delete SingleVariableDeclaration(611)", "Delete PrimitiveType: boolean(612)", "Delete SimpleName: isNamespaceMapped(613)", "Delete SingleVariableDeclaration(614)", "Delete PrimitiveType: long(615)", "Delete SimpleName: resolvedTime(616)", "Delete SingleVariableDeclaration(617)", "Delete SimpleName: SQLException(618)", "Delete SimpleType: SQLException(619)", "Delete Block(637)", "Delete MethodDeclaration(638)", "Delete SimpleName: metaData(620)", "Delete SimpleName: addColumn(621)", "Delete SimpleName: tenantId(622)", "Delete SimpleName: tableName(623)", "Delete SimpleName: tableTimeStamp(625)", "Delete SimpleName: tableSeqNum(626)", "Delete SimpleName: isImmutableRows(627)", "Delete SimpleName: isWalDisabled(628)", "Delete SimpleName: isMultitenant(629)", "Delete SimpleName: storeNulls(630)", "Delete SimpleName: updateCacheFrequency(632)", "Delete SimpleName: resolvedTime(634)", "Delete NullLiteral(1208)", "Delete Modifier: public(1163)", "Delete SimpleName: addColumn(1166)", "Delete Block(1211)", "Delete MethodDeclaration(1212)"]}}, {"DelegateConnectionQueryServices_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 8"]}, {"root": "INS SimpleName: columns to MethodInvocation at 6", "operations": ["INS SimpleName: columns to MethodInvocation at 6"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL PrimitiveType: long", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: isWalDisabled", "DEL SimpleName: tenantId", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SimpleName: tableName", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL PrimitiveType: boolean", "DEL SimpleName: isTransactional", "DEL SingleVariableDeclaration", "DEL Block", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: isImmutableRows", "DEL MarkerAnnotation", "DEL SimpleType: SQLException", "DEL SimpleName: isWalDisabled", "DEL SingleVariableDeclaration", "DEL SimpleName: isMultitenant", "DEL PrimitiveType: boolean", "DEL PrimitiveType: long", "DEL SimpleName: resolvedTime", "DEL SimpleName: tenantId", "DEL SimpleType: PName", "DEL SimpleName: SQLException", "DEL PrimitiveType: long", "DEL SimpleName: tableSeqNum", "DEL SingleVariableDeclaration", "DEL SimpleName: storeNulls", "DEL ExpressionStatement", "DEL SimpleName: isImmutableRows", "DEL SimpleName: updateCacheFrequency", "DEL MethodInvocation", "DEL SimpleName: getDelegate", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: PName", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: storeNulls", "DEL SimpleName: String", "DEL SimpleName: addColumn", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SimpleName: columns", "DEL SimpleName: tableSeqNum", "DEL SimpleName: Override", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: resolvedTime", "DEL SimpleName: addColumn", "DEL MethodDeclaration", "DEL SimpleName: isMultitenant", "DEL MethodInvocation", "DEL SimpleName: tableName", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: isTransactional", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration"]}]}}, {"DelegateConnectionQueryServices_diff": {"operations": ["Move SingleVariableDeclaration(220) into MethodDeclaration(514) at 8", "Insert SimpleName: columns(510) into MethodInvocation(511) at 6", "Delete SimpleName: Override(201)", "Delete MarkerAnnotation(202)", "Delete Modifier: public(203)", "Delete PrimitiveType: void(204)", "Delete SimpleName: addColumn(205)", "Delete SimpleName: PName(206)", "Delete SimpleType: PName(207)", "Delete SimpleName: tenantId(208)", "Delete SingleVariableDeclaration(209)", "Delete SimpleName: String(210)", "Delete SimpleType: String(211)", "Delete SimpleName: tableName(212)", "Delete SingleVariableDeclaration(213)", "Delete PrimitiveType: long(221)", "Delete SimpleName: tableTimeStamp(222)", "Delete SingleVariableDeclaration(223)", "Delete PrimitiveType: long(224)", "Delete SimpleName: tableSeqNum(225)", "Delete SingleVariableDeclaration(226)", "Delete PrimitiveType: boolean(227)", "Delete SimpleName: isImmutableRows(228)", "Delete SingleVariableDeclaration(229)", "Delete PrimitiveType: boolean(230)", "Delete SimpleName: isWalDisabled(231)", "Delete SingleVariableDeclaration(232)", "Delete PrimitiveType: boolean(233)", "Delete SimpleName: isMultitenant(234)", "Delete SingleVariableDeclaration(235)", "Delete PrimitiveType: boolean(236)", "Delete SimpleName: storeNulls(237)", "Delete SingleVariableDeclaration(238)", "Delete PrimitiveType: boolean(239)", "Delete SimpleName: isTransactional(240)", "Delete SingleVariableDeclaration(241)", "Delete PrimitiveType: long(242)", "Delete SimpleName: updateCacheFrequency(243)", "Delete SingleVariableDeclaration(244)", "Delete PrimitiveType: boolean(245)", "Delete SimpleName: isNamespaceMapped(246)", "Delete SingleVariableDeclaration(247)", "Delete PrimitiveType: long(248)", "Delete SimpleName: resolvedTime(249)", "Delete SingleVariableDeclaration(250)", "Delete SimpleName: SQLException(251)", "Delete SimpleType: SQLException(252)", "Delete SimpleName: getDelegate(253)", "Delete MethodInvocation(254)", "Delete SimpleName: addColumn(255)", "Delete SimpleName: tenantId(256)", "Delete SimpleName: tableName(257)", "Delete SimpleName: columns(258)", "Delete SimpleName: tableTimeStamp(259)", "Delete SimpleName: tableSeqNum(260)", "Delete SimpleName: isImmutableRows(261)", "Delete SimpleName: isWalDisabled(262)", "Delete SimpleName: isMultitenant(263)", "Delete SimpleName: storeNulls(264)", "Delete SimpleName: isTransactional(265)", "Delete SimpleName: updateCacheFrequency(266)", "Delete SimpleName: isNamespaceMapped(267)", "Delete SimpleName: resolvedTime(268)", "Delete MethodInvocation(269)", "Delete ExpressionStatement(270)", "Delete Block(271)", "Delete MethodDeclaration(272)"]}}, {"MetaDataMutated_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: List", "DEL SimpleType: List", "DEL SimpleType: PName", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: SQLException", "DEL SingleVariableDeclaration", "DEL SimpleName: tableSeqNum", "DEL SimpleName: tableTimeStamp", "DEL SingleVariableDeclaration", "DEL SimpleName: tableName", "DEL PrimitiveType: long", "DEL SimpleName: String", "DEL SimpleName: tenantId", "DEL PrimitiveType: long", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: SQLException", "DEL PrimitiveType: boolean", "DEL SimpleName: PColumn", "DEL SimpleName: columns", "DEL PrimitiveType: long", "DEL SimpleName: storeNulls", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SimpleName: isWalDisabled", "DEL SimpleName: isTransactional", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: addColumn", "DEL MethodDeclaration", "DEL SimpleName: resolvedTime", "DEL PrimitiveType: boolean", "DEL SimpleName: PName", "DEL SimpleName: isMultitenant", "DEL PrimitiveType: boolean", "DEL PrimitiveType: boolean", "DEL PrimitiveType: boolean", "DEL SimpleName: updateCacheFrequency", "DEL SimpleType: PColumn", "DEL SingleVariableDeclaration", "DEL SimpleName: isImmutableRows", "DEL ParameterizedType: List<PColumn>", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration"]}]}}, {"MetaDataMutated_diff": {"operations": ["Delete PrimitiveType: void(67)", "Delete SimpleName: addColumn(68)", "Delete SimpleName: PName(69)", "Delete SimpleType: PName(70)", "Delete SimpleName: tenantId(71)", "Delete SingleVariableDeclaration(72)", "Delete SimpleName: String(73)", "Delete SimpleType: String(74)", "Delete SimpleName: tableName(75)", "Delete SingleVariableDeclaration(76)", "Delete SimpleName: List(77)", "Delete SimpleType: List(78)", "Delete SimpleName: PColumn(79)", "Delete SimpleType: PColumn(80)", "Delete ParameterizedType: List<PColumn>(81)", "Delete SimpleName: columns(82)", "Delete SingleVariableDeclaration(83)", "Delete PrimitiveType: long(84)", "Delete SimpleName: tableTimeStamp(85)", "Delete SingleVariableDeclaration(86)", "Delete PrimitiveType: long(87)", "Delete SimpleName: tableSeqNum(88)", "Delete SingleVariableDeclaration(89)", "Delete PrimitiveType: boolean(90)", "Delete SimpleName: isImmutableRows(91)", "Delete SingleVariableDeclaration(92)", "Delete PrimitiveType: boolean(93)", "Delete SimpleName: isWalDisabled(94)", "Delete SingleVariableDeclaration(95)", "Delete PrimitiveType: boolean(96)", "Delete SimpleName: isMultitenant(97)", "Delete SingleVariableDeclaration(98)", "Delete PrimitiveType: boolean(99)", "Delete SimpleName: storeNulls(100)", "Delete SingleVariableDeclaration(101)", "Delete PrimitiveType: boolean(102)", "Delete SimpleName: isTransactional(103)", "Delete SingleVariableDeclaration(104)", "Delete PrimitiveType: long(105)", "Delete SimpleName: updateCacheFrequency(106)", "Delete SingleVariableDeclaration(107)", "Delete PrimitiveType: boolean(108)", "Delete SimpleName: isNamespaceMapped(109)", "Delete SingleVariableDeclaration(110)", "Delete PrimitiveType: long(111)", "Delete SimpleName: resolvedTime(112)", "Delete SingleVariableDeclaration(113)", "Delete SimpleName: SQLException(114)", "Delete SimpleType: SQLException(115)", "Delete MethodDeclaration(116)"]}}, {"MetaDataClient_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 7", "MOV IfStatement to Block at 7"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 13", "operations": ["INS SimpleName: appendOnlySchema to SingleVariableDeclaration at 1", "INS SimpleType: Boolean to SingleVariableDeclaration at 0", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SingleVariableDeclaration to MethodDeclaration at 13"]}, {"root": "INS IfStatement to Block at 14", "operations": ["INS SimpleName: appendOnlySchema to MethodInvocation at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: appendOnlySchema to InfixExpression: != at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 14", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: schemaName to MethodInvocation at 2", "INS SimpleName: tableName to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS SimpleName: tenantId to MethodInvocation at 1", "INS SimpleName: mutateBooleanProperty to MethodInvocation at 0", "INS SimpleName: APPEND_ONLY_SCHEMA to MethodInvocation at 4"]}, {"root": "UPDATE from Long to Boolean", "operations": ["UPD SimpleType: Long from Long to Boolean", "UPD SimpleName: Long from Long to Boolean", "UPD SimpleType: Long from Long to Boolean", "UPD SimpleName: Long from Long to Boolean"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: immutableRows to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: statement to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS MethodInvocation to InfixExpression: != at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: Long to SimpleType: Long at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: updateCacheFrequencyProp to VariableDeclarationFragment at 0", "INS SimpleName: Long to SimpleType: Long at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: getValue to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleType: Long to VariableDeclarationStatement at 0", "INS QualifiedName: TableProperty.UPDATE_CACHE_FREQUENCY to MethodInvocation at 0", "INS SimpleName: tableProps to MethodInvocation at 2", "INS SimpleType: Long to CastExpression at 0", "INS VariableDeclarationStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS Block to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: updateCacheFrequency to Assignment: = at 0", "INS SimpleName: getUpdateCacheFrequency to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: parent to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from updateCacheFrequencyProp to immutableProp", "operations": ["UPD SimpleName: updateCacheFrequencyProp from updateCacheFrequencyProp to immutableProp", "UPD SimpleName: updateCacheFrequencyProp from updateCacheFrequencyProp to immutableProp"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: setTableName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: tableName to MethodInvocation at 0", "INS MethodInvocation to ThrowStatement at 0", "INS SimpleName: tableName to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: build to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getTableName to MethodInvocation at 1", "INS SimpleName: buildException to MethodInvocation at 1", "INS SimpleName: getSchemaName to MethodInvocation at 1", "INS SimpleName: setSchemaName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleType: SQLExceptionInfo.Builder to ClassInstanceCreation at 0", "INS QualifiedName: SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID to ClassInstanceCreation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: SQLExceptionInfo.Builder to SimpleType: SQLExceptionInfo.Builder at 0"]}, {"root": "INS NullLiteral to MethodInvocation at 11", "operations": ["INS NullLiteral to MethodInvocation at 11"]}, {"root": "INS VariableDeclarationStatement to Block at 10", "operations": ["INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleType: Boolean to VariableDeclarationStatement at 0", "INS SimpleName: appendOnlySchemaProp to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 10"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV SimpleName: updateCacheFrequencyProp to InfixExpression: != at 0", "MOV NullLiteral to InfixExpression: != at 1"]}, {"root": "INS SimpleName: updateCacheFrequencyProp to InfixExpression: != at 0", "operations": ["INS SimpleName: updateCacheFrequencyProp to InfixExpression: != at 0"]}, {"root": "INS NullLiteral to InfixExpression: != at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from TableProperty.UPDATE_CACHE_FREQUENCY to TableProperty.IMMUTABLE_ROWS", "operations": ["UPD QualifiedName: TableProperty.UPDATE_CACHE_FREQUENCY from TableProperty.UPDATE_CACHE_FREQUENCY to TableProperty.IMMUTABLE_ROWS"]}, {"root": "INS VariableDeclarationStatement to Block at 20", "operations": ["INS SimpleName: appendOnlySchema to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS VariableDeclarationStatement to Block at 20", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleType: Boolean to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 21", "operations": ["INS SimpleName: appendOnlySchemaProp to Assignment: = at 1", "INS IfStatement to Block at 0", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: appendOnlySchema to Assignment: = at 0", "INS IfStatement to Block at 21", "INS Block to IfStatement at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: appendOnlySchemaProp to InfixExpression: != at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: changingPhoenixTableProperty to Assignment: = at 0", "INS MethodInvocation to InfixExpression: != at 1", "INS ExpressionStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: appendOnlySchemaProp to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "INS IfStatement to Block at 6", "operations": ["INS SimpleName: updateCacheFrequencyProp to InfixExpression: == at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: updateCacheFrequency to Assignment: = at 0", "INS SimpleName: parent to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getUpdateCacheFrequency to MethodInvocation at 1", "INS IfStatement to Block at 6", "INS ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: columns to MethodInvocation at 6", "operations": ["INS SimpleName: columns to MethodInvocation at 6"]}, {"root": "INS SimpleName: appendOnlySchema to MethodInvocation at 11", "operations": ["INS SimpleName: appendOnlySchema to MethodInvocation at 11"]}, {"root": "UPDATE from fullTableName to addTable", "operations": ["UPD SimpleName: fullTableName from fullTableName to addTable"]}, {"root": "UPDATE from getMutationTime to getTable", "operations": ["UPD SimpleName: getMutationTime from getMutationTime to getTable"]}, {"root": "INS MethodInvocation to MethodInvocation at 6", "operations": ["INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: emptyList to MethodInvocation at 2", "INS SimpleType: PColumn to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: PColumn to SimpleType: PColumn at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS IfStatement to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS SimpleName: APPEND_ONLY_SCHEMA to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: propName to MethodInvocation at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS CastExpression to Assignment: = at 1", "INS SimpleType: Boolean to CastExpression at 0", "INS SimpleName: Boolean to SimpleType: Boolean at 0", "INS SimpleName: appendOnlySchemaProp to Assignment: = at 0", "INS SimpleName: value to CastExpression at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "DEL SimpleName: addColumn", "operations": ["DEL SimpleName: addColumn"]}, {"root": "DEL SimpleName: tenantId", "operations": ["DEL SimpleName: tenantId"]}, {"root": "DEL SimpleName: columns", "operations": ["DEL SimpleName: columns"]}, {"root": "DEL SimpleName: seqNum", "operations": ["DEL SimpleName: seqNum"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL InfixExpression: ==", "DEL SimpleName: table", "DEL SimpleName: isImmutableRows", "DEL SimpleName: isImmutableRows", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: isImmutableRows", "DEL ConditionalExpression"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL InfixExpression: ==", "DEL SimpleName: isWALDisabled", "DEL NullLiteral", "DEL ConditionalExpression", "DEL SimpleName: disableWAL", "DEL SimpleName: table", "DEL SimpleName: disableWAL", "DEL MethodInvocation"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL NullLiteral", "DEL SimpleName: table", "DEL ConditionalExpression", "DEL SimpleName: multiTenant", "DEL InfixExpression: ==", "DEL SimpleName: isMultiTenant", "DEL SimpleName: multiTenant", "DEL MethodInvocation"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL SimpleName: table", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: getStoreNulls", "DEL ConditionalExpression", "DEL NullLiteral", "DEL SimpleName: storeNulls", "DEL SimpleName: storeNulls"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL SimpleName: isTransactional", "DEL SimpleName: isTransactional", "DEL SimpleName: table", "DEL NullLiteral", "DEL ConditionalExpression", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: isTransactional"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL NullLiteral", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: getUpdateCacheFrequency", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: updateCacheFrequency", "DEL ConditionalExpression", "DEL SimpleName: table"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: table", "DEL MethodInvocation", "DEL SimpleName: isNamespaceMapped"]}]}}, {"MetaDataClient_diff": {"operations": ["Move IfStatement(3516) into Block(3844) at 7", "Move IfStatement(3568) into Block(3844) at 7", "Insert SingleVariableDeclaration(12903) into MethodDeclaration(13144) at 13", "Insert SimpleType: Boolean(12901) into SingleVariableDeclaration(12903) at 0", "Insert SimpleName: appendOnlySchema(12902) into SingleVariableDeclaration(12903) at 1", "Insert IfStatement(13140) into Block(13143) at 14", "Update SimpleType: Long(3523) to Boolean", "Insert InfixExpression: &&(3595) into IfStatement(3616) at 0", "Insert SimpleName: Boolean(12900) into SimpleType: Boolean(12901) at 0", "Insert InfixExpression: !=(13130) into IfStatement(13140) at 0", "Insert Block(13139) into IfStatement(13140) at 1", "Insert VariableDeclarationStatement(3524) into Block(3534) at 2", "Insert IfStatement(3533) into Block(3534) at 3", "Insert ExpressionStatement(3546) into Block(3547) at 1", "Update SimpleName: Long(3522) to Boolean", "Update SimpleName: updateCacheFrequencyProp(3524) to immutableProp", "Insert InfixExpression: !=(3591) into InfixExpression: &&(3595) at 0", "Insert InfixExpression: !=(3594) into InfixExpression: &&(3595) at 1", "Insert ThrowStatement(3614) into Block(3615) at 0", "Insert NullLiteral(12853) into MethodInvocation(12854) at 11", "Insert SimpleName: appendOnlySchema(13128) into InfixExpression: !=(13130) at 0", "Insert NullLiteral(13129) into InfixExpression: !=(13130) at 1", "Insert ExpressionStatement(13138) into Block(13139) at 0", "Insert VariableDeclarationStatement(13505) into Block(15686) at 10", "Insert SimpleType: Long(3514) into VariableDeclarationStatement(3524) at 0", "Insert VariableDeclarationFragment(3523) into VariableDeclarationStatement(3524) at 1", "Move InfixExpression: !=(3536) into IfStatement(3533) at 0", "Insert Block(3532) into IfStatement(3533) at 1", "Insert Assignment: =(3545) into ExpressionStatement(3546) at 0", "Update SimpleType: Long(3526) to Boolean", "Insert MethodInvocation(3589) into InfixExpression: !=(3591) at 0", "Insert NullLiteral(3590) into InfixExpression: !=(3591) at 1", "Update SimpleName: updateCacheFrequencyProp(3534) to immutableProp", "Move SimpleName: updateCacheFrequencyProp(3534) into InfixExpression: !=(3594) at 0", "Move NullLiteral(3535) into InfixExpression: !=(3594) at 1", "Insert MethodInvocation(3613) into ThrowStatement(3614) at 0", "Insert MethodInvocation(13137) into ExpressionStatement(13138) at 0", "Insert SimpleType: Boolean(13501) into VariableDeclarationStatement(13505) at 0", "Insert VariableDeclarationFragment(13504) into VariableDeclarationStatement(13505) at 1", "Insert SimpleName: Long(3513) into SimpleType: Long(3514) at 0", "Insert SimpleName: updateCacheFrequencyProp(3515) into VariableDeclarationFragment(3523) at 0", "Insert CastExpression(3522) into VariableDeclarationFragment(3523) at 1", "Insert SimpleName: updateCacheFrequencyProp(3525) into InfixExpression: !=(3527) at 0", "Insert NullLiteral(3526) into InfixExpression: !=(3527) at 1", "Move ExpressionStatement(3540) into Block(3532) at 0", "Insert SimpleName: updateCacheFrequency(3541) into Assignment: =(3545) at 0", "Insert MethodInvocation(3544) into Assignment: =(3545) at 1", "Update SimpleName: Long(3525) to Boolean", "Update QualifiedName: TableProperty.UPDATE_CACHE_FREQUENCY(3527) to TableProperty.IMMUTABLE_ROWS", "Insert SimpleName: statement(3587) into MethodInvocation(3589) at 0", "Insert SimpleName: immutableRows(3588) into MethodInvocation(3589) at 1", "Insert MethodInvocation(3611) into MethodInvocation(3613) at 0", "Insert SimpleName: buildException(3612) into MethodInvocation(3613) at 1", "Insert SimpleName: mutateBooleanProperty(13131) into MethodInvocation(13137) at 0", "Insert SimpleName: tenantId(13132) into MethodInvocation(13137) at 1", "Insert SimpleName: schemaName(13133) into MethodInvocation(13137) at 2", "Insert SimpleName: tableName(13134) into MethodInvocation(13137) at 3", "Insert SimpleName: APPEND_ONLY_SCHEMA(13135) into MethodInvocation(13137) at 4", "Insert SimpleName: appendOnlySchema(13136) into MethodInvocation(13137) at 5", "Insert SimpleName: Boolean(13500) into SimpleType: Boolean(13501) at 0", "Insert SimpleName: appendOnlySchemaProp(13502) into VariableDeclarationFragment(13504) at 0", "Insert NullLiteral(13503) into VariableDeclarationFragment(13504) at 1", "Insert VariableDeclarationStatement(14245) into Block(15684) at 20", "Insert IfStatement(14265) into Block(15684) at 21", "Insert SimpleType: Long(3517) into CastExpression(3522) at 0", "Insert MethodInvocation(3521) into CastExpression(3522) at 1", "Insert SimpleName: parent(3542) into MethodInvocation(3544) at 0", "Insert SimpleName: getUpdateCacheFrequency(3543) into MethodInvocation(3544) at 1", "Insert MethodInvocation(3609) into MethodInvocation(3611) at 0", "Insert SimpleName: build(3610) into MethodInvocation(3611) at 1", "Insert SimpleType: Boolean(14241) into VariableDeclarationStatement(14245) at 0", "Insert VariableDeclarationFragment(14244) into VariableDeclarationStatement(14245) at 1", "Insert InfixExpression: !=(14248) into IfStatement(14265) at 0", "Insert Block(14264) into IfStatement(14265) at 1", "Insert SimpleName: Long(3516) into SimpleType: Long(3517) at 0", "Insert QualifiedName: TableProperty.UPDATE_CACHE_FREQUENCY(3518) into MethodInvocation(3521) at 0", "Insert SimpleName: getValue(3519) into MethodInvocation(3521) at 1", "Insert SimpleName: tableProps(3520) into MethodInvocation(3521) at 2", "Insert MethodInvocation(3604) into MethodInvocation(3609) at 0", "Insert SimpleName: setTableName(3605) into MethodInvocation(3609) at 1", "Insert MethodInvocation(3608) into MethodInvocation(3609) at 2", "Insert IfStatement(9000) into Block(9159) at 6", "Insert SimpleName: Boolean(14240) into SimpleType: Boolean(14241) at 0", "Insert SimpleName: appendOnlySchema(14242) into VariableDeclarationFragment(14244) at 0", "Insert NullLiteral(14243) into VariableDeclarationFragment(14244) at 1", "Insert SimpleName: appendOnlySchemaProp(14246) into InfixExpression: !=(14248) at 0", "Insert NullLiteral(14247) into InfixExpression: !=(14248) at 1", "Insert IfStatement(14263) into Block(14264) at 0", "Insert ClassInstanceCreation(3599) into MethodInvocation(3604) at 0", "Insert SimpleName: setSchemaName(3600) into MethodInvocation(3604) at 1", "Insert MethodInvocation(3603) into MethodInvocation(3604) at 2", "Insert SimpleName: tableName(3606) into MethodInvocation(3608) at 0", "Insert SimpleName: getTableName(3607) into MethodInvocation(3608) at 1", "Insert InfixExpression: ==(8992) into IfStatement(9000) at 0", "Insert Block(8999) into IfStatement(9000) at 1", "Insert InfixExpression: !=(14253) into IfStatement(14263) at 0", "Insert Block(14262) into IfStatement(14263) at 1", "Insert SimpleName: columns(15316) into MethodInvocation(15317) at 6", "Insert SimpleType: SQLExceptionInfo.Builder(3597) into ClassInstanceCreation(3599) at 0", "Insert QualifiedName: SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID(3598) into ClassInstanceCreation(3599) at 1", "Insert SimpleName: tableName(3601) into MethodInvocation(3603) at 0", "Insert SimpleName: getSchemaName(3602) into MethodInvocation(3603) at 1", "Insert SimpleName: updateCacheFrequencyProp(8990) into InfixExpression: ==(8992) at 0", "Insert NullLiteral(8991) into InfixExpression: ==(8992) at 1", "Insert ExpressionStatement(8998) into Block(8999) at 0", "Insert SimpleName: appendOnlySchemaProp(14249) into InfixExpression: !=(14253) at 0", "Insert MethodInvocation(14252) into InfixExpression: !=(14253) at 1", "Insert ExpressionStatement(14257) into Block(14262) at 0", "Insert ExpressionStatement(14261) into Block(14262) at 1", "Insert QualifiedName: SQLExceptionInfo.Builder(3596) into SimpleType: SQLExceptionInfo.Builder(3597) at 0", "Insert Assignment: =(8997) into ExpressionStatement(8998) at 0", "Insert SimpleName: table(14250) into MethodInvocation(14252) at 0", "Insert SimpleName: isAppendOnlySchema(14251) into MethodInvocation(14252) at 1", "Insert Assignment: =(14256) into ExpressionStatement(14257) at 0", "Insert Assignment: =(14260) into ExpressionStatement(14261) at 0", "Insert SimpleName: appendOnlySchema(15190) into MethodInvocation(15191) at 11", "Insert SimpleName: updateCacheFrequency(8993) into Assignment: =(8997) at 0", "Insert MethodInvocation(8996) into Assignment: =(8997) at 1", "Insert SimpleName: appendOnlySchema(14254) into Assignment: =(14256) at 0", "Insert SimpleName: appendOnlySchemaProp(14255) into Assignment: =(14256) at 1", "Insert SimpleName: changingPhoenixTableProperty(14258) into Assignment: =(14260) at 0", "Insert BooleanLiteral: true(14259) into Assignment: =(14260) at 1", "Update SimpleName: fullTableName(15273) to addTable", "Insert SimpleName: parent(8994) into MethodInvocation(8996) at 0", "Insert SimpleName: getUpdateCacheFrequency(8995) into MethodInvocation(8996) at 1", "Update SimpleName: getMutationTime(15276) to getTable", "Insert MethodInvocation(16918) into MethodInvocation(16919) at 6", "Insert IfStatement(13870) into IfStatement(13871) at 2", "Insert SimpleName: Collections(16914) into MethodInvocation(16918) at 0", "Insert SimpleType: PColumn(16916) into MethodInvocation(16918) at 1", "Insert SimpleName: emptyList(16917) into MethodInvocation(16918) at 2", "Move MethodInvocation(13765) into IfStatement(13870) at 0", "Move Block(13773) into IfStatement(13870) at 1", "Move IfStatement(13774) into IfStatement(13870) at 2", "Insert SimpleName: PColumn(16915) into SimpleType: PColumn(16916) at 0", "Insert MethodInvocation(13860) into IfStatement(13869) at 0", "Insert Block(13868) into IfStatement(13869) at 1", "Insert SimpleName: propName(13857) into MethodInvocation(13860) at 0", "Insert SimpleName: equals(13858) into MethodInvocation(13860) at 1", "Insert SimpleName: APPEND_ONLY_SCHEMA(13859) into MethodInvocation(13860) at 2", "Insert ExpressionStatement(13867) into Block(13868) at 0", "Insert Assignment: =(13866) into ExpressionStatement(13867) at 0", "Insert SimpleName: appendOnlySchemaProp(13861) into Assignment: =(13866) at 0", "Insert CastExpression(13865) into Assignment: =(13866) at 1", "Insert SimpleType: Boolean(13863) into CastExpression(13865) at 0", "Insert SimpleName: value(13864) into CastExpression(13865) at 1", "Insert SimpleName: Boolean(13862) into SimpleType: Boolean(13863) at 0", "Delete SimpleName: addColumn(15271)", "Delete SimpleName: tenantId(15272)", "Delete SimpleName: columns(15274)", "Delete SimpleName: seqNum(15278)", "Delete SimpleName: isImmutableRows(15279)", "Delete NullLiteral(15280)", "Delete InfixExpression: ==(15281)", "Delete SimpleName: table(15282)", "Delete SimpleName: isImmutableRows(15283)", "Delete MethodInvocation(15284)", "Delete SimpleName: isImmutableRows(15285)", "Delete ConditionalExpression(15286)", "Delete SimpleName: disableWAL(15287)", "Delete NullLiteral(15288)", "Delete InfixExpression: ==(15289)", "Delete SimpleName: table(15290)", "Delete SimpleName: isWALDisabled(15291)", "Delete MethodInvocation(15292)", "Delete SimpleName: disableWAL(15293)", "Delete ConditionalExpression(15294)", "Delete SimpleName: multiTenant(15295)", "Delete NullLiteral(15296)", "Delete InfixExpression: ==(15297)", "Delete SimpleName: table(15298)", "Delete SimpleName: isMultiTenant(15299)", "Delete MethodInvocation(15300)", "Delete SimpleName: multiTenant(15301)", "Delete ConditionalExpression(15302)", "Delete SimpleName: storeNulls(15303)", "Delete NullLiteral(15304)", "Delete InfixExpression: ==(15305)", "Delete SimpleName: table(15306)", "Delete SimpleName: getStoreNulls(15307)", "Delete MethodInvocation(15308)", "Delete SimpleName: storeNulls(15309)", "Delete ConditionalExpression(15310)", "Delete SimpleName: isTransactional(15311)", "Delete NullLiteral(15312)", "Delete InfixExpression: ==(15313)", "Delete SimpleName: table(15314)", "Delete SimpleName: isTransactional(15315)", "Delete MethodInvocation(15316)", "Delete SimpleName: isTransactional(15317)", "Delete ConditionalExpression(15318)", "Delete SimpleName: updateCacheFrequency(15319)", "Delete NullLiteral(15320)", "Delete InfixExpression: ==(15321)", "Delete SimpleName: table(15322)", "Delete SimpleName: getUpdateCacheFrequency(15323)", "Delete MethodInvocation(15324)", "Delete SimpleName: updateCacheFrequency(15325)", "Delete ConditionalExpression(15326)", "Delete SimpleName: table(15327)", "Delete SimpleName: isNamespaceMapped(15328)", "Delete MethodInvocation(15329)"]}}, {"PMetaDataImpl_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: PColumn", "DEL SimpleName: metaData", "DEL PrimitiveType: long", "DEL SimpleName: tableSeqNum", "DEL Assignment: =", "DEL SimpleName: newArrayListWithExpectedSize", "DEL IfStatement", "DEL SimpleType: PTable", "DEL PrimitiveType: boolean", "DEL SimpleName: isEmpty", "DEL SingleVariableDeclaration", "DEL SimpleName: PColumn", "DEL SimpleName: newColumns", "DEL SimpleName: columnsToAdd", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: isNamespaceMapped", "DEL SimpleName: oldColumns", "DEL SimpleName: addAll", "DEL SimpleName: tenantId", "DEL ParameterizedType: List<PColumn>", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL SimpleType: PColumn", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: PName", "DEL SimpleName: SQLException", "DEL ParameterizedType: List<PColumn>", "DEL PrimitiveType: boolean", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: tableName", "DEL SimpleName: size", "DEL SimpleName: makePTable", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: oldTableRef", "DEL ExpressionStatement", "DEL SimpleName: oldTableRef", "DEL SimpleName: isTransactional", "DEL SimpleType: List", "DEL Block", "DEL PrimitiveType: long", "DEL SimpleName: newColumns", "DEL SimpleName: addTable", "DEL VariableDeclarationFragment", "DEL SimpleName: newTable", "DEL MarkerAnnotation", "DEL SimpleName: newColumns", "DEL SimpleName: oldColumns", "DEL SimpleName: size", "DEL SimpleName: columnsToAdd", "DEL MethodInvocation", "DEL SimpleName: resolvedTime", "DEL SimpleName: Override", "DEL SimpleName: addAll", "DEL SimpleName: getColumnsToClone", "DEL SimpleName: PColumn", "DEL SingleVariableDeclaration", "DEL SimpleName: newColumns", "DEL SimpleType: PTableKey", "DEL Block", "DEL SimpleName: isWalDisabled", "DEL VariableDeclarationFragment", "DEL SimpleName: Lists", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: tableTimeStamp", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: addColumn", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: isMultitenant", "DEL PrimitiveType: boolean", "DEL SimpleName: storeNulls", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: tableSeqNum", "DEL SimpleName: getTable", "DEL SimpleName: isNamespaceMapped", "DEL VariableDeclarationStatement", "DEL SimpleName: PTableImpl", "DEL SimpleName: isImmutableRows", "DEL MethodInvocation", "DEL SimpleName: PName", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: updateCacheFrequency", "DEL Block", "DEL SimpleName: getTable", "DEL SimpleName: oldTableRef", "DEL SimpleName: columnsToAdd", "DEL SingleVariableDeclaration", "DEL SimpleName: tenantId", "DEL Modifier: public", "DEL SimpleName: PTableRef", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: PColumn", "DEL SimpleName: String", "DEL SimpleName: List", "DEL SimpleName: newTable", "DEL PrimitiveType: boolean", "DEL SimpleName: PTableKey", "DEL SimpleName: tableName", "DEL SimpleName: PTable", "DEL SimpleType: List", "DEL SimpleName: oldColumns", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: resolvedTime", "DEL SimpleType: String", "DEL SimpleType: SQLException", "DEL SimpleName: storeNulls", "DEL SimpleName: oldTableRef", "DEL PrimitiveType: boolean", "DEL SimpleName: isTransactional", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL SimpleName: columnsToAdd", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: PTableImpl", "DEL SimpleName: isWalDisabled", "DEL SimpleType: PColumn", "DEL Assignment: =", "DEL SimpleName: newColumns", "DEL IfStatement", "DEL ParameterizedType: List<PColumn>", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: PTableRef", "DEL InfixExpression: +", "DEL SimpleName: isMultitenant", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: get", "DEL SimpleName: isImmutableRows", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: oldColumns", "DEL PrimitiveType: long", "DEL SimpleName: newColumns", "DEL MethodInvocation"]}]}}, {"PMetaDataImpl_diff": {"operations": ["Delete SimpleName: Override(606)", "Delete MarkerAnnotation(607)", "Delete Modifier: public(608)", "Delete PrimitiveType: void(609)", "Delete SimpleName: addColumn(610)", "Delete SimpleName: PName(611)", "Delete SimpleType: PName(612)", "Delete SimpleName: tenantId(613)", "Delete SingleVariableDeclaration(614)", "Delete SimpleName: String(615)", "Delete SimpleType: String(616)", "Delete SimpleName: tableName(617)", "Delete SingleVariableDeclaration(618)", "Delete SimpleName: List(619)", "Delete SimpleType: List(620)", "Delete SimpleName: PColumn(621)", "Delete SimpleType: PColumn(622)", "Delete ParameterizedType: List<PColumn>(623)", "Delete SimpleName: columnsToAdd(624)", "Delete SingleVariableDeclaration(625)", "Delete PrimitiveType: long(626)", "Delete SimpleName: tableTimeStamp(627)", "Delete SingleVariableDeclaration(628)", "Delete PrimitiveType: long(629)", "Delete SimpleName: tableSeqNum(630)", "Delete SingleVariableDeclaration(631)", "Delete PrimitiveType: boolean(632)", "Delete SimpleName: isImmutableRows(633)", "Delete SingleVariableDeclaration(634)", "Delete PrimitiveType: boolean(635)", "Delete SimpleName: isWalDisabled(636)", "Delete SingleVariableDeclaration(637)", "Delete PrimitiveType: boolean(638)", "Delete SimpleName: isMultitenant(639)", "Delete SingleVariableDeclaration(640)", "Delete PrimitiveType: boolean(641)", "Delete SimpleName: storeNulls(642)", "Delete SingleVariableDeclaration(643)", "Delete PrimitiveType: boolean(644)", "Delete SimpleName: isTransactional(645)", "Delete SingleVariableDeclaration(646)", "Delete PrimitiveType: long(647)", "Delete SimpleName: updateCacheFrequency(648)", "Delete SingleVariableDeclaration(649)", "Delete PrimitiveType: boolean(650)", "Delete SimpleName: isNamespaceMapped(651)", "Delete SingleVariableDeclaration(652)", "Delete PrimitiveType: long(653)", "Delete SimpleName: resolvedTime(654)", "Delete SingleVariableDeclaration(655)", "Delete SimpleName: SQLException(656)", "Delete SimpleType: SQLException(657)", "Delete SimpleName: PTableRef(658)", "Delete SimpleType: PTableRef(659)", "Delete SimpleName: oldTableRef(660)", "Delete SimpleName: metaData(661)", "Delete SimpleName: get(662)", "Delete SimpleName: PTableKey(663)", "Delete SimpleType: PTableKey(664)", "Delete SimpleName: tenantId(665)", "Delete SimpleName: tableName(666)", "Delete ClassInstanceCreation(667)", "Delete MethodInvocation(668)", "Delete VariableDeclarationFragment(669)", "Delete VariableDeclarationStatement(670)", "Delete SimpleName: oldTableRef(671)", "Delete NullLiteral(672)", "Delete InfixExpression: ==(673)", "Delete ReturnStatement(674)", "Delete Block(675)", "Delete IfStatement(676)", "Delete SimpleName: List(677)", "Delete SimpleType: List(678)", "Delete SimpleName: PColumn(679)", "Delete SimpleType: PColumn(680)", "Delete ParameterizedType: List<PColumn>(681)", "Delete SimpleName: oldColumns(682)", "Delete SimpleName: PTableImpl(683)", "Delete SimpleName: getColumnsToClone(684)", "Delete SimpleName: oldTableRef(685)", "Delete SimpleName: getTable(686)", "Delete MethodInvocation(687)", "Delete MethodInvocation(688)", "Delete VariableDeclarationFragment(689)", "Delete VariableDeclarationStatement(690)", "Delete SimpleName: List(691)", "Delete SimpleType: List(692)", "Delete SimpleName: PColumn(693)", "Delete SimpleType: PColumn(694)", "Delete ParameterizedType: List<PColumn>(695)", "Delete SimpleName: newColumns(696)", "Delete VariableDeclarationFragment(697)", "Delete VariableDeclarationStatement(698)", "Delete SimpleName: columnsToAdd(699)", "Delete SimpleName: isEmpty(700)", "Delete MethodInvocation(701)", "Delete SimpleName: newColumns(702)", "Delete SimpleName: oldColumns(703)", "Delete Assignment: =(704)", "Delete ExpressionStatement(705)", "Delete Block(706)", "Delete SimpleName: newColumns(707)", "Delete SimpleName: Lists(708)", "Delete SimpleName: newArrayListWithExpectedSize(709)", "Delete SimpleName: oldColumns(710)", "Delete SimpleName: size(711)", "Delete MethodInvocation(712)", "Delete SimpleName: columnsToAdd(713)", "Delete SimpleName: size(714)", "Delete MethodInvocation(715)", "Delete InfixExpression: +(716)", "Delete MethodInvocation(717)", "Delete Assignment: =(718)", "Delete ExpressionStatement(719)", "Delete SimpleName: newColumns(720)", "Delete SimpleName: addAll(721)", "Delete SimpleName: oldColumns(722)", "Delete MethodInvocation(723)", "Delete ExpressionStatement(724)", "Delete SimpleName: newColumns(725)", "Delete SimpleName: addAll(726)", "Delete SimpleName: columnsToAdd(727)", "Delete MethodInvocation(728)", "Delete ExpressionStatement(729)", "Delete Block(730)", "Delete IfStatement(731)", "Delete SimpleName: PTable(732)", "Delete SimpleType: PTable(733)", "Delete SimpleName: newTable(734)", "Delete SimpleName: PTableImpl(735)", "Delete SimpleName: makePTable(736)", "Delete SimpleName: oldTableRef(737)", "Delete SimpleName: getTable(738)", "Delete MethodInvocation(739)", "Delete SimpleName: tableTimeStamp(740)", "Delete SimpleName: tableSeqNum(741)", "Delete SimpleName: newColumns(742)", "Delete SimpleName: isImmutableRows(743)", "Delete SimpleName: isWalDisabled(744)", "Delete SimpleName: isMultitenant(745)", "Delete SimpleName: storeNulls(746)", "Delete SimpleName: isTransactional(747)", "Delete SimpleName: updateCacheFrequency(748)", "Delete SimpleName: isNamespaceMapped(749)", "Delete MethodInvocation(750)", "Delete VariableDeclarationFragment(751)", "Delete VariableDeclarationStatement(752)", "Delete SimpleName: addTable(753)", "Delete SimpleName: newTable(754)", "Delete SimpleName: resolvedTime(755)", "Delete MethodInvocation(756)", "Delete ExpressionStatement(757)", "Delete Block(758)", "Delete MethodDeclaration(759)"]}}, {"PSynchronizedMetaData_cluster": {"actions": [{"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: addColumn", "DEL PrimitiveType: long", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: isImmutableRows", "DEL SimpleName: PColumn", "DEL SimpleName: addColumn", "DEL PrimitiveType: long", "DEL SimpleName: updateCacheFrequency", "DEL SimpleName: tableName", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: List", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: columns", "DEL SimpleName: isTransactional", "DEL SimpleName: writeLock", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: tableSeqNum", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: resolvedTime", "DEL SimpleName: resolvedTime", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: PName", "DEL SimpleName: tableName", "DEL SingleVariableDeclaration", "DEL SimpleName: delegate", "DEL SimpleName: isMultitenant", "DEL ExpressionStatement", "DEL SimpleName: isWalDisabled", "DEL SimpleName: isNamespaceMapped", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleType: PName", "DEL PrimitiveType: boolean", "DEL SimpleName: isMultitenant", "DEL SimpleName: writeLock", "DEL SimpleName: isTransactional", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: unlock", "DEL SimpleType: SQLException", "DEL SimpleName: readWriteLock", "DEL SimpleName: SQLException", "DEL SimpleName: isNamespaceMapped", "DEL SimpleName: tenantId", "DEL SimpleName: isImmutableRows", "DEL SimpleName: storeNulls", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: lock", "DEL SimpleName: tableTimeStamp", "DEL SimpleName: storeNulls", "DEL SimpleName: columns", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TryStatement", "DEL SimpleName: tableSeqNum", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: isWalDisabled", "DEL SimpleType: PColumn", "DEL SimpleType: List", "DEL SimpleName: tenantId", "DEL PrimitiveType: long", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL ParameterizedType: List<PColumn>", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: readWriteLock", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL PrimitiveType: long", "DEL SimpleName: Override", "DEL SimpleName: updateCacheFrequency"]}]}}, {"PSynchronizedMetaData_diff": {"operations": ["Delete SimpleName: Override(420)", "Delete MarkerAnnotation(421)", "Delete Modifier: public(422)", "Delete PrimitiveType: void(423)", "Delete SimpleName: addColumn(424)", "Delete SimpleName: PName(425)", "Delete SimpleType: PName(426)", "Delete SimpleName: tenantId(427)", "Delete SingleVariableDeclaration(428)", "Delete SimpleName: String(429)", "Delete SimpleType: String(430)", "Delete SimpleName: tableName(431)", "Delete SingleVariableDeclaration(432)", "Delete SimpleName: List(433)", "Delete SimpleType: List(434)", "Delete SimpleName: PColumn(435)", "Delete SimpleType: PColumn(436)", "Delete ParameterizedType: List<PColumn>(437)", "Delete SimpleName: columns(438)", "Delete SingleVariableDeclaration(439)", "Delete PrimitiveType: long(440)", "Delete SimpleName: tableTimeStamp(441)", "Delete SingleVariableDeclaration(442)", "Delete PrimitiveType: long(443)", "Delete SimpleName: tableSeqNum(444)", "Delete SingleVariableDeclaration(445)", "Delete PrimitiveType: boolean(446)", "Delete SimpleName: isImmutableRows(447)", "Delete SingleVariableDeclaration(448)", "Delete PrimitiveType: boolean(449)", "Delete SimpleName: isWalDisabled(450)", "Delete SingleVariableDeclaration(451)", "Delete PrimitiveType: boolean(452)", "Delete SimpleName: isMultitenant(453)", "Delete SingleVariableDeclaration(454)", "Delete PrimitiveType: boolean(455)", "Delete SimpleName: storeNulls(456)", "Delete SingleVariableDeclaration(457)", "Delete PrimitiveType: boolean(458)", "Delete SimpleName: isTransactional(459)", "Delete SingleVariableDeclaration(460)", "Delete PrimitiveType: long(461)", "Delete SimpleName: updateCacheFrequency(462)", "Delete SingleVariableDeclaration(463)", "Delete PrimitiveType: boolean(464)", "Delete SimpleName: isNamespaceMapped(465)", "Delete SingleVariableDeclaration(466)", "Delete PrimitiveType: long(467)", "Delete SimpleName: resolvedTime(468)", "Delete SingleVariableDeclaration(469)", "Delete SimpleName: SQLException(470)", "Delete SimpleType: SQLException(471)", "Delete SimpleName: readWriteLock(472)", "Delete SimpleName: writeLock(473)", "Delete MethodInvocation(474)", "Delete SimpleName: lock(475)", "Delete MethodInvocation(476)", "Delete ExpressionStatement(477)", "Delete SimpleName: delegate(478)", "Delete SimpleName: addColumn(479)", "Delete SimpleName: tenantId(480)", "Delete SimpleName: tableName(481)", "Delete SimpleName: columns(482)", "Delete SimpleName: tableTimeStamp(483)", "Delete SimpleName: tableSeqNum(484)", "Delete SimpleName: isImmutableRows(485)", "Delete SimpleName: isWalDisabled(486)", "Delete SimpleName: isMultitenant(487)", "Delete SimpleName: storeNulls(488)", "Delete SimpleName: isTransactional(489)", "Delete SimpleName: updateCacheFrequency(490)", "Delete SimpleName: isNamespaceMapped(491)", "Delete SimpleName: resolvedTime(492)", "Delete MethodInvocation(493)", "Delete ExpressionStatement(494)", "Delete Block(495)", "Delete SimpleName: readWriteLock(496)", "Delete SimpleName: writeLock(497)", "Delete MethodInvocation(498)", "Delete SimpleName: unlock(499)", "Delete MethodInvocation(500)", "Delete ExpressionStatement(501)", "Delete Block(502)", "Delete TryStatement(503)", "Delete Block(504)", "Delete MethodDeclaration(505)"]}}, {"TableProperty_cluster": {"actions": [{"root": "INS MethodDeclaration to EnumDeclaration at 34", "operations": ["INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: isMutableOnView to MethodDeclaration at 2", "INS SimpleName: isMutableOnView to ReturnStatement at 0", "INS MethodDeclaration to EnumDeclaration at 34", "INS PrimitiveType: boolean to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to EnumDeclaration at 35", "operations": ["INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS MethodDeclaration to EnumDeclaration at 35", "INS Modifier: abstract to MethodDeclaration at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Object to MethodDeclaration at 2"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "operations": ["INS SimpleName: isImmutableRows to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS SimpleType: Object to MethodDeclaration at 2", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Object to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: isMultiTenant to MethodInvocation at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: table to MethodInvocation at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 5", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 5", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleName: Object to SimpleType: Object at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleType: Object to MethodDeclaration at 2", "INS SimpleName: isWALDisabled to MethodInvocation at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 5", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 7", "operations": ["INS SimpleType: Object to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 7", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: table to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getBucketNum to MethodInvocation at 1", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 7", "operations": ["INS AnonymousClassDeclaration to EnumConstantDeclaration at 7", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleType: Object to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: getDefaultFamilyName to MethodInvocation at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 7", "operations": ["INS SimpleName: PTable to SimpleType: PTable at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 7", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Object to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS NullLiteral to ReturnStatement at 0"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleType: Object to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: getStoreNulls to MethodInvocation at 1"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "operations": ["INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: isTransactional to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleType: Object to MethodDeclaration at 2", "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3"]}, {"root": "INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "operations": ["INS AnonymousClassDeclaration to EnumConstantDeclaration at 6", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: Object to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS SimpleType: Object to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: getUpdateCacheFrequency to MethodInvocation at 1", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS Block to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS SimpleType: Object to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleName: table to SingleVariableDeclaration at 1", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getAutoPartitionSeqName to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS SimpleName: table to SingleVariableDeclaration at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: getPTableValue to MethodDeclaration at 3", "INS SimpleType: Object to MethodDeclaration at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS NullLiteral to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1"]}]}}, {"TableProperty_diff": {"operations": ["Insert MethodDeclaration(843) into EnumDeclaration(854) at 34", "Insert MethodDeclaration(853) into EnumDeclaration(854) at 35", "Insert AnonymousClassDeclaration(55) into EnumConstantDeclaration(56) at 6", "Insert AnonymousClassDeclaration(78) into EnumConstantDeclaration(79) at 5", "Insert AnonymousClassDeclaration(101) into EnumConstantDeclaration(102) at 5", "Insert AnonymousClassDeclaration(126) into EnumConstantDeclaration(127) at 7", "Insert AnonymousClassDeclaration(151) into EnumConstantDeclaration(152) at 7", "Insert AnonymousClassDeclaration(174) into EnumConstantDeclaration(175) at 7", "Insert AnonymousClassDeclaration(198) into EnumConstantDeclaration(199) at 6", "Insert AnonymousClassDeclaration(222) into EnumConstantDeclaration(223) at 6", "Insert AnonymousClassDeclaration(376) into EnumConstantDeclaration(377) at 6", "Insert Modifier: public(837) into MethodDeclaration(843) at 0", "Insert PrimitiveType: boolean(838) into MethodDeclaration(843) at 1", "Insert SimpleName: isMutableOnView(839) into MethodDeclaration(843) at 2", "Insert Block(842) into MethodDeclaration(843) at 3", "Insert Modifier: abstract(844) into MethodDeclaration(853) at 0", "Insert Modifier: public(845) into MethodDeclaration(853) at 1", "Insert SimpleType: Object(847) into MethodDeclaration(853) at 2", "Insert SimpleName: getPTableValue(848) into MethodDeclaration(853) at 3", "Insert SingleVariableDeclaration(852) into MethodDeclaration(853) at 4", "Insert MethodDeclaration(54) into AnonymousClassDeclaration(55) at 0", "Insert MethodDeclaration(77) into AnonymousClassDeclaration(78) at 0", "Insert MethodDeclaration(100) into AnonymousClassDeclaration(101) at 0", "Insert MethodDeclaration(125) into AnonymousClassDeclaration(126) at 0", "Insert MethodDeclaration(150) into AnonymousClassDeclaration(151) at 0", "Insert MethodDeclaration(173) into AnonymousClassDeclaration(174) at 0", "Insert MethodDeclaration(197) into AnonymousClassDeclaration(198) at 0", "Insert MethodDeclaration(221) into AnonymousClassDeclaration(222) at 0", "Insert MethodDeclaration(303) into AnonymousClassDeclaration(304) at 1", "Insert MethodDeclaration(351) into AnonymousClassDeclaration(352) at 1", "Insert MethodDeclaration(375) into AnonymousClassDeclaration(376) at 0", "Insert MethodDeclaration(421) into AnonymousClassDeclaration(422) at 1", "Insert ReturnStatement(841) into Block(842) at 0", "Insert SimpleName: Object(846) into SimpleType: Object(847) at 0", "Insert SimpleType: PTable(850) into SingleVariableDeclaration(852) at 0", "Insert SimpleName: table(851) into SingleVariableDeclaration(852) at 1", "Insert MarkerAnnotation(40) into MethodDeclaration(54) at 0", "Insert Modifier: public(41) into MethodDeclaration(54) at 1", "Insert SimpleType: Object(43) into MethodDeclaration(54) at 2", "Insert SimpleName: getPTableValue(44) into MethodDeclaration(54) at 3", "Insert SingleVariableDeclaration(48) into MethodDeclaration(54) at 4", "Insert Block(53) into MethodDeclaration(54) at 5", "Insert MarkerAnnotation(63) into MethodDeclaration(77) at 0", "Insert Modifier: public(64) into MethodDeclaration(77) at 1", "Insert SimpleType: Object(66) into MethodDeclaration(77) at 2", "Insert SimpleName: getPTableValue(67) into MethodDeclaration(77) at 3", "Insert SingleVariableDeclaration(71) into MethodDeclaration(77) at 4", "Insert Block(76) into MethodDeclaration(77) at 5", "Insert MarkerAnnotation(86) into MethodDeclaration(100) at 0", "Insert Modifier: public(87) into MethodDeclaration(100) at 1", "Insert SimpleType: Object(89) into MethodDeclaration(100) at 2", "Insert SimpleName: getPTableValue(90) into MethodDeclaration(100) at 3", "Insert SingleVariableDeclaration(94) into MethodDeclaration(100) at 4", "Insert Block(99) into MethodDeclaration(100) at 5", "Insert MarkerAnnotation(111) into MethodDeclaration(125) at 0", "Insert Modifier: public(112) into MethodDeclaration(125) at 1", "Insert SimpleType: Object(114) into MethodDeclaration(125) at 2", "Insert SimpleName: getPTableValue(115) into MethodDeclaration(125) at 3", "Insert SingleVariableDeclaration(119) into MethodDeclaration(125) at 4", "Insert Block(124) into MethodDeclaration(125) at 5", "Insert MarkerAnnotation(136) into MethodDeclaration(150) at 0", "Insert Modifier: public(137) into MethodDeclaration(150) at 1", "Insert SimpleType: Object(139) into MethodDeclaration(150) at 2", "Insert SimpleName: getPTableValue(140) into MethodDeclaration(150) at 3", "Insert SingleVariableDeclaration(144) into MethodDeclaration(150) at 4", "Insert Block(149) into MethodDeclaration(150) at 5", "Insert MarkerAnnotation(161) into MethodDeclaration(173) at 0", "Insert Modifier: public(162) into MethodDeclaration(173) at 1", "Insert SimpleType: Object(164) into MethodDeclaration(173) at 2", "Insert SimpleName: getPTableValue(165) into MethodDeclaration(173) at 3", "Insert SingleVariableDeclaration(169) into MethodDeclaration(173) at 4", "Insert Block(172) into MethodDeclaration(173) at 5", "Insert MarkerAnnotation(183) into MethodDeclaration(197) at 0", "Insert Modifier: public(184) into MethodDeclaration(197) at 1", "Insert SimpleType: Object(186) into MethodDeclaration(197) at 2", "Insert SimpleName: getPTableValue(187) into MethodDeclaration(197) at 3", "Insert SingleVariableDeclaration(191) into MethodDeclaration(197) at 4", "Insert Block(196) into MethodDeclaration(197) at 5", "Insert MarkerAnnotation(207) into MethodDeclaration(221) at 0", "Insert Modifier: public(208) into MethodDeclaration(221) at 1", "Insert SimpleType: Object(210) into MethodDeclaration(221) at 2", "Insert SimpleName: getPTableValue(211) into MethodDeclaration(221) at 3", "Insert SingleVariableDeclaration(215) into MethodDeclaration(221) at 4", "Insert Block(220) into MethodDeclaration(221) at 5", "Insert MarkerAnnotation(289) into MethodDeclaration(303) at 0", "Insert Modifier: public(290) into MethodDeclaration(303) at 1", "Insert SimpleType: Object(292) into MethodDeclaration(303) at 2", "Insert SimpleName: getPTableValue(293) into MethodDeclaration(303) at 3", "Insert SingleVariableDeclaration(297) into MethodDeclaration(303) at 4", "Insert Block(302) into MethodDeclaration(303) at 5", "Insert MarkerAnnotation(337) into MethodDeclaration(351) at 0", "Insert Modifier: public(338) into MethodDeclaration(351) at 1", "Insert SimpleType: Object(340) into MethodDeclaration(351) at 2", "Insert SimpleName: getPTableValue(341) into MethodDeclaration(351) at 3", "Insert SingleVariableDeclaration(345) into MethodDeclaration(351) at 4", "Insert Block(350) into MethodDeclaration(351) at 5", "Insert MarkerAnnotation(361) into MethodDeclaration(375) at 0", "Insert Modifier: public(362) into MethodDeclaration(375) at 1", "Insert SimpleType: Object(364) into MethodDeclaration(375) at 2", "Insert SimpleName: getPTableValue(365) into MethodDeclaration(375) at 3", "Insert SingleVariableDeclaration(369) into MethodDeclaration(375) at 4", "Insert Block(374) into MethodDeclaration(375) at 5", "Insert MarkerAnnotation(409) into MethodDeclaration(421) at 0", "Insert Modifier: public(410) into MethodDeclaration(421) at 1", "Insert SimpleType: Object(412) into MethodDeclaration(421) at 2", "Insert SimpleName: getPTableValue(413) into MethodDeclaration(421) at 3", "Insert SingleVariableDeclaration(417) into MethodDeclaration(421) at 4", "Insert Block(420) into MethodDeclaration(421) at 5", "Insert SimpleName: isMutableOnView(840) into ReturnStatement(841) at 0", "Insert SimpleName: PTable(849) into SimpleType: PTable(850) at 0", "Insert SimpleName: Override(39) into MarkerAnnotation(40) at 0", "Insert SimpleName: Object(42) into SimpleType: Object(43) at 0", "Insert SimpleType: PTable(46) into SingleVariableDeclaration(48) at 0", "Insert SimpleName: table(47) into SingleVariableDeclaration(48) at 1", "Insert ReturnStatement(52) into Block(53) at 0", "Insert SimpleName: Override(62) into MarkerAnnotation(63) at 0", "Insert SimpleName: Object(65) into SimpleType: Object(66) at 0", "Insert SimpleType: PTable(69) into SingleVariableDeclaration(71) at 0", "Insert SimpleName: table(70) into SingleVariableDeclaration(71) at 1", "Insert ReturnStatement(75) into Block(76) at 0", "Insert SimpleName: Override(85) into MarkerAnnotation(86) at 0", "Insert SimpleName: Object(88) into SimpleType: Object(89) at 0", "Insert SimpleType: PTable(92) into SingleVariableDeclaration(94) at 0", "Insert SimpleName: table(93) into SingleVariableDeclaration(94) at 1", "Insert ReturnStatement(98) into Block(99) at 0", "Insert SimpleName: Override(110) into MarkerAnnotation(111) at 0", "Insert SimpleName: Object(113) into SimpleType: Object(114) at 0", "Insert SimpleType: PTable(117) into SingleVariableDeclaration(119) at 0", "Insert SimpleName: table(118) into SingleVariableDeclaration(119) at 1", "Insert ReturnStatement(123) into Block(124) at 0", "Insert SimpleName: Override(135) into MarkerAnnotation(136) at 0", "Insert SimpleName: Object(138) into SimpleType: Object(139) at 0", "Insert SimpleType: PTable(142) into SingleVariableDeclaration(144) at 0", "Insert SimpleName: table(143) into SingleVariableDeclaration(144) at 1", "Insert ReturnStatement(148) into Block(149) at 0", "Insert SimpleName: Override(160) into MarkerAnnotation(161) at 0", "Insert SimpleName: Object(163) into SimpleType: Object(164) at 0", "Insert SimpleType: PTable(167) into SingleVariableDeclaration(169) at 0", "Insert SimpleName: table(168) into SingleVariableDeclaration(169) at 1", "Insert ReturnStatement(171) into Block(172) at 0", "Insert SimpleName: Override(182) into MarkerAnnotation(183) at 0", "Insert SimpleName: Object(185) into SimpleType: Object(186) at 0", "Insert SimpleType: PTable(189) into SingleVariableDeclaration(191) at 0", "Insert SimpleName: table(190) into SingleVariableDeclaration(191) at 1", "Insert ReturnStatement(195) into Block(196) at 0", "Insert SimpleName: Override(206) into MarkerAnnotation(207) at 0", "Insert SimpleName: Object(209) into SimpleType: Object(210) at 0", "Insert SimpleType: PTable(213) into SingleVariableDeclaration(215) at 0", "Insert SimpleName: table(214) into SingleVariableDeclaration(215) at 1", "Insert ReturnStatement(219) into Block(220) at 0", "Insert SimpleName: Override(288) into MarkerAnnotation(289) at 0", "Insert SimpleName: Object(291) into SimpleType: Object(292) at 0", "Insert SimpleType: PTable(295) into SingleVariableDeclaration(297) at 0", "Insert SimpleName: table(296) into SingleVariableDeclaration(297) at 1", "Insert ReturnStatement(301) into Block(302) at 0", "Insert SimpleName: Override(336) into MarkerAnnotation(337) at 0", "Insert SimpleName: Object(339) into SimpleType: Object(340) at 0", "Insert SimpleType: PTable(343) into SingleVariableDeclaration(345) at 0", "Insert SimpleName: table(344) into SingleVariableDeclaration(345) at 1", "Insert ReturnStatement(349) into Block(350) at 0", "Insert SimpleName: Override(360) into MarkerAnnotation(361) at 0", "Insert SimpleName: Object(363) into SimpleType: Object(364) at 0", "Insert SimpleType: PTable(367) into SingleVariableDeclaration(369) at 0", "Insert SimpleName: table(368) into SingleVariableDeclaration(369) at 1", "Insert ReturnStatement(373) into Block(374) at 0", "Insert SimpleName: Override(408) into MarkerAnnotation(409) at 0", "Insert SimpleName: Object(411) into SimpleType: Object(412) at 0", "Insert SimpleType: PTable(415) into SingleVariableDeclaration(417) at 0", "Insert SimpleName: table(416) into SingleVariableDeclaration(417) at 1", "Insert ReturnStatement(419) into Block(420) at 0", "Insert SimpleName: PTable(45) into SimpleType: PTable(46) at 0", "Insert MethodInvocation(51) into ReturnStatement(52) at 0", "Insert SimpleName: PTable(68) into SimpleType: PTable(69) at 0", "Insert MethodInvocation(74) into ReturnStatement(75) at 0", "Insert SimpleName: PTable(91) into SimpleType: PTable(92) at 0", "Insert MethodInvocation(97) into ReturnStatement(98) at 0", "Insert SimpleName: PTable(116) into SimpleType: PTable(117) at 0", "Insert MethodInvocation(122) into ReturnStatement(123) at 0", "Insert SimpleName: PTable(141) into SimpleType: PTable(142) at 0", "Insert MethodInvocation(147) into ReturnStatement(148) at 0", "Insert SimpleName: PTable(166) into SimpleType: PTable(167) at 0", "Insert NullLiteral(170) into ReturnStatement(171) at 0", "Insert SimpleName: PTable(188) into SimpleType: PTable(189) at 0", "Insert MethodInvocation(194) into ReturnStatement(195) at 0", "Insert SimpleName: PTable(212) into SimpleType: PTable(213) at 0", "Insert MethodInvocation(218) into ReturnStatement(219) at 0", "Insert SimpleName: PTable(294) into SimpleType: PTable(295) at 0", "Insert MethodInvocation(300) into ReturnStatement(301) at 0", "Insert SimpleName: PTable(342) into SimpleType: PTable(343) at 0", "Insert MethodInvocation(348) into ReturnStatement(349) at 0", "Insert SimpleName: PTable(366) into SimpleType: PTable(367) at 0", "Insert MethodInvocation(372) into ReturnStatement(373) at 0", "Insert SimpleName: PTable(414) into SimpleType: PTable(415) at 0", "Insert NullLiteral(418) into ReturnStatement(419) at 0", "Insert SimpleName: table(49) into MethodInvocation(51) at 0", "Insert SimpleName: isImmutableRows(50) into MethodInvocation(51) at 1", "Insert SimpleName: table(72) into MethodInvocation(74) at 0", "Insert SimpleName: isMultiTenant(73) into MethodInvocation(74) at 1", "Insert SimpleName: table(95) into MethodInvocation(97) at 0", "Insert SimpleName: isWALDisabled(96) into MethodInvocation(97) at 1", "Insert SimpleName: table(120) into MethodInvocation(122) at 0", "Insert SimpleName: getBucketNum(121) into MethodInvocation(122) at 1", "Insert SimpleName: table(145) into MethodInvocation(147) at 0", "Insert SimpleName: getDefaultFamilyName(146) into MethodInvocation(147) at 1", "Insert SimpleName: table(192) into MethodInvocation(194) at 0", "Insert SimpleName: getStoreNulls(193) into MethodInvocation(194) at 1", "Insert SimpleName: table(216) into MethodInvocation(218) at 0", "Insert SimpleName: isTransactional(217) into MethodInvocation(218) at 1", "Insert SimpleName: table(298) into MethodInvocation(300) at 0", "Insert SimpleName: getUpdateCacheFrequency(299) into MethodInvocation(300) at 1", "Insert SimpleName: table(346) into MethodInvocation(348) at 0", "Insert SimpleName: getAutoPartitionSeqName(347) into MethodInvocation(348) at 1", "Insert SimpleName: table(370) into MethodInvocation(372) at 0", "Insert SimpleName: isAppendOnlySchema(371) into MethodInvocation(372) at 1"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}