{"application": "apache-phoenix", "csha": "023f8631fc1688eaecef475d47d9e926fe7d3014", "files": [{"IndexMaintainer_cluster": {"actions": [{"root": "INS EnhancedForStatement to Block at 6", "operations": ["INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: getFamily to MethodInvocation at 1", "INS SimpleName: colRef to SingleVariableDeclaration at 1", "INS SimpleName: colRef to MethodInvocation at 0", "INS SimpleType: ColumnReference to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 2", "INS QualifiedName: QueryConstants.SINGLE_KEYVALUE_COLUMN_QUALIFIER_BYTES to ClassInstanceCreation at 2", "INS IfStatement to Block at 0", "INS SimpleName: ColumnReference to SimpleType: ColumnReference at 0", "INS SimpleName: immutableStorageScheme to InfixExpression: == at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: ColumnReference to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: allColumns to MethodInvocation at 0", "INS SimpleName: ColumnReference to SimpleType: ColumnReference at 0", "INS ExpressionStatement to Block at 0", "INS EnhancedForStatement to Block at 6", "INS MethodInvocation to ClassInstanceCreation at 1", "INS QualifiedName: ImmutableStorageScheme.ONE_CELL_PER_COLUMN to InfixExpression: == at 1"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS SimpleName: valueGetter to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: || to IfStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from addAll to add", "operations": ["UPD SimpleName: addAll from addAll to add"]}, {"root": "INS SimpleName: colRef to MethodInvocation at 2", "operations": ["INS SimpleName: colRef to MethodInvocation at 2"]}]}}, {"IndexMaintainer_diff": {"operations": ["Insert EnhancedForStatement(8250) into Block(8445) at 6", "Insert InfixExpression: ||(4710) into IfStatement(4749) at 0", "Insert SingleVariableDeclaration(8223) into EnhancedForStatement(8250) at 0", "Move MethodInvocation(8220) into EnhancedForStatement(8250) at 1", "Insert Block(8249) into EnhancedForStatement(8250) at 2", "Insert InfixExpression: ==(4703) into InfixExpression: ||(4710) at 0", "Move InfixExpression: ==(4706) into InfixExpression: ||(4710) at 1", "Insert SimpleType: ColumnReference(8221) into SingleVariableDeclaration(8223) at 0", "Insert SimpleName: colRef(8222) into SingleVariableDeclaration(8223) at 1", "Insert IfStatement(8248) into Block(8249) at 0", "Insert SimpleName: valueGetter(4701) into InfixExpression: ==(4703) at 0", "Insert NullLiteral(4702) into InfixExpression: ==(4703) at 1", "Insert SimpleName: ColumnReference(8220) into SimpleType: ColumnReference(8221) at 0", "Insert InfixExpression: ==(8229) into IfStatement(8248) at 0", "Insert Block(8235) into IfStatement(8248) at 1", "Insert Block(8247) into IfStatement(8248) at 2", "Insert SimpleName: immutableStorageScheme(8227) into InfixExpression: ==(8229) at 0", "Insert QualifiedName: ImmutableStorageScheme.ONE_CELL_PER_COLUMN(8228) into InfixExpression: ==(8229) at 1", "Move ExpressionStatement(8222) into Block(8235) at 0", "Insert ExpressionStatement(8246) into Block(8247) at 0", "Insert MethodInvocation(8245) into ExpressionStatement(8246) at 0", "Update SimpleName: addAll(8217) to add", "Insert SimpleName: colRef(8232) into MethodInvocation(8233) at 2", "Insert SimpleName: allColumns(8236) into MethodInvocation(8245) at 0", "Insert SimpleName: add(8237) into MethodInvocation(8245) at 1", "Insert ClassInstanceCreation(8244) into MethodInvocation(8245) at 2", "Insert SimpleType: ColumnReference(8239) into ClassInstanceCreation(8244) at 0", "Insert MethodInvocation(8242) into ClassInstanceCreation(8244) at 1", "Insert QualifiedName: QueryConstants.SINGLE_KEYVALUE_COLUMN_QUALIFIER_BYTES(8243) into ClassInstanceCreation(8244) at 2", "Insert SimpleName: ColumnReference(8238) into SimpleType: ColumnReference(8239) at 0", "Insert SimpleName: colRef(8240) into MethodInvocation(8242) at 0", "Insert SimpleName: getFamily(8241) into MethodInvocation(8242) at 1"]}}, {"PhoenixIndexCodec_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: java.util.Set to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: org.apache.phoenix.hbase.index.covered.update.ColumnReference to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS ImportDeclaration to CompilationUnit at 22", "INS QualifiedName: com.google.common.collect.Sets to ImportDeclaration at 0"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS SimpleName: getEmptyKeyValueQualifier to MethodInvocation at 1", "INS SimpleName: Sets to MethodInvocation at 0", "INS SimpleName: indexMaintainers to MethodInvocation at 0", "INS SimpleName: state to MethodInvocation at 0", "INS BooleanLiteral: true to MethodInvocation at 4", "INS MethodInvocation to ClassInstanceCreation at 2", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: cols to MethodInvocation at 2", "INS SimpleName: indexMaintainers to MethodInvocation at 0", "INS SimpleType: Set to ParameterizedType: Set<ColumnReference> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ColumnReference to SimpleType: ColumnReference at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: cols to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getIndexUpdateState to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: ColumnReference to SimpleType: ColumnReference at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: cols to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: ColumnReference to ClassInstanceCreation at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS ParameterizedType: Set<ColumnReference> to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ColumnReference to ParameterizedType: Set<ColumnReference> at 1", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 4", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleName: statePair to VariableDeclarationFragment at 0", "INS SimpleName: getDataEmptyKeyValueCF to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: valueGetter to InfixExpression: != at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Pair<ValueGetter,IndexUpdate> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 4", "operations": ["INS BooleanLiteral: false to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: getIndexUpdateState", "DEL SimpleName: statePair", "DEL SimpleName: state", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}]}}, {"PhoenixIndexCodec_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(603) at 5", "Insert ImportDeclaration(37) into CompilationUnit(603) at 18", "Insert ImportDeclaration(45) into CompilationUnit(603) at 22", "Insert QualifiedName: java.util.Set(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: org.apache.phoenix.hbase.index.covered.update.ColumnReference(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: com.google.common.collect.Sets(44) into ImportDeclaration(45) at 0", "Insert Block(577) into EnhancedForStatement(578) at 2", "Insert VariableDeclarationStatement(457) into Block(577) at 0", "Insert ExpressionStatement(476) into Block(577) at 1", "Insert VariableDeclarationStatement(494) into Block(577) at 2", "Move VariableDeclarationStatement(463) into Block(577) at 3", "Insert IfStatement(576) into Block(577) at 4", "Insert ParameterizedType: Set<ColumnReference>(448) into VariableDeclarationStatement(457) at 0", "Insert VariableDeclarationFragment(456) into VariableDeclarationStatement(457) at 1", "Insert MethodInvocation(475) into ExpressionStatement(476) at 0", "Move ParameterizedType: Pair<ValueGetter,IndexUpdate>(443) into VariableDeclarationStatement(494) at 0", "Insert VariableDeclarationFragment(493) into VariableDeclarationStatement(494) at 1", "Insert InfixExpression: !=(505) into IfStatement(576) at 0", "Move Block(533) into IfStatement(576) at 1", "Insert SimpleType: Set(445) into ParameterizedType: Set<ColumnReference>(448) at 0", "Insert SimpleType: ColumnReference(447) into ParameterizedType: Set<ColumnReference>(448) at 1", "Insert SimpleName: cols(449) into VariableDeclarationFragment(456) at 0", "Insert MethodInvocation(455) into VariableDeclarationFragment(456) at 1", "Insert SimpleName: cols(458) into MethodInvocation(475) at 0", "Insert SimpleName: add(459) into MethodInvocation(475) at 1", "Insert ClassInstanceCreation(474) into MethodInvocation(475) at 2", "Insert SimpleName: statePair(484) into VariableDeclarationFragment(493) at 0", "Insert MethodInvocation(492) into VariableDeclarationFragment(493) at 1", "Insert SimpleName: valueGetter(503) into InfixExpression: !=(505) at 0", "Insert NullLiteral(504) into InfixExpression: !=(505) at 1", "Insert BooleanLiteral: false(290) into MethodInvocation(291) at 4", "Insert SimpleName: Set(444) into SimpleType: Set(445) at 0", "Insert SimpleName: ColumnReference(446) into SimpleType: ColumnReference(447) at 0", "Insert SimpleName: Sets(450) into MethodInvocation(455) at 0", "Insert SimpleName: newHashSet(451) into MethodInvocation(455) at 1", "Move MethodInvocation(449) into MethodInvocation(455) at 2", "Insert SimpleType: ColumnReference(461) into ClassInstanceCreation(474) at 0", "Insert MethodInvocation(467) into ClassInstanceCreation(474) at 1", "Insert MethodInvocation(473) into ClassInstanceCreation(474) at 2", "Insert SimpleName: state(485) into MethodInvocation(492) at 0", "Insert SimpleName: getIndexUpdateState(486) into MethodInvocation(492) at 1", "Insert SimpleName: cols(487) into MethodInvocation(492) at 2", "Move MethodInvocation(452) into MethodInvocation(492) at 3", "Insert BooleanLiteral: true(491) into MethodInvocation(492) at 4", "Insert SimpleName: ColumnReference(460) into SimpleType: ColumnReference(461) at 0", "Insert MethodInvocation(465) into MethodInvocation(467) at 0", "Insert SimpleName: getDataEmptyKeyValueCF(466) into MethodInvocation(467) at 1", "Insert MethodInvocation(471) into MethodInvocation(473) at 0", "Insert SimpleName: getEmptyKeyValueQualifier(472) into MethodInvocation(473) at 1", "Insert SimpleName: indexMaintainers(462) into MethodInvocation(465) at 0", "Insert SimpleName: get(463) into MethodInvocation(465) at 1", "Insert NumberLiteral: 0(464) into MethodInvocation(465) at 2", "Insert SimpleName: indexMaintainers(468) into MethodInvocation(471) at 0", "Insert SimpleName: get(469) into MethodInvocation(471) at 1", "Insert NumberLiteral: 0(470) into MethodInvocation(471) at 2", "Delete SimpleName: statePair(444)", "Delete SimpleName: state(445)", "Delete SimpleName: getIndexUpdateState(446)", "Delete MethodInvocation(453)", "Delete VariableDeclarationFragment(454)", "Delete VariableDeclarationStatement(455)"]}}, {"PhoenixTransactionalIndexer_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: returnNullScannerIfRowNotFound to SingleVariableDeclaration at 1"]}]}}, {"PhoenixTransactionalIndexer_diff": {"operations": ["Insert SingleVariableDeclaration(2506) into MethodDeclaration(2585) at 6", "Insert PrimitiveType: boolean(2504) into SingleVariableDeclaration(2506) at 0", "Insert SimpleName: returnNullScannerIfRowNotFound(2505) into SingleVariableDeclaration(2506) at 1"]}}, {"MetaDataClient_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 211", "operations": ["INS ImportDeclaration to CompilationUnit at 211", "INS QualifiedName: com.google.common.collect.ImmutableListMultimap to ImportDeclaration at 0"]}, {"root": "INS IfStatement to Block at 12", "operations": ["INS SimpleName: table to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS SimpleName: getImmutableStorageScheme to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS QualifiedName: ImmutableStorageScheme.ONE_CELL_PER_COLUMN to InfixExpression: == at 1", "INS IfStatement to Block at 12", "INS InfixExpression: == to InfixExpression: || at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: table to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: isImmutableRows to MethodInvocation at 1", "INS InfixExpression: || to IfStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: state to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: state to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}]}}, {"MetaDataClient_diff": {"operations": ["Insert ImportDeclaration(423) into CompilationUnit(20578) at 211", "Insert QualifiedName: com.google.common.collect.ImmutableListMultimap(422) into ImportDeclaration(423) at 0", "Insert IfStatement(19244) into Block(19247) at 12", "Insert Assignment: =(19074) into ExpressionStatement(19075) at 0", "Insert InfixExpression: ||(19179) into IfStatement(19244) at 0", "Insert Block(19243) into IfStatement(19244) at 1", "Insert SimpleName: state(19056) into Assignment: =(19074) at 0", "Move MethodInvocation(19070) into Assignment: =(19074) at 1", "Insert PrefixExpression: !(19173) into InfixExpression: ||(19179) at 0", "Insert InfixExpression: ==(19178) into InfixExpression: ||(19179) at 1", "Move EnhancedForStatement(19226) into Block(19243) at 0", "Insert MethodInvocation(19172) into PrefixExpression: !(19173) at 0", "Insert MethodInvocation(19176) into InfixExpression: ==(19178) at 0", "Insert QualifiedName: ImmutableStorageScheme.ONE_CELL_PER_COLUMN(19177) into InfixExpression: ==(19178) at 1", "Insert SimpleName: table(19170) into MethodInvocation(19172) at 0", "Insert SimpleName: isImmutableRows(19171) into MethodInvocation(19172) at 1", "Insert SimpleName: table(19174) into MethodInvocation(19176) at 0", "Insert SimpleName: getImmutableStorageScheme(19175) into MethodInvocation(19176) at 1", "Insert Assignment: =(19162) into ExpressionStatement(19163) at 0", "Insert SimpleName: state(19142) into Assignment: =(19162) at 0", "Move MethodInvocation(19156) into Assignment: =(19162) at 1"]}}, {"DropMetadataIT_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.util.PhoenixRuntime.TENANT_ID_ATTRIB"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.junit.Assert.assertEquals", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.junit.Assert.assertNotNull", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.junit.Assert.assertNull", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.junit.Assert.fail"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.sql.PreparedStatement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.hbase.client.HTable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.client.Result"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.client.ResultScanner"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.client.Scan"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.query.QueryConstants"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.schema.ColumnNotFoundException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.schema.PColumn"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.schema.PName", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.schema.PNameFactory"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.schema.PTable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.schema.PTableKey"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.schema.TableNotFoundException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.util.EncodedColumnsUtil", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.util.IndexUtil", "DEL ImportDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL StringLiteral: \"tenant1\"", "DEL SimpleType: String", "DEL Modifier: private", "DEL SimpleName: TENANT_ID", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: String"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: execute", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: PTable", "DEL SimpleName: indexTablePhysicalName", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Scan", "DEL SimpleName: dataTableFullName", "DEL TypeLiteral", "DEL SimpleName: dataTableFullName", "DEL VariableDeclarationStatement", "DEL SimpleName: indexTableName", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: Scan", "DEL SimpleName: unwrap", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleType: PTable", "DEL SimpleName: fail", "DEL SimpleName: localIndexTablePhysicalName", "DEL TypeLiteral", "DEL StringLiteral: \"a\"", "DEL SimpleName: getQueryServices", "DEL SimpleName: conn", "DEL SimpleName: getScanner", "DEL SimpleType: TableNotFoundException", "DEL SimpleName: getPhysicalName", "DEL SimpleName: PhoenixConnection", "DEL VariableDeclarationStatement", "DEL SimpleName: conn", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleType: PhoenixConnection", "DEL SimpleType: Scan", "DEL SimpleName: unwrap", "DEL SimpleName: dataTableFullName", "DEL SimpleName: PName", "DEL SimpleType: PreparedStatement", "DEL MethodInvocation", "DEL SimpleName: indexTableName", "DEL SimpleName: dataTable", "DEL SimpleName: indexTableName", "DEL SimpleName: prepareStatement", "DEL SimpleType: TableNotFoundException", "DEL SimpleName: pconn", "DEL SimpleName: size", "DEL StringLiteral: \"LOCAL_\"", "DEL ExpressionStatement", "DEL SimpleName: PhoenixConnection", "DEL SimpleName: pconn", "DEL TryStatement", "DEL SimpleName: getBytes", "DEL SimpleName: addFamily", "DEL SimpleName: createStatement", "DEL SimpleName: getBytes", "DEL SimpleName: TableNotFoundException", "DEL SimpleName: assertNull", "DEL SimpleName: String", "DEL ArrayType: byte[]", "DEL SimpleName: getConnection", "DEL SimpleName: getTable", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: conn", "DEL StringLiteral: \" ON \"", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \"Index table should have been dropped\"", "DEL SimpleName: getColumnForColumnName", "DEL MethodInvocation", "DEL CatchClause", "DEL ExpressionStatement", "DEL SimpleName: PhoenixConnection", "DEL SimpleName: dataTableFullName", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: getColumnQualifierBytes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: next", "DEL SimpleName: fail", "DEL SimpleName: pconn", "DEL SimpleName: conn", "DEL ExpressionStatement", "DEL SimpleName: Connection", "DEL StringLiteral: \"1\"", "DEL NullLiteral", "DEL SimpleName: PTableKey", "DEL SimpleType: String", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SimpleName: execute", "DEL QualifiedName: QueryConstants.DEFAULT_LOCAL_INDEX_COLUMN_FAMILY_BYTES", "DEL TypeLiteral", "DEL SimpleName: getTable", "DEL StringLiteral: \" DROP COLUMN v2 \"", "DEL SimpleName: localIndexTableName1", "DEL SimpleName: indexTable", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SimpleName: ResultScanner", "DEL MethodInvocation", "DEL QualifiedName: QueryConstants.DEFAULT_LOCAL_INDEX_COLUMN_FAMILY_BYTES", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: getTableName", "DEL SimpleName: dataTableFullName", "DEL SimpleType: PTableKey", "DEL SimpleName: indexTableName", "DEL SimpleType: HTable", "DEL TypeLiteral", "DEL QualifiedName: QueryConstants.DEFAULT_COLUMN_FAMILY", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"Index should have been dropped\"", "DEL SimpleName: stmt", "DEL ExpressionStatement", "DEL SimpleName: Exception", "DEL TypeLiteral", "DEL VariableDeclarationStatement", "DEL SimpleName: conn", "DEL SimpleName: localIndexTableName1", "DEL MethodInvocation", "DEL SimpleName: PTableKey", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: getTable", "DEL SimpleName: Result", "DEL MethodInvocation", "DEL SimpleName: localIndexTableName2", "DEL SimpleName: PTable", "DEL SimpleType: PTableKey", "DEL MethodInvocation", "DEL StringLiteral: \" VALUES(?,?,?)\"", "DEL SimpleName: getTable", "DEL MethodInvocation", "DEL SimpleName: results", "DEL SimpleName: e", "DEL MethodInvocation", "DEL StringLiteral: \"x\"", "DEL MethodInvocation", "DEL StringLiteral: \"UPSERT INTO \"", "DEL VariableDeclarationFragment", "DEL StringLiteral: \" (v2) INCLUDE (v1)\"", "DEL InfixExpression: +", "DEL SimpleName: getQueryServices", "DEL StringLiteral: \"localIndexTableName2 row is missing\"", "DEL SimpleName: next", "DEL NumberLiteral: 1", "DEL SimpleName: Scan", "DEL Block", "DEL Assignment: =", "DEL SimpleName: HTable", "DEL SimpleName: localIndex2", "DEL SimpleName: createStatement", "DEL StringLiteral: \" (v2) INCLUDE (v1)\"", "DEL MethodInvocation", "DEL SimpleName: createStatement", "DEL SimpleName: createStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: fail", "DEL SimpleName: PTable", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"SELECT * FROM \"", "DEL SimpleName: TableNotFoundException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: execute", "DEL SimpleName: localIndexTableName1", "DEL StringLiteral: \"Unexpected number of indexes \"", "DEL SimpleName: unwrap", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: PhoenixConnection", "DEL SimpleType: PTable", "DEL StringLiteral: \"CREATE INDEX \"", "DEL SimpleName: setAutoCommit", "DEL SimpleName: setString", "DEL ExpressionStatement", "DEL SimpleName: conn", "DEL SimpleName: stmt", "DEL SimpleName: execute", "DEL SimpleName: dataTableFullName", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: TableNotFoundException", "DEL MethodInvocation", "DEL SimpleName: unwrap", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: getIndexes", "DEL MethodInvocation", "DEL StringLiteral: \"_2\"", "DEL InfixExpression: +", "DEL SimpleName: dataTable", "DEL SimpleName: indexTable", "DEL NullLiteral", "DEL SimpleName: size", "DEL SimpleName: SchemaUtil", "DEL ExpressionStatement", "DEL Modifier: public", "DEL StringLiteral: \"V1\"", "DEL MethodDeclaration", "DEL SimpleType: PhoenixConnection", "DEL SimpleName: TableNotFoundException", "DEL MethodInvocation", "DEL SimpleName: table", "DEL StringLiteral: \"index should have been dropped\"", "DEL SimpleType: PName", "DEL BooleanLiteral: false", "DEL SimpleName: stmt", "DEL InfixExpression: +", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL SimpleName: conn", "DEL SimpleType: PTable", "DEL MethodInvocation", "DEL SimpleName: conn", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL SimpleName: conn", "DEL SimpleName: createStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: table", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleName: createStatement", "DEL SimpleName: assertNotNull", "DEL SimpleName: execute", "DEL ClassInstanceCreation", "DEL SimpleName: getTableDescriptor", "DEL InfixExpression: +", "DEL SimpleName: assertEquals", "DEL SimpleType: PhoenixConnection", "DEL StringLiteral: \"CREATE LOCAL INDEX \"", "DEL SimpleType: Result", "DEL SimpleName: getValue", "DEL SimpleName: e", "DEL SingleVariableDeclaration", "DEL SimpleName: localIndexTablePhysicalName", "DEL StringLiteral: \"Unexpected number of indexes \"", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: PTableKey", "DEL SimpleName: indexTableName", "DEL ExpressionStatement", "DEL CatchClause", "DEL MethodInvocation", "DEL StringLiteral: \"CREATE TABLE \"", "DEL VariableDeclarationFragment", "DEL SimpleName: execute", "DEL TryStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getTableDescriptor", "DEL SimpleType: PhoenixConnection", "DEL SimpleType: PhoenixConnection", "DEL MethodInvocation", "DEL SimpleName: results", "DEL SimpleName: localIndex2", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL NumberLiteral: 3", "DEL MethodInvocation", "DEL SimpleName: pconn", "DEL SimpleName: scan", "DEL SimpleType: Connection", "DEL TryStatement", "DEL VariableDeclarationStatement", "DEL StringLiteral: \" (k) INCLUDE (v1)\"", "DEL SimpleType: TableNotFoundException", "DEL SimpleName: indexTableName", "DEL Dimension", "DEL SimpleName: getQueryServices", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: execute", "DEL SimpleName: localIndexTablePhysicalName", "DEL StringLiteral: \"ALTER TABLE \"", "DEL TryStatement", "DEL SimpleName: SCHEMA_NAME", "DEL Block", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: setString", "DEL MethodInvocation", "DEL SimpleType: PTableKey", "DEL SimpleName: PhoenixConnection", "DEL SimpleName: execute", "DEL SimpleName: PhoenixConnection", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL PrimitiveType: byte", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL SimpleName: getIndexes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL NullLiteral", "DEL CatchClause", "DEL VariableDeclarationStatement", "DEL SimpleName: dataTable", "DEL ExpressionStatement", "DEL SimpleName: pconn", "DEL SingleVariableDeclaration", "DEL SimpleName: scan", "DEL SimpleName: dataTableFullName", "DEL VariableDeclarationFragment", "DEL SimpleName: dataTableFullName", "DEL ClassInstanceCreation", "DEL SimpleName: getBytes", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: TableNotFoundException", "DEL SimpleName: localIndexTableName2", "DEL NumberLiteral: 2", "DEL SimpleName: generateUniqueName", "DEL SimpleName: conn", "DEL SimpleName: result", "DEL ClassInstanceCreation", "DEL SimpleName: createStatement", "DEL SimpleName: dataTable", "DEL SimpleName: indexTablePhysicalName", "DEL InfixExpression: +", "DEL SimpleName: stmt", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL StringLiteral: \" ON \"", "DEL SimpleName: unwrap", "DEL MethodInvocation", "DEL SimpleName: PTableKey", "DEL SimpleName: String", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL SimpleName: commit", "DEL SimpleName: getPhysicalName", "DEL VariableDeclarationFragment", "DEL SimpleName: PhoenixConnection", "DEL ExpressionStatement", "DEL Block", "DEL StringLiteral: \"LOCAL_\"", "DEL SimpleName: getTable", "DEL MethodInvocation", "DEL SimpleName: unwrap", "DEL MethodInvocation", "DEL SimpleName: getTable", "DEL VariableDeclarationStatement", "DEL SimpleName: stmt", "DEL SimpleName: IndexUtil", "DEL MethodInvocation", "DEL SimpleName: setString", "DEL MethodInvocation", "DEL SimpleName: assertEquals", "DEL SimpleName: conn", "DEL SimpleName: Test", "DEL NumberLiteral: 1", "DEL SimpleName: scan", "DEL StringLiteral: \" (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"", "DEL NullLiteral", "DEL SimpleName: localIndexTableName2", "DEL SimpleName: dataTable", "DEL SimpleName: e", "DEL SimpleType: PhoenixConnection", "DEL SimpleName: generateUniqueName", "DEL SimpleName: result", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: conn", "DEL VariableDeclarationFragment", "DEL SimpleName: fail", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: PreparedStatement", "DEL SimpleName: get", "DEL StringLiteral: \"CREATE LOCAL INDEX \"", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL SimpleName: assertNotNull", "DEL MethodInvocation", "DEL SimpleName: dataTable", "DEL SimpleName: getIndexColumnName", "DEL VariableDeclarationStatement", "DEL TryStatement", "DEL MarkerAnnotation", "DEL SimpleName: dataTableFullName", "DEL VariableDeclarationFragment", "DEL SimpleName: getIndexes", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL NumberLiteral: 0", "DEL SimpleType: HTable", "DEL SimpleName: String", "DEL MethodInvocation", "DEL NumberLiteral: 3", "DEL VariableDeclarationStatement", "DEL StringLiteral: \" ON \"", "DEL SimpleName: pconn", "DEL SimpleName: PTableKey", "DEL SimpleName: HTable", "DEL SimpleName: getIndexes", "DEL SimpleName: dataTableFullName", "DEL MethodInvocation", "DEL SimpleName: results", "DEL SimpleName: get", "DEL SimpleType: PTableKey", "DEL MethodInvocation", "DEL StringLiteral: \"SELECT * FROM \"", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleType: PhoenixConnection", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL CastExpression", "DEL StringLiteral: \"_1\"", "DEL Block", "DEL TypeLiteral", "DEL SimpleType: ResultScanner", "DEL ExpressionStatement", "DEL SimpleName: testDroppingIndexedColDropsIndex", "DEL StringLiteral: \"index should have been dropped\"", "DEL SimpleType: PTableKey", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL SimpleName: testDroppingIndexedColDropsViewIndex", "DEL Modifier: public", "DEL SimpleType: Exception", "DEL SimpleName: Test", "DEL SimpleName: helpTestDroppingIndexedColDropsViewIndex", "DEL SimpleName: Exception", "DEL MarkerAnnotation", "DEL Block", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: void"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MarkerAnnotation", "DEL SimpleType: Exception", "DEL SimpleName: Exception", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: helpTestDroppingIndexedColDropsViewIndex", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: testDroppingIndexedColDropsMultiTenantViewIndex", "DEL SimpleName: Test", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: TableNotFoundException", "DEL CatchClause", "DEL ExpressionStatement", "DEL NullLiteral", "DEL VariableDeclarationExpression", "DEL SimpleName: next", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: getIndexes", "DEL SimpleName: getIndexes", "DEL SimpleName: PropertiesUtil", "DEL MethodInvocation", "DEL StringLiteral: \"a\"", "DEL SimpleType: ColumnNotFoundException", "DEL SimpleName: HTable", "DEL SimpleName: fail", "DEL MethodInvocation", "DEL SimpleName: assertNull", "DEL SimpleName: tenantId", "DEL SimpleName: createStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: PTableKey", "DEL MethodInvocation", "DEL SimpleName: createStatement", "DEL SimpleName: pconn", "DEL SimpleName: String", "DEL SimpleType: Properties", "DEL SimpleName: conn", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleType: Connection", "DEL MethodInvocation", "DEL StringLiteral: \"CREATE INDEX \"", "DEL CatchClause", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: TableNotFoundException", "DEL Assignment: =", "DEL SimpleName: pconn", "DEL NumberLiteral: 7", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL StringLiteral: \"Column should have been dropped\"", "DEL SimpleName: PTableKey", "DEL MethodInvocation", "DEL SimpleName: viewOfTable", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: stmt", "DEL MethodInvocation", "DEL SimpleName: view", "DEL NumberLiteral: 6", "DEL SimpleName: execute", "DEL ExpressionStatement", "DEL SimpleName: viewIndex2", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: unwrap", "DEL SimpleType: PTableKey", "DEL InfixExpression: +", "DEL SimpleName: assertEquals", "DEL TryStatement", "DEL MethodInvocation", "DEL SimpleName: PColumn", "DEL StringLiteral: \"\"", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: stmt", "DEL SimpleName: unwrap", "DEL SimpleName: viewIndex1", "DEL NumberLiteral: 4", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: TableNotFoundException", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: scan", "DEL SimpleName: getName", "DEL StringLiteral: \"TENANT_ID, \"", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL StringLiteral: \"MULTI_TENANT=true\"", "DEL StringLiteral: \"V4\"", "DEL SimpleName: scan", "DEL SimpleName: format", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: Scan", "DEL SimpleType: ColumnNotFoundException", "DEL MethodInvocation", "DEL StringLiteral: \"Column should have been dropped\"", "DEL MethodInvocation", "DEL SimpleName: PhoenixConnection", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL StringLiteral: \" (%s k VARCHAR NOT NULL, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR, v4 VARCHAR CONSTRAINT PK PRIMARY KEY(%s k))%s\"", "DEL SimpleName: viewConn", "DEL SimpleName: results", "DEL ExpressionStatement", "DEL StringLiteral: \"e\"", "DEL SimpleName: getString", "DEL SimpleName: setString", "DEL SimpleType: Exception", "DEL SimpleName: generateUniqueName", "DEL CatchClause", "DEL SimpleName: assertEquals", "DEL SimpleName: helpTestDroppingIndexedColDropsViewIndex", "DEL SimpleName: execute", "DEL SimpleName: stmt", "DEL MethodInvocation", "DEL SimpleName: size", "DEL SimpleName: getQueryServices", "DEL Block", "DEL NumberLiteral: 1", "DEL SimpleName: newName", "DEL SimpleName: execute", "DEL StringLiteral: \"SELECT v2 FROM \"", "DEL ExpressionStatement", "DEL QualifiedName: QueryConstants.DEFAULT_COLUMN_FAMILY", "DEL SimpleName: fail", "DEL SimpleName: execute", "DEL SimpleName: createStatement", "DEL SimpleType: PTableKey", "DEL SimpleName: size", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL StringLiteral: \"tenant1\"", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: get", "DEL VariableDeclarationStatement", "DEL SimpleName: conn", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: pconn", "DEL SimpleName: PTable", "DEL SingleVariableDeclaration", "DEL SimpleName: TENANT_ID_ATTRIB", "DEL ExpressionStatement", "DEL SimpleName: getTable", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: TableNotFoundException", "DEL SimpleName: props", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getScanner", "DEL MethodInvocation", "DEL SimpleName: viewIndexPTable", "DEL SimpleType: PTableKey", "DEL SimpleName: setInt", "DEL ClassInstanceCreation", "DEL SimpleName: viewOfTable", "DEL SimpleName: tableWithView", "DEL SimpleName: viewOfTable", "DEL InfixExpression: +", "DEL SimpleName: createStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: e", "DEL SimpleName: conn", "DEL TryStatement", "DEL ExpressionStatement", "DEL StringLiteral: \"\"", "DEL SimpleName: PreparedStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: viewConn", "DEL SimpleName: PTableKey", "DEL SimpleType: PName", "DEL StringLiteral: \"TENANT_ID VARCHAR NOT NULL, \"", "DEL SimpleName: isMultiTenant", "DEL SimpleName: unwrap", "DEL VariableDeclarationStatement", "DEL SimpleName: ColumnNotFoundException", "DEL SimpleName: e", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: assertNotNull", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: getConnection", "DEL MethodInvocation", "DEL SimpleName: PTableKey", "DEL SimpleName: stmt", "DEL SimpleName: ColumnNotFoundException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"Unexpected number of indexes \"", "DEL ArrayType: byte[]", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: results", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"Index metadata should have been dropped\"", "DEL TryStatement", "DEL MethodInvocation", "DEL SimpleName: assertEquals", "DEL SimpleName: createStatement", "DEL SimpleType: PhoenixConnection", "DEL SimpleName: tenantId", "DEL MethodInvocation", "DEL SimpleName: column", "DEL ExpressionStatement", "DEL ConditionalExpression", "DEL SimpleName: viewIndex", "DEL MethodInvocation", "DEL SimpleName: fail", "DEL MethodInvocation", "DEL SimpleName: viewOfTable", "DEL VariableDeclarationStatement", "DEL SimpleName: conn", "DEL SimpleName: Exception", "DEL SimpleName: getIndexes", "DEL SimpleName: getIndexColumnName", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getName", "DEL SimpleName: viewIndex1", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL StringLiteral: \" row is missing\"", "DEL SimpleName: stmt", "DEL MethodInvocation", "DEL TryStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: tenantId", "DEL SimpleName: column", "DEL SimpleName: PTable", "DEL SimpleType: ResultScanner", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: ddlFormat", "DEL StringLiteral: \" ON \"", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: getTable", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL SimpleType: Connection", "DEL SimpleName: view", "DEL NumberLiteral: 3", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Block", "DEL StringLiteral: \"Index on view was not created\"", "DEL SimpleName: Connection", "DEL SimpleName: execute", "DEL StringLiteral: \" DROP COLUMN v2, v3 \"", "DEL SimpleName: cq", "DEL MethodInvocation", "DEL SimpleName: view", "DEL SimpleName: getTenantId", "DEL ConditionalExpression", "DEL SimpleName: execute", "DEL SimpleName: isMultiTenant", "DEL SimpleName: viewIndex1", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL SimpleType: PhoenixConnection", "DEL SimpleName: viewConn", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL SimpleName: tableWithView", "DEL SimpleName: setString", "DEL PrimitiveType: byte", "DEL SimpleName: getTableDescriptor", "DEL SimpleName: pconn", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: props", "DEL SimpleName: conn", "DEL SimpleName: Scan", "DEL ClassInstanceCreation", "DEL SimpleName: viewIndex1", "DEL MethodInvocation", "DEL SimpleName: viewIndex2", "DEL Assignment: =", "DEL SimpleName: setAutoCommit", "DEL StringLiteral: \"d\"", "DEL SimpleName: createStatement", "DEL SimpleName: pconn", "DEL SimpleName: getString", "DEL SimpleName: getIndexes", "DEL SimpleName: PhoenixConnection", "DEL InfixExpression: +", "DEL SimpleName: isMultiTenant", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: fail", "DEL SimpleName: tenantId", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: view", "DEL SimpleName: stmt", "DEL SimpleName: PName", "DEL MethodInvocation", "DEL SimpleName: getIndexes", "DEL StringLiteral: \"CREATE VIEW \"", "DEL SimpleName: tableWithView", "DEL PrimitiveType: byte", "DEL ExpressionStatement", "DEL SimpleName: stmt", "DEL SimpleName: TENANT_ID", "DEL MethodInvocation", "DEL CatchClause", "DEL NumberLiteral: 5", "DEL SimpleName: conn", "DEL SimpleName: setString", "DEL SimpleName: getValue", "DEL TypeLiteral", "DEL SimpleType: HTable", "DEL CatchClause", "DEL SimpleType: TableNotFoundException", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL SimpleName: view", "DEL MethodInvocation", "DEL SimpleType: PhoenixConnection", "DEL SimpleType: PTable", "DEL SimpleName: prepareStatement", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: setAutoCommit", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleType: PTable", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: getTable", "DEL SimpleName: conn", "DEL Block", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: setString", "DEL SimpleName: view", "DEL StringLiteral: \"\"", "DEL SimpleName: isMultiTenant", "DEL SimpleName: view", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: assertNotNull", "DEL NumberLiteral: 2", "DEL SimpleType: HTable", "DEL Modifier: public", "DEL SimpleName: execute", "DEL SimpleName: PTable", "DEL SimpleName: Connection", "DEL SimpleName: setString", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: viewConn", "DEL SimpleName: viewIndex2", "DEL SimpleName: createStatement", "DEL MethodInvocation", "DEL SimpleName: getString", "DEL SimpleName: PhoenixConnection", "DEL SimpleName: Result", "DEL SimpleName: e", "DEL SimpleName: ddl", "DEL SimpleName: viewIndex2", "DEL MethodInvocation", "DEL StringLiteral: \"Unexpected index \"", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleType: PhoenixConnection", "DEL NumberLiteral: 0", "DEL StringLiteral: \"SELECT v3 FROM \"", "DEL PrimitiveType: boolean", "DEL SimpleName: getName", "DEL StringLiteral: \"SELECT * FROM \"", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL SimpleName: viewIndexPTable", "DEL SimpleName: table", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: PTableKey", "DEL SimpleName: fail", "DEL SimpleName: viewConn", "DEL SimpleName: viewIndex1", "DEL ConditionalExpression", "DEL SimpleName: IndexUtil", "DEL SimpleName: assertEquals", "DEL SimpleType: PTableKey", "DEL StringLiteral: \"CREATE INDEX \"", "DEL SimpleName: isMultiTenant", "DEL SimpleName: commit", "DEL SimpleName: getQueryServices", "DEL SimpleName: deepCopy", "DEL SimpleName: Scan", "DEL SimpleName: tenantId", "DEL SimpleName: viewIndex", "DEL SimpleName: PhoenixConnection", "DEL SimpleName: createStatement", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"b\"", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL SimpleName: viewConn", "DEL VariableDeclarationFragment", "DEL SimpleName: viewConn", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: cq", "DEL SimpleName: getBytes", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: pconn", "DEL SimpleName: generateUniqueName", "DEL SimpleName: viewConn", "DEL SimpleName: get", "DEL SimpleName: ResultScanner", "DEL VariableDeclarationFragment", "DEL SimpleName: getTable", "DEL StringLiteral: \"Unexpected index \"", "DEL SimpleType: Scan", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: conn", "DEL SimpleName: conn", "DEL SimpleName: pconn", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: next", "DEL SimpleName: assertEquals", "DEL VariableDeclarationStatement", "DEL SimpleName: viewIndex", "DEL SimpleName: viewOfTable", "DEL SimpleName: getColumnQualifierBytes", "DEL SimpleName: setString", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ddl", "DEL SimpleName: ddlFormat", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL StringLiteral: \" ON \"", "DEL MethodInvocation", "DEL SimpleName: execute", "DEL SimpleName: viewIndex", "DEL ExpressionStatement", "DEL StringLiteral: \"Can't find view index\"", "DEL MethodInvocation", "DEL SimpleName: viewIndex1", "DEL SimpleType: PreparedStatement", "DEL SimpleName: isMultiTenant", "DEL VariableDeclarationStatement", "DEL SimpleType: PColumn", "DEL SimpleName: stmt", "DEL SimpleName: stmt", "DEL SimpleName: viewIndexPhysicalTable", "DEL MethodInvocation", "DEL TryStatement", "DEL MethodInvocation", "DEL StringLiteral: \" VALUES(?,?,?,?,?,?,?)\"", "DEL SimpleName: tableWithView", "DEL SimpleName: generateUniqueName", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: PhoenixConnection", "DEL BooleanLiteral: false", "DEL SimpleName: TableNotFoundException", "DEL StringLiteral: \"UPSERT INTO \"", "DEL SimpleName: execute", "DEL MethodInvocation", "DEL SimpleType: Result", "DEL QualifiedName: TestUtil.TEST_PROPERTIES", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL StringLiteral: \"g\"", "DEL SimpleName: PNameFactory", "DEL VariableDeclarationFragment", "DEL ConditionalExpression", "DEL SimpleType: PTable", "DEL ExpressionStatement", "DEL SimpleName: generateUniqueName", "DEL CastExpression", "DEL StringLiteral: \"c\"", "DEL MethodInvocation", "DEL StringLiteral: \"Unexpected index \"", "DEL SimpleName: table", "DEL SimpleName: viewConn", "DEL SimpleName: Properties", "DEL VariableDeclarationFragment", "DEL SimpleName: getTable", "DEL VariableDeclarationStatement", "DEL SimpleName: pconn", "DEL SimpleName: getConnection", "DEL SimpleName: getColumnForColumnName", "DEL VariableDeclarationExpression", "DEL SimpleName: viewIndexPhysicalTable", "DEL InfixExpression: +", "DEL SimpleName: unwrap", "DEL MethodInvocation", "DEL Dimension", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: result", "DEL SimpleName: viewIndex1", "DEL SimpleName: createStatement", "DEL StringLiteral: \" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR ) AS SELECT * FROM \"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TypeLiteral", "DEL SimpleName: results", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleName: viewConn", "DEL MethodInvocation", "DEL StringLiteral: \"SELECT * FROM \"", "DEL SimpleName: getTable", "DEL SimpleName: setProperty", "DEL Block", "DEL SimpleName: execute", "DEL SimpleName: getPhysicalName", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: tableWithView", "DEL NumberLiteral: 1", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: viewOfTable", "DEL SimpleName: viewIndex2", "DEL SimpleName: viewIndexPhysicalTable", "DEL SimpleName: PhoenixConnection", "DEL SimpleType: PTableKey", "DEL SimpleName: HTable", "DEL StringLiteral: \"ALTER TABLE \"", "DEL StringLiteral: \"CREATE TABLE \"", "DEL StringLiteral: \"(v2) INCLUDE (v4)\"", "DEL SimpleName: props", "DEL SimpleName: viewConn", "DEL MethodDeclaration", "DEL SimpleName: viewIndex2", "DEL StringLiteral: \"(v1) INCLUDE (v4)\"", "DEL MethodInvocation", "DEL StringLiteral: \"Unexpected number of indexes \"", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ArrayType: byte[]", "DEL StringLiteral: \"View index should have been dropped\"", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: viewOfTable", "DEL VariableDeclarationFragment", "DEL QualifiedName: QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES", "DEL SimpleName: tableWithView", "DEL SimpleName: assertNotNull", "DEL MethodInvocation"]}]}}, {"DropMetadataIT_diff": {"operations": ["Delete QualifiedName: org.apache.phoenix.util.PhoenixRuntime.TENANT_ID_ATTRIB(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.junit.Assert.assertEquals(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.junit.Assert.assertNotNull(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.junit.Assert.assertNull(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.junit.Assert.fail(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.sql.PreparedStatement(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.apache.hadoop.hbase.client.HTable(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.apache.hadoop.hbase.client.Result(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.apache.hadoop.hbase.client.ResultScanner(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.hadoop.hbase.client.Scan(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.phoenix.query.QueryConstants(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: org.apache.phoenix.schema.ColumnNotFoundException(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: org.apache.phoenix.schema.PColumn(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: org.apache.phoenix.schema.PName(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: org.apache.phoenix.schema.PNameFactory(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: org.apache.phoenix.schema.PTable(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: org.apache.phoenix.schema.PTableKey(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: org.apache.phoenix.schema.TableNotFoundException(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: org.apache.phoenix.util.EncodedColumnsUtil(62)", "Delete ImportDeclaration(63)", "Delete QualifiedName: org.apache.phoenix.util.IndexUtil(64)", "Delete ImportDeclaration(65)", "Delete Modifier: private(116)", "Delete Modifier: final(117)", "Delete SimpleName: String(118)", "Delete SimpleType: String(119)", "Delete SimpleName: TENANT_ID(120)", "Delete StringLiteral: \"tenant1\"(121)", "Delete VariableDeclarationFragment(122)", "Delete FieldDeclaration(123)", "Delete SimpleName: Test(307)", "Delete MarkerAnnotation(308)", "Delete Modifier: public(309)", "Delete PrimitiveType: void(310)", "Delete SimpleName: testDroppingIndexedColDropsIndex(311)", "Delete SimpleName: Exception(312)", "Delete SimpleType: Exception(313)", "Delete SimpleName: String(314)", "Delete SimpleType: String(315)", "Delete SimpleName: indexTableName(316)", "Delete SimpleName: generateUniqueName(317)", "Delete MethodInvocation(318)", "Delete VariableDeclarationFragment(319)", "Delete VariableDeclarationStatement(320)", "Delete SimpleName: String(321)", "Delete SimpleType: String(322)", "Delete SimpleName: dataTableFullName(323)", "Delete SimpleName: SchemaUtil(324)", "Delete SimpleName: getTableName(325)", "Delete SimpleName: SCHEMA_NAME(326)", "Delete SimpleName: generateUniqueName(327)", "Delete MethodInvocation(328)", "Delete MethodInvocation(329)", "Delete VariableDeclarationFragment(330)", "Delete VariableDeclarationStatement(331)", "Delete SimpleName: String(332)", "Delete SimpleType: String(333)", "Delete SimpleName: localIndexTableName1(334)", "Delete StringLiteral: \"LOCAL_\"(335)", "Delete SimpleName: indexTableName(336)", "Delete StringLiteral: \"_1\"(337)", "Delete InfixExpression: +(338)", "Delete VariableDeclarationFragment(339)", "Delete VariableDeclarationStatement(340)", "Delete SimpleName: String(341)", "Delete SimpleType: String(342)", "Delete SimpleName: localIndexTableName2(343)", "Delete StringLiteral: \"LOCAL_\"(344)", "Delete SimpleName: indexTableName(345)", "Delete StringLiteral: \"_2\"(346)", "Delete InfixExpression: +(347)", "Delete VariableDeclarationFragment(348)", "Delete VariableDeclarationStatement(349)", "Delete SimpleName: Connection(350)", "Delete SimpleType: Connection(351)", "Delete SimpleName: conn(352)", "Delete SimpleName: getConnection(353)", "Delete MethodInvocation(354)", "Delete VariableDeclarationFragment(355)", "Delete VariableDeclarationExpression(356)", "Delete SimpleName: conn(357)", "Delete SimpleName: setAutoCommit(358)", "Delete BooleanLiteral: false(359)", "Delete MethodInvocation(360)", "Delete ExpressionStatement(361)", "Delete SimpleName: conn(362)", "Delete SimpleName: createStatement(363)", "Delete MethodInvocation(364)", "Delete SimpleName: execute(365)", "Delete StringLiteral: \"CREATE TABLE \"(366)", "Delete SimpleName: dataTableFullName(367)", "Delete StringLiteral: \" (k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"(368)", "Delete InfixExpression: +(369)", "Delete MethodInvocation(370)", "Delete ExpressionStatement(371)", "Delete SimpleName: conn(372)", "Delete SimpleName: createStatement(373)", "Delete MethodInvocation(374)", "Delete SimpleName: execute(375)", "Delete StringLiteral: \"CREATE INDEX \"(376)", "Delete SimpleName: indexTableName(377)", "Delete StringLiteral: \" ON \"(378)", "Delete SimpleName: dataTableFullName(379)", "Delete StringLiteral: \" (v2) INCLUDE (v1)\"(380)", "Delete InfixExpression: +(381)", "Delete MethodInvocation(382)", "Delete ExpressionStatement(383)", "Delete SimpleName: conn(384)", "Delete SimpleName: createStatement(385)", "Delete MethodInvocation(386)", "Delete SimpleName: execute(387)", "Delete StringLiteral: \"CREATE LOCAL INDEX \"(388)", "Delete SimpleName: localIndexTableName1(389)", "Delete StringLiteral: \" ON \"(390)", "Delete SimpleName: dataTableFullName(391)", "Delete StringLiteral: \" (v2) INCLUDE (v1)\"(392)", "Delete InfixExpression: +(393)", "Delete MethodInvocation(394)", "Delete ExpressionStatement(395)", "Delete SimpleName: conn(396)", "Delete SimpleName: createStatement(397)", "Delete MethodInvocation(398)", "Delete SimpleName: execute(399)", "Delete StringLiteral: \"CREATE LOCAL INDEX \"(400)", "Delete SimpleName: localIndexTableName2(401)", "Delete StringLiteral: \" ON \"(402)", "Delete SimpleName: dataTableFullName(403)", "Delete StringLiteral: \" (k) INCLUDE (v1)\"(404)", "Delete InfixExpression: +(405)", "Delete MethodInvocation(406)", "Delete ExpressionStatement(407)", "Delete SimpleName: PreparedStatement(408)", "Delete SimpleType: PreparedStatement(409)", "Delete SimpleName: stmt(410)", "Delete SimpleName: conn(411)", "Delete SimpleName: prepareStatement(412)", "Delete StringLiteral: \"UPSERT INTO \"(413)", "Delete SimpleName: dataTableFullName(414)", "Delete StringLiteral: \" VALUES(?,?,?)\"(415)", "Delete InfixExpression: +(416)", "Delete MethodInvocation(417)", "Delete VariableDeclarationFragment(418)", "Delete VariableDeclarationStatement(419)", "Delete SimpleName: stmt(420)", "Delete SimpleName: setString(421)", "Delete NumberLiteral: 1(422)", "Delete StringLiteral: \"a\"(423)", "Delete MethodInvocation(424)", "Delete ExpressionStatement(425)", "Delete SimpleName: stmt(426)", "Delete SimpleName: setString(427)", "Delete NumberLiteral: 2(428)", "Delete StringLiteral: \"x\"(429)", "Delete MethodInvocation(430)", "Delete ExpressionStatement(431)", "Delete SimpleName: stmt(432)", "Delete SimpleName: setString(433)", "Delete NumberLiteral: 3(434)", "Delete StringLiteral: \"1\"(435)", "Delete MethodInvocation(436)", "Delete ExpressionStatement(437)", "Delete SimpleName: stmt(438)", "Delete SimpleName: execute(439)", "Delete MethodInvocation(440)", "Delete ExpressionStatement(441)", "Delete SimpleName: conn(442)", "Delete SimpleName: commit(443)", "Delete MethodInvocation(444)", "Delete ExpressionStatement(445)", "Delete SimpleName: PhoenixConnection(446)", "Delete SimpleType: PhoenixConnection(447)", "Delete SimpleName: pconn(448)", "Delete SimpleName: conn(449)", "Delete SimpleName: unwrap(450)", "Delete SimpleName: PhoenixConnection(451)", "Delete SimpleType: PhoenixConnection(452)", "Delete TypeLiteral(453)", "Delete MethodInvocation(454)", "Delete VariableDeclarationFragment(455)", "Delete VariableDeclarationStatement(456)", "Delete SimpleName: PTable(457)", "Delete SimpleType: PTable(458)", "Delete SimpleName: dataTable(459)", "Delete SimpleName: pconn(460)", "Delete SimpleName: getTable(461)", "Delete SimpleName: PTableKey(462)", "Delete SimpleType: PTableKey(463)", "Delete NullLiteral(464)", "Delete SimpleName: dataTableFullName(465)", "Delete ClassInstanceCreation(466)", "Delete MethodInvocation(467)", "Delete VariableDeclarationFragment(468)", "Delete VariableDeclarationStatement(469)", "Delete SimpleName: assertEquals(470)", "Delete StringLiteral: \"Unexpected number of indexes \"(471)", "Delete NumberLiteral: 3(472)", "Delete SimpleName: dataTable(473)", "Delete SimpleName: getIndexes(474)", "Delete MethodInvocation(475)", "Delete SimpleName: size(476)", "Delete MethodInvocation(477)", "Delete MethodInvocation(478)", "Delete ExpressionStatement(479)", "Delete SimpleName: PTable(480)", "Delete SimpleType: PTable(481)", "Delete SimpleName: indexTable(482)", "Delete SimpleName: dataTable(483)", "Delete SimpleName: getIndexes(484)", "Delete MethodInvocation(485)", "Delete SimpleName: get(486)", "Delete NumberLiteral: 0(487)", "Delete MethodInvocation(488)", "Delete VariableDeclarationFragment(489)", "Delete VariableDeclarationStatement(490)", "Delete PrimitiveType: byte(491)", "Delete Dimension(492)", "Delete ArrayType: byte[](493)", "Delete SimpleName: indexTablePhysicalName(494)", "Delete SimpleName: indexTable(495)", "Delete SimpleName: getPhysicalName(496)", "Delete MethodInvocation(497)", "Delete SimpleName: getBytes(498)", "Delete MethodInvocation(499)", "Delete VariableDeclarationFragment(500)", "Delete VariableDeclarationStatement(501)", "Delete SimpleName: PName(502)", "Delete SimpleType: PName(503)", "Delete SimpleName: localIndexTablePhysicalName(504)", "Delete SimpleName: dataTable(505)", "Delete SimpleName: getIndexes(506)", "Delete MethodInvocation(507)", "Delete SimpleName: get(508)", "Delete NumberLiteral: 1(509)", "Delete MethodInvocation(510)", "Delete SimpleName: getPhysicalName(511)", "Delete MethodInvocation(512)", "Delete VariableDeclarationFragment(513)", "Delete VariableDeclarationStatement(514)", "Delete SimpleName: conn(515)", "Delete SimpleName: createStatement(516)", "Delete MethodInvocation(517)", "Delete SimpleName: execute(518)", "Delete StringLiteral: \"ALTER TABLE \"(519)", "Delete SimpleName: dataTableFullName(520)", "Delete StringLiteral: \" DROP COLUMN v2 \"(521)", "Delete InfixExpression: +(522)", "Delete MethodInvocation(523)", "Delete ExpressionStatement(524)", "Delete SimpleName: conn(525)", "Delete SimpleName: createStatement(526)", "Delete MethodInvocation(527)", "Delete SimpleName: execute(528)", "Delete StringLiteral: \"SELECT * FROM \"(529)", "Delete SimpleName: dataTableFullName(530)", "Delete InfixExpression: +(531)", "Delete MethodInvocation(532)", "Delete ExpressionStatement(533)", "Delete SimpleName: conn(534)", "Delete SimpleName: createStatement(535)", "Delete MethodInvocation(536)", "Delete SimpleName: execute(537)", "Delete StringLiteral: \"SELECT * FROM \"(538)", "Delete SimpleName: indexTableName(539)", "Delete InfixExpression: +(540)", "Delete MethodInvocation(541)", "Delete ExpressionStatement(542)", "Delete SimpleName: fail(543)", "Delete StringLiteral: \"Index should have been dropped\"(544)", "Delete MethodInvocation(545)", "Delete ExpressionStatement(546)", "Delete Block(547)", "Delete SimpleName: TableNotFoundException(548)", "Delete SimpleType: TableNotFoundException(549)", "Delete SimpleName: e(550)", "Delete SingleVariableDeclaration(551)", "Delete Block(552)", "Delete CatchClause(553)", "Delete TryStatement(554)", "Delete SimpleName: pconn(555)", "Delete SimpleName: conn(556)", "Delete SimpleName: unwrap(557)", "Delete SimpleName: PhoenixConnection(558)", "Delete SimpleType: PhoenixConnection(559)", "Delete TypeLiteral(560)", "Delete MethodInvocation(561)", "Delete Assignment: =(562)", "Delete ExpressionStatement(563)", "Delete SimpleName: dataTable(564)", "Delete SimpleName: pconn(565)", "Delete SimpleName: getTable(566)", "Delete SimpleName: PTableKey(567)", "Delete SimpleType: PTableKey(568)", "Delete NullLiteral(569)", "Delete SimpleName: dataTableFullName(570)", "Delete ClassInstanceCreation(571)", "Delete MethodInvocation(572)", "Delete Assignment: =(573)", "Delete ExpressionStatement(574)", "Delete SimpleName: pconn(575)", "Delete SimpleName: getTable(576)", "Delete SimpleName: PTableKey(577)", "Delete SimpleType: PTableKey(578)", "Delete NullLiteral(579)", "Delete SimpleName: indexTableName(580)", "Delete ClassInstanceCreation(581)", "Delete MethodInvocation(582)", "Delete ExpressionStatement(583)", "Delete SimpleName: fail(584)", "Delete StringLiteral: \"index should have been dropped\"(585)", "Delete MethodInvocation(586)", "Delete ExpressionStatement(587)", "Delete Block(588)", "Delete SimpleName: TableNotFoundException(589)", "Delete SimpleType: TableNotFoundException(590)", "Delete SimpleName: e(591)", "Delete SingleVariableDeclaration(592)", "Delete Block(593)", "Delete CatchClause(594)", "Delete TryStatement(595)", "Delete SimpleName: pconn(596)", "Delete SimpleName: getTable(597)", "Delete SimpleName: PTableKey(598)", "Delete SimpleType: PTableKey(599)", "Delete NullLiteral(600)", "Delete SimpleName: localIndexTableName1(601)", "Delete ClassInstanceCreation(602)", "Delete MethodInvocation(603)", "Delete ExpressionStatement(604)", "Delete SimpleName: fail(605)", "Delete StringLiteral: \"index should have been dropped\"(606)", "Delete MethodInvocation(607)", "Delete ExpressionStatement(608)", "Delete Block(609)", "Delete SimpleName: TableNotFoundException(610)", "Delete SimpleType: TableNotFoundException(611)", "Delete SimpleName: e(612)", "Delete SingleVariableDeclaration(613)", "Delete Block(614)", "Delete CatchClause(615)", "Delete TryStatement(616)", "Delete SimpleName: assertEquals(617)", "Delete StringLiteral: \"Unexpected number of indexes \"(618)", "Delete NumberLiteral: 1(619)", "Delete SimpleName: dataTable(620)", "Delete SimpleName: getIndexes(621)", "Delete MethodInvocation(622)", "Delete SimpleName: size(623)", "Delete MethodInvocation(624)", "Delete MethodInvocation(625)", "Delete ExpressionStatement(626)", "Delete SimpleName: conn(627)", "Delete SimpleName: unwrap(628)", "Delete SimpleName: PhoenixConnection(629)", "Delete SimpleType: PhoenixConnection(630)", "Delete TypeLiteral(631)", "Delete MethodInvocation(632)", "Delete SimpleName: getQueryServices(633)", "Delete MethodInvocation(634)", "Delete SimpleName: getTableDescriptor(635)", "Delete SimpleName: indexTablePhysicalName(636)", "Delete MethodInvocation(637)", "Delete ExpressionStatement(638)", "Delete SimpleName: fail(639)", "Delete StringLiteral: \"Index table should have been dropped\"(640)", "Delete MethodInvocation(641)", "Delete ExpressionStatement(642)", "Delete Block(643)", "Delete SimpleName: TableNotFoundException(644)", "Delete SimpleType: TableNotFoundException(645)", "Delete SimpleName: e(646)", "Delete SingleVariableDeclaration(647)", "Delete Block(648)", "Delete CatchClause(649)", "Delete TryStatement(650)", "Delete SimpleName: conn(651)", "Delete SimpleName: unwrap(652)", "Delete SimpleName: PhoenixConnection(653)", "Delete SimpleType: PhoenixConnection(654)", "Delete TypeLiteral(655)", "Delete MethodInvocation(656)", "Delete SimpleName: getQueryServices(657)", "Delete MethodInvocation(658)", "Delete SimpleName: getTableDescriptor(659)", "Delete SimpleName: localIndexTablePhysicalName(660)", "Delete SimpleName: getBytes(661)", "Delete MethodInvocation(662)", "Delete MethodInvocation(663)", "Delete ExpressionStatement(664)", "Delete SimpleName: PTable(665)", "Delete SimpleType: PTable(666)", "Delete SimpleName: localIndex2(667)", "Delete SimpleName: conn(668)", "Delete SimpleName: unwrap(669)", "Delete SimpleName: PhoenixConnection(670)", "Delete SimpleType: PhoenixConnection(671)", "Delete TypeLiteral(672)", "Delete MethodInvocation(673)", "Delete SimpleName: getTable(674)", "Delete SimpleName: PTableKey(675)", "Delete SimpleType: PTableKey(676)", "Delete NullLiteral(677)", "Delete SimpleName: localIndexTableName2(678)", "Delete ClassInstanceCreation(679)", "Delete MethodInvocation(680)", "Delete VariableDeclarationFragment(681)", "Delete VariableDeclarationStatement(682)", "Delete SimpleName: Scan(683)", "Delete SimpleType: Scan(684)", "Delete SimpleName: scan(685)", "Delete SimpleName: Scan(686)", "Delete SimpleType: Scan(687)", "Delete ClassInstanceCreation(688)", "Delete VariableDeclarationFragment(689)", "Delete VariableDeclarationStatement(690)", "Delete SimpleName: scan(691)", "Delete SimpleName: addFamily(692)", "Delete QualifiedName: QueryConstants.DEFAULT_LOCAL_INDEX_COLUMN_FAMILY_BYTES(693)", "Delete MethodInvocation(694)", "Delete ExpressionStatement(695)", "Delete SimpleName: HTable(696)", "Delete SimpleType: HTable(697)", "Delete SimpleName: table(698)", "Delete SimpleName: HTable(699)", "Delete SimpleType: HTable(700)", "Delete SimpleName: conn(701)", "Delete SimpleName: unwrap(702)", "Delete SimpleName: PhoenixConnection(703)", "Delete SimpleType: PhoenixConnection(704)", "Delete TypeLiteral(705)", "Delete MethodInvocation(706)", "Delete SimpleName: getQueryServices(707)", "Delete MethodInvocation(708)", "Delete SimpleName: getTable(709)", "Delete SimpleName: localIndexTablePhysicalName(710)", "Delete SimpleName: getBytes(711)", "Delete MethodInvocation(712)", "Delete MethodInvocation(713)", "Delete CastExpression(714)", "Delete VariableDeclarationFragment(715)", "Delete VariableDeclarationStatement(716)", "Delete SimpleName: ResultScanner(717)", "Delete SimpleType: ResultScanner(718)", "Delete SimpleName: results(719)", "Delete SimpleName: table(720)", "Delete SimpleName: getScanner(721)", "Delete SimpleName: scan(722)", "Delete MethodInvocation(723)", "Delete VariableDeclarationFragment(724)", "Delete VariableDeclarationStatement(725)", "Delete SimpleName: Result(726)", "Delete SimpleType: Result(727)", "Delete SimpleName: result(728)", "Delete SimpleName: results(729)", "Delete SimpleName: next(730)", "Delete MethodInvocation(731)", "Delete VariableDeclarationFragment(732)", "Delete VariableDeclarationStatement(733)", "Delete SimpleName: assertNotNull(734)", "Delete SimpleName: result(735)", "Delete MethodInvocation(736)", "Delete ExpressionStatement(737)", "Delete SimpleName: assertNotNull(738)", "Delete StringLiteral: \"localIndexTableName2 row is missing\"(739)", "Delete SimpleName: result(740)", "Delete SimpleName: getValue(741)", "Delete QualifiedName: QueryConstants.DEFAULT_LOCAL_INDEX_COLUMN_FAMILY_BYTES(742)", "Delete SimpleName: localIndex2(743)", "Delete SimpleName: getColumnForColumnName(744)", "Delete SimpleName: IndexUtil(745)", "Delete SimpleName: getIndexColumnName(746)", "Delete QualifiedName: QueryConstants.DEFAULT_COLUMN_FAMILY(747)", "Delete StringLiteral: \"V1\"(748)", "Delete MethodInvocation(749)", "Delete MethodInvocation(750)", "Delete SimpleName: getColumnQualifierBytes(751)", "Delete MethodInvocation(752)", "Delete MethodInvocation(753)", "Delete MethodInvocation(754)", "Delete ExpressionStatement(755)", "Delete SimpleName: assertNull(756)", "Delete SimpleName: results(757)", "Delete SimpleName: next(758)", "Delete MethodInvocation(759)", "Delete MethodInvocation(760)", "Delete ExpressionStatement(761)", "Delete Block(762)", "Delete TryStatement(763)", "Delete Block(764)", "Delete MethodDeclaration(765)", "Delete SimpleName: Test(766)", "Delete MarkerAnnotation(767)", "Delete Modifier: public(768)", "Delete PrimitiveType: void(769)", "Delete SimpleName: testDroppingIndexedColDropsViewIndex(770)", "Delete SimpleName: Exception(771)", "Delete SimpleType: Exception(772)", "Delete SimpleName: helpTestDroppingIndexedColDropsViewIndex(773)", "Delete BooleanLiteral: false(774)", "Delete MethodInvocation(775)", "Delete ExpressionStatement(776)", "Delete Block(777)", "Delete MethodDeclaration(778)", "Delete SimpleName: Test(779)", "Delete MarkerAnnotation(780)", "Delete Modifier: public(781)", "Delete PrimitiveType: void(782)", "Delete SimpleName: testDroppingIndexedColDropsMultiTenantViewIndex(783)", "Delete SimpleName: Exception(784)", "Delete SimpleType: Exception(785)", "Delete SimpleName: helpTestDroppingIndexedColDropsViewIndex(786)", "Delete BooleanLiteral: true(787)", "Delete MethodInvocation(788)", "Delete ExpressionStatement(789)", "Delete Block(790)", "Delete MethodDeclaration(791)", "Delete Modifier: public(792)", "Delete PrimitiveType: void(793)", "Delete SimpleName: helpTestDroppingIndexedColDropsViewIndex(794)", "Delete PrimitiveType: boolean(795)", "Delete SimpleName: isMultiTenant(796)", "Delete SingleVariableDeclaration(797)", "Delete SimpleName: Exception(798)", "Delete SimpleType: Exception(799)", "Delete SimpleName: Properties(800)", "Delete SimpleType: Properties(801)", "Delete SimpleName: props(802)", "Delete SimpleName: PropertiesUtil(803)", "Delete SimpleName: deepCopy(804)", "Delete QualifiedName: TestUtil.TEST_PROPERTIES(805)", "Delete MethodInvocation(806)", "Delete VariableDeclarationFragment(807)", "Delete VariableDeclarationStatement(808)", "Delete SimpleName: props(809)", "Delete SimpleName: setProperty(810)", "Delete SimpleName: TENANT_ID_ATTRIB(811)", "Delete SimpleName: TENANT_ID(812)", "Delete MethodInvocation(813)", "Delete ExpressionStatement(814)", "Delete SimpleName: Connection(815)", "Delete SimpleType: Connection(816)", "Delete SimpleName: conn(817)", "Delete SimpleName: getConnection(818)", "Delete MethodInvocation(819)", "Delete VariableDeclarationFragment(820)", "Delete VariableDeclarationExpression(821)", "Delete SimpleName: Connection(822)", "Delete SimpleType: Connection(823)", "Delete SimpleName: viewConn(824)", "Delete SimpleName: isMultiTenant(825)", "Delete SimpleName: getConnection(826)", "Delete SimpleName: props(827)", "Delete MethodInvocation(828)", "Delete SimpleName: conn(829)", "Delete ConditionalExpression(830)", "Delete VariableDeclarationFragment(831)", "Delete VariableDeclarationExpression(832)", "Delete SimpleName: String(833)", "Delete SimpleType: String(834)", "Delete SimpleName: tableWithView(835)", "Delete SimpleName: generateUniqueName(836)", "Delete MethodInvocation(837)", "Delete VariableDeclarationFragment(838)", "Delete VariableDeclarationStatement(839)", "Delete SimpleName: String(840)", "Delete SimpleType: String(841)", "Delete SimpleName: viewOfTable(842)", "Delete SimpleName: generateUniqueName(843)", "Delete MethodInvocation(844)", "Delete VariableDeclarationFragment(845)", "Delete VariableDeclarationStatement(846)", "Delete SimpleName: String(847)", "Delete SimpleType: String(848)", "Delete SimpleName: viewIndex1(849)", "Delete SimpleName: generateUniqueName(850)", "Delete MethodInvocation(851)", "Delete VariableDeclarationFragment(852)", "Delete VariableDeclarationStatement(853)", "Delete SimpleName: String(854)", "Delete SimpleType: String(855)", "Delete SimpleName: viewIndex2(856)", "Delete SimpleName: generateUniqueName(857)", "Delete MethodInvocation(858)", "Delete VariableDeclarationFragment(859)", "Delete VariableDeclarationStatement(860)", "Delete SimpleName: conn(861)", "Delete SimpleName: setAutoCommit(862)", "Delete BooleanLiteral: false(863)", "Delete MethodInvocation(864)", "Delete ExpressionStatement(865)", "Delete SimpleName: viewConn(866)", "Delete SimpleName: setAutoCommit(867)", "Delete BooleanLiteral: false(868)", "Delete MethodInvocation(869)", "Delete ExpressionStatement(870)", "Delete SimpleName: String(871)", "Delete SimpleType: String(872)", "Delete SimpleName: ddlFormat(873)", "Delete StringLiteral: \"CREATE TABLE \"(874)", "Delete SimpleName: tableWithView(875)", "Delete StringLiteral: \" (%s k VARCHAR NOT NULL, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR, v4 VARCHAR CONSTRAINT PK PRIMARY KEY(%s k))%s\"(876)", "Delete InfixExpression: +(877)", "Delete VariableDeclarationFragment(878)", "Delete VariableDeclarationStatement(879)", "Delete SimpleName: String(880)", "Delete SimpleType: String(881)", "Delete SimpleName: ddl(882)", "Delete SimpleName: String(883)", "Delete SimpleName: format(884)", "Delete SimpleName: ddlFormat(885)", "Delete SimpleName: isMultiTenant(886)", "Delete StringLiteral: \"TENANT_ID VARCHAR NOT NULL, \"(887)", "Delete StringLiteral: \"\"(888)", "Delete ConditionalExpression(889)", "Delete SimpleName: isMultiTenant(890)", "Delete StringLiteral: \"TENANT_ID, \"(891)", "Delete StringLiteral: \"\"(892)", "Delete ConditionalExpression(893)", "Delete SimpleName: isMultiTenant(894)", "Delete StringLiteral: \"MULTI_TENANT=true\"(895)", "Delete StringLiteral: \"\"(896)", "Delete ConditionalExpression(897)", "Delete MethodInvocation(898)", "Delete VariableDeclarationFragment(899)", "Delete VariableDeclarationStatement(900)", "Delete SimpleName: conn(901)", "Delete SimpleName: createStatement(902)", "Delete MethodInvocation(903)", "Delete SimpleName: execute(904)", "Delete SimpleName: ddl(905)", "Delete MethodInvocation(906)", "Delete ExpressionStatement(907)", "Delete SimpleName: viewConn(908)", "Delete SimpleName: createStatement(909)", "Delete MethodInvocation(910)", "Delete SimpleName: execute(911)", "Delete StringLiteral: \"CREATE VIEW \"(912)", "Delete SimpleName: viewOfTable(913)", "Delete StringLiteral: \" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR ) AS SELECT * FROM \"(914)", "Delete SimpleName: tableWithView(915)", "Delete InfixExpression: +(916)", "Delete MethodInvocation(917)", "Delete ExpressionStatement(918)", "Delete SimpleName: viewConn(919)", "Delete SimpleName: createStatement(920)", "Delete MethodInvocation(921)", "Delete SimpleName: execute(922)", "Delete StringLiteral: \"CREATE INDEX \"(923)", "Delete SimpleName: viewIndex1(924)", "Delete StringLiteral: \" ON \"(925)", "Delete SimpleName: viewOfTable(926)", "Delete StringLiteral: \"(v2) INCLUDE (v4)\"(927)", "Delete InfixExpression: +(928)", "Delete MethodInvocation(929)", "Delete ExpressionStatement(930)", "Delete SimpleName: viewConn(931)", "Delete SimpleName: createStatement(932)", "Delete MethodInvocation(933)", "Delete SimpleName: execute(934)", "Delete StringLiteral: \"CREATE INDEX \"(935)", "Delete SimpleName: viewIndex2(936)", "Delete StringLiteral: \" ON \"(937)", "Delete SimpleName: viewOfTable(938)", "Delete StringLiteral: \"(v1) INCLUDE (v4)\"(939)", "Delete InfixExpression: +(940)", "Delete MethodInvocation(941)", "Delete ExpressionStatement(942)", "Delete SimpleName: viewConn(943)", "Delete SimpleName: createStatement(944)", "Delete MethodInvocation(945)", "Delete SimpleName: execute(946)", "Delete StringLiteral: \"SELECT * FROM \"(947)", "Delete SimpleName: viewIndex1(948)", "Delete InfixExpression: +(949)", "Delete MethodInvocation(950)", "Delete ExpressionStatement(951)", "Delete Block(952)", "Delete SimpleName: TableNotFoundException(953)", "Delete SimpleType: TableNotFoundException(954)", "Delete SimpleName: e(955)", "Delete SingleVariableDeclaration(956)", "Delete SimpleName: fail(957)", "Delete StringLiteral: \"Index on view was not created\"(958)", "Delete MethodInvocation(959)", "Delete ExpressionStatement(960)", "Delete Block(961)", "Delete CatchClause(962)", "Delete TryStatement(963)", "Delete SimpleName: PreparedStatement(964)", "Delete SimpleType: PreparedStatement(965)", "Delete SimpleName: stmt(966)", "Delete SimpleName: viewConn(967)", "Delete SimpleName: prepareStatement(968)", "Delete StringLiteral: \"UPSERT INTO \"(969)", "Delete SimpleName: viewOfTable(970)", "Delete StringLiteral: \" VALUES(?,?,?,?,?,?,?)\"(971)", "Delete InfixExpression: +(972)", "Delete MethodInvocation(973)", "Delete VariableDeclarationFragment(974)", "Delete VariableDeclarationStatement(975)", "Delete SimpleName: stmt(976)", "Delete SimpleName: setString(977)", "Delete NumberLiteral: 1(978)", "Delete StringLiteral: \"a\"(979)", "Delete MethodInvocation(980)", "Delete ExpressionStatement(981)", "Delete SimpleName: stmt(982)", "Delete SimpleName: setString(983)", "Delete NumberLiteral: 2(984)", "Delete StringLiteral: \"b\"(985)", "Delete MethodInvocation(986)", "Delete ExpressionStatement(987)", "Delete SimpleName: stmt(988)", "Delete SimpleName: setString(989)", "Delete NumberLiteral: 3(990)", "Delete StringLiteral: \"c\"(991)", "Delete MethodInvocation(992)", "Delete ExpressionStatement(993)", "Delete SimpleName: stmt(994)", "Delete SimpleName: setString(995)", "Delete NumberLiteral: 4(996)", "Delete StringLiteral: \"d\"(997)", "Delete MethodInvocation(998)", "Delete ExpressionStatement(999)", "Delete SimpleName: stmt(1000)", "Delete SimpleName: setString(1001)", "Delete NumberLiteral: 5(1002)", "Delete StringLiteral: \"e\"(1003)", "Delete MethodInvocation(1004)", "Delete ExpressionStatement(1005)", "Delete SimpleName: stmt(1006)", "Delete SimpleName: setInt(1007)", "Delete NumberLiteral: 6(1008)", "Delete NumberLiteral: 1(1009)", "Delete MethodInvocation(1010)", "Delete ExpressionStatement(1011)", "Delete SimpleName: stmt(1012)", "Delete SimpleName: setString(1013)", "Delete NumberLiteral: 7(1014)", "Delete StringLiteral: \"g\"(1015)", "Delete MethodInvocation(1016)", "Delete ExpressionStatement(1017)", "Delete SimpleName: stmt(1018)", "Delete SimpleName: execute(1019)", "Delete MethodInvocation(1020)", "Delete ExpressionStatement(1021)", "Delete SimpleName: viewConn(1022)", "Delete SimpleName: commit(1023)", "Delete MethodInvocation(1024)", "Delete ExpressionStatement(1025)", "Delete SimpleName: PhoenixConnection(1026)", "Delete SimpleType: PhoenixConnection(1027)", "Delete SimpleName: pconn(1028)", "Delete SimpleName: viewConn(1029)", "Delete SimpleName: unwrap(1030)", "Delete SimpleName: PhoenixConnection(1031)", "Delete SimpleType: PhoenixConnection(1032)", "Delete TypeLiteral(1033)", "Delete MethodInvocation(1034)", "Delete VariableDeclarationFragment(1035)", "Delete VariableDeclarationStatement(1036)", "Delete SimpleName: PName(1037)", "Delete SimpleType: PName(1038)", "Delete SimpleName: tenantId(1039)", "Delete SimpleName: isMultiTenant(1040)", "Delete SimpleName: PNameFactory(1041)", "Delete SimpleName: newName(1042)", "Delete StringLiteral: \"tenant1\"(1043)", "Delete MethodInvocation(1044)", "Delete NullLiteral(1045)", "Delete ConditionalExpression(1046)", "Delete VariableDeclarationFragment(1047)", "Delete VariableDeclarationStatement(1048)", "Delete SimpleName: PTable(1049)", "Delete SimpleType: PTable(1050)", "Delete SimpleName: view(1051)", "Delete SimpleName: pconn(1052)", "Delete SimpleName: getTable(1053)", "Delete SimpleName: PTableKey(1054)", "Delete SimpleType: PTableKey(1055)", "Delete SimpleName: tenantId(1056)", "Delete SimpleName: viewOfTable(1057)", "Delete ClassInstanceCreation(1058)", "Delete MethodInvocation(1059)", "Delete VariableDeclarationFragment(1060)", "Delete VariableDeclarationStatement(1061)", "Delete SimpleName: PTable(1062)", "Delete SimpleType: PTable(1063)", "Delete SimpleName: viewIndex(1064)", "Delete SimpleName: pconn(1065)", "Delete SimpleName: getTable(1066)", "Delete SimpleName: PTableKey(1067)", "Delete SimpleType: PTableKey(1068)", "Delete SimpleName: tenantId(1069)", "Delete SimpleName: viewIndex1(1070)", "Delete ClassInstanceCreation(1071)", "Delete MethodInvocation(1072)", "Delete VariableDeclarationFragment(1073)", "Delete VariableDeclarationStatement(1074)", "Delete PrimitiveType: byte(1075)", "Delete Dimension(1076)", "Delete ArrayType: byte[](1077)", "Delete SimpleName: viewIndexPhysicalTable(1078)", "Delete SimpleName: viewIndex(1079)", "Delete SimpleName: getPhysicalName(1080)", "Delete MethodInvocation(1081)", "Delete SimpleName: getBytes(1082)", "Delete MethodInvocation(1083)", "Delete VariableDeclarationFragment(1084)", "Delete VariableDeclarationStatement(1085)", "Delete SimpleName: assertNotNull(1086)", "Delete StringLiteral: \"Can't find view index\"(1087)", "Delete SimpleName: viewIndex(1088)", "Delete MethodInvocation(1089)", "Delete ExpressionStatement(1090)", "Delete SimpleName: assertEquals(1091)", "Delete StringLiteral: \"Unexpected number of indexes \"(1092)", "Delete NumberLiteral: 2(1093)", "Delete SimpleName: view(1094)", "Delete SimpleName: getIndexes(1095)", "Delete MethodInvocation(1096)", "Delete SimpleName: size(1097)", "Delete MethodInvocation(1098)", "Delete MethodInvocation(1099)", "Delete ExpressionStatement(1100)", "Delete SimpleName: assertEquals(1101)", "Delete StringLiteral: \"Unexpected index \"(1102)", "Delete SimpleName: viewIndex1(1103)", "Delete SimpleName: view(1104)", "Delete SimpleName: getIndexes(1105)", "Delete MethodInvocation(1106)", "Delete SimpleName: get(1107)", "Delete NumberLiteral: 0(1108)", "Delete MethodInvocation(1109)", "Delete SimpleName: getName(1110)", "Delete MethodInvocation(1111)", "Delete SimpleName: getString(1112)", "Delete MethodInvocation(1113)", "Delete MethodInvocation(1114)", "Delete ExpressionStatement(1115)", "Delete SimpleName: assertEquals(1116)", "Delete StringLiteral: \"Unexpected index \"(1117)", "Delete SimpleName: viewIndex2(1118)", "Delete SimpleName: view(1119)", "Delete SimpleName: getIndexes(1120)", "Delete MethodInvocation(1121)", "Delete SimpleName: get(1122)", "Delete NumberLiteral: 1(1123)", "Delete MethodInvocation(1124)", "Delete SimpleName: getName(1125)", "Delete MethodInvocation(1126)", "Delete SimpleName: getString(1127)", "Delete MethodInvocation(1128)", "Delete MethodInvocation(1129)", "Delete ExpressionStatement(1130)", "Delete SimpleName: conn(1131)", "Delete SimpleName: createStatement(1132)", "Delete MethodInvocation(1133)", "Delete SimpleName: execute(1134)", "Delete StringLiteral: \"ALTER TABLE \"(1135)", "Delete SimpleName: tableWithView(1136)", "Delete StringLiteral: \" DROP COLUMN v2, v3 \"(1137)", "Delete InfixExpression: +(1138)", "Delete MethodInvocation(1139)", "Delete ExpressionStatement(1140)", "Delete SimpleName: conn(1141)", "Delete SimpleName: createStatement(1142)", "Delete MethodInvocation(1143)", "Delete SimpleName: execute(1144)", "Delete StringLiteral: \"SELECT v2 FROM \"(1145)", "Delete SimpleName: tableWithView(1146)", "Delete InfixExpression: +(1147)", "Delete MethodInvocation(1148)", "Delete ExpressionStatement(1149)", "Delete SimpleName: fail(1150)", "Delete StringLiteral: \"Column should have been dropped\"(1151)", "Delete MethodInvocation(1152)", "Delete ExpressionStatement(1153)", "Delete Block(1154)", "Delete SimpleName: ColumnNotFoundException(1155)", "Delete SimpleType: ColumnNotFoundException(1156)", "Delete SimpleName: e(1157)", "Delete SingleVariableDeclaration(1158)", "Delete Block(1159)", "Delete CatchClause(1160)", "Delete TryStatement(1161)", "Delete SimpleName: conn(1162)", "Delete SimpleName: createStatement(1163)", "Delete MethodInvocation(1164)", "Delete SimpleName: execute(1165)", "Delete StringLiteral: \"SELECT v3 FROM \"(1166)", "Delete SimpleName: tableWithView(1167)", "Delete InfixExpression: +(1168)", "Delete MethodInvocation(1169)", "Delete ExpressionStatement(1170)", "Delete SimpleName: fail(1171)", "Delete StringLiteral: \"Column should have been dropped\"(1172)", "Delete MethodInvocation(1173)", "Delete ExpressionStatement(1174)", "Delete Block(1175)", "Delete SimpleName: ColumnNotFoundException(1176)", "Delete SimpleType: ColumnNotFoundException(1177)", "Delete SimpleName: e(1178)", "Delete SingleVariableDeclaration(1179)", "Delete Block(1180)", "Delete CatchClause(1181)", "Delete TryStatement(1182)", "Delete SimpleName: viewConn(1183)", "Delete SimpleName: createStatement(1184)", "Delete MethodInvocation(1185)", "Delete SimpleName: execute(1186)", "Delete StringLiteral: \"SELECT * FROM \"(1187)", "Delete SimpleName: viewIndex1(1188)", "Delete InfixExpression: +(1189)", "Delete MethodInvocation(1190)", "Delete ExpressionStatement(1191)", "Delete SimpleName: fail(1192)", "Delete StringLiteral: \"Index metadata should have been dropped\"(1193)", "Delete MethodInvocation(1194)", "Delete ExpressionStatement(1195)", "Delete Block(1196)", "Delete SimpleName: TableNotFoundException(1197)", "Delete SimpleType: TableNotFoundException(1198)", "Delete SimpleName: e(1199)", "Delete SingleVariableDeclaration(1200)", "Delete Block(1201)", "Delete CatchClause(1202)", "Delete TryStatement(1203)", "Delete SimpleName: pconn(1204)", "Delete SimpleName: viewConn(1205)", "Delete SimpleName: unwrap(1206)", "Delete SimpleName: PhoenixConnection(1207)", "Delete SimpleType: PhoenixConnection(1208)", "Delete TypeLiteral(1209)", "Delete MethodInvocation(1210)", "Delete Assignment: =(1211)", "Delete ExpressionStatement(1212)", "Delete SimpleName: view(1213)", "Delete SimpleName: pconn(1214)", "Delete SimpleName: getTable(1215)", "Delete SimpleName: PTableKey(1216)", "Delete SimpleType: PTableKey(1217)", "Delete SimpleName: tenantId(1218)", "Delete SimpleName: viewOfTable(1219)", "Delete ClassInstanceCreation(1220)", "Delete MethodInvocation(1221)", "Delete Assignment: =(1222)", "Delete ExpressionStatement(1223)", "Delete SimpleName: viewIndex(1224)", "Delete SimpleName: pconn(1225)", "Delete SimpleName: getTable(1226)", "Delete SimpleName: PTableKey(1227)", "Delete SimpleType: PTableKey(1228)", "Delete SimpleName: tenantId(1229)", "Delete SimpleName: viewIndex1(1230)", "Delete ClassInstanceCreation(1231)", "Delete MethodInvocation(1232)", "Delete Assignment: =(1233)", "Delete ExpressionStatement(1234)", "Delete SimpleName: fail(1235)", "Delete StringLiteral: \"View index should have been dropped\"(1236)", "Delete MethodInvocation(1237)", "Delete ExpressionStatement(1238)", "Delete Block(1239)", "Delete SimpleName: TableNotFoundException(1240)", "Delete SimpleType: TableNotFoundException(1241)", "Delete SimpleName: e(1242)", "Delete SingleVariableDeclaration(1243)", "Delete Block(1244)", "Delete CatchClause(1245)", "Delete TryStatement(1246)", "Delete SimpleName: assertEquals(1247)", "Delete StringLiteral: \"Unexpected number of indexes \"(1248)", "Delete NumberLiteral: 1(1249)", "Delete SimpleName: view(1250)", "Delete SimpleName: getIndexes(1251)", "Delete MethodInvocation(1252)", "Delete SimpleName: size(1253)", "Delete MethodInvocation(1254)", "Delete MethodInvocation(1255)", "Delete ExpressionStatement(1256)", "Delete SimpleName: assertEquals(1257)", "Delete StringLiteral: \"Unexpected index \"(1258)", "Delete SimpleName: viewIndex2(1259)", "Delete SimpleName: view(1260)", "Delete SimpleName: getIndexes(1261)", "Delete MethodInvocation(1262)", "Delete SimpleName: get(1263)", "Delete NumberLiteral: 0(1264)", "Delete MethodInvocation(1265)", "Delete SimpleName: getName(1266)", "Delete MethodInvocation(1267)", "Delete SimpleName: getString(1268)", "Delete MethodInvocation(1269)", "Delete MethodInvocation(1270)", "Delete ExpressionStatement(1271)", "Delete SimpleName: conn(1272)", "Delete SimpleName: unwrap(1273)", "Delete SimpleName: PhoenixConnection(1274)", "Delete SimpleType: PhoenixConnection(1275)", "Delete TypeLiteral(1276)", "Delete MethodInvocation(1277)", "Delete SimpleName: getQueryServices(1278)", "Delete MethodInvocation(1279)", "Delete SimpleName: getTableDescriptor(1280)", "Delete SimpleName: viewIndexPhysicalTable(1281)", "Delete MethodInvocation(1282)", "Delete ExpressionStatement(1283)", "Delete SimpleName: Scan(1284)", "Delete SimpleType: Scan(1285)", "Delete SimpleName: scan(1286)", "Delete SimpleName: Scan(1287)", "Delete SimpleType: Scan(1288)", "Delete ClassInstanceCreation(1289)", "Delete VariableDeclarationFragment(1290)", "Delete VariableDeclarationStatement(1291)", "Delete SimpleName: HTable(1292)", "Delete SimpleType: HTable(1293)", "Delete SimpleName: table(1294)", "Delete SimpleName: HTable(1295)", "Delete SimpleType: HTable(1296)", "Delete SimpleName: conn(1297)", "Delete SimpleName: unwrap(1298)", "Delete SimpleName: PhoenixConnection(1299)", "Delete SimpleType: PhoenixConnection(1300)", "Delete TypeLiteral(1301)", "Delete MethodInvocation(1302)", "Delete SimpleName: getQueryServices(1303)", "Delete MethodInvocation(1304)", "Delete SimpleName: getTable(1305)", "Delete SimpleName: viewIndexPhysicalTable(1306)", "Delete MethodInvocation(1307)", "Delete CastExpression(1308)", "Delete VariableDeclarationFragment(1309)", "Delete VariableDeclarationStatement(1310)", "Delete SimpleName: ResultScanner(1311)", "Delete SimpleType: ResultScanner(1312)", "Delete SimpleName: results(1313)", "Delete SimpleName: table(1314)", "Delete SimpleName: getScanner(1315)", "Delete SimpleName: scan(1316)", "Delete MethodInvocation(1317)", "Delete VariableDeclarationFragment(1318)", "Delete VariableDeclarationStatement(1319)", "Delete SimpleName: Result(1320)", "Delete SimpleType: Result(1321)", "Delete SimpleName: result(1322)", "Delete SimpleName: results(1323)", "Delete SimpleName: next(1324)", "Delete MethodInvocation(1325)", "Delete VariableDeclarationFragment(1326)", "Delete VariableDeclarationStatement(1327)", "Delete SimpleName: assertNotNull(1328)", "Delete SimpleName: result(1329)", "Delete MethodInvocation(1330)", "Delete ExpressionStatement(1331)", "Delete SimpleName: PTable(1332)", "Delete SimpleType: PTable(1333)", "Delete SimpleName: viewIndexPTable(1334)", "Delete SimpleName: pconn(1335)", "Delete SimpleName: getTable(1336)", "Delete SimpleName: PTableKey(1337)", "Delete SimpleType: PTableKey(1338)", "Delete SimpleName: pconn(1339)", "Delete SimpleName: getTenantId(1340)", "Delete MethodInvocation(1341)", "Delete SimpleName: viewIndex2(1342)", "Delete ClassInstanceCreation(1343)", "Delete MethodInvocation(1344)", "Delete VariableDeclarationFragment(1345)", "Delete VariableDeclarationStatement(1346)", "Delete SimpleName: PColumn(1347)", "Delete SimpleType: PColumn(1348)", "Delete SimpleName: column(1349)", "Delete SimpleName: viewIndexPTable(1350)", "Delete SimpleName: getColumnForColumnName(1351)", "Delete SimpleName: IndexUtil(1352)", "Delete SimpleName: getIndexColumnName(1353)", "Delete QualifiedName: QueryConstants.DEFAULT_COLUMN_FAMILY(1354)", "Delete StringLiteral: \"V4\"(1355)", "Delete MethodInvocation(1356)", "Delete MethodInvocation(1357)", "Delete VariableDeclarationFragment(1358)", "Delete VariableDeclarationStatement(1359)", "Delete PrimitiveType: byte(1360)", "Delete Dimension(1361)", "Delete ArrayType: byte[](1362)", "Delete SimpleName: cq(1363)", "Delete SimpleName: column(1364)", "Delete SimpleName: getColumnQualifierBytes(1365)", "Delete MethodInvocation(1366)", "Delete VariableDeclarationFragment(1367)", "Delete VariableDeclarationStatement(1368)", "Delete SimpleName: assertNotNull(1369)", "Delete SimpleName: viewIndex2(1370)", "Delete StringLiteral: \" row is missing\"(1371)", "Delete InfixExpression: +(1372)", "Delete SimpleName: result(1373)", "Delete SimpleName: getValue(1374)", "Delete QualifiedName: QueryConstants.DEFAULT_COLUMN_FAMILY_BYTES(1375)", "Delete SimpleName: cq(1376)", "Delete MethodInvocation(1377)", "Delete MethodInvocation(1378)", "Delete ExpressionStatement(1379)", "Delete SimpleName: assertNull(1380)", "Delete SimpleName: results(1381)", "Delete SimpleName: next(1382)", "Delete MethodInvocation(1383)", "Delete MethodInvocation(1384)", "Delete ExpressionStatement(1385)", "Delete Block(1386)", "Delete TryStatement(1387)", "Delete Block(1388)", "Delete MethodDeclaration(1389)"]}}, {"EndToEndCoveredColumnsIndexBuilderIT_cluster": {"actions": [{"root": "INS BooleanLiteral: false to MethodInvocation at 4", "operations": ["INS BooleanLiteral: false to MethodInvocation at 4"]}]}}, {"EndToEndCoveredColumnsIndexBuilderIT_diff": {"operations": ["Insert BooleanLiteral: false(415) into MethodInvocation(416) at 4"]}}, {"LocalTableState_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: returnNullScannerIfRowNotFound to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: returnNullScannerIfRowNotFound to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleName: returnNullScannerIfRowNotFound to MethodInvocation at 5", "operations": ["INS SimpleName: returnNullScannerIfRowNotFound to MethodInvocation at 5"]}, {"root": "INS SimpleName: returnNullScannerIfRowNotFound to MethodInvocation at 3", "operations": ["INS SimpleName: returnNullScannerIfRowNotFound to MethodInvocation at 3"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.hbase.Cell", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.KeyValueUtil"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.client.Result"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.hbase.regionserver.KeyValueScanner", "DEL ImportDeclaration"]}]}}, {"LocalTableState_diff": {"operations": ["Insert SingleVariableDeclaration(460) into MethodDeclaration(527) at 6", "Insert SingleVariableDeclaration(812) into MethodDeclaration(857) at 6", "Insert PrimitiveType: boolean(458) into SingleVariableDeclaration(460) at 0", "Insert SimpleName: returnNullScannerIfRowNotFound(459) into SingleVariableDeclaration(460) at 1", "Insert PrimitiveType: boolean(810) into SingleVariableDeclaration(812) at 0", "Insert SimpleName: returnNullScannerIfRowNotFound(811) into SingleVariableDeclaration(812) at 1", "Insert SimpleName: returnNullScannerIfRowNotFound(508) into MethodInvocation(509) at 5", "Insert SimpleName: returnNullScannerIfRowNotFound(826) into MethodInvocation(827) at 3", "Delete QualifiedName: org.apache.hadoop.hbase.Cell(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.apache.hadoop.hbase.KeyValueUtil(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.hadoop.hbase.client.Result(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.hadoop.hbase.regionserver.KeyValueScanner(30)", "Delete ImportDeclaration(31)"]}}, {"TableState_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: returnNullScannerIfRowNotFound to SingleVariableDeclaration at 1"]}]}}, {"TableState_diff": {"operations": ["Insert SingleVariableDeclaration(97) into MethodDeclaration(100) at 5", "Insert PrimitiveType: boolean(95) into SingleVariableDeclaration(97) at 0", "Insert SimpleName: returnNullScannerIfRowNotFound(96) into SingleVariableDeclaration(97) at 1"]}}, {"ScannerBuilder_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: returnNullIfRowNotFound to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: returnNullIfRowNotFound to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleName: returnNullIfRowNotFound to MethodInvocation at 2", "operations": ["INS SimpleName: returnNullIfRowNotFound to MethodInvocation at 2"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS NullLiteral to ConditionalExpression at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: returnNullIfRowNotFound to ConditionalExpression at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV ClassInstanceCreation to ConditionalExpression at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.KeyValueUtil"]}]}}, {"ScannerBuilder_diff": {"operations": ["Insert SingleVariableDeclaration(104) into MethodDeclaration(150) at 6", "Insert SingleVariableDeclaration(297) into MethodDeclaration(463) at 4", "Insert PrimitiveType: boolean(102) into SingleVariableDeclaration(104) at 0", "Insert SimpleName: returnNullIfRowNotFound(103) into SingleVariableDeclaration(104) at 1", "Insert PrimitiveType: boolean(295) into SingleVariableDeclaration(297) at 0", "Insert SimpleName: returnNullIfRowNotFound(296) into SingleVariableDeclaration(297) at 1", "Insert SimpleName: returnNullIfRowNotFound(146) into MethodInvocation(147) at 2", "Insert ConditionalExpression(330) into ReturnStatement(331) at 0", "Insert SimpleName: returnNullIfRowNotFound(325) into ConditionalExpression(330) at 0", "Insert NullLiteral(326) into ConditionalExpression(330) at 1", "Move ClassInstanceCreation(322) into ConditionalExpression(330) at 2", "Delete QualifiedName: org.apache.hadoop.hbase.KeyValueUtil(14)", "Delete ImportDeclaration(15)"]}}, {"CoveredColumnIndexCodec_cluster": {"actions": [{"root": "INS BooleanLiteral: false to MethodInvocation at 4", "operations": ["INS BooleanLiteral: false to MethodInvocation at 4"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 4", "operations": ["INS BooleanLiteral: false to MethodInvocation at 4"]}]}}, {"CoveredColumnIndexCodec_diff": {"operations": ["Insert BooleanLiteral: false(256) into MethodInvocation(257) at 4", "Insert BooleanLiteral: false(551) into MethodInvocation(552) at 4"]}}], "commit_stats": [{"total_files": 13, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}