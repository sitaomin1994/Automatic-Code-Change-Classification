{"application": "google-guava", "csha": "e17ee922de0d2285ff8bf8212823c33d8589512d", "files": [{"LinkedListMultimap_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 44"]}, {"root": "UPDATE from com.google.common.base.Preconditions.checkArgument to com.google.common.base.Preconditions.checkPositionIndex", "operations": ["UPD QualifiedName: com.google.common.base.Preconditions.checkArgument from com.google.common.base.Preconditions.checkArgument to com.google.common.base.Preconditions.checkPositionIndex"]}, {"root": "INS ParameterizedType: AbstractMultimap<K,V> to TypeDeclaration: class at 6", "operations": ["INS ParameterizedType: AbstractMultimap<K,V> to TypeDeclaration: class at 6", "INS SimpleName: AbstractMultimap to SimpleType: AbstractMultimap at 0", "INS SimpleType: AbstractMultimap to ParameterizedType: AbstractMultimap<K,V> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 50", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 50", "INS SimpleName: entries to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 54", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 54", "INS Block to MethodDeclaration at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: AssertionError to ClassInstanceCreation at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: entryIterator to MethodDeclaration at 2", "INS ParameterizedType: Iterator<Entry<K,V>> to MethodDeclaration at 1", "INS StringLiteral: \"should never be called\" to ClassInstanceCreation at 1"]}, {"root": "MOVE from ParameterizedType: AbstractMultimap<K,V>", "operations": ["MOV SimpleType: K to ParameterizedType: AbstractMultimap<K,V> at 1"]}, {"root": "MOVE from ParameterizedType: AbstractMultimap<K,V>", "operations": ["MOV SimpleType: V to ParameterizedType: AbstractMultimap<K,V> at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV ParameterizedType: AbstractMapEntry<K,V> to TypeDeclaration: class at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: getValue to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: value to ReturnStatement at 0", "INS SimpleName: V to SimpleType: V at 0", "INS SimpleType: V to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 15"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: setValue to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: newValue to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleName: value to FieldAccess at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: V to SimpleType: V at 0", "INS SimpleType: V to MethodDeclaration at 2", "INS FieldAccess to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: newValue to SingleVariableDeclaration at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: value to VariableDeclarationFragment at 1", "INS SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "UPDATE from ListIterator<Node<K,V>> to ListIterator<Entry<K,V>>", "operations": ["UPD ParameterizedType: ListIterator<Node<K,V>> from ListIterator<Node<K,V>> to ListIterator<Entry<K,V>>"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: contains to MethodInvocation at 1"]}, {"root": "UPDATE from keySet to createKeySet", "operations": ["UPD SimpleName: keySet from keySet to createKeySet"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0", "MOV ParameterizedType: List<V> to MethodDeclaration at 4"]}, {"root": "INS SimpleName: values to MethodDeclaration at 5", "operations": ["INS SimpleName: values to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: values to SuperMethodInvocation at 0", "INS SuperMethodInvocation to CastExpression at 1", "INS ReturnStatement to Block at 0", "INS CastExpression to ReturnStatement at 0", "INS Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<V> to MethodDeclaration at 1"]}, {"root": "UPDATE from values to createValues", "operations": ["UPD SimpleName: values from values to createValues"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4", "INS ClassInstanceCreation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV ParameterizedType: List<Entry<K,V>> to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 2", "MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<Entry<K,V>> to MethodDeclaration at 1"]}, {"root": "UPDATE from entries to createEntries", "operations": ["UPD SimpleName: entries from entries to createEntries"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from asMap to createAsMap", "operations": ["UPD SimpleName: asMap from asMap to createAsMap"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from String to K", "operations": ["UPD SimpleName: String from String to K", "UPD SimpleType: String from String to K"]}, {"root": "UPDATE from toString to getKey", "operations": ["UPD SimpleName: toString from toString to getKey"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from Node<K,V> to Entry<K,V>", "operations": ["UPD ParameterizedType: Node<K,V> from Node<K,V> to Entry<K,V>", "UPD ParameterizedType: Node<K,V> from Node<K,V> to Entry<K,V>", "UPD ParameterizedType: Node<K,V> from Node<K,V> to Entry<K,V>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: Iterator<Entry<K,V>>", "operations": ["MOV SimpleType: Iterator to ParameterizedType: Iterator<Entry<K,V>> at 0"]}, {"root": "MOVE from ParameterizedType: Iterator<Entry<K,V>>", "operations": ["MOV ParameterizedType: Entry<K,V> to ParameterizedType: Iterator<Entry<K,V>> at 1", "MOV Block to MethodDeclaration at 6"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: V to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from Node to Entry", "operations": ["UPD SimpleName: Node from Node to Entry", "UPD SimpleType: Node from Node to Entry", "UPD SimpleName: Node from Node to Entry", "UPD SimpleType: Node from Node to Entry", "UPD SimpleType: Node from Node to Entry", "UPD SimpleName: Node from Node to Entry"]}, {"root": "INS SimpleType: K to ParameterizedType: Node<K,V> at 1", "operations": ["INS SimpleType: K to ParameterizedType: Node<K,V> at 1", "INS SimpleName: K to SimpleType: K at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "INS CastExpression to ReturnStatement at 0", "operations": ["INS SimpleName: entries to SuperMethodInvocation at 0", "INS SuperMethodInvocation to CastExpression at 1", "INS CastExpression to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: V to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from i to Iterators", "operations": ["UPD SimpleName: i from i to Iterators"]}, {"root": "UPDATE from next to clear", "operations": ["UPD SimpleName: next from next to clear"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "INS SimpleType: V to ParameterizedType: Node<K,V> at 2", "operations": ["INS SimpleType: V to ParameterizedType: Node<K,V> at 2", "INS SimpleName: V to SimpleType: V at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 2"]}, {"root": "MOVE from CastExpression", "operations": ["MOV ParameterizedType: List<V> to CastExpression at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV AnonymousClassDeclaration to ClassInstanceCreation at 1", "MOV ParameterizedType: AbstractSequentialList<V> to ClassInstanceCreation at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV ParameterizedType: List<Entry<K,V>> to CastExpression at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: AbstractSequentialList<Entry<K,V>> to ClassInstanceCreation at 0", "MOV AnonymousClassDeclaration to ClassInstanceCreation at 1"]}, {"root": "UPDATE from i to values", "operations": ["UPD SimpleName: i from i to values"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: i to MethodInvocation at 0"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "UPDATE from Multimap to AssertionError", "operations": ["UPD SimpleName: Multimap from Multimap to AssertionError"]}, {"root": "MOVE from SimpleType: AssertionError", "operations": ["MOV SimpleName: Multimap to SimpleType: AssertionError at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "UPDATE from nodes to nodeItr", "operations": ["UPD SimpleName: nodes from nodes to nodeItr", "UPD SimpleName: nodes from nodes to nodeItr", "UPD SimpleName: nodes from nodes to nodeItr"]}, {"root": "UPDATE from TransformedListIterator<Node<K,V>,V> to TransformedListIterator<Entry<K,V>,V>", "operations": ["UPD ParameterizedType: TransformedListIterator<Node<K,V>,V> from TransformedListIterator<Node<K,V>,V> to TransformedListIterator<Entry<K,V>,V>"]}, {"root": "MOVE from ParameterizedType: TransformedListIterator<Node<K,V>,V>", "operations": ["MOV ParameterizedType: Entry<K,V> to ParameterizedType: TransformedListIterator<Node<K,V>,V> at 1"]}, {"root": "MOVE from ParameterizedType: TransformedListIterator<Node<K,V>,V>", "operations": ["MOV SimpleType: V to ParameterizedType: TransformedListIterator<Node<K,V>,V> at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: V to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Entry<K,V> to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: entry to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: entry to SingleVariableDeclaration at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Objects"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: value", "DEL StringLiteral: \"=\"", "DEL SimpleName: key", "DEL InfixExpression: +"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: hasNext", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL VariableDeclarationExpression", "DEL ForStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: remove", "DEL Block", "DEL Block", "DEL SimpleType: Iterator", "DEL ParameterizedType: Iterator<V>", "DEL SimpleName: i"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: next", "DEL SimpleName: NodeIterator", "DEL MethodDeclaration", "DEL SimpleName: head"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: Node", "DEL FieldAccess", "DEL SimpleName: Node", "DEL BooleanLiteral: false", "DEL SimpleName: i", "DEL SimpleName: Objects", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL Block", "DEL ParameterizedType: Iterator<Node<K,V>>", "DEL SimpleName: V", "DEL Block", "DEL SimpleName: Iterator", "DEL SimpleName: i", "DEL SimpleName: NodeIterator", "DEL IfStatement", "DEL SimpleName: next", "DEL SimpleType: Iterator", "DEL MethodInvocation", "DEL SimpleName: K", "DEL Block", "DEL SimpleType: NodeIterator", "DEL ReturnStatement", "DEL VariableDeclarationExpression", "DEL ParameterizedType: Node<K,V>", "DEL ReturnStatement", "DEL ForStatement", "DEL SimpleName: value", "DEL SimpleName: equal", "DEL SimpleType: V"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Object", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SimpleName: Nullable", "DEL SimpleName: containsEntry", "DEL SingleVariableDeclaration", "DEL Block", "DEL BooleanLiteral: false", "DEL ClassInstanceCreation", "DEL BooleanLiteral: true", "DEL SimpleName: ValueForKeyIterator", "DEL SimpleType: ValueForKeyIterator", "DEL SimpleName: hasNext", "DEL SimpleName: equal", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: Iterator", "DEL ForStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: value", "DEL MarkerAnnotation", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: i", "DEL Modifier: public", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: next", "DEL MethodInvocation", "DEL SimpleName: Nullable", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL ParameterizedType: Iterator<V>", "DEL SimpleType: Iterator", "DEL SimpleName: Objects", "DEL SimpleName: value", "DEL SimpleName: i", "DEL Block", "DEL PrimitiveType: boolean", "DEL IfStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: key", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL SimpleName: changed", "DEL ParameterizedType: Iterable<? extends V>", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: false", "DEL Modifier: public", "DEL SimpleName: K", "DEL SimpleName: Iterable", "DEL SimpleName: value", "DEL SimpleName: put", "DEL SimpleName: putAll", "DEL SimpleName: values", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends V", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleType: Iterable", "DEL SimpleType: V", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: values", "DEL SimpleName: key", "DEL SimpleName: V", "DEL Assignment: |=", "DEL SimpleName: changed", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: changed", "DEL SimpleName: value", "DEL SimpleType: K", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: entries", "DEL WildcardType: ? extends K", "DEL SimpleName: V", "DEL BooleanLiteral: false", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: Multimap", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends V", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleType: V", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: putAll", "DEL WildcardType: ? extends K", "DEL SimpleType: K", "DEL SimpleName: put", "DEL VariableDeclarationStatement", "DEL SimpleName: Multimap", "DEL SimpleName: changed", "DEL SimpleName: Entry", "DEL SimpleName: K", "DEL SimpleName: getKey", "DEL WildcardType: ? extends V", "DEL SingleVariableDeclaration", "DEL SimpleName: multimap", "DEL Assignment: |=", "DEL SimpleName: changed", "DEL SimpleName: K", "DEL SimpleName: multimap", "DEL Block", "DEL ParameterizedType: Entry<? extends K,? extends V>", "DEL SimpleName: entry", "DEL ParameterizedType: Multimap<? extends K,? extends V>", "DEL Block", "DEL SimpleType: K", "DEL SimpleType: V", "DEL EnhancedForStatement", "DEL ReturnStatement", "DEL SimpleName: changed", "DEL PrimitiveType: boolean", "DEL SimpleType: Entry", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: removeAll", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: c", "DEL SimpleName: removeAll", "DEL SimpleType: Collection", "DEL Block", "DEL ParameterizedType: Collection<?>", "DEL SimpleName: c", "DEL WildcardType: ?", "DEL SimpleName: iterator", "DEL Modifier: public", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Iterators", "DEL SimpleName: Collection", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: iterator", "DEL SimpleName: retainAll", "DEL Block", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL SimpleName: Iterators", "DEL SimpleName: Collection", "DEL ParameterizedType: Collection<?>", "DEL SimpleType: Collection", "DEL SimpleName: retainAll", "DEL MethodInvocation", "DEL ReturnStatement", "DEL WildcardType: ?"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Set", "DEL ParameterizedType: Set<K>", "DEL SimpleType: Set", "DEL SimpleName: keySet", "DEL SimpleName: K", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: transient", "DEL Modifier: private", "DEL SimpleType: K"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: result", "DEL SimpleName: keySet"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: Set", "DEL SimpleName: result", "DEL SimpleName: K", "DEL SimpleType: K", "DEL Block", "DEL ParameterizedType: Set<K>", "DEL SimpleType: Set", "DEL VariableDeclarationStatement", "DEL SimpleName: keySet", "DEL SimpleName: result", "DEL NullLiteral", "DEL IfStatement"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleName: remove", "operations": ["DEL SimpleName: remove"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Nullable", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: key", "DEL SimpleType: Object"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Object", "DEL SimpleName: Nullable", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL MarkerAnnotation"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: next", "DEL SimpleName: equal", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SimpleName: ValueForKeyIterator", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: values", "DEL WhileStatement", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL SimpleName: values", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: Objects", "DEL SimpleType: Iterator", "DEL SimpleType: ValueForKeyIterator", "DEL IfStatement", "DEL Block", "DEL ParameterizedType: Iterator<V>", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: values", "DEL SimpleName: Iterator", "DEL SimpleName: values", "DEL MethodInvocation", "DEL SimpleName: remove"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: K", "DEL Modifier: transient", "DEL ParameterizedType: Multiset<K>", "DEL SimpleName: Multiset", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: Multiset", "DEL SimpleName: K", "DEL SimpleName: keys"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleType: Multiset", "DEL SimpleName: result", "DEL SimpleName: keys", "DEL SimpleName: keys", "DEL NullLiteral", "DEL SimpleName: Multiset", "DEL SimpleType: K", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: keys", "DEL SimpleType: MultisetView", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL InfixExpression: ==", "DEL SimpleName: K", "DEL SimpleName: result", "DEL Block", "DEL IfStatement", "DEL ParameterizedType: Multiset<K>", "DEL Assignment: =", "DEL SimpleName: Multiset", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: result", "DEL Assignment: =", "DEL SimpleName: MultisetView", "DEL SimpleType: Multiset", "DEL SimpleName: result", "DEL ParameterizedType: Multiset<K>"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: count", "DEL ClassInstanceCreation", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL InfixExpression: >", "DEL SimpleName: Object", "DEL SimpleName: Node", "DEL SimpleName: remove", "DEL NumberLiteral: 0", "DEL SimpleName: keyList", "DEL SimpleName: transform", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleName: get", "DEL AnonymousClassDeclaration", "DEL SimpleType: V", "DEL PrimitiveType: int", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleType: Node", "DEL MethodDeclaration", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: count", "DEL ParameterizedType: TransformedIterator<Node<K,V>,K>", "DEL ParameterizedType: KeyList<K,V>", "DEL SimpleType: K", "DEL ParameterizedType: Node<K,V>", "DEL ConditionalExpression", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL MarkerAnnotation", "DEL SimpleName: K", "DEL SimpleType: V", "DEL SimpleName: checkArgument", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: TransformedIterator", "DEL ParameterizedType: Entry<K>", "DEL SimpleName: MultisetView", "DEL SimpleName: Node", "DEL QualifiedName: node.key", "DEL SimpleType: K", "DEL MarkerAnnotation", "DEL SimpleName: NodeIterator", "DEL Block", "DEL SimpleName: remove", "DEL SimpleName: size", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL SimpleName: values", "DEL SimpleName: Object", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleName: K", "DEL QualifiedName: Multisets.AbstractEntry", "DEL WhileStatement", "DEL SimpleName: K", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL SimpleName: iterator", "DEL ParameterizedType: TransformedIterator<K,Entry<K>>", "DEL NumberLiteral: 0", "DEL ParameterizedType: Node<K,V>", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Set", "DEL SimpleName: V", "DEL PrimitiveType: int", "DEL PostfixExpression: --", "DEL SimpleType: DistinctKeyIterator", "DEL ParameterizedType: Iterator<Entry<K>>", "DEL SimpleName: TransformedIterator", "DEL ParenthesizedExpression", "DEL QualifiedName: keyList.count", "DEL ParameterizedType: AbstractMultiset<K>", "DEL InfixExpression: &&", "DEL SimpleType: ValueForKeyIterator", "DEL SimpleName: K", "DEL SimpleType: Entry", "DEL SimpleType: NodeIterator", "DEL SimpleName: occurrences", "DEL SimpleName: K", "DEL SimpleType: TransformedIterator", "DEL SimpleName: K", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL SimpleName: occurrences", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: getCount", "DEL ReturnStatement", "DEL SimpleName: elementSet", "DEL SimpleType: K", "DEL PrimitiveType: int", "DEL SimpleName: occurrences", "DEL SimpleType: K", "DEL ReturnStatement", "DEL SimpleType: K", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL ParameterizedType: Entry<K>", "DEL SimpleName: element", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: Override", "DEL SimpleName: Entry", "DEL SimpleName: K", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL Block", "DEL SimpleName: oldCount", "DEL MethodDeclaration", "DEL SimpleName: hasNext", "DEL SimpleName: V", "DEL SimpleName: Entry", "DEL Block", "DEL Block", "DEL SimpleName: Override", "DEL TypeDeclaration: class", "DEL SimpleName: Override", "DEL SimpleName: elementSet", "DEL VariableDeclarationStatement", "DEL SimpleType: K", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: next", "DEL SimpleName: values", "DEL SimpleName: entryIterator", "DEL SimpleName: values", "DEL SimpleName: element", "DEL ReturnStatement", "DEL SimpleName: size", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL SimpleType: Iterator", "DEL AnonymousClassDeclaration", "DEL SimpleName: V", "DEL ParameterizedType: Multisets.AbstractEntry<K>", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL SimpleType: Node", "DEL SimpleName: node", "DEL ReturnStatement", "DEL ParameterizedType: Set<K>", "DEL SimpleName: keyList", "DEL SimpleName: transform", "DEL SimpleName: Nullable", "DEL PrimitiveType: int", "DEL SimpleType: KeyList", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: ValueForKeyIterator", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: Entry", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: distinctElements", "DEL SimpleType: Iterator", "DEL SimpleType: K", "DEL ParameterizedType: Iterator<K>", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SimpleType: K", "DEL SimpleName: TransformedIterator", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SimpleName: Override", "DEL SimpleName: values", "DEL Block", "DEL SimpleName: keySet", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL ReturnStatement", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL SimpleName: get", "DEL SimpleType: Entry", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL FieldAccess", "DEL SimpleName: K", "DEL SimpleName: Iterator", "DEL SimpleType: AbstractMultiset", "DEL SimpleName: AbstractMultiset", "DEL SimpleType: Multisets.AbstractEntry", "DEL SimpleName: count", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: K", "DEL SimpleType: K", "DEL MarkerAnnotation", "DEL SimpleType: Entry", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL ParameterizedType: Entry<K>", "DEL MethodInvocation", "DEL SimpleName: keyToKeyList", "DEL Modifier: public", "DEL SimpleType: K", "DEL SimpleName: size", "DEL InfixExpression: >=", "DEL Modifier: public", "DEL SimpleType: Set", "DEL Modifier: public", "DEL SimpleName: oldCount", "DEL MethodDeclaration", "DEL SimpleName: keyToKeyList", "DEL SimpleName: getElement", "DEL SimpleName: DistinctKeyIterator", "DEL SimpleName: key", "DEL SimpleName: Iterator", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: KeyList", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL ParameterizedType: Iterator<V>", "DEL Block", "DEL SimpleName: key", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: valuesList", "DEL Modifier: transient", "DEL FieldDeclaration", "DEL VariableDeclarationFragment"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL ParameterizedType: Node<K,V>", "operations": ["DEL SimpleType: V", "DEL SimpleName: Node", "DEL SimpleType: K", "DEL SimpleType: Node", "DEL ParameterizedType: Node<K,V>", "DEL SimpleName: K", "DEL SimpleName: V"]}, {"root": "DEL SimpleType: V", "operations": ["DEL SimpleName: V", "DEL SimpleType: V"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL SimpleType: V", "operations": ["DEL SimpleName: V", "DEL SimpleType: V"]}, {"root": "DEL ParameterizedType: Node<K,V>", "operations": ["DEL SimpleName: K", "DEL ParameterizedType: Node<K,V>", "DEL SimpleName: V", "DEL SimpleType: Node", "DEL SimpleType: K", "DEL SimpleName: Node", "DEL SimpleType: V"]}, {"root": "DEL SimpleName: node", "operations": ["DEL SimpleName: node"]}, {"root": "DEL QualifiedName: node.value", "operations": ["DEL QualifiedName: node.value"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL SimpleName: result", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: valuesList", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL SimpleName: result", "DEL SimpleName: valuesList", "DEL Assignment: =", "DEL SimpleName: result", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: result"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: oldValue", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL QualifiedName: node.value", "DEL SimpleName: V"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: value", "DEL Assignment: =", "DEL QualifiedName: node.value", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: oldValue", "operations": ["DEL SimpleName: oldValue"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SimpleName: V", "DEL Modifier: final", "DEL SimpleType: Node", "DEL MarkerAnnotation", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: getKey", "DEL TypeParameter", "DEL ParameterizedType: Node<K,V>", "DEL SimpleName: Override", "DEL SimpleName: value", "DEL SimpleType: K", "DEL SimpleName: Override", "DEL SimpleType: V", "DEL ReturnStatement", "DEL SimpleName: V", "DEL Modifier: static", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SimpleName: K", "DEL Modifier: public", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: Node", "DEL SimpleName: getValue", "DEL SimpleName: K", "DEL SimpleType: V", "DEL Modifier: private", "DEL QualifiedName: node.key", "DEL SimpleName: K", "DEL TypeParameter", "DEL SimpleName: V", "DEL QualifiedName: node.value", "DEL SimpleType: K", "DEL SimpleName: createEntry", "DEL Modifier: public", "DEL Block", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: setValue", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: entries", "DEL FieldDeclaration", "DEL Modifier: transient"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: createEntry"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: TransformedListIterator", "DEL SimpleName: Node", "DEL SimpleType: V", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: TransformedListIterator", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SimpleType: K", "DEL SimpleType: V", "DEL SimpleName: K", "DEL ParameterizedType: Node<K,V>", "DEL Block", "DEL ReturnStatement", "DEL ParameterizedType: Node<K,V>", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL ParameterizedType: TransformedListIterator<Node<K,V>,Entry<K,V>>", "DEL SimpleName: Override", "DEL ClassInstanceCreation", "DEL SimpleName: Node", "DEL SimpleName: transform", "DEL SimpleType: Node", "DEL SimpleName: K"]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: entries", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL SimpleName: entries", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL Block", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL SimpleName: result", "DEL Block", "DEL SimpleName: result", "DEL ClassInstanceCreation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: V", "DEL SimpleName: map", "DEL SimpleType: V", "DEL SimpleType: Map", "DEL ParameterizedType: Map<K,Collection<V>>", "DEL ParameterizedType: Collection<V>", "DEL SimpleName: K", "DEL FieldDeclaration", "DEL SimpleName: Collection", "DEL VariableDeclarationFragment", "DEL SimpleType: Collection", "DEL SimpleType: K", "DEL Modifier: transient", "DEL SimpleName: Map", "DEL Modifier: private"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: result", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: map", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL SimpleName: result", "DEL SimpleType: Collection", "DEL Block", "DEL SimpleType: K", "DEL ParameterizedType: Map<K,Collection<V>>", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleName: Map", "DEL SimpleName: result", "DEL NullLiteral", "DEL SimpleName: K", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SimpleName: result", "DEL ParameterizedType: Collection<V>", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL SimpleName: map", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Collection"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: contain the same values in the same order. If the value orderings disagree,", "DEL MarkerAnnotation", "DEL SimpleType: Multimap", "DEL SimpleName: other", "DEL IfStatement", "DEL InfixExpression: ==", "DEL ThisExpression", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL SimpleType: Multimap", "DEL TextElement: the multimaps will not be considered equal.", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL SimpleName: Multimap", "DEL SimpleName: asMap", "DEL SimpleName: that", "DEL SimpleName: asMap", "DEL ReturnStatement", "DEL ParameterizedType: Multimap<?,?>", "DEL Block", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL TextElement: Compares the specified object to this multimap for equality.", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL TextElement: <p>Two ", "DEL SimpleName: other", "DEL SimpleName: that", "DEL SimpleType: Multimap", "DEL TextElement:  ListMultimap", "DEL PrimitiveType: boolean", "DEL ThisExpression", "DEL SimpleName: Multimap", "DEL SimpleName: other", "DEL TextElement:  instances are equal if, for each key, they", "DEL SimpleName: Override", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: other", "DEL SimpleName: Nullable", "DEL ParameterizedType: Multimap<?,?>", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: Object", "DEL BooleanLiteral: true", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL Javadoc", "DEL MethodDeclaration", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL MarkerAnnotation", "DEL TagElement: @code", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: as returned by ", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: asMap", "DEL TextElement: <p>The hash code of a multimap is defined as the hash code of the map view,", "DEL SimpleName: asMap", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: Multimap", "DEL SimpleName: hashCode", "DEL Modifier: public", "DEL SimpleName: Override", "DEL TextElement: Returns the hash code for this multimap.", "DEL Block", "DEL ReturnStatement", "DEL TextElement: .", "DEL SimpleName: hashCode", "DEL MemberRef", "DEL TagElement: @link", "DEL MarkerAnnotation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TextElement: .", "DEL SimpleName: Multimap", "DEL SimpleName: toString", "DEL SimpleType: String", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL TextElement:  toString", "DEL MemberRef", "DEL ReturnStatement", "DEL SimpleName: asMap", "DEL TagElement", "DEL TextElement:  on the map returned by ", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL TagElement: @code", "DEL Javadoc", "DEL SimpleName: String", "DEL TextElement:  a string representation of the multimap", "DEL Modifier: public", "DEL SimpleName: asMap", "DEL TagElement: @link", "DEL TextElement: Returns a string representation of the multimap, generated by calling"]}]}}, {"LinkedListMultimap_diff": {"operations": ["Move MethodDeclaration(2243) into TypeDeclaration: class(3101) at 44", "Update QualifiedName: com.google.common.base.Preconditions.checkArgument(2) to com.google.common.base.Preconditions.checkPositionIndex", "Insert ParameterizedType: AbstractMultimap<K,V>(220) into TypeDeclaration: class(3101) at 6", "Insert MethodDeclaration(2724) into TypeDeclaration: class(3101) at 42", "Insert MethodDeclaration(2805) into TypeDeclaration: class(3101) at 44", "Insert SimpleType: AbstractMultimap(215) into ParameterizedType: AbstractMultimap<K,V>(220) at 0", "Move SimpleType: K(1112) into ParameterizedType: AbstractMultimap<K,V>(220) at 1", "Move SimpleType: V(1431) into ParameterizedType: AbstractMultimap<K,V>(220) at 2", "Move ParameterizedType: AbstractMapEntry<K,V>(3272) into TypeDeclaration: class(371) at 6", "Insert MethodDeclaration(342) into TypeDeclaration: class(371) at 15", "Insert MethodDeclaration(370) into TypeDeclaration: class(371) at 16", "Insert Block(1101) into MethodDeclaration(1102) at 5", "Update ParameterizedType: ListIterator<Node<K,V>>(1116) to ListIterator<Entry<K,V>>", "Insert Block(2088) into MethodDeclaration(2089) at 5", "Update SimpleName: keySet(2698) to createKeySet", "Move Block(2784) into MethodDeclaration(2511) at 4", "Move Javadoc(3119) into MethodDeclaration(2546) at 0", "Move MarkerAnnotation(3121) into MethodDeclaration(2546) at 1", "Move ParameterizedType: List<V>(3127) into MethodDeclaration(2546) at 4", "Insert SimpleName: values(2535) into MethodDeclaration(2546) at 4", "Insert Block(2545) into MethodDeclaration(2546) at 5", "Move MarkerAnnotation(2245) into MethodDeclaration(2649) at 0", "Move ParameterizedType: List<V>(3101) into MethodDeclaration(2649) at 1", "Update SimpleName: values(3128) to createValues", "Insert Block(2648) into MethodDeclaration(2649) at 3", "Move Javadoc(3381) into MethodDeclaration(2724) at 0", "Move MarkerAnnotation(3383) into MethodDeclaration(2724) at 1", "Move Modifier: public(3295) into MethodDeclaration(2724) at 2", "Move ParameterizedType: List<Entry<K,V>>(3394) into MethodDeclaration(2724) at 3", "Insert SimpleName: entries(2708) into MethodDeclaration(2724) at 4", "Move Block(3315) into MethodDeclaration(2724) at 5", "Move MarkerAnnotation(2656) into MethodDeclaration(2785) at 0", "Move ParameterizedType: List<Entry<K,V>>(3333) into MethodDeclaration(2785) at 1", "Update SimpleName: entries(3395) to createEntries", "Insert Block(2784) into MethodDeclaration(2785) at 3", "Move MarkerAnnotation(2801) into MethodDeclaration(2805) at 0", "Insert ParameterizedType: Iterator<Entry<K,V>>(2797) into MethodDeclaration(2805) at 1", "Insert SimpleName: entryIterator(2798) into MethodDeclaration(2805) at 2", "Insert Block(2804) into MethodDeclaration(2805) at 3", "Update SimpleName: asMap(3541) to createAsMap", "Move Block(3698) into MethodDeclaration(2955) at 4", "Insert SimpleName: AbstractMultimap(214) into SimpleType: AbstractMultimap(215) at 0", "Move MarkerAnnotation(2927) into MethodDeclaration(332) at 0", "Move SimpleType: K(2930) into MethodDeclaration(332) at 3", "Update SimpleName: toString(318) to getKey", "Move MarkerAnnotation(314) into MethodDeclaration(342) at 0", "Insert Modifier: public(335) into MethodDeclaration(342) at 1", "Insert SimpleType: V(337) into MethodDeclaration(342) at 2", "Insert SimpleName: getValue(338) into MethodDeclaration(342) at 3", "Insert Block(341) into MethodDeclaration(342) at 4", "Move MarkerAnnotation(2102) into MethodDeclaration(370) at 0", "Insert Modifier: public(345) into MethodDeclaration(370) at 1", "Insert SimpleType: V(347) into MethodDeclaration(370) at 2", "Insert SimpleName: setValue(348) into MethodDeclaration(370) at 3", "Insert SingleVariableDeclaration(354) into MethodDeclaration(370) at 4", "Insert Block(369) into MethodDeclaration(370) at 5", "Move ExpressionStatement(1066) into Block(1101) at 0", "Update ParameterizedType: Node<K,V>(1115) to Entry<K,V>", "Move MarkerAnnotation(1422) into MethodDeclaration(1440) at 0", "Move Block(1439) into MethodDeclaration(1440) at 6", "Move MarkerAnnotation(1402) into MethodDeclaration(1460) at 0", "Move Block(1419) into MethodDeclaration(1460) at 5", "Insert ReturnStatement(2087) into Block(2088) at 0", "Insert ReturnStatement(2509) into Block(2510) at 0", "Insert ReturnStatement(2544) into Block(2545) at 0", "Insert ReturnStatement(2647) into Block(2648) at 0", "Insert ReturnStatement(2783) into Block(2784) at 0", "Move SimpleType: Iterator(2887) into ParameterizedType: Iterator<Entry<K,V>>(2797) at 0", "Move ParameterizedType: Entry<K,V>(3480) into ParameterizedType: Iterator<Entry<K,V>>(2797) at 1", "Insert ThrowStatement(2803) into Block(2804) at 0", "Insert ReturnStatement(2953) into Block(2954) at 0", "Move ReturnStatement(2933) into Block(331) at 0", "Insert SimpleName: V(336) into SimpleType: V(337) at 0", "Insert ReturnStatement(340) into Block(341) at 0", "Insert SimpleName: V(346) into SimpleType: V(347) at 0", "Move MarkerAnnotation(2250) into SingleVariableDeclaration(354) at 0", "Move SimpleType: V(1051) into SingleVariableDeclaration(354) at 1", "Insert SimpleName: newValue(353) into SingleVariableDeclaration(354) at 2", "Insert VariableDeclarationStatement(360) into Block(369) at 0", "Insert ExpressionStatement(366) into Block(369) at 1", "Move ReturnStatement(2787) into Block(369) at 2", "Update SimpleType: Node(1110) to Entry", "Insert SimpleType: K(1140) into ParameterizedType: Entry<K,V>(1143) at 1", "Update ParameterizedType: Node<K,V>(1412) to Entry<K,V>", "Update ParameterizedType: Node<K,V>(1432) to Entry<K,V>", "Insert MethodInvocation(2086) into ReturnStatement(2087) at 0", "Move ClassInstanceCreation(2780) into ReturnStatement(2509) at 0", "Insert CastExpression(2543) into ReturnStatement(2544) at 0", "Insert ClassInstanceCreation(2646) into ReturnStatement(2647) at 0", "Insert CastExpression(2721) into ReturnStatement(2722) at 0", "Insert ClassInstanceCreation(2782) into ReturnStatement(2783) at 0", "Insert ClassInstanceCreation(2802) into ThrowStatement(2803) at 0", "Move ClassInstanceCreation(3694) into ReturnStatement(2953) at 0", "Insert SimpleName: value(339) into ReturnStatement(340) at 0", "Move SimpleType: V(2258) into VariableDeclarationStatement(360) at 0", "Insert VariableDeclarationFragment(359) into VariableDeclarationStatement(360) at 1", "Insert Assignment: =(365) into ExpressionStatement(366) at 0", "Update SimpleName: i(1063) to Iterators", "Update SimpleName: next(1064) to clear", "Move ClassInstanceCreation(1057) into MethodInvocation(1099) at 2", "Update SimpleName: Node(1109) to Entry", "Insert SimpleName: K(1139) into SimpleType: K(1140) at 0", "Update SimpleType: Node(1407) to Entry", "Update SimpleType: Node(1427) to Entry", "Insert SimpleType: V(1451) into ParameterizedType: Entry<K,V>(1452) at 2", "Insert MethodInvocation(2083) into MethodInvocation(2086) at 0", "Insert SimpleName: contains(2084) into MethodInvocation(2086) at 1", "Move SimpleName: value(2089) into MethodInvocation(2086) at 2", "Move ParameterizedType: List<V>(3133) into CastExpression(2543) at 0", "Insert SuperMethodInvocation(2542) into CastExpression(2543) at 1", "Move ParameterizedType: AbstractSequentialList<V>(3147) into ClassInstanceCreation(2646) at 0", "Move AnonymousClassDeclaration(3231) into ClassInstanceCreation(2646) at 1", "Move ParameterizedType: List<Entry<K,V>>(3405) into CastExpression(2721) at 0", "Insert SuperMethodInvocation(2720) into CastExpression(2721) at 1", "Move ParameterizedType: AbstractSequentialList<Entry<K,V>>(3424) into ClassInstanceCreation(2782) at 0", "Move AnonymousClassDeclaration(3502) into ClassInstanceCreation(2782) at 1", "Insert SimpleType: AssertionError(2800) into ClassInstanceCreation(2802) at 0", "Insert StringLiteral: \"should never be called\"(2801) into ClassInstanceCreation(2802) at 1", "Insert SimpleName: result(357) into VariableDeclarationFragment(359) at 0", "Insert SimpleName: value(358) into VariableDeclarationFragment(359) at 1", "Insert FieldAccess(363) into Assignment: =(365) at 0", "Insert SimpleName: newValue(364) into Assignment: =(365) at 1", "Update SimpleName: Node(1406) to Entry", "Update SimpleName: Node(1426) to Entry", "Insert SimpleName: V(1450) into SimpleType: V(1451) at 0", "Update SimpleName: i(2084) to values", "Move SimpleName: i(2084) into MethodInvocation(2083) at 0", "Insert SimpleName: values(2541) into SuperMethodInvocation(2542) at 0", "Move MethodDeclaration(3433) into AnonymousClassDeclaration(2645) at 0", "Insert SimpleName: entries(2719) into SuperMethodInvocation(2720) at 0", "Move MethodDeclaration(3156) into AnonymousClassDeclaration(2781) at 0", "Update SimpleName: Multimap(3735) to AssertionError", "Move SimpleName: Multimap(3735) into SimpleType: AssertionError(2800) at 0", "Insert ThisExpression(361) into FieldAccess(363) at 0", "Insert SimpleName: value(362) into FieldAccess(363) at 1", "Move MarkerAnnotation(2885) into MethodDeclaration(2644) at 0", "Move SingleVariableDeclaration(3450) into MethodDeclaration(2644) at 5", "Move MarkerAnnotation(2852) into MethodDeclaration(2780) at 0", "Move SingleVariableDeclaration(3168) into MethodDeclaration(2780) at 5", "Move Block(3495) into MethodDeclaration(2780) at 6", "Move ClassInstanceCreation(3471) into ReturnStatement(2778) at 0", "Update SimpleName: nodes(3172) to nodeItr", "Update ParameterizedType: TransformedListIterator<Node<K,V>,V>(3190) to TransformedListIterator<Entry<K,V>,V>", "Update SimpleName: nodes(3191) to nodeItr", "Move ParameterizedType: Entry<K,V>(3466) into ParameterizedType: TransformedListIterator<Entry<K,V>,V>(2602) at 1", "Move SimpleType: V(2865) into ParameterizedType: TransformedListIterator<Entry<K,V>,V>(2602) at 2", "Move MarkerAnnotation(2287) into MethodDeclaration(2623) at 0", "Move SimpleType: V(2211) into MethodDeclaration(2623) at 1", "Move MarkerAnnotation(2636) into MethodDeclaration(2639) at 0", "Move ParameterizedType: Entry<K,V>(3254) into SingleVariableDeclaration(2617) at 0", "Insert SimpleName: entry(2616) into SingleVariableDeclaration(2617) at 1", "Move MethodInvocation(2328) into ReturnStatement(2621) at 0", "Update SimpleName: nodes(3219) to nodeItr", "Delete QualifiedName: com.google.common.base.Objects(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.common.base.Preconditions(14)", "Delete ImportDeclaration(15)", "Delete SimpleName: key(319)", "Delete StringLiteral: \"=\"(320)", "Delete SimpleName: value(321)", "Delete InfixExpression: +(322)", "Delete SimpleName: Iterator(1048)", "Delete SimpleType: Iterator(1049)", "Delete ParameterizedType: Iterator<V>(1052)", "Delete SimpleName: i(1053)", "Delete VariableDeclarationFragment(1058)", "Delete VariableDeclarationExpression(1059)", "Delete SimpleName: i(1060)", "Delete SimpleName: hasNext(1061)", "Delete MethodInvocation(1062)", "Delete SimpleName: i(1067)", "Delete SimpleName: remove(1068)", "Delete MethodInvocation(1069)", "Delete ExpressionStatement(1070)", "Delete Block(1071)", "Delete ForStatement(1072)", "Delete Block(1073)", "Delete SimpleName: NodeIterator(1156)", "Delete SimpleName: next(1157)", "Delete SimpleName: head(1158)", "Delete Assignment: =(1159)", "Delete ExpressionStatement(1160)", "Delete Block(1161)", "Delete MethodDeclaration(1162)", "Delete SimpleName: Preconditions(1173)", "Delete SimpleName: Preconditions(1757)", "Delete SimpleName: Iterator(2063)", "Delete SimpleType: Iterator(2064)", "Delete SimpleName: Node(2065)", "Delete SimpleType: Node(2066)", "Delete SimpleName: K(2067)", "Delete SimpleType: K(2068)", "Delete SimpleName: V(2069)", "Delete SimpleType: V(2070)", "Delete ParameterizedType: Node<K,V>(2071)", "Delete ParameterizedType: Iterator<Node<K,V>>(2072)", "Delete SimpleName: i(2073)", "Delete SimpleName: NodeIterator(2074)", "Delete SimpleType: NodeIterator(2075)", "Delete ClassInstanceCreation(2076)", "Delete VariableDeclarationFragment(2077)", "Delete VariableDeclarationExpression(2078)", "Delete SimpleName: i(2079)", "Delete SimpleName: hasNext(2080)", "Delete MethodInvocation(2081)", "Delete SimpleName: Objects(2082)", "Delete SimpleName: equal(2083)", "Delete SimpleName: next(2085)", "Delete MethodInvocation(2086)", "Delete SimpleName: value(2087)", "Delete FieldAccess(2088)", "Delete MethodInvocation(2090)", "Delete BooleanLiteral: true(2091)", "Delete ReturnStatement(2092)", "Delete Block(2093)", "Delete IfStatement(2094)", "Delete Block(2095)", "Delete ForStatement(2096)", "Delete BooleanLiteral: false(2097)", "Delete ReturnStatement(2098)", "Delete Block(2099)", "Delete Modifier: public(2103)", "Delete PrimitiveType: boolean(2104)", "Delete SimpleName: containsEntry(2105)", "Delete SimpleName: Nullable(2106)", "Delete MarkerAnnotation(2107)", "Delete SimpleName: Object(2108)", "Delete SimpleType: Object(2109)", "Delete SimpleName: key(2110)", "Delete SingleVariableDeclaration(2111)", "Delete SimpleName: Nullable(2112)", "Delete MarkerAnnotation(2113)", "Delete SimpleName: Object(2114)", "Delete SimpleType: Object(2115)", "Delete SimpleName: value(2116)", "Delete SingleVariableDeclaration(2117)", "Delete SimpleName: Iterator(2118)", "Delete SimpleType: Iterator(2119)", "Delete SimpleName: V(2120)", "Delete SimpleType: V(2121)", "Delete ParameterizedType: Iterator<V>(2122)", "Delete SimpleName: i(2123)", "Delete SimpleName: ValueForKeyIterator(2124)", "Delete SimpleType: ValueForKeyIterator(2125)", "Delete SimpleName: key(2126)", "Delete ClassInstanceCreation(2127)", "Delete VariableDeclarationFragment(2128)", "Delete VariableDeclarationExpression(2129)", "Delete SimpleName: i(2130)", "Delete SimpleName: hasNext(2131)", "Delete MethodInvocation(2132)", "Delete SimpleName: Objects(2133)", "Delete SimpleName: equal(2134)", "Delete SimpleName: i(2135)", "Delete SimpleName: next(2136)", "Delete MethodInvocation(2137)", "Delete SimpleName: value(2138)", "Delete MethodInvocation(2139)", "Delete BooleanLiteral: true(2140)", "Delete ReturnStatement(2141)", "Delete Block(2142)", "Delete IfStatement(2143)", "Delete Block(2144)", "Delete ForStatement(2145)", "Delete BooleanLiteral: false(2146)", "Delete ReturnStatement(2147)", "Delete Block(2148)", "Delete MethodDeclaration(2149)", "Delete Modifier: public(2246)", "Delete PrimitiveType: boolean(2247)", "Delete SimpleName: putAll(2248)", "Delete SimpleName: K(2251)", "Delete SimpleType: K(2252)", "Delete SimpleName: key(2253)", "Delete SingleVariableDeclaration(2254)", "Delete SimpleName: Iterable(2255)", "Delete SimpleType: Iterable(2256)", "Delete WildcardType: ? extends V(2259)", "Delete ParameterizedType: Iterable<? extends V>(2260)", "Delete SimpleName: values(2261)", "Delete SingleVariableDeclaration(2262)", "Delete PrimitiveType: boolean(2263)", "Delete SimpleName: changed(2264)", "Delete BooleanLiteral: false(2265)", "Delete VariableDeclarationFragment(2266)", "Delete VariableDeclarationStatement(2267)", "Delete SimpleName: V(2268)", "Delete SimpleType: V(2269)", "Delete SimpleName: value(2270)", "Delete SingleVariableDeclaration(2271)", "Delete SimpleName: values(2272)", "Delete SimpleName: changed(2273)", "Delete SimpleName: put(2274)", "Delete SimpleName: key(2275)", "Delete SimpleName: value(2276)", "Delete MethodInvocation(2277)", "Delete Assignment: |=(2278)", "Delete ExpressionStatement(2279)", "Delete Block(2280)", "Delete EnhancedForStatement(2281)", "Delete SimpleName: changed(2282)", "Delete ReturnStatement(2283)", "Delete Block(2284)", "Delete MethodDeclaration(2285)", "Delete Modifier: public(2288)", "Delete PrimitiveType: boolean(2289)", "Delete SimpleName: putAll(2290)", "Delete SimpleName: Multimap(2291)", "Delete SimpleType: Multimap(2292)", "Delete SimpleName: K(2293)", "Delete SimpleType: K(2294)", "Delete WildcardType: ? extends K(2295)", "Delete SimpleName: V(2296)", "Delete SimpleType: V(2297)", "Delete WildcardType: ? extends V(2298)", "Delete ParameterizedType: Multimap<? extends K,? extends V>(2299)", "Delete SimpleName: multimap(2300)", "Delete SingleVariableDeclaration(2301)", "Delete PrimitiveType: boolean(2302)", "Delete SimpleName: changed(2303)", "Delete BooleanLiteral: false(2304)", "Delete VariableDeclarationFragment(2305)", "Delete VariableDeclarationStatement(2306)", "Delete SimpleName: Entry(2307)", "Delete SimpleType: Entry(2308)", "Delete SimpleName: K(2309)", "Delete SimpleType: K(2310)", "Delete WildcardType: ? extends K(2311)", "Delete SimpleName: V(2312)", "Delete SimpleType: V(2313)", "Delete WildcardType: ? extends V(2314)", "Delete ParameterizedType: Entry<? extends K,? extends V>(2315)", "Delete SimpleName: entry(2316)", "Delete SingleVariableDeclaration(2317)", "Delete SimpleName: multimap(2318)", "Delete SimpleName: entries(2319)", "Delete MethodInvocation(2320)", "Delete SimpleName: changed(2321)", "Delete SimpleName: put(2322)", "Delete SimpleName: entry(2323)", "Delete SimpleName: getKey(2324)", "Delete MethodInvocation(2325)", "Delete MethodInvocation(2329)", "Delete Assignment: |=(2330)", "Delete ExpressionStatement(2331)", "Delete Block(2332)", "Delete EnhancedForStatement(2333)", "Delete SimpleName: changed(2334)", "Delete ReturnStatement(2335)", "Delete Block(2336)", "Delete MethodDeclaration(2337)", "Delete Modifier: public(2637)", "Delete PrimitiveType: boolean(2638)", "Delete SimpleName: removeAll(2639)", "Delete SimpleName: Collection(2640)", "Delete SimpleType: Collection(2641)", "Delete WildcardType: ?(2642)", "Delete ParameterizedType: Collection<?>(2643)", "Delete SimpleName: c(2644)", "Delete SingleVariableDeclaration(2645)", "Delete SimpleName: Iterators(2646)", "Delete SimpleName: removeAll(2647)", "Delete SimpleName: iterator(2648)", "Delete MethodInvocation(2649)", "Delete SimpleName: c(2650)", "Delete MethodInvocation(2651)", "Delete ReturnStatement(2652)", "Delete Block(2653)", "Delete MethodDeclaration(2654)", "Delete Modifier: public(2657)", "Delete PrimitiveType: boolean(2658)", "Delete SimpleName: retainAll(2659)", "Delete SimpleName: Collection(2660)", "Delete SimpleType: Collection(2661)", "Delete WildcardType: ?(2662)", "Delete ParameterizedType: Collection<?>(2663)", "Delete SimpleName: c(2664)", "Delete SingleVariableDeclaration(2665)", "Delete SimpleName: Iterators(2666)", "Delete SimpleName: retainAll(2667)", "Delete SimpleName: iterator(2668)", "Delete MethodInvocation(2669)", "Delete SimpleName: c(2670)", "Delete MethodInvocation(2671)", "Delete ReturnStatement(2672)", "Delete Block(2673)", "Delete MethodDeclaration(2674)", "Delete Modifier: private(2680)", "Delete Modifier: transient(2681)", "Delete SimpleName: Set(2682)", "Delete SimpleType: Set(2683)", "Delete SimpleName: K(2684)", "Delete SimpleType: K(2685)", "Delete ParameterizedType: Set<K>(2686)", "Delete SimpleName: keySet(2687)", "Delete VariableDeclarationFragment(2688)", "Delete FieldDeclaration(2689)", "Delete Modifier: public(2692)", "Delete SimpleName: keySet(2711)", "Delete SimpleName: result(2712)", "Delete Assignment: =(2781)", "Delete Assignment: =(2782)", "Delete ExpressionStatement(2783)", "Delete SimpleName: Set(2699)", "Delete SimpleType: Set(2700)", "Delete SimpleName: K(2701)", "Delete SimpleType: K(2702)", "Delete ParameterizedType: Set<K>(2703)", "Delete SimpleName: result(2704)", "Delete SimpleName: keySet(2705)", "Delete VariableDeclarationFragment(2706)", "Delete VariableDeclarationStatement(2707)", "Delete SimpleName: result(2708)", "Delete NullLiteral(2709)", "Delete InfixExpression: ==(2710)", "Delete IfStatement(2785)", "Delete Block(2788)", "Delete SimpleName: Override(2191)", "Delete MarkerAnnotation(2192)", "Delete PrimitiveType: boolean(2194)", "Delete SimpleName: remove(2195)", "Delete SimpleName: Nullable(2196)", "Delete MarkerAnnotation(2197)", "Delete SimpleName: Object(2198)", "Delete SimpleType: Object(2199)", "Delete SimpleName: key(2200)", "Delete SingleVariableDeclaration(2201)", "Delete SimpleName: Nullable(2202)", "Delete MarkerAnnotation(2203)", "Delete SimpleName: Object(2204)", "Delete SimpleType: Object(2205)", "Delete SimpleName: value(2206)", "Delete SingleVariableDeclaration(2207)", "Delete SimpleName: Iterator(2208)", "Delete SimpleType: Iterator(2209)", "Delete ParameterizedType: Iterator<V>(2212)", "Delete SimpleName: values(2213)", "Delete SimpleName: ValueForKeyIterator(2214)", "Delete SimpleType: ValueForKeyIterator(2215)", "Delete SimpleName: key(2216)", "Delete ClassInstanceCreation(2217)", "Delete VariableDeclarationFragment(2218)", "Delete VariableDeclarationStatement(2219)", "Delete SimpleName: values(2220)", "Delete SimpleName: hasNext(2221)", "Delete MethodInvocation(2222)", "Delete SimpleName: Objects(2223)", "Delete SimpleName: equal(2224)", "Delete SimpleName: values(2225)", "Delete SimpleName: next(2226)", "Delete MethodInvocation(2227)", "Delete SimpleName: value(2228)", "Delete MethodInvocation(2229)", "Delete SimpleName: values(2230)", "Delete SimpleName: remove(2231)", "Delete MethodInvocation(2232)", "Delete ExpressionStatement(2233)", "Delete BooleanLiteral: true(2234)", "Delete ReturnStatement(2235)", "Delete Block(2236)", "Delete IfStatement(2237)", "Delete Block(2238)", "Delete WhileStatement(2239)", "Delete BooleanLiteral: false(2240)", "Delete ReturnStatement(2241)", "Delete Block(2242)", "Delete Modifier: private(2790)", "Delete Modifier: transient(2791)", "Delete SimpleName: Multiset(2792)", "Delete SimpleType: Multiset(2793)", "Delete SimpleName: K(2794)", "Delete SimpleType: K(2795)", "Delete ParameterizedType: Multiset<K>(2796)", "Delete SimpleName: keys(2797)", "Delete VariableDeclarationFragment(2798)", "Delete FieldDeclaration(2799)", "Delete Modifier: public(2802)", "Delete SimpleName: Multiset(2803)", "Delete SimpleType: Multiset(2804)", "Delete SimpleName: K(2805)", "Delete SimpleType: K(2806)", "Delete ParameterizedType: Multiset<K>(2807)", "Delete SimpleName: keys(2808)", "Delete SimpleName: Multiset(2809)", "Delete SimpleType: Multiset(2810)", "Delete SimpleName: K(2811)", "Delete SimpleType: K(2812)", "Delete ParameterizedType: Multiset<K>(2813)", "Delete SimpleName: result(2814)", "Delete SimpleName: keys(2815)", "Delete VariableDeclarationFragment(2816)", "Delete VariableDeclarationStatement(2817)", "Delete SimpleName: result(2818)", "Delete NullLiteral(2819)", "Delete InfixExpression: ==(2820)", "Delete SimpleName: keys(2821)", "Delete SimpleName: result(2822)", "Delete SimpleName: MultisetView(2823)", "Delete SimpleType: MultisetView(2824)", "Delete ClassInstanceCreation(2825)", "Delete Assignment: =(2826)", "Delete Assignment: =(2827)", "Delete ExpressionStatement(2828)", "Delete Block(2829)", "Delete IfStatement(2830)", "Delete SimpleName: result(2831)", "Delete ReturnStatement(2832)", "Delete Block(2833)", "Delete MethodDeclaration(2834)", "Delete Modifier: private(2835)", "Delete SimpleName: MultisetView(2836)", "Delete SimpleName: AbstractMultiset(2837)", "Delete SimpleType: AbstractMultiset(2838)", "Delete SimpleName: K(2839)", "Delete SimpleType: K(2840)", "Delete ParameterizedType: AbstractMultiset<K>(2841)", "Delete SimpleName: Override(2842)", "Delete MarkerAnnotation(2843)", "Delete Modifier: public(2844)", "Delete PrimitiveType: int(2845)", "Delete SimpleName: size(2846)", "Delete SimpleName: size(2847)", "Delete ReturnStatement(2848)", "Delete Block(2849)", "Delete MethodDeclaration(2850)", "Delete Modifier: public(2853)", "Delete PrimitiveType: int(2854)", "Delete SimpleName: count(2855)", "Delete SimpleName: Object(2856)", "Delete SimpleType: Object(2857)", "Delete SimpleName: element(2858)", "Delete SingleVariableDeclaration(2859)", "Delete SimpleName: KeyList(2860)", "Delete SimpleType: KeyList(2861)", "Delete SimpleName: K(2862)", "Delete SimpleType: K(2863)", "Delete ParameterizedType: KeyList<K,V>(2866)", "Delete SimpleName: keyList(2867)", "Delete SimpleName: keyToKeyList(2868)", "Delete SimpleName: get(2869)", "Delete SimpleName: element(2870)", "Delete MethodInvocation(2871)", "Delete VariableDeclarationFragment(2872)", "Delete VariableDeclarationStatement(2873)", "Delete SimpleName: keyList(2874)", "Delete NullLiteral(2875)", "Delete InfixExpression: ==(2876)", "Delete ParenthesizedExpression(2877)", "Delete NumberLiteral: 0(2878)", "Delete QualifiedName: keyList.count(2879)", "Delete ConditionalExpression(2880)", "Delete ReturnStatement(2881)", "Delete Block(2882)", "Delete MethodDeclaration(2883)", "Delete SimpleName: Entry(2888)", "Delete SimpleType: Entry(2889)", "Delete SimpleName: K(2890)", "Delete SimpleType: K(2891)", "Delete ParameterizedType: Entry<K>(2892)", "Delete ParameterizedType: Iterator<Entry<K>>(2893)", "Delete SimpleName: entryIterator(2894)", "Delete SimpleName: TransformedIterator(2895)", "Delete SimpleType: TransformedIterator(2896)", "Delete SimpleName: K(2897)", "Delete SimpleType: K(2898)", "Delete SimpleName: Entry(2899)", "Delete SimpleType: Entry(2900)", "Delete SimpleName: K(2901)", "Delete SimpleType: K(2902)", "Delete ParameterizedType: Entry<K>(2903)", "Delete ParameterizedType: TransformedIterator<K,Entry<K>>(2904)", "Delete SimpleName: DistinctKeyIterator(2905)", "Delete SimpleType: DistinctKeyIterator(2906)", "Delete ClassInstanceCreation(2907)", "Delete SimpleName: Override(2908)", "Delete MarkerAnnotation(2909)", "Delete SimpleName: Entry(2910)", "Delete SimpleType: Entry(2911)", "Delete SimpleName: K(2912)", "Delete SimpleType: K(2913)", "Delete ParameterizedType: Entry<K>(2914)", "Delete SimpleName: transform(2915)", "Delete Modifier: final(2916)", "Delete SimpleName: K(2917)", "Delete SimpleType: K(2918)", "Delete SimpleName: key(2919)", "Delete SingleVariableDeclaration(2920)", "Delete QualifiedName: Multisets.AbstractEntry(2921)", "Delete SimpleType: Multisets.AbstractEntry(2922)", "Delete SimpleName: K(2923)", "Delete SimpleType: K(2924)", "Delete ParameterizedType: Multisets.AbstractEntry<K>(2925)", "Delete Modifier: public(2928)", "Delete SimpleName: getElement(2931)", "Delete MethodDeclaration(2935)", "Delete SimpleName: Override(2936)", "Delete MarkerAnnotation(2937)", "Delete Modifier: public(2938)", "Delete PrimitiveType: int(2939)", "Delete SimpleName: getCount(2940)", "Delete SimpleName: keyToKeyList(2941)", "Delete SimpleName: get(2942)", "Delete SimpleName: key(2943)", "Delete MethodInvocation(2944)", "Delete SimpleName: count(2945)", "Delete FieldAccess(2946)", "Delete ReturnStatement(2947)", "Delete Block(2948)", "Delete MethodDeclaration(2949)", "Delete AnonymousClassDeclaration(2950)", "Delete ClassInstanceCreation(2951)", "Delete ReturnStatement(2952)", "Delete Block(2953)", "Delete MethodDeclaration(2954)", "Delete AnonymousClassDeclaration(2955)", "Delete ClassInstanceCreation(2956)", "Delete ReturnStatement(2957)", "Delete Block(2958)", "Delete MethodDeclaration(2959)", "Delete SimpleName: Override(2960)", "Delete MarkerAnnotation(2961)", "Delete PrimitiveType: int(2962)", "Delete SimpleName: distinctElements(2963)", "Delete SimpleName: elementSet(2964)", "Delete MethodInvocation(2965)", "Delete SimpleName: size(2966)", "Delete MethodInvocation(2967)", "Delete ReturnStatement(2968)", "Delete Block(2969)", "Delete MethodDeclaration(2970)", "Delete SimpleName: Override(2971)", "Delete MarkerAnnotation(2972)", "Delete Modifier: public(2973)", "Delete SimpleName: Iterator(2974)", "Delete SimpleType: Iterator(2975)", "Delete SimpleName: K(2976)", "Delete SimpleType: K(2977)", "Delete ParameterizedType: Iterator<K>(2978)", "Delete SimpleName: iterator(2979)", "Delete SimpleName: TransformedIterator(2980)", "Delete SimpleType: TransformedIterator(2981)", "Delete SimpleName: Node(2982)", "Delete SimpleType: Node(2983)", "Delete SimpleName: K(2984)", "Delete SimpleType: K(2985)", "Delete SimpleName: V(2986)", "Delete SimpleType: V(2987)", "Delete ParameterizedType: Node<K,V>(2988)", "Delete SimpleName: K(2989)", "Delete SimpleType: K(2990)", "Delete ParameterizedType: TransformedIterator<Node<K,V>,K>(2991)", "Delete SimpleName: NodeIterator(2992)", "Delete SimpleType: NodeIterator(2993)", "Delete ClassInstanceCreation(2994)", "Delete SimpleName: Override(2995)", "Delete MarkerAnnotation(2996)", "Delete SimpleName: K(2997)", "Delete SimpleType: K(2998)", "Delete SimpleName: transform(2999)", "Delete SimpleName: Node(3000)", "Delete SimpleType: Node(3001)", "Delete SimpleName: K(3002)", "Delete SimpleType: K(3003)", "Delete SimpleName: V(3004)", "Delete SimpleType: V(3005)", "Delete ParameterizedType: Node<K,V>(3006)", "Delete SimpleName: node(3007)", "Delete SingleVariableDeclaration(3008)", "Delete QualifiedName: node.key(3009)", "Delete ReturnStatement(3010)", "Delete Block(3011)", "Delete MethodDeclaration(3012)", "Delete AnonymousClassDeclaration(3013)", "Delete ClassInstanceCreation(3014)", "Delete ReturnStatement(3015)", "Delete Block(3016)", "Delete MethodDeclaration(3017)", "Delete SimpleName: Override(3018)", "Delete MarkerAnnotation(3019)", "Delete Modifier: public(3020)", "Delete PrimitiveType: int(3021)", "Delete SimpleName: remove(3022)", "Delete SimpleName: Nullable(3023)", "Delete MarkerAnnotation(3024)", "Delete SimpleName: Object(3025)", "Delete SimpleType: Object(3026)", "Delete SimpleName: key(3027)", "Delete SingleVariableDeclaration(3028)", "Delete PrimitiveType: int(3029)", "Delete SimpleName: occurrences(3030)", "Delete SingleVariableDeclaration(3031)", "Delete SimpleName: checkArgument(3032)", "Delete SimpleName: occurrences(3033)", "Delete NumberLiteral: 0(3034)", "Delete InfixExpression: >=(3035)", "Delete MethodInvocation(3036)", "Delete ExpressionStatement(3037)", "Delete PrimitiveType: int(3038)", "Delete SimpleName: oldCount(3039)", "Delete SimpleName: count(3040)", "Delete SimpleName: key(3041)", "Delete MethodInvocation(3042)", "Delete VariableDeclarationFragment(3043)", "Delete VariableDeclarationStatement(3044)", "Delete SimpleName: Iterator(3045)", "Delete SimpleType: Iterator(3046)", "Delete SimpleName: V(3047)", "Delete SimpleType: V(3048)", "Delete ParameterizedType: Iterator<V>(3049)", "Delete SimpleName: values(3050)", "Delete SimpleName: ValueForKeyIterator(3051)", "Delete SimpleType: ValueForKeyIterator(3052)", "Delete SimpleName: key(3053)", "Delete ClassInstanceCreation(3054)", "Delete VariableDeclarationFragment(3055)", "Delete VariableDeclarationStatement(3056)", "Delete SimpleName: occurrences(3057)", "Delete PostfixExpression: --(3058)", "Delete NumberLiteral: 0(3059)", "Delete InfixExpression: >(3060)", "Delete ParenthesizedExpression(3061)", "Delete SimpleName: values(3062)", "Delete SimpleName: hasNext(3063)", "Delete MethodInvocation(3064)", "Delete InfixExpression: &&(3065)", "Delete SimpleName: values(3066)", "Delete SimpleName: next(3067)", "Delete MethodInvocation(3068)", "Delete ExpressionStatement(3069)", "Delete SimpleName: values(3070)", "Delete SimpleName: remove(3071)", "Delete MethodInvocation(3072)", "Delete ExpressionStatement(3073)", "Delete Block(3074)", "Delete WhileStatement(3075)", "Delete SimpleName: oldCount(3076)", "Delete ReturnStatement(3077)", "Delete Block(3078)", "Delete MethodDeclaration(3079)", "Delete SimpleName: Override(3080)", "Delete MarkerAnnotation(3081)", "Delete Modifier: public(3082)", "Delete SimpleName: Set(3083)", "Delete SimpleType: Set(3084)", "Delete SimpleName: K(3085)", "Delete SimpleType: K(3086)", "Delete ParameterizedType: Set<K>(3087)", "Delete SimpleName: elementSet(3088)", "Delete SimpleName: keySet(3089)", "Delete MethodInvocation(3090)", "Delete ReturnStatement(3091)", "Delete Block(3092)", "Delete MethodDeclaration(3093)", "Delete TypeDeclaration: class(3094)", "Delete Modifier: private(3095)", "Delete Modifier: transient(3096)", "Delete SimpleName: valuesList(3102)", "Delete VariableDeclarationFragment(3103)", "Delete FieldDeclaration(3104)", "Delete Modifier: public(3122)", "Delete SimpleName: Override(3157)", "Delete MarkerAnnotation(3158)", "Delete SimpleName: Node(3181)", "Delete SimpleType: Node(3182)", "Delete SimpleName: K(3183)", "Delete SimpleType: K(3184)", "Delete SimpleName: V(3185)", "Delete SimpleType: V(3186)", "Delete ParameterizedType: Node<K,V>(3187)", "Delete SimpleName: V(3188)", "Delete SimpleType: V(3189)", "Delete SimpleName: Override(3192)", "Delete MarkerAnnotation(3193)", "Delete SimpleName: V(3194)", "Delete SimpleType: V(3195)", "Delete SimpleName: Node(3197)", "Delete SimpleType: Node(3198)", "Delete SimpleName: K(3199)", "Delete SimpleType: K(3200)", "Delete SimpleName: V(3201)", "Delete SimpleType: V(3202)", "Delete ParameterizedType: Node<K,V>(3203)", "Delete SimpleName: node(3204)", "Delete QualifiedName: node.value(3206)", "Delete SimpleName: Override(3210)", "Delete MarkerAnnotation(3211)", "Delete SimpleName: result(3134)", "Delete SimpleName: valuesList(3135)", "Delete VariableDeclarationFragment(3136)", "Delete VariableDeclarationStatement(3137)", "Delete SimpleName: result(3138)", "Delete NullLiteral(3139)", "Delete InfixExpression: ==(3140)", "Delete SimpleName: valuesList(3141)", "Delete SimpleName: result(3142)", "Delete ClassInstanceCreation(3232)", "Delete Assignment: =(3233)", "Delete Assignment: =(3234)", "Delete ExpressionStatement(3235)", "Delete Block(3236)", "Delete IfStatement(3237)", "Delete SimpleName: result(3238)", "Delete ReturnStatement(3239)", "Delete Block(3240)", "Delete SimpleName: V(3303)", "Delete SimpleType: V(3304)", "Delete SimpleName: oldValue(3305)", "Delete QualifiedName: node.value(3306)", "Delete VariableDeclarationFragment(3307)", "Delete VariableDeclarationStatement(3308)", "Delete QualifiedName: node.value(3309)", "Delete SimpleName: value(3310)", "Delete Assignment: =(3311)", "Delete ExpressionStatement(3312)", "Delete SimpleName: oldValue(3313)", "Delete Modifier: private(3242)", "Delete Modifier: static(3243)", "Delete SimpleName: K(3244)", "Delete TypeParameter(3245)", "Delete SimpleName: V(3246)", "Delete TypeParameter(3247)", "Delete SimpleName: createEntry(3255)", "Delete Modifier: final(3256)", "Delete SimpleName: Node(3257)", "Delete SimpleType: Node(3258)", "Delete SimpleName: K(3259)", "Delete SimpleType: K(3260)", "Delete SimpleName: V(3261)", "Delete SimpleType: V(3262)", "Delete ParameterizedType: Node<K,V>(3263)", "Delete SimpleName: node(3264)", "Delete SingleVariableDeclaration(3265)", "Delete SimpleName: Override(3273)", "Delete MarkerAnnotation(3274)", "Delete Modifier: public(3275)", "Delete SimpleName: K(3276)", "Delete SimpleType: K(3277)", "Delete SimpleName: getKey(3278)", "Delete QualifiedName: node.key(3279)", "Delete ReturnStatement(3280)", "Delete Block(3281)", "Delete MethodDeclaration(3282)", "Delete SimpleName: Override(3283)", "Delete MarkerAnnotation(3284)", "Delete Modifier: public(3285)", "Delete SimpleName: V(3286)", "Delete SimpleType: V(3287)", "Delete SimpleName: getValue(3288)", "Delete QualifiedName: node.value(3289)", "Delete ReturnStatement(3290)", "Delete Block(3291)", "Delete MethodDeclaration(3292)", "Delete SimpleName: Override(3293)", "Delete MarkerAnnotation(3294)", "Delete SimpleName: V(3296)", "Delete SimpleType: V(3297)", "Delete SimpleName: setValue(3298)", "Delete SimpleName: V(3299)", "Delete SimpleType: V(3300)", "Delete SimpleName: value(3301)", "Delete SingleVariableDeclaration(3302)", "Delete MethodDeclaration(3316)", "Delete AnonymousClassDeclaration(3317)", "Delete ClassInstanceCreation(3318)", "Delete ReturnStatement(3319)", "Delete Block(3320)", "Delete MethodDeclaration(3321)", "Delete Modifier: private(3322)", "Delete Modifier: transient(3323)", "Delete SimpleName: entries(3334)", "Delete VariableDeclarationFragment(3335)", "Delete FieldDeclaration(3336)", "Delete Modifier: public(3384)", "Delete SimpleName: Override(3434)", "Delete MarkerAnnotation(3435)", "Delete SimpleName: createEntry(3491)", "Delete SimpleName: node(3492)", "Delete MethodInvocation(3493)", "Delete SimpleName: TransformedListIterator(3451)", "Delete SimpleType: TransformedListIterator(3452)", "Delete SimpleName: Node(3453)", "Delete SimpleType: Node(3454)", "Delete SimpleName: K(3455)", "Delete SimpleType: K(3456)", "Delete SimpleName: V(3457)", "Delete SimpleType: V(3458)", "Delete ParameterizedType: Node<K,V>(3459)", "Delete ParameterizedType: TransformedListIterator<Node<K,V>,Entry<K,V>>(3467)", "Delete SimpleName: Override(3472)", "Delete MarkerAnnotation(3473)", "Delete SimpleName: transform(3481)", "Delete SimpleName: Node(3482)", "Delete SimpleType: Node(3483)", "Delete SimpleName: K(3484)", "Delete SimpleType: K(3485)", "Delete SimpleName: V(3486)", "Delete SimpleType: V(3487)", "Delete ParameterizedType: Node<K,V>(3488)", "Delete SimpleName: node(3489)", "Delete SingleVariableDeclaration(3490)", "Delete MethodDeclaration(3496)", "Delete AnonymousClassDeclaration(3497)", "Delete ClassInstanceCreation(3498)", "Delete ReturnStatement(3499)", "Delete Block(3500)", "Delete SimpleName: result(3406)", "Delete SimpleName: entries(3407)", "Delete VariableDeclarationFragment(3408)", "Delete VariableDeclarationStatement(3409)", "Delete SimpleName: result(3410)", "Delete NullLiteral(3411)", "Delete InfixExpression: ==(3412)", "Delete SimpleName: entries(3413)", "Delete SimpleName: result(3414)", "Delete ClassInstanceCreation(3503)", "Delete Assignment: =(3504)", "Delete Assignment: =(3505)", "Delete ExpressionStatement(3506)", "Delete Block(3507)", "Delete IfStatement(3508)", "Delete SimpleName: result(3509)", "Delete ReturnStatement(3510)", "Delete Block(3511)", "Delete Modifier: private(3513)", "Delete Modifier: transient(3514)", "Delete SimpleName: Map(3515)", "Delete SimpleType: Map(3516)", "Delete SimpleName: K(3517)", "Delete SimpleType: K(3518)", "Delete SimpleName: Collection(3519)", "Delete SimpleType: Collection(3520)", "Delete SimpleName: V(3521)", "Delete SimpleType: V(3522)", "Delete ParameterizedType: Collection<V>(3523)", "Delete ParameterizedType: Map<K,Collection<V>>(3524)", "Delete SimpleName: map(3525)", "Delete VariableDeclarationFragment(3526)", "Delete FieldDeclaration(3527)", "Delete Modifier: public(3530)", "Delete SimpleName: map(3559)", "Delete SimpleName: result(3560)", "Delete Assignment: =(3695)", "Delete Assignment: =(3696)", "Delete ExpressionStatement(3697)", "Delete SimpleName: Map(3542)", "Delete SimpleType: Map(3543)", "Delete SimpleName: K(3544)", "Delete SimpleType: K(3545)", "Delete SimpleName: Collection(3546)", "Delete SimpleType: Collection(3547)", "Delete SimpleName: V(3548)", "Delete SimpleType: V(3549)", "Delete ParameterizedType: Collection<V>(3550)", "Delete ParameterizedType: Map<K,Collection<V>>(3551)", "Delete SimpleName: result(3552)", "Delete SimpleName: map(3553)", "Delete VariableDeclarationFragment(3554)", "Delete VariableDeclarationStatement(3555)", "Delete SimpleName: result(3556)", "Delete NullLiteral(3557)", "Delete InfixExpression: ==(3558)", "Delete IfStatement(3699)", "Delete SimpleName: result(3700)", "Delete ReturnStatement(3701)", "Delete Block(3702)", "Delete TextElement: Compares the specified object to this multimap for equality.(3704)", "Delete TextElement: <p>Two (3705)", "Delete TextElement:  ListMultimap(3706)", "Delete TagElement: @code(3707)", "Delete TextElement:  instances are equal if, for each key, they(3708)", "Delete TextElement: contain the same values in the same order. If the value orderings disagree,(3709)", "Delete TextElement: the multimaps will not be considered equal.(3710)", "Delete TagElement(3711)", "Delete Javadoc(3712)", "Delete SimpleName: Override(3713)", "Delete MarkerAnnotation(3714)", "Delete Modifier: public(3715)", "Delete PrimitiveType: boolean(3716)", "Delete SimpleName: equals(3717)", "Delete SimpleName: Nullable(3718)", "Delete MarkerAnnotation(3719)", "Delete SimpleName: Object(3720)", "Delete SimpleType: Object(3721)", "Delete SimpleName: other(3722)", "Delete SingleVariableDeclaration(3723)", "Delete SimpleName: other(3724)", "Delete ThisExpression(3725)", "Delete InfixExpression: ==(3726)", "Delete BooleanLiteral: true(3727)", "Delete ReturnStatement(3728)", "Delete Block(3729)", "Delete IfStatement(3730)", "Delete SimpleName: other(3731)", "Delete SimpleName: Multimap(3732)", "Delete SimpleType: Multimap(3733)", "Delete InstanceofExpression(3734)", "Delete SimpleType: Multimap(3736)", "Delete WildcardType: ?(3737)", "Delete WildcardType: ?(3738)", "Delete ParameterizedType: Multimap<?,?>(3739)", "Delete SimpleName: that(3740)", "Delete SimpleName: Multimap(3741)", "Delete SimpleType: Multimap(3742)", "Delete WildcardType: ?(3743)", "Delete WildcardType: ?(3744)", "Delete ParameterizedType: Multimap<?,?>(3745)", "Delete SimpleName: other(3746)", "Delete CastExpression(3747)", "Delete VariableDeclarationFragment(3748)", "Delete VariableDeclarationStatement(3749)", "Delete ThisExpression(3750)", "Delete SimpleName: asMap(3751)", "Delete MethodInvocation(3752)", "Delete SimpleName: equals(3753)", "Delete SimpleName: that(3754)", "Delete SimpleName: asMap(3755)", "Delete MethodInvocation(3756)", "Delete MethodInvocation(3757)", "Delete ReturnStatement(3758)", "Delete Block(3759)", "Delete IfStatement(3760)", "Delete BooleanLiteral: false(3761)", "Delete ReturnStatement(3762)", "Delete Block(3763)", "Delete MethodDeclaration(3764)", "Delete TextElement: Returns the hash code for this multimap.(3765)", "Delete TextElement: <p>The hash code of a multimap is defined as the hash code of the map view,(3766)", "Delete TextElement: as returned by (3767)", "Delete SimpleName: Multimap(3768)", "Delete SimpleName: asMap(3769)", "Delete MemberRef(3770)", "Delete TagElement: @link(3771)", "Delete TextElement: .(3772)", "Delete TagElement(3773)", "Delete Javadoc(3774)", "Delete SimpleName: Override(3775)", "Delete MarkerAnnotation(3776)", "Delete Modifier: public(3777)", "Delete PrimitiveType: int(3778)", "Delete SimpleName: hashCode(3779)", "Delete SimpleName: asMap(3780)", "Delete MethodInvocation(3781)", "Delete SimpleName: hashCode(3782)", "Delete MethodInvocation(3783)", "Delete ReturnStatement(3784)", "Delete Block(3785)", "Delete MethodDeclaration(3786)", "Delete TextElement: Returns a string representation of the multimap, generated by calling(3787)", "Delete TextElement:  toString(3788)", "Delete TagElement: @code(3789)", "Delete TextElement:  on the map returned by (3790)", "Delete SimpleName: Multimap(3791)", "Delete SimpleName: asMap(3792)", "Delete MemberRef(3793)", "Delete TagElement: @link(3794)", "Delete TextElement: .(3795)", "Delete TagElement(3796)", "Delete TextElement:  a string representation of the multimap(3797)", "Delete TagElement: @return(3798)", "Delete Javadoc(3799)", "Delete SimpleName: Override(3800)", "Delete MarkerAnnotation(3801)", "Delete Modifier: public(3802)", "Delete SimpleName: String(3803)", "Delete SimpleType: String(3804)", "Delete SimpleName: toString(3805)", "Delete SimpleName: asMap(3806)", "Delete MethodInvocation(3807)", "Delete SimpleName: toString(3808)", "Delete MethodInvocation(3809)", "Delete ReturnStatement(3810)", "Delete Block(3811)", "Delete MethodDeclaration(3812)"]}}, {"LinkedListMultimap_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 44"]}, {"root": "UPDATE from com.google.common.base.Preconditions.checkArgument to com.google.common.base.Preconditions.checkPositionIndex", "operations": ["UPD QualifiedName: com.google.common.base.Preconditions.checkArgument from com.google.common.base.Preconditions.checkArgument to com.google.common.base.Preconditions.checkPositionIndex"]}, {"root": "INS ParameterizedType: AbstractMultimap<K,V> to TypeDeclaration: class at 6", "operations": ["INS ParameterizedType: AbstractMultimap<K,V> to TypeDeclaration: class at 6", "INS SimpleName: AbstractMultimap to SimpleType: AbstractMultimap at 0", "INS SimpleType: AbstractMultimap to ParameterizedType: AbstractMultimap<K,V> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 50", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 50", "INS SimpleName: entries to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 54", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 54", "INS Block to MethodDeclaration at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: AssertionError to ClassInstanceCreation at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: entryIterator to MethodDeclaration at 2", "INS ParameterizedType: Iterator<Entry<K,V>> to MethodDeclaration at 1", "INS StringLiteral: \"should never be called\" to ClassInstanceCreation at 1"]}, {"root": "MOVE from ParameterizedType: AbstractMultimap<K,V>", "operations": ["MOV SimpleType: K to ParameterizedType: AbstractMultimap<K,V> at 1"]}, {"root": "MOVE from ParameterizedType: AbstractMultimap<K,V>", "operations": ["MOV SimpleType: V to ParameterizedType: AbstractMultimap<K,V> at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV ParameterizedType: AbstractMapEntry<K,V> to TypeDeclaration: class at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: getValue to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: value to ReturnStatement at 0", "INS SimpleName: V to SimpleType: V at 0", "INS SimpleType: V to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 15"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: setValue to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: newValue to Assignment: = at 1", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleName: value to FieldAccess at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: V to SimpleType: V at 0", "INS SimpleType: V to MethodDeclaration at 2", "INS FieldAccess to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: newValue to SingleVariableDeclaration at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: value to VariableDeclarationFragment at 1", "INS SimpleName: result to VariableDeclarationFragment at 0"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "UPDATE from ListIterator<Node<K,V>> to ListIterator<Entry<K,V>>", "operations": ["UPD ParameterizedType: ListIterator<Node<K,V>> from ListIterator<Node<K,V>> to ListIterator<Entry<K,V>>"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: contains to MethodInvocation at 1"]}, {"root": "UPDATE from keySet to createKeySet", "operations": ["UPD SimpleName: keySet from keySet to createKeySet"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 1", "MOV Javadoc to MethodDeclaration at 0", "MOV ParameterizedType: List<V> to MethodDeclaration at 4"]}, {"root": "INS SimpleName: values to MethodDeclaration at 5", "operations": ["INS SimpleName: values to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: values to SuperMethodInvocation at 0", "INS SuperMethodInvocation to CastExpression at 1", "INS ReturnStatement to Block at 0", "INS CastExpression to ReturnStatement at 0", "INS Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<V> to MethodDeclaration at 1"]}, {"root": "UPDATE from values to createValues", "operations": ["UPD SimpleName: values from values to createValues"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4", "INS ClassInstanceCreation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV MarkerAnnotation to MethodDeclaration at 1", "MOV ParameterizedType: List<Entry<K,V>> to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 2", "MOV Block to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<Entry<K,V>> to MethodDeclaration at 1"]}, {"root": "UPDATE from entries to createEntries", "operations": ["UPD SimpleName: entries from entries to createEntries"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from asMap to createAsMap", "operations": ["UPD SimpleName: asMap from asMap to createAsMap"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from String to K", "operations": ["UPD SimpleName: String from String to K", "UPD SimpleType: String from String to K"]}, {"root": "UPDATE from toString to getKey", "operations": ["UPD SimpleName: toString from toString to getKey"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from Node<K,V> to Entry<K,V>", "operations": ["UPD ParameterizedType: Node<K,V> from Node<K,V> to Entry<K,V>", "UPD ParameterizedType: Node<K,V> from Node<K,V> to Entry<K,V>", "UPD ParameterizedType: Node<K,V> from Node<K,V> to Entry<K,V>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "MOVE from ParameterizedType: Iterator<Entry<K,V>>", "operations": ["MOV SimpleType: Iterator to ParameterizedType: Iterator<Entry<K,V>> at 0"]}, {"root": "MOVE from ParameterizedType: Iterator<Entry<K,V>>", "operations": ["MOV ParameterizedType: Entry<K,V> to ParameterizedType: Iterator<Entry<K,V>> at 1", "MOV Block to MethodDeclaration at 6"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: V to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from Node to Entry", "operations": ["UPD SimpleName: Node from Node to Entry", "UPD SimpleType: Node from Node to Entry", "UPD SimpleName: Node from Node to Entry", "UPD SimpleType: Node from Node to Entry", "UPD SimpleType: Node from Node to Entry", "UPD SimpleName: Node from Node to Entry"]}, {"root": "INS SimpleType: K to ParameterizedType: Node<K,V> at 1", "operations": ["INS SimpleType: K to ParameterizedType: Node<K,V> at 1", "INS SimpleName: K to SimpleType: K at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "INS CastExpression to ReturnStatement at 0", "operations": ["INS SimpleName: entries to SuperMethodInvocation at 0", "INS SuperMethodInvocation to CastExpression at 1", "INS CastExpression to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: V to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from i to Iterators", "operations": ["UPD SimpleName: i from i to Iterators"]}, {"root": "UPDATE from next to clear", "operations": ["UPD SimpleName: next from next to clear"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "INS SimpleType: V to ParameterizedType: Node<K,V> at 2", "operations": ["INS SimpleType: V to ParameterizedType: Node<K,V> at 2", "INS SimpleName: V to SimpleType: V at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 2"]}, {"root": "MOVE from CastExpression", "operations": ["MOV ParameterizedType: List<V> to CastExpression at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV AnonymousClassDeclaration to ClassInstanceCreation at 1", "MOV ParameterizedType: AbstractSequentialList<V> to ClassInstanceCreation at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV ParameterizedType: List<Entry<K,V>> to CastExpression at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: AbstractSequentialList<Entry<K,V>> to ClassInstanceCreation at 0", "MOV AnonymousClassDeclaration to ClassInstanceCreation at 1"]}, {"root": "UPDATE from i to values", "operations": ["UPD SimpleName: i from i to values"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: i to MethodInvocation at 0"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "UPDATE from Multimap to AssertionError", "operations": ["UPD SimpleName: Multimap from Multimap to AssertionError"]}, {"root": "MOVE from SimpleType: AssertionError", "operations": ["MOV SimpleName: Multimap to SimpleType: AssertionError at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "UPDATE from nodes to nodeItr", "operations": ["UPD SimpleName: nodes from nodes to nodeItr", "UPD SimpleName: nodes from nodes to nodeItr", "UPD SimpleName: nodes from nodes to nodeItr"]}, {"root": "UPDATE from TransformedListIterator<Node<K,V>,V> to TransformedListIterator<Entry<K,V>,V>", "operations": ["UPD ParameterizedType: TransformedListIterator<Node<K,V>,V> from TransformedListIterator<Node<K,V>,V> to TransformedListIterator<Entry<K,V>,V>"]}, {"root": "MOVE from ParameterizedType: TransformedListIterator<Node<K,V>,V>", "operations": ["MOV ParameterizedType: Entry<K,V> to ParameterizedType: TransformedListIterator<Node<K,V>,V> at 1"]}, {"root": "MOVE from ParameterizedType: TransformedListIterator<Node<K,V>,V>", "operations": ["MOV SimpleType: V to ParameterizedType: TransformedListIterator<Node<K,V>,V> at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: V to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV ParameterizedType: Entry<K,V> to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: entry to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: entry to SingleVariableDeclaration at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Objects"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL SimpleName: value", "DEL StringLiteral: \"=\"", "DEL SimpleName: key", "DEL InfixExpression: +"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: hasNext", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL VariableDeclarationExpression", "DEL ForStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: remove", "DEL Block", "DEL Block", "DEL SimpleType: Iterator", "DEL ParameterizedType: Iterator<V>", "DEL SimpleName: i"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: next", "DEL SimpleName: NodeIterator", "DEL MethodDeclaration", "DEL SimpleName: head"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: Node", "DEL FieldAccess", "DEL SimpleName: Node", "DEL BooleanLiteral: false", "DEL SimpleName: i", "DEL SimpleName: Objects", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL Block", "DEL ParameterizedType: Iterator<Node<K,V>>", "DEL SimpleName: V", "DEL Block", "DEL SimpleName: Iterator", "DEL SimpleName: i", "DEL SimpleName: NodeIterator", "DEL IfStatement", "DEL SimpleName: next", "DEL SimpleType: Iterator", "DEL MethodInvocation", "DEL SimpleName: K", "DEL Block", "DEL SimpleType: NodeIterator", "DEL ReturnStatement", "DEL VariableDeclarationExpression", "DEL ParameterizedType: Node<K,V>", "DEL ReturnStatement", "DEL ForStatement", "DEL SimpleName: value", "DEL SimpleName: equal", "DEL SimpleType: V"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Object", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SimpleName: Nullable", "DEL SimpleName: containsEntry", "DEL SingleVariableDeclaration", "DEL Block", "DEL BooleanLiteral: false", "DEL ClassInstanceCreation", "DEL BooleanLiteral: true", "DEL SimpleName: ValueForKeyIterator", "DEL SimpleType: ValueForKeyIterator", "DEL SimpleName: hasNext", "DEL SimpleName: equal", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleName: Iterator", "DEL ForStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: value", "DEL MarkerAnnotation", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: i", "DEL Modifier: public", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: next", "DEL MethodInvocation", "DEL SimpleName: Nullable", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL ParameterizedType: Iterator<V>", "DEL SimpleType: Iterator", "DEL SimpleName: Objects", "DEL SimpleName: value", "DEL SimpleName: i", "DEL Block", "DEL PrimitiveType: boolean", "DEL IfStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: key", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL SimpleName: changed", "DEL ParameterizedType: Iterable<? extends V>", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: false", "DEL Modifier: public", "DEL SimpleName: K", "DEL SimpleName: Iterable", "DEL SimpleName: value", "DEL SimpleName: put", "DEL SimpleName: putAll", "DEL SimpleName: values", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends V", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleType: Iterable", "DEL SimpleType: V", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: values", "DEL SimpleName: key", "DEL SimpleName: V", "DEL Assignment: |=", "DEL SimpleName: changed", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: changed", "DEL SimpleName: value", "DEL SimpleType: K", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: entries", "DEL WildcardType: ? extends K", "DEL SimpleName: V", "DEL BooleanLiteral: false", "DEL SimpleName: entry", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: Multimap", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends V", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleType: V", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: putAll", "DEL WildcardType: ? extends K", "DEL SimpleType: K", "DEL SimpleName: put", "DEL VariableDeclarationStatement", "DEL SimpleName: Multimap", "DEL SimpleName: changed", "DEL SimpleName: Entry", "DEL SimpleName: K", "DEL SimpleName: getKey", "DEL WildcardType: ? extends V", "DEL SingleVariableDeclaration", "DEL SimpleName: multimap", "DEL Assignment: |=", "DEL SimpleName: changed", "DEL SimpleName: K", "DEL SimpleName: multimap", "DEL Block", "DEL ParameterizedType: Entry<? extends K,? extends V>", "DEL SimpleName: entry", "DEL ParameterizedType: Multimap<? extends K,? extends V>", "DEL Block", "DEL SimpleType: K", "DEL SimpleType: V", "DEL EnhancedForStatement", "DEL ReturnStatement", "DEL SimpleName: changed", "DEL PrimitiveType: boolean", "DEL SimpleType: Entry", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: removeAll", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: c", "DEL SimpleName: removeAll", "DEL SimpleType: Collection", "DEL Block", "DEL ParameterizedType: Collection<?>", "DEL SimpleName: c", "DEL WildcardType: ?", "DEL SimpleName: iterator", "DEL Modifier: public", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Iterators", "DEL SimpleName: Collection", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: iterator", "DEL SimpleName: retainAll", "DEL Block", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL SimpleName: Iterators", "DEL SimpleName: Collection", "DEL ParameterizedType: Collection<?>", "DEL SimpleType: Collection", "DEL SimpleName: retainAll", "DEL MethodInvocation", "DEL ReturnStatement", "DEL WildcardType: ?"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: Set", "DEL ParameterizedType: Set<K>", "DEL SimpleType: Set", "DEL SimpleName: keySet", "DEL SimpleName: K", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: transient", "DEL Modifier: private", "DEL SimpleType: K"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: result", "DEL SimpleName: keySet"]}, {"root": "DEL Block", "operations": ["DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: Set", "DEL SimpleName: result", "DEL SimpleName: K", "DEL SimpleType: K", "DEL Block", "DEL ParameterizedType: Set<K>", "DEL SimpleType: Set", "DEL VariableDeclarationStatement", "DEL SimpleName: keySet", "DEL SimpleName: result", "DEL NullLiteral", "DEL IfStatement"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleName: remove", "operations": ["DEL SimpleName: remove"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Nullable", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: key", "DEL SimpleType: Object"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Object", "DEL SimpleName: Nullable", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL MarkerAnnotation"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: next", "DEL SimpleName: equal", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SimpleName: ValueForKeyIterator", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: values", "DEL WhileStatement", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL SimpleName: values", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: Objects", "DEL SimpleType: Iterator", "DEL SimpleType: ValueForKeyIterator", "DEL IfStatement", "DEL Block", "DEL ParameterizedType: Iterator<V>", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: values", "DEL SimpleName: Iterator", "DEL SimpleName: values", "DEL MethodInvocation", "DEL SimpleName: remove"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleType: K", "DEL Modifier: transient", "DEL ParameterizedType: Multiset<K>", "DEL SimpleName: Multiset", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: Multiset", "DEL SimpleName: K", "DEL SimpleName: keys"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleType: Multiset", "DEL SimpleName: result", "DEL SimpleName: keys", "DEL SimpleName: keys", "DEL NullLiteral", "DEL SimpleName: Multiset", "DEL SimpleType: K", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: keys", "DEL SimpleType: MultisetView", "DEL MethodDeclaration", "DEL SimpleType: K", "DEL InfixExpression: ==", "DEL SimpleName: K", "DEL SimpleName: result", "DEL Block", "DEL IfStatement", "DEL ParameterizedType: Multiset<K>", "DEL Assignment: =", "DEL SimpleName: Multiset", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: result", "DEL Assignment: =", "DEL SimpleName: MultisetView", "DEL SimpleType: Multiset", "DEL SimpleName: result", "DEL ParameterizedType: Multiset<K>"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: count", "DEL ClassInstanceCreation", "DEL SimpleType: K", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL InfixExpression: >", "DEL SimpleName: Object", "DEL SimpleName: Node", "DEL SimpleName: remove", "DEL NumberLiteral: 0", "DEL SimpleName: keyList", "DEL SimpleName: transform", "DEL SimpleName: K", "DEL SimpleType: K", "DEL SimpleName: get", "DEL AnonymousClassDeclaration", "DEL SimpleType: V", "DEL PrimitiveType: int", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleType: Node", "DEL MethodDeclaration", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: count", "DEL ParameterizedType: TransformedIterator<Node<K,V>,K>", "DEL ParameterizedType: KeyList<K,V>", "DEL SimpleType: K", "DEL ParameterizedType: Node<K,V>", "DEL ConditionalExpression", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL MarkerAnnotation", "DEL SimpleName: K", "DEL SimpleType: V", "DEL SimpleName: checkArgument", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: TransformedIterator", "DEL ParameterizedType: Entry<K>", "DEL SimpleName: MultisetView", "DEL SimpleName: Node", "DEL QualifiedName: node.key", "DEL SimpleType: K", "DEL MarkerAnnotation", "DEL SimpleName: NodeIterator", "DEL Block", "DEL SimpleName: remove", "DEL SimpleName: size", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL SimpleName: values", "DEL SimpleName: Object", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleName: K", "DEL QualifiedName: Multisets.AbstractEntry", "DEL WhileStatement", "DEL SimpleName: K", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL SimpleName: iterator", "DEL ParameterizedType: TransformedIterator<K,Entry<K>>", "DEL NumberLiteral: 0", "DEL ParameterizedType: Node<K,V>", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Set", "DEL SimpleName: V", "DEL PrimitiveType: int", "DEL PostfixExpression: --", "DEL SimpleType: DistinctKeyIterator", "DEL ParameterizedType: Iterator<Entry<K>>", "DEL SimpleName: TransformedIterator", "DEL ParenthesizedExpression", "DEL QualifiedName: keyList.count", "DEL ParameterizedType: AbstractMultiset<K>", "DEL InfixExpression: &&", "DEL SimpleType: ValueForKeyIterator", "DEL SimpleName: K", "DEL SimpleType: Entry", "DEL SimpleType: NodeIterator", "DEL SimpleName: occurrences", "DEL SimpleName: K", "DEL SimpleType: TransformedIterator", "DEL SimpleName: K", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL SimpleName: occurrences", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: getCount", "DEL ReturnStatement", "DEL SimpleName: elementSet", "DEL SimpleType: K", "DEL PrimitiveType: int", "DEL SimpleName: occurrences", "DEL SimpleType: K", "DEL ReturnStatement", "DEL SimpleType: K", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL ParameterizedType: Entry<K>", "DEL SimpleName: element", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: Override", "DEL SimpleName: Entry", "DEL SimpleName: K", "DEL SimpleName: K", "DEL MethodDeclaration", "DEL SimpleName: K", "DEL Block", "DEL SimpleName: oldCount", "DEL MethodDeclaration", "DEL SimpleName: hasNext", "DEL SimpleName: V", "DEL SimpleName: Entry", "DEL Block", "DEL Block", "DEL SimpleName: Override", "DEL TypeDeclaration: class", "DEL SimpleName: Override", "DEL SimpleName: elementSet", "DEL VariableDeclarationStatement", "DEL SimpleType: K", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: next", "DEL SimpleName: values", "DEL SimpleName: entryIterator", "DEL SimpleName: values", "DEL SimpleName: element", "DEL ReturnStatement", "DEL SimpleName: size", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL SimpleType: Iterator", "DEL AnonymousClassDeclaration", "DEL SimpleName: V", "DEL ParameterizedType: Multisets.AbstractEntry<K>", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL SimpleType: Node", "DEL SimpleName: node", "DEL ReturnStatement", "DEL ParameterizedType: Set<K>", "DEL SimpleName: keyList", "DEL SimpleName: transform", "DEL SimpleName: Nullable", "DEL PrimitiveType: int", "DEL SimpleType: KeyList", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: ValueForKeyIterator", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: Entry", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: distinctElements", "DEL SimpleType: Iterator", "DEL SimpleType: K", "DEL ParameterizedType: Iterator<K>", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SimpleType: K", "DEL SimpleName: TransformedIterator", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleType: V", "DEL SimpleName: Override", "DEL SimpleName: values", "DEL Block", "DEL SimpleName: keySet", "DEL SingleVariableDeclaration", "DEL SimpleType: K", "DEL ReturnStatement", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL SimpleName: get", "DEL SimpleType: Entry", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL FieldAccess", "DEL SimpleName: K", "DEL SimpleName: Iterator", "DEL SimpleType: AbstractMultiset", "DEL SimpleName: AbstractMultiset", "DEL SimpleType: Multisets.AbstractEntry", "DEL SimpleName: count", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: K", "DEL SimpleType: K", "DEL MarkerAnnotation", "DEL SimpleType: Entry", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL ParameterizedType: Entry<K>", "DEL MethodInvocation", "DEL SimpleName: keyToKeyList", "DEL Modifier: public", "DEL SimpleType: K", "DEL SimpleName: size", "DEL InfixExpression: >=", "DEL Modifier: public", "DEL SimpleType: Set", "DEL Modifier: public", "DEL SimpleName: oldCount", "DEL MethodDeclaration", "DEL SimpleName: keyToKeyList", "DEL SimpleName: getElement", "DEL SimpleName: DistinctKeyIterator", "DEL SimpleName: key", "DEL SimpleName: Iterator", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: KeyList", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL ParameterizedType: Iterator<V>", "DEL Block", "DEL SimpleName: key", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: valuesList", "DEL Modifier: transient", "DEL FieldDeclaration", "DEL VariableDeclarationFragment"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL ParameterizedType: Node<K,V>", "operations": ["DEL SimpleType: V", "DEL SimpleName: Node", "DEL SimpleType: K", "DEL SimpleType: Node", "DEL ParameterizedType: Node<K,V>", "DEL SimpleName: K", "DEL SimpleName: V"]}, {"root": "DEL SimpleType: V", "operations": ["DEL SimpleName: V", "DEL SimpleType: V"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL SimpleType: V", "operations": ["DEL SimpleName: V", "DEL SimpleType: V"]}, {"root": "DEL ParameterizedType: Node<K,V>", "operations": ["DEL SimpleName: K", "DEL ParameterizedType: Node<K,V>", "DEL SimpleName: V", "DEL SimpleType: Node", "DEL SimpleType: K", "DEL SimpleName: Node", "DEL SimpleType: V"]}, {"root": "DEL SimpleName: node", "operations": ["DEL SimpleName: node"]}, {"root": "DEL QualifiedName: node.value", "operations": ["DEL QualifiedName: node.value"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL SimpleName: result", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: valuesList", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL SimpleName: result", "DEL SimpleName: valuesList", "DEL Assignment: =", "DEL SimpleName: result", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: result"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: oldValue", "DEL VariableDeclarationFragment", "DEL SimpleType: V", "DEL QualifiedName: node.value", "DEL SimpleName: V"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: value", "DEL Assignment: =", "DEL QualifiedName: node.value", "DEL ExpressionStatement"]}, {"root": "DEL SimpleName: oldValue", "operations": ["DEL SimpleName: oldValue"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SimpleName: V", "DEL Modifier: final", "DEL SimpleType: Node", "DEL MarkerAnnotation", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: getKey", "DEL TypeParameter", "DEL ParameterizedType: Node<K,V>", "DEL SimpleName: Override", "DEL SimpleName: value", "DEL SimpleType: K", "DEL SimpleName: Override", "DEL SimpleType: V", "DEL ReturnStatement", "DEL SimpleName: V", "DEL Modifier: static", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SimpleName: K", "DEL Modifier: public", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL SimpleName: V", "DEL SimpleType: V", "DEL SimpleName: Node", "DEL SimpleName: getValue", "DEL SimpleName: K", "DEL SimpleType: V", "DEL Modifier: private", "DEL QualifiedName: node.key", "DEL SimpleName: K", "DEL TypeParameter", "DEL SimpleName: V", "DEL QualifiedName: node.value", "DEL SimpleType: K", "DEL SimpleName: createEntry", "DEL Modifier: public", "DEL Block", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: setValue", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: entries", "DEL FieldDeclaration", "DEL Modifier: transient"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Override"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: createEntry"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: TransformedListIterator", "DEL SimpleName: Node", "DEL SimpleType: V", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: TransformedListIterator", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SimpleType: K", "DEL SimpleName: V", "DEL SimpleType: K", "DEL SimpleType: V", "DEL SimpleName: K", "DEL ParameterizedType: Node<K,V>", "DEL Block", "DEL ReturnStatement", "DEL ParameterizedType: Node<K,V>", "DEL MethodDeclaration", "DEL SimpleName: V", "DEL ParameterizedType: TransformedListIterator<Node<K,V>,Entry<K,V>>", "DEL SimpleName: Override", "DEL ClassInstanceCreation", "DEL SimpleName: Node", "DEL SimpleName: transform", "DEL SimpleType: Node", "DEL SimpleName: K"]}, {"root": "DEL Block", "operations": ["DEL Assignment: =", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: entries", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL SimpleName: entries", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL Block", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL SimpleName: result", "DEL Block", "DEL SimpleName: result", "DEL ClassInstanceCreation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: V", "DEL SimpleName: map", "DEL SimpleType: V", "DEL SimpleType: Map", "DEL ParameterizedType: Map<K,Collection<V>>", "DEL ParameterizedType: Collection<V>", "DEL SimpleName: K", "DEL FieldDeclaration", "DEL SimpleName: Collection", "DEL VariableDeclarationFragment", "DEL SimpleType: Collection", "DEL SimpleType: K", "DEL Modifier: transient", "DEL SimpleName: Map", "DEL Modifier: private"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: result", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: map", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL SimpleName: result", "DEL SimpleType: Collection", "DEL Block", "DEL SimpleType: K", "DEL ParameterizedType: Map<K,Collection<V>>", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleName: Map", "DEL SimpleName: result", "DEL NullLiteral", "DEL SimpleName: K", "DEL SimpleType: V", "DEL SimpleName: V", "DEL SimpleName: result", "DEL ParameterizedType: Collection<V>", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL SimpleName: map", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Collection"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: contain the same values in the same order. If the value orderings disagree,", "DEL MarkerAnnotation", "DEL SimpleType: Multimap", "DEL SimpleName: other", "DEL IfStatement", "DEL InfixExpression: ==", "DEL ThisExpression", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL SimpleType: Multimap", "DEL TextElement: the multimaps will not be considered equal.", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL SimpleName: Multimap", "DEL SimpleName: asMap", "DEL SimpleName: that", "DEL SimpleName: asMap", "DEL ReturnStatement", "DEL ParameterizedType: Multimap<?,?>", "DEL Block", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL TextElement: Compares the specified object to this multimap for equality.", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL TextElement: <p>Two ", "DEL SimpleName: other", "DEL SimpleName: that", "DEL SimpleType: Multimap", "DEL TextElement:  ListMultimap", "DEL PrimitiveType: boolean", "DEL ThisExpression", "DEL SimpleName: Multimap", "DEL SimpleName: other", "DEL TextElement:  instances are equal if, for each key, they", "DEL SimpleName: Override", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: other", "DEL SimpleName: Nullable", "DEL ParameterizedType: Multimap<?,?>", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: Object", "DEL BooleanLiteral: true", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL Javadoc", "DEL MethodDeclaration", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL MarkerAnnotation", "DEL TagElement: @code", "DEL ReturnStatement", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: as returned by ", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: asMap", "DEL TextElement: <p>The hash code of a multimap is defined as the hash code of the map view,", "DEL SimpleName: asMap", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: Multimap", "DEL SimpleName: hashCode", "DEL Modifier: public", "DEL SimpleName: Override", "DEL TextElement: Returns the hash code for this multimap.", "DEL Block", "DEL ReturnStatement", "DEL TextElement: .", "DEL SimpleName: hashCode", "DEL MemberRef", "DEL TagElement: @link", "DEL MarkerAnnotation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TextElement: .", "DEL SimpleName: Multimap", "DEL SimpleName: toString", "DEL SimpleType: String", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL TextElement:  toString", "DEL MemberRef", "DEL ReturnStatement", "DEL SimpleName: asMap", "DEL TagElement", "DEL TextElement:  on the map returned by ", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL TagElement: @code", "DEL Javadoc", "DEL SimpleName: String", "DEL TextElement:  a string representation of the multimap", "DEL Modifier: public", "DEL SimpleName: asMap", "DEL TagElement: @link", "DEL TextElement: Returns a string representation of the multimap, generated by calling"]}]}}, {"LinkedListMultimap_diff": {"operations": ["Move MethodDeclaration(2243) into TypeDeclaration: class(3101) at 44", "Update QualifiedName: com.google.common.base.Preconditions.checkArgument(2) to com.google.common.base.Preconditions.checkPositionIndex", "Insert ParameterizedType: AbstractMultimap<K,V>(220) into TypeDeclaration: class(3101) at 6", "Insert MethodDeclaration(2724) into TypeDeclaration: class(3101) at 42", "Insert MethodDeclaration(2805) into TypeDeclaration: class(3101) at 44", "Insert SimpleType: AbstractMultimap(215) into ParameterizedType: AbstractMultimap<K,V>(220) at 0", "Move SimpleType: K(1112) into ParameterizedType: AbstractMultimap<K,V>(220) at 1", "Move SimpleType: V(1431) into ParameterizedType: AbstractMultimap<K,V>(220) at 2", "Move ParameterizedType: AbstractMapEntry<K,V>(3272) into TypeDeclaration: class(371) at 6", "Insert MethodDeclaration(342) into TypeDeclaration: class(371) at 15", "Insert MethodDeclaration(370) into TypeDeclaration: class(371) at 16", "Insert Block(1101) into MethodDeclaration(1102) at 5", "Update ParameterizedType: ListIterator<Node<K,V>>(1116) to ListIterator<Entry<K,V>>", "Insert Block(2088) into MethodDeclaration(2089) at 5", "Update SimpleName: keySet(2698) to createKeySet", "Move Block(2784) into MethodDeclaration(2511) at 4", "Move Javadoc(3119) into MethodDeclaration(2546) at 0", "Move MarkerAnnotation(3121) into MethodDeclaration(2546) at 1", "Move ParameterizedType: List<V>(3127) into MethodDeclaration(2546) at 4", "Insert SimpleName: values(2535) into MethodDeclaration(2546) at 4", "Insert Block(2545) into MethodDeclaration(2546) at 5", "Move MarkerAnnotation(2245) into MethodDeclaration(2649) at 0", "Move ParameterizedType: List<V>(3101) into MethodDeclaration(2649) at 1", "Update SimpleName: values(3128) to createValues", "Insert Block(2648) into MethodDeclaration(2649) at 3", "Move Javadoc(3381) into MethodDeclaration(2724) at 0", "Move MarkerAnnotation(3383) into MethodDeclaration(2724) at 1", "Move Modifier: public(3295) into MethodDeclaration(2724) at 2", "Move ParameterizedType: List<Entry<K,V>>(3394) into MethodDeclaration(2724) at 3", "Insert SimpleName: entries(2708) into MethodDeclaration(2724) at 4", "Move Block(3315) into MethodDeclaration(2724) at 5", "Move MarkerAnnotation(2656) into MethodDeclaration(2785) at 0", "Move ParameterizedType: List<Entry<K,V>>(3333) into MethodDeclaration(2785) at 1", "Update SimpleName: entries(3395) to createEntries", "Insert Block(2784) into MethodDeclaration(2785) at 3", "Move MarkerAnnotation(2801) into MethodDeclaration(2805) at 0", "Insert ParameterizedType: Iterator<Entry<K,V>>(2797) into MethodDeclaration(2805) at 1", "Insert SimpleName: entryIterator(2798) into MethodDeclaration(2805) at 2", "Insert Block(2804) into MethodDeclaration(2805) at 3", "Update SimpleName: asMap(3541) to createAsMap", "Move Block(3698) into MethodDeclaration(2955) at 4", "Insert SimpleName: AbstractMultimap(214) into SimpleType: AbstractMultimap(215) at 0", "Move MarkerAnnotation(2927) into MethodDeclaration(332) at 0", "Move SimpleType: K(2930) into MethodDeclaration(332) at 3", "Update SimpleName: toString(318) to getKey", "Move MarkerAnnotation(314) into MethodDeclaration(342) at 0", "Insert Modifier: public(335) into MethodDeclaration(342) at 1", "Insert SimpleType: V(337) into MethodDeclaration(342) at 2", "Insert SimpleName: getValue(338) into MethodDeclaration(342) at 3", "Insert Block(341) into MethodDeclaration(342) at 4", "Move MarkerAnnotation(2102) into MethodDeclaration(370) at 0", "Insert Modifier: public(345) into MethodDeclaration(370) at 1", "Insert SimpleType: V(347) into MethodDeclaration(370) at 2", "Insert SimpleName: setValue(348) into MethodDeclaration(370) at 3", "Insert SingleVariableDeclaration(354) into MethodDeclaration(370) at 4", "Insert Block(369) into MethodDeclaration(370) at 5", "Move ExpressionStatement(1066) into Block(1101) at 0", "Update ParameterizedType: Node<K,V>(1115) to Entry<K,V>", "Move MarkerAnnotation(1422) into MethodDeclaration(1440) at 0", "Move Block(1439) into MethodDeclaration(1440) at 6", "Move MarkerAnnotation(1402) into MethodDeclaration(1460) at 0", "Move Block(1419) into MethodDeclaration(1460) at 5", "Insert ReturnStatement(2087) into Block(2088) at 0", "Insert ReturnStatement(2509) into Block(2510) at 0", "Insert ReturnStatement(2544) into Block(2545) at 0", "Insert ReturnStatement(2647) into Block(2648) at 0", "Insert ReturnStatement(2783) into Block(2784) at 0", "Move SimpleType: Iterator(2887) into ParameterizedType: Iterator<Entry<K,V>>(2797) at 0", "Move ParameterizedType: Entry<K,V>(3480) into ParameterizedType: Iterator<Entry<K,V>>(2797) at 1", "Insert ThrowStatement(2803) into Block(2804) at 0", "Insert ReturnStatement(2953) into Block(2954) at 0", "Move ReturnStatement(2933) into Block(331) at 0", "Insert SimpleName: V(336) into SimpleType: V(337) at 0", "Insert ReturnStatement(340) into Block(341) at 0", "Insert SimpleName: V(346) into SimpleType: V(347) at 0", "Move MarkerAnnotation(2250) into SingleVariableDeclaration(354) at 0", "Move SimpleType: V(1051) into SingleVariableDeclaration(354) at 1", "Insert SimpleName: newValue(353) into SingleVariableDeclaration(354) at 2", "Insert VariableDeclarationStatement(360) into Block(369) at 0", "Insert ExpressionStatement(366) into Block(369) at 1", "Move ReturnStatement(2787) into Block(369) at 2", "Update SimpleType: Node(1110) to Entry", "Insert SimpleType: K(1140) into ParameterizedType: Entry<K,V>(1143) at 1", "Update ParameterizedType: Node<K,V>(1412) to Entry<K,V>", "Update ParameterizedType: Node<K,V>(1432) to Entry<K,V>", "Insert MethodInvocation(2086) into ReturnStatement(2087) at 0", "Move ClassInstanceCreation(2780) into ReturnStatement(2509) at 0", "Insert CastExpression(2543) into ReturnStatement(2544) at 0", "Insert ClassInstanceCreation(2646) into ReturnStatement(2647) at 0", "Insert CastExpression(2721) into ReturnStatement(2722) at 0", "Insert ClassInstanceCreation(2782) into ReturnStatement(2783) at 0", "Insert ClassInstanceCreation(2802) into ThrowStatement(2803) at 0", "Move ClassInstanceCreation(3694) into ReturnStatement(2953) at 0", "Insert SimpleName: value(339) into ReturnStatement(340) at 0", "Move SimpleType: V(2258) into VariableDeclarationStatement(360) at 0", "Insert VariableDeclarationFragment(359) into VariableDeclarationStatement(360) at 1", "Insert Assignment: =(365) into ExpressionStatement(366) at 0", "Update SimpleName: i(1063) to Iterators", "Update SimpleName: next(1064) to clear", "Move ClassInstanceCreation(1057) into MethodInvocation(1099) at 2", "Update SimpleName: Node(1109) to Entry", "Insert SimpleName: K(1139) into SimpleType: K(1140) at 0", "Update SimpleType: Node(1407) to Entry", "Update SimpleType: Node(1427) to Entry", "Insert SimpleType: V(1451) into ParameterizedType: Entry<K,V>(1452) at 2", "Insert MethodInvocation(2083) into MethodInvocation(2086) at 0", "Insert SimpleName: contains(2084) into MethodInvocation(2086) at 1", "Move SimpleName: value(2089) into MethodInvocation(2086) at 2", "Move ParameterizedType: List<V>(3133) into CastExpression(2543) at 0", "Insert SuperMethodInvocation(2542) into CastExpression(2543) at 1", "Move ParameterizedType: AbstractSequentialList<V>(3147) into ClassInstanceCreation(2646) at 0", "Move AnonymousClassDeclaration(3231) into ClassInstanceCreation(2646) at 1", "Move ParameterizedType: List<Entry<K,V>>(3405) into CastExpression(2721) at 0", "Insert SuperMethodInvocation(2720) into CastExpression(2721) at 1", "Move ParameterizedType: AbstractSequentialList<Entry<K,V>>(3424) into ClassInstanceCreation(2782) at 0", "Move AnonymousClassDeclaration(3502) into ClassInstanceCreation(2782) at 1", "Insert SimpleType: AssertionError(2800) into ClassInstanceCreation(2802) at 0", "Insert StringLiteral: \"should never be called\"(2801) into ClassInstanceCreation(2802) at 1", "Insert SimpleName: result(357) into VariableDeclarationFragment(359) at 0", "Insert SimpleName: value(358) into VariableDeclarationFragment(359) at 1", "Insert FieldAccess(363) into Assignment: =(365) at 0", "Insert SimpleName: newValue(364) into Assignment: =(365) at 1", "Update SimpleName: Node(1406) to Entry", "Update SimpleName: Node(1426) to Entry", "Insert SimpleName: V(1450) into SimpleType: V(1451) at 0", "Update SimpleName: i(2084) to values", "Move SimpleName: i(2084) into MethodInvocation(2083) at 0", "Insert SimpleName: values(2541) into SuperMethodInvocation(2542) at 0", "Move MethodDeclaration(3433) into AnonymousClassDeclaration(2645) at 0", "Insert SimpleName: entries(2719) into SuperMethodInvocation(2720) at 0", "Move MethodDeclaration(3156) into AnonymousClassDeclaration(2781) at 0", "Update SimpleName: Multimap(3735) to AssertionError", "Move SimpleName: Multimap(3735) into SimpleType: AssertionError(2800) at 0", "Insert ThisExpression(361) into FieldAccess(363) at 0", "Insert SimpleName: value(362) into FieldAccess(363) at 1", "Move MarkerAnnotation(2885) into MethodDeclaration(2644) at 0", "Move SingleVariableDeclaration(3450) into MethodDeclaration(2644) at 5", "Move MarkerAnnotation(2852) into MethodDeclaration(2780) at 0", "Move SingleVariableDeclaration(3168) into MethodDeclaration(2780) at 5", "Move Block(3495) into MethodDeclaration(2780) at 6", "Move ClassInstanceCreation(3471) into ReturnStatement(2778) at 0", "Update SimpleName: nodes(3172) to nodeItr", "Update ParameterizedType: TransformedListIterator<Node<K,V>,V>(3190) to TransformedListIterator<Entry<K,V>,V>", "Update SimpleName: nodes(3191) to nodeItr", "Move ParameterizedType: Entry<K,V>(3466) into ParameterizedType: TransformedListIterator<Entry<K,V>,V>(2602) at 1", "Move SimpleType: V(2865) into ParameterizedType: TransformedListIterator<Entry<K,V>,V>(2602) at 2", "Move MarkerAnnotation(2287) into MethodDeclaration(2623) at 0", "Move SimpleType: V(2211) into MethodDeclaration(2623) at 1", "Move MarkerAnnotation(2636) into MethodDeclaration(2639) at 0", "Move ParameterizedType: Entry<K,V>(3254) into SingleVariableDeclaration(2617) at 0", "Insert SimpleName: entry(2616) into SingleVariableDeclaration(2617) at 1", "Move MethodInvocation(2328) into ReturnStatement(2621) at 0", "Update SimpleName: nodes(3219) to nodeItr", "Delete QualifiedName: com.google.common.base.Objects(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.common.base.Preconditions(14)", "Delete ImportDeclaration(15)", "Delete SimpleName: key(319)", "Delete StringLiteral: \"=\"(320)", "Delete SimpleName: value(321)", "Delete InfixExpression: +(322)", "Delete SimpleName: Iterator(1048)", "Delete SimpleType: Iterator(1049)", "Delete ParameterizedType: Iterator<V>(1052)", "Delete SimpleName: i(1053)", "Delete VariableDeclarationFragment(1058)", "Delete VariableDeclarationExpression(1059)", "Delete SimpleName: i(1060)", "Delete SimpleName: hasNext(1061)", "Delete MethodInvocation(1062)", "Delete SimpleName: i(1067)", "Delete SimpleName: remove(1068)", "Delete MethodInvocation(1069)", "Delete ExpressionStatement(1070)", "Delete Block(1071)", "Delete ForStatement(1072)", "Delete Block(1073)", "Delete SimpleName: NodeIterator(1156)", "Delete SimpleName: next(1157)", "Delete SimpleName: head(1158)", "Delete Assignment: =(1159)", "Delete ExpressionStatement(1160)", "Delete Block(1161)", "Delete MethodDeclaration(1162)", "Delete SimpleName: Preconditions(1173)", "Delete SimpleName: Preconditions(1757)", "Delete SimpleName: Iterator(2063)", "Delete SimpleType: Iterator(2064)", "Delete SimpleName: Node(2065)", "Delete SimpleType: Node(2066)", "Delete SimpleName: K(2067)", "Delete SimpleType: K(2068)", "Delete SimpleName: V(2069)", "Delete SimpleType: V(2070)", "Delete ParameterizedType: Node<K,V>(2071)", "Delete ParameterizedType: Iterator<Node<K,V>>(2072)", "Delete SimpleName: i(2073)", "Delete SimpleName: NodeIterator(2074)", "Delete SimpleType: NodeIterator(2075)", "Delete ClassInstanceCreation(2076)", "Delete VariableDeclarationFragment(2077)", "Delete VariableDeclarationExpression(2078)", "Delete SimpleName: i(2079)", "Delete SimpleName: hasNext(2080)", "Delete MethodInvocation(2081)", "Delete SimpleName: Objects(2082)", "Delete SimpleName: equal(2083)", "Delete SimpleName: next(2085)", "Delete MethodInvocation(2086)", "Delete SimpleName: value(2087)", "Delete FieldAccess(2088)", "Delete MethodInvocation(2090)", "Delete BooleanLiteral: true(2091)", "Delete ReturnStatement(2092)", "Delete Block(2093)", "Delete IfStatement(2094)", "Delete Block(2095)", "Delete ForStatement(2096)", "Delete BooleanLiteral: false(2097)", "Delete ReturnStatement(2098)", "Delete Block(2099)", "Delete Modifier: public(2103)", "Delete PrimitiveType: boolean(2104)", "Delete SimpleName: containsEntry(2105)", "Delete SimpleName: Nullable(2106)", "Delete MarkerAnnotation(2107)", "Delete SimpleName: Object(2108)", "Delete SimpleType: Object(2109)", "Delete SimpleName: key(2110)", "Delete SingleVariableDeclaration(2111)", "Delete SimpleName: Nullable(2112)", "Delete MarkerAnnotation(2113)", "Delete SimpleName: Object(2114)", "Delete SimpleType: Object(2115)", "Delete SimpleName: value(2116)", "Delete SingleVariableDeclaration(2117)", "Delete SimpleName: Iterator(2118)", "Delete SimpleType: Iterator(2119)", "Delete SimpleName: V(2120)", "Delete SimpleType: V(2121)", "Delete ParameterizedType: Iterator<V>(2122)", "Delete SimpleName: i(2123)", "Delete SimpleName: ValueForKeyIterator(2124)", "Delete SimpleType: ValueForKeyIterator(2125)", "Delete SimpleName: key(2126)", "Delete ClassInstanceCreation(2127)", "Delete VariableDeclarationFragment(2128)", "Delete VariableDeclarationExpression(2129)", "Delete SimpleName: i(2130)", "Delete SimpleName: hasNext(2131)", "Delete MethodInvocation(2132)", "Delete SimpleName: Objects(2133)", "Delete SimpleName: equal(2134)", "Delete SimpleName: i(2135)", "Delete SimpleName: next(2136)", "Delete MethodInvocation(2137)", "Delete SimpleName: value(2138)", "Delete MethodInvocation(2139)", "Delete BooleanLiteral: true(2140)", "Delete ReturnStatement(2141)", "Delete Block(2142)", "Delete IfStatement(2143)", "Delete Block(2144)", "Delete ForStatement(2145)", "Delete BooleanLiteral: false(2146)", "Delete ReturnStatement(2147)", "Delete Block(2148)", "Delete MethodDeclaration(2149)", "Delete Modifier: public(2246)", "Delete PrimitiveType: boolean(2247)", "Delete SimpleName: putAll(2248)", "Delete SimpleName: K(2251)", "Delete SimpleType: K(2252)", "Delete SimpleName: key(2253)", "Delete SingleVariableDeclaration(2254)", "Delete SimpleName: Iterable(2255)", "Delete SimpleType: Iterable(2256)", "Delete WildcardType: ? extends V(2259)", "Delete ParameterizedType: Iterable<? extends V>(2260)", "Delete SimpleName: values(2261)", "Delete SingleVariableDeclaration(2262)", "Delete PrimitiveType: boolean(2263)", "Delete SimpleName: changed(2264)", "Delete BooleanLiteral: false(2265)", "Delete VariableDeclarationFragment(2266)", "Delete VariableDeclarationStatement(2267)", "Delete SimpleName: V(2268)", "Delete SimpleType: V(2269)", "Delete SimpleName: value(2270)", "Delete SingleVariableDeclaration(2271)", "Delete SimpleName: values(2272)", "Delete SimpleName: changed(2273)", "Delete SimpleName: put(2274)", "Delete SimpleName: key(2275)", "Delete SimpleName: value(2276)", "Delete MethodInvocation(2277)", "Delete Assignment: |=(2278)", "Delete ExpressionStatement(2279)", "Delete Block(2280)", "Delete EnhancedForStatement(2281)", "Delete SimpleName: changed(2282)", "Delete ReturnStatement(2283)", "Delete Block(2284)", "Delete MethodDeclaration(2285)", "Delete Modifier: public(2288)", "Delete PrimitiveType: boolean(2289)", "Delete SimpleName: putAll(2290)", "Delete SimpleName: Multimap(2291)", "Delete SimpleType: Multimap(2292)", "Delete SimpleName: K(2293)", "Delete SimpleType: K(2294)", "Delete WildcardType: ? extends K(2295)", "Delete SimpleName: V(2296)", "Delete SimpleType: V(2297)", "Delete WildcardType: ? extends V(2298)", "Delete ParameterizedType: Multimap<? extends K,? extends V>(2299)", "Delete SimpleName: multimap(2300)", "Delete SingleVariableDeclaration(2301)", "Delete PrimitiveType: boolean(2302)", "Delete SimpleName: changed(2303)", "Delete BooleanLiteral: false(2304)", "Delete VariableDeclarationFragment(2305)", "Delete VariableDeclarationStatement(2306)", "Delete SimpleName: Entry(2307)", "Delete SimpleType: Entry(2308)", "Delete SimpleName: K(2309)", "Delete SimpleType: K(2310)", "Delete WildcardType: ? extends K(2311)", "Delete SimpleName: V(2312)", "Delete SimpleType: V(2313)", "Delete WildcardType: ? extends V(2314)", "Delete ParameterizedType: Entry<? extends K,? extends V>(2315)", "Delete SimpleName: entry(2316)", "Delete SingleVariableDeclaration(2317)", "Delete SimpleName: multimap(2318)", "Delete SimpleName: entries(2319)", "Delete MethodInvocation(2320)", "Delete SimpleName: changed(2321)", "Delete SimpleName: put(2322)", "Delete SimpleName: entry(2323)", "Delete SimpleName: getKey(2324)", "Delete MethodInvocation(2325)", "Delete MethodInvocation(2329)", "Delete Assignment: |=(2330)", "Delete ExpressionStatement(2331)", "Delete Block(2332)", "Delete EnhancedForStatement(2333)", "Delete SimpleName: changed(2334)", "Delete ReturnStatement(2335)", "Delete Block(2336)", "Delete MethodDeclaration(2337)", "Delete Modifier: public(2637)", "Delete PrimitiveType: boolean(2638)", "Delete SimpleName: removeAll(2639)", "Delete SimpleName: Collection(2640)", "Delete SimpleType: Collection(2641)", "Delete WildcardType: ?(2642)", "Delete ParameterizedType: Collection<?>(2643)", "Delete SimpleName: c(2644)", "Delete SingleVariableDeclaration(2645)", "Delete SimpleName: Iterators(2646)", "Delete SimpleName: removeAll(2647)", "Delete SimpleName: iterator(2648)", "Delete MethodInvocation(2649)", "Delete SimpleName: c(2650)", "Delete MethodInvocation(2651)", "Delete ReturnStatement(2652)", "Delete Block(2653)", "Delete MethodDeclaration(2654)", "Delete Modifier: public(2657)", "Delete PrimitiveType: boolean(2658)", "Delete SimpleName: retainAll(2659)", "Delete SimpleName: Collection(2660)", "Delete SimpleType: Collection(2661)", "Delete WildcardType: ?(2662)", "Delete ParameterizedType: Collection<?>(2663)", "Delete SimpleName: c(2664)", "Delete SingleVariableDeclaration(2665)", "Delete SimpleName: Iterators(2666)", "Delete SimpleName: retainAll(2667)", "Delete SimpleName: iterator(2668)", "Delete MethodInvocation(2669)", "Delete SimpleName: c(2670)", "Delete MethodInvocation(2671)", "Delete ReturnStatement(2672)", "Delete Block(2673)", "Delete MethodDeclaration(2674)", "Delete Modifier: private(2680)", "Delete Modifier: transient(2681)", "Delete SimpleName: Set(2682)", "Delete SimpleType: Set(2683)", "Delete SimpleName: K(2684)", "Delete SimpleType: K(2685)", "Delete ParameterizedType: Set<K>(2686)", "Delete SimpleName: keySet(2687)", "Delete VariableDeclarationFragment(2688)", "Delete FieldDeclaration(2689)", "Delete Modifier: public(2692)", "Delete SimpleName: keySet(2711)", "Delete SimpleName: result(2712)", "Delete Assignment: =(2781)", "Delete Assignment: =(2782)", "Delete ExpressionStatement(2783)", "Delete SimpleName: Set(2699)", "Delete SimpleType: Set(2700)", "Delete SimpleName: K(2701)", "Delete SimpleType: K(2702)", "Delete ParameterizedType: Set<K>(2703)", "Delete SimpleName: result(2704)", "Delete SimpleName: keySet(2705)", "Delete VariableDeclarationFragment(2706)", "Delete VariableDeclarationStatement(2707)", "Delete SimpleName: result(2708)", "Delete NullLiteral(2709)", "Delete InfixExpression: ==(2710)", "Delete IfStatement(2785)", "Delete Block(2788)", "Delete SimpleName: Override(2191)", "Delete MarkerAnnotation(2192)", "Delete PrimitiveType: boolean(2194)", "Delete SimpleName: remove(2195)", "Delete SimpleName: Nullable(2196)", "Delete MarkerAnnotation(2197)", "Delete SimpleName: Object(2198)", "Delete SimpleType: Object(2199)", "Delete SimpleName: key(2200)", "Delete SingleVariableDeclaration(2201)", "Delete SimpleName: Nullable(2202)", "Delete MarkerAnnotation(2203)", "Delete SimpleName: Object(2204)", "Delete SimpleType: Object(2205)", "Delete SimpleName: value(2206)", "Delete SingleVariableDeclaration(2207)", "Delete SimpleName: Iterator(2208)", "Delete SimpleType: Iterator(2209)", "Delete ParameterizedType: Iterator<V>(2212)", "Delete SimpleName: values(2213)", "Delete SimpleName: ValueForKeyIterator(2214)", "Delete SimpleType: ValueForKeyIterator(2215)", "Delete SimpleName: key(2216)", "Delete ClassInstanceCreation(2217)", "Delete VariableDeclarationFragment(2218)", "Delete VariableDeclarationStatement(2219)", "Delete SimpleName: values(2220)", "Delete SimpleName: hasNext(2221)", "Delete MethodInvocation(2222)", "Delete SimpleName: Objects(2223)", "Delete SimpleName: equal(2224)", "Delete SimpleName: values(2225)", "Delete SimpleName: next(2226)", "Delete MethodInvocation(2227)", "Delete SimpleName: value(2228)", "Delete MethodInvocation(2229)", "Delete SimpleName: values(2230)", "Delete SimpleName: remove(2231)", "Delete MethodInvocation(2232)", "Delete ExpressionStatement(2233)", "Delete BooleanLiteral: true(2234)", "Delete ReturnStatement(2235)", "Delete Block(2236)", "Delete IfStatement(2237)", "Delete Block(2238)", "Delete WhileStatement(2239)", "Delete BooleanLiteral: false(2240)", "Delete ReturnStatement(2241)", "Delete Block(2242)", "Delete Modifier: private(2790)", "Delete Modifier: transient(2791)", "Delete SimpleName: Multiset(2792)", "Delete SimpleType: Multiset(2793)", "Delete SimpleName: K(2794)", "Delete SimpleType: K(2795)", "Delete ParameterizedType: Multiset<K>(2796)", "Delete SimpleName: keys(2797)", "Delete VariableDeclarationFragment(2798)", "Delete FieldDeclaration(2799)", "Delete Modifier: public(2802)", "Delete SimpleName: Multiset(2803)", "Delete SimpleType: Multiset(2804)", "Delete SimpleName: K(2805)", "Delete SimpleType: K(2806)", "Delete ParameterizedType: Multiset<K>(2807)", "Delete SimpleName: keys(2808)", "Delete SimpleName: Multiset(2809)", "Delete SimpleType: Multiset(2810)", "Delete SimpleName: K(2811)", "Delete SimpleType: K(2812)", "Delete ParameterizedType: Multiset<K>(2813)", "Delete SimpleName: result(2814)", "Delete SimpleName: keys(2815)", "Delete VariableDeclarationFragment(2816)", "Delete VariableDeclarationStatement(2817)", "Delete SimpleName: result(2818)", "Delete NullLiteral(2819)", "Delete InfixExpression: ==(2820)", "Delete SimpleName: keys(2821)", "Delete SimpleName: result(2822)", "Delete SimpleName: MultisetView(2823)", "Delete SimpleType: MultisetView(2824)", "Delete ClassInstanceCreation(2825)", "Delete Assignment: =(2826)", "Delete Assignment: =(2827)", "Delete ExpressionStatement(2828)", "Delete Block(2829)", "Delete IfStatement(2830)", "Delete SimpleName: result(2831)", "Delete ReturnStatement(2832)", "Delete Block(2833)", "Delete MethodDeclaration(2834)", "Delete Modifier: private(2835)", "Delete SimpleName: MultisetView(2836)", "Delete SimpleName: AbstractMultiset(2837)", "Delete SimpleType: AbstractMultiset(2838)", "Delete SimpleName: K(2839)", "Delete SimpleType: K(2840)", "Delete ParameterizedType: AbstractMultiset<K>(2841)", "Delete SimpleName: Override(2842)", "Delete MarkerAnnotation(2843)", "Delete Modifier: public(2844)", "Delete PrimitiveType: int(2845)", "Delete SimpleName: size(2846)", "Delete SimpleName: size(2847)", "Delete ReturnStatement(2848)", "Delete Block(2849)", "Delete MethodDeclaration(2850)", "Delete Modifier: public(2853)", "Delete PrimitiveType: int(2854)", "Delete SimpleName: count(2855)", "Delete SimpleName: Object(2856)", "Delete SimpleType: Object(2857)", "Delete SimpleName: element(2858)", "Delete SingleVariableDeclaration(2859)", "Delete SimpleName: KeyList(2860)", "Delete SimpleType: KeyList(2861)", "Delete SimpleName: K(2862)", "Delete SimpleType: K(2863)", "Delete ParameterizedType: KeyList<K,V>(2866)", "Delete SimpleName: keyList(2867)", "Delete SimpleName: keyToKeyList(2868)", "Delete SimpleName: get(2869)", "Delete SimpleName: element(2870)", "Delete MethodInvocation(2871)", "Delete VariableDeclarationFragment(2872)", "Delete VariableDeclarationStatement(2873)", "Delete SimpleName: keyList(2874)", "Delete NullLiteral(2875)", "Delete InfixExpression: ==(2876)", "Delete ParenthesizedExpression(2877)", "Delete NumberLiteral: 0(2878)", "Delete QualifiedName: keyList.count(2879)", "Delete ConditionalExpression(2880)", "Delete ReturnStatement(2881)", "Delete Block(2882)", "Delete MethodDeclaration(2883)", "Delete SimpleName: Entry(2888)", "Delete SimpleType: Entry(2889)", "Delete SimpleName: K(2890)", "Delete SimpleType: K(2891)", "Delete ParameterizedType: Entry<K>(2892)", "Delete ParameterizedType: Iterator<Entry<K>>(2893)", "Delete SimpleName: entryIterator(2894)", "Delete SimpleName: TransformedIterator(2895)", "Delete SimpleType: TransformedIterator(2896)", "Delete SimpleName: K(2897)", "Delete SimpleType: K(2898)", "Delete SimpleName: Entry(2899)", "Delete SimpleType: Entry(2900)", "Delete SimpleName: K(2901)", "Delete SimpleType: K(2902)", "Delete ParameterizedType: Entry<K>(2903)", "Delete ParameterizedType: TransformedIterator<K,Entry<K>>(2904)", "Delete SimpleName: DistinctKeyIterator(2905)", "Delete SimpleType: DistinctKeyIterator(2906)", "Delete ClassInstanceCreation(2907)", "Delete SimpleName: Override(2908)", "Delete MarkerAnnotation(2909)", "Delete SimpleName: Entry(2910)", "Delete SimpleType: Entry(2911)", "Delete SimpleName: K(2912)", "Delete SimpleType: K(2913)", "Delete ParameterizedType: Entry<K>(2914)", "Delete SimpleName: transform(2915)", "Delete Modifier: final(2916)", "Delete SimpleName: K(2917)", "Delete SimpleType: K(2918)", "Delete SimpleName: key(2919)", "Delete SingleVariableDeclaration(2920)", "Delete QualifiedName: Multisets.AbstractEntry(2921)", "Delete SimpleType: Multisets.AbstractEntry(2922)", "Delete SimpleName: K(2923)", "Delete SimpleType: K(2924)", "Delete ParameterizedType: Multisets.AbstractEntry<K>(2925)", "Delete Modifier: public(2928)", "Delete SimpleName: getElement(2931)", "Delete MethodDeclaration(2935)", "Delete SimpleName: Override(2936)", "Delete MarkerAnnotation(2937)", "Delete Modifier: public(2938)", "Delete PrimitiveType: int(2939)", "Delete SimpleName: getCount(2940)", "Delete SimpleName: keyToKeyList(2941)", "Delete SimpleName: get(2942)", "Delete SimpleName: key(2943)", "Delete MethodInvocation(2944)", "Delete SimpleName: count(2945)", "Delete FieldAccess(2946)", "Delete ReturnStatement(2947)", "Delete Block(2948)", "Delete MethodDeclaration(2949)", "Delete AnonymousClassDeclaration(2950)", "Delete ClassInstanceCreation(2951)", "Delete ReturnStatement(2952)", "Delete Block(2953)", "Delete MethodDeclaration(2954)", "Delete AnonymousClassDeclaration(2955)", "Delete ClassInstanceCreation(2956)", "Delete ReturnStatement(2957)", "Delete Block(2958)", "Delete MethodDeclaration(2959)", "Delete SimpleName: Override(2960)", "Delete MarkerAnnotation(2961)", "Delete PrimitiveType: int(2962)", "Delete SimpleName: distinctElements(2963)", "Delete SimpleName: elementSet(2964)", "Delete MethodInvocation(2965)", "Delete SimpleName: size(2966)", "Delete MethodInvocation(2967)", "Delete ReturnStatement(2968)", "Delete Block(2969)", "Delete MethodDeclaration(2970)", "Delete SimpleName: Override(2971)", "Delete MarkerAnnotation(2972)", "Delete Modifier: public(2973)", "Delete SimpleName: Iterator(2974)", "Delete SimpleType: Iterator(2975)", "Delete SimpleName: K(2976)", "Delete SimpleType: K(2977)", "Delete ParameterizedType: Iterator<K>(2978)", "Delete SimpleName: iterator(2979)", "Delete SimpleName: TransformedIterator(2980)", "Delete SimpleType: TransformedIterator(2981)", "Delete SimpleName: Node(2982)", "Delete SimpleType: Node(2983)", "Delete SimpleName: K(2984)", "Delete SimpleType: K(2985)", "Delete SimpleName: V(2986)", "Delete SimpleType: V(2987)", "Delete ParameterizedType: Node<K,V>(2988)", "Delete SimpleName: K(2989)", "Delete SimpleType: K(2990)", "Delete ParameterizedType: TransformedIterator<Node<K,V>,K>(2991)", "Delete SimpleName: NodeIterator(2992)", "Delete SimpleType: NodeIterator(2993)", "Delete ClassInstanceCreation(2994)", "Delete SimpleName: Override(2995)", "Delete MarkerAnnotation(2996)", "Delete SimpleName: K(2997)", "Delete SimpleType: K(2998)", "Delete SimpleName: transform(2999)", "Delete SimpleName: Node(3000)", "Delete SimpleType: Node(3001)", "Delete SimpleName: K(3002)", "Delete SimpleType: K(3003)", "Delete SimpleName: V(3004)", "Delete SimpleType: V(3005)", "Delete ParameterizedType: Node<K,V>(3006)", "Delete SimpleName: node(3007)", "Delete SingleVariableDeclaration(3008)", "Delete QualifiedName: node.key(3009)", "Delete ReturnStatement(3010)", "Delete Block(3011)", "Delete MethodDeclaration(3012)", "Delete AnonymousClassDeclaration(3013)", "Delete ClassInstanceCreation(3014)", "Delete ReturnStatement(3015)", "Delete Block(3016)", "Delete MethodDeclaration(3017)", "Delete SimpleName: Override(3018)", "Delete MarkerAnnotation(3019)", "Delete Modifier: public(3020)", "Delete PrimitiveType: int(3021)", "Delete SimpleName: remove(3022)", "Delete SimpleName: Nullable(3023)", "Delete MarkerAnnotation(3024)", "Delete SimpleName: Object(3025)", "Delete SimpleType: Object(3026)", "Delete SimpleName: key(3027)", "Delete SingleVariableDeclaration(3028)", "Delete PrimitiveType: int(3029)", "Delete SimpleName: occurrences(3030)", "Delete SingleVariableDeclaration(3031)", "Delete SimpleName: checkArgument(3032)", "Delete SimpleName: occurrences(3033)", "Delete NumberLiteral: 0(3034)", "Delete InfixExpression: >=(3035)", "Delete MethodInvocation(3036)", "Delete ExpressionStatement(3037)", "Delete PrimitiveType: int(3038)", "Delete SimpleName: oldCount(3039)", "Delete SimpleName: count(3040)", "Delete SimpleName: key(3041)", "Delete MethodInvocation(3042)", "Delete VariableDeclarationFragment(3043)", "Delete VariableDeclarationStatement(3044)", "Delete SimpleName: Iterator(3045)", "Delete SimpleType: Iterator(3046)", "Delete SimpleName: V(3047)", "Delete SimpleType: V(3048)", "Delete ParameterizedType: Iterator<V>(3049)", "Delete SimpleName: values(3050)", "Delete SimpleName: ValueForKeyIterator(3051)", "Delete SimpleType: ValueForKeyIterator(3052)", "Delete SimpleName: key(3053)", "Delete ClassInstanceCreation(3054)", "Delete VariableDeclarationFragment(3055)", "Delete VariableDeclarationStatement(3056)", "Delete SimpleName: occurrences(3057)", "Delete PostfixExpression: --(3058)", "Delete NumberLiteral: 0(3059)", "Delete InfixExpression: >(3060)", "Delete ParenthesizedExpression(3061)", "Delete SimpleName: values(3062)", "Delete SimpleName: hasNext(3063)", "Delete MethodInvocation(3064)", "Delete InfixExpression: &&(3065)", "Delete SimpleName: values(3066)", "Delete SimpleName: next(3067)", "Delete MethodInvocation(3068)", "Delete ExpressionStatement(3069)", "Delete SimpleName: values(3070)", "Delete SimpleName: remove(3071)", "Delete MethodInvocation(3072)", "Delete ExpressionStatement(3073)", "Delete Block(3074)", "Delete WhileStatement(3075)", "Delete SimpleName: oldCount(3076)", "Delete ReturnStatement(3077)", "Delete Block(3078)", "Delete MethodDeclaration(3079)", "Delete SimpleName: Override(3080)", "Delete MarkerAnnotation(3081)", "Delete Modifier: public(3082)", "Delete SimpleName: Set(3083)", "Delete SimpleType: Set(3084)", "Delete SimpleName: K(3085)", "Delete SimpleType: K(3086)", "Delete ParameterizedType: Set<K>(3087)", "Delete SimpleName: elementSet(3088)", "Delete SimpleName: keySet(3089)", "Delete MethodInvocation(3090)", "Delete ReturnStatement(3091)", "Delete Block(3092)", "Delete MethodDeclaration(3093)", "Delete TypeDeclaration: class(3094)", "Delete Modifier: private(3095)", "Delete Modifier: transient(3096)", "Delete SimpleName: valuesList(3102)", "Delete VariableDeclarationFragment(3103)", "Delete FieldDeclaration(3104)", "Delete Modifier: public(3122)", "Delete SimpleName: Override(3157)", "Delete MarkerAnnotation(3158)", "Delete SimpleName: Node(3181)", "Delete SimpleType: Node(3182)", "Delete SimpleName: K(3183)", "Delete SimpleType: K(3184)", "Delete SimpleName: V(3185)", "Delete SimpleType: V(3186)", "Delete ParameterizedType: Node<K,V>(3187)", "Delete SimpleName: V(3188)", "Delete SimpleType: V(3189)", "Delete SimpleName: Override(3192)", "Delete MarkerAnnotation(3193)", "Delete SimpleName: V(3194)", "Delete SimpleType: V(3195)", "Delete SimpleName: Node(3197)", "Delete SimpleType: Node(3198)", "Delete SimpleName: K(3199)", "Delete SimpleType: K(3200)", "Delete SimpleName: V(3201)", "Delete SimpleType: V(3202)", "Delete ParameterizedType: Node<K,V>(3203)", "Delete SimpleName: node(3204)", "Delete QualifiedName: node.value(3206)", "Delete SimpleName: Override(3210)", "Delete MarkerAnnotation(3211)", "Delete SimpleName: result(3134)", "Delete SimpleName: valuesList(3135)", "Delete VariableDeclarationFragment(3136)", "Delete VariableDeclarationStatement(3137)", "Delete SimpleName: result(3138)", "Delete NullLiteral(3139)", "Delete InfixExpression: ==(3140)", "Delete SimpleName: valuesList(3141)", "Delete SimpleName: result(3142)", "Delete ClassInstanceCreation(3232)", "Delete Assignment: =(3233)", "Delete Assignment: =(3234)", "Delete ExpressionStatement(3235)", "Delete Block(3236)", "Delete IfStatement(3237)", "Delete SimpleName: result(3238)", "Delete ReturnStatement(3239)", "Delete Block(3240)", "Delete SimpleName: V(3303)", "Delete SimpleType: V(3304)", "Delete SimpleName: oldValue(3305)", "Delete QualifiedName: node.value(3306)", "Delete VariableDeclarationFragment(3307)", "Delete VariableDeclarationStatement(3308)", "Delete QualifiedName: node.value(3309)", "Delete SimpleName: value(3310)", "Delete Assignment: =(3311)", "Delete ExpressionStatement(3312)", "Delete SimpleName: oldValue(3313)", "Delete Modifier: private(3242)", "Delete Modifier: static(3243)", "Delete SimpleName: K(3244)", "Delete TypeParameter(3245)", "Delete SimpleName: V(3246)", "Delete TypeParameter(3247)", "Delete SimpleName: createEntry(3255)", "Delete Modifier: final(3256)", "Delete SimpleName: Node(3257)", "Delete SimpleType: Node(3258)", "Delete SimpleName: K(3259)", "Delete SimpleType: K(3260)", "Delete SimpleName: V(3261)", "Delete SimpleType: V(3262)", "Delete ParameterizedType: Node<K,V>(3263)", "Delete SimpleName: node(3264)", "Delete SingleVariableDeclaration(3265)", "Delete SimpleName: Override(3273)", "Delete MarkerAnnotation(3274)", "Delete Modifier: public(3275)", "Delete SimpleName: K(3276)", "Delete SimpleType: K(3277)", "Delete SimpleName: getKey(3278)", "Delete QualifiedName: node.key(3279)", "Delete ReturnStatement(3280)", "Delete Block(3281)", "Delete MethodDeclaration(3282)", "Delete SimpleName: Override(3283)", "Delete MarkerAnnotation(3284)", "Delete Modifier: public(3285)", "Delete SimpleName: V(3286)", "Delete SimpleType: V(3287)", "Delete SimpleName: getValue(3288)", "Delete QualifiedName: node.value(3289)", "Delete ReturnStatement(3290)", "Delete Block(3291)", "Delete MethodDeclaration(3292)", "Delete SimpleName: Override(3293)", "Delete MarkerAnnotation(3294)", "Delete SimpleName: V(3296)", "Delete SimpleType: V(3297)", "Delete SimpleName: setValue(3298)", "Delete SimpleName: V(3299)", "Delete SimpleType: V(3300)", "Delete SimpleName: value(3301)", "Delete SingleVariableDeclaration(3302)", "Delete MethodDeclaration(3316)", "Delete AnonymousClassDeclaration(3317)", "Delete ClassInstanceCreation(3318)", "Delete ReturnStatement(3319)", "Delete Block(3320)", "Delete MethodDeclaration(3321)", "Delete Modifier: private(3322)", "Delete Modifier: transient(3323)", "Delete SimpleName: entries(3334)", "Delete VariableDeclarationFragment(3335)", "Delete FieldDeclaration(3336)", "Delete Modifier: public(3384)", "Delete SimpleName: Override(3434)", "Delete MarkerAnnotation(3435)", "Delete SimpleName: createEntry(3491)", "Delete SimpleName: node(3492)", "Delete MethodInvocation(3493)", "Delete SimpleName: TransformedListIterator(3451)", "Delete SimpleType: TransformedListIterator(3452)", "Delete SimpleName: Node(3453)", "Delete SimpleType: Node(3454)", "Delete SimpleName: K(3455)", "Delete SimpleType: K(3456)", "Delete SimpleName: V(3457)", "Delete SimpleType: V(3458)", "Delete ParameterizedType: Node<K,V>(3459)", "Delete ParameterizedType: TransformedListIterator<Node<K,V>,Entry<K,V>>(3467)", "Delete SimpleName: Override(3472)", "Delete MarkerAnnotation(3473)", "Delete SimpleName: transform(3481)", "Delete SimpleName: Node(3482)", "Delete SimpleType: Node(3483)", "Delete SimpleName: K(3484)", "Delete SimpleType: K(3485)", "Delete SimpleName: V(3486)", "Delete SimpleType: V(3487)", "Delete ParameterizedType: Node<K,V>(3488)", "Delete SimpleName: node(3489)", "Delete SingleVariableDeclaration(3490)", "Delete MethodDeclaration(3496)", "Delete AnonymousClassDeclaration(3497)", "Delete ClassInstanceCreation(3498)", "Delete ReturnStatement(3499)", "Delete Block(3500)", "Delete SimpleName: result(3406)", "Delete SimpleName: entries(3407)", "Delete VariableDeclarationFragment(3408)", "Delete VariableDeclarationStatement(3409)", "Delete SimpleName: result(3410)", "Delete NullLiteral(3411)", "Delete InfixExpression: ==(3412)", "Delete SimpleName: entries(3413)", "Delete SimpleName: result(3414)", "Delete ClassInstanceCreation(3503)", "Delete Assignment: =(3504)", "Delete Assignment: =(3505)", "Delete ExpressionStatement(3506)", "Delete Block(3507)", "Delete IfStatement(3508)", "Delete SimpleName: result(3509)", "Delete ReturnStatement(3510)", "Delete Block(3511)", "Delete Modifier: private(3513)", "Delete Modifier: transient(3514)", "Delete SimpleName: Map(3515)", "Delete SimpleType: Map(3516)", "Delete SimpleName: K(3517)", "Delete SimpleType: K(3518)", "Delete SimpleName: Collection(3519)", "Delete SimpleType: Collection(3520)", "Delete SimpleName: V(3521)", "Delete SimpleType: V(3522)", "Delete ParameterizedType: Collection<V>(3523)", "Delete ParameterizedType: Map<K,Collection<V>>(3524)", "Delete SimpleName: map(3525)", "Delete VariableDeclarationFragment(3526)", "Delete FieldDeclaration(3527)", "Delete Modifier: public(3530)", "Delete SimpleName: map(3559)", "Delete SimpleName: result(3560)", "Delete Assignment: =(3695)", "Delete Assignment: =(3696)", "Delete ExpressionStatement(3697)", "Delete SimpleName: Map(3542)", "Delete SimpleType: Map(3543)", "Delete SimpleName: K(3544)", "Delete SimpleType: K(3545)", "Delete SimpleName: Collection(3546)", "Delete SimpleType: Collection(3547)", "Delete SimpleName: V(3548)", "Delete SimpleType: V(3549)", "Delete ParameterizedType: Collection<V>(3550)", "Delete ParameterizedType: Map<K,Collection<V>>(3551)", "Delete SimpleName: result(3552)", "Delete SimpleName: map(3553)", "Delete VariableDeclarationFragment(3554)", "Delete VariableDeclarationStatement(3555)", "Delete SimpleName: result(3556)", "Delete NullLiteral(3557)", "Delete InfixExpression: ==(3558)", "Delete IfStatement(3699)", "Delete SimpleName: result(3700)", "Delete ReturnStatement(3701)", "Delete Block(3702)", "Delete TextElement: Compares the specified object to this multimap for equality.(3704)", "Delete TextElement: <p>Two (3705)", "Delete TextElement:  ListMultimap(3706)", "Delete TagElement: @code(3707)", "Delete TextElement:  instances are equal if, for each key, they(3708)", "Delete TextElement: contain the same values in the same order. If the value orderings disagree,(3709)", "Delete TextElement: the multimaps will not be considered equal.(3710)", "Delete TagElement(3711)", "Delete Javadoc(3712)", "Delete SimpleName: Override(3713)", "Delete MarkerAnnotation(3714)", "Delete Modifier: public(3715)", "Delete PrimitiveType: boolean(3716)", "Delete SimpleName: equals(3717)", "Delete SimpleName: Nullable(3718)", "Delete MarkerAnnotation(3719)", "Delete SimpleName: Object(3720)", "Delete SimpleType: Object(3721)", "Delete SimpleName: other(3722)", "Delete SingleVariableDeclaration(3723)", "Delete SimpleName: other(3724)", "Delete ThisExpression(3725)", "Delete InfixExpression: ==(3726)", "Delete BooleanLiteral: true(3727)", "Delete ReturnStatement(3728)", "Delete Block(3729)", "Delete IfStatement(3730)", "Delete SimpleName: other(3731)", "Delete SimpleName: Multimap(3732)", "Delete SimpleType: Multimap(3733)", "Delete InstanceofExpression(3734)", "Delete SimpleType: Multimap(3736)", "Delete WildcardType: ?(3737)", "Delete WildcardType: ?(3738)", "Delete ParameterizedType: Multimap<?,?>(3739)", "Delete SimpleName: that(3740)", "Delete SimpleName: Multimap(3741)", "Delete SimpleType: Multimap(3742)", "Delete WildcardType: ?(3743)", "Delete WildcardType: ?(3744)", "Delete ParameterizedType: Multimap<?,?>(3745)", "Delete SimpleName: other(3746)", "Delete CastExpression(3747)", "Delete VariableDeclarationFragment(3748)", "Delete VariableDeclarationStatement(3749)", "Delete ThisExpression(3750)", "Delete SimpleName: asMap(3751)", "Delete MethodInvocation(3752)", "Delete SimpleName: equals(3753)", "Delete SimpleName: that(3754)", "Delete SimpleName: asMap(3755)", "Delete MethodInvocation(3756)", "Delete MethodInvocation(3757)", "Delete ReturnStatement(3758)", "Delete Block(3759)", "Delete IfStatement(3760)", "Delete BooleanLiteral: false(3761)", "Delete ReturnStatement(3762)", "Delete Block(3763)", "Delete MethodDeclaration(3764)", "Delete TextElement: Returns the hash code for this multimap.(3765)", "Delete TextElement: <p>The hash code of a multimap is defined as the hash code of the map view,(3766)", "Delete TextElement: as returned by (3767)", "Delete SimpleName: Multimap(3768)", "Delete SimpleName: asMap(3769)", "Delete MemberRef(3770)", "Delete TagElement: @link(3771)", "Delete TextElement: .(3772)", "Delete TagElement(3773)", "Delete Javadoc(3774)", "Delete SimpleName: Override(3775)", "Delete MarkerAnnotation(3776)", "Delete Modifier: public(3777)", "Delete PrimitiveType: int(3778)", "Delete SimpleName: hashCode(3779)", "Delete SimpleName: asMap(3780)", "Delete MethodInvocation(3781)", "Delete SimpleName: hashCode(3782)", "Delete MethodInvocation(3783)", "Delete ReturnStatement(3784)", "Delete Block(3785)", "Delete MethodDeclaration(3786)", "Delete TextElement: Returns a string representation of the multimap, generated by calling(3787)", "Delete TextElement:  toString(3788)", "Delete TagElement: @code(3789)", "Delete TextElement:  on the map returned by (3790)", "Delete SimpleName: Multimap(3791)", "Delete SimpleName: asMap(3792)", "Delete MemberRef(3793)", "Delete TagElement: @link(3794)", "Delete TextElement: .(3795)", "Delete TagElement(3796)", "Delete TextElement:  a string representation of the multimap(3797)", "Delete TagElement: @return(3798)", "Delete Javadoc(3799)", "Delete SimpleName: Override(3800)", "Delete MarkerAnnotation(3801)", "Delete Modifier: public(3802)", "Delete SimpleName: String(3803)", "Delete SimpleType: String(3804)", "Delete SimpleName: toString(3805)", "Delete SimpleName: asMap(3806)", "Delete MethodInvocation(3807)", "Delete SimpleName: toString(3808)", "Delete MethodInvocation(3809)", "Delete ReturnStatement(3810)", "Delete Block(3811)", "Delete MethodDeclaration(3812)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}