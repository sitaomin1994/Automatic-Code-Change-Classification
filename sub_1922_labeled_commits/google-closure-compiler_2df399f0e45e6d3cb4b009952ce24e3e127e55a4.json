{"application": "google-closure-compiler", "csha": "2df399f0e45e6d3cb4b009952ce24e3e127e55a4", "files": [{"ConvertToTypedInterface_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleName: root to MethodInvocation at 3", "INS SimpleType: SimplifyDeclarations to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to MethodInvocation at 4", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: process to MethodDeclaration at 3", "INS SimpleName: NodeTraversal to MethodInvocation at 0", "INS SimpleName: compiler to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: traverseEs6 to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: compiler to MethodInvocation at 2", "INS SimpleName: root to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: compiler to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: SimplifyDeclarations to ClassInstanceCreation at 0", "INS SimpleType: RemoveNonDeclarations to ClassInstanceCreation at 0", "INS SimpleName: simplify to MethodInvocation at 4", "INS SimpleName: simplify to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Modifier: public to MethodDeclaration at 1", "INS ExpressionStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: SimplifyDeclarations to SimpleType: SimplifyDeclarations at 0", "INS SimpleName: SimplifyDeclarations to SimpleType: SimplifyDeclarations at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 10", "operations": ["INS SimpleType: NodeTraversal.Callback to TypeDeclaration: class at 3", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: private to TypeDeclaration: class at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: RemoveNonDeclarations to TypeDeclaration: class at 2", "INS SimpleName: visit to MethodDeclaration at 3", "INS Block to MethodDeclaration at 7", "INS IfStatement to SwitchStatement at 12", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SwitchCase to SwitchStatement at 14", "INS SwitchStatement to Block at 0", "INS BreakStatement to SwitchStatement at 15", "INS BreakStatement to SwitchStatement at 13", "INS Modifier: static to TypeDeclaration: class at 1", "INS QualifiedName: NodeTraversal.Callback to SimpleType: NodeTraversal.Callback at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 10", "INS Block to IfStatement at 1"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 21", "operations": ["INS TypeDeclaration: class to TypeDeclaration: class at 21", "INS Modifier: private to TypeDeclaration: class at 0", "INS Modifier: static to TypeDeclaration: class at 1", "INS SimpleName: JsdocUtil to TypeDeclaration: class at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 6", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV MethodDeclaration to TypeDeclaration: class at 10", "MOV MethodDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV MethodDeclaration to TypeDeclaration: class at 3", "MOV MethodDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS SimpleName: SimplifyDeclarations to TypeDeclaration: class at 2", "operations": ["INS SimpleName: SimplifyDeclarations to TypeDeclaration: class at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 12", "MOV MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from void to boolean", "operations": ["UPD PrimitiveType: void from void to boolean"]}, {"root": "INS SimpleName: shouldTraverse to MethodDeclaration at 3", "operations": ["INS SimpleName: shouldTraverse to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: NodeTraversal to SingleVariableDeclaration at 0", "INS SimpleName: NodeTraversal to SimpleType: NodeTraversal at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: t to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: n to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Node to SimpleType: Node at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: parent to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from RemoveCode to SimplifyDeclarations", "operations": ["UPD SimpleName: RemoveCode from RemoveCode to SimplifyDeclarations"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: NodeTraversal to SingleVariableDeclaration at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: NodeTraversal to SimpleType: NodeTraversal at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SimpleName: n to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleName: parent to SingleVariableDeclaration at 1", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS MethodInvocation to IfStatement at 0", "INS Block to MethodDeclaration at 7", "INS IfStatement to Block at 0"]}, {"root": "INS SwitchStatement to Block at 0", "operations": ["INS SimpleName: matchesQualifiedName to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 15", "INS SimpleName: detach to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 29", "INS SimpleName: CONST to SwitchCase at 0", "INS ExpressionStatement to SwitchStatement at 33", "INS SimpleName: FUNCTION to SwitchCase at 0", "INS VariableDeclarationStatement to SwitchStatement at 2", "INS SimpleName: parent to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: parent to MethodInvocation at 2", "INS StringLiteral: \"goog.define\" to MethodInvocation at 2", "INS SimpleName: callee to MethodInvocation at 0", "INS SimpleName: expr to MethodInvocation at 0", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS ReturnStatement to SwitchStatement at 8", "INS IfStatement to SwitchStatement at 2", "INS SimpleName: CASE to SwitchCase at 0", "INS SimpleName: reportCodeChange to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 26", "INS SimpleName: LABEL to SwitchCase at 0", "INS SimpleName: callee to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: callee to MethodInvocation at 0", "INS SimpleName: isStatementParent to MethodInvocation at 1", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 1", "INS IfStatement to SwitchStatement at 32", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: t to MethodInvocation at 0", "INS SimpleName: EXPORT to SwitchCase at 0", "INS ExpressionStatement to SwitchStatement at 24", "INS ExpressionStatement to Block at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: FOR to SwitchCase at 0", "INS SimpleName: initializer to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to SwitchStatement at 31", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS SimpleName: getSecondChild to MethodInvocation at 1", "INS SimpleName: srcref to MethodInvocation at 1", "INS SimpleName: getToken to MethodInvocation at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SwitchCase to SwitchStatement at 41", "INS IfStatement to Block at 1", "INS SwitchCase to SwitchStatement at 44", "INS SimpleName: FOR_OF to SwitchCase at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: n to MethodInvocation at 2", "INS SwitchCase to SwitchStatement at 37", "INS SwitchStatement to SwitchStatement at 6", "INS SwitchCase to SwitchStatement at 39", "INS ReturnStatement to SwitchStatement at 46", "INS SwitchCase to SwitchStatement at 22", "INS ExpressionStatement to SwitchStatement at 3", "INS SimpleName: body to MethodInvocation at 2", "INS SimpleName: CLASS to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 40", "INS ReturnStatement to SwitchStatement at 21", "INS SimpleName: isStatement to MethodInvocation at 1", "INS VariableDeclarationStatement to SwitchStatement at 5", "INS SimpleName: GETPROP to SwitchCase at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: EMPTY to SwitchCase at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS StringLiteral: \"goog.require\" to MethodInvocation at 2", "INS BooleanLiteral: true to ReturnStatement at 0", "INS ReturnStatement to SwitchStatement at 12", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getToken to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 4", "INS BooleanLiteral: true to ReturnStatement at 0", "INS MethodInvocation to SwitchStatement at 0", "INS SimpleName: addChildBefore to MethodInvocation at 1", "INS ReturnStatement to SwitchStatement at 43", "INS IfStatement to SwitchStatement at 13", "INS SwitchCase to SwitchStatement at 23", "INS SimpleName: ASSIGN to SwitchCase at 0", "INS SwitchStatement to Block at 0", "INS StringLiteral: \"goog.provide\" to MethodInvocation at 2", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: SWITCH to SwitchCase at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: matchesQualifiedName to MethodInvocation at 1", "INS SimpleName: checkState to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 36", "INS SwitchCase to SwitchStatement at 9", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleName: reportCodeChange to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 28", "INS SimpleName: DEFAULT_CASE to SwitchCase at 0", "INS PrefixExpression: ! to InfixExpression: && at 2", "INS MethodInvocation to SwitchStatement at 0", "INS ReturnStatement to SwitchStatement at 25", "INS SimpleName: body to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: parent to MethodInvocation at 2", "INS ReturnStatement to SwitchStatement at 34", "INS SimpleName: WHILE to SwitchCase at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SwitchCase to SwitchStatement at 38", "INS SimpleName: n to MethodInvocation at 3", "INS SimpleName: n to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: DO to SwitchCase at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS PrefixExpression: ! to MethodInvocation at 2", "INS SwitchCase to SwitchStatement at 17", "INS SimpleName: n to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 19", "INS SwitchCase to SwitchStatement at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: IR to MethodInvocation at 0", "INS SimpleName: replaceWith to MethodInvocation at 1", "INS SimpleName: TRY to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 18", "INS Block to IfStatement at 1", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: detach to MethodInvocation at 1", "INS SimpleName: getToken to MethodInvocation at 1", "INS SimpleName: IF to SwitchCase at 0", "INS PrefixExpression: ! to MethodInvocation at 2", "INS SimpleName: callee to VariableDeclarationFragment at 0", "INS SwitchCase to SwitchStatement at 42", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to SwitchStatement at 4", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: initializer to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: checkState to MethodInvocation at 1", "INS ExpressionStatement to SwitchStatement at 45", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: EXPR_RESULT to SwitchCase at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: IMPORT to SwitchCase at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: expr to VariableDeclarationFragment at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: CALL to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 35", "INS SimpleName: block to MethodInvocation at 1", "INS SimpleName: n to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: matchesQualifiedName to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: LET to SwitchCase at 0", "INS SimpleName: body to MethodInvocation at 2", "INS SimpleName: VAR to SwitchCase at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SwitchCase to SwitchStatement at 7", "INS SimpleName: MODULE_BODY to SwitchCase at 0", "INS SimpleName: isConstructor to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 16", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getSecondChild to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 12", "INS ReturnStatement to SwitchStatement at 5", "INS SimpleName: FOR_IN to SwitchCase at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to SwitchStatement at 27", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS ReturnStatement to SwitchStatement at 3"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 7", "MOV SwitchCase to SwitchStatement at 8", "MOV SwitchCase to SwitchStatement at 11", "MOV SwitchCase to SwitchStatement at 9", "MOV SwitchCase to SwitchStatement at 10", "MOV BreakStatement to SwitchStatement at 17"]}, {"root": "UPDATE from DiagnosticType to NodeTraversal", "operations": ["UPD SimpleName: DiagnosticType from DiagnosticType to NodeTraversal"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: warning to MethodInvocation at 1", "MOV SimpleName: DiagnosticType to MethodInvocation at 0"]}, {"root": "UPDATE from warning to traverseEs6", "operations": ["UPD SimpleName: warning from warning to traverseEs6"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 14"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 3", "MOV ExpressionStatement to Block at 0", "MOV SwitchCase to SwitchStatement at 11", "MOV MethodInvocation to SwitchStatement at 0", "MOV SwitchCase to SwitchStatement at 8", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to SwitchStatement at 20", "MOV SwitchCase to SwitchStatement at 5", "MOV SwitchCase to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 6", "MOV SwitchCase to SwitchStatement at 4", "MOV ExpressionStatement to Block at 2", "MOV SwitchCase to SwitchStatement at 2", "MOV ExpressionStatement to Block at 1", "MOV SwitchCase to SwitchStatement at 1", "MOV ExpressionStatement to Block at 3", "MOV SwitchCase to SwitchStatement at 9", "MOV SwitchCase to SwitchStatement at 7"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 30"]}, {"root": "INS Block to SwitchStatement at 8", "operations": ["INS Block to SwitchStatement at 8"]}, {"root": "INS SwitchStatement to SwitchStatement at 12", "operations": ["INS IfStatement to IfStatement at 2", "INS ThrowStatement to SwitchStatement at 12", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SwitchStatement to SwitchStatement at 12", "INS IfStatement to SwitchStatement at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS IfStatement to IfStatement at 2", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS BreakStatement to SwitchStatement at 4", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: expr to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS StringLiteral: \"Unexpected declaration: \" to InfixExpression: + at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV BreakStatement to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 11", "MOV BreakStatement to SwitchStatement at 13", "MOV ExpressionStatement to SwitchStatement at 9", "MOV SwitchCase to SwitchStatement at 5", "MOV SwitchCase to SwitchStatement at 1", "MOV VariableDeclarationStatement to SwitchStatement at 2", "MOV BreakStatement to SwitchStatement at 7", "MOV MethodInvocation to SwitchStatement at 0", "MOV ExpressionStatement to SwitchStatement at 11", "MOV ExpressionStatement to SwitchStatement at 6", "MOV ExpressionStatement to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 8"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: Node to SimpleType: Node at 0"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: Node to SimpleType: Node at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "UPDATE from processName to n", "operations": ["UPD SimpleName: processName from processName to n", "UPD SimpleName: process from process to n"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: t to MethodInvocation at 1", "MOV SimpleName: processName to MethodInvocation at 0"]}, {"root": "UPDATE from t to isScript", "operations": ["UPD SimpleName: t from t to isScript"]}, {"root": "UPDATE from DiagnosticType to RemoveNonDeclarations", "operations": ["UPD SimpleName: DiagnosticType from DiagnosticType to RemoveNonDeclarations"]}, {"root": "MOVE from SimpleType: RemoveNonDeclarations", "operations": ["MOV SimpleName: DiagnosticType to SimpleType: RemoveNonDeclarations at 0"]}, {"root": "UPDATE from RemoveCode to Node", "operations": ["UPD SimpleName: RemoveCode from RemoveCode to Node"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: RemoveCode to SimpleType: Node at 0"]}, {"root": "UPDATE from externs to expr", "operations": ["UPD SimpleName: externs from externs to expr"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: process to MethodInvocation at 0", "MOV SimpleName: externs to MethodInvocation at 0", "MOV SimpleName: root to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV PrefixExpression: ! to InfixExpression: && at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from root to t", "operations": ["UPD SimpleName: root from root to t"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: hasChildren to MethodInvocation at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS SimpleName: n to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "UPDATE from && to ||", "operations": ["UPD InfixExpression: && from && to ||"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "INS PrefixExpression: ! to InfixExpression: && at 0", "operations": ["INS PrefixExpression: ! to InfixExpression: && at 0"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "UPDATE from parent to callee", "operations": ["UPD SimpleName: parent from parent to callee"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parent to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: matchesQualifiedName to MethodInvocation at 1", "MOV StringLiteral: \"goog.scope\" to MethodInvocation at 2"]}, {"root": "UPDATE from \"goog.scope\" to \"goog.module\"", "operations": ["UPD StringLiteral: \"goog.scope\" from \"goog.scope\" to \"goog.module\""]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "INS SimpleName: JsdocUtil to MethodInvocation at 0", "operations": ["INS SimpleName: JsdocUtil to MethodInvocation at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleType: DiagnosticType", "DEL Modifier: static", "DEL StringLiteral: \"goog.scope is not supported inside .i.js files.\"", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL StringLiteral: \"JSC_UNSUPPORTED_GOOG_SCOPE\"", "DEL SimpleName: UNSUPPORTED_GOOG_SCOPE", "DEL FieldDeclaration"]}, {"root": "DEL SimpleName: process", "operations": ["DEL SimpleName: process"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: replaceChild", "DEL MethodInvocation", "DEL SimpleName: n", "DEL SimpleName: parent"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleName: compiler", "DEL SimpleType: RemoveCode"]}, {"root": "DEL SimpleName: RemoveCode", "operations": ["DEL SimpleName: RemoveCode"]}, {"root": "DEL SimpleType: CompilerPass", "operations": ["DEL SimpleType: CompilerPass", "DEL SimpleName: CompilerPass"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: Node", "DEL SimpleName: process", "DEL SimpleName: traverseEs6", "DEL SimpleName: root", "DEL SingleVariableDeclaration", "DEL SimpleType: Node", "DEL SimpleName: compiler", "DEL Block", "DEL SimpleName: root", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: NodeTraversal", "DEL Modifier: public", "DEL SimpleName: externs", "DEL SimpleName: Node", "DEL MethodInvocation", "DEL SimpleType: Node"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: isCall", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: compiler", "DEL SimpleName: removeChildren", "DEL SimpleName: reportChangeToEnclosingScope", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: body", "DEL ExpressionStatement", "DEL SimpleName: parent", "DEL Block", "DEL BreakStatement", "DEL SimpleName: body", "DEL IfStatement"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL MethodInvocation", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: getFirstChild"]}, {"root": "DEL SimpleName: parent", "operations": ["DEL SimpleName: parent"]}, {"root": "DEL SwitchStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: childBefore", "DEL MethodInvocation", "DEL IfStatement", "DEL WhileStatement", "DEL SimpleName: detach", "DEL MethodInvocation", "DEL BreakStatement", "DEL BreakStatement", "DEL SimpleName: getPrevious", "DEL SwitchCase", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleName: removeChild", "DEL SimpleName: childBefore", "DEL SimpleName: childBefore", "DEL IfStatement", "DEL SimpleName: childBefore", "DEL IfStatement", "DEL SwitchCase", "DEL NullLiteral", "DEL SwitchStatement", "DEL SimpleName: report", "DEL SimpleName: n", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleName: getBooleanProp", "DEL Block", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: STRING", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getJSDocInfo", "DEL SimpleName: NUMBER", "DEL IfStatement", "DEL SimpleName: t", "DEL SimpleName: t", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: parent", "DEL ExpressionStatement", "DEL IfStatement", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL SimpleName: reportCodeChange", "DEL IfStatement", "DEL SimpleName: n", "DEL SimpleName: expr", "DEL SimpleName: UNSUPPORTED_GOOG_SCOPE", "DEL SimpleName: n", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL QualifiedName: Node.IS_NAMESPACE", "DEL VariableDeclarationFragment"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: removeChild", "DEL MethodInvocation", "DEL SimpleName: n", "DEL ExpressionStatement", "DEL SimpleName: parent", "DEL SimpleName: NodeUtil"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: t", "DEL SimpleName: reportCodeChange", "DEL MethodInvocation"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: reportCodeChange", "DEL MethodInvocation", "DEL SimpleName: t"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: compiler", "DEL SimpleName: parent", "DEL ExpressionStatement", "DEL SimpleName: replaceChild", "DEL SimpleName: detach", "DEL SimpleName: addChildBefore", "DEL SimpleName: parent", "DEL BreakStatement", "DEL SimpleName: hasOneChild", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: getLoopCodeBlock", "DEL SimpleName: IR", "DEL SimpleName: addChildAfter", "DEL SimpleName: n", "DEL SimpleName: body", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: isAnyFor", "DEL SimpleName: initializer", "DEL SimpleName: parent", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: empty", "DEL SimpleName: n", "DEL SwitchStatement", "DEL BreakStatement", "DEL MethodInvocation", "DEL BreakStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: n", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleName: getFirstChild", "DEL MethodInvocation", "DEL SimpleName: getFirstChild", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL BreakStatement", "DEL SimpleName: NodeUtil", "DEL SimpleName: n", "DEL InfixExpression: &&", "DEL SimpleName: reportCodeChange", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: parent", "DEL SimpleName: detach", "DEL SimpleName: body", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: reportChangeToEnclosingScope", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: t", "DEL SimpleName: NodeUtil", "DEL ExpressionStatement", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: body", "DEL SimpleName: initializer", "DEL SimpleType: Node", "DEL SimpleName: SCRIPT", "DEL BreakStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: initializer", "DEL SwitchCase", "DEL Block", "DEL SimpleName: n", "DEL ConditionalExpression", "DEL SimpleName: initializer"]}]}}, {"ConvertToTypedInterface_diff": {"operations": ["Insert MethodDeclaration(125) into TypeDeclaration: class(2981) at 6", "Insert TypeDeclaration: class(530) into TypeDeclaration: class(2981) at 8", "Insert TypeDeclaration: class(2980) into TypeDeclaration: class(2981) at 18", "Move MarkerAnnotation(90) into MethodDeclaration(125) at 0", "Insert Modifier: public(79) into MethodDeclaration(125) at 1", "Insert PrimitiveType: void(80) into MethodDeclaration(125) at 2", "Insert SimpleName: process(81) into MethodDeclaration(125) at 3", "Move SingleVariableDeclaration(97) into MethodDeclaration(125) at 4", "Move SingleVariableDeclaration(101) into MethodDeclaration(125) at 5", "Insert Block(124) into MethodDeclaration(125) at 6", "Insert Modifier: private(160) into TypeDeclaration: class(530) at 0", "Insert Modifier: static(161) into TypeDeclaration: class(530) at 1", "Insert SimpleName: RemoveNonDeclarations(162) into TypeDeclaration: class(530) at 2", "Insert SimpleType: NodeTraversal.Callback(164) into TypeDeclaration: class(530) at 3", "Move MethodDeclaration(121) into TypeDeclaration: class(530) at 4", "Insert MethodDeclaration(529) into TypeDeclaration: class(530) at 5", "Insert SimpleName: SimplifyDeclarations(911) into TypeDeclaration: class(2187) at 2", "Insert Modifier: private(2504) into TypeDeclaration: class(2980) at 0", "Insert Modifier: static(2505) into TypeDeclaration: class(2980) at 1", "Insert SimpleName: JsdocUtil(2506) into TypeDeclaration: class(2980) at 2", "Move MethodDeclaration(2756) into TypeDeclaration: class(2980) at 3", "Move MethodDeclaration(2779) into TypeDeclaration: class(2980) at 4", "Move MethodDeclaration(2794) into TypeDeclaration: class(2980) at 5", "Move MethodDeclaration(2809) into TypeDeclaration: class(2980) at 6", "Move MethodDeclaration(2826) into TypeDeclaration: class(2980) at 7", "Move MethodDeclaration(2849) into TypeDeclaration: class(2980) at 8", "Move MethodDeclaration(2871) into TypeDeclaration: class(2980) at 9", "Move MethodDeclaration(2908) into TypeDeclaration: class(2980) at 10", "Move MethodDeclaration(2515) into TypeDeclaration: class(2980) at 11", "Move MethodDeclaration(415) into TypeDeclaration: class(2980) at 12", "Move MethodDeclaration(561) into TypeDeclaration: class(2980) at 13", "Insert ExpressionStatement(98) into Block(124) at 0", "Move ExpressionStatement(110) into Block(124) at 1", "Insert VariableDeclarationStatement(116) into Block(124) at 2", "Insert ExpressionStatement(123) into Block(124) at 3", "Insert QualifiedName: NodeTraversal.Callback(163) into SimpleType: NodeTraversal.Callback(164) at 0", "Insert MarkerAnnotation(166) into MethodDeclaration(450) at 0", "Update PrimitiveType: void(92) to boolean", "Insert SimpleName: shouldTraverse(169) into MethodDeclaration(450) at 3", "Insert SingleVariableDeclaration(173) into MethodDeclaration(450) at 4", "Insert SingleVariableDeclaration(177) into MethodDeclaration(450) at 5", "Insert SingleVariableDeclaration(181) into MethodDeclaration(450) at 6", "Move MarkerAnnotation(1221) into MethodDeclaration(529) at 0", "Insert Modifier: public(453) into MethodDeclaration(529) at 1", "Insert PrimitiveType: void(454) into MethodDeclaration(529) at 2", "Insert SimpleName: visit(455) into MethodDeclaration(529) at 3", "Move SingleVariableDeclaration(1228) into MethodDeclaration(529) at 4", "Move SingleVariableDeclaration(1232) into MethodDeclaration(529) at 5", "Move SingleVariableDeclaration(1236) into MethodDeclaration(529) at 6", "Insert Block(528) into MethodDeclaration(529) at 7", "Update SimpleName: RemoveCode(781) to SimplifyDeclarations", "Move MarkerAnnotation(795) into MethodDeclaration(1245) at 0", "Insert SingleVariableDeclaration(1226) into MethodDeclaration(1245) at 4", "Insert SingleVariableDeclaration(1230) into MethodDeclaration(1245) at 5", "Insert SingleVariableDeclaration(1234) into MethodDeclaration(1245) at 6", "Insert Block(1244) into MethodDeclaration(1245) at 7", "Insert MethodInvocation(97) into ExpressionStatement(98) at 0", "Insert SimpleType: SimplifyDeclarations(109) into VariableDeclarationStatement(116) at 0", "Insert VariableDeclarationFragment(115) into VariableDeclarationStatement(116) at 1", "Insert MethodInvocation(122) into ExpressionStatement(123) at 0", "Insert SimpleName: Override(165) into MarkerAnnotation(166) at 0", "Insert SimpleType: NodeTraversal(171) into SingleVariableDeclaration(173) at 0", "Insert SimpleName: t(172) into SingleVariableDeclaration(173) at 1", "Insert SimpleType: Node(175) into SingleVariableDeclaration(177) at 0", "Insert SimpleName: n(176) into SingleVariableDeclaration(177) at 1", "Insert SimpleType: Node(179) into SingleVariableDeclaration(181) at 0", "Insert SimpleName: parent(180) into SingleVariableDeclaration(181) at 1", "Insert SwitchStatement(448) into Block(449) at 0", "Insert SwitchStatement(527) into Block(528) at 0", "Move BreakStatement(1138) into SwitchStatement(1213) at 17", "Insert SimpleType: NodeTraversal(1224) into SingleVariableDeclaration(1226) at 0", "Insert SimpleName: t(1225) into SingleVariableDeclaration(1226) at 1", "Insert SimpleType: Node(1228) into SingleVariableDeclaration(1230) at 0", "Insert SimpleName: n(1229) into SingleVariableDeclaration(1230) at 1", "Insert SimpleType: Node(1232) into SingleVariableDeclaration(1234) at 0", "Insert SimpleName: parent(1233) into SingleVariableDeclaration(1234) at 1", "Insert IfStatement(1243) into Block(1244) at 0", "Insert SimpleName: NodeTraversal(90) into MethodInvocation(97) at 0", "Insert SimpleName: traverseEs6(91) into MethodInvocation(97) at 1", "Insert SimpleName: compiler(92) into MethodInvocation(97) at 2", "Insert SimpleName: root(93) into MethodInvocation(97) at 3", "Insert ClassInstanceCreation(96) into MethodInvocation(97) at 4", "Insert SimpleName: SimplifyDeclarations(108) into SimpleType: SimplifyDeclarations(109) at 0", "Insert SimpleName: simplify(110) into VariableDeclarationFragment(115) at 0", "Insert ClassInstanceCreation(114) into VariableDeclarationFragment(115) at 1", "Update SimpleName: DiagnosticType(62) to NodeTraversal", "Move SimpleName: DiagnosticType(62) into MethodInvocation(122) at 0", "Update SimpleName: warning(63) to traverseEs6", "Move SimpleName: warning(63) into MethodInvocation(122) at 1", "Insert SimpleName: compiler(119) into MethodInvocation(122) at 2", "Insert SimpleName: root(120) into MethodInvocation(122) at 3", "Insert SimpleName: simplify(121) into MethodInvocation(122) at 4", "Insert SimpleName: NodeTraversal(170) into SimpleType: NodeTraversal(171) at 0", "Insert SimpleName: Node(174) into SimpleType: Node(175) at 0", "Insert SimpleName: Node(178) into SimpleType: Node(179) at 0", "Insert MethodInvocation(184) into SwitchStatement(448) at 0", "Insert SwitchCase(186) into SwitchStatement(448) at 1", "Insert IfStatement(225) into SwitchStatement(448) at 2", "Insert ReturnStatement(227) into SwitchStatement(448) at 3", "Insert SwitchCase(229) into SwitchStatement(448) at 4", "Insert VariableDeclarationStatement(237) into SwitchStatement(448) at 5", "Insert SwitchStatement(310) into SwitchStatement(448) at 6", "Move SwitchCase(1193) into SwitchStatement(448) at 7", "Move SwitchCase(1195) into SwitchStatement(448) at 8", "Move SwitchCase(1197) into SwitchStatement(448) at 9", "Move SwitchCase(1199) into SwitchStatement(448) at 10", "Move SwitchCase(1201) into SwitchStatement(448) at 11", "Insert SwitchCase(322) into SwitchStatement(448) at 12", "Insert IfStatement(338) into SwitchStatement(448) at 13", "Move ReturnStatement(1011) into SwitchStatement(448) at 14", "Insert SwitchCase(342) into SwitchStatement(448) at 15", "Insert SwitchCase(344) into SwitchStatement(448) at 16", "Insert SwitchCase(346) into SwitchStatement(448) at 17", "Insert SwitchCase(348) into SwitchStatement(448) at 18", "Insert SwitchCase(350) into SwitchStatement(448) at 19", "Move ExpressionStatement(1275) into SwitchStatement(448) at 20", "Insert ReturnStatement(356) into SwitchStatement(448) at 21", "Insert SwitchCase(358) into SwitchStatement(448) at 22", "Insert SwitchCase(360) into SwitchStatement(448) at 23", "Insert ExpressionStatement(366) into SwitchStatement(448) at 24", "Insert ReturnStatement(368) into SwitchStatement(448) at 25", "Insert SwitchCase(370) into SwitchStatement(448) at 26", "Insert ExpressionStatement(376) into SwitchStatement(448) at 27", "Insert SwitchCase(378) into SwitchStatement(448) at 28", "Insert SwitchCase(380) into SwitchStatement(448) at 29", "Move ExpressionStatement(1398) into SwitchStatement(448) at 30", "Insert VariableDeclarationStatement(396) into SwitchStatement(448) at 31", "Insert IfStatement(407) into SwitchStatement(448) at 32", "Insert ExpressionStatement(412) into SwitchStatement(448) at 33", "Insert ReturnStatement(414) into SwitchStatement(448) at 34", "Insert SwitchCase(416) into SwitchStatement(448) at 35", "Insert SwitchCase(418) into SwitchStatement(448) at 36", "Insert SwitchCase(420) into SwitchStatement(448) at 37", "Insert SwitchCase(422) into SwitchStatement(448) at 38", "Insert SwitchCase(424) into SwitchStatement(448) at 39", "Insert SwitchCase(426) into SwitchStatement(448) at 40", "Insert SwitchCase(428) into SwitchStatement(448) at 41", "Insert SwitchCase(430) into SwitchStatement(448) at 42", "Insert ReturnStatement(432) into SwitchStatement(448) at 43", "Insert SwitchCase(433) into SwitchStatement(448) at 44", "Insert ExpressionStatement(445) into SwitchStatement(448) at 45", "Insert ReturnStatement(447) into SwitchStatement(448) at 46", "Move MethodInvocation(1239) into SwitchStatement(527) at 0", "Move SwitchCase(1248) into SwitchStatement(527) at 1", "Move SwitchCase(1383) into SwitchStatement(527) at 2", "Move SwitchCase(1250) into SwitchStatement(527) at 3", "Move SwitchCase(1271) into SwitchStatement(527) at 4", "Move SwitchCase(1304) into SwitchStatement(527) at 5", "Move SwitchCase(1306) into SwitchStatement(527) at 6", "Move SwitchCase(1308) into SwitchStatement(527) at 7", "Move SwitchCase(1310) into SwitchStatement(527) at 8", "Move SwitchCase(1302) into SwitchStatement(527) at 9", "Move SwitchCase(1267) into SwitchStatement(527) at 10", "Move SwitchCase(1269) into SwitchStatement(527) at 11", "Insert IfStatement(523) into SwitchStatement(527) at 12", "Insert BreakStatement(524) into SwitchStatement(527) at 13", "Insert SwitchCase(525) into SwitchStatement(527) at 14", "Insert BreakStatement(526) into SwitchStatement(527) at 15", "Insert Block(1053) into SwitchStatement(1213) at 8", "Insert SwitchStatement(1156) into SwitchStatement(1213) at 11", "Move BreakStatement(1136) into SwitchStatement(1213) at 13", "Insert SimpleName: NodeTraversal(1223) into SimpleType: NodeTraversal(1224) at 0", "Move SimpleName: Node(1311) into SimpleType: Node(1228) at 0", "Move SimpleName: Node(1334) into SimpleType: Node(1232) at 0", "Insert MethodInvocation(1237) into IfStatement(1243) at 0", "Move Block(1403) into IfStatement(1243) at 1", "Insert SimpleType: RemoveNonDeclarations(95) into ClassInstanceCreation(96) at 0", "Insert SimpleType: SimplifyDeclarations(112) into ClassInstanceCreation(114) at 0", "Insert SimpleName: compiler(113) into ClassInstanceCreation(114) at 1", "Insert SimpleName: n(182) into MethodInvocation(184) at 0", "Insert SimpleName: getToken(183) into MethodInvocation(184) at 1", "Insert SimpleName: FUNCTION(185) into SwitchCase(186) at 0", "Insert PrefixExpression: !(190) into IfStatement(225) at 0", "Insert Block(224) into IfStatement(225) at 1", "Insert BooleanLiteral: true(226) into ReturnStatement(227) at 0", "Insert SimpleName: EXPR_RESULT(228) into SwitchCase(229) at 0", "Insert SimpleType: Node(231) into VariableDeclarationStatement(237) at 0", "Insert VariableDeclarationFragment(236) into VariableDeclarationStatement(237) at 1", "Insert MethodInvocation(240) into SwitchStatement(310) at 0", "Insert SwitchCase(242) into SwitchStatement(310) at 1", "Insert VariableDeclarationStatement(250) into SwitchStatement(310) at 2", "Insert ExpressionStatement(259) into SwitchStatement(310) at 3", "Insert IfStatement(290) into SwitchStatement(310) at 4", "Insert ReturnStatement(292) into SwitchStatement(310) at 5", "Insert SwitchCase(294) into SwitchStatement(310) at 6", "Insert SwitchCase(296) into SwitchStatement(310) at 7", "Insert ReturnStatement(298) into SwitchStatement(310) at 8", "Insert SwitchCase(299) into SwitchStatement(310) at 9", "Move ExpressionStatement(984) into SwitchStatement(310) at 10", "Move ExpressionStatement(988) into SwitchStatement(310) at 11", "Insert ReturnStatement(309) into SwitchStatement(310) at 12", "Insert SimpleName: EMPTY(321) into SwitchCase(322) at 0", "Insert MethodInvocation(326) into IfStatement(338) at 0", "Insert Block(337) into IfStatement(338) at 1", "Insert SimpleName: LABEL(341) into SwitchCase(342) at 0", "Insert SimpleName: IF(343) into SwitchCase(344) at 0", "Insert SimpleName: SWITCH(345) into SwitchCase(346) at 0", "Insert SimpleName: CASE(347) into SwitchCase(348) at 0", "Insert SimpleName: WHILE(349) into SwitchCase(350) at 0", "Insert BooleanLiteral: true(355) into ReturnStatement(356) at 0", "Insert SimpleName: TRY(357) into SwitchCase(358) at 0", "Insert SimpleName: DO(359) into SwitchCase(360) at 0", "Insert MethodInvocation(365) into ExpressionStatement(366) at 0", "Insert BooleanLiteral: true(367) into ReturnStatement(368) at 0", "Insert SimpleName: FOR(369) into SwitchCase(370) at 0", "Insert MethodInvocation(375) into ExpressionStatement(376) at 0", "Insert SimpleName: FOR_OF(377) into SwitchCase(378) at 0", "Insert SimpleName: FOR_IN(379) into SwitchCase(380) at 0", "Move MethodInvocation(1396) into ExpressionStatement(386) at 0", "Move SimpleType: Node(1027) into VariableDeclarationStatement(396) at 0", "Insert VariableDeclarationFragment(395) into VariableDeclarationStatement(396) at 1", "Move MethodInvocation(1352) into IfStatement(407) at 0", "Insert Block(406) into IfStatement(407) at 1", "Insert MethodInvocation(411) into ExpressionStatement(412) at 0", "Insert BooleanLiteral: true(413) into ReturnStatement(414) at 0", "Insert SimpleName: MODULE_BODY(415) into SwitchCase(416) at 0", "Insert SimpleName: VAR(417) into SwitchCase(418) at 0", "Insert SimpleName: CONST(419) into SwitchCase(420) at 0", "Insert SimpleName: LET(421) into SwitchCase(422) at 0", "Insert SimpleName: CLASS(423) into SwitchCase(424) at 0", "Insert SimpleName: DEFAULT_CASE(425) into SwitchCase(426) at 0", "Insert SimpleName: EXPORT(427) into SwitchCase(428) at 0", "Insert SimpleName: IMPORT(429) into SwitchCase(430) at 0", "Insert BooleanLiteral: true(431) into ReturnStatement(432) at 0", "Insert MethodInvocation(444) into ExpressionStatement(445) at 0", "Insert BooleanLiteral: true(446) into ReturnStatement(447) at 0", "Move InfixExpression: !=(1388) into IfStatement(523) at 0", "Insert Block(522) into IfStatement(523) at 1", "Move IfStatement(917) into Block(1053) at 0", "Move ExpressionStatement(923) into Block(1053) at 1", "Move IfStatement(950) into Block(1053) at 2", "Move ReturnStatement(948) into Block(1053) at 3", "Move MethodInvocation(976) into SwitchStatement(1156) at 0", "Move SwitchCase(991) into SwitchStatement(1156) at 1", "Move VariableDeclarationStatement(999) into SwitchStatement(1156) at 2", "Insert IfStatement(1126) into SwitchStatement(1156) at 3", "Insert BreakStatement(1127) into SwitchStatement(1156) at 4", "Move SwitchCase(1101) into SwitchStatement(1156) at 5", "Move ExpressionStatement(1109) into SwitchStatement(1156) at 6", "Move BreakStatement(989) into SwitchStatement(1156) at 7", "Move SwitchCase(1112) into SwitchStatement(1156) at 8", "Move ExpressionStatement(1118) into SwitchStatement(1156) at 9", "Move BreakStatement(1099) into SwitchStatement(1156) at 10", "Move SwitchCase(1120) into SwitchStatement(1156) at 11", "Insert ThrowStatement(1155) into SwitchStatement(1156) at 12", "Update SimpleName: processName(1365) to n", "Move SimpleName: processName(1365) into MethodInvocation(1237) at 0", "Update SimpleName: t(1366) to isScript", "Move SimpleName: t(1366) into MethodInvocation(1237) at 1", "Move ExpressionStatement(1245) into Block(1242) at 0", "Update SimpleName: DiagnosticType(59) to RemoveNonDeclarations", "Move SimpleName: DiagnosticType(59) into SimpleType: RemoveNonDeclarations(95) at 0", "Insert SimpleName: SimplifyDeclarations(111) into SimpleType: SimplifyDeclarations(112) at 0", "Insert MethodInvocation(189) into PrefixExpression: !(190) at 0", "Move VariableDeclarationStatement(931) into Block(224) at 0", "Insert IfStatement(223) into Block(224) at 1", "Update SimpleName: RemoveCode(111) to Node", "Move SimpleName: RemoveCode(111) into SimpleType: Node(231) at 0", "Insert SimpleName: expr(232) into VariableDeclarationFragment(236) at 0", "Insert MethodInvocation(235) into VariableDeclarationFragment(236) at 1", "Update SimpleName: externs(116) to expr", "Move SimpleName: externs(116) into MethodInvocation(240) at 0", "Insert SimpleName: getToken(239) into MethodInvocation(240) at 1", "Insert SimpleName: CALL(241) into SwitchCase(242) at 0", "Insert SimpleType: Node(244) into VariableDeclarationStatement(250) at 0", "Insert VariableDeclarationFragment(249) into VariableDeclarationStatement(250) at 1", "Insert MethodInvocation(258) into ExpressionStatement(259) at 0", "Insert InfixExpression: &&(280) into IfStatement(290) at 0", "Move Block(1093) into IfStatement(290) at 1", "Insert BooleanLiteral: false(291) into ReturnStatement(292) at 0", "Insert SimpleName: ASSIGN(293) into SwitchCase(294) at 0", "Insert SimpleName: GETPROP(295) into SwitchCase(296) at 0", "Insert BooleanLiteral: true(297) into ReturnStatement(298) at 0", "Insert BooleanLiteral: false(308) into ReturnStatement(309) at 0", "Insert SimpleName: NodeUtil(323) into MethodInvocation(326) at 0", "Insert SimpleName: isStatementParent(324) into MethodInvocation(326) at 1", "Insert SimpleName: parent(325) into MethodInvocation(326) at 2", "Move ExpressionStatement(1333) into Block(337) at 0", "Move ExpressionStatement(1052) into Block(337) at 1", "Insert MethodInvocation(363) into MethodInvocation(365) at 0", "Insert SimpleName: detach(364) into MethodInvocation(365) at 1", "Insert MethodInvocation(373) into MethodInvocation(375) at 0", "Insert SimpleName: detach(374) into MethodInvocation(375) at 1", "Insert SimpleName: initializer(389) into VariableDeclarationFragment(395) at 0", "Move MethodInvocation(1258) into VariableDeclarationFragment(395) at 1", "Insert ExpressionStatement(405) into Block(406) at 0", "Update SimpleName: root(117) to t", "Move SimpleName: root(117) into MethodInvocation(411) at 0", "Insert SimpleName: reportCodeChange(409) into MethodInvocation(411) at 1", "Insert SimpleName: parent(410) into MethodInvocation(411) at 2", "Insert SimpleName: Preconditions(434) into MethodInvocation(444) at 0", "Insert SimpleName: checkState(435) into MethodInvocation(444) at 1", "Insert PrefixExpression: !(440) into MethodInvocation(444) at 2", "Insert MethodInvocation(443) into MethodInvocation(444) at 3", "Move VariableDeclarationStatement(1283) into Block(522) at 0", "Move ExpressionStatement(1289) into Block(522) at 1", "Move ExpressionStatement(1295) into Block(522) at 2", "Move ExpressionStatement(1264) into Block(522) at 3", "Insert SimpleName: JsdocUtil(659) into MethodInvocation(663) at 0", "Insert InfixExpression: &&(1043) into IfStatement(1050) at 0", "Move MethodInvocation(1016) into IfStatement(1126) at 0", "Insert Block(1090) into IfStatement(1126) at 1", "Insert IfStatement(1125) into IfStatement(1126) at 2", "Insert ClassInstanceCreation(1154) into ThrowStatement(1155) at 0", "Insert SimpleName: JsdocUtil(2303) into MethodInvocation(2306) at 0", "Insert SimpleName: isConstructor(187) into MethodInvocation(189) at 0", "Insert SimpleName: n(188) into MethodInvocation(189) at 1", "Update InfixExpression: &&(938) to ||", "Move InfixExpression: &&(938) into IfStatement(223) at 0", "Insert Block(222) into IfStatement(223) at 1", "Update SimpleName: process(115) to n", "Move SimpleName: process(115) into MethodInvocation(235) at 0", "Insert SimpleName: getFirstChild(234) into MethodInvocation(235) at 1", "Insert SimpleName: Node(243) into SimpleType: Node(244) at 0", "Insert SimpleName: callee(245) into VariableDeclarationFragment(249) at 0", "Insert MethodInvocation(248) into VariableDeclarationFragment(249) at 1", "Insert SimpleName: Preconditions(251) into MethodInvocation(258) at 0", "Insert SimpleName: checkState(252) into MethodInvocation(258) at 1", "Insert PrefixExpression: !(257) into MethodInvocation(258) at 2", "Insert PrefixExpression: !(264) into InfixExpression: &&(280) at 0", "Insert PrefixExpression: !(269) into InfixExpression: &&(280) at 1", "Insert PrefixExpression: !(274) into InfixExpression: &&(280) at 2", "Move PrefixExpression: !(1084) into InfixExpression: &&(280) at 3", "Insert SimpleName: n(361) into MethodInvocation(363) at 0", "Insert SimpleName: getSecondChild(362) into MethodInvocation(363) at 1", "Insert SimpleName: n(371) into MethodInvocation(373) at 0", "Insert SimpleName: getSecondChild(372) into MethodInvocation(373) at 1", "Insert MethodInvocation(404) into ExpressionStatement(405) at 0", "Insert MethodInvocation(439) into PrefixExpression: !(440) at 0", "Insert SimpleName: n(441) into MethodInvocation(443) at 0", "Insert SimpleName: getToken(442) into MethodInvocation(443) at 1", "Move MethodInvocation(941) into InfixExpression: &&(1043) at 0", "Insert MethodInvocation(1042) into InfixExpression: &&(1043) at 1", "Move ExpressionStatement(1025) into Block(1090) at 0", "Move MethodInvocation(1059) into IfStatement(1125) at 0", "Move Block(1070) into IfStatement(1125) at 1", "Insert IfStatement(1124) into IfStatement(1125) at 2", "Insert SimpleType: RuntimeException(1150) into ClassInstanceCreation(1154) at 0", "Insert InfixExpression: +(1153) into ClassInstanceCreation(1154) at 1", "Insert SimpleName: JsdocUtil(2213) into MethodInvocation(2215) at 0", "Insert PrefixExpression: !(202) into InfixExpression: ||(206) at 0", "Insert ExpressionStatement(211) into Block(222) at 0", "Insert ExpressionStatement(221) into Block(222) at 1", "Insert SimpleName: expr(246) into MethodInvocation(248) at 0", "Insert SimpleName: getFirstChild(247) into MethodInvocation(248) at 1", "Move MethodInvocation(1003) into PrefixExpression: !(257) at 0", "Insert MethodInvocation(263) into PrefixExpression: !(264) at 0", "Insert MethodInvocation(268) into PrefixExpression: !(269) at 0", "Insert MethodInvocation(273) into PrefixExpression: !(274) at 0", "Insert SimpleName: parent(400) into MethodInvocation(404) at 0", "Insert SimpleName: addChildBefore(401) into MethodInvocation(404) at 1", "Insert SimpleName: initializer(402) into MethodInvocation(404) at 2", "Insert SimpleName: n(403) into MethodInvocation(404) at 3", "Insert SimpleName: NodeUtil(436) into MethodInvocation(439) at 0", "Insert SimpleName: isStatement(437) into MethodInvocation(439) at 1", "Insert SimpleName: n(438) into MethodInvocation(439) at 2", "Insert SimpleName: JsdocUtil(689) into MethodInvocation(693) at 0", "Insert MethodInvocation(1040) into MethodInvocation(1042) at 0", "Insert SimpleName: hasChildren(1041) into MethodInvocation(1042) at 1", "Move MethodInvocation(1074) into IfStatement(1124) at 0", "Move Block(1079) into IfStatement(1124) at 1", "Move Block(901) into IfStatement(1124) at 2", "Insert SimpleName: RuntimeException(1149) into SimpleType: RuntimeException(1150) at 0", "Insert StringLiteral: \"Unexpected declaration: \"(1151) into InfixExpression: +(1153) at 0", "Insert SimpleName: expr(1152) into InfixExpression: +(1153) at 1", "Insert SimpleName: JsdocUtil(1915) into MethodInvocation(1920) at 0", "Move MethodInvocation(934) into PrefixExpression: !(202) at 0", "Insert MethodInvocation(210) into ExpressionStatement(211) at 0", "Insert MethodInvocation(220) into ExpressionStatement(221) at 0", "Insert SimpleName: callee(260) into MethodInvocation(263) at 0", "Insert SimpleName: matchesQualifiedName(261) into MethodInvocation(263) at 1", "Insert StringLiteral: \"goog.provide\"(262) into MethodInvocation(263) at 2", "Insert SimpleName: callee(265) into MethodInvocation(268) at 0", "Insert SimpleName: matchesQualifiedName(266) into MethodInvocation(268) at 1", "Insert StringLiteral: \"goog.define\"(267) into MethodInvocation(268) at 2", "Insert SimpleName: callee(270) into MethodInvocation(273) at 0", "Insert SimpleName: matchesQualifiedName(271) into MethodInvocation(273) at 1", "Insert StringLiteral: \"goog.require\"(272) into MethodInvocation(273) at 2", "Insert SimpleName: n(1038) into MethodInvocation(1040) at 0", "Insert SimpleName: getLastChild(1039) into MethodInvocation(1040) at 1", "Insert SimpleName: t(207) into MethodInvocation(210) at 0", "Insert SimpleName: reportCodeChange(208) into MethodInvocation(210) at 1", "Insert SimpleName: body(209) into MethodInvocation(210) at 2", "Insert SimpleName: body(212) into MethodInvocation(220) at 0", "Insert SimpleName: replaceWith(213) into MethodInvocation(220) at 1", "Insert MethodInvocation(219) into MethodInvocation(220) at 2", "Insert SimpleName: JsdocUtil(1853) into MethodInvocation(1855) at 0", "Insert SimpleName: JsdocUtil(1900) into MethodInvocation(1905) at 0", "Insert MethodInvocation(216) into MethodInvocation(219) at 0", "Insert SimpleName: srcref(217) into MethodInvocation(219) at 1", "Insert SimpleName: body(218) into MethodInvocation(219) at 2", "Insert MethodInvocation(1120) into MethodInvocation(1121) at 2", "Insert SimpleName: JsdocUtil(1801) into MethodInvocation(1804) at 0", "Insert SimpleName: IR(214) into MethodInvocation(216) at 0", "Insert SimpleName: block(215) into MethodInvocation(216) at 1", "Update SimpleName: parent(891) to callee", "Move SimpleName: parent(891) into MethodInvocation(1120) at 0", "Move SimpleName: matchesQualifiedName(894) into MethodInvocation(1120) at 1", "Update StringLiteral: \"goog.scope\"(895) to \"goog.module\"", "Move StringLiteral: \"goog.scope\"(895) into MethodInvocation(1120) at 2", "Insert SimpleName: JsdocUtil(1511) into MethodInvocation(1513) at 0", "Insert SimpleName: JsdocUtil(1523) into MethodInvocation(1528) at 0", "Delete Modifier: static(57)", "Delete Modifier: final(58)", "Delete SimpleType: DiagnosticType(60)", "Delete SimpleName: UNSUPPORTED_GOOG_SCOPE(61)", "Delete StringLiteral: \"JSC_UNSUPPORTED_GOOG_SCOPE\"(64)", "Delete StringLiteral: \"goog.scope is not supported inside .i.js files.\"(65)", "Delete MethodInvocation(66)", "Delete VariableDeclarationFragment(67)", "Delete FieldDeclaration(68)", "Delete SimpleName: process(93)", "Delete SimpleName: parent(1389)", "Delete SimpleName: replaceChild(1390)", "Delete SimpleName: n(1391)", "Delete MethodInvocation(1397)", "Delete SimpleType: RemoveCode(112)", "Delete SimpleName: compiler(113)", "Delete ClassInstanceCreation(114)", "Delete MethodInvocation(118)", "Delete ExpressionStatement(119)", "Delete SimpleName: RemoveCode(759)", "Delete SimpleName: CompilerPass(760)", "Delete SimpleType: CompilerPass(761)", "Delete Modifier: public(796)", "Delete PrimitiveType: void(797)", "Delete SimpleName: process(798)", "Delete SimpleName: Node(799)", "Delete SimpleType: Node(800)", "Delete SimpleName: externs(801)", "Delete SingleVariableDeclaration(802)", "Delete SimpleName: Node(803)", "Delete SimpleType: Node(804)", "Delete SimpleName: root(805)", "Delete SingleVariableDeclaration(806)", "Delete SimpleName: NodeTraversal(807)", "Delete SimpleName: traverseEs6(808)", "Delete SimpleName: compiler(809)", "Delete SimpleName: root(810)", "Delete ThisExpression(811)", "Delete MethodInvocation(812)", "Delete ExpressionStatement(813)", "Delete Block(814)", "Delete MethodDeclaration(815)", "Delete SimpleName: parent(886)", "Delete SimpleName: isCall(887)", "Delete MethodInvocation(888)", "Delete IfStatement(902)", "Delete SimpleName: body(951)", "Delete SimpleName: removeChildren(952)", "Delete MethodInvocation(953)", "Delete ExpressionStatement(954)", "Delete SimpleName: compiler(955)", "Delete SimpleName: reportChangeToEnclosingScope(956)", "Delete SimpleName: body(957)", "Delete MethodInvocation(958)", "Delete ExpressionStatement(959)", "Delete Block(960)", "Delete IfStatement(961)", "Delete BreakStatement(962)", "Delete Block(963)", "Delete SimpleName: getFirstChild(892)", "Delete MethodInvocation(893)", "Delete MethodInvocation(896)", "Delete PrefixExpression: !(897)", "Delete SimpleName: parent(898)", "Delete SimpleName: NUMBER(977)", "Delete SwitchCase(978)", "Delete SimpleName: STRING(979)", "Delete SwitchCase(980)", "Delete SimpleName: t(1004)", "Delete SimpleName: report(1005)", "Delete SimpleName: n(1006)", "Delete SimpleName: UNSUPPORTED_GOOG_SCOPE(1007)", "Delete MethodInvocation(1008)", "Delete ExpressionStatement(1009)", "Delete Block(1012)", "Delete SimpleName: childBefore(1028)", "Delete VariableDeclarationFragment(1029)", "Delete VariableDeclarationStatement(1030)", "Delete NullLiteral(1031)", "Delete SimpleName: childBefore(1032)", "Delete SimpleName: n(1033)", "Delete SimpleName: getPrevious(1034)", "Delete MethodInvocation(1035)", "Delete Assignment: =(1036)", "Delete ParenthesizedExpression(1037)", "Delete InfixExpression: !=(1038)", "Delete SimpleName: childBefore(1039)", "Delete SimpleName: getBooleanProp(1040)", "Delete QualifiedName: Node.IS_NAMESPACE(1041)", "Delete MethodInvocation(1042)", "Delete InfixExpression: &&(1043)", "Delete SimpleName: parent(1044)", "Delete SimpleName: removeChild(1045)", "Delete SimpleName: childBefore(1046)", "Delete MethodInvocation(1047)", "Delete ExpressionStatement(1048)", "Delete Block(1053)", "Delete WhileStatement(1054)", "Delete Block(1055)", "Delete IfStatement(1094)", "Delete IfStatement(1095)", "Delete IfStatement(1096)", "Delete IfStatement(1097)", "Delete IfStatement(1098)", "Delete BreakStatement(1110)", "Delete BreakStatement(1119)", "Delete SimpleName: expr(1121)", "Delete SimpleName: getJSDocInfo(1122)", "Delete MethodInvocation(1123)", "Delete NullLiteral(1124)", "Delete InfixExpression: ==(1125)", "Delete SimpleName: n(1126)", "Delete SimpleName: detach(1127)", "Delete MethodInvocation(1128)", "Delete ExpressionStatement(1129)", "Delete SimpleName: t(1130)", "Delete SimpleName: reportCodeChange(1131)", "Delete MethodInvocation(1132)", "Delete ExpressionStatement(1133)", "Delete Block(1134)", "Delete IfStatement(1135)", "Delete SwitchStatement(1137)", "Delete BreakStatement(1191)", "Delete SimpleName: NodeUtil(1202)", "Delete SimpleName: removeChild(1203)", "Delete SimpleName: parent(1204)", "Delete SimpleName: n(1205)", "Delete MethodInvocation(1206)", "Delete ExpressionStatement(1207)", "Delete SimpleName: t(1208)", "Delete SimpleName: reportCodeChange(1209)", "Delete MethodInvocation(1210)", "Delete ExpressionStatement(1211)", "Delete BreakStatement(1212)", "Delete SimpleName: t(1399)", "Delete SimpleName: reportCodeChange(1400)", "Delete MethodInvocation(1401)", "Delete ExpressionStatement(1402)", "Delete SimpleName: SCRIPT(1240)", "Delete SwitchCase(1241)", "Delete BreakStatement(1246)", "Delete SimpleName: parent(1251)", "Delete SimpleName: replaceChild(1252)", "Delete SimpleName: n(1253)", "Delete MethodInvocation(1259)", "Delete ExpressionStatement(1260)", "Delete BreakStatement(1265)", "Delete SimpleName: t(1296)", "Delete SimpleName: reportCodeChange(1297)", "Delete MethodInvocation(1298)", "Delete ExpressionStatement(1299)", "Delete BreakStatement(1300)", "Delete SimpleType: Node(1312)", "Delete SimpleName: body(1313)", "Delete SimpleName: NodeUtil(1314)", "Delete SimpleName: getLoopCodeBlock(1315)", "Delete SimpleName: n(1316)", "Delete MethodInvocation(1317)", "Delete VariableDeclarationFragment(1318)", "Delete VariableDeclarationStatement(1319)", "Delete SimpleName: parent(1320)", "Delete SimpleName: addChildAfter(1321)", "Delete SimpleName: body(1322)", "Delete SimpleName: detach(1323)", "Delete MethodInvocation(1324)", "Delete SimpleName: n(1325)", "Delete MethodInvocation(1326)", "Delete ExpressionStatement(1327)", "Delete SimpleType: Node(1335)", "Delete SimpleName: initializer(1336)", "Delete SimpleName: NodeUtil(1337)", "Delete SimpleName: isAnyFor(1338)", "Delete SimpleName: n(1339)", "Delete MethodInvocation(1340)", "Delete SimpleName: n(1341)", "Delete SimpleName: getFirstChild(1342)", "Delete MethodInvocation(1343)", "Delete SimpleName: IR(1344)", "Delete SimpleName: empty(1345)", "Delete MethodInvocation(1346)", "Delete ConditionalExpression(1347)", "Delete VariableDeclarationFragment(1348)", "Delete VariableDeclarationStatement(1349)", "Delete SimpleName: initializer(1353)", "Delete SimpleName: hasOneChild(1354)", "Delete MethodInvocation(1355)", "Delete InfixExpression: &&(1356)", "Delete SimpleName: parent(1357)", "Delete SimpleName: addChildBefore(1358)", "Delete SimpleName: initializer(1359)", "Delete SimpleName: detach(1360)", "Delete MethodInvocation(1361)", "Delete SimpleName: body(1362)", "Delete MethodInvocation(1363)", "Delete ExpressionStatement(1364)", "Delete SimpleName: initializer(1367)", "Delete SimpleName: getFirstChild(1368)", "Delete MethodInvocation(1369)", "Delete SimpleName: initializer(1370)", "Delete MethodInvocation(1371)", "Delete ExpressionStatement(1372)", "Delete Block(1373)", "Delete IfStatement(1374)", "Delete SimpleName: compiler(1375)", "Delete SimpleName: reportChangeToEnclosingScope(1376)", "Delete SimpleName: parent(1377)", "Delete MethodInvocation(1378)", "Delete ExpressionStatement(1379)", "Delete BreakStatement(1380)", "Delete Block(1381)", "Delete IfStatement(1404)", "Delete BreakStatement(1405)", "Delete SwitchCase(1406)", "Delete BreakStatement(1407)", "Delete SwitchStatement(1408)", "Delete Block(1409)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}