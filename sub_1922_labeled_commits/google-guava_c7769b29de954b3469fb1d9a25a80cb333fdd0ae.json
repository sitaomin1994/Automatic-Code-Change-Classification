{"application": "google-guava", "csha": "c7769b29de954b3469fb1d9a25a80cb333fdd0ae", "files": [{"ByteSink_cluster": {"actions": [{"root": "UPDATE from  for writing to this sink. This method should return a new, to  for writing to this sink. This method returns a new,", "operations": ["UPD TextElement:  for writing to this sink. This method should return a new, from  for writing to this sink. This method should return a new, to  for writing to this sink. This method returns a new,"]}, {"root": "UPDATE from  if an I/O error occurs in the process of opening the stream to  if an I/O error occurs while opening the stream", "operations": ["UPD TextElement:  if an I/O error occurs in the process of opening the stream from  if an I/O error occurs in the process of opening the stream to  if an I/O error occurs while opening the stream", "UPD TextElement:  if an I/O error occurs in the process of opening the stream from  if an I/O error occurs in the process of opening the stream to  if an I/O error occurs while opening the stream"]}, {"root": "UPDATE from ). This method should return to ). This method returns a new,", "operations": ["UPD TextElement: ). This method should return from ). This method should return to ). This method returns a new,"]}, {"root": "UPDATE from a new, independent stream each time it is called. to independent stream each time it is called.", "operations": ["UPD TextElement: a new, independent stream each time it is called. from a new, independent stream each time it is called. to independent stream each time it is called."]}, {"root": "UPDATE from  if an I/O occurs in the process of writing to this sink to  if an I/O occurs while writing to this sink", "operations": ["UPD TextElement:  if an I/O occurs in the process of writing to this sink from  if an I/O occurs in the process of writing to this sink to  if an I/O occurs while writing to this sink"]}, {"root": "UPDATE from  if an I/O occurs in the process of reading from  to  if an I/O occurs while reading from ", "operations": ["UPD TextElement:  if an I/O occurs in the process of reading from  from  if an I/O occurs in the process of reading from  to  if an I/O occurs while reading from "]}, {"root": "UPDATE from  or writing to to  or writing to this sink", "operations": ["UPD TextElement:  or writing to from  or writing to to  or writing to this sink"]}, {"root": "DEL TextElement: this sink", "operations": ["DEL TextElement: this sink"]}]}}, {"ByteSink_diff": {"operations": ["Update TextElement:  for writing to this sink. This method should return a new,(95) to  for writing to this sink. This method returns a new,", "Update TextElement:  if an I/O error occurs in the process of opening the stream(100) to  if an I/O error occurs while opening the stream", "Update TextElement: ). This method should return(127) to ). This method returns a new,", "Update TextElement: a new, independent stream each time it is called.(128) to independent stream each time it is called.", "Update TextElement:  if an I/O error occurs in the process of opening the stream(132) to  if an I/O error occurs while opening the stream", "Update TextElement:  if an I/O occurs in the process of writing to this sink(173) to  if an I/O occurs while writing to this sink", "Update TextElement:  if an I/O occurs in the process of reading from (248) to  if an I/O occurs while reading from ", "Update TextElement:  or writing to(251) to  or writing to this sink", "Delete TextElement: this sink(252)"]}}, {"ByteSource_cluster": {"actions": [{"root": "UPDATE from  for reading from this source. This method should return a new, to  for reading from this source. This method returns a new,", "operations": ["UPD TextElement:  for reading from this source. This method should return a new, from  for reading from this source. This method should return a new, to  for reading from this source. This method returns a new,"]}, {"root": "UPDATE from  if an I/O error occurs in the process of opening the stream to  if an I/O error occurs while opening the stream", "operations": ["UPD TextElement:  if an I/O error occurs in the process of opening the stream from  if an I/O error occurs in the process of opening the stream to  if an I/O error occurs while opening the stream", "UPD TextElement:  if an I/O error occurs in the process of opening the stream from  if an I/O error occurs in the process of opening the stream to  if an I/O error occurs while opening the stream"]}, {"root": "UPDATE from ). This method should return a to ). This method returns a", "operations": ["UPD TextElement: ). This method should return a from ). This method should return a to ). This method returns a"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading the size of this source to  if an I/O error occurs while reading the size of this source", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading the size of this source from  if an I/O error occurs in the process of reading the size of this source to  if an I/O error occurs while reading the size of this source"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or writing to", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source or from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or writing to", "UPD TextElement:  if an I/O error occurs in the process of reading from this source or from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or writing to"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source", "UPD TextElement:  if an I/O error occurs in the process of reading from this source from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source or if to  if an I/O error occurs while reading from this source or if", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source or if from  if an I/O error occurs in the process of reading from this source or if to  if an I/O error occurs while reading from this source or if"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or ", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source or from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or "]}, {"root": "DEL TextElement: writing to ", "operations": ["DEL TextElement: writing to "]}, {"root": "DEL TextElement: writing to ", "operations": ["DEL TextElement: writing to "]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}]}}, {"ByteSource_diff": {"operations": ["Update TextElement:  for reading from this source. This method should return a new,(131) to  for reading from this source. This method returns a new,", "Update TextElement:  if an I/O error occurs in the process of opening the stream(136) to  if an I/O error occurs while opening the stream", "Update TextElement: ). This method should return a(163) to ). This method returns a", "Update TextElement:  if an I/O error occurs in the process of opening the stream(168) to  if an I/O error occurs while opening the stream", "Update TextElement:  if an I/O error occurs in the process of reading the size of this source(418) to  if an I/O error occurs while reading the size of this source", "Update TextElement:  if an I/O error occurs in the process of reading from this source or(573) to  if an I/O error occurs while reading from this source or writing to", "Update TextElement:  if an I/O error occurs in the process of reading from this source or(646) to  if an I/O error occurs while reading from this source or writing to", "Update TextElement:  if an I/O error occurs in the process of reading from this source(725) to  if an I/O error occurs while reading from this source", "Update TextElement:  if an I/O error occurs in the process of reading from this source or if(789) to  if an I/O error occurs while reading from this source or if", "Update TextElement:  if an I/O error occurs in the process of reading from this source(869) to  if an I/O error occurs while reading from this source", "Update TextElement:  if an I/O error occurs in the process of reading from this source or(907) to  if an I/O error occurs while reading from this source or ", "Delete TextElement: writing to (574)", "Delete TextElement: writing to (647)", "Delete Modifier: private(1239)", "Delete Modifier: final(1240)"]}}, {"CharSink_cluster": {"actions": [{"root": "UPDATE from  for writing to this sink. This method should return a new, to  for writing to this sink. This method returns a new, independent", "operations": ["UPD TextElement:  for writing to this sink. This method should return a new, from  for writing to this sink. This method should return a new, to  for writing to this sink. This method returns a new, independent"]}, {"root": "UPDATE from independent writer each time it is called. to writer each time it is called.", "operations": ["UPD TextElement: independent writer each time it is called. from independent writer each time it is called. to writer each time it is called."]}, {"root": "UPDATE from  if an I/O error occurs in the process of opening the writer to  if an I/O error occurs while opening the writer", "operations": ["UPD TextElement:  if an I/O error occurs in the process of opening the writer from  if an I/O error occurs in the process of opening the writer to  if an I/O error occurs while opening the writer", "UPD TextElement:  if an I/O error occurs in the process of opening the writer from  if an I/O error occurs in the process of opening the writer to  if an I/O error occurs while opening the writer"]}, {"root": "UPDATE from buffering. This method should return a new, independent writer each time it is called. to buffering. This method returns a new, independent writer each time it is called.", "operations": ["UPD TextElement: buffering. This method should return a new, independent writer each time it is called. from buffering. This method should return a new, independent writer each time it is called. to buffering. This method returns a new, independent writer each time it is called."]}, {"root": "UPDATE from  if an I/O error in the process of writing to this sink to  if an I/O error while writing to this sink", "operations": ["UPD TextElement:  if an I/O error in the process of writing to this sink from  if an I/O error in the process of writing to this sink to  if an I/O error while writing to this sink"]}, {"root": "UPDATE from  if an I/O error occurs in the process of writing to this sink to  if an I/O error occurs while writing to this sink", "operations": ["UPD TextElement:  if an I/O error occurs in the process of writing to this sink from  if an I/O error occurs in the process of writing to this sink to  if an I/O error occurs while writing to this sink", "UPD TextElement:  if an I/O error occurs in the process of writing to this sink from  if an I/O error occurs in the process of writing to this sink to  if an I/O error occurs while writing to this sink"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from  to  if an I/O error occurs while reading from ", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from  from  if an I/O error occurs in the process of reading from  to  if an I/O error occurs while reading from "]}, {"root": "UPDATE from  or to  or writing to", "operations": ["UPD TextElement:  or from  or to  or writing to"]}, {"root": "UPDATE from writing to this sink to this sink", "operations": ["UPD TextElement: writing to this sink from writing to this sink to this sink"]}]}}, {"CharSink_diff": {"operations": ["Update TextElement:  for writing to this sink. This method should return a new,(88) to  for writing to this sink. This method returns a new, independent", "Update TextElement: independent writer each time it is called.(89) to writer each time it is called.", "Update TextElement:  if an I/O error occurs in the process of opening the writer(93) to  if an I/O error occurs while opening the writer", "Update TextElement: buffering. This method should return a new, independent writer each time it is called.(116) to buffering. This method returns a new, independent writer each time it is called.", "Update TextElement:  if an I/O error occurs in the process of opening the writer(120) to  if an I/O error occurs while opening the writer", "Update TextElement:  if an I/O error in the process of writing to this sink(161) to  if an I/O error while writing to this sink", "Update TextElement:  if an I/O error occurs in the process of writing to this sink(231) to  if an I/O error occurs while writing to this sink", "Update TextElement:  if an I/O error occurs in the process of writing to this sink(261) to  if an I/O error occurs while writing to this sink", "Update TextElement:  if an I/O error occurs in the process of reading from (364) to  if an I/O error occurs while reading from ", "Update TextElement:  or(367) to  or writing to", "Update TextElement: writing to this sink(368) to this sink"]}}, {"CharSource_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: com.google.common.collect.Streams to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: com.google.errorprone.annotations.MustBeClosed to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: java.io.UncheckedIOException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 22", "operations": ["INS QualifiedName: java.util.stream.Stream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 22"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: onClose to MethodInvocation at 1", "INS SimpleName: lines to MethodDeclaration at 5", "INS TextElement:  is thrown. to TagElement at 7", "INS SimpleName: readLine to MemberRef at 1", "INS TextElement: <p>The caller is responsible for ensuring that the returned stream is closed. For example: to TagElement at 19", "INS TextElement:  \\r to TagElement: @code at 0", "INS TextElement: lines.map(...) to TagElement: @code at 1", "INS TagElement: @link to TagElement at 9", "INS ExpressionStatement to Block at 0", "INS TextElement: , this method considers a line to be a sequence of text to TagElement at 10", "INS Block to LambdaExpression at 0", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SimpleName: Beta to MarkerAnnotation at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: lines to MethodInvocation at 1", "INS TextElement: the source's content does not end in a line termination sequence, it is treated as if it does. to TagElement at 18", "INS SimpleName: BufferedReader to MemberRef at 0", "INS TryStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS TagElement: @code to TagElement at 16", "INS SimpleName: Stream to SimpleType: Stream at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ReturnStatement to Block at 1", "INS TagElement: @code to TagElement at 21", "INS TextElement: .filter(...) to TagElement: @code at 2", "INS TagElement: @code to TagElement at 14", "INS TextElement: returns a new, independent stream each time it is called. to TagElement at 3", "INS TextElement: . If to TagElement at 17", "INS SimpleType: Stream to ParameterizedType: Stream<String> at 0", "INS SimpleName: close to MethodInvocation at 1", "INS LambdaExpression to MethodInvocation at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ParameterizedType: Stream<String> to MethodDeclaration at 4", "INS ThrowStatement to Block at 0", "INS TextElement:  for reading text one line at a time from this source. This method to TagElement at 2", "INS TextElement: }</pre> to TagElement at 22", "INS SimpleType: UncheckedIOException to ClassInstanceCreation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS TextElement: Opens a new  to TagElement at 0", "INS TextElement: <p>Like  to TagElement at 8", "INS Block to MethodDeclaration at 7", "INS TextElement: that is terminated by (but does not include) one of  to TagElement at 11", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: openBufferedStream to MethodInvocation at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Stream to TagElement: @link at 0", "INS SimpleName: BufferedReader to SimpleType: BufferedReader at 0", "INS SimpleName: reader to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 3", "INS TagElement: @link to TagElement at 6", "INS SimpleName: IOException to TagElement: @throws at 0", "INS TextElement:  \\n to TagElement: @code at 0", "INS Block to TryStatement at 0", "INS TextElement:  if an I/O error occurs while opening the stream to TagElement: @throws at 1", "INS MemberRef to TagElement: @link at 0", "INS TagElement: @throws to Javadoc at 1", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS TextElement:  or  to TagElement at 15", "INS TextElement: <p>The returned stream is lazy and only reads from the source in the terminal operation. If an to TagElement at 4", "INS SimpleName: UncheckedIOException to SimpleType: UncheckedIOException at 0", "INS TextElement: I/O error occurs while the stream is reading from the source or when the stream is closed, an to TagElement at 5", "INS SimpleName: reader to VariableDeclarationFragment at 0", "INS TextElement: ,  to TagElement at 13", "INS TextElement: <pre> to TagElement at 20", "INS TagElement to Javadoc at 0", "INS TagElement: @since to Javadoc at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: reader to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS CatchClause to TryStatement at 1", "INS TagElement: @link to TagElement at 1", "INS TextElement:  22.0 to TagElement: @since at 0", "INS TextElement: .forEach(...); to TagElement: @code at 3", "INS SimpleName: UncheckedIOException to TagElement: @link at 0", "INS Block to CatchClause at 1", "INS SimpleType: BufferedReader to VariableDeclarationStatement at 0", "INS SimpleName: MustBeClosed to MarkerAnnotation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TextElement: try (Stream<String> lines = source.lines())  to TagElement: @code at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "MOVE from ParameterizedType: Stream<String>", "operations": ["MOV SimpleType: String to ParameterizedType: Stream<String> at 1"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 10", "MOV TagElement: @code to TagElement at 6"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 12", "MOV TagElement: @code to TagElement at 9"]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 13", "MOV TagElement: @code to TagElement at 9"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: Returns an iterator over the lines in the string. If the string ends in a newline, a final to TagElement at 0", "INS TextElement: empty string is not included, to match the behavior of BufferedReader/LineReader.readLine(). to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from iterator to linesIterator", "operations": ["UPD SimpleName: iterator from iterator to linesIterator", "UPD SimpleName: lines from lines to linesIterator", "UPD SimpleName: iterator from iterator to linesIterator"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "UPDATE from Iterable<String> to Stream<String>", "operations": ["UPD ParameterizedType: Iterable<String> from Iterable<String> to Stream<String>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from  for reading from this source. This method should return a new, to  for reading from this source. This method returns a new, independent", "operations": ["UPD TextElement:  for reading from this source. This method should return a new, from  for reading from this source. This method should return a new, to  for reading from this source. This method returns a new, independent"]}, {"root": "UPDATE from independent reader each time it is called. to reader each time it is called.", "operations": ["UPD TextElement: independent reader each time it is called. from independent reader each time it is called. to reader each time it is called."]}, {"root": "UPDATE from  if an I/O error occurs in the process of opening the reader to  if an I/O error occurs while opening the reader", "operations": ["UPD TextElement:  if an I/O error occurs in the process of opening the reader from  if an I/O error occurs in the process of opening the reader to  if an I/O error occurs while opening the reader"]}, {"root": "UPDATE from  for reading from this source. This method should return a to  for reading from this source. This method returns a new,", "operations": ["UPD TextElement:  for reading from this source. This method should return a from  for reading from this source. This method should return a to  for reading from this source. This method returns a new,"]}, {"root": "UPDATE from new, independent reader each time it is called. to independent reader each time it is called.", "operations": ["UPD TextElement: new, independent reader each time it is called. from new, independent reader each time it is called. to independent reader each time it is called."]}, {"root": "UPDATE from  if an I/O error occurs in the process of opening the reader to  if an I/O error occurs while of opening the reader", "operations": ["UPD TextElement:  if an I/O error occurs in the process of opening the reader from  if an I/O error occurs in the process of opening the reader to  if an I/O error occurs while of opening the reader"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading the length of this source to  if an I/O error occurs while reading the length of this source", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading the length of this source from  if an I/O error occurs in the process of reading the length of this source to  if an I/O error occurs while reading the length of this source"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or writing to", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source or from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or writing to", "UPD TextElement:  if an I/O error occurs in the process of reading from this source or from  if an I/O error occurs in the process of reading from this source or to  if an I/O error occurs while reading from this source or writing to"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source", "UPD TextElement:  if an I/O error occurs in the process of reading from this source from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source", "UPD TextElement:  if an I/O error occurs in the process of reading from this source from  if an I/O error occurs in the process of reading from this source to  if an I/O error occurs while reading from this source"]}, {"root": "UPDATE from , this method breaks lines on any of  to , this method considers a line to be a sequence of text", "operations": ["UPD TextElement: , this method breaks lines on any of  from , this method breaks lines on any of  to , this method considers a line to be a sequence of text", "UPD TextElement: , this method breaks lines on any of  from , this method breaks lines on any of  to , this method considers a line to be a sequence of text", "UPD TextElement: , this method breaks lines on any of  from , this method breaks lines on any of  to , this method considers a line to be a sequence of text"]}, {"root": "INS TextElement: that is terminated by (but does not include) one of  to TagElement at 6", "operations": ["INS TextElement: that is terminated by (but does not include) one of  to TagElement at 6"]}, {"root": "UPDATE from  or to  or ", "operations": ["UPD TextElement:  or from  or to  or ", "UPD TextElement:  or from  or to  or ", "UPD TextElement:  or from  or to  or "]}, {"root": "UPDATE from , does not include the line separator in the returned lines and does not consider to . If", "operations": ["UPD TextElement: , does not include the line separator in the returned lines and does not consider from , does not include the line separator in the returned lines and does not consider to . If", "UPD TextElement: , does not include the line separator in the lines passed to the  from , does not include the line separator in the lines passed to the  to . If", "UPD TextElement: , does not include the line separator in the returned line and does not consider from , does not include the line separator in the returned line and does not consider to . If"]}, {"root": "UPDATE from there to be an extra empty line at the end if the content is terminated with a line separator. to the source's content does not end in a line termination sequence, it is treated as if it does.", "operations": ["UPD TextElement: there to be an extra empty line at the end if the content is terminated with a line separator. from there to be an extra empty line at the end if the content is terminated with a line separator. to the source's content does not end in a line termination sequence, it is treated as if it does.", "UPD TextElement: there to be an extra empty line at the end if the content is terminated with a line separator. from there to be an extra empty line at the end if the content is terminated with a line separator. to the source's content does not end in a line termination sequence, it is treated as if it does.", "UPD TextElement: and does not consider there to be an extra empty line at the end if the content is terminated from and does not consider there to be an extra empty line at the end if the content is terminated to the source's content does not end in a line termination sequence, it is treated as if it does."]}, {"root": "INS TextElement: that is terminated by (but does not include) one of  to TagElement at 5", "operations": ["INS TextElement: that is terminated by (but does not include) one of  to TagElement at 5"]}, {"root": "INS TagElement: @code to TagElement at 6", "operations": ["INS TextElement:  \\r\\n to TagElement: @code at 0", "INS TagElement: @code to TagElement at 6"]}, {"root": "INS TextElement: that is terminated by (but does not include) one of  to TagElement at 9", "operations": ["INS TextElement: that is terminated by (but does not include) one of  to TagElement at 9"]}, {"root": "UPDATE from  if an I/O error occurs in the process of reading from this source or if to  if an I/O error occurs while reading from this source or if", "operations": ["UPD TextElement:  if an I/O error occurs in the process of reading from this source or if from  if an I/O error occurs in the process of reading from this source or if to  if an I/O error occurs while reading from this source or if"]}, {"root": "UPDATE from Iterable to Stream", "operations": ["UPD SimpleType: Iterable from Iterable to Stream", "UPD SimpleName: Iterable from Iterable to Stream"]}, {"root": "MOVE from ParameterizedType: Iterable<String>", "operations": ["MOV SimpleType: String to ParameterizedType: Iterable<String> at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<String> at 0", "INS ParameterizedType: Iterator<String> to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to ParameterizedType: Iterator<String> at 1", "INS SimpleName: lines to VariableDeclarationFragment at 0", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS SimpleName: linesIterator to MethodInvocation at 0"]}, {"root": "INS WhileStatement to Block at 1", "operations": ["INS WhileStatement to Block at 1", "INS Block to WhileStatement at 1", "INS SimpleName: hasNext to MethodInvocation at 1", "INS MethodInvocation to WhileStatement at 0"]}, {"root": "INS MemberRef to TagElement: @link at 0", "operations": ["INS SimpleName: BufferedReader to MemberRef at 0", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: readLine to MemberRef at 1"]}, {"root": "INS MemberRef to TagElement: @link at 0", "operations": ["INS MemberRef to TagElement: @link at 0", "INS SimpleName: readLine to MemberRef at 1", "INS SimpleName: BufferedReader to MemberRef at 0"]}, {"root": "INS MemberRef to TagElement: @link at 0", "operations": ["INS SimpleName: readLine to MemberRef at 1", "INS MemberRef to TagElement: @link at 0", "INS SimpleName: BufferedReader to MemberRef at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: stream to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: linesIterator to MethodInvocation at 0", "INS SimpleName: Streams to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: lines to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: next to MethodInvocation at 1"]}, {"root": "UPDATE from line to lines", "operations": ["UPD SimpleName: line from line to lines"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: line to MethodInvocation at 0"]}, {"root": "DEL TextElement: writing to ", "operations": ["DEL TextElement: writing to "]}, {"root": "DEL TextElement: writing to ", "operations": ["DEL TextElement: writing to "]}, {"root": "DEL SimpleName: BufferedReader", "operations": ["DEL SimpleName: BufferedReader"]}, {"root": "DEL SimpleName: BufferedReader", "operations": ["DEL SimpleName: BufferedReader"]}, {"root": "DEL SimpleName: BufferedReader", "operations": ["DEL SimpleName: BufferedReader"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  processor"]}, {"root": "DEL TextElement: with a line separator.", "operations": ["DEL TextElement: with a line separator."]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Returns an iterable over the lines in the string. If the string ends in a newline, a final", "DEL TagElement", "DEL Javadoc", "DEL TextElement: empty string is not included to match the behavior of BufferedReader/LineReader.readLine()."]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ParameterizedType: Iterable<String>", "DEL SimpleType: Iterable", "DEL ClassInstanceCreation", "DEL SimpleName: Iterable", "DEL AnonymousClassDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: lines", "DEL MethodInvocation"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: line", "DEL SimpleType: String", "DEL EnhancedForStatement", "DEL Block", "DEL MethodInvocation"]}]}}, {"CharSource_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(1919) at 10", "Insert ImportDeclaration(25) into CompilationUnit(1919) at 12", "Insert ImportDeclaration(35) into CompilationUnit(1919) at 17", "Insert ImportDeclaration(45) into CompilationUnit(1919) at 22", "Insert QualifiedName: com.google.common.collect.Streams(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: com.google.errorprone.annotations.MustBeClosed(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: java.io.UncheckedIOException(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: java.util.stream.Stream(44) into ImportDeclaration(45) at 0", "Insert MethodDeclaration(317) into TypeDeclaration: class(1918) at 9", "Insert Javadoc(270) into MethodDeclaration(317) at 0", "Insert MarkerAnnotation(272) into MethodDeclaration(317) at 1", "Insert MarkerAnnotation(274) into MethodDeclaration(317) at 2", "Insert Modifier: public(275) into MethodDeclaration(317) at 3", "Insert ParameterizedType: Stream<String>(280) into MethodDeclaration(317) at 4", "Insert SimpleName: lines(281) into MethodDeclaration(317) at 5", "Insert SimpleType: IOException(283) into MethodDeclaration(317) at 6", "Insert Block(316) into MethodDeclaration(317) at 7", "Move MethodDeclaration(1491) into TypeDeclaration: class(1706) at 12", "Insert TagElement(264) into Javadoc(270) at 0", "Insert TagElement: @throws(267) into Javadoc(270) at 1", "Insert TagElement: @since(269) into Javadoc(270) at 2", "Insert SimpleName: Beta(271) into MarkerAnnotation(272) at 0", "Insert SimpleName: MustBeClosed(273) into MarkerAnnotation(274) at 0", "Insert SimpleType: Stream(277) into ParameterizedType: Stream<String>(280) at 0", "Move SimpleType: String(1415) into ParameterizedType: Stream<String>(280) at 1", "Insert SimpleName: IOException(282) into SimpleType: IOException(283) at 0", "Insert VariableDeclarationStatement(290) into Block(316) at 0", "Insert ReturnStatement(315) into Block(316) at 1", "Move TagElement: @code(628) into TagElement(735) at 10", "Move TagElement: @code(634) into TagElement(735) at 6", "Move TagElement: @code(699) into TagElement(809) at 9", "Move TagElement: @code(810) into TagElement(923) at 13", "Move TagElement: @code(816) into TagElement(923) at 9", "Insert Javadoc(1511) into MethodDeclaration(1578) at 0", "Update Modifier: public(1425) to private", "Update SimpleName: iterator(1431) to linesIterator", "Move MarkerAnnotation(1527) into MethodDeclaration(1595) at 0", "Update Modifier: private(1411) to public", "Update ParameterizedType: Iterable<String>(1416) to Stream<String>", "Move MarkerAnnotation(1424) into MethodDeclaration(1639) at 0", "Update TextElement:  for reading from this source. This method should return a new,(164) to  for reading from this source. This method returns a new, independent", "Update TextElement: independent reader each time it is called.(165) to reader each time it is called.", "Update TextElement:  if an I/O error occurs in the process of opening the reader(169) to  if an I/O error occurs while opening the reader", "Update TextElement:  for reading from this source. This method should return a(183) to  for reading from this source. This method returns a new,", "Update TextElement: new, independent reader each time it is called.(184) to independent reader each time it is called.", "Update TextElement:  if an I/O error occurs in the process of opening the reader(188) to  if an I/O error occurs while of opening the reader", "Insert TextElement: Opens a new (229) into TagElement(264) at 0", "Insert TagElement: @link(231) into TagElement(264) at 1", "Insert TextElement:  for reading text one line at a time from this source. This method(232) into TagElement(264) at 2", "Insert TextElement: returns a new, independent stream each time it is called.(233) into TagElement(264) at 3", "Insert TextElement: <p>The returned stream is lazy and only reads from the source in the terminal operation. If an(234) into TagElement(264) at 4", "Insert TextElement: I/O error occurs while the stream is reading from the source or when the stream is closed, an(235) into TagElement(264) at 5", "Insert TagElement: @link(237) into TagElement(264) at 6", "Insert TextElement:  is thrown.(238) into TagElement(264) at 7", "Insert TextElement: <p>Like (239) into TagElement(264) at 8", "Insert TagElement: @link(243) into TagElement(264) at 9", "Insert TextElement: , this method considers a line to be a sequence of text(244) into TagElement(264) at 10", "Insert TextElement: that is terminated by (but does not include) one of (245) into TagElement(264) at 11", "Move TagElement: @code(705) into TagElement(264) at 12", "Insert TextElement: , (248) into TagElement(264) at 13", "Insert TagElement: @code(250) into TagElement(264) at 14", "Insert TextElement:  or (251) into TagElement(264) at 15", "Insert TagElement: @code(253) into TagElement(264) at 16", "Insert TextElement: . If(254) into TagElement(264) at 17", "Insert TextElement: the source's content does not end in a line termination sequence, it is treated as if it does.(255) into TagElement(264) at 18", "Insert TextElement: <p>The caller is responsible for ensuring that the returned stream is closed. For example:(256) into TagElement(264) at 19", "Insert TextElement: <pre>(257) into TagElement(264) at 20", "Insert TagElement: @code(262) into TagElement(264) at 21", "Insert TextElement: }</pre>(263) into TagElement(264) at 22", "Insert SimpleName: IOException(265) into TagElement: @throws(267) at 0", "Insert TextElement:  if an I/O error occurs while opening the stream(266) into TagElement: @throws(267) at 1", "Insert TextElement:  22.0(268) into TagElement: @since(269) at 0", "Insert SimpleName: Stream(276) into SimpleType: Stream(277) at 0", "Insert SimpleType: BufferedReader(285) into VariableDeclarationStatement(290) at 0", "Insert VariableDeclarationFragment(289) into VariableDeclarationStatement(290) at 1", "Insert MethodInvocation(314) into ReturnStatement(315) at 0", "Update TextElement:  if an I/O error occurs in the process of reading the length of this source(290) to  if an I/O error occurs while reading the length of this source", "Update TextElement:  if an I/O error occurs in the process of reading from this source or(418) to  if an I/O error occurs while reading from this source or writing to", "Update TextElement:  if an I/O error occurs in the process of reading from this source or(488) to  if an I/O error occurs while reading from this source or writing to", "Update TextElement:  if an I/O error occurs in the process of reading from this source(567) to  if an I/O error occurs while reading from this source", "Update TextElement: , this method breaks lines on any of (626) to , this method considers a line to be a sequence of text", "Insert TextElement: that is terminated by (but does not include) one of (724) into TagElement(735) at 6", "Update TextElement:  or(632) to  or ", "Update TextElement: , does not include the line separator in the returned line and does not consider(635) to . If", "Update TextElement: there to be an extra empty line at the end if the content is terminated with a line separator.(636) to the source's content does not end in a line termination sequence, it is treated as if it does.", "Update TextElement:  if an I/O error occurs in the process of reading from this source(639) to  if an I/O error occurs while reading from this source", "Update TextElement: , this method breaks lines on any of (697) to , this method considers a line to be a sequence of text", "Insert TextElement: that is terminated by (but does not include) one of (798) into TagElement(809) at 5", "Insert TagElement: @code(800) into TagElement(809) at 6", "Update TextElement:  or(703) to  or ", "Update TextElement: , does not include the line separator in the returned lines and does not consider(706) to . If", "Update TextElement: there to be an extra empty line at the end if the content is terminated with a line separator.(707) to the source's content does not end in a line termination sequence, it is treated as if it does.", "Update TextElement:  if an I/O error occurs in the process of reading from this source(710) to  if an I/O error occurs while reading from this source", "Update TextElement: , this method breaks lines on any of (808) to , this method considers a line to be a sequence of text", "Insert TextElement: that is terminated by (but does not include) one of (912) into TagElement(923) at 9", "Update TextElement:  or(814) to  or ", "Update TextElement: , does not include the line separator in the lines passed to the (817) to . If", "Update TextElement: and does not consider there to be an extra empty line at the end if the content is terminated(820) to the source's content does not end in a line termination sequence, it is treated as if it does.", "Update TextElement:  if an I/O error occurs in the process of reading from this source or if(824) to  if an I/O error occurs while reading from this source or if", "Insert TagElement(1510) into Javadoc(1511) at 0", "Update SimpleType: Iterable(1413) to Stream", "Move SimpleType: String(1421) into ParameterizedType: Stream<String>(1586) at 1", "Insert VariableDeclarationStatement(1666) into Block(1686) at 0", "Insert WhileStatement(1681) into Block(1686) at 1", "Insert SimpleName: Stream(230) into TagElement: @link(231) at 0", "Insert SimpleName: UncheckedIOException(236) into TagElement: @link(237) at 0", "Insert MemberRef(242) into TagElement: @link(243) at 0", "Insert TextElement:  \\r(249) into TagElement: @code(250) at 0", "Insert TextElement:  \\n(252) into TagElement: @code(253) at 0", "Insert TextElement: try (Stream<String> lines = source.lines()) (258) into TagElement: @code(262) at 0", "Insert TextElement: lines.map(...)(259) into TagElement: @code(262) at 1", "Insert TextElement: .filter(...)(260) into TagElement: @code(262) at 2", "Insert TextElement: .forEach(...);(261) into TagElement: @code(262) at 3", "Insert SimpleName: BufferedReader(284) into SimpleType: BufferedReader(285) at 0", "Insert SimpleName: reader(286) into VariableDeclarationFragment(289) at 0", "Insert MethodInvocation(288) into VariableDeclarationFragment(289) at 1", "Insert MethodInvocation(293) into MethodInvocation(314) at 0", "Insert SimpleName: onClose(294) into MethodInvocation(314) at 1", "Insert LambdaExpression(313) into MethodInvocation(314) at 2", "Insert MemberRef(721) into TagElement: @link(722) at 0", "Insert MemberRef(795) into TagElement: @link(796) at 0", "Insert TextElement:  \\r\\n(799) into TagElement: @code(800) at 0", "Insert MemberRef(909) into TagElement: @link(910) at 0", "Insert TextElement: Returns an iterator over the lines in the string. If the string ends in a newline, a final(1508) into TagElement(1510) at 0", "Insert TextElement: empty string is not included, to match the behavior of BufferedReader/LineReader.readLine().(1509) into TagElement(1510) at 1", "Update SimpleName: Iterable(1412) to Stream", "Insert MethodInvocation(1592) into ReturnStatement(1593) at 0", "Insert ParameterizedType: Iterator<String>(1661) into VariableDeclarationStatement(1666) at 0", "Insert VariableDeclarationFragment(1665) into VariableDeclarationStatement(1666) at 1", "Insert MethodInvocation(1669) into WhileStatement(1681) at 0", "Insert Block(1680) into WhileStatement(1681) at 1", "Insert SimpleName: BufferedReader(240) into MemberRef(242) at 0", "Insert SimpleName: readLine(241) into MemberRef(242) at 1", "Insert SimpleName: openBufferedStream(287) into MethodInvocation(288) at 0", "Insert SimpleName: reader(291) into MethodInvocation(293) at 0", "Insert SimpleName: lines(292) into MethodInvocation(293) at 1", "Insert Block(312) into LambdaExpression(313) at 0", "Insert SimpleName: BufferedReader(719) into MemberRef(721) at 0", "Insert SimpleName: readLine(720) into MemberRef(721) at 1", "Insert SimpleName: BufferedReader(793) into MemberRef(795) at 0", "Insert SimpleName: readLine(794) into MemberRef(795) at 1", "Insert SimpleName: BufferedReader(907) into MemberRef(909) at 0", "Insert SimpleName: readLine(908) into MemberRef(909) at 1", "Insert SimpleName: Streams(1588) into MethodInvocation(1592) at 0", "Insert SimpleName: stream(1589) into MethodInvocation(1592) at 1", "Insert MethodInvocation(1591) into MethodInvocation(1592) at 2", "Insert SimpleType: Iterator(1658) into ParameterizedType: Iterator<String>(1661) at 0", "Insert SimpleType: String(1660) into ParameterizedType: Iterator<String>(1661) at 1", "Insert SimpleName: lines(1662) into VariableDeclarationFragment(1665) at 0", "Insert MethodInvocation(1664) into VariableDeclarationFragment(1665) at 1", "Move SimpleName: lines(1564) into MethodInvocation(1669) at 0", "Insert SimpleName: hasNext(1668) into MethodInvocation(1669) at 1", "Move IfStatement(1573) into Block(1680) at 0", "Insert TryStatement(311) into Block(312) at 0", "Insert SimpleName: linesIterator(1590) into MethodInvocation(1591) at 0", "Update SimpleName: iterator(1511) to linesIterator", "Update SimpleName: lines(1537) to linesIterator", "Insert SimpleName: Iterator(1657) into SimpleType: Iterator(1658) at 0", "Move SimpleName: String(1560) into SimpleType: String(1660) at 0", "Insert SimpleName: linesIterator(1663) into MethodInvocation(1664) at 0", "Insert Block(299) into TryStatement(311) at 0", "Insert CatchClause(310) into TryStatement(311) at 1", "Insert ExpressionStatement(298) into Block(299) at 0", "Insert SingleVariableDeclaration(303) into CatchClause(310) at 0", "Insert Block(309) into CatchClause(310) at 1", "Insert MethodInvocation(1674) into MethodInvocation(1675) at 2", "Insert MethodInvocation(297) into ExpressionStatement(298) at 0", "Insert SimpleType: IOException(301) into SingleVariableDeclaration(303) at 0", "Insert SimpleName: e(302) into SingleVariableDeclaration(303) at 1", "Insert ThrowStatement(308) into Block(309) at 0", "Update SimpleName: line(1568) to lines", "Move SimpleName: line(1568) into MethodInvocation(1674) at 0", "Insert SimpleName: next(1673) into MethodInvocation(1674) at 1", "Insert SimpleName: reader(295) into MethodInvocation(297) at 0", "Insert SimpleName: close(296) into MethodInvocation(297) at 1", "Insert SimpleName: IOException(300) into SimpleType: IOException(301) at 0", "Insert ClassInstanceCreation(307) into ThrowStatement(308) at 0", "Insert SimpleType: UncheckedIOException(305) into ClassInstanceCreation(307) at 0", "Insert SimpleName: e(306) into ClassInstanceCreation(307) at 1", "Insert SimpleName: UncheckedIOException(304) into SimpleType: UncheckedIOException(305) at 0", "Delete TextElement: writing to (419)", "Delete TextElement: writing to (489)", "Delete SimpleName: BufferedReader(624)", "Delete SimpleName: BufferedReader(695)", "Delete SimpleName: BufferedReader(806)", "Delete TextElement:  processor(818)", "Delete TagElement: @code(819)", "Delete TextElement: with a line separator.(821)", "Delete TextElement: Returns an iterable over the lines in the string. If the string ends in a newline, a final(1407)", "Delete TextElement: empty string is not included to match the behavior of BufferedReader/LineReader.readLine().(1408)", "Delete TagElement(1409)", "Delete Javadoc(1410)", "Delete SimpleName: Iterable(1418)", "Delete SimpleType: Iterable(1419)", "Delete ParameterizedType: Iterable<String>(1422)", "Delete AnonymousClassDeclaration(1492)", "Delete ClassInstanceCreation(1493)", "Delete SimpleName: lines(1509)", "Delete MethodInvocation(1510)", "Delete SimpleType: String(1561)", "Delete SimpleName: line(1562)", "Delete SingleVariableDeclaration(1563)", "Delete MethodInvocation(1565)", "Delete Block(1574)", "Delete EnhancedForStatement(1575)"]}}, {"MoreFiles_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: com.google.common.io.ByteSource.AsCharSource to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 36", "operations": ["INS QualifiedName: java.util.stream.Stream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 36"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS ReturnStatement to Block at 1", "INS SimpleName: asCharSource to SuperMethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS SimpleType: AsCharSource to ClassInstanceCreation at 0", "INS QualifiedName: options.length to InfixExpression: == at 0", "INS MethodInvocation to ReturnStatement at 0", "INS StringLiteral: \"FilesLinesLeak\" to SingleMemberAnnotation at 1", "INS SimpleName: path to MethodInvocation at 2", "INS SimpleType: Charset to SingleVariableDeclaration at 0", "INS SimpleName: charset to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: CharSource to MethodDeclaration at 2", "INS SimpleType: String to ParameterizedType: Stream<String> at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SuperMethodInvocation to ReturnStatement at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleName: lines to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Files to MethodInvocation at 0", "INS SimpleName: AsCharSource to SimpleType: AsCharSource at 0", "INS SimpleName: CharSource to SimpleType: CharSource at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: charset to ClassInstanceCreation at 1", "INS SimpleType: Stream to ParameterizedType: Stream<String> at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: lines to MethodInvocation at 1", "INS SimpleName: charset to MethodInvocation at 3", "INS SimpleName: Charset to SimpleType: Charset at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS IfStatement to Block at 0", "INS ParameterizedType: Stream<String> to MethodDeclaration at 3", "INS SimpleName: asCharSource to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 5", "INS InfixExpression: == to IfStatement at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 2", "INS SimpleName: Stream to SimpleType: Stream at 0", "INS MarkerAnnotation to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: charset to SuperMethodInvocation at 1"]}]}}, {"MoreFiles_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(2485) at 9", "Insert ImportDeclaration(73) into CompilationUnit(2485) at 36", "Insert QualifiedName: com.google.common.io.ByteSource.AsCharSource(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: java.util.stream.Stream(72) into ImportDeclaration(73) at 0", "Insert MethodDeclaration(490) into TypeDeclaration: class(509) at 16", "Insert MarkerAnnotation(443) into MethodDeclaration(490) at 0", "Insert Modifier: public(444) into MethodDeclaration(490) at 1", "Insert SimpleType: CharSource(446) into MethodDeclaration(490) at 2", "Insert SimpleName: asCharSource(447) into MethodDeclaration(490) at 3", "Insert SingleVariableDeclaration(451) into MethodDeclaration(490) at 4", "Insert Block(489) into MethodDeclaration(490) at 5", "Insert SimpleName: Override(442) into MarkerAnnotation(443) at 0", "Insert SimpleName: CharSource(445) into SimpleType: CharSource(446) at 0", "Insert SimpleType: Charset(449) into SingleVariableDeclaration(451) at 0", "Insert SimpleName: charset(450) into SingleVariableDeclaration(451) at 1", "Insert IfStatement(484) into Block(489) at 0", "Insert ReturnStatement(488) into Block(489) at 1", "Insert SimpleName: Charset(448) into SimpleType: Charset(449) at 0", "Insert InfixExpression: ==(454) into IfStatement(484) at 0", "Insert Block(483) into IfStatement(484) at 1", "Insert SuperMethodInvocation(487) into ReturnStatement(488) at 0", "Insert QualifiedName: options.length(452) into InfixExpression: ==(454) at 0", "Insert NumberLiteral: 0(453) into InfixExpression: ==(454) at 1", "Insert ReturnStatement(482) into Block(483) at 0", "Insert SimpleName: asCharSource(485) into SuperMethodInvocation(487) at 0", "Insert SimpleName: charset(486) into SuperMethodInvocation(487) at 1", "Insert ClassInstanceCreation(481) into ReturnStatement(482) at 0", "Insert SimpleType: AsCharSource(456) into ClassInstanceCreation(481) at 0", "Insert SimpleName: charset(457) into ClassInstanceCreation(481) at 1", "Insert AnonymousClassDeclaration(480) into ClassInstanceCreation(481) at 2", "Insert SimpleName: AsCharSource(455) into SimpleType: AsCharSource(456) at 0", "Insert MethodDeclaration(479) into AnonymousClassDeclaration(480) at 0", "Insert SingleMemberAnnotation(460) into MethodDeclaration(479) at 0", "Insert MarkerAnnotation(462) into MethodDeclaration(479) at 1", "Insert Modifier: public(463) into MethodDeclaration(479) at 2", "Insert ParameterizedType: Stream<String>(468) into MethodDeclaration(479) at 3", "Insert SimpleName: lines(469) into MethodDeclaration(479) at 4", "Insert SimpleType: IOException(471) into MethodDeclaration(479) at 5", "Insert Block(478) into MethodDeclaration(479) at 6", "Insert SimpleName: SuppressWarnings(458) into SingleMemberAnnotation(460) at 0", "Insert StringLiteral: \"FilesLinesLeak\"(459) into SingleMemberAnnotation(460) at 1", "Insert SimpleName: Override(461) into MarkerAnnotation(462) at 0", "Insert SimpleType: Stream(465) into ParameterizedType: Stream<String>(468) at 0", "Insert SimpleType: String(467) into ParameterizedType: Stream<String>(468) at 1", "Insert SimpleName: IOException(470) into SimpleType: IOException(471) at 0", "Insert ReturnStatement(477) into Block(478) at 0", "Insert SimpleName: Stream(464) into SimpleType: Stream(465) at 0", "Insert SimpleName: String(466) into SimpleType: String(467) at 0", "Insert MethodInvocation(476) into ReturnStatement(477) at 0", "Insert SimpleName: Files(472) into MethodInvocation(476) at 0", "Insert SimpleName: lines(473) into MethodInvocation(476) at 1", "Insert SimpleName: path(474) into MethodInvocation(476) at 2", "Insert SimpleName: charset(475) into MethodInvocation(476) at 3"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "True"}]}