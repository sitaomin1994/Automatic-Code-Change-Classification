{"application": "google-gson", "csha": "751c69c655c9317a7169e24e452d3931ec956761", "files": [{"StringMap_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: get to MethodDeclaration at 3", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: entry to InfixExpression: != at 0", "INS QualifiedName: entry.value to ConditionalExpression at 1", "INS SimpleName: getEntry to MethodInvocation at 0", "INS SimpleType: LinkedEntry to ParameterizedType: LinkedEntry<K,V> at 0", "INS SimpleName: entry to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Modifier: public to MethodDeclaration at 1", "INS NullLiteral to ConditionalExpression at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: V to SimpleType: V at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS ReturnStatement to Block at 1", "INS ParameterizedType: LinkedEntry<K,V> to VariableDeclarationStatement at 0", "INS SimpleName: K to SimpleType: K at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: key to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: LinkedEntry to SimpleType: LinkedEntry at 0", "INS SimpleName: key to MethodInvocation at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS Block to MethodDeclaration at 5", "INS SimpleType: K to ParameterizedType: LinkedEntry<K,V> at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: V to ParameterizedType: LinkedEntry<K,V> at 2", "INS SimpleType: Object to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: V to MethodDeclaration at 2"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "INS ParameterizedType: LinkedEntry<K,V> to MethodDeclaration at 1", "operations": ["INS SimpleType: LinkedEntry to ParameterizedType: LinkedEntry<K,V> at 0", "INS SimpleName: V to SimpleType: V at 0", "INS ParameterizedType: LinkedEntry<K,V> to MethodDeclaration at 1", "INS SimpleType: K to ParameterizedType: LinkedEntry<K,V> at 1", "INS SimpleName: LinkedEntry to SimpleType: LinkedEntry at 0", "INS SimpleType: V to ParameterizedType: LinkedEntry<K,V> at 2", "INS SimpleName: K to SimpleType: K at 0"]}, {"root": "UPDATE from get to getEntry", "operations": ["UPD SimpleName: get from get to getEntry", "UPD SimpleName: get from get to getEntry"]}, {"root": "UPDATE from well defined: it is the order that elements were inserted into the map. to well defined: it is the order that elements were inserted into the map. This", "operations": ["UPD TextElement: well defined: it is the order that elements were inserted into the map. from well defined: it is the order that elements were inserted into the map. to well defined: it is the order that elements were inserted into the map. This"]}, {"root": "INS TextElement: map does not support null keys. to TagElement at 2", "operations": ["INS TextElement: map does not support null keys. to TagElement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: eValue to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleType: Object to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV InfixExpression: == to ConditionalExpression at 0", "MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: secondaryHash to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: value to MethodInvocation at 0", "MOV SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 1", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: eValue to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS SimpleName: eValue to MethodInvocation at 2", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS InfixExpression: == to ConditionalExpression at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hashCode to MethodInvocation at 1", "MOV SimpleName: key to MethodInvocation at 0"]}, {"root": "UPDATE from IllegalArgumentException to NullPointerException", "operations": ["UPD SimpleType: IllegalArgumentException from IllegalArgumentException to NullPointerException", "UPD SimpleName: IllegalArgumentException from IllegalArgumentException to NullPointerException"]}, {"root": "INS StringLiteral: \"key == null\" to ClassInstanceCreation at 1", "operations": ["INS StringLiteral: \"key == null\" to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: e to ReturnStatement at 0", "operations": ["INS SimpleName: e to ReturnStatement at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV InfixExpression: == to ConditionalExpression at 0"]}, {"root": "INS ConditionalExpression to IfStatement at 0", "operations": ["INS QualifiedName: e.value to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to IfStatement at 0", "INS InfixExpression: != to ConditionalExpression at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV PrefixExpression: ! to ConditionalExpression at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL InfixExpression: >>>", "DEL SimpleName: hash", "DEL ExpressionStatement", "DEL NumberLiteral: 20", "DEL NumberLiteral: 12", "DEL SimpleName: hash", "DEL SimpleName: hash", "DEL Assignment: ^=", "DEL InfixExpression: ^", "DEL ParenthesizedExpression", "DEL ParenthesizedExpression", "DEL InfixExpression: >>>"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL InfixExpression: ^", "DEL ParenthesizedExpression", "DEL InfixExpression: >>>", "DEL NumberLiteral: 7", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL InfixExpression: >>>", "DEL SimpleName: hash", "DEL Assignment: ^=", "DEL SimpleName: hash", "DEL NumberLiteral: 4", "DEL SimpleName: hash"]}, {"root": "DEL QualifiedName: e.value", "operations": ["DEL QualifiedName: e.value"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL SimpleName: value", "DEL NullLiteral"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalArgumentException", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleName: IllegalArgumentException"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL InfixExpression: ||"]}]}}, {"StringMap_diff": {"operations": ["Insert MethodDeclaration(267) into TypeDeclaration: class(2092) at 20", "Move MarkerAnnotation(236) into MethodDeclaration(267) at 0", "Insert Modifier: public(238) into MethodDeclaration(267) at 1", "Move SimpleType: V(239) into MethodDeclaration(267) at 2", "Insert SimpleName: get(241) into MethodDeclaration(267) at 3", "Insert SingleVariableDeclaration(245) into MethodDeclaration(267) at 4", "Insert Block(266) into MethodDeclaration(267) at 5", "Update Modifier: public(237) to private", "Insert ParameterizedType: LinkedEntry<K,V>(275) into MethodDeclaration(362) at 1", "Update SimpleName: get(240) to getEntry", "Update TextElement: well defined: it is the order that elements were inserted into the map.(21) to well defined: it is the order that elements were inserted into the map. This", "Insert TextElement: map does not support null keys.(22) into TagElement(24) at 2", "Insert SimpleType: Object(243) into SingleVariableDeclaration(245) at 0", "Insert SimpleName: key(244) into SingleVariableDeclaration(245) at 1", "Insert VariableDeclarationStatement(258) into Block(266) at 0", "Insert ReturnStatement(265) into Block(266) at 1", "Insert SimpleType: LinkedEntry(270) into ParameterizedType: LinkedEntry<K,V>(275) at 0", "Insert SimpleType: K(272) into ParameterizedType: LinkedEntry<K,V>(275) at 1", "Insert SimpleType: V(274) into ParameterizedType: LinkedEntry<K,V>(275) at 2", "Insert SimpleName: Object(242) into SimpleType: Object(243) at 0", "Insert ParameterizedType: LinkedEntry<K,V>(252) into VariableDeclarationStatement(258) at 0", "Insert VariableDeclarationFragment(257) into VariableDeclarationStatement(258) at 1", "Insert ConditionalExpression(264) into ReturnStatement(265) at 0", "Insert SimpleName: LinkedEntry(269) into SimpleType: LinkedEntry(270) at 0", "Insert SimpleName: K(271) into SimpleType: K(272) at 0", "Insert SimpleName: V(273) into SimpleType: V(274) at 0", "Move InfixExpression: ==(365) into IfStatement(386) at 0", "Insert VariableDeclarationStatement(1414) into Block(1435) at 2", "Move InfixExpression: ==(1481) into IfStatement(1501) at 0", "Insert SimpleType: LinkedEntry(247) into ParameterizedType: LinkedEntry<K,V>(252) at 0", "Insert SimpleType: K(249) into ParameterizedType: LinkedEntry<K,V>(252) at 1", "Insert SimpleType: V(251) into ParameterizedType: LinkedEntry<K,V>(252) at 2", "Insert SimpleName: entry(253) into VariableDeclarationFragment(257) at 0", "Insert MethodInvocation(256) into VariableDeclarationFragment(257) at 1", "Insert InfixExpression: !=(261) into ConditionalExpression(264) at 0", "Insert QualifiedName: entry.value(262) into ConditionalExpression(264) at 1", "Insert NullLiteral(263) into ConditionalExpression(264) at 2", "Insert MethodInvocation(294) into VariableDeclarationFragment(295) at 1", "Insert SimpleType: Object(1408) into VariableDeclarationStatement(1414) at 0", "Insert VariableDeclarationFragment(1413) into VariableDeclarationStatement(1414) at 1", "Update SimpleName: get(227) to getEntry", "Insert SimpleName: LinkedEntry(246) into SimpleType: LinkedEntry(247) at 0", "Insert SimpleName: K(248) into SimpleType: K(249) at 0", "Insert SimpleName: V(250) into SimpleType: V(251) at 0", "Insert SimpleName: getEntry(254) into MethodInvocation(256) at 0", "Insert SimpleName: key(255) into MethodInvocation(256) at 1", "Insert SimpleName: entry(259) into InfixExpression: !=(261) at 0", "Insert NullLiteral(260) into InfixExpression: !=(261) at 1", "Insert SimpleName: secondaryHash(290) into MethodInvocation(294) at 0", "Insert MethodInvocation(293) into MethodInvocation(294) at 1", "Insert SimpleName: Object(1407) into SimpleType: Object(1408) at 0", "Insert SimpleName: eValue(1409) into VariableDeclarationFragment(1413) at 0", "Move MethodInvocation(1415) into VariableDeclarationFragment(1413) at 1", "Insert ParenthesizedExpression(1432) into InfixExpression: &&(1433) at 1", "Move SimpleName: key(254) into MethodInvocation(293) at 0", "Move SimpleName: hashCode(255) into MethodInvocation(293) at 1", "Update SimpleType: IllegalArgumentException(371) to NullPointerException", "Insert StringLiteral: \"key == null\"(382) into ClassInstanceCreation(383) at 1", "Insert ConditionalExpression(1431) into ParenthesizedExpression(1432) at 0", "Insert SimpleName: e(353) into ReturnStatement(354) at 0", "Update SimpleName: IllegalArgumentException(370) to NullPointerException", "Move InfixExpression: ==(1345) into ConditionalExpression(1431) at 0", "Insert InfixExpression: ==(1426) into ConditionalExpression(1431) at 1", "Insert MethodInvocation(1430) into ConditionalExpression(1431) at 2", "Insert ConditionalExpression(1578) into IfStatement(1582) at 0", "Insert SimpleName: eValue(1424) into InfixExpression: ==(1426) at 0", "Insert NullLiteral(1425) into InfixExpression: ==(1426) at 1", "Move SimpleName: value(1411) into MethodInvocation(1430) at 0", "Move SimpleName: equals(1412) into MethodInvocation(1430) at 1", "Insert SimpleName: eValue(1429) into MethodInvocation(1430) at 2", "Move InfixExpression: ==(1484) into ConditionalExpression(1578) at 0", "Insert InfixExpression: !=(1572) into ConditionalExpression(1578) at 1", "Move PrefixExpression: !(1559) into ConditionalExpression(1578) at 2", "Insert QualifiedName: e.value(1570) into InfixExpression: !=(1572) at 0", "Insert NullLiteral(1571) into InfixExpression: !=(1572) at 1", "Delete MethodInvocation(256)", "Delete SimpleName: hash(259)", "Delete SimpleName: hash(260)", "Delete NumberLiteral: 20(261)", "Delete InfixExpression: >>>(262)", "Delete ParenthesizedExpression(263)", "Delete SimpleName: hash(264)", "Delete NumberLiteral: 12(265)", "Delete InfixExpression: >>>(266)", "Delete ParenthesizedExpression(267)", "Delete InfixExpression: ^(268)", "Delete Assignment: ^=(269)", "Delete ExpressionStatement(270)", "Delete SimpleName: hash(271)", "Delete SimpleName: hash(272)", "Delete NumberLiteral: 7(273)", "Delete InfixExpression: >>>(274)", "Delete ParenthesizedExpression(275)", "Delete SimpleName: hash(276)", "Delete NumberLiteral: 4(277)", "Delete InfixExpression: >>>(278)", "Delete ParenthesizedExpression(279)", "Delete InfixExpression: ^(280)", "Delete Assignment: ^=(281)", "Delete ExpressionStatement(282)", "Delete QualifiedName: e.value(339)", "Delete SimpleName: value(366)", "Delete NullLiteral(367)", "Delete InfixExpression: ==(368)", "Delete InfixExpression: ||(369)", "Delete SimpleName: IllegalArgumentException(1346)", "Delete SimpleType: IllegalArgumentException(1347)", "Delete ClassInstanceCreation(1348)", "Delete ThrowStatement(1349)", "Delete Block(1350)", "Delete IfStatement(1351)", "Delete MethodInvocation(1416)", "Delete InfixExpression: ||(1485)"]}}, {"ObjectTypeAdapter_cluster": {"actions": []}}, {"ObjectTypeAdapter_diff": {"operations": []}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}