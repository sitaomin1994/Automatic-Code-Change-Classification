{"application": "apache-commons-jexl", "csha": "18388bafa79575242f604e075800795c488fef7d", "files": [{"Debugger_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 35", "operations": ["INS ImportDeclaration to CompilationUnit at 35", "INS QualifiedName: org.apache.commons.jexl3.parser.ASTJxltLiteral to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS NumberLiteral: 0 to Assignment: = at 1", "INS SimpleName: level to Assignment: = at 1", "INS SimpleName: indentLevel to Assignment: = at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: level to TagElement: @param at 0", "INS SimpleName: setIndentation to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS InfixExpression: <= to IfStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS NumberLiteral: 0 to InfixExpression: <= at 1", "INS NumberLiteral: 0 to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: indent to Assignment: = at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  the number of spaces for indentation, none if less or equal to zero to TagElement: @param at 1", "INS IfStatement to Block at 0", "INS SimpleName: indent to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS TextElement: Sets the indentation level. to TagElement at 0", "INS Block to IfStatement at 2", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: level to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS SimpleName: level to InfixExpression: <= at 0", "INS Javadoc to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 62", "operations": ["INS Modifier: protected to MethodDeclaration at 1", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: p to TagElement: @param at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement: A pseudo visitor for parameters. to TagElement at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: data to TagElement: @param at 0", "INS SimpleName: p to ReturnStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @return to Javadoc at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: data to SingleVariableDeclaration at 1", "INS TextElement:  the parameter name to use to TagElement: @return at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: String to SimpleType: String at 0", "INS TextElement:  the parameter name to TagElement: @param at 1", "INS SimpleName: visitParameter to MethodDeclaration at 3", "INS TextElement:  the visitor argument to TagElement: @param at 1", "INS TagElement to Javadoc at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: p to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 62"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 99", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"`\" to MethodInvocation at 2", "INS StringLiteral: \"`\" to InfixExpression: + at 0", "INS SimpleName: img to VariableDeclarationFragment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: visit to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: data to SingleVariableDeclaration at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: replace to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS SimpleName: getLiteral to MethodInvocation at 1", "INS SimpleName: img to InfixExpression: + at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"`\" to InfixExpression: + at 2", "INS SimpleType: ASTJxltLiteral to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Object to SimpleType: Object at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: data to MethodInvocation at 3", "INS StringLiteral: \"\\\\`\" to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 99", "INS SimpleName: check to MethodInvocation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: ASTJxltLiteral to SimpleType: ASTJxltLiteral at 0", "INS SimpleType: Object to MethodDeclaration at 2"]}, {"root": "UPDATE from private to protected", "operations": ["UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected", "UPD Modifier: private from private to protected"]}, {"root": "UPDATE from boolean to int", "operations": ["UPD PrimitiveType: boolean from boolean to int"]}, {"root": "UPDATE from This implies that exceptions during evaluation do allways carry the node that's causing the error. to This implies that exceptions during evaluation do always carry the node that's causing the error.", "operations": ["UPD TextElement: This implies that exceptions during evaluation do allways carry the node that's causing the error. from This implies that exceptions during evaluation do allways carry the node that's causing the error. to This implies that exceptions during evaluation do always carry the node that's causing the error."]}, {"root": "INS NumberLiteral: 2 to VariableDeclarationFragment at 1", "operations": ["INS NumberLiteral: 2 to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: JexlNode to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: jjtGetParent to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: child to MethodInvocation at 0", "INS SimpleName: parent to VariableDeclarationFragment at 0", "INS SimpleName: JexlNode to SimpleType: JexlNode at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS InfixExpression: > to IfStatement at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS PrefixExpression: ++ to ForStatement at 2", "INS SimpleName: indentLevel to InfixExpression: < at 1", "INS PrefixExpression: ++ to ForStatement at 2", "INS Block to ForStatement at 3", "INS SimpleName: s to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS Block to IfStatement at 1", "INS SimpleName: s to PrefixExpression: ++ at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS InfixExpression: < to ForStatement at 1", "INS ForStatement to Block at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS IfStatement to Block at 5", "INS SimpleName: s to InfixExpression: < at 0", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: indent to InfixExpression: < at 1", "INS InfixExpression: < to ForStatement at 1", "INS ForStatement to Block at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: indent to InfixExpression: > at 0", "INS VariableDeclarationExpression to ForStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: builder to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS CharacterLiteral: '}' to MethodInvocation at 2", "INS ExpressionStatement to Block at 6"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: && at 1", "INS InstanceofExpression to InfixExpression: || at 0", "INS SimpleType: ASTJexlScript to InstanceofExpression at 1", "INS SimpleType: ASTBlock to InstanceofExpression at 1", "INS SimpleName: indent to InfixExpression: > at 0", "INS SimpleName: parent to InstanceofExpression at 0", "INS InfixExpression: > to InfixExpression: && at 0", "INS SimpleName: ASTJexlScript to SimpleType: ASTJexlScript at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: ASTBlock to SimpleType: ASTBlock at 0", "INS InstanceofExpression to InfixExpression: || at 1", "INS SimpleName: parent to InstanceofExpression at 0", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to ForStatement at 3", "INS ForStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "INS InfixExpression: > to IfStatement at 0", "operations": ["INS InfixExpression: > to IfStatement at 0", "INS SimpleName: indent to InfixExpression: > at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1"]}, {"root": "INS CharacterLiteral: '{' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '{' to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from \"new \" to \"new(\"", "operations": ["UPD StringLiteral: \"new \" from \"new \" to \"new(\""]}, {"root": "MOVE from ForStatement", "operations": ["MOV InfixExpression: < to ForStatement at 1", "MOV PrefixExpression: ++ to ForStatement at 2", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "INS InfixExpression: > to IfStatement at 0", "operations": ["INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: indent to InfixExpression: > at 0", "INS InfixExpression: > to IfStatement at 0"]}, {"root": "UPDATE from jjtAccept to walk", "operations": ["UPD SimpleName: jjtAccept from jjtAccept to walk", "UPD SimpleName: root from root to walk", "UPD SimpleName: root from root to walk", "UPD SimpleName: root from root to walk", "UPD SimpleName: root from root to walk"]}, {"root": "UPDATE from root to accept", "operations": ["UPD SimpleName: root from root to accept"]}, {"root": "INS SimpleName: cause to Assignment: = at 0", "operations": ["INS SimpleName: cause to Assignment: = at 0"]}, {"root": "INS SimpleName: accept to MethodInvocation at 0", "operations": ["INS SimpleName: accept to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 0"]}, {"root": "INS CharacterLiteral: ';' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ';' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: '(' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '(' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: ')' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ')' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: '(' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '(' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: ')' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ')' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: '(' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '(' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: ')' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ')' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: '[' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '[' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: ']' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ']' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: '\\n' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '\\n' to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationExpression to ForStatement at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: s to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1"]}, {"root": "INS InfixExpression: < to ForStatement at 1", "operations": ["INS SimpleName: s to InfixExpression: < at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: indent to InfixExpression: < at 1"]}, {"root": "INS PrefixExpression: ++ to ForStatement at 2", "operations": ["INS PrefixExpression: ++ to ForStatement at 2", "INS SimpleName: s to PrefixExpression: ++ at 0"]}, {"root": "INS CharacterLiteral: '\\n' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: '\\n' to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: data to MethodInvocation at 2", "INS SimpleName: visitParameter to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ArrayAccess to MethodInvocation at 1"]}, {"root": "INS CharacterLiteral: ' ' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ' ' to MethodInvocation at 2"]}, {"root": "INS CharacterLiteral: ' ' to MethodInvocation at 2", "operations": ["INS CharacterLiteral: ' ' to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: data to MethodInvocation at 2", "INS SimpleName: visitParameter to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ArrayAccess to MethodInvocation at 1"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL SimpleName: indent"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL BooleanLiteral: true", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: indent"]}, {"root": "DEL FieldAccess", "operations": ["DEL ThisExpression", "DEL SimpleName: cause", "DEL FieldAccess"]}, {"root": "DEL SimpleName: jjtAccept", "operations": ["DEL SimpleName: jjtAccept"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL StringLiteral: \"    \"", "operations": ["DEL StringLiteral: \"    \""]}, {"root": "DEL SimpleName: indent", "operations": ["DEL SimpleName: indent"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL StringLiteral: \";\"", "operations": ["DEL StringLiteral: \";\""]}, {"root": "DEL SimpleName: indent", "operations": ["DEL SimpleName: indent"]}, {"root": "DEL StringLiteral: \"\\n\"", "operations": ["DEL StringLiteral: \"\\n\""]}, {"root": "DEL StringLiteral: \"(\"", "operations": ["DEL StringLiteral: \"(\""]}, {"root": "DEL StringLiteral: \")\"", "operations": ["DEL StringLiteral: \")\""]}, {"root": "DEL StringLiteral: \"(\"", "operations": ["DEL StringLiteral: \"(\""]}, {"root": "DEL StringLiteral: \")\"", "operations": ["DEL StringLiteral: \")\""]}, {"root": "DEL StringLiteral: \"(\"", "operations": ["DEL StringLiteral: \"(\""]}, {"root": "DEL StringLiteral: \")\"", "operations": ["DEL StringLiteral: \")\""]}, {"root": "DEL StringLiteral: \"[\"", "operations": ["DEL StringLiteral: \"[\""]}, {"root": "DEL StringLiteral: \"]\"", "operations": ["DEL StringLiteral: \"]\""]}, {"root": "DEL StringLiteral: \"{\"", "operations": ["DEL StringLiteral: \"{\""]}, {"root": "DEL SimpleName: indent", "operations": ["DEL SimpleName: indent"]}, {"root": "DEL StringLiteral: \"\\n\"", "operations": ["DEL StringLiteral: \"\\n\""]}, {"root": "DEL StringLiteral: \"}\"", "operations": ["DEL StringLiteral: \"}\""]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: true", "DEL SimpleName: ii"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: ii", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL Assignment: ="]}, {"root": "DEL IfStatement", "operations": ["DEL Assignment: =", "DEL PrefixExpression: !", "DEL IfStatement", "DEL Block", "DEL SimpleName: indent", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL SimpleName: ii"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block", "DEL Assignment: =", "DEL PrefixExpression: !", "DEL SimpleName: indent", "DEL SimpleName: ii", "DEL BooleanLiteral: true", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: builder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"(\""]}]}}, {"Debugger_diff": {"operations": ["Insert ImportDeclaration(71) into CompilationUnit(3816) at 35", "Insert QualifiedName: org.apache.commons.jexl3.parser.ASTJxltLiteral(70) into ImportDeclaration(71) at 0", "Insert MethodDeclaration(540) into TypeDeclaration: class(3815) at 20", "Insert MethodDeclaration(2267) into TypeDeclaration: class(3815) at 61", "Insert MethodDeclaration(3814) into TypeDeclaration: class(3815) at 98", "Update Modifier: private(171) to protected", "Update Modifier: private(184) to protected", "Update Modifier: private(194) to protected", "Update Modifier: private(203) to protected", "Update Modifier: private(212) to protected", "Update Modifier: private(221) to protected", "Update PrimitiveType: boolean(222) to int", "Insert Javadoc(514) into MethodDeclaration(540) at 0", "Insert Modifier: public(515) into MethodDeclaration(540) at 1", "Insert PrimitiveType: void(516) into MethodDeclaration(540) at 2", "Insert SimpleName: setIndentation(517) into MethodDeclaration(540) at 3", "Insert SingleVariableDeclaration(520) into MethodDeclaration(540) at 4", "Insert Block(539) into MethodDeclaration(540) at 5", "Update Modifier: private(531) to protected", "Update Modifier: private(590) to protected", "Update Modifier: private(693) to protected", "Update Modifier: private(771) to protected", "Update Modifier: private(862) to protected", "Update Modifier: private(981) to protected", "Update Modifier: private(1903) to protected", "Update Modifier: private(1918) to protected", "Insert Javadoc(2251) into MethodDeclaration(2267) at 0", "Insert Modifier: protected(2252) into MethodDeclaration(2267) at 1", "Insert SimpleType: String(2254) into MethodDeclaration(2267) at 2", "Insert SimpleName: visitParameter(2255) into MethodDeclaration(2267) at 3", "Insert SingleVariableDeclaration(2259) into MethodDeclaration(2267) at 4", "Insert SingleVariableDeclaration(2263) into MethodDeclaration(2267) at 5", "Insert Block(2266) into MethodDeclaration(2267) at 6", "Insert MarkerAnnotation(3779) into MethodDeclaration(3814) at 0", "Insert Modifier: protected(3780) into MethodDeclaration(3814) at 1", "Insert SimpleType: Object(3782) into MethodDeclaration(3814) at 2", "Insert SimpleName: visit(3783) into MethodDeclaration(3814) at 3", "Insert SingleVariableDeclaration(3787) into MethodDeclaration(3814) at 4", "Insert SingleVariableDeclaration(3791) into MethodDeclaration(3814) at 5", "Insert Block(3813) into MethodDeclaration(3814) at 6", "Update TextElement: This implies that exceptions during evaluation do allways carry the node that's causing the error.(155) to This implies that exceptions during evaluation do always carry the node that's causing the error.", "Insert NumberLiteral: 2(225) into VariableDeclarationFragment(226) at 1", "Insert TagElement(510) into Javadoc(514) at 0", "Insert TagElement: @param(513) into Javadoc(514) at 1", "Insert PrimitiveType: int(518) into SingleVariableDeclaration(520) at 0", "Insert SimpleName: level(519) into SingleVariableDeclaration(520) at 1", "Insert IfStatement(534) into Block(539) at 0", "Insert ExpressionStatement(538) into Block(539) at 1", "Insert VariableDeclarationStatement(630) into Block(733) at 0", "Insert IfStatement(1576) into Block(1584) at 4", "Insert ExpressionStatement(1581) into Block(1584) at 5", "Insert TagElement(2242) into Javadoc(2251) at 0", "Insert TagElement: @param(2245) into Javadoc(2251) at 1", "Insert TagElement: @param(2248) into Javadoc(2251) at 2", "Insert TagElement: @return(2250) into Javadoc(2251) at 3", "Insert SimpleName: String(2253) into SimpleType: String(2254) at 0", "Insert SimpleType: String(2257) into SingleVariableDeclaration(2259) at 0", "Insert SimpleName: p(2258) into SingleVariableDeclaration(2259) at 1", "Insert SimpleType: Object(2261) into SingleVariableDeclaration(2263) at 0", "Insert SimpleName: data(2262) into SingleVariableDeclaration(2263) at 1", "Insert ReturnStatement(2265) into Block(2266) at 0", "Insert SimpleName: Override(3778) into MarkerAnnotation(3779) at 0", "Insert SimpleName: Object(3781) into SimpleType: Object(3782) at 0", "Insert SimpleType: ASTJxltLiteral(3785) into SingleVariableDeclaration(3787) at 0", "Insert SimpleName: node(3786) into SingleVariableDeclaration(3787) at 1", "Insert SimpleType: Object(3789) into SingleVariableDeclaration(3791) at 0", "Insert SimpleName: data(3790) into SingleVariableDeclaration(3791) at 1", "Insert VariableDeclarationStatement(3803) into Block(3813) at 0", "Insert ReturnStatement(3812) into Block(3813) at 1", "Insert TextElement: Sets the indentation level.(509) into TagElement(510) at 0", "Insert SimpleName: level(511) into TagElement: @param(513) at 0", "Insert TextElement:  the number of spaces for indentation, none if less or equal to zero(512) into TagElement: @param(513) at 1", "Insert InfixExpression: <=(523) into IfStatement(534) at 0", "Insert Block(528) into IfStatement(534) at 1", "Insert Block(533) into IfStatement(534) at 2", "Insert Assignment: =(537) into ExpressionStatement(538) at 0", "Insert SimpleType: JexlNode(624) into VariableDeclarationStatement(630) at 0", "Insert VariableDeclarationFragment(629) into VariableDeclarationStatement(630) at 1", "Insert InfixExpression: &&(644) into IfStatement(675) at 0", "Insert Block(674) into IfStatement(675) at 1", "Insert InfixExpression: >(1488) into IfStatement(1505) at 0", "Insert InfixExpression: >(1541) into IfStatement(1576) at 0", "Insert Block(1575) into IfStatement(1576) at 1", "Insert MethodInvocation(1580) into ExpressionStatement(1581) at 0", "Insert TextElement: A pseudo visitor for parameters.(2241) into TagElement(2242) at 0", "Insert SimpleName: p(2243) into TagElement: @param(2245) at 0", "Insert TextElement:  the parameter name(2244) into TagElement: @param(2245) at 1", "Insert SimpleName: data(2246) into TagElement: @param(2248) at 0", "Insert TextElement:  the visitor argument(2247) into TagElement: @param(2248) at 1", "Insert TextElement:  the parameter name to use(2249) into TagElement: @return(2250) at 0", "Insert SimpleName: String(2256) into SimpleType: String(2257) at 0", "Insert SimpleName: Object(2260) into SimpleType: Object(2261) at 0", "Insert SimpleName: p(2264) into ReturnStatement(2265) at 0", "Insert SimpleName: ASTJxltLiteral(3784) into SimpleType: ASTJxltLiteral(3785) at 0", "Insert SimpleName: Object(3788) into SimpleType: Object(3789) at 0", "Insert SimpleType: String(3793) into VariableDeclarationStatement(3803) at 0", "Insert VariableDeclarationFragment(3802) into VariableDeclarationStatement(3803) at 1", "Insert MethodInvocation(3811) into ReturnStatement(3812) at 0", "Insert SimpleName: level(521) into InfixExpression: <=(523) at 0", "Insert NumberLiteral: 0(522) into InfixExpression: <=(523) at 1", "Insert ExpressionStatement(527) into Block(528) at 0", "Insert ExpressionStatement(532) into Block(533) at 0", "Insert SimpleName: indentLevel(535) into Assignment: =(537) at 0", "Insert NumberLiteral: 0(536) into Assignment: =(537) at 1", "Insert SimpleName: JexlNode(623) into SimpleType: JexlNode(624) at 0", "Insert SimpleName: parent(625) into VariableDeclarationFragment(629) at 0", "Insert MethodInvocation(628) into VariableDeclarationFragment(629) at 1", "Insert InfixExpression: >(633) into InfixExpression: &&(644) at 0", "Insert ParenthesizedExpression(643) into InfixExpression: &&(644) at 1", "Insert ForStatement(673) into Block(674) at 0", "Insert CharacterLiteral: '{'(1483) into MethodInvocation(1484) at 2", "Insert SimpleName: indent(1486) into InfixExpression: >(1488) at 0", "Insert NumberLiteral: 0(1487) into InfixExpression: >(1488) at 1", "Move ExpressionStatement(1447) into Block(1498) at 0", "Insert SimpleName: indent(1539) into InfixExpression: >(1541) at 0", "Insert NumberLiteral: 0(1540) into InfixExpression: >(1541) at 1", "Move ExpressionStatement(1484) into Block(1575) at 0", "Insert ForStatement(1574) into Block(1575) at 1", "Insert SimpleName: builder(1577) into MethodInvocation(1580) at 0", "Insert SimpleName: append(1578) into MethodInvocation(1580) at 1", "Insert CharacterLiteral: '}'(1579) into MethodInvocation(1580) at 2", "Update StringLiteral: \"new \"(2612) to \"new(\"", "Insert SimpleName: String(3792) into SimpleType: String(3793) at 0", "Insert SimpleName: img(3794) into VariableDeclarationFragment(3802) at 0", "Insert MethodInvocation(3801) into VariableDeclarationFragment(3802) at 1", "Insert SimpleName: check(3804) into MethodInvocation(3811) at 0", "Insert SimpleName: node(3805) into MethodInvocation(3811) at 1", "Insert InfixExpression: +(3809) into MethodInvocation(3811) at 2", "Insert SimpleName: data(3810) into MethodInvocation(3811) at 3", "Insert Assignment: =(526) into ExpressionStatement(527) at 0", "Insert Assignment: =(531) into ExpressionStatement(532) at 0", "Insert SimpleName: child(626) into MethodInvocation(628) at 0", "Insert SimpleName: jjtGetParent(627) into MethodInvocation(628) at 1", "Insert SimpleName: indent(631) into InfixExpression: >(633) at 0", "Insert NumberLiteral: 0(632) into InfixExpression: >(633) at 1", "Insert InfixExpression: ||(642) into ParenthesizedExpression(643) at 0", "Move VariableDeclarationExpression(607) into ForStatement(673) at 0", "Move InfixExpression: <(610) into ForStatement(673) at 1", "Move PrefixExpression: ++(612) into ForStatement(673) at 2", "Insert Block(672) into ForStatement(673) at 3", "Insert InfixExpression: >(715) into IfStatement(728) at 0", "Insert VariableDeclarationExpression(1550) into ForStatement(1574) at 0", "Insert InfixExpression: <(1553) into ForStatement(1574) at 1", "Insert PrefixExpression: ++(1555) into ForStatement(1574) at 2", "Insert Block(1573) into ForStatement(1574) at 3", "Insert MethodInvocation(3797) into MethodInvocation(3801) at 0", "Insert SimpleName: replace(3798) into MethodInvocation(3801) at 1", "Insert StringLiteral: \"`\"(3799) into MethodInvocation(3801) at 2", "Insert StringLiteral: \"\\\\`\"(3800) into MethodInvocation(3801) at 3", "Insert StringLiteral: \"`\"(3806) into InfixExpression: +(3809) at 0", "Insert SimpleName: img(3807) into InfixExpression: +(3809) at 1", "Insert StringLiteral: \"`\"(3808) into InfixExpression: +(3809) at 2", "Update SimpleName: root(385) to walk", "Update SimpleName: root(405) to accept", "Update SimpleName: jjtAccept(406) to walk", "Insert SimpleName: cause(468) into Assignment: =(470) at 0", "Insert SimpleName: accept(472) into MethodInvocation(475) at 0", "Insert SimpleName: indent(524) into Assignment: =(526) at 0", "Insert NumberLiteral: 0(525) into Assignment: =(526) at 1", "Insert SimpleName: indent(529) into Assignment: =(531) at 0", "Insert SimpleName: level(530) into Assignment: =(531) at 1", "Insert InstanceofExpression(637) into InfixExpression: ||(642) at 0", "Insert InstanceofExpression(641) into InfixExpression: ||(642) at 1", "Move ForStatement(619) into Block(672) at 0", "Insert CharacterLiteral: ';'(710) into MethodInvocation(711) at 2", "Insert SimpleName: indent(713) into InfixExpression: >(715) at 0", "Insert NumberLiteral: 0(714) into InfixExpression: >(715) at 1", "Insert CharacterLiteral: '('(856) into MethodInvocation(857) at 2", "Insert CharacterLiteral: ')'(894) into MethodInvocation(895) at 2", "Insert CharacterLiteral: '('(954) into MethodInvocation(955) at 2", "Insert CharacterLiteral: ')'(970) into MethodInvocation(971) at 2", "Insert CharacterLiteral: '('(1086) into MethodInvocation(1087) at 2", "Insert CharacterLiteral: ')'(1127) into MethodInvocation(1128) at 2", "Insert CharacterLiteral: '['(1192) into MethodInvocation(1193) at 2", "Insert CharacterLiteral: ']'(1205) into MethodInvocation(1206) at 2", "Insert CharacterLiteral: '\\n'(1495) into MethodInvocation(1496) at 2", "Insert PrimitiveType: int(1546) into VariableDeclarationExpression(1550) at 0", "Insert VariableDeclarationFragment(1549) into VariableDeclarationExpression(1550) at 1", "Insert SimpleName: i(1551) into InfixExpression: <(1553) at 0", "Insert SimpleName: indentLevel(1552) into InfixExpression: <(1553) at 1", "Insert SimpleName: i(1554) into PrefixExpression: ++(1555) at 0", "Insert ForStatement(1572) into Block(1573) at 0", "Insert SimpleName: node(3795) into MethodInvocation(3797) at 0", "Insert SimpleName: getLiteral(3796) into MethodInvocation(3797) at 1", "Insert SimpleName: parent(634) into InstanceofExpression(637) at 0", "Insert SimpleType: ASTBlock(636) into InstanceofExpression(637) at 1", "Insert SimpleName: parent(638) into InstanceofExpression(641) at 0", "Insert SimpleType: ASTJexlScript(640) into InstanceofExpression(641) at 1", "Insert VariableDeclarationExpression(659) into ForStatement(671) at 0", "Insert InfixExpression: <(662) into ForStatement(671) at 1", "Insert PrefixExpression: ++(664) into ForStatement(671) at 2", "Insert SimpleName: i(1547) into VariableDeclarationFragment(1549) at 0", "Insert NumberLiteral: 0(1548) into VariableDeclarationFragment(1549) at 1", "Insert VariableDeclarationExpression(1560) into ForStatement(1572) at 0", "Insert InfixExpression: <(1563) into ForStatement(1572) at 1", "Insert PrefixExpression: ++(1565) into ForStatement(1572) at 2", "Insert Block(1571) into ForStatement(1572) at 3", "Insert SimpleName: ASTBlock(635) into SimpleType: ASTBlock(636) at 0", "Insert SimpleName: ASTJexlScript(639) into SimpleType: ASTJexlScript(640) at 0", "Insert PrimitiveType: int(655) into VariableDeclarationExpression(659) at 0", "Insert VariableDeclarationFragment(658) into VariableDeclarationExpression(659) at 1", "Insert SimpleName: s(660) into InfixExpression: <(662) at 0", "Insert SimpleName: indent(661) into InfixExpression: <(662) at 1", "Insert SimpleName: s(663) into PrefixExpression: ++(664) at 0", "Insert CharacterLiteral: '\\n'(718) into MethodInvocation(719) at 2", "Insert PrimitiveType: int(1556) into VariableDeclarationExpression(1560) at 0", "Insert VariableDeclarationFragment(1559) into VariableDeclarationExpression(1560) at 1", "Insert SimpleName: s(1561) into InfixExpression: <(1563) at 0", "Insert SimpleName: indent(1562) into InfixExpression: <(1563) at 1", "Insert SimpleName: s(1564) into PrefixExpression: ++(1565) at 0", "Move ExpressionStatement(1489) into Block(1571) at 0", "Insert MethodInvocation(2339) into MethodInvocation(2340) at 2", "Update SimpleName: root(390) to walk", "Insert SimpleName: s(656) into VariableDeclarationFragment(658) at 0", "Insert NumberLiteral: 0(657) into VariableDeclarationFragment(658) at 1", "Insert SimpleName: s(1557) into VariableDeclarationFragment(1559) at 0", "Insert NumberLiteral: 0(1558) into VariableDeclarationFragment(1559) at 1", "Insert SimpleName: visitParameter(2334) into MethodInvocation(2339) at 0", "Move ArrayAccess(2222) into MethodInvocation(2339) at 1", "Insert SimpleName: data(2338) into MethodInvocation(2339) at 2", "Update SimpleName: root(395) to walk", "Insert CharacterLiteral: ' '(667) into MethodInvocation(668) at 2", "Insert CharacterLiteral: ' '(1568) into MethodInvocation(1569) at 2", "Insert MethodInvocation(2364) into MethodInvocation(2365) at 2", "Update SimpleName: root(396) to walk", "Insert SimpleName: visitParameter(2359) into MethodInvocation(2364) at 0", "Move ArrayAccess(2244) into MethodInvocation(2364) at 1", "Insert SimpleName: data(2363) into MethodInvocation(2364) at 2", "Delete Modifier: final(162)", "Delete BooleanLiteral: true(224)", "Delete SimpleName: indent(367)", "Delete BooleanLiteral: true(368)", "Delete Assignment: =(369)", "Delete ExpressionStatement(370)", "Delete ThisExpression(407)", "Delete SimpleName: indent(464)", "Delete BooleanLiteral: true(465)", "Delete Assignment: =(466)", "Delete ExpressionStatement(467)", "Delete ThisExpression(476)", "Delete SimpleName: cause(477)", "Delete FieldAccess(478)", "Delete SimpleName: jjtAccept(483)", "Delete ThisExpression(484)", "Delete StringLiteral: \"    \"(615)", "Delete SimpleName: indent(602)", "Delete Block(620)", "Delete StringLiteral: \";\"(656)", "Delete SimpleName: indent(659)", "Delete StringLiteral: \"\\n\"(662)", "Delete StringLiteral: \"(\"(800)", "Delete StringLiteral: \")\"(838)", "Delete StringLiteral: \"(\"(898)", "Delete StringLiteral: \")\"(914)", "Delete StringLiteral: \"(\"(1030)", "Delete StringLiteral: \")\"(1071)", "Delete StringLiteral: \"[\"(1136)", "Delete StringLiteral: \"]\"(1149)", "Delete StringLiteral: \"{\"(1427)", "Delete SimpleName: indent(1430)", "Delete StringLiteral: \"\\n\"(1433)", "Delete StringLiteral: \"}\"(1487)", "Delete PrimitiveType: boolean(2163)", "Delete SimpleName: ii(2164)", "Delete BooleanLiteral: true(2165)", "Delete VariableDeclarationFragment(2166)", "Delete VariableDeclarationStatement(2167)", "Delete SimpleName: ii(2268)", "Delete BooleanLiteral: false(2269)", "Delete Assignment: =(2270)", "Delete ExpressionStatement(2271)", "Delete SimpleName: ii(2276)", "Delete PrefixExpression: !(2277)", "Delete SimpleName: indent(2278)", "Delete BooleanLiteral: false(2279)", "Delete Assignment: =(2280)", "Delete ExpressionStatement(2281)", "Delete Block(2282)", "Delete IfStatement(2283)", "Delete SimpleName: ii(2340)", "Delete PrefixExpression: !(2341)", "Delete SimpleName: indent(2342)", "Delete BooleanLiteral: true(2343)", "Delete Assignment: =(2344)", "Delete ExpressionStatement(2345)", "Delete Block(2346)", "Delete IfStatement(2347)", "Delete SimpleName: builder(2615)", "Delete SimpleName: append(2616)", "Delete StringLiteral: \"(\"(2617)", "Delete MethodInvocation(2618)", "Delete ExpressionStatement(2619)"]}}, {"Engine_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 16", "operations": ["INS Javadoc to FieldDeclaration at 0", "INS SimpleName: TemplateEngine to SimpleType: TemplateEngine at 0", "INS SimpleType: TemplateEngine to FieldDeclaration at 3", "INS NullLiteral to VariableDeclarationFragment at 1", "INS Modifier: volatile to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: protected to FieldDeclaration at 1", "INS TagElement to Javadoc at 0", "INS FieldDeclaration to TypeDeclaration: class at 16", "INS SimpleName: jxlt to VariableDeclarationFragment at 0", "INS TextElement: The default jxlt engine. to TagElement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 51", "operations": ["INS SimpleName: TemplateEngine to SimpleType: TemplateEngine at 0", "INS Block to IfStatement at 1", "INS SynchronizedStatement to Block at 0", "INS CharacterLiteral: '$' to ClassInstanceCreation at 4", "INS SimpleType: TemplateEngine to MethodDeclaration at 2", "INS NumberLiteral: 0 to ClassInstanceCreation at 3", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: jxlt to Assignment: = at 0", "INS SimpleName: jxlt to InfixExpression: == at 0", "INS SimpleName: jxlt to MethodDeclaration at 3", "INS IfStatement to Block at 1", "INS Block to SynchronizedStatement at 1", "INS Modifier: protected to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: TemplateEngine to SimpleType: TemplateEngine at 0", "INS ThisExpression to SynchronizedStatement at 0", "INS Block to MethodDeclaration at 4", "INS TagElement to Javadoc at 0", "INS TextElement: Gets and/or creates a default template engine. to TagElement at 0", "INS SimpleName: TemplateEngine to SimpleType: TemplateEngine at 0", "INS ReturnStatement to Block at 2", "INS SimpleType: TemplateEngine to VariableDeclarationStatement at 0", "INS SimpleType: TemplateEngine to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to ReturnStatement at 0", "INS SimpleName: e to Assignment: = at 0", "INS InfixExpression: == to IfStatement at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS IfStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS SimpleName: e to InfixExpression: == at 0", "INS ExpressionStatement to Block at 1", "INS CharacterLiteral: '#' to ClassInstanceCreation at 5", "INS MethodDeclaration to TypeDeclaration: class at 51", "INS TextElement:  a template engine to TagElement: @return at 0", "INS SimpleName: jxlt to VariableDeclarationFragment at 1", "INS TagElement: @return to Javadoc at 1", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to ClassInstanceCreation at 1", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to ClassInstanceCreation at 2", "INS SimpleName: e to Assignment: = at 1", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: booleanValue", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: booleanValue"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: booleanValue"]}]}}, {"Engine_diff": {"operations": ["Insert FieldDeclaration(256) into TypeDeclaration: class(2783) at 16", "Insert MethodDeclaration(2782) into TypeDeclaration: class(2783) at 51", "Insert Javadoc(248) into FieldDeclaration(256) at 0", "Insert Modifier: protected(249) into FieldDeclaration(256) at 1", "Insert Modifier: volatile(250) into FieldDeclaration(256) at 2", "Insert SimpleType: TemplateEngine(252) into FieldDeclaration(256) at 3", "Insert VariableDeclarationFragment(255) into FieldDeclaration(256) at 4", "Insert Javadoc(2740) into MethodDeclaration(2782) at 0", "Insert Modifier: protected(2741) into MethodDeclaration(2782) at 1", "Insert SimpleType: TemplateEngine(2743) into MethodDeclaration(2782) at 2", "Insert SimpleName: jxlt(2744) into MethodDeclaration(2782) at 3", "Insert Block(2781) into MethodDeclaration(2782) at 4", "Insert TagElement(247) into Javadoc(248) at 0", "Insert SimpleName: TemplateEngine(251) into SimpleType: TemplateEngine(252) at 0", "Insert SimpleName: jxlt(253) into VariableDeclarationFragment(255) at 0", "Insert NullLiteral(254) into VariableDeclarationFragment(255) at 1", "Insert TagElement(2737) into Javadoc(2740) at 0", "Insert TagElement: @return(2739) into Javadoc(2740) at 1", "Insert SimpleName: TemplateEngine(2742) into SimpleType: TemplateEngine(2743) at 0", "Insert VariableDeclarationStatement(2750) into Block(2781) at 0", "Insert IfStatement(2778) into Block(2781) at 1", "Insert ReturnStatement(2780) into Block(2781) at 2", "Insert TextElement: The default jxlt engine.(246) into TagElement(247) at 0", "Insert TextElement: Gets and/or creates a default template engine.(2736) into TagElement(2737) at 0", "Insert TextElement:  a template engine(2738) into TagElement: @return(2739) at 0", "Insert SimpleType: TemplateEngine(2746) into VariableDeclarationStatement(2750) at 0", "Insert VariableDeclarationFragment(2749) into VariableDeclarationStatement(2750) at 1", "Insert InfixExpression: ==(2753) into IfStatement(2778) at 0", "Insert Block(2777) into IfStatement(2778) at 1", "Insert SimpleName: e(2779) into ReturnStatement(2780) at 0", "Insert SimpleName: TemplateEngine(2745) into SimpleType: TemplateEngine(2746) at 0", "Insert SimpleName: e(2747) into VariableDeclarationFragment(2749) at 0", "Insert SimpleName: jxlt(2748) into VariableDeclarationFragment(2749) at 1", "Insert SimpleName: e(2751) into InfixExpression: ==(2753) at 0", "Insert NullLiteral(2752) into InfixExpression: ==(2753) at 1", "Insert SynchronizedStatement(2776) into Block(2777) at 0", "Move MethodInvocation(405) into ConditionalExpression(417) at 2", "Move MethodInvocation(422) into ConditionalExpression(432) at 2", "Move MethodInvocation(439) into ConditionalExpression(447) at 2", "Insert ThisExpression(2754) into SynchronizedStatement(2776) at 0", "Insert Block(2775) into SynchronizedStatement(2776) at 1", "Insert IfStatement(2774) into Block(2775) at 0", "Insert InfixExpression: ==(2757) into IfStatement(2774) at 0", "Insert Block(2773) into IfStatement(2774) at 1", "Insert SimpleName: jxlt(2755) into InfixExpression: ==(2757) at 0", "Insert NullLiteral(2756) into InfixExpression: ==(2757) at 1", "Insert ExpressionStatement(2768) into Block(2773) at 0", "Insert ExpressionStatement(2772) into Block(2773) at 1", "Insert Assignment: =(2767) into ExpressionStatement(2768) at 0", "Insert Assignment: =(2771) into ExpressionStatement(2772) at 0", "Insert SimpleName: e(2758) into Assignment: =(2767) at 0", "Insert ClassInstanceCreation(2766) into Assignment: =(2767) at 1", "Insert SimpleName: jxlt(2769) into Assignment: =(2771) at 0", "Insert SimpleName: e(2770) into Assignment: =(2771) at 1", "Insert SimpleType: TemplateEngine(2760) into ClassInstanceCreation(2766) at 0", "Insert ThisExpression(2761) into ClassInstanceCreation(2766) at 1", "Insert BooleanLiteral: true(2762) into ClassInstanceCreation(2766) at 2", "Insert NumberLiteral: 0(2763) into ClassInstanceCreation(2766) at 3", "Insert CharacterLiteral: '$'(2764) into ClassInstanceCreation(2766) at 4", "Insert CharacterLiteral: '#'(2765) into ClassInstanceCreation(2766) at 5", "Insert SimpleName: TemplateEngine(2759) into SimpleType: TemplateEngine(2760) at 0", "Delete SimpleName: booleanValue(406)", "Delete MethodInvocation(407)", "Delete SimpleName: booleanValue(423)", "Delete MethodInvocation(424)", "Delete SimpleName: booleanValue(440)", "Delete MethodInvocation(441)"]}}, {"Scope_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleName: scope to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Javadoc to FieldDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleType: Scope to FieldDeclaration at 3", "INS TextElement: The scope.  to TagElement at 0", "INS Modifier: private to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleType: Scope to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS TagElement: @return to Javadoc at 1", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS TextElement: Gets the scope. to TagElement at 0", "INS TextElement:  this frame scope to TagElement: @return at 0", "INS SimpleName: scope to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: getScope to MethodDeclaration at 3", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS IfStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS IfStatement to Block at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: scope to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS IfStatement to Block at 3", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS IfStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS SimpleName: Scope to SimpleType: Scope at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Scope to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS TagElement: @param to Javadoc at 1", "operations": ["INS SimpleName: s to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:  the scope to TagElement: @param at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: scope to Assignment: = at 0", "INS SimpleName: s to Assignment: = at 1"]}, {"root": "UPDATE from frame to o", "operations": ["UPD SimpleName: frame from frame to o"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV QualifiedName: frame.parms to InfixExpression: != at 1", "MOV SimpleName: parms to InfixExpression: != at 0"]}, {"root": "UPDATE from frame.parms to scope.parms", "operations": ["UPD QualifiedName: frame.parms from frame.parms to scope.parms"]}, {"root": "UPDATE from frame.namedVariables to scope.namedVariables", "operations": ["UPD QualifiedName: frame.namedVariables from frame.namedVariables to scope.namedVariables", "UPD QualifiedName: frame.namedVariables from frame.namedVariables to scope.namedVariables"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0"]}, {"root": "INS ThisExpression to ClassInstanceCreation at 1", "operations": ["INS ThisExpression to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: scope to ClassInstanceCreation at 1", "operations": ["INS SimpleName: scope to ClassInstanceCreation at 1"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: equals", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: equals", "DEL Modifier: public", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Block", "DEL InfixExpression: &&"]}, {"root": "DEL Javadoc", "operations": ["DEL SimpleName: frame", "DEL TextElement:  true if equal, false otherwise", "DEL TextElement:  the frame to compare to", "DEL TagElement", "DEL TextElement: Whether this frame is equal to another.", "DEL TagElement: @param", "DEL Javadoc", "DEL TagElement: @return"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: frame"]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL Block", "DEL IfStatement", "DEL InfixExpression: ||", "DEL IfStatement", "DEL InfixExpression: ==", "DEL InfixExpression: !=", "DEL IfStatement", "DEL SimpleName: frame"]}]}}, {"Scope_diff": {"operations": ["Move MarkerAnnotation(167) into MethodDeclaration(223) at 0", "Move SingleVariableDeclaration(174) into MethodDeclaration(223) at 5", "Insert FieldDeclaration(951) into TypeDeclaration: class(1178) at 5", "Insert MethodDeclaration(1007) into TypeDeclaration: class(1178) at 8", "Insert IfStatement(181) into Block(222) at 0", "Insert IfStatement(191) into Block(222) at 1", "Insert VariableDeclarationStatement(200) into Block(222) at 2", "Insert IfStatement(207) into Block(222) at 3", "Insert IfStatement(216) into Block(222) at 4", "Move ReturnStatement(232) into Block(222) at 5", "Insert Javadoc(944) into FieldDeclaration(951) at 0", "Insert Modifier: private(945) into FieldDeclaration(951) at 1", "Insert Modifier: final(946) into FieldDeclaration(951) at 2", "Insert SimpleType: Scope(948) into FieldDeclaration(951) at 3", "Insert VariableDeclarationFragment(950) into FieldDeclaration(951) at 4", "Insert SingleVariableDeclaration(978) into MethodDeclaration(994) at 3", "Insert Javadoc(999) into MethodDeclaration(1007) at 0", "Insert Modifier: public(1000) into MethodDeclaration(1007) at 1", "Insert SimpleType: Scope(1002) into MethodDeclaration(1007) at 2", "Insert SimpleName: getScope(1003) into MethodDeclaration(1007) at 3", "Insert Block(1006) into MethodDeclaration(1007) at 4", "Move InfixExpression: ==(206) into IfStatement(181) at 0", "Move Block(209) into IfStatement(181) at 1", "Insert PrefixExpression: !(187) into IfStatement(191) at 0", "Insert Block(190) into IfStatement(191) at 1", "Move SimpleType: Scope(201) into VariableDeclarationStatement(200) at 0", "Insert VariableDeclarationFragment(199) into VariableDeclarationStatement(200) at 1", "Insert InfixExpression: !=(203) into IfStatement(207) at 0", "Move Block(219) into IfStatement(207) at 1", "Move InfixExpression: ==(222) into IfStatement(216) at 0", "Move Block(227) into IfStatement(216) at 1", "Insert TagElement(943) into Javadoc(944) at 0", "Insert SimpleName: Scope(947) into SimpleType: Scope(948) at 0", "Insert SimpleName: scope(949) into VariableDeclarationFragment(950) at 0", "Insert TagElement: @param(968) into Javadoc(972) at 1", "Insert SimpleType: Scope(976) into SingleVariableDeclaration(978) at 0", "Insert SimpleName: s(977) into SingleVariableDeclaration(978) at 1", "Insert ExpressionStatement(988) into Block(993) at 0", "Insert TagElement(996) into Javadoc(999) at 0", "Insert TagElement: @return(998) into Javadoc(999) at 1", "Insert SimpleName: Scope(1001) into SimpleType: Scope(1002) at 0", "Insert ReturnStatement(1005) into Block(1006) at 0", "Update SimpleName: frame(205) to o", "Insert ParenthesizedExpression(186) into PrefixExpression: !(187) at 0", "Insert ReturnStatement(189) into Block(190) at 0", "Insert SimpleName: scope(194) into VariableDeclarationFragment(199) at 0", "Move CastExpression(183) into VariableDeclarationFragment(199) at 1", "Move SimpleName: parms(213) into InfixExpression: !=(203) at 0", "Update QualifiedName: frame.parms(214) to scope.parms", "Move QualifiedName: frame.parms(214) into InfixExpression: !=(203) at 1", "Update QualifiedName: frame.namedVariables(230) to scope.namedVariables", "Insert TextElement: The scope. (942) into TagElement(943) at 0", "Insert SimpleName: s(966) into TagElement: @param(968) at 0", "Insert TextElement:  the scope(967) into TagElement: @param(968) at 1", "Insert SimpleName: Scope(975) into SimpleType: Scope(976) at 0", "Insert Assignment: =(987) into ExpressionStatement(988) at 0", "Insert TextElement: Gets the scope.(995) into TagElement(996) at 0", "Insert TextElement:  this frame scope(997) into TagElement: @return(998) at 0", "Insert SimpleName: scope(1004) into ReturnStatement(1005) at 0", "Move InstanceofExpression(178) into ParenthesizedExpression(186) at 0", "Insert BooleanLiteral: false(188) into ReturnStatement(189) at 0", "Insert SimpleName: scope(985) into Assignment: =(987) at 0", "Insert SimpleName: s(986) into Assignment: =(987) at 1", "Update QualifiedName: frame.namedVariables(223) to scope.namedVariables", "Insert ThisExpression(640) into ClassInstanceCreation(642) at 1", "Insert SimpleName: scope(1168) into ClassInstanceCreation(1170) at 1", "Delete Modifier: public(168)", "Delete PrimitiveType: boolean(169)", "Delete SimpleName: equals(170)", "Delete SimpleName: equals(179)", "Delete MethodInvocation(184)", "Delete InfixExpression: &&(185)", "Delete ReturnStatement(186)", "Delete Block(187)", "Delete MethodDeclaration(188)", "Delete TextElement: Whether this frame is equal to another.(189)", "Delete TagElement(190)", "Delete SimpleName: frame(191)", "Delete TextElement:  the frame to compare to(192)", "Delete TagElement: @param(193)", "Delete TextElement:  true if equal, false otherwise(194)", "Delete TagElement: @return(195)", "Delete Javadoc(196)", "Delete SimpleName: frame(202)", "Delete SingleVariableDeclaration(203)", "Delete SimpleName: frame(210)", "Delete NullLiteral(211)", "Delete InfixExpression: ==(212)", "Delete InfixExpression: !=(215)", "Delete InfixExpression: ||(216)", "Delete Block(233)", "Delete IfStatement(234)", "Delete IfStatement(235)", "Delete IfStatement(236)"]}}, {"ParserVisitor_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 74", "operations": ["INS SimpleType: ASTJxltLiteral to SingleVariableDeclaration at 0", "INS SimpleName: ASTJxltLiteral to SimpleType: ASTJxltLiteral at 0", "INS SimpleType: Object to MethodDeclaration at 2", "INS SimpleName: data to SingleVariableDeclaration at 1", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: visit to MethodDeclaration at 3", "INS Modifier: abstract to MethodDeclaration at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 74", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}]}}, {"ParserVisitor_diff": {"operations": ["Insert MethodDeclaration(1035) into TypeDeclaration: class(1036) at 74", "Insert Modifier: protected(1022) into MethodDeclaration(1035) at 0", "Insert Modifier: abstract(1023) into MethodDeclaration(1035) at 1", "Insert SimpleType: Object(1025) into MethodDeclaration(1035) at 2", "Insert SimpleName: visit(1026) into MethodDeclaration(1035) at 3", "Insert SingleVariableDeclaration(1030) into MethodDeclaration(1035) at 4", "Insert SingleVariableDeclaration(1034) into MethodDeclaration(1035) at 5", "Insert SimpleName: Object(1024) into SimpleType: Object(1025) at 0", "Insert SimpleType: ASTJxltLiteral(1028) into SingleVariableDeclaration(1030) at 0", "Insert SimpleName: node(1029) into SingleVariableDeclaration(1030) at 1", "Insert SimpleType: Object(1032) into SingleVariableDeclaration(1034) at 0", "Insert SimpleName: data(1033) into SingleVariableDeclaration(1034) at 1", "Insert SimpleName: ASTJxltLiteral(1027) into SimpleType: ASTJxltLiteral(1028) at 0", "Insert SimpleName: Object(1031) into SimpleType: Object(1032) at 0"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}