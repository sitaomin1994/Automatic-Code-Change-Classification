{"application": "google-closure-compiler", "csha": "aeaa7a608b703f9c976cd50b6a8e4a4f7852302d", "files": [{"CodeGenerator_cluster": {"actions": [{"root": "UPDATE from tagAsExterns to add", "operations": ["UPD SimpleName: tagAsExterns from tagAsExterns to add"]}, {"root": "INS StringLiteral: \"/** @fileoverview @typeSummary */\\n\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"/** @fileoverview @typeSummary */\\n\" to MethodInvocation at 1"]}]}}, {"CodeGenerator_diff": {"operations": ["Update SimpleName: tagAsExterns(248) to add", "Insert StringLiteral: \"/** @fileoverview @typeSummary */\\n\"(249) into MethodInvocation(250) at 1"]}}, {"Compiler_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 180", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 180", "INS InfixExpression: != to InfixExpression: && at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: input to MethodInvocation at 2", "INS SimpleName: input to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: n to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getJSDocInfo to MethodInvocation at 1", "INS SimpleName: input to MethodInvocation at 0", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: addChildToBack to MethodInvocation at 1", "INS SimpleName: externsRoot to MethodInvocation at 0", "INS SimpleName: remove to MethodInvocation at 1", "INS SimpleName: n to InfixExpression: == at 0", "INS SimpleName: info to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS SimpleName: getAstRoot to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: info to MethodInvocation at 0", "INS SimpleName: setIsExtern to MethodInvocation at 1", "INS SimpleName: n to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: hoistIfTypeSummary to MethodDeclaration at 2", "INS ExpressionStatement to Block at 3", "INS IfStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ExpressionStatement to Block at 1", "INS ReturnStatement to Block at 4", "INS MethodInvocation to InfixExpression: && at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: getModule to MethodInvocation at 1", "INS SimpleName: externs to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: n to VariableDeclarationFragment at 0", "INS SimpleName: input to MethodInvocation at 2", "INS SimpleName: input to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: CompilerInput to SimpleType: CompilerInput at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: input to SingleVariableDeclaration at 1", "INS SimpleType: JSDocInfo to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: isTypeSummary to MethodInvocation at 1", "INS SimpleName: JSDocInfo to SimpleType: JSDocInfo at 0", "INS SimpleType: CompilerInput to SingleVariableDeclaration at 0", "INS IfStatement to Block at 1", "INS SimpleName: info to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 4", "INS ThisExpression to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "UPDATE from hoistUnorderedExterns to hoistExterns", "operations": ["UPD SimpleName: hoistUnorderedExterns from hoistUnorderedExterns to hoistExterns", "UPD SimpleName: hoistUnorderedExterns from hoistUnorderedExterns to hoistExterns"]}, {"root": "UPDATE from hoistAllExterns to hoistIjsFiles", "operations": ["UPD SimpleName: hoistAllExterns from hoistAllExterns to hoistIjsFiles", "UPD SimpleName: hoistAllExterns from hoistAllExterns to hoistIjsFiles"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from Hoists inputs with the @externs annotation and no provides or requires into the externs list. to Hoists inputs with the @externs annotation into the externs list.", "operations": ["UPD TextElement: Hoists inputs with the @externs annotation and no provides or requires into the externs list. from Hoists inputs with the @externs annotation and no provides or requires into the externs list. to Hoists inputs with the @externs annotation into the externs list."]}, {"root": "UPDATE from Hoists inputs with the @externs annotation into the externs list. to Hoists inputs with the @typeSummary annotation into the externs list.", "operations": ["UPD TextElement: Hoists inputs with the @externs annotation into the externs list. from Hoists inputs with the @externs annotation into the externs list. to Hoists inputs with the @typeSummary annotation into the externs list."]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: allowGoogProvideInExterns to MethodInvocation at 1", "MOV SimpleName: options to MethodInvocation at 0"]}, {"root": "UPDATE from allowGoogProvideInExterns to allowIjsInputs", "operations": ["UPD SimpleName: allowGoogProvideInExterns from allowGoogProvideInExterns to allowIjsInputs"]}, {"root": "INS InfixExpression: && to MethodInvocation at 2", "operations": ["INS InfixExpression: && to MethodInvocation at 2", "INS SimpleName: firstOutput to InfixExpression: && at 0"]}, {"root": "INS InfixExpression: && to MethodInvocation at 2", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: isFromExterns to MethodInvocation at 1", "INS SimpleName: firstOutput to InfixExpression: && at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: n to MethodInvocation at 0", "INS InfixExpression: && to MethodInvocation at 2"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 2"]}, {"root": "UPDATE from hoistIfExtern to hoistIfTypeSummary", "operations": ["UPD SimpleName: hoistIfExtern from hoistIfExtern to hoistIfTypeSummary"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL InfixExpression: &&", "DEL SimpleName: needsManagement", "DEL MethodInvocation", "DEL QualifiedName: options.dependencyOptions", "DEL MethodInvocation"]}]}}, {"Compiler_diff": {"operations": ["Insert MethodDeclaration(5752) into TypeDeclaration: class(11706) at 180", "Update SimpleName: hoistUnorderedExterns(5532) to hoistExterns", "Update SimpleName: hoistAllExterns(5587) to hoistIjsFiles", "Insert Modifier: private(5685) into MethodDeclaration(5752) at 0", "Insert PrimitiveType: boolean(5686) into MethodDeclaration(5752) at 1", "Insert SimpleName: hoistIfTypeSummary(5687) into MethodDeclaration(5752) at 2", "Insert SingleVariableDeclaration(5691) into MethodDeclaration(5752) at 3", "Insert Block(5751) into MethodDeclaration(5752) at 4", "Insert SimpleType: CompilerInput(5689) into SingleVariableDeclaration(5691) at 0", "Insert SimpleName: input(5690) into SingleVariableDeclaration(5691) at 1", "Insert VariableDeclarationStatement(5700) into Block(5751) at 0", "Insert IfStatement(5707) into Block(5751) at 1", "Insert VariableDeclarationStatement(5715) into Block(5751) at 2", "Insert IfStatement(5748) into Block(5751) at 3", "Insert ReturnStatement(5750) into Block(5751) at 4", "Insert MethodInvocation(5507) into IfStatement(5512) at 0", "Update TextElement: Hoists inputs with the @externs annotation and no provides or requires into the externs list.(5528) to Hoists inputs with the @externs annotation into the externs list.", "Update TextElement: Hoists inputs with the @externs annotation into the externs list.(5583) to Hoists inputs with the @typeSummary annotation into the externs list.", "Insert SimpleName: CompilerInput(5688) into SimpleType: CompilerInput(5689) at 0", "Insert SimpleType: Node(5693) into VariableDeclarationStatement(5700) at 0", "Insert VariableDeclarationFragment(5699) into VariableDeclarationStatement(5700) at 1", "Insert InfixExpression: ==(5703) into IfStatement(5707) at 0", "Insert Block(5706) into IfStatement(5707) at 1", "Insert SimpleType: JSDocInfo(5709) into VariableDeclarationStatement(5715) at 0", "Insert VariableDeclarationFragment(5714) into VariableDeclarationStatement(5715) at 1", "Insert InfixExpression: &&(5722) into IfStatement(5748) at 0", "Insert Block(5747) into IfStatement(5748) at 1", "Insert BooleanLiteral: false(5749) into ReturnStatement(5750) at 0", "Update SimpleName: hoistUnorderedExterns(5425) to hoistExterns", "Move SimpleName: options(5508) into MethodInvocation(5507) at 0", "Update SimpleName: allowGoogProvideInExterns(5509) to allowIjsInputs", "Move SimpleName: allowGoogProvideInExterns(5509) into MethodInvocation(5507) at 1", "Insert SimpleName: Node(5692) into SimpleType: Node(5693) at 0", "Insert SimpleName: n(5694) into VariableDeclarationFragment(5699) at 0", "Insert MethodInvocation(5698) into VariableDeclarationFragment(5699) at 1", "Insert SimpleName: n(5701) into InfixExpression: ==(5703) at 0", "Insert NullLiteral(5702) into InfixExpression: ==(5703) at 1", "Insert ReturnStatement(5705) into Block(5706) at 0", "Insert SimpleName: JSDocInfo(5708) into SimpleType: JSDocInfo(5709) at 0", "Insert SimpleName: info(5710) into VariableDeclarationFragment(5714) at 0", "Insert MethodInvocation(5713) into VariableDeclarationFragment(5714) at 1", "Insert InfixExpression: !=(5718) into InfixExpression: &&(5722) at 0", "Insert MethodInvocation(5721) into InfixExpression: &&(5722) at 1", "Insert ExpressionStatement(5727) into Block(5747) at 0", "Insert ExpressionStatement(5732) into Block(5747) at 1", "Insert ExpressionStatement(5739) into Block(5747) at 2", "Insert ExpressionStatement(5744) into Block(5747) at 3", "Insert ReturnStatement(5746) into Block(5747) at 4", "Insert InfixExpression: &&(7211) into MethodInvocation(7212) at 2", "Insert InfixExpression: &&(7224) into MethodInvocation(7225) at 2", "Insert SimpleName: input(5695) into MethodInvocation(5698) at 0", "Insert SimpleName: getAstRoot(5696) into MethodInvocation(5698) at 1", "Insert ThisExpression(5697) into MethodInvocation(5698) at 2", "Insert BooleanLiteral: false(5704) into ReturnStatement(5705) at 0", "Insert SimpleName: n(5711) into MethodInvocation(5713) at 0", "Insert SimpleName: getJSDocInfo(5712) into MethodInvocation(5713) at 1", "Insert SimpleName: info(5716) into InfixExpression: !=(5718) at 0", "Insert NullLiteral(5717) into InfixExpression: !=(5718) at 1", "Insert SimpleName: info(5719) into MethodInvocation(5721) at 0", "Insert SimpleName: isTypeSummary(5720) into MethodInvocation(5721) at 1", "Insert MethodInvocation(5726) into ExpressionStatement(5727) at 0", "Insert MethodInvocation(5731) into ExpressionStatement(5732) at 0", "Insert MethodInvocation(5738) into ExpressionStatement(5739) at 0", "Insert MethodInvocation(5743) into ExpressionStatement(5744) at 0", "Insert BooleanLiteral: true(5745) into ReturnStatement(5746) at 0", "Insert SimpleName: firstOutput(7207) into InfixExpression: &&(7211) at 0", "Move MethodInvocation(7145) into InfixExpression: &&(7211) at 1", "Insert SimpleName: firstOutput(7216) into InfixExpression: &&(7224) at 0", "Insert PrefixExpression: !(7220) into InfixExpression: &&(7224) at 1", "Move MethodInvocation(7152) into InfixExpression: &&(7224) at 2", "Update SimpleName: hoistAllExterns(5512) to hoistIjsFiles", "Update SimpleName: hoistIfExtern(5598) to hoistIfTypeSummary", "Insert SimpleName: externsRoot(5723) into MethodInvocation(5726) at 0", "Insert SimpleName: addChildToBack(5724) into MethodInvocation(5726) at 1", "Insert SimpleName: n(5725) into MethodInvocation(5726) at 2", "Insert SimpleName: input(5728) into MethodInvocation(5731) at 0", "Insert SimpleName: setIsExtern(5729) into MethodInvocation(5731) at 1", "Insert BooleanLiteral: true(5730) into MethodInvocation(5731) at 2", "Insert MethodInvocation(5735) into MethodInvocation(5738) at 0", "Insert SimpleName: remove(5736) into MethodInvocation(5738) at 1", "Insert SimpleName: input(5737) into MethodInvocation(5738) at 2", "Insert SimpleName: externs(5740) into MethodInvocation(5743) at 0", "Insert SimpleName: add(5741) into MethodInvocation(5743) at 1", "Insert SimpleName: input(5742) into MethodInvocation(5743) at 2", "Insert MethodInvocation(7219) into PrefixExpression: !(7220) at 0", "Insert SimpleName: input(5733) into MethodInvocation(5735) at 0", "Insert SimpleName: getModule(5734) into MethodInvocation(5735) at 1", "Insert SimpleName: n(7217) into MethodInvocation(7219) at 0", "Insert SimpleName: isFromExterns(7218) into MethodInvocation(7219) at 1", "Delete QualifiedName: options.dependencyOptions(5505)", "Delete SimpleName: needsManagement(5506)", "Delete MethodInvocation(5507)", "Delete MethodInvocation(5510)", "Delete InfixExpression: &&(5511)"]}}, {"CompilerOptions_cluster": {"actions": [{"root": "INS InfixExpression: || to ReturnStatement at 0", "operations": ["INS InfixExpression: || to ReturnStatement at 0", "INS QualifiedName: IncrementalCheckMode.GENERATE_IJS to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: incrementalCheckMode to InfixExpression: == at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV FieldAccess to InfixExpression: || at 0"]}]}}, {"CompilerOptions_diff": {"operations": ["Insert InfixExpression: ||(417) into ReturnStatement(418) at 0", "Move FieldAccess(413) into InfixExpression: ||(417) at 0", "Insert InfixExpression: ==(416) into InfixExpression: ||(417) at 1", "Insert SimpleName: incrementalCheckMode(414) into InfixExpression: ==(416) at 0", "Insert QualifiedName: IncrementalCheckMode.GENERATE_IJS(415) into InfixExpression: ==(416) at 1"]}}, {"ConvertToTypedInterface_cluster": {"actions": [{"root": "UPDATE from unhoistExternsToCode to removeUselessFiles", "operations": ["UPD SimpleName: unhoistExternsToCode from unhoistExternsToCode to removeUselessFiles", "UPD SimpleName: unhoistExternsToCode from unhoistExternsToCode to removeUselessFiles"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "INS EnhancedForStatement to Block at 0", "operations": ["INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: concat to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 0", "INS SimpleName: script to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Node to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from root to Iterables", "operations": ["UPD SimpleName: root from root to Iterables"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: root to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "UPDATE from NodeUtil to externs", "operations": ["UPD SimpleName: NodeUtil from NodeUtil to externs"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: deleteChildren to MethodInvocation at 1", "MOV SimpleName: NodeUtil to MethodInvocation at 0"]}, {"root": "UPDATE from deleteChildren to children", "operations": ["UPD SimpleName: deleteChildren from deleteChildren to children", "UPD SimpleName: getFirstChild from getFirstChild to children"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: root to MethodInvocation at 0", "MOV SimpleName: getFirstChild to MethodInvocation at 1"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from firstScript to script", "operations": ["UPD SimpleName: firstScript from firstScript to script", "UPD SimpleName: firstScript from firstScript to script"]}, {"root": "UPDATE from addChildrenToBack to detach", "operations": ["UPD SimpleName: addChildrenToBack from addChildrenToBack to detach"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: hasChildren", "DEL MethodInvocation", "DEL SimpleName: externScript"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: removeChildren", "DEL SimpleName: externScript"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: externScript", "DEL SimpleName: reportChangeToChangeScope", "DEL SimpleName: compiler", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL SimpleName: firstTime", "DEL SimpleName: firstTime", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL ForStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: script", "DEL Block", "DEL SimpleName: getFirstChild", "DEL Assignment: =", "DEL SimpleName: script", "DEL VariableDeclarationExpression", "DEL ExpressionStatement", "DEL ForStatement", "DEL SimpleName: script", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: script", "DEL InfixExpression: !=", "DEL SimpleName: compiler", "DEL IfStatement", "DEL SimpleName: script", "DEL SimpleName: getNext", "DEL Block", "DEL NullLiteral"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: Node", "DEL MethodInvocation", "DEL SimpleName: firstScript", "DEL SimpleName: Node", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: firstTime", "DEL BooleanLiteral: true", "DEL VariableDeclarationStatement"]}, {"root": "DEL WhileStatement", "operations": ["DEL SimpleName: Node", "DEL SimpleName: externScript", "DEL MethodInvocation", "DEL SimpleType: Node", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: removeFirstChild", "DEL WhileStatement", "DEL SimpleName: hasChildren", "DEL SimpleName: externs", "DEL Block", "DEL SimpleName: externs", "DEL VariableDeclarationFragment"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: root", "DEL Block", "DEL SimpleName: hasChildren", "DEL InfixExpression: ||", "DEL SimpleName: hasChildren", "DEL InfixExpression: &&", "DEL SimpleName: root", "DEL PrefixExpression: !", "DEL ReturnStatement", "DEL SimpleName: getFirstChild", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: hasOneChild", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: root", "DEL ParenthesizedExpression", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation"]}]}}, {"ConvertToTypedInterface_diff": {"operations": ["Update SimpleName: unhoistExternsToCode(102) to removeUselessFiles", "Insert Block(183) into MethodDeclaration(184) at 6", "Insert EnhancedForStatement(140) into Block(141) at 0", "Move ExpressionStatement(230) into Block(183) at 0", "Move ForStatement(255) into Block(183) at 1", "Insert SingleVariableDeclaration(114) into EnhancedForStatement(140) at 0", "Insert MethodInvocation(123) into EnhancedForStatement(140) at 1", "Insert Block(139) into EnhancedForStatement(140) at 2", "Move SimpleType: Node(112) into SingleVariableDeclaration(114) at 0", "Insert SimpleName: script(113) into SingleVariableDeclaration(114) at 1", "Update SimpleName: root(114) to Iterables", "Move SimpleName: root(114) into MethodInvocation(123) at 0", "Insert SimpleName: concat(116) into MethodInvocation(123) at 1", "Insert MethodInvocation(119) into MethodInvocation(123) at 2", "Insert MethodInvocation(122) into MethodInvocation(123) at 3", "Move IfStatement(192) into Block(139) at 0", "Update SimpleName: unhoistExternsToCode(226) to removeUselessFiles", "Update SimpleName: NodeUtil(130) to externs", "Move SimpleName: NodeUtil(130) into MethodInvocation(119) at 0", "Update SimpleName: deleteChildren(131) to children", "Move SimpleName: deleteChildren(131) into MethodInvocation(119) at 1", "Move SimpleName: root(143) into MethodInvocation(122) at 0", "Update SimpleName: getFirstChild(144) to children", "Move SimpleName: getFirstChild(144) into MethodInvocation(122) at 1", "Insert PrefixExpression: !(127) into IfStatement(138) at 0", "Move MethodInvocation(129) into PrefixExpression: !(127) at 0", "Move ExpressionStatement(184) into Block(137) at 1", "Update SimpleName: firstScript(167) to script", "Update SimpleName: addChildrenToBack(168) to detach", "Update SimpleName: firstScript(182) to script", "Delete SimpleName: externScript(164)", "Delete SimpleName: hasChildren(165)", "Delete MethodInvocation(166)", "Delete SimpleName: externScript(169)", "Delete SimpleName: removeChildren(170)", "Delete MethodInvocation(171)", "Delete SimpleName: compiler(174)", "Delete SimpleName: reportChangeToChangeScope(175)", "Delete SimpleName: externScript(176)", "Delete MethodInvocation(177)", "Delete ExpressionStatement(178)", "Delete SimpleName: firstTime(179)", "Delete SimpleName: firstTime(185)", "Delete BooleanLiteral: false(186)", "Delete Assignment: =(187)", "Delete ExpressionStatement(188)", "Delete Block(189)", "Delete IfStatement(190)", "Delete SimpleName: script(113)", "Delete SimpleName: getFirstChild(115)", "Delete MethodInvocation(116)", "Delete VariableDeclarationFragment(117)", "Delete VariableDeclarationExpression(118)", "Delete SimpleName: script(119)", "Delete NullLiteral(120)", "Delete InfixExpression: !=(121)", "Delete SimpleName: script(122)", "Delete SimpleName: script(123)", "Delete SimpleName: getNext(124)", "Delete MethodInvocation(125)", "Delete Assignment: =(126)", "Delete SimpleName: script(132)", "Delete SimpleName: compiler(133)", "Delete MethodInvocation(134)", "Delete ExpressionStatement(135)", "Delete Block(136)", "Delete IfStatement(137)", "Delete Block(138)", "Delete ForStatement(139)", "Delete SimpleName: Node(140)", "Delete SimpleType: Node(141)", "Delete SimpleName: firstScript(142)", "Delete MethodInvocation(145)", "Delete VariableDeclarationFragment(146)", "Delete VariableDeclarationStatement(147)", "Delete PrimitiveType: boolean(148)", "Delete SimpleName: firstTime(149)", "Delete BooleanLiteral: true(150)", "Delete VariableDeclarationFragment(151)", "Delete VariableDeclarationStatement(152)", "Delete SimpleName: externs(153)", "Delete SimpleName: hasChildren(154)", "Delete MethodInvocation(155)", "Delete SimpleName: Node(156)", "Delete SimpleType: Node(157)", "Delete SimpleName: externScript(158)", "Delete SimpleName: externs(159)", "Delete SimpleName: removeFirstChild(160)", "Delete MethodInvocation(161)", "Delete VariableDeclarationFragment(162)", "Delete VariableDeclarationStatement(163)", "Delete Block(193)", "Delete WhileStatement(194)", "Delete SimpleName: root(210)", "Delete SimpleName: hasChildren(211)", "Delete MethodInvocation(212)", "Delete PrefixExpression: !(213)", "Delete SimpleName: root(214)", "Delete SimpleName: hasOneChild(215)", "Delete MethodInvocation(216)", "Delete SimpleName: root(217)", "Delete SimpleName: getFirstChild(218)", "Delete MethodInvocation(219)", "Delete SimpleName: hasChildren(220)", "Delete MethodInvocation(221)", "Delete PrefixExpression: !(222)", "Delete InfixExpression: &&(223)", "Delete ParenthesizedExpression(224)", "Delete InfixExpression: ||(225)", "Delete ReturnStatement(231)", "Delete Block(232)", "Delete IfStatement(233)", "Delete Block(256)"]}}, {"JSDocInfo_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 88", "operations": ["INS SimpleName: value to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: MASK_TYPE_SUMMARY to MethodInvocation at 2", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: setFlag to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: value to MethodInvocation at 1", "INS SimpleName: setTypeSummary to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 88", "INS PrimitiveType: void to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 119", "operations": ["INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS TextElement: . to TagElement at 4", "INS SimpleName: JSDocInfo to TagElement: @link at 0", "INS TextElement: Returns whether the  to TagElement at 0", "INS SimpleName: getFlag to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 119", "INS TextElement:  annotation is present on this to TagElement at 2", "INS TextElement:  @typeSummary to TagElement: @code at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @link to TagElement at 3", "INS SimpleName: isTypeSummary to MethodDeclaration at 3", "INS SimpleName: MASK_TYPE_SUMMARY to MethodInvocation at 1", "INS TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from MASK_UNUSED_1 to MASK_TYPE_SUMMARY", "operations": ["UPD SimpleName: MASK_UNUSED_1 from MASK_UNUSED_1 to MASK_TYPE_SUMMARY"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL SingleMemberAnnotation", "DEL SimpleName: SuppressWarnings", "DEL StringLiteral: \"unused\""]}]}}, {"JSDocInfo_diff": {"operations": ["Insert MethodDeclaration(2706) into TypeDeclaration: class(6528) at 88", "Insert MethodDeclaration(3245) into TypeDeclaration: class(6528) at 119", "Insert PrimitiveType: void(2695) into MethodDeclaration(2706) at 0", "Insert SimpleName: setTypeSummary(2696) into MethodDeclaration(2706) at 1", "Insert SingleVariableDeclaration(2699) into MethodDeclaration(2706) at 2", "Insert Block(2705) into MethodDeclaration(2706) at 3", "Insert Javadoc(3236) into MethodDeclaration(3245) at 0", "Insert Modifier: public(3237) into MethodDeclaration(3245) at 1", "Insert PrimitiveType: boolean(3238) into MethodDeclaration(3245) at 2", "Insert SimpleName: isTypeSummary(3239) into MethodDeclaration(3245) at 3", "Insert Block(3244) into MethodDeclaration(3245) at 4", "Update SimpleName: MASK_UNUSED_1(1682) to MASK_TYPE_SUMMARY", "Insert PrimitiveType: boolean(2697) into SingleVariableDeclaration(2699) at 0", "Insert SimpleName: value(2698) into SingleVariableDeclaration(2699) at 1", "Insert ExpressionStatement(2704) into Block(2705) at 0", "Insert TagElement(3235) into Javadoc(3236) at 0", "Insert ReturnStatement(3243) into Block(3244) at 0", "Insert MethodInvocation(2703) into ExpressionStatement(2704) at 0", "Insert TextElement: Returns whether the (3228) into TagElement(3235) at 0", "Insert TagElement: @code(3230) into TagElement(3235) at 1", "Insert TextElement:  annotation is present on this(3231) into TagElement(3235) at 2", "Insert TagElement: @link(3233) into TagElement(3235) at 3", "Insert TextElement: .(3234) into TagElement(3235) at 4", "Insert MethodInvocation(3242) into ReturnStatement(3243) at 0", "Insert SimpleName: setFlag(2700) into MethodInvocation(2703) at 0", "Insert SimpleName: value(2701) into MethodInvocation(2703) at 1", "Insert SimpleName: MASK_TYPE_SUMMARY(2702) into MethodInvocation(2703) at 2", "Insert TextElement:  @typeSummary(3229) into TagElement: @code(3230) at 0", "Insert SimpleName: JSDocInfo(3232) into TagElement: @link(3233) at 0", "Insert SimpleName: getFlag(3240) into MethodInvocation(3242) at 0", "Insert SimpleName: MASK_TYPE_SUMMARY(3241) into MethodInvocation(3242) at 1", "Delete SimpleName: SuppressWarnings(1675)", "Delete StringLiteral: \"unused\"(1676)", "Delete SingleMemberAnnotation(1677)"]}}, {"JSDocInfoBuilder_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 88", "operations": ["INS TextElement: . to TagElement at 6", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: isTypeSummary to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodDeclaration to TypeDeclaration: class at 88", "INS TagElement: @link to TagElement at 3", "INS Block to IfStatement at 1", "INS SimpleName: currentInfo to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS TextElement: Records that the  to TagElement at 0", "INS TagElement: @link to TagElement at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: currentInfo to MethodInvocation at 0", "INS TextElement:  true to TagElement: @code at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS ExpressionStatement to Block at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS TagElement: @code to TagElement at 5", "INS SimpleName: populated to Assignment: = at 0", "INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: currentInfo to MethodInvocation at 0", "INS SimpleName: isExterns to MethodInvocation at 1", "INS SimpleName: JSDocInfo to TagElement: @link at 0", "INS InfixExpression: && to IfStatement at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodRef to TagElement: @link at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS ReturnStatement to Block at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to IfStatement at 2", "INS SimpleName: isTypeSummary to MethodRef at 1", "INS SimpleName: recordTypeSummary to MethodDeclaration at 3", "INS TextElement:  being built should have its to TagElement at 2", "INS SimpleName: JSDocInfo to MethodRef at 0", "INS IfStatement to Block at 0", "INS TextElement:  flag set to  to TagElement at 4", "INS PrefixExpression: ! to InfixExpression: && at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: setTypeSummary to MethodInvocation at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: currentInfo to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: isTypeSummary to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV PrefixExpression: ! to InfixExpression: && at 0"]}, {"root": "INS MethodInvocation to InfixExpression: || at 3", "operations": ["INS SimpleName: currentInfo to MethodInvocation at 0", "INS SimpleName: isTypeSummary to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 3"]}]}}, {"JSDocInfoBuilder_diff": {"operations": ["Insert MethodDeclaration(3173) into TypeDeclaration: class(3975) at 88", "Insert Javadoc(3143) into MethodDeclaration(3173) at 0", "Insert Modifier: public(3144) into MethodDeclaration(3173) at 1", "Insert PrimitiveType: boolean(3145) into MethodDeclaration(3173) at 2", "Insert SimpleName: recordTypeSummary(3146) into MethodDeclaration(3173) at 3", "Insert Block(3172) into MethodDeclaration(3173) at 4", "Insert TagElement(3142) into Javadoc(3143) at 0", "Insert IfStatement(3171) into Block(3172) at 0", "Insert InfixExpression: &&(3111) into IfStatement(3127) at 0", "Insert TextElement: Records that the (3130) into TagElement(3142) at 0", "Insert TagElement: @link(3132) into TagElement(3142) at 1", "Insert TextElement:  being built should have its(3133) into TagElement(3142) at 2", "Insert TagElement: @link(3137) into TagElement(3142) at 3", "Insert TextElement:  flag set to (3138) into TagElement(3142) at 4", "Insert TagElement: @code(3140) into TagElement(3142) at 5", "Insert TextElement: .(3141) into TagElement(3142) at 6", "Insert InfixExpression: &&(3155) into IfStatement(3171) at 0", "Insert Block(3167) into IfStatement(3171) at 1", "Insert Block(3170) into IfStatement(3171) at 2", "Move PrefixExpression: !(3103) into InfixExpression: &&(3111) at 0", "Insert PrefixExpression: !(3110) into InfixExpression: &&(3111) at 1", "Insert SimpleName: JSDocInfo(3131) into TagElement: @link(3132) at 0", "Insert MethodRef(3136) into TagElement: @link(3137) at 0", "Insert TextElement:  true(3139) into TagElement: @code(3140) at 0", "Insert PrefixExpression: !(3150) into InfixExpression: &&(3155) at 0", "Insert PrefixExpression: !(3154) into InfixExpression: &&(3155) at 1", "Insert ExpressionStatement(3160) into Block(3167) at 0", "Insert ExpressionStatement(3164) into Block(3167) at 1", "Insert ReturnStatement(3166) into Block(3167) at 2", "Insert ReturnStatement(3169) into Block(3170) at 0", "Insert MethodInvocation(3109) into PrefixExpression: !(3110) at 0", "Insert SimpleName: JSDocInfo(3134) into MethodRef(3136) at 0", "Insert SimpleName: isTypeSummary(3135) into MethodRef(3136) at 1", "Insert MethodInvocation(3149) into PrefixExpression: !(3150) at 0", "Insert MethodInvocation(3153) into PrefixExpression: !(3154) at 0", "Insert MethodInvocation(3159) into ExpressionStatement(3160) at 0", "Insert Assignment: =(3163) into ExpressionStatement(3164) at 0", "Insert BooleanLiteral: true(3165) into ReturnStatement(3166) at 0", "Insert BooleanLiteral: false(3168) into ReturnStatement(3169) at 0", "Insert MethodInvocation(282) into InfixExpression: ||(283) at 3", "Insert SimpleName: currentInfo(3107) into MethodInvocation(3109) at 0", "Insert SimpleName: isTypeSummary(3108) into MethodInvocation(3109) at 1", "Insert SimpleName: currentInfo(3147) into MethodInvocation(3149) at 0", "Insert SimpleName: isTypeSummary(3148) into MethodInvocation(3149) at 1", "Insert SimpleName: currentInfo(3151) into MethodInvocation(3153) at 0", "Insert SimpleName: isExterns(3152) into MethodInvocation(3153) at 1", "Insert SimpleName: currentInfo(3156) into MethodInvocation(3159) at 0", "Insert SimpleName: setTypeSummary(3157) into MethodInvocation(3159) at 1", "Insert BooleanLiteral: true(3158) into MethodInvocation(3159) at 2", "Insert SimpleName: populated(3161) into Assignment: =(3163) at 0", "Insert BooleanLiteral: true(3162) into Assignment: =(3163) at 1", "Insert SimpleName: currentInfo(280) into MethodInvocation(282) at 0", "Insert SimpleName: isTypeSummary(281) into MethodInvocation(282) at 1"]}}, {"Annotation_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 62", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 62", "INS SimpleName: TYPE_SUMMARY to EnumConstantDeclaration at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: build to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from build to put", "operations": ["UPD SimpleName: build from build to put"]}, {"root": "INS StringLiteral: \"wizaction\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"wizaction\" to MethodInvocation at 2"]}, {"root": "INS QualifiedName: Annotation.WIZACTION to MethodInvocation at 3", "operations": ["INS QualifiedName: Annotation.WIZACTION to MethodInvocation at 3"]}, {"root": "UPDATE from \"wizaction\" to \"version\"", "operations": ["UPD StringLiteral: \"wizaction\" from \"wizaction\" to \"version\""]}, {"root": "UPDATE from Annotation.WIZACTION to Annotation.VERSION", "operations": ["UPD QualifiedName: Annotation.WIZACTION from Annotation.WIZACTION to Annotation.VERSION"]}, {"root": "UPDATE from \"version\" to \"unrestricted\"", "operations": ["UPD StringLiteral: \"version\" from \"version\" to \"unrestricted\""]}, {"root": "UPDATE from Annotation.VERSION to Annotation.UNRESTRICTED", "operations": ["UPD QualifiedName: Annotation.VERSION from Annotation.VERSION to Annotation.UNRESTRICTED"]}, {"root": "UPDATE from \"unrestricted\" to \"typeSummary\"", "operations": ["UPD StringLiteral: \"unrestricted\" from \"unrestricted\" to \"typeSummary\""]}, {"root": "UPDATE from Annotation.UNRESTRICTED to Annotation.TYPE_SUMMARY", "operations": ["UPD QualifiedName: Annotation.UNRESTRICTED from Annotation.UNRESTRICTED to Annotation.TYPE_SUMMARY"]}]}}, {"Annotation_diff": {"operations": ["Insert EnumConstantDeclaration(133) into EnumDeclaration(434) at 62", "Insert SimpleName: TYPE_SUMMARY(132) into EnumConstantDeclaration(133) at 0", "Insert MethodInvocation(431) into VariableDeclarationFragment(432) at 1", "Move MethodInvocation(425) into MethodInvocation(431) at 0", "Insert SimpleName: build(430) into MethodInvocation(431) at 1", "Update SimpleName: build(424) to put", "Insert StringLiteral: \"wizaction\"(427) into MethodInvocation(429) at 2", "Insert QualifiedName: Annotation.WIZACTION(428) into MethodInvocation(429) at 3", "Update StringLiteral: \"wizaction\"(421) to \"version\"", "Update QualifiedName: Annotation.WIZACTION(422) to Annotation.VERSION", "Update StringLiteral: \"version\"(417) to \"unrestricted\"", "Update QualifiedName: Annotation.VERSION(418) to Annotation.UNRESTRICTED", "Update StringLiteral: \"unrestricted\"(413) to \"typeSummary\"", "Update QualifiedName: Annotation.UNRESTRICTED(414) to Annotation.TYPE_SUMMARY"]}}, {"JsDocInfoParser_cluster": {"actions": [{"root": "MOVE from SwitchStatement", "operations": ["MOV ReturnStatement to SwitchStatement at 130", "MOV ReturnStatement to SwitchStatement at 176", "MOV ReturnStatement to SwitchStatement at 117", "MOV ReturnStatement to SwitchStatement at 109", "MOV ReturnStatement to SwitchStatement at 121", "MOV ReturnStatement to SwitchStatement at 161", "MOV ReturnStatement to SwitchStatement at 159", "MOV ReturnStatement to SwitchStatement at 79", "MOV ReturnStatement to SwitchStatement at 112", "MOV ReturnStatement to SwitchStatement at 124", "MOV ReturnStatement to SwitchStatement at 133", "MOV ReturnStatement to SwitchStatement at 165", "MOV ReturnStatement to SwitchStatement at 156", "MOV SwitchCase to SwitchStatement at 117", "MOV ReturnStatement to SwitchStatement at 127", "MOV ReturnStatement to SwitchStatement at 171", "MOV ReturnStatement to SwitchStatement at 153"]}, {"root": "INS SwitchCase to SwitchStatement at 79", "operations": ["INS SimpleName: TYPE_SUMMARY to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 79"]}, {"root": "INS IfStatement to SwitchStatement at 80", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: recordTypeSummary to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS StringLiteral: \"msg.jsdoc.typesummary\" to MethodInvocation at 1", "INS IfStatement to SwitchStatement at 80", "INS SimpleName: addParserWarning to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: jsdocBuilder to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to SwitchStatement at 138", "operations": ["INS SimpleName: eatUntilEOLIfNotAnnotation to MethodInvocation at 0", "INS ReturnStatement to SwitchStatement at 138", "INS MethodInvocation to ReturnStatement at 0"]}]}}, {"JsDocInfoParser_diff": {"operations": ["Move ReturnStatement(2168) into SwitchStatement(3780) at 79", "Move ReturnStatement(2183) into SwitchStatement(3780) at 109", "Move ReturnStatement(2198) into SwitchStatement(3780) at 112", "Move SwitchCase(2200) into SwitchStatement(3780) at 117", "Move ReturnStatement(2220) into SwitchStatement(3780) at 117", "Move ReturnStatement(2239) into SwitchStatement(3780) at 121", "Move ReturnStatement(2258) into SwitchStatement(3780) at 124", "Move ReturnStatement(2277) into SwitchStatement(3780) at 127", "Move ReturnStatement(2296) into SwitchStatement(3780) at 130", "Move ReturnStatement(2315) into SwitchStatement(3780) at 133", "Move ReturnStatement(2727) into SwitchStatement(3780) at 176", "Move ReturnStatement(2742) into SwitchStatement(3780) at 161", "Move ReturnStatement(2753) into SwitchStatement(3780) at 153", "Move ReturnStatement(2768) into SwitchStatement(3780) at 156", "Move ReturnStatement(2815) into SwitchStatement(3780) at 159", "Move ReturnStatement(2841) into SwitchStatement(3780) at 165", "Move ReturnStatement(3159) into SwitchStatement(3780) at 171", "Insert SwitchCase(1863) into SwitchStatement(3780) at 79", "Insert IfStatement(1873) into SwitchStatement(3780) at 80", "Insert ReturnStatement(2330) into SwitchStatement(3780) at 138", "Insert SimpleName: TYPE_SUMMARY(1862) into SwitchCase(1863) at 0", "Insert PrefixExpression: !(1867) into IfStatement(1873) at 0", "Insert Block(1872) into IfStatement(1873) at 1", "Insert MethodInvocation(2329) into ReturnStatement(2330) at 0", "Insert MethodInvocation(1866) into PrefixExpression: !(1867) at 0", "Insert ExpressionStatement(1871) into Block(1872) at 0", "Insert SimpleName: eatUntilEOLIfNotAnnotation(2328) into MethodInvocation(2329) at 0", "Insert SimpleName: jsdocBuilder(1864) into MethodInvocation(1866) at 0", "Insert SimpleName: recordTypeSummary(1865) into MethodInvocation(1866) at 1", "Insert MethodInvocation(1870) into ExpressionStatement(1871) at 0", "Insert SimpleName: addParserWarning(1868) into MethodInvocation(1870) at 0", "Insert StringLiteral: \"msg.jsdoc.typesummary\"(1869) into MethodInvocation(1870) at 1"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}