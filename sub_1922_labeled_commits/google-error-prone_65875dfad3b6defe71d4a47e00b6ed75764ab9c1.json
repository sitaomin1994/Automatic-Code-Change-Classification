{"application": "google-error-prone", "csha": "65875dfad3b6defe71d4a47e00b6ed75764ab9c1", "files": [{"ArrayHashCode_cluster": {"actions": [{"root": "DEL MemberValuePair", "operations": ["DEL StringLiteral: \"type. Because these are varags methods that take Object..., the primitive array is \"", "DEL SimpleName: explanation", "DEL StringLiteral: \"which is an array.\\n\"", "DEL StringLiteral: \"contents of the array into account. There are several ways to mess this up:\\n\"", "DEL StringLiteral: \"hashcode of the primitive array rather than examining its contents. Note that calling \"", "DEL StringLiteral: \"  * Call the JDK method java.util.Objects#hash() or the Guava method \"", "DEL StringLiteral: \"array rather than its contents.\\n\\n\"", "DEL StringLiteral: \"  * Call the JDK method java.util.Objects#hash() or the Guava method \"", "DEL InfixExpression: +", "DEL StringLiteral: \"identity hash code, consider using java.lang.System#identityHashCode() instead for \"", "DEL StringLiteral: \"com.google.common.base.Objects#hashCode() with multiple arguments, at least one of \"", "DEL StringLiteral: \"Please use either java.util.Arrays#hashCode() (for single-dimensional arrays) or \"", "DEL StringLiteral: \"  * Call the instance .hashCode() method on an array.\\n\"", "DEL StringLiteral: \"This check flags attempts to compute a hashcode from an array that do not take the \"", "DEL StringLiteral: \"autoboxed into a single-element Object array, and these methods use the identity \"", "DEL StringLiteral: \"these methods on an argument of _Object_ array type actually does the right thing \"", "DEL MemberValuePair", "DEL StringLiteral: \"Computing a hashcode for an array is tricky.  Typically you \"", "DEL StringLiteral: \"the common ways to do this actually return a hashcode based on the _identity_ of the \"", "DEL StringLiteral: \"  * Call the JDK method java.util.Objects#hashCode() with an argument of array \"", "DEL StringLiteral: \"want a hashcode that depends on the value of each element in the array, but many of \"", "DEL StringLiteral: \"because no boxing is needed.\\n\\n\"", "DEL StringLiteral: \"clarity.\"", "DEL StringLiteral: \"com.google.common.base.Objects#hashCode() with a single argument of _primitive_ array \"", "DEL StringLiteral: \"type.\\n\"", "DEL StringLiteral: \"java.util.Arrays#deepHashCode() (for multidimensional arrays) to compute a hash value \"", "DEL StringLiteral: \"that depends on the contents of the array. If you really intended to compute the \""]}]}}, {"ArrayHashCode_diff": {"operations": ["Delete SimpleName: explanation(60)", "Delete StringLiteral: \"Computing a hashcode for an array is tricky.  Typically you \"(61)", "Delete StringLiteral: \"want a hashcode that depends on the value of each element in the array, but many of \"(62)", "Delete StringLiteral: \"the common ways to do this actually return a hashcode based on the _identity_ of the \"(63)", "Delete StringLiteral: \"array rather than its contents.\\n\\n\"(64)", "Delete StringLiteral: \"This check flags attempts to compute a hashcode from an array that do not take the \"(65)", "Delete StringLiteral: \"contents of the array into account. There are several ways to mess this up:\\n\"(66)", "Delete StringLiteral: \"  * Call the instance .hashCode() method on an array.\\n\"(67)", "Delete StringLiteral: \"  * Call the JDK method java.util.Objects#hashCode() with an argument of array \"(68)", "Delete StringLiteral: \"type.\\n\"(69)", "Delete StringLiteral: \"  * Call the JDK method java.util.Objects#hash() or the Guava method \"(70)", "Delete StringLiteral: \"com.google.common.base.Objects#hashCode() with multiple arguments, at least one of \"(71)", "Delete StringLiteral: \"which is an array.\\n\"(72)", "Delete StringLiteral: \"  * Call the JDK method java.util.Objects#hash() or the Guava method \"(73)", "Delete StringLiteral: \"com.google.common.base.Objects#hashCode() with a single argument of _primitive_ array \"(74)", "Delete StringLiteral: \"type. Because these are varags methods that take Object..., the primitive array is \"(75)", "Delete StringLiteral: \"autoboxed into a single-element Object array, and these methods use the identity \"(76)", "Delete StringLiteral: \"hashcode of the primitive array rather than examining its contents. Note that calling \"(77)", "Delete StringLiteral: \"these methods on an argument of _Object_ array type actually does the right thing \"(78)", "Delete StringLiteral: \"because no boxing is needed.\\n\\n\"(79)", "Delete StringLiteral: \"Please use either java.util.Arrays#hashCode() (for single-dimensional arrays) or \"(80)", "Delete StringLiteral: \"java.util.Arrays#deepHashCode() (for multidimensional arrays) to compute a hash value \"(81)", "Delete StringLiteral: \"that depends on the contents of the array. If you really intended to compute the \"(82)", "Delete StringLiteral: \"identity hash code, consider using java.lang.System#identityHashCode() instead for \"(83)", "Delete StringLiteral: \"clarity.\"(84)", "Delete InfixExpression: +(85)", "Delete MemberValuePair(86)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}