{"application": "apache-commons-compress", "csha": "8c6d38e8b8a165bb0385bfc7a5e6f7a450148095", "files": [{"FramedSnappyCompressorInputStream_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS Block to MethodDeclaration at 6", "INS SimpleName: inUncompressedChunk to IfStatement at 0", "INS ReturnStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: currentCompressedChunk to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS NullLiteral to InfixExpression: != at 1", "INS PrimitiveType: int to MethodDeclaration at 3", "INS SimpleName: available to MethodInvocation at 1", "INS NumberLiteral: 0 to ReturnStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: available to MethodDeclaration at 4", "INS SimpleName: uncompressedBytesRemaining to MethodInvocation at 2", "INS SimpleName: available to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: min to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS TextElement:   to TagElement at 1", "INS TagElement to Javadoc at 0", "INS SimpleName: currentCompressedChunk to InfixExpression: != at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS TagElement: @inheritDoc to TagElement at 0", "INS SimpleName: in to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: read to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS SimpleName: read to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: read to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS IfStatement to Block at 3", "INS NumberLiteral: 4 to InfixExpression: != at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: read to VariableDeclarationFragment at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 2"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS SimpleName: read to InfixExpression: != at 0", "INS SimpleName: size to InfixExpression: != at 1", "INS IfStatement to Block at 3", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: read to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: read to InfixExpression: > at 0", "INS SimpleName: count to MethodInvocation at 0", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: read to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS InfixExpression: > to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from read from the current chunk (which may be -1 if the end od the to read from the current chunk (which may be -1 if the end of the", "operations": ["UPD TextElement: read from the current chunk (which may be -1 if the end od the from read from the current chunk (which may be -1 if the end od the to read from the current chunk (which may be -1 if the end of the"]}, {"root": "UPDATE from chunk is reached. to chunk is reached).", "operations": ["UPD TextElement: chunk is reached. from chunk is reached. to chunk is reached)."]}, {"root": "UPDATE from != to >", "operations": ["UPD InfixExpression: != from != to >", "UPD InfixExpression: != from != to >"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: read to InfixExpression: != at 0", "operations": ["INS SimpleName: read to InfixExpression: != at 0"]}, {"root": "UPDATE from 4 to 0", "operations": ["UPD NumberLiteral: 4 from 4 to 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from size to read", "operations": ["UPD SimpleName: size from size to read", "UPD SimpleName: size from size to read"]}, {"root": "INS NumberLiteral: 0 to InfixExpression: != at 1", "operations": ["INS NumberLiteral: 0 to InfixExpression: != at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: read to InfixExpression: != at 1", "operations": ["INS SimpleName: read to InfixExpression: != at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: count to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getBytesRead to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: currentCompressedChunk to MethodInvocation at 0", "INS SimpleName: count to MethodInvocation at 0"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL NumberLiteral: 4", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: count", "DEL MethodInvocation", "DEL NumberLiteral: 10", "DEL ExpressionStatement"]}]}}, {"FramedSnappyCompressorInputStream_diff": {"operations": ["Insert MethodDeclaration(294) into TypeDeclaration: class(848) at 20", "Insert Javadoc(263) into MethodDeclaration(294) at 0", "Insert MarkerAnnotation(265) into MethodDeclaration(294) at 1", "Insert Modifier: public(266) into MethodDeclaration(294) at 2", "Insert PrimitiveType: int(267) into MethodDeclaration(294) at 3", "Insert SimpleName: available(268) into MethodDeclaration(294) at 4", "Insert SimpleType: IOException(270) into MethodDeclaration(294) at 5", "Insert Block(293) into MethodDeclaration(294) at 6", "Insert TagElement(262) into Javadoc(263) at 0", "Insert SimpleName: Override(264) into MarkerAnnotation(265) at 0", "Insert SimpleName: IOException(269) into SimpleType: IOException(270) at 0", "Insert IfStatement(290) into Block(293) at 0", "Insert ReturnStatement(292) into Block(293) at 1", "Insert VariableDeclarationStatement(561) into Block(581) at 1", "Insert IfStatement(570) into Block(581) at 2", "Insert IfStatement(580) into Block(581) at 3", "Insert VariableDeclarationStatement(659) into Block(679) at 1", "Insert IfStatement(668) into Block(679) at 2", "Insert IfStatement(678) into Block(679) at 3", "Insert VariableDeclarationStatement(705) into Block(731) at 1", "Insert IfStatement(714) into Block(731) at 2", "Insert TagElement: @inheritDoc(260) into TagElement(262) at 0", "Insert TextElement:  (261) into TagElement(262) at 1", "Insert SimpleName: inUncompressedChunk(271) into IfStatement(290) at 0", "Insert Block(280) into IfStatement(290) at 1", "Insert IfStatement(289) into IfStatement(290) at 2", "Insert NumberLiteral: 0(291) into ReturnStatement(292) at 0", "Update TextElement: read from the current chunk (which may be -1 if the end od the(263) to read from the current chunk (which may be -1 if the end of the", "Update TextElement: chunk is reached.(264) to chunk is reached).", "Insert PrimitiveType: int(553) into VariableDeclarationStatement(561) at 0", "Insert VariableDeclarationFragment(560) into VariableDeclarationStatement(561) at 1", "Update InfixExpression: !=(518) to >", "Move InfixExpression: !=(518) into IfStatement(570) at 0", "Insert Block(569) into IfStatement(570) at 1", "Insert InfixExpression: !=(573) into IfStatement(580) at 0", "Move Block(612) into IfStatement(580) at 1", "Insert PrimitiveType: long(651) into VariableDeclarationStatement(659) at 0", "Insert VariableDeclarationFragment(658) into VariableDeclarationStatement(659) at 1", "Update InfixExpression: !=(606) to >", "Move InfixExpression: !=(606) into IfStatement(668) at 0", "Insert Block(667) into IfStatement(668) at 1", "Insert InfixExpression: !=(671) into IfStatement(678) at 0", "Move Block(524) into IfStatement(678) at 1", "Insert PrimitiveType: int(697) into VariableDeclarationStatement(705) at 0", "Insert VariableDeclarationFragment(704) into VariableDeclarationStatement(705) at 1", "Insert InfixExpression: >(708) into IfStatement(714) at 0", "Insert Block(713) into IfStatement(714) at 1", "Insert ReturnStatement(279) into Block(280) at 0", "Insert InfixExpression: !=(283) into IfStatement(289) at 0", "Insert Block(288) into IfStatement(289) at 1", "Insert SimpleName: read(554) into VariableDeclarationFragment(560) at 0", "Move MethodInvocation(516) into VariableDeclarationFragment(560) at 1", "Insert SimpleName: read(562) into InfixExpression: >(564) at 0", "Update NumberLiteral: 4(517) to 0", "Insert ExpressionStatement(568) into Block(569) at 0", "Insert SimpleName: read(571) into InfixExpression: !=(573) at 0", "Insert NumberLiteral: 4(572) into InfixExpression: !=(573) at 1", "Insert SimpleName: read(652) into VariableDeclarationFragment(658) at 0", "Move MethodInvocation(604) into VariableDeclarationFragment(658) at 1", "Update SimpleName: size(605) to read", "Insert NumberLiteral: 0(661) into InfixExpression: >(662) at 1", "Move ExpressionStatement(617) into Block(667) at 0", "Insert SimpleName: read(669) into InfixExpression: !=(671) at 0", "Insert SimpleName: size(670) into InfixExpression: !=(671) at 1", "Insert SimpleName: read(698) into VariableDeclarationFragment(704) at 0", "Move MethodInvocation(641) into VariableDeclarationFragment(704) at 1", "Insert SimpleName: read(706) into InfixExpression: >(708) at 0", "Insert NumberLiteral: 0(707) into InfixExpression: >(708) at 1", "Insert ExpressionStatement(712) into Block(713) at 0", "Insert MethodInvocation(278) into ReturnStatement(279) at 0", "Insert SimpleName: currentCompressedChunk(281) into InfixExpression: !=(283) at 0", "Insert NullLiteral(282) into InfixExpression: !=(283) at 1", "Insert ReturnStatement(287) into Block(288) at 0", "Insert MethodInvocation(567) into ExpressionStatement(568) at 0", "Insert MethodInvocation(711) into ExpressionStatement(712) at 0", "Insert SimpleName: read(716) into InfixExpression: !=(717) at 1", "Insert SimpleName: Math(272) into MethodInvocation(278) at 0", "Insert SimpleName: min(273) into MethodInvocation(278) at 1", "Insert SimpleName: uncompressedBytesRemaining(274) into MethodInvocation(278) at 2", "Insert MethodInvocation(277) into MethodInvocation(278) at 3", "Insert MethodInvocation(286) into ReturnStatement(287) at 0", "Move SimpleName: count(526) into MethodInvocation(567) at 0", "Insert SimpleName: read(566) into MethodInvocation(567) at 1", "Update SimpleName: size(615) to read", "Insert SimpleName: count(709) into MethodInvocation(711) at 0", "Insert SimpleName: read(710) into MethodInvocation(711) at 1", "Insert SimpleName: in(275) into MethodInvocation(277) at 0", "Insert SimpleName: available(276) into MethodInvocation(277) at 1", "Insert SimpleName: currentCompressedChunk(284) into MethodInvocation(286) at 0", "Insert SimpleName: available(285) into MethodInvocation(286) at 1", "Insert ExpressionStatement(518) into Block(519) at 3", "Insert MethodInvocation(517) into ExpressionStatement(518) at 0", "Insert SimpleName: count(513) into MethodInvocation(517) at 0", "Insert MethodInvocation(516) into MethodInvocation(517) at 1", "Insert SimpleName: currentCompressedChunk(514) into MethodInvocation(516) at 0", "Insert SimpleName: getBytesRead(515) into MethodInvocation(516) at 1", "Delete IfStatement(525)", "Delete NumberLiteral: 4(527)", "Delete MethodInvocation(528)", "Delete ExpressionStatement(529)", "Delete IfStatement(613)", "Delete SimpleName: count(656)", "Delete NumberLiteral: 10(657)", "Delete MethodInvocation(658)", "Delete ExpressionStatement(659)"]}}, {"SnappyCompressorInputStream_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: avail to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 1", "INS PrefixExpression: - to InfixExpression: != at 1", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS SimpleName: bytesRead to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "UPDATE from Try to fill the buffer with enoug bytes to satisfy the current read request. to Try to fill the buffer with enough bytes to satisfy the current", "operations": ["UPD TextElement: Try to fill the buffer with enoug bytes to satisfy the current read request. from Try to fill the buffer with enoug bytes to satisfy the current read request. to Try to fill the buffer with enough bytes to satisfy the current"]}, {"root": "INS TextElement: read request. to TagElement at 1", "operations": ["INS TextElement: read request. to TagElement at 1"]}, {"root": "UPDATE from <p>Move all bytes of the buffer after the first block down to <p>Move all bytes of the buffer after the first block down to", "operations": ["UPD TextElement: <p>Move all bytes of the buffer after the first block down from <p>Move all bytes of the buffer after the first block down to <p>Move all bytes of the buffer after the first block down to"]}, {"root": "UPDATE from tothe beginning of the buffer.</p> to the beginning of the buffer.</p>", "operations": ["UPD TextElement: tothe beginning of the buffer.</p> from tothe beginning of the buffer.</p> to the beginning of the buffer.</p>"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: avail to InfixExpression: > at 1", "operations": ["INS SimpleName: avail to InfixExpression: > at 1"]}, {"root": "INS InfixExpression: * to MethodInvocation at 6", "operations": ["INS InfixExpression: * to MethodInvocation at 6", "INS NumberLiteral: 2 to InfixExpression: * at 1", "INS SimpleName: blockSize to InfixExpression: * at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: avail to InfixExpression: - at 1", "operations": ["INS SimpleName: avail to InfixExpression: - at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: available", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: blockSize", "operations": ["DEL SimpleName: blockSize"]}]}}, {"SnappyCompressorInputStream_diff": {"operations": ["Insert VariableDeclarationStatement(316) into Block(361) at 1", "Insert IfStatement(739) into Block(764) at 1", "Insert Modifier: final(310) into VariableDeclarationStatement(316) at 0", "Insert PrimitiveType: int(311) into VariableDeclarationStatement(316) at 1", "Insert VariableDeclarationFragment(315) into VariableDeclarationStatement(316) at 2", "Update TextElement: Try to fill the buffer with enoug bytes to satisfy the current read request.(358) to Try to fill the buffer with enough bytes to satisfy the current", "Insert TextElement: read request.(364) into TagElement(365) at 1", "Update TextElement: <p>Move all bytes of the buffer after the first block down(554) to <p>Move all bytes of the buffer after the first block down to", "Update TextElement: tothe beginning of the buffer.</p>(555) to the beginning of the buffer.</p>", "Insert InfixExpression: !=(733) into IfStatement(739) at 0", "Insert Block(738) into IfStatement(739) at 1", "Insert SimpleName: avail(312) into VariableDeclarationFragment(315) at 0", "Move MethodInvocation(312) into VariableDeclarationFragment(315) at 1", "Insert SimpleName: avail(318) into InfixExpression: >(319) at 1", "Insert InfixExpression: *(575) into MethodInvocation(576) at 6", "Insert SimpleName: bytesRead(730) into InfixExpression: !=(733) at 0", "Insert PrefixExpression: -(732) into InfixExpression: !=(733) at 1", "Move ExpressionStatement(725) into Block(738) at 0", "Insert SimpleName: blockSize(573) into InfixExpression: *(575) at 0", "Insert NumberLiteral: 2(574) into InfixExpression: *(575) at 1", "Insert NumberLiteral: 1(731) into PrefixExpression: -(732) at 0", "Insert SimpleName: avail(322) into InfixExpression: -(323) at 1", "Delete SimpleName: available(316)", "Delete MethodInvocation(317)", "Delete SimpleName: blockSize(567)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}