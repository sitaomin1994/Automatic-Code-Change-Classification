{"application": "apache-commons-csv", "csha": "50e2719bb646870dc08dd71f2bc2314ce46def76", "files": [{"CSVFormat_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: org.apache.commons.csv.Constants.CR to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 7", "MOV FieldDeclaration to TypeDeclaration: class at 8", "MOV FieldDeclaration to TypeDeclaration: class at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS TagElement: @return to Javadoc at 2", "INS SimpleName: delimiter to MethodInvocation at 2", "INS SimpleName: valueOf to MethodInvocation at 1", "INS SimpleName: withDelimiter to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 1", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS SimpleName: withDelimiter to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: CSVFormat to SimpleType: CSVFormat at 0", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: Character to MethodInvocation at 0", "INS TextElement: thrown if the specified character is a line break to TagElement: @throws at 1", "INS TextElement: Returns a copy of this format using the specified delimiter character. to TagElement at 0", "INS TextElement: the delimiter character to TagElement: @param at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: delimiter to TagElement: @param at 0", "INS SimpleType: CSVFormat to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS TagElement: @throws to Javadoc at 3", "INS TextElement:  A copy of this format using the specified delimiter character to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 30", "operations": ["INS SimpleName: encapsulator to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: withEncapsulator to MethodDeclaration at 3", "INS SimpleName: CSVFormat to SimpleType: CSVFormat at 0", "INS TextElement: Returns a copy of this format using the specified encapsulator character. to TagElement at 0", "INS SimpleName: valueOf to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 30", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: encapsulator to MethodInvocation at 2", "INS TagElement: @throws to Javadoc at 3", "INS TextElement: the encapsulator character to TagElement: @param at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: withEncapsulator to MethodInvocation at 0", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS ReturnStatement to Block at 0", "INS TextElement: thrown if the specified character is a line break to TagElement: @throws at 1", "INS SimpleName: Character to MethodInvocation at 0", "INS SimpleType: CSVFormat to MethodDeclaration at 2", "INS TextElement:  A copy of this format using the specified encapsulator character to TagElement: @return at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 34", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 34", "INS TagElement: @return to Javadoc at 2", "INS ReturnStatement to Block at 0", "INS TagElement: @throws to Javadoc at 3", "INS TextElement: Note that the comment introducer character is only recognised at the start of a line. to TagElement at 1", "INS SimpleName: Character to MethodInvocation at 0", "INS SimpleType: CSVFormat to MethodDeclaration at 2", "INS SimpleName: commentStart to MethodInvocation at 2", "INS TextElement: the comment start marker to TagElement: @param at 1", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: withCommentStart to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: CSVFormat to SimpleType: CSVFormat at 0", "INS TextElement:  A copy of this format using the specified character as the comment start marker to TagElement: @return at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: valueOf to MethodInvocation at 1", "INS TextElement: Returns a copy of this format using the specified character as the comment start marker. to TagElement at 0", "INS SimpleName: commentStart to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: withCommentStart to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS TextElement: thrown if the specified character is a line break to TagElement: @throws at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 38", "INS TagElement: @throws to Javadoc at 3", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: IllegalArgumentException to TagElement: @throws at 0", "INS TextElement: Returns a copy of this format using the specified escape character. to TagElement at 0", "INS SimpleName: withEscape to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: escape to TagElement: @param at 0", "INS TagElement: @return to Javadoc at 2", "INS TextElement:  A copy of this format using the specified escape character to TagElement: @return at 0", "INS SimpleName: escape to MethodInvocation at 2", "INS SimpleType: CSVFormat to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS TextElement: the escape character to TagElement: @param at 1", "INS TextElement: thrown if the specified character is a line break to TagElement: @throws at 1", "INS SimpleName: Character to MethodInvocation at 0", "INS TagElement: @param to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: valueOf to MethodInvocation at 1", "INS SimpleName: withEscape to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: CSVFormat to SimpleType: CSVFormat at 0"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleType: Character to FieldDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleType: Character to FieldDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleType: Character to FieldDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleName: delimiter to SingleVariableDeclaration at 2"]}, {"root": "INS SimpleType: Character to MethodDeclaration at 2", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: encapsulator to SingleVariableDeclaration at 2", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "INS SimpleType: Character to MethodDeclaration at 2", "operations": ["INS SimpleType: Character to MethodDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: commentStart to SingleVariableDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleType: Character to MethodDeclaration at 2", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: escape to SingleVariableDeclaration at 2"]}, {"root": "INS SimpleType: Character to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleType: Character to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleType: Character to SingleVariableDeclaration at 1", "operations": ["INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "INS SimpleType: Character to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1"]}, {"root": "INS SimpleType: Character to SingleVariableDeclaration at 1", "operations": ["INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 1", "operations": ["INS NullLiteral to ClassInstanceCreation at 1"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 2", "operations": ["INS NullLiteral to ClassInstanceCreation at 2"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 3", "operations": ["INS NullLiteral to ClassInstanceCreation at 3"]}, {"root": "INS NullLiteral to ClassInstanceCreation at 4", "operations": ["INS NullLiteral to ClassInstanceCreation at 4"]}, {"root": "INS InfixExpression: && to ReturnStatement at 0", "operations": ["INS InfixExpression: && to ReturnStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: c to InfixExpression: != at 0", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS InfixExpression: != to ReturnStatement at 0", "operations": ["INS InfixExpression: != to ReturnStatement at 0", "INS SimpleName: encapsulator to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS InfixExpression: != to ReturnStatement at 0", "operations": ["INS SimpleName: commentStart to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to ReturnStatement at 0"]}, {"root": "INS InfixExpression: != to ReturnStatement at 0", "operations": ["INS InfixExpression: != to ReturnStatement at 0", "INS SimpleName: escape to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS NullLiteral to InfixExpression: != at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS NullLiteral to InfixExpression: != at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0", "MOV InfixExpression: == to InfixExpression: || at 1"]}, {"root": "INS SimpleName: LF to InfixExpression: == at 1", "operations": ["INS SimpleName: LF to InfixExpression: == at 1"]}, {"root": "INS SimpleName: CR to InfixExpression: == at 1", "operations": ["INS SimpleName: CR to InfixExpression: == at 1"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: isEscaping", "DEL VariableDeclarationFragment"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: isCommentingEnabled"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: isEncapsulating", "DEL VariableDeclarationFragment"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL Modifier: private", "DEL PrimitiveType: char", "DEL Modifier: final"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: char", "DEL Modifier: final", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: final", "DEL PrimitiveType: char"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL TagElement", "DEL FieldDeclaration", "DEL TextElement: won't be confused with an EOF signal (-1), and because the Unicode value ", "DEL TextElement:  FFFE", "DEL Modifier: final", "DEL TextElement: Constant char to be used for disabling comments, escapes and encapsulation. The value -2 is used because it", "DEL TagElement: @code", "DEL PrimitiveType: char", "DEL Javadoc", "DEL SimpleName: DISABLED", "DEL VariableDeclarationFragment", "DEL TextElement:  would be encoded as two chars", "DEL TextElement: (using surrogates) and thus there should never be a collision with a real text char.", "DEL Modifier: static", "DEL CharacterLiteral: '\\ufffe'"]}, {"root": "DEL SimpleName: DISABLED", "operations": ["DEL SimpleName: DISABLED"]}, {"root": "DEL SimpleName: DISABLED", "operations": ["DEL SimpleName: DISABLED"]}, {"root": "DEL SimpleName: DISABLED", "operations": ["DEL SimpleName: DISABLED"]}, {"root": "DEL SimpleName: DISABLED", "operations": ["DEL SimpleName: DISABLED"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: encapsulator", "DEL SimpleName: DISABLED", "DEL ExpressionStatement", "DEL ThisExpression", "DEL InfixExpression: !=", "DEL FieldAccess", "DEL SimpleName: isEncapsulating"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL SimpleName: isCommentingEnabled", "DEL SimpleName: DISABLED", "DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleName: commentStart"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ThisExpression", "DEL SimpleName: DISABLED", "DEL FieldAccess", "DEL InfixExpression: !=", "DEL Assignment: =", "DEL SimpleName: isEscaping", "DEL ExpressionStatement", "DEL SimpleName: escape"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL CharacterLiteral: '\\n'", "operations": ["DEL CharacterLiteral: '\\n'"]}, {"root": "DEL CharacterLiteral: '\\r'", "operations": ["DEL CharacterLiteral: '\\r'"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL InfixExpression: ||"]}, {"root": "DEL SimpleName: DISABLED", "operations": ["DEL SimpleName: DISABLED"]}, {"root": "DEL SimpleName: DISABLED", "operations": ["DEL SimpleName: DISABLED"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL SimpleName: isEncapsulating", "operations": ["DEL SimpleName: isEncapsulating"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL SimpleName: isCommentingEnabled", "operations": ["DEL SimpleName: isCommentingEnabled"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL SimpleName: isEscaping", "operations": ["DEL SimpleName: isEscaping"]}]}}, {"CSVFormat_diff": {"operations": ["     *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>(263) to TextElement:  <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">", "     *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>(236)", "Insert ImportDeclaration(5) into CompilationUnit(1286) at 2", "Move FieldDeclaration(95) into TypeDeclaration: class(1285) at 6", "Move FieldDeclaration(101) into TypeDeclaration: class(1285) at 7", "Move FieldDeclaration(107) into TypeDeclaration: class(1285) at 8", "Insert QualifiedName: org.apache.commons.csv.Constants.CR(4) into ImportDeclaration(5) at 0", "Insert MethodDeclaration(528) into TypeDeclaration: class(1285) at 23", "Insert MethodDeclaration(613) into TypeDeclaration: class(1285) at 26", "Insert MethodDeclaration(716) into TypeDeclaration: class(1285) at 30", "Insert MethodDeclaration(817) into TypeDeclaration: class(1285) at 34", "Insert SimpleType: Character(43) into FieldDeclaration(46) at 2", "Insert SimpleType: Character(50) into FieldDeclaration(53) at 2", "Move VariableDeclarationFragment(48) into FieldDeclaration(53) at 3", "Insert SimpleType: Character(57) into FieldDeclaration(60) at 2", "Move VariableDeclarationFragment(54) into FieldDeclaration(60) at 3", "Insert SimpleType: Character(64) into FieldDeclaration(67) at 2", "Move VariableDeclarationFragment(60) into FieldDeclaration(67) at 3", "Insert Javadoc(511) into MethodDeclaration(528) at 0", "Insert Modifier: public(512) into MethodDeclaration(528) at 1", "Insert SimpleType: CSVFormat(514) into MethodDeclaration(528) at 2", "Insert SimpleName: withDelimiter(515) into MethodDeclaration(528) at 3", "Move SingleVariableDeclaration(560) into MethodDeclaration(528) at 4", "Insert Block(527) into MethodDeclaration(528) at 5", "Insert SingleVariableDeclaration(548) into MethodDeclaration(572) at 4", "Insert SimpleType: Character(580) into MethodDeclaration(585) at 2", "Insert Javadoc(596) into MethodDeclaration(613) at 0", "Insert Modifier: public(597) into MethodDeclaration(613) at 1", "Insert SimpleType: CSVFormat(599) into MethodDeclaration(613) at 2", "Insert SimpleName: withEncapsulator(600) into MethodDeclaration(613) at 3", "Move SingleVariableDeclaration(615) into MethodDeclaration(613) at 4", "Insert Block(612) into MethodDeclaration(613) at 5", "Insert SingleVariableDeclaration(633) into MethodDeclaration(657) at 4", "Insert SimpleType: Character(682) into MethodDeclaration(687) at 2", "Insert Javadoc(699) into MethodDeclaration(716) at 0", "Insert Modifier: public(700) into MethodDeclaration(716) at 1", "Insert SimpleType: CSVFormat(702) into MethodDeclaration(716) at 2", "Insert SimpleName: withCommentStart(703) into MethodDeclaration(716) at 3", "Move SingleVariableDeclaration(686) into MethodDeclaration(716) at 4", "Insert Block(715) into MethodDeclaration(716) at 5", "Insert SingleVariableDeclaration(737) into MethodDeclaration(761) at 4", "Insert SimpleType: Character(784) into MethodDeclaration(789) at 2", "Insert Javadoc(800) into MethodDeclaration(817) at 0", "Insert Modifier: public(801) into MethodDeclaration(817) at 1", "Insert SimpleType: CSVFormat(803) into MethodDeclaration(817) at 2", "Insert SimpleName: withEscape(804) into MethodDeclaration(817) at 3", "Move SingleVariableDeclaration(754) into MethodDeclaration(817) at 4", "Insert Block(816) into MethodDeclaration(817) at 5", "Insert SingleVariableDeclaration(837) into MethodDeclaration(861) at 4", "Insert SimpleName: Character(42) into SimpleType: Character(43) at 0", "Insert SimpleName: Character(49) into SimpleType: Character(50) at 0", "Insert SimpleName: Character(56) into SimpleType: Character(57) at 0", "Insert SimpleName: Character(63) into SimpleType: Character(64) at 0", "Insert SimpleType: Character(287) into SingleVariableDeclaration(289) at 1", "Insert SimpleType: Character(292) into SingleVariableDeclaration(294) at 1", "Insert SimpleType: Character(297) into SingleVariableDeclaration(299) at 1", "Insert SimpleType: Character(302) into SingleVariableDeclaration(304) at 1", "Insert SimpleType: Character(389) into SingleVariableDeclaration(391) at 1", "Insert TagElement(502) into Javadoc(511) at 0", "Insert TagElement: @param(505) into Javadoc(511) at 1", "Insert TagElement: @return(507) into Javadoc(511) at 2", "Insert TagElement: @throws(510) into Javadoc(511) at 3", "Insert SimpleName: CSVFormat(513) into SimpleType: CSVFormat(514) at 0", "Insert ReturnStatement(526) into Block(527) at 0", "Insert Modifier: final(544) into SingleVariableDeclaration(548) at 0", "Insert SimpleType: Character(546) into SingleVariableDeclaration(548) at 1", "Insert SimpleName: delimiter(547) into SingleVariableDeclaration(548) at 2", "Insert SimpleName: Character(579) into SimpleType: Character(580) at 0", "Insert TagElement(587) into Javadoc(596) at 0", "Insert TagElement: @param(590) into Javadoc(596) at 1", "Insert TagElement: @return(592) into Javadoc(596) at 2", "Insert TagElement: @throws(595) into Javadoc(596) at 3", "Insert SimpleName: CSVFormat(598) into SimpleType: CSVFormat(599) at 0", "Insert ReturnStatement(611) into Block(612) at 0", "Insert Modifier: final(629) into SingleVariableDeclaration(633) at 0", "Insert SimpleType: Character(631) into SingleVariableDeclaration(633) at 1", "Insert SimpleName: encapsulator(632) into SingleVariableDeclaration(633) at 2", "Insert SimpleName: Character(681) into SimpleType: Character(682) at 0", "Insert TagElement(690) into Javadoc(699) at 0", "Insert TagElement: @param(693) into Javadoc(699) at 1", "Insert TagElement: @return(695) into Javadoc(699) at 2", "Insert TagElement: @throws(698) into Javadoc(699) at 3", "Insert SimpleName: CSVFormat(701) into SimpleType: CSVFormat(702) at 0", "Insert ReturnStatement(714) into Block(715) at 0", "Insert Modifier: final(733) into SingleVariableDeclaration(737) at 0", "Insert SimpleType: Character(735) into SingleVariableDeclaration(737) at 1", "Insert SimpleName: commentStart(736) into SingleVariableDeclaration(737) at 2", "Insert SimpleName: Character(783) into SimpleType: Character(784) at 0", "Insert TagElement(791) into Javadoc(800) at 0", "Insert TagElement: @param(794) into Javadoc(800) at 1", "Insert TagElement: @return(796) into Javadoc(800) at 2", "Insert TagElement: @throws(799) into Javadoc(800) at 3", "Insert SimpleName: CSVFormat(802) into SimpleType: CSVFormat(803) at 0", "Insert ReturnStatement(815) into Block(816) at 0", "Insert Modifier: final(833) into SingleVariableDeclaration(837) at 0", "Insert SimpleType: Character(835) into SingleVariableDeclaration(837) at 1", "Insert SimpleName: escape(836) into SingleVariableDeclaration(837) at 2", "Insert NullLiteral(106) into ClassInstanceCreation(114) at 1", "Insert NullLiteral(107) into ClassInstanceCreation(114) at 2", "Insert NullLiteral(108) into ClassInstanceCreation(114) at 3", "Insert NullLiteral(109) into ClassInstanceCreation(114) at 4", "Insert SimpleName: Character(286) into SimpleType: Character(287) at 0", "Insert SimpleName: Character(291) into SimpleType: Character(292) at 0", "Insert SimpleName: Character(296) into SimpleType: Character(297) at 0", "Insert SimpleName: Character(301) into SimpleType: Character(302) at 0", "Insert SimpleName: Character(388) into SimpleType: Character(389) at 0", "Insert InfixExpression: &&(403) into ReturnStatement(404) at 0", "Insert TextElement: Returns a copy of this format using the specified delimiter character.(501) into TagElement(502) at 0", "Insert SimpleName: delimiter(503) into TagElement: @param(505) at 0", "Insert TextElement: the delimiter character(504) into TagElement: @param(505) at 1", "Insert TextElement:  A copy of this format using the specified delimiter character(506) into TagElement: @return(507) at 0", "Insert SimpleName: IllegalArgumentException(508) into TagElement: @throws(510) at 0", "Insert TextElement: thrown if the specified character is a line break(509) into TagElement: @throws(510) at 1", "Insert MethodInvocation(525) into ReturnStatement(526) at 0", "Insert SimpleName: Character(545) into SimpleType: Character(546) at 0", "Insert TextElement: Returns a copy of this format using the specified encapsulator character.(586) into TagElement(587) at 0", "Insert SimpleName: encapsulator(588) into TagElement: @param(590) at 0", "Insert TextElement: the encapsulator character(589) into TagElement: @param(590) at 1", "Insert TextElement:  A copy of this format using the specified encapsulator character(591) into TagElement: @return(592) at 0", "Insert SimpleName: IllegalArgumentException(593) into TagElement: @throws(595) at 0", "Insert TextElement: thrown if the specified character is a line break(594) into TagElement: @throws(595) at 1", "Insert MethodInvocation(610) into ReturnStatement(611) at 0", "Insert SimpleName: Character(630) into SimpleType: Character(631) at 0", "Insert InfixExpression: !=(671) into ReturnStatement(672) at 0", "Insert TextElement: Returns a copy of this format using the specified character as the comment start marker.(688) into TagElement(690) at 0", "Insert TextElement: Note that the comment introducer character is only recognised at the start of a line.(689) into TagElement(690) at 1", "Insert SimpleName: commentStart(691) into TagElement: @param(693) at 0", "Insert TextElement: the comment start marker(692) into TagElement: @param(693) at 1", "Insert TextElement:  A copy of this format using the specified character as the comment start marker(694) into TagElement: @return(695) at 0", "Insert SimpleName: IllegalArgumentException(696) into TagElement: @throws(698) at 0", "Insert TextElement: thrown if the specified character is a line break(697) into TagElement: @throws(698) at 1", "Insert MethodInvocation(713) into ReturnStatement(714) at 0", "Insert SimpleName: Character(734) into SimpleType: Character(735) at 0", "Insert InfixExpression: !=(773) into ReturnStatement(774) at 0", "Insert TextElement: Returns a copy of this format using the specified escape character.(790) into TagElement(791) at 0", "Insert SimpleName: escape(792) into TagElement: @param(794) at 0", "Insert TextElement: the escape character(793) into TagElement: @param(794) at 1", "Insert TextElement:  A copy of this format using the specified escape character(795) into TagElement: @return(796) at 0", "Insert SimpleName: IllegalArgumentException(797) into TagElement: @throws(799) at 0", "Insert TextElement: thrown if the specified character is a line break(798) into TagElement: @throws(799) at 1", "Insert MethodInvocation(814) into ReturnStatement(815) at 0", "Insert SimpleName: Character(834) into SimpleType: Character(835) at 0", "Insert InfixExpression: !=(875) into ReturnStatement(876) at 0", "Insert InfixExpression: !=(394) into InfixExpression: &&(403) at 0", "Insert ParenthesizedExpression(402) into InfixExpression: &&(403) at 1", "Insert SimpleName: withDelimiter(520) into MethodInvocation(525) at 0", "Insert MethodInvocation(524) into MethodInvocation(525) at 1", "Insert SimpleName: withEncapsulator(605) into MethodInvocation(610) at 0", "Insert MethodInvocation(609) into MethodInvocation(610) at 1", "Insert SimpleName: encapsulator(669) into InfixExpression: !=(671) at 0", "Insert NullLiteral(670) into InfixExpression: !=(671) at 1", "Insert SimpleName: withCommentStart(708) into MethodInvocation(713) at 0", "Insert MethodInvocation(712) into MethodInvocation(713) at 1", "Insert SimpleName: commentStart(771) into InfixExpression: !=(773) at 0", "Insert NullLiteral(772) into InfixExpression: !=(773) at 1", "Insert SimpleName: withEscape(809) into MethodInvocation(814) at 0", "Insert MethodInvocation(813) into MethodInvocation(814) at 1", "Insert SimpleName: escape(873) into InfixExpression: !=(875) at 0", "Insert NullLiteral(874) into InfixExpression: !=(875) at 1", "Insert SimpleName: c(392) into InfixExpression: !=(394) at 0", "Insert NullLiteral(393) into InfixExpression: !=(394) at 1", "Insert InfixExpression: ||(401) into ParenthesizedExpression(402) at 0", "Insert NullLiteral(454) into InfixExpression: !=(455) at 1", "Insert NullLiteral(471) into InfixExpression: !=(472) at 1", "Insert SimpleName: Character(521) into MethodInvocation(524) at 0", "Insert SimpleName: valueOf(522) into MethodInvocation(524) at 1", "Insert SimpleName: delimiter(523) into MethodInvocation(524) at 2", "Insert SimpleName: Character(606) into MethodInvocation(609) at 0", "Insert SimpleName: valueOf(607) into MethodInvocation(609) at 1", "Insert SimpleName: encapsulator(608) into MethodInvocation(609) at 2", "Insert SimpleName: Character(709) into MethodInvocation(712) at 0", "Insert SimpleName: valueOf(710) into MethodInvocation(712) at 1", "Insert SimpleName: commentStart(711) into MethodInvocation(712) at 2", "Insert SimpleName: Character(810) into MethodInvocation(813) at 0", "Insert SimpleName: valueOf(811) into MethodInvocation(813) at 1", "Insert SimpleName: escape(812) into MethodInvocation(813) at 2", "Move InfixExpression: ==(440) into InfixExpression: ||(401) at 0", "Move InfixExpression: ==(443) into InfixExpression: ||(401) at 1", "Insert SimpleName: LF(396) into InfixExpression: ==(397) at 1", "Insert SimpleName: CR(399) into InfixExpression: ==(400) at 1", "Delete PrimitiveType: char(40)", "Delete PrimitiveType: boolean(92)", "Delete SimpleName: isEscaping(93)", "Delete VariableDeclarationFragment(94)", "Delete PrimitiveType: boolean(98)", "Delete SimpleName: isCommentingEnabled(99)", "Delete VariableDeclarationFragment(100)", "Delete PrimitiveType: boolean(104)", "Delete SimpleName: isEncapsulating(105)", "Delete VariableDeclarationFragment(106)", "Delete Modifier: private(44)", "Delete Modifier: final(45)", "Delete PrimitiveType: char(46)", "Delete FieldDeclaration(49)", "Delete Modifier: private(50)", "Delete Modifier: final(51)", "Delete PrimitiveType: char(52)", "Delete FieldDeclaration(55)", "Delete Modifier: private(56)", "Delete Modifier: final(57)", "Delete PrimitiveType: char(58)", "Delete FieldDeclaration(61)", "Delete TextElement: Constant char to be used for disabling comments, escapes and encapsulation. The value -2 is used because it(108)", "Delete TextElement: won't be confused with an EOF signal (-1), and because the Unicode value (109)", "Delete TextElement:  FFFE(110)", "Delete TagElement: @code(111)", "Delete TextElement:  would be encoded as two chars(112)", "Delete TextElement: (using surrogates) and thus there should never be a collision with a real text char.(113)", "Delete TagElement(114)", "Delete Javadoc(115)", "Delete Modifier: static(116)", "Delete Modifier: final(117)", "Delete PrimitiveType: char(118)", "Delete SimpleName: DISABLED(119)", "Delete CharacterLiteral: '\\ufffe'(120)", "Delete VariableDeclarationFragment(121)", "Delete FieldDeclaration(122)", "Delete SimpleName: DISABLED(133)", "Delete SimpleName: DISABLED(134)", "Delete SimpleName: DISABLED(135)", "Delete SimpleName: DISABLED(136)", "Delete PrimitiveType: char(313)", "Delete PrimitiveType: char(317)", "Delete PrimitiveType: char(321)", "Delete PrimitiveType: char(325)", "Delete ThisExpression(396)", "Delete SimpleName: isEncapsulating(397)", "Delete FieldAccess(398)", "Delete SimpleName: encapsulator(399)", "Delete SimpleName: DISABLED(400)", "Delete InfixExpression: !=(401)", "Delete Assignment: =(402)", "Delete ExpressionStatement(403)", "Delete ThisExpression(404)", "Delete SimpleName: isCommentingEnabled(405)", "Delete FieldAccess(406)", "Delete SimpleName: commentStart(407)", "Delete SimpleName: DISABLED(408)", "Delete InfixExpression: !=(409)", "Delete Assignment: =(410)", "Delete ExpressionStatement(411)", "Delete ThisExpression(412)", "Delete SimpleName: isEscaping(413)", "Delete FieldAccess(414)", "Delete SimpleName: escape(415)", "Delete SimpleName: DISABLED(416)", "Delete InfixExpression: !=(417)", "Delete Assignment: =(418)", "Delete ExpressionStatement(419)", "Delete PrimitiveType: char(435)", "Delete CharacterLiteral: '\\n'(439)", "Delete CharacterLiteral: '\\r'(442)", "Delete InfixExpression: ||(444)", "Delete SimpleName: DISABLED(495)", "Delete SimpleName: DISABLED(512)", "Delete PrimitiveType: char(591)", "Delete SimpleName: isEncapsulating(651)", "Delete PrimitiveType: char(661)", "Delete SimpleName: isCommentingEnabled(720)", "Delete PrimitiveType: char(730)", "Delete SimpleName: isEscaping(790)"]}}, {"Lexer_cluster": {"actions": [{"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleType: Character to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS SimpleType: Character to FieldDeclaration at 2", "operations": ["INS SimpleType: Character to FieldDeclaration at 2", "INS SimpleName: Character to SimpleType: Character at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS InfixExpression: != to InfixExpression: && at 0", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS InfixExpression: != to InfixExpression: && at 0", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS InfixExpression: != to InfixExpression: && at 0", "operations": ["INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "UPDATE from isEscaping to escape", "operations": ["UPD SimpleName: isEscaping from isEscaping to escape"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV SimpleName: isEscaping to InfixExpression: != at 0"]}, {"root": "UPDATE from isEncapsulating to encapsulator", "operations": ["UPD SimpleName: isEncapsulating from isEncapsulating to encapsulator"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV SimpleName: isEncapsulating to InfixExpression: != at 0"]}, {"root": "UPDATE from isCommentEnabled to commmentStart", "operations": ["UPD SimpleName: isCommentEnabled from isCommentEnabled to commmentStart"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV SimpleName: isCommentEnabled to InfixExpression: != at 0"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: isEncapsulating"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: isEscaping"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: isCommentEnabled", "DEL VariableDeclarationFragment"]}, {"root": "DEL PrimitiveType: char", "operations": ["DEL PrimitiveType: char"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL PrimitiveType: char", "DEL Modifier: private", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: final", "DEL Modifier: private", "DEL PrimitiveType: char", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: char", "DEL Modifier: private", "DEL FieldDeclaration", "DEL Modifier: final"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: format", "DEL FieldAccess", "DEL SimpleName: isEncapsulating", "DEL SimpleName: isEncapsulating", "DEL ThisExpression", "DEL ExpressionStatement", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: format", "DEL SimpleName: isEscaping", "DEL SimpleName: isEscaping", "DEL FieldAccess", "DEL ThisExpression", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: isCommentingEnabled", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: format", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: isCommentEnabled", "DEL ThisExpression"]}]}}, {"Lexer_diff": {"operations": ["Insert SimpleType: Character(26) into FieldDeclaration(29) at 2", "Move VariableDeclarationFragment(45) into FieldDeclaration(29) at 3", "Insert SimpleType: Character(33) into FieldDeclaration(36) at 2", "Move VariableDeclarationFragment(51) into FieldDeclaration(36) at 3", "Insert SimpleType: Character(40) into FieldDeclaration(43) at 2", "Move VariableDeclarationFragment(57) into FieldDeclaration(43) at 3", "Insert SimpleType: Character(47) into FieldDeclaration(50) at 2", "Move VariableDeclarationFragment(63) into FieldDeclaration(50) at 3", "Insert SimpleName: Character(25) into SimpleType: Character(26) at 0", "Insert SimpleName: Character(32) into SimpleType: Character(33) at 0", "Insert SimpleName: Character(39) into SimpleType: Character(40) at 0", "Insert SimpleName: Character(46) into SimpleType: Character(47) at 0", "Insert InfixExpression: !=(388) into InfixExpression: &&(392) at 0", "Insert InfixExpression: !=(404) into InfixExpression: &&(408) at 0", "Insert InfixExpression: !=(420) into InfixExpression: &&(424) at 0", "Update SimpleName: isEscaping(424) to escape", "Move SimpleName: isEscaping(424) into InfixExpression: !=(388) at 0", "Insert NullLiteral(387) into InfixExpression: !=(388) at 1", "Update SimpleName: isEncapsulating(438) to encapsulator", "Move SimpleName: isEncapsulating(438) into InfixExpression: !=(404) at 0", "Insert NullLiteral(403) into InfixExpression: !=(404) at 1", "Update SimpleName: isCommentEnabled(452) to commmentStart", "Move SimpleName: isCommentEnabled(452) into InfixExpression: !=(420) at 0", "Insert NullLiteral(419) into InfixExpression: !=(420) at 1", "Delete PrimitiveType: boolean(25)", "Delete SimpleName: isEncapsulating(26)", "Delete VariableDeclarationFragment(27)", "Delete PrimitiveType: boolean(31)", "Delete SimpleName: isEscaping(32)", "Delete VariableDeclarationFragment(33)", "Delete PrimitiveType: boolean(37)", "Delete SimpleName: isCommentEnabled(38)", "Delete VariableDeclarationFragment(39)", "Delete PrimitiveType: char(43)", "Delete Modifier: private(47)", "Delete Modifier: final(48)", "Delete PrimitiveType: char(49)", "Delete FieldDeclaration(52)", "Delete Modifier: private(53)", "Delete Modifier: final(54)", "Delete PrimitiveType: char(55)", "Delete FieldDeclaration(58)", "Delete Modifier: private(59)", "Delete Modifier: final(60)", "Delete PrimitiveType: char(61)", "Delete FieldDeclaration(64)", "Delete ThisExpression(113)", "Delete SimpleName: isEncapsulating(114)", "Delete FieldAccess(115)", "Delete SimpleName: format(116)", "Delete SimpleName: isEncapsulating(117)", "Delete MethodInvocation(118)", "Delete Assignment: =(119)", "Delete ExpressionStatement(120)", "Delete ThisExpression(121)", "Delete SimpleName: isEscaping(122)", "Delete FieldAccess(123)", "Delete SimpleName: format(124)", "Delete SimpleName: isEscaping(125)", "Delete MethodInvocation(126)", "Delete Assignment: =(127)", "Delete ExpressionStatement(128)", "Delete ThisExpression(129)", "Delete SimpleName: isCommentEnabled(130)", "Delete FieldAccess(131)", "Delete SimpleName: format(132)", "Delete SimpleName: isCommentingEnabled(133)", "Delete MethodInvocation(134)", "Delete Assignment: =(135)", "Delete ExpressionStatement(136)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}