{"application": "apache-helix", "csha": "ecec159ca71caba9dbc9409c31b0cb26ec9867e6", "files": [{"ClusterStateVerifier_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 4", "operations": ["INS StringLiteral: \"/\" to InfixExpression: + at 0", "INS SimpleName: clusterName to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"/CONFIGS/CLUSTER/verify\" to InfixExpression: + at 2", "INS SimpleName: zkClient to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: createEphemeral to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 14", "operations": ["INS SimpleName: delete to MethodInvocation at 1", "INS ExpressionStatement to Block at 14", "INS StringLiteral: \"/CONFIGS/CLUSTER/verify\" to InfixExpression: + at 2", "INS SimpleName: zkClient to MethodInvocation at 0", "INS SimpleName: clusterName to InfixExpression: + at 1", "INS StringLiteral: \"/\" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}]}}, {"ClusterStateVerifier_diff": {"operations": ["Insert ExpressionStatement(2059) into Block(2232) at 4", "Insert ExpressionStatement(2216) into Block(2232) at 14", "Insert MethodInvocation(2058) into ExpressionStatement(2059) at 0", "Insert MethodInvocation(2215) into ExpressionStatement(2216) at 0", "Insert SimpleName: zkClient(2052) into MethodInvocation(2058) at 0", "Insert SimpleName: createEphemeral(2053) into MethodInvocation(2058) at 1", "Insert InfixExpression: +(2057) into MethodInvocation(2058) at 2", "Insert SimpleName: zkClient(2209) into MethodInvocation(2215) at 0", "Insert SimpleName: delete(2210) into MethodInvocation(2215) at 1", "Insert InfixExpression: +(2214) into MethodInvocation(2215) at 2", "Insert StringLiteral: \"/\"(2054) into InfixExpression: +(2057) at 0", "Insert SimpleName: clusterName(2055) into InfixExpression: +(2057) at 1", "Insert StringLiteral: \"/CONFIGS/CLUSTER/verify\"(2056) into InfixExpression: +(2057) at 2", "Insert StringLiteral: \"/\"(2211) into InfixExpression: +(2214) at 0", "Insert SimpleName: clusterName(2212) into InfixExpression: +(2214) at 1", "Insert StringLiteral: \"/CONFIGS/CLUSTER/verify\"(2213) into InfixExpression: +(2214) at 2"]}}, {"ZKLogFormatter_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.io.BufferedWriter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS QualifiedName: java.io.FileWriter to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 9"]}, {"root": "UPDATE from java.util.Date to java.io.File", "operations": ["UPD QualifiedName: java.util.Date from java.util.Date to java.io.File"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS SimpleName: bw to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS Modifier: static to FieldDeclaration at 0", "INS SimpleName: BufferedWriter to SimpleType: BufferedWriter at 0", "INS SimpleType: BufferedWriter to FieldDeclaration at 1"]}, {"root": "INS SimpleType: Exception to MethodDeclaration at 7", "operations": ["INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: Exception to MethodDeclaration at 7"]}, {"root": "INS SimpleType: Exception to MethodDeclaration at 8", "operations": ["INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: Exception to MethodDeclaration at 8"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: File to SimpleType: File at 0", "INS NumberLiteral: 3 to InfixExpression: == at 1", "INS NumberLiteral: 2 to ArrayAccess at 1", "INS QualifiedName: args.length to InfixExpression: == at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: BufferedWriter to SimpleType: BufferedWriter at 0", "INS IfStatement to Block at 1", "INS ArrayAccess to ClassInstanceCreation at 1", "INS SimpleType: BufferedWriter to ClassInstanceCreation at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: FileWriter to ClassInstanceCreation at 0", "INS SimpleName: bw to Assignment: = at 0", "INS SimpleType: File to ClassInstanceCreation at 0", "INS SimpleName: FileWriter to SimpleType: FileWriter at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS SimpleName: args to ArrayAccess at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: close to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: bw to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 3", "INS SimpleName: bw to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 8", "operations": ["INS IfStatement to Block at 8", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: bw to MethodInvocation at 0", "INS SimpleName: sessions to MethodInvocation at 0", "INS SimpleName: bw to InfixExpression: != at 0", "INS Block to IfStatement at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: bw to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: newLine to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 16", "operations": ["INS IfStatement to Block at 16", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: newLine to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: bw to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS SimpleName: sb to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: bw to MethodInvocation at 0", "INS SimpleName: bw to MethodInvocation at 0", "INS SimpleName: write to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS SimpleName: fhdr to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bw to MethodInvocation at 0", "INS IfStatement to Block at 5", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getVersion to MethodInvocation at 1", "INS SimpleName: newLine to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 3", "INS SimpleName: getDbid to MethodInvocation at 1", "INS SimpleName: bw to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: write to MethodInvocation at 1", "INS StringLiteral: \"ZooKeeper Transactional Log File with dbid \" to InfixExpression: + at 0", "INS Block to IfStatement at 1", "INS SimpleName: fhdr to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" txnlog format version \" to InfixExpression: + at 2", "INS SimpleName: bw to InfixExpression: != at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS NumberLiteral: 3 to InfixExpression: != at 1", "INS QualifiedName: args.length to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS ReturnStatement to Block at 1", "INS IfStatement to Block at 3", "INS Block to IfStatement at 1"]}, {"root": "INS IfStatement to Block at 11", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 11", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: bw to MethodInvocation at 0", "INS SimpleName: bw to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS SimpleName: formatTransaction to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: hdr to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: newLine to MethodInvocation at 1", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: bw to InfixExpression: != at 0", "INS SimpleName: txn to MethodInvocation at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 2"]}, {"root": "INS Block to CatchClause at 1", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS SimpleName: bw to MethodInvocation at 0", "INS SimpleName: bw to InfixExpression: != at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: write to MethodInvocation at 1", "INS StringLiteral: \"EOF reached after \" to InfixExpression: + at 0", "INS Block to IfStatement at 1", "INS Block to CatchClause at 1", "INS StringLiteral: \" txns.\" to InfixExpression: + at 2", "INS InfixExpression: + to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: bw to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS BreakStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS SimpleName: newLine to MethodInvocation at 1", "INS SimpleName: count to InfixExpression: + at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "INS InfixExpression: != to IfStatement at 0", "operations": ["INS SimpleName: bw to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: bw to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \" txns.\" to InfixExpression: + at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: bw to MethodInvocation at 0", "INS SimpleName: newLine to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: count to InfixExpression: + at 1", "INS StringLiteral: \"EOF reached after \" to InfixExpression: + at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}]}}, {"ZKLogFormatter_diff": {"operations": ["Move ImportDeclaration(31) into CompilationUnit(1506) at 5", "Insert ImportDeclaration(19) into CompilationUnit(1506) at 3", "Insert ImportDeclaration(31) into CompilationUnit(1506) at 9", "Insert QualifiedName: java.io.BufferedWriter(18) into ImportDeclaration(19) at 0", "Update QualifiedName: java.util.Date(30) to java.io.File", "Insert QualifiedName: java.io.FileWriter(30) into ImportDeclaration(31) at 0", "Insert FieldDeclaration(138) into TypeDeclaration: class(1505) at 7", "Insert Modifier: static(132) into FieldDeclaration(138) at 0", "Insert SimpleType: BufferedWriter(134) into FieldDeclaration(138) at 1", "Insert VariableDeclarationFragment(137) into FieldDeclaration(138) at 2", "Insert SimpleType: Exception(371) into MethodDeclaration(531) at 7", "Insert SimpleType: Exception(588) into MethodDeclaration(862) at 8", "Insert SimpleName: BufferedWriter(133) into SimpleType: BufferedWriter(134) at 0", "Insert SimpleName: bw(135) into VariableDeclarationFragment(137) at 0", "Insert NullLiteral(136) into VariableDeclarationFragment(137) at 1", "Insert IfStatement(192) into Block(230) at 1", "Insert IfStatement(229) into Block(230) at 3", "Insert IfStatement(346) into Block(353) at 8", "Insert SimpleName: Exception(370) into SimpleType: Exception(371) at 0", "Insert SimpleName: Exception(587) into SimpleType: Exception(588) at 0", "Insert IfStatement(860) into Block(861) at 16", "Insert IfStatement(963) into Block(1173) at 5", "Insert InfixExpression: &&(160) into IfStatement(172) at 0", "Insert InfixExpression: ==(175) into IfStatement(192) at 0", "Insert Block(191) into IfStatement(192) at 1", "Insert InfixExpression: !=(223) into IfStatement(229) at 0", "Insert Block(228) into IfStatement(229) at 1", "Insert InfixExpression: !=(327) into IfStatement(346) at 0", "Insert Block(339) into IfStatement(346) at 1", "Insert Block(345) into IfStatement(346) at 2", "Insert InfixExpression: !=(841) into IfStatement(860) at 0", "Insert Block(853) into IfStatement(860) at 1", "Insert Block(859) into IfStatement(860) at 2", "Insert InfixExpression: !=(930) into IfStatement(963) at 0", "Insert Block(948) into IfStatement(963) at 1", "Insert Block(962) into IfStatement(963) at 2", "Move InfixExpression: !=(145) into InfixExpression: &&(160) at 0", "Insert InfixExpression: !=(159) into InfixExpression: &&(160) at 1", "Insert QualifiedName: args.length(173) into InfixExpression: ==(175) at 0", "Insert NumberLiteral: 3(174) into InfixExpression: ==(175) at 1", "Insert ExpressionStatement(190) into Block(191) at 0", "Insert SimpleName: bw(221) into InfixExpression: !=(223) at 0", "Insert NullLiteral(222) into InfixExpression: !=(223) at 1", "Insert ExpressionStatement(227) into Block(228) at 0", "Insert SimpleName: bw(325) into InfixExpression: !=(327) at 0", "Insert NullLiteral(326) into InfixExpression: !=(327) at 1", "Insert ExpressionStatement(334) into Block(339) at 0", "Insert ExpressionStatement(338) into Block(339) at 1", "Move ExpressionStatement(285) into Block(345) at 0", "Insert SimpleName: bw(839) into InfixExpression: !=(841) at 0", "Insert NullLiteral(840) into InfixExpression: !=(841) at 1", "Insert ExpressionStatement(848) into Block(853) at 0", "Insert ExpressionStatement(852) into Block(853) at 1", "Move ExpressionStatement(778) into Block(859) at 0", "Insert SimpleName: bw(928) into InfixExpression: !=(930) at 0", "Insert NullLiteral(929) into InfixExpression: !=(930) at 1", "Insert ExpressionStatement(943) into Block(948) at 0", "Insert ExpressionStatement(947) into Block(948) at 1", "Move ExpressionStatement(858) into Block(962) at 0", "Insert IfStatement(1060) into Block(1171) at 3", "Insert IfStatement(1149) into Block(1171) at 10", "Insert QualifiedName: args.length(157) into InfixExpression: !=(159) at 0", "Insert NumberLiteral: 3(158) into InfixExpression: !=(159) at 1", "Insert Assignment: =(189) into ExpressionStatement(190) at 0", "Insert MethodInvocation(226) into ExpressionStatement(227) at 0", "Insert MethodInvocation(333) into ExpressionStatement(334) at 0", "Insert MethodInvocation(337) into ExpressionStatement(338) at 0", "Insert MethodInvocation(847) into ExpressionStatement(848) at 0", "Insert MethodInvocation(851) into ExpressionStatement(852) at 0", "Insert MethodInvocation(942) into ExpressionStatement(943) at 0", "Insert MethodInvocation(946) into ExpressionStatement(947) at 0", "Move InfixExpression: ==(908) into IfStatement(1060) at 0", "Insert Block(1059) into IfStatement(1060) at 1", "Insert InfixExpression: !=(1126) into IfStatement(1149) at 0", "Insert Block(1139) into IfStatement(1149) at 1", "Insert Block(1148) into IfStatement(1149) at 2", "Insert SimpleName: bw(176) into Assignment: =(189) at 0", "Insert ClassInstanceCreation(188) into Assignment: =(189) at 1", "Insert SimpleName: bw(224) into MethodInvocation(226) at 0", "Insert SimpleName: close(225) into MethodInvocation(226) at 1", "Insert SimpleName: bw(328) into MethodInvocation(333) at 0", "Insert SimpleName: write(329) into MethodInvocation(333) at 1", "Insert MethodInvocation(332) into MethodInvocation(333) at 2", "Insert SimpleName: bw(335) into MethodInvocation(337) at 0", "Insert SimpleName: newLine(336) into MethodInvocation(337) at 1", "Insert SimpleName: bw(842) into MethodInvocation(847) at 0", "Insert SimpleName: write(843) into MethodInvocation(847) at 1", "Insert MethodInvocation(846) into MethodInvocation(847) at 2", "Insert SimpleName: bw(849) into MethodInvocation(851) at 0", "Insert SimpleName: newLine(850) into MethodInvocation(851) at 1", "Insert SimpleName: bw(931) into MethodInvocation(942) at 0", "Insert SimpleName: write(932) into MethodInvocation(942) at 1", "Insert InfixExpression: +(941) into MethodInvocation(942) at 2", "Insert SimpleName: bw(944) into MethodInvocation(946) at 0", "Insert SimpleName: newLine(945) into MethodInvocation(946) at 1", "Insert Block(1026) into CatchClause(1027) at 1", "Move IfStatement(919) into Block(1059) at 0", "Insert ReturnStatement(1058) into Block(1059) at 1", "Insert SimpleName: bw(1124) into InfixExpression: !=(1126) at 0", "Insert NullLiteral(1125) into InfixExpression: !=(1126) at 1", "Insert ExpressionStatement(1134) into Block(1139) at 0", "Insert ExpressionStatement(1138) into Block(1139) at 1", "Move ExpressionStatement(990) into Block(1148) at 0", "Insert SimpleType: BufferedWriter(178) into ClassInstanceCreation(188) at 0", "Insert ClassInstanceCreation(187) into ClassInstanceCreation(188) at 1", "Insert SimpleName: sessions(330) into MethodInvocation(332) at 0", "Insert SimpleName: toString(331) into MethodInvocation(332) at 1", "Insert SimpleName: sb(844) into MethodInvocation(846) at 0", "Insert SimpleName: toString(845) into MethodInvocation(846) at 1", "Insert StringLiteral: \"ZooKeeper Transactional Log File with dbid \"(933) into InfixExpression: +(941) at 0", "Insert MethodInvocation(936) into InfixExpression: +(941) at 1", "Insert StringLiteral: \" txnlog format version \"(937) into InfixExpression: +(941) at 2", "Insert MethodInvocation(940) into InfixExpression: +(941) at 3", "Insert IfStatement(1024) into Block(1026) at 0", "Insert BreakStatement(1025) into Block(1026) at 1", "Insert InfixExpression: !=(1034) into IfStatement(1057) at 0", "Insert Block(1047) into IfStatement(1057) at 1", "Move Block(903) into IfStatement(1057) at 2", "Insert MethodInvocation(1133) into ExpressionStatement(1134) at 0", "Insert MethodInvocation(1137) into ExpressionStatement(1138) at 0", "Insert SimpleName: BufferedWriter(177) into SimpleType: BufferedWriter(178) at 0", "Insert SimpleType: FileWriter(180) into ClassInstanceCreation(187) at 0", "Insert ClassInstanceCreation(186) into ClassInstanceCreation(187) at 1", "Insert SimpleName: fhdr(934) into MethodInvocation(936) at 0", "Insert SimpleName: getDbid(935) into MethodInvocation(936) at 1", "Insert SimpleName: fhdr(938) into MethodInvocation(940) at 0", "Insert SimpleName: getVersion(939) into MethodInvocation(940) at 1", "Insert InfixExpression: !=(1001) into IfStatement(1024) at 0", "Insert Block(1014) into IfStatement(1024) at 1", "Move Block(918) into IfStatement(1024) at 2", "Insert SimpleName: bw(1032) into InfixExpression: !=(1034) at 0", "Insert NullLiteral(1033) into InfixExpression: !=(1034) at 1", "Insert ExpressionStatement(1042) into Block(1047) at 0", "Insert ExpressionStatement(1046) into Block(1047) at 1", "Insert SimpleName: bw(1127) into MethodInvocation(1133) at 0", "Insert SimpleName: write(1128) into MethodInvocation(1133) at 1", "Insert MethodInvocation(1132) into MethodInvocation(1133) at 2", "Insert SimpleName: bw(1135) into MethodInvocation(1137) at 0", "Insert SimpleName: newLine(1136) into MethodInvocation(1137) at 1", "Insert SimpleName: FileWriter(179) into SimpleType: FileWriter(180) at 0", "Insert SimpleType: File(182) into ClassInstanceCreation(186) at 0", "Insert ArrayAccess(185) into ClassInstanceCreation(186) at 1", "Insert SimpleName: bw(999) into InfixExpression: !=(1001) at 0", "Insert NullLiteral(1000) into InfixExpression: !=(1001) at 1", "Insert ExpressionStatement(1009) into Block(1014) at 0", "Insert ExpressionStatement(1013) into Block(1014) at 1", "Insert MethodInvocation(1041) into ExpressionStatement(1042) at 0", "Insert MethodInvocation(1045) into ExpressionStatement(1046) at 0", "Insert SimpleName: formatTransaction(1129) into MethodInvocation(1132) at 0", "Insert SimpleName: hdr(1130) into MethodInvocation(1132) at 1", "Insert SimpleName: txn(1131) into MethodInvocation(1132) at 2", "Insert SimpleName: File(181) into SimpleType: File(182) at 0", "Insert SimpleName: args(183) into ArrayAccess(185) at 0", "Insert NumberLiteral: 2(184) into ArrayAccess(185) at 1", "Insert MethodInvocation(1008) into ExpressionStatement(1009) at 0", "Insert MethodInvocation(1012) into ExpressionStatement(1013) at 0", "Insert SimpleName: bw(1035) into MethodInvocation(1041) at 0", "Insert SimpleName: write(1036) into MethodInvocation(1041) at 1", "Insert InfixExpression: +(1040) into MethodInvocation(1041) at 2", "Insert SimpleName: bw(1043) into MethodInvocation(1045) at 0", "Insert SimpleName: newLine(1044) into MethodInvocation(1045) at 1", "Insert SimpleName: bw(1002) into MethodInvocation(1008) at 0", "Insert SimpleName: write(1003) into MethodInvocation(1008) at 1", "Insert InfixExpression: +(1007) into MethodInvocation(1008) at 2", "Insert SimpleName: bw(1010) into MethodInvocation(1012) at 0", "Insert SimpleName: newLine(1011) into MethodInvocation(1012) at 1", "Insert StringLiteral: \"EOF reached after \"(1037) into InfixExpression: +(1040) at 0", "Insert SimpleName: count(1038) into InfixExpression: +(1040) at 1", "Insert StringLiteral: \" txns.\"(1039) into InfixExpression: +(1040) at 2", "Insert StringLiteral: \"EOF reached after \"(1004) into InfixExpression: +(1007) at 0", "Insert SimpleName: count(1005) into InfixExpression: +(1007) at 1", "Insert StringLiteral: \" txns.\"(1006) into InfixExpression: +(1007) at 2", "Delete ReturnStatement(917)", "Delete BreakStatement(902)"]}}, {"ZKHelixManager_cluster": {"actions": [{"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: PropertyStore<ZNRecord> to FieldDeclaration at 1"]}, {"root": "INS Modifier: synchronized to MethodDeclaration at 2", "operations": ["INS Modifier: synchronized to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from _propertyStoreRef to _propertyStore", "operations": ["UPD SimpleName: _propertyStoreRef from _propertyStoreRef to _propertyStore"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleName: _propertyStore to ReturnStatement at 0"]}, {"root": "UPDATE from case 1: the cluster manager was a participant carry over current state, add to case 1: the cluster manager was a participant carry over current state, add live", "operations": ["UPD TextElement: case 1: the cluster manager was a participant carry over current state, add from case 1: the cluster manager was a participant carry over current state, add to case 1: the cluster manager was a participant carry over current state, add live"]}, {"root": "UPDATE from live instance, and invoke message listener; case 2: the cluster manager was to instance, and invoke message listener; case 2: the cluster manager was controller and", "operations": ["UPD TextElement: live instance, and invoke message listener; case 2: the cluster manager was from live instance, and invoke message listener; case 2: the cluster manager was to instance, and invoke message listener; case 2: the cluster manager was controller and"]}, {"root": "UPDATE from controller and was a leader before do leader election, and if it becomes to was a leader before do leader election, and if it becomes leader again, invoke ideal", "operations": ["UPD TextElement: controller and was a leader before do leader election, and if it becomes from controller and was a leader before do leader election, and if it becomes to was a leader before do leader election, and if it becomes leader again, invoke ideal"]}, {"root": "UPDATE from leader again, invoke ideal state listener, current state listener, etc. if to state listener, current state listener, etc. if it fails to become leader in the new", "operations": ["UPD TextElement: leader again, invoke ideal state listener, current state listener, etc. if from leader again, invoke ideal state listener, current state listener, etc. if to state listener, current state listener, etc. if it fails to become leader in the new"]}, {"root": "UPDATE from the cluster manager was controller and was NOT a leader before do leader to session, then becomes standby; case 3: the cluster manager was controller and was NOT", "operations": ["UPD TextElement: the cluster manager was controller and was NOT a leader before do leader from the cluster manager was controller and was NOT a leader before do leader to session, then becomes standby; case 3: the cluster manager was controller and was NOT"]}, {"root": "UPDATE from election, and if it becomes leader, instantiate and invoke ideal state to a leader before do leader election, and if it becomes leader, instantiate and invoke", "operations": ["UPD TextElement: election, and if it becomes leader, instantiate and invoke ideal state from election, and if it becomes leader, instantiate and invoke ideal state to a leader before do leader election, and if it becomes leader, instantiate and invoke"]}, {"root": "UPDATE from listener, current state listener, etc. if if fails to become leader in the to ideal state listener, current state listener, etc. if if fails to become leader in", "operations": ["UPD TextElement: listener, current state listener, etc. if if fails to become leader in the from listener, current state listener, etc. if if fails to become leader in the to ideal state listener, current state listener, etc. if if fails to become leader in"]}, {"root": "UPDATE from new session, stay as standby to the new session, stay as standby", "operations": ["UPD TextElement: new session, stay as standby from new session, stay as standby to the new session, stay as standby"]}, {"root": "INS SimpleName: _propertyStore to InfixExpression: == at 0", "operations": ["INS SimpleName: _propertyStore to InfixExpression: == at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: _propertyStore to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL ParameterizedType: AtomicReference<PropertyStore<ZNRecord>>", "operations": ["DEL SimpleType: AtomicReference", "DEL SimpleName: AtomicReference", "DEL ParameterizedType: AtomicReference<PropertyStore<ZNRecord>>"]}, {"root": "DEL TextElement: it fails to become leader in the new session, then becomes standby; case 3:", "operations": ["DEL TextElement: it fails to become leader in the new session, then becomes standby; case 3:"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: get", "DEL SimpleName: _propertyStoreRef", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: PropertyStore", "DEL VariableDeclarationStatement", "DEL SimpleName: _propertyStore", "DEL SimpleName: ZNRecord", "DEL SimpleType: PropertyStore", "DEL SimpleType: ZNRecord", "DEL ParameterizedType: PropertyStore<ZNRecord>", "DEL VariableDeclarationFragment"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: _propertyStoreRef", "DEL SimpleName: set", "DEL MethodInvocation", "DEL SimpleName: _propertyStore"]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL SimpleName: get", "DEL SynchronizedStatement", "DEL SimpleName: _propertyStoreRef", "DEL Block", "DEL SimpleName: _propertyStoreRef", "DEL MethodInvocation"]}]}}, {"ZKHelixManager_diff": {"operations": ["Move ParameterizedType: PropertyStore<ZNRecord>(312) into FieldDeclaration(312) at 1", "Insert Modifier: synchronized(2443) into MethodDeclaration(2495) at 2", "Move Block(2509) into MethodDeclaration(2495) at 5", "Update SimpleName: _propertyStoreRef(314) to _propertyStore", "Move ExpressionStatement(2456) into Block(2494) at 0", "Insert ReturnStatement(2493) into Block(2494) at 2", "Update TextElement: case 1: the cluster manager was a participant carry over current state, add(1755) to case 1: the cluster manager was a participant carry over current state, add live", "Update TextElement: live instance, and invoke message listener; case 2: the cluster manager was(1756) to instance, and invoke message listener; case 2: the cluster manager was controller and", "Update TextElement: controller and was a leader before do leader election, and if it becomes(1757) to was a leader before do leader election, and if it becomes leader again, invoke ideal", "Update TextElement: leader again, invoke ideal state listener, current state listener, etc. if(1758) to state listener, current state listener, etc. if it fails to become leader in the new", "Update TextElement: the cluster manager was controller and was NOT a leader before do leader(1760) to session, then becomes standby; case 3: the cluster manager was controller and was NOT", "Update TextElement: election, and if it becomes leader, instantiate and invoke ideal state(1761) to a leader before do leader election, and if it becomes leader, instantiate and invoke", "Update TextElement: listener, current state listener, etc. if if fails to become leader in the(1762) to ideal state listener, current state listener, etc. if if fails to become leader in", "Update TextElement: new session, stay as standby(1763) to the new session, stay as standby", "Insert SimpleName: _propertyStore(2492) into ReturnStatement(2493) at 0", "Insert SimpleName: _propertyStore(2453) into InfixExpression: ==(2455) at 0", "Insert Assignment: =(2488) into ExpressionStatement(2489) at 0", "Insert SimpleName: _propertyStore(2476) into Assignment: =(2488) at 0", "Move ClassInstanceCreation(2499) into Assignment: =(2488) at 1", "Delete Modifier: final(305)", "Delete SimpleName: AtomicReference(306)", "Delete SimpleType: AtomicReference(307)", "Delete ParameterizedType: AtomicReference<PropertyStore<ZNRecord>>(313)", "Delete TextElement: it fails to become leader in the new session, then becomes standby; case 3:(1759)", "Delete SimpleName: _propertyStoreRef(2458)", "Delete SimpleName: get(2459)", "Delete MethodInvocation(2460)", "Delete SimpleName: PropertyStore(2483)", "Delete SimpleType: PropertyStore(2484)", "Delete SimpleName: ZNRecord(2485)", "Delete SimpleType: ZNRecord(2486)", "Delete ParameterizedType: PropertyStore<ZNRecord>(2487)", "Delete SimpleName: _propertyStore(2488)", "Delete VariableDeclarationFragment(2500)", "Delete VariableDeclarationStatement(2501)", "Delete SimpleName: _propertyStoreRef(2502)", "Delete SimpleName: set(2503)", "Delete SimpleName: _propertyStore(2504)", "Delete MethodInvocation(2505)", "Delete SimpleName: _propertyStoreRef(2457)", "Delete SynchronizedStatement(2510)", "Delete SimpleName: _propertyStoreRef(2511)", "Delete SimpleName: get(2512)", "Delete MethodInvocation(2513)", "Delete ReturnStatement(2514)", "Delete Block(2515)"]}}], "commit_stats": [{"total_files": 12, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "True"}]}