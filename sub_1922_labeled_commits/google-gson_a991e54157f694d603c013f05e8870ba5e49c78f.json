{"application": "google-gson", "csha": "a991e54157f694d603c013f05e8870ba5e49c78f", "files": [{"JsonWriter_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 4", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: static to FieldDeclaration at 1", "INS Dimension to ArrayType: String[] at 1", "INS SimpleType: String to ArrayType: String[] at 0", "INS ArrayType: String[] to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: REPLACEMENT_CHARS to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleType: String to ArrayType: String[] at 0", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Dimension to ArrayType: String[] at 1", "INS ArrayType: String[] to FieldDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS Initializer to TypeDeclaration: class at 6", "operations": ["INS ArrayAccess to Assignment: = at 0", "INS CharacterLiteral: '\\t' to ArrayAccess at 1", "INS ArrayType: String[] to ArrayCreation at 0", "INS Modifier: static to Initializer at 0", "INS CharacterLiteral: '>' to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS ArrayAccess to Assignment: = at 0", "INS CharacterLiteral: '\\b' to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to Assignment: = at 0", "INS StringLiteral: \"\\\\u003d\" to Assignment: = at 1", "INS CharacterLiteral: '\\n' to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 0", "INS StringLiteral: \"\\\\r\" to Assignment: = at 1", "INS StringLiteral: \"\\\\\\\"\" to Assignment: = at 1", "INS CharacterLiteral: '\\r' to ArrayAccess at 1", "INS Block to Initializer at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: i to CastExpression at 1", "INS StringLiteral: \"\\\\u003e\" to Assignment: = at 1", "INS SimpleName: REPLACEMENT_CHARS to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Initializer to TypeDeclaration: class at 6", "INS ArrayAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"\\\\u0026\" to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS ArrayAccess to Assignment: = at 0", "INS Dimension to ArrayType: String[] at 1", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to ArrayAccess at 0", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS InfixExpression: <= to ForStatement at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to ArrayAccess at 0", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS StringLiteral: \"\\\\b\" to Assignment: = at 1", "INS SimpleName: i to InfixExpression: <= at 0", "INS CharacterLiteral: '\\\\' to ArrayAccess at 1", "INS ArrayCreation to Assignment: = at 1", "INS ArrayAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 9", "INS MethodInvocation to Assignment: = at 1", "INS CharacterLiteral: '=' to ArrayAccess at 1", "INS Block to ForStatement at 3", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to CastExpression at 0", "INS StringLiteral: \"\\\\u%04x\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 12", "INS CharacterLiteral: '\"' to ArrayAccess at 1", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS StringLiteral: \"\\\\t\" to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 3", "INS ExpressionStatement to Block at 13", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"\\\\\\\\\" to Assignment: = at 1", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 5", "INS CharacterLiteral: '&' to ArrayAccess at 1", "INS ExpressionStatement to Block at 10", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 6", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0x1f to InfixExpression: <= at 1", "INS StringLiteral: \"\\\\u0027\" to Assignment: = at 1", "INS ExpressionStatement to Block at 11", "INS CharacterLiteral: '<' to ArrayAccess at 1", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to ArrayAccess at 0", "INS CharacterLiteral: '\\'' to ArrayAccess at 1", "INS ExpressionStatement to Block at 8", "INS StringLiteral: \"\\\\f\" to Assignment: = at 1", "INS StringLiteral: \"\\\\u003c\" to Assignment: = at 1", "INS CharacterLiteral: '\\f' to ArrayAccess at 1", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to ArrayAccess at 0", "INS ExpressionStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 128 to ArrayCreation at 1", "INS StringLiteral: \"\\\\n\" to Assignment: = at 1", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to ArrayAccess at 0", "INS SimpleName: String to SimpleType: String at 0", "INS CastExpression to MethodInvocation at 3", "INS ExpressionStatement to Block at 7", "INS ForStatement to Block at 1", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: REPLACEMENT_CHARS to ArrayAccess at 0", "INS ExpressionStatement to Block at 14", "INS ArrayAccess to Assignment: = at 0", "INS SimpleType: String to ArrayType: String[] at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS IfStatement to Block at 5", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleName: REPLACEMENT_CHARS to ConditionalExpression at 2", "INS Modifier: private to MethodDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS Dimension to ArrayType: String[] at 1", "INS ForStatement to Block at 4", "INS IfStatement to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS CharacterLiteral: '\\u2028' to InfixExpression: == at 1", "INS CharacterLiteral: '\\u2029' to InfixExpression: == at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: last to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 5", "INS ArrayType: String[] to VariableDeclarationStatement at 0", "INS IfStatement to Block at 3", "INS Block to IfStatement at 1", "INS SimpleName: replacement to VariableDeclarationFragment at 0", "INS ContinueStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: length to InfixExpression: < at 1", "INS SimpleName: HTML_SAFE_REPLACEMENT_CHARS to ConditionalExpression at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: htmlSafe to ConditionalExpression at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 2", "INS VariableDeclarationStatement to Block at 1", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: i to InfixExpression: < at 1", "INS SimpleName: last to InfixExpression: < at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 4", "INS Block to IfStatement at 2", "INS ExpressionStatement to Block at 5", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: last to InfixExpression: < at 0", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: + to Assignment: = at 1", "INS SimpleName: c to InfixExpression: == at 0", "INS SimpleType: String to ArrayType: String[] at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: replacement to Assignment: = at 0", "INS Block to ForStatement at 3", "INS SimpleName: string to MethodDeclaration at 2", "INS SimpleName: c to InfixExpression: == at 0", "INS InfixExpression: < to IfStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: c to InfixExpression: < at 0", "INS NumberLiteral: 128 to InfixExpression: < at 1", "INS StringLiteral: \"\\\\u2028\" to Assignment: = at 1", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: replacements to VariableDeclarationFragment at 0", "INS SimpleName: last to Assignment: = at 0", "INS Block to IfStatement at 1", "INS StringLiteral: \"\\\\u2029\" to Assignment: = at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: replacement to Assignment: = at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 6"]}, {"root": "MOVE from ForStatement", "operations": ["MOV VariableDeclarationExpression to ForStatement at 0", "MOV PostfixExpression: ++ to ForStatement at 2", "MOV InfixExpression: < to ForStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1", "MOV VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: i to VariableDeclarationFragment at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from out to REPLACEMENT_CHARS", "operations": ["UPD SimpleName: out from out to REPLACEMENT_CHARS"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: write to MethodInvocation at 1", "MOV SimpleName: out to MethodInvocation at 0"]}, {"root": "UPDATE from write to clone", "operations": ["UPD SimpleName: write from write to clone"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: replacement to InfixExpression: == at 0", "INS ContinueStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: out to MethodInvocation at 0", "MOV SimpleName: write to MethodInvocation at 1"]}, {"root": "UPDATE from String to replacement", "operations": ["UPD SimpleName: String from String to replacement"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: String to MethodInvocation at 2"]}, {"root": "UPDATE from String to value", "operations": ["UPD SimpleName: String from String to value", "UPD SimpleName: c from c to value"]}, {"root": "INS SimpleName: last to MethodInvocation at 3", "operations": ["INS SimpleName: last to MethodInvocation at 3"]}, {"root": "INS InfixExpression: - to MethodInvocation at 4", "operations": ["INS SimpleName: length to InfixExpression: - at 0", "INS SimpleName: last to InfixExpression: - at 1", "INS InfixExpression: - to MethodInvocation at 4"]}, {"root": "UPDATE from out to String", "operations": ["UPD SimpleName: out from out to String"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: out to MethodInvocation at 0", "MOV SimpleName: write to MethodInvocation at 1"]}, {"root": "UPDATE from write to format", "operations": ["UPD SimpleName: write from write to format"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS ArrayAccess to Assignment: = at 1", "INS SimpleName: replacement to Assignment: = at 0", "INS SimpleName: c to ArrayAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: replacements to ArrayAccess at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: format to MethodInvocation at 3", "MOV SimpleName: String to MethodInvocation at 2"]}, {"root": "UPDATE from format to last", "operations": ["UPD SimpleName: format from format to last"]}, {"root": "INS InfixExpression: - to MethodInvocation at 4", "operations": ["INS SimpleName: last to InfixExpression: - at 1", "INS InfixExpression: - to MethodInvocation at 4", "INS SimpleName: i to InfixExpression: - at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: out", "DEL SimpleName: write", "DEL SimpleName: c", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: c", "DEL CastExpression", "DEL StringLiteral: \"\\\\u%04x\"", "DEL PrimitiveType: int", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL StringLiteral: \"\\\\n\"", "DEL SimpleName: string", "DEL SwitchCase", "DEL MethodInvocation", "DEL BreakStatement", "DEL CharacterLiteral: '\\u2028'", "DEL SimpleName: String", "DEL Block", "DEL IfStatement", "DEL SimpleName: c", "DEL SimpleName: out", "DEL MethodInvocation", "DEL InfixExpression: <=", "DEL CharacterLiteral: '\\\\'", "DEL MethodInvocation", "DEL CharacterLiteral: '\\\\'", "DEL StringLiteral: \"\\\\r\"", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL BreakStatement", "DEL SimpleName: c", "DEL SwitchCase", "DEL CharacterLiteral: '\\n'", "DEL MethodDeclaration", "DEL SimpleName: c", "DEL StringLiteral: \"\\\\b\"", "DEL Block", "DEL SwitchCase", "DEL MethodInvocation", "DEL Modifier: private", "DEL BreakStatement", "DEL SimpleName: out", "DEL SwitchStatement", "DEL PrimitiveType: int", "DEL SimpleName: out", "DEL SwitchCase", "DEL SwitchCase", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL CharacterLiteral: '\\''", "DEL CharacterLiteral: '\\r'", "DEL BreakStatement", "DEL SimpleName: out", "DEL SimpleName: write", "DEL CharacterLiteral: '\\t'", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SwitchCase", "DEL SimpleName: out", "DEL BreakStatement", "DEL CastExpression", "DEL SwitchCase", "DEL BreakStatement", "DEL Block", "DEL SimpleName: write", "DEL CharacterLiteral: '>'", "DEL ExpressionStatement", "DEL BreakStatement", "DEL SimpleName: c", "DEL SwitchCase", "DEL CharacterLiteral: '\\b'", "DEL CharacterLiteral: '&'", "DEL StringLiteral: \"\\\\u%04x\"", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"\\\\u%04x\"", "DEL SimpleName: write", "DEL SwitchCase", "DEL SimpleName: htmlSafe", "DEL SimpleName: format", "DEL SwitchCase", "DEL SimpleName: out", "DEL BreakStatement", "DEL CharacterLiteral: '\\u2029'", "DEL SimpleName: write", "DEL SwitchCase", "DEL SwitchCase", "DEL ExpressionStatement", "DEL CharacterLiteral: '<'", "DEL SwitchCase", "DEL CharacterLiteral: '\\f'", "DEL StringLiteral: \"\\\\f\"", "DEL SimpleName: format", "DEL SimpleName: write", "DEL SimpleName: write", "DEL BreakStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0x1F", "DEL ForStatement", "DEL StringLiteral: \"\\\\t\"", "DEL CharacterLiteral: '='", "DEL ExpressionStatement", "DEL CharacterLiteral: '\"'", "DEL SwitchCase", "DEL SwitchCase", "DEL MethodInvocation", "DEL CastExpression"]}]}}, {"JsonWriter_diff": {"operations": ["Insert FieldDeclaration(150) into TypeDeclaration: class(1635) at 4", "Insert FieldDeclaration(160) into TypeDeclaration: class(1635) at 5", "Insert Initializer(274) into TypeDeclaration: class(1635) at 6", "Insert MethodDeclaration(1454) into TypeDeclaration: class(1635) at 42", "Insert Modifier: private(141) into FieldDeclaration(150) at 0", "Insert Modifier: static(142) into FieldDeclaration(150) at 1", "Insert Modifier: final(143) into FieldDeclaration(150) at 2", "Insert ArrayType: String[](147) into FieldDeclaration(150) at 3", "Insert VariableDeclarationFragment(149) into FieldDeclaration(150) at 4", "Insert Modifier: private(151) into FieldDeclaration(160) at 0", "Insert Modifier: static(152) into FieldDeclaration(160) at 1", "Insert Modifier: final(153) into FieldDeclaration(160) at 2", "Insert ArrayType: String[](157) into FieldDeclaration(160) at 3", "Insert VariableDeclarationFragment(159) into FieldDeclaration(160) at 4", "Insert Modifier: static(161) into Initializer(274) at 0", "Insert Block(273) into Initializer(274) at 1", "Insert Modifier: private(1310) into MethodDeclaration(1454) at 0", "Insert PrimitiveType: void(1311) into MethodDeclaration(1454) at 1", "Insert SimpleName: string(1312) into MethodDeclaration(1454) at 2", "Move SingleVariableDeclaration(1182) into MethodDeclaration(1454) at 3", "Move SimpleType: IOException(1184) into MethodDeclaration(1454) at 4", "Insert Block(1453) into MethodDeclaration(1454) at 5", "Insert SimpleType: String(145) into ArrayType: String[](147) at 0", "Insert Dimension(146) into ArrayType: String[](147) at 1", "Insert SimpleName: REPLACEMENT_CHARS(148) into VariableDeclarationFragment(149) at 0", "Insert SimpleType: String(155) into ArrayType: String[](157) at 0", "Insert Dimension(156) into ArrayType: String[](157) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(158) into VariableDeclarationFragment(159) at 0", "Insert ExpressionStatement(170) into Block(273) at 0", "Insert ForStatement(194) into Block(273) at 1", "Insert ExpressionStatement(200) into Block(273) at 2", "Insert ExpressionStatement(206) into Block(273) at 3", "Insert ExpressionStatement(212) into Block(273) at 4", "Insert ExpressionStatement(218) into Block(273) at 5", "Insert ExpressionStatement(224) into Block(273) at 6", "Insert ExpressionStatement(230) into Block(273) at 7", "Insert ExpressionStatement(236) into Block(273) at 8", "Insert ExpressionStatement(242) into Block(273) at 9", "Insert ExpressionStatement(248) into Block(273) at 10", "Insert ExpressionStatement(254) into Block(273) at 11", "Insert ExpressionStatement(260) into Block(273) at 12", "Insert ExpressionStatement(266) into Block(273) at 13", "Insert ExpressionStatement(272) into Block(273) at 14", "Insert VariableDeclarationStatement(1329) into Block(1453) at 0", "Move ExpressionStatement(1347) into Block(1453) at 1", "Insert VariableDeclarationStatement(1339) into Block(1453) at 2", "Insert VariableDeclarationStatement(1346) into Block(1453) at 3", "Insert ForStatement(1433) into Block(1453) at 4", "Insert IfStatement(1447) into Block(1453) at 5", "Move ExpressionStatement(1189) into Block(1453) at 6", "Insert SimpleName: String(144) into SimpleType: String(145) at 0", "Insert SimpleName: String(154) into SimpleType: String(155) at 0", "Insert Assignment: =(169) into ExpressionStatement(170) at 0", "Move VariableDeclarationExpression(1199) into ForStatement(194) at 0", "Insert InfixExpression: <=(178) into ForStatement(194) at 1", "Insert PostfixExpression: ++(180) into ForStatement(194) at 2", "Insert Block(193) into ForStatement(194) at 3", "Insert Assignment: =(199) into ExpressionStatement(200) at 0", "Insert Assignment: =(205) into ExpressionStatement(206) at 0", "Insert Assignment: =(211) into ExpressionStatement(212) at 0", "Insert Assignment: =(217) into ExpressionStatement(218) at 0", "Insert Assignment: =(223) into ExpressionStatement(224) at 0", "Insert Assignment: =(229) into ExpressionStatement(230) at 0", "Insert Assignment: =(235) into ExpressionStatement(236) at 0", "Insert Assignment: =(241) into ExpressionStatement(242) at 0", "Insert Assignment: =(247) into ExpressionStatement(248) at 0", "Insert Assignment: =(253) into ExpressionStatement(254) at 0", "Insert Assignment: =(259) into ExpressionStatement(260) at 0", "Insert Assignment: =(265) into ExpressionStatement(266) at 0", "Insert Assignment: =(271) into ExpressionStatement(272) at 0", "Insert ArrayType: String[](1322) into VariableDeclarationStatement(1329) at 0", "Insert VariableDeclarationFragment(1328) into VariableDeclarationStatement(1329) at 1", "Insert PrimitiveType: int(1335) into VariableDeclarationStatement(1339) at 0", "Insert VariableDeclarationFragment(1338) into VariableDeclarationStatement(1339) at 1", "Insert PrimitiveType: int(1340) into VariableDeclarationStatement(1346) at 0", "Move VariableDeclarationFragment(1198) into VariableDeclarationStatement(1346) at 1", "Insert VariableDeclarationExpression(1351) into ForStatement(1433) at 0", "Move InfixExpression: <(1202) into ForStatement(1433) at 1", "Move PostfixExpression: ++(1204) into ForStatement(1433) at 2", "Insert Block(1432) into ForStatement(1433) at 3", "Insert InfixExpression: <(1436) into IfStatement(1447) at 0", "Move Block(1337) into IfStatement(1447) at 1", "Insert SimpleName: REPLACEMENT_CHARS(162) into Assignment: =(169) at 0", "Insert ArrayCreation(168) into Assignment: =(169) at 1", "Insert VariableDeclarationFragment(174) into VariableDeclarationExpression(175) at 1", "Insert SimpleName: i(176) into InfixExpression: <=(178) at 0", "Insert NumberLiteral: 0x1f(177) into InfixExpression: <=(178) at 1", "Insert SimpleName: i(179) into PostfixExpression: ++(180) at 0", "Insert ExpressionStatement(192) into Block(193) at 0", "Insert ArrayAccess(197) into Assignment: =(199) at 0", "Insert StringLiteral: \"\\\\\\\"\"(198) into Assignment: =(199) at 1", "Insert ArrayAccess(203) into Assignment: =(205) at 0", "Insert StringLiteral: \"\\\\\\\\\"(204) into Assignment: =(205) at 1", "Insert ArrayAccess(209) into Assignment: =(211) at 0", "Insert StringLiteral: \"\\\\t\"(210) into Assignment: =(211) at 1", "Insert ArrayAccess(215) into Assignment: =(217) at 0", "Insert StringLiteral: \"\\\\b\"(216) into Assignment: =(217) at 1", "Insert ArrayAccess(221) into Assignment: =(223) at 0", "Insert StringLiteral: \"\\\\n\"(222) into Assignment: =(223) at 1", "Insert ArrayAccess(227) into Assignment: =(229) at 0", "Insert StringLiteral: \"\\\\r\"(228) into Assignment: =(229) at 1", "Insert ArrayAccess(233) into Assignment: =(235) at 0", "Insert StringLiteral: \"\\\\f\"(234) into Assignment: =(235) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(237) into Assignment: =(241) at 0", "Insert MethodInvocation(240) into Assignment: =(241) at 1", "Insert ArrayAccess(245) into Assignment: =(247) at 0", "Insert StringLiteral: \"\\\\u003c\"(246) into Assignment: =(247) at 1", "Insert ArrayAccess(251) into Assignment: =(253) at 0", "Insert StringLiteral: \"\\\\u003e\"(252) into Assignment: =(253) at 1", "Insert ArrayAccess(257) into Assignment: =(259) at 0", "Insert StringLiteral: \"\\\\u0026\"(258) into Assignment: =(259) at 1", "Insert ArrayAccess(263) into Assignment: =(265) at 0", "Insert StringLiteral: \"\\\\u003d\"(264) into Assignment: =(265) at 1", "Insert ArrayAccess(269) into Assignment: =(271) at 0", "Insert StringLiteral: \"\\\\u0027\"(270) into Assignment: =(271) at 1", "Insert SimpleType: String(1320) into ArrayType: String[](1322) at 0", "Insert Dimension(1321) into ArrayType: String[](1322) at 1", "Insert SimpleName: replacements(1323) into VariableDeclarationFragment(1328) at 0", "Insert ConditionalExpression(1327) into VariableDeclarationFragment(1328) at 1", "Insert SimpleName: last(1336) into VariableDeclarationFragment(1338) at 0", "Insert NumberLiteral: 0(1337) into VariableDeclarationFragment(1338) at 1", "Insert PrimitiveType: int(1347) into VariableDeclarationExpression(1351) at 0", "Move VariableDeclarationFragment(1193) into VariableDeclarationExpression(1351) at 1", "Move VariableDeclarationStatement(1212) into Block(1432) at 0", "Insert VariableDeclarationStatement(1369) into Block(1432) at 1", "Insert IfStatement(1406) into Block(1432) at 2", "Insert IfStatement(1420) into Block(1432) at 3", "Insert ExpressionStatement(1425) into Block(1432) at 4", "Insert ExpressionStatement(1431) into Block(1432) at 5", "Insert SimpleName: last(1434) into InfixExpression: <(1436) at 0", "Insert SimpleName: length(1435) into InfixExpression: <(1436) at 1", "Insert ArrayType: String[](166) into ArrayCreation(168) at 0", "Insert NumberLiteral: 128(167) into ArrayCreation(168) at 1", "Insert SimpleName: i(172) into VariableDeclarationFragment(174) at 0", "Insert NumberLiteral: 0(173) into VariableDeclarationFragment(174) at 1", "Insert Assignment: =(191) into ExpressionStatement(192) at 0", "Insert SimpleName: REPLACEMENT_CHARS(195) into ArrayAccess(197) at 0", "Insert CharacterLiteral: '\"'(196) into ArrayAccess(197) at 1", "Insert SimpleName: REPLACEMENT_CHARS(201) into ArrayAccess(203) at 0", "Insert CharacterLiteral: '\\\\'(202) into ArrayAccess(203) at 1", "Insert SimpleName: REPLACEMENT_CHARS(207) into ArrayAccess(209) at 0", "Insert CharacterLiteral: '\\t'(208) into ArrayAccess(209) at 1", "Insert SimpleName: REPLACEMENT_CHARS(213) into ArrayAccess(215) at 0", "Insert CharacterLiteral: '\\b'(214) into ArrayAccess(215) at 1", "Insert SimpleName: REPLACEMENT_CHARS(219) into ArrayAccess(221) at 0", "Insert CharacterLiteral: '\\n'(220) into ArrayAccess(221) at 1", "Insert SimpleName: REPLACEMENT_CHARS(225) into ArrayAccess(227) at 0", "Insert CharacterLiteral: '\\r'(226) into ArrayAccess(227) at 1", "Insert SimpleName: REPLACEMENT_CHARS(231) into ArrayAccess(233) at 0", "Insert CharacterLiteral: '\\f'(232) into ArrayAccess(233) at 1", "Update SimpleName: out(1263) to REPLACEMENT_CHARS", "Move SimpleName: out(1263) into MethodInvocation(240) at 0", "Update SimpleName: write(1264) to clone", "Move SimpleName: write(1264) into MethodInvocation(240) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(243) into ArrayAccess(245) at 0", "Insert CharacterLiteral: '<'(244) into ArrayAccess(245) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(249) into ArrayAccess(251) at 0", "Insert CharacterLiteral: '>'(250) into ArrayAccess(251) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(255) into ArrayAccess(257) at 0", "Insert CharacterLiteral: '&'(256) into ArrayAccess(257) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(261) into ArrayAccess(263) at 0", "Insert CharacterLiteral: '='(262) into ArrayAccess(263) at 1", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(267) into ArrayAccess(269) at 0", "Insert CharacterLiteral: '\\''(268) into ArrayAccess(269) at 1", "Insert SimpleName: String(1319) into SimpleType: String(1320) at 0", "Insert SimpleName: htmlSafe(1324) into ConditionalExpression(1327) at 0", "Insert SimpleName: HTML_SAFE_REPLACEMENT_CHARS(1325) into ConditionalExpression(1327) at 1", "Insert SimpleName: REPLACEMENT_CHARS(1326) into ConditionalExpression(1327) at 2", "Insert SimpleType: String(1366) into VariableDeclarationStatement(1369) at 0", "Insert VariableDeclarationFragment(1368) into VariableDeclarationStatement(1369) at 1", "Insert InfixExpression: <(1372) into IfStatement(1406) at 0", "Move Block(1297) into IfStatement(1406) at 1", "Insert IfStatement(1405) into IfStatement(1406) at 2", "Insert InfixExpression: <(1409) into IfStatement(1420) at 0", "Insert Block(1419) into IfStatement(1420) at 1", "Insert MethodInvocation(1424) into ExpressionStatement(1425) at 0", "Insert Assignment: =(1430) into ExpressionStatement(1431) at 0", "Insert SimpleType: String(164) into ArrayType: String[](166) at 0", "Insert Dimension(165) into ArrayType: String[](166) at 1", "Insert ArrayAccess(183) into Assignment: =(191) at 0", "Insert MethodInvocation(190) into Assignment: =(191) at 1", "Insert SimpleName: String(1365) into SimpleType: String(1366) at 0", "Insert SimpleName: replacement(1367) into VariableDeclarationFragment(1368) at 0", "Insert SimpleName: c(1370) into InfixExpression: <(1372) at 0", "Insert NumberLiteral: 128(1371) into InfixExpression: <(1372) at 1", "Insert IfStatement(1384) into Block(1385) at 1", "Insert InfixExpression: ==(1388) into IfStatement(1405) at 0", "Insert Block(1393) into IfStatement(1405) at 1", "Insert IfStatement(1404) into IfStatement(1405) at 2", "Insert SimpleName: last(1407) into InfixExpression: <(1409) at 0", "Insert SimpleName: i(1408) into InfixExpression: <(1409) at 1", "Insert ExpressionStatement(1418) into Block(1419) at 0", "Move SimpleName: out(1320) into MethodInvocation(1424) at 0", "Move SimpleName: write(1321) into MethodInvocation(1424) at 1", "Update SimpleName: String(1322) to replacement", "Move SimpleName: String(1322) into MethodInvocation(1424) at 2", "Insert SimpleName: last(1426) into Assignment: =(1430) at 0", "Insert InfixExpression: +(1429) into Assignment: =(1430) at 1", "Update SimpleName: c(1334) to value", "Insert SimpleName: last(1440) into MethodInvocation(1444) at 3", "Insert InfixExpression: -(1443) into MethodInvocation(1444) at 4", "Insert SimpleName: String(163) into SimpleType: String(164) at 0", "Insert SimpleName: REPLACEMENT_CHARS(181) into ArrayAccess(183) at 0", "Insert SimpleName: i(182) into ArrayAccess(183) at 1", "Update SimpleName: out(1223) to String", "Move SimpleName: out(1223) into MethodInvocation(190) at 0", "Update SimpleName: write(1224) to format", "Move SimpleName: write(1224) into MethodInvocation(190) at 1", "Insert StringLiteral: \"\\\\u%04x\"(186) into MethodInvocation(190) at 2", "Insert CastExpression(189) into MethodInvocation(190) at 3", "Insert Assignment: =(1377) into ExpressionStatement(1378) at 0", "Insert InfixExpression: ==(1381) into IfStatement(1384) at 0", "Insert Block(1383) into IfStatement(1384) at 1", "Insert SimpleName: c(1386) into InfixExpression: ==(1388) at 0", "Insert CharacterLiteral: '\\u2028'(1387) into InfixExpression: ==(1388) at 1", "Insert ExpressionStatement(1392) into Block(1393) at 0", "Insert InfixExpression: ==(1396) into IfStatement(1404) at 0", "Insert Block(1401) into IfStatement(1404) at 1", "Insert Block(1403) into IfStatement(1404) at 2", "Move MethodInvocation(1313) into ExpressionStatement(1418) at 0", "Insert SimpleName: i(1427) into InfixExpression: +(1429) at 0", "Insert NumberLiteral: 1(1428) into InfixExpression: +(1429) at 1", "Insert SimpleName: length(1441) into InfixExpression: -(1443) at 0", "Insert SimpleName: last(1442) into InfixExpression: -(1443) at 1", "Insert PrimitiveType: int(187) into CastExpression(189) at 0", "Insert SimpleName: i(188) into CastExpression(189) at 1", "Insert SimpleName: replacement(1373) into Assignment: =(1377) at 0", "Insert ArrayAccess(1376) into Assignment: =(1377) at 1", "Insert SimpleName: replacement(1379) into InfixExpression: ==(1381) at 0", "Insert NullLiteral(1380) into InfixExpression: ==(1381) at 1", "Insert ContinueStatement(1382) into Block(1383) at 0", "Insert Assignment: =(1391) into ExpressionStatement(1392) at 0", "Insert SimpleName: c(1394) into InfixExpression: ==(1396) at 0", "Insert CharacterLiteral: '\\u2029'(1395) into InfixExpression: ==(1396) at 1", "Insert ExpressionStatement(1400) into Block(1401) at 0", "Insert ContinueStatement(1402) into Block(1403) at 0", "Update SimpleName: String(1306) to value", "Move SimpleName: String(1306) into MethodInvocation(1417) at 2", "Update SimpleName: format(1307) to last", "Move SimpleName: format(1307) into MethodInvocation(1417) at 3", "Insert InfixExpression: -(1416) into MethodInvocation(1417) at 4", "Insert SimpleName: replacements(1374) into ArrayAccess(1376) at 0", "Insert SimpleName: c(1375) into ArrayAccess(1376) at 1", "Insert SimpleName: replacement(1389) into Assignment: =(1391) at 0", "Insert StringLiteral: \"\\\\u2028\"(1390) into Assignment: =(1391) at 1", "Insert Assignment: =(1399) into ExpressionStatement(1400) at 0", "Insert SimpleName: i(1414) into InfixExpression: -(1416) at 0", "Insert SimpleName: last(1415) into InfixExpression: -(1416) at 1", "Insert SimpleName: replacement(1397) into Assignment: =(1399) at 0", "Insert StringLiteral: \"\\\\u2029\"(1398) into Assignment: =(1399) at 1", "Delete SimpleName: out(1292)", "Delete SimpleName: write(1293)", "Delete SimpleName: c(1294)", "Delete MethodInvocation(1295)", "Delete StringLiteral: \"\\\\u%04x\"(1308)", "Delete PrimitiveType: int(1309)", "Delete SimpleName: c(1310)", "Delete CastExpression(1311)", "Delete MethodInvocation(1312)", "Delete Modifier: private(1176)", "Delete PrimitiveType: void(1177)", "Delete SimpleName: string(1178)", "Delete SimpleName: c(1213)", "Delete CharacterLiteral: '\"'(1214)", "Delete SwitchCase(1215)", "Delete CharacterLiteral: '\\\\'(1216)", "Delete SwitchCase(1217)", "Delete SimpleName: out(1218)", "Delete SimpleName: write(1219)", "Delete CharacterLiteral: '\\\\'(1220)", "Delete MethodInvocation(1221)", "Delete ExpressionStatement(1222)", "Delete SimpleName: c(1225)", "Delete MethodInvocation(1226)", "Delete ExpressionStatement(1227)", "Delete BreakStatement(1228)", "Delete CharacterLiteral: '\\t'(1229)", "Delete SwitchCase(1230)", "Delete SimpleName: out(1231)", "Delete SimpleName: write(1232)", "Delete StringLiteral: \"\\\\t\"(1233)", "Delete MethodInvocation(1234)", "Delete ExpressionStatement(1235)", "Delete BreakStatement(1236)", "Delete CharacterLiteral: '\\b'(1237)", "Delete SwitchCase(1238)", "Delete SimpleName: out(1239)", "Delete SimpleName: write(1240)", "Delete StringLiteral: \"\\\\b\"(1241)", "Delete MethodInvocation(1242)", "Delete ExpressionStatement(1243)", "Delete BreakStatement(1244)", "Delete CharacterLiteral: '\\n'(1245)", "Delete SwitchCase(1246)", "Delete SimpleName: out(1247)", "Delete SimpleName: write(1248)", "Delete StringLiteral: \"\\\\n\"(1249)", "Delete MethodInvocation(1250)", "Delete ExpressionStatement(1251)", "Delete BreakStatement(1252)", "Delete CharacterLiteral: '\\r'(1253)", "Delete SwitchCase(1254)", "Delete SimpleName: out(1255)", "Delete SimpleName: write(1256)", "Delete StringLiteral: \"\\\\r\"(1257)", "Delete MethodInvocation(1258)", "Delete ExpressionStatement(1259)", "Delete BreakStatement(1260)", "Delete CharacterLiteral: '\\f'(1261)", "Delete SwitchCase(1262)", "Delete StringLiteral: \"\\\\f\"(1265)", "Delete MethodInvocation(1266)", "Delete ExpressionStatement(1267)", "Delete BreakStatement(1268)", "Delete CharacterLiteral: '<'(1269)", "Delete SwitchCase(1270)", "Delete CharacterLiteral: '>'(1271)", "Delete SwitchCase(1272)", "Delete CharacterLiteral: '&'(1273)", "Delete SwitchCase(1274)", "Delete CharacterLiteral: '='(1275)", "Delete SwitchCase(1276)", "Delete CharacterLiteral: '\\''(1277)", "Delete SwitchCase(1278)", "Delete SimpleName: htmlSafe(1279)", "Delete SimpleName: out(1280)", "Delete SimpleName: write(1281)", "Delete SimpleName: String(1282)", "Delete SimpleName: format(1283)", "Delete StringLiteral: \"\\\\u%04x\"(1284)", "Delete PrimitiveType: int(1285)", "Delete SimpleName: c(1286)", "Delete CastExpression(1287)", "Delete MethodInvocation(1288)", "Delete MethodInvocation(1289)", "Delete ExpressionStatement(1290)", "Delete Block(1291)", "Delete IfStatement(1298)", "Delete BreakStatement(1299)", "Delete CharacterLiteral: '\\u2028'(1300)", "Delete SwitchCase(1301)", "Delete CharacterLiteral: '\\u2029'(1302)", "Delete SwitchCase(1303)", "Delete ExpressionStatement(1314)", "Delete BreakStatement(1315)", "Delete SwitchCase(1316)", "Delete SimpleName: c(1317)", "Delete NumberLiteral: 0x1F(1318)", "Delete InfixExpression: <=(1319)", "Delete SimpleName: format(1323)", "Delete StringLiteral: \"\\\\u%04x\"(1324)", "Delete PrimitiveType: int(1325)", "Delete SimpleName: c(1326)", "Delete CastExpression(1327)", "Delete MethodInvocation(1328)", "Delete MethodInvocation(1329)", "Delete ExpressionStatement(1330)", "Delete Block(1331)", "Delete IfStatement(1338)", "Delete BreakStatement(1339)", "Delete SwitchStatement(1340)", "Delete Block(1341)", "Delete ForStatement(1342)", "Delete Block(1348)", "Delete MethodDeclaration(1349)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}