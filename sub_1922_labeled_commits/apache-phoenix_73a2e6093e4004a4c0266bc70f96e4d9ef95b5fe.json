{"application": "apache-phoenix", "csha": "73a2e6093e4004a4c0266bc70f96e4d9ef95b5fe", "files": [{"IndexStatementRewriter_cluster": {"actions": [{"root": "INS ConditionalExpression to ClassInstanceCreation at 2", "operations": ["INS ConditionalExpression to ClassInstanceCreation at 2", "INS CharacterLiteral: '\"' to InfixExpression: + at 0", "INS InfixExpression: + to ConditionalExpression at 1", "INS SimpleName: indexColName to ConditionalExpression at 2", "INS CharacterLiteral: '\"' to InfixExpression: + at 2", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: indexColName to InfixExpression: + at 1", "INS SimpleName: isCaseSensitive to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 0"]}, {"root": "DEL SimpleName: indexColName", "operations": ["DEL SimpleName: indexColName"]}]}}, {"IndexStatementRewriter_diff": {"operations": ["Insert ConditionalExpression(328) into ClassInstanceCreation(332) at 2", "Insert MethodInvocation(322) into ConditionalExpression(328) at 0", "Insert InfixExpression: +(326) into ConditionalExpression(328) at 1", "Insert SimpleName: indexColName(327) into ConditionalExpression(328) at 2", "Insert SimpleName: node(320) into MethodInvocation(322) at 0", "Insert SimpleName: isCaseSensitive(321) into MethodInvocation(322) at 1", "Insert CharacterLiteral: '\"'(323) into InfixExpression: +(326) at 0", "Insert SimpleName: indexColName(324) into InfixExpression: +(326) at 1", "Insert CharacterLiteral: '\"'(325) into InfixExpression: +(326) at 2", "Delete SimpleName: indexColName(320)"]}}, {"ProjectionCompiler_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: colName to VariableDeclarationFragment at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS VariableDeclarationStatement to Block at 4", "INS SimpleName: isCaseSensitive to VariableDeclarationFragment at 0", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: colName to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: normalizeIdentifier to MethodInvocation at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: colName to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4", "INS SimpleName: colName to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 5", "INS SimpleType: ExpressionProjector to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: ExpressionProjector to SimpleType: ExpressionProjector at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: projector to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: colName to VariableDeclarationFragment at 0", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationStatement to Block at 5"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: colName to MethodInvocation at 2", "INS SimpleName: normalizeIdentifier to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: colName to MethodInvocation at 2", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isCaseSensitive to VariableDeclarationFragment at 0", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 6"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: colName to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleName: equals to MethodInvocation at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: normalizeIdentifier to MethodInvocation at 1", "INS SimpleName: colName to MethodInvocation at 2", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: colName to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isCaseSensitive to VariableDeclarationFragment at 0", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 4"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: colName to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 5", "operations": ["INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: colName to MethodInvocation at 2", "INS SimpleName: normalizeIdentifier to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: isCaseSensitive to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS SimpleName: colName to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 2", "MOV SimpleType: ExpressionProjector to VariableDeclarationStatement at 0", "MOV SimpleName: expression to ClassInstanceCreation at 3"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: ExpressionProjector to VariableDeclarationStatement at 0", "MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: getString to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ExpressionProjector to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: colName to ClassInstanceCreation at 1", "operations": ["INS SimpleName: colName to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4", "operations": ["INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4"]}, {"root": "INS SimpleName: colName to ClassInstanceCreation at 1", "operations": ["INS SimpleName: colName to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4", "operations": ["INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4"]}, {"root": "INS SimpleName: colName to ClassInstanceCreation at 1", "operations": ["INS SimpleName: colName to ClassInstanceCreation at 1"]}, {"root": "INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4", "operations": ["INS SimpleName: isCaseSensitive to ClassInstanceCreation at 4"]}, {"root": "UPDATE from getColumn to tableColumn", "operations": ["UPD SimpleName: getColumn from getColumn to tableColumn"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getColumn to MethodInvocation at 0"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: != to ConditionalExpression at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 1", "INS QualifiedName: selectVisitor.isCaseSensitive to ConditionalExpression at 2", "INS SimpleName: getAlias to MethodInvocation at 1", "INS ConditionalExpression to ParenthesizedExpression at 0", "INS SimpleName: aliasedNode to MethodInvocation at 0", "INS SimpleName: getNode to MethodInvocation at 1", "INS ParenthesizedExpression to ConditionalExpression at 2", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: aliasedNode to MethodInvocation at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV InfixExpression: != to ConditionalExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: columnAlias to MethodInvocation at 1", "MOV SimpleName: isCaseSensitive to MethodInvocation at 1", "MOV SimpleName: SchemaUtil to MethodInvocation at 0"]}, {"root": "UPDATE from columnAlias to getAlias", "operations": ["UPD SimpleName: columnAlias from columnAlias to getAlias"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: ref", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: projectedColumns", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: add", "DEL MethodInvocation"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL ParenthesizedExpression", "DEL InfixExpression: ||", "DEL InfixExpression: ||", "DEL QualifiedName: selectVisitor.isCaseSensitive", "DEL InfixExpression: &&"]}]}}, {"ProjectionCompiler_diff": {"operations": ["Insert VariableDeclarationStatement(314) into Block(343) at 3", "Insert VariableDeclarationStatement(326) into Block(343) at 4", "Insert VariableDeclarationStatement(342) into Block(343) at 5", "Insert VariableDeclarationStatement(519) into Block(553) at 5", "Insert VariableDeclarationStatement(531) into Block(553) at 6", "Insert VariableDeclarationStatement(647) into Block(675) at 3", "Insert VariableDeclarationStatement(659) into Block(675) at 4", "Insert VariableDeclarationStatement(798) into Block(826) at 4", "Insert VariableDeclarationStatement(810) into Block(826) at 5", "Insert SimpleType: String(306) into VariableDeclarationStatement(314) at 0", "Insert VariableDeclarationFragment(313) into VariableDeclarationStatement(314) at 1", "Insert PrimitiveType: boolean(315) into VariableDeclarationStatement(326) at 0", "Insert VariableDeclarationFragment(325) into VariableDeclarationStatement(326) at 1", "Move SimpleType: ExpressionProjector(308) into VariableDeclarationStatement(342) at 0", "Insert VariableDeclarationFragment(341) into VariableDeclarationStatement(342) at 1", "Insert SimpleType: String(511) into VariableDeclarationStatement(519) at 0", "Insert VariableDeclarationFragment(518) into VariableDeclarationStatement(519) at 1", "Insert PrimitiveType: boolean(520) into VariableDeclarationStatement(531) at 0", "Insert VariableDeclarationFragment(530) into VariableDeclarationStatement(531) at 1", "Move SimpleType: ExpressionProjector(497) into VariableDeclarationStatement(547) at 0", "Insert SimpleType: String(639) into VariableDeclarationStatement(647) at 0", "Insert VariableDeclarationFragment(646) into VariableDeclarationStatement(647) at 1", "Insert PrimitiveType: boolean(648) into VariableDeclarationStatement(659) at 0", "Insert VariableDeclarationFragment(658) into VariableDeclarationStatement(659) at 1", "Insert SimpleType: String(790) into VariableDeclarationStatement(798) at 0", "Insert VariableDeclarationFragment(797) into VariableDeclarationStatement(798) at 1", "Insert PrimitiveType: boolean(799) into VariableDeclarationStatement(810) at 0", "Insert VariableDeclarationFragment(809) into VariableDeclarationStatement(810) at 1", "Insert SimpleName: String(305) into SimpleType: String(306) at 0", "Insert SimpleName: colName(307) into VariableDeclarationFragment(313) at 0", "Insert MethodInvocation(312) into VariableDeclarationFragment(313) at 1", "Insert SimpleName: isCaseSensitive(316) into VariableDeclarationFragment(325) at 0", "Insert PrefixExpression: !(324) into VariableDeclarationFragment(325) at 1", "Insert SimpleName: projector(329) into VariableDeclarationFragment(341) at 0", "Insert ClassInstanceCreation(340) into VariableDeclarationFragment(341) at 1", "Insert SimpleName: String(510) into SimpleType: String(511) at 0", "Insert SimpleName: colName(512) into VariableDeclarationFragment(518) at 0", "Move MethodInvocation(502) into VariableDeclarationFragment(518) at 1", "Insert SimpleName: isCaseSensitive(521) into VariableDeclarationFragment(530) at 0", "Insert PrefixExpression: !(529) into VariableDeclarationFragment(530) at 1", "Insert SimpleName: String(638) into SimpleType: String(639) at 0", "Insert SimpleName: colName(640) into VariableDeclarationFragment(646) at 0", "Move MethodInvocation(611) into VariableDeclarationFragment(646) at 1", "Insert SimpleName: isCaseSensitive(649) into VariableDeclarationFragment(658) at 0", "Insert PrefixExpression: !(657) into VariableDeclarationFragment(658) at 1", "Insert SimpleName: String(789) into SimpleType: String(790) at 0", "Insert SimpleName: colName(791) into VariableDeclarationFragment(797) at 0", "Move MethodInvocation(744) into VariableDeclarationFragment(797) at 1", "Insert SimpleName: isCaseSensitive(800) into VariableDeclarationFragment(809) at 0", "Insert PrefixExpression: !(808) into VariableDeclarationFragment(809) at 1", "Move MethodInvocation(313) into MethodInvocation(312) at 0", "Move SimpleName: getString(314) into MethodInvocation(312) at 1", "Insert MethodInvocation(323) into PrefixExpression: !(324) at 0", "Insert SimpleType: ExpressionProjector(331) into ClassInstanceCreation(340) at 0", "Insert SimpleName: colName(332) into ClassInstanceCreation(340) at 1", "Move MethodInvocation(320) into ClassInstanceCreation(340) at 2", "Move SimpleName: expression(321) into ClassInstanceCreation(340) at 3", "Insert SimpleName: isCaseSensitive(339) into ClassInstanceCreation(340) at 4", "Insert MethodInvocation(528) into PrefixExpression: !(529) at 0", "Move SimpleType: ExpressionProjector(494) into ClassInstanceCreation(545) at 0", "Insert SimpleName: colName(537) into ClassInstanceCreation(545) at 1", "Insert SimpleName: isCaseSensitive(544) into ClassInstanceCreation(545) at 4", "Insert MethodInvocation(656) into PrefixExpression: !(657) at 0", "Insert SimpleName: colName(664) into ClassInstanceCreation(672) at 1", "Insert SimpleName: isCaseSensitive(671) into ClassInstanceCreation(672) at 4", "Insert MethodInvocation(807) into PrefixExpression: !(808) at 0", "Insert SimpleName: colName(815) into ClassInstanceCreation(823) at 1", "Insert SimpleName: isCaseSensitive(822) into ClassInstanceCreation(823) at 4", "Update SimpleName: getColumn(310) to tableColumn", "Move SimpleName: getColumn(310) into MethodInvocation(310) at 0", "Insert MethodInvocation(320) into MethodInvocation(323) at 0", "Insert SimpleName: equals(321) into MethodInvocation(323) at 1", "Insert SimpleName: colName(322) into MethodInvocation(323) at 2", "Insert SimpleName: ExpressionProjector(330) into SimpleType: ExpressionProjector(331) at 0", "Insert MethodInvocation(525) into MethodInvocation(528) at 0", "Insert SimpleName: equals(526) into MethodInvocation(528) at 1", "Insert SimpleName: colName(527) into MethodInvocation(528) at 2", "Insert MethodInvocation(653) into MethodInvocation(656) at 0", "Insert SimpleName: equals(654) into MethodInvocation(656) at 1", "Insert SimpleName: colName(655) into MethodInvocation(656) at 2", "Insert MethodInvocation(804) into MethodInvocation(807) at 0", "Insert SimpleName: equals(805) into MethodInvocation(807) at 1", "Insert SimpleName: colName(806) into MethodInvocation(807) at 2", "Insert SimpleName: SchemaUtil(317) into MethodInvocation(320) at 0", "Insert SimpleName: normalizeIdentifier(318) into MethodInvocation(320) at 1", "Insert SimpleName: colName(319) into MethodInvocation(320) at 2", "Insert SimpleName: SchemaUtil(522) into MethodInvocation(525) at 0", "Insert SimpleName: normalizeIdentifier(523) into MethodInvocation(525) at 1", "Insert SimpleName: colName(524) into MethodInvocation(525) at 2", "Insert SimpleName: SchemaUtil(650) into MethodInvocation(653) at 0", "Insert SimpleName: normalizeIdentifier(651) into MethodInvocation(653) at 1", "Insert SimpleName: colName(652) into MethodInvocation(653) at 2", "Insert SimpleName: SchemaUtil(801) into MethodInvocation(804) at 0", "Insert SimpleName: normalizeIdentifier(802) into MethodInvocation(804) at 1", "Insert SimpleName: colName(803) into MethodInvocation(804) at 2", "Insert ConditionalExpression(1273) into VariableDeclarationFragment(1274) at 1", "Insert InfixExpression: !=(1255) into ConditionalExpression(1273) at 0", "Move MethodInvocation(1185) into ConditionalExpression(1273) at 1", "Insert ParenthesizedExpression(1272) into ConditionalExpression(1273) at 2", "Insert MethodInvocation(1253) into InfixExpression: !=(1255) at 0", "Insert NullLiteral(1254) into InfixExpression: !=(1255) at 1", "Insert ConditionalExpression(1271) into ParenthesizedExpression(1272) at 0", "Insert SimpleName: aliasedNode(1251) into MethodInvocation(1253) at 0", "Insert SimpleName: getAlias(1252) into MethodInvocation(1253) at 1", "Move InfixExpression: !=(1182) into ConditionalExpression(1271) at 0", "Insert MethodInvocation(1269) into ConditionalExpression(1271) at 1", "Insert QualifiedName: selectVisitor.isCaseSensitive(1270) into ConditionalExpression(1271) at 2", "Move SimpleName: SchemaUtil(1186) into MethodInvocation(1269) at 0", "Move SimpleName: isCaseSensitive(1187) into MethodInvocation(1269) at 1", "Insert MethodInvocation(1268) into MethodInvocation(1269) at 2", "Insert MethodInvocation(1266) into MethodInvocation(1268) at 0", "Update SimpleName: columnAlias(1188) to getAlias", "Move SimpleName: columnAlias(1188) into MethodInvocation(1268) at 1", "Insert SimpleName: aliasedNode(1264) into MethodInvocation(1266) at 0", "Insert SimpleName: getNode(1265) into MethodInvocation(1266) at 1", "Delete SimpleName: ref(309)", "Delete MethodInvocation(311)", "Delete SimpleName: projectedColumns(305)", "Delete SimpleName: add(306)", "Delete MethodInvocation(315)", "Delete BooleanLiteral: false(322)", "Delete ClassInstanceCreation(323)", "Delete MethodInvocation(324)", "Delete ExpressionStatement(325)", "Delete BooleanLiteral: false(509)", "Delete BooleanLiteral: false(618)", "Delete BooleanLiteral: false(751)", "Delete MethodInvocation(1189)", "Delete InfixExpression: ||(1190)", "Delete ParenthesizedExpression(1191)", "Delete InfixExpression: &&(1192)", "Delete ParenthesizedExpression(1193)", "Delete QualifiedName: selectVisitor.isCaseSensitive(1194)", "Delete InfixExpression: ||(1195)"]}}, {"StatementNormalizer_cluster": {"actions": [{"root": "INS ConditionalExpression to MethodInvocation at 4", "operations": ["INS MethodInvocation to ConditionalExpression at 0", "INS SimpleName: getFullName to MethodInvocation at 1", "INS ConditionalExpression to MethodInvocation at 4", "INS SimpleName: isCaseSensitive to MethodInvocation at 1", "INS CharacterLiteral: '\"' to InfixExpression: + at 2", "INS InfixExpression: + to ConditionalExpression at 1", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS CharacterLiteral: '\"' to InfixExpression: + at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2"]}]}}, {"StatementNormalizer_diff": {"operations": ["Insert ConditionalExpression(410) into MethodInvocation(411) at 4", "Insert MethodInvocation(400) into ConditionalExpression(410) at 0", "Insert InfixExpression: +(406) into ConditionalExpression(410) at 1", "Move MethodInvocation(400) into ConditionalExpression(410) at 2", "Insert SimpleName: node(398) into MethodInvocation(400) at 0", "Insert SimpleName: isCaseSensitive(399) into MethodInvocation(400) at 1", "Insert CharacterLiteral: '\"'(401) into InfixExpression: +(406) at 0", "Insert MethodInvocation(404) into InfixExpression: +(406) at 1", "Insert CharacterLiteral: '\"'(405) into InfixExpression: +(406) at 2", "Insert SimpleName: node(402) into MethodInvocation(404) at 0", "Insert SimpleName: getFullName(403) into MethodInvocation(404) at 1"]}}], "commit_stats": [{"total_files": 6, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}