{"application": "apache-opennlp", "csha": "2be8a41046e42fa1935c6889a7369dd517272606", "files": [{"BaseEntityLinker_cluster": {"actions": [{"root": "UPDATE from Map<String,List<EntityLinker>> to Map<String,EntityLinker>", "operations": ["UPD ParameterizedType: Map<String,List<EntityLinker>> from Map<String,List<EntityLinker>> to Map<String,EntityLinker>"]}, {"root": "INS SimpleName: link to MethodDeclaration at 3", "operations": ["INS SimpleName: link to MethodDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 11", "operations": ["INS Block to MethodDeclaration at 11"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: EntityLinker to MethodDeclaration at 2"]}, {"root": "UPDATE from getInstances to getInstance", "operations": ["UPD SimpleName: getInstances from getInstances to getInstance"]}, {"root": "MOVE from ParameterizedType: Map<String,List<EntityLinker>>", "operations": ["MOV SimpleType: EntityLinker to ParameterizedType: Map<String,List<EntityLinker>> at 2"]}, {"root": "UPDATE from linkerMap to singleLinkerMap", "operations": ["UPD SimpleName: linkerMap from linkerMap to singleLinkerMap", "UPD SimpleName: linkerMap from linkerMap to singleLinkerMap", "UPD SimpleName: linkerMap from linkerMap to singleLinkerMap", "UPD SimpleName: linkerMap from linkerMap to singleLinkerMap", "UPD SimpleName: linkerMap from linkerMap to singleLinkerMap"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 2"]}, {"root": "UPDATE from HashMap<String,List<EntityLinker>> to HashMap<String,EntityLinker>", "operations": ["UPD ParameterizedType: HashMap<String,List<EntityLinker>> from HashMap<String,List<EntityLinker>> to HashMap<String,EntityLinker>"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: EntityLinker to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from linkers to linker", "operations": ["UPD SimpleName: linkers from linkers to linker", "UPD SimpleName: linkers from linkers to linker", "UPD SimpleName: linkers from linkers to linker", "UPD SimpleName: linkers from linkers to linker", "UPD SimpleName: linkers from linkers to linker"]}, {"root": "MOVE from ParameterizedType: HashMap<String,List<EntityLinker>>", "operations": ["MOV SimpleType: EntityLinker to ParameterizedType: HashMap<String,List<EntityLinker>> at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getInstance to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: properties to MethodInvocation at 2", "INS SimpleName: linker to VariableDeclarationFragment at 0"]}, {"root": "INS NullLiteral to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from HashMap<String,List<EntityLinker>> to HashMap<>", "operations": ["UPD ParameterizedType: HashMap<String,List<EntityLinker>> from HashMap<String,List<EntityLinker>> to HashMap<>"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: EntityLinker to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "UPDATE from getLinkers to getLinker", "operations": ["UPD SimpleName: getLinkers from getLinkers to getLinker"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ParameterizedType: List<EntityLinker>", "operations": ["DEL ParameterizedType: List<EntityLinker>", "DEL SimpleName: List", "DEL SimpleType: List"]}, {"root": "DEL ParameterizedType: List<EntityLinker>", "operations": ["DEL SimpleName: List", "DEL ParameterizedType: List<EntityLinker>", "DEL SimpleType: List"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleName: String", "DEL SimpleType: String"]}, {"root": "DEL ParameterizedType: List<EntityLinker>", "operations": ["DEL SimpleType: List", "DEL SimpleName: List", "DEL SimpleType: EntityLinker", "DEL ParameterizedType: List<EntityLinker>", "DEL SimpleName: EntityLinker"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleName: Span", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: find", "DEL TextElement:   the EntityLinkerProperties file with the proper", "DEL SingleVariableDeclaration", "DEL SimpleName: tokens", "DEL SimpleType: LinkedSpan", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement: get linkers for", "DEL Modifier: protected", "DEL Block", "DEL SimpleName: LinkedSpan", "DEL SimpleName: sentences", "DEL SimpleName: linker", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL SimpleType: BaseLink", "DEL SimpleName: outLinkedSpans", "DEL SimpleType: String", "DEL SimpleName: linkers", "DEL Dimension", "DEL SimpleName: docText", "DEL VariableDeclarationStatement", "DEL SimpleName: entitytypes", "DEL SimpleName: properties", "DEL SimpleName: getAggregatedLinkedSpans", "DEL ArrayType: Span[]", "DEL SimpleType: List", "DEL SimpleName: Span", "DEL SimpleName: getInstances", "DEL Javadoc", "DEL ArrayType: String[]", "DEL TextElement:      the document text", "DEL TextElement:    the sentence spans that correspond to the doc text", "DEL VariableDeclarationFragment", "DEL SimpleType: Span", "DEL SimpleName: Span", "DEL TextElement:       the token spans that correspond to one of the sentences", "DEL SimpleName: properties", "DEL SimpleName: docText", "DEL TextElement:    the name spans that correspond to the tokens", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL Dimension", "DEL SimpleName: tokens", "DEL SimpleType: Span", "DEL TagElement: @param", "DEL SimpleName: BaseLink", "DEL SimpleName: entitytypes", "DEL ParameterizedType: List<EntityLinker>", "DEL Dimension", "DEL SimpleName: nameSpans", "DEL SimpleName: docText", "DEL SimpleName: tokens", "DEL SimpleName: nameSpans", "DEL SimpleType: EntityLinkerProperties", "DEL SimpleType: String", "DEL SimpleName: entitytypes", "DEL SimpleName: linker", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ArrayType: Span[]", "DEL Dimension", "DEL SimpleName: addAll", "DEL SimpleName: nameSpans", "DEL TagElement: @param", "DEL SimpleName: properties", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: List", "DEL SimpleName: ArrayList", "DEL SimpleName: linkers", "DEL SimpleName: sentences", "DEL TextElement:  the list of types (to corresponding properties keys) to", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL SimpleName: type", "DEL ArrayType: Span[]", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: EntityLinkerProperties", "DEL SimpleName: type", "DEL MethodInvocation", "DEL TextElement: configuration", "DEL SimpleName: String", "DEL SimpleName: String", "DEL TagElement: @param", "DEL SimpleName: sentences", "DEL SimpleType: ArrayList", "DEL SimpleName: String", "DEL SimpleType: Span", "DEL EnhancedForStatement"]}, {"root": "DEL Javadoc", "operations": ["DEL SimpleName: docText", "DEL TagElement: @param", "DEL TextElement: configuration", "DEL SimpleName: sentences", "DEL SimpleName: tokens", "DEL SimpleName: properties", "DEL SimpleName: nameSpans", "DEL TextElement:  the index to the sentence span that the tokens[]", "DEL TextElement:     the EntityLinkerProperties file with the proper", "DEL TagElement: @param", "DEL TextElement:         the token spans that correspond to one of the", "DEL TextElement:        the document text", "DEL TagElement: @param", "DEL TextElement: sentences", "DEL TagElement: @param", "DEL TagElement: @return", "DEL TagElement: @param", "DEL TextElement: Span[] corresponds to", "DEL TagElement: @param", "DEL SimpleName: sentenceIndex", "DEL Javadoc", "DEL TextElement:      the sentence spans that correspond to the doc text", "DEL TextElement:      the name spans that correspond to the tokens"]}, {"root": "DEL SimpleName: getLinkedSpans", "operations": ["DEL SimpleName: getLinkedSpans"]}, {"root": "DEL Block", "operations": ["DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: linkers", "DEL MethodInvocation", "DEL SimpleName: getInstances", "DEL EnhancedForStatement", "DEL SimpleName: linker", "DEL Assignment: =", "DEL SimpleName: properties", "DEL SimpleName: linkers", "DEL ExpressionStatement"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: BaseLink", "DEL SimpleName: linkers", "DEL SimpleName: multiType", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL SimpleName: linkers", "DEL SimpleName: isMultitype", "DEL SimpleName: find", "DEL SimpleName: getType", "DEL SimpleName: LinkedSpan", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: BaseLink", "DEL SimpleName: EntityLinker", "DEL SimpleName: linker", "DEL SimpleName: properties", "DEL SimpleName: EntityLinker", "DEL ArrayAccess", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleType: ArrayList", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL VariableDeclarationStatement", "DEL SimpleName: getInstances", "DEL SimpleType: List", "DEL SimpleName: linker", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL VariableDeclarationFragment", "DEL SimpleName: List", "DEL SimpleType: ArrayList", "DEL ClassInstanceCreation", "DEL SimpleName: nameSpans", "DEL SimpleName: tokens", "DEL SimpleType: BaseLink", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL ReturnStatement", "DEL SimpleType: EntityLinker", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL SimpleName: nameSpans", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: outLinkedSpans", "DEL SimpleType: LinkedSpan", "DEL EnhancedForStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: LinkedSpan", "DEL SimpleName: docText", "DEL SimpleName: sentenceIndex", "DEL SimpleType: LinkedSpan", "DEL IfStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: linkers", "DEL Block", "DEL ParameterizedType: List<EntityLinker>", "DEL SimpleType: Span", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL EnhancedForStatement", "DEL Assignment: =", "DEL SimpleName: s", "DEL Block", "DEL SimpleName: nameSpans", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: nameSpans", "DEL PrimitiveType: boolean", "DEL SimpleName: outLinkedSpans", "DEL SimpleType: EntityLinker", "DEL VariableDeclarationFragment", "DEL SimpleName: outLinkedSpans", "DEL SimpleName: ArrayList", "DEL SimpleName: Span", "DEL VariableDeclarationStatement", "DEL SimpleName: sentences", "DEL SimpleName: addAll", "DEL SimpleName: multiType", "DEL SimpleName: BaseLink"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: tokens", "DEL PrimitiveType: boolean", "DEL SimpleName: linker", "DEL SimpleName: Span", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Block", "DEL SimpleName: EntityLinker", "DEL TagElement: @param", "DEL SimpleName: tokens", "DEL SimpleName: linker", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleName: properties", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL MethodInvocation", "DEL SimpleName: s", "DEL SimpleName: BaseLink", "DEL SimpleName: ArrayList", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: ArrayList", "DEL SimpleName: outLinkedSpans", "DEL SimpleType: EntityLinkerProperties", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: nameSpans", "DEL SimpleType: LinkedSpan", "DEL SimpleType: Span", "DEL SimpleType: List", "DEL SimpleType: String", "DEL SimpleType: LinkedSpan", "DEL SimpleName: linkers", "DEL SimpleName: LinkedSpan", "DEL SimpleType: BaseLink", "DEL SimpleName: EntityLinker", "DEL SimpleName: properties", "DEL ExpressionStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: properties", "DEL SimpleName: sentences", "DEL SimpleName: LinkedSpan", "DEL TextElement:     the document text", "DEL SimpleName: outLinkedSpans", "DEL SimpleName: docText", "DEL Block", "DEL SimpleType: Span", "DEL SimpleName: sentences", "DEL IfStatement", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: ArrayList", "DEL VariableDeclarationFragment", "DEL SimpleName: docText", "DEL SimpleName: LinkedSpan", "DEL SimpleName: getLinkedSpans", "DEL NumberLiteral: 0", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: tokens", "DEL ArrayType: Span[]", "DEL TagElement: @param", "DEL EnhancedForStatement", "DEL Javadoc", "DEL SimpleName: nameSpans", "DEL SingleVariableDeclaration", "DEL SimpleName: docText", "DEL ParameterizedType: List<EntityLinker>", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: BaseLink", "DEL SimpleType: EntityLinker", "DEL SimpleName: addAll", "DEL TextElement:      the token spans that correspond to one of the sentences", "DEL TextElement:  the EntityLinkerProperties file with the proper", "DEL SimpleName: find", "DEL SimpleName: getType", "DEL SimpleName: nameSpans", "DEL SimpleName: getType", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL SimpleName: BaseLink", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: nameSpans", "DEL InfixExpression: ==", "DEL SimpleName: nameSpans", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: linkers", "DEL SimpleName: nameSpans", "DEL SimpleType: LinkedSpan", "DEL SimpleType: Span", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: nameSpans", "DEL SimpleName: isMultitype", "DEL TextElement: configuration", "DEL Assignment: =", "DEL SimpleName: linker", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: EntityLinkerProperties", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL TextElement:   the name spans that correspond to the tokens", "DEL SimpleName: Span", "DEL SimpleType: ArrayList", "DEL Dimension", "DEL SimpleName: find", "DEL SimpleName: getInstances", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL SimpleName: Span", "DEL InfixExpression: ||", "DEL SimpleName: sentences", "DEL ExpressionStatement", "DEL SimpleName: s", "DEL SimpleName: Span", "DEL EnhancedForStatement", "DEL SimpleName: docText", "DEL InfixExpression: ==", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: Span", "DEL SimpleName: s", "DEL SimpleName: outLinkedSpans", "DEL NullLiteral", "DEL SimpleName: sentences", "DEL TagElement: @param", "DEL SimpleType: EntityLinker", "DEL SimpleName: outLinkedSpans", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL SimpleType: ArrayList", "DEL ExpressionStatement", "DEL SimpleName: linkers", "DEL ArrayType: Span[]", "DEL SimpleName: linker", "DEL SimpleName: addAll", "DEL SimpleName: linkers", "DEL SimpleName: properties", "DEL EnhancedForStatement", "DEL Block", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL EnhancedForStatement", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: nameSpans", "DEL SimpleType: Span", "DEL QualifiedName: nameSpans.length", "DEL TextElement:   the sentence spans that correspond to the doc text", "DEL ArrayType: Span[]", "DEL Dimension", "DEL SimpleName: outLinkedSpans", "DEL SimpleName: getInstances", "DEL SimpleName: multiType", "DEL SingleVariableDeclaration", "DEL SimpleName: tokens", "DEL MethodInvocation", "DEL SimpleType: BaseLink", "DEL SimpleName: nameSpans", "DEL SimpleName: BaseLink", "DEL SimpleType: EntityLinker", "DEL SimpleName: ArrayList", "DEL MethodInvocation", "DEL SimpleName: EntityLinker", "DEL SimpleType: Span", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: linkers", "DEL SimpleName: multiType", "DEL Modifier: public", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: isMultitype", "DEL SimpleName: String", "DEL SimpleName: List", "DEL ParameterizedType: List<EntityLinker>", "DEL EnhancedForStatement", "DEL SimpleName: tokens", "DEL SimpleName: EntityLinkerProperties", "DEL SimpleType: BaseLink", "DEL SingleVariableDeclaration", "DEL SimpleName: Span", "DEL SimpleName: LinkedSpan", "DEL SimpleName: EntityLinker", "DEL VariableDeclarationFragment", "DEL SimpleName: getLinkedSpans", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleName: nameSpans", "DEL TagElement: @param", "DEL Block", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: getInstances", "DEL SimpleName: linker", "DEL SimpleName: getType", "DEL SimpleName: multiType", "DEL SimpleName: linkers", "DEL InfixExpression: ||", "DEL SimpleName: nameSpans", "DEL NumberLiteral: 0", "DEL SimpleName: tokens", "DEL SimpleName: properties", "DEL IfStatement", "DEL TagElement: @return", "DEL SimpleType: LinkedSpan", "DEL TextElement: sentences", "DEL QualifiedName: nameSpans.length", "DEL SimpleName: docText", "DEL SimpleName: find", "DEL ArrayType: Span[]", "DEL SimpleName: getType", "DEL TagElement: @param", "DEL SimpleName: s", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Span", "DEL MethodDeclaration", "DEL SimpleName: sentenceIndex", "DEL SimpleName: EntityLinker", "DEL SimpleName: outLinkedSpans", "DEL SimpleType: String", "DEL SimpleName: BaseLink", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: tokens", "DEL SimpleName: sentences", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL TextElement:     the EntityLinkerProperties file with the proper", "DEL SimpleName: LinkedSpan", "DEL SimpleType: ArrayList", "DEL SimpleType: LinkedSpan", "DEL ExpressionStatement", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: ArrayList", "DEL SimpleType: LinkedSpan", "DEL SimpleType: EntityLinkerProperties", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: Span", "DEL SimpleName: sentences", "DEL SimpleName: outLinkedSpans", "DEL Modifier: public", "DEL InfixExpression: ==", "DEL TextElement:        the document text", "DEL SimpleType: EntityLinker", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL SimpleName: Span", "DEL SimpleName: addAll", "DEL SimpleName: properties", "DEL MethodInvocation", "DEL SimpleName: linker", "DEL SimpleName: nameSpans", "DEL TextElement: Span[] corresponds to", "DEL TextElement: configuration", "DEL Dimension", "DEL TextElement:      the sentence spans that correspond to the doc text", "DEL ArrayAccess", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL Block", "DEL SimpleType: ArrayList", "DEL SimpleType: ArrayList", "DEL SimpleName: nameSpans", "DEL SimpleName: linkers", "DEL SimpleName: outLinkedSpans", "DEL SimpleName: LinkedSpan", "DEL Block", "DEL SimpleName: sentences", "DEL SimpleType: EntityLinker", "DEL SimpleName: nameSpans", "DEL SimpleType: List", "DEL ArrayType: Span[]", "DEL SimpleType: BaseLink", "DEL ExpressionStatement", "DEL SimpleName: nameSpans", "DEL SimpleName: docText", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleName: nameSpans", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL TextElement:         the token strings that correspond to one of the", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: tokens", "DEL SimpleType: Span", "DEL VariableDeclarationStatement", "DEL TextElement:      the name spans that correspond to the tokens", "DEL SimpleName: docText", "DEL SimpleName: multiType", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleName: nameSpans", "DEL SimpleType: String", "DEL SimpleName: EntityLinker", "DEL IfStatement", "DEL SimpleName: BaseLink", "DEL SimpleName: properties", "DEL SimpleType: BaseLink", "DEL VariableDeclarationFragment", "DEL Block", "DEL Assignment: =", "DEL SimpleType: Span", "DEL SimpleType: Span", "DEL SimpleName: getInstances", "DEL EnhancedForStatement", "DEL SimpleName: BaseLink", "DEL SimpleName: outLinkedSpans", "DEL SingleVariableDeclaration", "DEL SimpleName: linker", "DEL SimpleType: Span", "DEL MethodInvocation", "DEL TextElement:  the index to the sentence span that the tokens[]", "DEL Dimension", "DEL NumberLiteral: 0", "DEL SimpleName: linkers", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: sentences", "DEL SimpleName: linkers", "DEL VariableDeclarationStatement", "DEL SimpleName: s", "DEL SimpleType: EntityLinker", "DEL ParameterizedType: ArrayList<LinkedSpan<BaseLink>>", "DEL ArrayType: String[]", "DEL Block", "DEL SimpleName: linkers", "DEL SimpleName: properties", "DEL MethodInvocation", "DEL SimpleName: nameSpans", "DEL SimpleName: ArrayList", "DEL ReturnStatement", "DEL SimpleName: find", "DEL SimpleName: outLinkedSpans", "DEL SingleVariableDeclaration", "DEL SimpleName: docText", "DEL InfixExpression: ==", "DEL SimpleName: linker", "DEL SimpleName: s", "DEL SimpleName: addAll"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL ForStatement", "DEL PostfixExpression: ++", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: Span", "DEL PrimitiveType: int", "DEL SimpleName: multitype", "DEL SimpleName: i", "DEL BooleanLiteral: false", "DEL Assignment: =", "DEL SimpleType: String", "DEL PrimitiveType: boolean", "DEL SimpleName: isMultitype", "DEL SimpleName: type", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL NumberLiteral: 0", "DEL VariableDeclarationExpression", "DEL Block", "DEL ReturnStatement", "DEL Modifier: private", "DEL SimpleName: i", "DEL Dimension", "DEL BreakStatement", "DEL ArrayType: Span[]", "DEL MethodInvocation", "DEL SimpleName: String", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL QualifiedName: spans.length", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: multitype", "DEL MethodDeclaration", "DEL SimpleName: spans", "DEL SimpleName: i", "DEL SimpleType: Span", "DEL SimpleName: spans", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: spans", "DEL TextElement: checks to see if a list of spans contains more than one type", "DEL Javadoc", "DEL InfixExpression: <", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL SimpleName: type", "DEL SimpleName: i", "DEL SimpleName: equals", "DEL SimpleName: multitype", "DEL SimpleName: getType", "DEL SimpleName: getType", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL SimpleName: spans", "DEL ArrayAccess", "DEL Block"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @param", "DEL SimpleName: type", "DEL Javadoc", "DEL SimpleName: properties", "DEL TextElement: lazily instantiated", "DEL TextElement:  the entity liker properties", "DEL TextElement:        the entitytype", "DEL TextElement: returns instances of entitylinkers, and caches them in a map so they are", "DEL TagElement: @param", "DEL TagElement", "DEL TagElement: @return"]}, {"root": "DEL ParameterizedType: List<EntityLinker>", "operations": ["DEL SimpleName: List", "DEL SimpleType: EntityLinker", "DEL SimpleName: EntityLinker", "DEL SimpleType: List", "DEL ParameterizedType: List<EntityLinker>"]}, {"root": "DEL ParameterizedType: List<EntityLinker>", "operations": ["DEL SimpleName: EntityLinker", "DEL ParameterizedType: List<EntityLinker>", "DEL SimpleType: List", "DEL SimpleType: EntityLinker", "DEL SimpleName: List"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: ArrayList", "DEL SimpleType: ArrayList", "DEL SimpleType: EntityLinker", "DEL SimpleName: EntityLinker", "DEL ParameterizedType: ArrayList<EntityLinker>", "DEL ClassInstanceCreation"]}]}}, {"BaseEntityLinker_diff": {"operations": ["Update ParameterizedType: Map<String,List<EntityLinker>>(36) to Map<String,EntityLinker>", "Insert SimpleName: link(67) into MethodDeclaration(161) at 2", "Insert Block(160) into MethodDeclaration(161) at 9", "Move SimpleType: EntityLinker(165) into MethodDeclaration(211) at 2", "Update SimpleName: getInstances(826) to getInstance", "Move SimpleType: EntityLinker(34) into ParameterizedType: Map<String,EntityLinker>(31) at 2", "Update SimpleName: linkerMap(37) to singleLinkerMap", "Move VariableDeclarationStatement(156) into Block(160) at 0", "Move IfStatement(290) into Block(160) at 1", "Move EnhancedForStatement(341) into Block(160) at 2", "Move ReturnStatement(195) into Block(160) at 3", "Update ParameterizedType: HashMap<String,List<EntityLinker>>(47) to HashMap<String,EntityLinker>", "Move Block(338) into EnhancedForStatement(157) at 2", "Move SimpleType: EntityLinker(175) into VariableDeclarationStatement(179) at 0", "Update SimpleName: linkers(877) to linker", "Move SimpleType: EntityLinker(45) into ParameterizedType: HashMap<String,EntityLinker>(39) at 2", "Update SimpleName: linkerMap(57) to singleLinkerMap", "Insert VariableDeclarationStatement(143) into Block(156) at 0", "Update SimpleName: linkers(840) to linker", "Insert NullLiteral(177) into VariableDeclarationFragment(178) at 1", "Update SimpleName: linkerMap(849) to singleLinkerMap", "Update ParameterizedType: HashMap<String,List<EntityLinker>>(67) to HashMap<>", "Move SimpleType: EntityLinker(322) into VariableDeclarationStatement(143) at 0", "Insert VariableDeclarationFragment(142) into VariableDeclarationStatement(143) at 1", "Insert SimpleName: linker(135) into VariableDeclarationFragment(142) at 0", "Insert MethodInvocation(141) into VariableDeclarationFragment(142) at 1", "Update SimpleName: linkers(853) to linker", "Update SimpleName: linkers(861) to linker", "Update SimpleName: linkerMap(869) to singleLinkerMap", "Update SimpleName: linkers(872) to linker", "Insert SimpleName: getInstance(136) into MethodInvocation(141) at 0", "Move MethodInvocation(316) into MethodInvocation(141) at 1", "Insert SimpleName: properties(140) into MethodInvocation(141) at 2", "Update SimpleName: linkerMap(854) to singleLinkerMap", "Update SimpleName: getLinkers(863) to getLinker", "Delete QualifiedName: java.util.List(6)", "Delete ImportDeclaration(7)", "Delete SimpleName: List(31)", "Delete SimpleType: List(32)", "Delete ParameterizedType: List<EntityLinker>(35)", "Delete SimpleName: List(42)", "Delete SimpleType: List(43)", "Delete ParameterizedType: List<EntityLinker>(46)", "Delete SimpleName: String(60)", "Delete SimpleType: String(61)", "Delete SimpleName: List(62)", "Delete SimpleType: List(63)", "Delete SimpleName: EntityLinker(64)", "Delete SimpleType: EntityLinker(65)", "Delete ParameterizedType: List<EntityLinker>(66)", "Delete SimpleName: entitytypes(73)", "Delete TextElement:  the list of types (to corresponding properties keys) to(74)", "Delete TextElement: get linkers for(75)", "Delete TagElement: @param(76)", "Delete SimpleName: docText(77)", "Delete TextElement:      the document text(78)", "Delete TagElement: @param(79)", "Delete SimpleName: sentences(80)", "Delete TextElement:    the sentence spans that correspond to the doc text(81)", "Delete TagElement: @param(82)", "Delete SimpleName: tokens(83)", "Delete TextElement:       the token spans that correspond to one of the sentences(84)", "Delete TagElement: @param(85)", "Delete SimpleName: nameSpans(86)", "Delete TextElement:    the name spans that correspond to the tokens(87)", "Delete TagElement: @param(88)", "Delete SimpleName: properties(89)", "Delete TextElement:   the EntityLinkerProperties file with the proper(90)", "Delete TextElement: configuration(91)", "Delete TagElement: @param(92)", "Delete TagElement: @return(93)", "Delete Javadoc(94)", "Delete Modifier: protected(95)", "Delete SimpleName: ArrayList(96)", "Delete SimpleType: ArrayList(97)", "Delete SimpleName: LinkedSpan(98)", "Delete SimpleType: LinkedSpan(99)", "Delete SimpleName: BaseLink(100)", "Delete SimpleType: BaseLink(101)", "Delete ParameterizedType: LinkedSpan<BaseLink>(102)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(103)", "Delete SimpleName: getAggregatedLinkedSpans(104)", "Delete SimpleName: String(105)", "Delete SimpleType: String(106)", "Delete Dimension(107)", "Delete ArrayType: String[](108)", "Delete SimpleName: entitytypes(109)", "Delete SingleVariableDeclaration(110)", "Delete SimpleName: String(111)", "Delete SimpleType: String(112)", "Delete SimpleName: docText(113)", "Delete SingleVariableDeclaration(114)", "Delete SimpleName: Span(115)", "Delete SimpleType: Span(116)", "Delete Dimension(117)", "Delete ArrayType: Span[](118)", "Delete SimpleName: sentences(119)", "Delete SingleVariableDeclaration(120)", "Delete SimpleName: Span(121)", "Delete SimpleType: Span(122)", "Delete Dimension(123)", "Delete ArrayType: Span[](124)", "Delete SimpleName: tokens(125)", "Delete SingleVariableDeclaration(126)", "Delete SimpleName: Span(127)", "Delete SimpleType: Span(128)", "Delete Dimension(129)", "Delete ArrayType: Span[](130)", "Delete SimpleName: nameSpans(131)", "Delete SingleVariableDeclaration(132)", "Delete SimpleName: EntityLinkerProperties(133)", "Delete SimpleType: EntityLinkerProperties(134)", "Delete SimpleName: properties(135)", "Delete SingleVariableDeclaration(136)", "Delete SimpleName: String(157)", "Delete SimpleType: String(158)", "Delete SimpleName: type(159)", "Delete SingleVariableDeclaration(160)", "Delete SimpleName: entitytypes(161)", "Delete SimpleName: List(162)", "Delete SimpleType: List(163)", "Delete ParameterizedType: List<EntityLinker>(166)", "Delete SimpleName: linkers(167)", "Delete SimpleName: getInstances(168)", "Delete SimpleName: type(169)", "Delete SimpleName: properties(170)", "Delete MethodInvocation(171)", "Delete VariableDeclarationFragment(172)", "Delete VariableDeclarationStatement(173)", "Delete SimpleName: linker(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: linkers(178)", "Delete SimpleName: outLinkedSpans(179)", "Delete SimpleName: addAll(180)", "Delete SimpleName: linker(181)", "Delete SimpleName: find(182)", "Delete SimpleName: docText(183)", "Delete SimpleName: sentences(184)", "Delete SimpleName: tokens(185)", "Delete SimpleName: nameSpans(186)", "Delete MethodInvocation(187)", "Delete MethodInvocation(188)", "Delete ExpressionStatement(189)", "Delete Block(190)", "Delete EnhancedForStatement(191)", "Delete Block(192)", "Delete EnhancedForStatement(193)", "Delete Block(196)", "Delete MethodDeclaration(197)", "Delete SimpleName: docText(198)", "Delete TextElement:        the document text(199)", "Delete TagElement: @param(200)", "Delete SimpleName: sentences(201)", "Delete TextElement:      the sentence spans that correspond to the doc text(202)", "Delete TagElement: @param(203)", "Delete SimpleName: tokens(204)", "Delete TextElement:         the token spans that correspond to one of the(205)", "Delete TextElement: sentences(206)", "Delete TagElement: @param(207)", "Delete SimpleName: nameSpans(208)", "Delete TextElement:      the name spans that correspond to the tokens(209)", "Delete TagElement: @param(210)", "Delete SimpleName: sentenceIndex(211)", "Delete TextElement:  the index to the sentence span that the tokens[](212)", "Delete TextElement: Span[] corresponds to(213)", "Delete TagElement: @param(214)", "Delete SimpleName: properties(215)", "Delete TextElement:     the EntityLinkerProperties file with the proper(216)", "Delete TextElement: configuration(217)", "Delete TagElement: @param(218)", "Delete TagElement: @return(219)", "Delete Javadoc(220)", "Delete SimpleName: getLinkedSpans(230)", "Delete SimpleName: linkers(312)", "Delete SimpleName: getInstances(313)", "Delete SimpleName: properties(317)", "Delete MethodInvocation(318)", "Delete Assignment: =(319)", "Delete ExpressionStatement(320)", "Delete SimpleName: linker(323)", "Delete SingleVariableDeclaration(324)", "Delete SimpleName: linkers(325)", "Delete EnhancedForStatement(339)", "Delete Block(340)", "Delete SimpleName: ArrayList(260)", "Delete SimpleType: ArrayList(261)", "Delete SimpleName: LinkedSpan(262)", "Delete SimpleType: LinkedSpan(263)", "Delete SimpleName: BaseLink(264)", "Delete SimpleType: BaseLink(265)", "Delete ParameterizedType: LinkedSpan<BaseLink>(266)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(267)", "Delete SimpleName: outLinkedSpans(268)", "Delete SimpleName: ArrayList(269)", "Delete SimpleType: ArrayList(270)", "Delete SimpleName: LinkedSpan(271)", "Delete SimpleType: LinkedSpan(272)", "Delete SimpleName: BaseLink(273)", "Delete SimpleType: BaseLink(274)", "Delete ParameterizedType: LinkedSpan<BaseLink>(275)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(276)", "Delete ClassInstanceCreation(277)", "Delete VariableDeclarationFragment(278)", "Delete VariableDeclarationStatement(279)", "Delete SimpleName: List(291)", "Delete SimpleType: List(292)", "Delete SimpleName: EntityLinker(293)", "Delete SimpleType: EntityLinker(294)", "Delete ParameterizedType: List<EntityLinker>(295)", "Delete SimpleName: linkers(296)", "Delete VariableDeclarationFragment(297)", "Delete VariableDeclarationStatement(298)", "Delete PrimitiveType: boolean(299)", "Delete SimpleName: multiType(300)", "Delete SimpleName: isMultitype(301)", "Delete SimpleName: nameSpans(302)", "Delete MethodInvocation(303)", "Delete VariableDeclarationFragment(304)", "Delete VariableDeclarationStatement(305)", "Delete SimpleName: multiType(306)", "Delete Block(342)", "Delete SimpleName: linkers(343)", "Delete SimpleName: getInstances(344)", "Delete SimpleName: nameSpans(345)", "Delete NumberLiteral: 0(346)", "Delete ArrayAccess(347)", "Delete SimpleName: getType(348)", "Delete MethodInvocation(349)", "Delete SimpleName: properties(350)", "Delete MethodInvocation(351)", "Delete Assignment: =(352)", "Delete ExpressionStatement(353)", "Delete SimpleName: Span(354)", "Delete SimpleType: Span(355)", "Delete SimpleName: s(356)", "Delete SingleVariableDeclaration(357)", "Delete SimpleName: nameSpans(358)", "Delete SimpleName: EntityLinker(359)", "Delete SimpleType: EntityLinker(360)", "Delete SimpleName: linker(361)", "Delete SingleVariableDeclaration(362)", "Delete SimpleName: linkers(363)", "Delete SimpleName: outLinkedSpans(364)", "Delete SimpleName: addAll(365)", "Delete SimpleName: linker(366)", "Delete SimpleName: find(367)", "Delete SimpleName: docText(368)", "Delete SimpleName: sentences(369)", "Delete SimpleName: tokens(370)", "Delete SimpleName: nameSpans(371)", "Delete SimpleName: sentenceIndex(372)", "Delete MethodInvocation(373)", "Delete MethodInvocation(374)", "Delete ExpressionStatement(375)", "Delete Block(376)", "Delete EnhancedForStatement(377)", "Delete Block(378)", "Delete EnhancedForStatement(379)", "Delete Block(380)", "Delete IfStatement(381)", "Delete SimpleName: outLinkedSpans(382)", "Delete ReturnStatement(383)", "Delete Block(384)", "Delete SimpleName: docText(386)", "Delete TextElement:     the document text(387)", "Delete TagElement: @param(388)", "Delete SimpleName: sentences(389)", "Delete TextElement:   the sentence spans that correspond to the doc text(390)", "Delete TagElement: @param(391)", "Delete SimpleName: tokens(392)", "Delete TextElement:      the token spans that correspond to one of the sentences(393)", "Delete TagElement: @param(394)", "Delete SimpleName: nameSpans(395)", "Delete TextElement:   the name spans that correspond to the tokens(396)", "Delete TagElement: @param(397)", "Delete SimpleName: properties(398)", "Delete TextElement:  the EntityLinkerProperties file with the proper(399)", "Delete TextElement: configuration(400)", "Delete TagElement: @param(401)", "Delete TagElement: @return(402)", "Delete Javadoc(403)", "Delete Modifier: public(404)", "Delete SimpleName: ArrayList(405)", "Delete SimpleType: ArrayList(406)", "Delete SimpleName: LinkedSpan(407)", "Delete SimpleType: LinkedSpan(408)", "Delete SimpleName: BaseLink(409)", "Delete SimpleType: BaseLink(410)", "Delete ParameterizedType: LinkedSpan<BaseLink>(411)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(412)", "Delete SimpleName: getLinkedSpans(413)", "Delete SimpleName: String(414)", "Delete SimpleType: String(415)", "Delete SimpleName: docText(416)", "Delete SingleVariableDeclaration(417)", "Delete SimpleName: Span(418)", "Delete SimpleType: Span(419)", "Delete Dimension(420)", "Delete ArrayType: Span[](421)", "Delete SimpleName: sentences(422)", "Delete SingleVariableDeclaration(423)", "Delete SimpleName: Span(424)", "Delete SimpleType: Span(425)", "Delete Dimension(426)", "Delete ArrayType: Span[](427)", "Delete SimpleName: tokens(428)", "Delete SingleVariableDeclaration(429)", "Delete SimpleName: Span(430)", "Delete SimpleType: Span(431)", "Delete Dimension(432)", "Delete ArrayType: Span[](433)", "Delete SimpleName: nameSpans(434)", "Delete SingleVariableDeclaration(435)", "Delete SimpleName: EntityLinkerProperties(436)", "Delete SimpleType: EntityLinkerProperties(437)", "Delete SimpleName: properties(438)", "Delete SingleVariableDeclaration(439)", "Delete SimpleName: ArrayList(440)", "Delete SimpleType: ArrayList(441)", "Delete SimpleName: LinkedSpan(442)", "Delete SimpleType: LinkedSpan(443)", "Delete SimpleName: BaseLink(444)", "Delete SimpleType: BaseLink(445)", "Delete ParameterizedType: LinkedSpan<BaseLink>(446)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(447)", "Delete SimpleName: outLinkedSpans(448)", "Delete SimpleName: ArrayList(449)", "Delete SimpleType: ArrayList(450)", "Delete SimpleName: LinkedSpan(451)", "Delete SimpleType: LinkedSpan(452)", "Delete SimpleName: BaseLink(453)", "Delete SimpleType: BaseLink(454)", "Delete ParameterizedType: LinkedSpan<BaseLink>(455)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(456)", "Delete ClassInstanceCreation(457)", "Delete VariableDeclarationFragment(458)", "Delete VariableDeclarationStatement(459)", "Delete QualifiedName: nameSpans.length(460)", "Delete NumberLiteral: 0(461)", "Delete InfixExpression: ==(462)", "Delete SimpleName: nameSpans(463)", "Delete NullLiteral(464)", "Delete InfixExpression: ==(465)", "Delete InfixExpression: ||(466)", "Delete SimpleName: outLinkedSpans(467)", "Delete ReturnStatement(468)", "Delete Block(469)", "Delete IfStatement(470)", "Delete SimpleName: List(471)", "Delete SimpleType: List(472)", "Delete SimpleName: EntityLinker(473)", "Delete SimpleType: EntityLinker(474)", "Delete ParameterizedType: List<EntityLinker>(475)", "Delete SimpleName: linkers(476)", "Delete VariableDeclarationFragment(477)", "Delete VariableDeclarationStatement(478)", "Delete PrimitiveType: boolean(479)", "Delete SimpleName: multiType(480)", "Delete SimpleName: isMultitype(481)", "Delete SimpleName: nameSpans(482)", "Delete MethodInvocation(483)", "Delete VariableDeclarationFragment(484)", "Delete VariableDeclarationStatement(485)", "Delete SimpleName: multiType(486)", "Delete SimpleName: Span(487)", "Delete SimpleType: Span(488)", "Delete SimpleName: s(489)", "Delete SingleVariableDeclaration(490)", "Delete SimpleName: nameSpans(491)", "Delete SimpleName: linkers(492)", "Delete SimpleName: getInstances(493)", "Delete SimpleName: s(494)", "Delete SimpleName: getType(495)", "Delete MethodInvocation(496)", "Delete SimpleName: properties(497)", "Delete MethodInvocation(498)", "Delete Assignment: =(499)", "Delete ExpressionStatement(500)", "Delete SimpleName: EntityLinker(501)", "Delete SimpleType: EntityLinker(502)", "Delete SimpleName: linker(503)", "Delete SingleVariableDeclaration(504)", "Delete SimpleName: linkers(505)", "Delete SimpleName: outLinkedSpans(506)", "Delete SimpleName: addAll(507)", "Delete SimpleName: linker(508)", "Delete SimpleName: find(509)", "Delete SimpleName: docText(510)", "Delete SimpleName: sentences(511)", "Delete SimpleName: tokens(512)", "Delete SimpleName: nameSpans(513)", "Delete MethodInvocation(514)", "Delete MethodInvocation(515)", "Delete ExpressionStatement(516)", "Delete Block(517)", "Delete EnhancedForStatement(518)", "Delete Block(519)", "Delete EnhancedForStatement(520)", "Delete Block(521)", "Delete SimpleName: linkers(522)", "Delete SimpleName: getInstances(523)", "Delete SimpleName: nameSpans(524)", "Delete NumberLiteral: 0(525)", "Delete ArrayAccess(526)", "Delete SimpleName: getType(527)", "Delete MethodInvocation(528)", "Delete SimpleName: properties(529)", "Delete MethodInvocation(530)", "Delete Assignment: =(531)", "Delete ExpressionStatement(532)", "Delete SimpleName: Span(533)", "Delete SimpleType: Span(534)", "Delete SimpleName: s(535)", "Delete SingleVariableDeclaration(536)", "Delete SimpleName: nameSpans(537)", "Delete SimpleName: EntityLinker(538)", "Delete SimpleType: EntityLinker(539)", "Delete SimpleName: linker(540)", "Delete SingleVariableDeclaration(541)", "Delete SimpleName: linkers(542)", "Delete SimpleName: outLinkedSpans(543)", "Delete SimpleName: addAll(544)", "Delete SimpleName: linker(545)", "Delete SimpleName: find(546)", "Delete SimpleName: docText(547)", "Delete SimpleName: sentences(548)", "Delete SimpleName: tokens(549)", "Delete SimpleName: nameSpans(550)", "Delete MethodInvocation(551)", "Delete MethodInvocation(552)", "Delete ExpressionStatement(553)", "Delete Block(554)", "Delete EnhancedForStatement(555)", "Delete Block(556)", "Delete EnhancedForStatement(557)", "Delete Block(558)", "Delete IfStatement(559)", "Delete SimpleName: outLinkedSpans(560)", "Delete ReturnStatement(561)", "Delete Block(562)", "Delete MethodDeclaration(563)", "Delete SimpleName: docText(564)", "Delete TextElement:        the document text(565)", "Delete TagElement: @param(566)", "Delete SimpleName: sentences(567)", "Delete TextElement:      the sentence spans that correspond to the doc text(568)", "Delete TagElement: @param(569)", "Delete SimpleName: tokens(570)", "Delete TextElement:         the token strings that correspond to one of the(571)", "Delete TextElement: sentences(572)", "Delete TagElement: @param(573)", "Delete SimpleName: nameSpans(574)", "Delete TextElement:      the name spans that correspond to the tokens(575)", "Delete TagElement: @param(576)", "Delete SimpleName: sentenceIndex(577)", "Delete TextElement:  the index to the sentence span that the tokens[](578)", "Delete TextElement: Span[] corresponds to(579)", "Delete TagElement: @param(580)", "Delete SimpleName: properties(581)", "Delete TextElement:     the EntityLinkerProperties file with the proper(582)", "Delete TextElement: configuration(583)", "Delete TagElement: @param(584)", "Delete TagElement: @return(585)", "Delete Javadoc(586)", "Delete Modifier: public(587)", "Delete SimpleName: ArrayList(588)", "Delete SimpleType: ArrayList(589)", "Delete SimpleName: LinkedSpan(590)", "Delete SimpleType: LinkedSpan(591)", "Delete SimpleName: BaseLink(592)", "Delete SimpleType: BaseLink(593)", "Delete ParameterizedType: LinkedSpan<BaseLink>(594)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(595)", "Delete SimpleName: getLinkedSpans(596)", "Delete SimpleName: String(597)", "Delete SimpleType: String(598)", "Delete SimpleName: docText(599)", "Delete SingleVariableDeclaration(600)", "Delete SimpleName: Span(601)", "Delete SimpleType: Span(602)", "Delete Dimension(603)", "Delete ArrayType: Span[](604)", "Delete SimpleName: sentences(605)", "Delete SingleVariableDeclaration(606)", "Delete SimpleName: String(607)", "Delete SimpleType: String(608)", "Delete Dimension(609)", "Delete ArrayType: String[](610)", "Delete SimpleName: tokens(611)", "Delete SingleVariableDeclaration(612)", "Delete SimpleName: Span(613)", "Delete SimpleType: Span(614)", "Delete Dimension(615)", "Delete ArrayType: Span[](616)", "Delete SimpleName: nameSpans(617)", "Delete SingleVariableDeclaration(618)", "Delete SimpleName: EntityLinkerProperties(619)", "Delete SimpleType: EntityLinkerProperties(620)", "Delete SimpleName: properties(621)", "Delete SingleVariableDeclaration(622)", "Delete SimpleName: ArrayList(623)", "Delete SimpleType: ArrayList(624)", "Delete SimpleName: LinkedSpan(625)", "Delete SimpleType: LinkedSpan(626)", "Delete SimpleName: BaseLink(627)", "Delete SimpleType: BaseLink(628)", "Delete ParameterizedType: LinkedSpan<BaseLink>(629)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(630)", "Delete SimpleName: outLinkedSpans(631)", "Delete SimpleName: ArrayList(632)", "Delete SimpleType: ArrayList(633)", "Delete SimpleName: LinkedSpan(634)", "Delete SimpleType: LinkedSpan(635)", "Delete SimpleName: BaseLink(636)", "Delete SimpleType: BaseLink(637)", "Delete ParameterizedType: LinkedSpan<BaseLink>(638)", "Delete ParameterizedType: ArrayList<LinkedSpan<BaseLink>>(639)", "Delete ClassInstanceCreation(640)", "Delete VariableDeclarationFragment(641)", "Delete VariableDeclarationStatement(642)", "Delete QualifiedName: nameSpans.length(643)", "Delete NumberLiteral: 0(644)", "Delete InfixExpression: ==(645)", "Delete SimpleName: nameSpans(646)", "Delete NullLiteral(647)", "Delete InfixExpression: ==(648)", "Delete InfixExpression: ||(649)", "Delete SimpleName: outLinkedSpans(650)", "Delete ReturnStatement(651)", "Delete Block(652)", "Delete IfStatement(653)", "Delete SimpleName: List(654)", "Delete SimpleType: List(655)", "Delete SimpleName: EntityLinker(656)", "Delete SimpleType: EntityLinker(657)", "Delete ParameterizedType: List<EntityLinker>(658)", "Delete SimpleName: linkers(659)", "Delete VariableDeclarationFragment(660)", "Delete VariableDeclarationStatement(661)", "Delete PrimitiveType: boolean(662)", "Delete SimpleName: multiType(663)", "Delete SimpleName: isMultitype(664)", "Delete SimpleName: nameSpans(665)", "Delete MethodInvocation(666)", "Delete VariableDeclarationFragment(667)", "Delete VariableDeclarationStatement(668)", "Delete SimpleName: multiType(669)", "Delete SimpleName: Span(670)", "Delete SimpleType: Span(671)", "Delete SimpleName: s(672)", "Delete SingleVariableDeclaration(673)", "Delete SimpleName: nameSpans(674)", "Delete SimpleName: linkers(675)", "Delete SimpleName: getInstances(676)", "Delete SimpleName: s(677)", "Delete SimpleName: getType(678)", "Delete MethodInvocation(679)", "Delete SimpleName: properties(680)", "Delete MethodInvocation(681)", "Delete Assignment: =(682)", "Delete ExpressionStatement(683)", "Delete SimpleName: EntityLinker(684)", "Delete SimpleType: EntityLinker(685)", "Delete SimpleName: linker(686)", "Delete SingleVariableDeclaration(687)", "Delete SimpleName: linkers(688)", "Delete SimpleName: outLinkedSpans(689)", "Delete SimpleName: addAll(690)", "Delete SimpleName: linker(691)", "Delete SimpleName: find(692)", "Delete SimpleName: docText(693)", "Delete SimpleName: sentences(694)", "Delete SimpleName: tokens(695)", "Delete SimpleName: nameSpans(696)", "Delete MethodInvocation(697)", "Delete MethodInvocation(698)", "Delete ExpressionStatement(699)", "Delete Block(700)", "Delete EnhancedForStatement(701)", "Delete Block(702)", "Delete EnhancedForStatement(703)", "Delete Block(704)", "Delete SimpleName: linkers(705)", "Delete SimpleName: getInstances(706)", "Delete SimpleName: nameSpans(707)", "Delete NumberLiteral: 0(708)", "Delete ArrayAccess(709)", "Delete SimpleName: getType(710)", "Delete MethodInvocation(711)", "Delete SimpleName: properties(712)", "Delete MethodInvocation(713)", "Delete Assignment: =(714)", "Delete ExpressionStatement(715)", "Delete SimpleName: Span(716)", "Delete SimpleType: Span(717)", "Delete SimpleName: s(718)", "Delete SingleVariableDeclaration(719)", "Delete SimpleName: nameSpans(720)", "Delete SimpleName: EntityLinker(721)", "Delete SimpleType: EntityLinker(722)", "Delete SimpleName: linker(723)", "Delete SingleVariableDeclaration(724)", "Delete SimpleName: linkers(725)", "Delete SimpleName: outLinkedSpans(726)", "Delete SimpleName: addAll(727)", "Delete SimpleName: linker(728)", "Delete SimpleName: find(729)", "Delete SimpleName: docText(730)", "Delete SimpleName: sentences(731)", "Delete SimpleName: tokens(732)", "Delete SimpleName: nameSpans(733)", "Delete MethodInvocation(734)", "Delete MethodInvocation(735)", "Delete ExpressionStatement(736)", "Delete Block(737)", "Delete EnhancedForStatement(738)", "Delete Block(739)", "Delete EnhancedForStatement(740)", "Delete Block(741)", "Delete IfStatement(742)", "Delete SimpleName: outLinkedSpans(743)", "Delete ReturnStatement(744)", "Delete Block(745)", "Delete MethodDeclaration(746)", "Delete TextElement: checks to see if a list of spans contains more than one type(747)", "Delete TagElement(748)", "Delete SimpleName: spans(749)", "Delete TagElement: @param(750)", "Delete TagElement: @return(751)", "Delete Javadoc(752)", "Delete Modifier: private(753)", "Delete PrimitiveType: boolean(754)", "Delete SimpleName: isMultitype(755)", "Delete SimpleName: Span(756)", "Delete SimpleType: Span(757)", "Delete Dimension(758)", "Delete ArrayType: Span[](759)", "Delete SimpleName: spans(760)", "Delete SingleVariableDeclaration(761)", "Delete PrimitiveType: boolean(762)", "Delete SimpleName: multitype(763)", "Delete BooleanLiteral: false(764)", "Delete VariableDeclarationFragment(765)", "Delete VariableDeclarationStatement(766)", "Delete SimpleName: String(767)", "Delete SimpleType: String(768)", "Delete SimpleName: type(769)", "Delete SimpleName: spans(770)", "Delete NumberLiteral: 0(771)", "Delete ArrayAccess(772)", "Delete SimpleName: getType(773)", "Delete MethodInvocation(774)", "Delete VariableDeclarationFragment(775)", "Delete VariableDeclarationStatement(776)", "Delete PrimitiveType: int(777)", "Delete SimpleName: i(778)", "Delete NumberLiteral: 1(779)", "Delete VariableDeclarationFragment(780)", "Delete VariableDeclarationExpression(781)", "Delete SimpleName: i(782)", "Delete QualifiedName: spans.length(783)", "Delete InfixExpression: <(784)", "Delete SimpleName: i(785)", "Delete PostfixExpression: ++(786)", "Delete SimpleName: type(787)", "Delete SimpleName: equals(788)", "Delete SimpleName: spans(789)", "Delete SimpleName: i(790)", "Delete ArrayAccess(791)", "Delete SimpleName: getType(792)", "Delete MethodInvocation(793)", "Delete MethodInvocation(794)", "Delete PrefixExpression: !(795)", "Delete SimpleName: multitype(796)", "Delete BooleanLiteral: true(797)", "Delete Assignment: =(798)", "Delete ExpressionStatement(799)", "Delete BreakStatement(800)", "Delete Block(801)", "Delete IfStatement(802)", "Delete Block(803)", "Delete ForStatement(804)", "Delete SimpleName: multitype(805)", "Delete ReturnStatement(806)", "Delete Block(807)", "Delete MethodDeclaration(808)", "Delete TextElement: returns instances of entitylinkers, and caches them in a map so they are(809)", "Delete TextElement: lazily instantiated(810)", "Delete TagElement(811)", "Delete SimpleName: type(812)", "Delete TextElement:        the entitytype(813)", "Delete TagElement: @param(814)", "Delete SimpleName: properties(815)", "Delete TextElement:  the entity liker properties(816)", "Delete TagElement: @param(817)", "Delete TagElement: @return(818)", "Delete Javadoc(819)", "Delete SimpleName: List(821)", "Delete SimpleType: List(822)", "Delete SimpleName: EntityLinker(823)", "Delete SimpleType: EntityLinker(824)", "Delete ParameterizedType: List<EntityLinker>(825)", "Delete SimpleName: List(835)", "Delete SimpleType: List(836)", "Delete SimpleName: EntityLinker(837)", "Delete SimpleType: EntityLinker(838)", "Delete ParameterizedType: List<EntityLinker>(839)", "Delete SimpleName: ArrayList(841)", "Delete SimpleType: ArrayList(842)", "Delete SimpleName: EntityLinker(843)", "Delete SimpleType: EntityLinker(844)", "Delete ParameterizedType: ArrayList<EntityLinker>(845)", "Delete ClassInstanceCreation(846)"]}}, {"CountryContext_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS ParameterizedType: Map<String,Set<Integer>> to FieldDeclaration at 1", "INS SimpleType: HashMap to ParameterizedType: HashMap<String,Set<Integer>> at 0", "INS SimpleName: HashMap to SimpleType: HashMap at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Map to ParameterizedType: Map<String,Set<Integer>> at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS SimpleType: Set to ParameterizedType: Set<Integer> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Integer to ParameterizedType: Set<Integer> at 1", "INS SimpleType: Set to ParameterizedType: Set<Integer> at 0", "INS ParameterizedType: HashMap<String,Set<Integer>> to ClassInstanceCreation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: countryMentions to VariableDeclarationFragment at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS ParameterizedType: Set<Integer> to ParameterizedType: HashMap<String,Set<Integer>> at 2", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: Integer to SimpleType: Integer at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: String to ParameterizedType: HashMap<String,Set<Integer>> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Set<Integer> to ParameterizedType: Map<String,Set<Integer>> at 2", "INS SimpleType: Integer to ParameterizedType: Set<Integer> at 1", "INS SimpleType: String to ParameterizedType: Map<String,Set<Integer>> at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS SimpleName: getCountryMentions to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: countryMentions to ReturnStatement at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Map<String,Set<Integer>> to MethodDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: countryMentions to Assignment: = at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: nameCodesMap to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: clear to MethodInvocation at 1"]}, {"root": "UPDATE from Finds mentions of countries based on a list from MySQL stored procedure called getCountryList. This method finds country mentions in documents, to Finds mentions of countries based on a list from MySQL stored procedure", "operations": ["UPD TextElement: Finds mentions of countries based on a list from MySQL stored procedure called getCountryList. This method finds country mentions in documents, from Finds mentions of countries based on a list from MySQL stored procedure called getCountryList. This method finds country mentions in documents, to Finds mentions of countries based on a list from MySQL stored procedure"]}, {"root": "INS TextElement: called getCountryList. This method finds country mentions in documents, to TagElement at 1", "operations": ["INS TextElement: called getCountryList. This method finds country mentions in documents, to TagElement at 1"]}, {"root": "UPDATE from which is an essential element of the scoring that is done for geo linkedspans. Lazily loads the list from the database. to which is an essential element of the scoring that is done for geo", "operations": ["UPD TextElement: which is an essential element of the scoring that is done for geo linkedspans. Lazily loads the list from the database. from which is an essential element of the scoring that is done for geo linkedspans. Lazily loads the list from the database. to which is an essential element of the scoring that is done for geo"]}, {"root": "INS TextElement: linkedspans. Lazily loads the list from the database. to TagElement at 3", "operations": ["INS TextElement: linkedspans. Lazily loads the list from the database. to TagElement at 3"]}, {"root": "UPDATE from  the full text of the document to     the full text of the document", "operations": ["UPD TextElement:  the full text of the document from  the full text of the document to     the full text of the document"]}, {"root": "UPDATE from hits to countryMentions", "operations": ["UPD SimpleName: hits from hits to countryMentions", "UPD SimpleName: hits from hits to countryMentions", "UPD SimpleName: hits from hits to countryMentions", "UPD SimpleName: hits from hits to countryMentions", "UPD SimpleName: hits from hits to countryMentions"]}, {"root": "UPDATE from  the hits discovered to  the countryMentions discovered", "operations": ["UPD TextElement:  the hits discovered from  the hits discovered to  the countryMentions discovered"]}, {"root": "UPDATE from reads the list from the database by calling a stored procedure getCountryList to reads the list from the database by calling a stored procedure", "operations": ["UPD TextElement: reads the list from the database by calling a stored procedure getCountryList from reads the list from the database by calling a stored procedure getCountryList to reads the list from the database by calling a stored procedure"]}, {"root": "INS TextElement: getCountryList to TagElement at 1", "operations": ["INS TextElement: getCountryList to TagElement at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: hits"]}]}}, {"CountryContext_diff": {"operations": ["Insert FieldDeclaration(102) into TypeDeclaration: class(881) at 6", "Insert MethodDeclaration(880) into TypeDeclaration: class(881) at 16", "Insert Modifier: private(78) into FieldDeclaration(102) at 0", "Insert ParameterizedType: Map<String,Set<Integer>>(88) into FieldDeclaration(102) at 1", "Insert VariableDeclarationFragment(101) into FieldDeclaration(102) at 2", "Insert Modifier: public(865) into MethodDeclaration(880) at 0", "Move ParameterizedType: Map<String,Set<Integer>>(301) into MethodDeclaration(880) at 1", "Insert SimpleName: getCountryMentions(876) into MethodDeclaration(880) at 2", "Insert Block(879) into MethodDeclaration(880) at 3", "Insert SimpleType: Map(80) into ParameterizedType: Map<String,Set<Integer>>(88) at 0", "Insert SimpleType: String(82) into ParameterizedType: Map<String,Set<Integer>>(88) at 1", "Insert ParameterizedType: Set<Integer>(87) into ParameterizedType: Map<String,Set<Integer>>(88) at 2", "Insert SimpleName: countryMentions(89) into VariableDeclarationFragment(101) at 0", "Insert ClassInstanceCreation(100) into VariableDeclarationFragment(101) at 1", "Insert ExpressionStatement(332) into Block(535) at 0", "Insert ExpressionStatement(336) into Block(535) at 1", "Insert ReturnStatement(878) into Block(879) at 0", "Insert SimpleName: Map(79) into SimpleType: Map(80) at 0", "Insert SimpleName: String(81) into SimpleType: String(82) at 0", "Insert SimpleType: Set(84) into ParameterizedType: Set<Integer>(87) at 0", "Insert SimpleType: Integer(86) into ParameterizedType: Set<Integer>(87) at 1", "Insert ParameterizedType: HashMap<String,Set<Integer>>(99) into ClassInstanceCreation(100) at 0", "Update TextElement: Finds mentions of countries based on a list from MySQL stored procedure called getCountryList. This method finds country mentions in documents,(261) to Finds mentions of countries based on a list from MySQL stored procedure", "Insert TextElement: called getCountryList. This method finds country mentions in documents,(287) into TagElement(290) at 1", "Update TextElement: which is an essential element of the scoring that is done for geo linkedspans. Lazily loads the list from the database.(262) to which is an essential element of the scoring that is done for geo", "Insert TextElement: linkedspans. Lazily loads the list from the database.(289) into TagElement(290) at 3", "Update TextElement:  the full text of the document(265) to     the full text of the document", "Insert Assignment: =(331) into ExpressionStatement(332) at 0", "Insert MethodInvocation(335) into ExpressionStatement(336) at 0", "Update SimpleName: hits(512) to countryMentions", "Update SimpleName: hits(518) to countryMentions", "Update TextElement:  the hits discovered(519) to  the countryMentions discovered", "Update TextElement: reads the list from the database by calling a stored procedure getCountryList(687) to reads the list from the database by calling a stored procedure", "Insert TextElement: getCountryList(709) into TagElement(710) at 1", "Insert SimpleName: countryMentions(877) into ReturnStatement(878) at 0", "Insert SimpleName: Set(83) into SimpleType: Set(84) at 0", "Insert SimpleName: Integer(85) into SimpleType: Integer(86) at 0", "Insert SimpleType: HashMap(91) into ParameterizedType: HashMap<String,Set<Integer>>(99) at 0", "Insert SimpleType: String(93) into ParameterizedType: HashMap<String,Set<Integer>>(99) at 1", "Insert ParameterizedType: Set<Integer>(98) into ParameterizedType: HashMap<String,Set<Integer>>(99) at 2", "Insert SimpleName: countryMentions(319) into Assignment: =(331) at 0", "Move ClassInstanceCreation(313) into Assignment: =(331) at 1", "Insert SimpleName: nameCodesMap(333) into MethodInvocation(335) at 0", "Insert SimpleName: clear(334) into MethodInvocation(335) at 1", "Insert SimpleName: HashMap(90) into SimpleType: HashMap(91) at 0", "Insert SimpleName: String(92) into SimpleType: String(93) at 0", "Insert SimpleType: Set(95) into ParameterizedType: Set<Integer>(98) at 0", "Insert SimpleType: Integer(97) into ParameterizedType: Set<Integer>(98) at 1", "Insert SimpleName: Set(94) into SimpleType: Set(95) at 0", "Insert SimpleName: Integer(96) into SimpleType: Integer(97) at 0", "Update SimpleName: hits(397) to countryMentions", "Update SimpleName: hits(429) to countryMentions", "Update SimpleName: hits(401) to countryMentions", "Delete SimpleName: hits(302)", "Delete VariableDeclarationFragment(314)", "Delete VariableDeclarationStatement(315)"]}}, {"EntityLinker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 5", "operations": ["INS ArrayType: Span[] to SingleVariableDeclaration at 0", "INS SimpleName: namesBySentence to TagElement: @param at 0", "INS SimpleType: T to ParameterizedType: List<T> at 1", "INS TextElement: same sentence.Similar in nature to Map<SentenceIndex,List<Name Spans For This Sentence's Tokens>> to TagElement: @param at 4", "INS TagElement: @param to Javadoc at 4", "INS Dimension to ArrayType: String[][] at 2", "INS SimpleName: sentences to SingleVariableDeclaration at 1", "INS SimpleName: doctext to TagElement: @param at 0", "INS SimpleName: doctext to SingleVariableDeclaration at 1", "INS SimpleType: String to ArrayType: String[][] at 0", "INS SimpleType: Span to ArrayType: Span[] at 0", "INS TextElement: text. to TagElement: @param at 2", "INS TextElement: The outer array refers to the sentence, the inner to TagElement: @param at 2", "INS Dimension to ArrayType: Span[][] at 1", "INS SimpleName: namesBySentence to SingleVariableDeclaration at 1", "INS TextElement:   a list of name spans that correspond to each to TagElement: @param at 1", "INS TextElement:           the full text of the document to TagElement: @param at 1", "INS SimpleName: Span to SimpleType: Span at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS TagElement: @param to Javadoc at 1", "INS TextElement:         the list of sentences spans that correspond to the to TagElement: @param at 1", "INS SimpleName: tokensBySentence to SingleVariableDeclaration at 1", "INS SimpleType: Span to ArrayType: Span[][] at 0", "INS Dimension to ArrayType: String[][] at 1", "INS TagElement: @param to Javadoc at 3", "INS TextElement: Links an entire document of named entities to an external source to TagElement at 0", "INS ParameterizedType: List<T> to MethodDeclaration at 1", "INS SimpleType: List to ParameterizedType: List<T> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: find to MethodDeclaration at 2", "INS ArrayType: String[][] to SingleVariableDeclaration at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS TextElement: sentence. The outer array refers to the sentence, to TagElement: @param at 2", "INS SimpleName: sentences to TagElement: @param at 0", "INS Dimension to ArrayType: Span[] at 1", "INS Dimension to ArrayType: Span[][] at 2", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: tokensBySentence to TagElement: @param at 0", "INS MethodDeclaration to TypeDeclaration: interface at 5", "INS TextElement: array is the tokens for the outer sentence. Similar in nature to Map<SentenceIndex,List<Tokens>> to TagElement: @param at 3", "INS TextElement:  a list of tokens that correspond to each sentence. to TagElement: @param at 1", "INS SimpleName: T to SimpleType: T at 0", "INS TagElement: @param to Javadoc at 2", "INS ArrayType: Span[][] to SingleVariableDeclaration at 0", "INS TagElement: @return to Javadoc at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: List to SimpleType: List at 0", "INS TextElement: the inner array refers to the tokens that for the to TagElement: @param at 3", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS SimpleName: Span to SimpleType: Span at 0"]}, {"root": "UPDATE from entities. For instance, for Location entities a linker can be to entities. For instance, for Location entities a linker can be developed to", "operations": ["UPD TextElement: entities. For instance, for Location entities a linker can be from entities. For instance, for Location entities a linker can be to entities. For instance, for Location entities a linker can be developed to"]}, {"root": "UPDATE from developed to lookup each found location in a geonames gazateer. Another to lookup each found location in a geonames gazateer. Another example may be to", "operations": ["UPD TextElement: developed to lookup each found location in a geonames gazateer. Another from developed to lookup each found location in a geonames gazateer. Another to lookup each found location in a geonames gazateer. Another example may be to"]}, {"root": "UPDATE from example may be to find peoples' names and look them up in a database or active to find peoples' names and look them up in a database or active directory.", "operations": ["UPD TextElement: example may be to find peoples' names and look them up in a database or active from example may be to find peoples' names and look them up in a database or active to find peoples' names and look them up in a database or active directory."]}, {"root": "UPDATE from directory. Intended to return n best matches for any give search, but can to Intended to return n best matches for any give search, but can also be", "operations": ["UPD TextElement: directory. Intended to return n best matches for any give search, but can from directory. Intended to return n best matches for any give search, but can to Intended to return n best matches for any give search, but can also be"]}, {"root": "UPDATE from also be implemented as deterministic to implemented as deterministic", "operations": ["UPD TextElement: also be implemented as deterministic from also be implemented as deterministic to implemented as deterministic"]}, {"root": "UPDATE from allows for passing properties through the EntityLinkerFactory into all impls dynamically to allows for passing properties through the EntityLinkerFactory into all", "operations": ["UPD TextElement: allows for passing properties through the EntityLinkerFactory into all impls dynamically from allows for passing properties through the EntityLinkerFactory into all impls dynamically to allows for passing properties through the EntityLinkerFactory into all"]}, {"root": "INS TextElement: impls dynamically to TagElement at 1", "operations": ["INS TextElement: impls dynamically to TagElement at 1"]}, {"root": "UPDATE from  the EntityLinkerProperties object that contains properties needed by the impl to  the EntityLinkerProperties object that contains", "operations": ["UPD TextElement:  the EntityLinkerProperties object that contains properties needed by the impl from  the EntityLinkerProperties object that contains properties needed by the impl to  the EntityLinkerProperties object that contains"]}, {"root": "INS TextElement: properties needed by the impl to TagElement: @param at 2", "operations": ["INS TextElement: properties needed by the impl to TagElement: @param at 2"]}, {"root": "UPDATE from can be used to get the sentence text and tokens from the text based on the sentence and token spans. to can be used to get the sentence text and tokens from the text based on the", "operations": ["UPD TextElement: can be used to get the sentence text and tokens from the text based on the sentence and token spans. from can be used to get the sentence text and tokens from the text based on the sentence and token spans. to can be used to get the sentence text and tokens from the text based on the"]}, {"root": "UPDATE from The text is available for additional context. to sentence and token spans. The text is available for additional context.", "operations": ["UPD TextElement: The text is available for additional context. from The text is available for additional context. to sentence and token spans. The text is available for additional context."]}]}}, {"EntityLinker_diff": {"operations": ["Insert MethodDeclaration(92) into TypeDeclaration: interface(232) at 5", "Insert Javadoc(61) into MethodDeclaration(92) at 0", "Insert ParameterizedType: List<T>(66) into MethodDeclaration(92) at 1", "Insert SimpleName: find(67) into MethodDeclaration(92) at 2", "Insert SingleVariableDeclaration(71) into MethodDeclaration(92) at 3", "Insert SingleVariableDeclaration(77) into MethodDeclaration(92) at 4", "Insert SingleVariableDeclaration(84) into MethodDeclaration(92) at 5", "Insert SingleVariableDeclaration(91) into MethodDeclaration(92) at 6", "Update TextElement: entities. For instance, for Location entities a linker can be(7) to entities. For instance, for Location entities a linker can be developed to", "Update TextElement: developed to lookup each found location in a geonames gazateer. Another(8) to lookup each found location in a geonames gazateer. Another example may be to", "Update TextElement: example may be to find peoples' names and look them up in a database or active(9) to find peoples' names and look them up in a database or active directory.", "Update TextElement: directory. Intended to return n best matches for any give search, but can(10) to Intended to return n best matches for any give search, but can also be", "Update TextElement: also be implemented as deterministic(11) to implemented as deterministic", "Insert TagElement(41) into Javadoc(61) at 0", "Insert TagElement: @param(44) into Javadoc(61) at 1", "Insert TagElement: @param(48) into Javadoc(61) at 2", "Insert TagElement: @param(53) into Javadoc(61) at 3", "Insert TagElement: @param(59) into Javadoc(61) at 4", "Insert TagElement: @return(60) into Javadoc(61) at 5", "Insert SimpleType: List(63) into ParameterizedType: List<T>(66) at 0", "Insert SimpleType: T(65) into ParameterizedType: List<T>(66) at 1", "Insert SimpleType: String(69) into SingleVariableDeclaration(71) at 0", "Insert SimpleName: doctext(70) into SingleVariableDeclaration(71) at 1", "Insert ArrayType: Span[](75) into SingleVariableDeclaration(77) at 0", "Insert SimpleName: sentences(76) into SingleVariableDeclaration(77) at 1", "Insert ArrayType: String[][](82) into SingleVariableDeclaration(84) at 0", "Insert SimpleName: tokensBySentence(83) into SingleVariableDeclaration(84) at 1", "Insert ArrayType: Span[][](89) into SingleVariableDeclaration(91) at 0", "Insert SimpleName: namesBySentence(90) into SingleVariableDeclaration(91) at 1", "Update TextElement: allows for passing properties through the EntityLinkerFactory into all impls dynamically(25) to allows for passing properties through the EntityLinkerFactory into all", "Insert TextElement: impls dynamically(26) into TagElement(27) at 1", "Update TextElement:  the EntityLinkerProperties object that contains properties needed by the impl(28) to  the EntityLinkerProperties object that contains", "Insert TextElement: properties needed by the impl(30) into TagElement: @param(31) at 2", "Insert TextElement: Links an entire document of named entities to an external source(40) into TagElement(41) at 0", "Insert SimpleName: doctext(42) into TagElement: @param(44) at 0", "Insert TextElement:           the full text of the document(43) into TagElement: @param(44) at 1", "Insert SimpleName: sentences(45) into TagElement: @param(48) at 0", "Insert TextElement:         the list of sentences spans that correspond to the(46) into TagElement: @param(48) at 1", "Insert TextElement: text.(47) into TagElement: @param(48) at 2", "Insert SimpleName: tokensBySentence(49) into TagElement: @param(53) at 0", "Insert TextElement:  a list of tokens that correspond to each sentence.(50) into TagElement: @param(53) at 1", "Insert TextElement: The outer array refers to the sentence, the inner(51) into TagElement: @param(53) at 2", "Insert TextElement: array is the tokens for the outer sentence. Similar in nature to Map<SentenceIndex,List<Tokens>>(52) into TagElement: @param(53) at 3", "Insert SimpleName: namesBySentence(54) into TagElement: @param(59) at 0", "Insert TextElement:   a list of name spans that correspond to each(55) into TagElement: @param(59) at 1", "Insert TextElement: sentence. The outer array refers to the sentence,(56) into TagElement: @param(59) at 2", "Insert TextElement: the inner array refers to the tokens that for the(57) into TagElement: @param(59) at 3", "Insert TextElement: same sentence.Similar in nature to Map<SentenceIndex,List<Name Spans For This Sentence's Tokens>>(58) into TagElement: @param(59) at 4", "Insert SimpleName: List(62) into SimpleType: List(63) at 0", "Insert SimpleName: T(64) into SimpleType: T(65) at 0", "Insert SimpleName: String(68) into SimpleType: String(69) at 0", "Insert SimpleType: Span(73) into ArrayType: Span[](75) at 0", "Insert Dimension(74) into ArrayType: Span[](75) at 1", "Insert SimpleType: String(79) into ArrayType: String[][](82) at 0", "Insert Dimension(80) into ArrayType: String[][](82) at 1", "Insert Dimension(81) into ArrayType: String[][](82) at 2", "Insert SimpleType: Span(86) into ArrayType: Span[][](89) at 0", "Insert Dimension(87) into ArrayType: Span[][](89) at 1", "Insert Dimension(88) into ArrayType: Span[][](89) at 2", "Update TextElement: can be used to get the sentence text and tokens from the text based on the sentence and token spans.(80) to can be used to get the sentence text and tokens from the text based on the", "Update TextElement: The text is available for additional context.(81) to sentence and token spans. The text is available for additional context.", "Insert SimpleName: Span(72) into SimpleType: Span(73) at 0", "Insert SimpleName: String(78) into SimpleType: String(79) at 0", "Insert SimpleName: Span(85) into SimpleType: Span(86) at 0"]}}, {"EntityLinkerFactory_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleName: entityType to InfixExpression: + at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: entityType to TagElement: @param at 0", "INS VariableDeclarationStatement to Block at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: properties to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: println to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleType: EntityLinker to VariableDeclarationStatement at 0", "INS SimpleName: linker to ReturnStatement at 0", "INS Block to CatchClause at 1", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: System.out to MethodInvocation at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS SimpleName: ex to InfixExpression: + at 1", "INS SimpleName: linker to Assignment: = at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: forName to MethodInvocation at 1", "INS SimpleName: getProperty to MethodInvocation at 1", "INS StringLiteral: \"EntityLinker factory instantiated: \" to InfixExpression: + at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS Modifier: static to MethodDeclaration at 2", "INS ClassInstanceCreation to ThrowStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: GeoEntityLinker to TypeLiteral at 0", "INS SimpleName: ex to InfixExpression: + at 1", "INS ExpressionStatement to Block at 4", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: properties to SingleVariableDeclaration at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: println to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleType: ClassNotFoundException to SingleVariableDeclaration at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: EntityLinkerProperties to SimpleType: EntityLinkerProperties at 0", "INS SimpleName: linker to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS TextElement: instantiates a single linker based on properties file configuration. The properties file supports multiple types. to TagElement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS TagElement: @param to Javadoc at 2", "INS QualifiedName: System.out to MethodInvocation at 0", "INS ReturnStatement to Block at 3", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\" to InfixExpression: + at 0", "INS SimpleName: String to SimpleType: String at 0", "INS TextElement:  the properties file that holds the configuration for entitylinkers. to TagElement: @param at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: ClassNotFoundException to SimpleType: ClassNotFoundException at 0", "INS SimpleName: theClass to MethodInvocation at 0", "INS SimpleName: entityType to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 2", "INS StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\" to InfixExpression: + at 0", "INS SimpleName: properties to TagElement: @param at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ex to InfixExpression: + at 1", "INS TagElement: @return to Javadoc at 3", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: EntityLinker to SimpleType: EntityLinker at 0", "INS SimpleType: InstantiationException to SingleVariableDeclaration at 0", "INS SimpleName: linkerImplFullName to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: properties to InfixExpression: == at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS SimpleName: theClass to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: println to MethodInvocation at 1", "INS TryStatement to Block at 2", "INS CatchClause to TryStatement at 2", "INS StringLiteral: \"Null argument in entityLinkerFactory\" to ClassInstanceCreation at 1", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: linker to MethodInvocation at 0", "INS SimpleName: properties to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Modifier: synchronized to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: linker to VariableDeclarationFragment at 0", "INS SimpleType: EntityLinker to CastExpression at 0", "INS SimpleName: linkerImplFullName to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS Block to CatchClause at 1", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS QualifiedName: System.out to MethodInvocation at 0", "INS Block to MethodDeclaration at 8", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 3", "INS CatchClause to TryStatement at 4", "INS SimpleName: EntityLinker to SimpleType: EntityLinker at 0", "INS Block to TryStatement at 0", "INS SimpleName: ex to SingleVariableDeclaration at 1", "INS SimpleName: GeoEntityLinker to SimpleType: GeoEntityLinker at 0", "INS SimpleName: Class to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ex to SingleVariableDeclaration at 1", "INS CatchClause to TryStatement at 3", "INS ThrowStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: ex to InfixExpression: + at 1", "INS Block to CatchClause at 1", "INS SimpleName: EntityLinker to SimpleType: EntityLinker at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\" to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS CatchClause to TryStatement at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\" to InfixExpression: + at 0", "INS SimpleName: ex to SingleVariableDeclaration at 1", "INS QualifiedName: System.out to MethodInvocation at 0", "INS SimpleName: ex to SingleVariableDeclaration at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: IllegalAccessException to SimpleType: IllegalAccessException at 0", "INS SimpleName: println to MethodInvocation at 1", "INS TextElement:  the type of entity, i.e. person, organization, location to TagElement: @param at 1", "INS SimpleName: newInstance to MethodInvocation at 1", "INS SimpleName: getLinker to MethodDeclaration at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleType: EntityLinkerProperties to SingleVariableDeclaration at 0", "INS SimpleName: entityType to InfixExpression: == at 0", "INS IfStatement to Block at 0", "INS SimpleName: InstantiationException to SimpleType: InstantiationException at 0", "INS SimpleName: setEntityLinkerProperties to MethodInvocation at 1", "INS CastExpression to Assignment: = at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS QualifiedName: System.out to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 3", "INS SimpleType: EntityLinker to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IllegalAccessException to SingleVariableDeclaration at 0", "INS SimpleName: println to MethodInvocation at 1", "INS SimpleType: Class to VariableDeclarationStatement at 0", "INS Javadoc to MethodDeclaration at 0", "INS StringLiteral: \"linker.\" to InfixExpression: + at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}]}}, {"EntityLinkerFactory_diff": {"operations": ["Insert MethodDeclaration(169) into TypeDeclaration: class(580) at 3", "Insert Javadoc(27) into MethodDeclaration(169) at 0", "Insert Modifier: public(28) into MethodDeclaration(169) at 1", "Insert Modifier: static(29) into MethodDeclaration(169) at 2", "Insert Modifier: synchronized(30) into MethodDeclaration(169) at 3", "Insert SimpleType: EntityLinker(32) into MethodDeclaration(169) at 4", "Insert SimpleName: getLinker(33) into MethodDeclaration(169) at 5", "Insert SingleVariableDeclaration(37) into MethodDeclaration(169) at 6", "Insert SingleVariableDeclaration(41) into MethodDeclaration(169) at 7", "Insert Block(168) into MethodDeclaration(169) at 8", "Insert MarkerAnnotation(190) into MethodDeclaration(374) at 1", "Insert MarkerAnnotation(386) into MethodDeclaration(579) at 1", "Insert TagElement(19) into Javadoc(27) at 0", "Insert TagElement: @param(22) into Javadoc(27) at 1", "Insert TagElement: @param(25) into Javadoc(27) at 2", "Insert TagElement: @return(26) into Javadoc(27) at 3", "Insert SimpleName: EntityLinker(31) into SimpleType: EntityLinker(32) at 0", "Insert SimpleType: String(35) into SingleVariableDeclaration(37) at 0", "Insert SimpleName: entityType(36) into SingleVariableDeclaration(37) at 1", "Insert SimpleType: EntityLinkerProperties(39) into SingleVariableDeclaration(41) at 0", "Insert SimpleName: properties(40) into SingleVariableDeclaration(41) at 1", "Insert IfStatement(55) into Block(168) at 0", "Insert VariableDeclarationStatement(61) into Block(168) at 1", "Insert TryStatement(165) into Block(168) at 2", "Insert ReturnStatement(167) into Block(168) at 3", "Insert SimpleName: Deprecated(189) into MarkerAnnotation(190) at 0", "Insert SimpleName: Deprecated(385) into MarkerAnnotation(386) at 0", "Insert TextElement: instantiates a single linker based on properties file configuration. The properties file supports multiple types.(18) into TagElement(19) at 0", "Insert SimpleName: entityType(20) into TagElement: @param(22) at 0", "Insert TextElement:  the type of entity, i.e. person, organization, location(21) into TagElement: @param(22) at 1", "Insert SimpleName: properties(23) into TagElement: @param(25) at 0", "Insert TextElement:  the properties file that holds the configuration for entitylinkers.(24) into TagElement: @param(25) at 1", "Insert SimpleName: String(34) into SimpleType: String(35) at 0", "Insert SimpleName: EntityLinkerProperties(38) into SimpleType: EntityLinkerProperties(39) at 0", "Insert InfixExpression: ||(48) into IfStatement(55) at 0", "Insert Block(54) into IfStatement(55) at 1", "Insert SimpleType: EntityLinker(57) into VariableDeclarationStatement(61) at 0", "Insert VariableDeclarationFragment(60) into VariableDeclarationStatement(61) at 1", "Insert Block(112) into TryStatement(165) at 0", "Insert CatchClause(125) into TryStatement(165) at 1", "Insert CatchClause(138) into TryStatement(165) at 2", "Insert CatchClause(151) into TryStatement(165) at 3", "Insert CatchClause(164) into TryStatement(165) at 4", "Insert SimpleName: linker(166) into ReturnStatement(167) at 0", "Insert InfixExpression: ==(44) into InfixExpression: ||(48) at 0", "Insert InfixExpression: ==(47) into InfixExpression: ||(48) at 1", "Insert ThrowStatement(53) into Block(54) at 0", "Insert SimpleName: EntityLinker(56) into SimpleType: EntityLinker(57) at 0", "Insert SimpleName: linker(58) into VariableDeclarationFragment(60) at 0", "Insert NullLiteral(59) into VariableDeclarationFragment(60) at 1", "Insert VariableDeclarationStatement(77) into Block(112) at 0", "Insert VariableDeclarationStatement(86) into Block(112) at 1", "Insert ExpressionStatement(95) into Block(112) at 2", "Insert ExpressionStatement(106) into Block(112) at 3", "Insert ExpressionStatement(111) into Block(112) at 4", "Insert SingleVariableDeclaration(116) into CatchClause(125) at 0", "Insert Block(124) into CatchClause(125) at 1", "Insert SingleVariableDeclaration(129) into CatchClause(138) at 0", "Insert Block(137) into CatchClause(138) at 1", "Insert SingleVariableDeclaration(142) into CatchClause(151) at 0", "Insert Block(150) into CatchClause(151) at 1", "Insert SingleVariableDeclaration(155) into CatchClause(164) at 0", "Insert Block(163) into CatchClause(164) at 1", "Insert SimpleName: entityType(42) into InfixExpression: ==(44) at 0", "Insert NullLiteral(43) into InfixExpression: ==(44) at 1", "Insert SimpleName: properties(45) into InfixExpression: ==(47) at 0", "Insert NullLiteral(46) into InfixExpression: ==(47) at 1", "Insert ClassInstanceCreation(52) into ThrowStatement(53) at 0", "Insert SimpleType: String(63) into VariableDeclarationStatement(77) at 0", "Insert VariableDeclarationFragment(76) into VariableDeclarationStatement(77) at 1", "Insert SimpleType: Class(79) into VariableDeclarationStatement(86) at 0", "Insert VariableDeclarationFragment(85) into VariableDeclarationStatement(86) at 1", "Insert Assignment: =(94) into ExpressionStatement(95) at 0", "Insert MethodInvocation(105) into ExpressionStatement(106) at 0", "Insert MethodInvocation(110) into ExpressionStatement(111) at 0", "Insert SimpleType: InstantiationException(114) into SingleVariableDeclaration(116) at 0", "Insert SimpleName: ex(115) into SingleVariableDeclaration(116) at 1", "Insert ExpressionStatement(123) into Block(124) at 0", "Insert SimpleType: IllegalAccessException(127) into SingleVariableDeclaration(129) at 0", "Insert SimpleName: ex(128) into SingleVariableDeclaration(129) at 1", "Insert ExpressionStatement(136) into Block(137) at 0", "Insert SimpleType: ClassNotFoundException(140) into SingleVariableDeclaration(142) at 0", "Insert SimpleName: ex(141) into SingleVariableDeclaration(142) at 1", "Insert ExpressionStatement(149) into Block(150) at 0", "Insert SimpleType: IOException(153) into SingleVariableDeclaration(155) at 0", "Insert SimpleName: ex(154) into SingleVariableDeclaration(155) at 1", "Insert ExpressionStatement(162) into Block(163) at 0", "Insert SimpleType: IllegalArgumentException(50) into ClassInstanceCreation(52) at 0", "Insert StringLiteral: \"Null argument in entityLinkerFactory\"(51) into ClassInstanceCreation(52) at 1", "Insert SimpleName: String(62) into SimpleType: String(63) at 0", "Insert SimpleName: linkerImplFullName(64) into VariableDeclarationFragment(76) at 0", "Insert MethodInvocation(75) into VariableDeclarationFragment(76) at 1", "Insert SimpleName: Class(78) into SimpleType: Class(79) at 0", "Insert SimpleName: theClass(80) into VariableDeclarationFragment(85) at 0", "Insert MethodInvocation(84) into VariableDeclarationFragment(85) at 1", "Insert SimpleName: linker(87) into Assignment: =(94) at 0", "Insert CastExpression(93) into Assignment: =(94) at 1", "Insert QualifiedName: System.out(96) into MethodInvocation(105) at 0", "Insert SimpleName: println(97) into MethodInvocation(105) at 1", "Insert InfixExpression: +(104) into MethodInvocation(105) at 2", "Insert SimpleName: linker(107) into MethodInvocation(110) at 0", "Insert SimpleName: setEntityLinkerProperties(108) into MethodInvocation(110) at 1", "Insert SimpleName: properties(109) into MethodInvocation(110) at 2", "Insert SimpleName: InstantiationException(113) into SimpleType: InstantiationException(114) at 0", "Insert MethodInvocation(122) into ExpressionStatement(123) at 0", "Insert SimpleName: IllegalAccessException(126) into SimpleType: IllegalAccessException(127) at 0", "Insert MethodInvocation(135) into ExpressionStatement(136) at 0", "Insert SimpleName: ClassNotFoundException(139) into SimpleType: ClassNotFoundException(140) at 0", "Insert MethodInvocation(148) into ExpressionStatement(149) at 0", "Insert SimpleName: IOException(152) into SimpleType: IOException(153) at 0", "Insert MethodInvocation(161) into ExpressionStatement(162) at 0", "Insert SimpleName: IllegalArgumentException(49) into SimpleType: IllegalArgumentException(50) at 0", "Insert SimpleName: properties(65) into MethodInvocation(75) at 0", "Insert SimpleName: getProperty(66) into MethodInvocation(75) at 1", "Insert InfixExpression: +(69) into MethodInvocation(75) at 2", "Insert MethodInvocation(74) into MethodInvocation(75) at 3", "Insert SimpleName: Class(81) into MethodInvocation(84) at 0", "Insert SimpleName: forName(82) into MethodInvocation(84) at 1", "Insert SimpleName: linkerImplFullName(83) into MethodInvocation(84) at 2", "Insert SimpleType: EntityLinker(89) into CastExpression(93) at 0", "Insert MethodInvocation(92) into CastExpression(93) at 1", "Insert StringLiteral: \"EntityLinker factory instantiated: \"(98) into InfixExpression: +(104) at 0", "Insert MethodInvocation(103) into InfixExpression: +(104) at 1", "Insert QualifiedName: System.out(117) into MethodInvocation(122) at 0", "Insert SimpleName: println(118) into MethodInvocation(122) at 1", "Insert InfixExpression: +(121) into MethodInvocation(122) at 2", "Insert QualifiedName: System.out(130) into MethodInvocation(135) at 0", "Insert SimpleName: println(131) into MethodInvocation(135) at 1", "Insert InfixExpression: +(134) into MethodInvocation(135) at 2", "Insert QualifiedName: System.out(143) into MethodInvocation(148) at 0", "Insert SimpleName: println(144) into MethodInvocation(148) at 1", "Insert InfixExpression: +(147) into MethodInvocation(148) at 2", "Insert QualifiedName: System.out(156) into MethodInvocation(161) at 0", "Insert SimpleName: println(157) into MethodInvocation(161) at 1", "Insert InfixExpression: +(160) into MethodInvocation(161) at 2", "Insert StringLiteral: \"linker.\"(67) into InfixExpression: +(69) at 0", "Insert SimpleName: entityType(68) into InfixExpression: +(69) at 1", "Insert TypeLiteral(72) into MethodInvocation(74) at 0", "Insert SimpleName: getName(73) into MethodInvocation(74) at 1", "Insert SimpleName: EntityLinker(88) into SimpleType: EntityLinker(89) at 0", "Insert SimpleName: theClass(90) into MethodInvocation(92) at 0", "Insert SimpleName: newInstance(91) into MethodInvocation(92) at 1", "Insert MethodInvocation(101) into MethodInvocation(103) at 0", "Insert SimpleName: getName(102) into MethodInvocation(103) at 1", "Insert StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\"(119) into InfixExpression: +(121) at 0", "Insert SimpleName: ex(120) into InfixExpression: +(121) at 1", "Insert StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\"(132) into InfixExpression: +(134) at 0", "Insert SimpleName: ex(133) into InfixExpression: +(134) at 1", "Insert StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\"(145) into InfixExpression: +(147) at 0", "Insert SimpleName: ex(146) into InfixExpression: +(147) at 1", "Insert StringLiteral: \"Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\"(158) into InfixExpression: +(160) at 0", "Insert SimpleName: ex(159) into InfixExpression: +(160) at 1", "Insert SimpleType: GeoEntityLinker(71) into TypeLiteral(72) at 0", "Insert SimpleName: linker(99) into MethodInvocation(101) at 0", "Insert SimpleName: getClass(100) into MethodInvocation(101) at 1", "Insert SimpleName: GeoEntityLinker(70) into SimpleType: GeoEntityLinker(71) at 0"]}}, {"FuzzyStringMatcher_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: opennlp.tools.entitylinker", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: opennlp.tools.ngram.NGramGenerator"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: s1", "DEL Javadoc", "DEL SimpleName: List", "DEL SimpleName: String", "DEL TextElement:  second string", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: overlap", "DEL NumberLiteral: 0d", "DEL SimpleName: NGramGenerator", "DEL MethodInvocation", "DEL SimpleName: getDiceCoefficient", "DEL SimpleName: s1Grams", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: s2Grams", "DEL SimpleType: String", "DEL SimpleName: s1Grams", "DEL TagElement: @param", "DEL ParameterizedType: List<String>", "DEL SimpleName: s1", "DEL VariableDeclarationStatement", "DEL SimpleName: toCharArray", "DEL SimpleName: s1Grams", "DEL StringLiteral: \"\"", "DEL SimpleName: generate", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL StringLiteral: \"\"", "DEL SimpleType: String", "DEL ReturnStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: totcombigrams", "DEL SimpleName: totcombigrams", "DEL ReturnStatement", "DEL SimpleName: generate", "DEL SimpleName: equals", "DEL SimpleName: s2", "DEL TextElement: Generates scores for string comparisons.", "DEL MethodDeclaration", "DEL InfixExpression: /", "DEL StringLiteral: \"\"", "DEL SimpleName: s2Grams", "DEL SimpleName: String", "DEL InfixExpression: *", "DEL SimpleName: s1", "DEL SingleVariableDeclaration", "DEL SimpleName: nGrams", "DEL InfixExpression: ||", "DEL SimpleName: s2", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: toCharArray", "DEL VariableDeclarationFragment", "DEL SimpleName: equals", "DEL InfixExpression: +", "DEL SimpleName: s2", "DEL SimpleName: size", "DEL SimpleName: nGrams", "DEL SimpleName: NGramGenerator", "DEL SimpleName: overlap", "DEL ParenthesizedExpression", "DEL NumberLiteral: 2", "DEL SimpleType: List", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: Set", "DEL TagElement", "DEL ParameterizedType: Set<String>", "DEL TextElement:  first string", "DEL SimpleName: size", "DEL SimpleName: s1", "DEL SingleVariableDeclaration", "DEL SimpleName: retainAll", "DEL MethodInvocation", "DEL SimpleName: s1", "DEL TypeDeclaration: class", "DEL VariableDeclarationStatement", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: size", "DEL TagElement: @return", "DEL SimpleType: HashSet", "DEL SimpleType: String", "DEL SimpleName: List", "DEL SimpleName: String", "DEL TextElement: Generates a score based on an overlap of nGrams between two strings using the DiceCoefficient technique.", "DEL TagElement: @param", "DEL SimpleName: nGrams", "DEL PrimitiveType: int", "DEL ParameterizedType: HashSet<String>", "DEL PrimitiveType: double", "DEL SimpleName: String", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: HashSet", "DEL MethodInvocation", "DEL SimpleName: s2Grams", "DEL MethodInvocation", "DEL PrimitiveType: double", "DEL MethodInvocation", "DEL SimpleName: nGrams", "DEL StringLiteral: \"\"", "DEL Modifier: public", "DEL SimpleType: Set", "DEL ParameterizedType: List<String>", "DEL TagElement", "DEL SimpleName: overlap", "DEL TextElement:  number of chars in each gram", "DEL IfStatement", "DEL SimpleName: FuzzyStringMatcher", "DEL SimpleName: String", "DEL Javadoc"]}]}}, {"FuzzyStringMatcher_diff": {"operations": ["Delete QualifiedName: opennlp.tools.entitylinker(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.HashSet(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.List(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Set(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: opennlp.tools.ngram.NGramGenerator(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Generates scores for string comparisons.(10)", "Delete TagElement(11)", "Delete Javadoc(12)", "Delete Modifier: public(13)", "Delete TextElement: Generates a score based on an overlap of nGrams between two strings using the DiceCoefficient technique.(15)", "Delete TagElement(16)", "Delete SimpleName: s1(17)", "Delete TextElement:  first string(18)", "Delete TagElement: @param(19)", "Delete SimpleName: s2(20)", "Delete TextElement:  second string(21)", "Delete TagElement: @param(22)", "Delete SimpleName: nGrams(23)", "Delete TextElement:  number of chars in each gram(24)", "Delete TagElement: @param(25)", "Delete TagElement: @return(26)", "Delete Javadoc(27)", "Delete Modifier: public(28)", "Delete Modifier: static(29)", "Delete PrimitiveType: double(30)", "Delete SimpleName: getDiceCoefficient(31)", "Delete SimpleName: String(32)", "Delete SimpleType: String(33)", "Delete SimpleName: s1(34)", "Delete SingleVariableDeclaration(35)", "Delete SimpleName: String(36)", "Delete SimpleType: String(37)", "Delete SimpleName: s2(38)", "Delete SingleVariableDeclaration(39)", "Delete PrimitiveType: int(40)", "Delete SimpleName: nGrams(41)", "Delete SingleVariableDeclaration(42)", "Delete SimpleName: s1(43)", "Delete SimpleName: equals(44)", "Delete StringLiteral: \"\"(45)", "Delete MethodInvocation(46)", "Delete SimpleName: s1(47)", "Delete SimpleName: equals(48)", "Delete StringLiteral: \"\"(49)", "Delete MethodInvocation(50)", "Delete InfixExpression: ||(51)", "Delete NumberLiteral: 0d(52)", "Delete ReturnStatement(53)", "Delete Block(54)", "Delete IfStatement(55)", "Delete SimpleName: List(56)", "Delete SimpleType: List(57)", "Delete SimpleName: String(58)", "Delete SimpleType: String(59)", "Delete ParameterizedType: List<String>(60)", "Delete SimpleName: s1Grams(61)", "Delete SimpleName: NGramGenerator(62)", "Delete SimpleName: generate(63)", "Delete SimpleName: s1(64)", "Delete SimpleName: toCharArray(65)", "Delete MethodInvocation(66)", "Delete SimpleName: nGrams(67)", "Delete StringLiteral: \"\"(68)", "Delete MethodInvocation(69)", "Delete VariableDeclarationFragment(70)", "Delete VariableDeclarationStatement(71)", "Delete SimpleName: List(72)", "Delete SimpleType: List(73)", "Delete SimpleName: String(74)", "Delete SimpleType: String(75)", "Delete ParameterizedType: List<String>(76)", "Delete SimpleName: s2Grams(77)", "Delete SimpleName: NGramGenerator(78)", "Delete SimpleName: generate(79)", "Delete SimpleName: s2(80)", "Delete SimpleName: toCharArray(81)", "Delete MethodInvocation(82)", "Delete SimpleName: nGrams(83)", "Delete StringLiteral: \"\"(84)", "Delete MethodInvocation(85)", "Delete VariableDeclarationFragment(86)", "Delete VariableDeclarationStatement(87)", "Delete SimpleName: Set(88)", "Delete SimpleType: Set(89)", "Delete SimpleName: String(90)", "Delete SimpleType: String(91)", "Delete ParameterizedType: Set<String>(92)", "Delete SimpleName: overlap(93)", "Delete SimpleName: HashSet(94)", "Delete SimpleType: HashSet(95)", "Delete SimpleName: String(96)", "Delete SimpleType: String(97)", "Delete ParameterizedType: HashSet<String>(98)", "Delete SimpleName: s1Grams(99)", "Delete ClassInstanceCreation(100)", "Delete VariableDeclarationFragment(101)", "Delete VariableDeclarationStatement(102)", "Delete SimpleName: overlap(103)", "Delete SimpleName: retainAll(104)", "Delete SimpleName: s2Grams(105)", "Delete MethodInvocation(106)", "Delete ExpressionStatement(107)", "Delete PrimitiveType: double(108)", "Delete SimpleName: totcombigrams(109)", "Delete SimpleName: overlap(110)", "Delete SimpleName: size(111)", "Delete MethodInvocation(112)", "Delete VariableDeclarationFragment(113)", "Delete VariableDeclarationStatement(114)", "Delete NumberLiteral: 2(115)", "Delete SimpleName: totcombigrams(116)", "Delete InfixExpression: *(117)", "Delete ParenthesizedExpression(118)", "Delete SimpleName: s1Grams(119)", "Delete SimpleName: size(120)", "Delete MethodInvocation(121)", "Delete SimpleName: s2Grams(122)", "Delete SimpleName: size(123)", "Delete MethodInvocation(124)", "Delete InfixExpression: +(125)", "Delete ParenthesizedExpression(126)", "Delete InfixExpression: /(127)", "Delete ReturnStatement(128)", "Delete Block(129)", "Delete MethodDeclaration(130)", "Delete TypeDeclaration: class(131)"]}}, {"GeoEntityLinker_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 8", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS SimpleType: Span to ArrayType: Span[] at 0", "INS ThrowStatement to Block at 0", "INS ArrayType: Span[] to SingleVariableDeclaration at 0", "INS SimpleName: find to MethodDeclaration at 3", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS Block to MethodDeclaration at 9", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS StringLiteral: \"The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported\" to ClassInstanceCreation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: nameSpans to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Modifier: public to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS ArrayType: Span[] to SingleVariableDeclaration at 0", "INS SimpleType: Span to ArrayType: Span[] at 0", "INS SimpleName: find to MethodDeclaration at 3", "INS Block to MethodDeclaration at 8", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ThrowStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"The GeoEntityLinker requires the entire document for proper scoring.\" to ClassInstanceCreation at 1", "INS SimpleName: sentences to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ParameterizedType: List<LinkedSpan> to MethodDeclaration at 2"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: doctext to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS Dimension to ArrayType: String[][] at 1", "INS SimpleName: tokensBySentence to SingleVariableDeclaration at 1", "INS Dimension to ArrayType: String[][] at 2", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS ArrayType: String[][] to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV ParameterizedType: List<LinkedSpan> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleName: find to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SingleVariableDeclaration to MethodDeclaration at 8", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV Modifier: public to MethodDeclaration at 1", "MOV ParameterizedType: List<LinkedSpan> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "INS ArrayType: Span[][] to SingleVariableDeclaration at 0", "operations": ["INS Dimension to ArrayType: Span[][] at 2", "INS ArrayType: Span[][] to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: Span[][] at 1"]}, {"root": "UPDATE from names to namesBySentence", "operations": ["UPD SimpleName: names from names to namesBySentence"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: LinkedEntityScorer to SimpleType: LinkedEntityScorer at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: scorers to VariableDeclarationFragment at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleType: List to ParameterizedType: List<LinkedEntityScorer<CountryContext>> at 0", "INS ParameterizedType: LinkedEntityScorer<CountryContext> to ParameterizedType: List<LinkedEntityScorer<CountryContext>> at 1", "INS SimpleType: LinkedEntityScorer to ParameterizedType: LinkedEntityScorer<CountryContext> at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleType: CountryContext to ParameterizedType: LinkedEntityScorer<CountryContext> at 1", "INS ParameterizedType: List<LinkedEntityScorer<CountryContext>> to VariableDeclarationStatement at 0", "INS SimpleName: CountryContext to SimpleType: CountryContext at 0", "INS VariableDeclarationStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS SimpleName: GeoHashBinScorer to SimpleType: GeoHashBinScorer at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: scorers to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: GeoHashBinScorer to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: scorers to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS SimpleType: CountryProximityScorer to ClassInstanceCreation at 0", "INS SimpleName: CountryProximityScorer to SimpleType: CountryProximityScorer at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 5", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: FuzzyStringMatchScorer to SimpleType: FuzzyStringMatchScorer at 0", "INS ExpressionStatement to Block at 5", "INS SimpleType: FuzzyStringMatchScorer to ClassInstanceCreation at 0", "INS SimpleName: scorers to MethodInvocation at 0"]}, {"root": "INS EnhancedForStatement to Block at 6", "operations": ["INS SimpleName: scorer to SingleVariableDeclaration at 1", "INS SimpleName: countryContext to MethodInvocation at 5", "INS SimpleName: doctext to MethodInvocation at 3", "INS SimpleName: spans to MethodInvocation at 2", "INS SimpleType: LinkedEntityScorer to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: LinkedEntityScorer to SimpleType: LinkedEntityScorer at 0", "INS SimpleName: score to MethodInvocation at 1", "INS SimpleName: scorer to MethodInvocation at 0", "INS SimpleName: scorers to EnhancedForStatement at 1", "INS SimpleName: sentences to MethodInvocation at 4", "INS EnhancedForStatement to Block at 6", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from names to nameSpans", "operations": ["UPD SimpleName: names from names to nameSpans", "UPD SimpleName: names from names to nameSpans"]}, {"root": "UPDATE from ArrayList to List", "operations": ["UPD SimpleName: ArrayList from ArrayList to List", "UPD SimpleType: ArrayList from ArrayList to List"]}, {"root": "MOVE from ParameterizedType: List<LinkedSpan>", "operations": ["MOV SimpleType: LinkedSpan to ParameterizedType: List<LinkedSpan> at 1", "MOV SimpleType: ArrayList to ParameterizedType: List<LinkedSpan> at 0"]}, {"root": "MOVE from ArrayType: String[][]", "operations": ["MOV SimpleType: String to ArrayType: String[][] at 0"]}, {"root": "MOVE from ArrayType: Span[][]", "operations": ["MOV SimpleType: Span to ArrayType: Span[][] at 0"]}, {"root": "MOVE from ArrayType: Span[]", "operations": ["MOV Dimension to ArrayType: Span[] at 1"]}, {"root": "MOVE from ArrayType: Span[]", "operations": ["MOV Dimension to ArrayType: Span[] at 1"]}, {"root": "INS SimpleName: Span to SimpleType: Span at 0", "operations": ["INS SimpleName: Span to SimpleType: Span at 0"]}, {"root": "INS ForStatement to Block at 3", "operations": ["INS SimpleName: tokens to VariableDeclarationFragment at 0", "INS SimpleName: s to ArrayAccess at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS ForStatement to Block at 3", "INS VariableDeclarationStatement to Block at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS InfixExpression: < to ForStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: s to ArrayAccess at 1", "INS SimpleName: s to VariableDeclarationFragment at 0", "INS SimpleName: namesBySentence to ArrayAccess at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS QualifiedName: sentences.length to InfixExpression: < at 1", "INS SimpleName: tokensBySentence to ArrayAccess at 0", "INS SimpleName: s to InfixExpression: < at 0", "INS SimpleName: s to PostfixExpression: ++ at 0", "INS SimpleName: names to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 1", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS Block to ForStatement at 3"]}, {"root": "UPDATE from LinkedSpan to UnsupportedOperationException", "operations": ["UPD SimpleName: LinkedSpan from LinkedSpan to UnsupportedOperationException", "UPD SimpleName: EntityLinkerProperties from EntityLinkerProperties to UnsupportedOperationException", "UPD SimpleName: LinkedSpan from LinkedSpan to UnsupportedOperationException", "UPD SimpleType: EntityLinkerProperties from EntityLinkerProperties to UnsupportedOperationException"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: EntityLinkerProperties to ClassInstanceCreation at 0"]}, {"root": "UPDATE from \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\" to \"The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported\"", "operations": ["UPD StringLiteral: \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\" from \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\" to \"The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported\""]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV StringLiteral: \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\" to ClassInstanceCreation at 1"]}, {"root": "MOVE from SimpleType: Span", "operations": ["MOV SimpleName: Span to SimpleType: Span at 0"]}, {"root": "MOVE from SimpleType: Span", "operations": ["MOV SimpleName: Span to SimpleType: Span at 0"]}, {"root": "MOVE from SimpleType: UnsupportedOperationException", "operations": ["MOV SimpleName: LinkedSpan to SimpleType: UnsupportedOperationException at 0"]}, {"root": "MOVE from SimpleType: UnsupportedOperationException", "operations": ["MOV SimpleName: LinkedSpan to SimpleType: UnsupportedOperationException at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 2"]}, {"root": "UPDATE from text to doctext", "operations": ["UPD SimpleName: text from text to doctext"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: Span[] to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ArrayType: String[] to VariableDeclarationStatement at 0"]}, {"root": "INS Dimension to ArrayType: String[] at 1", "operations": ["INS Dimension to ArrayType: String[] at 1"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS SimpleName: isEmpty to MethodInvocation at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: countryMentions to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: keySet to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS InfixExpression: || to IfStatement at 0", "INS SimpleName: keySet to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: countryMentions to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: isEmpty to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: || to InfixExpression: || at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setSentenceid to MethodInvocation at 1", "INS SimpleName: geoSpan to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: s to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: add to MethodInvocation at 1", "MOV SimpleName: geoSpan to MethodInvocation at 2", "MOV SimpleName: spans to MethodInvocation at 0"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: GeoEntityScorer", "DEL SimpleName: GeoEntityScorer", "DEL SimpleType: GeoEntityScorer", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: scorer", "DEL FieldDeclaration", "DEL SimpleType: GeoEntityScorer"]}, {"root": "DEL SimpleName: countryMentions", "operations": ["DEL SimpleName: countryMentions"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: getNameCodesMap", "DEL SimpleName: score", "DEL SimpleName: sentences", "DEL ExpressionStatement", "DEL NumberLiteral: 1000", "DEL SimpleName: countryMentions", "DEL SimpleName: scorer", "DEL SimpleName: text", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: spans", "DEL SimpleName: countryContext"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: sentence", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL SimpleName: ex", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL ArrayAccess", "DEL SimpleType: ArrayList", "DEL SimpleName: s", "DEL SimpleName: usgsEntries", "DEL SimpleName: getLinkedEntries", "DEL MethodInvocation", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleType: BaseLink", "DEL ForStatement", "DEL SimpleName: String", "DEL SimpleName: usgsEntries", "DEL SimpleName: BaseLink", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: linkerProperties", "DEL SimpleName: GeoEntityLinker", "DEL SimpleName: getName", "DEL SimpleName: spans", "DEL SimpleName: geoSpan", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: keySet", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleType: BaseLink", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: matches", "DEL ArrayAccess", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: size", "DEL SimpleName: i", "DEL ClassInstanceCreation", "DEL SimpleName: setSearchTerm", "DEL ClassInstanceCreation", "DEL SimpleType: LinkedSpan", "DEL ExpressionStatement", "DEL SimpleName: spansToStrings", "DEL SimpleName: countryMentions", "DEL PrefixExpression: !", "DEL VariableDeclarationFragment", "DEL SimpleType: BaseLink", "DEL SimpleType: BaseLink", "DEL InfixExpression: <", "DEL SimpleName: countryContext", "DEL MethodInvocation", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL MethodInvocation", "DEL SimpleName: countryMentions", "DEL IfStatement", "DEL SimpleType: File", "DEL SimpleName: regexfind", "DEL ExpressionStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: Logger", "DEL SimpleType: ArrayList", "DEL SimpleName: geoNamesEntries", "DEL MethodInvocation", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: linkerProperties", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"us\"", "DEL IfStatement", "DEL InfixExpression: >", "DEL VariableDeclarationStatement", "DEL SimpleName: BaseLink", "DEL IfStatement", "DEL SimpleName: sentence", "DEL SimpleName: getStart", "DEL SimpleName: i", "DEL SimpleName: i", "DEL SimpleName: geoSpan", "DEL ArrayAccess", "DEL SimpleName: BaseLink", "DEL SimpleName: find", "DEL SimpleName: getNameCodesMap", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL SimpleName: BaseLink", "DEL NumberLiteral: 0", "DEL SimpleName: countryMentions", "DEL VariableDeclarationStatement", "DEL SimpleName: ArrayList", "DEL Block", "DEL SimpleName: getEnd", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL SimpleName: spans", "DEL MethodInvocation", "DEL SimpleType: BaseLink", "DEL SimpleName: log", "DEL SimpleName: matches", "DEL SimpleName: i", "DEL SimpleName: countryContext", "DEL SimpleName: Span", "DEL SimpleType: LinkedSpan", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL StringLiteral: \"us\"", "DEL SimpleName: LinkedSpan", "DEL SimpleName: ArrayList", "DEL SimpleName: addAll", "DEL SimpleName: geoNamesGaz", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getLogger", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: i", "DEL SimpleType: String", "DEL Block", "DEL ArrayAccess", "DEL SimpleName: substring", "DEL SimpleName: matches", "DEL MethodInvocation", "DEL ArrayAccess", "DEL SimpleName: geoSpan", "DEL SimpleType: LinkedSpan", "DEL SimpleName: linkerProperties", "DEL ParameterizedType: ArrayList<LinkedSpan>", "DEL VariableDeclarationFragment", "DEL SimpleName: score", "DEL Block", "DEL Block", "DEL SimpleName: matches", "DEL SimpleName: countryMentions", "DEL SimpleType: BaseLink", "DEL SimpleName: usgsGaz", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL SimpleName: stringtokens", "DEL SimpleName: text", "DEL SimpleName: contains", "DEL MethodInvocation", "DEL SimpleName: sentences", "DEL SimpleName: ex", "DEL SimpleName: Span", "DEL MethodInvocation", "DEL QualifiedName: matches.length", "DEL ReturnStatement", "DEL SimpleName: ArrayList", "DEL MethodInvocation", "DEL SimpleName: i", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: spansToStrings", "DEL ExpressionStatement", "DEL InfixExpression: ||", "DEL SimpleName: names", "DEL Assignment: =", "DEL SimpleName: keySet", "DEL TypeLiteral", "DEL SimpleName: linkerProperties", "DEL QualifiedName: Level.SEVERE", "DEL MethodInvocation", "DEL SimpleName: countryMentions", "DEL SimpleType: ArrayList", "DEL ArrayType: String[]", "DEL SimpleType: ArrayList", "DEL SimpleName: stringtokens", "DEL SimpleName: add", "DEL SimpleName: spans", "DEL VariableDeclarationStatement", "DEL ArrayAccess", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: geoNamesEntries", "DEL SimpleType: ArrayList", "DEL MethodInvocation", "DEL SimpleType: LinkedSpan", "DEL SimpleName: scorer", "DEL SimpleName: linkerProperties", "DEL SimpleName: s", "DEL SimpleName: geoSpan", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getLinkedEntries", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL MethodInvocation", "DEL SimpleName: getEnd", "DEL SimpleName: BaseLink", "DEL SimpleName: names", "DEL PrefixExpression: !", "DEL SimpleName: keySet", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL IfStatement", "DEL SimpleName: i", "DEL SimpleName: getStart", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL SimpleName: names", "DEL VariableDeclarationFragment", "DEL SimpleName: find", "DEL SimpleName: setSearchTerm", "DEL SimpleName: names", "DEL MethodInvocation", "DEL SimpleName: geoSpan", "DEL SimpleName: ArrayList", "DEL SimpleName: matches", "DEL SimpleName: s", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: text", "DEL SimpleName: geoSpan", "DEL TryStatement", "DEL SimpleType: GeoEntityLinker", "DEL SimpleName: names", "DEL SimpleName: usgsEntries", "DEL SimpleName: countryMentions", "DEL PrimitiveType: int", "DEL SimpleName: text", "DEL SimpleName: sentences", "DEL MethodInvocation", "DEL SimpleName: countryMentions", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: LinkedSpan", "DEL PrefixExpression: !", "DEL SimpleName: ArrayList", "DEL SimpleName: File", "DEL SimpleName: ArrayList", "DEL ParameterizedType: ArrayList<LinkedSpan>", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: BaseLink", "DEL NumberLiteral: 1", "DEL SimpleName: usgsEntries", "DEL MethodInvocation", "DEL NumberLiteral: 1000", "DEL SimpleName: spans", "DEL MethodInvocation", "DEL SimpleName: contains", "DEL SimpleName: isEmpty", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleType: ArrayList", "DEL SimpleName: geoNamesEntries", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: keySet", "DEL SimpleName: countryMentions", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL InfixExpression: &&", "DEL SimpleName: LinkedSpan", "DEL PostfixExpression: ++", "DEL Dimension", "DEL SimpleName: IOException", "DEL SimpleName: tokens", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL ArrayAccess"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: spans", "DEL VariableDeclarationStatement", "DEL SimpleName: geoSpan", "DEL SimpleName: sentence", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: names", "DEL Dimension", "DEL SimpleName: text", "DEL ArrayAccess", "DEL SimpleName: ArrayList", "DEL SimpleName: setSearchTerm", "DEL SimpleName: getEnd", "DEL MethodInvocation", "DEL SimpleName: contains", "DEL SimpleName: usgsEntries", "DEL TypeLiteral", "DEL SimpleName: Span", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: size", "DEL SimpleName: linkerProperties", "DEL SimpleName: getNameCodesMap", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL SimpleName: regexfind", "DEL SimpleName: countryMentions", "DEL MethodInvocation", "DEL SimpleName: addAll", "DEL StringLiteral: \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\"", "DEL SimpleName: matches", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL ReturnStatement", "DEL SimpleName: text", "DEL Block", "DEL SimpleName: matches", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleName: Logger", "DEL SimpleName: geoNamesEntries", "DEL SimpleName: getLinkedEntries", "DEL MethodInvocation", "DEL SimpleName: geoNamesGaz", "DEL SimpleName: find", "DEL SimpleName: BaseLink", "DEL IfStatement", "DEL SimpleName: File", "DEL ParameterizedType: ArrayList<LinkedSpan>", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL NumberLiteral: 2000", "DEL ExpressionStatement", "DEL SimpleName: setSentenceid", "DEL ExpressionStatement", "DEL SimpleName: find", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: keySet", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: BaseLink", "DEL SimpleType: ArrayList", "DEL ExpressionStatement", "DEL SimpleName: sentenceIndex", "DEL MethodInvocation", "DEL ArrayType: String[]", "DEL SimpleType: ArrayList", "DEL SimpleName: s", "DEL QualifiedName: matches.length", "DEL SimpleName: countryContext", "DEL SimpleName: getLinkedEntries", "DEL TryStatement", "DEL SimpleType: File", "DEL SimpleName: usgsGaz", "DEL SimpleName: geoNamesEntries", "DEL SimpleName: setSearchTerm", "DEL SimpleName: countryMentions", "DEL SimpleName: geoSpan", "DEL ForStatement", "DEL SimpleName: spans", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: ArrayList", "DEL ArrayAccess", "DEL IfStatement", "DEL PrefixExpression: !", "DEL SimpleName: matches", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: getStart", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: names", "DEL SimpleName: BaseLink", "DEL SimpleName: i", "DEL SimpleName: matches", "DEL SimpleName: s", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: linkerProperties", "DEL SimpleName: geoSpan", "DEL SimpleName: i", "DEL SimpleName: String", "DEL SimpleName: BaseLink", "DEL Assignment: =", "DEL Block", "DEL SimpleName: isEmpty", "DEL ArrayAccess", "DEL QualifiedName: Level.SEVERE", "DEL SimpleType: BaseLink", "DEL ParameterizedType: ArrayList<LinkedSpan>", "DEL SimpleName: sentences", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: BaseLink", "DEL ArrayAccess", "DEL ArrayAccess", "DEL SimpleName: matches", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: Span", "DEL SimpleName: contains", "DEL SimpleType: BaseLink", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL Block", "DEL SimpleName: sentences", "DEL SimpleName: BaseLink", "DEL SimpleName: stringtokens", "DEL SimpleName: LinkedSpan", "DEL InfixExpression: ||", "DEL SimpleType: String", "DEL Block", "DEL ClassInstanceCreation", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL VariableDeclarationFragment", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ParameterizedType: LinkedSpan<BaseLink>", "DEL SimpleType: ArrayList", "DEL NumberLiteral: 0", "DEL ArrayAccess", "DEL Block", "DEL SimpleType: GeoEntityLinker", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL MethodInvocation", "DEL SimpleName: usgsEntries", "DEL SimpleName: countryMentions", "DEL SimpleName: ex", "DEL SimpleName: countryMentions", "DEL SimpleName: linkerProperties", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: isEmpty", "DEL SimpleName: tokens", "DEL SimpleName: getEnd", "DEL ArrayAccess", "DEL SimpleName: i", "DEL SimpleName: spansToStrings", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SimpleName: geoNamesEntries", "DEL SimpleName: geoSpan", "DEL IfStatement", "DEL SimpleType: ArrayList", "DEL VariableDeclarationStatement", "DEL SimpleName: countryMentions", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: geoSpan", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL SimpleName: spansToStrings", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: countryContext", "DEL ExpressionStatement", "DEL SimpleName: countryMentions", "DEL SimpleName: usgsEntries", "DEL VariableDeclarationFragment", "DEL SimpleName: getLogger", "DEL SimpleName: EntityLinkerProperties", "DEL SimpleType: BaseLink", "DEL SimpleType: BaseLink", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: usgsEntries", "DEL SimpleName: i", "DEL SimpleName: getStart", "DEL SimpleName: substring", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: names", "DEL SimpleName: GeoEntityLinker", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL InfixExpression: &&", "DEL SimpleType: EntityLinkerProperties", "DEL SimpleName: ex", "DEL NullLiteral", "DEL SimpleType: String", "DEL SimpleName: countryMentions", "DEL MethodInvocation", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SimpleName: score", "DEL SimpleName: linkerProperties", "DEL PrefixExpression: !", "DEL SimpleType: LinkedSpan", "DEL SimpleName: names", "DEL SimpleName: countryMentions", "DEL MethodDeclaration", "DEL SimpleName: BaseLink", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: sentenceIndex", "DEL SimpleName: LinkedSpan", "DEL ParameterizedType: ArrayList<BaseLink>", "DEL PostfixExpression: ++", "DEL VariableDeclarationFragment", "DEL InfixExpression: <", "DEL ArrayAccess", "DEL SimpleName: ArrayList", "DEL SimpleName: log", "DEL SimpleName: keySet", "DEL PrefixExpression: !", "DEL SimpleName: sentence", "DEL SimpleName: keySet", "DEL MethodInvocation", "DEL ArrayType: String[]", "DEL SimpleName: getName", "DEL SimpleName: linkerProperties", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: text", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: find", "DEL VariableDeclarationStatement", "DEL Block", "DEL NumberLiteral: 1", "DEL SimpleType: IOException", "DEL SimpleName: geoSpan", "DEL SimpleType: ArrayList", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: spans", "DEL SimpleName: size", "DEL Assignment: =", "DEL SimpleName: stringtokens", "DEL SimpleName: IOException", "DEL SimpleName: s", "DEL VariableDeclarationStatement", "DEL SimpleType: LinkedSpan", "DEL SimpleType: BaseLink", "DEL SimpleName: names", "DEL MethodInvocation", "DEL SimpleType: Span", "DEL SimpleName: scorer", "DEL StringLiteral: \"us\"", "DEL SimpleName: keySet", "DEL SimpleType: LinkedSpan", "DEL StringLiteral: \"us\"", "DEL ExpressionStatement"]}]}}, {"GeoEntityLinker_diff": {"operations": ["Insert MethodDeclaration(554) into TypeDeclaration: class(634) at 13", "Insert MethodDeclaration(595) into TypeDeclaration: class(634) at 14", "Insert MethodDeclaration(633) into TypeDeclaration: class(634) at 15", "Insert MarkerAnnotation(116) into MethodDeclaration(499) at 0", "Insert SingleVariableDeclaration(127) into MethodDeclaration(499) at 4", "Insert SingleVariableDeclaration(140) into MethodDeclaration(499) at 6", "Insert MarkerAnnotation(501) into MethodDeclaration(516) at 0", "Insert MarkerAnnotation(518) into MethodDeclaration(554) at 0", "Move Modifier: public(417) into MethodDeclaration(554) at 1", "Move ParameterizedType: List<LinkedSpan>(422) into MethodDeclaration(554) at 2", "Move SimpleName: find(423) into MethodDeclaration(554) at 3", "Move SingleVariableDeclaration(427) into MethodDeclaration(554) at 4", "Move SingleVariableDeclaration(433) into MethodDeclaration(554) at 5", "Move SingleVariableDeclaration(439) into MethodDeclaration(554) at 6", "Move SingleVariableDeclaration(445) into MethodDeclaration(554) at 7", "Insert Block(553) into MethodDeclaration(554) at 8", "Insert MarkerAnnotation(556) into MethodDeclaration(595) at 0", "Insert Modifier: public(557) into MethodDeclaration(595) at 1", "Move ParameterizedType: List<LinkedSpan>(739) into MethodDeclaration(595) at 2", "Insert SimpleName: find(563) into MethodDeclaration(595) at 3", "Move SingleVariableDeclaration(744) into MethodDeclaration(595) at 4", "Move SingleVariableDeclaration(750) into MethodDeclaration(595) at 5", "Move SingleVariableDeclaration(756) into MethodDeclaration(595) at 6", "Insert SingleVariableDeclaration(585) into MethodDeclaration(595) at 7", "Move SingleVariableDeclaration(765) into MethodDeclaration(595) at 8", "Insert Block(594) into MethodDeclaration(595) at 9", "Insert MarkerAnnotation(597) into MethodDeclaration(633) at 0", "Move Modifier: public(734) into MethodDeclaration(633) at 1", "Insert ParameterizedType: List<LinkedSpan>(603) into MethodDeclaration(633) at 2", "Insert SimpleName: find(604) into MethodDeclaration(633) at 3", "Move SingleVariableDeclaration(133) into MethodDeclaration(633) at 4", "Insert SingleVariableDeclaration(614) into MethodDeclaration(633) at 5", "Move SingleVariableDeclaration(145) into MethodDeclaration(633) at 6", "Move SingleVariableDeclaration(762) into MethodDeclaration(633) at 7", "Insert Block(632) into MethodDeclaration(633) at 8", "Insert SimpleName: Override(115) into MarkerAnnotation(116) at 0", "Move SimpleType: String(812) into SingleVariableDeclaration(127) at 0", "Insert SimpleName: doctext(126) into SingleVariableDeclaration(127) at 1", "Insert ArrayType: String[][](138) into SingleVariableDeclaration(140) at 0", "Insert SimpleName: tokensBySentence(139) into SingleVariableDeclaration(140) at 1", "Insert ArrayType: Span[][](145) into SingleVariableDeclaration(147) at 0", "Update SimpleName: names(150) to namesBySentence", "Insert VariableDeclarationStatement(459) into Block(498) at 2", "Insert ExpressionStatement(466) into Block(498) at 3", "Insert ExpressionStatement(473) into Block(498) at 4", "Insert ExpressionStatement(480) into Block(498) at 5", "Insert EnhancedForStatement(495) into Block(498) at 6", "Insert SimpleName: Override(500) into MarkerAnnotation(501) at 0", "Insert SimpleName: Override(517) into MarkerAnnotation(518) at 0", "Update SimpleName: names(444) to nameSpans", "Insert ThrowStatement(552) into Block(553) at 0", "Insert SimpleName: Override(555) into MarkerAnnotation(556) at 0", "Insert ArrayType: Span[](583) into SingleVariableDeclaration(585) at 0", "Insert SimpleName: nameSpans(584) into SingleVariableDeclaration(585) at 1", "Insert ThrowStatement(593) into Block(594) at 0", "Insert SimpleName: Override(596) into MarkerAnnotation(597) at 0", "Update SimpleType: ArrayList(767) to List", "Move SimpleType: ArrayList(767) into ParameterizedType: List<LinkedSpan>(603) at 0", "Move SimpleType: LinkedSpan(769) into ParameterizedType: List<LinkedSpan>(603) at 1", "Insert ArrayType: Span[](612) into SingleVariableDeclaration(614) at 0", "Insert SimpleName: sentences(613) into SingleVariableDeclaration(614) at 1", "Update SimpleName: names(761) to nameSpans", "Insert ThrowStatement(631) into Block(632) at 0", "Move SimpleType: String(492) into ArrayType: String[][](138) at 0", "Insert Dimension(136) into ArrayType: String[][](138) at 1", "Insert Dimension(137) into ArrayType: String[][](138) at 2", "Move SimpleType: Span(484) into ArrayType: Span[][](145) at 0", "Insert Dimension(143) into ArrayType: Span[][](145) at 1", "Insert Dimension(144) into ArrayType: Span[][](145) at 2", "Insert ParameterizedType: List<LinkedEntityScorer<CountryContext>>(452) into VariableDeclarationStatement(459) at 0", "Insert VariableDeclarationFragment(458) into VariableDeclarationStatement(459) at 1", "Insert MethodInvocation(465) into ExpressionStatement(466) at 0", "Insert MethodInvocation(472) into ExpressionStatement(473) at 0", "Insert MethodInvocation(479) into ExpressionStatement(480) at 0", "Insert SingleVariableDeclaration(484) into EnhancedForStatement(495) at 0", "Insert SimpleName: scorers(485) into EnhancedForStatement(495) at 1", "Insert Block(494) into EnhancedForStatement(495) at 2", "Insert ClassInstanceCreation(551) into ThrowStatement(552) at 0", "Insert SimpleType: Span(581) into ArrayType: Span[](583) at 0", "Move Dimension(507) into ArrayType: Span[](583) at 1", "Insert ClassInstanceCreation(592) into ThrowStatement(593) at 0", "Update SimpleName: ArrayList(766) to List", "Insert SimpleType: Span(610) into ArrayType: Span[](612) at 0", "Move Dimension(827) into ArrayType: Span[](612) at 1", "Insert ClassInstanceCreation(630) into ThrowStatement(631) at 0", "Insert SimpleName: Span(141) into SimpleType: Span(142) at 0", "Insert ForStatement(422) into Block(423) at 3", "Insert SimpleType: List(446) into ParameterizedType: List<LinkedEntityScorer<CountryContext>>(452) at 0", "Insert ParameterizedType: LinkedEntityScorer<CountryContext>(451) into ParameterizedType: List<LinkedEntityScorer<CountryContext>>(452) at 1", "Insert SimpleName: scorers(453) into VariableDeclarationFragment(458) at 0", "Insert ClassInstanceCreation(457) into VariableDeclarationFragment(458) at 1", "Insert SimpleName: scorers(460) into MethodInvocation(465) at 0", "Insert SimpleName: add(461) into MethodInvocation(465) at 1", "Insert ClassInstanceCreation(464) into MethodInvocation(465) at 2", "Insert SimpleName: scorers(467) into MethodInvocation(472) at 0", "Insert SimpleName: add(468) into MethodInvocation(472) at 1", "Insert ClassInstanceCreation(471) into MethodInvocation(472) at 2", "Insert SimpleName: scorers(474) into MethodInvocation(479) at 0", "Insert SimpleName: add(475) into MethodInvocation(479) at 1", "Insert ClassInstanceCreation(478) into MethodInvocation(479) at 2", "Insert SimpleType: LinkedEntityScorer(482) into SingleVariableDeclaration(484) at 0", "Insert SimpleName: scorer(483) into SingleVariableDeclaration(484) at 1", "Insert ExpressionStatement(493) into Block(494) at 0", "Update SimpleType: EntityLinkerProperties(465) to UnsupportedOperationException", "Move SimpleType: EntityLinkerProperties(465) into ClassInstanceCreation(551) at 0", "Update StringLiteral: \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\"(468) to \"The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported\"", "Move StringLiteral: \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\"(468) into ClassInstanceCreation(551) at 1", "Move SimpleName: Span(483) into SimpleType: Span(581) at 0", "Insert SimpleType: UnsupportedOperationException(590) into ClassInstanceCreation(592) at 0", "Insert StringLiteral: \"The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported\"(591) into ClassInstanceCreation(592) at 1", "Move SimpleName: Span(803) into SimpleType: Span(610) at 0", "Insert SimpleType: UnsupportedOperationException(628) into ClassInstanceCreation(630) at 0", "Insert StringLiteral: \"The GeoEntityLinker requires the entire document for proper scoring.\"(629) into ClassInstanceCreation(630) at 1", "Insert VariableDeclarationExpression(200) into ForStatement(422) at 0", "Insert InfixExpression: <(203) into ForStatement(422) at 1", "Insert PostfixExpression: ++(205) into ForStatement(422) at 2", "Insert Block(421) into ForStatement(422) at 3", "Insert SimpleName: List(445) into SimpleType: List(446) at 0", "Insert SimpleType: LinkedEntityScorer(448) into ParameterizedType: LinkedEntityScorer<CountryContext>(451) at 0", "Insert SimpleType: CountryContext(450) into ParameterizedType: LinkedEntityScorer<CountryContext>(451) at 1", "Insert ParameterizedType: ArrayList<>(456) into ClassInstanceCreation(457) at 0", "Insert SimpleType: GeoHashBinScorer(463) into ClassInstanceCreation(464) at 0", "Insert SimpleType: CountryProximityScorer(470) into ClassInstanceCreation(471) at 0", "Insert SimpleName: LinkedEntityScorer(481) into SimpleType: LinkedEntityScorer(482) at 0", "Insert MethodInvocation(492) into ExpressionStatement(493) at 0", "Update SimpleName: EntityLinkerProperties(464) to UnsupportedOperationException", "Update SimpleName: LinkedSpan(635) to UnsupportedOperationException", "Move SimpleName: LinkedSpan(635) into SimpleType: UnsupportedOperationException(590) at 0", "Update SimpleName: LinkedSpan(955) to UnsupportedOperationException", "Move SimpleName: LinkedSpan(955) into SimpleType: UnsupportedOperationException(628) at 0", "Insert PrimitiveType: int(196) into VariableDeclarationExpression(200) at 0", "Insert VariableDeclarationFragment(199) into VariableDeclarationExpression(200) at 1", "Insert SimpleName: s(201) into InfixExpression: <(203) at 0", "Insert QualifiedName: sentences.length(202) into InfixExpression: <(203) at 1", "Insert SimpleName: s(204) into PostfixExpression: ++(205) at 0", "Insert VariableDeclarationStatement(215) into Block(421) at 0", "Insert VariableDeclarationStatement(225) into Block(421) at 1", "Move VariableDeclarationStatement(211) into Block(421) at 2", "Move ForStatement(378) into Block(421) at 3", "Insert SimpleName: LinkedEntityScorer(447) into SimpleType: LinkedEntityScorer(448) at 0", "Insert SimpleName: CountryContext(449) into SimpleType: CountryContext(450) at 0", "Insert SimpleType: ArrayList(455) into ParameterizedType: ArrayList<>(456) at 0", "Insert SimpleName: GeoHashBinScorer(462) into SimpleType: GeoHashBinScorer(463) at 0", "Insert SimpleName: CountryProximityScorer(469) into SimpleType: CountryProximityScorer(470) at 0", "Insert SimpleName: scorer(486) into MethodInvocation(492) at 0", "Insert SimpleName: score(487) into MethodInvocation(492) at 1", "Insert SimpleName: spans(488) into MethodInvocation(492) at 2", "Insert SimpleName: doctext(489) into MethodInvocation(492) at 3", "Insert SimpleName: sentences(490) into MethodInvocation(492) at 4", "Insert SimpleName: countryContext(491) into MethodInvocation(492) at 5", "Update SimpleName: text(184) to doctext", "Insert SimpleName: s(197) into VariableDeclarationFragment(199) at 0", "Insert NumberLiteral: 0(198) into VariableDeclarationFragment(199) at 1", "Move ArrayType: Span[](149) into VariableDeclarationStatement(215) at 0", "Insert VariableDeclarationFragment(214) into VariableDeclarationStatement(215) at 1", "Move ArrayType: String[](508) into VariableDeclarationStatement(225) at 0", "Insert VariableDeclarationFragment(224) into VariableDeclarationStatement(225) at 1", "Insert SimpleName: ArrayList(454) into SimpleType: ArrayList(455) at 0", "Insert SimpleName: names(210) into VariableDeclarationFragment(214) at 0", "Insert ArrayAccess(213) into VariableDeclarationFragment(214) at 1", "Insert Dimension(218) into ArrayType: String[](219) at 1", "Insert SimpleName: tokens(220) into VariableDeclarationFragment(224) at 0", "Insert ArrayAccess(223) into VariableDeclarationFragment(224) at 1", "Insert SimpleName: namesBySentence(211) into ArrayAccess(213) at 0", "Insert SimpleName: s(212) into ArrayAccess(213) at 1", "Insert SimpleName: tokensBySentence(221) into ArrayAccess(223) at 0", "Insert SimpleName: s(222) into ArrayAccess(223) at 1", "Insert InfixExpression: ||(291) into IfStatement(307) at 0", "Insert InfixExpression: ||(333) into IfStatement(348) at 0", "Move InfixExpression: ||(259) into InfixExpression: ||(291) at 0", "Insert MethodInvocation(290) into InfixExpression: ||(291) at 1", "Move MethodInvocation(295) into InfixExpression: ||(333) at 0", "Insert MethodInvocation(332) into InfixExpression: ||(333) at 1", "Insert ExpressionStatement(411) into Block(417) at 1", "Move ExpressionStatement(1016) into Block(417) at 2", "Insert MethodInvocation(288) into MethodInvocation(290) at 0", "Insert SimpleName: isEmpty(289) into MethodInvocation(290) at 1", "Insert MethodInvocation(330) into MethodInvocation(332) at 0", "Insert SimpleName: isEmpty(331) into MethodInvocation(332) at 1", "Insert MethodInvocation(410) into ExpressionStatement(411) at 0", "Move MethodInvocation(373) into ExpressionStatement(416) at 0", "Insert SimpleName: countryMentions(286) into MethodInvocation(288) at 0", "Insert SimpleName: keySet(287) into MethodInvocation(288) at 1", "Insert SimpleName: countryMentions(328) into MethodInvocation(330) at 0", "Insert SimpleName: keySet(329) into MethodInvocation(330) at 1", "Insert SimpleName: geoSpan(407) into MethodInvocation(410) at 0", "Insert SimpleName: setSentenceid(408) into MethodInvocation(410) at 1", "Insert SimpleName: s(409) into MethodInvocation(410) at 2", "Move SimpleName: add(1013) into MethodInvocation(415) at 1", "Move SimpleName: geoSpan(1014) into MethodInvocation(415) at 2", "Delete SimpleName: GeoEntityScorer(35)", "Delete SimpleType: GeoEntityScorer(36)", "Delete SimpleName: scorer(37)", "Delete SimpleName: GeoEntityScorer(38)", "Delete SimpleType: GeoEntityScorer(39)", "Delete ClassInstanceCreation(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete SimpleName: countryMentions(305)", "Delete SimpleName: scorer(379)", "Delete SimpleName: score(380)", "Delete SimpleName: spans(381)", "Delete SimpleName: countryMentions(382)", "Delete SimpleName: countryContext(383)", "Delete SimpleName: getNameCodesMap(384)", "Delete MethodInvocation(385)", "Delete SimpleName: text(386)", "Delete SimpleName: sentences(387)", "Delete NumberLiteral: 1000(388)", "Delete MethodInvocation(389)", "Delete ExpressionStatement(390)", "Delete SimpleName: ArrayList(446)", "Delete SimpleType: ArrayList(447)", "Delete SimpleName: LinkedSpan(448)", "Delete SimpleType: LinkedSpan(449)", "Delete ParameterizedType: ArrayList<LinkedSpan>(450)", "Delete SimpleName: spans(451)", "Delete SimpleName: ArrayList(452)", "Delete SimpleType: ArrayList(453)", "Delete SimpleName: LinkedSpan(454)", "Delete SimpleType: LinkedSpan(455)", "Delete ParameterizedType: ArrayList<LinkedSpan>(456)", "Delete ClassInstanceCreation(457)", "Delete VariableDeclarationFragment(458)", "Delete VariableDeclarationStatement(459)", "Delete SimpleName: linkerProperties(460)", "Delete NullLiteral(461)", "Delete InfixExpression: ==(462)", "Delete SimpleName: linkerProperties(463)", "Delete SimpleName: File(466)", "Delete SimpleType: File(467)", "Delete ClassInstanceCreation(469)", "Delete ClassInstanceCreation(470)", "Delete Assignment: =(471)", "Delete ExpressionStatement(472)", "Delete Block(473)", "Delete IfStatement(474)", "Delete SimpleName: countryMentions(475)", "Delete SimpleName: countryContext(476)", "Delete SimpleName: regexfind(477)", "Delete SimpleName: text(478)", "Delete SimpleName: linkerProperties(479)", "Delete MethodInvocation(480)", "Delete Assignment: =(481)", "Delete ExpressionStatement(482)", "Delete SimpleName: s(485)", "Delete SimpleName: sentences(486)", "Delete NumberLiteral: 0(487)", "Delete ArrayAccess(488)", "Delete VariableDeclarationFragment(489)", "Delete VariableDeclarationStatement(490)", "Delete SimpleName: sentence(493)", "Delete SimpleName: text(494)", "Delete SimpleName: substring(495)", "Delete SimpleName: s(496)", "Delete SimpleName: getStart(497)", "Delete MethodInvocation(498)", "Delete SimpleName: s(499)", "Delete SimpleName: getEnd(500)", "Delete MethodInvocation(501)", "Delete MethodInvocation(502)", "Delete VariableDeclarationFragment(503)", "Delete VariableDeclarationStatement(504)", "Delete SimpleName: stringtokens(509)", "Delete SimpleName: Span(510)", "Delete SimpleName: spansToStrings(511)", "Delete SimpleName: tokens(512)", "Delete SimpleName: sentence(513)", "Delete MethodInvocation(514)", "Delete VariableDeclarationFragment(515)", "Delete VariableDeclarationStatement(516)", "Delete SimpleName: String(517)", "Delete SimpleType: String(518)", "Delete Dimension(519)", "Delete ArrayType: String[](520)", "Delete SimpleName: matches(521)", "Delete SimpleName: Span(522)", "Delete SimpleName: spansToStrings(523)", "Delete SimpleName: names(524)", "Delete SimpleName: stringtokens(525)", "Delete MethodInvocation(526)", "Delete VariableDeclarationFragment(527)", "Delete VariableDeclarationStatement(528)", "Delete PrimitiveType: int(529)", "Delete SimpleName: i(530)", "Delete NumberLiteral: 0(531)", "Delete VariableDeclarationFragment(532)", "Delete VariableDeclarationExpression(533)", "Delete SimpleName: i(534)", "Delete QualifiedName: matches.length(535)", "Delete InfixExpression: <(536)", "Delete SimpleName: i(537)", "Delete PostfixExpression: ++(538)", "Delete SimpleName: ArrayList(539)", "Delete SimpleType: ArrayList(540)", "Delete SimpleName: BaseLink(541)", "Delete SimpleType: BaseLink(542)", "Delete ParameterizedType: ArrayList<BaseLink>(543)", "Delete SimpleName: geoNamesEntries(544)", "Delete SimpleName: ArrayList(545)", "Delete SimpleType: ArrayList(546)", "Delete SimpleName: BaseLink(547)", "Delete SimpleType: BaseLink(548)", "Delete ParameterizedType: ArrayList<BaseLink>(549)", "Delete ClassInstanceCreation(550)", "Delete VariableDeclarationFragment(551)", "Delete VariableDeclarationStatement(552)", "Delete SimpleName: countryMentions(553)", "Delete SimpleName: keySet(554)", "Delete MethodInvocation(555)", "Delete SimpleName: contains(556)", "Delete StringLiteral: \"us\"(557)", "Delete MethodInvocation(558)", "Delete SimpleName: countryMentions(559)", "Delete SimpleName: keySet(560)", "Delete MethodInvocation(561)", "Delete SimpleName: size(562)", "Delete MethodInvocation(563)", "Delete NumberLiteral: 1(564)", "Delete InfixExpression: ==(565)", "Delete InfixExpression: &&(566)", "Delete ParenthesizedExpression(567)", "Delete PrefixExpression: !(568)", "Delete SimpleName: countryMentions(569)", "Delete SimpleName: keySet(570)", "Delete MethodInvocation(571)", "Delete SimpleName: size(572)", "Delete MethodInvocation(573)", "Delete NumberLiteral: 1(574)", "Delete InfixExpression: >(575)", "Delete InfixExpression: ||(576)", "Delete SimpleName: geoNamesEntries(577)", "Delete SimpleName: geoNamesGaz(578)", "Delete SimpleName: find(579)", "Delete SimpleName: matches(580)", "Delete SimpleName: i(581)", "Delete ArrayAccess(582)", "Delete SimpleName: names(583)", "Delete SimpleName: i(584)", "Delete ArrayAccess(585)", "Delete SimpleName: countryMentions(586)", "Delete SimpleName: linkerProperties(587)", "Delete MethodInvocation(588)", "Delete Assignment: =(589)", "Delete ExpressionStatement(590)", "Delete Block(591)", "Delete IfStatement(592)", "Delete SimpleName: ArrayList(593)", "Delete SimpleType: ArrayList(594)", "Delete SimpleName: BaseLink(595)", "Delete SimpleType: BaseLink(596)", "Delete ParameterizedType: ArrayList<BaseLink>(597)", "Delete SimpleName: usgsEntries(598)", "Delete SimpleName: ArrayList(599)", "Delete SimpleType: ArrayList(600)", "Delete SimpleName: BaseLink(601)", "Delete SimpleType: BaseLink(602)", "Delete ParameterizedType: ArrayList<BaseLink>(603)", "Delete ClassInstanceCreation(604)", "Delete VariableDeclarationFragment(605)", "Delete VariableDeclarationStatement(606)", "Delete SimpleName: countryMentions(607)", "Delete SimpleName: keySet(608)", "Delete MethodInvocation(609)", "Delete SimpleName: contains(610)", "Delete StringLiteral: \"us\"(611)", "Delete MethodInvocation(612)", "Delete SimpleName: usgsEntries(613)", "Delete SimpleName: usgsGaz(614)", "Delete SimpleName: find(615)", "Delete SimpleName: matches(616)", "Delete SimpleName: i(617)", "Delete ArrayAccess(618)", "Delete SimpleName: names(619)", "Delete SimpleName: i(620)", "Delete ArrayAccess(621)", "Delete SimpleName: countryMentions(622)", "Delete SimpleName: linkerProperties(623)", "Delete MethodInvocation(624)", "Delete Assignment: =(625)", "Delete ExpressionStatement(626)", "Delete Block(627)", "Delete IfStatement(628)", "Delete SimpleName: LinkedSpan(629)", "Delete SimpleType: LinkedSpan(630)", "Delete SimpleName: BaseLink(631)", "Delete SimpleType: BaseLink(632)", "Delete ParameterizedType: LinkedSpan<BaseLink>(633)", "Delete SimpleName: geoSpan(634)", "Delete SimpleType: LinkedSpan(636)", "Delete SimpleName: BaseLink(637)", "Delete SimpleType: BaseLink(638)", "Delete ParameterizedType: LinkedSpan<BaseLink>(639)", "Delete SimpleName: geoNamesEntries(640)", "Delete SimpleName: names(641)", "Delete SimpleName: i(642)", "Delete ArrayAccess(643)", "Delete SimpleName: getStart(644)", "Delete MethodInvocation(645)", "Delete SimpleName: names(646)", "Delete SimpleName: i(647)", "Delete ArrayAccess(648)", "Delete SimpleName: getEnd(649)", "Delete MethodInvocation(650)", "Delete ClassInstanceCreation(651)", "Delete VariableDeclarationFragment(652)", "Delete VariableDeclarationStatement(653)", "Delete SimpleName: usgsEntries(654)", "Delete SimpleName: isEmpty(655)", "Delete MethodInvocation(656)", "Delete PrefixExpression: !(657)", "Delete SimpleName: geoSpan(658)", "Delete SimpleName: getLinkedEntries(659)", "Delete MethodInvocation(660)", "Delete SimpleName: addAll(661)", "Delete SimpleName: usgsEntries(662)", "Delete MethodInvocation(663)", "Delete ExpressionStatement(664)", "Delete SimpleName: geoSpan(665)", "Delete SimpleName: setSearchTerm(666)", "Delete SimpleName: matches(667)", "Delete SimpleName: i(668)", "Delete ArrayAccess(669)", "Delete MethodInvocation(670)", "Delete ExpressionStatement(671)", "Delete Block(672)", "Delete IfStatement(673)", "Delete SimpleName: geoSpan(674)", "Delete SimpleName: getLinkedEntries(675)", "Delete MethodInvocation(676)", "Delete SimpleName: isEmpty(677)", "Delete MethodInvocation(678)", "Delete PrefixExpression: !(679)", "Delete SimpleName: geoSpan(680)", "Delete SimpleName: setSearchTerm(681)", "Delete SimpleName: matches(682)", "Delete SimpleName: i(683)", "Delete ArrayAccess(684)", "Delete MethodInvocation(685)", "Delete ExpressionStatement(686)", "Delete SimpleName: spans(687)", "Delete SimpleName: add(688)", "Delete SimpleName: geoSpan(689)", "Delete MethodInvocation(690)", "Delete ExpressionStatement(691)", "Delete Block(692)", "Delete IfStatement(693)", "Delete Block(694)", "Delete ForStatement(695)", "Delete Block(696)", "Delete SimpleName: IOException(697)", "Delete SimpleType: IOException(698)", "Delete SimpleName: ex(699)", "Delete SingleVariableDeclaration(700)", "Delete SimpleName: Logger(701)", "Delete SimpleName: getLogger(702)", "Delete SimpleName: GeoEntityLinker(703)", "Delete SimpleType: GeoEntityLinker(704)", "Delete TypeLiteral(705)", "Delete SimpleName: getName(706)", "Delete MethodInvocation(707)", "Delete MethodInvocation(708)", "Delete SimpleName: log(709)", "Delete QualifiedName: Level.SEVERE(710)", "Delete NullLiteral(711)", "Delete SimpleName: ex(712)", "Delete MethodInvocation(713)", "Delete ExpressionStatement(714)", "Delete Block(715)", "Delete CatchClause(716)", "Delete TryStatement(717)", "Delete SimpleName: scorer(718)", "Delete SimpleName: score(719)", "Delete SimpleName: spans(720)", "Delete SimpleName: countryMentions(721)", "Delete SimpleName: countryContext(722)", "Delete SimpleName: getNameCodesMap(723)", "Delete MethodInvocation(724)", "Delete SimpleName: text(725)", "Delete SimpleName: sentences(726)", "Delete NumberLiteral: 1000(727)", "Delete MethodInvocation(728)", "Delete ExpressionStatement(729)", "Delete SimpleName: spans(730)", "Delete ReturnStatement(731)", "Delete Block(732)", "Delete MethodDeclaration(733)", "Delete SimpleName: find(740)", "Delete ParameterizedType: ArrayList<LinkedSpan>(770)", "Delete SimpleName: spans(771)", "Delete SimpleName: ArrayList(772)", "Delete SimpleType: ArrayList(773)", "Delete SimpleName: LinkedSpan(774)", "Delete SimpleType: LinkedSpan(775)", "Delete ParameterizedType: ArrayList<LinkedSpan>(776)", "Delete ClassInstanceCreation(777)", "Delete VariableDeclarationFragment(778)", "Delete VariableDeclarationStatement(779)", "Delete SimpleName: linkerProperties(780)", "Delete NullLiteral(781)", "Delete InfixExpression: ==(782)", "Delete SimpleName: linkerProperties(783)", "Delete SimpleName: EntityLinkerProperties(784)", "Delete SimpleType: EntityLinkerProperties(785)", "Delete SimpleName: File(786)", "Delete SimpleType: File(787)", "Delete StringLiteral: \"C:\\\\temp\\\\opennlpmodels\\\\entitylinker.properties\"(788)", "Delete ClassInstanceCreation(789)", "Delete ClassInstanceCreation(790)", "Delete Assignment: =(791)", "Delete ExpressionStatement(792)", "Delete Block(793)", "Delete IfStatement(794)", "Delete SimpleName: countryMentions(795)", "Delete SimpleName: countryContext(796)", "Delete SimpleName: regexfind(797)", "Delete SimpleName: text(798)", "Delete SimpleName: linkerProperties(799)", "Delete MethodInvocation(800)", "Delete Assignment: =(801)", "Delete ExpressionStatement(802)", "Delete SimpleType: Span(804)", "Delete SimpleName: s(805)", "Delete SimpleName: sentences(806)", "Delete SimpleName: sentenceIndex(807)", "Delete ArrayAccess(808)", "Delete VariableDeclarationFragment(809)", "Delete VariableDeclarationStatement(810)", "Delete SimpleName: sentence(813)", "Delete SimpleName: text(814)", "Delete SimpleName: substring(815)", "Delete SimpleName: s(816)", "Delete SimpleName: getStart(817)", "Delete MethodInvocation(818)", "Delete SimpleName: s(819)", "Delete SimpleName: getEnd(820)", "Delete MethodInvocation(821)", "Delete MethodInvocation(822)", "Delete VariableDeclarationFragment(823)", "Delete VariableDeclarationStatement(824)", "Delete SimpleName: String(825)", "Delete SimpleType: String(826)", "Delete ArrayType: String[](828)", "Delete SimpleName: stringtokens(829)", "Delete SimpleName: Span(830)", "Delete SimpleName: spansToStrings(831)", "Delete SimpleName: tokens(832)", "Delete SimpleName: sentence(833)", "Delete MethodInvocation(834)", "Delete VariableDeclarationFragment(835)", "Delete VariableDeclarationStatement(836)", "Delete SimpleName: String(837)", "Delete SimpleType: String(838)", "Delete Dimension(839)", "Delete ArrayType: String[](840)", "Delete SimpleName: matches(841)", "Delete SimpleName: Span(842)", "Delete SimpleName: spansToStrings(843)", "Delete SimpleName: names(844)", "Delete SimpleName: stringtokens(845)", "Delete MethodInvocation(846)", "Delete VariableDeclarationFragment(847)", "Delete VariableDeclarationStatement(848)", "Delete PrimitiveType: int(849)", "Delete SimpleName: i(850)", "Delete NumberLiteral: 0(851)", "Delete VariableDeclarationFragment(852)", "Delete VariableDeclarationExpression(853)", "Delete SimpleName: i(854)", "Delete QualifiedName: matches.length(855)", "Delete InfixExpression: <(856)", "Delete SimpleName: i(857)", "Delete PostfixExpression: ++(858)", "Delete SimpleName: ArrayList(859)", "Delete SimpleType: ArrayList(860)", "Delete SimpleName: BaseLink(861)", "Delete SimpleType: BaseLink(862)", "Delete ParameterizedType: ArrayList<BaseLink>(863)", "Delete SimpleName: geoNamesEntries(864)", "Delete SimpleName: ArrayList(865)", "Delete SimpleType: ArrayList(866)", "Delete SimpleName: BaseLink(867)", "Delete SimpleType: BaseLink(868)", "Delete ParameterizedType: ArrayList<BaseLink>(869)", "Delete ClassInstanceCreation(870)", "Delete VariableDeclarationFragment(871)", "Delete VariableDeclarationStatement(872)", "Delete SimpleName: countryMentions(873)", "Delete SimpleName: keySet(874)", "Delete MethodInvocation(875)", "Delete SimpleName: contains(876)", "Delete StringLiteral: \"us\"(877)", "Delete MethodInvocation(878)", "Delete SimpleName: countryMentions(879)", "Delete SimpleName: keySet(880)", "Delete MethodInvocation(881)", "Delete SimpleName: size(882)", "Delete MethodInvocation(883)", "Delete NumberLiteral: 1(884)", "Delete InfixExpression: ==(885)", "Delete InfixExpression: &&(886)", "Delete ParenthesizedExpression(887)", "Delete PrefixExpression: !(888)", "Delete SimpleName: countryMentions(889)", "Delete SimpleName: keySet(890)", "Delete MethodInvocation(891)", "Delete SimpleName: size(892)", "Delete MethodInvocation(893)", "Delete NumberLiteral: 1(894)", "Delete InfixExpression: >(895)", "Delete InfixExpression: ||(896)", "Delete SimpleName: geoNamesEntries(897)", "Delete SimpleName: geoNamesGaz(898)", "Delete SimpleName: find(899)", "Delete SimpleName: matches(900)", "Delete SimpleName: i(901)", "Delete ArrayAccess(902)", "Delete SimpleName: names(903)", "Delete SimpleName: i(904)", "Delete ArrayAccess(905)", "Delete SimpleName: countryMentions(906)", "Delete SimpleName: linkerProperties(907)", "Delete MethodInvocation(908)", "Delete Assignment: =(909)", "Delete ExpressionStatement(910)", "Delete Block(911)", "Delete IfStatement(912)", "Delete SimpleName: ArrayList(913)", "Delete SimpleType: ArrayList(914)", "Delete SimpleName: BaseLink(915)", "Delete SimpleType: BaseLink(916)", "Delete ParameterizedType: ArrayList<BaseLink>(917)", "Delete SimpleName: usgsEntries(918)", "Delete SimpleName: ArrayList(919)", "Delete SimpleType: ArrayList(920)", "Delete SimpleName: BaseLink(921)", "Delete SimpleType: BaseLink(922)", "Delete ParameterizedType: ArrayList<BaseLink>(923)", "Delete ClassInstanceCreation(924)", "Delete VariableDeclarationFragment(925)", "Delete VariableDeclarationStatement(926)", "Delete SimpleName: countryMentions(927)", "Delete SimpleName: keySet(928)", "Delete MethodInvocation(929)", "Delete SimpleName: contains(930)", "Delete StringLiteral: \"us\"(931)", "Delete MethodInvocation(932)", "Delete SimpleName: usgsEntries(933)", "Delete SimpleName: usgsGaz(934)", "Delete SimpleName: find(935)", "Delete SimpleName: matches(936)", "Delete SimpleName: i(937)", "Delete ArrayAccess(938)", "Delete SimpleName: names(939)", "Delete SimpleName: i(940)", "Delete ArrayAccess(941)", "Delete SimpleName: countryMentions(942)", "Delete SimpleName: linkerProperties(943)", "Delete MethodInvocation(944)", "Delete Assignment: =(945)", "Delete ExpressionStatement(946)", "Delete Block(947)", "Delete IfStatement(948)", "Delete SimpleName: LinkedSpan(949)", "Delete SimpleType: LinkedSpan(950)", "Delete SimpleName: BaseLink(951)", "Delete SimpleType: BaseLink(952)", "Delete ParameterizedType: LinkedSpan<BaseLink>(953)", "Delete SimpleName: geoSpan(954)", "Delete SimpleType: LinkedSpan(956)", "Delete SimpleName: BaseLink(957)", "Delete SimpleType: BaseLink(958)", "Delete ParameterizedType: LinkedSpan<BaseLink>(959)", "Delete SimpleName: geoNamesEntries(960)", "Delete SimpleName: names(961)", "Delete SimpleName: i(962)", "Delete ArrayAccess(963)", "Delete SimpleName: getStart(964)", "Delete MethodInvocation(965)", "Delete SimpleName: names(966)", "Delete SimpleName: i(967)", "Delete ArrayAccess(968)", "Delete SimpleName: getEnd(969)", "Delete MethodInvocation(970)", "Delete ClassInstanceCreation(971)", "Delete VariableDeclarationFragment(972)", "Delete VariableDeclarationStatement(973)", "Delete SimpleName: usgsEntries(974)", "Delete SimpleName: isEmpty(975)", "Delete MethodInvocation(976)", "Delete PrefixExpression: !(977)", "Delete SimpleName: geoSpan(978)", "Delete SimpleName: getLinkedEntries(979)", "Delete MethodInvocation(980)", "Delete SimpleName: addAll(981)", "Delete SimpleName: usgsEntries(982)", "Delete MethodInvocation(983)", "Delete ExpressionStatement(984)", "Delete SimpleName: geoSpan(985)", "Delete SimpleName: setSearchTerm(986)", "Delete SimpleName: matches(987)", "Delete SimpleName: i(988)", "Delete ArrayAccess(989)", "Delete MethodInvocation(990)", "Delete ExpressionStatement(991)", "Delete Block(992)", "Delete IfStatement(993)", "Delete SimpleName: geoSpan(994)", "Delete SimpleName: getLinkedEntries(995)", "Delete MethodInvocation(996)", "Delete SimpleName: isEmpty(997)", "Delete MethodInvocation(998)", "Delete PrefixExpression: !(999)", "Delete SimpleName: geoSpan(1000)", "Delete SimpleName: setSearchTerm(1001)", "Delete SimpleName: matches(1002)", "Delete SimpleName: i(1003)", "Delete ArrayAccess(1004)", "Delete MethodInvocation(1005)", "Delete ExpressionStatement(1006)", "Delete SimpleName: geoSpan(1007)", "Delete SimpleName: setSentenceid(1008)", "Delete SimpleName: sentenceIndex(1009)", "Delete MethodInvocation(1010)", "Delete ExpressionStatement(1011)", "Delete Block(1017)", "Delete IfStatement(1018)", "Delete Block(1019)", "Delete ForStatement(1020)", "Delete SimpleName: scorer(1021)", "Delete SimpleName: score(1022)", "Delete SimpleName: spans(1023)", "Delete SimpleName: countryMentions(1024)", "Delete SimpleName: countryContext(1025)", "Delete SimpleName: getNameCodesMap(1026)", "Delete MethodInvocation(1027)", "Delete SimpleName: text(1028)", "Delete SimpleName: sentences(1029)", "Delete NumberLiteral: 2000(1030)", "Delete MethodInvocation(1031)", "Delete ExpressionStatement(1032)", "Delete Block(1033)", "Delete SimpleName: IOException(1034)", "Delete SimpleType: IOException(1035)", "Delete SimpleName: ex(1036)", "Delete SingleVariableDeclaration(1037)", "Delete SimpleName: Logger(1038)", "Delete SimpleName: getLogger(1039)", "Delete SimpleName: GeoEntityLinker(1040)", "Delete SimpleType: GeoEntityLinker(1041)", "Delete TypeLiteral(1042)", "Delete SimpleName: getName(1043)", "Delete MethodInvocation(1044)", "Delete MethodInvocation(1045)", "Delete SimpleName: log(1046)", "Delete QualifiedName: Level.SEVERE(1047)", "Delete NullLiteral(1048)", "Delete SimpleName: ex(1049)", "Delete MethodInvocation(1050)", "Delete ExpressionStatement(1051)", "Delete Block(1052)", "Delete CatchClause(1053)", "Delete TryStatement(1054)", "Delete SimpleName: spans(1055)", "Delete ReturnStatement(1056)", "Delete Block(1057)", "Delete MethodDeclaration(1058)"]}}, {"MySQLGeoNamesGazLinkable_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @throws to Javadoc at 5", "INS TextElement:  number of rows to return to TagElement: @param at 1", "INS SimpleName: SQLException to TagElement: @throws at 0", "INS SimpleName: searchString to TagElement: @param at 0", "INS SimpleName: rowsReturned to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 1", "INS TextElement:          the two digit country code to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 3", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: properties to TagElement: @param at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @param to Javadoc at 0", "INS TagElement: @throws to Javadoc at 6", "INS TextElement: connection properties to TagElement: @param at 2", "INS SimpleName: Exception to TagElement: @throws at 0", "INS SimpleName: code to TagElement: @param at 0", "INS TextElement:    EntityLinkerProperties that identifies the database to TagElement: @param at 1", "INS TagElement: @return to Javadoc at 4", "INS TextElement:  the name to look up in the gazateer to TagElement: @param at 1"]}, {"root": "UPDATE from matchthresh to rowsReturned", "operations": ["UPD SimpleName: matchthresh from matchthresh to rowsReturned", "UPD SimpleName: matchthresh from matchthresh to rowsReturned"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: String to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from countryCodes to code", "operations": ["UPD SimpleName: countryCodes from countryCodes to code", "UPD SimpleName: countryCodes from countryCodes to code"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS EnhancedForStatement to Block at 5", "operations": ["INS SimpleName: code to SingleVariableDeclaration at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to EnhancedForStatement at 2", "INS EnhancedForStatement to Block at 5", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "UPDATE from \"mysql.driver\" to \"db.driver\"", "operations": ["UPD StringLiteral: \"mysql.driver\" from \"mysql.driver\" to \"db.driver\""]}, {"root": "UPDATE from \"mysql.url\" to \"db.url\"", "operations": ["UPD StringLiteral: \"mysql.url\" from \"mysql.url\" to \"db.url\""]}, {"root": "UPDATE from \"mysql.username\" to \"db.username\"", "operations": ["UPD StringLiteral: \"mysql.username\" from \"mysql.username\" to \"db.username\""]}, {"root": "UPDATE from \"mysql.password\" to \"db.password\"", "operations": ["UPD StringLiteral: \"mysql.password\" from \"mysql.password\" to \"db.password\""]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: countryCodes to MethodInvocation at 3"]}, {"root": "UPDATE from \"mysqlusgsgazscorethresh\" to \"geonames.gaz.rowsreturned\"", "operations": ["UPD StringLiteral: \"mysqlusgsgazscorethresh\" from \"mysqlusgsgazscorethresh\" to \"geonames.gaz.rowsreturned\""]}, {"root": "UPDATE from \"mysqlfulltext\" to \"dbfulltext\"", "operations": ["UPD StringLiteral: \"mysqlfulltext\" from \"mysqlfulltext\" to \"dbfulltext\""]}, {"root": "INS SimpleName: code to MethodInvocation at 4", "operations": ["INS SimpleName: code to MethodInvocation at 4"]}, {"root": "DEL ParameterizedType: Set<String>", "operations": ["DEL ParameterizedType: Set<String>", "DEL SimpleName: Set", "DEL SimpleType: Set"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getCountryCodeCSV", "DEL MethodInvocation", "DEL SimpleName: CountryContext"]}]}}, {"MySQLGeoNamesGazLinkable_diff": {"operations": ["Update Modifier: protected(184) to private", "Insert Javadoc(279) into MethodDeclaration(600) at 0", "Insert TagElement: @param(263) into Javadoc(279) at 0", "Insert TagElement: @param(266) into Javadoc(279) at 1", "Insert TagElement: @param(269) into Javadoc(279) at 2", "Insert TagElement: @param(273) into Javadoc(279) at 3", "Insert TagElement: @return(274) into Javadoc(279) at 4", "Insert TagElement: @throws(276) into Javadoc(279) at 5", "Insert TagElement: @throws(278) into Javadoc(279) at 6", "Update SimpleName: matchthresh(266) to rowsReturned", "Move SimpleType: String(271) into SingleVariableDeclaration(297) at 0", "Update SimpleName: countryCodes(273) to code", "Move SimpleType: String(205) into VariableDeclarationStatement(210) at 0", "Move SimpleType: String(215) into VariableDeclarationStatement(220) at 0", "Move SimpleType: String(225) into VariableDeclarationStatement(230) at 0", "Move SimpleType: String(195) into VariableDeclarationStatement(240) at 0", "Insert SimpleName: searchString(261) into TagElement: @param(263) at 0", "Insert TextElement:  the name to look up in the gazateer(262) into TagElement: @param(263) at 1", "Insert SimpleName: rowsReturned(264) into TagElement: @param(266) at 0", "Insert TextElement:  number of rows to return(265) into TagElement: @param(266) at 1", "Insert SimpleName: code(267) into TagElement: @param(269) at 0", "Insert TextElement:          the two digit country code(268) into TagElement: @param(269) at 1", "Insert SimpleName: properties(270) into TagElement: @param(273) at 0", "Insert TextElement:    EntityLinkerProperties that identifies the database(271) into TagElement: @param(273) at 1", "Insert TextElement: connection properties(272) into TagElement: @param(273) at 2", "Insert SimpleName: SQLException(275) into TagElement: @throws(276) at 0", "Insert SimpleName: Exception(277) into TagElement: @throws(278) at 0", "Insert EnhancedForStatement(164) into Block(165) at 5", "Update SimpleName: matchthresh(318) to rowsReturned", "Insert SingleVariableDeclaration(148) into EnhancedForStatement(164) at 0", "Move MethodInvocation(153) into EnhancedForStatement(164) at 1", "Insert Block(163) into EnhancedForStatement(164) at 2", "Update StringLiteral: \"mysql.driver\"(199) to \"db.driver\"", "Update StringLiteral: \"mysql.url\"(209) to \"db.url\"", "Update StringLiteral: \"mysql.username\"(219) to \"db.username\"", "Update StringLiteral: \"mysql.password\"(229) to \"db.password\"", "Insert SimpleType: String(146) into SingleVariableDeclaration(148) at 0", "Insert SimpleName: code(147) into SingleVariableDeclaration(148) at 1", "Move ExpressionStatement(157) into Block(163) at 0", "Update SimpleName: countryCodes(327) to code", "Move SimpleName: countryCodes(327) into MethodInvocation(349) at 3", "Update StringLiteral: \"mysqlusgsgazscorethresh\"(120) to \"geonames.gaz.rowsreturned\"", "Insert SimpleName: String(145) into SimpleType: String(146) at 0", "Update StringLiteral: \"mysqlfulltext\"(538) to \"dbfulltext\"", "Insert SimpleName: code(158) into MethodInvocation(160) at 4", "Delete SimpleName: Set(268)", "Delete SimpleType: Set(269)", "Delete ParameterizedType: Set<String>(272)", "Delete SimpleName: CountryContext(325)", "Delete SimpleName: getCountryCodeCSV(326)", "Delete MethodInvocation(328)"]}}, {"MySQLUSGSGazLinkable_cluster": {"actions": [{"root": "UPDATE from protected to private", "operations": ["UPD Modifier: protected from protected to private"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement: @throws to Javadoc at 5", "INS TagElement: @param to Javadoc at 1", "INS TextElement:    EntityLinkerProperties that identifies the database to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 0", "INS SimpleName: Exception to TagElement: @throws at 0", "INS TagElement: @param to Javadoc at 2", "INS TextElement:  number of rows to return to TagElement: @param at 1", "INS SimpleName: properties to TagElement: @param at 0", "INS SimpleName: SQLException to TagElement: @throws at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  the name to look up in the gazateer to TagElement: @param at 1", "INS TextElement: connection properties to TagElement: @param at 2", "INS SimpleName: rowsReturned to TagElement: @param at 0", "INS TagElement: @return to Javadoc at 3", "INS TagElement: @throws to Javadoc at 4", "INS SimpleName: searchString to TagElement: @param at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "UPDATE from Links names to the USGS gazateer to Links names to the USGS gazateer that resides in a database", "operations": ["UPD TextElement: Links names to the USGS gazateer from Links names to the USGS gazateer to Links names to the USGS gazateer that resides in a database"]}, {"root": "UPDATE from matchthresh to rowsReturned", "operations": ["UPD SimpleName: matchthresh from matchthresh to rowsReturned", "UPD SimpleName: matchthresh from matchthresh to rowsReturned"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS Block to TryStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 2", "MOV IfStatement to Block at 3", "MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from \"mysql.driver\" to \"db.driver\"", "operations": ["UPD StringLiteral: \"mysql.driver\" from \"mysql.driver\" to \"db.driver\""]}, {"root": "UPDATE from \"mysql.url\" to \"db.url\"", "operations": ["UPD StringLiteral: \"mysql.url\" from \"mysql.url\" to \"db.url\""]}, {"root": "UPDATE from \"mysql.username\" to \"db.username\"", "operations": ["UPD StringLiteral: \"mysql.username\" from \"mysql.username\" to \"db.username\""]}, {"root": "UPDATE from \"mysql.password\" to \"db.password\"", "operations": ["UPD StringLiteral: \"mysql.password\" from \"mysql.password\" to \"db.password\""]}, {"root": "UPDATE from \"mysqlusgsgazscorethresh\" to \"usgs.gaz.rowsreturned\"", "operations": ["UPD StringLiteral: \"mysqlusgsgazscorethresh\" from \"mysqlusgsgazscorethresh\" to \"usgs.gaz.rowsreturned\""]}, {"root": "UPDATE from \"10\" to \"5\"", "operations": ["UPD StringLiteral: \"10\" from \"10\" to \"5\""]}, {"root": "UPDATE from \"mysqlfulltext\" to \"dbfulltext\"", "operations": ["UPD StringLiteral: \"mysqlfulltext\" from \"mysqlfulltext\" to \"dbfulltext\""]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: Boolean", "DEL FieldDeclaration", "DEL SimpleType: Boolean", "DEL SimpleName: filterCountryContext"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Integer", "DEL ParameterizedType: Map<String,Set<Integer>>", "DEL SimpleName: countryHits", "DEL SimpleName: Map", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Set<Integer>", "DEL SimpleName: Set", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleType: Set", "DEL SimpleName: Integer", "DEL SimpleType: Map"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: keySet", "DEL MethodInvocation", "DEL SimpleName: countryHits"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL Assignment: =", "DEL SimpleName: countryHits", "DEL Block", "DEL SimpleName: keySet", "DEL MethodInvocation", "DEL SimpleName: Boolean", "DEL StringLiteral: \"false\"", "DEL SimpleName: properties", "DEL SimpleName: contains", "DEL StringLiteral: \"geoentitylinker.filter_by_country_context\"", "DEL PrefixExpression: !", "DEL SimpleName: filterCountryContext", "DEL ExpressionStatement", "DEL StringLiteral: \"us\"", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL SimpleName: getProperty", "DEL InfixExpression: ||", "DEL SimpleName: filterCountryContext", "DEL MethodInvocation"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Set", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: Set", "DEL SimpleName: countryCodes", "DEL SimpleName: String", "DEL ParameterizedType: Set<String>"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ParameterizedType: List<CountryContextHit>", "DEL SimpleName: Set", "DEL Block", "DEL ParameterizedType: Set<String>", "DEL SingleVariableDeclaration", "DEL SimpleName: CountryContextHit", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Modifier: private", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: getCountryCode", "DEL MethodDeclaration", "DEL SimpleName: hit", "DEL ExpressionStatement", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL SimpleType: HashSet", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: HashSet", "DEL ReturnStatement", "DEL SimpleName: ccs", "DEL SimpleName: ccs", "DEL SimpleType: CountryContextHit", "DEL ParameterizedType: Set<String>", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: hits", "DEL ParameterizedType: HashSet<String>", "DEL SimpleName: Set", "DEL SimpleName: hit", "DEL SimpleName: List", "DEL SimpleName: toLowerCase", "DEL SimpleName: getCountryCodes", "DEL SimpleName: ccs", "DEL SimpleType: Set", "DEL SimpleName: add", "DEL SimpleName: hits", "DEL VariableDeclarationFragment", "DEL SimpleName: CountryContextHit", "DEL SimpleType: List", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL EnhancedForStatement", "DEL SimpleType: String", "DEL SimpleType: CountryContextHit"]}]}}, {"MySQLUSGSGazLinkable_diff": {"operations": ["Update Modifier: protected(198) to private", "Insert Javadoc(232) into MethodDeclaration(479) at 0", "Update Modifier: private(268) to public", "Update TextElement: Links names to the USGS gazateer(30) to Links names to the USGS gazateer that resides in a database", "Insert TagElement: @param(219) into Javadoc(232) at 0", "Insert TagElement: @param(222) into Javadoc(232) at 1", "Insert TagElement: @param(226) into Javadoc(232) at 2", "Insert TagElement: @return(227) into Javadoc(232) at 3", "Insert TagElement: @throws(229) into Javadoc(232) at 4", "Insert TagElement: @throws(231) into Javadoc(232) at 5", "Update SimpleName: matchthresh(280) to rowsReturned", "Insert Block(121) into TryStatement(142) at 0", "Move SimpleType: String(128) into VariableDeclarationStatement(166) at 0", "Move SimpleType: String(229) into VariableDeclarationStatement(176) at 0", "Move SimpleType: String(219) into VariableDeclarationStatement(186) at 0", "Move SimpleType: String(209) into VariableDeclarationStatement(196) at 0", "Insert SimpleName: searchString(217) into TagElement: @param(219) at 0", "Insert TextElement:  the name to look up in the gazateer(218) into TagElement: @param(219) at 1", "Insert SimpleName: rowsReturned(220) into TagElement: @param(222) at 0", "Insert TextElement:  number of rows to return(221) into TagElement: @param(222) at 1", "Insert SimpleName: properties(223) into TagElement: @param(226) at 0", "Insert TextElement:    EntityLinkerProperties that identifies the database(224) into TagElement: @param(226) at 1", "Insert TextElement: connection properties(225) into TagElement: @param(226) at 2", "Insert SimpleName: SQLException(228) into TagElement: @throws(229) at 0", "Insert SimpleName: Exception(230) into TagElement: @throws(231) at 0", "Move IfStatement(126) into Block(121) at 0", "Move VariableDeclarationStatement(136) into Block(121) at 1", "Move VariableDeclarationStatement(142) into Block(121) at 2", "Move IfStatement(156) into Block(121) at 3", "Move ExpressionStatement(169) into Block(121) at 4", "Update SimpleName: matchthresh(332) to rowsReturned", "Move SimpleType: String(239) into VariableDeclarationStatement(90) at 0", "Update StringLiteral: \"mysql.driver\"(213) to \"db.driver\"", "Update StringLiteral: \"mysql.url\"(223) to \"db.url\"", "Update StringLiteral: \"mysql.username\"(233) to \"db.username\"", "Update StringLiteral: \"mysql.password\"(243) to \"db.password\"", "Update StringLiteral: \"mysqlusgsgazscorethresh\"(132) to \"usgs.gaz.rowsreturned\"", "Update StringLiteral: \"10\"(133) to \"5\"", "Update StringLiteral: \"mysqlfulltext\"(479) to \"dbfulltext\"", "Delete QualifiedName: java.util.HashSet(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.List(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.Map(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Set(20)", "Delete ImportDeclaration(21)", "Delete Modifier: private(41)", "Delete SimpleName: Boolean(42)", "Delete SimpleType: Boolean(43)", "Delete SimpleName: filterCountryContext(44)", "Delete VariableDeclarationFragment(45)", "Delete FieldDeclaration(46)", "Delete SimpleName: Map(66)", "Delete SimpleType: Map(67)", "Delete SimpleName: String(68)", "Delete SimpleType: String(69)", "Delete SimpleName: Set(70)", "Delete SimpleType: Set(71)", "Delete SimpleName: Integer(72)", "Delete SimpleType: Integer(73)", "Delete ParameterizedType: Set<Integer>(74)", "Delete ParameterizedType: Map<String,Set<Integer>>(75)", "Delete SimpleName: countryHits(76)", "Delete SingleVariableDeclaration(77)", "Delete SimpleName: countryHits(163)", "Delete SimpleName: keySet(164)", "Delete MethodInvocation(165)", "Delete SimpleName: filterCountryContext(96)", "Delete SimpleName: Boolean(97)", "Delete SimpleName: valueOf(98)", "Delete SimpleName: properties(99)", "Delete SimpleName: getProperty(100)", "Delete StringLiteral: \"geoentitylinker.filter_by_country_context\"(101)", "Delete StringLiteral: \"false\"(102)", "Delete MethodInvocation(103)", "Delete MethodInvocation(104)", "Delete Assignment: =(105)", "Delete ExpressionStatement(106)", "Delete SimpleName: countryHits(107)", "Delete SimpleName: keySet(108)", "Delete MethodInvocation(109)", "Delete SimpleName: contains(110)", "Delete StringLiteral: \"us\"(111)", "Delete MethodInvocation(112)", "Delete SimpleName: filterCountryContext(113)", "Delete PrefixExpression: !(114)", "Delete InfixExpression: ||(115)", "Delete Block(170)", "Delete IfStatement(171)", "Delete Block(172)", "Delete SimpleName: Set(282)", "Delete SimpleType: Set(283)", "Delete SimpleName: String(284)", "Delete SimpleType: String(285)", "Delete ParameterizedType: Set<String>(286)", "Delete SimpleName: countryCodes(287)", "Delete SingleVariableDeclaration(288)", "Delete Modifier: private(522)", "Delete SimpleName: Set(523)", "Delete SimpleType: Set(524)", "Delete SimpleName: String(525)", "Delete SimpleType: String(526)", "Delete ParameterizedType: Set<String>(527)", "Delete SimpleName: getCountryCodes(528)", "Delete SimpleName: List(529)", "Delete SimpleType: List(530)", "Delete SimpleName: CountryContextHit(531)", "Delete SimpleType: CountryContextHit(532)", "Delete ParameterizedType: List<CountryContextHit>(533)", "Delete SimpleName: hits(534)", "Delete SingleVariableDeclaration(535)", "Delete SimpleName: Set(536)", "Delete SimpleType: Set(537)", "Delete SimpleName: String(538)", "Delete SimpleType: String(539)", "Delete ParameterizedType: Set<String>(540)", "Delete SimpleName: ccs(541)", "Delete SimpleName: HashSet(542)", "Delete SimpleType: HashSet(543)", "Delete SimpleName: String(544)", "Delete SimpleType: String(545)", "Delete ParameterizedType: HashSet<String>(546)", "Delete ClassInstanceCreation(547)", "Delete VariableDeclarationFragment(548)", "Delete VariableDeclarationStatement(549)", "Delete SimpleName: CountryContextHit(550)", "Delete SimpleType: CountryContextHit(551)", "Delete SimpleName: hit(552)", "Delete SingleVariableDeclaration(553)", "Delete SimpleName: hits(554)", "Delete SimpleName: ccs(555)", "Delete SimpleName: add(556)", "Delete SimpleName: hit(557)", "Delete SimpleName: getCountryCode(558)", "Delete MethodInvocation(559)", "Delete SimpleName: toLowerCase(560)", "Delete MethodInvocation(561)", "Delete MethodInvocation(562)", "Delete ExpressionStatement(563)", "Delete Block(564)", "Delete EnhancedForStatement(565)", "Delete SimpleName: ccs(566)", "Delete ReturnStatement(567)", "Delete Block(568)", "Delete MethodDeclaration(569)"]}}], "commit_stats": [{"total_files": 12, "deleted_files": 2, "testing": "False", "maintenance": "False", "build": "False"}]}