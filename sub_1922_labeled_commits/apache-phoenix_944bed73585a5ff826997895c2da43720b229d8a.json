{"application": "apache-phoenix", "csha": "944bed73585a5ff826997895c2da43720b229d8a", "files": [{"MetaDataEndpointImpl_cluster": {"actions": [{"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 8"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 15", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 15", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 13", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 13"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 15", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 15", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: clientVersion to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 14", "operations": ["INS SimpleName: clientVersion to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 14"]}, {"root": "INS IfStatement to Block at 39", "operations": ["INS InfixExpression: < to InfixExpression: && at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS IfStatement to Block at 39", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: indexState to Assignment: = at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: PhoenixDatabaseMetaData.MIN_PENDING_ACTIVE_INDEX to InfixExpression: < at 1", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: clientVersion to InfixExpression: < at 0", "INS QualifiedName: PIndexState.ACTIVE to Assignment: = at 1", "INS SimpleName: indexState to InfixExpression: == at 0"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: getClientVersion to MethodInvocation at 1", "INS SimpleName: request to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: clientVersion to VariableDeclarationFragment at 0"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 4", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 4"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 3", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 3"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 4", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 4"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 6", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 6"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 6", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 6"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 5", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 5"]}, {"root": "INS QualifiedName: HConstants.LATEST_TIMESTAMP to VariableDeclarationFragment at 1", "operations": ["INS QualifiedName: HConstants.LATEST_TIMESTAMP to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 13", "operations": ["INS SimpleName: actualTimestamp to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 13", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: getClientVersion to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 4", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 4"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 6", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 6"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 13", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 13"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 4", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 4"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 4", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getClientVersion to MethodInvocation at 1", "INS SimpleName: request to MethodInvocation at 0"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 5", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 5"]}, {"root": "INS MethodInvocation to MethodInvocation at 3", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: getClientVersion to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 5", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 5"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 5", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 5"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 13", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 13"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: cell to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: timeStamp to Assignment: = at 0", "INS SimpleName: getTimestamp to MethodInvocation at 1"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: && at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: currentState to InfixExpression: == at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleType: Put to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: emptyValue to VariableDeclarationFragment at 0", "INS SimpleName: key to ClassInstanceCreation at 1", "INS SimpleName: Put to SimpleType: Put at 0", "INS SimpleType: Put to ClassInstanceCreation at 0", "INS SimpleName: Put to SimpleType: Put at 0"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: addColumn to MethodInvocation at 1", "INS QualifiedName: HConstants.LATEST_TIMESTAMP to MethodInvocation at 4", "INS ExpressionStatement to Block at 2", "INS QualifiedName: QueryConstants.EMPTY_COLUMN_VALUE_BYTES to MethodInvocation at 5", "INS QualifiedName: QueryConstants.EMPTY_COLUMN_BYTES to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: emptyValue to MethodInvocation at 0", "INS SimpleName: TABLE_FAMILY_BYTES to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: emptyValue to MethodInvocation at 2", "INS SimpleName: tableMetadata to MethodInvocation at 0", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS IfStatement to Block at 5", "INS Block to IfStatement at 1"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 1", "operations": ["INS SimpleName: getIndexState to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "INS SimpleName: index to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: && at 1"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 6", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 6"]}, {"root": "INS MethodInvocation to MethodInvocation at 13", "operations": ["INS MethodInvocation to MethodInvocation at 13", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: getClientVersion to MethodInvocation at 1"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 4", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 4"]}, {"root": "UPDATE from setTimeRange to currentStateKV", "operations": ["UPD SimpleName: setTimeRange from setTimeRange to currentStateKV"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: timeStamp to MethodInvocation at 1", "MOV SimpleName: setTimeRange to MethodInvocation at 0"]}, {"root": "UPDATE from timeStamp to getTimestamp", "operations": ["UPD SimpleName: timeStamp from timeStamp to getTimestamp", "UPD SimpleName: timeStamp from timeStamp to getTimestamp"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 0", "operations": ["INS InfixExpression: == to InfixExpression: || at 1", "INS ParenthesizedExpression to InfixExpression: && at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: currentState to InfixExpression: == at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0 to InfixExpression: != at 1", "INS Block to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: curTimeStampVal to InfixExpression: != at 0", "INS Block to IfStatement at 2", "INS SimpleName: currentState to Assignment: = at 1", "INS SimpleName: newState to Assignment: = at 0", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 12", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 12"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: expectedTimestamp to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 7", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 7"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 5", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 5"]}, {"root": "UPDATE from != to >", "operations": ["UPD InfixExpression: != from != to >"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 5", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 5"]}, {"root": "UPDATE from newDisableTimeStamp to actualTimestamp", "operations": ["UPD SimpleName: newDisableTimeStamp from newDisableTimeStamp to actualTimestamp"]}, {"root": "INS SimpleName: expectedTimestamp to InfixExpression: != at 1", "operations": ["INS SimpleName: expectedTimestamp to InfixExpression: != at 1"]}, {"root": "INS InfixExpression: && to InfixExpression: && at 0", "operations": ["INS SimpleName: newState to InfixExpression: == at 0", "INS SimpleName: newState to InfixExpression: == at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS InfixExpression: == to InfixExpression: || at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS InfixExpression: && to InfixExpression: && at 0"]}, {"root": "UPDATE from add to addColumn", "operations": ["UPD SimpleName: add from add to addColumn"]}, {"root": "INS QualifiedName: HConstants.LATEST_TIMESTAMP to MethodInvocation at 4", "operations": ["INS QualifiedName: HConstants.LATEST_TIMESTAMP to MethodInvocation at 4"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 6", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 6"]}, {"root": "UPDATE from disableTimeStampKVIndex to newDisableTimeStampCell", "operations": ["UPD SimpleName: disableTimeStampKVIndex from disableTimeStampKVIndex to newDisableTimeStampCell"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: disableTimeStampKVIndex to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: timeStamp to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: != to InfixExpression: && at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: getClientVersion to MethodInvocation at 1"]}, {"root": "UPDATE from dataTableKV to CellUtil", "operations": ["UPD SimpleName: dataTableKV from dataTableKV to CellUtil"]}, {"root": "UPDATE from getValue to cloneValue", "operations": ["UPD SimpleName: getValue from getValue to cloneValue"]}, {"root": "INS SimpleName: dataTableKV to MethodInvocation at 2", "operations": ["INS SimpleName: dataTableKV to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 6", "operations": ["INS SimpleName: getClientVersion to MethodInvocation at 1", "INS SimpleName: request to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 6"]}, {"root": "INS MethodInvocation to MethodInvocation at 6", "operations": ["INS MethodInvocation to MethodInvocation at 6", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: getClientVersion to MethodInvocation at 1"]}, {"root": "INS SimpleName: clientVersion to MethodInvocation at 13", "operations": ["INS SimpleName: clientVersion to MethodInvocation at 13"]}, {"root": "INS MethodInvocation to MethodInvocation at 13", "operations": ["INS MethodInvocation to MethodInvocation at 13", "INS SimpleName: request to MethodInvocation at 0", "INS SimpleName: getClientVersion to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 11", "operations": ["INS MethodInvocation to MethodInvocation at 11", "INS SimpleName: getClientVersion to MethodInvocation at 1", "INS SimpleName: request to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 12", "operations": ["INS SimpleName: request to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 12", "INS SimpleName: getClientVersion to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: tableMetadata", "DEL MethodInvocation", "DEL SimpleName: MetaDataUtil", "DEL SimpleName: getClientTimeStamp"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: get", "DEL QualifiedName: PTable.INITIAL_SEQ_NUM"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Math", "DEL MethodInvocation", "DEL SimpleName: abs", "DEL SimpleName: curTimeStampVal"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: createCell", "DEL Block", "DEL SimpleName: set", "DEL SimpleName: key", "DEL InfixExpression: &&", "DEL QualifiedName: KeyValue.Type.Put", "DEL SimpleName: toBytes", "DEL QualifiedName: PIndexState.ACTIVE", "DEL SimpleName: newState", "DEL SimpleName: newKVs", "DEL IfStatement", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL NumberLiteral: 0L", "DEL SimpleName: CellUtil", "DEL MethodInvocation", "DEL QualifiedName: PLong.INSTANCE", "DEL SimpleName: newDisableTimeStamp", "DEL MethodInvocation", "DEL SimpleName: getCode", "DEL InfixExpression: ==", "DEL SimpleName: INDEX_DISABLE_TIMESTAMP_BYTES", "DEL NumberLiteral: 0", "DEL SimpleName: TABLE_FAMILY_BYTES", "DEL MethodInvocation"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL SimpleName: currentState", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL QualifiedName: PIndexState.UNUSABLE", "DEL InfixExpression: ==", "DEL SimpleName: newState", "DEL QualifiedName: PIndexState.ACTIVE", "DEL InfixExpression: &&", "DEL ParenthesizedExpression"]}, {"root": "DEL SimpleName: timeStamp", "operations": ["DEL SimpleName: timeStamp"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleName: dataTableKey", "DEL IfStatement"]}]}}, {"MetaDataEndpointImpl_diff": {"operations": ["Insert SingleVariableDeclaration(2305) into MethodDeclaration(2470) at 7", "Insert SingleVariableDeclaration(2962) into MethodDeclaration(3026) at 9", "Insert SingleVariableDeclaration(4004) into MethodDeclaration(5542) at 6", "Insert SingleVariableDeclaration(6985) into MethodDeclaration(7070) at 8", "Insert SingleVariableDeclaration(9163) into MethodDeclaration(9264) at 8", "Insert SingleVariableDeclaration(10005) into MethodDeclaration(10075) at 6", "Insert SingleVariableDeclaration(10593) into MethodDeclaration(11327) at 15", "Insert SingleVariableDeclaration(11395) into MethodDeclaration(11941) at 5", "Insert SingleVariableDeclaration(12627) into MethodDeclaration(13719) at 13", "Insert SingleVariableDeclaration(14246) into MethodDeclaration(14791) at 15", "Insert SingleVariableDeclaration(16408) into MethodDeclaration(16421) at 5", "Insert SingleVariableDeclaration(16440) into MethodDeclaration(16641) at 6", "Insert SingleVariableDeclaration(17627) into MethodDeclaration(17874) at 14", "Insert PrimitiveType: int(2303) into SingleVariableDeclaration(2305) at 0", "Insert SimpleName: clientVersion(2304) into SingleVariableDeclaration(2305) at 1", "Insert PrimitiveType: int(2960) into SingleVariableDeclaration(2962) at 0", "Insert SimpleName: clientVersion(2961) into SingleVariableDeclaration(2962) at 1", "Insert PrimitiveType: int(4002) into SingleVariableDeclaration(4004) at 0", "Insert SimpleName: clientVersion(4003) into SingleVariableDeclaration(4004) at 1", "Insert IfStatement(4574) into Block(5541) at 39", "Insert PrimitiveType: int(6983) into SingleVariableDeclaration(6985) at 0", "Insert SimpleName: clientVersion(6984) into SingleVariableDeclaration(6985) at 1", "Insert PrimitiveType: int(9161) into SingleVariableDeclaration(9163) at 0", "Insert SimpleName: clientVersion(9162) into SingleVariableDeclaration(9163) at 1", "Insert PrimitiveType: int(10003) into SingleVariableDeclaration(10005) at 0", "Insert SimpleName: clientVersion(10004) into SingleVariableDeclaration(10005) at 1", "Insert PrimitiveType: int(10591) into SingleVariableDeclaration(10593) at 0", "Insert SimpleName: clientVersion(10592) into SingleVariableDeclaration(10593) at 1", "Insert PrimitiveType: int(11393) into SingleVariableDeclaration(11395) at 0", "Insert SimpleName: clientVersion(11394) into SingleVariableDeclaration(11395) at 1", "Insert PrimitiveType: int(12625) into SingleVariableDeclaration(12627) at 0", "Insert SimpleName: clientVersion(12626) into SingleVariableDeclaration(12627) at 1", "Insert PrimitiveType: int(14244) into SingleVariableDeclaration(14246) at 0", "Insert SimpleName: clientVersion(14245) into SingleVariableDeclaration(14246) at 1", "Insert PrimitiveType: int(16406) into SingleVariableDeclaration(16408) at 0", "Insert SimpleName: clientVersion(16407) into SingleVariableDeclaration(16408) at 1", "Insert PrimitiveType: int(16438) into SingleVariableDeclaration(16440) at 0", "Insert SimpleName: clientVersion(16439) into SingleVariableDeclaration(16440) at 1", "Insert Modifier: final(16980) into SingleVariableDeclaration(16984) at 0", "Insert PrimitiveType: int(17625) into SingleVariableDeclaration(17627) at 0", "Insert SimpleName: clientVersion(17626) into SingleVariableDeclaration(17627) at 1", "Insert InfixExpression: &&(4568) into IfStatement(4574) at 0", "Insert Block(4573) into IfStatement(4574) at 1", "Insert InfixExpression: ==(4564) into InfixExpression: &&(4568) at 0", "Insert InfixExpression: <(4567) into InfixExpression: &&(4568) at 1", "Insert ExpressionStatement(4572) into Block(4573) at 0", "Insert VariableDeclarationStatement(7654) into Block(9034) at 0", "Insert SimpleName: clientVersion(16417) into MethodInvocation(16418) at 4", "Insert SimpleName: clientVersion(2996) into MethodInvocation(2997) at 3", "Insert SimpleName: indexState(4562) into InfixExpression: ==(4564) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(4563) into InfixExpression: ==(4564) at 1", "Insert SimpleName: clientVersion(4565) into InfixExpression: <(4567) at 0", "Insert QualifiedName: PhoenixDatabaseMetaData.MIN_PENDING_ACTIVE_INDEX(4566) into InfixExpression: <(4567) at 1", "Insert Assignment: =(4571) into ExpressionStatement(4572) at 0", "Insert PrimitiveType: int(7648) into VariableDeclarationStatement(7654) at 0", "Insert VariableDeclarationFragment(7653) into VariableDeclarationStatement(7654) at 1", "Insert SimpleName: clientVersion(9175) into MethodInvocation(9176) at 4", "Insert SimpleName: clientVersion(10040) into MethodInvocation(10041) at 6", "Insert SimpleName: indexState(4569) into Assignment: =(4571) at 0", "Insert QualifiedName: PIndexState.ACTIVE(4570) into Assignment: =(4571) at 1", "Insert SimpleName: clientVersion(7649) into VariableDeclarationFragment(7653) at 0", "Insert MethodInvocation(7652) into VariableDeclarationFragment(7653) at 1", "Insert SimpleName: clientVersion(9258) into MethodInvocation(9259) at 6", "Insert SimpleName: clientVersion(16627) into MethodInvocation(16628) at 5", "Insert QualifiedName: HConstants.LATEST_TIMESTAMP(18209) into VariableDeclarationFragment(18210) at 1", "Insert VariableDeclarationStatement(18499) into Block(19042) at 12", "Insert MethodInvocation(2122) into MethodInvocation(2123) at 3", "Insert SimpleName: clientVersion(2395) into MethodInvocation(2396) at 4", "Insert SimpleName: request(7650) into MethodInvocation(7652) at 0", "Insert SimpleName: getClientVersion(7651) into MethodInvocation(7652) at 1", "Insert SimpleName: clientVersion(9248) into MethodInvocation(9249) at 6", "Insert SimpleName: clientVersion(11301) into MethodInvocation(11302) at 13", "Insert SimpleName: clientVersion(12959) into MethodInvocation(12960) at 4", "Insert SimpleName: clientVersion(14403) into MethodInvocation(14404) at 4", "Insert MethodInvocation(16351) into MethodInvocation(16352) at 3", "Insert SimpleName: clientVersion(16595) into MethodInvocation(16596) at 5", "Insert MethodInvocation(17518) into MethodInvocation(17519) at 3", "Insert PrimitiveType: long(18493) into VariableDeclarationStatement(18499) at 0", "Insert VariableDeclarationFragment(18498) into VariableDeclarationStatement(18499) at 1", "Move InfixExpression: &&(18639) into IfStatement(18812) at 0", "Insert SimpleName: request(2120) into MethodInvocation(2122) at 0", "Insert SimpleName: getClientVersion(2121) into MethodInvocation(2122) at 1", "Insert SimpleName: clientVersion(7037) into MethodInvocation(7038) at 5", "Insert SimpleName: clientVersion(10662) into MethodInvocation(10663) at 5", "Insert SimpleName: request(16349) into MethodInvocation(16351) at 0", "Insert SimpleName: getClientVersion(16350) into MethodInvocation(16351) at 1", "Insert SimpleName: request(17516) into MethodInvocation(17518) at 0", "Insert SimpleName: getClientVersion(17517) into MethodInvocation(17518) at 1", "Insert SimpleName: clientVersion(17847) into MethodInvocation(17848) at 13", "Insert ExpressionStatement(18295) into Block(18296) at 2", "Insert SimpleName: actualTimestamp(18494) into VariableDeclarationFragment(18498) at 0", "Insert MethodInvocation(18497) into VariableDeclarationFragment(18498) at 1", "Insert ParenthesizedExpression(18738) into InfixExpression: &&(18742) at 0", "Move ExpressionStatement(18746) into Block(19001) at 0", "Insert VariableDeclarationStatement(18845) into Block(19001) at 1", "Insert ExpressionStatement(18853) into Block(19001) at 2", "Insert ExpressionStatement(18858) into Block(19001) at 3", "Insert IfStatement(18904) into Block(19001) at 5", "Insert ParenthesizedExpression(2198) into InfixExpression: &&(2199) at 1", "Insert SimpleName: clientVersion(8061) into MethodInvocation(8062) at 6", "Insert MethodInvocation(10379) into MethodInvocation(10380) at 13", "Insert SimpleName: clientVersion(10848) into MethodInvocation(10849) at 4", "Insert Assignment: =(18294) into ExpressionStatement(18295) at 0", "Update SimpleName: setTimeRange(18256) to currentStateKV", "Move SimpleName: setTimeRange(18256) into MethodInvocation(18497) at 0", "Update SimpleName: timeStamp(18258) to getTimestamp", "Move SimpleName: timeStamp(18258) into MethodInvocation(18497) at 1", "Insert InfixExpression: ||(18737) into ParenthesizedExpression(18738) at 0", "Insert ParenthesizedExpression(18773) into InfixExpression: &&(18777) at 0", "Insert IfStatement(18791) into Block(18810) at 0", "Insert SimpleType: Put(18838) into VariableDeclarationStatement(18845) at 0", "Insert VariableDeclarationFragment(18844) into VariableDeclarationStatement(18845) at 1", "Insert MethodInvocation(18852) into ExpressionStatement(18853) at 0", "Insert MethodInvocation(18857) into ExpressionStatement(18858) at 0", "Move InfixExpression: !=(18720) into IfStatement(18904) at 0", "Insert Block(18903) into IfStatement(18904) at 1", "Insert InfixExpression: ||(2197) into ParenthesizedExpression(2198) at 0", "Insert SimpleName: request(10377) into MethodInvocation(10379) at 0", "Insert SimpleName: getClientVersion(10378) into MethodInvocation(10379) at 1", "Insert SimpleName: clientVersion(14764) into MethodInvocation(14765) at 12", "Insert SimpleName: timeStamp(18290) into Assignment: =(18294) at 0", "Insert MethodInvocation(18293) into Assignment: =(18294) at 1", "Insert VariableDeclarationStatement(18551) into Block(18630) at 1", "Move IfStatement(18477) into Block(18630) at 2", "Move InfixExpression: ==(18635) into InfixExpression: ||(18737) at 0", "Insert InfixExpression: ==(18736) into InfixExpression: ||(18737) at 1", "Insert InfixExpression: ||(18772) into ParenthesizedExpression(18773) at 0", "Insert InfixExpression: !=(18780) into IfStatement(18791) at 0", "Insert Block(18785) into IfStatement(18791) at 1", "Insert Block(18790) into IfStatement(18791) at 2", "Insert SimpleName: Put(18837) into SimpleType: Put(18838) at 0", "Insert SimpleName: emptyValue(18839) into VariableDeclarationFragment(18844) at 0", "Insert ClassInstanceCreation(18843) into VariableDeclarationFragment(18844) at 1", "Insert SimpleName: emptyValue(18846) into MethodInvocation(18852) at 0", "Insert SimpleName: addColumn(18847) into MethodInvocation(18852) at 1", "Insert SimpleName: TABLE_FAMILY_BYTES(18848) into MethodInvocation(18852) at 2", "Insert QualifiedName: QueryConstants.EMPTY_COLUMN_BYTES(18849) into MethodInvocation(18852) at 3", "Insert QualifiedName: HConstants.LATEST_TIMESTAMP(18850) into MethodInvocation(18852) at 4", "Insert QualifiedName: QueryConstants.EMPTY_COLUMN_VALUE_BYTES(18851) into MethodInvocation(18852) at 5", "Insert SimpleName: tableMetadata(18854) into MethodInvocation(18857) at 0", "Insert SimpleName: add(18855) into MethodInvocation(18857) at 1", "Insert SimpleName: emptyValue(18856) into MethodInvocation(18857) at 2", "Move ExpressionStatement(18731) into Block(18903) at 0", "Move VariableDeclarationStatement(18755) into Block(18903) at 1", "Move ExpressionStatement(18763) into Block(18903) at 2", "Move ExpressionStatement(18768) into Block(18903) at 3", "Move InfixExpression: ==(2188) into InfixExpression: ||(2197) at 0", "Insert InfixExpression: ==(2196) into InfixExpression: ||(2197) at 1", "Insert SimpleName: clientVersion(5441) into MethodInvocation(5442) at 7", "Insert SimpleName: clientVersion(11899) into MethodInvocation(11900) at 5", "Insert SimpleName: cell(18291) into MethodInvocation(18293) at 0", "Insert SimpleName: getTimestamp(18292) into MethodInvocation(18293) at 1", "Insert PrimitiveType: long(18545) into VariableDeclarationStatement(18551) at 0", "Insert VariableDeclarationFragment(18550) into VariableDeclarationStatement(18551) at 1", "Update InfixExpression: !=(18455) to >", "Insert SimpleName: currentState(18734) into InfixExpression: ==(18736) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(18735) into InfixExpression: ==(18736) at 1", "Move InfixExpression: ==(18667) into InfixExpression: ||(18772) at 0", "Insert InfixExpression: ==(18771) into InfixExpression: ||(18772) at 1", "Insert SimpleName: curTimeStampVal(18778) into InfixExpression: !=(18780) at 0", "Insert NumberLiteral: 0(18779) into InfixExpression: !=(18780) at 1", "Insert ExpressionStatement(18784) into Block(18785) at 0", "Move ExpressionStatement(18675) into Block(18790) at 0", "Insert SimpleType: Put(18841) into ClassInstanceCreation(18843) at 0", "Insert SimpleName: key(18842) into ClassInstanceCreation(18843) at 1", "Insert MethodInvocation(2194) into InfixExpression: ==(2196) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(2195) into InfixExpression: ==(2196) at 1", "Insert SimpleName: clientVersion(11612) into MethodInvocation(11613) at 5", "Insert SimpleName: expectedTimestamp(18546) into VariableDeclarationFragment(18550) at 0", "Insert MethodInvocation(18549) into VariableDeclarationFragment(18550) at 1", "Update SimpleName: newDisableTimeStamp(18450) to actualTimestamp", "Insert SimpleName: expectedTimestamp(18553) into InfixExpression: >(18554) at 1", "Insert InfixExpression: &&(18607) into InfixExpression: &&(18617) at 0", "Insert SimpleName: currentState(18769) into InfixExpression: ==(18771) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(18770) into InfixExpression: ==(18771) at 1", "Insert Assignment: =(18783) into ExpressionStatement(18784) at 0", "Insert SimpleName: Put(18840) into SimpleType: Put(18841) at 0", "Update SimpleName: add(18757) to addColumn", "Insert QualifiedName: HConstants.LATEST_TIMESTAMP(18894) into MethodInvocation(18896) at 4", "Insert SimpleName: index(2192) into MethodInvocation(2194) at 0", "Insert SimpleName: getIndexState(2193) into MethodInvocation(2194) at 1", "Insert SimpleName: clientVersion(7923) into MethodInvocation(7924) at 6", "Update SimpleName: disableTimeStampKVIndex(18480) to newDisableTimeStampCell", "Move SimpleName: disableTimeStampKVIndex(18480) into MethodInvocation(18549) at 0", "Update SimpleName: timeStamp(18486) to getTimestamp", "Move SimpleName: timeStamp(18486) into MethodInvocation(18549) at 1", "Move InfixExpression: !=(18501) into InfixExpression: &&(18607) at 0", "Insert ParenthesizedExpression(18606) into InfixExpression: &&(18607) at 1", "Insert SimpleName: newState(18781) into Assignment: =(18783) at 0", "Insert SimpleName: currentState(18782) into Assignment: =(18783) at 1", "Insert MethodInvocation(18995) into MethodInvocation(18996) at 4", "Insert InfixExpression: ||(18605) into ParenthesizedExpression(18606) at 0", "Update SimpleName: dataTableKV(18726) to CellUtil", "Update SimpleName: getValue(18727) to cloneValue", "Insert SimpleName: dataTableKV(18876) into MethodInvocation(18877) at 2", "Insert SimpleName: request(18993) into MethodInvocation(18995) at 0", "Insert SimpleName: getClientVersion(18994) into MethodInvocation(18995) at 1", "Insert MethodInvocation(15942) into MethodInvocation(15943) at 6", "Insert MethodInvocation(17162) into MethodInvocation(17163) at 6", "Insert InfixExpression: ==(18601) into InfixExpression: ||(18605) at 0", "Insert InfixExpression: ==(18604) into InfixExpression: ||(18605) at 1", "Insert SimpleName: request(15940) into MethodInvocation(15942) at 0", "Insert SimpleName: getClientVersion(15941) into MethodInvocation(15942) at 1", "Insert SimpleName: request(17160) into MethodInvocation(17162) at 0", "Insert SimpleName: getClientVersion(17161) into MethodInvocation(17162) at 1", "Insert SimpleName: newState(18599) into InfixExpression: ==(18601) at 0", "Insert QualifiedName: PIndexState.DISABLE(18600) into InfixExpression: ==(18601) at 1", "Insert SimpleName: newState(18602) into InfixExpression: ==(18604) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(18603) into InfixExpression: ==(18604) at 1", "Insert SimpleName: clientVersion(10955) into MethodInvocation(10956) at 13", "Insert MethodInvocation(17186) into MethodInvocation(17187) at 13", "Insert SimpleName: request(17184) into MethodInvocation(17186) at 0", "Insert SimpleName: getClientVersion(17185) into MethodInvocation(17186) at 1", "Insert MethodInvocation(16014) into MethodInvocation(16015) at 11", "Insert SimpleName: request(16012) into MethodInvocation(16014) at 0", "Insert SimpleName: getClientVersion(16013) into MethodInvocation(16014) at 1", "Insert MethodInvocation(17426) into MethodInvocation(17427) at 12", "Insert SimpleName: request(17424) into MethodInvocation(17426) at 0", "Insert SimpleName: getClientVersion(17425) into MethodInvocation(17426) at 1", "Delete SimpleName: MetaDataUtil(18092)", "Delete SimpleName: getClientTimeStamp(18093)", "Delete SimpleName: tableMetadata(18094)", "Delete MethodInvocation(18095)", "Delete SimpleName: get(18255)", "Delete QualifiedName: PTable.INITIAL_SEQ_NUM(18257)", "Delete MethodInvocation(18259)", "Delete ExpressionStatement(18260)", "Delete SimpleName: Math(18451)", "Delete SimpleName: abs(18452)", "Delete SimpleName: curTimeStampVal(18453)", "Delete MethodInvocation(18454)", "Delete SimpleName: newState(18443)", "Delete QualifiedName: PIndexState.ACTIVE(18444)", "Delete InfixExpression: ==(18445)", "Delete SimpleName: newDisableTimeStamp(18446)", "Delete NumberLiteral: 0(18447)", "Delete InfixExpression: >(18448)", "Delete InfixExpression: &&(18449)", "Delete SimpleName: newKVs(18478)", "Delete SimpleName: set(18479)", "Delete SimpleName: CellUtil(18481)", "Delete SimpleName: createCell(18482)", "Delete SimpleName: key(18483)", "Delete SimpleName: TABLE_FAMILY_BYTES(18484)", "Delete SimpleName: INDEX_DISABLE_TIMESTAMP_BYTES(18485)", "Delete QualifiedName: KeyValue.Type.Put(18487)", "Delete SimpleName: getCode(18488)", "Delete MethodInvocation(18489)", "Delete QualifiedName: PLong.INSTANCE(18490)", "Delete SimpleName: toBytes(18491)", "Delete NumberLiteral: 0L(18492)", "Delete MethodInvocation(18493)", "Delete MethodInvocation(18494)", "Delete MethodInvocation(18495)", "Delete ExpressionStatement(18496)", "Delete Block(18497)", "Delete IfStatement(18498)", "Delete SimpleName: currentState(18625)", "Delete QualifiedName: PIndexState.UNUSABLE(18626)", "Delete InfixExpression: ==(18627)", "Delete SimpleName: newState(18628)", "Delete QualifiedName: PIndexState.ACTIVE(18629)", "Delete InfixExpression: ==(18630)", "Delete InfixExpression: &&(18631)", "Delete ParenthesizedExpression(18632)", "Delete ParenthesizedExpression(18640)", "Delete InfixExpression: ||(18641)", "Delete SimpleName: timeStamp(18760)", "Delete Block(18732)", "Delete IfStatement(18733)", "Delete SimpleName: dataTableKey(18734)", "Delete NullLiteral(18735)", "Delete InfixExpression: !=(18736)", "Delete Block(18769)", "Delete IfStatement(18770)"]}}, {"MetaDataProtocol_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 26", "operations": ["INS PrimitiveType: long to FieldDeclaration at 3", "INS SimpleName: MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0 to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: public to FieldDeclaration at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleName: MIN_TABLE_TIMESTAMP to InfixExpression: + at 0", "INS NumberLiteral: 28 to InfixExpression: + at 1", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 26", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "UPDATE from 11 to 12", "operations": ["UPD NumberLiteral: 11 from 11 to 12"]}, {"root": "UPDATE from MIN_SYSTEM_TABLE_TIMESTAMP_4_11_0 to MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0", "operations": ["UPD SimpleName: MIN_SYSTEM_TABLE_TIMESTAMP_4_11_0 from MIN_SYSTEM_TABLE_TIMESTAMP_4_11_0 to MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0 to MethodInvocation at 2", "INS ExpressionStatement to Block at 11", "INS SimpleName: TIMESTAMP_VERSION_MAP to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS StringLiteral: \"4.12.x\" to MethodInvocation at 3"]}]}}, {"MetaDataProtocol_diff": {"operations": ["Insert FieldDeclaration(277) into TypeDeclaration: class(1788) at 26", "Insert Modifier: public(268) into FieldDeclaration(277) at 0", "Insert Modifier: static(269) into FieldDeclaration(277) at 1", "Insert Modifier: final(270) into FieldDeclaration(277) at 2", "Insert PrimitiveType: long(271) into FieldDeclaration(277) at 3", "Insert VariableDeclarationFragment(276) into FieldDeclaration(277) at 4", "Update NumberLiteral: 11(84) to 12", "Insert SimpleName: MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0(272) into VariableDeclarationFragment(276) at 0", "Insert InfixExpression: +(275) into VariableDeclarationFragment(276) at 1", "Update SimpleName: MIN_SYSTEM_TABLE_TIMESTAMP_4_11_0(273) to MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0", "Insert ExpressionStatement(375) into Block(376) at 11", "Insert SimpleName: MIN_TABLE_TIMESTAMP(273) into InfixExpression: +(275) at 0", "Insert NumberLiteral: 28(274) into InfixExpression: +(275) at 1", "Insert MethodInvocation(374) into ExpressionStatement(375) at 0", "Insert SimpleName: TIMESTAMP_VERSION_MAP(370) into MethodInvocation(374) at 0", "Insert SimpleName: put(371) into MethodInvocation(374) at 1", "Insert SimpleName: MIN_SYSTEM_TABLE_TIMESTAMP_4_12_0(372) into MethodInvocation(374) at 2", "Insert StringLiteral: \"4.12.x\"(373) into MethodInvocation(374) at 3"]}}, {"MetaDataRegionObserver_cluster": {"actions": [{"root": "INS SingleMemberAnnotation to TypeDeclaration: class at 1", "operations": ["INS SingleMemberAnnotation to TypeDeclaration: class at 1", "INS StringLiteral: \"deprecation\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS Modifier: final to FieldDeclaration at 1", "operations": ["INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS Modifier: final to FieldDeclaration at 1", "operations": ["INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS Modifier: final to FieldDeclaration at 1", "operations": ["INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS NumberLiteral: 10 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 10 to MethodInvocation at 3"]}, {"root": "INS VariableDeclarationStatement to Block at 24", "operations": ["INS SimpleName: PIndexState to SimpleType: PIndexState at 0", "INS SimpleName: indexStateBytes to ArrayAccess at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS SimpleName: PIndexState to MethodInvocation at 0", "INS SimpleType: PIndexState to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ArrayAccess to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 24", "INS SimpleName: indexState to VariableDeclarationFragment at 0"]}, {"root": "INS IfStatement to Block at 25", "operations": ["INS SimpleName: indexState to InfixExpression: == at 0", "INS IfStatement to Block at 25", "INS InfixExpression: == to IfStatement at 0", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS IfStatement to IfStatement at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 30", "operations": ["INS VariableDeclarationStatement to Block at 30", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: upperBoundOfRebuild to VariableDeclarationFragment at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Long to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from indexState to indexStateBytes", "operations": ["UPD SimpleName: indexState from indexState to indexStateBytes"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2", "MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV InfixExpression: + to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from getSerializedBytes to fromSerializedValue", "operations": ["UPD SimpleName: getSerializedBytes from getSerializedBytes to fromSerializedValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSerializedBytes to MethodInvocation at 1"]}, {"root": "INS SimpleName: indexState to InfixExpression: == at 0", "operations": ["INS SimpleName: indexState to InfixExpression: == at 0"]}, {"root": "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "operations": ["INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1"]}, {"root": "INS ContinueStatement to Block at 1", "operations": ["INS ContinueStatement to Block at 1"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS InfixExpression: != to InfixExpression: && at 1", "INS SimpleName: indexState to InfixExpression: != at 0", "INS QualifiedName: PIndexState.ACTIVE to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: indexState to InfixExpression: != at 0", "INS QualifiedName: PIndexState.INACTIVE to InfixExpression: != at 1", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS NullLiteral to MethodInvocation at 5", "INS SimpleName: indexTableFullName to MethodInvocation at 3", "INS SimpleName: updateIndexState to MethodInvocation at 1", "INS SimpleName: IndexUtil to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 2", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4"]}, {"root": "UPDATE from \":\" to \"=\"", "operations": ["UPD StringLiteral: \":\" from \":\" to \"=\""]}, {"root": "INS SimpleName: indexState to InfixExpression: + at 3", "operations": ["INS SimpleName: indexState to InfixExpression: + at 3"]}, {"root": "INS StringLiteral: \". Skipping partial rebuild attempt.\" to InfixExpression: + at 4", "operations": ["INS StringLiteral: \". Skipping partial rebuild attempt.\" to InfixExpression: + at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS NumberLiteral: 0L to MethodInvocation at 5", "operations": ["INS NumberLiteral: 0L to MethodInvocation at 5"]}, {"root": "UPDATE from getIndexDisableTimestamp to latestUpperBoundTimestamp", "operations": ["UPD SimpleName: getIndexDisableTimestamp from getIndexDisableTimestamp to latestUpperBoundTimestamp", "UPD SimpleName: getString from getString to latestUpperBoundTimestamp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getIndexDisableTimestamp to MethodInvocation at 6"]}, {"root": "INS SimpleName: IndexUtil to MethodInvocation at 0", "operations": ["INS SimpleName: IndexUtil to MethodInvocation at 0"]}, {"root": "UPDATE from updateCache to updateIndexState", "operations": ["UPD SimpleName: updateCache from updateCache to updateIndexState"]}, {"root": "UPDATE from indexPTable to conn", "operations": ["UPD SimpleName: indexPTable from indexPTable to conn"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: indexPTable to MethodInvocation at 3", "MOV SimpleName: getSchemaName to MethodInvocation at 4"]}, {"root": "UPDATE from getSchemaName to indexTableFullName", "operations": ["UPD SimpleName: getSchemaName from getSchemaName to indexTableFullName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 5", "MOV SimpleName: getString to MethodInvocation at 7"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: * to MethodInvocation at 6"]}, {"root": "UPDATE from getTableName to getIndexState", "operations": ["UPD SimpleName: getTableName from getTableName to getIndexState"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.hbase.client.Put", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.filter.CompareFilter.CompareOp"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.hbase.util.Bytes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.schema.MetaDataClient"]}, {"root": "DEL QualifiedName: HConstants.LATEST_TIMESTAMP", "operations": ["DEL QualifiedName: HConstants.LATEST_TIMESTAMP"]}, {"root": "DEL NumberLiteral: 10", "operations": ["DEL NumberLiteral: 10"]}, {"root": "DEL SimpleName: configuredBatches", "operations": ["DEL SimpleName: configuredBatches"]}, {"root": "DEL MethodInvocation", "operations": ["DEL QualifiedName: PIndexState.INACTIVE", "DEL SimpleName: Bytes", "DEL SimpleName: getSerializedBytes", "DEL MethodInvocation", "DEL SimpleName: indexState", "DEL MethodInvocation", "DEL SimpleName: compareTo"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: upperBoundOfRebuild"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL SimpleName: Bytes", "DEL SimpleName: compareTo", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: indexState", "DEL QualifiedName: PIndexState.ACTIVE", "DEL NumberLiteral: 0", "DEL SimpleName: getSerializedBytes", "DEL InfixExpression: =="]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleName: indexStateCell", "DEL SimpleName: getTimestamp", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL SimpleName: upperBoundOfRebuild", "DEL InfixExpression: +"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Bytes", "DEL SimpleName: indexState", "DEL MethodInvocation", "DEL SimpleName: toStringBinary"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: indexState", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL QualifiedName: PIndexState.DISABLE", "DEL SimpleName: Bytes", "DEL MethodInvocation", "DEL SimpleName: compareTo", "DEL IfStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: upperBoundOfRebuild", "DEL QualifiedName: HConstants.LATEST_TIMESTAMP", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: abs", "DEL SimpleName: indexPTable", "DEL SimpleName: Math"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: MetaDataClient", "DEL ClassInstanceCreation", "DEL SimpleName: conn", "DEL SimpleType: MetaDataClient"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getString", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: conn", "DEL InfixExpression: +", "DEL SimpleName: metaTable", "DEL ExpressionStatement", "DEL SimpleName: updateDisableTimestamp", "DEL SimpleName: indexPTable", "DEL SimpleName: getIndexDisableTimestamp", "DEL IfStatement", "DEL SimpleName: warn", "DEL MethodInvocation", "DEL StringLiteral: \"The index disabled timestamp for \"", "DEL StringLiteral: \" was updated outside of rebuilder. Will reattempt rebuild next iteration.\"", "DEL SimpleName: indexTableFullName", "DEL SimpleName: indexTableFullName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: LOG"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: updateCache", "DEL SimpleName: getString", "DEL ClassInstanceCreation", "DEL SimpleType: MetaDataClient", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getString", "DEL SimpleName: dataPTable", "DEL MethodInvocation", "DEL SimpleName: getTableName", "DEL SimpleName: getSchemaName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: dataPTable", "DEL SimpleName: conn", "DEL SimpleName: MetaDataClient"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL QualifiedName: PhoenixDatabaseMetaData.TABLE_FAMILY_BYTES", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: indexTableName", "DEL SimpleName: indexTableKey", "DEL QualifiedName: PLong.INSTANCE", "DEL SimpleType: PhoenixConnection", "DEL SimpleName: expectedDisabledTimestamp", "DEL SimpleName: Put", "DEL SimpleName: metaTable", "DEL Modifier: private", "DEL SimpleName: conn", "DEL SimpleName: indexTableName", "DEL SimpleName: IOException", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: disabledTimestamp", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL QualifiedName: PhoenixDatabaseMetaData.TABLE_FAMILY_BYTES", "DEL SimpleName: HTableInterface", "DEL QualifiedName: CompareOp.EQUAL", "DEL QualifiedName: PLong.INSTANCE", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: addColumn", "DEL SingleVariableDeclaration", "DEL SimpleName: expectedDisabledTimestamp", "DEL SimpleName: getTableKeyFromFullName", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL SimpleType: IOException", "DEL SimpleName: put", "DEL SimpleName: toBytes", "DEL SimpleType: Put", "DEL QualifiedName: PhoenixDatabaseMetaData.INDEX_DISABLE_TIMESTAMP_BYTES", "DEL SimpleName: put", "DEL SimpleName: checkAndPut", "DEL Block", "DEL SimpleName: updateDisableTimestamp", "DEL SimpleType: HTableInterface", "DEL SimpleName: indexTableKey", "DEL SimpleType: Put", "DEL SimpleName: Put", "DEL Modifier: static", "DEL SimpleName: indexTableKey", "DEL MethodInvocation", "DEL SimpleName: PhoenixConnection", "DEL PrimitiveType: long", "DEL SimpleName: disabledTimestamp", "DEL PrimitiveType: boolean", "DEL SimpleName: metaTable", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL PrimitiveType: long", "DEL ArrayType: byte[]", "DEL QualifiedName: PhoenixDatabaseMetaData.INDEX_DISABLE_TIMESTAMP_BYTES", "DEL SimpleName: toBytes", "DEL SimpleName: put", "DEL SimpleName: SchemaUtil"]}]}}, {"MetaDataRegionObserver_diff": {"operations": ["Insert SingleMemberAnnotation(138) into TypeDeclaration: class(2159) at 1", "Insert SimpleName: SuppressWarnings(136) into SingleMemberAnnotation(138) at 0", "Insert StringLiteral: \"deprecation\"(137) into SingleMemberAnnotation(138) at 1", "Insert Modifier: final(609) into FieldDeclaration(613) at 1", "Insert Modifier: final(615) into FieldDeclaration(619) at 1", "Insert Modifier: final(621) into FieldDeclaration(625) at 1", "Insert NumberLiteral: 10(669) into MethodInvocation(670) at 3", "Insert VariableDeclarationStatement(1151) into Block(1312) at 24", "Insert IfStatement(1199) into Block(1312) at 25", "Insert VariableDeclarationStatement(1237) into Block(1312) at 29", "Insert SimpleType: PIndexState(1142) into VariableDeclarationStatement(1151) at 0", "Insert VariableDeclarationFragment(1150) into VariableDeclarationStatement(1151) at 1", "Insert InfixExpression: ==(1154) into IfStatement(1199) at 0", "Move Block(1163) into IfStatement(1199) at 1", "Insert IfStatement(1198) into IfStatement(1199) at 2", "Move SimpleType: Long(1194) into VariableDeclarationStatement(1237) at 0", "Insert VariableDeclarationFragment(1236) into VariableDeclarationStatement(1237) at 1", "Update SimpleName: indexState(939) to indexStateBytes", "Insert SimpleName: PIndexState(1141) into SimpleType: PIndexState(1142) at 0", "Insert SimpleName: indexState(1143) into VariableDeclarationFragment(1150) at 0", "Insert MethodInvocation(1149) into VariableDeclarationFragment(1150) at 1", "Insert SimpleName: indexState(1152) into InfixExpression: ==(1154) at 0", "Insert QualifiedName: PIndexState.DISABLE(1153) into InfixExpression: ==(1154) at 1", "Move InfixExpression: ==(1207) into IfStatement(1198) at 0", "Move Block(1216) into IfStatement(1198) at 1", "Move IfStatement(1249) into IfStatement(1198) at 2", "Insert SimpleName: upperBoundOfRebuild(1230) into VariableDeclarationFragment(1236) at 0", "Move InfixExpression: +(1213) into VariableDeclarationFragment(1236) at 1", "Insert SimpleName: PIndexState(1144) into MethodInvocation(1149) at 0", "Update SimpleName: getSerializedBytes(1148) to fromSerializedValue", "Move SimpleName: getSerializedBytes(1148) into MethodInvocation(1149) at 1", "Insert ArrayAccess(1148) into MethodInvocation(1149) at 2", "Insert SimpleName: indexState(1165) into InfixExpression: ==(1167) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(1166) into InfixExpression: ==(1167) at 1", "Insert ContinueStatement(1176) into Block(1177) at 1", "Insert InfixExpression: &&(1184) into IfStatement(1197) at 0", "Insert SimpleName: indexStateBytes(1146) into ArrayAccess(1148) at 0", "Insert NumberLiteral: 0(1147) into ArrayAccess(1148) at 1", "Insert MethodInvocation(1174) into ExpressionStatement(1175) at 0", "Insert InfixExpression: !=(1180) into InfixExpression: &&(1184) at 0", "Insert InfixExpression: !=(1183) into InfixExpression: &&(1184) at 1", "Insert SimpleName: IndexUtil(1168) into MethodInvocation(1174) at 0", "Insert SimpleName: updateIndexState(1169) into MethodInvocation(1174) at 1", "Insert SimpleName: conn(1170) into MethodInvocation(1174) at 2", "Insert SimpleName: indexTableFullName(1171) into MethodInvocation(1174) at 3", "Insert QualifiedName: PIndexState.ACTIVE(1172) into MethodInvocation(1174) at 4", "Insert NullLiteral(1173) into MethodInvocation(1174) at 5", "Insert SimpleName: indexState(1178) into InfixExpression: !=(1180) at 0", "Insert QualifiedName: PIndexState.INACTIVE(1179) into InfixExpression: !=(1180) at 1", "Insert SimpleName: indexState(1181) into InfixExpression: !=(1183) at 0", "Insert QualifiedName: PIndexState.ACTIVE(1182) into InfixExpression: !=(1183) at 1", "Update StringLiteral: \":\"(1239) to \"=\"", "Insert SimpleName: indexState(1190) into InfixExpression: +(1192) at 3", "Insert StringLiteral: \". Skipping partial rebuild attempt.\"(1191) into InfixExpression: +(1192) at 4", "Move ExpressionStatement(1905) into Block(1855) at 0", "Insert NumberLiteral: 0L(1782) into MethodInvocation(1784) at 5", "Update SimpleName: getIndexDisableTimestamp(1798) to latestUpperBoundTimestamp", "Move SimpleName: getIndexDisableTimestamp(1798) into MethodInvocation(1784) at 6", "Insert SimpleName: IndexUtil(1804) into MethodInvocation(1815) at 0", "Update SimpleName: updateCache(1893) to updateIndexState", "Update SimpleName: indexPTable(1894) to conn", "Move SimpleName: indexPTable(1894) into MethodInvocation(1815) at 3", "Update SimpleName: getSchemaName(1895) to indexTableFullName", "Move SimpleName: getSchemaName(1895) into MethodInvocation(1815) at 4", "Move MethodInvocation(1901) into MethodInvocation(1815) at 5", "Move InfixExpression: *(1826) into MethodInvocation(1815) at 6", "Update SimpleName: getString(1902) to latestUpperBoundTimestamp", "Move SimpleName: getString(1902) into MethodInvocation(1815) at 7", "Update SimpleName: getTableName(1900) to getIndexState", "Delete QualifiedName: org.apache.hadoop.hbase.client.Put(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: org.apache.hadoop.hbase.filter.CompareFilter.CompareOp(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: org.apache.hadoop.hbase.util.Bytes(68)", "Delete ImportDeclaration(69)", "Delete QualifiedName: org.apache.phoenix.schema.MetaDataClient(100)", "Delete ImportDeclaration(101)", "Delete QualifiedName: HConstants.LATEST_TIMESTAMP(616)", "Delete NumberLiteral: 10(622)", "Delete SimpleName: configuredBatches(673)", "Delete SimpleName: Bytes(1199)", "Delete SimpleName: compareTo(1200)", "Delete QualifiedName: PIndexState.INACTIVE(1201)", "Delete SimpleName: getSerializedBytes(1202)", "Delete MethodInvocation(1203)", "Delete SimpleName: indexState(1204)", "Delete MethodInvocation(1205)", "Delete NumberLiteral: 0(1206)", "Delete SimpleName: upperBoundOfRebuild(1208)", "Delete Assignment: =(1214)", "Delete SimpleName: Bytes(1217)", "Delete SimpleName: compareTo(1218)", "Delete QualifiedName: PIndexState.ACTIVE(1219)", "Delete SimpleName: getSerializedBytes(1220)", "Delete MethodInvocation(1221)", "Delete SimpleName: indexState(1222)", "Delete MethodInvocation(1223)", "Delete NumberLiteral: 0(1224)", "Delete InfixExpression: ==(1225)", "Delete SimpleName: upperBoundOfRebuild(1226)", "Delete SimpleName: indexStateCell(1227)", "Delete SimpleName: getTimestamp(1228)", "Delete MethodInvocation(1229)", "Delete NumberLiteral: 1(1230)", "Delete InfixExpression: +(1231)", "Delete Assignment: =(1232)", "Delete ExpressionStatement(1233)", "Delete Block(1234)", "Delete SimpleName: Bytes(1240)", "Delete SimpleName: toStringBinary(1241)", "Delete SimpleName: indexState(1242)", "Delete MethodInvocation(1243)", "Delete SimpleName: Bytes(1145)", "Delete SimpleName: compareTo(1146)", "Delete QualifiedName: PIndexState.DISABLE(1147)", "Delete MethodInvocation(1149)", "Delete SimpleName: indexState(1150)", "Delete MethodInvocation(1151)", "Delete NumberLiteral: 0(1152)", "Delete InfixExpression: ==(1153)", "Delete IfStatement(1164)", "Delete SimpleName: upperBoundOfRebuild(1195)", "Delete QualifiedName: HConstants.LATEST_TIMESTAMP(1196)", "Delete VariableDeclarationFragment(1197)", "Delete VariableDeclarationStatement(1198)", "Delete IfStatement(1250)", "Delete SimpleName: Math(1795)", "Delete SimpleName: abs(1796)", "Delete SimpleName: indexPTable(1797)", "Delete MethodInvocation(1799)", "Delete MethodInvocation(1800)", "Delete SimpleName: MetaDataClient(1889)", "Delete SimpleType: MetaDataClient(1890)", "Delete SimpleName: conn(1891)", "Delete ClassInstanceCreation(1892)", "Delete MethodInvocation(1896)", "Delete SimpleName: getString(1897)", "Delete MethodInvocation(1898)", "Delete MethodInvocation(1903)", "Delete SimpleName: updateDisableTimestamp(1821)", "Delete SimpleName: conn(1822)", "Delete SimpleName: indexTableFullName(1823)", "Delete SimpleName: metaTable(1827)", "Delete SimpleName: indexPTable(1828)", "Delete SimpleName: getIndexDisableTimestamp(1829)", "Delete MethodInvocation(1830)", "Delete MethodInvocation(1831)", "Delete PrefixExpression: !(1832)", "Delete SimpleName: LOG(1833)", "Delete SimpleName: warn(1834)", "Delete StringLiteral: \"The index disabled timestamp for \"(1835)", "Delete SimpleName: indexTableFullName(1836)", "Delete StringLiteral: \" was updated outside of rebuilder. Will reattempt rebuild next iteration.\"(1837)", "Delete InfixExpression: +(1838)", "Delete MethodInvocation(1839)", "Delete ExpressionStatement(1840)", "Delete Block(1841)", "Delete IfStatement(1842)", "Delete SimpleName: MetaDataClient(1872)", "Delete SimpleType: MetaDataClient(1873)", "Delete SimpleName: conn(1874)", "Delete ClassInstanceCreation(1875)", "Delete SimpleName: updateCache(1876)", "Delete SimpleName: dataPTable(1877)", "Delete SimpleName: getSchemaName(1878)", "Delete MethodInvocation(1879)", "Delete SimpleName: getString(1880)", "Delete MethodInvocation(1881)", "Delete SimpleName: dataPTable(1882)", "Delete SimpleName: getTableName(1883)", "Delete MethodInvocation(1884)", "Delete SimpleName: getString(1885)", "Delete MethodInvocation(1886)", "Delete MethodInvocation(1887)", "Delete ExpressionStatement(1888)", "Delete Modifier: private(2068)", "Delete Modifier: static(2069)", "Delete PrimitiveType: boolean(2070)", "Delete SimpleName: updateDisableTimestamp(2071)", "Delete SimpleName: PhoenixConnection(2072)", "Delete SimpleType: PhoenixConnection(2073)", "Delete SimpleName: conn(2074)", "Delete SingleVariableDeclaration(2075)", "Delete SimpleName: String(2076)", "Delete SimpleType: String(2077)", "Delete SimpleName: indexTableName(2078)", "Delete SingleVariableDeclaration(2079)", "Delete PrimitiveType: long(2080)", "Delete SimpleName: disabledTimestamp(2081)", "Delete SingleVariableDeclaration(2082)", "Delete SimpleName: HTableInterface(2083)", "Delete SimpleType: HTableInterface(2084)", "Delete SimpleName: metaTable(2085)", "Delete SingleVariableDeclaration(2086)", "Delete PrimitiveType: long(2087)", "Delete SimpleName: expectedDisabledTimestamp(2088)", "Delete SingleVariableDeclaration(2089)", "Delete SimpleName: IOException(2090)", "Delete SimpleType: IOException(2091)", "Delete PrimitiveType: byte(2092)", "Delete Dimension(2093)", "Delete ArrayType: byte[](2094)", "Delete SimpleName: indexTableKey(2095)", "Delete SimpleName: SchemaUtil(2096)", "Delete SimpleName: getTableKeyFromFullName(2097)", "Delete SimpleName: indexTableName(2098)", "Delete MethodInvocation(2099)", "Delete VariableDeclarationFragment(2100)", "Delete VariableDeclarationStatement(2101)", "Delete SimpleName: Put(2102)", "Delete SimpleType: Put(2103)", "Delete SimpleName: put(2104)", "Delete SimpleName: Put(2105)", "Delete SimpleType: Put(2106)", "Delete SimpleName: indexTableKey(2107)", "Delete ClassInstanceCreation(2108)", "Delete VariableDeclarationFragment(2109)", "Delete VariableDeclarationStatement(2110)", "Delete SimpleName: put(2111)", "Delete SimpleName: addColumn(2112)", "Delete QualifiedName: PhoenixDatabaseMetaData.TABLE_FAMILY_BYTES(2113)", "Delete QualifiedName: PhoenixDatabaseMetaData.INDEX_DISABLE_TIMESTAMP_BYTES(2114)", "Delete QualifiedName: PLong.INSTANCE(2115)", "Delete SimpleName: toBytes(2116)", "Delete SimpleName: disabledTimestamp(2117)", "Delete MethodInvocation(2118)", "Delete MethodInvocation(2119)", "Delete ExpressionStatement(2120)", "Delete SimpleName: metaTable(2121)", "Delete SimpleName: checkAndPut(2122)", "Delete SimpleName: indexTableKey(2123)", "Delete QualifiedName: PhoenixDatabaseMetaData.TABLE_FAMILY_BYTES(2124)", "Delete QualifiedName: PhoenixDatabaseMetaData.INDEX_DISABLE_TIMESTAMP_BYTES(2125)", "Delete QualifiedName: CompareOp.EQUAL(2126)", "Delete QualifiedName: PLong.INSTANCE(2127)", "Delete SimpleName: toBytes(2128)", "Delete SimpleName: expectedDisabledTimestamp(2129)", "Delete MethodInvocation(2130)", "Delete SimpleName: put(2131)", "Delete MethodInvocation(2132)", "Delete ReturnStatement(2133)", "Delete Block(2134)", "Delete MethodDeclaration(2135)"]}}, {"MutationState_cluster": {"actions": [{"root": "INS SimpleName: includeAllIndexes to ConditionalExpression at 0", "operations": ["INS SimpleName: includeAllIndexes to ConditionalExpression at 0"]}, {"root": "UPDATE from nonDisabledIndexIterator to maintainedIndexes", "operations": ["UPD SimpleName: nonDisabledIndexIterator from nonDisabledIndexIterator to maintainedIndexes", "UPD SimpleName: nonDisabledIndexIterator from nonDisabledIndexIterator to maintainedIndexes"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: && at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: getIndexState to MethodInvocation at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "INS SimpleName: idxTtable to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 1"]}, {"root": "UPDATE from enabledGlobalIndexIterator to maintainedGlobalIndexes", "operations": ["UPD SimpleName: enabledGlobalIndexIterator from enabledGlobalIndexIterator to maintainedGlobalIndexes"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: table", "DEL SimpleName: includeAllIndexes", "DEL SimpleName: isWALDisabled"]}]}}, {"MutationState_diff": {"operations": ["Insert SimpleName: includeAllIndexes(1811) into ConditionalExpression(1837) at 0", "Update SimpleName: nonDisabledIndexIterator(1817) to maintainedIndexes", "Insert ParenthesizedExpression(3081) into InfixExpression: &&(3087) at 0", "Update SimpleName: enabledGlobalIndexIterator(1828) to maintainedGlobalIndexes", "Insert InfixExpression: ||(3080) into ParenthesizedExpression(3081) at 0", "Move InfixExpression: ==(3078) into InfixExpression: ||(3080) at 0", "Insert InfixExpression: ==(3079) into InfixExpression: ||(3080) at 1", "Update SimpleName: nonDisabledIndexIterator(3484) to maintainedIndexes", "Insert MethodInvocation(3077) into InfixExpression: ==(3079) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(3078) into InfixExpression: ==(3079) at 1", "Insert SimpleName: idxTtable(3075) into MethodInvocation(3077) at 0", "Insert SimpleName: getIndexState(3076) into MethodInvocation(3077) at 1", "Delete SimpleName: includeAllIndexes(1811)", "Delete SimpleName: table(1812)", "Delete SimpleName: isWALDisabled(1813)", "Delete MethodInvocation(1814)", "Delete InfixExpression: ||(1815)"]}}, {"IndexMaintainer_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: indexState to VariableDeclarationFragment at 0", "INS Modifier: private to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 0", "INS SimpleName: indexState to InfixExpression: == at 1", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleName: sendIndexMaintainer to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS PrefixExpression: ! to ReturnStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleType: PIndexState to VariableDeclarationStatement at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS Block to MethodDeclaration at 5", "INS Modifier: static to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS InfixExpression: == to InfixExpression: || at 0", "INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 0", "INS SimpleName: PIndexState to SimpleType: PIndexState at 0", "INS SimpleName: indexState to InfixExpression: == at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: Iterator<PTable> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "UPDATE from nonDisabledIndexIterator to maintainedIndexes", "operations": ["UPD SimpleName: nonDisabledIndexIterator from nonDisabledIndexIterator to maintainedIndexes", "UPD SimpleName: nonDisabledIndexIterator from nonDisabledIndexIterator to maintainedIndexes", "UPD SimpleName: enabledLocalIndexIterator from enabledLocalIndexIterator to maintainedIndexes"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV ParameterizedType: Iterator<PTable> to MethodDeclaration at 2"]}, {"root": "UPDATE from enabledGlobalIndexIterator to maintainedGlobalIndexes", "operations": ["UPD SimpleName: enabledGlobalIndexIterator from enabledGlobalIndexIterator to maintainedGlobalIndexes"]}, {"root": "UPDATE from enabledLocalIndexIterator to maintainedLocalIndexes", "operations": ["UPD SimpleName: enabledLocalIndexIterator from enabledLocalIndexIterator to maintainedLocalIndexes", "UPD SimpleName: nonDisabledIndexIterator from nonDisabledIndexIterator to maintainedLocalIndexes", "UPD SimpleName: enabledLocalIndexIterator from enabledLocalIndexIterator to maintainedLocalIndexes"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: equals to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: Predicate<PTable> to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ParameterizedType: Predicate<PTable> to ClassInstanceCreation at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: PTable to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: index to SingleVariableDeclaration at 1", "INS SimpleName: PTable to SimpleType: PTable at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: index to MethodInvocation at 1"]}, {"root": "UPDATE from equals to sendIndexMaintainer", "operations": ["UPD SimpleName: equals from equals to sendIndexMaintainer", "UPD SimpleName: equals from equals to sendIndexMaintainer", "UPD SimpleName: equals from equals to sendIndexMaintainer"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS MethodInvocation to InfixExpression: && at 0"]}, {"root": "INS InfixExpression: == to InfixExpression: && at 1", "operations": ["INS InfixExpression: == to InfixExpression: && at 1", "INS QualifiedName: IndexType.GLOBAL to InfixExpression: == at 1"]}, {"root": "INS MethodInvocation to InfixExpression: && at 0", "operations": ["INS MethodInvocation to InfixExpression: && at 0"]}, {"root": "INS InfixExpression: == to InfixExpression: && at 1", "operations": ["INS QualifiedName: IndexType.LOCAL to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: && at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: index to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: index to MethodInvocation at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL QualifiedName: PIndexState.DISABLE", "DEL PrefixExpression: !", "DEL MethodInvocation"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: getIndexState", "DEL QualifiedName: PIndexState.DISABLE"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL QualifiedName: IndexType.LOCAL", "DEL MethodInvocation", "DEL SimpleName: equals"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL MethodInvocation", "DEL QualifiedName: PIndexState.DISABLE", "DEL PrefixExpression: !", "DEL SimpleName: getIndexState", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: equals", "DEL MethodInvocation", "DEL QualifiedName: IndexType.LOCAL"]}]}}, {"IndexMaintainer_diff": {"operations": ["Insert MethodDeclaration(321) into TypeDeclaration: class(9401) at 8", "Insert Modifier: private(294) into MethodDeclaration(321) at 0", "Insert Modifier: static(295) into MethodDeclaration(321) at 1", "Insert PrimitiveType: boolean(296) into MethodDeclaration(321) at 2", "Insert SimpleName: sendIndexMaintainer(297) into MethodDeclaration(321) at 3", "Move SingleVariableDeclaration(325) into MethodDeclaration(321) at 4", "Insert Block(320) into MethodDeclaration(321) at 5", "Move ParameterizedType: Iterator<PTable>(348) into MethodDeclaration(365) at 2", "Update SimpleName: nonDisabledIndexIterator(301) to maintainedIndexes", "Move SingleVariableDeclaration(356) into MethodDeclaration(365) at 5", "Move ParameterizedType: Iterator<PTable>(300) into MethodDeclaration(415) at 2", "Update SimpleName: enabledGlobalIndexIterator(349) to maintainedGlobalIndexes", "Move SingleVariableDeclaration(308) into MethodDeclaration(415) at 4", "Update SimpleName: enabledLocalIndexIterator(405) to maintainedLocalIndexes", "Insert VariableDeclarationStatement(309) into Block(320) at 0", "Insert ReturnStatement(319) into Block(320) at 1", "Insert SimpleType: PIndexState(303) into VariableDeclarationStatement(309) at 0", "Insert VariableDeclarationFragment(308) into VariableDeclarationStatement(309) at 1", "Insert PrefixExpression: !(318) into ReturnStatement(319) at 0", "Insert SimpleName: PIndexState(302) into SimpleType: PIndexState(303) at 0", "Insert SimpleName: indexState(304) into VariableDeclarationFragment(308) at 0", "Move MethodInvocation(330) into VariableDeclarationFragment(308) at 1", "Insert ParenthesizedExpression(317) into PrefixExpression: !(318) at 0", "Insert InfixExpression: ||(316) into ParenthesizedExpression(317) at 0", "Move ParameterizedType: Predicate<PTable>(364) into ClassInstanceCreation(361) at 0", "Move ParameterizedType: Predicate<PTable>(316) into ClassInstanceCreation(411) at 0", "Update SimpleName: nonDisabledIndexIterator(539) to maintainedIndexes", "Insert InfixExpression: ==(312) into InfixExpression: ||(316) at 0", "Insert InfixExpression: ==(315) into InfixExpression: ||(316) at 1", "Move MethodInvocation(641) into ConditionalExpression(660) at 3", "Insert QualifiedName: PIndexState.DISABLE(310) into InfixExpression: ==(312) at 0", "Insert SimpleName: indexState(311) into InfixExpression: ==(312) at 1", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(313) into InfixExpression: ==(315) at 0", "Insert SimpleName: indexState(314) into InfixExpression: ==(315) at 1", "Move MarkerAnnotation(366) into MethodDeclaration(359) at 0", "Move SingleVariableDeclaration(373) into MethodDeclaration(359) at 5", "Move MarkerAnnotation(318) into MethodDeclaration(409) at 0", "Insert SingleVariableDeclaration(397) into MethodDeclaration(409) at 4", "Update SimpleName: enabledLocalIndexIterator(556) to maintainedLocalIndexes", "Insert SimpleType: PTable(395) into SingleVariableDeclaration(397) at 0", "Insert SimpleName: index(396) into SingleVariableDeclaration(397) at 1", "Update SimpleName: nonDisabledIndexIterator(642) to maintainedLocalIndexes", "Update SimpleName: enabledLocalIndexIterator(637) to maintainedIndexes", "Insert MethodInvocation(356) into ReturnStatement(357) at 0", "Insert SimpleName: PTable(394) into SimpleType: PTable(395) at 0", "Update SimpleName: equals(327) to sendIndexMaintainer", "Move SimpleName: equals(327) into MethodInvocation(356) at 0", "Insert SimpleName: index(355) into MethodInvocation(356) at 1", "Insert MethodInvocation(400) into InfixExpression: &&(406) at 0", "Insert InfixExpression: ==(405) into InfixExpression: &&(406) at 1", "Insert MethodInvocation(450) into InfixExpression: &&(456) at 0", "Insert InfixExpression: ==(455) into InfixExpression: &&(456) at 1", "Update SimpleName: equals(375) to sendIndexMaintainer", "Move SimpleName: equals(375) into MethodInvocation(400) at 0", "Move SimpleName: index(376) into MethodInvocation(400) at 1", "Move MethodInvocation(383) into InfixExpression: ==(405) at 0", "Insert QualifiedName: IndexType.GLOBAL(404) into InfixExpression: ==(405) at 1", "Update SimpleName: equals(431) to sendIndexMaintainer", "Move SimpleName: equals(431) into MethodInvocation(450) at 0", "Move SimpleName: index(432) into MethodInvocation(450) at 1", "Move MethodInvocation(439) into InfixExpression: ==(455) at 0", "Insert QualifiedName: IndexType.LOCAL(454) into InfixExpression: ==(455) at 1", "Delete QualifiedName: PIndexState.DISABLE(326)", "Delete MethodInvocation(331)", "Delete PrefixExpression: !(332)", "Delete QualifiedName: PIndexState.DISABLE(374)", "Delete SimpleName: getIndexState(377)", "Delete MethodInvocation(378)", "Delete MethodInvocation(379)", "Delete PrefixExpression: !(380)", "Delete SimpleName: equals(384)", "Delete QualifiedName: IndexType.LOCAL(385)", "Delete MethodInvocation(386)", "Delete PrefixExpression: !(387)", "Delete QualifiedName: PIndexState.DISABLE(430)", "Delete SimpleName: getIndexState(433)", "Delete MethodInvocation(434)", "Delete MethodInvocation(435)", "Delete PrefixExpression: !(436)", "Delete SimpleName: equals(440)", "Delete QualifiedName: IndexType.LOCAL(441)", "Delete MethodInvocation(442)"]}}, {"PhoenixIndexFailurePolicy_cluster": {"actions": [{"root": "UPDATE from PIndexState.ACTIVE to PIndexState.PENDING_ACTIVE", "operations": ["UPD QualifiedName: PIndexState.ACTIVE from PIndexState.ACTIVE to PIndexState.PENDING_ACTIVE"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.schema.PTable.IndexType", "DEL ImportDeclaration"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: getIndexType", "DEL QualifiedName: IndexType.LOCAL", "DEL InfixExpression: ==", "DEL Block", "DEL QualifiedName: PIndexState.ACTIVE", "DEL InfixExpression: ==", "DEL InfixExpression: &&", "DEL SimpleName: index", "DEL IfStatement", "DEL SimpleName: getIndexState", "DEL SimpleName: index", "DEL MethodInvocation"]}]}}, {"PhoenixIndexFailurePolicy_diff": {"operations": ["Update QualifiedName: PIndexState.ACTIVE(689) to PIndexState.PENDING_ACTIVE", "Move Block(1001) into EnhancedForStatement(989) at 2", "Delete QualifiedName: org.apache.phoenix.schema.PTable.IndexType(68)", "Delete ImportDeclaration(69)", "Delete SimpleName: index(962)", "Delete SimpleName: getIndexType(963)", "Delete MethodInvocation(964)", "Delete QualifiedName: IndexType.LOCAL(965)", "Delete InfixExpression: ==(966)", "Delete SimpleName: index(967)", "Delete SimpleName: getIndexState(968)", "Delete MethodInvocation(969)", "Delete QualifiedName: PIndexState.ACTIVE(970)", "Delete InfixExpression: ==(971)", "Delete InfixExpression: &&(972)", "Delete IfStatement(1002)", "Delete Block(1003)"]}}, {"PhoenixDatabaseMetaData_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: class at 220", "operations": ["INS SimpleName: VersionUtil to MethodInvocation at 0", "INS Modifier: public to FieldDeclaration at 0", "INS StringLiteral: \"0\" to MethodInvocation at 4", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS StringLiteral: \"12\" to MethodInvocation at 3", "INS Modifier: static to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 220", "INS SimpleName: encodeVersion to MethodInvocation at 1", "INS StringLiteral: \"4\" to MethodInvocation at 2", "INS SimpleName: MIN_PENDING_ACTIVE_INDEX to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: int to FieldDeclaration at 3"]}]}}, {"PhoenixDatabaseMetaData_diff": {"operations": ["Insert FieldDeclaration(2437) into TypeDeclaration: class(7257) at 220", "Insert Modifier: public(2425) into FieldDeclaration(2437) at 0", "Insert Modifier: static(2426) into FieldDeclaration(2437) at 1", "Insert Modifier: final(2427) into FieldDeclaration(2437) at 2", "Insert PrimitiveType: int(2428) into FieldDeclaration(2437) at 3", "Insert VariableDeclarationFragment(2436) into FieldDeclaration(2437) at 4", "Insert SimpleName: MIN_PENDING_ACTIVE_INDEX(2429) into VariableDeclarationFragment(2436) at 0", "Insert MethodInvocation(2435) into VariableDeclarationFragment(2436) at 1", "Insert SimpleName: VersionUtil(2430) into MethodInvocation(2435) at 0", "Insert SimpleName: encodeVersion(2431) into MethodInvocation(2435) at 1", "Insert StringLiteral: \"4\"(2432) into MethodInvocation(2435) at 2", "Insert StringLiteral: \"12\"(2433) into MethodInvocation(2435) at 3", "Insert StringLiteral: \"0\"(2434) into MethodInvocation(2435) at 4"]}}, {"QueryOptimizer_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 10", "operations": ["INS SimpleName: indexState to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 10", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PIndexState to VariableDeclarationStatement at 0", "INS SimpleName: PIndexState to SimpleType: PIndexState at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: indexState to InfixExpression: == at 0", "INS QualifiedName: PIndexState.ACTIVE to InfixExpression: == at 1", "INS SimpleName: indexState to InfixExpression: == at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: indexState to Assignment: = at 0", "INS ExpressionStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS QualifiedName: PIndexState.PENDING_ACTIVE to InfixExpression: == at 1", "INS InfixExpression: || to IfStatement at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: indexState to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: indexState to InfixExpression: == at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1", "MOV QualifiedName: PIndexState.ACTIVE to InfixExpression: == at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: equals", "DEL QualifiedName: PIndexState.ACTIVE"]}, {"root": "DEL InfixExpression: ==", "operations": ["DEL InfixExpression: =="]}]}}, {"QueryOptimizer_diff": {"operations": ["Insert VariableDeclarationStatement(1221) into Block(1838) at 10", "Insert SimpleType: PIndexState(1208) into VariableDeclarationStatement(1221) at 0", "Insert VariableDeclarationFragment(1220) into VariableDeclarationStatement(1221) at 1", "Insert InfixExpression: ||(1228) into IfStatement(1835) at 0", "Insert SimpleName: PIndexState(1207) into SimpleType: PIndexState(1208) at 0", "Insert SimpleName: indexState(1209) into VariableDeclarationFragment(1220) at 0", "Move MethodInvocation(1218) into VariableDeclarationFragment(1220) at 1", "Insert InfixExpression: ==(1224) into InfixExpression: ||(1228) at 0", "Insert InfixExpression: ==(1227) into InfixExpression: ||(1228) at 1", "Insert SimpleName: indexState(1222) into InfixExpression: ==(1224) at 0", "Insert QualifiedName: PIndexState.ACTIVE(1223) into InfixExpression: ==(1224) at 1", "Insert SimpleName: indexState(1225) into InfixExpression: ==(1227) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(1226) into InfixExpression: ==(1227) at 1", "Insert ExpressionStatement(1307) into Block(1377) at 4", "Insert Assignment: =(1306) into ExpressionStatement(1307) at 0", "Insert InfixExpression: ||(1314) into IfStatement(1376) at 0", "Insert SimpleName: indexState(1298) into Assignment: =(1306) at 0", "Move MethodInvocation(1295) into Assignment: =(1306) at 1", "Insert InfixExpression: ==(1310) into InfixExpression: ||(1314) at 0", "Insert InfixExpression: ==(1313) into InfixExpression: ||(1314) at 1", "Insert SimpleName: indexState(1308) into InfixExpression: ==(1310) at 0", "Move QualifiedName: PIndexState.ACTIVE(1296) into InfixExpression: ==(1310) at 1", "Insert SimpleName: indexState(1311) into InfixExpression: ==(1313) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(1312) into InfixExpression: ==(1313) at 1", "Delete QualifiedName: PIndexState.ACTIVE(1207)", "Delete SimpleName: equals(1208)", "Delete MethodInvocation(1219)", "Delete InfixExpression: ==(1297)"]}}, {"QueryServicesOptions_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 41", "MOV ImportDeclaration to CompilationUnit at 41", "MOV ImportDeclaration to CompilationUnit at 41", "MOV ImportDeclaration to CompilationUnit at 44", "MOV ImportDeclaration to CompilationUnit at 45"]}, {"root": "INS ImportDeclaration to CompilationUnit at 25", "operations": ["INS QualifiedName: org.apache.phoenix.query.QueryServices.INDEX_REBUILD_TASK_INITIAL_DELAY to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 25"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 227", "operations": ["INS SimpleName: QueryServicesOptions to SimpleType: QueryServicesOptions at 0", "INS MethodDeclaration to TypeDeclaration: class at 227", "INS ReturnStatement to Block at 1", "INS SimpleName: setIndexRebuildTaskInitialDelay to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS ThisExpression to ReturnStatement at 0", "INS SimpleName: INDEX_REBUILD_TASK_INITIAL_DELAY to MethodInvocation at 2", "INS SimpleName: waitTime to MethodInvocation at 3", "INS SimpleName: setLong to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: config to MethodInvocation at 0", "INS SimpleType: QueryServicesOptions to MethodDeclaration at 1", "INS SimpleName: waitTime to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0"]}]}}, {"QueryServicesOptions_diff": {"operations": ["Move ImportDeclaration(142) into CompilationUnit(3053) at 41", "Move ImportDeclaration(144) into CompilationUnit(3053) at 41", "Move ImportDeclaration(146) into CompilationUnit(3053) at 41", "Move ImportDeclaration(148) into CompilationUnit(3053) at 44", "Move ImportDeclaration(150) into CompilationUnit(3053) at 45", "Insert ImportDeclaration(66) into CompilationUnit(3053) at 25", "Insert QualifiedName: org.apache.phoenix.query.QueryServices.INDEX_REBUILD_TASK_INITIAL_DELAY(65) into ImportDeclaration(66) at 0", "Insert MethodDeclaration(3051) into TypeDeclaration: class(3052) at 227", "Insert Modifier: public(3035) into MethodDeclaration(3051) at 0", "Insert SimpleType: QueryServicesOptions(3037) into MethodDeclaration(3051) at 1", "Insert SimpleName: setIndexRebuildTaskInitialDelay(3038) into MethodDeclaration(3051) at 2", "Insert SingleVariableDeclaration(3041) into MethodDeclaration(3051) at 3", "Insert Block(3050) into MethodDeclaration(3051) at 4", "Insert SimpleName: QueryServicesOptions(3036) into SimpleType: QueryServicesOptions(3037) at 0", "Insert PrimitiveType: long(3039) into SingleVariableDeclaration(3041) at 0", "Insert SimpleName: waitTime(3040) into SingleVariableDeclaration(3041) at 1", "Insert ExpressionStatement(3047) into Block(3050) at 0", "Insert ReturnStatement(3049) into Block(3050) at 1", "Insert MethodInvocation(3046) into ExpressionStatement(3047) at 0", "Insert ThisExpression(3048) into ReturnStatement(3049) at 0", "Insert SimpleName: config(3042) into MethodInvocation(3046) at 0", "Insert SimpleName: setLong(3043) into MethodInvocation(3046) at 1", "Insert SimpleName: INDEX_REBUILD_TASK_INITIAL_DELAY(3044) into MethodInvocation(3046) at 2", "Insert SimpleName: waitTime(3045) into MethodInvocation(3046) at 3"]}}, {"PIndexState_cluster": {"actions": [{"root": "INS EnumConstantDeclaration to EnumDeclaration at 9", "operations": ["INS EnumConstantDeclaration to EnumDeclaration at 9", "INS SimpleName: PENDING_ACTIVE to EnumConstantDeclaration at 0", "INS StringLiteral: \"p\" to EnumConstantDeclaration at 1"]}]}}, {"PIndexState_diff": {"operations": ["Insert EnumConstantDeclaration(29) into EnumDeclaration(320) at 9", "Insert SimpleName: PENDING_ACTIVE(27) into EnumConstantDeclaration(29) at 0", "Insert StringLiteral: \"p\"(28) into EnumConstantDeclaration(29) at 1"]}}, {"MutableIndexFailureIT_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "UPDATE from org.apache.hadoop.hbase.HBaseIOException to java.io.IOException", "operations": ["UPD QualifiedName: org.apache.hadoop.hbase.HBaseIOException from org.apache.hadoop.hbase.HBaseIOException to java.io.IOException"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 11"]}, {"root": "UPDATE from HBaseIOException to IOException", "operations": ["UPD SimpleName: HBaseIOException from HBaseIOException to IOException", "UPD SimpleType: HBaseIOException from HBaseIOException to IOException"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 42"]}, {"root": "UPDATE from assertEquals to assertTrue", "operations": ["UPD SimpleName: assertEquals from assertEquals to assertTrue"]}, {"root": "INS InfixExpression: || to MethodInvocation at 1", "operations": ["INS MethodInvocation to InfixExpression: || at 1", "INS MethodInvocation to MethodInvocation at 0", "INS InfixExpression: || to MethodInvocation at 1", "INS QualifiedName: PIndexState.PENDING_ACTIVE to MethodInvocation at 0", "INS SimpleName: indexState to MethodInvocation at 2", "INS SimpleName: equalsIgnoreCase to MethodInvocation at 1", "INS SimpleName: indexState to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: || at 0"]}, {"root": "INS BooleanLiteral: false to MethodInvocation at 2", "operations": ["INS BooleanLiteral: false to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from getString to equalsIgnoreCase", "operations": ["UPD SimpleName: getString from getString to equalsIgnoreCase"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getString to MethodInvocation at 1", "MOV SimpleName: rs to MethodInvocation at 1"]}, {"root": "UPDATE from rs to toString", "operations": ["UPD SimpleName: rs from rs to toString"]}, {"root": "DEL MethodInvocation", "operations": ["DEL StringLiteral: \"INDEX_STATE\"", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: leaveIndexActiveOnFailure", "operations": ["DEL SimpleName: leaveIndexActiveOnFailure"]}]}}, {"MutableIndexFailureIT_diff": {"operations": ["Move ImportDeclaration(35) into CompilationUnit(2637) at 6", "Update QualifiedName: org.apache.hadoop.hbase.HBaseIOException(34) to java.io.IOException", "Move ExpressionStatement(493) into Block(576) at 11", "Update SimpleType: HBaseIOException(2414) to IOException", "Update SimpleName: HBaseIOException(2413) to IOException", "Move VariableDeclarationStatement(1401) into Block(1711) at 42", "Update SimpleName: assertEquals(1382) to assertTrue", "Insert InfixExpression: ||(1404) into MethodInvocation(1405) at 1", "Insert BooleanLiteral: false(1436) into MethodInvocation(1437) at 2", "Insert MethodInvocation(1397) into InfixExpression: ||(1404) at 0", "Insert MethodInvocation(1403) into InfixExpression: ||(1404) at 1", "Move MethodInvocation(1385) into MethodInvocation(1397) at 0", "Insert SimpleName: equalsIgnoreCase(1395) into MethodInvocation(1397) at 1", "Insert SimpleName: indexState(1396) into MethodInvocation(1397) at 2", "Insert MethodInvocation(1400) into MethodInvocation(1403) at 0", "Update SimpleName: getString(1387) to equalsIgnoreCase", "Move SimpleName: getString(1387) into MethodInvocation(1403) at 1", "Insert SimpleName: indexState(1402) into MethodInvocation(1403) at 2", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(1398) into MethodInvocation(1400) at 0", "Update SimpleName: rs(1386) to toString", "Move SimpleName: rs(1386) into MethodInvocation(1400) at 1", "Delete StringLiteral: \"INDEX_STATE\"(1388)", "Delete MethodInvocation(1389)", "Delete SimpleName: leaveIndexActiveOnFailure(1430)"]}}, {"PartialIndexRebuilderIT_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 24"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: java.sql.ResultSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: org.apache.phoenix.coprocessor.MetaDataRegionObserver.BuildIndexScheduleTask to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 29", "operations": ["INS QualifiedName: org.apache.phoenix.jdbc.PhoenixStatement to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 29"]}, {"root": "INS ImportDeclaration to CompilationUnit at 49", "operations": ["INS ImportDeclaration to CompilationUnit at 49", "INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 50", "operations": ["INS ImportDeclaration to CompilationUnit at 50", "INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 37", "MOV MethodDeclaration to TypeDeclaration: class at 29", "MOV MethodDeclaration to TypeDeclaration: class at 13"]}, {"root": "UPDATE from org.apache.hadoop.hbase.HTableDescriptor to org.apache.hadoop.hbase.DoNotRetryIOException", "operations": ["UPD QualifiedName: org.apache.hadoop.hbase.HTableDescriptor from org.apache.hadoop.hbase.HTableDescriptor to org.apache.hadoop.hbase.DoNotRetryIOException"]}, {"root": "UPDATE from org.apache.hadoop.hbase.util.Bytes to org.apache.phoenix.coprocessor.MetaDataRegionObserver", "operations": ["UPD QualifiedName: org.apache.hadoop.hbase.util.Bytes from org.apache.hadoop.hbase.util.Bytes to org.apache.phoenix.coprocessor.MetaDataRegionObserver"]}, {"root": "UPDATE from org.apache.phoenix.query.ConnectionQueryServices to org.apache.phoenix.execute.CommitException", "operations": ["UPD QualifiedName: org.apache.phoenix.query.ConnectionQueryServices from org.apache.phoenix.query.ConnectionQueryServices to org.apache.phoenix.execute.CommitException"]}, {"root": "INS SingleMemberAnnotation to TypeDeclaration: class at 0", "operations": ["INS SingleMemberAnnotation to TypeDeclaration: class at 0", "INS StringLiteral: \"deprecation\" to SingleMemberAnnotation at 1", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: Logger to SimpleType: Logger at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Logger to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: getLogger to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: LoggerFactory to MethodInvocation at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS Modifier: static to FieldDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: PartialIndexRebuilderIT to TypeLiteral at 0", "INS SimpleName: PartialIndexRebuilderIT to SimpleType: PartialIndexRebuilderIT at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS PrimitiveType: long to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleName: RegionCoprocessorEnvironment to SimpleType: RegionCoprocessorEnvironment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: indexRebuildTaskRegionEnvironment to VariableDeclarationFragment at 0", "INS SimpleType: RegionCoprocessorEnvironment to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleType: BuildIndexScheduleTask to VariableDeclarationStatement at 0", "INS SimpleName: BuildIndexScheduleTask to SimpleType: BuildIndexScheduleTask at 0", "INS SimpleName: task to VariableDeclarationFragment at 0", "INS Modifier: private to MethodDeclaration at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: runIndexRebuilder to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to MethodDeclaration at 6", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: run to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleName: task to MethodInvocation at 0", "INS SimpleName: indexRebuildTaskRegionEnvironment to ClassInstanceCreation at 1", "INS SimpleType: MetaDataRegionObserver.BuildIndexScheduleTask to ClassInstanceCreation at 0", "INS QualifiedName: MetaDataRegionObserver.BuildIndexScheduleTask to SimpleType: MetaDataRegionObserver.BuildIndexScheduleTask at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS WhileStatement to Block at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: final to SingleVariableDeclaration at 0", "INS ArrayAccess to PrefixExpression: ! at 0", "INS SimpleName: Thread to MethodInvocation at 0", "INS SimpleName: setDaemon to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to WhileStatement at 1", "INS SimpleName: cancel to ArrayAccess at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: interval to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: thread to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Dimension to ArrayType: boolean[] at 1", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: interval to SingleVariableDeclaration at 2", "INS ArrayType: boolean[] to SingleVariableDeclaration at 1", "INS PrefixExpression: ! to WhileStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS CatchClause to TryStatement at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: runIndexRebuilderAsync to MethodDeclaration at 3", "INS SimpleType: Thread to ClassInstanceCreation at 0", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS CatchClause to TryStatement at 2", "INS SimpleName: thread to VariableDeclarationFragment at 0", "INS SimpleName: run to MethodDeclaration at 3", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Thread to VariableDeclarationStatement at 0", "INS SimpleName: thread to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to CatchClause at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleName: start to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS TryStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Thread to SimpleType: Thread at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS BooleanLiteral: true to MethodInvocation at 2", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: Thread to SimpleType: Thread at 0", "INS SimpleName: sleep to MethodInvocation at 1", "INS SimpleName: error to MethodInvocation at 1", "INS SimpleName: cancel to SingleVariableDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: metaCache to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleType: TableNotFoundException to MethodDeclaration at 7", "INS SimpleType: PIndexState to SingleVariableDeclaration at 0", "INS SimpleName: hasIndexWithState to MethodDeclaration at 3", "INS SimpleName: PMetaData to SimpleType: PMetaData at 0", "INS SimpleType: PMetaData to SingleVariableDeclaration at 0", "INS SimpleName: key to SingleVariableDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: expectedState to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: PIndexState to SimpleType: PIndexState at 0", "INS SimpleType: PTableKey to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: private to MethodDeclaration at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: TableNotFoundException to SimpleType: TableNotFoundException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 30", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS ExpressionStatement to Block at 18", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 30", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS TryStatement to Block at 7", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "INS SimpleName: checkIndexState to MethodInvocation at 1", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS ExpressionStatement to Block at 17", "INS Block to TryStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS Block to TryStatement at 1", "INS ExpressionStatement to Block at 29", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS SimpleType: PTableKey to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS QualifiedName: clock.time to Assignment: += at 0", "INS ExpressionStatement to Block at 17", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS ExpressionStatement to Block at 28", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: disableTime to VariableDeclarationFragment at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS SimpleName: key to VariableDeclarationFragment at 0", "INS SimpleName: getRowCount to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: REBUILD_PERIOD to Assignment: += at 1", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 5", "INS ExpressionStatement to Block at 21", "INS Assignment: += to ExpressionStatement at 0", "INS QualifiedName: clock.time to Assignment: += at 0", "INS SimpleName: conn to MethodInvocation at 2", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS SimpleType: HTableInterface to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getRowCount to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 20", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 23", "INS SimpleName: PMetaData to SimpleType: PMetaData at 0", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: metaCache to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS SimpleName: conn to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 2", "INS NumberLiteral: 1 to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getRowCount to MethodInvocation at 1", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 8", "INS VariableDeclarationStatement to Block at 6", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: MyClock to VariableDeclarationStatement at 1", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: conn to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 9", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TryStatement to Block at 8", "INS SimpleName: clock to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 14", "INS SimpleName: conn to MethodInvocation at 2", "INS SimpleType: Throwable to MethodDeclaration at 4", "INS SimpleName: fullTableName to ClassInstanceCreation at 2", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: PTableKey to SimpleType: PTableKey at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS NumberLiteral: 1000 to ClassInstanceCreation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS ExpressionStatement to Block at 26", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getMetaDataCache to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getRowCount to MethodInvocation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: PMetaData to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS SimpleName: checkIndexState to MethodInvocation at 1", "INS SimpleType: MyClock to ClassInstanceCreation at 0", "INS SimpleName: REBUILD_PERIOD to Assignment: += at 1", "INS SimpleType: PTableKey to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NullLiteral to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 27", "INS ExpressionStatement to Block at 30", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS SimpleName: fullTableName to MethodInvocation at 3", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: TestUtil to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS SimpleName: testIndexWriteFailureDisablingIndex to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: testIndexWriteFailureDuringRebuild to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS ExpressionStatement to Block at 0", "INS QualifiedName: PIndexState.DISABLE to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS SimpleName: testIndexWriteFailureLeavingIndexActive to MethodDeclaration at 3", "INS QualifiedName: PIndexState.PENDING_ACTIVE to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS PrimitiveType: void to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: testIndexWriteFailureDuringRebuild to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fullTableName to InfixExpression: + at 1", "INS SimpleName: conn to MethodInvocation at 0", "INS SimpleName: execute to MethodInvocation at 1", "INS ExpressionStatement to Block at 39", "INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to Block at 38", "INS PrefixExpression: - to ConditionalExpression at 2", "INS SimpleName: fullTableName to ConditionalExpression at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: indexStateOnFailure to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getTable to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS Block to TryStatement at 1", "INS CatchClause to TryStatement at 1", "INS SimpleType: HTableInterface to VariableDeclarationStatement at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS SimpleName: createStatement to MethodInvocation at 1", "INS SimpleName: stmt to VariableDeclarationFragment at 0", "INS StringLiteral: \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR) COLUMN_ENCODED_BYTES = 0, DISABLE_INDEX_ON_WRITE_FAILURE = \" to InfixExpression: + at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: PhoenixConnection to TypeLiteral at 0", "INS VariableDeclarationStatement to Block at 32", "INS InfixExpression: == to ConditionalExpression at 0", "INS MethodInvocation to MethodInvocation at 2", "INS TryStatement to Block at 8", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: indexStateOnFailure to InfixExpression: == at 0", "INS SimpleName: PhoenixStatement to SimpleType: PhoenixStatement at 0", "INS ConditionalExpression to MethodInvocation at 1", "INS QualifiedName: PIndexState.ACTIVE to ConditionalExpression at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: indexStateOnFailure to InfixExpression: == at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: getQueryPlan to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 2", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 27", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to ConditionalExpression at 0", "INS Block to TryStatement at 0", "INS StringLiteral: \"CREATE TABLE \" to InfixExpression: + at 0", "INS Block to CatchClause at 1", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS SimpleName: fail to MethodInvocation at 0", "INS ExpressionStatement to Block at 10", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 26", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS SimpleName: testIndexWriteFailureDuringRebuild to MethodDeclaration at 2", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ParenthesizedExpression to InfixExpression: + at 3", "INS ExpressionStatement to Block at 45", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS SimpleName: disableTime to PrefixExpression: - at 0", "INS SimpleName: HTableInterface to SimpleType: HTableInterface at 0", "INS ExpressionStatement to Block at 41", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2", "INS InfixExpression: == to ConditionalExpression at 0", "INS ConditionalExpression to MethodInvocation at 3", "INS SimpleName: disableTime to ConditionalExpression at 1", "INS SimpleName: conn to MethodInvocation at 2", "INS SimpleName: getCurrentTable to MethodInvocation at 1", "INS ExpressionStatement to Block at 46", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: checkIndexState to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 36", "INS ExpressionStatement to Block at 40", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: CommitException to SimpleType: CommitException at 0", "INS SimpleName: getContext to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: indexStateOnFailure to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 20", "INS VariableDeclarationStatement to Block at 8", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: PhoenixConnection to SimpleType: PhoenixConnection at 0", "INS SimpleType: CommitException to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: unwrap to MethodInvocation at 1", "INS SimpleType: PhoenixStatement to TypeLiteral at 0", "INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS SimpleName: indexStateOnFailure to InfixExpression: == at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: PhoenixStatement to VariableDeclarationStatement at 0", "INS TryStatement to Block at 30", "INS SimpleName: fullIndexName to ConditionalExpression at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: metaTable to VariableDeclarationFragment at 0", "INS SimpleName: IndexScrutiny to MethodInvocation at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 37", "INS ExpressionStatement to Block at 1", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "INS QualifiedName: clock.time to Assignment: += at 0", "INS ConditionalExpression to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: removeCoprocessor to MethodInvocation at 1", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS QualifiedName: PIndexState.INACTIVE to ConditionalExpression at 1", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: stmt to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from int to long", "operations": ["UPD PrimitiveType: int from int to long"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 4", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: REBUILD_PERIOD to VariableDeclarationFragment at 0", "INS NumberLiteral: 50000 to VariableDeclarationFragment at 1"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: InterruptedException to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: void to MethodDeclaration at 2", "MOV SimpleName: waitForIndexRebuild to MethodDeclaration at 3", "MOV Modifier: static to MethodDeclaration at 1", "MOV SimpleType: SQLException to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "UPDATE from hasDisabledIndex to hasInactiveIndex", "operations": ["UPD SimpleName: hasDisabledIndex from hasDisabledIndex to hasInactiveIndex"]}, {"root": "UPDATE from hasInactiveIndex to hasDisabledIndex", "operations": ["UPD SimpleName: hasInactiveIndex from hasInactiveIndex to hasDisabledIndex"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS Block to MethodDeclaration at 7", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: metaCache to MethodInvocation at 1", "INS QualifiedName: PIndexState.DISABLE to MethodInvocation at 3", "INS SimpleName: key to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: hasIndexWithState to MethodInvocation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 8"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Throwable to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Throwable to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV SimpleType: Throwable to MethodDeclaration at 4", "MOV SimpleName: testMultiValuesAtSameTS to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Throwable to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Throwable to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from testSeparateTimeBatchesRequired to testTimeBatchesInCoprocessorRequired", "operations": ["UPD SimpleName: testSeparateTimeBatchesRequired from testSeparateTimeBatchesRequired to testTimeBatchesInCoprocessorRequired"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Throwable to MethodDeclaration at 4"]}, {"root": "UPDATE from static to public", "operations": ["UPD Modifier: static from static to public", "UPD Modifier: static from static to public"]}, {"root": "UPDATE from waitForIndexRebuild to testBatchingDuringRebuild", "operations": ["UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to testBatchingDuringRebuild"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Throwable to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Throwable to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Test to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from testDeleteAndUpsertValuesAtSameTS2 to testDeleteAndUpsertValuesAtSameTS1", "operations": ["UPD SimpleName: testDeleteAndUpsertValuesAtSameTS2 from testDeleteAndUpsertValuesAtSameTS2 to testDeleteAndUpsertValuesAtSameTS1"]}, {"root": "INS SimpleType: Throwable to MethodDeclaration at 4", "operations": ["INS SimpleType: Throwable to MethodDeclaration at 4", "INS SimpleName: Throwable to SimpleType: Throwable at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Test to MarkerAnnotation at 0"]}, {"root": "UPDATE from removeWriteFailingCoprocessor to testDeleteAndUpsertValuesAtSameTS2", "operations": ["UPD SimpleName: removeWriteFailingCoprocessor from removeWriteFailingCoprocessor to testDeleteAndUpsertValuesAtSameTS2"]}, {"root": "INS SimpleType: Throwable to MethodDeclaration at 5", "operations": ["INS SimpleType: Throwable to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: schemaName to MethodInvocation at 2", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to TryStatement at 1", "INS ExpressionStatement to Block at 17", "INS ExpressionStatement to Block at 18", "INS SimpleName: tableName to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: indexName to MethodInvocation at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 16", "INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 14", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 1", "INS SimpleName: generateUniqueName to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS QualifiedName: clock.time to Assignment: += at 0", "INS SimpleName: generateUniqueName to MethodInvocation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: getTableName to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS TryStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: schemaName to VariableDeclarationFragment at 0", "INS Block to TryStatement at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: fullIndexName to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 4", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: serverProps to MethodInvocation at 0", "INS SimpleName: REBUILD_PERIOD to MethodInvocation at 2", "INS SimpleName: put to MethodInvocation at 1", "INS ExpressionStatement to Block at 4", "INS QualifiedName: QueryServices.INDEX_FAILURE_HANDLING_REBUILD_PERIOD to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: Long to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: getCoprocessorHost to MethodInvocation at 1", "INS SimpleType: MetaDataRegionObserver to TypeLiteral at 0", "INS QualifiedName: PhoenixDatabaseMetaData.SYSTEM_CATALOG_HBASE_TABLE_NAME to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS QualifiedName: PhoenixDatabaseMetaData.SYSTEM_CATALOG_HBASE_TABLE_NAME to MethodInvocation at 2", "INS SimpleName: findCoprocessorEnvironment to MethodInvocation at 1", "INS SimpleName: RegionCoprocessorEnvironment to SimpleType: RegionCoprocessorEnvironment at 0", "INS SimpleName: getOnlineRegions to MethodInvocation at 1", "INS SimpleName: indexRebuildTaskRegionEnvironment to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getRSForFirstRegionInTable to MethodInvocation at 1", "INS SimpleName: MetaDataRegionObserver to SimpleType: MetaDataRegionObserver at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS SimpleType: RegionCoprocessorEnvironment to CastExpression at 0", "INS MethodInvocation to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getUtility to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS CastExpression to Assignment: = at 1", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS SimpleName: initRebuildIndexConnectionProps to MethodInvocation at 1", "INS ExpressionStatement to Block at 8", "INS SimpleName: MetaDataRegionObserver to MethodInvocation at 0", "INS SimpleName: indexRebuildTaskRegionEnvironment to MethodInvocation at 0", "INS SimpleName: getConfiguration to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 17", "operations": ["INS NumberLiteral: 1 to ArrayCreation at 1", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS Dimension to ArrayType: boolean[] at 1", "INS ArrayType: boolean[] to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Dimension to ArrayType: boolean[] at 1", "INS VariableDeclarationStatement to Block at 17", "INS ArrayType: boolean[] to ArrayCreation at 0", "INS SimpleName: cancel to VariableDeclarationFragment at 0"]}, {"root": "INS TryStatement to Block at 18", "operations": ["INS TryStatement to Block at 18", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: cancel to ArrayAccess at 0", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS Block to TryStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 6"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from Connection to Throwable", "operations": ["UPD SimpleName: Connection from Connection to Throwable", "UPD SimpleName: Connection from Connection to Throwable"]}, {"root": "MOVE from SimpleType: Throwable", "operations": ["MOV SimpleName: Connection to SimpleType: Throwable at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 1", "MOV ExpressionStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 7"]}, {"root": "UPDATE from expectedIndexState to indexStateOnFailure", "operations": ["UPD SimpleName: expectedIndexState from expectedIndexState to indexStateOnFailure"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV VariableDeclarationStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 5", "MOV ExpressionStatement to Block at 7", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 3"]}, {"root": "MOVE from SimpleType: Throwable", "operations": ["MOV SimpleName: Connection to SimpleType: Throwable at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0", "MOV Block to TryStatement at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0", "MOV Block to TryStatement at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 19", "MOV ExpressionStatement to Block at 22"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0", "MOV Block to TryStatement at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0"]}, {"root": "UPDATE from HTableDescriptor to String", "operations": ["UPD SimpleType: HTableDescriptor from HTableDescriptor to String", "UPD SimpleType: ConnectionQueryServices from ConnectionQueryServices to String", "UPD SimpleName: ConnectionQueryServices from ConnectionQueryServices to String", "UPD SimpleName: HTableDescriptor from HTableDescriptor to String"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from TryStatement", "operations": ["MOV VariableDeclarationExpression to TryStatement at 0"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getNameAsString to MethodInvocation at 1", "INS StringLiteral: \"Simulating write failure on \" to InfixExpression: + at 0", "INS SimpleName: DoNotRetryIOException to SimpleType: DoNotRetryIOException at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleType: DoNotRetryIOException to ClassInstanceCreation at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from \"120000\" to \"300000\"", "operations": ["UPD StringLiteral: \"120000\" from \"120000\" to \"300000\""]}, {"root": "MOVE from Block", "operations": ["MOV DoStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS Dimension to ArrayType: boolean[] at 1", "INS SimpleName: cancel to VariableDeclarationFragment at 0", "INS NumberLiteral: 1 to ArrayCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS VariableDeclarationStatement to Block at 6", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS ArrayType: boolean[] to VariableDeclarationStatement at 0", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS Dimension to ArrayType: boolean[] at 1", "INS ArrayType: boolean[] to ArrayCreation at 0"]}, {"root": "INS TryStatement to Block at 7", "operations": ["INS SimpleName: cancel to MethodInvocation at 2", "INS SimpleName: cancel to ArrayAccess at 0", "INS Block to TryStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS Block to TryStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: runIndexRebuilderAsync to MethodInvocation at 0", "INS NumberLiteral: 500 to MethodInvocation at 1", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS TryStatement to Block at 7"]}, {"root": "INS VariableDeclarationStatement to Block at 12", "operations": ["INS ArrayType: boolean[] to ArrayCreation at 0", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS PrimitiveType: boolean to ArrayType: boolean[] at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 1 to ArrayCreation at 1", "INS Dimension to ArrayType: boolean[] at 1", "INS Dimension to ArrayType: boolean[] at 1", "INS SimpleName: cancel to VariableDeclarationFragment at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 12", "INS ArrayType: boolean[] to VariableDeclarationStatement at 0"]}, {"root": "INS TryStatement to Block at 13", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: cancel to ArrayAccess at 0", "INS Block to TryStatement at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 500 to MethodInvocation at 1", "INS TryStatement to Block at 13", "INS Block to TryStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 13", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 14", "operations": ["INS SimpleName: sleep to MethodInvocation at 1", "INS SimpleName: WAIT_AFTER_DISABLED to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Thread to MethodInvocation at 0", "INS ExpressionStatement to Block at 14"]}, {"root": "INS ExpressionStatement to Block at 15", "operations": ["INS ExpressionStatement to Block at 15", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 31", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 13", "MOV VariableDeclarationStatement to Block at 6", "MOV ExpressionStatement to Block at 8", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 17", "MOV ExpressionStatement to Block at 14", "MOV VariableDeclarationStatement to Block at 7"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 9", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 20", "MOV ExpressionStatement to Block at 15"]}, {"root": "INS ExpressionStatement to Block at 21", "operations": ["INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 21", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 22", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 22", "INS SimpleName: WAIT_AFTER_DISABLED to MethodInvocation at 2", "INS SimpleName: Thread to MethodInvocation at 0", "INS SimpleName: sleep to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 23", "operations": ["INS ExpressionStatement to Block at 23", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 31", "MOV ExpressionStatement to Block at 26", "MOV ExpressionStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 7", "MOV ExpressionStatement to Block at 10", "MOV ExpressionStatement to Block at 29", "MOV ExpressionStatement to Block at 8", "MOV ExpressionStatement to Block at 9", "MOV ExpressionStatement to Block at 13", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 19", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 14", "MOV VariableDeclarationStatement to Block at 7", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 11", "MOV ExpressionStatement to Block at 15", "MOV ExpressionStatement to Block at 16", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 14", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 10", "MOV ExpressionStatement to Block at 9", "MOV ExpressionStatement to Block at 8", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 18", "MOV ExpressionStatement to Block at 23", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 6", "MOV VariableDeclarationStatement to Block at 8", "MOV ExpressionStatement to Block at 13"]}, {"root": "INS ExpressionStatement to Block at 19", "operations": ["INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 19"]}, {"root": "INS ExpressionStatement to Block at 20", "operations": ["INS SimpleName: sleep to MethodInvocation at 1", "INS ExpressionStatement to Block at 20", "INS SimpleName: WAIT_AFTER_DISABLED to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Thread to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 21", "operations": ["INS ExpressionStatement to Block at 21", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 8", "MOV VariableDeclarationStatement to Block at 5", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 17", "MOV VariableDeclarationStatement to Block at 4", "MOV ExpressionStatement to Block at 10"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS ExpressionStatement to Block at 11", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 12", "operations": ["INS SimpleName: Thread to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 12", "INS SimpleName: sleep to MethodInvocation at 1", "INS SimpleName: WAIT_AFTER_DISABLED to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS ExpressionStatement to Block at 13", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 13", "operations": ["INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 13", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 14", "operations": ["INS ExpressionStatement to Block at 14", "INS SimpleName: Thread to MethodInvocation at 0", "INS SimpleName: WAIT_AFTER_DISABLED to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sleep to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 15", "operations": ["INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 15", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 7", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 19", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 11", "MOV ExpressionStatement to Block at 24", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 4"]}, {"root": "INS ExpressionStatement to Block at 29", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 29", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 30", "operations": ["INS SimpleName: TestUtil to MethodInvocation at 0", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS ExpressionStatement to Block at 30", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS SimpleName: conn to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: checkIndexState to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from SimpleType: MyClock", "operations": ["MOV SimpleName: MyClock to SimpleType: MyClock at 0"]}, {"root": "UPDATE from Thread to EnvironmentEdgeManager", "operations": ["UPD SimpleName: Thread from Thread to EnvironmentEdgeManager", "UPD SimpleName: Thread from Thread to EnvironmentEdgeManager"]}, {"root": "UPDATE from sleep to injectEdge", "operations": ["UPD SimpleName: sleep from sleep to injectEdge", "UPD SimpleName: sleep from sleep to injectEdge"]}, {"root": "INS SimpleName: clock to MethodInvocation at 2", "operations": ["INS SimpleName: clock to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 13", "MOV ExpressionStatement to Block at 15", "MOV ExpressionStatement to Block at 17", "MOV ExpressionStatement to Block at 18", "MOV ExpressionStatement to Block at 11", "MOV ExpressionStatement to Block at 25", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 13", "MOV ExpressionStatement to Block at 16", "MOV ExpressionStatement to Block at 19", "MOV ExpressionStatement to Block at 23", "MOV ExpressionStatement to Block at 15", "MOV ExpressionStatement to Block at 7", "MOV ExpressionStatement to Block at 25", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 24", "MOV ExpressionStatement to Block at 14", "MOV ExpressionStatement to Block at 12", "MOV ExpressionStatement to Block at 18", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 19", "MOV ExpressionStatement to Block at 22", "MOV ExpressionStatement to Block at 28", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 16", "MOV ExpressionStatement to Block at 5", "MOV VariableDeclarationStatement to Block at 9", "MOV ExpressionStatement to Block at 10", "MOV ExpressionStatement to Block at 21"]}, {"root": "INS ExpressionStatement to Block at 21", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 21"]}, {"root": "INS ExpressionStatement to Block at 24", "operations": ["INS ExpressionStatement to Block at 24", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS SimpleName: runIndexRebuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 9", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS QualifiedName: PIndexState.INACTIVE to MethodInvocation at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 10", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS NullLiteral to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 35", "MOV VariableDeclarationStatement to Block at 33", "MOV ExpressionStatement to Block at 34"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 42", "MOV ExpressionStatement to Block at 43"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 44"]}, {"root": "INS ExpressionStatement to Block at 19", "operations": ["INS ExpressionStatement to Block at 19", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: runIndexRebuilder to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 20", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 20", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "INS SimpleName: checkIndexState to MethodInvocation at 1", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS SimpleName: conn to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from services to indexName", "operations": ["UPD SimpleName: services from services to indexName"]}, {"root": "UPDATE from commit to fullTableName", "operations": ["UPD SimpleName: commit from commit to fullTableName", "UPD SimpleName: descriptor from descriptor to fullTableName", "UPD SimpleName: t from t to fullTableName", "UPD SimpleName: metaTable from metaTable to fullTableName"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 9", "MOV ExpressionStatement to Block at 11"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 15"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 0L to MethodInvocation at 5"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS SimpleName: assertTrue to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS NumberLiteral: 0L to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NullLiteral to MethodInvocation at 5"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS NullLiteral to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: conn to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getRowCount to MethodInvocation at 1", "INS SimpleName: fullTableName to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS QualifiedName: PIndexState.INACTIVE to MethodInvocation at 4", "INS NullLiteral to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to MethodInvocation at 5", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS QualifiedName: PIndexState.INACTIVE to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS NumberLiteral: 0L to MethodInvocation at 5"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS NumberLiteral: 0L to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: metaCache to MethodInvocation at 1", "INS SimpleName: key to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: indexStateOnFailure to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: getRowCount to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 2 to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: conn to MethodInvocation at 2", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: TestUtil to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: fullIndexName to MethodInvocation at 3", "INS SimpleName: getRowCount to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS SimpleName: getRowCount to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: checkIndexState to MethodInvocation at 1", "INS QualifiedName: PIndexState.INACTIVE to ConditionalExpression at 1", "INS SimpleName: conn to MethodInvocation at 2", "INS NullLiteral to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: indexStateOnFailure to InfixExpression: == at 0", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS ConditionalExpression to MethodInvocation at 4", "INS QualifiedName: PIndexState.ACTIVE to ConditionalExpression at 2", "INS InfixExpression: == to ConditionalExpression at 0", "INS QualifiedName: PIndexState.DISABLE to InfixExpression: == at 1", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: indexStateOnFailure to MethodInvocation at 4", "INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to MethodInvocation at 5"]}, {"root": "UPDATE from CountDownLatch to ResultSet", "operations": ["UPD SimpleName: CountDownLatch from CountDownLatch to ResultSet", "UPD SimpleType: CountDownLatch from CountDownLatch to ResultSet"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: rs to MethodInvocation at 0", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS StringLiteral: \"0\" to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assertEquals to MethodInvocation at 0", "INS NumberLiteral: 3 to MethodInvocation at 1", "INS SimpleName: conn to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: assertTrue to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from getQueryServices to generateUniqueName", "operations": ["UPD SimpleName: getQueryServices from getQueryServices to generateUniqueName"]}, {"root": "UPDATE from services to SchemaUtil", "operations": ["UPD SimpleName: services from services to SchemaUtil", "UPD SimpleName: getName from getName to SchemaUtil"]}, {"root": "UPDATE from getTableDescriptor to getTableName", "operations": ["UPD SimpleName: getTableDescriptor from getTableDescriptor to getTableName"]}, {"root": "UPDATE from Bytes to schemaName", "operations": ["UPD SimpleName: Bytes from Bytes to schemaName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tableName to MethodInvocation at 3", "MOV SimpleName: Bytes to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getName to MethodInvocation at 0", "MOV TypeLiteral to MethodInvocation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Runnable to ClassInstanceCreation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: cancel to MethodInvocation at 2", "INS NumberLiteral: 500 to MethodInvocation at 1", "INS SimpleName: runIndexRebuilderAsync to MethodInvocation at 0"]}, {"root": "UPDATE from PIndexState.ACTIVE to PIndexState.INACTIVE", "operations": ["UPD QualifiedName: PIndexState.ACTIVE from PIndexState.ACTIVE to PIndexState.INACTIVE", "UPD QualifiedName: PIndexState.DISABLE from PIndexState.DISABLE to PIndexState.INACTIVE", "UPD QualifiedName: PIndexState.ACTIVE from PIndexState.ACTIVE to PIndexState.INACTIVE"]}, {"root": "INS SimpleName: expectedState to InfixExpression: == at 1", "operations": ["INS SimpleName: expectedState to InfixExpression: == at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from fullIndexName to runIndexRebuilder", "operations": ["UPD SimpleName: fullIndexName from fullIndexName to runIndexRebuilder", "UPD SimpleName: getUrl from getUrl to runIndexRebuilder", "UPD SimpleName: doneSignal from doneSignal to runIndexRebuilder", "UPD SimpleName: doneSignal from doneSignal to runIndexRebuilder", "UPD SimpleName: WAIT_FOR_INDEX_WRITE from WAIT_FOR_INDEX_WRITE to runIndexRebuilder", "UPD SimpleName: getTableDescriptor from getTableDescriptor to runIndexRebuilder", "UPD SimpleName: fullIndexName from fullIndexName to runIndexRebuilder", "UPD SimpleName: fullIndexName from fullIndexName to runIndexRebuilder", "UPD SimpleName: services from services to runIndexRebuilder"]}, {"root": "INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1", "operations": ["INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1"]}, {"root": "INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1", "operations": ["INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1"]}, {"root": "UPDATE from String to PTableKey", "operations": ["UPD SimpleName: String from String to PTableKey"]}, {"root": "MOVE from SimpleType: PTableKey", "operations": ["MOV SimpleName: String to SimpleType: PTableKey at 0"]}, {"root": "UPDATE from InterruptedException to MyClock", "operations": ["UPD SimpleName: InterruptedException from InterruptedException to MyClock"]}, {"root": "MOVE from SimpleType: MyClock", "operations": ["MOV SimpleName: InterruptedException to SimpleType: MyClock at 0"]}, {"root": "MOVE from SimpleType: HTableInterface", "operations": ["MOV SimpleName: HTableInterface to SimpleType: HTableInterface at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: metaTable to VariableDeclarationFragment at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: execute to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1", "operations": ["INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1"]}, {"root": "UPDATE from REBUILD_INTERVAL to WAIT_AFTER_DISABLED", "operations": ["UPD SimpleName: REBUILD_INTERVAL from REBUILD_INTERVAL to WAIT_AFTER_DISABLED"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: updateIndexState to MethodInvocation at 1", "MOV SimpleName: IndexUtil to MethodInvocation at 0", "MOV SimpleName: fullIndexName to MethodInvocation at 2"]}, {"root": "UPDATE from currentTime to metaTable", "operations": ["UPD SimpleName: currentTime from currentTime to metaTable"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: currentTime to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: execute to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS InfixExpression: * to Assignment: += at 1", "operations": ["INS NumberLiteral: 2 to InfixExpression: * at 0", "INS InfixExpression: * to Assignment: += at 1", "INS SimpleName: REBUILD_PERIOD to InfixExpression: * at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from doneSignal to assertEquals", "operations": ["UPD SimpleName: doneSignal from doneSignal to assertEquals", "UPD SimpleName: conn from conn to assertEquals"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from advanceClockUntilPartialRebuildStarts to execute", "operations": ["UPD SimpleName: advanceClockUntilPartialRebuildStarts from advanceClockUntilPartialRebuildStarts to execute"]}, {"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS SimpleName: fullTableName to InfixExpression: + at 1", "INS StringLiteral: \" VALUES('dddd','dddd','3333')\" to InfixExpression: + at 2", "INS StringLiteral: \"UPSERT INTO \" to InfixExpression: + at 0", "INS InfixExpression: + to MethodInvocation at 2"]}, {"root": "UPDATE from String to PhoenixStatement", "operations": ["UPD SimpleName: String from String to PhoenixStatement"]}, {"root": "MOVE from SimpleType: PhoenixStatement", "operations": ["MOV SimpleName: String to SimpleType: PhoenixStatement at 0"]}, {"root": "UPDATE from doneSignal to rs", "operations": ["UPD SimpleName: doneSignal from doneSignal to rs", "UPD SimpleName: clock from clock to rs"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: fullTableName to InfixExpression: + at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: executeQuery to MethodInvocation at 1", "INS StringLiteral: \" WHERE V1 = 'a'\" to InfixExpression: + at 2", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"SELECT V2 FROM \" to InfixExpression: + at 0", "INS SimpleName: stmt to MethodInvocation at 0"]}, {"root": "UPDATE from fullIndexName to assertTrue", "operations": ["UPD SimpleName: fullIndexName from fullIndexName to assertTrue", "UPD SimpleName: Bytes from Bytes to assertTrue", "UPD SimpleName: admin from admin to assertTrue"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: doneSignal to MethodInvocation at 0"]}, {"root": "UPDATE from tableName to fullIndexName", "operations": ["UPD SimpleName: tableName from tableName to fullIndexName", "UPD SimpleName: doneSignal from doneSignal to fullIndexName", "UPD SimpleName: descriptor from descriptor to fullIndexName", "UPD SimpleName: DriverManager from DriverManager to fullIndexName", "UPD SimpleName: start from start to fullIndexName", "UPD SimpleName: doneSignal from doneSignal to fullIndexName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: DriverManager to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getUrl to MethodInvocation at 0"]}, {"root": "INS InfixExpression: * to Assignment: += at 1", "operations": ["INS NumberLiteral: 2 to InfixExpression: * at 0", "INS SimpleName: REBUILD_PERIOD to InfixExpression: * at 1", "INS InfixExpression: * to Assignment: += at 1"]}, {"root": "UPDATE from t to scrutinizeIndex", "operations": ["UPD SimpleName: t from t to scrutinizeIndex"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setDaemon to MethodInvocation at 2", "MOV SimpleName: t to MethodInvocation at 1"]}, {"root": "UPDATE from toBytes to conn", "operations": ["UPD SimpleName: toBytes from toBytes to conn", "UPD SimpleName: setDaemon from setDaemon to conn", "UPD SimpleName: fullIndexName from fullIndexName to conn", "UPD SimpleName: clock from clock to conn", "UPD SimpleName: doneSignal from doneSignal to conn", "UPD SimpleName: clock from clock to conn", "UPD SimpleName: equals from equals to conn", "UPD SimpleName: clock from clock to conn"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: start to MethodInvocation at 4", "MOV SimpleName: t to MethodInvocation at 3"]}, {"root": "INS SimpleName: DriverManager to MethodInvocation at 0", "operations": ["INS SimpleName: DriverManager to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1", "operations": ["INS SimpleName: WAIT_AFTER_DISABLED to Assignment: += at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: services to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS NullLiteral to MethodInvocation at 5", "INS MethodInvocation to MethodInvocation at 1", "INS QualifiedName: PIndexState.INACTIVE to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getTableDescriptor to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toBytes to MethodInvocation at 0", "MOV SimpleName: tableName to MethodInvocation at 1", "MOV SimpleName: Bytes to MethodInvocation at 0"]}, {"root": "INS NullLiteral to MethodInvocation at 2", "operations": ["INS NullLiteral to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: conn to MethodInvocation at 2", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4"]}, {"root": "UPDATE from Bytes to checkIndexState", "operations": ["UPD SimpleName: Bytes from Bytes to checkIndexState", "UPD SimpleName: fullIndexName from fullIndexName to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: tableName from tableName to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: fullIndexName from fullIndexName to checkIndexState", "UPD SimpleName: fullIndexName from fullIndexName to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to checkIndexState"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: TestUtil to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "MOV SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "MOV SimpleName: TestUtil to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "UPDATE from \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\" to \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\"", "operations": ["UPD StringLiteral: \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\" from \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\" to \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\""]}, {"root": "UPDATE from \" (v1, v2) INCLUDE (v3)\" to \" (v1, v2)\"", "operations": ["UPD StringLiteral: \" (v1, v2) INCLUDE (v3)\" from \" (v1, v2) INCLUDE (v3)\" to \" (v1, v2)\"", "UPD StringLiteral: \" VALUES('a','eeeee','44444','zzzzz')\" from \" VALUES('a','eeeee','44444','zzzzz')\" to \" (v1, v2)\""]}, {"root": "UPDATE from \" VALUES('a','fffff','55555','zzzzzz')\" to \" VALUES('a','a','0')\"", "operations": ["UPD StringLiteral: \" VALUES('a','fffff','55555','zzzzzz')\" from \" VALUES('a','fffff','55555','zzzzzz')\" to \" VALUES('a','a','0')\"", "UPD StringLiteral: \" VALUES('a','a','0','x')\" from \" VALUES('a','a','0','x')\" to \" VALUES('a','a','0')\""]}, {"root": "UPDATE from fullIndexName to clock", "operations": ["UPD SimpleName: fullIndexName from fullIndexName to clock"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fullIndexName to MethodInvocation at 0", "MOV SimpleName: metaTable to MethodInvocation at 1"]}, {"root": "UPDATE from metaTable to currentTime", "operations": ["UPD SimpleName: metaTable from metaTable to currentTime"]}, {"root": "UPDATE from \" VALUES('b','bbbbb', '11','yy')\" to \" VALUES('bb','bb', '11')\"", "operations": ["UPD StringLiteral: \" VALUES('b','bbbbb', '11','yy')\" from \" VALUES('b','bbbbb', '11','yy')\" to \" VALUES('bb','bb', '11')\"", "UPD StringLiteral: \" VALUES('b','bb', '11','yy')\" from \" VALUES('b','bb', '11','yy')\" to \" VALUES('bb','bb', '11')\""]}, {"root": "UPDATE from Thread to TestUtil", "operations": ["UPD SimpleName: Thread from Thread to TestUtil", "UPD SimpleName: IndexUtil from IndexUtil to TestUtil", "UPD SimpleName: advanceClockUntilPartialRebuildStarts from advanceClockUntilPartialRebuildStarts to TestUtil", "UPD SimpleName: advanceClockUntilPartialRebuildStarts from advanceClockUntilPartialRebuildStarts to TestUtil", "UPD SimpleName: toBytes from toBytes to TestUtil", "UPD SimpleName: advanceClockUntilPartialRebuildStarts from advanceClockUntilPartialRebuildStarts to TestUtil", "UPD SimpleName: execute from execute to TestUtil", "UPD SimpleName: advanceClockUntilPartialRebuildStarts from advanceClockUntilPartialRebuildStarts to TestUtil", "UPD SimpleName: modifyTable from modifyTable to TestUtil", "UPD SimpleName: removeWriteFailingCoprocessor from removeWriteFailingCoprocessor to TestUtil"]}, {"root": "UPDATE from \" VALUES('a','dddd','3333','zzzz')\" to \" VALUES('ccc','ccc','222')\"", "operations": ["UPD StringLiteral: \" VALUES('a','dddd','3333','zzzz')\" from \" VALUES('a','dddd','3333','zzzz')\" to \" VALUES('ccc','ccc','222')\"", "UPD StringLiteral: \" VALUES('a','ddddddd','3333','zzzz')\" from \" VALUES('a','ddddddd','3333','zzzz')\" to \" VALUES('ccc','ccc','222')\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: advanceClockUntilPartialRebuildStarts to MethodInvocation at 0", "MOV SimpleName: clock to MethodInvocation at 2", "MOV SimpleName: doneSignal to MethodInvocation at 3", "MOV SimpleName: fullIndexName to MethodInvocation at 1"]}, {"root": "UPDATE from 10 to 2", "operations": ["UPD NumberLiteral: 10 from 10 to 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: advanceClockUntilPartialRebuildStarts to MethodInvocation at 0", "MOV SimpleName: fullIndexName to MethodInvocation at 1", "MOV SimpleName: clock to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: doneSignal to MethodInvocation at 3", "MOV SimpleName: advanceClockUntilPartialRebuildStarts to MethodInvocation at 0", "MOV SimpleName: clock to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV QualifiedName: PIndexState.ACTIVE to MethodInvocation at 4", "MOV SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "INS StringLiteral: \"CREATE INDEX \" to InfixExpression: + at 0", "operations": ["INS StringLiteral: \"CREATE INDEX \" to InfixExpression: + at 0"]}, {"root": "INS SimpleName: indexName to InfixExpression: + at 1", "operations": ["INS SimpleName: indexName to InfixExpression: + at 1"]}, {"root": "UPDATE from \"UPSERT INTO \" to \" ON \"", "operations": ["UPD StringLiteral: \"UPSERT INTO \" from \"UPSERT INTO \" to \" ON \""]}, {"root": "UPDATE from interrupted to getTable", "operations": ["UPD SimpleName: interrupted from interrupted to getTable", "UPD SimpleName: await from await to getTable"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: WAIT_FOR_REBUILD_TO_START to MethodInvocation at 1", "MOV SimpleName: await to MethodInvocation at 1", "MOV QualifiedName: TimeUnit.SECONDS to MethodInvocation at 2"]}, {"root": "UPDATE from TimeUnit.SECONDS to PhoenixDatabaseMetaData.SYSTEM_CATALOG_NAME_BYTES", "operations": ["UPD QualifiedName: TimeUnit.SECONDS from TimeUnit.SECONDS to PhoenixDatabaseMetaData.SYSTEM_CATALOG_NAME_BYTES"]}, {"root": "UPDATE from execute to hasIndexWithState", "operations": ["UPD SimpleName: execute from execute to hasIndexWithState"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: commit to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: IndexUtil to MethodInvocation at 0", "MOV SimpleName: metaTable to MethodInvocation at 3", "MOV SimpleName: fullIndexName to MethodInvocation at 2", "MOV SimpleName: updateIndexState to MethodInvocation at 1"]}, {"root": "UPDATE from sleep to getRowCount", "operations": ["UPD SimpleName: sleep from sleep to getRowCount", "UPD SimpleName: updateIndexState from updateIndexState to getRowCount", "UPD SimpleName: waitForIndexRebuild from waitForIndexRebuild to getRowCount"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: removeWriteFailingCoprocessor to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: advanceClockUntilPartialRebuildStarts to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: TestUtil to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: doneSignal to MethodInvocation at 1", "MOV SimpleName: clock to MethodInvocation at 0"]}, {"root": "UPDATE from doneSignal to next", "operations": ["UPD SimpleName: doneSignal from doneSignal to next"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: TestUtil to MethodInvocation at 0", "MOV SimpleName: checkIndexState to MethodInvocation at 1", "MOV NullLiteral to MethodInvocation at 5"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Thread to MethodInvocation at 0", "MOV SimpleName: sleep to MethodInvocation at 1"]}, {"root": "INS SimpleName: getUrl to MethodInvocation at 0", "operations": ["INS SimpleName: getUrl to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: waitForIndexRebuild to MethodInvocation at 1", "MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: fullIndexName to MethodInvocation at 3", "MOV SimpleName: TestUtil to MethodInvocation at 0"]}, {"root": "INS NullLiteral to MethodInvocation at 5", "operations": ["INS NullLiteral to MethodInvocation at 5"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: modifyTable to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Bytes to MethodInvocation at 1", "MOV SimpleName: tableName to MethodInvocation at 3", "MOV SimpleName: toBytes to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: descriptor to MethodInvocation at 3", "MOV SimpleName: equals to MethodInvocation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from dumpIndexStatus to runIndexRebuilderAsync", "operations": ["UPD SimpleName: dumpIndexStatus from dumpIndexStatus to runIndexRebuilderAsync"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: conn to MethodInvocation at 2", "MOV SimpleName: dumpIndexStatus to MethodInvocation at 0"]}, {"root": "UPDATE from conn to cancel", "operations": ["UPD SimpleName: conn from conn to cancel"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: fullIndexName to MethodInvocation at 1", "MOV SimpleName: conn to MethodInvocation at 0"]}, {"root": "UPDATE from await to unwrap", "operations": ["UPD SimpleName: await from await to unwrap", "UPD SimpleName: fullIndexName from fullIndexName to unwrap"]}, {"root": "UPDATE from WAIT_FOR_REBUILD_TO_START to getQueryServices", "operations": ["UPD SimpleName: WAIT_FOR_REBUILD_TO_START from WAIT_FOR_REBUILD_TO_START to getQueryServices"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Thread to MethodInvocation at 1", "MOV SimpleName: interrupted to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: doneSignal to MethodInvocation at 0", "MOV SimpleName: await to MethodInvocation at 1"]}, {"root": "UPDATE from Thread to getRegionInfo", "operations": ["UPD SimpleName: Thread from Thread to getRegionInfo"]}, {"root": "UPDATE from WAIT_FOR_INDEX_WRITE to c", "operations": ["UPD SimpleName: WAIT_FOR_INDEX_WRITE from WAIT_FOR_INDEX_WRITE to c"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: await to MethodInvocation at 1", "MOV SimpleName: WAIT_FOR_INDEX_WRITE to MethodInvocation at 0"]}, {"root": "UPDATE from await to getEnvironment", "operations": ["UPD SimpleName: await from await to getEnvironment"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV Block to CatchClause at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS SimpleName: Thread to MethodInvocation at 0", "operations": ["INS SimpleName: Thread to MethodInvocation at 0"]}, {"root": "INS SimpleName: interrupted to MethodInvocation at 1", "operations": ["INS SimpleName: interrupted to MethodInvocation at 1"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL SimpleName: Repeat", "DEL NumberLiteral: 5", "DEL SingleMemberAnnotation"]}, {"root": "DEL QualifiedName: PIndexState.ACTIVE", "operations": ["DEL QualifiedName: PIndexState.ACTIVE"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: TestUtil", "DEL MethodInvocation", "DEL SimpleName: fullIndexName", "DEL ExpressionStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: advanceClockUntilPartialRebuildStarts", "operations": ["DEL SimpleName: advanceClockUntilPartialRebuildStarts"]}, {"root": "DEL SimpleName: clock", "operations": ["DEL SimpleName: clock"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL NumberLiteral: 100", "operations": ["DEL NumberLiteral: 100"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TryStatement", "DEL MethodDeclaration", "DEL Block", "DEL Block"]}, {"root": "DEL SimpleName: advanceClockUntilPartialRebuildStarts", "operations": ["DEL SimpleName: advanceClockUntilPartialRebuildStarts"]}, {"root": "DEL SimpleName: clock", "operations": ["DEL SimpleName: clock"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL NumberLiteral: 100", "operations": ["DEL NumberLiteral: 100"]}, {"root": "DEL NumberLiteral: 1000", "operations": ["DEL NumberLiteral: 1000"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: fullTableName", "DEL StringLiteral: \"UPSERT INTO \"", "DEL InfixExpression: +", "DEL StringLiteral: \" VALUES('a','ccc','222','zzz')\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL NumberLiteral: 100", "operations": ["DEL NumberLiteral: 100"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: CountDownLatch", "DEL SimpleType: CountDownLatch", "DEL Modifier: static", "DEL FieldDeclaration", "DEL SimpleType: CountDownLatch", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL SimpleName: WAIT_FOR_REBUILD_TO_START", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: CountDownLatch"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: static", "DEL SimpleName: WAIT_FOR_INDEX_WRITE", "DEL VariableDeclarationFragment", "DEL SimpleName: CountDownLatch", "DEL Modifier: private", "DEL SimpleType: CountDownLatch", "DEL SimpleName: CountDownLatch", "DEL NumberLiteral: 1", "DEL SimpleType: CountDownLatch", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: REBUILD_INTERVAL", "DEL SimpleName: clock", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleType: CountDownLatch", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: CountDownLatch", "DEL SimpleName: CountDownLatch", "DEL SimpleType: CountDownLatch", "DEL Modifier: final", "DEL SimpleName: doneSignal", "DEL NumberLiteral: 1"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: await", "operations": ["DEL SimpleName: await"]}, {"root": "DEL NumberLiteral: 30", "operations": ["DEL NumberLiteral: 30"]}, {"root": "DEL QualifiedName: TimeUnit.SECONDS", "operations": ["DEL QualifiedName: TimeUnit.SECONDS"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL NumberLiteral: 100", "operations": ["DEL NumberLiteral: 100"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: fullTableName", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL StringLiteral: \"UPSERT INTO \"", "DEL StringLiteral: \" VALUES('a','cccccc','222','zzz')\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL Assignment: +=", "operations": ["DEL QualifiedName: clock.time", "DEL Assignment: +=", "DEL NumberLiteral: 100"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: countDown", "operations": ["DEL SimpleName: countDown"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: clock"]}, {"root": "DEL SimpleName: fullIndexName", "operations": ["DEL SimpleName: fullIndexName"]}, {"root": "DEL SimpleName: clock", "operations": ["DEL SimpleName: clock"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL QualifiedName: PIndexState.ACTIVE"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL NumberLiteral: 1", "DEL SimpleName: CountDownLatch", "DEL ClassInstanceCreation", "DEL SimpleType: CountDownLatch"]}, {"root": "DEL SimpleName: advanceClockUntilPartialRebuildStarts", "operations": ["DEL SimpleName: advanceClockUntilPartialRebuildStarts"]}, {"root": "DEL Assignment: +=", "operations": ["DEL NumberLiteral: 1000", "DEL Assignment: +=", "DEL InfixExpression: +", "DEL SimpleName: WAIT_AFTER_DISABLED", "DEL QualifiedName: clock.time"]}, {"root": "DEL MethodInvocation", "operations": ["DEL NumberLiteral: 1000", "DEL MethodInvocation"]}, {"root": "DEL NumberLiteral: 1000", "operations": ["DEL NumberLiteral: 1000"]}, {"root": "DEL SimpleName: countDown", "operations": ["DEL SimpleName: countDown"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL SimpleName: fail", "DEL SimpleType: String", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: expectedIndexState", "DEL MethodInvocation", "DEL NumberLiteral: 60", "DEL SimpleName: fullIndexName", "DEL Assignment: +=", "DEL StringLiteral: \"Ran out of time waiting for index state to become \"", "DEL ExpressionStatement", "DEL SimpleName: conn", "DEL SimpleName: expectedIndexState", "DEL InfixExpression: +", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: clock", "DEL SimpleName: TestUtil", "DEL SingleVariableDeclaration", "DEL SimpleType: InterruptedException", "DEL InfixExpression: <", "DEL NumberLiteral: 0L", "DEL SimpleType: MyClock", "DEL QualifiedName: clock.time", "DEL MethodInvocation", "DEL PrimitiveType: long", "DEL MethodDeclaration", "DEL SimpleType: Connection", "DEL SimpleName: nTries", "DEL Modifier: private", "DEL SimpleName: nTries", "DEL SingleVariableDeclaration", "DEL DoStatement", "DEL SimpleName: maxTries", "DEL VariableDeclarationFragment", "DEL SimpleName: maxTries", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: increment", "DEL SimpleName: checkIndexState", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: increment", "DEL PrefixExpression: ++"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: await", "DEL MethodInvocation", "DEL Modifier: final", "DEL MethodInvocation", "DEL Assignment: +=", "DEL Assignment: +=", "DEL NumberLiteral: 100", "DEL QualifiedName: clock.time", "DEL InfixExpression: *", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: doneSignal", "DEL NumberLiteral: 30", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL QualifiedName: clock.time", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: updateIndexState", "DEL TryStatement", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL SimpleName: WAIT_AFTER_DISABLED", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: IndexUtil", "DEL QualifiedName: TimeUnit.SECONDS", "DEL TryStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 100", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL QualifiedName: TimeUnit.SECONDS", "DEL QualifiedName: PIndexState.ACTIVE", "DEL Block", "DEL MethodInvocation", "DEL NumberLiteral: 0L", "DEL Assignment: +=", "DEL NumberLiteral: 30", "DEL QualifiedName: PIndexState.DISABLE", "DEL SimpleName: CountDownLatch", "DEL SimpleName: disableTime", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: clock", "DEL ExpressionStatement", "DEL SimpleName: disableTime", "DEL QualifiedName: PIndexState.DISABLE", "DEL SimpleName: doneSignal", "DEL SimpleType: HTableInterface", "DEL ExpressionStatement", "DEL Block", "DEL NumberLiteral: 30", "DEL SimpleName: metaTable", "DEL VariableDeclarationFragment", "DEL QualifiedName: PIndexState.DISABLE", "DEL NumberLiteral: 2", "DEL SimpleType: CountDownLatch", "DEL SimpleType: CountDownLatch", "DEL NumberLiteral: 0L", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL QualifiedName: clock.time", "DEL SimpleName: CountDownLatch", "DEL ExpressionStatement", "DEL SimpleName: testDisableIndexDuringRebuild", "DEL MethodInvocation", "DEL SimpleName: commit"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL ExpressionStatement", "DEL NumberLiteral: 100", "DEL TryStatement", "DEL Assignment: +=", "DEL PrimitiveType: void", "DEL QualifiedName: clock.time", "DEL SimpleName: testDeleteAndUpsertValuesAtSameTS1", "DEL MethodDeclaration", "DEL Block", "DEL Block"]}, {"root": "DEL SimpleName: advanceClockUntilPartialRebuildStarts", "operations": ["DEL SimpleName: advanceClockUntilPartialRebuildStarts"]}, {"root": "DEL SimpleName: clock", "operations": ["DEL SimpleName: clock"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL NumberLiteral: 100", "operations": ["DEL NumberLiteral: 100"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodInvocation", "DEL SimpleName: await", "DEL QualifiedName: TimeUnit.SECONDS", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: fullIndexName", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SimpleName: clock", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: MyClock", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: static", "DEL Modifier: private", "DEL SimpleName: advanceClockUntilPartialRebuildStarts", "DEL NumberLiteral: 30", "DEL SimpleType: MyClock"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL SimpleName: run", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: Runnable", "DEL SimpleName: r", "DEL Block", "DEL SimpleType: Exception", "DEL SimpleType: Thread", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: nTries", "DEL SimpleName: advanceClockUntilPartialRebuildStarts", "DEL SimpleName: Thread", "DEL SimpleName: CountDownLatch", "DEL PrefixExpression: !", "DEL VariableDeclarationStatement", "DEL SimpleType: Runnable", "DEL MethodDeclaration", "DEL SimpleName: clock", "DEL SimpleName: nTries", "DEL Modifier: private", "DEL PrefixExpression: --", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: doneSignal", "DEL InfixExpression: >", "DEL WhileStatement", "DEL AnonymousClassDeclaration", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: Thread", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: Exception", "DEL SimpleName: t", "DEL Modifier: final", "DEL SimpleName: Thread", "DEL TryStatement", "DEL SimpleType: MyClock", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL Block", "DEL Modifier: static", "DEL SimpleName: r", "DEL Block", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL BooleanLiteral: true", "DEL PrimitiveType: void", "DEL NumberLiteral: 10", "DEL SingleVariableDeclaration", "DEL CatchClause", "DEL SimpleName: fullIndexName", "DEL SimpleType: CountDownLatch", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: MyClock", "DEL MethodInvocation", "DEL PrimitiveType: void"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: unwrap", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleType: PhoenixConnection", "DEL SimpleName: PhoenixConnection", "DEL SimpleName: conn"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toBytes"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: descriptor", "operations": ["DEL SimpleName: descriptor"]}, {"root": "DEL NumberLiteral: 1000", "operations": ["DEL NumberLiteral: 1000"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: Connection", "DEL SimpleName: conn", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: String", "DEL SimpleName: tableName", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleType: Exception", "operations": ["DEL SimpleType: Exception", "DEL SimpleName: Exception"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: numTries", "DEL SimpleName: admin", "DEL InfixExpression: >", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL PrefixExpression: !", "DEL PostfixExpression: --", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: HBaseAdmin", "DEL VariableDeclarationExpression", "DEL StringLiteral: \"Check to detect if delaying co-processor was removed failed after \"", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: numTries", "DEL NumberLiteral: 10", "DEL ThrowStatement", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL SimpleName: numTries", "DEL SimpleName: descriptor", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: HBaseAdmin", "DEL WhileStatement", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleType: Exception", "DEL SimpleName: removeCoprocessor", "DEL InfixExpression: &&", "DEL SimpleName: numTries", "DEL SimpleName: Exception", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SimpleName: getAdmin", "DEL SimpleName: admin", "DEL SimpleName: numTries", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \" retries.\""]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: WAIT_FOR_REBUILD_TO_START", "DEL SimpleName: countDown", "DEL MethodInvocation"]}, {"root": "DEL TryStatement", "operations": ["DEL NumberLiteral: 30", "DEL TryStatement", "DEL Block", "DEL CatchClause", "DEL SimpleName: e", "DEL MethodInvocation", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL QualifiedName: TimeUnit.SECONDS", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL Block", "DEL ExpressionStatement"]}]}}, {"PartialIndexRebuilderIT_diff": {"operations": ["Move ImportDeclaration(53) into CompilationUnit(5871) at 24", "Insert ImportDeclaration(17) into CompilationUnit(5871) at 8", "Insert ImportDeclaration(49) into CompilationUnit(5871) at 24", "Insert ImportDeclaration(59) into CompilationUnit(5871) at 29", "Insert ImportDeclaration(99) into CompilationUnit(5871) at 49", "Insert ImportDeclaration(101) into CompilationUnit(5871) at 50", "Move MethodDeclaration(807) into TypeDeclaration: class(5870) at 13", "Move MethodDeclaration(3666) into TypeDeclaration: class(5870) at 29", "Move MethodDeclaration(5118) into TypeDeclaration: class(5870) at 37", "Insert QualifiedName: java.sql.ResultSet(16) into ImportDeclaration(17) at 0", "Update QualifiedName: org.apache.hadoop.hbase.HTableDescriptor(28) to org.apache.hadoop.hbase.DoNotRetryIOException", "Update QualifiedName: org.apache.hadoop.hbase.util.Bytes(44) to org.apache.phoenix.coprocessor.MetaDataRegionObserver", "Insert QualifiedName: org.apache.phoenix.coprocessor.MetaDataRegionObserver.BuildIndexScheduleTask(48) into ImportDeclaration(49) at 0", "Update QualifiedName: org.apache.phoenix.query.ConnectionQueryServices(52) to org.apache.phoenix.execute.CommitException", "Insert QualifiedName: org.apache.phoenix.jdbc.PhoenixStatement(58) into ImportDeclaration(59) at 0", "Insert QualifiedName: org.slf4j.Logger(98) into ImportDeclaration(99) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(100) into ImportDeclaration(101) at 0", "Insert SingleMemberAnnotation(106) into TypeDeclaration: class(5870) at 0", "Insert FieldDeclaration(129) into TypeDeclaration: class(5870) at 5", "Insert FieldDeclaration(165) into TypeDeclaration: class(5870) at 9", "Insert FieldDeclaration(172) into TypeDeclaration: class(5870) at 10", "Insert MethodDeclaration(305) into TypeDeclaration: class(5870) at 12", "Insert MethodDeclaration(394) into TypeDeclaration: class(5870) at 13", "Insert MethodDeclaration(1098) into TypeDeclaration: class(5870) at 19", "Insert MethodDeclaration(3391) into TypeDeclaration: class(5870) at 30", "Insert MethodDeclaration(4033) into TypeDeclaration: class(5870) at 32", "Insert MethodDeclaration(4693) into TypeDeclaration: class(5870) at 35", "Insert MethodDeclaration(4706) into TypeDeclaration: class(5870) at 36", "Insert MethodDeclaration(5199) into TypeDeclaration: class(5870) at 37", "Insert SimpleName: SuppressWarnings(104) into SingleMemberAnnotation(106) at 0", "Insert StringLiteral: \"deprecation\"(105) into SingleMemberAnnotation(106) at 1", "Insert Modifier: private(116) into FieldDeclaration(129) at 0", "Insert Modifier: static(117) into FieldDeclaration(129) at 1", "Insert Modifier: final(118) into FieldDeclaration(129) at 2", "Insert SimpleType: Logger(120) into FieldDeclaration(129) at 3", "Insert VariableDeclarationFragment(128) into FieldDeclaration(129) at 4", "Update PrimitiveType: int(126) to long", "Insert VariableDeclarationFragment(156) into FieldDeclaration(157) at 4", "Insert Modifier: private(158) into FieldDeclaration(165) at 0", "Insert Modifier: static(159) into FieldDeclaration(165) at 1", "Insert Modifier: final(160) into FieldDeclaration(165) at 2", "Insert PrimitiveType: long(161) into FieldDeclaration(165) at 3", "Move VariableDeclarationFragment(129) into FieldDeclaration(165) at 4", "Insert Modifier: private(166) into FieldDeclaration(172) at 0", "Insert Modifier: static(167) into FieldDeclaration(172) at 1", "Insert SimpleType: RegionCoprocessorEnvironment(169) into FieldDeclaration(172) at 2", "Insert VariableDeclarationFragment(171) into FieldDeclaration(172) at 3", "Insert Modifier: private(283) into MethodDeclaration(305) at 0", "Insert Modifier: static(284) into MethodDeclaration(305) at 1", "Insert PrimitiveType: void(285) into MethodDeclaration(305) at 2", "Insert SimpleName: runIndexRebuilder(286) into MethodDeclaration(305) at 3", "Move SimpleType: InterruptedException(5134) into MethodDeclaration(305) at 4", "Move SimpleType: SQLException(4016) into MethodDeclaration(305) at 5", "Insert Block(304) into MethodDeclaration(305) at 6", "Insert Modifier: private(306) into MethodDeclaration(394) at 0", "Insert Modifier: static(307) into MethodDeclaration(394) at 1", "Insert PrimitiveType: void(308) into MethodDeclaration(394) at 2", "Insert SimpleName: runIndexRebuilderAsync(309) into MethodDeclaration(394) at 3", "Insert SingleVariableDeclaration(313) into MethodDeclaration(394) at 4", "Insert SingleVariableDeclaration(319) into MethodDeclaration(394) at 5", "Insert Block(393) into MethodDeclaration(394) at 6", "Update SimpleName: hasDisabledIndex(811) to hasInactiveIndex", "Update SimpleName: hasInactiveIndex(764) to hasDisabledIndex", "Insert Block(1046) into MethodDeclaration(1047) at 7", "Insert Modifier: private(1048) into MethodDeclaration(1098) at 0", "Insert Modifier: static(1049) into MethodDeclaration(1098) at 1", "Insert PrimitiveType: boolean(1050) into MethodDeclaration(1098) at 2", "Insert SimpleName: hasIndexWithState(1051) into MethodDeclaration(1098) at 3", "Insert SingleVariableDeclaration(1055) into MethodDeclaration(1098) at 4", "Insert SingleVariableDeclaration(1059) into MethodDeclaration(1098) at 5", "Insert SingleVariableDeclaration(1063) into MethodDeclaration(1098) at 6", "Insert SimpleType: TableNotFoundException(1065) into MethodDeclaration(1098) at 7", "Move Block(806) into MethodDeclaration(1098) at 8", "Move MarkerAnnotation(2433) into MethodDeclaration(2563) at 0", "Move SimpleType: Throwable(2438) into MethodDeclaration(2563) at 5", "Move MarkerAnnotation(2603) into MethodDeclaration(2761) at 0", "Move SimpleType: Throwable(2608) into MethodDeclaration(2761) at 5", "Move MarkerAnnotation(2807) into MethodDeclaration(2945) at 0", "Move SimpleType: Throwable(2812) into MethodDeclaration(2945) at 4", "Move MarkerAnnotation(2249) into MethodDeclaration(3129) at 0", "Move SimpleType: Throwable(2254) into MethodDeclaration(3129) at 4", "Move MarkerAnnotation(2064) into MethodDeclaration(3391) at 0", "Move Modifier: public(2808) into MethodDeclaration(3391) at 1", "Move PrimitiveType: void(2809) into MethodDeclaration(3391) at 2", "Move SimpleName: testMultiValuesAtSameTS(2810) into MethodDeclaration(3391) at 3", "Move SimpleType: Throwable(2069) into MethodDeclaration(3391) at 4", "Insert Block(3390) into MethodDeclaration(3391) at 5", "Update SimpleName: testSeparateTimeBatchesRequired(3024) to testTimeBatchesInCoprocessorRequired", "Move MarkerAnnotation(4059) into MethodDeclaration(4033) at 0", "Update Modifier: static(3991) to public", "Move Modifier: static(3991) into MethodDeclaration(4033) at 1", "Move PrimitiveType: void(3992) into MethodDeclaration(4033) at 2", "Update SimpleName: waitForIndexRebuild(3993) to testBatchingDuringRebuild", "Move SimpleName: waitForIndexRebuild(3993) into MethodDeclaration(4033) at 3", "Insert SimpleType: Throwable(3717) into MethodDeclaration(4033) at 4", "Insert Block(4032) into MethodDeclaration(4033) at 5", "Move MarkerAnnotation(4522) into MethodDeclaration(4693) at 0", "Insert Modifier: public(4683) into MethodDeclaration(4693) at 1", "Insert PrimitiveType: void(4684) into MethodDeclaration(4693) at 2", "Insert SimpleName: testIndexWriteFailureDisablingIndex(4685) into MethodDeclaration(4693) at 3", "Move SimpleType: Throwable(4527) into MethodDeclaration(4693) at 4", "Insert Block(4692) into MethodDeclaration(4693) at 5", "Move MarkerAnnotation(4736) into MethodDeclaration(4706) at 0", "Insert Modifier: public(4696) into MethodDeclaration(4706) at 1", "Insert PrimitiveType: void(4697) into MethodDeclaration(4706) at 2", "Insert SimpleName: testIndexWriteFailureLeavingIndexActive(4698) into MethodDeclaration(4706) at 3", "Move SimpleType: Throwable(4741) into MethodDeclaration(4706) at 4", "Insert Block(4705) into MethodDeclaration(4706) at 5", "Insert Modifier: private(4707) into MethodDeclaration(5199) at 0", "Insert PrimitiveType: void(4708) into MethodDeclaration(5199) at 1", "Insert SimpleName: testIndexWriteFailureDuringRebuild(4709) into MethodDeclaration(5199) at 2", "Move SingleVariableDeclaration(4005) into MethodDeclaration(5199) at 3", "Move SimpleType: Throwable(4064) into MethodDeclaration(5199) at 4", "Insert Block(5198) into MethodDeclaration(5199) at 5", "Insert MarkerAnnotation(5201) into MethodDeclaration(5427) at 0", "Update SimpleName: testDeleteAndUpsertValuesAtSameTS2(4739) to testDeleteAndUpsertValuesAtSameTS1", "Insert SimpleType: Throwable(5206) into MethodDeclaration(5427) at 4", "Insert MarkerAnnotation(5429) into MethodDeclaration(5655) at 0", "Update Modifier: static(5277) to public", "Update SimpleName: removeWriteFailingCoprocessor(5279) to testDeleteAndUpsertValuesAtSameTS2", "Insert SimpleType: Throwable(5434) into MethodDeclaration(5655) at 4", "Insert Block(5654) into MethodDeclaration(5655) at 5", "Insert SimpleName: Logger(119) into SimpleType: Logger(120) at 0", "Insert SimpleName: LOG(121) into VariableDeclarationFragment(128) at 0", "Insert MethodInvocation(127) into VariableDeclarationFragment(128) at 1", "Insert SimpleName: REBUILD_PERIOD(154) into VariableDeclarationFragment(156) at 0", "Insert NumberLiteral: 50000(155) into VariableDeclarationFragment(156) at 1", "Insert SimpleName: RegionCoprocessorEnvironment(168) into SimpleType: RegionCoprocessorEnvironment(169) at 0", "Insert SimpleName: indexRebuildTaskRegionEnvironment(170) into VariableDeclarationFragment(171) at 0", "Insert ExpressionStatement(226) into Block(281) at 4", "Insert ExpressionStatement(273) into Block(281) at 7", "Insert ExpressionStatement(280) into Block(281) at 8", "Insert VariableDeclarationStatement(299) into Block(304) at 0", "Insert ExpressionStatement(303) into Block(304) at 1", "Insert Modifier: final(310) into SingleVariableDeclaration(313) at 0", "Insert PrimitiveType: int(311) into SingleVariableDeclaration(313) at 1", "Insert SimpleName: interval(312) into SingleVariableDeclaration(313) at 2", "Insert Modifier: final(314) into SingleVariableDeclaration(319) at 0", "Insert ArrayType: boolean[](317) into SingleVariableDeclaration(319) at 1", "Insert SimpleName: cancel(318) into SingleVariableDeclaration(319) at 2", "Insert VariableDeclarationStatement(383) into Block(393) at 0", "Insert ExpressionStatement(388) into Block(393) at 1", "Insert ExpressionStatement(392) into Block(393) at 2", "Insert VariableDeclarationStatement(882) into Block(950) at 17", "Insert TryStatement(934) into Block(950) at 18", "Insert ReturnStatement(1045) into Block(1046) at 0", "Insert SimpleType: PMetaData(1053) into SingleVariableDeclaration(1055) at 0", "Insert SimpleName: metaCache(1054) into SingleVariableDeclaration(1055) at 1", "Insert SimpleType: PTableKey(1057) into SingleVariableDeclaration(1059) at 0", "Insert SimpleName: key(1058) into SingleVariableDeclaration(1059) at 1", "Insert SimpleType: PIndexState(1061) into SingleVariableDeclaration(1063) at 0", "Insert SimpleName: expectedState(1062) into SingleVariableDeclaration(1063) at 1", "Insert SimpleName: TableNotFoundException(1064) into SimpleType: TableNotFoundException(1065) at 0", "Move VariableDeclarationStatement(2445) into Block(2562) at 0", "Move VariableDeclarationStatement(2452) into Block(2562) at 1", "Move VariableDeclarationStatement(2459) into Block(2562) at 2", "Move VariableDeclarationStatement(2469) into Block(2562) at 3", "Move VariableDeclarationStatement(2479) into Block(2562) at 4", "Move VariableDeclarationStatement(2615) into Block(2760) at 0", "Move VariableDeclarationStatement(2622) into Block(2760) at 1", "Move VariableDeclarationStatement(2629) into Block(2760) at 2", "Move VariableDeclarationStatement(2639) into Block(2760) at 3", "Move VariableDeclarationStatement(2649) into Block(2760) at 4", "Move VariableDeclarationStatement(2819) into Block(2944) at 0", "Move VariableDeclarationStatement(2826) into Block(2944) at 1", "Move VariableDeclarationStatement(2833) into Block(2944) at 2", "Move VariableDeclarationStatement(2285) into Block(2944) at 3", "Move VariableDeclarationStatement(2295) into Block(2944) at 4", "Move VariableDeclarationStatement(2261) into Block(3128) at 0", "Move VariableDeclarationStatement(2268) into Block(3128) at 1", "Move VariableDeclarationStatement(2275) into Block(3128) at 2", "Move VariableDeclarationStatement(2100) into Block(3128) at 3", "Move VariableDeclarationStatement(2110) into Block(3128) at 4", "Move VariableDeclarationStatement(2076) into Block(3390) at 0", "Move VariableDeclarationStatement(2083) into Block(3390) at 1", "Move VariableDeclarationStatement(2090) into Block(3390) at 2", "Move VariableDeclarationStatement(2844) into Block(3390) at 3", "Move VariableDeclarationStatement(2855) into Block(3390) at 4", "Move VariableDeclarationStatement(2865) into Block(3390) at 5", "Move ExpressionStatement(2870) into Block(3390) at 6", "Insert TryStatement(3389) into Block(3390) at 7", "Update SimpleName: Connection(3994) to Throwable", "Move SimpleName: Connection(3994) into SimpleType: Throwable(3717) at 0", "Move VariableDeclarationStatement(4534) into Block(4032) at 0", "Move VariableDeclarationStatement(4541) into Block(4032) at 1", "Move VariableDeclarationStatement(4548) into Block(4032) at 2", "Move VariableDeclarationStatement(4559) into Block(4032) at 3", "Move VariableDeclarationStatement(4570) into Block(4032) at 4", "Insert VariableDeclarationStatement(3770) into Block(4032) at 5", "Insert VariableDeclarationStatement(3780) into Block(4032) at 6", "Move ExpressionStatement(4029) into Block(4032) at 7", "Insert TryStatement(4031) into Block(4032) at 8", "Insert ExpressionStatement(4691) into Block(4692) at 0", "Insert ExpressionStatement(4704) into Block(4705) at 0", "Update SimpleName: expectedIndexState(4004) to indexStateOnFailure", "Move VariableDeclarationStatement(4071) into Block(5198) at 0", "Move VariableDeclarationStatement(4078) into Block(5198) at 1", "Move VariableDeclarationStatement(4085) into Block(5198) at 2", "Move VariableDeclarationStatement(4096) into Block(5198) at 3", "Move VariableDeclarationStatement(4107) into Block(5198) at 4", "Move VariableDeclarationStatement(4117) into Block(5198) at 5", "Move VariableDeclarationStatement(4127) into Block(5198) at 6", "Move ExpressionStatement(4132) into Block(5198) at 7", "Insert TryStatement(5197) into Block(5198) at 8", "Insert SimpleName: Test(5200) into MarkerAnnotation(5201) at 0", "Insert SimpleName: Throwable(5205) into SimpleType: Throwable(5206) at 0", "Insert SimpleName: Test(5428) into MarkerAnnotation(5429) at 0", "Update SimpleName: Connection(5280) to Throwable", "Move SimpleName: Connection(5280) into SimpleType: Throwable(5434) at 0", "Insert VariableDeclarationStatement(5441) into Block(5654) at 0", "Insert VariableDeclarationStatement(5448) into Block(5654) at 1", "Move VariableDeclarationStatement(5302) into Block(5654) at 2", "Move VariableDeclarationStatement(5314) into Block(5654) at 3", "Insert VariableDeclarationStatement(5477) into Block(5654) at 4", "Move VariableDeclarationStatement(4580) into Block(5654) at 5", "Move ExpressionStatement(4585) into Block(5654) at 6", "Insert TryStatement(5653) into Block(5654) at 7", "Insert SimpleName: LoggerFactory(122) into MethodInvocation(127) at 0", "Insert SimpleName: getLogger(123) into MethodInvocation(127) at 1", "Insert TypeLiteral(126) into MethodInvocation(127) at 2", "Insert MethodInvocation(225) into ExpressionStatement(226) at 0", "Insert Assignment: =(272) into ExpressionStatement(273) at 0", "Insert MethodInvocation(279) into ExpressionStatement(280) at 0", "Insert SimpleType: BuildIndexScheduleTask(292) into VariableDeclarationStatement(299) at 0", "Insert VariableDeclarationFragment(298) into VariableDeclarationStatement(299) at 1", "Insert MethodInvocation(302) into ExpressionStatement(303) at 0", "Insert PrimitiveType: boolean(315) into ArrayType: boolean[](317) at 0", "Insert Dimension(316) into ArrayType: boolean[](317) at 1", "Insert SimpleType: Thread(321) into VariableDeclarationStatement(383) at 0", "Insert VariableDeclarationFragment(382) into VariableDeclarationStatement(383) at 1", "Insert MethodInvocation(387) into ExpressionStatement(388) at 0", "Insert MethodInvocation(391) into ExpressionStatement(392) at 0", "Insert ArrayType: boolean[](874) into VariableDeclarationStatement(882) at 0", "Insert VariableDeclarationFragment(881) into VariableDeclarationStatement(882) at 1", "Insert Block(926) into TryStatement(934) at 0", "Insert Block(933) into TryStatement(934) at 1", "Insert MethodInvocation(1044) into ReturnStatement(1045) at 0", "Insert SimpleName: PMetaData(1052) into SimpleType: PMetaData(1053) at 0", "Insert SimpleName: PTableKey(1056) into SimpleType: PTableKey(1057) at 0", "Insert SimpleName: PIndexState(1060) into SimpleType: PIndexState(1061) at 0", "Move VariableDeclarationExpression(2489) into TryStatement(2561) at 0", "Move VariableDeclarationExpression(2659) into TryStatement(2759) at 0", "Move VariableDeclarationExpression(2880) into TryStatement(2943) at 0", "Move VariableDeclarationExpression(2305) into TryStatement(3127) at 0", "Move VariableDeclarationExpression(2120) into TryStatement(3389) at 0", "Insert Block(3382) into TryStatement(3389) at 1", "Move Block(3016) into TryStatement(3389) at 2", "Insert SimpleType: PTableKey(3762) into VariableDeclarationStatement(3770) at 0", "Insert VariableDeclarationFragment(3769) into VariableDeclarationStatement(3770) at 1", "Insert Modifier: final(3771) into VariableDeclarationStatement(3780) at 0", "Insert SimpleType: MyClock(3773) into VariableDeclarationStatement(3780) at 1", "Insert VariableDeclarationFragment(3779) into VariableDeclarationStatement(3780) at 2", "Move VariableDeclarationExpression(4595) into TryStatement(4031) at 0", "Insert Block(4024) into TryStatement(4031) at 1", "Move Block(4731) into TryStatement(4031) at 2", "Move ExpressionStatement(3598) into Block(4671) at 19", "Insert MethodInvocation(4690) into ExpressionStatement(4691) at 0", "Insert MethodInvocation(4703) into ExpressionStatement(4704) at 0", "Move VariableDeclarationExpression(4142) into TryStatement(5197) at 0", "Insert Block(5190) into TryStatement(5197) at 1", "Move Block(4517) into TryStatement(5197) at 2", "Move VariableDeclarationExpression(5203) into TryStatement(5425) at 0", "Insert SimpleType: String(5436) into VariableDeclarationStatement(5441) at 0", "Insert VariableDeclarationFragment(5440) into VariableDeclarationStatement(5441) at 1", "Insert SimpleType: String(5443) into VariableDeclarationStatement(5448) at 0", "Insert VariableDeclarationFragment(5447) into VariableDeclarationStatement(5448) at 1", "Update SimpleType: ConnectionQueryServices(5291) to String", "Insert Modifier: final(5456) into VariableDeclarationStatement(5466) at 0", "Update SimpleType: HTableDescriptor(5304) to String", "Insert Modifier: final(5467) into VariableDeclarationStatement(5477) at 0", "Insert SimpleType: String(5469) into VariableDeclarationStatement(5477) at 1", "Insert VariableDeclarationFragment(5476) into VariableDeclarationStatement(5477) at 2", "Move VariableDeclarationExpression(4809) into TryStatement(5653) at 0", "Insert Block(5646) into TryStatement(5653) at 1", "Insert Block(5652) into TryStatement(5653) at 2", "Insert ThrowStatement(5866) into Block(5867) at 0", "Insert SimpleType: PartialIndexRebuilderIT(125) into TypeLiteral(126) at 0", "Update StringLiteral: \"120000\"(173) to \"300000\"", "Insert SimpleName: serverProps(218) into MethodInvocation(225) at 0", "Insert SimpleName: put(219) into MethodInvocation(225) at 1", "Insert QualifiedName: QueryServices.INDEX_FAILURE_HANDLING_REBUILD_PERIOD(220) into MethodInvocation(225) at 2", "Insert MethodInvocation(224) into MethodInvocation(225) at 3", "Insert SimpleName: indexRebuildTaskRegionEnvironment(248) into Assignment: =(272) at 0", "Insert CastExpression(271) into Assignment: =(272) at 1", "Insert SimpleName: MetaDataRegionObserver(274) into MethodInvocation(279) at 0", "Insert SimpleName: initRebuildIndexConnectionProps(275) into MethodInvocation(279) at 1", "Insert MethodInvocation(278) into MethodInvocation(279) at 2", "Insert SimpleName: BuildIndexScheduleTask(291) into SimpleType: BuildIndexScheduleTask(292) at 0", "Insert SimpleName: task(293) into VariableDeclarationFragment(298) at 0", "Insert ClassInstanceCreation(297) into VariableDeclarationFragment(298) at 1", "Insert SimpleName: task(300) into MethodInvocation(302) at 0", "Insert SimpleName: run(301) into MethodInvocation(302) at 1", "Insert SimpleName: Thread(320) into SimpleType: Thread(321) at 0", "Insert SimpleName: thread(322) into VariableDeclarationFragment(382) at 0", "Insert ClassInstanceCreation(381) into VariableDeclarationFragment(382) at 1", "Insert SimpleName: thread(384) into MethodInvocation(387) at 0", "Insert SimpleName: setDaemon(385) into MethodInvocation(387) at 1", "Insert BooleanLiteral: true(386) into MethodInvocation(387) at 2", "Insert SimpleName: thread(389) into MethodInvocation(391) at 0", "Insert SimpleName: start(390) into MethodInvocation(391) at 1", "Insert PrimitiveType: boolean(872) into ArrayType: boolean[](874) at 0", "Insert Dimension(873) into ArrayType: boolean[](874) at 1", "Insert SimpleName: cancel(875) into VariableDeclarationFragment(881) at 0", "Insert ArrayCreation(880) into VariableDeclarationFragment(881) at 1", "Move DoStatement(716) into Block(926) at 0", "Insert ExpressionStatement(932) into Block(933) at 0", "Insert SimpleName: hasIndexWithState(1040) into MethodInvocation(1044) at 0", "Insert SimpleName: metaCache(1041) into MethodInvocation(1044) at 1", "Insert SimpleName: key(1042) into MethodInvocation(1044) at 2", "Insert QualifiedName: PIndexState.DISABLE(1043) into MethodInvocation(1044) at 3", "Insert VariableDeclarationStatement(1835) into Block(1878) at 6", "Insert TryStatement(1862) into Block(1878) at 7", "Insert VariableDeclarationStatement(2113) into Block(2162) at 12", "Insert TryStatement(2140) into Block(2162) at 13", "Insert ExpressionStatement(2335) into Block(2361) at 13", "Insert ExpressionStatement(2340) into Block(2361) at 14", "Insert ExpressionStatement(2343) into Block(2361) at 15", "Move ExpressionStatement(2499) into Block(2560) at 0", "Move ExpressionStatement(2511) into Block(2560) at 1", "Move ExpressionStatement(2525) into Block(2560) at 5", "Move VariableDeclarationStatement(2532) into Block(2560) at 6", "Move VariableDeclarationStatement(2548) into Block(2560) at 7", "Move ExpressionStatement(2556) into Block(2560) at 8", "Move ExpressionStatement(2570) into Block(2560) at 14", "Move ExpressionStatement(2583) into Block(2560) at 17", "Move ExpressionStatement(2413) into Block(2560) at 20", "Insert ExpressionStatement(2534) into Block(2560) at 13", "Insert ExpressionStatement(2539) into Block(2560) at 14", "Insert ExpressionStatement(2542) into Block(2560) at 15", "Move ExpressionStatement(4724) into Block(2560) at 26", "Move ExpressionStatement(2669) into Block(2758) at 0", "Move ExpressionStatement(2681) into Block(2758) at 1", "Move ExpressionStatement(2691) into Block(2758) at 2", "Move ExpressionStatement(2695) into Block(2758) at 3", "Move ExpressionStatement(2579) into Block(2758) at 13", "Move ExpressionStatement(2753) into Block(2758) at 14", "Move ExpressionStatement(2982) into Block(2758) at 18", "Insert ExpressionStatement(2732) into Block(2758) at 13", "Insert ExpressionStatement(2737) into Block(2758) at 14", "Insert ExpressionStatement(2740) into Block(2758) at 15", "Move ExpressionStatement(3009) into Block(2758) at 23", "Move ExpressionStatement(2890) into Block(2942) at 0", "Move ExpressionStatement(2327) into Block(2942) at 1", "Move ExpressionStatement(2341) into Block(2942) at 3", "Move VariableDeclarationStatement(2163) into Block(2942) at 4", "Move VariableDeclarationStatement(2179) into Block(2942) at 5", "Move ExpressionStatement(2187) into Block(2942) at 6", "Move ExpressionStatement(2201) into Block(2942) at 8", "Move ExpressionStatement(2395) into Block(2942) at 9", "Move ExpressionStatement(2968) into Block(2942) at 10", "Insert ExpressionStatement(2916) into Block(2942) at 11", "Insert ExpressionStatement(2921) into Block(2942) at 12", "Insert ExpressionStatement(2924) into Block(2942) at 13", "Move ExpressionStatement(2427) into Block(2942) at 15", "Move ExpressionStatement(2315) into Block(3126) at 0", "Move ExpressionStatement(2142) into Block(3126) at 1", "Move ExpressionStatement(2337) into Block(3126) at 2", "Move ExpressionStatement(2156) into Block(3126) at 3", "Move ExpressionStatement(2924) into Block(3126) at 5", "Move VariableDeclarationStatement(2944) into Block(3126) at 8", "Move ExpressionStatement(2399) into Block(3126) at 12", "Insert ExpressionStatement(3100) into Block(3126) at 11", "Insert ExpressionStatement(3105) into Block(3126) at 12", "Insert ExpressionStatement(3108) into Block(3126) at 13", "Move ExpressionStatement(2243) into Block(3126) at 17", "Move ExpressionStatement(2130) into Block(3382) at 0", "Move ExpressionStatement(2894) into Block(3382) at 1", "Move ExpressionStatement(2906) into Block(3382) at 2", "Move ExpressionStatement(2910) into Block(3382) at 3", "Move ExpressionStatement(2920) into Block(3382) at 4", "Move ExpressionStatement(2708) into Block(3382) at 5", "Move ExpressionStatement(2928) into Block(3382) at 6", "Move VariableDeclarationStatement(2731) into Block(3382) at 7", "Move ExpressionStatement(2954) into Block(3382) at 8", "Move ExpressionStatement(2964) into Block(3382) at 9", "Move ExpressionStatement(2215) into Block(3382) at 10", "Move ExpressionStatement(2978) into Block(3382) at 11", "Move ExpressionStatement(2229) into Block(3382) at 12", "Move ExpressionStatement(2986) into Block(3382) at 13", "Move ExpressionStatement(2991) into Block(3382) at 14", "Move ExpressionStatement(2998) into Block(3382) at 15", "Move ExpressionStatement(3002) into Block(3382) at 16", "Insert ExpressionStatement(3364) into Block(3382) at 17", "Insert ExpressionStatement(3374) into Block(3382) at 18", "Move ExpressionStatement(4510) into Block(3382) at 19", "Insert ExpressionStatement(3683) into Block(3701) at 29", "Insert ExpressionStatement(3693) into Block(3701) at 30", "Insert SimpleName: PTableKey(3761) into SimpleType: PTableKey(3762) at 0", "Insert SimpleName: key(3763) into VariableDeclarationFragment(3769) at 0", "Insert ClassInstanceCreation(3768) into VariableDeclarationFragment(3769) at 1", "Move SimpleName: MyClock(4006) into SimpleType: MyClock(3773) at 0", "Insert SimpleName: clock(3774) into VariableDeclarationFragment(3779) at 0", "Insert ClassInstanceCreation(3778) into VariableDeclarationFragment(3779) at 1", "Update SimpleName: Thread(4025) to EnvironmentEdgeManager", "Update SimpleName: sleep(4026) to injectEdge", "Insert SimpleName: clock(3783) into MethodInvocation(3784) at 2", "Insert VariableDeclarationStatement(3808) into Block(4024) at 0", "Move ExpressionStatement(4165) into Block(4024) at 1", "Move ExpressionStatement(4231) into Block(4024) at 2", "Move ExpressionStatement(4181) into Block(4024) at 3", "Move ExpressionStatement(4256) into Block(4024) at 4", "Move ExpressionStatement(4195) into Block(4024) at 5", "Move ExpressionStatement(4252) into Block(4024) at 6", "Move ExpressionStatement(4281) into Block(4024) at 7", "Insert VariableDeclarationStatement(3872) into Block(4024) at 8", "Insert VariableDeclarationStatement(3879) into Block(4024) at 9", "Move ExpressionStatement(4307) into Block(4024) at 10", "Move ExpressionStatement(4503) into Block(4024) at 11", "Move ExpressionStatement(4248) into Block(4024) at 12", "Move ExpressionStatement(4277) into Block(4024) at 13", "Insert ExpressionStatement(3909) into Block(4024) at 14", "Move ExpressionStatement(4263) into Block(4024) at 15", "Move ExpressionStatement(4273) into Block(4024) at 16", "Insert ExpressionStatement(3934) into Block(4024) at 17", "Move ExpressionStatement(4291) into Block(4024) at 18", "Move ExpressionStatement(4359) into Block(4024) at 19", "Insert ExpressionStatement(3957) into Block(4024) at 20", "Insert ExpressionStatement(3966) into Block(4024) at 21", "Move ExpressionStatement(3649) into Block(4024) at 22", "Insert ExpressionStatement(3973) into Block(4024) at 23", "Move ExpressionStatement(4323) into Block(4024) at 24", "Move ExpressionStatement(4327) into Block(4024) at 25", "Insert ExpressionStatement(3990) into Block(4024) at 26", "Insert ExpressionStatement(3999) into Block(4024) at 27", "Insert ExpressionStatement(4003) into Block(4024) at 28", "Insert ExpressionStatement(4006) into Block(4024) at 29", "Insert ExpressionStatement(4016) into Block(4024) at 30", "Move ExpressionStatement(2597) into Block(4024) at 31", "Insert ExpressionStatement(4290) into Block(4336) at 21", "Insert ExpressionStatement(4307) into Block(4336) at 24", "Insert ExpressionStatement(4600) into Block(4671) at 9", "Insert ExpressionStatement(4610) into Block(4671) at 10", "Insert SimpleName: testIndexWriteFailureDuringRebuild(4688) into MethodInvocation(4690) at 0", "Insert QualifiedName: PIndexState.DISABLE(4689) into MethodInvocation(4690) at 1", "Insert SimpleName: testIndexWriteFailureDuringRebuild(4701) into MethodInvocation(4703) at 0", "Insert QualifiedName: PIndexState.PENDING_ACTIVE(4702) into MethodInvocation(4703) at 1", "Move VariableDeclarationStatement(4155) into Block(5190) at 0", "Insert ExpressionStatement(4820) into Block(5190) at 1", "Move ExpressionStatement(4169) into Block(5190) at 2", "Move ExpressionStatement(4337) into Block(5190) at 3", "Move ExpressionStatement(4185) into Block(5190) at 4", "Move ExpressionStatement(4355) into Block(5190) at 5", "Move ExpressionStatement(4199) into Block(5190) at 6", "Move ExpressionStatement(4203) into Block(5190) at 7", "Insert VariableDeclarationStatement(4874) into Block(5190) at 8", "Move VariableDeclarationStatement(4238) into Block(5190) at 9", "Insert ExpressionStatement(4895) into Block(5190) at 10", "Move ExpressionStatement(4299) into Block(5190) at 11", "Move ExpressionStatement(4418) into Block(5190) at 12", "Move ExpressionStatement(4295) into Block(5190) at 13", "Move ExpressionStatement(4426) into Block(5190) at 14", "Move ExpressionStatement(4436) into Block(5190) at 15", "Move ExpressionStatement(4440) into Block(5190) at 16", "Move ExpressionStatement(4444) into Block(5190) at 17", "Move ExpressionStatement(4454) into Block(5190) at 18", "Move ExpressionStatement(4341) into Block(5190) at 19", "Insert ExpressionStatement(4968) into Block(5190) at 20", "Move ExpressionStatement(4475) into Block(5190) at 21", "Move ExpressionStatement(4345) into Block(5190) at 22", "Move ExpressionStatement(4479) into Block(5190) at 23", "Move ExpressionStatement(4486) into Block(5190) at 24", "Move ExpressionStatement(4378) into Block(5190) at 25", "Insert ExpressionStatement(5006) into Block(5190) at 26", "Insert ExpressionStatement(5015) into Block(5190) at 27", "Move ExpressionStatement(4374) into Block(5190) at 28", "Move ExpressionStatement(4706) into Block(5190) at 29", "Insert TryStatement(5049) into Block(5190) at 30", "Move ExpressionStatement(4713) into Block(5190) at 31", "Insert VariableDeclarationStatement(5072) into Block(5190) at 32", "Move VariableDeclarationStatement(5144) into Block(5190) at 33", "Move ExpressionStatement(5150) into Block(5190) at 34", "Move ExpressionStatement(5156) into Block(5190) at 35", "Insert ExpressionStatement(5120) into Block(5190) at 36", "Insert ExpressionStatement(5129) into Block(5190) at 37", "Insert ExpressionStatement(5132) into Block(5190) at 38", "Insert ExpressionStatement(5147) into Block(5190) at 39", "Insert ExpressionStatement(5151) into Block(5190) at 40", "Insert ExpressionStatement(5154) into Block(5190) at 41", "Move ExpressionStatement(5226) into Block(5190) at 42", "Move ExpressionStatement(5230) into Block(5190) at 43", "Move ExpressionStatement(5236) into Block(5190) at 44", "Insert ExpressionStatement(5182) into Block(5190) at 45", "Insert ExpressionStatement(5189) into Block(5190) at 46", "Move ExpressionStatement(4679) into Block(5418) at 9", "Move ExpressionStatement(4693) into Block(5418) at 12", "Insert ExpressionStatement(5400) into Block(5418) at 17", "Insert ExpressionStatement(5410) into Block(5418) at 18", "Insert SimpleName: String(5435) into SimpleType: String(5436) at 0", "Insert SimpleName: schemaName(5437) into VariableDeclarationFragment(5440) at 0", "Insert MethodInvocation(5439) into VariableDeclarationFragment(5440) at 1", "Move SimpleName: String(5284) into SimpleType: String(5443) at 0", "Insert SimpleName: tableName(5444) into VariableDeclarationFragment(5447) at 0", "Insert MethodInvocation(5446) into VariableDeclarationFragment(5447) at 1", "Update SimpleName: ConnectionQueryServices(5290) to String", "Update SimpleName: services(5292) to indexName", "Update SimpleName: HTableDescriptor(5303) to String", "Update SimpleName: descriptor(5305) to fullTableName", "Insert SimpleName: String(5468) into SimpleType: String(5469) at 0", "Insert SimpleName: fullIndexName(5470) into VariableDeclarationFragment(5476) at 0", "Insert MethodInvocation(5475) into VariableDeclarationFragment(5476) at 1", "Move ExpressionStatement(4605) into Block(5646) at 0", "Move ExpressionStatement(4609) into Block(5646) at 1", "Move ExpressionStatement(4621) into Block(5646) at 2", "Move ExpressionStatement(4625) into Block(5646) at 3", "Move ExpressionStatement(4635) into Block(5646) at 4", "Move ExpressionStatement(4639) into Block(5646) at 5", "Move ExpressionStatement(4643) into Block(5646) at 6", "Move VariableDeclarationStatement(4659) into Block(5646) at 7", "Move ExpressionStatement(4669) into Block(5646) at 8", "Move ExpressionStatement(4893) into Block(5646) at 9", "Move ExpressionStatement(4683) into Block(5646) at 10", "Move ExpressionStatement(4907) into Block(5646) at 11", "Move ExpressionStatement(4697) into Block(5646) at 12", "Move ExpressionStatement(4701) into Block(5646) at 13", "Insert ExpressionStatement(5611) into Block(5646) at 14", "Move ExpressionStatement(5345) into Block(5646) at 15", "Insert ExpressionStatement(5625) into Block(5646) at 16", "Insert ExpressionStatement(5628) into Block(5646) at 17", "Insert ExpressionStatement(5638) into Block(5646) at 18", "Move ExpressionStatement(2767) into Block(5646) at 19", "Move ExpressionStatement(5381) into Block(5652) at 0", "Insert ClassInstanceCreation(5865) into ThrowStatement(5866) at 0", "Insert SimpleName: PartialIndexRebuilderIT(124) into SimpleType: PartialIndexRebuilderIT(125) at 0", "Insert SimpleName: Long(221) into MethodInvocation(224) at 0", "Insert SimpleName: toString(222) into MethodInvocation(224) at 1", "Insert SimpleName: REBUILD_PERIOD(223) into MethodInvocation(224) at 2", "Insert SimpleType: RegionCoprocessorEnvironment(250) into CastExpression(271) at 0", "Insert MethodInvocation(270) into CastExpression(271) at 1", "Insert SimpleName: indexRebuildTaskRegionEnvironment(276) into MethodInvocation(278) at 0", "Insert SimpleName: getConfiguration(277) into MethodInvocation(278) at 1", "Insert SimpleType: MetaDataRegionObserver.BuildIndexScheduleTask(295) into ClassInstanceCreation(297) at 0", "Insert SimpleName: indexRebuildTaskRegionEnvironment(296) into ClassInstanceCreation(297) at 1", "Insert SimpleType: Thread(324) into ClassInstanceCreation(381) at 0", "Insert ClassInstanceCreation(380) into ClassInstanceCreation(381) at 1", "Insert ArrayType: boolean[](878) into ArrayCreation(880) at 0", "Insert NumberLiteral: 1(879) into ArrayCreation(880) at 1", "Insert Assignment: =(931) into ExpressionStatement(932) at 0", "Insert ArrayType: boolean[](1827) into VariableDeclarationStatement(1835) at 0", "Insert VariableDeclarationFragment(1834) into VariableDeclarationStatement(1835) at 1", "Insert Block(1854) into TryStatement(1862) at 0", "Insert Block(1861) into TryStatement(1862) at 1", "Insert ArrayType: boolean[](2105) into VariableDeclarationStatement(2113) at 0", "Insert VariableDeclarationFragment(2112) into VariableDeclarationStatement(2113) at 1", "Insert Block(2132) into TryStatement(2140) at 0", "Insert Block(2139) into TryStatement(2140) at 1", "Insert MethodInvocation(2334) into ExpressionStatement(2335) at 0", "Insert MethodInvocation(2339) into ExpressionStatement(2340) at 0", "Insert MethodInvocation(2342) into ExpressionStatement(2343) at 0", "Insert MethodInvocation(2352) into ExpressionStatement(2353) at 0", "Insert MethodInvocation(2533) into ExpressionStatement(2534) at 0", "Insert MethodInvocation(2538) into ExpressionStatement(2539) at 0", "Insert MethodInvocation(2541) into ExpressionStatement(2542) at 0", "Insert MethodInvocation(2551) into ExpressionStatement(2552) at 0", "Insert MethodInvocation(2731) into ExpressionStatement(2732) at 0", "Insert MethodInvocation(2736) into ExpressionStatement(2737) at 0", "Insert MethodInvocation(2739) into ExpressionStatement(2740) at 0", "Insert MethodInvocation(2749) into ExpressionStatement(2750) at 0", "Insert MethodInvocation(2915) into ExpressionStatement(2916) at 0", "Insert MethodInvocation(2920) into ExpressionStatement(2921) at 0", "Insert MethodInvocation(2923) into ExpressionStatement(2924) at 0", "Insert MethodInvocation(2933) into ExpressionStatement(2934) at 0", "Insert MethodInvocation(3099) into ExpressionStatement(3100) at 0", "Insert MethodInvocation(3104) into ExpressionStatement(3105) at 0", "Insert MethodInvocation(3107) into ExpressionStatement(3108) at 0", "Insert MethodInvocation(3117) into ExpressionStatement(3118) at 0", "Insert MethodInvocation(3356) into ExpressionStatement(3357) at 0", "Insert MethodInvocation(3363) into ExpressionStatement(3364) at 0", "Insert MethodInvocation(3373) into ExpressionStatement(3374) at 0", "Insert MethodInvocation(3675) into ExpressionStatement(3676) at 0", "Insert MethodInvocation(3682) into ExpressionStatement(3683) at 0", "Insert MethodInvocation(3692) into ExpressionStatement(3693) at 0", "Insert SimpleType: PTableKey(3765) into ClassInstanceCreation(3768) at 0", "Insert NullLiteral(3766) into ClassInstanceCreation(3768) at 1", "Insert SimpleName: fullTableName(3767) into ClassInstanceCreation(3768) at 2", "Insert SimpleType: MyClock(3776) into ClassInstanceCreation(3778) at 0", "Insert NumberLiteral: 1000(3777) into ClassInstanceCreation(3778) at 1", "Insert SimpleType: PMetaData(3797) into VariableDeclarationStatement(3808) at 0", "Insert VariableDeclarationFragment(3807) into VariableDeclarationStatement(3808) at 1", "Insert SimpleType: HTableInterface(3858) into VariableDeclarationStatement(3872) at 0", "Insert VariableDeclarationFragment(3871) into VariableDeclarationStatement(3872) at 1", "Insert PrimitiveType: long(3873) into VariableDeclarationStatement(3879) at 0", "Insert VariableDeclarationFragment(3878) into VariableDeclarationStatement(3879) at 1", "Insert Assignment: +=(3908) into ExpressionStatement(3909) at 0", "Insert MethodInvocation(3924) into ExpressionStatement(3925) at 0", "Insert MethodInvocation(3933) into ExpressionStatement(3934) at 0", "Insert MethodInvocation(3956) into ExpressionStatement(3957) at 0", "Insert MethodInvocation(3965) into ExpressionStatement(3966) at 0", "Insert MethodInvocation(3972) into ExpressionStatement(3973) at 0", "Insert MethodInvocation(3982) into ExpressionStatement(3983) at 0", "Insert MethodInvocation(3989) into ExpressionStatement(3990) at 0", "Insert MethodInvocation(3998) into ExpressionStatement(3999) at 0", "Insert Assignment: +=(4002) into ExpressionStatement(4003) at 0", "Insert MethodInvocation(4005) into ExpressionStatement(4006) at 0", "Insert MethodInvocation(4015) into ExpressionStatement(4016) at 0", "Insert MethodInvocation(4289) into ExpressionStatement(4290) at 0", "Insert MethodInvocation(4299) into ExpressionStatement(4300) at 0", "Insert MethodInvocation(4306) into ExpressionStatement(4307) at 0", "Insert MethodInvocation(4316) into ExpressionStatement(4317) at 0", "Insert MethodInvocation(4599) into ExpressionStatement(4600) at 0", "Insert MethodInvocation(4609) into ExpressionStatement(4610) at 0", "Insert MethodInvocation(4662) into ExpressionStatement(4663) at 0", "Insert MethodInvocation(4819) into ExpressionStatement(4820) at 0", "Insert SimpleType: HTableInterface(4860) into VariableDeclarationStatement(4874) at 0", "Insert VariableDeclarationFragment(4873) into VariableDeclarationStatement(4874) at 1", "Insert MethodInvocation(4894) into ExpressionStatement(4895) at 0", "Insert MethodInvocation(4926) into ExpressionStatement(4927) at 0", "Insert MethodInvocation(4935) into ExpressionStatement(4936) at 0", "Insert MethodInvocation(4944) into ExpressionStatement(4945) at 0", "Insert MethodInvocation(4967) into ExpressionStatement(4968) at 0", "Insert MethodInvocation(4976) into ExpressionStatement(4977) at 0", "Insert MethodInvocation(4998) into ExpressionStatement(4999) at 0", "Insert MethodInvocation(5005) into ExpressionStatement(5006) at 0", "Insert MethodInvocation(5014) into ExpressionStatement(5015) at 0", "Insert Block(5042) into TryStatement(5049) at 0", "Insert CatchClause(5048) into TryStatement(5049) at 1", "Insert MethodInvocation(5058) into ExpressionStatement(5059) at 0", "Insert SimpleType: PhoenixStatement(5061) into VariableDeclarationStatement(5072) at 0", "Insert VariableDeclarationFragment(5071) into VariableDeclarationStatement(5072) at 1", "Update SimpleType: CountDownLatch(5137) to ResultSet", "Insert MethodInvocation(5097) into ExpressionStatement(5098) at 0", "Insert MethodInvocation(5119) into ExpressionStatement(5120) at 0", "Insert MethodInvocation(5128) into ExpressionStatement(5129) at 0", "Insert MethodInvocation(5131) into ExpressionStatement(5132) at 0", "Insert MethodInvocation(5146) into ExpressionStatement(5147) at 0", "Insert Assignment: +=(5150) into ExpressionStatement(5151) at 0", "Insert MethodInvocation(5153) into ExpressionStatement(5154) at 0", "Insert MethodInvocation(5162) into ExpressionStatement(5163) at 0", "Insert MethodInvocation(5181) into ExpressionStatement(5182) at 0", "Insert MethodInvocation(5188) into ExpressionStatement(5189) at 0", "Insert MethodInvocation(5392) into ExpressionStatement(5393) at 0", "Insert MethodInvocation(5399) into ExpressionStatement(5400) at 0", "Insert MethodInvocation(5409) into ExpressionStatement(5410) at 0", "Insert SimpleName: generateUniqueName(5438) into MethodInvocation(5439) at 0", "Insert SimpleName: generateUniqueName(5445) into MethodInvocation(5446) at 0", "Update SimpleName: getQueryServices(5299) to generateUniqueName", "Update SimpleName: services(5306) to SchemaUtil", "Update SimpleName: getTableDescriptor(5307) to getTableName", "Update SimpleName: Bytes(5308) to schemaName", "Move SimpleName: Bytes(5308) into MethodInvocation(5464) at 2", "Move SimpleName: tableName(5310) into MethodInvocation(5464) at 3", "Update SimpleName: getName(5320) to SchemaUtil", "Move SimpleName: getName(5320) into MethodInvocation(5475) at 0", "Insert SimpleName: getTableName(5472) into MethodInvocation(5475) at 1", "Insert SimpleName: schemaName(5473) into MethodInvocation(5475) at 2", "Insert SimpleName: indexName(5474) into MethodInvocation(5475) at 3", "Insert MethodInvocation(5610) into ExpressionStatement(5611) at 0", "Insert Assignment: +=(5624) into ExpressionStatement(5625) at 0", "Insert MethodInvocation(5627) into ExpressionStatement(5628) at 0", "Insert MethodInvocation(5637) into ExpressionStatement(5638) at 0", "Insert SimpleType: DoNotRetryIOException(5853) into ClassInstanceCreation(5865) at 0", "Insert InfixExpression: +(5864) into ClassInstanceCreation(5865) at 1", "Insert SimpleName: RegionCoprocessorEnvironment(249) into SimpleType: RegionCoprocessorEnvironment(250) at 0", "Insert MethodInvocation(263) into MethodInvocation(270) at 0", "Insert SimpleName: findCoprocessorEnvironment(264) into MethodInvocation(270) at 1", "Insert MethodInvocation(269) into MethodInvocation(270) at 2", "Insert QualifiedName: MetaDataRegionObserver.BuildIndexScheduleTask(294) into SimpleType: MetaDataRegionObserver.BuildIndexScheduleTask(295) at 0", "Insert SimpleName: Thread(323) into SimpleType: Thread(324) at 0", "Move SimpleType: Runnable(5188) into ClassInstanceCreation(380) at 0", "Insert AnonymousClassDeclaration(379) into ClassInstanceCreation(380) at 1", "Insert PrimitiveType: boolean(876) into ArrayType: boolean[](878) at 0", "Insert Dimension(877) into ArrayType: boolean[](878) at 1", "Insert ExpressionStatement(897) into Block(916) at 1", "Insert ArrayAccess(929) into Assignment: =(931) at 0", "Insert BooleanLiteral: true(930) into Assignment: =(931) at 1", "Update QualifiedName: PIndexState.DISABLE(843) to PIndexState.INACTIVE", "Insert SimpleName: expectedState(1087) into InfixExpression: ==(1088) at 1", "Insert PrimitiveType: boolean(1825) into ArrayType: boolean[](1827) at 0", "Insert Dimension(1826) into ArrayType: boolean[](1827) at 1", "Insert SimpleName: cancel(1828) into VariableDeclarationFragment(1834) at 0", "Insert ArrayCreation(1833) into VariableDeclarationFragment(1834) at 1", "Insert ExpressionStatement(1840) into Block(1854) at 0", "Move ExpressionStatement(1586) into Block(1854) at 1", "Move ExpressionStatement(1593) into Block(1854) at 2", "Insert ExpressionStatement(1860) into Block(1861) at 0", "Insert PrimitiveType: boolean(2103) into ArrayType: boolean[](2105) at 0", "Insert Dimension(2104) into ArrayType: boolean[](2105) at 1", "Insert SimpleName: cancel(2106) into VariableDeclarationFragment(2112) at 0", "Insert ArrayCreation(2111) into VariableDeclarationFragment(2112) at 1", "Insert ExpressionStatement(2118) into Block(2132) at 0", "Move ExpressionStatement(1840) into Block(2132) at 1", "Move ExpressionStatement(1846) into Block(2132) at 2", "Insert ExpressionStatement(2138) into Block(2139) at 0", "Insert SimpleName: runIndexRebuilder(2333) into MethodInvocation(2334) at 0", "Insert SimpleName: Thread(2336) into MethodInvocation(2339) at 0", "Insert SimpleName: sleep(2337) into MethodInvocation(2339) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(2338) into MethodInvocation(2339) at 2", "Insert SimpleName: runIndexRebuilder(2341) into MethodInvocation(2342) at 0", "Insert SimpleName: assertTrue(2344) into MethodInvocation(2352) at 0", "Insert MethodInvocation(2351) into MethodInvocation(2352) at 1", "Insert SimpleName: runIndexRebuilder(2532) into MethodInvocation(2533) at 0", "Insert SimpleName: Thread(2535) into MethodInvocation(2538) at 0", "Insert SimpleName: sleep(2536) into MethodInvocation(2538) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(2537) into MethodInvocation(2538) at 2", "Insert SimpleName: runIndexRebuilder(2540) into MethodInvocation(2541) at 0", "Insert SimpleName: assertTrue(2543) into MethodInvocation(2551) at 0", "Insert MethodInvocation(2550) into MethodInvocation(2551) at 1", "Insert SimpleName: runIndexRebuilder(2730) into MethodInvocation(2731) at 0", "Insert SimpleName: Thread(2733) into MethodInvocation(2736) at 0", "Insert SimpleName: sleep(2734) into MethodInvocation(2736) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(2735) into MethodInvocation(2736) at 2", "Insert SimpleName: runIndexRebuilder(2738) into MethodInvocation(2739) at 0", "Insert SimpleName: assertTrue(2741) into MethodInvocation(2749) at 0", "Insert MethodInvocation(2748) into MethodInvocation(2749) at 1", "Insert SimpleName: runIndexRebuilder(2914) into MethodInvocation(2915) at 0", "Insert SimpleName: Thread(2917) into MethodInvocation(2920) at 0", "Insert SimpleName: sleep(2918) into MethodInvocation(2920) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(2919) into MethodInvocation(2920) at 2", "Insert SimpleName: runIndexRebuilder(2922) into MethodInvocation(2923) at 0", "Insert SimpleName: assertTrue(2925) into MethodInvocation(2933) at 0", "Insert MethodInvocation(2932) into MethodInvocation(2933) at 1", "Insert SimpleName: runIndexRebuilder(3098) into MethodInvocation(3099) at 0", "Insert SimpleName: Thread(3101) into MethodInvocation(3104) at 0", "Insert SimpleName: sleep(3102) into MethodInvocation(3104) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(3103) into MethodInvocation(3104) at 2", "Insert SimpleName: runIndexRebuilder(3106) into MethodInvocation(3107) at 0", "Insert SimpleName: assertTrue(3109) into MethodInvocation(3117) at 0", "Insert MethodInvocation(3116) into MethodInvocation(3117) at 1", "Update SimpleName: fullIndexName(2988) to runIndexRebuilder", "Insert SimpleName: assertTrue(3348) into MethodInvocation(3356) at 0", "Insert MethodInvocation(3355) into MethodInvocation(3356) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(3359) into Assignment: +=(3360) at 1", "Insert SimpleName: runIndexRebuilder(3362) into MethodInvocation(3363) at 0", "Insert SimpleName: assertTrue(3365) into MethodInvocation(3373) at 0", "Insert MethodInvocation(3372) into MethodInvocation(3373) at 1", "Update SimpleName: fullIndexName(3293) to runIndexRebuilder", "Insert SimpleName: assertTrue(3667) into MethodInvocation(3675) at 0", "Insert MethodInvocation(3674) into MethodInvocation(3675) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(3678) into Assignment: +=(3679) at 1", "Insert SimpleName: runIndexRebuilder(3681) into MethodInvocation(3682) at 0", "Insert SimpleName: assertTrue(3684) into MethodInvocation(3692) at 0", "Insert MethodInvocation(3691) into MethodInvocation(3692) at 1", "Update SimpleName: String(3998) to PTableKey", "Move SimpleName: String(3998) into SimpleType: PTableKey(3765) at 0", "Update SimpleName: InterruptedException(4013) to MyClock", "Move SimpleName: InterruptedException(4013) into SimpleType: MyClock(3776) at 0", "Insert SimpleName: PMetaData(3796) into SimpleType: PMetaData(3797) at 0", "Insert SimpleName: metaCache(3798) into VariableDeclarationFragment(3807) at 0", "Insert MethodInvocation(3806) into VariableDeclarationFragment(3807) at 1", "Move SimpleName: HTableInterface(4204) into SimpleType: HTableInterface(3858) at 0", "Move SimpleName: metaTable(4206) into VariableDeclarationFragment(3871) at 0", "Move MethodInvocation(4217) into VariableDeclarationFragment(3871) at 1", "Insert SimpleName: disableTime(3874) into VariableDeclarationFragment(3878) at 0", "Insert MethodInvocation(3877) into VariableDeclarationFragment(3878) at 1", "Move MethodInvocation(4266) into MethodInvocation(3900) at 0", "Insert QualifiedName: clock.time(3906) into Assignment: +=(3908) at 0", "Insert SimpleName: REBUILD_PERIOD(3907) into Assignment: +=(3908) at 1", "Insert SimpleName: assertEquals(3917) into MethodInvocation(3924) at 0", "Insert NumberLiteral: 2(3918) into MethodInvocation(3924) at 1", "Insert MethodInvocation(3923) into MethodInvocation(3924) at 2", "Insert SimpleName: assertEquals(3926) into MethodInvocation(3933) at 0", "Insert NumberLiteral: 1(3927) into MethodInvocation(3933) at 1", "Insert MethodInvocation(3932) into MethodInvocation(3933) at 2", "Move MethodInvocation(4241) into MethodInvocation(3943) at 0", "Insert SimpleName: assertEquals(3949) into MethodInvocation(3956) at 0", "Insert NumberLiteral: 3(3950) into MethodInvocation(3956) at 1", "Insert MethodInvocation(3955) into MethodInvocation(3956) at 2", "Insert SimpleName: assertEquals(3958) into MethodInvocation(3965) at 0", "Insert NumberLiteral: 1(3959) into MethodInvocation(3965) at 1", "Insert MethodInvocation(3964) into MethodInvocation(3965) at 2", "Insert SimpleName: runIndexRebuilder(3971) into MethodInvocation(3972) at 0", "Insert SimpleName: assertTrue(3974) into MethodInvocation(3982) at 0", "Insert MethodInvocation(3981) into MethodInvocation(3982) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(3985) into Assignment: +=(3986) at 1", "Insert SimpleName: runIndexRebuilder(3988) into MethodInvocation(3989) at 0", "Insert SimpleName: assertEquals(3991) into MethodInvocation(3998) at 0", "Insert NumberLiteral: 2(3992) into MethodInvocation(3998) at 1", "Insert MethodInvocation(3997) into MethodInvocation(3998) at 2", "Insert QualifiedName: clock.time(4000) into Assignment: +=(4002) at 0", "Insert SimpleName: REBUILD_PERIOD(4001) into Assignment: +=(4002) at 1", "Insert SimpleName: runIndexRebuilder(4004) into MethodInvocation(4005) at 0", "Insert SimpleName: assertTrue(4007) into MethodInvocation(4015) at 0", "Insert MethodInvocation(4014) into MethodInvocation(4015) at 1", "Insert SimpleName: runIndexRebuilder(4288) into MethodInvocation(4289) at 0", "Insert SimpleName: assertTrue(4291) into MethodInvocation(4299) at 0", "Insert MethodInvocation(4298) into MethodInvocation(4299) at 1", "Update SimpleName: REBUILD_INTERVAL(3951) to WAIT_AFTER_DISABLED", "Insert SimpleName: runIndexRebuilder(4305) into MethodInvocation(4306) at 0", "Insert SimpleName: assertTrue(4308) into MethodInvocation(4316) at 0", "Insert MethodInvocation(4315) into MethodInvocation(4316) at 1", "Insert SimpleName: runIndexRebuilder(4598) into MethodInvocation(4599) at 0", "Insert SimpleName: assertTrue(4601) into MethodInvocation(4609) at 0", "Insert MethodInvocation(4608) into MethodInvocation(4609) at 1", "Update SimpleName: doneSignal(3593) to runIndexRebuilder", "Insert SimpleName: assertTrue(4654) into MethodInvocation(4662) at 0", "Insert MethodInvocation(4661) into MethodInvocation(4662) at 1", "Move MethodInvocation(4447) into MethodInvocation(4819) at 0", "Insert SimpleName: execute(4810) into MethodInvocation(4819) at 1", "Insert InfixExpression: +(4818) into MethodInvocation(4819) at 2", "Insert SimpleName: HTableInterface(4859) into SimpleType: HTableInterface(4860) at 0", "Insert SimpleName: metaTable(4861) into VariableDeclarationFragment(4873) at 0", "Insert MethodInvocation(4872) into VariableDeclarationFragment(4873) at 1", "Move SimpleName: IndexUtil(4391) into MethodInvocation(4894) at 0", "Move SimpleName: updateIndexState(4392) into MethodInvocation(4894) at 1", "Move SimpleName: fullIndexName(4393) into MethodInvocation(4894) at 2", "Insert ConditionalExpression(4891) into MethodInvocation(4894) at 3", "Update SimpleName: currentTime(4405) to metaTable", "Move SimpleName: currentTime(4405) into MethodInvocation(4894) at 4", "Insert SimpleName: indexStateOnFailure(4893) into MethodInvocation(4894) at 5", "Move MethodInvocation(4429) into MethodInvocation(4908) at 0", "Insert InfixExpression: *(4917) into Assignment: +=(4918) at 1", "Insert SimpleName: assertTrue(4920) into MethodInvocation(4926) at 0", "Insert MethodInvocation(4925) into MethodInvocation(4926) at 1", "Insert SimpleName: assertEquals(4928) into MethodInvocation(4935) at 0", "Insert NumberLiteral: 2(4929) into MethodInvocation(4935) at 1", "Insert MethodInvocation(4934) into MethodInvocation(4935) at 2", "Insert SimpleName: assertEquals(4937) into MethodInvocation(4944) at 0", "Insert NumberLiteral: 1(4938) into MethodInvocation(4944) at 1", "Insert MethodInvocation(4943) into MethodInvocation(4944) at 2", "Move MethodInvocation(4411) into MethodInvocation(4954) at 0", "Update SimpleName: conn(4455) to assertEquals", "Move SimpleName: conn(4455) into MethodInvocation(4967) at 0", "Insert NumberLiteral: 3(4961) into MethodInvocation(4967) at 1", "Insert MethodInvocation(4966) into MethodInvocation(4967) at 2", "Insert SimpleName: assertEquals(4969) into MethodInvocation(4976) at 0", "Insert NumberLiteral: 1(4970) into MethodInvocation(4976) at 1", "Insert MethodInvocation(4975) into MethodInvocation(4976) at 2", "Update SimpleName: WAIT_FOR_INDEX_WRITE(4476) to runIndexRebuilder", "Insert SimpleName: assertTrue(4985) into MethodInvocation(4998) at 0", "Insert MethodInvocation(4997) into MethodInvocation(4998) at 1", "Insert SimpleName: runIndexRebuilder(5004) into MethodInvocation(5005) at 0", "Insert SimpleName: assertEquals(5007) into MethodInvocation(5014) at 0", "Insert NumberLiteral: 2(5008) into MethodInvocation(5014) at 1", "Insert MethodInvocation(5013) into MethodInvocation(5014) at 2", "Move MethodInvocation(4284) into MethodInvocation(5033) at 0", "Update SimpleName: advanceClockUntilPartialRebuildStarts(4702) to execute", "Insert InfixExpression: +(5032) into MethodInvocation(5033) at 2", "Move ExpressionStatement(4422) into Block(5042) at 0", "Insert ExpressionStatement(5041) into Block(5042) at 1", "Insert SingleVariableDeclaration(5046) into CatchClause(5048) at 0", "Insert Block(5047) into CatchClause(5048) at 1", "Insert SimpleName: assertTrue(5050) into MethodInvocation(5058) at 0", "Insert MethodInvocation(5057) into MethodInvocation(5058) at 1", "Update SimpleName: String(5124) to PhoenixStatement", "Move SimpleName: String(5124) into SimpleType: PhoenixStatement(5061) at 0", "Insert SimpleName: stmt(5062) into VariableDeclarationFragment(5071) at 0", "Insert MethodInvocation(5070) into VariableDeclarationFragment(5071) at 1", "Update SimpleName: CountDownLatch(5136) to ResultSet", "Update SimpleName: doneSignal(5138) to rs", "Insert MethodInvocation(5082) into VariableDeclarationFragment(5083) at 1", "Update SimpleName: fullIndexName(5146) to assertTrue", "Insert MethodInvocation(5088) into MethodInvocation(5089) at 1", "Insert SimpleName: assertEquals(5091) into MethodInvocation(5097) at 0", "Insert StringLiteral: \"0\"(5092) into MethodInvocation(5097) at 1", "Insert MethodInvocation(5096) into MethodInvocation(5097) at 2", "Update SimpleName: doneSignal(5157) to assertEquals", "Move SimpleName: doneSignal(5157) into MethodInvocation(5119) at 0", "Insert ConditionalExpression(5105) into MethodInvocation(5119) at 1", "Insert MethodInvocation(5118) into MethodInvocation(5119) at 2", "Insert SimpleName: TestUtil(5121) into MethodInvocation(5128) at 0", "Insert SimpleName: removeCoprocessor(5122) into MethodInvocation(5128) at 1", "Insert SimpleName: conn(5123) into MethodInvocation(5128) at 2", "Update SimpleName: DriverManager(5197) to fullIndexName", "Move SimpleName: DriverManager(5197) into MethodInvocation(5128) at 3", "Move TypeLiteral(5319) into MethodInvocation(5128) at 4", "Update SimpleName: getUrl(5199) to runIndexRebuilder", "Move SimpleName: getUrl(5199) into MethodInvocation(5131) at 0", "Insert SimpleName: assertTrue(5133) into MethodInvocation(5146) at 0", "Insert MethodInvocation(5145) into MethodInvocation(5146) at 1", "Insert QualifiedName: clock.time(5148) into Assignment: +=(5150) at 0", "Insert SimpleName: WAIT_AFTER_DISABLED(5149) into Assignment: +=(5150) at 1", "Insert SimpleName: runIndexRebuilder(5152) into MethodInvocation(5153) at 0", "Insert SimpleName: assertEquals(5155) into MethodInvocation(5162) at 0", "Insert NumberLiteral: 3(5156) into MethodInvocation(5162) at 1", "Insert MethodInvocation(5161) into MethodInvocation(5162) at 2", "Insert InfixExpression: *(5167) into Assignment: +=(5168) at 1", "Update SimpleName: doneSignal(5233) to runIndexRebuilder", "Insert SimpleName: assertTrue(5173) into MethodInvocation(5181) at 0", "Insert MethodInvocation(5180) into MethodInvocation(5181) at 1", "Insert SimpleName: IndexScrutiny(5183) into MethodInvocation(5188) at 0", "Update SimpleName: t(5265) to scrutinizeIndex", "Move SimpleName: t(5265) into MethodInvocation(5188) at 1", "Update SimpleName: setDaemon(5266) to conn", "Move SimpleName: setDaemon(5266) into MethodInvocation(5188) at 2", "Update SimpleName: t(5270) to fullTableName", "Move SimpleName: t(5270) into MethodInvocation(5188) at 3", "Update SimpleName: start(5271) to fullIndexName", "Move SimpleName: start(5271) into MethodInvocation(5188) at 4", "Insert SimpleName: DriverManager(5268) into MethodInvocation(5272) at 0", "Update SimpleName: fullIndexName(4917) to runIndexRebuilder", "Insert SimpleName: assertTrue(5384) into MethodInvocation(5392) at 0", "Move MethodInvocation(5219) into MethodInvocation(5392) at 1", "Insert SimpleName: WAIT_AFTER_DISABLED(5395) into Assignment: +=(5396) at 1", "Insert SimpleName: runIndexRebuilder(5398) into MethodInvocation(5399) at 0", "Insert SimpleName: assertTrue(5401) into MethodInvocation(5409) at 0", "Insert MethodInvocation(5408) into MethodInvocation(5409) at 1", "Update SimpleName: services(5332) to runIndexRebuilder", "Move SimpleName: services(5332) into MethodInvocation(5610) at 0", "Update SimpleName: admin(5337) to assertTrue", "Insert MethodInvocation(5619) into MethodInvocation(5620) at 1", "Insert QualifiedName: clock.time(5622) into Assignment: +=(5624) at 0", "Insert SimpleName: WAIT_AFTER_DISABLED(5623) into Assignment: +=(5624) at 1", "Update SimpleName: getTableDescriptor(5347) to runIndexRebuilder", "Move SimpleName: getTableDescriptor(5347) into MethodInvocation(5627) at 0", "Update SimpleName: Bytes(5348) to assertTrue", "Move SimpleName: Bytes(5348) into MethodInvocation(5637) at 0", "Insert MethodInvocation(5636) into MethodInvocation(5637) at 1", "Update SimpleName: Thread(5377) to EnvironmentEdgeManager", "Update SimpleName: sleep(5378) to injectEdge", "Insert NullLiteral(5649) into MethodInvocation(5650) at 2", "Insert SimpleName: DoNotRetryIOException(5852) into SimpleType: DoNotRetryIOException(5853) at 0", "Insert StringLiteral: \"Simulating write failure on \"(5854) into InfixExpression: +(5864) at 0", "Insert MethodInvocation(5863) into InfixExpression: +(5864) at 1", "Insert MethodInvocation(261) into MethodInvocation(263) at 0", "Insert SimpleName: getCoprocessorHost(262) into MethodInvocation(263) at 1", "Insert TypeLiteral(267) into MethodInvocation(269) at 0", "Insert SimpleName: getName(268) into MethodInvocation(269) at 1", "Insert MethodDeclaration(378) into AnonymousClassDeclaration(379) at 0", "Insert MethodInvocation(896) into ExpressionStatement(897) at 0", "Insert SimpleName: cancel(927) into ArrayAccess(929) at 0", "Insert NumberLiteral: 0(928) into ArrayAccess(929) at 1", "Insert ArrayType: boolean[](1831) into ArrayCreation(1833) at 0", "Insert NumberLiteral: 1(1832) into ArrayCreation(1833) at 1", "Insert MethodInvocation(1839) into ExpressionStatement(1840) at 0", "Insert Assignment: =(1859) into ExpressionStatement(1860) at 0", "Insert ArrayType: boolean[](2109) into ArrayCreation(2111) at 0", "Insert NumberLiteral: 1(2110) into ArrayCreation(2111) at 1", "Insert MethodInvocation(2117) into ExpressionStatement(2118) at 0", "Insert Assignment: =(2137) into ExpressionStatement(2138) at 0", "Move SimpleName: TestUtil(2045) into MethodInvocation(2351) at 0", "Update SimpleName: waitForIndexRebuild(2046) to checkIndexState", "Move SimpleName: waitForIndexRebuild(2046) into MethodInvocation(2351) at 1", "Move SimpleName: conn(2047) into MethodInvocation(2351) at 2", "Move SimpleName: fullIndexName(2048) into MethodInvocation(2351) at 3", "Move QualifiedName: PIndexState.ACTIVE(2049) into MethodInvocation(2351) at 4", "Insert NumberLiteral: 0L(2350) into MethodInvocation(2351) at 5", "Move SimpleName: TestUtil(2230) into MethodInvocation(2550) at 0", "Update SimpleName: waitForIndexRebuild(2231) to checkIndexState", "Move SimpleName: waitForIndexRebuild(2231) into MethodInvocation(2550) at 1", "Move SimpleName: conn(2232) into MethodInvocation(2550) at 2", "Move SimpleName: fullIndexName(2233) into MethodInvocation(2550) at 3", "Move QualifiedName: PIndexState.ACTIVE(2234) into MethodInvocation(2550) at 4", "Insert NumberLiteral: 0L(2549) into MethodInvocation(2550) at 5", "Move SimpleName: TestUtil(2414) into MethodInvocation(2748) at 0", "Update SimpleName: waitForIndexRebuild(2415) to checkIndexState", "Move SimpleName: waitForIndexRebuild(2415) into MethodInvocation(2748) at 1", "Move SimpleName: conn(2416) into MethodInvocation(2748) at 2", "Move SimpleName: fullIndexName(2417) into MethodInvocation(2748) at 3", "Move QualifiedName: PIndexState.ACTIVE(2418) into MethodInvocation(2748) at 4", "Insert NumberLiteral: 0L(2747) into MethodInvocation(2748) at 5", "Move SimpleName: TestUtil(2584) into MethodInvocation(2932) at 0", "Update SimpleName: waitForIndexRebuild(2585) to checkIndexState", "Move SimpleName: waitForIndexRebuild(2585) into MethodInvocation(2932) at 1", "Move SimpleName: conn(2586) into MethodInvocation(2932) at 2", "Move SimpleName: fullIndexName(2587) into MethodInvocation(2932) at 3", "Move QualifiedName: PIndexState.ACTIVE(2588) into MethodInvocation(2932) at 4", "Insert NumberLiteral: 0L(2931) into MethodInvocation(2932) at 5", "Move SimpleName: TestUtil(2754) into MethodInvocation(3116) at 0", "Update SimpleName: waitForIndexRebuild(2755) to checkIndexState", "Move SimpleName: waitForIndexRebuild(2755) into MethodInvocation(3116) at 1", "Move SimpleName: conn(2756) into MethodInvocation(3116) at 2", "Move SimpleName: fullIndexName(2757) into MethodInvocation(3116) at 3", "Move QualifiedName: PIndexState.ACTIVE(2758) into MethodInvocation(3116) at 4", "Insert NumberLiteral: 0L(3115) into MethodInvocation(3116) at 5", "Move SimpleName: TestUtil(2992) into MethodInvocation(3355) at 0", "Update SimpleName: waitForIndexRebuild(2993) to checkIndexState", "Move SimpleName: waitForIndexRebuild(2993) into MethodInvocation(3355) at 1", "Move SimpleName: conn(2994) into MethodInvocation(3355) at 2", "Move SimpleName: fullIndexName(2995) into MethodInvocation(3355) at 3", "Update QualifiedName: PIndexState.ACTIVE(2996) to PIndexState.INACTIVE", "Move QualifiedName: PIndexState.ACTIVE(2996) into MethodInvocation(3355) at 4", "Insert NullLiteral(3354) into MethodInvocation(3355) at 5", "Insert SimpleName: TestUtil(3366) into MethodInvocation(3372) at 0", "Insert SimpleName: checkIndexState(3367) into MethodInvocation(3372) at 1", "Insert SimpleName: conn(3368) into MethodInvocation(3372) at 2", "Insert SimpleName: fullIndexName(3369) into MethodInvocation(3372) at 3", "Insert QualifiedName: PIndexState.ACTIVE(3370) into MethodInvocation(3372) at 4", "Insert NumberLiteral: 0L(3371) into MethodInvocation(3372) at 5", "Move SimpleName: TestUtil(3297) into MethodInvocation(3674) at 0", "Update SimpleName: waitForIndexRebuild(3298) to checkIndexState", "Move SimpleName: waitForIndexRebuild(3298) into MethodInvocation(3674) at 1", "Move SimpleName: conn(3299) into MethodInvocation(3674) at 2", "Move SimpleName: fullIndexName(3300) into MethodInvocation(3674) at 3", "Update QualifiedName: PIndexState.ACTIVE(3301) to PIndexState.INACTIVE", "Move QualifiedName: PIndexState.ACTIVE(3301) into MethodInvocation(3674) at 4", "Insert NullLiteral(3673) into MethodInvocation(3674) at 5", "Insert SimpleName: TestUtil(3685) into MethodInvocation(3691) at 0", "Insert SimpleName: checkIndexState(3686) into MethodInvocation(3691) at 1", "Insert SimpleName: conn(3687) into MethodInvocation(3691) at 2", "Insert SimpleName: fullIndexName(3688) into MethodInvocation(3691) at 3", "Insert QualifiedName: PIndexState.ACTIVE(3689) into MethodInvocation(3691) at 4", "Insert NumberLiteral: 0L(3690) into MethodInvocation(3691) at 5", "Insert MethodInvocation(3804) into MethodInvocation(3806) at 0", "Insert SimpleName: getMetaDataCache(3805) into MethodInvocation(3806) at 1", "Update StringLiteral: \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\"(4162) to \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\"", "Update StringLiteral: \" (v1, v2) INCLUDE (v3)\"(4178) to \" (v1, v2)\"", "Update StringLiteral: \" VALUES('a','a','0','x')\"(4192) to \" VALUES('a','a','0')\"", "Update SimpleName: fullIndexName(4222) to clock", "Move SimpleName: fullIndexName(4222) into MethodInvocation(3877) at 0", "Update SimpleName: metaTable(4224) to currentTime", "Move SimpleName: metaTable(4224) into MethodInvocation(3877) at 1", "Update StringLiteral: \" VALUES('b','bb', '11','yy')\"(4245) to \" VALUES('bb','bb', '11')\"", "Update SimpleName: execute(4267) to TestUtil", "Move SimpleName: execute(4267) into MethodInvocation(3923) at 0", "Insert SimpleName: getRowCount(3920) into MethodInvocation(3923) at 1", "Insert SimpleName: conn(3921) into MethodInvocation(3923) at 2", "Insert SimpleName: fullTableName(3922) into MethodInvocation(3923) at 3", "Insert SimpleName: TestUtil(3928) into MethodInvocation(3932) at 0", "Insert SimpleName: getRowCount(3929) into MethodInvocation(3932) at 1", "Insert SimpleName: conn(3930) into MethodInvocation(3932) at 2", "Insert SimpleName: fullIndexName(3931) into MethodInvocation(3932) at 3", "Update StringLiteral: \" VALUES('a','dddd','3333','zzzz')\"(4288) to \" VALUES('ccc','ccc','222')\"", "Insert SimpleName: TestUtil(3951) into MethodInvocation(3955) at 0", "Insert SimpleName: getRowCount(3952) into MethodInvocation(3955) at 1", "Insert SimpleName: conn(3953) into MethodInvocation(3955) at 2", "Insert SimpleName: fullTableName(3954) into MethodInvocation(3955) at 3", "Insert SimpleName: TestUtil(3960) into MethodInvocation(3964) at 0", "Insert SimpleName: getRowCount(3961) into MethodInvocation(3964) at 1", "Insert SimpleName: conn(3962) into MethodInvocation(3964) at 2", "Insert SimpleName: fullIndexName(3963) into MethodInvocation(3964) at 3", "Update SimpleName: advanceClockUntilPartialRebuildStarts(4318) to TestUtil", "Move SimpleName: advanceClockUntilPartialRebuildStarts(4318) into MethodInvocation(3981) at 0", "Update SimpleName: fullIndexName(4319) to checkIndexState", "Move SimpleName: fullIndexName(4319) into MethodInvocation(3981) at 1", "Update SimpleName: clock(4320) to conn", "Move SimpleName: clock(4320) into MethodInvocation(3981) at 2", "Update SimpleName: doneSignal(4321) to fullIndexName", "Move SimpleName: doneSignal(4321) into MethodInvocation(3981) at 3", "Insert QualifiedName: PIndexState.INACTIVE(3979) into MethodInvocation(3981) at 4", "Insert NullLiteral(3980) into MethodInvocation(3981) at 5", "Insert SimpleName: TestUtil(3993) into MethodInvocation(3997) at 0", "Insert SimpleName: getRowCount(3994) into MethodInvocation(3997) at 1", "Insert SimpleName: conn(3995) into MethodInvocation(3997) at 2", "Insert SimpleName: fullIndexName(3996) into MethodInvocation(3997) at 3", "Insert SimpleName: TestUtil(4008) into MethodInvocation(4014) at 0", "Insert SimpleName: checkIndexState(4009) into MethodInvocation(4014) at 1", "Insert SimpleName: conn(4010) into MethodInvocation(4014) at 2", "Insert SimpleName: fullIndexName(4011) into MethodInvocation(4014) at 3", "Insert QualifiedName: PIndexState.ACTIVE(4012) into MethodInvocation(4014) at 4", "Insert NumberLiteral: 0L(4013) into MethodInvocation(4014) at 5", "Update NumberLiteral: 10(3869) to 2", "Update SimpleName: advanceClockUntilPartialRebuildStarts(3945) to TestUtil", "Move SimpleName: advanceClockUntilPartialRebuildStarts(3945) into MethodInvocation(4298) at 0", "Update SimpleName: fullIndexName(3946) to checkIndexState", "Move SimpleName: fullIndexName(3946) into MethodInvocation(4298) at 1", "Update SimpleName: clock(3947) to conn", "Move SimpleName: clock(3947) into MethodInvocation(4298) at 2", "Insert SimpleName: fullIndexName(4295) into MethodInvocation(4298) at 3", "Insert QualifiedName: PIndexState.INACTIVE(4296) into MethodInvocation(4298) at 4", "Insert NullLiteral(4297) into MethodInvocation(4298) at 5", "Insert SimpleName: TestUtil(4309) into MethodInvocation(4315) at 0", "Update SimpleName: waitForIndexRebuild(3954) to checkIndexState", "Move SimpleName: waitForIndexRebuild(3954) into MethodInvocation(4315) at 1", "Move SimpleName: conn(3955) into MethodInvocation(4315) at 2", "Move SimpleName: fullIndexName(3956) into MethodInvocation(4315) at 3", "Move QualifiedName: PIndexState.ACTIVE(3957) into MethodInvocation(4315) at 4", "Insert NumberLiteral: 0L(4314) into MethodInvocation(4315) at 5", "Update SimpleName: advanceClockUntilPartialRebuildStarts(3587) to TestUtil", "Move SimpleName: advanceClockUntilPartialRebuildStarts(3587) into MethodInvocation(4608) at 0", "Update SimpleName: fullIndexName(3588) to checkIndexState", "Move SimpleName: fullIndexName(3588) into MethodInvocation(4608) at 1", "Update SimpleName: clock(3589) to conn", "Move SimpleName: clock(3589) into MethodInvocation(4608) at 2", "Update SimpleName: doneSignal(3590) to fullIndexName", "Move SimpleName: doneSignal(3590) into MethodInvocation(4608) at 3", "Insert QualifiedName: PIndexState.INACTIVE(4606) into MethodInvocation(4608) at 4", "Insert NullLiteral(4607) into MethodInvocation(4608) at 5", "Move SimpleName: TestUtil(3639) into MethodInvocation(4661) at 0", "Update SimpleName: waitForIndexRebuild(3640) to checkIndexState", "Move SimpleName: waitForIndexRebuild(3640) into MethodInvocation(4661) at 1", "Move SimpleName: conn(3641) into MethodInvocation(4661) at 2", "Move SimpleName: fullIndexName(3642) into MethodInvocation(4661) at 3", "Move QualifiedName: PIndexState.ACTIVE(3643) into MethodInvocation(4661) at 4", "Insert NumberLiteral: 0L(4660) into MethodInvocation(4661) at 5", "Insert StringLiteral: \"CREATE TABLE \"(4811) into InfixExpression: +(4818) at 0", "Insert SimpleName: fullTableName(4812) into InfixExpression: +(4818) at 1", "Insert StringLiteral: \"(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR, v3 VARCHAR) COLUMN_ENCODED_BYTES = 0, DISABLE_INDEX_ON_WRITE_FAILURE = \"(4813) into InfixExpression: +(4818) at 2", "Insert ParenthesizedExpression(4817) into InfixExpression: +(4818) at 3", "Insert StringLiteral: \"CREATE INDEX \"(4829) into InfixExpression: +(4834) at 0", "Insert SimpleName: indexName(4830) into InfixExpression: +(4834) at 1", "Update StringLiteral: \"UPSERT INTO \"(4332) to \" ON \"", "Update StringLiteral: \" VALUES('a','eeeee','44444','zzzzz')\"(4334) to \" (v1, v2)\"", "Update StringLiteral: \" VALUES('a','fffff','55555','zzzzzz')\"(4352) to \" VALUES('a','a','0')\"", "Insert MethodInvocation(4869) into MethodInvocation(4872) at 0", "Update SimpleName: await(4386) to getTable", "Move SimpleName: await(4386) into MethodInvocation(4872) at 1", "Update QualifiedName: TimeUnit.SECONDS(4388) to PhoenixDatabaseMetaData.SYSTEM_CATALOG_NAME_BYTES", "Move QualifiedName: TimeUnit.SECONDS(4388) into MethodInvocation(4872) at 2", "Insert InfixExpression: ==(4887) into ConditionalExpression(4891) at 0", "Insert SimpleName: disableTime(4888) into ConditionalExpression(4891) at 1", "Insert PrefixExpression: -(4890) into ConditionalExpression(4891) at 2", "Update StringLiteral: \" VALUES('b','bbbbb', '11','yy')\"(4415) to \" VALUES('bb','bb', '11')\"", "Insert NumberLiteral: 2(4915) into InfixExpression: *(4917) at 0", "Insert SimpleName: REBUILD_PERIOD(4916) into InfixExpression: *(4917) at 1", "Update SimpleName: execute(4430) to hasIndexWithState", "Move SimpleName: execute(4430) into MethodInvocation(4925) at 0", "Insert SimpleName: metaCache(4922) into MethodInvocation(4925) at 1", "Insert SimpleName: key(4923) into MethodInvocation(4925) at 2", "Insert SimpleName: indexStateOnFailure(4924) into MethodInvocation(4925) at 3", "Insert SimpleName: TestUtil(4930) into MethodInvocation(4934) at 0", "Insert SimpleName: getRowCount(4931) into MethodInvocation(4934) at 1", "Move SimpleName: conn(4437) into MethodInvocation(4934) at 2", "Update SimpleName: commit(4438) to fullTableName", "Move SimpleName: commit(4438) into MethodInvocation(4934) at 3", "Insert SimpleName: TestUtil(4939) into MethodInvocation(4943) at 0", "Insert SimpleName: getRowCount(4940) into MethodInvocation(4943) at 1", "Insert SimpleName: conn(4941) into MethodInvocation(4943) at 2", "Insert SimpleName: fullIndexName(4942) into MethodInvocation(4943) at 3", "Update StringLiteral: \" VALUES('a','ddddddd','3333','zzzz')\"(4451) to \" VALUES('ccc','ccc','222')\"", "Update SimpleName: IndexUtil(4463) to TestUtil", "Move SimpleName: IndexUtil(4463) into MethodInvocation(4966) at 0", "Update SimpleName: updateIndexState(4464) to getRowCount", "Move SimpleName: updateIndexState(4464) into MethodInvocation(4966) at 1", "Update SimpleName: fullIndexName(4465) to conn", "Move SimpleName: fullIndexName(4465) into MethodInvocation(4966) at 2", "Update SimpleName: metaTable(4467) to fullTableName", "Move SimpleName: metaTable(4467) into MethodInvocation(4966) at 3", "Update SimpleName: removeWriteFailingCoprocessor(4471) to TestUtil", "Move SimpleName: removeWriteFailingCoprocessor(4471) into MethodInvocation(4975) at 0", "Insert SimpleName: getRowCount(4972) into MethodInvocation(4975) at 1", "Move SimpleName: conn(4472) into MethodInvocation(4975) at 2", "Move SimpleName: fullIndexName(4473) into MethodInvocation(4975) at 3", "Update SimpleName: advanceClockUntilPartialRebuildStarts(4482) to TestUtil", "Move SimpleName: advanceClockUntilPartialRebuildStarts(4482) into MethodInvocation(4997) at 0", "Insert SimpleName: checkIndexState(4987) into MethodInvocation(4997) at 1", "Insert SimpleName: conn(4988) into MethodInvocation(4997) at 2", "Move SimpleName: fullIndexName(4483) into MethodInvocation(4997) at 3", "Insert ConditionalExpression(4995) into MethodInvocation(4997) at 4", "Insert NullLiteral(4996) into MethodInvocation(4997) at 5", "Move SimpleName: TestUtil(4493) into MethodInvocation(5013) at 0", "Update SimpleName: waitForIndexRebuild(4494) to getRowCount", "Move SimpleName: waitForIndexRebuild(4494) into MethodInvocation(5013) at 1", "Move SimpleName: conn(4495) into MethodInvocation(5013) at 2", "Move SimpleName: fullIndexName(4496) into MethodInvocation(5013) at 3", "Insert StringLiteral: \"UPSERT INTO \"(5029) into InfixExpression: +(5032) at 0", "Insert SimpleName: fullTableName(5030) into InfixExpression: +(5032) at 1", "Insert StringLiteral: \" VALUES('dddd','dddd','3333')\"(5031) into InfixExpression: +(5032) at 2", "Insert MethodInvocation(5040) into ExpressionStatement(5041) at 0", "Insert SimpleType: CommitException(5044) into SingleVariableDeclaration(5046) at 0", "Insert SimpleName: e(5045) into SingleVariableDeclaration(5046) at 1", "Move SimpleName: TestUtil(4707) into MethodInvocation(5057) at 0", "Update SimpleName: waitForIndexRebuild(4708) to checkIndexState", "Move SimpleName: waitForIndexRebuild(4708) into MethodInvocation(5057) at 1", "Move SimpleName: conn(4709) into MethodInvocation(5057) at 2", "Move SimpleName: fullIndexName(4710) into MethodInvocation(5057) at 3", "Insert SimpleName: indexStateOnFailure(5055) into MethodInvocation(5057) at 4", "Insert NullLiteral(5056) into MethodInvocation(5057) at 5", "Insert MethodInvocation(5065) into MethodInvocation(5070) at 0", "Insert SimpleName: unwrap(5066) into MethodInvocation(5070) at 1", "Insert TypeLiteral(5069) into MethodInvocation(5070) at 2", "Insert SimpleName: stmt(5076) into MethodInvocation(5082) at 0", "Insert SimpleName: executeQuery(5077) into MethodInvocation(5082) at 1", "Insert InfixExpression: +(5081) into MethodInvocation(5082) at 2", "Update SimpleName: clock(5147) to rs", "Move SimpleName: clock(5147) into MethodInvocation(5088) at 0", "Update SimpleName: doneSignal(5148) to next", "Move SimpleName: doneSignal(5148) into MethodInvocation(5088) at 1", "Insert SimpleName: rs(5093) into MethodInvocation(5096) at 0", "Insert SimpleName: getString(5094) into MethodInvocation(5096) at 1", "Insert NumberLiteral: 1(5095) into MethodInvocation(5096) at 2", "Insert InfixExpression: ==(5102) into ConditionalExpression(5105) at 0", "Insert SimpleName: fullTableName(5103) into ConditionalExpression(5105) at 1", "Insert SimpleName: fullIndexName(5104) into ConditionalExpression(5105) at 2", "Insert MethodInvocation(5116) into MethodInvocation(5118) at 0", "Insert SimpleName: getString(5117) into MethodInvocation(5118) at 1", "Move SimpleName: TestUtil(5213) into MethodInvocation(5145) at 0", "Move SimpleName: checkIndexState(5214) into MethodInvocation(5145) at 1", "Move SimpleName: conn(5215) into MethodInvocation(5145) at 2", "Move SimpleName: fullIndexName(5216) into MethodInvocation(5145) at 3", "Insert ConditionalExpression(5143) into MethodInvocation(5145) at 4", "Move NullLiteral(5218) into MethodInvocation(5145) at 5", "Update SimpleName: Thread(5222) to TestUtil", "Move SimpleName: Thread(5222) into MethodInvocation(5161) at 0", "Update SimpleName: sleep(5223) to getRowCount", "Move SimpleName: sleep(5223) into MethodInvocation(5161) at 1", "Insert SimpleName: conn(5159) into MethodInvocation(5161) at 2", "Insert SimpleName: fullIndexName(5160) into MethodInvocation(5161) at 3", "Insert NumberLiteral: 2(5165) into InfixExpression: *(5167) at 0", "Insert SimpleName: REBUILD_PERIOD(5166) into InfixExpression: *(5167) at 1", "Insert SimpleName: TestUtil(5174) into MethodInvocation(5180) at 0", "Insert SimpleName: checkIndexState(5175) into MethodInvocation(5180) at 1", "Insert SimpleName: conn(5176) into MethodInvocation(5180) at 2", "Insert SimpleName: fullIndexName(5177) into MethodInvocation(5180) at 3", "Insert QualifiedName: PIndexState.ACTIVE(5178) into MethodInvocation(5180) at 4", "Insert NumberLiteral: 0L(5179) into MethodInvocation(5180) at 5", "Insert SimpleName: getUrl(5270) into MethodInvocation(5271) at 0", "Move SimpleName: TestUtil(4921) into MethodInvocation(5391) at 0", "Update SimpleName: waitForIndexRebuild(4922) to checkIndexState", "Move SimpleName: waitForIndexRebuild(4922) into MethodInvocation(5391) at 1", "Move SimpleName: conn(4923) into MethodInvocation(5391) at 2", "Move SimpleName: fullIndexName(4924) into MethodInvocation(5391) at 3", "Update QualifiedName: PIndexState.ACTIVE(4925) to PIndexState.INACTIVE", "Move QualifiedName: PIndexState.ACTIVE(4925) into MethodInvocation(5391) at 4", "Insert NullLiteral(5390) into MethodInvocation(5391) at 5", "Insert SimpleName: TestUtil(5402) into MethodInvocation(5408) at 0", "Insert SimpleName: checkIndexState(5403) into MethodInvocation(5408) at 1", "Insert SimpleName: conn(5404) into MethodInvocation(5408) at 2", "Insert SimpleName: fullIndexName(5405) into MethodInvocation(5408) at 3", "Insert QualifiedName: PIndexState.ACTIVE(5406) into MethodInvocation(5408) at 4", "Insert NumberLiteral: 0L(5407) into MethodInvocation(5408) at 5", "Update SimpleName: modifyTable(5338) to TestUtil", "Move SimpleName: modifyTable(5338) into MethodInvocation(5619) at 0", "Update SimpleName: Bytes(5339) to checkIndexState", "Move SimpleName: Bytes(5339) into MethodInvocation(5619) at 1", "Update SimpleName: toBytes(5340) to conn", "Move SimpleName: toBytes(5340) into MethodInvocation(5619) at 2", "Update SimpleName: tableName(5341) to fullIndexName", "Move SimpleName: tableName(5341) into MethodInvocation(5619) at 3", "Insert QualifiedName: PIndexState.INACTIVE(5617) into MethodInvocation(5619) at 4", "Insert NullLiteral(5618) into MethodInvocation(5619) at 5", "Update SimpleName: toBytes(5349) to TestUtil", "Move SimpleName: toBytes(5349) into MethodInvocation(5636) at 0", "Update SimpleName: tableName(5350) to checkIndexState", "Move SimpleName: tableName(5350) into MethodInvocation(5636) at 1", "Update SimpleName: equals(5353) to conn", "Move SimpleName: equals(5353) into MethodInvocation(5636) at 2", "Update SimpleName: descriptor(5354) to fullIndexName", "Move SimpleName: descriptor(5354) into MethodInvocation(5636) at 3", "Insert QualifiedName: PIndexState.ACTIVE(5634) into MethodInvocation(5636) at 4", "Insert NumberLiteral: 0L(5635) into MethodInvocation(5636) at 5", "Insert MethodInvocation(5861) into MethodInvocation(5863) at 0", "Insert SimpleName: getNameAsString(5862) into MethodInvocation(5863) at 1", "Insert MethodInvocation(258) into MethodInvocation(261) at 0", "Insert SimpleName: get(259) into MethodInvocation(261) at 1", "Insert NumberLiteral: 0(260) into MethodInvocation(261) at 2", "Insert SimpleType: MetaDataRegionObserver(266) into TypeLiteral(267) at 0", "Move MarkerAnnotation(5190) into MethodDeclaration(378) at 0", "Insert Modifier: public(329) into MethodDeclaration(378) at 1", "Insert PrimitiveType: void(330) into MethodDeclaration(378) at 2", "Insert SimpleName: run(331) into MethodDeclaration(378) at 3", "Insert Block(377) into MethodDeclaration(378) at 4", "Insert SimpleName: runIndexRebuilderAsync(893) into MethodInvocation(896) at 0", "Insert NumberLiteral: 500(894) into MethodInvocation(896) at 1", "Insert SimpleName: cancel(895) into MethodInvocation(896) at 2", "Insert PrimitiveType: boolean(1829) into ArrayType: boolean[](1831) at 0", "Insert Dimension(1830) into ArrayType: boolean[](1831) at 1", "Insert SimpleName: runIndexRebuilderAsync(1836) into MethodInvocation(1839) at 0", "Insert NumberLiteral: 500(1837) into MethodInvocation(1839) at 1", "Insert SimpleName: cancel(1838) into MethodInvocation(1839) at 2", "Insert ArrayAccess(1857) into Assignment: =(1859) at 0", "Insert BooleanLiteral: true(1858) into Assignment: =(1859) at 1", "Insert PrimitiveType: boolean(2107) into ArrayType: boolean[](2109) at 0", "Insert Dimension(2108) into ArrayType: boolean[](2109) at 1", "Update SimpleName: dumpIndexStatus(1854) to runIndexRebuilderAsync", "Move SimpleName: dumpIndexStatus(1854) into MethodInvocation(2117) at 0", "Insert NumberLiteral: 500(2115) into MethodInvocation(2117) at 1", "Update SimpleName: conn(1855) to cancel", "Move SimpleName: conn(1855) into MethodInvocation(2117) at 2", "Insert ArrayAccess(2135) into Assignment: =(2137) at 0", "Insert BooleanLiteral: true(2136) into Assignment: =(2137) at 1", "Move SimpleName: conn(4036) into MethodInvocation(3804) at 0", "Update SimpleName: fullIndexName(4037) to unwrap", "Move SimpleName: fullIndexName(4037) into MethodInvocation(3804) at 1", "Insert TypeLiteral(3803) into MethodInvocation(3804) at 2", "Insert InfixExpression: ==(4816) into ParenthesizedExpression(4817) at 0", "Insert MethodInvocation(4867) into MethodInvocation(4869) at 0", "Update SimpleName: WAIT_FOR_REBUILD_TO_START(4385) to getQueryServices", "Move SimpleName: WAIT_FOR_REBUILD_TO_START(4385) into MethodInvocation(4869) at 1", "Insert SimpleName: indexStateOnFailure(4885) into InfixExpression: ==(4887) at 0", "Insert QualifiedName: PIndexState.DISABLE(4886) into InfixExpression: ==(4887) at 1", "Insert SimpleName: disableTime(4889) into PrefixExpression: -(4890) at 0", "Insert InfixExpression: ==(4992) into ConditionalExpression(4995) at 0", "Insert QualifiedName: PIndexState.INACTIVE(4993) into ConditionalExpression(4995) at 1", "Insert QualifiedName: PIndexState.ACTIVE(4994) into ConditionalExpression(4995) at 2", "Insert SimpleName: fail(5039) into MethodInvocation(5040) at 0", "Insert SimpleName: CommitException(5043) into SimpleType: CommitException(5044) at 0", "Insert SimpleName: conn(5063) into MethodInvocation(5065) at 0", "Insert SimpleName: createStatement(5064) into MethodInvocation(5065) at 1", "Insert SimpleType: PhoenixStatement(5068) into TypeLiteral(5069) at 0", "Insert StringLiteral: \"SELECT V2 FROM \"(5078) into InfixExpression: +(5081) at 0", "Insert SimpleName: fullTableName(5079) into InfixExpression: +(5081) at 1", "Insert StringLiteral: \" WHERE V1 = 'a'\"(5080) into InfixExpression: +(5081) at 2", "Insert SimpleName: indexStateOnFailure(5100) into InfixExpression: ==(5102) at 0", "Insert QualifiedName: PIndexState.DISABLE(5101) into InfixExpression: ==(5102) at 1", "Insert MethodInvocation(5114) into MethodInvocation(5116) at 0", "Insert SimpleName: getName(5115) into MethodInvocation(5116) at 1", "Insert InfixExpression: ==(5140) into ConditionalExpression(5143) at 0", "Insert QualifiedName: PIndexState.INACTIVE(5141) into ConditionalExpression(5143) at 1", "Insert QualifiedName: PIndexState.ACTIVE(5142) into ConditionalExpression(5143) at 2", "Insert MethodInvocation(5859) into MethodInvocation(5861) at 0", "Update SimpleName: interrupted(5430) to getTable", "Move SimpleName: interrupted(5430) into MethodInvocation(5861) at 1", "Insert MethodInvocation(255) into MethodInvocation(258) at 0", "Insert SimpleName: getOnlineRegions(256) into MethodInvocation(258) at 1", "Insert QualifiedName: PhoenixDatabaseMetaData.SYSTEM_CATALOG_HBASE_TABLE_NAME(257) into MethodInvocation(258) at 2", "Insert SimpleName: MetaDataRegionObserver(265) into SimpleType: MetaDataRegionObserver(266) at 0", "Insert WhileStatement(376) into Block(377) at 0", "Insert SimpleName: cancel(1855) into ArrayAccess(1857) at 0", "Insert NumberLiteral: 0(1856) into ArrayAccess(1857) at 1", "Insert SimpleName: cancel(2133) into ArrayAccess(2135) at 0", "Insert NumberLiteral: 0(2134) into ArrayAccess(2135) at 1", "Insert SimpleType: PhoenixConnection(3802) into TypeLiteral(3803) at 0", "Insert SimpleName: indexStateOnFailure(4814) into InfixExpression: ==(4816) at 0", "Insert QualifiedName: PIndexState.DISABLE(4815) into InfixExpression: ==(4816) at 1", "Update SimpleName: doneSignal(4379) to conn", "Move SimpleName: doneSignal(4379) into MethodInvocation(4867) at 0", "Update SimpleName: await(4380) to unwrap", "Move SimpleName: await(4380) into MethodInvocation(4867) at 1", "Insert TypeLiteral(4866) into MethodInvocation(4867) at 2", "Insert SimpleName: indexStateOnFailure(4990) into InfixExpression: ==(4992) at 0", "Insert QualifiedName: PIndexState.DISABLE(4991) into InfixExpression: ==(4992) at 1", "Insert SimpleName: PhoenixStatement(5067) into SimpleType: PhoenixStatement(5068) at 0", "Insert MethodInvocation(5112) into MethodInvocation(5114) at 0", "Insert SimpleName: getTable(5113) into MethodInvocation(5114) at 1", "Insert SimpleName: indexStateOnFailure(5138) into InfixExpression: ==(5140) at 0", "Insert QualifiedName: PIndexState.DISABLE(5139) into InfixExpression: ==(5140) at 1", "Insert MethodInvocation(5857) into MethodInvocation(5859) at 0", "Update SimpleName: Thread(5429) to getRegionInfo", "Move SimpleName: Thread(5429) into MethodInvocation(5859) at 1", "Insert MethodInvocation(252) into MethodInvocation(255) at 0", "Insert SimpleName: getRSForFirstRegionInTable(253) into MethodInvocation(255) at 1", "Insert QualifiedName: PhoenixDatabaseMetaData.SYSTEM_CATALOG_HBASE_TABLE_NAME(254) into MethodInvocation(255) at 2", "Insert PrefixExpression: !(335) into WhileStatement(376) at 0", "Insert Block(375) into WhileStatement(376) at 1", "Insert SimpleName: PhoenixConnection(3801) into SimpleType: PhoenixConnection(3802) at 0", "Insert SimpleType: PhoenixConnection(4865) into TypeLiteral(4866) at 0", "Insert MethodInvocation(5110) into MethodInvocation(5112) at 0", "Insert SimpleName: getCurrentTable(5111) into MethodInvocation(5112) at 1", "Update SimpleName: WAIT_FOR_INDEX_WRITE(5418) to c", "Move SimpleName: WAIT_FOR_INDEX_WRITE(5418) into MethodInvocation(5857) at 0", "Update SimpleName: await(5419) to getEnvironment", "Move SimpleName: await(5419) into MethodInvocation(5857) at 1", "Insert SimpleName: getUtility(251) into MethodInvocation(252) at 0", "Insert ArrayAccess(334) into PrefixExpression: !(335) at 0", "Insert TryStatement(374) into Block(375) at 0", "Insert SimpleName: PhoenixConnection(4864) into SimpleType: PhoenixConnection(4865) at 0", "Insert MethodInvocation(5108) into MethodInvocation(5110) at 0", "Insert SimpleName: getContext(5109) into MethodInvocation(5110) at 1", "Insert SimpleName: cancel(332) into ArrayAccess(334) at 0", "Insert NumberLiteral: 0(333) into ArrayAccess(334) at 1", "Insert Block(344) into TryStatement(374) at 0", "Insert CatchClause(359) into TryStatement(374) at 1", "Insert CatchClause(373) into TryStatement(374) at 2", "Insert SimpleName: stmt(5106) into MethodInvocation(5108) at 0", "Insert SimpleName: getQueryPlan(5107) into MethodInvocation(5108) at 1", "Insert ExpressionStatement(338) into Block(344) at 0", "Insert ExpressionStatement(343) into Block(344) at 1", "Move SingleVariableDeclaration(5428) into CatchClause(359) at 0", "Move Block(5247) into CatchClause(359) at 1", "Insert SingleVariableDeclaration(363) into CatchClause(373) at 0", "Insert Block(372) into CatchClause(373) at 1", "Insert MethodInvocation(337) into ExpressionStatement(338) at 0", "Insert MethodInvocation(342) into ExpressionStatement(343) at 0", "Move ExpressionStatement(5432) into Block(358) at 0", "Insert SimpleType: SQLException(361) into SingleVariableDeclaration(363) at 0", "Insert SimpleName: e(362) into SingleVariableDeclaration(363) at 1", "Insert ExpressionStatement(371) into Block(372) at 0", "Insert SimpleName: runIndexRebuilder(336) into MethodInvocation(337) at 0", "Insert SimpleName: Thread(339) into MethodInvocation(342) at 0", "Insert SimpleName: sleep(340) into MethodInvocation(342) at 1", "Insert SimpleName: interval(341) into MethodInvocation(342) at 2", "Insert SimpleName: SQLException(360) into SimpleType: SQLException(361) at 0", "Insert MethodInvocation(370) into ExpressionStatement(371) at 0", "Insert SimpleName: Thread(349) into MethodInvocation(351) at 0", "Insert SimpleName: interrupted(350) into MethodInvocation(351) at 1", "Insert SimpleName: LOG(364) into MethodInvocation(370) at 0", "Insert SimpleName: error(365) into MethodInvocation(370) at 1", "Insert MethodInvocation(368) into MethodInvocation(370) at 2", "Insert SimpleName: e(369) into MethodInvocation(370) at 3", "Insert SimpleName: e(366) into MethodInvocation(368) at 0", "Insert SimpleName: getMessage(367) into MethodInvocation(368) at 1", "Delete SimpleName: Repeat(517)", "Delete NumberLiteral: 5(518)", "Delete SingleMemberAnnotation(519)", "Delete QualifiedName: PIndexState.ACTIVE(796)", "Delete SimpleName: TestUtil(1853)", "Delete SimpleName: fullIndexName(1856)", "Delete MethodInvocation(1857)", "Delete ExpressionStatement(1858)", "Delete MethodInvocation(2050)", "Delete MethodInvocation(2235)", "Delete MethodInvocation(2419)", "Delete MethodInvocation(2589)", "Delete MethodInvocation(2759)", "Delete SimpleName: advanceClockUntilPartialRebuildStarts(2987)", "Delete SimpleName: clock(2989)", "Delete MethodInvocation(2997)", "Delete NumberLiteral: 100(3000)", "Delete Block(3010)", "Delete TryStatement(3017)", "Delete Block(3018)", "Delete MethodDeclaration(3019)", "Delete SimpleName: advanceClockUntilPartialRebuildStarts(3292)", "Delete SimpleName: clock(3294)", "Delete MethodInvocation(3302)", "Delete NumberLiteral: 100(3305)", "Delete NumberLiteral: 1000(4027)", "Delete StringLiteral: \"UPSERT INTO \"(4268)", "Delete SimpleName: fullTableName(4269)", "Delete StringLiteral: \" VALUES('a','ccc','222','zzz')\"(4270)", "Delete InfixExpression: +(4271)", "Delete MethodInvocation(4272)", "Delete MethodInvocation(4322)", "Delete NumberLiteral: 100(4325)", "Delete Modifier: private(3667)", "Delete Modifier: final(3668)", "Delete Modifier: static(3669)", "Delete SimpleName: CountDownLatch(3670)", "Delete SimpleType: CountDownLatch(3671)", "Delete SimpleName: WAIT_FOR_REBUILD_TO_START(3672)", "Delete SimpleName: CountDownLatch(3673)", "Delete SimpleType: CountDownLatch(3674)", "Delete NumberLiteral: 1(3675)", "Delete ClassInstanceCreation(3676)", "Delete VariableDeclarationFragment(3677)", "Delete FieldDeclaration(3678)", "Delete Modifier: private(3679)", "Delete Modifier: final(3680)", "Delete Modifier: static(3681)", "Delete SimpleName: CountDownLatch(3682)", "Delete SimpleType: CountDownLatch(3683)", "Delete SimpleName: WAIT_FOR_INDEX_WRITE(3684)", "Delete SimpleName: CountDownLatch(3685)", "Delete SimpleType: CountDownLatch(3686)", "Delete NumberLiteral: 1(3687)", "Delete ClassInstanceCreation(3688)", "Delete VariableDeclarationFragment(3689)", "Delete FieldDeclaration(3690)", "Delete MethodInvocation(3948)", "Delete SimpleName: clock(3958)", "Delete SimpleName: REBUILD_INTERVAL(3959)", "Delete MethodInvocation(3960)", "Delete Modifier: final(3577)", "Delete SimpleName: CountDownLatch(3578)", "Delete SimpleType: CountDownLatch(3579)", "Delete SimpleName: doneSignal(3580)", "Delete SimpleName: CountDownLatch(3581)", "Delete SimpleType: CountDownLatch(3582)", "Delete NumberLiteral: 1(3583)", "Delete ClassInstanceCreation(3584)", "Delete VariableDeclarationFragment(3585)", "Delete VariableDeclarationStatement(3586)", "Delete MethodInvocation(3591)", "Delete ExpressionStatement(3592)", "Delete SimpleName: await(3594)", "Delete NumberLiteral: 30(3595)", "Delete QualifiedName: TimeUnit.SECONDS(3596)", "Delete MethodInvocation(3644)", "Delete NumberLiteral: 100(4424)", "Delete StringLiteral: \"UPSERT INTO \"(4431)", "Delete SimpleName: fullTableName(4432)", "Delete StringLiteral: \" VALUES('a','cccccc','222','zzz')\"(4433)", "Delete InfixExpression: +(4434)", "Delete MethodInvocation(4435)", "Delete MethodInvocation(4439)", "Delete QualifiedName: clock.time(4441)", "Delete NumberLiteral: 100(4442)", "Delete Assignment: +=(4443)", "Delete MethodInvocation(4474)", "Delete SimpleName: countDown(4477)", "Delete SimpleName: clock(4484)", "Delete MethodInvocation(4485)", "Delete SimpleName: fullIndexName(4703)", "Delete SimpleName: clock(4704)", "Delete QualifiedName: PIndexState.ACTIVE(4711)", "Delete MethodInvocation(4712)", "Delete Modifier: final(5135)", "Delete SimpleName: CountDownLatch(5139)", "Delete SimpleType: CountDownLatch(5140)", "Delete NumberLiteral: 1(5141)", "Delete ClassInstanceCreation(5142)", "Delete SimpleName: advanceClockUntilPartialRebuildStarts(5145)", "Delete QualifiedName: clock.time(5151)", "Delete SimpleName: WAIT_AFTER_DISABLED(5152)", "Delete NumberLiteral: 1000(5153)", "Delete InfixExpression: +(5154)", "Delete Assignment: +=(5155)", "Delete NumberLiteral: 1000(5224)", "Delete MethodInvocation(5225)", "Delete NumberLiteral: 1000(5228)", "Delete SimpleName: countDown(5234)", "Delete Modifier: private(3990)", "Delete SimpleType: Connection(3995)", "Delete SimpleName: conn(3996)", "Delete SingleVariableDeclaration(3997)", "Delete SimpleType: String(3999)", "Delete SimpleName: fullIndexName(4000)", "Delete SingleVariableDeclaration(4001)", "Delete SimpleType: MyClock(4007)", "Delete SimpleName: clock(4008)", "Delete SingleVariableDeclaration(4009)", "Delete PrimitiveType: long(4010)", "Delete SimpleName: increment(4011)", "Delete SingleVariableDeclaration(4012)", "Delete SimpleType: InterruptedException(4014)", "Delete PrimitiveType: int(4017)", "Delete SimpleName: maxTries(4018)", "Delete NumberLiteral: 60(4019)", "Delete VariableDeclarationFragment(4020)", "Delete SimpleName: nTries(4021)", "Delete NumberLiteral: 0(4022)", "Delete VariableDeclarationFragment(4023)", "Delete VariableDeclarationStatement(4024)", "Delete QualifiedName: clock.time(4030)", "Delete SimpleName: increment(4031)", "Delete Assignment: +=(4032)", "Delete ExpressionStatement(4033)", "Delete SimpleName: TestUtil(4034)", "Delete SimpleName: checkIndexState(4035)", "Delete SimpleName: expectedIndexState(4038)", "Delete NumberLiteral: 0L(4039)", "Delete MethodInvocation(4040)", "Delete ReturnStatement(4041)", "Delete Block(4042)", "Delete IfStatement(4043)", "Delete Block(4044)", "Delete SimpleName: nTries(4045)", "Delete PrefixExpression: ++(4046)", "Delete SimpleName: maxTries(4047)", "Delete InfixExpression: <(4048)", "Delete DoStatement(4049)", "Delete SimpleName: fail(4050)", "Delete StringLiteral: \"Ran out of time waiting for index state to become \"(4051)", "Delete SimpleName: expectedIndexState(4052)", "Delete InfixExpression: +(4053)", "Delete MethodInvocation(4054)", "Delete ExpressionStatement(4055)", "Delete Block(4056)", "Delete MethodDeclaration(4057)", "Delete Modifier: public(4060)", "Delete PrimitiveType: void(4061)", "Delete SimpleName: testDisableIndexDuringRebuild(4062)", "Delete SimpleType: HTableInterface(4205)", "Delete VariableDeclarationFragment(4218)", "Delete VariableDeclarationExpression(4219)", "Delete SimpleName: IndexUtil(4220)", "Delete SimpleName: updateIndexState(4221)", "Delete NumberLiteral: 0L(4223)", "Delete QualifiedName: PIndexState.DISABLE(4225)", "Delete MethodInvocation(4226)", "Delete ExpressionStatement(4227)", "Delete Modifier: final(4308)", "Delete SimpleName: CountDownLatch(4309)", "Delete SimpleType: CountDownLatch(4310)", "Delete SimpleName: doneSignal(4311)", "Delete SimpleName: CountDownLatch(4312)", "Delete SimpleType: CountDownLatch(4313)", "Delete NumberLiteral: 1(4314)", "Delete ClassInstanceCreation(4315)", "Delete VariableDeclarationFragment(4316)", "Delete VariableDeclarationStatement(4317)", "Delete SimpleName: doneSignal(4360)", "Delete SimpleName: await(4361)", "Delete NumberLiteral: 30(4362)", "Delete QualifiedName: TimeUnit.SECONDS(4363)", "Delete MethodInvocation(4364)", "Delete ExpressionStatement(4365)", "Delete NumberLiteral: 30(4381)", "Delete QualifiedName: TimeUnit.SECONDS(4382)", "Delete MethodInvocation(4383)", "Delete ExpressionStatement(4384)", "Delete NumberLiteral: 30(4387)", "Delete MethodInvocation(4389)", "Delete ExpressionStatement(4390)", "Delete NumberLiteral: 0L(4394)", "Delete SimpleName: metaTable(4395)", "Delete QualifiedName: PIndexState.DISABLE(4396)", "Delete MethodInvocation(4397)", "Delete ExpressionStatement(4398)", "Delete QualifiedName: clock.time(4399)", "Delete NumberLiteral: 100(4400)", "Delete Assignment: +=(4401)", "Delete ExpressionStatement(4402)", "Delete SimpleName: disableTime(4403)", "Delete SimpleName: clock(4404)", "Delete MethodInvocation(4406)", "Delete Assignment: =(4407)", "Delete ExpressionStatement(4408)", "Delete SimpleName: commit(4456)", "Delete MethodInvocation(4457)", "Delete ExpressionStatement(4458)", "Delete QualifiedName: clock.time(4459)", "Delete NumberLiteral: 100(4460)", "Delete Assignment: +=(4461)", "Delete ExpressionStatement(4462)", "Delete SimpleName: disableTime(4466)", "Delete QualifiedName: PIndexState.DISABLE(4468)", "Delete MethodInvocation(4469)", "Delete ExpressionStatement(4470)", "Delete Block(4480)", "Delete TryStatement(4481)", "Delete QualifiedName: clock.time(4487)", "Delete SimpleName: WAIT_AFTER_DISABLED(4488)", "Delete NumberLiteral: 2(4489)", "Delete InfixExpression: *(4490)", "Delete Assignment: +=(4491)", "Delete ExpressionStatement(4492)", "Delete QualifiedName: PIndexState.ACTIVE(4497)", "Delete MethodInvocation(4498)", "Delete ExpressionStatement(4499)", "Delete Block(4511)", "Delete TryStatement(4518)", "Delete Block(4519)", "Delete MethodDeclaration(4520)", "Delete Modifier: public(4523)", "Delete PrimitiveType: void(4524)", "Delete SimpleName: testDeleteAndUpsertValuesAtSameTS1(4525)", "Delete QualifiedName: clock.time(4714)", "Delete NumberLiteral: 100(4715)", "Delete Assignment: +=(4716)", "Delete ExpressionStatement(4717)", "Delete Block(4725)", "Delete TryStatement(4732)", "Delete Block(4733)", "Delete MethodDeclaration(4734)", "Delete SimpleName: advanceClockUntilPartialRebuildStarts(4916)", "Delete SimpleName: clock(4918)", "Delete MethodInvocation(4926)", "Delete NumberLiteral: 100(4929)", "Delete Modifier: private(5119)", "Delete Modifier: static(5120)", "Delete PrimitiveType: void(5121)", "Delete SimpleName: advanceClockUntilPartialRebuildStarts(5122)", "Delete Modifier: final(5123)", "Delete SimpleType: String(5125)", "Delete SimpleName: fullIndexName(5126)", "Delete SingleVariableDeclaration(5127)", "Delete Modifier: final(5128)", "Delete SimpleName: MyClock(5129)", "Delete SimpleType: MyClock(5130)", "Delete SimpleName: clock(5131)", "Delete SingleVariableDeclaration(5132)", "Delete SimpleName: await(5158)", "Delete NumberLiteral: 30(5159)", "Delete QualifiedName: TimeUnit.SECONDS(5160)", "Delete MethodInvocation(5161)", "Delete ExpressionStatement(5162)", "Delete Block(5163)", "Delete MethodDeclaration(5164)", "Delete Modifier: private(5165)", "Delete Modifier: static(5166)", "Delete PrimitiveType: void(5167)", "Delete SimpleName: advanceClockUntilPartialRebuildStarts(5168)", "Delete Modifier: final(5169)", "Delete SimpleName: String(5170)", "Delete SimpleType: String(5171)", "Delete SimpleName: fullIndexName(5172)", "Delete SingleVariableDeclaration(5173)", "Delete Modifier: final(5174)", "Delete SimpleName: MyClock(5175)", "Delete SimpleType: MyClock(5176)", "Delete SimpleName: clock(5177)", "Delete SingleVariableDeclaration(5178)", "Delete Modifier: final(5179)", "Delete SimpleName: CountDownLatch(5180)", "Delete SimpleType: CountDownLatch(5181)", "Delete SimpleName: doneSignal(5182)", "Delete SingleVariableDeclaration(5183)", "Delete SimpleName: Runnable(5184)", "Delete SimpleType: Runnable(5185)", "Delete SimpleName: r(5186)", "Delete Modifier: public(5191)", "Delete PrimitiveType: void(5192)", "Delete SimpleName: run(5193)", "Delete PrimitiveType: int(5204)", "Delete SimpleName: nTries(5205)", "Delete NumberLiteral: 10(5206)", "Delete VariableDeclarationFragment(5207)", "Delete VariableDeclarationStatement(5208)", "Delete SimpleName: nTries(5209)", "Delete PrefixExpression: --(5210)", "Delete NumberLiteral: 0(5211)", "Delete InfixExpression: >(5212)", "Delete PrefixExpression: !(5220)", "Delete InfixExpression: &&(5221)", "Delete Block(5231)", "Delete WhileStatement(5232)", "Delete Block(5237)", "Delete SimpleName: Exception(5238)", "Delete SimpleType: Exception(5239)", "Delete SimpleName: e(5240)", "Delete SingleVariableDeclaration(5241)", "Delete CatchClause(5248)", "Delete TryStatement(5249)", "Delete Block(5250)", "Delete MethodDeclaration(5251)", "Delete AnonymousClassDeclaration(5252)", "Delete ClassInstanceCreation(5253)", "Delete VariableDeclarationFragment(5254)", "Delete VariableDeclarationStatement(5255)", "Delete SimpleName: Thread(5256)", "Delete SimpleType: Thread(5257)", "Delete SimpleName: t(5258)", "Delete SimpleName: Thread(5259)", "Delete SimpleType: Thread(5260)", "Delete SimpleName: r(5261)", "Delete ClassInstanceCreation(5262)", "Delete VariableDeclarationFragment(5263)", "Delete VariableDeclarationStatement(5264)", "Delete BooleanLiteral: true(5267)", "Delete MethodInvocation(5268)", "Delete ExpressionStatement(5269)", "Delete MethodInvocation(5272)", "Delete ExpressionStatement(5273)", "Delete Block(5274)", "Delete MethodDeclaration(5275)", "Delete Modifier: private(5276)", "Delete SimpleName: conn(5293)", "Delete SimpleName: unwrap(5294)", "Delete SimpleName: PhoenixConnection(5295)", "Delete SimpleType: PhoenixConnection(5296)", "Delete TypeLiteral(5297)", "Delete MethodInvocation(5298)", "Delete SimpleName: toBytes(5309)", "Delete MethodInvocation(5311)", "Delete MethodInvocation(5342)", "Delete SimpleName: descriptor(5343)", "Delete NumberLiteral: 1000(5379)", "Delete SimpleType: Connection(5281)", "Delete SimpleName: conn(5282)", "Delete SingleVariableDeclaration(5283)", "Delete SimpleType: String(5285)", "Delete SimpleName: tableName(5286)", "Delete SingleVariableDeclaration(5287)", "Delete SimpleName: Exception(5288)", "Delete SimpleType: Exception(5289)", "Delete SimpleName: descriptor(5315)", "Delete SimpleName: removeCoprocessor(5316)", "Delete MethodInvocation(5321)", "Delete MethodInvocation(5322)", "Delete ExpressionStatement(5323)", "Delete PrimitiveType: int(5324)", "Delete SimpleName: numTries(5325)", "Delete NumberLiteral: 10(5326)", "Delete VariableDeclarationFragment(5327)", "Delete VariableDeclarationStatement(5328)", "Delete SimpleName: HBaseAdmin(5329)", "Delete SimpleType: HBaseAdmin(5330)", "Delete SimpleName: admin(5331)", "Delete SimpleName: getAdmin(5333)", "Delete MethodInvocation(5334)", "Delete VariableDeclarationFragment(5335)", "Delete VariableDeclarationExpression(5336)", "Delete SimpleName: admin(5346)", "Delete MethodInvocation(5351)", "Delete MethodInvocation(5352)", "Delete MethodInvocation(5355)", "Delete PrefixExpression: !(5356)", "Delete SimpleName: numTries(5357)", "Delete NumberLiteral: 0(5358)", "Delete InfixExpression: >(5359)", "Delete InfixExpression: &&(5360)", "Delete SimpleName: numTries(5361)", "Delete PostfixExpression: --(5362)", "Delete ExpressionStatement(5363)", "Delete SimpleName: numTries(5364)", "Delete NumberLiteral: 0(5365)", "Delete InfixExpression: ==(5366)", "Delete SimpleName: Exception(5367)", "Delete SimpleType: Exception(5368)", "Delete StringLiteral: \"Check to detect if delaying co-processor was removed failed after \"(5369)", "Delete SimpleName: numTries(5370)", "Delete StringLiteral: \" retries.\"(5371)", "Delete InfixExpression: +(5372)", "Delete ClassInstanceCreation(5373)", "Delete ThrowStatement(5374)", "Delete Block(5375)", "Delete IfStatement(5376)", "Delete Block(5382)", "Delete WhileStatement(5383)", "Delete Block(5384)", "Delete TryStatement(5385)", "Delete Block(5386)", "Delete SimpleName: WAIT_FOR_REBUILD_TO_START(5414)", "Delete SimpleName: countDown(5415)", "Delete MethodInvocation(5416)", "Delete ExpressionStatement(5417)", "Delete NumberLiteral: 30(5420)", "Delete QualifiedName: TimeUnit.SECONDS(5421)", "Delete MethodInvocation(5422)", "Delete ExpressionStatement(5423)", "Delete Block(5424)", "Delete SimpleName: IOException(5433)", "Delete SimpleType: IOException(5434)", "Delete SimpleName: e(5435)", "Delete ClassInstanceCreation(5436)", "Delete ThrowStatement(5437)", "Delete Block(5438)", "Delete CatchClause(5439)", "Delete TryStatement(5440)"]}}], "commit_stats": [{"total_files": 15, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}