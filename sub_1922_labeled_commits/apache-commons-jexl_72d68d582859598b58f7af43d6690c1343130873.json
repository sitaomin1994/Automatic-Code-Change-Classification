{"application": "apache-commons-jexl", "csha": "72d68d582859598b58f7af43d6690c1343130873", "files": [{"DebugInfo_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL TextElement: debugging information reporting.", "DEL Modifier: public", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: debugString", "DEL SimpleName: name", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL TextElement: name. ", "DEL SimpleType: StringBuilder", "DEL Modifier: public", "DEL SimpleName: name", "DEL SimpleName: append", "DEL SimpleName: line", "DEL Javadoc", "DEL SimpleName: getLine", "DEL Block", "DEL StringLiteral: \":\"", "DEL SimpleName: line", "DEL SimpleName: sb", "DEL TagElement: @return", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: getColumn", "DEL Block", "DEL Javadoc", "DEL Javadoc", "DEL Javadoc", "DEL TagElement: @return", "DEL PrimitiveType: int", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement: Gets the column number.", "DEL SimpleName: DebugInfo", "DEL MethodDeclaration", "DEL SimpleName: column", "DEL ThisExpression", "DEL Modifier: final", "DEL TextElement:  template name", "DEL TextElement: Formats this info in the form 'name&#064;line:column'.", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: getName", "DEL SimpleName: debugInfo", "DEL SimpleName: tn", "DEL Modifier: private", "DEL ConditionalExpression", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL TextElement:  column", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: DebugInfo", "DEL Modifier: private", "DEL SimpleName: name", "DEL InfixExpression: >", "DEL InfixExpression: >", "DEL SimpleName: append", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TextElement: line number. ", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL TextElement: Gets the line number.", "DEL SimpleName: tn", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleType: StringBuilder", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: c", "DEL SimpleName: JexlInfo", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: column", "DEL SimpleName: column", "DEL SimpleName: line", "DEL Block", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: DebugInfo", "DEL MarkerAnnotation", "DEL PrimitiveType: int", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement: @return", "DEL SimpleName: sb", "DEL NumberLiteral: 0", "DEL SimpleName: name", "DEL TagElement: @inheritDoc", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: DebugInfo", "DEL FieldDeclaration", "DEL StringLiteral: \"@\"", "DEL SimpleName: toString", "DEL SimpleName: sb", "DEL NullLiteral", "DEL SimpleName: tn", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL SimpleName: sb", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement:  template name", "DEL TextElement:  line number", "DEL ReturnStatement", "DEL SimpleName: name", "DEL TextElement: Helper class to carry in info such as a url/file name, line and column for", "DEL SimpleName: StringBuilder", "DEL FieldDeclaration", "DEL SimpleType: String", "DEL SimpleName: toString", "DEL TagElement", "DEL Assignment: =", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: sb", "DEL PrimitiveType: int", "DEL TagElement", "DEL ReturnStatement", "DEL TagElement: @return", "DEL StringLiteral: \"\"", "DEL SimpleName: c", "DEL TagElement", "DEL MethodInvocation", "DEL TextElement:  ", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL Modifier: public", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL SimpleName: column", "DEL Modifier: final", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: sb", "DEL TagElement: @param", "DEL SimpleName: l", "DEL SimpleName: l", "DEL TagElement", "DEL TextElement: Create info.", "DEL Javadoc", "DEL SimpleName: l", "DEL TextElement:  line number.", "DEL SimpleName: line", "DEL SimpleName: line", "DEL MethodInvocation", "DEL SimpleType: JexlInfo", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL TagElement", "DEL TypeDeclaration: class", "DEL TextElement:  the formatted info", "DEL TextElement: column number. ", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: column", "DEL SimpleType: String", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL TextElement:  the column.", "DEL TextElement:  ", "DEL TagElement", "DEL Block", "DEL TextElement: Gets the file/script/url name.", "DEL PrimitiveType: int", "DEL TagElement", "DEL IfStatement"]}]}}, {"DebugInfo_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Helper class to carry in info such as a url/file name, line and column for(2)", "Delete TextElement: debugging information reporting.(3)", "Delete TagElement(4)", "Delete Javadoc(5)", "Delete Modifier: public(6)", "Delete SimpleName: DebugInfo(7)", "Delete SimpleName: JexlInfo(8)", "Delete SimpleType: JexlInfo(9)", "Delete TextElement: line number. (10)", "Delete TagElement(11)", "Delete Javadoc(12)", "Delete Modifier: private(13)", "Delete Modifier: final(14)", "Delete PrimitiveType: int(15)", "Delete SimpleName: line(16)", "Delete VariableDeclarationFragment(17)", "Delete FieldDeclaration(18)", "Delete TextElement: column number. (19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete Modifier: private(22)", "Delete Modifier: final(23)", "Delete PrimitiveType: int(24)", "Delete SimpleName: column(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: name. (28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete Modifier: private(31)", "Delete Modifier: final(32)", "Delete SimpleName: String(33)", "Delete SimpleType: String(34)", "Delete SimpleName: name(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: Create info.(38)", "Delete TagElement(39)", "Delete SimpleName: tn(40)", "Delete TextElement:  template name(41)", "Delete TagElement: @param(42)", "Delete SimpleName: l(43)", "Delete TextElement:  line number(44)", "Delete TagElement: @param(45)", "Delete SimpleName: c(46)", "Delete TextElement:  column(47)", "Delete TagElement: @param(48)", "Delete Javadoc(49)", "Delete Modifier: public(50)", "Delete SimpleName: DebugInfo(51)", "Delete SimpleName: String(52)", "Delete SimpleType: String(53)", "Delete SimpleName: tn(54)", "Delete SingleVariableDeclaration(55)", "Delete PrimitiveType: int(56)", "Delete SimpleName: l(57)", "Delete SingleVariableDeclaration(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: c(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: name(62)", "Delete SimpleName: tn(63)", "Delete Assignment: =(64)", "Delete ExpressionStatement(65)", "Delete SimpleName: line(66)", "Delete SimpleName: l(67)", "Delete Assignment: =(68)", "Delete ExpressionStatement(69)", "Delete SimpleName: column(70)", "Delete SimpleName: c(71)", "Delete Assignment: =(72)", "Delete ExpressionStatement(73)", "Delete Block(74)", "Delete MethodDeclaration(75)", "Delete TextElement: Formats this info in the form 'name&#064;line:column'.(76)", "Delete TagElement(77)", "Delete TextElement:  the formatted info(78)", "Delete TagElement: @return(79)", "Delete Javadoc(80)", "Delete SimpleName: Override(81)", "Delete MarkerAnnotation(82)", "Delete Modifier: public(83)", "Delete SimpleName: String(84)", "Delete SimpleType: String(85)", "Delete SimpleName: toString(86)", "Delete SimpleName: StringBuilder(87)", "Delete SimpleType: StringBuilder(88)", "Delete SimpleName: sb(89)", "Delete SimpleName: StringBuilder(90)", "Delete SimpleType: StringBuilder(91)", "Delete SimpleName: name(92)", "Delete NullLiteral(93)", "Delete InfixExpression: !=(94)", "Delete SimpleName: name(95)", "Delete StringLiteral: \"\"(96)", "Delete ConditionalExpression(97)", "Delete ClassInstanceCreation(98)", "Delete VariableDeclarationFragment(99)", "Delete VariableDeclarationStatement(100)", "Delete SimpleName: line(101)", "Delete NumberLiteral: 0(102)", "Delete InfixExpression: >(103)", "Delete SimpleName: sb(104)", "Delete SimpleName: append(105)", "Delete StringLiteral: \"@\"(106)", "Delete MethodInvocation(107)", "Delete ExpressionStatement(108)", "Delete SimpleName: sb(109)", "Delete SimpleName: append(110)", "Delete SimpleName: line(111)", "Delete MethodInvocation(112)", "Delete ExpressionStatement(113)", "Delete SimpleName: column(114)", "Delete NumberLiteral: 0(115)", "Delete InfixExpression: >(116)", "Delete SimpleName: sb(117)", "Delete SimpleName: append(118)", "Delete StringLiteral: \":\"(119)", "Delete MethodInvocation(120)", "Delete ExpressionStatement(121)", "Delete SimpleName: sb(122)", "Delete SimpleName: append(123)", "Delete SimpleName: column(124)", "Delete MethodInvocation(125)", "Delete ExpressionStatement(126)", "Delete Block(127)", "Delete IfStatement(128)", "Delete Block(129)", "Delete IfStatement(130)", "Delete SimpleName: sb(131)", "Delete SimpleName: toString(132)", "Delete MethodInvocation(133)", "Delete ReturnStatement(134)", "Delete Block(135)", "Delete MethodDeclaration(136)", "Delete TagElement: @inheritDoc(137)", "Delete TextElement:  (138)", "Delete TagElement(139)", "Delete Javadoc(140)", "Delete Modifier: public(141)", "Delete SimpleName: String(142)", "Delete SimpleType: String(143)", "Delete SimpleName: debugString(144)", "Delete SimpleName: toString(145)", "Delete MethodInvocation(146)", "Delete ReturnStatement(147)", "Delete Block(148)", "Delete MethodDeclaration(149)", "Delete TagElement: @inheritDoc(150)", "Delete TextElement:  (151)", "Delete TagElement(152)", "Delete Javadoc(153)", "Delete Modifier: public(154)", "Delete SimpleName: DebugInfo(155)", "Delete SimpleType: DebugInfo(156)", "Delete SimpleName: debugInfo(157)", "Delete ThisExpression(158)", "Delete ReturnStatement(159)", "Delete Block(160)", "Delete MethodDeclaration(161)", "Delete TextElement: Gets the file/script/url name.(162)", "Delete TagElement(163)", "Delete TextElement:  template name(164)", "Delete TagElement: @return(165)", "Delete Javadoc(166)", "Delete Modifier: public(167)", "Delete SimpleName: String(168)", "Delete SimpleType: String(169)", "Delete SimpleName: getName(170)", "Delete SimpleName: name(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete MethodDeclaration(174)", "Delete TextElement: Gets the line number.(175)", "Delete TagElement(176)", "Delete TextElement:  line number.(177)", "Delete TagElement: @return(178)", "Delete Javadoc(179)", "Delete Modifier: public(180)", "Delete PrimitiveType: int(181)", "Delete SimpleName: getLine(182)", "Delete SimpleName: line(183)", "Delete ReturnStatement(184)", "Delete Block(185)", "Delete MethodDeclaration(186)", "Delete TextElement: Gets the column number.(187)", "Delete TagElement(188)", "Delete TextElement:  the column.(189)", "Delete TagElement: @return(190)", "Delete Javadoc(191)", "Delete Modifier: public(192)", "Delete PrimitiveType: int(193)", "Delete SimpleName: getColumn(194)", "Delete SimpleName: column(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete MethodDeclaration(198)", "Delete TypeDeclaration: class(199)"]}}, {"Debugger_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.regex.Pattern"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveOperator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAmbiguous"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAndNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTArrayAccess"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTArrayLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAssignment"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseAndNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseComplNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseOrNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseXorNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBlock", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTConstructorNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTDivNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTEQNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTERNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTEmptyFunction"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTFalseNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTForeachStatement", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTFunctionNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTGENode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTGTNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTIdentifier"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTIfStatement", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTLENode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTLTNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMapEntry", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMapLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMethodNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTModNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMulNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNENode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNRNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNotNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNullLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNumberLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTOrNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReference"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReferenceExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReturnStatement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTSizeFunction"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTSizeMethod", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTStringLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTTernaryNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTTrueNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTUnaryMinusNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTVar"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTWhileStatement", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.JexlNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ParserVisitor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.SimpleNode"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: ASTBitwiseOrNode", "DEL SimpleName: data", "DEL SimpleName: builder", "DEL SimpleName: data", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: data", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: prefixChild", "DEL SimpleName: node", "DEL TagElement", "DEL SimpleName: append", "DEL SimpleName: data", "DEL TagElement", "DEL SimpleName: JexlNode", "DEL SimpleName: String", "DEL SimpleName: accept", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleType: JexlNode", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL InfixExpression: >", "DEL SimpleType: ASTNotNode", "DEL ExpressionStatement", "DEL TagElement: @inheritDoc", "DEL SimpleType: String", "DEL SimpleName: cause", "DEL TextElement: Checks if a terminal node is the the cause to debug &amp; adds its", "DEL TextElement:  ", "DEL PrimitiveType: boolean", "DEL StringLiteral: \"?:\"", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: num", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL InfixExpression: ||", "DEL ReturnStatement", "DEL SimpleName: ASTAdditiveOperator", "DEL NumberLiteral: 0", "DEL SimpleName: accept", "DEL SimpleType: ASTTrueNode", "DEL SimpleName: builder", "DEL TextElement:  visitor pattern argument", "DEL StringLiteral: \", \"", "DEL SimpleType: Object", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL TagElement", "DEL Block", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: Object", "DEL TextElement: adds their representation to the rebuilt expression.", "DEL SimpleType: Object", "DEL SimpleName: ASTModNode", "DEL TagElement", "DEL SimpleName: node", "DEL InfixExpression: >", "DEL IfStatement", "DEL SimpleName: node", "DEL Modifier: private", "DEL SimpleName: check", "DEL TagElement", "DEL TextElement: in that string.", "DEL SimpleName: data", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: ASTNullLiteral", "DEL MethodInvocation", "DEL SimpleName: infix", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: acceptStatement", "DEL SimpleName: Object", "DEL SimpleName: StringBuilder", "DEL SimpleName: node", "DEL SimpleName: jjtGetNumChildren", "DEL MethodInvocation", "DEL PrefixExpression: ++", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: data", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleType: ASTNullLiteral", "DEL Modifier: public", "DEL SimpleName: node", "DEL Modifier: public", "DEL SimpleName: image", "DEL MethodInvocation", "DEL SimpleName: node", "DEL QualifiedName: node.image", "DEL SimpleName: visit", "DEL TagElement", "DEL SimpleName: root", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: num", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL SimpleName: visit", "DEL SimpleName: visit", "DEL ForStatement", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SimpleType: ASTModNode", "DEL SimpleName: node", "DEL SimpleName: check", "DEL SimpleName: accept", "DEL SimpleName: data", "DEL SimpleName: infixChildren", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: data", "DEL SimpleName: prefix", "DEL TextElement:  ", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL StringLiteral: \"[\"", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL TextElement:  visitor pattern argument", "DEL SimpleName: i", "DEL SimpleName: append", "DEL SimpleName: acceptStatement", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL TextElement:  whether the child should be parenthesized", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL Modifier: public", "DEL StringLiteral: \")\"", "DEL SimpleName: image", "DEL SimpleName: data", "DEL SimpleType: UnsupportedOperationException", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleType: ASTBlock", "DEL MethodInvocation", "DEL Block", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: append", "DEL SimpleName: jjtGetChild", "DEL SimpleName: append", "DEL TagElement", "DEL TagElement: @return", "DEL SimpleName: append", "DEL FieldAccess", "DEL SimpleName: builder", "DEL StringLiteral: \" : \"", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 2", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: ASTWhileStatement", "DEL SimpleName: visit", "DEL ExpressionStatement", "DEL SimpleName: paren", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: infixChildren", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL SimpleName: data", "DEL SimpleName: data", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Modifier: public", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL SimpleName: check", "DEL Javadoc", "DEL SimpleName: ASTMapLiteral", "DEL TextElement:  ", "DEL SimpleName: data", "DEL NumberLiteral: 0", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL TagElement", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL TextElement: The ending character location offset of the cause in the builder. ", "DEL TagElement: @param", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: toString", "DEL SimpleName: data", "DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL SimpleName: append", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: visit", "DEL TagElement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: paren", "DEL SimpleType: Object", "DEL PrimitiveType: int", "DEL TagElement", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: int", "DEL SimpleName: ASTEmptyFunction", "DEL Block", "DEL SimpleName: jjtAccept", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL NullLiteral", "DEL StringLiteral: \"return \"", "DEL SimpleName: i", "DEL Block", "DEL SimpleType: Object", "DEL Javadoc", "DEL TextElement:  ", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: value", "DEL PrimitiveType: int", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SimpleName: ASTMethodNode", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: data", "DEL SimpleName: check", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: append", "DEL SimpleName: setLength", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: data", "DEL StringLiteral: \"'\"", "DEL WhileStatement", "DEL SimpleName: node", "DEL StringLiteral: \", \"", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: jjtGetNumChildren", "DEL PrimitiveType: int", "DEL SimpleName: check", "DEL IfStatement", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: jjtGetParent", "DEL SimpleName: accept", "DEL TextElement:  ", "DEL SimpleName: image", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: node", "DEL Block", "DEL TextElement:  ", "DEL TagElement: @inheritDoc", "DEL SimpleName: infixChildren", "DEL SimpleName: builder", "DEL NumberLiteral: 2", "DEL SimpleName: node", "DEL TextElement:  visitor pattern argument", "DEL SimpleType: ASTArrayLiteral", "DEL StringLiteral: \" % \"", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"true\"", "DEL InfixExpression: >", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: ASTNRNode", "DEL SimpleName: Object", "DEL SimpleType: JexlNode", "DEL SimpleName: builder", "DEL SimpleType: UnsupportedOperationException", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL SimpleName: root", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: append", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleName: data", "DEL Block", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL ReturnStatement", "DEL TextElement:  ", "DEL Block", "DEL SimpleName: append", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: num", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL SimpleType: ASTModNode", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: builder", "DEL SimpleName: Object", "DEL SimpleName: jjtGetNumChildren", "DEL TagElement", "DEL SimpleType: ASTDivNode", "DEL StringLiteral: \"'\"", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL TextElement: Checks identifiers that contain space, quote, double-quotes or backspace. ", "DEL VariableDeclarationStatement", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: builder", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: accept", "DEL TagElement: @inheritDoc", "DEL SimpleName: end", "DEL SimpleName: data", "DEL SimpleName: accept", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlNode", "DEL CharacterLiteral: ';'", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: visit", "DEL StringLiteral: \"'\"", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL SimpleType: ASTConstructorNode", "DEL SimpleType: ASTJexlScript", "DEL Modifier: public", "DEL SimpleName: builder", "DEL SimpleName: ASTAdditiveNode", "DEL SimpleName: ASTIfStatement", "DEL QualifiedName: node.image", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: length", "DEL SimpleName: visit", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: data", "DEL StringLiteral: \" : \"", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL TextElement: Seeks the location of an error cause (a node) in an expression.", "DEL MethodDeclaration", "DEL SimpleName: accept", "DEL TagElement", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL SimpleName: visit", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: ASTTrueNode", "DEL SimpleName: JexlNode", "DEL VariableDeclarationExpression", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: data", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL SimpleName: builder", "DEL SimpleName: data", "DEL SimpleName: data", "DEL SimpleName: Debugger", "DEL SimpleName: num", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL TagElement", "DEL Modifier: public", "DEL Javadoc", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: num", "DEL SimpleType: ASTVar", "DEL SimpleName: image", "DEL SimpleName: builder", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: i", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL SimpleName: acceptStatement", "DEL SimpleName: jjtGetParent", "DEL SingleVariableDeclaration", "DEL QualifiedName: node.image", "DEL ExpressionStatement", "DEL StringLiteral: \"[ \"", "DEL MethodDeclaration", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL Block", "DEL Block", "DEL Block", "DEL StringLiteral: \") \"", "DEL SimpleName: accept", "DEL Modifier: public", "DEL SimpleName: builder", "DEL Block", "DEL ExpressionStatement", "DEL ForStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: paren", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Modifier: private", "DEL ThrowStatement", "DEL SimpleName: prefix", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: node", "DEL ForStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL SimpleType: ASTAndNode", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: paren", "DEL SingleVariableDeclaration", "DEL SimpleName: jjtGetParent", "DEL Assignment: =", "DEL TagElement: @inheritDoc", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: data", "DEL QualifiedName: node.image", "DEL StringLiteral: \"{ \"", "DEL VariableDeclarationFragment", "DEL SimpleName: visit", "DEL TextElement:  visitor pattern value", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL TextElement:  ", "DEL ExpressionStatement", "DEL SimpleName: visit", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleType: ASTDivNode", "DEL InfixExpression: !=", "DEL SimpleName: check", "DEL Javadoc", "DEL SimpleName: i", "DEL SimpleType: Object", "DEL InstanceofExpression", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: int", "DEL SimpleName: node", "DEL SimpleName: visit", "DEL SingleVariableDeclaration", "DEL SimpleType: ASTAmbiguous", "DEL SimpleName: start", "DEL SimpleName: accept", "DEL SimpleName: node", "DEL SimpleName: data", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: jjtGetChild", "DEL SingleVariableDeclaration", "DEL SimpleName: jjtAccept", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: visit", "DEL SimpleName: Object", "DEL SimpleName: accept", "DEL SimpleName: accept", "DEL Javadoc", "DEL SimpleName: builder", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL SimpleName: child", "DEL SimpleName: node", "DEL TextElement:  ", "DEL TagElement: @inheritDoc", "DEL ReturnStatement", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL TagElement", "DEL QualifiedName: node.image", "DEL SimpleName: node", "DEL TextElement:  ", "DEL SimpleName: node", "DEL PrefixExpression: ++", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: data", "DEL TextElement:  the node token", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: jjtGetChild", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleType: ASTAndNode", "DEL SimpleName: data", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: ASTUnaryMinusNode", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL SimpleName: builder", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Modifier: public", "DEL TagElement: @inheritDoc", "DEL SimpleName: builder", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: jjtGetNumChildren", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL Javadoc", "DEL TextElement:  ", "DEL StringLiteral: \" || \"", "DEL SimpleType: Object", "DEL TextElement:  the child node", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL NumberLiteral: 1", "DEL TagElement: @inheritDoc", "DEL StringLiteral: \"null\"", "DEL NumberLiteral: 0", "DEL SimpleName: data", "DEL SimpleName: node", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TextElement:  ", "DEL MethodInvocation", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: Object", "DEL StringLiteral: \" == \"", "DEL SimpleName: Object", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SimpleName: ASTBitwiseXorNode", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL TextElement:  ", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: append", "DEL TextElement: Creates a Debugger.", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL VariableDeclarationStatement", "DEL TextElement: Adds a statement node to the rebuilt expression.", "DEL SimpleType: Object", "DEL SimpleName: length", "DEL SimpleName: builder", "DEL Block", "DEL MethodInvocation", "DEL Modifier: public", "DEL StringLiteral: \" && \"", "DEL SimpleName: setLength", "DEL SimpleName: accept", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: prefixChild", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: acceptStatement", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: ASTTernaryNode", "DEL SimpleName: accept", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL StringLiteral: \")\"", "DEL CharacterLiteral: ';'", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: jjtGetParent", "DEL IfStatement", "DEL SimpleName: data", "DEL SimpleName: data", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: node", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL Modifier: public", "DEL SimpleType: ASTAdditiveNode", "DEL SimpleName: jjtGetChild", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \")\"", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL SimpleName: node", "DEL SimpleName: data", "DEL SimpleType: ASTLENode", "DEL SimpleName: data", "DEL Javadoc", "DEL SimpleName: jjtGetNumChildren", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL InfixExpression: <", "DEL SimpleName: jjtGetNumChildren", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: data", "DEL SimpleName: end", "DEL SimpleName: child", "DEL ThrowStatement", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: append", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL TagElement", "DEL ExpressionStatement", "DEL StringLiteral: \") \"", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: paren", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: ASTWhileStatement", "DEL NumberLiteral: 1", "DEL BooleanLiteral: false", "DEL InstanceofExpression", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL TextElement:  The rebuilt expression", "DEL TextElement:  visitor pattern argument", "DEL SimpleType: JexlNode", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleName: JexlNode", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: JexlNode", "DEL PrimitiveType: int", "DEL SimpleName: node", "DEL SimpleName: ASTDivNode", "DEL SimpleName: visit", "DEL SimpleName: accept", "DEL SimpleName: data", "DEL SimpleName: length", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: check", "DEL SimpleName: data", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: i", "DEL Javadoc", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: data", "DEL SimpleName: jjtGetChild", "DEL SimpleType: JexlNode", "DEL SimpleName: node", "DEL SimpleName: visit", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: check", "DEL MethodInvocation", "DEL ForStatement", "DEL SimpleName: cause", "DEL SimpleName: jjtGetNumChildren", "DEL NumberLiteral: 1", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL Modifier: public", "DEL CharacterLiteral: ' '", "DEL Javadoc", "DEL NumberLiteral: 2", "DEL NumberLiteral: 2", "DEL SimpleName: node", "DEL InfixExpression: >", "DEL VariableDeclarationExpression", "DEL TextElement:  ", "DEL TextElement:  The end offset location of the cause in the expression", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL StringLiteral: \"['\\\"\\\\s\\\\\\\\]\"", "DEL SimpleName: builder", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: data", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: Object", "DEL VariableDeclarationExpression", "DEL SimpleName: ParserVisitor", "DEL SimpleName: infixChildren", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: ASTSizeMethod", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: ASTBitwiseAndNode", "DEL SimpleName: data", "DEL SimpleName: num", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: node", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: UnsupportedOperationException", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: int", "DEL TextElement:  ", "DEL SimpleName: builder", "DEL InfixExpression: <", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: child", "DEL MethodInvocation", "DEL Block", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL IfStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: paren", "DEL SimpleType: ASTWhileStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: builder", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SimpleName: node", "DEL InstanceofExpression", "DEL Block", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: ASTArrayLiteral", "DEL TextElement:  ", "DEL SimpleName: paren", "DEL TagElement: @return", "DEL SimpleName: ASTFunctionNode", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL SimpleName: builder", "DEL SimpleName: data", "DEL SimpleName: ASTAmbiguous", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Modifier: public", "DEL SimpleName: find", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL SimpleType: Object", "DEL SimpleName: infixChildren", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL SimpleName: infixChildren", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SimpleName: infixChildren", "DEL TextElement:  2.0", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: data", "DEL SimpleName: child", "DEL VariableDeclarationStatement", "DEL PrefixExpression: ++", "DEL Javadoc", "DEL SimpleType: ASTOrNode", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL SimpleName: cause", "DEL TagElement: @inheritDoc", "DEL SimpleName: data", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: num", "DEL TagElement: @inheritDoc", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL Block", "DEL Block", "DEL Modifier: public", "DEL Block", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL StringLiteral: \"(\"", "DEL IfStatement", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: ASTArrayAccess", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: visit", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL ThisExpression", "DEL SimpleName: img", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL Block", "DEL InfixExpression: >", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleType: ASTNumberLiteral", "DEL TagElement: @inheritDoc", "DEL TagElement: @since", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL SimpleType: ASTIfStatement", "DEL MethodDeclaration", "DEL TextElement:  ", "DEL CharacterLiteral: '('", "DEL InfixExpression: >", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL SimpleName: builder", "DEL NumberLiteral: 1", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: ASTAndNode", "DEL TextElement:  The starting offset location of the cause in the expression", "DEL Block", "DEL StringLiteral: \"unexpected type of node\"", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleType: JexlNode", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: acceptStatement", "DEL Javadoc", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL SimpleName: jjtGetChild", "DEL SimpleName: i", "DEL Javadoc", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL StringLiteral: \".\"", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL SimpleName: num", "DEL SimpleName: jjtGetChild", "DEL SimpleName: start", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: jjtGetChild", "DEL PrefixExpression: ++", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: builder", "DEL TagElement: @since", "DEL SimpleName: Object", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL SimpleName: num", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL SimpleName: Object", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: infixChildren", "DEL SimpleName: image", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: append", "DEL TagElement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: ASTBlock", "DEL SimpleName: append", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL CharacterLiteral: ';'", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL PrefixExpression: ++", "DEL SimpleName: ASTOrNode", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL StringLiteral: \" =~ \"", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL TextElement:  2.1", "DEL Javadoc", "DEL Block", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: visit", "DEL Assignment: =", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: data", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: num", "DEL SimpleName: accept", "DEL Javadoc", "DEL SimpleName: visit", "DEL SimpleType: ASTGTNode", "DEL SimpleName: JexlNode", "DEL SimpleType: Object", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL SimpleName: ASTDivNode", "DEL Modifier: private", "DEL InstanceofExpression", "DEL SimpleName: builder", "DEL TagElement: @inheritDoc", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: infixChildren", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: node", "DEL StringLiteral: \"'\"", "DEL FieldDeclaration", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL StringLiteral: \" <= \"", "DEL SimpleName: jjtGetChild", "DEL SimpleName: append", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL SimpleName: num", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL TextElement:  ", "DEL SimpleName: i", "DEL StringLiteral: \"size(\"", "DEL TagElement: @inheritDoc", "DEL SimpleName: jjtGetChild", "DEL SimpleName: infixChildren", "DEL ReturnStatement", "DEL SimpleName: ASTVar", "DEL TagElement", "DEL Assignment: =", "DEL TagElement", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: jjtGetChild", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: ASTForeachStatement", "DEL SimpleName: Object", "DEL BooleanLiteral: false", "DEL StringLiteral: \" = \"", "DEL SimpleName: node", "DEL SimpleName: data", "DEL SimpleName: data", "DEL SimpleName: append", "DEL SimpleName: num", "DEL SimpleType: ASTBitwiseAndNode", "DEL SimpleName: root", "DEL NumberLiteral: 2", "DEL NumberLiteral: 1", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: data", "DEL StringLiteral: \":\"", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: infix", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: i", "DEL TagElement", "DEL StringLiteral: \"(\"", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: cause", "DEL SimpleName: i", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: start", "DEL SimpleName: image", "DEL InfixExpression: <", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL SimpleName: accept", "DEL SimpleName: append", "DEL SimpleType: Object", "DEL SimpleName: infixChildren", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL MethodDeclaration", "DEL SimpleName: num", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL ThisExpression", "DEL SimpleName: jjtGetNumChildren", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL ForStatement", "DEL SimpleName: node", "DEL SimpleName: Pattern", "DEL SimpleName: ASTNENode", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL StringLiteral: \" & \"", "DEL MethodInvocation", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL TextElement:  ", "DEL StringLiteral: \")\"", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: cause", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: builder", "DEL SimpleName: ASTBitwiseAndNode", "DEL TextElement:  visitor pattern value", "DEL SimpleType: ASTNENode", "DEL ExpressionStatement", "DEL SimpleName: jjtGetChild", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: paren", "DEL TagElement: @inheritDoc", "DEL ForStatement", "DEL SimpleName: builder", "DEL StringLiteral: \" !~ \"", "DEL TextElement:  ", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: ASTSizeFunction", "DEL SimpleName: visit", "DEL SimpleName: ASTConstructorNode", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: append", "DEL SimpleName: root", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ReturnStatement", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: node", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: to the rebuilt expression.", "DEL MethodInvocation", "DEL SimpleName: ASTAssignment", "DEL Block", "DEL SimpleName: visit", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleType: ASTERNode", "DEL TextElement:  the node", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: accept", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: infixChildren", "DEL MethodInvocation", "DEL IfStatement", "DEL TextElement:  the child node token image (may be null)", "DEL InfixExpression: <", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: data", "DEL QualifiedName: node.image", "DEL SimpleName: jjtGetChild", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL Block", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: boolean", "DEL SimpleName: ASTMulNode", "DEL TagElement", "DEL TextElement: Checks if the child of a node using prefix notation is the cause to debug,", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: i", "DEL SimpleName: node", "DEL SimpleType: ASTBlock", "DEL StringLiteral: \" else \"", "DEL MethodDeclaration", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL StringLiteral: \") \"", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Modifier: public", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL InfixExpression: <", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: i", "DEL Javadoc", "DEL BooleanLiteral: false", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationFragment", "DEL SimpleName: builder", "DEL SimpleName: accept", "DEL ThisExpression", "DEL MethodDeclaration", "DEL SimpleName: end", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL SimpleName: node", "DEL MethodInvocation", "DEL StringLiteral: \";\"", "DEL SimpleType: JexlNode", "DEL Javadoc", "DEL Block", "DEL SimpleName: Object", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: builder", "DEL Modifier: public", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleType: ASTMapLiteral", "DEL SimpleName: visit", "DEL ExpressionStatement", "DEL SimpleName: visit", "DEL TextElement:  visitor pattern value", "DEL StringLiteral: \" }\"", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: ASTEQNode", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: num", "DEL SimpleName: node", "DEL Javadoc", "DEL TagElement", "DEL TextElement:  ", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL TextElement: the error.", "DEL SimpleName: Object", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: append", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationExpression", "DEL SimpleName: check", "DEL VariableDeclarationExpression", "DEL NullLiteral", "DEL SimpleName: builder", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL Block", "DEL Modifier: public", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Modifier: public", "DEL TagElement", "DEL SimpleType: ASTEQNode", "DEL PrimitiveType: boolean", "DEL SimpleName: builder", "DEL PrimitiveType: int", "DEL TagElement: @inheritDoc", "DEL StringLiteral: \" >= \"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL Modifier: public", "DEL TagElement: @inheritDoc", "DEL ExpressionStatement", "DEL SimpleType: ASTAdditiveOperator", "DEL SimpleType: ASTMethodNode", "DEL TextElement:  ", "DEL SimpleName: infixChildren", "DEL SimpleName: num", "DEL SimpleName: node", "DEL PrefixExpression: ++", "DEL TextElement:  visitor pattern argument", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: ASTReference", "DEL MethodInvocation", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL SimpleName: builder", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: ASTBitwiseAndNode", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL StringLiteral: \", \"", "DEL SingleVariableDeclaration", "DEL SimpleName: root", "DEL SimpleType: ASTBitwiseComplNode", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL SimpleName: data", "DEL SimpleName: builder", "DEL InfixExpression: >", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL IfStatement", "DEL FieldDeclaration", "DEL BooleanLiteral: false", "DEL SimpleName: data", "DEL InstanceofExpression", "DEL PrimitiveType: int", "DEL StringLiteral: \" ^ \"", "DEL StringLiteral: \"new \"", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL PrefixExpression: ++", "DEL StringLiteral: \", \"", "DEL MethodInvocation", "DEL SimpleName: value", "DEL StringLiteral: \"~\"", "DEL NumberLiteral: 1", "DEL Block", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL TextElement: The cause of the issue to debug. ", "DEL SimpleName: QUOTED_IDENTIFIER", "DEL SimpleName: Object", "DEL ForStatement", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL StringLiteral: \" < \"", "DEL SimpleName: jjtGetChild", "DEL SimpleName: num", "DEL ExpressionStatement", "DEL SimpleType: Pattern", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: paren", "DEL SimpleType: JexlNode", "DEL SimpleName: jjtGetNumChildren", "DEL InfixExpression: <", "DEL InfixExpression: >", "DEL SimpleType: ASTNRNode", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL TagElement", "DEL SimpleName: ASTStringLiteral", "DEL SimpleName: compile", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleName: ASTReturnStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: Object", "DEL StringLiteral: \" != \"", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"{ \"", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL ExpressionStatement", "DEL StringLiteral: \"[\"", "DEL PrefixExpression: ++", "DEL VariableDeclarationFragment", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SimpleType: ASTTernaryNode", "DEL InfixExpression: <", "DEL TagElement", "DEL SimpleName: paren", "DEL TextElement: </p>", "DEL NumberLiteral: 1", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: i", "DEL IfStatement", "DEL InfixExpression: +", "DEL InstanceofExpression", "DEL SimpleName: data", "DEL SimpleName: jjtGetNumChildren", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: child", "DEL MethodInvocation", "DEL Assignment: =", "DEL TagElement", "DEL SimpleName: data", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL NullLiteral", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: SimpleNode", "DEL Modifier: final", "DEL SimpleName: append", "DEL ReturnStatement", "DEL SimpleName: builder", "DEL IfStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL StringLiteral: \"'\"", "DEL SimpleType: Object", "DEL TextElement: adds their representation to the rebuilt expression.", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: data", "DEL StringLiteral: \"? \"", "DEL TagElement: @inheritDoc", "DEL SimpleType: ASTUnaryMinusNode", "DEL SimpleName: visit", "DEL InstanceofExpression", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL SimpleName: Debugger", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL ForStatement", "DEL SimpleName: start", "DEL SimpleName: append", "DEL SimpleName: append", "DEL MethodInvocation", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleName: start", "DEL BooleanLiteral: false", "DEL SimpleName: append", "DEL TagElement: @inheritDoc", "DEL SimpleName: builder", "DEL TagElement: @inheritDoc", "DEL SimpleName: data", "DEL TextElement:  ", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: num", "DEL ExpressionStatement", "DEL SimpleName: JexlNode", "DEL SimpleName: Object", "DEL InfixExpression: >", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: acceptStatement", "DEL MethodDeclaration", "DEL NumberLiteral: 1", "DEL SimpleName: node", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"'\"", "DEL SimpleName: Object", "DEL SimpleName: end", "DEL Javadoc", "DEL SimpleName: accept", "DEL NumberLiteral: 1", "DEL TextElement:  ", "DEL SimpleName: debug", "DEL SimpleName: Object", "DEL VariableDeclarationExpression", "DEL StringLiteral: \"var \"", "DEL SimpleName: i", "DEL NumberLiteral: 1", "DEL SimpleName: append", "DEL SimpleType: String", "DEL SimpleName: JexlNode", "DEL StringLiteral: \"(\"", "DEL Javadoc", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL CharacterLiteral: ':'", "DEL TextElement:  ", "DEL SimpleName: num", "DEL SimpleName: data", "DEL SimpleName: accept", "DEL StringLiteral: \"empty(\"", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: jjtGetChild", "DEL Block", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL TextElement:  the node to rebuilt from", "DEL Modifier: public", "DEL SimpleName: paren", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: num", "DEL Javadoc", "DEL SimpleName: data", "DEL Modifier: public", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL TagElement", "DEL CharacterLiteral: ' '", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TextElement:  ", "DEL MethodInvocation", "DEL SimpleName: data", "DEL Javadoc", "DEL SimpleName: accept", "DEL SimpleName: node", "DEL StringLiteral: \")\"", "DEL SimpleType: ASTMulNode", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SimpleName: node", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: append", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL ReturnStatement", "DEL SimpleName: accept", "DEL SimpleName: paren", "DEL PrefixExpression: ++", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleType: ASTMulNode", "DEL SimpleName: node", "DEL SimpleType: ASTMapEntry", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement:  true if the cause was located, false otherwise", "DEL TextElement:  the child node", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: accept", "DEL MethodInvocation", "DEL SimpleName: jjtGetParent", "DEL Block", "DEL TextElement:  the rebuilt expression", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: data", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: end", "DEL SimpleType: Object", "DEL TextElement: representation to the rebuilt expression.", "DEL ExpressionStatement", "DEL TextElement:  visitor pattern value", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"if (\"", "DEL TextElement:  the child node token", "DEL SimpleName: data", "DEL SimpleName: accept", "DEL SimpleName: data", "DEL Modifier: final", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: ASTLTNode", "DEL TagElement: @inheritDoc", "DEL Block", "DEL SimpleName: node", "DEL SimpleType: ASTBitwiseAndNode", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL StringLiteral: \")\"", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL SimpleName: builder", "DEL SimpleName: num", "DEL Block", "DEL FieldAccess", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL BooleanLiteral: false", "DEL SimpleName: data", "DEL SimpleName: ASTBlock", "DEL SimpleName: visit", "DEL SimpleType: Object", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL Block", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL SimpleName: JexlNode", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL SimpleName: start", "DEL SimpleName: i", "DEL SimpleName: Object", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: img", "DEL Block", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleType: ASTIfStatement", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: first", "DEL SimpleName: Object", "DEL SimpleName: builder", "DEL StringLiteral: \" / \"", "DEL Assignment: =", "DEL SimpleName: JexlNode", "DEL MethodInvocation", "DEL SimpleName: ASTGTNode", "DEL SimpleName: Object", "DEL CharacterLiteral: ';'", "DEL IfStatement", "DEL SimpleType: ASTBitwiseOrNode", "DEL SimpleName: cause", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: ASTFalseNode", "DEL SimpleName: prefixChild", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL InfixExpression: <", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL TextElement:  ", "DEL SimpleName: node", "DEL TextElement:  ", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL TextElement: Checks if the children of a node using infix notation is the cause to debug,", "DEL VariableDeclarationFragment", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: end", "DEL SimpleType: ASTBitwiseXorNode", "DEL TagElement: @return", "DEL SimpleName: length", "DEL SimpleName: node", "DEL SimpleName: data", "DEL SimpleName: ASTForeachStatement", "DEL TagElement: @inheritDoc", "DEL ExpressionStatement", "DEL SimpleName: image", "DEL SimpleName: i", "DEL SimpleName: i", "DEL StringLiteral: \"\\\\'\"", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: child", "DEL IfStatement", "DEL SimpleName: data", "DEL Block", "DEL CharacterLiteral: ')'", "DEL SimpleName: node", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: jjtGetChild", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: append", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: ASTWhileStatement", "DEL SimpleName: value", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL ForStatement", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleType: ParserVisitor", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL Block", "DEL SimpleName: builder", "DEL SimpleName: paren", "DEL TextElement: Helps pinpoint the cause of problems in expressions that fail during evaluation.", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL TextElement:  the node to debug", "DEL NullLiteral", "DEL SimpleName: append", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL Javadoc", "DEL SimpleName: ASTModNode", "DEL SimpleName: accept", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: image", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SimpleName: builder", "DEL SimpleName: paren", "DEL Modifier: public", "DEL VariableDeclarationExpression", "DEL SimpleName: node", "DEL SimpleName: accept", "DEL SimpleName: acceptStatement", "DEL StringLiteral: \" ]\"", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL TagElement", "DEL TextElement:  ", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: JexlNode", "DEL SimpleType: ASTEmptyFunction", "DEL InfixExpression: +", "DEL SimpleType: JexlNode", "DEL SimpleName: accept", "DEL Javadoc", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL StringLiteral: \"]\"", "DEL SimpleName: jjtGetChild", "DEL SimpleName: data", "DEL Block", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL ForStatement", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleName: append", "DEL TextElement:  ", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: infixChildren", "DEL Javadoc", "DEL Block", "DEL NumberLiteral: 2", "DEL SimpleName: builder", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: end", "DEL SimpleName: jjtGetChild", "DEL ForStatement", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: jjtGetNumChildren", "DEL StringLiteral: \"\\\\'\"", "DEL Modifier: public", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Javadoc", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL SimpleName: data", "DEL SimpleName: first", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL NullLiteral", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Javadoc", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL SimpleName: ASTMulNode", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"(\"", "DEL SimpleName: jjtGetParent", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: visit", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ThisExpression", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: accept", "DEL SimpleName: JexlNode", "DEL ReturnStatement", "DEL SimpleName: visit", "DEL SimpleName: append", "DEL TextElement: The starting character location offset of the cause in the builder. ", "DEL ReturnStatement", "DEL PrefixExpression: ++", "DEL SimpleName: i", "DEL SimpleName: node", "DEL TextElement:  ", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL ThisExpression", "DEL StringLiteral: \"(\"", "DEL SimpleName: ASTSizeMethod", "DEL TagElement: @return", "DEL SimpleName: node", "DEL StringLiteral: \"-\"", "DEL SimpleName: ASTAndNode", "DEL SimpleName: ASTBitwiseComplNode", "DEL SimpleName: data", "DEL TypeDeclaration: class", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL SimpleName: data", "DEL SimpleType: ASTIdentifier", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: visit", "DEL TagElement: @param", "DEL SimpleName: ASTIdentifier", "DEL SimpleType: Object", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL StringLiteral: \"for(\"", "DEL SimpleName: node", "DEL InfixExpression: !=", "DEL SimpleName: paren", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SimpleName: visit", "DEL Block", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL StringLiteral: \" | \"", "DEL SimpleName: append", "DEL SimpleName: i", "DEL StringLiteral: \"!\"", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL SimpleName: visit", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: ASTFunctionNode", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL TextElement:  the child node", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleType: ASTAssignment", "DEL MethodInvocation", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: child", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL MethodDeclaration", "DEL SimpleName: cause", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Assignment: =", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: value", "DEL SimpleName: builder", "DEL SimpleName: data", "DEL MethodInvocation", "DEL TextElement:  ", "DEL SimpleName: append", "DEL SimpleName: data", "DEL SimpleName: ASTFalseNode", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL IfStatement", "DEL SimpleName: i", "DEL Assignment: =", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL StringLiteral: \" : \"", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: ASTJexlScript", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleType: ASTArrayAccess", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL SimpleName: append", "DEL ReturnStatement", "DEL TagElement", "DEL StringLiteral: \"false\"", "DEL SingleVariableDeclaration", "DEL SimpleName: num", "DEL SimpleName: infixChildren", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Pattern", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL SimpleName: jjtGetParent", "DEL IfStatement", "DEL SimpleName: i", "DEL SimpleType: String", "DEL SimpleName: node", "DEL TextElement: It rebuilds an expression string from the tree and the start/end offsets of the cause", "DEL TextElement: This implies that exceptions during evaluation do allways carry the node that's causing", "DEL NumberLiteral: 1", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL SimpleName: jjtGetParent", "DEL StringLiteral: \"unexpected type of node\"", "DEL TagElement", "DEL ReturnStatement", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL TextElement: <p>", "DEL SimpleName: visit", "DEL SimpleName: data", "DEL BooleanLiteral: false", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: jjtGetNumChildren", "DEL PrimitiveType: int", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: ASTIfStatement", "DEL SimpleType: ASTReferenceExpression", "DEL SimpleName: infixChildren", "DEL SimpleName: builder", "DEL SimpleName: child", "DEL InstanceofExpression", "DEL SimpleName: jjtGetChild", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleName: child", "DEL ExpressionStatement", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: QUOTED_IDENTIFIER", "DEL TagElement", "DEL NumberLiteral: 2", "DEL SimpleType: Object", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: accept", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: ASTReferenceExpression", "DEL TagElement", "DEL MethodInvocation", "DEL StringLiteral: \")\"", "DEL SimpleType: Object", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SimpleName: visit", "DEL Modifier: public", "DEL SimpleName: i", "DEL SimpleName: builder", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL Block", "DEL TagElement", "DEL TagElement: @return", "DEL SimpleName: infixChildren", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: accept", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL Javadoc", "DEL SimpleName: node", "DEL Modifier: public", "DEL SimpleName: start", "DEL TagElement: @inheritDoc", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL SimpleName: replace", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL TextElement:  ", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL Block", "DEL VariableDeclarationExpression", "DEL ReturnStatement", "DEL SimpleName: builder", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL SimpleName: start", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleType: ASTSizeFunction", "DEL ForStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL TextElement:  ", "DEL BooleanLiteral: false", "DEL Assignment: =", "DEL StringLiteral: \" }\"", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: JexlNode", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: child", "DEL SimpleName: accept", "DEL SimpleName: visit", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL TagElement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: ASTLTNode", "DEL SimpleName: visit", "DEL SimpleName: append", "DEL SimpleName: visit", "DEL NumberLiteral: 0", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: String", "DEL StringLiteral: \" > \"", "DEL SimpleName: jjtGetChild", "DEL SimpleName: data", "DEL SimpleName: data", "DEL TagElement: @param", "DEL SimpleName: ASTGENode", "DEL SimpleType: ASTForeachStatement", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: jjtAccept", "DEL SimpleName: cause", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: node", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: accept", "DEL Javadoc", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL SimpleName: accept", "DEL VariableDeclarationExpression", "DEL TextElement:  visitor pattern value", "DEL SimpleName: append", "DEL SimpleName: data", "DEL SimpleName: i", "DEL SimpleName: child", "DEL MethodDeclaration", "DEL TagElement", "DEL ExpressionStatement", "DEL TextElement:  ", "DEL Block", "DEL SimpleName: num", "DEL SimpleType: ASTReturnStatement", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL SimpleName: data", "DEL InfixExpression: <", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: accept", "DEL SimpleName: i", "DEL SimpleName: node", "DEL SimpleName: accept", "DEL NumberLiteral: 1", "DEL TextElement:  ", "DEL SimpleName: builder", "DEL SimpleType: Object", "DEL SimpleName: replace", "DEL ExpressionStatement", "DEL SimpleType: JexlNode", "DEL SimpleName: Object", "DEL SimpleName: accept", "DEL Modifier: public", "DEL StringLiteral: \"(\"", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleName: end", "DEL Javadoc", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \", \"", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL Modifier: public", "DEL SimpleName: jjtGetChild", "DEL NumberLiteral: 0", "DEL SimpleName: ASTERNode", "DEL StringLiteral: \" * \"", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleName: append", "DEL SimpleName: visit", "DEL SimpleType: ASTGENode", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: node", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: ASTNotNode", "DEL SimpleName: node", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL Block", "DEL IfStatement", "DEL SimpleType: ASTStringLiteral", "DEL SimpleType: Object", "DEL InfixExpression: <", "DEL IfStatement", "DEL TagElement", "DEL ReturnStatement", "DEL TextElement: The builder to compose messages. ", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleName: jjtGetChild", "DEL Block", "DEL SimpleName: data", "DEL TagElement", "DEL SimpleName: num", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: append", "DEL StringLiteral: \"]\"", "DEL SimpleName: accept", "DEL Block", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL TextElement: Checks if a child node is the cause to debug &amp; adds its representation", "DEL SimpleName: prefix", "DEL SimpleName: ASTLENode", "DEL SimpleName: node", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: ASTMapEntry", "DEL TextElement:  ", "DEL VariableDeclarationStatement", "DEL SimpleName: data", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL TagElement", "DEL IfStatement", "DEL VariableDeclarationExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: num", "DEL InfixExpression: <", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: ASTReference", "DEL InfixExpression: ==", "DEL SimpleName: builder", "DEL TextElement: Rebuilds an expression from a Jexl node.", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL SimpleName: matcher", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleType: SimpleNode", "DEL SimpleName: data", "DEL SimpleName: i", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: data", "DEL TextElement:  the child node", "DEL MethodInvocation", "DEL SimpleType: JexlNode", "DEL SimpleName: Object", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: data", "DEL SimpleName: end", "DEL SimpleName: visit", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: append", "DEL StringLiteral: \"size()\"", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL TagElement", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL MethodInvocation", "DEL StringLiteral: \")\"", "DEL Block", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: infixChildren", "DEL SimpleName: node", "DEL TagElement: @return", "DEL SimpleName: paren", "DEL SimpleName: StringBuilder", "DEL TagElement", "DEL SimpleName: builder", "DEL SimpleName: Object", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: Object", "DEL SimpleName: infix", "DEL SimpleName: node", "DEL SimpleType: ASTBitwiseAndNode", "DEL TextElement:  ", "DEL SimpleName: builder", "DEL NumberLiteral: 1", "DEL SimpleName: JexlNode", "DEL TagElement: @param", "DEL SimpleName: data", "DEL Modifier: public", "DEL SimpleType: StringBuilder", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: i", "DEL NumberLiteral: 1", "DEL SimpleName: data", "DEL SimpleName: i", "DEL SimpleName: num", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleType: ASTForeachStatement", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL SimpleName: num", "DEL TagElement: @inheritDoc", "DEL ExpressionStatement", "DEL TextElement:  ", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL Block", "DEL StringLiteral: \"while (\"", "DEL TagElement", "DEL TagElement: @inheritDoc"]}]}}, {"Debugger_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.regex.Pattern(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveNode(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveOperator(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAmbiguous(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAndNode(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTArrayAccess(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTArrayLiteral(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAssignment(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseAndNode(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseComplNode(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseOrNode(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseXorNode(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBlock(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTConstructorNode(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTDivNode(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTEQNode(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTERNode(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTEmptyFunction(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTFalseNode(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTForeachStatement(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTFunctionNode(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTGENode(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTGTNode(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTIdentifier(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTIfStatement(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTLENode(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTLTNode(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMapEntry(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMapLiteral(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMethodNode(62)", "Delete ImportDeclaration(63)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTModNode(64)", "Delete ImportDeclaration(65)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMulNode(66)", "Delete ImportDeclaration(67)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNENode(68)", "Delete ImportDeclaration(69)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNRNode(70)", "Delete ImportDeclaration(71)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNotNode(72)", "Delete ImportDeclaration(73)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNullLiteral(74)", "Delete ImportDeclaration(75)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNumberLiteral(76)", "Delete ImportDeclaration(77)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTOrNode(78)", "Delete ImportDeclaration(79)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReference(80)", "Delete ImportDeclaration(81)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReferenceExpression(82)", "Delete ImportDeclaration(83)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReturnStatement(84)", "Delete ImportDeclaration(85)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTSizeFunction(86)", "Delete ImportDeclaration(87)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTSizeMethod(88)", "Delete ImportDeclaration(89)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTStringLiteral(90)", "Delete ImportDeclaration(91)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTTernaryNode(92)", "Delete ImportDeclaration(93)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTTrueNode(94)", "Delete ImportDeclaration(95)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTUnaryMinusNode(96)", "Delete ImportDeclaration(97)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTVar(98)", "Delete ImportDeclaration(99)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTWhileStatement(100)", "Delete ImportDeclaration(101)", "Delete QualifiedName: org.apache.commons.jexl2.parser.JexlNode(102)", "Delete ImportDeclaration(103)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ParserVisitor(104)", "Delete ImportDeclaration(105)", "Delete QualifiedName: org.apache.commons.jexl2.parser.SimpleNode(106)", "Delete ImportDeclaration(107)", "Delete TextElement: Helps pinpoint the cause of problems in expressions that fail during evaluation.(108)", "Delete TextElement: <p>(109)", "Delete TextElement: It rebuilds an expression string from the tree and the start/end offsets of the cause(110)", "Delete TextElement: in that string.(111)", "Delete TextElement: </p>(112)", "Delete TextElement: This implies that exceptions during evaluation do allways carry the node that's causing(113)", "Delete TextElement: the error.(114)", "Delete TagElement(115)", "Delete TextElement:  2.0(116)", "Delete TagElement: @since(117)", "Delete Javadoc(118)", "Delete Modifier: final(119)", "Delete SimpleName: Debugger(120)", "Delete SimpleName: ParserVisitor(121)", "Delete SimpleType: ParserVisitor(122)", "Delete TextElement: The builder to compose messages. (123)", "Delete TagElement(124)", "Delete Javadoc(125)", "Delete Modifier: private(126)", "Delete Modifier: final(127)", "Delete SimpleName: StringBuilder(128)", "Delete SimpleType: StringBuilder(129)", "Delete SimpleName: builder(130)", "Delete VariableDeclarationFragment(131)", "Delete FieldDeclaration(132)", "Delete TextElement: The cause of the issue to debug. (133)", "Delete TagElement(134)", "Delete Javadoc(135)", "Delete Modifier: private(136)", "Delete SimpleName: JexlNode(137)", "Delete SimpleType: JexlNode(138)", "Delete SimpleName: cause(139)", "Delete VariableDeclarationFragment(140)", "Delete FieldDeclaration(141)", "Delete TextElement: The starting character location offset of the cause in the builder. (142)", "Delete TagElement(143)", "Delete Javadoc(144)", "Delete Modifier: private(145)", "Delete PrimitiveType: int(146)", "Delete SimpleName: start(147)", "Delete VariableDeclarationFragment(148)", "Delete FieldDeclaration(149)", "Delete TextElement: The ending character location offset of the cause in the builder. (150)", "Delete TagElement(151)", "Delete Javadoc(152)", "Delete Modifier: private(153)", "Delete PrimitiveType: int(154)", "Delete SimpleName: end(155)", "Delete VariableDeclarationFragment(156)", "Delete FieldDeclaration(157)", "Delete TextElement: Creates a Debugger.(158)", "Delete TagElement(159)", "Delete Javadoc(160)", "Delete SimpleName: Debugger(161)", "Delete SimpleName: builder(162)", "Delete SimpleName: StringBuilder(163)", "Delete SimpleType: StringBuilder(164)", "Delete ClassInstanceCreation(165)", "Delete Assignment: =(166)", "Delete ExpressionStatement(167)", "Delete SimpleName: cause(168)", "Delete NullLiteral(169)", "Delete Assignment: =(170)", "Delete ExpressionStatement(171)", "Delete SimpleName: start(172)", "Delete NumberLiteral: 0(173)", "Delete Assignment: =(174)", "Delete ExpressionStatement(175)", "Delete SimpleName: end(176)", "Delete NumberLiteral: 0(177)", "Delete Assignment: =(178)", "Delete ExpressionStatement(179)", "Delete Block(180)", "Delete MethodDeclaration(181)", "Delete TextElement: Seeks the location of an error cause (a node) in an expression.(182)", "Delete TagElement(183)", "Delete SimpleName: node(184)", "Delete TextElement:  the node to debug(185)", "Delete TagElement: @param(186)", "Delete TextElement:  true if the cause was located, false otherwise(187)", "Delete TagElement: @return(188)", "Delete Javadoc(189)", "Delete Modifier: public(190)", "Delete PrimitiveType: boolean(191)", "Delete SimpleName: debug(192)", "Delete SimpleName: JexlNode(193)", "Delete SimpleType: JexlNode(194)", "Delete SimpleName: node(195)", "Delete SingleVariableDeclaration(196)", "Delete SimpleName: start(197)", "Delete NumberLiteral: 0(198)", "Delete Assignment: =(199)", "Delete ExpressionStatement(200)", "Delete SimpleName: end(201)", "Delete NumberLiteral: 0(202)", "Delete Assignment: =(203)", "Delete ExpressionStatement(204)", "Delete SimpleName: node(205)", "Delete NullLiteral(206)", "Delete InfixExpression: !=(207)", "Delete SimpleName: builder(208)", "Delete SimpleName: setLength(209)", "Delete NumberLiteral: 0(210)", "Delete MethodInvocation(211)", "Delete ExpressionStatement(212)", "Delete ThisExpression(213)", "Delete SimpleName: cause(214)", "Delete FieldAccess(215)", "Delete SimpleName: node(216)", "Delete Assignment: =(217)", "Delete ExpressionStatement(218)", "Delete SimpleName: JexlNode(219)", "Delete SimpleType: JexlNode(220)", "Delete SimpleName: root(221)", "Delete SimpleName: node(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete SimpleName: root(225)", "Delete SimpleName: jjtGetParent(226)", "Delete MethodInvocation(227)", "Delete NullLiteral(228)", "Delete InfixExpression: !=(229)", "Delete SimpleName: root(230)", "Delete SimpleName: root(231)", "Delete SimpleName: jjtGetParent(232)", "Delete MethodInvocation(233)", "Delete Assignment: =(234)", "Delete ExpressionStatement(235)", "Delete Block(236)", "Delete WhileStatement(237)", "Delete SimpleName: root(238)", "Delete SimpleName: jjtAccept(239)", "Delete ThisExpression(240)", "Delete NullLiteral(241)", "Delete MethodInvocation(242)", "Delete ExpressionStatement(243)", "Delete Block(244)", "Delete IfStatement(245)", "Delete SimpleName: end(246)", "Delete NumberLiteral: 0(247)", "Delete InfixExpression: >(248)", "Delete ReturnStatement(249)", "Delete Block(250)", "Delete MethodDeclaration(251)", "Delete TextElement:  The rebuilt expression(252)", "Delete TagElement: @return(253)", "Delete Javadoc(254)", "Delete Modifier: public(255)", "Delete SimpleName: String(256)", "Delete SimpleType: String(257)", "Delete SimpleName: data(258)", "Delete SimpleName: builder(259)", "Delete SimpleName: toString(260)", "Delete MethodInvocation(261)", "Delete ReturnStatement(262)", "Delete Block(263)", "Delete MethodDeclaration(264)", "Delete TextElement: Rebuilds an expression from a Jexl node.(265)", "Delete TagElement(266)", "Delete SimpleName: node(267)", "Delete TextElement:  the node to rebuilt from(268)", "Delete TagElement: @param(269)", "Delete TextElement:  the rebuilt expression(270)", "Delete TagElement: @return(271)", "Delete TextElement:  2.1(272)", "Delete TagElement: @since(273)", "Delete Javadoc(274)", "Delete Modifier: public(275)", "Delete SimpleName: String(276)", "Delete SimpleType: String(277)", "Delete SimpleName: data(278)", "Delete SimpleName: JexlNode(279)", "Delete SimpleType: JexlNode(280)", "Delete SimpleName: node(281)", "Delete SingleVariableDeclaration(282)", "Delete SimpleName: start(283)", "Delete NumberLiteral: 0(284)", "Delete Assignment: =(285)", "Delete ExpressionStatement(286)", "Delete SimpleName: end(287)", "Delete NumberLiteral: 0(288)", "Delete Assignment: =(289)", "Delete ExpressionStatement(290)", "Delete SimpleName: node(291)", "Delete NullLiteral(292)", "Delete InfixExpression: !=(293)", "Delete SimpleName: builder(294)", "Delete SimpleName: setLength(295)", "Delete NumberLiteral: 0(296)", "Delete MethodInvocation(297)", "Delete ExpressionStatement(298)", "Delete ThisExpression(299)", "Delete SimpleName: cause(300)", "Delete FieldAccess(301)", "Delete SimpleName: node(302)", "Delete Assignment: =(303)", "Delete ExpressionStatement(304)", "Delete SimpleName: node(305)", "Delete SimpleName: jjtAccept(306)", "Delete ThisExpression(307)", "Delete NullLiteral(308)", "Delete MethodInvocation(309)", "Delete ExpressionStatement(310)", "Delete Block(311)", "Delete IfStatement(312)", "Delete SimpleName: builder(313)", "Delete SimpleName: toString(314)", "Delete MethodInvocation(315)", "Delete ReturnStatement(316)", "Delete Block(317)", "Delete MethodDeclaration(318)", "Delete TextElement:  The starting offset location of the cause in the expression(319)", "Delete TagElement: @return(320)", "Delete Javadoc(321)", "Delete Modifier: public(322)", "Delete PrimitiveType: int(323)", "Delete SimpleName: start(324)", "Delete SimpleName: start(325)", "Delete ReturnStatement(326)", "Delete Block(327)", "Delete MethodDeclaration(328)", "Delete TextElement:  The end offset location of the cause in the expression(329)", "Delete TagElement: @return(330)", "Delete Javadoc(331)", "Delete Modifier: public(332)", "Delete PrimitiveType: int(333)", "Delete SimpleName: end(334)", "Delete SimpleName: end(335)", "Delete ReturnStatement(336)", "Delete Block(337)", "Delete MethodDeclaration(338)", "Delete TextElement: Checks if a child node is the cause to debug &amp; adds its representation(339)", "Delete TextElement: to the rebuilt expression.(340)", "Delete TagElement(341)", "Delete SimpleName: node(342)", "Delete TextElement:  the child node(343)", "Delete TagElement: @param(344)", "Delete SimpleName: data(345)", "Delete TextElement:  visitor pattern argument(346)", "Delete TagElement: @param(347)", "Delete TextElement:  visitor pattern value(348)", "Delete TagElement: @return(349)", "Delete Javadoc(350)", "Delete Modifier: private(351)", "Delete SimpleName: Object(352)", "Delete SimpleType: Object(353)", "Delete SimpleName: accept(354)", "Delete SimpleName: JexlNode(355)", "Delete SimpleType: JexlNode(356)", "Delete SimpleName: node(357)", "Delete SingleVariableDeclaration(358)", "Delete SimpleName: Object(359)", "Delete SimpleType: Object(360)", "Delete SimpleName: data(361)", "Delete SingleVariableDeclaration(362)", "Delete SimpleName: node(363)", "Delete SimpleName: cause(364)", "Delete InfixExpression: ==(365)", "Delete SimpleName: start(366)", "Delete SimpleName: builder(367)", "Delete SimpleName: length(368)", "Delete MethodInvocation(369)", "Delete Assignment: =(370)", "Delete ExpressionStatement(371)", "Delete Block(372)", "Delete IfStatement(373)", "Delete SimpleName: Object(374)", "Delete SimpleType: Object(375)", "Delete SimpleName: value(376)", "Delete SimpleName: node(377)", "Delete SimpleName: jjtAccept(378)", "Delete ThisExpression(379)", "Delete SimpleName: data(380)", "Delete MethodInvocation(381)", "Delete VariableDeclarationFragment(382)", "Delete VariableDeclarationStatement(383)", "Delete SimpleName: node(384)", "Delete SimpleName: cause(385)", "Delete InfixExpression: ==(386)", "Delete SimpleName: end(387)", "Delete SimpleName: builder(388)", "Delete SimpleName: length(389)", "Delete MethodInvocation(390)", "Delete Assignment: =(391)", "Delete ExpressionStatement(392)", "Delete Block(393)", "Delete IfStatement(394)", "Delete SimpleName: value(395)", "Delete ReturnStatement(396)", "Delete Block(397)", "Delete MethodDeclaration(398)", "Delete TextElement: Adds a statement node to the rebuilt expression.(399)", "Delete TagElement(400)", "Delete SimpleName: child(401)", "Delete TextElement:  the child node(402)", "Delete TagElement: @param(403)", "Delete SimpleName: data(404)", "Delete TextElement:  visitor pattern argument(405)", "Delete TagElement: @param(406)", "Delete TextElement:  visitor pattern value(407)", "Delete TagElement: @return(408)", "Delete Javadoc(409)", "Delete Modifier: private(410)", "Delete SimpleName: Object(411)", "Delete SimpleType: Object(412)", "Delete SimpleName: acceptStatement(413)", "Delete SimpleName: JexlNode(414)", "Delete SimpleType: JexlNode(415)", "Delete SimpleName: child(416)", "Delete SingleVariableDeclaration(417)", "Delete SimpleName: Object(418)", "Delete SimpleType: Object(419)", "Delete SimpleName: data(420)", "Delete SingleVariableDeclaration(421)", "Delete SimpleName: Object(422)", "Delete SimpleType: Object(423)", "Delete SimpleName: value(424)", "Delete SimpleName: accept(425)", "Delete SimpleName: child(426)", "Delete SimpleName: data(427)", "Delete MethodInvocation(428)", "Delete VariableDeclarationFragment(429)", "Delete VariableDeclarationStatement(430)", "Delete SimpleName: child(431)", "Delete SimpleName: ASTBlock(432)", "Delete SimpleType: ASTBlock(433)", "Delete InstanceofExpression(434)", "Delete SimpleName: child(435)", "Delete SimpleName: ASTIfStatement(436)", "Delete SimpleType: ASTIfStatement(437)", "Delete InstanceofExpression(438)", "Delete SimpleName: child(439)", "Delete SimpleName: ASTForeachStatement(440)", "Delete SimpleType: ASTForeachStatement(441)", "Delete InstanceofExpression(442)", "Delete SimpleName: child(443)", "Delete SimpleName: ASTWhileStatement(444)", "Delete SimpleType: ASTWhileStatement(445)", "Delete InstanceofExpression(446)", "Delete InfixExpression: ||(447)", "Delete SimpleName: value(448)", "Delete ReturnStatement(449)", "Delete Block(450)", "Delete IfStatement(451)", "Delete SimpleName: builder(452)", "Delete SimpleName: append(453)", "Delete StringLiteral: \";\"(454)", "Delete MethodInvocation(455)", "Delete ExpressionStatement(456)", "Delete SimpleName: value(457)", "Delete ReturnStatement(458)", "Delete Block(459)", "Delete MethodDeclaration(460)", "Delete TextElement: Checks if a terminal node is the the cause to debug &amp; adds its(461)", "Delete TextElement: representation to the rebuilt expression.(462)", "Delete TagElement(463)", "Delete SimpleName: node(464)", "Delete TextElement:  the child node(465)", "Delete TagElement: @param(466)", "Delete SimpleName: image(467)", "Delete TextElement:  the child node token image (may be null)(468)", "Delete TagElement: @param(469)", "Delete SimpleName: data(470)", "Delete TextElement:  visitor pattern argument(471)", "Delete TagElement: @param(472)", "Delete TextElement:  visitor pattern value(473)", "Delete TagElement: @return(474)", "Delete Javadoc(475)", "Delete Modifier: private(476)", "Delete SimpleName: Object(477)", "Delete SimpleType: Object(478)", "Delete SimpleName: check(479)", "Delete SimpleName: JexlNode(480)", "Delete SimpleType: JexlNode(481)", "Delete SimpleName: node(482)", "Delete SingleVariableDeclaration(483)", "Delete SimpleName: String(484)", "Delete SimpleType: String(485)", "Delete SimpleName: image(486)", "Delete SingleVariableDeclaration(487)", "Delete SimpleName: Object(488)", "Delete SimpleType: Object(489)", "Delete SimpleName: data(490)", "Delete SingleVariableDeclaration(491)", "Delete SimpleName: node(492)", "Delete SimpleName: cause(493)", "Delete InfixExpression: ==(494)", "Delete SimpleName: start(495)", "Delete SimpleName: builder(496)", "Delete SimpleName: length(497)", "Delete MethodInvocation(498)", "Delete Assignment: =(499)", "Delete ExpressionStatement(500)", "Delete Block(501)", "Delete IfStatement(502)", "Delete SimpleName: image(503)", "Delete NullLiteral(504)", "Delete InfixExpression: !=(505)", "Delete SimpleName: builder(506)", "Delete SimpleName: append(507)", "Delete SimpleName: image(508)", "Delete MethodInvocation(509)", "Delete ExpressionStatement(510)", "Delete Block(511)", "Delete SimpleName: builder(512)", "Delete SimpleName: append(513)", "Delete SimpleName: node(514)", "Delete SimpleName: toString(515)", "Delete MethodInvocation(516)", "Delete MethodInvocation(517)", "Delete ExpressionStatement(518)", "Delete Block(519)", "Delete IfStatement(520)", "Delete SimpleName: node(521)", "Delete SimpleName: cause(522)", "Delete InfixExpression: ==(523)", "Delete SimpleName: end(524)", "Delete SimpleName: builder(525)", "Delete SimpleName: length(526)", "Delete MethodInvocation(527)", "Delete Assignment: =(528)", "Delete ExpressionStatement(529)", "Delete Block(530)", "Delete IfStatement(531)", "Delete SimpleName: data(532)", "Delete ReturnStatement(533)", "Delete Block(534)", "Delete MethodDeclaration(535)", "Delete TextElement: Checks if the children of a node using infix notation is the cause to debug,(536)", "Delete TextElement: adds their representation to the rebuilt expression.(537)", "Delete TagElement(538)", "Delete SimpleName: node(539)", "Delete TextElement:  the child node(540)", "Delete TagElement: @param(541)", "Delete SimpleName: infix(542)", "Delete TextElement:  the child node token(543)", "Delete TagElement: @param(544)", "Delete SimpleName: paren(545)", "Delete TextElement:  whether the child should be parenthesized(546)", "Delete TagElement: @param(547)", "Delete SimpleName: data(548)", "Delete TextElement:  visitor pattern argument(549)", "Delete TagElement: @param(550)", "Delete TextElement:  visitor pattern value(551)", "Delete TagElement: @return(552)", "Delete Javadoc(553)", "Delete Modifier: private(554)", "Delete SimpleName: Object(555)", "Delete SimpleType: Object(556)", "Delete SimpleName: infixChildren(557)", "Delete SimpleName: JexlNode(558)", "Delete SimpleType: JexlNode(559)", "Delete SimpleName: node(560)", "Delete SingleVariableDeclaration(561)", "Delete SimpleName: String(562)", "Delete SimpleType: String(563)", "Delete SimpleName: infix(564)", "Delete SingleVariableDeclaration(565)", "Delete PrimitiveType: boolean(566)", "Delete SimpleName: paren(567)", "Delete SingleVariableDeclaration(568)", "Delete SimpleName: Object(569)", "Delete SimpleType: Object(570)", "Delete SimpleName: data(571)", "Delete SingleVariableDeclaration(572)", "Delete PrimitiveType: int(573)", "Delete SimpleName: num(574)", "Delete SimpleName: node(575)", "Delete SimpleName: jjtGetNumChildren(576)", "Delete MethodInvocation(577)", "Delete VariableDeclarationFragment(578)", "Delete VariableDeclarationStatement(579)", "Delete SimpleName: paren(580)", "Delete SimpleName: builder(581)", "Delete SimpleName: append(582)", "Delete StringLiteral: \"(\"(583)", "Delete MethodInvocation(584)", "Delete ExpressionStatement(585)", "Delete Block(586)", "Delete IfStatement(587)", "Delete PrimitiveType: int(588)", "Delete SimpleName: i(589)", "Delete NumberLiteral: 0(590)", "Delete VariableDeclarationFragment(591)", "Delete VariableDeclarationExpression(592)", "Delete SimpleName: i(593)", "Delete SimpleName: num(594)", "Delete InfixExpression: <(595)", "Delete SimpleName: i(596)", "Delete PrefixExpression: ++(597)", "Delete SimpleName: i(598)", "Delete NumberLiteral: 0(599)", "Delete InfixExpression: >(600)", "Delete SimpleName: builder(601)", "Delete SimpleName: append(602)", "Delete SimpleName: infix(603)", "Delete MethodInvocation(604)", "Delete ExpressionStatement(605)", "Delete Block(606)", "Delete IfStatement(607)", "Delete SimpleName: accept(608)", "Delete SimpleName: node(609)", "Delete SimpleName: jjtGetChild(610)", "Delete SimpleName: i(611)", "Delete MethodInvocation(612)", "Delete SimpleName: data(613)", "Delete MethodInvocation(614)", "Delete ExpressionStatement(615)", "Delete Block(616)", "Delete ForStatement(617)", "Delete SimpleName: paren(618)", "Delete SimpleName: builder(619)", "Delete SimpleName: append(620)", "Delete StringLiteral: \")\"(621)", "Delete MethodInvocation(622)", "Delete ExpressionStatement(623)", "Delete Block(624)", "Delete IfStatement(625)", "Delete SimpleName: data(626)", "Delete ReturnStatement(627)", "Delete Block(628)", "Delete MethodDeclaration(629)", "Delete TextElement: Checks if the child of a node using prefix notation is the cause to debug,(630)", "Delete TextElement: adds their representation to the rebuilt expression.(631)", "Delete TagElement(632)", "Delete SimpleName: node(633)", "Delete TextElement:  the node(634)", "Delete TagElement: @param(635)", "Delete SimpleName: prefix(636)", "Delete TextElement:  the node token(637)", "Delete TagElement: @param(638)", "Delete SimpleName: data(639)", "Delete TextElement:  visitor pattern argument(640)", "Delete TagElement: @param(641)", "Delete TextElement:  visitor pattern value(642)", "Delete TagElement: @return(643)", "Delete Javadoc(644)", "Delete Modifier: private(645)", "Delete SimpleName: Object(646)", "Delete SimpleType: Object(647)", "Delete SimpleName: prefixChild(648)", "Delete SimpleName: JexlNode(649)", "Delete SimpleType: JexlNode(650)", "Delete SimpleName: node(651)", "Delete SingleVariableDeclaration(652)", "Delete SimpleName: String(653)", "Delete SimpleType: String(654)", "Delete SimpleName: prefix(655)", "Delete SingleVariableDeclaration(656)", "Delete SimpleName: Object(657)", "Delete SimpleType: Object(658)", "Delete SimpleName: data(659)", "Delete SingleVariableDeclaration(660)", "Delete PrimitiveType: boolean(661)", "Delete SimpleName: paren(662)", "Delete SimpleName: node(663)", "Delete SimpleName: jjtGetChild(664)", "Delete NumberLiteral: 0(665)", "Delete MethodInvocation(666)", "Delete SimpleName: jjtGetNumChildren(667)", "Delete MethodInvocation(668)", "Delete NumberLiteral: 1(669)", "Delete InfixExpression: >(670)", "Delete VariableDeclarationFragment(671)", "Delete VariableDeclarationStatement(672)", "Delete SimpleName: builder(673)", "Delete SimpleName: append(674)", "Delete SimpleName: prefix(675)", "Delete MethodInvocation(676)", "Delete ExpressionStatement(677)", "Delete SimpleName: paren(678)", "Delete SimpleName: builder(679)", "Delete SimpleName: append(680)", "Delete StringLiteral: \"(\"(681)", "Delete MethodInvocation(682)", "Delete ExpressionStatement(683)", "Delete Block(684)", "Delete IfStatement(685)", "Delete SimpleName: accept(686)", "Delete SimpleName: node(687)", "Delete SimpleName: jjtGetChild(688)", "Delete NumberLiteral: 0(689)", "Delete MethodInvocation(690)", "Delete SimpleName: data(691)", "Delete MethodInvocation(692)", "Delete ExpressionStatement(693)", "Delete SimpleName: paren(694)", "Delete SimpleName: builder(695)", "Delete SimpleName: append(696)", "Delete StringLiteral: \")\"(697)", "Delete MethodInvocation(698)", "Delete ExpressionStatement(699)", "Delete Block(700)", "Delete IfStatement(701)", "Delete SimpleName: data(702)", "Delete ReturnStatement(703)", "Delete Block(704)", "Delete MethodDeclaration(705)", "Delete TagElement: @inheritDoc(706)", "Delete TextElement:  (707)", "Delete TagElement(708)", "Delete Javadoc(709)", "Delete Modifier: public(710)", "Delete SimpleName: Object(711)", "Delete SimpleType: Object(712)", "Delete SimpleName: visit(713)", "Delete SimpleName: ASTAdditiveNode(714)", "Delete SimpleType: ASTAdditiveNode(715)", "Delete SimpleName: node(716)", "Delete SingleVariableDeclaration(717)", "Delete SimpleName: Object(718)", "Delete SimpleType: Object(719)", "Delete SimpleName: data(720)", "Delete SingleVariableDeclaration(721)", "Delete PrimitiveType: boolean(722)", "Delete SimpleName: paren(723)", "Delete SimpleName: node(724)", "Delete SimpleName: jjtGetParent(725)", "Delete MethodInvocation(726)", "Delete SimpleName: ASTMulNode(727)", "Delete SimpleType: ASTMulNode(728)", "Delete InstanceofExpression(729)", "Delete SimpleName: node(730)", "Delete SimpleName: jjtGetParent(731)", "Delete MethodInvocation(732)", "Delete SimpleName: ASTDivNode(733)", "Delete SimpleType: ASTDivNode(734)", "Delete InstanceofExpression(735)", "Delete SimpleName: node(736)", "Delete SimpleName: jjtGetParent(737)", "Delete MethodInvocation(738)", "Delete SimpleName: ASTModNode(739)", "Delete SimpleType: ASTModNode(740)", "Delete InstanceofExpression(741)", "Delete InfixExpression: ||(742)", "Delete VariableDeclarationFragment(743)", "Delete VariableDeclarationStatement(744)", "Delete PrimitiveType: int(745)", "Delete SimpleName: num(746)", "Delete SimpleName: node(747)", "Delete SimpleName: jjtGetNumChildren(748)", "Delete MethodInvocation(749)", "Delete VariableDeclarationFragment(750)", "Delete VariableDeclarationStatement(751)", "Delete SimpleName: paren(752)", "Delete SimpleName: builder(753)", "Delete SimpleName: append(754)", "Delete StringLiteral: \"(\"(755)", "Delete MethodInvocation(756)", "Delete ExpressionStatement(757)", "Delete Block(758)", "Delete IfStatement(759)", "Delete SimpleName: accept(760)", "Delete SimpleName: node(761)", "Delete SimpleName: jjtGetChild(762)", "Delete NumberLiteral: 0(763)", "Delete MethodInvocation(764)", "Delete SimpleName: data(765)", "Delete MethodInvocation(766)", "Delete ExpressionStatement(767)", "Delete PrimitiveType: int(768)", "Delete SimpleName: i(769)", "Delete NumberLiteral: 1(770)", "Delete VariableDeclarationFragment(771)", "Delete VariableDeclarationExpression(772)", "Delete SimpleName: i(773)", "Delete SimpleName: num(774)", "Delete InfixExpression: <(775)", "Delete SimpleName: i(776)", "Delete PrefixExpression: ++(777)", "Delete SimpleName: accept(778)", "Delete SimpleName: node(779)", "Delete SimpleName: jjtGetChild(780)", "Delete SimpleName: i(781)", "Delete MethodInvocation(782)", "Delete SimpleName: data(783)", "Delete MethodInvocation(784)", "Delete ExpressionStatement(785)", "Delete Block(786)", "Delete ForStatement(787)", "Delete SimpleName: paren(788)", "Delete SimpleName: builder(789)", "Delete SimpleName: append(790)", "Delete StringLiteral: \")\"(791)", "Delete MethodInvocation(792)", "Delete ExpressionStatement(793)", "Delete Block(794)", "Delete IfStatement(795)", "Delete SimpleName: data(796)", "Delete ReturnStatement(797)", "Delete Block(798)", "Delete MethodDeclaration(799)", "Delete TagElement: @inheritDoc(800)", "Delete TextElement:  (801)", "Delete TagElement(802)", "Delete Javadoc(803)", "Delete Modifier: public(804)", "Delete SimpleName: Object(805)", "Delete SimpleType: Object(806)", "Delete SimpleName: visit(807)", "Delete SimpleName: ASTAdditiveOperator(808)", "Delete SimpleType: ASTAdditiveOperator(809)", "Delete SimpleName: node(810)", "Delete SingleVariableDeclaration(811)", "Delete SimpleName: Object(812)", "Delete SimpleType: Object(813)", "Delete SimpleName: data(814)", "Delete SingleVariableDeclaration(815)", "Delete SimpleName: builder(816)", "Delete SimpleName: append(817)", "Delete CharacterLiteral: ' '(818)", "Delete MethodInvocation(819)", "Delete ExpressionStatement(820)", "Delete SimpleName: builder(821)", "Delete SimpleName: append(822)", "Delete QualifiedName: node.image(823)", "Delete MethodInvocation(824)", "Delete ExpressionStatement(825)", "Delete SimpleName: builder(826)", "Delete SimpleName: append(827)", "Delete CharacterLiteral: ' '(828)", "Delete MethodInvocation(829)", "Delete ExpressionStatement(830)", "Delete SimpleName: data(831)", "Delete ReturnStatement(832)", "Delete Block(833)", "Delete MethodDeclaration(834)", "Delete TagElement: @inheritDoc(835)", "Delete TextElement:  (836)", "Delete TagElement(837)", "Delete Javadoc(838)", "Delete Modifier: public(839)", "Delete SimpleName: Object(840)", "Delete SimpleType: Object(841)", "Delete SimpleName: visit(842)", "Delete SimpleName: ASTAndNode(843)", "Delete SimpleType: ASTAndNode(844)", "Delete SimpleName: node(845)", "Delete SingleVariableDeclaration(846)", "Delete SimpleName: Object(847)", "Delete SimpleType: Object(848)", "Delete SimpleName: data(849)", "Delete SingleVariableDeclaration(850)", "Delete SimpleName: infixChildren(851)", "Delete SimpleName: node(852)", "Delete StringLiteral: \" && \"(853)", "Delete BooleanLiteral: false(854)", "Delete SimpleName: data(855)", "Delete MethodInvocation(856)", "Delete ReturnStatement(857)", "Delete Block(858)", "Delete MethodDeclaration(859)", "Delete TagElement: @inheritDoc(860)", "Delete TextElement:  (861)", "Delete TagElement(862)", "Delete Javadoc(863)", "Delete Modifier: public(864)", "Delete SimpleName: Object(865)", "Delete SimpleType: Object(866)", "Delete SimpleName: visit(867)", "Delete SimpleName: ASTArrayAccess(868)", "Delete SimpleType: ASTArrayAccess(869)", "Delete SimpleName: node(870)", "Delete SingleVariableDeclaration(871)", "Delete SimpleName: Object(872)", "Delete SimpleType: Object(873)", "Delete SimpleName: data(874)", "Delete SingleVariableDeclaration(875)", "Delete SimpleName: accept(876)", "Delete SimpleName: node(877)", "Delete SimpleName: jjtGetChild(878)", "Delete NumberLiteral: 0(879)", "Delete MethodInvocation(880)", "Delete SimpleName: data(881)", "Delete MethodInvocation(882)", "Delete ExpressionStatement(883)", "Delete PrimitiveType: int(884)", "Delete SimpleName: num(885)", "Delete SimpleName: node(886)", "Delete SimpleName: jjtGetNumChildren(887)", "Delete MethodInvocation(888)", "Delete VariableDeclarationFragment(889)", "Delete VariableDeclarationStatement(890)", "Delete PrimitiveType: int(891)", "Delete SimpleName: i(892)", "Delete NumberLiteral: 1(893)", "Delete VariableDeclarationFragment(894)", "Delete VariableDeclarationExpression(895)", "Delete SimpleName: i(896)", "Delete SimpleName: num(897)", "Delete InfixExpression: <(898)", "Delete SimpleName: i(899)", "Delete PrefixExpression: ++(900)", "Delete SimpleName: builder(901)", "Delete SimpleName: append(902)", "Delete StringLiteral: \"[\"(903)", "Delete MethodInvocation(904)", "Delete ExpressionStatement(905)", "Delete SimpleName: accept(906)", "Delete SimpleName: node(907)", "Delete SimpleName: jjtGetChild(908)", "Delete SimpleName: i(909)", "Delete MethodInvocation(910)", "Delete SimpleName: data(911)", "Delete MethodInvocation(912)", "Delete ExpressionStatement(913)", "Delete SimpleName: builder(914)", "Delete SimpleName: append(915)", "Delete StringLiteral: \"]\"(916)", "Delete MethodInvocation(917)", "Delete ExpressionStatement(918)", "Delete Block(919)", "Delete ForStatement(920)", "Delete SimpleName: data(921)", "Delete ReturnStatement(922)", "Delete Block(923)", "Delete MethodDeclaration(924)", "Delete TagElement: @inheritDoc(925)", "Delete TextElement:  (926)", "Delete TagElement(927)", "Delete Javadoc(928)", "Delete Modifier: public(929)", "Delete SimpleName: Object(930)", "Delete SimpleType: Object(931)", "Delete SimpleName: visit(932)", "Delete SimpleName: ASTArrayLiteral(933)", "Delete SimpleType: ASTArrayLiteral(934)", "Delete SimpleName: node(935)", "Delete SingleVariableDeclaration(936)", "Delete SimpleName: Object(937)", "Delete SimpleType: Object(938)", "Delete SimpleName: data(939)", "Delete SingleVariableDeclaration(940)", "Delete PrimitiveType: int(941)", "Delete SimpleName: num(942)", "Delete SimpleName: node(943)", "Delete SimpleName: jjtGetNumChildren(944)", "Delete MethodInvocation(945)", "Delete VariableDeclarationFragment(946)", "Delete VariableDeclarationStatement(947)", "Delete SimpleName: builder(948)", "Delete SimpleName: append(949)", "Delete StringLiteral: \"[ \"(950)", "Delete MethodInvocation(951)", "Delete ExpressionStatement(952)", "Delete SimpleName: num(953)", "Delete NumberLiteral: 0(954)", "Delete InfixExpression: >(955)", "Delete SimpleName: accept(956)", "Delete SimpleName: node(957)", "Delete SimpleName: jjtGetChild(958)", "Delete NumberLiteral: 0(959)", "Delete MethodInvocation(960)", "Delete SimpleName: data(961)", "Delete MethodInvocation(962)", "Delete ExpressionStatement(963)", "Delete PrimitiveType: int(964)", "Delete SimpleName: i(965)", "Delete NumberLiteral: 1(966)", "Delete VariableDeclarationFragment(967)", "Delete VariableDeclarationExpression(968)", "Delete SimpleName: i(969)", "Delete SimpleName: num(970)", "Delete InfixExpression: <(971)", "Delete SimpleName: i(972)", "Delete PrefixExpression: ++(973)", "Delete SimpleName: builder(974)", "Delete SimpleName: append(975)", "Delete StringLiteral: \", \"(976)", "Delete MethodInvocation(977)", "Delete ExpressionStatement(978)", "Delete SimpleName: accept(979)", "Delete SimpleName: node(980)", "Delete SimpleName: jjtGetChild(981)", "Delete SimpleName: i(982)", "Delete MethodInvocation(983)", "Delete SimpleName: data(984)", "Delete MethodInvocation(985)", "Delete ExpressionStatement(986)", "Delete Block(987)", "Delete ForStatement(988)", "Delete Block(989)", "Delete IfStatement(990)", "Delete SimpleName: builder(991)", "Delete SimpleName: append(992)", "Delete StringLiteral: \" ]\"(993)", "Delete MethodInvocation(994)", "Delete ExpressionStatement(995)", "Delete SimpleName: data(996)", "Delete ReturnStatement(997)", "Delete Block(998)", "Delete MethodDeclaration(999)", "Delete TagElement: @inheritDoc(1000)", "Delete TextElement:  (1001)", "Delete TagElement(1002)", "Delete Javadoc(1003)", "Delete Modifier: public(1004)", "Delete SimpleName: Object(1005)", "Delete SimpleType: Object(1006)", "Delete SimpleName: visit(1007)", "Delete SimpleName: ASTAssignment(1008)", "Delete SimpleType: ASTAssignment(1009)", "Delete SimpleName: node(1010)", "Delete SingleVariableDeclaration(1011)", "Delete SimpleName: Object(1012)", "Delete SimpleType: Object(1013)", "Delete SimpleName: data(1014)", "Delete SingleVariableDeclaration(1015)", "Delete SimpleName: infixChildren(1016)", "Delete SimpleName: node(1017)", "Delete StringLiteral: \" = \"(1018)", "Delete BooleanLiteral: false(1019)", "Delete SimpleName: data(1020)", "Delete MethodInvocation(1021)", "Delete ReturnStatement(1022)", "Delete Block(1023)", "Delete MethodDeclaration(1024)", "Delete TagElement: @inheritDoc(1025)", "Delete TextElement:  (1026)", "Delete TagElement(1027)", "Delete Javadoc(1028)", "Delete Modifier: public(1029)", "Delete SimpleName: Object(1030)", "Delete SimpleType: Object(1031)", "Delete SimpleName: visit(1032)", "Delete SimpleName: ASTBitwiseAndNode(1033)", "Delete SimpleType: ASTBitwiseAndNode(1034)", "Delete SimpleName: node(1035)", "Delete SingleVariableDeclaration(1036)", "Delete SimpleName: Object(1037)", "Delete SimpleType: Object(1038)", "Delete SimpleName: data(1039)", "Delete SingleVariableDeclaration(1040)", "Delete SimpleName: infixChildren(1041)", "Delete SimpleName: node(1042)", "Delete StringLiteral: \" & \"(1043)", "Delete BooleanLiteral: false(1044)", "Delete SimpleName: data(1045)", "Delete MethodInvocation(1046)", "Delete ReturnStatement(1047)", "Delete Block(1048)", "Delete MethodDeclaration(1049)", "Delete TagElement: @inheritDoc(1050)", "Delete TextElement:  (1051)", "Delete TagElement(1052)", "Delete Javadoc(1053)", "Delete Modifier: public(1054)", "Delete SimpleName: Object(1055)", "Delete SimpleType: Object(1056)", "Delete SimpleName: visit(1057)", "Delete SimpleName: ASTBitwiseComplNode(1058)", "Delete SimpleType: ASTBitwiseComplNode(1059)", "Delete SimpleName: node(1060)", "Delete SingleVariableDeclaration(1061)", "Delete SimpleName: Object(1062)", "Delete SimpleType: Object(1063)", "Delete SimpleName: data(1064)", "Delete SingleVariableDeclaration(1065)", "Delete SimpleName: prefixChild(1066)", "Delete SimpleName: node(1067)", "Delete StringLiteral: \"~\"(1068)", "Delete SimpleName: data(1069)", "Delete MethodInvocation(1070)", "Delete ReturnStatement(1071)", "Delete Block(1072)", "Delete MethodDeclaration(1073)", "Delete TagElement: @inheritDoc(1074)", "Delete TextElement:  (1075)", "Delete TagElement(1076)", "Delete Javadoc(1077)", "Delete Modifier: public(1078)", "Delete SimpleName: Object(1079)", "Delete SimpleType: Object(1080)", "Delete SimpleName: visit(1081)", "Delete SimpleName: ASTBitwiseOrNode(1082)", "Delete SimpleType: ASTBitwiseOrNode(1083)", "Delete SimpleName: node(1084)", "Delete SingleVariableDeclaration(1085)", "Delete SimpleName: Object(1086)", "Delete SimpleType: Object(1087)", "Delete SimpleName: data(1088)", "Delete SingleVariableDeclaration(1089)", "Delete PrimitiveType: boolean(1090)", "Delete SimpleName: paren(1091)", "Delete SimpleName: node(1092)", "Delete SimpleName: jjtGetParent(1093)", "Delete MethodInvocation(1094)", "Delete SimpleName: ASTBitwiseAndNode(1095)", "Delete SimpleType: ASTBitwiseAndNode(1096)", "Delete InstanceofExpression(1097)", "Delete VariableDeclarationFragment(1098)", "Delete VariableDeclarationStatement(1099)", "Delete SimpleName: infixChildren(1100)", "Delete SimpleName: node(1101)", "Delete StringLiteral: \" | \"(1102)", "Delete SimpleName: paren(1103)", "Delete SimpleName: data(1104)", "Delete MethodInvocation(1105)", "Delete ReturnStatement(1106)", "Delete Block(1107)", "Delete MethodDeclaration(1108)", "Delete TagElement: @inheritDoc(1109)", "Delete TextElement:  (1110)", "Delete TagElement(1111)", "Delete Javadoc(1112)", "Delete Modifier: public(1113)", "Delete SimpleName: Object(1114)", "Delete SimpleType: Object(1115)", "Delete SimpleName: visit(1116)", "Delete SimpleName: ASTBitwiseXorNode(1117)", "Delete SimpleType: ASTBitwiseXorNode(1118)", "Delete SimpleName: node(1119)", "Delete SingleVariableDeclaration(1120)", "Delete SimpleName: Object(1121)", "Delete SimpleType: Object(1122)", "Delete SimpleName: data(1123)", "Delete SingleVariableDeclaration(1124)", "Delete PrimitiveType: boolean(1125)", "Delete SimpleName: paren(1126)", "Delete SimpleName: node(1127)", "Delete SimpleName: jjtGetParent(1128)", "Delete MethodInvocation(1129)", "Delete SimpleName: ASTBitwiseAndNode(1130)", "Delete SimpleType: ASTBitwiseAndNode(1131)", "Delete InstanceofExpression(1132)", "Delete VariableDeclarationFragment(1133)", "Delete VariableDeclarationStatement(1134)", "Delete SimpleName: infixChildren(1135)", "Delete SimpleName: node(1136)", "Delete StringLiteral: \" ^ \"(1137)", "Delete SimpleName: paren(1138)", "Delete SimpleName: data(1139)", "Delete MethodInvocation(1140)", "Delete ReturnStatement(1141)", "Delete Block(1142)", "Delete MethodDeclaration(1143)", "Delete TagElement: @inheritDoc(1144)", "Delete TextElement:  (1145)", "Delete TagElement(1146)", "Delete Javadoc(1147)", "Delete Modifier: public(1148)", "Delete SimpleName: Object(1149)", "Delete SimpleType: Object(1150)", "Delete SimpleName: visit(1151)", "Delete SimpleName: ASTBlock(1152)", "Delete SimpleType: ASTBlock(1153)", "Delete SimpleName: node(1154)", "Delete SingleVariableDeclaration(1155)", "Delete SimpleName: Object(1156)", "Delete SimpleType: Object(1157)", "Delete SimpleName: data(1158)", "Delete SingleVariableDeclaration(1159)", "Delete SimpleName: builder(1160)", "Delete SimpleName: append(1161)", "Delete StringLiteral: \"{ \"(1162)", "Delete MethodInvocation(1163)", "Delete ExpressionStatement(1164)", "Delete PrimitiveType: int(1165)", "Delete SimpleName: num(1166)", "Delete SimpleName: node(1167)", "Delete SimpleName: jjtGetNumChildren(1168)", "Delete MethodInvocation(1169)", "Delete VariableDeclarationFragment(1170)", "Delete VariableDeclarationStatement(1171)", "Delete PrimitiveType: int(1172)", "Delete SimpleName: i(1173)", "Delete NumberLiteral: 0(1174)", "Delete VariableDeclarationFragment(1175)", "Delete VariableDeclarationExpression(1176)", "Delete SimpleName: i(1177)", "Delete SimpleName: num(1178)", "Delete InfixExpression: <(1179)", "Delete SimpleName: i(1180)", "Delete PrefixExpression: ++(1181)", "Delete SimpleName: JexlNode(1182)", "Delete SimpleType: JexlNode(1183)", "Delete SimpleName: child(1184)", "Delete SimpleName: node(1185)", "Delete SimpleName: jjtGetChild(1186)", "Delete SimpleName: i(1187)", "Delete MethodInvocation(1188)", "Delete VariableDeclarationFragment(1189)", "Delete VariableDeclarationStatement(1190)", "Delete SimpleName: acceptStatement(1191)", "Delete SimpleName: child(1192)", "Delete SimpleName: data(1193)", "Delete MethodInvocation(1194)", "Delete ExpressionStatement(1195)", "Delete Block(1196)", "Delete ForStatement(1197)", "Delete SimpleName: builder(1198)", "Delete SimpleName: append(1199)", "Delete StringLiteral: \" }\"(1200)", "Delete MethodInvocation(1201)", "Delete ExpressionStatement(1202)", "Delete SimpleName: data(1203)", "Delete ReturnStatement(1204)", "Delete Block(1205)", "Delete MethodDeclaration(1206)", "Delete TagElement: @inheritDoc(1207)", "Delete TextElement:  (1208)", "Delete TagElement(1209)", "Delete Javadoc(1210)", "Delete Modifier: public(1211)", "Delete SimpleName: Object(1212)", "Delete SimpleType: Object(1213)", "Delete SimpleName: visit(1214)", "Delete SimpleName: ASTDivNode(1215)", "Delete SimpleType: ASTDivNode(1216)", "Delete SimpleName: node(1217)", "Delete SingleVariableDeclaration(1218)", "Delete SimpleName: Object(1219)", "Delete SimpleType: Object(1220)", "Delete SimpleName: data(1221)", "Delete SingleVariableDeclaration(1222)", "Delete SimpleName: infixChildren(1223)", "Delete SimpleName: node(1224)", "Delete StringLiteral: \" / \"(1225)", "Delete BooleanLiteral: false(1226)", "Delete SimpleName: data(1227)", "Delete MethodInvocation(1228)", "Delete ReturnStatement(1229)", "Delete Block(1230)", "Delete MethodDeclaration(1231)", "Delete TagElement: @inheritDoc(1232)", "Delete TextElement:  (1233)", "Delete TagElement(1234)", "Delete Javadoc(1235)", "Delete Modifier: public(1236)", "Delete SimpleName: Object(1237)", "Delete SimpleType: Object(1238)", "Delete SimpleName: visit(1239)", "Delete SimpleName: ASTEmptyFunction(1240)", "Delete SimpleType: ASTEmptyFunction(1241)", "Delete SimpleName: node(1242)", "Delete SingleVariableDeclaration(1243)", "Delete SimpleName: Object(1244)", "Delete SimpleType: Object(1245)", "Delete SimpleName: data(1246)", "Delete SingleVariableDeclaration(1247)", "Delete SimpleName: builder(1248)", "Delete SimpleName: append(1249)", "Delete StringLiteral: \"empty(\"(1250)", "Delete MethodInvocation(1251)", "Delete ExpressionStatement(1252)", "Delete SimpleName: accept(1253)", "Delete SimpleName: node(1254)", "Delete SimpleName: jjtGetChild(1255)", "Delete NumberLiteral: 0(1256)", "Delete MethodInvocation(1257)", "Delete SimpleName: data(1258)", "Delete MethodInvocation(1259)", "Delete ExpressionStatement(1260)", "Delete SimpleName: builder(1261)", "Delete SimpleName: append(1262)", "Delete StringLiteral: \")\"(1263)", "Delete MethodInvocation(1264)", "Delete ExpressionStatement(1265)", "Delete SimpleName: data(1266)", "Delete ReturnStatement(1267)", "Delete Block(1268)", "Delete MethodDeclaration(1269)", "Delete TagElement: @inheritDoc(1270)", "Delete TextElement:  (1271)", "Delete TagElement(1272)", "Delete Javadoc(1273)", "Delete Modifier: public(1274)", "Delete SimpleName: Object(1275)", "Delete SimpleType: Object(1276)", "Delete SimpleName: visit(1277)", "Delete SimpleName: ASTEQNode(1278)", "Delete SimpleType: ASTEQNode(1279)", "Delete SimpleName: node(1280)", "Delete SingleVariableDeclaration(1281)", "Delete SimpleName: Object(1282)", "Delete SimpleType: Object(1283)", "Delete SimpleName: data(1284)", "Delete SingleVariableDeclaration(1285)", "Delete SimpleName: infixChildren(1286)", "Delete SimpleName: node(1287)", "Delete StringLiteral: \" == \"(1288)", "Delete BooleanLiteral: false(1289)", "Delete SimpleName: data(1290)", "Delete MethodInvocation(1291)", "Delete ReturnStatement(1292)", "Delete Block(1293)", "Delete MethodDeclaration(1294)", "Delete TagElement: @inheritDoc(1295)", "Delete TextElement:  (1296)", "Delete TagElement(1297)", "Delete Javadoc(1298)", "Delete Modifier: public(1299)", "Delete SimpleName: Object(1300)", "Delete SimpleType: Object(1301)", "Delete SimpleName: visit(1302)", "Delete SimpleName: ASTERNode(1303)", "Delete SimpleType: ASTERNode(1304)", "Delete SimpleName: node(1305)", "Delete SingleVariableDeclaration(1306)", "Delete SimpleName: Object(1307)", "Delete SimpleType: Object(1308)", "Delete SimpleName: data(1309)", "Delete SingleVariableDeclaration(1310)", "Delete SimpleName: infixChildren(1311)", "Delete SimpleName: node(1312)", "Delete StringLiteral: \" =~ \"(1313)", "Delete BooleanLiteral: false(1314)", "Delete SimpleName: data(1315)", "Delete MethodInvocation(1316)", "Delete ReturnStatement(1317)", "Delete Block(1318)", "Delete MethodDeclaration(1319)", "Delete TagElement: @inheritDoc(1320)", "Delete TextElement:  (1321)", "Delete TagElement(1322)", "Delete Javadoc(1323)", "Delete Modifier: public(1324)", "Delete SimpleName: Object(1325)", "Delete SimpleType: Object(1326)", "Delete SimpleName: visit(1327)", "Delete SimpleName: ASTFalseNode(1328)", "Delete SimpleType: ASTFalseNode(1329)", "Delete SimpleName: node(1330)", "Delete SingleVariableDeclaration(1331)", "Delete SimpleName: Object(1332)", "Delete SimpleType: Object(1333)", "Delete SimpleName: data(1334)", "Delete SingleVariableDeclaration(1335)", "Delete SimpleName: check(1336)", "Delete SimpleName: node(1337)", "Delete StringLiteral: \"false\"(1338)", "Delete SimpleName: data(1339)", "Delete MethodInvocation(1340)", "Delete ReturnStatement(1341)", "Delete Block(1342)", "Delete MethodDeclaration(1343)", "Delete TagElement: @inheritDoc(1344)", "Delete TextElement:  (1345)", "Delete TagElement(1346)", "Delete Javadoc(1347)", "Delete Modifier: public(1348)", "Delete SimpleName: Object(1349)", "Delete SimpleType: Object(1350)", "Delete SimpleName: visit(1351)", "Delete SimpleName: ASTForeachStatement(1352)", "Delete SimpleType: ASTForeachStatement(1353)", "Delete SimpleName: node(1354)", "Delete SingleVariableDeclaration(1355)", "Delete SimpleName: Object(1356)", "Delete SimpleType: Object(1357)", "Delete SimpleName: data(1358)", "Delete SingleVariableDeclaration(1359)", "Delete SimpleName: builder(1360)", "Delete SimpleName: append(1361)", "Delete StringLiteral: \"for(\"(1362)", "Delete MethodInvocation(1363)", "Delete ExpressionStatement(1364)", "Delete SimpleName: accept(1365)", "Delete SimpleName: node(1366)", "Delete SimpleName: jjtGetChild(1367)", "Delete NumberLiteral: 0(1368)", "Delete MethodInvocation(1369)", "Delete SimpleName: data(1370)", "Delete MethodInvocation(1371)", "Delete ExpressionStatement(1372)", "Delete SimpleName: builder(1373)", "Delete SimpleName: append(1374)", "Delete StringLiteral: \" : \"(1375)", "Delete MethodInvocation(1376)", "Delete ExpressionStatement(1377)", "Delete SimpleName: accept(1378)", "Delete SimpleName: node(1379)", "Delete SimpleName: jjtGetChild(1380)", "Delete NumberLiteral: 1(1381)", "Delete MethodInvocation(1382)", "Delete SimpleName: data(1383)", "Delete MethodInvocation(1384)", "Delete ExpressionStatement(1385)", "Delete SimpleName: builder(1386)", "Delete SimpleName: append(1387)", "Delete StringLiteral: \") \"(1388)", "Delete MethodInvocation(1389)", "Delete ExpressionStatement(1390)", "Delete SimpleName: node(1391)", "Delete SimpleName: jjtGetNumChildren(1392)", "Delete MethodInvocation(1393)", "Delete NumberLiteral: 2(1394)", "Delete InfixExpression: >(1395)", "Delete SimpleName: acceptStatement(1396)", "Delete SimpleName: node(1397)", "Delete SimpleName: jjtGetChild(1398)", "Delete NumberLiteral: 2(1399)", "Delete MethodInvocation(1400)", "Delete SimpleName: data(1401)", "Delete MethodInvocation(1402)", "Delete ExpressionStatement(1403)", "Delete Block(1404)", "Delete SimpleName: builder(1405)", "Delete SimpleName: append(1406)", "Delete CharacterLiteral: ';'(1407)", "Delete MethodInvocation(1408)", "Delete ExpressionStatement(1409)", "Delete Block(1410)", "Delete IfStatement(1411)", "Delete SimpleName: data(1412)", "Delete ReturnStatement(1413)", "Delete Block(1414)", "Delete MethodDeclaration(1415)", "Delete TagElement: @inheritDoc(1416)", "Delete TextElement:  (1417)", "Delete TagElement(1418)", "Delete Javadoc(1419)", "Delete Modifier: public(1420)", "Delete SimpleName: Object(1421)", "Delete SimpleType: Object(1422)", "Delete SimpleName: visit(1423)", "Delete SimpleName: ASTGENode(1424)", "Delete SimpleType: ASTGENode(1425)", "Delete SimpleName: node(1426)", "Delete SingleVariableDeclaration(1427)", "Delete SimpleName: Object(1428)", "Delete SimpleType: Object(1429)", "Delete SimpleName: data(1430)", "Delete SingleVariableDeclaration(1431)", "Delete SimpleName: infixChildren(1432)", "Delete SimpleName: node(1433)", "Delete StringLiteral: \" >= \"(1434)", "Delete BooleanLiteral: false(1435)", "Delete SimpleName: data(1436)", "Delete MethodInvocation(1437)", "Delete ReturnStatement(1438)", "Delete Block(1439)", "Delete MethodDeclaration(1440)", "Delete TagElement: @inheritDoc(1441)", "Delete TextElement:  (1442)", "Delete TagElement(1443)", "Delete Javadoc(1444)", "Delete Modifier: public(1445)", "Delete SimpleName: Object(1446)", "Delete SimpleType: Object(1447)", "Delete SimpleName: visit(1448)", "Delete SimpleName: ASTGTNode(1449)", "Delete SimpleType: ASTGTNode(1450)", "Delete SimpleName: node(1451)", "Delete SingleVariableDeclaration(1452)", "Delete SimpleName: Object(1453)", "Delete SimpleType: Object(1454)", "Delete SimpleName: data(1455)", "Delete SingleVariableDeclaration(1456)", "Delete SimpleName: infixChildren(1457)", "Delete SimpleName: node(1458)", "Delete StringLiteral: \" > \"(1459)", "Delete BooleanLiteral: false(1460)", "Delete SimpleName: data(1461)", "Delete MethodInvocation(1462)", "Delete ReturnStatement(1463)", "Delete Block(1464)", "Delete MethodDeclaration(1465)", "Delete TextElement: Checks identifiers that contain space, quote, double-quotes or backspace. (1466)", "Delete TagElement(1467)", "Delete Javadoc(1468)", "Delete Modifier: private(1469)", "Delete Modifier: static(1470)", "Delete Modifier: final(1471)", "Delete SimpleName: Pattern(1472)", "Delete SimpleType: Pattern(1473)", "Delete SimpleName: QUOTED_IDENTIFIER(1474)", "Delete SimpleName: Pattern(1475)", "Delete SimpleName: compile(1476)", "Delete StringLiteral: \"['\\\"\\\\s\\\\\\\\]\"(1477)", "Delete MethodInvocation(1478)", "Delete VariableDeclarationFragment(1479)", "Delete FieldDeclaration(1480)", "Delete TagElement: @inheritDoc(1481)", "Delete TextElement:  (1482)", "Delete TagElement(1483)", "Delete Javadoc(1484)", "Delete Modifier: public(1485)", "Delete SimpleName: Object(1486)", "Delete SimpleType: Object(1487)", "Delete SimpleName: visit(1488)", "Delete SimpleName: ASTIdentifier(1489)", "Delete SimpleType: ASTIdentifier(1490)", "Delete SimpleName: node(1491)", "Delete SingleVariableDeclaration(1492)", "Delete SimpleName: Object(1493)", "Delete SimpleType: Object(1494)", "Delete SimpleName: data(1495)", "Delete SingleVariableDeclaration(1496)", "Delete SimpleName: String(1497)", "Delete SimpleType: String(1498)", "Delete SimpleName: image(1499)", "Delete QualifiedName: node.image(1500)", "Delete VariableDeclarationFragment(1501)", "Delete VariableDeclarationStatement(1502)", "Delete SimpleName: QUOTED_IDENTIFIER(1503)", "Delete SimpleName: matcher(1504)", "Delete SimpleName: image(1505)", "Delete MethodInvocation(1506)", "Delete SimpleName: find(1507)", "Delete MethodInvocation(1508)", "Delete SimpleName: image(1509)", "Delete StringLiteral: \"'\"(1510)", "Delete QualifiedName: node.image(1511)", "Delete SimpleName: replace(1512)", "Delete StringLiteral: \"'\"(1513)", "Delete StringLiteral: \"\\\\'\"(1514)", "Delete MethodInvocation(1515)", "Delete StringLiteral: \"'\"(1516)", "Delete InfixExpression: +(1517)", "Delete Assignment: =(1518)", "Delete ExpressionStatement(1519)", "Delete Block(1520)", "Delete IfStatement(1521)", "Delete SimpleName: check(1522)", "Delete SimpleName: node(1523)", "Delete SimpleName: image(1524)", "Delete SimpleName: data(1525)", "Delete MethodInvocation(1526)", "Delete ReturnStatement(1527)", "Delete Block(1528)", "Delete MethodDeclaration(1529)", "Delete TagElement: @inheritDoc(1530)", "Delete TextElement:  (1531)", "Delete TagElement(1532)", "Delete Javadoc(1533)", "Delete Modifier: public(1534)", "Delete SimpleName: Object(1535)", "Delete SimpleType: Object(1536)", "Delete SimpleName: visit(1537)", "Delete SimpleName: ASTIfStatement(1538)", "Delete SimpleType: ASTIfStatement(1539)", "Delete SimpleName: node(1540)", "Delete SingleVariableDeclaration(1541)", "Delete SimpleName: Object(1542)", "Delete SimpleType: Object(1543)", "Delete SimpleName: data(1544)", "Delete SingleVariableDeclaration(1545)", "Delete SimpleName: builder(1546)", "Delete SimpleName: append(1547)", "Delete StringLiteral: \"if (\"(1548)", "Delete MethodInvocation(1549)", "Delete ExpressionStatement(1550)", "Delete SimpleName: accept(1551)", "Delete SimpleName: node(1552)", "Delete SimpleName: jjtGetChild(1553)", "Delete NumberLiteral: 0(1554)", "Delete MethodInvocation(1555)", "Delete SimpleName: data(1556)", "Delete MethodInvocation(1557)", "Delete ExpressionStatement(1558)", "Delete SimpleName: builder(1559)", "Delete SimpleName: append(1560)", "Delete StringLiteral: \") \"(1561)", "Delete MethodInvocation(1562)", "Delete ExpressionStatement(1563)", "Delete SimpleName: node(1564)", "Delete SimpleName: jjtGetNumChildren(1565)", "Delete MethodInvocation(1566)", "Delete NumberLiteral: 1(1567)", "Delete InfixExpression: >(1568)", "Delete SimpleName: acceptStatement(1569)", "Delete SimpleName: node(1570)", "Delete SimpleName: jjtGetChild(1571)", "Delete NumberLiteral: 1(1572)", "Delete MethodInvocation(1573)", "Delete SimpleName: data(1574)", "Delete MethodInvocation(1575)", "Delete ExpressionStatement(1576)", "Delete SimpleName: node(1577)", "Delete SimpleName: jjtGetNumChildren(1578)", "Delete MethodInvocation(1579)", "Delete NumberLiteral: 2(1580)", "Delete InfixExpression: >(1581)", "Delete SimpleName: builder(1582)", "Delete SimpleName: append(1583)", "Delete StringLiteral: \" else \"(1584)", "Delete MethodInvocation(1585)", "Delete ExpressionStatement(1586)", "Delete SimpleName: acceptStatement(1587)", "Delete SimpleName: node(1588)", "Delete SimpleName: jjtGetChild(1589)", "Delete NumberLiteral: 2(1590)", "Delete MethodInvocation(1591)", "Delete SimpleName: data(1592)", "Delete MethodInvocation(1593)", "Delete ExpressionStatement(1594)", "Delete Block(1595)", "Delete SimpleName: builder(1596)", "Delete SimpleName: append(1597)", "Delete CharacterLiteral: ';'(1598)", "Delete MethodInvocation(1599)", "Delete ExpressionStatement(1600)", "Delete Block(1601)", "Delete IfStatement(1602)", "Delete Block(1603)", "Delete SimpleName: builder(1604)", "Delete SimpleName: append(1605)", "Delete CharacterLiteral: ';'(1606)", "Delete MethodInvocation(1607)", "Delete ExpressionStatement(1608)", "Delete Block(1609)", "Delete IfStatement(1610)", "Delete SimpleName: data(1611)", "Delete ReturnStatement(1612)", "Delete Block(1613)", "Delete MethodDeclaration(1614)", "Delete TagElement: @inheritDoc(1615)", "Delete TextElement:  (1616)", "Delete TagElement(1617)", "Delete Javadoc(1618)", "Delete Modifier: public(1619)", "Delete SimpleName: Object(1620)", "Delete SimpleType: Object(1621)", "Delete SimpleName: visit(1622)", "Delete SimpleName: ASTNumberLiteral(1623)", "Delete SimpleType: ASTNumberLiteral(1624)", "Delete SimpleName: node(1625)", "Delete SingleVariableDeclaration(1626)", "Delete SimpleName: Object(1627)", "Delete SimpleType: Object(1628)", "Delete SimpleName: data(1629)", "Delete SingleVariableDeclaration(1630)", "Delete SimpleName: check(1631)", "Delete SimpleName: node(1632)", "Delete QualifiedName: node.image(1633)", "Delete SimpleName: data(1634)", "Delete MethodInvocation(1635)", "Delete ReturnStatement(1636)", "Delete Block(1637)", "Delete MethodDeclaration(1638)", "Delete TagElement: @inheritDoc(1639)", "Delete TextElement:  (1640)", "Delete TagElement(1641)", "Delete Javadoc(1642)", "Delete Modifier: public(1643)", "Delete SimpleName: Object(1644)", "Delete SimpleType: Object(1645)", "Delete SimpleName: visit(1646)", "Delete SimpleName: ASTJexlScript(1647)", "Delete SimpleType: ASTJexlScript(1648)", "Delete SimpleName: node(1649)", "Delete SingleVariableDeclaration(1650)", "Delete SimpleName: Object(1651)", "Delete SimpleType: Object(1652)", "Delete SimpleName: data(1653)", "Delete SingleVariableDeclaration(1654)", "Delete PrimitiveType: int(1655)", "Delete SimpleName: num(1656)", "Delete SimpleName: node(1657)", "Delete SimpleName: jjtGetNumChildren(1658)", "Delete MethodInvocation(1659)", "Delete VariableDeclarationFragment(1660)", "Delete VariableDeclarationStatement(1661)", "Delete PrimitiveType: int(1662)", "Delete SimpleName: i(1663)", "Delete NumberLiteral: 0(1664)", "Delete VariableDeclarationFragment(1665)", "Delete VariableDeclarationExpression(1666)", "Delete SimpleName: i(1667)", "Delete SimpleName: num(1668)", "Delete InfixExpression: <(1669)", "Delete SimpleName: i(1670)", "Delete PrefixExpression: ++(1671)", "Delete SimpleName: JexlNode(1672)", "Delete SimpleType: JexlNode(1673)", "Delete SimpleName: child(1674)", "Delete SimpleName: node(1675)", "Delete SimpleName: jjtGetChild(1676)", "Delete SimpleName: i(1677)", "Delete MethodInvocation(1678)", "Delete VariableDeclarationFragment(1679)", "Delete VariableDeclarationStatement(1680)", "Delete SimpleName: acceptStatement(1681)", "Delete SimpleName: child(1682)", "Delete SimpleName: data(1683)", "Delete MethodInvocation(1684)", "Delete ExpressionStatement(1685)", "Delete Block(1686)", "Delete ForStatement(1687)", "Delete SimpleName: data(1688)", "Delete ReturnStatement(1689)", "Delete Block(1690)", "Delete MethodDeclaration(1691)", "Delete TagElement: @inheritDoc(1692)", "Delete TextElement:  (1693)", "Delete TagElement(1694)", "Delete Javadoc(1695)", "Delete Modifier: public(1696)", "Delete SimpleName: Object(1697)", "Delete SimpleType: Object(1698)", "Delete SimpleName: visit(1699)", "Delete SimpleName: ASTLENode(1700)", "Delete SimpleType: ASTLENode(1701)", "Delete SimpleName: node(1702)", "Delete SingleVariableDeclaration(1703)", "Delete SimpleName: Object(1704)", "Delete SimpleType: Object(1705)", "Delete SimpleName: data(1706)", "Delete SingleVariableDeclaration(1707)", "Delete SimpleName: infixChildren(1708)", "Delete SimpleName: node(1709)", "Delete StringLiteral: \" <= \"(1710)", "Delete BooleanLiteral: false(1711)", "Delete SimpleName: data(1712)", "Delete MethodInvocation(1713)", "Delete ReturnStatement(1714)", "Delete Block(1715)", "Delete MethodDeclaration(1716)", "Delete TagElement: @inheritDoc(1717)", "Delete TextElement:  (1718)", "Delete TagElement(1719)", "Delete Javadoc(1720)", "Delete Modifier: public(1721)", "Delete SimpleName: Object(1722)", "Delete SimpleType: Object(1723)", "Delete SimpleName: visit(1724)", "Delete SimpleName: ASTLTNode(1725)", "Delete SimpleType: ASTLTNode(1726)", "Delete SimpleName: node(1727)", "Delete SingleVariableDeclaration(1728)", "Delete SimpleName: Object(1729)", "Delete SimpleType: Object(1730)", "Delete SimpleName: data(1731)", "Delete SingleVariableDeclaration(1732)", "Delete SimpleName: infixChildren(1733)", "Delete SimpleName: node(1734)", "Delete StringLiteral: \" < \"(1735)", "Delete BooleanLiteral: false(1736)", "Delete SimpleName: data(1737)", "Delete MethodInvocation(1738)", "Delete ReturnStatement(1739)", "Delete Block(1740)", "Delete MethodDeclaration(1741)", "Delete TagElement: @inheritDoc(1742)", "Delete TextElement:  (1743)", "Delete TagElement(1744)", "Delete Javadoc(1745)", "Delete Modifier: public(1746)", "Delete SimpleName: Object(1747)", "Delete SimpleType: Object(1748)", "Delete SimpleName: visit(1749)", "Delete SimpleName: ASTMapEntry(1750)", "Delete SimpleType: ASTMapEntry(1751)", "Delete SimpleName: node(1752)", "Delete SingleVariableDeclaration(1753)", "Delete SimpleName: Object(1754)", "Delete SimpleType: Object(1755)", "Delete SimpleName: data(1756)", "Delete SingleVariableDeclaration(1757)", "Delete SimpleName: accept(1758)", "Delete SimpleName: node(1759)", "Delete SimpleName: jjtGetChild(1760)", "Delete NumberLiteral: 0(1761)", "Delete MethodInvocation(1762)", "Delete SimpleName: data(1763)", "Delete MethodInvocation(1764)", "Delete ExpressionStatement(1765)", "Delete SimpleName: builder(1766)", "Delete SimpleName: append(1767)", "Delete StringLiteral: \" : \"(1768)", "Delete MethodInvocation(1769)", "Delete ExpressionStatement(1770)", "Delete SimpleName: accept(1771)", "Delete SimpleName: node(1772)", "Delete SimpleName: jjtGetChild(1773)", "Delete NumberLiteral: 1(1774)", "Delete MethodInvocation(1775)", "Delete SimpleName: data(1776)", "Delete MethodInvocation(1777)", "Delete ExpressionStatement(1778)", "Delete SimpleName: data(1779)", "Delete ReturnStatement(1780)", "Delete Block(1781)", "Delete MethodDeclaration(1782)", "Delete TagElement: @inheritDoc(1783)", "Delete TextElement:  (1784)", "Delete TagElement(1785)", "Delete Javadoc(1786)", "Delete Modifier: public(1787)", "Delete SimpleName: Object(1788)", "Delete SimpleType: Object(1789)", "Delete SimpleName: visit(1790)", "Delete SimpleName: ASTMapLiteral(1791)", "Delete SimpleType: ASTMapLiteral(1792)", "Delete SimpleName: node(1793)", "Delete SingleVariableDeclaration(1794)", "Delete SimpleName: Object(1795)", "Delete SimpleType: Object(1796)", "Delete SimpleName: data(1797)", "Delete SingleVariableDeclaration(1798)", "Delete PrimitiveType: int(1799)", "Delete SimpleName: num(1800)", "Delete SimpleName: node(1801)", "Delete SimpleName: jjtGetNumChildren(1802)", "Delete MethodInvocation(1803)", "Delete VariableDeclarationFragment(1804)", "Delete VariableDeclarationStatement(1805)", "Delete SimpleName: builder(1806)", "Delete SimpleName: append(1807)", "Delete StringLiteral: \"{ \"(1808)", "Delete MethodInvocation(1809)", "Delete ExpressionStatement(1810)", "Delete SimpleName: num(1811)", "Delete NumberLiteral: 0(1812)", "Delete InfixExpression: >(1813)", "Delete SimpleName: accept(1814)", "Delete SimpleName: node(1815)", "Delete SimpleName: jjtGetChild(1816)", "Delete NumberLiteral: 0(1817)", "Delete MethodInvocation(1818)", "Delete SimpleName: data(1819)", "Delete MethodInvocation(1820)", "Delete ExpressionStatement(1821)", "Delete PrimitiveType: int(1822)", "Delete SimpleName: i(1823)", "Delete NumberLiteral: 1(1824)", "Delete VariableDeclarationFragment(1825)", "Delete VariableDeclarationExpression(1826)", "Delete SimpleName: i(1827)", "Delete SimpleName: num(1828)", "Delete InfixExpression: <(1829)", "Delete SimpleName: i(1830)", "Delete PrefixExpression: ++(1831)", "Delete SimpleName: builder(1832)", "Delete SimpleName: append(1833)", "Delete StringLiteral: \", \"(1834)", "Delete MethodInvocation(1835)", "Delete ExpressionStatement(1836)", "Delete SimpleName: accept(1837)", "Delete SimpleName: node(1838)", "Delete SimpleName: jjtGetChild(1839)", "Delete SimpleName: i(1840)", "Delete MethodInvocation(1841)", "Delete SimpleName: data(1842)", "Delete MethodInvocation(1843)", "Delete ExpressionStatement(1844)", "Delete Block(1845)", "Delete ForStatement(1846)", "Delete Block(1847)", "Delete SimpleName: builder(1848)", "Delete SimpleName: append(1849)", "Delete CharacterLiteral: ':'(1850)", "Delete MethodInvocation(1851)", "Delete ExpressionStatement(1852)", "Delete Block(1853)", "Delete IfStatement(1854)", "Delete SimpleName: builder(1855)", "Delete SimpleName: append(1856)", "Delete StringLiteral: \" }\"(1857)", "Delete MethodInvocation(1858)", "Delete ExpressionStatement(1859)", "Delete SimpleName: data(1860)", "Delete ReturnStatement(1861)", "Delete Block(1862)", "Delete MethodDeclaration(1863)", "Delete TagElement: @inheritDoc(1864)", "Delete TextElement:  (1865)", "Delete TagElement(1866)", "Delete Javadoc(1867)", "Delete Modifier: public(1868)", "Delete SimpleName: Object(1869)", "Delete SimpleType: Object(1870)", "Delete SimpleName: visit(1871)", "Delete SimpleName: ASTConstructorNode(1872)", "Delete SimpleType: ASTConstructorNode(1873)", "Delete SimpleName: node(1874)", "Delete SingleVariableDeclaration(1875)", "Delete SimpleName: Object(1876)", "Delete SimpleType: Object(1877)", "Delete SimpleName: data(1878)", "Delete SingleVariableDeclaration(1879)", "Delete PrimitiveType: int(1880)", "Delete SimpleName: num(1881)", "Delete SimpleName: node(1882)", "Delete SimpleName: jjtGetNumChildren(1883)", "Delete MethodInvocation(1884)", "Delete VariableDeclarationFragment(1885)", "Delete VariableDeclarationStatement(1886)", "Delete SimpleName: builder(1887)", "Delete SimpleName: append(1888)", "Delete StringLiteral: \"new \"(1889)", "Delete MethodInvocation(1890)", "Delete ExpressionStatement(1891)", "Delete SimpleName: builder(1892)", "Delete SimpleName: append(1893)", "Delete StringLiteral: \"(\"(1894)", "Delete MethodInvocation(1895)", "Delete ExpressionStatement(1896)", "Delete SimpleName: accept(1897)", "Delete SimpleName: node(1898)", "Delete SimpleName: jjtGetChild(1899)", "Delete NumberLiteral: 0(1900)", "Delete MethodInvocation(1901)", "Delete SimpleName: data(1902)", "Delete MethodInvocation(1903)", "Delete ExpressionStatement(1904)", "Delete PrimitiveType: int(1905)", "Delete SimpleName: i(1906)", "Delete NumberLiteral: 1(1907)", "Delete VariableDeclarationFragment(1908)", "Delete VariableDeclarationExpression(1909)", "Delete SimpleName: i(1910)", "Delete SimpleName: num(1911)", "Delete InfixExpression: <(1912)", "Delete SimpleName: i(1913)", "Delete PrefixExpression: ++(1914)", "Delete SimpleName: builder(1915)", "Delete SimpleName: append(1916)", "Delete StringLiteral: \", \"(1917)", "Delete MethodInvocation(1918)", "Delete ExpressionStatement(1919)", "Delete SimpleName: accept(1920)", "Delete SimpleName: node(1921)", "Delete SimpleName: jjtGetChild(1922)", "Delete SimpleName: i(1923)", "Delete MethodInvocation(1924)", "Delete SimpleName: data(1925)", "Delete MethodInvocation(1926)", "Delete ExpressionStatement(1927)", "Delete Block(1928)", "Delete ForStatement(1929)", "Delete SimpleName: builder(1930)", "Delete SimpleName: append(1931)", "Delete StringLiteral: \")\"(1932)", "Delete MethodInvocation(1933)", "Delete ExpressionStatement(1934)", "Delete SimpleName: data(1935)", "Delete ReturnStatement(1936)", "Delete Block(1937)", "Delete MethodDeclaration(1938)", "Delete TagElement: @inheritDoc(1939)", "Delete TextElement:  (1940)", "Delete TagElement(1941)", "Delete Javadoc(1942)", "Delete Modifier: public(1943)", "Delete SimpleName: Object(1944)", "Delete SimpleType: Object(1945)", "Delete SimpleName: visit(1946)", "Delete SimpleName: ASTFunctionNode(1947)", "Delete SimpleType: ASTFunctionNode(1948)", "Delete SimpleName: node(1949)", "Delete SingleVariableDeclaration(1950)", "Delete SimpleName: Object(1951)", "Delete SimpleType: Object(1952)", "Delete SimpleName: data(1953)", "Delete SingleVariableDeclaration(1954)", "Delete PrimitiveType: int(1955)", "Delete SimpleName: num(1956)", "Delete SimpleName: node(1957)", "Delete SimpleName: jjtGetNumChildren(1958)", "Delete MethodInvocation(1959)", "Delete VariableDeclarationFragment(1960)", "Delete VariableDeclarationStatement(1961)", "Delete SimpleName: accept(1962)", "Delete SimpleName: node(1963)", "Delete SimpleName: jjtGetChild(1964)", "Delete NumberLiteral: 0(1965)", "Delete MethodInvocation(1966)", "Delete SimpleName: data(1967)", "Delete MethodInvocation(1968)", "Delete ExpressionStatement(1969)", "Delete SimpleName: builder(1970)", "Delete SimpleName: append(1971)", "Delete StringLiteral: \":\"(1972)", "Delete MethodInvocation(1973)", "Delete ExpressionStatement(1974)", "Delete SimpleName: accept(1975)", "Delete SimpleName: node(1976)", "Delete SimpleName: jjtGetChild(1977)", "Delete NumberLiteral: 1(1978)", "Delete MethodInvocation(1979)", "Delete SimpleName: data(1980)", "Delete MethodInvocation(1981)", "Delete ExpressionStatement(1982)", "Delete SimpleName: builder(1983)", "Delete SimpleName: append(1984)", "Delete StringLiteral: \"(\"(1985)", "Delete MethodInvocation(1986)", "Delete ExpressionStatement(1987)", "Delete PrimitiveType: int(1988)", "Delete SimpleName: i(1989)", "Delete NumberLiteral: 2(1990)", "Delete VariableDeclarationFragment(1991)", "Delete VariableDeclarationExpression(1992)", "Delete SimpleName: i(1993)", "Delete SimpleName: num(1994)", "Delete InfixExpression: <(1995)", "Delete SimpleName: i(1996)", "Delete PrefixExpression: ++(1997)", "Delete SimpleName: i(1998)", "Delete NumberLiteral: 2(1999)", "Delete InfixExpression: >(2000)", "Delete SimpleName: builder(2001)", "Delete SimpleName: append(2002)", "Delete StringLiteral: \", \"(2003)", "Delete MethodInvocation(2004)", "Delete ExpressionStatement(2005)", "Delete Block(2006)", "Delete IfStatement(2007)", "Delete SimpleName: accept(2008)", "Delete SimpleName: node(2009)", "Delete SimpleName: jjtGetChild(2010)", "Delete SimpleName: i(2011)", "Delete MethodInvocation(2012)", "Delete SimpleName: data(2013)", "Delete MethodInvocation(2014)", "Delete ExpressionStatement(2015)", "Delete Block(2016)", "Delete ForStatement(2017)", "Delete SimpleName: builder(2018)", "Delete SimpleName: append(2019)", "Delete StringLiteral: \")\"(2020)", "Delete MethodInvocation(2021)", "Delete ExpressionStatement(2022)", "Delete SimpleName: data(2023)", "Delete ReturnStatement(2024)", "Delete Block(2025)", "Delete MethodDeclaration(2026)", "Delete TagElement: @inheritDoc(2027)", "Delete TextElement:  (2028)", "Delete TagElement(2029)", "Delete Javadoc(2030)", "Delete Modifier: public(2031)", "Delete SimpleName: Object(2032)", "Delete SimpleType: Object(2033)", "Delete SimpleName: visit(2034)", "Delete SimpleName: ASTMethodNode(2035)", "Delete SimpleType: ASTMethodNode(2036)", "Delete SimpleName: node(2037)", "Delete SingleVariableDeclaration(2038)", "Delete SimpleName: Object(2039)", "Delete SimpleType: Object(2040)", "Delete SimpleName: data(2041)", "Delete SingleVariableDeclaration(2042)", "Delete PrimitiveType: int(2043)", "Delete SimpleName: num(2044)", "Delete SimpleName: node(2045)", "Delete SimpleName: jjtGetNumChildren(2046)", "Delete MethodInvocation(2047)", "Delete VariableDeclarationFragment(2048)", "Delete VariableDeclarationStatement(2049)", "Delete SimpleName: accept(2050)", "Delete SimpleName: node(2051)", "Delete SimpleName: jjtGetChild(2052)", "Delete NumberLiteral: 0(2053)", "Delete MethodInvocation(2054)", "Delete SimpleName: data(2055)", "Delete MethodInvocation(2056)", "Delete ExpressionStatement(2057)", "Delete SimpleName: builder(2058)", "Delete SimpleName: append(2059)", "Delete StringLiteral: \"(\"(2060)", "Delete MethodInvocation(2061)", "Delete ExpressionStatement(2062)", "Delete PrimitiveType: int(2063)", "Delete SimpleName: i(2064)", "Delete NumberLiteral: 1(2065)", "Delete VariableDeclarationFragment(2066)", "Delete VariableDeclarationExpression(2067)", "Delete SimpleName: i(2068)", "Delete SimpleName: num(2069)", "Delete InfixExpression: <(2070)", "Delete SimpleName: i(2071)", "Delete PrefixExpression: ++(2072)", "Delete SimpleName: i(2073)", "Delete NumberLiteral: 1(2074)", "Delete InfixExpression: >(2075)", "Delete SimpleName: builder(2076)", "Delete SimpleName: append(2077)", "Delete StringLiteral: \", \"(2078)", "Delete MethodInvocation(2079)", "Delete ExpressionStatement(2080)", "Delete Block(2081)", "Delete IfStatement(2082)", "Delete SimpleName: accept(2083)", "Delete SimpleName: node(2084)", "Delete SimpleName: jjtGetChild(2085)", "Delete SimpleName: i(2086)", "Delete MethodInvocation(2087)", "Delete SimpleName: data(2088)", "Delete MethodInvocation(2089)", "Delete ExpressionStatement(2090)", "Delete Block(2091)", "Delete ForStatement(2092)", "Delete SimpleName: builder(2093)", "Delete SimpleName: append(2094)", "Delete StringLiteral: \")\"(2095)", "Delete MethodInvocation(2096)", "Delete ExpressionStatement(2097)", "Delete SimpleName: data(2098)", "Delete ReturnStatement(2099)", "Delete Block(2100)", "Delete MethodDeclaration(2101)", "Delete TagElement: @inheritDoc(2102)", "Delete TextElement:  (2103)", "Delete TagElement(2104)", "Delete Javadoc(2105)", "Delete Modifier: public(2106)", "Delete SimpleName: Object(2107)", "Delete SimpleType: Object(2108)", "Delete SimpleName: visit(2109)", "Delete SimpleName: ASTModNode(2110)", "Delete SimpleType: ASTModNode(2111)", "Delete SimpleName: node(2112)", "Delete SingleVariableDeclaration(2113)", "Delete SimpleName: Object(2114)", "Delete SimpleType: Object(2115)", "Delete SimpleName: data(2116)", "Delete SingleVariableDeclaration(2117)", "Delete SimpleName: infixChildren(2118)", "Delete SimpleName: node(2119)", "Delete StringLiteral: \" % \"(2120)", "Delete BooleanLiteral: false(2121)", "Delete SimpleName: data(2122)", "Delete MethodInvocation(2123)", "Delete ReturnStatement(2124)", "Delete Block(2125)", "Delete MethodDeclaration(2126)", "Delete TagElement: @inheritDoc(2127)", "Delete TextElement:  (2128)", "Delete TagElement(2129)", "Delete Javadoc(2130)", "Delete Modifier: public(2131)", "Delete SimpleName: Object(2132)", "Delete SimpleType: Object(2133)", "Delete SimpleName: visit(2134)", "Delete SimpleName: ASTMulNode(2135)", "Delete SimpleType: ASTMulNode(2136)", "Delete SimpleName: node(2137)", "Delete SingleVariableDeclaration(2138)", "Delete SimpleName: Object(2139)", "Delete SimpleType: Object(2140)", "Delete SimpleName: data(2141)", "Delete SingleVariableDeclaration(2142)", "Delete SimpleName: infixChildren(2143)", "Delete SimpleName: node(2144)", "Delete StringLiteral: \" * \"(2145)", "Delete BooleanLiteral: false(2146)", "Delete SimpleName: data(2147)", "Delete MethodInvocation(2148)", "Delete ReturnStatement(2149)", "Delete Block(2150)", "Delete MethodDeclaration(2151)", "Delete TagElement: @inheritDoc(2152)", "Delete TextElement:  (2153)", "Delete TagElement(2154)", "Delete Javadoc(2155)", "Delete Modifier: public(2156)", "Delete SimpleName: Object(2157)", "Delete SimpleType: Object(2158)", "Delete SimpleName: visit(2159)", "Delete SimpleName: ASTNENode(2160)", "Delete SimpleType: ASTNENode(2161)", "Delete SimpleName: node(2162)", "Delete SingleVariableDeclaration(2163)", "Delete SimpleName: Object(2164)", "Delete SimpleType: Object(2165)", "Delete SimpleName: data(2166)", "Delete SingleVariableDeclaration(2167)", "Delete SimpleName: infixChildren(2168)", "Delete SimpleName: node(2169)", "Delete StringLiteral: \" != \"(2170)", "Delete BooleanLiteral: false(2171)", "Delete SimpleName: data(2172)", "Delete MethodInvocation(2173)", "Delete ReturnStatement(2174)", "Delete Block(2175)", "Delete MethodDeclaration(2176)", "Delete TagElement: @inheritDoc(2177)", "Delete TextElement:  (2178)", "Delete TagElement(2179)", "Delete Javadoc(2180)", "Delete Modifier: public(2181)", "Delete SimpleName: Object(2182)", "Delete SimpleType: Object(2183)", "Delete SimpleName: visit(2184)", "Delete SimpleName: ASTNRNode(2185)", "Delete SimpleType: ASTNRNode(2186)", "Delete SimpleName: node(2187)", "Delete SingleVariableDeclaration(2188)", "Delete SimpleName: Object(2189)", "Delete SimpleType: Object(2190)", "Delete SimpleName: data(2191)", "Delete SingleVariableDeclaration(2192)", "Delete SimpleName: infixChildren(2193)", "Delete SimpleName: node(2194)", "Delete StringLiteral: \" !~ \"(2195)", "Delete BooleanLiteral: false(2196)", "Delete SimpleName: data(2197)", "Delete MethodInvocation(2198)", "Delete ReturnStatement(2199)", "Delete Block(2200)", "Delete MethodDeclaration(2201)", "Delete TagElement: @inheritDoc(2202)", "Delete TextElement:  (2203)", "Delete TagElement(2204)", "Delete Javadoc(2205)", "Delete Modifier: public(2206)", "Delete SimpleName: Object(2207)", "Delete SimpleType: Object(2208)", "Delete SimpleName: visit(2209)", "Delete SimpleName: ASTNotNode(2210)", "Delete SimpleType: ASTNotNode(2211)", "Delete SimpleName: node(2212)", "Delete SingleVariableDeclaration(2213)", "Delete SimpleName: Object(2214)", "Delete SimpleType: Object(2215)", "Delete SimpleName: data(2216)", "Delete SingleVariableDeclaration(2217)", "Delete SimpleName: builder(2218)", "Delete SimpleName: append(2219)", "Delete StringLiteral: \"!\"(2220)", "Delete MethodInvocation(2221)", "Delete ExpressionStatement(2222)", "Delete SimpleName: accept(2223)", "Delete SimpleName: node(2224)", "Delete SimpleName: jjtGetChild(2225)", "Delete NumberLiteral: 0(2226)", "Delete MethodInvocation(2227)", "Delete SimpleName: data(2228)", "Delete MethodInvocation(2229)", "Delete ExpressionStatement(2230)", "Delete SimpleName: data(2231)", "Delete ReturnStatement(2232)", "Delete Block(2233)", "Delete MethodDeclaration(2234)", "Delete TagElement: @inheritDoc(2235)", "Delete TextElement:  (2236)", "Delete TagElement(2237)", "Delete Javadoc(2238)", "Delete Modifier: public(2239)", "Delete SimpleName: Object(2240)", "Delete SimpleType: Object(2241)", "Delete SimpleName: visit(2242)", "Delete SimpleName: ASTNullLiteral(2243)", "Delete SimpleType: ASTNullLiteral(2244)", "Delete SimpleName: node(2245)", "Delete SingleVariableDeclaration(2246)", "Delete SimpleName: Object(2247)", "Delete SimpleType: Object(2248)", "Delete SimpleName: data(2249)", "Delete SingleVariableDeclaration(2250)", "Delete SimpleName: check(2251)", "Delete SimpleName: node(2252)", "Delete StringLiteral: \"null\"(2253)", "Delete SimpleName: data(2254)", "Delete MethodInvocation(2255)", "Delete ExpressionStatement(2256)", "Delete SimpleName: data(2257)", "Delete ReturnStatement(2258)", "Delete Block(2259)", "Delete MethodDeclaration(2260)", "Delete TagElement: @inheritDoc(2261)", "Delete TextElement:  (2262)", "Delete TagElement(2263)", "Delete Javadoc(2264)", "Delete Modifier: public(2265)", "Delete SimpleName: Object(2266)", "Delete SimpleType: Object(2267)", "Delete SimpleName: visit(2268)", "Delete SimpleName: ASTOrNode(2269)", "Delete SimpleType: ASTOrNode(2270)", "Delete SimpleName: node(2271)", "Delete SingleVariableDeclaration(2272)", "Delete SimpleName: Object(2273)", "Delete SimpleType: Object(2274)", "Delete SimpleName: data(2275)", "Delete SingleVariableDeclaration(2276)", "Delete PrimitiveType: boolean(2277)", "Delete SimpleName: paren(2278)", "Delete SimpleName: node(2279)", "Delete SimpleName: jjtGetParent(2280)", "Delete MethodInvocation(2281)", "Delete SimpleName: ASTAndNode(2282)", "Delete SimpleType: ASTAndNode(2283)", "Delete InstanceofExpression(2284)", "Delete VariableDeclarationFragment(2285)", "Delete VariableDeclarationStatement(2286)", "Delete SimpleName: infixChildren(2287)", "Delete SimpleName: node(2288)", "Delete StringLiteral: \" || \"(2289)", "Delete SimpleName: paren(2290)", "Delete SimpleName: data(2291)", "Delete MethodInvocation(2292)", "Delete ReturnStatement(2293)", "Delete Block(2294)", "Delete MethodDeclaration(2295)", "Delete TagElement: @inheritDoc(2296)", "Delete TextElement:  (2297)", "Delete TagElement(2298)", "Delete Javadoc(2299)", "Delete Modifier: public(2300)", "Delete SimpleName: Object(2301)", "Delete SimpleType: Object(2302)", "Delete SimpleName: visit(2303)", "Delete SimpleName: ASTReference(2304)", "Delete SimpleType: ASTReference(2305)", "Delete SimpleName: node(2306)", "Delete SingleVariableDeclaration(2307)", "Delete SimpleName: Object(2308)", "Delete SimpleType: Object(2309)", "Delete SimpleName: data(2310)", "Delete SingleVariableDeclaration(2311)", "Delete PrimitiveType: int(2312)", "Delete SimpleName: num(2313)", "Delete SimpleName: node(2314)", "Delete SimpleName: jjtGetNumChildren(2315)", "Delete MethodInvocation(2316)", "Delete VariableDeclarationFragment(2317)", "Delete VariableDeclarationStatement(2318)", "Delete SimpleName: accept(2319)", "Delete SimpleName: node(2320)", "Delete SimpleName: jjtGetChild(2321)", "Delete NumberLiteral: 0(2322)", "Delete MethodInvocation(2323)", "Delete SimpleName: data(2324)", "Delete MethodInvocation(2325)", "Delete ExpressionStatement(2326)", "Delete PrimitiveType: int(2327)", "Delete SimpleName: i(2328)", "Delete NumberLiteral: 1(2329)", "Delete VariableDeclarationFragment(2330)", "Delete VariableDeclarationExpression(2331)", "Delete SimpleName: i(2332)", "Delete SimpleName: num(2333)", "Delete InfixExpression: <(2334)", "Delete SimpleName: i(2335)", "Delete PrefixExpression: ++(2336)", "Delete SimpleName: builder(2337)", "Delete SimpleName: append(2338)", "Delete StringLiteral: \".\"(2339)", "Delete MethodInvocation(2340)", "Delete ExpressionStatement(2341)", "Delete SimpleName: accept(2342)", "Delete SimpleName: node(2343)", "Delete SimpleName: jjtGetChild(2344)", "Delete SimpleName: i(2345)", "Delete MethodInvocation(2346)", "Delete SimpleName: data(2347)", "Delete MethodInvocation(2348)", "Delete ExpressionStatement(2349)", "Delete Block(2350)", "Delete ForStatement(2351)", "Delete SimpleName: data(2352)", "Delete ReturnStatement(2353)", "Delete Block(2354)", "Delete MethodDeclaration(2355)", "Delete TagElement: @inheritDoc(2356)", "Delete TextElement:  (2357)", "Delete TagElement(2358)", "Delete Javadoc(2359)", "Delete Modifier: public(2360)", "Delete SimpleName: Object(2361)", "Delete SimpleType: Object(2362)", "Delete SimpleName: visit(2363)", "Delete SimpleName: ASTReferenceExpression(2364)", "Delete SimpleType: ASTReferenceExpression(2365)", "Delete SimpleName: node(2366)", "Delete SingleVariableDeclaration(2367)", "Delete SimpleName: Object(2368)", "Delete SimpleType: Object(2369)", "Delete SimpleName: data(2370)", "Delete SingleVariableDeclaration(2371)", "Delete SimpleName: JexlNode(2372)", "Delete SimpleType: JexlNode(2373)", "Delete SimpleName: first(2374)", "Delete SimpleName: node(2375)", "Delete SimpleName: jjtGetChild(2376)", "Delete NumberLiteral: 0(2377)", "Delete MethodInvocation(2378)", "Delete VariableDeclarationFragment(2379)", "Delete VariableDeclarationStatement(2380)", "Delete SimpleName: builder(2381)", "Delete SimpleName: append(2382)", "Delete CharacterLiteral: '('(2383)", "Delete MethodInvocation(2384)", "Delete ExpressionStatement(2385)", "Delete SimpleName: accept(2386)", "Delete SimpleName: first(2387)", "Delete SimpleName: data(2388)", "Delete MethodInvocation(2389)", "Delete ExpressionStatement(2390)", "Delete SimpleName: builder(2391)", "Delete SimpleName: append(2392)", "Delete CharacterLiteral: ')'(2393)", "Delete MethodInvocation(2394)", "Delete ExpressionStatement(2395)", "Delete PrimitiveType: int(2396)", "Delete SimpleName: num(2397)", "Delete SimpleName: node(2398)", "Delete SimpleName: jjtGetNumChildren(2399)", "Delete MethodInvocation(2400)", "Delete VariableDeclarationFragment(2401)", "Delete VariableDeclarationStatement(2402)", "Delete PrimitiveType: int(2403)", "Delete SimpleName: i(2404)", "Delete NumberLiteral: 1(2405)", "Delete VariableDeclarationFragment(2406)", "Delete VariableDeclarationExpression(2407)", "Delete SimpleName: i(2408)", "Delete SimpleName: num(2409)", "Delete InfixExpression: <(2410)", "Delete SimpleName: i(2411)", "Delete PrefixExpression: ++(2412)", "Delete SimpleName: builder(2413)", "Delete SimpleName: append(2414)", "Delete StringLiteral: \"[\"(2415)", "Delete MethodInvocation(2416)", "Delete ExpressionStatement(2417)", "Delete SimpleName: accept(2418)", "Delete SimpleName: node(2419)", "Delete SimpleName: jjtGetChild(2420)", "Delete SimpleName: i(2421)", "Delete MethodInvocation(2422)", "Delete SimpleName: data(2423)", "Delete MethodInvocation(2424)", "Delete ExpressionStatement(2425)", "Delete SimpleName: builder(2426)", "Delete SimpleName: append(2427)", "Delete StringLiteral: \"]\"(2428)", "Delete MethodInvocation(2429)", "Delete ExpressionStatement(2430)", "Delete Block(2431)", "Delete ForStatement(2432)", "Delete SimpleName: data(2433)", "Delete ReturnStatement(2434)", "Delete Block(2435)", "Delete MethodDeclaration(2436)", "Delete TagElement: @inheritDoc(2437)", "Delete TextElement:  (2438)", "Delete TagElement(2439)", "Delete Javadoc(2440)", "Delete Modifier: public(2441)", "Delete SimpleName: Object(2442)", "Delete SimpleType: Object(2443)", "Delete SimpleName: visit(2444)", "Delete SimpleName: ASTReturnStatement(2445)", "Delete SimpleType: ASTReturnStatement(2446)", "Delete SimpleName: node(2447)", "Delete SingleVariableDeclaration(2448)", "Delete SimpleName: Object(2449)", "Delete SimpleType: Object(2450)", "Delete SimpleName: data(2451)", "Delete SingleVariableDeclaration(2452)", "Delete SimpleName: builder(2453)", "Delete SimpleName: append(2454)", "Delete StringLiteral: \"return \"(2455)", "Delete MethodInvocation(2456)", "Delete ExpressionStatement(2457)", "Delete SimpleName: accept(2458)", "Delete SimpleName: node(2459)", "Delete SimpleName: jjtGetChild(2460)", "Delete NumberLiteral: 0(2461)", "Delete MethodInvocation(2462)", "Delete SimpleName: data(2463)", "Delete MethodInvocation(2464)", "Delete ExpressionStatement(2465)", "Delete SimpleName: data(2466)", "Delete ReturnStatement(2467)", "Delete Block(2468)", "Delete MethodDeclaration(2469)", "Delete TagElement: @inheritDoc(2470)", "Delete TextElement:  (2471)", "Delete TagElement(2472)", "Delete Javadoc(2473)", "Delete Modifier: public(2474)", "Delete SimpleName: Object(2475)", "Delete SimpleType: Object(2476)", "Delete SimpleName: visit(2477)", "Delete SimpleName: ASTSizeFunction(2478)", "Delete SimpleType: ASTSizeFunction(2479)", "Delete SimpleName: node(2480)", "Delete SingleVariableDeclaration(2481)", "Delete SimpleName: Object(2482)", "Delete SimpleType: Object(2483)", "Delete SimpleName: data(2484)", "Delete SingleVariableDeclaration(2485)", "Delete SimpleName: builder(2486)", "Delete SimpleName: append(2487)", "Delete StringLiteral: \"size(\"(2488)", "Delete MethodInvocation(2489)", "Delete ExpressionStatement(2490)", "Delete SimpleName: accept(2491)", "Delete SimpleName: node(2492)", "Delete SimpleName: jjtGetChild(2493)", "Delete NumberLiteral: 0(2494)", "Delete MethodInvocation(2495)", "Delete SimpleName: data(2496)", "Delete MethodInvocation(2497)", "Delete ExpressionStatement(2498)", "Delete SimpleName: builder(2499)", "Delete SimpleName: append(2500)", "Delete StringLiteral: \")\"(2501)", "Delete MethodInvocation(2502)", "Delete ExpressionStatement(2503)", "Delete SimpleName: data(2504)", "Delete ReturnStatement(2505)", "Delete Block(2506)", "Delete MethodDeclaration(2507)", "Delete TagElement: @inheritDoc(2508)", "Delete TextElement:  (2509)", "Delete TagElement(2510)", "Delete Javadoc(2511)", "Delete Modifier: public(2512)", "Delete SimpleName: Object(2513)", "Delete SimpleType: Object(2514)", "Delete SimpleName: visit(2515)", "Delete SimpleName: ASTSizeMethod(2516)", "Delete SimpleType: ASTSizeMethod(2517)", "Delete SimpleName: node(2518)", "Delete SingleVariableDeclaration(2519)", "Delete SimpleName: Object(2520)", "Delete SimpleType: Object(2521)", "Delete SimpleName: data(2522)", "Delete SingleVariableDeclaration(2523)", "Delete SimpleName: check(2524)", "Delete SimpleName: node(2525)", "Delete StringLiteral: \"size()\"(2526)", "Delete SimpleName: data(2527)", "Delete MethodInvocation(2528)", "Delete ExpressionStatement(2529)", "Delete SimpleName: data(2530)", "Delete ReturnStatement(2531)", "Delete Block(2532)", "Delete MethodDeclaration(2533)", "Delete TagElement: @inheritDoc(2534)", "Delete TextElement:  (2535)", "Delete TagElement(2536)", "Delete Javadoc(2537)", "Delete Modifier: public(2538)", "Delete SimpleName: Object(2539)", "Delete SimpleType: Object(2540)", "Delete SimpleName: visit(2541)", "Delete SimpleName: ASTStringLiteral(2542)", "Delete SimpleType: ASTStringLiteral(2543)", "Delete SimpleName: node(2544)", "Delete SingleVariableDeclaration(2545)", "Delete SimpleName: Object(2546)", "Delete SimpleType: Object(2547)", "Delete SimpleName: data(2548)", "Delete SingleVariableDeclaration(2549)", "Delete SimpleName: String(2550)", "Delete SimpleType: String(2551)", "Delete SimpleName: img(2552)", "Delete QualifiedName: node.image(2553)", "Delete SimpleName: replace(2554)", "Delete StringLiteral: \"'\"(2555)", "Delete StringLiteral: \"\\\\'\"(2556)", "Delete MethodInvocation(2557)", "Delete VariableDeclarationFragment(2558)", "Delete VariableDeclarationStatement(2559)", "Delete SimpleName: check(2560)", "Delete SimpleName: node(2561)", "Delete StringLiteral: \"'\"(2562)", "Delete SimpleName: img(2563)", "Delete StringLiteral: \"'\"(2564)", "Delete InfixExpression: +(2565)", "Delete SimpleName: data(2566)", "Delete MethodInvocation(2567)", "Delete ReturnStatement(2568)", "Delete Block(2569)", "Delete MethodDeclaration(2570)", "Delete TagElement: @inheritDoc(2571)", "Delete TextElement:  (2572)", "Delete TagElement(2573)", "Delete Javadoc(2574)", "Delete Modifier: public(2575)", "Delete SimpleName: Object(2576)", "Delete SimpleType: Object(2577)", "Delete SimpleName: visit(2578)", "Delete SimpleName: ASTTernaryNode(2579)", "Delete SimpleType: ASTTernaryNode(2580)", "Delete SimpleName: node(2581)", "Delete SingleVariableDeclaration(2582)", "Delete SimpleName: Object(2583)", "Delete SimpleType: Object(2584)", "Delete SimpleName: data(2585)", "Delete SingleVariableDeclaration(2586)", "Delete SimpleName: accept(2587)", "Delete SimpleName: node(2588)", "Delete SimpleName: jjtGetChild(2589)", "Delete NumberLiteral: 0(2590)", "Delete MethodInvocation(2591)", "Delete SimpleName: data(2592)", "Delete MethodInvocation(2593)", "Delete ExpressionStatement(2594)", "Delete SimpleName: node(2595)", "Delete SimpleName: jjtGetNumChildren(2596)", "Delete MethodInvocation(2597)", "Delete NumberLiteral: 2(2598)", "Delete InfixExpression: >(2599)", "Delete SimpleName: builder(2600)", "Delete SimpleName: append(2601)", "Delete StringLiteral: \"? \"(2602)", "Delete MethodInvocation(2603)", "Delete ExpressionStatement(2604)", "Delete SimpleName: accept(2605)", "Delete SimpleName: node(2606)", "Delete SimpleName: jjtGetChild(2607)", "Delete NumberLiteral: 1(2608)", "Delete MethodInvocation(2609)", "Delete SimpleName: data(2610)", "Delete MethodInvocation(2611)", "Delete ExpressionStatement(2612)", "Delete SimpleName: builder(2613)", "Delete SimpleName: append(2614)", "Delete StringLiteral: \" : \"(2615)", "Delete MethodInvocation(2616)", "Delete ExpressionStatement(2617)", "Delete SimpleName: accept(2618)", "Delete SimpleName: node(2619)", "Delete SimpleName: jjtGetChild(2620)", "Delete NumberLiteral: 2(2621)", "Delete MethodInvocation(2622)", "Delete SimpleName: data(2623)", "Delete MethodInvocation(2624)", "Delete ExpressionStatement(2625)", "Delete Block(2626)", "Delete SimpleName: builder(2627)", "Delete SimpleName: append(2628)", "Delete StringLiteral: \"?:\"(2629)", "Delete MethodInvocation(2630)", "Delete ExpressionStatement(2631)", "Delete SimpleName: accept(2632)", "Delete SimpleName: node(2633)", "Delete SimpleName: jjtGetChild(2634)", "Delete NumberLiteral: 1(2635)", "Delete MethodInvocation(2636)", "Delete SimpleName: data(2637)", "Delete MethodInvocation(2638)", "Delete ExpressionStatement(2639)", "Delete Block(2640)", "Delete IfStatement(2641)", "Delete SimpleName: data(2642)", "Delete ReturnStatement(2643)", "Delete Block(2644)", "Delete MethodDeclaration(2645)", "Delete TagElement: @inheritDoc(2646)", "Delete TextElement:  (2647)", "Delete TagElement(2648)", "Delete Javadoc(2649)", "Delete Modifier: public(2650)", "Delete SimpleName: Object(2651)", "Delete SimpleType: Object(2652)", "Delete SimpleName: visit(2653)", "Delete SimpleName: ASTTrueNode(2654)", "Delete SimpleType: ASTTrueNode(2655)", "Delete SimpleName: node(2656)", "Delete SingleVariableDeclaration(2657)", "Delete SimpleName: Object(2658)", "Delete SimpleType: Object(2659)", "Delete SimpleName: data(2660)", "Delete SingleVariableDeclaration(2661)", "Delete SimpleName: check(2662)", "Delete SimpleName: node(2663)", "Delete StringLiteral: \"true\"(2664)", "Delete SimpleName: data(2665)", "Delete MethodInvocation(2666)", "Delete ExpressionStatement(2667)", "Delete SimpleName: data(2668)", "Delete ReturnStatement(2669)", "Delete Block(2670)", "Delete MethodDeclaration(2671)", "Delete TagElement: @inheritDoc(2672)", "Delete TextElement:  (2673)", "Delete TagElement(2674)", "Delete Javadoc(2675)", "Delete Modifier: public(2676)", "Delete SimpleName: Object(2677)", "Delete SimpleType: Object(2678)", "Delete SimpleName: visit(2679)", "Delete SimpleName: ASTUnaryMinusNode(2680)", "Delete SimpleType: ASTUnaryMinusNode(2681)", "Delete SimpleName: node(2682)", "Delete SingleVariableDeclaration(2683)", "Delete SimpleName: Object(2684)", "Delete SimpleType: Object(2685)", "Delete SimpleName: data(2686)", "Delete SingleVariableDeclaration(2687)", "Delete SimpleName: prefixChild(2688)", "Delete SimpleName: node(2689)", "Delete StringLiteral: \"-\"(2690)", "Delete SimpleName: data(2691)", "Delete MethodInvocation(2692)", "Delete ReturnStatement(2693)", "Delete Block(2694)", "Delete MethodDeclaration(2695)", "Delete TagElement: @inheritDoc(2696)", "Delete TextElement:  (2697)", "Delete TagElement(2698)", "Delete Javadoc(2699)", "Delete Modifier: public(2700)", "Delete SimpleName: Object(2701)", "Delete SimpleType: Object(2702)", "Delete SimpleName: visit(2703)", "Delete SimpleName: ASTVar(2704)", "Delete SimpleType: ASTVar(2705)", "Delete SimpleName: node(2706)", "Delete SingleVariableDeclaration(2707)", "Delete SimpleName: Object(2708)", "Delete SimpleType: Object(2709)", "Delete SimpleName: data(2710)", "Delete SingleVariableDeclaration(2711)", "Delete SimpleName: builder(2712)", "Delete SimpleName: append(2713)", "Delete StringLiteral: \"var \"(2714)", "Delete MethodInvocation(2715)", "Delete ExpressionStatement(2716)", "Delete SimpleName: check(2717)", "Delete SimpleName: node(2718)", "Delete QualifiedName: node.image(2719)", "Delete SimpleName: data(2720)", "Delete MethodInvocation(2721)", "Delete ExpressionStatement(2722)", "Delete SimpleName: data(2723)", "Delete ReturnStatement(2724)", "Delete Block(2725)", "Delete MethodDeclaration(2726)", "Delete TagElement: @inheritDoc(2727)", "Delete TextElement:  (2728)", "Delete TagElement(2729)", "Delete Javadoc(2730)", "Delete Modifier: public(2731)", "Delete SimpleName: Object(2732)", "Delete SimpleType: Object(2733)", "Delete SimpleName: visit(2734)", "Delete SimpleName: ASTWhileStatement(2735)", "Delete SimpleType: ASTWhileStatement(2736)", "Delete SimpleName: node(2737)", "Delete SingleVariableDeclaration(2738)", "Delete SimpleName: Object(2739)", "Delete SimpleType: Object(2740)", "Delete SimpleName: data(2741)", "Delete SingleVariableDeclaration(2742)", "Delete SimpleName: builder(2743)", "Delete SimpleName: append(2744)", "Delete StringLiteral: \"while (\"(2745)", "Delete MethodInvocation(2746)", "Delete ExpressionStatement(2747)", "Delete SimpleName: accept(2748)", "Delete SimpleName: node(2749)", "Delete SimpleName: jjtGetChild(2750)", "Delete NumberLiteral: 0(2751)", "Delete MethodInvocation(2752)", "Delete SimpleName: data(2753)", "Delete MethodInvocation(2754)", "Delete ExpressionStatement(2755)", "Delete SimpleName: builder(2756)", "Delete SimpleName: append(2757)", "Delete StringLiteral: \") \"(2758)", "Delete MethodInvocation(2759)", "Delete ExpressionStatement(2760)", "Delete SimpleName: node(2761)", "Delete SimpleName: jjtGetNumChildren(2762)", "Delete MethodInvocation(2763)", "Delete NumberLiteral: 1(2764)", "Delete InfixExpression: >(2765)", "Delete SimpleName: acceptStatement(2766)", "Delete SimpleName: node(2767)", "Delete SimpleName: jjtGetChild(2768)", "Delete NumberLiteral: 1(2769)", "Delete MethodInvocation(2770)", "Delete SimpleName: data(2771)", "Delete MethodInvocation(2772)", "Delete ExpressionStatement(2773)", "Delete Block(2774)", "Delete SimpleName: builder(2775)", "Delete SimpleName: append(2776)", "Delete CharacterLiteral: ';'(2777)", "Delete MethodInvocation(2778)", "Delete ExpressionStatement(2779)", "Delete Block(2780)", "Delete IfStatement(2781)", "Delete SimpleName: data(2782)", "Delete ReturnStatement(2783)", "Delete Block(2784)", "Delete MethodDeclaration(2785)", "Delete TagElement: @inheritDoc(2786)", "Delete TextElement:  (2787)", "Delete TagElement(2788)", "Delete Javadoc(2789)", "Delete Modifier: public(2790)", "Delete SimpleName: Object(2791)", "Delete SimpleType: Object(2792)", "Delete SimpleName: visit(2793)", "Delete SimpleName: SimpleNode(2794)", "Delete SimpleType: SimpleNode(2795)", "Delete SimpleName: node(2796)", "Delete SingleVariableDeclaration(2797)", "Delete SimpleName: Object(2798)", "Delete SimpleType: Object(2799)", "Delete SimpleName: data(2800)", "Delete SingleVariableDeclaration(2801)", "Delete SimpleName: UnsupportedOperationException(2802)", "Delete SimpleType: UnsupportedOperationException(2803)", "Delete StringLiteral: \"unexpected type of node\"(2804)", "Delete ClassInstanceCreation(2805)", "Delete ThrowStatement(2806)", "Delete Block(2807)", "Delete MethodDeclaration(2808)", "Delete TagElement: @inheritDoc(2809)", "Delete TextElement:  (2810)", "Delete TagElement(2811)", "Delete Javadoc(2812)", "Delete Modifier: public(2813)", "Delete SimpleName: Object(2814)", "Delete SimpleType: Object(2815)", "Delete SimpleName: visit(2816)", "Delete SimpleName: ASTAmbiguous(2817)", "Delete SimpleType: ASTAmbiguous(2818)", "Delete SimpleName: node(2819)", "Delete SingleVariableDeclaration(2820)", "Delete SimpleName: Object(2821)", "Delete SimpleType: Object(2822)", "Delete SimpleName: data(2823)", "Delete SingleVariableDeclaration(2824)", "Delete SimpleName: UnsupportedOperationException(2825)", "Delete SimpleType: UnsupportedOperationException(2826)", "Delete StringLiteral: \"unexpected type of node\"(2827)", "Delete ClassInstanceCreation(2828)", "Delete ThrowStatement(2829)", "Delete Block(2830)", "Delete MethodDeclaration(2831)", "Delete TypeDeclaration: class(2832)"]}}, {"Expression_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodRef", "DEL TagElement: @link", "DEL SimpleName: Expression", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL TextElement:  The result of this evaluation", "DEL TextElement: An expression is different than a script - it is simply a reference of", "DEL TextElement: .", "DEL SimpleName: Expression", "DEL TypeDeclaration: interface", "DEL SimpleName: context", "DEL SimpleType: String", "DEL SimpleType: JexlContext", "DEL TextElement: Represents a single JEXL expression.", "DEL TextElement: </p>", "DEL TextElement: an expression.", "DEL TagElement", "DEL SimpleName: String", "DEL TextElement: This simple interface provides access to the underlying expression through", "DEL TagElement: @return", "DEL TextElement: <p>", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL TextElement:  A JexlContext containing variables.", "DEL TagElement: @return", "DEL SimpleName: JexlContext", "DEL SimpleName: context", "DEL SimpleName: getExpression", "DEL TextElement:  1.0", "DEL TextElement: <p>", "DEL Modifier: public", "DEL TextElement: Evaluates the expression with the variables contained in the", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL TextElement: supplied ", "DEL SingleVariableDeclaration", "DEL TextElement:  on any error", "DEL MethodDeclaration", "DEL SimpleName: evaluate", "DEL SimpleName: String", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL TextElement:  The JEXL expression to be evaluated", "DEL SimpleName: dump", "DEL TextElement:  the JEXL expression", "DEL TagElement: @throws", "DEL TagElement", "DEL SimpleName: getExpression", "DEL Javadoc", "DEL TextElement: .", "DEL TextElement: </p>", "DEL TextElement: Returns the JEXL expression this Expression was created with.", "DEL TagElement", "DEL TagElement: @since", "DEL TagElement", "DEL TagElement: @link", "DEL TextElement: Returns the JEXL expression by reconstructing it from the parsed tree.", "DEL Javadoc", "DEL SimpleName: JexlException"]}]}}, {"Expression_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Represents a single JEXL expression.(2)", "Delete TextElement: <p>(3)", "Delete TextElement: This simple interface provides access to the underlying expression through(4)", "Delete SimpleName: Expression(5)", "Delete SimpleName: getExpression(6)", "Delete MethodRef(7)", "Delete TagElement: @link(8)", "Delete TextElement: .(9)", "Delete TextElement: </p>(10)", "Delete TextElement: <p>(11)", "Delete TextElement: An expression is different than a script - it is simply a reference of(12)", "Delete TextElement: an expression.(13)", "Delete TextElement: </p>(14)", "Delete TagElement(15)", "Delete TextElement:  1.0(16)", "Delete TagElement: @since(17)", "Delete Javadoc(18)", "Delete Modifier: public(19)", "Delete SimpleName: Expression(20)", "Delete TextElement: Evaluates the expression with the variables contained in the(21)", "Delete TextElement: supplied (22)", "Delete SimpleName: JexlContext(23)", "Delete TagElement: @link(24)", "Delete TextElement: .(25)", "Delete TagElement(26)", "Delete SimpleName: context(27)", "Delete TextElement:  A JexlContext containing variables.(28)", "Delete TagElement: @param(29)", "Delete TextElement:  The result of this evaluation(30)", "Delete TagElement: @return(31)", "Delete SimpleName: JexlException(32)", "Delete TextElement:  on any error(33)", "Delete TagElement: @throws(34)", "Delete Javadoc(35)", "Delete SimpleName: Object(36)", "Delete SimpleType: Object(37)", "Delete SimpleName: evaluate(38)", "Delete SimpleName: JexlContext(39)", "Delete SimpleType: JexlContext(40)", "Delete SimpleName: context(41)", "Delete SingleVariableDeclaration(42)", "Delete MethodDeclaration(43)", "Delete TextElement: Returns the JEXL expression this Expression was created with.(44)", "Delete TagElement(45)", "Delete TextElement:  The JEXL expression to be evaluated(46)", "Delete TagElement: @return(47)", "Delete Javadoc(48)", "Delete SimpleName: String(49)", "Delete SimpleType: String(50)", "Delete SimpleName: getExpression(51)", "Delete MethodDeclaration(52)", "Delete TextElement: Returns the JEXL expression by reconstructing it from the parsed tree.(53)", "Delete TagElement(54)", "Delete TextElement:  the JEXL expression(55)", "Delete TagElement: @return(56)", "Delete Javadoc(57)", "Delete SimpleName: String(58)", "Delete SimpleType: String(59)", "Delete SimpleName: dump(60)", "Delete MethodDeclaration(61)", "Delete TypeDeclaration: interface(62)"]}}, {"ExpressionImpl_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.concurrent.Callable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: script", "DEL InfixExpression: +", "DEL SimpleName: Override", "DEL TagElement: @inheritDoc", "DEL FieldDeclaration", "DEL SimpleName: interpreter", "DEL Javadoc", "DEL TagElement", "DEL Modifier: public", "DEL SimpleType: String", "DEL TextElement:  interface.", "DEL MethodDeclaration", "DEL SimpleName: toString", "DEL SimpleName: jexl", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleType: JexlEngine", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: execute", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: script", "DEL SimpleName: Interpreter", "DEL TagElement", "DEL Modifier: public", "DEL Modifier: final", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL SimpleName: interpreter", "DEL SimpleType: JexlContext", "DEL SimpleType: Interpreter", "DEL Modifier: protected", "DEL ReturnStatement", "DEL SimpleName: context", "DEL SimpleType: JexlContext", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: interpret", "DEL SimpleName: createFrame", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL SimpleName: interpret", "DEL SimpleName: Callable", "DEL TextElement:  the parsed expression.", "DEL Modifier: private", "DEL InfixExpression: ==", "DEL SimpleName: script", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: interpreter", "DEL SimpleName: Script", "DEL SimpleName: interpret", "DEL ArrayType: Object[]", "DEL Dimension", "DEL SimpleName: Object", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleType: Callable", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: JexlEngine", "DEL TagElement: @param", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: expr", "DEL SimpleType: Object", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TagElement", "DEL CastExpression", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Dimension", "DEL SimpleType: Interpreter", "DEL Modifier: public", "DEL SimpleName: script", "DEL SimpleName: debug", "DEL SimpleName: dump", "DEL VariableDeclarationStatement", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: ExpressionImpl", "DEL Dimension", "DEL Block", "DEL TagElement", "DEL NumberLiteral: 1", "DEL SimpleName: debug", "DEL Modifier: protected", "DEL SimpleName: script", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL TextElement: Instances of ExpressionImpl are created by the ", "DEL ReturnStatement", "DEL TagElement: @link", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: interpreter", "DEL VariableDeclarationStatement", "DEL TextElement:  1.0", "DEL MethodInvocation", "DEL SimpleName: JexlContext", "DEL StringLiteral: \":\"", "DEL NullLiteral", "DEL SimpleName: callable", "DEL ConditionalExpression", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: createFrame", "DEL SimpleName: Object", "DEL SimpleName: getLocalVariables", "DEL SimpleName: JexlContext", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: args", "DEL SimpleType: String", "DEL SimpleName: script", "DEL SimpleName: script", "DEL MethodDeclaration", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: interpreter", "DEL ArrayType: String[]", "DEL Assignment: =", "DEL SimpleName: callable", "DEL TagElement: @inheritDoc", "DEL SimpleName: context", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: JexlEngine", "DEL ArrayType: String[]", "DEL MarkerAnnotation", "DEL FieldDeclaration", "DEL TextElement:  the expression.", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: start", "DEL MethodInvocation", "DEL SimpleName: context", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: createInterpreter", "DEL SimpleName: result", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: jexl", "DEL TagElement: @since", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: Debugger", "DEL SimpleName: interpreter", "DEL SimpleName: getParameters", "DEL TagElement", "DEL SimpleName: script", "DEL VariableDeclarationStatement", "DEL TextElement: The resulting AST we can interpret.", "DEL MethodInvocation", "DEL SimpleName: Expression", "DEL SimpleName: engine", "DEL TextElement:  and", "DEL SimpleName: context", "DEL SimpleType: String", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL Block", "DEL ParameterizedType: Callable<Object>", "DEL SimpleName: jexl", "DEL SimpleName: d", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: createInterpreter", "DEL SimpleName: createFrame", "DEL Javadoc", "DEL Block", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL ArrayType: Object[]", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: getLocalVariables", "DEL SimpleType: Interpreter", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL TextElement: Original expression stripped from leading & trailing spaces.", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: script", "DEL TagElement: @param", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL Block", "DEL ArrayType: Object[]", "DEL SimpleType: ASTJexlScript", "DEL SimpleName: expr", "DEL TagElement", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: getExpression", "DEL ReturnStatement", "DEL SimpleName: interpreter", "DEL SimpleName: JexlContext", "DEL SimpleName: interpreter", "DEL SimpleType: JexlEngine", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: expression", "DEL SimpleName: Callable", "DEL TagElement", "DEL SimpleName: expression", "DEL NullLiteral", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL TagElement: @inheritDoc", "DEL IfStatement", "DEL Block", "DEL SimpleName: Exception", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleName: getText", "DEL ConditionalExpression", "DEL SimpleName: debug", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SimpleName: execute", "DEL SimpleName: Interpreter", "DEL MethodInvocation", "DEL TextElement: The engine for this expression. ", "DEL ParameterizedType: Callable<Object>", "DEL SimpleName: args", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: interpret", "DEL ReturnStatement", "DEL SimpleName: result", "DEL SimpleName: Expression", "DEL SimpleName: setFrame", "DEL SimpleName: createFrame", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: getParameters", "DEL SimpleName: JexlContext", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL SimpleName: Debugger", "DEL Block", "DEL SimpleName: ref", "DEL TextElement:  the expression or blank if it's null.", "DEL Modifier: public", "DEL SimpleName: expr", "DEL SimpleName: createInterpreter", "DEL SimpleName: result", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL SimpleName: jexl", "DEL SimpleName: jexl", "DEL SimpleType: Debugger", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL SimpleName: jjtGetChild", "DEL SimpleName: getVariables", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: Object", "DEL TagElement", "DEL InfixExpression: ==", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: script", "DEL IfStatement", "DEL SimpleName: data", "DEL Modifier: final", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL SimpleName: call", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleName: script", "DEL SimpleName: end", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: d", "DEL SimpleName: script", "DEL NullLiteral", "DEL Block", "DEL ParameterizedType: List<String>", "DEL Javadoc", "DEL ParameterizedType: Callable<Object>", "DEL SimpleType: ASTJexlScript", "DEL SimpleName: String", "DEL TagElement: @inheritDoc", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: context", "DEL SimpleName: createInterpreter", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL TextElement:  the interpreter to evaluate the expression", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: Object", "DEL SimpleType: Interpreter", "DEL SimpleType: Callable", "DEL SimpleType: String", "DEL SimpleType: String", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: expr", "DEL Javadoc", "DEL TagElement: @link", "DEL SimpleName: Interpreter", "DEL SimpleType: JexlContext", "DEL StringLiteral: \"*/\"", "DEL Modifier: public", "DEL SimpleType: Exception", "DEL SimpleType: String", "DEL SimpleName: jexl", "DEL SimpleName: context", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: args", "DEL Assignment: =", "DEL NullLiteral", "DEL SimpleName: ExpressionImpl", "DEL SimpleName: context", "DEL SimpleName: Script", "DEL SimpleName: Object", "DEL SimpleType: Callable", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: setFrame", "DEL Javadoc", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleType: JexlContext", "DEL SimpleType: Script", "DEL SimpleName: expr", "DEL SimpleName: Object", "DEL SimpleType: Debugger", "DEL ClassInstanceCreation", "DEL Modifier: protected", "DEL MethodInvocation", "DEL ParameterizedType: Set<List<String>>", "DEL ReturnStatement", "DEL SimpleName: script", "DEL Dimension", "DEL ReturnStatement", "DEL StringLiteral: \"\"", "DEL TextElement: Provide a string representation of this expression.", "DEL TagElement: @inheritDoc", "DEL TextElement: ,", "DEL AnonymousClassDeclaration", "DEL Modifier: protected", "DEL SimpleName: getExpression", "DEL ExpressionStatement", "DEL SimpleName: JexlEngine", "DEL Modifier: final", "DEL Block", "DEL Javadoc", "DEL SimpleName: evaluate", "DEL SimpleName: setFrame", "DEL SimpleName: ref", "DEL CastExpression", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL ThisExpression", "DEL SimpleName: args", "DEL Block", "DEL TextElement: Do not let this be generally instantiated with a 'new'.", "DEL SimpleName: toString", "DEL ExpressionStatement", "DEL TextElement: Use interpreter as marker for not having run. ", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL TagElement", "DEL SimpleName: context", "DEL SimpleType: JexlContext", "DEL SimpleName: List", "DEL SimpleName: debug", "DEL VariableDeclarationStatement", "DEL SimpleName: callable", "DEL SimpleName: Set", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: expression", "DEL SimpleName: interpreter", "DEL SimpleType: Object", "DEL FieldDeclaration", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: context", "DEL SimpleName: engine", "DEL Block", "DEL SimpleName: interpreter", "DEL SimpleName: interpreter", "DEL SimpleType: List", "DEL Modifier: public", "DEL StringLiteral: \" /*\"", "DEL SimpleType: Set", "DEL SimpleType: Object", "DEL SimpleName: setFrame", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: script", "DEL SimpleType: String", "DEL SimpleName: Interpreter", "DEL TagElement", "DEL StringLiteral: \"/*?:?*/ \"", "DEL SimpleName: ASTJexlScript", "DEL TagElement: @link", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: jexl", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL CastExpression", "DEL SimpleType: Expression", "DEL TextElement: and this is the default implementation of the ", "DEL SimpleName: result", "DEL SimpleName: engine", "DEL SimpleName: getVariables", "DEL SimpleName: String", "DEL SimpleName: interpreter", "DEL SimpleName: ref", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SimpleName: interpreter", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: String", "DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: interpreter", "DEL SingleVariableDeclaration", "DEL SimpleName: Callable", "DEL MethodDeclaration"]}]}}, {"ExpressionImpl_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Set(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.concurrent.Callable(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Instances of ExpressionImpl are created by the (10)", "Delete SimpleName: JexlEngine(11)", "Delete TagElement: @link(12)", "Delete TextElement: ,(13)", "Delete TextElement: and this is the default implementation of the (14)", "Delete SimpleName: Expression(15)", "Delete TagElement: @link(16)", "Delete TextElement:  and(17)", "Delete SimpleName: Script(18)", "Delete TagElement: @link(19)", "Delete TextElement:  interface.(20)", "Delete TagElement(21)", "Delete TextElement:  1.0(22)", "Delete TagElement: @since(23)", "Delete Javadoc(24)", "Delete Modifier: public(25)", "Delete SimpleName: ExpressionImpl(26)", "Delete SimpleName: Expression(27)", "Delete SimpleType: Expression(28)", "Delete SimpleName: Script(29)", "Delete SimpleType: Script(30)", "Delete TextElement: The engine for this expression. (31)", "Delete TagElement(32)", "Delete Javadoc(33)", "Delete Modifier: protected(34)", "Delete Modifier: final(35)", "Delete SimpleName: JexlEngine(36)", "Delete SimpleType: JexlEngine(37)", "Delete SimpleName: jexl(38)", "Delete VariableDeclarationFragment(39)", "Delete FieldDeclaration(40)", "Delete TextElement: Original expression stripped from leading & trailing spaces.(41)", "Delete TagElement(42)", "Delete Javadoc(43)", "Delete Modifier: protected(44)", "Delete Modifier: final(45)", "Delete SimpleName: String(46)", "Delete SimpleType: String(47)", "Delete SimpleName: expression(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete TextElement: The resulting AST we can interpret.(51)", "Delete TagElement(52)", "Delete Javadoc(53)", "Delete Modifier: protected(54)", "Delete Modifier: final(55)", "Delete SimpleName: ASTJexlScript(56)", "Delete SimpleType: ASTJexlScript(57)", "Delete SimpleName: script(58)", "Delete VariableDeclarationFragment(59)", "Delete FieldDeclaration(60)", "Delete TextElement: Do not let this be generally instantiated with a 'new'.(61)", "Delete TagElement(62)", "Delete SimpleName: engine(63)", "Delete TextElement:  the interpreter to evaluate the expression(64)", "Delete TagElement: @param(65)", "Delete SimpleName: expr(66)", "Delete TextElement:  the expression.(67)", "Delete TagElement: @param(68)", "Delete SimpleName: ref(69)", "Delete TextElement:  the parsed expression.(70)", "Delete TagElement: @param(71)", "Delete Javadoc(72)", "Delete Modifier: protected(73)", "Delete SimpleName: ExpressionImpl(74)", "Delete SimpleName: JexlEngine(75)", "Delete SimpleType: JexlEngine(76)", "Delete SimpleName: engine(77)", "Delete SingleVariableDeclaration(78)", "Delete SimpleName: String(79)", "Delete SimpleType: String(80)", "Delete SimpleName: expr(81)", "Delete SingleVariableDeclaration(82)", "Delete SimpleName: ASTJexlScript(83)", "Delete SimpleType: ASTJexlScript(84)", "Delete SimpleName: ref(85)", "Delete SingleVariableDeclaration(86)", "Delete SimpleName: jexl(87)", "Delete SimpleName: engine(88)", "Delete Assignment: =(89)", "Delete ExpressionStatement(90)", "Delete SimpleName: expression(91)", "Delete SimpleName: expr(92)", "Delete Assignment: =(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: script(95)", "Delete SimpleName: ref(96)", "Delete Assignment: =(97)", "Delete ExpressionStatement(98)", "Delete Block(99)", "Delete MethodDeclaration(100)", "Delete TagElement: @inheritDoc(101)", "Delete TagElement(102)", "Delete Javadoc(103)", "Delete Modifier: public(104)", "Delete SimpleName: Object(105)", "Delete SimpleType: Object(106)", "Delete SimpleName: evaluate(107)", "Delete SimpleName: JexlContext(108)", "Delete SimpleType: JexlContext(109)", "Delete SimpleName: context(110)", "Delete SingleVariableDeclaration(111)", "Delete SimpleName: script(112)", "Delete SimpleName: jjtGetNumChildren(113)", "Delete MethodInvocation(114)", "Delete NumberLiteral: 1(115)", "Delete InfixExpression: <(116)", "Delete NullLiteral(117)", "Delete ReturnStatement(118)", "Delete Block(119)", "Delete IfStatement(120)", "Delete SimpleName: Interpreter(121)", "Delete SimpleType: Interpreter(122)", "Delete SimpleName: interpreter(123)", "Delete SimpleName: jexl(124)", "Delete SimpleName: createInterpreter(125)", "Delete SimpleName: context(126)", "Delete MethodInvocation(127)", "Delete VariableDeclarationFragment(128)", "Delete VariableDeclarationStatement(129)", "Delete SimpleName: interpreter(130)", "Delete SimpleName: setFrame(131)", "Delete SimpleName: script(132)", "Delete SimpleName: createFrame(133)", "Delete SimpleName: Object(134)", "Delete SimpleType: Object(135)", "Delete Dimension(136)", "Delete ArrayType: Object[](137)", "Delete NullLiteral(138)", "Delete CastExpression(139)", "Delete MethodInvocation(140)", "Delete MethodInvocation(141)", "Delete ExpressionStatement(142)", "Delete SimpleName: interpreter(143)", "Delete SimpleName: interpret(144)", "Delete SimpleName: script(145)", "Delete SimpleName: jjtGetChild(146)", "Delete NumberLiteral: 0(147)", "Delete MethodInvocation(148)", "Delete MethodInvocation(149)", "Delete ReturnStatement(150)", "Delete Block(151)", "Delete MethodDeclaration(152)", "Delete TagElement: @inheritDoc(153)", "Delete TagElement(154)", "Delete Javadoc(155)", "Delete Modifier: public(156)", "Delete SimpleName: String(157)", "Delete SimpleType: String(158)", "Delete SimpleName: dump(159)", "Delete SimpleName: Debugger(160)", "Delete SimpleType: Debugger(161)", "Delete SimpleName: debug(162)", "Delete SimpleName: Debugger(163)", "Delete SimpleType: Debugger(164)", "Delete ClassInstanceCreation(165)", "Delete VariableDeclarationFragment(166)", "Delete VariableDeclarationStatement(167)", "Delete PrimitiveType: boolean(168)", "Delete SimpleName: d(169)", "Delete SimpleName: debug(170)", "Delete SimpleName: debug(171)", "Delete SimpleName: script(172)", "Delete MethodInvocation(173)", "Delete VariableDeclarationFragment(174)", "Delete VariableDeclarationStatement(175)", "Delete SimpleName: debug(176)", "Delete SimpleName: data(177)", "Delete MethodInvocation(178)", "Delete SimpleName: d(179)", "Delete StringLiteral: \" /*\"(180)", "Delete SimpleName: debug(181)", "Delete SimpleName: start(182)", "Delete MethodInvocation(183)", "Delete StringLiteral: \":\"(184)", "Delete SimpleName: debug(185)", "Delete SimpleName: end(186)", "Delete MethodInvocation(187)", "Delete StringLiteral: \"*/\"(188)", "Delete InfixExpression: +(189)", "Delete StringLiteral: \"/*?:?*/ \"(190)", "Delete ConditionalExpression(191)", "Delete ParenthesizedExpression(192)", "Delete InfixExpression: +(193)", "Delete ReturnStatement(194)", "Delete Block(195)", "Delete MethodDeclaration(196)", "Delete TagElement: @inheritDoc(197)", "Delete TagElement(198)", "Delete Javadoc(199)", "Delete Modifier: public(200)", "Delete SimpleName: String(201)", "Delete SimpleType: String(202)", "Delete SimpleName: getExpression(203)", "Delete SimpleName: expression(204)", "Delete ReturnStatement(205)", "Delete Block(206)", "Delete MethodDeclaration(207)", "Delete TextElement: Provide a string representation of this expression.(208)", "Delete TagElement(209)", "Delete TextElement:  the expression or blank if it's null.(210)", "Delete TagElement: @return(211)", "Delete Javadoc(212)", "Delete SimpleName: Override(213)", "Delete MarkerAnnotation(214)", "Delete Modifier: public(215)", "Delete SimpleName: String(216)", "Delete SimpleType: String(217)", "Delete SimpleName: toString(218)", "Delete SimpleName: String(219)", "Delete SimpleType: String(220)", "Delete SimpleName: expr(221)", "Delete SimpleName: getExpression(222)", "Delete MethodInvocation(223)", "Delete VariableDeclarationFragment(224)", "Delete VariableDeclarationStatement(225)", "Delete SimpleName: expr(226)", "Delete NullLiteral(227)", "Delete InfixExpression: ==(228)", "Delete StringLiteral: \"\"(229)", "Delete SimpleName: expr(230)", "Delete ConditionalExpression(231)", "Delete ReturnStatement(232)", "Delete Block(233)", "Delete MethodDeclaration(234)", "Delete TagElement: @inheritDoc(235)", "Delete TagElement(236)", "Delete Javadoc(237)", "Delete Modifier: public(238)", "Delete SimpleName: String(239)", "Delete SimpleType: String(240)", "Delete SimpleName: getText(241)", "Delete SimpleName: toString(242)", "Delete MethodInvocation(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete MethodDeclaration(246)", "Delete TagElement: @inheritDoc(247)", "Delete TagElement(248)", "Delete Javadoc(249)", "Delete Modifier: public(250)", "Delete SimpleName: Object(251)", "Delete SimpleType: Object(252)", "Delete SimpleName: execute(253)", "Delete SimpleName: JexlContext(254)", "Delete SimpleType: JexlContext(255)", "Delete SimpleName: context(256)", "Delete SingleVariableDeclaration(257)", "Delete SimpleName: Interpreter(258)", "Delete SimpleType: Interpreter(259)", "Delete SimpleName: interpreter(260)", "Delete SimpleName: jexl(261)", "Delete SimpleName: createInterpreter(262)", "Delete SimpleName: context(263)", "Delete MethodInvocation(264)", "Delete VariableDeclarationFragment(265)", "Delete VariableDeclarationStatement(266)", "Delete SimpleName: interpreter(267)", "Delete SimpleName: setFrame(268)", "Delete SimpleName: script(269)", "Delete SimpleName: createFrame(270)", "Delete SimpleName: Object(271)", "Delete SimpleType: Object(272)", "Delete Dimension(273)", "Delete ArrayType: Object[](274)", "Delete NullLiteral(275)", "Delete CastExpression(276)", "Delete MethodInvocation(277)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete SimpleName: interpreter(280)", "Delete SimpleName: interpret(281)", "Delete SimpleName: script(282)", "Delete MethodInvocation(283)", "Delete ReturnStatement(284)", "Delete Block(285)", "Delete MethodDeclaration(286)", "Delete TagElement: @inheritDoc(287)", "Delete TagElement(288)", "Delete Javadoc(289)", "Delete Modifier: public(290)", "Delete SimpleName: Object(291)", "Delete SimpleType: Object(292)", "Delete SimpleName: execute(293)", "Delete SimpleName: JexlContext(294)", "Delete SimpleType: JexlContext(295)", "Delete SimpleName: context(296)", "Delete SingleVariableDeclaration(297)", "Delete SimpleName: Object(298)", "Delete SimpleType: Object(299)", "Delete SimpleName: args(300)", "Delete SingleVariableDeclaration(301)", "Delete SimpleName: Interpreter(302)", "Delete SimpleType: Interpreter(303)", "Delete SimpleName: interpreter(304)", "Delete SimpleName: jexl(305)", "Delete SimpleName: createInterpreter(306)", "Delete SimpleName: context(307)", "Delete MethodInvocation(308)", "Delete VariableDeclarationFragment(309)", "Delete VariableDeclarationStatement(310)", "Delete SimpleName: interpreter(311)", "Delete SimpleName: setFrame(312)", "Delete SimpleName: script(313)", "Delete SimpleName: createFrame(314)", "Delete SimpleName: args(315)", "Delete MethodInvocation(316)", "Delete MethodInvocation(317)", "Delete ExpressionStatement(318)", "Delete SimpleName: interpreter(319)", "Delete SimpleName: interpret(320)", "Delete SimpleName: script(321)", "Delete MethodInvocation(322)", "Delete ReturnStatement(323)", "Delete Block(324)", "Delete MethodDeclaration(325)", "Delete TagElement: @inheritDoc(326)", "Delete TagElement(327)", "Delete Javadoc(328)", "Delete Modifier: public(329)", "Delete SimpleName: String(330)", "Delete SimpleType: String(331)", "Delete Dimension(332)", "Delete ArrayType: String[](333)", "Delete SimpleName: getParameters(334)", "Delete SimpleName: script(335)", "Delete SimpleName: getParameters(336)", "Delete MethodInvocation(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete MethodDeclaration(340)", "Delete TagElement: @inheritDoc(341)", "Delete TagElement(342)", "Delete Javadoc(343)", "Delete Modifier: public(344)", "Delete SimpleName: String(345)", "Delete SimpleType: String(346)", "Delete Dimension(347)", "Delete ArrayType: String[](348)", "Delete SimpleName: getLocalVariables(349)", "Delete SimpleName: script(350)", "Delete SimpleName: getLocalVariables(351)", "Delete MethodInvocation(352)", "Delete ReturnStatement(353)", "Delete Block(354)", "Delete MethodDeclaration(355)", "Delete TagElement: @inheritDoc(356)", "Delete TagElement(357)", "Delete Javadoc(358)", "Delete Modifier: public(359)", "Delete SimpleName: Set(360)", "Delete SimpleType: Set(361)", "Delete SimpleName: List(362)", "Delete SimpleType: List(363)", "Delete SimpleName: String(364)", "Delete SimpleType: String(365)", "Delete ParameterizedType: List<String>(366)", "Delete ParameterizedType: Set<List<String>>(367)", "Delete SimpleName: getVariables(368)", "Delete SimpleName: jexl(369)", "Delete SimpleName: getVariables(370)", "Delete ThisExpression(371)", "Delete MethodInvocation(372)", "Delete ReturnStatement(373)", "Delete Block(374)", "Delete MethodDeclaration(375)", "Delete TagElement: @inheritDoc(376)", "Delete TagElement(377)", "Delete Javadoc(378)", "Delete Modifier: public(379)", "Delete SimpleName: Callable(380)", "Delete SimpleType: Callable(381)", "Delete SimpleName: Object(382)", "Delete SimpleType: Object(383)", "Delete ParameterizedType: Callable<Object>(384)", "Delete SimpleName: callable(385)", "Delete SimpleName: JexlContext(386)", "Delete SimpleType: JexlContext(387)", "Delete SimpleName: context(388)", "Delete SingleVariableDeclaration(389)", "Delete SimpleName: callable(390)", "Delete SimpleName: context(391)", "Delete SimpleName: Object(392)", "Delete SimpleType: Object(393)", "Delete Dimension(394)", "Delete ArrayType: Object[](395)", "Delete NullLiteral(396)", "Delete CastExpression(397)", "Delete MethodInvocation(398)", "Delete ReturnStatement(399)", "Delete Block(400)", "Delete MethodDeclaration(401)", "Delete TagElement: @inheritDoc(402)", "Delete TagElement(403)", "Delete Javadoc(404)", "Delete Modifier: public(405)", "Delete SimpleName: Callable(406)", "Delete SimpleType: Callable(407)", "Delete SimpleName: Object(408)", "Delete SimpleType: Object(409)", "Delete ParameterizedType: Callable<Object>(410)", "Delete SimpleName: callable(411)", "Delete SimpleName: JexlContext(412)", "Delete SimpleType: JexlContext(413)", "Delete SimpleName: context(414)", "Delete SingleVariableDeclaration(415)", "Delete SimpleName: Object(416)", "Delete SimpleType: Object(417)", "Delete SimpleName: args(418)", "Delete SingleVariableDeclaration(419)", "Delete Modifier: final(420)", "Delete SimpleName: Interpreter(421)", "Delete SimpleType: Interpreter(422)", "Delete SimpleName: interpreter(423)", "Delete SimpleName: jexl(424)", "Delete SimpleName: createInterpreter(425)", "Delete SimpleName: context(426)", "Delete MethodInvocation(427)", "Delete VariableDeclarationFragment(428)", "Delete VariableDeclarationStatement(429)", "Delete SimpleName: interpreter(430)", "Delete SimpleName: setFrame(431)", "Delete SimpleName: script(432)", "Delete SimpleName: createFrame(433)", "Delete SimpleName: args(434)", "Delete MethodInvocation(435)", "Delete MethodInvocation(436)", "Delete ExpressionStatement(437)", "Delete SimpleName: Callable(438)", "Delete SimpleType: Callable(439)", "Delete SimpleName: Object(440)", "Delete SimpleType: Object(441)", "Delete ParameterizedType: Callable<Object>(442)", "Delete TextElement: Use interpreter as marker for not having run. (443)", "Delete TagElement(444)", "Delete Javadoc(445)", "Delete Modifier: private(446)", "Delete SimpleName: Object(447)", "Delete SimpleType: Object(448)", "Delete SimpleName: result(449)", "Delete SimpleName: interpreter(450)", "Delete VariableDeclarationFragment(451)", "Delete FieldDeclaration(452)", "Delete Modifier: public(453)", "Delete SimpleName: Object(454)", "Delete SimpleType: Object(455)", "Delete SimpleName: call(456)", "Delete SimpleName: Exception(457)", "Delete SimpleType: Exception(458)", "Delete SimpleName: result(459)", "Delete SimpleName: interpreter(460)", "Delete InfixExpression: ==(461)", "Delete SimpleName: result(462)", "Delete SimpleName: interpreter(463)", "Delete SimpleName: interpret(464)", "Delete SimpleName: script(465)", "Delete MethodInvocation(466)", "Delete Assignment: =(467)", "Delete ExpressionStatement(468)", "Delete Block(469)", "Delete IfStatement(470)", "Delete SimpleName: result(471)", "Delete ReturnStatement(472)", "Delete Block(473)", "Delete MethodDeclaration(474)", "Delete AnonymousClassDeclaration(475)", "Delete ClassInstanceCreation(476)", "Delete ReturnStatement(477)", "Delete Block(478)", "Delete MethodDeclaration(479)", "Delete TypeDeclaration: class(480)"]}}, {"Interpreter_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Array"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.SimpleNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.logging.Log", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.JexlNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveOperator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAndNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAmbiguous", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTArrayAccess"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTArrayLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTAssignment"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseAndNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseComplNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseOrNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseXorNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTBlock"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTConstructorNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTDivNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTEQNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTERNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTEmptyFunction"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTFalseNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTFunctionNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTForeachStatement", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTGENode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTGTNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTIdentifier"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTIfStatement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTLENode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTLTNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMapEntry"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMapLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMethodNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTModNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTMulNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNENode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNRNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNotNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNullLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTNumberLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTOrNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReference"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReferenceExpression", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReturnStatement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTSizeFunction"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTSizeMethod"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTStringLiteral"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTTernaryNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTTrueNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTUnaryMinusNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTWhileStatement"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.Node", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ParserVisitor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection.Uberspect"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertyGet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertySet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTVar", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: next", "DEL SimpleType: ArithmeticException", "DEL TagElement: @param", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleType: JexlException.Cancel", "DEL SimpleName: Object", "DEL SimpleName: isEmpty", "DEL SimpleName: methodName", "DEL SimpleName: propertyNode", "DEL SimpleName: left", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TryStatement", "DEL CastExpression", "DEL SimpleName: node", "DEL SimpleName: variableName", "DEL SimpleType: Map", "DEL CatchClause", "DEL ForStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: left", "DEL SimpleType: JexlException", "DEL Block", "DEL TagElement", "DEL SimpleName: ASTOrNode", "DEL SimpleName: loopReference", "DEL SimpleName: left", "DEL Block", "DEL SimpleName: Object", "DEL SimpleType: JexlNode", "DEL IfStatement", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: object", "DEL SimpleName: silentFlag", "DEL SimpleName: xrt", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL IfStatement", "DEL TextElement: The arithmetic handler. ", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: xrt", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL Javadoc", "DEL WildcardType: ?", "DEL SimpleName: warn", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleType: ASTForeachStatement", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: ASTBlock", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleName: node", "DEL SimpleName: Map", "DEL InstanceofExpression", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: numChildren", "DEL SimpleName: left", "DEL Modifier: public", "DEL SimpleName: next", "DEL InstanceofExpression", "DEL TextElement:  the node that gave the value to size", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL Javadoc", "DEL TagElement", "DEL InfixExpression: -", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: JexlException", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL Block", "DEL SimpleName: JexlNode", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: aContext", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL SimpleName: cache", "DEL MethodInvocation", "DEL SimpleName: arithmetic", "DEL SimpleName: data", "DEL Modifier: public", "DEL SimpleName: index", "DEL MethodInvocation", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: visit", "DEL QualifiedName: op.image", "DEL SimpleName: node", "DEL SimpleName: isVariable", "DEL SimpleName: right", "DEL SimpleName: right", "DEL IfStatement", "DEL SimpleName: jjtAccept", "DEL SimpleName: node", "DEL ConditionalExpression", "DEL ArrayType: Object[]", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL TextElement:  to retrieve value from", "DEL ParameterizedType: Set<?>", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: jjtAccept", "DEL SimpleName: value", "DEL ReturnStatement", "DEL SimpleName: arithmetic", "DEL SimpleName: ASTIdentifier", "DEL InfixExpression: ==", "DEL SimpleName: node", "DEL Modifier: public", "DEL SimpleName: JexlEngine", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL SimpleName: methodName", "DEL SimpleName: ASTNRNode", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL QualifiedName: Boolean.TRUE", "DEL ClassInstanceCreation", "DEL StringLiteral: \"contains\"", "DEL SimpleName: Object", "DEL SimpleType: ASTJexlScript", "DEL ClassInstanceCreation", "DEL SimpleName: ASTFunctionNode", "DEL SimpleType: Object", "DEL ThrowStatement", "DEL SimpleName: left", "DEL Block", "DEL NumberLiteral: 1", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: theNode", "DEL SimpleName: v", "DEL Block", "DEL SimpleName: toBoolean", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL NullLiteral", "DEL Modifier: public", "DEL TextElement: Silent intepreter flag.  Do not modify; will be made final in a later version. ", "DEL CatchClause", "DEL ReturnStatement", "DEL TextElement:  the ", "DEL SimpleName: Script", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: params", "DEL WildcardType: ?", "DEL QualifiedName: base.uberspect", "DEL SimpleName: jjtGetChild", "DEL StringLiteral: \"attempting to call method on null\"", "DEL SimpleName: jjtAccept", "DEL PrimitiveType: boolean", "DEL SimpleType: String", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: methodName", "DEL ExpressionStatement", "DEL SimpleName: ASTNumberLiteral", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: context", "DEL TagElement", "DEL SimpleName: visit", "DEL SimpleName: ASTEQNode", "DEL TextElement:  does not return", "DEL SimpleName: childCount", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: c", "DEL SimpleName: uberspect", "DEL SimpleName: methodNode", "DEL SimpleName: xjexl", "DEL TextElement: Method resolution is a follows:", "DEL SimpleName: xjexl", "DEL MethodDeclaration", "DEL InfixExpression: >=", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL IfStatement", "DEL ParameterizedType: Iterator<?>", "DEL SimpleType: ArithmeticException", "DEL StringLiteral: \"no such function namespace \"", "DEL SimpleName: i", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: xrt", "DEL Block", "DEL TextElement:  the value to assign to the object's attribute", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleType: String", "DEL SimpleName: r", "DEL TagElement: @param", "DEL SimpleName: right", "DEL NullLiteral", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL QualifiedName: Boolean.FALSE", "DEL Block", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: loopVariable", "DEL SimpleName: jexl", "DEL Modifier: public", "DEL SimpleName: numChildren", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: itemsIterator", "DEL SimpleType: UnsupportedOperationException", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: lessThanOrEqual", "DEL SimpleName: methodNode", "DEL SimpleName: right", "DEL ParameterizedType: HashMap<Object,Object>", "DEL SimpleName: arithmetic", "DEL ExpressionStatement", "DEL SimpleName: isCancelled", "DEL SimpleName: Object", "DEL SimpleName: xrt", "DEL InfixExpression: >=", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL TextElement: <p>", "DEL TextElement: The context to store/retrieve variables. ", "DEL NumberLiteral: 1", "DEL Block", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: cache", "DEL QualifiedName: base.logger", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL PrefixExpression: !", "DEL SimpleName: e", "DEL InstanceofExpression", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL SimpleType: Map", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleType: ASTIfStatement", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: containsKey", "DEL SimpleName: nobject", "DEL InfixExpression: ==", "DEL SimpleType: ASTMulNode", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: multiply", "DEL SimpleName: node", "DEL PrimitiveType: int", "DEL SimpleName: result", "DEL Assignment: =", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleType: ArithmeticException", "DEL NullLiteral", "DEL SimpleName: ArithmeticException", "DEL SimpleName: node", "DEL WildcardType: ?", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SimpleName: jjtAccept", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: unknownVariable", "DEL SimpleName: isTernaryProtected", "DEL Assignment: =", "DEL SimpleName: register", "DEL ParenthesizedExpression", "DEL SimpleType: Object", "DEL QualifiedName: Boolean.TRUE", "DEL Assignment: +=", "DEL SimpleName: narrowNumber", "DEL SimpleName: context", "DEL SimpleName: Integer", "DEL SimpleType: ArithmeticException", "DEL SimpleName: left", "DEL StringLiteral: \"#\"", "DEL PrimitiveType: void", "DEL SimpleName: lessThan", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleType: Set", "DEL IfStatement", "DEL SimpleName: data", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: Collection", "DEL CatchClause", "DEL ReturnStatement", "DEL TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or", "DEL SimpleName: object", "DEL NullLiteral", "DEL SimpleName: val", "DEL SimpleType: Object", "DEL ParenthesizedExpression", "DEL SimpleName: next", "DEL SimpleName: isLenient", "DEL SimpleName: ArithmeticException", "DEL SimpleName: intValue", "DEL SimpleName: node", "DEL TagElement", "DEL InfixExpression: ==", "DEL InstanceofExpression", "DEL SimpleName: JexlException", "DEL VariableDeclarationStatement", "DEL TryStatement", "DEL SimpleName: JexlException", "DEL SimpleName: cacheable", "DEL TagElement", "DEL SimpleName: jjtSetValue", "DEL SimpleName: c", "DEL SimpleName: vg", "DEL ThrowStatement", "DEL Block", "DEL QualifiedName: JexlException.NULL_OPERAND", "DEL SimpleName: registers", "DEL SimpleName: invocationFailed", "DEL MethodInvocation", "DEL SimpleName: functor", "DEL SimpleName: jjtAccept", "DEL ReturnStatement", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: cacheable", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleType: ASTAndNode", "DEL ParameterizedType: Map<?,?>", "DEL SimpleType: Object", "DEL SimpleType: ASTOrNode", "DEL SimpleName: nindex", "DEL TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or", "DEL SimpleName: walk", "DEL SimpleName: JexlNode", "DEL SimpleName: result", "DEL SimpleType: RuntimeException", "DEL InfixExpression: <", "DEL SimpleName: visit", "DEL SimpleName: functionNode", "DEL SimpleName: objectNode", "DEL SimpleName: isInteger", "DEL Block", "DEL SimpleName: me", "DEL SimpleName: negate", "DEL SimpleType: Set", "DEL SimpleName: getAttribute", "DEL VariableDeclarationFragment", "DEL SimpleName: visit", "DEL SimpleName: arithmetic", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: itemsIterator", "DEL SimpleName: vm", "DEL SimpleName: Object", "DEL SimpleName: right", "DEL TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as info.", "DEL SimpleName: uberspect", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationStatement", "DEL SimpleName: JexlNode", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL WildcardType: ?", "DEL NumberLiteral: 1", "DEL SimpleType: JexlException", "DEL Assignment: =", "DEL SimpleName: child", "DEL SimpleName: jjtGetChild", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL PrefixExpression: ++", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: right", "DEL InfixExpression: ==", "DEL NumberLiteral: 0", "DEL TagElement: @inheritDoc", "DEL SimpleName: cache", "DEL SimpleName: left", "DEL QualifiedName: Boolean.FALSE", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: v", "DEL ArrayAccess", "DEL TagElement", "DEL PostfixExpression: ++", "DEL SimpleType: Object", "DEL InstanceofExpression", "DEL StringLiteral: \"& error\"", "DEL SimpleName: strictFlag", "DEL SimpleName: childCount", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: literal", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleType: JexlException.Method", "DEL Block", "DEL Block", "DEL SimpleName: jjtAccept", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleType: JexlException", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: ASTSizeFunction", "DEL SimpleName: e", "DEL TextElement:  the namespace instance", "DEL Modifier: public", "DEL TextElement:  the base to copy", "DEL VariableDeclarationExpression", "DEL NumberLiteral: 0", "DEL PrimitiveType: boolean", "DEL SimpleName: propertyNode", "DEL SimpleName: xjexl", "DEL SimpleName: JexlException", "DEL SimpleType: ASTNRNode", "DEL SimpleName: arithmetic", "DEL SimpleName: JexlException", "DEL SimpleName: toBoolean", "DEL Dimension", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: v", "DEL BooleanLiteral: true", "DEL SimpleName: object", "DEL SimpleName: isRegister", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: right", "DEL SimpleType: JexlException", "DEL ExpressionStatement", "DEL SimpleName: vm", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: objectNode", "DEL InfixExpression: +", "DEL SimpleName: r", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: setAttribute", "DEL SimpleName: cacheable", "DEL SimpleName: node", "DEL SimpleName: ArithmeticException", "DEL SimpleType: JexlPropertySet", "DEL Block", "DEL SimpleName: getCause", "DEL SimpleName: node", "DEL SimpleType: JexlMethod", "DEL Javadoc", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL Block", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleType: ASTArrayAccess", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: i", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: left", "DEL Assignment: =", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: findNullOperand", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: namespace", "DEL SimpleName: entry", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: silent", "DEL MethodInvocation", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: cobject", "DEL TagElement: @param", "DEL TextElement:  ", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleType: JexlMethod", "DEL Javadoc", "DEL Modifier: protected", "DEL Javadoc", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: invoke", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleName: v", "DEL SimpleName: namespace", "DEL ClassInstanceCreation", "DEL SimpleName: toString", "DEL NumberLiteral: 0", "DEL SimpleName: JexlException", "DEL VariableDeclarationFragment", "DEL Block", "DEL CatchClause", "DEL SimpleName: object", "DEL VariableDeclarationStatement", "DEL SimpleName: getConstructorMethod", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL Block", "DEL NullLiteral", "DEL QualifiedName: Boolean.FALSE", "DEL TagElement", "DEL SimpleName: data", "DEL Javadoc", "DEL SimpleName: right", "DEL IfStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: arithmetic", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL TextElement:  2.1", "DEL Javadoc", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: jjtGetChild", "DEL Dimension", "DEL PrimitiveType: int", "DEL SimpleType: Map", "DEL CastExpression", "DEL SimpleName: cached", "DEL TextElement:  ", "DEL TextElement:  true if strict, false otherwise", "DEL SimpleName: xjexl", "DEL ForStatement", "DEL InstanceofExpression", "DEL SimpleType: ASTIdentifier", "DEL ThrowStatement", "DEL ArrayAccess", "DEL Assignment: &=", "DEL SimpleName: right", "DEL MethodInvocation", "DEL ParameterizedType: Map<String,Object>", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: o", "DEL NumberLiteral: 1", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Integer", "DEL SimpleName: node", "DEL SimpleName: walk", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: arithmetic", "DEL SimpleType: Object", "DEL SimpleName: get", "DEL SimpleName: cobject", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: jjtAccept", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: rightValue", "DEL Block", "DEL CastExpression", "DEL ForStatement", "DEL ThisExpression", "DEL Block", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL SimpleType: JexlException", "DEL QualifiedName: JexlException.Variable", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL StringLiteral: \"array element is null\"", "DEL SimpleName: ASTAssignment", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: narrowArguments", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleName: cache", "DEL SimpleName: result", "DEL ThisExpression", "DEL IfStatement", "DEL SimpleName: value", "DEL SimpleName: v", "DEL SimpleName: vm", "DEL CatchClause", "DEL Block", "DEL QualifiedName: java.util.regex.Pattern", "DEL SimpleName: Object", "DEL InfixExpression: ||", "DEL SimpleType: JexlPropertyGet", "DEL SimpleName: node", "DEL SimpleName: visit", "DEL SimpleName: i", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL TagElement", "DEL PrimitiveType: int", "DEL QualifiedName: JexlException.Property", "DEL IfStatement", "DEL SimpleName: node", "DEL ConditionalExpression", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL TextElement:  does not return", "DEL InfixExpression: !=", "DEL Javadoc", "DEL SimpleName: jjtAccept", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: context", "DEL SimpleType: Object", "DEL SimpleName: add", "DEL Modifier: protected", "DEL SimpleName: left", "DEL ClassInstanceCreation", "DEL CastExpression", "DEL TagElement", "DEL PrefixExpression: !", "DEL ConditionalExpression", "DEL SimpleName: getCause", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleName: node", "DEL SimpleName: getReturnType", "DEL MethodDeclaration", "DEL NullLiteral", "DEL ThrowStatement", "DEL BooleanLiteral: true", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL CatchClause", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: data", "DEL WildcardType: ?", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: data", "DEL SimpleName: jexl", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Assignment: =", "DEL ParameterizedType: Map<?,?>", "DEL ThisExpression", "DEL SimpleName: arithmetic", "DEL SimpleType: JexlNode.Literal", "DEL Assignment: =", "DEL SimpleName: append", "DEL TextElement:  true if cancelled, false otherwise", "DEL ClassInstanceCreation", "DEL QualifiedName: Boolean.TRUE", "DEL IfStatement", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: vg", "DEL SimpleName: walk", "DEL SimpleType: Object", "DEL SimpleName: condition", "DEL StringLiteral: \"size() : argument is null\"", "DEL Modifier: public", "DEL SimpleName: greaterThanOrEqual", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: node", "DEL QualifiedName: Boolean.FALSE", "DEL IfStatement", "DEL QualifiedName: JexlException.Property", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: JexlException", "DEL SimpleName: number", "DEL MethodInvocation", "DEL SimpleName: JexlException", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: object", "DEL Javadoc", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleType: Object", "DEL SimpleName: functor", "DEL ClassInstanceCreation", "DEL SimpleName: right", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: xrt", "DEL SimpleType: JexlException", "DEL MethodDeclaration", "DEL SimpleName: call", "DEL NumberLiteral: 0", "DEL SimpleName: argv", "DEL SimpleName: v", "DEL ThisExpression", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL InfixExpression: !=", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: eval", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: ASTIdentifier", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: data", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: logger", "DEL SimpleName: context", "DEL SimpleName: node", "DEL SimpleType: ASTArrayAccess", "DEL VariableDeclarationExpression", "DEL SimpleName: variableName", "DEL VariableDeclarationFragment", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL NullLiteral", "DEL CatchClause", "DEL SimpleType: JexlException", "DEL Assignment: =", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL QualifiedName: Integer.TYPE", "DEL WildcardType: ?", "DEL SimpleType: JexlException", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtGetChild", "DEL VariableDeclarationStatement", "DEL SimpleName: jjtAccept", "DEL SimpleName: visit", "DEL IfStatement", "DEL SimpleType: ASTGENode", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: prefix", "DEL SimpleName: ArithmeticException", "DEL SimpleName: n", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: JexlException", "DEL ThisExpression", "DEL TagElement: @param", "DEL SimpleName: isArray", "DEL Assignment: =", "DEL Javadoc", "DEL Block", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL PrimitiveType: int", "DEL Block", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: left", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL InstanceofExpression", "DEL IfStatement", "DEL SimpleName: prefix", "DEL SingleVariableDeclaration", "DEL Block", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL SimpleName: variableName", "DEL SimpleType: JexlException.Method", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Block", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleType: ASTArrayAccess", "DEL StringLiteral: \"size() : unsupported type : \"", "DEL SimpleType: ASTReference", "DEL SimpleName: attribute", "DEL NumberLiteral: 1", "DEL SimpleName: jjtAccept", "DEL FieldDeclaration", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleType: JexlPropertyGet", "DEL SimpleName: ctor", "DEL SimpleName: xnode", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: Map", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: e", "DEL ParenthesizedExpression", "DEL SimpleType: Object", "DEL SimpleName: xrt", "DEL SimpleType: Object", "DEL SimpleName: me", "DEL MethodInvocation", "DEL SimpleName: object", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL MethodInvocation", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleName: o", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL SimpleName: setLiteral", "DEL TextElement:  2.0", "DEL SimpleName: xrt", "DEL ExpressionStatement", "DEL SimpleName: toBoolean", "DEL Block", "DEL Modifier: public", "DEL TagElement: @inheritDoc", "DEL SimpleName: name", "DEL VariableDeclarationStatement", "DEL SimpleName: arithmetic", "DEL SimpleName: node", "DEL SimpleType: Exception", "DEL QualifiedName: Boolean.TRUE", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: upper", "DEL SingleVariableDeclaration", "DEL SimpleName: val", "DEL SimpleName: left", "DEL SimpleName: Object", "DEL SimpleName: object", "DEL TagElement: @param", "DEL SimpleName: leftValue", "DEL SimpleName: data", "DEL SimpleName: left", "DEL SimpleName: methodNode", "DEL SimpleName: condition", "DEL NumberLiteral: 0", "DEL SimpleName: ASTIdentifier", "DEL ThisExpression", "DEL ConditionalExpression", "DEL ThisExpression", "DEL SimpleName: JexlPropertyGet", "DEL SimpleName: right", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: JexlException", "DEL SimpleType: ArithmeticException", "DEL InfixExpression: ==", "DEL StringLiteral: \"if error\"", "DEL SimpleType: JexlException.Variable", "DEL SimpleName: arithmetic", "DEL NullLiteral", "DEL Block", "DEL SimpleName: xrt", "DEL SimpleName: ASTIdentifier", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL SimpleType: JexlNode", "DEL SimpleName: e", "DEL TextElement: Calculate the <code>size</code> of various types: Collection, Array,", "DEL ConditionalExpression", "DEL Assignment: =", "DEL SimpleName: strict", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL FieldAccess", "DEL SimpleName: JexlException", "DEL NumberLiteral: 1", "DEL ContinueStatement", "DEL TextElement:  ", "DEL SimpleName: condition", "DEL Block", "DEL TagElement: @return", "DEL Block", "DEL Assignment: =", "DEL Block", "DEL ClassInstanceCreation", "DEL Block", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean", "DEL ParameterizedType: HashMap<String,Object>", "DEL SimpleName: valueOf", "DEL BooleanLiteral: true", "DEL Block", "DEL NumberLiteral: 0", "DEL InfixExpression: >", "DEL SimpleName: objectNode", "DEL SimpleType: ASTBitwiseAndNode", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: Interpreter", "DEL SimpleName: data", "DEL NullLiteral", "DEL TextElement:  ", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: getRegister", "DEL ReturnStatement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL SimpleName: parameters", "DEL CastExpression", "DEL SimpleName: jjtGetNumChildren", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: JexlMethod", "DEL MethodDeclaration", "DEL SimpleName: arithmetic", "DEL SimpleName: xjexl", "DEL SimpleName: node", "DEL SimpleName: node", "DEL InfixExpression: >", "DEL SimpleName: xany", "DEL SimpleName: isInteger", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: xrt", "DEL WildcardType: ?", "DEL Javadoc", "DEL FieldAccess", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL SimpleName: cache", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL QualifiedName: base.silent", "DEL SimpleName: Uberspect", "DEL Block", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: uberspect", "DEL SimpleType: Object", "DEL SimpleName: frame", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: result", "DEL Modifier: public", "DEL ArrayType: Object[]", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleType: JexlException.Cancel", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: index", "DEL Javadoc", "DEL CastExpression", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleName: xrt", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: -", "DEL Block", "DEL VariableDeclarationStatement", "DEL TagElement: @inheritDoc", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"!~ error\"", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: data", "DEL NumberLiteral: 0", "DEL SimpleType: StringBuilder", "DEL TagElement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlNode", "DEL Javadoc", "DEL SimpleName: JexlMethod", "DEL NullLiteral", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL Assignment: =", "DEL InfixExpression: <", "DEL TextElement:  the calling frame", "DEL SimpleName: node", "DEL SimpleName: uberspect", "DEL NumberLiteral: 1", "DEL SimpleName: op", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL TextElement: Copy constructor.", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL Block", "DEL IfStatement", "DEL ParameterizedType: Set<?>", "DEL NullLiteral", "DEL SimpleName: visit", "DEL SimpleName: xjexl", "DEL SimpleName: node", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: node", "DEL SimpleName: numChildren", "DEL SimpleName: right", "DEL SimpleName: namespace", "DEL SimpleName: ArithmeticException", "DEL IfStatement", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: node", "DEL SimpleType: JexlException.Property", "DEL Javadoc", "DEL InfixExpression: ==", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: jjtGetValue", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL SimpleName: register", "DEL SimpleName: getConstructorMethod", "DEL SimpleName: visit", "DEL CharacterLiteral: '.'", "DEL SimpleName: getLiteralClass", "DEL SimpleName: node", "DEL SimpleName: bean", "DEL QualifiedName: jexl.functions", "DEL IfStatement", "DEL Block", "DEL SimpleType: JexlException.Cancel", "DEL SimpleName: e", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: ASTArrayAccess", "DEL MethodDeclaration", "DEL SimpleName: strict", "DEL SimpleName: vm", "DEL PrefixExpression: !", "DEL Modifier: public", "DEL SimpleType: ASTEQNode", "DEL SimpleName: argb", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleType: Collection", "DEL MethodDeclaration", "DEL SimpleType: JexlEngine.Frame", "DEL SimpleName: jjtAccept", "DEL VariableDeclarationFragment", "DEL SimpleType: ASTIdentifier", "DEL ThisExpression", "DEL SimpleName: data", "DEL SimpleName: bitwiseOr", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleName: condition", "DEL SimpleType: java.util.regex.Pattern", "DEL SingleVariableDeclaration", "DEL SimpleName: argv", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SimpleName: jjtAccept", "DEL SimpleName: image", "DEL SimpleName: node", "DEL TagElement: @param", "DEL ArrayType: Object[]", "DEL SimpleName: node", "DEL SimpleName: numChildren", "DEL CatchClause", "DEL Block", "DEL InstanceofExpression", "DEL Javadoc", "DEL SimpleType: Object", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: visit", "DEL InfixExpression: ==", "DEL SimpleName: data", "DEL TextElement: Sets this interpreter parameters and arguments.", "DEL TagElement: @inheritDoc", "DEL Block", "DEL Javadoc", "DEL SimpleName: attribute", "DEL SimpleName: tryInvoke", "DEL SimpleName: cobject", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: value", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleType: StringBuilder", "DEL TagElement", "DEL SimpleName: functionNode", "DEL Modifier: public", "DEL TextElement: Sets whether this interpreter throws JexlException when encountering errors.", "DEL SimpleName: argv", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: isCacheable", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: val", "DEL InfixExpression: &&", "DEL IfStatement", "DEL PostfixExpression: ++", "DEL SimpleName: ASTModNode", "DEL SimpleName: xjexl", "DEL Modifier: public", "DEL SimpleType: JexlPropertyGet", "DEL SimpleName: variableName", "DEL NullLiteral", "DEL SimpleName: isCancelled", "DEL SimpleName: left", "DEL TextElement: </p>", "DEL CastExpression", "DEL SimpleName: getPropertySet", "DEL SimpleName: equals", "DEL SimpleName: getSimpleName", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: toBoolean", "DEL SimpleName: visit", "DEL SimpleName: data", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL PostfixExpression: ++", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL ArrayType: Object[]", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: frame", "DEL TextElement:  ", "DEL SimpleName: aContext", "DEL SimpleType: HashMap", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: Number", "DEL InfixExpression: !=", "DEL SimpleName: xjexl", "DEL IfStatement", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: narray", "DEL SimpleType: Object", "DEL ThisExpression", "DEL Block", "DEL StringLiteral: \"+/- error\"", "DEL TextElement:  the result of the method invocation", "DEL Assignment: &=", "DEL SimpleType: Integer", "DEL SimpleName: node", "DEL SimpleName: right", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL ThrowStatement", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL IfStatement", "DEL QualifiedName: base.strict", "DEL SimpleName: theRegisters", "DEL SimpleName: argv", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: ASTNumberLiteral", "DEL NumberLiteral: 0", "DEL SimpleName: gfunctor", "DEL SimpleName: Deprecated", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL SimpleType: ASTTrueNode", "DEL SimpleName: right", "DEL SimpleType: Script", "DEL SimpleName: jjtGetChild", "DEL Assignment: =", "DEL SimpleName: object", "DEL SimpleName: left", "DEL TextElement:  a node", "DEL SimpleName: isVariable", "DEL InfixExpression: +", "DEL SimpleName: Object", "DEL SimpleName: flag", "DEL SimpleName: ASTForeachStatement", "DEL SimpleName: it", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL SimpleName: cancelled", "DEL SimpleName: getConstructorMethod", "DEL IfStatement", "DEL SimpleName: jjtGetChild", "DEL Block", "DEL SimpleName: prefix", "DEL SimpleName: tryFailed", "DEL Javadoc", "DEL SimpleName: property", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: narrowArguments", "DEL SimpleName: data", "DEL SimpleName: node", "DEL ArrayType: String[]", "DEL SimpleName: getLiteral", "DEL SimpleName: JexlPropertySet", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleType: JexlException", "DEL IfStatement", "DEL NullLiteral", "DEL IfStatement", "DEL TagElement: @inheritDoc", "DEL ReturnStatement", "DEL SimpleType: InvocationTargetException", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: register", "DEL SimpleName: node", "DEL SimpleName: attribute", "DEL SimpleName: bitwiseAnd", "DEL Javadoc", "DEL SimpleName: namespace", "DEL SimpleName: data", "DEL SimpleName: c", "DEL ThisExpression", "DEL Modifier: public", "DEL SimpleName: objectNode", "DEL SimpleName: result", "DEL SimpleName: number", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL SimpleName: object", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: JexlException", "DEL StringLiteral: \"object is null\"", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: JexlException.Property", "DEL SimpleName: bean", "DEL MethodInvocation", "DEL TextElement: The rationale is that the ternary / elvis expressions are meant for the user to explictly take", "DEL Dimension", "DEL ReturnStatement", "DEL ThisExpression", "DEL SimpleName: vm", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: node", "DEL Block", "DEL Block", "DEL TryStatement", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL SimpleName: data", "DEL FieldAccess", "DEL MethodInvocation", "DEL StringLiteral: \"Not supported yet.\"", "DEL Block", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: >=", "DEL QualifiedName: Boolean.TRUE", "DEL Javadoc", "DEL StringLiteral: \"boolean coercion error\"", "DEL SimpleName: xjexl", "DEL SimpleName: ASTArrayAccess", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: getLiteral", "DEL SimpleName: node", "DEL SimpleType: ArithmeticException", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtGetChild", "DEL ThisExpression", "DEL SimpleName: JexlNode", "DEL FieldAccess", "DEL SimpleName: jjtGetParent", "DEL FieldAccess", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleName: JexlException", "DEL SimpleName: xjexl", "DEL ReturnStatement", "DEL StringLiteral: \"unknown operator \"", "DEL Block", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL SimpleName: right", "DEL SimpleName: JexlException", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: jjtAccept", "DEL SimpleType: Object", "DEL SimpleName: Uberspect", "DEL InfixExpression: !=", "DEL SimpleName: jexl", "DEL NumberLiteral: 0", "DEL SimpleType: Script", "DEL SimpleName: data", "DEL SimpleName: functors", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: error", "DEL SimpleName: getLiteral", "DEL SimpleName: xrt", "DEL CastExpression", "DEL SimpleName: vm", "DEL SimpleName: JexlMethod", "DEL SimpleName: narrowArrayType", "DEL TagElement", "DEL SimpleName: data", "DEL SimpleName: Exception", "DEL StringLiteral: \"size() : error executing\"", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: variableName", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL ConditionalExpression", "DEL StringLiteral: \"contains\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: uberspect", "DEL SimpleName: JexlException", "DEL Javadoc", "DEL Block", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Collection<?>", "DEL SimpleName: ctor", "DEL SimpleName: Log", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL SimpleName: jjtGetChild", "DEL SimpleName: argv", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: getContext", "DEL SimpleName: JexlException", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: node", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: arithmetic", "DEL ArrayAccess", "DEL SimpleName: ASTTrueNode", "DEL ExpressionStatement", "DEL FieldAccess", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: visit", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL SimpleName: base", "DEL NumberLiteral: 1", "DEL SimpleName: node", "DEL SimpleType: ASTIdentifier", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL ReturnStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: identifier", "DEL Javadoc", "DEL SimpleName: right", "DEL CatchClause", "DEL SimpleName: Object", "DEL CatchClause", "DEL SimpleName: c", "DEL CastExpression", "DEL SimpleName: propertyNode", "DEL InfixExpression: +", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: jjtGetNumChildren", "DEL ConditionalExpression", "DEL SimpleName: which", "DEL SimpleName: attribute", "DEL SimpleName: uberspect", "DEL CatchClause", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL SimpleName: right", "DEL SimpleType: JexlEngine", "DEL TextElement: Unused, should throw in Parser.", "DEL SimpleName: rightValue", "DEL Javadoc", "DEL TagElement", "DEL CatchClause", "DEL SimpleName: left", "DEL SimpleName: JexlMethod", "DEL SimpleType: Object", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL SimpleName: jjtGetParent", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: JexlException", "DEL SimpleName: visit", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: jjtGetChild", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleType: Object", "DEL SimpleType: java.util.regex.Pattern", "DEL SimpleName: node", "DEL SimpleName: which", "DEL SimpleName: jjtGetChild", "DEL ReturnStatement", "DEL SimpleName: args", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlNode", "DEL CatchClause", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL QualifiedName: Boolean.TRUE", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: left", "DEL NullLiteral", "DEL SimpleType: JexlException", "DEL VariableDeclarationFragment", "DEL SimpleName: ctor", "DEL ThrowStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: xrt", "DEL MethodInvocation", "DEL SimpleName: xrt", "DEL ExpressionStatement", "DEL SimpleType: RuntimeException", "DEL SimpleType: Object", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: isVariable", "DEL SimpleName: right", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: ArithmeticException", "DEL SimpleName: object", "DEL IfStatement", "DEL SimpleName: next", "DEL QualifiedName: base.cache", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: jjtGetNumChildren", "DEL Block", "DEL SimpleName: aContext", "DEL Assignment: =", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL TryStatement", "DEL CatchClause", "DEL CharacterLiteral: '.'", "DEL InfixExpression: &&", "DEL InfixExpression: ==", "DEL SimpleType: Object", "DEL IfStatement", "DEL ExpressionStatement", "DEL QualifiedName: Boolean.TRUE", "DEL MethodInvocation", "DEL SimpleName: getMethod", "DEL SimpleName: strict", "DEL TagElement: @return", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: ASTGENode", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: right", "DEL IfStatement", "DEL SimpleName: visit", "DEL ThisExpression", "DEL TagElement: @since", "DEL SimpleName: ASTNumberLiteral", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL TagElement: @inheritDoc", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: argv", "DEL FieldAccess", "DEL StringLiteral: \"~ error\"", "DEL SimpleName: jjtAccept", "DEL SimpleName: ASTReference", "DEL SimpleName: Map", "DEL SimpleName: image", "DEL Block", "DEL TagElement: @return", "DEL IfStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL StringLiteral: \"<= error\"", "DEL SimpleName: Object", "DEL ThisExpression", "DEL Block", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL Modifier: public", "DEL ThrowStatement", "DEL NullLiteral", "DEL SimpleName: val", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: left", "DEL VariableDeclarationFragment", "DEL SimpleName: register", "DEL SimpleName: uberspect", "DEL ClassInstanceCreation", "DEL CastExpression", "DEL SimpleName: getAttribute", "DEL TagElement", "DEL SimpleName: getAttribute", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL SimpleName: namespace", "DEL SimpleName: JexlMethod", "DEL SimpleType: Object", "DEL SimpleName: length", "DEL SimpleName: visit", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: visit", "DEL SimpleName: eval", "DEL MethodInvocation", "DEL TextElement:  throws JexlException if strict, null otherwise", "DEL SimpleType: Object", "DEL SimpleName: logger", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: getCause", "DEL Block", "DEL TextElement:  ", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlNode", "DEL SimpleName: getPropertyGet", "DEL SimpleName: cancelled", "DEL SimpleType: Iterator", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL SimpleName: cached", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: Script", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: jjtAccept", "DEL SimpleName: xrt", "DEL SimpleType: Object", "DEL SimpleName: aContext", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: uberspect", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL QualifiedName: loopVariable.image", "DEL TagElement", "DEL SimpleName: JexlNode", "DEL SingleVariableDeclaration", "DEL SimpleName: silent", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL CastExpression", "DEL InfixExpression: !=", "DEL SimpleName: isRegister", "DEL SimpleName: Object", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL SimpleName: ASTArrayAccess", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: Object", "DEL WildcardType: ?", "DEL Block", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: r", "DEL SimpleName: String", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL SimpleName: JexlNode", "DEL SimpleName: xjexl", "DEL ArrayAccess", "DEL SimpleName: jjtAccept", "DEL SimpleType: Uberspect", "DEL Modifier: public", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: valNode", "DEL InfixExpression: >=", "DEL SimpleName: name", "DEL SimpleName: narrow", "DEL ReturnStatement", "DEL FieldAccess", "DEL ParameterizedType: Iterator<?>", "DEL IfStatement", "DEL SimpleName: right", "DEL InfixExpression: +", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: interpret", "DEL ThisExpression", "DEL SimpleName: literal", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL Block", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL SimpleType: Number", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: register", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL QualifiedName: Boolean.TRUE", "DEL ReturnStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: left", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: getRegister", "DEL TagElement", "DEL SimpleType: String", "DEL Modifier: protected", "DEL SimpleName: toBoolean", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TagElement: @link", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: SimpleNode", "DEL SimpleName: visit", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlMethod", "DEL SimpleName: invocationFailed", "DEL SimpleName: JexlException", "DEL SingleVariableDeclaration", "DEL SimpleName: e", "DEL MethodInvocation", "DEL ThisExpression", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleType: JexlMethod", "DEL PrefixExpression: !", "DEL SimpleName: right", "DEL NullLiteral", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: namespace", "DEL ThisExpression", "DEL SimpleType: ArithmeticException", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: mod", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"illegal assignment form\"", "DEL Modifier: protected", "DEL SimpleName: Deprecated", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: node", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL SimpleType: JexlNode", "DEL MethodInvocation", "DEL StringLiteral: \"property is null\"", "DEL TagElement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL ThisExpression", "DEL MethodDeclaration", "DEL TextElement: key for a map", "DEL Block", "DEL SimpleName: node", "DEL StringLiteral: \"boolean coercion error\"", "DEL SimpleName: functor", "DEL SimpleName: value", "DEL SimpleType: RuntimeException", "DEL SimpleName: arithmetic", "DEL Block", "DEL NumberLiteral: 1", "DEL NumberLiteral: 0", "DEL SimpleName: ArithmeticException", "DEL IfStatement", "DEL SimpleName: functors", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleType: String", "DEL SimpleName: Map", "DEL SimpleName: data", "DEL ConditionalExpression", "DEL SimpleName: o", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: parameters", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: uberspect", "DEL NumberLiteral: 3", "DEL SimpleName: append", "DEL ThisExpression", "DEL InfixExpression: !=", "DEL SimpleType: Integer", "DEL MethodInvocation", "DEL Assignment: =", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL QualifiedName: JexlException.Variable", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: functor", "DEL IfStatement", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: result", "DEL InfixExpression: &&", "DEL SimpleName: c", "DEL SimpleName: narrowArguments", "DEL MethodDeclaration", "DEL SimpleName: isRegister", "DEL SimpleName: last", "DEL SimpleType: Object", "DEL SimpleName: xrt", "DEL Block", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: mctor", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleType: String", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL SimpleName: Iterator", "DEL MethodDeclaration", "DEL SimpleName: antVar", "DEL SimpleName: arithmetic", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: logger", "DEL SimpleName: Object", "DEL SimpleName: it", "DEL MethodInvocation", "DEL Block", "DEL Assignment: =", "DEL MethodDeclaration", "DEL ContinueStatement", "DEL SimpleName: i", "DEL SimpleName: data", "DEL ParenthesizedExpression", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL TextElement:  ", "DEL SimpleType: Object", "DEL SimpleName: cancelled", "DEL Modifier: final", "DEL SimpleType: JexlMethod", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: image", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL SimpleName: left", "DEL SimpleName: hasNext", "DEL SimpleName: visit", "DEL SimpleName: xrt", "DEL TextElement:  ", "DEL SimpleName: data", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: JexlMethod", "DEL SimpleName: right", "DEL TypeDeclaration: class", "DEL ConditionalExpression", "DEL Block", "DEL Modifier: final", "DEL SimpleName: getAttribute", "DEL CatchClause", "DEL SimpleType: Object", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SimpleName: number", "DEL SimpleName: attribute", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleType: Object", "DEL InfixExpression: &&", "DEL SimpleName: namespace", "DEL Block", "DEL SimpleName: attribute", "DEL TextElement:  the object to get the size of.", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL PostfixExpression: ++", "DEL NumberLiteral: 0", "DEL SimpleName: property", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleType: JexlException", "DEL PrefixExpression: !", "DEL SimpleName: objectNode", "DEL TextElement:  if any error occurs during interpretation.", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL QualifiedName: theNode.image", "DEL IfStatement", "DEL SimpleName: functor", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlException", "DEL NumberLiteral: 0", "DEL SimpleName: jjtGetChild", "DEL PrimitiveType: boolean", "DEL SimpleName: methodName", "DEL SingleVariableDeclaration", "DEL SimpleName: register", "DEL ArrayType: Object[]", "DEL IfStatement", "DEL ConditionalExpression", "DEL SimpleName: jjtGetChild", "DEL SimpleType: JexlNode.Literal", "DEL TagElement", "DEL SimpleName: uberspect", "DEL NullLiteral", "DEL QualifiedName: Boolean.FALSE", "DEL InstanceofExpression", "DEL SimpleName: variableName", "DEL ArrayInitializer", "DEL PrimitiveType: int", "DEL SimpleType: StringBuilder", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL SimpleName: ASTBitwiseXorNode", "DEL TextElement:  ", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL WhileStatement", "DEL SimpleName: argv", "DEL FieldAccess", "DEL SimpleName: call", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlException", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: jjtAccept", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL QualifiedName: left.image", "DEL Block", "DEL SimpleName: vm", "DEL SimpleName: findNullOperand", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL Modifier: private", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: right", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: data", "DEL Assignment: =", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: ASTAndNode", "DEL SimpleName: register", "DEL InstanceofExpression", "DEL ThisExpression", "DEL TextElement:  the value to assign to the object's attribute", "DEL SimpleType: ArithmeticException", "DEL SimpleName: data", "DEL SimpleName: value", "DEL QualifiedName: JexlException.Return", "DEL InfixExpression: &&", "DEL SimpleType: JexlNode", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL ArrayType: Object[]", "DEL SimpleName: data", "DEL SimpleName: flag", "DEL PrefixExpression: !", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL NullLiteral", "DEL TagElement: @return", "DEL SimpleName: node", "DEL SimpleName: right", "DEL IfStatement", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: eval", "DEL PrimitiveType: int", "DEL TextElement:  true for silent, false for verbose", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationExpression", "DEL SimpleName: expressionNode", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: getValue", "DEL PrefixExpression: !", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: object", "DEL SimpleName: it", "DEL SimpleName: ASTArrayAccess", "DEL NullLiteral", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: JexlException", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: argv", "DEL SimpleName: Object", "DEL StringLiteral: \"set object property error\"", "DEL SimpleName: node", "DEL WildcardType: ?", "DEL ThrowStatement", "DEL SimpleName: val", "DEL SimpleName: node", "DEL SimpleName: functors", "DEL SimpleName: JexlNode", "DEL NumberLiteral: 2", "DEL PrimitiveType: int", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL TextElement: Cancellation support. ", "DEL SimpleType: JexlNode", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL SimpleName: getLiteral", "DEL IfStatement", "DEL SimpleName: node", "DEL ReturnStatement", "DEL SimpleName: bean", "DEL SimpleName: strictFlag", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: JexlPropertySet", "DEL TryStatement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL NumberLiteral: 0", "DEL SimpleName: object", "DEL StringLiteral: \"unable to set object property\"", "DEL SimpleName: ASTNullLiteral", "DEL SimpleName: right", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL Block", "DEL Block", "DEL TextElement:  true if nullable variable, false otherwise", "DEL SimpleName: instance", "DEL Block", "DEL IfStatement", "DEL CastExpression", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: ASTReference", "DEL SimpleName: Object", "DEL SimpleName: narrowArguments", "DEL SimpleName: result", "DEL SimpleType: Map", "DEL SimpleName: vs", "DEL SimpleName: jjtAccept", "DEL Assignment: =", "DEL ReturnStatement", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL SimpleName: walk", "DEL TagElement: @inheritDoc", "DEL ReturnStatement", "DEL SimpleName: Interpreter", "DEL SimpleName: arithmetic", "DEL Block", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL TextElement:  a node", "DEL MethodInvocation", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL SimpleName: visit", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL TryStatement", "DEL SimpleName: cached", "DEL SimpleType: Object", "DEL SimpleName: jjtAccept", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: node", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: visit", "DEL SimpleType: JexlException", "DEL SimpleName: jjtAccept", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: narrowArguments", "DEL SimpleName: propertyNode", "DEL SimpleName: condition", "DEL CatchClause", "DEL Block", "DEL TextElement:  Do not use; will be removed in a later version", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: uberspect", "DEL SimpleType: ASTSizeFunction", "DEL SimpleName: warn", "DEL SimpleName: node", "DEL QualifiedName: Boolean.FALSE", "DEL VariableDeclarationStatement", "DEL SimpleName: JexlEngine", "DEL SimpleType: JexlNode", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: node", "DEL SimpleName: right", "DEL SimpleName: namespace", "DEL SingleVariableDeclaration", "DEL SimpleName: vs", "DEL SimpleName: object", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL SimpleType: Iterator", "DEL IfStatement", "DEL Block", "DEL SimpleName: left", "DEL VariableDeclarationStatement", "DEL SimpleName: index", "DEL Modifier: public", "DEL SimpleName: Map", "DEL SimpleName: node", "DEL SimpleName: JexlException", "DEL SimpleName: registers", "DEL IfStatement", "DEL SimpleName: node", "DEL ThrowStatement", "DEL NullLiteral", "DEL IfStatement", "DEL ThisExpression", "DEL SimpleType: ArithmeticException", "DEL SimpleName: Object", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL StringLiteral: \", property: \"", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: variableName", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SimpleName: i", "DEL SimpleName: gfunctor", "DEL IfStatement", "DEL SimpleName: xrt", "DEL SimpleName: bean", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: jjtAccept", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL ConditionalExpression", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL TextElement:  Do not use; will be removed in a later version", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleType: ASTFunctionNode", "DEL SimpleName: e", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: getClass", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: left", "DEL MethodDeclaration", "DEL SimpleName: uberspect", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL TryStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: left", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL IfStatement", "DEL ReturnStatement", "DEL TextElement:  the array of registers", "DEL SimpleName: visit", "DEL TagElement: @inheritDoc", "DEL SimpleName: isCacheable", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL Block", "DEL Assignment: =", "DEL SimpleName: append", "DEL SimpleName: JexlMethod", "DEL SimpleName: arithmetic", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement:  to retrieve value from", "DEL SimpleName: vm", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"unexpected type of node\"", "DEL QualifiedName: base.functors", "DEL SimpleName: Deprecated", "DEL ParameterizedType: Map<?,?>", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: flag", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SimpleName: bean", "DEL SimpleName: visit", "DEL ExpressionStatement", "DEL SimpleName: left", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: ArithmeticException", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: name", "DEL TextElement:  the left argument", "DEL Javadoc", "DEL SimpleName: tryFailed", "DEL FieldAccess", "DEL MethodInvocation", "DEL TagElement: @since", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL ThisExpression", "DEL SimpleName: jexl", "DEL SimpleType: Object", "DEL ArrayInitializer", "DEL SimpleName: strict", "DEL SimpleName: node", "DEL SimpleName: left", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: left", "DEL TextElement:  the JexlException wrapping the original error", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: c", "DEL NumberLiteral: 1", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: val", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: JexlException", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleType: ASTAmbiguous", "DEL SimpleName: node", "DEL SimpleName: isVariable", "DEL CatchClause", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: cache", "DEL MarkerAnnotation", "DEL SimpleName: left", "DEL Modifier: public", "DEL SimpleName: value", "DEL SimpleName: objectNode", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL NumberLiteral: 0", "DEL SimpleName: jjtGetChild", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL QualifiedName: identifier.image", "DEL Block", "DEL NumberLiteral: 1", "DEL QualifiedName: JexlException.Cancel", "DEL InfixExpression: +", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: o", "DEL SimpleName: Object", "DEL NumberLiteral: 1", "DEL Block", "DEL SimpleName: left", "DEL SimpleName: data", "DEL SimpleName: invoke", "DEL Javadoc", "DEL SimpleName: argc", "DEL SimpleType: Object", "DEL SimpleName: get", "DEL SimpleType: JexlException", "DEL ExpressionStatement", "DEL PrefixExpression: ++", "DEL SimpleName: JexlException", "DEL SimpleName: n", "DEL Block", "DEL SimpleName: propertyName", "DEL ThisExpression", "DEL SimpleType: InvocationTargetException", "DEL SimpleType: Object", "DEL NullLiteral", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: data", "DEL ThrowStatement", "DEL SimpleName: val", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL PrimitiveType: void", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: arithmetic", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TextElement:  true if silent, false otherwise", "DEL SimpleName: getUberspect", "DEL ClassInstanceCreation", "DEL ParameterizedType: Map<Object,Object>", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL SimpleName: String", "DEL SimpleName: get", "DEL SimpleName: result", "DEL ExpressionStatement", "DEL SimpleName: ArithmeticException", "DEL SimpleType: JexlException.Variable", "DEL StringLiteral: \"-\"", "DEL ThrowStatement", "DEL InstanceofExpression", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: jjtAccept", "DEL ReturnStatement", "DEL SimpleType: JexlContext", "DEL SimpleName: length", "DEL SimpleName: xjexl", "DEL SingleVariableDeclaration", "DEL SimpleName: vg", "DEL SimpleName: IllegalArgumentException", "DEL MethodInvocation", "DEL SimpleType: ASTBlock", "DEL SimpleType: JexlNode", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL ForStatement", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL StringLiteral: \"unknown operator \"", "DEL VariableDeclarationStatement", "DEL TextElement:  ", "DEL TextElement: control over the error generation; ie, ternaries can return null even if the engine in strict mode", "DEL SimpleName: name", "DEL SimpleName: setSilent", "DEL TagElement: @param", "DEL QualifiedName: JexlException.Property", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: data", "DEL InstanceofExpression", "DEL SimpleName: args", "DEL ReturnStatement", "DEL SimpleName: rightValue", "DEL Block", "DEL SimpleName: strict", "DEL SimpleName: left", "DEL SimpleName: theRegisters", "DEL SimpleName: propertyName", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL ExpressionStatement", "DEL SimpleName: result", "DEL FieldAccess", "DEL SimpleName: Map", "DEL TagElement", "DEL SimpleName: index", "DEL SimpleName: next", "DEL SimpleName: JexlNode", "DEL TextElement:  the JexlException (\"undefined variable \" + variable)", "DEL SimpleName: r", "DEL SimpleName: right", "DEL StringLiteral: \"set object property error\"", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: put", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL SimpleName: bitwiseComplement", "DEL ParenthesizedExpression", "DEL SimpleName: number", "DEL Block", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: EMPTY_PARAMS", "DEL SimpleName: equals", "DEL TagElement: @return", "DEL SimpleName: String", "DEL TextElement:  ", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL TagElement", "DEL InfixExpression: ||", "DEL SimpleName: sizeOf", "DEL SimpleName: data", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: Double", "DEL IfStatement", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: setter", "DEL SimpleType: Iterator", "DEL VariableDeclarationFragment", "DEL SimpleName: getParameters", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL ParameterizedType: Collection<?>", "DEL SimpleName: RuntimeException", "DEL SimpleName: ASTERNode", "DEL SimpleName: Object", "DEL ThisExpression", "DEL Dimension", "DEL ReturnStatement", "DEL InfixExpression: <", "DEL SimpleName: o", "DEL Block", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL NullLiteral", "DEL MethodInvocation", "DEL Dimension", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleType: JexlPropertySet", "DEL SimpleName: jjtGetChild", "DEL SimpleName: setter", "DEL MethodInvocation", "DEL SimpleName: node", "DEL ConditionalExpression", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: visit", "DEL Block", "DEL ParenthesizedExpression", "DEL Block", "DEL InstanceofExpression", "DEL SimpleName: xrt", "DEL SimpleName: Object", "DEL ConditionalExpression", "DEL ConditionalExpression", "DEL IfStatement", "DEL SimpleName: right", "DEL SimpleName: JexlNode", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleType: InvocationTargetException", "DEL NumberLiteral: 0", "DEL InstanceofExpression", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: jjtAccept", "DEL ThrowStatement", "DEL VariableDeclarationExpression", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL Modifier: public", "DEL TextElement:  the context to evaluate expression", "DEL VariableDeclarationStatement", "DEL SimpleName: namespace", "DEL TextElement: Cache executors. ", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: data", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: data", "DEL SimpleName: strict", "DEL MethodDeclaration", "DEL NullLiteral", "DEL ReturnStatement", "DEL StringLiteral: \"!~ error\"", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: iterableValue", "DEL SimpleName: Object", "DEL TextElement: Gets an attribute of an object.", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleName: logger", "DEL NumberLiteral: 2", "DEL SimpleName: data", "DEL SimpleName: argc", "DEL SimpleName: JexlMethod", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: statement", "DEL SimpleName: jjtAccept", "DEL SimpleName: attribute", "DEL SimpleType: String", "DEL MarkerAnnotation", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: itemsIterator", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: argv", "DEL SimpleType: JexlException", "DEL SimpleType: JexlException", "DEL SimpleName: getRegister", "DEL TextElement:  ", "DEL SimpleName: jjtGetChild", "DEL ThisExpression", "DEL SimpleType: ASTGTNode", "DEL StringLiteral: \"contains\"", "DEL SimpleName: node", "DEL SimpleName: object", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL SimpleName: argv", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleType: Object", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: jjtGetChild", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: bean", "DEL SimpleName: has", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleName: xany", "DEL SimpleName: next", "DEL Block", "DEL Javadoc", "DEL SimpleName: visit", "DEL Modifier: protected", "DEL Block", "DEL Assignment: =", "DEL SimpleName: error", "DEL IfStatement", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: object", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: jjtGetNumChildren", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL NullLiteral", "DEL Block", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: xrt", "DEL NullLiteral", "DEL TagElement", "DEL NullLiteral", "DEL StringLiteral: \"method error\"", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: argc", "DEL Block", "DEL ThisExpression", "DEL SimpleName: node", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: right", "DEL VariableDeclarationStatement", "DEL TextElement:  ", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: Map", "DEL SimpleName: jjtAccept", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: JexlException", "DEL SimpleType: Exception", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: ASTMapLiteral", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL Block", "DEL TextElement:  whether this interpreter runs in strict mode", "DEL Modifier: public", "DEL TextElement: <p>", "DEL SimpleName: xrt", "DEL SimpleType: ASTIdentifier", "DEL StringLiteral: \"!= error\"", "DEL SimpleName: valNode", "DEL SimpleType: JexlNode", "DEL Block", "DEL SimpleName: data", "DEL TagElement", "DEL SimpleName: equals", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleType: Object", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: result", "DEL SimpleName: xrt", "DEL Block", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement: An interpreter of JEXL syntax.", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SimpleName: getClass", "DEL SimpleName: toString", "DEL PrimitiveType: boolean", "DEL SimpleType: ASTBitwiseXorNode", "DEL SimpleName: JexlNode", "DEL SimpleName: var", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL ThisExpression", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: getClass", "DEL Block", "DEL SimpleName: xjexl", "DEL Block", "DEL ThrowStatement", "DEL ReturnStatement", "DEL SimpleName: regStrs", "DEL TextElement:  the script or expression to interpret.", "DEL SimpleName: jjtAccept", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL SimpleType: JexlException", "DEL Javadoc", "DEL ArrayType: Object[]", "DEL PrefixExpression: !", "DEL SimpleType: Object", "DEL SimpleName: Integer", "DEL ReturnStatement", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL Javadoc", "DEL SimpleType: JexlException", "DEL Block", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL SimpleName: Number", "DEL MethodInvocation", "DEL CatchClause", "DEL NumberLiteral: 1", "DEL QualifiedName: node.image", "DEL CatchClause", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL SimpleName: i", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: isRegister", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL InfixExpression: -", "DEL SimpleName: register", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL SimpleName: result", "DEL SimpleName: xrt", "DEL SimpleName: propertyName", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL CatchClause", "DEL ArrayCreation", "DEL SimpleType: Exception", "DEL ReturnStatement", "DEL CatchClause", "DEL ArrayType: Object[]", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL SimpleName: data", "DEL VariableDeclarationStatement", "DEL SimpleName: ArithmeticException", "DEL VariableDeclarationFragment", "DEL SimpleName: eval", "DEL SimpleName: right", "DEL IfStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TagElement: @inheritDoc", "DEL SimpleType: JexlException.Cancel", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: left", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: me", "DEL TagElement: @inheritDoc", "DEL TagElement: @inheritDoc", "DEL SimpleName: Object", "DEL SimpleName: Double", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleType: JexlNode", "DEL SimpleName: xrt", "DEL SimpleType: ASTEmptyFunction", "DEL SimpleName: node", "DEL SimpleName: node", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: RuntimeException", "DEL ArrayCreation", "DEL SimpleName: uberspect", "DEL ArrayType: String[]", "DEL TagElement", "DEL SimpleName: jjtAccept", "DEL SimpleName: xjexl", "DEL SimpleName: ASTLENode", "DEL ReturnStatement", "DEL SimpleType: ASTIdentifier", "DEL SimpleType: ASTIdentifier", "DEL PrefixExpression: !", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL InstanceofExpression", "DEL SimpleName: data", "DEL SimpleName: xrt", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL SimpleName: left", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ForStatement", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: prefix", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL TextElement:  ", "DEL SimpleName: getAttribute", "DEL Block", "DEL Block", "DEL CatchClause", "DEL SimpleType: JexlException", "DEL SingleVariableDeclaration", "DEL SimpleName: argb", "DEL SimpleName: getMessage", "DEL NullLiteral", "DEL SimpleName: Object", "DEL ParameterizedType: Collection<?>", "DEL SimpleType: Object", "DEL IfStatement", "DEL SimpleType: Object", "DEL PrimitiveType: boolean", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlException", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: xrt", "DEL VariableDeclarationFragment", "DEL SimpleName: theNode", "DEL InfixExpression: >", "DEL ReturnStatement", "DEL SimpleName: data", "DEL FieldDeclaration", "DEL SimpleName: value", "DEL SimpleName: xrt", "DEL IfStatement", "DEL TextElement: Triggered when method, function or constructor invocation fails.", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: xrt", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: ASTLTNode", "DEL SimpleName: unknownVariable", "DEL TextElement: The map of registered functions. ", "DEL SimpleName: context", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL QualifiedName: JexlException.Cancel", "DEL SimpleName: o", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: right", "DEL SimpleName: node", "DEL Block", "DEL BreakStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: Sets an attribute of an object.", "DEL NullLiteral", "DEL SimpleName: mctor", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL InfixExpression: <=", "DEL SimpleName: eval", "DEL SimpleName: xnode", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleType: JexlException.Cancel", "DEL ThisExpression", "DEL SimpleName: data", "DEL TryStatement", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: warn", "DEL ThisExpression", "DEL SimpleName: InvocationTargetException", "DEL TagElement: @return", "DEL SimpleName: node", "DEL InfixExpression: ==", "DEL SimpleType: ArithmeticException", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: argv", "DEL CastExpression", "DEL SimpleName: itemsIterator", "DEL TagElement", "DEL SimpleName: objectNode", "DEL SimpleType: ASTReferenceExpression", "DEL SimpleName: xrt", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL ArrayInitializer", "DEL SimpleType: Object", "DEL TagElement: @link", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: data", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: unknownVariable", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: jjtGetChild", "DEL SimpleName: vm", "DEL Assignment: =", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: next", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtGetChild", "DEL SimpleName: error", "DEL SimpleName: HashMap", "DEL TagElement: @inheritDoc", "DEL SimpleName: JexlException", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: ArithmeticException", "DEL PrefixExpression: !", "DEL VariableDeclarationStatement", "DEL SimpleName: prefix", "DEL SimpleName: i", "DEL SimpleName: arithmetic", "DEL SimpleName: property", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL StringLiteral: \"unknown variable \"", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: left", "DEL SimpleType: ASTReference", "DEL MethodInvocation", "DEL QualifiedName: JexlNode.Literal", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleType: ArithmeticException", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL ThisExpression", "DEL Block", "DEL NullLiteral", "DEL SimpleName: JexlContext", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlMethod", "DEL SimpleName: Object", "DEL TryStatement", "DEL MethodDeclaration", "DEL SimpleName: cached", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: result", "DEL PostfixExpression: ++", "DEL SimpleType: ASTArrayAccess", "DEL InfixExpression: <", "DEL IfStatement", "DEL SimpleType: ASTBitwiseComplNode", "DEL ParameterizedType: Map<String,Object>", "DEL InfixExpression: ==", "DEL Block", "DEL TryStatement", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL SimpleName: vs", "DEL InfixExpression: ==", "DEL SimpleName: property", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL PrimitiveType: int", "DEL SimpleName: Object", "DEL WhileStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: xrt", "DEL SimpleType: ASTSizeMethod", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: argv", "DEL SimpleName: contains", "DEL SimpleName: xjexl", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlPropertySet", "DEL SimpleName: bean", "DEL SimpleName: ASTAdditiveOperator", "DEL MethodInvocation", "DEL SimpleName: cache", "DEL SimpleName: Exception", "DEL ThrowStatement", "DEL ExpressionStatement", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: functions", "DEL SimpleName: value", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleType: ArithmeticException", "DEL SingleVariableDeclaration", "DEL SimpleName: Exception", "DEL CastExpression", "DEL SimpleName: attribute", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: object", "DEL InstanceofExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: theNode", "DEL SimpleName: visit", "DEL NumberLiteral: 1", "DEL SimpleName: node", "DEL SimpleName: vm", "DEL SimpleName: result", "DEL SimpleName: object", "DEL SimpleName: Iterator", "DEL SimpleName: left", "DEL SimpleName: Object", "DEL SimpleType: ASTArrayLiteral", "DEL MethodInvocation", "DEL SimpleName: e", "DEL ArrayType: Object[]", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL IfStatement", "DEL TextElement:  ", "DEL TextElement: Empty parameters for method matching. ", "DEL Block", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL TextElement:  the RuntimeException", "DEL StringLiteral: \"< error\"", "DEL CastExpression", "DEL ThrowStatement", "DEL InfixExpression: !=", "DEL TextElement:  the bean this method should be invoked upon", "DEL Block", "DEL SimpleName: property", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: prefix", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL Modifier: protected", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL SimpleType: Object", "DEL InfixExpression: <", "DEL SimpleName: arithmetic", "DEL ThisExpression", "DEL TextElement:  the engine creating this interpreter", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: iterableValue", "DEL Modifier: protected", "DEL SimpleName: isCancelled", "DEL SimpleName: c", "DEL SimpleName: Double", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: ArithmeticException", "DEL TextElement: Strict interpreter flag. Do not modify; will be made final in a later version. ", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL SimpleType: ASTIdentifier", "DEL InstanceofExpression", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ForStatement", "DEL Block", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL FieldDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL ReturnStatement", "DEL SimpleName: rightValue", "DEL SimpleName: node", "DEL SimpleName: gfunctor", "DEL SimpleType: ArithmeticException", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: isEmpty", "DEL Block", "DEL TextElement: Gets the context.", "DEL InstanceofExpression", "DEL SimpleName: toString", "DEL SimpleName: jjtGetChild", "DEL SimpleName: data", "DEL SimpleType: JexlException", "DEL InfixExpression: >=", "DEL SimpleName: String", "DEL SimpleName: cancelled", "DEL TextElement: key for a map", "DEL SimpleName: Deprecated", "DEL SimpleName: EMPTY_PARAMS", "DEL SimpleName: toBoolean", "DEL SingleVariableDeclaration", "DEL SimpleName: functor", "DEL SimpleType: JexlException", "DEL TagElement", "DEL SimpleType: Collection", "DEL Block", "DEL SimpleName: attribute", "DEL SimpleName: contains", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleType: JexlException.Property", "DEL Assignment: =", "DEL Block", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL SimpleName: nindex", "DEL SimpleName: Object", "DEL TextElement: Unused, satisfy ParserVisitor interface.", "DEL ThisExpression", "DEL SimpleName: right", "DEL TagElement", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: Exception", "DEL TextElement: The uberspect. ", "DEL Assignment: =", "DEL ReturnStatement", "DEL ArrayType: Object[]", "DEL SimpleName: node", "DEL SimpleName: ASTSizeMethod", "DEL NullLiteral", "DEL Block", "DEL SimpleType: Object", "DEL TextElement:  the attribute value", "DEL IfStatement", "DEL TextElement:  ", "DEL SimpleName: invocationFailed", "DEL NumberLiteral: 1", "DEL NullLiteral", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL BooleanLiteral: false", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: jjtGetChild", "DEL SimpleName: JexlException", "DEL ExpressionStatement", "DEL Block", "DEL IfStatement", "DEL SimpleType: Object", "DEL NullLiteral", "DEL SimpleName: data", "DEL SimpleName: data", "DEL TextElement:  to set the value to", "DEL ThisExpression", "DEL SimpleType: JexlException", "DEL SimpleName: argc", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: val", "DEL SimpleName: which", "DEL SimpleName: StringBuilder", "DEL Block", "DEL SimpleName: data", "DEL IfStatement", "DEL SimpleName: setAttribute", "DEL ThrowStatement", "DEL SimpleName: arithmetic", "DEL SimpleName: node", "DEL TagElement: @param", "DEL Javadoc", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getAttribute", "DEL SimpleName: jjtAccept", "DEL SimpleType: ASTWhileStatement", "DEL SimpleType: Object", "DEL SimpleName: condition", "DEL MethodDeclaration", "DEL SimpleName: isSilent", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: strictFlag", "DEL SimpleType: JexlNode", "DEL SimpleName: JexlArithmetic", "DEL InfixExpression: ==", "DEL TextElement: The lifetime of such instances span the current expression or script evaluation.", "DEL SimpleName: cache", "DEL FieldAccess", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlException.Return", "DEL MethodDeclaration", "DEL SimpleName: ASTIdentifier", "DEL VariableDeclarationFragment", "DEL SimpleName: registers", "DEL SimpleType: JexlException", "DEL InfixExpression: !=", "DEL SimpleType: ASTReference", "DEL SimpleName: Object", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: property", "DEL SimpleName: node", "DEL SimpleName: variableName", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL InstanceofExpression", "DEL SimpleName: ASTUnaryMinusNode", "DEL PrimitiveType: boolean", "DEL SimpleName: argc", "DEL NullLiteral", "DEL SimpleName: node", "DEL QualifiedName: Boolean.TRUE", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: xnode", "DEL SimpleName: narrow", "DEL Assignment: =", "DEL SimpleName: data", "DEL TagElement", "DEL ArrayAccess", "DEL Block", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: data", "DEL SimpleType: ASTNENode", "DEL ThisExpression", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL SimpleName: JexlNode", "DEL TagElement", "DEL SimpleName: statement", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL ThrowStatement", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: theRegisters", "DEL SimpleName: xnode", "DEL MethodInvocation", "DEL NullLiteral", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: vg", "DEL SimpleName: ASTArrayLiteral", "DEL SimpleName: functors", "DEL Block", "DEL SimpleName: RuntimeException", "DEL VariableDeclarationFragment", "DEL CatchClause", "DEL SimpleName: childCount", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: JexlException", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: vm", "DEL ReturnStatement", "DEL Dimension", "DEL ThisExpression", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL QualifiedName: methodNode.image", "DEL CatchClause", "DEL SimpleType: Object", "DEL SimpleName: result", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL TextElement:  the left, right or parent node", "DEL SimpleName: jjtGetNumChildren", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL Block", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL IfStatement", "DEL Dimension", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParameterizedType: Set<?>", "DEL SimpleName: objectNode", "DEL VariableDeclarationStatement", "DEL SimpleName: right", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: attribute", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: xrt", "DEL InfixExpression: >=", "DEL SimpleName: JexlNode", "DEL IfStatement", "DEL ExpressionStatement", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL ThisExpression", "DEL Block", "DEL SimpleName: Object", "DEL Assignment: =", "DEL Block", "DEL Javadoc", "DEL SimpleName: JexlException", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL SimpleName: o", "DEL ReturnStatement", "DEL Block", "DEL TextElement:  ", "DEL SimpleType: ASTDivNode", "DEL VariableDeclarationFragment", "DEL SimpleType: ASTAssignment", "DEL SimpleName: left", "DEL ThisExpression", "DEL SimpleName: eval", "DEL SimpleName: String", "DEL SimpleName: data", "DEL SimpleName: jexl", "DEL SingleVariableDeclaration", "DEL SimpleName: right", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: i", "DEL ParenthesizedExpression", "DEL SimpleName: next", "DEL SimpleType: Object", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL SimpleName: getMessage", "DEL SimpleName: node", "DEL PrimitiveType: boolean", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: object", "DEL MethodInvocation", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL IfStatement", "DEL SimpleName: object", "DEL NullLiteral", "DEL TextElement:  ", "DEL SimpleName: getIterator", "DEL TagElement: @param", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: findNullOperand", "DEL SimpleName: JexlContext", "DEL SimpleName: getMethod", "DEL MarkerAnnotation", "DEL SimpleName: node", "DEL SimpleName: xrt", "DEL SimpleName: node", "DEL Assignment: =", "DEL SimpleName: node", "DEL Block", "DEL SimpleType: Object", "DEL Block", "DEL ArrayType: Object[]", "DEL SimpleName: parameters", "DEL SimpleName: visit", "DEL SimpleType: String", "DEL SimpleName: ASTNENode", "DEL SingleVariableDeclaration", "DEL SimpleName: hasNext", "DEL ReturnStatement", "DEL SimpleName: jjtAccept", "DEL QualifiedName: jexl.uberspect", "DEL PrimitiveType: void", "DEL QualifiedName: base.functions", "DEL NumberLiteral: 0", "DEL InstanceofExpression", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL IfStatement", "DEL Block", "DEL SimpleName: nindex", "DEL SimpleType: Object", "DEL SimpleName: matches", "DEL SimpleName: ASTJexlScript", "DEL TryStatement", "DEL SimpleName: object", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL Block", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement:  the node that evaluated as the object", "DEL SimpleName: frame", "DEL SimpleType: Collection", "DEL SimpleName: set", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: e", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: xnode", "DEL SimpleType: Object", "DEL NumberLiteral: 0", "DEL SimpleName: getCause", "DEL Block", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: JexlNode", "DEL SimpleName: object", "DEL SimpleName: val", "DEL ThrowStatement", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"== error\"", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL QualifiedName: Boolean.TRUE", "DEL VariableDeclarationFragment", "DEL StringLiteral: \", argument: \"", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL ArrayType: Object[]", "DEL SimpleName: right", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL Block", "DEL SimpleName: xjexl", "DEL SimpleName: findNullOperand", "DEL IfStatement", "DEL SimpleName: context", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: jjtGetChild", "DEL SimpleName: walk", "DEL SimpleName: argv", "DEL TagElement: @inheritDoc", "DEL FieldAccess", "DEL ThrowStatement", "DEL SimpleName: xrt", "DEL ThrowStatement", "DEL SimpleName: xrt", "DEL TextElement:  an ", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: call", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL QualifiedName: Boolean.TRUE", "DEL IfStatement", "DEL PrefixExpression: !", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: right", "DEL SimpleType: JexlException", "DEL SimpleName: visit", "DEL TagElement: @deprecated", "DEL SimpleName: val", "DEL SimpleName: jjtAccept", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL TagElement: @param", "DEL FieldAccess", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: arithmetic", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL ConditionalExpression", "DEL SimpleName: i", "DEL SimpleName: objectNode", "DEL TagElement: @return", "DEL ParameterizedType: Map<?,?>", "DEL NumberLiteral: 0", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: node", "DEL Javadoc", "DEL InfixExpression: ==", "DEL TextElement: Sets whether this interpreter considers unknown variables, methods and constructors as errors.", "DEL Assignment: =", "DEL SimpleName: getCause", "DEL Block", "DEL SimpleName: jjtGetParent", "DEL TagElement: @inheritDoc", "DEL SimpleName: left", "DEL ContinueStatement", "DEL SimpleType: Object", "DEL Modifier: public", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL Dimension", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: left", "DEL ArrayInitializer", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: data", "DEL SimpleName: left", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: node", "DEL FieldAccess", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL TextElement: Sets this interpreter registers for bean access/assign expressions.", "DEL SimpleName: value", "DEL QualifiedName: jexl.logger", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: xjexl", "DEL SimpleName: data", "DEL SimpleName: subtract", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL SimpleName: String", "DEL SimpleName: uberspect", "DEL Modifier: public", "DEL SimpleName: value", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: it", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL SimpleName: getMessage", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL SimpleName: sizeOf", "DEL WildcardType: ?", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL Dimension", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: arithmetic", "DEL SimpleName: size", "DEL StringLiteral: \"!~ invocation error\"", "DEL SimpleName: strict", "DEL SimpleName: v", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: register", "DEL SimpleName: vg", "DEL SimpleName: registers", "DEL TagElement: @param", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL WildcardType: ?", "DEL VariableDeclarationExpression", "DEL Javadoc", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleType: SimpleNode", "DEL TextElement:  the node carrying the method name", "DEL Assignment: =", "DEL SimpleName: v", "DEL SimpleName: put", "DEL SimpleType: ASTReturnStatement", "DEL Block", "DEL ThisExpression", "DEL QualifiedName: argv.length", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleType: String", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: invoke", "DEL SimpleName: silent", "DEL InfixExpression: &&", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleName: size", "DEL SimpleName: String", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: node", "DEL IfStatement", "DEL SimpleName: jjtAccept", "DEL TagElement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL SimpleName: numChildren", "DEL ThrowStatement", "DEL CatchClause", "DEL SimpleName: literal", "DEL Modifier: public", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL TryStatement", "DEL SimpleType: ASTERNode", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Block", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: arithmetic", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: object", "DEL SimpleName: c", "DEL TryStatement", "DEL ReturnStatement", "DEL SimpleName: ArithmeticException", "DEL ArrayCreation", "DEL SimpleName: Class", "DEL SimpleName: jjtGetChild", "DEL SimpleName: JexlException", "DEL TagElement: @inheritDoc", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL ThisExpression", "DEL Javadoc", "DEL SimpleName: register", "DEL SimpleType: ASTIdentifier", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL ReturnStatement", "DEL CatchClause", "DEL SimpleName: getClass", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: jjtAccept", "DEL Modifier: public", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: vm", "DEL SimpleName: uberspect", "DEL SimpleName: tryInvoke", "DEL SimpleName: Map", "DEL SimpleName: node", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL TagElement: @param", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL IfStatement", "DEL PrimitiveType: int", "DEL SimpleName: Collection", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL ExpressionStatement", "DEL SimpleType: Number", "DEL IfStatement", "DEL SimpleName: propertyNode", "DEL MethodInvocation", "DEL SimpleType: JexlException.Return", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: logger", "DEL SimpleName: xrt", "DEL SimpleName: node", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL TagElement: @param", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL SimpleName: argv", "DEL IfStatement", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: ASTStringLiteral", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0", "DEL SimpleName: data", "DEL SimpleName: expression", "DEL ThisExpression", "DEL SimpleName: jjtAccept", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL TextElement: Creates an interpreter.", "DEL SimpleName: JexlMethod", "DEL SimpleName: node", "DEL StringLiteral: \"+\"", "DEL QualifiedName: jexl.cache", "DEL SimpleName: params", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"bean is null\"", "DEL TextElement:  ", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"> error\"", "DEL SimpleName: right", "DEL SimpleName: data", "DEL SimpleName: result", "DEL InstanceofExpression", "DEL SimpleName: Object", "DEL NumberLiteral: 0", "DEL ForStatement", "DEL TextElement: key for a map", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleName: node", "DEL SimpleName: propertyNode", "DEL SimpleName: variableName", "DEL ParenthesizedExpression", "DEL SimpleName: jjtGetChild", "DEL InfixExpression: &&", "DEL IfStatement", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SimpleName: JexlNode", "DEL SimpleType: Map", "DEL SimpleName: Interpreter", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: antVar", "DEL SimpleName: narrow", "DEL SimpleName: data", "DEL ConditionalExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: arithmetic", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: argv", "DEL QualifiedName: Boolean.TRUE", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Map", "DEL SimpleName: array", "DEL SimpleName: JexlContext", "DEL TextElement:  ", "DEL SimpleName: node", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlException", "DEL SimpleName: left", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: right", "DEL BooleanLiteral: false", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: visit", "DEL SimpleName: uberspect", "DEL SimpleName: iterableValue", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: xjexl", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: methodName", "DEL Block", "DEL ThisExpression", "DEL SimpleName: jjtGetChild", "DEL SimpleName: ArithmeticException", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: data", "DEL Block", "DEL SimpleName: argv", "DEL Assignment: =", "DEL SimpleName: right", "DEL SimpleType: JexlPropertySet", "DEL SimpleName: jjtGetChild", "DEL SimpleType: JexlException", "DEL SimpleName: node", "DEL TextElement: Creates an interpreter.", "DEL SimpleName: Object", "DEL Assignment: =", "DEL MethodInvocation", "DEL StringLiteral: \">= error\"", "DEL SimpleName: jjtGetChild", "DEL SimpleName: registers", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL SimpleName: jjtGetChild", "DEL SimpleType: Collection", "DEL TagElement: @return", "DEL PostfixExpression: ++", "DEL SimpleName: strict", "DEL SimpleName: last", "DEL TagElement: @inheritDoc", "DEL SimpleName: jjtGetChild", "DEL SimpleName: val", "DEL SimpleType: Object", "DEL NumberLiteral: 1", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleName: uberspect", "DEL Block", "DEL PrefixExpression: ++", "DEL IfStatement", "DEL SimpleName: result", "DEL SimpleType: IllegalArgumentException", "DEL SimpleType: JexlMethod", "DEL SimpleName: getLength", "DEL ThisExpression", "DEL PrimitiveType: int", "DEL SimpleName: sizeOf", "DEL SimpleName: node", "DEL SimpleType: ASTConstructorNode", "DEL SingleVariableDeclaration", "DEL SimpleType: ASTVar", "DEL FieldAccess", "DEL ThisExpression", "DEL MethodInvocation", "DEL StringLiteral: \"=~ invocation error\"", "DEL InfixExpression: !=", "DEL SimpleName: registers", "DEL SimpleName: isCacheable", "DEL SimpleName: namespace", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL TextElement:  the parent node", "DEL SimpleType: Double", "DEL SimpleName: visit", "DEL Block", "DEL Modifier: protected", "DEL SimpleName: JexlPropertyGet", "DEL VariableDeclarationFragment", "DEL SimpleName: tryInvoke", "DEL NumberLiteral: 1", "DEL NullLiteral", "DEL SimpleType: Exception", "DEL SimpleName: JexlException", "DEL SimpleType: Object", "DEL ThrowStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: args", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL TextElement: 2 - if this fails, narrow the arguments and try again", "DEL VariableDeclarationFragment", "DEL SimpleName: ASTIdentifier", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SimpleName: node", "DEL MethodInvocation", "DEL QualifiedName: base.context", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: e", "DEL SimpleName: variableName", "DEL ReturnStatement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: xjexl", "DEL SingleVariableDeclaration", "DEL QualifiedName: JexlException.Cancel", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: jjtGetNumChildren", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: JexlException", "DEL SimpleName: ASTIdentifier", "DEL ExpressionStatement", "DEL NullLiteral", "DEL ExpressionStatement", "DEL WhileStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL SimpleName: ASTReference", "DEL SimpleName: value", "DEL SimpleName: contains", "DEL ReturnStatement", "DEL SimpleName: uberspect", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL InfixExpression: &&", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL SimpleName: data", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: JexlException", "DEL SimpleName: ASTIdentifier", "DEL Block", "DEL SimpleName: result", "DEL Block", "DEL SimpleName: object", "DEL ArrayInitializer", "DEL SimpleName: node", "DEL Block", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: jjtGetChild", "DEL SimpleName: xnode", "DEL SimpleName: node", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: right", "DEL ArrayType: Object[]", "DEL ReturnStatement", "DEL SimpleName: methodName", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL MethodInvocation", "DEL ThrowStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: resolveNamespace", "DEL SimpleName: ASTVar", "DEL TextElement:  whether this interpreter runs in silent mode", "DEL SimpleName: childCount", "DEL SimpleName: o", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL SimpleName: objectNode", "DEL SimpleName: right", "DEL ParameterizedType: Map<?,?>", "DEL NullLiteral", "DEL SimpleName: right", "DEL Block", "DEL SimpleName: i", "DEL InfixExpression: &&", "DEL SimpleName: RuntimeException", "DEL Modifier: protected", "DEL SimpleName: right", "DEL SimpleType: JexlException", "DEL TagElement", "DEL SimpleName: context", "DEL SimpleName: JexlException", "DEL SimpleType: ASTArrayAccess", "DEL Block", "DEL SimpleName: register", "DEL SimpleName: theNode", "DEL SimpleType: JexlException.Cancel", "DEL PostfixExpression: ++", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SimpleName: property", "DEL WildcardType: ?", "DEL StringLiteral: \"contains\"", "DEL SimpleName: next", "DEL NullLiteral", "DEL SimpleType: HashMap", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleType: JexlNode", "DEL SimpleName: functors", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Assignment: &=", "DEL MethodInvocation", "DEL SimpleName: walk", "DEL StringLiteral: \"unable to instantiate namespace \"", "DEL SimpleName: right", "DEL NumberLiteral: 3", "DEL SimpleName: UnsupportedOperationException", "DEL SingleVariableDeclaration", "DEL SimpleName: jjtAccept", "DEL SimpleName: xrt", "DEL Block", "DEL SimpleName: val", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: arithmetic", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"=~ error\"", "DEL SimpleName: variableName", "DEL SimpleName: jjtGetChild", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleType: ArithmeticException", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: xjexl", "DEL SimpleName: attribute", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: xjexl", "DEL SimpleName: right", "DEL SimpleName: jjtGetChild", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL SimpleName: data", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: jjtAccept", "DEL SimpleName: arithmetic", "DEL TextElement:  ", "DEL SimpleName: node", "DEL CastExpression", "DEL SimpleName: visit", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 1", "DEL QualifiedName: JexlException.Method", "DEL SimpleName: value", "DEL NumberLiteral: 0.0", "DEL SimpleName: context", "DEL Modifier: public", "DEL SimpleName: xsupport", "DEL CatchClause", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL ArrayType: Object[]", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: right", "DEL SimpleType: JexlPropertySet", "DEL SimpleName: v", "DEL SimpleName: right", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: xjexl", "DEL ExpressionStatement", "DEL SimpleName: invoke", "DEL SimpleName: xjexl", "DEL SimpleName: cached", "DEL SimpleType: ASTNumberLiteral", "DEL MethodInvocation", "DEL QualifiedName: jexl.arithmetic", "DEL SimpleName: propertyNode", "DEL ThisExpression", "DEL SimpleName: object", "DEL SimpleName: xany", "DEL VariableDeclarationFragment", "DEL SimpleName: vm", "DEL Block", "DEL SimpleName: findNullOperand", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL QualifiedName: Boolean.FALSE", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL Assignment: =", "DEL SimpleName: functions", "DEL VariableDeclarationExpression", "DEL SimpleName: register", "DEL ThrowStatement", "DEL SimpleName: ctor", "DEL Assignment: =", "DEL SimpleName: jjtGetChild", "DEL Dimension", "DEL SimpleName: getIterator", "DEL StringLiteral: \"% error\"", "DEL CastExpression", "DEL SimpleName: JexlException", "DEL Modifier: static", "DEL SimpleName: node", "DEL SimpleName: i", "DEL SimpleType: StringBuilder", "DEL Block", "DEL SimpleName: logger", "DEL SimpleName: context", "DEL SimpleName: right", "DEL ExpressionStatement", "DEL Block", "DEL Javadoc", "DEL MethodInvocation", "DEL QualifiedName: Boolean.FALSE", "DEL Assignment: =", "DEL SimpleName: last", "DEL SimpleName: methodNode", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL SimpleType: Object", "DEL ArrayType: Object[]", "DEL Assignment: =", "DEL SimpleName: left", "DEL SimpleName: vm", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: data", "DEL TextElement: would normally throw an exception.", "DEL PrefixExpression: !", "DEL InfixExpression: !=", "DEL SimpleType: JexlException", "DEL ReturnStatement", "DEL SimpleName: left", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: functor", "DEL Javadoc", "DEL Block", "DEL TagElement", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: val", "DEL Block", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: right", "DEL SimpleName: node", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TextElement:  ", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: jjtSetValue", "DEL SimpleType: Object", "DEL NullLiteral", "DEL SimpleName: register", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleType: ASTArrayAccess", "DEL SimpleType: JexlException", "DEL InstanceofExpression", "DEL SimpleName: jjtAccept", "DEL NumberLiteral: 0", "DEL SimpleName: jjtGetChild", "DEL SimpleName: JexlNode", "DEL StringLiteral: \"boolean coercion error\"", "DEL PrimitiveType: int", "DEL SimpleName: right", "DEL SimpleName: left", "DEL SimpleName: Object", "DEL ConstructorInvocation", "DEL SimpleName: vm", "DEL Block", "DEL SimpleName: left", "DEL SimpleName: Object", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL ArrayAccess", "DEL ConditionalExpression", "DEL NumberLiteral: 0", "DEL VariableDeclarationExpression", "DEL SimpleName: object", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleType: JexlContext", "DEL Javadoc", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: xrt", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL FieldAccess", "DEL SimpleName: Object", "DEL SimpleName: object", "DEL ThisExpression", "DEL Modifier: final", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: number", "DEL SimpleName: data", "DEL TryStatement", "DEL SimpleName: jjtAccept", "DEL SimpleName: left", "DEL SimpleName: Uberspect", "DEL VariableDeclarationStatement", "DEL InfixExpression: >=", "DEL PrefixExpression: !", "DEL SimpleName: xjexl", "DEL MethodInvocation", "DEL TextElement:  the data", "DEL PrimitiveType: int", "DEL SimpleName: object", "DEL TryStatement", "DEL SimpleName: node", "DEL SimpleName: data", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlMethod", "DEL SimpleType: ASTStringLiteral", "DEL SimpleType: Object", "DEL QualifiedName: JexlException.Cancel", "DEL SimpleName: node", "DEL SimpleName: which", "DEL MethodInvocation", "DEL SimpleName: vs", "DEL SimpleName: ASTTernaryNode", "DEL SimpleType: JexlException", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: right", "DEL SimpleName: InvocationTargetException", "DEL SimpleType: ASTIdentifier", "DEL NullLiteral", "DEL SimpleName: node", "DEL IfStatement", "DEL SimpleType: String", "DEL Dimension", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL InfixExpression: <", "DEL SimpleName: arithmetic", "DEL SimpleName: vm", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL SimpleName: functors", "DEL SimpleName: jjtGetChild", "DEL NullLiteral", "DEL SimpleType: JexlException.Cancel", "DEL SimpleName: data", "DEL ParenthesizedExpression", "DEL SimpleType: InvocationTargetException", "DEL SimpleName: left", "DEL SimpleName: UnsupportedOperationException", "DEL Block", "DEL SimpleName: jjtGetValue", "DEL NullLiteral", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL SimpleName: n", "DEL SimpleName: ArithmeticException", "DEL SimpleName: right", "DEL Assignment: =", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL StringLiteral: \"illegal assignment form 0\"", "DEL ClassInstanceCreation", "DEL SimpleName: left", "DEL Modifier: public", "DEL SimpleName: argv", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: node", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleType: JexlContext", "DEL VariableDeclarationStatement", "DEL ArrayType: String[]", "DEL SimpleName: JexlNode", "DEL ReturnStatement", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement:  throws JexlException if strict, null otherwise", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL SimpleName: cached", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL SimpleName: variableName", "DEL SimpleName: logger", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL FieldAccess", "DEL SimpleName: JexlException", "DEL TextElement:  ", "DEL PostfixExpression: ++", "DEL SimpleType: ASTMapEntry", "DEL ReturnStatement", "DEL SimpleName: jjtAccept", "DEL Modifier: public", "DEL SimpleName: object", "DEL Block", "DEL ExpressionStatement", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL SimpleName: left", "DEL SimpleType: ParserVisitor", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleType: ASTAdditiveNode", "DEL WildcardType: ?", "DEL SimpleName: matches", "DEL PrefixExpression: !", "DEL SimpleName: set", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleName: visit", "DEL SimpleName: antVar", "DEL SimpleName: node", "DEL SimpleType: Map", "DEL NumberLiteral: 3", "DEL SimpleName: Object", "DEL NullLiteral", "DEL ThrowStatement", "DEL SimpleName: isRegister", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SimpleType: Collection", "DEL SimpleType: ASTIdentifier", "DEL TagElement: @inheritDoc", "DEL ThrowStatement", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleType: JexlNode", "DEL ArrayAccess", "DEL SimpleName: Object", "DEL TextElement: Triggered when variable can not be resolved.", "DEL SimpleName: property", "DEL SimpleName: isSilent", "DEL SimpleType: ArithmeticException", "DEL VariableDeclarationStatement", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL SimpleName: ASTIdentifier", "DEL SimpleType: JexlException", "DEL IfStatement", "DEL SimpleName: aContext", "DEL SimpleName: c", "DEL InfixExpression: &&", "DEL SimpleName: objectNode", "DEL ThisExpression", "DEL SimpleName: JexlException", "DEL SimpleName: theNode", "DEL SimpleName: eval", "DEL TextElement: Checks whether this interpreter execution was cancelled due to thread interruption.", "DEL SimpleType: Object", "DEL InfixExpression: +", "DEL NullLiteral", "DEL Modifier: public", "DEL InstanceofExpression", "DEL InfixExpression: -", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleType: JexlEngine", "DEL SimpleName: visit", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleType: ASTLENode", "DEL FieldAccess", "DEL SimpleName: ASTIdentifier", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: value", "DEL VariableDeclarationStatement", "DEL Block", "DEL ThisExpression", "DEL SimpleName: objectNode", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: jjtAccept", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL NumberLiteral: 2", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL TagElement: @param", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: left", "DEL MethodInvocation", "DEL StringLiteral: \"| error\"", "DEL SimpleName: numChildren", "DEL ThrowStatement", "DEL SimpleName: prefix", "DEL SimpleName: JexlPropertySet", "DEL QualifiedName: JexlException.Cancel", "DEL ThisExpression", "DEL ThisExpression", "DEL WildcardType: ?", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement: Registers or arguments. ", "DEL SimpleName: context", "DEL SimpleName: i", "DEL SimpleName: vm", "DEL SimpleName: jjtGetValue", "DEL ConditionalExpression", "DEL Block", "DEL TryStatement", "DEL TextElement: Gets the uberspect.", "DEL SimpleName: jjtGetChild", "DEL SimpleName: v", "DEL IfStatement", "DEL SimpleName: functors", "DEL SimpleName: toBoolean", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: JexlException", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: JexlMethod", "DEL Block", "DEL SimpleName: isVariable", "DEL SimpleType: ASTLTNode", "DEL FieldAccess", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL BooleanLiteral: true", "DEL Block", "DEL SimpleName: xany", "DEL SimpleName: isCancelled", "DEL Block", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL SimpleName: tryFailed", "DEL SimpleName: functor", "DEL Block", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: argv", "DEL SimpleName: node", "DEL TextElement:  the first argument index, child of the method node", "DEL SimpleName: isTernaryProtected", "DEL VariableDeclarationStatement", "DEL SimpleName: vm", "DEL SimpleName: jjtGetChild", "DEL TextElement:  ", "DEL NullLiteral", "DEL CastExpression", "DEL TextElement:  ", "DEL VariableDeclarationFragment", "DEL SimpleName: data", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL SimpleName: vg", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL ArrayType: Object[]", "DEL SimpleName: regStrs", "DEL PrimitiveType: int", "DEL Javadoc", "DEL PrimitiveType: int", "DEL SimpleType: Object", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: jjtSetValue", "DEL TagElement", "DEL SimpleType: JexlNode", "DEL StringLiteral: \"size\"", "DEL SimpleName: data", "DEL InfixExpression: !=", "DEL SimpleType: ASTTernaryNode", "DEL SimpleType: Object", "DEL SimpleName: it", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: next", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: jjtGetParent", "DEL SimpleName: argb", "DEL SimpleType: Object", "DEL Block", "DEL ArrayCreation", "DEL CastExpression", "DEL SimpleName: ASTArrayAccess", "DEL TextElement: Checks whether this interpreter considers unknown variables, methods and constructors as errors.", "DEL SimpleName: node", "DEL InstanceofExpression", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: objectNode", "DEL SimpleName: val", "DEL SimpleName: warn", "DEL Assignment: =", "DEL SimpleName: Array", "DEL Modifier: public", "DEL NumberLiteral: 1", "DEL SimpleName: instance", "DEL TagElement", "DEL IfStatement", "DEL WhileStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL InfixExpression: <=", "DEL SimpleName: get", "DEL SimpleName: resolveNamespace", "DEL SimpleName: nindex", "DEL InfixExpression: <", "DEL SimpleName: v", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: arithmetic", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL Block", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: findNullOperand", "DEL SimpleName: xjexl", "DEL FieldAccess", "DEL SimpleName: node", "DEL SimpleName: xrt", "DEL SimpleName: vm", "DEL SimpleName: data", "DEL SimpleName: arithmetic", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL SimpleName: jjtGetChild", "DEL ThisExpression", "DEL NullLiteral", "DEL QualifiedName: JexlException.Cancel", "DEL SimpleName: jjtGetChild", "DEL FieldDeclaration", "DEL SimpleType: JexlException", "DEL SimpleName: value", "DEL SimpleName: jjtAccept", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: invoke", "DEL SimpleName: result", "DEL SimpleName: data", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: setAttribute", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleName: val", "DEL SimpleType: ASTUnaryMinusNode", "DEL QualifiedName: JexlNode.Literal", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: visit", "DEL SimpleName: flag", "DEL SimpleType: Object", "DEL SimpleName: propertyNode", "DEL IfStatement", "DEL Dimension", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: contains", "DEL SimpleName: right", "DEL PrefixExpression: !", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL TextElement: Map, String, and anything that has a int size() method.", "DEL NumberLiteral: 0", "DEL SimpleType: Interpreter", "DEL InstanceofExpression", "DEL SimpleName: frame", "DEL SimpleName: xsupport", "DEL SimpleName: argv", "DEL ThisExpression", "DEL SimpleName: expressionNode", "DEL SimpleName: JexlException", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: literal", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL SimpleName: setStrict", "DEL SimpleName: flag", "DEL SimpleName: jjtGetChild", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL TextElement:  ", "DEL SimpleName: left", "DEL SimpleName: Set", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: xrt", "DEL SimpleName: getMethod", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL SimpleName: left", "DEL TagElement: @inheritDoc", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TextElement: Parameter names if any. ", "DEL TagElement: @deprecated", "DEL SimpleName: value", "DEL ClassInstanceCreation", "DEL SimpleName: JexlException", "DEL SimpleType: Object", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: silent", "DEL TextElement: Sets an attribute of an object.", "DEL SimpleName: propertyNode", "DEL SimpleName: Object", "DEL SimpleName: jjtGetNumChildren", "DEL CatchClause", "DEL SimpleName: NamespaceResolver", "DEL SimpleType: ASTNumberLiteral", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: arithmetic", "DEL SimpleName: Object", "DEL Modifier: protected", "DEL SimpleName: hasNext", "DEL SingleVariableDeclaration", "DEL TextElement: Resolves a namespace, eventually allocating an instance using context as constructor argument.", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SimpleName: op", "DEL SimpleName: jjtGetChild", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleType: JexlException", "DEL SimpleType: Log", "DEL InstanceofExpression", "DEL NullLiteral", "DEL ThrowStatement", "DEL SimpleName: left", "DEL SingleVariableDeclaration", "DEL TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or", "DEL SimpleName: vg", "DEL ThrowStatement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleType: Map", "DEL NumberLiteral: 1", "DEL SimpleName: jjtGetChild", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL SimpleName: equals", "DEL InfixExpression: ==", "DEL SimpleName: node", "DEL ClassInstanceCreation", "DEL SimpleName: object", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL QualifiedName: Boolean.TRUE", "DEL WildcardType: ?", "DEL SimpleName: node", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL WildcardType: ?", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL SimpleName: val", "DEL SimpleType: JexlArithmetic", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: invoke", "DEL Block", "DEL SimpleName: registers", "DEL SimpleName: attribute", "DEL SimpleName: Set", "DEL SimpleName: registers", "DEL Block", "DEL SimpleName: setRegisters", "DEL SimpleName: JexlNode", "DEL SimpleType: ASTModNode", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL Block", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL SimpleName: left", "DEL SimpleName: jjtAccept", "DEL ReturnStatement", "DEL SimpleName: equals", "DEL SimpleName: xrt", "DEL SimpleName: data", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: leftValue", "DEL QualifiedName: Boolean.FALSE", "DEL IfStatement", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL Block", "DEL SimpleType: ASTIdentifier", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL StringLiteral: \"constructor invocation error\"", "DEL SimpleName: ASTMethodNode", "DEL SimpleName: it", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TextElement:  ", "DEL SimpleType: JexlNode", "DEL SimpleName: objectNode", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: object", "DEL SimpleType: ASTAdditiveOperator", "DEL SimpleType: JexlNode", "DEL SimpleName: node", "DEL SimpleName: bean", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlMethod", "DEL SimpleName: Object", "DEL SimpleName: getRegister", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL NullLiteral", "DEL ForStatement", "DEL SimpleName: Set", "DEL SimpleName: Object", "DEL TagElement", "DEL InstanceofExpression", "DEL SimpleName: valNode", "DEL SimpleType: UnsupportedOperationException", "DEL ParameterizedType: Map<?,?>", "DEL NumberLiteral: 0", "DEL SimpleName: arithmetic", "DEL ParameterizedType: Collection<?>", "DEL SimpleName: node", "DEL CatchClause", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: vs", "DEL SimpleName: right", "DEL WildcardType: ?", "DEL SimpleName: nobject", "DEL Block", "DEL SimpleName: xjexl", "DEL SimpleName: Object", "DEL SimpleName: nindex", "DEL SimpleType: JexlException", "DEL SimpleName: data", "DEL TagElement: @inheritDoc", "DEL Block", "DEL Block", "DEL SimpleName: c", "DEL TryStatement", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: JexlException", "DEL SimpleName: JexlException", "DEL SimpleName: xjexl", "DEL TextElement: 1 - attempt to find a method in the bean passed as parameter;", "DEL SimpleName: node", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL SimpleName: right", "DEL SimpleName: arithmetic", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL TextElement:  ", "DEL SimpleName: jjtAccept", "DEL SimpleType: JexlException", "DEL StringLiteral: \"illegal assignment form\"", "DEL TextElement:  ", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: prefix", "DEL TagElement", "DEL SimpleType: JexlException.Return", "DEL Block", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL NumberLiteral: 0", "DEL SimpleName: Object", "DEL SimpleType: ASTIdentifier", "DEL MethodInvocation", "DEL SimpleName: node", "DEL Block", "DEL SimpleType: Set", "DEL NumberLiteral: 0", "DEL SimpleName: Map", "DEL PrimitiveType: void", "DEL TextElement: Check if a null evaluated expression is protected by a ternary expression.", "DEL Assignment: =", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleName: greaterThan", "DEL Modifier: protected", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL ArrayCreation", "DEL SimpleName: getMethod", "DEL SimpleName: n", "DEL SimpleType: JexlException", "DEL ExpressionStatement", "DEL SimpleName: JexlMethod", "DEL SimpleName: Object", "DEL NumberLiteral: 0", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: xreturn", "DEL SimpleType: Object", "DEL NumberLiteral: 1", "DEL CastExpression", "DEL ThisExpression", "DEL SimpleName: jjtAccept", "DEL NullLiteral", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: loopVariable", "DEL SimpleName: context", "DEL Modifier: protected", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: NamespaceResolver", "DEL SimpleName: size", "DEL VariableDeclarationFragment", "DEL SimpleName: literal", "DEL MethodInvocation", "DEL SimpleName: cached", "DEL SimpleName: left", "DEL TextElement: 3 - if this still fails, seeks a Script or JexlMethod as a property of that bean.", "DEL SimpleName: right", "DEL SimpleName: last", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: ASTIfStatement", "DEL SimpleName: ctor", "DEL SimpleName: node", "DEL ThisExpression", "DEL TagElement: @param", "DEL SimpleName: node", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL SimpleName: arithmetic", "DEL SimpleName: node", "DEL SimpleName: ASTDivNode", "DEL SimpleName: jjtAccept", "DEL SimpleType: NamespaceResolver", "DEL SimpleName: register", "DEL Javadoc", "DEL Block", "DEL SimpleName: ctor", "DEL SimpleName: getName", "DEL SimpleName: invoke", "DEL SimpleName: key", "DEL NullLiteral", "DEL SimpleName: eval", "DEL SimpleName: node", "DEL SimpleName: Collection", "DEL Block", "DEL SimpleName: object", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: context", "DEL SimpleType: Object", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: objectNode", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: prefix", "DEL SimpleName: functions", "DEL InfixExpression: ==", "DEL SimpleName: Object", "DEL SimpleName: argv", "DEL SimpleName: left", "DEL SimpleName: left", "DEL SimpleName: right", "DEL SimpleName: property", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL SimpleName: xreturn", "DEL SimpleName: cached", "DEL SimpleName: Object", "DEL SimpleName: e", "DEL SimpleType: JexlException", "DEL Javadoc", "DEL SimpleType: ASTMapLiteral", "DEL MethodInvocation", "DEL TextElement: <p>Use setFrame(...) instead.</p>", "DEL SimpleName: xjexl", "DEL TextElement: Checks whether this interpreter throws JexlException when encountering errors.", "DEL VariableDeclarationStatement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL SimpleName: namespace", "DEL MethodInvocation", "DEL StringLiteral: \"divide error\"", "DEL QualifiedName: Boolean.TRUE", "DEL TagElement", "DEL InfixExpression: &&", "DEL SimpleName: isCacheable", "DEL InfixExpression: &&", "DEL SimpleType: Object", "DEL SimpleName: val", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: uberspect", "DEL SimpleName: vm", "DEL TextElement:  ", "DEL SimpleName: data", "DEL InfixExpression: &&", "DEL WildcardType: ?", "DEL SimpleName: JexlException", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL NumberLiteral: 0.0", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL SimpleType: Object", "DEL SimpleType: JexlMethod", "DEL SimpleName: getAttribute", "DEL Modifier: public", "DEL Block", "DEL SimpleName: valNode", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \", class: \"", "DEL TagElement", "DEL Block", "DEL NullLiteral", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: cached", "DEL NumberLiteral: 0", "DEL SimpleType: String", "DEL SimpleName: value", "DEL SimpleName: numChildren", "DEL SimpleName: ctor", "DEL SimpleName: data", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL ThisExpression", "DEL SimpleName: JexlException", "DEL NumberLiteral: 0", "DEL SimpleName: ASTConstructorNode", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: r", "DEL NullLiteral", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL Assignment: =", "DEL ConditionalExpression", "DEL ReturnStatement", "DEL SimpleName: prefix", "DEL SimpleName: getMethod", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: arithmetic", "DEL SimpleName: jjtAccept", "DEL VariableDeclarationFragment", "DEL SimpleName: o", "DEL SimpleName: map", "DEL Block", "DEL SimpleName: xrt", "DEL TagElement: @inheritDoc", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL ThisExpression", "DEL SimpleName: right", "DEL SimpleName: Object", "DEL QualifiedName: JexlException.Method", "DEL NullLiteral", "DEL SimpleName: ASTReturnStatement", "DEL PrefixExpression: ++", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL TagElement: @inheritDoc", "DEL SingleVariableDeclaration", "DEL SimpleName: Interpreter", "DEL SimpleName: xjexl", "DEL SimpleName: val", "DEL SimpleName: jjtAccept", "DEL SimpleName: v", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL QualifiedName: JexlException.Return", "DEL VariableDeclarationFragment", "DEL SimpleName: xrt", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: Object", "DEL SimpleName: String", "DEL SimpleName: jjtGetChild", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: right", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: Object", "DEL Block", "DEL ThrowStatement", "DEL InfixExpression: !=", "DEL ConditionalExpression", "DEL SimpleName: xrt", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: <", "DEL SimpleName: register", "DEL SimpleName: data", "DEL SimpleName: data", "DEL SimpleName: regStrs", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL SimpleType: ASTNotNode", "DEL SimpleName: data", "DEL SimpleName: getMessage", "DEL InfixExpression: ==", "DEL StringLiteral: \"=~ error\"", "DEL SimpleName: registers", "DEL SimpleName: valueOf", "DEL ThisExpression", "DEL SimpleName: getClass", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL ThisExpression", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: jjtGetChild", "DEL SimpleName: narray", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: visit", "DEL ExpressionStatement", "DEL SimpleType: ASTNullLiteral", "DEL CastExpression", "DEL InfixExpression: +", "DEL SimpleName: jjtAccept", "DEL SimpleName: tryFailed", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Dimension", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TryStatement", "DEL Assignment: =", "DEL SimpleName: node", "DEL SimpleName: xany", "DEL SimpleName: jjtGetNumChildren", "DEL Modifier: public", "DEL ArrayType: Object[]", "DEL SimpleName: vm", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL SimpleName: jjtAccept", "DEL SimpleName: xjexl", "DEL Assignment: =", "DEL CastExpression", "DEL Block", "DEL SimpleName: node", "DEL Block", "DEL MethodInvocation", "DEL QualifiedName: Boolean.TRUE", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: ASTWhileStatement", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: right", "DEL SimpleName: object", "DEL SimpleName: arithmetic", "DEL SimpleName: op", "DEL ArrayType: Object[]", "DEL QualifiedName: JexlException.Return", "DEL WildcardType: ?", "DEL SimpleType: Node", "DEL SimpleType: Object", "DEL TagElement", "DEL MethodInvocation", "DEL NullLiteral", "DEL TextElement:  the size of val", "DEL MethodInvocation", "DEL SimpleName: jjtGetValue", "DEL CatchClause", "DEL SimpleName: containsKey", "DEL IfStatement", "DEL SimpleName: String", "DEL SimpleType: Exception", "DEL SimpleName: data", "DEL SimpleName: data", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleType: Object", "DEL TextElement:  the context to evaluate expression", "DEL TagElement", "DEL SimpleName: jexl", "DEL SimpleType: ASTAdditiveOperator", "DEL SimpleName: isCancelled", "DEL SimpleName: JexlNode", "DEL IfStatement", "DEL SimpleName: val", "DEL SimpleName: ASTReference", "DEL SimpleName: Object", "DEL Assignment: =", "DEL SimpleType: ArithmeticException", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL SimpleName: node", "DEL ThisExpression", "DEL StringLiteral: \"method invocation error\"", "DEL SimpleName: String", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: namespace", "DEL SimpleType: Object", "DEL PrefixExpression: !", "DEL SimpleName: setter", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: jjtGetChild", "DEL SimpleName: arithmetic", "DEL ThrowStatement", "DEL SimpleName: arithmetic", "DEL ExpressionStatement", "DEL SimpleType: Set", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: attribute", "DEL StringLiteral: \"\"", "DEL TagElement: @inheritDoc", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL SimpleName: xjexl", "DEL SimpleType: Object", "DEL SimpleName: ASTEmptyFunction", "DEL SimpleType: Class", "DEL TagElement", "DEL InfixExpression: <", "DEL SimpleName: xnode", "DEL SimpleType: JexlNode", "DEL QualifiedName: JexlException.Cancel", "DEL Block", "DEL WildcardType: ?", "DEL SimpleName: tryInvoke", "DEL SimpleName: strict", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: valNode", "DEL Modifier: final", "DEL SimpleName: context", "DEL QualifiedName: Boolean.FALSE", "DEL TextElement:  ", "DEL SimpleName: JexlPropertyGet", "DEL MethodInvocation", "DEL SimpleName: parameters", "DEL Block", "DEL Block", "DEL QualifiedName: theRegisters.length", "DEL Block", "DEL TextElement:  the engine creating this interpreter", "DEL SimpleName: isInteger", "DEL NullLiteral", "DEL SimpleName: object", "DEL ThisExpression", "DEL SimpleName: getRegisters", "DEL Block", "DEL InfixExpression: >=", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: resolveNamespace", "DEL CastExpression", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: ASTNotNode", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: left", "DEL ThrowStatement", "DEL SimpleName: node", "DEL SimpleName: jjtAccept", "DEL ArrayAccess", "DEL Block", "DEL SimpleName: Object", "DEL ArrayType: Object[]", "DEL VariableDeclarationFragment", "DEL Block", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleType: JexlException", "DEL Block", "DEL SimpleName: data", "DEL TagElement", "DEL SimpleName: divide", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleName: Object", "DEL Assignment: =", "DEL SimpleName: jjtGetChild", "DEL VariableDeclarationFragment", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: xrt", "DEL SimpleName: ASTGTNode", "DEL NullLiteral", "DEL SimpleName: node", "DEL SimpleType: JexlNode", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: xjexl", "DEL ThisExpression", "DEL SimpleType: JexlNode", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL SimpleName: getPropertySet", "DEL Block", "DEL Block", "DEL Assignment: =", "DEL SimpleName: right", "DEL NumberLiteral: 0", "DEL SimpleType: ASTReference", "DEL SimpleName: node", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: jjtGetNumChildren", "DEL Modifier: public", "DEL Modifier: volatile", "DEL SimpleName: e", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL SimpleName: left", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlNode", "DEL IfStatement", "DEL SimpleName: arithmetic", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL ForStatement", "DEL NumberLiteral: 2", "DEL SimpleName: data", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL CharacterLiteral: '.'", "DEL SimpleName: isStrict", "DEL StringLiteral: \"^ error\"", "DEL SimpleName: node", "DEL SimpleName: variableName", "DEL SimpleName: visit", "DEL InstanceofExpression", "DEL TagElement: @param", "DEL NumberLiteral: 1", "DEL SimpleName: eval", "DEL SimpleType: Object", "DEL SimpleName: invoke", "DEL SimpleName: error", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL TagElement", "DEL ThrowStatement", "DEL ExpressionStatement", "DEL SimpleName: base", "DEL Block", "DEL SimpleName: i", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleType: ASTIdentifier", "DEL InfixExpression: !=", "DEL IfStatement", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: jjtGetChild", "DEL SimpleName: has", "DEL SimpleName: variableName", "DEL ExpressionStatement", "DEL SimpleType: JexlMethod", "DEL SimpleType: Object", "DEL WildcardType: ?", "DEL WildcardType: ?", "DEL TagElement: @param", "DEL SimpleName: setFrame", "DEL VariableDeclarationFragment", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL NumberLiteral: 1", "DEL PrimitiveType: boolean", "DEL SimpleType: Map", "DEL Modifier: public", "DEL SimpleType: ASTTernaryNode", "DEL VariableDeclarationStatement", "DEL SimpleName: JexlPropertyGet", "DEL InfixExpression: ||", "DEL SimpleName: xjexl", "DEL TagElement: @param", "DEL SimpleName: data", "DEL Block", "DEL SimpleType: JexlException", "DEL VariableDeclarationStatement", "DEL SimpleName: toBoolean", "DEL ParameterizedType: JexlNode.Literal<?>", "DEL SimpleName: xrt", "DEL IfStatement", "DEL SimpleName: xnode", "DEL SimpleName: it", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: jjtGetChild", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL PrefixExpression: -", "DEL InfixExpression: &&", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL SimpleName: namespace", "DEL ClassInstanceCreation", "DEL SimpleType: JexlNode", "DEL MethodInvocation", "DEL SimpleName: left", "DEL Assignment: =", "DEL SimpleName: ASTAdditiveNode", "DEL ParenthesizedExpression", "DEL SimpleName: ASTTernaryNode", "DEL Assignment: =", "DEL SimpleType: JexlException", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlMethod", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: strict", "DEL TextElement:  true for strict, false for lenient", "DEL SimpleType: Object", "DEL SimpleName: it", "DEL SimpleName: execute", "DEL InstanceofExpression", "DEL SimpleName: xinst", "DEL SimpleName: ASTAdditiveOperator", "DEL FieldDeclaration", "DEL SimpleName: jjtGetChild", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL SimpleType: Object", "DEL Block", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: register", "DEL SimpleName: last", "DEL SimpleName: cache", "DEL ThisExpression", "DEL Assignment: =", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL NumberLiteral: 1", "DEL SimpleName: node", "DEL MethodInvocation", "DEL ParameterizedType: JexlNode.Literal<?>", "DEL VariableDeclarationFragment", "DEL SimpleName: xrt", "DEL ThrowStatement", "DEL ParameterizedType: Collection<?>", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL InfixExpression: ==", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL TextElement:  the node that evaluated as the object", "DEL SimpleType: Uberspect", "DEL NumberLiteral: 0", "DEL SimpleName: right", "DEL Block", "DEL TextElement: </p>", "DEL SimpleType: Object", "DEL InfixExpression: &&", "DEL SimpleName: ASTIdentifier", "DEL InfixExpression: <", "DEL SimpleName: String", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: ASTFalseNode", "DEL SimpleName: variableName", "DEL ArrayCreation", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL TagElement: @return", "DEL SimpleName: JexlException", "DEL InstanceofExpression", "DEL SimpleType: ASTNumberLiteral", "DEL VariableDeclarationStatement", "DEL Block", "DEL IfStatement", "DEL ExpressionStatement", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: methodName", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleType: ASTMethodNode", "DEL Block", "DEL NullLiteral", "DEL SimpleName: prefix", "DEL QualifiedName: Boolean.FALSE", "DEL Modifier: protected", "DEL SimpleName: loopReference", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: equals", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL TagElement: @return", "DEL QualifiedName: Boolean.TRUE", "DEL InfixExpression: !=", "DEL SimpleType: ArithmeticException", "DEL NumberLiteral: 0", "DEL SimpleName: propertyNode", "DEL SimpleType: JexlPropertyGet", "DEL SingleVariableDeclaration", "DEL SimpleName: cobject", "DEL SimpleName: visit", "DEL SimpleName: ArithmeticException", "DEL Block", "DEL SimpleName: xrt", "DEL SimpleName: Collection", "DEL SimpleName: jjtGetChild", "DEL SimpleName: ASTMulNode", "DEL SimpleName: jjtGetChild", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL Assignment: =", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: result", "DEL SimpleName: xrt", "DEL SingleVariableDeclaration", "DEL SimpleName: Collection", "DEL SimpleName: ArithmeticException", "DEL BooleanLiteral: true", "DEL SimpleName: JexlException", "DEL SimpleName: ASTBitwiseComplNode", "DEL CastExpression", "DEL Block", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Block", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: vg", "DEL NumberLiteral: 1", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: map", "DEL SimpleName: jjtAccept", "DEL SimpleName: xnode", "DEL SimpleName: Collection", "DEL NullLiteral", "DEL SimpleName: toBoolean", "DEL MethodInvocation", "DEL SimpleName: ASTReference", "DEL SimpleName: String", "DEL SimpleName: node", "DEL TextElement: The map of registered functions. ", "DEL Block", "DEL Block", "DEL ReturnStatement", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlNode", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL ConditionalExpression", "DEL SimpleName: isCancelled", "DEL Block", "DEL SimpleName: bitwiseXor", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL NullLiteral", "DEL SimpleName: functors", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL SimpleName: parameters", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL ExpressionStatement", "DEL SimpleName: xrt", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: JexlNode", "DEL MethodInvocation", "DEL SimpleName: interrupted", "DEL SimpleType: JexlException", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: e", "DEL SimpleType: ArithmeticException", "DEL SimpleName: Object", "DEL SimpleName: toString", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleName: Object", "DEL Assignment: =", "DEL SimpleName: visit", "DEL SimpleName: cached", "DEL InfixExpression: ==", "DEL SimpleName: isArray", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleName: JexlException", "DEL NullLiteral", "DEL SimpleName: data", "DEL SimpleName: arithmetic", "DEL TextElement:  ", "DEL Assignment: =", "DEL WildcardType: ?", "DEL SimpleName: last", "DEL QualifiedName: node.image", "DEL ThisExpression", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL QualifiedName: JexlEngine.Frame", "DEL SimpleName: jjtAccept", "DEL WildcardType: ?", "DEL SimpleName: ASTBitwiseAndNode", "DEL SimpleName: Object", "DEL ParameterizedType: Set<?>", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: node", "DEL QualifiedName: java.util.regex.Pattern", "DEL SimpleType: Object", "DEL TextElement: Gets an attribute of an object.", "DEL SimpleName: flag", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: c", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: value", "DEL SimpleName: i", "DEL SimpleType: Object", "DEL ParameterizedType: Map<?,?>", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL PrimitiveType: void", "DEL NullLiteral", "DEL MethodDeclaration", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SimpleName: identifier", "DEL SimpleName: left", "DEL SimpleName: result", "DEL Block", "DEL SimpleName: mctor", "DEL FieldAccess", "DEL SimpleType: Collection", "DEL Assignment: =", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleName: Object", "DEL SimpleName: result", "DEL ClassInstanceCreation", "DEL SimpleName: ASTReferenceExpression", "DEL SimpleType: JexlNode", "DEL SimpleName: cobject", "DEL ConditionalExpression", "DEL Javadoc", "DEL SimpleName: antVar", "DEL SimpleName: data", "DEL SimpleName: ArithmeticException", "DEL NumberLiteral: 1", "DEL SimpleName: jjtAccept", "DEL SimpleName: node", "DEL TextElement:  to set the value to", "DEL SimpleName: object", "DEL PrimitiveType: boolean", "DEL SimpleName: node", "DEL SimpleName: attribute", "DEL SimpleName: object", "DEL QualifiedName: Boolean.TRUE", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: next", "DEL ArrayCreation", "DEL SimpleType: ArithmeticException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: protected", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: xjexl", "DEL ClassInstanceCreation", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL Javadoc", "DEL ConditionalExpression", "DEL SimpleName: jjtAccept", "DEL SimpleType: Object", "DEL SimpleName: vs", "DEL MethodInvocation", "DEL ThrowStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ThrowStatement", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: append", "DEL NumberLiteral: 0", "DEL SimpleName: jjtAccept", "DEL SimpleName: left", "DEL Block", "DEL ForStatement", "DEL ReturnStatement", "DEL SimpleName: context", "DEL SimpleName: aContext", "DEL SimpleName: Object", "DEL SimpleName: toBoolean", "DEL SimpleName: visit", "DEL InfixExpression: |", "DEL MethodDeclaration", "DEL PostfixExpression: ++", "DEL VariableDeclarationStatement", "DEL SimpleType: JexlException", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleType: JexlContext", "DEL ExpressionStatement", "DEL SimpleName: logger", "DEL SimpleName: isVariable", "DEL QualifiedName: JexlException.Cancel", "DEL WildcardType: ?", "DEL SimpleName: data", "DEL SimpleName: data", "DEL SimpleName: Object", "DEL SimpleName: visit", "DEL SimpleName: JexlContext", "DEL ExpressionStatement", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: ctor", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL ThrowStatement", "DEL Modifier: protected", "DEL SimpleName: strict", "DEL SimpleName: Exception", "DEL VariableDeclarationStatement", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleType: ArithmeticException", "DEL SimpleName: node", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: i", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TextElement: Finds the node causing a NPE for diadic operators.", "DEL SimpleName: last", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleName: getIterator", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL SimpleType: JexlMethod", "DEL SimpleName: Interpreter", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL SimpleName: warn", "DEL Modifier: public", "DEL SimpleName: objectNode", "DEL SimpleType: JexlPropertyGet", "DEL MethodInvocation", "DEL ThisExpression", "DEL ReturnStatement", "DEL CastExpression", "DEL TryStatement", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL TagElement: @inheritDoc", "DEL InfixExpression: ==", "DEL SimpleName: jjtAccept", "DEL SimpleType: JexlMethod", "DEL SimpleName: object", "DEL SimpleType: String", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtGetChild", "DEL Modifier: protected", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL IfStatement", "DEL SimpleName: ASTArrayAccess", "DEL SimpleName: Object", "DEL SimpleName: uberspect", "DEL InstanceofExpression", "DEL SimpleType: JexlMethod", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL SimpleType: Object", "DEL SimpleName: jjtAccept", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlException", "DEL SimpleName: Object", "DEL SimpleType: ASTIdentifier", "DEL ReturnStatement", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: data", "DEL TagElement", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL SimpleName: JexlNode", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL Block", "DEL CatchClause", "DEL SimpleType: RuntimeException", "DEL Assignment: =", "DEL SimpleName: visit", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ThrowStatement", "DEL SimpleName: map", "DEL ForStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: walk", "DEL SimpleName: data", "DEL SimpleName: String", "DEL TextElement:  the method node", "DEL InfixExpression: !=", "DEL VariableDeclarationExpression", "DEL SimpleName: eval", "DEL SimpleName: jjtGetChild", "DEL TagElement: @return", "DEL TextElement:  the attribute value", "DEL SimpleName: Node", "DEL SimpleName: ctor", "DEL ThisExpression", "DEL Block", "DEL Assignment: =", "DEL Modifier: protected", "DEL SimpleType: Object", "DEL ParenthesizedExpression", "DEL SimpleName: UnsupportedOperationException", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: xjexl", "DEL MethodInvocation", "DEL SimpleName: methodName", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: JexlException", "DEL SimpleType: NamespaceResolver", "DEL SimpleType: Object", "DEL SimpleName: register", "DEL SimpleName: namespace", "DEL ClassInstanceCreation", "DEL SimpleName: nobject", "DEL SimpleName: Collection", "DEL SimpleName: ArithmeticException", "DEL SimpleName: node", "DEL SimpleName: toString", "DEL SimpleName: attribute", "DEL TryStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL NumberLiteral: 0", "DEL SimpleName: node", "DEL TextElement:  ", "DEL QualifiedName: Boolean.FALSE", "DEL SimpleName: node", "DEL QualifiedName: JexlEngine.EMPTY_CONTEXT", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleName: xrt", "DEL SimpleName: visit", "DEL CatchClause", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: jjtGetNumChildren", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL SimpleName: jjtGetChild", "DEL SimpleName: childCount", "DEL SimpleName: visit", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: Set", "DEL TagElement", "DEL SimpleName: left", "DEL VariableDeclarationStatement", "DEL SimpleName: isInteger", "DEL SimpleName: Integer", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: jjtAccept", "DEL SimpleName: numChildren", "DEL SimpleName: Object", "DEL NumberLiteral: 0", "DEL SimpleName: right", "DEL SimpleName: Object", "DEL CatchClause", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: attribute", "DEL StringLiteral: \"Shoud not be called.\"", "DEL CastExpression", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: image", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL Block", "DEL SimpleType: Object", "DEL ConditionalExpression", "DEL SimpleName: Collection", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: get", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 2", "DEL ClassInstanceCreation", "DEL SimpleName: theRegisters", "DEL SimpleName: RuntimeException", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL SimpleName: variableName", "DEL SimpleName: e", "DEL QualifiedName: Boolean.TRUE", "DEL IfStatement", "DEL TextElement:  ", "DEL SimpleName: right", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: xrt", "DEL SimpleName: jjtGetChild", "DEL ThisExpression", "DEL PrefixExpression: !", "DEL SimpleName: silentFlag", "DEL SimpleName: node", "DEL SimpleName: visit", "DEL SimpleName: namespace", "DEL Block", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL Block", "DEL Javadoc", "DEL SimpleName: silent", "DEL MethodInvocation", "DEL StringLiteral: \"* error\"", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: isVariable", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"arithmetic error\"", "DEL SimpleType: Object", "DEL TagElement", "DEL TextElement: Interpret the given script/expression.", "DEL Block", "DEL SimpleType: ArithmeticException", "DEL IfStatement", "DEL SimpleName: jjtAccept", "DEL SimpleName: ASTIdentifier", "DEL StringLiteral: \"constructor error\"", "DEL Assignment: =", "DEL Block", "DEL SimpleName: functors", "DEL SimpleName: propertyNode", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: left", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL SimpleName: result", "DEL SimpleName: node", "DEL SimpleName: getLiteral", "DEL SimpleName: JexlContext", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: right", "DEL SimpleName: registers", "DEL SimpleName: JexlNode", "DEL TryStatement", "DEL TagElement: @inheritDoc", "DEL SimpleName: namespace", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: leftValue", "DEL Block", "DEL FieldAccess", "DEL SimpleName: xjexl", "DEL SimpleName: isCancelled", "DEL TextElement: Calls a method (or function).", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: cache", "DEL Modifier: public", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: argv", "DEL Modifier: public", "DEL SimpleName: upper", "DEL MethodInvocation", "DEL SimpleName: arithmetic", "DEL SimpleName: left", "DEL SimpleName: Map", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL InfixExpression: +", "DEL SimpleType: JexlException.Cancel", "DEL SimpleType: ASTReference", "DEL SimpleName: toString", "DEL SimpleName: append", "DEL SimpleName: entry", "DEL Block", "DEL SimpleName: arithmetic", "DEL ParameterizedType: Collection<?>", "DEL InfixExpression: ==", "DEL SimpleName: child", "DEL Block", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: entry", "DEL SimpleType: Collection", "DEL SimpleName: c", "DEL InfixExpression: &&", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleType: ASTFalseNode", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: xnode", "DEL MethodInvocation", "DEL ThisExpression", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL SimpleName: data", "DEL SimpleType: JexlException", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: node", "DEL SimpleName: attribute", "DEL VariableDeclarationStatement", "DEL SimpleName: ASTBitwiseOrNode", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: xinst", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: ASTIdentifier", "DEL ThisExpression", "DEL SimpleName: isVariable", "DEL Block", "DEL SimpleName: visit", "DEL SimpleType: Exception", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL ThisExpression", "DEL SimpleName: node", "DEL TagElement", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: data", "DEL SimpleName: getMethod", "DEL FieldAccess", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: RuntimeException", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: resolveNamespace", "DEL SimpleName: JexlException", "DEL NullLiteral", "DEL SimpleName: image", "DEL TagElement: @inheritDoc", "DEL QualifiedName: regStrs.length", "DEL ReturnStatement", "DEL ThisExpression", "DEL TagElement", "DEL SimpleName: node", "DEL Javadoc", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL SimpleType: JexlException", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleName: jjtGetChild", "DEL InfixExpression: ==", "DEL SimpleName: right", "DEL SimpleType: ArithmeticException", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL InfixExpression: !=", "DEL Dimension", "DEL SimpleName: frame", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL NumberLiteral: 2", "DEL SimpleName: visit", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL SimpleName: silent", "DEL SimpleName: context", "DEL TextElement: key for a map", "DEL SimpleName: JexlException", "DEL TagElement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: silent", "DEL SimpleType: Exception", "DEL Dimension", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: data", "DEL CastExpression", "DEL SimpleName: jjtGetChild", "DEL SimpleName: object", "DEL VariableDeclarationFragment", "DEL SimpleName: methodNode", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL SimpleName: JexlException", "DEL SimpleName: right", "DEL SimpleName: tryInvoke", "DEL SimpleName: HashMap", "DEL SimpleName: node", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleName: ctor", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: ArithmeticException", "DEL CatchClause", "DEL Modifier: protected", "DEL SimpleName: getCause", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: node", "DEL WildcardType: ?", "DEL SimpleName: jjtGetChild", "DEL SimpleName: node", "DEL Block", "DEL VariableDeclarationExpression", "DEL IfStatement", "DEL SimpleName: jjtAccept", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL Modifier: protected", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL SimpleName: o", "DEL SimpleName: jjtAccept", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: xjexl", "DEL SimpleName: silent", "DEL Block", "DEL NullLiteral", "DEL Assignment: =", "DEL SimpleName: jjtGetChild", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: JexlNode", "DEL ReturnStatement", "DEL SimpleName: xrt", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL TextElement:  the expression node", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL Modifier: protected", "DEL SingleVariableDeclaration", "DEL SimpleName: uberspect", "DEL SimpleName: Object", "DEL NullLiteral", "DEL SimpleName: node", "DEL SimpleName: attribute", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: ASTIdentifier", "DEL ExpressionStatement", "DEL InfixExpression: -", "DEL SimpleName: Map", "DEL SimpleName: xrt", "DEL SimpleName: jjtGetChild", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: jjtAccept", "DEL ThrowStatement", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: getAttribute", "DEL SimpleName: JexlException", "DEL SimpleName: jjtGetChild", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: right", "DEL FieldDeclaration", "DEL SimpleName: objectNode", "DEL ReturnStatement", "DEL SimpleName: context", "DEL SimpleName: Thread", "DEL SimpleType: Object", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: Object", "DEL InfixExpression: ==", "DEL SimpleType: JexlException", "DEL SimpleName: aContext", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL InfixExpression: &&", "DEL SimpleName: i", "DEL SimpleName: array", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: narray", "DEL SimpleName: isCancelled", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: cached", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL TextElement:  ", "DEL SimpleName: jjtAccept", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL Block", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL SimpleName: argc", "DEL VariableDeclarationStatement", "DEL SimpleType: Map", "DEL Block", "DEL Block", "DEL SimpleName: propertyName", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL SimpleName: xrt", "DEL CatchClause", "DEL SimpleName: jjtAccept", "DEL SimpleName: value", "DEL TextElement:  the prefix name (may be null for global namespace)", "DEL ArrayAccess", "DEL MethodInvocation", "DEL QualifiedName: Boolean.TRUE", "DEL SimpleName: jjtAccept", "DEL SimpleName: jjtSetValue", "DEL QualifiedName: base.arithmetic", "DEL SimpleName: Object", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL VariableDeclarationExpression", "DEL SimpleName: argv", "DEL SimpleName: xrt", "DEL SimpleName: xrt", "DEL MethodInvocation", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleType: ASTReference", "DEL Block", "DEL MethodInvocation", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SimpleName: array", "DEL SimpleName: String", "DEL Assignment: =", "DEL InstanceofExpression", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL NumberLiteral: 0", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL NullLiteral", "DEL QualifiedName: Boolean.TRUE", "DEL IfStatement", "DEL TagElement: @deprecated", "DEL TextElement:  the result of the interpretation.", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL CastExpression", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: getPropertyGet", "DEL SimpleName: argv", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL ThrowStatement", "DEL SimpleName: JexlPropertyGet", "DEL ReturnStatement", "DEL SimpleType: JexlMethod", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: result", "DEL TextElement:  the data", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SimpleName: xjexl", "DEL SimpleName: functions", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: UnsupportedOperationException", "DEL TagElement", "DEL SimpleName: node", "DEL NullLiteral", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: invoke", "DEL InfixExpression: <", "DEL SimpleName: data", "DEL InfixExpression: !=", "DEL Block", "DEL NumberLiteral: 1", "DEL TextElement:  the right argument", "DEL SingleVariableDeclaration", "DEL SimpleName: var", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL TryStatement", "DEL Modifier: public", "DEL Block", "DEL SimpleName: node", "DEL ReturnStatement", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: xjexl", "DEL SimpleName: data", "DEL SimpleName: bean", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: isCancelled", "DEL MethodDeclaration", "DEL SimpleName: v", "DEL InstanceofExpression", "DEL Block", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: ParserVisitor", "DEL SimpleName: vs", "DEL ClassInstanceCreation", "DEL TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or", "DEL SimpleName: Object", "DEL FieldAccess", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ThrowStatement", "DEL ConditionalExpression", "DEL SimpleName: node", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: argv", "DEL Assignment: =", "DEL SimpleType: JexlMethod", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Javadoc", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: xrt", "DEL SimpleType: Object", "DEL SimpleName: ASTReference", "DEL SimpleType: Object", "DEL SimpleName: object", "DEL ParameterizedType: Class<?>", "DEL SimpleName: JexlException", "DEL SimpleName: isVariable", "DEL TryStatement", "DEL SimpleName: node", "DEL SimpleName: xjexl", "DEL Block", "DEL Assignment: =", "DEL Block", "DEL SimpleName: right", "DEL SimpleName: expression", "DEL VariableDeclarationStatement", "DEL SimpleName: jexl", "DEL SimpleName: object", "DEL SimpleName: toString", "DEL NullLiteral", "DEL SimpleName: setAttribute", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: equals", "DEL SimpleType: ASTBitwiseOrNode", "DEL SimpleName: object", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: cached", "DEL CastExpression", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationFragment", "DEL SimpleName: data", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SimpleType: String", "DEL QualifiedName: Boolean.TRUE", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @param", "DEL ThisExpression", "DEL SimpleType: JexlException", "DEL SimpleName: last", "DEL ThrowStatement", "DEL SimpleName: cobject", "DEL SimpleName: data", "DEL ThisExpression", "DEL SimpleName: JexlNode", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: ArithmeticException", "DEL SimpleName: getRegister", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: i", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL NumberLiteral: 2", "DEL StringLiteral: \"boolean coercion error\"", "DEL Block", "DEL TagElement: @inheritDoc", "DEL ParameterizedType: Collection<?>", "DEL IfStatement", "DEL SimpleName: visit", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL InfixExpression: &&", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: data", "DEL Block", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleName: argv", "DEL IfStatement", "DEL IfStatement", "DEL FieldAccess", "DEL SimpleName: ASTAmbiguous", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: Object", "DEL SimpleName: argv", "DEL Dimension", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL Block", "DEL FieldAccess", "DEL TryStatement", "DEL SimpleName: argb", "DEL SimpleName: node", "DEL NumberLiteral: 0", "DEL SimpleName: node", "DEL CastExpression", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleType: Object", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: vm", "DEL TextElement:  ", "DEL Assignment: =", "DEL ArrayCreation", "DEL Modifier: protected", "DEL SimpleName: jjtGetChild", "DEL SimpleName: jjtGetChild", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: node", "DEL ThisExpression", "DEL SimpleName: getMethod", "DEL Javadoc", "DEL SimpleName: invoke", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: arithmetic", "DEL SimpleName: jjtGetChild", "DEL InfixExpression: >", "DEL SimpleType: ASTIdentifier", "DEL ForStatement", "DEL SimpleName: Object", "DEL StringLiteral: \"context is readonly\"", "DEL SimpleName: numChildren", "DEL SimpleName: data", "DEL SimpleName: getMessage", "DEL TagElement: @inheritDoc", "DEL SimpleName: left", "DEL Dimension", "DEL SimpleName: register", "DEL SimpleName: i", "DEL SimpleName: argv", "DEL ClassInstanceCreation", "DEL SimpleName: register", "DEL SimpleName: node", "DEL TextElement:  the AST node", "DEL ArrayAccess", "DEL SimpleName: entry", "DEL VariableDeclarationFragment", "DEL TextElement:  used for evaluation.", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: toBoolean", "DEL ParenthesizedExpression", "DEL SimpleType: ASTNumberLiteral", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: toBoolean", "DEL NullLiteral", "DEL ThrowStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: getMessage", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: toBoolean", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: visit", "DEL Block", "DEL SimpleName: jjtAccept", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: getRegister", "DEL InfixExpression: !=", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL TagElement", "DEL ThisExpression", "DEL SimpleName: silent", "DEL SimpleName: node", "DEL SimpleName: vm", "DEL SimpleName: context", "DEL NullLiteral", "DEL CatchClause", "DEL SimpleName: narray", "DEL VariableDeclarationStatement", "DEL ParameterizedType: Map<?,?>", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: data", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: ArithmeticException", "DEL SimpleName: vm", "DEL SimpleType: Object", "DEL TextElement: The logger. ", "DEL TagElement: @inheritDoc", "DEL SimpleName: isTernaryProtected", "DEL SimpleName: Object", "DEL SimpleName: ASTMapEntry", "DEL SimpleName: isVariable", "DEL InstanceofExpression", "DEL WildcardType: ?", "DEL Javadoc", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: arithmetic", "DEL SimpleName: silent", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL MethodInvocation", "DEL ParameterizedType: Collection<?>", "DEL SimpleName: narray", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Iterator<?>", "DEL ForStatement", "DEL CastExpression", "DEL ReturnStatement", "DEL SimpleName: right", "DEL SimpleName: cache", "DEL SimpleName: leftValue", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: Object", "DEL ThrowStatement", "DEL ArrayType: Object[]", "DEL InfixExpression: <", "DEL ReturnStatement", "DEL SimpleName: silentFlag", "DEL ThisExpression", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL ForStatement", "DEL SimpleName: data", "DEL SimpleName: JexlException"]}]}}, {"Interpreter_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Array(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Collection(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashMap(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Iterator(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Map(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.Set(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.commons.jexl2.parser.SimpleNode(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.apache.commons.logging.Log(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.apache.commons.jexl2.parser.JexlNode(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveNode(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAdditiveOperator(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAndNode(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAmbiguous(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTArrayAccess(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTArrayLiteral(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTAssignment(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseAndNode(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseComplNode(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseOrNode(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBitwiseXorNode(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTBlock(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTConstructorNode(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTDivNode(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTEQNode(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTERNode(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTEmptyFunction(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTFalseNode(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTFunctionNode(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTForeachStatement(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTGENode(62)", "Delete ImportDeclaration(63)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTGTNode(64)", "Delete ImportDeclaration(65)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTIdentifier(66)", "Delete ImportDeclaration(67)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTIfStatement(68)", "Delete ImportDeclaration(69)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript(70)", "Delete ImportDeclaration(71)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTLENode(72)", "Delete ImportDeclaration(73)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTLTNode(74)", "Delete ImportDeclaration(75)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMapEntry(76)", "Delete ImportDeclaration(77)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMapLiteral(78)", "Delete ImportDeclaration(79)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMethodNode(80)", "Delete ImportDeclaration(81)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTModNode(82)", "Delete ImportDeclaration(83)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTMulNode(84)", "Delete ImportDeclaration(85)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNENode(86)", "Delete ImportDeclaration(87)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNRNode(88)", "Delete ImportDeclaration(89)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNotNode(90)", "Delete ImportDeclaration(91)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNullLiteral(92)", "Delete ImportDeclaration(93)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTNumberLiteral(94)", "Delete ImportDeclaration(95)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTOrNode(96)", "Delete ImportDeclaration(97)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReference(98)", "Delete ImportDeclaration(99)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReferenceExpression(100)", "Delete ImportDeclaration(101)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReturnStatement(102)", "Delete ImportDeclaration(103)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTSizeFunction(104)", "Delete ImportDeclaration(105)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTSizeMethod(106)", "Delete ImportDeclaration(107)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTStringLiteral(108)", "Delete ImportDeclaration(109)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTTernaryNode(110)", "Delete ImportDeclaration(111)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTTrueNode(112)", "Delete ImportDeclaration(113)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTUnaryMinusNode(114)", "Delete ImportDeclaration(115)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTWhileStatement(116)", "Delete ImportDeclaration(117)", "Delete QualifiedName: org.apache.commons.jexl2.parser.Node(118)", "Delete ImportDeclaration(119)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ParserVisitor(120)", "Delete ImportDeclaration(121)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.Uberspect(122)", "Delete ImportDeclaration(123)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod(124)", "Delete ImportDeclaration(125)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertyGet(126)", "Delete ImportDeclaration(127)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertySet(128)", "Delete ImportDeclaration(129)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTVar(130)", "Delete ImportDeclaration(131)", "Delete TextElement: An interpreter of JEXL syntax.(132)", "Delete TagElement(133)", "Delete TextElement:  2.0(134)", "Delete TagElement: @since(135)", "Delete Javadoc(136)", "Delete Modifier: public(137)", "Delete SimpleName: Interpreter(138)", "Delete SimpleName: ParserVisitor(139)", "Delete SimpleType: ParserVisitor(140)", "Delete TextElement: The logger. (141)", "Delete TagElement(142)", "Delete Javadoc(143)", "Delete Modifier: protected(144)", "Delete Modifier: final(145)", "Delete SimpleName: Log(146)", "Delete SimpleType: Log(147)", "Delete SimpleName: logger(148)", "Delete VariableDeclarationFragment(149)", "Delete FieldDeclaration(150)", "Delete TextElement: The uberspect. (151)", "Delete TagElement(152)", "Delete Javadoc(153)", "Delete Modifier: protected(154)", "Delete Modifier: final(155)", "Delete SimpleName: Uberspect(156)", "Delete SimpleType: Uberspect(157)", "Delete SimpleName: uberspect(158)", "Delete VariableDeclarationFragment(159)", "Delete FieldDeclaration(160)", "Delete TextElement: The arithmetic handler. (161)", "Delete TagElement(162)", "Delete Javadoc(163)", "Delete Modifier: protected(164)", "Delete Modifier: final(165)", "Delete SimpleName: JexlArithmetic(166)", "Delete SimpleType: JexlArithmetic(167)", "Delete SimpleName: arithmetic(168)", "Delete VariableDeclarationFragment(169)", "Delete FieldDeclaration(170)", "Delete TextElement: The map of registered functions. (171)", "Delete TagElement(172)", "Delete Javadoc(173)", "Delete Modifier: protected(174)", "Delete Modifier: final(175)", "Delete SimpleName: Map(176)", "Delete SimpleType: Map(177)", "Delete SimpleName: String(178)", "Delete SimpleType: String(179)", "Delete SimpleName: Object(180)", "Delete SimpleType: Object(181)", "Delete ParameterizedType: Map<String,Object>(182)", "Delete SimpleName: functions(183)", "Delete VariableDeclarationFragment(184)", "Delete FieldDeclaration(185)", "Delete TextElement: The map of registered functions. (186)", "Delete TagElement(187)", "Delete Javadoc(188)", "Delete Modifier: protected(189)", "Delete SimpleName: Map(190)", "Delete SimpleType: Map(191)", "Delete SimpleName: String(192)", "Delete SimpleType: String(193)", "Delete SimpleName: Object(194)", "Delete SimpleType: Object(195)", "Delete ParameterizedType: Map<String,Object>(196)", "Delete SimpleName: functors(197)", "Delete VariableDeclarationFragment(198)", "Delete FieldDeclaration(199)", "Delete TextElement: The context to store/retrieve variables. (200)", "Delete TagElement(201)", "Delete Javadoc(202)", "Delete Modifier: protected(203)", "Delete Modifier: final(204)", "Delete SimpleName: JexlContext(205)", "Delete SimpleType: JexlContext(206)", "Delete SimpleName: context(207)", "Delete VariableDeclarationFragment(208)", "Delete FieldDeclaration(209)", "Delete TextElement: Strict interpreter flag. Do not modify; will be made final in a later version. (210)", "Delete TagElement(211)", "Delete Javadoc(212)", "Delete Modifier: protected(213)", "Delete PrimitiveType: boolean(214)", "Delete SimpleName: strict(215)", "Delete VariableDeclarationFragment(216)", "Delete FieldDeclaration(217)", "Delete TextElement: Silent intepreter flag.  Do not modify; will be made final in a later version. (218)", "Delete TagElement(219)", "Delete Javadoc(220)", "Delete Modifier: protected(221)", "Delete PrimitiveType: boolean(222)", "Delete SimpleName: silent(223)", "Delete VariableDeclarationFragment(224)", "Delete FieldDeclaration(225)", "Delete TextElement: Cache executors. (226)", "Delete TagElement(227)", "Delete Javadoc(228)", "Delete Modifier: protected(229)", "Delete Modifier: final(230)", "Delete PrimitiveType: boolean(231)", "Delete SimpleName: cache(232)", "Delete VariableDeclarationFragment(233)", "Delete FieldDeclaration(234)", "Delete TextElement: Registers or arguments. (235)", "Delete TagElement(236)", "Delete Javadoc(237)", "Delete Modifier: protected(238)", "Delete SimpleName: Object(239)", "Delete SimpleType: Object(240)", "Delete Dimension(241)", "Delete ArrayType: Object[](242)", "Delete SimpleName: registers(243)", "Delete NullLiteral(244)", "Delete VariableDeclarationFragment(245)", "Delete FieldDeclaration(246)", "Delete TextElement: Parameter names if any. (247)", "Delete TagElement(248)", "Delete Javadoc(249)", "Delete Modifier: protected(250)", "Delete SimpleName: String(251)", "Delete SimpleType: String(252)", "Delete Dimension(253)", "Delete ArrayType: String[](254)", "Delete SimpleName: parameters(255)", "Delete NullLiteral(256)", "Delete VariableDeclarationFragment(257)", "Delete FieldDeclaration(258)", "Delete TextElement: Cancellation support. (259)", "Delete TagElement(260)", "Delete Javadoc(261)", "Delete Modifier: protected(262)", "Delete Modifier: volatile(263)", "Delete PrimitiveType: boolean(264)", "Delete SimpleName: cancelled(265)", "Delete BooleanLiteral: false(266)", "Delete VariableDeclarationFragment(267)", "Delete FieldDeclaration(268)", "Delete TextElement: Empty parameters for method matching. (269)", "Delete TagElement(270)", "Delete Javadoc(271)", "Delete Modifier: protected(272)", "Delete Modifier: static(273)", "Delete Modifier: final(274)", "Delete SimpleName: Object(275)", "Delete SimpleType: Object(276)", "Delete Dimension(277)", "Delete ArrayType: Object[](278)", "Delete SimpleName: EMPTY_PARAMS(279)", "Delete SimpleName: Object(280)", "Delete SimpleType: Object(281)", "Delete Dimension(282)", "Delete ArrayType: Object[](283)", "Delete NumberLiteral: 0(284)", "Delete ArrayCreation(285)", "Delete VariableDeclarationFragment(286)", "Delete FieldDeclaration(287)", "Delete TextElement: Creates an interpreter.(288)", "Delete TagElement(289)", "Delete SimpleName: jexl(290)", "Delete TextElement:  the engine creating this interpreter(291)", "Delete TagElement: @param(292)", "Delete SimpleName: aContext(293)", "Delete TextElement:  the context to evaluate expression(294)", "Delete TagElement: @param(295)", "Delete TextElement:  (296)", "Delete TagElement: @deprecated(297)", "Delete Javadoc(298)", "Delete SimpleName: Deprecated(299)", "Delete MarkerAnnotation(300)", "Delete Modifier: public(301)", "Delete SimpleName: Interpreter(302)", "Delete SimpleName: JexlEngine(303)", "Delete SimpleType: JexlEngine(304)", "Delete SimpleName: jexl(305)", "Delete SingleVariableDeclaration(306)", "Delete SimpleName: JexlContext(307)", "Delete SimpleType: JexlContext(308)", "Delete SimpleName: aContext(309)", "Delete SingleVariableDeclaration(310)", "Delete SimpleName: jexl(311)", "Delete SimpleName: aContext(312)", "Delete SimpleName: jexl(313)", "Delete SimpleName: isLenient(314)", "Delete MethodInvocation(315)", "Delete PrefixExpression: !(316)", "Delete SimpleName: jexl(317)", "Delete SimpleName: isSilent(318)", "Delete MethodInvocation(319)", "Delete ConstructorInvocation(320)", "Delete Block(321)", "Delete MethodDeclaration(322)", "Delete TextElement: Creates an interpreter.(323)", "Delete TagElement(324)", "Delete SimpleName: jexl(325)", "Delete TextElement:  the engine creating this interpreter(326)", "Delete TagElement: @param(327)", "Delete SimpleName: aContext(328)", "Delete TextElement:  the context to evaluate expression(329)", "Delete TagElement: @param(330)", "Delete SimpleName: strictFlag(331)", "Delete TextElement:  whether this interpreter runs in strict mode(332)", "Delete TagElement: @param(333)", "Delete SimpleName: silentFlag(334)", "Delete TextElement:  whether this interpreter runs in silent mode(335)", "Delete TagElement: @param(336)", "Delete Javadoc(337)", "Delete Modifier: public(338)", "Delete SimpleName: Interpreter(339)", "Delete SimpleName: JexlEngine(340)", "Delete SimpleType: JexlEngine(341)", "Delete SimpleName: jexl(342)", "Delete SingleVariableDeclaration(343)", "Delete SimpleName: JexlContext(344)", "Delete SimpleType: JexlContext(345)", "Delete SimpleName: aContext(346)", "Delete SingleVariableDeclaration(347)", "Delete PrimitiveType: boolean(348)", "Delete SimpleName: strictFlag(349)", "Delete SingleVariableDeclaration(350)", "Delete PrimitiveType: boolean(351)", "Delete SimpleName: silentFlag(352)", "Delete SingleVariableDeclaration(353)", "Delete ThisExpression(354)", "Delete SimpleName: logger(355)", "Delete FieldAccess(356)", "Delete QualifiedName: jexl.logger(357)", "Delete Assignment: =(358)", "Delete ExpressionStatement(359)", "Delete ThisExpression(360)", "Delete SimpleName: uberspect(361)", "Delete FieldAccess(362)", "Delete QualifiedName: jexl.uberspect(363)", "Delete Assignment: =(364)", "Delete ExpressionStatement(365)", "Delete ThisExpression(366)", "Delete SimpleName: arithmetic(367)", "Delete FieldAccess(368)", "Delete QualifiedName: jexl.arithmetic(369)", "Delete Assignment: =(370)", "Delete ExpressionStatement(371)", "Delete ThisExpression(372)", "Delete SimpleName: functions(373)", "Delete FieldAccess(374)", "Delete QualifiedName: jexl.functions(375)", "Delete Assignment: =(376)", "Delete ExpressionStatement(377)", "Delete ThisExpression(378)", "Delete SimpleName: strict(379)", "Delete FieldAccess(380)", "Delete SimpleName: strictFlag(381)", "Delete Assignment: =(382)", "Delete ExpressionStatement(383)", "Delete ThisExpression(384)", "Delete SimpleName: silent(385)", "Delete FieldAccess(386)", "Delete SimpleName: silentFlag(387)", "Delete Assignment: =(388)", "Delete ExpressionStatement(389)", "Delete ThisExpression(390)", "Delete SimpleName: cache(391)", "Delete FieldAccess(392)", "Delete QualifiedName: jexl.cache(393)", "Delete NullLiteral(394)", "Delete InfixExpression: !=(395)", "Delete Assignment: =(396)", "Delete ExpressionStatement(397)", "Delete ThisExpression(398)", "Delete SimpleName: context(399)", "Delete FieldAccess(400)", "Delete SimpleName: aContext(401)", "Delete NullLiteral(402)", "Delete InfixExpression: !=(403)", "Delete SimpleName: aContext(404)", "Delete QualifiedName: JexlEngine.EMPTY_CONTEXT(405)", "Delete ConditionalExpression(406)", "Delete Assignment: =(407)", "Delete ExpressionStatement(408)", "Delete ThisExpression(409)", "Delete SimpleName: functors(410)", "Delete FieldAccess(411)", "Delete NullLiteral(412)", "Delete Assignment: =(413)", "Delete ExpressionStatement(414)", "Delete Block(415)", "Delete MethodDeclaration(416)", "Delete TextElement: Copy constructor.(417)", "Delete TagElement(418)", "Delete SimpleName: base(419)", "Delete TextElement:  the base to copy(420)", "Delete TagElement: @param(421)", "Delete Javadoc(422)", "Delete Modifier: protected(423)", "Delete SimpleName: Interpreter(424)", "Delete SimpleName: Interpreter(425)", "Delete SimpleType: Interpreter(426)", "Delete SimpleName: base(427)", "Delete SingleVariableDeclaration(428)", "Delete ThisExpression(429)", "Delete SimpleName: logger(430)", "Delete FieldAccess(431)", "Delete QualifiedName: base.logger(432)", "Delete Assignment: =(433)", "Delete ExpressionStatement(434)", "Delete ThisExpression(435)", "Delete SimpleName: uberspect(436)", "Delete FieldAccess(437)", "Delete QualifiedName: base.uberspect(438)", "Delete Assignment: =(439)", "Delete ExpressionStatement(440)", "Delete ThisExpression(441)", "Delete SimpleName: arithmetic(442)", "Delete FieldAccess(443)", "Delete QualifiedName: base.arithmetic(444)", "Delete Assignment: =(445)", "Delete ExpressionStatement(446)", "Delete ThisExpression(447)", "Delete SimpleName: functions(448)", "Delete FieldAccess(449)", "Delete QualifiedName: base.functions(450)", "Delete Assignment: =(451)", "Delete ExpressionStatement(452)", "Delete ThisExpression(453)", "Delete SimpleName: strict(454)", "Delete FieldAccess(455)", "Delete QualifiedName: base.strict(456)", "Delete Assignment: =(457)", "Delete ExpressionStatement(458)", "Delete ThisExpression(459)", "Delete SimpleName: silent(460)", "Delete FieldAccess(461)", "Delete QualifiedName: base.silent(462)", "Delete Assignment: =(463)", "Delete ExpressionStatement(464)", "Delete ThisExpression(465)", "Delete SimpleName: cache(466)", "Delete FieldAccess(467)", "Delete QualifiedName: base.cache(468)", "Delete Assignment: =(469)", "Delete ExpressionStatement(470)", "Delete ThisExpression(471)", "Delete SimpleName: context(472)", "Delete FieldAccess(473)", "Delete QualifiedName: base.context(474)", "Delete Assignment: =(475)", "Delete ExpressionStatement(476)", "Delete ThisExpression(477)", "Delete SimpleName: functors(478)", "Delete FieldAccess(479)", "Delete QualifiedName: base.functors(480)", "Delete Assignment: =(481)", "Delete ExpressionStatement(482)", "Delete Block(483)", "Delete MethodDeclaration(484)", "Delete TextElement: Sets whether this interpreter considers unknown variables, methods and constructors as errors.(485)", "Delete TagElement(486)", "Delete SimpleName: flag(487)", "Delete TextElement:  true for strict, false for lenient(488)", "Delete TagElement: @param(489)", "Delete TextElement:  Do not use; will be removed in a later version(490)", "Delete TagElement: @deprecated(491)", "Delete Javadoc(492)", "Delete SimpleName: Deprecated(493)", "Delete MarkerAnnotation(494)", "Delete Modifier: public(495)", "Delete PrimitiveType: void(496)", "Delete SimpleName: setStrict(497)", "Delete PrimitiveType: boolean(498)", "Delete SimpleName: flag(499)", "Delete SingleVariableDeclaration(500)", "Delete ThisExpression(501)", "Delete SimpleName: strict(502)", "Delete FieldAccess(503)", "Delete SimpleName: flag(504)", "Delete Assignment: =(505)", "Delete ExpressionStatement(506)", "Delete Block(507)", "Delete MethodDeclaration(508)", "Delete TextElement: Sets whether this interpreter throws JexlException when encountering errors.(509)", "Delete TagElement(510)", "Delete SimpleName: flag(511)", "Delete TextElement:  true for silent, false for verbose(512)", "Delete TagElement: @param(513)", "Delete TextElement:  Do not use; will be removed in a later version(514)", "Delete TagElement: @deprecated(515)", "Delete Javadoc(516)", "Delete SimpleName: Deprecated(517)", "Delete MarkerAnnotation(518)", "Delete Modifier: public(519)", "Delete PrimitiveType: void(520)", "Delete SimpleName: setSilent(521)", "Delete PrimitiveType: boolean(522)", "Delete SimpleName: flag(523)", "Delete SingleVariableDeclaration(524)", "Delete ThisExpression(525)", "Delete SimpleName: silent(526)", "Delete FieldAccess(527)", "Delete SimpleName: flag(528)", "Delete Assignment: =(529)", "Delete ExpressionStatement(530)", "Delete Block(531)", "Delete MethodDeclaration(532)", "Delete TextElement: Checks whether this interpreter considers unknown variables, methods and constructors as errors.(533)", "Delete TagElement(534)", "Delete TextElement:  true if strict, false otherwise(535)", "Delete TagElement: @return(536)", "Delete Javadoc(537)", "Delete Modifier: public(538)", "Delete PrimitiveType: boolean(539)", "Delete SimpleName: isStrict(540)", "Delete ThisExpression(541)", "Delete SimpleName: strict(542)", "Delete FieldAccess(543)", "Delete ReturnStatement(544)", "Delete Block(545)", "Delete MethodDeclaration(546)", "Delete TextElement: Checks whether this interpreter throws JexlException when encountering errors.(547)", "Delete TagElement(548)", "Delete TextElement:  true if silent, false otherwise(549)", "Delete TagElement: @return(550)", "Delete Javadoc(551)", "Delete Modifier: public(552)", "Delete PrimitiveType: boolean(553)", "Delete SimpleName: isSilent(554)", "Delete ThisExpression(555)", "Delete SimpleName: silent(556)", "Delete FieldAccess(557)", "Delete ReturnStatement(558)", "Delete Block(559)", "Delete MethodDeclaration(560)", "Delete TextElement: Interpret the given script/expression.(561)", "Delete TextElement: <p>(562)", "Delete TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as info.(563)", "Delete TextElement: </p>(564)", "Delete TagElement(565)", "Delete SimpleName: node(566)", "Delete TextElement:  the script or expression to interpret.(567)", "Delete TagElement: @param(568)", "Delete TextElement:  the result of the interpretation.(569)", "Delete TagElement: @return(570)", "Delete SimpleName: JexlException(571)", "Delete TextElement:  if any error occurs during interpretation.(572)", "Delete TagElement: @throws(573)", "Delete Javadoc(574)", "Delete Modifier: public(575)", "Delete SimpleName: Object(576)", "Delete SimpleType: Object(577)", "Delete SimpleName: interpret(578)", "Delete SimpleName: JexlNode(579)", "Delete SimpleType: JexlNode(580)", "Delete SimpleName: node(581)", "Delete SingleVariableDeclaration(582)", "Delete SimpleName: node(583)", "Delete SimpleName: jjtAccept(584)", "Delete ThisExpression(585)", "Delete NullLiteral(586)", "Delete MethodInvocation(587)", "Delete ReturnStatement(588)", "Delete Block(589)", "Delete QualifiedName: JexlException.Return(590)", "Delete SimpleType: JexlException.Return(591)", "Delete SimpleName: xreturn(592)", "Delete SingleVariableDeclaration(593)", "Delete SimpleName: Object(594)", "Delete SimpleType: Object(595)", "Delete SimpleName: value(596)", "Delete SimpleName: xreturn(597)", "Delete SimpleName: getValue(598)", "Delete MethodInvocation(599)", "Delete VariableDeclarationFragment(600)", "Delete VariableDeclarationStatement(601)", "Delete SimpleName: value(602)", "Delete ReturnStatement(603)", "Delete Block(604)", "Delete CatchClause(605)", "Delete SimpleName: JexlException(606)", "Delete SimpleType: JexlException(607)", "Delete SimpleName: xjexl(608)", "Delete SingleVariableDeclaration(609)", "Delete SimpleName: silent(610)", "Delete SimpleName: logger(611)", "Delete SimpleName: warn(612)", "Delete SimpleName: xjexl(613)", "Delete SimpleName: getMessage(614)", "Delete MethodInvocation(615)", "Delete SimpleName: xjexl(616)", "Delete SimpleName: getCause(617)", "Delete MethodInvocation(618)", "Delete MethodInvocation(619)", "Delete ExpressionStatement(620)", "Delete NullLiteral(621)", "Delete ReturnStatement(622)", "Delete Block(623)", "Delete IfStatement(624)", "Delete SimpleName: xjexl(625)", "Delete ThrowStatement(626)", "Delete Block(627)", "Delete CatchClause(628)", "Delete SimpleName: functors(629)", "Delete NullLiteral(630)", "Delete Assignment: =(631)", "Delete ExpressionStatement(632)", "Delete SimpleName: parameters(633)", "Delete NullLiteral(634)", "Delete Assignment: =(635)", "Delete ExpressionStatement(636)", "Delete SimpleName: registers(637)", "Delete NullLiteral(638)", "Delete Assignment: =(639)", "Delete ExpressionStatement(640)", "Delete Block(641)", "Delete TryStatement(642)", "Delete Block(643)", "Delete MethodDeclaration(644)", "Delete TextElement: Gets the context.(645)", "Delete TagElement(646)", "Delete TextElement:  the (647)", "Delete SimpleName: JexlContext(648)", "Delete TagElement: @link(649)", "Delete TextElement:  used for evaluation.(650)", "Delete TagElement: @return(651)", "Delete Javadoc(652)", "Delete Modifier: protected(653)", "Delete SimpleName: JexlContext(654)", "Delete SimpleType: JexlContext(655)", "Delete SimpleName: getContext(656)", "Delete SimpleName: context(657)", "Delete ReturnStatement(658)", "Delete Block(659)", "Delete MethodDeclaration(660)", "Delete TextElement: Gets the uberspect.(661)", "Delete TagElement(662)", "Delete TextElement:  an (663)", "Delete SimpleName: Uberspect(664)", "Delete TagElement: @link(665)", "Delete TagElement: @return(666)", "Delete Javadoc(667)", "Delete Modifier: protected(668)", "Delete SimpleName: Uberspect(669)", "Delete SimpleType: Uberspect(670)", "Delete SimpleName: getUberspect(671)", "Delete SimpleName: uberspect(672)", "Delete ReturnStatement(673)", "Delete Block(674)", "Delete MethodDeclaration(675)", "Delete TextElement: Sets this interpreter registers for bean access/assign expressions.(676)", "Delete TextElement: <p>Use setFrame(...) instead.</p>(677)", "Delete TagElement(678)", "Delete SimpleName: theRegisters(679)", "Delete TextElement:  the array of registers(680)", "Delete TagElement: @param(681)", "Delete Javadoc(682)", "Delete SimpleName: Deprecated(683)", "Delete MarkerAnnotation(684)", "Delete Modifier: protected(685)", "Delete PrimitiveType: void(686)", "Delete SimpleName: setRegisters(687)", "Delete SimpleName: Object(688)", "Delete SimpleType: Object(689)", "Delete SimpleName: theRegisters(690)", "Delete SingleVariableDeclaration(691)", "Delete SimpleName: theRegisters(692)", "Delete NullLiteral(693)", "Delete InfixExpression: !=(694)", "Delete SimpleName: String(695)", "Delete SimpleType: String(696)", "Delete Dimension(697)", "Delete ArrayType: String[](698)", "Delete SimpleName: regStrs(699)", "Delete SimpleName: String(700)", "Delete SimpleType: String(701)", "Delete Dimension(702)", "Delete ArrayType: String[](703)", "Delete QualifiedName: theRegisters.length(704)", "Delete ArrayCreation(705)", "Delete VariableDeclarationFragment(706)", "Delete VariableDeclarationStatement(707)", "Delete PrimitiveType: int(708)", "Delete SimpleName: r(709)", "Delete NumberLiteral: 0(710)", "Delete VariableDeclarationFragment(711)", "Delete VariableDeclarationExpression(712)", "Delete SimpleName: r(713)", "Delete QualifiedName: regStrs.length(714)", "Delete InfixExpression: <(715)", "Delete SimpleName: r(716)", "Delete PrefixExpression: ++(717)", "Delete SimpleName: regStrs(718)", "Delete SimpleName: r(719)", "Delete ArrayAccess(720)", "Delete StringLiteral: \"#\"(721)", "Delete SimpleName: r(722)", "Delete InfixExpression: +(723)", "Delete Assignment: =(724)", "Delete ExpressionStatement(725)", "Delete Block(726)", "Delete ForStatement(727)", "Delete ThisExpression(728)", "Delete SimpleName: parameters(729)", "Delete FieldAccess(730)", "Delete SimpleName: regStrs(731)", "Delete Assignment: =(732)", "Delete ExpressionStatement(733)", "Delete Block(734)", "Delete IfStatement(735)", "Delete ThisExpression(736)", "Delete SimpleName: registers(737)", "Delete FieldAccess(738)", "Delete SimpleName: theRegisters(739)", "Delete Assignment: =(740)", "Delete ExpressionStatement(741)", "Delete Block(742)", "Delete MethodDeclaration(743)", "Delete TextElement: Sets this interpreter parameters and arguments.(744)", "Delete TagElement(745)", "Delete SimpleName: frame(746)", "Delete TextElement:  the calling frame(747)", "Delete TagElement: @param(748)", "Delete Javadoc(749)", "Delete Modifier: protected(750)", "Delete PrimitiveType: void(751)", "Delete SimpleName: setFrame(752)", "Delete QualifiedName: JexlEngine.Frame(753)", "Delete SimpleType: JexlEngine.Frame(754)", "Delete SimpleName: frame(755)", "Delete SingleVariableDeclaration(756)", "Delete SimpleName: frame(757)", "Delete NullLiteral(758)", "Delete InfixExpression: !=(759)", "Delete ThisExpression(760)", "Delete SimpleName: parameters(761)", "Delete FieldAccess(762)", "Delete SimpleName: frame(763)", "Delete SimpleName: getParameters(764)", "Delete MethodInvocation(765)", "Delete Assignment: =(766)", "Delete ExpressionStatement(767)", "Delete ThisExpression(768)", "Delete SimpleName: registers(769)", "Delete FieldAccess(770)", "Delete SimpleName: frame(771)", "Delete SimpleName: getRegisters(772)", "Delete MethodInvocation(773)", "Delete Assignment: =(774)", "Delete ExpressionStatement(775)", "Delete Block(776)", "Delete ThisExpression(777)", "Delete SimpleName: parameters(778)", "Delete FieldAccess(779)", "Delete NullLiteral(780)", "Delete Assignment: =(781)", "Delete ExpressionStatement(782)", "Delete ThisExpression(783)", "Delete SimpleName: registers(784)", "Delete FieldAccess(785)", "Delete NullLiteral(786)", "Delete Assignment: =(787)", "Delete ExpressionStatement(788)", "Delete Block(789)", "Delete IfStatement(790)", "Delete Block(791)", "Delete MethodDeclaration(792)", "Delete TextElement: Finds the node causing a NPE for diadic operators.(793)", "Delete TagElement(794)", "Delete SimpleName: xrt(795)", "Delete TextElement:  the RuntimeException(796)", "Delete TagElement: @param(797)", "Delete SimpleName: node(798)", "Delete TextElement:  the parent node(799)", "Delete TagElement: @param(800)", "Delete SimpleName: left(801)", "Delete TextElement:  the left argument(802)", "Delete TagElement: @param(803)", "Delete SimpleName: right(804)", "Delete TextElement:  the right argument(805)", "Delete TagElement: @param(806)", "Delete TextElement:  the left, right or parent node(807)", "Delete TagElement: @return(808)", "Delete Javadoc(809)", "Delete Modifier: protected(810)", "Delete SimpleName: JexlNode(811)", "Delete SimpleType: JexlNode(812)", "Delete SimpleName: findNullOperand(813)", "Delete SimpleName: RuntimeException(814)", "Delete SimpleType: RuntimeException(815)", "Delete SimpleName: xrt(816)", "Delete SingleVariableDeclaration(817)", "Delete SimpleName: JexlNode(818)", "Delete SimpleType: JexlNode(819)", "Delete SimpleName: node(820)", "Delete SingleVariableDeclaration(821)", "Delete SimpleName: Object(822)", "Delete SimpleType: Object(823)", "Delete SimpleName: left(824)", "Delete SingleVariableDeclaration(825)", "Delete SimpleName: Object(826)", "Delete SimpleType: Object(827)", "Delete SimpleName: right(828)", "Delete SingleVariableDeclaration(829)", "Delete SimpleName: xrt(830)", "Delete SimpleName: ArithmeticException(831)", "Delete SimpleType: ArithmeticException(832)", "Delete InstanceofExpression(833)", "Delete QualifiedName: JexlException.NULL_OPERAND(834)", "Delete SimpleName: xrt(835)", "Delete SimpleName: getMessage(836)", "Delete MethodInvocation(837)", "Delete InfixExpression: ==(838)", "Delete InfixExpression: &&(839)", "Delete SimpleName: left(840)", "Delete NullLiteral(841)", "Delete InfixExpression: ==(842)", "Delete SimpleName: node(843)", "Delete SimpleName: jjtGetChild(844)", "Delete NumberLiteral: 0(845)", "Delete MethodInvocation(846)", "Delete ReturnStatement(847)", "Delete Block(848)", "Delete IfStatement(849)", "Delete SimpleName: right(850)", "Delete NullLiteral(851)", "Delete InfixExpression: ==(852)", "Delete SimpleName: node(853)", "Delete SimpleName: jjtGetChild(854)", "Delete NumberLiteral: 1(855)", "Delete MethodInvocation(856)", "Delete ReturnStatement(857)", "Delete Block(858)", "Delete IfStatement(859)", "Delete Block(860)", "Delete IfStatement(861)", "Delete SimpleName: node(862)", "Delete ReturnStatement(863)", "Delete Block(864)", "Delete MethodDeclaration(865)", "Delete TextElement: Triggered when variable can not be resolved.(866)", "Delete TagElement(867)", "Delete SimpleName: xjexl(868)", "Delete TextElement:  the JexlException (\"undefined variable \" + variable)(869)", "Delete TagElement: @param(870)", "Delete TextElement:  throws JexlException if strict, null otherwise(871)", "Delete TagElement: @return(872)", "Delete Javadoc(873)", "Delete Modifier: protected(874)", "Delete SimpleName: Object(875)", "Delete SimpleType: Object(876)", "Delete SimpleName: unknownVariable(877)", "Delete SimpleName: JexlException(878)", "Delete SimpleType: JexlException(879)", "Delete SimpleName: xjexl(880)", "Delete SingleVariableDeclaration(881)", "Delete SimpleName: strict(882)", "Delete SimpleName: xjexl(883)", "Delete ThrowStatement(884)", "Delete Block(885)", "Delete IfStatement(886)", "Delete SimpleName: silent(887)", "Delete PrefixExpression: !(888)", "Delete SimpleName: logger(889)", "Delete SimpleName: warn(890)", "Delete SimpleName: xjexl(891)", "Delete SimpleName: getMessage(892)", "Delete MethodInvocation(893)", "Delete MethodInvocation(894)", "Delete ExpressionStatement(895)", "Delete Block(896)", "Delete IfStatement(897)", "Delete NullLiteral(898)", "Delete ReturnStatement(899)", "Delete Block(900)", "Delete MethodDeclaration(901)", "Delete TextElement: Triggered when method, function or constructor invocation fails.(902)", "Delete TagElement(903)", "Delete SimpleName: xjexl(904)", "Delete TextElement:  the JexlException wrapping the original error(905)", "Delete TagElement: @param(906)", "Delete TextElement:  throws JexlException if strict, null otherwise(907)", "Delete TagElement: @return(908)", "Delete Javadoc(909)", "Delete Modifier: protected(910)", "Delete SimpleName: Object(911)", "Delete SimpleType: Object(912)", "Delete SimpleName: invocationFailed(913)", "Delete SimpleName: JexlException(914)", "Delete SimpleType: JexlException(915)", "Delete SimpleName: xjexl(916)", "Delete SingleVariableDeclaration(917)", "Delete SimpleName: strict(918)", "Delete SimpleName: xjexl(919)", "Delete QualifiedName: JexlException.Return(920)", "Delete SimpleType: JexlException.Return(921)", "Delete InstanceofExpression(922)", "Delete InfixExpression: ||(923)", "Delete SimpleName: xjexl(924)", "Delete ThrowStatement(925)", "Delete Block(926)", "Delete IfStatement(927)", "Delete SimpleName: silent(928)", "Delete PrefixExpression: !(929)", "Delete SimpleName: logger(930)", "Delete SimpleName: warn(931)", "Delete SimpleName: xjexl(932)", "Delete SimpleName: getMessage(933)", "Delete MethodInvocation(934)", "Delete SimpleName: xjexl(935)", "Delete SimpleName: getCause(936)", "Delete MethodInvocation(937)", "Delete MethodInvocation(938)", "Delete ExpressionStatement(939)", "Delete Block(940)", "Delete IfStatement(941)", "Delete NullLiteral(942)", "Delete ReturnStatement(943)", "Delete Block(944)", "Delete MethodDeclaration(945)", "Delete TextElement: Checks whether this interpreter execution was cancelled due to thread interruption.(946)", "Delete TagElement(947)", "Delete TextElement:  true if cancelled, false otherwise(948)", "Delete TagElement: @return(949)", "Delete TextElement:  2.1(950)", "Delete TagElement: @since(951)", "Delete Javadoc(952)", "Delete Modifier: protected(953)", "Delete PrimitiveType: boolean(954)", "Delete SimpleName: isCancelled(955)", "Delete SimpleName: cancelled(956)", "Delete SimpleName: Thread(957)", "Delete SimpleName: interrupted(958)", "Delete MethodInvocation(959)", "Delete InfixExpression: |(960)", "Delete SimpleName: cancelled(961)", "Delete BooleanLiteral: true(962)", "Delete Assignment: =(963)", "Delete ExpressionStatement(964)", "Delete Block(965)", "Delete IfStatement(966)", "Delete SimpleName: cancelled(967)", "Delete ReturnStatement(968)", "Delete Block(969)", "Delete MethodDeclaration(970)", "Delete TextElement: Resolves a namespace, eventually allocating an instance using context as constructor argument.(971)", "Delete TextElement: The lifetime of such instances span the current expression or script evaluation.(972)", "Delete TagElement(973)", "Delete SimpleName: prefix(974)", "Delete TextElement:  the prefix name (may be null for global namespace)(975)", "Delete TagElement: @param(976)", "Delete SimpleName: node(977)", "Delete TextElement:  the AST node(978)", "Delete TagElement: @param(979)", "Delete TextElement:  the namespace instance(980)", "Delete TagElement: @return(981)", "Delete Javadoc(982)", "Delete Modifier: protected(983)", "Delete SimpleName: Object(984)", "Delete SimpleType: Object(985)", "Delete SimpleName: resolveNamespace(986)", "Delete SimpleName: String(987)", "Delete SimpleType: String(988)", "Delete SimpleName: prefix(989)", "Delete SingleVariableDeclaration(990)", "Delete SimpleName: JexlNode(991)", "Delete SimpleType: JexlNode(992)", "Delete SimpleName: node(993)", "Delete SingleVariableDeclaration(994)", "Delete SimpleName: Object(995)", "Delete SimpleType: Object(996)", "Delete SimpleName: namespace(997)", "Delete NullLiteral(998)", "Delete VariableDeclarationFragment(999)", "Delete VariableDeclarationStatement(1000)", "Delete SimpleName: functors(1001)", "Delete NullLiteral(1002)", "Delete InfixExpression: !=(1003)", "Delete SimpleName: namespace(1004)", "Delete SimpleName: functors(1005)", "Delete SimpleName: get(1006)", "Delete SimpleName: prefix(1007)", "Delete MethodInvocation(1008)", "Delete Assignment: =(1009)", "Delete ExpressionStatement(1010)", "Delete SimpleName: namespace(1011)", "Delete NullLiteral(1012)", "Delete InfixExpression: !=(1013)", "Delete SimpleName: namespace(1014)", "Delete ReturnStatement(1015)", "Delete Block(1016)", "Delete IfStatement(1017)", "Delete Block(1018)", "Delete IfStatement(1019)", "Delete SimpleName: context(1020)", "Delete SimpleName: NamespaceResolver(1021)", "Delete SimpleType: NamespaceResolver(1022)", "Delete InstanceofExpression(1023)", "Delete SimpleName: namespace(1024)", "Delete SimpleName: NamespaceResolver(1025)", "Delete SimpleType: NamespaceResolver(1026)", "Delete SimpleName: context(1027)", "Delete CastExpression(1028)", "Delete ParenthesizedExpression(1029)", "Delete SimpleName: resolveNamespace(1030)", "Delete SimpleName: prefix(1031)", "Delete MethodInvocation(1032)", "Delete Assignment: =(1033)", "Delete ExpressionStatement(1034)", "Delete Block(1035)", "Delete IfStatement(1036)", "Delete SimpleName: namespace(1037)", "Delete NullLiteral(1038)", "Delete InfixExpression: ==(1039)", "Delete SimpleName: namespace(1040)", "Delete SimpleName: functions(1041)", "Delete SimpleName: get(1042)", "Delete SimpleName: prefix(1043)", "Delete MethodInvocation(1044)", "Delete Assignment: =(1045)", "Delete ExpressionStatement(1046)", "Delete SimpleName: prefix(1047)", "Delete NullLiteral(1048)", "Delete InfixExpression: !=(1049)", "Delete SimpleName: namespace(1050)", "Delete NullLiteral(1051)", "Delete InfixExpression: ==(1052)", "Delete InfixExpression: &&(1053)", "Delete SimpleName: JexlException(1054)", "Delete SimpleType: JexlException(1055)", "Delete SimpleName: node(1056)", "Delete StringLiteral: \"no such function namespace \"(1057)", "Delete SimpleName: prefix(1058)", "Delete InfixExpression: +(1059)", "Delete ClassInstanceCreation(1060)", "Delete ThrowStatement(1061)", "Delete Block(1062)", "Delete IfStatement(1063)", "Delete Block(1064)", "Delete IfStatement(1065)", "Delete SimpleName: namespace(1066)", "Delete SimpleName: Class(1067)", "Delete SimpleType: Class(1068)", "Delete WildcardType: ?(1069)", "Delete ParameterizedType: Class<?>(1070)", "Delete InstanceofExpression(1071)", "Delete SimpleName: Object(1072)", "Delete SimpleType: Object(1073)", "Delete Dimension(1074)", "Delete ArrayType: Object[](1075)", "Delete SimpleName: args(1076)", "Delete SimpleName: Object(1077)", "Delete SimpleType: Object(1078)", "Delete Dimension(1079)", "Delete ArrayType: Object[](1080)", "Delete SimpleName: context(1081)", "Delete ArrayInitializer(1082)", "Delete ArrayCreation(1083)", "Delete VariableDeclarationFragment(1084)", "Delete VariableDeclarationStatement(1085)", "Delete SimpleName: JexlMethod(1086)", "Delete SimpleType: JexlMethod(1087)", "Delete SimpleName: ctor(1088)", "Delete SimpleName: uberspect(1089)", "Delete SimpleName: getConstructorMethod(1090)", "Delete SimpleName: namespace(1091)", "Delete SimpleName: args(1092)", "Delete SimpleName: node(1093)", "Delete MethodInvocation(1094)", "Delete VariableDeclarationFragment(1095)", "Delete VariableDeclarationStatement(1096)", "Delete SimpleName: ctor(1097)", "Delete NullLiteral(1098)", "Delete InfixExpression: !=(1099)", "Delete SimpleName: namespace(1100)", "Delete SimpleName: ctor(1101)", "Delete SimpleName: invoke(1102)", "Delete SimpleName: namespace(1103)", "Delete SimpleName: args(1104)", "Delete MethodInvocation(1105)", "Delete Assignment: =(1106)", "Delete ExpressionStatement(1107)", "Delete SimpleName: functors(1108)", "Delete NullLiteral(1109)", "Delete InfixExpression: ==(1110)", "Delete SimpleName: functors(1111)", "Delete SimpleName: HashMap(1112)", "Delete SimpleType: HashMap(1113)", "Delete SimpleName: String(1114)", "Delete SimpleType: String(1115)", "Delete SimpleName: Object(1116)", "Delete SimpleType: Object(1117)", "Delete ParameterizedType: HashMap<String,Object>(1118)", "Delete ClassInstanceCreation(1119)", "Delete Assignment: =(1120)", "Delete ExpressionStatement(1121)", "Delete Block(1122)", "Delete IfStatement(1123)", "Delete SimpleName: functors(1124)", "Delete SimpleName: put(1125)", "Delete SimpleName: prefix(1126)", "Delete SimpleName: namespace(1127)", "Delete MethodInvocation(1128)", "Delete ExpressionStatement(1129)", "Delete Block(1130)", "Delete SimpleName: Exception(1131)", "Delete SimpleType: Exception(1132)", "Delete SimpleName: xinst(1133)", "Delete SingleVariableDeclaration(1134)", "Delete SimpleName: JexlException(1135)", "Delete SimpleType: JexlException(1136)", "Delete SimpleName: node(1137)", "Delete StringLiteral: \"unable to instantiate namespace \"(1138)", "Delete SimpleName: prefix(1139)", "Delete InfixExpression: +(1140)", "Delete SimpleName: xinst(1141)", "Delete ClassInstanceCreation(1142)", "Delete ThrowStatement(1143)", "Delete Block(1144)", "Delete CatchClause(1145)", "Delete TryStatement(1146)", "Delete Block(1147)", "Delete IfStatement(1148)", "Delete Block(1149)", "Delete IfStatement(1150)", "Delete SimpleName: namespace(1151)", "Delete ReturnStatement(1152)", "Delete Block(1153)", "Delete MethodDeclaration(1154)", "Delete TagElement: @inheritDoc(1155)", "Delete TextElement:  (1156)", "Delete TagElement(1157)", "Delete Javadoc(1158)", "Delete Modifier: public(1159)", "Delete SimpleName: Object(1160)", "Delete SimpleType: Object(1161)", "Delete SimpleName: visit(1162)", "Delete SimpleName: ASTAdditiveNode(1163)", "Delete SimpleType: ASTAdditiveNode(1164)", "Delete SimpleName: node(1165)", "Delete SingleVariableDeclaration(1166)", "Delete SimpleName: Object(1167)", "Delete SimpleType: Object(1168)", "Delete SimpleName: data(1169)", "Delete SingleVariableDeclaration(1170)", "Delete SimpleName: Object(1171)", "Delete SimpleType: Object(1172)", "Delete SimpleName: left(1173)", "Delete SimpleName: node(1174)", "Delete SimpleName: jjtGetChild(1175)", "Delete NumberLiteral: 0(1176)", "Delete MethodInvocation(1177)", "Delete SimpleName: jjtAccept(1178)", "Delete ThisExpression(1179)", "Delete SimpleName: data(1180)", "Delete MethodInvocation(1181)", "Delete VariableDeclarationFragment(1182)", "Delete VariableDeclarationStatement(1183)", "Delete PrimitiveType: int(1184)", "Delete SimpleName: c(1185)", "Delete NumberLiteral: 2(1186)", "Delete VariableDeclarationFragment(1187)", "Delete SimpleName: size(1188)", "Delete SimpleName: node(1189)", "Delete SimpleName: jjtGetNumChildren(1190)", "Delete MethodInvocation(1191)", "Delete VariableDeclarationFragment(1192)", "Delete VariableDeclarationExpression(1193)", "Delete SimpleName: c(1194)", "Delete SimpleName: size(1195)", "Delete InfixExpression: <(1196)", "Delete SimpleName: c(1197)", "Delete NumberLiteral: 2(1198)", "Delete Assignment: +=(1199)", "Delete SimpleName: Object(1200)", "Delete SimpleType: Object(1201)", "Delete SimpleName: right(1202)", "Delete SimpleName: node(1203)", "Delete SimpleName: jjtGetChild(1204)", "Delete SimpleName: c(1205)", "Delete MethodInvocation(1206)", "Delete SimpleName: jjtAccept(1207)", "Delete ThisExpression(1208)", "Delete SimpleName: data(1209)", "Delete MethodInvocation(1210)", "Delete VariableDeclarationFragment(1211)", "Delete VariableDeclarationStatement(1212)", "Delete SimpleName: JexlNode(1213)", "Delete SimpleType: JexlNode(1214)", "Delete SimpleName: op(1215)", "Delete SimpleName: node(1216)", "Delete SimpleName: jjtGetChild(1217)", "Delete SimpleName: c(1218)", "Delete NumberLiteral: 1(1219)", "Delete InfixExpression: -(1220)", "Delete MethodInvocation(1221)", "Delete VariableDeclarationFragment(1222)", "Delete VariableDeclarationStatement(1223)", "Delete SimpleName: op(1224)", "Delete SimpleName: ASTAdditiveOperator(1225)", "Delete SimpleType: ASTAdditiveOperator(1226)", "Delete InstanceofExpression(1227)", "Delete SimpleName: String(1228)", "Delete SimpleType: String(1229)", "Delete SimpleName: which(1230)", "Delete QualifiedName: op.image(1231)", "Delete VariableDeclarationFragment(1232)", "Delete VariableDeclarationStatement(1233)", "Delete StringLiteral: \"+\"(1234)", "Delete SimpleName: equals(1235)", "Delete SimpleName: which(1236)", "Delete MethodInvocation(1237)", "Delete SimpleName: left(1238)", "Delete SimpleName: arithmetic(1239)", "Delete SimpleName: add(1240)", "Delete SimpleName: left(1241)", "Delete SimpleName: right(1242)", "Delete MethodInvocation(1243)", "Delete Assignment: =(1244)", "Delete ExpressionStatement(1245)", "Delete ContinueStatement(1246)", "Delete Block(1247)", "Delete IfStatement(1248)", "Delete StringLiteral: \"-\"(1249)", "Delete SimpleName: equals(1250)", "Delete SimpleName: which(1251)", "Delete MethodInvocation(1252)", "Delete SimpleName: left(1253)", "Delete SimpleName: arithmetic(1254)", "Delete SimpleName: subtract(1255)", "Delete SimpleName: left(1256)", "Delete SimpleName: right(1257)", "Delete MethodInvocation(1258)", "Delete Assignment: =(1259)", "Delete ExpressionStatement(1260)", "Delete ContinueStatement(1261)", "Delete Block(1262)", "Delete IfStatement(1263)", "Delete SimpleName: UnsupportedOperationException(1264)", "Delete SimpleType: UnsupportedOperationException(1265)", "Delete StringLiteral: \"unknown operator \"(1266)", "Delete SimpleName: which(1267)", "Delete InfixExpression: +(1268)", "Delete ClassInstanceCreation(1269)", "Delete ThrowStatement(1270)", "Delete Block(1271)", "Delete IfStatement(1272)", "Delete SimpleName: IllegalArgumentException(1273)", "Delete SimpleType: IllegalArgumentException(1274)", "Delete StringLiteral: \"unknown operator \"(1275)", "Delete SimpleName: op(1276)", "Delete InfixExpression: +(1277)", "Delete ClassInstanceCreation(1278)", "Delete ThrowStatement(1279)", "Delete Block(1280)", "Delete SimpleName: ArithmeticException(1281)", "Delete SimpleType: ArithmeticException(1282)", "Delete SimpleName: xrt(1283)", "Delete SingleVariableDeclaration(1284)", "Delete SimpleName: JexlNode(1285)", "Delete SimpleType: JexlNode(1286)", "Delete SimpleName: xnode(1287)", "Delete SimpleName: findNullOperand(1288)", "Delete SimpleName: xrt(1289)", "Delete SimpleName: node(1290)", "Delete SimpleName: left(1291)", "Delete SimpleName: right(1292)", "Delete MethodInvocation(1293)", "Delete VariableDeclarationFragment(1294)", "Delete VariableDeclarationStatement(1295)", "Delete SimpleName: JexlException(1296)", "Delete SimpleType: JexlException(1297)", "Delete SimpleName: xnode(1298)", "Delete StringLiteral: \"+/- error\"(1299)", "Delete SimpleName: xrt(1300)", "Delete ClassInstanceCreation(1301)", "Delete ThrowStatement(1302)", "Delete Block(1303)", "Delete CatchClause(1304)", "Delete TryStatement(1305)", "Delete Block(1306)", "Delete ForStatement(1307)", "Delete SimpleName: left(1308)", "Delete ReturnStatement(1309)", "Delete Block(1310)", "Delete MethodDeclaration(1311)", "Delete TagElement: @inheritDoc(1312)", "Delete TextElement:  (1313)", "Delete TagElement(1314)", "Delete Javadoc(1315)", "Delete Modifier: public(1316)", "Delete SimpleName: Object(1317)", "Delete SimpleType: Object(1318)", "Delete SimpleName: visit(1319)", "Delete SimpleName: ASTAdditiveOperator(1320)", "Delete SimpleType: ASTAdditiveOperator(1321)", "Delete SimpleName: node(1322)", "Delete SingleVariableDeclaration(1323)", "Delete SimpleName: Object(1324)", "Delete SimpleType: Object(1325)", "Delete SimpleName: data(1326)", "Delete SingleVariableDeclaration(1327)", "Delete SimpleName: UnsupportedOperationException(1328)", "Delete SimpleType: UnsupportedOperationException(1329)", "Delete StringLiteral: \"Shoud not be called.\"(1330)", "Delete ClassInstanceCreation(1331)", "Delete ThrowStatement(1332)", "Delete Block(1333)", "Delete MethodDeclaration(1334)", "Delete TagElement: @inheritDoc(1335)", "Delete TextElement:  (1336)", "Delete TagElement(1337)", "Delete Javadoc(1338)", "Delete Modifier: public(1339)", "Delete SimpleName: Object(1340)", "Delete SimpleType: Object(1341)", "Delete SimpleName: visit(1342)", "Delete SimpleName: ASTAndNode(1343)", "Delete SimpleType: ASTAndNode(1344)", "Delete SimpleName: node(1345)", "Delete SingleVariableDeclaration(1346)", "Delete SimpleName: Object(1347)", "Delete SimpleType: Object(1348)", "Delete SimpleName: data(1349)", "Delete SingleVariableDeclaration(1350)", "Delete SimpleName: Object(1351)", "Delete SimpleType: Object(1352)", "Delete SimpleName: left(1353)", "Delete SimpleName: node(1354)", "Delete SimpleName: jjtGetChild(1355)", "Delete NumberLiteral: 0(1356)", "Delete MethodInvocation(1357)", "Delete SimpleName: jjtAccept(1358)", "Delete ThisExpression(1359)", "Delete SimpleName: data(1360)", "Delete MethodInvocation(1361)", "Delete VariableDeclarationFragment(1362)", "Delete VariableDeclarationStatement(1363)", "Delete PrimitiveType: boolean(1364)", "Delete SimpleName: leftValue(1365)", "Delete SimpleName: arithmetic(1366)", "Delete SimpleName: toBoolean(1367)", "Delete SimpleName: left(1368)", "Delete MethodInvocation(1369)", "Delete VariableDeclarationFragment(1370)", "Delete VariableDeclarationStatement(1371)", "Delete SimpleName: leftValue(1372)", "Delete PrefixExpression: !(1373)", "Delete QualifiedName: Boolean.FALSE(1374)", "Delete ReturnStatement(1375)", "Delete Block(1376)", "Delete IfStatement(1377)", "Delete Block(1378)", "Delete SimpleName: RuntimeException(1379)", "Delete SimpleType: RuntimeException(1380)", "Delete SimpleName: xrt(1381)", "Delete SingleVariableDeclaration(1382)", "Delete SimpleName: JexlException(1383)", "Delete SimpleType: JexlException(1384)", "Delete SimpleName: node(1385)", "Delete SimpleName: jjtGetChild(1386)", "Delete NumberLiteral: 0(1387)", "Delete MethodInvocation(1388)", "Delete StringLiteral: \"boolean coercion error\"(1389)", "Delete SimpleName: xrt(1390)", "Delete ClassInstanceCreation(1391)", "Delete ThrowStatement(1392)", "Delete Block(1393)", "Delete CatchClause(1394)", "Delete TryStatement(1395)", "Delete SimpleName: Object(1396)", "Delete SimpleType: Object(1397)", "Delete SimpleName: right(1398)", "Delete SimpleName: node(1399)", "Delete SimpleName: jjtGetChild(1400)", "Delete NumberLiteral: 1(1401)", "Delete MethodInvocation(1402)", "Delete SimpleName: jjtAccept(1403)", "Delete ThisExpression(1404)", "Delete SimpleName: data(1405)", "Delete MethodInvocation(1406)", "Delete VariableDeclarationFragment(1407)", "Delete VariableDeclarationStatement(1408)", "Delete PrimitiveType: boolean(1409)", "Delete SimpleName: rightValue(1410)", "Delete SimpleName: arithmetic(1411)", "Delete SimpleName: toBoolean(1412)", "Delete SimpleName: right(1413)", "Delete MethodInvocation(1414)", "Delete VariableDeclarationFragment(1415)", "Delete VariableDeclarationStatement(1416)", "Delete SimpleName: rightValue(1417)", "Delete PrefixExpression: !(1418)", "Delete QualifiedName: Boolean.FALSE(1419)", "Delete ReturnStatement(1420)", "Delete Block(1421)", "Delete IfStatement(1422)", "Delete Block(1423)", "Delete SimpleName: ArithmeticException(1424)", "Delete SimpleType: ArithmeticException(1425)", "Delete SimpleName: xrt(1426)", "Delete SingleVariableDeclaration(1427)", "Delete SimpleName: JexlException(1428)", "Delete SimpleType: JexlException(1429)", "Delete SimpleName: node(1430)", "Delete SimpleName: jjtGetChild(1431)", "Delete NumberLiteral: 1(1432)", "Delete MethodInvocation(1433)", "Delete StringLiteral: \"boolean coercion error\"(1434)", "Delete SimpleName: xrt(1435)", "Delete ClassInstanceCreation(1436)", "Delete ThrowStatement(1437)", "Delete Block(1438)", "Delete CatchClause(1439)", "Delete TryStatement(1440)", "Delete QualifiedName: Boolean.TRUE(1441)", "Delete ReturnStatement(1442)", "Delete Block(1443)", "Delete MethodDeclaration(1444)", "Delete TagElement: @inheritDoc(1445)", "Delete TextElement:  (1446)", "Delete TagElement(1447)", "Delete Javadoc(1448)", "Delete Modifier: public(1449)", "Delete SimpleName: Object(1450)", "Delete SimpleType: Object(1451)", "Delete SimpleName: visit(1452)", "Delete SimpleName: ASTArrayAccess(1453)", "Delete SimpleType: ASTArrayAccess(1454)", "Delete SimpleName: node(1455)", "Delete SingleVariableDeclaration(1456)", "Delete SimpleName: Object(1457)", "Delete SimpleType: Object(1458)", "Delete SimpleName: data(1459)", "Delete SingleVariableDeclaration(1460)", "Delete SimpleName: Object(1461)", "Delete SimpleType: Object(1462)", "Delete SimpleName: object(1463)", "Delete SimpleName: node(1464)", "Delete SimpleName: jjtGetChild(1465)", "Delete NumberLiteral: 0(1466)", "Delete MethodInvocation(1467)", "Delete SimpleName: jjtAccept(1468)", "Delete ThisExpression(1469)", "Delete SimpleName: data(1470)", "Delete MethodInvocation(1471)", "Delete VariableDeclarationFragment(1472)", "Delete VariableDeclarationStatement(1473)", "Delete PrimitiveType: int(1474)", "Delete SimpleName: numChildren(1475)", "Delete SimpleName: node(1476)", "Delete SimpleName: jjtGetNumChildren(1477)", "Delete MethodInvocation(1478)", "Delete VariableDeclarationFragment(1479)", "Delete VariableDeclarationStatement(1480)", "Delete PrimitiveType: int(1481)", "Delete SimpleName: i(1482)", "Delete NumberLiteral: 1(1483)", "Delete VariableDeclarationFragment(1484)", "Delete VariableDeclarationExpression(1485)", "Delete SimpleName: i(1486)", "Delete SimpleName: numChildren(1487)", "Delete InfixExpression: <(1488)", "Delete SimpleName: i(1489)", "Delete PostfixExpression: ++(1490)", "Delete SimpleName: JexlNode(1491)", "Delete SimpleType: JexlNode(1492)", "Delete SimpleName: nindex(1493)", "Delete SimpleName: node(1494)", "Delete SimpleName: jjtGetChild(1495)", "Delete SimpleName: i(1496)", "Delete MethodInvocation(1497)", "Delete VariableDeclarationFragment(1498)", "Delete VariableDeclarationStatement(1499)", "Delete SimpleName: nindex(1500)", "Delete QualifiedName: JexlNode.Literal(1501)", "Delete SimpleType: JexlNode.Literal(1502)", "Delete WildcardType: ?(1503)", "Delete ParameterizedType: JexlNode.Literal<?>(1504)", "Delete InstanceofExpression(1505)", "Delete SimpleName: object(1506)", "Delete SimpleName: nindex(1507)", "Delete SimpleName: jjtAccept(1508)", "Delete ThisExpression(1509)", "Delete SimpleName: object(1510)", "Delete MethodInvocation(1511)", "Delete Assignment: =(1512)", "Delete ExpressionStatement(1513)", "Delete Block(1514)", "Delete SimpleName: Object(1515)", "Delete SimpleType: Object(1516)", "Delete SimpleName: index(1517)", "Delete SimpleName: nindex(1518)", "Delete SimpleName: jjtAccept(1519)", "Delete ThisExpression(1520)", "Delete NullLiteral(1521)", "Delete MethodInvocation(1522)", "Delete VariableDeclarationFragment(1523)", "Delete VariableDeclarationStatement(1524)", "Delete SimpleName: object(1525)", "Delete SimpleName: getAttribute(1526)", "Delete SimpleName: object(1527)", "Delete SimpleName: index(1528)", "Delete SimpleName: nindex(1529)", "Delete MethodInvocation(1530)", "Delete Assignment: =(1531)", "Delete ExpressionStatement(1532)", "Delete Block(1533)", "Delete IfStatement(1534)", "Delete Block(1535)", "Delete ForStatement(1536)", "Delete SimpleName: object(1537)", "Delete ReturnStatement(1538)", "Delete Block(1539)", "Delete MethodDeclaration(1540)", "Delete TagElement: @inheritDoc(1541)", "Delete TextElement:  (1542)", "Delete TagElement(1543)", "Delete Javadoc(1544)", "Delete Modifier: public(1545)", "Delete SimpleName: Object(1546)", "Delete SimpleType: Object(1547)", "Delete SimpleName: visit(1548)", "Delete SimpleName: ASTArrayLiteral(1549)", "Delete SimpleType: ASTArrayLiteral(1550)", "Delete SimpleName: node(1551)", "Delete SingleVariableDeclaration(1552)", "Delete SimpleName: Object(1553)", "Delete SimpleType: Object(1554)", "Delete SimpleName: data(1555)", "Delete SingleVariableDeclaration(1556)", "Delete SimpleName: Object(1557)", "Delete SimpleType: Object(1558)", "Delete SimpleName: literal(1559)", "Delete SimpleName: node(1560)", "Delete SimpleName: getLiteral(1561)", "Delete MethodInvocation(1562)", "Delete VariableDeclarationFragment(1563)", "Delete VariableDeclarationStatement(1564)", "Delete SimpleName: literal(1565)", "Delete NullLiteral(1566)", "Delete InfixExpression: ==(1567)", "Delete PrimitiveType: int(1568)", "Delete SimpleName: childCount(1569)", "Delete SimpleName: node(1570)", "Delete SimpleName: jjtGetNumChildren(1571)", "Delete MethodInvocation(1572)", "Delete VariableDeclarationFragment(1573)", "Delete VariableDeclarationStatement(1574)", "Delete SimpleName: Object(1575)", "Delete SimpleType: Object(1576)", "Delete Dimension(1577)", "Delete ArrayType: Object[](1578)", "Delete SimpleName: array(1579)", "Delete SimpleName: Object(1580)", "Delete SimpleType: Object(1581)", "Delete Dimension(1582)", "Delete ArrayType: Object[](1583)", "Delete SimpleName: childCount(1584)", "Delete ArrayCreation(1585)", "Delete VariableDeclarationFragment(1586)", "Delete VariableDeclarationStatement(1587)", "Delete PrimitiveType: int(1588)", "Delete SimpleName: i(1589)", "Delete NumberLiteral: 0(1590)", "Delete VariableDeclarationFragment(1591)", "Delete VariableDeclarationExpression(1592)", "Delete SimpleName: i(1593)", "Delete SimpleName: childCount(1594)", "Delete InfixExpression: <(1595)", "Delete SimpleName: i(1596)", "Delete PostfixExpression: ++(1597)", "Delete SimpleName: Object(1598)", "Delete SimpleType: Object(1599)", "Delete SimpleName: entry(1600)", "Delete SimpleName: node(1601)", "Delete SimpleName: jjtGetChild(1602)", "Delete SimpleName: i(1603)", "Delete MethodInvocation(1604)", "Delete SimpleName: jjtAccept(1605)", "Delete ThisExpression(1606)", "Delete SimpleName: data(1607)", "Delete MethodInvocation(1608)", "Delete VariableDeclarationFragment(1609)", "Delete VariableDeclarationStatement(1610)", "Delete SimpleName: array(1611)", "Delete SimpleName: i(1612)", "Delete ArrayAccess(1613)", "Delete SimpleName: entry(1614)", "Delete Assignment: =(1615)", "Delete ExpressionStatement(1616)", "Delete Block(1617)", "Delete ForStatement(1618)", "Delete SimpleName: literal(1619)", "Delete SimpleName: arithmetic(1620)", "Delete SimpleName: narrowArrayType(1621)", "Delete SimpleName: array(1622)", "Delete MethodInvocation(1623)", "Delete Assignment: =(1624)", "Delete ExpressionStatement(1625)", "Delete SimpleName: node(1626)", "Delete SimpleName: setLiteral(1627)", "Delete SimpleName: literal(1628)", "Delete MethodInvocation(1629)", "Delete ExpressionStatement(1630)", "Delete Block(1631)", "Delete IfStatement(1632)", "Delete SimpleName: literal(1633)", "Delete ReturnStatement(1634)", "Delete Block(1635)", "Delete MethodDeclaration(1636)", "Delete TagElement: @inheritDoc(1637)", "Delete TextElement:  (1638)", "Delete TagElement(1639)", "Delete Javadoc(1640)", "Delete Modifier: public(1641)", "Delete SimpleName: Object(1642)", "Delete SimpleType: Object(1643)", "Delete SimpleName: visit(1644)", "Delete SimpleName: ASTAssignment(1645)", "Delete SimpleType: ASTAssignment(1646)", "Delete SimpleName: node(1647)", "Delete SingleVariableDeclaration(1648)", "Delete SimpleName: Object(1649)", "Delete SimpleType: Object(1650)", "Delete SimpleName: data(1651)", "Delete SingleVariableDeclaration(1652)", "Delete PrimitiveType: int(1653)", "Delete SimpleName: register(1654)", "Delete NumberLiteral: 1(1655)", "Delete PrefixExpression: -(1656)", "Delete VariableDeclarationFragment(1657)", "Delete VariableDeclarationStatement(1658)", "Delete SimpleName: JexlNode(1659)", "Delete SimpleType: JexlNode(1660)", "Delete SimpleName: left(1661)", "Delete SimpleName: node(1662)", "Delete SimpleName: jjtGetChild(1663)", "Delete NumberLiteral: 0(1664)", "Delete MethodInvocation(1665)", "Delete VariableDeclarationFragment(1666)", "Delete VariableDeclarationStatement(1667)", "Delete SimpleName: left(1668)", "Delete SimpleName: ASTIdentifier(1669)", "Delete SimpleType: ASTIdentifier(1670)", "Delete InstanceofExpression(1671)", "Delete SimpleName: ASTIdentifier(1672)", "Delete SimpleType: ASTIdentifier(1673)", "Delete SimpleName: var(1674)", "Delete SimpleName: ASTIdentifier(1675)", "Delete SimpleType: ASTIdentifier(1676)", "Delete SimpleName: left(1677)", "Delete CastExpression(1678)", "Delete VariableDeclarationFragment(1679)", "Delete VariableDeclarationStatement(1680)", "Delete SimpleName: register(1681)", "Delete SimpleName: var(1682)", "Delete SimpleName: getRegister(1683)", "Delete MethodInvocation(1684)", "Delete Assignment: =(1685)", "Delete ExpressionStatement(1686)", "Delete SimpleName: register(1687)", "Delete NumberLiteral: 0(1688)", "Delete InfixExpression: <(1689)", "Delete SimpleName: JexlException(1690)", "Delete SimpleType: JexlException(1691)", "Delete SimpleName: left(1692)", "Delete StringLiteral: \"unknown variable \"(1693)", "Delete QualifiedName: left.image(1694)", "Delete InfixExpression: +(1695)", "Delete ClassInstanceCreation(1696)", "Delete ThrowStatement(1697)", "Delete Block(1698)", "Delete IfStatement(1699)", "Delete Block(1700)", "Delete SimpleName: left(1701)", "Delete SimpleName: ASTReference(1702)", "Delete SimpleType: ASTReference(1703)", "Delete InstanceofExpression(1704)", "Delete ParenthesizedExpression(1705)", "Delete PrefixExpression: !(1706)", "Delete SimpleName: JexlException(1707)", "Delete SimpleType: JexlException(1708)", "Delete SimpleName: left(1709)", "Delete StringLiteral: \"illegal assignment form 0\"(1710)", "Delete ClassInstanceCreation(1711)", "Delete ThrowStatement(1712)", "Delete Block(1713)", "Delete IfStatement(1714)", "Delete IfStatement(1715)", "Delete SimpleName: Object(1716)", "Delete SimpleType: Object(1717)", "Delete SimpleName: right(1718)", "Delete SimpleName: node(1719)", "Delete SimpleName: jjtGetChild(1720)", "Delete NumberLiteral: 1(1721)", "Delete MethodInvocation(1722)", "Delete SimpleName: jjtAccept(1723)", "Delete ThisExpression(1724)", "Delete SimpleName: data(1725)", "Delete MethodInvocation(1726)", "Delete VariableDeclarationFragment(1727)", "Delete VariableDeclarationStatement(1728)", "Delete SimpleName: JexlNode(1729)", "Delete SimpleType: JexlNode(1730)", "Delete SimpleName: objectNode(1731)", "Delete NullLiteral(1732)", "Delete VariableDeclarationFragment(1733)", "Delete VariableDeclarationStatement(1734)", "Delete SimpleName: Object(1735)", "Delete SimpleType: Object(1736)", "Delete SimpleName: object(1737)", "Delete SimpleName: register(1738)", "Delete NumberLiteral: 0(1739)", "Delete InfixExpression: >=(1740)", "Delete SimpleName: registers(1741)", "Delete SimpleName: register(1742)", "Delete ArrayAccess(1743)", "Delete NullLiteral(1744)", "Delete ConditionalExpression(1745)", "Delete VariableDeclarationFragment(1746)", "Delete VariableDeclarationStatement(1747)", "Delete SimpleName: JexlNode(1748)", "Delete SimpleType: JexlNode(1749)", "Delete SimpleName: propertyNode(1750)", "Delete NullLiteral(1751)", "Delete VariableDeclarationFragment(1752)", "Delete VariableDeclarationStatement(1753)", "Delete SimpleName: Object(1754)", "Delete SimpleType: Object(1755)", "Delete SimpleName: property(1756)", "Delete NullLiteral(1757)", "Delete VariableDeclarationFragment(1758)", "Delete VariableDeclarationStatement(1759)", "Delete PrimitiveType: boolean(1760)", "Delete SimpleName: isVariable(1761)", "Delete BooleanLiteral: true(1762)", "Delete VariableDeclarationFragment(1763)", "Delete VariableDeclarationStatement(1764)", "Delete PrimitiveType: int(1765)", "Delete SimpleName: v(1766)", "Delete NumberLiteral: 0(1767)", "Delete VariableDeclarationFragment(1768)", "Delete VariableDeclarationStatement(1769)", "Delete SimpleName: StringBuilder(1770)", "Delete SimpleType: StringBuilder(1771)", "Delete SimpleName: variableName(1772)", "Delete NullLiteral(1773)", "Delete VariableDeclarationFragment(1774)", "Delete VariableDeclarationStatement(1775)", "Delete PrimitiveType: int(1776)", "Delete SimpleName: last(1777)", "Delete SimpleName: left(1778)", "Delete SimpleName: jjtGetNumChildren(1779)", "Delete MethodInvocation(1780)", "Delete NumberLiteral: 1(1781)", "Delete InfixExpression: -(1782)", "Delete VariableDeclarationFragment(1783)", "Delete VariableDeclarationStatement(1784)", "Delete PrimitiveType: boolean(1785)", "Delete SimpleName: isRegister(1786)", "Delete SimpleName: last(1787)", "Delete NumberLiteral: 0(1788)", "Delete InfixExpression: <(1789)", "Delete SimpleName: register(1790)", "Delete NumberLiteral: 0(1791)", "Delete InfixExpression: >=(1792)", "Delete InfixExpression: &&(1793)", "Delete VariableDeclarationFragment(1794)", "Delete VariableDeclarationStatement(1795)", "Delete PrimitiveType: int(1796)", "Delete SimpleName: c(1797)", "Delete SimpleName: register(1798)", "Delete NumberLiteral: 0(1799)", "Delete InfixExpression: >=(1800)", "Delete NumberLiteral: 1(1801)", "Delete NumberLiteral: 0(1802)", "Delete ConditionalExpression(1803)", "Delete VariableDeclarationFragment(1804)", "Delete VariableDeclarationExpression(1805)", "Delete SimpleName: c(1806)", "Delete SimpleName: last(1807)", "Delete InfixExpression: <(1808)", "Delete SimpleName: c(1809)", "Delete PrefixExpression: ++(1810)", "Delete SimpleName: objectNode(1811)", "Delete SimpleName: left(1812)", "Delete SimpleName: jjtGetChild(1813)", "Delete SimpleName: c(1814)", "Delete MethodInvocation(1815)", "Delete Assignment: =(1816)", "Delete ExpressionStatement(1817)", "Delete SimpleName: object(1818)", "Delete SimpleName: objectNode(1819)", "Delete SimpleName: jjtAccept(1820)", "Delete ThisExpression(1821)", "Delete SimpleName: object(1822)", "Delete MethodInvocation(1823)", "Delete Assignment: =(1824)", "Delete ExpressionStatement(1825)", "Delete SimpleName: object(1826)", "Delete NullLiteral(1827)", "Delete InfixExpression: !=(1828)", "Delete ContinueStatement(1829)", "Delete Block(1830)", "Delete IfStatement(1831)", "Delete SimpleName: isVariable(1832)", "Delete SimpleName: objectNode(1833)", "Delete SimpleName: ASTIdentifier(1834)", "Delete SimpleType: ASTIdentifier(1835)", "Delete InstanceofExpression(1836)", "Delete SimpleName: objectNode(1837)", "Delete SimpleName: ASTNumberLiteral(1838)", "Delete SimpleType: ASTNumberLiteral(1839)", "Delete InstanceofExpression(1840)", "Delete SimpleName: ASTNumberLiteral(1841)", "Delete SimpleType: ASTNumberLiteral(1842)", "Delete SimpleName: objectNode(1843)", "Delete CastExpression(1844)", "Delete ParenthesizedExpression(1845)", "Delete SimpleName: isInteger(1846)", "Delete MethodInvocation(1847)", "Delete InfixExpression: &&(1848)", "Delete ParenthesizedExpression(1849)", "Delete InfixExpression: ||(1850)", "Delete Assignment: &=(1851)", "Delete ExpressionStatement(1852)", "Delete SimpleName: isVariable(1853)", "Delete SimpleName: v(1854)", "Delete NumberLiteral: 0(1855)", "Delete InfixExpression: ==(1856)", "Delete SimpleName: variableName(1857)", "Delete SimpleName: StringBuilder(1858)", "Delete SimpleType: StringBuilder(1859)", "Delete SimpleName: left(1860)", "Delete SimpleName: jjtGetChild(1861)", "Delete NumberLiteral: 0(1862)", "Delete MethodInvocation(1863)", "Delete SimpleName: image(1864)", "Delete FieldAccess(1865)", "Delete ClassInstanceCreation(1866)", "Delete Assignment: =(1867)", "Delete ExpressionStatement(1868)", "Delete SimpleName: v(1869)", "Delete NumberLiteral: 1(1870)", "Delete Assignment: =(1871)", "Delete ExpressionStatement(1872)", "Delete Block(1873)", "Delete IfStatement(1874)", "Delete SimpleName: v(1875)", "Delete SimpleName: c(1876)", "Delete InfixExpression: <=(1877)", "Delete SimpleName: v(1878)", "Delete PrefixExpression: ++(1879)", "Delete SimpleName: variableName(1880)", "Delete SimpleName: append(1881)", "Delete CharacterLiteral: '.'(1882)", "Delete MethodInvocation(1883)", "Delete ExpressionStatement(1884)", "Delete SimpleName: variableName(1885)", "Delete SimpleName: append(1886)", "Delete SimpleName: left(1887)", "Delete SimpleName: jjtGetChild(1888)", "Delete SimpleName: v(1889)", "Delete MethodInvocation(1890)", "Delete SimpleName: image(1891)", "Delete FieldAccess(1892)", "Delete MethodInvocation(1893)", "Delete ExpressionStatement(1894)", "Delete Block(1895)", "Delete ForStatement(1896)", "Delete SimpleName: object(1897)", "Delete SimpleName: context(1898)", "Delete SimpleName: get(1899)", "Delete SimpleName: variableName(1900)", "Delete SimpleName: toString(1901)", "Delete MethodInvocation(1902)", "Delete MethodInvocation(1903)", "Delete Assignment: =(1904)", "Delete ExpressionStatement(1905)", "Delete SimpleName: object(1906)", "Delete NullLiteral(1907)", "Delete InfixExpression: !=(1908)", "Delete SimpleName: isVariable(1909)", "Delete BooleanLiteral: false(1910)", "Delete Assignment: =(1911)", "Delete ExpressionStatement(1912)", "Delete Block(1913)", "Delete IfStatement(1914)", "Delete Block(1915)", "Delete SimpleName: JexlException(1916)", "Delete SimpleType: JexlException(1917)", "Delete SimpleName: objectNode(1918)", "Delete StringLiteral: \"illegal assignment form\"(1919)", "Delete ClassInstanceCreation(1920)", "Delete ThrowStatement(1921)", "Delete Block(1922)", "Delete IfStatement(1923)", "Delete Block(1924)", "Delete ForStatement(1925)", "Delete SimpleName: propertyNode(1926)", "Delete SimpleName: isRegister(1927)", "Delete NullLiteral(1928)", "Delete SimpleName: left(1929)", "Delete SimpleName: jjtGetChild(1930)", "Delete SimpleName: last(1931)", "Delete MethodInvocation(1932)", "Delete ConditionalExpression(1933)", "Delete Assignment: =(1934)", "Delete ExpressionStatement(1935)", "Delete PrimitiveType: boolean(1936)", "Delete SimpleName: antVar(1937)", "Delete BooleanLiteral: false(1938)", "Delete VariableDeclarationFragment(1939)", "Delete VariableDeclarationStatement(1940)", "Delete SimpleName: propertyNode(1941)", "Delete SimpleName: ASTIdentifier(1942)", "Delete SimpleType: ASTIdentifier(1943)", "Delete InstanceofExpression(1944)", "Delete SimpleName: ASTIdentifier(1945)", "Delete SimpleType: ASTIdentifier(1946)", "Delete SimpleName: identifier(1947)", "Delete SimpleName: ASTIdentifier(1948)", "Delete SimpleType: ASTIdentifier(1949)", "Delete SimpleName: propertyNode(1950)", "Delete CastExpression(1951)", "Delete VariableDeclarationFragment(1952)", "Delete VariableDeclarationStatement(1953)", "Delete SimpleName: register(1954)", "Delete SimpleName: identifier(1955)", "Delete SimpleName: getRegister(1956)", "Delete MethodInvocation(1957)", "Delete Assignment: =(1958)", "Delete ExpressionStatement(1959)", "Delete SimpleName: register(1960)", "Delete NumberLiteral: 0(1961)", "Delete InfixExpression: >=(1962)", "Delete SimpleName: isRegister(1963)", "Delete BooleanLiteral: true(1964)", "Delete Assignment: =(1965)", "Delete ExpressionStatement(1966)", "Delete Block(1967)", "Delete SimpleName: property(1968)", "Delete QualifiedName: identifier.image(1969)", "Delete Assignment: =(1970)", "Delete ExpressionStatement(1971)", "Delete SimpleName: antVar(1972)", "Delete BooleanLiteral: true(1973)", "Delete Assignment: =(1974)", "Delete ExpressionStatement(1975)", "Delete Block(1976)", "Delete IfStatement(1977)", "Delete Block(1978)", "Delete SimpleName: propertyNode(1979)", "Delete SimpleName: ASTNumberLiteral(1980)", "Delete SimpleType: ASTNumberLiteral(1981)", "Delete InstanceofExpression(1982)", "Delete SimpleName: ASTNumberLiteral(1983)", "Delete SimpleType: ASTNumberLiteral(1984)", "Delete SimpleName: propertyNode(1985)", "Delete CastExpression(1986)", "Delete ParenthesizedExpression(1987)", "Delete SimpleName: isInteger(1988)", "Delete MethodInvocation(1989)", "Delete InfixExpression: &&(1990)", "Delete SimpleName: property(1991)", "Delete SimpleName: ASTNumberLiteral(1992)", "Delete SimpleType: ASTNumberLiteral(1993)", "Delete SimpleName: propertyNode(1994)", "Delete CastExpression(1995)", "Delete ParenthesizedExpression(1996)", "Delete SimpleName: getLiteral(1997)", "Delete MethodInvocation(1998)", "Delete Assignment: =(1999)", "Delete ExpressionStatement(2000)", "Delete SimpleName: antVar(2001)", "Delete BooleanLiteral: true(2002)", "Delete Assignment: =(2003)", "Delete ExpressionStatement(2004)", "Delete Block(2005)", "Delete SimpleName: propertyNode(2006)", "Delete SimpleName: ASTArrayAccess(2007)", "Delete SimpleType: ASTArrayAccess(2008)", "Delete InstanceofExpression(2009)", "Delete SimpleName: objectNode(2010)", "Delete SimpleName: propertyNode(2011)", "Delete Assignment: =(2012)", "Delete ExpressionStatement(2013)", "Delete SimpleName: ASTArrayAccess(2014)", "Delete SimpleType: ASTArrayAccess(2015)", "Delete SimpleName: narray(2016)", "Delete SimpleName: ASTArrayAccess(2017)", "Delete SimpleType: ASTArrayAccess(2018)", "Delete SimpleName: objectNode(2019)", "Delete CastExpression(2020)", "Delete VariableDeclarationFragment(2021)", "Delete VariableDeclarationStatement(2022)", "Delete SimpleName: Object(2023)", "Delete SimpleType: Object(2024)", "Delete SimpleName: nobject(2025)", "Delete SimpleName: narray(2026)", "Delete SimpleName: jjtGetChild(2027)", "Delete NumberLiteral: 0(2028)", "Delete MethodInvocation(2029)", "Delete SimpleName: jjtAccept(2030)", "Delete ThisExpression(2031)", "Delete SimpleName: object(2032)", "Delete MethodInvocation(2033)", "Delete VariableDeclarationFragment(2034)", "Delete VariableDeclarationStatement(2035)", "Delete SimpleName: nobject(2036)", "Delete NullLiteral(2037)", "Delete InfixExpression: ==(2038)", "Delete SimpleName: JexlException(2039)", "Delete SimpleType: JexlException(2040)", "Delete SimpleName: objectNode(2041)", "Delete StringLiteral: \"array element is null\"(2042)", "Delete ClassInstanceCreation(2043)", "Delete ThrowStatement(2044)", "Delete Block(2045)", "Delete SimpleName: object(2046)", "Delete SimpleName: nobject(2047)", "Delete Assignment: =(2048)", "Delete ExpressionStatement(2049)", "Delete Block(2050)", "Delete IfStatement(2051)", "Delete SimpleName: last(2052)", "Delete SimpleName: narray(2053)", "Delete SimpleName: jjtGetNumChildren(2054)", "Delete MethodInvocation(2055)", "Delete NumberLiteral: 1(2056)", "Delete InfixExpression: -(2057)", "Delete Assignment: =(2058)", "Delete ExpressionStatement(2059)", "Delete PrimitiveType: int(2060)", "Delete SimpleName: i(2061)", "Delete NumberLiteral: 1(2062)", "Delete VariableDeclarationFragment(2063)", "Delete VariableDeclarationExpression(2064)", "Delete SimpleName: i(2065)", "Delete SimpleName: last(2066)", "Delete InfixExpression: <(2067)", "Delete SimpleName: i(2068)", "Delete PostfixExpression: ++(2069)", "Delete SimpleName: objectNode(2070)", "Delete SimpleName: narray(2071)", "Delete SimpleName: jjtGetChild(2072)", "Delete SimpleName: i(2073)", "Delete MethodInvocation(2074)", "Delete Assignment: =(2075)", "Delete ExpressionStatement(2076)", "Delete SimpleName: objectNode(2077)", "Delete QualifiedName: JexlNode.Literal(2078)", "Delete SimpleType: JexlNode.Literal(2079)", "Delete WildcardType: ?(2080)", "Delete ParameterizedType: JexlNode.Literal<?>(2081)", "Delete InstanceofExpression(2082)", "Delete SimpleName: object(2083)", "Delete SimpleName: objectNode(2084)", "Delete SimpleName: jjtAccept(2085)", "Delete ThisExpression(2086)", "Delete SimpleName: object(2087)", "Delete MethodInvocation(2088)", "Delete Assignment: =(2089)", "Delete ExpressionStatement(2090)", "Delete Block(2091)", "Delete SimpleName: Object(2092)", "Delete SimpleType: Object(2093)", "Delete SimpleName: index(2094)", "Delete SimpleName: objectNode(2095)", "Delete SimpleName: jjtAccept(2096)", "Delete ThisExpression(2097)", "Delete NullLiteral(2098)", "Delete MethodInvocation(2099)", "Delete VariableDeclarationFragment(2100)", "Delete VariableDeclarationStatement(2101)", "Delete SimpleName: object(2102)", "Delete SimpleName: getAttribute(2103)", "Delete SimpleName: object(2104)", "Delete SimpleName: index(2105)", "Delete SimpleName: objectNode(2106)", "Delete MethodInvocation(2107)", "Delete Assignment: =(2108)", "Delete ExpressionStatement(2109)", "Delete Block(2110)", "Delete IfStatement(2111)", "Delete Block(2112)", "Delete ForStatement(2113)", "Delete SimpleName: property(2114)", "Delete SimpleName: narray(2115)", "Delete SimpleName: jjtGetChild(2116)", "Delete SimpleName: last(2117)", "Delete MethodInvocation(2118)", "Delete SimpleName: jjtAccept(2119)", "Delete ThisExpression(2120)", "Delete NullLiteral(2121)", "Delete MethodInvocation(2122)", "Delete Assignment: =(2123)", "Delete ExpressionStatement(2124)", "Delete Block(2125)", "Delete SimpleName: isRegister(2126)", "Delete PrefixExpression: !(2127)", "Delete SimpleName: JexlException(2128)", "Delete SimpleType: JexlException(2129)", "Delete SimpleName: objectNode(2130)", "Delete StringLiteral: \"illegal assignment form\"(2131)", "Delete ClassInstanceCreation(2132)", "Delete ThrowStatement(2133)", "Delete Block(2134)", "Delete IfStatement(2135)", "Delete IfStatement(2136)", "Delete IfStatement(2137)", "Delete IfStatement(2138)", "Delete SimpleName: isRegister(2139)", "Delete SimpleName: registers(2140)", "Delete SimpleName: register(2141)", "Delete ArrayAccess(2142)", "Delete SimpleName: right(2143)", "Delete Assignment: =(2144)", "Delete ExpressionStatement(2145)", "Delete SimpleName: right(2146)", "Delete ReturnStatement(2147)", "Delete Block(2148)", "Delete SimpleName: antVar(2149)", "Delete SimpleName: isVariable(2150)", "Delete SimpleName: object(2151)", "Delete NullLiteral(2152)", "Delete InfixExpression: ==(2153)", "Delete InfixExpression: &&(2154)", "Delete SimpleName: variableName(2155)", "Delete NullLiteral(2156)", "Delete InfixExpression: !=(2157)", "Delete SimpleName: last(2158)", "Delete NumberLiteral: 0(2159)", "Delete InfixExpression: >(2160)", "Delete SimpleName: variableName(2161)", "Delete SimpleName: append(2162)", "Delete CharacterLiteral: '.'(2163)", "Delete MethodInvocation(2164)", "Delete ExpressionStatement(2165)", "Delete Block(2166)", "Delete IfStatement(2167)", "Delete SimpleName: variableName(2168)", "Delete SimpleName: append(2169)", "Delete SimpleName: property(2170)", "Delete MethodInvocation(2171)", "Delete ExpressionStatement(2172)", "Delete SimpleName: property(2173)", "Delete SimpleName: variableName(2174)", "Delete SimpleName: toString(2175)", "Delete MethodInvocation(2176)", "Delete Assignment: =(2177)", "Delete ExpressionStatement(2178)", "Delete Block(2179)", "Delete IfStatement(2180)", "Delete SimpleName: context(2181)", "Delete SimpleName: set(2182)", "Delete SimpleName: String(2183)", "Delete SimpleName: valueOf(2184)", "Delete SimpleName: property(2185)", "Delete MethodInvocation(2186)", "Delete SimpleName: right(2187)", "Delete MethodInvocation(2188)", "Delete ExpressionStatement(2189)", "Delete Block(2190)", "Delete SimpleName: UnsupportedOperationException(2191)", "Delete SimpleType: UnsupportedOperationException(2192)", "Delete SimpleName: xsupport(2193)", "Delete SingleVariableDeclaration(2194)", "Delete SimpleName: JexlException(2195)", "Delete SimpleType: JexlException(2196)", "Delete SimpleName: node(2197)", "Delete StringLiteral: \"context is readonly\"(2198)", "Delete SimpleName: xsupport(2199)", "Delete ClassInstanceCreation(2200)", "Delete ThrowStatement(2201)", "Delete Block(2202)", "Delete CatchClause(2203)", "Delete TryStatement(2204)", "Delete SimpleName: right(2205)", "Delete ReturnStatement(2206)", "Delete Block(2207)", "Delete IfStatement(2208)", "Delete Block(2209)", "Delete IfStatement(2210)", "Delete IfStatement(2211)", "Delete SimpleName: property(2212)", "Delete NullLiteral(2213)", "Delete InfixExpression: ==(2214)", "Delete SimpleName: JexlException(2215)", "Delete SimpleType: JexlException(2216)", "Delete SimpleName: propertyNode(2217)", "Delete StringLiteral: \"property is null\"(2218)", "Delete ClassInstanceCreation(2219)", "Delete ThrowStatement(2220)", "Delete Block(2221)", "Delete IfStatement(2222)", "Delete SimpleName: object(2223)", "Delete NullLiteral(2224)", "Delete InfixExpression: ==(2225)", "Delete SimpleName: JexlException(2226)", "Delete SimpleType: JexlException(2227)", "Delete SimpleName: objectNode(2228)", "Delete StringLiteral: \"bean is null\"(2229)", "Delete ClassInstanceCreation(2230)", "Delete ThrowStatement(2231)", "Delete Block(2232)", "Delete IfStatement(2233)", "Delete SimpleName: setAttribute(2234)", "Delete SimpleName: object(2235)", "Delete SimpleName: property(2236)", "Delete SimpleName: right(2237)", "Delete SimpleName: propertyNode(2238)", "Delete MethodInvocation(2239)", "Delete ExpressionStatement(2240)", "Delete SimpleName: right(2241)", "Delete ReturnStatement(2242)", "Delete Block(2243)", "Delete MethodDeclaration(2244)", "Delete TagElement: @inheritDoc(2245)", "Delete TextElement:  (2246)", "Delete TagElement(2247)", "Delete Javadoc(2248)", "Delete Modifier: public(2249)", "Delete SimpleName: Object(2250)", "Delete SimpleType: Object(2251)", "Delete SimpleName: visit(2252)", "Delete SimpleName: ASTBitwiseAndNode(2253)", "Delete SimpleType: ASTBitwiseAndNode(2254)", "Delete SimpleName: node(2255)", "Delete SingleVariableDeclaration(2256)", "Delete SimpleName: Object(2257)", "Delete SimpleType: Object(2258)", "Delete SimpleName: data(2259)", "Delete SingleVariableDeclaration(2260)", "Delete SimpleName: Object(2261)", "Delete SimpleType: Object(2262)", "Delete SimpleName: left(2263)", "Delete SimpleName: node(2264)", "Delete SimpleName: jjtGetChild(2265)", "Delete NumberLiteral: 0(2266)", "Delete MethodInvocation(2267)", "Delete SimpleName: jjtAccept(2268)", "Delete ThisExpression(2269)", "Delete SimpleName: data(2270)", "Delete MethodInvocation(2271)", "Delete VariableDeclarationFragment(2272)", "Delete VariableDeclarationStatement(2273)", "Delete SimpleName: Object(2274)", "Delete SimpleType: Object(2275)", "Delete SimpleName: right(2276)", "Delete SimpleName: node(2277)", "Delete SimpleName: jjtGetChild(2278)", "Delete NumberLiteral: 1(2279)", "Delete MethodInvocation(2280)", "Delete SimpleName: jjtAccept(2281)", "Delete ThisExpression(2282)", "Delete SimpleName: data(2283)", "Delete MethodInvocation(2284)", "Delete VariableDeclarationFragment(2285)", "Delete VariableDeclarationStatement(2286)", "Delete SimpleName: arithmetic(2287)", "Delete SimpleName: bitwiseAnd(2288)", "Delete SimpleName: left(2289)", "Delete SimpleName: right(2290)", "Delete MethodInvocation(2291)", "Delete ReturnStatement(2292)", "Delete Block(2293)", "Delete SimpleName: ArithmeticException(2294)", "Delete SimpleType: ArithmeticException(2295)", "Delete SimpleName: xrt(2296)", "Delete SingleVariableDeclaration(2297)", "Delete SimpleName: JexlException(2298)", "Delete SimpleType: JexlException(2299)", "Delete SimpleName: node(2300)", "Delete StringLiteral: \"& error\"(2301)", "Delete SimpleName: xrt(2302)", "Delete ClassInstanceCreation(2303)", "Delete ThrowStatement(2304)", "Delete Block(2305)", "Delete CatchClause(2306)", "Delete TryStatement(2307)", "Delete Block(2308)", "Delete MethodDeclaration(2309)", "Delete TagElement: @inheritDoc(2310)", "Delete TextElement:  (2311)", "Delete TagElement(2312)", "Delete Javadoc(2313)", "Delete Modifier: public(2314)", "Delete SimpleName: Object(2315)", "Delete SimpleType: Object(2316)", "Delete SimpleName: visit(2317)", "Delete SimpleName: ASTBitwiseComplNode(2318)", "Delete SimpleType: ASTBitwiseComplNode(2319)", "Delete SimpleName: node(2320)", "Delete SingleVariableDeclaration(2321)", "Delete SimpleName: Object(2322)", "Delete SimpleType: Object(2323)", "Delete SimpleName: data(2324)", "Delete SingleVariableDeclaration(2325)", "Delete SimpleName: Object(2326)", "Delete SimpleType: Object(2327)", "Delete SimpleName: left(2328)", "Delete SimpleName: node(2329)", "Delete SimpleName: jjtGetChild(2330)", "Delete NumberLiteral: 0(2331)", "Delete MethodInvocation(2332)", "Delete SimpleName: jjtAccept(2333)", "Delete ThisExpression(2334)", "Delete SimpleName: data(2335)", "Delete MethodInvocation(2336)", "Delete VariableDeclarationFragment(2337)", "Delete VariableDeclarationStatement(2338)", "Delete SimpleName: arithmetic(2339)", "Delete SimpleName: bitwiseComplement(2340)", "Delete SimpleName: left(2341)", "Delete MethodInvocation(2342)", "Delete ReturnStatement(2343)", "Delete Block(2344)", "Delete SimpleName: ArithmeticException(2345)", "Delete SimpleType: ArithmeticException(2346)", "Delete SimpleName: xrt(2347)", "Delete SingleVariableDeclaration(2348)", "Delete SimpleName: JexlException(2349)", "Delete SimpleType: JexlException(2350)", "Delete SimpleName: node(2351)", "Delete StringLiteral: \"~ error\"(2352)", "Delete SimpleName: xrt(2353)", "Delete ClassInstanceCreation(2354)", "Delete ThrowStatement(2355)", "Delete Block(2356)", "Delete CatchClause(2357)", "Delete TryStatement(2358)", "Delete Block(2359)", "Delete MethodDeclaration(2360)", "Delete TagElement: @inheritDoc(2361)", "Delete TextElement:  (2362)", "Delete TagElement(2363)", "Delete Javadoc(2364)", "Delete Modifier: public(2365)", "Delete SimpleName: Object(2366)", "Delete SimpleType: Object(2367)", "Delete SimpleName: visit(2368)", "Delete SimpleName: ASTBitwiseOrNode(2369)", "Delete SimpleType: ASTBitwiseOrNode(2370)", "Delete SimpleName: node(2371)", "Delete SingleVariableDeclaration(2372)", "Delete SimpleName: Object(2373)", "Delete SimpleType: Object(2374)", "Delete SimpleName: data(2375)", "Delete SingleVariableDeclaration(2376)", "Delete SimpleName: Object(2377)", "Delete SimpleType: Object(2378)", "Delete SimpleName: left(2379)", "Delete SimpleName: node(2380)", "Delete SimpleName: jjtGetChild(2381)", "Delete NumberLiteral: 0(2382)", "Delete MethodInvocation(2383)", "Delete SimpleName: jjtAccept(2384)", "Delete ThisExpression(2385)", "Delete SimpleName: data(2386)", "Delete MethodInvocation(2387)", "Delete VariableDeclarationFragment(2388)", "Delete VariableDeclarationStatement(2389)", "Delete SimpleName: Object(2390)", "Delete SimpleType: Object(2391)", "Delete SimpleName: right(2392)", "Delete SimpleName: node(2393)", "Delete SimpleName: jjtGetChild(2394)", "Delete NumberLiteral: 1(2395)", "Delete MethodInvocation(2396)", "Delete SimpleName: jjtAccept(2397)", "Delete ThisExpression(2398)", "Delete SimpleName: data(2399)", "Delete MethodInvocation(2400)", "Delete VariableDeclarationFragment(2401)", "Delete VariableDeclarationStatement(2402)", "Delete SimpleName: arithmetic(2403)", "Delete SimpleName: bitwiseOr(2404)", "Delete SimpleName: left(2405)", "Delete SimpleName: right(2406)", "Delete MethodInvocation(2407)", "Delete ReturnStatement(2408)", "Delete Block(2409)", "Delete SimpleName: ArithmeticException(2410)", "Delete SimpleType: ArithmeticException(2411)", "Delete SimpleName: xrt(2412)", "Delete SingleVariableDeclaration(2413)", "Delete SimpleName: JexlException(2414)", "Delete SimpleType: JexlException(2415)", "Delete SimpleName: node(2416)", "Delete StringLiteral: \"| error\"(2417)", "Delete SimpleName: xrt(2418)", "Delete ClassInstanceCreation(2419)", "Delete ThrowStatement(2420)", "Delete Block(2421)", "Delete CatchClause(2422)", "Delete TryStatement(2423)", "Delete Block(2424)", "Delete MethodDeclaration(2425)", "Delete TagElement: @inheritDoc(2426)", "Delete TextElement:  (2427)", "Delete TagElement(2428)", "Delete Javadoc(2429)", "Delete Modifier: public(2430)", "Delete SimpleName: Object(2431)", "Delete SimpleType: Object(2432)", "Delete SimpleName: visit(2433)", "Delete SimpleName: ASTBitwiseXorNode(2434)", "Delete SimpleType: ASTBitwiseXorNode(2435)", "Delete SimpleName: node(2436)", "Delete SingleVariableDeclaration(2437)", "Delete SimpleName: Object(2438)", "Delete SimpleType: Object(2439)", "Delete SimpleName: data(2440)", "Delete SingleVariableDeclaration(2441)", "Delete SimpleName: Object(2442)", "Delete SimpleType: Object(2443)", "Delete SimpleName: left(2444)", "Delete SimpleName: node(2445)", "Delete SimpleName: jjtGetChild(2446)", "Delete NumberLiteral: 0(2447)", "Delete MethodInvocation(2448)", "Delete SimpleName: jjtAccept(2449)", "Delete ThisExpression(2450)", "Delete SimpleName: data(2451)", "Delete MethodInvocation(2452)", "Delete VariableDeclarationFragment(2453)", "Delete VariableDeclarationStatement(2454)", "Delete SimpleName: Object(2455)", "Delete SimpleType: Object(2456)", "Delete SimpleName: right(2457)", "Delete SimpleName: node(2458)", "Delete SimpleName: jjtGetChild(2459)", "Delete NumberLiteral: 1(2460)", "Delete MethodInvocation(2461)", "Delete SimpleName: jjtAccept(2462)", "Delete ThisExpression(2463)", "Delete SimpleName: data(2464)", "Delete MethodInvocation(2465)", "Delete VariableDeclarationFragment(2466)", "Delete VariableDeclarationStatement(2467)", "Delete SimpleName: arithmetic(2468)", "Delete SimpleName: bitwiseXor(2469)", "Delete SimpleName: left(2470)", "Delete SimpleName: right(2471)", "Delete MethodInvocation(2472)", "Delete ReturnStatement(2473)", "Delete Block(2474)", "Delete SimpleName: ArithmeticException(2475)", "Delete SimpleType: ArithmeticException(2476)", "Delete SimpleName: xrt(2477)", "Delete SingleVariableDeclaration(2478)", "Delete SimpleName: JexlException(2479)", "Delete SimpleType: JexlException(2480)", "Delete SimpleName: node(2481)", "Delete StringLiteral: \"^ error\"(2482)", "Delete SimpleName: xrt(2483)", "Delete ClassInstanceCreation(2484)", "Delete ThrowStatement(2485)", "Delete Block(2486)", "Delete CatchClause(2487)", "Delete TryStatement(2488)", "Delete Block(2489)", "Delete MethodDeclaration(2490)", "Delete TagElement: @inheritDoc(2491)", "Delete TextElement:  (2492)", "Delete TagElement(2493)", "Delete Javadoc(2494)", "Delete Modifier: public(2495)", "Delete SimpleName: Object(2496)", "Delete SimpleType: Object(2497)", "Delete SimpleName: visit(2498)", "Delete SimpleName: ASTBlock(2499)", "Delete SimpleType: ASTBlock(2500)", "Delete SimpleName: node(2501)", "Delete SingleVariableDeclaration(2502)", "Delete SimpleName: Object(2503)", "Delete SimpleType: Object(2504)", "Delete SimpleName: data(2505)", "Delete SingleVariableDeclaration(2506)", "Delete PrimitiveType: int(2507)", "Delete SimpleName: numChildren(2508)", "Delete SimpleName: node(2509)", "Delete SimpleName: jjtGetNumChildren(2510)", "Delete MethodInvocation(2511)", "Delete VariableDeclarationFragment(2512)", "Delete VariableDeclarationStatement(2513)", "Delete SimpleName: Object(2514)", "Delete SimpleType: Object(2515)", "Delete SimpleName: result(2516)", "Delete NullLiteral(2517)", "Delete VariableDeclarationFragment(2518)", "Delete VariableDeclarationStatement(2519)", "Delete PrimitiveType: int(2520)", "Delete SimpleName: i(2521)", "Delete NumberLiteral: 0(2522)", "Delete VariableDeclarationFragment(2523)", "Delete VariableDeclarationExpression(2524)", "Delete SimpleName: i(2525)", "Delete SimpleName: numChildren(2526)", "Delete InfixExpression: <(2527)", "Delete SimpleName: i(2528)", "Delete PostfixExpression: ++(2529)", "Delete SimpleName: result(2530)", "Delete SimpleName: node(2531)", "Delete SimpleName: jjtGetChild(2532)", "Delete SimpleName: i(2533)", "Delete MethodInvocation(2534)", "Delete SimpleName: jjtAccept(2535)", "Delete ThisExpression(2536)", "Delete SimpleName: data(2537)", "Delete MethodInvocation(2538)", "Delete Assignment: =(2539)", "Delete ExpressionStatement(2540)", "Delete Block(2541)", "Delete ForStatement(2542)", "Delete SimpleName: result(2543)", "Delete ReturnStatement(2544)", "Delete Block(2545)", "Delete MethodDeclaration(2546)", "Delete TagElement: @inheritDoc(2547)", "Delete TextElement:  (2548)", "Delete TagElement(2549)", "Delete Javadoc(2550)", "Delete Modifier: public(2551)", "Delete SimpleName: Object(2552)", "Delete SimpleType: Object(2553)", "Delete SimpleName: visit(2554)", "Delete SimpleName: ASTDivNode(2555)", "Delete SimpleType: ASTDivNode(2556)", "Delete SimpleName: node(2557)", "Delete SingleVariableDeclaration(2558)", "Delete SimpleName: Object(2559)", "Delete SimpleType: Object(2560)", "Delete SimpleName: data(2561)", "Delete SingleVariableDeclaration(2562)", "Delete SimpleName: Object(2563)", "Delete SimpleType: Object(2564)", "Delete SimpleName: left(2565)", "Delete SimpleName: node(2566)", "Delete SimpleName: jjtGetChild(2567)", "Delete NumberLiteral: 0(2568)", "Delete MethodInvocation(2569)", "Delete SimpleName: jjtAccept(2570)", "Delete ThisExpression(2571)", "Delete SimpleName: data(2572)", "Delete MethodInvocation(2573)", "Delete VariableDeclarationFragment(2574)", "Delete VariableDeclarationStatement(2575)", "Delete SimpleName: Object(2576)", "Delete SimpleType: Object(2577)", "Delete SimpleName: right(2578)", "Delete SimpleName: node(2579)", "Delete SimpleName: jjtGetChild(2580)", "Delete NumberLiteral: 1(2581)", "Delete MethodInvocation(2582)", "Delete SimpleName: jjtAccept(2583)", "Delete ThisExpression(2584)", "Delete SimpleName: data(2585)", "Delete MethodInvocation(2586)", "Delete VariableDeclarationFragment(2587)", "Delete VariableDeclarationStatement(2588)", "Delete SimpleName: arithmetic(2589)", "Delete SimpleName: divide(2590)", "Delete SimpleName: left(2591)", "Delete SimpleName: right(2592)", "Delete MethodInvocation(2593)", "Delete ReturnStatement(2594)", "Delete Block(2595)", "Delete SimpleName: ArithmeticException(2596)", "Delete SimpleType: ArithmeticException(2597)", "Delete SimpleName: xrt(2598)", "Delete SingleVariableDeclaration(2599)", "Delete SimpleName: strict(2600)", "Delete PrefixExpression: !(2601)", "Delete SimpleName: Double(2602)", "Delete SimpleType: Double(2603)", "Delete NumberLiteral: 0.0(2604)", "Delete ClassInstanceCreation(2605)", "Delete ReturnStatement(2606)", "Delete Block(2607)", "Delete IfStatement(2608)", "Delete SimpleName: JexlNode(2609)", "Delete SimpleType: JexlNode(2610)", "Delete SimpleName: xnode(2611)", "Delete SimpleName: findNullOperand(2612)", "Delete SimpleName: xrt(2613)", "Delete SimpleName: node(2614)", "Delete SimpleName: left(2615)", "Delete SimpleName: right(2616)", "Delete MethodInvocation(2617)", "Delete VariableDeclarationFragment(2618)", "Delete VariableDeclarationStatement(2619)", "Delete SimpleName: JexlException(2620)", "Delete SimpleType: JexlException(2621)", "Delete SimpleName: xnode(2622)", "Delete StringLiteral: \"divide error\"(2623)", "Delete SimpleName: xrt(2624)", "Delete ClassInstanceCreation(2625)", "Delete ThrowStatement(2626)", "Delete Block(2627)", "Delete CatchClause(2628)", "Delete TryStatement(2629)", "Delete Block(2630)", "Delete MethodDeclaration(2631)", "Delete TagElement: @inheritDoc(2632)", "Delete TextElement:  (2633)", "Delete TagElement(2634)", "Delete Javadoc(2635)", "Delete Modifier: public(2636)", "Delete SimpleName: Object(2637)", "Delete SimpleType: Object(2638)", "Delete SimpleName: visit(2639)", "Delete SimpleName: ASTEmptyFunction(2640)", "Delete SimpleType: ASTEmptyFunction(2641)", "Delete SimpleName: node(2642)", "Delete SingleVariableDeclaration(2643)", "Delete SimpleName: Object(2644)", "Delete SimpleType: Object(2645)", "Delete SimpleName: data(2646)", "Delete SingleVariableDeclaration(2647)", "Delete SimpleName: Object(2648)", "Delete SimpleType: Object(2649)", "Delete SimpleName: o(2650)", "Delete SimpleName: node(2651)", "Delete SimpleName: jjtGetChild(2652)", "Delete NumberLiteral: 0(2653)", "Delete MethodInvocation(2654)", "Delete SimpleName: jjtAccept(2655)", "Delete ThisExpression(2656)", "Delete SimpleName: data(2657)", "Delete MethodInvocation(2658)", "Delete VariableDeclarationFragment(2659)", "Delete VariableDeclarationStatement(2660)", "Delete SimpleName: o(2661)", "Delete NullLiteral(2662)", "Delete InfixExpression: ==(2663)", "Delete QualifiedName: Boolean.TRUE(2664)", "Delete ReturnStatement(2665)", "Delete Block(2666)", "Delete IfStatement(2667)", "Delete SimpleName: o(2668)", "Delete SimpleName: String(2669)", "Delete SimpleType: String(2670)", "Delete InstanceofExpression(2671)", "Delete StringLiteral: \"\"(2672)", "Delete SimpleName: equals(2673)", "Delete SimpleName: o(2674)", "Delete MethodInvocation(2675)", "Delete InfixExpression: &&(2676)", "Delete QualifiedName: Boolean.TRUE(2677)", "Delete ReturnStatement(2678)", "Delete Block(2679)", "Delete IfStatement(2680)", "Delete SimpleName: o(2681)", "Delete SimpleName: getClass(2682)", "Delete MethodInvocation(2683)", "Delete SimpleName: isArray(2684)", "Delete MethodInvocation(2685)", "Delete SimpleName: Object(2686)", "Delete SimpleType: Object(2687)", "Delete Dimension(2688)", "Delete ArrayType: Object[](2689)", "Delete SimpleName: o(2690)", "Delete CastExpression(2691)", "Delete ParenthesizedExpression(2692)", "Delete SimpleName: length(2693)", "Delete FieldAccess(2694)", "Delete NumberLiteral: 0(2695)", "Delete InfixExpression: ==(2696)", "Delete InfixExpression: &&(2697)", "Delete QualifiedName: Boolean.TRUE(2698)", "Delete ReturnStatement(2699)", "Delete Block(2700)", "Delete IfStatement(2701)", "Delete SimpleName: o(2702)", "Delete SimpleName: Collection(2703)", "Delete SimpleType: Collection(2704)", "Delete WildcardType: ?(2705)", "Delete ParameterizedType: Collection<?>(2706)", "Delete InstanceofExpression(2707)", "Delete SimpleName: Collection(2708)", "Delete SimpleType: Collection(2709)", "Delete WildcardType: ?(2710)", "Delete ParameterizedType: Collection<?>(2711)", "Delete SimpleName: o(2712)", "Delete CastExpression(2713)", "Delete ParenthesizedExpression(2714)", "Delete SimpleName: isEmpty(2715)", "Delete MethodInvocation(2716)", "Delete QualifiedName: Boolean.TRUE(2717)", "Delete QualifiedName: Boolean.FALSE(2718)", "Delete ConditionalExpression(2719)", "Delete ReturnStatement(2720)", "Delete Block(2721)", "Delete IfStatement(2722)", "Delete SimpleName: o(2723)", "Delete SimpleName: Map(2724)", "Delete SimpleType: Map(2725)", "Delete WildcardType: ?(2726)", "Delete WildcardType: ?(2727)", "Delete ParameterizedType: Map<?,?>(2728)", "Delete InstanceofExpression(2729)", "Delete SimpleName: Map(2730)", "Delete SimpleType: Map(2731)", "Delete WildcardType: ?(2732)", "Delete WildcardType: ?(2733)", "Delete ParameterizedType: Map<?,?>(2734)", "Delete SimpleName: o(2735)", "Delete CastExpression(2736)", "Delete ParenthesizedExpression(2737)", "Delete SimpleName: isEmpty(2738)", "Delete MethodInvocation(2739)", "Delete QualifiedName: Boolean.TRUE(2740)", "Delete QualifiedName: Boolean.FALSE(2741)", "Delete ConditionalExpression(2742)", "Delete ReturnStatement(2743)", "Delete Block(2744)", "Delete IfStatement(2745)", "Delete QualifiedName: Boolean.FALSE(2746)", "Delete ReturnStatement(2747)", "Delete Block(2748)", "Delete MethodDeclaration(2749)", "Delete TagElement: @inheritDoc(2750)", "Delete TextElement:  (2751)", "Delete TagElement(2752)", "Delete Javadoc(2753)", "Delete Modifier: public(2754)", "Delete SimpleName: Object(2755)", "Delete SimpleType: Object(2756)", "Delete SimpleName: visit(2757)", "Delete SimpleName: ASTEQNode(2758)", "Delete SimpleType: ASTEQNode(2759)", "Delete SimpleName: node(2760)", "Delete SingleVariableDeclaration(2761)", "Delete SimpleName: Object(2762)", "Delete SimpleType: Object(2763)", "Delete SimpleName: data(2764)", "Delete SingleVariableDeclaration(2765)", "Delete SimpleName: Object(2766)", "Delete SimpleType: Object(2767)", "Delete SimpleName: left(2768)", "Delete SimpleName: node(2769)", "Delete SimpleName: jjtGetChild(2770)", "Delete NumberLiteral: 0(2771)", "Delete MethodInvocation(2772)", "Delete SimpleName: jjtAccept(2773)", "Delete ThisExpression(2774)", "Delete SimpleName: data(2775)", "Delete MethodInvocation(2776)", "Delete VariableDeclarationFragment(2777)", "Delete VariableDeclarationStatement(2778)", "Delete SimpleName: Object(2779)", "Delete SimpleType: Object(2780)", "Delete SimpleName: right(2781)", "Delete SimpleName: node(2782)", "Delete SimpleName: jjtGetChild(2783)", "Delete NumberLiteral: 1(2784)", "Delete MethodInvocation(2785)", "Delete SimpleName: jjtAccept(2786)", "Delete ThisExpression(2787)", "Delete SimpleName: data(2788)", "Delete MethodInvocation(2789)", "Delete VariableDeclarationFragment(2790)", "Delete VariableDeclarationStatement(2791)", "Delete SimpleName: arithmetic(2792)", "Delete SimpleName: equals(2793)", "Delete SimpleName: left(2794)", "Delete SimpleName: right(2795)", "Delete MethodInvocation(2796)", "Delete QualifiedName: Boolean.TRUE(2797)", "Delete QualifiedName: Boolean.FALSE(2798)", "Delete ConditionalExpression(2799)", "Delete ReturnStatement(2800)", "Delete Block(2801)", "Delete SimpleName: ArithmeticException(2802)", "Delete SimpleType: ArithmeticException(2803)", "Delete SimpleName: xrt(2804)", "Delete SingleVariableDeclaration(2805)", "Delete SimpleName: JexlException(2806)", "Delete SimpleType: JexlException(2807)", "Delete SimpleName: node(2808)", "Delete StringLiteral: \"== error\"(2809)", "Delete SimpleName: xrt(2810)", "Delete ClassInstanceCreation(2811)", "Delete ThrowStatement(2812)", "Delete Block(2813)", "Delete CatchClause(2814)", "Delete TryStatement(2815)", "Delete Block(2816)", "Delete MethodDeclaration(2817)", "Delete TagElement: @inheritDoc(2818)", "Delete TextElement:  (2819)", "Delete TagElement(2820)", "Delete Javadoc(2821)", "Delete Modifier: public(2822)", "Delete SimpleName: Object(2823)", "Delete SimpleType: Object(2824)", "Delete SimpleName: visit(2825)", "Delete SimpleName: ASTFalseNode(2826)", "Delete SimpleType: ASTFalseNode(2827)", "Delete SimpleName: node(2828)", "Delete SingleVariableDeclaration(2829)", "Delete SimpleName: Object(2830)", "Delete SimpleType: Object(2831)", "Delete SimpleName: data(2832)", "Delete SingleVariableDeclaration(2833)", "Delete QualifiedName: Boolean.FALSE(2834)", "Delete ReturnStatement(2835)", "Delete Block(2836)", "Delete MethodDeclaration(2837)", "Delete TagElement: @inheritDoc(2838)", "Delete TextElement:  (2839)", "Delete TagElement(2840)", "Delete Javadoc(2841)", "Delete Modifier: public(2842)", "Delete SimpleName: Object(2843)", "Delete SimpleType: Object(2844)", "Delete SimpleName: visit(2845)", "Delete SimpleName: ASTForeachStatement(2846)", "Delete SimpleType: ASTForeachStatement(2847)", "Delete SimpleName: node(2848)", "Delete SingleVariableDeclaration(2849)", "Delete SimpleName: Object(2850)", "Delete SimpleType: Object(2851)", "Delete SimpleName: data(2852)", "Delete SingleVariableDeclaration(2853)", "Delete SimpleName: Object(2854)", "Delete SimpleType: Object(2855)", "Delete SimpleName: result(2856)", "Delete NullLiteral(2857)", "Delete VariableDeclarationFragment(2858)", "Delete VariableDeclarationStatement(2859)", "Delete SimpleName: ASTReference(2860)", "Delete SimpleType: ASTReference(2861)", "Delete SimpleName: loopReference(2862)", "Delete SimpleName: ASTReference(2863)", "Delete SimpleType: ASTReference(2864)", "Delete SimpleName: node(2865)", "Delete SimpleName: jjtGetChild(2866)", "Delete NumberLiteral: 0(2867)", "Delete MethodInvocation(2868)", "Delete CastExpression(2869)", "Delete VariableDeclarationFragment(2870)", "Delete VariableDeclarationStatement(2871)", "Delete SimpleName: ASTIdentifier(2872)", "Delete SimpleType: ASTIdentifier(2873)", "Delete SimpleName: loopVariable(2874)", "Delete SimpleName: ASTIdentifier(2875)", "Delete SimpleType: ASTIdentifier(2876)", "Delete SimpleName: loopReference(2877)", "Delete SimpleName: jjtGetChild(2878)", "Delete NumberLiteral: 0(2879)", "Delete MethodInvocation(2880)", "Delete CastExpression(2881)", "Delete VariableDeclarationFragment(2882)", "Delete VariableDeclarationStatement(2883)", "Delete PrimitiveType: int(2884)", "Delete SimpleName: register(2885)", "Delete SimpleName: loopVariable(2886)", "Delete SimpleName: getRegister(2887)", "Delete MethodInvocation(2888)", "Delete VariableDeclarationFragment(2889)", "Delete VariableDeclarationStatement(2890)", "Delete SimpleName: Object(2891)", "Delete SimpleType: Object(2892)", "Delete SimpleName: iterableValue(2893)", "Delete SimpleName: node(2894)", "Delete SimpleName: jjtGetChild(2895)", "Delete NumberLiteral: 1(2896)", "Delete MethodInvocation(2897)", "Delete SimpleName: jjtAccept(2898)", "Delete ThisExpression(2899)", "Delete SimpleName: data(2900)", "Delete MethodInvocation(2901)", "Delete VariableDeclarationFragment(2902)", "Delete VariableDeclarationStatement(2903)", "Delete SimpleName: iterableValue(2904)", "Delete NullLiteral(2905)", "Delete InfixExpression: !=(2906)", "Delete SimpleName: node(2907)", "Delete SimpleName: jjtGetNumChildren(2908)", "Delete MethodInvocation(2909)", "Delete NumberLiteral: 3(2910)", "Delete InfixExpression: >=(2911)", "Delete InfixExpression: &&(2912)", "Delete SimpleName: JexlNode(2913)", "Delete SimpleType: JexlNode(2914)", "Delete SimpleName: statement(2915)", "Delete SimpleName: node(2916)", "Delete SimpleName: jjtGetChild(2917)", "Delete NumberLiteral: 2(2918)", "Delete MethodInvocation(2919)", "Delete VariableDeclarationFragment(2920)", "Delete VariableDeclarationStatement(2921)", "Delete SimpleName: Iterator(2922)", "Delete SimpleType: Iterator(2923)", "Delete WildcardType: ?(2924)", "Delete ParameterizedType: Iterator<?>(2925)", "Delete SimpleName: itemsIterator(2926)", "Delete SimpleName: uberspect(2927)", "Delete SimpleName: getIterator(2928)", "Delete SimpleName: iterableValue(2929)", "Delete SimpleName: node(2930)", "Delete MethodInvocation(2931)", "Delete VariableDeclarationFragment(2932)", "Delete VariableDeclarationStatement(2933)", "Delete SimpleName: itemsIterator(2934)", "Delete NullLiteral(2935)", "Delete InfixExpression: !=(2936)", "Delete SimpleName: itemsIterator(2937)", "Delete SimpleName: hasNext(2938)", "Delete MethodInvocation(2939)", "Delete SimpleName: isCancelled(2940)", "Delete MethodInvocation(2941)", "Delete QualifiedName: JexlException.Cancel(2942)", "Delete SimpleType: JexlException.Cancel(2943)", "Delete SimpleName: node(2944)", "Delete ClassInstanceCreation(2945)", "Delete ThrowStatement(2946)", "Delete Block(2947)", "Delete IfStatement(2948)", "Delete SimpleName: Object(2949)", "Delete SimpleType: Object(2950)", "Delete SimpleName: value(2951)", "Delete SimpleName: itemsIterator(2952)", "Delete SimpleName: next(2953)", "Delete MethodInvocation(2954)", "Delete VariableDeclarationFragment(2955)", "Delete VariableDeclarationStatement(2956)", "Delete SimpleName: register(2957)", "Delete NumberLiteral: 0(2958)", "Delete InfixExpression: <(2959)", "Delete SimpleName: context(2960)", "Delete SimpleName: set(2961)", "Delete QualifiedName: loopVariable.image(2962)", "Delete SimpleName: value(2963)", "Delete MethodInvocation(2964)", "Delete ExpressionStatement(2965)", "Delete Block(2966)", "Delete SimpleName: registers(2967)", "Delete SimpleName: register(2968)", "Delete ArrayAccess(2969)", "Delete SimpleName: value(2970)", "Delete Assignment: =(2971)", "Delete ExpressionStatement(2972)", "Delete Block(2973)", "Delete IfStatement(2974)", "Delete SimpleName: result(2975)", "Delete SimpleName: statement(2976)", "Delete SimpleName: jjtAccept(2977)", "Delete ThisExpression(2978)", "Delete SimpleName: data(2979)", "Delete MethodInvocation(2980)", "Delete Assignment: =(2981)", "Delete ExpressionStatement(2982)", "Delete Block(2983)", "Delete WhileStatement(2984)", "Delete Block(2985)", "Delete IfStatement(2986)", "Delete Block(2987)", "Delete IfStatement(2988)", "Delete SimpleName: result(2989)", "Delete ReturnStatement(2990)", "Delete Block(2991)", "Delete MethodDeclaration(2992)", "Delete TagElement: @inheritDoc(2993)", "Delete TextElement:  (2994)", "Delete TagElement(2995)", "Delete Javadoc(2996)", "Delete Modifier: public(2997)", "Delete SimpleName: Object(2998)", "Delete SimpleType: Object(2999)", "Delete SimpleName: visit(3000)", "Delete SimpleName: ASTGENode(3001)", "Delete SimpleType: ASTGENode(3002)", "Delete SimpleName: node(3003)", "Delete SingleVariableDeclaration(3004)", "Delete SimpleName: Object(3005)", "Delete SimpleType: Object(3006)", "Delete SimpleName: data(3007)", "Delete SingleVariableDeclaration(3008)", "Delete SimpleName: Object(3009)", "Delete SimpleType: Object(3010)", "Delete SimpleName: left(3011)", "Delete SimpleName: node(3012)", "Delete SimpleName: jjtGetChild(3013)", "Delete NumberLiteral: 0(3014)", "Delete MethodInvocation(3015)", "Delete SimpleName: jjtAccept(3016)", "Delete ThisExpression(3017)", "Delete SimpleName: data(3018)", "Delete MethodInvocation(3019)", "Delete VariableDeclarationFragment(3020)", "Delete VariableDeclarationStatement(3021)", "Delete SimpleName: Object(3022)", "Delete SimpleType: Object(3023)", "Delete SimpleName: right(3024)", "Delete SimpleName: node(3025)", "Delete SimpleName: jjtGetChild(3026)", "Delete NumberLiteral: 1(3027)", "Delete MethodInvocation(3028)", "Delete SimpleName: jjtAccept(3029)", "Delete ThisExpression(3030)", "Delete SimpleName: data(3031)", "Delete MethodInvocation(3032)", "Delete VariableDeclarationFragment(3033)", "Delete VariableDeclarationStatement(3034)", "Delete SimpleName: arithmetic(3035)", "Delete SimpleName: greaterThanOrEqual(3036)", "Delete SimpleName: left(3037)", "Delete SimpleName: right(3038)", "Delete MethodInvocation(3039)", "Delete QualifiedName: Boolean.TRUE(3040)", "Delete QualifiedName: Boolean.FALSE(3041)", "Delete ConditionalExpression(3042)", "Delete ReturnStatement(3043)", "Delete Block(3044)", "Delete SimpleName: ArithmeticException(3045)", "Delete SimpleType: ArithmeticException(3046)", "Delete SimpleName: xrt(3047)", "Delete SingleVariableDeclaration(3048)", "Delete SimpleName: JexlException(3049)", "Delete SimpleType: JexlException(3050)", "Delete SimpleName: node(3051)", "Delete StringLiteral: \">= error\"(3052)", "Delete SimpleName: xrt(3053)", "Delete ClassInstanceCreation(3054)", "Delete ThrowStatement(3055)", "Delete Block(3056)", "Delete CatchClause(3057)", "Delete TryStatement(3058)", "Delete Block(3059)", "Delete MethodDeclaration(3060)", "Delete TagElement: @inheritDoc(3061)", "Delete TextElement:  (3062)", "Delete TagElement(3063)", "Delete Javadoc(3064)", "Delete Modifier: public(3065)", "Delete SimpleName: Object(3066)", "Delete SimpleType: Object(3067)", "Delete SimpleName: visit(3068)", "Delete SimpleName: ASTGTNode(3069)", "Delete SimpleType: ASTGTNode(3070)", "Delete SimpleName: node(3071)", "Delete SingleVariableDeclaration(3072)", "Delete SimpleName: Object(3073)", "Delete SimpleType: Object(3074)", "Delete SimpleName: data(3075)", "Delete SingleVariableDeclaration(3076)", "Delete SimpleName: Object(3077)", "Delete SimpleType: Object(3078)", "Delete SimpleName: left(3079)", "Delete SimpleName: node(3080)", "Delete SimpleName: jjtGetChild(3081)", "Delete NumberLiteral: 0(3082)", "Delete MethodInvocation(3083)", "Delete SimpleName: jjtAccept(3084)", "Delete ThisExpression(3085)", "Delete SimpleName: data(3086)", "Delete MethodInvocation(3087)", "Delete VariableDeclarationFragment(3088)", "Delete VariableDeclarationStatement(3089)", "Delete SimpleName: Object(3090)", "Delete SimpleType: Object(3091)", "Delete SimpleName: right(3092)", "Delete SimpleName: node(3093)", "Delete SimpleName: jjtGetChild(3094)", "Delete NumberLiteral: 1(3095)", "Delete MethodInvocation(3096)", "Delete SimpleName: jjtAccept(3097)", "Delete ThisExpression(3098)", "Delete SimpleName: data(3099)", "Delete MethodInvocation(3100)", "Delete VariableDeclarationFragment(3101)", "Delete VariableDeclarationStatement(3102)", "Delete SimpleName: arithmetic(3103)", "Delete SimpleName: greaterThan(3104)", "Delete SimpleName: left(3105)", "Delete SimpleName: right(3106)", "Delete MethodInvocation(3107)", "Delete QualifiedName: Boolean.TRUE(3108)", "Delete QualifiedName: Boolean.FALSE(3109)", "Delete ConditionalExpression(3110)", "Delete ReturnStatement(3111)", "Delete Block(3112)", "Delete SimpleName: ArithmeticException(3113)", "Delete SimpleType: ArithmeticException(3114)", "Delete SimpleName: xrt(3115)", "Delete SingleVariableDeclaration(3116)", "Delete SimpleName: JexlException(3117)", "Delete SimpleType: JexlException(3118)", "Delete SimpleName: node(3119)", "Delete StringLiteral: \"> error\"(3120)", "Delete SimpleName: xrt(3121)", "Delete ClassInstanceCreation(3122)", "Delete ThrowStatement(3123)", "Delete Block(3124)", "Delete CatchClause(3125)", "Delete TryStatement(3126)", "Delete Block(3127)", "Delete MethodDeclaration(3128)", "Delete TagElement: @inheritDoc(3129)", "Delete TextElement:  (3130)", "Delete TagElement(3131)", "Delete Javadoc(3132)", "Delete Modifier: public(3133)", "Delete SimpleName: Object(3134)", "Delete SimpleType: Object(3135)", "Delete SimpleName: visit(3136)", "Delete SimpleName: ASTERNode(3137)", "Delete SimpleType: ASTERNode(3138)", "Delete SimpleName: node(3139)", "Delete SingleVariableDeclaration(3140)", "Delete SimpleName: Object(3141)", "Delete SimpleType: Object(3142)", "Delete SimpleName: data(3143)", "Delete SingleVariableDeclaration(3144)", "Delete SimpleName: Object(3145)", "Delete SimpleType: Object(3146)", "Delete SimpleName: left(3147)", "Delete SimpleName: node(3148)", "Delete SimpleName: jjtGetChild(3149)", "Delete NumberLiteral: 0(3150)", "Delete MethodInvocation(3151)", "Delete SimpleName: jjtAccept(3152)", "Delete ThisExpression(3153)", "Delete SimpleName: data(3154)", "Delete MethodInvocation(3155)", "Delete VariableDeclarationFragment(3156)", "Delete VariableDeclarationStatement(3157)", "Delete SimpleName: Object(3158)", "Delete SimpleType: Object(3159)", "Delete SimpleName: right(3160)", "Delete SimpleName: node(3161)", "Delete SimpleName: jjtGetChild(3162)", "Delete NumberLiteral: 1(3163)", "Delete MethodInvocation(3164)", "Delete SimpleName: jjtAccept(3165)", "Delete ThisExpression(3166)", "Delete SimpleName: data(3167)", "Delete MethodInvocation(3168)", "Delete VariableDeclarationFragment(3169)", "Delete VariableDeclarationStatement(3170)", "Delete SimpleName: right(3171)", "Delete QualifiedName: java.util.regex.Pattern(3172)", "Delete SimpleType: java.util.regex.Pattern(3173)", "Delete InstanceofExpression(3174)", "Delete SimpleName: right(3175)", "Delete SimpleName: String(3176)", "Delete SimpleType: String(3177)", "Delete InstanceofExpression(3178)", "Delete InfixExpression: ||(3179)", "Delete SimpleName: arithmetic(3180)", "Delete SimpleName: matches(3181)", "Delete SimpleName: left(3182)", "Delete SimpleName: right(3183)", "Delete MethodInvocation(3184)", "Delete QualifiedName: Boolean.TRUE(3185)", "Delete QualifiedName: Boolean.FALSE(3186)", "Delete ConditionalExpression(3187)", "Delete ReturnStatement(3188)", "Delete Block(3189)", "Delete IfStatement(3190)", "Delete SimpleName: right(3191)", "Delete SimpleName: Set(3192)", "Delete SimpleType: Set(3193)", "Delete WildcardType: ?(3194)", "Delete ParameterizedType: Set<?>(3195)", "Delete InstanceofExpression(3196)", "Delete SimpleName: Set(3197)", "Delete SimpleType: Set(3198)", "Delete WildcardType: ?(3199)", "Delete ParameterizedType: Set<?>(3200)", "Delete SimpleName: right(3201)", "Delete CastExpression(3202)", "Delete ParenthesizedExpression(3203)", "Delete SimpleName: contains(3204)", "Delete SimpleName: left(3205)", "Delete MethodInvocation(3206)", "Delete QualifiedName: Boolean.TRUE(3207)", "Delete QualifiedName: Boolean.FALSE(3208)", "Delete ConditionalExpression(3209)", "Delete ReturnStatement(3210)", "Delete Block(3211)", "Delete IfStatement(3212)", "Delete SimpleName: right(3213)", "Delete SimpleName: Map(3214)", "Delete SimpleType: Map(3215)", "Delete WildcardType: ?(3216)", "Delete WildcardType: ?(3217)", "Delete ParameterizedType: Map<?,?>(3218)", "Delete InstanceofExpression(3219)", "Delete SimpleName: Map(3220)", "Delete SimpleType: Map(3221)", "Delete WildcardType: ?(3222)", "Delete WildcardType: ?(3223)", "Delete ParameterizedType: Map<?,?>(3224)", "Delete SimpleName: right(3225)", "Delete CastExpression(3226)", "Delete ParenthesizedExpression(3227)", "Delete SimpleName: containsKey(3228)", "Delete SimpleName: left(3229)", "Delete MethodInvocation(3230)", "Delete QualifiedName: Boolean.TRUE(3231)", "Delete QualifiedName: Boolean.FALSE(3232)", "Delete ConditionalExpression(3233)", "Delete ReturnStatement(3234)", "Delete Block(3235)", "Delete IfStatement(3236)", "Delete SimpleName: right(3237)", "Delete SimpleName: Collection(3238)", "Delete SimpleType: Collection(3239)", "Delete WildcardType: ?(3240)", "Delete ParameterizedType: Collection<?>(3241)", "Delete InstanceofExpression(3242)", "Delete SimpleName: Collection(3243)", "Delete SimpleType: Collection(3244)", "Delete WildcardType: ?(3245)", "Delete ParameterizedType: Collection<?>(3246)", "Delete SimpleName: right(3247)", "Delete CastExpression(3248)", "Delete ParenthesizedExpression(3249)", "Delete SimpleName: contains(3250)", "Delete SimpleName: left(3251)", "Delete MethodInvocation(3252)", "Delete QualifiedName: Boolean.TRUE(3253)", "Delete QualifiedName: Boolean.FALSE(3254)", "Delete ConditionalExpression(3255)", "Delete ReturnStatement(3256)", "Delete Block(3257)", "Delete IfStatement(3258)", "Delete SimpleName: Object(3259)", "Delete SimpleType: Object(3260)", "Delete Dimension(3261)", "Delete ArrayType: Object[](3262)", "Delete SimpleName: argv(3263)", "Delete SimpleName: left(3264)", "Delete ArrayInitializer(3265)", "Delete VariableDeclarationFragment(3266)", "Delete VariableDeclarationStatement(3267)", "Delete SimpleName: JexlMethod(3268)", "Delete SimpleType: JexlMethod(3269)", "Delete SimpleName: vm(3270)", "Delete SimpleName: uberspect(3271)", "Delete SimpleName: getMethod(3272)", "Delete SimpleName: right(3273)", "Delete StringLiteral: \"contains\"(3274)", "Delete SimpleName: argv(3275)", "Delete SimpleName: node(3276)", "Delete MethodInvocation(3277)", "Delete VariableDeclarationFragment(3278)", "Delete VariableDeclarationStatement(3279)", "Delete SimpleName: vm(3280)", "Delete NullLiteral(3281)", "Delete InfixExpression: !=(3282)", "Delete SimpleName: arithmetic(3283)", "Delete SimpleName: toBoolean(3284)", "Delete SimpleName: vm(3285)", "Delete SimpleName: invoke(3286)", "Delete SimpleName: right(3287)", "Delete SimpleName: argv(3288)", "Delete MethodInvocation(3289)", "Delete MethodInvocation(3290)", "Delete QualifiedName: Boolean.TRUE(3291)", "Delete QualifiedName: Boolean.FALSE(3292)", "Delete ConditionalExpression(3293)", "Delete ReturnStatement(3294)", "Delete Block(3295)", "Delete SimpleName: arithmetic(3296)", "Delete SimpleName: narrowArguments(3297)", "Delete SimpleName: argv(3298)", "Delete MethodInvocation(3299)", "Delete SimpleName: vm(3300)", "Delete SimpleName: uberspect(3301)", "Delete SimpleName: getMethod(3302)", "Delete SimpleName: right(3303)", "Delete StringLiteral: \"contains\"(3304)", "Delete SimpleName: argv(3305)", "Delete SimpleName: node(3306)", "Delete MethodInvocation(3307)", "Delete Assignment: =(3308)", "Delete ExpressionStatement(3309)", "Delete SimpleName: vm(3310)", "Delete NullLiteral(3311)", "Delete InfixExpression: !=(3312)", "Delete SimpleName: arithmetic(3313)", "Delete SimpleName: toBoolean(3314)", "Delete SimpleName: vm(3315)", "Delete SimpleName: invoke(3316)", "Delete SimpleName: right(3317)", "Delete SimpleName: argv(3318)", "Delete MethodInvocation(3319)", "Delete MethodInvocation(3320)", "Delete QualifiedName: Boolean.TRUE(3321)", "Delete QualifiedName: Boolean.FALSE(3322)", "Delete ConditionalExpression(3323)", "Delete ReturnStatement(3324)", "Delete Block(3325)", "Delete IfStatement(3326)", "Delete Block(3327)", "Delete IfStatement(3328)", "Delete IfStatement(3329)", "Delete Block(3330)", "Delete SimpleName: InvocationTargetException(3331)", "Delete SimpleType: InvocationTargetException(3332)", "Delete SimpleName: e(3333)", "Delete SingleVariableDeclaration(3334)", "Delete SimpleName: JexlException(3335)", "Delete SimpleType: JexlException(3336)", "Delete SimpleName: node(3337)", "Delete StringLiteral: \"=~ invocation error\"(3338)", "Delete SimpleName: e(3339)", "Delete SimpleName: getCause(3340)", "Delete MethodInvocation(3341)", "Delete ClassInstanceCreation(3342)", "Delete ThrowStatement(3343)", "Delete Block(3344)", "Delete CatchClause(3345)", "Delete SimpleName: Exception(3346)", "Delete SimpleType: Exception(3347)", "Delete SimpleName: e(3348)", "Delete SingleVariableDeclaration(3349)", "Delete SimpleName: JexlException(3350)", "Delete SimpleType: JexlException(3351)", "Delete SimpleName: node(3352)", "Delete StringLiteral: \"=~ error\"(3353)", "Delete SimpleName: e(3354)", "Delete ClassInstanceCreation(3355)", "Delete ThrowStatement(3356)", "Delete Block(3357)", "Delete CatchClause(3358)", "Delete TryStatement(3359)", "Delete SimpleName: Iterator(3360)", "Delete SimpleType: Iterator(3361)", "Delete WildcardType: ?(3362)", "Delete ParameterizedType: Iterator<?>(3363)", "Delete SimpleName: it(3364)", "Delete SimpleName: uberspect(3365)", "Delete SimpleName: getIterator(3366)", "Delete SimpleName: right(3367)", "Delete SimpleName: node(3368)", "Delete MethodInvocation(3369)", "Delete VariableDeclarationFragment(3370)", "Delete VariableDeclarationStatement(3371)", "Delete SimpleName: it(3372)", "Delete NullLiteral(3373)", "Delete InfixExpression: !=(3374)", "Delete SimpleName: it(3375)", "Delete SimpleName: hasNext(3376)", "Delete MethodInvocation(3377)", "Delete SimpleName: Object(3378)", "Delete SimpleType: Object(3379)", "Delete SimpleName: next(3380)", "Delete SimpleName: it(3381)", "Delete SimpleName: next(3382)", "Delete MethodInvocation(3383)", "Delete VariableDeclarationFragment(3384)", "Delete VariableDeclarationStatement(3385)", "Delete SimpleName: next(3386)", "Delete SimpleName: left(3387)", "Delete InfixExpression: ==(3388)", "Delete SimpleName: next(3389)", "Delete NullLiteral(3390)", "Delete InfixExpression: !=(3391)", "Delete SimpleName: next(3392)", "Delete SimpleName: equals(3393)", "Delete SimpleName: left(3394)", "Delete MethodInvocation(3395)", "Delete InfixExpression: &&(3396)", "Delete ParenthesizedExpression(3397)", "Delete InfixExpression: ||(3398)", "Delete QualifiedName: Boolean.TRUE(3399)", "Delete ReturnStatement(3400)", "Delete Block(3401)", "Delete IfStatement(3402)", "Delete Block(3403)", "Delete WhileStatement(3404)", "Delete QualifiedName: Boolean.FALSE(3405)", "Delete ReturnStatement(3406)", "Delete Block(3407)", "Delete IfStatement(3408)", "Delete SimpleName: arithmetic(3409)", "Delete SimpleName: equals(3410)", "Delete SimpleName: left(3411)", "Delete SimpleName: right(3412)", "Delete MethodInvocation(3413)", "Delete QualifiedName: Boolean.TRUE(3414)", "Delete QualifiedName: Boolean.FALSE(3415)", "Delete ConditionalExpression(3416)", "Delete ReturnStatement(3417)", "Delete Block(3418)", "Delete SimpleName: ArithmeticException(3419)", "Delete SimpleType: ArithmeticException(3420)", "Delete SimpleName: xrt(3421)", "Delete SingleVariableDeclaration(3422)", "Delete SimpleName: JexlException(3423)", "Delete SimpleType: JexlException(3424)", "Delete SimpleName: node(3425)", "Delete StringLiteral: \"=~ error\"(3426)", "Delete SimpleName: xrt(3427)", "Delete ClassInstanceCreation(3428)", "Delete ThrowStatement(3429)", "Delete Block(3430)", "Delete CatchClause(3431)", "Delete TryStatement(3432)", "Delete Block(3433)", "Delete MethodDeclaration(3434)", "Delete TagElement: @inheritDoc(3435)", "Delete TextElement:  (3436)", "Delete TagElement(3437)", "Delete Javadoc(3438)", "Delete Modifier: public(3439)", "Delete SimpleName: Object(3440)", "Delete SimpleType: Object(3441)", "Delete SimpleName: visit(3442)", "Delete SimpleName: ASTIdentifier(3443)", "Delete SimpleType: ASTIdentifier(3444)", "Delete SimpleName: node(3445)", "Delete SingleVariableDeclaration(3446)", "Delete SimpleName: Object(3447)", "Delete SimpleType: Object(3448)", "Delete SimpleName: data(3449)", "Delete SingleVariableDeclaration(3450)", "Delete SimpleName: isCancelled(3451)", "Delete MethodInvocation(3452)", "Delete QualifiedName: JexlException.Cancel(3453)", "Delete SimpleType: JexlException.Cancel(3454)", "Delete SimpleName: node(3455)", "Delete ClassInstanceCreation(3456)", "Delete ThrowStatement(3457)", "Delete Block(3458)", "Delete IfStatement(3459)", "Delete SimpleName: String(3460)", "Delete SimpleType: String(3461)", "Delete SimpleName: name(3462)", "Delete QualifiedName: node.image(3463)", "Delete VariableDeclarationFragment(3464)", "Delete VariableDeclarationStatement(3465)", "Delete SimpleName: data(3466)", "Delete NullLiteral(3467)", "Delete InfixExpression: ==(3468)", "Delete PrimitiveType: int(3469)", "Delete SimpleName: register(3470)", "Delete SimpleName: node(3471)", "Delete SimpleName: getRegister(3472)", "Delete MethodInvocation(3473)", "Delete VariableDeclarationFragment(3474)", "Delete VariableDeclarationStatement(3475)", "Delete SimpleName: register(3476)", "Delete NumberLiteral: 0(3477)", "Delete InfixExpression: >=(3478)", "Delete SimpleName: registers(3479)", "Delete SimpleName: register(3480)", "Delete ArrayAccess(3481)", "Delete ReturnStatement(3482)", "Delete Block(3483)", "Delete IfStatement(3484)", "Delete SimpleName: Object(3485)", "Delete SimpleType: Object(3486)", "Delete SimpleName: value(3487)", "Delete SimpleName: context(3488)", "Delete SimpleName: get(3489)", "Delete SimpleName: name(3490)", "Delete MethodInvocation(3491)", "Delete VariableDeclarationFragment(3492)", "Delete VariableDeclarationStatement(3493)", "Delete SimpleName: value(3494)", "Delete NullLiteral(3495)", "Delete InfixExpression: ==(3496)", "Delete SimpleName: node(3497)", "Delete SimpleName: jjtGetParent(3498)", "Delete MethodInvocation(3499)", "Delete SimpleName: ASTReference(3500)", "Delete SimpleType: ASTReference(3501)", "Delete InstanceofExpression(3502)", "Delete ParenthesizedExpression(3503)", "Delete PrefixExpression: !(3504)", "Delete InfixExpression: &&(3505)", "Delete SimpleName: context(3506)", "Delete SimpleName: has(3507)", "Delete SimpleName: name(3508)", "Delete MethodInvocation(3509)", "Delete PrefixExpression: !(3510)", "Delete InfixExpression: &&(3511)", "Delete SimpleName: isTernaryProtected(3512)", "Delete SimpleName: node(3513)", "Delete MethodInvocation(3514)", "Delete PrefixExpression: !(3515)", "Delete InfixExpression: &&(3516)", "Delete SimpleName: JexlException(3517)", "Delete SimpleType: JexlException(3518)", "Delete SimpleName: xjexl(3519)", "Delete QualifiedName: JexlException.Variable(3520)", "Delete SimpleType: JexlException.Variable(3521)", "Delete SimpleName: node(3522)", "Delete SimpleName: name(3523)", "Delete ClassInstanceCreation(3524)", "Delete VariableDeclarationFragment(3525)", "Delete VariableDeclarationStatement(3526)", "Delete SimpleName: unknownVariable(3527)", "Delete SimpleName: xjexl(3528)", "Delete MethodInvocation(3529)", "Delete ReturnStatement(3530)", "Delete Block(3531)", "Delete IfStatement(3532)", "Delete SimpleName: value(3533)", "Delete ReturnStatement(3534)", "Delete Block(3535)", "Delete SimpleName: getAttribute(3536)", "Delete SimpleName: data(3537)", "Delete SimpleName: name(3538)", "Delete SimpleName: node(3539)", "Delete MethodInvocation(3540)", "Delete ReturnStatement(3541)", "Delete Block(3542)", "Delete IfStatement(3543)", "Delete Block(3544)", "Delete MethodDeclaration(3545)", "Delete TagElement: @inheritDoc(3546)", "Delete TextElement:  (3547)", "Delete TagElement(3548)", "Delete Javadoc(3549)", "Delete Modifier: public(3550)", "Delete SimpleName: Object(3551)", "Delete SimpleType: Object(3552)", "Delete SimpleName: visit(3553)", "Delete SimpleName: ASTVar(3554)", "Delete SimpleType: ASTVar(3555)", "Delete SimpleName: node(3556)", "Delete SingleVariableDeclaration(3557)", "Delete SimpleName: Object(3558)", "Delete SimpleType: Object(3559)", "Delete SimpleName: data(3560)", "Delete SingleVariableDeclaration(3561)", "Delete SimpleName: visit(3562)", "Delete SimpleName: ASTIdentifier(3563)", "Delete SimpleType: ASTIdentifier(3564)", "Delete SimpleName: node(3565)", "Delete CastExpression(3566)", "Delete SimpleName: data(3567)", "Delete MethodInvocation(3568)", "Delete ReturnStatement(3569)", "Delete Block(3570)", "Delete MethodDeclaration(3571)", "Delete TagElement: @inheritDoc(3572)", "Delete TextElement:  (3573)", "Delete TagElement(3574)", "Delete Javadoc(3575)", "Delete Modifier: public(3576)", "Delete SimpleName: Object(3577)", "Delete SimpleType: Object(3578)", "Delete SimpleName: visit(3579)", "Delete SimpleName: ASTIfStatement(3580)", "Delete SimpleType: ASTIfStatement(3581)", "Delete SimpleName: node(3582)", "Delete SingleVariableDeclaration(3583)", "Delete SimpleName: Object(3584)", "Delete SimpleType: Object(3585)", "Delete SimpleName: data(3586)", "Delete SingleVariableDeclaration(3587)", "Delete PrimitiveType: int(3588)", "Delete SimpleName: n(3589)", "Delete NumberLiteral: 0(3590)", "Delete VariableDeclarationFragment(3591)", "Delete VariableDeclarationStatement(3592)", "Delete SimpleName: Object(3593)", "Delete SimpleType: Object(3594)", "Delete SimpleName: result(3595)", "Delete NullLiteral(3596)", "Delete VariableDeclarationFragment(3597)", "Delete VariableDeclarationStatement(3598)", "Delete SimpleName: Object(3599)", "Delete SimpleType: Object(3600)", "Delete SimpleName: expression(3601)", "Delete SimpleName: node(3602)", "Delete SimpleName: jjtGetChild(3603)", "Delete NumberLiteral: 0(3604)", "Delete MethodInvocation(3605)", "Delete SimpleName: jjtAccept(3606)", "Delete ThisExpression(3607)", "Delete SimpleName: data(3608)", "Delete MethodInvocation(3609)", "Delete VariableDeclarationFragment(3610)", "Delete VariableDeclarationStatement(3611)", "Delete SimpleName: arithmetic(3612)", "Delete SimpleName: toBoolean(3613)", "Delete SimpleName: expression(3614)", "Delete MethodInvocation(3615)", "Delete SimpleName: n(3616)", "Delete NumberLiteral: 1(3617)", "Delete Assignment: =(3618)", "Delete ExpressionStatement(3619)", "Delete SimpleName: result(3620)", "Delete SimpleName: node(3621)", "Delete SimpleName: jjtGetChild(3622)", "Delete NumberLiteral: 1(3623)", "Delete MethodInvocation(3624)", "Delete SimpleName: jjtAccept(3625)", "Delete ThisExpression(3626)", "Delete SimpleName: data(3627)", "Delete MethodInvocation(3628)", "Delete Assignment: =(3629)", "Delete ExpressionStatement(3630)", "Delete Block(3631)", "Delete SimpleName: node(3632)", "Delete SimpleName: jjtGetNumChildren(3633)", "Delete MethodInvocation(3634)", "Delete NumberLiteral: 3(3635)", "Delete InfixExpression: ==(3636)", "Delete SimpleName: n(3637)", "Delete NumberLiteral: 2(3638)", "Delete Assignment: =(3639)", "Delete ExpressionStatement(3640)", "Delete SimpleName: result(3641)", "Delete SimpleName: node(3642)", "Delete SimpleName: jjtGetChild(3643)", "Delete NumberLiteral: 2(3644)", "Delete MethodInvocation(3645)", "Delete SimpleName: jjtAccept(3646)", "Delete ThisExpression(3647)", "Delete SimpleName: data(3648)", "Delete MethodInvocation(3649)", "Delete Assignment: =(3650)", "Delete ExpressionStatement(3651)", "Delete Block(3652)", "Delete IfStatement(3653)", "Delete Block(3654)", "Delete IfStatement(3655)", "Delete SimpleName: result(3656)", "Delete ReturnStatement(3657)", "Delete Block(3658)", "Delete SimpleName: JexlException(3659)", "Delete SimpleType: JexlException(3660)", "Delete SimpleName: error(3661)", "Delete SingleVariableDeclaration(3662)", "Delete SimpleName: error(3663)", "Delete ThrowStatement(3664)", "Delete Block(3665)", "Delete CatchClause(3666)", "Delete SimpleName: ArithmeticException(3667)", "Delete SimpleType: ArithmeticException(3668)", "Delete SimpleName: xrt(3669)", "Delete SingleVariableDeclaration(3670)", "Delete SimpleName: JexlException(3671)", "Delete SimpleType: JexlException(3672)", "Delete SimpleName: node(3673)", "Delete SimpleName: jjtGetChild(3674)", "Delete SimpleName: n(3675)", "Delete MethodInvocation(3676)", "Delete StringLiteral: \"if error\"(3677)", "Delete SimpleName: xrt(3678)", "Delete ClassInstanceCreation(3679)", "Delete ThrowStatement(3680)", "Delete Block(3681)", "Delete CatchClause(3682)", "Delete TryStatement(3683)", "Delete Block(3684)", "Delete MethodDeclaration(3685)", "Delete TagElement: @inheritDoc(3686)", "Delete TextElement:  (3687)", "Delete TagElement(3688)", "Delete Javadoc(3689)", "Delete Modifier: public(3690)", "Delete SimpleName: Object(3691)", "Delete SimpleType: Object(3692)", "Delete SimpleName: visit(3693)", "Delete SimpleName: ASTNumberLiteral(3694)", "Delete SimpleType: ASTNumberLiteral(3695)", "Delete SimpleName: node(3696)", "Delete SingleVariableDeclaration(3697)", "Delete SimpleName: Object(3698)", "Delete SimpleType: Object(3699)", "Delete SimpleName: data(3700)", "Delete SingleVariableDeclaration(3701)", "Delete SimpleName: data(3702)", "Delete NullLiteral(3703)", "Delete InfixExpression: !=(3704)", "Delete SimpleName: node(3705)", "Delete SimpleName: isInteger(3706)", "Delete MethodInvocation(3707)", "Delete InfixExpression: &&(3708)", "Delete SimpleName: getAttribute(3709)", "Delete SimpleName: data(3710)", "Delete SimpleName: node(3711)", "Delete SimpleName: getLiteral(3712)", "Delete MethodInvocation(3713)", "Delete SimpleName: node(3714)", "Delete MethodInvocation(3715)", "Delete ReturnStatement(3716)", "Delete Block(3717)", "Delete IfStatement(3718)", "Delete SimpleName: node(3719)", "Delete SimpleName: getLiteral(3720)", "Delete MethodInvocation(3721)", "Delete ReturnStatement(3722)", "Delete Block(3723)", "Delete MethodDeclaration(3724)", "Delete TagElement: @inheritDoc(3725)", "Delete TextElement:  (3726)", "Delete TagElement(3727)", "Delete Javadoc(3728)", "Delete Modifier: public(3729)", "Delete SimpleName: Object(3730)", "Delete SimpleType: Object(3731)", "Delete SimpleName: visit(3732)", "Delete SimpleName: ASTJexlScript(3733)", "Delete SimpleType: ASTJexlScript(3734)", "Delete SimpleName: node(3735)", "Delete SingleVariableDeclaration(3736)", "Delete SimpleName: Object(3737)", "Delete SimpleType: Object(3738)", "Delete SimpleName: data(3739)", "Delete SingleVariableDeclaration(3740)", "Delete PrimitiveType: int(3741)", "Delete SimpleName: numChildren(3742)", "Delete SimpleName: node(3743)", "Delete SimpleName: jjtGetNumChildren(3744)", "Delete MethodInvocation(3745)", "Delete VariableDeclarationFragment(3746)", "Delete VariableDeclarationStatement(3747)", "Delete SimpleName: Object(3748)", "Delete SimpleType: Object(3749)", "Delete SimpleName: result(3750)", "Delete NullLiteral(3751)", "Delete VariableDeclarationFragment(3752)", "Delete VariableDeclarationStatement(3753)", "Delete PrimitiveType: int(3754)", "Delete SimpleName: i(3755)", "Delete NumberLiteral: 0(3756)", "Delete VariableDeclarationFragment(3757)", "Delete VariableDeclarationExpression(3758)", "Delete SimpleName: i(3759)", "Delete SimpleName: numChildren(3760)", "Delete InfixExpression: <(3761)", "Delete SimpleName: i(3762)", "Delete PostfixExpression: ++(3763)", "Delete SimpleName: JexlNode(3764)", "Delete SimpleType: JexlNode(3765)", "Delete SimpleName: child(3766)", "Delete SimpleName: node(3767)", "Delete SimpleName: jjtGetChild(3768)", "Delete SimpleName: i(3769)", "Delete MethodInvocation(3770)", "Delete VariableDeclarationFragment(3771)", "Delete VariableDeclarationStatement(3772)", "Delete SimpleName: result(3773)", "Delete SimpleName: child(3774)", "Delete SimpleName: jjtAccept(3775)", "Delete ThisExpression(3776)", "Delete SimpleName: data(3777)", "Delete MethodInvocation(3778)", "Delete Assignment: =(3779)", "Delete ExpressionStatement(3780)", "Delete Block(3781)", "Delete ForStatement(3782)", "Delete SimpleName: result(3783)", "Delete ReturnStatement(3784)", "Delete Block(3785)", "Delete MethodDeclaration(3786)", "Delete TagElement: @inheritDoc(3787)", "Delete TextElement:  (3788)", "Delete TagElement(3789)", "Delete Javadoc(3790)", "Delete Modifier: public(3791)", "Delete SimpleName: Object(3792)", "Delete SimpleType: Object(3793)", "Delete SimpleName: visit(3794)", "Delete SimpleName: ASTLENode(3795)", "Delete SimpleType: ASTLENode(3796)", "Delete SimpleName: node(3797)", "Delete SingleVariableDeclaration(3798)", "Delete SimpleName: Object(3799)", "Delete SimpleType: Object(3800)", "Delete SimpleName: data(3801)", "Delete SingleVariableDeclaration(3802)", "Delete SimpleName: Object(3803)", "Delete SimpleType: Object(3804)", "Delete SimpleName: left(3805)", "Delete SimpleName: node(3806)", "Delete SimpleName: jjtGetChild(3807)", "Delete NumberLiteral: 0(3808)", "Delete MethodInvocation(3809)", "Delete SimpleName: jjtAccept(3810)", "Delete ThisExpression(3811)", "Delete SimpleName: data(3812)", "Delete MethodInvocation(3813)", "Delete VariableDeclarationFragment(3814)", "Delete VariableDeclarationStatement(3815)", "Delete SimpleName: Object(3816)", "Delete SimpleType: Object(3817)", "Delete SimpleName: right(3818)", "Delete SimpleName: node(3819)", "Delete SimpleName: jjtGetChild(3820)", "Delete NumberLiteral: 1(3821)", "Delete MethodInvocation(3822)", "Delete SimpleName: jjtAccept(3823)", "Delete ThisExpression(3824)", "Delete SimpleName: data(3825)", "Delete MethodInvocation(3826)", "Delete VariableDeclarationFragment(3827)", "Delete VariableDeclarationStatement(3828)", "Delete SimpleName: arithmetic(3829)", "Delete SimpleName: lessThanOrEqual(3830)", "Delete SimpleName: left(3831)", "Delete SimpleName: right(3832)", "Delete MethodInvocation(3833)", "Delete QualifiedName: Boolean.TRUE(3834)", "Delete QualifiedName: Boolean.FALSE(3835)", "Delete ConditionalExpression(3836)", "Delete ReturnStatement(3837)", "Delete Block(3838)", "Delete SimpleName: ArithmeticException(3839)", "Delete SimpleType: ArithmeticException(3840)", "Delete SimpleName: xrt(3841)", "Delete SingleVariableDeclaration(3842)", "Delete SimpleName: JexlException(3843)", "Delete SimpleType: JexlException(3844)", "Delete SimpleName: node(3845)", "Delete StringLiteral: \"<= error\"(3846)", "Delete SimpleName: xrt(3847)", "Delete ClassInstanceCreation(3848)", "Delete ThrowStatement(3849)", "Delete Block(3850)", "Delete CatchClause(3851)", "Delete TryStatement(3852)", "Delete Block(3853)", "Delete MethodDeclaration(3854)", "Delete TagElement: @inheritDoc(3855)", "Delete TextElement:  (3856)", "Delete TagElement(3857)", "Delete Javadoc(3858)", "Delete Modifier: public(3859)", "Delete SimpleName: Object(3860)", "Delete SimpleType: Object(3861)", "Delete SimpleName: visit(3862)", "Delete SimpleName: ASTLTNode(3863)", "Delete SimpleType: ASTLTNode(3864)", "Delete SimpleName: node(3865)", "Delete SingleVariableDeclaration(3866)", "Delete SimpleName: Object(3867)", "Delete SimpleType: Object(3868)", "Delete SimpleName: data(3869)", "Delete SingleVariableDeclaration(3870)", "Delete SimpleName: Object(3871)", "Delete SimpleType: Object(3872)", "Delete SimpleName: left(3873)", "Delete SimpleName: node(3874)", "Delete SimpleName: jjtGetChild(3875)", "Delete NumberLiteral: 0(3876)", "Delete MethodInvocation(3877)", "Delete SimpleName: jjtAccept(3878)", "Delete ThisExpression(3879)", "Delete SimpleName: data(3880)", "Delete MethodInvocation(3881)", "Delete VariableDeclarationFragment(3882)", "Delete VariableDeclarationStatement(3883)", "Delete SimpleName: Object(3884)", "Delete SimpleType: Object(3885)", "Delete SimpleName: right(3886)", "Delete SimpleName: node(3887)", "Delete SimpleName: jjtGetChild(3888)", "Delete NumberLiteral: 1(3889)", "Delete MethodInvocation(3890)", "Delete SimpleName: jjtAccept(3891)", "Delete ThisExpression(3892)", "Delete SimpleName: data(3893)", "Delete MethodInvocation(3894)", "Delete VariableDeclarationFragment(3895)", "Delete VariableDeclarationStatement(3896)", "Delete SimpleName: arithmetic(3897)", "Delete SimpleName: lessThan(3898)", "Delete SimpleName: left(3899)", "Delete SimpleName: right(3900)", "Delete MethodInvocation(3901)", "Delete QualifiedName: Boolean.TRUE(3902)", "Delete QualifiedName: Boolean.FALSE(3903)", "Delete ConditionalExpression(3904)", "Delete ReturnStatement(3905)", "Delete Block(3906)", "Delete SimpleName: ArithmeticException(3907)", "Delete SimpleType: ArithmeticException(3908)", "Delete SimpleName: xrt(3909)", "Delete SingleVariableDeclaration(3910)", "Delete SimpleName: JexlException(3911)", "Delete SimpleType: JexlException(3912)", "Delete SimpleName: node(3913)", "Delete StringLiteral: \"< error\"(3914)", "Delete SimpleName: xrt(3915)", "Delete ClassInstanceCreation(3916)", "Delete ThrowStatement(3917)", "Delete Block(3918)", "Delete CatchClause(3919)", "Delete TryStatement(3920)", "Delete Block(3921)", "Delete MethodDeclaration(3922)", "Delete TagElement: @inheritDoc(3923)", "Delete TextElement:  (3924)", "Delete TagElement(3925)", "Delete Javadoc(3926)", "Delete Modifier: public(3927)", "Delete SimpleName: Object(3928)", "Delete SimpleType: Object(3929)", "Delete SimpleName: visit(3930)", "Delete SimpleName: ASTMapEntry(3931)", "Delete SimpleType: ASTMapEntry(3932)", "Delete SimpleName: node(3933)", "Delete SingleVariableDeclaration(3934)", "Delete SimpleName: Object(3935)", "Delete SimpleType: Object(3936)", "Delete SimpleName: data(3937)", "Delete SingleVariableDeclaration(3938)", "Delete SimpleName: Object(3939)", "Delete SimpleType: Object(3940)", "Delete SimpleName: key(3941)", "Delete SimpleName: node(3942)", "Delete SimpleName: jjtGetChild(3943)", "Delete NumberLiteral: 0(3944)", "Delete MethodInvocation(3945)", "Delete SimpleName: jjtAccept(3946)", "Delete ThisExpression(3947)", "Delete SimpleName: data(3948)", "Delete MethodInvocation(3949)", "Delete VariableDeclarationFragment(3950)", "Delete VariableDeclarationStatement(3951)", "Delete SimpleName: Object(3952)", "Delete SimpleType: Object(3953)", "Delete SimpleName: value(3954)", "Delete SimpleName: node(3955)", "Delete SimpleName: jjtGetChild(3956)", "Delete NumberLiteral: 1(3957)", "Delete MethodInvocation(3958)", "Delete SimpleName: jjtAccept(3959)", "Delete ThisExpression(3960)", "Delete SimpleName: data(3961)", "Delete MethodInvocation(3962)", "Delete VariableDeclarationFragment(3963)", "Delete VariableDeclarationStatement(3964)", "Delete SimpleName: Object(3965)", "Delete SimpleType: Object(3966)", "Delete Dimension(3967)", "Delete ArrayType: Object[](3968)", "Delete SimpleName: key(3969)", "Delete SimpleName: value(3970)", "Delete ArrayInitializer(3971)", "Delete ArrayCreation(3972)", "Delete ReturnStatement(3973)", "Delete Block(3974)", "Delete MethodDeclaration(3975)", "Delete TagElement: @inheritDoc(3976)", "Delete TextElement:  (3977)", "Delete TagElement(3978)", "Delete Javadoc(3979)", "Delete Modifier: public(3980)", "Delete SimpleName: Object(3981)", "Delete SimpleType: Object(3982)", "Delete SimpleName: visit(3983)", "Delete SimpleName: ASTMapLiteral(3984)", "Delete SimpleType: ASTMapLiteral(3985)", "Delete SimpleName: node(3986)", "Delete SingleVariableDeclaration(3987)", "Delete SimpleName: Object(3988)", "Delete SimpleType: Object(3989)", "Delete SimpleName: data(3990)", "Delete SingleVariableDeclaration(3991)", "Delete PrimitiveType: int(3992)", "Delete SimpleName: childCount(3993)", "Delete SimpleName: node(3994)", "Delete SimpleName: jjtGetNumChildren(3995)", "Delete MethodInvocation(3996)", "Delete VariableDeclarationFragment(3997)", "Delete VariableDeclarationStatement(3998)", "Delete SimpleName: Map(3999)", "Delete SimpleType: Map(4000)", "Delete SimpleName: Object(4001)", "Delete SimpleType: Object(4002)", "Delete SimpleName: Object(4003)", "Delete SimpleType: Object(4004)", "Delete ParameterizedType: Map<Object,Object>(4005)", "Delete SimpleName: map(4006)", "Delete SimpleName: HashMap(4007)", "Delete SimpleType: HashMap(4008)", "Delete SimpleName: Object(4009)", "Delete SimpleType: Object(4010)", "Delete SimpleName: Object(4011)", "Delete SimpleType: Object(4012)", "Delete ParameterizedType: HashMap<Object,Object>(4013)", "Delete ClassInstanceCreation(4014)", "Delete VariableDeclarationFragment(4015)", "Delete VariableDeclarationStatement(4016)", "Delete PrimitiveType: int(4017)", "Delete SimpleName: i(4018)", "Delete NumberLiteral: 0(4019)", "Delete VariableDeclarationFragment(4020)", "Delete VariableDeclarationExpression(4021)", "Delete SimpleName: i(4022)", "Delete SimpleName: childCount(4023)", "Delete InfixExpression: <(4024)", "Delete SimpleName: i(4025)", "Delete PostfixExpression: ++(4026)", "Delete SimpleName: Object(4027)", "Delete SimpleType: Object(4028)", "Delete Dimension(4029)", "Delete ArrayType: Object[](4030)", "Delete SimpleName: entry(4031)", "Delete SimpleName: Object(4032)", "Delete SimpleType: Object(4033)", "Delete Dimension(4034)", "Delete ArrayType: Object[](4035)", "Delete SimpleName: node(4036)", "Delete SimpleName: jjtGetChild(4037)", "Delete SimpleName: i(4038)", "Delete MethodInvocation(4039)", "Delete ParenthesizedExpression(4040)", "Delete SimpleName: jjtAccept(4041)", "Delete ThisExpression(4042)", "Delete SimpleName: data(4043)", "Delete MethodInvocation(4044)", "Delete CastExpression(4045)", "Delete VariableDeclarationFragment(4046)", "Delete VariableDeclarationStatement(4047)", "Delete SimpleName: map(4048)", "Delete SimpleName: put(4049)", "Delete SimpleName: entry(4050)", "Delete NumberLiteral: 0(4051)", "Delete ArrayAccess(4052)", "Delete SimpleName: entry(4053)", "Delete NumberLiteral: 1(4054)", "Delete ArrayAccess(4055)", "Delete MethodInvocation(4056)", "Delete ExpressionStatement(4057)", "Delete Block(4058)", "Delete ForStatement(4059)", "Delete SimpleName: map(4060)", "Delete ReturnStatement(4061)", "Delete Block(4062)", "Delete MethodDeclaration(4063)", "Delete TextElement: Calls a method (or function).(4064)", "Delete TextElement: <p>(4065)", "Delete TextElement: Method resolution is a follows:(4066)", "Delete TextElement: 1 - attempt to find a method in the bean passed as parameter;(4067)", "Delete TextElement: 2 - if this fails, narrow the arguments and try again(4068)", "Delete TextElement: 3 - if this still fails, seeks a Script or JexlMethod as a property of that bean.(4069)", "Delete TextElement: </p>(4070)", "Delete TagElement(4071)", "Delete SimpleName: node(4072)", "Delete TextElement:  the method node(4073)", "Delete TagElement: @param(4074)", "Delete SimpleName: bean(4075)", "Delete TextElement:  the bean this method should be invoked upon(4076)", "Delete TagElement: @param(4077)", "Delete SimpleName: methodNode(4078)", "Delete TextElement:  the node carrying the method name(4079)", "Delete TagElement: @param(4080)", "Delete SimpleName: argb(4081)", "Delete TextElement:  the first argument index, child of the method node(4082)", "Delete TagElement: @param(4083)", "Delete TextElement:  the result of the method invocation(4084)", "Delete TagElement: @return(4085)", "Delete Javadoc(4086)", "Delete Modifier: private(4087)", "Delete SimpleName: Object(4088)", "Delete SimpleType: Object(4089)", "Delete SimpleName: call(4090)", "Delete SimpleName: JexlNode(4091)", "Delete SimpleType: JexlNode(4092)", "Delete SimpleName: node(4093)", "Delete SingleVariableDeclaration(4094)", "Delete SimpleName: Object(4095)", "Delete SimpleType: Object(4096)", "Delete SimpleName: bean(4097)", "Delete SingleVariableDeclaration(4098)", "Delete SimpleName: ASTIdentifier(4099)", "Delete SimpleType: ASTIdentifier(4100)", "Delete SimpleName: methodNode(4101)", "Delete SingleVariableDeclaration(4102)", "Delete PrimitiveType: int(4103)", "Delete SimpleName: argb(4104)", "Delete SingleVariableDeclaration(4105)", "Delete SimpleName: isCancelled(4106)", "Delete MethodInvocation(4107)", "Delete QualifiedName: JexlException.Cancel(4108)", "Delete SimpleType: JexlException.Cancel(4109)", "Delete SimpleName: node(4110)", "Delete ClassInstanceCreation(4111)", "Delete ThrowStatement(4112)", "Delete Block(4113)", "Delete IfStatement(4114)", "Delete SimpleName: String(4115)", "Delete SimpleType: String(4116)", "Delete SimpleName: methodName(4117)", "Delete QualifiedName: methodNode.image(4118)", "Delete VariableDeclarationFragment(4119)", "Delete VariableDeclarationStatement(4120)", "Delete PrimitiveType: int(4121)", "Delete SimpleName: argc(4122)", "Delete SimpleName: node(4123)", "Delete SimpleName: jjtGetNumChildren(4124)", "Delete MethodInvocation(4125)", "Delete SimpleName: argb(4126)", "Delete InfixExpression: -(4127)", "Delete VariableDeclarationFragment(4128)", "Delete VariableDeclarationStatement(4129)", "Delete SimpleName: Object(4130)", "Delete SimpleType: Object(4131)", "Delete Dimension(4132)", "Delete ArrayType: Object[](4133)", "Delete SimpleName: argv(4134)", "Delete SimpleName: Object(4135)", "Delete SimpleType: Object(4136)", "Delete Dimension(4137)", "Delete ArrayType: Object[](4138)", "Delete SimpleName: argc(4139)", "Delete ArrayCreation(4140)", "Delete VariableDeclarationFragment(4141)", "Delete VariableDeclarationStatement(4142)", "Delete PrimitiveType: int(4143)", "Delete SimpleName: i(4144)", "Delete NumberLiteral: 0(4145)", "Delete VariableDeclarationFragment(4146)", "Delete VariableDeclarationExpression(4147)", "Delete SimpleName: i(4148)", "Delete SimpleName: argc(4149)", "Delete InfixExpression: <(4150)", "Delete SimpleName: i(4151)", "Delete PostfixExpression: ++(4152)", "Delete SimpleName: argv(4153)", "Delete SimpleName: i(4154)", "Delete ArrayAccess(4155)", "Delete SimpleName: node(4156)", "Delete SimpleName: jjtGetChild(4157)", "Delete SimpleName: i(4158)", "Delete SimpleName: argb(4159)", "Delete InfixExpression: +(4160)", "Delete MethodInvocation(4161)", "Delete SimpleName: jjtAccept(4162)", "Delete ThisExpression(4163)", "Delete NullLiteral(4164)", "Delete MethodInvocation(4165)", "Delete Assignment: =(4166)", "Delete ExpressionStatement(4167)", "Delete Block(4168)", "Delete ForStatement(4169)", "Delete SimpleName: JexlException(4170)", "Delete SimpleType: JexlException(4171)", "Delete SimpleName: xjexl(4172)", "Delete NullLiteral(4173)", "Delete VariableDeclarationFragment(4174)", "Delete VariableDeclarationStatement(4175)", "Delete SimpleName: cache(4176)", "Delete SimpleName: Object(4177)", "Delete SimpleType: Object(4178)", "Delete SimpleName: cached(4179)", "Delete SimpleName: node(4180)", "Delete SimpleName: jjtGetValue(4181)", "Delete MethodInvocation(4182)", "Delete VariableDeclarationFragment(4183)", "Delete VariableDeclarationStatement(4184)", "Delete SimpleName: cached(4185)", "Delete SimpleName: JexlMethod(4186)", "Delete SimpleType: JexlMethod(4187)", "Delete InstanceofExpression(4188)", "Delete SimpleName: JexlMethod(4189)", "Delete SimpleType: JexlMethod(4190)", "Delete SimpleName: me(4191)", "Delete SimpleName: JexlMethod(4192)", "Delete SimpleType: JexlMethod(4193)", "Delete SimpleName: cached(4194)", "Delete CastExpression(4195)", "Delete VariableDeclarationFragment(4196)", "Delete VariableDeclarationStatement(4197)", "Delete SimpleName: Object(4198)", "Delete SimpleType: Object(4199)", "Delete SimpleName: eval(4200)", "Delete SimpleName: me(4201)", "Delete SimpleName: tryInvoke(4202)", "Delete SimpleName: methodName(4203)", "Delete SimpleName: bean(4204)", "Delete SimpleName: argv(4205)", "Delete MethodInvocation(4206)", "Delete VariableDeclarationFragment(4207)", "Delete VariableDeclarationStatement(4208)", "Delete SimpleName: me(4209)", "Delete SimpleName: tryFailed(4210)", "Delete SimpleName: eval(4211)", "Delete MethodInvocation(4212)", "Delete PrefixExpression: !(4213)", "Delete SimpleName: eval(4214)", "Delete ReturnStatement(4215)", "Delete Block(4216)", "Delete IfStatement(4217)", "Delete Block(4218)", "Delete IfStatement(4219)", "Delete Block(4220)", "Delete IfStatement(4221)", "Delete PrimitiveType: boolean(4222)", "Delete SimpleName: cacheable(4223)", "Delete SimpleName: cache(4224)", "Delete VariableDeclarationFragment(4225)", "Delete VariableDeclarationStatement(4226)", "Delete SimpleName: JexlMethod(4227)", "Delete SimpleType: JexlMethod(4228)", "Delete SimpleName: vm(4229)", "Delete SimpleName: uberspect(4230)", "Delete SimpleName: getMethod(4231)", "Delete SimpleName: bean(4232)", "Delete SimpleName: methodName(4233)", "Delete SimpleName: argv(4234)", "Delete SimpleName: node(4235)", "Delete MethodInvocation(4236)", "Delete VariableDeclarationFragment(4237)", "Delete VariableDeclarationStatement(4238)", "Delete SimpleName: vm(4239)", "Delete NullLiteral(4240)", "Delete InfixExpression: ==(4241)", "Delete SimpleName: arithmetic(4242)", "Delete SimpleName: narrowArguments(4243)", "Delete SimpleName: argv(4244)", "Delete MethodInvocation(4245)", "Delete SimpleName: vm(4246)", "Delete SimpleName: uberspect(4247)", "Delete SimpleName: getMethod(4248)", "Delete SimpleName: bean(4249)", "Delete SimpleName: methodName(4250)", "Delete SimpleName: argv(4251)", "Delete SimpleName: node(4252)", "Delete MethodInvocation(4253)", "Delete Assignment: =(4254)", "Delete ExpressionStatement(4255)", "Delete Block(4256)", "Delete IfStatement(4257)", "Delete SimpleName: vm(4258)", "Delete NullLiteral(4259)", "Delete InfixExpression: ==(4260)", "Delete SimpleName: Object(4261)", "Delete SimpleType: Object(4262)", "Delete SimpleName: functor(4263)", "Delete NullLiteral(4264)", "Delete VariableDeclarationFragment(4265)", "Delete VariableDeclarationStatement(4266)", "Delete SimpleName: bean(4267)", "Delete SimpleName: context(4268)", "Delete InfixExpression: ==(4269)", "Delete PrimitiveType: int(4270)", "Delete SimpleName: register(4271)", "Delete SimpleName: methodNode(4272)", "Delete SimpleName: getRegister(4273)", "Delete MethodInvocation(4274)", "Delete VariableDeclarationFragment(4275)", "Delete VariableDeclarationStatement(4276)", "Delete SimpleName: register(4277)", "Delete NumberLiteral: 0(4278)", "Delete InfixExpression: >=(4279)", "Delete SimpleName: functor(4280)", "Delete SimpleName: registers(4281)", "Delete SimpleName: register(4282)", "Delete ArrayAccess(4283)", "Delete Assignment: =(4284)", "Delete ExpressionStatement(4285)", "Delete Block(4286)", "Delete SimpleName: functor(4287)", "Delete SimpleName: context(4288)", "Delete SimpleName: get(4289)", "Delete SimpleName: methodName(4290)", "Delete MethodInvocation(4291)", "Delete Assignment: =(4292)", "Delete ExpressionStatement(4293)", "Delete Block(4294)", "Delete IfStatement(4295)", "Delete Block(4296)", "Delete SimpleName: JexlPropertyGet(4297)", "Delete SimpleType: JexlPropertyGet(4298)", "Delete SimpleName: gfunctor(4299)", "Delete SimpleName: uberspect(4300)", "Delete SimpleName: getPropertyGet(4301)", "Delete SimpleName: bean(4302)", "Delete SimpleName: methodName(4303)", "Delete SimpleName: node(4304)", "Delete MethodInvocation(4305)", "Delete VariableDeclarationFragment(4306)", "Delete VariableDeclarationStatement(4307)", "Delete SimpleName: gfunctor(4308)", "Delete NullLiteral(4309)", "Delete InfixExpression: !=(4310)", "Delete SimpleName: functor(4311)", "Delete SimpleName: gfunctor(4312)", "Delete SimpleName: tryInvoke(4313)", "Delete SimpleName: bean(4314)", "Delete SimpleName: methodName(4315)", "Delete MethodInvocation(4316)", "Delete Assignment: =(4317)", "Delete ExpressionStatement(4318)", "Delete Block(4319)", "Delete IfStatement(4320)", "Delete Block(4321)", "Delete IfStatement(4322)", "Delete SimpleName: functor(4323)", "Delete SimpleName: Script(4324)", "Delete SimpleType: Script(4325)", "Delete InstanceofExpression(4326)", "Delete SimpleName: Script(4327)", "Delete SimpleType: Script(4328)", "Delete SimpleName: functor(4329)", "Delete CastExpression(4330)", "Delete ParenthesizedExpression(4331)", "Delete SimpleName: execute(4332)", "Delete SimpleName: context(4333)", "Delete QualifiedName: argv.length(4334)", "Delete NumberLiteral: 0(4335)", "Delete InfixExpression: >(4336)", "Delete SimpleName: argv(4337)", "Delete NullLiteral(4338)", "Delete ConditionalExpression(4339)", "Delete MethodInvocation(4340)", "Delete ReturnStatement(4341)", "Delete Block(4342)", "Delete SimpleName: functor(4343)", "Delete SimpleName: JexlMethod(4344)", "Delete SimpleType: JexlMethod(4345)", "Delete InstanceofExpression(4346)", "Delete SimpleName: vm(4347)", "Delete SimpleName: JexlMethod(4348)", "Delete SimpleType: JexlMethod(4349)", "Delete SimpleName: functor(4350)", "Delete CastExpression(4351)", "Delete Assignment: =(4352)", "Delete ExpressionStatement(4353)", "Delete SimpleName: cacheable(4354)", "Delete BooleanLiteral: false(4355)", "Delete Assignment: =(4356)", "Delete ExpressionStatement(4357)", "Delete Block(4358)", "Delete SimpleName: xjexl(4359)", "Delete QualifiedName: JexlException.Method(4360)", "Delete SimpleType: JexlException.Method(4361)", "Delete SimpleName: node(4362)", "Delete SimpleName: methodName(4363)", "Delete ClassInstanceCreation(4364)", "Delete Assignment: =(4365)", "Delete ExpressionStatement(4366)", "Delete Block(4367)", "Delete IfStatement(4368)", "Delete IfStatement(4369)", "Delete Block(4370)", "Delete IfStatement(4371)", "Delete Block(4372)", "Delete IfStatement(4373)", "Delete SimpleName: xjexl(4374)", "Delete NullLiteral(4375)", "Delete InfixExpression: ==(4376)", "Delete SimpleName: Object(4377)", "Delete SimpleType: Object(4378)", "Delete SimpleName: eval(4379)", "Delete SimpleName: vm(4380)", "Delete SimpleName: invoke(4381)", "Delete SimpleName: bean(4382)", "Delete SimpleName: argv(4383)", "Delete MethodInvocation(4384)", "Delete VariableDeclarationFragment(4385)", "Delete VariableDeclarationStatement(4386)", "Delete SimpleName: cacheable(4387)", "Delete SimpleName: vm(4388)", "Delete SimpleName: isCacheable(4389)", "Delete MethodInvocation(4390)", "Delete InfixExpression: &&(4391)", "Delete SimpleName: node(4392)", "Delete SimpleName: jjtSetValue(4393)", "Delete SimpleName: vm(4394)", "Delete MethodInvocation(4395)", "Delete ExpressionStatement(4396)", "Delete Block(4397)", "Delete IfStatement(4398)", "Delete SimpleName: eval(4399)", "Delete ReturnStatement(4400)", "Delete Block(4401)", "Delete IfStatement(4402)", "Delete Block(4403)", "Delete SimpleName: InvocationTargetException(4404)", "Delete SimpleType: InvocationTargetException(4405)", "Delete SimpleName: e(4406)", "Delete SingleVariableDeclaration(4407)", "Delete SimpleName: xjexl(4408)", "Delete SimpleName: JexlException(4409)", "Delete SimpleType: JexlException(4410)", "Delete SimpleName: node(4411)", "Delete StringLiteral: \"method invocation error\"(4412)", "Delete SimpleName: e(4413)", "Delete SimpleName: getCause(4414)", "Delete MethodInvocation(4415)", "Delete ClassInstanceCreation(4416)", "Delete Assignment: =(4417)", "Delete ExpressionStatement(4418)", "Delete Block(4419)", "Delete CatchClause(4420)", "Delete SimpleName: Exception(4421)", "Delete SimpleType: Exception(4422)", "Delete SimpleName: e(4423)", "Delete SingleVariableDeclaration(4424)", "Delete SimpleName: xjexl(4425)", "Delete SimpleName: JexlException(4426)", "Delete SimpleType: JexlException(4427)", "Delete SimpleName: node(4428)", "Delete StringLiteral: \"method error\"(4429)", "Delete SimpleName: e(4430)", "Delete ClassInstanceCreation(4431)", "Delete Assignment: =(4432)", "Delete ExpressionStatement(4433)", "Delete Block(4434)", "Delete CatchClause(4435)", "Delete TryStatement(4436)", "Delete SimpleName: invocationFailed(4437)", "Delete SimpleName: xjexl(4438)", "Delete MethodInvocation(4439)", "Delete ReturnStatement(4440)", "Delete Block(4441)", "Delete MethodDeclaration(4442)", "Delete TagElement: @inheritDoc(4443)", "Delete TextElement:  (4444)", "Delete TagElement(4445)", "Delete Javadoc(4446)", "Delete Modifier: public(4447)", "Delete SimpleName: Object(4448)", "Delete SimpleType: Object(4449)", "Delete SimpleName: visit(4450)", "Delete SimpleName: ASTMethodNode(4451)", "Delete SimpleType: ASTMethodNode(4452)", "Delete SimpleName: node(4453)", "Delete SingleVariableDeclaration(4454)", "Delete SimpleName: Object(4455)", "Delete SimpleType: Object(4456)", "Delete SimpleName: data(4457)", "Delete SingleVariableDeclaration(4458)", "Delete SimpleName: data(4459)", "Delete NullLiteral(4460)", "Delete InfixExpression: ==(4461)", "Delete SimpleName: node(4462)", "Delete SimpleName: jjtGetParent(4463)", "Delete MethodInvocation(4464)", "Delete SimpleName: jjtGetChild(4465)", "Delete NumberLiteral: 0(4466)", "Delete MethodInvocation(4467)", "Delete SimpleName: node(4468)", "Delete InfixExpression: ==(4469)", "Delete SimpleName: data(4470)", "Delete SimpleName: resolveNamespace(4471)", "Delete NullLiteral(4472)", "Delete SimpleName: node(4473)", "Delete MethodInvocation(4474)", "Delete Assignment: =(4475)", "Delete ExpressionStatement(4476)", "Delete SimpleName: data(4477)", "Delete NullLiteral(4478)", "Delete InfixExpression: ==(4479)", "Delete SimpleName: data(4480)", "Delete SimpleName: context(4481)", "Delete Assignment: =(4482)", "Delete ExpressionStatement(4483)", "Delete Block(4484)", "Delete IfStatement(4485)", "Delete Block(4486)", "Delete SimpleName: JexlException(4487)", "Delete SimpleType: JexlException(4488)", "Delete SimpleName: node(4489)", "Delete StringLiteral: \"attempting to call method on null\"(4490)", "Delete ClassInstanceCreation(4491)", "Delete ThrowStatement(4492)", "Delete Block(4493)", "Delete IfStatement(4494)", "Delete Block(4495)", "Delete IfStatement(4496)", "Delete SimpleName: ASTIdentifier(4497)", "Delete SimpleType: ASTIdentifier(4498)", "Delete SimpleName: methodNode(4499)", "Delete SimpleName: ASTIdentifier(4500)", "Delete SimpleType: ASTIdentifier(4501)", "Delete SimpleName: node(4502)", "Delete SimpleName: jjtGetChild(4503)", "Delete NumberLiteral: 0(4504)", "Delete MethodInvocation(4505)", "Delete CastExpression(4506)", "Delete VariableDeclarationFragment(4507)", "Delete VariableDeclarationStatement(4508)", "Delete SimpleName: call(4509)", "Delete SimpleName: node(4510)", "Delete SimpleName: data(4511)", "Delete SimpleName: methodNode(4512)", "Delete NumberLiteral: 1(4513)", "Delete MethodInvocation(4514)", "Delete ReturnStatement(4515)", "Delete Block(4516)", "Delete MethodDeclaration(4517)", "Delete TagElement: @inheritDoc(4518)", "Delete TextElement:  (4519)", "Delete TagElement(4520)", "Delete Javadoc(4521)", "Delete Modifier: public(4522)", "Delete SimpleName: Object(4523)", "Delete SimpleType: Object(4524)", "Delete SimpleName: visit(4525)", "Delete SimpleName: ASTFunctionNode(4526)", "Delete SimpleType: ASTFunctionNode(4527)", "Delete SimpleName: node(4528)", "Delete SingleVariableDeclaration(4529)", "Delete SimpleName: Object(4530)", "Delete SimpleType: Object(4531)", "Delete SimpleName: data(4532)", "Delete SingleVariableDeclaration(4533)", "Delete SimpleName: String(4534)", "Delete SimpleType: String(4535)", "Delete SimpleName: prefix(4536)", "Delete SimpleName: node(4537)", "Delete SimpleName: jjtGetChild(4538)", "Delete NumberLiteral: 0(4539)", "Delete MethodInvocation(4540)", "Delete SimpleName: image(4541)", "Delete FieldAccess(4542)", "Delete VariableDeclarationFragment(4543)", "Delete VariableDeclarationStatement(4544)", "Delete SimpleName: Object(4545)", "Delete SimpleType: Object(4546)", "Delete SimpleName: namespace(4547)", "Delete SimpleName: resolveNamespace(4548)", "Delete SimpleName: prefix(4549)", "Delete SimpleName: node(4550)", "Delete MethodInvocation(4551)", "Delete VariableDeclarationFragment(4552)", "Delete VariableDeclarationStatement(4553)", "Delete SimpleName: ASTIdentifier(4554)", "Delete SimpleType: ASTIdentifier(4555)", "Delete SimpleName: functionNode(4556)", "Delete SimpleName: ASTIdentifier(4557)", "Delete SimpleType: ASTIdentifier(4558)", "Delete SimpleName: node(4559)", "Delete SimpleName: jjtGetChild(4560)", "Delete NumberLiteral: 1(4561)", "Delete MethodInvocation(4562)", "Delete CastExpression(4563)", "Delete VariableDeclarationFragment(4564)", "Delete VariableDeclarationStatement(4565)", "Delete SimpleName: call(4566)", "Delete SimpleName: node(4567)", "Delete SimpleName: namespace(4568)", "Delete SimpleName: functionNode(4569)", "Delete NumberLiteral: 2(4570)", "Delete MethodInvocation(4571)", "Delete ReturnStatement(4572)", "Delete Block(4573)", "Delete MethodDeclaration(4574)", "Delete TagElement: @inheritDoc(4575)", "Delete TextElement:  (4576)", "Delete TagElement(4577)", "Delete Javadoc(4578)", "Delete Modifier: public(4579)", "Delete SimpleName: Object(4580)", "Delete SimpleType: Object(4581)", "Delete SimpleName: visit(4582)", "Delete SimpleName: ASTConstructorNode(4583)", "Delete SimpleType: ASTConstructorNode(4584)", "Delete SimpleName: node(4585)", "Delete SingleVariableDeclaration(4586)", "Delete SimpleName: Object(4587)", "Delete SimpleType: Object(4588)", "Delete SimpleName: data(4589)", "Delete SingleVariableDeclaration(4590)", "Delete SimpleName: isCancelled(4591)", "Delete MethodInvocation(4592)", "Delete QualifiedName: JexlException.Cancel(4593)", "Delete SimpleType: JexlException.Cancel(4594)", "Delete SimpleName: node(4595)", "Delete ClassInstanceCreation(4596)", "Delete ThrowStatement(4597)", "Delete Block(4598)", "Delete IfStatement(4599)", "Delete SimpleName: Object(4600)", "Delete SimpleType: Object(4601)", "Delete SimpleName: cobject(4602)", "Delete SimpleName: node(4603)", "Delete SimpleName: jjtGetChild(4604)", "Delete NumberLiteral: 0(4605)", "Delete MethodInvocation(4606)", "Delete SimpleName: jjtAccept(4607)", "Delete ThisExpression(4608)", "Delete SimpleName: data(4609)", "Delete MethodInvocation(4610)", "Delete VariableDeclarationFragment(4611)", "Delete VariableDeclarationStatement(4612)", "Delete PrimitiveType: int(4613)", "Delete SimpleName: argc(4614)", "Delete SimpleName: node(4615)", "Delete SimpleName: jjtGetNumChildren(4616)", "Delete MethodInvocation(4617)", "Delete NumberLiteral: 1(4618)", "Delete InfixExpression: -(4619)", "Delete VariableDeclarationFragment(4620)", "Delete VariableDeclarationStatement(4621)", "Delete SimpleName: Object(4622)", "Delete SimpleType: Object(4623)", "Delete Dimension(4624)", "Delete ArrayType: Object[](4625)", "Delete SimpleName: argv(4626)", "Delete SimpleName: Object(4627)", "Delete SimpleType: Object(4628)", "Delete Dimension(4629)", "Delete ArrayType: Object[](4630)", "Delete SimpleName: argc(4631)", "Delete ArrayCreation(4632)", "Delete VariableDeclarationFragment(4633)", "Delete VariableDeclarationStatement(4634)", "Delete PrimitiveType: int(4635)", "Delete SimpleName: i(4636)", "Delete NumberLiteral: 0(4637)", "Delete VariableDeclarationFragment(4638)", "Delete VariableDeclarationExpression(4639)", "Delete SimpleName: i(4640)", "Delete SimpleName: argc(4641)", "Delete InfixExpression: <(4642)", "Delete SimpleName: i(4643)", "Delete PostfixExpression: ++(4644)", "Delete SimpleName: argv(4645)", "Delete SimpleName: i(4646)", "Delete ArrayAccess(4647)", "Delete SimpleName: node(4648)", "Delete SimpleName: jjtGetChild(4649)", "Delete SimpleName: i(4650)", "Delete NumberLiteral: 1(4651)", "Delete InfixExpression: +(4652)", "Delete MethodInvocation(4653)", "Delete SimpleName: jjtAccept(4654)", "Delete ThisExpression(4655)", "Delete NullLiteral(4656)", "Delete MethodInvocation(4657)", "Delete Assignment: =(4658)", "Delete ExpressionStatement(4659)", "Delete Block(4660)", "Delete ForStatement(4661)", "Delete SimpleName: JexlException(4662)", "Delete SimpleType: JexlException(4663)", "Delete SimpleName: xjexl(4664)", "Delete NullLiteral(4665)", "Delete VariableDeclarationFragment(4666)", "Delete VariableDeclarationStatement(4667)", "Delete SimpleName: cache(4668)", "Delete SimpleName: Object(4669)", "Delete SimpleType: Object(4670)", "Delete SimpleName: cached(4671)", "Delete SimpleName: node(4672)", "Delete SimpleName: jjtGetValue(4673)", "Delete MethodInvocation(4674)", "Delete VariableDeclarationFragment(4675)", "Delete VariableDeclarationStatement(4676)", "Delete SimpleName: cached(4677)", "Delete SimpleName: JexlMethod(4678)", "Delete SimpleType: JexlMethod(4679)", "Delete InstanceofExpression(4680)", "Delete SimpleName: JexlMethod(4681)", "Delete SimpleType: JexlMethod(4682)", "Delete SimpleName: mctor(4683)", "Delete SimpleName: JexlMethod(4684)", "Delete SimpleType: JexlMethod(4685)", "Delete SimpleName: cached(4686)", "Delete CastExpression(4687)", "Delete VariableDeclarationFragment(4688)", "Delete VariableDeclarationStatement(4689)", "Delete SimpleName: Object(4690)", "Delete SimpleType: Object(4691)", "Delete SimpleName: eval(4692)", "Delete SimpleName: mctor(4693)", "Delete SimpleName: tryInvoke(4694)", "Delete NullLiteral(4695)", "Delete SimpleName: cobject(4696)", "Delete SimpleName: argv(4697)", "Delete MethodInvocation(4698)", "Delete VariableDeclarationFragment(4699)", "Delete VariableDeclarationStatement(4700)", "Delete SimpleName: mctor(4701)", "Delete SimpleName: tryFailed(4702)", "Delete SimpleName: eval(4703)", "Delete MethodInvocation(4704)", "Delete PrefixExpression: !(4705)", "Delete SimpleName: eval(4706)", "Delete ReturnStatement(4707)", "Delete Block(4708)", "Delete IfStatement(4709)", "Delete Block(4710)", "Delete IfStatement(4711)", "Delete Block(4712)", "Delete IfStatement(4713)", "Delete SimpleName: JexlMethod(4714)", "Delete SimpleType: JexlMethod(4715)", "Delete SimpleName: ctor(4716)", "Delete SimpleName: uberspect(4717)", "Delete SimpleName: getConstructorMethod(4718)", "Delete SimpleName: cobject(4719)", "Delete SimpleName: argv(4720)", "Delete SimpleName: node(4721)", "Delete MethodInvocation(4722)", "Delete VariableDeclarationFragment(4723)", "Delete VariableDeclarationStatement(4724)", "Delete SimpleName: ctor(4725)", "Delete NullLiteral(4726)", "Delete InfixExpression: ==(4727)", "Delete SimpleName: arithmetic(4728)", "Delete SimpleName: narrowArguments(4729)", "Delete SimpleName: argv(4730)", "Delete MethodInvocation(4731)", "Delete SimpleName: ctor(4732)", "Delete SimpleName: uberspect(4733)", "Delete SimpleName: getConstructorMethod(4734)", "Delete SimpleName: cobject(4735)", "Delete SimpleName: argv(4736)", "Delete SimpleName: node(4737)", "Delete MethodInvocation(4738)", "Delete Assignment: =(4739)", "Delete ExpressionStatement(4740)", "Delete Block(4741)", "Delete IfStatement(4742)", "Delete SimpleName: ctor(4743)", "Delete NullLiteral(4744)", "Delete InfixExpression: ==(4745)", "Delete SimpleName: xjexl(4746)", "Delete QualifiedName: JexlException.Method(4747)", "Delete SimpleType: JexlException.Method(4748)", "Delete SimpleName: node(4749)", "Delete SimpleName: cobject(4750)", "Delete SimpleName: toString(4751)", "Delete MethodInvocation(4752)", "Delete ClassInstanceCreation(4753)", "Delete Assignment: =(4754)", "Delete ExpressionStatement(4755)", "Delete Block(4756)", "Delete IfStatement(4757)", "Delete Block(4758)", "Delete IfStatement(4759)", "Delete SimpleName: xjexl(4760)", "Delete NullLiteral(4761)", "Delete InfixExpression: ==(4762)", "Delete SimpleName: Object(4763)", "Delete SimpleType: Object(4764)", "Delete SimpleName: instance(4765)", "Delete SimpleName: ctor(4766)", "Delete SimpleName: invoke(4767)", "Delete SimpleName: cobject(4768)", "Delete SimpleName: argv(4769)", "Delete MethodInvocation(4770)", "Delete VariableDeclarationFragment(4771)", "Delete VariableDeclarationStatement(4772)", "Delete SimpleName: cache(4773)", "Delete SimpleName: ctor(4774)", "Delete SimpleName: isCacheable(4775)", "Delete MethodInvocation(4776)", "Delete InfixExpression: &&(4777)", "Delete SimpleName: node(4778)", "Delete SimpleName: jjtSetValue(4779)", "Delete SimpleName: ctor(4780)", "Delete MethodInvocation(4781)", "Delete ExpressionStatement(4782)", "Delete Block(4783)", "Delete IfStatement(4784)", "Delete SimpleName: instance(4785)", "Delete ReturnStatement(4786)", "Delete Block(4787)", "Delete IfStatement(4788)", "Delete Block(4789)", "Delete SimpleName: InvocationTargetException(4790)", "Delete SimpleType: InvocationTargetException(4791)", "Delete SimpleName: e(4792)", "Delete SingleVariableDeclaration(4793)", "Delete SimpleName: xjexl(4794)", "Delete SimpleName: JexlException(4795)", "Delete SimpleType: JexlException(4796)", "Delete SimpleName: node(4797)", "Delete StringLiteral: \"constructor invocation error\"(4798)", "Delete SimpleName: e(4799)", "Delete SimpleName: getCause(4800)", "Delete MethodInvocation(4801)", "Delete ClassInstanceCreation(4802)", "Delete Assignment: =(4803)", "Delete ExpressionStatement(4804)", "Delete Block(4805)", "Delete CatchClause(4806)", "Delete SimpleName: Exception(4807)", "Delete SimpleType: Exception(4808)", "Delete SimpleName: e(4809)", "Delete SingleVariableDeclaration(4810)", "Delete SimpleName: xjexl(4811)", "Delete SimpleName: JexlException(4812)", "Delete SimpleType: JexlException(4813)", "Delete SimpleName: node(4814)", "Delete StringLiteral: \"constructor error\"(4815)", "Delete SimpleName: e(4816)", "Delete ClassInstanceCreation(4817)", "Delete Assignment: =(4818)", "Delete ExpressionStatement(4819)", "Delete Block(4820)", "Delete CatchClause(4821)", "Delete TryStatement(4822)", "Delete SimpleName: invocationFailed(4823)", "Delete SimpleName: xjexl(4824)", "Delete MethodInvocation(4825)", "Delete ReturnStatement(4826)", "Delete Block(4827)", "Delete MethodDeclaration(4828)", "Delete TagElement: @inheritDoc(4829)", "Delete TextElement:  (4830)", "Delete TagElement(4831)", "Delete Javadoc(4832)", "Delete Modifier: public(4833)", "Delete SimpleName: Object(4834)", "Delete SimpleType: Object(4835)", "Delete SimpleName: visit(4836)", "Delete SimpleName: ASTModNode(4837)", "Delete SimpleType: ASTModNode(4838)", "Delete SimpleName: node(4839)", "Delete SingleVariableDeclaration(4840)", "Delete SimpleName: Object(4841)", "Delete SimpleType: Object(4842)", "Delete SimpleName: data(4843)", "Delete SingleVariableDeclaration(4844)", "Delete SimpleName: Object(4845)", "Delete SimpleType: Object(4846)", "Delete SimpleName: left(4847)", "Delete SimpleName: node(4848)", "Delete SimpleName: jjtGetChild(4849)", "Delete NumberLiteral: 0(4850)", "Delete MethodInvocation(4851)", "Delete SimpleName: jjtAccept(4852)", "Delete ThisExpression(4853)", "Delete SimpleName: data(4854)", "Delete MethodInvocation(4855)", "Delete VariableDeclarationFragment(4856)", "Delete VariableDeclarationStatement(4857)", "Delete SimpleName: Object(4858)", "Delete SimpleType: Object(4859)", "Delete SimpleName: right(4860)", "Delete SimpleName: node(4861)", "Delete SimpleName: jjtGetChild(4862)", "Delete NumberLiteral: 1(4863)", "Delete MethodInvocation(4864)", "Delete SimpleName: jjtAccept(4865)", "Delete ThisExpression(4866)", "Delete SimpleName: data(4867)", "Delete MethodInvocation(4868)", "Delete VariableDeclarationFragment(4869)", "Delete VariableDeclarationStatement(4870)", "Delete SimpleName: arithmetic(4871)", "Delete SimpleName: mod(4872)", "Delete SimpleName: left(4873)", "Delete SimpleName: right(4874)", "Delete MethodInvocation(4875)", "Delete ReturnStatement(4876)", "Delete Block(4877)", "Delete SimpleName: ArithmeticException(4878)", "Delete SimpleType: ArithmeticException(4879)", "Delete SimpleName: xrt(4880)", "Delete SingleVariableDeclaration(4881)", "Delete SimpleName: strict(4882)", "Delete PrefixExpression: !(4883)", "Delete SimpleName: Double(4884)", "Delete SimpleType: Double(4885)", "Delete NumberLiteral: 0.0(4886)", "Delete ClassInstanceCreation(4887)", "Delete ReturnStatement(4888)", "Delete Block(4889)", "Delete IfStatement(4890)", "Delete SimpleName: JexlNode(4891)", "Delete SimpleType: JexlNode(4892)", "Delete SimpleName: xnode(4893)", "Delete SimpleName: findNullOperand(4894)", "Delete SimpleName: xrt(4895)", "Delete SimpleName: node(4896)", "Delete SimpleName: left(4897)", "Delete SimpleName: right(4898)", "Delete MethodInvocation(4899)", "Delete VariableDeclarationFragment(4900)", "Delete VariableDeclarationStatement(4901)", "Delete SimpleName: JexlException(4902)", "Delete SimpleType: JexlException(4903)", "Delete SimpleName: xnode(4904)", "Delete StringLiteral: \"% error\"(4905)", "Delete SimpleName: xrt(4906)", "Delete ClassInstanceCreation(4907)", "Delete ThrowStatement(4908)", "Delete Block(4909)", "Delete CatchClause(4910)", "Delete TryStatement(4911)", "Delete Block(4912)", "Delete MethodDeclaration(4913)", "Delete TagElement: @inheritDoc(4914)", "Delete TextElement:  (4915)", "Delete TagElement(4916)", "Delete Javadoc(4917)", "Delete Modifier: public(4918)", "Delete SimpleName: Object(4919)", "Delete SimpleType: Object(4920)", "Delete SimpleName: visit(4921)", "Delete SimpleName: ASTMulNode(4922)", "Delete SimpleType: ASTMulNode(4923)", "Delete SimpleName: node(4924)", "Delete SingleVariableDeclaration(4925)", "Delete SimpleName: Object(4926)", "Delete SimpleType: Object(4927)", "Delete SimpleName: data(4928)", "Delete SingleVariableDeclaration(4929)", "Delete SimpleName: Object(4930)", "Delete SimpleType: Object(4931)", "Delete SimpleName: left(4932)", "Delete SimpleName: node(4933)", "Delete SimpleName: jjtGetChild(4934)", "Delete NumberLiteral: 0(4935)", "Delete MethodInvocation(4936)", "Delete SimpleName: jjtAccept(4937)", "Delete ThisExpression(4938)", "Delete SimpleName: data(4939)", "Delete MethodInvocation(4940)", "Delete VariableDeclarationFragment(4941)", "Delete VariableDeclarationStatement(4942)", "Delete SimpleName: Object(4943)", "Delete SimpleType: Object(4944)", "Delete SimpleName: right(4945)", "Delete SimpleName: node(4946)", "Delete SimpleName: jjtGetChild(4947)", "Delete NumberLiteral: 1(4948)", "Delete MethodInvocation(4949)", "Delete SimpleName: jjtAccept(4950)", "Delete ThisExpression(4951)", "Delete SimpleName: data(4952)", "Delete MethodInvocation(4953)", "Delete VariableDeclarationFragment(4954)", "Delete VariableDeclarationStatement(4955)", "Delete SimpleName: arithmetic(4956)", "Delete SimpleName: multiply(4957)", "Delete SimpleName: left(4958)", "Delete SimpleName: right(4959)", "Delete MethodInvocation(4960)", "Delete ReturnStatement(4961)", "Delete Block(4962)", "Delete SimpleName: ArithmeticException(4963)", "Delete SimpleType: ArithmeticException(4964)", "Delete SimpleName: xrt(4965)", "Delete SingleVariableDeclaration(4966)", "Delete SimpleName: JexlNode(4967)", "Delete SimpleType: JexlNode(4968)", "Delete SimpleName: xnode(4969)", "Delete SimpleName: findNullOperand(4970)", "Delete SimpleName: xrt(4971)", "Delete SimpleName: node(4972)", "Delete SimpleName: left(4973)", "Delete SimpleName: right(4974)", "Delete MethodInvocation(4975)", "Delete VariableDeclarationFragment(4976)", "Delete VariableDeclarationStatement(4977)", "Delete SimpleName: JexlException(4978)", "Delete SimpleType: JexlException(4979)", "Delete SimpleName: xnode(4980)", "Delete StringLiteral: \"* error\"(4981)", "Delete SimpleName: xrt(4982)", "Delete ClassInstanceCreation(4983)", "Delete ThrowStatement(4984)", "Delete Block(4985)", "Delete CatchClause(4986)", "Delete TryStatement(4987)", "Delete Block(4988)", "Delete MethodDeclaration(4989)", "Delete TagElement: @inheritDoc(4990)", "Delete TextElement:  (4991)", "Delete TagElement(4992)", "Delete Javadoc(4993)", "Delete Modifier: public(4994)", "Delete SimpleName: Object(4995)", "Delete SimpleType: Object(4996)", "Delete SimpleName: visit(4997)", "Delete SimpleName: ASTNENode(4998)", "Delete SimpleType: ASTNENode(4999)", "Delete SimpleName: node(5000)", "Delete SingleVariableDeclaration(5001)", "Delete SimpleName: Object(5002)", "Delete SimpleType: Object(5003)", "Delete SimpleName: data(5004)", "Delete SingleVariableDeclaration(5005)", "Delete SimpleName: Object(5006)", "Delete SimpleType: Object(5007)", "Delete SimpleName: left(5008)", "Delete SimpleName: node(5009)", "Delete SimpleName: jjtGetChild(5010)", "Delete NumberLiteral: 0(5011)", "Delete MethodInvocation(5012)", "Delete SimpleName: jjtAccept(5013)", "Delete ThisExpression(5014)", "Delete SimpleName: data(5015)", "Delete MethodInvocation(5016)", "Delete VariableDeclarationFragment(5017)", "Delete VariableDeclarationStatement(5018)", "Delete SimpleName: Object(5019)", "Delete SimpleType: Object(5020)", "Delete SimpleName: right(5021)", "Delete SimpleName: node(5022)", "Delete SimpleName: jjtGetChild(5023)", "Delete NumberLiteral: 1(5024)", "Delete MethodInvocation(5025)", "Delete SimpleName: jjtAccept(5026)", "Delete ThisExpression(5027)", "Delete SimpleName: data(5028)", "Delete MethodInvocation(5029)", "Delete VariableDeclarationFragment(5030)", "Delete VariableDeclarationStatement(5031)", "Delete SimpleName: arithmetic(5032)", "Delete SimpleName: equals(5033)", "Delete SimpleName: left(5034)", "Delete SimpleName: right(5035)", "Delete MethodInvocation(5036)", "Delete QualifiedName: Boolean.FALSE(5037)", "Delete QualifiedName: Boolean.TRUE(5038)", "Delete ConditionalExpression(5039)", "Delete ReturnStatement(5040)", "Delete Block(5041)", "Delete SimpleName: ArithmeticException(5042)", "Delete SimpleType: ArithmeticException(5043)", "Delete SimpleName: xrt(5044)", "Delete SingleVariableDeclaration(5045)", "Delete SimpleName: JexlNode(5046)", "Delete SimpleType: JexlNode(5047)", "Delete SimpleName: xnode(5048)", "Delete SimpleName: findNullOperand(5049)", "Delete SimpleName: xrt(5050)", "Delete SimpleName: node(5051)", "Delete SimpleName: left(5052)", "Delete SimpleName: right(5053)", "Delete MethodInvocation(5054)", "Delete VariableDeclarationFragment(5055)", "Delete VariableDeclarationStatement(5056)", "Delete SimpleName: JexlException(5057)", "Delete SimpleType: JexlException(5058)", "Delete SimpleName: xnode(5059)", "Delete StringLiteral: \"!= error\"(5060)", "Delete SimpleName: xrt(5061)", "Delete ClassInstanceCreation(5062)", "Delete ThrowStatement(5063)", "Delete Block(5064)", "Delete CatchClause(5065)", "Delete TryStatement(5066)", "Delete Block(5067)", "Delete MethodDeclaration(5068)", "Delete TagElement: @inheritDoc(5069)", "Delete TextElement:  (5070)", "Delete TagElement(5071)", "Delete Javadoc(5072)", "Delete Modifier: public(5073)", "Delete SimpleName: Object(5074)", "Delete SimpleType: Object(5075)", "Delete SimpleName: visit(5076)", "Delete SimpleName: ASTNRNode(5077)", "Delete SimpleType: ASTNRNode(5078)", "Delete SimpleName: node(5079)", "Delete SingleVariableDeclaration(5080)", "Delete SimpleName: Object(5081)", "Delete SimpleType: Object(5082)", "Delete SimpleName: data(5083)", "Delete SingleVariableDeclaration(5084)", "Delete SimpleName: Object(5085)", "Delete SimpleType: Object(5086)", "Delete SimpleName: left(5087)", "Delete SimpleName: node(5088)", "Delete SimpleName: jjtGetChild(5089)", "Delete NumberLiteral: 0(5090)", "Delete MethodInvocation(5091)", "Delete SimpleName: jjtAccept(5092)", "Delete ThisExpression(5093)", "Delete SimpleName: data(5094)", "Delete MethodInvocation(5095)", "Delete VariableDeclarationFragment(5096)", "Delete VariableDeclarationStatement(5097)", "Delete SimpleName: Object(5098)", "Delete SimpleType: Object(5099)", "Delete SimpleName: right(5100)", "Delete SimpleName: node(5101)", "Delete SimpleName: jjtGetChild(5102)", "Delete NumberLiteral: 1(5103)", "Delete MethodInvocation(5104)", "Delete SimpleName: jjtAccept(5105)", "Delete ThisExpression(5106)", "Delete SimpleName: data(5107)", "Delete MethodInvocation(5108)", "Delete VariableDeclarationFragment(5109)", "Delete VariableDeclarationStatement(5110)", "Delete SimpleName: right(5111)", "Delete QualifiedName: java.util.regex.Pattern(5112)", "Delete SimpleType: java.util.regex.Pattern(5113)", "Delete InstanceofExpression(5114)", "Delete SimpleName: right(5115)", "Delete SimpleName: String(5116)", "Delete SimpleType: String(5117)", "Delete InstanceofExpression(5118)", "Delete InfixExpression: ||(5119)", "Delete SimpleName: arithmetic(5120)", "Delete SimpleName: matches(5121)", "Delete SimpleName: left(5122)", "Delete SimpleName: right(5123)", "Delete MethodInvocation(5124)", "Delete QualifiedName: Boolean.FALSE(5125)", "Delete QualifiedName: Boolean.TRUE(5126)", "Delete ConditionalExpression(5127)", "Delete ReturnStatement(5128)", "Delete Block(5129)", "Delete IfStatement(5130)", "Delete SimpleName: right(5131)", "Delete SimpleName: Set(5132)", "Delete SimpleType: Set(5133)", "Delete WildcardType: ?(5134)", "Delete ParameterizedType: Set<?>(5135)", "Delete InstanceofExpression(5136)", "Delete SimpleName: Set(5137)", "Delete SimpleType: Set(5138)", "Delete WildcardType: ?(5139)", "Delete ParameterizedType: Set<?>(5140)", "Delete SimpleName: right(5141)", "Delete CastExpression(5142)", "Delete ParenthesizedExpression(5143)", "Delete SimpleName: contains(5144)", "Delete SimpleName: left(5145)", "Delete MethodInvocation(5146)", "Delete QualifiedName: Boolean.FALSE(5147)", "Delete QualifiedName: Boolean.TRUE(5148)", "Delete ConditionalExpression(5149)", "Delete ReturnStatement(5150)", "Delete Block(5151)", "Delete IfStatement(5152)", "Delete SimpleName: right(5153)", "Delete SimpleName: Map(5154)", "Delete SimpleType: Map(5155)", "Delete WildcardType: ?(5156)", "Delete WildcardType: ?(5157)", "Delete ParameterizedType: Map<?,?>(5158)", "Delete InstanceofExpression(5159)", "Delete SimpleName: Map(5160)", "Delete SimpleType: Map(5161)", "Delete WildcardType: ?(5162)", "Delete WildcardType: ?(5163)", "Delete ParameterizedType: Map<?,?>(5164)", "Delete SimpleName: right(5165)", "Delete CastExpression(5166)", "Delete ParenthesizedExpression(5167)", "Delete SimpleName: containsKey(5168)", "Delete SimpleName: left(5169)", "Delete MethodInvocation(5170)", "Delete QualifiedName: Boolean.FALSE(5171)", "Delete QualifiedName: Boolean.TRUE(5172)", "Delete ConditionalExpression(5173)", "Delete ReturnStatement(5174)", "Delete Block(5175)", "Delete IfStatement(5176)", "Delete SimpleName: right(5177)", "Delete SimpleName: Collection(5178)", "Delete SimpleType: Collection(5179)", "Delete WildcardType: ?(5180)", "Delete ParameterizedType: Collection<?>(5181)", "Delete InstanceofExpression(5182)", "Delete SimpleName: Collection(5183)", "Delete SimpleType: Collection(5184)", "Delete WildcardType: ?(5185)", "Delete ParameterizedType: Collection<?>(5186)", "Delete SimpleName: right(5187)", "Delete CastExpression(5188)", "Delete ParenthesizedExpression(5189)", "Delete SimpleName: contains(5190)", "Delete SimpleName: left(5191)", "Delete MethodInvocation(5192)", "Delete QualifiedName: Boolean.FALSE(5193)", "Delete QualifiedName: Boolean.TRUE(5194)", "Delete ConditionalExpression(5195)", "Delete ReturnStatement(5196)", "Delete Block(5197)", "Delete IfStatement(5198)", "Delete SimpleName: Object(5199)", "Delete SimpleType: Object(5200)", "Delete Dimension(5201)", "Delete ArrayType: Object[](5202)", "Delete SimpleName: argv(5203)", "Delete SimpleName: left(5204)", "Delete ArrayInitializer(5205)", "Delete VariableDeclarationFragment(5206)", "Delete VariableDeclarationStatement(5207)", "Delete SimpleName: JexlMethod(5208)", "Delete SimpleType: JexlMethod(5209)", "Delete SimpleName: vm(5210)", "Delete SimpleName: uberspect(5211)", "Delete SimpleName: getMethod(5212)", "Delete SimpleName: right(5213)", "Delete StringLiteral: \"contains\"(5214)", "Delete SimpleName: argv(5215)", "Delete SimpleName: node(5216)", "Delete MethodInvocation(5217)", "Delete VariableDeclarationFragment(5218)", "Delete VariableDeclarationStatement(5219)", "Delete SimpleName: vm(5220)", "Delete NullLiteral(5221)", "Delete InfixExpression: !=(5222)", "Delete SimpleName: arithmetic(5223)", "Delete SimpleName: toBoolean(5224)", "Delete SimpleName: vm(5225)", "Delete SimpleName: invoke(5226)", "Delete SimpleName: right(5227)", "Delete SimpleName: argv(5228)", "Delete MethodInvocation(5229)", "Delete MethodInvocation(5230)", "Delete QualifiedName: Boolean.FALSE(5231)", "Delete QualifiedName: Boolean.TRUE(5232)", "Delete ConditionalExpression(5233)", "Delete ReturnStatement(5234)", "Delete Block(5235)", "Delete SimpleName: arithmetic(5236)", "Delete SimpleName: narrowArguments(5237)", "Delete SimpleName: argv(5238)", "Delete MethodInvocation(5239)", "Delete SimpleName: vm(5240)", "Delete SimpleName: uberspect(5241)", "Delete SimpleName: getMethod(5242)", "Delete SimpleName: right(5243)", "Delete StringLiteral: \"contains\"(5244)", "Delete SimpleName: argv(5245)", "Delete SimpleName: node(5246)", "Delete MethodInvocation(5247)", "Delete Assignment: =(5248)", "Delete ExpressionStatement(5249)", "Delete SimpleName: vm(5250)", "Delete NullLiteral(5251)", "Delete InfixExpression: !=(5252)", "Delete SimpleName: arithmetic(5253)", "Delete SimpleName: toBoolean(5254)", "Delete SimpleName: vm(5255)", "Delete SimpleName: invoke(5256)", "Delete SimpleName: right(5257)", "Delete SimpleName: argv(5258)", "Delete MethodInvocation(5259)", "Delete MethodInvocation(5260)", "Delete QualifiedName: Boolean.FALSE(5261)", "Delete QualifiedName: Boolean.TRUE(5262)", "Delete ConditionalExpression(5263)", "Delete ReturnStatement(5264)", "Delete Block(5265)", "Delete IfStatement(5266)", "Delete Block(5267)", "Delete IfStatement(5268)", "Delete IfStatement(5269)", "Delete Block(5270)", "Delete SimpleName: InvocationTargetException(5271)", "Delete SimpleType: InvocationTargetException(5272)", "Delete SimpleName: e(5273)", "Delete SingleVariableDeclaration(5274)", "Delete SimpleName: JexlException(5275)", "Delete SimpleType: JexlException(5276)", "Delete SimpleName: node(5277)", "Delete StringLiteral: \"!~ invocation error\"(5278)", "Delete SimpleName: e(5279)", "Delete SimpleName: getCause(5280)", "Delete MethodInvocation(5281)", "Delete ClassInstanceCreation(5282)", "Delete ThrowStatement(5283)", "Delete Block(5284)", "Delete CatchClause(5285)", "Delete SimpleName: Exception(5286)", "Delete SimpleType: Exception(5287)", "Delete SimpleName: e(5288)", "Delete SingleVariableDeclaration(5289)", "Delete SimpleName: JexlException(5290)", "Delete SimpleType: JexlException(5291)", "Delete SimpleName: node(5292)", "Delete StringLiteral: \"!~ error\"(5293)", "Delete SimpleName: e(5294)", "Delete ClassInstanceCreation(5295)", "Delete ThrowStatement(5296)", "Delete Block(5297)", "Delete CatchClause(5298)", "Delete TryStatement(5299)", "Delete SimpleName: Iterator(5300)", "Delete SimpleType: Iterator(5301)", "Delete WildcardType: ?(5302)", "Delete ParameterizedType: Iterator<?>(5303)", "Delete SimpleName: it(5304)", "Delete SimpleName: uberspect(5305)", "Delete SimpleName: getIterator(5306)", "Delete SimpleName: right(5307)", "Delete SimpleName: node(5308)", "Delete SimpleName: jjtGetChild(5309)", "Delete NumberLiteral: 1(5310)", "Delete MethodInvocation(5311)", "Delete MethodInvocation(5312)", "Delete VariableDeclarationFragment(5313)", "Delete VariableDeclarationStatement(5314)", "Delete SimpleName: it(5315)", "Delete NullLiteral(5316)", "Delete InfixExpression: !=(5317)", "Delete SimpleName: it(5318)", "Delete SimpleName: hasNext(5319)", "Delete MethodInvocation(5320)", "Delete SimpleName: Object(5321)", "Delete SimpleType: Object(5322)", "Delete SimpleName: next(5323)", "Delete SimpleName: it(5324)", "Delete SimpleName: next(5325)", "Delete MethodInvocation(5326)", "Delete VariableDeclarationFragment(5327)", "Delete VariableDeclarationStatement(5328)", "Delete SimpleName: next(5329)", "Delete SimpleName: left(5330)", "Delete InfixExpression: ==(5331)", "Delete SimpleName: next(5332)", "Delete NullLiteral(5333)", "Delete InfixExpression: !=(5334)", "Delete SimpleName: next(5335)", "Delete SimpleName: equals(5336)", "Delete SimpleName: left(5337)", "Delete MethodInvocation(5338)", "Delete InfixExpression: &&(5339)", "Delete ParenthesizedExpression(5340)", "Delete InfixExpression: ||(5341)", "Delete QualifiedName: Boolean.FALSE(5342)", "Delete ReturnStatement(5343)", "Delete Block(5344)", "Delete IfStatement(5345)", "Delete Block(5346)", "Delete WhileStatement(5347)", "Delete QualifiedName: Boolean.TRUE(5348)", "Delete ReturnStatement(5349)", "Delete Block(5350)", "Delete IfStatement(5351)", "Delete SimpleName: arithmetic(5352)", "Delete SimpleName: equals(5353)", "Delete SimpleName: left(5354)", "Delete SimpleName: right(5355)", "Delete MethodInvocation(5356)", "Delete QualifiedName: Boolean.FALSE(5357)", "Delete QualifiedName: Boolean.TRUE(5358)", "Delete ConditionalExpression(5359)", "Delete ReturnStatement(5360)", "Delete Block(5361)", "Delete SimpleName: ArithmeticException(5362)", "Delete SimpleType: ArithmeticException(5363)", "Delete SimpleName: xrt(5364)", "Delete SingleVariableDeclaration(5365)", "Delete SimpleName: JexlException(5366)", "Delete SimpleType: JexlException(5367)", "Delete SimpleName: node(5368)", "Delete StringLiteral: \"!~ error\"(5369)", "Delete SimpleName: xrt(5370)", "Delete ClassInstanceCreation(5371)", "Delete ThrowStatement(5372)", "Delete Block(5373)", "Delete CatchClause(5374)", "Delete TryStatement(5375)", "Delete Block(5376)", "Delete MethodDeclaration(5377)", "Delete TagElement: @inheritDoc(5378)", "Delete TextElement:  (5379)", "Delete TagElement(5380)", "Delete Javadoc(5381)", "Delete Modifier: public(5382)", "Delete SimpleName: Object(5383)", "Delete SimpleType: Object(5384)", "Delete SimpleName: visit(5385)", "Delete SimpleName: ASTNotNode(5386)", "Delete SimpleType: ASTNotNode(5387)", "Delete SimpleName: node(5388)", "Delete SingleVariableDeclaration(5389)", "Delete SimpleName: Object(5390)", "Delete SimpleType: Object(5391)", "Delete SimpleName: data(5392)", "Delete SingleVariableDeclaration(5393)", "Delete SimpleName: Object(5394)", "Delete SimpleType: Object(5395)", "Delete SimpleName: val(5396)", "Delete SimpleName: node(5397)", "Delete SimpleName: jjtGetChild(5398)", "Delete NumberLiteral: 0(5399)", "Delete MethodInvocation(5400)", "Delete SimpleName: jjtAccept(5401)", "Delete ThisExpression(5402)", "Delete SimpleName: data(5403)", "Delete MethodInvocation(5404)", "Delete VariableDeclarationFragment(5405)", "Delete VariableDeclarationStatement(5406)", "Delete SimpleName: arithmetic(5407)", "Delete SimpleName: toBoolean(5408)", "Delete SimpleName: val(5409)", "Delete MethodInvocation(5410)", "Delete QualifiedName: Boolean.FALSE(5411)", "Delete QualifiedName: Boolean.TRUE(5412)", "Delete ConditionalExpression(5413)", "Delete ReturnStatement(5414)", "Delete Block(5415)", "Delete MethodDeclaration(5416)", "Delete TagElement: @inheritDoc(5417)", "Delete TextElement:  (5418)", "Delete TagElement(5419)", "Delete Javadoc(5420)", "Delete Modifier: public(5421)", "Delete SimpleName: Object(5422)", "Delete SimpleType: Object(5423)", "Delete SimpleName: visit(5424)", "Delete SimpleName: ASTNullLiteral(5425)", "Delete SimpleType: ASTNullLiteral(5426)", "Delete SimpleName: node(5427)", "Delete SingleVariableDeclaration(5428)", "Delete SimpleName: Object(5429)", "Delete SimpleType: Object(5430)", "Delete SimpleName: data(5431)", "Delete SingleVariableDeclaration(5432)", "Delete NullLiteral(5433)", "Delete ReturnStatement(5434)", "Delete Block(5435)", "Delete MethodDeclaration(5436)", "Delete TagElement: @inheritDoc(5437)", "Delete TextElement:  (5438)", "Delete TagElement(5439)", "Delete Javadoc(5440)", "Delete Modifier: public(5441)", "Delete SimpleName: Object(5442)", "Delete SimpleType: Object(5443)", "Delete SimpleName: visit(5444)", "Delete SimpleName: ASTOrNode(5445)", "Delete SimpleType: ASTOrNode(5446)", "Delete SimpleName: node(5447)", "Delete SingleVariableDeclaration(5448)", "Delete SimpleName: Object(5449)", "Delete SimpleType: Object(5450)", "Delete SimpleName: data(5451)", "Delete SingleVariableDeclaration(5452)", "Delete SimpleName: Object(5453)", "Delete SimpleType: Object(5454)", "Delete SimpleName: left(5455)", "Delete SimpleName: node(5456)", "Delete SimpleName: jjtGetChild(5457)", "Delete NumberLiteral: 0(5458)", "Delete MethodInvocation(5459)", "Delete SimpleName: jjtAccept(5460)", "Delete ThisExpression(5461)", "Delete SimpleName: data(5462)", "Delete MethodInvocation(5463)", "Delete VariableDeclarationFragment(5464)", "Delete VariableDeclarationStatement(5465)", "Delete PrimitiveType: boolean(5466)", "Delete SimpleName: leftValue(5467)", "Delete SimpleName: arithmetic(5468)", "Delete SimpleName: toBoolean(5469)", "Delete SimpleName: left(5470)", "Delete MethodInvocation(5471)", "Delete VariableDeclarationFragment(5472)", "Delete VariableDeclarationStatement(5473)", "Delete SimpleName: leftValue(5474)", "Delete QualifiedName: Boolean.TRUE(5475)", "Delete ReturnStatement(5476)", "Delete Block(5477)", "Delete IfStatement(5478)", "Delete Block(5479)", "Delete SimpleName: ArithmeticException(5480)", "Delete SimpleType: ArithmeticException(5481)", "Delete SimpleName: xrt(5482)", "Delete SingleVariableDeclaration(5483)", "Delete SimpleName: JexlException(5484)", "Delete SimpleType: JexlException(5485)", "Delete SimpleName: node(5486)", "Delete SimpleName: jjtGetChild(5487)", "Delete NumberLiteral: 0(5488)", "Delete MethodInvocation(5489)", "Delete StringLiteral: \"boolean coercion error\"(5490)", "Delete SimpleName: xrt(5491)", "Delete ClassInstanceCreation(5492)", "Delete ThrowStatement(5493)", "Delete Block(5494)", "Delete CatchClause(5495)", "Delete TryStatement(5496)", "Delete SimpleName: Object(5497)", "Delete SimpleType: Object(5498)", "Delete SimpleName: right(5499)", "Delete SimpleName: node(5500)", "Delete SimpleName: jjtGetChild(5501)", "Delete NumberLiteral: 1(5502)", "Delete MethodInvocation(5503)", "Delete SimpleName: jjtAccept(5504)", "Delete ThisExpression(5505)", "Delete SimpleName: data(5506)", "Delete MethodInvocation(5507)", "Delete VariableDeclarationFragment(5508)", "Delete VariableDeclarationStatement(5509)", "Delete PrimitiveType: boolean(5510)", "Delete SimpleName: rightValue(5511)", "Delete SimpleName: arithmetic(5512)", "Delete SimpleName: toBoolean(5513)", "Delete SimpleName: right(5514)", "Delete MethodInvocation(5515)", "Delete VariableDeclarationFragment(5516)", "Delete VariableDeclarationStatement(5517)", "Delete SimpleName: rightValue(5518)", "Delete QualifiedName: Boolean.TRUE(5519)", "Delete ReturnStatement(5520)", "Delete Block(5521)", "Delete IfStatement(5522)", "Delete Block(5523)", "Delete SimpleName: ArithmeticException(5524)", "Delete SimpleType: ArithmeticException(5525)", "Delete SimpleName: xrt(5526)", "Delete SingleVariableDeclaration(5527)", "Delete SimpleName: JexlException(5528)", "Delete SimpleType: JexlException(5529)", "Delete SimpleName: node(5530)", "Delete SimpleName: jjtGetChild(5531)", "Delete NumberLiteral: 1(5532)", "Delete MethodInvocation(5533)", "Delete StringLiteral: \"boolean coercion error\"(5534)", "Delete SimpleName: xrt(5535)", "Delete ClassInstanceCreation(5536)", "Delete ThrowStatement(5537)", "Delete Block(5538)", "Delete CatchClause(5539)", "Delete TryStatement(5540)", "Delete QualifiedName: Boolean.FALSE(5541)", "Delete ReturnStatement(5542)", "Delete Block(5543)", "Delete MethodDeclaration(5544)", "Delete TagElement: @inheritDoc(5545)", "Delete TextElement:  (5546)", "Delete TagElement(5547)", "Delete Javadoc(5548)", "Delete Modifier: public(5549)", "Delete SimpleName: Object(5550)", "Delete SimpleType: Object(5551)", "Delete SimpleName: visit(5552)", "Delete SimpleName: ASTReference(5553)", "Delete SimpleType: ASTReference(5554)", "Delete SimpleName: node(5555)", "Delete SingleVariableDeclaration(5556)", "Delete SimpleName: Object(5557)", "Delete SimpleType: Object(5558)", "Delete SimpleName: data(5559)", "Delete SingleVariableDeclaration(5560)", "Delete PrimitiveType: int(5561)", "Delete SimpleName: numChildren(5562)", "Delete SimpleName: node(5563)", "Delete SimpleName: jjtGetNumChildren(5564)", "Delete MethodInvocation(5565)", "Delete VariableDeclarationFragment(5566)", "Delete VariableDeclarationStatement(5567)", "Delete SimpleName: Object(5568)", "Delete SimpleType: Object(5569)", "Delete SimpleName: result(5570)", "Delete NullLiteral(5571)", "Delete VariableDeclarationFragment(5572)", "Delete VariableDeclarationStatement(5573)", "Delete SimpleName: StringBuilder(5574)", "Delete SimpleType: StringBuilder(5575)", "Delete SimpleName: variableName(5576)", "Delete NullLiteral(5577)", "Delete VariableDeclarationFragment(5578)", "Delete VariableDeclarationStatement(5579)", "Delete SimpleName: String(5580)", "Delete SimpleType: String(5581)", "Delete SimpleName: propertyName(5582)", "Delete NullLiteral(5583)", "Delete VariableDeclarationFragment(5584)", "Delete VariableDeclarationStatement(5585)", "Delete PrimitiveType: boolean(5586)", "Delete SimpleName: isVariable(5587)", "Delete BooleanLiteral: true(5588)", "Delete VariableDeclarationFragment(5589)", "Delete VariableDeclarationStatement(5590)", "Delete PrimitiveType: int(5591)", "Delete SimpleName: v(5592)", "Delete NumberLiteral: 0(5593)", "Delete VariableDeclarationFragment(5594)", "Delete VariableDeclarationStatement(5595)", "Delete PrimitiveType: int(5596)", "Delete SimpleName: c(5597)", "Delete NumberLiteral: 0(5598)", "Delete VariableDeclarationFragment(5599)", "Delete VariableDeclarationExpression(5600)", "Delete SimpleName: c(5601)", "Delete SimpleName: numChildren(5602)", "Delete InfixExpression: <(5603)", "Delete SimpleName: c(5604)", "Delete PostfixExpression: ++(5605)", "Delete SimpleName: isCancelled(5606)", "Delete MethodInvocation(5607)", "Delete QualifiedName: JexlException.Cancel(5608)", "Delete SimpleType: JexlException.Cancel(5609)", "Delete SimpleName: node(5610)", "Delete ClassInstanceCreation(5611)", "Delete ThrowStatement(5612)", "Delete Block(5613)", "Delete IfStatement(5614)", "Delete SimpleName: JexlNode(5615)", "Delete SimpleType: JexlNode(5616)", "Delete SimpleName: theNode(5617)", "Delete SimpleName: node(5618)", "Delete SimpleName: jjtGetChild(5619)", "Delete SimpleName: c(5620)", "Delete MethodInvocation(5621)", "Delete VariableDeclarationFragment(5622)", "Delete VariableDeclarationStatement(5623)", "Delete SimpleName: result(5624)", "Delete NullLiteral(5625)", "Delete InfixExpression: ==(5626)", "Delete SimpleName: theNode(5627)", "Delete SimpleName: ASTNumberLiteral(5628)", "Delete SimpleType: ASTNumberLiteral(5629)", "Delete InstanceofExpression(5630)", "Delete InfixExpression: &&(5631)", "Delete SimpleName: ASTNumberLiteral(5632)", "Delete SimpleType: ASTNumberLiteral(5633)", "Delete SimpleName: theNode(5634)", "Delete CastExpression(5635)", "Delete ParenthesizedExpression(5636)", "Delete SimpleName: isInteger(5637)", "Delete MethodInvocation(5638)", "Delete InfixExpression: &&(5639)", "Delete SimpleName: isVariable(5640)", "Delete SimpleName: v(5641)", "Delete NumberLiteral: 0(5642)", "Delete InfixExpression: >(5643)", "Delete Assignment: &=(5644)", "Delete ExpressionStatement(5645)", "Delete Block(5646)", "Delete SimpleName: isVariable(5647)", "Delete SimpleName: theNode(5648)", "Delete SimpleName: ASTIdentifier(5649)", "Delete SimpleType: ASTIdentifier(5650)", "Delete InstanceofExpression(5651)", "Delete ParenthesizedExpression(5652)", "Delete Assignment: &=(5653)", "Delete ExpressionStatement(5654)", "Delete SimpleName: result(5655)", "Delete SimpleName: theNode(5656)", "Delete SimpleName: jjtAccept(5657)", "Delete ThisExpression(5658)", "Delete SimpleName: result(5659)", "Delete MethodInvocation(5660)", "Delete Assignment: =(5661)", "Delete ExpressionStatement(5662)", "Delete Block(5663)", "Delete IfStatement(5664)", "Delete SimpleName: result(5665)", "Delete NullLiteral(5666)", "Delete InfixExpression: ==(5667)", "Delete SimpleName: isVariable(5668)", "Delete InfixExpression: &&(5669)", "Delete SimpleName: v(5670)", "Delete NumberLiteral: 0(5671)", "Delete InfixExpression: ==(5672)", "Delete SimpleName: variableName(5673)", "Delete SimpleName: StringBuilder(5674)", "Delete SimpleType: StringBuilder(5675)", "Delete SimpleName: node(5676)", "Delete SimpleName: jjtGetChild(5677)", "Delete NumberLiteral: 0(5678)", "Delete MethodInvocation(5679)", "Delete SimpleName: image(5680)", "Delete FieldAccess(5681)", "Delete ClassInstanceCreation(5682)", "Delete Assignment: =(5683)", "Delete ExpressionStatement(5684)", "Delete SimpleName: v(5685)", "Delete NumberLiteral: 1(5686)", "Delete Assignment: =(5687)", "Delete ExpressionStatement(5688)", "Delete Block(5689)", "Delete IfStatement(5690)", "Delete SimpleName: v(5691)", "Delete SimpleName: c(5692)", "Delete InfixExpression: <=(5693)", "Delete SimpleName: v(5694)", "Delete PrefixExpression: ++(5695)", "Delete SimpleName: variableName(5696)", "Delete SimpleName: append(5697)", "Delete CharacterLiteral: '.'(5698)", "Delete MethodInvocation(5699)", "Delete ExpressionStatement(5700)", "Delete SimpleName: variableName(5701)", "Delete SimpleName: append(5702)", "Delete SimpleName: node(5703)", "Delete SimpleName: jjtGetChild(5704)", "Delete SimpleName: v(5705)", "Delete MethodInvocation(5706)", "Delete SimpleName: image(5707)", "Delete FieldAccess(5708)", "Delete MethodInvocation(5709)", "Delete ExpressionStatement(5710)", "Delete Block(5711)", "Delete ForStatement(5712)", "Delete SimpleName: result(5713)", "Delete SimpleName: context(5714)", "Delete SimpleName: get(5715)", "Delete SimpleName: variableName(5716)", "Delete SimpleName: toString(5717)", "Delete MethodInvocation(5718)", "Delete MethodInvocation(5719)", "Delete Assignment: =(5720)", "Delete ExpressionStatement(5721)", "Delete Block(5722)", "Delete SimpleName: propertyName(5723)", "Delete QualifiedName: theNode.image(5724)", "Delete Assignment: =(5725)", "Delete ExpressionStatement(5726)", "Delete Block(5727)", "Delete IfStatement(5728)", "Delete Block(5729)", "Delete ForStatement(5730)", "Delete SimpleName: result(5731)", "Delete NullLiteral(5732)", "Delete InfixExpression: ==(5733)", "Delete SimpleName: isVariable(5734)", "Delete SimpleName: isTernaryProtected(5735)", "Delete SimpleName: node(5736)", "Delete MethodInvocation(5737)", "Delete PrefixExpression: !(5738)", "Delete SimpleName: context(5739)", "Delete SimpleName: has(5740)", "Delete SimpleName: variableName(5741)", "Delete SimpleName: toString(5742)", "Delete MethodInvocation(5743)", "Delete MethodInvocation(5744)", "Delete SimpleName: numChildren(5745)", "Delete NumberLiteral: 1(5746)", "Delete InfixExpression: ==(5747)", "Delete SimpleName: node(5748)", "Delete SimpleName: jjtGetChild(5749)", "Delete NumberLiteral: 0(5750)", "Delete MethodInvocation(5751)", "Delete SimpleName: ASTIdentifier(5752)", "Delete SimpleType: ASTIdentifier(5753)", "Delete InstanceofExpression(5754)", "Delete InfixExpression: &&(5755)", "Delete SimpleName: ASTIdentifier(5756)", "Delete SimpleType: ASTIdentifier(5757)", "Delete SimpleName: node(5758)", "Delete SimpleName: jjtGetChild(5759)", "Delete NumberLiteral: 0(5760)", "Delete MethodInvocation(5761)", "Delete CastExpression(5762)", "Delete ParenthesizedExpression(5763)", "Delete SimpleName: getRegister(5764)", "Delete MethodInvocation(5765)", "Delete NumberLiteral: 0(5766)", "Delete InfixExpression: >=(5767)", "Delete InfixExpression: &&(5768)", "Delete ParenthesizedExpression(5769)", "Delete InfixExpression: ||(5770)", "Delete ParenthesizedExpression(5771)", "Delete PrefixExpression: !(5772)", "Delete InfixExpression: &&(5773)", "Delete SimpleName: JexlException(5774)", "Delete SimpleType: JexlException(5775)", "Delete SimpleName: xjexl(5776)", "Delete SimpleName: propertyName(5777)", "Delete NullLiteral(5778)", "Delete InfixExpression: !=(5779)", "Delete QualifiedName: JexlException.Property(5780)", "Delete SimpleType: JexlException.Property(5781)", "Delete SimpleName: node(5782)", "Delete SimpleName: propertyName(5783)", "Delete ClassInstanceCreation(5784)", "Delete QualifiedName: JexlException.Variable(5785)", "Delete SimpleType: JexlException.Variable(5786)", "Delete SimpleName: node(5787)", "Delete SimpleName: variableName(5788)", "Delete SimpleName: toString(5789)", "Delete MethodInvocation(5790)", "Delete ClassInstanceCreation(5791)", "Delete ConditionalExpression(5792)", "Delete VariableDeclarationFragment(5793)", "Delete VariableDeclarationStatement(5794)", "Delete SimpleName: unknownVariable(5795)", "Delete SimpleName: xjexl(5796)", "Delete MethodInvocation(5797)", "Delete ReturnStatement(5798)", "Delete Block(5799)", "Delete IfStatement(5800)", "Delete Block(5801)", "Delete IfStatement(5802)", "Delete SimpleName: result(5803)", "Delete ReturnStatement(5804)", "Delete Block(5805)", "Delete MethodDeclaration(5806)", "Delete TagElement: @inheritDoc(5807)", "Delete TextElement:  (5808)", "Delete TagElement(5809)", "Delete Javadoc(5810)", "Delete Modifier: public(5811)", "Delete SimpleName: Object(5812)", "Delete SimpleType: Object(5813)", "Delete SimpleName: visit(5814)", "Delete SimpleName: ASTReferenceExpression(5815)", "Delete SimpleType: ASTReferenceExpression(5816)", "Delete SimpleName: node(5817)", "Delete SingleVariableDeclaration(5818)", "Delete SimpleName: Object(5819)", "Delete SimpleType: Object(5820)", "Delete SimpleName: data(5821)", "Delete SingleVariableDeclaration(5822)", "Delete SimpleName: ASTArrayAccess(5823)", "Delete SimpleType: ASTArrayAccess(5824)", "Delete SimpleName: upper(5825)", "Delete SimpleName: node(5826)", "Delete VariableDeclarationFragment(5827)", "Delete VariableDeclarationStatement(5828)", "Delete SimpleName: visit(5829)", "Delete SimpleName: upper(5830)", "Delete SimpleName: data(5831)", "Delete MethodInvocation(5832)", "Delete ReturnStatement(5833)", "Delete Block(5834)", "Delete MethodDeclaration(5835)", "Delete TagElement: @inheritDoc(5836)", "Delete TextElement:  (5837)", "Delete TagElement(5838)", "Delete Javadoc(5839)", "Delete Modifier: public(5840)", "Delete SimpleName: Object(5841)", "Delete SimpleType: Object(5842)", "Delete SimpleName: visit(5843)", "Delete SimpleName: ASTReturnStatement(5844)", "Delete SimpleType: ASTReturnStatement(5845)", "Delete SimpleName: node(5846)", "Delete SingleVariableDeclaration(5847)", "Delete SimpleName: Object(5848)", "Delete SimpleType: Object(5849)", "Delete SimpleName: data(5850)", "Delete SingleVariableDeclaration(5851)", "Delete SimpleName: Object(5852)", "Delete SimpleType: Object(5853)", "Delete SimpleName: val(5854)", "Delete SimpleName: node(5855)", "Delete SimpleName: jjtGetChild(5856)", "Delete NumberLiteral: 0(5857)", "Delete MethodInvocation(5858)", "Delete SimpleName: jjtAccept(5859)", "Delete ThisExpression(5860)", "Delete SimpleName: data(5861)", "Delete MethodInvocation(5862)", "Delete VariableDeclarationFragment(5863)", "Delete VariableDeclarationStatement(5864)", "Delete QualifiedName: JexlException.Return(5865)", "Delete SimpleType: JexlException.Return(5866)", "Delete SimpleName: node(5867)", "Delete NullLiteral(5868)", "Delete SimpleName: val(5869)", "Delete ClassInstanceCreation(5870)", "Delete ThrowStatement(5871)", "Delete Block(5872)", "Delete MethodDeclaration(5873)", "Delete TextElement: Check if a null evaluated expression is protected by a ternary expression.(5874)", "Delete TextElement: The rationale is that the ternary / elvis expressions are meant for the user to explictly take(5875)", "Delete TextElement: control over the error generation; ie, ternaries can return null even if the engine in strict mode(5876)", "Delete TextElement: would normally throw an exception.(5877)", "Delete TagElement(5878)", "Delete SimpleName: node(5879)", "Delete TextElement:  the expression node(5880)", "Delete TagElement: @param(5881)", "Delete TextElement:  true if nullable variable, false otherwise(5882)", "Delete TagElement: @return(5883)", "Delete Javadoc(5884)", "Delete Modifier: private(5885)", "Delete PrimitiveType: boolean(5886)", "Delete SimpleName: isTernaryProtected(5887)", "Delete SimpleName: JexlNode(5888)", "Delete SimpleType: JexlNode(5889)", "Delete SimpleName: node(5890)", "Delete SingleVariableDeclaration(5891)", "Delete SimpleName: JexlNode(5892)", "Delete SimpleType: JexlNode(5893)", "Delete SimpleName: walk(5894)", "Delete SimpleName: node(5895)", "Delete SimpleName: jjtGetParent(5896)", "Delete MethodInvocation(5897)", "Delete VariableDeclarationFragment(5898)", "Delete VariableDeclarationExpression(5899)", "Delete SimpleName: walk(5900)", "Delete NullLiteral(5901)", "Delete InfixExpression: !=(5902)", "Delete SimpleName: walk(5903)", "Delete SimpleName: walk(5904)", "Delete SimpleName: jjtGetParent(5905)", "Delete MethodInvocation(5906)", "Delete Assignment: =(5907)", "Delete SimpleName: walk(5908)", "Delete SimpleName: ASTTernaryNode(5909)", "Delete SimpleType: ASTTernaryNode(5910)", "Delete InstanceofExpression(5911)", "Delete BooleanLiteral: true(5912)", "Delete ReturnStatement(5913)", "Delete Block(5914)", "Delete SimpleName: walk(5915)", "Delete SimpleName: ASTReference(5916)", "Delete SimpleType: ASTReference(5917)", "Delete InstanceofExpression(5918)", "Delete SimpleName: walk(5919)", "Delete SimpleName: ASTArrayAccess(5920)", "Delete SimpleType: ASTArrayAccess(5921)", "Delete InstanceofExpression(5922)", "Delete InfixExpression: ||(5923)", "Delete ParenthesizedExpression(5924)", "Delete PrefixExpression: !(5925)", "Delete BreakStatement(5926)", "Delete Block(5927)", "Delete IfStatement(5928)", "Delete IfStatement(5929)", "Delete Block(5930)", "Delete ForStatement(5931)", "Delete BooleanLiteral: false(5932)", "Delete ReturnStatement(5933)", "Delete Block(5934)", "Delete MethodDeclaration(5935)", "Delete TagElement: @inheritDoc(5936)", "Delete TextElement:  (5937)", "Delete TagElement(5938)", "Delete Javadoc(5939)", "Delete Modifier: public(5940)", "Delete SimpleName: Object(5941)", "Delete SimpleType: Object(5942)", "Delete SimpleName: visit(5943)", "Delete SimpleName: ASTSizeFunction(5944)", "Delete SimpleType: ASTSizeFunction(5945)", "Delete SimpleName: node(5946)", "Delete SingleVariableDeclaration(5947)", "Delete SimpleName: Object(5948)", "Delete SimpleType: Object(5949)", "Delete SimpleName: data(5950)", "Delete SingleVariableDeclaration(5951)", "Delete SimpleName: Object(5952)", "Delete SimpleType: Object(5953)", "Delete SimpleName: val(5954)", "Delete SimpleName: node(5955)", "Delete SimpleName: jjtGetChild(5956)", "Delete NumberLiteral: 0(5957)", "Delete MethodInvocation(5958)", "Delete SimpleName: jjtAccept(5959)", "Delete ThisExpression(5960)", "Delete SimpleName: data(5961)", "Delete MethodInvocation(5962)", "Delete VariableDeclarationFragment(5963)", "Delete VariableDeclarationStatement(5964)", "Delete SimpleName: val(5965)", "Delete NullLiteral(5966)", "Delete InfixExpression: ==(5967)", "Delete SimpleName: JexlException(5968)", "Delete SimpleType: JexlException(5969)", "Delete SimpleName: node(5970)", "Delete StringLiteral: \"size() : argument is null\"(5971)", "Delete NullLiteral(5972)", "Delete ClassInstanceCreation(5973)", "Delete ThrowStatement(5974)", "Delete Block(5975)", "Delete IfStatement(5976)", "Delete SimpleName: Integer(5977)", "Delete SimpleName: valueOf(5978)", "Delete SimpleName: sizeOf(5979)", "Delete SimpleName: node(5980)", "Delete SimpleName: val(5981)", "Delete MethodInvocation(5982)", "Delete MethodInvocation(5983)", "Delete ReturnStatement(5984)", "Delete Block(5985)", "Delete MethodDeclaration(5986)", "Delete TagElement: @inheritDoc(5987)", "Delete TextElement:  (5988)", "Delete TagElement(5989)", "Delete Javadoc(5990)", "Delete Modifier: public(5991)", "Delete SimpleName: Object(5992)", "Delete SimpleType: Object(5993)", "Delete SimpleName: visit(5994)", "Delete SimpleName: ASTSizeMethod(5995)", "Delete SimpleType: ASTSizeMethod(5996)", "Delete SimpleName: node(5997)", "Delete SingleVariableDeclaration(5998)", "Delete SimpleName: Object(5999)", "Delete SimpleType: Object(6000)", "Delete SimpleName: data(6001)", "Delete SingleVariableDeclaration(6002)", "Delete SimpleName: Integer(6003)", "Delete SimpleName: valueOf(6004)", "Delete SimpleName: sizeOf(6005)", "Delete SimpleName: node(6006)", "Delete SimpleName: data(6007)", "Delete MethodInvocation(6008)", "Delete MethodInvocation(6009)", "Delete ReturnStatement(6010)", "Delete Block(6011)", "Delete MethodDeclaration(6012)", "Delete TagElement: @inheritDoc(6013)", "Delete TextElement:  (6014)", "Delete TagElement(6015)", "Delete Javadoc(6016)", "Delete Modifier: public(6017)", "Delete SimpleName: Object(6018)", "Delete SimpleType: Object(6019)", "Delete SimpleName: visit(6020)", "Delete SimpleName: ASTStringLiteral(6021)", "Delete SimpleType: ASTStringLiteral(6022)", "Delete SimpleName: node(6023)", "Delete SingleVariableDeclaration(6024)", "Delete SimpleName: Object(6025)", "Delete SimpleType: Object(6026)", "Delete SimpleName: data(6027)", "Delete SingleVariableDeclaration(6028)", "Delete SimpleName: data(6029)", "Delete NullLiteral(6030)", "Delete InfixExpression: !=(6031)", "Delete SimpleName: getAttribute(6032)", "Delete SimpleName: data(6033)", "Delete SimpleName: node(6034)", "Delete SimpleName: getLiteral(6035)", "Delete MethodInvocation(6036)", "Delete SimpleName: node(6037)", "Delete MethodInvocation(6038)", "Delete ReturnStatement(6039)", "Delete Block(6040)", "Delete IfStatement(6041)", "Delete QualifiedName: node.image(6042)", "Delete ReturnStatement(6043)", "Delete Block(6044)", "Delete MethodDeclaration(6045)", "Delete TagElement: @inheritDoc(6046)", "Delete TextElement:  (6047)", "Delete TagElement(6048)", "Delete Javadoc(6049)", "Delete Modifier: public(6050)", "Delete SimpleName: Object(6051)", "Delete SimpleType: Object(6052)", "Delete SimpleName: visit(6053)", "Delete SimpleName: ASTTernaryNode(6054)", "Delete SimpleType: ASTTernaryNode(6055)", "Delete SimpleName: node(6056)", "Delete SingleVariableDeclaration(6057)", "Delete SimpleName: Object(6058)", "Delete SimpleType: Object(6059)", "Delete SimpleName: data(6060)", "Delete SingleVariableDeclaration(6061)", "Delete SimpleName: Object(6062)", "Delete SimpleType: Object(6063)", "Delete SimpleName: condition(6064)", "Delete SimpleName: node(6065)", "Delete SimpleName: jjtGetChild(6066)", "Delete NumberLiteral: 0(6067)", "Delete MethodInvocation(6068)", "Delete SimpleName: jjtAccept(6069)", "Delete ThisExpression(6070)", "Delete SimpleName: data(6071)", "Delete MethodInvocation(6072)", "Delete VariableDeclarationFragment(6073)", "Delete VariableDeclarationStatement(6074)", "Delete SimpleName: node(6075)", "Delete SimpleName: jjtGetNumChildren(6076)", "Delete MethodInvocation(6077)", "Delete NumberLiteral: 3(6078)", "Delete InfixExpression: ==(6079)", "Delete SimpleName: condition(6080)", "Delete NullLiteral(6081)", "Delete InfixExpression: !=(6082)", "Delete SimpleName: arithmetic(6083)", "Delete SimpleName: toBoolean(6084)", "Delete SimpleName: condition(6085)", "Delete MethodInvocation(6086)", "Delete InfixExpression: &&(6087)", "Delete SimpleName: node(6088)", "Delete SimpleName: jjtGetChild(6089)", "Delete NumberLiteral: 1(6090)", "Delete MethodInvocation(6091)", "Delete SimpleName: jjtAccept(6092)", "Delete ThisExpression(6093)", "Delete SimpleName: data(6094)", "Delete MethodInvocation(6095)", "Delete ReturnStatement(6096)", "Delete Block(6097)", "Delete SimpleName: node(6098)", "Delete SimpleName: jjtGetChild(6099)", "Delete NumberLiteral: 2(6100)", "Delete MethodInvocation(6101)", "Delete SimpleName: jjtAccept(6102)", "Delete ThisExpression(6103)", "Delete SimpleName: data(6104)", "Delete MethodInvocation(6105)", "Delete ReturnStatement(6106)", "Delete Block(6107)", "Delete IfStatement(6108)", "Delete Block(6109)", "Delete IfStatement(6110)", "Delete SimpleName: condition(6111)", "Delete NullLiteral(6112)", "Delete InfixExpression: !=(6113)", "Delete SimpleName: arithmetic(6114)", "Delete SimpleName: toBoolean(6115)", "Delete SimpleName: condition(6116)", "Delete MethodInvocation(6117)", "Delete InfixExpression: &&(6118)", "Delete SimpleName: condition(6119)", "Delete ReturnStatement(6120)", "Delete Block(6121)", "Delete SimpleName: node(6122)", "Delete SimpleName: jjtGetChild(6123)", "Delete NumberLiteral: 1(6124)", "Delete MethodInvocation(6125)", "Delete SimpleName: jjtAccept(6126)", "Delete ThisExpression(6127)", "Delete SimpleName: data(6128)", "Delete MethodInvocation(6129)", "Delete ReturnStatement(6130)", "Delete Block(6131)", "Delete IfStatement(6132)", "Delete Block(6133)", "Delete MethodDeclaration(6134)", "Delete TagElement: @inheritDoc(6135)", "Delete TextElement:  (6136)", "Delete TagElement(6137)", "Delete Javadoc(6138)", "Delete Modifier: public(6139)", "Delete SimpleName: Object(6140)", "Delete SimpleType: Object(6141)", "Delete SimpleName: visit(6142)", "Delete SimpleName: ASTTrueNode(6143)", "Delete SimpleType: ASTTrueNode(6144)", "Delete SimpleName: node(6145)", "Delete SingleVariableDeclaration(6146)", "Delete SimpleName: Object(6147)", "Delete SimpleType: Object(6148)", "Delete SimpleName: data(6149)", "Delete SingleVariableDeclaration(6150)", "Delete QualifiedName: Boolean.TRUE(6151)", "Delete ReturnStatement(6152)", "Delete Block(6153)", "Delete MethodDeclaration(6154)", "Delete TagElement: @inheritDoc(6155)", "Delete TextElement:  (6156)", "Delete TagElement(6157)", "Delete Javadoc(6158)", "Delete Modifier: public(6159)", "Delete SimpleName: Object(6160)", "Delete SimpleType: Object(6161)", "Delete SimpleName: visit(6162)", "Delete SimpleName: ASTUnaryMinusNode(6163)", "Delete SimpleType: ASTUnaryMinusNode(6164)", "Delete SimpleName: node(6165)", "Delete SingleVariableDeclaration(6166)", "Delete SimpleName: Object(6167)", "Delete SimpleType: Object(6168)", "Delete SimpleName: data(6169)", "Delete SingleVariableDeclaration(6170)", "Delete SimpleName: JexlNode(6171)", "Delete SimpleType: JexlNode(6172)", "Delete SimpleName: valNode(6173)", "Delete SimpleName: node(6174)", "Delete SimpleName: jjtGetChild(6175)", "Delete NumberLiteral: 0(6176)", "Delete MethodInvocation(6177)", "Delete VariableDeclarationFragment(6178)", "Delete VariableDeclarationStatement(6179)", "Delete SimpleName: Object(6180)", "Delete SimpleType: Object(6181)", "Delete SimpleName: val(6182)", "Delete SimpleName: valNode(6183)", "Delete SimpleName: jjtAccept(6184)", "Delete ThisExpression(6185)", "Delete SimpleName: data(6186)", "Delete MethodInvocation(6187)", "Delete VariableDeclarationFragment(6188)", "Delete VariableDeclarationStatement(6189)", "Delete SimpleName: Object(6190)", "Delete SimpleType: Object(6191)", "Delete SimpleName: number(6192)", "Delete SimpleName: arithmetic(6193)", "Delete SimpleName: negate(6194)", "Delete SimpleName: val(6195)", "Delete MethodInvocation(6196)", "Delete VariableDeclarationFragment(6197)", "Delete VariableDeclarationStatement(6198)", "Delete SimpleName: valNode(6199)", "Delete SimpleName: ASTNumberLiteral(6200)", "Delete SimpleType: ASTNumberLiteral(6201)", "Delete InstanceofExpression(6202)", "Delete SimpleName: number(6203)", "Delete SimpleName: Number(6204)", "Delete SimpleType: Number(6205)", "Delete InstanceofExpression(6206)", "Delete InfixExpression: &&(6207)", "Delete SimpleName: number(6208)", "Delete SimpleName: arithmetic(6209)", "Delete SimpleName: narrowNumber(6210)", "Delete SimpleName: Number(6211)", "Delete SimpleType: Number(6212)", "Delete SimpleName: number(6213)", "Delete CastExpression(6214)", "Delete SimpleName: ASTNumberLiteral(6215)", "Delete SimpleType: ASTNumberLiteral(6216)", "Delete SimpleName: valNode(6217)", "Delete CastExpression(6218)", "Delete ParenthesizedExpression(6219)", "Delete SimpleName: getLiteralClass(6220)", "Delete MethodInvocation(6221)", "Delete MethodInvocation(6222)", "Delete Assignment: =(6223)", "Delete ExpressionStatement(6224)", "Delete Block(6225)", "Delete IfStatement(6226)", "Delete SimpleName: number(6227)", "Delete ReturnStatement(6228)", "Delete Block(6229)", "Delete SimpleName: ArithmeticException(6230)", "Delete SimpleType: ArithmeticException(6231)", "Delete SimpleName: xrt(6232)", "Delete SingleVariableDeclaration(6233)", "Delete SimpleName: JexlException(6234)", "Delete SimpleType: JexlException(6235)", "Delete SimpleName: valNode(6236)", "Delete StringLiteral: \"arithmetic error\"(6237)", "Delete SimpleName: xrt(6238)", "Delete ClassInstanceCreation(6239)", "Delete ThrowStatement(6240)", "Delete Block(6241)", "Delete CatchClause(6242)", "Delete TryStatement(6243)", "Delete Block(6244)", "Delete MethodDeclaration(6245)", "Delete TagElement: @inheritDoc(6246)", "Delete TextElement:  (6247)", "Delete TagElement(6248)", "Delete Javadoc(6249)", "Delete Modifier: public(6250)", "Delete SimpleName: Object(6251)", "Delete SimpleType: Object(6252)", "Delete SimpleName: visit(6253)", "Delete SimpleName: ASTWhileStatement(6254)", "Delete SimpleType: ASTWhileStatement(6255)", "Delete SimpleName: node(6256)", "Delete SingleVariableDeclaration(6257)", "Delete SimpleName: Object(6258)", "Delete SimpleType: Object(6259)", "Delete SimpleName: data(6260)", "Delete SingleVariableDeclaration(6261)", "Delete SimpleName: Object(6262)", "Delete SimpleType: Object(6263)", "Delete SimpleName: result(6264)", "Delete NullLiteral(6265)", "Delete VariableDeclarationFragment(6266)", "Delete VariableDeclarationStatement(6267)", "Delete SimpleName: Node(6268)", "Delete SimpleType: Node(6269)", "Delete SimpleName: expressionNode(6270)", "Delete SimpleName: node(6271)", "Delete SimpleName: jjtGetChild(6272)", "Delete NumberLiteral: 0(6273)", "Delete MethodInvocation(6274)", "Delete VariableDeclarationFragment(6275)", "Delete VariableDeclarationStatement(6276)", "Delete SimpleName: arithmetic(6277)", "Delete SimpleName: toBoolean(6278)", "Delete SimpleName: expressionNode(6279)", "Delete SimpleName: jjtAccept(6280)", "Delete ThisExpression(6281)", "Delete SimpleName: data(6282)", "Delete MethodInvocation(6283)", "Delete MethodInvocation(6284)", "Delete SimpleName: isCancelled(6285)", "Delete MethodInvocation(6286)", "Delete QualifiedName: JexlException.Cancel(6287)", "Delete SimpleType: JexlException.Cancel(6288)", "Delete SimpleName: node(6289)", "Delete ClassInstanceCreation(6290)", "Delete ThrowStatement(6291)", "Delete Block(6292)", "Delete IfStatement(6293)", "Delete SimpleName: node(6294)", "Delete SimpleName: jjtGetNumChildren(6295)", "Delete MethodInvocation(6296)", "Delete NumberLiteral: 1(6297)", "Delete InfixExpression: >(6298)", "Delete SimpleName: result(6299)", "Delete SimpleName: node(6300)", "Delete SimpleName: jjtGetChild(6301)", "Delete NumberLiteral: 1(6302)", "Delete MethodInvocation(6303)", "Delete SimpleName: jjtAccept(6304)", "Delete ThisExpression(6305)", "Delete SimpleName: data(6306)", "Delete MethodInvocation(6307)", "Delete Assignment: =(6308)", "Delete ExpressionStatement(6309)", "Delete Block(6310)", "Delete IfStatement(6311)", "Delete Block(6312)", "Delete WhileStatement(6313)", "Delete SimpleName: result(6314)", "Delete ReturnStatement(6315)", "Delete Block(6316)", "Delete MethodDeclaration(6317)", "Delete TextElement: Calculate the <code>size</code> of various types: Collection, Array,(6318)", "Delete TextElement: Map, String, and anything that has a int size() method.(6319)", "Delete TagElement(6320)", "Delete SimpleName: node(6321)", "Delete TextElement:  the node that gave the value to size(6322)", "Delete TagElement: @param(6323)", "Delete SimpleName: val(6324)", "Delete TextElement:  the object to get the size of.(6325)", "Delete TagElement: @param(6326)", "Delete TextElement:  the size of val(6327)", "Delete TagElement: @return(6328)", "Delete Javadoc(6329)", "Delete Modifier: private(6330)", "Delete PrimitiveType: int(6331)", "Delete SimpleName: sizeOf(6332)", "Delete SimpleName: JexlNode(6333)", "Delete SimpleType: JexlNode(6334)", "Delete SimpleName: node(6335)", "Delete SingleVariableDeclaration(6336)", "Delete SimpleName: Object(6337)", "Delete SimpleType: Object(6338)", "Delete SimpleName: val(6339)", "Delete SingleVariableDeclaration(6340)", "Delete SimpleName: val(6341)", "Delete SimpleName: Collection(6342)", "Delete SimpleType: Collection(6343)", "Delete WildcardType: ?(6344)", "Delete ParameterizedType: Collection<?>(6345)", "Delete InstanceofExpression(6346)", "Delete SimpleName: Collection(6347)", "Delete SimpleType: Collection(6348)", "Delete WildcardType: ?(6349)", "Delete ParameterizedType: Collection<?>(6350)", "Delete SimpleName: val(6351)", "Delete CastExpression(6352)", "Delete ParenthesizedExpression(6353)", "Delete SimpleName: size(6354)", "Delete MethodInvocation(6355)", "Delete ReturnStatement(6356)", "Delete Block(6357)", "Delete SimpleName: val(6358)", "Delete SimpleName: getClass(6359)", "Delete MethodInvocation(6360)", "Delete SimpleName: isArray(6361)", "Delete MethodInvocation(6362)", "Delete SimpleName: Array(6363)", "Delete SimpleName: getLength(6364)", "Delete SimpleName: val(6365)", "Delete MethodInvocation(6366)", "Delete ReturnStatement(6367)", "Delete Block(6368)", "Delete SimpleName: val(6369)", "Delete SimpleName: Map(6370)", "Delete SimpleType: Map(6371)", "Delete WildcardType: ?(6372)", "Delete WildcardType: ?(6373)", "Delete ParameterizedType: Map<?,?>(6374)", "Delete InstanceofExpression(6375)", "Delete SimpleName: Map(6376)", "Delete SimpleType: Map(6377)", "Delete WildcardType: ?(6378)", "Delete WildcardType: ?(6379)", "Delete ParameterizedType: Map<?,?>(6380)", "Delete SimpleName: val(6381)", "Delete CastExpression(6382)", "Delete ParenthesizedExpression(6383)", "Delete SimpleName: size(6384)", "Delete MethodInvocation(6385)", "Delete ReturnStatement(6386)", "Delete Block(6387)", "Delete SimpleName: val(6388)", "Delete SimpleName: String(6389)", "Delete SimpleType: String(6390)", "Delete InstanceofExpression(6391)", "Delete SimpleName: String(6392)", "Delete SimpleType: String(6393)", "Delete SimpleName: val(6394)", "Delete CastExpression(6395)", "Delete ParenthesizedExpression(6396)", "Delete SimpleName: length(6397)", "Delete MethodInvocation(6398)", "Delete ReturnStatement(6399)", "Delete Block(6400)", "Delete SimpleName: Object(6401)", "Delete SimpleType: Object(6402)", "Delete Dimension(6403)", "Delete ArrayType: Object[](6404)", "Delete SimpleName: params(6405)", "Delete SimpleName: Object(6406)", "Delete SimpleType: Object(6407)", "Delete Dimension(6408)", "Delete ArrayType: Object[](6409)", "Delete NumberLiteral: 0(6410)", "Delete ArrayCreation(6411)", "Delete VariableDeclarationFragment(6412)", "Delete VariableDeclarationStatement(6413)", "Delete SimpleName: JexlMethod(6414)", "Delete SimpleType: JexlMethod(6415)", "Delete SimpleName: vm(6416)", "Delete SimpleName: uberspect(6417)", "Delete SimpleName: getMethod(6418)", "Delete SimpleName: val(6419)", "Delete StringLiteral: \"size\"(6420)", "Delete SimpleName: EMPTY_PARAMS(6421)", "Delete SimpleName: node(6422)", "Delete MethodInvocation(6423)", "Delete VariableDeclarationFragment(6424)", "Delete VariableDeclarationStatement(6425)", "Delete SimpleName: vm(6426)", "Delete NullLiteral(6427)", "Delete InfixExpression: !=(6428)", "Delete SimpleName: vm(6429)", "Delete SimpleName: getReturnType(6430)", "Delete MethodInvocation(6431)", "Delete QualifiedName: Integer.TYPE(6432)", "Delete InfixExpression: ==(6433)", "Delete InfixExpression: &&(6434)", "Delete SimpleName: Integer(6435)", "Delete SimpleType: Integer(6436)", "Delete SimpleName: result(6437)", "Delete VariableDeclarationFragment(6438)", "Delete VariableDeclarationStatement(6439)", "Delete SimpleName: result(6440)", "Delete SimpleName: Integer(6441)", "Delete SimpleType: Integer(6442)", "Delete SimpleName: vm(6443)", "Delete SimpleName: invoke(6444)", "Delete SimpleName: val(6445)", "Delete SimpleName: params(6446)", "Delete MethodInvocation(6447)", "Delete CastExpression(6448)", "Delete Assignment: =(6449)", "Delete ExpressionStatement(6450)", "Delete Block(6451)", "Delete SimpleName: Exception(6452)", "Delete SimpleType: Exception(6453)", "Delete SimpleName: e(6454)", "Delete SingleVariableDeclaration(6455)", "Delete SimpleName: JexlException(6456)", "Delete SimpleType: JexlException(6457)", "Delete SimpleName: node(6458)", "Delete StringLiteral: \"size() : error executing\"(6459)", "Delete SimpleName: e(6460)", "Delete ClassInstanceCreation(6461)", "Delete ThrowStatement(6462)", "Delete Block(6463)", "Delete CatchClause(6464)", "Delete TryStatement(6465)", "Delete SimpleName: result(6466)", "Delete SimpleName: intValue(6467)", "Delete MethodInvocation(6468)", "Delete ReturnStatement(6469)", "Delete Block(6470)", "Delete IfStatement(6471)", "Delete SimpleName: JexlException(6472)", "Delete SimpleType: JexlException(6473)", "Delete SimpleName: node(6474)", "Delete StringLiteral: \"size() : unsupported type : \"(6475)", "Delete SimpleName: val(6476)", "Delete SimpleName: getClass(6477)", "Delete MethodInvocation(6478)", "Delete InfixExpression: +(6479)", "Delete NullLiteral(6480)", "Delete ClassInstanceCreation(6481)", "Delete ThrowStatement(6482)", "Delete Block(6483)", "Delete IfStatement(6484)", "Delete IfStatement(6485)", "Delete IfStatement(6486)", "Delete IfStatement(6487)", "Delete Block(6488)", "Delete MethodDeclaration(6489)", "Delete TextElement: Gets an attribute of an object.(6490)", "Delete TagElement(6491)", "Delete SimpleName: object(6492)", "Delete TextElement:  to retrieve value from(6493)", "Delete TagElement: @param(6494)", "Delete SimpleName: attribute(6495)", "Delete TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or(6496)", "Delete TextElement: key for a map(6497)", "Delete TagElement: @param(6498)", "Delete TextElement:  the attribute value(6499)", "Delete TagElement: @return(6500)", "Delete Javadoc(6501)", "Delete Modifier: public(6502)", "Delete SimpleName: Object(6503)", "Delete SimpleType: Object(6504)", "Delete SimpleName: getAttribute(6505)", "Delete SimpleName: Object(6506)", "Delete SimpleType: Object(6507)", "Delete SimpleName: object(6508)", "Delete SingleVariableDeclaration(6509)", "Delete SimpleName: Object(6510)", "Delete SimpleType: Object(6511)", "Delete SimpleName: attribute(6512)", "Delete SingleVariableDeclaration(6513)", "Delete SimpleName: getAttribute(6514)", "Delete SimpleName: object(6515)", "Delete SimpleName: attribute(6516)", "Delete NullLiteral(6517)", "Delete MethodInvocation(6518)", "Delete ReturnStatement(6519)", "Delete Block(6520)", "Delete MethodDeclaration(6521)", "Delete TextElement: Gets an attribute of an object.(6522)", "Delete TagElement(6523)", "Delete SimpleName: object(6524)", "Delete TextElement:  to retrieve value from(6525)", "Delete TagElement: @param(6526)", "Delete SimpleName: attribute(6527)", "Delete TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or(6528)", "Delete TextElement: key for a map(6529)", "Delete TagElement: @param(6530)", "Delete SimpleName: node(6531)", "Delete TextElement:  the node that evaluated as the object(6532)", "Delete TagElement: @param(6533)", "Delete TextElement:  the attribute value(6534)", "Delete TagElement: @return(6535)", "Delete Javadoc(6536)", "Delete Modifier: protected(6537)", "Delete SimpleName: Object(6538)", "Delete SimpleType: Object(6539)", "Delete SimpleName: getAttribute(6540)", "Delete SimpleName: Object(6541)", "Delete SimpleType: Object(6542)", "Delete SimpleName: object(6543)", "Delete SingleVariableDeclaration(6544)", "Delete SimpleName: Object(6545)", "Delete SimpleType: Object(6546)", "Delete SimpleName: attribute(6547)", "Delete SingleVariableDeclaration(6548)", "Delete SimpleName: JexlNode(6549)", "Delete SimpleType: JexlNode(6550)", "Delete SimpleName: node(6551)", "Delete SingleVariableDeclaration(6552)", "Delete SimpleName: object(6553)", "Delete NullLiteral(6554)", "Delete InfixExpression: ==(6555)", "Delete SimpleName: JexlException(6556)", "Delete SimpleType: JexlException(6557)", "Delete SimpleName: node(6558)", "Delete StringLiteral: \"object is null\"(6559)", "Delete ClassInstanceCreation(6560)", "Delete ThrowStatement(6561)", "Delete Block(6562)", "Delete IfStatement(6563)", "Delete SimpleName: isCancelled(6564)", "Delete MethodInvocation(6565)", "Delete QualifiedName: JexlException.Cancel(6566)", "Delete SimpleType: JexlException.Cancel(6567)", "Delete SimpleName: node(6568)", "Delete ClassInstanceCreation(6569)", "Delete ThrowStatement(6570)", "Delete Block(6571)", "Delete IfStatement(6572)", "Delete SimpleName: node(6573)", "Delete NullLiteral(6574)", "Delete InfixExpression: !=(6575)", "Delete SimpleName: cache(6576)", "Delete InfixExpression: &&(6577)", "Delete SimpleName: Object(6578)", "Delete SimpleType: Object(6579)", "Delete SimpleName: cached(6580)", "Delete SimpleName: node(6581)", "Delete SimpleName: jjtGetValue(6582)", "Delete MethodInvocation(6583)", "Delete VariableDeclarationFragment(6584)", "Delete VariableDeclarationStatement(6585)", "Delete SimpleName: cached(6586)", "Delete SimpleName: JexlPropertyGet(6587)", "Delete SimpleType: JexlPropertyGet(6588)", "Delete InstanceofExpression(6589)", "Delete SimpleName: JexlPropertyGet(6590)", "Delete SimpleType: JexlPropertyGet(6591)", "Delete SimpleName: vg(6592)", "Delete SimpleName: JexlPropertyGet(6593)", "Delete SimpleType: JexlPropertyGet(6594)", "Delete SimpleName: cached(6595)", "Delete CastExpression(6596)", "Delete VariableDeclarationFragment(6597)", "Delete VariableDeclarationStatement(6598)", "Delete SimpleName: Object(6599)", "Delete SimpleType: Object(6600)", "Delete SimpleName: value(6601)", "Delete SimpleName: vg(6602)", "Delete SimpleName: tryInvoke(6603)", "Delete SimpleName: object(6604)", "Delete SimpleName: attribute(6605)", "Delete MethodInvocation(6606)", "Delete VariableDeclarationFragment(6607)", "Delete VariableDeclarationStatement(6608)", "Delete SimpleName: vg(6609)", "Delete SimpleName: tryFailed(6610)", "Delete SimpleName: value(6611)", "Delete MethodInvocation(6612)", "Delete PrefixExpression: !(6613)", "Delete SimpleName: value(6614)", "Delete ReturnStatement(6615)", "Delete Block(6616)", "Delete IfStatement(6617)", "Delete Block(6618)", "Delete IfStatement(6619)", "Delete Block(6620)", "Delete IfStatement(6621)", "Delete SimpleName: JexlPropertyGet(6622)", "Delete SimpleType: JexlPropertyGet(6623)", "Delete SimpleName: vg(6624)", "Delete SimpleName: uberspect(6625)", "Delete SimpleName: getPropertyGet(6626)", "Delete SimpleName: object(6627)", "Delete SimpleName: attribute(6628)", "Delete SimpleName: node(6629)", "Delete MethodInvocation(6630)", "Delete VariableDeclarationFragment(6631)", "Delete VariableDeclarationStatement(6632)", "Delete SimpleName: vg(6633)", "Delete NullLiteral(6634)", "Delete InfixExpression: !=(6635)", "Delete SimpleName: Object(6636)", "Delete SimpleType: Object(6637)", "Delete SimpleName: value(6638)", "Delete SimpleName: vg(6639)", "Delete SimpleName: invoke(6640)", "Delete SimpleName: object(6641)", "Delete MethodInvocation(6642)", "Delete VariableDeclarationFragment(6643)", "Delete VariableDeclarationStatement(6644)", "Delete SimpleName: node(6645)", "Delete NullLiteral(6646)", "Delete InfixExpression: !=(6647)", "Delete SimpleName: cache(6648)", "Delete InfixExpression: &&(6649)", "Delete SimpleName: vg(6650)", "Delete SimpleName: isCacheable(6651)", "Delete MethodInvocation(6652)", "Delete InfixExpression: &&(6653)", "Delete SimpleName: node(6654)", "Delete SimpleName: jjtSetValue(6655)", "Delete SimpleName: vg(6656)", "Delete MethodInvocation(6657)", "Delete ExpressionStatement(6658)", "Delete Block(6659)", "Delete IfStatement(6660)", "Delete SimpleName: value(6661)", "Delete ReturnStatement(6662)", "Delete Block(6663)", "Delete SimpleName: Exception(6664)", "Delete SimpleType: Exception(6665)", "Delete SimpleName: xany(6666)", "Delete SingleVariableDeclaration(6667)", "Delete SimpleName: node(6668)", "Delete NullLiteral(6669)", "Delete InfixExpression: ==(6670)", "Delete SimpleName: RuntimeException(6671)", "Delete SimpleType: RuntimeException(6672)", "Delete SimpleName: xany(6673)", "Delete ClassInstanceCreation(6674)", "Delete ThrowStatement(6675)", "Delete Block(6676)", "Delete SimpleName: JexlException(6677)", "Delete SimpleType: JexlException(6678)", "Delete SimpleName: xjexl(6679)", "Delete QualifiedName: JexlException.Property(6680)", "Delete SimpleType: JexlException.Property(6681)", "Delete SimpleName: node(6682)", "Delete SimpleName: attribute(6683)", "Delete SimpleName: toString(6684)", "Delete MethodInvocation(6685)", "Delete ClassInstanceCreation(6686)", "Delete VariableDeclarationFragment(6687)", "Delete VariableDeclarationStatement(6688)", "Delete SimpleName: strict(6689)", "Delete SimpleName: xjexl(6690)", "Delete ThrowStatement(6691)", "Delete Block(6692)", "Delete IfStatement(6693)", "Delete SimpleName: silent(6694)", "Delete PrefixExpression: !(6695)", "Delete SimpleName: logger(6696)", "Delete SimpleName: warn(6697)", "Delete SimpleName: xjexl(6698)", "Delete SimpleName: getMessage(6699)", "Delete MethodInvocation(6700)", "Delete MethodInvocation(6701)", "Delete ExpressionStatement(6702)", "Delete Block(6703)", "Delete IfStatement(6704)", "Delete Block(6705)", "Delete IfStatement(6706)", "Delete Block(6707)", "Delete CatchClause(6708)", "Delete TryStatement(6709)", "Delete Block(6710)", "Delete IfStatement(6711)", "Delete NullLiteral(6712)", "Delete ReturnStatement(6713)", "Delete Block(6714)", "Delete MethodDeclaration(6715)", "Delete TextElement: Sets an attribute of an object.(6716)", "Delete TagElement(6717)", "Delete SimpleName: object(6718)", "Delete TextElement:  to set the value to(6719)", "Delete TagElement: @param(6720)", "Delete SimpleName: attribute(6721)", "Delete TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or(6722)", "Delete TextElement: key for a map(6723)", "Delete TagElement: @param(6724)", "Delete SimpleName: value(6725)", "Delete TextElement:  the value to assign to the object's attribute(6726)", "Delete TagElement: @param(6727)", "Delete Javadoc(6728)", "Delete Modifier: public(6729)", "Delete PrimitiveType: void(6730)", "Delete SimpleName: setAttribute(6731)", "Delete SimpleName: Object(6732)", "Delete SimpleType: Object(6733)", "Delete SimpleName: object(6734)", "Delete SingleVariableDeclaration(6735)", "Delete SimpleName: Object(6736)", "Delete SimpleType: Object(6737)", "Delete SimpleName: attribute(6738)", "Delete SingleVariableDeclaration(6739)", "Delete SimpleName: Object(6740)", "Delete SimpleType: Object(6741)", "Delete SimpleName: value(6742)", "Delete SingleVariableDeclaration(6743)", "Delete SimpleName: setAttribute(6744)", "Delete SimpleName: object(6745)", "Delete SimpleName: attribute(6746)", "Delete SimpleName: value(6747)", "Delete NullLiteral(6748)", "Delete MethodInvocation(6749)", "Delete ExpressionStatement(6750)", "Delete Block(6751)", "Delete MethodDeclaration(6752)", "Delete TextElement: Sets an attribute of an object.(6753)", "Delete TagElement(6754)", "Delete SimpleName: object(6755)", "Delete TextElement:  to set the value to(6756)", "Delete TagElement: @param(6757)", "Delete SimpleName: attribute(6758)", "Delete TextElement:  the attribute of the object, e.g. an index (1, 0, 2) or(6759)", "Delete TextElement: key for a map(6760)", "Delete TagElement: @param(6761)", "Delete SimpleName: value(6762)", "Delete TextElement:  the value to assign to the object's attribute(6763)", "Delete TagElement: @param(6764)", "Delete SimpleName: node(6765)", "Delete TextElement:  the node that evaluated as the object(6766)", "Delete TagElement: @param(6767)", "Delete Javadoc(6768)", "Delete Modifier: protected(6769)", "Delete PrimitiveType: void(6770)", "Delete SimpleName: setAttribute(6771)", "Delete SimpleName: Object(6772)", "Delete SimpleType: Object(6773)", "Delete SimpleName: object(6774)", "Delete SingleVariableDeclaration(6775)", "Delete SimpleName: Object(6776)", "Delete SimpleType: Object(6777)", "Delete SimpleName: attribute(6778)", "Delete SingleVariableDeclaration(6779)", "Delete SimpleName: Object(6780)", "Delete SimpleType: Object(6781)", "Delete SimpleName: value(6782)", "Delete SingleVariableDeclaration(6783)", "Delete SimpleName: JexlNode(6784)", "Delete SimpleType: JexlNode(6785)", "Delete SimpleName: node(6786)", "Delete SingleVariableDeclaration(6787)", "Delete SimpleName: isCancelled(6788)", "Delete MethodInvocation(6789)", "Delete QualifiedName: JexlException.Cancel(6790)", "Delete SimpleType: JexlException.Cancel(6791)", "Delete SimpleName: node(6792)", "Delete ClassInstanceCreation(6793)", "Delete ThrowStatement(6794)", "Delete Block(6795)", "Delete IfStatement(6796)", "Delete SimpleName: node(6797)", "Delete NullLiteral(6798)", "Delete InfixExpression: !=(6799)", "Delete SimpleName: cache(6800)", "Delete InfixExpression: &&(6801)", "Delete SimpleName: Object(6802)", "Delete SimpleType: Object(6803)", "Delete SimpleName: cached(6804)", "Delete SimpleName: node(6805)", "Delete SimpleName: jjtGetValue(6806)", "Delete MethodInvocation(6807)", "Delete VariableDeclarationFragment(6808)", "Delete VariableDeclarationStatement(6809)", "Delete SimpleName: cached(6810)", "Delete SimpleName: JexlPropertySet(6811)", "Delete SimpleType: JexlPropertySet(6812)", "Delete InstanceofExpression(6813)", "Delete SimpleName: JexlPropertySet(6814)", "Delete SimpleType: JexlPropertySet(6815)", "Delete SimpleName: setter(6816)", "Delete SimpleName: JexlPropertySet(6817)", "Delete SimpleType: JexlPropertySet(6818)", "Delete SimpleName: cached(6819)", "Delete CastExpression(6820)", "Delete VariableDeclarationFragment(6821)", "Delete VariableDeclarationStatement(6822)", "Delete SimpleName: Object(6823)", "Delete SimpleType: Object(6824)", "Delete SimpleName: eval(6825)", "Delete SimpleName: setter(6826)", "Delete SimpleName: tryInvoke(6827)", "Delete SimpleName: object(6828)", "Delete SimpleName: attribute(6829)", "Delete SimpleName: value(6830)", "Delete MethodInvocation(6831)", "Delete VariableDeclarationFragment(6832)", "Delete VariableDeclarationStatement(6833)", "Delete SimpleName: setter(6834)", "Delete SimpleName: tryFailed(6835)", "Delete SimpleName: eval(6836)", "Delete MethodInvocation(6837)", "Delete PrefixExpression: !(6838)", "Delete ReturnStatement(6839)", "Delete Block(6840)", "Delete IfStatement(6841)", "Delete Block(6842)", "Delete IfStatement(6843)", "Delete Block(6844)", "Delete IfStatement(6845)", "Delete SimpleName: JexlException(6846)", "Delete SimpleType: JexlException(6847)", "Delete SimpleName: xjexl(6848)", "Delete NullLiteral(6849)", "Delete VariableDeclarationFragment(6850)", "Delete VariableDeclarationStatement(6851)", "Delete SimpleName: JexlPropertySet(6852)", "Delete SimpleType: JexlPropertySet(6853)", "Delete SimpleName: vs(6854)", "Delete SimpleName: uberspect(6855)", "Delete SimpleName: getPropertySet(6856)", "Delete SimpleName: object(6857)", "Delete SimpleName: attribute(6858)", "Delete SimpleName: value(6859)", "Delete SimpleName: node(6860)", "Delete MethodInvocation(6861)", "Delete VariableDeclarationFragment(6862)", "Delete VariableDeclarationStatement(6863)", "Delete SimpleName: vs(6864)", "Delete NullLiteral(6865)", "Delete InfixExpression: ==(6866)", "Delete SimpleName: Object(6867)", "Delete SimpleType: Object(6868)", "Delete Dimension(6869)", "Delete ArrayType: Object[](6870)", "Delete SimpleName: narrow(6871)", "Delete SimpleName: value(6872)", "Delete ArrayInitializer(6873)", "Delete VariableDeclarationFragment(6874)", "Delete VariableDeclarationStatement(6875)", "Delete SimpleName: arithmetic(6876)", "Delete SimpleName: narrowArguments(6877)", "Delete SimpleName: narrow(6878)", "Delete MethodInvocation(6879)", "Delete SimpleName: vs(6880)", "Delete SimpleName: uberspect(6881)", "Delete SimpleName: getPropertySet(6882)", "Delete SimpleName: object(6883)", "Delete SimpleName: attribute(6884)", "Delete SimpleName: narrow(6885)", "Delete NumberLiteral: 0(6886)", "Delete ArrayAccess(6887)", "Delete SimpleName: node(6888)", "Delete MethodInvocation(6889)", "Delete Assignment: =(6890)", "Delete ExpressionStatement(6891)", "Delete Block(6892)", "Delete IfStatement(6893)", "Delete Block(6894)", "Delete IfStatement(6895)", "Delete SimpleName: vs(6896)", "Delete NullLiteral(6897)", "Delete InfixExpression: !=(6898)", "Delete SimpleName: vs(6899)", "Delete SimpleName: invoke(6900)", "Delete SimpleName: object(6901)", "Delete SimpleName: value(6902)", "Delete MethodInvocation(6903)", "Delete ExpressionStatement(6904)", "Delete SimpleName: node(6905)", "Delete NullLiteral(6906)", "Delete InfixExpression: !=(6907)", "Delete SimpleName: cache(6908)", "Delete InfixExpression: &&(6909)", "Delete SimpleName: vs(6910)", "Delete SimpleName: isCacheable(6911)", "Delete MethodInvocation(6912)", "Delete InfixExpression: &&(6913)", "Delete SimpleName: node(6914)", "Delete SimpleName: jjtSetValue(6915)", "Delete SimpleName: vs(6916)", "Delete MethodInvocation(6917)", "Delete ExpressionStatement(6918)", "Delete Block(6919)", "Delete IfStatement(6920)", "Delete ReturnStatement(6921)", "Delete Block(6922)", "Delete SimpleName: RuntimeException(6923)", "Delete SimpleType: RuntimeException(6924)", "Delete SimpleName: xrt(6925)", "Delete SingleVariableDeclaration(6926)", "Delete SimpleName: node(6927)", "Delete NullLiteral(6928)", "Delete InfixExpression: ==(6929)", "Delete SimpleName: xrt(6930)", "Delete ThrowStatement(6931)", "Delete Block(6932)", "Delete IfStatement(6933)", "Delete SimpleName: xjexl(6934)", "Delete SimpleName: JexlException(6935)", "Delete SimpleType: JexlException(6936)", "Delete SimpleName: node(6937)", "Delete StringLiteral: \"set object property error\"(6938)", "Delete SimpleName: xrt(6939)", "Delete ClassInstanceCreation(6940)", "Delete Assignment: =(6941)", "Delete ExpressionStatement(6942)", "Delete Block(6943)", "Delete CatchClause(6944)", "Delete SimpleName: Exception(6945)", "Delete SimpleType: Exception(6946)", "Delete SimpleName: xany(6947)", "Delete SingleVariableDeclaration(6948)", "Delete SimpleName: node(6949)", "Delete NullLiteral(6950)", "Delete InfixExpression: ==(6951)", "Delete SimpleName: RuntimeException(6952)", "Delete SimpleType: RuntimeException(6953)", "Delete SimpleName: xany(6954)", "Delete ClassInstanceCreation(6955)", "Delete ThrowStatement(6956)", "Delete Block(6957)", "Delete IfStatement(6958)", "Delete SimpleName: xjexl(6959)", "Delete SimpleName: JexlException(6960)", "Delete SimpleType: JexlException(6961)", "Delete SimpleName: node(6962)", "Delete StringLiteral: \"set object property error\"(6963)", "Delete SimpleName: xany(6964)", "Delete ClassInstanceCreation(6965)", "Delete Assignment: =(6966)", "Delete ExpressionStatement(6967)", "Delete Block(6968)", "Delete CatchClause(6969)", "Delete TryStatement(6970)", "Delete Block(6971)", "Delete IfStatement(6972)", "Delete SimpleName: xjexl(6973)", "Delete NullLiteral(6974)", "Delete InfixExpression: ==(6975)", "Delete SimpleName: node(6976)", "Delete NullLiteral(6977)", "Delete InfixExpression: ==(6978)", "Delete SimpleName: String(6979)", "Delete SimpleType: String(6980)", "Delete SimpleName: error(6981)", "Delete StringLiteral: \"unable to set object property\"(6982)", "Delete StringLiteral: \", class: \"(6983)", "Delete InfixExpression: +(6984)", "Delete SimpleName: object(6985)", "Delete SimpleName: getClass(6986)", "Delete MethodInvocation(6987)", "Delete SimpleName: getName(6988)", "Delete MethodInvocation(6989)", "Delete StringLiteral: \", property: \"(6990)", "Delete SimpleName: attribute(6991)", "Delete StringLiteral: \", argument: \"(6992)", "Delete SimpleName: value(6993)", "Delete SimpleName: getClass(6994)", "Delete MethodInvocation(6995)", "Delete SimpleName: getSimpleName(6996)", "Delete MethodInvocation(6997)", "Delete InfixExpression: +(6998)", "Delete VariableDeclarationFragment(6999)", "Delete VariableDeclarationStatement(7000)", "Delete SimpleName: UnsupportedOperationException(7001)", "Delete SimpleType: UnsupportedOperationException(7002)", "Delete SimpleName: error(7003)", "Delete ClassInstanceCreation(7004)", "Delete ThrowStatement(7005)", "Delete Block(7006)", "Delete IfStatement(7007)", "Delete SimpleName: xjexl(7008)", "Delete QualifiedName: JexlException.Property(7009)", "Delete SimpleType: JexlException.Property(7010)", "Delete SimpleName: node(7011)", "Delete SimpleName: attribute(7012)", "Delete SimpleName: toString(7013)", "Delete MethodInvocation(7014)", "Delete ClassInstanceCreation(7015)", "Delete Assignment: =(7016)", "Delete ExpressionStatement(7017)", "Delete Block(7018)", "Delete IfStatement(7019)", "Delete SimpleName: strict(7020)", "Delete SimpleName: xjexl(7021)", "Delete ThrowStatement(7022)", "Delete Block(7023)", "Delete IfStatement(7024)", "Delete SimpleName: silent(7025)", "Delete PrefixExpression: !(7026)", "Delete SimpleName: logger(7027)", "Delete SimpleName: warn(7028)", "Delete SimpleName: xjexl(7029)", "Delete SimpleName: getMessage(7030)", "Delete MethodInvocation(7031)", "Delete MethodInvocation(7032)", "Delete ExpressionStatement(7033)", "Delete Block(7034)", "Delete IfStatement(7035)", "Delete Block(7036)", "Delete MethodDeclaration(7037)", "Delete TextElement: Unused, satisfy ParserVisitor interface.(7038)", "Delete TagElement(7039)", "Delete SimpleName: node(7040)", "Delete TextElement:  a node(7041)", "Delete TagElement: @param(7042)", "Delete SimpleName: data(7043)", "Delete TextElement:  the data(7044)", "Delete TagElement: @param(7045)", "Delete TextElement:  does not return(7046)", "Delete TagElement: @return(7047)", "Delete Javadoc(7048)", "Delete Modifier: public(7049)", "Delete SimpleName: Object(7050)", "Delete SimpleType: Object(7051)", "Delete SimpleName: visit(7052)", "Delete SimpleName: SimpleNode(7053)", "Delete SimpleType: SimpleNode(7054)", "Delete SimpleName: node(7055)", "Delete SingleVariableDeclaration(7056)", "Delete SimpleName: Object(7057)", "Delete SimpleType: Object(7058)", "Delete SimpleName: data(7059)", "Delete SingleVariableDeclaration(7060)", "Delete SimpleName: UnsupportedOperationException(7061)", "Delete SimpleType: UnsupportedOperationException(7062)", "Delete StringLiteral: \"Not supported yet.\"(7063)", "Delete ClassInstanceCreation(7064)", "Delete ThrowStatement(7065)", "Delete Block(7066)", "Delete MethodDeclaration(7067)", "Delete TextElement: Unused, should throw in Parser.(7068)", "Delete TagElement(7069)", "Delete SimpleName: node(7070)", "Delete TextElement:  a node(7071)", "Delete TagElement: @param(7072)", "Delete SimpleName: data(7073)", "Delete TextElement:  the data(7074)", "Delete TagElement: @param(7075)", "Delete TextElement:  does not return(7076)", "Delete TagElement: @return(7077)", "Delete Javadoc(7078)", "Delete Modifier: public(7079)", "Delete SimpleName: Object(7080)", "Delete SimpleType: Object(7081)", "Delete SimpleName: visit(7082)", "Delete SimpleName: ASTAmbiguous(7083)", "Delete SimpleType: ASTAmbiguous(7084)", "Delete SimpleName: node(7085)", "Delete SingleVariableDeclaration(7086)", "Delete SimpleName: Object(7087)", "Delete SimpleType: Object(7088)", "Delete SimpleName: data(7089)", "Delete SingleVariableDeclaration(7090)", "Delete SimpleName: UnsupportedOperationException(7091)", "Delete SimpleType: UnsupportedOperationException(7092)", "Delete StringLiteral: \"unexpected type of node\"(7093)", "Delete ClassInstanceCreation(7094)", "Delete ThrowStatement(7095)", "Delete Block(7096)", "Delete MethodDeclaration(7097)", "Delete TypeDeclaration: class(7098)"]}}, {"JexlArithmetic_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Array"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.BigDecimal", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.BigInteger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.MathContext", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL TextElement:  2.1", "DEL Modifier: final", "DEL TextElement:  left / right", "DEL SimpleName: left", "DEL NumberLiteral: 0", "DEL SimpleName: String", "DEL SimpleName: comparable", "DEL ReturnStatement", "DEL TextElement:  the attempted target class", "DEL BreakStatement", "DEL TagElement", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL StringLiteral: \":(\"", "DEL SimpleName: r", "DEL SimpleName: l", "DEL SimpleType: BigInteger", "DEL SimpleName: Short", "DEL MethodInvocation", "DEL SimpleName: string", "DEL IfStatement", "DEL SimpleName: valueOf", "DEL SimpleType: Object", "DEL SimpleName: BigInteger", "DEL SimpleName: val", "DEL SimpleName: Boolean", "DEL SimpleName: result", "DEL IfStatement", "DEL SimpleName: strict", "DEL SimpleName: Double", "DEL SimpleName: controlNullNullOperands", "DEL Block", "DEL TextElement: Is Object a whole number.", "DEL VariableDeclarationExpression", "DEL SimpleName: subtract", "DEL SimpleName: eclass", "DEL Block", "DEL SimpleName: BigDecimal", "DEL WildcardType: ?", "DEL SimpleName: left", "DEL SimpleType: BigInteger", "DEL SimpleName: BIGD_DOUBLE_MIN_VALUE", "DEL MethodInvocation", "DEL CastExpression", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL SimpleName: toBigDecimal", "DEL Block", "DEL SimpleName: compareTo", "DEL SimpleType: String", "DEL SimpleName: toString", "DEL TextElement: class allow it.", "DEL Javadoc", "DEL IfStatement", "DEL IfStatement", "DEL StringLiteral: \"%\"", "DEL ReturnStatement", "DEL TextElement: <p>", "DEL SimpleName: isFloatingPoint", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement: Long.MIN_VALUE as BigInteger. ", "DEL SingleVariableDeclaration", "DEL TextElement:  The double coerced value.", "DEL StringLiteral: \"BigDecimal coercion: \"", "DEL InfixExpression: +", "DEL ParenthesizedExpression", "DEL TextElement: Test if either left or right are either a Float or Double.", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL TagElement: @since", "DEL SimpleName: right", "DEL TextElement:  2.1", "DEL QualifiedName: JexlException.NULL_OPERAND", "DEL CastExpression", "DEL TagElement: @return", "DEL SimpleName: BigDecimal", "DEL Javadoc", "DEL SimpleName: left", "DEL SimpleName: equals", "DEL QualifiedName: BigDecimal.ZERO", "DEL IfStatement", "DEL SimpleName: toBoolean", "DEL SimpleName: Double", "DEL SimpleName: MathContext", "DEL QualifiedName: Integer.MIN_VALUE", "DEL InfixExpression: ==", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleType: Double", "DEL Block", "DEL SimpleType: BigDecimal", "DEL ReturnStatement", "DEL TextElement: The big decimal scale. ", "DEL TextElement:  the scale", "DEL SingleVariableDeclaration", "DEL TextElement: Negates a value (unary minus for numbers).", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: l", "DEL SimpleName: roundBigDecimal", "DEL TextElement: Test if left <= right.", "DEL SimpleName: val", "DEL TextElement:  second value", "DEL SimpleName: length", "DEL TextElement: Given an array of objects, attempt to type it more strictly.", "DEL SimpleName: r", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: val", "DEL SimpleName: ArithmeticException", "DEL SimpleName: multiply", "DEL SimpleName: toBigDecimal", "DEL ReturnStatement", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: BigInteger", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleName: left", "DEL SimpleType: Object", "DEL SimpleName: longValue", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL SimpleName: narrowAccept", "DEL InstanceofExpression", "DEL SimpleName: result", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: l", "DEL ParameterizedType: Class<?>", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL Block", "DEL SimpleName: right", "DEL SimpleName: String", "DEL SimpleName: val", "DEL CastExpression", "DEL Block", "DEL ThrowStatement", "DEL FieldDeclaration", "DEL SimpleName: valueOf", "DEL TypeLiteral", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL SimpleName: val", "DEL MethodInvocation", "DEL SimpleName: Double", "DEL SimpleType: Double", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL IfStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: l", "DEL SimpleType: Double", "DEL IfStatement", "DEL StringLiteral: \" \"", "DEL VariableDeclarationFragment", "DEL SimpleName: Double", "DEL SingleVariableDeclaration", "DEL SimpleName: a", "DEL PrimitiveType: boolean", "DEL CharacterLiteral: '.'", "DEL SimpleName: r", "DEL SimpleName: matcher", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: rhs", "DEL SimpleType: Integer", "DEL Javadoc", "DEL TextElement:  Object to be analyzed.", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: string", "DEL SimpleName: right", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL Modifier: final", "DEL ParameterizedType: Comparable<Object>", "DEL SimpleName: mathContext", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL TextElement: <li>If both are BigInteger, treat as BigInteger and perform operation</li>", "DEL SimpleName: toBoolean", "DEL SimpleName: val", "DEL TypeLiteral", "DEL VariableDeclarationFragment", "DEL QualifiedName: MathContext.DECIMAL128", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: BigInteger", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleName: equals", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: NullPointerException", "DEL QualifiedName: BigInteger.ZERO", "DEL SimpleName: Long", "DEL IfStatement", "DEL InfixExpression: ==", "DEL TextElement:  -1 if left  &lt; right; +1 if left &gt > right; 0 if left == right", "DEL SimpleName: result", "DEL SimpleName: left", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: narrowArguments", "DEL IfStatement", "DEL SimpleType: Byte", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: val", "DEL TagElement: @param", "DEL NumberLiteral: 0", "DEL SimpleType: Character", "DEL InstanceofExpression", "DEL ThrowStatement", "DEL SimpleName: negate", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: ||", "DEL TextElement: Add two values together.", "DEL SimpleName: operator", "DEL SimpleName: lenient", "DEL ExpressionStatement", "DEL SimpleName: left", "DEL Block", "DEL SimpleName: val", "DEL SimpleType: BigDecimal", "DEL Block", "DEL SimpleType: BigInteger", "DEL Block", "DEL SimpleName: string", "DEL ClassInstanceCreation", "DEL SimpleName: MathContext", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL SimpleName: Class", "DEL SimpleType: Double", "DEL SimpleName: val", "DEL TagElement", "DEL SimpleName: controlNullOperand", "DEL NumberLiteral: 0", "DEL SimpleType: ArithmeticException", "DEL VariableDeclarationStatement", "DEL InfixExpression: &&", "DEL SimpleName: right", "DEL SimpleType: Number", "DEL WildcardType: ?", "DEL SimpleName: val", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: BigInteger", "DEL IfStatement", "DEL SimpleName: String", "DEL SimpleName: right", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL PrimitiveType: int", "DEL SimpleName: bitwiseAnd", "DEL SimpleName: toDouble", "DEL Block", "DEL SimpleName: l", "DEL SimpleName: Boolean", "DEL Block", "DEL SimpleName: parseDouble", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL IfStatement", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getMathContext", "DEL SimpleType: String", "DEL TextElement:  whether this arithmetic is lenient or strict", "DEL TagElement", "DEL SimpleName: l", "DEL SimpleType: BigInteger", "DEL SimpleName: getMathScale", "DEL SimpleName: right", "DEL SimpleType: ArithmeticException", "DEL SimpleName: Number", "DEL MethodInvocation", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"<=\"", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: right", "DEL PrefixExpression: +", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL SimpleType: String", "DEL SimpleName: toBigInteger", "DEL TextElement:  second value", "DEL InstanceofExpression", "DEL Block", "DEL InstanceofExpression", "DEL SimpleName: isFloatingPointNumber", "DEL TagElement: @param", "DEL TextElement: Is Object a floating point number.", "DEL VariableDeclarationStatement", "DEL SimpleName: valueOf", "DEL SimpleType: Object", "DEL IfStatement", "DEL SimpleType: Exception", "DEL Block", "DEL SimpleName: Object", "DEL Modifier: protected", "DEL PrimitiveType: long", "DEL SimpleName: left", "DEL SimpleName: floatValue", "DEL VariableDeclarationFragment", "DEL SimpleName: doubleValue", "DEL Block", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL SimpleType: Long", "DEL SimpleName: r", "DEL PrimitiveType: long", "DEL Modifier: static", "DEL SimpleName: rhs", "DEL Block", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: strval", "DEL SimpleName: Double", "DEL SimpleType: BigDecimal", "DEL SimpleName: l", "DEL StringLiteral: \"Long coercion: \"", "DEL InfixExpression: <", "DEL SimpleName: right", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL Block", "DEL IfStatement", "DEL Block", "DEL SimpleName: valueOf", "DEL SimpleName: bigdScale", "DEL InfixExpression: ||", "DEL SingleMemberAnnotation", "DEL SimpleName: narrow", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL SimpleName: a", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: val", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: String", "DEL VariableDeclarationExpression", "DEL SimpleName: Object", "DEL Block", "DEL QualifiedName: Integer.MIN_VALUE", "DEL SimpleName: isNumber", "DEL SimpleName: Number", "DEL SimpleType: Number", "DEL SimpleName: Short", "DEL SimpleName: toString", "DEL SimpleName: left", "DEL InfixExpression: ==", "DEL SimpleName: rhs", "DEL TextElement: Performs a bitwise or.", "DEL Block", "DEL SimpleName: right", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: commonClass", "DEL TagElement: @param", "DEL ReturnStatement", "DEL TextElement:  test result.", "DEL SimpleType: BigDecimal", "DEL SimpleName: val", "DEL InfixExpression: <", "DEL Block", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SimpleName: left", "DEL PrimitiveType: long", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: l", "DEL SimpleName: BIGD_DOUBLE_MAX_VALUE", "DEL TagElement: @since", "DEL ReturnStatement", "DEL SimpleName: Double", "DEL InfixExpression: <=", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: lhs", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: val", "DEL NullLiteral", "DEL InfixExpression: <", "DEL Block", "DEL TextElement:  the right operator", "DEL SimpleName: result", "DEL SimpleName: valueOf", "DEL SimpleName: booleanValue", "DEL SimpleName: Comparable", "DEL SimpleName: val", "DEL PrefixExpression: !", "DEL SimpleName: left", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: left", "DEL SimpleType: Object", "DEL SimpleName: roundBigDecimal", "DEL SimpleName: i", "DEL TextElement:  if either left or right is null", "DEL SimpleType: Object", "DEL TagElement: @since", "DEL InfixExpression: !=", "DEL SimpleName: right", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL ConditionalExpression", "DEL QualifiedName: BigInteger.ZERO", "DEL TextElement: Given a BigDecimal, attempt to narrow it to an Integer or Long if it fits if", "DEL SimpleType: Boolean", "DEL Javadoc", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL SimpleType: String", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL SimpleName: narrow", "DEL SimpleType: Double", "DEL PrimitiveType: int", "DEL Block", "DEL QualifiedName: Integer.MAX_VALUE", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleName: booleanValue", "DEL MethodInvocation", "DEL SimpleName: right", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: BigInteger", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: result", "DEL SimpleName: Integer", "DEL ReturnStatement", "DEL SimpleType: ArithmeticException", "DEL SimpleName: result", "DEL SimpleName: right", "DEL SimpleName: right", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: val", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL SimpleName: r", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: Object", "DEL Block", "DEL TextElement:  first value", "DEL SimpleName: valueOf", "DEL IfStatement", "DEL TextElement:  left & right", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL SimpleName: right", "DEL MethodDeclaration", "DEL Block", "DEL Block", "DEL InstanceofExpression", "DEL SimpleType: BigInteger", "DEL SimpleName: valueOf", "DEL SimpleName: toBigInteger", "DEL SimpleName: controlNullOperand", "DEL SimpleName: compareTo", "DEL TextElement:  the other", "DEL SimpleName: remainder", "DEL SimpleType: BigDecimal", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL SimpleName: BigInteger", "DEL SimpleType: BigInteger", "DEL MethodInvocation", "DEL StringLiteral: \"/\"", "DEL TextElement:  the left operand", "DEL TextElement:  the left operand", "DEL Block", "DEL SimpleName: Comparable", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: r", "DEL SimpleName: right", "DEL SimpleName: Array", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleType: Comparable", "DEL SimpleType: BigInteger", "DEL ParenthesizedExpression", "DEL SimpleType: Number", "DEL MethodInvocation", "DEL SimpleName: Float", "DEL TextElement:  the negated value", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: r", "DEL MethodDeclaration", "DEL Modifier: final", "DEL MethodDeclaration", "DEL Block", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL Block", "DEL SimpleName: r", "DEL SimpleName: val", "DEL SimpleName: lhs", "DEL SimpleName: ArithmeticException", "DEL TagElement", "DEL SimpleName: Byte", "DEL ParenthesizedExpression", "DEL SimpleName: BigDecimal", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL NullLiteral", "DEL Modifier: final", "DEL SimpleName: left", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: matches", "DEL SimpleName: val", "DEL SimpleType: BigDecimal", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL SimpleType: Object", "DEL SimpleName: val", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: BigDecimal", "DEL Modifier: protected", "DEL SimpleName: mscale", "DEL CastExpression", "DEL SimpleName: commonClass", "DEL SimpleName: right", "DEL SimpleType: Object", "DEL SimpleType: BigInteger", "DEL Block", "DEL SimpleName: val", "DEL SimpleName: trim", "DEL MethodDeclaration", "DEL SimpleType: Number", "DEL SimpleName: Long", "DEL SimpleName: isNaN", "DEL Javadoc", "DEL ReturnStatement", "DEL TextElement:  Object to be coerced.", "DEL SimpleName: val", "DEL VariableDeclarationFragment", "DEL SimpleType: Double", "DEL QualifiedName: JexlException.NULL_OPERAND", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL NullLiteral", "DEL SimpleName: Character", "DEL VariableDeclarationStatement", "DEL SimpleName: source", "DEL SimpleType: Comparable", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL SingleVariableDeclaration", "DEL SimpleName: left", "DEL MethodInvocation", "DEL ReturnStatement", "DEL PrefixExpression: -", "DEL Dimension", "DEL MethodInvocation", "DEL TextElement:  the right hand side operand that lead to the bigi result", "DEL SimpleName: longValueExact", "DEL SimpleName: l", "DEL SimpleName: r", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL StringLiteral: \">\"", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL PrimitiveType: double", "DEL SimpleName: left", "DEL TextElement: Replace all numbers in an arguments array with the smallest type that will fit.", "DEL SimpleName: getField", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: val", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleType: Character", "DEL SimpleName: val", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: val", "DEL InfixExpression: &&", "DEL SimpleName: valueAsDouble", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: original", "DEL InstanceofExpression", "DEL Modifier: protected", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: toLong", "DEL SimpleName: right", "DEL TextElement: false if no narrowing occured and args array has not been modified", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL SimpleName: right", "DEL MethodInvocation", "DEL SimpleName: left", "DEL Modifier: protected", "DEL SimpleName: BigDecimal", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL TextElement: Creates a JexlArithmetic.", "DEL Block", "DEL TextElement:  the original number", "DEL MethodInvocation", "DEL SimpleType: BigInteger", "DEL Javadoc", "DEL SimpleName: left", "DEL SimpleType: BigDecimal", "DEL NumberLiteral: 0", "DEL ForStatement", "DEL PrefixExpression: +", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL ReturnStatement", "DEL InfixExpression: <=", "DEL Block", "DEL SimpleName: BigInteger", "DEL SimpleName: right", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: right", "DEL TryStatement", "DEL VariableDeclarationStatement", "DEL QualifiedName: Double.NaN", "DEL SimpleName: right", "DEL TextElement:  the right operator", "DEL ThrowStatement", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL TagElement: @throws", "DEL SimpleName: toBigInteger", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: result", "DEL SimpleName: toBigInteger", "DEL ReturnStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: type", "DEL SimpleType: BigInteger", "DEL VariableDeclarationFragment", "DEL SimpleName: original", "DEL SimpleName: valueOf", "DEL SimpleName: val", "DEL VariableDeclarationFragment", "DEL SimpleName: l", "DEL SimpleType: Object", "DEL SimpleName: l", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: Object", "DEL Block", "DEL IfStatement", "DEL TextElement: Coerce to a string.", "DEL Block", "DEL SimpleType: Comparable", "DEL SimpleName: l", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL TextElement:  if strict", "DEL SimpleName: toDouble", "DEL SimpleName: getMathContext", "DEL InfixExpression: ==", "DEL SimpleName: Integer", "DEL SimpleName: compare", "DEL CastExpression", "DEL IfStatement", "DEL SimpleName: ArithmeticException", "DEL Block", "DEL SimpleType: BigDecimal", "DEL Javadoc", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: String", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL IfStatement", "DEL InstanceofExpression", "DEL TagElement: @since", "DEL SimpleType: Boolean", "DEL SimpleName: isFloatingPointNumber", "DEL Block", "DEL SimpleName: toString", "DEL PrimitiveType: double", "DEL SimpleName: Number", "DEL SimpleName: val", "DEL SimpleName: string", "DEL InfixExpression: <", "DEL Block", "DEL SimpleName: r", "DEL SimpleName: left", "DEL SimpleName: valueOf", "DEL SimpleName: newInstance", "DEL SimpleName: r", "DEL CastExpression", "DEL PrimitiveType: boolean", "DEL TagElement: @return", "DEL PrimitiveType: double", "DEL SimpleName: BigDecimal", "DEL SimpleName: BigInteger", "DEL InfixExpression: &&", "DEL SimpleName: longValue", "DEL SimpleName: Comparable", "DEL SimpleName: Object", "DEL SimpleName: eclass", "DEL PrefixExpression: -", "DEL SimpleName: equals", "DEL SimpleName: result", "DEL TextElement:  if val is null and mode is strict.", "DEL SimpleName: rhs", "DEL SimpleName: bigd", "DEL SimpleName: toDouble", "DEL Javadoc", "DEL SimpleName: BigDecimal", "DEL ReturnStatement", "DEL SimpleName: Double", "DEL IfStatement", "DEL SimpleName: right", "DEL SimpleName: controlNullNullOperands", "DEL Modifier: public", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL ExpressionStatement", "DEL SimpleName: Double", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: left", "DEL SimpleName: charValue", "DEL InfixExpression: ==", "DEL SimpleName: Number", "DEL SimpleName: compareTo", "DEL TextElement:  the original number.", "DEL MethodInvocation", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: l", "DEL SimpleName: result", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL TextElement:  the orginal source class", "DEL SimpleName: toString", "DEL InfixExpression: ||", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: valueAsByte", "DEL SimpleName: bigdContext", "DEL SimpleName: narrow", "DEL NullLiteral", "DEL Modifier: protected", "DEL ReturnStatement", "DEL Modifier: final", "DEL Block", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL InfixExpression: <", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL Block", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL SimpleName: BigDecimal", "DEL Block", "DEL SimpleName: left", "DEL SimpleName: Long", "DEL SimpleName: narg", "DEL SimpleName: valueOf", "DEL InstanceofExpression", "DEL SimpleName: r", "DEL TagElement: @param", "DEL SimpleType: Long", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL TagElement: @param", "DEL SimpleType: ArithmeticException", "DEL TagElement", "DEL TagElement: @param", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Short", "DEL MethodInvocation", "DEL SimpleName: val", "DEL CastExpression", "DEL SimpleName: original", "DEL SimpleType: Field", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: val", "DEL SimpleName: Object", "DEL Block", "DEL TextElement:  first value", "DEL SimpleName: valueAsDouble", "DEL Modifier: public", "DEL CastExpression", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL TextElement: Coerce to a long (not a java.lang.Long).", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL TextElement: Get a BigInteger from the object passed.", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: Number", "DEL SimpleName: size", "DEL InstanceofExpression", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL CastExpression", "DEL ReturnStatement", "DEL SimpleName: left", "DEL SimpleName: left", "DEL NumberLiteral: 1", "DEL TextElement:  the BigInteger to narrow", "DEL SimpleName: roundBigDecimal", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: NullPointerException", "DEL InfixExpression: >", "DEL Block", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL TextElement: All arithmetic operators (+, - , *, /, %) follow the same rules regarding their arguments.", "DEL SimpleType: Float", "DEL SimpleType: ArithmeticException", "DEL MethodInvocation", "DEL SimpleName: l", "DEL SimpleName: right", "DEL VariableDeclarationFragment", "DEL SimpleName: r", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: Boolean", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL SimpleName: string", "DEL VariableDeclarationFragment", "DEL TextElement: <p>", "DEL TextElement:  2.1", "DEL TextElement: Performs a bitwise and.", "DEL StringLiteral: \"unchecked\"", "DEL TagElement: @param", "DEL CastExpression", "DEL SimpleName: Character", "DEL VariableDeclarationFragment", "DEL SimpleName: eclass", "DEL SimpleType: ArithmeticException", "DEL InfixExpression: <", "DEL TextElement:  first value", "DEL MethodInvocation", "DEL SimpleName: left", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: val", "DEL SimpleName: val", "DEL SimpleName: narrow", "DEL Block", "DEL TagElement", "DEL IfStatement", "DEL TextElement: </p>", "DEL SimpleName: left", "DEL SimpleName: Double", "DEL VariableDeclarationStatement", "DEL SimpleType: BigDecimal", "DEL ReturnStatement", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL SimpleName: toBigDecimal", "DEL SimpleName: l", "DEL Block", "DEL TextElement:  the argument array", "DEL Block", "DEL SimpleName: valueAsInt", "DEL Block", "DEL InstanceofExpression", "DEL PrimitiveType: long", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: val", "DEL FieldAccess", "DEL SimpleType: BigDecimal", "DEL SimpleName: val", "DEL SimpleName: val", "DEL CatchClause", "DEL SimpleName: Integer", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL NullLiteral", "DEL PrefixExpression: -", "DEL IfStatement", "DEL TagElement: @return", "DEL SimpleType: ArithmeticException", "DEL TextElement: <li>If all objects are Numbers, the array returned will be an array of Numbers</li>", "DEL SimpleName: right", "DEL QualifiedName: BigInteger.ZERO", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL SimpleName: strict", "DEL SimpleName: BigDecimal", "DEL TagElement", "DEL InfixExpression: +", "DEL SimpleName: BigInteger", "DEL SimpleType: Boolean", "DEL SimpleName: result", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL TextElement:  if val is null and mode is strict.", "DEL SimpleName: Float", "DEL SimpleName: Double", "DEL ReturnStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: lenient", "DEL SimpleName: Object", "DEL QualifiedName: Short.MAX_VALUE", "DEL SimpleName: result", "DEL ReturnStatement", "DEL SimpleName: BigDecimal", "DEL InstanceofExpression", "DEL PrefixExpression: !", "DEL SimpleName: Object", "DEL SimpleName: charValue", "DEL SimpleName: Integer", "DEL MethodDeclaration", "DEL Block", "DEL TextElement: Given a BigInteger, narrow it to an Integer or Long if it fits and the arguments", "DEL TextElement:  test result.", "DEL MethodInvocation", "DEL SimpleName: val", "DEL ThrowStatement", "DEL Block", "DEL InfixExpression: ||", "DEL Block", "DEL TextElement: <li>If either is a BigDecimal, coerce both to BigDecimal and and perform operation</li>", "DEL TextElement: </ol>", "DEL SimpleName: r", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SimpleName: dval", "DEL SimpleType: Boolean", "DEL IfStatement", "DEL SimpleType: Object", "DEL SimpleName: o", "DEL PrefixExpression: !", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL Modifier: public", "DEL TextElement: Performs a bitwise xor.", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: left", "DEL SimpleType: BigDecimal", "DEL SimpleName: dval", "DEL SimpleName: l", "DEL SimpleName: val", "DEL SimpleType: Long", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: bigd", "DEL SimpleName: r", "DEL InstanceofExpression", "DEL PrefixExpression: !", "DEL TagElement: @param", "DEL SimpleType: BigInteger", "DEL Block", "DEL SimpleType: BigDecimal", "DEL TextElement:  second value", "DEL CastExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: lenient", "DEL SimpleName: u", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL PrefixExpression: -", "DEL VariableDeclarationFragment", "DEL Block", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL SimpleName: controlNullOperand", "DEL SimpleName: equals", "DEL SimpleName: Double", "DEL TagElement", "DEL TextElement: The big decimal math context. ", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: left", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: doubleValue", "DEL QualifiedName: Double.MAX_VALUE", "DEL SimpleName: bitwiseOr", "DEL PrimitiveType: long", "DEL Block", "DEL NumberLiteral: 0", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL SimpleName: val", "DEL InstanceofExpression", "DEL SimpleType: Number", "DEL ThrowStatement", "DEL ReturnStatement", "DEL SimpleType: Boolean", "DEL SingleVariableDeclaration", "DEL TextElement: </p>", "DEL SimpleName: right", "DEL SimpleName: String", "DEL TryStatement", "DEL SimpleName: compare", "DEL SimpleName: commonClass", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: comparable", "DEL SimpleName: val", "DEL MethodInvocation", "DEL TextElement:  left | right", "DEL SimpleName: BigDecimal", "DEL ReturnStatement", "DEL SimpleName: parseLong", "DEL NullLiteral", "DEL CastExpression", "DEL QualifiedName: args.length", "DEL SimpleName: r", "DEL TagElement", "DEL SimpleName: left", "DEL SimpleName: right", "DEL PrimitiveType: short", "DEL SimpleName: Double", "DEL Javadoc", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL TagElement: @throws", "DEL InfixExpression: ==", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: l", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: operator", "DEL SimpleName: setScale", "DEL TagElement: @param", "DEL TextElement: The result of +,/,-,*,% when both operands are null.", "DEL ReturnStatement", "DEL SimpleType: Character", "DEL SimpleType: BigDecimal", "DEL SimpleName: ArithmeticException", "DEL SimpleName: getName", "DEL InstanceofExpression", "DEL Block", "DEL SimpleName: toLong", "DEL SimpleName: result", "DEL SingleVariableDeclaration", "DEL TextElement:  2.1", "DEL ReturnStatement", "DEL SimpleName: number", "DEL SimpleName: Character", "DEL SingleVariableDeclaration", "DEL TextElement:  the left hand side operand that lead to the bigd result", "DEL SimpleName: set", "DEL SimpleName: right", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: l", "DEL SimpleName: narrow", "DEL Modifier: public", "DEL TextElement:  an Integer or Long if narrowing is possible, the original BigInteger otherwise", "DEL SimpleType: BigDecimal", "DEL IfStatement", "DEL TextElement:  2.1", "DEL SimpleName: ArithmeticException", "DEL TextElement:  second value", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: right", "DEL Block", "DEL CastExpression", "DEL InstanceofExpression", "DEL IfStatement", "DEL SimpleName: val", "DEL SimpleName: a", "DEL InfixExpression: ==", "DEL SimpleName: isLenient", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: MathContext", "DEL InfixExpression: ==", "DEL SimpleName: Double", "DEL SimpleType: Object", "DEL SimpleType: Number", "DEL SimpleName: l", "DEL SimpleName: Integer", "DEL SimpleType: BigDecimal", "DEL SimpleName: i", "DEL SimpleName: BigInteger", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: left", "DEL SimpleName: rhs", "DEL StringLiteral: \":(\"", "DEL SimpleType: Object", "DEL QualifiedName: BigDecimal.ZERO", "DEL BooleanLiteral: false", "DEL SimpleName: original", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: MathContext", "DEL SingleVariableDeclaration", "DEL SimpleName: rhs", "DEL TagElement: @throws", "DEL Block", "DEL SimpleName: isLenient", "DEL SingleVariableDeclaration", "DEL InfixExpression: /", "DEL ReturnStatement", "DEL SimpleName: val", "DEL SimpleType: Integer", "DEL SimpleName: value", "DEL SimpleName: right", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: Boolean", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL IfStatement", "DEL ReturnStatement", "DEL InstanceofExpression", "DEL NumberLiteral: 0", "DEL SimpleName: getClass", "DEL TagElement: @since", "DEL VariableDeclarationFragment", "DEL SimpleName: arg", "DEL SimpleName: result", "DEL SimpleType: ArithmeticException", "DEL SimpleName: concat", "DEL Modifier: public", "DEL SimpleName: ArithmeticException", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL InfixExpression: &&", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL TextElement: The MathContext instance used for +,-,/,*,% operations on big decimals.", "DEL SimpleName: mathContext", "DEL PrimitiveType: short", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL VariableDeclarationFragment", "DEL SimpleName: val", "DEL ReturnStatement", "DEL IfStatement", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: compare", "DEL TagElement", "DEL TextElement: Multiply the left value by the right.", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: val", "DEL Block", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL TextElement: Test if left >= right.", "DEL StringLiteral: \"Object comparison:(\"", "DEL SimpleName: Byte", "DEL InstanceofExpression", "DEL SimpleType: Object", "DEL PrimitiveType: double", "DEL SimpleName: right", "DEL SimpleName: right", "DEL TagElement: @return", "DEL SimpleName: getMathContext", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: string", "DEL SimpleName: getMathContext", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: ArithmeticException", "DEL PrimitiveType: boolean", "DEL Block", "DEL NullLiteral", "DEL ThisExpression", "DEL IfStatement", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: val", "DEL SimpleName: right", "DEL SimpleType: Integer", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: left", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL SimpleName: roundBigDecimal", "DEL TextElement:  2.1", "DEL Block", "DEL TagElement: @return", "DEL SimpleType: Comparable", "DEL SimpleName: toBigDecimal", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: left", "DEL IfStatement", "DEL Block", "DEL Block", "DEL InstanceofExpression", "DEL TagElement: @param", "DEL SimpleName: val", "DEL TextElement: Given a Number, return back the value using the smallest type the result", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL SimpleName: original", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL Block", "DEL ReturnStatement", "DEL StringLiteral: \"\"", "DEL QualifiedName: BigDecimal.ZERO", "DEL SimpleName: original", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL SimpleName: result", "DEL SimpleName: toBigInteger", "DEL MethodInvocation", "DEL SimpleName: Number", "DEL MethodInvocation", "DEL TextElement: treat as Strings and do concatenation.", "DEL SimpleName: negate", "DEL SimpleName: isFloatingPointNumber", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: doubleValue", "DEL VariableDeclarationExpression", "DEL SimpleType: BigDecimal", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: Object", "DEL PrimitiveType: int", "DEL SimpleName: Number", "DEL IfStatement", "DEL TextElement: Get a BigDecimal from the object passed.", "DEL InfixExpression: ==", "DEL SimpleName: val", "DEL TagElement", "DEL PrimitiveType: int", "DEL PrimitiveType: double", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL SimpleName: String", "DEL TagElement", "DEL NullLiteral", "DEL SingleMemberAnnotation", "DEL QualifiedName: Integer.MIN_VALUE", "DEL SimpleName: narrowed", "DEL TextElement:  test result.", "DEL Modifier: protected", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL TextElement: <li>Else treat as BigInteger, perform operation and attempt to narrow result:", "DEL SimpleName: equals", "DEL TextElement:  The long coerced value.", "DEL SimpleName: operator", "DEL SimpleName: result", "DEL PrimitiveType: double", "DEL Javadoc", "DEL InstanceofExpression", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Integer", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL TextElement: Note that the only exception throw by JexlArithmetic is ArithmeticException.", "DEL SimpleName: narrow", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Block", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleType: BigInteger", "DEL SimpleName: Number", "DEL TagElement: @since", "DEL Modifier: final", "DEL IfStatement", "DEL TextElement: <li>if both arguments can be narrowed to Long, narrow result to Long</li>", "DEL SimpleName: intValue", "DEL Block", "DEL SimpleType: Number", "DEL SimpleType: Number", "DEL TextElement:  the object to be tested", "DEL ReturnStatement", "DEL SimpleName: Number", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL TagElement: @param", "DEL ParameterizedType: Class<?>", "DEL InstanceofExpression", "DEL TagElement: @return", "DEL SimpleName: Class", "DEL TagElement: @return", "DEL TextElement:  the big decimal to round", "DEL VariableDeclarationFragment", "DEL Block", "DEL Block", "DEL NullLiteral", "DEL SimpleName: right", "DEL SimpleName: value", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleType: BigDecimal", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: val", "DEL ThrowStatement", "DEL SimpleName: toLong", "DEL SimpleName: Object", "DEL SimpleType: Double", "DEL NumberLiteral: 0", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleName: toLong", "DEL TextElement:  Object to be coerced.", "DEL ExpressionStatement", "DEL SimpleName: val", "DEL IfStatement", "DEL StringLiteral: \"\"", "DEL SimpleType: BigInteger", "DEL PrimitiveType: float", "DEL SimpleName: i", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: narrowAccept", "DEL SimpleName: val", "DEL InstanceofExpression", "DEL SimpleName: Double", "DEL SimpleName: right", "DEL InfixExpression: &&", "DEL SimpleName: val", "DEL SimpleName: roundBigDecimal", "DEL SimpleName: valueAsByte", "DEL SimpleType: Byte", "DEL VariableDeclarationFragment", "DEL SimpleName: left", "DEL SimpleName: val", "DEL PrimitiveType: byte", "DEL SimpleName: String", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleType: BigDecimal", "DEL SimpleName: original", "DEL MethodInvocation", "DEL Block", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL NullLiteral", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL PrimitiveType: double", "DEL ReturnStatement", "DEL TagElement: @return", "DEL SimpleName: narrowBigDecimal", "DEL SimpleName: Object", "DEL SimpleName: narg", "DEL BooleanLiteral: true", "DEL SimpleName: BigDecimal", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InstanceofExpression", "DEL SimpleName: valueOf", "DEL SimpleName: arg", "DEL InstanceofExpression", "DEL SimpleType: Object", "DEL SimpleName: result", "DEL NullLiteral", "DEL SimpleName: controlNullOperand", "DEL SimpleName: original", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement:  a BigDecimal.", "DEL TextElement:  ~val", "DEL TagElement: @since", "DEL Assignment: =", "DEL MethodInvocation", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: left", "DEL SimpleType: BigInteger", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: commonClass", "DEL InstanceofExpression", "DEL SimpleName: valueAsShort", "DEL InstanceofExpression", "DEL SimpleType: Character", "DEL TagElement: @param", "DEL SimpleName: r", "DEL SimpleName: untyped", "DEL NumberLiteral: 1.", "DEL CastExpression", "DEL TagElement", "DEL TextElement:  the operand", "DEL SimpleName: ArithmeticException", "DEL FieldDeclaration", "DEL QualifiedName: Integer.MIN_VALUE", "DEL SingleVariableDeclaration", "DEL SimpleName: val", "DEL TryStatement", "DEL SimpleName: value", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleType: Double", "DEL VariableDeclarationStatement", "DEL SimpleName: lenient", "DEL MethodInvocation", "DEL SimpleType: String", "DEL Block", "DEL SimpleType: Double", "DEL TagElement", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: BigInteger", "DEL NullLiteral", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: BigInteger", "DEL InstanceofExpression", "DEL InfixExpression: >", "DEL SimpleName: val", "DEL Block", "DEL SimpleName: toString", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: longValue", "DEL Block", "DEL TextElement:  one object to test", "DEL SimpleName: narrow", "DEL SimpleType: java.util.regex.Pattern", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SimpleType: BigInteger", "DEL SimpleName: lhs", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL TextElement:  2.1", "DEL SimpleName: BigInteger", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: r", "DEL SimpleName: Boolean", "DEL SimpleName: charValue", "DEL IfStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement", "DEL NumberLiteral: 0", "DEL SimpleName: value", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleType: BigDecimal", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL SimpleName: left", "DEL SimpleName: strval", "DEL VariableDeclarationStatement", "DEL TextElement:  left * right.", "DEL TextElement: Throw a NPE if arithmetic is strict.", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL SimpleName: narrow", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL SimpleName: bigd", "DEL BooleanLiteral: true", "DEL SimpleName: equals", "DEL SimpleName: Byte", "DEL Block", "DEL BooleanLiteral: false", "DEL SimpleName: l", "DEL SimpleName: left", "DEL SimpleName: bigi", "DEL TagElement: @return", "DEL ReturnStatement", "DEL SimpleName: toDouble", "DEL Modifier: protected", "DEL TagElement: @param", "DEL SimpleName: r", "DEL SimpleName: indexOf", "DEL SingleVariableDeclaration", "DEL SimpleName: val", "DEL PrimitiveType: double", "DEL SimpleName: Double", "DEL SimpleType: String", "DEL SimpleType: Boolean", "DEL InstanceofExpression", "DEL Modifier: public", "DEL StringLiteral: \"%\"", "DEL StringLiteral: \"BigInteger coercion: \"", "DEL Block", "DEL Block", "DEL SimpleName: doubleValue", "DEL SimpleType: BigDecimal", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL SimpleName: Array", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: BigDecimal", "DEL TextElement:  the target narrow class", "DEL SimpleType: BigInteger", "DEL InfixExpression: ==", "DEL SimpleName: left", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TextElement: Given a Number, return back the value attempting to narrow it to a target class.", "DEL MethodInvocation", "DEL SimpleName: r", "DEL StringLiteral: \"TYPE\"", "DEL SimpleName: r", "DEL SimpleName: number", "DEL TagElement: @since", "DEL Javadoc", "DEL TextElement: Whether we consider the narrow class as a potential candidate for narrowing the source.", "DEL MethodInvocation", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: ArithmeticException", "DEL TagElement: @param", "DEL SimpleName: Integer", "DEL VariableDeclarationFragment", "DEL SimpleName: left", "DEL CastExpression", "DEL MethodDeclaration", "DEL TextElement:  left - right.", "DEL IfStatement", "DEL InfixExpression: ||", "DEL QualifiedName: BigDecimal.ZERO", "DEL SimpleName: narrow", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: l", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: right", "DEL SimpleName: left", "DEL ReturnStatement", "DEL Modifier: protected", "DEL VariableDeclarationStatement", "DEL SimpleName: right", "DEL SimpleName: r", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL SimpleName: toBigInteger", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleType: Double", "DEL TextElement:  the left hand side operand that lead to the bigi result", "DEL VariableDeclarationFragment", "DEL SimpleName: val", "DEL SimpleName: valueOf", "DEL SimpleName: strict", "DEL SimpleName: left", "DEL TagElement: @param", "DEL SimpleName: subtract", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TextElement: Long.MAX_VALUE as BigInteger. ", "DEL CastExpression", "DEL SimpleType: Object", "DEL IfStatement", "DEL SimpleName: right", "DEL SimpleName: untyped", "DEL SimpleName: left", "DEL ParenthesizedExpression", "DEL ParenthesizedExpression", "DEL SimpleName: Short", "DEL SimpleName: narrowBigInteger", "DEL ReturnStatement", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL SimpleName: left", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL SimpleType: Double", "DEL SimpleName: val", "DEL SimpleName: right", "DEL SimpleName: isFloatingPointNumber", "DEL MethodInvocation", "DEL TextElement:  a value of the smallest type the original number will fit into.", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: BigInteger", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleName: BigDecimal", "DEL VariableDeclarationStatement", "DEL SimpleName: BigInteger", "DEL Modifier: final", "DEL StringLiteral: \"Object negation:(\"", "DEL SimpleName: u", "DEL SimpleType: MathContext", "DEL SimpleName: toBigDecimal", "DEL ConditionalExpression", "DEL InfixExpression: &&", "DEL ParenthesizedExpression", "DEL Modifier: static", "DEL Block", "DEL TextElement:  Object to be coerced.", "DEL SimpleName: l", "DEL TypeLiteral", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: typed", "DEL MethodInvocation", "DEL TextElement: Performs a bitwise complement.", "DEL ParameterizedType: Class<?>", "DEL TextElement:  if right == 0", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL ForStatement", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleType: Number", "DEL ParenthesizedExpression", "DEL InstanceofExpression", "DEL SimpleType: Double", "DEL TagElement", "DEL SimpleType: java.util.regex.Pattern", "DEL ConstructorInvocation", "DEL SimpleName: toBigDecimal", "DEL SimpleType: Object", "DEL SimpleName: narrowBigInteger", "DEL PrefixExpression: +", "DEL WildcardType: ?", "DEL SimpleName: left", "DEL Block", "DEL SimpleName: right", "DEL Javadoc", "DEL SimpleName: l", "DEL SimpleName: lenient", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: bigi", "DEL SimpleName: right", "DEL SimpleName: BigDecimal", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL TextElement:  Integer(0) if lenient", "DEL ThisExpression", "DEL StringLiteral: \")\"", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: isNaN", "DEL CastExpression", "DEL TagElement: @return", "DEL SimpleName: rhs", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL QualifiedName: Double.MIN_VALUE", "DEL SimpleName: right", "DEL NumberLiteral: 1", "DEL SimpleName: left", "DEL InfixExpression: *", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: BigInteger", "DEL MethodInvocation", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: BigDecimal", "DEL BooleanLiteral: true", "DEL SimpleName: equals", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL TextElement:  the BigDecimal to narrow", "DEL InstanceofExpression", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Modifier: public", "DEL CastExpression", "DEL SimpleName: Class", "DEL SimpleName: getClass", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: toString", "DEL SimpleName: valueAsLong", "DEL SimpleName: isNumberable", "DEL Modifier: protected", "DEL SimpleType: BigDecimal", "DEL InfixExpression: ||", "DEL SimpleType: Number", "DEL SimpleName: shortValue", "DEL SimpleName: isNaN", "DEL Assignment: =", "DEL PrefixExpression: !", "DEL ReturnStatement", "DEL SimpleName: JexlArithmetic", "DEL SimpleName: val", "DEL NullLiteral", "DEL TextElement:  2.0", "DEL ReturnStatement", "DEL InstanceofExpression", "DEL SimpleName: commonClass", "DEL TagElement: @param", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleType: Double", "DEL SimpleName: toLong", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL QualifiedName: Boolean.FALSE", "DEL CastExpression", "DEL SimpleType: Number", "DEL SimpleName: right", "DEL Modifier: protected", "DEL SimpleName: compare", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: left", "DEL VariableDeclarationStatement", "DEL TagElement: @return", "DEL SimpleName: bigd", "DEL TagElement", "DEL TextElement:  2.1", "DEL VariableDeclarationStatement", "DEL SimpleName: Double", "DEL InfixExpression: +", "DEL SimpleName: val", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: result", "DEL NullLiteral", "DEL Modifier: protected", "DEL SimpleName: BigDecimal", "DEL SimpleName: isNumber", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: BigInteger", "DEL SimpleName: left", "DEL QualifiedName: java.util.regex.Pattern", "DEL SimpleName: Long", "DEL VariableDeclarationFragment", "DEL SimpleName: right", "DEL Block", "DEL SimpleName: divide", "DEL SimpleName: getName", "DEL MethodDeclaration", "DEL StringLiteral: \"\"", "DEL TextElement:  the left operand", "DEL VariableDeclarationStatement", "DEL InfixExpression: <=", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement:  2.1", "DEL SimpleName: Character", "DEL Modifier: public", "DEL StringLiteral: \")\"", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleType: BigInteger", "DEL TagElement", "DEL SimpleName: val", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: number", "DEL TagElement: @throws", "DEL ExpressionStatement", "DEL ThrowStatement", "DEL SimpleName: left", "DEL SimpleName: toDouble", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: getMathContext", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: Integer", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL TextElement:  2.1", "DEL ThrowStatement", "DEL SimpleName: Float", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL SimpleName: add", "DEL SimpleName: r", "DEL SimpleName: source", "DEL InfixExpression: ||", "DEL TextElement: Test if left regexp matches right.", "DEL MethodInvocation", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: l", "DEL Block", "DEL SimpleType: BigDecimal", "DEL PrimitiveType: boolean", "DEL InfixExpression: ||", "DEL SimpleName: left", "DEL SimpleName: left", "DEL SimpleName: right", "DEL TextElement:  true if attempt to narrow source to target is accepted", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: right", "DEL TagElement", "DEL SimpleName: doubleValue", "DEL SimpleName: valueOf", "DEL SimpleName: compareTo", "DEL SimpleName: Number", "DEL SimpleName: bigd", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL Block", "DEL PrefixExpression: -", "DEL SimpleName: bigdScale", "DEL Block", "DEL SimpleName: Number", "DEL QualifiedName: Boolean.TRUE", "DEL PrefixExpression: ++", "DEL SimpleName: BigDecimal", "DEL TextElement:  first value", "DEL SimpleName: left", "DEL Block", "DEL SimpleName: arg", "DEL SimpleName: JexlArithmetic", "DEL ReturnStatement", "DEL SimpleName: size", "DEL NumberLiteral: 0L", "DEL Block", "DEL SimpleName: BigDecimal", "DEL Block", "DEL SimpleName: left", "DEL SimpleName: val", "DEL SimpleType: Class", "DEL SimpleName: val", "DEL NullLiteral", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleType: Number", "DEL SimpleName: BigDecimal", "DEL IfStatement", "DEL SimpleName: Long", "DEL SimpleName: left", "DEL IfStatement", "DEL TextElement: <li>Else return result as BigInteger</li>", "DEL TagElement: @return", "DEL ReturnStatement", "DEL SimpleName: Class", "DEL TextElement:  if right == 0.0", "DEL SimpleName: Float", "DEL SimpleName: equals", "DEL SimpleName: size", "DEL QualifiedName: Integer.MAX_VALUE", "DEL InfixExpression: <=", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: narrow", "DEL SimpleName: left", "DEL SimpleName: left", "DEL Assignment: =", "DEL ReturnStatement", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: BIGD_DOUBLE_MAX_VALUE", "DEL MethodInvocation", "DEL Javadoc", "DEL Block", "DEL BooleanLiteral: false", "DEL NumberLiteral: 0", "DEL SimpleName: right", "DEL SimpleName: NullPointerException", "DEL InstanceofExpression", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Object", "DEL TextElement:  first value", "DEL SimpleName: commonClass", "DEL SimpleName: left", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: left", "DEL SimpleName: isFloatingPointNumber", "DEL SimpleName: valueOf", "DEL SimpleType: BigInteger", "DEL VariableDeclarationStatement", "DEL SimpleName: bigd", "DEL SimpleName: untyped", "DEL TextElement:  The boolean coerced value, or false if none possible.", "DEL QualifiedName: BigInteger.ZERO", "DEL Block", "DEL SimpleName: right", "DEL SimpleName: right", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: l", "DEL TypeLiteral", "DEL QualifiedName: Byte.MAX_VALUE", "DEL ClassInstanceCreation", "DEL CastExpression", "DEL TypeLiteral", "DEL SimpleName: narrowBigDecimal", "DEL TagElement: @throws", "DEL Javadoc", "DEL SimpleName: BigInteger", "DEL VariableDeclarationStatement", "DEL TextElement:  The String coerced value.", "DEL SimpleName: BigInteger", "DEL InfixExpression: &&", "DEL StringLiteral: \")\"", "DEL SimpleName: original", "DEL VariableDeclarationFragment", "DEL SimpleName: narrowAccept", "DEL SimpleName: r", "DEL IfStatement", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleType: Byte", "DEL SimpleName: r", "DEL SimpleName: BigDecimal", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: l", "DEL SimpleType: BigInteger", "DEL SimpleName: lhs", "DEL SimpleName: l", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL TextElement:  first value", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL InstanceofExpression", "DEL SimpleType: BigDecimal", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleType: BigDecimal", "DEL ReturnStatement", "DEL PrefixExpression: -", "DEL MethodInvocation", "DEL DoStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: isNumber", "DEL Javadoc", "DEL SimpleName: doubleValue", "DEL Block", "DEL BooleanLiteral: false", "DEL TextElement:  the right hand side operand that lead to the bigd result", "DEL SimpleName: indexOf", "DEL SimpleName: mscale", "DEL SimpleName: original", "DEL CastExpression", "DEL SimpleName: Object", "DEL Block", "DEL IfStatement", "DEL SimpleName: BigInteger", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Boolean", "DEL VariableDeclarationFragment", "DEL TextElement: </ul>", "DEL InstanceofExpression", "DEL SimpleType: BigDecimal", "DEL TextElement:  second value", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL TextElement: <li>If all objects are convertible to a primitive type, the array returned will be an array", "DEL SimpleName: r", "DEL InfixExpression: ||", "DEL IfStatement", "DEL SimpleType: BigInteger", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL SimpleName: left", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL ThrowStatement", "DEL Assignment: =", "DEL QualifiedName: BigDecimal.ZERO", "DEL SimpleType: BigDecimal", "DEL SimpleName: BigInteger", "DEL ReturnStatement", "DEL SimpleName: valueAsBigI", "DEL SimpleName: Float", "DEL Block", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: right", "DEL SimpleName: right", "DEL TextElement:  a BigDecimal.", "DEL SimpleName: commonClass", "DEL Assignment: =", "DEL Block", "DEL VariableDeclarationFragment", "DEL Block", "DEL InfixExpression: ==", "DEL StringLiteral: \":(\"", "DEL SimpleName: Byte", "DEL InfixExpression: ||", "DEL SimpleName: isFloatingPointNumber", "DEL SimpleName: l", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: BigInteger", "DEL SimpleName: left", "DEL SimpleType: String", "DEL SimpleName: toLong", "DEL SimpleType: Number", "DEL SimpleName: Double", "DEL ReturnStatement", "DEL CastExpression", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: left", "DEL PrimitiveType: double", "DEL SimpleName: valueAsFloat", "DEL SingleVariableDeclaration", "DEL SimpleName: Long", "DEL SimpleName: greaterThan", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: val", "DEL TagElement", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL SimpleName: mathScale", "DEL TextElement: Coerce to a boolean (not a java.lang.Boolean).", "DEL SimpleType: String", "DEL TextElement:  second value", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: compareTo", "DEL SimpleName: indexOf", "DEL InfixExpression: ||", "DEL InstanceofExpression", "DEL SimpleName: Double", "DEL PrefixExpression: -", "DEL InstanceofExpression", "DEL InstanceofExpression", "DEL InstanceofExpression", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL SimpleName: eclass", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: left", "DEL SingleVariableDeclaration", "DEL SimpleName: a", "DEL SimpleName: getSuperclass", "DEL PrimitiveType: long", "DEL TextElement: <li>If both are null, result is 0</li>", "DEL Block", "DEL SimpleType: Double", "DEL SimpleType: BigDecimal", "DEL SimpleName: right", "DEL SimpleName: r", "DEL SimpleName: left", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: Number", "DEL SimpleName: right", "DEL IfStatement", "DEL MethodInvocation", "DEL ArrayAccess", "DEL ReturnStatement", "DEL TagElement: @return", "DEL SimpleName: commonClass", "DEL StringLiteral: \"\"", "DEL SimpleType: Float", "DEL SimpleType: Float", "DEL CastExpression", "DEL SimpleName: l", "DEL VariableDeclarationFragment", "DEL SimpleName: isNaN", "DEL SimpleName: args", "DEL TagElement: @param", "DEL SimpleType: BigInteger", "DEL InfixExpression: ==", "DEL Block", "DEL TextElement:  the right operator", "DEL InfixExpression: ||", "DEL SimpleName: rhs", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleName: toDouble", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: right", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NullLiteral", "DEL TagElement", "DEL Block", "DEL CastExpression", "DEL InfixExpression: >=", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: val", "DEL InfixExpression: &&", "DEL SimpleName: val", "DEL SimpleName: o", "DEL SimpleName: compareTo", "DEL SimpleType: Double", "DEL SimpleName: l", "DEL IfStatement", "DEL SimpleName: controlNullNullOperands", "DEL SimpleName: r", "DEL Block", "DEL SimpleType: Double", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: left", "DEL SimpleName: equals", "DEL SimpleName: isFloatingPointNumber", "DEL SimpleName: BigInteger", "DEL SimpleName: bigd", "DEL SimpleType: Float", "DEL TagElement", "DEL SimpleName: toDouble", "DEL SimpleName: BigInteger", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: lhs", "DEL InfixExpression: %", "DEL SimpleName: value", "DEL SimpleName: toDouble", "DEL CastExpression", "DEL Modifier: protected", "DEL TextElement:  the scale used for big decimals.", "DEL SimpleName: left", "DEL SimpleName: l", "DEL SimpleName: toLong", "DEL SimpleName: trim", "DEL SimpleName: right", "DEL SimpleName: ArithmeticException", "DEL Javadoc", "DEL InfixExpression: >=", "DEL SimpleName: BigInteger", "DEL BooleanLiteral: false", "DEL SimpleName: Number", "DEL SimpleName: Double", "DEL SimpleName: right", "DEL SimpleName: bigi", "DEL IfStatement", "DEL SimpleName: BigDecimal", "DEL SimpleName: left", "DEL CastExpression", "DEL Modifier: public", "DEL SimpleName: l", "DEL SimpleName: r", "DEL IfStatement", "DEL SimpleName: result", "DEL SimpleName: Comparable", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL StringLiteral: \"==\"", "DEL TagElement: @return", "DEL TagElement: @return", "DEL PrimitiveType: boolean", "DEL SimpleName: number", "DEL Block", "DEL SimpleName: BIGI_LONG_MAX_VALUE", "DEL SimpleName: getMathContext", "DEL SimpleName: operator", "DEL IfStatement", "DEL SimpleName: ArithmeticException", "DEL InfixExpression: ==", "DEL Javadoc", "DEL SimpleName: Object", "DEL ParenthesizedExpression", "DEL Block", "DEL Block", "DEL SimpleType: Double", "DEL MethodDeclaration", "DEL SimpleName: BIGD_SCALE", "DEL TagElement: @param", "DEL SimpleName: r", "DEL Block", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleType: BigInteger", "DEL Block", "DEL SimpleName: l", "DEL SimpleName: result", "DEL MethodInvocation", "DEL TextElement:  the object to be coerced.", "DEL ParenthesizedExpression", "DEL NumberLiteral: 0", "DEL SimpleName: charValue", "DEL PrimitiveType: double", "DEL SimpleName: booleanValue", "DEL SimpleName: nfe", "DEL SimpleName: toDouble", "DEL SimpleName: compareTo", "DEL SimpleName: Object", "DEL BooleanLiteral: false", "DEL VariableDeclarationStatement", "DEL Block", "DEL PrefixExpression: ++", "DEL SimpleName: right", "DEL MethodDeclaration", "DEL StringLiteral: \"Double coercion: \"", "DEL SimpleName: left", "DEL VariableDeclarationFragment", "DEL SimpleName: BigDecimal", "DEL SimpleName: l", "DEL SimpleName: longValueExact", "DEL Block", "DEL TagElement: @return", "DEL TextElement: If any numeric add fails on coercion to the appropriate type,", "DEL VariableDeclarationFragment", "DEL SimpleName: BigInteger", "DEL Javadoc", "DEL SimpleName: o", "DEL SimpleName: val", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: val", "DEL SimpleName: compare", "DEL SimpleName: BIGI_LONG_MIN_VALUE", "DEL Block", "DEL IfStatement", "DEL TextElement: left value mod right.", "DEL TextElement: </li>", "DEL Block", "DEL InfixExpression: <=", "DEL SimpleName: narrowNumber", "DEL IfStatement", "DEL SimpleName: left", "DEL SimpleName: narrowBigDecimal", "DEL TextElement: method calls, e.g. a call to substring(int,int) with an int and a long", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleType: Character", "DEL Block", "DEL PrefixExpression: -", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: right", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL SimpleName: lhs", "DEL SimpleName: BigDecimal", "DEL ClassInstanceCreation", "DEL InfixExpression: >=", "DEL SimpleName: right", "DEL VariableDeclarationFragment", "DEL SimpleName: toBigInteger", "DEL SimpleName: mod", "DEL SimpleType: Long", "DEL SimpleName: strval", "DEL SimpleName: valueAsFloat", "DEL SimpleName: right", "DEL ReturnStatement", "DEL SimpleName: valueAsBigD", "DEL SimpleName: valueAsBigD", "DEL SimpleName: ArithmeticException", "DEL MethodDeclaration", "DEL SimpleType: BigInteger", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL SimpleName: Double", "DEL IfStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: Object", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: commonClass", "DEL SimpleName: value", "DEL TextElement: <ol>", "DEL SimpleName: divide", "DEL Javadoc", "DEL TextElement: Default BigDecimal scale. ", "DEL SimpleType: BigDecimal", "DEL InstanceofExpression", "DEL TagElement", "DEL SimpleName: toBigInteger", "DEL SimpleType: Double", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: u", "DEL TagElement: @param", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL SimpleName: right", "DEL SimpleName: byteValue", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL TagElement", "DEL SimpleType: Boolean", "DEL Block", "DEL InfixExpression: >=", "DEL SimpleName: BigDecimal", "DEL PrimitiveType: boolean", "DEL SimpleType: Number", "DEL PrimitiveType: double", "DEL SimpleName: getMathContext", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: arg", "DEL SimpleName: u", "DEL SimpleName: BIGI_LONG_MIN_VALUE", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: bigdContext", "DEL Block", "DEL TextElement: <li>if both arguments can be narrowed to Integer, narrow result to Integer</li>", "DEL IfStatement", "DEL SimpleName: isNumberable", "DEL InstanceofExpression", "DEL SimpleName: Double", "DEL PrimitiveType: int", "DEL InfixExpression: ||", "DEL SimpleName: bigi", "DEL SimpleName: BigInteger", "DEL IfStatement", "DEL SimpleName: left", "DEL SimpleName: Long", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: Double", "DEL TextElement: Test if left > right.", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL SimpleType: String", "DEL Modifier: final", "DEL SimpleName: right", "DEL ExpressionStatement", "DEL SimpleName: BIGI_LONG_MAX_VALUE", "DEL InstanceofExpression", "DEL SimpleName: right", "DEL IfStatement", "DEL SimpleName: BigDecimal", "DEL BooleanLiteral: true", "DEL ParenthesizedExpression", "DEL SimpleType: String", "DEL TextElement:  first value", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL SimpleName: val", "DEL Javadoc", "DEL Block", "DEL TextElement:  test result.", "DEL Modifier: public", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: narrow", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: toDouble", "DEL MethodInvocation", "DEL SimpleName: arg", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  first value", "DEL Javadoc", "DEL SimpleName: Object", "DEL TextElement: Test if left and right are equal.", "DEL SimpleName: ArithmeticException", "DEL SimpleName: val", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleName: rhs", "DEL SimpleName: right", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL TextElement: succeed.", "DEL SimpleName: Object", "DEL InstanceofExpression", "DEL TextElement:  true if Integer, Long, Byte, Short or Character.", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: narrowBigDecimal", "DEL SimpleName: intValue", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: original", "DEL NullLiteral", "DEL SimpleName: val", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL StringLiteral: \"\"", "DEL QualifiedName: Byte.MIN_VALUE", "DEL PrimitiveType: double", "DEL ReturnStatement", "DEL InfixExpression: &&", "DEL SimpleName: left", "DEL SimpleName: i", "DEL Block", "DEL TagElement", "DEL TextElement: Test if left < right.", "DEL InfixExpression: >=", "DEL SimpleName: right", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: floatValue", "DEL IfStatement", "DEL SimpleName: isAssignableFrom", "DEL VariableDeclarationFragment", "DEL SimpleName: getRoundingMode", "DEL Block", "DEL StringLiteral: \"/\"", "DEL MethodInvocation", "DEL SimpleType: Double", "DEL SimpleType: Object", "DEL TextElement: The BigDecimal scale used for comparison and coericion operations.", "DEL SimpleName: equals", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: toString", "DEL SimpleName: commonClass", "DEL MethodInvocation", "DEL TextElement:  the math context instance to use for +,-,/,*,% operations on big decimals.", "DEL SimpleName: Character", "DEL Block", "DEL SimpleName: BigInteger", "DEL IfStatement", "DEL SimpleName: intValue", "DEL InstanceofExpression", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL PrefixExpression: !", "DEL PrefixExpression: -", "DEL VariableDeclarationStatement", "DEL Dimension", "DEL SimpleName: bigdScale", "DEL SimpleName: Integer", "DEL TagElement: @param", "DEL SimpleName: rhs", "DEL SimpleName: controlNullNullOperands", "DEL TagElement: @param", "DEL SimpleName: comparable", "DEL TextElement: or string with ( \".\" | \"E\" | \"e\").", "DEL FieldAccess", "DEL SimpleName: original", "DEL TagElement: @since", "DEL SimpleName: val", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL Javadoc", "DEL SimpleName: untyped", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL TextElement: Null and empty string maps to zero.", "DEL Block", "DEL NullLiteral", "DEL SimpleName: bigi", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: Double", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: Boolean", "DEL SimpleName: narrow", "DEL MethodInvocation", "DEL SimpleName: narrowAccept", "DEL ParameterizedType: Comparable<?>", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: l", "DEL TextElement: when null is used as an operand.", "DEL NumberLiteral: 0", "DEL SimpleType: Number", "DEL TextElement: <ol>", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: r", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleType: BigDecimal", "DEL NullLiteral", "DEL NumberLiteral: 0L", "DEL MethodDeclaration", "DEL PrimitiveType: double", "DEL InstanceofExpression", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: val", "DEL ExpressionStatement", "DEL InstanceofExpression", "DEL SimpleName: String", "DEL SimpleName: val", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL TextElement: <li>If all objects are of the same type, the array returned will be an array of that same type</li>", "DEL InstanceofExpression", "DEL InstanceofExpression", "DEL CastExpression", "DEL Block", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: BigDecimal", "DEL SimpleName: add", "DEL SimpleName: val", "DEL SimpleName: r", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL PrefixExpression: !", "DEL SimpleName: toDouble", "DEL Block", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL TextElement:  the left operand", "DEL SimpleName: comparable", "DEL SimpleName: val", "DEL SimpleName: left", "DEL SimpleName: l", "DEL SimpleName: val", "DEL SimpleName: right", "DEL TagElement: @return", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TagElement: @return", "DEL SimpleName: source", "DEL SimpleName: BigDecimal", "DEL SimpleName: BigDecimal", "DEL PrimitiveType: int", "DEL SimpleType: Class", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: toInteger", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Character", "DEL SimpleName: left", "DEL SimpleName: BigInteger", "DEL SimpleName: divide", "DEL SimpleName: getClass", "DEL SimpleName: Character", "DEL SimpleName: left", "DEL SimpleType: BigInteger", "DEL CastExpression", "DEL Block", "DEL SimpleName: toBigInteger", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL Block", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL ArrayAccess", "DEL MethodInvocation", "DEL StringLiteral: \")\"", "DEL SimpleName: mathScale", "DEL PrimitiveType: long", "DEL SimpleName: o", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TextElement:  the math context", "DEL SimpleName: string", "DEL TypeLiteral", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL NumberLiteral: 1", "DEL SimpleType: Object", "DEL ClassInstanceCreation", "DEL SimpleName: left", "DEL ParenthesizedExpression", "DEL SimpleName: left", "DEL SimpleType: BigDecimal", "DEL SimpleName: BigInteger", "DEL SimpleName: BIGI_LONG_MIN_VALUE", "DEL InfixExpression: !=", "DEL SimpleName: val", "DEL MethodInvocation", "DEL Block", "DEL CastExpression", "DEL ReturnStatement", "DEL IfStatement", "DEL ArrayAccess", "DEL SimpleType: Object", "DEL SimpleName: r", "DEL ClassInstanceCreation", "DEL InfixExpression: &&", "DEL SimpleName: toBigDecimal", "DEL ReturnStatement", "DEL TextElement:  the rounded big decimal", "DEL TagElement", "DEL SimpleName: narrowNumber", "DEL TypeLiteral", "DEL ReturnStatement", "DEL SimpleName: ArithmeticException", "DEL SimpleType: Number", "DEL SimpleName: value", "DEL SimpleName: narrowBigDecimal", "DEL SimpleName: right", "DEL Modifier: public", "DEL SimpleName: String", "DEL Block", "DEL InstanceofExpression", "DEL SimpleName: l", "DEL TextElement: if either arguments is a BigInteger, no narrowing will occur", "DEL MethodInvocation", "DEL SimpleName: right", "DEL SimpleType: ArithmeticException", "DEL ReturnStatement", "DEL SimpleName: right", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL SimpleName: Number", "DEL ParenthesizedExpression", "DEL SimpleName: ArithmeticException", "DEL SimpleName: isNaN", "DEL ExpressionStatement", "DEL SimpleName: bigi", "DEL MethodInvocation", "DEL SimpleName: Boolean", "DEL SimpleName: narrowed", "DEL SimpleName: Number", "DEL FieldDeclaration", "DEL TypeLiteral", "DEL SimpleName: longValue", "DEL TextElement:  the operator", "DEL TypeLiteral", "DEL SimpleType: Float", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL InfixExpression: ||", "DEL VariableDeclarationStatement", "DEL PrefixExpression: ++", "DEL TextElement: Divide the left value by the right.", "DEL SimpleName: Integer", "DEL SimpleType: Double", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL TagElement", "DEL MethodInvocation", "DEL StringLiteral: \")\"", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: number", "DEL SimpleName: ArithmeticException", "DEL SimpleName: narrowArrayType", "DEL TagElement", "DEL SimpleName: getName", "DEL SimpleName: l", "DEL Block", "DEL SimpleName: left", "DEL InfixExpression: >=", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SimpleName: l", "DEL SimpleName: equals", "DEL Block", "DEL TagElement: @param", "DEL IfStatement", "DEL Block", "DEL InfixExpression: <=", "DEL InfixExpression: &&", "DEL ParameterizedType: Class<?>", "DEL Block", "DEL SimpleName: Boolean", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: isNumberable", "DEL SimpleName: left", "DEL ClassInstanceCreation", "DEL CastExpression", "DEL TextElement:  the object to be coerced.", "DEL NullLiteral", "DEL TextElement:  if val is null and mode is strict.", "DEL MethodInvocation", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL SimpleName: controlNullNullOperands", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL InfixExpression: &", "DEL PrefixExpression: ~", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: left", "DEL Block", "DEL QualifiedName: Short.MIN_VALUE", "DEL InstanceofExpression", "DEL StringLiteral: \"/\"", "DEL SimpleName: val", "DEL TextElement:  test result.", "DEL SimpleName: left", "DEL InfixExpression: ||", "DEL TextElement: Performs a comparison.", "DEL TagElement: @return", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: Long", "DEL NullLiteral", "DEL SimpleName: val", "DEL SimpleName: o", "DEL TagElement: @param", "DEL QualifiedName: Float.MIN_VALUE", "DEL SimpleName: left", "DEL SimpleType: Integer", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TextElement:  true if it is, false otherwise.", "DEL VariableDeclarationFragment", "DEL Block", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: Character", "DEL SimpleName: toString", "DEL TextElement: Checks whether this JexlArithmetic instance triggers errors during evaluation", "DEL CastExpression", "DEL CastExpression", "DEL IfStatement", "DEL Javadoc", "DEL StringLiteral: \"\"", "DEL TextElement:  Object to be analyzed.", "DEL MethodInvocation", "DEL SimpleName: isFloatingPointNumber", "DEL SimpleName: right", "DEL SimpleName: right", "DEL SimpleName: BigInteger", "DEL SimpleName: val", "DEL TextElement: of the primitive type</li>", "DEL NullLiteral", "DEL TypeLiteral", "DEL Modifier: public", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: getClass", "DEL ReturnStatement", "DEL SimpleName: isAssignableFrom", "DEL CastExpression", "DEL SimpleName: BigInteger", "DEL SimpleType: Double", "DEL SimpleType: BigInteger", "DEL TagElement: @param", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: Long", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: isFloatingPointNumber", "DEL ReturnStatement", "DEL SimpleName: toString", "DEL SimpleName: toString", "DEL PrimitiveType: int", "DEL SimpleName: l", "DEL SimpleName: val", "DEL TextElement:  an untyped array", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL TagElement: @return", "DEL SimpleName: ArithmeticException", "DEL ClassInstanceCreation", "DEL SimpleName: narrowAccept", "DEL SimpleName: right", "DEL TextElement:  whether this arithmetic is lenient or strict", "DEL TextElement:  The int coerced value.", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL SimpleName: BigInteger", "DEL PrimitiveType: long", "DEL InfixExpression: ||", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL SimpleType: BigDecimal", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: narrowAccept", "DEL TagElement: @since", "DEL SimpleName: result", "DEL SimpleName: isLenient", "DEL SimpleName: left", "DEL SimpleName: l", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: dval", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: left", "DEL SimpleName: isFloatingPointNumber", "DEL SimpleName: l", "DEL SimpleName: left", "DEL TagElement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL InfixExpression: -", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: booleanValue", "DEL NullLiteral", "DEL ParenthesizedExpression", "DEL SimpleName: BigDecimal", "DEL SimpleName: toDouble", "DEL VariableDeclarationStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL SimpleName: right", "DEL Block", "DEL SimpleName: getName", "DEL SimpleName: Long", "DEL SimpleType: ArithmeticException", "DEL IfStatement", "DEL StringLiteral: \"<\"", "DEL SimpleName: toString", "DEL Modifier: protected", "DEL PrefixExpression: -", "DEL Block", "DEL TextElement:  the original array if the attempt to strictly type the array fails, a typed array otherwise", "DEL SimpleName: lenient", "DEL SimpleName: commonClass", "DEL NumberLiteral: 0", "DEL InstanceofExpression", "DEL SimpleName: equals", "DEL SimpleName: toBigInteger", "DEL SimpleName: left", "DEL TagElement: @return", "DEL SimpleName: toString", "DEL SimpleType: BigInteger", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL TagElement: @throws", "DEL SimpleType: Object", "DEL SimpleName: ArithmeticException", "DEL SimpleName: r", "DEL NumberLiteral: 1", "DEL Modifier: public", "DEL SimpleType: java.lang.NumberFormatException", "DEL SimpleName: multiply", "DEL SimpleName: valueAsLong", "DEL TagElement: @param", "DEL SimpleName: isNaN", "DEL ReturnStatement", "DEL StringLiteral: \"false\"", "DEL SimpleName: BigInteger", "DEL SimpleType: Double", "DEL TagElement", "DEL SimpleName: Short", "DEL NumberLiteral: 1", "DEL PrimitiveType: long", "DEL SimpleName: Integer", "DEL TextElement:  second value", "DEL SimpleName: BigDecimal", "DEL Block", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: result", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: r", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleName: Float", "DEL SingleVariableDeclaration", "DEL SimpleName: Double", "DEL SimpleName: BigDecimal", "DEL NullLiteral", "DEL SimpleType: BigDecimal", "DEL CastExpression", "DEL SimpleType: Object", "DEL Block", "DEL CastExpression", "DEL TagElement", "DEL SimpleName: right", "DEL MethodInvocation", "DEL SimpleName: valueAsInt", "DEL NumberLiteral: 1L", "DEL SimpleName: right", "DEL Block", "DEL InfixExpression: ||", "DEL Block", "DEL SimpleName: l", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: toDouble", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: valueOf", "DEL Block", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL PrefixExpression: !", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleType: BigInteger", "DEL ReturnStatement", "DEL Block", "DEL Block", "DEL SimpleType: Double", "DEL SimpleName: left", "DEL TextElement: if either arguments is a Long, no narrowing to Integer will occur", "DEL SimpleType: Double", "DEL SimpleName: left", "DEL SimpleName: right", "DEL NumberLiteral: 0", "DEL StringLiteral: \"==\"", "DEL MethodInvocation", "DEL StringLiteral: \" \"", "DEL SimpleName: Number", "DEL TextElement:  second value", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL TextElement: Ensure a big decimal is rounded by this arithmetic scale and rounding mode.", "DEL SimpleName: val", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: val", "DEL Modifier: public", "DEL SimpleName: val", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: mscale", "DEL SimpleName: Double", "DEL SimpleName: left", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL CastExpression", "DEL TextElement:   the narrowed number or the source if no narrowing was possible", "DEL TagElement: @throws", "DEL SimpleType: BigDecimal", "DEL TagElement", "DEL SimpleName: narrowBigDecimal", "DEL SimpleName: parseDouble", "DEL SimpleName: toBigInteger", "DEL TagElement: @param", "DEL Block", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: r", "DEL SimpleName: Object", "DEL SimpleName: val", "DEL SimpleName: right", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: r", "DEL SimpleName: equals", "DEL InfixExpression: ^", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: Double", "DEL VariableDeclarationFragment", "DEL SimpleName: val", "DEL Modifier: final", "DEL ParenthesizedExpression", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: toLong", "DEL SimpleName: Object", "DEL InfixExpression: >", "DEL SimpleName: type", "DEL TextElement:  first value", "DEL SimpleName: a", "DEL MethodInvocation", "DEL QualifiedName: java.util.regex.Pattern", "DEL SimpleName: rhs", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Double", "DEL MethodInvocation", "DEL TagElement: @return", "DEL CastExpression", "DEL Assignment: =", "DEL SimpleName: left", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: l", "DEL SimpleName: val", "DEL SimpleName: left", "DEL IfStatement", "DEL Javadoc", "DEL PrefixExpression: !", "DEL Modifier: protected", "DEL SimpleName: original", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL SimpleName: args", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL SimpleName: val", "DEL NumberLiteral: 0", "DEL SimpleName: Float", "DEL TagElement", "DEL SimpleName: toBigInteger", "DEL SimpleName: l", "DEL IfStatement", "DEL SimpleType: Comparable", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL ConditionalExpression", "DEL SimpleName: Object", "DEL SimpleType: Float", "DEL SimpleName: lhs", "DEL SimpleName: Long", "DEL InfixExpression: ==", "DEL SimpleName: result", "DEL SimpleName: isNumberable", "DEL SimpleName: xany", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL MethodInvocation", "DEL TagElement: @return", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: Double", "DEL SimpleType: Long", "DEL SimpleName: getClass", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: BigDecimal", "DEL TextElement: will fail, but a call to substring(int,int) with an int and a short will", "DEL IfStatement", "DEL SimpleName: l", "DEL SimpleName: BigDecimal", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL TextElement:  the result of the test.", "DEL SimpleType: Object", "DEL TextElement:  second value", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL TextElement:  left + right.", "DEL Block", "DEL SimpleName: r", "DEL SimpleName: eclass", "DEL Assignment: =", "DEL MethodDeclaration", "DEL PrefixExpression: -", "DEL MethodDeclaration", "DEL Block", "DEL QualifiedName: BigInteger.ZERO", "DEL SimpleName: toBigDecimal", "DEL MethodInvocation", "DEL SimpleName: Number", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: Character", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL InfixExpression: >=", "DEL SimpleName: arg", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL SimpleName: Class", "DEL Block", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleName: Double", "DEL Javadoc", "DEL CastExpression", "DEL SimpleName: string", "DEL VariableDeclarationFragment", "DEL SimpleName: compareTo", "DEL TextElement: </p>", "DEL StringLiteral: \"Integer coercion: \"", "DEL NumberLiteral: 0", "DEL Block", "DEL StringLiteral: \":(\"", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL SimpleName: val", "DEL MethodInvocation", "DEL SimpleName: left", "DEL SimpleType: BigInteger", "DEL SimpleName: narrowBigInteger", "DEL SimpleType: Float", "DEL InfixExpression: ==", "DEL SimpleType: BigDecimal", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL SimpleName: val", "DEL Block", "DEL SimpleName: val", "DEL SimpleName: val", "DEL ParenthesizedExpression", "DEL MethodDeclaration", "DEL SimpleName: isFloatingPoint", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL SimpleName: l", "DEL MethodInvocation", "DEL TextElement:  first value", "DEL SimpleName: size", "DEL ReturnStatement", "DEL SimpleName: left", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL SimpleName: compareTo", "DEL NullLiteral", "DEL TextElement: <li>If either is a floating point number, coerce both to Double and perform operation</li>", "DEL SimpleType: BigDecimal", "DEL InfixExpression: !=", "DEL SimpleType: ArithmeticException", "DEL SimpleName: bigi", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: toBigDecimal", "DEL SimpleType: BigDecimal", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL TextElement: Double.MIN_VALUE as BigDecimal. ", "DEL FieldDeclaration", "DEL SimpleName: doubleValue", "DEL SimpleType: BigDecimal", "DEL SimpleName: val", "DEL SimpleName: right", "DEL MethodInvocation", "DEL TextElement:  an Integer or Long if narrowing is possible, the original BigInteger otherwise", "DEL SimpleType: Number", "DEL SimpleType: Character", "DEL Block", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL TypeLiteral", "DEL TextElement:  if strict", "DEL Modifier: final", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: val", "DEL SimpleName: l", "DEL ArrayAccess", "DEL SimpleName: Object", "DEL SimpleName: valueAsBigI", "DEL SimpleName: valueOf", "DEL SimpleName: right", "DEL SimpleName: greaterThanOrEqual", "DEL SimpleName: valueOf", "DEL SimpleName: Double", "DEL SimpleName: o", "DEL InfixExpression: +", "DEL ThisExpression", "DEL InstanceofExpression", "DEL ParameterizedType: Comparable<?>", "DEL SimpleName: left", "DEL Modifier: public", "DEL TagElement", "DEL SimpleName: Character", "DEL VariableDeclarationFragment", "DEL SimpleName: ArithmeticException", "DEL SimpleName: r", "DEL SimpleName: r", "DEL SimpleName: isNumberable", "DEL SimpleName: Double", "DEL Block", "DEL InfixExpression: >=", "DEL SimpleName: val", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL SimpleName: lhs", "DEL ReturnStatement", "DEL SimpleType: Float", "DEL SimpleName: Double", "DEL SimpleName: Number", "DEL BooleanLiteral: false", "DEL QualifiedName: Integer.MAX_VALUE", "DEL TextElement: Test if the passed value is a floating point number, i.e. a float, double", "DEL SimpleName: isNaN", "DEL SimpleName: lhs", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: BigInteger", "DEL SimpleName: string", "DEL FieldAccess", "DEL SimpleName: val", "DEL SimpleName: right", "DEL SimpleType: String", "DEL Assignment: &=", "DEL TextElement: Whether this JexlArithmetic instance behaves in strict or lenient mode. ", "DEL InfixExpression: >", "DEL SimpleType: BigInteger", "DEL SimpleType: Object", "DEL SimpleName: BIGI_LONG_MAX_VALUE", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL SimpleType: Double", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL TextElement: Null and empty string maps to zero.", "DEL SimpleName: remainder", "DEL ReturnStatement", "DEL SimpleType: Float", "DEL SimpleType: String", "DEL SimpleName: val", "DEL Block", "DEL SimpleName: Long", "DEL TextElement: Coerce to a double.", "DEL TagElement: @param", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: BigInteger", "DEL SimpleName: BigDecimal", "DEL InfixExpression: >", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL SimpleType: Double", "DEL SimpleName: toString", "DEL ReturnStatement", "DEL SimpleName: val", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: Float", "DEL SimpleName: rhs", "DEL SimpleName: parseInt", "DEL VariableDeclarationStatement", "DEL SimpleName: Boolean", "DEL TypeLiteral", "DEL SimpleName: BigDecimal", "DEL SimpleName: right", "DEL StringLiteral: \"\"", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression", "DEL SimpleName: isAssignableFrom", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: Long", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: xa", "DEL SimpleName: isFloatingPointType", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleType: Number", "DEL NumberLiteral: 0", "DEL SimpleName: lhs", "DEL SimpleName: valueOf", "DEL SimpleName: Object", "DEL SimpleName: controlNullOperand", "DEL CatchClause", "DEL SimpleName: left", "DEL SimpleName: lhs", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: right", "DEL SimpleName: ArithmeticException", "DEL MethodInvocation", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL PrimitiveType: double", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleType: BigDecimal", "DEL SimpleName: right", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: val", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL TextElement: </ol>", "DEL SimpleName: val", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL TagElement", "DEL QualifiedName: untyped.length", "DEL InstanceofExpression", "DEL SimpleName: val", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL VariableDeclarationFragment", "DEL SimpleName: lhs", "DEL Block", "DEL SimpleName: BigInteger", "DEL TextElement: Perform arithmetic.", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: getClass", "DEL TextElement:  true if some arguments were narrowed and args array is modified,", "DEL SimpleName: val", "DEL SimpleName: right", "DEL SimpleName: i", "DEL CastExpression", "DEL VariableDeclarationStatement", "DEL SimpleName: r", "DEL SimpleName: typed", "DEL SimpleName: string", "DEL MethodInvocation", "DEL TextElement:  true if lenient, false if strict", "DEL SimpleType: Short", "DEL Block", "DEL SimpleType: Comparable", "DEL MethodInvocation", "DEL SimpleName: val", "DEL InfixExpression: ==", "DEL SimpleName: String", "DEL SimpleName: val", "DEL SimpleName: i", "DEL SimpleName: left", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL SimpleName: o", "DEL SimpleType: Short", "DEL SimpleName: BigInteger", "DEL SimpleName: val", "DEL TagElement: @return", "DEL SimpleName: right", "DEL SimpleName: val", "DEL SimpleName: BigDecimal", "DEL TagElement: @param", "DEL SimpleType: Double", "DEL SimpleName: isNumber", "DEL SimpleName: typed", "DEL TextElement:  Object to be coerced.", "DEL SimpleType: BigDecimal", "DEL SimpleName: rhs", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL SimpleName: Number", "DEL NumberLiteral: 0.0", "DEL SimpleName: doubleValue", "DEL SimpleType: ArithmeticException", "DEL SimpleName: right", "DEL SimpleType: Boolean", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: val", "DEL SimpleName: mathScale", "DEL SimpleName: val", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleType: Character", "DEL SimpleName: String", "DEL SimpleName: Double", "DEL SimpleName: left", "DEL SimpleType: Object", "DEL SimpleType: String", "DEL IfStatement", "DEL TextElement:  Object to be coerced.", "DEL BooleanLiteral: false", "DEL SimpleName: o", "DEL MethodInvocation", "DEL SimpleType: BigDecimal", "DEL SimpleName: BigDecimal", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL Block", "DEL SimpleType: Number", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL SimpleName: l", "DEL PrimitiveType: boolean", "DEL NullLiteral", "DEL SimpleName: Comparable", "DEL MethodInvocation", "DEL SimpleType: BigInteger", "DEL Modifier: public", "DEL SimpleName: Boolean", "DEL SimpleName: Character", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL ThrowStatement", "DEL SimpleType: Object", "DEL SimpleName: left", "DEL PrimitiveType: short", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL InfixExpression: <", "DEL VariableDeclarationStatement", "DEL SimpleName: size", "DEL SimpleName: toBigDecimal", "DEL InfixExpression: +", "DEL SimpleName: l", "DEL SimpleName: right", "DEL TextElement: Creates a JexlArithmetic.", "DEL SimpleName: val", "DEL SimpleName: equals", "DEL Modifier: protected", "DEL SimpleName: Object", "DEL SimpleName: BigDecimal", "DEL VariableDeclarationFragment", "DEL SimpleName: controlNullOperand", "DEL SimpleName: bigi", "DEL TagElement: @return", "DEL InfixExpression: ==", "DEL SimpleName: String", "DEL NumberLiteral: 0.0", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: trim", "DEL VariableDeclarationStatement", "DEL SimpleName: left", "DEL SimpleName: SuppressWarnings", "DEL TextElement: one of the arguments is a numberable.", "DEL SimpleName: controlNullOperand", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL TextElement: will fit into. This works hand in hand with parameter 'widening' in java", "DEL IfStatement", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleName: o", "DEL PrimitiveType: byte", "DEL SimpleType: Object", "DEL IfStatement", "DEL SimpleName: controlNullNullOperands", "DEL Block", "DEL SimpleName: result", "DEL InstanceofExpression", "DEL SimpleType: BigDecimal", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: r", "DEL SimpleName: value", "DEL SimpleName: String", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: r", "DEL SimpleType: BigDecimal", "DEL Block", "DEL SimpleName: isNaN", "DEL MethodInvocation", "DEL SimpleName: subtract", "DEL SimpleName: narrowBigInteger", "DEL ReturnStatement", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: remainder", "DEL Javadoc", "DEL PrimitiveType: long", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: narrowBigInteger", "DEL NumberLiteral: 0.d", "DEL SimpleName: o", "DEL SimpleName: val", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: Integer", "DEL SimpleName: string", "DEL Block", "DEL SimpleName: l", "DEL NumberLiteral: 0.", "DEL NumberLiteral: 0", "DEL InstanceofExpression", "DEL InfixExpression: &&", "DEL SimpleType: BigInteger", "DEL ConditionalExpression", "DEL PrimitiveType: int", "DEL TextElement:  the value to negate", "DEL SimpleName: untyped", "DEL SimpleName: left", "DEL SimpleName: right", "DEL ReturnStatement", "DEL TextElement:  left mod right", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: val", "DEL MethodInvocation", "DEL SimpleType: Character", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleType: ArithmeticException", "DEL SimpleName: BigInteger", "DEL StringLiteral: \")\"", "DEL SimpleName: left", "DEL SimpleName: value", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: val", "DEL SimpleType: Object", "DEL SimpleName: Long", "DEL MethodInvocation", "DEL SimpleName: string", "DEL IfStatement", "DEL SimpleName: original", "DEL SimpleName: mathContext", "DEL SimpleName: r", "DEL SimpleType: Boolean", "DEL ArrayType: Object[]", "DEL Block", "DEL SimpleName: getMathContext", "DEL SimpleName: right", "DEL SimpleName: Byte", "DEL SimpleName: i", "DEL ReturnStatement", "DEL PrimitiveType: double", "DEL Block", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL SingleVariableDeclaration", "DEL PrefixExpression: -", "DEL TagElement", "DEL ParameterizedType: Comparable<Object>", "DEL ReturnStatement", "DEL IfStatement", "DEL FieldAccess", "DEL TextElement:  test result.", "DEL SimpleType: Object", "DEL Modifier: public", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL SimpleName: Character", "DEL SimpleName: valueOf", "DEL SimpleName: Exception", "DEL Modifier: protected", "DEL SimpleType: Class", "DEL IfStatement", "DEL CharacterLiteral: 'E'", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: isNumber", "DEL MethodDeclaration", "DEL SimpleName: left", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL InfixExpression: >=", "DEL TagElement: @throws", "DEL SimpleName: left", "DEL SimpleName: l", "DEL PrimitiveType: long", "DEL SimpleName: Double", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: left", "DEL IfStatement", "DEL SimpleName: val", "DEL SimpleName: eclass", "DEL SimpleName: ArithmeticException", "DEL TextElement: Double.MAX_VALUE as BigDecimal. ", "DEL SimpleName: BigInteger", "DEL SimpleName: Object", "DEL SimpleName: original", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Modifier: public", "DEL Javadoc", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: string", "DEL VariableDeclarationFragment", "DEL SimpleName: Short", "DEL MethodInvocation", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL TextElement:  left  right", "DEL SimpleName: BigDecimal", "DEL TextElement:  if val is null and mode is strict.", "DEL Block", "DEL SimpleName: untyped", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: right", "DEL SimpleName: narrowAccept", "DEL QualifiedName: Long.MIN_VALUE", "DEL QualifiedName: Long.MAX_VALUE", "DEL PrefixExpression: -", "DEL ParameterizedType: Comparable<Object>", "DEL SimpleName: Double", "DEL SimpleName: left", "DEL PrimitiveType: boolean", "DEL SimpleName: Long", "DEL Block", "DEL SimpleName: Integer", "DEL SimpleName: left", "DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: rhs", "DEL InfixExpression: <=", "DEL SimpleName: Object", "DEL SimpleName: NullPointerException", "DEL SimpleType: Object", "DEL ConditionalExpression", "DEL Block", "DEL TextElement:  true if it is a Float or a Double.", "DEL SimpleName: lhs", "DEL SimpleName: val", "DEL SimpleName: booleanValue", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: r", "DEL Javadoc", "DEL SimpleName: xa", "DEL TextElement: Subtract the right value from the left.", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SimpleName: commonClass", "DEL NullLiteral", "DEL Block", "DEL ClassInstanceCreation", "DEL PrefixExpression: -", "DEL SimpleName: l", "DEL SimpleName: narrow", "DEL ReturnStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: right", "DEL TagElement", "DEL Block", "DEL SimpleName: left", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleType: Object", "DEL SimpleName: narrow", "DEL SimpleName: Float", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL PrimitiveType: long", "DEL SimpleType: String", "DEL InfixExpression: ||", "DEL TextElement:  the right operator", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: BigDecimal", "DEL SimpleName: Float", "DEL Block", "DEL SimpleName: Boolean", "DEL VariableDeclarationStatement", "DEL Modifier: protected", "DEL ReturnStatement", "DEL SimpleName: eclass", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: multiply", "DEL SimpleName: getMathContext", "DEL InfixExpression: >=", "DEL SimpleType: String", "DEL SimpleName: Double", "DEL SimpleName: toBoolean", "DEL SimpleName: getMathScale", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: original", "DEL SimpleName: arg", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: l", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: valueOf", "DEL MethodInvocation", "DEL SimpleName: Double", "DEL SimpleName: right", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL PrimitiveType: double", "DEL SimpleName: val", "DEL TagElement: @param", "DEL SimpleName: narrowBigInteger", "DEL SimpleName: left", "DEL ReturnStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: MathContext", "DEL MethodInvocation", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: narg", "DEL SimpleName: val", "DEL InfixExpression: ==", "DEL StringLiteral: \"%\"", "DEL InfixExpression: ||", "DEL SimpleName: toDouble", "DEL SimpleName: right", "DEL SimpleName: toBigDecimal", "DEL CastExpression", "DEL WildcardType: ?", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL QualifiedName: java.lang.NumberFormatException", "DEL SimpleType: ArithmeticException", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: bigi", "DEL InfixExpression: ==", "DEL SimpleName: right", "DEL SimpleName: valueAsShort", "DEL SimpleType: ArithmeticException", "DEL SimpleName: Comparable", "DEL SimpleName: commonClass", "DEL CastExpression", "DEL SimpleName: compare", "DEL Modifier: final", "DEL Block", "DEL SimpleName: toLong", "DEL SimpleName: Double", "DEL MethodInvocation", "DEL SimpleName: BigInteger", "DEL CatchClause", "DEL SimpleType: Short", "DEL SimpleName: matches", "DEL SimpleName: Number", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: original", "DEL MethodInvocation", "DEL SimpleName: val", "DEL SimpleName: bitwiseXor", "DEL SimpleName: getMathContext", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: left", "DEL CharacterLiteral: 'e'", "DEL InfixExpression: >", "DEL TagElement: @return", "DEL SimpleType: ArithmeticException", "DEL SimpleName: BigInteger", "DEL TagElement: @return", "DEL ParenthesizedExpression", "DEL SimpleName: lessThanOrEqual", "DEL IfStatement", "DEL TagElement: @return", "DEL SimpleName: right", "DEL SimpleName: narrowed", "DEL SimpleType: Boolean", "DEL SimpleName: Byte", "DEL InstanceofExpression", "DEL SimpleName: negate", "DEL ParameterizedType: Comparable<Object>", "DEL SimpleName: u", "DEL SimpleType: Character", "DEL SimpleName: toBigDecimal", "DEL CastExpression", "DEL SimpleName: matches", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: longValue", "DEL SimpleType: Character", "DEL SimpleName: left", "DEL SimpleName: BigDecimal", "DEL QualifiedName: Float.MAX_VALUE", "DEL NullLiteral", "DEL IfStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: toBigDecimal", "DEL StringLiteral: \">=\"", "DEL SimpleName: right", "DEL SimpleType: BigDecimal", "DEL SimpleName: Long", "DEL VariableDeclarationStatement", "DEL SimpleName: Short", "DEL MethodDeclaration", "DEL SimpleName: right", "DEL SimpleName: JexlArithmetic", "DEL SimpleName: bitwiseComplement", "DEL SimpleType: BigDecimal", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL ParenthesizedExpression", "DEL SimpleName: left", "DEL SimpleName: lessThan", "DEL InfixExpression: <=", "DEL SimpleName: right", "DEL SimpleName: right", "DEL ArrayAccess", "DEL TagElement: @param", "DEL SimpleType: BigInteger", "DEL SimpleName: eclass", "DEL SimpleName: left", "DEL SimpleName: toString", "DEL InstanceofExpression", "DEL InfixExpression: ==", "DEL SimpleName: Boolean", "DEL SimpleName: l", "DEL SimpleName: original", "DEL SimpleName: original", "DEL SimpleName: BigDecimal", "DEL MethodInvocation", "DEL MethodInvocation", "DEL CastExpression", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: isFloatingPointNumber", "DEL ClassInstanceCreation", "DEL Block", "DEL Block", "DEL SimpleName: result", "DEL SimpleName: ArithmeticException", "DEL SimpleName: Double", "DEL SingleVariableDeclaration", "DEL SimpleName: BigDecimal", "DEL MethodInvocation", "DEL SimpleName: mod", "DEL SimpleName: left", "DEL SimpleName: add", "DEL PrimitiveType: long", "DEL SimpleName: BigInteger", "DEL IfStatement", "DEL SimpleName: rhs", "DEL SimpleName: commonClass", "DEL InfixExpression: !=", "DEL SimpleName: lhs", "DEL MethodInvocation", "DEL SimpleName: right", "DEL SimpleName: right", "DEL Modifier: protected", "DEL TextElement:  second value", "DEL SimpleType: Object", "DEL SimpleType: Boolean", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: long", "DEL SimpleName: isNaN", "DEL Block", "DEL Block", "DEL SimpleName: controlNullOperand", "DEL TextElement:  first value", "DEL TextElement:  second value", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: valueOf", "DEL SimpleType: BigDecimal", "DEL SimpleName: r", "DEL VariableDeclarationFragment", "DEL TextElement: Coerce to a int.", "DEL SimpleType: Number", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL InfixExpression: <=", "DEL NumberLiteral: 0", "DEL ArrayType: Object[]", "DEL SimpleName: value", "DEL NullLiteral", "DEL SimpleName: bigdContext", "DEL SimpleName: right", "DEL SimpleName: number", "DEL SimpleName: right", "DEL SimpleType: BigDecimal", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL TextElement: <ul>", "DEL SimpleName: number", "DEL SimpleName: BIGD_SCALE", "DEL InfixExpression: &&", "DEL InstanceofExpression", "DEL SimpleName: compareTo", "DEL IfStatement", "DEL SimpleName: charValue", "DEL SimpleName: toBigInteger", "DEL SimpleName: l", "DEL TagElement", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL TagElement: @param", "DEL StringLiteral: \":(\"", "DEL Javadoc", "DEL SimpleType: ArithmeticException", "DEL SimpleName: val", "DEL SimpleName: right", "DEL SimpleName: l", "DEL SimpleType: Byte", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: val", "DEL PrimitiveType: long", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL SimpleName: Double", "DEL NullLiteral", "DEL SimpleName: toLong", "DEL TextElement: The rules are:", "DEL ParenthesizedExpression", "DEL SimpleType: BigDecimal", "DEL SimpleName: val", "DEL TagElement: @param", "DEL InfixExpression: |", "DEL ReturnStatement", "DEL SimpleName: left", "DEL ExpressionStatement", "DEL SimpleName: Field", "DEL SimpleName: right", "DEL SingleVariableDeclaration", "DEL StringLiteral: \")\"", "DEL MethodInvocation", "DEL SimpleName: isFloatingPoint", "DEL InfixExpression: ==", "DEL SimpleName: o", "DEL Block"]}]}}, {"JexlArithmetic_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Array(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Field(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.math.BigDecimal(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.math.BigInteger(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.math.MathContext(10)", "Delete ImportDeclaration(11)", "Delete TextElement: Perform arithmetic.(12)", "Delete TextElement: <p>(13)", "Delete TextElement: All arithmetic operators (+, - , *, /, %) follow the same rules regarding their arguments.(14)", "Delete TextElement: <ol>(15)", "Delete TextElement: <li>If both are null, result is 0</li>(16)", "Delete TextElement: <li>If either is a BigDecimal, coerce both to BigDecimal and and perform operation</li>(17)", "Delete TextElement: <li>If either is a floating point number, coerce both to Double and perform operation</li>(18)", "Delete TextElement: <li>If both are BigInteger, treat as BigInteger and perform operation</li>(19)", "Delete TextElement: <li>Else treat as BigInteger, perform operation and attempt to narrow result:(20)", "Delete TextElement: <ol>(21)", "Delete TextElement: <li>if both arguments can be narrowed to Integer, narrow result to Integer</li>(22)", "Delete TextElement: <li>if both arguments can be narrowed to Long, narrow result to Long</li>(23)", "Delete TextElement: <li>Else return result as BigInteger</li>(24)", "Delete TextElement: </ol>(25)", "Delete TextElement: </li>(26)", "Delete TextElement: </ol>(27)", "Delete TextElement: </p>(28)", "Delete TextElement: Note that the only exception throw by JexlArithmetic is ArithmeticException.(29)", "Delete TagElement(30)", "Delete TextElement:  2.0(31)", "Delete TagElement: @since(32)", "Delete Javadoc(33)", "Delete Modifier: public(34)", "Delete SimpleName: JexlArithmetic(35)", "Delete TextElement: Double.MAX_VALUE as BigDecimal. (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: protected(39)", "Delete Modifier: static(40)", "Delete Modifier: final(41)", "Delete SimpleName: BigDecimal(42)", "Delete SimpleType: BigDecimal(43)", "Delete SimpleName: BIGD_DOUBLE_MAX_VALUE(44)", "Delete SimpleName: BigDecimal(45)", "Delete SimpleName: valueOf(46)", "Delete QualifiedName: Double.MAX_VALUE(47)", "Delete MethodInvocation(48)", "Delete VariableDeclarationFragment(49)", "Delete FieldDeclaration(50)", "Delete TextElement: Double.MIN_VALUE as BigDecimal. (51)", "Delete TagElement(52)", "Delete Javadoc(53)", "Delete Modifier: protected(54)", "Delete Modifier: static(55)", "Delete Modifier: final(56)", "Delete SimpleName: BigDecimal(57)", "Delete SimpleType: BigDecimal(58)", "Delete SimpleName: BIGD_DOUBLE_MIN_VALUE(59)", "Delete SimpleName: BigDecimal(60)", "Delete SimpleName: valueOf(61)", "Delete QualifiedName: Double.MIN_VALUE(62)", "Delete MethodInvocation(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete TextElement: Long.MAX_VALUE as BigInteger. (66)", "Delete TagElement(67)", "Delete Javadoc(68)", "Delete Modifier: protected(69)", "Delete Modifier: static(70)", "Delete Modifier: final(71)", "Delete SimpleName: BigInteger(72)", "Delete SimpleType: BigInteger(73)", "Delete SimpleName: BIGI_LONG_MAX_VALUE(74)", "Delete SimpleName: BigInteger(75)", "Delete SimpleName: valueOf(76)", "Delete QualifiedName: Long.MAX_VALUE(77)", "Delete MethodInvocation(78)", "Delete VariableDeclarationFragment(79)", "Delete FieldDeclaration(80)", "Delete TextElement: Long.MIN_VALUE as BigInteger. (81)", "Delete TagElement(82)", "Delete Javadoc(83)", "Delete Modifier: protected(84)", "Delete Modifier: static(85)", "Delete Modifier: final(86)", "Delete SimpleName: BigInteger(87)", "Delete SimpleType: BigInteger(88)", "Delete SimpleName: BIGI_LONG_MIN_VALUE(89)", "Delete SimpleName: BigInteger(90)", "Delete SimpleName: valueOf(91)", "Delete QualifiedName: Long.MIN_VALUE(92)", "Delete MethodInvocation(93)", "Delete VariableDeclarationFragment(94)", "Delete FieldDeclaration(95)", "Delete TextElement: Default BigDecimal scale. (96)", "Delete TagElement(97)", "Delete Javadoc(98)", "Delete Modifier: protected(99)", "Delete Modifier: static(100)", "Delete Modifier: final(101)", "Delete PrimitiveType: int(102)", "Delete SimpleName: BIGD_SCALE(103)", "Delete NumberLiteral: 1(104)", "Delete PrefixExpression: -(105)", "Delete VariableDeclarationFragment(106)", "Delete FieldDeclaration(107)", "Delete TextElement: Whether this JexlArithmetic instance behaves in strict or lenient mode. (108)", "Delete TagElement(109)", "Delete Javadoc(110)", "Delete Modifier: protected(111)", "Delete Modifier: final(112)", "Delete PrimitiveType: boolean(113)", "Delete SimpleName: strict(114)", "Delete VariableDeclarationFragment(115)", "Delete FieldDeclaration(116)", "Delete TextElement: The big decimal math context. (117)", "Delete TagElement(118)", "Delete Javadoc(119)", "Delete Modifier: protected(120)", "Delete Modifier: final(121)", "Delete SimpleName: MathContext(122)", "Delete SimpleType: MathContext(123)", "Delete SimpleName: mathContext(124)", "Delete VariableDeclarationFragment(125)", "Delete FieldDeclaration(126)", "Delete TextElement: The big decimal scale. (127)", "Delete TagElement(128)", "Delete Javadoc(129)", "Delete Modifier: protected(130)", "Delete Modifier: final(131)", "Delete PrimitiveType: int(132)", "Delete SimpleName: mathScale(133)", "Delete VariableDeclarationFragment(134)", "Delete FieldDeclaration(135)", "Delete TextElement: Creates a JexlArithmetic.(136)", "Delete TagElement(137)", "Delete SimpleName: lenient(138)", "Delete TextElement:  whether this arithmetic is lenient or strict(139)", "Delete TagElement: @param(140)", "Delete Javadoc(141)", "Delete Modifier: public(142)", "Delete SimpleName: JexlArithmetic(143)", "Delete PrimitiveType: boolean(144)", "Delete SimpleName: lenient(145)", "Delete SingleVariableDeclaration(146)", "Delete SimpleName: lenient(147)", "Delete QualifiedName: MathContext.DECIMAL128(148)", "Delete SimpleName: BIGD_SCALE(149)", "Delete ConstructorInvocation(150)", "Delete Block(151)", "Delete MethodDeclaration(152)", "Delete TextElement: Creates a JexlArithmetic.(153)", "Delete TagElement(154)", "Delete SimpleName: lenient(155)", "Delete TextElement:  whether this arithmetic is lenient or strict(156)", "Delete TagElement: @param(157)", "Delete SimpleName: bigdContext(158)", "Delete TextElement:  the math context instance to use for +,-,/,*,% operations on big decimals.(159)", "Delete TagElement: @param(160)", "Delete SimpleName: bigdScale(161)", "Delete TextElement:  the scale used for big decimals.(162)", "Delete TagElement: @param(163)", "Delete TextElement:  2.1(164)", "Delete TagElement: @since(165)", "Delete Javadoc(166)", "Delete Modifier: public(167)", "Delete SimpleName: JexlArithmetic(168)", "Delete PrimitiveType: boolean(169)", "Delete SimpleName: lenient(170)", "Delete SingleVariableDeclaration(171)", "Delete SimpleName: MathContext(172)", "Delete SimpleType: MathContext(173)", "Delete SimpleName: bigdContext(174)", "Delete SingleVariableDeclaration(175)", "Delete PrimitiveType: int(176)", "Delete SimpleName: bigdScale(177)", "Delete SingleVariableDeclaration(178)", "Delete ThisExpression(179)", "Delete SimpleName: strict(180)", "Delete FieldAccess(181)", "Delete SimpleName: lenient(182)", "Delete PrefixExpression: !(183)", "Delete Assignment: =(184)", "Delete ExpressionStatement(185)", "Delete ThisExpression(186)", "Delete SimpleName: mathContext(187)", "Delete FieldAccess(188)", "Delete SimpleName: bigdContext(189)", "Delete Assignment: =(190)", "Delete ExpressionStatement(191)", "Delete ThisExpression(192)", "Delete SimpleName: mathScale(193)", "Delete FieldAccess(194)", "Delete SimpleName: bigdScale(195)", "Delete Assignment: =(196)", "Delete ExpressionStatement(197)", "Delete Block(198)", "Delete MethodDeclaration(199)", "Delete TextElement: Checks whether this JexlArithmetic instance triggers errors during evaluation(200)", "Delete TextElement: when null is used as an operand.(201)", "Delete TagElement(202)", "Delete TextElement:  true if lenient, false if strict(203)", "Delete TagElement: @return(204)", "Delete Javadoc(205)", "Delete Modifier: public(206)", "Delete PrimitiveType: boolean(207)", "Delete SimpleName: isLenient(208)", "Delete ThisExpression(209)", "Delete SimpleName: strict(210)", "Delete FieldAccess(211)", "Delete PrefixExpression: !(212)", "Delete ReturnStatement(213)", "Delete Block(214)", "Delete MethodDeclaration(215)", "Delete TextElement: The MathContext instance used for +,-,/,*,% operations on big decimals.(216)", "Delete TagElement(217)", "Delete TextElement:  the math context(218)", "Delete TagElement: @return(219)", "Delete TextElement:  2.1(220)", "Delete TagElement: @since(221)", "Delete Javadoc(222)", "Delete Modifier: public(223)", "Delete SimpleName: MathContext(224)", "Delete SimpleType: MathContext(225)", "Delete SimpleName: getMathContext(226)", "Delete SimpleName: mathContext(227)", "Delete ReturnStatement(228)", "Delete Block(229)", "Delete MethodDeclaration(230)", "Delete TextElement: The BigDecimal scale used for comparison and coericion operations.(231)", "Delete TagElement(232)", "Delete TextElement:  the scale(233)", "Delete TagElement: @return(234)", "Delete TextElement:  2.1(235)", "Delete TagElement: @since(236)", "Delete Javadoc(237)", "Delete Modifier: public(238)", "Delete PrimitiveType: int(239)", "Delete SimpleName: getMathScale(240)", "Delete SimpleName: mathScale(241)", "Delete ReturnStatement(242)", "Delete Block(243)", "Delete MethodDeclaration(244)", "Delete TextElement: Ensure a big decimal is rounded by this arithmetic scale and rounding mode.(245)", "Delete TagElement(246)", "Delete SimpleName: number(247)", "Delete TextElement:  the big decimal to round(248)", "Delete TagElement: @param(249)", "Delete TextElement:  the rounded big decimal(250)", "Delete TagElement: @return(251)", "Delete TextElement:  2.1(252)", "Delete TagElement: @since(253)", "Delete Javadoc(254)", "Delete Modifier: public(255)", "Delete SimpleName: BigDecimal(256)", "Delete SimpleType: BigDecimal(257)", "Delete SimpleName: roundBigDecimal(258)", "Delete Modifier: final(259)", "Delete SimpleName: BigDecimal(260)", "Delete SimpleType: BigDecimal(261)", "Delete SimpleName: number(262)", "Delete SingleVariableDeclaration(263)", "Delete PrimitiveType: int(264)", "Delete SimpleName: mscale(265)", "Delete SimpleName: getMathScale(266)", "Delete MethodInvocation(267)", "Delete VariableDeclarationFragment(268)", "Delete VariableDeclarationStatement(269)", "Delete SimpleName: mscale(270)", "Delete NumberLiteral: 0(271)", "Delete InfixExpression: >=(272)", "Delete SimpleName: number(273)", "Delete SimpleName: setScale(274)", "Delete SimpleName: mscale(275)", "Delete SimpleName: getMathContext(276)", "Delete MethodInvocation(277)", "Delete SimpleName: getRoundingMode(278)", "Delete MethodInvocation(279)", "Delete MethodInvocation(280)", "Delete ReturnStatement(281)", "Delete Block(282)", "Delete SimpleName: number(283)", "Delete ReturnStatement(284)", "Delete Block(285)", "Delete IfStatement(286)", "Delete Block(287)", "Delete MethodDeclaration(288)", "Delete TextElement: The result of +,/,-,*,% when both operands are null.(289)", "Delete TagElement(290)", "Delete TextElement:  Integer(0) if lenient(291)", "Delete TagElement: @return(292)", "Delete SimpleName: ArithmeticException(293)", "Delete TextElement:  if strict(294)", "Delete TagElement: @throws(295)", "Delete Javadoc(296)", "Delete Modifier: protected(297)", "Delete SimpleName: Object(298)", "Delete SimpleType: Object(299)", "Delete SimpleName: controlNullNullOperands(300)", "Delete SimpleName: isLenient(301)", "Delete MethodInvocation(302)", "Delete PrefixExpression: !(303)", "Delete SimpleName: ArithmeticException(304)", "Delete SimpleType: ArithmeticException(305)", "Delete QualifiedName: JexlException.NULL_OPERAND(306)", "Delete ClassInstanceCreation(307)", "Delete ThrowStatement(308)", "Delete Block(309)", "Delete IfStatement(310)", "Delete SimpleName: Integer(311)", "Delete SimpleName: valueOf(312)", "Delete NumberLiteral: 0(313)", "Delete MethodInvocation(314)", "Delete ReturnStatement(315)", "Delete Block(316)", "Delete MethodDeclaration(317)", "Delete TextElement: Throw a NPE if arithmetic is strict.(318)", "Delete TagElement(319)", "Delete SimpleName: ArithmeticException(320)", "Delete TextElement:  if strict(321)", "Delete TagElement: @throws(322)", "Delete Javadoc(323)", "Delete Modifier: protected(324)", "Delete PrimitiveType: void(325)", "Delete SimpleName: controlNullOperand(326)", "Delete SimpleName: isLenient(327)", "Delete MethodInvocation(328)", "Delete PrefixExpression: !(329)", "Delete SimpleName: ArithmeticException(330)", "Delete SimpleType: ArithmeticException(331)", "Delete QualifiedName: JexlException.NULL_OPERAND(332)", "Delete ClassInstanceCreation(333)", "Delete ThrowStatement(334)", "Delete Block(335)", "Delete IfStatement(336)", "Delete Block(337)", "Delete MethodDeclaration(338)", "Delete TextElement: Test if either left or right are either a Float or Double.(339)", "Delete TagElement(340)", "Delete SimpleName: left(341)", "Delete TextElement:  one object to test(342)", "Delete TagElement: @param(343)", "Delete SimpleName: right(344)", "Delete TextElement:  the other(345)", "Delete TagElement: @param(346)", "Delete TextElement:  the result of the test.(347)", "Delete TagElement: @return(348)", "Delete Javadoc(349)", "Delete Modifier: protected(350)", "Delete PrimitiveType: boolean(351)", "Delete SimpleName: isFloatingPointType(352)", "Delete SimpleName: Object(353)", "Delete SimpleType: Object(354)", "Delete SimpleName: left(355)", "Delete SingleVariableDeclaration(356)", "Delete SimpleName: Object(357)", "Delete SimpleType: Object(358)", "Delete SimpleName: right(359)", "Delete SingleVariableDeclaration(360)", "Delete SimpleName: left(361)", "Delete SimpleName: Float(362)", "Delete SimpleType: Float(363)", "Delete InstanceofExpression(364)", "Delete SimpleName: left(365)", "Delete SimpleName: Double(366)", "Delete SimpleType: Double(367)", "Delete InstanceofExpression(368)", "Delete SimpleName: right(369)", "Delete SimpleName: Float(370)", "Delete SimpleType: Float(371)", "Delete InstanceofExpression(372)", "Delete SimpleName: right(373)", "Delete SimpleName: Double(374)", "Delete SimpleType: Double(375)", "Delete InstanceofExpression(376)", "Delete InfixExpression: ||(377)", "Delete ReturnStatement(378)", "Delete Block(379)", "Delete MethodDeclaration(380)", "Delete TextElement: Test if the passed value is a floating point number, i.e. a float, double(381)", "Delete TextElement: or string with ( \".\" | \"E\" | \"e\").(382)", "Delete TagElement(383)", "Delete SimpleName: val(384)", "Delete TextElement:  the object to be tested(385)", "Delete TagElement: @param(386)", "Delete TextElement:  true if it is, false otherwise.(387)", "Delete TagElement: @return(388)", "Delete Javadoc(389)", "Delete Modifier: protected(390)", "Delete PrimitiveType: boolean(391)", "Delete SimpleName: isFloatingPointNumber(392)", "Delete SimpleName: Object(393)", "Delete SimpleType: Object(394)", "Delete SimpleName: val(395)", "Delete SingleVariableDeclaration(396)", "Delete SimpleName: val(397)", "Delete SimpleName: Float(398)", "Delete SimpleType: Float(399)", "Delete InstanceofExpression(400)", "Delete SimpleName: val(401)", "Delete SimpleName: Double(402)", "Delete SimpleType: Double(403)", "Delete InstanceofExpression(404)", "Delete InfixExpression: ||(405)", "Delete BooleanLiteral: true(406)", "Delete ReturnStatement(407)", "Delete Block(408)", "Delete IfStatement(409)", "Delete SimpleName: val(410)", "Delete SimpleName: String(411)", "Delete SimpleType: String(412)", "Delete InstanceofExpression(413)", "Delete SimpleName: String(414)", "Delete SimpleType: String(415)", "Delete SimpleName: string(416)", "Delete SimpleName: String(417)", "Delete SimpleType: String(418)", "Delete SimpleName: val(419)", "Delete CastExpression(420)", "Delete VariableDeclarationFragment(421)", "Delete VariableDeclarationStatement(422)", "Delete SimpleName: string(423)", "Delete SimpleName: indexOf(424)", "Delete CharacterLiteral: '.'(425)", "Delete MethodInvocation(426)", "Delete NumberLiteral: 1(427)", "Delete PrefixExpression: -(428)", "Delete InfixExpression: !=(429)", "Delete SimpleName: string(430)", "Delete SimpleName: indexOf(431)", "Delete CharacterLiteral: 'e'(432)", "Delete MethodInvocation(433)", "Delete NumberLiteral: 1(434)", "Delete PrefixExpression: -(435)", "Delete InfixExpression: !=(436)", "Delete InfixExpression: ||(437)", "Delete SimpleName: string(438)", "Delete SimpleName: indexOf(439)", "Delete CharacterLiteral: 'E'(440)", "Delete MethodInvocation(441)", "Delete NumberLiteral: 1(442)", "Delete PrefixExpression: -(443)", "Delete InfixExpression: !=(444)", "Delete InfixExpression: ||(445)", "Delete ReturnStatement(446)", "Delete Block(447)", "Delete IfStatement(448)", "Delete BooleanLiteral: false(449)", "Delete ReturnStatement(450)", "Delete Block(451)", "Delete MethodDeclaration(452)", "Delete TextElement: Is Object a floating point number.(453)", "Delete TagElement(454)", "Delete SimpleName: o(455)", "Delete TextElement:  Object to be analyzed.(456)", "Delete TagElement: @param(457)", "Delete TextElement:  true if it is a Float or a Double.(458)", "Delete TagElement: @return(459)", "Delete Javadoc(460)", "Delete Modifier: protected(461)", "Delete PrimitiveType: boolean(462)", "Delete SimpleName: isFloatingPoint(463)", "Delete Modifier: final(464)", "Delete SimpleName: Object(465)", "Delete SimpleType: Object(466)", "Delete SimpleName: o(467)", "Delete SingleVariableDeclaration(468)", "Delete SimpleName: o(469)", "Delete SimpleName: Float(470)", "Delete SimpleType: Float(471)", "Delete InstanceofExpression(472)", "Delete SimpleName: o(473)", "Delete SimpleName: Double(474)", "Delete SimpleType: Double(475)", "Delete InstanceofExpression(476)", "Delete InfixExpression: ||(477)", "Delete ReturnStatement(478)", "Delete Block(479)", "Delete MethodDeclaration(480)", "Delete TextElement: Is Object a whole number.(481)", "Delete TagElement(482)", "Delete SimpleName: o(483)", "Delete TextElement:  Object to be analyzed.(484)", "Delete TagElement: @param(485)", "Delete TextElement:  true if Integer, Long, Byte, Short or Character.(486)", "Delete TagElement: @return(487)", "Delete Javadoc(488)", "Delete Modifier: protected(489)", "Delete PrimitiveType: boolean(490)", "Delete SimpleName: isNumberable(491)", "Delete Modifier: final(492)", "Delete SimpleName: Object(493)", "Delete SimpleType: Object(494)", "Delete SimpleName: o(495)", "Delete SingleVariableDeclaration(496)", "Delete SimpleName: o(497)", "Delete SimpleName: Integer(498)", "Delete SimpleType: Integer(499)", "Delete InstanceofExpression(500)", "Delete SimpleName: o(501)", "Delete SimpleName: Long(502)", "Delete SimpleType: Long(503)", "Delete InstanceofExpression(504)", "Delete SimpleName: o(505)", "Delete SimpleName: Byte(506)", "Delete SimpleType: Byte(507)", "Delete InstanceofExpression(508)", "Delete SimpleName: o(509)", "Delete SimpleName: Short(510)", "Delete SimpleType: Short(511)", "Delete InstanceofExpression(512)", "Delete SimpleName: o(513)", "Delete SimpleName: Character(514)", "Delete SimpleType: Character(515)", "Delete InstanceofExpression(516)", "Delete InfixExpression: ||(517)", "Delete ReturnStatement(518)", "Delete Block(519)", "Delete MethodDeclaration(520)", "Delete TextElement: Given a BigInteger, narrow it to an Integer or Long if it fits and the arguments(521)", "Delete TextElement: class allow it.(522)", "Delete TextElement: <p>(523)", "Delete TextElement: The rules are:(524)", "Delete TextElement: if either arguments is a BigInteger, no narrowing will occur(525)", "Delete TextElement: if either arguments is a Long, no narrowing to Integer will occur(526)", "Delete TextElement: </p>(527)", "Delete TagElement(528)", "Delete SimpleName: lhs(529)", "Delete TextElement:  the left hand side operand that lead to the bigi result(530)", "Delete TagElement: @param(531)", "Delete SimpleName: rhs(532)", "Delete TextElement:  the right hand side operand that lead to the bigi result(533)", "Delete TagElement: @param(534)", "Delete SimpleName: bigi(535)", "Delete TextElement:  the BigInteger to narrow(536)", "Delete TagElement: @param(537)", "Delete TextElement:  an Integer or Long if narrowing is possible, the original BigInteger otherwise(538)", "Delete TagElement: @return(539)", "Delete Javadoc(540)", "Delete Modifier: protected(541)", "Delete SimpleName: Number(542)", "Delete SimpleType: Number(543)", "Delete SimpleName: narrowBigInteger(544)", "Delete SimpleName: Object(545)", "Delete SimpleType: Object(546)", "Delete SimpleName: lhs(547)", "Delete SingleVariableDeclaration(548)", "Delete SimpleName: Object(549)", "Delete SimpleType: Object(550)", "Delete SimpleName: rhs(551)", "Delete SingleVariableDeclaration(552)", "Delete SimpleName: BigInteger(553)", "Delete SimpleType: BigInteger(554)", "Delete SimpleName: bigi(555)", "Delete SingleVariableDeclaration(556)", "Delete SimpleName: lhs(557)", "Delete SimpleName: BigInteger(558)", "Delete SimpleType: BigInteger(559)", "Delete InstanceofExpression(560)", "Delete SimpleName: rhs(561)", "Delete SimpleName: BigInteger(562)", "Delete SimpleType: BigInteger(563)", "Delete InstanceofExpression(564)", "Delete InfixExpression: ||(565)", "Delete ParenthesizedExpression(566)", "Delete PrefixExpression: !(567)", "Delete SimpleName: bigi(568)", "Delete SimpleName: compareTo(569)", "Delete SimpleName: BIGI_LONG_MAX_VALUE(570)", "Delete MethodInvocation(571)", "Delete NumberLiteral: 0(572)", "Delete InfixExpression: <=(573)", "Delete InfixExpression: &&(574)", "Delete SimpleName: bigi(575)", "Delete SimpleName: compareTo(576)", "Delete SimpleName: BIGI_LONG_MIN_VALUE(577)", "Delete MethodInvocation(578)", "Delete NumberLiteral: 0(579)", "Delete InfixExpression: >=(580)", "Delete InfixExpression: &&(581)", "Delete PrimitiveType: long(582)", "Delete SimpleName: l(583)", "Delete SimpleName: bigi(584)", "Delete SimpleName: longValue(585)", "Delete MethodInvocation(586)", "Delete VariableDeclarationFragment(587)", "Delete VariableDeclarationStatement(588)", "Delete SimpleName: lhs(589)", "Delete SimpleName: Long(590)", "Delete SimpleType: Long(591)", "Delete InstanceofExpression(592)", "Delete SimpleName: rhs(593)", "Delete SimpleName: Long(594)", "Delete SimpleType: Long(595)", "Delete InstanceofExpression(596)", "Delete InfixExpression: ||(597)", "Delete ParenthesizedExpression(598)", "Delete PrefixExpression: !(599)", "Delete SimpleName: l(600)", "Delete QualifiedName: Integer.MAX_VALUE(601)", "Delete InfixExpression: <=(602)", "Delete InfixExpression: &&(603)", "Delete SimpleName: l(604)", "Delete QualifiedName: Integer.MIN_VALUE(605)", "Delete InfixExpression: >=(606)", "Delete InfixExpression: &&(607)", "Delete SimpleName: Integer(608)", "Delete SimpleName: valueOf(609)", "Delete PrimitiveType: int(610)", "Delete SimpleName: l(611)", "Delete CastExpression(612)", "Delete MethodInvocation(613)", "Delete ReturnStatement(614)", "Delete Block(615)", "Delete IfStatement(616)", "Delete SimpleName: Long(617)", "Delete SimpleName: valueOf(618)", "Delete SimpleName: l(619)", "Delete MethodInvocation(620)", "Delete ReturnStatement(621)", "Delete Block(622)", "Delete IfStatement(623)", "Delete SimpleName: bigi(624)", "Delete ReturnStatement(625)", "Delete Block(626)", "Delete MethodDeclaration(627)", "Delete TextElement: Given a BigDecimal, attempt to narrow it to an Integer or Long if it fits if(628)", "Delete TextElement: one of the arguments is a numberable.(629)", "Delete TagElement(630)", "Delete SimpleName: lhs(631)", "Delete TextElement:  the left hand side operand that lead to the bigd result(632)", "Delete TagElement: @param(633)", "Delete SimpleName: rhs(634)", "Delete TextElement:  the right hand side operand that lead to the bigd result(635)", "Delete TagElement: @param(636)", "Delete SimpleName: bigd(637)", "Delete TextElement:  the BigDecimal to narrow(638)", "Delete TagElement: @param(639)", "Delete TextElement:  an Integer or Long if narrowing is possible, the original BigInteger otherwise(640)", "Delete TagElement: @return(641)", "Delete Javadoc(642)", "Delete Modifier: protected(643)", "Delete SimpleName: Number(644)", "Delete SimpleType: Number(645)", "Delete SimpleName: narrowBigDecimal(646)", "Delete SimpleName: Object(647)", "Delete SimpleType: Object(648)", "Delete SimpleName: lhs(649)", "Delete SingleVariableDeclaration(650)", "Delete SimpleName: Object(651)", "Delete SimpleType: Object(652)", "Delete SimpleName: rhs(653)", "Delete SingleVariableDeclaration(654)", "Delete SimpleName: BigDecimal(655)", "Delete SimpleType: BigDecimal(656)", "Delete SimpleName: bigd(657)", "Delete SingleVariableDeclaration(658)", "Delete SimpleName: isNumberable(659)", "Delete SimpleName: lhs(660)", "Delete MethodInvocation(661)", "Delete SimpleName: isNumberable(662)", "Delete SimpleName: rhs(663)", "Delete MethodInvocation(664)", "Delete InfixExpression: ||(665)", "Delete PrimitiveType: long(666)", "Delete SimpleName: l(667)", "Delete SimpleName: bigd(668)", "Delete SimpleName: longValueExact(669)", "Delete MethodInvocation(670)", "Delete VariableDeclarationFragment(671)", "Delete VariableDeclarationStatement(672)", "Delete SimpleName: l(673)", "Delete QualifiedName: Integer.MAX_VALUE(674)", "Delete InfixExpression: <=(675)", "Delete SimpleName: l(676)", "Delete QualifiedName: Integer.MIN_VALUE(677)", "Delete InfixExpression: >=(678)", "Delete InfixExpression: &&(679)", "Delete SimpleName: Integer(680)", "Delete SimpleName: valueOf(681)", "Delete PrimitiveType: int(682)", "Delete SimpleName: l(683)", "Delete CastExpression(684)", "Delete MethodInvocation(685)", "Delete ReturnStatement(686)", "Delete Block(687)", "Delete SimpleName: Long(688)", "Delete SimpleName: valueOf(689)", "Delete SimpleName: l(690)", "Delete MethodInvocation(691)", "Delete ReturnStatement(692)", "Delete Block(693)", "Delete IfStatement(694)", "Delete Block(695)", "Delete SimpleName: ArithmeticException(696)", "Delete SimpleType: ArithmeticException(697)", "Delete SimpleName: xa(698)", "Delete SingleVariableDeclaration(699)", "Delete Block(700)", "Delete CatchClause(701)", "Delete TryStatement(702)", "Delete Block(703)", "Delete IfStatement(704)", "Delete SimpleName: bigd(705)", "Delete ReturnStatement(706)", "Delete Block(707)", "Delete MethodDeclaration(708)", "Delete TextElement: Given an array of objects, attempt to type it more strictly.(709)", "Delete TextElement: <ul>(710)", "Delete TextElement: <li>If all objects are of the same type, the array returned will be an array of that same type</li>(711)", "Delete TextElement: <li>If all objects are Numbers, the array returned will be an array of Numbers</li>(712)", "Delete TextElement: <li>If all objects are convertible to a primitive type, the array returned will be an array(713)", "Delete TextElement: of the primitive type</li>(714)", "Delete TextElement: </ul>(715)", "Delete TagElement(716)", "Delete SimpleName: untyped(717)", "Delete TextElement:  an untyped array(718)", "Delete TagElement: @param(719)", "Delete TextElement:  the original array if the attempt to strictly type the array fails, a typed array otherwise(720)", "Delete TagElement: @return(721)", "Delete Javadoc(722)", "Delete Modifier: protected(723)", "Delete SimpleName: Object(724)", "Delete SimpleType: Object(725)", "Delete SimpleName: narrowArrayType(726)", "Delete SimpleName: Object(727)", "Delete SimpleType: Object(728)", "Delete Dimension(729)", "Delete ArrayType: Object[](730)", "Delete SimpleName: untyped(731)", "Delete SingleVariableDeclaration(732)", "Delete Modifier: final(733)", "Delete PrimitiveType: int(734)", "Delete SimpleName: size(735)", "Delete QualifiedName: untyped.length(736)", "Delete VariableDeclarationFragment(737)", "Delete VariableDeclarationStatement(738)", "Delete SimpleName: Class(739)", "Delete SimpleType: Class(740)", "Delete WildcardType: ?(741)", "Delete ParameterizedType: Class<?>(742)", "Delete SimpleName: commonClass(743)", "Delete NullLiteral(744)", "Delete VariableDeclarationFragment(745)", "Delete VariableDeclarationStatement(746)", "Delete SimpleName: size(747)", "Delete NumberLiteral: 0(748)", "Delete InfixExpression: >(749)", "Delete PrimitiveType: boolean(750)", "Delete SimpleName: isNumber(751)", "Delete BooleanLiteral: true(752)", "Delete VariableDeclarationFragment(753)", "Delete VariableDeclarationStatement(754)", "Delete PrimitiveType: int(755)", "Delete SimpleName: u(756)", "Delete NumberLiteral: 0(757)", "Delete VariableDeclarationFragment(758)", "Delete VariableDeclarationExpression(759)", "Delete SimpleName: u(760)", "Delete SimpleName: size(761)", "Delete InfixExpression: <(762)", "Delete SimpleName: Object(763)", "Delete SimpleType: Object(764)", "Delete TypeLiteral(765)", "Delete SimpleName: equals(766)", "Delete SimpleName: commonClass(767)", "Delete MethodInvocation(768)", "Delete PrefixExpression: !(769)", "Delete InfixExpression: &&(770)", "Delete SimpleName: u(771)", "Delete PrefixExpression: ++(772)", "Delete SimpleName: untyped(773)", "Delete SimpleName: u(774)", "Delete ArrayAccess(775)", "Delete NullLiteral(776)", "Delete InfixExpression: !=(777)", "Delete SimpleName: Class(778)", "Delete SimpleType: Class(779)", "Delete WildcardType: ?(780)", "Delete ParameterizedType: Class<?>(781)", "Delete SimpleName: eclass(782)", "Delete SimpleName: untyped(783)", "Delete SimpleName: u(784)", "Delete ArrayAccess(785)", "Delete SimpleName: getClass(786)", "Delete MethodInvocation(787)", "Delete VariableDeclarationFragment(788)", "Delete VariableDeclarationStatement(789)", "Delete SimpleName: commonClass(790)", "Delete NullLiteral(791)", "Delete InfixExpression: ==(792)", "Delete SimpleName: commonClass(793)", "Delete SimpleName: eclass(794)", "Delete Assignment: =(795)", "Delete ExpressionStatement(796)", "Delete SimpleName: isNumber(797)", "Delete SimpleName: Number(798)", "Delete SimpleType: Number(799)", "Delete TypeLiteral(800)", "Delete SimpleName: isAssignableFrom(801)", "Delete SimpleName: commonClass(802)", "Delete MethodInvocation(803)", "Delete Assignment: &=(804)", "Delete ExpressionStatement(805)", "Delete Block(806)", "Delete SimpleName: commonClass(807)", "Delete SimpleName: equals(808)", "Delete SimpleName: eclass(809)", "Delete MethodInvocation(810)", "Delete PrefixExpression: !(811)", "Delete SimpleName: isNumber(812)", "Delete SimpleName: Number(813)", "Delete SimpleType: Number(814)", "Delete TypeLiteral(815)", "Delete SimpleName: isAssignableFrom(816)", "Delete SimpleName: eclass(817)", "Delete MethodInvocation(818)", "Delete InfixExpression: &&(819)", "Delete SimpleName: commonClass(820)", "Delete SimpleName: Number(821)", "Delete SimpleType: Number(822)", "Delete TypeLiteral(823)", "Delete Assignment: =(824)", "Delete ExpressionStatement(825)", "Delete Block(826)", "Delete SimpleName: eclass(827)", "Delete SimpleName: eclass(828)", "Delete SimpleName: getSuperclass(829)", "Delete MethodInvocation(830)", "Delete Assignment: =(831)", "Delete ExpressionStatement(832)", "Delete SimpleName: eclass(833)", "Delete NullLiteral(834)", "Delete InfixExpression: ==(835)", "Delete SimpleName: commonClass(836)", "Delete SimpleName: Object(837)", "Delete SimpleType: Object(838)", "Delete TypeLiteral(839)", "Delete Assignment: =(840)", "Delete ExpressionStatement(841)", "Delete BreakStatement(842)", "Delete Block(843)", "Delete IfStatement(844)", "Delete Block(845)", "Delete SimpleName: commonClass(846)", "Delete SimpleName: isAssignableFrom(847)", "Delete SimpleName: eclass(848)", "Delete MethodInvocation(849)", "Delete PrefixExpression: !(850)", "Delete DoStatement(851)", "Delete Block(852)", "Delete IfStatement(853)", "Delete Block(854)", "Delete IfStatement(855)", "Delete IfStatement(856)", "Delete Block(857)", "Delete SimpleName: isNumber(858)", "Delete BooleanLiteral: false(859)", "Delete Assignment: =(860)", "Delete ExpressionStatement(861)", "Delete Block(862)", "Delete IfStatement(863)", "Delete Block(864)", "Delete ForStatement(865)", "Delete SimpleName: commonClass(866)", "Delete NullLiteral(867)", "Delete InfixExpression: !=(868)", "Delete SimpleName: Object(869)", "Delete SimpleType: Object(870)", "Delete TypeLiteral(871)", "Delete SimpleName: equals(872)", "Delete SimpleName: commonClass(873)", "Delete MethodInvocation(874)", "Delete PrefixExpression: !(875)", "Delete InfixExpression: &&(876)", "Delete SimpleName: isNumber(877)", "Delete Modifier: final(878)", "Delete SimpleName: Field(879)", "Delete SimpleType: Field(880)", "Delete SimpleName: type(881)", "Delete SimpleName: commonClass(882)", "Delete SimpleName: getField(883)", "Delete StringLiteral: \"TYPE\"(884)", "Delete MethodInvocation(885)", "Delete VariableDeclarationFragment(886)", "Delete VariableDeclarationStatement(887)", "Delete SimpleName: commonClass(888)", "Delete SimpleName: Class(889)", "Delete SimpleType: Class(890)", "Delete WildcardType: ?(891)", "Delete ParameterizedType: Class<?>(892)", "Delete SimpleName: type(893)", "Delete SimpleName: get(894)", "Delete NullLiteral(895)", "Delete MethodInvocation(896)", "Delete CastExpression(897)", "Delete Assignment: =(898)", "Delete ExpressionStatement(899)", "Delete Block(900)", "Delete SimpleName: Exception(901)", "Delete SimpleType: Exception(902)", "Delete SimpleName: xany(903)", "Delete SingleVariableDeclaration(904)", "Delete Block(905)", "Delete CatchClause(906)", "Delete TryStatement(907)", "Delete Block(908)", "Delete IfStatement(909)", "Delete SimpleName: Object(910)", "Delete SimpleType: Object(911)", "Delete SimpleName: typed(912)", "Delete SimpleName: Array(913)", "Delete SimpleName: newInstance(914)", "Delete SimpleName: commonClass(915)", "Delete SimpleName: size(916)", "Delete MethodInvocation(917)", "Delete VariableDeclarationFragment(918)", "Delete VariableDeclarationStatement(919)", "Delete PrimitiveType: int(920)", "Delete SimpleName: i(921)", "Delete NumberLiteral: 0(922)", "Delete VariableDeclarationFragment(923)", "Delete VariableDeclarationExpression(924)", "Delete SimpleName: i(925)", "Delete SimpleName: size(926)", "Delete InfixExpression: <(927)", "Delete SimpleName: i(928)", "Delete PrefixExpression: ++(929)", "Delete SimpleName: Array(930)", "Delete SimpleName: set(931)", "Delete SimpleName: typed(932)", "Delete SimpleName: i(933)", "Delete SimpleName: untyped(934)", "Delete SimpleName: i(935)", "Delete ArrayAccess(936)", "Delete MethodInvocation(937)", "Delete ExpressionStatement(938)", "Delete Block(939)", "Delete ForStatement(940)", "Delete SimpleName: typed(941)", "Delete ReturnStatement(942)", "Delete Block(943)", "Delete IfStatement(944)", "Delete Block(945)", "Delete IfStatement(946)", "Delete SimpleName: untyped(947)", "Delete ReturnStatement(948)", "Delete Block(949)", "Delete MethodDeclaration(950)", "Delete TextElement: Replace all numbers in an arguments array with the smallest type that will fit.(951)", "Delete TagElement(952)", "Delete SimpleName: args(953)", "Delete TextElement:  the argument array(954)", "Delete TagElement: @param(955)", "Delete TextElement:  true if some arguments were narrowed and args array is modified,(956)", "Delete TextElement: false if no narrowing occured and args array has not been modified(957)", "Delete TagElement: @return(958)", "Delete Javadoc(959)", "Delete Modifier: protected(960)", "Delete PrimitiveType: boolean(961)", "Delete SimpleName: narrowArguments(962)", "Delete SimpleName: Object(963)", "Delete SimpleType: Object(964)", "Delete Dimension(965)", "Delete ArrayType: Object[](966)", "Delete SimpleName: args(967)", "Delete SingleVariableDeclaration(968)", "Delete PrimitiveType: boolean(969)", "Delete SimpleName: narrowed(970)", "Delete BooleanLiteral: false(971)", "Delete VariableDeclarationFragment(972)", "Delete VariableDeclarationStatement(973)", "Delete PrimitiveType: int(974)", "Delete SimpleName: a(975)", "Delete NumberLiteral: 0(976)", "Delete VariableDeclarationFragment(977)", "Delete VariableDeclarationExpression(978)", "Delete SimpleName: a(979)", "Delete QualifiedName: args.length(980)", "Delete InfixExpression: <(981)", "Delete SimpleName: a(982)", "Delete PrefixExpression: ++(983)", "Delete SimpleName: Object(984)", "Delete SimpleType: Object(985)", "Delete SimpleName: arg(986)", "Delete SimpleName: args(987)", "Delete SimpleName: a(988)", "Delete ArrayAccess(989)", "Delete VariableDeclarationFragment(990)", "Delete VariableDeclarationStatement(991)", "Delete SimpleName: arg(992)", "Delete SimpleName: Number(993)", "Delete SimpleType: Number(994)", "Delete InstanceofExpression(995)", "Delete SimpleName: Object(996)", "Delete SimpleType: Object(997)", "Delete SimpleName: narg(998)", "Delete SimpleName: narrow(999)", "Delete SimpleName: Number(1000)", "Delete SimpleType: Number(1001)", "Delete SimpleName: arg(1002)", "Delete CastExpression(1003)", "Delete MethodInvocation(1004)", "Delete VariableDeclarationFragment(1005)", "Delete VariableDeclarationStatement(1006)", "Delete SimpleName: narg(1007)", "Delete SimpleName: arg(1008)", "Delete InfixExpression: !=(1009)", "Delete SimpleName: narrowed(1010)", "Delete BooleanLiteral: true(1011)", "Delete Assignment: =(1012)", "Delete ExpressionStatement(1013)", "Delete Block(1014)", "Delete IfStatement(1015)", "Delete SimpleName: args(1016)", "Delete SimpleName: a(1017)", "Delete ArrayAccess(1018)", "Delete SimpleName: narg(1019)", "Delete Assignment: =(1020)", "Delete ExpressionStatement(1021)", "Delete Block(1022)", "Delete IfStatement(1023)", "Delete Block(1024)", "Delete ForStatement(1025)", "Delete SimpleName: narrowed(1026)", "Delete ReturnStatement(1027)", "Delete Block(1028)", "Delete MethodDeclaration(1029)", "Delete TextElement: Add two values together.(1030)", "Delete TextElement: <p>(1031)", "Delete TextElement: If any numeric add fails on coercion to the appropriate type,(1032)", "Delete TextElement: treat as Strings and do concatenation.(1033)", "Delete TextElement: </p>(1034)", "Delete TagElement(1035)", "Delete SimpleName: left(1036)", "Delete TextElement:  first value(1037)", "Delete TagElement: @param(1038)", "Delete SimpleName: right(1039)", "Delete TextElement:  second value(1040)", "Delete TagElement: @param(1041)", "Delete TextElement:  left + right.(1042)", "Delete TagElement: @return(1043)", "Delete Javadoc(1044)", "Delete Modifier: public(1045)", "Delete SimpleName: Object(1046)", "Delete SimpleType: Object(1047)", "Delete SimpleName: add(1048)", "Delete SimpleName: Object(1049)", "Delete SimpleType: Object(1050)", "Delete SimpleName: left(1051)", "Delete SingleVariableDeclaration(1052)", "Delete SimpleName: Object(1053)", "Delete SimpleType: Object(1054)", "Delete SimpleName: right(1055)", "Delete SingleVariableDeclaration(1056)", "Delete SimpleName: left(1057)", "Delete NullLiteral(1058)", "Delete InfixExpression: ==(1059)", "Delete SimpleName: right(1060)", "Delete NullLiteral(1061)", "Delete InfixExpression: ==(1062)", "Delete InfixExpression: &&(1063)", "Delete SimpleName: controlNullNullOperands(1064)", "Delete MethodInvocation(1065)", "Delete ReturnStatement(1066)", "Delete Block(1067)", "Delete IfStatement(1068)", "Delete SimpleName: isFloatingPointNumber(1069)", "Delete SimpleName: left(1070)", "Delete MethodInvocation(1071)", "Delete SimpleName: isFloatingPointNumber(1072)", "Delete SimpleName: right(1073)", "Delete MethodInvocation(1074)", "Delete InfixExpression: ||(1075)", "Delete PrimitiveType: double(1076)", "Delete SimpleName: l(1077)", "Delete SimpleName: toDouble(1078)", "Delete SimpleName: left(1079)", "Delete MethodInvocation(1080)", "Delete VariableDeclarationFragment(1081)", "Delete VariableDeclarationStatement(1082)", "Delete PrimitiveType: double(1083)", "Delete SimpleName: r(1084)", "Delete SimpleName: toDouble(1085)", "Delete SimpleName: right(1086)", "Delete MethodInvocation(1087)", "Delete VariableDeclarationFragment(1088)", "Delete VariableDeclarationStatement(1089)", "Delete SimpleName: Double(1090)", "Delete SimpleType: Double(1091)", "Delete SimpleName: l(1092)", "Delete SimpleName: r(1093)", "Delete InfixExpression: +(1094)", "Delete ClassInstanceCreation(1095)", "Delete ReturnStatement(1096)", "Delete Block(1097)", "Delete IfStatement(1098)", "Delete SimpleName: left(1099)", "Delete SimpleName: BigDecimal(1100)", "Delete SimpleType: BigDecimal(1101)", "Delete InstanceofExpression(1102)", "Delete SimpleName: right(1103)", "Delete SimpleName: BigDecimal(1104)", "Delete SimpleType: BigDecimal(1105)", "Delete InstanceofExpression(1106)", "Delete InfixExpression: ||(1107)", "Delete SimpleName: BigDecimal(1108)", "Delete SimpleType: BigDecimal(1109)", "Delete SimpleName: l(1110)", "Delete SimpleName: toBigDecimal(1111)", "Delete SimpleName: left(1112)", "Delete MethodInvocation(1113)", "Delete VariableDeclarationFragment(1114)", "Delete VariableDeclarationStatement(1115)", "Delete SimpleName: BigDecimal(1116)", "Delete SimpleType: BigDecimal(1117)", "Delete SimpleName: r(1118)", "Delete SimpleName: toBigDecimal(1119)", "Delete SimpleName: right(1120)", "Delete MethodInvocation(1121)", "Delete VariableDeclarationFragment(1122)", "Delete VariableDeclarationStatement(1123)", "Delete SimpleName: BigDecimal(1124)", "Delete SimpleType: BigDecimal(1125)", "Delete SimpleName: result(1126)", "Delete SimpleName: l(1127)", "Delete SimpleName: add(1128)", "Delete SimpleName: r(1129)", "Delete SimpleName: getMathContext(1130)", "Delete MethodInvocation(1131)", "Delete MethodInvocation(1132)", "Delete VariableDeclarationFragment(1133)", "Delete VariableDeclarationStatement(1134)", "Delete SimpleName: narrowBigDecimal(1135)", "Delete SimpleName: left(1136)", "Delete SimpleName: right(1137)", "Delete SimpleName: result(1138)", "Delete MethodInvocation(1139)", "Delete ReturnStatement(1140)", "Delete Block(1141)", "Delete IfStatement(1142)", "Delete SimpleName: BigInteger(1143)", "Delete SimpleType: BigInteger(1144)", "Delete SimpleName: l(1145)", "Delete SimpleName: toBigInteger(1146)", "Delete SimpleName: left(1147)", "Delete MethodInvocation(1148)", "Delete VariableDeclarationFragment(1149)", "Delete VariableDeclarationStatement(1150)", "Delete SimpleName: BigInteger(1151)", "Delete SimpleType: BigInteger(1152)", "Delete SimpleName: r(1153)", "Delete SimpleName: toBigInteger(1154)", "Delete SimpleName: right(1155)", "Delete MethodInvocation(1156)", "Delete VariableDeclarationFragment(1157)", "Delete VariableDeclarationStatement(1158)", "Delete SimpleName: BigInteger(1159)", "Delete SimpleType: BigInteger(1160)", "Delete SimpleName: result(1161)", "Delete SimpleName: l(1162)", "Delete SimpleName: add(1163)", "Delete SimpleName: r(1164)", "Delete MethodInvocation(1165)", "Delete VariableDeclarationFragment(1166)", "Delete VariableDeclarationStatement(1167)", "Delete SimpleName: narrowBigInteger(1168)", "Delete SimpleName: left(1169)", "Delete SimpleName: right(1170)", "Delete SimpleName: result(1171)", "Delete MethodInvocation(1172)", "Delete ReturnStatement(1173)", "Delete Block(1174)", "Delete QualifiedName: java.lang.NumberFormatException(1175)", "Delete SimpleType: java.lang.NumberFormatException(1176)", "Delete SimpleName: nfe(1177)", "Delete SingleVariableDeclaration(1178)", "Delete SimpleName: toString(1179)", "Delete SimpleName: left(1180)", "Delete MethodInvocation(1181)", "Delete SimpleName: concat(1182)", "Delete SimpleName: toString(1183)", "Delete SimpleName: right(1184)", "Delete MethodInvocation(1185)", "Delete MethodInvocation(1186)", "Delete ReturnStatement(1187)", "Delete Block(1188)", "Delete CatchClause(1189)", "Delete TryStatement(1190)", "Delete Block(1191)", "Delete MethodDeclaration(1192)", "Delete TextElement: Divide the left value by the right.(1193)", "Delete TagElement(1194)", "Delete SimpleName: left(1195)", "Delete TextElement:  first value(1196)", "Delete TagElement: @param(1197)", "Delete SimpleName: right(1198)", "Delete TextElement:  second value(1199)", "Delete TagElement: @param(1200)", "Delete TextElement:  left / right(1201)", "Delete TagElement: @return(1202)", "Delete SimpleName: ArithmeticException(1203)", "Delete TextElement:  if right == 0(1204)", "Delete TagElement: @throws(1205)", "Delete Javadoc(1206)", "Delete Modifier: public(1207)", "Delete SimpleName: Object(1208)", "Delete SimpleType: Object(1209)", "Delete SimpleName: divide(1210)", "Delete SimpleName: Object(1211)", "Delete SimpleType: Object(1212)", "Delete SimpleName: left(1213)", "Delete SingleVariableDeclaration(1214)", "Delete SimpleName: Object(1215)", "Delete SimpleType: Object(1216)", "Delete SimpleName: right(1217)", "Delete SingleVariableDeclaration(1218)", "Delete SimpleName: left(1219)", "Delete NullLiteral(1220)", "Delete InfixExpression: ==(1221)", "Delete SimpleName: right(1222)", "Delete NullLiteral(1223)", "Delete InfixExpression: ==(1224)", "Delete InfixExpression: &&(1225)", "Delete SimpleName: controlNullNullOperands(1226)", "Delete MethodInvocation(1227)", "Delete ReturnStatement(1228)", "Delete Block(1229)", "Delete IfStatement(1230)", "Delete SimpleName: isFloatingPointNumber(1231)", "Delete SimpleName: left(1232)", "Delete MethodInvocation(1233)", "Delete SimpleName: isFloatingPointNumber(1234)", "Delete SimpleName: right(1235)", "Delete MethodInvocation(1236)", "Delete InfixExpression: ||(1237)", "Delete PrimitiveType: double(1238)", "Delete SimpleName: l(1239)", "Delete SimpleName: toDouble(1240)", "Delete SimpleName: left(1241)", "Delete MethodInvocation(1242)", "Delete VariableDeclarationFragment(1243)", "Delete VariableDeclarationStatement(1244)", "Delete PrimitiveType: double(1245)", "Delete SimpleName: r(1246)", "Delete SimpleName: toDouble(1247)", "Delete SimpleName: right(1248)", "Delete MethodInvocation(1249)", "Delete VariableDeclarationFragment(1250)", "Delete VariableDeclarationStatement(1251)", "Delete SimpleName: r(1252)", "Delete NumberLiteral: 0.0(1253)", "Delete InfixExpression: ==(1254)", "Delete SimpleName: ArithmeticException(1255)", "Delete SimpleType: ArithmeticException(1256)", "Delete StringLiteral: \"/\"(1257)", "Delete ClassInstanceCreation(1258)", "Delete ThrowStatement(1259)", "Delete Block(1260)", "Delete IfStatement(1261)", "Delete SimpleName: Double(1262)", "Delete SimpleType: Double(1263)", "Delete SimpleName: l(1264)", "Delete SimpleName: r(1265)", "Delete InfixExpression: /(1266)", "Delete ClassInstanceCreation(1267)", "Delete ReturnStatement(1268)", "Delete Block(1269)", "Delete IfStatement(1270)", "Delete SimpleName: left(1271)", "Delete SimpleName: BigDecimal(1272)", "Delete SimpleType: BigDecimal(1273)", "Delete InstanceofExpression(1274)", "Delete SimpleName: right(1275)", "Delete SimpleName: BigDecimal(1276)", "Delete SimpleType: BigDecimal(1277)", "Delete InstanceofExpression(1278)", "Delete InfixExpression: ||(1279)", "Delete SimpleName: BigDecimal(1280)", "Delete SimpleType: BigDecimal(1281)", "Delete SimpleName: l(1282)", "Delete SimpleName: toBigDecimal(1283)", "Delete SimpleName: left(1284)", "Delete MethodInvocation(1285)", "Delete VariableDeclarationFragment(1286)", "Delete VariableDeclarationStatement(1287)", "Delete SimpleName: BigDecimal(1288)", "Delete SimpleType: BigDecimal(1289)", "Delete SimpleName: r(1290)", "Delete SimpleName: toBigDecimal(1291)", "Delete SimpleName: right(1292)", "Delete MethodInvocation(1293)", "Delete VariableDeclarationFragment(1294)", "Delete VariableDeclarationStatement(1295)", "Delete QualifiedName: BigDecimal.ZERO(1296)", "Delete SimpleName: equals(1297)", "Delete SimpleName: r(1298)", "Delete MethodInvocation(1299)", "Delete SimpleName: ArithmeticException(1300)", "Delete SimpleType: ArithmeticException(1301)", "Delete StringLiteral: \"/\"(1302)", "Delete ClassInstanceCreation(1303)", "Delete ThrowStatement(1304)", "Delete Block(1305)", "Delete IfStatement(1306)", "Delete SimpleName: BigDecimal(1307)", "Delete SimpleType: BigDecimal(1308)", "Delete SimpleName: result(1309)", "Delete SimpleName: l(1310)", "Delete SimpleName: divide(1311)", "Delete SimpleName: r(1312)", "Delete SimpleName: getMathContext(1313)", "Delete MethodInvocation(1314)", "Delete MethodInvocation(1315)", "Delete VariableDeclarationFragment(1316)", "Delete VariableDeclarationStatement(1317)", "Delete SimpleName: narrowBigDecimal(1318)", "Delete SimpleName: left(1319)", "Delete SimpleName: right(1320)", "Delete SimpleName: result(1321)", "Delete MethodInvocation(1322)", "Delete ReturnStatement(1323)", "Delete Block(1324)", "Delete IfStatement(1325)", "Delete SimpleName: BigInteger(1326)", "Delete SimpleType: BigInteger(1327)", "Delete SimpleName: l(1328)", "Delete SimpleName: toBigInteger(1329)", "Delete SimpleName: left(1330)", "Delete MethodInvocation(1331)", "Delete VariableDeclarationFragment(1332)", "Delete VariableDeclarationStatement(1333)", "Delete SimpleName: BigInteger(1334)", "Delete SimpleType: BigInteger(1335)", "Delete SimpleName: r(1336)", "Delete SimpleName: toBigInteger(1337)", "Delete SimpleName: right(1338)", "Delete MethodInvocation(1339)", "Delete VariableDeclarationFragment(1340)", "Delete VariableDeclarationStatement(1341)", "Delete QualifiedName: BigInteger.ZERO(1342)", "Delete SimpleName: equals(1343)", "Delete SimpleName: r(1344)", "Delete MethodInvocation(1345)", "Delete SimpleName: ArithmeticException(1346)", "Delete SimpleType: ArithmeticException(1347)", "Delete StringLiteral: \"/\"(1348)", "Delete ClassInstanceCreation(1349)", "Delete ThrowStatement(1350)", "Delete Block(1351)", "Delete IfStatement(1352)", "Delete SimpleName: BigInteger(1353)", "Delete SimpleType: BigInteger(1354)", "Delete SimpleName: result(1355)", "Delete SimpleName: l(1356)", "Delete SimpleName: divide(1357)", "Delete SimpleName: r(1358)", "Delete MethodInvocation(1359)", "Delete VariableDeclarationFragment(1360)", "Delete VariableDeclarationStatement(1361)", "Delete SimpleName: narrowBigInteger(1362)", "Delete SimpleName: left(1363)", "Delete SimpleName: right(1364)", "Delete SimpleName: result(1365)", "Delete MethodInvocation(1366)", "Delete ReturnStatement(1367)", "Delete Block(1368)", "Delete MethodDeclaration(1369)", "Delete TextElement: left value mod right.(1370)", "Delete TagElement(1371)", "Delete SimpleName: left(1372)", "Delete TextElement:  first value(1373)", "Delete TagElement: @param(1374)", "Delete SimpleName: right(1375)", "Delete TextElement:  second value(1376)", "Delete TagElement: @param(1377)", "Delete TextElement:  left mod right(1378)", "Delete TagElement: @return(1379)", "Delete SimpleName: ArithmeticException(1380)", "Delete TextElement:  if right == 0.0(1381)", "Delete TagElement: @throws(1382)", "Delete Javadoc(1383)", "Delete Modifier: public(1384)", "Delete SimpleName: Object(1385)", "Delete SimpleType: Object(1386)", "Delete SimpleName: mod(1387)", "Delete SimpleName: Object(1388)", "Delete SimpleType: Object(1389)", "Delete SimpleName: left(1390)", "Delete SingleVariableDeclaration(1391)", "Delete SimpleName: Object(1392)", "Delete SimpleType: Object(1393)", "Delete SimpleName: right(1394)", "Delete SingleVariableDeclaration(1395)", "Delete SimpleName: left(1396)", "Delete NullLiteral(1397)", "Delete InfixExpression: ==(1398)", "Delete SimpleName: right(1399)", "Delete NullLiteral(1400)", "Delete InfixExpression: ==(1401)", "Delete InfixExpression: &&(1402)", "Delete SimpleName: controlNullNullOperands(1403)", "Delete MethodInvocation(1404)", "Delete ReturnStatement(1405)", "Delete Block(1406)", "Delete IfStatement(1407)", "Delete SimpleName: isFloatingPointNumber(1408)", "Delete SimpleName: left(1409)", "Delete MethodInvocation(1410)", "Delete SimpleName: isFloatingPointNumber(1411)", "Delete SimpleName: right(1412)", "Delete MethodInvocation(1413)", "Delete InfixExpression: ||(1414)", "Delete PrimitiveType: double(1415)", "Delete SimpleName: l(1416)", "Delete SimpleName: toDouble(1417)", "Delete SimpleName: left(1418)", "Delete MethodInvocation(1419)", "Delete VariableDeclarationFragment(1420)", "Delete VariableDeclarationStatement(1421)", "Delete PrimitiveType: double(1422)", "Delete SimpleName: r(1423)", "Delete SimpleName: toDouble(1424)", "Delete SimpleName: right(1425)", "Delete MethodInvocation(1426)", "Delete VariableDeclarationFragment(1427)", "Delete VariableDeclarationStatement(1428)", "Delete SimpleName: r(1429)", "Delete NumberLiteral: 0.0(1430)", "Delete InfixExpression: ==(1431)", "Delete SimpleName: ArithmeticException(1432)", "Delete SimpleType: ArithmeticException(1433)", "Delete StringLiteral: \"%\"(1434)", "Delete ClassInstanceCreation(1435)", "Delete ThrowStatement(1436)", "Delete Block(1437)", "Delete IfStatement(1438)", "Delete SimpleName: Double(1439)", "Delete SimpleType: Double(1440)", "Delete SimpleName: l(1441)", "Delete SimpleName: r(1442)", "Delete InfixExpression: %(1443)", "Delete ClassInstanceCreation(1444)", "Delete ReturnStatement(1445)", "Delete Block(1446)", "Delete IfStatement(1447)", "Delete SimpleName: left(1448)", "Delete SimpleName: BigDecimal(1449)", "Delete SimpleType: BigDecimal(1450)", "Delete InstanceofExpression(1451)", "Delete SimpleName: right(1452)", "Delete SimpleName: BigDecimal(1453)", "Delete SimpleType: BigDecimal(1454)", "Delete InstanceofExpression(1455)", "Delete InfixExpression: ||(1456)", "Delete SimpleName: BigDecimal(1457)", "Delete SimpleType: BigDecimal(1458)", "Delete SimpleName: l(1459)", "Delete SimpleName: toBigDecimal(1460)", "Delete SimpleName: left(1461)", "Delete MethodInvocation(1462)", "Delete VariableDeclarationFragment(1463)", "Delete VariableDeclarationStatement(1464)", "Delete SimpleName: BigDecimal(1465)", "Delete SimpleType: BigDecimal(1466)", "Delete SimpleName: r(1467)", "Delete SimpleName: toBigDecimal(1468)", "Delete SimpleName: right(1469)", "Delete MethodInvocation(1470)", "Delete VariableDeclarationFragment(1471)", "Delete VariableDeclarationStatement(1472)", "Delete QualifiedName: BigDecimal.ZERO(1473)", "Delete SimpleName: equals(1474)", "Delete SimpleName: r(1475)", "Delete MethodInvocation(1476)", "Delete SimpleName: ArithmeticException(1477)", "Delete SimpleType: ArithmeticException(1478)", "Delete StringLiteral: \"%\"(1479)", "Delete ClassInstanceCreation(1480)", "Delete ThrowStatement(1481)", "Delete Block(1482)", "Delete IfStatement(1483)", "Delete SimpleName: BigDecimal(1484)", "Delete SimpleType: BigDecimal(1485)", "Delete SimpleName: remainder(1486)", "Delete SimpleName: l(1487)", "Delete SimpleName: remainder(1488)", "Delete SimpleName: r(1489)", "Delete SimpleName: getMathContext(1490)", "Delete MethodInvocation(1491)", "Delete MethodInvocation(1492)", "Delete VariableDeclarationFragment(1493)", "Delete VariableDeclarationStatement(1494)", "Delete SimpleName: narrowBigDecimal(1495)", "Delete SimpleName: left(1496)", "Delete SimpleName: right(1497)", "Delete SimpleName: remainder(1498)", "Delete MethodInvocation(1499)", "Delete ReturnStatement(1500)", "Delete Block(1501)", "Delete IfStatement(1502)", "Delete SimpleName: BigInteger(1503)", "Delete SimpleType: BigInteger(1504)", "Delete SimpleName: l(1505)", "Delete SimpleName: toBigInteger(1506)", "Delete SimpleName: left(1507)", "Delete MethodInvocation(1508)", "Delete VariableDeclarationFragment(1509)", "Delete VariableDeclarationStatement(1510)", "Delete SimpleName: BigInteger(1511)", "Delete SimpleType: BigInteger(1512)", "Delete SimpleName: r(1513)", "Delete SimpleName: toBigInteger(1514)", "Delete SimpleName: right(1515)", "Delete MethodInvocation(1516)", "Delete VariableDeclarationFragment(1517)", "Delete VariableDeclarationStatement(1518)", "Delete SimpleName: BigInteger(1519)", "Delete SimpleType: BigInteger(1520)", "Delete SimpleName: result(1521)", "Delete SimpleName: l(1522)", "Delete SimpleName: mod(1523)", "Delete SimpleName: r(1524)", "Delete MethodInvocation(1525)", "Delete VariableDeclarationFragment(1526)", "Delete VariableDeclarationStatement(1527)", "Delete QualifiedName: BigInteger.ZERO(1528)", "Delete SimpleName: equals(1529)", "Delete SimpleName: r(1530)", "Delete MethodInvocation(1531)", "Delete SimpleName: ArithmeticException(1532)", "Delete SimpleType: ArithmeticException(1533)", "Delete StringLiteral: \"%\"(1534)", "Delete ClassInstanceCreation(1535)", "Delete ThrowStatement(1536)", "Delete Block(1537)", "Delete IfStatement(1538)", "Delete SimpleName: narrowBigInteger(1539)", "Delete SimpleName: left(1540)", "Delete SimpleName: right(1541)", "Delete SimpleName: result(1542)", "Delete MethodInvocation(1543)", "Delete ReturnStatement(1544)", "Delete Block(1545)", "Delete MethodDeclaration(1546)", "Delete TextElement: Multiply the left value by the right.(1547)", "Delete TagElement(1548)", "Delete SimpleName: left(1549)", "Delete TextElement:  first value(1550)", "Delete TagElement: @param(1551)", "Delete SimpleName: right(1552)", "Delete TextElement:  second value(1553)", "Delete TagElement: @param(1554)", "Delete TextElement:  left * right.(1555)", "Delete TagElement: @return(1556)", "Delete Javadoc(1557)", "Delete Modifier: public(1558)", "Delete SimpleName: Object(1559)", "Delete SimpleType: Object(1560)", "Delete SimpleName: multiply(1561)", "Delete SimpleName: Object(1562)", "Delete SimpleType: Object(1563)", "Delete SimpleName: left(1564)", "Delete SingleVariableDeclaration(1565)", "Delete SimpleName: Object(1566)", "Delete SimpleType: Object(1567)", "Delete SimpleName: right(1568)", "Delete SingleVariableDeclaration(1569)", "Delete SimpleName: left(1570)", "Delete NullLiteral(1571)", "Delete InfixExpression: ==(1572)", "Delete SimpleName: right(1573)", "Delete NullLiteral(1574)", "Delete InfixExpression: ==(1575)", "Delete InfixExpression: &&(1576)", "Delete SimpleName: controlNullNullOperands(1577)", "Delete MethodInvocation(1578)", "Delete ReturnStatement(1579)", "Delete Block(1580)", "Delete IfStatement(1581)", "Delete SimpleName: isFloatingPointNumber(1582)", "Delete SimpleName: left(1583)", "Delete MethodInvocation(1584)", "Delete SimpleName: isFloatingPointNumber(1585)", "Delete SimpleName: right(1586)", "Delete MethodInvocation(1587)", "Delete InfixExpression: ||(1588)", "Delete PrimitiveType: double(1589)", "Delete SimpleName: l(1590)", "Delete SimpleName: toDouble(1591)", "Delete SimpleName: left(1592)", "Delete MethodInvocation(1593)", "Delete VariableDeclarationFragment(1594)", "Delete VariableDeclarationStatement(1595)", "Delete PrimitiveType: double(1596)", "Delete SimpleName: r(1597)", "Delete SimpleName: toDouble(1598)", "Delete SimpleName: right(1599)", "Delete MethodInvocation(1600)", "Delete VariableDeclarationFragment(1601)", "Delete VariableDeclarationStatement(1602)", "Delete SimpleName: Double(1603)", "Delete SimpleType: Double(1604)", "Delete SimpleName: l(1605)", "Delete SimpleName: r(1606)", "Delete InfixExpression: *(1607)", "Delete ClassInstanceCreation(1608)", "Delete ReturnStatement(1609)", "Delete Block(1610)", "Delete IfStatement(1611)", "Delete SimpleName: left(1612)", "Delete SimpleName: BigDecimal(1613)", "Delete SimpleType: BigDecimal(1614)", "Delete InstanceofExpression(1615)", "Delete SimpleName: right(1616)", "Delete SimpleName: BigDecimal(1617)", "Delete SimpleType: BigDecimal(1618)", "Delete InstanceofExpression(1619)", "Delete InfixExpression: ||(1620)", "Delete SimpleName: BigDecimal(1621)", "Delete SimpleType: BigDecimal(1622)", "Delete SimpleName: l(1623)", "Delete SimpleName: toBigDecimal(1624)", "Delete SimpleName: left(1625)", "Delete MethodInvocation(1626)", "Delete VariableDeclarationFragment(1627)", "Delete VariableDeclarationStatement(1628)", "Delete SimpleName: BigDecimal(1629)", "Delete SimpleType: BigDecimal(1630)", "Delete SimpleName: r(1631)", "Delete SimpleName: toBigDecimal(1632)", "Delete SimpleName: right(1633)", "Delete MethodInvocation(1634)", "Delete VariableDeclarationFragment(1635)", "Delete VariableDeclarationStatement(1636)", "Delete SimpleName: BigDecimal(1637)", "Delete SimpleType: BigDecimal(1638)", "Delete SimpleName: result(1639)", "Delete SimpleName: l(1640)", "Delete SimpleName: multiply(1641)", "Delete SimpleName: r(1642)", "Delete SimpleName: getMathContext(1643)", "Delete MethodInvocation(1644)", "Delete MethodInvocation(1645)", "Delete VariableDeclarationFragment(1646)", "Delete VariableDeclarationStatement(1647)", "Delete SimpleName: narrowBigDecimal(1648)", "Delete SimpleName: left(1649)", "Delete SimpleName: right(1650)", "Delete SimpleName: result(1651)", "Delete MethodInvocation(1652)", "Delete ReturnStatement(1653)", "Delete Block(1654)", "Delete IfStatement(1655)", "Delete SimpleName: BigInteger(1656)", "Delete SimpleType: BigInteger(1657)", "Delete SimpleName: l(1658)", "Delete SimpleName: toBigInteger(1659)", "Delete SimpleName: left(1660)", "Delete MethodInvocation(1661)", "Delete VariableDeclarationFragment(1662)", "Delete VariableDeclarationStatement(1663)", "Delete SimpleName: BigInteger(1664)", "Delete SimpleType: BigInteger(1665)", "Delete SimpleName: r(1666)", "Delete SimpleName: toBigInteger(1667)", "Delete SimpleName: right(1668)", "Delete MethodInvocation(1669)", "Delete VariableDeclarationFragment(1670)", "Delete VariableDeclarationStatement(1671)", "Delete SimpleName: BigInteger(1672)", "Delete SimpleType: BigInteger(1673)", "Delete SimpleName: result(1674)", "Delete SimpleName: l(1675)", "Delete SimpleName: multiply(1676)", "Delete SimpleName: r(1677)", "Delete MethodInvocation(1678)", "Delete VariableDeclarationFragment(1679)", "Delete VariableDeclarationStatement(1680)", "Delete SimpleName: narrowBigInteger(1681)", "Delete SimpleName: left(1682)", "Delete SimpleName: right(1683)", "Delete SimpleName: result(1684)", "Delete MethodInvocation(1685)", "Delete ReturnStatement(1686)", "Delete Block(1687)", "Delete MethodDeclaration(1688)", "Delete TextElement: Subtract the right value from the left.(1689)", "Delete TagElement(1690)", "Delete SimpleName: left(1691)", "Delete TextElement:  first value(1692)", "Delete TagElement: @param(1693)", "Delete SimpleName: right(1694)", "Delete TextElement:  second value(1695)", "Delete TagElement: @param(1696)", "Delete TextElement:  left - right.(1697)", "Delete TagElement: @return(1698)", "Delete Javadoc(1699)", "Delete Modifier: public(1700)", "Delete SimpleName: Object(1701)", "Delete SimpleType: Object(1702)", "Delete SimpleName: subtract(1703)", "Delete SimpleName: Object(1704)", "Delete SimpleType: Object(1705)", "Delete SimpleName: left(1706)", "Delete SingleVariableDeclaration(1707)", "Delete SimpleName: Object(1708)", "Delete SimpleType: Object(1709)", "Delete SimpleName: right(1710)", "Delete SingleVariableDeclaration(1711)", "Delete SimpleName: left(1712)", "Delete NullLiteral(1713)", "Delete InfixExpression: ==(1714)", "Delete SimpleName: right(1715)", "Delete NullLiteral(1716)", "Delete InfixExpression: ==(1717)", "Delete InfixExpression: &&(1718)", "Delete SimpleName: controlNullNullOperands(1719)", "Delete MethodInvocation(1720)", "Delete ReturnStatement(1721)", "Delete Block(1722)", "Delete IfStatement(1723)", "Delete SimpleName: isFloatingPointNumber(1724)", "Delete SimpleName: left(1725)", "Delete MethodInvocation(1726)", "Delete SimpleName: isFloatingPointNumber(1727)", "Delete SimpleName: right(1728)", "Delete MethodInvocation(1729)", "Delete InfixExpression: ||(1730)", "Delete PrimitiveType: double(1731)", "Delete SimpleName: l(1732)", "Delete SimpleName: toDouble(1733)", "Delete SimpleName: left(1734)", "Delete MethodInvocation(1735)", "Delete VariableDeclarationFragment(1736)", "Delete VariableDeclarationStatement(1737)", "Delete PrimitiveType: double(1738)", "Delete SimpleName: r(1739)", "Delete SimpleName: toDouble(1740)", "Delete SimpleName: right(1741)", "Delete MethodInvocation(1742)", "Delete VariableDeclarationFragment(1743)", "Delete VariableDeclarationStatement(1744)", "Delete SimpleName: Double(1745)", "Delete SimpleType: Double(1746)", "Delete SimpleName: l(1747)", "Delete SimpleName: r(1748)", "Delete InfixExpression: -(1749)", "Delete ClassInstanceCreation(1750)", "Delete ReturnStatement(1751)", "Delete Block(1752)", "Delete IfStatement(1753)", "Delete SimpleName: left(1754)", "Delete SimpleName: BigDecimal(1755)", "Delete SimpleType: BigDecimal(1756)", "Delete InstanceofExpression(1757)", "Delete SimpleName: right(1758)", "Delete SimpleName: BigDecimal(1759)", "Delete SimpleType: BigDecimal(1760)", "Delete InstanceofExpression(1761)", "Delete InfixExpression: ||(1762)", "Delete SimpleName: BigDecimal(1763)", "Delete SimpleType: BigDecimal(1764)", "Delete SimpleName: l(1765)", "Delete SimpleName: toBigDecimal(1766)", "Delete SimpleName: left(1767)", "Delete MethodInvocation(1768)", "Delete VariableDeclarationFragment(1769)", "Delete VariableDeclarationStatement(1770)", "Delete SimpleName: BigDecimal(1771)", "Delete SimpleType: BigDecimal(1772)", "Delete SimpleName: r(1773)", "Delete SimpleName: toBigDecimal(1774)", "Delete SimpleName: right(1775)", "Delete MethodInvocation(1776)", "Delete VariableDeclarationFragment(1777)", "Delete VariableDeclarationStatement(1778)", "Delete SimpleName: BigDecimal(1779)", "Delete SimpleType: BigDecimal(1780)", "Delete SimpleName: result(1781)", "Delete SimpleName: l(1782)", "Delete SimpleName: subtract(1783)", "Delete SimpleName: r(1784)", "Delete SimpleName: getMathContext(1785)", "Delete MethodInvocation(1786)", "Delete MethodInvocation(1787)", "Delete VariableDeclarationFragment(1788)", "Delete VariableDeclarationStatement(1789)", "Delete SimpleName: narrowBigDecimal(1790)", "Delete SimpleName: left(1791)", "Delete SimpleName: right(1792)", "Delete SimpleName: result(1793)", "Delete MethodInvocation(1794)", "Delete ReturnStatement(1795)", "Delete Block(1796)", "Delete IfStatement(1797)", "Delete SimpleName: BigInteger(1798)", "Delete SimpleType: BigInteger(1799)", "Delete SimpleName: l(1800)", "Delete SimpleName: toBigInteger(1801)", "Delete SimpleName: left(1802)", "Delete MethodInvocation(1803)", "Delete VariableDeclarationFragment(1804)", "Delete VariableDeclarationStatement(1805)", "Delete SimpleName: BigInteger(1806)", "Delete SimpleType: BigInteger(1807)", "Delete SimpleName: r(1808)", "Delete SimpleName: toBigInteger(1809)", "Delete SimpleName: right(1810)", "Delete MethodInvocation(1811)", "Delete VariableDeclarationFragment(1812)", "Delete VariableDeclarationStatement(1813)", "Delete SimpleName: BigInteger(1814)", "Delete SimpleType: BigInteger(1815)", "Delete SimpleName: result(1816)", "Delete SimpleName: l(1817)", "Delete SimpleName: subtract(1818)", "Delete SimpleName: r(1819)", "Delete MethodInvocation(1820)", "Delete VariableDeclarationFragment(1821)", "Delete VariableDeclarationStatement(1822)", "Delete SimpleName: narrowBigInteger(1823)", "Delete SimpleName: left(1824)", "Delete SimpleName: right(1825)", "Delete SimpleName: result(1826)", "Delete MethodInvocation(1827)", "Delete ReturnStatement(1828)", "Delete Block(1829)", "Delete MethodDeclaration(1830)", "Delete TextElement: Negates a value (unary minus for numbers).(1831)", "Delete TagElement(1832)", "Delete SimpleName: val(1833)", "Delete TextElement:  the value to negate(1834)", "Delete TagElement: @param(1835)", "Delete TextElement:  the negated value(1836)", "Delete TagElement: @return(1837)", "Delete Javadoc(1838)", "Delete Modifier: public(1839)", "Delete SimpleName: Object(1840)", "Delete SimpleType: Object(1841)", "Delete SimpleName: negate(1842)", "Delete SimpleName: Object(1843)", "Delete SimpleType: Object(1844)", "Delete SimpleName: val(1845)", "Delete SingleVariableDeclaration(1846)", "Delete SimpleName: val(1847)", "Delete SimpleName: Integer(1848)", "Delete SimpleType: Integer(1849)", "Delete InstanceofExpression(1850)", "Delete PrimitiveType: int(1851)", "Delete SimpleName: valueAsInt(1852)", "Delete SimpleName: Integer(1853)", "Delete SimpleType: Integer(1854)", "Delete SimpleName: val(1855)", "Delete CastExpression(1856)", "Delete ParenthesizedExpression(1857)", "Delete SimpleName: intValue(1858)", "Delete MethodInvocation(1859)", "Delete VariableDeclarationFragment(1860)", "Delete VariableDeclarationStatement(1861)", "Delete SimpleName: Integer(1862)", "Delete SimpleName: valueOf(1863)", "Delete SimpleName: valueAsInt(1864)", "Delete PrefixExpression: -(1865)", "Delete MethodInvocation(1866)", "Delete ReturnStatement(1867)", "Delete Block(1868)", "Delete SimpleName: val(1869)", "Delete SimpleName: Double(1870)", "Delete SimpleType: Double(1871)", "Delete InstanceofExpression(1872)", "Delete PrimitiveType: double(1873)", "Delete SimpleName: valueAsDouble(1874)", "Delete SimpleName: Double(1875)", "Delete SimpleType: Double(1876)", "Delete SimpleName: val(1877)", "Delete CastExpression(1878)", "Delete ParenthesizedExpression(1879)", "Delete SimpleName: doubleValue(1880)", "Delete MethodInvocation(1881)", "Delete VariableDeclarationFragment(1882)", "Delete VariableDeclarationStatement(1883)", "Delete SimpleName: Double(1884)", "Delete SimpleType: Double(1885)", "Delete SimpleName: valueAsDouble(1886)", "Delete PrefixExpression: -(1887)", "Delete ClassInstanceCreation(1888)", "Delete ReturnStatement(1889)", "Delete Block(1890)", "Delete SimpleName: val(1891)", "Delete SimpleName: Long(1892)", "Delete SimpleType: Long(1893)", "Delete InstanceofExpression(1894)", "Delete PrimitiveType: long(1895)", "Delete SimpleName: valueAsLong(1896)", "Delete SimpleName: Long(1897)", "Delete SimpleType: Long(1898)", "Delete SimpleName: val(1899)", "Delete CastExpression(1900)", "Delete ParenthesizedExpression(1901)", "Delete SimpleName: longValue(1902)", "Delete MethodInvocation(1903)", "Delete PrefixExpression: -(1904)", "Delete VariableDeclarationFragment(1905)", "Delete VariableDeclarationStatement(1906)", "Delete SimpleName: Long(1907)", "Delete SimpleName: valueOf(1908)", "Delete SimpleName: valueAsLong(1909)", "Delete MethodInvocation(1910)", "Delete ReturnStatement(1911)", "Delete Block(1912)", "Delete SimpleName: val(1913)", "Delete SimpleName: BigDecimal(1914)", "Delete SimpleType: BigDecimal(1915)", "Delete InstanceofExpression(1916)", "Delete SimpleName: BigDecimal(1917)", "Delete SimpleType: BigDecimal(1918)", "Delete SimpleName: valueAsBigD(1919)", "Delete SimpleName: BigDecimal(1920)", "Delete SimpleType: BigDecimal(1921)", "Delete SimpleName: val(1922)", "Delete CastExpression(1923)", "Delete VariableDeclarationFragment(1924)", "Delete VariableDeclarationStatement(1925)", "Delete SimpleName: valueAsBigD(1926)", "Delete SimpleName: negate(1927)", "Delete MethodInvocation(1928)", "Delete ReturnStatement(1929)", "Delete Block(1930)", "Delete SimpleName: val(1931)", "Delete SimpleName: BigInteger(1932)", "Delete SimpleType: BigInteger(1933)", "Delete InstanceofExpression(1934)", "Delete SimpleName: BigInteger(1935)", "Delete SimpleType: BigInteger(1936)", "Delete SimpleName: valueAsBigI(1937)", "Delete SimpleName: BigInteger(1938)", "Delete SimpleType: BigInteger(1939)", "Delete SimpleName: val(1940)", "Delete CastExpression(1941)", "Delete VariableDeclarationFragment(1942)", "Delete VariableDeclarationStatement(1943)", "Delete SimpleName: valueAsBigI(1944)", "Delete SimpleName: negate(1945)", "Delete MethodInvocation(1946)", "Delete ReturnStatement(1947)", "Delete Block(1948)", "Delete SimpleName: val(1949)", "Delete SimpleName: Float(1950)", "Delete SimpleType: Float(1951)", "Delete InstanceofExpression(1952)", "Delete PrimitiveType: float(1953)", "Delete SimpleName: valueAsFloat(1954)", "Delete SimpleName: Float(1955)", "Delete SimpleType: Float(1956)", "Delete SimpleName: val(1957)", "Delete CastExpression(1958)", "Delete ParenthesizedExpression(1959)", "Delete SimpleName: floatValue(1960)", "Delete MethodInvocation(1961)", "Delete VariableDeclarationFragment(1962)", "Delete VariableDeclarationStatement(1963)", "Delete SimpleName: Float(1964)", "Delete SimpleType: Float(1965)", "Delete SimpleName: valueAsFloat(1966)", "Delete PrefixExpression: -(1967)", "Delete ClassInstanceCreation(1968)", "Delete ReturnStatement(1969)", "Delete Block(1970)", "Delete SimpleName: val(1971)", "Delete SimpleName: Short(1972)", "Delete SimpleType: Short(1973)", "Delete InstanceofExpression(1974)", "Delete PrimitiveType: short(1975)", "Delete SimpleName: valueAsShort(1976)", "Delete SimpleName: Short(1977)", "Delete SimpleType: Short(1978)", "Delete SimpleName: val(1979)", "Delete CastExpression(1980)", "Delete ParenthesizedExpression(1981)", "Delete SimpleName: shortValue(1982)", "Delete MethodInvocation(1983)", "Delete VariableDeclarationFragment(1984)", "Delete VariableDeclarationStatement(1985)", "Delete SimpleName: Short(1986)", "Delete SimpleName: valueOf(1987)", "Delete PrimitiveType: short(1988)", "Delete SimpleName: valueAsShort(1989)", "Delete PrefixExpression: -(1990)", "Delete CastExpression(1991)", "Delete MethodInvocation(1992)", "Delete ReturnStatement(1993)", "Delete Block(1994)", "Delete SimpleName: val(1995)", "Delete SimpleName: Byte(1996)", "Delete SimpleType: Byte(1997)", "Delete InstanceofExpression(1998)", "Delete PrimitiveType: byte(1999)", "Delete SimpleName: valueAsByte(2000)", "Delete SimpleName: Byte(2001)", "Delete SimpleType: Byte(2002)", "Delete SimpleName: val(2003)", "Delete CastExpression(2004)", "Delete ParenthesizedExpression(2005)", "Delete SimpleName: byteValue(2006)", "Delete MethodInvocation(2007)", "Delete VariableDeclarationFragment(2008)", "Delete VariableDeclarationStatement(2009)", "Delete SimpleName: Byte(2010)", "Delete SimpleName: valueOf(2011)", "Delete PrimitiveType: byte(2012)", "Delete SimpleName: valueAsByte(2013)", "Delete PrefixExpression: -(2014)", "Delete CastExpression(2015)", "Delete MethodInvocation(2016)", "Delete ReturnStatement(2017)", "Delete Block(2018)", "Delete SimpleName: val(2019)", "Delete SimpleName: Boolean(2020)", "Delete SimpleType: Boolean(2021)", "Delete InstanceofExpression(2022)", "Delete SimpleName: Boolean(2023)", "Delete SimpleType: Boolean(2024)", "Delete SimpleName: val(2025)", "Delete CastExpression(2026)", "Delete ParenthesizedExpression(2027)", "Delete SimpleName: booleanValue(2028)", "Delete MethodInvocation(2029)", "Delete QualifiedName: Boolean.FALSE(2030)", "Delete QualifiedName: Boolean.TRUE(2031)", "Delete ConditionalExpression(2032)", "Delete ReturnStatement(2033)", "Delete Block(2034)", "Delete IfStatement(2035)", "Delete IfStatement(2036)", "Delete IfStatement(2037)", "Delete IfStatement(2038)", "Delete IfStatement(2039)", "Delete IfStatement(2040)", "Delete IfStatement(2041)", "Delete IfStatement(2042)", "Delete IfStatement(2043)", "Delete SimpleName: ArithmeticException(2044)", "Delete SimpleType: ArithmeticException(2045)", "Delete StringLiteral: \"Object negation:(\"(2046)", "Delete SimpleName: val(2047)", "Delete StringLiteral: \")\"(2048)", "Delete InfixExpression: +(2049)", "Delete ClassInstanceCreation(2050)", "Delete ThrowStatement(2051)", "Delete Block(2052)", "Delete MethodDeclaration(2053)", "Delete TextElement: Test if left regexp matches right.(2054)", "Delete TagElement(2055)", "Delete SimpleName: left(2056)", "Delete TextElement:  first value(2057)", "Delete TagElement: @param(2058)", "Delete SimpleName: right(2059)", "Delete TextElement:  second value(2060)", "Delete TagElement: @param(2061)", "Delete TextElement:  test result.(2062)", "Delete TagElement: @return(2063)", "Delete TextElement:  2.1(2064)", "Delete TagElement: @since(2065)", "Delete Javadoc(2066)", "Delete Modifier: public(2067)", "Delete PrimitiveType: boolean(2068)", "Delete SimpleName: matches(2069)", "Delete SimpleName: Object(2070)", "Delete SimpleType: Object(2071)", "Delete SimpleName: left(2072)", "Delete SingleVariableDeclaration(2073)", "Delete SimpleName: Object(2074)", "Delete SimpleType: Object(2075)", "Delete SimpleName: right(2076)", "Delete SingleVariableDeclaration(2077)", "Delete SimpleName: left(2078)", "Delete NullLiteral(2079)", "Delete InfixExpression: ==(2080)", "Delete SimpleName: right(2081)", "Delete NullLiteral(2082)", "Delete InfixExpression: ==(2083)", "Delete InfixExpression: &&(2084)", "Delete BooleanLiteral: true(2085)", "Delete ReturnStatement(2086)", "Delete Block(2087)", "Delete IfStatement(2088)", "Delete SimpleName: left(2089)", "Delete NullLiteral(2090)", "Delete InfixExpression: ==(2091)", "Delete SimpleName: right(2092)", "Delete NullLiteral(2093)", "Delete InfixExpression: ==(2094)", "Delete InfixExpression: ||(2095)", "Delete BooleanLiteral: false(2096)", "Delete ReturnStatement(2097)", "Delete Block(2098)", "Delete IfStatement(2099)", "Delete Modifier: final(2100)", "Delete SimpleName: String(2101)", "Delete SimpleType: String(2102)", "Delete SimpleName: arg(2103)", "Delete SimpleName: left(2104)", "Delete SimpleName: toString(2105)", "Delete MethodInvocation(2106)", "Delete VariableDeclarationFragment(2107)", "Delete VariableDeclarationStatement(2108)", "Delete SimpleName: right(2109)", "Delete QualifiedName: java.util.regex.Pattern(2110)", "Delete SimpleType: java.util.regex.Pattern(2111)", "Delete InstanceofExpression(2112)", "Delete QualifiedName: java.util.regex.Pattern(2113)", "Delete SimpleType: java.util.regex.Pattern(2114)", "Delete SimpleName: right(2115)", "Delete CastExpression(2116)", "Delete ParenthesizedExpression(2117)", "Delete SimpleName: matcher(2118)", "Delete SimpleName: arg(2119)", "Delete MethodInvocation(2120)", "Delete SimpleName: matches(2121)", "Delete MethodInvocation(2122)", "Delete ReturnStatement(2123)", "Delete Block(2124)", "Delete SimpleName: arg(2125)", "Delete SimpleName: matches(2126)", "Delete SimpleName: right(2127)", "Delete SimpleName: toString(2128)", "Delete MethodInvocation(2129)", "Delete MethodInvocation(2130)", "Delete ReturnStatement(2131)", "Delete Block(2132)", "Delete IfStatement(2133)", "Delete Block(2134)", "Delete MethodDeclaration(2135)", "Delete TextElement: Performs a bitwise and.(2136)", "Delete TagElement(2137)", "Delete SimpleName: left(2138)", "Delete TextElement:  the left operand(2139)", "Delete TagElement: @param(2140)", "Delete SimpleName: right(2141)", "Delete TextElement:  the right operator(2142)", "Delete TagElement: @param(2143)", "Delete TextElement:  left & right(2144)", "Delete TagElement: @return(2145)", "Delete TextElement:  2.1(2146)", "Delete TagElement: @since(2147)", "Delete Javadoc(2148)", "Delete Modifier: public(2149)", "Delete SimpleName: Object(2150)", "Delete SimpleType: Object(2151)", "Delete SimpleName: bitwiseAnd(2152)", "Delete SimpleName: Object(2153)", "Delete SimpleType: Object(2154)", "Delete SimpleName: left(2155)", "Delete SingleVariableDeclaration(2156)", "Delete SimpleName: Object(2157)", "Delete SimpleType: Object(2158)", "Delete SimpleName: right(2159)", "Delete SingleVariableDeclaration(2160)", "Delete PrimitiveType: long(2161)", "Delete SimpleName: l(2162)", "Delete SimpleName: toLong(2163)", "Delete SimpleName: left(2164)", "Delete MethodInvocation(2165)", "Delete VariableDeclarationFragment(2166)", "Delete VariableDeclarationStatement(2167)", "Delete PrimitiveType: long(2168)", "Delete SimpleName: r(2169)", "Delete SimpleName: toLong(2170)", "Delete SimpleName: right(2171)", "Delete MethodInvocation(2172)", "Delete VariableDeclarationFragment(2173)", "Delete VariableDeclarationStatement(2174)", "Delete SimpleName: Long(2175)", "Delete SimpleName: valueOf(2176)", "Delete SimpleName: l(2177)", "Delete SimpleName: r(2178)", "Delete InfixExpression: &(2179)", "Delete MethodInvocation(2180)", "Delete ReturnStatement(2181)", "Delete Block(2182)", "Delete MethodDeclaration(2183)", "Delete TextElement: Performs a bitwise or.(2184)", "Delete TagElement(2185)", "Delete SimpleName: left(2186)", "Delete TextElement:  the left operand(2187)", "Delete TagElement: @param(2188)", "Delete SimpleName: right(2189)", "Delete TextElement:  the right operator(2190)", "Delete TagElement: @param(2191)", "Delete TextElement:  left | right(2192)", "Delete TagElement: @return(2193)", "Delete TextElement:  2.1(2194)", "Delete TagElement: @since(2195)", "Delete Javadoc(2196)", "Delete Modifier: public(2197)", "Delete SimpleName: Object(2198)", "Delete SimpleType: Object(2199)", "Delete SimpleName: bitwiseOr(2200)", "Delete SimpleName: Object(2201)", "Delete SimpleType: Object(2202)", "Delete SimpleName: left(2203)", "Delete SingleVariableDeclaration(2204)", "Delete SimpleName: Object(2205)", "Delete SimpleType: Object(2206)", "Delete SimpleName: right(2207)", "Delete SingleVariableDeclaration(2208)", "Delete PrimitiveType: long(2209)", "Delete SimpleName: l(2210)", "Delete SimpleName: toLong(2211)", "Delete SimpleName: left(2212)", "Delete MethodInvocation(2213)", "Delete VariableDeclarationFragment(2214)", "Delete VariableDeclarationStatement(2215)", "Delete PrimitiveType: long(2216)", "Delete SimpleName: r(2217)", "Delete SimpleName: toLong(2218)", "Delete SimpleName: right(2219)", "Delete MethodInvocation(2220)", "Delete VariableDeclarationFragment(2221)", "Delete VariableDeclarationStatement(2222)", "Delete SimpleName: Long(2223)", "Delete SimpleName: valueOf(2224)", "Delete SimpleName: l(2225)", "Delete SimpleName: r(2226)", "Delete InfixExpression: |(2227)", "Delete MethodInvocation(2228)", "Delete ReturnStatement(2229)", "Delete Block(2230)", "Delete MethodDeclaration(2231)", "Delete TextElement: Performs a bitwise xor.(2232)", "Delete TagElement(2233)", "Delete SimpleName: left(2234)", "Delete TextElement:  the left operand(2235)", "Delete TagElement: @param(2236)", "Delete SimpleName: right(2237)", "Delete TextElement:  the right operator(2238)", "Delete TagElement: @param(2239)", "Delete TextElement:  left  right(2240)", "Delete TagElement: @return(2241)", "Delete TextElement:  2.1(2242)", "Delete TagElement: @since(2243)", "Delete Javadoc(2244)", "Delete Modifier: public(2245)", "Delete SimpleName: Object(2246)", "Delete SimpleType: Object(2247)", "Delete SimpleName: bitwiseXor(2248)", "Delete SimpleName: Object(2249)", "Delete SimpleType: Object(2250)", "Delete SimpleName: left(2251)", "Delete SingleVariableDeclaration(2252)", "Delete SimpleName: Object(2253)", "Delete SimpleType: Object(2254)", "Delete SimpleName: right(2255)", "Delete SingleVariableDeclaration(2256)", "Delete PrimitiveType: long(2257)", "Delete SimpleName: l(2258)", "Delete SimpleName: toLong(2259)", "Delete SimpleName: left(2260)", "Delete MethodInvocation(2261)", "Delete VariableDeclarationFragment(2262)", "Delete VariableDeclarationStatement(2263)", "Delete PrimitiveType: long(2264)", "Delete SimpleName: r(2265)", "Delete SimpleName: toLong(2266)", "Delete SimpleName: right(2267)", "Delete MethodInvocation(2268)", "Delete VariableDeclarationFragment(2269)", "Delete VariableDeclarationStatement(2270)", "Delete SimpleName: Long(2271)", "Delete SimpleName: valueOf(2272)", "Delete SimpleName: l(2273)", "Delete SimpleName: r(2274)", "Delete InfixExpression: ^(2275)", "Delete MethodInvocation(2276)", "Delete ReturnStatement(2277)", "Delete Block(2278)", "Delete MethodDeclaration(2279)", "Delete TextElement: Performs a bitwise complement.(2280)", "Delete TagElement(2281)", "Delete SimpleName: val(2282)", "Delete TextElement:  the operand(2283)", "Delete TagElement: @param(2284)", "Delete TextElement:  ~val(2285)", "Delete TagElement: @return(2286)", "Delete TextElement:  2.1(2287)", "Delete TagElement: @since(2288)", "Delete Javadoc(2289)", "Delete Modifier: public(2290)", "Delete SimpleName: Object(2291)", "Delete SimpleType: Object(2292)", "Delete SimpleName: bitwiseComplement(2293)", "Delete SimpleName: Object(2294)", "Delete SimpleType: Object(2295)", "Delete SimpleName: val(2296)", "Delete SingleVariableDeclaration(2297)", "Delete PrimitiveType: long(2298)", "Delete SimpleName: l(2299)", "Delete SimpleName: toLong(2300)", "Delete SimpleName: val(2301)", "Delete MethodInvocation(2302)", "Delete VariableDeclarationFragment(2303)", "Delete VariableDeclarationStatement(2304)", "Delete SimpleName: Long(2305)", "Delete SimpleName: valueOf(2306)", "Delete SimpleName: l(2307)", "Delete PrefixExpression: ~(2308)", "Delete MethodInvocation(2309)", "Delete ReturnStatement(2310)", "Delete Block(2311)", "Delete MethodDeclaration(2312)", "Delete TextElement: Performs a comparison.(2313)", "Delete TagElement(2314)", "Delete SimpleName: left(2315)", "Delete TextElement:  the left operand(2316)", "Delete TagElement: @param(2317)", "Delete SimpleName: right(2318)", "Delete TextElement:  the right operator(2319)", "Delete TagElement: @param(2320)", "Delete SimpleName: operator(2321)", "Delete TextElement:  the operator(2322)", "Delete TagElement: @param(2323)", "Delete TextElement:  -1 if left  &lt; right; +1 if left &gt > right; 0 if left == right(2324)", "Delete TagElement: @return(2325)", "Delete SimpleName: ArithmeticException(2326)", "Delete TextElement:  if either left or right is null(2327)", "Delete TagElement: @throws(2328)", "Delete TextElement:  2.1(2329)", "Delete TagElement: @since(2330)", "Delete Javadoc(2331)", "Delete Modifier: protected(2332)", "Delete PrimitiveType: int(2333)", "Delete SimpleName: compare(2334)", "Delete SimpleName: Object(2335)", "Delete SimpleType: Object(2336)", "Delete SimpleName: left(2337)", "Delete SingleVariableDeclaration(2338)", "Delete SimpleName: Object(2339)", "Delete SimpleType: Object(2340)", "Delete SimpleName: right(2341)", "Delete SingleVariableDeclaration(2342)", "Delete SimpleName: String(2343)", "Delete SimpleType: String(2344)", "Delete SimpleName: operator(2345)", "Delete SingleVariableDeclaration(2346)", "Delete SimpleName: left(2347)", "Delete NullLiteral(2348)", "Delete InfixExpression: !=(2349)", "Delete SimpleName: right(2350)", "Delete NullLiteral(2351)", "Delete InfixExpression: !=(2352)", "Delete InfixExpression: &&(2353)", "Delete SimpleName: left(2354)", "Delete SimpleName: BigDecimal(2355)", "Delete SimpleType: BigDecimal(2356)", "Delete InstanceofExpression(2357)", "Delete SimpleName: right(2358)", "Delete SimpleName: BigDecimal(2359)", "Delete SimpleType: BigDecimal(2360)", "Delete InstanceofExpression(2361)", "Delete InfixExpression: ||(2362)", "Delete SimpleName: BigDecimal(2363)", "Delete SimpleType: BigDecimal(2364)", "Delete SimpleName: l(2365)", "Delete SimpleName: toBigDecimal(2366)", "Delete SimpleName: left(2367)", "Delete MethodInvocation(2368)", "Delete VariableDeclarationFragment(2369)", "Delete VariableDeclarationStatement(2370)", "Delete SimpleName: BigDecimal(2371)", "Delete SimpleType: BigDecimal(2372)", "Delete SimpleName: r(2373)", "Delete SimpleName: toBigDecimal(2374)", "Delete SimpleName: right(2375)", "Delete MethodInvocation(2376)", "Delete VariableDeclarationFragment(2377)", "Delete VariableDeclarationStatement(2378)", "Delete SimpleName: l(2379)", "Delete SimpleName: compareTo(2380)", "Delete SimpleName: r(2381)", "Delete MethodInvocation(2382)", "Delete ReturnStatement(2383)", "Delete Block(2384)", "Delete SimpleName: left(2385)", "Delete SimpleName: BigInteger(2386)", "Delete SimpleType: BigInteger(2387)", "Delete InstanceofExpression(2388)", "Delete SimpleName: right(2389)", "Delete SimpleName: BigInteger(2390)", "Delete SimpleType: BigInteger(2391)", "Delete InstanceofExpression(2392)", "Delete InfixExpression: ||(2393)", "Delete SimpleName: BigInteger(2394)", "Delete SimpleType: BigInteger(2395)", "Delete SimpleName: l(2396)", "Delete SimpleName: toBigInteger(2397)", "Delete SimpleName: left(2398)", "Delete MethodInvocation(2399)", "Delete VariableDeclarationFragment(2400)", "Delete VariableDeclarationStatement(2401)", "Delete SimpleName: BigInteger(2402)", "Delete SimpleType: BigInteger(2403)", "Delete SimpleName: r(2404)", "Delete SimpleName: toBigInteger(2405)", "Delete SimpleName: right(2406)", "Delete MethodInvocation(2407)", "Delete VariableDeclarationFragment(2408)", "Delete VariableDeclarationStatement(2409)", "Delete SimpleName: l(2410)", "Delete SimpleName: compareTo(2411)", "Delete SimpleName: r(2412)", "Delete MethodInvocation(2413)", "Delete ReturnStatement(2414)", "Delete Block(2415)", "Delete SimpleName: isFloatingPoint(2416)", "Delete SimpleName: left(2417)", "Delete MethodInvocation(2418)", "Delete SimpleName: isFloatingPoint(2419)", "Delete SimpleName: right(2420)", "Delete MethodInvocation(2421)", "Delete InfixExpression: ||(2422)", "Delete PrimitiveType: double(2423)", "Delete SimpleName: lhs(2424)", "Delete SimpleName: toDouble(2425)", "Delete SimpleName: left(2426)", "Delete MethodInvocation(2427)", "Delete VariableDeclarationFragment(2428)", "Delete VariableDeclarationStatement(2429)", "Delete PrimitiveType: double(2430)", "Delete SimpleName: rhs(2431)", "Delete SimpleName: toDouble(2432)", "Delete SimpleName: right(2433)", "Delete MethodInvocation(2434)", "Delete VariableDeclarationFragment(2435)", "Delete VariableDeclarationStatement(2436)", "Delete SimpleName: Double(2437)", "Delete SimpleName: isNaN(2438)", "Delete SimpleName: lhs(2439)", "Delete MethodInvocation(2440)", "Delete SimpleName: Double(2441)", "Delete SimpleName: isNaN(2442)", "Delete SimpleName: rhs(2443)", "Delete MethodInvocation(2444)", "Delete NumberLiteral: 0(2445)", "Delete ReturnStatement(2446)", "Delete Block(2447)", "Delete NumberLiteral: 1(2448)", "Delete PrefixExpression: -(2449)", "Delete ReturnStatement(2450)", "Delete Block(2451)", "Delete IfStatement(2452)", "Delete Block(2453)", "Delete SimpleName: Double(2454)", "Delete SimpleName: isNaN(2455)", "Delete SimpleName: rhs(2456)", "Delete MethodInvocation(2457)", "Delete NumberLiteral: 1(2458)", "Delete PrefixExpression: +(2459)", "Delete ReturnStatement(2460)", "Delete Block(2461)", "Delete SimpleName: lhs(2462)", "Delete SimpleName: rhs(2463)", "Delete InfixExpression: <(2464)", "Delete NumberLiteral: 1(2465)", "Delete PrefixExpression: -(2466)", "Delete ReturnStatement(2467)", "Delete Block(2468)", "Delete SimpleName: lhs(2469)", "Delete SimpleName: rhs(2470)", "Delete InfixExpression: >(2471)", "Delete NumberLiteral: 1(2472)", "Delete PrefixExpression: +(2473)", "Delete ReturnStatement(2474)", "Delete Block(2475)", "Delete NumberLiteral: 0(2476)", "Delete ReturnStatement(2477)", "Delete Block(2478)", "Delete IfStatement(2479)", "Delete IfStatement(2480)", "Delete IfStatement(2481)", "Delete IfStatement(2482)", "Delete Block(2483)", "Delete SimpleName: isNumberable(2484)", "Delete SimpleName: left(2485)", "Delete MethodInvocation(2486)", "Delete SimpleName: isNumberable(2487)", "Delete SimpleName: right(2488)", "Delete MethodInvocation(2489)", "Delete InfixExpression: ||(2490)", "Delete PrimitiveType: long(2491)", "Delete SimpleName: lhs(2492)", "Delete SimpleName: toLong(2493)", "Delete SimpleName: left(2494)", "Delete MethodInvocation(2495)", "Delete VariableDeclarationFragment(2496)", "Delete VariableDeclarationStatement(2497)", "Delete PrimitiveType: long(2498)", "Delete SimpleName: rhs(2499)", "Delete SimpleName: toLong(2500)", "Delete SimpleName: right(2501)", "Delete MethodInvocation(2502)", "Delete VariableDeclarationFragment(2503)", "Delete VariableDeclarationStatement(2504)", "Delete SimpleName: lhs(2505)", "Delete SimpleName: rhs(2506)", "Delete InfixExpression: <(2507)", "Delete NumberLiteral: 1(2508)", "Delete PrefixExpression: -(2509)", "Delete ReturnStatement(2510)", "Delete Block(2511)", "Delete SimpleName: lhs(2512)", "Delete SimpleName: rhs(2513)", "Delete InfixExpression: >(2514)", "Delete NumberLiteral: 1(2515)", "Delete PrefixExpression: +(2516)", "Delete ReturnStatement(2517)", "Delete Block(2518)", "Delete NumberLiteral: 0(2519)", "Delete ReturnStatement(2520)", "Delete Block(2521)", "Delete IfStatement(2522)", "Delete IfStatement(2523)", "Delete Block(2524)", "Delete SimpleName: left(2525)", "Delete SimpleName: String(2526)", "Delete SimpleType: String(2527)", "Delete InstanceofExpression(2528)", "Delete SimpleName: right(2529)", "Delete SimpleName: String(2530)", "Delete SimpleType: String(2531)", "Delete InstanceofExpression(2532)", "Delete InfixExpression: ||(2533)", "Delete SimpleName: toString(2534)", "Delete SimpleName: left(2535)", "Delete MethodInvocation(2536)", "Delete SimpleName: compareTo(2537)", "Delete SimpleName: toString(2538)", "Delete SimpleName: right(2539)", "Delete MethodInvocation(2540)", "Delete MethodInvocation(2541)", "Delete ReturnStatement(2542)", "Delete Block(2543)", "Delete StringLiteral: \"==\"(2544)", "Delete SimpleName: equals(2545)", "Delete SimpleName: operator(2546)", "Delete MethodInvocation(2547)", "Delete SimpleName: left(2548)", "Delete SimpleName: equals(2549)", "Delete SimpleName: right(2550)", "Delete MethodInvocation(2551)", "Delete NumberLiteral: 0(2552)", "Delete NumberLiteral: 1(2553)", "Delete PrefixExpression: -(2554)", "Delete ConditionalExpression(2555)", "Delete ReturnStatement(2556)", "Delete Block(2557)", "Delete SimpleName: left(2558)", "Delete SimpleName: Comparable(2559)", "Delete SimpleType: Comparable(2560)", "Delete WildcardType: ?(2561)", "Delete ParameterizedType: Comparable<?>(2562)", "Delete InstanceofExpression(2563)", "Delete SimpleName: SuppressWarnings(2564)", "Delete StringLiteral: \"unchecked\"(2565)", "Delete SingleMemberAnnotation(2566)", "Delete Modifier: final(2567)", "Delete SimpleName: Comparable(2568)", "Delete SimpleType: Comparable(2569)", "Delete SimpleName: Object(2570)", "Delete SimpleType: Object(2571)", "Delete ParameterizedType: Comparable<Object>(2572)", "Delete SimpleName: comparable(2573)", "Delete SimpleName: Comparable(2574)", "Delete SimpleType: Comparable(2575)", "Delete SimpleName: Object(2576)", "Delete SimpleType: Object(2577)", "Delete ParameterizedType: Comparable<Object>(2578)", "Delete SimpleName: left(2579)", "Delete CastExpression(2580)", "Delete VariableDeclarationFragment(2581)", "Delete VariableDeclarationStatement(2582)", "Delete SimpleName: comparable(2583)", "Delete SimpleName: compareTo(2584)", "Delete SimpleName: right(2585)", "Delete MethodInvocation(2586)", "Delete ReturnStatement(2587)", "Delete Block(2588)", "Delete SimpleName: right(2589)", "Delete SimpleName: Comparable(2590)", "Delete SimpleType: Comparable(2591)", "Delete WildcardType: ?(2592)", "Delete ParameterizedType: Comparable<?>(2593)", "Delete InstanceofExpression(2594)", "Delete SimpleName: SuppressWarnings(2595)", "Delete StringLiteral: \"unchecked\"(2596)", "Delete SingleMemberAnnotation(2597)", "Delete Modifier: final(2598)", "Delete SimpleName: Comparable(2599)", "Delete SimpleType: Comparable(2600)", "Delete SimpleName: Object(2601)", "Delete SimpleType: Object(2602)", "Delete ParameterizedType: Comparable<Object>(2603)", "Delete SimpleName: comparable(2604)", "Delete SimpleName: Comparable(2605)", "Delete SimpleType: Comparable(2606)", "Delete SimpleName: Object(2607)", "Delete SimpleType: Object(2608)", "Delete ParameterizedType: Comparable<Object>(2609)", "Delete SimpleName: right(2610)", "Delete CastExpression(2611)", "Delete VariableDeclarationFragment(2612)", "Delete VariableDeclarationStatement(2613)", "Delete SimpleName: comparable(2614)", "Delete SimpleName: compareTo(2615)", "Delete SimpleName: left(2616)", "Delete MethodInvocation(2617)", "Delete ReturnStatement(2618)", "Delete Block(2619)", "Delete IfStatement(2620)", "Delete IfStatement(2621)", "Delete IfStatement(2622)", "Delete IfStatement(2623)", "Delete IfStatement(2624)", "Delete IfStatement(2625)", "Delete IfStatement(2626)", "Delete IfStatement(2627)", "Delete Block(2628)", "Delete IfStatement(2629)", "Delete SimpleName: ArithmeticException(2630)", "Delete SimpleType: ArithmeticException(2631)", "Delete StringLiteral: \"Object comparison:(\"(2632)", "Delete SimpleName: left(2633)", "Delete StringLiteral: \" \"(2634)", "Delete SimpleName: operator(2635)", "Delete StringLiteral: \" \"(2636)", "Delete SimpleName: right(2637)", "Delete StringLiteral: \")\"(2638)", "Delete InfixExpression: +(2639)", "Delete ClassInstanceCreation(2640)", "Delete ThrowStatement(2641)", "Delete Block(2642)", "Delete MethodDeclaration(2643)", "Delete TextElement: Test if left and right are equal.(2644)", "Delete TagElement(2645)", "Delete SimpleName: left(2646)", "Delete TextElement:  first value(2647)", "Delete TagElement: @param(2648)", "Delete SimpleName: right(2649)", "Delete TextElement:  second value(2650)", "Delete TagElement: @param(2651)", "Delete TextElement:  test result.(2652)", "Delete TagElement: @return(2653)", "Delete Javadoc(2654)", "Delete Modifier: public(2655)", "Delete PrimitiveType: boolean(2656)", "Delete SimpleName: equals(2657)", "Delete SimpleName: Object(2658)", "Delete SimpleType: Object(2659)", "Delete SimpleName: left(2660)", "Delete SingleVariableDeclaration(2661)", "Delete SimpleName: Object(2662)", "Delete SimpleType: Object(2663)", "Delete SimpleName: right(2664)", "Delete SingleVariableDeclaration(2665)", "Delete SimpleName: left(2666)", "Delete SimpleName: right(2667)", "Delete InfixExpression: ==(2668)", "Delete BooleanLiteral: true(2669)", "Delete ReturnStatement(2670)", "Delete Block(2671)", "Delete SimpleName: left(2672)", "Delete NullLiteral(2673)", "Delete InfixExpression: ==(2674)", "Delete SimpleName: right(2675)", "Delete NullLiteral(2676)", "Delete InfixExpression: ==(2677)", "Delete InfixExpression: ||(2678)", "Delete BooleanLiteral: false(2679)", "Delete ReturnStatement(2680)", "Delete Block(2681)", "Delete SimpleName: left(2682)", "Delete SimpleName: Boolean(2683)", "Delete SimpleType: Boolean(2684)", "Delete InstanceofExpression(2685)", "Delete SimpleName: right(2686)", "Delete SimpleName: Boolean(2687)", "Delete SimpleType: Boolean(2688)", "Delete InstanceofExpression(2689)", "Delete InfixExpression: ||(2690)", "Delete SimpleName: toBoolean(2691)", "Delete SimpleName: left(2692)", "Delete MethodInvocation(2693)", "Delete SimpleName: toBoolean(2694)", "Delete SimpleName: right(2695)", "Delete MethodInvocation(2696)", "Delete InfixExpression: ==(2697)", "Delete ReturnStatement(2698)", "Delete Block(2699)", "Delete SimpleName: compare(2700)", "Delete SimpleName: left(2701)", "Delete SimpleName: right(2702)", "Delete StringLiteral: \"==\"(2703)", "Delete MethodInvocation(2704)", "Delete NumberLiteral: 0(2705)", "Delete InfixExpression: ==(2706)", "Delete ReturnStatement(2707)", "Delete Block(2708)", "Delete IfStatement(2709)", "Delete IfStatement(2710)", "Delete IfStatement(2711)", "Delete Block(2712)", "Delete MethodDeclaration(2713)", "Delete TextElement: Test if left < right.(2714)", "Delete TagElement(2715)", "Delete SimpleName: left(2716)", "Delete TextElement:  first value(2717)", "Delete TagElement: @param(2718)", "Delete SimpleName: right(2719)", "Delete TextElement:  second value(2720)", "Delete TagElement: @param(2721)", "Delete TextElement:  test result.(2722)", "Delete TagElement: @return(2723)", "Delete Javadoc(2724)", "Delete Modifier: public(2725)", "Delete PrimitiveType: boolean(2726)", "Delete SimpleName: lessThan(2727)", "Delete SimpleName: Object(2728)", "Delete SimpleType: Object(2729)", "Delete SimpleName: left(2730)", "Delete SingleVariableDeclaration(2731)", "Delete SimpleName: Object(2732)", "Delete SimpleType: Object(2733)", "Delete SimpleName: right(2734)", "Delete SingleVariableDeclaration(2735)", "Delete SimpleName: left(2736)", "Delete SimpleName: right(2737)", "Delete InfixExpression: ==(2738)", "Delete ParenthesizedExpression(2739)", "Delete SimpleName: left(2740)", "Delete NullLiteral(2741)", "Delete InfixExpression: ==(2742)", "Delete ParenthesizedExpression(2743)", "Delete SimpleName: right(2744)", "Delete NullLiteral(2745)", "Delete InfixExpression: ==(2746)", "Delete ParenthesizedExpression(2747)", "Delete InfixExpression: ||(2748)", "Delete BooleanLiteral: false(2749)", "Delete ReturnStatement(2750)", "Delete Block(2751)", "Delete SimpleName: compare(2752)", "Delete SimpleName: left(2753)", "Delete SimpleName: right(2754)", "Delete StringLiteral: \"<\"(2755)", "Delete MethodInvocation(2756)", "Delete NumberLiteral: 0(2757)", "Delete InfixExpression: <(2758)", "Delete ReturnStatement(2759)", "Delete Block(2760)", "Delete IfStatement(2761)", "Delete Block(2762)", "Delete MethodDeclaration(2763)", "Delete TextElement: Test if left > right.(2764)", "Delete TagElement(2765)", "Delete SimpleName: left(2766)", "Delete TextElement:  first value(2767)", "Delete TagElement: @param(2768)", "Delete SimpleName: right(2769)", "Delete TextElement:  second value(2770)", "Delete TagElement: @param(2771)", "Delete TextElement:  test result.(2772)", "Delete TagElement: @return(2773)", "Delete Javadoc(2774)", "Delete Modifier: public(2775)", "Delete PrimitiveType: boolean(2776)", "Delete SimpleName: greaterThan(2777)", "Delete SimpleName: Object(2778)", "Delete SimpleType: Object(2779)", "Delete SimpleName: left(2780)", "Delete SingleVariableDeclaration(2781)", "Delete SimpleName: Object(2782)", "Delete SimpleType: Object(2783)", "Delete SimpleName: right(2784)", "Delete SingleVariableDeclaration(2785)", "Delete SimpleName: left(2786)", "Delete SimpleName: right(2787)", "Delete InfixExpression: ==(2788)", "Delete ParenthesizedExpression(2789)", "Delete SimpleName: left(2790)", "Delete NullLiteral(2791)", "Delete InfixExpression: ==(2792)", "Delete InfixExpression: ||(2793)", "Delete SimpleName: right(2794)", "Delete NullLiteral(2795)", "Delete InfixExpression: ==(2796)", "Delete InfixExpression: ||(2797)", "Delete BooleanLiteral: false(2798)", "Delete ReturnStatement(2799)", "Delete Block(2800)", "Delete SimpleName: compare(2801)", "Delete SimpleName: left(2802)", "Delete SimpleName: right(2803)", "Delete StringLiteral: \">\"(2804)", "Delete MethodInvocation(2805)", "Delete NumberLiteral: 0(2806)", "Delete InfixExpression: >(2807)", "Delete ReturnStatement(2808)", "Delete Block(2809)", "Delete IfStatement(2810)", "Delete Block(2811)", "Delete MethodDeclaration(2812)", "Delete TextElement: Test if left <= right.(2813)", "Delete TagElement(2814)", "Delete SimpleName: left(2815)", "Delete TextElement:  first value(2816)", "Delete TagElement: @param(2817)", "Delete SimpleName: right(2818)", "Delete TextElement:  second value(2819)", "Delete TagElement: @param(2820)", "Delete TextElement:  test result.(2821)", "Delete TagElement: @return(2822)", "Delete Javadoc(2823)", "Delete Modifier: public(2824)", "Delete PrimitiveType: boolean(2825)", "Delete SimpleName: lessThanOrEqual(2826)", "Delete SimpleName: Object(2827)", "Delete SimpleType: Object(2828)", "Delete SimpleName: left(2829)", "Delete SingleVariableDeclaration(2830)", "Delete SimpleName: Object(2831)", "Delete SimpleType: Object(2832)", "Delete SimpleName: right(2833)", "Delete SingleVariableDeclaration(2834)", "Delete SimpleName: left(2835)", "Delete SimpleName: right(2836)", "Delete InfixExpression: ==(2837)", "Delete BooleanLiteral: true(2838)", "Delete ReturnStatement(2839)", "Delete Block(2840)", "Delete SimpleName: left(2841)", "Delete NullLiteral(2842)", "Delete InfixExpression: ==(2843)", "Delete SimpleName: right(2844)", "Delete NullLiteral(2845)", "Delete InfixExpression: ==(2846)", "Delete InfixExpression: ||(2847)", "Delete BooleanLiteral: false(2848)", "Delete ReturnStatement(2849)", "Delete Block(2850)", "Delete SimpleName: compare(2851)", "Delete SimpleName: left(2852)", "Delete SimpleName: right(2853)", "Delete StringLiteral: \"<=\"(2854)", "Delete MethodInvocation(2855)", "Delete NumberLiteral: 0(2856)", "Delete InfixExpression: <=(2857)", "Delete ReturnStatement(2858)", "Delete Block(2859)", "Delete IfStatement(2860)", "Delete IfStatement(2861)", "Delete Block(2862)", "Delete MethodDeclaration(2863)", "Delete TextElement: Test if left >= right.(2864)", "Delete TagElement(2865)", "Delete SimpleName: left(2866)", "Delete TextElement:  first value(2867)", "Delete TagElement: @param(2868)", "Delete SimpleName: right(2869)", "Delete TextElement:  second value(2870)", "Delete TagElement: @param(2871)", "Delete TextElement:  test result.(2872)", "Delete TagElement: @return(2873)", "Delete Javadoc(2874)", "Delete Modifier: public(2875)", "Delete PrimitiveType: boolean(2876)", "Delete SimpleName: greaterThanOrEqual(2877)", "Delete SimpleName: Object(2878)", "Delete SimpleType: Object(2879)", "Delete SimpleName: left(2880)", "Delete SingleVariableDeclaration(2881)", "Delete SimpleName: Object(2882)", "Delete SimpleType: Object(2883)", "Delete SimpleName: right(2884)", "Delete SingleVariableDeclaration(2885)", "Delete SimpleName: left(2886)", "Delete SimpleName: right(2887)", "Delete InfixExpression: ==(2888)", "Delete BooleanLiteral: true(2889)", "Delete ReturnStatement(2890)", "Delete Block(2891)", "Delete SimpleName: left(2892)", "Delete NullLiteral(2893)", "Delete InfixExpression: ==(2894)", "Delete SimpleName: right(2895)", "Delete NullLiteral(2896)", "Delete InfixExpression: ==(2897)", "Delete InfixExpression: ||(2898)", "Delete BooleanLiteral: false(2899)", "Delete ReturnStatement(2900)", "Delete Block(2901)", "Delete SimpleName: compare(2902)", "Delete SimpleName: left(2903)", "Delete SimpleName: right(2904)", "Delete StringLiteral: \">=\"(2905)", "Delete MethodInvocation(2906)", "Delete NumberLiteral: 0(2907)", "Delete InfixExpression: >=(2908)", "Delete ReturnStatement(2909)", "Delete Block(2910)", "Delete IfStatement(2911)", "Delete IfStatement(2912)", "Delete Block(2913)", "Delete MethodDeclaration(2914)", "Delete TextElement: Coerce to a boolean (not a java.lang.Boolean).(2915)", "Delete TagElement(2916)", "Delete SimpleName: val(2917)", "Delete TextElement:  Object to be coerced.(2918)", "Delete TagElement: @param(2919)", "Delete TextElement:  The boolean coerced value, or false if none possible.(2920)", "Delete TagElement: @return(2921)", "Delete Javadoc(2922)", "Delete Modifier: public(2923)", "Delete PrimitiveType: boolean(2924)", "Delete SimpleName: toBoolean(2925)", "Delete SimpleName: Object(2926)", "Delete SimpleType: Object(2927)", "Delete SimpleName: val(2928)", "Delete SingleVariableDeclaration(2929)", "Delete SimpleName: val(2930)", "Delete NullLiteral(2931)", "Delete InfixExpression: ==(2932)", "Delete SimpleName: controlNullOperand(2933)", "Delete MethodInvocation(2934)", "Delete ExpressionStatement(2935)", "Delete BooleanLiteral: false(2936)", "Delete ReturnStatement(2937)", "Delete Block(2938)", "Delete SimpleName: val(2939)", "Delete SimpleName: Boolean(2940)", "Delete SimpleType: Boolean(2941)", "Delete InstanceofExpression(2942)", "Delete SimpleName: Boolean(2943)", "Delete SimpleType: Boolean(2944)", "Delete SimpleName: val(2945)", "Delete CastExpression(2946)", "Delete ParenthesizedExpression(2947)", "Delete SimpleName: booleanValue(2948)", "Delete MethodInvocation(2949)", "Delete ReturnStatement(2950)", "Delete Block(2951)", "Delete SimpleName: val(2952)", "Delete SimpleName: Number(2953)", "Delete SimpleType: Number(2954)", "Delete InstanceofExpression(2955)", "Delete PrimitiveType: double(2956)", "Delete SimpleName: number(2957)", "Delete SimpleName: toDouble(2958)", "Delete SimpleName: val(2959)", "Delete MethodInvocation(2960)", "Delete VariableDeclarationFragment(2961)", "Delete VariableDeclarationStatement(2962)", "Delete SimpleName: Double(2963)", "Delete SimpleName: isNaN(2964)", "Delete SimpleName: number(2965)", "Delete MethodInvocation(2966)", "Delete PrefixExpression: !(2967)", "Delete SimpleName: number(2968)", "Delete NumberLiteral: 0.d(2969)", "Delete InfixExpression: !=(2970)", "Delete InfixExpression: &&(2971)", "Delete ReturnStatement(2972)", "Delete Block(2973)", "Delete SimpleName: val(2974)", "Delete SimpleName: String(2975)", "Delete SimpleType: String(2976)", "Delete InstanceofExpression(2977)", "Delete SimpleName: String(2978)", "Delete SimpleType: String(2979)", "Delete SimpleName: strval(2980)", "Delete SimpleName: val(2981)", "Delete SimpleName: toString(2982)", "Delete MethodInvocation(2983)", "Delete VariableDeclarationFragment(2984)", "Delete VariableDeclarationStatement(2985)", "Delete SimpleName: strval(2986)", "Delete SimpleName: length(2987)", "Delete MethodInvocation(2988)", "Delete NumberLiteral: 0(2989)", "Delete InfixExpression: >(2990)", "Delete StringLiteral: \"false\"(2991)", "Delete SimpleName: equals(2992)", "Delete SimpleName: strval(2993)", "Delete MethodInvocation(2994)", "Delete PrefixExpression: !(2995)", "Delete InfixExpression: &&(2996)", "Delete ReturnStatement(2997)", "Delete Block(2998)", "Delete IfStatement(2999)", "Delete IfStatement(3000)", "Delete IfStatement(3001)", "Delete IfStatement(3002)", "Delete BooleanLiteral: false(3003)", "Delete ReturnStatement(3004)", "Delete Block(3005)", "Delete MethodDeclaration(3006)", "Delete TextElement: Coerce to a int.(3007)", "Delete TagElement(3008)", "Delete SimpleName: val(3009)", "Delete TextElement:  Object to be coerced.(3010)", "Delete TagElement: @param(3011)", "Delete TextElement:  The int coerced value.(3012)", "Delete TagElement: @return(3013)", "Delete Javadoc(3014)", "Delete Modifier: public(3015)", "Delete PrimitiveType: int(3016)", "Delete SimpleName: toInteger(3017)", "Delete SimpleName: Object(3018)", "Delete SimpleType: Object(3019)", "Delete SimpleName: val(3020)", "Delete SingleVariableDeclaration(3021)", "Delete SimpleName: val(3022)", "Delete NullLiteral(3023)", "Delete InfixExpression: ==(3024)", "Delete SimpleName: controlNullOperand(3025)", "Delete MethodInvocation(3026)", "Delete ExpressionStatement(3027)", "Delete NumberLiteral: 0(3028)", "Delete ReturnStatement(3029)", "Delete Block(3030)", "Delete SimpleName: val(3031)", "Delete SimpleName: Double(3032)", "Delete SimpleType: Double(3033)", "Delete InstanceofExpression(3034)", "Delete SimpleName: Double(3035)", "Delete SimpleName: isNaN(3036)", "Delete SimpleName: Double(3037)", "Delete SimpleType: Double(3038)", "Delete SimpleName: val(3039)", "Delete CastExpression(3040)", "Delete ParenthesizedExpression(3041)", "Delete SimpleName: doubleValue(3042)", "Delete MethodInvocation(3043)", "Delete MethodInvocation(3044)", "Delete PrefixExpression: !(3045)", "Delete NumberLiteral: 0(3046)", "Delete ReturnStatement(3047)", "Delete Block(3048)", "Delete SimpleName: Double(3049)", "Delete SimpleType: Double(3050)", "Delete SimpleName: val(3051)", "Delete CastExpression(3052)", "Delete ParenthesizedExpression(3053)", "Delete SimpleName: intValue(3054)", "Delete MethodInvocation(3055)", "Delete ReturnStatement(3056)", "Delete Block(3057)", "Delete IfStatement(3058)", "Delete Block(3059)", "Delete SimpleName: val(3060)", "Delete SimpleName: Number(3061)", "Delete SimpleType: Number(3062)", "Delete InstanceofExpression(3063)", "Delete SimpleName: Number(3064)", "Delete SimpleType: Number(3065)", "Delete SimpleName: val(3066)", "Delete CastExpression(3067)", "Delete ParenthesizedExpression(3068)", "Delete SimpleName: intValue(3069)", "Delete MethodInvocation(3070)", "Delete ReturnStatement(3071)", "Delete Block(3072)", "Delete SimpleName: val(3073)", "Delete SimpleName: String(3074)", "Delete SimpleType: String(3075)", "Delete InstanceofExpression(3076)", "Delete StringLiteral: \"\"(3077)", "Delete SimpleName: equals(3078)", "Delete SimpleName: val(3079)", "Delete MethodInvocation(3080)", "Delete NumberLiteral: 0(3081)", "Delete ReturnStatement(3082)", "Delete Block(3083)", "Delete IfStatement(3084)", "Delete SimpleName: Integer(3085)", "Delete SimpleName: parseInt(3086)", "Delete SimpleName: String(3087)", "Delete SimpleType: String(3088)", "Delete SimpleName: val(3089)", "Delete CastExpression(3090)", "Delete MethodInvocation(3091)", "Delete ReturnStatement(3092)", "Delete Block(3093)", "Delete SimpleName: val(3094)", "Delete SimpleName: Boolean(3095)", "Delete SimpleType: Boolean(3096)", "Delete InstanceofExpression(3097)", "Delete SimpleName: Boolean(3098)", "Delete SimpleType: Boolean(3099)", "Delete SimpleName: val(3100)", "Delete CastExpression(3101)", "Delete ParenthesizedExpression(3102)", "Delete SimpleName: booleanValue(3103)", "Delete MethodInvocation(3104)", "Delete NumberLiteral: 1(3105)", "Delete NumberLiteral: 0(3106)", "Delete ConditionalExpression(3107)", "Delete ReturnStatement(3108)", "Delete Block(3109)", "Delete SimpleName: val(3110)", "Delete SimpleName: Character(3111)", "Delete SimpleType: Character(3112)", "Delete InstanceofExpression(3113)", "Delete SimpleName: Character(3114)", "Delete SimpleType: Character(3115)", "Delete SimpleName: val(3116)", "Delete CastExpression(3117)", "Delete ParenthesizedExpression(3118)", "Delete SimpleName: charValue(3119)", "Delete MethodInvocation(3120)", "Delete ReturnStatement(3121)", "Delete Block(3122)", "Delete IfStatement(3123)", "Delete IfStatement(3124)", "Delete IfStatement(3125)", "Delete IfStatement(3126)", "Delete IfStatement(3127)", "Delete IfStatement(3128)", "Delete SimpleName: ArithmeticException(3129)", "Delete SimpleType: ArithmeticException(3130)", "Delete StringLiteral: \"Integer coercion: \"(3131)", "Delete SimpleName: val(3132)", "Delete SimpleName: getClass(3133)", "Delete MethodInvocation(3134)", "Delete SimpleName: getName(3135)", "Delete MethodInvocation(3136)", "Delete StringLiteral: \":(\"(3137)", "Delete SimpleName: val(3138)", "Delete StringLiteral: \")\"(3139)", "Delete InfixExpression: +(3140)", "Delete ClassInstanceCreation(3141)", "Delete ThrowStatement(3142)", "Delete Block(3143)", "Delete MethodDeclaration(3144)", "Delete TextElement: Coerce to a long (not a java.lang.Long).(3145)", "Delete TagElement(3146)", "Delete SimpleName: val(3147)", "Delete TextElement:  Object to be coerced.(3148)", "Delete TagElement: @param(3149)", "Delete TextElement:  The long coerced value.(3150)", "Delete TagElement: @return(3151)", "Delete Javadoc(3152)", "Delete Modifier: public(3153)", "Delete PrimitiveType: long(3154)", "Delete SimpleName: toLong(3155)", "Delete SimpleName: Object(3156)", "Delete SimpleType: Object(3157)", "Delete SimpleName: val(3158)", "Delete SingleVariableDeclaration(3159)", "Delete SimpleName: val(3160)", "Delete NullLiteral(3161)", "Delete InfixExpression: ==(3162)", "Delete SimpleName: controlNullOperand(3163)", "Delete MethodInvocation(3164)", "Delete ExpressionStatement(3165)", "Delete NumberLiteral: 0L(3166)", "Delete ReturnStatement(3167)", "Delete Block(3168)", "Delete SimpleName: val(3169)", "Delete SimpleName: Double(3170)", "Delete SimpleType: Double(3171)", "Delete InstanceofExpression(3172)", "Delete SimpleName: Double(3173)", "Delete SimpleName: isNaN(3174)", "Delete SimpleName: Double(3175)", "Delete SimpleType: Double(3176)", "Delete SimpleName: val(3177)", "Delete CastExpression(3178)", "Delete ParenthesizedExpression(3179)", "Delete SimpleName: doubleValue(3180)", "Delete MethodInvocation(3181)", "Delete MethodInvocation(3182)", "Delete PrefixExpression: !(3183)", "Delete NumberLiteral: 0(3184)", "Delete ReturnStatement(3185)", "Delete Block(3186)", "Delete SimpleName: Double(3187)", "Delete SimpleType: Double(3188)", "Delete SimpleName: val(3189)", "Delete CastExpression(3190)", "Delete ParenthesizedExpression(3191)", "Delete SimpleName: longValue(3192)", "Delete MethodInvocation(3193)", "Delete ReturnStatement(3194)", "Delete Block(3195)", "Delete IfStatement(3196)", "Delete Block(3197)", "Delete SimpleName: val(3198)", "Delete SimpleName: Number(3199)", "Delete SimpleType: Number(3200)", "Delete InstanceofExpression(3201)", "Delete SimpleName: Number(3202)", "Delete SimpleType: Number(3203)", "Delete SimpleName: val(3204)", "Delete CastExpression(3205)", "Delete ParenthesizedExpression(3206)", "Delete SimpleName: longValue(3207)", "Delete MethodInvocation(3208)", "Delete ReturnStatement(3209)", "Delete Block(3210)", "Delete SimpleName: val(3211)", "Delete SimpleName: String(3212)", "Delete SimpleType: String(3213)", "Delete InstanceofExpression(3214)", "Delete StringLiteral: \"\"(3215)", "Delete SimpleName: equals(3216)", "Delete SimpleName: val(3217)", "Delete MethodInvocation(3218)", "Delete NumberLiteral: 0(3219)", "Delete ReturnStatement(3220)", "Delete Block(3221)", "Delete SimpleName: Long(3222)", "Delete SimpleName: parseLong(3223)", "Delete SimpleName: String(3224)", "Delete SimpleType: String(3225)", "Delete SimpleName: val(3226)", "Delete CastExpression(3227)", "Delete MethodInvocation(3228)", "Delete ReturnStatement(3229)", "Delete Block(3230)", "Delete IfStatement(3231)", "Delete Block(3232)", "Delete SimpleName: val(3233)", "Delete SimpleName: Boolean(3234)", "Delete SimpleType: Boolean(3235)", "Delete InstanceofExpression(3236)", "Delete SimpleName: Boolean(3237)", "Delete SimpleType: Boolean(3238)", "Delete SimpleName: val(3239)", "Delete CastExpression(3240)", "Delete ParenthesizedExpression(3241)", "Delete SimpleName: booleanValue(3242)", "Delete MethodInvocation(3243)", "Delete NumberLiteral: 1L(3244)", "Delete NumberLiteral: 0L(3245)", "Delete ConditionalExpression(3246)", "Delete ReturnStatement(3247)", "Delete Block(3248)", "Delete SimpleName: val(3249)", "Delete SimpleName: Character(3250)", "Delete SimpleType: Character(3251)", "Delete InstanceofExpression(3252)", "Delete SimpleName: Character(3253)", "Delete SimpleType: Character(3254)", "Delete SimpleName: val(3255)", "Delete CastExpression(3256)", "Delete ParenthesizedExpression(3257)", "Delete SimpleName: charValue(3258)", "Delete MethodInvocation(3259)", "Delete ReturnStatement(3260)", "Delete Block(3261)", "Delete IfStatement(3262)", "Delete IfStatement(3263)", "Delete IfStatement(3264)", "Delete IfStatement(3265)", "Delete IfStatement(3266)", "Delete IfStatement(3267)", "Delete SimpleName: ArithmeticException(3268)", "Delete SimpleType: ArithmeticException(3269)", "Delete StringLiteral: \"Long coercion: \"(3270)", "Delete SimpleName: val(3271)", "Delete SimpleName: getClass(3272)", "Delete MethodInvocation(3273)", "Delete SimpleName: getName(3274)", "Delete MethodInvocation(3275)", "Delete StringLiteral: \":(\"(3276)", "Delete SimpleName: val(3277)", "Delete StringLiteral: \")\"(3278)", "Delete InfixExpression: +(3279)", "Delete ClassInstanceCreation(3280)", "Delete ThrowStatement(3281)", "Delete Block(3282)", "Delete MethodDeclaration(3283)", "Delete TextElement: Get a BigInteger from the object passed.(3284)", "Delete TextElement: Null and empty string maps to zero.(3285)", "Delete TagElement(3286)", "Delete SimpleName: val(3287)", "Delete TextElement:  the object to be coerced.(3288)", "Delete TagElement: @param(3289)", "Delete TextElement:  a BigDecimal.(3290)", "Delete TagElement: @return(3291)", "Delete SimpleName: NullPointerException(3292)", "Delete TextElement:  if val is null and mode is strict.(3293)", "Delete TagElement: @throws(3294)", "Delete Javadoc(3295)", "Delete Modifier: public(3296)", "Delete SimpleName: BigInteger(3297)", "Delete SimpleType: BigInteger(3298)", "Delete SimpleName: toBigInteger(3299)", "Delete SimpleName: Object(3300)", "Delete SimpleType: Object(3301)", "Delete SimpleName: val(3302)", "Delete SingleVariableDeclaration(3303)", "Delete SimpleName: val(3304)", "Delete NullLiteral(3305)", "Delete InfixExpression: ==(3306)", "Delete SimpleName: controlNullOperand(3307)", "Delete MethodInvocation(3308)", "Delete ExpressionStatement(3309)", "Delete QualifiedName: BigInteger.ZERO(3310)", "Delete ReturnStatement(3311)", "Delete Block(3312)", "Delete SimpleName: val(3313)", "Delete SimpleName: BigInteger(3314)", "Delete SimpleType: BigInteger(3315)", "Delete InstanceofExpression(3316)", "Delete SimpleName: BigInteger(3317)", "Delete SimpleType: BigInteger(3318)", "Delete SimpleName: val(3319)", "Delete CastExpression(3320)", "Delete ReturnStatement(3321)", "Delete Block(3322)", "Delete SimpleName: val(3323)", "Delete SimpleName: Double(3324)", "Delete SimpleType: Double(3325)", "Delete InstanceofExpression(3326)", "Delete SimpleName: Double(3327)", "Delete SimpleName: isNaN(3328)", "Delete SimpleName: Double(3329)", "Delete SimpleType: Double(3330)", "Delete SimpleName: val(3331)", "Delete CastExpression(3332)", "Delete ParenthesizedExpression(3333)", "Delete SimpleName: doubleValue(3334)", "Delete MethodInvocation(3335)", "Delete MethodInvocation(3336)", "Delete PrefixExpression: !(3337)", "Delete SimpleName: BigInteger(3338)", "Delete SimpleType: BigInteger(3339)", "Delete SimpleName: val(3340)", "Delete SimpleName: toString(3341)", "Delete MethodInvocation(3342)", "Delete ClassInstanceCreation(3343)", "Delete ReturnStatement(3344)", "Delete Block(3345)", "Delete QualifiedName: BigInteger.ZERO(3346)", "Delete ReturnStatement(3347)", "Delete Block(3348)", "Delete IfStatement(3349)", "Delete Block(3350)", "Delete SimpleName: val(3351)", "Delete SimpleName: Number(3352)", "Delete SimpleType: Number(3353)", "Delete InstanceofExpression(3354)", "Delete SimpleName: BigInteger(3355)", "Delete SimpleType: BigInteger(3356)", "Delete SimpleName: val(3357)", "Delete SimpleName: toString(3358)", "Delete MethodInvocation(3359)", "Delete ClassInstanceCreation(3360)", "Delete ReturnStatement(3361)", "Delete Block(3362)", "Delete SimpleName: val(3363)", "Delete SimpleName: String(3364)", "Delete SimpleType: String(3365)", "Delete InstanceofExpression(3366)", "Delete SimpleName: String(3367)", "Delete SimpleType: String(3368)", "Delete SimpleName: string(3369)", "Delete SimpleName: String(3370)", "Delete SimpleType: String(3371)", "Delete SimpleName: val(3372)", "Delete CastExpression(3373)", "Delete VariableDeclarationFragment(3374)", "Delete VariableDeclarationStatement(3375)", "Delete StringLiteral: \"\"(3376)", "Delete SimpleName: equals(3377)", "Delete SimpleName: string(3378)", "Delete SimpleName: trim(3379)", "Delete MethodInvocation(3380)", "Delete MethodInvocation(3381)", "Delete QualifiedName: BigInteger.ZERO(3382)", "Delete ReturnStatement(3383)", "Delete Block(3384)", "Delete SimpleName: BigInteger(3385)", "Delete SimpleType: BigInteger(3386)", "Delete SimpleName: string(3387)", "Delete ClassInstanceCreation(3388)", "Delete ReturnStatement(3389)", "Delete Block(3390)", "Delete IfStatement(3391)", "Delete Block(3392)", "Delete SimpleName: val(3393)", "Delete SimpleName: Character(3394)", "Delete SimpleType: Character(3395)", "Delete InstanceofExpression(3396)", "Delete PrimitiveType: int(3397)", "Delete SimpleName: i(3398)", "Delete SimpleName: Character(3399)", "Delete SimpleType: Character(3400)", "Delete SimpleName: val(3401)", "Delete CastExpression(3402)", "Delete ParenthesizedExpression(3403)", "Delete SimpleName: charValue(3404)", "Delete MethodInvocation(3405)", "Delete VariableDeclarationFragment(3406)", "Delete VariableDeclarationStatement(3407)", "Delete SimpleName: BigInteger(3408)", "Delete SimpleName: valueOf(3409)", "Delete SimpleName: i(3410)", "Delete MethodInvocation(3411)", "Delete ReturnStatement(3412)", "Delete Block(3413)", "Delete IfStatement(3414)", "Delete IfStatement(3415)", "Delete IfStatement(3416)", "Delete IfStatement(3417)", "Delete IfStatement(3418)", "Delete IfStatement(3419)", "Delete SimpleName: ArithmeticException(3420)", "Delete SimpleType: ArithmeticException(3421)", "Delete StringLiteral: \"BigInteger coercion: \"(3422)", "Delete SimpleName: val(3423)", "Delete SimpleName: getClass(3424)", "Delete MethodInvocation(3425)", "Delete SimpleName: getName(3426)", "Delete MethodInvocation(3427)", "Delete StringLiteral: \":(\"(3428)", "Delete SimpleName: val(3429)", "Delete StringLiteral: \")\"(3430)", "Delete InfixExpression: +(3431)", "Delete ClassInstanceCreation(3432)", "Delete ThrowStatement(3433)", "Delete Block(3434)", "Delete MethodDeclaration(3435)", "Delete TextElement: Get a BigDecimal from the object passed.(3436)", "Delete TextElement: Null and empty string maps to zero.(3437)", "Delete TagElement(3438)", "Delete SimpleName: val(3439)", "Delete TextElement:  the object to be coerced.(3440)", "Delete TagElement: @param(3441)", "Delete TextElement:  a BigDecimal.(3442)", "Delete TagElement: @return(3443)", "Delete SimpleName: NullPointerException(3444)", "Delete TextElement:  if val is null and mode is strict.(3445)", "Delete TagElement: @throws(3446)", "Delete Javadoc(3447)", "Delete Modifier: public(3448)", "Delete SimpleName: BigDecimal(3449)", "Delete SimpleType: BigDecimal(3450)", "Delete SimpleName: toBigDecimal(3451)", "Delete SimpleName: Object(3452)", "Delete SimpleType: Object(3453)", "Delete SimpleName: val(3454)", "Delete SingleVariableDeclaration(3455)", "Delete SimpleName: val(3456)", "Delete SimpleName: BigDecimal(3457)", "Delete SimpleType: BigDecimal(3458)", "Delete InstanceofExpression(3459)", "Delete SimpleName: roundBigDecimal(3460)", "Delete SimpleName: BigDecimal(3461)", "Delete SimpleType: BigDecimal(3462)", "Delete SimpleName: val(3463)", "Delete CastExpression(3464)", "Delete MethodInvocation(3465)", "Delete ReturnStatement(3466)", "Delete Block(3467)", "Delete SimpleName: val(3468)", "Delete NullLiteral(3469)", "Delete InfixExpression: ==(3470)", "Delete SimpleName: controlNullOperand(3471)", "Delete MethodInvocation(3472)", "Delete ExpressionStatement(3473)", "Delete QualifiedName: BigDecimal.ZERO(3474)", "Delete ReturnStatement(3475)", "Delete Block(3476)", "Delete SimpleName: val(3477)", "Delete SimpleName: String(3478)", "Delete SimpleType: String(3479)", "Delete InstanceofExpression(3480)", "Delete SimpleName: String(3481)", "Delete SimpleType: String(3482)", "Delete SimpleName: string(3483)", "Delete SimpleName: String(3484)", "Delete SimpleType: String(3485)", "Delete SimpleName: val(3486)", "Delete CastExpression(3487)", "Delete ParenthesizedExpression(3488)", "Delete SimpleName: trim(3489)", "Delete MethodInvocation(3490)", "Delete VariableDeclarationFragment(3491)", "Delete VariableDeclarationStatement(3492)", "Delete StringLiteral: \"\"(3493)", "Delete SimpleName: equals(3494)", "Delete SimpleName: string(3495)", "Delete MethodInvocation(3496)", "Delete QualifiedName: BigDecimal.ZERO(3497)", "Delete ReturnStatement(3498)", "Delete Block(3499)", "Delete IfStatement(3500)", "Delete SimpleName: roundBigDecimal(3501)", "Delete SimpleName: BigDecimal(3502)", "Delete SimpleType: BigDecimal(3503)", "Delete SimpleName: string(3504)", "Delete SimpleName: getMathContext(3505)", "Delete MethodInvocation(3506)", "Delete ClassInstanceCreation(3507)", "Delete MethodInvocation(3508)", "Delete ReturnStatement(3509)", "Delete Block(3510)", "Delete SimpleName: val(3511)", "Delete SimpleName: Double(3512)", "Delete SimpleType: Double(3513)", "Delete InstanceofExpression(3514)", "Delete SimpleName: Double(3515)", "Delete SimpleName: isNaN(3516)", "Delete SimpleName: Double(3517)", "Delete SimpleType: Double(3518)", "Delete SimpleName: val(3519)", "Delete CastExpression(3520)", "Delete ParenthesizedExpression(3521)", "Delete SimpleName: doubleValue(3522)", "Delete MethodInvocation(3523)", "Delete MethodInvocation(3524)", "Delete PrefixExpression: !(3525)", "Delete SimpleName: roundBigDecimal(3526)", "Delete SimpleName: BigDecimal(3527)", "Delete SimpleType: BigDecimal(3528)", "Delete SimpleName: val(3529)", "Delete SimpleName: toString(3530)", "Delete MethodInvocation(3531)", "Delete SimpleName: getMathContext(3532)", "Delete MethodInvocation(3533)", "Delete ClassInstanceCreation(3534)", "Delete MethodInvocation(3535)", "Delete ReturnStatement(3536)", "Delete Block(3537)", "Delete QualifiedName: BigDecimal.ZERO(3538)", "Delete ReturnStatement(3539)", "Delete Block(3540)", "Delete IfStatement(3541)", "Delete Block(3542)", "Delete SimpleName: val(3543)", "Delete SimpleName: Number(3544)", "Delete SimpleType: Number(3545)", "Delete InstanceofExpression(3546)", "Delete SimpleName: roundBigDecimal(3547)", "Delete SimpleName: BigDecimal(3548)", "Delete SimpleType: BigDecimal(3549)", "Delete SimpleName: val(3550)", "Delete SimpleName: toString(3551)", "Delete MethodInvocation(3552)", "Delete SimpleName: getMathContext(3553)", "Delete MethodInvocation(3554)", "Delete ClassInstanceCreation(3555)", "Delete MethodInvocation(3556)", "Delete ReturnStatement(3557)", "Delete Block(3558)", "Delete SimpleName: val(3559)", "Delete SimpleName: Character(3560)", "Delete SimpleType: Character(3561)", "Delete InstanceofExpression(3562)", "Delete PrimitiveType: int(3563)", "Delete SimpleName: i(3564)", "Delete SimpleName: Character(3565)", "Delete SimpleType: Character(3566)", "Delete SimpleName: val(3567)", "Delete CastExpression(3568)", "Delete ParenthesizedExpression(3569)", "Delete SimpleName: charValue(3570)", "Delete MethodInvocation(3571)", "Delete VariableDeclarationFragment(3572)", "Delete VariableDeclarationStatement(3573)", "Delete SimpleName: BigDecimal(3574)", "Delete SimpleType: BigDecimal(3575)", "Delete SimpleName: i(3576)", "Delete ClassInstanceCreation(3577)", "Delete ReturnStatement(3578)", "Delete Block(3579)", "Delete IfStatement(3580)", "Delete IfStatement(3581)", "Delete IfStatement(3582)", "Delete IfStatement(3583)", "Delete IfStatement(3584)", "Delete IfStatement(3585)", "Delete SimpleName: ArithmeticException(3586)", "Delete SimpleType: ArithmeticException(3587)", "Delete StringLiteral: \"BigDecimal coercion: \"(3588)", "Delete SimpleName: val(3589)", "Delete SimpleName: getClass(3590)", "Delete MethodInvocation(3591)", "Delete SimpleName: getName(3592)", "Delete MethodInvocation(3593)", "Delete StringLiteral: \":(\"(3594)", "Delete SimpleName: val(3595)", "Delete StringLiteral: \")\"(3596)", "Delete InfixExpression: +(3597)", "Delete ClassInstanceCreation(3598)", "Delete ThrowStatement(3599)", "Delete Block(3600)", "Delete MethodDeclaration(3601)", "Delete TextElement: Coerce to a double.(3602)", "Delete TagElement(3603)", "Delete SimpleName: val(3604)", "Delete TextElement:  Object to be coerced.(3605)", "Delete TagElement: @param(3606)", "Delete TextElement:  The double coerced value.(3607)", "Delete TagElement: @return(3608)", "Delete SimpleName: NullPointerException(3609)", "Delete TextElement:  if val is null and mode is strict.(3610)", "Delete TagElement: @throws(3611)", "Delete Javadoc(3612)", "Delete Modifier: public(3613)", "Delete PrimitiveType: double(3614)", "Delete SimpleName: toDouble(3615)", "Delete SimpleName: Object(3616)", "Delete SimpleType: Object(3617)", "Delete SimpleName: val(3618)", "Delete SingleVariableDeclaration(3619)", "Delete SimpleName: val(3620)", "Delete NullLiteral(3621)", "Delete InfixExpression: ==(3622)", "Delete SimpleName: controlNullOperand(3623)", "Delete MethodInvocation(3624)", "Delete ExpressionStatement(3625)", "Delete NumberLiteral: 0(3626)", "Delete ReturnStatement(3627)", "Delete Block(3628)", "Delete SimpleName: val(3629)", "Delete SimpleName: Double(3630)", "Delete SimpleType: Double(3631)", "Delete InstanceofExpression(3632)", "Delete SimpleName: Double(3633)", "Delete SimpleType: Double(3634)", "Delete SimpleName: val(3635)", "Delete CastExpression(3636)", "Delete ParenthesizedExpression(3637)", "Delete SimpleName: doubleValue(3638)", "Delete MethodInvocation(3639)", "Delete ReturnStatement(3640)", "Delete Block(3641)", "Delete SimpleName: val(3642)", "Delete SimpleName: Number(3643)", "Delete SimpleType: Number(3644)", "Delete InstanceofExpression(3645)", "Delete SimpleName: Double(3646)", "Delete SimpleName: parseDouble(3647)", "Delete SimpleName: String(3648)", "Delete SimpleName: valueOf(3649)", "Delete SimpleName: val(3650)", "Delete MethodInvocation(3651)", "Delete MethodInvocation(3652)", "Delete ReturnStatement(3653)", "Delete Block(3654)", "Delete SimpleName: val(3655)", "Delete SimpleName: Boolean(3656)", "Delete SimpleType: Boolean(3657)", "Delete InstanceofExpression(3658)", "Delete SimpleName: Boolean(3659)", "Delete SimpleType: Boolean(3660)", "Delete SimpleName: val(3661)", "Delete CastExpression(3662)", "Delete ParenthesizedExpression(3663)", "Delete SimpleName: booleanValue(3664)", "Delete MethodInvocation(3665)", "Delete NumberLiteral: 1.(3666)", "Delete NumberLiteral: 0.(3667)", "Delete ConditionalExpression(3668)", "Delete ReturnStatement(3669)", "Delete Block(3670)", "Delete SimpleName: val(3671)", "Delete SimpleName: String(3672)", "Delete SimpleType: String(3673)", "Delete InstanceofExpression(3674)", "Delete SimpleName: String(3675)", "Delete SimpleType: String(3676)", "Delete SimpleName: string(3677)", "Delete SimpleName: String(3678)", "Delete SimpleType: String(3679)", "Delete SimpleName: val(3680)", "Delete CastExpression(3681)", "Delete ParenthesizedExpression(3682)", "Delete SimpleName: trim(3683)", "Delete MethodInvocation(3684)", "Delete VariableDeclarationFragment(3685)", "Delete VariableDeclarationStatement(3686)", "Delete StringLiteral: \"\"(3687)", "Delete SimpleName: equals(3688)", "Delete SimpleName: string(3689)", "Delete MethodInvocation(3690)", "Delete QualifiedName: Double.NaN(3691)", "Delete ReturnStatement(3692)", "Delete Block(3693)", "Delete SimpleName: Double(3694)", "Delete SimpleName: parseDouble(3695)", "Delete SimpleName: string(3696)", "Delete MethodInvocation(3697)", "Delete ReturnStatement(3698)", "Delete Block(3699)", "Delete IfStatement(3700)", "Delete Block(3701)", "Delete SimpleName: val(3702)", "Delete SimpleName: Character(3703)", "Delete SimpleType: Character(3704)", "Delete InstanceofExpression(3705)", "Delete PrimitiveType: int(3706)", "Delete SimpleName: i(3707)", "Delete SimpleName: Character(3708)", "Delete SimpleType: Character(3709)", "Delete SimpleName: val(3710)", "Delete CastExpression(3711)", "Delete ParenthesizedExpression(3712)", "Delete SimpleName: charValue(3713)", "Delete MethodInvocation(3714)", "Delete VariableDeclarationFragment(3715)", "Delete VariableDeclarationStatement(3716)", "Delete SimpleName: i(3717)", "Delete ReturnStatement(3718)", "Delete Block(3719)", "Delete IfStatement(3720)", "Delete IfStatement(3721)", "Delete IfStatement(3722)", "Delete IfStatement(3723)", "Delete IfStatement(3724)", "Delete IfStatement(3725)", "Delete SimpleName: ArithmeticException(3726)", "Delete SimpleType: ArithmeticException(3727)", "Delete StringLiteral: \"Double coercion: \"(3728)", "Delete SimpleName: val(3729)", "Delete SimpleName: getClass(3730)", "Delete MethodInvocation(3731)", "Delete SimpleName: getName(3732)", "Delete MethodInvocation(3733)", "Delete StringLiteral: \":(\"(3734)", "Delete SimpleName: val(3735)", "Delete StringLiteral: \")\"(3736)", "Delete InfixExpression: +(3737)", "Delete ClassInstanceCreation(3738)", "Delete ThrowStatement(3739)", "Delete Block(3740)", "Delete MethodDeclaration(3741)", "Delete TextElement: Coerce to a string.(3742)", "Delete TagElement(3743)", "Delete SimpleName: val(3744)", "Delete TextElement:  Object to be coerced.(3745)", "Delete TagElement: @param(3746)", "Delete TextElement:  The String coerced value.(3747)", "Delete TagElement: @return(3748)", "Delete SimpleName: NullPointerException(3749)", "Delete TextElement:  if val is null and mode is strict.(3750)", "Delete TagElement: @throws(3751)", "Delete Javadoc(3752)", "Delete Modifier: public(3753)", "Delete SimpleName: String(3754)", "Delete SimpleType: String(3755)", "Delete SimpleName: toString(3756)", "Delete SimpleName: Object(3757)", "Delete SimpleType: Object(3758)", "Delete SimpleName: val(3759)", "Delete SingleVariableDeclaration(3760)", "Delete SimpleName: val(3761)", "Delete NullLiteral(3762)", "Delete InfixExpression: ==(3763)", "Delete SimpleName: controlNullOperand(3764)", "Delete MethodInvocation(3765)", "Delete ExpressionStatement(3766)", "Delete StringLiteral: \"\"(3767)", "Delete ReturnStatement(3768)", "Delete Block(3769)", "Delete SimpleName: val(3770)", "Delete SimpleName: Double(3771)", "Delete SimpleType: Double(3772)", "Delete InstanceofExpression(3773)", "Delete SimpleName: Double(3774)", "Delete SimpleType: Double(3775)", "Delete SimpleName: dval(3776)", "Delete SimpleName: Double(3777)", "Delete SimpleType: Double(3778)", "Delete SimpleName: val(3779)", "Delete CastExpression(3780)", "Delete VariableDeclarationFragment(3781)", "Delete VariableDeclarationStatement(3782)", "Delete SimpleName: Double(3783)", "Delete SimpleName: isNaN(3784)", "Delete SimpleName: dval(3785)", "Delete SimpleName: doubleValue(3786)", "Delete MethodInvocation(3787)", "Delete MethodInvocation(3788)", "Delete StringLiteral: \"\"(3789)", "Delete ReturnStatement(3790)", "Delete Block(3791)", "Delete SimpleName: dval(3792)", "Delete SimpleName: toString(3793)", "Delete MethodInvocation(3794)", "Delete ReturnStatement(3795)", "Delete Block(3796)", "Delete IfStatement(3797)", "Delete Block(3798)", "Delete SimpleName: val(3799)", "Delete SimpleName: toString(3800)", "Delete MethodInvocation(3801)", "Delete ReturnStatement(3802)", "Delete Block(3803)", "Delete IfStatement(3804)", "Delete IfStatement(3805)", "Delete Block(3806)", "Delete MethodDeclaration(3807)", "Delete TextElement: Given a Number, return back the value using the smallest type the result(3808)", "Delete TextElement: will fit into. This works hand in hand with parameter 'widening' in java(3809)", "Delete TextElement: method calls, e.g. a call to substring(int,int) with an int and a long(3810)", "Delete TextElement: will fail, but a call to substring(int,int) with an int and a short will(3811)", "Delete TextElement: succeed.(3812)", "Delete TagElement(3813)", "Delete SimpleName: original(3814)", "Delete TextElement:  the original number.(3815)", "Delete TagElement: @param(3816)", "Delete TextElement:  a value of the smallest type the original number will fit into.(3817)", "Delete TagElement: @return(3818)", "Delete Javadoc(3819)", "Delete Modifier: public(3820)", "Delete SimpleName: Number(3821)", "Delete SimpleType: Number(3822)", "Delete SimpleName: narrow(3823)", "Delete SimpleName: Number(3824)", "Delete SimpleType: Number(3825)", "Delete SimpleName: original(3826)", "Delete SingleVariableDeclaration(3827)", "Delete SimpleName: narrowNumber(3828)", "Delete SimpleName: original(3829)", "Delete NullLiteral(3830)", "Delete MethodInvocation(3831)", "Delete ReturnStatement(3832)", "Delete Block(3833)", "Delete MethodDeclaration(3834)", "Delete TextElement: Whether we consider the narrow class as a potential candidate for narrowing the source.(3835)", "Delete TagElement(3836)", "Delete SimpleName: narrow(3837)", "Delete TextElement:  the target narrow class(3838)", "Delete TagElement: @param(3839)", "Delete SimpleName: source(3840)", "Delete TextElement:  the orginal source class(3841)", "Delete TagElement: @param(3842)", "Delete TextElement:  true if attempt to narrow source to target is accepted(3843)", "Delete TagElement: @return(3844)", "Delete Javadoc(3845)", "Delete Modifier: protected(3846)", "Delete PrimitiveType: boolean(3847)", "Delete SimpleName: narrowAccept(3848)", "Delete SimpleName: Class(3849)", "Delete SimpleType: Class(3850)", "Delete WildcardType: ?(3851)", "Delete ParameterizedType: Class<?>(3852)", "Delete SimpleName: narrow(3853)", "Delete SingleVariableDeclaration(3854)", "Delete SimpleName: Class(3855)", "Delete SimpleType: Class(3856)", "Delete WildcardType: ?(3857)", "Delete ParameterizedType: Class<?>(3858)", "Delete SimpleName: source(3859)", "Delete SingleVariableDeclaration(3860)", "Delete SimpleName: narrow(3861)", "Delete NullLiteral(3862)", "Delete InfixExpression: ==(3863)", "Delete SimpleName: narrow(3864)", "Delete SimpleName: equals(3865)", "Delete SimpleName: source(3866)", "Delete MethodInvocation(3867)", "Delete InfixExpression: ||(3868)", "Delete ReturnStatement(3869)", "Delete Block(3870)", "Delete MethodDeclaration(3871)", "Delete TextElement: Given a Number, return back the value attempting to narrow it to a target class.(3872)", "Delete TagElement(3873)", "Delete SimpleName: original(3874)", "Delete TextElement:  the original number(3875)", "Delete TagElement: @param(3876)", "Delete SimpleName: narrow(3877)", "Delete TextElement:  the attempted target class(3878)", "Delete TagElement: @param(3879)", "Delete TextElement:   the narrowed number or the source if no narrowing was possible(3880)", "Delete TagElement: @return(3881)", "Delete Javadoc(3882)", "Delete Modifier: protected(3883)", "Delete SimpleName: Number(3884)", "Delete SimpleType: Number(3885)", "Delete SimpleName: narrowNumber(3886)", "Delete SimpleName: Number(3887)", "Delete SimpleType: Number(3888)", "Delete SimpleName: original(3889)", "Delete SingleVariableDeclaration(3890)", "Delete SimpleName: Class(3891)", "Delete SimpleType: Class(3892)", "Delete WildcardType: ?(3893)", "Delete ParameterizedType: Class<?>(3894)", "Delete SimpleName: narrow(3895)", "Delete SingleVariableDeclaration(3896)", "Delete SimpleName: original(3897)", "Delete NullLiteral(3898)", "Delete InfixExpression: ==(3899)", "Delete SimpleName: original(3900)", "Delete ReturnStatement(3901)", "Delete Block(3902)", "Delete IfStatement(3903)", "Delete SimpleName: Number(3904)", "Delete SimpleType: Number(3905)", "Delete SimpleName: result(3906)", "Delete SimpleName: original(3907)", "Delete VariableDeclarationFragment(3908)", "Delete VariableDeclarationStatement(3909)", "Delete SimpleName: original(3910)", "Delete SimpleName: BigDecimal(3911)", "Delete SimpleType: BigDecimal(3912)", "Delete InstanceofExpression(3913)", "Delete SimpleName: BigDecimal(3914)", "Delete SimpleType: BigDecimal(3915)", "Delete SimpleName: bigd(3916)", "Delete SimpleName: BigDecimal(3917)", "Delete SimpleType: BigDecimal(3918)", "Delete SimpleName: original(3919)", "Delete CastExpression(3920)", "Delete VariableDeclarationFragment(3921)", "Delete VariableDeclarationStatement(3922)", "Delete SimpleName: bigd(3923)", "Delete SimpleName: compareTo(3924)", "Delete SimpleName: BIGD_DOUBLE_MAX_VALUE(3925)", "Delete MethodInvocation(3926)", "Delete NumberLiteral: 0(3927)", "Delete InfixExpression: >(3928)", "Delete SimpleName: original(3929)", "Delete ReturnStatement(3930)", "Delete Block(3931)", "Delete PrimitiveType: long(3932)", "Delete SimpleName: l(3933)", "Delete SimpleName: bigd(3934)", "Delete SimpleName: longValueExact(3935)", "Delete MethodInvocation(3936)", "Delete VariableDeclarationFragment(3937)", "Delete VariableDeclarationStatement(3938)", "Delete SimpleName: narrowAccept(3939)", "Delete SimpleName: narrow(3940)", "Delete SimpleName: Integer(3941)", "Delete SimpleType: Integer(3942)", "Delete TypeLiteral(3943)", "Delete MethodInvocation(3944)", "Delete SimpleName: l(3945)", "Delete QualifiedName: Integer.MAX_VALUE(3946)", "Delete InfixExpression: <=(3947)", "Delete InfixExpression: &&(3948)", "Delete SimpleName: l(3949)", "Delete QualifiedName: Integer.MIN_VALUE(3950)", "Delete InfixExpression: >=(3951)", "Delete InfixExpression: &&(3952)", "Delete SimpleName: Integer(3953)", "Delete SimpleName: valueOf(3954)", "Delete PrimitiveType: int(3955)", "Delete SimpleName: l(3956)", "Delete CastExpression(3957)", "Delete MethodInvocation(3958)", "Delete ReturnStatement(3959)", "Delete Block(3960)", "Delete SimpleName: narrowAccept(3961)", "Delete SimpleName: narrow(3962)", "Delete SimpleName: Long(3963)", "Delete SimpleType: Long(3964)", "Delete TypeLiteral(3965)", "Delete MethodInvocation(3966)", "Delete SimpleName: Long(3967)", "Delete SimpleName: valueOf(3968)", "Delete SimpleName: l(3969)", "Delete MethodInvocation(3970)", "Delete ReturnStatement(3971)", "Delete Block(3972)", "Delete IfStatement(3973)", "Delete IfStatement(3974)", "Delete Block(3975)", "Delete SimpleName: ArithmeticException(3976)", "Delete SimpleType: ArithmeticException(3977)", "Delete SimpleName: xa(3978)", "Delete SingleVariableDeclaration(3979)", "Delete Block(3980)", "Delete CatchClause(3981)", "Delete TryStatement(3982)", "Delete Block(3983)", "Delete IfStatement(3984)", "Delete Block(3985)", "Delete IfStatement(3986)", "Delete SimpleName: original(3987)", "Delete SimpleName: Double(3988)", "Delete SimpleType: Double(3989)", "Delete InstanceofExpression(3990)", "Delete SimpleName: original(3991)", "Delete SimpleName: Float(3992)", "Delete SimpleType: Float(3993)", "Delete InstanceofExpression(3994)", "Delete SimpleName: original(3995)", "Delete SimpleName: BigDecimal(3996)", "Delete SimpleType: BigDecimal(3997)", "Delete InstanceofExpression(3998)", "Delete InfixExpression: ||(3999)", "Delete PrimitiveType: double(4000)", "Delete SimpleName: value(4001)", "Delete SimpleName: original(4002)", "Delete SimpleName: doubleValue(4003)", "Delete MethodInvocation(4004)", "Delete VariableDeclarationFragment(4005)", "Delete VariableDeclarationStatement(4006)", "Delete SimpleName: narrowAccept(4007)", "Delete SimpleName: narrow(4008)", "Delete SimpleName: Float(4009)", "Delete SimpleType: Float(4010)", "Delete TypeLiteral(4011)", "Delete MethodInvocation(4012)", "Delete SimpleName: value(4013)", "Delete QualifiedName: Float.MAX_VALUE(4014)", "Delete InfixExpression: <=(4015)", "Delete InfixExpression: &&(4016)", "Delete SimpleName: value(4017)", "Delete QualifiedName: Float.MIN_VALUE(4018)", "Delete InfixExpression: >=(4019)", "Delete InfixExpression: &&(4020)", "Delete SimpleName: result(4021)", "Delete SimpleName: Float(4022)", "Delete SimpleName: valueOf(4023)", "Delete SimpleName: result(4024)", "Delete SimpleName: floatValue(4025)", "Delete MethodInvocation(4026)", "Delete MethodInvocation(4027)", "Delete Assignment: =(4028)", "Delete ExpressionStatement(4029)", "Delete Block(4030)", "Delete IfStatement(4031)", "Delete Block(4032)", "Delete SimpleName: original(4033)", "Delete SimpleName: BigInteger(4034)", "Delete SimpleType: BigInteger(4035)", "Delete InstanceofExpression(4036)", "Delete SimpleName: BigInteger(4037)", "Delete SimpleType: BigInteger(4038)", "Delete SimpleName: bigi(4039)", "Delete SimpleName: BigInteger(4040)", "Delete SimpleType: BigInteger(4041)", "Delete SimpleName: original(4042)", "Delete CastExpression(4043)", "Delete VariableDeclarationFragment(4044)", "Delete VariableDeclarationStatement(4045)", "Delete SimpleName: bigi(4046)", "Delete SimpleName: compareTo(4047)", "Delete SimpleName: BIGI_LONG_MAX_VALUE(4048)", "Delete MethodInvocation(4049)", "Delete NumberLiteral: 0(4050)", "Delete InfixExpression: >(4051)", "Delete SimpleName: bigi(4052)", "Delete SimpleName: compareTo(4053)", "Delete SimpleName: BIGI_LONG_MIN_VALUE(4054)", "Delete MethodInvocation(4055)", "Delete NumberLiteral: 0(4056)", "Delete InfixExpression: <(4057)", "Delete InfixExpression: ||(4058)", "Delete SimpleName: original(4059)", "Delete ReturnStatement(4060)", "Delete Block(4061)", "Delete IfStatement(4062)", "Delete Block(4063)", "Delete IfStatement(4064)", "Delete PrimitiveType: long(4065)", "Delete SimpleName: value(4066)", "Delete SimpleName: original(4067)", "Delete SimpleName: longValue(4068)", "Delete MethodInvocation(4069)", "Delete VariableDeclarationFragment(4070)", "Delete VariableDeclarationStatement(4071)", "Delete SimpleName: narrowAccept(4072)", "Delete SimpleName: narrow(4073)", "Delete SimpleName: Byte(4074)", "Delete SimpleType: Byte(4075)", "Delete TypeLiteral(4076)", "Delete MethodInvocation(4077)", "Delete SimpleName: value(4078)", "Delete QualifiedName: Byte.MAX_VALUE(4079)", "Delete InfixExpression: <=(4080)", "Delete InfixExpression: &&(4081)", "Delete SimpleName: value(4082)", "Delete QualifiedName: Byte.MIN_VALUE(4083)", "Delete InfixExpression: >=(4084)", "Delete InfixExpression: &&(4085)", "Delete SimpleName: result(4086)", "Delete SimpleName: Byte(4087)", "Delete SimpleName: valueOf(4088)", "Delete PrimitiveType: byte(4089)", "Delete SimpleName: value(4090)", "Delete CastExpression(4091)", "Delete MethodInvocation(4092)", "Delete Assignment: =(4093)", "Delete ExpressionStatement(4094)", "Delete Block(4095)", "Delete SimpleName: narrowAccept(4096)", "Delete SimpleName: narrow(4097)", "Delete SimpleName: Short(4098)", "Delete SimpleType: Short(4099)", "Delete TypeLiteral(4100)", "Delete MethodInvocation(4101)", "Delete SimpleName: value(4102)", "Delete QualifiedName: Short.MAX_VALUE(4103)", "Delete InfixExpression: <=(4104)", "Delete InfixExpression: &&(4105)", "Delete SimpleName: value(4106)", "Delete QualifiedName: Short.MIN_VALUE(4107)", "Delete InfixExpression: >=(4108)", "Delete InfixExpression: &&(4109)", "Delete SimpleName: result(4110)", "Delete SimpleName: Short(4111)", "Delete SimpleName: valueOf(4112)", "Delete PrimitiveType: short(4113)", "Delete SimpleName: value(4114)", "Delete CastExpression(4115)", "Delete MethodInvocation(4116)", "Delete Assignment: =(4117)", "Delete ExpressionStatement(4118)", "Delete Block(4119)", "Delete SimpleName: narrowAccept(4120)", "Delete SimpleName: narrow(4121)", "Delete SimpleName: Integer(4122)", "Delete SimpleType: Integer(4123)", "Delete TypeLiteral(4124)", "Delete MethodInvocation(4125)", "Delete SimpleName: value(4126)", "Delete QualifiedName: Integer.MAX_VALUE(4127)", "Delete InfixExpression: <=(4128)", "Delete InfixExpression: &&(4129)", "Delete SimpleName: value(4130)", "Delete QualifiedName: Integer.MIN_VALUE(4131)", "Delete InfixExpression: >=(4132)", "Delete InfixExpression: &&(4133)", "Delete SimpleName: result(4134)", "Delete SimpleName: Integer(4135)", "Delete SimpleName: valueOf(4136)", "Delete PrimitiveType: int(4137)", "Delete SimpleName: value(4138)", "Delete CastExpression(4139)", "Delete MethodInvocation(4140)", "Delete Assignment: =(4141)", "Delete ExpressionStatement(4142)", "Delete Block(4143)", "Delete IfStatement(4144)", "Delete IfStatement(4145)", "Delete IfStatement(4146)", "Delete Block(4147)", "Delete IfStatement(4148)", "Delete SimpleName: result(4149)", "Delete ReturnStatement(4150)", "Delete Block(4151)", "Delete MethodDeclaration(4152)", "Delete TypeDeclaration: class(4153)"]}}, {"JexlContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: has", "DEL SimpleType: Object", "DEL TextElement:  the value", "DEL TagElement: @param", "DEL TextElement:  $Id$", "DEL SimpleName: name", "DEL TextElement: <p>A variable may be defined with a null value; this method checks whether the", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL TypeDeclaration: interface", "DEL TagElement", "DEL Javadoc", "DEL Javadoc", "DEL TagElement: @return", "DEL TextElement:  true if it exists, false otherwise", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL TextElement:  the variable's name", "DEL TextElement:  the variable's value", "DEL Modifier: public", "DEL TextElement: Sets the value of a variable.", "DEL TextElement: variables may lead to unexpected results unless specified otherwise.</p>", "DEL TagElement: @since", "DEL TagElement: @version", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: name", "DEL TextElement: value is null or if the variable is undefined.</p>", "DEL PrimitiveType: boolean", "DEL SimpleName: name", "DEL SimpleName: value", "DEL SimpleName: get", "DEL SimpleType: String", "DEL TextElement: Checks whether a variable is defined in this context.", "DEL SimpleName: name", "DEL TagElement: @param", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TextElement:  the variable's name", "DEL SimpleName: name", "DEL TagElement: @return", "DEL SimpleName: set", "DEL TagElement: @param", "DEL TextElement: Gets the value of a variable.", "DEL TextElement: Manages variables which can be referenced in a JEXL expression.", "DEL TextElement:  the variable's name", "DEL TextElement: <p>Note that JEXL may use '$jexl' and '$ujexl' variables for internal purpose; setting or getting those", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: JexlContext", "DEL SimpleType: String", "DEL TextElement:  1.0", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: name"]}]}}, {"JexlContext_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Manages variables which can be referenced in a JEXL expression.(2)", "Delete TextElement: <p>Note that JEXL may use '$jexl' and '$ujexl' variables for internal purpose; setting or getting those(3)", "Delete TextElement: variables may lead to unexpected results unless specified otherwise.</p>(4)", "Delete TagElement(5)", "Delete TextElement:  1.0(6)", "Delete TagElement: @since(7)", "Delete TextElement:  $Id$(8)", "Delete TagElement: @version(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: JexlContext(12)", "Delete TextElement: Gets the value of a variable.(13)", "Delete TagElement(14)", "Delete SimpleName: name(15)", "Delete TextElement:  the variable's name(16)", "Delete TagElement: @param(17)", "Delete TextElement:  the value(18)", "Delete TagElement: @return(19)", "Delete Javadoc(20)", "Delete SimpleName: Object(21)", "Delete SimpleType: Object(22)", "Delete SimpleName: get(23)", "Delete SimpleName: String(24)", "Delete SimpleType: String(25)", "Delete SimpleName: name(26)", "Delete SingleVariableDeclaration(27)", "Delete MethodDeclaration(28)", "Delete TextElement: Sets the value of a variable.(29)", "Delete TagElement(30)", "Delete SimpleName: name(31)", "Delete TextElement:  the variable's name(32)", "Delete TagElement: @param(33)", "Delete SimpleName: value(34)", "Delete TextElement:  the variable's value(35)", "Delete TagElement: @param(36)", "Delete Javadoc(37)", "Delete PrimitiveType: void(38)", "Delete SimpleName: set(39)", "Delete SimpleName: String(40)", "Delete SimpleType: String(41)", "Delete SimpleName: name(42)", "Delete SingleVariableDeclaration(43)", "Delete SimpleName: Object(44)", "Delete SimpleType: Object(45)", "Delete SimpleName: value(46)", "Delete SingleVariableDeclaration(47)", "Delete MethodDeclaration(48)", "Delete TextElement: Checks whether a variable is defined in this context.(49)", "Delete TextElement: <p>A variable may be defined with a null value; this method checks whether the(50)", "Delete TextElement: value is null or if the variable is undefined.</p>(51)", "Delete TagElement(52)", "Delete SimpleName: name(53)", "Delete TextElement:  the variable's name(54)", "Delete TagElement: @param(55)", "Delete TextElement:  true if it exists, false otherwise(56)", "Delete TagElement: @return(57)", "Delete Javadoc(58)", "Delete PrimitiveType: boolean(59)", "Delete SimpleName: has(60)", "Delete SimpleName: String(61)", "Delete SimpleType: String(62)", "Delete SimpleName: name(63)", "Delete SingleVariableDeclaration(64)", "Delete MethodDeclaration(65)", "Delete TypeDeclaration: interface(66)"]}}, {"JexlEngine_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.BufferedReader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.File", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.FileReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStreamReader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.StringReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.Reader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.net.URL", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.net.URLConnection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.ref.SoftReference", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.LinkedHashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.LinkedHashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map.Entry"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.logging.Log"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.logging.LogFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ParseException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.Parser", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.JexlNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.TokenMgrError"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection.Uberspect", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection.UberspectImpl", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTArrayAccess", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTIdentifier"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.ASTReference", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: String", "DEL TagElement: @param", "DEL Modifier: public", "DEL SimpleType: Reader", "DEL SimpleName: uberspect", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL SimpleName: Set", "DEL SimpleName: script", "DEL SimpleName: clazz", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL TagElement: @return", "DEL TextElement: This method parses the script which validates the syntax.", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleType: String", "DEL TextElement:  the map passed in setFunctions or the empty map if the", "DEL SimpleName: xjexl", "DEL InfixExpression: ==", "DEL ParameterizedType: List<String>", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement: The default uberspector that handles all introspection patterns. ", "DEL InfixExpression: !=", "DEL ParameterizedType: List<String>", "DEL SimpleName: varf", "DEL SimpleName: text", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL SimpleName: start", "DEL ThrowStatement", "DEL SimpleName: log", "DEL CharacterLiteral: '\\n'", "DEL TagElement: @throws", "DEL Modifier: protected", "DEL SimpleType: Log", "DEL NullLiteral", "DEL TryStatement", "DEL TagElement: @param", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: scriptText", "DEL SimpleName: getCanonicalPath", "DEL MethodInvocation", "DEL Javadoc", "DEL NullLiteral", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: TokenMgrError", "DEL SimpleName: namedRegisters", "DEL InfixExpression: >", "DEL SimpleName: Integer", "DEL Modifier: private", "DEL SimpleName: frame", "DEL Block", "DEL SimpleName: o", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: isConstant", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL InfixExpression: !=", "DEL ArrayType: Object[]", "DEL QualifiedName: parser.ALLOW_REGISTERS", "DEL ParameterizedType: Entry<K,V>", "DEL Block", "DEL SimpleName: context", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: ExpressionImpl", "DEL Modifier: protected", "DEL MethodInvocation", "DEL TextElement:  the class to instantiate", "DEL NullLiteral", "DEL TagElement: @param", "DEL SimpleName: String", "DEL TextElement:  trimmed expression ending in a semi-colon", "DEL TagElement: @return", "DEL SimpleType: ArrayList", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL Block", "DEL CatchClause", "DEL ExpressionStatement", "DEL Dimension", "DEL SimpleName: Entry", "DEL SimpleName: getVariables", "DEL TextElement: A soft reference on cache.", "DEL TextElement: >", "DEL TextElement:  the registers", "DEL Modifier: public", "DEL TextElement: Non-instantiable. ", "DEL SimpleName: log", "DEL SimpleName: parms", "DEL ExpressionStatement", "DEL NullLiteral", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL SimpleName: Override", "DEL IfStatement", "DEL ParameterizedType: Map<K,V>", "DEL ReturnStatement", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: jjtGetNumChildren", "DEL Modifier: final", "DEL SimpleName: V", "DEL SimpleName: se", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: BufferedReader", "DEL SimpleName: var", "DEL SimpleName: log", "DEL SimpleName: map", "DEL TextElement:  A ", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: ArrayList", "DEL SimpleName: V", "DEL SimpleType: Map.Entry", "DEL PrefixExpression: --", "DEL TextElement: JEXL syntax.  This method parses the expression which", "DEL TextElement: If all methods are static, you may use the bean class instead of an instance as value.", "DEL ClassInstanceCreation", "DEL TextElement: Whether this frame is equal to another.", "DEL SimpleName: debug", "DEL SimpleName: array", "DEL MethodInvocation", "DEL SimpleName: List", "DEL SimpleName: reader", "DEL TagElement", "DEL TextElement:  if there is an error parsing the expression or during evaluation", "DEL SimpleName: Map", "DEL TextElement:  ", "DEL SimpleName: silent", "DEL NullLiteral", "DEL TextElement:  the parsed tree", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: context", "DEL SimpleName: logger", "DEL ReturnStatement", "DEL TextElement:  the logger to use for the underlying Uberspect", "DEL SimpleType: BufferedReader", "DEL InfixExpression: >", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: p", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: buffer", "DEL SimpleName: text", "DEL IfStatement", "DEL SimpleType: JexlArithmetic", "DEL TextElement:  the current variable being filled", "DEL Block", "DEL InfixExpression: ==", "DEL Block", "DEL Block", "DEL SimpleName: Map", "DEL SimpleName: getScope", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL Block", "DEL ThrowStatement", "DEL TextElement:  if any error occured during parsing", "DEL NullLiteral", "DEL SimpleName: refs", "DEL SimpleType: JexlInfo", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TagElement: @param", "DEL ArrayType: String[]", "DEL VariableDeclarationStatement", "DEL SimpleName: flag", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: Collections", "DEL SimpleName: UberspectHolder", "DEL InfixExpression: ==", "DEL TypeParameter", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleName: parser", "DEL TagElement: @param", "DEL SimpleName: info", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: has", "DEL SimpleName: clazz", "DEL SimpleName: node", "DEL InfixExpression: <", "DEL SimpleName: xjexl", "DEL SimpleType: Scope", "DEL TextElement:  the register names", "DEL Assignment: =", "DEL TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.", "DEL SimpleName: parms", "DEL MethodInvocation", "DEL SimpleName: debugInfo", "DEL SimpleName: setSilent", "DEL SimpleName: info", "DEL SimpleName: arithmetic", "DEL SimpleName: expr", "DEL SimpleName: frame", "DEL ArrayCreation", "DEL ReturnStatement", "DEL SimpleName: refs", "DEL SimpleName: context", "DEL SimpleName: funcs", "DEL TagElement: @param", "DEL SimpleType: List", "DEL Javadoc", "DEL TypeLiteral", "DEL SimpleName: arithmetic", "DEL TextElement: Whether this engine is in lenient or strict mode; if unspecified, use the arithmetic lenient property.", "DEL SimpleName: String", "DEL ParameterizedType: Set<List<String>>", "DEL Javadoc", "DEL TextElement: </p>", "DEL TextElement: Each entry key is used as a prefix, each entry value used as a bean implementing", "DEL SingleVariableDeclaration", "DEL TextElement: <li>When \"silent\" &amp; \"lenient\":", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL SimpleName: image", "DEL SimpleName: result", "DEL SimpleName: array", "DEL SimpleName: Uberspect", "DEL SimpleType: Integer", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL SimpleType: String", "DEL SimpleName: context", "DEL SimpleName: JexlArithmetic", "DEL TagElement", "DEL TextElement: Read from a reader into a local buffer and return a String with", "DEL SimpleName: size", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleType: Object", "DEL SimpleName: getVariables", "DEL SimpleName: scriptFile", "DEL TextElement:  the frame to compare to", "DEL ReturnStatement", "DEL SimpleName: i", "DEL InfixExpression: &&", "DEL Modifier: public", "DEL TagElement: @throws", "DEL SimpleName: expr", "DEL ThrowStatement", "DEL ThrowStatement", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: var", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: expr", "DEL SimpleName: get", "DEL Javadoc", "DEL SimpleName: emptySet", "DEL SimpleName: Object", "DEL SimpleName: args", "DEL SimpleName: Object", "DEL NullLiteral", "DEL TextElement: <p>", "DEL NullLiteral", "DEL SimpleName: jjtGetChild", "DEL SimpleName: flag", "DEL SimpleName: get", "DEL TypeParameter", "DEL Block", "DEL IfStatement", "DEL PrimitiveType: void", "DEL NullLiteral", "DEL TypeDeclaration: class", "DEL SimpleName: interpreter", "DEL Block", "DEL SimpleName: se", "DEL WhileStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL TextElement:  url/file name", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL Javadoc", "DEL Modifier: public", "DEL ArrayCreation", "DEL IfStatement", "DEL Block", "DEL Modifier: protected", "DEL IfStatement", "DEL ArrayType: String[]", "DEL SimpleName: V", "DEL NullLiteral", "DEL IfStatement", "DEL TextElement: is no use for it. The main reason for not using the default Uberspect instance is to", "DEL Block", "DEL ParameterizedType: Map<String,Object>", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL Javadoc", "DEL TextElement: based on the arguments.", "DEL CastExpression", "DEL TextElement:  a Map usable as a cache bounded to the given size", "DEL Block", "DEL TextElement: parsing this expression, or if the expression is neither an", "DEL SimpleName: clazz", "DEL SimpleName: desc", "DEL MethodDeclaration", "DEL SimpleName: put", "DEL IfStatement", "DEL SimpleName: add", "DEL Block", "DEL SimpleType: K", "DEL SimpleName: Expression", "DEL IfStatement", "DEL SimpleName: key", "DEL PrimitiveType: boolean", "DEL SimpleName: V", "DEL TypeDeclaration: class", "DEL SimpleName: intValue", "DEL SimpleName: String", "DEL Javadoc", "DEL InfixExpression: +", "DEL SimpleName: arguments", "DEL Block", "DEL Block", "DEL SimpleName: jjtGetNumChildren", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL Block", "DEL SimpleName: name", "DEL Javadoc", "DEL SimpleName: V", "DEL MethodDeclaration", "DEL SimpleName: logger", "DEL TagElement: @since", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL TextElement: When parsing expressions, ExpressionFactory synchronizes on Parser.", "DEL VariableDeclarationFragment", "DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: names", "DEL Javadoc", "DEL SimpleName: name", "DEL InfixExpression: +", "DEL Block", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL TextElement:  true if equal, false otherwise", "DEL StringLiteral: \" to the first expression from the supplied script: \\\"\"", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL SimpleType: CharSequence", "DEL TagElement: @return", "DEL Javadoc", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: Scope", "DEL SimpleName: getLog", "DEL Block", "DEL PrimitiveType: int", "DEL Modifier: protected", "DEL TagElement: @param", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: expression", "DEL TextElement: is passed, the empty collection is used.", "DEL SimpleName: scriptFile", "DEL TextElement: <p>", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: p", "DEL TextElement:  the parameters", "DEL SimpleName: arraycopy", "DEL TextElement: based on the arguments.", "DEL SimpleName: str", "DEL InfixExpression: ==", "DEL TypeParameter", "DEL ExpressionStatement", "DEL Block", "DEL Dimension", "DEL ParenthesizedExpression", "DEL SimpleName: end", "DEL SimpleName: JexlInfo", "DEL SimpleName: strict", "DEL SimpleName: createInfo", "DEL InstanceofExpression", "DEL SimpleName: JexlException", "DEL SimpleType: JexlNode", "DEL Javadoc", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: NullPointerException", "DEL SimpleName: frame", "DEL TagElement: @return", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL ArrayType: String[]", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Frame", "DEL Javadoc", "DEL IfStatement", "DEL SimpleType: JexlMethod", "DEL SimpleType: Scope", "DEL IfStatement", "DEL Block", "DEL SimpleType: FileReader", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleType: java.util.LinkedHashMap", "DEL SimpleType: Object", "DEL InfixExpression: ==", "DEL SimpleName: o", "DEL SimpleName: result", "DEL TextElement:  the cache entry key", "DEL Dimension", "DEL SimpleName: String", "DEL SimpleType: NullPointerException", "DEL ArrayType: String[]", "DEL SimpleName: namedRegisters", "DEL MethodDeclaration", "DEL SimpleName: varf", "DEL Javadoc", "DEL SimpleName: T", "DEL MethodInvocation", "DEL SimpleName: JexlContext", "DEL SimpleName: size", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL SimpleName: xany", "DEL MethodDeclaration", "DEL ParameterizedType: LinkedHashSet<List<String>>", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: URL", "DEL SimpleName: connection", "DEL SimpleName: ref", "DEL InfixExpression: &&", "DEL TextElement: Parameter and argument names if any. ", "DEL VariableDeclarationStatement", "DEL TextElement:  An Expression object which can be evaluated with a JexlContext", "DEL SimpleName: getClass", "DEL SimpleType: JexlException", "DEL SimpleName: script", "DEL SimpleType: Scope", "DEL SimpleType: Parser", "DEL SimpleName: JexlException", "DEL NullLiteral", "DEL TagElement: @param", "DEL SimpleName: String", "DEL TextElement: </p>", "DEL SimpleName: JexlException", "DEL Dimension", "DEL SimpleName: namedRegisters", "DEL Javadoc", "DEL SimpleType: JexlContext", "DEL Assignment: =", "DEL SimpleType: String", "DEL Assignment: =", "DEL TextElement: must contain either a reference or an expression.", "DEL SimpleName: xinfo", "DEL SimpleType: Interpreter", "DEL TextElement:  whether the interpreter runs in silent mode", "DEL SimpleName: Class", "DEL Block", "DEL InstanceofExpression", "DEL SimpleName: Reader", "DEL SimpleName: Scope", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: UnifiedJEXL", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL InfixExpression: <", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: info", "DEL TextElement:  the value type", "DEL SimpleName: flag", "DEL SingleVariableDeclaration", "DEL QualifiedName: parser.ALLOW_REGISTERS", "DEL NullLiteral", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: clear", "DEL TagElement: @param", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlException", "DEL SimpleName: JexlEngine", "DEL ExpressionStatement", "DEL ParameterizedType: ArrayList<String>", "DEL Block", "DEL ThisExpression", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: createCache", "DEL TagElement: @inheritDoc", "DEL Block", "DEL SimpleName: context", "DEL SimpleName: equals", "DEL SimpleName: scriptUrl", "DEL ReturnStatement", "DEL TagElement: @throws", "DEL SimpleName: dbgInfo", "DEL SimpleName: tree", "DEL IfStatement", "DEL SimpleName: JexlEngine", "DEL SimpleName: bean", "DEL SimpleType: TokenMgrError", "DEL ParameterizedType: SoftReference<Map<K,V>>", "DEL Javadoc", "DEL SimpleName: isEmpty", "DEL SimpleName: child", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: Uberspect", "DEL IfStatement", "DEL Assignment: =", "DEL SimpleName: JexlNode", "DEL TextElement: </ul>", "DEL SimpleName: getParameters", "DEL SimpleType: String", "DEL Dimension", "DEL TextElement: >", "DEL Assignment: =", "DEL TextElement: initialization code before expression creation &amp; evaluation.</p>", "DEL SimpleName: createScript", "DEL Block", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Block", "DEL NullLiteral", "DEL SimpleName: p", "DEL SimpleName: JexlInfo", "DEL SimpleName: expr", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: String", "DEL Block", "DEL Block", "DEL SimpleName: refs", "DEL SimpleType: List", "DEL ForStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: map", "DEL Modifier: public", "DEL SimpleType: Map", "DEL NumberLiteral: 0", "DEL InfixExpression: ||", "DEL NullLiteral", "DEL TextElement: </li>", "DEL SimpleType: ASTJexlScript", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: se", "DEL SimpleName: parameters", "DEL VariableDeclarationStatement", "DEL SimpleName: EMPTY_CONTEXT", "DEL SimpleName: script", "DEL SimpleName: xtme", "DEL SimpleName: args", "DEL TextElement:  the register name", "DEL TagElement: @return", "DEL SimpleName: Uberspect", "DEL SimpleName: reader", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: ExpressionImpl", "DEL SimpleName: f", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: namedRegisters", "DEL SimpleType: JexlException", "DEL SimpleName: i", "DEL TextElement: It uses an array of parameter names that will be resolved during parsing;", "DEL SimpleType: V", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL TextElement: leniency behavior.</p>", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: xparse", "DEL BooleanLiteral: false", "DEL Block", "DEL TextElement: Equivalent to !isLenient().", "DEL Assignment: =", "DEL Modifier: protected", "DEL SimpleName: setScope", "DEL IfStatement", "DEL TextElement:  An exception can be thrown if there is a problem", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: String", "DEL InfixExpression: !=", "DEL StringLiteral: \"failed executing constructor for \"", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL TextElement: Sets whether this engine considers unknown variables, methods and constructors as errors or evaluates them", "DEL InfixExpression: ==", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: getFrame", "DEL TextElement: jexl.get(myobject, \"foo.bar\"); should equate to", "DEL SimpleName: Script", "DEL SimpleName: l", "DEL PrimitiveType: boolean", "DEL IfStatement", "DEL SimpleName: ctor", "DEL ClassInstanceCreation", "DEL ParameterizedType: Map.Entry<String,Integer>", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: newInstance", "DEL VariableDeclarationFragment", "DEL TextElement: be able to use a (low level) introspector created with a given logger", "DEL Modifier: final", "DEL SimpleName: V", "DEL Assignment: =", "DEL Block", "DEL VariableDeclarationStatement", "DEL FieldAccess", "DEL TagElement: @return", "DEL SimpleName: invoke", "DEL SimpleName: setSilent", "DEL ReturnStatement", "DEL SimpleType: V", "DEL SimpleName: System", "DEL SimpleType: Script", "DEL SimpleName: str", "DEL SimpleName: Uberspect", "DEL TagElement: @return", "DEL PrimitiveType: boolean", "DEL SimpleName: Interpreter", "DEL TextElement:  an optional map of functions (@link setFunctions)", "DEL Modifier: protected", "DEL Javadoc", "DEL TextElement: Sets the class loader used to discover classes in 'new' expressions.", "DEL SimpleName: xinfo", "DEL SingleVariableDeclaration", "DEL TextElement: <ul>", "DEL TagElement: @param", "DEL MarkerAnnotation", "DEL SimpleName: ref", "DEL SimpleName: StringReader", "DEL ExpressionStatement", "DEL SimpleName: names", "DEL SimpleName: flag", "DEL TagElement", "DEL MethodDeclaration", "DEL CastExpression", "DEL SimpleName: JexlEngine", "DEL SimpleName: CharSequence", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: warn", "DEL Javadoc", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL SimpleName: JexlException", "DEL SingleVariableDeclaration", "DEL TextElement: The JexlArithmetic instance.", "DEL TextElement:  A ", "DEL NullLiteral", "DEL SimpleName: warn", "DEL SimpleName: getParameters", "DEL SimpleName: args", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: Map", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: URLConnection", "DEL SimpleName: ExpressionImpl", "DEL TagElement: @link", "DEL SimpleName: String", "DEL StringLiteral: \".\"", "DEL Block", "DEL SimpleName: name", "DEL SimpleName: scriptText", "DEL SimpleName: xjexl", "DEL SimpleName: ASTJexlScript", "DEL StringLiteral: \"#1\"", "DEL SimpleName: jjtAccept", "DEL TextElement: Checks whether an identifier is a local variable or argument, ie stored in a register. ", "DEL TagElement: @param", "DEL InfixExpression: ==", "DEL SimpleName: valueOf", "DEL SimpleName: dbgInfo", "DEL Modifier: public", "DEL SimpleName: String", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL SimpleName: T", "DEL TextElement: Creates a Script from a ", "DEL SimpleName: fn", "DEL Dimension", "DEL SimpleName: strictFlag", "DEL SimpleName: info", "DEL NullLiteral", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: node", "DEL ThisExpression", "DEL SimpleName: getRegister", "DEL SimpleName: text", "DEL IfStatement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: interpreter", "DEL MethodInvocation", "DEL SimpleType: String", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement", "DEL Block", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: K", "DEL TextElement: <p>", "DEL ExpressionStatement", "DEL SimpleName: context", "DEL SimpleName: DebugInfo", "DEL MethodInvocation", "DEL SimpleType: JexlEngine", "DEL SimpleName: logger", "DEL Javadoc", "DEL TagElement", "DEL IfStatement", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: p", "DEL SimpleType: ASTArrayAccess", "DEL SimpleName: getConstructorMethod", "DEL TryStatement", "DEL Modifier: static", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: DebugInfo", "DEL SimpleName: Object", "DEL Modifier: public", "DEL TextElement:  the created object instance or null on failure when silent", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: map", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: data", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: readLine", "DEL TextElement:  expression to clean", "DEL SimpleName: cache", "DEL SimpleType: Class", "DEL SimpleName: flag", "DEL TagElement: @link", "DEL SimpleName: child", "DEL SimpleName: context", "DEL ClassInstanceCreation", "DEL SimpleName: args", "DEL SimpleName: s", "DEL NullLiteral", "DEL TextElement:  true if lenient, false if strict", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: xjexl", "DEL TextElement:  the script text", "DEL PrimitiveType: void", "DEL Block", "DEL TextElement:  the argument values", "DEL ArrayType: String[]", "DEL ClassInstanceCreation", "DEL SimpleName: Throwable", "DEL NullLiteral", "DEL SimpleType: JexlInfo", "DEL SimpleName: script", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL SimpleType: ExpressionImpl", "DEL TextElement:  the script", "DEL Block", "DEL InstanceofExpression", "DEL SimpleName: parse", "DEL SimpleName: String", "DEL SimpleName: cast", "DEL TextElement:  the cache key value type", "DEL Dimension", "DEL SimpleName: script", "DEL SimpleName: Object", "DEL SimpleName: Override", "DEL QualifiedName: Map.Entry", "DEL SimpleName: ref", "DEL InfixExpression: !=", "DEL SimpleName: getCause", "DEL SimpleName: createInterpreter", "DEL MethodDeclaration", "DEL TextElement: <li>Arithmetic & comparison, see ", "DEL SimpleName: str", "DEL ReturnStatement", "DEL TagElement: @param", "DEL TagElement: @param", "DEL FieldDeclaration", "DEL InfixExpression: ||", "DEL IfStatement", "DEL SimpleName: key", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: keySet", "DEL NullLiteral", "DEL SimpleName: charAt", "DEL SimpleName: pa", "DEL SimpleName: hashCode", "DEL SimpleName: expr", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: frame", "DEL SimpleName: script", "DEL SimpleType: Object", "DEL InfixExpression: >", "DEL SimpleName: end", "DEL SimpleName: invokeMethod", "DEL PrefixExpression: !", "DEL ReturnStatement", "DEL SimpleName: createScript", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: jjtGetChild", "DEL SimpleName: num", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: buffer", "DEL SimpleName: emptySet", "DEL VariableDeclarationStatement", "DEL TextElement: <li>Error reporting</li>", "DEL SimpleType: String", "DEL SimpleName: image", "DEL TextElement: <p>The error control grain is roughly on par with JEXL 1.0</p>", "DEL SimpleName: silentFlag", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL TypeDeclaration: class", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL TextElement: Creates an Expression from a String containing valid", "DEL SimpleName: script", "DEL SimpleName: JexlInfo", "DEL SimpleName: args", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: parameters", "DEL SimpleName: funcs", "DEL TagElement", "DEL TagElement: @return", "DEL Block", "DEL Block", "DEL TextElement:  A String containing valid JEXL syntax", "DEL SimpleName: cache", "DEL SimpleName: T", "DEL ArrayType: String[]", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement: Creates a Script from a String containing valid JEXL syntax.", "DEL ArrayCreation", "DEL TextElement: Use case could be configuration with no implicit values or defaults.", "DEL PrimitiveType: void", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleType: Scope", "DEL InfixExpression: !=", "DEL Modifier: public", "DEL SimpleName: namedRegisters", "DEL SimpleName: names", "DEL MethodInvocation", "DEL PrefixExpression: ++", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MemberRef", "DEL CatchClause", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL ParameterizedType: Set<List<String>>", "DEL TagElement: @inheritDoc", "DEL SimpleName: frame", "DEL TextElement: The Log to which all JexlEngine messages will be logged.", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL TagElement: @param", "DEL SimpleType: Scope", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL TagElement: @param", "DEL SimpleType: JexlException.Parsing", "DEL SimpleName: put", "DEL SimpleName: ref", "DEL SimpleName: String", "DEL SimpleName: refs", "DEL QualifiedName: desc.image", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleName: values", "DEL IfStatement", "DEL TextElement: Creates a new frame.", "DEL SimpleName: setLenient", "DEL TagElement: @return", "DEL SimpleName: BufferedReader", "DEL SimpleName: setClassLoader", "DEL ArrayAccess", "DEL SimpleName: Integer", "DEL TextElement:  true if silent, false (default) otherwise", "DEL InfixExpression: !=", "DEL SimpleName: JexlContext", "DEL TextElement:  the cache entry set", "DEL SimpleName: JexlException", "DEL IfStatement", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL TextElement: Gets the default instance of Uberspect.", "DEL ClassInstanceCreation", "DEL SimpleType: Integer", "DEL SimpleType: String", "DEL SimpleName: args", "DEL SimpleType: DebugInfo", "DEL Javadoc", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: getClassName", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: ref", "DEL TextElement: Declares a local variable.", "DEL Block", "DEL TextElement: .", "DEL InfixExpression: !=", "DEL SimpleName: Integer", "DEL SimpleName: setDebug", "DEL SimpleType: JexlNode", "DEL Modifier: private", "DEL SimpleType: JexlContext", "DEL SimpleName: desc", "DEL SimpleType: Scope", "DEL TextElement: (log as warning or throw exception).", "DEL InfixExpression: ==", "DEL SimpleType: Map", "DEL InstanceofExpression", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL SimpleName: getProperty", "DEL MethodInvocation", "DEL SimpleName: strict", "DEL SimpleName: List", "DEL NullLiteral", "DEL SimpleName: createScript", "DEL TextElement: <p>Note that the JexlContext is also used to try to solve top-level functions. This allows ObjectContext", "DEL SimpleName: silentFlag", "DEL SimpleName: Debugger", "DEL SingleVariableDeclaration", "DEL Block", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL NumberLiteral: 0.75f", "DEL Block", "DEL Modifier: static", "DEL TextElement:  the map of functions that should not mutate after the call; if null", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: xjexl", "DEL SimpleName: frame", "DEL MethodInvocation", "DEL TextElement: Must not be null. Must be a readable file.", "DEL SimpleName: get", "DEL SimpleType: K", "DEL TextElement:  the key type", "DEL NumberLiteral: 1L", "DEL SimpleName: parameters", "DEL SimpleName: T", "DEL SimpleName: method", "DEL SynchronizedStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL NullLiteral", "DEL Block", "DEL TextElement:  the variable name", "DEL VariableDeclarationStatement", "DEL TextElement:  an Interpreter", "DEL SimpleName: parms", "DEL SimpleName: info", "DEL ParameterizedType: Map.Entry<K,V>", "DEL SimpleName: method", "DEL TagElement: @param", "DEL SimpleName: bean", "DEL VariableDeclarationFragment", "DEL SimpleName: LogFactory", "DEL MethodInvocation", "DEL ArrayType: String[]", "DEL Assignment: =", "DEL Block", "DEL ArrayCreation", "DEL SimpleType: NullPointerException", "DEL SimpleName: namedRegisters", "DEL TagElement", "DEL SimpleName: String", "DEL SimpleName: bean", "DEL SimpleType: StringReader", "DEL SimpleType: K", "DEL SimpleType: V", "DEL ArrayType: String[]", "DEL ExpressionStatement", "DEL SimpleName: LinkedHashSet", "DEL TextElement: </p>", "DEL SimpleType: JexlEngine", "DEL SimpleName: V", "DEL SimpleName: createScript", "DEL SimpleName: setFrame", "DEL SimpleName: c", "DEL SimpleName: obj", "DEL IfStatement", "DEL NullLiteral", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL ParameterizedType: ArrayList<String>", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: Parser", "DEL InfixExpression: ==", "DEL SimpleName: jjtGetChild", "DEL SimpleName: Class", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL NumberLiteral: 0", "DEL SimpleName: functions", "DEL MethodInvocation", "DEL TagElement", "DEL NullLiteral", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: V", "DEL SimpleType: Map", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL NumberLiteral: 1", "DEL SimpleName: expr", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL SimpleName: doCreateInstance", "DEL SimpleType: Object", "DEL Block", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement: </p>", "DEL SimpleName: clearCache", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL SimpleName: ExpressionImpl", "DEL SimpleName: parms", "DEL SimpleType: V", "DEL SimpleName: JexlEngine", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleName: info", "DEL Javadoc", "DEL SimpleName: V", "DEL SimpleName: arithmetic", "DEL InfixExpression: &&", "DEL SimpleName: Exception", "DEL Modifier: public", "DEL SimpleName: BufferedReader", "DEL StringLiteral: \".\"", "DEL SimpleName: getLineNumber", "DEL TagElement", "DEL Javadoc", "DEL SimpleType: Scope", "DEL SingleVariableDeclaration", "DEL SimpleName: ref", "DEL SimpleName: tree", "DEL SimpleName: info", "DEL PrimitiveType: int", "DEL SimpleName: LogFactory", "DEL SimpleName: info", "DEL MethodDeclaration", "DEL TextElement:  An exception can be thrown if there is a problem", "DEL BooleanLiteral: true", "DEL SimpleName: ArrayList", "DEL SimpleType: V", "DEL SimpleName: createInfo", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: map", "DEL SimpleType: Debugger", "DEL Modifier: public", "DEL TextElement:  if there is a problem parsing the script.", "DEL SimpleType: JexlContext", "DEL Block", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: tree", "DEL SimpleName: info", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleType: ASTJexlScript", "DEL QualifiedName: frame.namedRegisters", "DEL SimpleName: equals", "DEL SimpleName: debugInfo", "DEL SimpleName: JexlNode", "DEL SimpleName: info", "DEL SimpleName: arithmetic", "DEL SimpleType: IOException", "DEL SimpleName: Frame", "DEL ExpressionStatement", "DEL IfStatement", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: text", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: getKey", "DEL SimpleName: l", "DEL SimpleName: xio", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlContext", "DEL SimpleName: Scope", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL NullLiteral", "DEL TextElement:  the value of the property", "DEL SimpleName: i", "DEL SimpleName: meth", "DEL SimpleName: f", "DEL SimpleName: V", "DEL SimpleName: JexlException", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL StringLiteral: \"#0\"", "DEL Modifier: public", "DEL SimpleName: DebugInfo", "DEL TextElement: <p>", "DEL ConditionalExpression", "DEL SimpleType: Interpreter", "DEL SimpleName: setCache", "DEL SimpleName: JexlException", "DEL ParameterizedType: Map<K,V>", "DEL ExpressionStatement", "DEL TextElement:  2.0", "DEL SimpleName: JexlEngine", "DEL SimpleName: Script", "DEL QualifiedName: frame.parms", "DEL TagElement: @link", "DEL SimpleName: parser", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL TextElement: </li>", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL SimpleName: s", "DEL ArrayType: String[]", "DEL ExpressionStatement", "DEL SimpleName: frame", "DEL TextElement:  the parse AST tree", "DEL SimpleName: JexlArithmetic", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL TagElement: @param", "DEL SimpleName: getMessage", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: registers", "DEL TextElement: Checks whether this engine is in debug mode.", "DEL SimpleName: doCreateInstance", "DEL TypeParameter", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: node", "DEL InfixExpression: ==", "DEL SimpleType: Script", "DEL NullLiteral", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL Modifier: protected", "DEL TagElement: @return", "DEL TextElement: This method parses the script and validates the syntax.", "DEL SimpleName: dbgInfo", "DEL ReturnStatement", "DEL SimpleName: script", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: flag", "DEL SimpleName: Script", "DEL ConditionalExpression", "DEL Block", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: CharSequence", "DEL SimpleType: BufferedReader", "DEL SingleVariableDeclaration", "DEL Modifier: protected", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL TextElement: Sets a cache for expressions of the defined size.", "DEL Block", "DEL SimpleName: expression", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ArrayType: String[]", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL StringLiteral: \"scriptUrl is null\"", "DEL Block", "DEL TextElement:  the bean to get properties from", "DEL Javadoc", "DEL SimpleType: Integer", "DEL SimpleType: BufferedReader", "DEL IfStatement", "DEL ConditionalExpression", "DEL TagElement: @link", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.", "DEL TextElement: >", "DEL BooleanLiteral: true", "DEL SimpleName: xjexl", "DEL IfStatement", "DEL SimpleName: expression", "DEL SimpleType: String", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: xjexl", "DEL ClassInstanceCreation", "DEL TextElement: <p>The cache will contain at most <code>size</code> expressions. Note that", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: p", "DEL ExpressionStatement", "DEL QualifiedName: java.util.LinkedHashMap", "DEL SimpleType: Object", "DEL Dimension", "DEL SimpleName: i", "DEL SimpleName: Parser", "DEL Dimension", "DEL TextElement: Gets a value from cache.", "DEL SimpleName: info", "DEL SimpleName: JexlMethod", "DEL SimpleType: Uberspect", "DEL PrefixExpression: !", "DEL TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL SimpleName: JexlContext", "DEL IfStatement", "DEL SimpleName: p", "DEL SimpleType: String", "DEL SimpleName: toArray", "DEL SimpleName: clazz", "DEL NumberLiteral: 0", "DEL TextElement:  the cache size", "DEL SimpleType: ExpressionImpl", "DEL TagElement: @inheritDoc", "DEL SimpleType: K", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: clazz", "DEL ParameterizedType: SoftCache<String,ASTJexlScript>", "DEL SimpleName: getKey", "DEL SimpleName: getUberspect", "DEL SimpleName: Interpreter", "DEL ArrayType: String[]", "DEL TextElement: or the empty set if no variables are used", "DEL VariableDeclarationStatement", "DEL InfixExpression: &&", "DEL TextElement:  the bean to get properties from", "DEL TextElement:  true implies debug is on, false implies debug is off.", "DEL PrefixExpression: ++", "DEL SimpleName: namedRegisters", "DEL TextElement:  A String containing valid JEXL syntax", "DEL MethodInvocation", "DEL SimpleName: getRegister", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL ThrowStatement", "DEL SimpleName: List", "DEL SimpleName: clazz", "DEL TextElement: , (@link JexlArithmetic),", "DEL TextElement:  A String containing valid JEXL syntax", "DEL ExpressionStatement", "DEL InstanceofExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlEngine", "DEL SimpleName: register", "DEL SimpleType: Object", "DEL SimpleName: info", "DEL MemberRef", "DEL Modifier: protected", "DEL SimpleName: Script", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL SimpleName: JexlEngine", "DEL SimpleName: getProperty", "DEL IfStatement", "DEL SimpleType: BufferedReader", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Parser", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: K", "DEL TextElement: The number of parameters.", "DEL PrimitiveType: void", "DEL SimpleName: parser", "DEL SimpleName: se", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: ref", "DEL ArrayCreation", "DEL SimpleName: name", "DEL SimpleName: put", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: setClassLoader", "DEL SimpleName: scriptReader", "DEL SimpleName: V", "DEL NullLiteral", "DEL Assignment: =", "DEL Block", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL TextElement: Serial version UID. ", "DEL SimpleName: ctor", "DEL TextElement: Gets the default instance of Uberspect.", "DEL SimpleName: getUberspect", "DEL TextElement: memory pressure.</p>", "DEL SimpleName: logger", "DEL SimpleName: String", "DEL SimpleName: fillInStackTrace", "DEL TagElement: @see", "DEL SingleVariableDeclaration", "DEL SimpleName: Reader", "DEL SimpleName: script", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: JexlException", "DEL TextElement: Gets the array of local variable from a script.", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: IOException", "DEL SimpleType: String", "DEL SimpleName: xjexl", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL Block", "DEL TextElement: .", "DEL Block", "DEL TextElement:  the parameter names", "DEL SimpleName: se", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleType: ASTIdentifier", "DEL PrimitiveType: int", "DEL SimpleName: bean", "DEL VariableDeclarationStatement", "DEL SimpleName: Map", "DEL TagElement", "DEL ClassInstanceCreation", "DEL FieldAccess", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: theFunctions", "DEL SimpleName: dbgInfo", "DEL SimpleName: logger", "DEL SimpleName: String", "DEL TextElement:  the property expression", "DEL QualifiedName: values.length", "DEL TextElement:  ", "DEL TextElement: <p>The cache is held through a soft reference, allowing it to be GCed under", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: namedRegisters", "DEL NullLiteral", "DEL TagElement: @return", "DEL InfixExpression: !=", "DEL InfixExpression: <", "DEL SimpleName: getClassName", "DEL SimpleName: context", "DEL TagElement: @throws", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: String", "DEL CastExpression", "DEL TagElement: @param", "DEL InfixExpression: ==", "DEL TextElement: of the namespace will be created at evaluation time. It might be a good idea to derive a JexlContext", "DEL SimpleName: JexlException", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL AnonymousClassDeclaration", "DEL SimpleName: getParameters", "DEL SingleVariableDeclaration", "DEL SimpleName: info", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: emptyMap", "DEL BooleanLiteral: true", "DEL QualifiedName: JexlException.Parsing", "DEL ReturnStatement", "DEL InfixExpression: &&", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL PrimitiveType: boolean", "DEL SimpleType: Map", "DEL ClassInstanceCreation", "DEL SimpleName: Object", "DEL SimpleName: r", "DEL QualifiedName: parameters.length", "DEL SimpleName: parameters", "DEL TextElement:  the local variables array which may be empty (but not null) if no local variables were defined", "DEL Block", "DEL SimpleName: namedRegisters", "DEL SimpleName: add", "DEL SimpleName: Object", "DEL ThisExpression", "DEL Javadoc", "DEL SimpleName: ASTJexlScript", "DEL MethodInvocation", "DEL TypeLiteral", "DEL PrimitiveType: int", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: Integer", "DEL SynchronizedStatement", "DEL Dimension", "DEL SimpleName: meth", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: script", "DEL MethodInvocation", "DEL Modifier: public", "DEL TextElement: Must not be null. Must be a readable file.", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: args", "DEL TagElement", "DEL SimpleName: scriptText", "DEL PrimitiveType: int", "DEL SimpleName: s", "DEL Block", "DEL ForStatement", "DEL SimpleType: Scope", "DEL SimpleName: expr", "DEL SimpleName: JexlException", "DEL SimpleName: scriptFile", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: var", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: File", "DEL SimpleName: createInterpreter", "DEL SimpleName: JexlMethod", "DEL TagElement: @see", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL SimpleName: BufferedReader", "DEL SimpleType: JexlArithmetic", "DEL TagElement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: K", "DEL SimpleName: Map", "DEL ReturnStatement", "DEL SimpleName: JexlContext", "DEL SimpleName: UberspectImpl", "DEL SimpleName: se", "DEL SimpleName: end", "DEL SimpleName: List", "DEL SimpleName: BufferedReader", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: namedRegisters", "DEL Block", "DEL ReturnStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: expression", "DEL TextElement:  the method returned value or null if it failed and engine is silent", "DEL SimpleName: Object", "DEL NullLiteral", "DEL EnhancedForStatement", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: clazz", "DEL MethodDeclaration", "DEL TextElement:  the value of the property", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleType: IOException", "DEL TextElement:  the cache entry value", "DEL IfStatement", "DEL SimpleName: IOException", "DEL TextElement: Gets the (maximum) number of arguments this script expects.", "DEL SimpleName: cache", "DEL Assignment: =", "DEL SimpleName: frame", "DEL SimpleType: ASTIdentifier", "DEL TextElement:  if there is a problem parsing the script.", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TextElement:  the method's arguments", "DEL SimpleName: String", "DEL SimpleType: DebugInfo", "DEL TextElement: <li>Introspection, see ", "DEL Modifier: final", "DEL SimpleName: log", "DEL PostfixExpression: ++", "DEL Dimension", "DEL NullLiteral", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL SimpleName: BufferedReader", "DEL SimpleType: Script", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL SimpleName: scriptReader", "DEL TagElement: @link", "DEL TagElement: @param", "DEL Modifier: final", "DEL SimpleName: JexlThreadedArithmetic", "DEL MethodInvocation", "DEL TextElement:  the type of object", "DEL IfStatement", "DEL TextElement: Retrieves the map of function namespaces.", "DEL SimpleName: clazz", "DEL Block", "DEL SimpleType: Object", "DEL Block", "DEL SimpleType: Uberspect", "DEL NullLiteral", "DEL SimpleType: Object", "DEL TextElement:  if there is an error parsing the expression or during evaluation", "DEL SimpleName: Set", "DEL SimpleName: Frame", "DEL SimpleName: value", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: Object", "DEL SimpleName: name", "DEL TextElement: Determines the behavior of Expressions & Scripts during their evaluation with respect to:", "DEL TagElement: @param", "DEL SimpleName: cache", "DEL SimpleName: pa", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: JexlException", "DEL TextElement: Gets this engine underlying arithmetic.", "DEL Assignment: =", "DEL TextElement:  An Expression object which can be evaluated with a JexlContext", "DEL ConditionalExpression", "DEL SimpleName: child", "DEL Block", "DEL SimpleName: r", "DEL TagElement", "DEL SimpleName: script", "DEL SimpleName: createExpression", "DEL TypeDeclaration: class", "DEL ConditionalExpression", "DEL SimpleName: Integer", "DEL SimpleName: cacheSize", "DEL NullLiteral", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: CharSequence", "DEL TextElement: <", "DEL SimpleName: entrySet", "DEL SimpleName: Script", "DEL SingleVariableDeclaration", "DEL SimpleName: ref", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL StringLiteral: \"Not supported in void context.\"", "DEL SimpleName: isStrict", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL SimpleName: readerToString", "DEL SimpleName: str", "DEL TagElement: @link", "DEL SimpleName: tree", "DEL ArrayType: String[]", "DEL SimpleType: String", "DEL SimpleName: add", "DEL ParameterizedType: LinkedHashMap<String,Integer>", "DEL SimpleName: meth", "DEL SimpleName: tree", "DEL Modifier: protected", "DEL SimpleName: namedRegisters", "DEL PrefixExpression: !", "DEL SimpleType: List", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleType: SoftCache", "DEL SimpleName: line", "DEL StringLiteral: \"#1\"", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: Uberspect", "DEL SimpleType: K", "DEL SimpleName: setDebug", "DEL TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string)", "DEL TextElement: Creates and fills up debugging information.", "DEL SimpleName: anUberspect", "DEL TextElement: the contents of the reader.", "DEL SimpleName: anArithmetic", "DEL SimpleType: Expression", "DEL TextElement: <p>", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleName: bean", "DEL TextElement: Creates a frame by copying values up to the number of parameters.", "DEL SimpleType: Object", "DEL SimpleType: V", "DEL TextElement: <p>", "DEL Modifier: protected", "DEL SimpleName: values", "DEL SimpleName: args", "DEL SimpleName: parse", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL Block", "DEL Assignment: =", "DEL SimpleName: getMethod", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: flag", "DEL TextElement: Registers or arguments. ", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL SimpleName: xjexl", "DEL SingleVariableDeclaration", "DEL TypeLiteral", "DEL SimpleName: JexlContext", "DEL VariableDeclarationStatement", "DEL SimpleName: Entry", "DEL SimpleName: script", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: Set", "DEL TextElement:  which can be executed with a", "DEL StringLiteral: \"scriptText is null\"", "DEL Modifier: static", "DEL ParameterizedType: SoftReference<Map<K,V>>", "DEL Block", "DEL SimpleName: List", "DEL TextElement: </p>", "DEL SingleVariableDeclaration", "DEL SimpleName: File", "DEL SimpleName: Exception", "DEL SimpleType: Object", "DEL Javadoc", "DEL TextElement: Invokes an object's method by name and arguments.", "DEL ExpressionStatement", "DEL SimpleName: K", "DEL SimpleName: createExpression", "DEL SimpleType: String", "DEL SimpleName: cacheSize", "DEL SimpleName: createScript", "DEL SimpleType: Script", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleType: JexlContext", "DEL Block", "DEL SimpleName: cache", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL Javadoc", "DEL SimpleType: Boolean", "DEL SimpleName: size", "DEL Block", "DEL SimpleName: ASTArrayAccess", "DEL SimpleName: scriptUrl", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: setDebug", "DEL SimpleName: JexlEngine", "DEL SimpleName: JexlException", "DEL SimpleName: K", "DEL Block", "DEL SimpleType: ExpressionImpl", "DEL SimpleName: Set", "DEL SimpleName: namedRegisters", "DEL SimpleName: expression", "DEL SimpleName: getCause", "DEL Block", "DEL SimpleName: register", "DEL SimpleName: expr", "DEL SimpleName: warn", "DEL ReturnStatement", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL Assignment: =", "DEL CastExpression", "DEL SimpleName: silent", "DEL SimpleName: silent", "DEL Block", "DEL SimpleType: List", "DEL SimpleType: SoftCache", "DEL TagElement: @return", "DEL SimpleName: equals", "DEL ExpressionStatement", "DEL SimpleType: K", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: refs", "DEL Modifier: static", "DEL TextElement:  true for strict, false for lenient", "DEL Block", "DEL SimpleType: JexlInfo", "DEL InfixExpression: ==", "DEL TextElement:  the method's name", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: values", "DEL Modifier: public", "DEL TextElement: Sets whether this engine reports debugging information when error occurs.", "DEL TextElement:  the logger for various messages", "DEL TextElement:  the constructor arguments", "DEL NullLiteral", "DEL SimpleType: SoftReference", "DEL SimpleName: p", "DEL TextElement:  A String containing valid JEXL syntax", "DEL NullLiteral", "DEL NullLiteral", "DEL StringLiteral: \"failed finding method \"", "DEL SimpleName: JexlContext", "DEL TextElement: Creates a new instance of an object using the most appropriate constructor", "DEL SimpleName: File", "DEL SimpleName: info", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL TagElement: @return", "DEL SimpleName: node", "DEL StringLiteral: \"#0\"", "DEL SimpleName: String", "DEL TextElement:  a JexlContext; if null, the EMPTY_CONTEXT is used instead.", "DEL SimpleName: logger", "DEL TextElement: <p> 0 & null should be indicators of \"default\" values so that even in an case of error,", "DEL TagElement: @throws", "DEL TextElement: If the entry value is a class that has one contructor taking a JexlContext as argument, an instance", "DEL StringLiteral: \"=\"", "DEL SimpleName: parms", "DEL SimpleName: reader", "DEL ForStatement", "DEL SimpleName: JexlNode", "DEL SimpleType: List", "DEL SimpleName: node", "DEL SimpleName: Scope", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL InfixExpression: +", "DEL InfixExpression: !=", "DEL SimpleName: Integer", "DEL SimpleName: String", "DEL TextElement: Returns the cache size.", "DEL SimpleType: Set", "DEL SimpleName: setStrict", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlInfo", "DEL SimpleName: Object", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL SimpleName: JexlEngine", "DEL Modifier: public", "DEL TextElement:  if there is a problem reading the script.", "DEL ArrayType: String[]", "DEL TagElement", "DEL SimpleName: reader", "DEL SimpleName: createInfo", "DEL SimpleName: expr", "DEL TagElement: @param", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: obj", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL SimpleName: K", "DEL SimpleName: hashCode", "DEL Javadoc", "DEL SimpleName: child", "DEL CastExpression", "DEL Modifier: static", "DEL SimpleName: equals", "DEL ArrayType: Object[]", "DEL TextElement:  the bean to set properties in", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: expr", "DEL SimpleType: Object", "DEL SimpleName: ASTJexlScript", "DEL VariableDeclarationStatement", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL SimpleName: expr", "DEL Modifier: protected", "DEL TextElement:  the name of the class to instantiate resolved through this engine's class loader", "DEL SimpleName: log", "DEL InfixExpression: <", "DEL TagElement: @link", "DEL ContinueStatement", "DEL SimpleName: debug", "DEL SimpleName: length", "DEL TagElement: @param", "DEL NullLiteral", "DEL TextElement:  the register index storing this variable", "DEL TextElement:  the node", "DEL TextElement: Creates a new instance of an object using the most appropriate constructor", "DEL TextElement: a function map and logger.", "DEL SimpleName: createFrame", "DEL SimpleType: DebugInfo", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: createInterpreter", "DEL IfStatement", "DEL SimpleName: reader", "DEL SimpleName: info", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL TagElement: @link", "DEL ExpressionStatement", "DEL SimpleName: xjexl", "DEL MethodInvocation", "DEL TextElement:  ", "DEL TextElement: <", "DEL TextElement:  the script", "DEL IfStatement", "DEL NullLiteral", "DEL TextElement: JEXL syntax.  This method parses the expression which", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: namedRegisters", "DEL PrimitiveType: void", "DEL SimpleName: SoftCache", "DEL SimpleName: expr", "DEL TagElement", "DEL SimpleType: String", "DEL SimpleName: se", "DEL SimpleName: text", "DEL SimpleType: JexlEngine", "DEL TagElement: @param", "DEL TextElement: original was null.", "DEL TextElement:  the list of parameters", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL CharacterLiteral: ' '", "DEL ReturnStatement", "DEL Block", "DEL NullLiteral", "DEL SimpleType: LinkedHashSet", "DEL TagElement", "DEL SimpleName: Scope", "DEL TagElement", "DEL SimpleType: Throwable", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL SimpleName: createInfo", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL NullLiteral", "DEL TagElement: @link", "DEL IfStatement", "DEL SimpleName: String", "DEL SimpleName: toString", "DEL TagElement", "DEL IfStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL SimpleName: scriptText", "DEL SimpleName: Uberspect", "DEL SimpleName: InputStreamReader", "DEL IfStatement", "DEL TextElement:  containing valid JEXL syntax.", "DEL Javadoc", "DEL SimpleName: newInstance", "DEL SimpleName: clazz", "DEL SimpleType: StringBuilder", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: size", "DEL SimpleType: JexlContext", "DEL Block", "DEL SimpleName: flag", "DEL SimpleName: parms", "DEL Javadoc", "DEL SimpleName: values", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ParameterizedType: SoftCache<String,ASTJexlScript>", "DEL Block", "DEL SimpleType: UnsupportedOperationException", "DEL TextElement: expression or a reference.", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: uberspect", "DEL Assignment: =", "DEL NullLiteral", "DEL Block", "DEL SimpleName: getName", "DEL TextElement:  the value of the property", "DEL TextElement:  the arguments array", "DEL TextElement: </li>", "DEL SimpleName: JexlContext", "DEL TextElement: Equivalent to setLenient(!flag).", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL TextElement: An empty/static/non-mutable JexlContext used instead of null context.", "DEL SimpleName: getLocalVariables", "DEL SimpleType: UberspectImpl", "DEL Block", "DEL CatchClause", "DEL SimpleName: bean", "DEL StringLiteral: \"The JEXL Expression created will be a reference\"", "DEL ExpressionStatement", "DEL SimpleName: toString", "DEL SimpleName: toString", "DEL TagElement", "DEL SimpleName: bean", "DEL SimpleType: ArrayList", "DEL Modifier: protected", "DEL TagElement", "DEL TagElement: @throws", "DEL Javadoc", "DEL SimpleName: setFrame", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: scriptText", "DEL MethodInvocation", "DEL SimpleName: StringReader", "DEL Modifier: public", "DEL SimpleName: getVariables", "DEL Modifier: static", "DEL ReturnStatement", "DEL SimpleName: K", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL SimpleName: bean", "DEL Javadoc", "DEL TextElement: The expression cache.", "DEL Assignment: =", "DEL SimpleName: getLocalVariables", "DEL TagElement: @param", "DEL SimpleType: String", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: setProperty", "DEL SimpleType: Frame", "DEL TextElement:  the script instance", "DEL SimpleName: bean", "DEL TextElement: This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL SimpleName: entry", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleType: StackTraceElement", "DEL SimpleName: script", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL TextElement: Gets this script registers, i.e. parameters and local variables.", "DEL Dimension", "DEL SimpleName: xparse", "DEL ConstructorInvocation", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL SimpleName: Log", "DEL SimpleName: logger", "DEL SimpleName: xjexl", "DEL InstanceofExpression", "DEL SimpleName: add", "DEL SimpleName: booleanValue", "DEL SimpleName: DebugInfo", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL SimpleType: Log", "DEL PrimitiveType: boolean", "DEL Block", "DEL TagElement", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: StackTraceElement", "DEL Block", "DEL StringLiteral: \"Can't read scriptFile (\"", "DEL SimpleName: String", "DEL SimpleName: info", "DEL NumberLiteral: 0", "DEL SimpleName: Script", "DEL SimpleType: Reader", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL ExpressionStatement", "DEL TagElement", "DEL TextElement:  if there is an error parsing the expression or during evaluation", "DEL InfixExpression: <", "DEL NullLiteral", "DEL SimpleName: getLocalVariables", "DEL TextElement:  true means no JexlException will occur, false allows them", "DEL TextElement:  A ", "DEL IfStatement", "DEL SimpleName: xinfo", "DEL Modifier: public", "DEL ParameterizedType: Map.Entry<String,Integer>", "DEL VariableDeclarationStatement", "DEL SimpleName: cache", "DEL TagElement", "DEL TagElement", "DEL Block", "DEL TextElement: Checks whether this engine behaves in strict or lenient mode.", "DEL ExpressionStatement", "DEL TextElement:  A ", "DEL Block", "DEL CharacterLiteral: '['", "DEL SimpleName: info", "DEL TextElement:  the register index", "DEL ArrayType: Object[]", "DEL SimpleName: desc", "DEL SimpleName: Collections", "DEL SimpleName: parms", "DEL MemberRef", "DEL SimpleName: namedRegisters", "DEL SimpleName: dbgInfo", "DEL SimpleName: scriptUrl", "DEL StringLiteral: \"\"", "DEL SimpleName: cache", "DEL Modifier: final", "DEL SimpleName: getRegister", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: close", "DEL InfixExpression: +", "DEL SimpleName: isDebug", "DEL TextElement: Checks whether this engine considers unknown variables, methods and constructors as errors.", "DEL SimpleName: script", "DEL SimpleName: result", "DEL ParenthesizedExpression", "DEL SimpleName: loader", "DEL SimpleName: JexlException", "DEL TextElement:  the method's invoker object", "DEL SimpleName: flag", "DEL SimpleName: r", "DEL SimpleName: meth", "DEL TryStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL InfixExpression: &&", "DEL NullLiteral", "DEL SimpleName: map", "DEL ArrayCreation", "DEL Modifier: static", "DEL TagElement: @param", "DEL SimpleName: scriptFile", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: namedRegisters", "DEL Block", "DEL TextElement: The map of 'prefix:function' to object implementing the functions.", "DEL ExpressionStatement", "DEL SimpleName: entry", "DEL VariableDeclarationStatement", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: Scope", "DEL TextElement: Gets this script parameters, i.e. registers assigned before creating local variables.", "DEL TagElement: @return", "DEL SimpleName: silent", "DEL SimpleType: LinkedHashMap", "DEL SimpleName: getConstructorMethod", "DEL NumberLiteral: 0", "DEL SimpleName: context", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: isSilent", "DEL SimpleType: JexlException", "DEL SimpleName: setLenient", "DEL SimpleName: scriptText", "DEL SimpleName: xjexl", "DEL SimpleName: reference", "DEL SimpleName: UberspectHolder", "DEL TagElement: @throws", "DEL MemberRef", "DEL InfixExpression: ==", "DEL SimpleName: setFunctions", "DEL SimpleName: start", "DEL NullLiteral", "DEL SimpleName: result", "DEL TagElement: @param", "DEL TextElement: </p>", "DEL Modifier: public", "DEL Javadoc", "DEL TextElement: <p>As of 2.1, you need a JexlThreadedArithmetic instance for this call to also modify the JexlArithmetic", "DEL SimpleName: script", "DEL SimpleName: ASTIdentifier", "DEL Javadoc", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: start", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: info", "DEL InfixExpression: ==", "DEL SimpleName: Uberspect", "DEL NullLiteral", "DEL TextElement: as null.", "DEL InfixExpression: !=", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleType: Map.Entry", "DEL TagElement", "DEL Assignment: =", "DEL TagElement: @param", "DEL TextElement: Creates a new instance of an object using the most appropriate constructor", "DEL ConditionalExpression", "DEL NumberLiteral: 0", "DEL TextElement:  A String containing valid JEXL syntax", "DEL TagElement: @throws", "DEL SimpleName: getParameters", "DEL QualifiedName: parser.ALLOW_REGISTERS", "DEL SimpleName: name", "DEL TextElement: Accesses properties of a bean using an expression.", "DEL TagElement", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Block", "DEL SimpleName: size", "DEL SimpleType: Expression", "DEL SimpleType: Object", "DEL SimpleName: reader", "DEL TextElement:  the property expression", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: entry", "DEL SimpleName: expression", "DEL ReturnStatement", "DEL SimpleName: value", "DEL TagElement: @link", "DEL ReturnStatement", "DEL IfStatement", "DEL PrimitiveType: void", "DEL SimpleType: Set", "DEL TagElement: @link", "DEL SimpleName: getMethod", "DEL TextElement: something meaningfull can still be inferred; may be convenient for configurations.", "DEL SimpleName: end", "DEL VariableDeclarationFragment", "DEL SimpleType: T", "DEL SimpleName: jjtGetChild", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: interpreter", "DEL SimpleName: Boolean", "DEL SimpleName: f", "DEL IfStatement", "DEL TextElement: myobject.getFoo().setBar(10); (or myobject.getFoo().put(\"bar\", 10) )", "DEL ParameterizedType: List<String>", "DEL PrefixExpression: !", "DEL NumberLiteral: 1", "DEL TagElement: @throws", "DEL TextElement: The default cache load factor.", "DEL QualifiedName: UberspectHolder.UBERSPECT", "DEL SimpleName: namedRegisters", "DEL SimpleName: clazz", "DEL NullLiteral", "DEL TextElement: Creates a JEXL engine using the provided ", "DEL FieldDeclaration", "DEL FieldAccess", "DEL SimpleName: tree", "DEL Block", "DEL MemberRef", "DEL SimpleType: Map", "DEL SimpleType: String", "DEL SimpleName: SoftReference", "DEL Block", "DEL SimpleName: logger", "DEL Dimension", "DEL BooleanLiteral: false", "DEL TagElement: @return", "DEL TypeLiteral", "DEL TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p>", "DEL InstanceofExpression", "DEL SimpleName: end", "DEL SimpleName: context", "DEL SimpleName: declareVariable", "DEL Modifier: static", "DEL SimpleName: tree", "DEL TextElement:  the cache size", "DEL NullLiteral", "DEL TextElement:  the bean to set properties in", "DEL Javadoc", "DEL SimpleName: jjtAccept", "DEL TagElement: @return", "DEL SimpleName: uberspect", "DEL SimpleName: invoke", "DEL SimpleName: IOException", "DEL ReturnStatement", "DEL TextElement: Creates an interpreter.", "DEL SimpleName: ref", "DEL SimpleName: frame", "DEL SimpleType: JexlException", "DEL MethodDeclaration", "DEL SimpleType: Uberspect", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: String", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement: </p>", "DEL VariableDeclarationStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: valueOf", "DEL TagElement", "DEL SimpleName: script", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL QualifiedName: JexlException.Tokenization", "DEL TextElement:  to be read.", "DEL TextElement:  the constructor arguments", "DEL TextElement: a corresponding array of arguments containing values should be used during evaluation.", "DEL MethodDeclaration", "DEL SimpleName: getFunctions", "DEL NullLiteral", "DEL TagElement: @param", "DEL BooleanLiteral: false", "DEL Assignment: =", "DEL SimpleType: BufferedReader", "DEL SimpleName: ctor", "DEL TagElement", "DEL ClassInstanceCreation", "DEL SimpleType: ExpressionImpl", "DEL SimpleName: set", "DEL SimpleName: f", "DEL SimpleType: DebugInfo", "DEL TextElement:  which can be executed using a ", "DEL FieldDeclaration", "DEL SimpleName: ASTJexlScript", "DEL Block", "DEL SimpleName: args", "DEL TagElement: @return", "DEL SimpleName: parms", "DEL SimpleType: K", "DEL SimpleName: xtme", "DEL SimpleName: ExpressionImpl", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL SimpleName: parser", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL ParenthesizedExpression", "DEL Block", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL VariableDeclarationFragment", "DEL SimpleName: info", "DEL SimpleType: Entry", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: entrySet", "DEL NumberLiteral: 0", "DEL TagElement: @param", "DEL SimpleName: cache", "DEL TagElement: @see", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: getCause", "DEL FieldAccess", "DEL SimpleType: Map", "DEL SimpleType: Exception", "DEL SimpleName: NullPointerException", "DEL SingleVariableDeclaration", "DEL SimpleName: createScript", "DEL SimpleType: BufferedReader", "DEL Modifier: private", "DEL SimpleType: DebugInfo", "DEL TagElement", "DEL SimpleType: String", "DEL TypeLiteral", "DEL SimpleName: setLenient", "DEL SimpleName: BufferedReader", "DEL VariableDeclarationFragment", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL SimpleName: Math", "DEL SimpleType: Script", "DEL SimpleName: Frame", "DEL SimpleName: K", "DEL ReturnStatement", "DEL TextElement: considered an error, the silent/verbose flag tells the engine what to do with the error", "DEL SimpleName: script", "DEL InfixExpression: &&", "DEL SimpleName: value", "DEL TextElement:  a JexlInfo instance", "DEL InfixExpression: >", "DEL SimpleName: stack", "DEL ThisExpression", "DEL SimpleName: script", "DEL SimpleName: logger", "DEL Block", "DEL Block", "DEL SimpleType: String", "DEL Dimension", "DEL Block", "DEL Modifier: public", "DEL SimpleName: arguments", "DEL TagElement: @return", "DEL ParameterizedType: List<String>", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: info", "DEL SynchronizedStatement", "DEL SimpleName: c", "DEL SimpleType: String", "DEL SimpleName: getValue", "DEL IfStatement", "DEL SimpleName: image", "DEL SimpleName: node", "DEL SimpleName: eldest", "DEL VariableDeclarationFragment", "DEL StringLiteral: \")\"", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL TextElement: expression nor a reference.", "DEL SimpleName: strict", "DEL TextElement: according to various error control needs. The lenient/strict flag tells the engine when and if null as operand is", "DEL SimpleName: Expression", "DEL InfixExpression: !=", "DEL SimpleName: ref", "DEL SimpleName: line", "DEL PrimitiveType: boolean", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL TextElement: .", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: getRegisters", "DEL TagElement", "DEL TagElement: @see", "DEL TextElement:  the parse AST tree", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL SimpleName: JexlContext", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Javadoc", "DEL InfixExpression: &&", "DEL TagElement", "DEL MethodDeclaration", "DEL ParameterizedType: Map<String,Integer>", "DEL ReturnStatement", "DEL SimpleName: p", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleName: JexlException", "DEL TextElement: An overridable through covariant return Script creator.", "DEL SimpleName: name", "DEL TagElement: @param", "DEL SimpleName: JexlException", "DEL NullLiteral", "DEL SimpleName: String", "DEL TryStatement", "DEL SimpleName: isStrict", "DEL Assignment: =", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: Script", "DEL SimpleName: LOAD_FACTOR", "DEL ExpressionStatement", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: JexlException", "DEL SimpleName: JexlInfo", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: xjexl", "DEL VariableDeclarationStatement", "DEL QualifiedName: Boolean.TRUE", "DEL MethodInvocation", "DEL SimpleName: createExpression", "DEL TextElement: <p>", "DEL PrimitiveType: int", "DEL SimpleName: V", "DEL Assignment: =", "DEL SimpleType: V", "DEL TagElement", "DEL TextElement: <p>", "DEL SimpleName: bean", "DEL SimpleName: registers", "DEL SimpleName: xjexl", "DEL MethodInvocation", "DEL SimpleName: doCreateInstance", "DEL Block", "DEL SimpleName: frame", "DEL MethodDeclaration", "DEL SimpleName: getRegister", "DEL Block", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: interpreter", "DEL TextElement: jexl.set(myobject, \"foo.bar\", 10); should equate to", "DEL SimpleType: String", "DEL SimpleName: parser", "DEL SingleVariableDeclaration", "DEL SimpleName: DebugInfo", "DEL SimpleType: JexlArithmetic", "DEL SimpleType: Map", "DEL ReturnStatement", "DEL TagElement: @return", "DEL Javadoc", "DEL Dimension", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleType: Map", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL SimpleName: isLenient", "DEL SimpleType: Object", "DEL SimpleType: Parser", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: List", "DEL TextElement:  to allow different introspection behaviour", "DEL ReturnStatement", "DEL SimpleName: frame", "DEL SimpleName: ctor", "DEL NumberLiteral: 0", "DEL PrimitiveType: boolean", "DEL TextElement:  containing valid JEXL syntax.", "DEL SimpleName: interpreter", "DEL PrefixExpression: ++", "DEL SimpleType: String", "DEL SimpleName: str", "DEL SimpleName: silent", "DEL Dimension", "DEL SimpleType: DebugInfo", "DEL TextElement:  an Interpreter", "DEL TagElement: @param", "DEL SimpleType: ASTReference", "DEL IfStatement", "DEL SimpleName: expr", "DEL SimpleType: StackTraceElement", "DEL SimpleName: scriptText", "DEL SimpleName: DebugInfo", "DEL SimpleType: String", "DEL InfixExpression: ==", "DEL SimpleName: strict", "DEL MethodDeclaration", "DEL SimpleName: scriptReader", "DEL InfixExpression: <=", "DEL SimpleName: frame", "DEL MethodInvocation", "DEL SimpleName: JexlInfo", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: createScript", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL TextElement: <p>The <code>setSilent</code> and <code>setLenient</code> methods allow to fine-tune an engine instance behavior", "DEL InfixExpression: &&", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SimpleType: Expression", "DEL ArrayAccess", "DEL ArrayCreation", "DEL SimpleName: ref", "DEL SimpleName: parse", "DEL SimpleName: register", "DEL Assignment: =", "DEL SimpleType: ArrayList", "DEL SimpleName: se", "DEL SimpleName: uberspect", "DEL BooleanLiteral: false", "DEL TextElement: <p>This gathers the class, method and line number of the first calling method", "DEL SimpleName: Object", "DEL SimpleName: namedRegisters", "DEL Block", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: IOException", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: K", "DEL ReturnStatement", "DEL SimpleName: ASTJexlScript", "DEL SimpleType: Set", "DEL SimpleName: ASTReference", "DEL SimpleName: method", "DEL SimpleName: varf", "DEL SimpleName: entrySet", "DEL Block", "DEL SimpleType: JexlException", "DEL SimpleName: getArithmetic", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL CastExpression", "DEL SimpleName: pa", "DEL NullLiteral", "DEL TagElement: @return", "DEL TextElement: This method parses the script which validates the syntax.", "DEL SimpleName: setLenient", "DEL TextElement:  the evaluation context", "DEL TextElement: <li>When \"verbose\" &amp; \"lenient\":", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL FieldDeclaration", "DEL SimpleName: obj", "DEL NullLiteral", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleType: UnifiedJEXL", "DEL SimpleName: StackTraceElement", "DEL ParameterizedType: Class<? extends T>", "DEL SimpleType: V", "DEL PrefixExpression: ++", "DEL SimpleName: xjexl", "DEL MethodInvocation", "DEL SimpleName: BufferedReader", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: reader", "DEL SimpleName: createInterpreter", "DEL InfixExpression: ==", "DEL SimpleName: context", "DEL Modifier: static", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL TextElement:  if there is an error parsing the expression or during evaluation", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleType: String", "DEL TextElement: A script scope, stores the declaration of parameters and local variables.", "DEL TagElement: @param", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: entrySet", "DEL SimpleType: JexlThreadedArithmetic", "DEL SimpleType: Integer", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: Object", "DEL BooleanLiteral: true", "DEL SimpleName: JexlContext", "DEL TextElement: <p>This is lazily initialized to avoid building a default instance if there", "DEL SimpleName: strictFlag", "DEL SimpleName: uberspect", "DEL ReturnStatement", "DEL TagElement: @return", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: Map", "DEL TagElement: @return", "DEL TextElement: methods; an expression like 'nsx:method(123)' will thus be solved by looking at", "DEL SimpleName: functions", "DEL SimpleType: StringBuilder", "DEL Assignment: =", "DEL SimpleName: name", "DEL InfixExpression: ==", "DEL SimpleName: child", "DEL PrimitiveType: int", "DEL TextElement: Whether expressions evaluated by this engine will throw exceptions (false) or ", "DEL SimpleName: arguments", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: expr", "DEL SimpleName: ASTIdentifier", "DEL IfStatement", "DEL SimpleType: ASTJexlScript", "DEL SimpleName: scriptText", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TagElement: @return", "DEL PrimitiveType: void", "DEL IfStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: info", "DEL SimpleName: clazz", "DEL TagElement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL TextElement:  A ", "DEL SimpleName: loader", "DEL Modifier: public", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL TextElement:  if method could not be found or failed and engine is not silent", "DEL SimpleName: refs", "DEL SimpleType: String", "DEL SimpleName: Scope", "DEL SimpleName: createScript", "DEL SimpleName: theFunctions", "DEL SimpleName: context", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL Block", "DEL MethodInvocation", "DEL Modifier: public", "DEL TagElement", "DEL TextElement: The map of named registers aka script parameters.", "DEL SimpleName: reader", "DEL TagElement", "DEL TextElement: Creates a Script from a ", "DEL NullLiteral", "DEL TextElement: not owned by JexlEngine, UnifiedJEXL or {Script,Expression}Factory.</p>", "DEL QualifiedName: Map.Entry", "DEL IfStatement", "DEL SimpleName: clazz", "DEL SimpleName: StringBuilder", "DEL SimpleType: Frame", "DEL SimpleName: narrowArguments", "DEL MethodInvocation", "DEL NullLiteral", "DEL ArrayType: String[]", "DEL SimpleName: scriptReader", "DEL SimpleType: String", "DEL SimpleName: cache", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: expression", "DEL SimpleType: JexlInfo", "DEL TextElement: RuntimeException, user-code <em>should</em> catch them wherever most appropriate.", "DEL IfStatement", "DEL SimpleName: script", "DEL TextElement: .", "DEL TextElement: The cache size.", "DEL TextElement:  the number of parameters", "DEL InfixExpression: <", "DEL SimpleName: createFrame", "DEL SimpleType: Map", "DEL SimpleName: String", "DEL Javadoc", "DEL FieldDeclaration", "DEL TextElement: Creates a Script from a String containing valid JEXL syntax.", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleType: Set", "DEL TextElement: Creates a cache.", "DEL Block", "DEL SimpleType: Integer", "DEL SimpleName: parameters", "DEL SimpleName: theSize", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement: Note that methods that evaluate expressions may throw <em>unchecked</em> exceptions;", "DEL VariableDeclarationStatement", "DEL SimpleName: p", "DEL Block", "DEL Block", "DEL BreakStatement", "DEL SimpleName: context", "DEL TextElement: parsing this expression, or if the expression is neither an", "DEL SimpleName: scriptFile", "DEL SimpleName: expression", "DEL SimpleName: debug", "DEL SimpleType: V", "DEL Block", "DEL SimpleName: c", "DEL SimpleName: reader", "DEL SimpleName: serialVersionUID", "DEL SimpleType: ASTJexlScript", "DEL Dimension", "DEL SimpleType: IOException", "DEL SimpleType: String", "DEL SimpleName: parser", "DEL SimpleName: ParseException", "DEL SimpleName: var", "DEL Javadoc", "DEL SimpleName: toString", "DEL TagElement", "DEL SimpleName: tree", "DEL InstanceofExpression", "DEL SimpleName: info", "DEL ReturnStatement", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Dimension", "DEL SimpleName: String", "DEL SimpleName: NullPointerException", "DEL TextElement: <p>Implemented as on demand holder idiom.</p>", "DEL SimpleName: Log", "DEL Modifier: protected", "DEL SimpleType: JexlInfo", "DEL SimpleName: Object", "DEL SimpleType: DebugInfo", "DEL SimpleName: V", "DEL SingleVariableDeclaration", "DEL SimpleName: var", "DEL ThrowStatement", "DEL SimpleName: i", "DEL ClassInstanceCreation", "DEL TextElement: Gets this script local variable, i.e. registers assigned to local variables.", "DEL TextElement: </p>", "DEL SimpleName: l", "DEL Block", "DEL SimpleName: jjtGetChild", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: result", "DEL TextElement:  A ", "DEL TextElement:  if there is a problem parsing the script.", "DEL ConditionalExpression", "DEL VariableDeclarationExpression", "DEL Javadoc", "DEL SimpleName: Object", "DEL TextElement: >", "DEL VariableDeclarationFragment", "DEL TextElement:  line number", "DEL Block", "DEL ClassInstanceCreation", "DEL TagElement: @link", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL CastExpression", "DEL Javadoc", "DEL SimpleName: intValue", "DEL SimpleName: File", "DEL SimpleName: String", "DEL SimpleName: start", "DEL SimpleName: ctor", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: end", "DEL SimpleName: String", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL TextElement: </p>", "DEL ReturnStatement", "DEL StringLiteral: \".\"", "DEL SimpleName: args", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL ParameterizedType: List<String>", "DEL SimpleName: UnifiedJEXL", "DEL ReturnStatement", "DEL SimpleName: ExpressionImpl", "DEL SimpleName: xjexl", "DEL QualifiedName: Boolean.FALSE", "DEL QualifiedName: child.image", "DEL Modifier: protected", "DEL TagElement", "DEL Assignment: =", "DEL MemberRef", "DEL TagElement: @throws", "DEL SimpleName: name", "DEL SimpleName: String", "DEL SimpleName: JexlNode", "DEL ParenthesizedExpression", "DEL SimpleName: parms", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: JexlEngine", "DEL TagElement: @return", "DEL ArrayAccess", "DEL TagElement: @return", "DEL SimpleType: K", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL MethodInvocation", "DEL TextElement: The soft reference to the cache map.", "DEL MethodInvocation", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL SimpleName: frame", "DEL TagElement", "DEL SimpleName: clear", "DEL TextElement: <p>", "DEL ClassInstanceCreation", "DEL SimpleType: Interpreter", "DEL SingleVariableDeclaration", "DEL TextElement: <p>This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine", "DEL SimpleName: ASTReference", "DEL SimpleType: ASTJexlScript", "DEL TextElement: </li>", "DEL SimpleName: debugInfo", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL TextElement: Sets the map of function namespaces.", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlEngine", "DEL Modifier: final", "DEL ArrayType: String[]", "DEL TagElement: @param", "DEL SimpleName: getMethodName", "DEL SimpleType: Interpreter", "DEL NullLiteral", "DEL TagElement: @param", "DEL SimpleName: desc", "DEL SimpleName: namedRegisters", "DEL Block", "DEL SimpleType: Uberspect", "DEL MethodInvocation", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: var", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL SimpleName: expression", "DEL NullLiteral", "DEL SimpleName: Interpreter", "DEL SimpleName: setSilent", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL TagElement", "DEL SimpleName: var", "DEL SimpleName: cleanExpression", "DEL TagElement", "DEL SimpleType: String", "DEL TextElement: </p>", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: Log", "DEL SimpleName: script", "DEL TextElement:  whether the interpreter runs in strict mode", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL TextElement:  the value of the property", "DEL SimpleType: String", "DEL TextElement: Creates an Expression from a String containing valid", "DEL SimpleType: String", "DEL TextElement: <p>This method should be called as an optional step of the JexlEngine", "DEL SimpleName: add", "DEL SimpleType: LinkedHashMap", "DEL TagElement: @link", "DEL SimpleName: str", "DEL SimpleName: end", "DEL SimpleName: script", "DEL Block", "DEL TextElement: This method parses the script and validates the syntax.", "DEL NullLiteral", "DEL ExpressionStatement", "DEL TextElement:  if not strictly positive, no cache is used.", "DEL PrimitiveType: int", "DEL SimpleType: JexlException", "DEL ParenthesizedExpression", "DEL TextElement: <", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL Assignment: =", "DEL Block", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL SimpleName: Interpreter", "DEL ThrowStatement", "DEL SimpleType: String", "DEL SimpleName: xany", "DEL TextElement: The ", "DEL SimpleName: Object", "DEL SimpleName: Integer", "DEL SimpleName: LogFactory", "DEL InfixExpression: <", "DEL TextElement: <p>The finest error control grain is obtained; it is the closest to Java code -", "DEL TagElement: @return", "DEL SimpleName: ArrayList", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL Modifier: final", "DEL SimpleName: getInputStream", "DEL SimpleName: append", "DEL TextElement: top-level user defined functions ( ie: myfunc(...) )", "DEL SimpleName: createExpression", "DEL SimpleName: tree", "DEL TextElement: Whether error messages will carry debugging information.", "DEL ForStatement", "DEL InfixExpression: !=", "DEL ParameterizedType: Set<List<String>>", "DEL MethodInvocation", "DEL SimpleName: map", "DEL VariableDeclarationStatement", "DEL SimpleType: ExpressionImpl", "DEL TextElement: Fills up the list of variables accessed by a node.", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: names", "DEL SimpleName: text", "DEL Block", "DEL SimpleName: di", "DEL ExpressionStatement", "DEL SimpleName: cacheSize", "DEL Block", "DEL Modifier: protected", "DEL TagElement: @param", "DEL SimpleType: JexlException.Tokenization", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleName: K", "DEL SimpleName: map", "DEL Javadoc", "DEL SimpleName: key", "DEL TagElement", "DEL SimpleType: Object", "DEL NullLiteral", "DEL SimpleName: get", "DEL ReturnStatement", "DEL SimpleName: setLenient", "DEL SimpleName: JexlEngine", "DEL SimpleName: Boolean", "DEL TagElement: @param", "DEL InstanceofExpression", "DEL TextElement: <p>This method will visit all nodes of a script and extract all variables whether they", "DEL InfixExpression: !=", "DEL TagElement: @param", "DEL TagElement", "DEL TextElement:  An info structure to carry debugging information if needed", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TagElement: @see", "DEL SimpleName: List", "DEL TagElement", "DEL SimpleType: Script", "DEL SingleVariableDeclaration", "DEL Block", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: getMessage", "DEL TagElement", "DEL SimpleName: IOException", "DEL SimpleName: isLenient", "DEL SingleVariableDeclaration", "DEL SimpleName: Collections", "DEL SimpleName: flag", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: get", "DEL NumberLiteral: 0", "DEL SimpleName: Expression", "DEL TextElement:  the class loader to use", "DEL SimpleName: info", "DEL SimpleName: script", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL Block", "DEL TextElement:  the registers", "DEL VariableDeclarationFragment", "DEL TagElement: @link", "DEL SimpleName: URL", "DEL Modifier: public", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SimpleType: ClassLoader", "DEL SimpleName: JexlException", "DEL NullLiteral", "DEL SimpleName: createCache", "DEL MethodInvocation", "DEL TextElement: <p>This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine", "DEL SimpleName: FileReader", "DEL TextElement:  the constructor arguments", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: setFrame", "DEL MethodDeclaration", "DEL SimpleName: refs", "DEL SimpleName: getVariables", "DEL TagElement", "DEL TextElement: Each parameter is associated to a register and is materialized as an offset in the registers array used", "DEL SimpleType: JexlNode", "DEL ParenthesizedExpression", "DEL TagElement: @return", "DEL Modifier: private", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: UBERSPECT", "DEL ArrayType: String[]", "DEL SimpleType: SoftReference", "DEL SimpleName: Object", "DEL SimpleName: equals", "DEL TextElement: myobject.getFoo().getBar(); (or myobject.getFoo().get(\"bar\"))", "DEL Modifier: protected", "DEL TagElement: @param", "DEL SimpleName: className", "DEL TagElement", "DEL SimpleName: desc", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL SimpleName: functions", "DEL SimpleName: LinkedHashMap", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: bean", "DEL TryStatement", "DEL SimpleName: method", "DEL SimpleName: JexlNode", "DEL SimpleName: scriptText", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL WhileStatement", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL WildcardType: ?", "DEL SimpleName: append", "DEL SimpleName: Object", "DEL TextElement:  if there is a problem parsing the script.", "DEL SimpleName: di", "DEL InfixExpression: <", "DEL TextElement:  the cache size, must be > 0", "DEL IfStatement", "DEL SimpleName: removeEldestEntry", "DEL SimpleType: Entry", "DEL ExpressionStatement", "DEL Javadoc", "DEL TextElement: can be used to workaround exceptional cases.", "DEL TextElement: be able to use a (low level) introspector created with a given logger", "DEL Javadoc", "DEL SimpleName: info", "DEL SimpleName: min", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL TextElement:  true means no JexlException will occur, false allows them", "DEL SimpleName: pa", "DEL SimpleName: context", "DEL ThisExpression", "DEL SimpleName: toArray", "DEL SimpleType: ASTReference", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL SimpleName: registers", "DEL Modifier: protected", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL TagElement: @return", "DEL SimpleName: xjexl", "DEL PrimitiveType: int", "DEL SimpleName: bean", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: Map", "DEL SimpleName: num", "DEL SimpleName: scriptUrl", "DEL SimpleType: V", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL TextElement: must contain either a reference or an expression.", "DEL FieldAccess", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleType: NullPointerException", "DEL MethodDeclaration", "DEL SimpleName: info", "DEL VariableDeclarationStatement", "DEL SimpleName: xjexl", "DEL TextElement: </p>", "DEL SimpleName: namedRegisters", "DEL Block", "DEL ExpressionStatement", "DEL Block", "DEL ArrayType: StackTraceElement[]", "DEL ThisExpression", "DEL InfixExpression: ||", "DEL SimpleName: String", "DEL TextElement: This method creates an new entry in the named register map.", "DEL PrefixExpression: !", "DEL VariableDeclarationFragment", "DEL TextElement:  the script parameter names", "DEL Modifier: public", "DEL Modifier: protected", "DEL ConditionalExpression", "DEL SimpleName: silentFlag", "DEL SimpleName: canRead", "DEL ExpressionStatement", "DEL Assignment: =", "DEL TextElement:  the script text", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL ConditionalExpression", "DEL TagElement", "DEL TextElement:  the parameters which may be empty (but not null) if no parameters were defined", "DEL SimpleName: K", "DEL ParameterizedType: LinkedHashMap<String,Integer>", "DEL Modifier: protected", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleType: T", "DEL Assignment: =", "DEL Block", "DEL StringLiteral: \";\"", "DEL SimpleName: getArgCount", "DEL NumberLiteral: 0", "DEL TagElement: @return", "DEL SimpleName: size", "DEL TypeDeclaration: class", "DEL TextElement: derived instances to call methods on the wrapped object.</p>", "DEL Block", "DEL TextElement:  which can be executed with a", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: ASTJexlScript", "DEL SimpleType: K", "DEL SimpleName: arithmetic", "DEL QualifiedName: frame.namedRegisters", "DEL IfStatement", "DEL WhileStatement", "DEL CatchClause", "DEL ArrayType: Object[]", "DEL TagElement", "DEL MarkerAnnotation", "DEL InfixExpression: +", "DEL Modifier: public", "DEL Block", "DEL QualifiedName: Map.Entry", "DEL SimpleType: ExpressionImpl", "DEL TextElement: Creates a new instance of a soft cache.", "DEL SimpleName: isSilent", "DEL SimpleName: start", "DEL SimpleName: EMPTY_CONTEXT", "DEL TagElement", "DEL BooleanLiteral: false", "DEL SingleVariableDeclaration", "DEL SimpleName: result", "DEL TextElement:  the script", "DEL SimpleName: JexlEngine", "DEL SimpleName: setProperty", "DEL SimpleName: s", "DEL SimpleName: args", "DEL VariableDeclarationStatement", "DEL SimpleName: cache", "DEL TagElement", "DEL TextElement: initialization code before expression creation &amp; evaluation.</p>", "DEL InfixExpression: >=", "DEL TextElement: Creates an engine with default arguments.", "DEL MethodInvocation", "DEL SimpleName: cacheSize", "DEL ReturnStatement", "DEL SimpleType: ASTJexlScript", "DEL ParameterizedType: List<String>", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL TagElement", "DEL TagElement: @param", "DEL TextElement: return null (true) on errors. Default is false.", "DEL SimpleType: Uberspect", "DEL MethodDeclaration", "DEL SimpleName: pa", "DEL TextElement: Trims the expression from front & ending spaces.", "DEL ContinueStatement", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL TextElement: Produces the cache entry set.", "DEL SimpleName: getValue", "DEL Block", "DEL SimpleName: String", "DEL ConditionalExpression", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL NumberLiteral: 0", "DEL SimpleName: functions", "DEL MethodDeclaration", "DEL SimpleName: EMPTY_CONTEXT", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL PrimitiveType: float", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: anUberspect", "DEL SimpleName: map", "DEL TagElement: @param", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: xjexl", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement: <p>", "DEL SimpleName: line", "DEL SimpleName: uberspect", "DEL SimpleType: BufferedReader", "DEL TextElement: still augmented by \"script\" capabilities regarding automated conversions & type matching.", "DEL NullLiteral", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL TextElement:  the expression to parse", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleName: JexlEngine", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL ParameterizedType: Entry<K,V>", "DEL InfixExpression: !=", "DEL TagElement: @link", "DEL PrimitiveType: void", "DEL SimpleType: ExpressionImpl", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL Javadoc", "DEL TextElement:  the parameters", "DEL SimpleName: getName", "DEL MethodDeclaration", "DEL SimpleName: register", "DEL TagElement: @return", "DEL NumberLiteral: 0", "DEL Block", "DEL TextElement: Creates a Script from a String containing valid JEXL syntax.", "DEL FieldDeclaration", "DEL SimpleName: parms", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement: Assign properties of a bean using an expression.", "DEL SimpleName: theSize", "DEL SimpleName: entry", "DEL TextElement: <p>This is lazily initialized to avoid building a default instance if there", "DEL SimpleName: JexlException", "DEL SingleVariableDeclaration", "DEL SimpleName: createFrame", "DEL SimpleName: di", "DEL Modifier: public", "DEL TextElement: Accesses properties of a bean using an expression.", "DEL TagElement: @param", "DEL ConditionalExpression", "DEL SimpleName: ASTIdentifier", "DEL TextElement:  the script frame to use", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL FieldAccess", "DEL IfStatement", "DEL TextElement:  the arithmetic", "DEL VariableDeclarationStatement", "DEL TagElement: @see", "DEL SimpleName: array", "DEL SimpleName: namedRegisters", "DEL SimpleName: readerToString", "DEL SimpleType: JexlNode", "DEL SimpleName: silent", "DEL SimpleName: context", "DEL Block", "DEL SimpleName: expression", "DEL TextElement: a registered bean named 'nsx' that implements method 'method' in that map.", "DEL ParameterizedType: Map<K,V>", "DEL Modifier: final", "DEL TagElement: @param", "DEL TextElement:  the evaluation context", "DEL SimpleType: String", "DEL InstanceofExpression", "DEL TagElement: @param", "DEL SimpleName: anUberspect", "DEL Block", "DEL Dimension", "DEL SimpleName: className", "DEL TextElement:  debug information structure", "DEL SimpleName: node", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: scriptReader", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: JexlInfo", "DEL ReturnStatement", "DEL SimpleType: String", "DEL InfixExpression: >", "DEL Modifier: final", "DEL SimpleType: Class", "DEL NullLiteral", "DEL TextElement:  the parameter names", "DEL SimpleType: V", "DEL NullLiteral", "DEL SimpleName: parse", "DEL MethodInvocation", "DEL SimpleName: SoftCache", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleType: Map.Entry", "DEL SimpleName: JexlContext", "DEL TextElement:  A ", "DEL SimpleName: refs", "DEL SimpleName: String", "DEL QualifiedName: child.image", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL SimpleType: JexlNode", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleName: uberspect", "DEL TextElement:  the property expression", "DEL QualifiedName: parser.ALLOW_REGISTERS", "DEL SimpleName: meth", "DEL SimpleType: Map", "DEL SimpleName: debug", "DEL SimpleName: getProperty", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: ASTJexlScript", "DEL StringLiteral: \"failed finding constructor for \"", "DEL SimpleName: scriptUrl", "DEL SimpleName: debugInfo", "DEL Javadoc", "DEL PrimitiveType: int", "DEL TextElement:  on any error reading the reader.", "DEL TagElement", "DEL SimpleName: child", "DEL SimpleName: JexlContext", "DEL SimpleName: getMessage", "DEL SimpleName: createExpression", "DEL ConditionalExpression", "DEL SimpleName: Object", "DEL SimpleType: Integer", "DEL TextElement: <p>One should probably consider using null as an error case - ie, every object", "DEL ReturnStatement", "DEL TextElement: <", "DEL SimpleName: openConnection", "DEL TagElement", "DEL SimpleName: equals", "DEL SimpleName: put", "DEL TagElement", "DEL InfixExpression: &&", "DEL PrimitiveType: void", "DEL ClassInstanceCreation", "DEL TextElement:  the created object instance or null on failure when silent", "DEL SimpleName: JexlEngine", "DEL TextElement: manipulated by JEXL should be valued; the ternary operator, especially the '?:' form", "DEL Block", "DEL Block", "DEL TextElement: .", "DEL SimpleName: var", "DEL SimpleName: Script", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL SimpleName: expr", "DEL Block", "DEL SimpleType: Object", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL TextElement: <p>", "DEL SimpleName: reader", "DEL SimpleName: value", "DEL SimpleName: subSequence", "DEL TextElement:  a JexlContext; if null, the EMPTY_CONTEXT is used instead.", "DEL Modifier: public", "DEL SimpleName: obj", "DEL SimpleName: Object", "DEL QualifiedName: desc.image", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: K", "DEL SimpleName: ref", "DEL SimpleName: script", "DEL NullLiteral", "DEL Block", "DEL SimpleName: URL", "DEL NumberLiteral: 0", "DEL Block", "DEL Modifier: public", "DEL SimpleName: parms", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: str", "DEL NullLiteral", "DEL MethodDeclaration", "DEL TextElement: >", "DEL SimpleName: p", "DEL SimpleName: args", "DEL NullLiteral", "DEL ThisExpression", "DEL SimpleName: p", "DEL SimpleName: clazz", "DEL TextElement: Creates a JexlInfo instance.", "DEL Modifier: public", "DEL Block", "DEL SimpleName: script", "DEL SimpleName: clazz", "DEL Modifier: public", "DEL SimpleName: ASTJexlScript", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL InfixExpression: ==", "DEL Javadoc", "DEL SimpleName: value", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: EMPTY_CONTEXT", "DEL NumberLiteral: 0", "DEL SimpleName: anArithmetic", "DEL Javadoc", "DEL ConditionalExpression", "DEL SimpleName: UberspectImpl", "DEL Javadoc", "DEL TextElement:  column number", "DEL SimpleName: expr", "DEL NumberLiteral: 0", "DEL TextElement:  the uberspect", "DEL Modifier: final", "DEL TextElement: instead of the default one.</p>", "DEL Javadoc", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL SimpleName: getLog", "DEL TextElement: <li>When \"verbose\" &amp; \"strict\":", "DEL SimpleName: Script", "DEL SimpleName: SoftReference", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL InfixExpression: ==", "DEL TextElement:  the class to instantiate", "DEL SimpleName: Integer", "DEL SimpleType: Interpreter", "DEL SimpleName: K", "DEL SimpleName: tree", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: V", "DEL SimpleType: Object", "DEL SimpleName: namedRegisters", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleType: JexlEngine", "DEL TextElement:  which can be executed using a ", "DEL SimpleName: getStackTrace", "DEL SimpleName: script", "DEL SimpleType: ASTJexlScript", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: parser", "DEL MethodInvocation", "DEL SimpleName: parser", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL TagElement: @return", "DEL Block", "DEL SimpleName: add", "DEL SimpleName: Scope", "DEL TextElement: is no use for it. The main reason for not using the default Uberspect instance is to", "DEL SimpleName: Script", "DEL TextElement:  the script parameter names", "DEL SimpleName: JexlArithmetic", "DEL SimpleType: List", "DEL TextElement: based on the arguments.", "DEL TextElement: all JEXL caches are held through SoftReferences and may be garbage-collected.</p>", "DEL SimpleName: className", "DEL SimpleName: getLog", "DEL NullLiteral", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: xany", "DEL SimpleName: SoftCache", "DEL SimpleName: parameters", "DEL TextElement: </p>", "DEL SimpleType: Object", "DEL SimpleType: BufferedReader", "DEL InfixExpression: !=", "DEL TextElement:  the set of variable being filled", "DEL SimpleName: arithmetic", "DEL TypeParameter", "DEL PostfixExpression: ++", "DEL ThisExpression", "DEL StringLiteral: \"\"", "DEL ExpressionStatement", "DEL NullLiteral", "DEL TextElement: Creates and evaluates Expression and Script objects.", "DEL TextElement: Clears the expression cache.", "DEL Assignment: =", "DEL SimpleType: InputStreamReader", "DEL Modifier: public", "DEL TextElement: Creates an interpreter.", "DEL SimpleName: parameters", "DEL SimpleName: anUberspect", "DEL SimpleName: theFunctions", "DEL Block", "DEL Block", "DEL SimpleName: Throwable", "DEL TagElement", "DEL Assignment: =", "DEL TextElement: initialization code before expression creation &amp; evaluation.</p>", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL SimpleName: parms", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: fn", "DEL SimpleName: loader", "DEL Block", "DEL SimpleType: Throwable", "DEL MethodInvocation", "DEL ArrayCreation", "DEL SimpleName: getMessage", "DEL SimpleName: flag", "DEL SimpleName: getName", "DEL SimpleType: Exception", "DEL Modifier: public", "DEL SimpleName: reader", "DEL SimpleName: size", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: List", "DEL CharacterLiteral: ' '", "DEL SimpleName: flag", "DEL SimpleName: expression", "DEL SimpleName: num", "DEL SimpleName: Scope", "DEL StringLiteral: \"scriptFile is null\"", "DEL PrimitiveType: int", "DEL SimpleName: context", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL SimpleName: scriptText", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: interpreter", "DEL TagElement: @param", "DEL SimpleName: logger", "DEL ExpressionStatement", "DEL SimpleName: p", "DEL StringLiteral: \"failed executing method \"", "DEL Modifier: protected", "DEL NumberLiteral: 0", "DEL SimpleName: Scope", "DEL SimpleName: Object", "DEL SimpleName: debug", "DEL SimpleName: put", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: parse", "DEL SimpleType: Scope", "DEL SimpleType: StringReader", "DEL Modifier: public", "DEL TextElement: The singleton ExpressionFactory also holds a single instance of", "DEL VariableDeclarationExpression", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL SimpleName: xjexl", "DEL VariableDeclarationStatement", "DEL SimpleName: xjexl", "DEL Assignment: =", "DEL TagElement: @param", "DEL SimpleType: String", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL SimpleName: ref", "DEL TextElement: </p>", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleType: IOException", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL SimpleName: Scope", "DEL SimpleName: clazz", "DEL SimpleName: String", "DEL SimpleName: toString", "DEL SimpleType: String", "DEL SimpleName: dbgInfo", "DEL Block", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleType: K", "DEL SimpleName: Map", "DEL MethodDeclaration", "DEL SimpleName: getVariables", "DEL SimpleName: get", "DEL SimpleName: arithmetic", "DEL SimpleName: expression", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL Dimension", "DEL SimpleName: dbgInfo", "DEL NumberLiteral: 1", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: to carry the information used by the namespace to avoid variable space pollution and strongly type", "DEL ArrayType: String[]", "DEL SimpleName: expr", "DEL TextElement: Puts a value in cache.", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL TextElement:  an Info if debug is set, null otherwise", "DEL SimpleName: Object", "DEL SimpleName: o", "DEL ReturnStatement", "DEL TextElement: Sets whether this engine behaves in strict or lenient mode.", "DEL TypeLiteral", "DEL InfixExpression: +", "DEL SimpleName: String", "DEL SimpleName: info", "DEL InfixExpression: ==", "DEL WildcardType: ? extends T", "DEL TextElement: If the prefix is null, the namespace is the top-level namespace allowing to define", "DEL SimpleType: URL", "DEL SimpleType: Map", "DEL VariableDeclarationFragment", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL StringLiteral: \"\\\" \"", "DEL MethodInvocation", "DEL SimpleName: UnsupportedOperationException", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: map", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: setFrame", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: add", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL TagElement: @param", "DEL Block", "DEL Modifier: public", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: i", "DEL SimpleType: URLConnection", "DEL SimpleType: K", "DEL TextElement: The Uberspect instance.", "DEL InfixExpression: !=", "DEL SimpleType: JexlException", "DEL PrimitiveType: long", "DEL SimpleName: tree", "DEL ReturnStatement", "DEL TagElement: @return", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL Modifier: protected", "DEL Block", "DEL SimpleType: Script", "DEL Block", "DEL NullLiteral", "DEL SimpleType: Integer", "DEL VariableDeclarationStatement", "DEL SimpleName: namedRegisters", "DEL InfixExpression: >", "DEL ParameterizedType: java.util.LinkedHashMap<K,V>", "DEL InfixExpression: ==", "DEL SimpleName: xany", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: JexlThreadedArithmetic", "DEL SimpleName: className", "DEL IfStatement", "DEL SimpleName: Script", "DEL Modifier: public", "DEL Block", "DEL TextElement: The key or prefix allows to retrieve the bean that plays the role of the namespace.", "DEL MethodDeclaration", "DEL SimpleType: ASTJexlScript", "DEL SimpleName: child", "DEL Modifier: public", "DEL SimpleType: ParseException", "DEL SimpleName: Script", "DEL FieldAccess", "DEL StringLiteral: \";\"", "DEL TextElement: during evaluation.", "DEL Javadoc", "DEL SimpleName: names", "DEL Block", "DEL SimpleName: JexlException", "DEL InfixExpression: !=", "DEL TagElement: @param", "DEL SimpleType: String", "DEL SimpleName: K", "DEL TextElement: Creates a new scope with a list of parameters.", "DEL Block", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: log", "DEL TagElement", "DEL SimpleName: args", "DEL Block", "DEL SimpleName: JexlArithmetic", "DEL MethodDeclaration", "DEL SimpleName: ExpressionImpl", "DEL Modifier: protected", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TextElement: Checks whether this engine throws JexlException during evaluation.", "DEL Assignment: =", "DEL SimpleName: clazz", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Script", "DEL SimpleName: ClassLoader", "DEL NullLiteral", "DEL BooleanLiteral: false", "DEL SimpleName: i", "DEL SimpleName: charAt", "DEL ParameterizedType: ArrayList<String>", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL TextElement: <li>When \"silent\" &amp; \"strict\":", "DEL TagElement: @param", "DEL SimpleName: info", "DEL Javadoc", "DEL ParameterizedType: Map<String,Object>", "DEL TextElement: instead of the default one.</p>", "DEL TextElement:  containing valid JEXL syntax.", "DEL SimpleType: ExpressionImpl", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: namedRegisters", "DEL SimpleName: Integer", "DEL NullLiteral", "DEL SimpleType: ASTJexlScript", "DEL IfStatement", "DEL SimpleType: Object", "DEL SimpleName: xjexl", "DEL SimpleType: JexlArithmetic", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: entry", "DEL SimpleName: info", "DEL MethodInvocation", "DEL Block", "DEL TextElement:  An info structure to carry debugging information if needed", "DEL TextElement: </ul>", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: info", "DEL SimpleName: strictFlag", "DEL SimpleName: script", "DEL SimpleName: Scope", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL Dimension", "DEL Block", "DEL SimpleName: LinkedHashMap", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodInvocation", "DEL Modifier: final", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL InfixExpression: ^", "DEL TextElement: </li>", "DEL NumberLiteral: 1", "DEL TagElement: @return", "DEL TextElement: initialization code before expression creation &amp; evaluation.", "DEL SimpleName: String", "DEL TagElement: @link", "DEL SimpleName: Scope", "DEL TextElement:  true for strict, false for lenient", "DEL SimpleType: String", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: reference", "DEL SimpleType: String", "DEL Block", "DEL QualifiedName: stack.length", "DEL TextElement: the constructor with this specialized JexlContext.", "DEL SimpleName: keySet", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: logger", "DEL Assignment: =", "DEL Block", "DEL SimpleName: clazz", "DEL SimpleName: frame", "DEL TextElement:  to allow different arithmetic behaviour", "DEL ThrowStatement", "DEL SimpleType: Object", "DEL SimpleName: child", "DEL TextElement: Gets this engine underlying uberspect.", "DEL TextElement:  if there is a problem reading the script.", "DEL Modifier: protected", "DEL TagElement", "DEL SimpleName: Object", "DEL SimpleName: node", "DEL TextElement: Gets the list of variables accessed by a script.", "DEL TextElement: <li>Logging</li>", "DEL SimpleName: setProperty", "DEL VariableDeclarationStatement", "DEL Block", "DEL TextElement: Assign properties of a bean using an expression.", "DEL Assignment: =", "DEL TextElement:  the cache entry value", "DEL SimpleType: String", "DEL Assignment: =", "DEL ParameterizedType: Map<K,V>", "DEL SimpleName: map", "DEL SimpleName: flag", "DEL FieldDeclaration", "DEL SimpleName: get", "DEL SimpleName: parms", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL TextElement:  Uberspect the default uberspector instance.", "DEL TagElement: @param", "DEL SimpleName: createScript", "DEL Javadoc", "DEL SimpleName: key", "DEL TagElement: @param", "DEL SimpleName: createInterpreter", "DEL MethodDeclaration", "DEL SimpleName: charAt", "DEL ExpressionStatement", "DEL TagElement: @link", "DEL Block", "DEL TextElement:  the contents of the reader as a String.", "DEL SimpleName: uberspect", "DEL SimpleName: SoftCache", "DEL NullLiteral", "DEL SimpleName: getCause", "DEL ConditionalExpression", "DEL SimpleName: K", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL ConditionalExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: charAt", "DEL SimpleName: args", "DEL MethodDeclaration", "DEL TryStatement", "DEL SimpleName: info", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: names", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: createScript", "DEL Block", "DEL SimpleName: refs", "DEL Block", "DEL SimpleName: anArithmetic", "DEL SimpleName: getUberspect", "DEL SimpleName: script", "DEL SimpleName: List", "DEL SimpleName: scriptFile", "DEL TextElement: This method parses the script which validates the syntax.", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL SimpleName: size", "DEL TextElement: A call frame, created from a scope, stores the arguments and local variables as \"registers\".", "DEL MethodInvocation", "DEL Modifier: final", "DEL MethodDeclaration", "DEL TextElement:  which can be executed using a ", "DEL SimpleName: isLenient", "DEL NumberLiteral: 1", "DEL SimpleType: JexlInfo", "DEL TextElement: <ul>", "DEL ClassInstanceCreation", "DEL SimpleName: method", "DEL CharacterLiteral: '['", "DEL SimpleName: emptyMap", "DEL Assignment: =", "DEL SimpleName: LOAD_FACTOR", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: stack", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleName: Interpreter", "DEL SimpleName: Script", "DEL ArrayType: String[]", "DEL TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: script", "DEL SimpleName: String", "DEL ContinueStatement", "DEL Block", "DEL SimpleName: silent", "DEL TagElement", "DEL SimpleName: meth", "DEL VariableDeclarationStatement", "DEL SimpleName: V", "DEL TagElement: @return", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Class<?>", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL TextElement:  the script instance", "DEL SimpleName: script", "DEL Javadoc", "DEL SimpleName: frame", "DEL SimpleName: V", "DEL Block", "DEL Modifier: public", "DEL SimpleName: var", "DEL Block", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"#0\"", "DEL SimpleName: Object", "DEL Modifier: public", "DEL NullLiteral", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleType: Script", "DEL SimpleName: getName", "DEL TagElement: @param", "DEL SimpleName: get", "DEL PrimitiveType: int", "DEL SimpleName: warn", "DEL IfStatement", "DEL TextElement: <p>This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine", "DEL InfixExpression: <", "DEL TextElement: Clears the cache.", "DEL SimpleName: fn", "DEL SimpleName: buffer", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TextElement: .", "DEL SimpleName: expr", "DEL SimpleName: frame", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: JexlException", "DEL Modifier: public", "DEL SimpleName: expression", "DEL SimpleName: args", "DEL MethodInvocation", "DEL SimpleName: ASTIdentifier", "DEL MethodInvocation", "DEL TextElement:  the cache entry key", "DEL SimpleType: Object", "DEL TagElement", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL TextElement: <p>", "DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: map", "DEL TextElement:  the cache key entry type", "DEL SimpleName: pa", "DEL SimpleName: createScript", "DEL SimpleName: funcs", "DEL SimpleName: JexlArithmetic", "DEL ParameterizedType: Set<Entry<K,V>>", "DEL SimpleName: DebugInfo", "DEL TextElement: </li>", "DEL SimpleName: Collections", "DEL TextElement:  true if debug is on, false otherwise", "DEL SimpleName: script", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: debugInfo", "DEL SimpleType: IOException", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: Object", "DEL TextElement:  are thrown in \"non-silent\" mode but since these are", "DEL PrimitiveType: int", "DEL SimpleName: register", "DEL SimpleType: String", "DEL TagElement", "DEL TagElement: @throws", "DEL TagElement: @return", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL Block", "DEL InstanceofExpression", "DEL TextElement: Sets whether this engine throws JexlException during evaluation when an error is triggered.", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL PrimitiveType: int", "DEL ParameterizedType: List<String>", "DEL SimpleName: narrowArguments", "DEL TagElement: @throws", "DEL TextElement: initialization code before expression creation &amp; evaluation.</p>", "DEL MethodInvocation", "DEL SimpleName: scriptText", "DEL SimpleType: JexlMethod", "DEL ClassInstanceCreation", "DEL TextElement: <p>If not explicitly set, the arithmetic leniency value applies.</p>", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Map<String,Object>", "DEL CatchClause", "DEL SimpleName: theFunctions", "DEL TextElement: <", "DEL SimpleName: cleanExpression", "DEL SimpleName: obj", "DEL SimpleName: name", "DEL Block", "DEL SimpleType: UnifiedJEXL", "DEL TagElement: @throws", "DEL SimpleName: ref", "DEL Javadoc", "DEL SimpleType: String", "DEL InfixExpression: +", "DEL BooleanLiteral: true", "DEL SimpleName: parms", "DEL SimpleType: Log", "DEL TagElement: @param", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL VariableDeclarationExpression", "DEL TextElement: An overridable through covariant return Expression creator.", "DEL SimpleName: theSize", "DEL StringLiteral: \";\"", "DEL SimpleName: ExpressionImpl", "DEL StringLiteral: \"\"", "DEL SimpleName: JexlInfo", "DEL SimpleName: script", "DEL StringLiteral: \"#0\"", "DEL IfStatement", "DEL ParameterizedType: Map<K,V>", "DEL Javadoc", "DEL SimpleName: get", "DEL ClassInstanceCreation", "DEL SimpleName: entry", "DEL SimpleName: var", "DEL Modifier: protected", "DEL IfStatement", "DEL SimpleName: Object", "DEL SimpleName: funcs", "DEL TextElement:  if there is a problem parsing the script.", "DEL NumberLiteral: 0", "DEL Dimension", "DEL TextElement: Parses an expression.", "DEL SimpleType: UberspectImpl", "DEL SimpleName: info", "DEL TextElement: Gets the array of parameters from a script.", "DEL TagElement", "DEL TagElement", "DEL TextElement: </p>", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL TextElement:  the created object instance or null on failure when silent", "DEL ParameterizedType: List<String>", "DEL SimpleName: Script", "DEL AnonymousClassDeclaration", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: connection", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: parse", "DEL SimpleName: valueOf", "DEL TextElement:  containing valid JEXL syntax.", "DEL Dimension", "DEL SimpleName: getRegisters", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: logger", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: size", "DEL SimpleName: readerToString", "DEL ParameterizedType: Map<K,V>", "DEL SimpleName: expr", "DEL SimpleName: JexlException", "DEL SimpleType: String", "DEL SimpleName: child", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TextElement:  the property expression", "DEL SimpleName: V", "DEL TagElement", "DEL InfixExpression: -", "DEL SimpleName: anArithmetic", "DEL SimpleName: scriptFile", "DEL SimpleName: String", "DEL Modifier: protected", "DEL SimpleName: warn", "DEL ThrowStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation"]}]}}, {"JexlEngine_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.BufferedReader(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.File(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.FileReader(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.IOException(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.io.InputStreamReader(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.io.StringReader(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.io.Reader(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.net.URL(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.net.URLConnection(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.lang.ref.SoftReference(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.ArrayList(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: java.util.Map(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: java.util.Set(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.Collections(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: java.util.LinkedHashMap(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: java.util.LinkedHashSet(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: java.util.List(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: java.util.Map.Entry(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: org.apache.commons.logging.Log(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: org.apache.commons.logging.LogFactory(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ParseException(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: org.apache.commons.jexl2.parser.Parser(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: org.apache.commons.jexl2.parser.JexlNode(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: org.apache.commons.jexl2.parser.TokenMgrError(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript(50)", "Delete ImportDeclaration(51)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.Uberspect(52)", "Delete ImportDeclaration(53)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.UberspectImpl(54)", "Delete ImportDeclaration(55)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod(56)", "Delete ImportDeclaration(57)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTArrayAccess(58)", "Delete ImportDeclaration(59)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTIdentifier(60)", "Delete ImportDeclaration(61)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTReference(62)", "Delete ImportDeclaration(63)", "Delete TextElement: <p>(64)", "Delete TextElement: Creates and evaluates Expression and Script objects.(65)", "Delete TextElement: Determines the behavior of Expressions & Scripts during their evaluation with respect to:(66)", "Delete TextElement: <ul>(67)", "Delete TextElement: <li>Introspection, see (68)", "Delete SimpleName: Uberspect(69)", "Delete TagElement: @link(70)", "Delete TextElement: </li>(71)", "Delete TextElement: <li>Arithmetic & comparison, see (72)", "Delete SimpleName: JexlArithmetic(73)", "Delete TagElement: @link(74)", "Delete TextElement: </li>(75)", "Delete TextElement: <li>Error reporting</li>(76)", "Delete TextElement: <li>Logging</li>(77)", "Delete TextElement: </ul>(78)", "Delete TextElement: </p>(79)", "Delete TextElement: <p>The <code>setSilent</code> and <code>setLenient</code> methods allow to fine-tune an engine instance behavior(80)", "Delete TextElement: according to various error control needs. The lenient/strict flag tells the engine when and if null as operand is(81)", "Delete TextElement: considered an error, the silent/verbose flag tells the engine what to do with the error(82)", "Delete TextElement: (log as warning or throw exception).(83)", "Delete TextElement: </p>(84)", "Delete TextElement: <ul>(85)", "Delete TextElement: <li>When \"silent\" &amp; \"lenient\":(86)", "Delete TextElement: <p> 0 & null should be indicators of \"default\" values so that even in an case of error,(87)", "Delete TextElement: something meaningfull can still be inferred; may be convenient for configurations.(88)", "Delete TextElement: </p>(89)", "Delete TextElement: </li>(90)", "Delete TextElement: <li>When \"silent\" &amp; \"strict\":(91)", "Delete TextElement: <p>One should probably consider using null as an error case - ie, every object(92)", "Delete TextElement: manipulated by JEXL should be valued; the ternary operator, especially the '?:' form(93)", "Delete TextElement: can be used to workaround exceptional cases.(94)", "Delete TextElement: Use case could be configuration with no implicit values or defaults.(95)", "Delete TextElement: </p>(96)", "Delete TextElement: </li>(97)", "Delete TextElement: <li>When \"verbose\" &amp; \"lenient\":(98)", "Delete TextElement: <p>The error control grain is roughly on par with JEXL 1.0</p>(99)", "Delete TextElement: </li>(100)", "Delete TextElement: <li>When \"verbose\" &amp; \"strict\":(101)", "Delete TextElement: <p>The finest error control grain is obtained; it is the closest to Java code -(102)", "Delete TextElement: still augmented by \"script\" capabilities regarding automated conversions & type matching.(103)", "Delete TextElement: </p>(104)", "Delete TextElement: </li>(105)", "Delete TextElement: </ul>(106)", "Delete TextElement: <p>(107)", "Delete TextElement: Note that methods that evaluate expressions may throw <em>unchecked</em> exceptions;(108)", "Delete TextElement: The (109)", "Delete SimpleName: JexlException(110)", "Delete TagElement: @link(111)", "Delete TextElement:  are thrown in \"non-silent\" mode but since these are(112)", "Delete TextElement: RuntimeException, user-code <em>should</em> catch them wherever most appropriate.(113)", "Delete TextElement: </p>(114)", "Delete TagElement(115)", "Delete TextElement:  2.0(116)", "Delete TagElement: @since(117)", "Delete Javadoc(118)", "Delete Modifier: public(119)", "Delete SimpleName: JexlEngine(120)", "Delete TextElement: An empty/static/non-mutable JexlContext used instead of null context.(121)", "Delete TagElement(122)", "Delete Javadoc(123)", "Delete Modifier: public(124)", "Delete Modifier: static(125)", "Delete Modifier: final(126)", "Delete SimpleName: JexlContext(127)", "Delete SimpleType: JexlContext(128)", "Delete SimpleName: EMPTY_CONTEXT(129)", "Delete SimpleName: JexlContext(130)", "Delete SimpleType: JexlContext(131)", "Delete TagElement: @inheritDoc(132)", "Delete TextElement:  (133)", "Delete TagElement(134)", "Delete Javadoc(135)", "Delete Modifier: public(136)", "Delete SimpleName: Object(137)", "Delete SimpleType: Object(138)", "Delete SimpleName: get(139)", "Delete SimpleName: String(140)", "Delete SimpleType: String(141)", "Delete SimpleName: name(142)", "Delete SingleVariableDeclaration(143)", "Delete NullLiteral(144)", "Delete ReturnStatement(145)", "Delete Block(146)", "Delete MethodDeclaration(147)", "Delete TagElement: @inheritDoc(148)", "Delete TextElement:  (149)", "Delete TagElement(150)", "Delete Javadoc(151)", "Delete Modifier: public(152)", "Delete PrimitiveType: boolean(153)", "Delete SimpleName: has(154)", "Delete SimpleName: String(155)", "Delete SimpleType: String(156)", "Delete SimpleName: name(157)", "Delete SingleVariableDeclaration(158)", "Delete BooleanLiteral: false(159)", "Delete ReturnStatement(160)", "Delete Block(161)", "Delete MethodDeclaration(162)", "Delete TagElement: @inheritDoc(163)", "Delete TextElement:  (164)", "Delete TagElement(165)", "Delete Javadoc(166)", "Delete Modifier: public(167)", "Delete PrimitiveType: void(168)", "Delete SimpleName: set(169)", "Delete SimpleName: String(170)", "Delete SimpleType: String(171)", "Delete SimpleName: name(172)", "Delete SingleVariableDeclaration(173)", "Delete SimpleName: Object(174)", "Delete SimpleType: Object(175)", "Delete SimpleName: value(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: UnsupportedOperationException(178)", "Delete SimpleType: UnsupportedOperationException(179)", "Delete StringLiteral: \"Not supported in void context.\"(180)", "Delete ClassInstanceCreation(181)", "Delete ThrowStatement(182)", "Delete Block(183)", "Delete MethodDeclaration(184)", "Delete AnonymousClassDeclaration(185)", "Delete ClassInstanceCreation(186)", "Delete VariableDeclarationFragment(187)", "Delete FieldDeclaration(188)", "Delete TextElement: Gets the default instance of Uberspect.(189)", "Delete TextElement: <p>This is lazily initialized to avoid building a default instance if there(190)", "Delete TextElement: is no use for it. The main reason for not using the default Uberspect instance is to(191)", "Delete TextElement: be able to use a (low level) introspector created with a given logger(192)", "Delete TextElement: instead of the default one.</p>(193)", "Delete TextElement: <p>Implemented as on demand holder idiom.</p>(194)", "Delete TagElement(195)", "Delete Javadoc(196)", "Delete Modifier: private(197)", "Delete Modifier: static(198)", "Delete Modifier: final(199)", "Delete SimpleName: UberspectHolder(200)", "Delete TextElement: The default uberspector that handles all introspection patterns. (201)", "Delete TagElement(202)", "Delete Javadoc(203)", "Delete Modifier: private(204)", "Delete Modifier: static(205)", "Delete Modifier: final(206)", "Delete SimpleName: Uberspect(207)", "Delete SimpleType: Uberspect(208)", "Delete SimpleName: UBERSPECT(209)", "Delete SimpleName: UberspectImpl(210)", "Delete SimpleType: UberspectImpl(211)", "Delete SimpleName: LogFactory(212)", "Delete SimpleName: getLog(213)", "Delete SimpleName: JexlEngine(214)", "Delete SimpleType: JexlEngine(215)", "Delete TypeLiteral(216)", "Delete MethodInvocation(217)", "Delete ClassInstanceCreation(218)", "Delete VariableDeclarationFragment(219)", "Delete FieldDeclaration(220)", "Delete TextElement: Non-instantiable. (221)", "Delete TagElement(222)", "Delete Javadoc(223)", "Delete Modifier: private(224)", "Delete SimpleName: UberspectHolder(225)", "Delete Block(226)", "Delete MethodDeclaration(227)", "Delete TypeDeclaration: class(228)", "Delete TextElement: The Uberspect instance.(229)", "Delete TagElement(230)", "Delete Javadoc(231)", "Delete Modifier: protected(232)", "Delete Modifier: final(233)", "Delete SimpleName: Uberspect(234)", "Delete SimpleType: Uberspect(235)", "Delete SimpleName: uberspect(236)", "Delete VariableDeclarationFragment(237)", "Delete FieldDeclaration(238)", "Delete TextElement: The JexlArithmetic instance.(239)", "Delete TagElement(240)", "Delete Javadoc(241)", "Delete Modifier: protected(242)", "Delete Modifier: final(243)", "Delete SimpleName: JexlArithmetic(244)", "Delete SimpleType: JexlArithmetic(245)", "Delete SimpleName: arithmetic(246)", "Delete VariableDeclarationFragment(247)", "Delete FieldDeclaration(248)", "Delete TextElement: The Log to which all JexlEngine messages will be logged.(249)", "Delete TagElement(250)", "Delete Javadoc(251)", "Delete Modifier: protected(252)", "Delete Modifier: final(253)", "Delete SimpleName: Log(254)", "Delete SimpleType: Log(255)", "Delete SimpleName: logger(256)", "Delete VariableDeclarationFragment(257)", "Delete FieldDeclaration(258)", "Delete TextElement: The singleton ExpressionFactory also holds a single instance of(259)", "Delete SimpleName: Parser(260)", "Delete TagElement: @link(261)", "Delete TextElement: .(262)", "Delete TextElement: When parsing expressions, ExpressionFactory synchronizes on Parser.(263)", "Delete TagElement(264)", "Delete Javadoc(265)", "Delete Modifier: protected(266)", "Delete Modifier: final(267)", "Delete SimpleName: Parser(268)", "Delete SimpleType: Parser(269)", "Delete SimpleName: parser(270)", "Delete SimpleName: Parser(271)", "Delete SimpleType: Parser(272)", "Delete SimpleName: StringReader(273)", "Delete SimpleType: StringReader(274)", "Delete StringLiteral: \";\"(275)", "Delete ClassInstanceCreation(276)", "Delete ClassInstanceCreation(277)", "Delete VariableDeclarationFragment(278)", "Delete FieldDeclaration(279)", "Delete TextElement: Whether expressions evaluated by this engine will throw exceptions (false) or (280)", "Delete TextElement: return null (true) on errors. Default is false.(281)", "Delete TagElement(282)", "Delete Javadoc(283)", "Delete Modifier: protected(284)", "Delete PrimitiveType: boolean(285)", "Delete SimpleName: silent(286)", "Delete BooleanLiteral: false(287)", "Delete VariableDeclarationFragment(288)", "Delete FieldDeclaration(289)", "Delete TextElement: Whether this engine is in lenient or strict mode; if unspecified, use the arithmetic lenient property.(290)", "Delete TagElement(291)", "Delete Javadoc(292)", "Delete Modifier: protected(293)", "Delete SimpleName: Boolean(294)", "Delete SimpleType: Boolean(295)", "Delete SimpleName: strict(296)", "Delete NullLiteral(297)", "Delete VariableDeclarationFragment(298)", "Delete FieldDeclaration(299)", "Delete TextElement: Whether error messages will carry debugging information.(300)", "Delete TagElement(301)", "Delete Javadoc(302)", "Delete Modifier: protected(303)", "Delete PrimitiveType: boolean(304)", "Delete SimpleName: debug(305)", "Delete BooleanLiteral: true(306)", "Delete VariableDeclarationFragment(307)", "Delete FieldDeclaration(308)", "Delete TextElement: The map of 'prefix:function' to object implementing the functions.(309)", "Delete TagElement(310)", "Delete Javadoc(311)", "Delete Modifier: protected(312)", "Delete SimpleName: Map(313)", "Delete SimpleType: Map(314)", "Delete SimpleName: String(315)", "Delete SimpleType: String(316)", "Delete SimpleName: Object(317)", "Delete SimpleType: Object(318)", "Delete ParameterizedType: Map<String,Object>(319)", "Delete SimpleName: functions(320)", "Delete SimpleName: Collections(321)", "Delete SimpleName: emptyMap(322)", "Delete MethodInvocation(323)", "Delete VariableDeclarationFragment(324)", "Delete FieldDeclaration(325)", "Delete TextElement: The expression cache.(326)", "Delete TagElement(327)", "Delete Javadoc(328)", "Delete Modifier: protected(329)", "Delete SimpleName: SoftCache(330)", "Delete SimpleType: SoftCache(331)", "Delete SimpleName: String(332)", "Delete SimpleType: String(333)", "Delete SimpleName: ASTJexlScript(334)", "Delete SimpleType: ASTJexlScript(335)", "Delete ParameterizedType: SoftCache<String,ASTJexlScript>(336)", "Delete SimpleName: cache(337)", "Delete NullLiteral(338)", "Delete VariableDeclarationFragment(339)", "Delete FieldDeclaration(340)", "Delete TextElement: The default cache load factor.(341)", "Delete TagElement(342)", "Delete Javadoc(343)", "Delete Modifier: private(344)", "Delete Modifier: static(345)", "Delete Modifier: final(346)", "Delete PrimitiveType: float(347)", "Delete SimpleName: LOAD_FACTOR(348)", "Delete NumberLiteral: 0.75f(349)", "Delete VariableDeclarationFragment(350)", "Delete FieldDeclaration(351)", "Delete TextElement: Creates an engine with default arguments.(352)", "Delete TagElement(353)", "Delete Javadoc(354)", "Delete Modifier: public(355)", "Delete SimpleName: JexlEngine(356)", "Delete NullLiteral(357)", "Delete NullLiteral(358)", "Delete NullLiteral(359)", "Delete NullLiteral(360)", "Delete ConstructorInvocation(361)", "Delete Block(362)", "Delete MethodDeclaration(363)", "Delete TextElement: Creates a JEXL engine using the provided (364)", "Delete SimpleName: Uberspect(365)", "Delete TagElement: @link(366)", "Delete TextElement: , (@link JexlArithmetic),(367)", "Delete TextElement: a function map and logger.(368)", "Delete TagElement(369)", "Delete SimpleName: anUberspect(370)", "Delete TextElement:  to allow different introspection behaviour(371)", "Delete TagElement: @param(372)", "Delete SimpleName: anArithmetic(373)", "Delete TextElement:  to allow different arithmetic behaviour(374)", "Delete TagElement: @param(375)", "Delete SimpleName: theFunctions(376)", "Delete TextElement:  an optional map of functions (@link setFunctions)(377)", "Delete TagElement: @param(378)", "Delete SimpleName: log(379)", "Delete TextElement:  the logger for various messages(380)", "Delete TagElement: @param(381)", "Delete Javadoc(382)", "Delete Modifier: public(383)", "Delete SimpleName: JexlEngine(384)", "Delete SimpleName: Uberspect(385)", "Delete SimpleType: Uberspect(386)", "Delete SimpleName: anUberspect(387)", "Delete SingleVariableDeclaration(388)", "Delete SimpleName: JexlArithmetic(389)", "Delete SimpleType: JexlArithmetic(390)", "Delete SimpleName: anArithmetic(391)", "Delete SingleVariableDeclaration(392)", "Delete SimpleName: Map(393)", "Delete SimpleType: Map(394)", "Delete SimpleName: String(395)", "Delete SimpleType: String(396)", "Delete SimpleName: Object(397)", "Delete SimpleType: Object(398)", "Delete ParameterizedType: Map<String,Object>(399)", "Delete SimpleName: theFunctions(400)", "Delete SingleVariableDeclaration(401)", "Delete SimpleName: Log(402)", "Delete SimpleType: Log(403)", "Delete SimpleName: log(404)", "Delete SingleVariableDeclaration(405)", "Delete ThisExpression(406)", "Delete SimpleName: uberspect(407)", "Delete FieldAccess(408)", "Delete SimpleName: anUberspect(409)", "Delete NullLiteral(410)", "Delete InfixExpression: ==(411)", "Delete SimpleName: getUberspect(412)", "Delete SimpleName: log(413)", "Delete MethodInvocation(414)", "Delete SimpleName: anUberspect(415)", "Delete ConditionalExpression(416)", "Delete Assignment: =(417)", "Delete ExpressionStatement(418)", "Delete SimpleName: log(419)", "Delete NullLiteral(420)", "Delete InfixExpression: ==(421)", "Delete SimpleName: log(422)", "Delete SimpleName: LogFactory(423)", "Delete SimpleName: getLog(424)", "Delete SimpleName: JexlEngine(425)", "Delete SimpleType: JexlEngine(426)", "Delete TypeLiteral(427)", "Delete MethodInvocation(428)", "Delete Assignment: =(429)", "Delete ExpressionStatement(430)", "Delete Block(431)", "Delete IfStatement(432)", "Delete ThisExpression(433)", "Delete SimpleName: logger(434)", "Delete FieldAccess(435)", "Delete SimpleName: log(436)", "Delete Assignment: =(437)", "Delete ExpressionStatement(438)", "Delete ThisExpression(439)", "Delete SimpleName: arithmetic(440)", "Delete FieldAccess(441)", "Delete SimpleName: anArithmetic(442)", "Delete NullLiteral(443)", "Delete InfixExpression: ==(444)", "Delete SimpleName: JexlArithmetic(445)", "Delete SimpleType: JexlArithmetic(446)", "Delete BooleanLiteral: true(447)", "Delete ClassInstanceCreation(448)", "Delete SimpleName: anArithmetic(449)", "Delete ConditionalExpression(450)", "Delete Assignment: =(451)", "Delete ExpressionStatement(452)", "Delete SimpleName: theFunctions(453)", "Delete NullLiteral(454)", "Delete InfixExpression: !=(455)", "Delete ThisExpression(456)", "Delete SimpleName: functions(457)", "Delete FieldAccess(458)", "Delete SimpleName: theFunctions(459)", "Delete Assignment: =(460)", "Delete ExpressionStatement(461)", "Delete Block(462)", "Delete IfStatement(463)", "Delete Block(464)", "Delete MethodDeclaration(465)", "Delete TextElement: Gets the default instance of Uberspect.(466)", "Delete TextElement: <p>This is lazily initialized to avoid building a default instance if there(467)", "Delete TextElement: is no use for it. The main reason for not using the default Uberspect instance is to(468)", "Delete TextElement: be able to use a (low level) introspector created with a given logger(469)", "Delete TextElement: instead of the default one.</p>(470)", "Delete TagElement(471)", "Delete SimpleName: logger(472)", "Delete TextElement:  the logger to use for the underlying Uberspect(473)", "Delete TagElement: @param(474)", "Delete TextElement:  Uberspect the default uberspector instance.(475)", "Delete TagElement: @return(476)", "Delete Javadoc(477)", "Delete Modifier: public(478)", "Delete Modifier: static(479)", "Delete SimpleName: Uberspect(480)", "Delete SimpleType: Uberspect(481)", "Delete SimpleName: getUberspect(482)", "Delete SimpleName: Log(483)", "Delete SimpleType: Log(484)", "Delete SimpleName: logger(485)", "Delete SingleVariableDeclaration(486)", "Delete SimpleName: logger(487)", "Delete NullLiteral(488)", "Delete InfixExpression: ==(489)", "Delete SimpleName: logger(490)", "Delete SimpleName: equals(491)", "Delete SimpleName: LogFactory(492)", "Delete SimpleName: getLog(493)", "Delete SimpleName: JexlEngine(494)", "Delete SimpleType: JexlEngine(495)", "Delete TypeLiteral(496)", "Delete MethodInvocation(497)", "Delete MethodInvocation(498)", "Delete InfixExpression: ||(499)", "Delete QualifiedName: UberspectHolder.UBERSPECT(500)", "Delete ReturnStatement(501)", "Delete Block(502)", "Delete IfStatement(503)", "Delete SimpleName: UberspectImpl(504)", "Delete SimpleType: UberspectImpl(505)", "Delete SimpleName: logger(506)", "Delete ClassInstanceCreation(507)", "Delete ReturnStatement(508)", "Delete Block(509)", "Delete MethodDeclaration(510)", "Delete TextElement: Gets this engine underlying uberspect.(511)", "Delete TagElement(512)", "Delete TextElement:  the uberspect(513)", "Delete TagElement: @return(514)", "Delete Javadoc(515)", "Delete Modifier: public(516)", "Delete SimpleName: Uberspect(517)", "Delete SimpleType: Uberspect(518)", "Delete SimpleName: getUberspect(519)", "Delete SimpleName: uberspect(520)", "Delete ReturnStatement(521)", "Delete Block(522)", "Delete MethodDeclaration(523)", "Delete TextElement: Gets this engine underlying arithmetic.(524)", "Delete TagElement(525)", "Delete TextElement:  the arithmetic(526)", "Delete TagElement: @return(527)", "Delete Javadoc(528)", "Delete Modifier: public(529)", "Delete SimpleName: JexlArithmetic(530)", "Delete SimpleType: JexlArithmetic(531)", "Delete SimpleName: getArithmetic(532)", "Delete SimpleName: arithmetic(533)", "Delete ReturnStatement(534)", "Delete Block(535)", "Delete MethodDeclaration(536)", "Delete TextElement: Sets whether this engine reports debugging information when error occurs.(537)", "Delete TextElement: <p>This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine(538)", "Delete TextElement: initialization code before expression creation &amp; evaluation.</p>(539)", "Delete TagElement(540)", "Delete SimpleName: JexlEngine(541)", "Delete SimpleName: setSilent(542)", "Delete MemberRef(543)", "Delete TagElement: @see(544)", "Delete SimpleName: JexlEngine(545)", "Delete SimpleName: setLenient(546)", "Delete MemberRef(547)", "Delete TagElement: @see(548)", "Delete SimpleName: flag(549)", "Delete TextElement:  true implies debug is on, false implies debug is off.(550)", "Delete TagElement: @param(551)", "Delete Javadoc(552)", "Delete Modifier: public(553)", "Delete PrimitiveType: void(554)", "Delete SimpleName: setDebug(555)", "Delete PrimitiveType: boolean(556)", "Delete SimpleName: flag(557)", "Delete SingleVariableDeclaration(558)", "Delete ThisExpression(559)", "Delete SimpleName: debug(560)", "Delete FieldAccess(561)", "Delete SimpleName: flag(562)", "Delete Assignment: =(563)", "Delete ExpressionStatement(564)", "Delete Block(565)", "Delete MethodDeclaration(566)", "Delete TextElement: Checks whether this engine is in debug mode.(567)", "Delete TagElement(568)", "Delete TextElement:  true if debug is on, false otherwise(569)", "Delete TagElement: @return(570)", "Delete Javadoc(571)", "Delete Modifier: public(572)", "Delete PrimitiveType: boolean(573)", "Delete SimpleName: isDebug(574)", "Delete ThisExpression(575)", "Delete SimpleName: debug(576)", "Delete FieldAccess(577)", "Delete ReturnStatement(578)", "Delete Block(579)", "Delete MethodDeclaration(580)", "Delete TextElement: Sets whether this engine throws JexlException during evaluation when an error is triggered.(581)", "Delete TextElement: <p>This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine(582)", "Delete TextElement: initialization code before expression creation &amp; evaluation.</p>(583)", "Delete TagElement(584)", "Delete SimpleName: JexlEngine(585)", "Delete SimpleName: setDebug(586)", "Delete MemberRef(587)", "Delete TagElement: @see(588)", "Delete SimpleName: JexlEngine(589)", "Delete SimpleName: setLenient(590)", "Delete MemberRef(591)", "Delete TagElement: @see(592)", "Delete SimpleName: flag(593)", "Delete TextElement:  true means no JexlException will occur, false allows them(594)", "Delete TagElement: @param(595)", "Delete Javadoc(596)", "Delete Modifier: public(597)", "Delete PrimitiveType: void(598)", "Delete SimpleName: setSilent(599)", "Delete PrimitiveType: boolean(600)", "Delete SimpleName: flag(601)", "Delete SingleVariableDeclaration(602)", "Delete ThisExpression(603)", "Delete SimpleName: silent(604)", "Delete FieldAccess(605)", "Delete SimpleName: flag(606)", "Delete Assignment: =(607)", "Delete ExpressionStatement(608)", "Delete Block(609)", "Delete MethodDeclaration(610)", "Delete TextElement: Checks whether this engine throws JexlException during evaluation.(611)", "Delete TagElement(612)", "Delete TextElement:  true if silent, false (default) otherwise(613)", "Delete TagElement: @return(614)", "Delete Javadoc(615)", "Delete Modifier: public(616)", "Delete PrimitiveType: boolean(617)", "Delete SimpleName: isSilent(618)", "Delete ThisExpression(619)", "Delete SimpleName: silent(620)", "Delete FieldAccess(621)", "Delete ReturnStatement(622)", "Delete Block(623)", "Delete MethodDeclaration(624)", "Delete TextElement: Sets whether this engine considers unknown variables, methods and constructors as errors or evaluates them(625)", "Delete TextElement: as null.(626)", "Delete TextElement: <p>This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine(627)", "Delete TextElement: initialization code before expression creation &amp; evaluation.</p>(628)", "Delete TextElement: <p>As of 2.1, you need a JexlThreadedArithmetic instance for this call to also modify the JexlArithmetic(629)", "Delete TextElement: leniency behavior.</p>(630)", "Delete TagElement(631)", "Delete SimpleName: JexlEngine(632)", "Delete SimpleName: setSilent(633)", "Delete MemberRef(634)", "Delete TagElement: @see(635)", "Delete SimpleName: JexlEngine(636)", "Delete SimpleName: setDebug(637)", "Delete MemberRef(638)", "Delete TagElement: @see(639)", "Delete SimpleName: flag(640)", "Delete TextElement:  true means no JexlException will occur, false allows them(641)", "Delete TagElement: @param(642)", "Delete Javadoc(643)", "Delete Modifier: public(644)", "Delete PrimitiveType: void(645)", "Delete SimpleName: setLenient(646)", "Delete PrimitiveType: boolean(647)", "Delete SimpleName: flag(648)", "Delete SingleVariableDeclaration(649)", "Delete SimpleName: arithmetic(650)", "Delete SimpleName: JexlThreadedArithmetic(651)", "Delete SimpleType: JexlThreadedArithmetic(652)", "Delete InstanceofExpression(653)", "Delete SimpleName: JexlThreadedArithmetic(654)", "Delete SimpleName: setLenient(655)", "Delete SimpleName: Boolean(656)", "Delete SimpleName: valueOf(657)", "Delete SimpleName: flag(658)", "Delete MethodInvocation(659)", "Delete MethodInvocation(660)", "Delete ExpressionStatement(661)", "Delete Block(662)", "Delete SimpleName: strict(663)", "Delete SimpleName: flag(664)", "Delete QualifiedName: Boolean.FALSE(665)", "Delete QualifiedName: Boolean.TRUE(666)", "Delete ConditionalExpression(667)", "Delete Assignment: =(668)", "Delete ExpressionStatement(669)", "Delete Block(670)", "Delete IfStatement(671)", "Delete Block(672)", "Delete MethodDeclaration(673)", "Delete TextElement: Checks whether this engine considers unknown variables, methods and constructors as errors.(674)", "Delete TextElement: <p>If not explicitly set, the arithmetic leniency value applies.</p>(675)", "Delete TagElement(676)", "Delete TextElement:  true if lenient, false if strict(677)", "Delete TagElement: @return(678)", "Delete Javadoc(679)", "Delete Modifier: public(680)", "Delete PrimitiveType: boolean(681)", "Delete SimpleName: isLenient(682)", "Delete SimpleName: strict(683)", "Delete NullLiteral(684)", "Delete InfixExpression: ==(685)", "Delete SimpleName: arithmetic(686)", "Delete SimpleName: isLenient(687)", "Delete MethodInvocation(688)", "Delete SimpleName: strict(689)", "Delete SimpleName: booleanValue(690)", "Delete MethodInvocation(691)", "Delete PrefixExpression: !(692)", "Delete ConditionalExpression(693)", "Delete ReturnStatement(694)", "Delete Block(695)", "Delete MethodDeclaration(696)", "Delete TextElement: Sets whether this engine behaves in strict or lenient mode.(697)", "Delete TextElement: Equivalent to setLenient(!flag).(698)", "Delete TagElement(699)", "Delete SimpleName: flag(700)", "Delete TextElement:  true for strict, false for lenient(701)", "Delete TagElement: @param(702)", "Delete Javadoc(703)", "Delete Modifier: public(704)", "Delete Modifier: final(705)", "Delete PrimitiveType: void(706)", "Delete SimpleName: setStrict(707)", "Delete PrimitiveType: boolean(708)", "Delete SimpleName: flag(709)", "Delete SingleVariableDeclaration(710)", "Delete SimpleName: setLenient(711)", "Delete SimpleName: flag(712)", "Delete PrefixExpression: !(713)", "Delete MethodInvocation(714)", "Delete ExpressionStatement(715)", "Delete Block(716)", "Delete MethodDeclaration(717)", "Delete TextElement: Checks whether this engine behaves in strict or lenient mode.(718)", "Delete TextElement: Equivalent to !isLenient().(719)", "Delete TagElement(720)", "Delete TextElement:  true for strict, false for lenient(721)", "Delete TagElement: @return(722)", "Delete Javadoc(723)", "Delete Modifier: public(724)", "Delete Modifier: final(725)", "Delete PrimitiveType: boolean(726)", "Delete SimpleName: isStrict(727)", "Delete SimpleName: isLenient(728)", "Delete MethodInvocation(729)", "Delete PrefixExpression: !(730)", "Delete ReturnStatement(731)", "Delete Block(732)", "Delete MethodDeclaration(733)", "Delete TextElement: Sets the class loader used to discover classes in 'new' expressions.(734)", "Delete TextElement: <p>This method should be called as an optional step of the JexlEngine(735)", "Delete TextElement: initialization code before expression creation &amp; evaluation.</p>(736)", "Delete TagElement(737)", "Delete SimpleName: loader(738)", "Delete TextElement:  the class loader to use(739)", "Delete TagElement: @param(740)", "Delete Javadoc(741)", "Delete Modifier: public(742)", "Delete PrimitiveType: void(743)", "Delete SimpleName: setClassLoader(744)", "Delete SimpleName: ClassLoader(745)", "Delete SimpleType: ClassLoader(746)", "Delete SimpleName: loader(747)", "Delete SingleVariableDeclaration(748)", "Delete SimpleName: uberspect(749)", "Delete SimpleName: setClassLoader(750)", "Delete SimpleName: loader(751)", "Delete MethodInvocation(752)", "Delete ExpressionStatement(753)", "Delete Block(754)", "Delete MethodDeclaration(755)", "Delete TextElement: Sets a cache for expressions of the defined size.(756)", "Delete TextElement: <p>The cache will contain at most <code>size</code> expressions. Note that(757)", "Delete TextElement: all JEXL caches are held through SoftReferences and may be garbage-collected.</p>(758)", "Delete TagElement(759)", "Delete SimpleName: size(760)", "Delete TextElement:  if not strictly positive, no cache is used.(761)", "Delete TagElement: @param(762)", "Delete Javadoc(763)", "Delete Modifier: public(764)", "Delete PrimitiveType: void(765)", "Delete SimpleName: setCache(766)", "Delete PrimitiveType: int(767)", "Delete SimpleName: size(768)", "Delete SingleVariableDeclaration(769)", "Delete SimpleName: parser(770)", "Delete SimpleName: size(771)", "Delete NumberLiteral: 0(772)", "Delete InfixExpression: <=(773)", "Delete SimpleName: cache(774)", "Delete NullLiteral(775)", "Delete Assignment: =(776)", "Delete ExpressionStatement(777)", "Delete Block(778)", "Delete SimpleName: cache(779)", "Delete NullLiteral(780)", "Delete InfixExpression: ==(781)", "Delete SimpleName: cache(782)", "Delete SimpleName: size(783)", "Delete MethodInvocation(784)", "Delete SimpleName: size(785)", "Delete InfixExpression: !=(786)", "Delete InfixExpression: ||(787)", "Delete SimpleName: cache(788)", "Delete SimpleName: SoftCache(789)", "Delete SimpleType: SoftCache(790)", "Delete SimpleName: String(791)", "Delete SimpleType: String(792)", "Delete SimpleName: ASTJexlScript(793)", "Delete SimpleType: ASTJexlScript(794)", "Delete ParameterizedType: SoftCache<String,ASTJexlScript>(795)", "Delete SimpleName: size(796)", "Delete ClassInstanceCreation(797)", "Delete Assignment: =(798)", "Delete ExpressionStatement(799)", "Delete Block(800)", "Delete IfStatement(801)", "Delete IfStatement(802)", "Delete Block(803)", "Delete SynchronizedStatement(804)", "Delete Block(805)", "Delete MethodDeclaration(806)", "Delete TextElement: Sets the map of function namespaces.(807)", "Delete TextElement: <p>(808)", "Delete TextElement: This method is <em>not</em> thread safe; it should be called as an optional step of the JexlEngine(809)", "Delete TextElement: initialization code before expression creation &amp; evaluation.(810)", "Delete TextElement: </p>(811)", "Delete TextElement: <p>(812)", "Delete TextElement: Each entry key is used as a prefix, each entry value used as a bean implementing(813)", "Delete TextElement: methods; an expression like 'nsx:method(123)' will thus be solved by looking at(814)", "Delete TextElement: a registered bean named 'nsx' that implements method 'method' in that map.(815)", "Delete TextElement: If all methods are static, you may use the bean class instead of an instance as value.(816)", "Delete TextElement: </p>(817)", "Delete TextElement: <p>(818)", "Delete TextElement: If the entry value is a class that has one contructor taking a JexlContext as argument, an instance(819)", "Delete TextElement: of the namespace will be created at evaluation time. It might be a good idea to derive a JexlContext(820)", "Delete TextElement: to carry the information used by the namespace to avoid variable space pollution and strongly type(821)", "Delete TextElement: the constructor with this specialized JexlContext.(822)", "Delete TextElement: </p>(823)", "Delete TextElement: <p>(824)", "Delete TextElement: The key or prefix allows to retrieve the bean that plays the role of the namespace.(825)", "Delete TextElement: If the prefix is null, the namespace is the top-level namespace allowing to define(826)", "Delete TextElement: top-level user defined functions ( ie: myfunc(...) )(827)", "Delete TextElement: </p>(828)", "Delete TextElement: <p>Note that the JexlContext is also used to try to solve top-level functions. This allows ObjectContext(829)", "Delete TextElement: derived instances to call methods on the wrapped object.</p>(830)", "Delete TagElement(831)", "Delete SimpleName: funcs(832)", "Delete TextElement:  the map of functions that should not mutate after the call; if null(833)", "Delete TextElement: is passed, the empty collection is used.(834)", "Delete TagElement: @param(835)", "Delete Javadoc(836)", "Delete Modifier: public(837)", "Delete PrimitiveType: void(838)", "Delete SimpleName: setFunctions(839)", "Delete SimpleName: Map(840)", "Delete SimpleType: Map(841)", "Delete SimpleName: String(842)", "Delete SimpleType: String(843)", "Delete SimpleName: Object(844)", "Delete SimpleType: Object(845)", "Delete ParameterizedType: Map<String,Object>(846)", "Delete SimpleName: funcs(847)", "Delete SingleVariableDeclaration(848)", "Delete SimpleName: functions(849)", "Delete SimpleName: funcs(850)", "Delete NullLiteral(851)", "Delete InfixExpression: !=(852)", "Delete SimpleName: funcs(853)", "Delete SimpleName: Collections(854)", "Delete SimpleName: String(855)", "Delete SimpleType: String(856)", "Delete SimpleName: Object(857)", "Delete SimpleType: Object(858)", "Delete SimpleName: emptyMap(859)", "Delete MethodInvocation(860)", "Delete ConditionalExpression(861)", "Delete Assignment: =(862)", "Delete ExpressionStatement(863)", "Delete Block(864)", "Delete MethodDeclaration(865)", "Delete TextElement: Retrieves the map of function namespaces.(866)", "Delete TagElement(867)", "Delete TextElement:  the map passed in setFunctions or the empty map if the(868)", "Delete TextElement: original was null.(869)", "Delete TagElement: @return(870)", "Delete Javadoc(871)", "Delete Modifier: public(872)", "Delete SimpleName: Map(873)", "Delete SimpleType: Map(874)", "Delete SimpleName: String(875)", "Delete SimpleType: String(876)", "Delete SimpleName: Object(877)", "Delete SimpleType: Object(878)", "Delete ParameterizedType: Map<String,Object>(879)", "Delete SimpleName: getFunctions(880)", "Delete SimpleName: functions(881)", "Delete ReturnStatement(882)", "Delete Block(883)", "Delete MethodDeclaration(884)", "Delete TextElement: An overridable through covariant return Expression creator.(885)", "Delete TagElement(886)", "Delete SimpleName: text(887)", "Delete TextElement:  the script text(888)", "Delete TagElement: @param(889)", "Delete SimpleName: tree(890)", "Delete TextElement:  the parse AST tree(891)", "Delete TagElement: @param(892)", "Delete TextElement:  the script instance(893)", "Delete TagElement: @return(894)", "Delete Javadoc(895)", "Delete Modifier: protected(896)", "Delete SimpleName: Expression(897)", "Delete SimpleType: Expression(898)", "Delete SimpleName: createExpression(899)", "Delete SimpleName: ASTJexlScript(900)", "Delete SimpleType: ASTJexlScript(901)", "Delete SimpleName: tree(902)", "Delete SingleVariableDeclaration(903)", "Delete SimpleName: String(904)", "Delete SimpleType: String(905)", "Delete SimpleName: text(906)", "Delete SingleVariableDeclaration(907)", "Delete SimpleName: ExpressionImpl(908)", "Delete SimpleType: ExpressionImpl(909)", "Delete ThisExpression(910)", "Delete SimpleName: text(911)", "Delete SimpleName: tree(912)", "Delete ClassInstanceCreation(913)", "Delete ReturnStatement(914)", "Delete Block(915)", "Delete MethodDeclaration(916)", "Delete TextElement: Creates an Expression from a String containing valid(917)", "Delete TextElement: JEXL syntax.  This method parses the expression which(918)", "Delete TextElement: must contain either a reference or an expression.(919)", "Delete TagElement(920)", "Delete SimpleName: expression(921)", "Delete TextElement:  A String containing valid JEXL syntax(922)", "Delete TagElement: @param(923)", "Delete TextElement:  An Expression object which can be evaluated with a JexlContext(924)", "Delete TagElement: @return(925)", "Delete SimpleName: JexlException(926)", "Delete TextElement:  An exception can be thrown if there is a problem(927)", "Delete TextElement: parsing this expression, or if the expression is neither an(928)", "Delete TextElement: expression nor a reference.(929)", "Delete TagElement: @throws(930)", "Delete Javadoc(931)", "Delete Modifier: public(932)", "Delete SimpleName: Expression(933)", "Delete SimpleType: Expression(934)", "Delete SimpleName: createExpression(935)", "Delete SimpleName: String(936)", "Delete SimpleType: String(937)", "Delete SimpleName: expression(938)", "Delete SingleVariableDeclaration(939)", "Delete SimpleName: createExpression(940)", "Delete SimpleName: expression(941)", "Delete NullLiteral(942)", "Delete MethodInvocation(943)", "Delete ReturnStatement(944)", "Delete Block(945)", "Delete MethodDeclaration(946)", "Delete TextElement: Creates an Expression from a String containing valid(947)", "Delete TextElement: JEXL syntax.  This method parses the expression which(948)", "Delete TextElement: must contain either a reference or an expression.(949)", "Delete TagElement(950)", "Delete SimpleName: expression(951)", "Delete TextElement:  A String containing valid JEXL syntax(952)", "Delete TagElement: @param(953)", "Delete TextElement:  An Expression object which can be evaluated with a JexlContext(954)", "Delete TagElement: @return(955)", "Delete SimpleName: info(956)", "Delete TextElement:  An info structure to carry debugging information if needed(957)", "Delete TagElement: @param(958)", "Delete SimpleName: JexlException(959)", "Delete TextElement:  An exception can be thrown if there is a problem(960)", "Delete TextElement: parsing this expression, or if the expression is neither an(961)", "Delete TextElement: expression or a reference.(962)", "Delete TagElement: @throws(963)", "Delete Javadoc(964)", "Delete Modifier: public(965)", "Delete SimpleName: Expression(966)", "Delete SimpleType: Expression(967)", "Delete SimpleName: createExpression(968)", "Delete SimpleName: String(969)", "Delete SimpleType: String(970)", "Delete SimpleName: expression(971)", "Delete SingleVariableDeclaration(972)", "Delete SimpleName: JexlInfo(973)", "Delete SimpleType: JexlInfo(974)", "Delete SimpleName: info(975)", "Delete SingleVariableDeclaration(976)", "Delete SimpleName: ASTJexlScript(977)", "Delete SimpleType: ASTJexlScript(978)", "Delete SimpleName: tree(979)", "Delete SimpleName: parse(980)", "Delete SimpleName: expression(981)", "Delete SimpleName: info(982)", "Delete NullLiteral(983)", "Delete MethodInvocation(984)", "Delete VariableDeclarationFragment(985)", "Delete VariableDeclarationStatement(986)", "Delete SimpleName: tree(987)", "Delete SimpleName: jjtGetNumChildren(988)", "Delete MethodInvocation(989)", "Delete NumberLiteral: 1(990)", "Delete InfixExpression: >(991)", "Delete SimpleName: logger(992)", "Delete SimpleName: warn(993)", "Delete StringLiteral: \"The JEXL Expression created will be a reference\"(994)", "Delete StringLiteral: \" to the first expression from the supplied script: \\\"\"(995)", "Delete InfixExpression: +(996)", "Delete SimpleName: expression(997)", "Delete StringLiteral: \"\\\" \"(998)", "Delete InfixExpression: +(999)", "Delete MethodInvocation(1000)", "Delete ExpressionStatement(1001)", "Delete Block(1002)", "Delete IfStatement(1003)", "Delete SimpleName: createExpression(1004)", "Delete SimpleName: tree(1005)", "Delete SimpleName: expression(1006)", "Delete MethodInvocation(1007)", "Delete ReturnStatement(1008)", "Delete Block(1009)", "Delete MethodDeclaration(1010)", "Delete TextElement: Creates a Script from a String containing valid JEXL syntax.(1011)", "Delete TextElement: This method parses the script which validates the syntax.(1012)", "Delete TagElement(1013)", "Delete SimpleName: scriptText(1014)", "Delete TextElement:  A String containing valid JEXL syntax(1015)", "Delete TagElement: @param(1016)", "Delete TextElement:  A (1017)", "Delete SimpleName: Script(1018)", "Delete TagElement: @link(1019)", "Delete TextElement:  which can be executed using a (1020)", "Delete SimpleName: JexlContext(1021)", "Delete TagElement: @link(1022)", "Delete TextElement: .(1023)", "Delete TagElement: @return(1024)", "Delete SimpleName: JexlException(1025)", "Delete TextElement:  if there is a problem parsing the script.(1026)", "Delete TagElement: @throws(1027)", "Delete Javadoc(1028)", "Delete Modifier: public(1029)", "Delete SimpleName: Script(1030)", "Delete SimpleType: Script(1031)", "Delete SimpleName: createScript(1032)", "Delete SimpleName: String(1033)", "Delete SimpleType: String(1034)", "Delete SimpleName: scriptText(1035)", "Delete SingleVariableDeclaration(1036)", "Delete SimpleName: createScript(1037)", "Delete SimpleName: scriptText(1038)", "Delete NullLiteral(1039)", "Delete NullLiteral(1040)", "Delete MethodInvocation(1041)", "Delete ReturnStatement(1042)", "Delete Block(1043)", "Delete MethodDeclaration(1044)", "Delete TextElement: Creates a Script from a String containing valid JEXL syntax.(1045)", "Delete TextElement: This method parses the script which validates the syntax.(1046)", "Delete TagElement(1047)", "Delete SimpleName: scriptText(1048)", "Delete TextElement:  A String containing valid JEXL syntax(1049)", "Delete TagElement: @param(1050)", "Delete SimpleName: names(1051)", "Delete TextElement:  the script parameter names(1052)", "Delete TagElement: @param(1053)", "Delete TextElement:  A (1054)", "Delete SimpleName: Script(1055)", "Delete TagElement: @link(1056)", "Delete TextElement:  which can be executed using a (1057)", "Delete SimpleName: JexlContext(1058)", "Delete TagElement: @link(1059)", "Delete TextElement: .(1060)", "Delete TagElement: @return(1061)", "Delete SimpleName: JexlException(1062)", "Delete TextElement:  if there is a problem parsing the script.(1063)", "Delete TagElement: @throws(1064)", "Delete Javadoc(1065)", "Delete Modifier: public(1066)", "Delete SimpleName: Script(1067)", "Delete SimpleType: Script(1068)", "Delete SimpleName: createScript(1069)", "Delete SimpleName: String(1070)", "Delete SimpleType: String(1071)", "Delete SimpleName: scriptText(1072)", "Delete SingleVariableDeclaration(1073)", "Delete SimpleName: String(1074)", "Delete SimpleType: String(1075)", "Delete SimpleName: names(1076)", "Delete SingleVariableDeclaration(1077)", "Delete SimpleName: createScript(1078)", "Delete SimpleName: scriptText(1079)", "Delete NullLiteral(1080)", "Delete SimpleName: names(1081)", "Delete MethodInvocation(1082)", "Delete ReturnStatement(1083)", "Delete Block(1084)", "Delete MethodDeclaration(1085)", "Delete TextElement: Creates a Script from a String containing valid JEXL syntax.(1086)", "Delete TextElement: This method parses the script which validates the syntax.(1087)", "Delete TextElement: It uses an array of parameter names that will be resolved during parsing;(1088)", "Delete TextElement: a corresponding array of arguments containing values should be used during evaluation.(1089)", "Delete TagElement(1090)", "Delete SimpleName: scriptText(1091)", "Delete TextElement:  A String containing valid JEXL syntax(1092)", "Delete TagElement: @param(1093)", "Delete SimpleName: info(1094)", "Delete TextElement:  An info structure to carry debugging information if needed(1095)", "Delete TagElement: @param(1096)", "Delete SimpleName: names(1097)", "Delete TextElement:  the script parameter names(1098)", "Delete TagElement: @param(1099)", "Delete TextElement:  A (1100)", "Delete SimpleName: Script(1101)", "Delete TagElement: @link(1102)", "Delete TextElement:  which can be executed using a (1103)", "Delete SimpleName: JexlContext(1104)", "Delete TagElement: @link(1105)", "Delete TextElement: .(1106)", "Delete TagElement: @return(1107)", "Delete SimpleName: JexlException(1108)", "Delete TextElement:  if there is a problem parsing the script.(1109)", "Delete TagElement: @throws(1110)", "Delete Javadoc(1111)", "Delete Modifier: public(1112)", "Delete SimpleName: Script(1113)", "Delete SimpleType: Script(1114)", "Delete SimpleName: createScript(1115)", "Delete SimpleName: String(1116)", "Delete SimpleType: String(1117)", "Delete SimpleName: scriptText(1118)", "Delete SingleVariableDeclaration(1119)", "Delete SimpleName: JexlInfo(1120)", "Delete SimpleType: JexlInfo(1121)", "Delete SimpleName: info(1122)", "Delete SingleVariableDeclaration(1123)", "Delete SimpleName: String(1124)", "Delete SimpleType: String(1125)", "Delete Dimension(1126)", "Delete ArrayType: String[](1127)", "Delete SimpleName: names(1128)", "Delete SingleVariableDeclaration(1129)", "Delete SimpleName: scriptText(1130)", "Delete NullLiteral(1131)", "Delete InfixExpression: ==(1132)", "Delete SimpleName: NullPointerException(1133)", "Delete SimpleType: NullPointerException(1134)", "Delete StringLiteral: \"scriptText is null\"(1135)", "Delete ClassInstanceCreation(1136)", "Delete ThrowStatement(1137)", "Delete Block(1138)", "Delete IfStatement(1139)", "Delete SimpleName: ASTJexlScript(1140)", "Delete SimpleType: ASTJexlScript(1141)", "Delete SimpleName: tree(1142)", "Delete SimpleName: parse(1143)", "Delete SimpleName: scriptText(1144)", "Delete SimpleName: info(1145)", "Delete SimpleName: Scope(1146)", "Delete SimpleType: Scope(1147)", "Delete SimpleName: names(1148)", "Delete ClassInstanceCreation(1149)", "Delete MethodInvocation(1150)", "Delete VariableDeclarationFragment(1151)", "Delete VariableDeclarationStatement(1152)", "Delete SimpleName: createScript(1153)", "Delete SimpleName: tree(1154)", "Delete SimpleName: scriptText(1155)", "Delete MethodInvocation(1156)", "Delete ReturnStatement(1157)", "Delete Block(1158)", "Delete MethodDeclaration(1159)", "Delete TextElement: An overridable through covariant return Script creator.(1160)", "Delete TagElement(1161)", "Delete SimpleName: text(1162)", "Delete TextElement:  the script text(1163)", "Delete TagElement: @param(1164)", "Delete SimpleName: tree(1165)", "Delete TextElement:  the parse AST tree(1166)", "Delete TagElement: @param(1167)", "Delete TextElement:  the script instance(1168)", "Delete TagElement: @return(1169)", "Delete Javadoc(1170)", "Delete Modifier: protected(1171)", "Delete SimpleName: Script(1172)", "Delete SimpleType: Script(1173)", "Delete SimpleName: createScript(1174)", "Delete SimpleName: ASTJexlScript(1175)", "Delete SimpleType: ASTJexlScript(1176)", "Delete SimpleName: tree(1177)", "Delete SingleVariableDeclaration(1178)", "Delete SimpleName: String(1179)", "Delete SimpleType: String(1180)", "Delete SimpleName: text(1181)", "Delete SingleVariableDeclaration(1182)", "Delete SimpleName: ExpressionImpl(1183)", "Delete SimpleType: ExpressionImpl(1184)", "Delete ThisExpression(1185)", "Delete SimpleName: text(1186)", "Delete SimpleName: tree(1187)", "Delete ClassInstanceCreation(1188)", "Delete ReturnStatement(1189)", "Delete Block(1190)", "Delete MethodDeclaration(1191)", "Delete TextElement: Creates a Script from a (1192)", "Delete SimpleName: File(1193)", "Delete TagElement: @link(1194)", "Delete TextElement:  containing valid JEXL syntax.(1195)", "Delete TextElement: This method parses the script and validates the syntax.(1196)", "Delete TagElement(1197)", "Delete SimpleName: scriptFile(1198)", "Delete TextElement:  A (1199)", "Delete SimpleName: File(1200)", "Delete TagElement: @link(1201)", "Delete TextElement:  containing valid JEXL syntax.(1202)", "Delete TextElement: Must not be null. Must be a readable file.(1203)", "Delete TagElement: @param(1204)", "Delete TextElement:  A (1205)", "Delete SimpleName: Script(1206)", "Delete TagElement: @link(1207)", "Delete TextElement:  which can be executed with a(1208)", "Delete SimpleName: JexlContext(1209)", "Delete TagElement: @link(1210)", "Delete TextElement: .(1211)", "Delete TagElement: @return(1212)", "Delete SimpleName: IOException(1213)", "Delete TextElement:  if there is a problem reading the script.(1214)", "Delete TagElement: @throws(1215)", "Delete SimpleName: JexlException(1216)", "Delete TextElement:  if there is a problem parsing the script.(1217)", "Delete TagElement: @throws(1218)", "Delete Javadoc(1219)", "Delete Modifier: public(1220)", "Delete SimpleName: Script(1221)", "Delete SimpleType: Script(1222)", "Delete SimpleName: createScript(1223)", "Delete SimpleName: File(1224)", "Delete SimpleType: File(1225)", "Delete SimpleName: scriptFile(1226)", "Delete SingleVariableDeclaration(1227)", "Delete SimpleName: IOException(1228)", "Delete SimpleType: IOException(1229)", "Delete SimpleName: scriptFile(1230)", "Delete NullLiteral(1231)", "Delete InfixExpression: ==(1232)", "Delete SimpleName: NullPointerException(1233)", "Delete SimpleType: NullPointerException(1234)", "Delete StringLiteral: \"scriptFile is null\"(1235)", "Delete ClassInstanceCreation(1236)", "Delete ThrowStatement(1237)", "Delete Block(1238)", "Delete IfStatement(1239)", "Delete SimpleName: scriptFile(1240)", "Delete SimpleName: canRead(1241)", "Delete MethodInvocation(1242)", "Delete PrefixExpression: !(1243)", "Delete SimpleName: IOException(1244)", "Delete SimpleType: IOException(1245)", "Delete StringLiteral: \"Can't read scriptFile (\"(1246)", "Delete SimpleName: scriptFile(1247)", "Delete SimpleName: getCanonicalPath(1248)", "Delete MethodInvocation(1249)", "Delete StringLiteral: \")\"(1250)", "Delete InfixExpression: +(1251)", "Delete ClassInstanceCreation(1252)", "Delete ThrowStatement(1253)", "Delete Block(1254)", "Delete IfStatement(1255)", "Delete SimpleName: BufferedReader(1256)", "Delete SimpleType: BufferedReader(1257)", "Delete SimpleName: reader(1258)", "Delete SimpleName: BufferedReader(1259)", "Delete SimpleType: BufferedReader(1260)", "Delete SimpleName: FileReader(1261)", "Delete SimpleType: FileReader(1262)", "Delete SimpleName: scriptFile(1263)", "Delete ClassInstanceCreation(1264)", "Delete ClassInstanceCreation(1265)", "Delete VariableDeclarationFragment(1266)", "Delete VariableDeclarationStatement(1267)", "Delete SimpleName: JexlInfo(1268)", "Delete SimpleType: JexlInfo(1269)", "Delete SimpleName: info(1270)", "Delete NullLiteral(1271)", "Delete VariableDeclarationFragment(1272)", "Delete VariableDeclarationStatement(1273)", "Delete SimpleName: debug(1274)", "Delete SimpleName: info(1275)", "Delete SimpleName: createInfo(1276)", "Delete SimpleName: scriptFile(1277)", "Delete SimpleName: getName(1278)", "Delete MethodInvocation(1279)", "Delete NumberLiteral: 0(1280)", "Delete NumberLiteral: 0(1281)", "Delete MethodInvocation(1282)", "Delete Assignment: =(1283)", "Delete ExpressionStatement(1284)", "Delete Block(1285)", "Delete IfStatement(1286)", "Delete SimpleName: createScript(1287)", "Delete SimpleName: readerToString(1288)", "Delete SimpleName: reader(1289)", "Delete MethodInvocation(1290)", "Delete SimpleName: info(1291)", "Delete NullLiteral(1292)", "Delete MethodInvocation(1293)", "Delete ReturnStatement(1294)", "Delete Block(1295)", "Delete MethodDeclaration(1296)", "Delete TextElement: Creates a Script from a (1297)", "Delete SimpleName: URL(1298)", "Delete TagElement: @link(1299)", "Delete TextElement:  containing valid JEXL syntax.(1300)", "Delete TextElement: This method parses the script and validates the syntax.(1301)", "Delete TagElement(1302)", "Delete SimpleName: scriptUrl(1303)", "Delete TextElement:  A (1304)", "Delete SimpleName: URL(1305)", "Delete TagElement: @link(1306)", "Delete TextElement:  containing valid JEXL syntax.(1307)", "Delete TextElement: Must not be null. Must be a readable file.(1308)", "Delete TagElement: @param(1309)", "Delete TextElement:  A (1310)", "Delete SimpleName: Script(1311)", "Delete TagElement: @link(1312)", "Delete TextElement:  which can be executed with a(1313)", "Delete SimpleName: JexlContext(1314)", "Delete TagElement: @link(1315)", "Delete TextElement: .(1316)", "Delete TagElement: @return(1317)", "Delete SimpleName: IOException(1318)", "Delete TextElement:  if there is a problem reading the script.(1319)", "Delete TagElement: @throws(1320)", "Delete SimpleName: JexlException(1321)", "Delete TextElement:  if there is a problem parsing the script.(1322)", "Delete TagElement: @throws(1323)", "Delete Javadoc(1324)", "Delete Modifier: public(1325)", "Delete SimpleName: Script(1326)", "Delete SimpleType: Script(1327)", "Delete SimpleName: createScript(1328)", "Delete SimpleName: URL(1329)", "Delete SimpleType: URL(1330)", "Delete SimpleName: scriptUrl(1331)", "Delete SingleVariableDeclaration(1332)", "Delete SimpleName: IOException(1333)", "Delete SimpleType: IOException(1334)", "Delete SimpleName: scriptUrl(1335)", "Delete NullLiteral(1336)", "Delete InfixExpression: ==(1337)", "Delete SimpleName: NullPointerException(1338)", "Delete SimpleType: NullPointerException(1339)", "Delete StringLiteral: \"scriptUrl is null\"(1340)", "Delete ClassInstanceCreation(1341)", "Delete ThrowStatement(1342)", "Delete Block(1343)", "Delete IfStatement(1344)", "Delete SimpleName: URLConnection(1345)", "Delete SimpleType: URLConnection(1346)", "Delete SimpleName: connection(1347)", "Delete SimpleName: scriptUrl(1348)", "Delete SimpleName: openConnection(1349)", "Delete MethodInvocation(1350)", "Delete VariableDeclarationFragment(1351)", "Delete VariableDeclarationStatement(1352)", "Delete SimpleName: BufferedReader(1353)", "Delete SimpleType: BufferedReader(1354)", "Delete SimpleName: reader(1355)", "Delete SimpleName: BufferedReader(1356)", "Delete SimpleType: BufferedReader(1357)", "Delete SimpleName: InputStreamReader(1358)", "Delete SimpleType: InputStreamReader(1359)", "Delete SimpleName: connection(1360)", "Delete SimpleName: getInputStream(1361)", "Delete MethodInvocation(1362)", "Delete ClassInstanceCreation(1363)", "Delete ClassInstanceCreation(1364)", "Delete VariableDeclarationFragment(1365)", "Delete VariableDeclarationStatement(1366)", "Delete SimpleName: JexlInfo(1367)", "Delete SimpleType: JexlInfo(1368)", "Delete SimpleName: info(1369)", "Delete NullLiteral(1370)", "Delete VariableDeclarationFragment(1371)", "Delete VariableDeclarationStatement(1372)", "Delete SimpleName: debug(1373)", "Delete SimpleName: info(1374)", "Delete SimpleName: createInfo(1375)", "Delete SimpleName: scriptUrl(1376)", "Delete SimpleName: toString(1377)", "Delete MethodInvocation(1378)", "Delete NumberLiteral: 0(1379)", "Delete NumberLiteral: 0(1380)", "Delete MethodInvocation(1381)", "Delete Assignment: =(1382)", "Delete ExpressionStatement(1383)", "Delete Block(1384)", "Delete IfStatement(1385)", "Delete SimpleName: createScript(1386)", "Delete SimpleName: readerToString(1387)", "Delete SimpleName: reader(1388)", "Delete MethodInvocation(1389)", "Delete SimpleName: info(1390)", "Delete NullLiteral(1391)", "Delete MethodInvocation(1392)", "Delete ReturnStatement(1393)", "Delete Block(1394)", "Delete MethodDeclaration(1395)", "Delete TextElement: Accesses properties of a bean using an expression.(1396)", "Delete TextElement: <p>(1397)", "Delete TextElement: jexl.get(myobject, \"foo.bar\"); should equate to(1398)", "Delete TextElement: myobject.getFoo().getBar(); (or myobject.getFoo().get(\"bar\"))(1399)", "Delete TextElement: </p>(1400)", "Delete TextElement: <p>(1401)", "Delete TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.(1402)", "Delete TextElement: </p>(1403)", "Delete TagElement(1404)", "Delete SimpleName: bean(1405)", "Delete TextElement:  the bean to get properties from(1406)", "Delete TagElement: @param(1407)", "Delete SimpleName: expr(1408)", "Delete TextElement:  the property expression(1409)", "Delete TagElement: @param(1410)", "Delete TextElement:  the value of the property(1411)", "Delete TagElement: @return(1412)", "Delete SimpleName: JexlException(1413)", "Delete TextElement:  if there is an error parsing the expression or during evaluation(1414)", "Delete TagElement: @throws(1415)", "Delete Javadoc(1416)", "Delete Modifier: public(1417)", "Delete SimpleName: Object(1418)", "Delete SimpleType: Object(1419)", "Delete SimpleName: getProperty(1420)", "Delete SimpleName: Object(1421)", "Delete SimpleType: Object(1422)", "Delete SimpleName: bean(1423)", "Delete SingleVariableDeclaration(1424)", "Delete SimpleName: String(1425)", "Delete SimpleType: String(1426)", "Delete SimpleName: expr(1427)", "Delete SingleVariableDeclaration(1428)", "Delete SimpleName: getProperty(1429)", "Delete NullLiteral(1430)", "Delete SimpleName: bean(1431)", "Delete SimpleName: expr(1432)", "Delete MethodInvocation(1433)", "Delete ReturnStatement(1434)", "Delete Block(1435)", "Delete MethodDeclaration(1436)", "Delete TextElement: Accesses properties of a bean using an expression.(1437)", "Delete TextElement: <p>(1438)", "Delete TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.(1439)", "Delete TextElement: </p>(1440)", "Delete TagElement(1441)", "Delete SimpleName: context(1442)", "Delete TextElement:  the evaluation context(1443)", "Delete TagElement: @param(1444)", "Delete SimpleName: bean(1445)", "Delete TextElement:  the bean to get properties from(1446)", "Delete TagElement: @param(1447)", "Delete SimpleName: expr(1448)", "Delete TextElement:  the property expression(1449)", "Delete TagElement: @param(1450)", "Delete TextElement:  the value of the property(1451)", "Delete TagElement: @return(1452)", "Delete SimpleName: JexlException(1453)", "Delete TextElement:  if there is an error parsing the expression or during evaluation(1454)", "Delete TagElement: @throws(1455)", "Delete Javadoc(1456)", "Delete Modifier: public(1457)", "Delete SimpleName: Object(1458)", "Delete SimpleType: Object(1459)", "Delete SimpleName: getProperty(1460)", "Delete SimpleName: JexlContext(1461)", "Delete SimpleType: JexlContext(1462)", "Delete SimpleName: context(1463)", "Delete SingleVariableDeclaration(1464)", "Delete SimpleName: Object(1465)", "Delete SimpleType: Object(1466)", "Delete SimpleName: bean(1467)", "Delete SingleVariableDeclaration(1468)", "Delete SimpleName: String(1469)", "Delete SimpleType: String(1470)", "Delete SimpleName: expr(1471)", "Delete SingleVariableDeclaration(1472)", "Delete SimpleName: context(1473)", "Delete NullLiteral(1474)", "Delete InfixExpression: ==(1475)", "Delete SimpleName: context(1476)", "Delete SimpleName: EMPTY_CONTEXT(1477)", "Delete Assignment: =(1478)", "Delete ExpressionStatement(1479)", "Delete Block(1480)", "Delete IfStatement(1481)", "Delete SimpleName: expr(1482)", "Delete StringLiteral: \"#0\"(1483)", "Delete SimpleName: expr(1484)", "Delete SimpleName: charAt(1485)", "Delete NumberLiteral: 0(1486)", "Delete MethodInvocation(1487)", "Delete CharacterLiteral: '['(1488)", "Delete InfixExpression: ==(1489)", "Delete StringLiteral: \"\"(1490)", "Delete StringLiteral: \".\"(1491)", "Delete ConditionalExpression(1492)", "Delete ParenthesizedExpression(1493)", "Delete SimpleName: expr(1494)", "Delete StringLiteral: \";\"(1495)", "Delete InfixExpression: +(1496)", "Delete Assignment: =(1497)", "Delete ExpressionStatement(1498)", "Delete QualifiedName: parser.ALLOW_REGISTERS(1499)", "Delete BooleanLiteral: true(1500)", "Delete Assignment: =(1501)", "Delete ExpressionStatement(1502)", "Delete SimpleName: Scope(1503)", "Delete SimpleType: Scope(1504)", "Delete SimpleName: frame(1505)", "Delete SimpleName: Scope(1506)", "Delete SimpleType: Scope(1507)", "Delete StringLiteral: \"#0\"(1508)", "Delete ClassInstanceCreation(1509)", "Delete VariableDeclarationFragment(1510)", "Delete VariableDeclarationStatement(1511)", "Delete SimpleName: ASTJexlScript(1512)", "Delete SimpleType: ASTJexlScript(1513)", "Delete SimpleName: script(1514)", "Delete SimpleName: parse(1515)", "Delete SimpleName: expr(1516)", "Delete NullLiteral(1517)", "Delete SimpleName: frame(1518)", "Delete MethodInvocation(1519)", "Delete VariableDeclarationFragment(1520)", "Delete VariableDeclarationStatement(1521)", "Delete SimpleName: JexlNode(1522)", "Delete SimpleType: JexlNode(1523)", "Delete SimpleName: node(1524)", "Delete SimpleName: script(1525)", "Delete SimpleName: jjtGetChild(1526)", "Delete NumberLiteral: 0(1527)", "Delete MethodInvocation(1528)", "Delete VariableDeclarationFragment(1529)", "Delete VariableDeclarationStatement(1530)", "Delete SimpleName: Interpreter(1531)", "Delete SimpleType: Interpreter(1532)", "Delete SimpleName: interpreter(1533)", "Delete SimpleName: createInterpreter(1534)", "Delete SimpleName: context(1535)", "Delete MethodInvocation(1536)", "Delete VariableDeclarationFragment(1537)", "Delete VariableDeclarationStatement(1538)", "Delete SimpleName: interpreter(1539)", "Delete SimpleName: setFrame(1540)", "Delete SimpleName: script(1541)", "Delete SimpleName: createFrame(1542)", "Delete SimpleName: bean(1543)", "Delete MethodInvocation(1544)", "Delete MethodInvocation(1545)", "Delete ExpressionStatement(1546)", "Delete SimpleName: node(1547)", "Delete SimpleName: jjtAccept(1548)", "Delete SimpleName: interpreter(1549)", "Delete NullLiteral(1550)", "Delete MethodInvocation(1551)", "Delete ReturnStatement(1552)", "Delete Block(1553)", "Delete SimpleName: JexlException(1554)", "Delete SimpleType: JexlException(1555)", "Delete SimpleName: xjexl(1556)", "Delete SingleVariableDeclaration(1557)", "Delete SimpleName: silent(1558)", "Delete SimpleName: logger(1559)", "Delete SimpleName: warn(1560)", "Delete SimpleName: xjexl(1561)", "Delete SimpleName: getMessage(1562)", "Delete MethodInvocation(1563)", "Delete SimpleName: xjexl(1564)", "Delete SimpleName: getCause(1565)", "Delete MethodInvocation(1566)", "Delete MethodInvocation(1567)", "Delete ExpressionStatement(1568)", "Delete NullLiteral(1569)", "Delete ReturnStatement(1570)", "Delete Block(1571)", "Delete IfStatement(1572)", "Delete SimpleName: xjexl(1573)", "Delete ThrowStatement(1574)", "Delete Block(1575)", "Delete CatchClause(1576)", "Delete QualifiedName: parser.ALLOW_REGISTERS(1577)", "Delete BooleanLiteral: false(1578)", "Delete Assignment: =(1579)", "Delete ExpressionStatement(1580)", "Delete Block(1581)", "Delete TryStatement(1582)", "Delete Block(1583)", "Delete MethodDeclaration(1584)", "Delete TextElement: Assign properties of a bean using an expression.(1585)", "Delete TextElement: <p>(1586)", "Delete TextElement: jexl.set(myobject, \"foo.bar\", 10); should equate to(1587)", "Delete TextElement: myobject.getFoo().setBar(10); (or myobject.getFoo().put(\"bar\", 10) )(1588)", "Delete TextElement: </p>(1589)", "Delete TextElement: <p>(1590)", "Delete TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.(1591)", "Delete TextElement: </p>(1592)", "Delete TagElement(1593)", "Delete SimpleName: bean(1594)", "Delete TextElement:  the bean to set properties in(1595)", "Delete TagElement: @param(1596)", "Delete SimpleName: expr(1597)", "Delete TextElement:  the property expression(1598)", "Delete TagElement: @param(1599)", "Delete SimpleName: value(1600)", "Delete TextElement:  the value of the property(1601)", "Delete TagElement: @param(1602)", "Delete SimpleName: JexlException(1603)", "Delete TextElement:  if there is an error parsing the expression or during evaluation(1604)", "Delete TagElement: @throws(1605)", "Delete Javadoc(1606)", "Delete Modifier: public(1607)", "Delete PrimitiveType: void(1608)", "Delete SimpleName: setProperty(1609)", "Delete SimpleName: Object(1610)", "Delete SimpleType: Object(1611)", "Delete SimpleName: bean(1612)", "Delete SingleVariableDeclaration(1613)", "Delete SimpleName: String(1614)", "Delete SimpleType: String(1615)", "Delete SimpleName: expr(1616)", "Delete SingleVariableDeclaration(1617)", "Delete SimpleName: Object(1618)", "Delete SimpleType: Object(1619)", "Delete SimpleName: value(1620)", "Delete SingleVariableDeclaration(1621)", "Delete SimpleName: setProperty(1622)", "Delete NullLiteral(1623)", "Delete SimpleName: bean(1624)", "Delete SimpleName: expr(1625)", "Delete SimpleName: value(1626)", "Delete MethodInvocation(1627)", "Delete ExpressionStatement(1628)", "Delete Block(1629)", "Delete MethodDeclaration(1630)", "Delete TextElement: Assign properties of a bean using an expression.(1631)", "Delete TextElement: <p>(1632)", "Delete TextElement: If the JEXL engine is silent, errors will be logged through its logger as warning.(1633)", "Delete TextElement: </p>(1634)", "Delete TagElement(1635)", "Delete SimpleName: context(1636)", "Delete TextElement:  the evaluation context(1637)", "Delete TagElement: @param(1638)", "Delete SimpleName: bean(1639)", "Delete TextElement:  the bean to set properties in(1640)", "Delete TagElement: @param(1641)", "Delete SimpleName: expr(1642)", "Delete TextElement:  the property expression(1643)", "Delete TagElement: @param(1644)", "Delete SimpleName: value(1645)", "Delete TextElement:  the value of the property(1646)", "Delete TagElement: @param(1647)", "Delete SimpleName: JexlException(1648)", "Delete TextElement:  if there is an error parsing the expression or during evaluation(1649)", "Delete TagElement: @throws(1650)", "Delete Javadoc(1651)", "Delete Modifier: public(1652)", "Delete PrimitiveType: void(1653)", "Delete SimpleName: setProperty(1654)", "Delete SimpleName: JexlContext(1655)", "Delete SimpleType: JexlContext(1656)", "Delete SimpleName: context(1657)", "Delete SingleVariableDeclaration(1658)", "Delete SimpleName: Object(1659)", "Delete SimpleType: Object(1660)", "Delete SimpleName: bean(1661)", "Delete SingleVariableDeclaration(1662)", "Delete SimpleName: String(1663)", "Delete SimpleType: String(1664)", "Delete SimpleName: expr(1665)", "Delete SingleVariableDeclaration(1666)", "Delete SimpleName: Object(1667)", "Delete SimpleType: Object(1668)", "Delete SimpleName: value(1669)", "Delete SingleVariableDeclaration(1670)", "Delete SimpleName: context(1671)", "Delete NullLiteral(1672)", "Delete InfixExpression: ==(1673)", "Delete SimpleName: context(1674)", "Delete SimpleName: EMPTY_CONTEXT(1675)", "Delete Assignment: =(1676)", "Delete ExpressionStatement(1677)", "Delete Block(1678)", "Delete IfStatement(1679)", "Delete SimpleName: expr(1680)", "Delete StringLiteral: \"#0\"(1681)", "Delete SimpleName: expr(1682)", "Delete SimpleName: charAt(1683)", "Delete NumberLiteral: 0(1684)", "Delete MethodInvocation(1685)", "Delete CharacterLiteral: '['(1686)", "Delete InfixExpression: ==(1687)", "Delete StringLiteral: \"\"(1688)", "Delete StringLiteral: \".\"(1689)", "Delete ConditionalExpression(1690)", "Delete ParenthesizedExpression(1691)", "Delete SimpleName: expr(1692)", "Delete StringLiteral: \"=\"(1693)", "Delete StringLiteral: \"#1\"(1694)", "Delete StringLiteral: \";\"(1695)", "Delete InfixExpression: +(1696)", "Delete Assignment: =(1697)", "Delete ExpressionStatement(1698)", "Delete QualifiedName: parser.ALLOW_REGISTERS(1699)", "Delete BooleanLiteral: true(1700)", "Delete Assignment: =(1701)", "Delete ExpressionStatement(1702)", "Delete SimpleName: Scope(1703)", "Delete SimpleType: Scope(1704)", "Delete SimpleName: frame(1705)", "Delete SimpleName: Scope(1706)", "Delete SimpleType: Scope(1707)", "Delete StringLiteral: \"#0\"(1708)", "Delete StringLiteral: \"#1\"(1709)", "Delete ClassInstanceCreation(1710)", "Delete VariableDeclarationFragment(1711)", "Delete VariableDeclarationStatement(1712)", "Delete SimpleName: ASTJexlScript(1713)", "Delete SimpleType: ASTJexlScript(1714)", "Delete SimpleName: script(1715)", "Delete SimpleName: parse(1716)", "Delete SimpleName: expr(1717)", "Delete NullLiteral(1718)", "Delete SimpleName: frame(1719)", "Delete MethodInvocation(1720)", "Delete VariableDeclarationFragment(1721)", "Delete VariableDeclarationStatement(1722)", "Delete SimpleName: JexlNode(1723)", "Delete SimpleType: JexlNode(1724)", "Delete SimpleName: node(1725)", "Delete SimpleName: script(1726)", "Delete SimpleName: jjtGetChild(1727)", "Delete NumberLiteral: 0(1728)", "Delete MethodInvocation(1729)", "Delete VariableDeclarationFragment(1730)", "Delete VariableDeclarationStatement(1731)", "Delete SimpleName: Interpreter(1732)", "Delete SimpleType: Interpreter(1733)", "Delete SimpleName: interpreter(1734)", "Delete SimpleName: createInterpreter(1735)", "Delete SimpleName: context(1736)", "Delete MethodInvocation(1737)", "Delete VariableDeclarationFragment(1738)", "Delete VariableDeclarationStatement(1739)", "Delete SimpleName: interpreter(1740)", "Delete SimpleName: setFrame(1741)", "Delete SimpleName: script(1742)", "Delete SimpleName: createFrame(1743)", "Delete SimpleName: bean(1744)", "Delete SimpleName: value(1745)", "Delete MethodInvocation(1746)", "Delete MethodInvocation(1747)", "Delete ExpressionStatement(1748)", "Delete SimpleName: node(1749)", "Delete SimpleName: jjtAccept(1750)", "Delete SimpleName: interpreter(1751)", "Delete NullLiteral(1752)", "Delete MethodInvocation(1753)", "Delete ExpressionStatement(1754)", "Delete Block(1755)", "Delete SimpleName: JexlException(1756)", "Delete SimpleType: JexlException(1757)", "Delete SimpleName: xjexl(1758)", "Delete SingleVariableDeclaration(1759)", "Delete SimpleName: silent(1760)", "Delete SimpleName: logger(1761)", "Delete SimpleName: warn(1762)", "Delete SimpleName: xjexl(1763)", "Delete SimpleName: getMessage(1764)", "Delete MethodInvocation(1765)", "Delete SimpleName: xjexl(1766)", "Delete SimpleName: getCause(1767)", "Delete MethodInvocation(1768)", "Delete MethodInvocation(1769)", "Delete ExpressionStatement(1770)", "Delete ReturnStatement(1771)", "Delete Block(1772)", "Delete IfStatement(1773)", "Delete SimpleName: xjexl(1774)", "Delete ThrowStatement(1775)", "Delete Block(1776)", "Delete CatchClause(1777)", "Delete QualifiedName: parser.ALLOW_REGISTERS(1778)", "Delete BooleanLiteral: false(1779)", "Delete Assignment: =(1780)", "Delete ExpressionStatement(1781)", "Delete Block(1782)", "Delete TryStatement(1783)", "Delete Block(1784)", "Delete MethodDeclaration(1785)", "Delete TextElement: Invokes an object's method by name and arguments.(1786)", "Delete TagElement(1787)", "Delete SimpleName: obj(1788)", "Delete TextElement:  the method's invoker object(1789)", "Delete TagElement: @param(1790)", "Delete SimpleName: meth(1791)", "Delete TextElement:  the method's name(1792)", "Delete TagElement: @param(1793)", "Delete SimpleName: args(1794)", "Delete TextElement:  the method's arguments(1795)", "Delete TagElement: @param(1796)", "Delete TextElement:  the method returned value or null if it failed and engine is silent(1797)", "Delete TagElement: @return(1798)", "Delete SimpleName: JexlException(1799)", "Delete TextElement:  if method could not be found or failed and engine is not silent(1800)", "Delete TagElement: @throws(1801)", "Delete Javadoc(1802)", "Delete Modifier: public(1803)", "Delete SimpleName: Object(1804)", "Delete SimpleType: Object(1805)", "Delete SimpleName: invokeMethod(1806)", "Delete SimpleName: Object(1807)", "Delete SimpleType: Object(1808)", "Delete SimpleName: obj(1809)", "Delete SingleVariableDeclaration(1810)", "Delete SimpleName: String(1811)", "Delete SimpleType: String(1812)", "Delete SimpleName: meth(1813)", "Delete SingleVariableDeclaration(1814)", "Delete SimpleName: Object(1815)", "Delete SimpleType: Object(1816)", "Delete SimpleName: args(1817)", "Delete SingleVariableDeclaration(1818)", "Delete SimpleName: JexlException(1819)", "Delete SimpleType: JexlException(1820)", "Delete SimpleName: xjexl(1821)", "Delete NullLiteral(1822)", "Delete VariableDeclarationFragment(1823)", "Delete VariableDeclarationStatement(1824)", "Delete SimpleName: Object(1825)", "Delete SimpleType: Object(1826)", "Delete SimpleName: result(1827)", "Delete NullLiteral(1828)", "Delete VariableDeclarationFragment(1829)", "Delete VariableDeclarationStatement(1830)", "Delete SimpleName: JexlInfo(1831)", "Delete SimpleType: JexlInfo(1832)", "Delete SimpleName: info(1833)", "Delete SimpleName: debugInfo(1834)", "Delete MethodInvocation(1835)", "Delete VariableDeclarationFragment(1836)", "Delete VariableDeclarationStatement(1837)", "Delete SimpleName: JexlMethod(1838)", "Delete SimpleType: JexlMethod(1839)", "Delete SimpleName: method(1840)", "Delete SimpleName: uberspect(1841)", "Delete SimpleName: getMethod(1842)", "Delete SimpleName: obj(1843)", "Delete SimpleName: meth(1844)", "Delete SimpleName: args(1845)", "Delete SimpleName: info(1846)", "Delete MethodInvocation(1847)", "Delete VariableDeclarationFragment(1848)", "Delete VariableDeclarationStatement(1849)", "Delete SimpleName: method(1850)", "Delete NullLiteral(1851)", "Delete InfixExpression: ==(1852)", "Delete SimpleName: arithmetic(1853)", "Delete SimpleName: narrowArguments(1854)", "Delete SimpleName: args(1855)", "Delete MethodInvocation(1856)", "Delete InfixExpression: &&(1857)", "Delete SimpleName: method(1858)", "Delete SimpleName: uberspect(1859)", "Delete SimpleName: getMethod(1860)", "Delete SimpleName: obj(1861)", "Delete SimpleName: meth(1862)", "Delete SimpleName: args(1863)", "Delete SimpleName: info(1864)", "Delete MethodInvocation(1865)", "Delete Assignment: =(1866)", "Delete ExpressionStatement(1867)", "Delete Block(1868)", "Delete IfStatement(1869)", "Delete SimpleName: method(1870)", "Delete NullLiteral(1871)", "Delete InfixExpression: !=(1872)", "Delete SimpleName: result(1873)", "Delete SimpleName: method(1874)", "Delete SimpleName: invoke(1875)", "Delete SimpleName: obj(1876)", "Delete SimpleName: args(1877)", "Delete MethodInvocation(1878)", "Delete Assignment: =(1879)", "Delete ExpressionStatement(1880)", "Delete Block(1881)", "Delete SimpleName: xjexl(1882)", "Delete SimpleName: JexlException(1883)", "Delete SimpleType: JexlException(1884)", "Delete SimpleName: info(1885)", "Delete StringLiteral: \"failed finding method \"(1886)", "Delete SimpleName: meth(1887)", "Delete InfixExpression: +(1888)", "Delete ClassInstanceCreation(1889)", "Delete Assignment: =(1890)", "Delete ExpressionStatement(1891)", "Delete Block(1892)", "Delete IfStatement(1893)", "Delete Block(1894)", "Delete SimpleName: Exception(1895)", "Delete SimpleType: Exception(1896)", "Delete SimpleName: xany(1897)", "Delete SingleVariableDeclaration(1898)", "Delete SimpleName: xjexl(1899)", "Delete SimpleName: JexlException(1900)", "Delete SimpleType: JexlException(1901)", "Delete SimpleName: info(1902)", "Delete StringLiteral: \"failed executing method \"(1903)", "Delete SimpleName: meth(1904)", "Delete InfixExpression: +(1905)", "Delete SimpleName: xany(1906)", "Delete ClassInstanceCreation(1907)", "Delete Assignment: =(1908)", "Delete ExpressionStatement(1909)", "Delete Block(1910)", "Delete CatchClause(1911)", "Delete SimpleName: xjexl(1912)", "Delete NullLiteral(1913)", "Delete InfixExpression: !=(1914)", "Delete SimpleName: silent(1915)", "Delete SimpleName: logger(1916)", "Delete SimpleName: warn(1917)", "Delete SimpleName: xjexl(1918)", "Delete SimpleName: getMessage(1919)", "Delete MethodInvocation(1920)", "Delete SimpleName: xjexl(1921)", "Delete SimpleName: getCause(1922)", "Delete MethodInvocation(1923)", "Delete MethodInvocation(1924)", "Delete ExpressionStatement(1925)", "Delete NullLiteral(1926)", "Delete ReturnStatement(1927)", "Delete Block(1928)", "Delete IfStatement(1929)", "Delete SimpleName: xjexl(1930)", "Delete ThrowStatement(1931)", "Delete Block(1932)", "Delete IfStatement(1933)", "Delete Block(1934)", "Delete TryStatement(1935)", "Delete SimpleName: result(1936)", "Delete ReturnStatement(1937)", "Delete Block(1938)", "Delete MethodDeclaration(1939)", "Delete TextElement: Creates a new instance of an object using the most appropriate constructor(1940)", "Delete TextElement: based on the arguments.(1941)", "Delete TagElement(1942)", "Delete TextElement: <(1943)", "Delete SimpleName: T(1944)", "Delete TextElement: >(1945)", "Delete TextElement:  the type of object(1946)", "Delete TagElement: @param(1947)", "Delete SimpleName: clazz(1948)", "Delete TextElement:  the class to instantiate(1949)", "Delete TagElement: @param(1950)", "Delete SimpleName: args(1951)", "Delete TextElement:  the constructor arguments(1952)", "Delete TagElement: @param(1953)", "Delete TextElement:  the created object instance or null on failure when silent(1954)", "Delete TagElement: @return(1955)", "Delete Javadoc(1956)", "Delete Modifier: public(1957)", "Delete SimpleName: T(1958)", "Delete TypeParameter(1959)", "Delete SimpleName: T(1960)", "Delete SimpleType: T(1961)", "Delete SimpleName: newInstance(1962)", "Delete SimpleName: Class(1963)", "Delete SimpleType: Class(1964)", "Delete SimpleName: T(1965)", "Delete SimpleType: T(1966)", "Delete WildcardType: ? extends T(1967)", "Delete ParameterizedType: Class<? extends T>(1968)", "Delete SimpleName: clazz(1969)", "Delete SingleVariableDeclaration(1970)", "Delete SimpleName: Object(1971)", "Delete SimpleType: Object(1972)", "Delete SimpleName: args(1973)", "Delete SingleVariableDeclaration(1974)", "Delete SimpleName: clazz(1975)", "Delete SimpleName: cast(1976)", "Delete SimpleName: doCreateInstance(1977)", "Delete SimpleName: clazz(1978)", "Delete SimpleName: args(1979)", "Delete MethodInvocation(1980)", "Delete MethodInvocation(1981)", "Delete ReturnStatement(1982)", "Delete Block(1983)", "Delete MethodDeclaration(1984)", "Delete TextElement: Creates a new instance of an object using the most appropriate constructor(1985)", "Delete TextElement: based on the arguments.(1986)", "Delete TagElement(1987)", "Delete SimpleName: clazz(1988)", "Delete TextElement:  the name of the class to instantiate resolved through this engine's class loader(1989)", "Delete TagElement: @param(1990)", "Delete SimpleName: args(1991)", "Delete TextElement:  the constructor arguments(1992)", "Delete TagElement: @param(1993)", "Delete TextElement:  the created object instance or null on failure when silent(1994)", "Delete TagElement: @return(1995)", "Delete Javadoc(1996)", "Delete Modifier: public(1997)", "Delete SimpleName: Object(1998)", "Delete SimpleType: Object(1999)", "Delete SimpleName: newInstance(2000)", "Delete SimpleName: String(2001)", "Delete SimpleType: String(2002)", "Delete SimpleName: clazz(2003)", "Delete SingleVariableDeclaration(2004)", "Delete SimpleName: Object(2005)", "Delete SimpleType: Object(2006)", "Delete SimpleName: args(2007)", "Delete SingleVariableDeclaration(2008)", "Delete SimpleName: doCreateInstance(2009)", "Delete SimpleName: clazz(2010)", "Delete SimpleName: args(2011)", "Delete MethodInvocation(2012)", "Delete ReturnStatement(2013)", "Delete Block(2014)", "Delete MethodDeclaration(2015)", "Delete TextElement: Creates a new instance of an object using the most appropriate constructor(2016)", "Delete TextElement: based on the arguments.(2017)", "Delete TagElement(2018)", "Delete SimpleName: clazz(2019)", "Delete TextElement:  the class to instantiate(2020)", "Delete TagElement: @param(2021)", "Delete SimpleName: args(2022)", "Delete TextElement:  the constructor arguments(2023)", "Delete TagElement: @param(2024)", "Delete TextElement:  the created object instance or null on failure when silent(2025)", "Delete TagElement: @return(2026)", "Delete Javadoc(2027)", "Delete Modifier: protected(2028)", "Delete SimpleName: Object(2029)", "Delete SimpleType: Object(2030)", "Delete SimpleName: doCreateInstance(2031)", "Delete SimpleName: Object(2032)", "Delete SimpleType: Object(2033)", "Delete SimpleName: clazz(2034)", "Delete SingleVariableDeclaration(2035)", "Delete SimpleName: Object(2036)", "Delete SimpleType: Object(2037)", "Delete SimpleName: args(2038)", "Delete SingleVariableDeclaration(2039)", "Delete SimpleName: JexlException(2040)", "Delete SimpleType: JexlException(2041)", "Delete SimpleName: xjexl(2042)", "Delete NullLiteral(2043)", "Delete VariableDeclarationFragment(2044)", "Delete VariableDeclarationStatement(2045)", "Delete SimpleName: Object(2046)", "Delete SimpleType: Object(2047)", "Delete SimpleName: result(2048)", "Delete NullLiteral(2049)", "Delete VariableDeclarationFragment(2050)", "Delete VariableDeclarationStatement(2051)", "Delete SimpleName: JexlInfo(2052)", "Delete SimpleType: JexlInfo(2053)", "Delete SimpleName: info(2054)", "Delete SimpleName: debugInfo(2055)", "Delete MethodInvocation(2056)", "Delete VariableDeclarationFragment(2057)", "Delete VariableDeclarationStatement(2058)", "Delete SimpleName: JexlMethod(2059)", "Delete SimpleType: JexlMethod(2060)", "Delete SimpleName: ctor(2061)", "Delete SimpleName: uberspect(2062)", "Delete SimpleName: getConstructorMethod(2063)", "Delete SimpleName: clazz(2064)", "Delete SimpleName: args(2065)", "Delete SimpleName: info(2066)", "Delete MethodInvocation(2067)", "Delete VariableDeclarationFragment(2068)", "Delete VariableDeclarationStatement(2069)", "Delete SimpleName: ctor(2070)", "Delete NullLiteral(2071)", "Delete InfixExpression: ==(2072)", "Delete SimpleName: arithmetic(2073)", "Delete SimpleName: narrowArguments(2074)", "Delete SimpleName: args(2075)", "Delete MethodInvocation(2076)", "Delete InfixExpression: &&(2077)", "Delete SimpleName: ctor(2078)", "Delete SimpleName: uberspect(2079)", "Delete SimpleName: getConstructorMethod(2080)", "Delete SimpleName: clazz(2081)", "Delete SimpleName: args(2082)", "Delete SimpleName: info(2083)", "Delete MethodInvocation(2084)", "Delete Assignment: =(2085)", "Delete ExpressionStatement(2086)", "Delete Block(2087)", "Delete IfStatement(2088)", "Delete SimpleName: ctor(2089)", "Delete NullLiteral(2090)", "Delete InfixExpression: !=(2091)", "Delete SimpleName: result(2092)", "Delete SimpleName: ctor(2093)", "Delete SimpleName: invoke(2094)", "Delete SimpleName: clazz(2095)", "Delete SimpleName: args(2096)", "Delete MethodInvocation(2097)", "Delete Assignment: =(2098)", "Delete ExpressionStatement(2099)", "Delete Block(2100)", "Delete SimpleName: xjexl(2101)", "Delete SimpleName: JexlException(2102)", "Delete SimpleType: JexlException(2103)", "Delete SimpleName: info(2104)", "Delete StringLiteral: \"failed finding constructor for \"(2105)", "Delete SimpleName: clazz(2106)", "Delete SimpleName: toString(2107)", "Delete MethodInvocation(2108)", "Delete InfixExpression: +(2109)", "Delete ClassInstanceCreation(2110)", "Delete Assignment: =(2111)", "Delete ExpressionStatement(2112)", "Delete Block(2113)", "Delete IfStatement(2114)", "Delete Block(2115)", "Delete SimpleName: Exception(2116)", "Delete SimpleType: Exception(2117)", "Delete SimpleName: xany(2118)", "Delete SingleVariableDeclaration(2119)", "Delete SimpleName: xjexl(2120)", "Delete SimpleName: JexlException(2121)", "Delete SimpleType: JexlException(2122)", "Delete SimpleName: info(2123)", "Delete StringLiteral: \"failed executing constructor for \"(2124)", "Delete SimpleName: clazz(2125)", "Delete SimpleName: toString(2126)", "Delete MethodInvocation(2127)", "Delete InfixExpression: +(2128)", "Delete SimpleName: xany(2129)", "Delete ClassInstanceCreation(2130)", "Delete Assignment: =(2131)", "Delete ExpressionStatement(2132)", "Delete Block(2133)", "Delete CatchClause(2134)", "Delete SimpleName: xjexl(2135)", "Delete NullLiteral(2136)", "Delete InfixExpression: !=(2137)", "Delete SimpleName: silent(2138)", "Delete SimpleName: logger(2139)", "Delete SimpleName: warn(2140)", "Delete SimpleName: xjexl(2141)", "Delete SimpleName: getMessage(2142)", "Delete MethodInvocation(2143)", "Delete SimpleName: xjexl(2144)", "Delete SimpleName: getCause(2145)", "Delete MethodInvocation(2146)", "Delete MethodInvocation(2147)", "Delete ExpressionStatement(2148)", "Delete NullLiteral(2149)", "Delete ReturnStatement(2150)", "Delete Block(2151)", "Delete IfStatement(2152)", "Delete SimpleName: xjexl(2153)", "Delete ThrowStatement(2154)", "Delete Block(2155)", "Delete IfStatement(2156)", "Delete Block(2157)", "Delete TryStatement(2158)", "Delete SimpleName: result(2159)", "Delete ReturnStatement(2160)", "Delete Block(2161)", "Delete MethodDeclaration(2162)", "Delete TextElement: Creates an interpreter.(2163)", "Delete TagElement(2164)", "Delete SimpleName: context(2165)", "Delete TextElement:  a JexlContext; if null, the EMPTY_CONTEXT is used instead.(2166)", "Delete TagElement: @param(2167)", "Delete TextElement:  an Interpreter(2168)", "Delete TagElement: @return(2169)", "Delete Javadoc(2170)", "Delete Modifier: protected(2171)", "Delete SimpleName: Interpreter(2172)", "Delete SimpleType: Interpreter(2173)", "Delete SimpleName: createInterpreter(2174)", "Delete SimpleName: JexlContext(2175)", "Delete SimpleType: JexlContext(2176)", "Delete SimpleName: context(2177)", "Delete SingleVariableDeclaration(2178)", "Delete SimpleName: createInterpreter(2179)", "Delete SimpleName: context(2180)", "Delete SimpleName: isStrict(2181)", "Delete MethodInvocation(2182)", "Delete SimpleName: isSilent(2183)", "Delete MethodInvocation(2184)", "Delete MethodInvocation(2185)", "Delete ReturnStatement(2186)", "Delete Block(2187)", "Delete MethodDeclaration(2188)", "Delete TextElement: Creates an interpreter.(2189)", "Delete TagElement(2190)", "Delete SimpleName: context(2191)", "Delete TextElement:  a JexlContext; if null, the EMPTY_CONTEXT is used instead.(2192)", "Delete TagElement: @param(2193)", "Delete SimpleName: strictFlag(2194)", "Delete TextElement:  whether the interpreter runs in strict mode(2195)", "Delete TagElement: @param(2196)", "Delete SimpleName: silentFlag(2197)", "Delete TextElement:  whether the interpreter runs in silent mode(2198)", "Delete TagElement: @param(2199)", "Delete TextElement:  an Interpreter(2200)", "Delete TagElement: @return(2201)", "Delete Javadoc(2202)", "Delete Modifier: protected(2203)", "Delete SimpleName: Interpreter(2204)", "Delete SimpleType: Interpreter(2205)", "Delete SimpleName: createInterpreter(2206)", "Delete SimpleName: JexlContext(2207)", "Delete SimpleType: JexlContext(2208)", "Delete SimpleName: context(2209)", "Delete SingleVariableDeclaration(2210)", "Delete PrimitiveType: boolean(2211)", "Delete SimpleName: strictFlag(2212)", "Delete SingleVariableDeclaration(2213)", "Delete PrimitiveType: boolean(2214)", "Delete SimpleName: silentFlag(2215)", "Delete SingleVariableDeclaration(2216)", "Delete SimpleName: Interpreter(2217)", "Delete SimpleType: Interpreter(2218)", "Delete ThisExpression(2219)", "Delete SimpleName: context(2220)", "Delete NullLiteral(2221)", "Delete InfixExpression: ==(2222)", "Delete SimpleName: EMPTY_CONTEXT(2223)", "Delete SimpleName: context(2224)", "Delete ConditionalExpression(2225)", "Delete SimpleName: strictFlag(2226)", "Delete SimpleName: silentFlag(2227)", "Delete ClassInstanceCreation(2228)", "Delete ReturnStatement(2229)", "Delete Block(2230)", "Delete MethodDeclaration(2231)", "Delete TextElement: A soft reference on cache.(2232)", "Delete TextElement: <p>The cache is held through a soft reference, allowing it to be GCed under(2233)", "Delete TextElement: memory pressure.</p>(2234)", "Delete TagElement(2235)", "Delete TextElement: <(2236)", "Delete SimpleName: K(2237)", "Delete TextElement: >(2238)", "Delete TextElement:  the cache key entry type(2239)", "Delete TagElement: @param(2240)", "Delete TextElement: <(2241)", "Delete SimpleName: V(2242)", "Delete TextElement: >(2243)", "Delete TextElement:  the cache key value type(2244)", "Delete TagElement: @param(2245)", "Delete Javadoc(2246)", "Delete Modifier: protected(2247)", "Delete SimpleName: SoftCache(2248)", "Delete SimpleName: K(2249)", "Delete TypeParameter(2250)", "Delete SimpleName: V(2251)", "Delete TypeParameter(2252)", "Delete TextElement: The cache size.(2253)", "Delete TagElement(2254)", "Delete Javadoc(2255)", "Delete Modifier: private(2256)", "Delete Modifier: final(2257)", "Delete PrimitiveType: int(2258)", "Delete SimpleName: size(2259)", "Delete VariableDeclarationFragment(2260)", "Delete FieldDeclaration(2261)", "Delete TextElement: The soft reference to the cache map.(2262)", "Delete TagElement(2263)", "Delete Javadoc(2264)", "Delete Modifier: private(2265)", "Delete SimpleName: SoftReference(2266)", "Delete SimpleType: SoftReference(2267)", "Delete SimpleName: Map(2268)", "Delete SimpleType: Map(2269)", "Delete SimpleName: K(2270)", "Delete SimpleType: K(2271)", "Delete SimpleName: V(2272)", "Delete SimpleType: V(2273)", "Delete ParameterizedType: Map<K,V>(2274)", "Delete ParameterizedType: SoftReference<Map<K,V>>(2275)", "Delete SimpleName: ref(2276)", "Delete NullLiteral(2277)", "Delete VariableDeclarationFragment(2278)", "Delete FieldDeclaration(2279)", "Delete TextElement: Creates a new instance of a soft cache.(2280)", "Delete TagElement(2281)", "Delete SimpleName: theSize(2282)", "Delete TextElement:  the cache size(2283)", "Delete TagElement: @param(2284)", "Delete Javadoc(2285)", "Delete SimpleName: SoftCache(2286)", "Delete PrimitiveType: int(2287)", "Delete SimpleName: theSize(2288)", "Delete SingleVariableDeclaration(2289)", "Delete SimpleName: size(2290)", "Delete SimpleName: theSize(2291)", "Delete Assignment: =(2292)", "Delete ExpressionStatement(2293)", "Delete Block(2294)", "Delete MethodDeclaration(2295)", "Delete TextElement: Returns the cache size.(2296)", "Delete TagElement(2297)", "Delete TextElement:  the cache size(2298)", "Delete TagElement: @return(2299)", "Delete Javadoc(2300)", "Delete PrimitiveType: int(2301)", "Delete SimpleName: size(2302)", "Delete SimpleName: size(2303)", "Delete ReturnStatement(2304)", "Delete Block(2305)", "Delete MethodDeclaration(2306)", "Delete TextElement: Clears the cache.(2307)", "Delete TagElement(2308)", "Delete Javadoc(2309)", "Delete PrimitiveType: void(2310)", "Delete SimpleName: clear(2311)", "Delete SimpleName: ref(2312)", "Delete NullLiteral(2313)", "Delete Assignment: =(2314)", "Delete ExpressionStatement(2315)", "Delete Block(2316)", "Delete MethodDeclaration(2317)", "Delete TextElement: Produces the cache entry set.(2318)", "Delete TagElement(2319)", "Delete TextElement:  the cache entry set(2320)", "Delete TagElement: @return(2321)", "Delete Javadoc(2322)", "Delete SimpleName: Set(2323)", "Delete SimpleType: Set(2324)", "Delete SimpleName: Entry(2325)", "Delete SimpleType: Entry(2326)", "Delete SimpleName: K(2327)", "Delete SimpleType: K(2328)", "Delete SimpleName: V(2329)", "Delete SimpleType: V(2330)", "Delete ParameterizedType: Entry<K,V>(2331)", "Delete ParameterizedType: Set<Entry<K,V>>(2332)", "Delete SimpleName: entrySet(2333)", "Delete SimpleName: Map(2334)", "Delete SimpleType: Map(2335)", "Delete SimpleName: K(2336)", "Delete SimpleType: K(2337)", "Delete SimpleName: V(2338)", "Delete SimpleType: V(2339)", "Delete ParameterizedType: Map<K,V>(2340)", "Delete SimpleName: map(2341)", "Delete SimpleName: ref(2342)", "Delete NullLiteral(2343)", "Delete InfixExpression: !=(2344)", "Delete SimpleName: ref(2345)", "Delete SimpleName: get(2346)", "Delete MethodInvocation(2347)", "Delete NullLiteral(2348)", "Delete ConditionalExpression(2349)", "Delete VariableDeclarationFragment(2350)", "Delete VariableDeclarationStatement(2351)", "Delete SimpleName: map(2352)", "Delete NullLiteral(2353)", "Delete InfixExpression: !=(2354)", "Delete SimpleName: map(2355)", "Delete SimpleName: entrySet(2356)", "Delete MethodInvocation(2357)", "Delete SimpleName: Collections(2358)", "Delete SimpleName: Entry(2359)", "Delete SimpleType: Entry(2360)", "Delete SimpleName: K(2361)", "Delete SimpleType: K(2362)", "Delete SimpleName: V(2363)", "Delete SimpleType: V(2364)", "Delete ParameterizedType: Entry<K,V>(2365)", "Delete SimpleName: emptySet(2366)", "Delete MethodInvocation(2367)", "Delete ConditionalExpression(2368)", "Delete ReturnStatement(2369)", "Delete Block(2370)", "Delete MethodDeclaration(2371)", "Delete TextElement: Gets a value from cache.(2372)", "Delete TagElement(2373)", "Delete SimpleName: key(2374)", "Delete TextElement:  the cache entry key(2375)", "Delete TagElement: @param(2376)", "Delete TextElement:  the cache entry value(2377)", "Delete TagElement: @return(2378)", "Delete Javadoc(2379)", "Delete SimpleName: V(2380)", "Delete SimpleType: V(2381)", "Delete SimpleName: get(2382)", "Delete SimpleName: K(2383)", "Delete SimpleType: K(2384)", "Delete SimpleName: key(2385)", "Delete SingleVariableDeclaration(2386)", "Delete Modifier: final(2387)", "Delete SimpleName: Map(2388)", "Delete SimpleType: Map(2389)", "Delete SimpleName: K(2390)", "Delete SimpleType: K(2391)", "Delete SimpleName: V(2392)", "Delete SimpleType: V(2393)", "Delete ParameterizedType: Map<K,V>(2394)", "Delete SimpleName: map(2395)", "Delete SimpleName: ref(2396)", "Delete NullLiteral(2397)", "Delete InfixExpression: !=(2398)", "Delete SimpleName: ref(2399)", "Delete SimpleName: get(2400)", "Delete MethodInvocation(2401)", "Delete NullLiteral(2402)", "Delete ConditionalExpression(2403)", "Delete VariableDeclarationFragment(2404)", "Delete VariableDeclarationStatement(2405)", "Delete SimpleName: map(2406)", "Delete NullLiteral(2407)", "Delete InfixExpression: !=(2408)", "Delete SimpleName: map(2409)", "Delete SimpleName: get(2410)", "Delete SimpleName: key(2411)", "Delete MethodInvocation(2412)", "Delete NullLiteral(2413)", "Delete ConditionalExpression(2414)", "Delete ReturnStatement(2415)", "Delete Block(2416)", "Delete MethodDeclaration(2417)", "Delete TextElement: Puts a value in cache.(2418)", "Delete TagElement(2419)", "Delete SimpleName: key(2420)", "Delete TextElement:  the cache entry key(2421)", "Delete TagElement: @param(2422)", "Delete SimpleName: script(2423)", "Delete TextElement:  the cache entry value(2424)", "Delete TagElement: @param(2425)", "Delete Javadoc(2426)", "Delete PrimitiveType: void(2427)", "Delete SimpleName: put(2428)", "Delete SimpleName: K(2429)", "Delete SimpleType: K(2430)", "Delete SimpleName: key(2431)", "Delete SingleVariableDeclaration(2432)", "Delete SimpleName: V(2433)", "Delete SimpleType: V(2434)", "Delete SimpleName: script(2435)", "Delete SingleVariableDeclaration(2436)", "Delete SimpleName: Map(2437)", "Delete SimpleType: Map(2438)", "Delete SimpleName: K(2439)", "Delete SimpleType: K(2440)", "Delete SimpleName: V(2441)", "Delete SimpleType: V(2442)", "Delete ParameterizedType: Map<K,V>(2443)", "Delete SimpleName: map(2444)", "Delete SimpleName: ref(2445)", "Delete NullLiteral(2446)", "Delete InfixExpression: !=(2447)", "Delete SimpleName: ref(2448)", "Delete SimpleName: get(2449)", "Delete MethodInvocation(2450)", "Delete NullLiteral(2451)", "Delete ConditionalExpression(2452)", "Delete VariableDeclarationFragment(2453)", "Delete VariableDeclarationStatement(2454)", "Delete SimpleName: map(2455)", "Delete NullLiteral(2456)", "Delete InfixExpression: ==(2457)", "Delete SimpleName: map(2458)", "Delete SimpleName: createCache(2459)", "Delete SimpleName: size(2460)", "Delete MethodInvocation(2461)", "Delete Assignment: =(2462)", "Delete ExpressionStatement(2463)", "Delete SimpleName: ref(2464)", "Delete SimpleName: SoftReference(2465)", "Delete SimpleType: SoftReference(2466)", "Delete SimpleName: Map(2467)", "Delete SimpleType: Map(2468)", "Delete SimpleName: K(2469)", "Delete SimpleType: K(2470)", "Delete SimpleName: V(2471)", "Delete SimpleType: V(2472)", "Delete ParameterizedType: Map<K,V>(2473)", "Delete ParameterizedType: SoftReference<Map<K,V>>(2474)", "Delete SimpleName: map(2475)", "Delete ClassInstanceCreation(2476)", "Delete Assignment: =(2477)", "Delete ExpressionStatement(2478)", "Delete Block(2479)", "Delete IfStatement(2480)", "Delete SimpleName: map(2481)", "Delete SimpleName: put(2482)", "Delete SimpleName: key(2483)", "Delete SimpleName: script(2484)", "Delete MethodInvocation(2485)", "Delete ExpressionStatement(2486)", "Delete Block(2487)", "Delete MethodDeclaration(2488)", "Delete TypeDeclaration: class(2489)", "Delete TextElement: Creates a cache.(2490)", "Delete TagElement(2491)", "Delete TextElement: <(2492)", "Delete SimpleName: K(2493)", "Delete TextElement: >(2494)", "Delete TextElement:  the key type(2495)", "Delete TagElement: @param(2496)", "Delete TextElement: <(2497)", "Delete SimpleName: V(2498)", "Delete TextElement: >(2499)", "Delete TextElement:  the value type(2500)", "Delete TagElement: @param(2501)", "Delete SimpleName: cacheSize(2502)", "Delete TextElement:  the cache size, must be > 0(2503)", "Delete TagElement: @param(2504)", "Delete TextElement:  a Map usable as a cache bounded to the given size(2505)", "Delete TagElement: @return(2506)", "Delete Javadoc(2507)", "Delete Modifier: protected(2508)", "Delete SimpleName: K(2509)", "Delete TypeParameter(2510)", "Delete SimpleName: V(2511)", "Delete TypeParameter(2512)", "Delete SimpleName: Map(2513)", "Delete SimpleType: Map(2514)", "Delete SimpleName: K(2515)", "Delete SimpleType: K(2516)", "Delete SimpleName: V(2517)", "Delete SimpleType: V(2518)", "Delete ParameterizedType: Map<K,V>(2519)", "Delete SimpleName: createCache(2520)", "Delete Modifier: final(2521)", "Delete PrimitiveType: int(2522)", "Delete SimpleName: cacheSize(2523)", "Delete SingleVariableDeclaration(2524)", "Delete QualifiedName: java.util.LinkedHashMap(2525)", "Delete SimpleType: java.util.LinkedHashMap(2526)", "Delete SimpleName: K(2527)", "Delete SimpleType: K(2528)", "Delete SimpleName: V(2529)", "Delete SimpleType: V(2530)", "Delete ParameterizedType: java.util.LinkedHashMap<K,V>(2531)", "Delete SimpleName: cacheSize(2532)", "Delete SimpleName: LOAD_FACTOR(2533)", "Delete BooleanLiteral: true(2534)", "Delete TextElement: Serial version UID. (2535)", "Delete TagElement(2536)", "Delete Javadoc(2537)", "Delete Modifier: private(2538)", "Delete Modifier: static(2539)", "Delete Modifier: final(2540)", "Delete PrimitiveType: long(2541)", "Delete SimpleName: serialVersionUID(2542)", "Delete NumberLiteral: 1L(2543)", "Delete VariableDeclarationFragment(2544)", "Delete FieldDeclaration(2545)", "Delete SimpleName: Override(2546)", "Delete MarkerAnnotation(2547)", "Delete Modifier: protected(2548)", "Delete PrimitiveType: boolean(2549)", "Delete SimpleName: removeEldestEntry(2550)", "Delete QualifiedName: Map.Entry(2551)", "Delete SimpleType: Map.Entry(2552)", "Delete SimpleName: K(2553)", "Delete SimpleType: K(2554)", "Delete SimpleName: V(2555)", "Delete SimpleType: V(2556)", "Delete ParameterizedType: Map.Entry<K,V>(2557)", "Delete SimpleName: eldest(2558)", "Delete SingleVariableDeclaration(2559)", "Delete SimpleName: size(2560)", "Delete MethodInvocation(2561)", "Delete SimpleName: cacheSize(2562)", "Delete InfixExpression: >(2563)", "Delete ReturnStatement(2564)", "Delete Block(2565)", "Delete MethodDeclaration(2566)", "Delete AnonymousClassDeclaration(2567)", "Delete ClassInstanceCreation(2568)", "Delete ReturnStatement(2569)", "Delete Block(2570)", "Delete MethodDeclaration(2571)", "Delete TextElement: Clears the expression cache.(2572)", "Delete TagElement(2573)", "Delete Javadoc(2574)", "Delete Modifier: public(2575)", "Delete PrimitiveType: void(2576)", "Delete SimpleName: clearCache(2577)", "Delete SimpleName: parser(2578)", "Delete SimpleName: cache(2579)", "Delete SimpleName: clear(2580)", "Delete MethodInvocation(2581)", "Delete ExpressionStatement(2582)", "Delete Block(2583)", "Delete SynchronizedStatement(2584)", "Delete Block(2585)", "Delete MethodDeclaration(2586)", "Delete TextElement: Gets the list of variables accessed by a script.(2587)", "Delete TextElement: <p>This method will visit all nodes of a script and extract all variables whether they(2588)", "Delete TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p>(2589)", "Delete TagElement(2590)", "Delete SimpleName: script(2591)", "Delete TextElement:  the script(2592)", "Delete TagElement: @param(2593)", "Delete TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string)(2594)", "Delete TextElement: or the empty set if no variables are used(2595)", "Delete TagElement: @return(2596)", "Delete Javadoc(2597)", "Delete Modifier: public(2598)", "Delete SimpleName: Set(2599)", "Delete SimpleType: Set(2600)", "Delete SimpleName: List(2601)", "Delete SimpleType: List(2602)", "Delete SimpleName: String(2603)", "Delete SimpleType: String(2604)", "Delete ParameterizedType: List<String>(2605)", "Delete ParameterizedType: Set<List<String>>(2606)", "Delete SimpleName: getVariables(2607)", "Delete SimpleName: Script(2608)", "Delete SimpleType: Script(2609)", "Delete SimpleName: script(2610)", "Delete SingleVariableDeclaration(2611)", "Delete SimpleName: script(2612)", "Delete SimpleName: ExpressionImpl(2613)", "Delete SimpleType: ExpressionImpl(2614)", "Delete InstanceofExpression(2615)", "Delete SimpleName: Set(2616)", "Delete SimpleType: Set(2617)", "Delete SimpleName: List(2618)", "Delete SimpleType: List(2619)", "Delete SimpleName: String(2620)", "Delete SimpleType: String(2621)", "Delete ParameterizedType: List<String>(2622)", "Delete ParameterizedType: Set<List<String>>(2623)", "Delete SimpleName: refs(2624)", "Delete SimpleName: LinkedHashSet(2625)", "Delete SimpleType: LinkedHashSet(2626)", "Delete SimpleName: List(2627)", "Delete SimpleType: List(2628)", "Delete SimpleName: String(2629)", "Delete SimpleType: String(2630)", "Delete ParameterizedType: List<String>(2631)", "Delete ParameterizedType: LinkedHashSet<List<String>>(2632)", "Delete ClassInstanceCreation(2633)", "Delete VariableDeclarationFragment(2634)", "Delete VariableDeclarationStatement(2635)", "Delete SimpleName: getVariables(2636)", "Delete SimpleName: ExpressionImpl(2637)", "Delete SimpleType: ExpressionImpl(2638)", "Delete SimpleName: script(2639)", "Delete CastExpression(2640)", "Delete ParenthesizedExpression(2641)", "Delete SimpleName: script(2642)", "Delete FieldAccess(2643)", "Delete SimpleName: refs(2644)", "Delete NullLiteral(2645)", "Delete MethodInvocation(2646)", "Delete ExpressionStatement(2647)", "Delete SimpleName: refs(2648)", "Delete ReturnStatement(2649)", "Delete Block(2650)", "Delete SimpleName: Collections(2651)", "Delete SimpleName: List(2652)", "Delete SimpleType: List(2653)", "Delete SimpleName: String(2654)", "Delete SimpleType: String(2655)", "Delete ParameterizedType: List<String>(2656)", "Delete SimpleName: emptySet(2657)", "Delete MethodInvocation(2658)", "Delete ReturnStatement(2659)", "Delete Block(2660)", "Delete IfStatement(2661)", "Delete Block(2662)", "Delete MethodDeclaration(2663)", "Delete TextElement: Fills up the list of variables accessed by a node.(2664)", "Delete TagElement(2665)", "Delete SimpleName: node(2666)", "Delete TextElement:  the node(2667)", "Delete TagElement: @param(2668)", "Delete SimpleName: refs(2669)", "Delete TextElement:  the set of variable being filled(2670)", "Delete TagElement: @param(2671)", "Delete SimpleName: ref(2672)", "Delete TextElement:  the current variable being filled(2673)", "Delete TagElement: @param(2674)", "Delete Javadoc(2675)", "Delete Modifier: protected(2676)", "Delete PrimitiveType: void(2677)", "Delete SimpleName: getVariables(2678)", "Delete SimpleName: JexlNode(2679)", "Delete SimpleType: JexlNode(2680)", "Delete SimpleName: node(2681)", "Delete SingleVariableDeclaration(2682)", "Delete SimpleName: Set(2683)", "Delete SimpleType: Set(2684)", "Delete SimpleName: List(2685)", "Delete SimpleType: List(2686)", "Delete SimpleName: String(2687)", "Delete SimpleType: String(2688)", "Delete ParameterizedType: List<String>(2689)", "Delete ParameterizedType: Set<List<String>>(2690)", "Delete SimpleName: refs(2691)", "Delete SingleVariableDeclaration(2692)", "Delete SimpleName: List(2693)", "Delete SimpleType: List(2694)", "Delete SimpleName: String(2695)", "Delete SimpleType: String(2696)", "Delete ParameterizedType: List<String>(2697)", "Delete SimpleName: ref(2698)", "Delete SingleVariableDeclaration(2699)", "Delete PrimitiveType: boolean(2700)", "Delete SimpleName: array(2701)", "Delete SimpleName: node(2702)", "Delete SimpleName: ASTArrayAccess(2703)", "Delete SimpleType: ASTArrayAccess(2704)", "Delete InstanceofExpression(2705)", "Delete VariableDeclarationFragment(2706)", "Delete VariableDeclarationStatement(2707)", "Delete PrimitiveType: boolean(2708)", "Delete SimpleName: reference(2709)", "Delete SimpleName: node(2710)", "Delete SimpleName: ASTReference(2711)", "Delete SimpleType: ASTReference(2712)", "Delete InstanceofExpression(2713)", "Delete VariableDeclarationFragment(2714)", "Delete VariableDeclarationStatement(2715)", "Delete PrimitiveType: int(2716)", "Delete SimpleName: num(2717)", "Delete SimpleName: node(2718)", "Delete SimpleName: jjtGetNumChildren(2719)", "Delete MethodInvocation(2720)", "Delete VariableDeclarationFragment(2721)", "Delete VariableDeclarationStatement(2722)", "Delete SimpleName: array(2723)", "Delete SimpleName: reference(2724)", "Delete InfixExpression: ||(2725)", "Delete SimpleName: List(2726)", "Delete SimpleType: List(2727)", "Delete SimpleName: String(2728)", "Delete SimpleType: String(2729)", "Delete ParameterizedType: List<String>(2730)", "Delete SimpleName: var(2731)", "Delete SimpleName: ref(2732)", "Delete NullLiteral(2733)", "Delete InfixExpression: !=(2734)", "Delete SimpleName: ref(2735)", "Delete SimpleName: ArrayList(2736)", "Delete SimpleType: ArrayList(2737)", "Delete SimpleName: String(2738)", "Delete SimpleType: String(2739)", "Delete ParameterizedType: ArrayList<String>(2740)", "Delete ClassInstanceCreation(2741)", "Delete ConditionalExpression(2742)", "Delete VariableDeclarationFragment(2743)", "Delete VariableDeclarationStatement(2744)", "Delete PrimitiveType: boolean(2745)", "Delete SimpleName: varf(2746)", "Delete BooleanLiteral: true(2747)", "Delete VariableDeclarationFragment(2748)", "Delete VariableDeclarationStatement(2749)", "Delete PrimitiveType: int(2750)", "Delete SimpleName: i(2751)", "Delete NumberLiteral: 0(2752)", "Delete VariableDeclarationFragment(2753)", "Delete VariableDeclarationExpression(2754)", "Delete SimpleName: i(2755)", "Delete SimpleName: num(2756)", "Delete InfixExpression: <(2757)", "Delete SimpleName: i(2758)", "Delete PrefixExpression: ++(2759)", "Delete SimpleName: JexlNode(2760)", "Delete SimpleType: JexlNode(2761)", "Delete SimpleName: child(2762)", "Delete SimpleName: node(2763)", "Delete SimpleName: jjtGetChild(2764)", "Delete SimpleName: i(2765)", "Delete MethodInvocation(2766)", "Delete VariableDeclarationFragment(2767)", "Delete VariableDeclarationStatement(2768)", "Delete SimpleName: array(2769)", "Delete SimpleName: child(2770)", "Delete SimpleName: ASTReference(2771)", "Delete SimpleType: ASTReference(2772)", "Delete InstanceofExpression(2773)", "Delete SimpleName: child(2774)", "Delete SimpleName: jjtGetNumChildren(2775)", "Delete MethodInvocation(2776)", "Delete NumberLiteral: 1(2777)", "Delete InfixExpression: ==(2778)", "Delete InfixExpression: &&(2779)", "Delete SimpleName: JexlNode(2780)", "Delete SimpleType: JexlNode(2781)", "Delete SimpleName: desc(2782)", "Delete SimpleName: child(2783)", "Delete SimpleName: jjtGetChild(2784)", "Delete NumberLiteral: 0(2785)", "Delete MethodInvocation(2786)", "Delete VariableDeclarationFragment(2787)", "Delete VariableDeclarationStatement(2788)", "Delete SimpleName: varf(2789)", "Delete SimpleName: desc(2790)", "Delete SimpleName: isConstant(2791)", "Delete MethodInvocation(2792)", "Delete InfixExpression: &&(2793)", "Delete SimpleName: String(2794)", "Delete SimpleType: String(2795)", "Delete SimpleName: image(2796)", "Delete QualifiedName: desc.image(2797)", "Delete VariableDeclarationFragment(2798)", "Delete VariableDeclarationStatement(2799)", "Delete SimpleName: image(2800)", "Delete NullLiteral(2801)", "Delete InfixExpression: ==(2802)", "Delete SimpleName: var(2803)", "Delete SimpleName: add(2804)", "Delete SimpleName: Debugger(2805)", "Delete SimpleType: Debugger(2806)", "Delete ClassInstanceCreation(2807)", "Delete SimpleName: data(2808)", "Delete SimpleName: desc(2809)", "Delete MethodInvocation(2810)", "Delete MethodInvocation(2811)", "Delete ExpressionStatement(2812)", "Delete Block(2813)", "Delete SimpleName: var(2814)", "Delete SimpleName: add(2815)", "Delete SimpleName: image(2816)", "Delete MethodInvocation(2817)", "Delete ExpressionStatement(2818)", "Delete Block(2819)", "Delete IfStatement(2820)", "Delete Block(2821)", "Delete SimpleName: desc(2822)", "Delete SimpleName: ASTIdentifier(2823)", "Delete SimpleType: ASTIdentifier(2824)", "Delete InstanceofExpression(2825)", "Delete SimpleName: ASTIdentifier(2826)", "Delete SimpleType: ASTIdentifier(2827)", "Delete SimpleName: desc(2828)", "Delete CastExpression(2829)", "Delete ParenthesizedExpression(2830)", "Delete SimpleName: getRegister(2831)", "Delete MethodInvocation(2832)", "Delete NumberLiteral: 0(2833)", "Delete InfixExpression: <(2834)", "Delete SimpleName: List(2835)", "Delete SimpleType: List(2836)", "Delete SimpleName: String(2837)", "Delete SimpleType: String(2838)", "Delete ParameterizedType: List<String>(2839)", "Delete SimpleName: di(2840)", "Delete SimpleName: ArrayList(2841)", "Delete SimpleType: ArrayList(2842)", "Delete SimpleName: String(2843)", "Delete SimpleType: String(2844)", "Delete ParameterizedType: ArrayList<String>(2845)", "Delete NumberLiteral: 1(2846)", "Delete ClassInstanceCreation(2847)", "Delete VariableDeclarationFragment(2848)", "Delete VariableDeclarationStatement(2849)", "Delete SimpleName: di(2850)", "Delete SimpleName: add(2851)", "Delete QualifiedName: desc.image(2852)", "Delete MethodInvocation(2853)", "Delete ExpressionStatement(2854)", "Delete SimpleName: refs(2855)", "Delete SimpleName: add(2856)", "Delete SimpleName: di(2857)", "Delete MethodInvocation(2858)", "Delete ExpressionStatement(2859)", "Delete Block(2860)", "Delete IfStatement(2861)", "Delete SimpleName: var(2862)", "Delete SimpleName: ArrayList(2863)", "Delete SimpleType: ArrayList(2864)", "Delete SimpleName: String(2865)", "Delete SimpleType: String(2866)", "Delete ParameterizedType: ArrayList<String>(2867)", "Delete ClassInstanceCreation(2868)", "Delete Assignment: =(2869)", "Delete ExpressionStatement(2870)", "Delete SimpleName: varf(2871)", "Delete BooleanLiteral: false(2872)", "Delete Assignment: =(2873)", "Delete ExpressionStatement(2874)", "Delete Block(2875)", "Delete IfStatement(2876)", "Delete IfStatement(2877)", "Delete ContinueStatement(2878)", "Delete Block(2879)", "Delete SimpleName: child(2880)", "Delete SimpleName: ASTIdentifier(2881)", "Delete SimpleType: ASTIdentifier(2882)", "Delete InstanceofExpression(2883)", "Delete SimpleName: i(2884)", "Delete NumberLiteral: 0(2885)", "Delete InfixExpression: ==(2886)", "Delete SimpleName: ASTIdentifier(2887)", "Delete SimpleType: ASTIdentifier(2888)", "Delete SimpleName: child(2889)", "Delete CastExpression(2890)", "Delete ParenthesizedExpression(2891)", "Delete SimpleName: getRegister(2892)", "Delete MethodInvocation(2893)", "Delete NumberLiteral: 0(2894)", "Delete InfixExpression: <(2895)", "Delete ParenthesizedExpression(2896)", "Delete InfixExpression: &&(2897)", "Delete SimpleName: var(2898)", "Delete SimpleName: add(2899)", "Delete QualifiedName: child.image(2900)", "Delete MethodInvocation(2901)", "Delete ExpressionStatement(2902)", "Delete Block(2903)", "Delete IfStatement(2904)", "Delete ContinueStatement(2905)", "Delete Block(2906)", "Delete IfStatement(2907)", "Delete IfStatement(2908)", "Delete Block(2909)", "Delete SimpleName: child(2910)", "Delete SimpleName: ASTIdentifier(2911)", "Delete SimpleType: ASTIdentifier(2912)", "Delete InstanceofExpression(2913)", "Delete SimpleName: ASTIdentifier(2914)", "Delete SimpleType: ASTIdentifier(2915)", "Delete SimpleName: child(2916)", "Delete CastExpression(2917)", "Delete ParenthesizedExpression(2918)", "Delete SimpleName: getRegister(2919)", "Delete MethodInvocation(2920)", "Delete NumberLiteral: 0(2921)", "Delete InfixExpression: <(2922)", "Delete SimpleName: var(2923)", "Delete SimpleName: add(2924)", "Delete QualifiedName: child.image(2925)", "Delete MethodInvocation(2926)", "Delete ExpressionStatement(2927)", "Delete Block(2928)", "Delete IfStatement(2929)", "Delete ContinueStatement(2930)", "Delete Block(2931)", "Delete IfStatement(2932)", "Delete Block(2933)", "Delete IfStatement(2934)", "Delete SimpleName: getVariables(2935)", "Delete SimpleName: child(2936)", "Delete SimpleName: refs(2937)", "Delete SimpleName: var(2938)", "Delete MethodInvocation(2939)", "Delete ExpressionStatement(2940)", "Delete Block(2941)", "Delete ForStatement(2942)", "Delete SimpleName: var(2943)", "Delete SimpleName: isEmpty(2944)", "Delete MethodInvocation(2945)", "Delete PrefixExpression: !(2946)", "Delete SimpleName: var(2947)", "Delete SimpleName: ref(2948)", "Delete InfixExpression: !=(2949)", "Delete InfixExpression: &&(2950)", "Delete SimpleName: refs(2951)", "Delete SimpleName: add(2952)", "Delete SimpleName: var(2953)", "Delete MethodInvocation(2954)", "Delete ExpressionStatement(2955)", "Delete Block(2956)", "Delete IfStatement(2957)", "Delete Block(2958)", "Delete PrimitiveType: int(2959)", "Delete SimpleName: i(2960)", "Delete NumberLiteral: 0(2961)", "Delete VariableDeclarationFragment(2962)", "Delete VariableDeclarationExpression(2963)", "Delete SimpleName: i(2964)", "Delete SimpleName: num(2965)", "Delete InfixExpression: <(2966)", "Delete SimpleName: i(2967)", "Delete PrefixExpression: ++(2968)", "Delete SimpleName: getVariables(2969)", "Delete SimpleName: node(2970)", "Delete SimpleName: jjtGetChild(2971)", "Delete SimpleName: i(2972)", "Delete MethodInvocation(2973)", "Delete SimpleName: refs(2974)", "Delete NullLiteral(2975)", "Delete MethodInvocation(2976)", "Delete ExpressionStatement(2977)", "Delete Block(2978)", "Delete ForStatement(2979)", "Delete Block(2980)", "Delete IfStatement(2981)", "Delete Block(2982)", "Delete MethodDeclaration(2983)", "Delete TextElement: Gets the array of parameters from a script.(2984)", "Delete TagElement(2985)", "Delete SimpleName: script(2986)", "Delete TextElement:  the script(2987)", "Delete TagElement: @param(2988)", "Delete TextElement:  the parameters which may be empty (but not null) if no parameters were defined(2989)", "Delete TagElement: @return(2990)", "Delete Javadoc(2991)", "Delete Modifier: protected(2992)", "Delete SimpleName: String(2993)", "Delete SimpleType: String(2994)", "Delete Dimension(2995)", "Delete ArrayType: String[](2996)", "Delete SimpleName: getParameters(2997)", "Delete SimpleName: Script(2998)", "Delete SimpleType: Script(2999)", "Delete SimpleName: script(3000)", "Delete SingleVariableDeclaration(3001)", "Delete SimpleName: script(3002)", "Delete SimpleName: ExpressionImpl(3003)", "Delete SimpleType: ExpressionImpl(3004)", "Delete InstanceofExpression(3005)", "Delete SimpleName: ExpressionImpl(3006)", "Delete SimpleType: ExpressionImpl(3007)", "Delete SimpleName: script(3008)", "Delete CastExpression(3009)", "Delete ParenthesizedExpression(3010)", "Delete SimpleName: getParameters(3011)", "Delete MethodInvocation(3012)", "Delete ReturnStatement(3013)", "Delete Block(3014)", "Delete SimpleName: String(3015)", "Delete SimpleType: String(3016)", "Delete Dimension(3017)", "Delete ArrayType: String[](3018)", "Delete NumberLiteral: 0(3019)", "Delete ArrayCreation(3020)", "Delete ReturnStatement(3021)", "Delete Block(3022)", "Delete IfStatement(3023)", "Delete Block(3024)", "Delete MethodDeclaration(3025)", "Delete TextElement: Gets the array of local variable from a script.(3026)", "Delete TagElement(3027)", "Delete SimpleName: script(3028)", "Delete TextElement:  the script(3029)", "Delete TagElement: @param(3030)", "Delete TextElement:  the local variables array which may be empty (but not null) if no local variables were defined(3031)", "Delete TagElement: @return(3032)", "Delete Javadoc(3033)", "Delete Modifier: protected(3034)", "Delete SimpleName: String(3035)", "Delete SimpleType: String(3036)", "Delete Dimension(3037)", "Delete ArrayType: String[](3038)", "Delete SimpleName: getLocalVariables(3039)", "Delete SimpleName: Script(3040)", "Delete SimpleType: Script(3041)", "Delete SimpleName: script(3042)", "Delete SingleVariableDeclaration(3043)", "Delete SimpleName: script(3044)", "Delete SimpleName: ExpressionImpl(3045)", "Delete SimpleType: ExpressionImpl(3046)", "Delete InstanceofExpression(3047)", "Delete SimpleName: ExpressionImpl(3048)", "Delete SimpleType: ExpressionImpl(3049)", "Delete SimpleName: script(3050)", "Delete CastExpression(3051)", "Delete ParenthesizedExpression(3052)", "Delete SimpleName: getLocalVariables(3053)", "Delete MethodInvocation(3054)", "Delete ReturnStatement(3055)", "Delete Block(3056)", "Delete SimpleName: String(3057)", "Delete SimpleType: String(3058)", "Delete Dimension(3059)", "Delete ArrayType: String[](3060)", "Delete NumberLiteral: 0(3061)", "Delete ArrayCreation(3062)", "Delete ReturnStatement(3063)", "Delete Block(3064)", "Delete IfStatement(3065)", "Delete Block(3066)", "Delete MethodDeclaration(3067)", "Delete TextElement: A script scope, stores the declaration of parameters and local variables.(3068)", "Delete TagElement(3069)", "Delete Javadoc(3070)", "Delete Modifier: public(3071)", "Delete Modifier: static(3072)", "Delete Modifier: final(3073)", "Delete SimpleName: Scope(3074)", "Delete TextElement: The number of parameters.(3075)", "Delete TagElement(3076)", "Delete Javadoc(3077)", "Delete Modifier: protected(3078)", "Delete Modifier: final(3079)", "Delete PrimitiveType: int(3080)", "Delete SimpleName: parms(3081)", "Delete VariableDeclarationFragment(3082)", "Delete FieldDeclaration(3083)", "Delete TextElement: The map of named registers aka script parameters.(3084)", "Delete TextElement: Each parameter is associated to a register and is materialized as an offset in the registers array used(3085)", "Delete TextElement: during evaluation.(3086)", "Delete TagElement(3087)", "Delete Javadoc(3088)", "Delete Modifier: protected(3089)", "Delete SimpleName: Map(3090)", "Delete SimpleType: Map(3091)", "Delete SimpleName: String(3092)", "Delete SimpleType: String(3093)", "Delete SimpleName: Integer(3094)", "Delete SimpleType: Integer(3095)", "Delete ParameterizedType: Map<String,Integer>(3096)", "Delete SimpleName: namedRegisters(3097)", "Delete NullLiteral(3098)", "Delete VariableDeclarationFragment(3099)", "Delete FieldDeclaration(3100)", "Delete TextElement: Creates a new scope with a list of parameters.(3101)", "Delete TagElement(3102)", "Delete SimpleName: parameters(3103)", "Delete TextElement:  the list of parameters(3104)", "Delete TagElement: @param(3105)", "Delete Javadoc(3106)", "Delete Modifier: public(3107)", "Delete SimpleName: Scope(3108)", "Delete SimpleName: String(3109)", "Delete SimpleType: String(3110)", "Delete SimpleName: parameters(3111)", "Delete SingleVariableDeclaration(3112)", "Delete SimpleName: parameters(3113)", "Delete NullLiteral(3114)", "Delete InfixExpression: !=(3115)", "Delete SimpleName: parms(3116)", "Delete QualifiedName: parameters.length(3117)", "Delete Assignment: =(3118)", "Delete ExpressionStatement(3119)", "Delete SimpleName: namedRegisters(3120)", "Delete SimpleName: LinkedHashMap(3121)", "Delete SimpleType: LinkedHashMap(3122)", "Delete SimpleName: String(3123)", "Delete SimpleType: String(3124)", "Delete SimpleName: Integer(3125)", "Delete SimpleType: Integer(3126)", "Delete ParameterizedType: LinkedHashMap<String,Integer>(3127)", "Delete ClassInstanceCreation(3128)", "Delete Assignment: =(3129)", "Delete ExpressionStatement(3130)", "Delete PrimitiveType: int(3131)", "Delete SimpleName: p(3132)", "Delete NumberLiteral: 0(3133)", "Delete VariableDeclarationFragment(3134)", "Delete VariableDeclarationExpression(3135)", "Delete SimpleName: p(3136)", "Delete SimpleName: parms(3137)", "Delete InfixExpression: <(3138)", "Delete SimpleName: p(3139)", "Delete PrefixExpression: ++(3140)", "Delete SimpleName: namedRegisters(3141)", "Delete SimpleName: put(3142)", "Delete SimpleName: parameters(3143)", "Delete SimpleName: p(3144)", "Delete ArrayAccess(3145)", "Delete SimpleName: Integer(3146)", "Delete SimpleName: valueOf(3147)", "Delete SimpleName: p(3148)", "Delete MethodInvocation(3149)", "Delete MethodInvocation(3150)", "Delete ExpressionStatement(3151)", "Delete Block(3152)", "Delete ForStatement(3153)", "Delete Block(3154)", "Delete SimpleName: parms(3155)", "Delete NumberLiteral: 0(3156)", "Delete Assignment: =(3157)", "Delete ExpressionStatement(3158)", "Delete Block(3159)", "Delete IfStatement(3160)", "Delete Block(3161)", "Delete MethodDeclaration(3162)", "Delete SimpleName: Override(3163)", "Delete MarkerAnnotation(3164)", "Delete Modifier: public(3165)", "Delete PrimitiveType: int(3166)", "Delete SimpleName: hashCode(3167)", "Delete SimpleName: namedRegisters(3168)", "Delete NullLiteral(3169)", "Delete InfixExpression: ==(3170)", "Delete NumberLiteral: 0(3171)", "Delete SimpleName: parms(3172)", "Delete SimpleName: namedRegisters(3173)", "Delete SimpleName: hashCode(3174)", "Delete MethodInvocation(3175)", "Delete InfixExpression: ^(3176)", "Delete ConditionalExpression(3177)", "Delete ReturnStatement(3178)", "Delete Block(3179)", "Delete MethodDeclaration(3180)", "Delete SimpleName: Override(3181)", "Delete MarkerAnnotation(3182)", "Delete Modifier: public(3183)", "Delete PrimitiveType: boolean(3184)", "Delete SimpleName: equals(3185)", "Delete SimpleName: Object(3186)", "Delete SimpleType: Object(3187)", "Delete SimpleName: o(3188)", "Delete SingleVariableDeclaration(3189)", "Delete SimpleName: o(3190)", "Delete SimpleName: Scope(3191)", "Delete SimpleType: Scope(3192)", "Delete InstanceofExpression(3193)", "Delete SimpleName: equals(3194)", "Delete SimpleName: Scope(3195)", "Delete SimpleType: Scope(3196)", "Delete SimpleName: o(3197)", "Delete CastExpression(3198)", "Delete MethodInvocation(3199)", "Delete InfixExpression: &&(3200)", "Delete ReturnStatement(3201)", "Delete Block(3202)", "Delete MethodDeclaration(3203)", "Delete TextElement: Whether this frame is equal to another.(3204)", "Delete TagElement(3205)", "Delete SimpleName: frame(3206)", "Delete TextElement:  the frame to compare to(3207)", "Delete TagElement: @param(3208)", "Delete TextElement:  true if equal, false otherwise(3209)", "Delete TagElement: @return(3210)", "Delete Javadoc(3211)", "Delete Modifier: public(3212)", "Delete PrimitiveType: boolean(3213)", "Delete SimpleName: equals(3214)", "Delete SimpleName: Scope(3215)", "Delete SimpleType: Scope(3216)", "Delete SimpleName: frame(3217)", "Delete SingleVariableDeclaration(3218)", "Delete ThisExpression(3219)", "Delete SimpleName: frame(3220)", "Delete InfixExpression: ==(3221)", "Delete BooleanLiteral: true(3222)", "Delete ReturnStatement(3223)", "Delete Block(3224)", "Delete SimpleName: frame(3225)", "Delete NullLiteral(3226)", "Delete InfixExpression: ==(3227)", "Delete SimpleName: parms(3228)", "Delete QualifiedName: frame.parms(3229)", "Delete InfixExpression: !=(3230)", "Delete InfixExpression: ||(3231)", "Delete BooleanLiteral: false(3232)", "Delete ReturnStatement(3233)", "Delete Block(3234)", "Delete SimpleName: namedRegisters(3235)", "Delete NullLiteral(3236)", "Delete InfixExpression: ==(3237)", "Delete QualifiedName: frame.namedRegisters(3238)", "Delete NullLiteral(3239)", "Delete InfixExpression: ==(3240)", "Delete ReturnStatement(3241)", "Delete Block(3242)", "Delete SimpleName: namedRegisters(3243)", "Delete SimpleName: equals(3244)", "Delete QualifiedName: frame.namedRegisters(3245)", "Delete MethodInvocation(3246)", "Delete ReturnStatement(3247)", "Delete Block(3248)", "Delete IfStatement(3249)", "Delete IfStatement(3250)", "Delete IfStatement(3251)", "Delete Block(3252)", "Delete MethodDeclaration(3253)", "Delete TextElement: Checks whether an identifier is a local variable or argument, ie stored in a register. (3254)", "Delete TagElement(3255)", "Delete SimpleName: name(3256)", "Delete TextElement:  the register name(3257)", "Delete TagElement: @param(3258)", "Delete TextElement:  the register index(3259)", "Delete TagElement: @return(3260)", "Delete Javadoc(3261)", "Delete Modifier: public(3262)", "Delete SimpleName: Integer(3263)", "Delete SimpleType: Integer(3264)", "Delete SimpleName: getRegister(3265)", "Delete SimpleName: String(3266)", "Delete SimpleType: String(3267)", "Delete SimpleName: name(3268)", "Delete SingleVariableDeclaration(3269)", "Delete SimpleName: namedRegisters(3270)", "Delete NullLiteral(3271)", "Delete InfixExpression: !=(3272)", "Delete SimpleName: namedRegisters(3273)", "Delete SimpleName: get(3274)", "Delete SimpleName: name(3275)", "Delete MethodInvocation(3276)", "Delete NullLiteral(3277)", "Delete ConditionalExpression(3278)", "Delete ReturnStatement(3279)", "Delete Block(3280)", "Delete MethodDeclaration(3281)", "Delete TextElement: Declares a local variable.(3282)", "Delete TextElement: <p>(3283)", "Delete TextElement: This method creates an new entry in the named register map.(3284)", "Delete TextElement: </p>(3285)", "Delete TagElement(3286)", "Delete SimpleName: name(3287)", "Delete TextElement:  the variable name(3288)", "Delete TagElement: @param(3289)", "Delete TextElement:  the register index storing this variable(3290)", "Delete TagElement: @return(3291)", "Delete Javadoc(3292)", "Delete Modifier: public(3293)", "Delete SimpleName: Integer(3294)", "Delete SimpleType: Integer(3295)", "Delete SimpleName: declareVariable(3296)", "Delete SimpleName: String(3297)", "Delete SimpleType: String(3298)", "Delete SimpleName: name(3299)", "Delete SingleVariableDeclaration(3300)", "Delete SimpleName: namedRegisters(3301)", "Delete NullLiteral(3302)", "Delete InfixExpression: ==(3303)", "Delete SimpleName: namedRegisters(3304)", "Delete SimpleName: LinkedHashMap(3305)", "Delete SimpleType: LinkedHashMap(3306)", "Delete SimpleName: String(3307)", "Delete SimpleType: String(3308)", "Delete SimpleName: Integer(3309)", "Delete SimpleType: Integer(3310)", "Delete ParameterizedType: LinkedHashMap<String,Integer>(3311)", "Delete ClassInstanceCreation(3312)", "Delete Assignment: =(3313)", "Delete ExpressionStatement(3314)", "Delete Block(3315)", "Delete IfStatement(3316)", "Delete SimpleName: Integer(3317)", "Delete SimpleType: Integer(3318)", "Delete SimpleName: register(3319)", "Delete SimpleName: namedRegisters(3320)", "Delete SimpleName: get(3321)", "Delete SimpleName: name(3322)", "Delete MethodInvocation(3323)", "Delete VariableDeclarationFragment(3324)", "Delete VariableDeclarationStatement(3325)", "Delete SimpleName: register(3326)", "Delete NullLiteral(3327)", "Delete InfixExpression: ==(3328)", "Delete SimpleName: register(3329)", "Delete SimpleName: Integer(3330)", "Delete SimpleName: valueOf(3331)", "Delete SimpleName: namedRegisters(3332)", "Delete SimpleName: size(3333)", "Delete MethodInvocation(3334)", "Delete MethodInvocation(3335)", "Delete Assignment: =(3336)", "Delete ExpressionStatement(3337)", "Delete SimpleName: namedRegisters(3338)", "Delete SimpleName: put(3339)", "Delete SimpleName: name(3340)", "Delete SimpleName: register(3341)", "Delete MethodInvocation(3342)", "Delete ExpressionStatement(3343)", "Delete Block(3344)", "Delete IfStatement(3345)", "Delete SimpleName: register(3346)", "Delete ReturnStatement(3347)", "Delete Block(3348)", "Delete MethodDeclaration(3349)", "Delete TextElement: Creates a frame by copying values up to the number of parameters.(3350)", "Delete TagElement(3351)", "Delete SimpleName: values(3352)", "Delete TextElement:  the argument values(3353)", "Delete TagElement: @param(3354)", "Delete TextElement:  the arguments array(3355)", "Delete TagElement: @return(3356)", "Delete Javadoc(3357)", "Delete Modifier: public(3358)", "Delete SimpleName: Frame(3359)", "Delete SimpleType: Frame(3360)", "Delete SimpleName: createFrame(3361)", "Delete SimpleName: Object(3362)", "Delete SimpleType: Object(3363)", "Delete SimpleName: values(3364)", "Delete SingleVariableDeclaration(3365)", "Delete SimpleName: namedRegisters(3366)", "Delete NullLiteral(3367)", "Delete InfixExpression: !=(3368)", "Delete SimpleName: Object(3369)", "Delete SimpleType: Object(3370)", "Delete Dimension(3371)", "Delete ArrayType: Object[](3372)", "Delete SimpleName: arguments(3373)", "Delete SimpleName: Object(3374)", "Delete SimpleType: Object(3375)", "Delete Dimension(3376)", "Delete ArrayType: Object[](3377)", "Delete SimpleName: namedRegisters(3378)", "Delete SimpleName: size(3379)", "Delete MethodInvocation(3380)", "Delete ArrayCreation(3381)", "Delete VariableDeclarationFragment(3382)", "Delete VariableDeclarationStatement(3383)", "Delete SimpleName: values(3384)", "Delete NullLiteral(3385)", "Delete InfixExpression: !=(3386)", "Delete SimpleName: System(3387)", "Delete SimpleName: arraycopy(3388)", "Delete SimpleName: values(3389)", "Delete NumberLiteral: 0(3390)", "Delete SimpleName: arguments(3391)", "Delete NumberLiteral: 0(3392)", "Delete SimpleName: Math(3393)", "Delete SimpleName: min(3394)", "Delete SimpleName: parms(3395)", "Delete QualifiedName: values.length(3396)", "Delete MethodInvocation(3397)", "Delete MethodInvocation(3398)", "Delete ExpressionStatement(3399)", "Delete Block(3400)", "Delete IfStatement(3401)", "Delete SimpleName: Frame(3402)", "Delete SimpleType: Frame(3403)", "Delete SimpleName: arguments(3404)", "Delete SimpleName: namedRegisters(3405)", "Delete SimpleName: keySet(3406)", "Delete MethodInvocation(3407)", "Delete SimpleName: toArray(3408)", "Delete SimpleName: String(3409)", "Delete SimpleType: String(3410)", "Delete Dimension(3411)", "Delete ArrayType: String[](3412)", "Delete NumberLiteral: 0(3413)", "Delete ArrayCreation(3414)", "Delete MethodInvocation(3415)", "Delete ClassInstanceCreation(3416)", "Delete ReturnStatement(3417)", "Delete Block(3418)", "Delete NullLiteral(3419)", "Delete ReturnStatement(3420)", "Delete Block(3421)", "Delete IfStatement(3422)", "Delete Block(3423)", "Delete MethodDeclaration(3424)", "Delete TextElement: Gets the (maximum) number of arguments this script expects.(3425)", "Delete TagElement(3426)", "Delete TextElement:  the number of parameters(3427)", "Delete TagElement: @return(3428)", "Delete Javadoc(3429)", "Delete Modifier: public(3430)", "Delete PrimitiveType: int(3431)", "Delete SimpleName: getArgCount(3432)", "Delete SimpleName: parms(3433)", "Delete ReturnStatement(3434)", "Delete Block(3435)", "Delete MethodDeclaration(3436)", "Delete TextElement: Gets this script registers, i.e. parameters and local variables.(3437)", "Delete TagElement(3438)", "Delete TextElement:  the register names(3439)", "Delete TagElement: @return(3440)", "Delete Javadoc(3441)", "Delete Modifier: public(3442)", "Delete SimpleName: String(3443)", "Delete SimpleType: String(3444)", "Delete Dimension(3445)", "Delete ArrayType: String[](3446)", "Delete SimpleName: getRegisters(3447)", "Delete SimpleName: namedRegisters(3448)", "Delete NullLiteral(3449)", "Delete InfixExpression: !=(3450)", "Delete SimpleName: namedRegisters(3451)", "Delete SimpleName: keySet(3452)", "Delete MethodInvocation(3453)", "Delete SimpleName: toArray(3454)", "Delete SimpleName: String(3455)", "Delete SimpleType: String(3456)", "Delete Dimension(3457)", "Delete ArrayType: String[](3458)", "Delete NumberLiteral: 0(3459)", "Delete ArrayCreation(3460)", "Delete MethodInvocation(3461)", "Delete SimpleName: String(3462)", "Delete SimpleType: String(3463)", "Delete Dimension(3464)", "Delete ArrayType: String[](3465)", "Delete NumberLiteral: 0(3466)", "Delete ArrayCreation(3467)", "Delete ConditionalExpression(3468)", "Delete ReturnStatement(3469)", "Delete Block(3470)", "Delete MethodDeclaration(3471)", "Delete TextElement: Gets this script parameters, i.e. registers assigned before creating local variables.(3472)", "Delete TagElement(3473)", "Delete TextElement:  the parameter names(3474)", "Delete TagElement: @return(3475)", "Delete Javadoc(3476)", "Delete Modifier: public(3477)", "Delete SimpleName: String(3478)", "Delete SimpleType: String(3479)", "Delete Dimension(3480)", "Delete ArrayType: String[](3481)", "Delete SimpleName: getParameters(3482)", "Delete SimpleName: namedRegisters(3483)", "Delete NullLiteral(3484)", "Delete InfixExpression: !=(3485)", "Delete SimpleName: parms(3486)", "Delete NumberLiteral: 0(3487)", "Delete InfixExpression: >(3488)", "Delete InfixExpression: &&(3489)", "Delete SimpleName: String(3490)", "Delete SimpleType: String(3491)", "Delete Dimension(3492)", "Delete ArrayType: String[](3493)", "Delete SimpleName: pa(3494)", "Delete SimpleName: String(3495)", "Delete SimpleType: String(3496)", "Delete Dimension(3497)", "Delete ArrayType: String[](3498)", "Delete SimpleName: parms(3499)", "Delete ArrayCreation(3500)", "Delete VariableDeclarationFragment(3501)", "Delete VariableDeclarationStatement(3502)", "Delete PrimitiveType: int(3503)", "Delete SimpleName: p(3504)", "Delete NumberLiteral: 0(3505)", "Delete VariableDeclarationFragment(3506)", "Delete VariableDeclarationStatement(3507)", "Delete QualifiedName: Map.Entry(3508)", "Delete SimpleType: Map.Entry(3509)", "Delete SimpleName: String(3510)", "Delete SimpleType: String(3511)", "Delete SimpleName: Integer(3512)", "Delete SimpleType: Integer(3513)", "Delete ParameterizedType: Map.Entry<String,Integer>(3514)", "Delete SimpleName: entry(3515)", "Delete SingleVariableDeclaration(3516)", "Delete SimpleName: namedRegisters(3517)", "Delete SimpleName: entrySet(3518)", "Delete MethodInvocation(3519)", "Delete SimpleName: entry(3520)", "Delete SimpleName: getValue(3521)", "Delete MethodInvocation(3522)", "Delete SimpleName: intValue(3523)", "Delete MethodInvocation(3524)", "Delete SimpleName: parms(3525)", "Delete InfixExpression: <(3526)", "Delete SimpleName: pa(3527)", "Delete SimpleName: p(3528)", "Delete PostfixExpression: ++(3529)", "Delete ArrayAccess(3530)", "Delete SimpleName: entry(3531)", "Delete SimpleName: getKey(3532)", "Delete MethodInvocation(3533)", "Delete Assignment: =(3534)", "Delete ExpressionStatement(3535)", "Delete Block(3536)", "Delete IfStatement(3537)", "Delete Block(3538)", "Delete EnhancedForStatement(3539)", "Delete SimpleName: pa(3540)", "Delete ReturnStatement(3541)", "Delete Block(3542)", "Delete NullLiteral(3543)", "Delete ReturnStatement(3544)", "Delete Block(3545)", "Delete IfStatement(3546)", "Delete Block(3547)", "Delete MethodDeclaration(3548)", "Delete TextElement: Gets this script local variable, i.e. registers assigned to local variables.(3549)", "Delete TagElement(3550)", "Delete TextElement:  the parameter names(3551)", "Delete TagElement: @return(3552)", "Delete Javadoc(3553)", "Delete Modifier: public(3554)", "Delete SimpleName: String(3555)", "Delete SimpleType: String(3556)", "Delete Dimension(3557)", "Delete ArrayType: String[](3558)", "Delete SimpleName: getLocalVariables(3559)", "Delete SimpleName: namedRegisters(3560)", "Delete NullLiteral(3561)", "Delete InfixExpression: !=(3562)", "Delete SimpleName: parms(3563)", "Delete NumberLiteral: 0(3564)", "Delete InfixExpression: >(3565)", "Delete InfixExpression: &&(3566)", "Delete SimpleName: String(3567)", "Delete SimpleType: String(3568)", "Delete Dimension(3569)", "Delete ArrayType: String[](3570)", "Delete SimpleName: pa(3571)", "Delete SimpleName: String(3572)", "Delete SimpleType: String(3573)", "Delete Dimension(3574)", "Delete ArrayType: String[](3575)", "Delete SimpleName: parms(3576)", "Delete ArrayCreation(3577)", "Delete VariableDeclarationFragment(3578)", "Delete VariableDeclarationStatement(3579)", "Delete PrimitiveType: int(3580)", "Delete SimpleName: p(3581)", "Delete NumberLiteral: 0(3582)", "Delete VariableDeclarationFragment(3583)", "Delete VariableDeclarationStatement(3584)", "Delete QualifiedName: Map.Entry(3585)", "Delete SimpleType: Map.Entry(3586)", "Delete SimpleName: String(3587)", "Delete SimpleType: String(3588)", "Delete SimpleName: Integer(3589)", "Delete SimpleType: Integer(3590)", "Delete ParameterizedType: Map.Entry<String,Integer>(3591)", "Delete SimpleName: entry(3592)", "Delete SingleVariableDeclaration(3593)", "Delete SimpleName: namedRegisters(3594)", "Delete SimpleName: entrySet(3595)", "Delete MethodInvocation(3596)", "Delete SimpleName: entry(3597)", "Delete SimpleName: getValue(3598)", "Delete MethodInvocation(3599)", "Delete SimpleName: intValue(3600)", "Delete MethodInvocation(3601)", "Delete SimpleName: parms(3602)", "Delete InfixExpression: >=(3603)", "Delete SimpleName: pa(3604)", "Delete SimpleName: p(3605)", "Delete PostfixExpression: ++(3606)", "Delete ArrayAccess(3607)", "Delete SimpleName: entry(3608)", "Delete SimpleName: getKey(3609)", "Delete MethodInvocation(3610)", "Delete Assignment: =(3611)", "Delete ExpressionStatement(3612)", "Delete Block(3613)", "Delete IfStatement(3614)", "Delete Block(3615)", "Delete EnhancedForStatement(3616)", "Delete SimpleName: pa(3617)", "Delete ReturnStatement(3618)", "Delete Block(3619)", "Delete NullLiteral(3620)", "Delete ReturnStatement(3621)", "Delete Block(3622)", "Delete IfStatement(3623)", "Delete Block(3624)", "Delete MethodDeclaration(3625)", "Delete TypeDeclaration: class(3626)", "Delete TextElement: A call frame, created from a scope, stores the arguments and local variables as \"registers\".(3627)", "Delete TagElement(3628)", "Delete Javadoc(3629)", "Delete Modifier: public(3630)", "Delete Modifier: static(3631)", "Delete Modifier: final(3632)", "Delete SimpleName: Frame(3633)", "Delete TextElement: Registers or arguments. (3634)", "Delete TagElement(3635)", "Delete Javadoc(3636)", "Delete Modifier: protected(3637)", "Delete SimpleName: Object(3638)", "Delete SimpleType: Object(3639)", "Delete Dimension(3640)", "Delete ArrayType: Object[](3641)", "Delete SimpleName: registers(3642)", "Delete NullLiteral(3643)", "Delete VariableDeclarationFragment(3644)", "Delete FieldDeclaration(3645)", "Delete TextElement: Parameter and argument names if any. (3646)", "Delete TagElement(3647)", "Delete Javadoc(3648)", "Delete Modifier: protected(3649)", "Delete SimpleName: String(3650)", "Delete SimpleType: String(3651)", "Delete Dimension(3652)", "Delete ArrayType: String[](3653)", "Delete SimpleName: parameters(3654)", "Delete NullLiteral(3655)", "Delete VariableDeclarationFragment(3656)", "Delete FieldDeclaration(3657)", "Delete TextElement: Creates a new frame.(3658)", "Delete TagElement(3659)", "Delete SimpleName: r(3660)", "Delete TextElement:  the registers(3661)", "Delete TagElement: @param(3662)", "Delete SimpleName: p(3663)", "Delete TextElement:  the parameters(3664)", "Delete TagElement: @param(3665)", "Delete Javadoc(3666)", "Delete SimpleName: Frame(3667)", "Delete SimpleName: Object(3668)", "Delete SimpleType: Object(3669)", "Delete Dimension(3670)", "Delete ArrayType: Object[](3671)", "Delete SimpleName: r(3672)", "Delete SingleVariableDeclaration(3673)", "Delete SimpleName: String(3674)", "Delete SimpleType: String(3675)", "Delete Dimension(3676)", "Delete ArrayType: String[](3677)", "Delete SimpleName: p(3678)", "Delete SingleVariableDeclaration(3679)", "Delete SimpleName: registers(3680)", "Delete SimpleName: r(3681)", "Delete Assignment: =(3682)", "Delete ExpressionStatement(3683)", "Delete SimpleName: parameters(3684)", "Delete SimpleName: p(3685)", "Delete Assignment: =(3686)", "Delete ExpressionStatement(3687)", "Delete Block(3688)", "Delete MethodDeclaration(3689)", "Delete TextElement:  the registers(3690)", "Delete TagElement: @return(3691)", "Delete Javadoc(3692)", "Delete Modifier: public(3693)", "Delete SimpleName: Object(3694)", "Delete SimpleType: Object(3695)", "Delete Dimension(3696)", "Delete ArrayType: Object[](3697)", "Delete SimpleName: getRegisters(3698)", "Delete SimpleName: registers(3699)", "Delete ReturnStatement(3700)", "Delete Block(3701)", "Delete MethodDeclaration(3702)", "Delete TextElement:  the parameters(3703)", "Delete TagElement: @return(3704)", "Delete Javadoc(3705)", "Delete Modifier: public(3706)", "Delete SimpleName: String(3707)", "Delete SimpleType: String(3708)", "Delete Dimension(3709)", "Delete ArrayType: String[](3710)", "Delete SimpleName: getParameters(3711)", "Delete SimpleName: parameters(3712)", "Delete ReturnStatement(3713)", "Delete Block(3714)", "Delete MethodDeclaration(3715)", "Delete TypeDeclaration: class(3716)", "Delete TextElement: Parses an expression.(3717)", "Delete TagElement(3718)", "Delete SimpleName: expression(3719)", "Delete TextElement:  the expression to parse(3720)", "Delete TagElement: @param(3721)", "Delete SimpleName: info(3722)", "Delete TextElement:  debug information structure(3723)", "Delete TagElement: @param(3724)", "Delete SimpleName: frame(3725)", "Delete TextElement:  the script frame to use(3726)", "Delete TagElement: @param(3727)", "Delete TextElement:  the parsed tree(3728)", "Delete TagElement: @return(3729)", "Delete SimpleName: JexlException(3730)", "Delete TextElement:  if any error occured during parsing(3731)", "Delete TagElement: @throws(3732)", "Delete Javadoc(3733)", "Delete Modifier: protected(3734)", "Delete SimpleName: ASTJexlScript(3735)", "Delete SimpleType: ASTJexlScript(3736)", "Delete SimpleName: parse(3737)", "Delete SimpleName: CharSequence(3738)", "Delete SimpleType: CharSequence(3739)", "Delete SimpleName: expression(3740)", "Delete SingleVariableDeclaration(3741)", "Delete SimpleName: JexlInfo(3742)", "Delete SimpleType: JexlInfo(3743)", "Delete SimpleName: info(3744)", "Delete SingleVariableDeclaration(3745)", "Delete SimpleName: Scope(3746)", "Delete SimpleType: Scope(3747)", "Delete SimpleName: frame(3748)", "Delete SingleVariableDeclaration(3749)", "Delete SimpleName: String(3750)", "Delete SimpleType: String(3751)", "Delete SimpleName: expr(3752)", "Delete SimpleName: cleanExpression(3753)", "Delete SimpleName: expression(3754)", "Delete MethodInvocation(3755)", "Delete VariableDeclarationFragment(3756)", "Delete VariableDeclarationStatement(3757)", "Delete SimpleName: ASTJexlScript(3758)", "Delete SimpleType: ASTJexlScript(3759)", "Delete SimpleName: script(3760)", "Delete NullLiteral(3761)", "Delete VariableDeclarationFragment(3762)", "Delete VariableDeclarationStatement(3763)", "Delete SimpleName: DebugInfo(3764)", "Delete SimpleType: DebugInfo(3765)", "Delete SimpleName: dbgInfo(3766)", "Delete NullLiteral(3767)", "Delete VariableDeclarationFragment(3768)", "Delete VariableDeclarationStatement(3769)", "Delete SimpleName: parser(3770)", "Delete SimpleName: cache(3771)", "Delete NullLiteral(3772)", "Delete InfixExpression: !=(3773)", "Delete SimpleName: script(3774)", "Delete SimpleName: cache(3775)", "Delete SimpleName: get(3776)", "Delete SimpleName: expr(3777)", "Delete MethodInvocation(3778)", "Delete Assignment: =(3779)", "Delete ExpressionStatement(3780)", "Delete SimpleName: script(3781)", "Delete NullLiteral(3782)", "Delete InfixExpression: !=(3783)", "Delete SimpleName: Scope(3784)", "Delete SimpleType: Scope(3785)", "Delete SimpleName: f(3786)", "Delete SimpleName: script(3787)", "Delete SimpleName: getScope(3788)", "Delete MethodInvocation(3789)", "Delete VariableDeclarationFragment(3790)", "Delete VariableDeclarationStatement(3791)", "Delete SimpleName: f(3792)", "Delete NullLiteral(3793)", "Delete InfixExpression: ==(3794)", "Delete SimpleName: frame(3795)", "Delete NullLiteral(3796)", "Delete InfixExpression: ==(3797)", "Delete InfixExpression: &&(3798)", "Delete ParenthesizedExpression(3799)", "Delete SimpleName: f(3800)", "Delete NullLiteral(3801)", "Delete InfixExpression: !=(3802)", "Delete SimpleName: f(3803)", "Delete SimpleName: equals(3804)", "Delete SimpleName: frame(3805)", "Delete MethodInvocation(3806)", "Delete InfixExpression: &&(3807)", "Delete ParenthesizedExpression(3808)", "Delete InfixExpression: ||(3809)", "Delete SimpleName: script(3810)", "Delete ReturnStatement(3811)", "Delete Block(3812)", "Delete IfStatement(3813)", "Delete Block(3814)", "Delete IfStatement(3815)", "Delete Block(3816)", "Delete IfStatement(3817)", "Delete SimpleName: Reader(3818)", "Delete SimpleType: Reader(3819)", "Delete SimpleName: reader(3820)", "Delete SimpleName: StringReader(3821)", "Delete SimpleType: StringReader(3822)", "Delete SimpleName: expr(3823)", "Delete ClassInstanceCreation(3824)", "Delete VariableDeclarationFragment(3825)", "Delete VariableDeclarationStatement(3826)", "Delete SimpleName: info(3827)", "Delete NullLiteral(3828)", "Delete InfixExpression: ==(3829)", "Delete SimpleName: dbgInfo(3830)", "Delete SimpleName: debugInfo(3831)", "Delete MethodInvocation(3832)", "Delete Assignment: =(3833)", "Delete ExpressionStatement(3834)", "Delete Block(3835)", "Delete SimpleName: info(3836)", "Delete SimpleName: DebugInfo(3837)", "Delete SimpleType: DebugInfo(3838)", "Delete InstanceofExpression(3839)", "Delete SimpleName: dbgInfo(3840)", "Delete SimpleName: DebugInfo(3841)", "Delete SimpleType: DebugInfo(3842)", "Delete SimpleName: info(3843)", "Delete CastExpression(3844)", "Delete Assignment: =(3845)", "Delete ExpressionStatement(3846)", "Delete Block(3847)", "Delete SimpleName: dbgInfo(3848)", "Delete SimpleName: info(3849)", "Delete SimpleName: debugInfo(3850)", "Delete MethodInvocation(3851)", "Delete Assignment: =(3852)", "Delete ExpressionStatement(3853)", "Delete Block(3854)", "Delete IfStatement(3855)", "Delete IfStatement(3856)", "Delete SimpleName: parser(3857)", "Delete SimpleName: setFrame(3858)", "Delete SimpleName: frame(3859)", "Delete MethodInvocation(3860)", "Delete ExpressionStatement(3861)", "Delete SimpleName: script(3862)", "Delete SimpleName: parser(3863)", "Delete SimpleName: parse(3864)", "Delete SimpleName: reader(3865)", "Delete SimpleName: dbgInfo(3866)", "Delete MethodInvocation(3867)", "Delete Assignment: =(3868)", "Delete ExpressionStatement(3869)", "Delete SimpleName: frame(3870)", "Delete SimpleName: parser(3871)", "Delete SimpleName: getFrame(3872)", "Delete MethodInvocation(3873)", "Delete Assignment: =(3874)", "Delete ExpressionStatement(3875)", "Delete SimpleName: frame(3876)", "Delete NullLiteral(3877)", "Delete InfixExpression: !=(3878)", "Delete SimpleName: script(3879)", "Delete SimpleName: setScope(3880)", "Delete SimpleName: frame(3881)", "Delete MethodInvocation(3882)", "Delete ExpressionStatement(3883)", "Delete Block(3884)", "Delete IfStatement(3885)", "Delete SimpleName: cache(3886)", "Delete NullLiteral(3887)", "Delete InfixExpression: !=(3888)", "Delete SimpleName: cache(3889)", "Delete SimpleName: put(3890)", "Delete SimpleName: expr(3891)", "Delete SimpleName: script(3892)", "Delete MethodInvocation(3893)", "Delete ExpressionStatement(3894)", "Delete Block(3895)", "Delete IfStatement(3896)", "Delete Block(3897)", "Delete SimpleName: TokenMgrError(3898)", "Delete SimpleType: TokenMgrError(3899)", "Delete SimpleName: xtme(3900)", "Delete SingleVariableDeclaration(3901)", "Delete QualifiedName: JexlException.Tokenization(3902)", "Delete SimpleType: JexlException.Tokenization(3903)", "Delete SimpleName: dbgInfo(3904)", "Delete SimpleName: expression(3905)", "Delete SimpleName: xtme(3906)", "Delete ClassInstanceCreation(3907)", "Delete ThrowStatement(3908)", "Delete Block(3909)", "Delete CatchClause(3910)", "Delete SimpleName: ParseException(3911)", "Delete SimpleType: ParseException(3912)", "Delete SimpleName: xparse(3913)", "Delete SingleVariableDeclaration(3914)", "Delete QualifiedName: JexlException.Parsing(3915)", "Delete SimpleType: JexlException.Parsing(3916)", "Delete SimpleName: dbgInfo(3917)", "Delete SimpleName: expression(3918)", "Delete SimpleName: xparse(3919)", "Delete ClassInstanceCreation(3920)", "Delete ThrowStatement(3921)", "Delete Block(3922)", "Delete CatchClause(3923)", "Delete SimpleName: parser(3924)", "Delete SimpleName: setFrame(3925)", "Delete NullLiteral(3926)", "Delete MethodInvocation(3927)", "Delete ExpressionStatement(3928)", "Delete Block(3929)", "Delete TryStatement(3930)", "Delete Block(3931)", "Delete SynchronizedStatement(3932)", "Delete SimpleName: script(3933)", "Delete ReturnStatement(3934)", "Delete Block(3935)", "Delete MethodDeclaration(3936)", "Delete TextElement: Creates a JexlInfo instance.(3937)", "Delete TagElement(3938)", "Delete SimpleName: fn(3939)", "Delete TextElement:  url/file name(3940)", "Delete TagElement: @param(3941)", "Delete SimpleName: l(3942)", "Delete TextElement:  line number(3943)", "Delete TagElement: @param(3944)", "Delete SimpleName: c(3945)", "Delete TextElement:  column number(3946)", "Delete TagElement: @param(3947)", "Delete TextElement:  a JexlInfo instance(3948)", "Delete TagElement: @return(3949)", "Delete Javadoc(3950)", "Delete Modifier: protected(3951)", "Delete SimpleName: DebugInfo(3952)", "Delete SimpleType: DebugInfo(3953)", "Delete SimpleName: createInfo(3954)", "Delete SimpleName: String(3955)", "Delete SimpleType: String(3956)", "Delete SimpleName: fn(3957)", "Delete SingleVariableDeclaration(3958)", "Delete PrimitiveType: int(3959)", "Delete SimpleName: l(3960)", "Delete SingleVariableDeclaration(3961)", "Delete PrimitiveType: int(3962)", "Delete SimpleName: c(3963)", "Delete SingleVariableDeclaration(3964)", "Delete SimpleName: DebugInfo(3965)", "Delete SimpleType: DebugInfo(3966)", "Delete SimpleName: fn(3967)", "Delete SimpleName: l(3968)", "Delete SimpleName: c(3969)", "Delete ClassInstanceCreation(3970)", "Delete ReturnStatement(3971)", "Delete Block(3972)", "Delete MethodDeclaration(3973)", "Delete TextElement: Creates and fills up debugging information.(3974)", "Delete TextElement: <p>This gathers the class, method and line number of the first calling method(3975)", "Delete TextElement: not owned by JexlEngine, UnifiedJEXL or {Script,Expression}Factory.</p>(3976)", "Delete TagElement(3977)", "Delete TextElement:  an Info if debug is set, null otherwise(3978)", "Delete TagElement: @return(3979)", "Delete Javadoc(3980)", "Delete Modifier: protected(3981)", "Delete SimpleName: DebugInfo(3982)", "Delete SimpleType: DebugInfo(3983)", "Delete SimpleName: debugInfo(3984)", "Delete SimpleName: DebugInfo(3985)", "Delete SimpleType: DebugInfo(3986)", "Delete SimpleName: info(3987)", "Delete NullLiteral(3988)", "Delete VariableDeclarationFragment(3989)", "Delete VariableDeclarationStatement(3990)", "Delete SimpleName: debug(3991)", "Delete SimpleName: Throwable(3992)", "Delete SimpleType: Throwable(3993)", "Delete SimpleName: xinfo(3994)", "Delete SimpleName: Throwable(3995)", "Delete SimpleType: Throwable(3996)", "Delete ClassInstanceCreation(3997)", "Delete VariableDeclarationFragment(3998)", "Delete VariableDeclarationStatement(3999)", "Delete SimpleName: xinfo(4000)", "Delete SimpleName: fillInStackTrace(4001)", "Delete MethodInvocation(4002)", "Delete ExpressionStatement(4003)", "Delete SimpleName: StackTraceElement(4004)", "Delete SimpleType: StackTraceElement(4005)", "Delete Dimension(4006)", "Delete ArrayType: StackTraceElement[](4007)", "Delete SimpleName: stack(4008)", "Delete SimpleName: xinfo(4009)", "Delete SimpleName: getStackTrace(4010)", "Delete MethodInvocation(4011)", "Delete VariableDeclarationFragment(4012)", "Delete VariableDeclarationStatement(4013)", "Delete SimpleName: StackTraceElement(4014)", "Delete SimpleType: StackTraceElement(4015)", "Delete SimpleName: se(4016)", "Delete NullLiteral(4017)", "Delete VariableDeclarationFragment(4018)", "Delete VariableDeclarationStatement(4019)", "Delete SimpleName: Class(4020)", "Delete SimpleType: Class(4021)", "Delete WildcardType: ?(4022)", "Delete ParameterizedType: Class<?>(4023)", "Delete SimpleName: clazz(4024)", "Delete SimpleName: getClass(4025)", "Delete MethodInvocation(4026)", "Delete VariableDeclarationFragment(4027)", "Delete VariableDeclarationStatement(4028)", "Delete PrimitiveType: int(4029)", "Delete SimpleName: s(4030)", "Delete NumberLiteral: 1(4031)", "Delete VariableDeclarationFragment(4032)", "Delete VariableDeclarationExpression(4033)", "Delete SimpleName: s(4034)", "Delete QualifiedName: stack.length(4035)", "Delete InfixExpression: <(4036)", "Delete SimpleName: s(4037)", "Delete PrefixExpression: ++(4038)", "Delete SimpleName: se(4039)", "Delete NullLiteral(4040)", "Delete Assignment: =(4041)", "Delete SimpleName: se(4042)", "Delete SimpleName: stack(4043)", "Delete SimpleName: s(4044)", "Delete ArrayAccess(4045)", "Delete Assignment: =(4046)", "Delete ExpressionStatement(4047)", "Delete SimpleName: String(4048)", "Delete SimpleType: String(4049)", "Delete SimpleName: className(4050)", "Delete SimpleName: se(4051)", "Delete SimpleName: getClassName(4052)", "Delete MethodInvocation(4053)", "Delete VariableDeclarationFragment(4054)", "Delete VariableDeclarationStatement(4055)", "Delete SimpleName: className(4056)", "Delete SimpleName: equals(4057)", "Delete SimpleName: clazz(4058)", "Delete SimpleName: getName(4059)", "Delete MethodInvocation(4060)", "Delete MethodInvocation(4061)", "Delete PrefixExpression: !(4062)", "Delete SimpleName: className(4063)", "Delete SimpleName: equals(4064)", "Delete SimpleName: JexlEngine(4065)", "Delete SimpleType: JexlEngine(4066)", "Delete TypeLiteral(4067)", "Delete SimpleName: getName(4068)", "Delete MethodInvocation(4069)", "Delete MethodInvocation(4070)", "Delete SimpleName: clazz(4071)", "Delete SimpleName: JexlEngine(4072)", "Delete SimpleType: JexlEngine(4073)", "Delete TypeLiteral(4074)", "Delete Assignment: =(4075)", "Delete ExpressionStatement(4076)", "Delete Block(4077)", "Delete SimpleName: className(4078)", "Delete SimpleName: equals(4079)", "Delete SimpleName: UnifiedJEXL(4080)", "Delete SimpleType: UnifiedJEXL(4081)", "Delete TypeLiteral(4082)", "Delete SimpleName: getName(4083)", "Delete MethodInvocation(4084)", "Delete MethodInvocation(4085)", "Delete SimpleName: clazz(4086)", "Delete SimpleName: UnifiedJEXL(4087)", "Delete SimpleType: UnifiedJEXL(4088)", "Delete TypeLiteral(4089)", "Delete Assignment: =(4090)", "Delete ExpressionStatement(4091)", "Delete Block(4092)", "Delete BreakStatement(4093)", "Delete Block(4094)", "Delete IfStatement(4095)", "Delete IfStatement(4096)", "Delete Block(4097)", "Delete IfStatement(4098)", "Delete Block(4099)", "Delete ForStatement(4100)", "Delete SimpleName: se(4101)", "Delete NullLiteral(4102)", "Delete InfixExpression: !=(4103)", "Delete SimpleName: info(4104)", "Delete SimpleName: createInfo(4105)", "Delete SimpleName: se(4106)", "Delete SimpleName: getClassName(4107)", "Delete MethodInvocation(4108)", "Delete StringLiteral: \".\"(4109)", "Delete SimpleName: se(4110)", "Delete SimpleName: getMethodName(4111)", "Delete MethodInvocation(4112)", "Delete InfixExpression: +(4113)", "Delete SimpleName: se(4114)", "Delete SimpleName: getLineNumber(4115)", "Delete MethodInvocation(4116)", "Delete NumberLiteral: 0(4117)", "Delete MethodInvocation(4118)", "Delete Assignment: =(4119)", "Delete ExpressionStatement(4120)", "Delete Block(4121)", "Delete IfStatement(4122)", "Delete Block(4123)", "Delete IfStatement(4124)", "Delete SimpleName: info(4125)", "Delete ReturnStatement(4126)", "Delete Block(4127)", "Delete MethodDeclaration(4128)", "Delete TextElement: Trims the expression from front & ending spaces.(4129)", "Delete TagElement(4130)", "Delete SimpleName: str(4131)", "Delete TextElement:  expression to clean(4132)", "Delete TagElement: @param(4133)", "Delete TextElement:  trimmed expression ending in a semi-colon(4134)", "Delete TagElement: @return(4135)", "Delete Javadoc(4136)", "Delete Modifier: public(4137)", "Delete Modifier: static(4138)", "Delete SimpleName: String(4139)", "Delete SimpleType: String(4140)", "Delete SimpleName: cleanExpression(4141)", "Delete SimpleName: CharSequence(4142)", "Delete SimpleType: CharSequence(4143)", "Delete SimpleName: str(4144)", "Delete SingleVariableDeclaration(4145)", "Delete SimpleName: str(4146)", "Delete NullLiteral(4147)", "Delete InfixExpression: !=(4148)", "Delete PrimitiveType: int(4149)", "Delete SimpleName: start(4150)", "Delete NumberLiteral: 0(4151)", "Delete VariableDeclarationFragment(4152)", "Delete VariableDeclarationStatement(4153)", "Delete PrimitiveType: int(4154)", "Delete SimpleName: end(4155)", "Delete SimpleName: str(4156)", "Delete SimpleName: length(4157)", "Delete MethodInvocation(4158)", "Delete VariableDeclarationFragment(4159)", "Delete VariableDeclarationStatement(4160)", "Delete SimpleName: end(4161)", "Delete NumberLiteral: 0(4162)", "Delete InfixExpression: >(4163)", "Delete SimpleName: start(4164)", "Delete SimpleName: end(4165)", "Delete InfixExpression: <(4166)", "Delete SimpleName: str(4167)", "Delete SimpleName: charAt(4168)", "Delete SimpleName: start(4169)", "Delete MethodInvocation(4170)", "Delete CharacterLiteral: ' '(4171)", "Delete InfixExpression: ==(4172)", "Delete InfixExpression: &&(4173)", "Delete SimpleName: start(4174)", "Delete PrefixExpression: ++(4175)", "Delete ExpressionStatement(4176)", "Delete Block(4177)", "Delete WhileStatement(4178)", "Delete SimpleName: end(4179)", "Delete NumberLiteral: 0(4180)", "Delete InfixExpression: >(4181)", "Delete SimpleName: str(4182)", "Delete SimpleName: charAt(4183)", "Delete SimpleName: end(4184)", "Delete NumberLiteral: 1(4185)", "Delete InfixExpression: -(4186)", "Delete MethodInvocation(4187)", "Delete CharacterLiteral: ' '(4188)", "Delete InfixExpression: ==(4189)", "Delete InfixExpression: &&(4190)", "Delete SimpleName: end(4191)", "Delete PrefixExpression: --(4192)", "Delete ExpressionStatement(4193)", "Delete Block(4194)", "Delete WhileStatement(4195)", "Delete SimpleName: str(4196)", "Delete SimpleName: subSequence(4197)", "Delete SimpleName: start(4198)", "Delete SimpleName: end(4199)", "Delete MethodInvocation(4200)", "Delete SimpleName: toString(4201)", "Delete MethodInvocation(4202)", "Delete ReturnStatement(4203)", "Delete Block(4204)", "Delete IfStatement(4205)", "Delete StringLiteral: \"\"(4206)", "Delete ReturnStatement(4207)", "Delete Block(4208)", "Delete IfStatement(4209)", "Delete NullLiteral(4210)", "Delete ReturnStatement(4211)", "Delete Block(4212)", "Delete MethodDeclaration(4213)", "Delete TextElement: Read from a reader into a local buffer and return a String with(4214)", "Delete TextElement: the contents of the reader.(4215)", "Delete TagElement(4216)", "Delete SimpleName: scriptReader(4217)", "Delete TextElement:  to be read.(4218)", "Delete TagElement: @param(4219)", "Delete TextElement:  the contents of the reader as a String.(4220)", "Delete TagElement: @return(4221)", "Delete SimpleName: IOException(4222)", "Delete TextElement:  on any error reading the reader.(4223)", "Delete TagElement: @throws(4224)", "Delete Javadoc(4225)", "Delete Modifier: public(4226)", "Delete Modifier: static(4227)", "Delete SimpleName: String(4228)", "Delete SimpleType: String(4229)", "Delete SimpleName: readerToString(4230)", "Delete SimpleName: Reader(4231)", "Delete SimpleType: Reader(4232)", "Delete SimpleName: scriptReader(4233)", "Delete SingleVariableDeclaration(4234)", "Delete SimpleName: IOException(4235)", "Delete SimpleType: IOException(4236)", "Delete SimpleName: StringBuilder(4237)", "Delete SimpleType: StringBuilder(4238)", "Delete SimpleName: buffer(4239)", "Delete SimpleName: StringBuilder(4240)", "Delete SimpleType: StringBuilder(4241)", "Delete ClassInstanceCreation(4242)", "Delete VariableDeclarationFragment(4243)", "Delete VariableDeclarationStatement(4244)", "Delete SimpleName: BufferedReader(4245)", "Delete SimpleType: BufferedReader(4246)", "Delete SimpleName: reader(4247)", "Delete VariableDeclarationFragment(4248)", "Delete VariableDeclarationStatement(4249)", "Delete SimpleName: scriptReader(4250)", "Delete SimpleName: BufferedReader(4251)", "Delete SimpleType: BufferedReader(4252)", "Delete InstanceofExpression(4253)", "Delete SimpleName: reader(4254)", "Delete SimpleName: BufferedReader(4255)", "Delete SimpleType: BufferedReader(4256)", "Delete SimpleName: scriptReader(4257)", "Delete CastExpression(4258)", "Delete Assignment: =(4259)", "Delete ExpressionStatement(4260)", "Delete Block(4261)", "Delete SimpleName: reader(4262)", "Delete SimpleName: BufferedReader(4263)", "Delete SimpleType: BufferedReader(4264)", "Delete SimpleName: scriptReader(4265)", "Delete ClassInstanceCreation(4266)", "Delete Assignment: =(4267)", "Delete ExpressionStatement(4268)", "Delete Block(4269)", "Delete IfStatement(4270)", "Delete SimpleName: String(4271)", "Delete SimpleType: String(4272)", "Delete SimpleName: line(4273)", "Delete VariableDeclarationFragment(4274)", "Delete VariableDeclarationStatement(4275)", "Delete SimpleName: line(4276)", "Delete SimpleName: reader(4277)", "Delete SimpleName: readLine(4278)", "Delete MethodInvocation(4279)", "Delete Assignment: =(4280)", "Delete ParenthesizedExpression(4281)", "Delete NullLiteral(4282)", "Delete InfixExpression: !=(4283)", "Delete SimpleName: buffer(4284)", "Delete SimpleName: append(4285)", "Delete SimpleName: line(4286)", "Delete MethodInvocation(4287)", "Delete SimpleName: append(4288)", "Delete CharacterLiteral: '\\n'(4289)", "Delete MethodInvocation(4290)", "Delete ExpressionStatement(4291)", "Delete Block(4292)", "Delete WhileStatement(4293)", "Delete SimpleName: buffer(4294)", "Delete SimpleName: toString(4295)", "Delete MethodInvocation(4296)", "Delete ReturnStatement(4297)", "Delete Block(4298)", "Delete SimpleName: reader(4299)", "Delete SimpleName: close(4300)", "Delete MethodInvocation(4301)", "Delete ExpressionStatement(4302)", "Delete Block(4303)", "Delete SimpleName: IOException(4304)", "Delete SimpleType: IOException(4305)", "Delete SimpleName: xio(4306)", "Delete SingleVariableDeclaration(4307)", "Delete Block(4308)", "Delete CatchClause(4309)", "Delete TryStatement(4310)", "Delete Block(4311)", "Delete TryStatement(4312)", "Delete Block(4313)", "Delete MethodDeclaration(4314)", "Delete TypeDeclaration: class(4315)"]}}, {"JexlException_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.InvocationTargetException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.UndeclaredThrowableException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.JexlNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ParseException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.TokenMgrError"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement:  this error as a string", "DEL SimpleName: JexlException", "DEL SimpleName: begin", "DEL TagElement: @param", "DEL SimpleName: detailedMessage", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: String", "DEL SimpleName: ParseException", "DEL SimpleName: toString", "DEL SimpleName: msg", "DEL MethodInvocation", "DEL SimpleName: JexlNode", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: DebugInfo", "DEL TagElement: @return", "DEL SimpleName: String", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL Modifier: protected", "DEL SimpleName: getTargetException", "DEL SimpleName: node", "DEL TextElement: Creates a new instance of Return.", "DEL SimpleName: node", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: msg", "DEL SimpleName: DebugInfo", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: DebugInfo", "DEL TextElement: </p>", "DEL Javadoc", "DEL SimpleName: MIN_EXCHARLOC", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: Throwable", "DEL StringLiteral: \" error near '... \"", "DEL TextElement:  the debugging information associated", "DEL SimpleName: getExpression", "DEL Dimension", "DEL Modifier: protected", "DEL Modifier: static", "DEL SimpleName: node", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL CastExpression", "DEL TextElement:  the location info", "DEL SimpleName: mark", "DEL NullLiteral", "DEL MethodDeclaration", "DEL Block", "DEL SimpleType: DebugInfo", "DEL Javadoc", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: DebugInfo", "DEL SimpleName: expr", "DEL SimpleName: Parsing", "DEL SimpleName: node", "DEL TextElement: A marker to use in NPEs stating a null operand error. ", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: UndeclaredThrowableException", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: mark", "DEL SimpleName: info", "DEL SimpleName: cause", "DEL TagElement: @param", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL TagElement", "DEL ParenthesizedExpression", "DEL TagElement: @return", "DEL InstanceofExpression", "DEL InfixExpression: >", "DEL SimpleName: getLine", "DEL SimpleName: var", "DEL SimpleName: expr", "DEL SimpleName: expr", "DEL Block", "DEL SimpleName: var", "DEL Assignment: =", "DEL SimpleName: dbg", "DEL SimpleName: TokenMgrError", "DEL SimpleType: JexlNode", "DEL SimpleName: msg", "DEL TextElement: Wraps any error that might occur during interpretation of a script or expression.", "DEL SimpleName: StringBuilder", "DEL SimpleName: append", "DEL SimpleName: Method", "DEL Block", "DEL SimpleName: result", "DEL SimpleType: UndeclaredThrowableException", "DEL NumberLiteral: 0", "DEL InfixExpression: <", "DEL SingleVariableDeclaration", "DEL TextElement:  the variable name", "DEL SimpleName: detailedMessage", "DEL SimpleName: Override", "DEL SimpleName: String", "DEL SimpleName: NULL_OPERAND", "DEL Modifier: public", "DEL SimpleName: getLine", "DEL TextElement:  the expression", "DEL Modifier: static", "DEL CharacterLiteral: ' '", "DEL SimpleName: substring", "DEL Javadoc", "DEL Modifier: private", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ConditionalExpression", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  the error message", "DEL Modifier: static", "DEL SimpleName: merge", "DEL ReturnStatement", "DEL SimpleType: CharSequence", "DEL ReturnStatement", "DEL SimpleName: JexlNode", "DEL Modifier: private", "DEL SimpleName: node", "DEL SimpleName: begin", "DEL TagElement: @param", "DEL SimpleName: value", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL Modifier: static", "DEL SimpleName: getName", "DEL SimpleName: cause", "DEL SimpleName: cause", "DEL SimpleName: getExpression", "DEL SuperConstructorInvocation", "DEL MarkerAnnotation", "DEL Block", "DEL TagElement", "DEL TextElement:  the property name", "DEL SimpleName: debugInfo", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL SimpleName: detailedMessage", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL TagElement: @param", "DEL TextElement:  the offending ASTnode", "DEL SimpleName: append", "DEL SimpleName: Override", "DEL SimpleName: Throwable", "DEL SimpleName: dbgn", "DEL SimpleName: start", "DEL SimpleName: Property", "DEL IfStatement", "DEL SimpleName: detailedMessage", "DEL TagElement: @since", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: InvocationTargetException", "DEL TextElement:  the offending ASTnode", "DEL SimpleName: JexlException", "DEL ExpressionStatement", "DEL SimpleName: var", "DEL SimpleName: getCause", "DEL SimpleName: msg", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: cause", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: info", "DEL SimpleName: JexlInfo", "DEL TextElement:   the message", "DEL TagElement: @return", "DEL TextElement:  2.1", "DEL Javadoc", "DEL StringLiteral: \"\"", "DEL InfixExpression: +", "DEL SimpleName: cause", "DEL SimpleName: Debugger", "DEL SimpleName: node", "DEL PrimitiveType: int", "DEL SimpleName: begin", "DEL Javadoc", "DEL SimpleName: node", "DEL TagElement: @param", "DEL SimpleType: Debugger", "DEL SimpleName: msg", "DEL SimpleName: JexlException", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: length", "DEL Modifier: final", "DEL TagElement: @param", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: JexlException", "DEL SimpleName: Property", "DEL Block", "DEL SimpleName: node", "DEL TagElement: @since", "DEL SimpleType: String", "DEL TagElement: @since", "DEL SimpleType: String", "DEL SimpleName: Throwable", "DEL Modifier: public", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: JexlNode", "DEL TextElement: - string is the string representation of the offending expression", "DEL SimpleName: expr", "DEL TextElement: Creates a new Tokenization exception instance.", "DEL SimpleName: length", "DEL InfixExpression: !=", "DEL TextElement:  the exception causing the error", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL Block", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleName: mark", "DEL SimpleName: detailedMessage", "DEL Modifier: static", "DEL SimpleType: JexlNode", "DEL MethodDeclaration", "DEL Javadoc", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: JexlException", "DEL SimpleType: DebugInfo", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: TokenMgrError", "DEL TagElement", "DEL SimpleName: NULL_OPERAND", "DEL SimpleName: InvocationTargetException", "DEL NullLiteral", "DEL SimpleName: dbg", "DEL SimpleType: JexlInfo", "DEL Block", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: String", "DEL TagElement", "DEL NullLiteral", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: debugInfo", "DEL SimpleName: name", "DEL SimpleName: Override", "DEL TextElement:  the offending source", "DEL SimpleName: append", "DEL SimpleName: getProperty", "DEL SimpleName: node", "DEL InfixExpression: !=", "DEL SimpleType: JexlException", "DEL TypeDeclaration: class", "DEL NumberLiteral: 10", "DEL SimpleName: result", "DEL MethodDeclaration", "DEL SimpleName: result", "DEL SimpleName: length", "DEL Block", "DEL Assignment: =", "DEL NullLiteral", "DEL SimpleName: msg", "DEL SimpleName: DebugInfo", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: public", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: String", "DEL TextElement: Creates a new Variable exception instance.", "DEL TagElement", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Debugger", "DEL Block", "DEL SimpleName: parserError", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: var", "DEL Block", "DEL SimpleName: begin", "DEL SimpleName: getColumn", "DEL VariableDeclarationFragment", "DEL SimpleName: dbg", "DEL MethodInvocation", "DEL StringLiteral: \",\"", "DEL TextElement:  the expression in error", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SuperMethodInvocation", "DEL SimpleName: end", "DEL FieldDeclaration", "DEL TextElement: Creates a new JexlException.", "DEL TextElement:  the error message", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlInfo", "DEL SimpleName: JexlNode", "DEL SimpleType: String", "DEL SimpleName: JexlNode", "DEL SimpleName: info", "DEL Block", "DEL StringLiteral: \" caused by null operand\"", "DEL SimpleName: getUndeclaredThrowable", "DEL SingleVariableDeclaration", "DEL SimpleName: Return", "DEL MethodInvocation", "DEL SimpleName: debugInfo", "DEL SimpleName: msg", "DEL MethodDeclaration", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL SimpleName: toString", "DEL NullLiteral", "DEL InfixExpression: +", "DEL TextElement: Gets information about the cause of this error.", "DEL SimpleName: node", "DEL TagElement: @param", "DEL SimpleName: msg", "DEL TextElement:  the unknown method", "DEL TagElement: @since", "DEL SuperConstructorInvocation", "DEL InfixExpression: ==", "DEL SimpleName: dbg", "DEL IfStatement", "DEL SimpleName: Throwable", "DEL TagElement: @return", "DEL SimpleName: getColumn", "DEL SimpleType: Debugger", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: msg", "DEL SimpleName: xthrow", "DEL SimpleName: value", "DEL SimpleName: detailedMessage", "DEL SingleVariableDeclaration", "DEL SimpleName: cause", "DEL StringLiteral: \"\"", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL SimpleName: xthrow", "DEL TagElement: @param", "DEL SimpleName: getValue", "DEL TagElement: @param", "DEL TagElement: @param", "DEL IfStatement", "DEL SimpleName: name", "DEL SimpleName: node", "DEL TextElement: Merge the node info and the cause info to obtain best possible location.", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL SimpleName: JexlNode", "DEL SimpleName: String", "DEL TextElement: The debug info. ", "DEL SimpleName: cause", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: MAX_EXCHARLOC", "DEL ArrayAccess", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: msg", "DEL MethodInvocation", "DEL SimpleName: cause", "DEL SimpleName: JexlException", "DEL SuperConstructorInvocation", "DEL TextElement:  the expression", "DEL MarkerAnnotation", "DEL SimpleName: JexlException", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL SimpleName: cause", "DEL Block", "DEL SimpleName: String", "DEL TextElement: Merge the node info and the cause info to obtain best possible location.", "DEL Block", "DEL TextElement:  the node causing the error", "DEL PrimitiveType: int", "DEL IfStatement", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TagElement: @param", "DEL SuperConstructorInvocation", "DEL SimpleType: DebugInfo", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL Modifier: protected", "DEL Block", "DEL Modifier: static", "DEL InfixExpression: +", "DEL MethodDeclaration", "DEL Block", "DEL Assignment: =", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: InvocationTargetException", "DEL SuperConstructorInvocation", "DEL TextElement: Creates a new JexlException.", "DEL TextElement:  2.1", "DEL TypeDeclaration: class", "DEL ClassInstanceCreation", "DEL SimpleName: msg", "DEL MethodInvocation", "DEL SimpleName: JexlNode", "DEL TagElement: @param", "DEL StringLiteral: \"tokenization\"", "DEL TagElement", "DEL SuperConstructorInvocation", "DEL SimpleName: detailedMessage", "DEL TextElement: characters of the precise error's trigger.", "DEL SimpleName: expr", "DEL SimpleName: data", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getLine", "DEL SimpleName: expr", "DEL SimpleType: RuntimeException", "DEL TextElement:  the formatted message", "DEL InfixExpression: >=", "DEL SimpleName: getVariable", "DEL TextElement: The returned string represents the outermost expression in error.", "DEL Block", "DEL SimpleName: msg", "DEL SimpleName: dbgn", "DEL ExpressionStatement", "DEL SimpleName: msg", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL SimpleName: node", "DEL ReturnStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: node", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL StringLiteral: \"undefined variable \"", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleName: prefix", "DEL Javadoc", "DEL SimpleName: mark", "DEL SimpleName: String", "DEL Modifier: static", "DEL SimpleType: Object", "DEL SimpleName: cause", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL TextElement: Creates a new JexlException.", "DEL Javadoc", "DEL Block", "DEL SimpleType: ParseException", "DEL IfStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL SimpleName: parserError", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleName: cause", "DEL TextElement:  the debugging information associated", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: msg", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: CharSequence", "DEL VariableDeclarationFragment", "DEL Block", "DEL SuperConstructorInvocation", "DEL SimpleName: start", "DEL MethodDeclaration", "DEL SimpleName: prefix", "DEL Assignment: =", "DEL SimpleName: getMessage", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: node", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL Block", "DEL TextElement: Unwraps the cause of a throwable due to reflection. ", "DEL SimpleName: expr", "DEL Modifier: protected", "DEL SimpleName: Return", "DEL StringLiteral: \" error in '\"", "DEL Javadoc", "DEL SimpleName: JexlException", "DEL TextElement:  2.0", "DEL MethodInvocation", "DEL SimpleName: dbg", "DEL TextElement:  the error message", "DEL SimpleName: offsets", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleType: DebugInfo", "DEL SimpleType: JexlInfo", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL Assignment: =", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: Parsing", "DEL SimpleName: dbg", "DEL NullLiteral", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: cause", "DEL ReturnStatement", "DEL SimpleName: toString", "DEL SimpleName: offsets", "DEL Modifier: protected", "DEL SimpleType: JexlException", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: dbg", "DEL Block", "DEL ReturnStatement", "DEL StringLiteral: \"'\"", "DEL SimpleType: String", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement: @param", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: String", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: expr", "DEL Block", "DEL SimpleName: debugString", "DEL SimpleType: DebugInfo", "DEL TextElement:  2.1", "DEL Modifier: transient", "DEL SimpleName: cause", "DEL SimpleName: xthrow", "DEL SuperMethodInvocation", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: node", "DEL TagElement", "DEL Modifier: protected", "DEL SuperConstructorInvocation", "DEL Modifier: protected", "DEL IfStatement", "DEL TagElement", "DEL TagElement: @param", "DEL ConditionalExpression", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: data", "DEL SimpleName: info", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL SimpleType: JexlInfo", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: dbgn", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: DebugInfo", "DEL SimpleType: DebugInfo", "DEL SimpleType: String", "DEL SimpleName: node", "DEL NumberLiteral: 2", "DEL SimpleName: DebugInfo", "DEL SimpleName: Variable", "DEL SimpleName: detailedMessage", "DEL SimpleName: append", "DEL SimpleName: JexlException", "DEL TextElement:  the exception causing the error", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL FieldDeclaration", "DEL SimpleName: xthrow", "DEL SimpleName: dbgn", "DEL SimpleType: JexlException", "DEL SimpleName: mark", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: msg", "DEL SuperConstructorInvocation", "DEL SimpleName: xthrow", "DEL SimpleName: dbgn", "DEL SimpleName: CharSequence", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: expr", "DEL SimpleName: msg", "DEL Block", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL SimpleName: getColumn", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: begin", "DEL SimpleType: JexlNode", "DEL SimpleName: xthrow", "DEL SimpleName: node", "DEL SimpleName: end", "DEL SimpleName: xthrow", "DEL SimpleType: JexlInfo", "DEL SimpleName: info", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleName: cause", "DEL Modifier: public", "DEL SimpleName: Throwable", "DEL SimpleName: node", "DEL ConditionalExpression", "DEL SimpleName: MIN_EXCHARLOC", "DEL SimpleName: cause", "DEL InfixExpression: +", "DEL SimpleName: JexlInfo", "DEL Modifier: final", "DEL SimpleName: JexlException", "DEL SimpleName: cause", "DEL ExpressionStatement", "DEL SimpleType: Throwable", "DEL SimpleName: JexlException", "DEL NumberLiteral: 5", "DEL Modifier: public", "DEL SimpleName: info", "DEL Modifier: final", "DEL SimpleName: cause", "DEL TypeDeclaration: class", "DEL TagElement", "DEL TextElement:  2.1", "DEL SimpleType: StringBuilder", "DEL ConditionalExpression", "DEL SimpleName: end", "DEL StringLiteral: \"unknown, ambiguous or inaccessible method \"", "DEL TextElement: Creates a new Property exception instance.", "DEL SimpleName: Cancel", "DEL SimpleName: prefix", "DEL NullLiteral", "DEL MethodInvocation", "DEL Modifier: final", "DEL StringLiteral: \"'\"", "DEL MethodDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: merge", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: msg", "DEL SimpleType: String", "DEL TextElement:  the expression", "DEL TagElement: @param", "DEL Modifier: public", "DEL SimpleName: append", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: info", "DEL SimpleName: dbgn", "DEL TagElement: @return", "DEL SimpleName: offsets", "DEL StringLiteral: \"execution cancelled\"", "DEL Modifier: static", "DEL SimpleName: length", "DEL SimpleName: cause", "DEL SimpleType: JexlException", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: offsets", "DEL Modifier: public", "DEL SimpleName: unwrap", "DEL SimpleName: parserError", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TextElement: Thrown to cancel a script execution.", "DEL Javadoc", "DEL SimpleName: dbg", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: dbg", "DEL TagElement", "DEL SuperConstructorInvocation", "DEL SimpleName: Cancel", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleType: JexlNode", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: msg", "DEL TextElement:  the node where the interruption was detected", "DEL MethodDeclaration", "DEL TextElement: Thrown when tokenization fails.", "DEL SimpleName: cause", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL NullLiteral", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleName: InvocationTargetException", "DEL Block", "DEL SimpleType: CharSequence", "DEL VariableDeclarationStatement", "DEL SimpleName: cause", "DEL Javadoc", "DEL SimpleType: TokenMgrError", "DEL SuperConstructorInvocation", "DEL MethodDeclaration", "DEL TextElement:  the node causing the error", "DEL TextElement: - msg is the actual explanation message for this error", "DEL SimpleType: Debugger", "DEL SimpleName: begin", "DEL SimpleName: getColumn", "DEL SimpleName: node", "DEL SimpleName: detailedMessage", "DEL SimpleName: cause", "DEL TextElement:  the cause", "DEL SimpleName: dbg", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: end", "DEL StringLiteral: \"![\"", "DEL TagElement: @return", "DEL SimpleName: value", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: length", "DEL Javadoc", "DEL TagElement", "DEL Block", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: UndeclaredThrowableException", "DEL StringLiteral: \"\"", "DEL TagElement: @return", "DEL SimpleType: ParseException", "DEL SimpleType: Throwable", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleType: String", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: msg", "DEL SimpleName: cause", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: cause", "DEL TagElement", "DEL PrimitiveType: int", "DEL TextElement:  2.1", "DEL Assignment: =", "DEL SimpleName: JexlInfo", "DEL SimpleName: JexlInfo", "DEL SimpleName: var", "DEL TagElement", "DEL TagElement", "DEL SimpleName: Method", "DEL SimpleType: Throwable", "DEL TagElement: @param", "DEL IfStatement", "DEL Assignment: =", "DEL Block", "DEL SimpleName: Object", "DEL SimpleType: JexlNode", "DEL Modifier: private", "DEL ReturnStatement", "DEL SimpleName: merge", "DEL MethodInvocation", "DEL FieldAccess", "DEL TextElement:  character offset interval of the precise node triggering the error", "DEL SimpleType: String", "DEL SimpleName: name", "DEL SimpleType: String", "DEL SimpleName: mark", "DEL SimpleName: msg", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: msg", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: node", "DEL TagElement", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SuperMethodInvocation", "DEL TagElement: @param", "DEL SimpleName: getMessage", "DEL SimpleName: dbg", "DEL SimpleName: append", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TextElement: Creates a new JexlException.", "DEL SimpleName: node", "DEL Modifier: public", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: JexlException", "DEL SimpleName: dbg", "DEL SimpleName: Debugger", "DEL SimpleName: cause", "DEL TextElement: Creates a new Variable exception instance.", "DEL SimpleName: MIN_EXCHARLOC", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: node", "DEL TextElement: Thrown when a variable is unknown.", "DEL ArrayAccess", "DEL TextElement:  the unknown variable", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: getMessage", "DEL MethodDeclaration", "DEL SimpleName: dbg", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL Javadoc", "DEL SimpleName: getInfo", "DEL TextElement:  the unknown variable", "DEL SimpleName: getVariable", "DEL SimpleName: Debugger", "DEL Modifier: public", "DEL NullLiteral", "DEL SimpleName: Tokenization", "DEL InfixExpression: <", "DEL TextElement: Accesses detailed message.", "DEL SimpleName: msg", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: expr", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: debug", "DEL SimpleName: node", "DEL TextElement:  the throwable", "DEL NullLiteral", "DEL SimpleType: JexlException", "DEL Javadoc", "DEL SimpleName: DebugInfo", "DEL StringLiteral: \" ...'\"", "DEL TagElement", "DEL IfStatement", "DEL TextElement: - debug is the debugging information if it exists (@link JexlEngine.setDebug)", "DEL Block", "DEL TextElement:  the offending ASTnode", "DEL SimpleName: ParseException", "DEL SingleVariableDeclaration", "DEL TextElement:  the returned value", "DEL SimpleName: Tokenization", "DEL Modifier: public", "DEL TextElement: Detailed info message about this error.", "DEL SimpleName: node", "DEL TextElement: - begin, end are character offsets in the string for the precise location of the error", "DEL SimpleName: merge", "DEL SimpleName: node", "DEL SimpleName: JexlNode", "DEL TypeDeclaration: class", "DEL TextElement:  the message", "DEL SimpleName: String", "DEL SimpleName: msg", "DEL MethodDeclaration", "DEL SimpleName: JexlInfo", "DEL Block", "DEL TagElement: @param", "DEL TagElement: @return", "DEL InfixExpression: !=", "DEL SimpleName: offsets", "DEL SimpleName: JexlInfo", "DEL IfStatement", "DEL SimpleName: detailedMessage", "DEL SimpleName: msg", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleType: JexlNode", "DEL Modifier: public", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: DebugInfo", "DEL Assignment: =", "DEL SimpleName: dbg", "DEL SimpleName: dbgn", "DEL TextElement: The point of origin for this exception. ", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: getLine", "DEL SimpleName: JexlException", "DEL InfixExpression: +", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL SimpleName: debug", "DEL TextElement:  a string representation of the offending expression, the empty string if it could not be determined", "DEL SimpleName: MIN_EXCHARLOC", "DEL ReturnStatement", "DEL TextElement: Thrown when a method or ctor is unknown, ambiguous or inaccessible.", "DEL TextElement: Thrown when a property is unknown.", "DEL TextElement: The returned value. ", "DEL SimpleType: Throwable", "DEL SimpleName: getMethod", "DEL SimpleName: cause", "DEL SimpleName: msg", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL TextElement:  the return node", "DEL TextElement:  2.1", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL SimpleName: msg", "DEL SimpleName: cause", "DEL TextElement:  the offending ASTnode", "DEL SimpleName: expr", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TextElement:  the cause", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: unwrap", "DEL SuperMethodInvocation", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: append", "DEL TextElement: Creates a new Method exception instance.", "DEL TextElement: Minimum number of characters around exception location. ", "DEL ExpressionStatement", "DEL StringLiteral: \"jexl.null\"", "DEL TagElement: @param", "DEL SimpleName: info", "DEL InfixExpression: +", "DEL Modifier: protected", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL Block", "DEL SimpleName: Variable", "DEL SimpleType: String", "DEL SimpleName: Override", "DEL Javadoc", "DEL TextElement:  the javacc cause", "DEL ConditionalExpression", "DEL Javadoc", "DEL Block", "DEL SimpleName: cause", "DEL Modifier: public", "DEL Assignment: -=", "DEL SimpleType: UndeclaredThrowableException", "DEL SimpleName: getProperty", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: MAX_EXCHARLOC", "DEL SimpleName: detailedMessage", "DEL TextElement: Formats an error message from the parser.", "DEL TextElement:  the info to use", "DEL VariableDeclarationFragment", "DEL QualifiedName: offsets.length", "DEL SimpleName: debugInfo", "DEL TextElement:  the returned value", "DEL TagElement: @return", "DEL SimpleName: msg", "DEL StringLiteral: \"]: '\"", "DEL SimpleName: getMethod", "DEL TagElement", "DEL SimpleName: cause", "DEL SimpleType: Throwable", "DEL SimpleName: append", "DEL TextElement:  the javacc cause", "DEL MethodInvocation", "DEL SimpleType: JexlInfo", "DEL SimpleType: JexlInfo", "DEL SimpleName: cause", "DEL InfixExpression: !=", "DEL FieldDeclaration", "DEL Modifier: static", "DEL TextElement: Thrown when parsing fails.", "DEL MethodInvocation", "DEL TextElement:  the cause", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: end", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL TextElement: Creates a new instance of Cancel.", "DEL TextElement: The info parameter, an int[2] optionally provided by the caller, will be filled with the begin/end offset", "DEL CastExpression", "DEL Modifier: protected", "DEL Modifier: protected", "DEL TextElement: Thrown to return a value.", "DEL SimpleName: prefix", "DEL TextElement:  the error message", "DEL SimpleType: DebugInfo", "DEL SimpleName: RuntimeException", "DEL TagElement", "DEL Javadoc", "DEL Assignment: +=", "DEL SimpleType: String", "DEL SimpleName: JexlNode", "DEL Block", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: dbgn", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: JexlNode", "DEL InfixExpression: ==", "DEL TextElement: Format is \"debug![begin,end]: string \\n msg\" where:", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SuperMethodInvocation", "DEL NullLiteral", "DEL SimpleType: JexlException", "DEL SimpleName: mark", "DEL SimpleType: String", "DEL TextElement:  the info to use", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: Debugger", "DEL TextElement: Maximum number of characters around exception location. ", "DEL FieldDeclaration", "DEL Modifier: public", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SuperMethodInvocation", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL ArrayType: int[]", "DEL TextElement:  2.1", "DEL TagElement: @param", "DEL SimpleName: cause", "DEL SimpleName: getExpression", "DEL TagElement: @return", "DEL SimpleName: dbg", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: getExpression", "DEL SimpleName: node", "DEL Modifier: public", "DEL SimpleType: TokenMgrError", "DEL MethodDeclaration", "DEL NullLiteral", "DEL Block", "DEL SimpleType: String", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: debugInfo", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: getColumn", "DEL SimpleName: detailedMessage", "DEL Modifier: public", "DEL TextElement: <p>", "DEL SingleVariableDeclaration", "DEL SimpleName: dbg", "DEL Modifier: private", "DEL StringLiteral: \"parsing\"", "DEL StringLiteral: \"inaccessible or unknown property \"", "DEL TextElement:  the prefix to the message", "DEL MethodInvocation", "DEL TagElement: @since", "DEL TagElement: @since", "DEL SimpleName: cause", "DEL Modifier: transient", "DEL MethodInvocation", "DEL SimpleType: JexlInfo", "DEL TextElement:  the node", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement:  the node", "DEL FieldDeclaration", "DEL Modifier: protected", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: end", "DEL ExpressionStatement", "DEL TagElement: @since", "DEL Modifier: public", "DEL SimpleName: StringBuilder", "DEL SimpleName: msg", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL SimpleName: unwrap", "DEL SimpleName: var", "DEL TextElement:  the method name"]}]}}, {"JexlException_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.UndeclaredThrowableException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.parser.JexlNode(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ParseException(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.commons.jexl2.parser.TokenMgrError(10)", "Delete ImportDeclaration(11)", "Delete TextElement: Wraps any error that might occur during interpretation of a script or expression.(12)", "Delete TagElement(13)", "Delete TextElement:  2.0(14)", "Delete TagElement: @since(15)", "Delete Javadoc(16)", "Delete Modifier: public(17)", "Delete SimpleName: JexlException(18)", "Delete SimpleName: RuntimeException(19)", "Delete SimpleType: RuntimeException(20)", "Delete TextElement: The point of origin for this exception. (21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete Modifier: protected(24)", "Delete Modifier: final(25)", "Delete Modifier: transient(26)", "Delete SimpleName: JexlNode(27)", "Delete SimpleType: JexlNode(28)", "Delete SimpleName: mark(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete TextElement: The debug info. (32)", "Delete TagElement(33)", "Delete Javadoc(34)", "Delete Modifier: protected(35)", "Delete Modifier: final(36)", "Delete Modifier: transient(37)", "Delete SimpleName: JexlInfo(38)", "Delete SimpleType: JexlInfo(39)", "Delete SimpleName: info(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete TextElement: A marker to use in NPEs stating a null operand error. (43)", "Delete TagElement(44)", "Delete Javadoc(45)", "Delete Modifier: public(46)", "Delete Modifier: static(47)", "Delete Modifier: final(48)", "Delete SimpleName: String(49)", "Delete SimpleType: String(50)", "Delete SimpleName: NULL_OPERAND(51)", "Delete StringLiteral: \"jexl.null\"(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete TextElement: Minimum number of characters around exception location. (55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete Modifier: private(58)", "Delete Modifier: static(59)", "Delete Modifier: final(60)", "Delete PrimitiveType: int(61)", "Delete SimpleName: MIN_EXCHARLOC(62)", "Delete NumberLiteral: 5(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete TextElement: Maximum number of characters around exception location. (66)", "Delete TagElement(67)", "Delete Javadoc(68)", "Delete Modifier: private(69)", "Delete Modifier: static(70)", "Delete Modifier: final(71)", "Delete PrimitiveType: int(72)", "Delete SimpleName: MAX_EXCHARLOC(73)", "Delete NumberLiteral: 10(74)", "Delete VariableDeclarationFragment(75)", "Delete FieldDeclaration(76)", "Delete TextElement: Creates a new JexlException.(77)", "Delete TagElement(78)", "Delete SimpleName: node(79)", "Delete TextElement:  the node causing the error(80)", "Delete TagElement: @param(81)", "Delete SimpleName: msg(82)", "Delete TextElement:  the error message(83)", "Delete TagElement: @param(84)", "Delete Javadoc(85)", "Delete Modifier: public(86)", "Delete SimpleName: JexlException(87)", "Delete SimpleName: JexlNode(88)", "Delete SimpleType: JexlNode(89)", "Delete SimpleName: node(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: String(92)", "Delete SimpleType: String(93)", "Delete SimpleName: msg(94)", "Delete SingleVariableDeclaration(95)", "Delete SimpleName: msg(96)", "Delete SuperConstructorInvocation(97)", "Delete SimpleName: mark(98)", "Delete SimpleName: node(99)", "Delete Assignment: =(100)", "Delete ExpressionStatement(101)", "Delete SimpleName: info(102)", "Delete SimpleName: node(103)", "Delete NullLiteral(104)", "Delete InfixExpression: !=(105)", "Delete SimpleName: node(106)", "Delete SimpleName: debugInfo(107)", "Delete MethodInvocation(108)", "Delete NullLiteral(109)", "Delete ConditionalExpression(110)", "Delete Assignment: =(111)", "Delete ExpressionStatement(112)", "Delete Block(113)", "Delete MethodDeclaration(114)", "Delete TextElement: Creates a new JexlException.(115)", "Delete TagElement(116)", "Delete SimpleName: node(117)", "Delete TextElement:  the node causing the error(118)", "Delete TagElement: @param(119)", "Delete SimpleName: msg(120)", "Delete TextElement:  the error message(121)", "Delete TagElement: @param(122)", "Delete SimpleName: cause(123)", "Delete TextElement:  the exception causing the error(124)", "Delete TagElement: @param(125)", "Delete Javadoc(126)", "Delete Modifier: public(127)", "Delete SimpleName: JexlException(128)", "Delete SimpleName: JexlNode(129)", "Delete SimpleType: JexlNode(130)", "Delete SimpleName: node(131)", "Delete SingleVariableDeclaration(132)", "Delete SimpleName: String(133)", "Delete SimpleType: String(134)", "Delete SimpleName: msg(135)", "Delete SingleVariableDeclaration(136)", "Delete SimpleName: Throwable(137)", "Delete SimpleType: Throwable(138)", "Delete SimpleName: cause(139)", "Delete SingleVariableDeclaration(140)", "Delete SimpleName: msg(141)", "Delete SimpleName: unwrap(142)", "Delete SimpleName: cause(143)", "Delete MethodInvocation(144)", "Delete SuperConstructorInvocation(145)", "Delete SimpleName: mark(146)", "Delete SimpleName: node(147)", "Delete Assignment: =(148)", "Delete ExpressionStatement(149)", "Delete SimpleName: info(150)", "Delete SimpleName: node(151)", "Delete NullLiteral(152)", "Delete InfixExpression: !=(153)", "Delete SimpleName: node(154)", "Delete SimpleName: debugInfo(155)", "Delete MethodInvocation(156)", "Delete NullLiteral(157)", "Delete ConditionalExpression(158)", "Delete Assignment: =(159)", "Delete ExpressionStatement(160)", "Delete Block(161)", "Delete MethodDeclaration(162)", "Delete TextElement: Creates a new JexlException.(163)", "Delete TagElement(164)", "Delete SimpleName: dbg(165)", "Delete TextElement:  the debugging information associated(166)", "Delete TagElement: @param(167)", "Delete SimpleName: msg(168)", "Delete TextElement:  the error message(169)", "Delete TagElement: @param(170)", "Delete Javadoc(171)", "Delete Modifier: public(172)", "Delete SimpleName: JexlException(173)", "Delete SimpleName: JexlInfo(174)", "Delete SimpleType: JexlInfo(175)", "Delete SimpleName: dbg(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: String(178)", "Delete SimpleType: String(179)", "Delete SimpleName: msg(180)", "Delete SingleVariableDeclaration(181)", "Delete SimpleName: msg(182)", "Delete SuperConstructorInvocation(183)", "Delete SimpleName: mark(184)", "Delete NullLiteral(185)", "Delete Assignment: =(186)", "Delete ExpressionStatement(187)", "Delete SimpleName: info(188)", "Delete SimpleName: dbg(189)", "Delete Assignment: =(190)", "Delete ExpressionStatement(191)", "Delete Block(192)", "Delete MethodDeclaration(193)", "Delete TextElement: Creates a new JexlException.(194)", "Delete TagElement(195)", "Delete SimpleName: dbg(196)", "Delete TextElement:  the debugging information associated(197)", "Delete TagElement: @param(198)", "Delete SimpleName: msg(199)", "Delete TextElement:  the error message(200)", "Delete TagElement: @param(201)", "Delete SimpleName: cause(202)", "Delete TextElement:  the exception causing the error(203)", "Delete TagElement: @param(204)", "Delete Javadoc(205)", "Delete Modifier: public(206)", "Delete SimpleName: JexlException(207)", "Delete SimpleName: JexlInfo(208)", "Delete SimpleType: JexlInfo(209)", "Delete SimpleName: dbg(210)", "Delete SingleVariableDeclaration(211)", "Delete SimpleName: String(212)", "Delete SimpleType: String(213)", "Delete SimpleName: msg(214)", "Delete SingleVariableDeclaration(215)", "Delete SimpleName: Throwable(216)", "Delete SimpleType: Throwable(217)", "Delete SimpleName: cause(218)", "Delete SingleVariableDeclaration(219)", "Delete SimpleName: msg(220)", "Delete SimpleName: unwrap(221)", "Delete SimpleName: cause(222)", "Delete MethodInvocation(223)", "Delete SuperConstructorInvocation(224)", "Delete SimpleName: mark(225)", "Delete NullLiteral(226)", "Delete Assignment: =(227)", "Delete ExpressionStatement(228)", "Delete SimpleName: info(229)", "Delete SimpleName: dbg(230)", "Delete Assignment: =(231)", "Delete ExpressionStatement(232)", "Delete Block(233)", "Delete MethodDeclaration(234)", "Delete TextElement: Unwraps the cause of a throwable due to reflection. (235)", "Delete TagElement(236)", "Delete SimpleName: xthrow(237)", "Delete TextElement:  the throwable(238)", "Delete TagElement: @param(239)", "Delete TextElement:  the cause(240)", "Delete TagElement: @return(241)", "Delete Javadoc(242)", "Delete Modifier: private(243)", "Delete Modifier: static(244)", "Delete SimpleName: Throwable(245)", "Delete SimpleType: Throwable(246)", "Delete SimpleName: unwrap(247)", "Delete SimpleName: Throwable(248)", "Delete SimpleType: Throwable(249)", "Delete SimpleName: xthrow(250)", "Delete SingleVariableDeclaration(251)", "Delete SimpleName: xthrow(252)", "Delete SimpleName: InvocationTargetException(253)", "Delete SimpleType: InvocationTargetException(254)", "Delete InstanceofExpression(255)", "Delete SimpleName: InvocationTargetException(256)", "Delete SimpleType: InvocationTargetException(257)", "Delete SimpleName: xthrow(258)", "Delete CastExpression(259)", "Delete ParenthesizedExpression(260)", "Delete SimpleName: getTargetException(261)", "Delete MethodInvocation(262)", "Delete ReturnStatement(263)", "Delete Block(264)", "Delete SimpleName: xthrow(265)", "Delete SimpleName: UndeclaredThrowableException(266)", "Delete SimpleType: UndeclaredThrowableException(267)", "Delete InstanceofExpression(268)", "Delete SimpleName: UndeclaredThrowableException(269)", "Delete SimpleType: UndeclaredThrowableException(270)", "Delete SimpleName: xthrow(271)", "Delete CastExpression(272)", "Delete ParenthesizedExpression(273)", "Delete SimpleName: getUndeclaredThrowable(274)", "Delete MethodInvocation(275)", "Delete ReturnStatement(276)", "Delete Block(277)", "Delete SimpleName: xthrow(278)", "Delete ReturnStatement(279)", "Delete Block(280)", "Delete IfStatement(281)", "Delete IfStatement(282)", "Delete Block(283)", "Delete MethodDeclaration(284)", "Delete TextElement: Accesses detailed message.(285)", "Delete TagElement(286)", "Delete TextElement:   the message(287)", "Delete TagElement: @return(288)", "Delete Javadoc(289)", "Delete Modifier: protected(290)", "Delete SimpleName: String(291)", "Delete SimpleType: String(292)", "Delete SimpleName: detailedMessage(293)", "Delete SimpleName: getMessage(294)", "Delete SuperMethodInvocation(295)", "Delete ReturnStatement(296)", "Delete Block(297)", "Delete MethodDeclaration(298)", "Delete TextElement: Formats an error message from the parser.(299)", "Delete TagElement(300)", "Delete SimpleName: prefix(301)", "Delete TextElement:  the prefix to the message(302)", "Delete TagElement: @param(303)", "Delete SimpleName: expr(304)", "Delete TextElement:  the expression in error(305)", "Delete TagElement: @param(306)", "Delete TextElement:  the formatted message(307)", "Delete TagElement: @return(308)", "Delete Javadoc(309)", "Delete Modifier: protected(310)", "Delete SimpleName: String(311)", "Delete SimpleType: String(312)", "Delete SimpleName: parserError(313)", "Delete SimpleName: String(314)", "Delete SimpleType: String(315)", "Delete SimpleName: prefix(316)", "Delete SingleVariableDeclaration(317)", "Delete SimpleName: String(318)", "Delete SimpleType: String(319)", "Delete SimpleName: expr(320)", "Delete SingleVariableDeclaration(321)", "Delete PrimitiveType: int(322)", "Delete SimpleName: begin(323)", "Delete SimpleName: info(324)", "Delete SimpleName: debugInfo(325)", "Delete MethodInvocation(326)", "Delete SimpleName: getColumn(327)", "Delete MethodInvocation(328)", "Delete VariableDeclarationFragment(329)", "Delete VariableDeclarationStatement(330)", "Delete PrimitiveType: int(331)", "Delete SimpleName: end(332)", "Delete SimpleName: begin(333)", "Delete SimpleName: MIN_EXCHARLOC(334)", "Delete InfixExpression: +(335)", "Delete VariableDeclarationFragment(336)", "Delete VariableDeclarationStatement(337)", "Delete SimpleName: begin(338)", "Delete SimpleName: MIN_EXCHARLOC(339)", "Delete Assignment: -=(340)", "Delete ExpressionStatement(341)", "Delete SimpleName: begin(342)", "Delete NumberLiteral: 0(343)", "Delete InfixExpression: <(344)", "Delete SimpleName: end(345)", "Delete SimpleName: MIN_EXCHARLOC(346)", "Delete Assignment: +=(347)", "Delete ExpressionStatement(348)", "Delete SimpleName: begin(349)", "Delete NumberLiteral: 0(350)", "Delete Assignment: =(351)", "Delete ExpressionStatement(352)", "Delete Block(353)", "Delete IfStatement(354)", "Delete PrimitiveType: int(355)", "Delete SimpleName: length(356)", "Delete SimpleName: expr(357)", "Delete SimpleName: length(358)", "Delete MethodInvocation(359)", "Delete VariableDeclarationFragment(360)", "Delete VariableDeclarationStatement(361)", "Delete SimpleName: length(362)", "Delete SimpleName: MAX_EXCHARLOC(363)", "Delete InfixExpression: <(364)", "Delete SimpleName: prefix(365)", "Delete StringLiteral: \" error in '\"(366)", "Delete SimpleName: expr(367)", "Delete StringLiteral: \"'\"(368)", "Delete InfixExpression: +(369)", "Delete ReturnStatement(370)", "Delete Block(371)", "Delete SimpleName: prefix(372)", "Delete StringLiteral: \" error near '... \"(373)", "Delete SimpleName: expr(374)", "Delete SimpleName: substring(375)", "Delete SimpleName: begin(376)", "Delete SimpleName: end(377)", "Delete SimpleName: length(378)", "Delete InfixExpression: >(379)", "Delete SimpleName: length(380)", "Delete SimpleName: end(381)", "Delete ConditionalExpression(382)", "Delete MethodInvocation(383)", "Delete StringLiteral: \" ...'\"(384)", "Delete InfixExpression: +(385)", "Delete ReturnStatement(386)", "Delete Block(387)", "Delete IfStatement(388)", "Delete Block(389)", "Delete MethodDeclaration(390)", "Delete TextElement: Thrown when tokenization fails.(391)", "Delete TagElement(392)", "Delete TextElement:  2.1(393)", "Delete TagElement: @since(394)", "Delete Javadoc(395)", "Delete Modifier: public(396)", "Delete Modifier: static(397)", "Delete SimpleName: Tokenization(398)", "Delete SimpleName: JexlException(399)", "Delete SimpleType: JexlException(400)", "Delete TextElement: Creates a new Tokenization exception instance.(401)", "Delete TagElement(402)", "Delete SimpleName: node(403)", "Delete TextElement:  the location info(404)", "Delete TagElement: @param(405)", "Delete SimpleName: expr(406)", "Delete TextElement:  the expression(407)", "Delete TagElement: @param(408)", "Delete SimpleName: cause(409)", "Delete TextElement:  the javacc cause(410)", "Delete TagElement: @param(411)", "Delete Javadoc(412)", "Delete Modifier: public(413)", "Delete SimpleName: Tokenization(414)", "Delete SimpleName: JexlInfo(415)", "Delete SimpleType: JexlInfo(416)", "Delete SimpleName: node(417)", "Delete SingleVariableDeclaration(418)", "Delete SimpleName: CharSequence(419)", "Delete SimpleType: CharSequence(420)", "Delete SimpleName: expr(421)", "Delete SingleVariableDeclaration(422)", "Delete SimpleName: TokenMgrError(423)", "Delete SimpleType: TokenMgrError(424)", "Delete SimpleName: cause(425)", "Delete SingleVariableDeclaration(426)", "Delete SimpleName: merge(427)", "Delete SimpleName: node(428)", "Delete SimpleName: cause(429)", "Delete MethodInvocation(430)", "Delete SimpleName: expr(431)", "Delete SimpleName: toString(432)", "Delete MethodInvocation(433)", "Delete SimpleName: cause(434)", "Delete SuperConstructorInvocation(435)", "Delete Block(436)", "Delete MethodDeclaration(437)", "Delete TextElement: Merge the node info and the cause info to obtain best possible location.(438)", "Delete TagElement(439)", "Delete SimpleName: node(440)", "Delete TextElement:  the node(441)", "Delete TagElement: @param(442)", "Delete SimpleName: cause(443)", "Delete TextElement:  the cause(444)", "Delete TagElement: @param(445)", "Delete TextElement:  the info to use(446)", "Delete TagElement: @return(447)", "Delete Javadoc(448)", "Delete Modifier: private(449)", "Delete Modifier: static(450)", "Delete SimpleName: DebugInfo(451)", "Delete SimpleType: DebugInfo(452)", "Delete SimpleName: merge(453)", "Delete SimpleName: JexlInfo(454)", "Delete SimpleType: JexlInfo(455)", "Delete SimpleName: node(456)", "Delete SingleVariableDeclaration(457)", "Delete SimpleName: TokenMgrError(458)", "Delete SimpleType: TokenMgrError(459)", "Delete SimpleName: cause(460)", "Delete SingleVariableDeclaration(461)", "Delete SimpleName: DebugInfo(462)", "Delete SimpleType: DebugInfo(463)", "Delete SimpleName: dbgn(464)", "Delete SimpleName: node(465)", "Delete NullLiteral(466)", "Delete InfixExpression: !=(467)", "Delete SimpleName: node(468)", "Delete SimpleName: debugInfo(469)", "Delete MethodInvocation(470)", "Delete NullLiteral(471)", "Delete ConditionalExpression(472)", "Delete VariableDeclarationFragment(473)", "Delete VariableDeclarationStatement(474)", "Delete SimpleName: cause(475)", "Delete NullLiteral(476)", "Delete InfixExpression: ==(477)", "Delete SimpleName: dbgn(478)", "Delete ReturnStatement(479)", "Delete Block(480)", "Delete SimpleName: dbgn(481)", "Delete NullLiteral(482)", "Delete InfixExpression: ==(483)", "Delete SimpleName: DebugInfo(484)", "Delete SimpleType: DebugInfo(485)", "Delete StringLiteral: \"\"(486)", "Delete SimpleName: cause(487)", "Delete SimpleName: getLine(488)", "Delete MethodInvocation(489)", "Delete SimpleName: cause(490)", "Delete SimpleName: getColumn(491)", "Delete MethodInvocation(492)", "Delete ClassInstanceCreation(493)", "Delete ReturnStatement(494)", "Delete Block(495)", "Delete SimpleName: DebugInfo(496)", "Delete SimpleType: DebugInfo(497)", "Delete SimpleName: dbgn(498)", "Delete SimpleName: getName(499)", "Delete MethodInvocation(500)", "Delete SimpleName: cause(501)", "Delete SimpleName: getLine(502)", "Delete MethodInvocation(503)", "Delete SimpleName: cause(504)", "Delete SimpleName: getColumn(505)", "Delete MethodInvocation(506)", "Delete ClassInstanceCreation(507)", "Delete ReturnStatement(508)", "Delete Block(509)", "Delete IfStatement(510)", "Delete IfStatement(511)", "Delete Block(512)", "Delete MethodDeclaration(513)", "Delete TextElement:  the expression(514)", "Delete TagElement: @return(515)", "Delete Javadoc(516)", "Delete Modifier: public(517)", "Delete SimpleName: String(518)", "Delete SimpleType: String(519)", "Delete SimpleName: getExpression(520)", "Delete SimpleName: detailedMessage(521)", "Delete SuperMethodInvocation(522)", "Delete ReturnStatement(523)", "Delete Block(524)", "Delete MethodDeclaration(525)", "Delete SimpleName: Override(526)", "Delete MarkerAnnotation(527)", "Delete Modifier: protected(528)", "Delete SimpleName: String(529)", "Delete SimpleType: String(530)", "Delete SimpleName: detailedMessage(531)", "Delete SimpleName: parserError(532)", "Delete StringLiteral: \"tokenization\"(533)", "Delete SimpleName: getExpression(534)", "Delete MethodInvocation(535)", "Delete MethodInvocation(536)", "Delete ReturnStatement(537)", "Delete Block(538)", "Delete MethodDeclaration(539)", "Delete TypeDeclaration: class(540)", "Delete TextElement: Thrown when parsing fails.(541)", "Delete TagElement(542)", "Delete TextElement:  2.1(543)", "Delete TagElement: @since(544)", "Delete Javadoc(545)", "Delete Modifier: public(546)", "Delete Modifier: static(547)", "Delete SimpleName: Parsing(548)", "Delete SimpleName: JexlException(549)", "Delete SimpleType: JexlException(550)", "Delete TextElement: Creates a new Variable exception instance.(551)", "Delete TagElement(552)", "Delete SimpleName: node(553)", "Delete TextElement:  the offending ASTnode(554)", "Delete TagElement: @param(555)", "Delete SimpleName: expr(556)", "Delete TextElement:  the offending source(557)", "Delete TagElement: @param(558)", "Delete SimpleName: cause(559)", "Delete TextElement:  the javacc cause(560)", "Delete TagElement: @param(561)", "Delete Javadoc(562)", "Delete Modifier: public(563)", "Delete SimpleName: Parsing(564)", "Delete SimpleName: JexlInfo(565)", "Delete SimpleType: JexlInfo(566)", "Delete SimpleName: node(567)", "Delete SingleVariableDeclaration(568)", "Delete SimpleName: CharSequence(569)", "Delete SimpleType: CharSequence(570)", "Delete SimpleName: expr(571)", "Delete SingleVariableDeclaration(572)", "Delete SimpleName: ParseException(573)", "Delete SimpleType: ParseException(574)", "Delete SimpleName: cause(575)", "Delete SingleVariableDeclaration(576)", "Delete SimpleName: merge(577)", "Delete SimpleName: node(578)", "Delete SimpleName: cause(579)", "Delete MethodInvocation(580)", "Delete SimpleName: expr(581)", "Delete SimpleName: toString(582)", "Delete MethodInvocation(583)", "Delete SimpleName: cause(584)", "Delete SuperConstructorInvocation(585)", "Delete Block(586)", "Delete MethodDeclaration(587)", "Delete TextElement: Merge the node info and the cause info to obtain best possible location.(588)", "Delete TagElement(589)", "Delete SimpleName: node(590)", "Delete TextElement:  the node(591)", "Delete TagElement: @param(592)", "Delete SimpleName: cause(593)", "Delete TextElement:  the cause(594)", "Delete TagElement: @param(595)", "Delete TextElement:  the info to use(596)", "Delete TagElement: @return(597)", "Delete Javadoc(598)", "Delete Modifier: private(599)", "Delete Modifier: static(600)", "Delete SimpleName: DebugInfo(601)", "Delete SimpleType: DebugInfo(602)", "Delete SimpleName: merge(603)", "Delete SimpleName: JexlInfo(604)", "Delete SimpleType: JexlInfo(605)", "Delete SimpleName: node(606)", "Delete SingleVariableDeclaration(607)", "Delete SimpleName: ParseException(608)", "Delete SimpleType: ParseException(609)", "Delete SimpleName: cause(610)", "Delete SingleVariableDeclaration(611)", "Delete SimpleName: DebugInfo(612)", "Delete SimpleType: DebugInfo(613)", "Delete SimpleName: dbgn(614)", "Delete SimpleName: node(615)", "Delete NullLiteral(616)", "Delete InfixExpression: !=(617)", "Delete SimpleName: node(618)", "Delete SimpleName: debugInfo(619)", "Delete MethodInvocation(620)", "Delete NullLiteral(621)", "Delete ConditionalExpression(622)", "Delete VariableDeclarationFragment(623)", "Delete VariableDeclarationStatement(624)", "Delete SimpleName: cause(625)", "Delete NullLiteral(626)", "Delete InfixExpression: ==(627)", "Delete SimpleName: dbgn(628)", "Delete ReturnStatement(629)", "Delete Block(630)", "Delete SimpleName: dbgn(631)", "Delete NullLiteral(632)", "Delete InfixExpression: ==(633)", "Delete SimpleName: DebugInfo(634)", "Delete SimpleType: DebugInfo(635)", "Delete StringLiteral: \"\"(636)", "Delete SimpleName: cause(637)", "Delete SimpleName: getLine(638)", "Delete MethodInvocation(639)", "Delete SimpleName: cause(640)", "Delete SimpleName: getColumn(641)", "Delete MethodInvocation(642)", "Delete ClassInstanceCreation(643)", "Delete ReturnStatement(644)", "Delete Block(645)", "Delete SimpleName: DebugInfo(646)", "Delete SimpleType: DebugInfo(647)", "Delete SimpleName: dbgn(648)", "Delete SimpleName: getName(649)", "Delete MethodInvocation(650)", "Delete SimpleName: cause(651)", "Delete SimpleName: getLine(652)", "Delete MethodInvocation(653)", "Delete SimpleName: cause(654)", "Delete SimpleName: getColumn(655)", "Delete MethodInvocation(656)", "Delete ClassInstanceCreation(657)", "Delete ReturnStatement(658)", "Delete Block(659)", "Delete IfStatement(660)", "Delete IfStatement(661)", "Delete Block(662)", "Delete MethodDeclaration(663)", "Delete TextElement:  the expression(664)", "Delete TagElement: @return(665)", "Delete Javadoc(666)", "Delete Modifier: public(667)", "Delete SimpleName: String(668)", "Delete SimpleType: String(669)", "Delete SimpleName: getExpression(670)", "Delete SimpleName: detailedMessage(671)", "Delete SuperMethodInvocation(672)", "Delete ReturnStatement(673)", "Delete Block(674)", "Delete MethodDeclaration(675)", "Delete SimpleName: Override(676)", "Delete MarkerAnnotation(677)", "Delete Modifier: protected(678)", "Delete SimpleName: String(679)", "Delete SimpleType: String(680)", "Delete SimpleName: detailedMessage(681)", "Delete SimpleName: parserError(682)", "Delete StringLiteral: \"parsing\"(683)", "Delete SimpleName: getExpression(684)", "Delete MethodInvocation(685)", "Delete MethodInvocation(686)", "Delete ReturnStatement(687)", "Delete Block(688)", "Delete MethodDeclaration(689)", "Delete TypeDeclaration: class(690)", "Delete TextElement: Thrown when a variable is unknown.(691)", "Delete TagElement(692)", "Delete TextElement:  2.1(693)", "Delete TagElement: @since(694)", "Delete Javadoc(695)", "Delete Modifier: public(696)", "Delete Modifier: static(697)", "Delete SimpleName: Variable(698)", "Delete SimpleName: JexlException(699)", "Delete SimpleType: JexlException(700)", "Delete TextElement: Creates a new Variable exception instance.(701)", "Delete TagElement(702)", "Delete SimpleName: node(703)", "Delete TextElement:  the offending ASTnode(704)", "Delete TagElement: @param(705)", "Delete SimpleName: var(706)", "Delete TextElement:  the unknown variable(707)", "Delete TagElement: @param(708)", "Delete Javadoc(709)", "Delete Modifier: public(710)", "Delete SimpleName: Variable(711)", "Delete SimpleName: JexlNode(712)", "Delete SimpleType: JexlNode(713)", "Delete SimpleName: node(714)", "Delete SingleVariableDeclaration(715)", "Delete SimpleName: String(716)", "Delete SimpleType: String(717)", "Delete SimpleName: var(718)", "Delete SingleVariableDeclaration(719)", "Delete SimpleName: node(720)", "Delete SimpleName: var(721)", "Delete SuperConstructorInvocation(722)", "Delete Block(723)", "Delete MethodDeclaration(724)", "Delete TextElement:  the variable name(725)", "Delete TagElement: @return(726)", "Delete Javadoc(727)", "Delete Modifier: public(728)", "Delete SimpleName: String(729)", "Delete SimpleType: String(730)", "Delete SimpleName: getVariable(731)", "Delete SimpleName: detailedMessage(732)", "Delete SuperMethodInvocation(733)", "Delete ReturnStatement(734)", "Delete Block(735)", "Delete MethodDeclaration(736)", "Delete SimpleName: Override(737)", "Delete MarkerAnnotation(738)", "Delete Modifier: protected(739)", "Delete SimpleName: String(740)", "Delete SimpleType: String(741)", "Delete SimpleName: detailedMessage(742)", "Delete StringLiteral: \"undefined variable \"(743)", "Delete SimpleName: getVariable(744)", "Delete MethodInvocation(745)", "Delete InfixExpression: +(746)", "Delete ReturnStatement(747)", "Delete Block(748)", "Delete MethodDeclaration(749)", "Delete TypeDeclaration: class(750)", "Delete TextElement: Thrown when a property is unknown.(751)", "Delete TagElement(752)", "Delete TextElement:  2.1(753)", "Delete TagElement: @since(754)", "Delete Javadoc(755)", "Delete Modifier: public(756)", "Delete Modifier: static(757)", "Delete SimpleName: Property(758)", "Delete SimpleName: JexlException(759)", "Delete SimpleType: JexlException(760)", "Delete TextElement: Creates a new Property exception instance.(761)", "Delete TagElement(762)", "Delete SimpleName: node(763)", "Delete TextElement:  the offending ASTnode(764)", "Delete TagElement: @param(765)", "Delete SimpleName: var(766)", "Delete TextElement:  the unknown variable(767)", "Delete TagElement: @param(768)", "Delete Javadoc(769)", "Delete Modifier: public(770)", "Delete SimpleName: Property(771)", "Delete SimpleName: JexlNode(772)", "Delete SimpleType: JexlNode(773)", "Delete SimpleName: node(774)", "Delete SingleVariableDeclaration(775)", "Delete SimpleName: String(776)", "Delete SimpleType: String(777)", "Delete SimpleName: var(778)", "Delete SingleVariableDeclaration(779)", "Delete SimpleName: node(780)", "Delete SimpleName: var(781)", "Delete SuperConstructorInvocation(782)", "Delete Block(783)", "Delete MethodDeclaration(784)", "Delete TextElement:  the property name(785)", "Delete TagElement: @return(786)", "Delete Javadoc(787)", "Delete Modifier: public(788)", "Delete SimpleName: String(789)", "Delete SimpleType: String(790)", "Delete SimpleName: getProperty(791)", "Delete SimpleName: detailedMessage(792)", "Delete SuperMethodInvocation(793)", "Delete ReturnStatement(794)", "Delete Block(795)", "Delete MethodDeclaration(796)", "Delete SimpleName: Override(797)", "Delete MarkerAnnotation(798)", "Delete Modifier: protected(799)", "Delete SimpleName: String(800)", "Delete SimpleType: String(801)", "Delete SimpleName: detailedMessage(802)", "Delete StringLiteral: \"inaccessible or unknown property \"(803)", "Delete SimpleName: getProperty(804)", "Delete MethodInvocation(805)", "Delete InfixExpression: +(806)", "Delete ReturnStatement(807)", "Delete Block(808)", "Delete MethodDeclaration(809)", "Delete TypeDeclaration: class(810)", "Delete TextElement: Thrown when a method or ctor is unknown, ambiguous or inaccessible.(811)", "Delete TagElement(812)", "Delete TextElement:  2.1(813)", "Delete TagElement: @since(814)", "Delete Javadoc(815)", "Delete Modifier: public(816)", "Delete Modifier: static(817)", "Delete SimpleName: Method(818)", "Delete SimpleName: JexlException(819)", "Delete SimpleType: JexlException(820)", "Delete TextElement: Creates a new Method exception instance.(821)", "Delete TagElement(822)", "Delete SimpleName: node(823)", "Delete TextElement:  the offending ASTnode(824)", "Delete TagElement: @param(825)", "Delete SimpleName: name(826)", "Delete TextElement:  the unknown method(827)", "Delete TagElement: @param(828)", "Delete Javadoc(829)", "Delete Modifier: public(830)", "Delete SimpleName: Method(831)", "Delete SimpleName: JexlNode(832)", "Delete SimpleType: JexlNode(833)", "Delete SimpleName: node(834)", "Delete SingleVariableDeclaration(835)", "Delete SimpleName: String(836)", "Delete SimpleType: String(837)", "Delete SimpleName: name(838)", "Delete SingleVariableDeclaration(839)", "Delete SimpleName: node(840)", "Delete SimpleName: name(841)", "Delete SuperConstructorInvocation(842)", "Delete Block(843)", "Delete MethodDeclaration(844)", "Delete TextElement:  the method name(845)", "Delete TagElement: @return(846)", "Delete Javadoc(847)", "Delete Modifier: public(848)", "Delete SimpleName: String(849)", "Delete SimpleType: String(850)", "Delete SimpleName: getMethod(851)", "Delete SimpleName: detailedMessage(852)", "Delete SuperMethodInvocation(853)", "Delete ReturnStatement(854)", "Delete Block(855)", "Delete MethodDeclaration(856)", "Delete SimpleName: Override(857)", "Delete MarkerAnnotation(858)", "Delete Modifier: protected(859)", "Delete SimpleName: String(860)", "Delete SimpleType: String(861)", "Delete SimpleName: detailedMessage(862)", "Delete StringLiteral: \"unknown, ambiguous or inaccessible method \"(863)", "Delete SimpleName: getMethod(864)", "Delete MethodInvocation(865)", "Delete InfixExpression: +(866)", "Delete ReturnStatement(867)", "Delete Block(868)", "Delete MethodDeclaration(869)", "Delete TypeDeclaration: class(870)", "Delete TextElement: Thrown to return a value.(871)", "Delete TagElement(872)", "Delete TextElement:  2.1(873)", "Delete TagElement: @since(874)", "Delete Javadoc(875)", "Delete Modifier: protected(876)", "Delete Modifier: static(877)", "Delete SimpleName: Return(878)", "Delete SimpleName: JexlException(879)", "Delete SimpleType: JexlException(880)", "Delete TextElement: The returned value. (881)", "Delete TagElement(882)", "Delete Javadoc(883)", "Delete Modifier: private(884)", "Delete Modifier: final(885)", "Delete SimpleName: Object(886)", "Delete SimpleType: Object(887)", "Delete SimpleName: result(888)", "Delete VariableDeclarationFragment(889)", "Delete FieldDeclaration(890)", "Delete TextElement: Creates a new instance of Return.(891)", "Delete TagElement(892)", "Delete SimpleName: node(893)", "Delete TextElement:  the return node(894)", "Delete TagElement: @param(895)", "Delete SimpleName: msg(896)", "Delete TextElement:  the message(897)", "Delete TagElement: @param(898)", "Delete SimpleName: value(899)", "Delete TextElement:  the returned value(900)", "Delete TagElement: @param(901)", "Delete Javadoc(902)", "Delete Modifier: protected(903)", "Delete SimpleName: Return(904)", "Delete SimpleName: JexlNode(905)", "Delete SimpleType: JexlNode(906)", "Delete SimpleName: node(907)", "Delete SingleVariableDeclaration(908)", "Delete SimpleName: String(909)", "Delete SimpleType: String(910)", "Delete SimpleName: msg(911)", "Delete SingleVariableDeclaration(912)", "Delete SimpleName: Object(913)", "Delete SimpleType: Object(914)", "Delete SimpleName: value(915)", "Delete SingleVariableDeclaration(916)", "Delete SimpleName: node(917)", "Delete SimpleName: msg(918)", "Delete SuperConstructorInvocation(919)", "Delete ThisExpression(920)", "Delete SimpleName: result(921)", "Delete FieldAccess(922)", "Delete SimpleName: value(923)", "Delete Assignment: =(924)", "Delete ExpressionStatement(925)", "Delete Block(926)", "Delete MethodDeclaration(927)", "Delete TextElement:  the returned value(928)", "Delete TagElement: @return(929)", "Delete Javadoc(930)", "Delete Modifier: public(931)", "Delete SimpleName: Object(932)", "Delete SimpleType: Object(933)", "Delete SimpleName: getValue(934)", "Delete SimpleName: result(935)", "Delete ReturnStatement(936)", "Delete Block(937)", "Delete MethodDeclaration(938)", "Delete TypeDeclaration: class(939)", "Delete TextElement: Thrown to cancel a script execution.(940)", "Delete TagElement(941)", "Delete TextElement:  2.1(942)", "Delete TagElement: @since(943)", "Delete Javadoc(944)", "Delete Modifier: protected(945)", "Delete Modifier: static(946)", "Delete SimpleName: Cancel(947)", "Delete SimpleName: JexlException(948)", "Delete SimpleType: JexlException(949)", "Delete TextElement: Creates a new instance of Cancel.(950)", "Delete TagElement(951)", "Delete SimpleName: node(952)", "Delete TextElement:  the node where the interruption was detected(953)", "Delete TagElement: @param(954)", "Delete Javadoc(955)", "Delete Modifier: protected(956)", "Delete SimpleName: Cancel(957)", "Delete SimpleName: JexlNode(958)", "Delete SimpleType: JexlNode(959)", "Delete SimpleName: node(960)", "Delete SingleVariableDeclaration(961)", "Delete SimpleName: node(962)", "Delete StringLiteral: \"execution cancelled\"(963)", "Delete NullLiteral(964)", "Delete SuperConstructorInvocation(965)", "Delete Block(966)", "Delete MethodDeclaration(967)", "Delete TypeDeclaration: class(968)", "Delete TextElement: Gets information about the cause of this error.(969)", "Delete TextElement: <p>(970)", "Delete TextElement: The returned string represents the outermost expression in error.(971)", "Delete TextElement: The info parameter, an int[2] optionally provided by the caller, will be filled with the begin/end offset(972)", "Delete TextElement: characters of the precise error's trigger.(973)", "Delete TextElement: </p>(974)", "Delete TagElement(975)", "Delete SimpleName: offsets(976)", "Delete TextElement:  character offset interval of the precise node triggering the error(977)", "Delete TagElement: @param(978)", "Delete TextElement:  a string representation of the offending expression, the empty string if it could not be determined(979)", "Delete TagElement: @return(980)", "Delete Javadoc(981)", "Delete Modifier: public(982)", "Delete SimpleName: String(983)", "Delete SimpleType: String(984)", "Delete SimpleName: getInfo(985)", "Delete PrimitiveType: int(986)", "Delete Dimension(987)", "Delete ArrayType: int[](988)", "Delete SimpleName: offsets(989)", "Delete SingleVariableDeclaration(990)", "Delete SimpleName: Debugger(991)", "Delete SimpleType: Debugger(992)", "Delete SimpleName: dbg(993)", "Delete SimpleName: Debugger(994)", "Delete SimpleType: Debugger(995)", "Delete ClassInstanceCreation(996)", "Delete VariableDeclarationFragment(997)", "Delete VariableDeclarationStatement(998)", "Delete SimpleName: dbg(999)", "Delete SimpleName: debug(1000)", "Delete SimpleName: mark(1001)", "Delete MethodInvocation(1002)", "Delete SimpleName: offsets(1003)", "Delete NullLiteral(1004)", "Delete InfixExpression: !=(1005)", "Delete QualifiedName: offsets.length(1006)", "Delete NumberLiteral: 2(1007)", "Delete InfixExpression: >=(1008)", "Delete InfixExpression: &&(1009)", "Delete SimpleName: offsets(1010)", "Delete NumberLiteral: 0(1011)", "Delete ArrayAccess(1012)", "Delete SimpleName: dbg(1013)", "Delete SimpleName: start(1014)", "Delete MethodInvocation(1015)", "Delete Assignment: =(1016)", "Delete ExpressionStatement(1017)", "Delete SimpleName: offsets(1018)", "Delete NumberLiteral: 1(1019)", "Delete ArrayAccess(1020)", "Delete SimpleName: dbg(1021)", "Delete SimpleName: end(1022)", "Delete MethodInvocation(1023)", "Delete Assignment: =(1024)", "Delete ExpressionStatement(1025)", "Delete Block(1026)", "Delete IfStatement(1027)", "Delete SimpleName: dbg(1028)", "Delete SimpleName: data(1029)", "Delete MethodInvocation(1030)", "Delete ReturnStatement(1031)", "Delete Block(1032)", "Delete IfStatement(1033)", "Delete StringLiteral: \"\"(1034)", "Delete ReturnStatement(1035)", "Delete Block(1036)", "Delete MethodDeclaration(1037)", "Delete TextElement: Detailed info message about this error.(1038)", "Delete TextElement: Format is \"debug![begin,end]: string \\n msg\" where:(1039)", "Delete TextElement: - debug is the debugging information if it exists (@link JexlEngine.setDebug)(1040)", "Delete TextElement: - begin, end are character offsets in the string for the precise location of the error(1041)", "Delete TextElement: - string is the string representation of the offending expression(1042)", "Delete TextElement: - msg is the actual explanation message for this error(1043)", "Delete TagElement(1044)", "Delete TextElement:  this error as a string(1045)", "Delete TagElement: @return(1046)", "Delete Javadoc(1047)", "Delete SimpleName: Override(1048)", "Delete MarkerAnnotation(1049)", "Delete Modifier: public(1050)", "Delete SimpleName: String(1051)", "Delete SimpleType: String(1052)", "Delete SimpleName: getMessage(1053)", "Delete SimpleName: Debugger(1054)", "Delete SimpleType: Debugger(1055)", "Delete SimpleName: dbg(1056)", "Delete SimpleName: Debugger(1057)", "Delete SimpleType: Debugger(1058)", "Delete ClassInstanceCreation(1059)", "Delete VariableDeclarationFragment(1060)", "Delete VariableDeclarationStatement(1061)", "Delete SimpleName: StringBuilder(1062)", "Delete SimpleType: StringBuilder(1063)", "Delete SimpleName: msg(1064)", "Delete SimpleName: StringBuilder(1065)", "Delete SimpleType: StringBuilder(1066)", "Delete ClassInstanceCreation(1067)", "Delete VariableDeclarationFragment(1068)", "Delete VariableDeclarationStatement(1069)", "Delete SimpleName: info(1070)", "Delete NullLiteral(1071)", "Delete InfixExpression: !=(1072)", "Delete SimpleName: msg(1073)", "Delete SimpleName: append(1074)", "Delete SimpleName: info(1075)", "Delete SimpleName: debugString(1076)", "Delete MethodInvocation(1077)", "Delete MethodInvocation(1078)", "Delete ExpressionStatement(1079)", "Delete Block(1080)", "Delete IfStatement(1081)", "Delete SimpleName: dbg(1082)", "Delete SimpleName: debug(1083)", "Delete SimpleName: mark(1084)", "Delete MethodInvocation(1085)", "Delete SimpleName: msg(1086)", "Delete SimpleName: append(1087)", "Delete StringLiteral: \"![\"(1088)", "Delete MethodInvocation(1089)", "Delete ExpressionStatement(1090)", "Delete SimpleName: msg(1091)", "Delete SimpleName: append(1092)", "Delete SimpleName: dbg(1093)", "Delete SimpleName: start(1094)", "Delete MethodInvocation(1095)", "Delete MethodInvocation(1096)", "Delete ExpressionStatement(1097)", "Delete SimpleName: msg(1098)", "Delete SimpleName: append(1099)", "Delete StringLiteral: \",\"(1100)", "Delete MethodInvocation(1101)", "Delete ExpressionStatement(1102)", "Delete SimpleName: msg(1103)", "Delete SimpleName: append(1104)", "Delete SimpleName: dbg(1105)", "Delete SimpleName: end(1106)", "Delete MethodInvocation(1107)", "Delete MethodInvocation(1108)", "Delete ExpressionStatement(1109)", "Delete SimpleName: msg(1110)", "Delete SimpleName: append(1111)", "Delete StringLiteral: \"]: '\"(1112)", "Delete MethodInvocation(1113)", "Delete ExpressionStatement(1114)", "Delete SimpleName: msg(1115)", "Delete SimpleName: append(1116)", "Delete SimpleName: dbg(1117)", "Delete SimpleName: data(1118)", "Delete MethodInvocation(1119)", "Delete MethodInvocation(1120)", "Delete ExpressionStatement(1121)", "Delete SimpleName: msg(1122)", "Delete SimpleName: append(1123)", "Delete StringLiteral: \"'\"(1124)", "Delete MethodInvocation(1125)", "Delete ExpressionStatement(1126)", "Delete Block(1127)", "Delete IfStatement(1128)", "Delete SimpleName: msg(1129)", "Delete SimpleName: append(1130)", "Delete CharacterLiteral: ' '(1131)", "Delete MethodInvocation(1132)", "Delete ExpressionStatement(1133)", "Delete SimpleName: msg(1134)", "Delete SimpleName: append(1135)", "Delete SimpleName: detailedMessage(1136)", "Delete MethodInvocation(1137)", "Delete MethodInvocation(1138)", "Delete ExpressionStatement(1139)", "Delete SimpleName: Throwable(1140)", "Delete SimpleType: Throwable(1141)", "Delete SimpleName: cause(1142)", "Delete SimpleName: getCause(1143)", "Delete MethodInvocation(1144)", "Delete VariableDeclarationFragment(1145)", "Delete VariableDeclarationStatement(1146)", "Delete SimpleName: cause(1147)", "Delete NullLiteral(1148)", "Delete InfixExpression: !=(1149)", "Delete SimpleName: NULL_OPERAND(1150)", "Delete SimpleName: cause(1151)", "Delete SimpleName: getMessage(1152)", "Delete MethodInvocation(1153)", "Delete InfixExpression: ==(1154)", "Delete InfixExpression: &&(1155)", "Delete SimpleName: msg(1156)", "Delete SimpleName: append(1157)", "Delete StringLiteral: \" caused by null operand\"(1158)", "Delete MethodInvocation(1159)", "Delete ExpressionStatement(1160)", "Delete Block(1161)", "Delete IfStatement(1162)", "Delete SimpleName: msg(1163)", "Delete SimpleName: toString(1164)", "Delete MethodInvocation(1165)", "Delete ReturnStatement(1166)", "Delete Block(1167)", "Delete MethodDeclaration(1168)", "Delete TypeDeclaration: class(1169)"]}}, {"JexlInfo_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: DebugInfo", "DEL TextElement:  a human readable string.", "DEL Javadoc", "DEL TagElement", "DEL SimpleType: DebugInfo", "DEL SimpleName: JexlInfo", "DEL TextElement: Gets the underlying debugging information.", "DEL TagElement: @since", "DEL TagElement: @return", "DEL TextElement:  1.0", "DEL SimpleName: String", "DEL TagElement: @return", "DEL TagElement", "DEL Javadoc", "DEL TagElement", "DEL TextElement: Formats this information for debugging purpose.", "DEL TextElement: Interface for objects carrying information usefull to debugging.", "DEL Javadoc", "DEL TextElement:  a debug info instance", "DEL MethodDeclaration", "DEL SimpleName: debugInfo", "DEL SimpleName: debugString", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleType: String", "DEL TypeDeclaration: interface"]}]}}, {"JexlInfo_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Interface for objects carrying information usefull to debugging.(2)", "Delete TagElement(3)", "Delete TextElement:  1.0(4)", "Delete TagElement: @since(5)", "Delete Javadoc(6)", "Delete Modifier: public(7)", "Delete SimpleName: JexlInfo(8)", "Delete TextElement: Formats this information for debugging purpose.(9)", "Delete TagElement(10)", "Delete TextElement:  a human readable string.(11)", "Delete TagElement: @return(12)", "Delete Javadoc(13)", "Delete SimpleName: String(14)", "Delete SimpleType: String(15)", "Delete SimpleName: debugString(16)", "Delete MethodDeclaration(17)", "Delete TextElement: Gets the underlying debugging information.(18)", "Delete TagElement(19)", "Delete TextElement:  a debug info instance(20)", "Delete TagElement: @return(21)", "Delete Javadoc(22)", "Delete SimpleName: DebugInfo(23)", "Delete SimpleType: DebugInfo(24)", "Delete SimpleName: debugInfo(25)", "Delete MethodDeclaration(26)", "Delete TypeDeclaration: interface(27)"]}}, {"JexlThreadedArithmetic_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.math.MathContext"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement: @param", "DEL SimpleName: setSilent", "DEL SimpleName: get", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: Integer", "DEL TagElement", "DEL TextElement:  the math context instance to use for +,-,/,*,% operations on big decimals.", "DEL Javadoc", "DEL SimpleName: FEATURES", "DEL SimpleName: lenient", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL Modifier: static", "DEL FieldAccess", "DEL SimpleName: bigdScale", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleType: ThreadLocal", "DEL SimpleType: Features", "DEL SimpleName: lenient", "DEL MethodDeclaration", "DEL SimpleType: MathContext", "DEL SimpleName: FEATURES", "DEL TextElement:  the math context", "DEL FieldAccess", "DEL SimpleName: lenient", "DEL Javadoc", "DEL TextElement: Whether this JexlArithmetic instance behaves in strict or lenient mode for this thread. ", "DEL SimpleName: mc", "DEL FieldAccess", "DEL SimpleName: bigdContext", "DEL Modifier: private", "DEL Modifier: private", "DEL SimpleName: getMathScale", "DEL SimpleName: lenient", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: MathContext", "DEL SimpleType: Features", "DEL FieldAccess", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: lenient", "DEL ReturnStatement", "DEL SimpleName: scale", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL SimpleName: getMathContext", "DEL FieldAccess", "DEL SimpleName: lenient", "DEL Modifier: protected", "DEL AnonymousClassDeclaration", "DEL SimpleName: JexlThreadedArithmetic", "DEL SimpleName: mc", "DEL MarkerAnnotation", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleName: flag", "DEL TextElement: A derived arithmetic that allows different threads to operate with", "DEL NullLiteral", "DEL ParameterizedType: ThreadLocal<Features>", "DEL TextElement:  2.1", "DEL SimpleName: Features", "DEL TextElement: <p>It is advised to protect calls by either calling JexlThreadedArithmetic.setLenient explicitly", "DEL TagElement: @see", "DEL SimpleName: Integer", "DEL SimpleName: FEATURES", "DEL MethodInvocation", "DEL SimpleName: mc", "DEL TextElement:  whether this arithmetic is lenient or strict", "DEL SimpleName: Boolean", "DEL ClassInstanceCreation", "DEL SimpleName: get", "DEL Javadoc", "DEL ConditionalExpression", "DEL TextElement: Creates a JexlThreadedArithmetic instance.", "DEL Assignment: =", "DEL Modifier: public", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleName: mathContext", "DEL TextElement: flag value through thread pools side-effects.</p>", "DEL SimpleName: flag", "DEL SimpleName: scale", "DEL Javadoc", "DEL SimpleName: bigdScale", "DEL SuperConstructorInvocation", "DEL SimpleType: Integer", "DEL ConditionalExpression", "DEL SimpleName: JexlEngine", "DEL TagElement", "DEL Modifier: static", "DEL SimpleName: Boolean", "DEL Assignment: =", "DEL TagElement", "DEL PrimitiveType: void", "DEL TagElement: @param", "DEL SimpleName: mc", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL TextElement: Sets the math context.", "DEL Javadoc", "DEL SimpleName: Features", "DEL VariableDeclarationFragment", "DEL SimpleName: setLenient", "DEL SimpleName: JexlEngine", "DEL SimpleName: mc", "DEL SimpleName: JexlArithmetic", "DEL SimpleName: JexlThreadedArithmetic", "DEL Block", "DEL ParameterizedType: ThreadLocal<Features>", "DEL Javadoc", "DEL SuperMethodInvocation", "DEL SimpleName: Features", "DEL TagElement", "DEL TagElement: @param", "DEL TypeDeclaration: class", "DEL TagElement", "DEL SimpleType: Integer", "DEL PrimitiveType: void", "DEL SimpleName: intValue", "DEL SimpleName: mathScale", "DEL TextElement: Sets the math scale.", "DEL SimpleName: lenient", "DEL SimpleType: Boolean", "DEL SimpleName: mathScale", "DEL ExpressionStatement", "DEL SimpleName: lenient", "DEL Block", "DEL Modifier: static", "DEL SimpleName: ThreadLocal", "DEL SimpleName: bigdScale", "DEL VariableDeclarationFragment", "DEL SimpleName: flag", "DEL SimpleName: initialValue", "DEL TextElement: Holds the threaded version of some arithmetic features. ", "DEL SimpleName: isLenient", "DEL SimpleName: get", "DEL InfixExpression: ==", "DEL SimpleType: JexlArithmetic", "DEL MethodDeclaration", "DEL NullLiteral", "DEL ExpressionStatement", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement: @since", "DEL TextElement: The big decimal math context. ", "DEL SimpleType: Features", "DEL Modifier: public", "DEL MemberRef", "DEL SingleVariableDeclaration", "DEL SimpleName: getMathContext", "DEL Modifier: public", "DEL TextElement: <p>The goal and constraints are the same than for setLenient.</p>", "DEL SuperConstructorInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: lenient", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleType: MathContext", "DEL SimpleName: MathContext", "DEL SimpleName: Boolean", "DEL SimpleName: MathContext", "DEL MethodInvocation", "DEL MemberRef", "DEL TagElement", "DEL TagElement", "DEL SimpleType: Integer", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: get", "DEL PrimitiveType: void", "DEL SimpleName: scale", "DEL SimpleName: isLenient", "DEL TextElement:  the scale", "DEL Block", "DEL TagElement", "DEL SimpleName: JexlThreadedArithmetic", "DEL Javadoc", "DEL SimpleName: scale", "DEL VariableDeclarationFragment", "DEL Modifier: synchronized", "DEL TextElement: The big decimal scale. ", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: Boolean", "DEL SuperMethodInvocation", "DEL TagElement: @see", "DEL VariableDeclarationStatement", "DEL SimpleName: FEATURES", "DEL SimpleName: bigdContext", "DEL Modifier: public", "DEL TextElement: <p>The goal and constraints are the same than for setLenient.</p>", "DEL SimpleName: mathContext", "DEL SuperMethodInvocation", "DEL SimpleName: MathContext", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL TextElement:  true means no JexlException will occur, false allows them, null reverts to default behavior", "DEL SimpleName: MathContext", "DEL SimpleName: FEATURES", "DEL InfixExpression: ==", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: setDebug", "DEL MethodDeclaration", "DEL NullLiteral", "DEL Javadoc", "DEL Block", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL SimpleType: Features", "DEL SimpleName: mc", "DEL SimpleName: Override", "DEL SimpleName: Integer", "DEL PrimitiveType: boolean", "DEL SimpleName: FEATURES", "DEL SimpleName: get", "DEL SimpleType: ThreadLocal", "DEL TextElement:  lenient versus strict evaluation flag", "DEL Modifier: static", "DEL TextElement: during evaluation when null is used as an operand for the current thread.", "DEL SimpleName: mathScale", "DEL TypeDeclaration: class", "DEL SimpleName: Features", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: scale", "DEL SimpleName: mathContext", "DEL SimpleName: Features", "DEL Modifier: static", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL TextElement: Whether this JexlArithmetic instance behaves in strict or lenient mode. ", "DEL SimpleType: MathContext", "DEL SimpleName: lenient", "DEL SimpleName: lenient", "DEL PrimitiveType: boolean", "DEL Modifier: public", "DEL SimpleType: MathContext", "DEL Javadoc", "DEL SimpleName: FEATURES", "DEL SimpleName: booleanValue", "DEL SimpleType: MathContext", "DEL TextElement: Overrides the default behavior and sets whether this JexlArithmetic instance triggers errors", "DEL Modifier: public", "DEL Modifier: public", "DEL TagElement: @param", "DEL TextElement: different strict/lenient/math modes using the same JexlEngine.", "DEL TextElement: before evaluation or add a try/finally clause resetting the flag to avoid unexpected reuse of the lenient", "DEL SimpleName: bigdContext", "DEL SimpleName: setMathScale", "DEL TextElement:  the scale used for big decimals.", "DEL SimpleName: ThreadLocal", "DEL SimpleName: Features", "DEL Block", "DEL MarkerAnnotation", "DEL TextElement: Default ctor. ", "DEL Block", "DEL SimpleName: lenient", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL TextElement: Standard ctor.", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Javadoc", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL Block", "DEL Javadoc", "DEL TextElement:  ", "DEL SimpleType: Boolean", "DEL PrimitiveType: boolean", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: getMathScale", "DEL Assignment: =", "DEL Modifier: public", "DEL NullLiteral", "DEL SimpleName: scale", "DEL TagElement: @param", "DEL TagElement: @param", "DEL MarkerAnnotation", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL ConditionalExpression", "DEL SimpleName: setMathContext"]}]}}, {"JexlThreadedArithmetic_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.math.MathContext(2)", "Delete ImportDeclaration(3)", "Delete TextElement: A derived arithmetic that allows different threads to operate with(4)", "Delete TextElement: different strict/lenient/math modes using the same JexlEngine.(5)", "Delete TagElement(6)", "Delete TextElement:  2.1(7)", "Delete TagElement: @since(8)", "Delete Javadoc(9)", "Delete Modifier: public(10)", "Delete SimpleName: JexlThreadedArithmetic(11)", "Delete SimpleName: JexlArithmetic(12)", "Delete SimpleType: JexlArithmetic(13)", "Delete TextElement: Holds the threaded version of some arithmetic features. (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: static(17)", "Delete SimpleName: Features(18)", "Delete TextElement: Default ctor. (19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete SimpleName: Features(22)", "Delete Block(23)", "Delete MethodDeclaration(24)", "Delete TextElement: Whether this JexlArithmetic instance behaves in strict or lenient mode. (25)", "Delete TagElement(26)", "Delete Javadoc(27)", "Delete Modifier: private(28)", "Delete SimpleName: Boolean(29)", "Delete SimpleType: Boolean(30)", "Delete SimpleName: lenient(31)", "Delete NullLiteral(32)", "Delete VariableDeclarationFragment(33)", "Delete FieldDeclaration(34)", "Delete TextElement: The big decimal math context. (35)", "Delete TagElement(36)", "Delete Javadoc(37)", "Delete Modifier: private(38)", "Delete SimpleName: MathContext(39)", "Delete SimpleType: MathContext(40)", "Delete SimpleName: mathContext(41)", "Delete NullLiteral(42)", "Delete VariableDeclarationFragment(43)", "Delete FieldDeclaration(44)", "Delete TextElement: The big decimal scale. (45)", "Delete TagElement(46)", "Delete Javadoc(47)", "Delete Modifier: private(48)", "Delete SimpleName: Integer(49)", "Delete SimpleType: Integer(50)", "Delete SimpleName: mathScale(51)", "Delete NullLiteral(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete TypeDeclaration: class(55)", "Delete TextElement: Standard ctor.(56)", "Delete TagElement(57)", "Delete SimpleName: lenient(58)", "Delete TextElement:  lenient versus strict evaluation flag(59)", "Delete TagElement: @param(60)", "Delete Javadoc(61)", "Delete Modifier: public(62)", "Delete SimpleName: JexlThreadedArithmetic(63)", "Delete PrimitiveType: boolean(64)", "Delete SimpleName: lenient(65)", "Delete SingleVariableDeclaration(66)", "Delete SimpleName: lenient(67)", "Delete SuperConstructorInvocation(68)", "Delete Block(69)", "Delete MethodDeclaration(70)", "Delete TextElement: Creates a JexlThreadedArithmetic instance.(71)", "Delete TagElement(72)", "Delete SimpleName: lenient(73)", "Delete TextElement:  whether this arithmetic is lenient or strict(74)", "Delete TagElement: @param(75)", "Delete SimpleName: bigdContext(76)", "Delete TextElement:  the math context instance to use for +,-,/,*,% operations on big decimals.(77)", "Delete TagElement: @param(78)", "Delete SimpleName: bigdScale(79)", "Delete TextElement:  the scale used for big decimals.(80)", "Delete TagElement: @param(81)", "Delete Javadoc(82)", "Delete Modifier: public(83)", "Delete SimpleName: JexlThreadedArithmetic(84)", "Delete PrimitiveType: boolean(85)", "Delete SimpleName: lenient(86)", "Delete SingleVariableDeclaration(87)", "Delete SimpleName: MathContext(88)", "Delete SimpleType: MathContext(89)", "Delete SimpleName: bigdContext(90)", "Delete SingleVariableDeclaration(91)", "Delete PrimitiveType: int(92)", "Delete SimpleName: bigdScale(93)", "Delete SingleVariableDeclaration(94)", "Delete SimpleName: lenient(95)", "Delete SimpleName: bigdContext(96)", "Delete SimpleName: bigdScale(97)", "Delete SuperConstructorInvocation(98)", "Delete Block(99)", "Delete MethodDeclaration(100)", "Delete TextElement: Whether this JexlArithmetic instance behaves in strict or lenient mode for this thread. (101)", "Delete TagElement(102)", "Delete Javadoc(103)", "Delete Modifier: static(104)", "Delete Modifier: final(105)", "Delete SimpleName: ThreadLocal(106)", "Delete SimpleType: ThreadLocal(107)", "Delete SimpleName: Features(108)", "Delete SimpleType: Features(109)", "Delete ParameterizedType: ThreadLocal<Features>(110)", "Delete SimpleName: FEATURES(111)", "Delete SimpleName: ThreadLocal(112)", "Delete SimpleType: ThreadLocal(113)", "Delete SimpleName: Features(114)", "Delete SimpleType: Features(115)", "Delete ParameterizedType: ThreadLocal<Features>(116)", "Delete SimpleName: Override(117)", "Delete MarkerAnnotation(118)", "Delete Modifier: protected(119)", "Delete Modifier: synchronized(120)", "Delete SimpleName: Features(121)", "Delete SimpleType: Features(122)", "Delete SimpleName: initialValue(123)", "Delete SimpleName: Features(124)", "Delete SimpleType: Features(125)", "Delete ClassInstanceCreation(126)", "Delete ReturnStatement(127)", "Delete Block(128)", "Delete MethodDeclaration(129)", "Delete AnonymousClassDeclaration(130)", "Delete ClassInstanceCreation(131)", "Delete VariableDeclarationFragment(132)", "Delete FieldDeclaration(133)", "Delete TextElement: Overrides the default behavior and sets whether this JexlArithmetic instance triggers errors(134)", "Delete TextElement: during evaluation when null is used as an operand for the current thread.(135)", "Delete TextElement: <p>It is advised to protect calls by either calling JexlThreadedArithmetic.setLenient explicitly(136)", "Delete TextElement: before evaluation or add a try/finally clause resetting the flag to avoid unexpected reuse of the lenient(137)", "Delete TextElement: flag value through thread pools side-effects.</p>(138)", "Delete TagElement(139)", "Delete SimpleName: JexlEngine(140)", "Delete SimpleName: setSilent(141)", "Delete MemberRef(142)", "Delete TagElement: @see(143)", "Delete SimpleName: JexlEngine(144)", "Delete SimpleName: setDebug(145)", "Delete MemberRef(146)", "Delete TagElement: @see(147)", "Delete SimpleName: flag(148)", "Delete TextElement:  true means no JexlException will occur, false allows them, null reverts to default behavior(149)", "Delete TagElement: @param(150)", "Delete Javadoc(151)", "Delete Modifier: public(152)", "Delete Modifier: static(153)", "Delete PrimitiveType: void(154)", "Delete SimpleName: setLenient(155)", "Delete SimpleName: Boolean(156)", "Delete SimpleType: Boolean(157)", "Delete SimpleName: flag(158)", "Delete SingleVariableDeclaration(159)", "Delete SimpleName: FEATURES(160)", "Delete SimpleName: get(161)", "Delete MethodInvocation(162)", "Delete SimpleName: lenient(163)", "Delete FieldAccess(164)", "Delete SimpleName: flag(165)", "Delete Assignment: =(166)", "Delete ExpressionStatement(167)", "Delete Block(168)", "Delete MethodDeclaration(169)", "Delete TextElement: Sets the math scale.(170)", "Delete TextElement: <p>The goal and constraints are the same than for setLenient.</p>(171)", "Delete TagElement(172)", "Delete SimpleName: scale(173)", "Delete TextElement:  the scale(174)", "Delete TagElement: @param(175)", "Delete Javadoc(176)", "Delete Modifier: public(177)", "Delete Modifier: static(178)", "Delete PrimitiveType: void(179)", "Delete SimpleName: setMathScale(180)", "Delete SimpleName: Integer(181)", "Delete SimpleType: Integer(182)", "Delete SimpleName: scale(183)", "Delete SingleVariableDeclaration(184)", "Delete SimpleName: FEATURES(185)", "Delete SimpleName: get(186)", "Delete MethodInvocation(187)", "Delete SimpleName: mathScale(188)", "Delete FieldAccess(189)", "Delete SimpleName: scale(190)", "Delete Assignment: =(191)", "Delete ExpressionStatement(192)", "Delete Block(193)", "Delete MethodDeclaration(194)", "Delete TextElement: Sets the math context.(195)", "Delete TextElement: <p>The goal and constraints are the same than for setLenient.</p>(196)", "Delete TagElement(197)", "Delete SimpleName: mc(198)", "Delete TextElement:  the math context(199)", "Delete TagElement: @param(200)", "Delete Javadoc(201)", "Delete Modifier: public(202)", "Delete Modifier: static(203)", "Delete PrimitiveType: void(204)", "Delete SimpleName: setMathContext(205)", "Delete SimpleName: MathContext(206)", "Delete SimpleType: MathContext(207)", "Delete SimpleName: mc(208)", "Delete SingleVariableDeclaration(209)", "Delete SimpleName: FEATURES(210)", "Delete SimpleName: get(211)", "Delete MethodInvocation(212)", "Delete SimpleName: mathContext(213)", "Delete FieldAccess(214)", "Delete SimpleName: mc(215)", "Delete Assignment: =(216)", "Delete ExpressionStatement(217)", "Delete Block(218)", "Delete MethodDeclaration(219)", "Delete TagElement: @inheritDoc(220)", "Delete TextElement:  (221)", "Delete TagElement(222)", "Delete Javadoc(223)", "Delete SimpleName: Override(224)", "Delete MarkerAnnotation(225)", "Delete Modifier: public(226)", "Delete PrimitiveType: boolean(227)", "Delete SimpleName: isLenient(228)", "Delete SimpleName: Boolean(229)", "Delete SimpleType: Boolean(230)", "Delete SimpleName: lenient(231)", "Delete SimpleName: FEATURES(232)", "Delete SimpleName: get(233)", "Delete MethodInvocation(234)", "Delete SimpleName: lenient(235)", "Delete FieldAccess(236)", "Delete VariableDeclarationFragment(237)", "Delete VariableDeclarationStatement(238)", "Delete SimpleName: lenient(239)", "Delete NullLiteral(240)", "Delete InfixExpression: ==(241)", "Delete SimpleName: isLenient(242)", "Delete SuperMethodInvocation(243)", "Delete SimpleName: lenient(244)", "Delete SimpleName: booleanValue(245)", "Delete MethodInvocation(246)", "Delete ConditionalExpression(247)", "Delete ReturnStatement(248)", "Delete Block(249)", "Delete MethodDeclaration(250)", "Delete SimpleName: Override(251)", "Delete MarkerAnnotation(252)", "Delete Modifier: public(253)", "Delete PrimitiveType: int(254)", "Delete SimpleName: getMathScale(255)", "Delete SimpleName: Integer(256)", "Delete SimpleType: Integer(257)", "Delete SimpleName: scale(258)", "Delete SimpleName: FEATURES(259)", "Delete SimpleName: get(260)", "Delete MethodInvocation(261)", "Delete SimpleName: mathScale(262)", "Delete FieldAccess(263)", "Delete VariableDeclarationFragment(264)", "Delete VariableDeclarationStatement(265)", "Delete SimpleName: scale(266)", "Delete NullLiteral(267)", "Delete InfixExpression: ==(268)", "Delete SimpleName: getMathScale(269)", "Delete SuperMethodInvocation(270)", "Delete SimpleName: scale(271)", "Delete SimpleName: intValue(272)", "Delete MethodInvocation(273)", "Delete ConditionalExpression(274)", "Delete ReturnStatement(275)", "Delete Block(276)", "Delete MethodDeclaration(277)", "Delete SimpleName: Override(278)", "Delete MarkerAnnotation(279)", "Delete Modifier: public(280)", "Delete SimpleName: MathContext(281)", "Delete SimpleType: MathContext(282)", "Delete SimpleName: getMathContext(283)", "Delete SimpleName: MathContext(284)", "Delete SimpleType: MathContext(285)", "Delete SimpleName: mc(286)", "Delete SimpleName: FEATURES(287)", "Delete SimpleName: get(288)", "Delete MethodInvocation(289)", "Delete SimpleName: mathContext(290)", "Delete FieldAccess(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete SimpleName: mc(294)", "Delete NullLiteral(295)", "Delete InfixExpression: ==(296)", "Delete SimpleName: getMathContext(297)", "Delete SuperMethodInvocation(298)", "Delete SimpleName: mc(299)", "Delete ConditionalExpression(300)", "Delete ReturnStatement(301)", "Delete Block(302)", "Delete MethodDeclaration(303)", "Delete TypeDeclaration: class(304)"]}}, {"Main_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.BufferedReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.File", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStreamReader", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: print", "DEL SimpleName: context", "DEL Block", "DEL ArrayType: String[]", "DEL TextElement: ParseExceptions and JexlExceptions are logged, and do not cause the application to exit.", "DEL IfStatement", "DEL TextElement: If a single argument is present, it is treated as a filename of a JEXL", "DEL SimpleType: Object", "DEL SimpleName: evaluate", "DEL ExpressionStatement", "DEL SimpleName: JexlException", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: script", "DEL SimpleName: value", "DEL Modifier: static", "DEL SimpleName: args", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL TextElement: Test application for JEXL.", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: console", "DEL ArrayAccess", "DEL SimpleType: JexlException", "DEL SimpleName: Exception", "DEL SimpleName: Main", "DEL CatchClause", "DEL SimpleName: context", "DEL TextElement: Test application for JEXL", "DEL SimpleName: InputStreamReader", "DEL SimpleName: Script", "DEL SimpleName: line", "DEL MethodInvocation", "DEL QualifiedName: System.out", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL QualifiedName: System.out", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL QualifiedName: System.out", "DEL SimpleName: value", "DEL SimpleType: JexlContext", "DEL SimpleName: Expression", "DEL SimpleName: value", "DEL Modifier: public", "DEL SimpleName: context", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: engine", "DEL SimpleName: line", "DEL SimpleType: JexlEngine", "DEL Block", "DEL SimpleType: MapContext", "DEL StringLiteral: \"args\"", "DEL TextElement: This is done so that interactive testing is easier.", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL SimpleType: BufferedReader", "DEL MethodInvocation", "DEL SimpleName: console", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: println", "DEL SimpleName: main", "DEL QualifiedName: args.length", "DEL SimpleName: MapContext", "DEL SimpleName: value", "DEL VariableDeclarationFragment", "DEL SimpleName: args", "DEL ExpressionStatement", "DEL SimpleType: BufferedReader", "DEL SimpleName: execute", "DEL SimpleName: println", "DEL TagElement: @throws", "DEL SimpleName: args", "DEL SimpleName: JexlEngine", "DEL SimpleName: line", "DEL SimpleName: BufferedReader", "DEL SimpleType: InputStreamReader", "DEL SimpleType: Expression", "DEL QualifiedName: System.out", "DEL MethodInvocation", "DEL QualifiedName: System.out", "DEL InfixExpression: ==", "DEL SimpleType: JexlEngine", "DEL SimpleName: println", "DEL TextElement:  (optional) filename to execute. Stored in the args variable.", "DEL ExpressionStatement", "DEL SimpleName: createScript", "DEL SimpleName: print", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL TryStatement", "DEL StringLiteral: \"Return value: \"", "DEL ExpressionStatement", "DEL SimpleName: File", "DEL SimpleName: String", "DEL NumberLiteral: 1", "DEL WhileStatement", "DEL ClassInstanceCreation", "DEL SimpleName: e", "DEL PrimitiveType: void", "DEL SimpleName: context", "DEL SimpleType: Exception", "DEL Modifier: public", "DEL SimpleName: JexlContext", "DEL SimpleName: script", "DEL SimpleName: e", "DEL SimpleName: set", "DEL Dimension", "DEL StringLiteral: \"> \"", "DEL MethodInvocation", "DEL SimpleName: expression", "DEL StringLiteral: \"Return value: \"", "DEL TagElement", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL SimpleName: getLocalizedMessage", "DEL TagElement: @since", "DEL TextElement: Otherwise, lines are read from standard input and evaluated.", "DEL InfixExpression: !=", "DEL Javadoc", "DEL SimpleType: Script", "DEL SimpleName: BufferedReader", "DEL InfixExpression: +", "DEL SimpleName: expression", "DEL MethodDeclaration", "DEL StringLiteral: \"> \"", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: JexlEngine", "DEL VariableDeclarationStatement", "DEL SimpleName: createExpression", "DEL Block", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: args", "DEL SimpleName: Exception", "DEL InfixExpression: +", "DEL SimpleName: readLine", "DEL TextElement:  2.0", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL QualifiedName: System.in", "DEL VariableDeclarationFragment", "DEL SimpleName: engine", "DEL TypeDeclaration: class", "DEL TextElement: script to be executed as a script. Any exceptions terminate the application.", "DEL SimpleType: File", "DEL TextElement:  if parsing or IO fail", "DEL SimpleName: engine"]}]}}, {"Main_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.BufferedReader(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.File(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.InputStreamReader(6)", "Delete ImportDeclaration(7)", "Delete TextElement: Test application for JEXL.(8)", "Delete TagElement(9)", "Delete TextElement:  2.0(10)", "Delete TagElement: @since(11)", "Delete Javadoc(12)", "Delete Modifier: public(13)", "Delete SimpleName: Main(14)", "Delete TextElement: Test application for JEXL(15)", "Delete TextElement: If a single argument is present, it is treated as a filename of a JEXL(16)", "Delete TextElement: script to be executed as a script. Any exceptions terminate the application.(17)", "Delete TextElement: Otherwise, lines are read from standard input and evaluated.(18)", "Delete TextElement: ParseExceptions and JexlExceptions are logged, and do not cause the application to exit.(19)", "Delete TextElement: This is done so that interactive testing is easier.(20)", "Delete TagElement(21)", "Delete SimpleName: args(22)", "Delete TextElement:  (optional) filename to execute. Stored in the args variable.(23)", "Delete TagElement: @param(24)", "Delete SimpleName: Exception(25)", "Delete TextElement:  if parsing or IO fail(26)", "Delete TagElement: @throws(27)", "Delete Javadoc(28)", "Delete Modifier: public(29)", "Delete Modifier: static(30)", "Delete PrimitiveType: void(31)", "Delete SimpleName: main(32)", "Delete SimpleName: String(33)", "Delete SimpleType: String(34)", "Delete Dimension(35)", "Delete ArrayType: String[](36)", "Delete SimpleName: args(37)", "Delete SingleVariableDeclaration(38)", "Delete SimpleName: Exception(39)", "Delete SimpleType: Exception(40)", "Delete SimpleName: JexlEngine(41)", "Delete SimpleType: JexlEngine(42)", "Delete SimpleName: engine(43)", "Delete SimpleName: JexlEngine(44)", "Delete SimpleType: JexlEngine(45)", "Delete ClassInstanceCreation(46)", "Delete VariableDeclarationFragment(47)", "Delete VariableDeclarationStatement(48)", "Delete SimpleName: JexlContext(49)", "Delete SimpleType: JexlContext(50)", "Delete SimpleName: context(51)", "Delete SimpleName: MapContext(52)", "Delete SimpleType: MapContext(53)", "Delete ClassInstanceCreation(54)", "Delete VariableDeclarationFragment(55)", "Delete VariableDeclarationStatement(56)", "Delete SimpleName: context(57)", "Delete SimpleName: set(58)", "Delete StringLiteral: \"args\"(59)", "Delete SimpleName: args(60)", "Delete MethodInvocation(61)", "Delete ExpressionStatement(62)", "Delete QualifiedName: args.length(63)", "Delete NumberLiteral: 1(64)", "Delete InfixExpression: ==(65)", "Delete SimpleName: Script(66)", "Delete SimpleType: Script(67)", "Delete SimpleName: script(68)", "Delete SimpleName: engine(69)", "Delete SimpleName: createScript(70)", "Delete SimpleName: File(71)", "Delete SimpleType: File(72)", "Delete SimpleName: args(73)", "Delete NumberLiteral: 0(74)", "Delete ArrayAccess(75)", "Delete ClassInstanceCreation(76)", "Delete MethodInvocation(77)", "Delete VariableDeclarationFragment(78)", "Delete VariableDeclarationStatement(79)", "Delete SimpleName: Object(80)", "Delete SimpleType: Object(81)", "Delete SimpleName: value(82)", "Delete SimpleName: script(83)", "Delete SimpleName: execute(84)", "Delete SimpleName: context(85)", "Delete MethodInvocation(86)", "Delete VariableDeclarationFragment(87)", "Delete VariableDeclarationStatement(88)", "Delete QualifiedName: System.out(89)", "Delete SimpleName: println(90)", "Delete StringLiteral: \"Return value: \"(91)", "Delete SimpleName: value(92)", "Delete InfixExpression: +(93)", "Delete MethodInvocation(94)", "Delete ExpressionStatement(95)", "Delete Block(96)", "Delete SimpleName: BufferedReader(97)", "Delete SimpleType: BufferedReader(98)", "Delete SimpleName: console(99)", "Delete SimpleName: BufferedReader(100)", "Delete SimpleType: BufferedReader(101)", "Delete SimpleName: InputStreamReader(102)", "Delete SimpleType: InputStreamReader(103)", "Delete QualifiedName: System.in(104)", "Delete ClassInstanceCreation(105)", "Delete ClassInstanceCreation(106)", "Delete VariableDeclarationFragment(107)", "Delete VariableDeclarationStatement(108)", "Delete SimpleName: String(109)", "Delete SimpleType: String(110)", "Delete SimpleName: line(111)", "Delete VariableDeclarationFragment(112)", "Delete VariableDeclarationStatement(113)", "Delete QualifiedName: System.out(114)", "Delete SimpleName: print(115)", "Delete StringLiteral: \"> \"(116)", "Delete MethodInvocation(117)", "Delete ExpressionStatement(118)", "Delete NullLiteral(119)", "Delete SimpleName: line(120)", "Delete SimpleName: console(121)", "Delete SimpleName: readLine(122)", "Delete MethodInvocation(123)", "Delete Assignment: =(124)", "Delete ParenthesizedExpression(125)", "Delete InfixExpression: !=(126)", "Delete SimpleName: Expression(127)", "Delete SimpleType: Expression(128)", "Delete SimpleName: expression(129)", "Delete SimpleName: engine(130)", "Delete SimpleName: createExpression(131)", "Delete SimpleName: line(132)", "Delete MethodInvocation(133)", "Delete VariableDeclarationFragment(134)", "Delete VariableDeclarationStatement(135)", "Delete SimpleName: Object(136)", "Delete SimpleType: Object(137)", "Delete SimpleName: value(138)", "Delete SimpleName: expression(139)", "Delete SimpleName: evaluate(140)", "Delete SimpleName: context(141)", "Delete MethodInvocation(142)", "Delete VariableDeclarationFragment(143)", "Delete VariableDeclarationStatement(144)", "Delete QualifiedName: System.out(145)", "Delete SimpleName: println(146)", "Delete StringLiteral: \"Return value: \"(147)", "Delete SimpleName: value(148)", "Delete InfixExpression: +(149)", "Delete MethodInvocation(150)", "Delete ExpressionStatement(151)", "Delete Block(152)", "Delete SimpleName: JexlException(153)", "Delete SimpleType: JexlException(154)", "Delete SimpleName: e(155)", "Delete SingleVariableDeclaration(156)", "Delete QualifiedName: System.out(157)", "Delete SimpleName: println(158)", "Delete SimpleName: e(159)", "Delete SimpleName: getLocalizedMessage(160)", "Delete MethodInvocation(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete Block(164)", "Delete CatchClause(165)", "Delete TryStatement(166)", "Delete QualifiedName: System.out(167)", "Delete SimpleName: print(168)", "Delete StringLiteral: \"> \"(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)", "Delete Block(172)", "Delete WhileStatement(173)", "Delete Block(174)", "Delete IfStatement(175)", "Delete Block(176)", "Delete MethodDeclaration(177)", "Delete TypeDeclaration: class(178)"]}}, {"MapContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL TextElement: Creates a MapContext wrapping an existing user provided map.", "DEL Javadoc", "DEL Modifier: public", "DEL TagElement", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleName: containsKey", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL SimpleName: map", "DEL SimpleName: Object", "DEL ConstructorInvocation", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL Modifier: protected", "DEL SimpleName: MapContext", "DEL SimpleName: set", "DEL TextElement: Creates a MapContext on an automatically allocated underlying HashMap.", "DEL SimpleName: map", "DEL SimpleType: JexlContext", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: vars", "DEL SimpleName: Object", "DEL TextElement:  ", "DEL ConditionalExpression", "DEL SimpleType: Object", "DEL SimpleName: name", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL SimpleName: vars", "DEL SimpleName: map", "DEL PrimitiveType: boolean", "DEL SimpleName: vars", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: name", "DEL SimpleName: JexlContext", "DEL TagElement", "DEL Block", "DEL ClassInstanceCreation", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleType: Object", "DEL TextElement: The wrapped variable map.", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL TagElement", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: Map", "DEL Javadoc", "DEL SimpleName: MapContext", "DEL SuperConstructorInvocation", "DEL TagElement: @param", "DEL SimpleName: vars", "DEL TagElement: @inheritDoc", "DEL SimpleType: String", "DEL SimpleName: MapContext", "DEL SimpleName: map", "DEL SimpleName: get", "DEL SimpleName: String", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL VariableDeclarationFragment", "DEL ParameterizedType: HashMap<String,Object>", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Javadoc", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleType: HashMap", "DEL TagElement: @inheritDoc", "DEL SimpleType: Map", "DEL Modifier: public", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: String", "DEL ReturnStatement", "DEL SimpleName: Map", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL SimpleName: put", "DEL TagElement", "DEL TextElement: <p>Each entry in the map is considered a variable name, value pair.</p>", "DEL SimpleName: get", "DEL Javadoc", "DEL TextElement: Wraps a map in a context.", "DEL SimpleName: HashMap", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: Map", "DEL SimpleName: map", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: name", "DEL TextElement:  ", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: name", "DEL TextElement:  the variable map", "DEL Block", "DEL SimpleType: Object", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL SimpleName: name", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL Block", "DEL Modifier: public", "DEL TextElement:  ", "DEL SimpleName: has", "DEL TagElement", "DEL Javadoc", "DEL FieldDeclaration", "DEL InfixExpression: ==", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleName: String", "DEL Javadoc"]}]}}, {"MapContext_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.HashMap(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Map(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Wraps a map in a context.(6)", "Delete TextElement: <p>Each entry in the map is considered a variable name, value pair.</p>(7)", "Delete TagElement(8)", "Delete Javadoc(9)", "Delete Modifier: public(10)", "Delete SimpleName: MapContext(11)", "Delete SimpleName: JexlContext(12)", "Delete SimpleType: JexlContext(13)", "Delete TextElement: The wrapped variable map.(14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: protected(17)", "Delete Modifier: final(18)", "Delete SimpleName: Map(19)", "Delete SimpleType: Map(20)", "Delete SimpleName: String(21)", "Delete SimpleType: String(22)", "Delete SimpleName: Object(23)", "Delete SimpleType: Object(24)", "Delete ParameterizedType: Map<String,Object>(25)", "Delete SimpleName: map(26)", "Delete VariableDeclarationFragment(27)", "Delete FieldDeclaration(28)", "Delete TextElement: Creates a MapContext on an automatically allocated underlying HashMap.(29)", "Delete TagElement(30)", "Delete Javadoc(31)", "Delete Modifier: public(32)", "Delete SimpleName: MapContext(33)", "Delete NullLiteral(34)", "Delete ConstructorInvocation(35)", "Delete Block(36)", "Delete MethodDeclaration(37)", "Delete TextElement: Creates a MapContext wrapping an existing user provided map.(38)", "Delete TagElement(39)", "Delete SimpleName: vars(40)", "Delete TextElement:  the variable map(41)", "Delete TagElement: @param(42)", "Delete Javadoc(43)", "Delete Modifier: public(44)", "Delete SimpleName: MapContext(45)", "Delete SimpleName: Map(46)", "Delete SimpleType: Map(47)", "Delete SimpleName: String(48)", "Delete SimpleType: String(49)", "Delete SimpleName: Object(50)", "Delete SimpleType: Object(51)", "Delete ParameterizedType: Map<String,Object>(52)", "Delete SimpleName: vars(53)", "Delete SingleVariableDeclaration(54)", "Delete SuperConstructorInvocation(55)", "Delete SimpleName: map(56)", "Delete SimpleName: vars(57)", "Delete NullLiteral(58)", "Delete InfixExpression: ==(59)", "Delete SimpleName: HashMap(60)", "Delete SimpleType: HashMap(61)", "Delete SimpleName: String(62)", "Delete SimpleType: String(63)", "Delete SimpleName: Object(64)", "Delete SimpleType: Object(65)", "Delete ParameterizedType: HashMap<String,Object>(66)", "Delete ClassInstanceCreation(67)", "Delete SimpleName: vars(68)", "Delete ConditionalExpression(69)", "Delete Assignment: =(70)", "Delete ExpressionStatement(71)", "Delete Block(72)", "Delete MethodDeclaration(73)", "Delete TagElement: @inheritDoc(74)", "Delete TextElement:  (75)", "Delete TagElement(76)", "Delete Javadoc(77)", "Delete Modifier: public(78)", "Delete PrimitiveType: boolean(79)", "Delete SimpleName: has(80)", "Delete SimpleName: String(81)", "Delete SimpleType: String(82)", "Delete SimpleName: name(83)", "Delete SingleVariableDeclaration(84)", "Delete SimpleName: map(85)", "Delete SimpleName: containsKey(86)", "Delete SimpleName: name(87)", "Delete MethodInvocation(88)", "Delete ReturnStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete TagElement: @inheritDoc(92)", "Delete TextElement:  (93)", "Delete TagElement(94)", "Delete Javadoc(95)", "Delete Modifier: public(96)", "Delete SimpleName: Object(97)", "Delete SimpleType: Object(98)", "Delete SimpleName: get(99)", "Delete SimpleName: String(100)", "Delete SimpleType: String(101)", "Delete SimpleName: name(102)", "Delete SingleVariableDeclaration(103)", "Delete SimpleName: map(104)", "Delete SimpleName: get(105)", "Delete SimpleName: name(106)", "Delete MethodInvocation(107)", "Delete ReturnStatement(108)", "Delete Block(109)", "Delete MethodDeclaration(110)", "Delete TagElement: @inheritDoc(111)", "Delete TextElement:  (112)", "Delete TagElement(113)", "Delete Javadoc(114)", "Delete Modifier: public(115)", "Delete PrimitiveType: void(116)", "Delete SimpleName: set(117)", "Delete SimpleName: String(118)", "Delete SimpleType: String(119)", "Delete SimpleName: name(120)", "Delete SingleVariableDeclaration(121)", "Delete SimpleName: Object(122)", "Delete SimpleType: Object(123)", "Delete SimpleName: value(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: map(126)", "Delete SimpleName: put(127)", "Delete SimpleName: name(128)", "Delete SimpleName: value(129)", "Delete MethodInvocation(130)", "Delete ExpressionStatement(131)", "Delete Block(132)", "Delete MethodDeclaration(133)", "Delete TypeDeclaration: class(134)"]}}, {"NamespaceResolver_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL TagElement: @since", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: NamespaceResolver", "DEL TextElement: results.", "DEL MethodDeclaration", "DEL TextElement:  the namespace object", "DEL TextElement: <p>", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL Modifier: public", "DEL SimpleName: name", "DEL TextElement: </p>", "DEL TagElement: @return", "DEL TagElement: @param", "DEL TextElement: </p>", "DEL TextElement: In JEXL, a namespace is an object that serves the purpose of encapsulating functions; for instance,", "DEL TextElement: the \"math\" namespace would be the proper object to expose functions like \"log(...)\", \"sinus(...)\", etc.", "DEL Javadoc", "DEL TextElement:  the name", "DEL TextElement: Resolves a namespace by its name.", "DEL TextElement: JEXL itself reserves 'jexl' and 'ujexl' as namespaces for internal purpose; resolving those may lead to unexpected", "DEL SimpleType: String", "DEL TextElement:  2.1", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: resolveNamespace", "DEL TypeDeclaration: interface", "DEL SimpleName: Object", "DEL TextElement: <p>", "DEL TagElement", "DEL TextElement: In expressions like \"ns:function(...)\", the resolver is called with resolveNamespace(\"ns\").", "DEL TextElement: This interface declares how to resolve a namespace from its name; it is used by the interpreter during evalutation."]}]}}, {"NamespaceResolver_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: This interface declares how to resolve a namespace from its name; it is used by the interpreter during evalutation.(2)", "Delete TextElement: <p>(3)", "Delete TextElement: In JEXL, a namespace is an object that serves the purpose of encapsulating functions; for instance,(4)", "Delete TextElement: the \"math\" namespace would be the proper object to expose functions like \"log(...)\", \"sinus(...)\", etc.(5)", "Delete TextElement: </p>(6)", "Delete TextElement: In expressions like \"ns:function(...)\", the resolver is called with resolveNamespace(\"ns\").(7)", "Delete TextElement: <p>(8)", "Delete TextElement: JEXL itself reserves 'jexl' and 'ujexl' as namespaces for internal purpose; resolving those may lead to unexpected(9)", "Delete TextElement: results.(10)", "Delete TextElement: </p>(11)", "Delete TagElement(12)", "Delete TextElement:  2.1(13)", "Delete TagElement: @since(14)", "Delete Javadoc(15)", "Delete Modifier: public(16)", "Delete SimpleName: NamespaceResolver(17)", "Delete TextElement: Resolves a namespace by its name.(18)", "Delete TagElement(19)", "Delete SimpleName: name(20)", "Delete TextElement:  the name(21)", "Delete TagElement: @param(22)", "Delete TextElement:  the namespace object(23)", "Delete TagElement: @return(24)", "Delete Javadoc(25)", "Delete SimpleName: Object(26)", "Delete SimpleType: Object(27)", "Delete SimpleName: resolveNamespace(28)", "Delete SimpleName: String(29)", "Delete SimpleType: String(30)", "Delete SimpleName: name(31)", "Delete SingleVariableDeclaration(32)", "Delete MethodDeclaration(33)", "Delete TypeDeclaration: interface(34)"]}}, {"ObjectContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement: The object serving as context provider. ", "DEL FieldDeclaration", "DEL Javadoc", "DEL Assignment: =", "DEL FieldAccess", "DEL SimpleName: T", "DEL Modifier: public", "DEL SimpleName: wrapped", "DEL SimpleName: name", "DEL TagElement: @param", "DEL TagElement: @inheritDoc", "DEL TagElement", "DEL SimpleType: JexlEngine", "DEL SimpleType: T", "DEL SimpleName: name", "DEL TextElement: >", "DEL Modifier: final", "DEL SimpleName: jexl", "DEL TextElement: The property solving jexl engine. ", "DEL TagElement: @inheritDoc", "DEL TextElement: Wraps an Object as a Jexl context.", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL Modifier: public", "DEL SimpleName: T", "DEL ThisExpression", "DEL SimpleName: object", "DEL SimpleName: jexl", "DEL ExpressionStatement", "DEL TextElement: Creates a new ObjectContext.", "DEL TextElement:  ", "DEL SimpleType: String", "DEL SimpleName: jexl", "DEL TagElement: @param", "DEL TagElement", "DEL ExpressionStatement", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: setProperty", "DEL SimpleName: getUberspect", "DEL SimpleName: name", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: has", "DEL TextElement:  the jexl engine to use to solve properties", "DEL SimpleName: ObjectContext", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL SimpleType: String", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL SimpleName: engine", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleType: T", "DEL TextElement:  the object to wrap in this context", "DEL Modifier: private", "DEL TagElement", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: getPropertyGet", "DEL Javadoc", "DEL Block", "DEL Javadoc", "DEL FieldDeclaration", "DEL Javadoc", "DEL TagElement", "DEL Block", "DEL SimpleName: JexlContext", "DEL SimpleName: wrapped", "DEL PrimitiveType: void", "DEL Modifier: public", "DEL SimpleName: object", "DEL SimpleName: wrapped", "DEL SimpleName: get", "DEL FieldAccess", "DEL SimpleType: JexlEngine", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL TextElement:  2.1", "DEL SimpleName: object", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: value", "DEL TypeDeclaration: class", "DEL TagElement: @since", "DEL SimpleName: set", "DEL SimpleName: object", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: name", "DEL SimpleName: engine", "DEL SimpleName: name", "DEL SimpleType: String", "DEL MethodInvocation", "DEL TextElement:  ", "DEL SimpleName: String", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: getProperty", "DEL InfixExpression: !=", "DEL SimpleName: JexlEngine", "DEL SimpleName: jexl", "DEL TagElement: @param", "DEL TypeParameter", "DEL SimpleName: engine", "DEL SimpleName: T", "DEL TagElement: @inheritDoc", "DEL SingleVariableDeclaration", "DEL SimpleName: jexl", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: JexlEngine", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL Assignment: =", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement: <", "DEL SimpleType: Object", "DEL SimpleType: JexlContext", "DEL SimpleName: ObjectContext", "DEL SimpleName: object", "DEL TextElement:  the wrapped object type to use", "DEL Block", "DEL SimpleName: T", "DEL NullLiteral"]}]}}, {"ObjectContext_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Wraps an Object as a Jexl context.(2)", "Delete TagElement(3)", "Delete TextElement: <(4)", "Delete SimpleName: T(5)", "Delete TextElement: >(6)", "Delete TextElement:  the wrapped object type to use(7)", "Delete TagElement: @param(8)", "Delete TextElement:  2.1(9)", "Delete TagElement: @since(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete SimpleName: ObjectContext(13)", "Delete SimpleName: T(14)", "Delete TypeParameter(15)", "Delete SimpleName: JexlContext(16)", "Delete SimpleType: JexlContext(17)", "Delete TextElement: The property solving jexl engine. (18)", "Delete TagElement(19)", "Delete Javadoc(20)", "Delete Modifier: private(21)", "Delete Modifier: final(22)", "Delete SimpleName: JexlEngine(23)", "Delete SimpleType: JexlEngine(24)", "Delete SimpleName: jexl(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: The object serving as context provider. (28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete Modifier: private(31)", "Delete Modifier: final(32)", "Delete SimpleName: T(33)", "Delete SimpleType: T(34)", "Delete SimpleName: object(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: Creates a new ObjectContext.(38)", "Delete TagElement(39)", "Delete SimpleName: engine(40)", "Delete TextElement:  the jexl engine to use to solve properties(41)", "Delete TagElement: @param(42)", "Delete SimpleName: wrapped(43)", "Delete TextElement:  the object to wrap in this context(44)", "Delete TagElement: @param(45)", "Delete Javadoc(46)", "Delete Modifier: public(47)", "Delete SimpleName: ObjectContext(48)", "Delete SimpleName: JexlEngine(49)", "Delete SimpleType: JexlEngine(50)", "Delete SimpleName: engine(51)", "Delete SingleVariableDeclaration(52)", "Delete SimpleName: T(53)", "Delete SimpleType: T(54)", "Delete SimpleName: wrapped(55)", "Delete SingleVariableDeclaration(56)", "Delete ThisExpression(57)", "Delete SimpleName: jexl(58)", "Delete FieldAccess(59)", "Delete SimpleName: engine(60)", "Delete Assignment: =(61)", "Delete ExpressionStatement(62)", "Delete ThisExpression(63)", "Delete SimpleName: object(64)", "Delete FieldAccess(65)", "Delete SimpleName: wrapped(66)", "Delete Assignment: =(67)", "Delete ExpressionStatement(68)", "Delete Block(69)", "Delete MethodDeclaration(70)", "Delete TagElement: @inheritDoc(71)", "Delete TextElement:  (72)", "Delete TagElement(73)", "Delete Javadoc(74)", "Delete Modifier: public(75)", "Delete SimpleName: Object(76)", "Delete SimpleType: Object(77)", "Delete SimpleName: get(78)", "Delete SimpleName: String(79)", "Delete SimpleType: String(80)", "Delete SimpleName: name(81)", "Delete SingleVariableDeclaration(82)", "Delete SimpleName: jexl(83)", "Delete SimpleName: getProperty(84)", "Delete SimpleName: object(85)", "Delete SimpleName: name(86)", "Delete MethodInvocation(87)", "Delete ReturnStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete TagElement: @inheritDoc(91)", "Delete TextElement:  (92)", "Delete TagElement(93)", "Delete Javadoc(94)", "Delete Modifier: public(95)", "Delete PrimitiveType: void(96)", "Delete SimpleName: set(97)", "Delete SimpleName: String(98)", "Delete SimpleType: String(99)", "Delete SimpleName: name(100)", "Delete SingleVariableDeclaration(101)", "Delete SimpleName: Object(102)", "Delete SimpleType: Object(103)", "Delete SimpleName: value(104)", "Delete SingleVariableDeclaration(105)", "Delete SimpleName: jexl(106)", "Delete SimpleName: setProperty(107)", "Delete SimpleName: object(108)", "Delete SimpleName: name(109)", "Delete SimpleName: value(110)", "Delete MethodInvocation(111)", "Delete ExpressionStatement(112)", "Delete Block(113)", "Delete MethodDeclaration(114)", "Delete TagElement: @inheritDoc(115)", "Delete TextElement:  (116)", "Delete TagElement(117)", "Delete Javadoc(118)", "Delete Modifier: public(119)", "Delete PrimitiveType: boolean(120)", "Delete SimpleName: has(121)", "Delete SimpleName: String(122)", "Delete SimpleType: String(123)", "Delete SimpleName: name(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: jexl(126)", "Delete SimpleName: getUberspect(127)", "Delete MethodInvocation(128)", "Delete SimpleName: getPropertyGet(129)", "Delete SimpleName: object(130)", "Delete SimpleName: name(131)", "Delete NullLiteral(132)", "Delete MethodInvocation(133)", "Delete NullLiteral(134)", "Delete InfixExpression: !=(135)", "Delete ReturnStatement(136)", "Delete Block(137)", "Delete MethodDeclaration(138)", "Delete TypeDeclaration: class(139)"]}}, {"ReadonlyContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: JexlContext", "DEL MethodDeclaration", "DEL TextElement:  the unused variable value", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL TagElement: @inheritDoc", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL SimpleName: has", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: name", "DEL TextElement:  the wrapped context", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL SimpleName: Object", "DEL Modifier: final", "DEL SimpleName: name", "DEL TagElement: @param", "DEL Block", "DEL SimpleType: JexlContext", "DEL TagElement", "DEL TagElement", "DEL PrimitiveType: void", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: wrapped", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Javadoc", "DEL Javadoc", "DEL Block", "DEL Modifier: public", "DEL SimpleName: get", "DEL TagElement: @since", "DEL SimpleName: context", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL SimpleType: JexlContext", "DEL SimpleType: Object", "DEL TextElement: Will throw an UnsupportedOperationException when called; the JexlEngine deals with it appropriately.", "DEL SimpleName: name", "DEL ReturnStatement", "DEL SimpleName: ReadonlyContext", "DEL SimpleType: JexlContext", "DEL ThrowStatement", "DEL SimpleName: ReadonlyContext", "DEL Modifier: public", "DEL SimpleName: wrapped", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: name", "DEL TextElement:  the unused variable name", "DEL SimpleName: has", "DEL TextElement: Creates a new readonly context.", "DEL TextElement: The wrapped context. ", "DEL SimpleType: String", "DEL SimpleName: value", "DEL TextElement:  2.1", "DEL SimpleName: context", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: set", "DEL SimpleName: name", "DEL SimpleName: name", "DEL SimpleName: UnsupportedOperationException", "DEL Block", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: wrapped", "DEL TextElement: A readonly context wrapper.", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: get", "DEL VariableDeclarationFragment", "DEL SimpleName: context", "DEL SimpleName: wrapped", "DEL StringLiteral: \"Not supported.\"", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL SimpleType: String", "DEL Assignment: ="]}]}}, {"ReadonlyContext_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: A readonly context wrapper.(2)", "Delete TagElement(3)", "Delete TextElement:  2.1(4)", "Delete TagElement: @since(5)", "Delete Javadoc(6)", "Delete Modifier: public(7)", "Delete Modifier: final(8)", "Delete SimpleName: ReadonlyContext(9)", "Delete SimpleName: JexlContext(10)", "Delete SimpleType: JexlContext(11)", "Delete TextElement: The wrapped context. (12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete Modifier: private(15)", "Delete Modifier: final(16)", "Delete SimpleName: JexlContext(17)", "Delete SimpleType: JexlContext(18)", "Delete SimpleName: wrapped(19)", "Delete VariableDeclarationFragment(20)", "Delete FieldDeclaration(21)", "Delete TextElement: Creates a new readonly context.(22)", "Delete TagElement(23)", "Delete SimpleName: context(24)", "Delete TextElement:  the wrapped context(25)", "Delete TagElement: @param(26)", "Delete Javadoc(27)", "Delete Modifier: public(28)", "Delete SimpleName: ReadonlyContext(29)", "Delete SimpleName: JexlContext(30)", "Delete SimpleType: JexlContext(31)", "Delete SimpleName: context(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: wrapped(34)", "Delete SimpleName: context(35)", "Delete Assignment: =(36)", "Delete ExpressionStatement(37)", "Delete Block(38)", "Delete MethodDeclaration(39)", "Delete TagElement: @inheritDoc(40)", "Delete TextElement:  (41)", "Delete TagElement(42)", "Delete Javadoc(43)", "Delete Modifier: public(44)", "Delete SimpleName: Object(45)", "Delete SimpleType: Object(46)", "Delete SimpleName: get(47)", "Delete SimpleName: String(48)", "Delete SimpleType: String(49)", "Delete SimpleName: name(50)", "Delete SingleVariableDeclaration(51)", "Delete SimpleName: wrapped(52)", "Delete SimpleName: get(53)", "Delete SimpleName: name(54)", "Delete MethodInvocation(55)", "Delete ReturnStatement(56)", "Delete Block(57)", "Delete MethodDeclaration(58)", "Delete TextElement: Will throw an UnsupportedOperationException when called; the JexlEngine deals with it appropriately.(59)", "Delete TagElement(60)", "Delete SimpleName: name(61)", "Delete TextElement:  the unused variable name(62)", "Delete TagElement: @param(63)", "Delete SimpleName: value(64)", "Delete TextElement:  the unused variable value(65)", "Delete TagElement: @param(66)", "Delete Javadoc(67)", "Delete Modifier: public(68)", "Delete PrimitiveType: void(69)", "Delete SimpleName: set(70)", "Delete SimpleName: String(71)", "Delete SimpleType: String(72)", "Delete SimpleName: name(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: Object(75)", "Delete SimpleType: Object(76)", "Delete SimpleName: value(77)", "Delete SingleVariableDeclaration(78)", "Delete SimpleName: UnsupportedOperationException(79)", "Delete SimpleType: UnsupportedOperationException(80)", "Delete StringLiteral: \"Not supported.\"(81)", "Delete ClassInstanceCreation(82)", "Delete ThrowStatement(83)", "Delete Block(84)", "Delete MethodDeclaration(85)", "Delete TagElement: @inheritDoc(86)", "Delete TextElement:  (87)", "Delete TagElement(88)", "Delete Javadoc(89)", "Delete Modifier: public(90)", "Delete PrimitiveType: boolean(91)", "Delete SimpleName: has(92)", "Delete SimpleName: String(93)", "Delete SimpleType: String(94)", "Delete SimpleName: name(95)", "Delete SingleVariableDeclaration(96)", "Delete SimpleName: wrapped(97)", "Delete SimpleName: has(98)", "Delete SimpleName: name(99)", "Delete MethodInvocation(100)", "Delete ReturnStatement(101)", "Delete Block(102)", "Delete MethodDeclaration(103)", "Delete TypeDeclaration: class(104)"]}}, {"Script_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.concurrent.Callable", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: getVariables", "DEL TextElement:  2.1", "DEL TagElement: @return", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TextElement: the last statement.", "DEL SimpleName: callable", "DEL TagElement: @return", "DEL TextElement: Creates a Callable from this script.", "DEL TagElement", "DEL SimpleName: Object", "DEL SimpleName: context", "DEL SimpleType: List", "DEL TextElement: a given set of ", "DEL TextElement:  A JexlContext containing variables.", "DEL TagElement: @link", "DEL SimpleType: Object", "DEL Dimension", "DEL SimpleName: context", "DEL TextElement:  the context", "DEL SimpleName: context", "DEL ParameterizedType: Set<List<String>>", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: JexlContext", "DEL SimpleName: args", "DEL SimpleType: String", "DEL TextElement: Creates a Callable from this script.", "DEL SimpleName: Callable", "DEL SimpleName: String", "DEL TextElement: the last statement.", "DEL TagElement: @since", "DEL TextElement: Executes the script with the variables contained in the", "DEL SimpleType: Callable", "DEL TextElement:  A JexlContext containing variables.", "DEL TextElement: supplied ", "DEL TagElement: @since", "DEL TagElement: @return", "DEL SimpleName: context", "DEL SimpleName: execute", "DEL SimpleName: execute", "DEL SimpleName: Set", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL TextElement: <p>A script is some valid JEXL syntax to be executed with", "DEL TagElement: @return", "DEL Javadoc", "DEL TagElement: @return", "DEL TextElement:  variables.</p>", "DEL TextElement: <p>A script is a group of statements, separated by semicolons.</p>", "DEL SimpleName: getLocalVariables", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL TextElement: Returns the text of this Script.", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: context", "DEL SimpleName: Script", "DEL TagElement: @return", "DEL TextElement: <p>A JEXL Script.</p>", "DEL SingleVariableDeclaration", "DEL TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>", "DEL ParameterizedType: List<String>", "DEL SimpleName: JexlContext", "DEL TagElement: @since", "DEL TextElement:  the parameters or null", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TagElement", "DEL TagElement", "DEL TypeDeclaration: interface", "DEL SimpleName: String", "DEL SimpleName: JexlContext", "DEL SimpleName: JexlContext", "DEL SimpleName: context", "DEL TextElement:  1.1", "DEL SimpleName: getParameters", "DEL Javadoc", "DEL SimpleType: JexlContext", "DEL TextElement: Gets this script variables.", "DEL TextElement:  2.1", "DEL TextElement: <p>Note that since variables can be in an ant-ish form (ie foo.bar.quux), each variable is returned as ", "DEL SimpleType: JexlContext", "DEL TextElement: Gets this script parameters.", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL SimpleName: args", "DEL SimpleName: args", "DEL Modifier: public", "DEL TextElement:  2.1", "DEL MethodDeclaration", "DEL Javadoc", "DEL TagElement", "DEL TextElement:  The result of this script, usually the result of ", "DEL TextElement: Executes the script with the variables contained in the", "DEL SimpleName: JexlContext", "DEL TextElement: as well as expressions and assignment statements.</p>", "DEL TagElement: @since", "DEL SimpleName: String", "DEL TagElement: @link", "DEL TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>", "DEL SimpleType: Callable", "DEL SimpleName: context", "DEL ArrayType: String[]", "DEL SimpleName: callable", "DEL TextElement:  the context", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TextElement: a list of strings where each entry is a fragment of the variable ({\"foo\", \"bar\", \"quux\"} in the example.</p>", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL SimpleType: Set", "DEL TagElement", "DEL TextElement: Gets this script local variables.", "DEL TextElement:  the script arguments", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: JexlContext", "DEL SimpleName: getText", "DEL TextElement:  The script to be executed.", "DEL TextElement:  2.1", "DEL SimpleName: Callable", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL TagElement", "DEL TextElement:  2.1", "DEL MethodDeclaration", "DEL TextElement: Control statements such as <code>if</code> and <code>while</code>", "DEL TextElement: parameters used during parsing.", "DEL TextElement:  the callable", "DEL TagElement: @link", "DEL TextElement:  The result of this script, usually the result of ", "DEL MethodDeclaration", "DEL SimpleType: JexlContext", "DEL TextElement:  the callable", "DEL TagElement: @param", "DEL TextElement:  2.1", "DEL ParameterizedType: Callable<Object>", "DEL TagElement: @param", "DEL TagElement: @since", "DEL TagElement: @since", "DEL TextElement:  the variables or null", "DEL TextElement: supplied ", "DEL TagElement: @param", "DEL TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>", "DEL ParameterizedType: Callable<Object>", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL TextElement:  the local variables or null", "DEL Javadoc", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL TagElement: @since", "DEL TextElement: . ", "DEL SimpleType: JexlContext", "DEL TextElement:  and a set of arguments corresponding to the", "DEL Javadoc", "DEL Javadoc", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleType: String", "DEL TextElement: <p>The statements can be <code>blocks</code> (curly braces containing code),", "DEL MethodDeclaration", "DEL ArrayType: String[]", "DEL TextElement:  the arguments", "DEL SimpleType: Object", "DEL TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>", "DEL TagElement"]}]}}, {"Script_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Set(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.concurrent.Callable(6)", "Delete ImportDeclaration(7)", "Delete TextElement: <p>A JEXL Script.</p>(8)", "Delete TextElement: <p>A script is some valid JEXL syntax to be executed with(9)", "Delete TextElement: a given set of (10)", "Delete SimpleName: JexlContext(11)", "Delete TagElement: @link(12)", "Delete TextElement:  variables.</p>(13)", "Delete TextElement: <p>A script is a group of statements, separated by semicolons.</p>(14)", "Delete TextElement: <p>The statements can be <code>blocks</code> (curly braces containing code),(15)", "Delete TextElement: Control statements such as <code>if</code> and <code>while</code>(16)", "Delete TextElement: as well as expressions and assignment statements.</p>(17)", "Delete TagElement(18)", "Delete TextElement:  1.1(19)", "Delete TagElement: @since(20)", "Delete Javadoc(21)", "Delete Modifier: public(22)", "Delete SimpleName: Script(23)", "Delete TextElement: Executes the script with the variables contained in the(24)", "Delete TextElement: supplied (25)", "Delete SimpleName: JexlContext(26)", "Delete TagElement: @link(27)", "Delete TextElement: . (28)", "Delete TagElement(29)", "Delete SimpleName: context(30)", "Delete TextElement:  A JexlContext containing variables.(31)", "Delete TagElement: @param(32)", "Delete TextElement:  The result of this script, usually the result of (33)", "Delete TextElement: the last statement.(34)", "Delete TagElement: @return(35)", "Delete Javadoc(36)", "Delete SimpleName: Object(37)", "Delete SimpleType: Object(38)", "Delete SimpleName: execute(39)", "Delete SimpleName: JexlContext(40)", "Delete SimpleType: JexlContext(41)", "Delete SimpleName: context(42)", "Delete SingleVariableDeclaration(43)", "Delete MethodDeclaration(44)", "Delete TextElement: Executes the script with the variables contained in the(45)", "Delete TextElement: supplied (46)", "Delete SimpleName: JexlContext(47)", "Delete TagElement: @link(48)", "Delete TextElement:  and a set of arguments corresponding to the(49)", "Delete TextElement: parameters used during parsing.(50)", "Delete TagElement(51)", "Delete SimpleName: context(52)", "Delete TextElement:  A JexlContext containing variables.(53)", "Delete TagElement: @param(54)", "Delete SimpleName: args(55)", "Delete TextElement:  the arguments(56)", "Delete TagElement: @param(57)", "Delete TextElement:  The result of this script, usually the result of (58)", "Delete TextElement: the last statement.(59)", "Delete TagElement: @return(60)", "Delete TextElement:  2.1(61)", "Delete TagElement: @since(62)", "Delete Javadoc(63)", "Delete SimpleName: Object(64)", "Delete SimpleType: Object(65)", "Delete SimpleName: execute(66)", "Delete SimpleName: JexlContext(67)", "Delete SimpleType: JexlContext(68)", "Delete SimpleName: context(69)", "Delete SingleVariableDeclaration(70)", "Delete SimpleName: Object(71)", "Delete SimpleType: Object(72)", "Delete SimpleName: args(73)", "Delete SingleVariableDeclaration(74)", "Delete MethodDeclaration(75)", "Delete TextElement: Returns the text of this Script.(76)", "Delete TagElement(77)", "Delete TextElement:  The script to be executed.(78)", "Delete TagElement: @return(79)", "Delete Javadoc(80)", "Delete SimpleName: String(81)", "Delete SimpleType: String(82)", "Delete SimpleName: getText(83)", "Delete MethodDeclaration(84)", "Delete TextElement: Gets this script parameters.(85)", "Delete TagElement(86)", "Delete TextElement:  the parameters or null(87)", "Delete TagElement: @return(88)", "Delete TextElement:  2.1(89)", "Delete TagElement: @since(90)", "Delete Javadoc(91)", "Delete SimpleName: String(92)", "Delete SimpleType: String(93)", "Delete Dimension(94)", "Delete ArrayType: String[](95)", "Delete SimpleName: getParameters(96)", "Delete MethodDeclaration(97)", "Delete TextElement: Gets this script local variables.(98)", "Delete TagElement(99)", "Delete TextElement:  the local variables or null(100)", "Delete TagElement: @return(101)", "Delete TextElement:  2.1(102)", "Delete TagElement: @since(103)", "Delete Javadoc(104)", "Delete SimpleName: String(105)", "Delete SimpleType: String(106)", "Delete Dimension(107)", "Delete ArrayType: String[](108)", "Delete SimpleName: getLocalVariables(109)", "Delete MethodDeclaration(110)", "Delete TextElement: Gets this script variables.(111)", "Delete TextElement: <p>Note that since variables can be in an ant-ish form (ie foo.bar.quux), each variable is returned as (112)", "Delete TextElement: a list of strings where each entry is a fragment of the variable ({\"foo\", \"bar\", \"quux\"} in the example.</p>(113)", "Delete TagElement(114)", "Delete TextElement:  the variables or null(115)", "Delete TagElement: @return(116)", "Delete TextElement:  2.1(117)", "Delete TagElement: @since(118)", "Delete Javadoc(119)", "Delete SimpleName: Set(120)", "Delete SimpleType: Set(121)", "Delete SimpleName: List(122)", "Delete SimpleType: List(123)", "Delete SimpleName: String(124)", "Delete SimpleType: String(125)", "Delete ParameterizedType: List<String>(126)", "Delete ParameterizedType: Set<List<String>>(127)", "Delete SimpleName: getVariables(128)", "Delete MethodDeclaration(129)", "Delete TextElement: Creates a Callable from this script.(130)", "Delete TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>(131)", "Delete TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>(132)", "Delete TagElement(133)", "Delete SimpleName: context(134)", "Delete TextElement:  the context(135)", "Delete TagElement: @param(136)", "Delete TextElement:  the callable(137)", "Delete TagElement: @return(138)", "Delete TextElement:  2.1(139)", "Delete TagElement: @since(140)", "Delete Javadoc(141)", "Delete SimpleName: Callable(142)", "Delete SimpleType: Callable(143)", "Delete SimpleName: Object(144)", "Delete SimpleType: Object(145)", "Delete ParameterizedType: Callable<Object>(146)", "Delete SimpleName: callable(147)", "Delete SimpleName: JexlContext(148)", "Delete SimpleType: JexlContext(149)", "Delete SimpleName: context(150)", "Delete SingleVariableDeclaration(151)", "Delete MethodDeclaration(152)", "Delete TextElement: Creates a Callable from this script.(153)", "Delete TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>(154)", "Delete TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>(155)", "Delete TagElement(156)", "Delete SimpleName: context(157)", "Delete TextElement:  the context(158)", "Delete TagElement: @param(159)", "Delete SimpleName: args(160)", "Delete TextElement:  the script arguments(161)", "Delete TagElement: @param(162)", "Delete TextElement:  the callable(163)", "Delete TagElement: @return(164)", "Delete TextElement:  2.1(165)", "Delete TagElement: @since(166)", "Delete Javadoc(167)", "Delete SimpleName: Callable(168)", "Delete SimpleType: Callable(169)", "Delete SimpleName: Object(170)", "Delete SimpleType: Object(171)", "Delete ParameterizedType: Callable<Object>(172)", "Delete SimpleName: callable(173)", "Delete SimpleName: JexlContext(174)", "Delete SimpleType: JexlContext(175)", "Delete SimpleName: context(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: Object(178)", "Delete SimpleType: Object(179)", "Delete SimpleName: args(180)", "Delete SingleVariableDeclaration(181)", "Delete MethodDeclaration(182)", "Delete TypeDeclaration: interface(183)"]}}, {"UnifiedJEXL_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.BufferedReader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Reader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.StringReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Writer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.LinkedHashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection.Uberspect"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.JexlNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.StringParser"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement: @param", "DEL StringLiteral: \"Nested expression can not have a source\"", "DEL NumberLiteral: 0", "DEL SimpleName: aJexl", "DEL TextElement: Prints an expression result.", "DEL SimpleName: ArrayList", "DEL Block", "DEL SimpleName: prepared", "DEL SimpleName: count", "DEL SimpleName: append", "DEL Modifier: public", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: strb", "DEL TagElement", "DEL SimpleName: interpreter", "DEL StringLiteral: \"}\"", "DEL SimpleName: ready", "DEL TagElement", "DEL TextElement:  the input reader", "DEL Block", "DEL ThisExpression", "DEL SimpleName: exprs", "DEL Javadoc", "DEL TextElement:  is not silent", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: theScript", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: CompositeExpression", "DEL SimpleName: expr", "DEL SimpleName: String", "DEL ArrayAccess", "DEL SimpleName: prefix", "DEL SimpleName: sequence", "DEL SimpleName: template", "DEL QualifiedName: ParseState.DEFERRED0", "DEL PrimitiveType: int", "DEL SimpleType: IllegalStateException", "DEL SimpleName: e", "DEL SimpleName: BufferedReader", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL Modifier: private", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL TextElement: Creates a new instance of UnifiedJEXL creating a local cache.", "DEL TextElement:  if an error occurs and the ", "DEL SimpleType: List", "DEL SimpleType: JexlContext", "DEL SimpleName: add", "DEL SimpleName: Set", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL ThisExpression", "DEL NumberLiteral: 2", "DEL ClassInstanceCreation", "DEL SimpleName: src", "DEL SimpleName: StringBuilder", "DEL Javadoc", "DEL SimpleName: parms", "DEL ReturnStatement", "DEL SimpleType: List", "DEL TextElement: <p>", "DEL SimpleName: interpreter", "DEL Javadoc", "DEL SimpleName: node", "DEL TextElement:  ", "DEL SimpleName: xany", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL IfStatement", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: prefix", "DEL StringLiteral: \"{\"", "DEL SimpleName: strb", "DEL TextElement: Clears the cache.", "DEL MethodInvocation", "DEL TextElement:  the index for this type in counters arrays.", "DEL EnhancedForStatement", "DEL SimpleName: DEFERRED0", "DEL SimpleType: JexlException", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleName: UnifiedJEXL", "DEL PrimitiveType: char", "DEL SimpleName: String", "DEL SimpleName: cexprs", "DEL ParameterizedType: Set<List<String>>", "DEL SimpleName: source", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleName: expression", "DEL TagElement: @link", "DEL SimpleName: getVariables", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: JexlNode", "DEL TagElement: @param", "DEL PrimitiveType: long", "DEL TextElement: <p>", "DEL SimpleName: getVariables", "DEL SimpleName: strb", "DEL TagElement: @return", "DEL SimpleName: CharSequence", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleType: Set", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: exprs", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: e", "DEL Modifier: public", "DEL TextElement: A template is expanded as one JEXL script and a list of UnifiedJEXL expressions; each UnifiedJEXL expression", "DEL SimpleName: Expression", "DEL SimpleName: source", "DEL SimpleType: Exception", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL SimpleType: ArrayList", "DEL TagElement: @inheritDoc", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: uexprs", "DEL Block", "DEL SimpleName: strb", "DEL TagElement: @throws", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: Template", "DEL TextElement:  (only for nested & composite)", "DEL TagElement: @param", "DEL SimpleName: expr", "DEL SimpleName: context", "DEL TextElement: A deferred expression: #{jexl}. ", "DEL SimpleType: Reader", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: getSource", "DEL InfixExpression: !=", "DEL SimpleName: writer", "DEL TextElement: Creates a JEXL interpretable expression.", "DEL VariableDeclarationFragment", "DEL ArrayType: Object[]", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlEngine", "DEL ExpressionStatement", "DEL SimpleName: ExpressionBuilder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: setFrame", "DEL SimpleName: el", "DEL Modifier: protected", "DEL SimpleName: set", "DEL TagElement: @return", "DEL SimpleName: prefixLen", "DEL SimpleName: builder", "DEL TagElement: @inheritDoc", "DEL SimpleName: c", "DEL SimpleName: TemplateBlock", "DEL Block", "DEL MethodInvocation", "DEL Modifier: final", "DEL TextElement:  the writer to use for output", "DEL SimpleName: inested", "DEL MethodInvocation", "DEL SimpleName: JexlException", "DEL SimpleName: append", "DEL ReturnStatement", "DEL SimpleType: Expression", "DEL MethodDeclaration", "DEL SimpleName: asString", "DEL SimpleType: Expression", "DEL SimpleType: ExpressionType", "DEL TagElement", "DEL TextElement:  ", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: ExpressionBuilder", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleName: evaluate", "DEL StringLiteral: \"jexl:print(\"", "DEL SimpleName: code", "DEL SimpleName: append", "DEL SimpleName: e", "DEL TextElement: <code>\"#{${bar}charAt(2)}\"</code>", "DEL SimpleName: ExpressionType", "DEL SimpleName: node", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '#'", "DEL SimpleName: IMMEDIATE1", "DEL SimpleType: Expression", "DEL IfStatement", "DEL SimpleName: strb", "DEL Modifier: final", "DEL SimpleName: cache", "DEL SimpleName: append", "DEL TextElement: The writer used to output. ", "DEL TextElement: The array of source blocks. ", "DEL SimpleName: value", "DEL SimpleName: source", "DEL TextElement: $$   } else if (x > 42) {", "DEL Modifier: private", "DEL MethodDeclaration", "DEL TextElement: Parsing after \\ .", "DEL SimpleName: node", "DEL SimpleName: parse", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL QualifiedName: BlockType.VERBATIM", "DEL SimpleName: JexlNode", "DEL IfStatement", "DEL SimpleName: context", "DEL SimpleName: strb", "DEL SimpleName: StringBuilder", "DEL Modifier: final", "DEL SimpleType: JexlEngine.Frame", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleType: ImmediateExpression", "DEL SimpleName: Override", "DEL SimpleType: TemplateBlock", "DEL SimpleName: node", "DEL SimpleName: context", "DEL TagElement: @since", "DEL SimpleName: StringBuilder", "DEL SimpleName: exprs", "DEL SimpleName: name", "DEL SimpleType: TemplateContext", "DEL SimpleName: Interpreter", "DEL SimpleName: expr", "DEL TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as warning.", "DEL PrefixExpression: !", "DEL EnhancedForStatement", "DEL TextElement:  ", "DEL InfixExpression: ==", "DEL SimpleName: frame", "DEL Block", "DEL SimpleName: interpreter", "DEL SimpleName: getType", "DEL FieldDeclaration", "DEL TagElement: @since", "DEL SingleVariableDeclaration", "DEL SimpleName: prefix", "DEL MarkerAnnotation", "DEL SimpleName: Expression", "DEL VariableDeclarationStatement", "DEL SimpleType: Writer", "DEL SimpleName: String", "DEL Modifier: protected", "DEL Assignment: =", "DEL TextElement: </p>", "DEL Modifier: private", "DEL QualifiedName: ParseState.CONST", "DEL SimpleName: TemplateBlock", "DEL SimpleName: source", "DEL SimpleName: List", "DEL TextElement:  the list of blocks", "DEL TextElement:  the prepared version of the template", "DEL TextElement: Intreprets a sub-expression.", "DEL SimpleName: String", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TextElement:  2.0", "DEL PostfixExpression: ++", "DEL SimpleName: strb", "DEL Assignment: =", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: c", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Block", "DEL TagElement: @inheritDoc", "DEL Modifier: protected", "DEL TagElement", "DEL SimpleName: line", "DEL SimpleName: context", "DEL Modifier: protected", "DEL SimpleName: asString", "DEL CastExpression", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: ExpressionBuilder", "DEL TextElement:  the formatted expression string", "DEL SimpleType: Expression", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: evaluate", "DEL SimpleName: idx", "DEL TagElement", "DEL ExpressionStatement", "DEL TextElement: the deferred subexpressions (& constants), a prepared expression. Such a prepared expression", "DEL InfixExpression: ==", "DEL SimpleName: expr", "DEL SimpleName: strb", "DEL SimpleType: CompositeExpression", "DEL MethodInvocation", "DEL TextElement:  the expression scope", "DEL Modifier: public", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement", "DEL InfixExpression: >", "DEL SimpleName: list", "DEL SimpleType: Interpreter", "DEL TagElement: @link", "DEL ArrayAccess", "DEL NumberLiteral: 0", "DEL TagElement: @since", "DEL QualifiedName: UnifiedJEXL.Exception", "DEL SimpleName: aJexl", "DEL SimpleName: IMM_CHAR", "DEL VariableDeclarationFragment", "DEL SimpleName: prepare", "DEL SimpleName: node", "DEL IfStatement", "DEL TextElement: Creates a deferred expression.", "DEL Modifier: private", "DEL SimpleName: context", "DEL QualifiedName: block.body", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleType: JexlEngine", "DEL SimpleType: TemplateContext", "DEL Javadoc", "DEL SimpleType: ArrayList", "DEL SimpleName: i", "DEL SimpleType: Template", "DEL ParameterizedType: List<String>", "DEL SimpleName: COMPOSITE", "DEL SimpleType: ExpressionType", "DEL SimpleType: String", "DEL Block", "DEL Block", "DEL TagElement: @throws", "DEL SimpleType: CharSequence", "DEL SimpleName: jcontext", "DEL SimpleName: append", "DEL TryStatement", "DEL Javadoc", "DEL InfixExpression: !=", "DEL WhileStatement", "DEL ThrowStatement", "DEL NumberLiteral: 0", "DEL InfixExpression: <", "DEL SimpleName: expression", "DEL TagElement", "DEL TextElement: Block is to be output \"as is\". ", "DEL SimpleType: StringBuilder", "DEL ExpressionStatement", "DEL SimpleName: strb", "DEL QualifiedName: UnifiedJEXL.Exception", "DEL SimpleName: strb", "DEL SimpleName: strb", "DEL TextElement:  ", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: getMessage", "DEL SimpleName: cache", "DEL TextElement: Other expressions return themselves.", "DEL SimpleName: strb", "DEL TagElement: @inheritDoc", "DEL TagElement: @inheritDoc", "DEL InfixExpression: !=", "DEL SimpleName: xany", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlBasedExpression", "DEL BooleanLiteral: true", "DEL SimpleName: blocks", "DEL ClassInstanceCreation", "DEL SimpleName: writer", "DEL Block", "DEL CastExpression", "DEL TextElement:  the UnifiedJEXL object expression, null if silent and an error occured", "DEL SimpleName: dexpr", "DEL SimpleName: IMMEDIATE0", "DEL TextElement: Adds this expression's string representation to a StringBuilder.", "DEL ClassInstanceCreation", "DEL TextElement: Generates this expression's string representation.", "DEL QualifiedName: UnifiedJEXL.Exception", "DEL SimpleType: ImmediateExpression", "DEL SimpleName: ImmediateExpression", "DEL Javadoc", "DEL FieldDeclaration", "DEL SimpleName: Override", "DEL ArrayAccess", "DEL TextElement: Parsing after ${ .", "DEL SimpleName: expressions", "DEL Block", "DEL SimpleName: String", "DEL Block", "DEL TextElement:  if an error occurs and the ", "DEL NumberLiteral: 2", "DEL SimpleName: Override", "DEL SimpleName: parms", "DEL EnumConstantDeclaration", "DEL SimpleName: args", "DEL Block", "DEL Modifier: private", "DEL TagElement", "DEL TextElement:  is", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Javadoc", "DEL SimpleName: JexlEngine", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: BufferedReader", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL IfStatement", "DEL SimpleName: length", "DEL StringLiteral: \"'\"", "DEL Javadoc", "DEL SimpleName: Expression", "DEL SimpleName: interpret", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: List", "DEL FieldDeclaration", "DEL TagElement: @inheritDoc", "DEL TextElement: Creates a new instance of UnifiedJEXL with a default size cache.", "DEL SimpleName: error", "DEL TextElement: The JEXL node for this expression. ", "DEL MethodInvocation", "DEL QualifiedName: ExpressionType.CONSTANT", "DEL SimpleName: s", "DEL SimpleName: toString", "DEL ArrayAccess", "DEL PrefixExpression: ++", "DEL TagElement: @param", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: size", "DEL TextElement:  the expression to add", "DEL ArrayType: Object[]", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: theScript", "DEL SimpleName: out", "DEL TagElement: @param", "DEL SimpleName: append", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: subSequence", "DEL SimpleName: getType", "DEL SimpleName: toString", "DEL SimpleName: c", "DEL SimpleName: asString", "DEL Javadoc", "DEL SimpleName: parms", "DEL FieldAccess", "DEL SimpleName: state", "DEL PrimitiveType: void", "DEL SimpleName: getVariables", "DEL SimpleName: Expression", "DEL TagElement", "DEL TextElement: Constant expression, count index 0. ", "DEL SimpleName: List", "DEL SimpleName: context", "DEL SuperConstructorInvocation", "DEL TagElement: @param", "DEL Modifier: private", "DEL Block", "DEL Javadoc", "DEL SimpleName: action", "DEL SimpleName: sequence", "DEL Block", "DEL ParameterizedType: List<TemplateBlock>", "DEL SimpleName: jexl", "DEL InfixExpression: !=", "DEL SimpleName: script", "DEL TagElement: @param", "DEL SimpleName: writer", "DEL ThisExpression", "DEL SimpleName: interpreter", "DEL SingleVariableDeclaration", "DEL SimpleName: IMMEDIATE1", "DEL ExpressionStatement", "DEL SimpleName: thePrefix", "DEL SimpleName: JexlContext", "DEL SimpleName: prefixLen", "DEL SingleVariableDeclaration", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL NullLiteral", "DEL TextElement: The sole type of (runtime) exception the UnifiedJEXL can throw.", "DEL SimpleName: exprs", "DEL TagElement: @param", "DEL SimpleName: getEngine", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement: A constant expression. ", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement:  the script", "DEL SimpleType: String", "DEL Block", "DEL TagElement: @inheritDoc", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL IfStatement", "DEL ThisExpression", "DEL Javadoc", "DEL TextElement:  the source", "DEL TextElement: Prints a composite expression.", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: TemplateBlock", "DEL Modifier: private", "DEL SimpleName: xuel", "DEL TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as warning.", "DEL TextElement: The first character for deferred expressions. ", "DEL TextElement:  an expression", "DEL SimpleName: Set", "DEL SimpleName: delete", "DEL TagElement: @return", "DEL SimpleName: refs", "DEL Block", "DEL SimpleName: e", "DEL SimpleName: c", "DEL TextElement: the definition/parsing point.</li>", "DEL SimpleName: theType", "DEL SimpleName: line", "DEL SimpleName: set", "DEL SimpleName: append", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: parms", "DEL Assignment: =", "DEL SimpleName: TemplateBlock", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement:  the type", "DEL ParameterizedType: Set<List<String>>", "DEL TagElement: @param", "DEL SimpleType: Expression", "DEL SimpleName: c", "DEL SimpleName: action", "DEL SimpleName: reader", "DEL SimpleName: script", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: JexlEngine", "DEL TagElement", "DEL SimpleName: TemplateBlock", "DEL TagElement", "DEL TextElement: During evaluation, the template context exposes its writer as '$jexl' which is safe to use in this case.", "DEL SimpleName: theNode", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL TextElement: <li>The \"deferred\" syntax is of the form <code>\"...#{jexl-expr}...\"</code></li>", "DEL Javadoc", "DEL TagElement: @param", "DEL Block", "DEL FieldAccess", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL Modifier: protected", "DEL SimpleName: strb", "DEL SimpleName: blocks", "DEL SimpleType: Interpreter", "DEL MethodInvocation", "DEL ParameterizedType: List<String>", "DEL FieldDeclaration", "DEL ForStatement", "DEL SimpleName: charAt", "DEL NullLiteral", "DEL Block", "DEL IfStatement", "DEL InfixExpression: ==", "DEL SimpleName: toString", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: nested", "DEL InfixExpression: ||", "DEL TextElement: phase.", "DEL SimpleType: Expression", "DEL Block", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL SimpleName: sequence", "DEL SimpleName: include", "DEL SimpleName: Expression", "DEL Javadoc", "DEL SimpleName: Template", "DEL MarkerAnnotation", "DEL SimpleName: node", "DEL SimpleName: xio", "DEL SimpleName: interpreter", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL TextElement: This allows writing directly through the writer without adding new-lines as in:", "DEL SimpleName: strb", "DEL Modifier: public", "DEL IfStatement", "DEL ArrayInitializer", "DEL MarkerAnnotation", "DEL Modifier: private", "DEL TagElement", "DEL IfStatement", "DEL MethodInvocation", "DEL QualifiedName: java.io.IOException", "DEL SimpleName: ready", "DEL TagElement", "DEL ConditionalExpression", "DEL SimpleName: xany", "DEL SimpleName: args", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: strb", "DEL MarkerAnnotation", "DEL Block", "DEL VariableDeclarationFragment", "DEL TagElement: @link", "DEL SimpleName: frame", "DEL ArrayType: int[]", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL SimpleName: i", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL SimpleName: strb", "DEL TextElement:  ", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: equals", "DEL TextElement: The UnifiedJEXL expressions called by the script. ", "DEL SimpleName: wrap", "DEL Block", "DEL SimpleName: line", "DEL SimpleName: Expression", "DEL TagElement: @inheritDoc", "DEL TextElement:  the parameter names", "DEL MethodInvocation", "DEL SimpleName: sum", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: wrap", "DEL MethodInvocation", "DEL Modifier: final", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: cexpr", "DEL MethodInvocation", "DEL TextElement: <p>", "DEL Assignment: =", "DEL SimpleName: body", "DEL SimpleName: stmt", "DEL FieldDeclaration", "DEL TextElement: <p>", "DEL ForStatement", "DEL SimpleType: Exception", "DEL Modifier: public", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL SimpleName: pattern", "DEL Block", "DEL Javadoc", "DEL Block", "DEL TextElement:  ", "DEL NumberLiteral: 1", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: aJexl", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL TagElement", "DEL SimpleName: Interpreter", "DEL SimpleName: blocks", "DEL SimpleType: BufferedReader", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: interpreter", "DEL Assignment: =", "DEL SimpleName: interpreter", "DEL SimpleType: Object", "DEL SimpleName: sequence", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL NumberLiteral: 1", "DEL SimpleName: xjexl", "DEL Javadoc", "DEL SimpleName: counts", "DEL ParenthesizedExpression", "DEL SimpleName: append", "DEL TextElement: Creates a composite expression.", "DEL ReturnStatement", "DEL SimpleName: reader", "DEL ExpressionStatement", "DEL TextElement: If the wrapped constant is a string, it is treated", "DEL TextElement: <li>The \"nested\" syntax is of the form <code>\"...#{...${jexl-expr0}...}...\"</code></li>", "DEL TagElement: @param", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL TextElement: <li>The \"composite\" syntax is of the form <code>\"...${jexl-expr0}... #{jexl-expr1}...\"</code></li>", "DEL SimpleName: jexl", "DEL TagElement: @param", "DEL SimpleName: doPrint", "DEL SuperConstructorInvocation", "DEL QualifiedName: ParseState.CONST", "DEL Javadoc", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: CONST", "DEL TextElement: It is thus possible to use looping or conditional construct \"around\" expressions generating output.", "DEL SimpleName: strb", "DEL SimpleName: strb", "DEL SimpleName: scope", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: context", "DEL ConditionalExpression", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: cache", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL TextElement: Formats this expression, adding its source string representation in", "DEL SimpleName: size", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL NullLiteral", "DEL SimpleName: eq", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string)", "DEL SimpleName: strb", "DEL MarkerAnnotation", "DEL Block", "DEL TagElement: @since", "DEL SimpleName: add", "DEL Modifier: final", "DEL ArrayType: Expression[]", "DEL EnumConstantDeclaration", "DEL TagElement: @param", "DEL ReturnStatement", "DEL ParameterizedType: ArrayList<Expression>", "DEL Modifier: static", "DEL ArrayType: Expression[]", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleType: CharSequence", "DEL SimpleName: BlockType", "DEL StringLiteral: \", immediate:\"", "DEL MethodInvocation", "DEL StringLiteral: \"invoke print\"", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL SimpleName: theBlock", "DEL MethodInvocation", "DEL SimpleName: e", "DEL TagElement", "DEL SimpleName: prepare", "DEL Javadoc", "DEL SimpleName: append", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL SimpleName: expression", "DEL SimpleName: TemplateBlock", "DEL MethodInvocation", "DEL StringLiteral: \", constant:\"", "DEL Modifier: public", "DEL SimpleType: Set", "DEL SimpleName: NESTED", "DEL SimpleName: theExpr", "DEL SimpleName: interpreter", "DEL TagElement: @inheritDoc", "DEL SimpleName: value", "DEL TextElement: <p>", "DEL Block", "DEL SimpleName: expr", "DEL SimpleName: strb", "DEL ParameterizedType: Set<List<String>>", "DEL SimpleName: JexlEngine", "DEL SimpleName: scope", "DEL TextElement: $$   if (x == 42) {", "DEL TagElement: @since", "DEL SimpleType: LinkedHashSet", "DEL TextElement:  ", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL SimpleName: DeferredExpression", "DEL MethodInvocation", "DEL QualifiedName: UnifiedJEXL.Expression", "DEL TextElement: <ul>", "DEL SimpleName: exprs", "DEL SimpleName: TemplateBlock", "DEL SimpleName: e", "DEL ExpressionStatement", "DEL CatchClause", "DEL NumberLiteral: 1", "DEL TextElement:  ", "DEL SimpleName: line", "DEL Dimension", "DEL SimpleName: xuel", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleType: ExpressionType", "DEL InfixExpression: <=", "DEL SimpleName: getVariables", "DEL TextElement: Creates a new block. ", "DEL SimpleType: Template", "DEL SimpleName: Expression", "DEL SimpleName: StringBuilder", "DEL SimpleType: JexlContext", "DEL SimpleType: StringBuilder", "DEL Assignment: =", "DEL ReturnStatement", "DEL EnumDeclaration", "DEL SimpleName: line", "DEL SingleVariableDeclaration", "DEL SimpleName: cache", "DEL Modifier: protected", "DEL MethodInvocation", "DEL Assignment: +=", "DEL TextElement:  an exception containing an explicit error message", "DEL VariableDeclarationFragment", "DEL SimpleType: TemplateBlock", "DEL ThrowStatement", "DEL SimpleName: strb", "DEL SimpleName: node", "DEL SimpleName: prefix", "DEL QualifiedName: BlockType.DIRECTIVE", "DEL IfStatement", "DEL TextElement: Immediate expression, count index 1. ", "DEL TextElement:  true if deferred, false otherwise", "DEL SimpleType: Interpreter", "DEL TypeDeclaration: class", "DEL FieldAccess", "DEL NumberLiteral: 0", "DEL SimpleName: createException", "DEL CatchClause", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: source", "DEL SimpleName: expr", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleName: String", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: method", "DEL ParameterizedType: Set<List<String>>", "DEL SimpleName: startsWith", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleName: prepare", "DEL TextElement:  the exception cause", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: TemplateContext", "DEL SimpleType: Expression", "DEL SimpleName: name", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: error", "DEL TextElement: Deferred & immediate expression carry different intentions:", "DEL SimpleName: TemplateBlock", "DEL ClassInstanceCreation", "DEL ThisExpression", "DEL SimpleName: Override", "DEL SimpleName: writer", "DEL TextElement: This integration uses a specialized JexlContext (TemplateContext) that serves as a namespace (for jexl:)", "DEL SimpleName: pattern", "DEL VariableDeclarationFragment", "DEL SimpleName: strb", "DEL SimpleType: List", "DEL MethodDeclaration", "DEL TextElement:  the UnifiedJEXL string expression", "DEL TextElement:  the directive prefix", "DEL SimpleType: Object", "DEL SimpleName: Template", "DEL QualifiedName: ExpressionType.NESTED", "DEL SimpleName: String", "DEL ThisExpression", "DEL Javadoc", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: sequence", "DEL SimpleName: prefix", "DEL MethodDeclaration", "DEL SimpleName: invoke", "DEL SimpleName: Expression", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL NullLiteral", "DEL Block", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleType: JexlContext", "DEL SimpleType: Expression", "DEL MethodInvocation", "DEL SimpleName: delete", "DEL TextElement: Parsing after #{ .", "DEL TextElement: The default cache size. ", "DEL TagElement: @param", "DEL Modifier: private", "DEL StringLiteral: \": is not a valid directive pattern\"", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL TextElement: <ul>", "DEL TagElement: @return", "DEL TextElement: the property storing it is accessed.", "DEL SingleVariableDeclaration", "DEL SimpleName: prefix", "DEL SimpleType: TemplateBlock", "DEL SingleVariableDeclaration", "DEL PrefixExpression: ++", "DEL VariableDeclarationStatement", "DEL SimpleName: TemplateContext", "DEL SimpleName: xuel", "DEL TextElement: Evaluates this expression.", "DEL TextElement: being replace in the script by a call to jexl:print(expr) (the expr is in fact the expr number in the template).", "DEL SimpleName: val", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: prefixLen", "DEL Javadoc", "DEL SimpleType: ASTJexlScript", "DEL TextElement: <p>", "DEL SimpleName: counts", "DEL SimpleName: line", "DEL TagElement: @param", "DEL SimpleName: evaluate", "DEL TextElement: Life, the universe, and everything", "DEL SimpleName: expr", "DEL SimpleName: el", "DEL SimpleName: IMM_CHAR", "DEL CharacterLiteral: '{'", "DEL ExpressionStatement", "DEL SimpleName: thePrefix", "DEL ParameterizedType: List<String>", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 3", "DEL SimpleType: String", "DEL SimpleName: source", "DEL Assignment: =", "DEL MarkerAnnotation", "DEL SimpleName: Interpreter", "DEL SimpleName: src", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: CharSequence", "DEL VariableDeclarationExpression", "DEL SimpleName: writer", "DEL NumberLiteral: 0", "DEL TagElement: @inheritDoc", "DEL SimpleName: state", "DEL VariableDeclarationStatement", "DEL SimpleType: TemplateContext", "DEL TextElement:  the string expression", "DEL TagElement", "DEL Block", "DEL InfixExpression: <", "DEL VariableDeclarationFragment", "DEL SimpleName: directive", "DEL SimpleName: CharSequence", "DEL Modifier: final", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: strb", "DEL QualifiedName: jexl.logger", "DEL TextElement:  the source expression if any", "DEL InfixExpression: ==", "DEL SimpleType: ParseState", "DEL Modifier: private", "DEL SimpleName: parms", "DEL SimpleName: List", "DEL TextElement:  2.1", "DEL QualifiedName: java.lang.Exception", "DEL SimpleName: source", "DEL TagElement", "DEL SimpleName: Interpreter", "DEL TextElement:  the template to evaluate", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL SimpleName: JexlNode", "DEL SimpleName: script", "DEL SimpleType: ExpressionType", "DEL Javadoc", "DEL Modifier: protected", "DEL SimpleName: frame", "DEL SimpleName: expr", "DEL NumberLiteral: 0", "DEL MarkerAnnotation", "DEL SimpleType: List", "DEL TextElement: The different parsing states. ", "DEL SimpleName: i", "DEL SimpleName: length", "DEL SimpleName: get", "DEL SimpleName: Expression", "DEL Javadoc", "DEL SimpleName: value", "DEL TextElement: Checks whether this expression is deferred.", "DEL SimpleName: ExpressionBuilder", "DEL VariableDeclarationFragment", "DEL TextElement:  2.1", "DEL SimpleName: Interpreter", "DEL SimpleName: strb", "DEL SimpleName: b", "DEL Modifier: private", "DEL TagElement: @link", "DEL TextElement:  the parameter names", "DEL SimpleType: Expression", "DEL VariableDeclarationStatement", "DEL TextElement: </p>", "DEL TagElement: @since", "DEL PrimitiveType: boolean", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL SimpleName: source", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: cacheSize", "DEL Block", "DEL CastExpression", "DEL SimpleName: ImmediateExpression", "DEL SimpleName: cause", "DEL VariableDeclarationStatement", "DEL SimpleName: builder", "DEL Modifier: final", "DEL SimpleName: body", "DEL TextElement: <p>", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: args", "DEL Block", "DEL IfStatement", "DEL Block", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: parseExpression", "DEL SimpleName: StringBuilder", "DEL Javadoc", "DEL InstanceofExpression", "DEL SimpleType: Template", "DEL TextElement:  the base context", "DEL ExpressionStatement", "DEL SimpleType: TemplateContext", "DEL SimpleName: TemplateContext", "DEL TextElement:  ", "DEL ParenthesizedExpression", "DEL SimpleName: Override", "DEL SimpleName: method", "DEL QualifiedName: BlockType.VERBATIM", "DEL SimpleType: JexlEngine", "DEL CharacterLiteral: '\\n'", "DEL SimpleType: Object", "DEL SimpleName: value", "DEL SimpleName: c", "DEL SimpleName: builder", "DEL SuperConstructorInvocation", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL ForStatement", "DEL QualifiedName: JexlEngine.Scope", "DEL TextElement: one should parse & prepare an expression before storing it and evaluate it each time", "DEL TagElement: @param", "DEL SimpleType: CharSequence", "DEL SimpleName: ImmediateExpression", "DEL ArrayType: Expression[]", "DEL SimpleType: JexlContext", "DEL SimpleName: strb", "DEL ExpressionStatement", "DEL TextElement: In effect, this binds the result of the immediate sub-expressions evaluation in the", "DEL SimpleName: source", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL TextElement: A helper class to build expressions.", "DEL SimpleName: strb", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SimpleName: ArrayList", "DEL SimpleName: warn", "DEL MethodInvocation", "DEL SimpleName: getMessage", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: StringReader", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL ReturnStatement", "DEL SimpleName: expr", "DEL EnumConstantDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL TextElement: A composite expression: \"... ${...} ... #{...} ...\". ", "DEL SimpleType: String", "DEL SimpleName: source", "DEL MethodInvocation", "DEL SimpleName: aJexl", "DEL TextElement: and all others as Unified JEXL expressions; those expressions will be invoked from the script during", "DEL SimpleName: TemplateBlock", "DEL SimpleName: size", "DEL SimpleName: append", "DEL MethodInvocation", "DEL TextElement: of its subexpressions is deferred. Furthermore, this (composite) expression intent is", "DEL SimpleName: eq", "DEL Javadoc", "DEL SimpleName: isSilent", "DEL Modifier: public", "DEL SimpleName: String", "DEL Block", "DEL TagElement", "DEL SimpleName: c", "DEL SimpleName: String", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL QualifiedName: exprs.length", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: Interpreter", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SimpleType: TemplateContext", "DEL SimpleName: delete", "DEL MethodInvocation", "DEL SimpleName: isImmediate", "DEL SimpleType: Expression", "DEL NullLiteral", "DEL FieldAccess", "DEL InfixExpression: ==", "DEL ThrowStatement", "DEL InfixExpression: >", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: arg", "DEL ReturnStatement", "DEL SimpleName: Expression", "DEL NumberLiteral: 0", "DEL SimpleName: append", "DEL Javadoc", "DEL SimpleName: expr", "DEL SimpleType: Exception", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: expr", "DEL Modifier: static", "DEL SimpleName: TemplateContext", "DEL TextElement: Includes a call to another template.", "DEL SimpleName: Override", "DEL TagElement: @inheritDoc", "DEL TagElement: @param", "DEL SimpleName: append", "DEL PrimitiveType: void", "DEL TextElement: Will evaluate as:", "DEL InfixExpression: <", "DEL TextElement:  parse, prepare, evaluate", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL NullLiteral", "DEL TextElement: The value 169 is over fourty-two", "DEL SimpleType: String", "DEL TextElement:  ", "DEL SimpleName: Interpreter", "DEL PrimitiveType: int", "DEL Assignment: -=", "DEL Block", "DEL SimpleName: msg", "DEL Javadoc", "DEL SimpleType: Expression", "DEL SimpleName: expr", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: out", "DEL Block", "DEL SimpleName: cause", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"#\"", "DEL SimpleName: Override", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL SimpleName: toString", "DEL FieldDeclaration", "DEL SimpleType: StringBuilder", "DEL SimpleName: codeStart", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL VariableDeclarationExpression", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL SimpleType: Expression", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL SimpleName: sequence", "DEL SimpleName: expressions", "DEL SimpleName: jexl", "DEL VariableDeclarationStatement", "DEL SimpleName: theExprs", "DEL SimpleType: TemplateBlock", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: JexlException", "DEL SimpleName: prefix", "DEL Assignment: =", "DEL StringLiteral: \"${\"", "DEL SimpleType: SoftCache", "DEL Block", "DEL ReturnStatement", "DEL ThisExpression", "DEL Modifier: abstract", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: strb", "DEL TextElement:  is not in silent mode", "DEL SimpleName: val", "DEL TextElement: <p>This method will visit all nodes of the sub-expressions and extract all variables whether they", "DEL SimpleName: JexlContext", "DEL SimpleName: state", "DEL SimpleType: JexlEngine.Frame", "DEL TextElement:  the template", "DEL Block", "DEL TextElement: For instance:", "DEL ReturnStatement", "DEL SimpleName: expr", "DEL SimpleName: TemplateBlock", "DEL SimpleType: Object", "DEL SimpleName: strb", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: Exception", "DEL SimpleName: DEF_CHAR", "DEL TryStatement", "DEL InfixExpression: ==", "DEL SimpleName: s", "DEL SimpleName: source", "DEL TextElement: Prepares this template by expanding any contained deferred expression.", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: get", "DEL NumberLiteral: 0", "DEL StringLiteral: \"null prefix\"", "DEL ExpressionStatement", "DEL TextElement: It is intended to be used in configuration modules, XML based frameworks or JSP taglibs", "DEL SimpleName: getMessage", "DEL MarkerAnnotation", "DEL SimpleName: nested", "DEL TextElement: is used for the 2 evaluation phases.", "DEL SimpleType: JexlEngine.Frame", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL ForStatement", "DEL SimpleName: JexlMethod", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL InfixExpression: >=", "DEL TextElement:  2.1", "DEL Dimension", "DEL InfixExpression: >", "DEL SimpleName: exprs", "DEL SimpleName: Override", "DEL SimpleName: b", "DEL IfStatement", "DEL SimpleName: parms", "DEL Block", "DEL SimpleType: Expression", "DEL SimpleName: directive", "DEL Dimension", "DEL ExpressionStatement", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: prepare", "DEL CharacterLiteral: '\\n'", "DEL TagElement: @param", "DEL SimpleType: String", "DEL SimpleName: builder", "DEL SimpleName: state", "DEL MemberRef", "DEL MethodInvocation", "DEL SimpleName: CompositeExpression", "DEL TextElement:  ", "DEL ArrayCreation", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement:  the argument to print out", "DEL SimpleName: tcontext", "DEL SimpleName: scope", "DEL ReturnStatement", "DEL Block", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: script", "DEL SimpleName: getEngine", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: length", "DEL SimpleName: builder", "DEL VariableDeclarationFragment", "DEL Modifier: abstract", "DEL SimpleName: expr", "DEL SimpleName: source", "DEL MethodInvocation", "DEL TextElement:  the composite expression", "DEL SimpleType: JexlNode", "DEL VariableDeclarationFragment", "DEL QualifiedName: Integer.MAX_VALUE", "DEL ForStatement", "DEL SimpleName: e", "DEL SimpleName: strb", "DEL SimpleName: String", "DEL Block", "DEL TypeDeclaration: class", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL Assignment: =", "DEL Assignment: =", "DEL Block", "DEL TextElement: The ", "DEL SimpleName: getType", "DEL FieldDeclaration", "DEL SimpleName: cexpr", "DEL TextElement: The most common mistake leading to an invalid expression being the following:", "DEL MethodDeclaration", "DEL SimpleName: source", "DEL SimpleName: theSource", "DEL Javadoc", "DEL Assignment: =", "DEL SimpleName: getEngine", "DEL SingleVariableDeclaration", "DEL Block", "DEL EnumDeclaration", "DEL ArrayType: int[]", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL Modifier: final", "DEL SimpleName: jexl", "DEL SimpleType: TemplateBlock", "DEL SimpleType: TemplateContext", "DEL ReturnStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: evaluate", "DEL TextElement: The source text is parsed considering each line beginning with '$$' (as default pattern) as JEXL script code", "DEL SimpleName: context", "DEL Assignment: =", "DEL SimpleName: createFrame", "DEL TextElement: Uses & fills up the expression cache if any.", "DEL ClassInstanceCreation", "DEL ArrayType: Expression[]", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL TextElement:  the content", "DEL SimpleName: isLenient", "DEL VariableDeclarationFragment", "DEL SimpleType: Expression", "DEL SimpleName: startsWith", "DEL NullLiteral", "DEL SimpleName: value", "DEL Javadoc", "DEL ThrowStatement", "DEL SimpleName: TemplateContext", "DEL Javadoc", "DEL SimpleName: directive", "DEL SimpleName: IMM_CHAR", "DEL TextElement:  the context to prepare against", "DEL SimpleName: state", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL Block", "DEL SimpleType: Expression", "DEL SimpleType: Interpreter", "DEL Block", "DEL TagElement", "DEL TextElement: Gets this context calling frame.", "DEL SimpleName: Set", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: length", "DEL ClassInstanceCreation", "DEL SimpleName: strb", "DEL SingleVariableDeclaration", "DEL ContinueStatement", "DEL PrimitiveType: void", "DEL SimpleName: TemplateBlock", "DEL IfStatement", "DEL SimpleName: b", "DEL ExpressionStatement", "DEL SimpleName: size", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: prefix", "DEL VariableDeclarationStatement", "DEL CharacterLiteral: '{'", "DEL TagElement", "DEL SimpleName: cause", "DEL SimpleName: jexl", "DEL SimpleName: Override", "DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: expr", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: StringBuilder", "DEL SimpleType: Expression", "DEL SimpleName: context", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: strb", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL SimpleName: NullPointerException", "DEL Assignment: +=", "DEL FieldDeclaration", "DEL SimpleName: has", "DEL SimpleName: strb", "DEL BreakStatement", "DEL Dimension", "DEL ConditionalExpression", "DEL SimpleName: type", "DEL TextElement:  the source", "DEL SimpleName: interpreter", "DEL MethodDeclaration", "DEL SimpleName: source", "DEL SimpleName: writer", "DEL SimpleType: ImmediateExpression", "DEL TextElement: Adds an expression to the list of expressions, maintain per-type counts.", "DEL TagElement", "DEL SimpleName: src", "DEL SimpleName: line", "DEL SimpleName: subSequence", "DEL TextElement:  its type", "DEL SimpleName: thePrefix", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: writer", "DEL SimpleName: b", "DEL TextElement:  the first position after end of pattern if it matches, -1 otherwise", "DEL VariableDeclarationStatement", "DEL SimpleName: Expression", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: ArrayList", "DEL TagElement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: Interpreter", "DEL SimpleType: Expression", "DEL Block", "DEL SimpleName: expr", "DEL SimpleName: JexlBasedExpression", "DEL SimpleName: String", "DEL SimpleName: prepare", "DEL SimpleName: NamespaceResolver", "DEL SimpleName: append", "DEL SimpleName: line", "DEL SimpleName: IMM_CHAR", "DEL Modifier: private", "DEL ExpressionStatement", "DEL QualifiedName: UnifiedJEXL.Exception", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: append", "DEL TagElement: @param", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: pattern", "DEL SimpleName: TemplateBlock", "DEL QualifiedName: JexlEngine.Frame", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL TextElement:  the exception", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL SimpleName: c", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL ParameterizedType: List<String>", "DEL SimpleName: xjexl", "DEL SimpleType: ASTJexlScript", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SimpleType: Interpreter", "DEL MethodInvocation", "DEL SimpleName: theType", "DEL TextElement:  the source expression if any", "DEL SimpleName: value", "DEL SimpleName: Expression", "DEL SimpleName: List", "DEL TextElement:  the builder to fill", "DEL Javadoc", "DEL Modifier: public", "DEL SwitchCase", "DEL SimpleName: getFrame", "DEL ParameterizedType: SoftCache<String,Expression>", "DEL SimpleName: strb", "DEL StringLiteral: \"failed to parse '\"", "DEL MethodDeclaration", "DEL SimpleName: isLenient", "DEL SimpleType: UnifiedJEXL", "DEL SimpleName: builder", "DEL Javadoc", "DEL PrimitiveType: void", "DEL NumberLiteral: 8201402995815975726L", "DEL SimpleName: add", "DEL SimpleName: xuel", "DEL SimpleName: readLine", "DEL SimpleName: xuel", "DEL SimpleName: inner", "DEL ParameterizedType: List<String>", "DEL SimpleName: reader", "DEL SimpleName: prepared", "DEL ThrowStatement", "DEL ExpressionStatement", "DEL Modifier: private", "DEL StringLiteral: \", deferred:\"", "DEL SimpleName: getFrame", "DEL SimpleType: Expression", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: toString", "DEL TextElement: Creates an immediate expression.", "DEL NullLiteral", "DEL BreakStatement", "DEL Modifier: static", "DEL TextElement: An immediate expression nested into a deferred expression.", "DEL SimpleType: StringBuilder", "DEL SimpleName: interpreter", "DEL IfStatement", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: val", "DEL SimpleName: length", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: DEFERRED0", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL TextElement: The value ${x} is under fourty-two", "DEL MethodDeclaration", "DEL CharacterLiteral: '}'", "DEL TagElement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: c", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL TextElement:  the template", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: isSilent", "DEL SimpleName: e", "DEL ParameterizedType: List<String>", "DEL SimpleType: Expression", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL Block", "DEL NullLiteral", "DEL SimpleName: strb", "DEL SimpleName: serialVersionUID", "DEL SimpleName: asString", "DEL SimpleName: e", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: IllegalArgumentException", "DEL CastExpression", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL ArrayType: Expression[]", "DEL TagElement", "DEL ThrowStatement", "DEL SimpleName: Expression", "DEL SimpleName: expr", "DEL TextElement: Parses a unified expression.", "DEL SimpleName: stmt", "DEL SimpleName: expr", "DEL SimpleType: JexlException", "DEL IfStatement", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleType: StringReader", "DEL SimpleName: source", "DEL SimpleName: StringBuilder", "DEL CharacterLiteral: '\\''", "DEL SimpleName: type", "DEL SimpleType: StringBuilder", "DEL ThisExpression", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL TextElement:  are thrown when the engine instance is in \"non-silent\" mode", "DEL TextElement: as a JEXL strings with respect to escaping.", "DEL TagElement: @param", "DEL SimpleType: StringBuilder", "DEL NullLiteral", "DEL ArrayCreation", "DEL SimpleName: theSource", "DEL TextElement: The source of this expression (see ", "DEL StringLiteral: \"parsing algorithm error, exprs: \"", "DEL SimpleType: Uberspect", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL SimpleName: length", "DEL SingleVariableDeclaration", "DEL SimpleName: refs", "DEL TextElement: An immediate expression: ${jexl}. ", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: print", "DEL SimpleType: Interpreter", "DEL SimpleName: parse", "DEL TagElement", "DEL SimpleType: Set", "DEL IfStatement", "DEL SimpleName: source", "DEL SimpleName: Object", "DEL SimpleName: directive", "DEL Block", "DEL SimpleName: list", "DEL SimpleName: strb", "DEL TextElement:  the source expression", "DEL SimpleType: StringBuilder", "DEL SimpleName: Override", "DEL SimpleName: template", "DEL ClassInstanceCreation", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: CACHE_SIZE", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL SimpleName: writer", "DEL Assignment: =", "DEL EnumConstantDeclaration", "DEL Javadoc", "DEL SimpleName: source", "DEL InfixExpression: ==", "DEL StringLiteral: \"prepare\"", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: JexlContext", "DEL TagElement", "DEL SimpleName: size", "DEL SimpleName: subSequence", "DEL SimpleName: length", "DEL SimpleName: scope", "DEL Modifier: private", "DEL SimpleType: Object", "DEL Block", "DEL TagElement", "DEL SimpleName: e", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: theSource", "DEL SimpleName: String", "DEL SimpleName: stmt", "DEL Javadoc", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL PrefixExpression: ++", "DEL Modifier: public", "DEL TextElement: Fills up the list of variables accessed by this expression.", "DEL NullLiteral", "DEL SimpleName: StringBuilder", "DEL SimpleType: String", "DEL Block", "DEL ReturnStatement", "DEL TagElement: @throws", "DEL SimpleName: exprs", "DEL Block", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL SimpleType: Expression", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: parseExpression", "DEL SimpleName: IMM_CHAR", "DEL InfixExpression: ==", "DEL SimpleType: CharSequence", "DEL SimpleName: Expression", "DEL SimpleType: JexlEngine.SoftCache", "DEL SimpleName: Expression", "DEL ExpressionStatement", "DEL SimpleType: TemplateBlock", "DEL SimpleName: Expression", "DEL SimpleName: theType", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: strb", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: prefixLen", "DEL SimpleName: prefixLen", "DEL TagElement", "DEL TextElement:  the expression as an AST", "DEL SimpleName: writer", "DEL SimpleName: template", "DEL SimpleType: BlockType", "DEL SimpleName: Interpreter", "DEL SimpleName: NamespaceResolver", "DEL Block", "DEL Javadoc", "DEL SimpleName: uber", "DEL NumberLiteral: 1", "DEL SwitchCase", "DEL SimpleName: cexpr", "DEL TextElement: The value 5 is under fourty-two", "DEL Modifier: final", "DEL InstanceofExpression", "DEL TagElement: @inheritDoc", "DEL BooleanLiteral: false", "DEL SimpleName: JexlException", "DEL SimpleType: Expression", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: toString", "DEL SimpleName: s", "DEL ArrayType: int[]", "DEL TagElement: @param", "DEL ArrayCreation", "DEL SimpleName: b", "DEL TextElement:  the expression as an AST", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: parse", "DEL SimpleType: Expression", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL SimpleName: msg", "DEL InfixExpression: ==", "DEL SimpleName: type", "DEL MethodInvocation", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: interpreter", "DEL TextElement: Creates an ExpressionType.", "DEL SimpleType: StringBuilder", "DEL SimpleName: strb", "DEL TextElement: The list of expressions. ", "DEL Javadoc", "DEL SimpleName: line", "DEL SimpleType: String", "DEL SimpleName: expr", "DEL TextElement: </p>", "DEL Block", "DEL TagElement: @return", "DEL SimpleType: Expression", "DEL SimpleName: strb", "DEL TextElement: Reads lines of a template grouping them by typed blocks.", "DEL SimpleName: cexpr", "DEL SimpleName: frame", "DEL ReturnStatement", "DEL SimpleName: strb", "DEL SimpleName: toString", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: Object", "DEL SimpleName: source", "DEL SimpleName: getVariables", "DEL SimpleType: Object", "DEL SimpleType: JexlMethod", "DEL SimpleName: ASTJexlScript", "DEL ParameterizedType: List<TemplateBlock>", "DEL NumberLiteral: 0", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL TextElement:  from an expression string.", "DEL SimpleName: add", "DEL SimpleType: Expression", "DEL VariableDeclarationFragment", "DEL SimpleType: Reader", "DEL TextElement: The JEXL engine instance. ", "DEL IfStatement", "DEL SimpleName: TemplateContext", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: StringBuilder", "DEL SimpleName: JexlBasedExpression", "DEL SimpleName: Set", "DEL SimpleName: BufferedReader", "DEL SimpleName: append", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL VariableDeclarationFragment", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: JexlContext", "DEL SimpleName: script", "DEL SimpleName: evaluate", "DEL TagElement: @param", "DEL TagElement", "DEL TagElement", "DEL TextElement: and returns this expression deferred form.", "DEL TagElement: @param", "DEL TextElement:  is not silent", "DEL VariableDeclarationStatement", "DEL Block", "DEL TextElement:  2.1", "DEL Block", "DEL TagElement", "DEL NumberLiteral: 0", "DEL SimpleName: Override", "DEL SimpleName: Character", "DEL SimpleType: JexlBasedExpression", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: strb", "DEL SimpleType: String", "DEL SimpleName: expressions", "DEL MethodInvocation", "DEL SimpleType: Interpreter", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL TagElement", "DEL PrimitiveType: int", "DEL TagElement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Expression", "DEL SimpleName: CharSequence", "DEL TextElement:  the expression as a string", "DEL Javadoc", "DEL InfixExpression: ==", "DEL SimpleName: doPrint", "DEL SimpleName: wrap", "DEL SimpleName: String", "DEL Modifier: public", "DEL ThisExpression", "DEL MarkerAnnotation", "DEL NullLiteral", "DEL SimpleName: scope", "DEL StringLiteral: \"print\"", "DEL MethodInvocation", "DEL TextElement: evaluates the immediate sub-expressions with the context passed as parameter", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL SimpleName: type", "DEL TagElement: @inheritDoc", "DEL SimpleName: TemplateBlock", "DEL TagElement", "DEL ParameterizedType: List<Expression>", "DEL SimpleType: TemplateBlock", "DEL SimpleName: JexlNode", "DEL ReturnStatement", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL ArrayType: Expression[]", "DEL InfixExpression: >", "DEL ReturnStatement", "DEL SimpleName: expression", "DEL TextElement: <p>This will dynamically try to find the best suitable method in the writer through uberspection.", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: BufferedReader", "DEL TextElement:  ", "DEL SimpleName: TemplateBlock", "DEL ParenthesizedExpression", "DEL SuperConstructorInvocation", "DEL Dimension", "DEL InfixExpression: ==", "DEL SimpleName: strb", "DEL VariableDeclarationFragment", "DEL SimpleType: Template", "DEL SimpleName: blocks", "DEL Modifier: public", "DEL SimpleName: expressions", "DEL TagElement: @inheritDoc", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleType: Set", "DEL TextElement:  the JexlEngine to use.", "DEL SimpleName: theNode", "DEL SimpleName: expr", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: expr", "DEL SimpleName: length", "DEL IfStatement", "DEL SimpleName: line", "DEL TagElement", "DEL NumberLiteral: 256", "DEL MethodInvocation", "DEL SimpleName: frame", "DEL TextElement:  if either the directive prefix or input is null", "DEL SimpleName: eq", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleName: StringBuilder", "DEL QualifiedName: JexlEngine.Frame", "DEL TextElement: <code>\"#{${bar}+'.charAt(2)'}\"</code>", "DEL SimpleName: s", "DEL SimpleName: TemplateBlock", "DEL SimpleName: Template", "DEL ExpressionStatement", "DEL TextElement:  ", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: evaluate", "DEL SimpleName: blocks", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL VariableDeclarationStatement", "DEL SimpleType: StringBuilder", "DEL Modifier: public", "DEL Block", "DEL ReturnStatement", "DEL TextElement: running in silent mode", "DEL PrimitiveType: void", "DEL SimpleName: Uberspect", "DEL SimpleName: getMessage", "DEL SimpleName: line", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: toString", "DEL SimpleName: JexlEngine", "DEL SimpleName: CONSTANT", "DEL CastExpression", "DEL SimpleType: JexlEngine.Scope", "DEL SingleVariableDeclaration", "DEL SimpleName: interpreter", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: ExpressionType", "DEL TextElement: Creates a new template.", "DEL TextElement: <p><blockquote><pre>", "DEL SimpleName: CompositeExpression", "DEL ExpressionStatement", "DEL TextElement: Parsing after # .", "DEL Block", "DEL SimpleName: clearCache", "DEL SimpleName: exprs", "DEL MethodDeclaration", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleName: block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL TextElement:  the pattern to match at start of sequence", "DEL IfStatement", "DEL TextElement: The wrapped context. ", "DEL SimpleName: toString", "DEL SimpleName: append", "DEL SimpleName: source", "DEL Block", "DEL TextElement: but since these are RuntimeException, user-code <em>should</em> catch them where appropriate.", "DEL PrimitiveType: void", "DEL PrimitiveType: boolean", "DEL SimpleType: CharSequence", "DEL SimpleName: strb", "DEL Modifier: private", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: JexlNode", "DEL SimpleName: xjexl", "DEL Block", "DEL TextElement: <p>Also note that methods that parse evaluate expressions may throw <em>unchecked</em> exceptions;", "DEL ParameterizedType: List<String>", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: counts", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL EnhancedForStatement", "DEL NullLiteral", "DEL SimpleName: parse", "DEL TextElement: Life, the universe, and everything", "DEL TextElement: <p>Evaluates a template using this template initial context and writer.</p>", "DEL SimpleName: StringParser", "DEL CharacterLiteral: '}'", "DEL MethodInvocation", "DEL SimpleName: interpret", "DEL TextElement:  if an error occurs and the ", "DEL InfixExpression: <=", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleType: ConstantExpression", "DEL SimpleName: Object", "DEL TextElement:  the builder argument", "DEL SimpleName: StringBuilder", "DEL TextElement: <li>An immediate expression indicate that evaluation is intended to be performed close to", "DEL SimpleName: ExpressionType", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: exprs", "DEL TagElement: @param", "DEL InfixExpression: <", "DEL SimpleName: Object", "DEL Modifier: static", "DEL ArrayCreation", "DEL SimpleName: directive", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: StringBuilder", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL SimpleName: String", "DEL Block", "DEL TagElement: @return", "DEL Block", "DEL SimpleName: expr", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: b", "DEL InfixExpression: !=", "DEL StringLiteral: \"$\"", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: refs", "DEL SimpleType: BlockType", "DEL TextElement: The API reflects this feature in 2 methods, prepare and evaluate. The prepare method", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL Block", "DEL ConditionalExpression", "DEL NumberLiteral: 0", "DEL ThrowStatement", "DEL Modifier: final", "DEL Block", "DEL TextElement:  the JexlEngine", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: b", "DEL SimpleName: CompositeExpression", "DEL TagElement: @param", "DEL SimpleName: refs", "DEL SimpleName: strb", "DEL SimpleType: String", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleName: iexpr", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL TextElement:  the expression as a string", "DEL SimpleName: stmt", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: append", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \", \"", "DEL SimpleName: meta", "DEL TagElement", "DEL SimpleName: CONST", "DEL SimpleName: parms", "DEL SimpleName: source", "DEL TagElement: @return", "DEL SimpleType: TemplateBlock", "DEL StringLiteral: \"$jexl\"", "DEL ArrayAccess", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL SimpleName: strb", "DEL SimpleName: wrap", "DEL Assignment: =", "DEL Block", "DEL Assignment: =", "DEL TextElement: delegates the output generation to.", "DEL Block", "DEL NullLiteral", "DEL TextElement: Prepares a sub-expression for interpretation.", "DEL VariableDeclarationFragment", "DEL ArrayType: Expression[]", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: jexl", "DEL SimpleName: prepared", "DEL FieldDeclaration", "DEL SimpleName: append", "DEL SimpleName: Interpreter", "DEL Modifier: protected", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: Set", "DEL Modifier: private", "DEL TextElement:  the source reader", "DEL SimpleName: evaluate", "DEL MethodDeclaration", "DEL SimpleName: List", "DEL SimpleType: StringBuilder", "DEL SimpleType: Throwable", "DEL SimpleName: size", "DEL QualifiedName: exprs.length", "DEL TextElement: Abstract the source fragments, verbatim or immediate typed text blocks.", "DEL SimpleType: TemplateBlock", "DEL TextElement: </p>", "DEL TextElement:  the initial expression array size", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: prefix", "DEL SimpleName: Expression", "DEL SimpleName: interpreter", "DEL SimpleName: subSequence", "DEL SimpleType: ArrayList", "DEL TextElement: since this would preclude being able to differentiate directives and UnifiedJEXL expressions", "DEL QualifiedName: ParseState.DEFERRED1", "DEL SuperConstructorInvocation", "DEL VariableDeclarationExpression", "DEL InfixExpression: !=", "DEL SimpleType: TemplateBlock", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL TagElement", "DEL TagElement", "DEL MethodDeclaration", "DEL IfStatement", "DEL Modifier: private", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: CompositeExpression", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: ExpressionBuilder", "DEL Block", "DEL VariableDeclarationStatement", "DEL QualifiedName: ParseState.IMMEDIATE0", "DEL SimpleName: UnifiedJEXL", "DEL StringLiteral: \"jexl\"", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: size", "DEL SimpleName: strb", "DEL TagElement: @param", "DEL FieldAccess", "DEL SimpleName: Writer", "DEL SimpleName: readTemplate", "DEL TextElement: This only has an effect to nested & composite expressions that contain differed & immediate sub-expressions.", "DEL Modifier: protected", "DEL SimpleName: i", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SimpleName: equals", "DEL Dimension", "DEL Block", "DEL SimpleName: toString", "DEL ConditionalExpression", "DEL SimpleName: Exception", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL Block", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Set<List<String>>", "DEL SimpleName: strb", "DEL ConditionalExpression", "DEL TextElement: </p>", "DEL SimpleName: source", "DEL ParameterizedType: List<TemplateBlock>", "DEL SimpleType: Expression", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlContext", "DEL ExpressionStatement", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: getVariables", "DEL SimpleName: jexl", "DEL TextElement:  ", "DEL SimpleName: causeMsg", "DEL SimpleName: i", "DEL Modifier: public", "DEL SimpleName: VERBATIM", "DEL SimpleType: ExpressionBuilder", "DEL SimpleName: put", "DEL Javadoc", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleType: JexlBasedExpression", "DEL SimpleName: line", "DEL InfixExpression: >=", "DEL InfixExpression: ==", "DEL SimpleName: Override", "DEL SimpleName: strb", "DEL SimpleName: write", "DEL SimpleName: jframe", "DEL BooleanLiteral: false", "DEL Dimension", "DEL SimpleName: b", "DEL Block", "DEL SimpleName: counts", "DEL NumberLiteral: 1", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: wrap", "DEL MarkerAnnotation", "DEL SimpleName: setFrame", "DEL SimpleName: xuel", "DEL Block", "DEL Modifier: public", "DEL StringLiteral: \"failed to \"", "DEL SimpleName: inested", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL SimpleName: script", "DEL SimpleName: blocks", "DEL PrimitiveType: int", "DEL TextElement: <p>Space characters at beginning of line before the pattern are discarded.</p>", "DEL SimpleName: theExprs", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL TypeDeclaration: class", "DEL SimpleName: startsWith", "DEL SimpleName: toString", "DEL SimpleName: source", "DEL SimpleName: ImmediateExpression", "DEL SimpleName: exprs", "DEL Block", "DEL SimpleName: ns", "DEL Javadoc", "DEL TextElement:  the JexlEngine to use.", "DEL TextElement: Gets the JexlEngine underlying the UnifiedJEXL.", "DEL SimpleName: arg", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL InfixExpression: !=", "DEL SimpleName: equals", "DEL SimpleType: NamespaceResolver", "DEL VariableDeclarationFragment", "DEL SimpleType: NullPointerException", "DEL SingleVariableDeclaration", "DEL TextElement:  the expression as a string", "DEL SimpleType: Expression", "DEL SimpleName: xuel", "DEL SimpleName: DeferredExpression", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleName: JexlNode", "DEL EnumConstantDeclaration", "DEL ExpressionStatement", "DEL SimpleName: expr", "DEL ArrayType: String[]", "DEL TagElement", "DEL SimpleName: has", "DEL TagElement", "DEL SimpleName: value", "DEL SimpleName: source", "DEL SimpleName: append", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: code", "DEL IfStatement", "DEL QualifiedName: ParseState.IMMEDIATE1", "DEL TextElement:  the engine frame", "DEL TypeDeclaration: class", "DEL SimpleType: Exception", "DEL SimpleName: e", "DEL InfixExpression: +", "DEL SimpleName: asString", "DEL TextElement: </p>", "DEL SimpleName: StringBuilder", "DEL SimpleType: ArrayList", "DEL SimpleName: emptySet", "DEL SimpleName: node", "DEL NullLiteral", "DEL SimpleName: expressions", "DEL SimpleName: evaluate", "DEL TextElement: The call frame. ", "DEL CatchClause", "DEL SimpleName: error", "DEL SimpleName: ArrayList", "DEL SimpleName: Expression", "DEL SimpleName: Object", "DEL SimpleName: prefix", "DEL SimpleName: append", "DEL SimpleName: ExpressionType", "DEL SimpleName: CharSequence", "DEL TextElement: The value 1 is under fourty-two", "DEL Block", "DEL SimpleName: strb", "DEL QualifiedName: JexlEngine.Frame", "DEL ReturnStatement", "DEL SimpleName: UnifiedJEXL", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL SimpleName: state", "DEL TextElement:  the sub-expressions", "DEL ReturnStatement", "DEL SimpleName: expr", "DEL TagElement: @inheritDoc", "DEL Block", "DEL ArrayAccess", "DEL Javadoc", "DEL SimpleType: Writer", "DEL SimpleName: dnode", "DEL TextElement:  the sequence", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleType: Expression", "DEL Dimension", "DEL TextElement:  the arguments", "DEL Modifier: final", "DEL SimpleName: blocks", "DEL Modifier: private", "DEL SimpleName: size", "DEL TextElement: original expression that lead to it.", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL TagElement", "DEL CatchClause", "DEL TagElement", "DEL NumberLiteral: 0", "DEL SimpleName: get", "DEL SimpleName: strb", "DEL SimpleName: cause", "DEL Javadoc", "DEL ThrowStatement", "DEL SimpleName: expression", "DEL Block", "DEL SimpleName: block", "DEL SimpleName: b", "DEL Javadoc", "DEL Modifier: final", "DEL IfStatement", "DEL SimpleType: ConstantExpression", "DEL EnhancedForStatement", "DEL SimpleName: interpret", "DEL Javadoc", "DEL Block", "DEL SimpleName: strb", "DEL SimpleName: source", "DEL SimpleName: method", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: StringReader", "DEL QualifiedName: Integer.MAX_VALUE", "DEL SimpleName: List", "DEL SimpleName: wrap", "DEL QualifiedName: BlockType.DIRECTIVE", "DEL SimpleName: cexprs", "DEL TagElement: @return", "DEL SimpleName: warn", "DEL Block", "DEL SimpleName: Override", "DEL SimpleType: Interpreter", "DEL QualifiedName: JexlEngine.Frame", "DEL SimpleType: Expression", "DEL SimpleType: CompositeExpression", "DEL SimpleType: JexlNode", "DEL VariableDeclarationStatement", "DEL QualifiedName: JexlEngine.Scope", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: Override", "DEL TagElement: @param", "DEL SimpleType: Expression", "DEL ExpressionStatement", "DEL SimpleName: context", "DEL ArrayAccess", "DEL SimpleName: meta", "DEL VariableDeclarationFragment", "DEL PrefixExpression: ++", "DEL SimpleName: ExpressionBuilder", "DEL SimpleName: exprs", "DEL TagElement: @since", "DEL Block", "DEL Block", "DEL Block", "DEL TextElement: The JEXL string for this expression. ", "DEL TagElement: @inheritDoc", "DEL SimpleName: append", "DEL TagElement: @param", "DEL Block", "DEL MethodInvocation", "DEL TextElement: An expression can mix immediate, deferred and nested sub-expressions as well as string constants;", "DEL TextElement:  the source", "DEL EnumConstantDeclaration", "DEL SimpleName: buildString", "DEL VariableDeclarationFragment", "DEL SimpleName: type", "DEL SimpleType: String", "DEL NumberLiteral: 0", "DEL SimpleName: strb", "DEL ReturnStatement", "DEL Modifier: static", "DEL SwitchCase", "DEL SimpleName: printComposite", "DEL SimpleName: Object", "DEL TagElement", "DEL EnumConstantDeclaration", "DEL SimpleName: String", "DEL ReturnStatement", "DEL TextElement: </p>", "DEL Block", "DEL QualifiedName: ParseState.CONST", "DEL SimpleName: Expression", "DEL SimpleName: s", "DEL SimpleName: Expression", "DEL SimpleName: sequence", "DEL SimpleType: Expression", "DEL ExpressionStatement", "DEL SimpleName: prefix", "DEL TextElement:  ", "DEL SimpleName: toString", "DEL SimpleName: e", "DEL SimpleName: theSource", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL TagElement", "DEL SimpleType: Expression", "DEL TextElement: The enum capturing the difference between verbatim and code source fragments.", "DEL SimpleType: String", "DEL SimpleType: StringBuilder", "DEL NumberLiteral: 0", "DEL TextElement:  the context to use during evaluation", "DEL SimpleName: jexl", "DEL SimpleName: strb", "DEL StringLiteral: \"call print\"", "DEL SimpleName: Interpreter", "DEL SimpleName: error", "DEL Dimension", "DEL InfixExpression: ==", "DEL ParameterizedType: List<String>", "DEL Javadoc", "DEL TextElement: Builds an expression from a source, performs checks.", "DEL MethodInvocation", "DEL SimpleName: SoftCache", "DEL TextElement:  the output writer", "DEL TextElement: The resulting script. ", "DEL VariableDeclarationStatement", "DEL SimpleName: DEFERRED", "DEL SimpleName: source", "DEL TextElement: The array of UnifiedJEXL expressions. ", "DEL SimpleName: Expression", "DEL SimpleName: interpreter", "DEL EnumConstantDeclaration", "DEL SimpleName: state", "DEL FieldDeclaration", "DEL IfStatement", "DEL SimpleName: TemplateBlock", "DEL SimpleType: Template", "DEL ArrayType: Object[]", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: prefixLen", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement:  the prefix for lines of code; can not be \"$\", \"${\", \"#\" or \"#{\"", "DEL SimpleName: expr", "DEL Modifier: final", "DEL ParameterizedType: ArrayList<Expression>", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: expr", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL MethodInvocation", "DEL TextElement:  a prepared expression", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: size", "DEL SimpleType: IOException", "DEL SimpleName: isImmediate", "DEL Modifier: public", "DEL TextElement: Prints to output.", "DEL SimpleName: size", "DEL QualifiedName: cexprs.length", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL Javadoc", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleName: script", "DEL Assignment: =", "DEL NumberLiteral: 2", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL TextElement: to perform two evaluations; one close to its definition and another one in a later", "DEL Dimension", "DEL SimpleName: JexlContext", "DEL SimpleName: String", "DEL ReturnStatement", "DEL IfStatement", "DEL PrimitiveType: void", "DEL SimpleName: strb", "DEL CatchClause", "DEL SimpleType: Expression", "DEL SingleVariableDeclaration", "DEL QualifiedName: BlockType.DIRECTIVE", "DEL SimpleName: NestedExpression", "DEL SimpleName: Expression", "DEL TagElement: @param", "DEL SimpleName: arg", "DEL SimpleName: strb", "DEL TextElement: </pre></blockquote>", "DEL SimpleType: String", "DEL SimpleName: context", "DEL SimpleName: prefix", "DEL Block", "DEL SimpleName: uexprs", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: dexpr", "DEL VariableDeclarationFragment", "DEL SimpleName: List", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ForStatement", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL SimpleName: setFrame", "DEL SimpleName: ConstantExpression", "DEL SimpleName: source", "DEL SimpleType: Interpreter", "DEL MarkerAnnotation", "DEL PrimitiveType: int", "DEL SimpleName: causeMsg", "DEL Assignment: =", "DEL InstanceofExpression", "DEL Javadoc", "DEL SimpleName: TemplateContext", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleName: iexpr", "DEL TextElement: Gets this expression type.", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL Block", "DEL Javadoc", "DEL SimpleName: append", "DEL SimpleName: Override", "DEL SimpleName: exprs", "DEL MarkerAnnotation", "DEL InfixExpression: ==", "DEL ArrayAccess", "DEL SimpleName: getCause", "DEL SimpleName: ConstantExpression", "DEL EnumConstantDeclaration", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: printComposite", "DEL SimpleName: String", "DEL SimpleName: length", "DEL SimpleName: ConstantExpression", "DEL MarkerAnnotation", "DEL SimpleName: pattern", "DEL SimpleName: length", "DEL FieldDeclaration", "DEL SimpleName: xany", "DEL Block", "DEL TextElement: will evaluate the immediate subexpression and return an expression that contains only", "DEL SingleVariableDeclaration", "DEL SimpleName: sum", "DEL SimpleName: isDeferred", "DEL Assignment: +=", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL TextElement: The index in arrays of expression counters for composite expressions. ", "DEL SimpleName: c", "DEL Dimension", "DEL TypeDeclaration: class", "DEL Javadoc", "DEL Block", "DEL Block", "DEL SimpleName: add", "DEL TextElement: Evaluates the immediate sub-expressions.", "DEL SimpleType: String", "DEL SimpleName: args", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: IllegalStateException", "DEL SimpleName: source", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL QualifiedName: ParseState.ESCAPE", "DEL MethodInvocation", "DEL EnumConstantDeclaration", "DEL SimpleName: String", "DEL Dimension", "DEL SimpleName: e", "DEL SimpleName: cacheSize", "DEL InfixExpression: ==", "DEL TagElement: @throws", "DEL SimpleName: StringBuilder", "DEL ParameterizedType: ArrayList<Expression>", "DEL IfStatement", "DEL SimpleName: StringBuilder", "DEL SwitchCase", "DEL PrimitiveType: char", "DEL Block", "DEL SimpleName: strb", "DEL SimpleName: Expression", "DEL SimpleName: isSilent", "DEL SimpleName: get", "DEL SimpleName: c", "DEL Block", "DEL SimpleName: interpreter", "DEL ExpressionStatement", "DEL QualifiedName: ParseState.CONST", "DEL NullLiteral", "DEL IfStatement", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleType: ArrayList", "DEL NullLiteral", "DEL SimpleName: append", "DEL ArrayType: Expression[]", "DEL MethodInvocation", "DEL TextElement:  the set of variable being filled", "DEL ExpressionStatement", "DEL SimpleType: Expression", "DEL InstanceofExpression", "DEL SimpleName: BlockType", "DEL SimpleName: JexlEngine", "DEL SimpleName: ConstantExpression", "DEL QualifiedName: BlockType.VERBATIM", "DEL SimpleName: counts", "DEL SimpleName: xuel", "DEL SimpleName: value", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: strb", "DEL TextElement:  the arguments", "DEL SimpleType: Expression", "DEL SimpleName: strb", "DEL SimpleType: String", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: strb", "DEL SimpleName: jexl", "DEL SimpleType: String", "DEL SimpleName: counters", "DEL SimpleName: block", "DEL SimpleName: value", "DEL NumberLiteral: 2", "DEL TagElement: @link", "DEL SimpleName: theScript", "DEL SimpleName: size", "DEL InfixExpression: -", "DEL EnumConstantDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: jexl", "DEL SimpleName: Exception", "DEL Modifier: final", "DEL SimpleName: add", "DEL SimpleName: dnode", "DEL SimpleName: LinkedHashSet", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: getFrame", "DEL MethodInvocation", "DEL SimpleName: expressions", "DEL BooleanLiteral: false", "DEL SimpleName: strb", "DEL SimpleName: refs", "DEL ClassInstanceCreation", "DEL SimpleName: DEF_CHAR", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL MarkerAnnotation", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: expression", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: b", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL TextElement: <p>", "DEL SimpleName: startsWith", "DEL SimpleName: DEF_CHAR", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleType: Expression", "DEL SimpleName: isSilent", "DEL Block", "DEL SimpleName: arg", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL SimpleName: jframe", "DEL TextElement: <p>", "DEL SimpleName: strb", "DEL SimpleName: evaluate", "DEL TextElement: #{...${jexl}...}", "DEL FieldAccess", "DEL TagElement", "DEL Assignment: =", "DEL QualifiedName: block.type", "DEL SingleVariableDeclaration", "DEL InfixExpression: &", "DEL ClassInstanceCreation", "DEL QualifiedName: JexlEngine.Frame", "DEL SimpleName: length", "DEL TextElement:  the source expression if any", "DEL Javadoc", "DEL SimpleName: b", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL TextElement:  a JEXL interpreter", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: toString", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: frame", "DEL TextElement: or the empty set if no variables are used", "DEL MethodInvocation", "DEL Assignment: =", "DEL Modifier: protected", "DEL SimpleName: clear", "DEL FieldAccess", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: immediates", "DEL NullLiteral", "DEL SimpleType: Template", "DEL InfixExpression: |", "DEL Javadoc", "DEL TagElement", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: append", "DEL TextElement:  the expression as a string", "DEL TagElement: @param", "DEL SimpleName: directive", "DEL SimpleType: Object", "DEL TagElement", "DEL ArrayAccess", "DEL SimpleName: Template", "DEL SimpleName: xany", "DEL Block", "DEL SimpleType: Exception", "DEL ExpressionStatement", "DEL SimpleName: getVariables", "DEL SimpleName: getVariables", "DEL TextElement: Creates a new template from an input.", "DEL Block", "DEL MethodInvocation", "DEL TextElement:  ", "DEL SimpleName: inner", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL TextElement: Creates a nested expression.", "DEL MethodDeclaration", "DEL SimpleType: LinkedHashSet", "DEL MethodInvocation", "DEL BreakStatement", "DEL NumberLiteral: 0", "DEL SimpleName: type", "DEL SimpleName: expr", "DEL Modifier: abstract", "DEL SimpleName: Interpreter", "DEL SimpleName: expr", "DEL StringLiteral: \"unexpected expression type\"", "DEL SimpleName: context", "DEL ParameterizedType: LinkedHashSet<List<String>>", "DEL SimpleName: strb", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: UnifiedJEXL", "DEL SimpleName: aJexl", "DEL SimpleName: nuexpr", "DEL SimpleName: meta", "DEL SimpleName: strb", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SynchronizedStatement", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL Modifier: static", "DEL QualifiedName: block.type", "DEL MethodDeclaration", "DEL SimpleName: writer", "DEL SimpleName: source", "DEL PrimitiveType: int", "DEL Javadoc", "DEL SimpleName: interpreter", "DEL ReturnStatement", "DEL SimpleName: source", "DEL TextElement: </ul>", "DEL ExpressionStatement", "DEL SimpleName: List", "DEL SimpleName: ParseState", "DEL TagElement: @param", "DEL NullLiteral", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Set", "DEL Modifier: private", "DEL TagElement: @inheritDoc", "DEL SimpleName: jexl", "DEL SimpleType: IllegalArgumentException", "DEL MethodInvocation", "DEL SimpleName: strb", "DEL ExpressionStatement", "DEL SimpleName: theBlock", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement:  the context to use during evaluation", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: prepare", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL Modifier: public", "DEL ArrayInitializer", "DEL VariableDeclarationStatement", "DEL SimpleName: val", "DEL Block", "DEL SwitchCase", "DEL TagElement: @param", "DEL SimpleName: CharSequence", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL SimpleName: scope", "DEL SimpleName: refs", "DEL MethodInvocation", "DEL SimpleName: cache", "DEL TextElement: If this expression was prepared, this allows to retrieve the", "DEL SimpleType: String", "DEL SimpleName: getCause", "DEL SimpleName: prepare", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL SimpleType: TemplateBlock", "DEL Assignment: =", "DEL QualifiedName: java.lang.Exception", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: c", "DEL SimpleName: context", "DEL IfStatement", "DEL SimpleName: String", "DEL SimpleName: size", "DEL TextElement: </pre></blockquote>", "DEL SimpleType: List", "DEL SwitchCase", "DEL SimpleType: JexlContext", "DEL PrimitiveType: int", "DEL PrefixExpression: -", "DEL SimpleName: Exception", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: prefixLen", "DEL Javadoc", "DEL MarkerAnnotation", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL TagElement", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: toString", "DEL SimpleName: NestedExpression", "DEL SimpleName: node", "DEL TagElement: @throws", "DEL SimpleName: el", "DEL SimpleType: String", "DEL Modifier: final", "DEL StringLiteral: \"'\"", "DEL TryStatement", "DEL ExpressionStatement", "DEL SimpleName: List", "DEL TagElement: @return", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL SimpleName: CharSequence", "DEL SingleVariableDeclaration", "DEL SimpleName: isDeferred", "DEL Block", "DEL QualifiedName: exprs.length", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: BlockType", "DEL FieldDeclaration", "DEL SimpleName: context", "DEL SimpleName: Expression", "DEL Block", "DEL ReturnStatement", "DEL TextElement: In the most common use-case where deferred expressions are to be kept around as properties of objects,", "DEL Modifier: private", "DEL SimpleName: expr", "DEL SimpleName: CharSequence", "DEL SimpleName: blocks", "DEL SimpleName: TemplateBlock", "DEL Javadoc", "DEL SimpleName: Expression", "DEL MethodDeclaration", "DEL SimpleName: src", "DEL MethodInvocation", "DEL TextElement:  an expression or null if an error occurs and the ", "DEL InfixExpression: <", "DEL SimpleName: append", "DEL Block", "DEL Modifier: final", "DEL SimpleName: expressions", "DEL CharacterLiteral: '\"'", "DEL SimpleType: JexlEngine", "DEL SimpleName: prefixLen", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleName: uber", "DEL ExpressionStatement", "DEL Block", "DEL TextElement:  the expression as an AST", "DEL SimpleName: interpreter", "DEL SimpleName: append", "DEL IfStatement", "DEL SimpleName: xuel", "DEL Javadoc", "DEL SimpleName: Exception", "DEL TagElement: @link", "DEL ExpressionStatement", "DEL QualifiedName: ExpressionType.DEFERRED.index", "DEL Block", "DEL SimpleName: expr", "DEL Modifier: final", "DEL SimpleName: xio", "DEL SimpleName: RuntimeException", "DEL SimpleName: isSilent", "DEL SingleVariableDeclaration", "DEL SimpleName: append", "DEL SimpleName: list", "DEL VariableDeclarationStatement", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationFragment", "DEL SimpleName: strb", "DEL SimpleName: refs", "DEL SimpleType: Set", "DEL SimpleName: isImmediate", "DEL SimpleName: expr", "DEL SimpleType: StringBuilder", "DEL TextElement: The type of block, verbatim or directive. ", "DEL ArrayType: TemplateBlock[]", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL TextElement: Serial version UID. ", "DEL TagElement: @inheritDoc", "DEL SimpleName: prefix", "DEL SimpleName: source", "DEL SimpleName: build", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: resolveNamespace", "DEL TextElement: Recreate the template source from its inner components.", "DEL VariableDeclarationFragment", "DEL SimpleName: UnifiedJEXL", "DEL ClassInstanceCreation", "DEL NumberLiteral: 0", "DEL SimpleName: CACHE_SIZE", "DEL ReturnStatement", "DEL SimpleName: src", "DEL SimpleType: ExpressionType", "DEL Modifier: final", "DEL TextElement: The base for Jexl based expressions. ", "DEL SimpleName: source", "DEL SimpleName: JexlException", "DEL SimpleName: strb", "DEL SimpleName: Exception", "DEL SimpleName: jexl", "DEL SimpleName: isImmediate", "DEL QualifiedName: ParseState.CONST", "DEL Assignment: =", "DEL TextElement: Evaluates this template.", "DEL Dimension", "DEL ClassInstanceCreation", "DEL ParameterizedType: ArrayList<TemplateBlock>", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: Template", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL Modifier: protected", "DEL PrimitiveType: int", "DEL SimpleName: e", "DEL SimpleName: parms", "DEL TagElement", "DEL SimpleName: Expression", "DEL PrefixExpression: !", "DEL SimpleName: ExpressionBuilder", "DEL SimpleName: toArray", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: strb", "DEL SimpleName: toArray", "DEL Modifier: final", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: NullPointerException", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: refs", "DEL SimpleName: jexl", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL Block", "DEL TextElement: </p>", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL ThrowStatement", "DEL SimpleName: line", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: Expression", "DEL SimpleName: strb", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: DEF_CHAR", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SimpleName: getCause", "DEL SimpleName: length", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: Writer", "DEL SimpleName: source", "DEL Assignment: =", "DEL SimpleName: refs", "DEL ExpressionStatement", "DEL SimpleName: Throwable", "DEL InfixExpression: ==", "DEL SimpleName: interpreter", "DEL TagElement: @return", "DEL TextElement: For instance: <code>\"Hello ${name}, now is #{time}\"</code> is a composite \"deferred\" expression since one", "DEL IfStatement", "DEL TagElement", "DEL ArrayType: Expression[]", "DEL Assignment: =", "DEL SimpleName: JexlContext", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: When the expression is dependant upon immediate and deferred sub-expressions,", "DEL SimpleName: toString", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement: and stores the expression array and the writer (java.io.Writer) that the 'jexl:print(...)'", "DEL QualifiedName: ExpressionType.DEFERRED", "DEL SimpleName: Expression", "DEL TagElement: @param", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL SimpleName: arg", "DEL SingleVariableDeclaration", "DEL SimpleName: e", "DEL SimpleName: getCause", "DEL MethodDeclaration", "DEL SimpleName: doPrint", "DEL SimpleName: strb", "DEL SimpleName: strb", "DEL Block", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: interpreter", "DEL SimpleName: counters", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: error", "DEL QualifiedName: BlockType.DIRECTIVE", "DEL Assignment: =", "DEL SimpleName: context", "DEL TagElement", "DEL SimpleType: TemplateBlock", "DEL VariableDeclarationStatement", "DEL QualifiedName: ParseState.CONST", "DEL Javadoc", "DEL TextElement: Block is a directive, ie a fragment of code. ", "DEL SimpleName: String", "DEL ThrowStatement", "DEL SimpleName: causeMsg", "DEL SimpleName: StringBuilder", "DEL SimpleName: e", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: interpreter", "DEL SimpleName: toString", "DEL Modifier: final", "DEL SimpleName: subSequence", "DEL SimpleType: Reader", "DEL SimpleName: immediates", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: body", "DEL SimpleName: toArray", "DEL SimpleName: createException", "DEL ExpressionStatement", "DEL TextElement:  2.1", "DEL SimpleName: tcontext", "DEL SimpleName: prefix", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: codeStart", "DEL EnumConstantDeclaration", "DEL SimpleName: Expression", "DEL TextElement: <p><blockquote><pre>", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL SimpleName: append", "DEL SimpleName: TemplateContext", "DEL TagElement: @param", "DEL NumberLiteral: 0", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL SimpleName: expr", "DEL TextElement: Creates a UnifiedJEXL.Exception.", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: stmt", "DEL SimpleName: resolveNamespace", "DEL SimpleName: error", "DEL Assignment: =", "DEL SimpleName: JexlEngine", "DEL QualifiedName: BlockType.VERBATIM", "DEL Block", "DEL TextElement:  the source for this expresion if any", "DEL SimpleName: append", "DEL SimpleType: JexlEngine.Frame", "DEL SingleVariableDeclaration", "DEL SimpleName: ESCAPE", "DEL SimpleName: source", "DEL Modifier: abstract", "DEL TagElement: @param", "DEL PrimitiveType: int", "DEL SimpleName: blocks", "DEL SimpleName: toString", "DEL InstanceofExpression", "DEL SimpleName: equals", "DEL NullLiteral", "DEL SimpleName: nested", "DEL TagElement", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Interpreter", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: Object", "DEL TagElement: @link", "DEL SimpleType: StringBuilder", "DEL SimpleType: Expression", "DEL SimpleName: frame", "DEL SimpleName: ParseState", "DEL SimpleType: JexlNode", "DEL SimpleName: value", "DEL SimpleName: xuel", "DEL SimpleName: jexl", "DEL Javadoc", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL ArrayType: TemplateBlock[]", "DEL SimpleName: asString", "DEL SimpleType: ExpressionBuilder", "DEL SimpleName: e", "DEL ExpressionStatement", "DEL PostfixExpression: ++", "DEL SimpleName: Expression", "DEL SimpleName: asString", "DEL SimpleName: type", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: reader", "DEL TagElement: @param", "DEL SimpleName: i", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: interpreter", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL TextElement: <p>This context exposes its writer as '$jexl' to the scripts.</p>", "DEL SimpleType: Exception", "DEL SimpleName: jexl", "DEL SimpleName: createException", "DEL TextElement: <p>public for introspection purpose.</p>", "DEL SimpleName: Set", "DEL QualifiedName: BlockType.DIRECTIVE", "DEL Block", "DEL SimpleName: counters", "DEL SimpleName: context", "DEL TextElement: Retrieves this expression's source expression.", "DEL MethodInvocation", "DEL SimpleName: line", "DEL PrimitiveType: char", "DEL SimpleName: exprs", "DEL SimpleName: TemplateBlock", "DEL Modifier: protected", "DEL SimpleName: length", "DEL SimpleName: arg", "DEL SimpleType: String", "DEL SimpleName: strb", "DEL Assignment: =", "DEL QualifiedName: block.body", "DEL TagElement", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleType: Expression", "DEL TextElement: </p>", "DEL TextElement: $$ for(var x : [1, 3, 5, 42, 169]) {", "DEL SimpleName: strb", "DEL NumberLiteral: 1", "DEL NumberLiteral: 0", "DEL TextElement: $$   }", "DEL TextElement: Creates a new template.", "DEL Modifier: protected", "DEL VariableDeclarationStatement", "DEL TextElement: Creates a constant expression.", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: get", "DEL SimpleName: createTemplate", "DEL SimpleName: append", "DEL SimpleName: wrap", "DEL SimpleName: add", "DEL TextElement: Subclassing Writer by adding 'print' methods should be the preferred way to specialize output.", "DEL SimpleName: String", "DEL SimpleName: CharSequence", "DEL ExpressionStatement", "DEL Modifier: final", "DEL IfStatement", "DEL PrefixExpression: -", "DEL EnumConstantDeclaration", "DEL SimpleType: IllegalArgumentException", "DEL TextElement: Parsing a constant. ", "DEL Modifier: private", "DEL MethodInvocation", "DEL ParameterizedType: Set<List<String>>", "DEL SimpleType: String", "DEL TextElement: <p>", "DEL Modifier: public", "DEL SimpleName: inner", "DEL ArrayAccess", "DEL SimpleType: Object", "DEL SimpleName: val", "DEL SimpleName: strb", "DEL SimpleName: JexlBasedExpression", "DEL SimpleName: JexlBasedExpression", "DEL SimpleName: createTemplate", "DEL TagElement: @param", "DEL TextElement: Parsing after $ .", "DEL NullLiteral", "DEL TextElement:  the result of this expression evaluation or null if an error occurs and the ", "DEL SimpleName: Template", "DEL QualifiedName: UnifiedJEXL.Expression", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL TextElement: </pre></blockquote>", "DEL SimpleName: c", "DEL SimpleName: cause", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL TextElement: The value 3 is under fourty-two", "DEL SimpleName: List", "DEL Assignment: &=", "DEL MethodInvocation", "DEL TextElement:  ", "DEL CharacterLiteral: '\\n'", "DEL SimpleType: BufferedReader", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: state", "DEL TextElement: Types of expressions.", "DEL Modifier: protected", "DEL CharacterLiteral: '$'", "DEL SimpleName: source", "DEL SimpleType: CharSequence", "DEL TextElement:  ", "DEL TagElement", "DEL SimpleName: counters", "DEL SimpleName: name", "DEL NullLiteral", "DEL SimpleName: i", "DEL SimpleName: Template", "DEL Block", "DEL SimpleName: Expression", "DEL SimpleType: StringBuilder", "DEL TagElement: @throws", "DEL SimpleName: Override", "DEL ParameterizedType: List<String>", "DEL SimpleType: Interpreter", "DEL MethodInvocation", "DEL SimpleType: Interpreter", "DEL SimpleName: StringBuilder", "DEL SimpleName: writer", "DEL SimpleName: size", "DEL SimpleName: writer", "DEL TextElement:  ", "DEL MethodInvocation", "DEL SimpleType: Expression", "DEL SimpleName: expr", "DEL SimpleName: jexl", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: Interpreter", "DEL SimpleName: Exception", "DEL SimpleName: size", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @return", "DEL SimpleType: String", "DEL BooleanLiteral: false", "DEL TextElement: Per expression type counters. ", "DEL ExpressionStatement", "DEL SimpleName: DeferredExpression", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleType: CharSequence", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Javadoc", "DEL ThrowStatement", "DEL TagElement: @return", "DEL SimpleName: xuel", "DEL SimpleName: substring", "DEL ExpressionStatement", "DEL TextElement: The abstract base class for all expressions, immediate '${...}' and deferred '#{...}'.", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleName: DIRECTIVE", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL SimpleName: index", "DEL SimpleType: Expression", "DEL QualifiedName: JexlEngine.Scope", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL BooleanLiteral: false", "DEL TagElement: @param", "DEL SimpleName: strb", "DEL Modifier: private", "DEL MethodInvocation", "DEL TextElement: $$ }", "DEL SimpleName: LinkedHashSet", "DEL SimpleName: theExpr", "DEL TextElement: Note that it is valid to call evaluate without prepare in which case the same JexlContext", "DEL MethodInvocation", "DEL SimpleType: Interpreter", "DEL PrimitiveType: boolean", "DEL SimpleType: JexlContext", "DEL SimpleName: StringBuilder", "DEL SimpleType: Template", "DEL SimpleName: subSequence", "DEL Javadoc", "DEL SimpleType: Exception", "DEL TextElement: <li>The \"immediate\" syntax is of the form <code>\"...${jexl-expr}...\"</code></li>", "DEL SimpleName: StringBuilder", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: StringBuilder", "DEL ExpressionStatement", "DEL TextElement: </p>", "DEL ParameterizedType: List<String>", "DEL TagElement", "DEL Assignment: =", "DEL Assignment: =", "DEL Modifier: protected", "DEL SimpleName: isDebug", "DEL SimpleType: CompositeExpression", "DEL SimpleName: size", "DEL PrimitiveType: boolean", "DEL SimpleName: Expression", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: Template", "DEL SimpleName: Expression", "DEL TagElement", "DEL SimpleName: NullPointerException", "DEL SimpleName: DEF_CHAR", "DEL SimpleName: ExpressionType", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: append", "DEL SimpleName: Expression", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: source", "DEL SimpleName: warn", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL FieldAccess", "DEL Modifier: final", "DEL ReturnStatement", "DEL SimpleName: createException", "DEL SimpleName: getUberspect", "DEL SimpleType: Expression", "DEL SwitchCase", "DEL TypeDeclaration: class", "DEL Block", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: append", "DEL Javadoc", "DEL SimpleName: Reader", "DEL PrimitiveType: int", "DEL StringLiteral: \");\"", "DEL Modifier: abstract", "DEL SimpleName: counts", "DEL SimpleName: ESCAPE", "DEL SimpleName: e", "DEL QualifiedName: BlockType.VERBATIM", "DEL InfixExpression: ==", "DEL SimpleType: StringBuilder", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL SimpleName: strb", "DEL SimpleName: StringBuilder", "DEL SimpleName: strb", "DEL SimpleName: wrap", "DEL SimpleName: val", "DEL ExpressionStatement", "DEL ParameterizedType: Set<List<String>>", "DEL SimpleType: String", "DEL NullLiteral", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TextElement: The constant held by this expression. ", "DEL NullLiteral", "DEL SimpleName: strb", "DEL Modifier: static", "DEL SimpleType: JexlEngine.Scope", "DEL StringLiteral: \" */\"", "DEL TextElement: This is a simplified replacement for Velocity that uses JEXL (instead of OGNL/VTL) as the scripting", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: state", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: line", "DEL Javadoc", "DEL SimpleName: context", "DEL Assignment: =", "DEL SimpleName: TemplateContext", "DEL SimpleType: String", "DEL Modifier: final", "DEL SimpleName: StringBuilder", "DEL Assignment: =", "DEL SimpleName: size", "DEL SimpleName: IOException", "DEL NumberLiteral: 0", "DEL Block", "DEL ReturnStatement", "DEL QualifiedName: Integer.MAX_VALUE", "DEL TextElement:  the source expression if any", "DEL SimpleName: subSequence", "DEL TagElement", "DEL SimpleName: ns", "DEL Block", "DEL QualifiedName: Integer.MAX_VALUE", "DEL ExpressionStatement", "DEL TypeDeclaration: class", "DEL SimpleName: pattern", "DEL SimpleName: Override", "DEL SimpleName: context", "DEL ParameterizedType: LinkedHashSet<List<String>>", "DEL ArrayCreation", "DEL SimpleName: Expression", "DEL TextElement: </p>", "DEL SingleVariableDeclaration", "DEL SimpleName: createTemplate", "DEL SimpleName: jexl", "DEL SimpleName: getVariables", "DEL InfixExpression: !=", "DEL SimpleName: build", "DEL SimpleName: Expression", "DEL TextElement:  the result of interpretation", "DEL SimpleName: toString", "DEL TagElement", "DEL SimpleName: xio", "DEL SimpleName: source", "DEL MethodInvocation", "DEL TagElement", "DEL Block", "DEL SimpleName: evaluate", "DEL MethodInvocation", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL TextElement:  the source expression", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL QualifiedName: ExpressionType.IMMEDIATE.index", "DEL TagElement", "DEL SimpleType: List", "DEL TextElement: <p>", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: theExprs", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: line", "DEL TextElement: </p>", "DEL SimpleName: expr", "DEL TagElement: @param", "DEL SimpleType: java.lang.Exception", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: index", "DEL SynchronizedStatement", "DEL MethodInvocation", "DEL SimpleType: CharSequence", "DEL VariableDeclarationFragment", "DEL SimpleName: get", "DEL SimpleName: Override", "DEL SimpleType: String", "DEL SimpleName: prepare", "DEL Javadoc", "DEL SimpleType: StringBuilder", "DEL Javadoc", "DEL TagElement", "DEL WhileStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement: $$ for(var cell : cells) { $jexl.print(cell); $jexl.print(';') }", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: add", "DEL TextElement: Keeps count of sub-expressions by type.", "DEL SimpleName: UnifiedJEXL", "DEL TextElement:  the template source rewritten", "DEL SingleVariableDeclaration", "DEL SimpleName: NullPointerException", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: isImmediate", "DEL SimpleName: Override", "DEL TextElement: evaluation and their output gathered through a writer. ", "DEL NullLiteral", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleName: append", "DEL Assignment: =", "DEL SimpleName: Object", "DEL IfStatement", "DEL PrefixExpression: ++", "DEL SimpleName: strb", "DEL MethodDeclaration", "DEL ConstructorInvocation", "DEL Javadoc", "DEL SimpleName: toString", "DEL SimpleName: c", "DEL Javadoc", "DEL SimpleName: expr", "DEL SimpleType: JexlEngine", "DEL SimpleName: Writer", "DEL Block", "DEL SimpleName: scope", "DEL SimpleName: ExpressionType", "DEL InstanceofExpression", "DEL SimpleName: parms", "DEL SimpleName: scope", "DEL SimpleType: TemplateContext", "DEL SimpleName: scope", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL ExpressionStatement", "DEL TextElement:  ", "DEL SimpleType: Expression", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: source", "DEL Block", "DEL Block", "DEL TextElement: Whether a sequence starts with a given set of characters (following spaces).", "DEL ClassInstanceCreation", "DEL SimpleName: DEFERRED1", "DEL MethodDeclaration", "DEL SimpleName: toString", "DEL SimpleName: prefix", "DEL SimpleName: error", "DEL ExpressionStatement", "DEL SimpleName: reader", "DEL TagElement: @param", "DEL NumberLiteral: 0", "DEL SimpleName: isSpaceChar", "DEL MethodInvocation", "DEL SimpleName: stmt", "DEL SimpleName: prefixLen", "DEL TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as warnings.", "DEL SimpleName: add", "DEL SimpleName: source", "DEL SimpleType: Expression", "DEL IfStatement", "DEL Block", "DEL SimpleName: createFrame", "DEL TagElement", "DEL SimpleName: Interpreter", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL ParameterizedType: Set<List<String>>", "DEL ConditionalExpression", "DEL TagElement", "DEL MethodInvocation", "DEL TextElement: The actual contexnt. ", "DEL TextElement:  true if immediate, false otherwise", "DEL TagElement", "DEL ExpressionStatement", "DEL Block", "DEL TagElement: @param", "DEL Modifier: protected", "DEL SimpleType: Set", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL SimpleName: interpreter", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL SimpleName: aJexl", "DEL SingleVariableDeclaration", "DEL SimpleName: size", "DEL TextElement: Creates a builder.", "DEL ArrayAccess", "DEL SimpleName: asString", "DEL SimpleType: JexlEngine.Frame", "DEL SimpleName: e", "DEL SimpleName: cexpr", "DEL Modifier: final", "DEL ExpressionStatement", "DEL TextElement: Composite expressions are not counted, index -1. ", "DEL SimpleName: pattern", "DEL SimpleName: source", "DEL SimpleName: TemplateContext", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL SimpleName: state", "DEL SimpleType: BufferedReader", "DEL SimpleName: strb", "DEL TextElement:  the expressions", "DEL SimpleType: StringBuilder", "DEL SimpleName: jexl", "DEL Block", "DEL TagElement", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: NamespaceResolver", "DEL Block", "DEL SimpleName: theExpr", "DEL TagElement", "DEL PrefixExpression: !", "DEL SimpleName: directive", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL TextElement: Nested (which are deferred) expressions, count index 2. ", "DEL Modifier: final", "DEL SimpleType: StringBuilder", "DEL SimpleName: Set", "DEL SimpleName: append", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: sequence", "DEL TagElement", "DEL TextElement:  the list of expression from the template to evaluate", "DEL SimpleType: Writer", "DEL TagElement", "DEL SimpleName: evaluate", "DEL VariableDeclarationFragment", "DEL SimpleName: inested", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Expression", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleType: StringBuilder", "DEL Block", "DEL SimpleName: write", "DEL SimpleName: getType", "DEL TextElement:  2.1", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL SimpleName: value", "DEL SimpleName: readTemplate", "DEL VariableDeclarationStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: length", "DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL TextElement: and facilitate the implementation of expression evaluation.", "DEL SimpleName: IMMEDIATE", "DEL Block", "DEL SimpleName: state", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: jcontext", "DEL SimpleName: expr", "DEL Modifier: protected", "DEL SimpleName: c", "DEL VariableDeclarationStatement", "DEL TagElement: @return", "DEL SimpleName: codeStart", "DEL SimpleName: JexlContext", "DEL IfStatement", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL TextElement: context, allowing to differ evaluation of the remaining (deferred) expression within another context.", "DEL Block", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: toString", "DEL SimpleName: size", "DEL SimpleName: toString", "DEL TextElement: A Template is a script that evaluates by writing its content through a Writer.", "DEL TextElement: <p>", "DEL SimpleName: evaluate", "DEL SimpleName: Expression", "DEL Block", "DEL BooleanLiteral: true", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: append", "DEL VariableDeclarationStatement", "DEL QualifiedName: exprs.length", "DEL Javadoc", "DEL SimpleName: directive", "DEL SimpleName: delete", "DEL QualifiedName: ExpressionType.DEFERRED.index", "DEL Block", "DEL SuperConstructorInvocation", "DEL TextElement: language.", "DEL SimpleType: Expression", "DEL Javadoc", "DEL Javadoc", "DEL Javadoc", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL ClassInstanceCreation", "DEL Dimension", "DEL Javadoc", "DEL Javadoc", "DEL SimpleType: CharSequence", "DEL Javadoc", "DEL TextElement:  the calling frame", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL TextElement:  the number of expressions in this cache", "DEL TextElement:  the expression number", "DEL ExpressionStatement", "DEL SimpleName: asString", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: prepare", "DEL TagElement: @inheritDoc", "DEL SimpleName: append", "DEL VariableDeclarationStatement", "DEL SimpleName: StringBuilder", "DEL SimpleType: Exception", "DEL ParameterizedType: JexlEngine.SoftCache<String,Expression>", "DEL TextElement:  the expression", "DEL SimpleName: out", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL Modifier: protected", "DEL ArrayAccess", "DEL SimpleName: blocks", "DEL Block", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TextElement:  the exception message", "DEL IfStatement", "DEL PrefixExpression: !", "DEL MethodDeclaration", "DEL SimpleName: add", "DEL SimpleType: JexlNode", "DEL TagElement", "DEL TextElement:  the source", "DEL NullLiteral", "DEL SimpleName: type", "DEL SimpleName: blocks", "DEL TypeDeclaration: class", "DEL Assignment: =", "DEL Block", "DEL SimpleName: idx", "DEL StringLiteral: \" '\"", "DEL SimpleName: String", "DEL SimpleName: charAt", "DEL SimpleName: state", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: val", "DEL VariableDeclarationStatement", "DEL TextElement: Creates a template context instance.", "DEL NullLiteral", "DEL IfStatement", "DEL SimpleName: strb", "DEL TextElement: Creates a a ", "DEL SimpleName: strb", "DEL Block", "DEL SimpleName: block", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: JexlContext", "DEL SimpleName: JexlEngine", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL InfixExpression: ||", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: expressions", "DEL SimpleName: Template", "DEL SimpleName: dexpr", "DEL TextElement:  the writer to use for output", "DEL SimpleName: strb", "DEL InfixExpression: >=", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: length", "DEL TextElement:  the constant value", "DEL CharacterLiteral: '{'", "DEL SimpleName: theBlock", "DEL SimpleType: Expression", "DEL TextElement:  is running in silent mode", "DEL SimpleName: strb", "DEL VariableDeclarationExpression", "DEL ReturnStatement", "DEL SimpleName: b", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: state", "DEL Modifier: static", "DEL TextElement:  the expression instance", "DEL FieldAccess", "DEL Javadoc", "DEL SimpleName: parseExpression", "DEL SimpleName: JexlException", "DEL SimpleName: expr", "DEL Javadoc", "DEL TagElement", "DEL TextElement: <p>", "DEL SimpleName: expr", "DEL Modifier: private", "DEL SimpleName: getType", "DEL TagElement: @param", "DEL SimpleName: prefixLen", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: jframe", "DEL SimpleName: cache", "DEL ThrowStatement", "DEL SimpleName: cache", "DEL SimpleName: idx", "DEL TextElement:  the variable context", "DEL SimpleName: interpreter", "DEL SimpleName: equals", "DEL SimpleName: isImmediate", "DEL MethodDeclaration", "DEL SimpleName: Expression", "DEL SimpleName: strb", "DEL SimpleName: Exception", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL TagElement", "DEL SimpleType: RuntimeException", "DEL SimpleName: name", "DEL SimpleName: uexprs", "DEL ThisExpression", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL SimpleName: stmt", "DEL TagElement: @param", "DEL Block", "DEL TextElement:  the source expression if any", "DEL SimpleName: codeStart", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Assignment: +=", "DEL SingleVariableDeclaration", "DEL SimpleName: b", "DEL SimpleName: msg", "DEL SimpleName: xjexl", "DEL TagElement: @return", "DEL StringLiteral: \"malformed expression: \"", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: DeferredExpression", "DEL SimpleName: source", "DEL Modifier: protected", "DEL SimpleName: value", "DEL VariableDeclarationFragment", "DEL SimpleName: Expression", "DEL NullLiteral", "DEL TextElement: </p>", "DEL VariableDeclarationStatement", "DEL SimpleName: xany", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL TagElement: @inheritDoc", "DEL Modifier: public", "DEL Block", "DEL TagElement", "DEL MarkerAnnotation", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL SimpleName: charAt", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: builder", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: Template", "DEL SimpleName: strb", "DEL TextElement: The type of context to use during evaluation of templates.", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: Expression", "DEL TextElement: Each instance carries a counter index per (composite sub-) expression type.", "DEL TextElement: Note that the deferred syntax is JEXL's, not UnifiedJEXL.", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL TagElement: @inheritDoc", "DEL NullLiteral", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SwitchStatement", "DEL Block", "DEL TextElement: <p><blockquote><pre>", "DEL Modifier: final", "DEL SimpleName: append", "DEL QualifiedName: ParseState.CONST", "DEL TagElement: @param", "DEL SimpleType: Expression", "DEL SimpleName: ExpressionType", "DEL TextElement:  2.1", "DEL QualifiedName: block.type", "DEL Javadoc", "DEL MethodInvocation", "DEL Assignment: =", "DEL MethodInvocation", "DEL QualifiedName: block.type", "DEL SimpleName: interpreter", "DEL MethodInvocation", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SimpleName: deleteCharAt", "DEL Assignment: =", "DEL SimpleName: source", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL TextElement: Creates a new template.", "DEL TextElement:  ", "DEL ExpressionStatement", "DEL InfixExpression: <", "DEL SimpleName: Reader", "DEL Block", "DEL SimpleName: DEF_CHAR", "DEL SimpleName: xuel", "DEL Dimension", "DEL SimpleType: List", "DEL SimpleName: writer", "DEL SimpleName: verbatim", "DEL MethodInvocation", "DEL ThrowStatement", "DEL SimpleName: node", "DEL TagElement", "DEL SimpleName: Reader", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL InfixExpression: !=", "DEL SimpleType: Throwable", "DEL QualifiedName: source.length", "DEL TextElement: The list of sub-expression resulting from parsing. ", "DEL SimpleName: e", "DEL CastExpression", "DEL TagElement: @inheritDoc", "DEL TextElement:  the parameter names", "DEL SimpleName: prepare", "DEL MethodInvocation", "DEL Modifier: final", "DEL TryStatement", "DEL SimpleName: xuel", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleName: List", "DEL SimpleName: i", "DEL SimpleName: type", "DEL InfixExpression: <", "DEL ThisExpression", "DEL SimpleName: Object", "DEL EnumDeclaration", "DEL SimpleName: writer", "DEL SimpleType: TemplateBlock", "DEL SimpleName: theSource", "DEL NullLiteral", "DEL SimpleName: e", "DEL TagElement", "DEL SimpleName: prepare", "DEL SimpleType: Expression", "DEL IfStatement", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: NestedExpression", "DEL SimpleName: toString", "DEL Block", "DEL SimpleName: sum", "DEL ArrayType: TemplateBlock[]", "DEL Modifier: private", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL Block", "DEL NumberLiteral: 1", "DEL TextElement: </p>", "DEL SimpleName: block", "DEL TagElement", "DEL TextElement:  the expression as an AST", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL SimpleType: NullPointerException", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL NullLiteral", "DEL SimpleType: java.io.IOException", "DEL SimpleName: theSource", "DEL SimpleType: String", "DEL SimpleType: NamespaceResolver", "DEL BooleanLiteral: false", "DEL FieldDeclaration", "DEL SimpleName: evaluate", "DEL TextElement: An evaluator similar to the Unified EL evaluator used in JSP/JSF based on JEXL.", "DEL TextElement: Deferred expression, count index 2. ", "DEL SimpleType: NullPointerException", "DEL SimpleName: StringBuilder", "DEL TextElement:  the context to use for immediate expression evaluations", "DEL SimpleName: directive", "DEL SimpleName: JexlEngine", "DEL ExpressionStatement", "DEL TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p>", "DEL SimpleName: expressions", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: error", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"constant can not be null\"", "DEL SimpleName: ns", "DEL InfixExpression: ==", "DEL QualifiedName: exprs.length", "DEL SimpleName: prepare", "DEL MethodInvocation", "DEL SimpleType: Expression", "DEL SimpleType: JexlBasedExpression", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: interpreter", "DEL Javadoc", "DEL SimpleName: Expression", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: subSequence", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL QualifiedName: ExpressionType.IMMEDIATE.index", "DEL Block", "DEL Javadoc", "DEL SimpleName: composite", "DEL ExpressionStatement", "DEL SimpleName: IMMEDIATE0", "DEL MethodInvocation", "DEL StringLiteral: \"$$\"", "DEL VariableDeclarationFragment", "DEL SimpleName: delete", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: tcontext", "DEL VariableDeclarationFragment", "DEL SimpleName: block", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL SimpleName: asString", "DEL SimpleName: value", "DEL SimpleName: append", "DEL SimpleName: readString", "DEL SimpleType: ExpressionBuilder", "DEL Block", "DEL SimpleName: reader", "DEL SimpleName: jcontext", "DEL SimpleName: append", "DEL ClassInstanceCreation", "DEL SimpleType: List", "DEL TagElement", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TextElement:  (only for nested & composite)", "DEL InfixExpression: -", "DEL QualifiedName: ExpressionType.IMMEDIATE", "DEL SimpleName: jexl", "DEL SimpleType: Writer", "DEL SimpleName: build", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL SimpleName: blocks", "DEL SingleVariableDeclaration", "DEL SimpleName: getMethod", "DEL SimpleName: inner", "DEL PrefixExpression: -", "DEL TextElement:  the directive prefix", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: add", "DEL SimpleName: Object", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: size", "DEL NullLiteral", "DEL SimpleType: Interpreter", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Expression", "DEL Block", "DEL SimpleType: JexlEngine.Scope", "DEL SimpleName: builder", "DEL ArrayAccess", "DEL SimpleName: append", "DEL InstanceofExpression", "DEL SimpleName: nuexpr", "DEL Assignment: =", "DEL SimpleName: JexlException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleType: Interpreter", "DEL SimpleName: count", "DEL TagElement: @see", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: refs", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL QualifiedName: jexl.logger", "DEL Modifier: public", "DEL Javadoc", "DEL QualifiedName: composite.exprs", "DEL Dimension", "DEL CatchClause", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: reader", "DEL IfStatement", "DEL Javadoc", "DEL SimpleType: Interpreter", "DEL QualifiedName: ExpressionType.CONSTANT.index", "DEL VariableDeclarationStatement", "DEL SimpleType: java.lang.Exception", "DEL SimpleName: interpreter", "DEL SimpleType: Template", "DEL Block", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: Exception", "DEL TagElement: @param", "DEL MethodInvocation", "DEL Block", "DEL PrefixExpression: ++", "DEL SimpleType: TemplateBlock", "DEL SimpleName: error", "DEL ExpressionStatement", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL TextElement: Creates an expression.", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: String", "DEL MethodInvocation", "DEL TextElement:  the directive prefix", "DEL PrimitiveType: int", "DEL SimpleType: List", "DEL SimpleName: ConstantExpression", "DEL SimpleName: prepared", "DEL SimpleType: Expression", "DEL SimpleName: strb", "DEL NullLiteral", "DEL Assignment: =", "DEL SimpleType: TemplateBlock", "DEL SimpleName: cache", "DEL SimpleName: name", "DEL StringLiteral: \"null input\"", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TagElement", "DEL StringLiteral: \"#{\"", "DEL SimpleName: e", "DEL ArrayType: Expression[]", "DEL MethodDeclaration", "DEL SimpleName: delete", "DEL ArrayAccess", "DEL SimpleName: strb", "DEL ExpressionStatement", "DEL SimpleType: ConstantExpression", "DEL PrimitiveType: int", "DEL Block", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: strb", "DEL SimpleName: Expression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleType: ConstantExpression", "DEL SimpleName: arg", "DEL VariableDeclarationFragment", "DEL SimpleName: Template", "DEL MarkerAnnotation", "DEL NumberLiteral: 0", "DEL Dimension", "DEL SimpleName: uexprs", "DEL Assignment: =", "DEL ExpressionStatement", "DEL CastExpression", "DEL SimpleName: parseExpression", "DEL MethodInvocation", "DEL SimpleName: tcontext", "DEL SimpleName: e", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: DEFERRED1", "DEL MarkerAnnotation", "DEL SimpleName: getScope", "DEL SimpleName: Collections", "DEL BooleanLiteral: true", "DEL TagElement", "DEL TextElement: The value $(x} is over fourty-two", "DEL TextElement:  counters of expression per type", "DEL TextElement: is suitable for a later phase evaluation that may occur with a different JexlContext.", "DEL SimpleName: JexlNode", "DEL SimpleType: BufferedReader", "DEL SimpleName: Expression", "DEL ExpressionStatement", "DEL QualifiedName: BlockType.DIRECTIVE", "DEL Javadoc", "DEL TextElement:  the unified el instance", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL SimpleName: Expression", "DEL Javadoc", "DEL SimpleName: Expression", "DEL TagElement: @inheritDoc", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: type", "DEL Block", "DEL SimpleName: ImmediateExpression", "DEL SimpleName: Throwable", "DEL TagElement: @param", "DEL Modifier: public", "DEL SimpleType: TemplateBlock", "DEL SimpleName: prefix", "DEL TagElement: @param", "DEL IfStatement", "DEL SimpleName: TemplateContext", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL SimpleType: ExpressionType", "DEL SimpleType: Expression", "DEL SimpleName: xany", "DEL NumberLiteral: 1", "DEL SimpleName: createInterpreter", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: CompositeExpression", "DEL ExpressionStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: name", "DEL SimpleName: Expression", "DEL SingleVariableDeclaration", "DEL SimpleName: immediates", "DEL TagElement: @return", "DEL SimpleName: dexpr", "DEL Block", "DEL SimpleName: refs", "DEL SimpleName: c", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL SimpleName: source", "DEL MethodDeclaration", "DEL SimpleName: StringParser", "DEL SimpleType: NestedExpression", "DEL TagElement", "DEL SimpleName: node", "DEL InfixExpression: +", "DEL ForStatement", "DEL SimpleName: append", "DEL SimpleName: expr", "DEL VariableDeclarationExpression", "DEL Assignment: =", "DEL TextElement: Checks whether this expression is immediate.", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL ExpressionStatement", "DEL Javadoc", "DEL SimpleName: reader", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: Expression", "DEL Block", "DEL TagElement: @param", "DEL TextElement: ). ", "DEL SimpleType: List", "DEL Block", "DEL SimpleType: BlockType", "DEL TagElement: @return", "DEL TagElement", "DEL Assignment: =", "DEL Block", "DEL SimpleType: NamespaceResolver", "DEL SimpleName: StringBuilder", "DEL SimpleName: toString", "DEL SimpleName: exprs", "DEL SimpleName: IMM_CHAR", "DEL Block", "DEL Modifier: public", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement:  if an error occur during parsing", "DEL SimpleName: source", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL SimpleName: size", "DEL SimpleName: src", "DEL Javadoc", "DEL SimpleType: StringBuilder", "DEL SimpleName: aJexl", "DEL SimpleName: Template", "DEL SimpleName: length", "DEL TagElement", "DEL SimpleName: prepare", "DEL ThisExpression", "DEL SimpleType: Expression", "DEL PrefixExpression: -", "DEL TagElement", "DEL SimpleName: xuel", "DEL NullLiteral", "DEL SimpleType: TemplateBlock", "DEL SimpleType: String", "DEL SimpleName: expr", "DEL SimpleName: Expression", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: interpreter", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: append", "DEL TryStatement", "DEL SimpleName: asString", "DEL Assignment: =", "DEL Block", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: parse", "DEL SimpleName: theNode", "DEL SimpleName: line", "DEL Modifier: public", "DEL TagElement", "DEL SimpleName: action", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL QualifiedName: BlockType.VERBATIM", "DEL IfStatement", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL TextElement: </ul>", "DEL TextElement: Bit encoded (deferred count > 0) bit 1, (immediate count > 0) bit 0. ", "DEL TextElement:  the template", "DEL SimpleName: frame", "DEL Javadoc", "DEL SimpleName: src", "DEL SimpleName: Override", "DEL Block", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL TextElement: </p>", "DEL ThisExpression", "DEL TextElement: The expression cache. ", "DEL QualifiedName: jexl.logger", "DEL SimpleName: strb", "DEL Block", "DEL TextElement:  if the directive prefix is invalid", "DEL SimpleName: strb", "DEL SimpleName: value", "DEL TextElement: Creates a UnifiedJEXL.Exception from a JexlException.", "DEL IfStatement", "DEL SimpleName: expression", "DEL SimpleName: wrap", "DEL SimpleName: cause", "DEL Modifier: protected", "DEL TagElement: @return", "DEL SimpleName: exprs", "DEL MethodInvocation", "DEL SimpleName: ConstantExpression", "DEL SimpleType: Set", "DEL SimpleName: evaluate", "DEL SimpleName: interpreter", "DEL PrimitiveType: int", "DEL SimpleType: List", "DEL SimpleName: String", "DEL SimpleName: IMM_CHAR", "DEL TextElement: comments if available: 'expression /*= source *\\/'' .", "DEL TextElement: Note that nested expression use the JEXL syntax as in:", "DEL ReturnStatement", "DEL ConditionalExpression", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: CompositeExpression", "DEL TextElement: $$   } else {", "DEL MethodDeclaration", "DEL SimpleType: JexlException", "DEL BreakStatement", "DEL SimpleName: StringBuilder", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: e", "DEL TextElement: The first character for immediate expressions. ", "DEL InfixExpression: >", "DEL MarkerAnnotation", "DEL IfStatement", "DEL SimpleType: Object", "DEL StringLiteral: \" /*= \"", "DEL SimpleType: StringBuilder", "DEL SimpleName: script", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL StringLiteral: \"$$\"", "DEL MethodDeclaration", "DEL TagElement", "DEL Block", "DEL QualifiedName: JexlEngine.SoftCache", "DEL MethodInvocation", "DEL SimpleType: StringReader", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL SimpleName: ExpressionType", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleName: parse", "DEL SimpleName: List", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: xany", "DEL SimpleName: strb", "DEL Javadoc", "DEL Block", "DEL SimpleName: list", "DEL SingleVariableDeclaration", "DEL SimpleName: b", "DEL SimpleName: append", "DEL SimpleName: exprs", "DEL SimpleName: strb", "DEL IfStatement", "DEL Block", "DEL SimpleName: List", "DEL SimpleName: String", "DEL BreakStatement", "DEL SimpleName: node", "DEL SimpleName: toString", "DEL TextElement: The prefix marker. ", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: value", "DEL SimpleName: evaluate", "DEL SimpleName: getType", "DEL ClassInstanceCreation", "DEL SimpleName: expressions", "DEL SimpleName: expr", "DEL InfixExpression: <", "DEL Assignment: =", "DEL SimpleName: args", "DEL ThisExpression", "DEL SimpleName: source", "DEL SimpleName: counts", "DEL NullLiteral", "DEL Block", "DEL ParameterizedType: ArrayList<Expression>", "DEL Block", "DEL SimpleType: Object", "DEL Block", "DEL SimpleType: ExpressionBuilder", "DEL SimpleName: createException", "DEL CastExpression", "DEL TextElement: Private ctor used to expand deferred expressions during prepare.", "DEL ExpressionStatement", "DEL SimpleName: xuel", "DEL SimpleType: StringBuilder", "DEL Modifier: static", "DEL Modifier: public", "DEL SimpleName: expressions", "DEL SimpleName: append", "DEL SimpleName: index", "DEL SimpleType: Expression", "DEL SimpleName: cacheSize", "DEL SimpleName: Expression", "DEL SimpleName: getType", "DEL ExpressionStatement", "DEL SimpleName: block", "DEL TagElement", "DEL SimpleName: jexl", "DEL ThisExpression", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL TagElement: @param", "DEL ThisExpression", "DEL SimpleName: strb", "DEL SimpleName: cexpr", "DEL TextElement: Evaluates this template.", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SimpleName: Expression", "DEL BreakStatement", "DEL SimpleName: c", "DEL Modifier: final", "DEL StringLiteral: \"prepare\"", "DEL TextElement:  the string representation", "DEL MarkerAnnotation", "DEL SimpleName: xjexl", "DEL SimpleName: nested", "DEL TextElement:  a JEXL interpreter", "DEL QualifiedName: ExpressionType.COMPOSITE", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleType: Set", "DEL SimpleType: List", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL SimpleName: BlockType", "DEL ContinueStatement", "DEL SimpleName: xjexl", "DEL ReturnStatement", "DEL SimpleName: verbatim", "DEL SimpleType: JexlNode", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlContext", "DEL SimpleName: evaluate", "DEL SimpleName: type", "DEL SimpleName: TemplateBlock", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TextElement:  the source expression if any", "DEL SimpleName: Writer", "DEL SimpleName: debugInfo", "DEL Block", "DEL InfixExpression: ||", "DEL Modifier: public", "DEL TagElement", "DEL MethodInvocation", "DEL SuperConstructorInvocation", "DEL ClassInstanceCreation", "DEL TextElement: Gets the list of variables accessed by this expression.", "DEL Javadoc", "DEL Modifier: private", "DEL TextElement: <li>A deferred expression indicate that evaluation is intended to occur at a later stage.</li>", "DEL Block", "DEL TagElement: @param", "DEL Modifier: private", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: Expression", "DEL InfixExpression: <", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: isLenient", "DEL SimpleName: counts", "DEL SimpleName: composite"]}]}}, {"UnifiedJEXL_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.BufferedReader(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.IOException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.Reader(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.StringReader(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.io.Writer(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.ArrayList(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.Collections(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.LinkedHashSet(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.List(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Set(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.Uberspect(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.commons.jexl2.parser.JexlNode(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.apache.commons.jexl2.parser.StringParser(30)", "Delete ImportDeclaration(31)", "Delete TextElement: An evaluator similar to the Unified EL evaluator used in JSP/JSF based on JEXL.(32)", "Delete TextElement: It is intended to be used in configuration modules, XML based frameworks or JSP taglibs(33)", "Delete TextElement: and facilitate the implementation of expression evaluation.(34)", "Delete TextElement: <p>(35)", "Delete TextElement: An expression can mix immediate, deferred and nested sub-expressions as well as string constants;(36)", "Delete TextElement: <ul>(37)", "Delete TextElement: <li>The \"immediate\" syntax is of the form <code>\"...${jexl-expr}...\"</code></li>(38)", "Delete TextElement: <li>The \"deferred\" syntax is of the form <code>\"...#{jexl-expr}...\"</code></li>(39)", "Delete TextElement: <li>The \"nested\" syntax is of the form <code>\"...#{...${jexl-expr0}...}...\"</code></li>(40)", "Delete TextElement: <li>The \"composite\" syntax is of the form <code>\"...${jexl-expr0}... #{jexl-expr1}...\"</code></li>(41)", "Delete TextElement: </ul>(42)", "Delete TextElement: </p>(43)", "Delete TextElement: <p>(44)", "Delete TextElement: Deferred & immediate expression carry different intentions:(45)", "Delete TextElement: <ul>(46)", "Delete TextElement: <li>An immediate expression indicate that evaluation is intended to be performed close to(47)", "Delete TextElement: the definition/parsing point.</li>(48)", "Delete TextElement: <li>A deferred expression indicate that evaluation is intended to occur at a later stage.</li>(49)", "Delete TextElement: </ul>(50)", "Delete TextElement: </p>(51)", "Delete TextElement: <p>(52)", "Delete TextElement: For instance: <code>\"Hello ${name}, now is #{time}\"</code> is a composite \"deferred\" expression since one(53)", "Delete TextElement: of its subexpressions is deferred. Furthermore, this (composite) expression intent is(54)", "Delete TextElement: to perform two evaluations; one close to its definition and another one in a later(55)", "Delete TextElement: phase.(56)", "Delete TextElement: </p>(57)", "Delete TextElement: <p>(58)", "Delete TextElement: The API reflects this feature in 2 methods, prepare and evaluate. The prepare method(59)", "Delete TextElement: will evaluate the immediate subexpression and return an expression that contains only(60)", "Delete TextElement: the deferred subexpressions (& constants), a prepared expression. Such a prepared expression(61)", "Delete TextElement: is suitable for a later phase evaluation that may occur with a different JexlContext.(62)", "Delete TextElement: Note that it is valid to call evaluate without prepare in which case the same JexlContext(63)", "Delete TextElement: is used for the 2 evaluation phases.(64)", "Delete TextElement: </p>(65)", "Delete TextElement: <p>(66)", "Delete TextElement: In the most common use-case where deferred expressions are to be kept around as properties of objects,(67)", "Delete TextElement: one should parse & prepare an expression before storing it and evaluate it each time(68)", "Delete TextElement: the property storing it is accessed.(69)", "Delete TextElement: </p>(70)", "Delete TextElement: <p>(71)", "Delete TextElement: Note that nested expression use the JEXL syntax as in:(72)", "Delete TextElement: <code>\"#{${bar}+'.charAt(2)'}\"</code>(73)", "Delete TextElement: The most common mistake leading to an invalid expression being the following:(74)", "Delete TextElement: <code>\"#{${bar}charAt(2)}\"</code>(75)", "Delete TextElement: </p>(76)", "Delete TextElement: <p>Also note that methods that parse evaluate expressions may throw <em>unchecked</em> exceptions;(77)", "Delete TextElement: The (78)", "Delete QualifiedName: UnifiedJEXL.Exception(79)", "Delete TagElement: @link(80)", "Delete TextElement:  are thrown when the engine instance is in \"non-silent\" mode(81)", "Delete TextElement: but since these are RuntimeException, user-code <em>should</em> catch them where appropriate.(82)", "Delete TextElement: </p>(83)", "Delete TagElement(84)", "Delete TextElement:  2.0(85)", "Delete TagElement: @since(86)", "Delete Javadoc(87)", "Delete Modifier: public(88)", "Delete Modifier: final(89)", "Delete SimpleName: UnifiedJEXL(90)", "Delete TextElement: The JEXL engine instance. (91)", "Delete TagElement(92)", "Delete Javadoc(93)", "Delete Modifier: private(94)", "Delete Modifier: final(95)", "Delete SimpleName: JexlEngine(96)", "Delete SimpleType: JexlEngine(97)", "Delete SimpleName: jexl(98)", "Delete VariableDeclarationFragment(99)", "Delete FieldDeclaration(100)", "Delete TextElement: The expression cache. (101)", "Delete TagElement(102)", "Delete Javadoc(103)", "Delete Modifier: private(104)", "Delete Modifier: final(105)", "Delete QualifiedName: JexlEngine.SoftCache(106)", "Delete SimpleType: JexlEngine.SoftCache(107)", "Delete SimpleName: String(108)", "Delete SimpleType: String(109)", "Delete SimpleName: Expression(110)", "Delete SimpleType: Expression(111)", "Delete ParameterizedType: JexlEngine.SoftCache<String,Expression>(112)", "Delete SimpleName: cache(113)", "Delete VariableDeclarationFragment(114)", "Delete FieldDeclaration(115)", "Delete TextElement: The default cache size. (116)", "Delete TagElement(117)", "Delete Javadoc(118)", "Delete Modifier: private(119)", "Delete Modifier: static(120)", "Delete Modifier: final(121)", "Delete PrimitiveType: int(122)", "Delete SimpleName: CACHE_SIZE(123)", "Delete NumberLiteral: 256(124)", "Delete VariableDeclarationFragment(125)", "Delete FieldDeclaration(126)", "Delete TextElement: The first character for immediate expressions. (127)", "Delete TagElement(128)", "Delete Javadoc(129)", "Delete Modifier: private(130)", "Delete Modifier: static(131)", "Delete Modifier: final(132)", "Delete PrimitiveType: char(133)", "Delete SimpleName: IMM_CHAR(134)", "Delete CharacterLiteral: '$'(135)", "Delete VariableDeclarationFragment(136)", "Delete FieldDeclaration(137)", "Delete TextElement: The first character for deferred expressions. (138)", "Delete TagElement(139)", "Delete Javadoc(140)", "Delete Modifier: private(141)", "Delete Modifier: static(142)", "Delete Modifier: final(143)", "Delete PrimitiveType: char(144)", "Delete SimpleName: DEF_CHAR(145)", "Delete CharacterLiteral: '#'(146)", "Delete VariableDeclarationFragment(147)", "Delete FieldDeclaration(148)", "Delete TextElement: Creates a new instance of UnifiedJEXL with a default size cache.(149)", "Delete TagElement(150)", "Delete SimpleName: aJexl(151)", "Delete TextElement:  the JexlEngine to use.(152)", "Delete TagElement: @param(153)", "Delete Javadoc(154)", "Delete Modifier: public(155)", "Delete SimpleName: UnifiedJEXL(156)", "Delete SimpleName: JexlEngine(157)", "Delete SimpleType: JexlEngine(158)", "Delete SimpleName: aJexl(159)", "Delete SingleVariableDeclaration(160)", "Delete SimpleName: aJexl(161)", "Delete SimpleName: CACHE_SIZE(162)", "Delete ConstructorInvocation(163)", "Delete Block(164)", "Delete MethodDeclaration(165)", "Delete TextElement: Creates a new instance of UnifiedJEXL creating a local cache.(166)", "Delete TagElement(167)", "Delete SimpleName: aJexl(168)", "Delete TextElement:  the JexlEngine to use.(169)", "Delete TagElement: @param(170)", "Delete SimpleName: cacheSize(171)", "Delete TextElement:  the number of expressions in this cache(172)", "Delete TagElement: @param(173)", "Delete Javadoc(174)", "Delete Modifier: public(175)", "Delete SimpleName: UnifiedJEXL(176)", "Delete SimpleName: JexlEngine(177)", "Delete SimpleType: JexlEngine(178)", "Delete SimpleName: aJexl(179)", "Delete SingleVariableDeclaration(180)", "Delete PrimitiveType: int(181)", "Delete SimpleName: cacheSize(182)", "Delete SingleVariableDeclaration(183)", "Delete ThisExpression(184)", "Delete SimpleName: jexl(185)", "Delete FieldAccess(186)", "Delete SimpleName: aJexl(187)", "Delete Assignment: =(188)", "Delete ExpressionStatement(189)", "Delete ThisExpression(190)", "Delete SimpleName: cache(191)", "Delete FieldAccess(192)", "Delete SimpleName: aJexl(193)", "Delete SimpleName: SoftCache(194)", "Delete SimpleType: SoftCache(195)", "Delete SimpleName: String(196)", "Delete SimpleType: String(197)", "Delete SimpleName: Expression(198)", "Delete SimpleType: Expression(199)", "Delete ParameterizedType: SoftCache<String,Expression>(200)", "Delete SimpleName: cacheSize(201)", "Delete ClassInstanceCreation(202)", "Delete Assignment: =(203)", "Delete ExpressionStatement(204)", "Delete Block(205)", "Delete MethodDeclaration(206)", "Delete TextElement: Types of expressions.(207)", "Delete TextElement: Each instance carries a counter index per (composite sub-) expression type.(208)", "Delete TagElement(209)", "Delete SimpleName: ExpressionBuilder(210)", "Delete TagElement: @see(211)", "Delete Javadoc(212)", "Delete Modifier: private(213)", "Delete Modifier: static(214)", "Delete SimpleName: ExpressionType(215)", "Delete TextElement: Constant expression, count index 0. (216)", "Delete TagElement(217)", "Delete Javadoc(218)", "Delete SimpleName: CONSTANT(219)", "Delete NumberLiteral: 0(220)", "Delete EnumConstantDeclaration(221)", "Delete TextElement: Immediate expression, count index 1. (222)", "Delete TagElement(223)", "Delete Javadoc(224)", "Delete SimpleName: IMMEDIATE(225)", "Delete NumberLiteral: 1(226)", "Delete EnumConstantDeclaration(227)", "Delete TextElement: Deferred expression, count index 2. (228)", "Delete TagElement(229)", "Delete Javadoc(230)", "Delete SimpleName: DEFERRED(231)", "Delete NumberLiteral: 2(232)", "Delete EnumConstantDeclaration(233)", "Delete TextElement: Nested (which are deferred) expressions, count index 2. (234)", "Delete TagElement(235)", "Delete Javadoc(236)", "Delete SimpleName: NESTED(237)", "Delete NumberLiteral: 2(238)", "Delete EnumConstantDeclaration(239)", "Delete TextElement: Composite expressions are not counted, index -1. (240)", "Delete TagElement(241)", "Delete Javadoc(242)", "Delete SimpleName: COMPOSITE(243)", "Delete NumberLiteral: 1(244)", "Delete PrefixExpression: -(245)", "Delete EnumConstantDeclaration(246)", "Delete TextElement: The index in arrays of expression counters for composite expressions. (247)", "Delete TagElement(248)", "Delete Javadoc(249)", "Delete Modifier: private(250)", "Delete Modifier: final(251)", "Delete PrimitiveType: int(252)", "Delete SimpleName: index(253)", "Delete VariableDeclarationFragment(254)", "Delete FieldDeclaration(255)", "Delete TextElement: Creates an ExpressionType.(256)", "Delete TagElement(257)", "Delete SimpleName: idx(258)", "Delete TextElement:  the index for this type in counters arrays.(259)", "Delete TagElement: @param(260)", "Delete Javadoc(261)", "Delete SimpleName: ExpressionType(262)", "Delete PrimitiveType: int(263)", "Delete SimpleName: idx(264)", "Delete SingleVariableDeclaration(265)", "Delete ThisExpression(266)", "Delete SimpleName: index(267)", "Delete FieldAccess(268)", "Delete SimpleName: idx(269)", "Delete Assignment: =(270)", "Delete ExpressionStatement(271)", "Delete Block(272)", "Delete MethodDeclaration(273)", "Delete EnumDeclaration(274)", "Delete TextElement: A helper class to build expressions.(275)", "Delete TextElement: Keeps count of sub-expressions by type.(276)", "Delete TagElement(277)", "Delete Javadoc(278)", "Delete Modifier: private(279)", "Delete Modifier: static(280)", "Delete SimpleName: ExpressionBuilder(281)", "Delete TextElement: Per expression type counters. (282)", "Delete TagElement(283)", "Delete Javadoc(284)", "Delete Modifier: private(285)", "Delete Modifier: final(286)", "Delete PrimitiveType: int(287)", "Delete Dimension(288)", "Delete ArrayType: int[](289)", "Delete SimpleName: counts(290)", "Delete VariableDeclarationFragment(291)", "Delete FieldDeclaration(292)", "Delete TextElement: The list of expressions. (293)", "Delete TagElement(294)", "Delete Javadoc(295)", "Delete Modifier: private(296)", "Delete Modifier: final(297)", "Delete SimpleName: ArrayList(298)", "Delete SimpleType: ArrayList(299)", "Delete SimpleName: Expression(300)", "Delete SimpleType: Expression(301)", "Delete ParameterizedType: ArrayList<Expression>(302)", "Delete SimpleName: expressions(303)", "Delete VariableDeclarationFragment(304)", "Delete FieldDeclaration(305)", "Delete TextElement: Creates a builder.(306)", "Delete TagElement(307)", "Delete SimpleName: size(308)", "Delete TextElement:  the initial expression array size(309)", "Delete TagElement: @param(310)", "Delete Javadoc(311)", "Delete SimpleName: ExpressionBuilder(312)", "Delete PrimitiveType: int(313)", "Delete SimpleName: size(314)", "Delete SingleVariableDeclaration(315)", "Delete SimpleName: counts(316)", "Delete PrimitiveType: int(317)", "Delete Dimension(318)", "Delete ArrayType: int[](319)", "Delete NumberLiteral: 0(320)", "Delete NumberLiteral: 0(321)", "Delete NumberLiteral: 0(322)", "Delete ArrayInitializer(323)", "Delete ArrayCreation(324)", "Delete Assignment: =(325)", "Delete ExpressionStatement(326)", "Delete SimpleName: expressions(327)", "Delete SimpleName: ArrayList(328)", "Delete SimpleType: ArrayList(329)", "Delete SimpleName: Expression(330)", "Delete SimpleType: Expression(331)", "Delete ParameterizedType: ArrayList<Expression>(332)", "Delete SimpleName: size(333)", "Delete NumberLiteral: 0(334)", "Delete InfixExpression: <=(335)", "Delete NumberLiteral: 3(336)", "Delete SimpleName: size(337)", "Delete ConditionalExpression(338)", "Delete ClassInstanceCreation(339)", "Delete Assignment: =(340)", "Delete ExpressionStatement(341)", "Delete Block(342)", "Delete MethodDeclaration(343)", "Delete TextElement: Adds an expression to the list of expressions, maintain per-type counts.(344)", "Delete TagElement(345)", "Delete SimpleName: expr(346)", "Delete TextElement:  the expression to add(347)", "Delete TagElement: @param(348)", "Delete Javadoc(349)", "Delete PrimitiveType: void(350)", "Delete SimpleName: add(351)", "Delete SimpleName: Expression(352)", "Delete SimpleType: Expression(353)", "Delete SimpleName: expr(354)", "Delete SingleVariableDeclaration(355)", "Delete SimpleName: counts(356)", "Delete SimpleName: expr(357)", "Delete SimpleName: getType(358)", "Delete MethodInvocation(359)", "Delete SimpleName: index(360)", "Delete FieldAccess(361)", "Delete ArrayAccess(362)", "Delete NumberLiteral: 1(363)", "Delete Assignment: +=(364)", "Delete ExpressionStatement(365)", "Delete SimpleName: expressions(366)", "Delete SimpleName: add(367)", "Delete SimpleName: expr(368)", "Delete MethodInvocation(369)", "Delete ExpressionStatement(370)", "Delete Block(371)", "Delete MethodDeclaration(372)", "Delete TextElement: Builds an expression from a source, performs checks.(373)", "Delete TagElement(374)", "Delete SimpleName: el(375)", "Delete TextElement:  the unified el instance(376)", "Delete TagElement: @param(377)", "Delete SimpleName: source(378)", "Delete TextElement:  the source expression(379)", "Delete TagElement: @param(380)", "Delete TextElement:  an expression(381)", "Delete TagElement: @return(382)", "Delete Javadoc(383)", "Delete SimpleName: Expression(384)", "Delete SimpleType: Expression(385)", "Delete SimpleName: build(386)", "Delete SimpleName: UnifiedJEXL(387)", "Delete SimpleType: UnifiedJEXL(388)", "Delete SimpleName: el(389)", "Delete SingleVariableDeclaration(390)", "Delete SimpleName: Expression(391)", "Delete SimpleType: Expression(392)", "Delete SimpleName: source(393)", "Delete SingleVariableDeclaration(394)", "Delete PrimitiveType: int(395)", "Delete SimpleName: sum(396)", "Delete NumberLiteral: 0(397)", "Delete VariableDeclarationFragment(398)", "Delete VariableDeclarationStatement(399)", "Delete PrimitiveType: int(400)", "Delete SimpleName: count(401)", "Delete SingleVariableDeclaration(402)", "Delete SimpleName: counts(403)", "Delete SimpleName: sum(404)", "Delete SimpleName: count(405)", "Delete Assignment: +=(406)", "Delete ExpressionStatement(407)", "Delete Block(408)", "Delete EnhancedForStatement(409)", "Delete SimpleName: expressions(410)", "Delete SimpleName: size(411)", "Delete MethodInvocation(412)", "Delete SimpleName: sum(413)", "Delete InfixExpression: !=(414)", "Delete SimpleName: StringBuilder(415)", "Delete SimpleType: StringBuilder(416)", "Delete SimpleName: error(417)", "Delete SimpleName: StringBuilder(418)", "Delete SimpleType: StringBuilder(419)", "Delete StringLiteral: \"parsing algorithm error, exprs: \"(420)", "Delete ClassInstanceCreation(421)", "Delete VariableDeclarationFragment(422)", "Delete VariableDeclarationStatement(423)", "Delete SimpleName: error(424)", "Delete SimpleName: append(425)", "Delete SimpleName: expressions(426)", "Delete SimpleName: size(427)", "Delete MethodInvocation(428)", "Delete MethodInvocation(429)", "Delete ExpressionStatement(430)", "Delete SimpleName: error(431)", "Delete SimpleName: append(432)", "Delete StringLiteral: \", constant:\"(433)", "Delete MethodInvocation(434)", "Delete ExpressionStatement(435)", "Delete SimpleName: error(436)", "Delete SimpleName: append(437)", "Delete SimpleName: counts(438)", "Delete QualifiedName: ExpressionType.CONSTANT.index(439)", "Delete ArrayAccess(440)", "Delete MethodInvocation(441)", "Delete ExpressionStatement(442)", "Delete SimpleName: error(443)", "Delete SimpleName: append(444)", "Delete StringLiteral: \", immediate:\"(445)", "Delete MethodInvocation(446)", "Delete ExpressionStatement(447)", "Delete SimpleName: error(448)", "Delete SimpleName: append(449)", "Delete SimpleName: counts(450)", "Delete QualifiedName: ExpressionType.IMMEDIATE.index(451)", "Delete ArrayAccess(452)", "Delete MethodInvocation(453)", "Delete ExpressionStatement(454)", "Delete SimpleName: error(455)", "Delete SimpleName: append(456)", "Delete StringLiteral: \", deferred:\"(457)", "Delete MethodInvocation(458)", "Delete ExpressionStatement(459)", "Delete SimpleName: error(460)", "Delete SimpleName: append(461)", "Delete SimpleName: counts(462)", "Delete QualifiedName: ExpressionType.DEFERRED.index(463)", "Delete ArrayAccess(464)", "Delete MethodInvocation(465)", "Delete ExpressionStatement(466)", "Delete SimpleName: IllegalStateException(467)", "Delete SimpleType: IllegalStateException(468)", "Delete SimpleName: error(469)", "Delete SimpleName: toString(470)", "Delete MethodInvocation(471)", "Delete ClassInstanceCreation(472)", "Delete ThrowStatement(473)", "Delete Block(474)", "Delete IfStatement(475)", "Delete SimpleName: expressions(476)", "Delete SimpleName: size(477)", "Delete MethodInvocation(478)", "Delete NumberLiteral: 1(479)", "Delete InfixExpression: ==(480)", "Delete SimpleName: expressions(481)", "Delete SimpleName: get(482)", "Delete NumberLiteral: 0(483)", "Delete MethodInvocation(484)", "Delete ReturnStatement(485)", "Delete Block(486)", "Delete SimpleName: el(487)", "Delete SimpleName: CompositeExpression(488)", "Delete SimpleType: CompositeExpression(489)", "Delete SimpleName: counts(490)", "Delete SimpleName: expressions(491)", "Delete SimpleName: source(492)", "Delete ClassInstanceCreation(493)", "Delete ReturnStatement(494)", "Delete Block(495)", "Delete IfStatement(496)", "Delete Block(497)", "Delete MethodDeclaration(498)", "Delete TypeDeclaration: class(499)", "Delete TextElement: Gets the JexlEngine underlying the UnifiedJEXL.(500)", "Delete TagElement(501)", "Delete TextElement:  the JexlEngine(502)", "Delete TagElement: @return(503)", "Delete Javadoc(504)", "Delete Modifier: public(505)", "Delete SimpleName: JexlEngine(506)", "Delete SimpleType: JexlEngine(507)", "Delete SimpleName: getEngine(508)", "Delete SimpleName: jexl(509)", "Delete ReturnStatement(510)", "Delete Block(511)", "Delete MethodDeclaration(512)", "Delete TextElement: Clears the cache.(513)", "Delete TagElement(514)", "Delete Javadoc(515)", "Delete Modifier: public(516)", "Delete PrimitiveType: void(517)", "Delete SimpleName: clearCache(518)", "Delete SimpleName: cache(519)", "Delete SimpleName: cache(520)", "Delete SimpleName: clear(521)", "Delete MethodInvocation(522)", "Delete ExpressionStatement(523)", "Delete Block(524)", "Delete SynchronizedStatement(525)", "Delete Block(526)", "Delete MethodDeclaration(527)", "Delete TextElement: The sole type of (runtime) exception the UnifiedJEXL can throw.(528)", "Delete TagElement(529)", "Delete Javadoc(530)", "Delete Modifier: public(531)", "Delete Modifier: static(532)", "Delete SimpleName: Exception(533)", "Delete SimpleName: RuntimeException(534)", "Delete SimpleType: RuntimeException(535)", "Delete TextElement: Serial version UID. (536)", "Delete TagElement(537)", "Delete Javadoc(538)", "Delete Modifier: private(539)", "Delete Modifier: static(540)", "Delete Modifier: final(541)", "Delete PrimitiveType: long(542)", "Delete SimpleName: serialVersionUID(543)", "Delete NumberLiteral: 8201402995815975726L(544)", "Delete PrefixExpression: -(545)", "Delete VariableDeclarationFragment(546)", "Delete FieldDeclaration(547)", "Delete TextElement: Creates a UnifiedJEXL.Exception.(548)", "Delete TagElement(549)", "Delete SimpleName: msg(550)", "Delete TextElement:  the exception message(551)", "Delete TagElement: @param(552)", "Delete SimpleName: cause(553)", "Delete TextElement:  the exception cause(554)", "Delete TagElement: @param(555)", "Delete Javadoc(556)", "Delete Modifier: public(557)", "Delete SimpleName: Exception(558)", "Delete SimpleName: String(559)", "Delete SimpleType: String(560)", "Delete SimpleName: msg(561)", "Delete SingleVariableDeclaration(562)", "Delete SimpleName: Throwable(563)", "Delete SimpleType: Throwable(564)", "Delete SimpleName: cause(565)", "Delete SingleVariableDeclaration(566)", "Delete SimpleName: msg(567)", "Delete SimpleName: cause(568)", "Delete SuperConstructorInvocation(569)", "Delete Block(570)", "Delete MethodDeclaration(571)", "Delete TypeDeclaration: class(572)", "Delete TextElement: The abstract base class for all expressions, immediate '${...}' and deferred '#{...}'.(573)", "Delete TagElement(574)", "Delete Javadoc(575)", "Delete Modifier: public(576)", "Delete Modifier: abstract(577)", "Delete SimpleName: Expression(578)", "Delete TextElement: The source of this expression (see (579)", "Delete QualifiedName: UnifiedJEXL.Expression(580)", "Delete SimpleName: prepare(581)", "Delete MemberRef(582)", "Delete TagElement: @link(583)", "Delete TextElement: ). (584)", "Delete TagElement(585)", "Delete Javadoc(586)", "Delete Modifier: protected(587)", "Delete Modifier: final(588)", "Delete SimpleName: Expression(589)", "Delete SimpleType: Expression(590)", "Delete SimpleName: source(591)", "Delete VariableDeclarationFragment(592)", "Delete FieldDeclaration(593)", "Delete TextElement: Creates an expression.(594)", "Delete TagElement(595)", "Delete SimpleName: src(596)", "Delete TextElement:  the source expression if any(597)", "Delete TagElement: @param(598)", "Delete Javadoc(599)", "Delete SimpleName: Expression(600)", "Delete SimpleName: Expression(601)", "Delete SimpleType: Expression(602)", "Delete SimpleName: src(603)", "Delete SingleVariableDeclaration(604)", "Delete ThisExpression(605)", "Delete SimpleName: source(606)", "Delete FieldAccess(607)", "Delete SimpleName: src(608)", "Delete NullLiteral(609)", "Delete InfixExpression: !=(610)", "Delete SimpleName: src(611)", "Delete ThisExpression(612)", "Delete ConditionalExpression(613)", "Delete Assignment: =(614)", "Delete ExpressionStatement(615)", "Delete Block(616)", "Delete MethodDeclaration(617)", "Delete TextElement: Checks whether this expression is immediate.(618)", "Delete TagElement(619)", "Delete TextElement:  true if immediate, false otherwise(620)", "Delete TagElement: @return(621)", "Delete Javadoc(622)", "Delete Modifier: public(623)", "Delete PrimitiveType: boolean(624)", "Delete SimpleName: isImmediate(625)", "Delete BooleanLiteral: true(626)", "Delete ReturnStatement(627)", "Delete Block(628)", "Delete MethodDeclaration(629)", "Delete TextElement: Checks whether this expression is deferred.(630)", "Delete TagElement(631)", "Delete TextElement:  true if deferred, false otherwise(632)", "Delete TagElement: @return(633)", "Delete Javadoc(634)", "Delete Modifier: public(635)", "Delete Modifier: final(636)", "Delete PrimitiveType: boolean(637)", "Delete SimpleName: isDeferred(638)", "Delete SimpleName: isImmediate(639)", "Delete MethodInvocation(640)", "Delete PrefixExpression: !(641)", "Delete ReturnStatement(642)", "Delete Block(643)", "Delete MethodDeclaration(644)", "Delete TextElement: Gets this expression type.(645)", "Delete TagElement(646)", "Delete TextElement:  its type(647)", "Delete TagElement: @return(648)", "Delete Javadoc(649)", "Delete Modifier: abstract(650)", "Delete SimpleName: ExpressionType(651)", "Delete SimpleType: ExpressionType(652)", "Delete SimpleName: getType(653)", "Delete MethodDeclaration(654)", "Delete TextElement: Formats this expression, adding its source string representation in(655)", "Delete TextElement: comments if available: 'expression /*= source *\\/'' .(656)", "Delete TagElement(657)", "Delete TextElement:  the formatted expression string(658)", "Delete TagElement: @return(659)", "Delete Javadoc(660)", "Delete SimpleName: Override(661)", "Delete MarkerAnnotation(662)", "Delete Modifier: public(663)", "Delete Modifier: final(664)", "Delete SimpleName: String(665)", "Delete SimpleType: String(666)", "Delete SimpleName: toString(667)", "Delete SimpleName: StringBuilder(668)", "Delete SimpleType: StringBuilder(669)", "Delete SimpleName: strb(670)", "Delete SimpleName: StringBuilder(671)", "Delete SimpleType: StringBuilder(672)", "Delete ClassInstanceCreation(673)", "Delete VariableDeclarationFragment(674)", "Delete VariableDeclarationStatement(675)", "Delete SimpleName: asString(676)", "Delete SimpleName: strb(677)", "Delete MethodInvocation(678)", "Delete ExpressionStatement(679)", "Delete SimpleName: source(680)", "Delete ThisExpression(681)", "Delete InfixExpression: !=(682)", "Delete SimpleName: strb(683)", "Delete SimpleName: append(684)", "Delete StringLiteral: \" /*= \"(685)", "Delete MethodInvocation(686)", "Delete ExpressionStatement(687)", "Delete SimpleName: strb(688)", "Delete SimpleName: append(689)", "Delete SimpleName: source(690)", "Delete SimpleName: toString(691)", "Delete MethodInvocation(692)", "Delete MethodInvocation(693)", "Delete ExpressionStatement(694)", "Delete SimpleName: strb(695)", "Delete SimpleName: append(696)", "Delete StringLiteral: \" */\"(697)", "Delete MethodInvocation(698)", "Delete ExpressionStatement(699)", "Delete Block(700)", "Delete IfStatement(701)", "Delete SimpleName: strb(702)", "Delete SimpleName: toString(703)", "Delete MethodInvocation(704)", "Delete ReturnStatement(705)", "Delete Block(706)", "Delete MethodDeclaration(707)", "Delete TextElement: Generates this expression's string representation.(708)", "Delete TagElement(709)", "Delete TextElement:  the string representation(710)", "Delete TagElement: @return(711)", "Delete Javadoc(712)", "Delete Modifier: public(713)", "Delete SimpleName: String(714)", "Delete SimpleType: String(715)", "Delete SimpleName: asString(716)", "Delete SimpleName: StringBuilder(717)", "Delete SimpleType: StringBuilder(718)", "Delete SimpleName: strb(719)", "Delete SimpleName: StringBuilder(720)", "Delete SimpleType: StringBuilder(721)", "Delete ClassInstanceCreation(722)", "Delete VariableDeclarationFragment(723)", "Delete VariableDeclarationStatement(724)", "Delete SimpleName: asString(725)", "Delete SimpleName: strb(726)", "Delete MethodInvocation(727)", "Delete ExpressionStatement(728)", "Delete SimpleName: strb(729)", "Delete SimpleName: toString(730)", "Delete MethodInvocation(731)", "Delete ReturnStatement(732)", "Delete Block(733)", "Delete MethodDeclaration(734)", "Delete TextElement: Adds this expression's string representation to a StringBuilder.(735)", "Delete TagElement(736)", "Delete SimpleName: strb(737)", "Delete TextElement:  the builder to fill(738)", "Delete TagElement: @param(739)", "Delete TextElement:  the builder argument(740)", "Delete TagElement: @return(741)", "Delete Javadoc(742)", "Delete Modifier: public(743)", "Delete Modifier: abstract(744)", "Delete SimpleName: StringBuilder(745)", "Delete SimpleType: StringBuilder(746)", "Delete SimpleName: asString(747)", "Delete SimpleName: StringBuilder(748)", "Delete SimpleType: StringBuilder(749)", "Delete SimpleName: strb(750)", "Delete SingleVariableDeclaration(751)", "Delete MethodDeclaration(752)", "Delete TextElement: Gets the list of variables accessed by this expression.(753)", "Delete TextElement: <p>This method will visit all nodes of the sub-expressions and extract all variables whether they(754)", "Delete TextElement: are written in 'dot' or 'bracketed' notation. (a.b is equivalent to a['b']).</p>(755)", "Delete TagElement(756)", "Delete TextElement:  the set of variables, each as a list of strings (ant-ish variables use more than 1 string)(757)", "Delete TextElement: or the empty set if no variables are used(758)", "Delete TagElement: @return(759)", "Delete Javadoc(760)", "Delete Modifier: public(761)", "Delete SimpleName: Set(762)", "Delete SimpleType: Set(763)", "Delete SimpleName: List(764)", "Delete SimpleType: List(765)", "Delete SimpleName: String(766)", "Delete SimpleType: String(767)", "Delete ParameterizedType: List<String>(768)", "Delete ParameterizedType: Set<List<String>>(769)", "Delete SimpleName: getVariables(770)", "Delete SimpleName: Collections(771)", "Delete SimpleName: emptySet(772)", "Delete MethodInvocation(773)", "Delete ReturnStatement(774)", "Delete Block(775)", "Delete MethodDeclaration(776)", "Delete TextElement: Fills up the list of variables accessed by this expression.(777)", "Delete TagElement(778)", "Delete SimpleName: refs(779)", "Delete TextElement:  the set of variable being filled(780)", "Delete TagElement: @param(781)", "Delete Javadoc(782)", "Delete Modifier: protected(783)", "Delete PrimitiveType: void(784)", "Delete SimpleName: getVariables(785)", "Delete SimpleName: Set(786)", "Delete SimpleType: Set(787)", "Delete SimpleName: List(788)", "Delete SimpleType: List(789)", "Delete SimpleName: String(790)", "Delete SimpleType: String(791)", "Delete ParameterizedType: List<String>(792)", "Delete ParameterizedType: Set<List<String>>(793)", "Delete SimpleName: refs(794)", "Delete SingleVariableDeclaration(795)", "Delete Block(796)", "Delete MethodDeclaration(797)", "Delete TextElement: Evaluates the immediate sub-expressions.(798)", "Delete TextElement: <p>(799)", "Delete TextElement: When the expression is dependant upon immediate and deferred sub-expressions,(800)", "Delete TextElement: evaluates the immediate sub-expressions with the context passed as parameter(801)", "Delete TextElement: and returns this expression deferred form.(802)", "Delete TextElement: </p>(803)", "Delete TextElement: <p>(804)", "Delete TextElement: In effect, this binds the result of the immediate sub-expressions evaluation in the(805)", "Delete TextElement: context, allowing to differ evaluation of the remaining (deferred) expression within another context.(806)", "Delete TextElement: This only has an effect to nested & composite expressions that contain differed & immediate sub-expressions.(807)", "Delete TextElement: </p>(808)", "Delete TextElement: <p>(809)", "Delete TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as warning.(810)", "Delete TextElement: </p>(811)", "Delete TagElement(812)", "Delete SimpleName: context(813)", "Delete TextElement:  the context to use for immediate expression evaluations(814)", "Delete TagElement: @param(815)", "Delete TextElement:  an expression or null if an error occurs and the (816)", "Delete SimpleName: JexlEngine(817)", "Delete TagElement: @link(818)", "Delete TextElement:  is running in silent mode(819)", "Delete TagElement: @return(820)", "Delete QualifiedName: UnifiedJEXL.Exception(821)", "Delete TextElement:  if an error occurs and the (822)", "Delete SimpleName: JexlEngine(823)", "Delete TagElement: @link(824)", "Delete TextElement:  is not in silent mode(825)", "Delete TagElement: @throws(826)", "Delete Javadoc(827)", "Delete Modifier: public(828)", "Delete Modifier: final(829)", "Delete SimpleName: Expression(830)", "Delete SimpleType: Expression(831)", "Delete SimpleName: prepare(832)", "Delete SimpleName: JexlContext(833)", "Delete SimpleType: JexlContext(834)", "Delete SimpleName: context(835)", "Delete SingleVariableDeclaration(836)", "Delete SimpleName: Interpreter(837)", "Delete SimpleType: Interpreter(838)", "Delete SimpleName: interpreter(839)", "Delete SimpleName: Interpreter(840)", "Delete SimpleType: Interpreter(841)", "Delete SimpleName: jexl(842)", "Delete SimpleName: context(843)", "Delete SimpleName: jexl(844)", "Delete SimpleName: isLenient(845)", "Delete MethodInvocation(846)", "Delete PrefixExpression: !(847)", "Delete SimpleName: jexl(848)", "Delete SimpleName: isSilent(849)", "Delete MethodInvocation(850)", "Delete ClassInstanceCreation(851)", "Delete VariableDeclarationFragment(852)", "Delete VariableDeclarationStatement(853)", "Delete SimpleName: context(854)", "Delete SimpleName: TemplateContext(855)", "Delete SimpleType: TemplateContext(856)", "Delete InstanceofExpression(857)", "Delete SimpleName: interpreter(858)", "Delete SimpleName: setFrame(859)", "Delete SimpleName: TemplateContext(860)", "Delete SimpleType: TemplateContext(861)", "Delete SimpleName: context(862)", "Delete CastExpression(863)", "Delete ParenthesizedExpression(864)", "Delete SimpleName: getFrame(865)", "Delete MethodInvocation(866)", "Delete MethodInvocation(867)", "Delete ExpressionStatement(868)", "Delete Block(869)", "Delete IfStatement(870)", "Delete SimpleName: prepare(871)", "Delete SimpleName: interpreter(872)", "Delete MethodInvocation(873)", "Delete ReturnStatement(874)", "Delete Block(875)", "Delete SimpleName: JexlException(876)", "Delete SimpleType: JexlException(877)", "Delete SimpleName: xjexl(878)", "Delete SingleVariableDeclaration(879)", "Delete SimpleName: Exception(880)", "Delete SimpleType: Exception(881)", "Delete SimpleName: xuel(882)", "Delete SimpleName: createException(883)", "Delete StringLiteral: \"prepare\"(884)", "Delete ThisExpression(885)", "Delete SimpleName: xjexl(886)", "Delete MethodInvocation(887)", "Delete VariableDeclarationFragment(888)", "Delete VariableDeclarationStatement(889)", "Delete SimpleName: jexl(890)", "Delete SimpleName: isSilent(891)", "Delete MethodInvocation(892)", "Delete QualifiedName: jexl.logger(893)", "Delete SimpleName: warn(894)", "Delete SimpleName: xuel(895)", "Delete SimpleName: getMessage(896)", "Delete MethodInvocation(897)", "Delete SimpleName: xuel(898)", "Delete SimpleName: getCause(899)", "Delete MethodInvocation(900)", "Delete MethodInvocation(901)", "Delete ExpressionStatement(902)", "Delete NullLiteral(903)", "Delete ReturnStatement(904)", "Delete Block(905)", "Delete IfStatement(906)", "Delete SimpleName: xuel(907)", "Delete ThrowStatement(908)", "Delete Block(909)", "Delete CatchClause(910)", "Delete TryStatement(911)", "Delete Block(912)", "Delete MethodDeclaration(913)", "Delete TextElement: Evaluates this expression.(914)", "Delete TextElement: <p>(915)", "Delete TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as warning.(916)", "Delete TextElement: </p>(917)", "Delete TagElement(918)", "Delete SimpleName: context(919)", "Delete TextElement:  the variable context(920)", "Delete TagElement: @param(921)", "Delete TextElement:  the result of this expression evaluation or null if an error occurs and the (922)", "Delete SimpleName: JexlEngine(923)", "Delete TagElement: @link(924)", "Delete TextElement:  is(925)", "Delete TextElement: running in silent mode(926)", "Delete TagElement: @return(927)", "Delete QualifiedName: UnifiedJEXL.Exception(928)", "Delete TextElement:  if an error occurs and the (929)", "Delete SimpleName: JexlEngine(930)", "Delete TagElement: @link(931)", "Delete TextElement:  is not silent(932)", "Delete TagElement: @throws(933)", "Delete Javadoc(934)", "Delete Modifier: public(935)", "Delete Modifier: final(936)", "Delete SimpleName: Object(937)", "Delete SimpleType: Object(938)", "Delete SimpleName: evaluate(939)", "Delete SimpleName: JexlContext(940)", "Delete SimpleType: JexlContext(941)", "Delete SimpleName: context(942)", "Delete SingleVariableDeclaration(943)", "Delete SimpleName: Interpreter(944)", "Delete SimpleType: Interpreter(945)", "Delete SimpleName: interpreter(946)", "Delete SimpleName: Interpreter(947)", "Delete SimpleType: Interpreter(948)", "Delete SimpleName: jexl(949)", "Delete SimpleName: context(950)", "Delete SimpleName: jexl(951)", "Delete SimpleName: isLenient(952)", "Delete MethodInvocation(953)", "Delete PrefixExpression: !(954)", "Delete SimpleName: jexl(955)", "Delete SimpleName: isSilent(956)", "Delete MethodInvocation(957)", "Delete ClassInstanceCreation(958)", "Delete VariableDeclarationFragment(959)", "Delete VariableDeclarationStatement(960)", "Delete SimpleName: context(961)", "Delete SimpleName: TemplateContext(962)", "Delete SimpleType: TemplateContext(963)", "Delete InstanceofExpression(964)", "Delete SimpleName: interpreter(965)", "Delete SimpleName: setFrame(966)", "Delete SimpleName: TemplateContext(967)", "Delete SimpleType: TemplateContext(968)", "Delete SimpleName: context(969)", "Delete CastExpression(970)", "Delete ParenthesizedExpression(971)", "Delete SimpleName: getFrame(972)", "Delete MethodInvocation(973)", "Delete MethodInvocation(974)", "Delete ExpressionStatement(975)", "Delete Block(976)", "Delete IfStatement(977)", "Delete SimpleName: evaluate(978)", "Delete SimpleName: interpreter(979)", "Delete MethodInvocation(980)", "Delete ReturnStatement(981)", "Delete Block(982)", "Delete SimpleName: JexlException(983)", "Delete SimpleType: JexlException(984)", "Delete SimpleName: xjexl(985)", "Delete SingleVariableDeclaration(986)", "Delete SimpleName: Exception(987)", "Delete SimpleType: Exception(988)", "Delete SimpleName: xuel(989)", "Delete SimpleName: createException(990)", "Delete StringLiteral: \"prepare\"(991)", "Delete ThisExpression(992)", "Delete SimpleName: xjexl(993)", "Delete MethodInvocation(994)", "Delete VariableDeclarationFragment(995)", "Delete VariableDeclarationStatement(996)", "Delete SimpleName: jexl(997)", "Delete SimpleName: isSilent(998)", "Delete MethodInvocation(999)", "Delete QualifiedName: jexl.logger(1000)", "Delete SimpleName: warn(1001)", "Delete SimpleName: xuel(1002)", "Delete SimpleName: getMessage(1003)", "Delete MethodInvocation(1004)", "Delete SimpleName: xuel(1005)", "Delete SimpleName: getCause(1006)", "Delete MethodInvocation(1007)", "Delete MethodInvocation(1008)", "Delete ExpressionStatement(1009)", "Delete NullLiteral(1010)", "Delete ReturnStatement(1011)", "Delete Block(1012)", "Delete IfStatement(1013)", "Delete SimpleName: xuel(1014)", "Delete ThrowStatement(1015)", "Delete Block(1016)", "Delete CatchClause(1017)", "Delete TryStatement(1018)", "Delete Block(1019)", "Delete MethodDeclaration(1020)", "Delete TextElement: Retrieves this expression's source expression.(1021)", "Delete TextElement: If this expression was prepared, this allows to retrieve the(1022)", "Delete TextElement: original expression that lead to it.(1023)", "Delete TextElement: Other expressions return themselves.(1024)", "Delete TagElement(1025)", "Delete TextElement:  the source expression(1026)", "Delete TagElement: @return(1027)", "Delete Javadoc(1028)", "Delete Modifier: public(1029)", "Delete Modifier: final(1030)", "Delete SimpleName: Expression(1031)", "Delete SimpleType: Expression(1032)", "Delete SimpleName: getSource(1033)", "Delete SimpleName: source(1034)", "Delete ReturnStatement(1035)", "Delete Block(1036)", "Delete MethodDeclaration(1037)", "Delete TextElement: Prepares a sub-expression for interpretation.(1038)", "Delete TagElement(1039)", "Delete SimpleName: interpreter(1040)", "Delete TextElement:  a JEXL interpreter(1041)", "Delete TagElement: @param(1042)", "Delete TextElement:  a prepared expression(1043)", "Delete TagElement: @return(1044)", "Delete SimpleName: JexlException(1045)", "Delete TextElement:  (only for nested & composite)(1046)", "Delete TagElement: @throws(1047)", "Delete Javadoc(1048)", "Delete Modifier: protected(1049)", "Delete SimpleName: Expression(1050)", "Delete SimpleType: Expression(1051)", "Delete SimpleName: prepare(1052)", "Delete SimpleName: Interpreter(1053)", "Delete SimpleType: Interpreter(1054)", "Delete SimpleName: interpreter(1055)", "Delete SingleVariableDeclaration(1056)", "Delete ThisExpression(1057)", "Delete ReturnStatement(1058)", "Delete Block(1059)", "Delete MethodDeclaration(1060)", "Delete TextElement: Intreprets a sub-expression.(1061)", "Delete TagElement(1062)", "Delete SimpleName: interpreter(1063)", "Delete TextElement:  a JEXL interpreter(1064)", "Delete TagElement: @param(1065)", "Delete TextElement:  the result of interpretation(1066)", "Delete TagElement: @return(1067)", "Delete SimpleName: JexlException(1068)", "Delete TextElement:  (only for nested & composite)(1069)", "Delete TagElement: @throws(1070)", "Delete Javadoc(1071)", "Delete Modifier: protected(1072)", "Delete Modifier: abstract(1073)", "Delete SimpleName: Object(1074)", "Delete SimpleType: Object(1075)", "Delete SimpleName: evaluate(1076)", "Delete SimpleName: Interpreter(1077)", "Delete SimpleType: Interpreter(1078)", "Delete SimpleName: interpreter(1079)", "Delete SingleVariableDeclaration(1080)", "Delete MethodDeclaration(1081)", "Delete TypeDeclaration: class(1082)", "Delete TextElement: A constant expression. (1083)", "Delete TagElement(1084)", "Delete Javadoc(1085)", "Delete Modifier: private(1086)", "Delete SimpleName: ConstantExpression(1087)", "Delete SimpleName: Expression(1088)", "Delete SimpleType: Expression(1089)", "Delete TextElement: The constant held by this expression. (1090)", "Delete TagElement(1091)", "Delete Javadoc(1092)", "Delete Modifier: private(1093)", "Delete Modifier: final(1094)", "Delete SimpleName: Object(1095)", "Delete SimpleType: Object(1096)", "Delete SimpleName: value(1097)", "Delete VariableDeclarationFragment(1098)", "Delete FieldDeclaration(1099)", "Delete TextElement: Creates a constant expression.(1100)", "Delete TextElement: <p>(1101)", "Delete TextElement: If the wrapped constant is a string, it is treated(1102)", "Delete TextElement: as a JEXL strings with respect to escaping.(1103)", "Delete TextElement: </p>(1104)", "Delete TagElement(1105)", "Delete SimpleName: val(1106)", "Delete TextElement:  the constant value(1107)", "Delete TagElement: @param(1108)", "Delete SimpleName: source(1109)", "Delete TextElement:  the source expression if any(1110)", "Delete TagElement: @param(1111)", "Delete Javadoc(1112)", "Delete SimpleName: ConstantExpression(1113)", "Delete SimpleName: Object(1114)", "Delete SimpleType: Object(1115)", "Delete SimpleName: val(1116)", "Delete SingleVariableDeclaration(1117)", "Delete SimpleName: Expression(1118)", "Delete SimpleType: Expression(1119)", "Delete SimpleName: source(1120)", "Delete SingleVariableDeclaration(1121)", "Delete SimpleName: source(1122)", "Delete SuperConstructorInvocation(1123)", "Delete SimpleName: val(1124)", "Delete NullLiteral(1125)", "Delete InfixExpression: ==(1126)", "Delete SimpleName: NullPointerException(1127)", "Delete SimpleType: NullPointerException(1128)", "Delete StringLiteral: \"constant can not be null\"(1129)", "Delete ClassInstanceCreation(1130)", "Delete ThrowStatement(1131)", "Delete Block(1132)", "Delete IfStatement(1133)", "Delete SimpleName: val(1134)", "Delete SimpleName: String(1135)", "Delete SimpleType: String(1136)", "Delete InstanceofExpression(1137)", "Delete SimpleName: val(1138)", "Delete SimpleName: StringParser(1139)", "Delete SimpleName: buildString(1140)", "Delete SimpleName: String(1141)", "Delete SimpleType: String(1142)", "Delete SimpleName: val(1143)", "Delete CastExpression(1144)", "Delete BooleanLiteral: false(1145)", "Delete MethodInvocation(1146)", "Delete Assignment: =(1147)", "Delete ExpressionStatement(1148)", "Delete Block(1149)", "Delete IfStatement(1150)", "Delete ThisExpression(1151)", "Delete SimpleName: value(1152)", "Delete FieldAccess(1153)", "Delete SimpleName: val(1154)", "Delete Assignment: =(1155)", "Delete ExpressionStatement(1156)", "Delete Block(1157)", "Delete MethodDeclaration(1158)", "Delete TagElement: @inheritDoc(1159)", "Delete TextElement:  (1160)", "Delete TagElement(1161)", "Delete Javadoc(1162)", "Delete SimpleName: Override(1163)", "Delete MarkerAnnotation(1164)", "Delete SimpleName: ExpressionType(1165)", "Delete SimpleType: ExpressionType(1166)", "Delete SimpleName: getType(1167)", "Delete QualifiedName: ExpressionType.CONSTANT(1168)", "Delete ReturnStatement(1169)", "Delete Block(1170)", "Delete MethodDeclaration(1171)", "Delete TagElement: @inheritDoc(1172)", "Delete TextElement:  (1173)", "Delete TagElement(1174)", "Delete Javadoc(1175)", "Delete SimpleName: Override(1176)", "Delete MarkerAnnotation(1177)", "Delete Modifier: public(1178)", "Delete SimpleName: StringBuilder(1179)", "Delete SimpleType: StringBuilder(1180)", "Delete SimpleName: asString(1181)", "Delete SimpleName: StringBuilder(1182)", "Delete SimpleType: StringBuilder(1183)", "Delete SimpleName: strb(1184)", "Delete SingleVariableDeclaration(1185)", "Delete SimpleName: value(1186)", "Delete NullLiteral(1187)", "Delete InfixExpression: !=(1188)", "Delete SimpleName: strb(1189)", "Delete SimpleName: append(1190)", "Delete SimpleName: value(1191)", "Delete SimpleName: toString(1192)", "Delete MethodInvocation(1193)", "Delete MethodInvocation(1194)", "Delete ExpressionStatement(1195)", "Delete Block(1196)", "Delete IfStatement(1197)", "Delete SimpleName: strb(1198)", "Delete ReturnStatement(1199)", "Delete Block(1200)", "Delete MethodDeclaration(1201)", "Delete TagElement: @inheritDoc(1202)", "Delete TextElement:  (1203)", "Delete TagElement(1204)", "Delete Javadoc(1205)", "Delete SimpleName: Override(1206)", "Delete MarkerAnnotation(1207)", "Delete Modifier: protected(1208)", "Delete SimpleName: Object(1209)", "Delete SimpleType: Object(1210)", "Delete SimpleName: evaluate(1211)", "Delete SimpleName: Interpreter(1212)", "Delete SimpleType: Interpreter(1213)", "Delete SimpleName: interpreter(1214)", "Delete SingleVariableDeclaration(1215)", "Delete SimpleName: value(1216)", "Delete ReturnStatement(1217)", "Delete Block(1218)", "Delete MethodDeclaration(1219)", "Delete TypeDeclaration: class(1220)", "Delete TextElement: The base for Jexl based expressions. (1221)", "Delete TagElement(1222)", "Delete Javadoc(1223)", "Delete Modifier: private(1224)", "Delete Modifier: abstract(1225)", "Delete SimpleName: JexlBasedExpression(1226)", "Delete SimpleName: Expression(1227)", "Delete SimpleType: Expression(1228)", "Delete TextElement: The JEXL string for this expression. (1229)", "Delete TagElement(1230)", "Delete Javadoc(1231)", "Delete Modifier: protected(1232)", "Delete Modifier: final(1233)", "Delete SimpleName: CharSequence(1234)", "Delete SimpleType: CharSequence(1235)", "Delete SimpleName: expr(1236)", "Delete VariableDeclarationFragment(1237)", "Delete FieldDeclaration(1238)", "Delete TextElement: The JEXL node for this expression. (1239)", "Delete TagElement(1240)", "Delete Javadoc(1241)", "Delete Modifier: protected(1242)", "Delete Modifier: final(1243)", "Delete SimpleName: JexlNode(1244)", "Delete SimpleType: JexlNode(1245)", "Delete SimpleName: node(1246)", "Delete VariableDeclarationFragment(1247)", "Delete FieldDeclaration(1248)", "Delete TextElement: Creates a JEXL interpretable expression.(1249)", "Delete TagElement(1250)", "Delete SimpleName: theExpr(1251)", "Delete TextElement:  the expression as a string(1252)", "Delete TagElement: @param(1253)", "Delete SimpleName: theNode(1254)", "Delete TextElement:  the expression as an AST(1255)", "Delete TagElement: @param(1256)", "Delete SimpleName: theSource(1257)", "Delete TextElement:  the source expression if any(1258)", "Delete TagElement: @param(1259)", "Delete Javadoc(1260)", "Delete Modifier: protected(1261)", "Delete SimpleName: JexlBasedExpression(1262)", "Delete SimpleName: CharSequence(1263)", "Delete SimpleType: CharSequence(1264)", "Delete SimpleName: theExpr(1265)", "Delete SingleVariableDeclaration(1266)", "Delete SimpleName: JexlNode(1267)", "Delete SimpleType: JexlNode(1268)", "Delete SimpleName: theNode(1269)", "Delete SingleVariableDeclaration(1270)", "Delete SimpleName: Expression(1271)", "Delete SimpleType: Expression(1272)", "Delete SimpleName: theSource(1273)", "Delete SingleVariableDeclaration(1274)", "Delete SimpleName: theSource(1275)", "Delete SuperConstructorInvocation(1276)", "Delete ThisExpression(1277)", "Delete SimpleName: expr(1278)", "Delete FieldAccess(1279)", "Delete SimpleName: theExpr(1280)", "Delete Assignment: =(1281)", "Delete ExpressionStatement(1282)", "Delete ThisExpression(1283)", "Delete SimpleName: node(1284)", "Delete FieldAccess(1285)", "Delete SimpleName: theNode(1286)", "Delete Assignment: =(1287)", "Delete ExpressionStatement(1288)", "Delete Block(1289)", "Delete MethodDeclaration(1290)", "Delete TagElement: @inheritDoc(1291)", "Delete TextElement:  (1292)", "Delete TagElement(1293)", "Delete Javadoc(1294)", "Delete SimpleName: Override(1295)", "Delete MarkerAnnotation(1296)", "Delete Modifier: public(1297)", "Delete SimpleName: StringBuilder(1298)", "Delete SimpleType: StringBuilder(1299)", "Delete SimpleName: asString(1300)", "Delete SimpleName: StringBuilder(1301)", "Delete SimpleType: StringBuilder(1302)", "Delete SimpleName: strb(1303)", "Delete SingleVariableDeclaration(1304)", "Delete SimpleName: strb(1305)", "Delete SimpleName: append(1306)", "Delete SimpleName: isImmediate(1307)", "Delete MethodInvocation(1308)", "Delete SimpleName: IMM_CHAR(1309)", "Delete SimpleName: DEF_CHAR(1310)", "Delete ConditionalExpression(1311)", "Delete MethodInvocation(1312)", "Delete ExpressionStatement(1313)", "Delete SimpleName: strb(1314)", "Delete SimpleName: append(1315)", "Delete StringLiteral: \"{\"(1316)", "Delete MethodInvocation(1317)", "Delete ExpressionStatement(1318)", "Delete SimpleName: strb(1319)", "Delete SimpleName: append(1320)", "Delete SimpleName: expr(1321)", "Delete MethodInvocation(1322)", "Delete ExpressionStatement(1323)", "Delete SimpleName: strb(1324)", "Delete SimpleName: append(1325)", "Delete StringLiteral: \"}\"(1326)", "Delete MethodInvocation(1327)", "Delete ExpressionStatement(1328)", "Delete SimpleName: strb(1329)", "Delete ReturnStatement(1330)", "Delete Block(1331)", "Delete MethodDeclaration(1332)", "Delete TagElement: @inheritDoc(1333)", "Delete TextElement:  (1334)", "Delete TagElement(1335)", "Delete Javadoc(1336)", "Delete SimpleName: Override(1337)", "Delete MarkerAnnotation(1338)", "Delete Modifier: protected(1339)", "Delete SimpleName: Object(1340)", "Delete SimpleType: Object(1341)", "Delete SimpleName: evaluate(1342)", "Delete SimpleName: Interpreter(1343)", "Delete SimpleType: Interpreter(1344)", "Delete SimpleName: interpreter(1345)", "Delete SingleVariableDeclaration(1346)", "Delete SimpleName: interpreter(1347)", "Delete SimpleName: interpret(1348)", "Delete SimpleName: node(1349)", "Delete MethodInvocation(1350)", "Delete ReturnStatement(1351)", "Delete Block(1352)", "Delete MethodDeclaration(1353)", "Delete TagElement: @inheritDoc(1354)", "Delete TextElement:  (1355)", "Delete TagElement(1356)", "Delete Javadoc(1357)", "Delete SimpleName: Override(1358)", "Delete MarkerAnnotation(1359)", "Delete Modifier: public(1360)", "Delete SimpleName: Set(1361)", "Delete SimpleType: Set(1362)", "Delete SimpleName: List(1363)", "Delete SimpleType: List(1364)", "Delete SimpleName: String(1365)", "Delete SimpleType: String(1366)", "Delete ParameterizedType: List<String>(1367)", "Delete ParameterizedType: Set<List<String>>(1368)", "Delete SimpleName: getVariables(1369)", "Delete SimpleName: Set(1370)", "Delete SimpleType: Set(1371)", "Delete SimpleName: List(1372)", "Delete SimpleType: List(1373)", "Delete SimpleName: String(1374)", "Delete SimpleType: String(1375)", "Delete ParameterizedType: List<String>(1376)", "Delete ParameterizedType: Set<List<String>>(1377)", "Delete SimpleName: refs(1378)", "Delete SimpleName: LinkedHashSet(1379)", "Delete SimpleType: LinkedHashSet(1380)", "Delete SimpleName: List(1381)", "Delete SimpleType: List(1382)", "Delete SimpleName: String(1383)", "Delete SimpleType: String(1384)", "Delete ParameterizedType: List<String>(1385)", "Delete ParameterizedType: LinkedHashSet<List<String>>(1386)", "Delete ClassInstanceCreation(1387)", "Delete VariableDeclarationFragment(1388)", "Delete VariableDeclarationStatement(1389)", "Delete SimpleName: getVariables(1390)", "Delete SimpleName: refs(1391)", "Delete MethodInvocation(1392)", "Delete ExpressionStatement(1393)", "Delete SimpleName: refs(1394)", "Delete ReturnStatement(1395)", "Delete Block(1396)", "Delete MethodDeclaration(1397)", "Delete TagElement: @inheritDoc(1398)", "Delete TextElement:  (1399)", "Delete TagElement(1400)", "Delete Javadoc(1401)", "Delete SimpleName: Override(1402)", "Delete MarkerAnnotation(1403)", "Delete Modifier: protected(1404)", "Delete PrimitiveType: void(1405)", "Delete SimpleName: getVariables(1406)", "Delete SimpleName: Set(1407)", "Delete SimpleType: Set(1408)", "Delete SimpleName: List(1409)", "Delete SimpleType: List(1410)", "Delete SimpleName: String(1411)", "Delete SimpleType: String(1412)", "Delete ParameterizedType: List<String>(1413)", "Delete ParameterizedType: Set<List<String>>(1414)", "Delete SimpleName: refs(1415)", "Delete SingleVariableDeclaration(1416)", "Delete SimpleName: jexl(1417)", "Delete SimpleName: getVariables(1418)", "Delete SimpleName: node(1419)", "Delete SimpleName: refs(1420)", "Delete NullLiteral(1421)", "Delete MethodInvocation(1422)", "Delete ExpressionStatement(1423)", "Delete Block(1424)", "Delete MethodDeclaration(1425)", "Delete TypeDeclaration: class(1426)", "Delete TextElement: An immediate expression: ${jexl}. (1427)", "Delete TagElement(1428)", "Delete Javadoc(1429)", "Delete Modifier: private(1430)", "Delete SimpleName: ImmediateExpression(1431)", "Delete SimpleName: JexlBasedExpression(1432)", "Delete SimpleType: JexlBasedExpression(1433)", "Delete TextElement: Creates an immediate expression.(1434)", "Delete TagElement(1435)", "Delete SimpleName: expr(1436)", "Delete TextElement:  the expression as a string(1437)", "Delete TagElement: @param(1438)", "Delete SimpleName: node(1439)", "Delete TextElement:  the expression as an AST(1440)", "Delete TagElement: @param(1441)", "Delete SimpleName: source(1442)", "Delete TextElement:  the source expression if any(1443)", "Delete TagElement: @param(1444)", "Delete Javadoc(1445)", "Delete SimpleName: ImmediateExpression(1446)", "Delete SimpleName: CharSequence(1447)", "Delete SimpleType: CharSequence(1448)", "Delete SimpleName: expr(1449)", "Delete SingleVariableDeclaration(1450)", "Delete SimpleName: JexlNode(1451)", "Delete SimpleType: JexlNode(1452)", "Delete SimpleName: node(1453)", "Delete SingleVariableDeclaration(1454)", "Delete SimpleName: Expression(1455)", "Delete SimpleType: Expression(1456)", "Delete SimpleName: source(1457)", "Delete SingleVariableDeclaration(1458)", "Delete SimpleName: expr(1459)", "Delete SimpleName: node(1460)", "Delete SimpleName: source(1461)", "Delete SuperConstructorInvocation(1462)", "Delete Block(1463)", "Delete MethodDeclaration(1464)", "Delete TagElement: @inheritDoc(1465)", "Delete TextElement:  (1466)", "Delete TagElement(1467)", "Delete Javadoc(1468)", "Delete SimpleName: Override(1469)", "Delete MarkerAnnotation(1470)", "Delete SimpleName: ExpressionType(1471)", "Delete SimpleType: ExpressionType(1472)", "Delete SimpleName: getType(1473)", "Delete QualifiedName: ExpressionType.IMMEDIATE(1474)", "Delete ReturnStatement(1475)", "Delete Block(1476)", "Delete MethodDeclaration(1477)", "Delete TagElement: @inheritDoc(1478)", "Delete TextElement:  (1479)", "Delete TagElement(1480)", "Delete Javadoc(1481)", "Delete SimpleName: Override(1482)", "Delete MarkerAnnotation(1483)", "Delete Modifier: protected(1484)", "Delete SimpleName: Expression(1485)", "Delete SimpleType: Expression(1486)", "Delete SimpleName: prepare(1487)", "Delete SimpleName: Interpreter(1488)", "Delete SimpleType: Interpreter(1489)", "Delete SimpleName: interpreter(1490)", "Delete SingleVariableDeclaration(1491)", "Delete SimpleName: Object(1492)", "Delete SimpleType: Object(1493)", "Delete SimpleName: value(1494)", "Delete SimpleName: evaluate(1495)", "Delete SimpleName: interpreter(1496)", "Delete MethodInvocation(1497)", "Delete VariableDeclarationFragment(1498)", "Delete VariableDeclarationStatement(1499)", "Delete SimpleName: value(1500)", "Delete NullLiteral(1501)", "Delete InfixExpression: !=(1502)", "Delete SimpleName: ConstantExpression(1503)", "Delete SimpleType: ConstantExpression(1504)", "Delete SimpleName: value(1505)", "Delete SimpleName: source(1506)", "Delete ClassInstanceCreation(1507)", "Delete NullLiteral(1508)", "Delete ConditionalExpression(1509)", "Delete ReturnStatement(1510)", "Delete Block(1511)", "Delete MethodDeclaration(1512)", "Delete TypeDeclaration: class(1513)", "Delete TextElement: A deferred expression: #{jexl}. (1514)", "Delete TagElement(1515)", "Delete Javadoc(1516)", "Delete Modifier: private(1517)", "Delete SimpleName: DeferredExpression(1518)", "Delete SimpleName: JexlBasedExpression(1519)", "Delete SimpleType: JexlBasedExpression(1520)", "Delete TextElement: Creates a deferred expression.(1521)", "Delete TagElement(1522)", "Delete SimpleName: expr(1523)", "Delete TextElement:  the expression as a string(1524)", "Delete TagElement: @param(1525)", "Delete SimpleName: node(1526)", "Delete TextElement:  the expression as an AST(1527)", "Delete TagElement: @param(1528)", "Delete SimpleName: source(1529)", "Delete TextElement:  the source expression if any(1530)", "Delete TagElement: @param(1531)", "Delete Javadoc(1532)", "Delete SimpleName: DeferredExpression(1533)", "Delete SimpleName: CharSequence(1534)", "Delete SimpleType: CharSequence(1535)", "Delete SimpleName: expr(1536)", "Delete SingleVariableDeclaration(1537)", "Delete SimpleName: JexlNode(1538)", "Delete SimpleType: JexlNode(1539)", "Delete SimpleName: node(1540)", "Delete SingleVariableDeclaration(1541)", "Delete SimpleName: Expression(1542)", "Delete SimpleType: Expression(1543)", "Delete SimpleName: source(1544)", "Delete SingleVariableDeclaration(1545)", "Delete SimpleName: expr(1546)", "Delete SimpleName: node(1547)", "Delete SimpleName: source(1548)", "Delete SuperConstructorInvocation(1549)", "Delete Block(1550)", "Delete MethodDeclaration(1551)", "Delete TagElement: @inheritDoc(1552)", "Delete TextElement:  (1553)", "Delete TagElement(1554)", "Delete Javadoc(1555)", "Delete SimpleName: Override(1556)", "Delete MarkerAnnotation(1557)", "Delete Modifier: public(1558)", "Delete PrimitiveType: boolean(1559)", "Delete SimpleName: isImmediate(1560)", "Delete BooleanLiteral: false(1561)", "Delete ReturnStatement(1562)", "Delete Block(1563)", "Delete MethodDeclaration(1564)", "Delete TagElement: @inheritDoc(1565)", "Delete TextElement:  (1566)", "Delete TagElement(1567)", "Delete Javadoc(1568)", "Delete SimpleName: Override(1569)", "Delete MarkerAnnotation(1570)", "Delete SimpleName: ExpressionType(1571)", "Delete SimpleType: ExpressionType(1572)", "Delete SimpleName: getType(1573)", "Delete QualifiedName: ExpressionType.DEFERRED(1574)", "Delete ReturnStatement(1575)", "Delete Block(1576)", "Delete MethodDeclaration(1577)", "Delete TagElement: @inheritDoc(1578)", "Delete TextElement:  (1579)", "Delete TagElement(1580)", "Delete Javadoc(1581)", "Delete SimpleName: Override(1582)", "Delete MarkerAnnotation(1583)", "Delete Modifier: protected(1584)", "Delete SimpleName: Expression(1585)", "Delete SimpleType: Expression(1586)", "Delete SimpleName: prepare(1587)", "Delete SimpleName: Interpreter(1588)", "Delete SimpleType: Interpreter(1589)", "Delete SimpleName: interpreter(1590)", "Delete SingleVariableDeclaration(1591)", "Delete SimpleName: ImmediateExpression(1592)", "Delete SimpleType: ImmediateExpression(1593)", "Delete SimpleName: expr(1594)", "Delete SimpleName: node(1595)", "Delete SimpleName: source(1596)", "Delete ClassInstanceCreation(1597)", "Delete ReturnStatement(1598)", "Delete Block(1599)", "Delete MethodDeclaration(1600)", "Delete TagElement: @inheritDoc(1601)", "Delete TextElement:  (1602)", "Delete TagElement(1603)", "Delete Javadoc(1604)", "Delete SimpleName: Override(1605)", "Delete MarkerAnnotation(1606)", "Delete Modifier: protected(1607)", "Delete PrimitiveType: void(1608)", "Delete SimpleName: getVariables(1609)", "Delete SimpleName: Set(1610)", "Delete SimpleType: Set(1611)", "Delete SimpleName: List(1612)", "Delete SimpleType: List(1613)", "Delete SimpleName: String(1614)", "Delete SimpleType: String(1615)", "Delete ParameterizedType: List<String>(1616)", "Delete ParameterizedType: Set<List<String>>(1617)", "Delete SimpleName: refs(1618)", "Delete SingleVariableDeclaration(1619)", "Delete Block(1620)", "Delete MethodDeclaration(1621)", "Delete TypeDeclaration: class(1622)", "Delete TextElement: An immediate expression nested into a deferred expression.(1623)", "Delete TextElement: #{...${jexl}...}(1624)", "Delete TextElement: Note that the deferred syntax is JEXL's, not UnifiedJEXL.(1625)", "Delete TagElement(1626)", "Delete Javadoc(1627)", "Delete Modifier: private(1628)", "Delete SimpleName: NestedExpression(1629)", "Delete SimpleName: JexlBasedExpression(1630)", "Delete SimpleType: JexlBasedExpression(1631)", "Delete TextElement: Creates a nested expression.(1632)", "Delete TagElement(1633)", "Delete SimpleName: expr(1634)", "Delete TextElement:  the expression as a string(1635)", "Delete TagElement: @param(1636)", "Delete SimpleName: node(1637)", "Delete TextElement:  the expression as an AST(1638)", "Delete TagElement: @param(1639)", "Delete SimpleName: source(1640)", "Delete TextElement:  the source expression if any(1641)", "Delete TagElement: @param(1642)", "Delete Javadoc(1643)", "Delete SimpleName: NestedExpression(1644)", "Delete SimpleName: CharSequence(1645)", "Delete SimpleType: CharSequence(1646)", "Delete SimpleName: expr(1647)", "Delete SingleVariableDeclaration(1648)", "Delete SimpleName: JexlNode(1649)", "Delete SimpleType: JexlNode(1650)", "Delete SimpleName: node(1651)", "Delete SingleVariableDeclaration(1652)", "Delete SimpleName: Expression(1653)", "Delete SimpleType: Expression(1654)", "Delete SimpleName: source(1655)", "Delete SingleVariableDeclaration(1656)", "Delete SimpleName: expr(1657)", "Delete SimpleName: node(1658)", "Delete SimpleName: source(1659)", "Delete SuperConstructorInvocation(1660)", "Delete ThisExpression(1661)", "Delete SimpleName: source(1662)", "Delete FieldAccess(1663)", "Delete ThisExpression(1664)", "Delete InfixExpression: !=(1665)", "Delete SimpleName: IllegalArgumentException(1666)", "Delete SimpleType: IllegalArgumentException(1667)", "Delete StringLiteral: \"Nested expression can not have a source\"(1668)", "Delete ClassInstanceCreation(1669)", "Delete ThrowStatement(1670)", "Delete Block(1671)", "Delete IfStatement(1672)", "Delete Block(1673)", "Delete MethodDeclaration(1674)", "Delete SimpleName: Override(1675)", "Delete MarkerAnnotation(1676)", "Delete Modifier: public(1677)", "Delete SimpleName: StringBuilder(1678)", "Delete SimpleType: StringBuilder(1679)", "Delete SimpleName: asString(1680)", "Delete SimpleName: StringBuilder(1681)", "Delete SimpleType: StringBuilder(1682)", "Delete SimpleName: strb(1683)", "Delete SingleVariableDeclaration(1684)", "Delete SimpleName: strb(1685)", "Delete SimpleName: append(1686)", "Delete SimpleName: expr(1687)", "Delete MethodInvocation(1688)", "Delete ExpressionStatement(1689)", "Delete SimpleName: strb(1690)", "Delete ReturnStatement(1691)", "Delete Block(1692)", "Delete MethodDeclaration(1693)", "Delete TagElement: @inheritDoc(1694)", "Delete TextElement:  (1695)", "Delete TagElement(1696)", "Delete Javadoc(1697)", "Delete SimpleName: Override(1698)", "Delete MarkerAnnotation(1699)", "Delete Modifier: public(1700)", "Delete PrimitiveType: boolean(1701)", "Delete SimpleName: isImmediate(1702)", "Delete BooleanLiteral: false(1703)", "Delete ReturnStatement(1704)", "Delete Block(1705)", "Delete MethodDeclaration(1706)", "Delete TagElement: @inheritDoc(1707)", "Delete TextElement:  (1708)", "Delete TagElement(1709)", "Delete Javadoc(1710)", "Delete SimpleName: Override(1711)", "Delete MarkerAnnotation(1712)", "Delete SimpleName: ExpressionType(1713)", "Delete SimpleType: ExpressionType(1714)", "Delete SimpleName: getType(1715)", "Delete QualifiedName: ExpressionType.NESTED(1716)", "Delete ReturnStatement(1717)", "Delete Block(1718)", "Delete MethodDeclaration(1719)", "Delete TagElement: @inheritDoc(1720)", "Delete TextElement:  (1721)", "Delete TagElement(1722)", "Delete Javadoc(1723)", "Delete SimpleName: Override(1724)", "Delete MarkerAnnotation(1725)", "Delete Modifier: protected(1726)", "Delete SimpleName: Expression(1727)", "Delete SimpleType: Expression(1728)", "Delete SimpleName: prepare(1729)", "Delete SimpleName: Interpreter(1730)", "Delete SimpleType: Interpreter(1731)", "Delete SimpleName: interpreter(1732)", "Delete SingleVariableDeclaration(1733)", "Delete SimpleName: String(1734)", "Delete SimpleType: String(1735)", "Delete SimpleName: value(1736)", "Delete SimpleName: interpreter(1737)", "Delete SimpleName: interpret(1738)", "Delete SimpleName: node(1739)", "Delete MethodInvocation(1740)", "Delete SimpleName: toString(1741)", "Delete MethodInvocation(1742)", "Delete VariableDeclarationFragment(1743)", "Delete VariableDeclarationStatement(1744)", "Delete SimpleName: JexlNode(1745)", "Delete SimpleType: JexlNode(1746)", "Delete SimpleName: dnode(1747)", "Delete SimpleName: jexl(1748)", "Delete SimpleName: parse(1749)", "Delete SimpleName: value(1750)", "Delete SimpleName: jexl(1751)", "Delete SimpleName: isDebug(1752)", "Delete MethodInvocation(1753)", "Delete SimpleName: node(1754)", "Delete SimpleName: debugInfo(1755)", "Delete MethodInvocation(1756)", "Delete NullLiteral(1757)", "Delete ConditionalExpression(1758)", "Delete NullLiteral(1759)", "Delete MethodInvocation(1760)", "Delete VariableDeclarationFragment(1761)", "Delete VariableDeclarationStatement(1762)", "Delete SimpleName: ImmediateExpression(1763)", "Delete SimpleType: ImmediateExpression(1764)", "Delete SimpleName: value(1765)", "Delete SimpleName: dnode(1766)", "Delete ThisExpression(1767)", "Delete ClassInstanceCreation(1768)", "Delete ReturnStatement(1769)", "Delete Block(1770)", "Delete MethodDeclaration(1771)", "Delete TagElement: @inheritDoc(1772)", "Delete TextElement:  (1773)", "Delete TagElement(1774)", "Delete Javadoc(1775)", "Delete SimpleName: Override(1776)", "Delete MarkerAnnotation(1777)", "Delete Modifier: protected(1778)", "Delete SimpleName: Object(1779)", "Delete SimpleType: Object(1780)", "Delete SimpleName: evaluate(1781)", "Delete SimpleName: Interpreter(1782)", "Delete SimpleType: Interpreter(1783)", "Delete SimpleName: interpreter(1784)", "Delete SingleVariableDeclaration(1785)", "Delete SimpleName: prepare(1786)", "Delete SimpleName: interpreter(1787)", "Delete MethodInvocation(1788)", "Delete SimpleName: evaluate(1789)", "Delete SimpleName: interpreter(1790)", "Delete MethodInvocation(1791)", "Delete ReturnStatement(1792)", "Delete Block(1793)", "Delete MethodDeclaration(1794)", "Delete TypeDeclaration: class(1795)", "Delete TextElement: A composite expression: \"... ${...} ... #{...} ...\". (1796)", "Delete TagElement(1797)", "Delete Javadoc(1798)", "Delete Modifier: private(1799)", "Delete SimpleName: CompositeExpression(1800)", "Delete SimpleName: Expression(1801)", "Delete SimpleType: Expression(1802)", "Delete TextElement: Bit encoded (deferred count > 0) bit 1, (immediate count > 0) bit 0. (1803)", "Delete TagElement(1804)", "Delete Javadoc(1805)", "Delete Modifier: private(1806)", "Delete Modifier: final(1807)", "Delete PrimitiveType: int(1808)", "Delete SimpleName: meta(1809)", "Delete VariableDeclarationFragment(1810)", "Delete FieldDeclaration(1811)", "Delete TextElement: The list of sub-expression resulting from parsing. (1812)", "Delete TagElement(1813)", "Delete Javadoc(1814)", "Delete Modifier: protected(1815)", "Delete Modifier: final(1816)", "Delete SimpleName: Expression(1817)", "Delete SimpleType: Expression(1818)", "Delete Dimension(1819)", "Delete ArrayType: Expression[](1820)", "Delete SimpleName: exprs(1821)", "Delete VariableDeclarationFragment(1822)", "Delete FieldDeclaration(1823)", "Delete TextElement: Creates a composite expression.(1824)", "Delete TagElement(1825)", "Delete SimpleName: counters(1826)", "Delete TextElement:  counters of expression per type(1827)", "Delete TagElement: @param(1828)", "Delete SimpleName: list(1829)", "Delete TextElement:  the sub-expressions(1830)", "Delete TagElement: @param(1831)", "Delete SimpleName: src(1832)", "Delete TextElement:  the source for this expresion if any(1833)", "Delete TagElement: @param(1834)", "Delete Javadoc(1835)", "Delete SimpleName: CompositeExpression(1836)", "Delete PrimitiveType: int(1837)", "Delete Dimension(1838)", "Delete ArrayType: int[](1839)", "Delete SimpleName: counters(1840)", "Delete SingleVariableDeclaration(1841)", "Delete SimpleName: ArrayList(1842)", "Delete SimpleType: ArrayList(1843)", "Delete SimpleName: Expression(1844)", "Delete SimpleType: Expression(1845)", "Delete ParameterizedType: ArrayList<Expression>(1846)", "Delete SimpleName: list(1847)", "Delete SingleVariableDeclaration(1848)", "Delete SimpleName: Expression(1849)", "Delete SimpleType: Expression(1850)", "Delete SimpleName: src(1851)", "Delete SingleVariableDeclaration(1852)", "Delete SimpleName: src(1853)", "Delete SuperConstructorInvocation(1854)", "Delete ThisExpression(1855)", "Delete SimpleName: exprs(1856)", "Delete FieldAccess(1857)", "Delete SimpleName: list(1858)", "Delete SimpleName: toArray(1859)", "Delete SimpleName: Expression(1860)", "Delete SimpleType: Expression(1861)", "Delete Dimension(1862)", "Delete ArrayType: Expression[](1863)", "Delete SimpleName: list(1864)", "Delete SimpleName: size(1865)", "Delete MethodInvocation(1866)", "Delete ArrayCreation(1867)", "Delete MethodInvocation(1868)", "Delete Assignment: =(1869)", "Delete ExpressionStatement(1870)", "Delete ThisExpression(1871)", "Delete SimpleName: meta(1872)", "Delete FieldAccess(1873)", "Delete SimpleName: counters(1874)", "Delete QualifiedName: ExpressionType.DEFERRED.index(1875)", "Delete ArrayAccess(1876)", "Delete NumberLiteral: 0(1877)", "Delete InfixExpression: >(1878)", "Delete NumberLiteral: 2(1879)", "Delete NumberLiteral: 0(1880)", "Delete ConditionalExpression(1881)", "Delete ParenthesizedExpression(1882)", "Delete SimpleName: counters(1883)", "Delete QualifiedName: ExpressionType.IMMEDIATE.index(1884)", "Delete ArrayAccess(1885)", "Delete NumberLiteral: 0(1886)", "Delete InfixExpression: >(1887)", "Delete NumberLiteral: 1(1888)", "Delete NumberLiteral: 0(1889)", "Delete ConditionalExpression(1890)", "Delete ParenthesizedExpression(1891)", "Delete InfixExpression: |(1892)", "Delete Assignment: =(1893)", "Delete ExpressionStatement(1894)", "Delete Block(1895)", "Delete MethodDeclaration(1896)", "Delete TagElement: @inheritDoc(1897)", "Delete TextElement:  (1898)", "Delete TagElement(1899)", "Delete Javadoc(1900)", "Delete SimpleName: Override(1901)", "Delete MarkerAnnotation(1902)", "Delete Modifier: public(1903)", "Delete PrimitiveType: boolean(1904)", "Delete SimpleName: isImmediate(1905)", "Delete SimpleName: meta(1906)", "Delete NumberLiteral: 2(1907)", "Delete InfixExpression: &(1908)", "Delete ParenthesizedExpression(1909)", "Delete NumberLiteral: 0(1910)", "Delete InfixExpression: ==(1911)", "Delete ReturnStatement(1912)", "Delete Block(1913)", "Delete MethodDeclaration(1914)", "Delete TagElement: @inheritDoc(1915)", "Delete TextElement:  (1916)", "Delete TagElement(1917)", "Delete Javadoc(1918)", "Delete SimpleName: Override(1919)", "Delete MarkerAnnotation(1920)", "Delete SimpleName: ExpressionType(1921)", "Delete SimpleType: ExpressionType(1922)", "Delete SimpleName: getType(1923)", "Delete QualifiedName: ExpressionType.COMPOSITE(1924)", "Delete ReturnStatement(1925)", "Delete Block(1926)", "Delete MethodDeclaration(1927)", "Delete TagElement: @inheritDoc(1928)", "Delete TextElement:  (1929)", "Delete TagElement(1930)", "Delete Javadoc(1931)", "Delete SimpleName: Override(1932)", "Delete MarkerAnnotation(1933)", "Delete Modifier: public(1934)", "Delete SimpleName: StringBuilder(1935)", "Delete SimpleType: StringBuilder(1936)", "Delete SimpleName: asString(1937)", "Delete SimpleName: StringBuilder(1938)", "Delete SimpleType: StringBuilder(1939)", "Delete SimpleName: strb(1940)", "Delete SingleVariableDeclaration(1941)", "Delete SimpleName: Expression(1942)", "Delete SimpleType: Expression(1943)", "Delete SimpleName: e(1944)", "Delete SingleVariableDeclaration(1945)", "Delete SimpleName: exprs(1946)", "Delete SimpleName: e(1947)", "Delete SimpleName: asString(1948)", "Delete SimpleName: strb(1949)", "Delete MethodInvocation(1950)", "Delete ExpressionStatement(1951)", "Delete Block(1952)", "Delete EnhancedForStatement(1953)", "Delete SimpleName: strb(1954)", "Delete ReturnStatement(1955)", "Delete Block(1956)", "Delete MethodDeclaration(1957)", "Delete TagElement: @inheritDoc(1958)", "Delete TextElement:  (1959)", "Delete TagElement(1960)", "Delete Javadoc(1961)", "Delete SimpleName: Override(1962)", "Delete MarkerAnnotation(1963)", "Delete Modifier: public(1964)", "Delete SimpleName: Set(1965)", "Delete SimpleType: Set(1966)", "Delete SimpleName: List(1967)", "Delete SimpleType: List(1968)", "Delete SimpleName: String(1969)", "Delete SimpleType: String(1970)", "Delete ParameterizedType: List<String>(1971)", "Delete ParameterizedType: Set<List<String>>(1972)", "Delete SimpleName: getVariables(1973)", "Delete SimpleName: Set(1974)", "Delete SimpleType: Set(1975)", "Delete SimpleName: List(1976)", "Delete SimpleType: List(1977)", "Delete SimpleName: String(1978)", "Delete SimpleType: String(1979)", "Delete ParameterizedType: List<String>(1980)", "Delete ParameterizedType: Set<List<String>>(1981)", "Delete SimpleName: refs(1982)", "Delete SimpleName: LinkedHashSet(1983)", "Delete SimpleType: LinkedHashSet(1984)", "Delete SimpleName: List(1985)", "Delete SimpleType: List(1986)", "Delete SimpleName: String(1987)", "Delete SimpleType: String(1988)", "Delete ParameterizedType: List<String>(1989)", "Delete ParameterizedType: LinkedHashSet<List<String>>(1990)", "Delete ClassInstanceCreation(1991)", "Delete VariableDeclarationFragment(1992)", "Delete VariableDeclarationStatement(1993)", "Delete SimpleName: Expression(1994)", "Delete SimpleType: Expression(1995)", "Delete SimpleName: expr(1996)", "Delete SingleVariableDeclaration(1997)", "Delete SimpleName: exprs(1998)", "Delete SimpleName: expr(1999)", "Delete SimpleName: getVariables(2000)", "Delete SimpleName: refs(2001)", "Delete MethodInvocation(2002)", "Delete ExpressionStatement(2003)", "Delete Block(2004)", "Delete EnhancedForStatement(2005)", "Delete SimpleName: refs(2006)", "Delete ReturnStatement(2007)", "Delete Block(2008)", "Delete MethodDeclaration(2009)", "Delete TagElement: @inheritDoc(2010)", "Delete TextElement:  (2011)", "Delete TagElement(2012)", "Delete Javadoc(2013)", "Delete SimpleName: Override(2014)", "Delete MarkerAnnotation(2015)", "Delete Modifier: protected(2016)", "Delete SimpleName: Expression(2017)", "Delete SimpleType: Expression(2018)", "Delete SimpleName: prepare(2019)", "Delete SimpleName: Interpreter(2020)", "Delete SimpleType: Interpreter(2021)", "Delete SimpleName: interpreter(2022)", "Delete SingleVariableDeclaration(2023)", "Delete SimpleName: source(2024)", "Delete ThisExpression(2025)", "Delete InfixExpression: !=(2026)", "Delete ThisExpression(2027)", "Delete ReturnStatement(2028)", "Delete Block(2029)", "Delete IfStatement(2030)", "Delete Modifier: final(2031)", "Delete PrimitiveType: int(2032)", "Delete SimpleName: size(2033)", "Delete QualifiedName: exprs.length(2034)", "Delete VariableDeclarationFragment(2035)", "Delete VariableDeclarationStatement(2036)", "Delete Modifier: final(2037)", "Delete SimpleName: ExpressionBuilder(2038)", "Delete SimpleType: ExpressionBuilder(2039)", "Delete SimpleName: builder(2040)", "Delete SimpleName: ExpressionBuilder(2041)", "Delete SimpleType: ExpressionBuilder(2042)", "Delete SimpleName: size(2043)", "Delete ClassInstanceCreation(2044)", "Delete VariableDeclarationFragment(2045)", "Delete VariableDeclarationStatement(2046)", "Delete PrimitiveType: boolean(2047)", "Delete SimpleName: eq(2048)", "Delete BooleanLiteral: true(2049)", "Delete VariableDeclarationFragment(2050)", "Delete VariableDeclarationStatement(2051)", "Delete PrimitiveType: int(2052)", "Delete SimpleName: e(2053)", "Delete NumberLiteral: 0(2054)", "Delete VariableDeclarationFragment(2055)", "Delete VariableDeclarationExpression(2056)", "Delete SimpleName: e(2057)", "Delete SimpleName: size(2058)", "Delete InfixExpression: <(2059)", "Delete SimpleName: e(2060)", "Delete PrefixExpression: ++(2061)", "Delete SimpleName: Expression(2062)", "Delete SimpleType: Expression(2063)", "Delete SimpleName: expr(2064)", "Delete SimpleName: exprs(2065)", "Delete SimpleName: e(2066)", "Delete ArrayAccess(2067)", "Delete VariableDeclarationFragment(2068)", "Delete VariableDeclarationStatement(2069)", "Delete SimpleName: Expression(2070)", "Delete SimpleType: Expression(2071)", "Delete SimpleName: prepared(2072)", "Delete SimpleName: expr(2073)", "Delete SimpleName: prepare(2074)", "Delete SimpleName: interpreter(2075)", "Delete MethodInvocation(2076)", "Delete VariableDeclarationFragment(2077)", "Delete VariableDeclarationStatement(2078)", "Delete SimpleName: prepared(2079)", "Delete NullLiteral(2080)", "Delete InfixExpression: !=(2081)", "Delete SimpleName: builder(2082)", "Delete SimpleName: add(2083)", "Delete SimpleName: prepared(2084)", "Delete MethodInvocation(2085)", "Delete ExpressionStatement(2086)", "Delete Block(2087)", "Delete IfStatement(2088)", "Delete SimpleName: eq(2089)", "Delete SimpleName: expr(2090)", "Delete SimpleName: prepared(2091)", "Delete InfixExpression: ==(2092)", "Delete Assignment: &=(2093)", "Delete ExpressionStatement(2094)", "Delete Block(2095)", "Delete ForStatement(2096)", "Delete SimpleName: Expression(2097)", "Delete SimpleType: Expression(2098)", "Delete SimpleName: ready(2099)", "Delete SimpleName: eq(2100)", "Delete ThisExpression(2101)", "Delete SimpleName: builder(2102)", "Delete SimpleName: build(2103)", "Delete SimpleName: UnifiedJEXL(2104)", "Delete ThisExpression(2105)", "Delete ThisExpression(2106)", "Delete MethodInvocation(2107)", "Delete ConditionalExpression(2108)", "Delete VariableDeclarationFragment(2109)", "Delete VariableDeclarationStatement(2110)", "Delete SimpleName: ready(2111)", "Delete ReturnStatement(2112)", "Delete Block(2113)", "Delete MethodDeclaration(2114)", "Delete TagElement: @inheritDoc(2115)", "Delete TextElement:  (2116)", "Delete TagElement(2117)", "Delete Javadoc(2118)", "Delete SimpleName: Override(2119)", "Delete MarkerAnnotation(2120)", "Delete Modifier: protected(2121)", "Delete SimpleName: Object(2122)", "Delete SimpleType: Object(2123)", "Delete SimpleName: evaluate(2124)", "Delete SimpleName: Interpreter(2125)", "Delete SimpleType: Interpreter(2126)", "Delete SimpleName: interpreter(2127)", "Delete SingleVariableDeclaration(2128)", "Delete Modifier: final(2129)", "Delete PrimitiveType: int(2130)", "Delete SimpleName: size(2131)", "Delete QualifiedName: exprs.length(2132)", "Delete VariableDeclarationFragment(2133)", "Delete VariableDeclarationStatement(2134)", "Delete SimpleName: Object(2135)", "Delete SimpleType: Object(2136)", "Delete SimpleName: value(2137)", "Delete NullLiteral(2138)", "Delete VariableDeclarationFragment(2139)", "Delete VariableDeclarationStatement(2140)", "Delete SimpleName: StringBuilder(2141)", "Delete SimpleType: StringBuilder(2142)", "Delete SimpleName: strb(2143)", "Delete SimpleName: StringBuilder(2144)", "Delete SimpleType: StringBuilder(2145)", "Delete ClassInstanceCreation(2146)", "Delete VariableDeclarationFragment(2147)", "Delete VariableDeclarationStatement(2148)", "Delete PrimitiveType: int(2149)", "Delete SimpleName: e(2150)", "Delete NumberLiteral: 0(2151)", "Delete VariableDeclarationFragment(2152)", "Delete VariableDeclarationExpression(2153)", "Delete SimpleName: e(2154)", "Delete SimpleName: size(2155)", "Delete InfixExpression: <(2156)", "Delete SimpleName: e(2157)", "Delete PrefixExpression: ++(2158)", "Delete SimpleName: value(2159)", "Delete SimpleName: exprs(2160)", "Delete SimpleName: e(2161)", "Delete ArrayAccess(2162)", "Delete SimpleName: evaluate(2163)", "Delete SimpleName: interpreter(2164)", "Delete MethodInvocation(2165)", "Delete Assignment: =(2166)", "Delete ExpressionStatement(2167)", "Delete SimpleName: value(2168)", "Delete NullLiteral(2169)", "Delete InfixExpression: !=(2170)", "Delete SimpleName: strb(2171)", "Delete SimpleName: append(2172)", "Delete SimpleName: value(2173)", "Delete SimpleName: toString(2174)", "Delete MethodInvocation(2175)", "Delete MethodInvocation(2176)", "Delete ExpressionStatement(2177)", "Delete Block(2178)", "Delete IfStatement(2179)", "Delete Block(2180)", "Delete ForStatement(2181)", "Delete SimpleName: value(2182)", "Delete SimpleName: strb(2183)", "Delete SimpleName: toString(2184)", "Delete MethodInvocation(2185)", "Delete Assignment: =(2186)", "Delete ExpressionStatement(2187)", "Delete SimpleName: value(2188)", "Delete ReturnStatement(2189)", "Delete Block(2190)", "Delete MethodDeclaration(2191)", "Delete TypeDeclaration: class(2192)", "Delete TextElement: Creates a a (2193)", "Delete QualifiedName: UnifiedJEXL.Expression(2194)", "Delete TagElement: @link(2195)", "Delete TextElement:  from an expression string.(2196)", "Delete TextElement: Uses & fills up the expression cache if any.(2197)", "Delete TextElement: <p>(2198)", "Delete TextElement: If the underlying JEXL engine is silent, errors will be logged through its logger as warnings.(2199)", "Delete TextElement: </p>(2200)", "Delete TagElement(2201)", "Delete SimpleName: expression(2202)", "Delete TextElement:  the UnifiedJEXL string expression(2203)", "Delete TagElement: @param(2204)", "Delete TextElement:  the UnifiedJEXL object expression, null if silent and an error occured(2205)", "Delete TagElement: @return(2206)", "Delete QualifiedName: UnifiedJEXL.Exception(2207)", "Delete TextElement:  if an error occurs and the (2208)", "Delete SimpleName: JexlEngine(2209)", "Delete TagElement: @link(2210)", "Delete TextElement:  is not silent(2211)", "Delete TagElement: @throws(2212)", "Delete Javadoc(2213)", "Delete Modifier: public(2214)", "Delete SimpleName: Expression(2215)", "Delete SimpleType: Expression(2216)", "Delete SimpleName: parse(2217)", "Delete SimpleName: String(2218)", "Delete SimpleType: String(2219)", "Delete SimpleName: expression(2220)", "Delete SingleVariableDeclaration(2221)", "Delete SimpleName: Exception(2222)", "Delete SimpleType: Exception(2223)", "Delete SimpleName: xuel(2224)", "Delete NullLiteral(2225)", "Delete VariableDeclarationFragment(2226)", "Delete VariableDeclarationStatement(2227)", "Delete SimpleName: Expression(2228)", "Delete SimpleType: Expression(2229)", "Delete SimpleName: stmt(2230)", "Delete NullLiteral(2231)", "Delete VariableDeclarationFragment(2232)", "Delete VariableDeclarationStatement(2233)", "Delete SimpleName: cache(2234)", "Delete NullLiteral(2235)", "Delete InfixExpression: ==(2236)", "Delete SimpleName: stmt(2237)", "Delete SimpleName: parseExpression(2238)", "Delete SimpleName: expression(2239)", "Delete NullLiteral(2240)", "Delete MethodInvocation(2241)", "Delete Assignment: =(2242)", "Delete ExpressionStatement(2243)", "Delete Block(2244)", "Delete SimpleName: cache(2245)", "Delete SimpleName: stmt(2246)", "Delete SimpleName: cache(2247)", "Delete SimpleName: get(2248)", "Delete SimpleName: expression(2249)", "Delete MethodInvocation(2250)", "Delete Assignment: =(2251)", "Delete ExpressionStatement(2252)", "Delete SimpleName: stmt(2253)", "Delete NullLiteral(2254)", "Delete InfixExpression: ==(2255)", "Delete SimpleName: stmt(2256)", "Delete SimpleName: parseExpression(2257)", "Delete SimpleName: expression(2258)", "Delete NullLiteral(2259)", "Delete MethodInvocation(2260)", "Delete Assignment: =(2261)", "Delete ExpressionStatement(2262)", "Delete SimpleName: cache(2263)", "Delete SimpleName: put(2264)", "Delete SimpleName: expression(2265)", "Delete SimpleName: stmt(2266)", "Delete MethodInvocation(2267)", "Delete ExpressionStatement(2268)", "Delete Block(2269)", "Delete IfStatement(2270)", "Delete Block(2271)", "Delete SynchronizedStatement(2272)", "Delete Block(2273)", "Delete IfStatement(2274)", "Delete Block(2275)", "Delete SimpleName: JexlException(2276)", "Delete SimpleType: JexlException(2277)", "Delete SimpleName: xjexl(2278)", "Delete SingleVariableDeclaration(2279)", "Delete SimpleName: xuel(2280)", "Delete SimpleName: Exception(2281)", "Delete SimpleType: Exception(2282)", "Delete StringLiteral: \"failed to parse '\"(2283)", "Delete SimpleName: expression(2284)", "Delete StringLiteral: \"'\"(2285)", "Delete InfixExpression: +(2286)", "Delete SimpleName: xjexl(2287)", "Delete ClassInstanceCreation(2288)", "Delete Assignment: =(2289)", "Delete ExpressionStatement(2290)", "Delete Block(2291)", "Delete CatchClause(2292)", "Delete SimpleName: Exception(2293)", "Delete SimpleType: Exception(2294)", "Delete SimpleName: xany(2295)", "Delete SingleVariableDeclaration(2296)", "Delete SimpleName: xuel(2297)", "Delete SimpleName: xany(2298)", "Delete Assignment: =(2299)", "Delete ExpressionStatement(2300)", "Delete Block(2301)", "Delete CatchClause(2302)", "Delete SimpleName: xuel(2303)", "Delete NullLiteral(2304)", "Delete InfixExpression: !=(2305)", "Delete SimpleName: jexl(2306)", "Delete SimpleName: isSilent(2307)", "Delete MethodInvocation(2308)", "Delete QualifiedName: jexl.logger(2309)", "Delete SimpleName: warn(2310)", "Delete SimpleName: xuel(2311)", "Delete SimpleName: getMessage(2312)", "Delete MethodInvocation(2313)", "Delete SimpleName: xuel(2314)", "Delete SimpleName: getCause(2315)", "Delete MethodInvocation(2316)", "Delete MethodInvocation(2317)", "Delete ExpressionStatement(2318)", "Delete NullLiteral(2319)", "Delete ReturnStatement(2320)", "Delete Block(2321)", "Delete IfStatement(2322)", "Delete SimpleName: xuel(2323)", "Delete ThrowStatement(2324)", "Delete Block(2325)", "Delete IfStatement(2326)", "Delete Block(2327)", "Delete TryStatement(2328)", "Delete SimpleName: stmt(2329)", "Delete ReturnStatement(2330)", "Delete Block(2331)", "Delete MethodDeclaration(2332)", "Delete TextElement: Creates a UnifiedJEXL.Exception from a JexlException.(2333)", "Delete TagElement(2334)", "Delete SimpleName: action(2335)", "Delete TextElement:  parse, prepare, evaluate(2336)", "Delete TagElement: @param(2337)", "Delete SimpleName: expr(2338)", "Delete TextElement:  the expression(2339)", "Delete TagElement: @param(2340)", "Delete SimpleName: xany(2341)", "Delete TextElement:  the exception(2342)", "Delete TagElement: @param(2343)", "Delete TextElement:  an exception containing an explicit error message(2344)", "Delete TagElement: @return(2345)", "Delete Javadoc(2346)", "Delete Modifier: private(2347)", "Delete SimpleName: Exception(2348)", "Delete SimpleType: Exception(2349)", "Delete SimpleName: createException(2350)", "Delete SimpleName: String(2351)", "Delete SimpleType: String(2352)", "Delete SimpleName: action(2353)", "Delete SingleVariableDeclaration(2354)", "Delete SimpleName: Expression(2355)", "Delete SimpleType: Expression(2356)", "Delete SimpleName: expr(2357)", "Delete SingleVariableDeclaration(2358)", "Delete QualifiedName: java.lang.Exception(2359)", "Delete SimpleType: java.lang.Exception(2360)", "Delete SimpleName: xany(2361)", "Delete SingleVariableDeclaration(2362)", "Delete SimpleName: StringBuilder(2363)", "Delete SimpleType: StringBuilder(2364)", "Delete SimpleName: strb(2365)", "Delete SimpleName: StringBuilder(2366)", "Delete SimpleType: StringBuilder(2367)", "Delete StringLiteral: \"failed to \"(2368)", "Delete ClassInstanceCreation(2369)", "Delete VariableDeclarationFragment(2370)", "Delete VariableDeclarationStatement(2371)", "Delete SimpleName: strb(2372)", "Delete SimpleName: append(2373)", "Delete SimpleName: action(2374)", "Delete MethodInvocation(2375)", "Delete ExpressionStatement(2376)", "Delete SimpleName: expr(2377)", "Delete NullLiteral(2378)", "Delete InfixExpression: !=(2379)", "Delete SimpleName: strb(2380)", "Delete SimpleName: append(2381)", "Delete StringLiteral: \" '\"(2382)", "Delete MethodInvocation(2383)", "Delete ExpressionStatement(2384)", "Delete SimpleName: strb(2385)", "Delete SimpleName: append(2386)", "Delete SimpleName: expr(2387)", "Delete SimpleName: toString(2388)", "Delete MethodInvocation(2389)", "Delete MethodInvocation(2390)", "Delete ExpressionStatement(2391)", "Delete SimpleName: strb(2392)", "Delete SimpleName: append(2393)", "Delete StringLiteral: \"'\"(2394)", "Delete MethodInvocation(2395)", "Delete ExpressionStatement(2396)", "Delete Block(2397)", "Delete IfStatement(2398)", "Delete SimpleName: Throwable(2399)", "Delete SimpleType: Throwable(2400)", "Delete SimpleName: cause(2401)", "Delete SimpleName: xany(2402)", "Delete SimpleName: getCause(2403)", "Delete MethodInvocation(2404)", "Delete VariableDeclarationFragment(2405)", "Delete VariableDeclarationStatement(2406)", "Delete SimpleName: cause(2407)", "Delete NullLiteral(2408)", "Delete InfixExpression: !=(2409)", "Delete SimpleName: String(2410)", "Delete SimpleType: String(2411)", "Delete SimpleName: causeMsg(2412)", "Delete SimpleName: cause(2413)", "Delete SimpleName: getMessage(2414)", "Delete MethodInvocation(2415)", "Delete VariableDeclarationFragment(2416)", "Delete VariableDeclarationStatement(2417)", "Delete SimpleName: causeMsg(2418)", "Delete NullLiteral(2419)", "Delete InfixExpression: !=(2420)", "Delete SimpleName: strb(2421)", "Delete SimpleName: append(2422)", "Delete StringLiteral: \", \"(2423)", "Delete MethodInvocation(2424)", "Delete ExpressionStatement(2425)", "Delete SimpleName: strb(2426)", "Delete SimpleName: append(2427)", "Delete SimpleName: causeMsg(2428)", "Delete MethodInvocation(2429)", "Delete ExpressionStatement(2430)", "Delete Block(2431)", "Delete IfStatement(2432)", "Delete Block(2433)", "Delete IfStatement(2434)", "Delete SimpleName: Exception(2435)", "Delete SimpleType: Exception(2436)", "Delete SimpleName: strb(2437)", "Delete SimpleName: toString(2438)", "Delete MethodInvocation(2439)", "Delete SimpleName: xany(2440)", "Delete ClassInstanceCreation(2441)", "Delete ReturnStatement(2442)", "Delete Block(2443)", "Delete MethodDeclaration(2444)", "Delete TextElement: The different parsing states. (2445)", "Delete TagElement(2446)", "Delete Javadoc(2447)", "Delete Modifier: private(2448)", "Delete Modifier: static(2449)", "Delete SimpleName: ParseState(2450)", "Delete TextElement: Parsing a constant. (2451)", "Delete TagElement(2452)", "Delete Javadoc(2453)", "Delete SimpleName: CONST(2454)", "Delete EnumConstantDeclaration(2455)", "Delete TextElement: Parsing after $ .(2456)", "Delete TagElement(2457)", "Delete Javadoc(2458)", "Delete SimpleName: IMMEDIATE0(2459)", "Delete EnumConstantDeclaration(2460)", "Delete TextElement: Parsing after # .(2461)", "Delete TagElement(2462)", "Delete Javadoc(2463)", "Delete SimpleName: DEFERRED0(2464)", "Delete EnumConstantDeclaration(2465)", "Delete TextElement: Parsing after ${ .(2466)", "Delete TagElement(2467)", "Delete Javadoc(2468)", "Delete SimpleName: IMMEDIATE1(2469)", "Delete EnumConstantDeclaration(2470)", "Delete TextElement: Parsing after #{ .(2471)", "Delete TagElement(2472)", "Delete Javadoc(2473)", "Delete SimpleName: DEFERRED1(2474)", "Delete EnumConstantDeclaration(2475)", "Delete TextElement: Parsing after \\ .(2476)", "Delete TagElement(2477)", "Delete Javadoc(2478)", "Delete SimpleName: ESCAPE(2479)", "Delete EnumConstantDeclaration(2480)", "Delete EnumDeclaration(2481)", "Delete TextElement: Parses a unified expression.(2482)", "Delete TagElement(2483)", "Delete SimpleName: expr(2484)", "Delete TextElement:  the string expression(2485)", "Delete TagElement: @param(2486)", "Delete SimpleName: scope(2487)", "Delete TextElement:  the expression scope(2488)", "Delete TagElement: @param(2489)", "Delete TextElement:  the expression instance(2490)", "Delete TagElement: @return(2491)", "Delete SimpleName: JexlException(2492)", "Delete TextElement:  if an error occur during parsing(2493)", "Delete TagElement: @throws(2494)", "Delete Javadoc(2495)", "Delete Modifier: private(2496)", "Delete SimpleName: Expression(2497)", "Delete SimpleType: Expression(2498)", "Delete SimpleName: parseExpression(2499)", "Delete SimpleName: String(2500)", "Delete SimpleType: String(2501)", "Delete SimpleName: expr(2502)", "Delete SingleVariableDeclaration(2503)", "Delete QualifiedName: JexlEngine.Scope(2504)", "Delete SimpleType: JexlEngine.Scope(2505)", "Delete SimpleName: scope(2506)", "Delete SingleVariableDeclaration(2507)", "Delete Modifier: final(2508)", "Delete PrimitiveType: int(2509)", "Delete SimpleName: size(2510)", "Delete SimpleName: expr(2511)", "Delete SimpleName: length(2512)", "Delete MethodInvocation(2513)", "Delete VariableDeclarationFragment(2514)", "Delete VariableDeclarationStatement(2515)", "Delete SimpleName: ExpressionBuilder(2516)", "Delete SimpleType: ExpressionBuilder(2517)", "Delete SimpleName: builder(2518)", "Delete SimpleName: ExpressionBuilder(2519)", "Delete SimpleType: ExpressionBuilder(2520)", "Delete NumberLiteral: 0(2521)", "Delete ClassInstanceCreation(2522)", "Delete VariableDeclarationFragment(2523)", "Delete VariableDeclarationStatement(2524)", "Delete SimpleName: StringBuilder(2525)", "Delete SimpleType: StringBuilder(2526)", "Delete SimpleName: strb(2527)", "Delete SimpleName: StringBuilder(2528)", "Delete SimpleType: StringBuilder(2529)", "Delete SimpleName: size(2530)", "Delete ClassInstanceCreation(2531)", "Delete VariableDeclarationFragment(2532)", "Delete VariableDeclarationStatement(2533)", "Delete SimpleName: ParseState(2534)", "Delete SimpleType: ParseState(2535)", "Delete SimpleName: state(2536)", "Delete QualifiedName: ParseState.CONST(2537)", "Delete VariableDeclarationFragment(2538)", "Delete VariableDeclarationStatement(2539)", "Delete PrimitiveType: int(2540)", "Delete SimpleName: inner(2541)", "Delete NumberLiteral: 0(2542)", "Delete VariableDeclarationFragment(2543)", "Delete VariableDeclarationStatement(2544)", "Delete PrimitiveType: boolean(2545)", "Delete SimpleName: nested(2546)", "Delete BooleanLiteral: false(2547)", "Delete VariableDeclarationFragment(2548)", "Delete VariableDeclarationStatement(2549)", "Delete PrimitiveType: int(2550)", "Delete SimpleName: inested(2551)", "Delete NumberLiteral: 1(2552)", "Delete PrefixExpression: -(2553)", "Delete VariableDeclarationFragment(2554)", "Delete VariableDeclarationStatement(2555)", "Delete PrimitiveType: int(2556)", "Delete SimpleName: i(2557)", "Delete NumberLiteral: 0(2558)", "Delete VariableDeclarationFragment(2559)", "Delete VariableDeclarationExpression(2560)", "Delete SimpleName: i(2561)", "Delete SimpleName: size(2562)", "Delete InfixExpression: <(2563)", "Delete SimpleName: i(2564)", "Delete PrefixExpression: ++(2565)", "Delete PrimitiveType: char(2566)", "Delete SimpleName: c(2567)", "Delete SimpleName: expr(2568)", "Delete SimpleName: charAt(2569)", "Delete SimpleName: i(2570)", "Delete MethodInvocation(2571)", "Delete VariableDeclarationFragment(2572)", "Delete VariableDeclarationStatement(2573)", "Delete SimpleName: state(2574)", "Delete SwitchCase(2575)", "Delete SimpleName: UnsupportedOperationException(2576)", "Delete SimpleType: UnsupportedOperationException(2577)", "Delete StringLiteral: \"unexpected expression type\"(2578)", "Delete ClassInstanceCreation(2579)", "Delete ThrowStatement(2580)", "Delete SimpleName: CONST(2581)", "Delete SwitchCase(2582)", "Delete SimpleName: c(2583)", "Delete SimpleName: IMM_CHAR(2584)", "Delete InfixExpression: ==(2585)", "Delete SimpleName: state(2586)", "Delete QualifiedName: ParseState.IMMEDIATE0(2587)", "Delete Assignment: =(2588)", "Delete ExpressionStatement(2589)", "Delete Block(2590)", "Delete SimpleName: c(2591)", "Delete SimpleName: DEF_CHAR(2592)", "Delete InfixExpression: ==(2593)", "Delete SimpleName: inested(2594)", "Delete SimpleName: i(2595)", "Delete Assignment: =(2596)", "Delete ExpressionStatement(2597)", "Delete SimpleName: state(2598)", "Delete QualifiedName: ParseState.DEFERRED0(2599)", "Delete Assignment: =(2600)", "Delete ExpressionStatement(2601)", "Delete Block(2602)", "Delete SimpleName: c(2603)", "Delete CharacterLiteral: '\\\\'(2604)", "Delete InfixExpression: ==(2605)", "Delete SimpleName: state(2606)", "Delete QualifiedName: ParseState.ESCAPE(2607)", "Delete Assignment: =(2608)", "Delete ExpressionStatement(2609)", "Delete Block(2610)", "Delete SimpleName: strb(2611)", "Delete SimpleName: append(2612)", "Delete SimpleName: c(2613)", "Delete MethodInvocation(2614)", "Delete ExpressionStatement(2615)", "Delete Block(2616)", "Delete IfStatement(2617)", "Delete IfStatement(2618)", "Delete IfStatement(2619)", "Delete BreakStatement(2620)", "Delete SimpleName: IMMEDIATE0(2621)", "Delete SwitchCase(2622)", "Delete SimpleName: c(2623)", "Delete CharacterLiteral: '{'(2624)", "Delete InfixExpression: ==(2625)", "Delete SimpleName: state(2626)", "Delete QualifiedName: ParseState.IMMEDIATE1(2627)", "Delete Assignment: =(2628)", "Delete ExpressionStatement(2629)", "Delete SimpleName: strb(2630)", "Delete SimpleName: length(2631)", "Delete MethodInvocation(2632)", "Delete NumberLiteral: 0(2633)", "Delete InfixExpression: >(2634)", "Delete SimpleName: Expression(2635)", "Delete SimpleType: Expression(2636)", "Delete SimpleName: cexpr(2637)", "Delete SimpleName: ConstantExpression(2638)", "Delete SimpleType: ConstantExpression(2639)", "Delete SimpleName: strb(2640)", "Delete SimpleName: toString(2641)", "Delete MethodInvocation(2642)", "Delete NullLiteral(2643)", "Delete ClassInstanceCreation(2644)", "Delete VariableDeclarationFragment(2645)", "Delete VariableDeclarationStatement(2646)", "Delete SimpleName: builder(2647)", "Delete SimpleName: add(2648)", "Delete SimpleName: cexpr(2649)", "Delete MethodInvocation(2650)", "Delete ExpressionStatement(2651)", "Delete SimpleName: strb(2652)", "Delete SimpleName: delete(2653)", "Delete NumberLiteral: 0(2654)", "Delete QualifiedName: Integer.MAX_VALUE(2655)", "Delete MethodInvocation(2656)", "Delete ExpressionStatement(2657)", "Delete Block(2658)", "Delete IfStatement(2659)", "Delete Block(2660)", "Delete SimpleName: strb(2661)", "Delete SimpleName: append(2662)", "Delete SimpleName: IMM_CHAR(2663)", "Delete MethodInvocation(2664)", "Delete ExpressionStatement(2665)", "Delete SimpleName: strb(2666)", "Delete SimpleName: append(2667)", "Delete SimpleName: c(2668)", "Delete MethodInvocation(2669)", "Delete ExpressionStatement(2670)", "Delete SimpleName: state(2671)", "Delete QualifiedName: ParseState.CONST(2672)", "Delete Assignment: =(2673)", "Delete ExpressionStatement(2674)", "Delete Block(2675)", "Delete IfStatement(2676)", "Delete BreakStatement(2677)", "Delete SimpleName: DEFERRED0(2678)", "Delete SwitchCase(2679)", "Delete SimpleName: c(2680)", "Delete CharacterLiteral: '{'(2681)", "Delete InfixExpression: ==(2682)", "Delete SimpleName: state(2683)", "Delete QualifiedName: ParseState.DEFERRED1(2684)", "Delete Assignment: =(2685)", "Delete ExpressionStatement(2686)", "Delete SimpleName: strb(2687)", "Delete SimpleName: length(2688)", "Delete MethodInvocation(2689)", "Delete NumberLiteral: 0(2690)", "Delete InfixExpression: >(2691)", "Delete SimpleName: Expression(2692)", "Delete SimpleType: Expression(2693)", "Delete SimpleName: cexpr(2694)", "Delete SimpleName: ConstantExpression(2695)", "Delete SimpleType: ConstantExpression(2696)", "Delete SimpleName: strb(2697)", "Delete SimpleName: toString(2698)", "Delete MethodInvocation(2699)", "Delete NullLiteral(2700)", "Delete ClassInstanceCreation(2701)", "Delete VariableDeclarationFragment(2702)", "Delete VariableDeclarationStatement(2703)", "Delete SimpleName: builder(2704)", "Delete SimpleName: add(2705)", "Delete SimpleName: cexpr(2706)", "Delete MethodInvocation(2707)", "Delete ExpressionStatement(2708)", "Delete SimpleName: strb(2709)", "Delete SimpleName: delete(2710)", "Delete NumberLiteral: 0(2711)", "Delete QualifiedName: Integer.MAX_VALUE(2712)", "Delete MethodInvocation(2713)", "Delete ExpressionStatement(2714)", "Delete Block(2715)", "Delete IfStatement(2716)", "Delete Block(2717)", "Delete SimpleName: strb(2718)", "Delete SimpleName: append(2719)", "Delete SimpleName: DEF_CHAR(2720)", "Delete MethodInvocation(2721)", "Delete ExpressionStatement(2722)", "Delete SimpleName: strb(2723)", "Delete SimpleName: append(2724)", "Delete SimpleName: c(2725)", "Delete MethodInvocation(2726)", "Delete ExpressionStatement(2727)", "Delete SimpleName: state(2728)", "Delete QualifiedName: ParseState.CONST(2729)", "Delete Assignment: =(2730)", "Delete ExpressionStatement(2731)", "Delete Block(2732)", "Delete IfStatement(2733)", "Delete BreakStatement(2734)", "Delete SimpleName: IMMEDIATE1(2735)", "Delete SwitchCase(2736)", "Delete SimpleName: c(2737)", "Delete CharacterLiteral: '}'(2738)", "Delete InfixExpression: ==(2739)", "Delete SimpleName: Expression(2740)", "Delete SimpleType: Expression(2741)", "Delete SimpleName: iexpr(2742)", "Delete SimpleName: ImmediateExpression(2743)", "Delete SimpleType: ImmediateExpression(2744)", "Delete SimpleName: strb(2745)", "Delete SimpleName: toString(2746)", "Delete MethodInvocation(2747)", "Delete SimpleName: jexl(2748)", "Delete SimpleName: parse(2749)", "Delete SimpleName: strb(2750)", "Delete NullLiteral(2751)", "Delete SimpleName: scope(2752)", "Delete MethodInvocation(2753)", "Delete NullLiteral(2754)", "Delete ClassInstanceCreation(2755)", "Delete VariableDeclarationFragment(2756)", "Delete VariableDeclarationStatement(2757)", "Delete SimpleName: builder(2758)", "Delete SimpleName: add(2759)", "Delete SimpleName: iexpr(2760)", "Delete MethodInvocation(2761)", "Delete ExpressionStatement(2762)", "Delete SimpleName: strb(2763)", "Delete SimpleName: delete(2764)", "Delete NumberLiteral: 0(2765)", "Delete QualifiedName: Integer.MAX_VALUE(2766)", "Delete MethodInvocation(2767)", "Delete ExpressionStatement(2768)", "Delete SimpleName: state(2769)", "Delete QualifiedName: ParseState.CONST(2770)", "Delete Assignment: =(2771)", "Delete ExpressionStatement(2772)", "Delete Block(2773)", "Delete SimpleName: strb(2774)", "Delete SimpleName: append(2775)", "Delete SimpleName: c(2776)", "Delete MethodInvocation(2777)", "Delete ExpressionStatement(2778)", "Delete Block(2779)", "Delete IfStatement(2780)", "Delete BreakStatement(2781)", "Delete SimpleName: DEFERRED1(2782)", "Delete SwitchCase(2783)", "Delete SimpleName: c(2784)", "Delete CharacterLiteral: '\"'(2785)", "Delete InfixExpression: ==(2786)", "Delete SimpleName: c(2787)", "Delete CharacterLiteral: '\\''(2788)", "Delete InfixExpression: ==(2789)", "Delete InfixExpression: ||(2790)", "Delete SimpleName: strb(2791)", "Delete SimpleName: append(2792)", "Delete SimpleName: c(2793)", "Delete MethodInvocation(2794)", "Delete ExpressionStatement(2795)", "Delete SimpleName: i(2796)", "Delete SimpleName: StringParser(2797)", "Delete SimpleName: readString(2798)", "Delete SimpleName: strb(2799)", "Delete SimpleName: expr(2800)", "Delete SimpleName: i(2801)", "Delete NumberLiteral: 1(2802)", "Delete InfixExpression: +(2803)", "Delete SimpleName: c(2804)", "Delete MethodInvocation(2805)", "Delete Assignment: =(2806)", "Delete ExpressionStatement(2807)", "Delete ContinueStatement(2808)", "Delete Block(2809)", "Delete IfStatement(2810)", "Delete SimpleName: c(2811)", "Delete CharacterLiteral: '{'(2812)", "Delete InfixExpression: ==(2813)", "Delete SimpleName: expr(2814)", "Delete SimpleName: charAt(2815)", "Delete SimpleName: i(2816)", "Delete NumberLiteral: 1(2817)", "Delete InfixExpression: -(2818)", "Delete MethodInvocation(2819)", "Delete SimpleName: IMM_CHAR(2820)", "Delete InfixExpression: ==(2821)", "Delete SimpleName: inner(2822)", "Delete NumberLiteral: 1(2823)", "Delete Assignment: +=(2824)", "Delete ExpressionStatement(2825)", "Delete SimpleName: strb(2826)", "Delete SimpleName: deleteCharAt(2827)", "Delete SimpleName: strb(2828)", "Delete SimpleName: length(2829)", "Delete MethodInvocation(2830)", "Delete NumberLiteral: 1(2831)", "Delete InfixExpression: -(2832)", "Delete MethodInvocation(2833)", "Delete ExpressionStatement(2834)", "Delete SimpleName: nested(2835)", "Delete BooleanLiteral: true(2836)", "Delete Assignment: =(2837)", "Delete ExpressionStatement(2838)", "Delete Block(2839)", "Delete IfStatement(2840)", "Delete ContinueStatement(2841)", "Delete Block(2842)", "Delete IfStatement(2843)", "Delete SimpleName: c(2844)", "Delete CharacterLiteral: '}'(2845)", "Delete InfixExpression: ==(2846)", "Delete SimpleName: inner(2847)", "Delete NumberLiteral: 0(2848)", "Delete InfixExpression: >(2849)", "Delete SimpleName: inner(2850)", "Delete NumberLiteral: 1(2851)", "Delete Assignment: -=(2852)", "Delete ExpressionStatement(2853)", "Delete Block(2854)", "Delete SimpleName: Expression(2855)", "Delete SimpleType: Expression(2856)", "Delete SimpleName: dexpr(2857)", "Delete NullLiteral(2858)", "Delete VariableDeclarationFragment(2859)", "Delete VariableDeclarationStatement(2860)", "Delete SimpleName: nested(2861)", "Delete SimpleName: dexpr(2862)", "Delete SimpleName: NestedExpression(2863)", "Delete SimpleType: NestedExpression(2864)", "Delete SimpleName: expr(2865)", "Delete SimpleName: substring(2866)", "Delete SimpleName: inested(2867)", "Delete SimpleName: i(2868)", "Delete NumberLiteral: 1(2869)", "Delete InfixExpression: +(2870)", "Delete MethodInvocation(2871)", "Delete SimpleName: jexl(2872)", "Delete SimpleName: parse(2873)", "Delete SimpleName: strb(2874)", "Delete NullLiteral(2875)", "Delete SimpleName: scope(2876)", "Delete MethodInvocation(2877)", "Delete NullLiteral(2878)", "Delete ClassInstanceCreation(2879)", "Delete Assignment: =(2880)", "Delete ExpressionStatement(2881)", "Delete Block(2882)", "Delete SimpleName: dexpr(2883)", "Delete SimpleName: DeferredExpression(2884)", "Delete SimpleType: DeferredExpression(2885)", "Delete SimpleName: strb(2886)", "Delete SimpleName: toString(2887)", "Delete MethodInvocation(2888)", "Delete SimpleName: jexl(2889)", "Delete SimpleName: parse(2890)", "Delete SimpleName: strb(2891)", "Delete NullLiteral(2892)", "Delete SimpleName: scope(2893)", "Delete MethodInvocation(2894)", "Delete NullLiteral(2895)", "Delete ClassInstanceCreation(2896)", "Delete Assignment: =(2897)", "Delete ExpressionStatement(2898)", "Delete Block(2899)", "Delete IfStatement(2900)", "Delete SimpleName: builder(2901)", "Delete SimpleName: add(2902)", "Delete SimpleName: dexpr(2903)", "Delete MethodInvocation(2904)", "Delete ExpressionStatement(2905)", "Delete SimpleName: strb(2906)", "Delete SimpleName: delete(2907)", "Delete NumberLiteral: 0(2908)", "Delete QualifiedName: Integer.MAX_VALUE(2909)", "Delete MethodInvocation(2910)", "Delete ExpressionStatement(2911)", "Delete SimpleName: nested(2912)", "Delete BooleanLiteral: false(2913)", "Delete Assignment: =(2914)", "Delete ExpressionStatement(2915)", "Delete SimpleName: state(2916)", "Delete QualifiedName: ParseState.CONST(2917)", "Delete Assignment: =(2918)", "Delete ExpressionStatement(2919)", "Delete Block(2920)", "Delete IfStatement(2921)", "Delete Block(2922)", "Delete SimpleName: strb(2923)", "Delete SimpleName: append(2924)", "Delete SimpleName: c(2925)", "Delete MethodInvocation(2926)", "Delete ExpressionStatement(2927)", "Delete Block(2928)", "Delete IfStatement(2929)", "Delete BreakStatement(2930)", "Delete SimpleName: ESCAPE(2931)", "Delete SwitchCase(2932)", "Delete SimpleName: c(2933)", "Delete SimpleName: DEF_CHAR(2934)", "Delete InfixExpression: ==(2935)", "Delete SimpleName: strb(2936)", "Delete SimpleName: append(2937)", "Delete SimpleName: DEF_CHAR(2938)", "Delete MethodInvocation(2939)", "Delete ExpressionStatement(2940)", "Delete Block(2941)", "Delete SimpleName: c(2942)", "Delete SimpleName: IMM_CHAR(2943)", "Delete InfixExpression: ==(2944)", "Delete SimpleName: strb(2945)", "Delete SimpleName: append(2946)", "Delete SimpleName: IMM_CHAR(2947)", "Delete MethodInvocation(2948)", "Delete ExpressionStatement(2949)", "Delete Block(2950)", "Delete SimpleName: strb(2951)", "Delete SimpleName: append(2952)", "Delete CharacterLiteral: '\\\\'(2953)", "Delete MethodInvocation(2954)", "Delete ExpressionStatement(2955)", "Delete SimpleName: strb(2956)", "Delete SimpleName: append(2957)", "Delete SimpleName: c(2958)", "Delete MethodInvocation(2959)", "Delete ExpressionStatement(2960)", "Delete Block(2961)", "Delete IfStatement(2962)", "Delete IfStatement(2963)", "Delete SimpleName: state(2964)", "Delete QualifiedName: ParseState.CONST(2965)", "Delete Assignment: =(2966)", "Delete ExpressionStatement(2967)", "Delete SwitchStatement(2968)", "Delete Block(2969)", "Delete ForStatement(2970)", "Delete SimpleName: state(2971)", "Delete QualifiedName: ParseState.CONST(2972)", "Delete InfixExpression: !=(2973)", "Delete SimpleName: Exception(2974)", "Delete SimpleType: Exception(2975)", "Delete StringLiteral: \"malformed expression: \"(2976)", "Delete SimpleName: expr(2977)", "Delete InfixExpression: +(2978)", "Delete NullLiteral(2979)", "Delete ClassInstanceCreation(2980)", "Delete ThrowStatement(2981)", "Delete Block(2982)", "Delete IfStatement(2983)", "Delete SimpleName: strb(2984)", "Delete SimpleName: length(2985)", "Delete MethodInvocation(2986)", "Delete NumberLiteral: 0(2987)", "Delete InfixExpression: >(2988)", "Delete SimpleName: Expression(2989)", "Delete SimpleType: Expression(2990)", "Delete SimpleName: cexpr(2991)", "Delete SimpleName: ConstantExpression(2992)", "Delete SimpleType: ConstantExpression(2993)", "Delete SimpleName: strb(2994)", "Delete SimpleName: toString(2995)", "Delete MethodInvocation(2996)", "Delete NullLiteral(2997)", "Delete ClassInstanceCreation(2998)", "Delete VariableDeclarationFragment(2999)", "Delete VariableDeclarationStatement(3000)", "Delete SimpleName: builder(3001)", "Delete SimpleName: add(3002)", "Delete SimpleName: cexpr(3003)", "Delete MethodInvocation(3004)", "Delete ExpressionStatement(3005)", "Delete Block(3006)", "Delete IfStatement(3007)", "Delete SimpleName: builder(3008)", "Delete SimpleName: build(3009)", "Delete ThisExpression(3010)", "Delete NullLiteral(3011)", "Delete MethodInvocation(3012)", "Delete ReturnStatement(3013)", "Delete Block(3014)", "Delete MethodDeclaration(3015)", "Delete TextElement: The enum capturing the difference between verbatim and code source fragments.(3016)", "Delete TagElement(3017)", "Delete Javadoc(3018)", "Delete Modifier: private(3019)", "Delete Modifier: static(3020)", "Delete SimpleName: BlockType(3021)", "Delete TextElement: Block is to be output \"as is\". (3022)", "Delete TagElement(3023)", "Delete Javadoc(3024)", "Delete SimpleName: VERBATIM(3025)", "Delete EnumConstantDeclaration(3026)", "Delete TextElement: Block is a directive, ie a fragment of code. (3027)", "Delete TagElement(3028)", "Delete Javadoc(3029)", "Delete SimpleName: DIRECTIVE(3030)", "Delete EnumConstantDeclaration(3031)", "Delete EnumDeclaration(3032)", "Delete TextElement: Abstract the source fragments, verbatim or immediate typed text blocks.(3033)", "Delete TagElement(3034)", "Delete TextElement:  2.1(3035)", "Delete TagElement: @since(3036)", "Delete Javadoc(3037)", "Delete Modifier: private(3038)", "Delete Modifier: static(3039)", "Delete Modifier: final(3040)", "Delete SimpleName: TemplateBlock(3041)", "Delete TextElement: The type of block, verbatim or directive. (3042)", "Delete TagElement(3043)", "Delete Javadoc(3044)", "Delete Modifier: private(3045)", "Delete Modifier: final(3046)", "Delete SimpleName: BlockType(3047)", "Delete SimpleType: BlockType(3048)", "Delete SimpleName: type(3049)", "Delete VariableDeclarationFragment(3050)", "Delete FieldDeclaration(3051)", "Delete TextElement: The actual contexnt. (3052)", "Delete TagElement(3053)", "Delete Javadoc(3054)", "Delete Modifier: private(3055)", "Delete Modifier: final(3056)", "Delete SimpleName: String(3057)", "Delete SimpleType: String(3058)", "Delete SimpleName: body(3059)", "Delete VariableDeclarationFragment(3060)", "Delete FieldDeclaration(3061)", "Delete TextElement: Creates a new block. (3062)", "Delete TagElement(3063)", "Delete SimpleName: theType(3064)", "Delete TextElement:  the type(3065)", "Delete TagElement: @param(3066)", "Delete SimpleName: theBlock(3067)", "Delete TextElement:  the content(3068)", "Delete TagElement: @param(3069)", "Delete Javadoc(3070)", "Delete SimpleName: TemplateBlock(3071)", "Delete SimpleName: BlockType(3072)", "Delete SimpleType: BlockType(3073)", "Delete SimpleName: theType(3074)", "Delete SingleVariableDeclaration(3075)", "Delete SimpleName: String(3076)", "Delete SimpleType: String(3077)", "Delete SimpleName: theBlock(3078)", "Delete SingleVariableDeclaration(3079)", "Delete SimpleName: type(3080)", "Delete SimpleName: theType(3081)", "Delete Assignment: =(3082)", "Delete ExpressionStatement(3083)", "Delete SimpleName: body(3084)", "Delete SimpleName: theBlock(3085)", "Delete Assignment: =(3086)", "Delete ExpressionStatement(3087)", "Delete Block(3088)", "Delete MethodDeclaration(3089)", "Delete SimpleName: Override(3090)", "Delete MarkerAnnotation(3091)", "Delete Modifier: public(3092)", "Delete SimpleName: String(3093)", "Delete SimpleType: String(3094)", "Delete SimpleName: toString(3095)", "Delete SimpleName: body(3096)", "Delete ReturnStatement(3097)", "Delete Block(3098)", "Delete MethodDeclaration(3099)", "Delete TypeDeclaration: class(3100)", "Delete TextElement: A Template is a script that evaluates by writing its content through a Writer.(3101)", "Delete TextElement: This is a simplified replacement for Velocity that uses JEXL (instead of OGNL/VTL) as the scripting(3102)", "Delete TextElement: language.(3103)", "Delete TextElement: <p>(3104)", "Delete TextElement: The source text is parsed considering each line beginning with '$$' (as default pattern) as JEXL script code(3105)", "Delete TextElement: and all others as Unified JEXL expressions; those expressions will be invoked from the script during(3106)", "Delete TextElement: evaluation and their output gathered through a writer. (3107)", "Delete TextElement: It is thus possible to use looping or conditional construct \"around\" expressions generating output.(3108)", "Delete TextElement: </p>(3109)", "Delete TextElement: For instance:(3110)", "Delete TextElement: <p><blockquote><pre>(3111)", "Delete TextElement: $$ for(var x : [1, 3, 5, 42, 169]) {(3112)", "Delete TextElement: $$   if (x == 42) {(3113)", "Delete TextElement: Life, the universe, and everything(3114)", "Delete TextElement: $$   } else if (x > 42) {(3115)", "Delete TextElement: The value $(x} is over fourty-two(3116)", "Delete TextElement: $$   } else {(3117)", "Delete TextElement: The value ${x} is under fourty-two(3118)", "Delete TextElement: $$   }(3119)", "Delete TextElement: $$ }(3120)", "Delete TextElement: </pre></blockquote>(3121)", "Delete TextElement: Will evaluate as:(3122)", "Delete TextElement: <p><blockquote><pre>(3123)", "Delete TextElement: The value 1 is under fourty-two(3124)", "Delete TextElement: The value 3 is under fourty-two(3125)", "Delete TextElement: The value 5 is under fourty-two(3126)", "Delete TextElement: Life, the universe, and everything(3127)", "Delete TextElement: The value 169 is over fourty-two(3128)", "Delete TextElement: </pre></blockquote>(3129)", "Delete TextElement: <p>(3130)", "Delete TextElement: During evaluation, the template context exposes its writer as '$jexl' which is safe to use in this case.(3131)", "Delete TextElement: This allows writing directly through the writer without adding new-lines as in:(3132)", "Delete TextElement: <p><blockquote><pre>(3133)", "Delete TextElement: $$ for(var cell : cells) { $jexl.print(cell); $jexl.print(';') }(3134)", "Delete TextElement: </pre></blockquote>(3135)", "Delete TextElement: </p>(3136)", "Delete TextElement: <p>(3137)", "Delete TextElement: A template is expanded as one JEXL script and a list of UnifiedJEXL expressions; each UnifiedJEXL expression(3138)", "Delete TextElement: being replace in the script by a call to jexl:print(expr) (the expr is in fact the expr number in the template).(3139)", "Delete TextElement: This integration uses a specialized JexlContext (TemplateContext) that serves as a namespace (for jexl:)(3140)", "Delete TextElement: and stores the expression array and the writer (java.io.Writer) that the 'jexl:print(...)'(3141)", "Delete TextElement: delegates the output generation to.(3142)", "Delete TextElement: </p>(3143)", "Delete TagElement(3144)", "Delete TextElement:  2.1(3145)", "Delete TagElement: @since(3146)", "Delete Javadoc(3147)", "Delete Modifier: public(3148)", "Delete Modifier: final(3149)", "Delete SimpleName: Template(3150)", "Delete TextElement: The prefix marker. (3151)", "Delete TagElement(3152)", "Delete Javadoc(3153)", "Delete Modifier: private(3154)", "Delete Modifier: final(3155)", "Delete SimpleName: String(3156)", "Delete SimpleType: String(3157)", "Delete SimpleName: prefix(3158)", "Delete VariableDeclarationFragment(3159)", "Delete FieldDeclaration(3160)", "Delete TextElement: The array of source blocks. (3161)", "Delete TagElement(3162)", "Delete Javadoc(3163)", "Delete Modifier: private(3164)", "Delete Modifier: final(3165)", "Delete SimpleName: TemplateBlock(3166)", "Delete SimpleType: TemplateBlock(3167)", "Delete Dimension(3168)", "Delete ArrayType: TemplateBlock[](3169)", "Delete SimpleName: source(3170)", "Delete VariableDeclarationFragment(3171)", "Delete FieldDeclaration(3172)", "Delete TextElement: The resulting script. (3173)", "Delete TagElement(3174)", "Delete Javadoc(3175)", "Delete Modifier: private(3176)", "Delete Modifier: final(3177)", "Delete SimpleName: ASTJexlScript(3178)", "Delete SimpleType: ASTJexlScript(3179)", "Delete SimpleName: script(3180)", "Delete VariableDeclarationFragment(3181)", "Delete FieldDeclaration(3182)", "Delete TextElement: The UnifiedJEXL expressions called by the script. (3183)", "Delete TagElement(3184)", "Delete Javadoc(3185)", "Delete Modifier: private(3186)", "Delete Modifier: final(3187)", "Delete SimpleName: Expression(3188)", "Delete SimpleType: Expression(3189)", "Delete Dimension(3190)", "Delete ArrayType: Expression[](3191)", "Delete SimpleName: exprs(3192)", "Delete VariableDeclarationFragment(3193)", "Delete FieldDeclaration(3194)", "Delete TextElement: Creates a new template from an input.(3195)", "Delete TagElement(3196)", "Delete SimpleName: directive(3197)", "Delete TextElement:  the prefix for lines of code; can not be \"$\", \"${\", \"#\" or \"#{\"(3198)", "Delete TextElement: since this would preclude being able to differentiate directives and UnifiedJEXL expressions(3199)", "Delete TagElement: @param(3200)", "Delete SimpleName: reader(3201)", "Delete TextElement:  the input reader(3202)", "Delete TagElement: @param(3203)", "Delete SimpleName: parms(3204)", "Delete TextElement:  the parameter names(3205)", "Delete TagElement: @param(3206)", "Delete SimpleName: NullPointerException(3207)", "Delete TextElement:  if either the directive prefix or input is null(3208)", "Delete TagElement: @throws(3209)", "Delete SimpleName: IllegalArgumentException(3210)", "Delete TextElement:  if the directive prefix is invalid(3211)", "Delete TagElement: @throws(3212)", "Delete Javadoc(3213)", "Delete Modifier: public(3214)", "Delete SimpleName: Template(3215)", "Delete SimpleName: String(3216)", "Delete SimpleType: String(3217)", "Delete SimpleName: directive(3218)", "Delete SingleVariableDeclaration(3219)", "Delete SimpleName: Reader(3220)", "Delete SimpleType: Reader(3221)", "Delete SimpleName: reader(3222)", "Delete SingleVariableDeclaration(3223)", "Delete SimpleName: String(3224)", "Delete SimpleType: String(3225)", "Delete SimpleName: parms(3226)", "Delete SingleVariableDeclaration(3227)", "Delete SimpleName: directive(3228)", "Delete NullLiteral(3229)", "Delete InfixExpression: ==(3230)", "Delete SimpleName: NullPointerException(3231)", "Delete SimpleType: NullPointerException(3232)", "Delete StringLiteral: \"null prefix\"(3233)", "Delete ClassInstanceCreation(3234)", "Delete ThrowStatement(3235)", "Delete Block(3236)", "Delete IfStatement(3237)", "Delete StringLiteral: \"$\"(3238)", "Delete SimpleName: equals(3239)", "Delete SimpleName: directive(3240)", "Delete MethodInvocation(3241)", "Delete StringLiteral: \"${\"(3242)", "Delete SimpleName: equals(3243)", "Delete SimpleName: directive(3244)", "Delete MethodInvocation(3245)", "Delete StringLiteral: \"#\"(3246)", "Delete SimpleName: equals(3247)", "Delete SimpleName: directive(3248)", "Delete MethodInvocation(3249)", "Delete StringLiteral: \"#{\"(3250)", "Delete SimpleName: equals(3251)", "Delete SimpleName: directive(3252)", "Delete MethodInvocation(3253)", "Delete InfixExpression: ||(3254)", "Delete SimpleName: IllegalArgumentException(3255)", "Delete SimpleType: IllegalArgumentException(3256)", "Delete SimpleName: directive(3257)", "Delete StringLiteral: \": is not a valid directive pattern\"(3258)", "Delete InfixExpression: +(3259)", "Delete ClassInstanceCreation(3260)", "Delete ThrowStatement(3261)", "Delete Block(3262)", "Delete IfStatement(3263)", "Delete SimpleName: reader(3264)", "Delete NullLiteral(3265)", "Delete InfixExpression: ==(3266)", "Delete SimpleName: NullPointerException(3267)", "Delete SimpleType: NullPointerException(3268)", "Delete StringLiteral: \"null input\"(3269)", "Delete ClassInstanceCreation(3270)", "Delete ThrowStatement(3271)", "Delete Block(3272)", "Delete IfStatement(3273)", "Delete QualifiedName: JexlEngine.Scope(3274)", "Delete SimpleType: JexlEngine.Scope(3275)", "Delete SimpleName: scope(3276)", "Delete QualifiedName: JexlEngine.Scope(3277)", "Delete SimpleType: JexlEngine.Scope(3278)", "Delete SimpleName: parms(3279)", "Delete ClassInstanceCreation(3280)", "Delete VariableDeclarationFragment(3281)", "Delete VariableDeclarationStatement(3282)", "Delete SimpleName: prefix(3283)", "Delete SimpleName: directive(3284)", "Delete Assignment: =(3285)", "Delete ExpressionStatement(3286)", "Delete SimpleName: List(3287)", "Delete SimpleType: List(3288)", "Delete SimpleName: TemplateBlock(3289)", "Delete SimpleType: TemplateBlock(3290)", "Delete ParameterizedType: List<TemplateBlock>(3291)", "Delete SimpleName: blocks(3292)", "Delete SimpleName: readTemplate(3293)", "Delete SimpleName: prefix(3294)", "Delete SimpleName: reader(3295)", "Delete MethodInvocation(3296)", "Delete VariableDeclarationFragment(3297)", "Delete VariableDeclarationStatement(3298)", "Delete SimpleName: List(3299)", "Delete SimpleType: List(3300)", "Delete SimpleName: Expression(3301)", "Delete SimpleType: Expression(3302)", "Delete ParameterizedType: List<Expression>(3303)", "Delete SimpleName: uexprs(3304)", "Delete SimpleName: ArrayList(3305)", "Delete SimpleType: ArrayList(3306)", "Delete SimpleName: Expression(3307)", "Delete SimpleType: Expression(3308)", "Delete ParameterizedType: ArrayList<Expression>(3309)", "Delete ClassInstanceCreation(3310)", "Delete VariableDeclarationFragment(3311)", "Delete VariableDeclarationStatement(3312)", "Delete SimpleName: StringBuilder(3313)", "Delete SimpleType: StringBuilder(3314)", "Delete SimpleName: strb(3315)", "Delete SimpleName: StringBuilder(3316)", "Delete SimpleType: StringBuilder(3317)", "Delete ClassInstanceCreation(3318)", "Delete VariableDeclarationFragment(3319)", "Delete VariableDeclarationStatement(3320)", "Delete PrimitiveType: int(3321)", "Delete SimpleName: nuexpr(3322)", "Delete NumberLiteral: 0(3323)", "Delete VariableDeclarationFragment(3324)", "Delete VariableDeclarationStatement(3325)", "Delete PrimitiveType: int(3326)", "Delete SimpleName: codeStart(3327)", "Delete NumberLiteral: 1(3328)", "Delete PrefixExpression: -(3329)", "Delete VariableDeclarationFragment(3330)", "Delete VariableDeclarationStatement(3331)", "Delete PrimitiveType: int(3332)", "Delete SimpleName: b(3333)", "Delete NumberLiteral: 0(3334)", "Delete VariableDeclarationFragment(3335)", "Delete VariableDeclarationExpression(3336)", "Delete SimpleName: b(3337)", "Delete SimpleName: blocks(3338)", "Delete SimpleName: size(3339)", "Delete MethodInvocation(3340)", "Delete InfixExpression: <(3341)", "Delete SimpleName: b(3342)", "Delete PrefixExpression: ++(3343)", "Delete SimpleName: TemplateBlock(3344)", "Delete SimpleType: TemplateBlock(3345)", "Delete SimpleName: block(3346)", "Delete SimpleName: blocks(3347)", "Delete SimpleName: get(3348)", "Delete SimpleName: b(3349)", "Delete MethodInvocation(3350)", "Delete VariableDeclarationFragment(3351)", "Delete VariableDeclarationStatement(3352)", "Delete QualifiedName: block.type(3353)", "Delete QualifiedName: BlockType.VERBATIM(3354)", "Delete InfixExpression: ==(3355)", "Delete SimpleName: strb(3356)", "Delete SimpleName: append(3357)", "Delete StringLiteral: \"jexl:print(\"(3358)", "Delete MethodInvocation(3359)", "Delete ExpressionStatement(3360)", "Delete SimpleName: strb(3361)", "Delete SimpleName: append(3362)", "Delete SimpleName: nuexpr(3363)", "Delete PostfixExpression: ++(3364)", "Delete MethodInvocation(3365)", "Delete ExpressionStatement(3366)", "Delete SimpleName: strb(3367)", "Delete SimpleName: append(3368)", "Delete StringLiteral: \");\"(3369)", "Delete MethodInvocation(3370)", "Delete ExpressionStatement(3371)", "Delete Block(3372)", "Delete SimpleName: codeStart(3373)", "Delete NumberLiteral: 0(3374)", "Delete InfixExpression: <(3375)", "Delete SimpleName: codeStart(3376)", "Delete SimpleName: b(3377)", "Delete Assignment: =(3378)", "Delete ExpressionStatement(3379)", "Delete Block(3380)", "Delete IfStatement(3381)", "Delete SimpleName: strb(3382)", "Delete SimpleName: append(3383)", "Delete QualifiedName: block.body(3384)", "Delete MethodInvocation(3385)", "Delete ExpressionStatement(3386)", "Delete Block(3387)", "Delete IfStatement(3388)", "Delete Block(3389)", "Delete ForStatement(3390)", "Delete SimpleName: script(3391)", "Delete SimpleName: getEngine(3392)", "Delete MethodInvocation(3393)", "Delete SimpleName: parse(3394)", "Delete SimpleName: strb(3395)", "Delete SimpleName: toString(3396)", "Delete MethodInvocation(3397)", "Delete NullLiteral(3398)", "Delete SimpleName: scope(3399)", "Delete MethodInvocation(3400)", "Delete Assignment: =(3401)", "Delete ExpressionStatement(3402)", "Delete SimpleName: scope(3403)", "Delete SimpleName: script(3404)", "Delete SimpleName: getScope(3405)", "Delete MethodInvocation(3406)", "Delete Assignment: =(3407)", "Delete ExpressionStatement(3408)", "Delete PrimitiveType: int(3409)", "Delete SimpleName: b(3410)", "Delete NumberLiteral: 0(3411)", "Delete VariableDeclarationFragment(3412)", "Delete VariableDeclarationExpression(3413)", "Delete SimpleName: b(3414)", "Delete SimpleName: blocks(3415)", "Delete SimpleName: size(3416)", "Delete MethodInvocation(3417)", "Delete InfixExpression: <(3418)", "Delete SimpleName: b(3419)", "Delete PrefixExpression: ++(3420)", "Delete SimpleName: TemplateBlock(3421)", "Delete SimpleType: TemplateBlock(3422)", "Delete SimpleName: block(3423)", "Delete SimpleName: blocks(3424)", "Delete SimpleName: get(3425)", "Delete SimpleName: b(3426)", "Delete MethodInvocation(3427)", "Delete VariableDeclarationFragment(3428)", "Delete VariableDeclarationStatement(3429)", "Delete QualifiedName: block.type(3430)", "Delete QualifiedName: BlockType.VERBATIM(3431)", "Delete InfixExpression: ==(3432)", "Delete SimpleName: uexprs(3433)", "Delete SimpleName: add(3434)", "Delete SimpleName: UnifiedJEXL(3435)", "Delete ThisExpression(3436)", "Delete SimpleName: parseExpression(3437)", "Delete QualifiedName: block.body(3438)", "Delete SimpleName: b(3439)", "Delete SimpleName: codeStart(3440)", "Delete InfixExpression: >(3441)", "Delete SimpleName: scope(3442)", "Delete NullLiteral(3443)", "Delete ConditionalExpression(3444)", "Delete MethodInvocation(3445)", "Delete MethodInvocation(3446)", "Delete ExpressionStatement(3447)", "Delete Block(3448)", "Delete IfStatement(3449)", "Delete Block(3450)", "Delete ForStatement(3451)", "Delete SimpleName: source(3452)", "Delete SimpleName: blocks(3453)", "Delete SimpleName: toArray(3454)", "Delete SimpleName: TemplateBlock(3455)", "Delete SimpleType: TemplateBlock(3456)", "Delete Dimension(3457)", "Delete ArrayType: TemplateBlock[](3458)", "Delete SimpleName: blocks(3459)", "Delete SimpleName: size(3460)", "Delete MethodInvocation(3461)", "Delete ArrayCreation(3462)", "Delete MethodInvocation(3463)", "Delete Assignment: =(3464)", "Delete ExpressionStatement(3465)", "Delete SimpleName: exprs(3466)", "Delete SimpleName: uexprs(3467)", "Delete SimpleName: toArray(3468)", "Delete SimpleName: Expression(3469)", "Delete SimpleType: Expression(3470)", "Delete Dimension(3471)", "Delete ArrayType: Expression[](3472)", "Delete SimpleName: uexprs(3473)", "Delete SimpleName: size(3474)", "Delete MethodInvocation(3475)", "Delete ArrayCreation(3476)", "Delete MethodInvocation(3477)", "Delete Assignment: =(3478)", "Delete ExpressionStatement(3479)", "Delete Block(3480)", "Delete MethodDeclaration(3481)", "Delete TextElement: Private ctor used to expand deferred expressions during prepare.(3482)", "Delete TagElement(3483)", "Delete SimpleName: thePrefix(3484)", "Delete TextElement:  the directive prefix(3485)", "Delete TagElement: @param(3486)", "Delete SimpleName: theSource(3487)", "Delete TextElement:  the source(3488)", "Delete TagElement: @param(3489)", "Delete SimpleName: theScript(3490)", "Delete TextElement:  the script(3491)", "Delete TagElement: @param(3492)", "Delete SimpleName: theExprs(3493)", "Delete TextElement:  the expressions(3494)", "Delete TagElement: @param(3495)", "Delete Javadoc(3496)", "Delete Modifier: private(3497)", "Delete SimpleName: Template(3498)", "Delete SimpleName: String(3499)", "Delete SimpleType: String(3500)", "Delete SimpleName: thePrefix(3501)", "Delete SingleVariableDeclaration(3502)", "Delete SimpleName: TemplateBlock(3503)", "Delete SimpleType: TemplateBlock(3504)", "Delete Dimension(3505)", "Delete ArrayType: TemplateBlock[](3506)", "Delete SimpleName: theSource(3507)", "Delete SingleVariableDeclaration(3508)", "Delete SimpleName: ASTJexlScript(3509)", "Delete SimpleType: ASTJexlScript(3510)", "Delete SimpleName: theScript(3511)", "Delete SingleVariableDeclaration(3512)", "Delete SimpleName: Expression(3513)", "Delete SimpleType: Expression(3514)", "Delete Dimension(3515)", "Delete ArrayType: Expression[](3516)", "Delete SimpleName: theExprs(3517)", "Delete SingleVariableDeclaration(3518)", "Delete SimpleName: prefix(3519)", "Delete SimpleName: thePrefix(3520)", "Delete Assignment: =(3521)", "Delete ExpressionStatement(3522)", "Delete SimpleName: source(3523)", "Delete SimpleName: theSource(3524)", "Delete Assignment: =(3525)", "Delete ExpressionStatement(3526)", "Delete SimpleName: script(3527)", "Delete SimpleName: theScript(3528)", "Delete Assignment: =(3529)", "Delete ExpressionStatement(3530)", "Delete SimpleName: exprs(3531)", "Delete SimpleName: theExprs(3532)", "Delete Assignment: =(3533)", "Delete ExpressionStatement(3534)", "Delete Block(3535)", "Delete MethodDeclaration(3536)", "Delete SimpleName: Override(3537)", "Delete MarkerAnnotation(3538)", "Delete Modifier: public(3539)", "Delete SimpleName: String(3540)", "Delete SimpleType: String(3541)", "Delete SimpleName: toString(3542)", "Delete SimpleName: StringBuilder(3543)", "Delete SimpleType: StringBuilder(3544)", "Delete SimpleName: strb(3545)", "Delete SimpleName: StringBuilder(3546)", "Delete SimpleType: StringBuilder(3547)", "Delete ClassInstanceCreation(3548)", "Delete VariableDeclarationFragment(3549)", "Delete VariableDeclarationStatement(3550)", "Delete SimpleName: TemplateBlock(3551)", "Delete SimpleType: TemplateBlock(3552)", "Delete SimpleName: block(3553)", "Delete SingleVariableDeclaration(3554)", "Delete SimpleName: source(3555)", "Delete QualifiedName: block.type(3556)", "Delete QualifiedName: BlockType.DIRECTIVE(3557)", "Delete InfixExpression: ==(3558)", "Delete SimpleName: strb(3559)", "Delete SimpleName: append(3560)", "Delete SimpleName: prefix(3561)", "Delete MethodInvocation(3562)", "Delete ExpressionStatement(3563)", "Delete Block(3564)", "Delete IfStatement(3565)", "Delete SimpleName: strb(3566)", "Delete SimpleName: append(3567)", "Delete SimpleName: block(3568)", "Delete SimpleName: toString(3569)", "Delete MethodInvocation(3570)", "Delete MethodInvocation(3571)", "Delete ExpressionStatement(3572)", "Delete SimpleName: strb(3573)", "Delete SimpleName: append(3574)", "Delete CharacterLiteral: '\\n'(3575)", "Delete MethodInvocation(3576)", "Delete ExpressionStatement(3577)", "Delete Block(3578)", "Delete EnhancedForStatement(3579)", "Delete SimpleName: strb(3580)", "Delete SimpleName: toString(3581)", "Delete MethodInvocation(3582)", "Delete ReturnStatement(3583)", "Delete Block(3584)", "Delete MethodDeclaration(3585)", "Delete TextElement: Recreate the template source from its inner components.(3586)", "Delete TagElement(3587)", "Delete TextElement:  the template source rewritten(3588)", "Delete TagElement: @return(3589)", "Delete Javadoc(3590)", "Delete Modifier: public(3591)", "Delete SimpleName: String(3592)", "Delete SimpleType: String(3593)", "Delete SimpleName: asString(3594)", "Delete SimpleName: StringBuilder(3595)", "Delete SimpleType: StringBuilder(3596)", "Delete SimpleName: strb(3597)", "Delete SimpleName: StringBuilder(3598)", "Delete SimpleType: StringBuilder(3599)", "Delete ClassInstanceCreation(3600)", "Delete VariableDeclarationFragment(3601)", "Delete VariableDeclarationStatement(3602)", "Delete PrimitiveType: int(3603)", "Delete SimpleName: e(3604)", "Delete NumberLiteral: 0(3605)", "Delete VariableDeclarationFragment(3606)", "Delete VariableDeclarationStatement(3607)", "Delete PrimitiveType: int(3608)", "Delete SimpleName: b(3609)", "Delete NumberLiteral: 0(3610)", "Delete VariableDeclarationFragment(3611)", "Delete VariableDeclarationExpression(3612)", "Delete SimpleName: b(3613)", "Delete QualifiedName: source.length(3614)", "Delete InfixExpression: <(3615)", "Delete SimpleName: b(3616)", "Delete PrefixExpression: ++(3617)", "Delete SimpleName: TemplateBlock(3618)", "Delete SimpleType: TemplateBlock(3619)", "Delete SimpleName: block(3620)", "Delete SimpleName: source(3621)", "Delete SimpleName: b(3622)", "Delete ArrayAccess(3623)", "Delete VariableDeclarationFragment(3624)", "Delete VariableDeclarationStatement(3625)", "Delete QualifiedName: block.type(3626)", "Delete QualifiedName: BlockType.DIRECTIVE(3627)", "Delete InfixExpression: ==(3628)", "Delete SimpleName: strb(3629)", "Delete SimpleName: append(3630)", "Delete SimpleName: prefix(3631)", "Delete MethodInvocation(3632)", "Delete ExpressionStatement(3633)", "Delete Block(3634)", "Delete SimpleName: exprs(3635)", "Delete SimpleName: e(3636)", "Delete PostfixExpression: ++(3637)", "Delete ArrayAccess(3638)", "Delete SimpleName: asString(3639)", "Delete SimpleName: strb(3640)", "Delete MethodInvocation(3641)", "Delete ExpressionStatement(3642)", "Delete Block(3643)", "Delete IfStatement(3644)", "Delete Block(3645)", "Delete ForStatement(3646)", "Delete SimpleName: strb(3647)", "Delete SimpleName: toString(3648)", "Delete MethodInvocation(3649)", "Delete ReturnStatement(3650)", "Delete Block(3651)", "Delete MethodDeclaration(3652)", "Delete TextElement: Prepares this template by expanding any contained deferred expression.(3653)", "Delete TagElement(3654)", "Delete SimpleName: context(3655)", "Delete TextElement:  the context to prepare against(3656)", "Delete TagElement: @param(3657)", "Delete TextElement:  the prepared version of the template(3658)", "Delete TagElement: @return(3659)", "Delete Javadoc(3660)", "Delete Modifier: public(3661)", "Delete SimpleName: Template(3662)", "Delete SimpleType: Template(3663)", "Delete SimpleName: prepare(3664)", "Delete SimpleName: JexlContext(3665)", "Delete SimpleType: JexlContext(3666)", "Delete SimpleName: context(3667)", "Delete SingleVariableDeclaration(3668)", "Delete QualifiedName: JexlEngine.Frame(3669)", "Delete SimpleType: JexlEngine.Frame(3670)", "Delete SimpleName: frame(3671)", "Delete SimpleName: script(3672)", "Delete SimpleName: createFrame(3673)", "Delete SimpleName: Object(3674)", "Delete SimpleType: Object(3675)", "Delete Dimension(3676)", "Delete ArrayType: Object[](3677)", "Delete NullLiteral(3678)", "Delete CastExpression(3679)", "Delete MethodInvocation(3680)", "Delete VariableDeclarationFragment(3681)", "Delete VariableDeclarationStatement(3682)", "Delete SimpleName: TemplateContext(3683)", "Delete SimpleType: TemplateContext(3684)", "Delete SimpleName: tcontext(3685)", "Delete SimpleName: TemplateContext(3686)", "Delete SimpleType: TemplateContext(3687)", "Delete SimpleName: context(3688)", "Delete SimpleName: frame(3689)", "Delete SimpleName: exprs(3690)", "Delete NullLiteral(3691)", "Delete ClassInstanceCreation(3692)", "Delete VariableDeclarationFragment(3693)", "Delete VariableDeclarationStatement(3694)", "Delete SimpleName: Expression(3695)", "Delete SimpleType: Expression(3696)", "Delete Dimension(3697)", "Delete ArrayType: Expression[](3698)", "Delete SimpleName: immediates(3699)", "Delete SimpleName: Expression(3700)", "Delete SimpleType: Expression(3701)", "Delete Dimension(3702)", "Delete ArrayType: Expression[](3703)", "Delete QualifiedName: exprs.length(3704)", "Delete ArrayCreation(3705)", "Delete VariableDeclarationFragment(3706)", "Delete VariableDeclarationStatement(3707)", "Delete PrimitiveType: int(3708)", "Delete SimpleName: e(3709)", "Delete NumberLiteral: 0(3710)", "Delete VariableDeclarationFragment(3711)", "Delete VariableDeclarationExpression(3712)", "Delete SimpleName: e(3713)", "Delete QualifiedName: exprs.length(3714)", "Delete InfixExpression: <(3715)", "Delete SimpleName: e(3716)", "Delete PrefixExpression: ++(3717)", "Delete SimpleName: immediates(3718)", "Delete SimpleName: e(3719)", "Delete ArrayAccess(3720)", "Delete SimpleName: exprs(3721)", "Delete SimpleName: e(3722)", "Delete ArrayAccess(3723)", "Delete SimpleName: prepare(3724)", "Delete SimpleName: tcontext(3725)", "Delete MethodInvocation(3726)", "Delete Assignment: =(3727)", "Delete ExpressionStatement(3728)", "Delete Block(3729)", "Delete ForStatement(3730)", "Delete SimpleName: Template(3731)", "Delete SimpleType: Template(3732)", "Delete SimpleName: prefix(3733)", "Delete SimpleName: source(3734)", "Delete SimpleName: script(3735)", "Delete SimpleName: immediates(3736)", "Delete ClassInstanceCreation(3737)", "Delete ReturnStatement(3738)", "Delete Block(3739)", "Delete MethodDeclaration(3740)", "Delete TextElement: Evaluates this template.(3741)", "Delete TagElement(3742)", "Delete SimpleName: context(3743)", "Delete TextElement:  the context to use during evaluation(3744)", "Delete TagElement: @param(3745)", "Delete SimpleName: writer(3746)", "Delete TextElement:  the writer to use for output(3747)", "Delete TagElement: @param(3748)", "Delete Javadoc(3749)", "Delete Modifier: public(3750)", "Delete PrimitiveType: void(3751)", "Delete SimpleName: evaluate(3752)", "Delete SimpleName: JexlContext(3753)", "Delete SimpleType: JexlContext(3754)", "Delete SimpleName: context(3755)", "Delete SingleVariableDeclaration(3756)", "Delete SimpleName: Writer(3757)", "Delete SimpleType: Writer(3758)", "Delete SimpleName: writer(3759)", "Delete SingleVariableDeclaration(3760)", "Delete SimpleName: evaluate(3761)", "Delete SimpleName: context(3762)", "Delete SimpleName: writer(3763)", "Delete SimpleName: Object(3764)", "Delete SimpleType: Object(3765)", "Delete Dimension(3766)", "Delete ArrayType: Object[](3767)", "Delete NullLiteral(3768)", "Delete CastExpression(3769)", "Delete MethodInvocation(3770)", "Delete ExpressionStatement(3771)", "Delete Block(3772)", "Delete MethodDeclaration(3773)", "Delete TextElement: Evaluates this template.(3774)", "Delete TagElement(3775)", "Delete SimpleName: context(3776)", "Delete TextElement:  the context to use during evaluation(3777)", "Delete TagElement: @param(3778)", "Delete SimpleName: writer(3779)", "Delete TextElement:  the writer to use for output(3780)", "Delete TagElement: @param(3781)", "Delete SimpleName: args(3782)", "Delete TextElement:  the arguments(3783)", "Delete TagElement: @param(3784)", "Delete Javadoc(3785)", "Delete Modifier: public(3786)", "Delete PrimitiveType: void(3787)", "Delete SimpleName: evaluate(3788)", "Delete SimpleName: JexlContext(3789)", "Delete SimpleType: JexlContext(3790)", "Delete SimpleName: context(3791)", "Delete SingleVariableDeclaration(3792)", "Delete SimpleName: Writer(3793)", "Delete SimpleType: Writer(3794)", "Delete SimpleName: writer(3795)", "Delete SingleVariableDeclaration(3796)", "Delete SimpleName: Object(3797)", "Delete SimpleType: Object(3798)", "Delete SimpleName: args(3799)", "Delete SingleVariableDeclaration(3800)", "Delete QualifiedName: JexlEngine.Frame(3801)", "Delete SimpleType: JexlEngine.Frame(3802)", "Delete SimpleName: frame(3803)", "Delete SimpleName: script(3804)", "Delete SimpleName: createFrame(3805)", "Delete SimpleName: args(3806)", "Delete MethodInvocation(3807)", "Delete VariableDeclarationFragment(3808)", "Delete VariableDeclarationStatement(3809)", "Delete SimpleName: TemplateContext(3810)", "Delete SimpleType: TemplateContext(3811)", "Delete SimpleName: tcontext(3812)", "Delete SimpleName: TemplateContext(3813)", "Delete SimpleType: TemplateContext(3814)", "Delete SimpleName: context(3815)", "Delete SimpleName: frame(3816)", "Delete SimpleName: exprs(3817)", "Delete SimpleName: writer(3818)", "Delete ClassInstanceCreation(3819)", "Delete VariableDeclarationFragment(3820)", "Delete VariableDeclarationStatement(3821)", "Delete SimpleName: Interpreter(3822)", "Delete SimpleType: Interpreter(3823)", "Delete SimpleName: interpreter(3824)", "Delete SimpleName: jexl(3825)", "Delete SimpleName: createInterpreter(3826)", "Delete SimpleName: tcontext(3827)", "Delete SimpleName: jexl(3828)", "Delete SimpleName: isLenient(3829)", "Delete MethodInvocation(3830)", "Delete PrefixExpression: !(3831)", "Delete BooleanLiteral: false(3832)", "Delete MethodInvocation(3833)", "Delete VariableDeclarationFragment(3834)", "Delete VariableDeclarationStatement(3835)", "Delete SimpleName: interpreter(3836)", "Delete SimpleName: setFrame(3837)", "Delete SimpleName: frame(3838)", "Delete MethodInvocation(3839)", "Delete ExpressionStatement(3840)", "Delete SimpleName: interpreter(3841)", "Delete SimpleName: interpret(3842)", "Delete SimpleName: script(3843)", "Delete MethodInvocation(3844)", "Delete ExpressionStatement(3845)", "Delete Block(3846)", "Delete MethodDeclaration(3847)", "Delete TypeDeclaration: class(3848)", "Delete TextElement: The type of context to use during evaluation of templates.(3849)", "Delete TextElement: <p>This context exposes its writer as '$jexl' to the scripts.</p>(3850)", "Delete TextElement: <p>public for introspection purpose.</p>(3851)", "Delete TagElement(3852)", "Delete TextElement:  2.1(3853)", "Delete TagElement: @since(3854)", "Delete Javadoc(3855)", "Delete Modifier: public(3856)", "Delete Modifier: final(3857)", "Delete SimpleName: TemplateContext(3858)", "Delete SimpleName: JexlContext(3859)", "Delete SimpleType: JexlContext(3860)", "Delete SimpleName: NamespaceResolver(3861)", "Delete SimpleType: NamespaceResolver(3862)", "Delete TextElement: The wrapped context. (3863)", "Delete TagElement(3864)", "Delete Javadoc(3865)", "Delete Modifier: private(3866)", "Delete Modifier: final(3867)", "Delete SimpleName: JexlContext(3868)", "Delete SimpleType: JexlContext(3869)", "Delete SimpleName: wrap(3870)", "Delete VariableDeclarationFragment(3871)", "Delete FieldDeclaration(3872)", "Delete TextElement: The array of UnifiedJEXL expressions. (3873)", "Delete TagElement(3874)", "Delete Javadoc(3875)", "Delete Modifier: private(3876)", "Delete Modifier: final(3877)", "Delete SimpleName: Expression(3878)", "Delete SimpleType: Expression(3879)", "Delete Dimension(3880)", "Delete ArrayType: Expression[](3881)", "Delete SimpleName: exprs(3882)", "Delete VariableDeclarationFragment(3883)", "Delete FieldDeclaration(3884)", "Delete TextElement: The writer used to output. (3885)", "Delete TagElement(3886)", "Delete Javadoc(3887)", "Delete Modifier: private(3888)", "Delete Modifier: final(3889)", "Delete SimpleName: Writer(3890)", "Delete SimpleType: Writer(3891)", "Delete SimpleName: writer(3892)", "Delete VariableDeclarationFragment(3893)", "Delete FieldDeclaration(3894)", "Delete TextElement: The call frame. (3895)", "Delete TagElement(3896)", "Delete Javadoc(3897)", "Delete Modifier: private(3898)", "Delete Modifier: final(3899)", "Delete QualifiedName: JexlEngine.Frame(3900)", "Delete SimpleType: JexlEngine.Frame(3901)", "Delete SimpleName: frame(3902)", "Delete VariableDeclarationFragment(3903)", "Delete FieldDeclaration(3904)", "Delete TextElement: Creates a template context instance.(3905)", "Delete TagElement(3906)", "Delete SimpleName: jcontext(3907)", "Delete TextElement:  the base context(3908)", "Delete TagElement: @param(3909)", "Delete SimpleName: jframe(3910)", "Delete TextElement:  the calling frame(3911)", "Delete TagElement: @param(3912)", "Delete SimpleName: expressions(3913)", "Delete TextElement:  the list of expression from the template to evaluate(3914)", "Delete TagElement: @param(3915)", "Delete SimpleName: out(3916)", "Delete TextElement:  the output writer(3917)", "Delete TagElement: @param(3918)", "Delete Javadoc(3919)", "Delete Modifier: protected(3920)", "Delete SimpleName: TemplateContext(3921)", "Delete SimpleName: JexlContext(3922)", "Delete SimpleType: JexlContext(3923)", "Delete SimpleName: jcontext(3924)", "Delete SingleVariableDeclaration(3925)", "Delete QualifiedName: JexlEngine.Frame(3926)", "Delete SimpleType: JexlEngine.Frame(3927)", "Delete SimpleName: jframe(3928)", "Delete SingleVariableDeclaration(3929)", "Delete SimpleName: Expression(3930)", "Delete SimpleType: Expression(3931)", "Delete Dimension(3932)", "Delete ArrayType: Expression[](3933)", "Delete SimpleName: expressions(3934)", "Delete SingleVariableDeclaration(3935)", "Delete SimpleName: Writer(3936)", "Delete SimpleType: Writer(3937)", "Delete SimpleName: out(3938)", "Delete SingleVariableDeclaration(3939)", "Delete SimpleName: wrap(3940)", "Delete SimpleName: jcontext(3941)", "Delete Assignment: =(3942)", "Delete ExpressionStatement(3943)", "Delete SimpleName: frame(3944)", "Delete SimpleName: jframe(3945)", "Delete Assignment: =(3946)", "Delete ExpressionStatement(3947)", "Delete SimpleName: exprs(3948)", "Delete SimpleName: expressions(3949)", "Delete Assignment: =(3950)", "Delete ExpressionStatement(3951)", "Delete SimpleName: writer(3952)", "Delete SimpleName: out(3953)", "Delete Assignment: =(3954)", "Delete ExpressionStatement(3955)", "Delete Block(3956)", "Delete MethodDeclaration(3957)", "Delete TextElement: Gets this context calling frame.(3958)", "Delete TagElement(3959)", "Delete TextElement:  the engine frame(3960)", "Delete TagElement: @return(3961)", "Delete Javadoc(3962)", "Delete Modifier: public(3963)", "Delete QualifiedName: JexlEngine.Frame(3964)", "Delete SimpleType: JexlEngine.Frame(3965)", "Delete SimpleName: getFrame(3966)", "Delete SimpleName: frame(3967)", "Delete ReturnStatement(3968)", "Delete Block(3969)", "Delete MethodDeclaration(3970)", "Delete TagElement: @inheritDoc(3971)", "Delete TextElement:  (3972)", "Delete TagElement(3973)", "Delete Javadoc(3974)", "Delete Modifier: public(3975)", "Delete SimpleName: Object(3976)", "Delete SimpleType: Object(3977)", "Delete SimpleName: get(3978)", "Delete SimpleName: String(3979)", "Delete SimpleType: String(3980)", "Delete SimpleName: name(3981)", "Delete SingleVariableDeclaration(3982)", "Delete StringLiteral: \"$jexl\"(3983)", "Delete SimpleName: equals(3984)", "Delete SimpleName: name(3985)", "Delete MethodInvocation(3986)", "Delete SimpleName: writer(3987)", "Delete ReturnStatement(3988)", "Delete Block(3989)", "Delete SimpleName: wrap(3990)", "Delete SimpleName: get(3991)", "Delete SimpleName: name(3992)", "Delete MethodInvocation(3993)", "Delete ReturnStatement(3994)", "Delete Block(3995)", "Delete IfStatement(3996)", "Delete Block(3997)", "Delete MethodDeclaration(3998)", "Delete TagElement: @inheritDoc(3999)", "Delete TextElement:  (4000)", "Delete TagElement(4001)", "Delete Javadoc(4002)", "Delete Modifier: public(4003)", "Delete PrimitiveType: void(4004)", "Delete SimpleName: set(4005)", "Delete SimpleName: String(4006)", "Delete SimpleType: String(4007)", "Delete SimpleName: name(4008)", "Delete SingleVariableDeclaration(4009)", "Delete SimpleName: Object(4010)", "Delete SimpleType: Object(4011)", "Delete SimpleName: value(4012)", "Delete SingleVariableDeclaration(4013)", "Delete SimpleName: wrap(4014)", "Delete SimpleName: set(4015)", "Delete SimpleName: name(4016)", "Delete SimpleName: value(4017)", "Delete MethodInvocation(4018)", "Delete ExpressionStatement(4019)", "Delete Block(4020)", "Delete MethodDeclaration(4021)", "Delete TagElement: @inheritDoc(4022)", "Delete TextElement:  (4023)", "Delete TagElement(4024)", "Delete Javadoc(4025)", "Delete Modifier: public(4026)", "Delete PrimitiveType: boolean(4027)", "Delete SimpleName: has(4028)", "Delete SimpleName: String(4029)", "Delete SimpleType: String(4030)", "Delete SimpleName: name(4031)", "Delete SingleVariableDeclaration(4032)", "Delete SimpleName: wrap(4033)", "Delete SimpleName: has(4034)", "Delete SimpleName: name(4035)", "Delete MethodInvocation(4036)", "Delete ReturnStatement(4037)", "Delete Block(4038)", "Delete MethodDeclaration(4039)", "Delete TagElement: @inheritDoc(4040)", "Delete TextElement:  (4041)", "Delete TagElement(4042)", "Delete Javadoc(4043)", "Delete Modifier: public(4044)", "Delete SimpleName: Object(4045)", "Delete SimpleType: Object(4046)", "Delete SimpleName: resolveNamespace(4047)", "Delete SimpleName: String(4048)", "Delete SimpleType: String(4049)", "Delete SimpleName: ns(4050)", "Delete SingleVariableDeclaration(4051)", "Delete StringLiteral: \"jexl\"(4052)", "Delete SimpleName: equals(4053)", "Delete SimpleName: ns(4054)", "Delete MethodInvocation(4055)", "Delete ThisExpression(4056)", "Delete ReturnStatement(4057)", "Delete Block(4058)", "Delete SimpleName: wrap(4059)", "Delete SimpleName: NamespaceResolver(4060)", "Delete SimpleType: NamespaceResolver(4061)", "Delete InstanceofExpression(4062)", "Delete SimpleName: NamespaceResolver(4063)", "Delete SimpleType: NamespaceResolver(4064)", "Delete SimpleName: wrap(4065)", "Delete CastExpression(4066)", "Delete ParenthesizedExpression(4067)", "Delete SimpleName: resolveNamespace(4068)", "Delete SimpleName: ns(4069)", "Delete MethodInvocation(4070)", "Delete ReturnStatement(4071)", "Delete Block(4072)", "Delete NullLiteral(4073)", "Delete ReturnStatement(4074)", "Delete Block(4075)", "Delete IfStatement(4076)", "Delete IfStatement(4077)", "Delete Block(4078)", "Delete MethodDeclaration(4079)", "Delete TextElement: Includes a call to another template.(4080)", "Delete TextElement: <p>Evaluates a template using this template initial context and writer.</p>(4081)", "Delete TagElement(4082)", "Delete SimpleName: template(4083)", "Delete TextElement:  the template to evaluate(4084)", "Delete TagElement: @param(4085)", "Delete SimpleName: args(4086)", "Delete TextElement:  the arguments(4087)", "Delete TagElement: @param(4088)", "Delete Javadoc(4089)", "Delete Modifier: public(4090)", "Delete PrimitiveType: void(4091)", "Delete SimpleName: include(4092)", "Delete SimpleName: Template(4093)", "Delete SimpleType: Template(4094)", "Delete SimpleName: template(4095)", "Delete SingleVariableDeclaration(4096)", "Delete SimpleName: Object(4097)", "Delete SimpleType: Object(4098)", "Delete SimpleName: args(4099)", "Delete SingleVariableDeclaration(4100)", "Delete SimpleName: template(4101)", "Delete SimpleName: evaluate(4102)", "Delete SimpleName: wrap(4103)", "Delete SimpleName: writer(4104)", "Delete SimpleName: args(4105)", "Delete MethodInvocation(4106)", "Delete ExpressionStatement(4107)", "Delete Block(4108)", "Delete MethodDeclaration(4109)", "Delete TextElement: Prints an expression result.(4110)", "Delete TagElement(4111)", "Delete SimpleName: e(4112)", "Delete TextElement:  the expression number(4113)", "Delete TagElement: @param(4114)", "Delete Javadoc(4115)", "Delete Modifier: public(4116)", "Delete PrimitiveType: void(4117)", "Delete SimpleName: print(4118)", "Delete PrimitiveType: int(4119)", "Delete SimpleName: e(4120)", "Delete SingleVariableDeclaration(4121)", "Delete SimpleName: e(4122)", "Delete NumberLiteral: 0(4123)", "Delete InfixExpression: <(4124)", "Delete SimpleName: e(4125)", "Delete QualifiedName: exprs.length(4126)", "Delete InfixExpression: >=(4127)", "Delete InfixExpression: ||(4128)", "Delete ReturnStatement(4129)", "Delete Block(4130)", "Delete IfStatement(4131)", "Delete SimpleName: Expression(4132)", "Delete SimpleType: Expression(4133)", "Delete SimpleName: expr(4134)", "Delete SimpleName: exprs(4135)", "Delete SimpleName: e(4136)", "Delete ArrayAccess(4137)", "Delete VariableDeclarationFragment(4138)", "Delete VariableDeclarationStatement(4139)", "Delete SimpleName: expr(4140)", "Delete SimpleName: isDeferred(4141)", "Delete MethodInvocation(4142)", "Delete SimpleName: expr(4143)", "Delete SimpleName: expr(4144)", "Delete SimpleName: prepare(4145)", "Delete SimpleName: wrap(4146)", "Delete MethodInvocation(4147)", "Delete Assignment: =(4148)", "Delete ExpressionStatement(4149)", "Delete Block(4150)", "Delete IfStatement(4151)", "Delete SimpleName: expr(4152)", "Delete SimpleName: CompositeExpression(4153)", "Delete SimpleType: CompositeExpression(4154)", "Delete InstanceofExpression(4155)", "Delete SimpleName: printComposite(4156)", "Delete SimpleName: CompositeExpression(4157)", "Delete SimpleType: CompositeExpression(4158)", "Delete SimpleName: expr(4159)", "Delete CastExpression(4160)", "Delete MethodInvocation(4161)", "Delete ExpressionStatement(4162)", "Delete Block(4163)", "Delete SimpleName: doPrint(4164)", "Delete SimpleName: expr(4165)", "Delete SimpleName: evaluate(4166)", "Delete ThisExpression(4167)", "Delete MethodInvocation(4168)", "Delete MethodInvocation(4169)", "Delete ExpressionStatement(4170)", "Delete Block(4171)", "Delete IfStatement(4172)", "Delete Block(4173)", "Delete MethodDeclaration(4174)", "Delete TextElement: Prints a composite expression.(4175)", "Delete TagElement(4176)", "Delete SimpleName: composite(4177)", "Delete TextElement:  the composite expression(4178)", "Delete TagElement: @param(4179)", "Delete Javadoc(4180)", "Delete Modifier: protected(4181)", "Delete PrimitiveType: void(4182)", "Delete SimpleName: printComposite(4183)", "Delete SimpleName: CompositeExpression(4184)", "Delete SimpleType: CompositeExpression(4185)", "Delete SimpleName: composite(4186)", "Delete SingleVariableDeclaration(4187)", "Delete SimpleName: Expression(4188)", "Delete SimpleType: Expression(4189)", "Delete Dimension(4190)", "Delete ArrayType: Expression[](4191)", "Delete SimpleName: cexprs(4192)", "Delete QualifiedName: composite.exprs(4193)", "Delete VariableDeclarationFragment(4194)", "Delete VariableDeclarationStatement(4195)", "Delete Modifier: final(4196)", "Delete PrimitiveType: int(4197)", "Delete SimpleName: size(4198)", "Delete QualifiedName: cexprs.length(4199)", "Delete VariableDeclarationFragment(4200)", "Delete VariableDeclarationStatement(4201)", "Delete SimpleName: Object(4202)", "Delete SimpleType: Object(4203)", "Delete SimpleName: value(4204)", "Delete NullLiteral(4205)", "Delete VariableDeclarationFragment(4206)", "Delete VariableDeclarationStatement(4207)", "Delete PrimitiveType: int(4208)", "Delete SimpleName: e(4209)", "Delete NumberLiteral: 0(4210)", "Delete VariableDeclarationFragment(4211)", "Delete VariableDeclarationExpression(4212)", "Delete SimpleName: e(4213)", "Delete SimpleName: size(4214)", "Delete InfixExpression: <(4215)", "Delete SimpleName: e(4216)", "Delete PrefixExpression: ++(4217)", "Delete SimpleName: value(4218)", "Delete SimpleName: cexprs(4219)", "Delete SimpleName: e(4220)", "Delete ArrayAccess(4221)", "Delete SimpleName: evaluate(4222)", "Delete ThisExpression(4223)", "Delete MethodInvocation(4224)", "Delete Assignment: =(4225)", "Delete ExpressionStatement(4226)", "Delete SimpleName: doPrint(4227)", "Delete SimpleName: value(4228)", "Delete MethodInvocation(4229)", "Delete ExpressionStatement(4230)", "Delete Block(4231)", "Delete ForStatement(4232)", "Delete Block(4233)", "Delete MethodDeclaration(4234)", "Delete TextElement: Prints to output.(4235)", "Delete TextElement: <p>This will dynamically try to find the best suitable method in the writer through uberspection.(4236)", "Delete TextElement: Subclassing Writer by adding 'print' methods should be the preferred way to specialize output.(4237)", "Delete TextElement: </p>(4238)", "Delete TagElement(4239)", "Delete SimpleName: arg(4240)", "Delete TextElement:  the argument to print out(4241)", "Delete TagElement: @param(4242)", "Delete Javadoc(4243)", "Delete Modifier: private(4244)", "Delete PrimitiveType: void(4245)", "Delete SimpleName: doPrint(4246)", "Delete SimpleName: Object(4247)", "Delete SimpleType: Object(4248)", "Delete SimpleName: arg(4249)", "Delete SingleVariableDeclaration(4250)", "Delete SimpleName: arg(4251)", "Delete SimpleName: CharSequence(4252)", "Delete SimpleType: CharSequence(4253)", "Delete InstanceofExpression(4254)", "Delete SimpleName: writer(4255)", "Delete SimpleName: write(4256)", "Delete SimpleName: arg(4257)", "Delete SimpleName: toString(4258)", "Delete MethodInvocation(4259)", "Delete MethodInvocation(4260)", "Delete ExpressionStatement(4261)", "Delete Block(4262)", "Delete SimpleName: arg(4263)", "Delete NullLiteral(4264)", "Delete InfixExpression: !=(4265)", "Delete SimpleName: Object(4266)", "Delete SimpleType: Object(4267)", "Delete Dimension(4268)", "Delete ArrayType: Object[](4269)", "Delete SimpleName: value(4270)", "Delete SimpleName: arg(4271)", "Delete ArrayInitializer(4272)", "Delete VariableDeclarationFragment(4273)", "Delete VariableDeclarationStatement(4274)", "Delete SimpleName: Uberspect(4275)", "Delete SimpleType: Uberspect(4276)", "Delete SimpleName: uber(4277)", "Delete SimpleName: getEngine(4278)", "Delete MethodInvocation(4279)", "Delete SimpleName: getUberspect(4280)", "Delete MethodInvocation(4281)", "Delete VariableDeclarationFragment(4282)", "Delete VariableDeclarationStatement(4283)", "Delete SimpleName: JexlMethod(4284)", "Delete SimpleType: JexlMethod(4285)", "Delete SimpleName: method(4286)", "Delete SimpleName: uber(4287)", "Delete SimpleName: getMethod(4288)", "Delete SimpleName: writer(4289)", "Delete StringLiteral: \"print\"(4290)", "Delete SimpleName: value(4291)", "Delete NullLiteral(4292)", "Delete MethodInvocation(4293)", "Delete VariableDeclarationFragment(4294)", "Delete VariableDeclarationStatement(4295)", "Delete SimpleName: method(4296)", "Delete NullLiteral(4297)", "Delete InfixExpression: !=(4298)", "Delete SimpleName: method(4299)", "Delete SimpleName: invoke(4300)", "Delete SimpleName: writer(4301)", "Delete SimpleName: value(4302)", "Delete MethodInvocation(4303)", "Delete ExpressionStatement(4304)", "Delete Block(4305)", "Delete SimpleName: writer(4306)", "Delete SimpleName: write(4307)", "Delete SimpleName: arg(4308)", "Delete SimpleName: toString(4309)", "Delete MethodInvocation(4310)", "Delete MethodInvocation(4311)", "Delete ExpressionStatement(4312)", "Delete Block(4313)", "Delete IfStatement(4314)", "Delete Block(4315)", "Delete IfStatement(4316)", "Delete IfStatement(4317)", "Delete Block(4318)", "Delete QualifiedName: java.io.IOException(4319)", "Delete SimpleType: java.io.IOException(4320)", "Delete SimpleName: xio(4321)", "Delete SingleVariableDeclaration(4322)", "Delete SimpleName: createException(4323)", "Delete StringLiteral: \"call print\"(4324)", "Delete NullLiteral(4325)", "Delete SimpleName: xio(4326)", "Delete MethodInvocation(4327)", "Delete ThrowStatement(4328)", "Delete Block(4329)", "Delete CatchClause(4330)", "Delete QualifiedName: java.lang.Exception(4331)", "Delete SimpleType: java.lang.Exception(4332)", "Delete SimpleName: xany(4333)", "Delete SingleVariableDeclaration(4334)", "Delete SimpleName: createException(4335)", "Delete StringLiteral: \"invoke print\"(4336)", "Delete NullLiteral(4337)", "Delete SimpleName: xany(4338)", "Delete MethodInvocation(4339)", "Delete ThrowStatement(4340)", "Delete Block(4341)", "Delete CatchClause(4342)", "Delete TryStatement(4343)", "Delete Block(4344)", "Delete MethodDeclaration(4345)", "Delete TypeDeclaration: class(4346)", "Delete TextElement: Whether a sequence starts with a given set of characters (following spaces).(4347)", "Delete TextElement: <p>Space characters at beginning of line before the pattern are discarded.</p>(4348)", "Delete TagElement(4349)", "Delete SimpleName: sequence(4350)", "Delete TextElement:  the sequence(4351)", "Delete TagElement: @param(4352)", "Delete SimpleName: pattern(4353)", "Delete TextElement:  the pattern to match at start of sequence(4354)", "Delete TagElement: @param(4355)", "Delete TextElement:  the first position after end of pattern if it matches, -1 otherwise(4356)", "Delete TagElement: @return(4357)", "Delete Javadoc(4358)", "Delete Modifier: protected(4359)", "Delete PrimitiveType: int(4360)", "Delete SimpleName: startsWith(4361)", "Delete SimpleName: CharSequence(4362)", "Delete SimpleType: CharSequence(4363)", "Delete SimpleName: sequence(4364)", "Delete SingleVariableDeclaration(4365)", "Delete SimpleName: CharSequence(4366)", "Delete SimpleType: CharSequence(4367)", "Delete SimpleName: pattern(4368)", "Delete SingleVariableDeclaration(4369)", "Delete PrimitiveType: int(4370)", "Delete SimpleName: s(4371)", "Delete NumberLiteral: 0(4372)", "Delete VariableDeclarationFragment(4373)", "Delete VariableDeclarationStatement(4374)", "Delete SimpleName: Character(4375)", "Delete SimpleName: isSpaceChar(4376)", "Delete SimpleName: sequence(4377)", "Delete SimpleName: charAt(4378)", "Delete SimpleName: s(4379)", "Delete MethodInvocation(4380)", "Delete MethodInvocation(4381)", "Delete SimpleName: s(4382)", "Delete NumberLiteral: 1(4383)", "Delete Assignment: +=(4384)", "Delete ExpressionStatement(4385)", "Delete Block(4386)", "Delete WhileStatement(4387)", "Delete SimpleName: sequence(4388)", "Delete SimpleName: sequence(4389)", "Delete SimpleName: subSequence(4390)", "Delete SimpleName: s(4391)", "Delete SimpleName: sequence(4392)", "Delete SimpleName: length(4393)", "Delete MethodInvocation(4394)", "Delete MethodInvocation(4395)", "Delete Assignment: =(4396)", "Delete ExpressionStatement(4397)", "Delete SimpleName: pattern(4398)", "Delete SimpleName: length(4399)", "Delete MethodInvocation(4400)", "Delete SimpleName: sequence(4401)", "Delete SimpleName: length(4402)", "Delete MethodInvocation(4403)", "Delete InfixExpression: <=(4404)", "Delete SimpleName: sequence(4405)", "Delete SimpleName: subSequence(4406)", "Delete NumberLiteral: 0(4407)", "Delete SimpleName: pattern(4408)", "Delete SimpleName: length(4409)", "Delete MethodInvocation(4410)", "Delete MethodInvocation(4411)", "Delete SimpleName: equals(4412)", "Delete SimpleName: pattern(4413)", "Delete MethodInvocation(4414)", "Delete InfixExpression: &&(4415)", "Delete SimpleName: s(4416)", "Delete SimpleName: pattern(4417)", "Delete SimpleName: length(4418)", "Delete MethodInvocation(4419)", "Delete InfixExpression: +(4420)", "Delete ReturnStatement(4421)", "Delete Block(4422)", "Delete NumberLiteral: 1(4423)", "Delete PrefixExpression: -(4424)", "Delete ReturnStatement(4425)", "Delete Block(4426)", "Delete IfStatement(4427)", "Delete Block(4428)", "Delete MethodDeclaration(4429)", "Delete TextElement: Reads lines of a template grouping them by typed blocks.(4430)", "Delete TagElement(4431)", "Delete SimpleName: prefix(4432)", "Delete TextElement:  the directive prefix(4433)", "Delete TagElement: @param(4434)", "Delete SimpleName: source(4435)", "Delete TextElement:  the source reader(4436)", "Delete TagElement: @param(4437)", "Delete TextElement:  the list of blocks(4438)", "Delete TagElement: @return(4439)", "Delete TextElement:  2.1(4440)", "Delete TagElement: @since(4441)", "Delete Javadoc(4442)", "Delete Modifier: protected(4443)", "Delete SimpleName: List(4444)", "Delete SimpleType: List(4445)", "Delete SimpleName: TemplateBlock(4446)", "Delete SimpleType: TemplateBlock(4447)", "Delete ParameterizedType: List<TemplateBlock>(4448)", "Delete SimpleName: readTemplate(4449)", "Delete Modifier: final(4450)", "Delete SimpleName: String(4451)", "Delete SimpleType: String(4452)", "Delete SimpleName: prefix(4453)", "Delete SingleVariableDeclaration(4454)", "Delete SimpleName: Reader(4455)", "Delete SimpleType: Reader(4456)", "Delete SimpleName: source(4457)", "Delete SingleVariableDeclaration(4458)", "Delete PrimitiveType: int(4459)", "Delete SimpleName: prefixLen(4460)", "Delete SimpleName: prefix(4461)", "Delete SimpleName: length(4462)", "Delete MethodInvocation(4463)", "Delete VariableDeclarationFragment(4464)", "Delete VariableDeclarationStatement(4465)", "Delete SimpleName: List(4466)", "Delete SimpleType: List(4467)", "Delete SimpleName: TemplateBlock(4468)", "Delete SimpleType: TemplateBlock(4469)", "Delete ParameterizedType: List<TemplateBlock>(4470)", "Delete SimpleName: blocks(4471)", "Delete SimpleName: ArrayList(4472)", "Delete SimpleType: ArrayList(4473)", "Delete SimpleName: TemplateBlock(4474)", "Delete SimpleType: TemplateBlock(4475)", "Delete ParameterizedType: ArrayList<TemplateBlock>(4476)", "Delete ClassInstanceCreation(4477)", "Delete VariableDeclarationFragment(4478)", "Delete VariableDeclarationStatement(4479)", "Delete SimpleName: BufferedReader(4480)", "Delete SimpleType: BufferedReader(4481)", "Delete SimpleName: reader(4482)", "Delete VariableDeclarationFragment(4483)", "Delete VariableDeclarationStatement(4484)", "Delete SimpleName: source(4485)", "Delete SimpleName: BufferedReader(4486)", "Delete SimpleType: BufferedReader(4487)", "Delete InstanceofExpression(4488)", "Delete SimpleName: reader(4489)", "Delete SimpleName: BufferedReader(4490)", "Delete SimpleType: BufferedReader(4491)", "Delete SimpleName: source(4492)", "Delete CastExpression(4493)", "Delete Assignment: =(4494)", "Delete ExpressionStatement(4495)", "Delete Block(4496)", "Delete SimpleName: reader(4497)", "Delete SimpleName: BufferedReader(4498)", "Delete SimpleType: BufferedReader(4499)", "Delete SimpleName: source(4500)", "Delete ClassInstanceCreation(4501)", "Delete Assignment: =(4502)", "Delete ExpressionStatement(4503)", "Delete Block(4504)", "Delete IfStatement(4505)", "Delete SimpleName: StringBuilder(4506)", "Delete SimpleType: StringBuilder(4507)", "Delete SimpleName: strb(4508)", "Delete SimpleName: StringBuilder(4509)", "Delete SimpleType: StringBuilder(4510)", "Delete ClassInstanceCreation(4511)", "Delete VariableDeclarationFragment(4512)", "Delete VariableDeclarationStatement(4513)", "Delete SimpleName: BlockType(4514)", "Delete SimpleType: BlockType(4515)", "Delete SimpleName: type(4516)", "Delete NullLiteral(4517)", "Delete VariableDeclarationFragment(4518)", "Delete VariableDeclarationStatement(4519)", "Delete BooleanLiteral: true(4520)", "Delete SimpleName: CharSequence(4521)", "Delete SimpleType: CharSequence(4522)", "Delete SimpleName: line(4523)", "Delete SimpleName: reader(4524)", "Delete SimpleName: readLine(4525)", "Delete MethodInvocation(4526)", "Delete VariableDeclarationFragment(4527)", "Delete VariableDeclarationStatement(4528)", "Delete SimpleName: line(4529)", "Delete NullLiteral(4530)", "Delete InfixExpression: ==(4531)", "Delete SimpleName: TemplateBlock(4532)", "Delete SimpleType: TemplateBlock(4533)", "Delete SimpleName: block(4534)", "Delete SimpleName: TemplateBlock(4535)", "Delete SimpleType: TemplateBlock(4536)", "Delete SimpleName: type(4537)", "Delete SimpleName: strb(4538)", "Delete SimpleName: toString(4539)", "Delete MethodInvocation(4540)", "Delete ClassInstanceCreation(4541)", "Delete VariableDeclarationFragment(4542)", "Delete VariableDeclarationStatement(4543)", "Delete SimpleName: blocks(4544)", "Delete SimpleName: add(4545)", "Delete SimpleName: block(4546)", "Delete MethodInvocation(4547)", "Delete ExpressionStatement(4548)", "Delete BreakStatement(4549)", "Delete Block(4550)", "Delete SimpleName: type(4551)", "Delete NullLiteral(4552)", "Delete InfixExpression: ==(4553)", "Delete SimpleName: prefixLen(4554)", "Delete SimpleName: startsWith(4555)", "Delete SimpleName: line(4556)", "Delete SimpleName: prefix(4557)", "Delete MethodInvocation(4558)", "Delete Assignment: =(4559)", "Delete ExpressionStatement(4560)", "Delete SimpleName: prefixLen(4561)", "Delete NumberLiteral: 0(4562)", "Delete InfixExpression: >=(4563)", "Delete SimpleName: type(4564)", "Delete QualifiedName: BlockType.DIRECTIVE(4565)", "Delete Assignment: =(4566)", "Delete ExpressionStatement(4567)", "Delete SimpleName: strb(4568)", "Delete SimpleName: append(4569)", "Delete SimpleName: line(4570)", "Delete SimpleName: subSequence(4571)", "Delete SimpleName: prefixLen(4572)", "Delete SimpleName: line(4573)", "Delete SimpleName: length(4574)", "Delete MethodInvocation(4575)", "Delete MethodInvocation(4576)", "Delete MethodInvocation(4577)", "Delete ExpressionStatement(4578)", "Delete Block(4579)", "Delete SimpleName: type(4580)", "Delete QualifiedName: BlockType.VERBATIM(4581)", "Delete Assignment: =(4582)", "Delete ExpressionStatement(4583)", "Delete SimpleName: strb(4584)", "Delete SimpleName: append(4585)", "Delete SimpleName: line(4586)", "Delete SimpleName: subSequence(4587)", "Delete NumberLiteral: 0(4588)", "Delete SimpleName: line(4589)", "Delete SimpleName: length(4590)", "Delete MethodInvocation(4591)", "Delete MethodInvocation(4592)", "Delete MethodInvocation(4593)", "Delete ExpressionStatement(4594)", "Delete SimpleName: strb(4595)", "Delete SimpleName: append(4596)", "Delete CharacterLiteral: '\\n'(4597)", "Delete MethodInvocation(4598)", "Delete ExpressionStatement(4599)", "Delete Block(4600)", "Delete IfStatement(4601)", "Delete Block(4602)", "Delete SimpleName: type(4603)", "Delete QualifiedName: BlockType.DIRECTIVE(4604)", "Delete InfixExpression: ==(4605)", "Delete SimpleName: prefixLen(4606)", "Delete SimpleName: startsWith(4607)", "Delete SimpleName: line(4608)", "Delete SimpleName: prefix(4609)", "Delete MethodInvocation(4610)", "Delete Assignment: =(4611)", "Delete ExpressionStatement(4612)", "Delete SimpleName: prefixLen(4613)", "Delete NumberLiteral: 0(4614)", "Delete InfixExpression: <(4615)", "Delete SimpleName: TemplateBlock(4616)", "Delete SimpleType: TemplateBlock(4617)", "Delete SimpleName: code(4618)", "Delete SimpleName: TemplateBlock(4619)", "Delete SimpleType: TemplateBlock(4620)", "Delete QualifiedName: BlockType.DIRECTIVE(4621)", "Delete SimpleName: strb(4622)", "Delete SimpleName: toString(4623)", "Delete MethodInvocation(4624)", "Delete ClassInstanceCreation(4625)", "Delete VariableDeclarationFragment(4626)", "Delete VariableDeclarationStatement(4627)", "Delete SimpleName: strb(4628)", "Delete SimpleName: delete(4629)", "Delete NumberLiteral: 0(4630)", "Delete QualifiedName: Integer.MAX_VALUE(4631)", "Delete MethodInvocation(4632)", "Delete ExpressionStatement(4633)", "Delete SimpleName: blocks(4634)", "Delete SimpleName: add(4635)", "Delete SimpleName: code(4636)", "Delete MethodInvocation(4637)", "Delete ExpressionStatement(4638)", "Delete SimpleName: type(4639)", "Delete QualifiedName: BlockType.VERBATIM(4640)", "Delete Assignment: =(4641)", "Delete ExpressionStatement(4642)", "Delete SimpleName: strb(4643)", "Delete SimpleName: append(4644)", "Delete SimpleName: line(4645)", "Delete SimpleName: subSequence(4646)", "Delete NumberLiteral: 0(4647)", "Delete SimpleName: line(4648)", "Delete SimpleName: length(4649)", "Delete MethodInvocation(4650)", "Delete MethodInvocation(4651)", "Delete MethodInvocation(4652)", "Delete ExpressionStatement(4653)", "Delete Block(4654)", "Delete SimpleName: strb(4655)", "Delete SimpleName: append(4656)", "Delete SimpleName: line(4657)", "Delete SimpleName: subSequence(4658)", "Delete SimpleName: prefixLen(4659)", "Delete SimpleName: line(4660)", "Delete SimpleName: length(4661)", "Delete MethodInvocation(4662)", "Delete MethodInvocation(4663)", "Delete MethodInvocation(4664)", "Delete ExpressionStatement(4665)", "Delete Block(4666)", "Delete IfStatement(4667)", "Delete Block(4668)", "Delete SimpleName: type(4669)", "Delete QualifiedName: BlockType.VERBATIM(4670)", "Delete InfixExpression: ==(4671)", "Delete SimpleName: prefixLen(4672)", "Delete SimpleName: startsWith(4673)", "Delete SimpleName: line(4674)", "Delete SimpleName: prefix(4675)", "Delete MethodInvocation(4676)", "Delete Assignment: =(4677)", "Delete ExpressionStatement(4678)", "Delete SimpleName: prefixLen(4679)", "Delete NumberLiteral: 0(4680)", "Delete InfixExpression: >=(4681)", "Delete SimpleName: strb(4682)", "Delete SimpleName: append(4683)", "Delete CharacterLiteral: '\\n'(4684)", "Delete MethodInvocation(4685)", "Delete ExpressionStatement(4686)", "Delete SimpleName: TemplateBlock(4687)", "Delete SimpleType: TemplateBlock(4688)", "Delete SimpleName: verbatim(4689)", "Delete SimpleName: TemplateBlock(4690)", "Delete SimpleType: TemplateBlock(4691)", "Delete QualifiedName: BlockType.VERBATIM(4692)", "Delete SimpleName: strb(4693)", "Delete SimpleName: toString(4694)", "Delete MethodInvocation(4695)", "Delete ClassInstanceCreation(4696)", "Delete VariableDeclarationFragment(4697)", "Delete VariableDeclarationStatement(4698)", "Delete SimpleName: strb(4699)", "Delete SimpleName: delete(4700)", "Delete NumberLiteral: 0(4701)", "Delete QualifiedName: Integer.MAX_VALUE(4702)", "Delete MethodInvocation(4703)", "Delete ExpressionStatement(4704)", "Delete SimpleName: blocks(4705)", "Delete SimpleName: add(4706)", "Delete SimpleName: verbatim(4707)", "Delete MethodInvocation(4708)", "Delete ExpressionStatement(4709)", "Delete SimpleName: type(4710)", "Delete QualifiedName: BlockType.DIRECTIVE(4711)", "Delete Assignment: =(4712)", "Delete ExpressionStatement(4713)", "Delete SimpleName: strb(4714)", "Delete SimpleName: append(4715)", "Delete SimpleName: line(4716)", "Delete SimpleName: subSequence(4717)", "Delete SimpleName: prefixLen(4718)", "Delete SimpleName: line(4719)", "Delete SimpleName: length(4720)", "Delete MethodInvocation(4721)", "Delete MethodInvocation(4722)", "Delete MethodInvocation(4723)", "Delete ExpressionStatement(4724)", "Delete Block(4725)", "Delete SimpleName: strb(4726)", "Delete SimpleName: append(4727)", "Delete SimpleName: line(4728)", "Delete SimpleName: subSequence(4729)", "Delete NumberLiteral: 0(4730)", "Delete SimpleName: line(4731)", "Delete SimpleName: length(4732)", "Delete MethodInvocation(4733)", "Delete MethodInvocation(4734)", "Delete MethodInvocation(4735)", "Delete ExpressionStatement(4736)", "Delete Block(4737)", "Delete IfStatement(4738)", "Delete Block(4739)", "Delete IfStatement(4740)", "Delete IfStatement(4741)", "Delete IfStatement(4742)", "Delete IfStatement(4743)", "Delete Block(4744)", "Delete WhileStatement(4745)", "Delete SimpleName: blocks(4746)", "Delete ReturnStatement(4747)", "Delete Block(4748)", "Delete SimpleName: IOException(4749)", "Delete SimpleType: IOException(4750)", "Delete SimpleName: xio(4751)", "Delete SingleVariableDeclaration(4752)", "Delete NullLiteral(4753)", "Delete ReturnStatement(4754)", "Delete Block(4755)", "Delete CatchClause(4756)", "Delete TryStatement(4757)", "Delete Block(4758)", "Delete MethodDeclaration(4759)", "Delete TextElement: Creates a new template.(4760)", "Delete TagElement(4761)", "Delete SimpleName: prefix(4762)", "Delete TextElement:  the directive prefix(4763)", "Delete TagElement: @param(4764)", "Delete SimpleName: source(4765)", "Delete TextElement:  the source(4766)", "Delete TagElement: @param(4767)", "Delete SimpleName: parms(4768)", "Delete TextElement:  the parameter names(4769)", "Delete TagElement: @param(4770)", "Delete TextElement:  the template(4771)", "Delete TagElement: @return(4772)", "Delete TextElement:  2.1(4773)", "Delete TagElement: @since(4774)", "Delete Javadoc(4775)", "Delete Modifier: public(4776)", "Delete SimpleName: Template(4777)", "Delete SimpleType: Template(4778)", "Delete SimpleName: createTemplate(4779)", "Delete SimpleName: String(4780)", "Delete SimpleType: String(4781)", "Delete SimpleName: prefix(4782)", "Delete SingleVariableDeclaration(4783)", "Delete SimpleName: Reader(4784)", "Delete SimpleType: Reader(4785)", "Delete SimpleName: source(4786)", "Delete SingleVariableDeclaration(4787)", "Delete SimpleName: String(4788)", "Delete SimpleType: String(4789)", "Delete SimpleName: parms(4790)", "Delete SingleVariableDeclaration(4791)", "Delete SimpleName: Template(4792)", "Delete SimpleType: Template(4793)", "Delete SimpleName: prefix(4794)", "Delete SimpleName: source(4795)", "Delete SimpleName: parms(4796)", "Delete ClassInstanceCreation(4797)", "Delete ReturnStatement(4798)", "Delete Block(4799)", "Delete MethodDeclaration(4800)", "Delete TextElement: Creates a new template.(4801)", "Delete TagElement(4802)", "Delete SimpleName: source(4803)", "Delete TextElement:  the source(4804)", "Delete TagElement: @param(4805)", "Delete SimpleName: parms(4806)", "Delete TextElement:  the parameter names(4807)", "Delete TagElement: @param(4808)", "Delete TextElement:  the template(4809)", "Delete TagElement: @return(4810)", "Delete TextElement:  2.1(4811)", "Delete TagElement: @since(4812)", "Delete Javadoc(4813)", "Delete Modifier: public(4814)", "Delete SimpleName: Template(4815)", "Delete SimpleType: Template(4816)", "Delete SimpleName: createTemplate(4817)", "Delete SimpleName: String(4818)", "Delete SimpleType: String(4819)", "Delete SimpleName: source(4820)", "Delete SingleVariableDeclaration(4821)", "Delete SimpleName: String(4822)", "Delete SimpleType: String(4823)", "Delete SimpleName: parms(4824)", "Delete SingleVariableDeclaration(4825)", "Delete SimpleName: Template(4826)", "Delete SimpleType: Template(4827)", "Delete StringLiteral: \"$$\"(4828)", "Delete SimpleName: StringReader(4829)", "Delete SimpleType: StringReader(4830)", "Delete SimpleName: source(4831)", "Delete ClassInstanceCreation(4832)", "Delete SimpleName: parms(4833)", "Delete ClassInstanceCreation(4834)", "Delete ReturnStatement(4835)", "Delete Block(4836)", "Delete MethodDeclaration(4837)", "Delete TextElement: Creates a new template.(4838)", "Delete TagElement(4839)", "Delete SimpleName: source(4840)", "Delete TextElement:  the source(4841)", "Delete TagElement: @param(4842)", "Delete TextElement:  the template(4843)", "Delete TagElement: @return(4844)", "Delete TextElement:  2.1(4845)", "Delete TagElement: @since(4846)", "Delete Javadoc(4847)", "Delete Modifier: public(4848)", "Delete SimpleName: Template(4849)", "Delete SimpleType: Template(4850)", "Delete SimpleName: createTemplate(4851)", "Delete SimpleName: String(4852)", "Delete SimpleType: String(4853)", "Delete SimpleName: source(4854)", "Delete SingleVariableDeclaration(4855)", "Delete SimpleName: Template(4856)", "Delete SimpleType: Template(4857)", "Delete StringLiteral: \"$$\"(4858)", "Delete SimpleName: StringReader(4859)", "Delete SimpleType: StringReader(4860)", "Delete SimpleName: source(4861)", "Delete ClassInstanceCreation(4862)", "Delete SimpleName: String(4863)", "Delete SimpleType: String(4864)", "Delete Dimension(4865)", "Delete ArrayType: String[](4866)", "Delete NullLiteral(4867)", "Delete CastExpression(4868)", "Delete ClassInstanceCreation(4869)", "Delete ReturnStatement(4870)", "Delete Block(4871)", "Delete MethodDeclaration(4872)", "Delete TypeDeclaration: class(4873)"]}}, {"Expression_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodRef", "DEL TagElement: @link", "DEL SimpleName: Expression", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL TextElement:  The result of this evaluation", "DEL TextElement: An expression is different than a script - it is simply a reference of", "DEL TextElement: .", "DEL SimpleName: Expression", "DEL TypeDeclaration: interface", "DEL SimpleName: context", "DEL SimpleType: String", "DEL SimpleType: JexlContext", "DEL TextElement: Represents a single JEXL expression.", "DEL TextElement: </p>", "DEL TextElement: an expression.", "DEL TagElement", "DEL SimpleName: String", "DEL TextElement: This simple interface provides access to the underlying expression through", "DEL TagElement: @return", "DEL TextElement: <p>", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL TextElement:  A JexlContext containing variables.", "DEL TagElement: @return", "DEL SimpleName: JexlContext", "DEL SimpleName: context", "DEL SimpleName: getExpression", "DEL TextElement:  1.0", "DEL TextElement: <p>", "DEL Modifier: public", "DEL TextElement: Evaluates the expression with the variables contained in the", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL TextElement: supplied ", "DEL SingleVariableDeclaration", "DEL TextElement:  on any error", "DEL MethodDeclaration", "DEL SimpleName: evaluate", "DEL SimpleName: String", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL TextElement:  The JEXL expression to be evaluated", "DEL SimpleName: dump", "DEL TextElement:  the JEXL expression", "DEL TagElement: @throws", "DEL TagElement", "DEL SimpleName: getExpression", "DEL Javadoc", "DEL TextElement: .", "DEL TextElement: </p>", "DEL TextElement: Returns the JEXL expression this Expression was created with.", "DEL TagElement", "DEL TagElement: @since", "DEL TagElement", "DEL TagElement: @link", "DEL TextElement: Returns the JEXL expression by reconstructing it from the parsed tree.", "DEL Javadoc", "DEL SimpleName: JexlException"]}]}}, {"Expression_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Represents a single JEXL expression.(2)", "Delete TextElement: <p>(3)", "Delete TextElement: This simple interface provides access to the underlying expression through(4)", "Delete SimpleName: Expression(5)", "Delete SimpleName: getExpression(6)", "Delete MethodRef(7)", "Delete TagElement: @link(8)", "Delete TextElement: .(9)", "Delete TextElement: </p>(10)", "Delete TextElement: <p>(11)", "Delete TextElement: An expression is different than a script - it is simply a reference of(12)", "Delete TextElement: an expression.(13)", "Delete TextElement: </p>(14)", "Delete TagElement(15)", "Delete TextElement:  1.0(16)", "Delete TagElement: @since(17)", "Delete Javadoc(18)", "Delete Modifier: public(19)", "Delete SimpleName: Expression(20)", "Delete TextElement: Evaluates the expression with the variables contained in the(21)", "Delete TextElement: supplied (22)", "Delete SimpleName: JexlContext(23)", "Delete TagElement: @link(24)", "Delete TextElement: .(25)", "Delete TagElement(26)", "Delete SimpleName: context(27)", "Delete TextElement:  A JexlContext containing variables.(28)", "Delete TagElement: @param(29)", "Delete TextElement:  The result of this evaluation(30)", "Delete TagElement: @return(31)", "Delete SimpleName: JexlException(32)", "Delete TextElement:  on any error(33)", "Delete TagElement: @throws(34)", "Delete Javadoc(35)", "Delete SimpleName: Object(36)", "Delete SimpleType: Object(37)", "Delete SimpleName: evaluate(38)", "Delete SimpleName: JexlContext(39)", "Delete SimpleType: JexlContext(40)", "Delete SimpleName: context(41)", "Delete SingleVariableDeclaration(42)", "Delete MethodDeclaration(43)", "Delete TextElement: Returns the JEXL expression this Expression was created with.(44)", "Delete TagElement(45)", "Delete TextElement:  The JEXL expression to be evaluated(46)", "Delete TagElement: @return(47)", "Delete Javadoc(48)", "Delete SimpleName: String(49)", "Delete SimpleType: String(50)", "Delete SimpleName: getExpression(51)", "Delete MethodDeclaration(52)", "Delete TextElement: Returns the JEXL expression by reconstructing it from the parsed tree.(53)", "Delete TagElement(54)", "Delete TextElement:  the JEXL expression(55)", "Delete TagElement: @return(56)", "Delete Javadoc(57)", "Delete SimpleName: String(58)", "Delete SimpleType: String(59)", "Delete SimpleName: dump(60)", "Delete MethodDeclaration(61)", "Delete TypeDeclaration: interface(62)"]}}, {"ExpressionFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlEngine"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Javadoc", "DEL TextElement: <p>", "DEL SimpleName: ExpressionFactory", "DEL TextElement: <p>", "DEL TextElement: Expression expression = ExpressionFactory.createExpression( jexl );", "DEL TagElement", "DEL Modifier: final", "DEL MarkerAnnotation", "DEL TextElement: <pre>", "DEL TextElement: String jexl = \"array[1]\";", "DEL TextElement:  $Id$", "DEL TextElement: </p>", "DEL TextElement:  1.0", "DEL TextElement: When an ", "DEL TextElement:  object is created, the JEXL syntax is", "DEL TextElement: that serves the same purpose with more control is recommended.", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL TagElement: @link", "DEL SimpleName: Expression", "DEL TagElement: @link", "DEL TextElement:  Create a JexlEngine and use the createScript method on that instead.", "DEL TextElement: <p>", "DEL TextElement: parsed and verified.  If the supplied expression is neither an", "DEL TagElement: @deprecated", "DEL TextElement: </p>", "DEL SimpleName: JexlOne", "DEL TextElement: valid JEXL syntax to the static createExpression() method:", "DEL TextElement: To create a JEXL Expression object, pass", "DEL TextElement: expression nor a reference, an exception is thrown from createException().", "DEL TextElement: Creates Expression objects. ", "DEL TextElement: </pre>", "DEL SimpleName: JexlEngine", "DEL TagElement: @since", "DEL TagElement: @version", "DEL SimpleType: JexlOne", "DEL TextElement: This is a convenience class; using an instance of a ", "DEL SimpleName: Deprecated", "DEL TextElement: </p>"]}]}}, {"ExpressionFactory_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Creates Expression objects. (4)", "Delete TextElement: <p>(5)", "Delete TextElement: To create a JEXL Expression object, pass(6)", "Delete TextElement: valid JEXL syntax to the static createExpression() method:(7)", "Delete TextElement: </p>(8)", "Delete TextElement: <pre>(9)", "Delete TextElement: String jexl = \"array[1]\";(10)", "Delete TextElement: Expression expression = ExpressionFactory.createExpression( jexl );(11)", "Delete TextElement: </pre>(12)", "Delete TextElement: <p>(13)", "Delete TextElement: When an (14)", "Delete SimpleName: Expression(15)", "Delete TagElement: @link(16)", "Delete TextElement:  object is created, the JEXL syntax is(17)", "Delete TextElement: parsed and verified.  If the supplied expression is neither an(18)", "Delete TextElement: expression nor a reference, an exception is thrown from createException().(19)", "Delete TextElement: </p>(20)", "Delete TextElement: <p>(21)", "Delete TextElement: This is a convenience class; using an instance of a (22)", "Delete SimpleName: JexlEngine(23)", "Delete TagElement: @link(24)", "Delete TextElement: that serves the same purpose with more control is recommended.(25)", "Delete TextElement: </p>(26)", "Delete TagElement(27)", "Delete TextElement:  1.0(28)", "Delete TagElement: @since(29)", "Delete TextElement:  $Id$(30)", "Delete TagElement: @version(31)", "Delete TextElement:  Create a JexlEngine and use the createScript method on that instead.(32)", "Delete TagElement: @deprecated(33)", "Delete Javadoc(34)", "Delete SimpleName: Deprecated(35)", "Delete MarkerAnnotation(36)", "Delete Modifier: public(37)", "Delete Modifier: final(38)", "Delete SimpleName: ExpressionFactory(39)", "Delete SimpleName: JexlOne(40)", "Delete SimpleType: JexlOne(41)", "Delete TypeDeclaration: class(42)"]}}, {"JexlContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: has", "DEL SimpleType: Object", "DEL TextElement:  the value", "DEL TagElement: @param", "DEL TextElement:  $Id$", "DEL SimpleName: name", "DEL TextElement: <p>A variable may be defined with a null value; this method checks whether the", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL TypeDeclaration: interface", "DEL TagElement", "DEL Javadoc", "DEL Javadoc", "DEL TagElement: @return", "DEL TextElement:  true if it exists, false otherwise", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL TextElement:  the variable's name", "DEL TextElement:  the variable's value", "DEL Modifier: public", "DEL TextElement: Sets the value of a variable.", "DEL TextElement: variables may lead to unexpected results unless specified otherwise.</p>", "DEL TagElement: @since", "DEL TagElement: @version", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL Javadoc", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: name", "DEL TextElement: value is null or if the variable is undefined.</p>", "DEL PrimitiveType: boolean", "DEL SimpleName: name", "DEL SimpleName: value", "DEL SimpleName: get", "DEL SimpleType: String", "DEL TextElement: Checks whether a variable is defined in this context.", "DEL SimpleName: name", "DEL TagElement: @param", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TextElement:  the variable's name", "DEL SimpleName: name", "DEL TagElement: @return", "DEL SimpleName: set", "DEL TagElement: @param", "DEL TextElement: Gets the value of a variable.", "DEL TextElement: Manages variables which can be referenced in a JEXL expression.", "DEL TextElement:  the variable's name", "DEL TextElement: <p>Note that JEXL may use '$jexl' and '$ujexl' variables for internal purpose; setting or getting those", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: JexlContext", "DEL SimpleType: String", "DEL TextElement:  1.0", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: name"]}]}}, {"JexlContext_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Manages variables which can be referenced in a JEXL expression.(2)", "Delete TextElement: <p>Note that JEXL may use '$jexl' and '$ujexl' variables for internal purpose; setting or getting those(3)", "Delete TextElement: variables may lead to unexpected results unless specified otherwise.</p>(4)", "Delete TagElement(5)", "Delete TextElement:  1.0(6)", "Delete TagElement: @since(7)", "Delete TextElement:  $Id$(8)", "Delete TagElement: @version(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: JexlContext(12)", "Delete TextElement: Gets the value of a variable.(13)", "Delete TagElement(14)", "Delete SimpleName: name(15)", "Delete TextElement:  the variable's name(16)", "Delete TagElement: @param(17)", "Delete TextElement:  the value(18)", "Delete TagElement: @return(19)", "Delete Javadoc(20)", "Delete SimpleName: Object(21)", "Delete SimpleType: Object(22)", "Delete SimpleName: get(23)", "Delete SimpleName: String(24)", "Delete SimpleType: String(25)", "Delete SimpleName: name(26)", "Delete SingleVariableDeclaration(27)", "Delete MethodDeclaration(28)", "Delete TextElement: Sets the value of a variable.(29)", "Delete TagElement(30)", "Delete SimpleName: name(31)", "Delete TextElement:  the variable's name(32)", "Delete TagElement: @param(33)", "Delete SimpleName: value(34)", "Delete TextElement:  the variable's value(35)", "Delete TagElement: @param(36)", "Delete Javadoc(37)", "Delete PrimitiveType: void(38)", "Delete SimpleName: set(39)", "Delete SimpleName: String(40)", "Delete SimpleType: String(41)", "Delete SimpleName: name(42)", "Delete SingleVariableDeclaration(43)", "Delete SimpleName: Object(44)", "Delete SimpleType: Object(45)", "Delete SimpleName: value(46)", "Delete SingleVariableDeclaration(47)", "Delete MethodDeclaration(48)", "Delete TextElement: Checks whether a variable is defined in this context.(49)", "Delete TextElement: <p>A variable may be defined with a null value; this method checks whether the(50)", "Delete TextElement: value is null or if the variable is undefined.</p>(51)", "Delete TagElement(52)", "Delete SimpleName: name(53)", "Delete TextElement:  the variable's name(54)", "Delete TagElement: @param(55)", "Delete TextElement:  true if it exists, false otherwise(56)", "Delete TagElement: @return(57)", "Delete Javadoc(58)", "Delete PrimitiveType: boolean(59)", "Delete SimpleName: has(60)", "Delete SimpleName: String(61)", "Delete SimpleType: String(62)", "Delete SimpleName: name(63)", "Delete SingleVariableDeclaration(64)", "Delete MethodDeclaration(65)", "Delete TypeDeclaration: interface(66)"]}}, {"JexlOne_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.File"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.net.URL", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlEngine"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.Interpreter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.JexlNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL TextElement: This implements Jexl-1.x (Jelly) compatible behaviors on top of Jexl-2.0.", "DEL Javadoc", "DEL SimpleName: put", "DEL SimpleName: Deprecated", "DEL TagElement", "DEL MarkerAnnotation", "DEL QualifiedName: JexlOneEngine.EMPTY_CONTEXT", "DEL Modifier: public", "DEL SimpleName: Object", "DEL SimpleName: CACHE_SIZE", "DEL TextElement:  which can be executed with a", "DEL SimpleName: createScript", "DEL SimpleType: String", "DEL SimpleName: String", "DEL ThrowStatement", "DEL MethodInvocation", "DEL SimpleName: Script", "DEL Block", "DEL SimpleName: unknownVariable", "DEL SimpleName: text", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL TextElement: Private constructor, ensure no instance.", "DEL QualifiedName: org.apache.commons.jexl2.JexlContext", "DEL SimpleName: String", "DEL Modifier: private", "DEL TextElement:  a oac.jexl context", "DEL TextElement: parsing the script.", "DEL SimpleName: createScript", "DEL Modifier: static", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL TextElement: The Jexl1.x context. ", "DEL QualifiedName: org.apache.commons.jexl2.JexlContext", "DEL TagElement", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: aContext", "DEL SimpleName: IllegalStateException", "DEL TextElement: Must not be null. Must be a readable file.", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Javadoc", "DEL Block", "DEL MarkerAnnotation", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL SimpleName: Script", "DEL CastExpression", "DEL SimpleName: CACHE_SIZE", "DEL SimpleName: Interpreter", "DEL SimpleName: evaluate", "DEL TextElement: Creates a Script from a ", "DEL SimpleName: aContext", "DEL TagElement: @inheritDoc", "DEL Modifier: static", "DEL Modifier: public", "DEL TagElement: @return", "DEL InstanceofExpression", "DEL TypeDeclaration: class", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SimpleName: createExpression", "DEL Modifier: private", "DEL SimpleName: JexlContext", "DEL SimpleName: getCause", "DEL SimpleName: Exception", "DEL SimpleType: JexlContext", "DEL SuperMethodInvocation", "DEL Modifier: static", "DEL TextElement: Creates a jexl2.JexlContext from a jexl.JexlContext.", "DEL TagElement: @return", "DEL SimpleName: ctxt10", "DEL SimpleName: setSilent", "DEL SimpleType: JexlEngine", "DEL Modifier: public", "DEL Modifier: static", "DEL TagElement: @param", "DEL SimpleType: Exception", "DEL TagElement: @throws", "DEL TextElement:  A ", "DEL SimpleName: expression", "DEL MarkerAnnotation", "DEL Modifier: private", "DEL SimpleName: name", "DEL SimpleName: ContextAdapter", "DEL TextElement: Creates a Script from a String containing valid JEXL syntax.", "DEL SimpleName: RuntimeException", "DEL SingleVariableDeclaration", "DEL TextElement:  A ", "DEL CastExpression", "DEL SimpleName: xjexl", "DEL SimpleType: IllegalStateException", "DEL SimpleName: JexlException", "DEL Modifier: static", "DEL SimpleName: JexlOneExpression", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TagElement: @deprecated", "DEL SimpleName: xjexl", "DEL Modifier: private", "DEL SimpleName: scriptFile", "DEL ReturnStatement", "DEL TextElement:  which can be executed with a", "DEL SimpleName: legacy", "DEL ThisExpression", "DEL TextElement:  Create a JexlEngine and use the createScript method on that instead.", "DEL SimpleType: Object", "DEL SimpleName: JexlContext", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: legacy", "DEL TagElement: @param", "DEL TextElement: Must not be null. Must be a readable file.", "DEL SimpleType: File", "DEL Block", "DEL Javadoc", "DEL SimpleName: tree", "DEL SimpleType: String", "DEL TagElement: @inheritDoc", "DEL SimpleType: IllegalStateException", "DEL MethodInvocation", "DEL SimpleName: scriptFile", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: This method parses the script and validates the syntax.", "DEL Modifier: public", "DEL SimpleName: aContext", "DEL SimpleType: JexlOneInterpreter", "DEL SimpleName: context", "DEL SimpleName: Object", "DEL TextElement:  Create a JexlEngine and use createExpression() on that", "DEL TextElement: Default ctor, creates a cache and sets instance to verbose (ie non-silent).", "DEL SimpleName: Script", "DEL SimpleName: Override", "DEL SimpleType: JexlException", "DEL ConditionalExpression", "DEL SimpleName: expr", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlContext", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL TextElement", "DEL TypeDeclaration: class", "DEL MethodDeclaration", "DEL SimpleName: JexlOne", "DEL SimpleName: aContext", "DEL SimpleName: e", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: set", "DEL SimpleName: Override", "DEL PrimitiveType: int", "DEL SuperMethodInvocation", "DEL SimpleName: String", "DEL SimpleName: ref", "DEL SingleVariableDeclaration", "DEL Modifier: static", "DEL SimpleName: node", "DEL TextElement:  A String containing valid JEXL syntax", "DEL Modifier: final", "DEL MarkerAnnotation", "DEL SimpleName: xjexl", "DEL SimpleName: Script", "DEL TextElement:  ", "DEL SimpleType: Object", "DEL Modifier: private", "DEL SimpleName: getVars", "DEL TagElement", "DEL TextElement:  which can be executed with a", "DEL SimpleType: org.apache.commons.jexl2.ExpressionImpl", "DEL SimpleName: Exception", "DEL SimpleName: JexlContext", "DEL ReturnStatement", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalStateException", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: JexlOneEngine", "DEL Modifier: protected", "DEL TagElement: @return", "DEL Modifier: final", "DEL Block", "DEL Modifier: protected", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlContext", "DEL TagElement", "DEL SimpleName: ContextAdapter", "DEL Block", "DEL ClassInstanceCreation", "DEL InstanceofExpression", "DEL Javadoc", "DEL SimpleName: JexlContext", "DEL TagElement: @param", "DEL TagElement: @inheritDoc", "DEL TypeDeclaration: class", "DEL SimpleType: org.apache.commons.jexl2.JexlContext", "DEL SimpleType: JexlOneEngine", "DEL SimpleName: invocationFailed", "DEL SimpleName: expr", "DEL ThrowStatement", "DEL SimpleName: Deprecated", "DEL TagElement", "DEL TagElement", "DEL Javadoc", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: expression", "DEL TextElement:  containing valid JEXL syntax.", "DEL TypeDeclaration: class", "DEL Block", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleType: IllegalStateException", "DEL Javadoc", "DEL TagElement: @param", "DEL TextElement: Creates an instance.", "DEL SimpleName: scriptFile", "DEL SimpleName: EngineHolder", "DEL TagElement", "DEL ReturnStatement", "DEL TextElement: Lazy JexlEngine singleton through on demand holder idiom.", "DEL MethodInvocation", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL TextElement:  A ", "DEL ThisExpression", "DEL SimpleType: Script", "DEL MethodDeclaration", "DEL SimpleType: JexlOneExpression", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL TagElement: @inheritDoc", "DEL Modifier: final", "DEL SimpleName: JexlOneEngine", "DEL TagElement", "DEL SimpleName: JexlEngine", "DEL SimpleName: Script", "DEL TagElement", "DEL TagElement: @param", "DEL CastExpression", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: execute", "DEL SimpleName: Object", "DEL SimpleType: Expression", "DEL TextElement: The shared instance. ", "DEL TextElement: expression or a reference.", "DEL Javadoc", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: JexlOneEngine", "DEL BooleanLiteral: false", "DEL TagElement", "DEL SimpleName: createInterpreter", "DEL TagElement: @inheritDoc", "DEL TagElement: @link", "DEL SimpleType: Exception", "DEL TagElement", "DEL BooleanLiteral: false", "DEL SimpleName: ctxt10", "DEL SimpleName: name", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL Block", "DEL TagElement: @deprecated", "DEL QualifiedName: org.apache.commons.jexl2.ExpressionImpl", "DEL TextElement:  An exception can be thrown if there is a problem", "DEL Javadoc", "DEL TagElement: @param", "DEL TextElement", "DEL MethodInvocation", "DEL TextElement: parsing the script.", "DEL TextElement:  the interpreter to evaluate the expression", "DEL SimpleName: context", "DEL SimpleName: getMessage", "DEL MethodDeclaration", "DEL SimpleName: createExpression", "DEL TagElement: @param", "DEL TextElement: problem parsing the script.", "DEL TextElement:  An exception can be thrown if there is a problem", "DEL TextElement", "DEL SimpleType: String", "DEL SimpleName: tree", "DEL TextElement: must contain either a reference or an expression.", "DEL SimpleName: JexlEngine", "DEL SimpleName: JexlOne", "DEL SimpleType: JexlContext", "DEL TextElement: JEXL syntax.  This method parses the expression which", "DEL SimpleType: JexlException", "DEL IfStatement", "DEL TextElement:  2.0", "DEL MethodInvocation", "DEL SimpleName: value", "DEL Javadoc", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleType: JexlContext", "DEL Modifier: final", "DEL SimpleType: String", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: jjtAccept", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: Exception", "DEL SimpleName: Deprecated", "DEL SimpleType: URL", "DEL ReturnStatement", "DEL SimpleName: Script", "DEL SimpleName: IllegalStateException", "DEL ExpressionStatement", "DEL SimpleName: Expression", "DEL SimpleName: execute", "DEL SimpleName: scriptText", "DEL TextElement", "DEL SimpleName: adapt", "DEL SimpleName: JexlOneExpression", "DEL Modifier: public", "DEL TagElement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: JexlOneEngine", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: scriptUrl", "DEL SimpleName: Expression", "DEL TextElement:  the jexl context", "DEL SimpleName: setCache", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlOneExpression", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: Default cache size.", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: scriptUrl", "DEL TagElement: @deprecated", "DEL SuperConstructorInvocation", "DEL Modifier: static", "DEL TextElement:  A String containing valid JEXL syntax", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: This method parses the script which validates the syntax.", "DEL ReturnStatement", "DEL QualifiedName: EngineHolder.JEXL10", "DEL Javadoc", "DEL TextElement: Non-instantiable.", "DEL SimpleName: aContext", "DEL SimpleName: Interpreter", "DEL Block", "DEL Modifier: private", "DEL SimpleType: Expression", "DEL SimpleType: Script", "DEL SimpleType: ContextAdapter", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: containsKey", "DEL SimpleName: JexlContext", "DEL TagElement", "DEL SimpleName: Script", "DEL TextElement:  $Id$", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL TagElement: @link", "DEL MethodInvocation", "DEL Modifier: static", "DEL SimpleType: JexlContext", "DEL TagElement", "DEL TextElement:  containing valid JEXL syntax.", "DEL VariableDeclarationStatement", "DEL SimpleType: Expression", "DEL TagElement", "DEL SimpleName: tree", "DEL SimpleType: Script", "DEL CastExpression", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: createScript", "DEL TagElement: @return", "DEL SimpleName: JexlOneExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL ThrowStatement", "DEL Javadoc", "DEL SimpleType: JexlContext", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: JexlException", "DEL SingleVariableDeclaration", "DEL SimpleType: Script", "DEL Javadoc", "DEL SimpleName: getVars", "DEL TextElement: .", "DEL SimpleName: JexlNode", "DEL SimpleName: name", "DEL MethodInvocation", "DEL TagElement: @link", "DEL SimpleName: ref", "DEL NumberLiteral: 256", "DEL TextElement: A Jexl1.x context wrapped into a Jexl2 context.", "DEL TextElement:  An exception can be thrown if there is a problem", "DEL CatchClause", "DEL ClassInstanceCreation", "DEL SimpleName: engine", "DEL SuperConstructorInvocation", "DEL Block", "DEL SimpleName: scriptUrl", "DEL Modifier: final", "DEL TextElement:  the expression.", "DEL SimpleName: node", "DEL Modifier: public", "DEL TagElement: @param", "DEL SimpleName: jexl", "DEL SimpleName: tree", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: ContextAdapter", "DEL SimpleName: expression", "DEL SimpleName: context", "DEL SimpleName: Script", "DEL SimpleName: Object", "DEL FieldDeclaration", "DEL Modifier: public", "DEL TagElement", "DEL TextElement:  Create a JexlEngine and use the createScript method on that instead.", "DEL TagElement: @link", "DEL Modifier: public", "DEL SimpleName: JexlOneEngine", "DEL SimpleType: Script", "DEL TagElement: @since", "DEL SimpleType: ASTJexlScript", "DEL TextElement:  ", "DEL SimpleName: get", "DEL TagElement: @link", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: xjexl", "DEL SimpleName: Expression", "DEL ReturnStatement", "DEL SimpleName: createScript", "DEL Javadoc", "DEL TextElement: Adapts a Jexl-1.x context to a Jexl-2.0 context.", "DEL SimpleName: engine", "DEL SimpleName: Object", "DEL TextElement: Default local ctor.", "DEL TagElement", "DEL SimpleName: JexlContext", "DEL TextElement: The specific Jexl-1.x expressions implementation.", "DEL NullLiteral", "DEL SimpleName: createScript", "DEL SimpleName: EngineHolder", "DEL TextElement: An engine that uses a JexlOneInterpreter.", "DEL SimpleName: JexlException", "DEL SimpleName: RuntimeException", "DEL SimpleName: ASTJexlScript", "DEL TextElement:  An exception can be thrown if there is a", "DEL SimpleName: File", "DEL SimpleName: expr", "DEL MarkerAnnotation", "DEL SimpleType: Exception", "DEL SimpleName: value", "DEL SimpleName: engine", "DEL SimpleName: JexlOneInterpreter", "DEL SimpleName: Exception", "DEL ThisExpression", "DEL TagElement: @throws", "DEL SimpleName: ContextAdapter", "DEL SimpleType: Expression", "DEL QualifiedName: EngineHolder.JEXL10", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: has", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: scriptText", "DEL SimpleName: name", "DEL SimpleType: JexlException", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: JexlOneInterpreter", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL ThrowStatement", "DEL Block", "DEL SimpleType: Interpreter", "DEL TextElement: Creates an Expression from a String containing valid", "DEL SimpleType: JexlEngine", "DEL ClassInstanceCreation", "DEL TagElement: @deprecated", "DEL Modifier: final", "DEL TagElement: @return", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: jexl", "DEL QualifiedName: JexlOne.JexlOneEngine", "DEL NullLiteral", "DEL TagElement: @throws", "DEL SimpleName: adapt", "DEL SimpleType: ASTJexlScript", "DEL SimpleName: adapt", "DEL MethodDeclaration", "DEL SimpleType: Throwable", "DEL TypeDeclaration: class", "DEL SimpleName: e", "DEL TextElement: This method parses the script and validates the syntax.", "DEL TagElement", "DEL SimpleName: URL", "DEL Block", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: JexlContext", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlOneInterpreter", "DEL SimpleName: JexlException", "DEL SimpleName: Throwable", "DEL SimpleType: JexlContext", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleType: ASTJexlScript", "DEL SimpleName: scriptText", "DEL IfStatement", "DEL ReturnStatement", "DEL TryStatement", "DEL SimpleName: Expression", "DEL TextElement:  the jexl engine", "DEL Javadoc", "DEL SimpleName: JEXL10", "DEL SimpleName: ContextAdapter", "DEL SimpleName: context", "DEL TagElement: @inheritDoc", "DEL QualifiedName: EngineHolder.JEXL10", "DEL SimpleName: ctxt10", "DEL Javadoc", "DEL SimpleName: URL", "DEL TextElement:  containing valid JEXL syntax.", "DEL SimpleName: Script", "DEL TagElement: @link", "DEL SimpleName: createScript", "DEL SimpleType: RuntimeException", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL Block", "DEL Javadoc", "DEL SimpleName: get", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL TextElement: .", "DEL TagElement: @inheritDoc", "DEL CastExpression", "DEL FieldDeclaration", "DEL SimpleType: Script", "DEL TextElement:  Create a JexlEngine and use the createScript method on that instead.", "DEL SimpleName: evaluate", "DEL Modifier: static", "DEL SimpleName: text", "DEL ThisExpression", "DEL SimpleName: ASTJexlScript", "DEL Modifier: private", "DEL MarkerAnnotation", "DEL TextElement:  containing valid JEXL syntax.", "DEL TagElement: @link", "DEL NullLiteral", "DEL SimpleType: Interpreter", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: e", "DEL SimpleName: createExpression", "DEL TextElement:  A ", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: Exception", "DEL ReturnStatement", "DEL SimpleName: text", "DEL Javadoc", "DEL SimpleName: legacy", "DEL TagElement: @throws", "DEL TextElement:  an oac.jexl2 context", "DEL Javadoc", "DEL SimpleName: Override", "DEL TagElement", "DEL SimpleName: URL", "DEL SimpleName: text", "DEL SimpleName: legacy", "DEL TextElement: Creates a Script from a ", "DEL SuperConstructorInvocation", "DEL MethodDeclaration", "DEL TagElement: @version", "DEL SimpleName: ContextAdapter", "DEL SimpleType: JexlOne.JexlOneEngine", "DEL SimpleName: Exception", "DEL TextElement: .", "DEL SimpleName: Deprecated", "DEL TagElement: @inheritDoc", "DEL SimpleType: Script", "DEL SingleVariableDeclaration", "DEL SimpleName: legacy", "DEL SimpleName: getVars", "DEL SimpleName: context", "DEL Javadoc", "DEL PrimitiveType: void", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL TextElement:  An Expression object which can be evaluated with a JexlContext", "DEL SimpleName: Script", "DEL TagElement: @param", "DEL SimpleType: JexlNode", "DEL MethodInvocation", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL Block", "DEL TextElement:  A ", "DEL SimpleName: ASTJexlScript", "DEL ClassInstanceCreation", "DEL SimpleName: JexlContext", "DEL Modifier: private", "DEL SimpleName: e", "DEL TextElement: An interpreter made compatible with v1.1 behavior (at least Jelly's expectations).", "DEL TagElement: @param", "DEL SimpleName: Script", "DEL Modifier: public", "DEL SimpleName: File", "DEL SimpleName: ref", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL SimpleName: aContext", "DEL SimpleName: aContext", "DEL Modifier: static", "DEL Javadoc", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL SimpleName: createScript", "DEL TextElement:  the parsed expression.", "DEL SimpleName: adapt", "DEL SimpleType: RuntimeException", "DEL SimpleType: org.apache.commons.jexl2.JexlContext", "DEL SimpleName: context", "DEL TagElement", "DEL TagElement", "DEL Modifier: protected", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: e", "DEL MethodDeclaration", "DEL TagElement", "DEL Javadoc", "DEL TextElement: parsing this expression, or if the expression is neither an", "DEL SimpleName: File", "DEL SingleVariableDeclaration", "DEL QualifiedName: EngineHolder.JEXL10", "DEL SimpleName: xjexl", "DEL SimpleName: jexl", "DEL Modifier: static", "DEL SimpleName: String", "DEL Block", "DEL SimpleType: JexlOneExpression", "DEL ExpressionStatement", "DEL SimpleType: Script", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: name", "DEL SimpleName: name", "DEL SingleVariableDeclaration", "DEL SimpleName: interpret"]}]}}, {"JexlOne_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.File(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.net.URL(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.jexl2.Interpreter(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.commons.jexl2.JexlException(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.commons.jexl2.parser.JexlNode(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.commons.jexl2.parser.ASTJexlScript(14)", "Delete ImportDeclaration(15)", "Delete TextElement: This implements Jexl-1.x (Jelly) compatible behaviors on top of Jexl-2.0.(16)", "Delete TagElement(17)", "Delete TextElement:  2.0(18)", "Delete TagElement: @since(19)", "Delete TextElement:  $Id$(20)", "Delete TagElement: @version(21)", "Delete Javadoc(22)", "Delete Modifier: public(23)", "Delete SimpleName: JexlOne(24)", "Delete TextElement: Default cache size.(25)", "Delete TagElement(26)", "Delete Javadoc(27)", "Delete Modifier: private(28)", "Delete Modifier: static(29)", "Delete Modifier: final(30)", "Delete PrimitiveType: int(31)", "Delete SimpleName: CACHE_SIZE(32)", "Delete NumberLiteral: 256(33)", "Delete VariableDeclarationFragment(34)", "Delete FieldDeclaration(35)", "Delete TextElement: Private constructor, ensure no instance.(36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: protected(39)", "Delete SimpleName: JexlOne(40)", "Delete Block(41)", "Delete MethodDeclaration(42)", "Delete TextElement: Lazy JexlEngine singleton through on demand holder idiom.(43)", "Delete TagElement(44)", "Delete Javadoc(45)", "Delete Modifier: private(46)", "Delete Modifier: static(47)", "Delete Modifier: final(48)", "Delete SimpleName: EngineHolder(49)", "Delete TextElement: The shared instance. (50)", "Delete TagElement(51)", "Delete Javadoc(52)", "Delete Modifier: static(53)", "Delete Modifier: final(54)", "Delete SimpleName: JexlOneEngine(55)", "Delete SimpleType: JexlOneEngine(56)", "Delete SimpleName: JEXL10(57)", "Delete SimpleName: JexlOneEngine(58)", "Delete SimpleType: JexlOneEngine(59)", "Delete ClassInstanceCreation(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete TextElement: Non-instantiable.(63)", "Delete TagElement(64)", "Delete Javadoc(65)", "Delete Modifier: private(66)", "Delete SimpleName: EngineHolder(67)", "Delete Block(68)", "Delete MethodDeclaration(69)", "Delete TypeDeclaration: class(70)", "Delete TextElement: A Jexl1.x context wrapped into a Jexl2 context.(71)", "Delete TagElement(72)", "Delete Javadoc(73)", "Delete Modifier: private(74)", "Delete Modifier: static(75)", "Delete Modifier: final(76)", "Delete SimpleName: ContextAdapter(77)", "Delete QualifiedName: org.apache.commons.jexl2.JexlContext(78)", "Delete SimpleType: org.apache.commons.jexl2.JexlContext(79)", "Delete TextElement: The Jexl1.x context. (80)", "Delete TagElement(81)", "Delete Javadoc(82)", "Delete Modifier: private(83)", "Delete Modifier: final(84)", "Delete SimpleName: JexlContext(85)", "Delete SimpleType: JexlContext(86)", "Delete SimpleName: legacy(87)", "Delete VariableDeclarationFragment(88)", "Delete FieldDeclaration(89)", "Delete TextElement: Creates a jexl2.JexlContext from a jexl.JexlContext.(90)", "Delete TagElement(91)", "Delete SimpleName: ctxt10(92)", "Delete TagElement: @param(93)", "Delete Javadoc(94)", "Delete SimpleName: ContextAdapter(95)", "Delete SimpleName: JexlContext(96)", "Delete SimpleType: JexlContext(97)", "Delete SimpleName: ctxt10(98)", "Delete SingleVariableDeclaration(99)", "Delete SimpleName: legacy(100)", "Delete SimpleName: ctxt10(101)", "Delete Assignment: =(102)", "Delete ExpressionStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete TagElement: @inheritDoc(106)", "Delete TagElement(107)", "Delete Javadoc(108)", "Delete Modifier: public(109)", "Delete SimpleName: Object(110)", "Delete SimpleType: Object(111)", "Delete SimpleName: get(112)", "Delete SimpleName: String(113)", "Delete SimpleType: String(114)", "Delete SimpleName: name(115)", "Delete SingleVariableDeclaration(116)", "Delete SimpleName: legacy(117)", "Delete SimpleName: getVars(118)", "Delete MethodInvocation(119)", "Delete SimpleName: get(120)", "Delete SimpleName: name(121)", "Delete MethodInvocation(122)", "Delete ReturnStatement(123)", "Delete Block(124)", "Delete MethodDeclaration(125)", "Delete TagElement: @inheritDoc(126)", "Delete TagElement(127)", "Delete Javadoc(128)", "Delete Modifier: public(129)", "Delete PrimitiveType: void(130)", "Delete SimpleName: set(131)", "Delete SimpleName: String(132)", "Delete SimpleType: String(133)", "Delete SimpleName: name(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: Object(136)", "Delete SimpleType: Object(137)", "Delete SimpleName: value(138)", "Delete SingleVariableDeclaration(139)", "Delete SimpleName: legacy(140)", "Delete SimpleName: getVars(141)", "Delete MethodInvocation(142)", "Delete SimpleName: put(143)", "Delete SimpleName: name(144)", "Delete SimpleName: value(145)", "Delete MethodInvocation(146)", "Delete ExpressionStatement(147)", "Delete Block(148)", "Delete MethodDeclaration(149)", "Delete TagElement: @inheritDoc(150)", "Delete TagElement(151)", "Delete Javadoc(152)", "Delete Modifier: public(153)", "Delete PrimitiveType: boolean(154)", "Delete SimpleName: has(155)", "Delete SimpleName: String(156)", "Delete SimpleType: String(157)", "Delete SimpleName: name(158)", "Delete SingleVariableDeclaration(159)", "Delete SimpleName: legacy(160)", "Delete SimpleName: getVars(161)", "Delete MethodInvocation(162)", "Delete SimpleName: containsKey(163)", "Delete SimpleName: name(164)", "Delete MethodInvocation(165)", "Delete ReturnStatement(166)", "Delete Block(167)", "Delete MethodDeclaration(168)", "Delete TextElement: Adapts a Jexl-1.x context to a Jexl-2.0 context.(169)", "Delete TagElement(170)", "Delete SimpleName: aContext(171)", "Delete TextElement:  a oac.jexl context(172)", "Delete TagElement: @param(173)", "Delete TextElement:  an oac.jexl2 context(174)", "Delete TagElement: @return(175)", "Delete Javadoc(176)", "Delete Modifier: static(177)", "Delete Modifier: final(178)", "Delete QualifiedName: org.apache.commons.jexl2.JexlContext(179)", "Delete SimpleType: org.apache.commons.jexl2.JexlContext(180)", "Delete SimpleName: adapt(181)", "Delete SimpleName: JexlContext(182)", "Delete SimpleType: JexlContext(183)", "Delete SimpleName: aContext(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: aContext(186)", "Delete NullLiteral(187)", "Delete InfixExpression: ==(188)", "Delete QualifiedName: JexlOneEngine.EMPTY_CONTEXT(189)", "Delete SimpleName: ContextAdapter(190)", "Delete SimpleType: ContextAdapter(191)", "Delete SimpleName: aContext(192)", "Delete ClassInstanceCreation(193)", "Delete ConditionalExpression(194)", "Delete ReturnStatement(195)", "Delete Block(196)", "Delete MethodDeclaration(197)", "Delete TypeDeclaration: class(198)", "Delete TextElement: An interpreter made compatible with v1.1 behavior (at least Jelly's expectations).(199)", "Delete TagElement(200)", "Delete Javadoc(201)", "Delete Modifier: private(202)", "Delete Modifier: static(203)", "Delete Modifier: final(204)", "Delete SimpleName: JexlOneInterpreter(205)", "Delete SimpleName: Interpreter(206)", "Delete SimpleType: Interpreter(207)", "Delete TextElement: Creates an instance.(208)", "Delete TagElement(209)", "Delete SimpleName: jexl(210)", "Delete TextElement:  the jexl engine(211)", "Delete TagElement: @param(212)", "Delete SimpleName: aContext(213)", "Delete TextElement:  the jexl context(214)", "Delete TagElement: @param(215)", "Delete Javadoc(216)", "Delete Modifier: public(217)", "Delete SimpleName: JexlOneInterpreter(218)", "Delete SimpleName: JexlEngine(219)", "Delete SimpleType: JexlEngine(220)", "Delete SimpleName: jexl(221)", "Delete SingleVariableDeclaration(222)", "Delete SimpleName: JexlContext(223)", "Delete SimpleType: JexlContext(224)", "Delete SimpleName: aContext(225)", "Delete SingleVariableDeclaration(226)", "Delete SimpleName: jexl(227)", "Delete SimpleName: ContextAdapter(228)", "Delete SimpleName: adapt(229)", "Delete SimpleName: aContext(230)", "Delete MethodInvocation(231)", "Delete BooleanLiteral: false(232)", "Delete BooleanLiteral: false(233)", "Delete SuperConstructorInvocation(234)", "Delete Block(235)", "Delete MethodDeclaration(236)", "Delete TagElement: @inheritDoc(237)", "Delete TextElement(238)", "Delete TagElement(239)", "Delete Javadoc(240)", "Delete SimpleName: Override(241)", "Delete MarkerAnnotation(242)", "Delete Modifier: public(243)", "Delete SimpleName: Object(244)", "Delete SimpleType: Object(245)", "Delete SimpleName: interpret(246)", "Delete SimpleName: JexlNode(247)", "Delete SimpleType: JexlNode(248)", "Delete SimpleName: node(249)", "Delete SingleVariableDeclaration(250)", "Delete SimpleName: node(251)", "Delete SimpleName: jjtAccept(252)", "Delete ThisExpression(253)", "Delete NullLiteral(254)", "Delete MethodInvocation(255)", "Delete ReturnStatement(256)", "Delete Block(257)", "Delete SimpleName: JexlException(258)", "Delete SimpleType: JexlException(259)", "Delete SimpleName: xjexl(260)", "Delete SingleVariableDeclaration(261)", "Delete SimpleName: Throwable(262)", "Delete SimpleType: Throwable(263)", "Delete SimpleName: e(264)", "Delete SimpleName: xjexl(265)", "Delete SimpleName: getCause(266)", "Delete MethodInvocation(267)", "Delete VariableDeclarationFragment(268)", "Delete VariableDeclarationStatement(269)", "Delete SimpleName: e(270)", "Delete SimpleName: RuntimeException(271)", "Delete SimpleType: RuntimeException(272)", "Delete InstanceofExpression(273)", "Delete SimpleName: RuntimeException(274)", "Delete SimpleType: RuntimeException(275)", "Delete SimpleName: e(276)", "Delete CastExpression(277)", "Delete ThrowStatement(278)", "Delete Block(279)", "Delete IfStatement(280)", "Delete SimpleName: e(281)", "Delete SimpleName: IllegalStateException(282)", "Delete SimpleType: IllegalStateException(283)", "Delete InstanceofExpression(284)", "Delete SimpleName: IllegalStateException(285)", "Delete SimpleType: IllegalStateException(286)", "Delete SimpleName: e(287)", "Delete CastExpression(288)", "Delete ThrowStatement(289)", "Delete Block(290)", "Delete IfStatement(291)", "Delete SimpleName: IllegalStateException(292)", "Delete SimpleType: IllegalStateException(293)", "Delete SimpleName: e(294)", "Delete SimpleName: getMessage(295)", "Delete MethodInvocation(296)", "Delete SimpleName: e(297)", "Delete ClassInstanceCreation(298)", "Delete ThrowStatement(299)", "Delete Block(300)", "Delete CatchClause(301)", "Delete TryStatement(302)", "Delete Block(303)", "Delete MethodDeclaration(304)", "Delete TagElement: @inheritDoc(305)", "Delete TextElement(306)", "Delete TagElement(307)", "Delete Javadoc(308)", "Delete SimpleName: Override(309)", "Delete MarkerAnnotation(310)", "Delete Modifier: protected(311)", "Delete SimpleName: Object(312)", "Delete SimpleType: Object(313)", "Delete SimpleName: invocationFailed(314)", "Delete SimpleName: JexlException(315)", "Delete SimpleType: JexlException(316)", "Delete SimpleName: xjexl(317)", "Delete SingleVariableDeclaration(318)", "Delete SimpleName: xjexl(319)", "Delete ThrowStatement(320)", "Delete Block(321)", "Delete MethodDeclaration(322)", "Delete TagElement: @inheritDoc(323)", "Delete TextElement(324)", "Delete TagElement(325)", "Delete Javadoc(326)", "Delete SimpleName: Override(327)", "Delete MarkerAnnotation(328)", "Delete Modifier: protected(329)", "Delete SimpleName: Object(330)", "Delete SimpleType: Object(331)", "Delete SimpleName: unknownVariable(332)", "Delete SimpleName: JexlException(333)", "Delete SimpleType: JexlException(334)", "Delete SimpleName: xjexl(335)", "Delete SingleVariableDeclaration(336)", "Delete NullLiteral(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete MethodDeclaration(340)", "Delete TypeDeclaration: class(341)", "Delete TextElement: An engine that uses a JexlOneInterpreter.(342)", "Delete TagElement(343)", "Delete Javadoc(344)", "Delete Modifier: private(345)", "Delete Modifier: static(346)", "Delete Modifier: final(347)", "Delete SimpleName: JexlOneEngine(348)", "Delete SimpleName: JexlEngine(349)", "Delete SimpleType: JexlEngine(350)", "Delete TextElement: Default ctor, creates a cache and sets instance to verbose (ie non-silent).(351)", "Delete TagElement(352)", "Delete Javadoc(353)", "Delete Modifier: private(354)", "Delete SimpleName: JexlOneEngine(355)", "Delete SuperConstructorInvocation(356)", "Delete SimpleName: setCache(357)", "Delete SimpleName: CACHE_SIZE(358)", "Delete MethodInvocation(359)", "Delete ExpressionStatement(360)", "Delete SimpleName: setSilent(361)", "Delete BooleanLiteral: false(362)", "Delete MethodInvocation(363)", "Delete ExpressionStatement(364)", "Delete Block(365)", "Delete MethodDeclaration(366)", "Delete TagElement: @inheritDoc(367)", "Delete TextElement(368)", "Delete TagElement(369)", "Delete Javadoc(370)", "Delete Modifier: protected(371)", "Delete SimpleName: Interpreter(372)", "Delete SimpleType: Interpreter(373)", "Delete SimpleName: createInterpreter(374)", "Delete SimpleName: JexlContext(375)", "Delete SimpleType: JexlContext(376)", "Delete SimpleName: context(377)", "Delete SingleVariableDeclaration(378)", "Delete SimpleName: JexlOneInterpreter(379)", "Delete SimpleType: JexlOneInterpreter(380)", "Delete ThisExpression(381)", "Delete SimpleName: context(382)", "Delete ClassInstanceCreation(383)", "Delete ReturnStatement(384)", "Delete Block(385)", "Delete MethodDeclaration(386)", "Delete TagElement: @inheritDoc(387)", "Delete TextElement:  (388)", "Delete TagElement(389)", "Delete Javadoc(390)", "Delete SimpleName: Override(391)", "Delete MarkerAnnotation(392)", "Delete Modifier: protected(393)", "Delete SimpleName: Script(394)", "Delete SimpleType: Script(395)", "Delete SimpleName: createScript(396)", "Delete SimpleName: ASTJexlScript(397)", "Delete SimpleType: ASTJexlScript(398)", "Delete SimpleName: tree(399)", "Delete SingleVariableDeclaration(400)", "Delete SimpleName: String(401)", "Delete SimpleType: String(402)", "Delete SimpleName: text(403)", "Delete SingleVariableDeclaration(404)", "Delete SimpleName: JexlOneExpression(405)", "Delete SimpleType: JexlOneExpression(406)", "Delete ThisExpression(407)", "Delete SimpleName: text(408)", "Delete SimpleName: tree(409)", "Delete ClassInstanceCreation(410)", "Delete ReturnStatement(411)", "Delete Block(412)", "Delete MethodDeclaration(413)", "Delete TagElement: @inheritDoc(414)", "Delete TextElement:  (415)", "Delete TagElement(416)", "Delete Javadoc(417)", "Delete SimpleName: Override(418)", "Delete MarkerAnnotation(419)", "Delete Modifier: protected(420)", "Delete SimpleName: Expression(421)", "Delete SimpleType: Expression(422)", "Delete SimpleName: createExpression(423)", "Delete SimpleName: ASTJexlScript(424)", "Delete SimpleType: ASTJexlScript(425)", "Delete SimpleName: tree(426)", "Delete SingleVariableDeclaration(427)", "Delete SimpleName: String(428)", "Delete SimpleType: String(429)", "Delete SimpleName: text(430)", "Delete SingleVariableDeclaration(431)", "Delete SimpleName: JexlOneExpression(432)", "Delete SimpleType: JexlOneExpression(433)", "Delete ThisExpression(434)", "Delete SimpleName: text(435)", "Delete SimpleName: tree(436)", "Delete ClassInstanceCreation(437)", "Delete ReturnStatement(438)", "Delete Block(439)", "Delete MethodDeclaration(440)", "Delete TypeDeclaration: class(441)", "Delete TextElement: The specific Jexl-1.x expressions implementation.(442)", "Delete TagElement(443)", "Delete Javadoc(444)", "Delete Modifier: private(445)", "Delete Modifier: static(446)", "Delete Modifier: final(447)", "Delete SimpleName: JexlOneExpression(448)", "Delete QualifiedName: org.apache.commons.jexl2.ExpressionImpl(449)", "Delete SimpleType: org.apache.commons.jexl2.ExpressionImpl(450)", "Delete SimpleName: Expression(451)", "Delete SimpleType: Expression(452)", "Delete SimpleName: Script(453)", "Delete SimpleType: Script(454)", "Delete TextElement: Default local ctor.(455)", "Delete TagElement(456)", "Delete SimpleName: engine(457)", "Delete TextElement:  the interpreter to evaluate the expression(458)", "Delete TagElement: @param(459)", "Delete SimpleName: expr(460)", "Delete TextElement:  the expression.(461)", "Delete TagElement: @param(462)", "Delete SimpleName: ref(463)", "Delete TextElement:  the parsed expression.(464)", "Delete TagElement: @param(465)", "Delete Javadoc(466)", "Delete Modifier: private(467)", "Delete SimpleName: JexlOneExpression(468)", "Delete QualifiedName: JexlOne.JexlOneEngine(469)", "Delete SimpleType: JexlOne.JexlOneEngine(470)", "Delete SimpleName: engine(471)", "Delete SingleVariableDeclaration(472)", "Delete SimpleName: String(473)", "Delete SimpleType: String(474)", "Delete SimpleName: expr(475)", "Delete SingleVariableDeclaration(476)", "Delete SimpleName: ASTJexlScript(477)", "Delete SimpleType: ASTJexlScript(478)", "Delete SimpleName: ref(479)", "Delete SingleVariableDeclaration(480)", "Delete SimpleName: engine(481)", "Delete SimpleName: expr(482)", "Delete SimpleName: ref(483)", "Delete SuperConstructorInvocation(484)", "Delete Block(485)", "Delete MethodDeclaration(486)", "Delete TagElement: @inheritDoc(487)", "Delete TagElement(488)", "Delete Javadoc(489)", "Delete Modifier: public(490)", "Delete SimpleName: Object(491)", "Delete SimpleType: Object(492)", "Delete SimpleName: evaluate(493)", "Delete SimpleName: JexlContext(494)", "Delete SimpleType: JexlContext(495)", "Delete SimpleName: context(496)", "Delete SingleVariableDeclaration(497)", "Delete SimpleName: evaluate(498)", "Delete SimpleName: ContextAdapter(499)", "Delete SimpleName: adapt(500)", "Delete SimpleName: context(501)", "Delete MethodInvocation(502)", "Delete SuperMethodInvocation(503)", "Delete ReturnStatement(504)", "Delete Block(505)", "Delete MethodDeclaration(506)", "Delete TagElement: @inheritDoc(507)", "Delete TagElement(508)", "Delete Javadoc(509)", "Delete Modifier: public(510)", "Delete SimpleName: Object(511)", "Delete SimpleType: Object(512)", "Delete SimpleName: execute(513)", "Delete SimpleName: JexlContext(514)", "Delete SimpleType: JexlContext(515)", "Delete SimpleName: context(516)", "Delete SingleVariableDeclaration(517)", "Delete SimpleName: execute(518)", "Delete SimpleName: ContextAdapter(519)", "Delete SimpleName: adapt(520)", "Delete SimpleName: context(521)", "Delete MethodInvocation(522)", "Delete SuperMethodInvocation(523)", "Delete ReturnStatement(524)", "Delete Block(525)", "Delete MethodDeclaration(526)", "Delete TypeDeclaration: class(527)", "Delete TextElement: Creates a Script from a String containing valid JEXL syntax.(528)", "Delete TextElement: This method parses the script which validates the syntax.(529)", "Delete TagElement(530)", "Delete SimpleName: scriptText(531)", "Delete TextElement:  A String containing valid JEXL syntax(532)", "Delete TagElement: @param(533)", "Delete TextElement:  A (534)", "Delete SimpleName: Script(535)", "Delete TagElement: @link(536)", "Delete TextElement:  which can be executed with a(537)", "Delete SimpleName: JexlContext(538)", "Delete TagElement: @link(539)", "Delete TextElement: .(540)", "Delete TagElement: @return(541)", "Delete SimpleName: Exception(542)", "Delete TextElement:  An exception can be thrown if there is a(543)", "Delete TextElement: problem parsing the script.(544)", "Delete TagElement: @throws(545)", "Delete TextElement:  Create a JexlEngine and use the createScript method on that instead.(546)", "Delete TagElement: @deprecated(547)", "Delete Javadoc(548)", "Delete SimpleName: Deprecated(549)", "Delete MarkerAnnotation(550)", "Delete Modifier: public(551)", "Delete Modifier: static(552)", "Delete SimpleName: Script(553)", "Delete SimpleType: Script(554)", "Delete SimpleName: createScript(555)", "Delete SimpleName: String(556)", "Delete SimpleType: String(557)", "Delete SimpleName: scriptText(558)", "Delete SingleVariableDeclaration(559)", "Delete SimpleName: Exception(560)", "Delete SimpleType: Exception(561)", "Delete SimpleName: Script(562)", "Delete SimpleType: Script(563)", "Delete QualifiedName: EngineHolder.JEXL10(564)", "Delete SimpleName: createScript(565)", "Delete SimpleName: scriptText(566)", "Delete MethodInvocation(567)", "Delete CastExpression(568)", "Delete ReturnStatement(569)", "Delete Block(570)", "Delete MethodDeclaration(571)", "Delete TextElement: Creates a Script from a (572)", "Delete SimpleName: File(573)", "Delete TagElement: @link(574)", "Delete TextElement:  containing valid JEXL syntax.(575)", "Delete TextElement: This method parses the script and validates the syntax.(576)", "Delete TagElement(577)", "Delete SimpleName: scriptFile(578)", "Delete TextElement:  A (579)", "Delete SimpleName: File(580)", "Delete TagElement: @link(581)", "Delete TextElement:  containing valid JEXL syntax.(582)", "Delete TextElement: Must not be null. Must be a readable file.(583)", "Delete TagElement: @param(584)", "Delete TextElement:  A (585)", "Delete SimpleName: Script(586)", "Delete TagElement: @link(587)", "Delete TextElement:  which can be executed with a(588)", "Delete SimpleName: JexlContext(589)", "Delete TagElement: @link(590)", "Delete TextElement: .(591)", "Delete TagElement: @return(592)", "Delete SimpleName: Exception(593)", "Delete TextElement:  An exception can be thrown if there is a problem(594)", "Delete TextElement: parsing the script.(595)", "Delete TagElement: @throws(596)", "Delete TextElement:  Create a JexlEngine and use the createScript method on that instead.(597)", "Delete TagElement: @deprecated(598)", "Delete Javadoc(599)", "Delete SimpleName: Deprecated(600)", "Delete MarkerAnnotation(601)", "Delete Modifier: public(602)", "Delete Modifier: static(603)", "Delete SimpleName: Script(604)", "Delete SimpleType: Script(605)", "Delete SimpleName: createScript(606)", "Delete SimpleName: File(607)", "Delete SimpleType: File(608)", "Delete SimpleName: scriptFile(609)", "Delete SingleVariableDeclaration(610)", "Delete SimpleName: Exception(611)", "Delete SimpleType: Exception(612)", "Delete SimpleName: Script(613)", "Delete SimpleType: Script(614)", "Delete QualifiedName: EngineHolder.JEXL10(615)", "Delete SimpleName: createScript(616)", "Delete SimpleName: scriptFile(617)", "Delete MethodInvocation(618)", "Delete CastExpression(619)", "Delete ReturnStatement(620)", "Delete Block(621)", "Delete MethodDeclaration(622)", "Delete TextElement: Creates a Script from a (623)", "Delete SimpleName: URL(624)", "Delete TagElement: @link(625)", "Delete TextElement:  containing valid JEXL syntax.(626)", "Delete TextElement: This method parses the script and validates the syntax.(627)", "Delete TagElement(628)", "Delete SimpleName: scriptUrl(629)", "Delete TextElement:  A (630)", "Delete SimpleName: URL(631)", "Delete TagElement: @link(632)", "Delete TextElement:  containing valid JEXL syntax.(633)", "Delete TextElement: Must not be null. Must be a readable file.(634)", "Delete TagElement: @param(635)", "Delete TextElement:  A (636)", "Delete SimpleName: Script(637)", "Delete TagElement: @link(638)", "Delete TextElement:  which can be executed with a(639)", "Delete SimpleName: JexlContext(640)", "Delete TagElement: @link(641)", "Delete TextElement: .(642)", "Delete TagElement: @return(643)", "Delete SimpleName: Exception(644)", "Delete TextElement:  An exception can be thrown if there is a problem(645)", "Delete TextElement: parsing the script.(646)", "Delete TagElement: @throws(647)", "Delete TextElement:  Create a JexlEngine and use the createScript method on that instead.(648)", "Delete TagElement: @deprecated(649)", "Delete Javadoc(650)", "Delete SimpleName: Deprecated(651)", "Delete MarkerAnnotation(652)", "Delete Modifier: public(653)", "Delete Modifier: static(654)", "Delete SimpleName: Script(655)", "Delete SimpleType: Script(656)", "Delete SimpleName: createScript(657)", "Delete SimpleName: URL(658)", "Delete SimpleType: URL(659)", "Delete SimpleName: scriptUrl(660)", "Delete SingleVariableDeclaration(661)", "Delete SimpleName: Exception(662)", "Delete SimpleType: Exception(663)", "Delete SimpleName: Script(664)", "Delete SimpleType: Script(665)", "Delete QualifiedName: EngineHolder.JEXL10(666)", "Delete SimpleName: createScript(667)", "Delete SimpleName: scriptUrl(668)", "Delete MethodInvocation(669)", "Delete CastExpression(670)", "Delete ReturnStatement(671)", "Delete Block(672)", "Delete MethodDeclaration(673)", "Delete TextElement: Creates an Expression from a String containing valid(674)", "Delete TextElement: JEXL syntax.  This method parses the expression which(675)", "Delete TextElement: must contain either a reference or an expression.(676)", "Delete TagElement(677)", "Delete SimpleName: expression(678)", "Delete TextElement:  A String containing valid JEXL syntax(679)", "Delete TagElement: @param(680)", "Delete TextElement:  An Expression object which can be evaluated with a JexlContext(681)", "Delete TagElement: @return(682)", "Delete SimpleName: JexlException(683)", "Delete TextElement:  An exception can be thrown if there is a problem(684)", "Delete TextElement: parsing this expression, or if the expression is neither an(685)", "Delete TextElement: expression or a reference.(686)", "Delete TagElement: @throws(687)", "Delete TextElement:  Create a JexlEngine and use createExpression() on that(688)", "Delete TagElement: @deprecated(689)", "Delete Javadoc(690)", "Delete SimpleName: Deprecated(691)", "Delete MarkerAnnotation(692)", "Delete Modifier: public(693)", "Delete Modifier: static(694)", "Delete SimpleName: Expression(695)", "Delete SimpleType: Expression(696)", "Delete SimpleName: createExpression(697)", "Delete SimpleName: String(698)", "Delete SimpleType: String(699)", "Delete SimpleName: expression(700)", "Delete SingleVariableDeclaration(701)", "Delete SimpleName: Expression(702)", "Delete SimpleType: Expression(703)", "Delete QualifiedName: EngineHolder.JEXL10(704)", "Delete SimpleName: createExpression(705)", "Delete SimpleName: expression(706)", "Delete MethodInvocation(707)", "Delete CastExpression(708)", "Delete ReturnStatement(709)", "Delete Block(710)", "Delete MethodDeclaration(711)", "Delete TypeDeclaration: class(712)"]}}, {"Script_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.concurrent.Callable", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: getVariables", "DEL TextElement:  2.1", "DEL TagElement: @return", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TextElement: the last statement.", "DEL SimpleName: callable", "DEL TagElement: @return", "DEL TextElement: Creates a Callable from this script.", "DEL TagElement", "DEL SimpleName: Object", "DEL SimpleName: context", "DEL SimpleType: List", "DEL TextElement: a given set of ", "DEL TextElement:  A JexlContext containing variables.", "DEL TagElement: @link", "DEL SimpleType: Object", "DEL Dimension", "DEL SimpleName: context", "DEL TextElement:  the context", "DEL SimpleName: context", "DEL ParameterizedType: Set<List<String>>", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: JexlContext", "DEL SimpleName: args", "DEL SimpleType: String", "DEL TextElement: Creates a Callable from this script.", "DEL SimpleName: Callable", "DEL SimpleName: String", "DEL TextElement: the last statement.", "DEL TagElement: @since", "DEL TextElement: Executes the script with the variables contained in the", "DEL SimpleType: Callable", "DEL TextElement:  A JexlContext containing variables.", "DEL TextElement: supplied ", "DEL TagElement: @since", "DEL TagElement: @return", "DEL SimpleName: context", "DEL SimpleName: execute", "DEL SimpleName: execute", "DEL SimpleName: Set", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL TextElement: <p>A script is some valid JEXL syntax to be executed with", "DEL TagElement: @return", "DEL Javadoc", "DEL TagElement: @return", "DEL TextElement:  variables.</p>", "DEL TextElement: <p>A script is a group of statements, separated by semicolons.</p>", "DEL SimpleName: getLocalVariables", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL TextElement: Returns the text of this Script.", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: context", "DEL SimpleName: Script", "DEL TagElement: @return", "DEL TextElement: <p>A JEXL Script.</p>", "DEL SingleVariableDeclaration", "DEL TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>", "DEL ParameterizedType: List<String>", "DEL SimpleName: JexlContext", "DEL TagElement: @since", "DEL TextElement:  the parameters or null", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TagElement", "DEL TagElement", "DEL TypeDeclaration: interface", "DEL SimpleName: String", "DEL SimpleName: JexlContext", "DEL SimpleName: JexlContext", "DEL SimpleName: context", "DEL TextElement:  1.1", "DEL SimpleName: getParameters", "DEL Javadoc", "DEL SimpleType: JexlContext", "DEL TextElement: Gets this script variables.", "DEL TextElement:  2.1", "DEL TextElement: <p>Note that since variables can be in an ant-ish form (ie foo.bar.quux), each variable is returned as ", "DEL SimpleType: JexlContext", "DEL TextElement: Gets this script parameters.", "DEL SimpleName: JexlContext", "DEL Javadoc", "DEL SimpleName: args", "DEL SimpleName: args", "DEL Modifier: public", "DEL TextElement:  2.1", "DEL MethodDeclaration", "DEL Javadoc", "DEL TagElement", "DEL TextElement:  The result of this script, usually the result of ", "DEL TextElement: Executes the script with the variables contained in the", "DEL SimpleName: JexlContext", "DEL TextElement: as well as expressions and assignment statements.</p>", "DEL TagElement: @since", "DEL SimpleName: String", "DEL TagElement: @link", "DEL TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>", "DEL SimpleType: Callable", "DEL SimpleName: context", "DEL ArrayType: String[]", "DEL SimpleName: callable", "DEL TextElement:  the context", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TextElement: a list of strings where each entry is a fragment of the variable ({\"foo\", \"bar\", \"quux\"} in the example.</p>", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL SimpleType: Set", "DEL TagElement", "DEL TextElement: Gets this script local variables.", "DEL TextElement:  the script arguments", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: JexlContext", "DEL SimpleName: getText", "DEL TextElement:  The script to be executed.", "DEL TextElement:  2.1", "DEL SimpleName: Callable", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL TagElement", "DEL TextElement:  2.1", "DEL MethodDeclaration", "DEL TextElement: Control statements such as <code>if</code> and <code>while</code>", "DEL TextElement: parameters used during parsing.", "DEL TextElement:  the callable", "DEL TagElement: @link", "DEL TextElement:  The result of this script, usually the result of ", "DEL MethodDeclaration", "DEL SimpleType: JexlContext", "DEL TextElement:  the callable", "DEL TagElement: @param", "DEL TextElement:  2.1", "DEL ParameterizedType: Callable<Object>", "DEL TagElement: @param", "DEL TagElement: @since", "DEL TagElement: @since", "DEL TextElement:  the variables or null", "DEL TextElement: supplied ", "DEL TagElement: @param", "DEL TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>", "DEL ParameterizedType: Callable<Object>", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL TextElement:  the local variables or null", "DEL Javadoc", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL TagElement: @since", "DEL TextElement: . ", "DEL SimpleType: JexlContext", "DEL TextElement:  and a set of arguments corresponding to the", "DEL Javadoc", "DEL Javadoc", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleType: String", "DEL TextElement: <p>The statements can be <code>blocks</code> (curly braces containing code),", "DEL MethodDeclaration", "DEL ArrayType: String[]", "DEL TextElement:  the arguments", "DEL SimpleType: Object", "DEL TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>", "DEL TagElement"]}]}}, {"Script_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Set(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.concurrent.Callable(6)", "Delete ImportDeclaration(7)", "Delete TextElement: <p>A JEXL Script.</p>(8)", "Delete TextElement: <p>A script is some valid JEXL syntax to be executed with(9)", "Delete TextElement: a given set of (10)", "Delete SimpleName: JexlContext(11)", "Delete TagElement: @link(12)", "Delete TextElement:  variables.</p>(13)", "Delete TextElement: <p>A script is a group of statements, separated by semicolons.</p>(14)", "Delete TextElement: <p>The statements can be <code>blocks</code> (curly braces containing code),(15)", "Delete TextElement: Control statements such as <code>if</code> and <code>while</code>(16)", "Delete TextElement: as well as expressions and assignment statements.</p>(17)", "Delete TagElement(18)", "Delete TextElement:  1.1(19)", "Delete TagElement: @since(20)", "Delete Javadoc(21)", "Delete Modifier: public(22)", "Delete SimpleName: Script(23)", "Delete TextElement: Executes the script with the variables contained in the(24)", "Delete TextElement: supplied (25)", "Delete SimpleName: JexlContext(26)", "Delete TagElement: @link(27)", "Delete TextElement: . (28)", "Delete TagElement(29)", "Delete SimpleName: context(30)", "Delete TextElement:  A JexlContext containing variables.(31)", "Delete TagElement: @param(32)", "Delete TextElement:  The result of this script, usually the result of (33)", "Delete TextElement: the last statement.(34)", "Delete TagElement: @return(35)", "Delete Javadoc(36)", "Delete SimpleName: Object(37)", "Delete SimpleType: Object(38)", "Delete SimpleName: execute(39)", "Delete SimpleName: JexlContext(40)", "Delete SimpleType: JexlContext(41)", "Delete SimpleName: context(42)", "Delete SingleVariableDeclaration(43)", "Delete MethodDeclaration(44)", "Delete TextElement: Executes the script with the variables contained in the(45)", "Delete TextElement: supplied (46)", "Delete SimpleName: JexlContext(47)", "Delete TagElement: @link(48)", "Delete TextElement:  and a set of arguments corresponding to the(49)", "Delete TextElement: parameters used during parsing.(50)", "Delete TagElement(51)", "Delete SimpleName: context(52)", "Delete TextElement:  A JexlContext containing variables.(53)", "Delete TagElement: @param(54)", "Delete SimpleName: args(55)", "Delete TextElement:  the arguments(56)", "Delete TagElement: @param(57)", "Delete TextElement:  The result of this script, usually the result of (58)", "Delete TextElement: the last statement.(59)", "Delete TagElement: @return(60)", "Delete TextElement:  2.1(61)", "Delete TagElement: @since(62)", "Delete Javadoc(63)", "Delete SimpleName: Object(64)", "Delete SimpleType: Object(65)", "Delete SimpleName: execute(66)", "Delete SimpleName: JexlContext(67)", "Delete SimpleType: JexlContext(68)", "Delete SimpleName: context(69)", "Delete SingleVariableDeclaration(70)", "Delete SimpleName: Object(71)", "Delete SimpleType: Object(72)", "Delete SimpleName: args(73)", "Delete SingleVariableDeclaration(74)", "Delete MethodDeclaration(75)", "Delete TextElement: Returns the text of this Script.(76)", "Delete TagElement(77)", "Delete TextElement:  The script to be executed.(78)", "Delete TagElement: @return(79)", "Delete Javadoc(80)", "Delete SimpleName: String(81)", "Delete SimpleType: String(82)", "Delete SimpleName: getText(83)", "Delete MethodDeclaration(84)", "Delete TextElement: Gets this script parameters.(85)", "Delete TagElement(86)", "Delete TextElement:  the parameters or null(87)", "Delete TagElement: @return(88)", "Delete TextElement:  2.1(89)", "Delete TagElement: @since(90)", "Delete Javadoc(91)", "Delete SimpleName: String(92)", "Delete SimpleType: String(93)", "Delete Dimension(94)", "Delete ArrayType: String[](95)", "Delete SimpleName: getParameters(96)", "Delete MethodDeclaration(97)", "Delete TextElement: Gets this script local variables.(98)", "Delete TagElement(99)", "Delete TextElement:  the local variables or null(100)", "Delete TagElement: @return(101)", "Delete TextElement:  2.1(102)", "Delete TagElement: @since(103)", "Delete Javadoc(104)", "Delete SimpleName: String(105)", "Delete SimpleType: String(106)", "Delete Dimension(107)", "Delete ArrayType: String[](108)", "Delete SimpleName: getLocalVariables(109)", "Delete MethodDeclaration(110)", "Delete TextElement: Gets this script variables.(111)", "Delete TextElement: <p>Note that since variables can be in an ant-ish form (ie foo.bar.quux), each variable is returned as (112)", "Delete TextElement: a list of strings where each entry is a fragment of the variable ({\"foo\", \"bar\", \"quux\"} in the example.</p>(113)", "Delete TagElement(114)", "Delete TextElement:  the variables or null(115)", "Delete TagElement: @return(116)", "Delete TextElement:  2.1(117)", "Delete TagElement: @since(118)", "Delete Javadoc(119)", "Delete SimpleName: Set(120)", "Delete SimpleType: Set(121)", "Delete SimpleName: List(122)", "Delete SimpleType: List(123)", "Delete SimpleName: String(124)", "Delete SimpleType: String(125)", "Delete ParameterizedType: List<String>(126)", "Delete ParameterizedType: Set<List<String>>(127)", "Delete SimpleName: getVariables(128)", "Delete MethodDeclaration(129)", "Delete TextElement: Creates a Callable from this script.(130)", "Delete TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>(131)", "Delete TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>(132)", "Delete TagElement(133)", "Delete SimpleName: context(134)", "Delete TextElement:  the context(135)", "Delete TagElement: @param(136)", "Delete TextElement:  the callable(137)", "Delete TagElement: @return(138)", "Delete TextElement:  2.1(139)", "Delete TagElement: @since(140)", "Delete Javadoc(141)", "Delete SimpleName: Callable(142)", "Delete SimpleType: Callable(143)", "Delete SimpleName: Object(144)", "Delete SimpleType: Object(145)", "Delete ParameterizedType: Callable<Object>(146)", "Delete SimpleName: callable(147)", "Delete SimpleName: JexlContext(148)", "Delete SimpleType: JexlContext(149)", "Delete SimpleName: context(150)", "Delete SingleVariableDeclaration(151)", "Delete MethodDeclaration(152)", "Delete TextElement: Creates a Callable from this script.(153)", "Delete TextElement: <p>This allows to submit it to an executor pool and provides support for asynchronous calls.</p>(154)", "Delete TextElement: <p>The interpreter will handle interruption/cancellation gracefully if needed.</p>(155)", "Delete TagElement(156)", "Delete SimpleName: context(157)", "Delete TextElement:  the context(158)", "Delete TagElement: @param(159)", "Delete SimpleName: args(160)", "Delete TextElement:  the script arguments(161)", "Delete TagElement: @param(162)", "Delete TextElement:  the callable(163)", "Delete TagElement: @return(164)", "Delete TextElement:  2.1(165)", "Delete TagElement: @since(166)", "Delete Javadoc(167)", "Delete SimpleName: Callable(168)", "Delete SimpleType: Callable(169)", "Delete SimpleName: Object(170)", "Delete SimpleType: Object(171)", "Delete ParameterizedType: Callable<Object>(172)", "Delete SimpleName: callable(173)", "Delete SimpleName: JexlContext(174)", "Delete SimpleType: JexlContext(175)", "Delete SimpleName: context(176)", "Delete SingleVariableDeclaration(177)", "Delete SimpleName: Object(178)", "Delete SimpleType: Object(179)", "Delete SimpleName: args(180)", "Delete SingleVariableDeclaration(181)", "Delete MethodDeclaration(182)", "Delete TypeDeclaration: interface(183)"]}}, {"ScriptFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlEngine"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement:  $Id$", "DEL TextElement: </p>", "DEL TypeDeclaration: class", "DEL SimpleName: Deprecated", "DEL TextElement: s.  To create a JEXL Script, pass", "DEL SimpleName: JexlEngine", "DEL Javadoc", "DEL TextElement:  Create a JexlEngine and use the createScript method on that instead.", "DEL TagElement: @link", "DEL TextElement: </p>", "DEL SimpleName: Script", "DEL TextElement: This is a convenience class; using an instance of a ", "DEL TagElement: @link", "DEL SimpleType: JexlOne", "DEL TextElement: <pre>", "DEL TextElement: </pre>", "DEL SimpleName: JexlOne", "DEL TextElement: <p>", "DEL TagElement: @deprecated", "DEL Modifier: final", "DEL TextElement: </p>", "DEL TextElement: String jexl = \"y = x * 12 + 44; y = y * 4;\";", "DEL TextElement: Script script = ScriptFactory.createScript( jexl );", "DEL TextElement:  1.1", "DEL TagElement: @link", "DEL TextElement: <p>", "DEL TagElement: @since", "DEL TextElement: Creates ", "DEL MarkerAnnotation", "DEL TextElement: <p>", "DEL TextElement: When an ", "DEL TextElement: valid JEXL syntax to the static createScript() method:", "DEL TextElement: parsed and verified.", "DEL TextElement: that serves the same purpose with more control is recommended.", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: ScriptFactory", "DEL TextElement:  is created, the JEXL syntax is", "DEL TagElement: @version", "DEL SimpleName: Script"]}]}}, {"ScriptFactory_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(2)", "Delete ImportDeclaration(3)", "Delete TextElement: <p>(4)", "Delete TextElement: Creates (5)", "Delete SimpleName: Script(6)", "Delete TagElement: @link(7)", "Delete TextElement: s.  To create a JEXL Script, pass(8)", "Delete TextElement: valid JEXL syntax to the static createScript() method:(9)", "Delete TextElement: </p>(10)", "Delete TextElement: <pre>(11)", "Delete TextElement: String jexl = \"y = x * 12 + 44; y = y * 4;\";(12)", "Delete TextElement: Script script = ScriptFactory.createScript( jexl );(13)", "Delete TextElement: </pre>(14)", "Delete TextElement: <p>(15)", "Delete TextElement: When an (16)", "Delete SimpleName: Script(17)", "Delete TagElement: @link(18)", "Delete TextElement:  is created, the JEXL syntax is(19)", "Delete TextElement: parsed and verified.(20)", "Delete TextElement: </p>(21)", "Delete TextElement: <p>(22)", "Delete TextElement: This is a convenience class; using an instance of a (23)", "Delete SimpleName: JexlEngine(24)", "Delete TagElement: @link(25)", "Delete TextElement: that serves the same purpose with more control is recommended.(26)", "Delete TextElement: </p>(27)", "Delete TagElement(28)", "Delete TextElement:  1.1(29)", "Delete TagElement: @since(30)", "Delete TextElement:  $Id$(31)", "Delete TagElement: @version(32)", "Delete TextElement:  Create a JexlEngine and use the createScript method on that instead.(33)", "Delete TagElement: @deprecated(34)", "Delete Javadoc(35)", "Delete SimpleName: Deprecated(36)", "Delete MarkerAnnotation(37)", "Delete Modifier: public(38)", "Delete Modifier: final(39)", "Delete SimpleName: ScriptFactory(40)", "Delete SimpleName: JexlOne(41)", "Delete SimpleType: JexlOne(42)", "Delete TypeDeclaration: class(43)"]}}, {"AbstractExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertySet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertyGet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ReturnStatement", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: Exception", "DEL TagElement: @return", "DEL TagElement", "DEL SimpleName: clazz", "DEL SimpleName: equals", "DEL Block", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: AbstractExecutor", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: value", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL Dimension", "DEL SimpleName: method", "DEL TextElement:  ", "DEL Block", "DEL SimpleName: AbstractExecutor", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleType: java.lang.reflect.Method", "DEL Assignment: =", "DEL SimpleName: Object", "DEL SimpleName: getReturnType", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: args", "DEL TagElement: @param", "DEL QualifiedName: java.lang.reflect.Method", "DEL SingleVariableDeclaration", "DEL SimpleName: method", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: IllegalAccessException", "DEL ArrayType: Object[]", "DEL SimpleType: Object", "DEL SuperConstructorInvocation", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: IllegalAccessException", "DEL Modifier: abstract", "DEL TagElement", "DEL ThisExpression", "DEL TagElement", "DEL PrimitiveType: int", "DEL TextElement:  the method name", "DEL Modifier: final", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleType: Exception", "DEL SimpleName: Class", "DEL SimpleName: Object", "DEL SimpleName: theMethod", "DEL SimpleName: tryExecute", "DEL TagElement", "DEL TagElement", "DEL AnonymousClassDeclaration", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: name", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleType: InvocationTargetException", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleType: JexlPropertySet", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: Set", "DEL TextElement:  the value returned by tryExecute", "DEL MethodDeclaration", "DEL SimpleName: parms", "DEL SimpleName: obj", "DEL SimpleName: Parameter", "DEL InfixExpression: &&", "DEL Modifier: public", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL SimpleType: java.lang.reflect.Method", "DEL TextElement: The method key. ", "DEL SimpleName: args", "DEL TagElement", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: abstract", "DEL SimpleName: params", "DEL TextElement:  The value to use as the property value.", "DEL MethodDeclaration", "DEL TextElement:  Method is inaccessible.", "DEL SimpleName: Object", "DEL CatchClause", "DEL SimpleType: Object", "DEL SimpleName: toString", "DEL Block", "DEL SimpleName: obj", "DEL InfixExpression: ==", "DEL StringLiteral: \"tryExecute failed\"", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL TextElement: <code>property</code> must be of the same class as this", "DEL SingleVariableDeclaration", "DEL QualifiedName: km.key", "DEL Modifier: protected", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleType: AbstractExecutor", "DEL MethodDeclaration", "DEL SimpleName: getTargetClass", "DEL SimpleType: java.lang.reflect.Method", "DEL FieldDeclaration", "DEL Modifier: final", "DEL TextElement: Indicates whether some other executor is equivalent to this one.", "DEL SimpleName: Object", "DEL TextElement:  the result of the method invocation or TRY_FAILED if checking failed.", "DEL SimpleName: AbstractExecutor", "DEL Javadoc", "DEL SimpleName: Object", "DEL TagElement", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: IllegalAccessException", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: theMethod", "DEL SimpleType: Object", "DEL ParameterizedType: Class<?>", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL TextElement: A helper to initialize the marker methods (array.get, list.get, etc...).", "DEL Modifier: final", "DEL Block", "DEL SimpleName: obj", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TagElement: @throws", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement: A helper class to pass the method &amp; parameters.", "DEL TagElement: @throws", "DEL NullLiteral", "DEL TextElement:  The return value.", "DEL SingleVariableDeclaration", "DEL TextElement:  the method held by this executor", "DEL ParameterizedType: Class<?>", "DEL Modifier: static", "DEL Javadoc", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL SimpleName: key", "DEL SimpleName: tryExecute", "DEL Assignment: =", "DEL SimpleName: obj", "DEL Block", "DEL TextElement:  the arguments array", "DEL SimpleName: arg", "DEL SimpleName: k", "DEL SimpleName: Object", "DEL FieldDeclaration", "DEL SimpleName: MethodKey", "DEL SimpleType: MethodKey", "DEL SimpleName: key", "DEL TextElement:  Method body throws an exception.", "DEL SimpleName: key", "DEL Modifier: public", "DEL TextElement:  true if can be reused for this class, false if not", "DEL SimpleName: lhsp", "DEL SimpleType: AbstractExecutor", "DEL SimpleName: Object", "DEL QualifiedName: java.lang.reflect.Method", "DEL TextElement:  the class this executor applies to", "DEL ParameterizedType: Class<?>", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: invoke", "DEL MethodInvocation", "DEL SimpleName: theMethod", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: arg", "DEL Modifier: protected", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleType: AbstractExecutor", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TagElement", "DEL TagElement: @param", "DEL TagElement: @param", "DEL IfStatement", "DEL Javadoc", "DEL TextElement:  Method is inaccessible.", "DEL SimpleType: String", "DEL SimpleName: execute", "DEL NullLiteral", "DEL SimpleName: equals", "DEL SimpleName: Object", "DEL TextElement:  the other executor to check", "DEL SimpleName: Class", "DEL TextElement: Gets the method to be executed or used as a marker.", "DEL Block", "DEL Modifier: private", "DEL SimpleType: Exception", "DEL TagElement: @param", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: String", "DEL SimpleName: Object", "DEL SimpleName: getMethod", "DEL Block", "DEL TextElement:  Method body throws an exception.", "DEL MethodDeclaration", "DEL SimpleName: clazz", "DEL SimpleType: Object", "DEL Modifier: final", "DEL TextElement: Sets the property value of an object.", "DEL TextElement:  The return value or TRY_FAILED if checking failed.", "DEL MethodInvocation", "DEL TagElement: @param", "DEL TextElement: <p>Compatibility means that:", "DEL TextElement: executor underlying method.</p>", "DEL TextElement: Abstract class that is used to execute an arbitrary 'get' method.", "DEL SimpleName: obj", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: name", "DEL Modifier: public", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement:  The value.", "DEL ParameterizedType: Class<?>", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL InfixExpression: ==", "DEL SimpleName: tryExecute", "DEL WildcardType: ?", "DEL MethodDeclaration", "DEL Javadoc", "DEL TagElement: @throws", "DEL SimpleName: theClass", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: AbstractExecutor", "DEL InfixExpression: &&", "DEL TextElement: Specifies if this executor is cacheable and able to be reused for this", "DEL SimpleName: Object", "DEL TextElement:  the list of arguments", "DEL SimpleName: Object", "DEL SimpleName: rhsp", "DEL SimpleType: Exception", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleName: InvocationTargetException", "DEL Dimension", "DEL SimpleName: Object", "DEL SimpleName: getTargetProperty", "DEL Block", "DEL TextElement:  The object to set the property in.", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: obj", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: getMethod", "DEL WildcardType: ?", "DEL Javadoc", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleType: Object", "DEL TextElement: for all other AbstractExecutor classes.", "DEL TagElement: @param", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: name", "DEL Modifier: final", "DEL TextElement: Gets the property targeted by this executor.", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL TextElement:  The property value or TRY_FAILED if checking failed.", "DEL TagElement", "DEL PrefixExpression: !", "DEL TextElement: the actual set of arguments.", "DEL Modifier: static", "DEL TextElement:  the object to invoke the method upon", "DEL Modifier: final", "DEL SimpleName: value", "DEL SimpleName: exec", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleType: AbstractExecutor", "DEL TextElement:  The property value.", "DEL SimpleName: Class", "DEL ArrayType: Object[]", "DEL Javadoc", "DEL SimpleName: Parameter", "DEL TagElement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: hashCode", "DEL TextElement: Returns the return type of the method invoked.", "DEL SimpleType: Object", "DEL TextElement:  the class this executor applies to", "DEL SimpleName: obj", "DEL SimpleType: Class", "DEL BooleanLiteral: false", "DEL SimpleName: exec", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL SimpleName: tryInvoke", "DEL SimpleName: TRY_FAILED", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: lhsp", "DEL SimpleName: name", "DEL Modifier: abstract", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleName: obj", "DEL SimpleName: makeArgs", "DEL Block", "DEL SimpleType: JexlMethod", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement: Gets the method name used.", "DEL Modifier: final", "DEL TextElement: the actual set of arguments.", "DEL SimpleName: tryFailed", "DEL TextElement: target class,", "DEL SimpleName: getTargetProperty", "DEL Javadoc", "DEL SimpleName: obj", "DEL TagElement: @throws", "DEL SimpleName: Class", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL SimpleName: theClass", "DEL TextElement:  the class this executor applies to", "DEL TextElement: executor's target property (for list and map based executors) and have the same", "DEL SimpleName: method", "DEL TagElement", "DEL TagElement", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: args", "DEL NullLiteral", "DEL SimpleType: InvocationTargetException", "DEL SimpleType: java.lang.reflect.Method", "DEL Javadoc", "DEL SimpleName: theMethod", "DEL SimpleName: method", "DEL SimpleName: Object", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleType: Exception", "DEL SimpleName: params", "DEL Dimension", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: objectClass", "DEL TagElement: @return", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: Set", "DEL SimpleName: InvocationTargetException", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: obj", "DEL SimpleName: getMethodName", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: Class", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL Javadoc", "DEL TextElement: target class and", "DEL TextElement: The method. ", "DEL ReturnStatement", "DEL TagElement", "DEL Modifier: abstract", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: invoke", "DEL TagElement: @inheritDoc", "DEL TagElement: @return", "DEL TagElement", "DEL MarkerAnnotation", "DEL SimpleName: theMethod", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TagElement", "DEL Block", "DEL TextElement:  true if tryExecute failed, false otherwise", "DEL SimpleName: obj", "DEL SimpleName: equals", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: obj", "DEL SimpleName: isAlive", "DEL SimpleName: String", "DEL SimpleType: Class", "DEL TagElement", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL TextElement: value (for other types).</p>", "DEL TagElement: @inheritDoc", "DEL SimpleName: getMethod", "DEL SimpleName: obj", "DEL SimpleName: Exception", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL TextElement: Checks whether a tryExecute failed or not.", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: m", "DEL InfixExpression: !=", "DEL TextElement:  the method arguments", "DEL SimpleName: obj", "DEL TagElement", "DEL Javadoc", "DEL Javadoc", "DEL ParameterizedType: Class<?>", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: name", "DEL Modifier: protected", "DEL TagElement: @return", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: Object", "DEL Modifier: final", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TextElement: Tries to reuse this executor, checking that it is compatible with", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL TextElement: <code>o</code> must be of the same class as this executor's", "DEL MarkerAnnotation", "DEL SimpleName: lhsp", "DEL SimpleName: obj", "DEL Block", "DEL TextElement:  ", "DEL Modifier: public", "DEL SimpleName: theMethod", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL Dimension", "DEL SimpleName: Override", "DEL Javadoc", "DEL Block", "DEL TextElement:  ", "DEL TextElement: method that is introspected. This is the superclass", "DEL SingleVariableDeclaration", "DEL SimpleName: AbstractExecutor", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL SimpleType: Class", "DEL SimpleName: value", "DEL SimpleName: params", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL TagElement: @return", "DEL SimpleName: Method", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL Modifier: final", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: value", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: parms", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement:  the method held by this executor", "DEL SimpleName: km", "DEL SimpleName: Object", "DEL SimpleName: IllegalAccessException", "DEL ClassInstanceCreation", "DEL TextElement:  the class to introspect", "DEL TextElement:  the class this executor applies to", "DEL SimpleName: arg", "DEL SimpleName: objectClass", "DEL SimpleName: obj", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: equals", "DEL TypeDeclaration: class", "DEL SimpleName: JexlPropertyGet", "DEL TextElement:  Method is inaccessible.", "DEL SimpleName: name", "DEL SimpleName: method", "DEL SimpleName: theClass", "DEL SimpleType: IllegalAccessException", "DEL TextElement:  The object to get the property from.", "DEL ReturnStatement", "DEL TypeDeclaration: class", "DEL SimpleType: InvocationTargetException", "DEL SimpleName: theClass", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: obj", "DEL Modifier: public", "DEL TextElement: Gets the object class targeted by this executor.", "DEL Modifier: abstract", "DEL SimpleName: theClass", "DEL Block", "DEL TextElement: The class this executor applies to. ", "DEL TagElement: @param", "DEL Modifier: static", "DEL SimpleName: k", "DEL PrefixExpression: !", "DEL ParameterizedType: Class<?>", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: arg", "DEL SimpleName: key", "DEL TextElement: Method to be executed. ", "DEL SimpleType: MethodKey", "DEL TagElement: @param", "DEL SimpleName: JexlPropertySet", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleType: java.lang.reflect.Method", "DEL TextElement:  the object to invoke the method upon", "DEL Modifier: public", "DEL Modifier: protected", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL TagElement", "DEL InfixExpression: ==", "DEL TextElement:  The property to set in the object.", "DEL MethodDeclaration", "DEL SimpleName: args", "DEL TextElement: Gets the property value from an object.", "DEL SimpleName: rhsp", "DEL SimpleName: hashCode", "DEL SimpleType: Class", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleName: method", "DEL SingleVariableDeclaration", "DEL SimpleType: JexlPropertyGet", "DEL TagElement: @return", "DEL Block", "DEL QualifiedName: km.method", "DEL SimpleName: obj", "DEL InfixExpression: !=", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: JexlMethod", "DEL Modifier: final", "DEL SimpleName: method", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: method", "DEL SimpleName: lhsp", "DEL InfixExpression: !=", "DEL SimpleName: rhsp", "DEL MethodInvocation", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Modifier: public", "DEL ReturnStatement", "DEL Javadoc", "DEL TextElement: the actual set of arguments.", "DEL TagElement", "DEL SimpleName: theClass", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL Modifier: public", "DEL TextElement:  method name", "DEL SimpleName: Object", "DEL Modifier: protected", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: AbstractExecutor", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL SimpleName: getTargetProperty", "DEL TagElement", "DEL SimpleName: tryExecute", "DEL TagElement: @param", "DEL SimpleName: xnever", "DEL TextElement: Tries to reuse this executor, checking that it is compatible with", "DEL ReturnStatement", "DEL ThrowStatement", "DEL SimpleName: Object", "DEL TextElement:  the method key", "DEL Block", "DEL Block", "DEL SimpleName: execute", "DEL TagElement", "DEL SimpleName: Object", "DEL TagElement: @throws", "DEL SimpleName: MethodKey", "DEL SimpleName: Exception", "DEL SimpleType: Object", "DEL SimpleName: arg", "DEL ArrayType: Object[]", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: false", "DEL NullLiteral", "DEL SimpleType: AbstractExecutor", "DEL TagElement", "DEL Block", "DEL SimpleName: Class", "DEL TextElement:  The property to get from the object.", "DEL SimpleType: Object", "DEL SimpleName: Class", "DEL Modifier: final", "DEL NullLiteral", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: theMethod", "DEL SimpleName: rhsp", "DEL ParameterizedType: Class<?>", "DEL Javadoc", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Javadoc", "DEL CastExpression", "DEL TextElement:  true if both executors are equivalent, false otherwise", "DEL Modifier: static", "DEL SimpleName: theClass", "DEL Block", "DEL InfixExpression: ==", "DEL TagElement: @inheritDoc", "DEL TextElement:  Method The method used by execute in derived classes.", "DEL MethodInvocation", "DEL TagElement: @since", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: Exception", "DEL TagElement: @inheritDoc", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: obj", "DEL TextElement: Default and sole constructor.", "DEL SimpleName: getTargetClass", "DEL TextElement:  the method arguments", "DEL SimpleName: getClass", "DEL TextElement: <p>Compatibility means that:", "DEL InstanceofExpression", "DEL SimpleName: theClass", "DEL SimpleName: theMethod", "DEL MethodDeclaration", "DEL SimpleName: equals", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: parms", "DEL ParameterizedType: Class<?>", "DEL TextElement:  the target property", "DEL SimpleName: Override", "DEL TextElement: at the value of the method.", "DEL TagElement: @return", "DEL TagElement: @inheritDoc", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: m", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL SimpleName: key", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleType: String", "DEL ThisExpression", "DEL SimpleName: xnever", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL TextElement: <code>property</code> must be of the same class as this", "DEL VariableDeclarationFragment", "DEL SimpleName: getClass", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: obj", "DEL Modifier: public", "DEL SimpleType: Object", "DEL PrimitiveType: boolean", "DEL TagElement: @throws", "DEL SimpleName: Object", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: exec", "DEL QualifiedName: java.lang.reflect.Method", "DEL TextElement: Tries to reuse this executor, checking that it is compatible with", "DEL SimpleName: Object", "DEL SimpleName: c", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL TextElement: Abstract class that is used to execute an arbitrary 'set' method.", "DEL SimpleName: params", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: obj", "DEL ReturnStatement", "DEL TagElement: @param", "DEL Modifier: public", "DEL TextElement: value (for other types)", "DEL SimpleName: theMethod", "DEL SimpleName: Parameter", "DEL InfixExpression: ||", "DEL TextElement: class of object it was returned for.", "DEL BooleanLiteral: false", "DEL Javadoc", "DEL Block", "DEL SimpleName: m", "DEL Modifier: public", "DEL ThisExpression", "DEL TryStatement", "DEL Javadoc", "DEL SimpleType: Class", "DEL TextElement:  the method and MethodKey to encapsulate.", "DEL SimpleType: Class", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL TagElement: @param", "DEL SimpleName: objectClass", "DEL SimpleName: tryExecute", "DEL SingleVariableDeclaration", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: Object", "DEL TextElement:  the method", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL TextElement:  the result of the method invocation", "DEL Block", "DEL MethodDeclaration", "DEL TagElement", "DEL TypeDeclaration: class", "DEL MethodDeclaration", "DEL SimpleName: execute", "DEL SimpleName: c", "DEL TextElement:  ", "DEL WildcardType: ?", "DEL TagElement", "DEL TextElement: The method key discovered from the arguments. ", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Class<?>", "DEL ReturnStatement", "DEL SimpleName: AbstractExecutor", "DEL Modifier: static", "DEL Block", "DEL ClassInstanceCreation", "DEL WildcardType: ?", "DEL TagElement", "DEL SimpleName: getMethod", "DEL Javadoc", "DEL SimpleName: obj", "DEL SuperConstructorInvocation", "DEL SimpleName: getTargetProperty", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Object", "DEL SimpleName: clazz", "DEL TagElement: @param", "DEL TextElement: A marker for invocation failures in tryInvoke. ", "DEL Dimension", "DEL SimpleName: getTargetClass", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL TextElement: Creates an instance.", "DEL SimpleName: tryExecute", "DEL SimpleType: String", "DEL Modifier: public", "DEL TextElement:  ", "DEL WildcardType: ?", "DEL SimpleName: Error", "DEL PrefixExpression: !", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL Modifier: abstract", "DEL SimpleType: IllegalAccessException", "DEL TagElement", "DEL Javadoc", "DEL Block", "DEL SimpleName: execute", "DEL TextElement:  The object to invoke the method from.", "DEL SimpleType: Error", "DEL Block", "DEL SimpleType: Object", "DEL Modifier: final", "DEL TextElement: Creates a new instance.", "DEL SimpleType: MethodKey", "DEL SimpleType: Class", "DEL SimpleName: IllegalAccessException", "DEL TextElement:  ", "DEL TagElement", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: invoke", "DEL SimpleType: Object", "DEL TextElement: executor's target property (for list and map based executors) and have the same", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: k", "DEL WildcardType: ?", "DEL SimpleName: Get", "DEL Assignment: =", "DEL TextElement:  the target object class", "DEL Modifier: abstract", "DEL SimpleName: key", "DEL SimpleName: Method", "DEL SimpleType: Object", "DEL SimpleName: AbstractExecutor", "DEL Javadoc", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: execute", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: method", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL SimpleType: IllegalAccessException", "DEL SingleVariableDeclaration", "DEL SimpleName: c", "DEL SimpleName: Class", "DEL SimpleType: Object", "DEL SimpleName: arg", "DEL SimpleName: initMarker", "DEL SingleVariableDeclaration", "DEL TextElement:  The object to get the property from.", "DEL SimpleName: InvocationTargetException", "DEL TextElement:  Method body throws an exception.", "DEL SimpleType: Object", "DEL TextElement: <code>o</code> must be of the same class as this executor's", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: getReturnType", "DEL SimpleName: km", "DEL SimpleName: args", "DEL Modifier: public", "DEL TagElement: @param", "DEL ThisExpression", "DEL Javadoc", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Modifier: protected", "DEL ParenthesizedExpression", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: method", "DEL SimpleName: execute", "DEL TextElement: Abstract class that is used to execute an arbitrary", "DEL PrimitiveType: boolean", "DEL SimpleName: arg", "DEL Block", "DEL Javadoc", "DEL TextElement: Abstract class that is used to execute an arbitrary method.", "DEL SimpleName: equals", "DEL NullLiteral", "DEL TextElement: Creates an arguments array.", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleType: Object", "DEL SimpleName: getName", "DEL SimpleName: args", "DEL SimpleName: key", "DEL Modifier: protected", "DEL ThisExpression", "DEL SimpleName: value", "DEL ArrayType: Object[]", "DEL SimpleName: arg", "DEL SimpleName: MethodKey", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL TextElement:  return type", "DEL Block", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL TextElement: Tell whether the executor is alive by looking", "DEL SuperConstructorInvocation", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Block", "DEL TextElement:  boolean Whether the executor is alive.", "DEL Modifier: public", "DEL TagElement", "DEL TagElement", "DEL Block", "DEL SimpleType: java.lang.reflect.Method", "DEL MethodInvocation", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleType: Object", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: obj", "DEL SimpleName: isCacheable", "DEL MethodInvocation", "DEL SimpleName: tryInvoke", "DEL TextElement:  1.0", "DEL TextElement: Invokes the method to be executed.", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleType: Parameter", "DEL SimpleName: Get", "DEL SingleVariableDeclaration", "DEL SimpleName: theClass", "DEL TextElement:  the name of the method", "DEL TagElement: @param", "DEL SimpleType: AbstractExecutor", "DEL TextElement:  the method", "DEL BooleanLiteral: true", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement: Default and sole constructor.", "DEL TextElement:  the method held by this executor", "DEL SimpleName: obj", "DEL TagElement: @return", "DEL QualifiedName: java.lang.reflect.Method", "DEL TextElement: and that <code>arg</code> must be a valid argument for this", "DEL PrimitiveType: boolean", "DEL TextElement:  the parameters", "DEL SimpleName: tryInvoke", "DEL TextElement: Default and sole constructor.", "DEL Javadoc"]}]}}, {"AbstractExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlMethod(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertySet(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.apache.commons.jexl2.introspection.JexlPropertyGet(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(10)", "Delete ImportDeclaration(11)", "Delete TextElement: Abstract class that is used to execute an arbitrary(12)", "Delete TextElement: method that is introspected. This is the superclass(13)", "Delete TextElement: for all other AbstractExecutor classes.(14)", "Delete TagElement(15)", "Delete TextElement:  1.0(16)", "Delete TagElement: @since(17)", "Delete Javadoc(18)", "Delete Modifier: public(19)", "Delete Modifier: abstract(20)", "Delete SimpleName: AbstractExecutor(21)", "Delete TextElement: A marker for invocation failures in tryInvoke. (22)", "Delete TagElement(23)", "Delete Javadoc(24)", "Delete Modifier: public(25)", "Delete Modifier: static(26)", "Delete Modifier: final(27)", "Delete SimpleName: Object(28)", "Delete SimpleType: Object(29)", "Delete SimpleName: TRY_FAILED(30)", "Delete SimpleName: Object(31)", "Delete SimpleType: Object(32)", "Delete SimpleName: Override(33)", "Delete MarkerAnnotation(34)", "Delete Modifier: public(35)", "Delete SimpleName: String(36)", "Delete SimpleType: String(37)", "Delete SimpleName: toString(38)", "Delete StringLiteral: \"tryExecute failed\"(39)", "Delete ReturnStatement(40)", "Delete Block(41)", "Delete MethodDeclaration(42)", "Delete AnonymousClassDeclaration(43)", "Delete ClassInstanceCreation(44)", "Delete VariableDeclarationFragment(45)", "Delete FieldDeclaration(46)", "Delete TextElement: A helper to initialize the marker methods (array.get, list.get, etc...).(47)", "Delete TagElement(48)", "Delete SimpleName: clazz(49)", "Delete TextElement:  the class to introspect(50)", "Delete TagElement: @param(51)", "Delete SimpleName: name(52)", "Delete TextElement:  the name of the method(53)", "Delete TagElement: @param(54)", "Delete SimpleName: parms(55)", "Delete TextElement:  the parameters(56)", "Delete TagElement: @param(57)", "Delete TextElement:  the method(58)", "Delete TagElement: @return(59)", "Delete Javadoc(60)", "Delete Modifier: static(61)", "Delete QualifiedName: java.lang.reflect.Method(62)", "Delete SimpleType: java.lang.reflect.Method(63)", "Delete SimpleName: initMarker(64)", "Delete SimpleName: Class(65)", "Delete SimpleType: Class(66)", "Delete WildcardType: ?(67)", "Delete ParameterizedType: Class<?>(68)", "Delete SimpleName: clazz(69)", "Delete SingleVariableDeclaration(70)", "Delete SimpleName: String(71)", "Delete SimpleType: String(72)", "Delete SimpleName: name(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: Class(75)", "Delete SimpleType: Class(76)", "Delete WildcardType: ?(77)", "Delete ParameterizedType: Class<?>(78)", "Delete SimpleName: parms(79)", "Delete SingleVariableDeclaration(80)", "Delete SimpleName: clazz(81)", "Delete SimpleName: getMethod(82)", "Delete SimpleName: name(83)", "Delete SimpleName: parms(84)", "Delete MethodInvocation(85)", "Delete ReturnStatement(86)", "Delete Block(87)", "Delete SimpleName: Exception(88)", "Delete SimpleType: Exception(89)", "Delete SimpleName: xnever(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: Error(92)", "Delete SimpleType: Error(93)", "Delete SimpleName: xnever(94)", "Delete ClassInstanceCreation(95)", "Delete ThrowStatement(96)", "Delete Block(97)", "Delete CatchClause(98)", "Delete TryStatement(99)", "Delete Block(100)", "Delete MethodDeclaration(101)", "Delete TextElement: Creates an arguments array.(102)", "Delete TagElement(103)", "Delete SimpleName: args(104)", "Delete TextElement:  the list of arguments(105)", "Delete TagElement: @param(106)", "Delete TextElement:  the arguments array(107)", "Delete TagElement: @return(108)", "Delete Javadoc(109)", "Delete Modifier: static(110)", "Delete SimpleName: Object(111)", "Delete SimpleType: Object(112)", "Delete Dimension(113)", "Delete ArrayType: Object[](114)", "Delete SimpleName: makeArgs(115)", "Delete SimpleName: Object(116)", "Delete SimpleType: Object(117)", "Delete SimpleName: args(118)", "Delete SingleVariableDeclaration(119)", "Delete SimpleName: args(120)", "Delete ReturnStatement(121)", "Delete Block(122)", "Delete MethodDeclaration(123)", "Delete TextElement: The class this executor applies to. (124)", "Delete TagElement(125)", "Delete Javadoc(126)", "Delete Modifier: protected(127)", "Delete Modifier: final(128)", "Delete SimpleName: Class(129)", "Delete SimpleType: Class(130)", "Delete WildcardType: ?(131)", "Delete ParameterizedType: Class<?>(132)", "Delete SimpleName: objectClass(133)", "Delete VariableDeclarationFragment(134)", "Delete FieldDeclaration(135)", "Delete TextElement: Method to be executed. (136)", "Delete TagElement(137)", "Delete Javadoc(138)", "Delete Modifier: protected(139)", "Delete Modifier: final(140)", "Delete QualifiedName: java.lang.reflect.Method(141)", "Delete SimpleType: java.lang.reflect.Method(142)", "Delete SimpleName: method(143)", "Delete VariableDeclarationFragment(144)", "Delete FieldDeclaration(145)", "Delete TextElement: Default and sole constructor.(146)", "Delete TagElement(147)", "Delete SimpleName: theClass(148)", "Delete TextElement:  the class this executor applies to(149)", "Delete TagElement: @param(150)", "Delete SimpleName: theMethod(151)", "Delete TextElement:  the method held by this executor(152)", "Delete TagElement: @param(153)", "Delete Javadoc(154)", "Delete Modifier: protected(155)", "Delete SimpleName: AbstractExecutor(156)", "Delete SimpleName: Class(157)", "Delete SimpleType: Class(158)", "Delete WildcardType: ?(159)", "Delete ParameterizedType: Class<?>(160)", "Delete SimpleName: theClass(161)", "Delete SingleVariableDeclaration(162)", "Delete QualifiedName: java.lang.reflect.Method(163)", "Delete SimpleType: java.lang.reflect.Method(164)", "Delete SimpleName: theMethod(165)", "Delete SingleVariableDeclaration(166)", "Delete SimpleName: objectClass(167)", "Delete SimpleName: theClass(168)", "Delete Assignment: =(169)", "Delete ExpressionStatement(170)", "Delete SimpleName: method(171)", "Delete SimpleName: theMethod(172)", "Delete Assignment: =(173)", "Delete ExpressionStatement(174)", "Delete Block(175)", "Delete MethodDeclaration(176)", "Delete TagElement: @inheritDoc(177)", "Delete TextElement:  (178)", "Delete TagElement(179)", "Delete Javadoc(180)", "Delete SimpleName: Override(181)", "Delete MarkerAnnotation(182)", "Delete Modifier: public(183)", "Delete PrimitiveType: boolean(184)", "Delete SimpleName: equals(185)", "Delete SimpleName: Object(186)", "Delete SimpleType: Object(187)", "Delete SimpleName: obj(188)", "Delete SingleVariableDeclaration(189)", "Delete ThisExpression(190)", "Delete SimpleName: obj(191)", "Delete InfixExpression: ==(192)", "Delete SimpleName: obj(193)", "Delete SimpleName: AbstractExecutor(194)", "Delete SimpleType: AbstractExecutor(195)", "Delete InstanceofExpression(196)", "Delete SimpleName: equals(197)", "Delete SimpleName: AbstractExecutor(198)", "Delete SimpleType: AbstractExecutor(199)", "Delete SimpleName: obj(200)", "Delete CastExpression(201)", "Delete MethodInvocation(202)", "Delete InfixExpression: &&(203)", "Delete ParenthesizedExpression(204)", "Delete InfixExpression: ||(205)", "Delete ReturnStatement(206)", "Delete Block(207)", "Delete MethodDeclaration(208)", "Delete TagElement: @inheritDoc(209)", "Delete TextElement:  (210)", "Delete TagElement(211)", "Delete Javadoc(212)", "Delete SimpleName: Override(213)", "Delete MarkerAnnotation(214)", "Delete Modifier: public(215)", "Delete PrimitiveType: int(216)", "Delete SimpleName: hashCode(217)", "Delete SimpleName: method(218)", "Delete SimpleName: hashCode(219)", "Delete MethodInvocation(220)", "Delete ReturnStatement(221)", "Delete Block(222)", "Delete MethodDeclaration(223)", "Delete TextElement: Indicates whether some other executor is equivalent to this one.(224)", "Delete TagElement(225)", "Delete SimpleName: arg(226)", "Delete TextElement:  the other executor to check(227)", "Delete TagElement: @param(228)", "Delete TextElement:  true if both executors are equivalent, false otherwise(229)", "Delete TagElement: @return(230)", "Delete Javadoc(231)", "Delete Modifier: public(232)", "Delete PrimitiveType: boolean(233)", "Delete SimpleName: equals(234)", "Delete SimpleName: AbstractExecutor(235)", "Delete SimpleType: AbstractExecutor(236)", "Delete SimpleName: arg(237)", "Delete SingleVariableDeclaration(238)", "Delete ThisExpression(239)", "Delete SimpleName: getClass(240)", "Delete MethodInvocation(241)", "Delete SimpleName: equals(242)", "Delete SimpleName: arg(243)", "Delete SimpleName: getClass(244)", "Delete MethodInvocation(245)", "Delete MethodInvocation(246)", "Delete PrefixExpression: !(247)", "Delete BooleanLiteral: false(248)", "Delete ReturnStatement(249)", "Delete Block(250)", "Delete IfStatement(251)", "Delete ThisExpression(252)", "Delete SimpleName: getMethod(253)", "Delete MethodInvocation(254)", "Delete SimpleName: equals(255)", "Delete SimpleName: arg(256)", "Delete SimpleName: getMethod(257)", "Delete MethodInvocation(258)", "Delete MethodInvocation(259)", "Delete PrefixExpression: !(260)", "Delete BooleanLiteral: false(261)", "Delete ReturnStatement(262)", "Delete Block(263)", "Delete IfStatement(264)", "Delete ThisExpression(265)", "Delete SimpleName: getTargetClass(266)", "Delete MethodInvocation(267)", "Delete SimpleName: equals(268)", "Delete SimpleName: arg(269)", "Delete SimpleName: getTargetClass(270)", "Delete MethodInvocation(271)", "Delete MethodInvocation(272)", "Delete PrefixExpression: !(273)", "Delete BooleanLiteral: false(274)", "Delete ReturnStatement(275)", "Delete Block(276)", "Delete IfStatement(277)", "Delete SimpleName: Object(278)", "Delete SimpleType: Object(279)", "Delete SimpleName: lhsp(280)", "Delete ThisExpression(281)", "Delete SimpleName: getTargetProperty(282)", "Delete MethodInvocation(283)", "Delete VariableDeclarationFragment(284)", "Delete VariableDeclarationStatement(285)", "Delete SimpleName: Object(286)", "Delete SimpleType: Object(287)", "Delete SimpleName: rhsp(288)", "Delete SimpleName: arg(289)", "Delete SimpleName: getTargetProperty(290)", "Delete MethodInvocation(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete SimpleName: lhsp(294)", "Delete NullLiteral(295)", "Delete InfixExpression: ==(296)", "Delete SimpleName: rhsp(297)", "Delete NullLiteral(298)", "Delete InfixExpression: ==(299)", "Delete InfixExpression: &&(300)", "Delete BooleanLiteral: true(301)", "Delete ReturnStatement(302)", "Delete Block(303)", "Delete IfStatement(304)", "Delete SimpleName: lhsp(305)", "Delete NullLiteral(306)", "Delete InfixExpression: !=(307)", "Delete SimpleName: rhsp(308)", "Delete NullLiteral(309)", "Delete InfixExpression: !=(310)", "Delete InfixExpression: &&(311)", "Delete SimpleName: lhsp(312)", "Delete SimpleName: equals(313)", "Delete SimpleName: rhsp(314)", "Delete MethodInvocation(315)", "Delete ReturnStatement(316)", "Delete Block(317)", "Delete IfStatement(318)", "Delete BooleanLiteral: false(319)", "Delete ReturnStatement(320)", "Delete Block(321)", "Delete MethodDeclaration(322)", "Delete TextElement: Tell whether the executor is alive by looking(323)", "Delete TextElement: at the value of the method.(324)", "Delete TagElement(325)", "Delete TextElement:  boolean Whether the executor is alive.(326)", "Delete TagElement: @return(327)", "Delete Javadoc(328)", "Delete Modifier: public(329)", "Delete Modifier: final(330)", "Delete PrimitiveType: boolean(331)", "Delete SimpleName: isAlive(332)", "Delete SimpleName: method(333)", "Delete NullLiteral(334)", "Delete InfixExpression: !=(335)", "Delete ParenthesizedExpression(336)", "Delete ReturnStatement(337)", "Delete Block(338)", "Delete MethodDeclaration(339)", "Delete TextElement: Specifies if this executor is cacheable and able to be reused for this(340)", "Delete TextElement: class of object it was returned for.(341)", "Delete TagElement(342)", "Delete TextElement:  true if can be reused for this class, false if not(343)", "Delete TagElement: @return(344)", "Delete Javadoc(345)", "Delete Modifier: public(346)", "Delete PrimitiveType: boolean(347)", "Delete SimpleName: isCacheable(348)", "Delete SimpleName: method(349)", "Delete NullLiteral(350)", "Delete InfixExpression: !=(351)", "Delete ReturnStatement(352)", "Delete Block(353)", "Delete MethodDeclaration(354)", "Delete TextElement: Gets the method to be executed or used as a marker.(355)", "Delete TagElement(356)", "Delete TextElement:  Method The method used by execute in derived classes.(357)", "Delete TagElement: @return(358)", "Delete Javadoc(359)", "Delete Modifier: public(360)", "Delete Modifier: final(361)", "Delete QualifiedName: java.lang.reflect.Method(362)", "Delete SimpleType: java.lang.reflect.Method(363)", "Delete SimpleName: getMethod(364)", "Delete SimpleName: method(365)", "Delete ReturnStatement(366)", "Delete Block(367)", "Delete MethodDeclaration(368)", "Delete TextElement: Gets the object class targeted by this executor.(369)", "Delete TagElement(370)", "Delete TextElement:  the target object class(371)", "Delete TagElement: @return(372)", "Delete Javadoc(373)", "Delete Modifier: public(374)", "Delete Modifier: final(375)", "Delete SimpleName: Class(376)", "Delete SimpleType: Class(377)", "Delete WildcardType: ?(378)", "Delete ParameterizedType: Class<?>(379)", "Delete SimpleName: getTargetClass(380)", "Delete SimpleName: objectClass(381)", "Delete ReturnStatement(382)", "Delete Block(383)", "Delete MethodDeclaration(384)", "Delete TextElement: Gets the property targeted by this executor.(385)", "Delete TagElement(386)", "Delete TextElement:  the target property(387)", "Delete TagElement: @return(388)", "Delete Javadoc(389)", "Delete Modifier: public(390)", "Delete SimpleName: Object(391)", "Delete SimpleType: Object(392)", "Delete SimpleName: getTargetProperty(393)", "Delete NullLiteral(394)", "Delete ReturnStatement(395)", "Delete Block(396)", "Delete MethodDeclaration(397)", "Delete TextElement: Gets the method name used.(398)", "Delete TagElement(399)", "Delete TextElement:  method name(400)", "Delete TagElement: @return(401)", "Delete Javadoc(402)", "Delete Modifier: public(403)", "Delete Modifier: final(404)", "Delete SimpleName: String(405)", "Delete SimpleType: String(406)", "Delete SimpleName: getMethodName(407)", "Delete SimpleName: method(408)", "Delete SimpleName: getName(409)", "Delete MethodInvocation(410)", "Delete ReturnStatement(411)", "Delete Block(412)", "Delete MethodDeclaration(413)", "Delete TextElement: Checks whether a tryExecute failed or not.(414)", "Delete TagElement(415)", "Delete SimpleName: exec(416)", "Delete TextElement:  the value returned by tryExecute(417)", "Delete TagElement: @param(418)", "Delete TextElement:  true if tryExecute failed, false otherwise(419)", "Delete TagElement: @return(420)", "Delete Javadoc(421)", "Delete Modifier: public(422)", "Delete Modifier: final(423)", "Delete PrimitiveType: boolean(424)", "Delete SimpleName: tryFailed(425)", "Delete SimpleName: Object(426)", "Delete SimpleType: Object(427)", "Delete SimpleName: exec(428)", "Delete SingleVariableDeclaration(429)", "Delete SimpleName: exec(430)", "Delete SimpleName: TRY_FAILED(431)", "Delete InfixExpression: ==(432)", "Delete ReturnStatement(433)", "Delete Block(434)", "Delete MethodDeclaration(435)", "Delete TextElement: Abstract class that is used to execute an arbitrary 'get' method.(436)", "Delete TagElement(437)", "Delete Javadoc(438)", "Delete Modifier: public(439)", "Delete Modifier: abstract(440)", "Delete Modifier: static(441)", "Delete SimpleName: Get(442)", "Delete SimpleName: AbstractExecutor(443)", "Delete SimpleType: AbstractExecutor(444)", "Delete SimpleName: JexlPropertyGet(445)", "Delete SimpleType: JexlPropertyGet(446)", "Delete TextElement: Default and sole constructor.(447)", "Delete TagElement(448)", "Delete SimpleName: theClass(449)", "Delete TextElement:  the class this executor applies to(450)", "Delete TagElement: @param(451)", "Delete SimpleName: theMethod(452)", "Delete TextElement:  the method held by this executor(453)", "Delete TagElement: @param(454)", "Delete Javadoc(455)", "Delete Modifier: protected(456)", "Delete SimpleName: Get(457)", "Delete SimpleName: Class(458)", "Delete SimpleType: Class(459)", "Delete WildcardType: ?(460)", "Delete ParameterizedType: Class<?>(461)", "Delete SimpleName: theClass(462)", "Delete SingleVariableDeclaration(463)", "Delete QualifiedName: java.lang.reflect.Method(464)", "Delete SimpleType: java.lang.reflect.Method(465)", "Delete SimpleName: theMethod(466)", "Delete SingleVariableDeclaration(467)", "Delete SimpleName: theClass(468)", "Delete SimpleName: theMethod(469)", "Delete SuperConstructorInvocation(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete TagElement: @inheritDoc(473)", "Delete TextElement:  (474)", "Delete TagElement(475)", "Delete Javadoc(476)", "Delete Modifier: public(477)", "Delete Modifier: final(478)", "Delete SimpleName: Object(479)", "Delete SimpleType: Object(480)", "Delete SimpleName: invoke(481)", "Delete SimpleName: Object(482)", "Delete SimpleType: Object(483)", "Delete SimpleName: obj(484)", "Delete SingleVariableDeclaration(485)", "Delete SimpleName: Exception(486)", "Delete SimpleType: Exception(487)", "Delete SimpleName: execute(488)", "Delete SimpleName: obj(489)", "Delete MethodInvocation(490)", "Delete ReturnStatement(491)", "Delete Block(492)", "Delete MethodDeclaration(493)", "Delete TagElement: @inheritDoc(494)", "Delete TextElement:  (495)", "Delete TagElement(496)", "Delete Javadoc(497)", "Delete Modifier: public(498)", "Delete Modifier: final(499)", "Delete SimpleName: Object(500)", "Delete SimpleType: Object(501)", "Delete SimpleName: tryInvoke(502)", "Delete SimpleName: Object(503)", "Delete SimpleType: Object(504)", "Delete SimpleName: obj(505)", "Delete SingleVariableDeclaration(506)", "Delete SimpleName: Object(507)", "Delete SimpleType: Object(508)", "Delete SimpleName: key(509)", "Delete SingleVariableDeclaration(510)", "Delete SimpleName: tryExecute(511)", "Delete SimpleName: obj(512)", "Delete SimpleName: key(513)", "Delete MethodInvocation(514)", "Delete ReturnStatement(515)", "Delete Block(516)", "Delete MethodDeclaration(517)", "Delete TextElement: Gets the property value from an object.(518)", "Delete TagElement(519)", "Delete SimpleName: obj(520)", "Delete TextElement:  The object to get the property from.(521)", "Delete TagElement: @param(522)", "Delete TextElement:  The property value.(523)", "Delete TagElement: @return(524)", "Delete SimpleName: IllegalAccessException(525)", "Delete TextElement:  Method is inaccessible.(526)", "Delete TagElement: @throws(527)", "Delete SimpleName: InvocationTargetException(528)", "Delete TextElement:  Method body throws an exception.(529)", "Delete TagElement: @throws(530)", "Delete Javadoc(531)", "Delete Modifier: public(532)", "Delete Modifier: abstract(533)", "Delete SimpleName: Object(534)", "Delete SimpleType: Object(535)", "Delete SimpleName: execute(536)", "Delete SimpleName: Object(537)", "Delete SimpleType: Object(538)", "Delete SimpleName: obj(539)", "Delete SingleVariableDeclaration(540)", "Delete SimpleName: IllegalAccessException(541)", "Delete SimpleType: IllegalAccessException(542)", "Delete SimpleName: InvocationTargetException(543)", "Delete SimpleType: InvocationTargetException(544)", "Delete MethodDeclaration(545)", "Delete TextElement: Tries to reuse this executor, checking that it is compatible with(546)", "Delete TextElement: the actual set of arguments.(547)", "Delete TextElement: <p>Compatibility means that:(548)", "Delete TextElement: <code>o</code> must be of the same class as this executor's(549)", "Delete TextElement: target class and(550)", "Delete TextElement: <code>property</code> must be of the same class as this(551)", "Delete TextElement: executor's target property (for list and map based executors) and have the same(552)", "Delete TextElement: value (for other types).</p>(553)", "Delete TagElement(554)", "Delete SimpleName: obj(555)", "Delete TextElement:  The object to get the property from.(556)", "Delete TagElement: @param(557)", "Delete SimpleName: key(558)", "Delete TextElement:  The property to get from the object.(559)", "Delete TagElement: @param(560)", "Delete TextElement:  The property value or TRY_FAILED if checking failed.(561)", "Delete TagElement: @return(562)", "Delete Javadoc(563)", "Delete Modifier: public(564)", "Delete SimpleName: Object(565)", "Delete SimpleType: Object(566)", "Delete SimpleName: tryExecute(567)", "Delete SimpleName: Object(568)", "Delete SimpleType: Object(569)", "Delete SimpleName: obj(570)", "Delete SingleVariableDeclaration(571)", "Delete SimpleName: Object(572)", "Delete SimpleType: Object(573)", "Delete SimpleName: key(574)", "Delete SingleVariableDeclaration(575)", "Delete SimpleName: TRY_FAILED(576)", "Delete ReturnStatement(577)", "Delete Block(578)", "Delete MethodDeclaration(579)", "Delete TypeDeclaration: class(580)", "Delete TextElement: Abstract class that is used to execute an arbitrary 'set' method.(581)", "Delete TagElement(582)", "Delete Javadoc(583)", "Delete Modifier: public(584)", "Delete Modifier: abstract(585)", "Delete Modifier: static(586)", "Delete SimpleName: Set(587)", "Delete SimpleName: AbstractExecutor(588)", "Delete SimpleType: AbstractExecutor(589)", "Delete SimpleName: JexlPropertySet(590)", "Delete SimpleType: JexlPropertySet(591)", "Delete TextElement: Default and sole constructor.(592)", "Delete TagElement(593)", "Delete SimpleName: theClass(594)", "Delete TextElement:  the class this executor applies to(595)", "Delete TagElement: @param(596)", "Delete SimpleName: theMethod(597)", "Delete TextElement:  the method held by this executor(598)", "Delete TagElement: @param(599)", "Delete Javadoc(600)", "Delete Modifier: protected(601)", "Delete SimpleName: Set(602)", "Delete SimpleName: Class(603)", "Delete SimpleType: Class(604)", "Delete WildcardType: ?(605)", "Delete ParameterizedType: Class<?>(606)", "Delete SimpleName: theClass(607)", "Delete SingleVariableDeclaration(608)", "Delete QualifiedName: java.lang.reflect.Method(609)", "Delete SimpleType: java.lang.reflect.Method(610)", "Delete SimpleName: theMethod(611)", "Delete SingleVariableDeclaration(612)", "Delete SimpleName: theClass(613)", "Delete SimpleName: theMethod(614)", "Delete SuperConstructorInvocation(615)", "Delete Block(616)", "Delete MethodDeclaration(617)", "Delete TagElement: @inheritDoc(618)", "Delete TextElement:  (619)", "Delete TagElement(620)", "Delete Javadoc(621)", "Delete Modifier: public(622)", "Delete Modifier: final(623)", "Delete SimpleName: Object(624)", "Delete SimpleType: Object(625)", "Delete SimpleName: invoke(626)", "Delete SimpleName: Object(627)", "Delete SimpleType: Object(628)", "Delete SimpleName: obj(629)", "Delete SingleVariableDeclaration(630)", "Delete SimpleName: Object(631)", "Delete SimpleType: Object(632)", "Delete SimpleName: arg(633)", "Delete SingleVariableDeclaration(634)", "Delete SimpleName: Exception(635)", "Delete SimpleType: Exception(636)", "Delete SimpleName: execute(637)", "Delete SimpleName: obj(638)", "Delete SimpleName: arg(639)", "Delete MethodInvocation(640)", "Delete ReturnStatement(641)", "Delete Block(642)", "Delete MethodDeclaration(643)", "Delete TagElement: @inheritDoc(644)", "Delete TextElement:  (645)", "Delete TagElement(646)", "Delete Javadoc(647)", "Delete Modifier: public(648)", "Delete Modifier: final(649)", "Delete SimpleName: Object(650)", "Delete SimpleType: Object(651)", "Delete SimpleName: tryInvoke(652)", "Delete SimpleName: Object(653)", "Delete SimpleType: Object(654)", "Delete SimpleName: obj(655)", "Delete SingleVariableDeclaration(656)", "Delete SimpleName: Object(657)", "Delete SimpleType: Object(658)", "Delete SimpleName: key(659)", "Delete SingleVariableDeclaration(660)", "Delete SimpleName: Object(661)", "Delete SimpleType: Object(662)", "Delete SimpleName: value(663)", "Delete SingleVariableDeclaration(664)", "Delete SimpleName: tryExecute(665)", "Delete SimpleName: obj(666)", "Delete SimpleName: key(667)", "Delete SimpleName: value(668)", "Delete MethodInvocation(669)", "Delete ReturnStatement(670)", "Delete Block(671)", "Delete MethodDeclaration(672)", "Delete TextElement: Sets the property value of an object.(673)", "Delete TagElement(674)", "Delete SimpleName: obj(675)", "Delete TextElement:  The object to set the property in.(676)", "Delete TagElement: @param(677)", "Delete SimpleName: value(678)", "Delete TextElement:  The value.(679)", "Delete TagElement: @param(680)", "Delete TextElement:  The return value.(681)", "Delete TagElement: @return(682)", "Delete SimpleName: IllegalAccessException(683)", "Delete TextElement:  Method is inaccessible.(684)", "Delete TagElement: @throws(685)", "Delete SimpleName: InvocationTargetException(686)", "Delete TextElement:  Method body throws an exception.(687)", "Delete TagElement: @throws(688)", "Delete Javadoc(689)", "Delete Modifier: public(690)", "Delete Modifier: abstract(691)", "Delete SimpleName: Object(692)", "Delete SimpleType: Object(693)", "Delete SimpleName: execute(694)", "Delete SimpleName: Object(695)", "Delete SimpleType: Object(696)", "Delete SimpleName: obj(697)", "Delete SingleVariableDeclaration(698)", "Delete SimpleName: Object(699)", "Delete SimpleType: Object(700)", "Delete SimpleName: value(701)", "Delete SingleVariableDeclaration(702)", "Delete SimpleName: IllegalAccessException(703)", "Delete SimpleType: IllegalAccessException(704)", "Delete SimpleName: InvocationTargetException(705)", "Delete SimpleType: InvocationTargetException(706)", "Delete MethodDeclaration(707)", "Delete TextElement: Tries to reuse this executor, checking that it is compatible with(708)", "Delete TextElement: the actual set of arguments.(709)", "Delete TextElement: <p>Compatibility means that:(710)", "Delete TextElement: <code>o</code> must be of the same class as this executor's(711)", "Delete TextElement: target class,(712)", "Delete TextElement: <code>property</code> must be of the same class as this(713)", "Delete TextElement: executor's target property (for list and map based executors) and have the same(714)", "Delete TextElement: value (for other types)(715)", "Delete TextElement: and that <code>arg</code> must be a valid argument for this(716)", "Delete TextElement: executor underlying method.</p>(717)", "Delete TagElement(718)", "Delete SimpleName: obj(719)", "Delete TextElement:  The object to invoke the method from.(720)", "Delete TagElement: @param(721)", "Delete SimpleName: key(722)", "Delete TextElement:  The property to set in the object.(723)", "Delete TagElement: @param(724)", "Delete SimpleName: value(725)", "Delete TextElement:  The value to use as the property value.(726)", "Delete TagElement: @param(727)", "Delete TextElement:  The return value or TRY_FAILED if checking failed.(728)", "Delete TagElement: @return(729)", "Delete Javadoc(730)", "Delete Modifier: public(731)", "Delete SimpleName: Object(732)", "Delete SimpleType: Object(733)", "Delete SimpleName: tryExecute(734)", "Delete SimpleName: Object(735)", "Delete SimpleType: Object(736)", "Delete SimpleName: obj(737)", "Delete SingleVariableDeclaration(738)", "Delete SimpleName: Object(739)", "Delete SimpleType: Object(740)", "Delete SimpleName: key(741)", "Delete SingleVariableDeclaration(742)", "Delete SimpleName: Object(743)", "Delete SimpleType: Object(744)", "Delete SimpleName: value(745)", "Delete SingleVariableDeclaration(746)", "Delete SimpleName: TRY_FAILED(747)", "Delete ReturnStatement(748)", "Delete Block(749)", "Delete MethodDeclaration(750)", "Delete TypeDeclaration: class(751)", "Delete TextElement: Abstract class that is used to execute an arbitrary method.(752)", "Delete TagElement(753)", "Delete Javadoc(754)", "Delete Modifier: public(755)", "Delete Modifier: abstract(756)", "Delete Modifier: static(757)", "Delete SimpleName: Method(758)", "Delete SimpleName: AbstractExecutor(759)", "Delete SimpleType: AbstractExecutor(760)", "Delete SimpleName: JexlMethod(761)", "Delete SimpleType: JexlMethod(762)", "Delete TextElement: A helper class to pass the method &amp; parameters.(763)", "Delete TagElement(764)", "Delete Javadoc(765)", "Delete Modifier: protected(766)", "Delete Modifier: static(767)", "Delete Modifier: final(768)", "Delete SimpleName: Parameter(769)", "Delete TextElement: The method. (770)", "Delete TagElement(771)", "Delete Javadoc(772)", "Delete Modifier: private(773)", "Delete Modifier: final(774)", "Delete QualifiedName: java.lang.reflect.Method(775)", "Delete SimpleType: java.lang.reflect.Method(776)", "Delete SimpleName: method(777)", "Delete VariableDeclarationFragment(778)", "Delete FieldDeclaration(779)", "Delete TextElement: The method key. (780)", "Delete TagElement(781)", "Delete Javadoc(782)", "Delete Modifier: private(783)", "Delete Modifier: final(784)", "Delete SimpleName: MethodKey(785)", "Delete SimpleType: MethodKey(786)", "Delete SimpleName: key(787)", "Delete VariableDeclarationFragment(788)", "Delete FieldDeclaration(789)", "Delete TextElement: Creates an instance.(790)", "Delete TagElement(791)", "Delete SimpleName: m(792)", "Delete TextElement:  the method(793)", "Delete TagElement: @param(794)", "Delete SimpleName: k(795)", "Delete TextElement:  the method key(796)", "Delete TagElement: @param(797)", "Delete Javadoc(798)", "Delete Modifier: public(799)", "Delete SimpleName: Parameter(800)", "Delete QualifiedName: java.lang.reflect.Method(801)", "Delete SimpleType: java.lang.reflect.Method(802)", "Delete SimpleName: m(803)", "Delete SingleVariableDeclaration(804)", "Delete SimpleName: MethodKey(805)", "Delete SimpleType: MethodKey(806)", "Delete SimpleName: k(807)", "Delete SingleVariableDeclaration(808)", "Delete SimpleName: method(809)", "Delete SimpleName: m(810)", "Delete Assignment: =(811)", "Delete ExpressionStatement(812)", "Delete SimpleName: key(813)", "Delete SimpleName: k(814)", "Delete Assignment: =(815)", "Delete ExpressionStatement(816)", "Delete Block(817)", "Delete MethodDeclaration(818)", "Delete TypeDeclaration: class(819)", "Delete TextElement: The method key discovered from the arguments. (820)", "Delete TagElement(821)", "Delete Javadoc(822)", "Delete Modifier: protected(823)", "Delete Modifier: final(824)", "Delete SimpleName: MethodKey(825)", "Delete SimpleType: MethodKey(826)", "Delete SimpleName: key(827)", "Delete VariableDeclarationFragment(828)", "Delete FieldDeclaration(829)", "Delete TextElement: Creates a new instance.(830)", "Delete TagElement(831)", "Delete SimpleName: c(832)", "Delete TextElement:  the class this executor applies to(833)", "Delete TagElement: @param(834)", "Delete SimpleName: km(835)", "Delete TextElement:  the method and MethodKey to encapsulate.(836)", "Delete TagElement: @param(837)", "Delete Javadoc(838)", "Delete Modifier: protected(839)", "Delete SimpleName: Method(840)", "Delete SimpleName: Class(841)", "Delete SimpleType: Class(842)", "Delete WildcardType: ?(843)", "Delete ParameterizedType: Class<?>(844)", "Delete SimpleName: c(845)", "Delete SingleVariableDeclaration(846)", "Delete SimpleName: Parameter(847)", "Delete SimpleType: Parameter(848)", "Delete SimpleName: km(849)", "Delete SingleVariableDeclaration(850)", "Delete SimpleName: c(851)", "Delete QualifiedName: km.method(852)", "Delete SuperConstructorInvocation(853)", "Delete SimpleName: key(854)", "Delete QualifiedName: km.key(855)", "Delete Assignment: =(856)", "Delete ExpressionStatement(857)", "Delete Block(858)", "Delete MethodDeclaration(859)", "Delete TagElement: @inheritDoc(860)", "Delete TextElement:  (861)", "Delete TagElement(862)", "Delete Javadoc(863)", "Delete Modifier: public(864)", "Delete Modifier: final(865)", "Delete SimpleName: Object(866)", "Delete SimpleType: Object(867)", "Delete SimpleName: invoke(868)", "Delete SimpleName: Object(869)", "Delete SimpleType: Object(870)", "Delete SimpleName: obj(871)", "Delete SingleVariableDeclaration(872)", "Delete SimpleName: Object(873)", "Delete SimpleType: Object(874)", "Delete Dimension(875)", "Delete ArrayType: Object[](876)", "Delete SimpleName: params(877)", "Delete SingleVariableDeclaration(878)", "Delete SimpleName: Exception(879)", "Delete SimpleType: Exception(880)", "Delete SimpleName: execute(881)", "Delete SimpleName: obj(882)", "Delete SimpleName: params(883)", "Delete MethodInvocation(884)", "Delete ReturnStatement(885)", "Delete Block(886)", "Delete MethodDeclaration(887)", "Delete TagElement: @inheritDoc(888)", "Delete TextElement:  (889)", "Delete TagElement(890)", "Delete Javadoc(891)", "Delete Modifier: public(892)", "Delete Modifier: final(893)", "Delete SimpleName: Object(894)", "Delete SimpleType: Object(895)", "Delete SimpleName: tryInvoke(896)", "Delete SimpleName: String(897)", "Delete SimpleType: String(898)", "Delete SimpleName: name(899)", "Delete SingleVariableDeclaration(900)", "Delete SimpleName: Object(901)", "Delete SimpleType: Object(902)", "Delete SimpleName: obj(903)", "Delete SingleVariableDeclaration(904)", "Delete SimpleName: Object(905)", "Delete SimpleType: Object(906)", "Delete Dimension(907)", "Delete ArrayType: Object[](908)", "Delete SimpleName: params(909)", "Delete SingleVariableDeclaration(910)", "Delete SimpleName: tryExecute(911)", "Delete SimpleName: name(912)", "Delete SimpleName: obj(913)", "Delete SimpleName: params(914)", "Delete MethodInvocation(915)", "Delete ReturnStatement(916)", "Delete Block(917)", "Delete MethodDeclaration(918)", "Delete TagElement: @inheritDoc(919)", "Delete TextElement:  (920)", "Delete TagElement(921)", "Delete Javadoc(922)", "Delete SimpleName: Override(923)", "Delete MarkerAnnotation(924)", "Delete Modifier: public(925)", "Delete SimpleName: Object(926)", "Delete SimpleType: Object(927)", "Delete SimpleName: getTargetProperty(928)", "Delete SimpleName: key(929)", "Delete ReturnStatement(930)", "Delete Block(931)", "Delete MethodDeclaration(932)", "Delete TextElement: Returns the return type of the method invoked.(933)", "Delete TagElement(934)", "Delete TextElement:  return type(935)", "Delete TagElement: @return(936)", "Delete Javadoc(937)", "Delete Modifier: public(938)", "Delete Modifier: final(939)", "Delete SimpleName: Class(940)", "Delete SimpleType: Class(941)", "Delete WildcardType: ?(942)", "Delete ParameterizedType: Class<?>(943)", "Delete SimpleName: getReturnType(944)", "Delete SimpleName: method(945)", "Delete SimpleName: getReturnType(946)", "Delete MethodInvocation(947)", "Delete ReturnStatement(948)", "Delete Block(949)", "Delete MethodDeclaration(950)", "Delete TextElement: Invokes the method to be executed.(951)", "Delete TagElement(952)", "Delete SimpleName: obj(953)", "Delete TextElement:  the object to invoke the method upon(954)", "Delete TagElement: @param(955)", "Delete SimpleName: args(956)", "Delete TextElement:  the method arguments(957)", "Delete TagElement: @param(958)", "Delete TextElement:  the result of the method invocation(959)", "Delete TagElement: @return(960)", "Delete SimpleName: IllegalAccessException(961)", "Delete TextElement:  Method is inaccessible.(962)", "Delete TagElement: @throws(963)", "Delete SimpleName: InvocationTargetException(964)", "Delete TextElement:  Method body throws an exception.(965)", "Delete TagElement: @throws(966)", "Delete Javadoc(967)", "Delete Modifier: public(968)", "Delete Modifier: abstract(969)", "Delete SimpleName: Object(970)", "Delete SimpleType: Object(971)", "Delete SimpleName: execute(972)", "Delete SimpleName: Object(973)", "Delete SimpleType: Object(974)", "Delete SimpleName: obj(975)", "Delete SingleVariableDeclaration(976)", "Delete SimpleName: Object(977)", "Delete SimpleType: Object(978)", "Delete Dimension(979)", "Delete ArrayType: Object[](980)", "Delete SimpleName: args(981)", "Delete SingleVariableDeclaration(982)", "Delete SimpleName: IllegalAccessException(983)", "Delete SimpleType: IllegalAccessException(984)", "Delete SimpleName: InvocationTargetException(985)", "Delete SimpleType: InvocationTargetException(986)", "Delete MethodDeclaration(987)", "Delete TextElement: Tries to reuse this executor, checking that it is compatible with(988)", "Delete TextElement: the actual set of arguments.(989)", "Delete TagElement(990)", "Delete SimpleName: obj(991)", "Delete TextElement:  the object to invoke the method upon(992)", "Delete TagElement: @param(993)", "Delete SimpleName: name(994)", "Delete TextElement:  the method name(995)", "Delete TagElement: @param(996)", "Delete SimpleName: args(997)", "Delete TextElement:  the method arguments(998)", "Delete TagElement: @param(999)", "Delete TextElement:  the result of the method invocation or TRY_FAILED if checking failed.(1000)", "Delete TagElement: @return(1001)", "Delete Javadoc(1002)", "Delete Modifier: public(1003)", "Delete SimpleName: Object(1004)", "Delete SimpleType: Object(1005)", "Delete SimpleName: tryExecute(1006)", "Delete SimpleName: String(1007)", "Delete SimpleType: String(1008)", "Delete SimpleName: name(1009)", "Delete SingleVariableDeclaration(1010)", "Delete SimpleName: Object(1011)", "Delete SimpleType: Object(1012)", "Delete SimpleName: obj(1013)", "Delete SingleVariableDeclaration(1014)", "Delete SimpleName: Object(1015)", "Delete SimpleType: Object(1016)", "Delete Dimension(1017)", "Delete ArrayType: Object[](1018)", "Delete SimpleName: args(1019)", "Delete SingleVariableDeclaration(1020)", "Delete SimpleName: TRY_FAILED(1021)", "Delete ReturnStatement(1022)", "Delete Block(1023)", "Delete MethodDeclaration(1024)", "Delete TypeDeclaration: class(1025)", "Delete TypeDeclaration: class(1026)"]}}, {"ArrayIterator_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.NoSuchElementException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Array", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: size", "DEL PrimitiveType: int", "DEL StringLiteral: \" / \"", "DEL TextElement: WARNING : this class's operations are NOT synchronized.", "DEL TextElement: The objects to iterate over. ", "DEL TextElement: in a consistent manner.", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: get", "DEL Javadoc", "DEL SimpleName: size", "DEL TextElement: No op--merely added to satify the <code>Iterator</code> interface.", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: NoSuchElementException", "DEL NumberLiteral: 0", "DEL TextElement: If this is used or shared, synchronize in the", "DEL SimpleName: ArrayIterator", "DEL SimpleName: pos", "DEL Javadoc", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL StringLiteral: \"No more elements: \"", "DEL SimpleName: arr", "DEL SimpleName: arr", "DEL InfixExpression: +", "DEL SimpleName: UnsupportedOperationException", "DEL TagElement", "DEL TextElement: An Iterator wrapper for an Object[]. This will", "DEL PrimitiveType: boolean", "DEL SimpleName: array", "DEL TextElement: allow us to deal with all array like structures", "DEL StringLiteral: \" is not an array\"", "DEL TextElement:  The array for which an iterator is desired.", "DEL Modifier: public", "DEL ThrowStatement", "DEL ParenthesizedExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: pos", "DEL Javadoc", "DEL TextElement:  Whether there is another element.", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: getClass", "DEL Modifier: final", "DEL TextElement: Move to next element in the array.", "DEL InfixExpression: <", "DEL TextElement: <p>", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: getLength", "DEL SimpleName: array", "DEL Assignment: =", "DEL SimpleType: Object", "DEL PrefixExpression: !", "DEL SimpleName: remove", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL TextElement: It is meant to be used in a single thread, newly created", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: arr", "DEL InfixExpression: ==", "DEL SimpleType: UnsupportedOperationException", "DEL Assignment: =", "DEL TagElement: @return", "DEL TextElement: The current position and size in the array. ", "DEL Assignment: =", "DEL TextElement: The size of the array. ", "DEL IfStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleType: IllegalArgumentException", "DEL Block", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: array", "DEL SimpleType: Iterator", "DEL TextElement: Creates a new iterator instance for the specified array.", "DEL SimpleType: Object", "DEL SimpleName: size", "DEL SimpleName: pos", "DEL TagElement", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL Block", "DEL Assignment: =", "DEL TagElement: @since", "DEL SimpleName: pos", "DEL Block", "DEL SimpleName: Object", "DEL TagElement", "DEL InfixExpression: +", "DEL SimpleName: pos", "DEL SimpleName: getClass", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: arr", "DEL FieldDeclaration", "DEL Block", "DEL TextElement: next() method.", "DEL SimpleName: ArrayIterator", "DEL MethodInvocation", "DEL SimpleName: size", "DEL ThrowStatement", "DEL NullLiteral", "DEL PostfixExpression: ++", "DEL Modifier: public", "DEL SimpleName: size", "DEL SimpleName: array", "DEL SimpleName: hasNext", "DEL SimpleName: pos", "DEL SimpleName: arr", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL TagElement", "DEL TextElement: Check to see if there is another element in the array.", "DEL Block", "DEL SimpleName: Iterator", "DEL Javadoc", "DEL Modifier: final", "DEL Modifier: public", "DEL Modifier: private", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL ParameterizedType: Iterator<Object>", "DEL SimpleName: Array", "DEL SimpleName: pos", "DEL IfStatement", "DEL TextElement:  The next object in the array.", "DEL TextElement: </p>", "DEL Assignment: =", "DEL SimpleType: Object", "DEL TagElement", "DEL TextElement: <p>", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: IllegalArgumentException", "DEL MethodInvocation", "DEL SimpleName: Array", "DEL Modifier: public", "DEL InfixExpression: <", "DEL NumberLiteral: 0", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: isArray", "DEL TagElement", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: array", "DEL TextElement: for each use in the #foreach() directive.", "DEL SimpleName: arr", "DEL Modifier: private", "DEL SimpleType: NoSuchElementException", "DEL Block", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL ThrowStatement", "DEL SimpleName: next", "DEL Assignment: =", "DEL TypeDeclaration: class", "DEL Block", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL NumberLiteral: 0", "DEL PrimitiveType: void", "DEL TextElement: </p>", "DEL SimpleType: Object", "DEL TextElement:  1.0", "DEL Modifier: public"]}]}}, {"ArrayIterator_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Iterator(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.NoSuchElementException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Array(6)", "Delete ImportDeclaration(7)", "Delete TextElement: <p>(8)", "Delete TextElement: An Iterator wrapper for an Object[]. This will(9)", "Delete TextElement: allow us to deal with all array like structures(10)", "Delete TextElement: in a consistent manner.(11)", "Delete TextElement: </p>(12)", "Delete TextElement: <p>(13)", "Delete TextElement: WARNING : this class's operations are NOT synchronized.(14)", "Delete TextElement: It is meant to be used in a single thread, newly created(15)", "Delete TextElement: for each use in the #foreach() directive.(16)", "Delete TextElement: If this is used or shared, synchronize in the(17)", "Delete TextElement: next() method.(18)", "Delete TextElement: </p>(19)", "Delete TagElement(20)", "Delete TextElement:  1.0(21)", "Delete TagElement: @since(22)", "Delete Javadoc(23)", "Delete Modifier: public(24)", "Delete SimpleName: ArrayIterator(25)", "Delete SimpleName: Iterator(26)", "Delete SimpleType: Iterator(27)", "Delete SimpleName: Object(28)", "Delete SimpleType: Object(29)", "Delete ParameterizedType: Iterator<Object>(30)", "Delete TextElement: The objects to iterate over. (31)", "Delete TagElement(32)", "Delete Javadoc(33)", "Delete Modifier: private(34)", "Delete Modifier: final(35)", "Delete SimpleName: Object(36)", "Delete SimpleType: Object(37)", "Delete SimpleName: array(38)", "Delete VariableDeclarationFragment(39)", "Delete FieldDeclaration(40)", "Delete TextElement: The size of the array. (41)", "Delete TagElement(42)", "Delete Javadoc(43)", "Delete Modifier: private(44)", "Delete Modifier: final(45)", "Delete PrimitiveType: int(46)", "Delete SimpleName: size(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete TextElement: The current position and size in the array. (50)", "Delete TagElement(51)", "Delete Javadoc(52)", "Delete Modifier: private(53)", "Delete PrimitiveType: int(54)", "Delete SimpleName: pos(55)", "Delete VariableDeclarationFragment(56)", "Delete FieldDeclaration(57)", "Delete TextElement: Creates a new iterator instance for the specified array.(58)", "Delete TagElement(59)", "Delete SimpleName: arr(60)", "Delete TextElement:  The array for which an iterator is desired.(61)", "Delete TagElement: @param(62)", "Delete Javadoc(63)", "Delete Modifier: public(64)", "Delete SimpleName: ArrayIterator(65)", "Delete SimpleName: Object(66)", "Delete SimpleType: Object(67)", "Delete SimpleName: arr(68)", "Delete SingleVariableDeclaration(69)", "Delete SimpleName: arr(70)", "Delete NullLiteral(71)", "Delete InfixExpression: ==(72)", "Delete SimpleName: array(73)", "Delete NullLiteral(74)", "Delete Assignment: =(75)", "Delete ExpressionStatement(76)", "Delete SimpleName: pos(77)", "Delete NumberLiteral: 0(78)", "Delete Assignment: =(79)", "Delete ExpressionStatement(80)", "Delete SimpleName: size(81)", "Delete NumberLiteral: 0(82)", "Delete Assignment: =(83)", "Delete ExpressionStatement(84)", "Delete Block(85)", "Delete SimpleName: arr(86)", "Delete SimpleName: getClass(87)", "Delete MethodInvocation(88)", "Delete SimpleName: isArray(89)", "Delete MethodInvocation(90)", "Delete PrefixExpression: !(91)", "Delete SimpleName: IllegalArgumentException(92)", "Delete SimpleType: IllegalArgumentException(93)", "Delete SimpleName: arr(94)", "Delete SimpleName: getClass(95)", "Delete MethodInvocation(96)", "Delete StringLiteral: \" is not an array\"(97)", "Delete InfixExpression: +(98)", "Delete ClassInstanceCreation(99)", "Delete ThrowStatement(100)", "Delete Block(101)", "Delete SimpleName: array(102)", "Delete SimpleName: arr(103)", "Delete Assignment: =(104)", "Delete ExpressionStatement(105)", "Delete SimpleName: pos(106)", "Delete NumberLiteral: 0(107)", "Delete Assignment: =(108)", "Delete ExpressionStatement(109)", "Delete SimpleName: size(110)", "Delete SimpleName: Array(111)", "Delete SimpleName: getLength(112)", "Delete SimpleName: array(113)", "Delete MethodInvocation(114)", "Delete Assignment: =(115)", "Delete ExpressionStatement(116)", "Delete Block(117)", "Delete IfStatement(118)", "Delete IfStatement(119)", "Delete Block(120)", "Delete MethodDeclaration(121)", "Delete TextElement: Move to next element in the array.(122)", "Delete TagElement(123)", "Delete TextElement:  The next object in the array.(124)", "Delete TagElement: @return(125)", "Delete Javadoc(126)", "Delete Modifier: public(127)", "Delete SimpleName: Object(128)", "Delete SimpleType: Object(129)", "Delete SimpleName: next(130)", "Delete SimpleName: pos(131)", "Delete SimpleName: size(132)", "Delete InfixExpression: <(133)", "Delete SimpleName: Array(134)", "Delete SimpleName: get(135)", "Delete SimpleName: array(136)", "Delete SimpleName: pos(137)", "Delete PostfixExpression: ++(138)", "Delete MethodInvocation(139)", "Delete ReturnStatement(140)", "Delete Block(141)", "Delete IfStatement(142)", "Delete SimpleName: NoSuchElementException(143)", "Delete SimpleType: NoSuchElementException(144)", "Delete StringLiteral: \"No more elements: \"(145)", "Delete SimpleName: pos(146)", "Delete StringLiteral: \" / \"(147)", "Delete SimpleName: size(148)", "Delete InfixExpression: +(149)", "Delete ClassInstanceCreation(150)", "Delete ThrowStatement(151)", "Delete Block(152)", "Delete MethodDeclaration(153)", "Delete TextElement: Check to see if there is another element in the array.(154)", "Delete TagElement(155)", "Delete TextElement:  Whether there is another element.(156)", "Delete TagElement: @return(157)", "Delete Javadoc(158)", "Delete Modifier: public(159)", "Delete PrimitiveType: boolean(160)", "Delete SimpleName: hasNext(161)", "Delete SimpleName: pos(162)", "Delete SimpleName: size(163)", "Delete InfixExpression: <(164)", "Delete ParenthesizedExpression(165)", "Delete ReturnStatement(166)", "Delete Block(167)", "Delete MethodDeclaration(168)", "Delete TextElement: No op--merely added to satify the <code>Iterator</code> interface.(169)", "Delete TagElement(170)", "Delete Javadoc(171)", "Delete Modifier: public(172)", "Delete PrimitiveType: void(173)", "Delete SimpleName: remove(174)", "Delete SimpleName: UnsupportedOperationException(175)", "Delete SimpleType: UnsupportedOperationException(176)", "Delete ClassInstanceCreation(177)", "Delete ThrowStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)", "Delete TypeDeclaration: class(181)"]}}, {"ArrayListWrapper_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Array"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.AbstractList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ListIterator", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: index", "DEL ReturnStatement", "DEL ArrayType: Object[]", "DEL InfixExpression: ==", "DEL SimpleName: Override", "DEL SimpleName: i", "DEL MarkerAnnotation", "DEL PrefixExpression: !", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL PrimitiveType: int", "DEL TextElement: </p>", "DEL SimpleName: toIndex", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: i", "DEL SimpleType: Object", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: get", "DEL SimpleType: Object", "DEL TextElement: A class that wraps an array within an AbstractList.", "DEL SimpleName: Collection", "DEL SimpleName: i", "DEL Dimension", "DEL SimpleName: T", "DEL MarkerAnnotation", "DEL PrefixExpression: ++", "DEL PostfixExpression: ++", "DEL Modifier: public", "DEL SimpleName: o", "DEL Block", "DEL SimpleName: anArray", "DEL SimpleName: System", "DEL SimpleName: i", "DEL MarkerAnnotation", "DEL SimpleType: List", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL Block", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: Override", "DEL SimpleName: o", "DEL MarkerAnnotation", "DEL SimpleName: index", "DEL SimpleName: i", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: Array", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MemberRef", "DEL TagElement", "DEL SimpleType: Iterator", "DEL SimpleName: index", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL SimpleType: T", "DEL SimpleName: containsAll", "DEL VariableDeclarationStatement", "DEL QualifiedName: a.length", "DEL Dimension", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: remove", "DEL SimpleName: UnsupportedOperationException", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: anArray", "DEL SimpleName: add", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: size", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: Collection", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: old", "DEL Block", "DEL SimpleName: fromIndex", "DEL TextElement:  ", "DEL SimpleName: newInstance", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: get", "DEL SimpleName: isArray", "DEL ArrayAccess", "DEL Block", "DEL TagElement", "DEL SimpleName: get", "DEL ParameterizedType: ListIterator<Object>", "DEL SimpleName: UnsupportedOperationException", "DEL Block", "DEL ArrayAccess", "DEL SuperMethodInvocation", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL PrimitiveType: int", "DEL NumberLiteral: 1", "DEL SimpleName: Object", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleType: UnsupportedOperationException", "DEL MethodInvocation", "DEL SimpleName: listIterator", "DEL ReturnStatement", "DEL SimpleName: o", "DEL ClassInstanceCreation", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: array", "DEL QualifiedName: a.length", "DEL SimpleName: UnsupportedOperationException", "DEL ForStatement", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL SimpleName: Iterator", "DEL InfixExpression: +", "DEL NumberLiteral: 0", "DEL SimpleName: subList", "DEL SimpleName: a", "DEL SimpleName: a", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL Modifier: public", "DEL ThrowStatement", "DEL SimpleName: iterator", "DEL ArrayType: Object[]", "DEL PrefixExpression: ++", "DEL SimpleName: Override", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleName: listIterator", "DEL InfixExpression: <", "DEL Block", "DEL InfixExpression: <", "DEL Block", "DEL TagElement", "DEL SimpleName: Object", "DEL SimpleName: o", "DEL Modifier: public", "DEL SimpleName: i", "DEL Block", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: o", "DEL SimpleName: removeAll", "DEL StringLiteral: \"unchecked\"", "DEL Modifier: public", "DEL TagElement: @link", "DEL SimpleName: Override", "DEL SimpleType: UnsupportedOperationException", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL SimpleName: getClass", "DEL Modifier: public", "DEL ReturnStatement", "DEL ParameterizedType: Collection<? extends Object>", "DEL SimpleName: size", "DEL SimpleName: a", "DEL SuperMethodInvocation", "DEL SimpleName: Override", "DEL IfStatement", "DEL ArrayType: T[]", "DEL SimpleName: index", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL TextElement: Create the wrapper.", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleType: Object", "DEL SimpleName: Array", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: toIndex", "DEL SimpleName: c", "DEL PostfixExpression: ++", "DEL SimpleName: element", "DEL MethodDeclaration", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL NumberLiteral: 1", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: array", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: listIterator", "DEL SimpleName: ListIterator", "DEL SimpleName: c", "DEL SimpleName: ArrayListWrapper", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL SimpleType: T", "DEL SimpleName: a", "DEL SimpleName: a", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleType: UnsupportedOperationException", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleType: Object", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL Dimension", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleName: anArray", "DEL SimpleName: UnsupportedOperationException", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ThrowStatement", "DEL ParameterizedType: List<Object>", "DEL Block", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: element", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleType: ListIterator", "DEL CastExpression", "DEL Modifier: public", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleName: List", "DEL Block", "DEL ThrowStatement", "DEL TagElement: @inheritDoc", "DEL Modifier: public", "DEL Javadoc", "DEL Modifier: public", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: listIterator", "DEL WildcardType: ? extends Object", "DEL Modifier: public", "DEL WildcardType: ?", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL SimpleName: element", "DEL SimpleName: get", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL PrimitiveType: boolean", "DEL SimpleName: containsAll", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL ArrayCreation", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: array", "DEL IfStatement", "DEL ThrowStatement", "DEL SimpleName: Object", "DEL SimpleName: size", "DEL SimpleName: ArrayListWrapper", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: array", "DEL ThrowStatement", "DEL SimpleName: index", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleType: Object", "DEL VariableDeclarationExpression", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL SimpleName: get", "DEL Modifier: public", "DEL SimpleName: size", "DEL SimpleName: o", "DEL ReturnStatement", "DEL Modifier: private", "DEL SimpleName: getLength", "DEL SimpleName: Object", "DEL SimpleName: o", "DEL SimpleName: Collection", "DEL Block", "DEL WildcardType: ? extends Object", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleName: contains", "DEL SimpleName: clear", "DEL Dimension", "DEL SimpleName: a", "DEL SimpleType: T", "DEL TagElement", "DEL SimpleName: isEmpty", "DEL MarkerAnnotation", "DEL SimpleName: Override", "DEL SimpleName: add", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: Collection", "DEL VariableDeclarationExpression", "DEL PrefixExpression: -", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL SimpleName: Array", "DEL IfStatement", "DEL SimpleName: iterator", "DEL SimpleName: retainAll", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL Assignment: =", "DEL Block", "DEL Modifier: public", "DEL InfixExpression: <", "DEL SimpleName: c", "DEL ArrayType: T[]", "DEL SimpleName: i", "DEL ArrayType: T[]", "DEL VariableDeclarationStatement", "DEL SimpleName: size", "DEL SimpleName: Object", "DEL SimpleName: fromIndex", "DEL VariableDeclarationExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: c", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: array", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SimpleName: index", "DEL PrimitiveType: int", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL SimpleName: ListIterator", "DEL NullLiteral", "DEL Block", "DEL Block", "DEL ReturnStatement", "DEL Dimension", "DEL SimpleType: UnsupportedOperationException", "DEL Modifier: final", "DEL SimpleName: size", "DEL PrimitiveType: boolean", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: indexOf", "DEL SimpleName: T", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: anArray", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: size", "DEL ArrayAccess", "DEL MethodDeclaration", "DEL TextElement:  ", "DEL SimpleName: Override", "DEL Modifier: public", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL IfStatement", "DEL Modifier: final", "DEL Block", "DEL TextElement: <p>", "DEL ThrowStatement", "DEL SimpleName: anArray", "DEL SuperMethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL QualifiedName: a.length", "DEL SimpleName: i", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL StringLiteral: \" is not an array\"", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL ForStatement", "DEL Modifier: public", "DEL SimpleName: T", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL ThisExpression", "DEL SimpleName: get", "DEL TagElement: @inheritDoc", "DEL CastExpression", "DEL Block", "DEL Assignment: =", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL TextElement: for any method is thus always ArrayListWrapper.", "DEL ThrowStatement", "DEL InfixExpression: <", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: i", "DEL SimpleName: remove", "DEL SimpleName: Override", "DEL SimpleType: AbstractList", "DEL ParameterizedType: Collection<?>", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL SingleMemberAnnotation", "DEL MarkerAnnotation", "DEL SuperMethodInvocation", "DEL MethodDeclaration", "DEL ParameterizedType: Collection<?>", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: Override", "DEL ForStatement", "DEL SimpleName: getClass", "DEL ArrayType: Object[]", "DEL SimpleName: x", "DEL SimpleType: Collection", "DEL SimpleName: array", "DEL SimpleType: Collection", "DEL SimpleName: size", "DEL PrimitiveType: boolean", "DEL NullLiteral", "DEL SimpleType: Collection", "DEL SimpleName: subList", "DEL SimpleType: Object", "DEL SimpleType: Collection", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: o", "DEL ReturnStatement", "DEL TextElement: the array to wrap. ", "DEL SimpleName: IllegalArgumentException", "DEL SimpleType: T", "DEL IfStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL StringLiteral: \"Not supported.\"", "DEL ParameterizedType: Collection<?>", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL WildcardType: ?", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL SimpleName: UnsupportedOperationException", "DEL Block", "DEL SuperMethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: getClass", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL WildcardType: ?", "DEL ClassInstanceCreation", "DEL SimpleName: i", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL SimpleName: toArray", "DEL SimpleName: c", "DEL SimpleType: ListIterator", "DEL MarkerAnnotation", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: index", "DEL TypeDeclaration: class", "DEL SimpleName: toArray", "DEL SimpleName: Object", "DEL SimpleName: addAll", "DEL Javadoc", "DEL SimpleName: x", "DEL TypeParameter", "DEL MarkerAnnotation", "DEL Javadoc", "DEL SimpleName: Override", "DEL SimpleName: isEmpty", "DEL MethodDeclaration", "DEL SimpleName: index", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: set", "DEL InfixExpression: <", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL ArrayType: T[]", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: a", "DEL MethodDeclaration", "DEL SimpleName: get", "DEL SimpleName: SuppressWarnings", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL TextElement: It overrides all methods because introspection uses this class a a marker for wrapped arrays; the declared class", "DEL SimpleName: Object", "DEL SimpleType: UnsupportedOperationException", "DEL PrimitiveType: boolean", "DEL ThrowStatement", "DEL SuperMethodInvocation", "DEL IfStatement", "DEL SimpleName: Array", "DEL SimpleName: indexOf", "DEL SimpleName: lastIndexOf", "DEL ExpressionStatement", "DEL StringLiteral: \"Not supported.\"", "DEL SimpleName: index", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL Modifier: final", "DEL QualifiedName: a.length", "DEL Javadoc", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: Override", "DEL Assignment: =", "DEL NullLiteral", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL SimpleName: AbstractList", "DEL TagElement", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SimpleName: arraycopy", "DEL MethodDeclaration", "DEL SimpleName: index", "DEL SimpleName: set", "DEL Block", "DEL SimpleName: i", "DEL TextElement:  ", "DEL InfixExpression: ==", "DEL SimpleName: getComponentType", "DEL TextElement:  ", "DEL VariableDeclarationFragment", "DEL Block", "DEL InfixExpression: >", "DEL PrimitiveType: void", "DEL SimpleName: T", "DEL PrefixExpression: -", "DEL SimpleName: Object", "DEL SimpleName: old", "DEL ParameterizedType: Iterator<Object>", "DEL SimpleName: i", "DEL SimpleName: i", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: o", "DEL SingleVariableDeclaration", "DEL SimpleName: addAll", "DEL PrimitiveType: boolean", "DEL ForStatement", "DEL SimpleName: size", "DEL ParameterizedType: ListIterator<Object>", "DEL MethodInvocation", "DEL SimpleName: a", "DEL MethodDeclaration", "DEL ParameterizedType: AbstractList<Object>", "DEL MethodDeclaration", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: lastIndexOf", "DEL SimpleName: size", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL StringLiteral: \"Not supported.\"", "DEL PrimitiveType: boolean", "DEL SimpleName: T", "DEL FieldDeclaration", "DEL SimpleName: Override", "DEL Block", "DEL PrimitiveType: int", "DEL ThrowStatement", "DEL SimpleType: T", "DEL Block", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: T", "DEL SuperMethodInvocation", "DEL SimpleName: size", "DEL VariableDeclarationExpression", "DEL SimpleName: Override", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: UnsupportedOperationException", "DEL InfixExpression: !=", "DEL SimpleName: Collection", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Collection<? extends Object>", "DEL Block", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL SimpleName: a", "DEL SingleVariableDeclaration", "DEL SimpleName: Object"]}]}}, {"ArrayListWrapper_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Array(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.AbstractList(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Collection(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Iterator(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.List(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.ListIterator(12)", "Delete ImportDeclaration(13)", "Delete TextElement: A class that wraps an array within an AbstractList.(14)", "Delete TextElement: <p>(15)", "Delete TextElement: It overrides all methods because introspection uses this class a a marker for wrapped arrays; the declared class(16)", "Delete TextElement: for any method is thus always ArrayListWrapper.(17)", "Delete TextElement: </p>(18)", "Delete TagElement(19)", "Delete Javadoc(20)", "Delete Modifier: public(21)", "Delete SimpleName: ArrayListWrapper(22)", "Delete SimpleName: AbstractList(23)", "Delete SimpleType: AbstractList(24)", "Delete SimpleName: Object(25)", "Delete SimpleType: Object(26)", "Delete ParameterizedType: AbstractList<Object>(27)", "Delete TextElement: the array to wrap. (28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete Modifier: private(31)", "Delete Modifier: final(32)", "Delete SimpleName: Object(33)", "Delete SimpleType: Object(34)", "Delete SimpleName: array(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: Create the wrapper.(38)", "Delete TagElement(39)", "Delete SimpleName: anArray(40)", "Delete TextElement:  (41)", "Delete SimpleName: array(42)", "Delete MemberRef(43)", "Delete TagElement: @link(44)", "Delete TagElement: @param(45)", "Delete Javadoc(46)", "Delete Modifier: public(47)", "Delete SimpleName: ArrayListWrapper(48)", "Delete SimpleName: Object(49)", "Delete SimpleType: Object(50)", "Delete SimpleName: anArray(51)", "Delete SingleVariableDeclaration(52)", "Delete SimpleName: anArray(53)", "Delete SimpleName: getClass(54)", "Delete MethodInvocation(55)", "Delete SimpleName: isArray(56)", "Delete MethodInvocation(57)", "Delete PrefixExpression: !(58)", "Delete SimpleName: IllegalArgumentException(59)", "Delete SimpleType: IllegalArgumentException(60)", "Delete SimpleName: anArray(61)", "Delete SimpleName: getClass(62)", "Delete MethodInvocation(63)", "Delete StringLiteral: \" is not an array\"(64)", "Delete InfixExpression: +(65)", "Delete ClassInstanceCreation(66)", "Delete ThrowStatement(67)", "Delete Block(68)", "Delete IfStatement(69)", "Delete ThisExpression(70)", "Delete SimpleName: array(71)", "Delete FieldAccess(72)", "Delete SimpleName: anArray(73)", "Delete Assignment: =(74)", "Delete ExpressionStatement(75)", "Delete Block(76)", "Delete MethodDeclaration(77)", "Delete TagElement: @inheritDoc(78)", "Delete TextElement:  (79)", "Delete TagElement(80)", "Delete Javadoc(81)", "Delete SimpleName: Override(82)", "Delete MarkerAnnotation(83)", "Delete Modifier: public(84)", "Delete SimpleName: Object(85)", "Delete SimpleType: Object(86)", "Delete SimpleName: get(87)", "Delete PrimitiveType: int(88)", "Delete SimpleName: index(89)", "Delete SingleVariableDeclaration(90)", "Delete SimpleName: Array(91)", "Delete SimpleName: get(92)", "Delete SimpleName: array(93)", "Delete SimpleName: index(94)", "Delete MethodInvocation(95)", "Delete ReturnStatement(96)", "Delete Block(97)", "Delete MethodDeclaration(98)", "Delete TagElement: @inheritDoc(99)", "Delete TextElement:  (100)", "Delete TagElement(101)", "Delete Javadoc(102)", "Delete SimpleName: Override(103)", "Delete MarkerAnnotation(104)", "Delete Modifier: public(105)", "Delete SimpleName: Object(106)", "Delete SimpleType: Object(107)", "Delete SimpleName: set(108)", "Delete PrimitiveType: int(109)", "Delete SimpleName: index(110)", "Delete SingleVariableDeclaration(111)", "Delete SimpleName: Object(112)", "Delete SimpleType: Object(113)", "Delete SimpleName: element(114)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: Object(116)", "Delete SimpleType: Object(117)", "Delete SimpleName: old(118)", "Delete SimpleName: get(119)", "Delete SimpleName: index(120)", "Delete MethodInvocation(121)", "Delete VariableDeclarationFragment(122)", "Delete VariableDeclarationStatement(123)", "Delete SimpleName: Array(124)", "Delete SimpleName: set(125)", "Delete SimpleName: array(126)", "Delete SimpleName: index(127)", "Delete SimpleName: element(128)", "Delete MethodInvocation(129)", "Delete ExpressionStatement(130)", "Delete SimpleName: old(131)", "Delete ReturnStatement(132)", "Delete Block(133)", "Delete MethodDeclaration(134)", "Delete TagElement: @inheritDoc(135)", "Delete TextElement:  (136)", "Delete TagElement(137)", "Delete Javadoc(138)", "Delete SimpleName: Override(139)", "Delete MarkerAnnotation(140)", "Delete Modifier: public(141)", "Delete PrimitiveType: int(142)", "Delete SimpleName: size(143)", "Delete SimpleName: Array(144)", "Delete SimpleName: getLength(145)", "Delete SimpleName: array(146)", "Delete MethodInvocation(147)", "Delete ReturnStatement(148)", "Delete Block(149)", "Delete MethodDeclaration(150)", "Delete SimpleName: Override(151)", "Delete MarkerAnnotation(152)", "Delete Modifier: public(153)", "Delete SimpleName: Object(154)", "Delete SimpleType: Object(155)", "Delete Dimension(156)", "Delete ArrayType: Object[](157)", "Delete SimpleName: toArray(158)", "Delete Modifier: final(159)", "Delete PrimitiveType: int(160)", "Delete SimpleName: size(161)", "Delete SimpleName: size(162)", "Delete MethodInvocation(163)", "Delete VariableDeclarationFragment(164)", "Delete VariableDeclarationStatement(165)", "Delete SimpleName: Object(166)", "Delete SimpleType: Object(167)", "Delete Dimension(168)", "Delete ArrayType: Object[](169)", "Delete SimpleName: a(170)", "Delete SimpleName: Object(171)", "Delete SimpleType: Object(172)", "Delete Dimension(173)", "Delete ArrayType: Object[](174)", "Delete SimpleName: size(175)", "Delete ArrayCreation(176)", "Delete VariableDeclarationFragment(177)", "Delete VariableDeclarationStatement(178)", "Delete PrimitiveType: int(179)", "Delete SimpleName: i(180)", "Delete NumberLiteral: 0(181)", "Delete VariableDeclarationFragment(182)", "Delete VariableDeclarationExpression(183)", "Delete SimpleName: i(184)", "Delete SimpleName: size(185)", "Delete InfixExpression: <(186)", "Delete SimpleName: i(187)", "Delete PrefixExpression: ++(188)", "Delete SimpleName: a(189)", "Delete SimpleName: i(190)", "Delete ArrayAccess(191)", "Delete SimpleName: get(192)", "Delete SimpleName: i(193)", "Delete MethodInvocation(194)", "Delete Assignment: =(195)", "Delete ExpressionStatement(196)", "Delete Block(197)", "Delete ForStatement(198)", "Delete SimpleName: a(199)", "Delete ReturnStatement(200)", "Delete Block(201)", "Delete MethodDeclaration(202)", "Delete SimpleName: Override(203)", "Delete MarkerAnnotation(204)", "Delete SimpleName: SuppressWarnings(205)", "Delete StringLiteral: \"unchecked\"(206)", "Delete SingleMemberAnnotation(207)", "Delete Modifier: public(208)", "Delete SimpleName: T(209)", "Delete TypeParameter(210)", "Delete SimpleName: T(211)", "Delete SimpleType: T(212)", "Delete Dimension(213)", "Delete ArrayType: T[](214)", "Delete SimpleName: toArray(215)", "Delete SimpleName: T(216)", "Delete SimpleType: T(217)", "Delete Dimension(218)", "Delete ArrayType: T[](219)", "Delete SimpleName: a(220)", "Delete SingleVariableDeclaration(221)", "Delete PrimitiveType: int(222)", "Delete SimpleName: size(223)", "Delete SimpleName: size(224)", "Delete MethodInvocation(225)", "Delete VariableDeclarationFragment(226)", "Delete VariableDeclarationStatement(227)", "Delete QualifiedName: a.length(228)", "Delete SimpleName: size(229)", "Delete InfixExpression: <(230)", "Delete SimpleName: T(231)", "Delete SimpleType: T(232)", "Delete Dimension(233)", "Delete ArrayType: T[](234)", "Delete SimpleName: x(235)", "Delete SimpleName: T(236)", "Delete SimpleType: T(237)", "Delete Dimension(238)", "Delete ArrayType: T[](239)", "Delete SimpleName: Array(240)", "Delete SimpleName: newInstance(241)", "Delete SimpleName: a(242)", "Delete SimpleName: getClass(243)", "Delete MethodInvocation(244)", "Delete SimpleName: getComponentType(245)", "Delete MethodInvocation(246)", "Delete SimpleName: size(247)", "Delete MethodInvocation(248)", "Delete CastExpression(249)", "Delete VariableDeclarationFragment(250)", "Delete VariableDeclarationStatement(251)", "Delete SimpleName: System(252)", "Delete SimpleName: arraycopy(253)", "Delete SimpleName: a(254)", "Delete QualifiedName: a.length(255)", "Delete SimpleName: x(256)", "Delete NumberLiteral: 0(257)", "Delete QualifiedName: a.length(258)", "Delete MethodInvocation(259)", "Delete ExpressionStatement(260)", "Delete Block(261)", "Delete IfStatement(262)", "Delete PrimitiveType: int(263)", "Delete SimpleName: i(264)", "Delete NumberLiteral: 0(265)", "Delete VariableDeclarationFragment(266)", "Delete VariableDeclarationExpression(267)", "Delete SimpleName: i(268)", "Delete SimpleName: size(269)", "Delete InfixExpression: <(270)", "Delete SimpleName: i(271)", "Delete PrefixExpression: ++(272)", "Delete SimpleName: a(273)", "Delete SimpleName: i(274)", "Delete ArrayAccess(275)", "Delete SimpleName: T(276)", "Delete SimpleType: T(277)", "Delete SimpleName: get(278)", "Delete SimpleName: i(279)", "Delete MethodInvocation(280)", "Delete CastExpression(281)", "Delete Assignment: =(282)", "Delete ExpressionStatement(283)", "Delete Block(284)", "Delete ForStatement(285)", "Delete QualifiedName: a.length(286)", "Delete SimpleName: size(287)", "Delete InfixExpression: >(288)", "Delete SimpleName: a(289)", "Delete SimpleName: size(290)", "Delete ArrayAccess(291)", "Delete NullLiteral(292)", "Delete Assignment: =(293)", "Delete ExpressionStatement(294)", "Delete Block(295)", "Delete IfStatement(296)", "Delete SimpleName: a(297)", "Delete ReturnStatement(298)", "Delete Block(299)", "Delete MethodDeclaration(300)", "Delete SimpleName: Override(301)", "Delete MarkerAnnotation(302)", "Delete Modifier: public(303)", "Delete PrimitiveType: int(304)", "Delete SimpleName: indexOf(305)", "Delete SimpleName: Object(306)", "Delete SimpleType: Object(307)", "Delete SimpleName: o(308)", "Delete SingleVariableDeclaration(309)", "Delete Modifier: final(310)", "Delete PrimitiveType: int(311)", "Delete SimpleName: size(312)", "Delete SimpleName: size(313)", "Delete MethodInvocation(314)", "Delete VariableDeclarationFragment(315)", "Delete VariableDeclarationStatement(316)", "Delete SimpleName: o(317)", "Delete NullLiteral(318)", "Delete InfixExpression: ==(319)", "Delete PrimitiveType: int(320)", "Delete SimpleName: i(321)", "Delete NumberLiteral: 0(322)", "Delete VariableDeclarationFragment(323)", "Delete VariableDeclarationExpression(324)", "Delete SimpleName: i(325)", "Delete SimpleName: size(326)", "Delete InfixExpression: <(327)", "Delete SimpleName: i(328)", "Delete PostfixExpression: ++(329)", "Delete SimpleName: get(330)", "Delete SimpleName: i(331)", "Delete MethodInvocation(332)", "Delete NullLiteral(333)", "Delete InfixExpression: ==(334)", "Delete SimpleName: i(335)", "Delete ReturnStatement(336)", "Delete Block(337)", "Delete IfStatement(338)", "Delete Block(339)", "Delete ForStatement(340)", "Delete Block(341)", "Delete PrimitiveType: int(342)", "Delete SimpleName: i(343)", "Delete NumberLiteral: 0(344)", "Delete VariableDeclarationFragment(345)", "Delete VariableDeclarationExpression(346)", "Delete SimpleName: i(347)", "Delete SimpleName: size(348)", "Delete InfixExpression: <(349)", "Delete SimpleName: i(350)", "Delete PostfixExpression: ++(351)", "Delete SimpleName: o(352)", "Delete SimpleName: equals(353)", "Delete SimpleName: get(354)", "Delete SimpleName: i(355)", "Delete MethodInvocation(356)", "Delete MethodInvocation(357)", "Delete SimpleName: i(358)", "Delete ReturnStatement(359)", "Delete Block(360)", "Delete IfStatement(361)", "Delete Block(362)", "Delete ForStatement(363)", "Delete Block(364)", "Delete IfStatement(365)", "Delete NumberLiteral: 1(366)", "Delete PrefixExpression: -(367)", "Delete ReturnStatement(368)", "Delete Block(369)", "Delete MethodDeclaration(370)", "Delete SimpleName: Override(371)", "Delete MarkerAnnotation(372)", "Delete Modifier: public(373)", "Delete PrimitiveType: boolean(374)", "Delete SimpleName: contains(375)", "Delete SimpleName: Object(376)", "Delete SimpleType: Object(377)", "Delete SimpleName: o(378)", "Delete SingleVariableDeclaration(379)", "Delete SimpleName: indexOf(380)", "Delete SimpleName: o(381)", "Delete MethodInvocation(382)", "Delete NumberLiteral: 1(383)", "Delete PrefixExpression: -(384)", "Delete InfixExpression: !=(385)", "Delete ReturnStatement(386)", "Delete Block(387)", "Delete MethodDeclaration(388)", "Delete SimpleName: Override(389)", "Delete MarkerAnnotation(390)", "Delete Modifier: public(391)", "Delete PrimitiveType: boolean(392)", "Delete SimpleName: isEmpty(393)", "Delete SimpleName: isEmpty(394)", "Delete SuperMethodInvocation(395)", "Delete ReturnStatement(396)", "Delete Block(397)", "Delete MethodDeclaration(398)", "Delete SimpleName: Override(399)", "Delete MarkerAnnotation(400)", "Delete Modifier: public(401)", "Delete SimpleName: Iterator(402)", "Delete SimpleType: Iterator(403)", "Delete SimpleName: Object(404)", "Delete SimpleType: Object(405)", "Delete ParameterizedType: Iterator<Object>(406)", "Delete SimpleName: iterator(407)", "Delete SimpleName: iterator(408)", "Delete SuperMethodInvocation(409)", "Delete ReturnStatement(410)", "Delete Block(411)", "Delete MethodDeclaration(412)", "Delete SimpleName: Override(413)", "Delete MarkerAnnotation(414)", "Delete Modifier: public(415)", "Delete PrimitiveType: boolean(416)", "Delete SimpleName: containsAll(417)", "Delete SimpleName: Collection(418)", "Delete SimpleType: Collection(419)", "Delete WildcardType: ?(420)", "Delete ParameterizedType: Collection<?>(421)", "Delete SimpleName: c(422)", "Delete SingleVariableDeclaration(423)", "Delete SimpleName: containsAll(424)", "Delete SimpleName: c(425)", "Delete SuperMethodInvocation(426)", "Delete ReturnStatement(427)", "Delete Block(428)", "Delete MethodDeclaration(429)", "Delete SimpleName: Override(430)", "Delete MarkerAnnotation(431)", "Delete Modifier: public(432)", "Delete PrimitiveType: int(433)", "Delete SimpleName: lastIndexOf(434)", "Delete SimpleName: Object(435)", "Delete SimpleType: Object(436)", "Delete SimpleName: o(437)", "Delete SingleVariableDeclaration(438)", "Delete SimpleName: lastIndexOf(439)", "Delete SimpleName: o(440)", "Delete SuperMethodInvocation(441)", "Delete ReturnStatement(442)", "Delete Block(443)", "Delete MethodDeclaration(444)", "Delete SimpleName: Override(445)", "Delete MarkerAnnotation(446)", "Delete Modifier: public(447)", "Delete SimpleName: ListIterator(448)", "Delete SimpleType: ListIterator(449)", "Delete SimpleName: Object(450)", "Delete SimpleType: Object(451)", "Delete ParameterizedType: ListIterator<Object>(452)", "Delete SimpleName: listIterator(453)", "Delete SimpleName: listIterator(454)", "Delete SuperMethodInvocation(455)", "Delete ReturnStatement(456)", "Delete Block(457)", "Delete MethodDeclaration(458)", "Delete SimpleName: Override(459)", "Delete MarkerAnnotation(460)", "Delete Modifier: public(461)", "Delete SimpleName: ListIterator(462)", "Delete SimpleType: ListIterator(463)", "Delete SimpleName: Object(464)", "Delete SimpleType: Object(465)", "Delete ParameterizedType: ListIterator<Object>(466)", "Delete SimpleName: listIterator(467)", "Delete PrimitiveType: int(468)", "Delete SimpleName: index(469)", "Delete SingleVariableDeclaration(470)", "Delete SimpleName: listIterator(471)", "Delete SimpleName: index(472)", "Delete SuperMethodInvocation(473)", "Delete ReturnStatement(474)", "Delete Block(475)", "Delete MethodDeclaration(476)", "Delete SimpleName: Override(477)", "Delete MarkerAnnotation(478)", "Delete Modifier: public(479)", "Delete SimpleName: List(480)", "Delete SimpleType: List(481)", "Delete SimpleName: Object(482)", "Delete SimpleType: Object(483)", "Delete ParameterizedType: List<Object>(484)", "Delete SimpleName: subList(485)", "Delete PrimitiveType: int(486)", "Delete SimpleName: fromIndex(487)", "Delete SingleVariableDeclaration(488)", "Delete PrimitiveType: int(489)", "Delete SimpleName: toIndex(490)", "Delete SingleVariableDeclaration(491)", "Delete SimpleName: subList(492)", "Delete SimpleName: fromIndex(493)", "Delete SimpleName: toIndex(494)", "Delete SuperMethodInvocation(495)", "Delete ReturnStatement(496)", "Delete Block(497)", "Delete MethodDeclaration(498)", "Delete SimpleName: Override(499)", "Delete MarkerAnnotation(500)", "Delete Modifier: public(501)", "Delete PrimitiveType: boolean(502)", "Delete SimpleName: add(503)", "Delete SimpleName: Object(504)", "Delete SimpleType: Object(505)", "Delete SimpleName: o(506)", "Delete SingleVariableDeclaration(507)", "Delete SimpleName: UnsupportedOperationException(508)", "Delete SimpleType: UnsupportedOperationException(509)", "Delete StringLiteral: \"Not supported.\"(510)", "Delete ClassInstanceCreation(511)", "Delete ThrowStatement(512)", "Delete Block(513)", "Delete MethodDeclaration(514)", "Delete SimpleName: Override(515)", "Delete MarkerAnnotation(516)", "Delete Modifier: public(517)", "Delete PrimitiveType: boolean(518)", "Delete SimpleName: remove(519)", "Delete SimpleName: Object(520)", "Delete SimpleType: Object(521)", "Delete SimpleName: o(522)", "Delete SingleVariableDeclaration(523)", "Delete SimpleName: UnsupportedOperationException(524)", "Delete SimpleType: UnsupportedOperationException(525)", "Delete StringLiteral: \"Not supported.\"(526)", "Delete ClassInstanceCreation(527)", "Delete ThrowStatement(528)", "Delete Block(529)", "Delete MethodDeclaration(530)", "Delete SimpleName: Override(531)", "Delete MarkerAnnotation(532)", "Delete Modifier: public(533)", "Delete PrimitiveType: boolean(534)", "Delete SimpleName: addAll(535)", "Delete SimpleName: Collection(536)", "Delete SimpleType: Collection(537)", "Delete SimpleName: Object(538)", "Delete SimpleType: Object(539)", "Delete WildcardType: ? extends Object(540)", "Delete ParameterizedType: Collection<? extends Object>(541)", "Delete SimpleName: c(542)", "Delete SingleVariableDeclaration(543)", "Delete SimpleName: UnsupportedOperationException(544)", "Delete SimpleType: UnsupportedOperationException(545)", "Delete StringLiteral: \"Not supported.\"(546)", "Delete ClassInstanceCreation(547)", "Delete ThrowStatement(548)", "Delete Block(549)", "Delete MethodDeclaration(550)", "Delete SimpleName: Override(551)", "Delete MarkerAnnotation(552)", "Delete Modifier: public(553)", "Delete PrimitiveType: boolean(554)", "Delete SimpleName: addAll(555)", "Delete PrimitiveType: int(556)", "Delete SimpleName: index(557)", "Delete SingleVariableDeclaration(558)", "Delete SimpleName: Collection(559)", "Delete SimpleType: Collection(560)", "Delete SimpleName: Object(561)", "Delete SimpleType: Object(562)", "Delete WildcardType: ? extends Object(563)", "Delete ParameterizedType: Collection<? extends Object>(564)", "Delete SimpleName: c(565)", "Delete SingleVariableDeclaration(566)", "Delete SimpleName: UnsupportedOperationException(567)", "Delete SimpleType: UnsupportedOperationException(568)", "Delete StringLiteral: \"Not supported.\"(569)", "Delete ClassInstanceCreation(570)", "Delete ThrowStatement(571)", "Delete Block(572)", "Delete MethodDeclaration(573)", "Delete SimpleName: Override(574)", "Delete MarkerAnnotation(575)", "Delete Modifier: public(576)", "Delete PrimitiveType: boolean(577)", "Delete SimpleName: removeAll(578)", "Delete SimpleName: Collection(579)", "Delete SimpleType: Collection(580)", "Delete WildcardType: ?(581)", "Delete ParameterizedType: Collection<?>(582)", "Delete SimpleName: c(583)", "Delete SingleVariableDeclaration(584)", "Delete SimpleName: UnsupportedOperationException(585)", "Delete SimpleType: UnsupportedOperationException(586)", "Delete StringLiteral: \"Not supported.\"(587)", "Delete ClassInstanceCreation(588)", "Delete ThrowStatement(589)", "Delete Block(590)", "Delete MethodDeclaration(591)", "Delete SimpleName: Override(592)", "Delete MarkerAnnotation(593)", "Delete Modifier: public(594)", "Delete PrimitiveType: boolean(595)", "Delete SimpleName: retainAll(596)", "Delete SimpleName: Collection(597)", "Delete SimpleType: Collection(598)", "Delete WildcardType: ?(599)", "Delete ParameterizedType: Collection<?>(600)", "Delete SimpleName: c(601)", "Delete SingleVariableDeclaration(602)", "Delete SimpleName: UnsupportedOperationException(603)", "Delete SimpleType: UnsupportedOperationException(604)", "Delete StringLiteral: \"Not supported.\"(605)", "Delete ClassInstanceCreation(606)", "Delete ThrowStatement(607)", "Delete Block(608)", "Delete MethodDeclaration(609)", "Delete SimpleName: Override(610)", "Delete MarkerAnnotation(611)", "Delete Modifier: public(612)", "Delete PrimitiveType: void(613)", "Delete SimpleName: clear(614)", "Delete SimpleName: UnsupportedOperationException(615)", "Delete SimpleType: UnsupportedOperationException(616)", "Delete StringLiteral: \"Not supported.\"(617)", "Delete ClassInstanceCreation(618)", "Delete ThrowStatement(619)", "Delete Block(620)", "Delete MethodDeclaration(621)", "Delete SimpleName: Override(622)", "Delete MarkerAnnotation(623)", "Delete Modifier: public(624)", "Delete PrimitiveType: void(625)", "Delete SimpleName: add(626)", "Delete PrimitiveType: int(627)", "Delete SimpleName: index(628)", "Delete SingleVariableDeclaration(629)", "Delete SimpleName: Object(630)", "Delete SimpleType: Object(631)", "Delete SimpleName: element(632)", "Delete SingleVariableDeclaration(633)", "Delete SimpleName: UnsupportedOperationException(634)", "Delete SimpleType: UnsupportedOperationException(635)", "Delete StringLiteral: \"Not supported.\"(636)", "Delete ClassInstanceCreation(637)", "Delete ThrowStatement(638)", "Delete Block(639)", "Delete MethodDeclaration(640)", "Delete SimpleName: Override(641)", "Delete MarkerAnnotation(642)", "Delete Modifier: public(643)", "Delete SimpleName: Object(644)", "Delete SimpleType: Object(645)", "Delete SimpleName: remove(646)", "Delete PrimitiveType: int(647)", "Delete SimpleName: index(648)", "Delete SingleVariableDeclaration(649)", "Delete SimpleName: UnsupportedOperationException(650)", "Delete SimpleType: UnsupportedOperationException(651)", "Delete StringLiteral: \"Not supported.\"(652)", "Delete ClassInstanceCreation(653)", "Delete ThrowStatement(654)", "Delete Block(655)", "Delete MethodDeclaration(656)", "Delete TypeDeclaration: class(657)"]}}, {"BooleanGetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: obj", "DEL TagElement: @param", "DEL Block", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: is", "DEL VariableDeclarationFragment", "DEL Block", "DEL CastExpression", "DEL SimpleName: Object", "DEL SimpleName: objectClass", "DEL SimpleName: key", "DEL SimpleName: InvocationTargetException", "DEL ReturnStatement", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: property", "DEL SimpleType: Object", "DEL Block", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL TextElement:  the the property name", "DEL InfixExpression: !=", "DEL SimpleName: discover", "DEL TypeDeclaration: class", "DEL SimpleName: m", "DEL SimpleName: Override", "DEL TextElement:  the introspector", "DEL SimpleName: IllegalAccessException", "DEL Block", "DEL Modifier: static", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL SimpleName: equals", "DEL Modifier: public", "DEL SimpleName: property", "DEL TextElement:  the property to get", "DEL InfixExpression: !=", "DEL ParenthesizedExpression", "DEL SimpleName: obj", "DEL Dimension", "DEL SimpleName: key", "DEL Modifier: final", "DEL TextElement: Specialized executor to get a boolean property from an object.", "DEL TextElement:  the class to introspect", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL SimpleName: Object", "DEL InfixExpression: ==", "DEL SimpleName: is", "DEL SimpleName: BooleanGetExecutor", "DEL SimpleName: String", "DEL Block", "DEL ReturnStatement", "DEL Block", "DEL Modifier: public", "DEL SimpleType: IllegalAccessException", "DEL SimpleName: property", "DEL MethodInvocation", "DEL SimpleName: InvocationTargetException", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL SimpleName: String", "DEL SimpleName: getTargetProperty", "DEL Javadoc", "DEL InfixExpression: &&", "DEL Modifier: public", "DEL SimpleName: obj", "DEL SimpleName: xinvoke", "DEL SimpleName: discoverGet", "DEL SimpleName: PropertyGetExecutor", "DEL SingleVariableDeclaration", "DEL SimpleName: m", "DEL SimpleName: m", "DEL SimpleType: java.lang.reflect.Method", "DEL Javadoc", "DEL SimpleName: Override", "DEL SimpleName: method", "DEL SimpleName: Object", "DEL Dimension", "DEL MethodDeclaration", "DEL TagElement: @inheritDoc", "DEL SimpleName: method", "DEL SimpleName: is", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL SimpleName: property", "DEL SimpleName: is", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleType: Introspector", "DEL SimpleName: tryExecute", "DEL SimpleName: is", "DEL SimpleName: obj", "DEL ReturnStatement", "DEL TextElement: The property. ", "DEL SingleVariableDeclaration", "DEL SimpleName: TRY_FAILED", "DEL MarkerAnnotation", "DEL SimpleName: invoke", "DEL InfixExpression: !=", "DEL SimpleType: Class", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: property", "DEL InfixExpression: &&", "DEL SimpleName: String", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: invoke", "DEL SimpleName: discover", "DEL StringLiteral: \"is\"", "DEL NullLiteral", "DEL ArrayType: Object[]", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL SimpleName: execute", "DEL CatchClause", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL Block", "DEL TagElement", "DEL TextElement:  2.0", "DEL TagElement: @since", "DEL CastExpression", "DEL TagElement", "DEL Modifier: private", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleType: InvocationTargetException", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL QualifiedName: AbstractExecutor.Get", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL TagElement: @inheritDoc", "DEL TagElement: @return", "DEL TextElement:  ", "DEL SimpleName: m", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: getClass", "DEL TextElement:  the method if found, null otherwise", "DEL MethodDeclaration", "DEL TextElement:  the introspector", "DEL ConditionalExpression", "DEL ReturnStatement", "DEL SimpleType: AbstractExecutor.Get", "DEL TryStatement", "DEL SimpleName: key", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: equals", "DEL ArrayType: Object[]", "DEL SimpleName: getReturnType", "DEL SimpleName: BooleanGetExecutor", "DEL SimpleName: clazz", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: property", "DEL TagElement", "DEL SimpleName: obj", "DEL SimpleName: Introspector", "DEL SimpleName: clazz", "DEL SimpleType: Introspector", "DEL TagElement", "DEL SimpleName: method", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: Class", "DEL SimpleType: String", "DEL WildcardType: ?", "DEL SuperConstructorInvocation", "DEL SimpleName: key", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: xill", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Assignment: =", "DEL CatchClause", "DEL TagElement: @link", "DEL SimpleName: property", "DEL IfStatement", "DEL TextElement:  ", "DEL TextElement: .", "DEL SimpleName: method", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: BooleanGet", "DEL ExpressionStatement", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: is", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL SimpleType: IllegalAccessException", "DEL SimpleType: InvocationTargetException", "DEL TextElement:  the class to find the get method from", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: Introspector", "DEL ReturnStatement", "DEL MethodInvocation", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: Class", "DEL Javadoc", "DEL Modifier: final", "DEL ConditionalExpression", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL TagElement: @inheritDoc", "DEL SimpleName: Object", "DEL TextElement: Discovers the method for a ", "DEL QualifiedName: Boolean.TYPE", "DEL Modifier: public", "DEL InfixExpression: &&", "DEL TagElement: @param", "DEL SimpleName: clazz", "DEL SimpleName: key", "DEL TextElement: Creates an instance by attempting discovery of the get method.", "DEL InfixExpression: ==", "DEL Javadoc", "DEL TextElement:  ", "DEL ParameterizedType: Class<?>", "DEL ParameterizedType: Class<?>", "DEL Modifier: public", "DEL TextElement: <p>The method to be found should be named \"is{P,p}property and return a boolean.</p>"]}]}}, {"BooleanGetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Specialized executor to get a boolean property from an object.(4)", "Delete TagElement(5)", "Delete TextElement:  2.0(6)", "Delete TagElement: @since(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete Modifier: final(10)", "Delete SimpleName: BooleanGetExecutor(11)", "Delete QualifiedName: AbstractExecutor.Get(12)", "Delete SimpleType: AbstractExecutor.Get(13)", "Delete TextElement: The property. (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: private(17)", "Delete Modifier: final(18)", "Delete SimpleName: String(19)", "Delete SimpleType: String(20)", "Delete SimpleName: property(21)", "Delete VariableDeclarationFragment(22)", "Delete FieldDeclaration(23)", "Delete TextElement: Creates an instance by attempting discovery of the get method.(24)", "Delete TagElement(25)", "Delete SimpleName: is(26)", "Delete TextElement:  the introspector(27)", "Delete TagElement: @param(28)", "Delete SimpleName: clazz(29)", "Delete TextElement:  the class to introspect(30)", "Delete TagElement: @param(31)", "Delete SimpleName: key(32)", "Delete TextElement:  the property to get(33)", "Delete TagElement: @param(34)", "Delete Javadoc(35)", "Delete Modifier: public(36)", "Delete SimpleName: BooleanGetExecutor(37)", "Delete SimpleName: Introspector(38)", "Delete SimpleType: Introspector(39)", "Delete SimpleName: is(40)", "Delete SingleVariableDeclaration(41)", "Delete SimpleName: Class(42)", "Delete SimpleType: Class(43)", "Delete WildcardType: ?(44)", "Delete ParameterizedType: Class<?>(45)", "Delete SimpleName: clazz(46)", "Delete SingleVariableDeclaration(47)", "Delete SimpleName: String(48)", "Delete SimpleType: String(49)", "Delete SimpleName: key(50)", "Delete SingleVariableDeclaration(51)", "Delete SimpleName: clazz(52)", "Delete SimpleName: discover(53)", "Delete SimpleName: is(54)", "Delete SimpleName: clazz(55)", "Delete SimpleName: key(56)", "Delete MethodInvocation(57)", "Delete SuperConstructorInvocation(58)", "Delete SimpleName: property(59)", "Delete SimpleName: key(60)", "Delete Assignment: =(61)", "Delete ExpressionStatement(62)", "Delete Block(63)", "Delete MethodDeclaration(64)", "Delete TagElement: @inheritDoc(65)", "Delete TextElement:  (66)", "Delete TagElement(67)", "Delete Javadoc(68)", "Delete SimpleName: Override(69)", "Delete MarkerAnnotation(70)", "Delete Modifier: public(71)", "Delete SimpleName: Object(72)", "Delete SimpleType: Object(73)", "Delete SimpleName: getTargetProperty(74)", "Delete SimpleName: property(75)", "Delete ReturnStatement(76)", "Delete Block(77)", "Delete MethodDeclaration(78)", "Delete TagElement: @inheritDoc(79)", "Delete TextElement:  (80)", "Delete TagElement(81)", "Delete Javadoc(82)", "Delete SimpleName: Override(83)", "Delete MarkerAnnotation(84)", "Delete Modifier: public(85)", "Delete SimpleName: Object(86)", "Delete SimpleType: Object(87)", "Delete SimpleName: execute(88)", "Delete SimpleName: Object(89)", "Delete SimpleType: Object(90)", "Delete SimpleName: obj(91)", "Delete SingleVariableDeclaration(92)", "Delete SimpleName: IllegalAccessException(93)", "Delete SimpleType: IllegalAccessException(94)", "Delete SimpleName: InvocationTargetException(95)", "Delete SimpleType: InvocationTargetException(96)", "Delete SimpleName: method(97)", "Delete NullLiteral(98)", "Delete InfixExpression: ==(99)", "Delete NullLiteral(100)", "Delete SimpleName: method(101)", "Delete SimpleName: invoke(102)", "Delete SimpleName: obj(103)", "Delete SimpleName: Object(104)", "Delete SimpleType: Object(105)", "Delete Dimension(106)", "Delete ArrayType: Object[](107)", "Delete NullLiteral(108)", "Delete CastExpression(109)", "Delete MethodInvocation(110)", "Delete ConditionalExpression(111)", "Delete ReturnStatement(112)", "Delete Block(113)", "Delete MethodDeclaration(114)", "Delete TagElement: @inheritDoc(115)", "Delete TextElement:  (116)", "Delete TagElement(117)", "Delete Javadoc(118)", "Delete SimpleName: Override(119)", "Delete MarkerAnnotation(120)", "Delete Modifier: public(121)", "Delete SimpleName: Object(122)", "Delete SimpleType: Object(123)", "Delete SimpleName: tryExecute(124)", "Delete SimpleName: Object(125)", "Delete SimpleType: Object(126)", "Delete SimpleName: obj(127)", "Delete SingleVariableDeclaration(128)", "Delete SimpleName: Object(129)", "Delete SimpleType: Object(130)", "Delete SimpleName: key(131)", "Delete SingleVariableDeclaration(132)", "Delete SimpleName: obj(133)", "Delete NullLiteral(134)", "Delete InfixExpression: !=(135)", "Delete SimpleName: method(136)", "Delete NullLiteral(137)", "Delete InfixExpression: !=(138)", "Delete InfixExpression: &&(139)", "Delete SimpleName: property(140)", "Delete SimpleName: equals(141)", "Delete SimpleName: key(142)", "Delete MethodInvocation(143)", "Delete InfixExpression: &&(144)", "Delete SimpleName: objectClass(145)", "Delete SimpleName: equals(146)", "Delete SimpleName: obj(147)", "Delete SimpleName: getClass(148)", "Delete MethodInvocation(149)", "Delete MethodInvocation(150)", "Delete InfixExpression: &&(151)", "Delete SimpleName: method(152)", "Delete SimpleName: invoke(153)", "Delete SimpleName: obj(154)", "Delete SimpleName: Object(155)", "Delete SimpleType: Object(156)", "Delete Dimension(157)", "Delete ArrayType: Object[](158)", "Delete NullLiteral(159)", "Delete CastExpression(160)", "Delete MethodInvocation(161)", "Delete ReturnStatement(162)", "Delete Block(163)", "Delete SimpleName: InvocationTargetException(164)", "Delete SimpleType: InvocationTargetException(165)", "Delete SimpleName: xinvoke(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: TRY_FAILED(168)", "Delete ReturnStatement(169)", "Delete Block(170)", "Delete CatchClause(171)", "Delete SimpleName: IllegalAccessException(172)", "Delete SimpleType: IllegalAccessException(173)", "Delete SimpleName: xill(174)", "Delete SingleVariableDeclaration(175)", "Delete SimpleName: TRY_FAILED(176)", "Delete ReturnStatement(177)", "Delete Block(178)", "Delete CatchClause(179)", "Delete TryStatement(180)", "Delete Block(181)", "Delete IfStatement(182)", "Delete SimpleName: TRY_FAILED(183)", "Delete ReturnStatement(184)", "Delete Block(185)", "Delete MethodDeclaration(186)", "Delete TextElement: Discovers the method for a (187)", "Delete SimpleName: BooleanGet(188)", "Delete TagElement: @link(189)", "Delete TextElement: .(190)", "Delete TextElement: <p>The method to be found should be named \"is{P,p}property and return a boolean.</p>(191)", "Delete TagElement(192)", "Delete SimpleName: is(193)", "Delete TextElement:  the introspector(194)", "Delete TagElement: @param(195)", "Delete SimpleName: clazz(196)", "Delete TextElement:  the class to find the get method from(197)", "Delete TagElement: @param(198)", "Delete SimpleName: property(199)", "Delete TextElement:  the the property name(200)", "Delete TagElement: @param(201)", "Delete TextElement:  the method if found, null otherwise(202)", "Delete TagElement: @return(203)", "Delete Javadoc(204)", "Delete Modifier: static(205)", "Delete QualifiedName: java.lang.reflect.Method(206)", "Delete SimpleType: java.lang.reflect.Method(207)", "Delete SimpleName: discover(208)", "Delete SimpleName: Introspector(209)", "Delete SimpleType: Introspector(210)", "Delete SimpleName: is(211)", "Delete SingleVariableDeclaration(212)", "Delete Modifier: final(213)", "Delete SimpleName: Class(214)", "Delete SimpleType: Class(215)", "Delete WildcardType: ?(216)", "Delete ParameterizedType: Class<?>(217)", "Delete SimpleName: clazz(218)", "Delete SingleVariableDeclaration(219)", "Delete SimpleName: String(220)", "Delete SimpleType: String(221)", "Delete SimpleName: property(222)", "Delete SingleVariableDeclaration(223)", "Delete QualifiedName: java.lang.reflect.Method(224)", "Delete SimpleType: java.lang.reflect.Method(225)", "Delete SimpleName: m(226)", "Delete SimpleName: PropertyGetExecutor(227)", "Delete SimpleName: discoverGet(228)", "Delete SimpleName: is(229)", "Delete StringLiteral: \"is\"(230)", "Delete SimpleName: clazz(231)", "Delete SimpleName: property(232)", "Delete MethodInvocation(233)", "Delete VariableDeclarationFragment(234)", "Delete VariableDeclarationStatement(235)", "Delete SimpleName: m(236)", "Delete NullLiteral(237)", "Delete InfixExpression: !=(238)", "Delete SimpleName: m(239)", "Delete SimpleName: getReturnType(240)", "Delete MethodInvocation(241)", "Delete QualifiedName: Boolean.TYPE(242)", "Delete InfixExpression: ==(243)", "Delete InfixExpression: &&(244)", "Delete ParenthesizedExpression(245)", "Delete SimpleName: m(246)", "Delete NullLiteral(247)", "Delete ConditionalExpression(248)", "Delete ReturnStatement(249)", "Delete Block(250)", "Delete MethodDeclaration(251)", "Delete TypeDeclaration: class(252)"]}}, {"DuckGetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: is", "DEL TagElement: @inheritDoc", "DEL SimpleName: args", "DEL SimpleName: key", "DEL Block", "DEL MethodDeclaration", "DEL TagElement", "DEL Modifier: public", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL NullLiteral", "DEL SimpleName: method", "DEL MarkerAnnotation", "DEL TextElement:  Method is inaccessible.", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL ConditionalExpression", "DEL SimpleName: discover", "DEL TextElement: Specialized executor to get a property from an object.", "DEL SimpleName: clazz", "DEL InfixExpression: &&", "DEL SimpleName: InvocationTargetException", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: property", "DEL VariableDeclarationFragment", "DEL ArrayInitializer", "DEL StringLiteral: \"get\"", "DEL SimpleName: method", "DEL TagElement: @param", "DEL SimpleName: Introspector", "DEL Javadoc", "DEL SimpleName: getMethod", "DEL SuperConstructorInvocation", "DEL ArrayType: Object[]", "DEL SimpleType: Class", "DEL Javadoc", "DEL SimpleType: Introspector", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: Object", "DEL SimpleName: method", "DEL Javadoc", "DEL SimpleName: DuckGetExecutor", "DEL SimpleName: clazz", "DEL CatchClause", "DEL TagElement: @return", "DEL Javadoc", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL TagElement", "DEL TextElement: <p>Duck as in duck-typing for an interface like:", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL Block", "DEL TextElement: Object get(Object key);", "DEL QualifiedName: AbstractExecutor.Get", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: Introspector", "DEL SimpleName: tryExecute", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Override", "DEL SimpleName: identifier", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: is", "DEL SimpleName: Object", "DEL SimpleName: identifier", "DEL SimpleName: identifier", "DEL ExpressionStatement", "DEL QualifiedName: GetExecutor.DuckGet", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL Block", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TagElement", "DEL TextElement:  the class to find the get method from", "DEL TextElement:  the introspector", "DEL IfStatement", "DEL SimpleType: Class", "DEL WildcardType: ?", "DEL TextElement: Get the property from the object.", "DEL SimpleName: args", "DEL SimpleName: obj", "DEL SimpleName: obj", "DEL Block", "DEL SimpleName: is", "DEL Dimension", "DEL TextElement: Creates an instance by attempting discovery of the get method.", "DEL SimpleType: Introspector", "DEL NullLiteral", "DEL SimpleName: identifier", "DEL SimpleName: TRY_FAILED", "DEL TextElement:  2.0", "DEL SimpleName: invoke", "DEL TextElement: The property. ", "DEL SimpleName: Object", "DEL SimpleName: clazz", "DEL SimpleName: obj", "DEL SimpleType: Object", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: Object", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL Block", "DEL ArrayType: Object[]", "DEL Modifier: final", "DEL SimpleName: makeArgs", "DEL SimpleName: obj", "DEL TagElement: @link", "DEL ReturnStatement", "DEL SimpleName: InvocationTargetException", "DEL MethodDeclaration", "DEL SimpleType: InvocationTargetException", "DEL TextElement: Discovers a method for a ", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: is", "DEL TextElement:  the object.", "DEL TagElement: @inheritDoc", "DEL TextElement:  the introspector", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: key", "DEL SimpleName: Class", "DEL TextElement:  object.get(property)", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: identifier", "DEL SimpleName: is", "DEL TryStatement", "DEL SimpleName: TRY_FAILED", "DEL SingleVariableDeclaration", "DEL Block", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleName: property", "DEL SimpleName: is", "DEL WildcardType: ?", "DEL SimpleName: args", "DEL SimpleName: clazz", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: identifier", "DEL SimpleName: args", "DEL MethodDeclaration", "DEL SimpleName: obj", "DEL SimpleName: discover", "DEL TextElement: }", "DEL SimpleName: IllegalAccessException", "DEL InfixExpression: !=", "DEL SimpleName: equals", "DEL TagElement: @since", "DEL Modifier: private", "DEL SimpleName: property", "DEL SimpleName: invoke", "DEL SimpleName: Override", "DEL TagElement: @param", "DEL TextElement: </p>", "DEL VariableDeclarationFragment", "DEL SimpleName: execute", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: xinvoke", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL TextElement: interface Get {", "DEL SimpleName: Object", "DEL Modifier: public", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL Block", "DEL SimpleName: Object", "DEL TextElement:  the property to get", "DEL SimpleType: InvocationTargetException", "DEL SimpleType: Object", "DEL SimpleType: IllegalAccessException", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: method", "DEL ReturnStatement", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: property", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL TagElement: @param", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleName: DuckGetExecutor", "DEL SimpleName: InvocationTargetException", "DEL TagElement", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleType: Object", "DEL NullLiteral", "DEL Modifier: public", "DEL ArrayInitializer", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleType: AbstractExecutor.Get", "DEL SimpleType: Object", "DEL MarkerAnnotation", "DEL TextElement: .", "DEL TagElement: @param", "DEL SimpleName: clazz", "DEL TypeDeclaration: class", "DEL NullLiteral", "DEL SimpleName: IllegalAccessException", "DEL Modifier: final", "DEL Modifier: static", "DEL Block", "DEL TextElement:  the class to introspect", "DEL SimpleName: identifier", "DEL SimpleName: Class", "DEL SimpleName: obj", "DEL SimpleName: objectClass", "DEL SimpleName: property", "DEL SimpleType: IllegalAccessException", "DEL TextElement:  Method body throws an exception.", "DEL TextElement:  the key to use as an argument to the get method", "DEL SimpleName: getClass", "DEL SimpleName: Object", "DEL TextElement:  the method if found, null otherwise", "DEL TextElement: </code>", "DEL ParameterizedType: Class<?>", "DEL SimpleName: property", "DEL Javadoc", "DEL TextElement: <code>", "DEL SimpleName: getTargetProperty", "DEL SimpleName: Override", "DEL TagElement: @throws", "DEL SimpleName: xill", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL SimpleName: Object"]}]}}, {"DuckGetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Specialized executor to get a property from an object.(4)", "Delete TextElement: <p>Duck as in duck-typing for an interface like:(5)", "Delete TextElement: <code>(6)", "Delete TextElement: interface Get {(7)", "Delete TextElement: Object get(Object key);(8)", "Delete TextElement: }(9)", "Delete TextElement: </code>(10)", "Delete TextElement: </p>(11)", "Delete TagElement(12)", "Delete TextElement:  2.0(13)", "Delete TagElement: @since(14)", "Delete Javadoc(15)", "Delete Modifier: public(16)", "Delete Modifier: final(17)", "Delete SimpleName: DuckGetExecutor(18)", "Delete QualifiedName: AbstractExecutor.Get(19)", "Delete SimpleType: AbstractExecutor.Get(20)", "Delete TextElement: The property. (21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete Modifier: private(24)", "Delete Modifier: final(25)", "Delete SimpleName: Object(26)", "Delete SimpleType: Object(27)", "Delete SimpleName: property(28)", "Delete VariableDeclarationFragment(29)", "Delete FieldDeclaration(30)", "Delete TextElement: Creates an instance by attempting discovery of the get method.(31)", "Delete TagElement(32)", "Delete SimpleName: is(33)", "Delete TextElement:  the introspector(34)", "Delete TagElement: @param(35)", "Delete SimpleName: clazz(36)", "Delete TextElement:  the class to introspect(37)", "Delete TagElement: @param(38)", "Delete SimpleName: identifier(39)", "Delete TextElement:  the property to get(40)", "Delete TagElement: @param(41)", "Delete Javadoc(42)", "Delete Modifier: public(43)", "Delete SimpleName: DuckGetExecutor(44)", "Delete SimpleName: Introspector(45)", "Delete SimpleType: Introspector(46)", "Delete SimpleName: is(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: Class(49)", "Delete SimpleType: Class(50)", "Delete WildcardType: ?(51)", "Delete ParameterizedType: Class<?>(52)", "Delete SimpleName: clazz(53)", "Delete SingleVariableDeclaration(54)", "Delete SimpleName: Object(55)", "Delete SimpleType: Object(56)", "Delete SimpleName: identifier(57)", "Delete SingleVariableDeclaration(58)", "Delete SimpleName: clazz(59)", "Delete SimpleName: discover(60)", "Delete SimpleName: is(61)", "Delete SimpleName: clazz(62)", "Delete SimpleName: identifier(63)", "Delete MethodInvocation(64)", "Delete SuperConstructorInvocation(65)", "Delete SimpleName: property(66)", "Delete SimpleName: identifier(67)", "Delete Assignment: =(68)", "Delete ExpressionStatement(69)", "Delete Block(70)", "Delete MethodDeclaration(71)", "Delete TagElement: @inheritDoc(72)", "Delete TextElement:  (73)", "Delete TagElement(74)", "Delete Javadoc(75)", "Delete SimpleName: Override(76)", "Delete MarkerAnnotation(77)", "Delete Modifier: public(78)", "Delete SimpleName: Object(79)", "Delete SimpleType: Object(80)", "Delete SimpleName: getTargetProperty(81)", "Delete SimpleName: property(82)", "Delete ReturnStatement(83)", "Delete Block(84)", "Delete MethodDeclaration(85)", "Delete TextElement: Get the property from the object.(86)", "Delete TagElement(87)", "Delete SimpleName: obj(88)", "Delete TextElement:  the object.(89)", "Delete TagElement: @param(90)", "Delete TextElement:  object.get(property)(91)", "Delete TagElement: @return(92)", "Delete SimpleName: IllegalAccessException(93)", "Delete TextElement:  Method is inaccessible.(94)", "Delete TagElement: @throws(95)", "Delete SimpleName: InvocationTargetException(96)", "Delete TextElement:  Method body throws an exception.(97)", "Delete TagElement: @throws(98)", "Delete Javadoc(99)", "Delete SimpleName: Override(100)", "Delete MarkerAnnotation(101)", "Delete Modifier: public(102)", "Delete SimpleName: Object(103)", "Delete SimpleType: Object(104)", "Delete SimpleName: execute(105)", "Delete SimpleName: Object(106)", "Delete SimpleType: Object(107)", "Delete SimpleName: obj(108)", "Delete SingleVariableDeclaration(109)", "Delete SimpleName: IllegalAccessException(110)", "Delete SimpleType: IllegalAccessException(111)", "Delete SimpleName: InvocationTargetException(112)", "Delete SimpleType: InvocationTargetException(113)", "Delete SimpleName: Object(114)", "Delete SimpleType: Object(115)", "Delete Dimension(116)", "Delete ArrayType: Object[](117)", "Delete SimpleName: args(118)", "Delete SimpleName: property(119)", "Delete ArrayInitializer(120)", "Delete VariableDeclarationFragment(121)", "Delete VariableDeclarationStatement(122)", "Delete SimpleName: method(123)", "Delete NullLiteral(124)", "Delete InfixExpression: ==(125)", "Delete NullLiteral(126)", "Delete SimpleName: method(127)", "Delete SimpleName: invoke(128)", "Delete SimpleName: obj(129)", "Delete SimpleName: args(130)", "Delete MethodInvocation(131)", "Delete ConditionalExpression(132)", "Delete ReturnStatement(133)", "Delete Block(134)", "Delete MethodDeclaration(135)", "Delete TagElement: @inheritDoc(136)", "Delete TextElement:  (137)", "Delete TagElement(138)", "Delete Javadoc(139)", "Delete SimpleName: Override(140)", "Delete MarkerAnnotation(141)", "Delete Modifier: public(142)", "Delete SimpleName: Object(143)", "Delete SimpleType: Object(144)", "Delete SimpleName: tryExecute(145)", "Delete SimpleName: Object(146)", "Delete SimpleType: Object(147)", "Delete SimpleName: obj(148)", "Delete SingleVariableDeclaration(149)", "Delete SimpleName: Object(150)", "Delete SimpleType: Object(151)", "Delete SimpleName: key(152)", "Delete SingleVariableDeclaration(153)", "Delete SimpleName: obj(154)", "Delete NullLiteral(155)", "Delete InfixExpression: !=(156)", "Delete SimpleName: method(157)", "Delete NullLiteral(158)", "Delete InfixExpression: !=(159)", "Delete InfixExpression: &&(160)", "Delete SimpleName: property(161)", "Delete SimpleName: equals(162)", "Delete SimpleName: key(163)", "Delete MethodInvocation(164)", "Delete InfixExpression: &&(165)", "Delete SimpleName: objectClass(166)", "Delete SimpleName: equals(167)", "Delete SimpleName: obj(168)", "Delete SimpleName: getClass(169)", "Delete MethodInvocation(170)", "Delete MethodInvocation(171)", "Delete InfixExpression: &&(172)", "Delete SimpleName: Object(173)", "Delete SimpleType: Object(174)", "Delete Dimension(175)", "Delete ArrayType: Object[](176)", "Delete SimpleName: args(177)", "Delete SimpleName: property(178)", "Delete ArrayInitializer(179)", "Delete VariableDeclarationFragment(180)", "Delete VariableDeclarationStatement(181)", "Delete SimpleName: method(182)", "Delete SimpleName: invoke(183)", "Delete SimpleName: obj(184)", "Delete SimpleName: args(185)", "Delete MethodInvocation(186)", "Delete ReturnStatement(187)", "Delete Block(188)", "Delete SimpleName: InvocationTargetException(189)", "Delete SimpleType: InvocationTargetException(190)", "Delete SimpleName: xinvoke(191)", "Delete SingleVariableDeclaration(192)", "Delete SimpleName: TRY_FAILED(193)", "Delete ReturnStatement(194)", "Delete Block(195)", "Delete CatchClause(196)", "Delete SimpleName: IllegalAccessException(197)", "Delete SimpleType: IllegalAccessException(198)", "Delete SimpleName: xill(199)", "Delete SingleVariableDeclaration(200)", "Delete SimpleName: TRY_FAILED(201)", "Delete ReturnStatement(202)", "Delete Block(203)", "Delete CatchClause(204)", "Delete TryStatement(205)", "Delete Block(206)", "Delete IfStatement(207)", "Delete SimpleName: TRY_FAILED(208)", "Delete ReturnStatement(209)", "Delete Block(210)", "Delete MethodDeclaration(211)", "Delete TextElement: Discovers a method for a (212)", "Delete QualifiedName: GetExecutor.DuckGet(213)", "Delete TagElement: @link(214)", "Delete TextElement: .(215)", "Delete TagElement(216)", "Delete SimpleName: is(217)", "Delete TextElement:  the introspector(218)", "Delete TagElement: @param(219)", "Delete SimpleName: clazz(220)", "Delete TextElement:  the class to find the get method from(221)", "Delete TagElement: @param(222)", "Delete SimpleName: identifier(223)", "Delete TextElement:  the key to use as an argument to the get method(224)", "Delete TagElement: @param(225)", "Delete TextElement:  the method if found, null otherwise(226)", "Delete TagElement: @return(227)", "Delete Javadoc(228)", "Delete Modifier: private(229)", "Delete Modifier: static(230)", "Delete QualifiedName: java.lang.reflect.Method(231)", "Delete SimpleType: java.lang.reflect.Method(232)", "Delete SimpleName: discover(233)", "Delete SimpleName: Introspector(234)", "Delete SimpleType: Introspector(235)", "Delete SimpleName: is(236)", "Delete SingleVariableDeclaration(237)", "Delete Modifier: final(238)", "Delete SimpleName: Class(239)", "Delete SimpleType: Class(240)", "Delete WildcardType: ?(241)", "Delete ParameterizedType: Class<?>(242)", "Delete SimpleName: clazz(243)", "Delete SingleVariableDeclaration(244)", "Delete SimpleName: Object(245)", "Delete SimpleType: Object(246)", "Delete SimpleName: identifier(247)", "Delete SingleVariableDeclaration(248)", "Delete SimpleName: is(249)", "Delete SimpleName: getMethod(250)", "Delete SimpleName: clazz(251)", "Delete StringLiteral: \"get\"(252)", "Delete SimpleName: makeArgs(253)", "Delete SimpleName: identifier(254)", "Delete MethodInvocation(255)", "Delete MethodInvocation(256)", "Delete ReturnStatement(257)", "Delete Block(258)", "Delete MethodDeclaration(259)", "Delete TypeDeclaration: class(260)"]}}, {"DuckSetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.InvocationTargetException"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL TagElement: @link", "DEL SimpleName: obj", "DEL TagElement", "DEL ArrayInitializer", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: key", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: obj", "DEL Modifier: final", "DEL SuperConstructorInvocation", "DEL SimpleName: key", "DEL Javadoc", "DEL TextElement:  the key to use as 1st argument to the set method", "DEL TextElement:  ", "DEL TextElement: Specialized executor to set a property of an object.", "DEL TextElement: <code>", "DEL Block", "DEL Modifier: private", "DEL TextElement: <p>Duck as in duck-typing for an interface like:", "DEL SimpleType: java.lang.reflect.Method", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: getClass", "DEL SimpleName: clazz", "DEL InfixExpression: !=", "DEL SimpleName: value", "DEL SimpleType: IllegalAccessException", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL TextElement: </p>", "DEL SimpleName: value", "DEL SimpleName: args", "DEL TextElement: The property. ", "DEL InfixExpression: &&", "DEL SimpleType: IllegalAccessException", "DEL MethodInvocation", "DEL SimpleName: Introspector", "DEL SimpleName: clazz", "DEL SimpleName: tryExecute", "DEL SimpleName: method", "DEL MethodInvocation", "DEL QualifiedName: AbstractExecutor.Set", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL TypeDeclaration: class", "DEL SimpleName: discover", "DEL SimpleName: is", "DEL SimpleName: equals", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: xinvoke", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: obj", "DEL TextElement:  2.0", "DEL TagElement", "DEL SimpleName: getTargetProperty", "DEL NullLiteral", "DEL SimpleName: args", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: invoke", "DEL SimpleName: clazz", "DEL StringLiteral: \"set\"", "DEL TextElement: }", "DEL Javadoc", "DEL SimpleName: Object", "DEL TextElement: </code>", "DEL SimpleName: discover", "DEL CatchClause", "DEL ParameterizedType: Class<?>", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleType: Introspector", "DEL SimpleType: AbstractExecutor.Set", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: obj", "DEL TagElement", "DEL SimpleName: value", "DEL SimpleName: is", "DEL SimpleName: DuckSet", "DEL TextElement:  the introspector", "DEL SimpleName: InvocationTargetException", "DEL ReturnStatement", "DEL TextElement: interface Set {", "DEL TagElement: @inheritDoc", "DEL SimpleName: property", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: method", "DEL SimpleName: Class", "DEL SimpleName: IllegalAccessException", "DEL TryStatement", "DEL TagElement: @param", "DEL SimpleName: is", "DEL SimpleName: key", "DEL Javadoc", "DEL SimpleName: clazz", "DEL TagElement", "DEL SimpleName: InvocationTargetException", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL Block", "DEL TextElement:  ", "DEL TextElement:  the value to use as 2nd argument to the set method", "DEL IfStatement", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleName: DuckSetExecutor", "DEL TextElement:  the class to find the set method from", "DEL CatchClause", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL Javadoc", "DEL SimpleType: Class", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL TextElement:  the class to find the set method from", "DEL SimpleName: pargs", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: pargs", "DEL Block", "DEL TagElement: @param", "DEL TextElement: .", "DEL SimpleName: Object", "DEL Modifier: public", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Object", "DEL SimpleName: xill", "DEL SimpleType: Object", "DEL SimpleType: Class", "DEL TagElement: @since", "DEL TextElement:  ", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL TextElement:  the method if found, null otherwise", "DEL TagElement: @param", "DEL SimpleName: obj", "DEL SimpleName: property", "DEL SimpleName: makeArgs", "DEL TextElement: Object set(Object property, Object value);", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: clazz", "DEL InfixExpression: &&", "DEL TextElement:  the key to use as 1st argument to the set method", "DEL SimpleName: getMethod", "DEL Assignment: =", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: invoke", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: key", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: property", "DEL SimpleName: property", "DEL SimpleName: objectClass", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL SimpleName: method", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleType: InvocationTargetException", "DEL Javadoc", "DEL TextElement:  the introspector", "DEL TextElement: Creates an instance.", "DEL SimpleName: value", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL Dimension", "DEL SimpleName: Introspector", "DEL Block", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: method", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL SimpleName: execute", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL ArrayInitializer", "DEL SimpleType: Object", "DEL SimpleName: is", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL Dimension", "DEL SimpleName: clazz", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: DuckSetExecutor", "DEL IfStatement", "DEL SimpleName: is", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: property", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: value", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL TextElement: Discovers the method for a ", "DEL SimpleName: equals", "DEL Block", "DEL ArrayType: Object[]", "DEL SimpleName: key", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL SimpleName: IllegalAccessException", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleType: InvocationTargetException", "DEL TextElement:  the value to use as 2nd argument to the set method", "DEL SimpleName: property", "DEL SimpleType: Introspector", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: value", "DEL SimpleName: is", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Modifier: public", "DEL TagElement: @param", "DEL SimpleName: Override", "DEL ArrayType: Object[]"]}]}}, {"DuckSetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Specialized executor to set a property of an object.(4)", "Delete TextElement: <p>Duck as in duck-typing for an interface like:(5)", "Delete TextElement: <code>(6)", "Delete TextElement: interface Set {(7)", "Delete TextElement: Object set(Object property, Object value);(8)", "Delete TextElement: }(9)", "Delete TextElement: </code>(10)", "Delete TextElement: </p>(11)", "Delete TagElement(12)", "Delete TextElement:  2.0(13)", "Delete TagElement: @since(14)", "Delete Javadoc(15)", "Delete Modifier: public(16)", "Delete Modifier: final(17)", "Delete SimpleName: DuckSetExecutor(18)", "Delete QualifiedName: AbstractExecutor.Set(19)", "Delete SimpleType: AbstractExecutor.Set(20)", "Delete TextElement: The property. (21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete Modifier: private(24)", "Delete Modifier: final(25)", "Delete SimpleName: Object(26)", "Delete SimpleType: Object(27)", "Delete SimpleName: property(28)", "Delete VariableDeclarationFragment(29)", "Delete FieldDeclaration(30)", "Delete TextElement: Creates an instance.(31)", "Delete TagElement(32)", "Delete SimpleName: is(33)", "Delete TextElement:  the introspector(34)", "Delete TagElement: @param(35)", "Delete SimpleName: clazz(36)", "Delete TextElement:  the class to find the set method from(37)", "Delete TagElement: @param(38)", "Delete SimpleName: key(39)", "Delete TextElement:  the key to use as 1st argument to the set method(40)", "Delete TagElement: @param(41)", "Delete SimpleName: value(42)", "Delete TextElement:  the value to use as 2nd argument to the set method(43)", "Delete TagElement: @param(44)", "Delete Javadoc(45)", "Delete Modifier: public(46)", "Delete SimpleName: DuckSetExecutor(47)", "Delete SimpleName: Introspector(48)", "Delete SimpleType: Introspector(49)", "Delete SimpleName: is(50)", "Delete SingleVariableDeclaration(51)", "Delete SimpleName: Class(52)", "Delete SimpleType: Class(53)", "Delete WildcardType: ?(54)", "Delete ParameterizedType: Class<?>(55)", "Delete SimpleName: clazz(56)", "Delete SingleVariableDeclaration(57)", "Delete SimpleName: Object(58)", "Delete SimpleType: Object(59)", "Delete SimpleName: key(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: Object(62)", "Delete SimpleType: Object(63)", "Delete SimpleName: value(64)", "Delete SingleVariableDeclaration(65)", "Delete SimpleName: clazz(66)", "Delete SimpleName: discover(67)", "Delete SimpleName: is(68)", "Delete SimpleName: clazz(69)", "Delete SimpleName: key(70)", "Delete SimpleName: value(71)", "Delete MethodInvocation(72)", "Delete SuperConstructorInvocation(73)", "Delete SimpleName: property(74)", "Delete SimpleName: key(75)", "Delete Assignment: =(76)", "Delete ExpressionStatement(77)", "Delete Block(78)", "Delete MethodDeclaration(79)", "Delete TagElement: @inheritDoc(80)", "Delete TextElement:  (81)", "Delete TagElement(82)", "Delete Javadoc(83)", "Delete SimpleName: Override(84)", "Delete MarkerAnnotation(85)", "Delete Modifier: public(86)", "Delete SimpleName: Object(87)", "Delete SimpleType: Object(88)", "Delete SimpleName: getTargetProperty(89)", "Delete SimpleName: property(90)", "Delete ReturnStatement(91)", "Delete Block(92)", "Delete MethodDeclaration(93)", "Delete TagElement: @inheritDoc(94)", "Delete TextElement:  (95)", "Delete TagElement(96)", "Delete Javadoc(97)", "Delete SimpleName: Override(98)", "Delete MarkerAnnotation(99)", "Delete Modifier: public(100)", "Delete SimpleName: Object(101)", "Delete SimpleType: Object(102)", "Delete SimpleName: execute(103)", "Delete SimpleName: Object(104)", "Delete SimpleType: Object(105)", "Delete SimpleName: obj(106)", "Delete SingleVariableDeclaration(107)", "Delete SimpleName: Object(108)", "Delete SimpleType: Object(109)", "Delete SimpleName: value(110)", "Delete SingleVariableDeclaration(111)", "Delete SimpleName: IllegalAccessException(112)", "Delete SimpleType: IllegalAccessException(113)", "Delete SimpleName: InvocationTargetException(114)", "Delete SimpleType: InvocationTargetException(115)", "Delete SimpleName: Object(116)", "Delete SimpleType: Object(117)", "Delete Dimension(118)", "Delete ArrayType: Object[](119)", "Delete SimpleName: pargs(120)", "Delete SimpleName: property(121)", "Delete SimpleName: value(122)", "Delete ArrayInitializer(123)", "Delete VariableDeclarationFragment(124)", "Delete VariableDeclarationStatement(125)", "Delete SimpleName: method(126)", "Delete NullLiteral(127)", "Delete InfixExpression: !=(128)", "Delete SimpleName: method(129)", "Delete SimpleName: invoke(130)", "Delete SimpleName: obj(131)", "Delete SimpleName: pargs(132)", "Delete MethodInvocation(133)", "Delete ExpressionStatement(134)", "Delete Block(135)", "Delete IfStatement(136)", "Delete SimpleName: value(137)", "Delete ReturnStatement(138)", "Delete Block(139)", "Delete MethodDeclaration(140)", "Delete TagElement: @inheritDoc(141)", "Delete TextElement:  (142)", "Delete TagElement(143)", "Delete Javadoc(144)", "Delete SimpleName: Override(145)", "Delete MarkerAnnotation(146)", "Delete Modifier: public(147)", "Delete SimpleName: Object(148)", "Delete SimpleType: Object(149)", "Delete SimpleName: tryExecute(150)", "Delete SimpleName: Object(151)", "Delete SimpleType: Object(152)", "Delete SimpleName: obj(153)", "Delete SingleVariableDeclaration(154)", "Delete SimpleName: Object(155)", "Delete SimpleType: Object(156)", "Delete SimpleName: key(157)", "Delete SingleVariableDeclaration(158)", "Delete SimpleName: Object(159)", "Delete SimpleType: Object(160)", "Delete SimpleName: value(161)", "Delete SingleVariableDeclaration(162)", "Delete SimpleName: obj(163)", "Delete NullLiteral(164)", "Delete InfixExpression: !=(165)", "Delete SimpleName: method(166)", "Delete NullLiteral(167)", "Delete InfixExpression: !=(168)", "Delete InfixExpression: &&(169)", "Delete SimpleName: property(170)", "Delete SimpleName: equals(171)", "Delete SimpleName: key(172)", "Delete MethodInvocation(173)", "Delete InfixExpression: &&(174)", "Delete SimpleName: objectClass(175)", "Delete SimpleName: equals(176)", "Delete SimpleName: obj(177)", "Delete SimpleName: getClass(178)", "Delete MethodInvocation(179)", "Delete MethodInvocation(180)", "Delete InfixExpression: &&(181)", "Delete SimpleName: Object(182)", "Delete SimpleType: Object(183)", "Delete Dimension(184)", "Delete ArrayType: Object[](185)", "Delete SimpleName: args(186)", "Delete SimpleName: property(187)", "Delete SimpleName: value(188)", "Delete ArrayInitializer(189)", "Delete VariableDeclarationFragment(190)", "Delete VariableDeclarationStatement(191)", "Delete SimpleName: method(192)", "Delete SimpleName: invoke(193)", "Delete SimpleName: obj(194)", "Delete SimpleName: args(195)", "Delete MethodInvocation(196)", "Delete ExpressionStatement(197)", "Delete SimpleName: value(198)", "Delete ReturnStatement(199)", "Delete Block(200)", "Delete SimpleName: InvocationTargetException(201)", "Delete SimpleType: InvocationTargetException(202)", "Delete SimpleName: xinvoke(203)", "Delete SingleVariableDeclaration(204)", "Delete SimpleName: TRY_FAILED(205)", "Delete ReturnStatement(206)", "Delete Block(207)", "Delete CatchClause(208)", "Delete SimpleName: IllegalAccessException(209)", "Delete SimpleType: IllegalAccessException(210)", "Delete SimpleName: xill(211)", "Delete SingleVariableDeclaration(212)", "Delete SimpleName: TRY_FAILED(213)", "Delete ReturnStatement(214)", "Delete Block(215)", "Delete CatchClause(216)", "Delete TryStatement(217)", "Delete Block(218)", "Delete IfStatement(219)", "Delete SimpleName: TRY_FAILED(220)", "Delete ReturnStatement(221)", "Delete Block(222)", "Delete MethodDeclaration(223)", "Delete TextElement: Discovers the method for a (224)", "Delete SimpleName: DuckSet(225)", "Delete TagElement: @link(226)", "Delete TextElement: .(227)", "Delete TagElement(228)", "Delete SimpleName: is(229)", "Delete TextElement:  the introspector(230)", "Delete TagElement: @param(231)", "Delete SimpleName: clazz(232)", "Delete TextElement:  the class to find the set method from(233)", "Delete TagElement: @param(234)", "Delete SimpleName: key(235)", "Delete TextElement:  the key to use as 1st argument to the set method(236)", "Delete TagElement: @param(237)", "Delete SimpleName: value(238)", "Delete TextElement:  the value to use as 2nd argument to the set method(239)", "Delete TagElement: @param(240)", "Delete TextElement:  the method if found, null otherwise(241)", "Delete TagElement: @return(242)", "Delete Javadoc(243)", "Delete Modifier: private(244)", "Delete Modifier: static(245)", "Delete QualifiedName: java.lang.reflect.Method(246)", "Delete SimpleType: java.lang.reflect.Method(247)", "Delete SimpleName: discover(248)", "Delete SimpleName: Introspector(249)", "Delete SimpleType: Introspector(250)", "Delete SimpleName: is(251)", "Delete SingleVariableDeclaration(252)", "Delete SimpleName: Class(253)", "Delete SimpleType: Class(254)", "Delete WildcardType: ?(255)", "Delete ParameterizedType: Class<?>(256)", "Delete SimpleName: clazz(257)", "Delete SingleVariableDeclaration(258)", "Delete SimpleName: Object(259)", "Delete SimpleType: Object(260)", "Delete SimpleName: key(261)", "Delete SingleVariableDeclaration(262)", "Delete SimpleName: Object(263)", "Delete SimpleType: Object(264)", "Delete SimpleName: value(265)", "Delete SingleVariableDeclaration(266)", "Delete SimpleName: is(267)", "Delete SimpleName: getMethod(268)", "Delete SimpleName: clazz(269)", "Delete StringLiteral: \"set\"(270)", "Delete SimpleName: makeArgs(271)", "Delete SimpleName: key(272)", "Delete SimpleName: value(273)", "Delete MethodInvocation(274)", "Delete MethodInvocation(275)", "Delete ReturnStatement(276)", "Delete Block(277)", "Delete MethodDeclaration(278)", "Delete TypeDeclaration: class(279)"]}}, {"EnumerationIterator_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Enumeration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: public", "DEL SimpleName: T", "DEL ParameterizedType: Iterator<T>", "DEL SimpleType: T", "DEL Modifier: public", "DEL SimpleType: T", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement:  Whether there is another element.", "DEL PrimitiveType: void", "DEL VariableDeclarationFragment", "DEL SimpleName: enumer", "DEL SimpleName: nextElement", "DEL SimpleName: enumer", "DEL SimpleType: Iterator", "DEL FieldDeclaration", "DEL TextElement: Move to next element in the array.", "DEL TagElement", "DEL Javadoc", "DEL TagElement", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL SimpleName: enumer", "DEL Modifier: public", "DEL TextElement:  the type of object this iterator returns", "DEL SimpleName: enumeration", "DEL TypeParameter", "DEL SimpleName: Enumeration", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL SimpleName: Enumeration", "DEL SimpleType: Enumeration", "DEL SimpleName: T", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleType: Enumeration", "DEL TagElement: @return", "DEL TagElement", "DEL TextElement: Check to see if there is another element in the array.", "DEL Block", "DEL ReturnStatement", "DEL TextElement: Creates a new iteratorwrapper instance for the specified ", "DEL TextElement:  1.0", "DEL SimpleName: T", "DEL TextElement: An Iterator wrapper for an Enumeration.", "DEL Javadoc", "DEL SimpleName: hasMoreElements", "DEL Block", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: enumeration", "DEL TextElement:   The Enumeration to wrap.", "DEL SimpleName: hasNext", "DEL SimpleName: remove", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TextElement:  The next object in the array.", "DEL SimpleName: Iterator", "DEL SimpleName: T", "DEL SimpleName: EnumerationIterator", "DEL Modifier: private", "DEL TextElement: >", "DEL Block", "DEL SimpleType: T", "DEL TagElement", "DEL TextElement: The enumeration to iterate over.", "DEL TextElement: Unimplemented.  No analogy in Enumeration", "DEL Modifier: final", "DEL SimpleName: next", "DEL SimpleName: T", "DEL SimpleName: enumeration", "DEL TextElement: Enumeration.", "DEL ParameterizedType: Enumeration<T>", "DEL Javadoc", "DEL SimpleType: T", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TagElement", "DEL Assignment: =", "DEL TextElement: <", "DEL SimpleName: enumeration", "DEL SimpleName: T", "DEL TagElement: @since", "DEL Javadoc", "DEL Block", "DEL ParameterizedType: Enumeration<T>", "DEL SimpleName: EnumerationIterator"]}]}}, {"EnumerationIterator_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Iterator(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Enumeration(4)", "Delete ImportDeclaration(5)", "Delete TextElement: An Iterator wrapper for an Enumeration.(6)", "Delete TagElement(7)", "Delete TextElement: <(8)", "Delete SimpleName: T(9)", "Delete TextElement: >(10)", "Delete TextElement:  the type of object this iterator returns(11)", "Delete TagElement: @param(12)", "Delete TextElement:  1.0(13)", "Delete TagElement: @since(14)", "Delete Javadoc(15)", "Delete Modifier: public(16)", "Delete SimpleName: EnumerationIterator(17)", "Delete SimpleName: T(18)", "Delete TypeParameter(19)", "Delete SimpleName: Iterator(20)", "Delete SimpleType: Iterator(21)", "Delete SimpleName: T(22)", "Delete SimpleType: T(23)", "Delete ParameterizedType: Iterator<T>(24)", "Delete TextElement: The enumeration to iterate over.(25)", "Delete TagElement(26)", "Delete Javadoc(27)", "Delete Modifier: private(28)", "Delete Modifier: final(29)", "Delete SimpleName: Enumeration(30)", "Delete SimpleType: Enumeration(31)", "Delete SimpleName: T(32)", "Delete SimpleType: T(33)", "Delete ParameterizedType: Enumeration<T>(34)", "Delete SimpleName: enumeration(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: Creates a new iteratorwrapper instance for the specified (38)", "Delete TextElement: Enumeration.(39)", "Delete TagElement(40)", "Delete SimpleName: enumer(41)", "Delete TextElement:   The Enumeration to wrap.(42)", "Delete TagElement: @param(43)", "Delete Javadoc(44)", "Delete Modifier: public(45)", "Delete SimpleName: EnumerationIterator(46)", "Delete SimpleName: Enumeration(47)", "Delete SimpleType: Enumeration(48)", "Delete SimpleName: T(49)", "Delete SimpleType: T(50)", "Delete ParameterizedType: Enumeration<T>(51)", "Delete SimpleName: enumer(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: enumeration(54)", "Delete SimpleName: enumer(55)", "Delete Assignment: =(56)", "Delete ExpressionStatement(57)", "Delete Block(58)", "Delete MethodDeclaration(59)", "Delete TextElement: Move to next element in the array.(60)", "Delete TagElement(61)", "Delete TextElement:  The next object in the array.(62)", "Delete TagElement: @return(63)", "Delete Javadoc(64)", "Delete Modifier: public(65)", "Delete SimpleName: T(66)", "Delete SimpleType: T(67)", "Delete SimpleName: next(68)", "Delete SimpleName: enumeration(69)", "Delete SimpleName: nextElement(70)", "Delete MethodInvocation(71)", "Delete ReturnStatement(72)", "Delete Block(73)", "Delete MethodDeclaration(74)", "Delete TextElement: Check to see if there is another element in the array.(75)", "Delete TagElement(76)", "Delete TextElement:  Whether there is another element.(77)", "Delete TagElement: @return(78)", "Delete Javadoc(79)", "Delete Modifier: public(80)", "Delete PrimitiveType: boolean(81)", "Delete SimpleName: hasNext(82)", "Delete SimpleName: enumeration(83)", "Delete SimpleName: hasMoreElements(84)", "Delete MethodInvocation(85)", "Delete ReturnStatement(86)", "Delete Block(87)", "Delete MethodDeclaration(88)", "Delete TextElement: Unimplemented.  No analogy in Enumeration(89)", "Delete TagElement(90)", "Delete Javadoc(91)", "Delete Modifier: public(92)", "Delete PrimitiveType: void(93)", "Delete SimpleName: remove(94)", "Delete Block(95)", "Delete MethodDeclaration(96)", "Delete TypeDeclaration: class(97)"]}}, {"Introspector_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.ref.SoftReference", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Field"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection.IntrospectorBase", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.logging.Log"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL QualifiedName: java.lang.reflect.Field", "DEL Modifier: public", "DEL TagElement: @param", "DEL SimpleName: executor", "DEL ReturnStatement", "DEL TextElement:  property name", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL TagElement: @param", "DEL SimpleName: Class", "DEL SimpleName: getMethods", "DEL SimpleName: isAlive", "DEL SimpleName: identifier", "DEL FieldDeclaration", "DEL SimpleName: Field", "DEL SimpleName: Class", "DEL SimpleName: arg", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL SimpleName: ref", "DEL SimpleType: Object", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Object", "DEL SimpleName: intro", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleType: Class", "DEL SimpleName: Object", "DEL Assignment: =", "DEL WildcardType: ?", "DEL SimpleName: ref", "DEL SimpleName: toString", "DEL TagElement", "DEL Block", "DEL SimpleName: arg", "DEL ParameterizedType: SoftReference<IntrospectorBase>", "DEL TextElement:  the object to base the property from.", "DEL Block", "DEL SimpleType: MapGetExecutor", "DEL Modifier: final", "DEL SimpleName: toString", "DEL ReturnStatement", "DEL TextElement: .", "DEL MethodInvocation", "DEL TextElement:  a ", "DEL SimpleName: getClass", "DEL Modifier: volatile", "DEL SimpleType: Method", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL TagElement", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleName: Method", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL Modifier: final", "DEL SimpleName: arg", "DEL SimpleName: isAlive", "DEL SimpleName: c", "DEL TagElement: @return", "DEL TagElement: @return", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: claz", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodInvocation", "DEL TextElement: or null if no unambiguous method could be found through introspection.", "DEL TagElement: @param", "DEL SimpleName: index", "DEL SimpleName: args", "DEL Javadoc", "DEL SimpleType: Object", "DEL Modifier: final", "DEL SimpleName: obj", "DEL SimpleName: String", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: property", "DEL Block", "DEL SimpleName: params", "DEL SimpleName: property", "DEL SimpleName: executor", "DEL SimpleType: Field", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: claz", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: className", "DEL SimpleType: SoftReference", "DEL TextElement:  method arguments", "DEL SimpleName: IntrospectorBase", "DEL SimpleName: identifier", "DEL InfixExpression: !=", "DEL QualifiedName: AbstractExecutor.Set", "DEL NullLiteral", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL SimpleName: c", "DEL NullLiteral", "DEL TagElement", "DEL SimpleType: IntrospectorBase", "DEL SimpleName: ref", "DEL TagElement: @return", "DEL SimpleName: log", "DEL Assignment: =", "DEL Modifier: public", "DEL Dimension", "DEL SimpleType: DuckSetExecutor", "DEL QualifiedName: AbstractExecutor.Set", "DEL SimpleType: Integer", "DEL SimpleType: Class", "DEL ParameterizedType: Class<?>", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: clazz", "DEL VariableDeclarationStatement", "DEL SimpleType: Object", "DEL SimpleName: name", "DEL SimpleName: claz", "DEL Modifier: public", "DEL SimpleName: obj", "DEL SimpleName: getClass", "DEL TagElement: @param", "DEL IfStatement", "DEL Modifier: protected", "DEL SimpleName: executor", "DEL NullLiteral", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL IfStatement", "DEL ThisExpression", "DEL SimpleName: identifier", "DEL TagElement: @link", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL SimpleName: executor", "DEL SimpleType: ListSetExecutor", "DEL SingleVariableDeclaration", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: toString", "DEL SingleVariableDeclaration", "DEL SimpleType: Integer", "DEL WildcardType: ?", "DEL SimpleType: Class", "DEL ThisExpression", "DEL SimpleType: PropertyGetExecutor", "DEL TagElement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: c", "DEL SimpleName: claz", "DEL TagElement: @link", "DEL TagElement: @param", "DEL Javadoc", "DEL ThisExpression", "DEL Block", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: identifier", "DEL Assignment: =", "DEL SimpleName: executor", "DEL SimpleName: getGetExecutor", "DEL Modifier: final", "DEL SimpleName: IntrospectorBase", "DEL Dimension", "DEL SimpleName: identifier", "DEL ThisExpression", "DEL SimpleType: String", "DEL SimpleName: c", "DEL SimpleType: String", "DEL CatchClause", "DEL MethodInvocation", "DEL TagElement: @return", "DEL TagElement", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleName: isAlive", "DEL ArrayType: Object[]", "DEL TagElement: @param", "DEL SimpleName: arg", "DEL SimpleName: getMethodExecutor", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL SimpleName: executor", "DEL TextElement: The logger to use for all warnings & errors. ", "DEL SingleVariableDeclaration", "DEL ParameterizedType: SoftReference<IntrospectorBase>", "DEL CastExpression", "DEL SimpleType: Constructor", "DEL SimpleName: loader", "DEL SimpleType: Class", "DEL SimpleName: c", "DEL MethodDeclaration", "DEL Modifier: final", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL SimpleType: Class", "DEL Dimension", "DEL SimpleName: Class", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL Modifier: protected", "DEL ReturnStatement", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getConstructor", "DEL SimpleName: Class", "DEL ThisExpression", "DEL SimpleName: base", "DEL SimpleName: executor", "DEL SimpleName: Object", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: name", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL TagElement: @link", "DEL SimpleType: String", "DEL SimpleName: executor", "DEL SimpleName: Class", "DEL TagElement", "DEL SimpleName: index", "DEL SimpleName: rlog", "DEL SimpleType: Object", "DEL TagElement", "DEL TextElement:  property name (or identifier)", "DEL IfStatement", "DEL TagElement: @return", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL SimpleName: arg", "DEL NullLiteral", "DEL SimpleType: MethodKey", "DEL TextElement: Gets the method defined by <code>name</code> and", "DEL SimpleType: Class", "DEL NullLiteral", "DEL ParameterizedType: Class<?>", "DEL TagElement: @return", "DEL TextElement: Return a property setter.", "DEL SimpleName: c", "DEL IfStatement", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: identifier", "DEL SimpleName: String", "DEL SimpleName: NumberFormatException", "DEL SimpleName: String", "DEL TextElement:  the logger to use for warnings.", "DEL SimpleName: key", "DEL TagElement: @link", "DEL TextElement:  a ", "DEL SingleVariableDeclaration", "DEL SimpleName: c", "DEL ThisExpression", "DEL QualifiedName: AbstractExecutor.Get", "DEL ReturnStatement", "DEL Modifier: final", "DEL TextElement:  the class instance or null if it could not be found", "DEL SimpleName: toInteger", "DEL TextElement:    Name of the field being searched for", "DEL SimpleName: arg", "DEL Javadoc", "DEL SimpleName: Introspector", "DEL VariableDeclarationStatement", "DEL TextElement: .", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL ParameterizedType: Class<?>", "DEL ClassInstanceCreation", "DEL Block", "DEL CastExpression", "DEL SimpleName: isAlive", "DEL MethodInvocation", "DEL SimpleName: property", "DEL Dimension", "DEL SimpleName: c", "DEL SimpleName: Introspector", "DEL SimpleType: Log", "DEL SimpleName: intro", "DEL TextElement: Returns a general method.", "DEL SimpleName: toString", "DEL SimpleName: name", "DEL SimpleType: Log", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleName: identifier", "DEL SimpleName: arg", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL ArrayType: String[]", "DEL TagElement: @param", "DEL TextElement:  the class name", "DEL TextElement:  value to set", "DEL SingleVariableDeclaration", "DEL TextElement:  the class", "DEL SimpleName: IntrospectorBase", "DEL ThisExpression", "DEL SimpleName: c", "DEL SimpleName: Integer", "DEL InfixExpression: !=", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL TextElement: Coerce an Object to a String.", "DEL TagElement: @return", "DEL SimpleName: Object", "DEL SimpleName: ListSetExecutor", "DEL ExpressionStatement", "DEL TextElement:  a ", "DEL SimpleName: className", "DEL VariableDeclarationFragment", "DEL SimpleName: obj", "DEL NullLiteral", "DEL TextElement: Gets all the methods with a given name from this map.", "DEL Modifier: protected", "DEL TextElement: Returns a general constructor.", "DEL SimpleName: Method", "DEL SingleVariableDeclaration", "DEL SimpleName: ClassLoader", "DEL TextElement:  or null if it does not exist or is not accessible", "DEL SimpleName: MethodExecutor", "DEL Modifier: public", "DEL SimpleName: BooleanGetExecutor", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL TagElement", "DEL TextElement:  the array of methods", "DEL QualifiedName: AbstractExecutor.Set", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL IfStatement", "DEL TextElement: Gets the accessible field names known for a given class.", "DEL SimpleName: log", "DEL ParameterizedType: Class<?>", "DEL SimpleName: SoftReference", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: Object", "DEL NullLiteral", "DEL TextElement: Return a property getter.", "DEL SimpleName: claz", "DEL SimpleType: AbstractExecutor.Get", "DEL ClassInstanceCreation", "DEL SimpleName: executor", "DEL SimpleType: AbstractExecutor.Get", "DEL TagElement: @return", "DEL Block", "DEL WildcardType: ?", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Class<?>", "DEL SimpleName: identifier", "DEL SimpleName: ctorHandle", "DEL Modifier: public", "DEL IfStatement", "DEL ExpressionStatement", "DEL QualifiedName: java.lang.reflect.Constructor", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: IntrospectorBase", "DEL TryStatement", "DEL TagElement", "DEL TextElement:  a ", "DEL SimpleName: ref", "DEL SimpleName: claz", "DEL MethodDeclaration", "DEL SimpleName: toInteger", "DEL SimpleName: MethodKey", "DEL SimpleName: isAlive", "DEL SimpleName: ListGetExecutor", "DEL Dimension", "DEL ParameterizedType: Class<?>", "DEL SimpleName: executor", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: MapGetExecutor", "DEL Javadoc", "DEL SimpleName: identifier", "DEL TextElement: Gets the method defined by <code>key</code> and for the Class <code>c</code>.", "DEL Assignment: =", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL SimpleName: setLoader", "DEL SimpleName: DuckGetExecutor", "DEL SimpleType: BooleanGetExecutor", "DEL MethodInvocation", "DEL SimpleName: property", "DEL MethodInvocation", "DEL SimpleName: getMethodNames", "DEL ExpressionStatement", "DEL SimpleName: MethodKey", "DEL Modifier: final", "DEL SimpleName: getMethodNames", "DEL TagElement: @param", "DEL SimpleType: MapSetExecutor", "DEL TextElement:  the class", "DEL SimpleName: executor", "DEL WildcardType: ?", "DEL SimpleName: arg", "DEL Block", "DEL SimpleName: claz", "DEL SimpleName: isAlive", "DEL Modifier: protected", "DEL SimpleName: DuckSetExecutor", "DEL SimpleName: intValue", "DEL SimpleName: intro", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: args", "DEL ReturnStatement", "DEL SimpleName: executor", "DEL SimpleName: Object", "DEL SimpleName: executor", "DEL TextElement:  the object to base the property from.", "DEL TagElement: @return", "DEL SimpleName: executor", "DEL SimpleName: valueOf", "DEL TextElement:  the loader to use", "DEL SimpleName: property", "DEL Assignment: =", "DEL TagElement: @param", "DEL SimpleName: claz", "DEL ReturnStatement", "DEL SimpleName: arg", "DEL Block", "DEL SimpleName: executor", "DEL SimpleType: ClassLoader", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL SimpleName: c", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleName: base", "DEL MethodInvocation", "DEL SimpleName: executor", "DEL SimpleName: Class", "DEL Block", "DEL SimpleType: Object", "DEL Block", "DEL QualifiedName: AbstractExecutor.Method", "DEL TagElement: @link", "DEL SimpleName: executor", "DEL SimpleName: getField", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: params", "DEL SimpleName: claz", "DEL TagElement: @param", "DEL TagElement: @since", "DEL SingleVariableDeclaration", "DEL TextElement:  the Object to coerce", "DEL SimpleName: isAlive", "DEL VariableDeclarationStatement", "DEL SimpleName: isAlive", "DEL MethodInvocation", "DEL SimpleName: className", "DEL InfixExpression: ==", "DEL SimpleName: Object", "DEL SimpleName: executor", "DEL SimpleType: Object", "DEL Block", "DEL Block", "DEL Assignment: =", "DEL SimpleName: toString", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL SimpleName: claz", "DEL SimpleType: AbstractExecutor.Set", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: rlog", "DEL SimpleName: arg", "DEL TagElement: @return", "DEL IfStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: valueOf", "DEL SimpleName: property", "DEL MethodInvocation", "DEL SimpleType: Integer", "DEL SimpleName: executor", "DEL IfStatement", "DEL SimpleName: IntrospectorBase", "DEL SimpleName: obj", "DEL ParenthesizedExpression", "DEL SimpleName: getMethod", "DEL TextElement:  a String if it can be converted, null otherwise", "DEL ExpressionStatement", "DEL SimpleName: clazz", "DEL ClassInstanceCreation", "DEL NullLiteral", "DEL SimpleType: NumberFormatException", "DEL SimpleName: methodName", "DEL WildcardType: ?", "DEL SimpleName: name", "DEL Modifier: final", "DEL InstanceofExpression", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleName: me", "DEL SimpleName: key", "DEL SimpleType: MethodKey", "DEL ClassInstanceCreation", "DEL SimpleName: key", "DEL SimpleName: arg", "DEL TagElement", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL MethodInvocation", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: ctorHandle", "DEL Block", "DEL TextElement: Gets the current introspector base.", "DEL QualifiedName: java.lang.reflect.Method", "DEL TextElement:  a ", "DEL InfixExpression: ==", "DEL SimpleType: Method", "DEL SimpleName: SoftReference", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: clazz", "DEL Modifier: final", "DEL SimpleName: Class", "DEL SimpleName: params", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL QualifiedName: AbstractExecutor.Method", "DEL SimpleName: c", "DEL SimpleName: executor", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: intro", "DEL Javadoc", "DEL TagElement: @return", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: executor", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL TextElement: Gets the field named by <code>key</code> for the class <code>c</code>.", "DEL ExpressionStatement", "DEL TextElement: <code>params</code> for the Class <code>c</code>.", "DEL SimpleName: c", "DEL Modifier: final", "DEL SimpleName: ctorHandle", "DEL SimpleName: base", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: executor", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL Modifier: protected", "DEL MethodInvocation", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleName: toString", "DEL SimpleType: IntrospectorBase", "DEL SimpleName: index", "DEL SimpleName: c", "DEL TagElement: @param", "DEL SimpleName: toInteger", "DEL SimpleName: Number", "DEL SimpleName: executor", "DEL SimpleName: base", "DEL SimpleName: MapSetExecutor", "DEL SimpleName: getClassByName", "DEL SimpleName: executor", "DEL MethodInvocation", "DEL SimpleName: IntrospectorBase", "DEL MethodInvocation", "DEL IfStatement", "DEL ReturnStatement", "DEL ArrayType: Object[]", "DEL TextElement:  a ", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleType: Class", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: identifier", "DEL TextElement: Default introspection services.", "DEL SimpleName: MethodKey", "DEL SimpleName: methodName", "DEL Javadoc", "DEL SimpleName: DuckSetExecutor", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: String", "DEL TextElement:  contructor arguments", "DEL Modifier: final", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: base", "DEL SimpleType: DuckSetExecutor", "DEL TextElement:  Class in which the method search is taking place", "DEL WildcardType: ?", "DEL Block", "DEL SimpleType: String", "DEL TextElement:  MethodKey of the method being searched for", "DEL SimpleName: arg", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: getSetExecutor", "DEL TextElement:  the seeked methods name", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleName: String", "DEL NullLiteral", "DEL WildcardType: ?", "DEL TextElement:      Class in which the field search is taking place", "DEL Block", "DEL TextElement:  Name of the method being searched for", "DEL TagElement", "DEL Block", "DEL Modifier: final", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleType: IntrospectorBase", "DEL TextElement:  the class method names", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: name", "DEL SimpleName: isAlive", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL Javadoc", "DEL TextElement: the parameters", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL MethodInvocation", "DEL ReturnStatement", "DEL TextElement:  An array of Objects (not Classes) that describe the", "DEL Modifier: public", "DEL SimpleName: Constructor", "DEL SingleVariableDeclaration", "DEL SimpleName: base", "DEL MethodDeclaration", "DEL SimpleName: getMethod", "DEL ClassInstanceCreation", "DEL SimpleName: executor", "DEL SimpleType: Method", "DEL TextElement:  the class", "DEL MethodInvocation", "DEL SimpleName: executor", "DEL TagElement", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: property", "DEL SimpleName: Class", "DEL TagElement: @link", "DEL QualifiedName: AbstractExecutor.Get", "DEL SimpleType: String", "DEL SimpleType: IntrospectorBase", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: className", "DEL NullLiteral", "DEL SimpleName: obj", "DEL NullLiteral", "DEL TextElement: .", "DEL SimpleName: executor", "DEL IfStatement", "DEL SimpleName: args", "DEL Assignment: =", "DEL TagElement: @return", "DEL InstanceofExpression", "DEL SimpleName: getMethods", "DEL SimpleType: DuckGetExecutor", "DEL SimpleName: property", "DEL SimpleName: getField", "DEL ExpressionStatement", "DEL SimpleName: PropertySetExecutor", "DEL SimpleName: String", "DEL ThisExpression", "DEL SimpleType: Object", "DEL Javadoc", "DEL TextElement: Gets the accessible methods names known for a given class.", "DEL TextElement:  an Integer if it can be converted, null otherwise", "DEL IfStatement", "DEL SimpleName: arg", "DEL ParameterizedType: Class<?>", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: claz", "DEL ConditionalExpression", "DEL SimpleName: arg", "DEL ParameterizedType: Class<?>", "DEL ReturnStatement", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL SimpleName: base", "DEL MethodInvocation", "DEL SimpleName: className", "DEL SimpleName: executor", "DEL SimpleName: base", "DEL SimpleName: c", "DEL Block", "DEL Javadoc", "DEL MethodDeclaration", "DEL QualifiedName: AbstractExecutor.Get", "DEL TextElement: or null if no unambiguous contructor could be found through introspection.", "DEL SimpleType: SoftReference", "DEL InfixExpression: !=", "DEL TextElement:  1.0", "DEL SimpleType: Number", "DEL SimpleName: PropertyGetExecutor", "DEL NullLiteral", "DEL SimpleName: identifier", "DEL TextElement: Gets a class by name through this introspector class loader.", "DEL SimpleName: String", "DEL TextElement:  the object", "DEL SimpleName: isAlive", "DEL TextElement: The soft reference to the introspector currently in use. ", "DEL SimpleType: AbstractExecutor.Method", "DEL SimpleType: String", "DEL Javadoc", "DEL InfixExpression: ==", "DEL SimpleName: Method", "DEL SimpleName: base", "DEL SimpleName: loader", "DEL MethodInvocation", "DEL SimpleName: identifier", "DEL SimpleName: DuckGetExecutor", "DEL Modifier: public", "DEL ExpressionStatement", "DEL TextElement:  the object", "DEL SimpleName: Log", "DEL SynchronizedStatement", "DEL IfStatement", "DEL SimpleName: get", "DEL NullLiteral", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: executor", "DEL SimpleName: Class", "DEL SimpleName: SoftReference", "DEL ReturnStatement", "DEL SimpleName: Log", "DEL SimpleName: me", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: isAlive", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: getFieldNames", "DEL TagElement: @param", "DEL NullLiteral", "DEL SimpleName: intro", "DEL MethodInvocation", "DEL TextElement:  the Object to coerce", "DEL ArrayType: String[]", "DEL ParameterizedType: Class<?>", "DEL Assignment: =", "DEL SimpleName: arg", "DEL SimpleName: className", "DEL SimpleName: rlog", "DEL SimpleName: Object", "DEL SimpleName: key", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: executor", "DEL SimpleName: executor", "DEL SimpleName: clazz", "DEL SimpleName: executor", "DEL SimpleName: ctorHandle", "DEL SimpleName: executor", "DEL ReturnStatement", "DEL SimpleName: xnumber", "DEL SimpleName: base", "DEL SimpleType: AbstractExecutor.Method", "DEL SimpleName: args", "DEL SimpleName: Number", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: index", "DEL SimpleType: DuckGetExecutor", "DEL SimpleName: c", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: executor", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SimpleName: arg", "DEL SimpleName: args", "DEL MethodInvocation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL TextElement:  the introspector", "DEL ClassInstanceCreation", "DEL ParameterizedType: Constructor<?>", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL TextElement: <p>Finding methods as well as property getters & setters.</p>", "DEL TextElement:  Class in which the method search is taking place", "DEL SimpleName: setClassLoader", "DEL SimpleName: String", "DEL SimpleName: property", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: intro", "DEL SimpleName: c", "DEL TextElement: <p>If the reference has been collected, this method will recreate the underlying introspector.</p>", "DEL SimpleType: MethodKey", "DEL Block", "DEL TagElement: @param", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: Integer", "DEL SimpleName: Integer", "DEL Block", "DEL Modifier: final", "DEL Assignment: =", "DEL SimpleName: index", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL Modifier: final", "DEL SimpleName: IntrospectorBase", "DEL TextElement:  the method name", "DEL IfStatement", "DEL TextElement:  a ", "DEL SimpleName: get", "DEL TagElement", "DEL MethodDeclaration", "DEL ParameterizedType: SoftReference<IntrospectorBase>", "DEL Block", "DEL Block", "DEL SimpleName: index", "DEL ArrayType: Method[]", "DEL TextElement: or null if no unambiguous method could be found through introspection.", "DEL MethodDeclaration", "DEL TextElement: Creates an introspector.", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Block", "DEL SimpleName: obj", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: SoftReference", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: executor", "DEL Assignment: =", "DEL SimpleName: ref", "DEL SimpleName: me", "DEL ExpressionStatement", "DEL SimpleName: ctorHandle", "DEL ReturnStatement", "DEL TextElement: Coerce an Object  to an Integer.", "DEL SimpleName: methodName", "DEL VariableDeclarationStatement", "DEL TypeDeclaration: class", "DEL SimpleName: arg", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: isAlive", "DEL Modifier: private", "DEL SimpleName: getClassByName", "DEL SimpleName: getFieldNames", "DEL TagElement", "DEL SimpleName: getMethod", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: getName", "DEL SimpleType: Number", "DEL SimpleName: claz", "DEL SimpleName: getConstructor", "DEL TagElement", "DEL SimpleName: getMethod", "DEL SimpleName: intro", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: className", "DEL SimpleType: MethodExecutor", "DEL SimpleType: AbstractExecutor.Set", "DEL SimpleType: IntrospectorBase", "DEL QualifiedName: AbstractExecutor.Method", "DEL MethodDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleType: Class", "DEL Modifier: public", "DEL SimpleName: loader", "DEL SimpleName: ctorHandle", "DEL SimpleName: obj", "DEL SimpleType: ListGetExecutor", "DEL SimpleName: Integer", "DEL ReturnStatement", "DEL SimpleName: claz", "DEL SimpleType: PropertySetExecutor", "DEL QualifiedName: java.lang.reflect.Method", "DEL TextElement: Sets the underlying class loader for class solving resolution.", "DEL SimpleName: obj", "DEL TextElement:  the class field names", "DEL SimpleName: String"]}]}}, {"Introspector_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.ref.SoftReference(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Constructor(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.reflect.Field(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.apache.commons.jexl2.internal.introspection.IntrospectorBase(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.commons.logging.Log(14)", "Delete ImportDeclaration(15)", "Delete TextElement: Default introspection services.(16)", "Delete TextElement: <p>Finding methods as well as property getters & setters.</p>(17)", "Delete TagElement(18)", "Delete TextElement:  1.0(19)", "Delete TagElement: @since(20)", "Delete Javadoc(21)", "Delete Modifier: public(22)", "Delete SimpleName: Introspector(23)", "Delete TextElement: The logger to use for all warnings & errors. (24)", "Delete TagElement(25)", "Delete Javadoc(26)", "Delete Modifier: protected(27)", "Delete Modifier: final(28)", "Delete SimpleName: Log(29)", "Delete SimpleType: Log(30)", "Delete SimpleName: rlog(31)", "Delete VariableDeclarationFragment(32)", "Delete FieldDeclaration(33)", "Delete TextElement: The soft reference to the introspector currently in use. (34)", "Delete TagElement(35)", "Delete Javadoc(36)", "Delete Modifier: private(37)", "Delete Modifier: volatile(38)", "Delete SimpleName: SoftReference(39)", "Delete SimpleType: SoftReference(40)", "Delete SimpleName: IntrospectorBase(41)", "Delete SimpleType: IntrospectorBase(42)", "Delete ParameterizedType: SoftReference<IntrospectorBase>(43)", "Delete SimpleName: ref(44)", "Delete VariableDeclarationFragment(45)", "Delete FieldDeclaration(46)", "Delete TextElement: Creates an introspector.(47)", "Delete TagElement(48)", "Delete SimpleName: log(49)", "Delete TextElement:  the logger to use for warnings.(50)", "Delete TagElement: @param(51)", "Delete Javadoc(52)", "Delete Modifier: protected(53)", "Delete SimpleName: Introspector(54)", "Delete SimpleName: Log(55)", "Delete SimpleType: Log(56)", "Delete SimpleName: log(57)", "Delete SingleVariableDeclaration(58)", "Delete SimpleName: rlog(59)", "Delete SimpleName: log(60)", "Delete Assignment: =(61)", "Delete ExpressionStatement(62)", "Delete SimpleName: ref(63)", "Delete SimpleName: SoftReference(64)", "Delete SimpleType: SoftReference(65)", "Delete SimpleName: IntrospectorBase(66)", "Delete SimpleType: IntrospectorBase(67)", "Delete ParameterizedType: SoftReference<IntrospectorBase>(68)", "Delete NullLiteral(69)", "Delete ClassInstanceCreation(70)", "Delete Assignment: =(71)", "Delete ExpressionStatement(72)", "Delete Block(73)", "Delete MethodDeclaration(74)", "Delete TextElement: Coerce an Object  to an Integer.(75)", "Delete TagElement(76)", "Delete SimpleName: arg(77)", "Delete TextElement:  the Object to coerce(78)", "Delete TagElement: @param(79)", "Delete TextElement:  an Integer if it can be converted, null otherwise(80)", "Delete TagElement: @return(81)", "Delete Javadoc(82)", "Delete Modifier: protected(83)", "Delete SimpleName: Integer(84)", "Delete SimpleType: Integer(85)", "Delete SimpleName: toInteger(86)", "Delete SimpleName: Object(87)", "Delete SimpleType: Object(88)", "Delete SimpleName: arg(89)", "Delete SingleVariableDeclaration(90)", "Delete SimpleName: arg(91)", "Delete NullLiteral(92)", "Delete InfixExpression: ==(93)", "Delete NullLiteral(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete IfStatement(97)", "Delete SimpleName: arg(98)", "Delete SimpleName: Number(99)", "Delete SimpleType: Number(100)", "Delete InstanceofExpression(101)", "Delete SimpleName: Integer(102)", "Delete SimpleName: valueOf(103)", "Delete SimpleName: Number(104)", "Delete SimpleType: Number(105)", "Delete SimpleName: arg(106)", "Delete CastExpression(107)", "Delete ParenthesizedExpression(108)", "Delete SimpleName: intValue(109)", "Delete MethodInvocation(110)", "Delete MethodInvocation(111)", "Delete ReturnStatement(112)", "Delete Block(113)", "Delete IfStatement(114)", "Delete SimpleName: Integer(115)", "Delete SimpleName: valueOf(116)", "Delete SimpleName: arg(117)", "Delete SimpleName: toString(118)", "Delete MethodInvocation(119)", "Delete MethodInvocation(120)", "Delete ReturnStatement(121)", "Delete Block(122)", "Delete SimpleName: NumberFormatException(123)", "Delete SimpleType: NumberFormatException(124)", "Delete SimpleName: xnumber(125)", "Delete SingleVariableDeclaration(126)", "Delete NullLiteral(127)", "Delete ReturnStatement(128)", "Delete Block(129)", "Delete CatchClause(130)", "Delete TryStatement(131)", "Delete Block(132)", "Delete MethodDeclaration(133)", "Delete TextElement: Coerce an Object to a String.(134)", "Delete TagElement(135)", "Delete SimpleName: arg(136)", "Delete TextElement:  the Object to coerce(137)", "Delete TagElement: @param(138)", "Delete TextElement:  a String if it can be converted, null otherwise(139)", "Delete TagElement: @return(140)", "Delete Javadoc(141)", "Delete Modifier: protected(142)", "Delete SimpleName: String(143)", "Delete SimpleType: String(144)", "Delete SimpleName: toString(145)", "Delete SimpleName: Object(146)", "Delete SimpleType: Object(147)", "Delete SimpleName: arg(148)", "Delete SingleVariableDeclaration(149)", "Delete SimpleName: arg(150)", "Delete NullLiteral(151)", "Delete InfixExpression: ==(152)", "Delete NullLiteral(153)", "Delete SimpleName: arg(154)", "Delete SimpleName: toString(155)", "Delete MethodInvocation(156)", "Delete ConditionalExpression(157)", "Delete ReturnStatement(158)", "Delete Block(159)", "Delete MethodDeclaration(160)", "Delete TextElement: Gets the current introspector base.(161)", "Delete TextElement: <p>If the reference has been collected, this method will recreate the underlying introspector.</p>(162)", "Delete TagElement(163)", "Delete TextElement:  the introspector(164)", "Delete TagElement: @return(165)", "Delete Javadoc(166)", "Delete Modifier: protected(167)", "Delete Modifier: final(168)", "Delete SimpleName: IntrospectorBase(169)", "Delete SimpleType: IntrospectorBase(170)", "Delete SimpleName: base(171)", "Delete SimpleName: IntrospectorBase(172)", "Delete SimpleType: IntrospectorBase(173)", "Delete SimpleName: intro(174)", "Delete SimpleName: ref(175)", "Delete SimpleName: get(176)", "Delete MethodInvocation(177)", "Delete VariableDeclarationFragment(178)", "Delete VariableDeclarationStatement(179)", "Delete SimpleName: intro(180)", "Delete NullLiteral(181)", "Delete InfixExpression: ==(182)", "Delete ThisExpression(183)", "Delete SimpleName: intro(184)", "Delete SimpleName: ref(185)", "Delete SimpleName: get(186)", "Delete MethodInvocation(187)", "Delete Assignment: =(188)", "Delete ExpressionStatement(189)", "Delete SimpleName: intro(190)", "Delete NullLiteral(191)", "Delete InfixExpression: ==(192)", "Delete SimpleName: intro(193)", "Delete SimpleName: IntrospectorBase(194)", "Delete SimpleType: IntrospectorBase(195)", "Delete SimpleName: rlog(196)", "Delete ClassInstanceCreation(197)", "Delete Assignment: =(198)", "Delete ExpressionStatement(199)", "Delete SimpleName: ref(200)", "Delete SimpleName: SoftReference(201)", "Delete SimpleType: SoftReference(202)", "Delete SimpleName: IntrospectorBase(203)", "Delete SimpleType: IntrospectorBase(204)", "Delete ParameterizedType: SoftReference<IntrospectorBase>(205)", "Delete SimpleName: intro(206)", "Delete ClassInstanceCreation(207)", "Delete Assignment: =(208)", "Delete ExpressionStatement(209)", "Delete Block(210)", "Delete IfStatement(211)", "Delete Block(212)", "Delete SynchronizedStatement(213)", "Delete Block(214)", "Delete IfStatement(215)", "Delete SimpleName: intro(216)", "Delete ReturnStatement(217)", "Delete Block(218)", "Delete MethodDeclaration(219)", "Delete TextElement: Sets the underlying class loader for class solving resolution.(220)", "Delete TagElement(221)", "Delete SimpleName: loader(222)", "Delete TextElement:  the loader to use(223)", "Delete TagElement: @param(224)", "Delete Javadoc(225)", "Delete Modifier: public(226)", "Delete PrimitiveType: void(227)", "Delete SimpleName: setClassLoader(228)", "Delete SimpleName: ClassLoader(229)", "Delete SimpleType: ClassLoader(230)", "Delete SimpleName: loader(231)", "Delete SingleVariableDeclaration(232)", "Delete SimpleName: base(233)", "Delete MethodInvocation(234)", "Delete SimpleName: setLoader(235)", "Delete SimpleName: loader(236)", "Delete MethodInvocation(237)", "Delete ExpressionStatement(238)", "Delete Block(239)", "Delete MethodDeclaration(240)", "Delete TextElement: Gets a class by name through this introspector class loader.(241)", "Delete TagElement(242)", "Delete SimpleName: className(243)", "Delete TextElement:  the class name(244)", "Delete TagElement: @param(245)", "Delete TextElement:  the class instance or null if it could not be found(246)", "Delete TagElement: @return(247)", "Delete Javadoc(248)", "Delete Modifier: public(249)", "Delete SimpleName: Class(250)", "Delete SimpleType: Class(251)", "Delete WildcardType: ?(252)", "Delete ParameterizedType: Class<?>(253)", "Delete SimpleName: getClassByName(254)", "Delete SimpleName: String(255)", "Delete SimpleType: String(256)", "Delete SimpleName: className(257)", "Delete SingleVariableDeclaration(258)", "Delete SimpleName: base(259)", "Delete MethodInvocation(260)", "Delete SimpleName: getClassByName(261)", "Delete SimpleName: className(262)", "Delete MethodInvocation(263)", "Delete ReturnStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TextElement: Gets the field named by <code>key</code> for the class <code>c</code>.(267)", "Delete TagElement(268)", "Delete SimpleName: c(269)", "Delete TextElement:      Class in which the field search is taking place(270)", "Delete TagElement: @param(271)", "Delete SimpleName: key(272)", "Delete TextElement:    Name of the field being searched for(273)", "Delete TagElement: @param(274)", "Delete TextElement:  a (275)", "Delete QualifiedName: java.lang.reflect.Field(276)", "Delete TagElement: @link(277)", "Delete TextElement:  or null if it does not exist or is not accessible(278)", "Delete TagElement: @return(279)", "Delete Javadoc(280)", "Delete Modifier: public(281)", "Delete Modifier: final(282)", "Delete SimpleName: Field(283)", "Delete SimpleType: Field(284)", "Delete SimpleName: getField(285)", "Delete SimpleName: Class(286)", "Delete SimpleType: Class(287)", "Delete WildcardType: ?(288)", "Delete ParameterizedType: Class<?>(289)", "Delete SimpleName: c(290)", "Delete SingleVariableDeclaration(291)", "Delete SimpleName: String(292)", "Delete SimpleType: String(293)", "Delete SimpleName: key(294)", "Delete SingleVariableDeclaration(295)", "Delete SimpleName: base(296)", "Delete MethodInvocation(297)", "Delete SimpleName: getField(298)", "Delete SimpleName: c(299)", "Delete SimpleName: key(300)", "Delete MethodInvocation(301)", "Delete ReturnStatement(302)", "Delete Block(303)", "Delete MethodDeclaration(304)", "Delete TextElement: Gets the accessible field names known for a given class.(305)", "Delete TagElement(306)", "Delete SimpleName: c(307)", "Delete TextElement:  the class(308)", "Delete TagElement: @param(309)", "Delete TextElement:  the class field names(310)", "Delete TagElement: @return(311)", "Delete Javadoc(312)", "Delete Modifier: public(313)", "Delete Modifier: final(314)", "Delete SimpleName: String(315)", "Delete SimpleType: String(316)", "Delete Dimension(317)", "Delete ArrayType: String[](318)", "Delete SimpleName: getFieldNames(319)", "Delete SimpleName: Class(320)", "Delete SimpleType: Class(321)", "Delete WildcardType: ?(322)", "Delete ParameterizedType: Class<?>(323)", "Delete SimpleName: c(324)", "Delete SingleVariableDeclaration(325)", "Delete SimpleName: base(326)", "Delete MethodInvocation(327)", "Delete SimpleName: getFieldNames(328)", "Delete SimpleName: c(329)", "Delete MethodInvocation(330)", "Delete ReturnStatement(331)", "Delete Block(332)", "Delete MethodDeclaration(333)", "Delete TextElement: Gets the method defined by <code>name</code> and(334)", "Delete TextElement: <code>params</code> for the Class <code>c</code>.(335)", "Delete TagElement(336)", "Delete SimpleName: c(337)", "Delete TextElement:  Class in which the method search is taking place(338)", "Delete TagElement: @param(339)", "Delete SimpleName: name(340)", "Delete TextElement:  Name of the method being searched for(341)", "Delete TagElement: @param(342)", "Delete SimpleName: params(343)", "Delete TextElement:  An array of Objects (not Classes) that describe the(344)", "Delete TextElement: the parameters(345)", "Delete TagElement: @param(346)", "Delete TextElement:  a (347)", "Delete QualifiedName: java.lang.reflect.Method(348)", "Delete TagElement: @link(349)", "Delete TextElement: or null if no unambiguous method could be found through introspection.(350)", "Delete TagElement: @return(351)", "Delete Javadoc(352)", "Delete Modifier: public(353)", "Delete Modifier: final(354)", "Delete SimpleName: Method(355)", "Delete SimpleType: Method(356)", "Delete SimpleName: getMethod(357)", "Delete SimpleName: Class(358)", "Delete SimpleType: Class(359)", "Delete WildcardType: ?(360)", "Delete ParameterizedType: Class<?>(361)", "Delete SimpleName: c(362)", "Delete SingleVariableDeclaration(363)", "Delete SimpleName: String(364)", "Delete SimpleType: String(365)", "Delete SimpleName: name(366)", "Delete SingleVariableDeclaration(367)", "Delete SimpleName: Object(368)", "Delete SimpleType: Object(369)", "Delete Dimension(370)", "Delete ArrayType: Object[](371)", "Delete SimpleName: params(372)", "Delete SingleVariableDeclaration(373)", "Delete SimpleName: base(374)", "Delete MethodInvocation(375)", "Delete SimpleName: getMethod(376)", "Delete SimpleName: c(377)", "Delete SimpleName: MethodKey(378)", "Delete SimpleType: MethodKey(379)", "Delete SimpleName: name(380)", "Delete SimpleName: params(381)", "Delete ClassInstanceCreation(382)", "Delete MethodInvocation(383)", "Delete ReturnStatement(384)", "Delete Block(385)", "Delete MethodDeclaration(386)", "Delete TextElement: Gets the method defined by <code>key</code> and for the Class <code>c</code>.(387)", "Delete TagElement(388)", "Delete SimpleName: c(389)", "Delete TextElement:  Class in which the method search is taking place(390)", "Delete TagElement: @param(391)", "Delete SimpleName: key(392)", "Delete TextElement:  MethodKey of the method being searched for(393)", "Delete TagElement: @param(394)", "Delete TextElement:  a (395)", "Delete QualifiedName: java.lang.reflect.Method(396)", "Delete TagElement: @link(397)", "Delete TextElement: or null if no unambiguous method could be found through introspection.(398)", "Delete TagElement: @return(399)", "Delete Javadoc(400)", "Delete Modifier: public(401)", "Delete Modifier: final(402)", "Delete SimpleName: Method(403)", "Delete SimpleType: Method(404)", "Delete SimpleName: getMethod(405)", "Delete SimpleName: Class(406)", "Delete SimpleType: Class(407)", "Delete WildcardType: ?(408)", "Delete ParameterizedType: Class<?>(409)", "Delete SimpleName: c(410)", "Delete SingleVariableDeclaration(411)", "Delete SimpleName: MethodKey(412)", "Delete SimpleType: MethodKey(413)", "Delete SimpleName: key(414)", "Delete SingleVariableDeclaration(415)", "Delete SimpleName: base(416)", "Delete MethodInvocation(417)", "Delete SimpleName: getMethod(418)", "Delete SimpleName: c(419)", "Delete SimpleName: key(420)", "Delete MethodInvocation(421)", "Delete ReturnStatement(422)", "Delete Block(423)", "Delete MethodDeclaration(424)", "Delete TextElement: Gets the accessible methods names known for a given class.(425)", "Delete TagElement(426)", "Delete SimpleName: c(427)", "Delete TextElement:  the class(428)", "Delete TagElement: @param(429)", "Delete TextElement:  the class method names(430)", "Delete TagElement: @return(431)", "Delete Javadoc(432)", "Delete Modifier: public(433)", "Delete Modifier: final(434)", "Delete SimpleName: String(435)", "Delete SimpleType: String(436)", "Delete Dimension(437)", "Delete ArrayType: String[](438)", "Delete SimpleName: getMethodNames(439)", "Delete SimpleName: Class(440)", "Delete SimpleType: Class(441)", "Delete WildcardType: ?(442)", "Delete ParameterizedType: Class<?>(443)", "Delete SimpleName: c(444)", "Delete SingleVariableDeclaration(445)", "Delete SimpleName: base(446)", "Delete MethodInvocation(447)", "Delete SimpleName: getMethodNames(448)", "Delete SimpleName: c(449)", "Delete MethodInvocation(450)", "Delete ReturnStatement(451)", "Delete Block(452)", "Delete MethodDeclaration(453)", "Delete TextElement: Gets all the methods with a given name from this map.(454)", "Delete TagElement(455)", "Delete SimpleName: c(456)", "Delete TextElement:  the class(457)", "Delete TagElement: @param(458)", "Delete SimpleName: methodName(459)", "Delete TextElement:  the seeked methods name(460)", "Delete TagElement: @param(461)", "Delete TextElement:  the array of methods(462)", "Delete TagElement: @return(463)", "Delete Javadoc(464)", "Delete Modifier: public(465)", "Delete Modifier: final(466)", "Delete SimpleName: Method(467)", "Delete SimpleType: Method(468)", "Delete Dimension(469)", "Delete ArrayType: Method[](470)", "Delete SimpleName: getMethods(471)", "Delete SimpleName: Class(472)", "Delete SimpleType: Class(473)", "Delete WildcardType: ?(474)", "Delete ParameterizedType: Class<?>(475)", "Delete SimpleName: c(476)", "Delete SingleVariableDeclaration(477)", "Delete Modifier: final(478)", "Delete SimpleName: String(479)", "Delete SimpleType: String(480)", "Delete SimpleName: methodName(481)", "Delete SingleVariableDeclaration(482)", "Delete SimpleName: base(483)", "Delete MethodInvocation(484)", "Delete SimpleName: getMethods(485)", "Delete SimpleName: c(486)", "Delete SimpleName: methodName(487)", "Delete MethodInvocation(488)", "Delete ReturnStatement(489)", "Delete Block(490)", "Delete MethodDeclaration(491)", "Delete TextElement: Returns a general constructor.(492)", "Delete TagElement(493)", "Delete SimpleName: ctorHandle(494)", "Delete TextElement:  the object(495)", "Delete TagElement: @param(496)", "Delete SimpleName: args(497)", "Delete TextElement:  contructor arguments(498)", "Delete TagElement: @param(499)", "Delete TextElement:  a (500)", "Delete QualifiedName: java.lang.reflect.Constructor(501)", "Delete TagElement: @link(502)", "Delete TextElement: or null if no unambiguous contructor could be found through introspection.(503)", "Delete TagElement: @return(504)", "Delete Javadoc(505)", "Delete Modifier: public(506)", "Delete Modifier: final(507)", "Delete SimpleName: Constructor(508)", "Delete SimpleType: Constructor(509)", "Delete WildcardType: ?(510)", "Delete ParameterizedType: Constructor<?>(511)", "Delete SimpleName: getConstructor(512)", "Delete SimpleName: Object(513)", "Delete SimpleType: Object(514)", "Delete SimpleName: ctorHandle(515)", "Delete SingleVariableDeclaration(516)", "Delete SimpleName: Object(517)", "Delete SimpleType: Object(518)", "Delete Dimension(519)", "Delete ArrayType: Object[](520)", "Delete SimpleName: args(521)", "Delete SingleVariableDeclaration(522)", "Delete SimpleName: String(523)", "Delete SimpleType: String(524)", "Delete SimpleName: className(525)", "Delete NullLiteral(526)", "Delete VariableDeclarationFragment(527)", "Delete VariableDeclarationStatement(528)", "Delete SimpleName: Class(529)", "Delete SimpleType: Class(530)", "Delete WildcardType: ?(531)", "Delete ParameterizedType: Class<?>(532)", "Delete SimpleName: clazz(533)", "Delete NullLiteral(534)", "Delete VariableDeclarationFragment(535)", "Delete VariableDeclarationStatement(536)", "Delete SimpleName: ctorHandle(537)", "Delete SimpleName: Class(538)", "Delete SimpleType: Class(539)", "Delete WildcardType: ?(540)", "Delete ParameterizedType: Class<?>(541)", "Delete InstanceofExpression(542)", "Delete SimpleName: clazz(543)", "Delete SimpleName: Class(544)", "Delete SimpleType: Class(545)", "Delete WildcardType: ?(546)", "Delete ParameterizedType: Class<?>(547)", "Delete SimpleName: ctorHandle(548)", "Delete CastExpression(549)", "Delete Assignment: =(550)", "Delete ExpressionStatement(551)", "Delete SimpleName: className(552)", "Delete SimpleName: clazz(553)", "Delete SimpleName: getName(554)", "Delete MethodInvocation(555)", "Delete Assignment: =(556)", "Delete ExpressionStatement(557)", "Delete Block(558)", "Delete SimpleName: ctorHandle(559)", "Delete NullLiteral(560)", "Delete InfixExpression: !=(561)", "Delete SimpleName: className(562)", "Delete SimpleName: ctorHandle(563)", "Delete SimpleName: toString(564)", "Delete MethodInvocation(565)", "Delete Assignment: =(566)", "Delete ExpressionStatement(567)", "Delete Block(568)", "Delete NullLiteral(569)", "Delete ReturnStatement(570)", "Delete Block(571)", "Delete IfStatement(572)", "Delete IfStatement(573)", "Delete SimpleName: base(574)", "Delete MethodInvocation(575)", "Delete SimpleName: getConstructor(576)", "Delete SimpleName: clazz(577)", "Delete SimpleName: MethodKey(578)", "Delete SimpleType: MethodKey(579)", "Delete SimpleName: className(580)", "Delete SimpleName: args(581)", "Delete ClassInstanceCreation(582)", "Delete MethodInvocation(583)", "Delete ReturnStatement(584)", "Delete Block(585)", "Delete MethodDeclaration(586)", "Delete TextElement: Returns a general method.(587)", "Delete TagElement(588)", "Delete SimpleName: obj(589)", "Delete TextElement:  the object(590)", "Delete TagElement: @param(591)", "Delete SimpleName: name(592)", "Delete TextElement:  the method name(593)", "Delete TagElement: @param(594)", "Delete SimpleName: args(595)", "Delete TextElement:  method arguments(596)", "Delete TagElement: @param(597)", "Delete TextElement:  a (598)", "Delete QualifiedName: AbstractExecutor.Method(599)", "Delete TagElement: @link(600)", "Delete TextElement: .(601)", "Delete TagElement: @return(602)", "Delete Javadoc(603)", "Delete Modifier: public(604)", "Delete Modifier: final(605)", "Delete QualifiedName: AbstractExecutor.Method(606)", "Delete SimpleType: AbstractExecutor.Method(607)", "Delete SimpleName: getMethodExecutor(608)", "Delete SimpleName: Object(609)", "Delete SimpleType: Object(610)", "Delete SimpleName: obj(611)", "Delete SingleVariableDeclaration(612)", "Delete SimpleName: String(613)", "Delete SimpleType: String(614)", "Delete SimpleName: name(615)", "Delete SingleVariableDeclaration(616)", "Delete SimpleName: Object(617)", "Delete SimpleType: Object(618)", "Delete Dimension(619)", "Delete ArrayType: Object[](620)", "Delete SimpleName: args(621)", "Delete SingleVariableDeclaration(622)", "Delete QualifiedName: AbstractExecutor.Method(623)", "Delete SimpleType: AbstractExecutor.Method(624)", "Delete SimpleName: me(625)", "Delete SimpleName: MethodExecutor(626)", "Delete SimpleType: MethodExecutor(627)", "Delete ThisExpression(628)", "Delete SimpleName: obj(629)", "Delete SimpleName: name(630)", "Delete SimpleName: args(631)", "Delete ClassInstanceCreation(632)", "Delete VariableDeclarationFragment(633)", "Delete VariableDeclarationStatement(634)", "Delete SimpleName: me(635)", "Delete SimpleName: isAlive(636)", "Delete MethodInvocation(637)", "Delete SimpleName: me(638)", "Delete NullLiteral(639)", "Delete ConditionalExpression(640)", "Delete ReturnStatement(641)", "Delete Block(642)", "Delete MethodDeclaration(643)", "Delete TextElement: Return a property getter.(644)", "Delete TagElement(645)", "Delete SimpleName: obj(646)", "Delete TextElement:  the object to base the property from.(647)", "Delete TagElement: @param(648)", "Delete SimpleName: identifier(649)", "Delete TextElement:  property name(650)", "Delete TagElement: @param(651)", "Delete TextElement:  a (652)", "Delete QualifiedName: AbstractExecutor.Get(653)", "Delete TagElement: @link(654)", "Delete TextElement: .(655)", "Delete TagElement: @return(656)", "Delete Javadoc(657)", "Delete Modifier: public(658)", "Delete Modifier: final(659)", "Delete QualifiedName: AbstractExecutor.Get(660)", "Delete SimpleType: AbstractExecutor.Get(661)", "Delete SimpleName: getGetExecutor(662)", "Delete SimpleName: Object(663)", "Delete SimpleType: Object(664)", "Delete SimpleName: obj(665)", "Delete SingleVariableDeclaration(666)", "Delete SimpleName: Object(667)", "Delete SimpleType: Object(668)", "Delete SimpleName: identifier(669)", "Delete SingleVariableDeclaration(670)", "Delete Modifier: final(671)", "Delete SimpleName: Class(672)", "Delete SimpleType: Class(673)", "Delete WildcardType: ?(674)", "Delete ParameterizedType: Class<?>(675)", "Delete SimpleName: claz(676)", "Delete SimpleName: obj(677)", "Delete SimpleName: getClass(678)", "Delete MethodInvocation(679)", "Delete VariableDeclarationFragment(680)", "Delete VariableDeclarationStatement(681)", "Delete Modifier: final(682)", "Delete SimpleName: String(683)", "Delete SimpleType: String(684)", "Delete SimpleName: property(685)", "Delete SimpleName: toString(686)", "Delete SimpleName: identifier(687)", "Delete MethodInvocation(688)", "Delete VariableDeclarationFragment(689)", "Delete VariableDeclarationStatement(690)", "Delete QualifiedName: AbstractExecutor.Get(691)", "Delete SimpleType: AbstractExecutor.Get(692)", "Delete SimpleName: executor(693)", "Delete VariableDeclarationFragment(694)", "Delete VariableDeclarationStatement(695)", "Delete SimpleName: property(696)", "Delete NullLiteral(697)", "Delete InfixExpression: !=(698)", "Delete SimpleName: executor(699)", "Delete SimpleName: PropertyGetExecutor(700)", "Delete SimpleType: PropertyGetExecutor(701)", "Delete ThisExpression(702)", "Delete SimpleName: claz(703)", "Delete SimpleName: property(704)", "Delete ClassInstanceCreation(705)", "Delete Assignment: =(706)", "Delete ExpressionStatement(707)", "Delete SimpleName: executor(708)", "Delete SimpleName: isAlive(709)", "Delete MethodInvocation(710)", "Delete SimpleName: executor(711)", "Delete ReturnStatement(712)", "Delete Block(713)", "Delete IfStatement(714)", "Delete SimpleName: executor(715)", "Delete SimpleName: BooleanGetExecutor(716)", "Delete SimpleType: BooleanGetExecutor(717)", "Delete ThisExpression(718)", "Delete SimpleName: claz(719)", "Delete SimpleName: property(720)", "Delete ClassInstanceCreation(721)", "Delete Assignment: =(722)", "Delete ExpressionStatement(723)", "Delete SimpleName: executor(724)", "Delete SimpleName: isAlive(725)", "Delete MethodInvocation(726)", "Delete SimpleName: executor(727)", "Delete ReturnStatement(728)", "Delete Block(729)", "Delete IfStatement(730)", "Delete Block(731)", "Delete IfStatement(732)", "Delete SimpleName: executor(733)", "Delete SimpleName: MapGetExecutor(734)", "Delete SimpleType: MapGetExecutor(735)", "Delete ThisExpression(736)", "Delete SimpleName: claz(737)", "Delete SimpleName: identifier(738)", "Delete ClassInstanceCreation(739)", "Delete Assignment: =(740)", "Delete ExpressionStatement(741)", "Delete SimpleName: executor(742)", "Delete SimpleName: isAlive(743)", "Delete MethodInvocation(744)", "Delete SimpleName: executor(745)", "Delete ReturnStatement(746)", "Delete Block(747)", "Delete IfStatement(748)", "Delete SimpleName: Integer(749)", "Delete SimpleType: Integer(750)", "Delete SimpleName: index(751)", "Delete SimpleName: toInteger(752)", "Delete SimpleName: identifier(753)", "Delete MethodInvocation(754)", "Delete VariableDeclarationFragment(755)", "Delete VariableDeclarationStatement(756)", "Delete SimpleName: index(757)", "Delete NullLiteral(758)", "Delete InfixExpression: !=(759)", "Delete SimpleName: executor(760)", "Delete SimpleName: ListGetExecutor(761)", "Delete SimpleType: ListGetExecutor(762)", "Delete ThisExpression(763)", "Delete SimpleName: claz(764)", "Delete SimpleName: index(765)", "Delete ClassInstanceCreation(766)", "Delete Assignment: =(767)", "Delete ExpressionStatement(768)", "Delete SimpleName: executor(769)", "Delete SimpleName: isAlive(770)", "Delete MethodInvocation(771)", "Delete SimpleName: executor(772)", "Delete ReturnStatement(773)", "Delete Block(774)", "Delete IfStatement(775)", "Delete Block(776)", "Delete IfStatement(777)", "Delete SimpleName: executor(778)", "Delete SimpleName: DuckGetExecutor(779)", "Delete SimpleType: DuckGetExecutor(780)", "Delete ThisExpression(781)", "Delete SimpleName: claz(782)", "Delete SimpleName: identifier(783)", "Delete ClassInstanceCreation(784)", "Delete Assignment: =(785)", "Delete ExpressionStatement(786)", "Delete SimpleName: executor(787)", "Delete SimpleName: isAlive(788)", "Delete MethodInvocation(789)", "Delete SimpleName: executor(790)", "Delete ReturnStatement(791)", "Delete Block(792)", "Delete IfStatement(793)", "Delete SimpleName: executor(794)", "Delete SimpleName: DuckGetExecutor(795)", "Delete SimpleType: DuckGetExecutor(796)", "Delete ThisExpression(797)", "Delete SimpleName: claz(798)", "Delete SimpleName: property(799)", "Delete ClassInstanceCreation(800)", "Delete Assignment: =(801)", "Delete ExpressionStatement(802)", "Delete SimpleName: executor(803)", "Delete SimpleName: isAlive(804)", "Delete MethodInvocation(805)", "Delete SimpleName: executor(806)", "Delete ReturnStatement(807)", "Delete Block(808)", "Delete IfStatement(809)", "Delete NullLiteral(810)", "Delete ReturnStatement(811)", "Delete Block(812)", "Delete MethodDeclaration(813)", "Delete TextElement: Return a property setter.(814)", "Delete TagElement(815)", "Delete SimpleName: obj(816)", "Delete TextElement:  the object to base the property from.(817)", "Delete TagElement: @param(818)", "Delete SimpleName: identifier(819)", "Delete TextElement:  property name (or identifier)(820)", "Delete TagElement: @param(821)", "Delete SimpleName: arg(822)", "Delete TextElement:  value to set(823)", "Delete TagElement: @param(824)", "Delete TextElement:  a (825)", "Delete QualifiedName: AbstractExecutor.Set(826)", "Delete TagElement: @link(827)", "Delete TextElement: .(828)", "Delete TagElement: @return(829)", "Delete Javadoc(830)", "Delete Modifier: public(831)", "Delete Modifier: final(832)", "Delete QualifiedName: AbstractExecutor.Set(833)", "Delete SimpleType: AbstractExecutor.Set(834)", "Delete SimpleName: getSetExecutor(835)", "Delete Modifier: final(836)", "Delete SimpleName: Object(837)", "Delete SimpleType: Object(838)", "Delete SimpleName: obj(839)", "Delete SingleVariableDeclaration(840)", "Delete Modifier: final(841)", "Delete SimpleName: Object(842)", "Delete SimpleType: Object(843)", "Delete SimpleName: identifier(844)", "Delete SingleVariableDeclaration(845)", "Delete SimpleName: Object(846)", "Delete SimpleType: Object(847)", "Delete SimpleName: arg(848)", "Delete SingleVariableDeclaration(849)", "Delete Modifier: final(850)", "Delete SimpleName: Class(851)", "Delete SimpleType: Class(852)", "Delete WildcardType: ?(853)", "Delete ParameterizedType: Class<?>(854)", "Delete SimpleName: claz(855)", "Delete SimpleName: obj(856)", "Delete SimpleName: getClass(857)", "Delete MethodInvocation(858)", "Delete VariableDeclarationFragment(859)", "Delete VariableDeclarationStatement(860)", "Delete Modifier: final(861)", "Delete SimpleName: String(862)", "Delete SimpleType: String(863)", "Delete SimpleName: property(864)", "Delete SimpleName: toString(865)", "Delete SimpleName: identifier(866)", "Delete MethodInvocation(867)", "Delete VariableDeclarationFragment(868)", "Delete VariableDeclarationStatement(869)", "Delete QualifiedName: AbstractExecutor.Set(870)", "Delete SimpleType: AbstractExecutor.Set(871)", "Delete SimpleName: executor(872)", "Delete VariableDeclarationFragment(873)", "Delete VariableDeclarationStatement(874)", "Delete SimpleName: property(875)", "Delete NullLiteral(876)", "Delete InfixExpression: !=(877)", "Delete SimpleName: executor(878)", "Delete SimpleName: PropertySetExecutor(879)", "Delete SimpleType: PropertySetExecutor(880)", "Delete ThisExpression(881)", "Delete SimpleName: claz(882)", "Delete SimpleName: property(883)", "Delete SimpleName: arg(884)", "Delete ClassInstanceCreation(885)", "Delete Assignment: =(886)", "Delete ExpressionStatement(887)", "Delete SimpleName: executor(888)", "Delete SimpleName: isAlive(889)", "Delete MethodInvocation(890)", "Delete SimpleName: executor(891)", "Delete ReturnStatement(892)", "Delete Block(893)", "Delete IfStatement(894)", "Delete Block(895)", "Delete IfStatement(896)", "Delete SimpleName: executor(897)", "Delete SimpleName: MapSetExecutor(898)", "Delete SimpleType: MapSetExecutor(899)", "Delete ThisExpression(900)", "Delete SimpleName: claz(901)", "Delete SimpleName: identifier(902)", "Delete SimpleName: arg(903)", "Delete ClassInstanceCreation(904)", "Delete Assignment: =(905)", "Delete ExpressionStatement(906)", "Delete SimpleName: executor(907)", "Delete SimpleName: isAlive(908)", "Delete MethodInvocation(909)", "Delete SimpleName: executor(910)", "Delete ReturnStatement(911)", "Delete Block(912)", "Delete IfStatement(913)", "Delete SimpleName: Integer(914)", "Delete SimpleType: Integer(915)", "Delete SimpleName: index(916)", "Delete SimpleName: toInteger(917)", "Delete SimpleName: identifier(918)", "Delete MethodInvocation(919)", "Delete VariableDeclarationFragment(920)", "Delete VariableDeclarationStatement(921)", "Delete SimpleName: index(922)", "Delete NullLiteral(923)", "Delete InfixExpression: !=(924)", "Delete SimpleName: executor(925)", "Delete SimpleName: ListSetExecutor(926)", "Delete SimpleType: ListSetExecutor(927)", "Delete ThisExpression(928)", "Delete SimpleName: claz(929)", "Delete SimpleName: index(930)", "Delete SimpleName: arg(931)", "Delete ClassInstanceCreation(932)", "Delete Assignment: =(933)", "Delete ExpressionStatement(934)", "Delete SimpleName: executor(935)", "Delete SimpleName: isAlive(936)", "Delete MethodInvocation(937)", "Delete SimpleName: executor(938)", "Delete ReturnStatement(939)", "Delete Block(940)", "Delete IfStatement(941)", "Delete Block(942)", "Delete IfStatement(943)", "Delete SimpleName: executor(944)", "Delete SimpleName: DuckSetExecutor(945)", "Delete SimpleType: DuckSetExecutor(946)", "Delete ThisExpression(947)", "Delete SimpleName: claz(948)", "Delete SimpleName: identifier(949)", "Delete SimpleName: arg(950)", "Delete ClassInstanceCreation(951)", "Delete Assignment: =(952)", "Delete ExpressionStatement(953)", "Delete SimpleName: executor(954)", "Delete SimpleName: isAlive(955)", "Delete MethodInvocation(956)", "Delete SimpleName: executor(957)", "Delete ReturnStatement(958)", "Delete Block(959)", "Delete IfStatement(960)", "Delete SimpleName: executor(961)", "Delete SimpleName: DuckSetExecutor(962)", "Delete SimpleType: DuckSetExecutor(963)", "Delete ThisExpression(964)", "Delete SimpleName: claz(965)", "Delete SimpleName: property(966)", "Delete SimpleName: arg(967)", "Delete ClassInstanceCreation(968)", "Delete Assignment: =(969)", "Delete ExpressionStatement(970)", "Delete SimpleName: executor(971)", "Delete SimpleName: isAlive(972)", "Delete MethodInvocation(973)", "Delete SimpleName: executor(974)", "Delete ReturnStatement(975)", "Delete Block(976)", "Delete IfStatement(977)", "Delete NullLiteral(978)", "Delete ReturnStatement(979)", "Delete Block(980)", "Delete MethodDeclaration(981)", "Delete TypeDeclaration: class(982)"]}}, {"ListGetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Array", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL Block", "DEL SimpleName: get", "DEL TagElement: @param", "DEL Block", "DEL Block", "DEL MarkerAnnotation", "DEL SimpleType: List", "DEL ParenthesizedExpression", "DEL SimpleName: is", "DEL SimpleName: key", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL TextElement: The java.lang.reflect.Array.get method used as an active marker in ListGet. ", "DEL SimpleName: obj", "DEL QualifiedName: Integer.TYPE", "DEL TextElement:  the class to introspect", "DEL Block", "DEL IfStatement", "DEL TagElement: @inheritDoc", "DEL CastExpression", "DEL QualifiedName: Integer.TYPE", "DEL Modifier: private", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL TextElement:  the List/array.", "DEL InfixExpression: &&", "DEL InfixExpression: &&", "DEL SimpleName: Object", "DEL TextElement:  ", "DEL NullLiteral", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: obj", "DEL QualifiedName: AbstractExecutor.Get", "DEL SimpleName: LIST_GET", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: Override", "DEL Modifier: static", "DEL SimpleName: property", "DEL MethodInvocation", "DEL SimpleName: property", "DEL TagElement: @inheritDoc", "DEL Modifier: final", "DEL SimpleName: ListGetExecutor", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL TypeLiteral", "DEL SimpleName: TRY_FAILED", "DEL QualifiedName: java.lang.reflect.Method", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL TextElement: Specialized executor to get a property from a List or array.", "DEL SimpleType: AbstractExecutor.Get", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL SimpleName: method", "DEL WildcardType: ?", "DEL NullLiteral", "DEL ParenthesizedExpression", "DEL CastExpression", "DEL SimpleName: clazz", "DEL TextElement:  2.0", "DEL ParameterizedType: List<?>", "DEL SimpleName: Integer", "DEL SimpleName: obj", "DEL SimpleName: clazz", "DEL SimpleType: List", "DEL SimpleName: List", "DEL NullLiteral", "DEL SimpleName: key", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ListGetExecutor", "DEL MethodInvocation", "DEL SimpleName: property", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: initMarker", "DEL ParameterizedType: Class<?>", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: Array", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: key", "DEL SimpleName: property", "DEL Block", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL TextElement: Creates an instance checking for the List interface or Array capability.", "DEL MethodInvocation", "DEL Modifier: final", "DEL TagElement: @param", "DEL SimpleName: isAssignableFrom", "DEL SimpleName: LIST_GET", "DEL IfStatement", "DEL InstanceofExpression", "DEL SimpleName: Integer", "DEL SimpleName: intValue", "DEL WildcardType: ?", "DEL TextElement:  the introspector", "DEL SimpleType: Integer", "DEL TypeLiteral", "DEL SimpleName: Integer", "DEL SimpleName: obj", "DEL SimpleType: java.lang.reflect.Method", "DEL TagElement", "DEL SimpleName: objectClass", "DEL SimpleName: clazz", "DEL SimpleName: obj", "DEL TagElement: @param", "DEL Modifier: public", "DEL TextElement:  the key to use in obj.get(key)", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL TextElement:  the class to introspect", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL TextElement: Finds the method to perform the get on a obj of array.", "DEL Modifier: private", "DEL InfixExpression: ==", "DEL SimpleName: discover", "DEL SingleVariableDeclaration", "DEL SimpleName: tryExecute", "DEL TypeLiteral", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL ParenthesizedExpression", "DEL TagElement: @since", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: initMarker", "DEL SimpleName: key", "DEL QualifiedName: java.lang.reflect.Array", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: ARRAY_GET", "DEL ParameterizedType: Class<?>", "DEL SimpleName: getTargetProperty", "DEL SimpleName: equals", "DEL SimpleName: key", "DEL SimpleName: List", "DEL SimpleName: intValue", "DEL TagElement: @param", "DEL QualifiedName: java.lang.reflect.Array", "DEL Modifier: final", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleName: isArray", "DEL Block", "DEL SimpleName: Class", "DEL Javadoc", "DEL TextElement:  a marker method, obj.get or array.get", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: clazz", "DEL SimpleType: Integer", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL TextElement:  obj.get(key)", "DEL Modifier: public", "DEL TypeLiteral", "DEL SimpleName: property", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: is", "DEL SimpleName: Introspector", "DEL ReturnStatement", "DEL SimpleName: clazz", "DEL TagElement", "DEL TypeDeclaration: class", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: get", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL SimpleName: getClass", "DEL TagElement", "DEL ParameterizedType: List<?>", "DEL SimpleName: ARRAY_GET", "DEL SimpleType: Object", "DEL InfixExpression: ==", "DEL SimpleName: execute", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: Integer", "DEL Javadoc", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL SimpleName: method", "DEL SimpleName: obj", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL CastExpression", "DEL SimpleName: ARRAY_GET", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Modifier: public", "DEL TagElement: @return", "DEL Assignment: =", "DEL SimpleType: Object", "DEL Modifier: public", "DEL SimpleType: Integer", "DEL MethodDeclaration", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Object", "DEL StringLiteral: \"get\"", "DEL TextElement: The property. ", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL SimpleName: discover", "DEL TagElement", "DEL TextElement: Get the property from the obj or array.", "DEL Modifier: private", "DEL SimpleName: Array", "DEL SimpleName: key", "DEL SimpleName: Integer", "DEL SimpleName: Class", "DEL SimpleName: intValue", "DEL SimpleType: Introspector", "DEL CastExpression", "DEL SimpleType: Class", "DEL SimpleName: intValue", "DEL InfixExpression: !=", "DEL SimpleName: key", "DEL SuperConstructorInvocation", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: List", "DEL SimpleType: Object", "DEL QualifiedName: java.lang.reflect.Method", "DEL TagElement", "DEL SimpleName: List", "DEL TextElement:  ", "DEL FieldDeclaration", "DEL SimpleName: Override", "DEL IfStatement", "DEL StringLiteral: \"get\"", "DEL Modifier: final", "DEL SimpleType: Integer", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleType: java.lang.reflect.Method", "DEL Modifier: static", "DEL Javadoc", "DEL TextElement: The java.util.obj.get method used as an active marker in ListGet. ", "DEL SimpleName: ARRAY_GET", "DEL Block", "DEL SimpleType: Object", "DEL MethodDeclaration"]}]}}, {"ListGetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Array(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Specialized executor to get a property from a List or array.(6)", "Delete TagElement(7)", "Delete TextElement:  2.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete Modifier: final(12)", "Delete SimpleName: ListGetExecutor(13)", "Delete QualifiedName: AbstractExecutor.Get(14)", "Delete SimpleType: AbstractExecutor.Get(15)", "Delete TextElement: The java.lang.reflect.Array.get method used as an active marker in ListGet. (16)", "Delete TagElement(17)", "Delete Javadoc(18)", "Delete Modifier: private(19)", "Delete Modifier: static(20)", "Delete Modifier: final(21)", "Delete QualifiedName: java.lang.reflect.Method(22)", "Delete SimpleType: java.lang.reflect.Method(23)", "Delete SimpleName: ARRAY_GET(24)", "Delete SimpleName: initMarker(25)", "Delete SimpleName: Array(26)", "Delete SimpleType: Array(27)", "Delete TypeLiteral(28)", "Delete StringLiteral: \"get\"(29)", "Delete SimpleName: Object(30)", "Delete SimpleType: Object(31)", "Delete TypeLiteral(32)", "Delete QualifiedName: Integer.TYPE(33)", "Delete MethodInvocation(34)", "Delete VariableDeclarationFragment(35)", "Delete FieldDeclaration(36)", "Delete TextElement: The java.util.obj.get method used as an active marker in ListGet. (37)", "Delete TagElement(38)", "Delete Javadoc(39)", "Delete Modifier: private(40)", "Delete Modifier: static(41)", "Delete Modifier: final(42)", "Delete QualifiedName: java.lang.reflect.Method(43)", "Delete SimpleType: java.lang.reflect.Method(44)", "Delete SimpleName: LIST_GET(45)", "Delete SimpleName: initMarker(46)", "Delete SimpleName: List(47)", "Delete SimpleType: List(48)", "Delete TypeLiteral(49)", "Delete StringLiteral: \"get\"(50)", "Delete QualifiedName: Integer.TYPE(51)", "Delete MethodInvocation(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete TextElement: The property. (55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete Modifier: private(58)", "Delete Modifier: final(59)", "Delete SimpleName: Integer(60)", "Delete SimpleType: Integer(61)", "Delete SimpleName: property(62)", "Delete VariableDeclarationFragment(63)", "Delete FieldDeclaration(64)", "Delete TextElement: Creates an instance checking for the List interface or Array capability.(65)", "Delete TagElement(66)", "Delete SimpleName: is(67)", "Delete TextElement:  the introspector(68)", "Delete TagElement: @param(69)", "Delete SimpleName: clazz(70)", "Delete TextElement:  the class to introspect(71)", "Delete TagElement: @param(72)", "Delete SimpleName: key(73)", "Delete TextElement:  the key to use in obj.get(key)(74)", "Delete TagElement: @param(75)", "Delete Javadoc(76)", "Delete Modifier: public(77)", "Delete SimpleName: ListGetExecutor(78)", "Delete SimpleName: Introspector(79)", "Delete SimpleType: Introspector(80)", "Delete SimpleName: is(81)", "Delete SingleVariableDeclaration(82)", "Delete SimpleName: Class(83)", "Delete SimpleType: Class(84)", "Delete WildcardType: ?(85)", "Delete ParameterizedType: Class<?>(86)", "Delete SimpleName: clazz(87)", "Delete SingleVariableDeclaration(88)", "Delete SimpleName: Integer(89)", "Delete SimpleType: Integer(90)", "Delete SimpleName: key(91)", "Delete SingleVariableDeclaration(92)", "Delete SimpleName: clazz(93)", "Delete SimpleName: discover(94)", "Delete SimpleName: clazz(95)", "Delete MethodInvocation(96)", "Delete SuperConstructorInvocation(97)", "Delete SimpleName: property(98)", "Delete SimpleName: key(99)", "Delete Assignment: =(100)", "Delete ExpressionStatement(101)", "Delete Block(102)", "Delete MethodDeclaration(103)", "Delete TagElement: @inheritDoc(104)", "Delete TextElement:  (105)", "Delete TagElement(106)", "Delete Javadoc(107)", "Delete SimpleName: Override(108)", "Delete MarkerAnnotation(109)", "Delete Modifier: public(110)", "Delete SimpleName: Object(111)", "Delete SimpleType: Object(112)", "Delete SimpleName: getTargetProperty(113)", "Delete SimpleName: property(114)", "Delete ReturnStatement(115)", "Delete Block(116)", "Delete MethodDeclaration(117)", "Delete TextElement: Get the property from the obj or array.(118)", "Delete TagElement(119)", "Delete SimpleName: obj(120)", "Delete TextElement:  the List/array.(121)", "Delete TagElement: @param(122)", "Delete TextElement:  obj.get(key)(123)", "Delete TagElement: @return(124)", "Delete Javadoc(125)", "Delete SimpleName: Override(126)", "Delete MarkerAnnotation(127)", "Delete Modifier: public(128)", "Delete SimpleName: Object(129)", "Delete SimpleType: Object(130)", "Delete SimpleName: execute(131)", "Delete Modifier: final(132)", "Delete SimpleName: Object(133)", "Delete SimpleType: Object(134)", "Delete SimpleName: obj(135)", "Delete SingleVariableDeclaration(136)", "Delete SimpleName: method(137)", "Delete SimpleName: ARRAY_GET(138)", "Delete InfixExpression: ==(139)", "Delete QualifiedName: java.lang.reflect.Array(140)", "Delete SimpleName: get(141)", "Delete SimpleName: obj(142)", "Delete SimpleName: property(143)", "Delete SimpleName: intValue(144)", "Delete MethodInvocation(145)", "Delete MethodInvocation(146)", "Delete ReturnStatement(147)", "Delete Block(148)", "Delete SimpleName: List(149)", "Delete SimpleType: List(150)", "Delete WildcardType: ?(151)", "Delete ParameterizedType: List<?>(152)", "Delete SimpleName: obj(153)", "Delete CastExpression(154)", "Delete ParenthesizedExpression(155)", "Delete SimpleName: get(156)", "Delete SimpleName: property(157)", "Delete SimpleName: intValue(158)", "Delete MethodInvocation(159)", "Delete MethodInvocation(160)", "Delete ReturnStatement(161)", "Delete Block(162)", "Delete IfStatement(163)", "Delete Block(164)", "Delete MethodDeclaration(165)", "Delete TagElement: @inheritDoc(166)", "Delete TextElement:  (167)", "Delete TagElement(168)", "Delete Javadoc(169)", "Delete SimpleName: Override(170)", "Delete MarkerAnnotation(171)", "Delete Modifier: public(172)", "Delete SimpleName: Object(173)", "Delete SimpleType: Object(174)", "Delete SimpleName: tryExecute(175)", "Delete Modifier: final(176)", "Delete SimpleName: Object(177)", "Delete SimpleType: Object(178)", "Delete SimpleName: obj(179)", "Delete SingleVariableDeclaration(180)", "Delete SimpleName: Object(181)", "Delete SimpleType: Object(182)", "Delete SimpleName: key(183)", "Delete SingleVariableDeclaration(184)", "Delete SimpleName: obj(185)", "Delete NullLiteral(186)", "Delete InfixExpression: !=(187)", "Delete SimpleName: method(188)", "Delete NullLiteral(189)", "Delete InfixExpression: !=(190)", "Delete InfixExpression: &&(191)", "Delete SimpleName: objectClass(192)", "Delete SimpleName: equals(193)", "Delete SimpleName: obj(194)", "Delete SimpleName: getClass(195)", "Delete MethodInvocation(196)", "Delete MethodInvocation(197)", "Delete InfixExpression: &&(198)", "Delete SimpleName: key(199)", "Delete SimpleName: Integer(200)", "Delete SimpleType: Integer(201)", "Delete InstanceofExpression(202)", "Delete InfixExpression: &&(203)", "Delete SimpleName: method(204)", "Delete SimpleName: ARRAY_GET(205)", "Delete InfixExpression: ==(206)", "Delete QualifiedName: java.lang.reflect.Array(207)", "Delete SimpleName: get(208)", "Delete SimpleName: obj(209)", "Delete SimpleName: Integer(210)", "Delete SimpleType: Integer(211)", "Delete SimpleName: key(212)", "Delete CastExpression(213)", "Delete ParenthesizedExpression(214)", "Delete SimpleName: intValue(215)", "Delete MethodInvocation(216)", "Delete MethodInvocation(217)", "Delete ReturnStatement(218)", "Delete Block(219)", "Delete SimpleName: List(220)", "Delete SimpleType: List(221)", "Delete WildcardType: ?(222)", "Delete ParameterizedType: List<?>(223)", "Delete SimpleName: obj(224)", "Delete CastExpression(225)", "Delete ParenthesizedExpression(226)", "Delete SimpleName: get(227)", "Delete SimpleName: Integer(228)", "Delete SimpleType: Integer(229)", "Delete SimpleName: key(230)", "Delete CastExpression(231)", "Delete ParenthesizedExpression(232)", "Delete SimpleName: intValue(233)", "Delete MethodInvocation(234)", "Delete MethodInvocation(235)", "Delete ReturnStatement(236)", "Delete Block(237)", "Delete IfStatement(238)", "Delete Block(239)", "Delete IfStatement(240)", "Delete SimpleName: TRY_FAILED(241)", "Delete ReturnStatement(242)", "Delete Block(243)", "Delete MethodDeclaration(244)", "Delete TextElement: Finds the method to perform the get on a obj of array.(245)", "Delete TagElement(246)", "Delete SimpleName: clazz(247)", "Delete TextElement:  the class to introspect(248)", "Delete TagElement: @param(249)", "Delete TextElement:  a marker method, obj.get or array.get(250)", "Delete TagElement: @return(251)", "Delete Javadoc(252)", "Delete Modifier: static(253)", "Delete QualifiedName: java.lang.reflect.Method(254)", "Delete SimpleType: java.lang.reflect.Method(255)", "Delete SimpleName: discover(256)", "Delete SimpleName: Class(257)", "Delete SimpleType: Class(258)", "Delete WildcardType: ?(259)", "Delete ParameterizedType: Class<?>(260)", "Delete SimpleName: clazz(261)", "Delete SingleVariableDeclaration(262)", "Delete SimpleName: clazz(263)", "Delete SimpleName: isArray(264)", "Delete MethodInvocation(265)", "Delete SimpleName: ARRAY_GET(266)", "Delete ReturnStatement(267)", "Delete Block(268)", "Delete IfStatement(269)", "Delete SimpleName: List(270)", "Delete SimpleType: List(271)", "Delete TypeLiteral(272)", "Delete SimpleName: isAssignableFrom(273)", "Delete SimpleName: clazz(274)", "Delete MethodInvocation(275)", "Delete SimpleName: LIST_GET(276)", "Delete ReturnStatement(277)", "Delete Block(278)", "Delete IfStatement(279)", "Delete NullLiteral(280)", "Delete ReturnStatement(281)", "Delete Block(282)", "Delete MethodDeclaration(283)", "Delete TypeDeclaration: class(284)"]}}, {"ListSetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Array", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL SimpleName: value", "DEL SimpleName: Array", "DEL SimpleName: clazz", "DEL InfixExpression: &&", "DEL QualifiedName: java.lang.reflect.Array", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement:  the key to use in obj.set(key,value)", "DEL SimpleType: Integer", "DEL ParameterizedType: Class<?>", "DEL TextElement:  the value to use in obj.set(key,value)", "DEL Modifier: final", "DEL SimpleType: Object", "DEL TextElement:  the introspector", "DEL MethodInvocation", "DEL QualifiedName: AbstractExecutor.Set", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL TextElement: The java.lang.reflect.Array.get method used as an active marker in ListGet. ", "DEL Javadoc", "DEL TypeLiteral", "DEL InfixExpression: !=", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: discover", "DEL SimpleName: Override", "DEL InfixExpression: ==", "DEL ParenthesizedExpression", "DEL QualifiedName: java.lang.reflect.Method", "DEL TagElement", "DEL SimpleName: intValue", "DEL TagElement", "DEL SimpleType: Object", "DEL InstanceofExpression", "DEL SimpleName: TRY_FAILED", "DEL TextElement:  a marker method, obj.set or array.set", "DEL SimpleName: method", "DEL TagElement: @since", "DEL SuperConstructorInvocation", "DEL SimpleName: Object", "DEL Block", "DEL Block", "DEL Modifier: static", "DEL TagElement: @inheritDoc", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleName: clazz", "DEL SimpleName: isArray", "DEL SingleMemberAnnotation", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL SimpleName: property", "DEL TagElement", "DEL TextElement: The java.util.obj.set method used as an active marker in ListSet. ", "DEL SimpleType: List", "DEL FieldDeclaration", "DEL SimpleName: Object", "DEL SimpleName: ListSetExecutor", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL StringLiteral: \"set\"", "DEL TypeLiteral", "DEL SimpleName: value", "DEL SimpleName: property", "DEL ParameterizedType: List<Object>", "DEL SimpleName: clazz", "DEL SimpleName: List", "DEL MarkerAnnotation", "DEL SimpleName: method", "DEL SimpleName: obj", "DEL TypeLiteral", "DEL InfixExpression: !=", "DEL SimpleName: Integer", "DEL Modifier: public", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: Array", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: value", "DEL SimpleName: objectClass", "DEL SimpleName: getClass", "DEL SimpleName: list", "DEL SimpleType: Object", "DEL SimpleType: List", "DEL TextElement: The property. ", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL SimpleName: ARRAY_SET", "DEL SimpleName: key", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL Block", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: List", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: clazz", "DEL ParameterizedType: List<Object>", "DEL MethodDeclaration", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: list", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL StringLiteral: \"set\"", "DEL SimpleName: clazz", "DEL Modifier: final", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleType: Integer", "DEL SimpleType: Class", "DEL SimpleName: set", "DEL StringLiteral: \"unchecked\"", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: obj", "DEL SimpleName: equals", "DEL ParameterizedType: List<Object>", "DEL IfStatement", "DEL SimpleName: set", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: set", "DEL SimpleType: List", "DEL SimpleName: Introspector", "DEL ExpressionStatement", "DEL SimpleName: property", "DEL SingleVariableDeclaration", "DEL SimpleName: initMarker", "DEL SimpleType: Integer", "DEL SimpleType: Array", "DEL Javadoc", "DEL SimpleName: value", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleName: LIST_SET", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL TagElement: @return", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: List", "DEL SimpleType: Object", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: LIST_SET", "DEL SimpleName: Class", "DEL SimpleName: List", "DEL TypeLiteral", "DEL Javadoc", "DEL SimpleName: is", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL Modifier: private", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: obj", "DEL SimpleName: is", "DEL SimpleType: List", "DEL ReturnStatement", "DEL TextElement:  the class that might implement the map interface", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: Integer", "DEL CastExpression", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: obj", "DEL SimpleName: discover", "DEL SimpleName: set", "DEL SimpleName: obj", "DEL SimpleName: obj", "DEL SimpleName: key", "DEL SimpleName: property", "DEL SimpleName: SuppressWarnings", "DEL MethodDeclaration", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Class", "DEL TagElement", "DEL SimpleName: value", "DEL SimpleName: intValue", "DEL TagElement", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: AbstractExecutor.Set", "DEL CastExpression", "DEL SimpleName: list", "DEL SimpleName: ARRAY_SET", "DEL TagElement", "DEL StringLiteral: \"unchecked\"", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL TagElement: @inheritDoc", "DEL SimpleName: method", "DEL SimpleName: obj", "DEL IfStatement", "DEL SimpleName: property", "DEL TagElement", "DEL FieldDeclaration", "DEL Javadoc", "DEL SimpleName: tryExecute", "DEL ParenthesizedExpression", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL Block", "DEL TextElement:  ", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL TagElement", "DEL Modifier: static", "DEL Javadoc", "DEL SimpleName: key", "DEL Modifier: private", "DEL SimpleType: List", "DEL SimpleName: Object", "DEL TextElement:  the class to introspect", "DEL SimpleName: list", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL TagElement: @inheritDoc", "DEL TextElement:  ", "DEL InfixExpression: &&", "DEL TypeLiteral", "DEL SimpleName: Integer", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TextElement: Finds the method to perform 'set' on a obj of array.", "DEL SimpleType: java.lang.reflect.Method", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL SimpleName: Object", "DEL SimpleName: intValue", "DEL SimpleName: initMarker", "DEL Modifier: final", "DEL CastExpression", "DEL SingleMemberAnnotation", "DEL TypeLiteral", "DEL SimpleType: Integer", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: key", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: List", "DEL SimpleType: Object", "DEL Modifier: final", "DEL Block", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL SimpleType: Object", "DEL TextElement: Creates an instance checking for the List interface or Array capability.", "DEL SimpleName: obj", "DEL SimpleName: ARRAY_SET", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL QualifiedName: Integer.TYPE", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL Block", "DEL NullLiteral", "DEL SimpleName: Override", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL Modifier: final", "DEL FieldDeclaration", "DEL ParameterizedType: List<Object>", "DEL Assignment: =", "DEL MethodInvocation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: List", "DEL SimpleName: execute", "DEL SimpleType: Introspector", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: value", "DEL SimpleName: clazz", "DEL SimpleName: Object", "DEL TextElement: Specialized executor to set a property in a List or array.", "DEL QualifiedName: Integer.TYPE", "DEL TextElement:  2.0", "DEL SimpleName: ARRAY_SET", "DEL Block", "DEL SimpleName: ListSetExecutor", "DEL IfStatement", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL SimpleName: isAssignableFrom", "DEL CastExpression", "DEL SimpleName: intValue", "DEL SimpleName: Override", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleName: getTargetProperty"]}]}}, {"ListSetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Array(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Specialized executor to set a property in a List or array.(6)", "Delete TagElement(7)", "Delete TextElement:  2.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete Modifier: final(12)", "Delete SimpleName: ListSetExecutor(13)", "Delete QualifiedName: AbstractExecutor.Set(14)", "Delete SimpleType: AbstractExecutor.Set(15)", "Delete TextElement: The java.lang.reflect.Array.get method used as an active marker in ListGet. (16)", "Delete TagElement(17)", "Delete Javadoc(18)", "Delete Modifier: private(19)", "Delete Modifier: static(20)", "Delete Modifier: final(21)", "Delete QualifiedName: java.lang.reflect.Method(22)", "Delete SimpleType: java.lang.reflect.Method(23)", "Delete SimpleName: ARRAY_SET(24)", "Delete SimpleName: initMarker(25)", "Delete SimpleName: Array(26)", "Delete SimpleType: Array(27)", "Delete TypeLiteral(28)", "Delete StringLiteral: \"set\"(29)", "Delete SimpleName: Object(30)", "Delete SimpleType: Object(31)", "Delete TypeLiteral(32)", "Delete QualifiedName: Integer.TYPE(33)", "Delete SimpleName: Object(34)", "Delete SimpleType: Object(35)", "Delete TypeLiteral(36)", "Delete MethodInvocation(37)", "Delete VariableDeclarationFragment(38)", "Delete FieldDeclaration(39)", "Delete TextElement: The java.util.obj.set method used as an active marker in ListSet. (40)", "Delete TagElement(41)", "Delete Javadoc(42)", "Delete Modifier: private(43)", "Delete Modifier: static(44)", "Delete Modifier: final(45)", "Delete QualifiedName: java.lang.reflect.Method(46)", "Delete SimpleType: java.lang.reflect.Method(47)", "Delete SimpleName: LIST_SET(48)", "Delete SimpleName: initMarker(49)", "Delete SimpleName: List(50)", "Delete SimpleType: List(51)", "Delete TypeLiteral(52)", "Delete StringLiteral: \"set\"(53)", "Delete QualifiedName: Integer.TYPE(54)", "Delete SimpleName: Object(55)", "Delete SimpleType: Object(56)", "Delete TypeLiteral(57)", "Delete MethodInvocation(58)", "Delete VariableDeclarationFragment(59)", "Delete FieldDeclaration(60)", "Delete TextElement: The property. (61)", "Delete TagElement(62)", "Delete Javadoc(63)", "Delete Modifier: private(64)", "Delete Modifier: final(65)", "Delete SimpleName: Integer(66)", "Delete SimpleType: Integer(67)", "Delete SimpleName: property(68)", "Delete VariableDeclarationFragment(69)", "Delete FieldDeclaration(70)", "Delete TextElement: Creates an instance checking for the List interface or Array capability.(71)", "Delete TagElement(72)", "Delete SimpleName: is(73)", "Delete TextElement:  the introspector(74)", "Delete TagElement: @param(75)", "Delete SimpleName: clazz(76)", "Delete TextElement:  the class that might implement the map interface(77)", "Delete TagElement: @param(78)", "Delete SimpleName: key(79)", "Delete TextElement:  the key to use in obj.set(key,value)(80)", "Delete TagElement: @param(81)", "Delete SimpleName: value(82)", "Delete TextElement:  the value to use in obj.set(key,value)(83)", "Delete TagElement: @param(84)", "Delete Javadoc(85)", "Delete Modifier: public(86)", "Delete SimpleName: ListSetExecutor(87)", "Delete SimpleName: Introspector(88)", "Delete SimpleType: Introspector(89)", "Delete SimpleName: is(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: Class(92)", "Delete SimpleType: Class(93)", "Delete WildcardType: ?(94)", "Delete ParameterizedType: Class<?>(95)", "Delete SimpleName: clazz(96)", "Delete SingleVariableDeclaration(97)", "Delete SimpleName: Integer(98)", "Delete SimpleType: Integer(99)", "Delete SimpleName: key(100)", "Delete SingleVariableDeclaration(101)", "Delete SimpleName: Object(102)", "Delete SimpleType: Object(103)", "Delete SimpleName: value(104)", "Delete SingleVariableDeclaration(105)", "Delete SimpleName: clazz(106)", "Delete SimpleName: discover(107)", "Delete SimpleName: clazz(108)", "Delete MethodInvocation(109)", "Delete SuperConstructorInvocation(110)", "Delete SimpleName: property(111)", "Delete SimpleName: key(112)", "Delete Assignment: =(113)", "Delete ExpressionStatement(114)", "Delete Block(115)", "Delete MethodDeclaration(116)", "Delete TagElement: @inheritDoc(117)", "Delete TextElement:  (118)", "Delete TagElement(119)", "Delete Javadoc(120)", "Delete SimpleName: Override(121)", "Delete MarkerAnnotation(122)", "Delete Modifier: public(123)", "Delete SimpleName: Object(124)", "Delete SimpleType: Object(125)", "Delete SimpleName: getTargetProperty(126)", "Delete SimpleName: property(127)", "Delete ReturnStatement(128)", "Delete Block(129)", "Delete MethodDeclaration(130)", "Delete TagElement: @inheritDoc(131)", "Delete TextElement:  (132)", "Delete TagElement(133)", "Delete Javadoc(134)", "Delete SimpleName: Override(135)", "Delete MarkerAnnotation(136)", "Delete Modifier: public(137)", "Delete SimpleName: Object(138)", "Delete SimpleType: Object(139)", "Delete SimpleName: execute(140)", "Delete Modifier: final(141)", "Delete SimpleName: Object(142)", "Delete SimpleType: Object(143)", "Delete SimpleName: obj(144)", "Delete SingleVariableDeclaration(145)", "Delete SimpleName: Object(146)", "Delete SimpleType: Object(147)", "Delete SimpleName: value(148)", "Delete SingleVariableDeclaration(149)", "Delete SimpleName: method(150)", "Delete SimpleName: ARRAY_SET(151)", "Delete InfixExpression: ==(152)", "Delete QualifiedName: java.lang.reflect.Array(153)", "Delete SimpleName: set(154)", "Delete SimpleName: obj(155)", "Delete SimpleName: property(156)", "Delete SimpleName: intValue(157)", "Delete MethodInvocation(158)", "Delete SimpleName: value(159)", "Delete MethodInvocation(160)", "Delete ExpressionStatement(161)", "Delete Block(162)", "Delete SimpleName: SuppressWarnings(163)", "Delete StringLiteral: \"unchecked\"(164)", "Delete SingleMemberAnnotation(165)", "Delete Modifier: final(166)", "Delete SimpleName: List(167)", "Delete SimpleType: List(168)", "Delete SimpleName: Object(169)", "Delete SimpleType: Object(170)", "Delete ParameterizedType: List<Object>(171)", "Delete SimpleName: list(172)", "Delete SimpleName: List(173)", "Delete SimpleType: List(174)", "Delete SimpleName: Object(175)", "Delete SimpleType: Object(176)", "Delete ParameterizedType: List<Object>(177)", "Delete SimpleName: obj(178)", "Delete CastExpression(179)", "Delete VariableDeclarationFragment(180)", "Delete VariableDeclarationStatement(181)", "Delete SimpleName: list(182)", "Delete SimpleName: set(183)", "Delete SimpleName: property(184)", "Delete SimpleName: intValue(185)", "Delete MethodInvocation(186)", "Delete SimpleName: value(187)", "Delete MethodInvocation(188)", "Delete ExpressionStatement(189)", "Delete Block(190)", "Delete IfStatement(191)", "Delete SimpleName: value(192)", "Delete ReturnStatement(193)", "Delete Block(194)", "Delete MethodDeclaration(195)", "Delete TagElement: @inheritDoc(196)", "Delete TextElement:  (197)", "Delete TagElement(198)", "Delete Javadoc(199)", "Delete SimpleName: Override(200)", "Delete MarkerAnnotation(201)", "Delete Modifier: public(202)", "Delete SimpleName: Object(203)", "Delete SimpleType: Object(204)", "Delete SimpleName: tryExecute(205)", "Delete Modifier: final(206)", "Delete SimpleName: Object(207)", "Delete SimpleType: Object(208)", "Delete SimpleName: obj(209)", "Delete SingleVariableDeclaration(210)", "Delete SimpleName: Object(211)", "Delete SimpleType: Object(212)", "Delete SimpleName: key(213)", "Delete SingleVariableDeclaration(214)", "Delete SimpleName: Object(215)", "Delete SimpleType: Object(216)", "Delete SimpleName: value(217)", "Delete SingleVariableDeclaration(218)", "Delete SimpleName: obj(219)", "Delete NullLiteral(220)", "Delete InfixExpression: !=(221)", "Delete SimpleName: method(222)", "Delete NullLiteral(223)", "Delete InfixExpression: !=(224)", "Delete InfixExpression: &&(225)", "Delete SimpleName: objectClass(226)", "Delete SimpleName: equals(227)", "Delete SimpleName: obj(228)", "Delete SimpleName: getClass(229)", "Delete MethodInvocation(230)", "Delete MethodInvocation(231)", "Delete InfixExpression: &&(232)", "Delete SimpleName: key(233)", "Delete SimpleName: Integer(234)", "Delete SimpleType: Integer(235)", "Delete InstanceofExpression(236)", "Delete InfixExpression: &&(237)", "Delete SimpleName: method(238)", "Delete SimpleName: ARRAY_SET(239)", "Delete InfixExpression: ==(240)", "Delete SimpleName: Array(241)", "Delete SimpleName: set(242)", "Delete SimpleName: obj(243)", "Delete SimpleName: Integer(244)", "Delete SimpleType: Integer(245)", "Delete SimpleName: key(246)", "Delete CastExpression(247)", "Delete ParenthesizedExpression(248)", "Delete SimpleName: intValue(249)", "Delete MethodInvocation(250)", "Delete SimpleName: value(251)", "Delete MethodInvocation(252)", "Delete ExpressionStatement(253)", "Delete Block(254)", "Delete SimpleName: SuppressWarnings(255)", "Delete StringLiteral: \"unchecked\"(256)", "Delete SingleMemberAnnotation(257)", "Delete Modifier: final(258)", "Delete SimpleName: List(259)", "Delete SimpleType: List(260)", "Delete SimpleName: Object(261)", "Delete SimpleType: Object(262)", "Delete ParameterizedType: List<Object>(263)", "Delete SimpleName: list(264)", "Delete SimpleName: List(265)", "Delete SimpleType: List(266)", "Delete SimpleName: Object(267)", "Delete SimpleType: Object(268)", "Delete ParameterizedType: List<Object>(269)", "Delete SimpleName: obj(270)", "Delete CastExpression(271)", "Delete VariableDeclarationFragment(272)", "Delete VariableDeclarationStatement(273)", "Delete SimpleName: list(274)", "Delete SimpleName: set(275)", "Delete SimpleName: Integer(276)", "Delete SimpleType: Integer(277)", "Delete SimpleName: key(278)", "Delete CastExpression(279)", "Delete ParenthesizedExpression(280)", "Delete SimpleName: intValue(281)", "Delete MethodInvocation(282)", "Delete SimpleName: value(283)", "Delete MethodInvocation(284)", "Delete ExpressionStatement(285)", "Delete Block(286)", "Delete IfStatement(287)", "Delete SimpleName: value(288)", "Delete ReturnStatement(289)", "Delete Block(290)", "Delete IfStatement(291)", "Delete SimpleName: TRY_FAILED(292)", "Delete ReturnStatement(293)", "Delete Block(294)", "Delete MethodDeclaration(295)", "Delete TextElement: Finds the method to perform 'set' on a obj of array.(296)", "Delete TagElement(297)", "Delete SimpleName: clazz(298)", "Delete TextElement:  the class to introspect(299)", "Delete TagElement: @param(300)", "Delete TextElement:  a marker method, obj.set or array.set(301)", "Delete TagElement: @return(302)", "Delete Javadoc(303)", "Delete Modifier: static(304)", "Delete QualifiedName: java.lang.reflect.Method(305)", "Delete SimpleType: java.lang.reflect.Method(306)", "Delete SimpleName: discover(307)", "Delete SimpleName: Class(308)", "Delete SimpleType: Class(309)", "Delete WildcardType: ?(310)", "Delete ParameterizedType: Class<?>(311)", "Delete SimpleName: clazz(312)", "Delete SingleVariableDeclaration(313)", "Delete SimpleName: clazz(314)", "Delete SimpleName: isArray(315)", "Delete MethodInvocation(316)", "Delete SimpleName: ARRAY_SET(317)", "Delete ReturnStatement(318)", "Delete Block(319)", "Delete IfStatement(320)", "Delete SimpleName: List(321)", "Delete SimpleType: List(322)", "Delete TypeLiteral(323)", "Delete SimpleName: isAssignableFrom(324)", "Delete SimpleName: clazz(325)", "Delete MethodInvocation(326)", "Delete SimpleName: LIST_SET(327)", "Delete ReturnStatement(328)", "Delete Block(329)", "Delete IfStatement(330)", "Delete NullLiteral(331)", "Delete ReturnStatement(332)", "Delete Block(333)", "Delete MethodDeclaration(334)", "Delete TypeDeclaration: class(335)"]}}, {"MapGetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TypeLiteral", "DEL SingleVariableDeclaration", "DEL SimpleType: Map", "DEL ParenthesizedExpression", "DEL SimpleName: key", "DEL WildcardType: ?", "DEL SimpleType: Map", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: tryExecute", "DEL TextElement: Get the property from the map.", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL TextElement:  ", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TypeLiteral", "DEL TagElement", "DEL SimpleName: SuppressWarnings", "DEL SimpleType: Object", "DEL SimpleName: get", "DEL TextElement:  ", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL TypeDeclaration: class", "DEL SimpleType: Object", "DEL SimpleName: Map", "DEL TagElement: @param", "DEL SingleMemberAnnotation", "DEL SimpleName: get", "DEL SimpleType: Map", "DEL Block", "DEL MarkerAnnotation", "DEL Javadoc", "DEL SimpleName: property", "DEL TextElement: Creates an instance checking for the Map interface.", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: obj", "DEL InfixExpression: !=", "DEL WildcardType: ?", "DEL TypeLiteral", "DEL QualifiedName: AbstractExecutor.Get", "DEL Modifier: final", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL TextElement: The property. ", "DEL TagElement", "DEL TextElement:  a marker method, map.get", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: equals", "DEL SimpleName: property", "DEL TextElement:  map.get(property)", "DEL SimpleName: MapGetExecutor", "DEL InfixExpression: &&", "DEL ParameterizedType: Map<Object,?>", "DEL SimpleName: obj", "DEL Modifier: public", "DEL Block", "DEL SimpleName: clazz", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL Javadoc", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL TextElement: Specialized executor to get a property from a Map.", "DEL SimpleName: Class", "DEL TextElement:  the map.", "DEL ParenthesizedExpression", "DEL SimpleName: isAssignableFrom", "DEL SimpleType: java.lang.reflect.Method", "DEL SuperConstructorInvocation", "DEL SimpleName: property", "DEL SimpleName: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: obj", "DEL Modifier: final", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL SimpleName: map", "DEL SimpleName: MapGetExecutor", "DEL SimpleName: clazz", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: Object", "DEL CastExpression", "DEL TextElement:  the introspector", "DEL ParameterizedType: Map<Object,?>", "DEL SimpleName: Object", "DEL SimpleName: Class", "DEL SimpleName: key", "DEL SimpleName: MAP_GET", "DEL VariableDeclarationStatement", "DEL InfixExpression: &&", "DEL SimpleName: key", "DEL Modifier: final", "DEL SimpleName: execute", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: property", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL StringLiteral: \"get\"", "DEL MethodInvocation", "DEL SimpleName: key", "DEL ReturnStatement", "DEL ParameterizedType: Class<?>", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: is", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: obj", "DEL SimpleName: obj", "DEL NullLiteral", "DEL MethodInvocation", "DEL TextElement: The java.util.map.get method used as an active marker in MapGet. ", "DEL TagElement", "DEL StringLiteral: \"unchecked\"", "DEL SimpleType: AbstractExecutor.Get", "DEL SimpleType: Map", "DEL SimpleName: map", "DEL SimpleName: clazz", "DEL SimpleName: getClass", "DEL ParameterizedType: Map<Object,?>", "DEL SimpleType: Introspector", "DEL Modifier: static", "DEL QualifiedName: java.lang.reflect.Method", "DEL TagElement: @param", "DEL QualifiedName: java.lang.reflect.Method", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SingleMemberAnnotation", "DEL SimpleName: Object", "DEL SimpleName: discover", "DEL VariableDeclarationStatement", "DEL MarkerAnnotation", "DEL TextElement:  2.0", "DEL SimpleName: discover", "DEL Modifier: static", "DEL NullLiteral", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: getClass", "DEL SimpleType: java.lang.reflect.Method", "DEL TagElement: @since", "DEL InfixExpression: ||", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL Modifier: final", "DEL SimpleName: method", "DEL SimpleName: MAP_GET", "DEL Modifier: final", "DEL Modifier: private", "DEL WildcardType: ?", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Map<Object,?>", "DEL Modifier: final", "DEL Block", "DEL TextElement:  the class to introspect", "DEL IfStatement", "DEL FieldDeclaration", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL TextElement:  the class that might implement the map interface", "DEL SimpleType: Map", "DEL TagElement: @return", "DEL SimpleName: key", "DEL SimpleName: clazz", "DEL TagElement", "DEL SimpleName: property", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: equals", "DEL NullLiteral", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL InfixExpression: &&", "DEL SimpleName: clazz", "DEL SimpleType: Object", "DEL SimpleName: SuppressWarnings", "DEL Block", "DEL SimpleType: Map", "DEL SimpleName: key", "DEL SimpleName: Map", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleName: Introspector", "DEL ReturnStatement", "DEL SimpleName: getClass", "DEL Javadoc", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: Map", "DEL SimpleName: initMarker", "DEL SimpleName: is", "DEL SimpleName: objectClass", "DEL NullLiteral", "DEL SimpleName: Map", "DEL SimpleName: clazz", "DEL SimpleName: key", "DEL TextElement: Finds the method to perform 'get' on a map.", "DEL FieldDeclaration", "DEL Block", "DEL SimpleType: Class", "DEL ParameterizedType: Class<?>", "DEL Javadoc", "DEL CastExpression", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: getTargetProperty", "DEL ConditionalExpression", "DEL SimpleType: Object", "DEL SimpleName: map", "DEL SimpleName: Map", "DEL SimpleName: Object", "DEL Block", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: map", "DEL WildcardType: ?", "DEL SimpleName: clazz", "DEL TextElement:  the key to use in map.get(key)", "DEL Assignment: =", "DEL WildcardType: ?"]}]}}, {"MapGetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Map(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Specialized executor to get a property from a Map.(4)", "Delete TagElement(5)", "Delete TextElement:  2.0(6)", "Delete TagElement: @since(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete Modifier: final(10)", "Delete SimpleName: MapGetExecutor(11)", "Delete QualifiedName: AbstractExecutor.Get(12)", "Delete SimpleType: AbstractExecutor.Get(13)", "Delete TextElement: The java.util.map.get method used as an active marker in MapGet. (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: private(17)", "Delete Modifier: static(18)", "Delete Modifier: final(19)", "Delete QualifiedName: java.lang.reflect.Method(20)", "Delete SimpleType: java.lang.reflect.Method(21)", "Delete SimpleName: MAP_GET(22)", "Delete SimpleName: initMarker(23)", "Delete SimpleName: Map(24)", "Delete SimpleType: Map(25)", "Delete TypeLiteral(26)", "Delete StringLiteral: \"get\"(27)", "Delete SimpleName: Object(28)", "Delete SimpleType: Object(29)", "Delete TypeLiteral(30)", "Delete MethodInvocation(31)", "Delete VariableDeclarationFragment(32)", "Delete FieldDeclaration(33)", "Delete TextElement: The property. (34)", "Delete TagElement(35)", "Delete Javadoc(36)", "Delete Modifier: private(37)", "Delete Modifier: final(38)", "Delete SimpleName: Object(39)", "Delete SimpleType: Object(40)", "Delete SimpleName: property(41)", "Delete VariableDeclarationFragment(42)", "Delete FieldDeclaration(43)", "Delete TextElement: Creates an instance checking for the Map interface.(44)", "Delete TagElement(45)", "Delete SimpleName: is(46)", "Delete TextElement:  the introspector(47)", "Delete TagElement: @param(48)", "Delete SimpleName: clazz(49)", "Delete TextElement:  the class that might implement the map interface(50)", "Delete TagElement: @param(51)", "Delete SimpleName: key(52)", "Delete TextElement:  the key to use in map.get(key)(53)", "Delete TagElement: @param(54)", "Delete Javadoc(55)", "Delete Modifier: public(56)", "Delete SimpleName: MapGetExecutor(57)", "Delete SimpleName: Introspector(58)", "Delete SimpleType: Introspector(59)", "Delete SimpleName: is(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: Class(62)", "Delete SimpleType: Class(63)", "Delete WildcardType: ?(64)", "Delete ParameterizedType: Class<?>(65)", "Delete SimpleName: clazz(66)", "Delete SingleVariableDeclaration(67)", "Delete SimpleName: Object(68)", "Delete SimpleType: Object(69)", "Delete SimpleName: key(70)", "Delete SingleVariableDeclaration(71)", "Delete SimpleName: clazz(72)", "Delete SimpleName: discover(73)", "Delete SimpleName: clazz(74)", "Delete MethodInvocation(75)", "Delete SuperConstructorInvocation(76)", "Delete SimpleName: property(77)", "Delete SimpleName: key(78)", "Delete Assignment: =(79)", "Delete ExpressionStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete TagElement: @inheritDoc(83)", "Delete TextElement:  (84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete SimpleName: Override(87)", "Delete MarkerAnnotation(88)", "Delete Modifier: public(89)", "Delete SimpleName: Object(90)", "Delete SimpleType: Object(91)", "Delete SimpleName: getTargetProperty(92)", "Delete SimpleName: property(93)", "Delete ReturnStatement(94)", "Delete Block(95)", "Delete MethodDeclaration(96)", "Delete TextElement: Get the property from the map.(97)", "Delete TagElement(98)", "Delete SimpleName: obj(99)", "Delete TextElement:  the map.(100)", "Delete TagElement: @param(101)", "Delete TextElement:  map.get(property)(102)", "Delete TagElement: @return(103)", "Delete Javadoc(104)", "Delete SimpleName: Override(105)", "Delete MarkerAnnotation(106)", "Delete Modifier: public(107)", "Delete SimpleName: Object(108)", "Delete SimpleType: Object(109)", "Delete SimpleName: execute(110)", "Delete Modifier: final(111)", "Delete SimpleName: Object(112)", "Delete SimpleType: Object(113)", "Delete SimpleName: obj(114)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: SuppressWarnings(116)", "Delete StringLiteral: \"unchecked\"(117)", "Delete SingleMemberAnnotation(118)", "Delete Modifier: final(119)", "Delete SimpleName: Map(120)", "Delete SimpleType: Map(121)", "Delete SimpleName: Object(122)", "Delete SimpleType: Object(123)", "Delete WildcardType: ?(124)", "Delete ParameterizedType: Map<Object,?>(125)", "Delete SimpleName: map(126)", "Delete SimpleName: Map(127)", "Delete SimpleType: Map(128)", "Delete SimpleName: Object(129)", "Delete SimpleType: Object(130)", "Delete WildcardType: ?(131)", "Delete ParameterizedType: Map<Object,?>(132)", "Delete SimpleName: obj(133)", "Delete CastExpression(134)", "Delete VariableDeclarationFragment(135)", "Delete VariableDeclarationStatement(136)", "Delete SimpleName: map(137)", "Delete SimpleName: get(138)", "Delete SimpleName: property(139)", "Delete MethodInvocation(140)", "Delete ReturnStatement(141)", "Delete Block(142)", "Delete MethodDeclaration(143)", "Delete TagElement: @inheritDoc(144)", "Delete TextElement:  (145)", "Delete TagElement(146)", "Delete Javadoc(147)", "Delete SimpleName: Override(148)", "Delete MarkerAnnotation(149)", "Delete Modifier: public(150)", "Delete SimpleName: Object(151)", "Delete SimpleType: Object(152)", "Delete SimpleName: tryExecute(153)", "Delete Modifier: final(154)", "Delete SimpleName: Object(155)", "Delete SimpleType: Object(156)", "Delete SimpleName: obj(157)", "Delete SingleVariableDeclaration(158)", "Delete SimpleName: Object(159)", "Delete SimpleType: Object(160)", "Delete SimpleName: key(161)", "Delete SingleVariableDeclaration(162)", "Delete SimpleName: obj(163)", "Delete NullLiteral(164)", "Delete InfixExpression: !=(165)", "Delete SimpleName: method(166)", "Delete NullLiteral(167)", "Delete InfixExpression: !=(168)", "Delete InfixExpression: &&(169)", "Delete SimpleName: objectClass(170)", "Delete SimpleName: equals(171)", "Delete SimpleName: obj(172)", "Delete SimpleName: getClass(173)", "Delete MethodInvocation(174)", "Delete MethodInvocation(175)", "Delete InfixExpression: &&(176)", "Delete SimpleName: key(177)", "Delete NullLiteral(178)", "Delete InfixExpression: ==(179)", "Delete SimpleName: property(180)", "Delete SimpleName: getClass(181)", "Delete MethodInvocation(182)", "Delete SimpleName: equals(183)", "Delete SimpleName: key(184)", "Delete SimpleName: getClass(185)", "Delete MethodInvocation(186)", "Delete MethodInvocation(187)", "Delete InfixExpression: ||(188)", "Delete ParenthesizedExpression(189)", "Delete InfixExpression: &&(190)", "Delete SimpleName: SuppressWarnings(191)", "Delete StringLiteral: \"unchecked\"(192)", "Delete SingleMemberAnnotation(193)", "Delete Modifier: final(194)", "Delete SimpleName: Map(195)", "Delete SimpleType: Map(196)", "Delete SimpleName: Object(197)", "Delete SimpleType: Object(198)", "Delete WildcardType: ?(199)", "Delete ParameterizedType: Map<Object,?>(200)", "Delete SimpleName: map(201)", "Delete SimpleName: Map(202)", "Delete SimpleType: Map(203)", "Delete SimpleName: Object(204)", "Delete SimpleType: Object(205)", "Delete WildcardType: ?(206)", "Delete ParameterizedType: Map<Object,?>(207)", "Delete SimpleName: obj(208)", "Delete CastExpression(209)", "Delete VariableDeclarationFragment(210)", "Delete VariableDeclarationStatement(211)", "Delete SimpleName: map(212)", "Delete SimpleName: get(213)", "Delete SimpleName: key(214)", "Delete MethodInvocation(215)", "Delete ReturnStatement(216)", "Delete Block(217)", "Delete IfStatement(218)", "Delete SimpleName: TRY_FAILED(219)", "Delete ReturnStatement(220)", "Delete Block(221)", "Delete MethodDeclaration(222)", "Delete TextElement: Finds the method to perform 'get' on a map.(223)", "Delete TagElement(224)", "Delete SimpleName: clazz(225)", "Delete TextElement:  the class to introspect(226)", "Delete TagElement: @param(227)", "Delete TextElement:  a marker method, map.get(228)", "Delete TagElement: @return(229)", "Delete Javadoc(230)", "Delete Modifier: static(231)", "Delete QualifiedName: java.lang.reflect.Method(232)", "Delete SimpleType: java.lang.reflect.Method(233)", "Delete SimpleName: discover(234)", "Delete SimpleName: Class(235)", "Delete SimpleType: Class(236)", "Delete WildcardType: ?(237)", "Delete ParameterizedType: Class<?>(238)", "Delete SimpleName: clazz(239)", "Delete SingleVariableDeclaration(240)", "Delete SimpleName: Map(241)", "Delete SimpleType: Map(242)", "Delete TypeLiteral(243)", "Delete SimpleName: isAssignableFrom(244)", "Delete SimpleName: clazz(245)", "Delete MethodInvocation(246)", "Delete ParenthesizedExpression(247)", "Delete SimpleName: MAP_GET(248)", "Delete NullLiteral(249)", "Delete ConditionalExpression(250)", "Delete ReturnStatement(251)", "Delete Block(252)", "Delete MethodDeclaration(253)", "Delete TypeDeclaration: class(254)"]}}, {"MapSetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.InvocationTargetException"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: Object", "DEL SimpleName: getClass", "DEL SimpleName: Object", "DEL SimpleType: Introspector", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: final", "DEL ParameterizedType: Map<Object,Object>", "DEL SimpleType: Object", "DEL ParameterizedType: Class<?>", "DEL Assignment: =", "DEL TextElement:  the class that might implement the map interface", "DEL TextElement:  the key to use as argument in map.put(key,value)", "DEL TextElement:  2.0", "DEL SingleVariableDeclaration", "DEL SimpleName: initMarker", "DEL Javadoc", "DEL SimpleName: Map", "DEL SimpleType: Object", "DEL TextElement:  ", "DEL SimpleName: Object", "DEL Modifier: final", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL SimpleName: key", "DEL SimpleName: is", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL WildcardType: ?", "DEL Block", "DEL Block", "DEL MarkerAnnotation", "DEL TextElement: Specialized executor to set a property in a Map.", "DEL SimpleType: Class", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL SimpleName: execute", "DEL SimpleName: Object", "DEL SimpleName: clazz", "DEL Modifier: final", "DEL SimpleName: obj", "DEL SimpleName: property", "DEL SimpleName: Class", "DEL SimpleName: obj", "DEL TagElement: @param", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Object", "DEL TypeLiteral", "DEL SimpleName: map", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL StringLiteral: \"unchecked\"", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: map", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: clazz", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: property", "DEL SimpleName: SuppressWarnings", "DEL TextElement: Finds the method to perform 'set' on a map.", "DEL MethodDeclaration", "DEL SimpleName: Map", "DEL TextElement:  the introspector", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL SimpleName: tryExecute", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL ParameterizedType: Map<Object,Object>", "DEL CastExpression", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL TagElement", "DEL TextElement: Creates an instance checking for the Map interface.", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: Class", "DEL SimpleName: Map", "DEL Modifier: private", "DEL SimpleName: Override", "DEL TagElement: @return", "DEL SimpleName: MapSetExecutor", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleName: clazz", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL SimpleType: java.lang.reflect.Method", "DEL VariableDeclarationFragment", "DEL SimpleName: clazz", "DEL InfixExpression: !=", "DEL InfixExpression: &&", "DEL SimpleName: Object", "DEL InfixExpression: ||", "DEL SimpleName: value", "DEL SimpleName: value", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleType: AbstractExecutor.Set", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: discover", "DEL SimpleType: Map", "DEL Modifier: public", "DEL SimpleName: Object", "DEL SimpleName: Introspector", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: map", "DEL ParameterizedType: Map<Object,Object>", "DEL CastExpression", "DEL Modifier: public", "DEL SimpleName: obj", "DEL ReturnStatement", "DEL Modifier: final", "DEL Modifier: static", "DEL TextElement:  ", "DEL StringLiteral: \"unchecked\"", "DEL NullLiteral", "DEL SimpleName: clazz", "DEL FieldDeclaration", "DEL SimpleName: is", "DEL SingleVariableDeclaration", "DEL SimpleName: getClass", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleType: Object", "DEL SimpleName: equals", "DEL SimpleName: key", "DEL SimpleName: property", "DEL SimpleName: Object", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: map", "DEL TagElement", "DEL SimpleName: objectClass", "DEL SimpleType: Map", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: clazz", "DEL TagElement: @inheritDoc", "DEL SimpleType: Object", "DEL InfixExpression: &&", "DEL Modifier: public", "DEL SimpleName: Object", "DEL TagElement", "DEL Block", "DEL TextElement:  a marker method, map.get", "DEL SimpleName: value", "DEL SimpleType: Object", "DEL SimpleName: put", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: Map", "DEL TextElement:  the value to use as argument in map.put(key,value)", "DEL NullLiteral", "DEL Modifier: public", "DEL Block", "DEL SimpleName: MAP_SET", "DEL SimpleName: key", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: MapSetExecutor", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: discover", "DEL ParenthesizedExpression", "DEL TagElement", "DEL SimpleName: isAssignableFrom", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL SingleMemberAnnotation", "DEL SimpleType: Map", "DEL SimpleType: Object", "DEL Modifier: static", "DEL SimpleName: value", "DEL SimpleName: Object", "DEL ParenthesizedExpression", "DEL TextElement: The java.util.map.put method used as an active marker in MapSet. ", "DEL SimpleName: obj", "DEL SimpleType: InvocationTargetException", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: method", "DEL Javadoc", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: Map", "DEL SingleMemberAnnotation", "DEL SimpleName: MAP_SET", "DEL NullLiteral", "DEL SimpleType: IllegalAccessException", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL TextElement:  the class to introspect", "DEL SuperConstructorInvocation", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL QualifiedName: AbstractExecutor.Set", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleType: Map", "DEL TagElement: @param", "DEL SimpleName: property", "DEL SimpleName: clazz", "DEL TagElement: @since", "DEL TextElement:  ", "DEL Javadoc", "DEL TypeLiteral", "DEL NullLiteral", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: getClass", "DEL WildcardType: ?", "DEL SimpleName: Object", "DEL IfStatement", "DEL ParameterizedType: Map<Object,Object>", "DEL SimpleType: Object", "DEL InfixExpression: !=", "DEL SimpleName: property", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL SimpleName: equals", "DEL Javadoc", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL TextElement: The property. ", "DEL TagElement", "DEL Modifier: private", "DEL MarkerAnnotation", "DEL VariableDeclarationStatement", "DEL TypeLiteral", "DEL SimpleType: Object", "DEL SimpleName: key", "DEL SimpleName: put", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleName: value", "DEL Modifier: final", "DEL SimpleType: Object", "DEL StringLiteral: \"put\"", "DEL SimpleName: InvocationTargetException", "DEL ParameterizedType: Class<?>", "DEL SimpleName: getTargetProperty", "DEL TypeLiteral"]}]}}, {"MapSetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Map(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Specialized executor to set a property in a Map.(6)", "Delete TagElement(7)", "Delete TextElement:  2.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete Modifier: final(12)", "Delete SimpleName: MapSetExecutor(13)", "Delete QualifiedName: AbstractExecutor.Set(14)", "Delete SimpleType: AbstractExecutor.Set(15)", "Delete TextElement: The java.util.map.put method used as an active marker in MapSet. (16)", "Delete TagElement(17)", "Delete Javadoc(18)", "Delete Modifier: private(19)", "Delete Modifier: static(20)", "Delete Modifier: final(21)", "Delete QualifiedName: java.lang.reflect.Method(22)", "Delete SimpleType: java.lang.reflect.Method(23)", "Delete SimpleName: MAP_SET(24)", "Delete SimpleName: initMarker(25)", "Delete SimpleName: Map(26)", "Delete SimpleType: Map(27)", "Delete TypeLiteral(28)", "Delete StringLiteral: \"put\"(29)", "Delete SimpleName: Object(30)", "Delete SimpleType: Object(31)", "Delete TypeLiteral(32)", "Delete SimpleName: Object(33)", "Delete SimpleType: Object(34)", "Delete TypeLiteral(35)", "Delete MethodInvocation(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete TextElement: The property. (39)", "Delete TagElement(40)", "Delete Javadoc(41)", "Delete Modifier: private(42)", "Delete Modifier: final(43)", "Delete SimpleName: Object(44)", "Delete SimpleType: Object(45)", "Delete SimpleName: property(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete TextElement: Creates an instance checking for the Map interface.(49)", "Delete TagElement(50)", "Delete SimpleName: is(51)", "Delete TextElement:  the introspector(52)", "Delete TagElement: @param(53)", "Delete SimpleName: clazz(54)", "Delete TextElement:  the class that might implement the map interface(55)", "Delete TagElement: @param(56)", "Delete SimpleName: key(57)", "Delete TextElement:  the key to use as argument in map.put(key,value)(58)", "Delete TagElement: @param(59)", "Delete SimpleName: value(60)", "Delete TextElement:  the value to use as argument in map.put(key,value)(61)", "Delete TagElement: @param(62)", "Delete Javadoc(63)", "Delete Modifier: public(64)", "Delete SimpleName: MapSetExecutor(65)", "Delete SimpleName: Introspector(66)", "Delete SimpleType: Introspector(67)", "Delete SimpleName: is(68)", "Delete SingleVariableDeclaration(69)", "Delete SimpleName: Class(70)", "Delete SimpleType: Class(71)", "Delete WildcardType: ?(72)", "Delete ParameterizedType: Class<?>(73)", "Delete SimpleName: clazz(74)", "Delete SingleVariableDeclaration(75)", "Delete SimpleName: Object(76)", "Delete SimpleType: Object(77)", "Delete SimpleName: key(78)", "Delete SingleVariableDeclaration(79)", "Delete SimpleName: Object(80)", "Delete SimpleType: Object(81)", "Delete SimpleName: value(82)", "Delete SingleVariableDeclaration(83)", "Delete SimpleName: clazz(84)", "Delete SimpleName: discover(85)", "Delete SimpleName: clazz(86)", "Delete MethodInvocation(87)", "Delete SuperConstructorInvocation(88)", "Delete SimpleName: property(89)", "Delete SimpleName: key(90)", "Delete Assignment: =(91)", "Delete ExpressionStatement(92)", "Delete Block(93)", "Delete MethodDeclaration(94)", "Delete TagElement: @inheritDoc(95)", "Delete TextElement:  (96)", "Delete TagElement(97)", "Delete Javadoc(98)", "Delete SimpleName: Override(99)", "Delete MarkerAnnotation(100)", "Delete Modifier: public(101)", "Delete SimpleName: Object(102)", "Delete SimpleType: Object(103)", "Delete SimpleName: getTargetProperty(104)", "Delete SimpleName: property(105)", "Delete ReturnStatement(106)", "Delete Block(107)", "Delete MethodDeclaration(108)", "Delete TagElement: @inheritDoc(109)", "Delete TextElement:  (110)", "Delete TagElement(111)", "Delete Javadoc(112)", "Delete SimpleName: Override(113)", "Delete MarkerAnnotation(114)", "Delete Modifier: public(115)", "Delete SimpleName: Object(116)", "Delete SimpleType: Object(117)", "Delete SimpleName: execute(118)", "Delete Modifier: final(119)", "Delete SimpleName: Object(120)", "Delete SimpleType: Object(121)", "Delete SimpleName: obj(122)", "Delete SingleVariableDeclaration(123)", "Delete SimpleName: Object(124)", "Delete SimpleType: Object(125)", "Delete SimpleName: value(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: IllegalAccessException(128)", "Delete SimpleType: IllegalAccessException(129)", "Delete SimpleName: InvocationTargetException(130)", "Delete SimpleType: InvocationTargetException(131)", "Delete SimpleName: SuppressWarnings(132)", "Delete StringLiteral: \"unchecked\"(133)", "Delete SingleMemberAnnotation(134)", "Delete Modifier: final(135)", "Delete SimpleName: Map(136)", "Delete SimpleType: Map(137)", "Delete SimpleName: Object(138)", "Delete SimpleType: Object(139)", "Delete SimpleName: Object(140)", "Delete SimpleType: Object(141)", "Delete ParameterizedType: Map<Object,Object>(142)", "Delete SimpleName: map(143)", "Delete SimpleName: Map(144)", "Delete SimpleType: Map(145)", "Delete SimpleName: Object(146)", "Delete SimpleType: Object(147)", "Delete SimpleName: Object(148)", "Delete SimpleType: Object(149)", "Delete ParameterizedType: Map<Object,Object>(150)", "Delete SimpleName: obj(151)", "Delete CastExpression(152)", "Delete ParenthesizedExpression(153)", "Delete VariableDeclarationFragment(154)", "Delete VariableDeclarationStatement(155)", "Delete SimpleName: map(156)", "Delete SimpleName: put(157)", "Delete SimpleName: property(158)", "Delete SimpleName: value(159)", "Delete MethodInvocation(160)", "Delete ExpressionStatement(161)", "Delete SimpleName: value(162)", "Delete ReturnStatement(163)", "Delete Block(164)", "Delete MethodDeclaration(165)", "Delete TagElement: @inheritDoc(166)", "Delete TextElement:  (167)", "Delete TagElement(168)", "Delete Javadoc(169)", "Delete SimpleName: Override(170)", "Delete MarkerAnnotation(171)", "Delete Modifier: public(172)", "Delete SimpleName: Object(173)", "Delete SimpleType: Object(174)", "Delete SimpleName: tryExecute(175)", "Delete Modifier: final(176)", "Delete SimpleName: Object(177)", "Delete SimpleType: Object(178)", "Delete SimpleName: obj(179)", "Delete SingleVariableDeclaration(180)", "Delete SimpleName: Object(181)", "Delete SimpleType: Object(182)", "Delete SimpleName: key(183)", "Delete SingleVariableDeclaration(184)", "Delete SimpleName: Object(185)", "Delete SimpleType: Object(186)", "Delete SimpleName: value(187)", "Delete SingleVariableDeclaration(188)", "Delete SimpleName: obj(189)", "Delete NullLiteral(190)", "Delete InfixExpression: !=(191)", "Delete SimpleName: method(192)", "Delete NullLiteral(193)", "Delete InfixExpression: !=(194)", "Delete InfixExpression: &&(195)", "Delete SimpleName: objectClass(196)", "Delete SimpleName: equals(197)", "Delete SimpleName: obj(198)", "Delete SimpleName: getClass(199)", "Delete MethodInvocation(200)", "Delete MethodInvocation(201)", "Delete InfixExpression: &&(202)", "Delete SimpleName: key(203)", "Delete NullLiteral(204)", "Delete InfixExpression: ==(205)", "Delete SimpleName: property(206)", "Delete SimpleName: getClass(207)", "Delete MethodInvocation(208)", "Delete SimpleName: equals(209)", "Delete SimpleName: key(210)", "Delete SimpleName: getClass(211)", "Delete MethodInvocation(212)", "Delete MethodInvocation(213)", "Delete InfixExpression: ||(214)", "Delete ParenthesizedExpression(215)", "Delete InfixExpression: &&(216)", "Delete SimpleName: SuppressWarnings(217)", "Delete StringLiteral: \"unchecked\"(218)", "Delete SingleMemberAnnotation(219)", "Delete Modifier: final(220)", "Delete SimpleName: Map(221)", "Delete SimpleType: Map(222)", "Delete SimpleName: Object(223)", "Delete SimpleType: Object(224)", "Delete SimpleName: Object(225)", "Delete SimpleType: Object(226)", "Delete ParameterizedType: Map<Object,Object>(227)", "Delete SimpleName: map(228)", "Delete SimpleName: Map(229)", "Delete SimpleType: Map(230)", "Delete SimpleName: Object(231)", "Delete SimpleType: Object(232)", "Delete SimpleName: Object(233)", "Delete SimpleType: Object(234)", "Delete ParameterizedType: Map<Object,Object>(235)", "Delete SimpleName: obj(236)", "Delete CastExpression(237)", "Delete ParenthesizedExpression(238)", "Delete VariableDeclarationFragment(239)", "Delete VariableDeclarationStatement(240)", "Delete SimpleName: map(241)", "Delete SimpleName: put(242)", "Delete SimpleName: key(243)", "Delete SimpleName: value(244)", "Delete MethodInvocation(245)", "Delete ExpressionStatement(246)", "Delete SimpleName: value(247)", "Delete ReturnStatement(248)", "Delete Block(249)", "Delete IfStatement(250)", "Delete SimpleName: TRY_FAILED(251)", "Delete ReturnStatement(252)", "Delete Block(253)", "Delete MethodDeclaration(254)", "Delete TextElement: Finds the method to perform 'set' on a map.(255)", "Delete TagElement(256)", "Delete SimpleName: clazz(257)", "Delete TextElement:  the class to introspect(258)", "Delete TagElement: @param(259)", "Delete TextElement:  a marker method, map.get(260)", "Delete TagElement: @return(261)", "Delete Javadoc(262)", "Delete Modifier: static(263)", "Delete QualifiedName: java.lang.reflect.Method(264)", "Delete SimpleType: java.lang.reflect.Method(265)", "Delete SimpleName: discover(266)", "Delete SimpleName: Class(267)", "Delete SimpleType: Class(268)", "Delete WildcardType: ?(269)", "Delete ParameterizedType: Class<?>(270)", "Delete SimpleName: clazz(271)", "Delete SingleVariableDeclaration(272)", "Delete SimpleName: Map(273)", "Delete SimpleType: Map(274)", "Delete TypeLiteral(275)", "Delete SimpleName: isAssignableFrom(276)", "Delete SimpleName: clazz(277)", "Delete MethodInvocation(278)", "Delete ParenthesizedExpression(279)", "Delete SimpleName: MAP_SET(280)", "Delete NullLiteral(281)", "Delete ConditionalExpression(282)", "Delete ReturnStatement(283)", "Delete Block(284)", "Delete MethodDeclaration(285)", "Delete TypeDeclaration: class(286)"]}}, {"MethodExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Array", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.InvocationTargetException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleName: args", "DEL MethodInvocation", "DEL TextElement: (This will always be one less than the number of", "DEL ArrayType: Class<?>[]", "DEL VariableDeclarationFragment", "DEL SimpleName: clazz", "DEL Javadoc", "DEL VariableDeclarationExpression", "DEL TagElement", "DEL SimpleName: method", "DEL SimpleType: Class", "DEL TextElement:  the result of the method invocation", "DEL IfStatement", "DEL SimpleName: obj", "DEL SimpleName: isVarArgs", "DEL Dimension", "DEL SimpleName: obj", "DEL SimpleName: m", "DEL SimpleName: index", "DEL TryStatement", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: MethodKey", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: args", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL SimpleType: Introspector", "DEL SimpleName: discover", "DEL TextElement: .", "DEL SimpleName: method", "DEL Block", "DEL SimpleName: tkey", "DEL SimpleName: i", "DEL ArrayType: Object[]", "DEL ParameterizedType: Class<?>", "DEL SimpleName: key", "DEL NumberLiteral: 1", "DEL ArrayAccess", "DEL Block", "DEL Javadoc", "DEL TextElement: Invokes the method to be executed.", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: Class", "DEL SimpleName: getComponentType", "DEL SimpleName: ArrayListWrapper", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleType: IllegalAccessException", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL Modifier: public", "DEL SimpleName: size", "DEL IfStatement", "DEL SimpleName: key", "DEL SuperConstructorInvocation", "DEL SimpleName: IllegalAccessException", "DEL SimpleType: Object", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL SimpleType: ArrayListWrapper", "DEL SimpleName: isArray", "DEL Modifier: private", "DEL SimpleName: Class", "DEL SimpleName: lastActual", "DEL Block", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: getParameterTypes", "DEL SimpleType: java.lang.reflect.Method", "DEL VariableDeclarationStatement", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL SimpleName: index", "DEL Modifier: private", "DEL SimpleType: String", "DEL TextElement: expected arguments.)", "DEL SimpleName: m", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL SimpleName: is", "DEL SimpleName: actual", "DEL SimpleName: Override", "DEL Block", "DEL SimpleType: Class", "DEL SimpleName: tryExecute", "DEL SimpleName: Object", "DEL SimpleName: name", "DEL SimpleType: ArrayListWrapper", "DEL MethodInvocation", "DEL SimpleName: o", "DEL VariableDeclarationFragment", "DEL SimpleName: getParameterTypes", "DEL Modifier: public", "DEL TextElement: to fit the method declaration.", "DEL InfixExpression: +", "DEL SimpleName: MethodExecutor", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: isArray", "DEL PostfixExpression: ++", "DEL SimpleName: equals", "DEL SimpleName: key", "DEL SimpleName: is", "DEL SimpleName: obj", "DEL Dimension", "DEL SimpleType: Class", "DEL InfixExpression: -", "DEL SimpleName: formal", "DEL SimpleName: name", "DEL SimpleName: m", "DEL SimpleName: m", "DEL SimpleName: obj", "DEL ArrayCreation", "DEL SimpleType: Object", "DEL SimpleName: newActual", "DEL TagElement: @param", "DEL SimpleName: obj", "DEL SimpleName: index", "DEL VariableDeclarationFragment", "DEL SimpleName: type", "DEL SimpleName: lastActual", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: String", "DEL TextElement:    The vararg class type (aka component type", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleType: Class", "DEL SimpleName: method", "DEL InfixExpression: ==", "DEL SimpleName: actual", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL InstanceofExpression", "DEL SimpleName: type", "DEL NumberLiteral: 0", "DEL SimpleName: key", "DEL SimpleName: xill", "DEL SimpleName: MethodExecutor", "DEL MethodInvocation", "DEL SimpleName: isArray", "DEL SimpleName: arraycopy", "DEL SimpleName: IllegalAccessException", "DEL TypeLiteral", "DEL TagElement: @return", "DEL TextElement: Specialized executor to invoke a method on an object.", "DEL SingleVariableDeclaration", "DEL SimpleName: index", "DEL SimpleType: Class", "DEL QualifiedName: actual.length", "DEL SimpleName: newActual", "DEL ClassInstanceCreation", "DEL SimpleName: set", "DEL SimpleName: Introspector", "DEL InfixExpression: ==", "DEL SimpleName: isVarArgMethod", "DEL TextElement: If the object is an array, an attempt will be made to find the", "DEL SimpleType: IllegalAccessException", "DEL Block", "DEL SimpleName: obj", "DEL NumberLiteral: 0", "DEL InfixExpression: -", "DEL ArrayAccess", "DEL SimpleName: Array", "DEL SingleVariableDeclaration", "DEL SimpleName: method", "DEL SimpleName: is", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TextElement: method as a static method of that class.", "DEL SimpleName: actual", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: index", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL TextElement:  The actual parameters being passed to this method", "DEL SimpleName: Array", "DEL TextElement:  ", "DEL WildcardType: ?", "DEL SimpleName: lastActual", "DEL SimpleName: newInstance", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Introspector", "DEL SimpleName: method", "DEL SimpleName: execute", "DEL IfStatement", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TextElement: Discovers a method for a ", "DEL ForStatement", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL TagElement", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: ArrayListWrapper", "DEL SimpleType: Object", "DEL IfStatement", "DEL TextElement:  the method arguments", "DEL SimpleName: last", "DEL SimpleName: tkey", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL TextElement: If the object is a class, an attempt will be made to find the", "DEL MethodDeclaration", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: MethodExecutor", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL SimpleName: index", "DEL SimpleName: ArrayListWrapper", "DEL SimpleName: MethodKey", "DEL TagElement", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleType: MethodKey", "DEL MethodInvocation", "DEL SimpleName: Array", "DEL Block", "DEL ArrayType: Object[]", "DEL Modifier: public", "DEL SimpleName: Object", "DEL ArrayAccess", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Object", "DEL ParameterizedType: Class<?>", "DEL SimpleName: index", "DEL SimpleName: m", "DEL SimpleName: isVarArgs", "DEL TextElement:  the method name", "DEL SimpleType: Object", "DEL SimpleType: InvocationTargetException", "DEL Dimension", "DEL SimpleName: formal", "DEL SimpleName: lastActual", "DEL Block", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: args", "DEL SimpleName: index", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: TRY_FAILED", "DEL MethodInvocation", "DEL SimpleName: formal", "DEL SimpleType: Class", "DEL SimpleName: size", "DEL Assignment: =", "DEL MethodInvocation", "DEL TextElement: Creates a new instance.", "DEL ReturnStatement", "DEL SimpleName: isVarArgs", "DEL Block", "DEL SimpleName: o", "DEL SimpleName: name", "DEL SimpleName: getMethod", "DEL ClassInstanceCreation", "DEL SimpleName: m", "DEL SimpleName: Class", "DEL SingleVariableDeclaration", "DEL SimpleType: MethodKey", "DEL ReturnStatement", "DEL InfixExpression: &&", "DEL SimpleName: o", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL SimpleName: args", "DEL Assignment: =", "DEL SimpleName: MethodKey", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: method", "DEL SimpleType: Object", "DEL SimpleName: i", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL ArrayAccess", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL InfixExpression: !=", "DEL QualifiedName: formal.length", "DEL SimpleName: name", "DEL ArrayType: Object[]", "DEL SimpleName: obj", "DEL Block", "DEL SimpleName: is", "DEL SimpleName: String", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL Dimension", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL ParameterizedType: Class<?>", "DEL TagElement: @param", "DEL SimpleName: type", "DEL ReturnStatement", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL SimpleName: actual", "DEL SimpleType: String", "DEL SimpleName: isVarArgMethod", "DEL Block", "DEL TextElement:  the object to introspect", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL BooleanLiteral: false", "DEL SimpleName: clazz", "DEL Dimension", "DEL TypeDeclaration: class", "DEL ArrayType: Object[]", "DEL TagElement: @param", "DEL SimpleName: Parameter", "DEL WildcardType: ?", "DEL SimpleName: is", "DEL SimpleName: key", "DEL SimpleName: InvocationTargetException", "DEL InfixExpression: &&", "DEL Assignment: =", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: System", "DEL ArrayAccess", "DEL SimpleName: objectClass", "DEL SimpleName: index", "DEL SimpleName: type", "DEL VariableDeclarationStatement", "DEL SimpleName: type", "DEL TextElement:  2.0", "DEL TagElement: @param", "DEL SimpleName: actual", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: i", "DEL SimpleName: m", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL CatchClause", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: lastActual", "DEL SimpleName: actual", "DEL SimpleName: size", "DEL VariableDeclarationStatement", "DEL InfixExpression: >=", "DEL SimpleName: set", "DEL SimpleName: m", "DEL SimpleName: is", "DEL ArrayType: Object[]", "DEL ReturnStatement", "DEL ArrayAccess", "DEL TextElement:  a filled up parameter (may contain a null method)", "DEL ReturnStatement", "DEL SimpleName: args", "DEL SimpleType: ArrayListWrapper", "DEL SimpleName: newActual", "DEL TextElement:  Method is inaccessible.", "DEL TextElement:  the introspector used to discover the method", "DEL ParameterizedType: Class<?>", "DEL WildcardType: ?", "DEL Modifier: final", "DEL TextElement: Whether this method handles varargs. ", "DEL SimpleName: execute", "DEL SimpleName: handleVarArg", "DEL SimpleName: args", "DEL SimpleType: AbstractExecutor.Method", "DEL ArrayType: Class<?>[]", "DEL SimpleName: index", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleName: size", "DEL ExpressionStatement", "DEL InfixExpression: -", "DEL CatchClause", "DEL SimpleName: index", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TagElement", "DEL MethodInvocation", "DEL Assignment: =", "DEL NullLiteral", "DEL Block", "DEL SimpleType: java.lang.reflect.Method", "DEL ParameterizedType: Class<?>", "DEL TypeLiteral", "DEL SimpleName: getMethod", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL Javadoc", "DEL MarkerAnnotation", "DEL TagElement: @param", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL SimpleType: MethodKey", "DEL SimpleName: args", "DEL TextElement:  Method body throws an exception.", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: index", "DEL TextElement: method in a List (see ", "DEL TextElement:  true if method is vararg, false otherwise", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: newActual", "DEL SimpleName: ArrayListWrapper", "DEL ExpressionStatement", "DEL SimpleName: Class", "DEL QualifiedName: formal.length", "DEL SimpleType: Parameter", "DEL SimpleName: args", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL Javadoc", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: args", "DEL SimpleName: last", "DEL ExpressionStatement", "DEL ArrayType: Object[]", "DEL SimpleName: m", "DEL TextElement:  the object to invoke the method upon", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL SimpleName: getDeclaringClass", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL SimpleType: Object", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL TextElement: <p>", "DEL SimpleName: is", "DEL SimpleName: getClass", "DEL SimpleName: name", "DEL SimpleName: getClass", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleName: method", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: i", "DEL TagElement: @return", "DEL NullLiteral", "DEL SimpleName: type", "DEL SimpleName: formal", "DEL SimpleName: newInstance", "DEL SimpleName: actual", "DEL IfStatement", "DEL SimpleName: handleVarArg", "DEL TagElement: @return", "DEL VariableDeclarationStatement", "DEL TextElement:  a the method to check", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL SimpleName: Object", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL TextElement: </p>", "DEL InfixExpression: &&", "DEL WildcardType: ?", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: Class", "DEL SimpleName: obj", "DEL TextElement: )", "DEL SimpleName: getClass", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL VariableDeclarationStatement", "DEL ArrayType: Object[]", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL IfStatement", "DEL SimpleName: invoke", "DEL SimpleName: MethodKey", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL TextElement:  the object to find the method in", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: obj", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL QualifiedName: formal.length", "DEL TextElement:  the method arguments", "DEL SimpleName: MethodKey", "DEL SimpleType: Class", "DEL TextElement: Determines if a method can accept a variable number of arguments.", "DEL WildcardType: ?", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: clazz", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SimpleName: method", "DEL TextElement:  the introspector used to discover the method", "DEL TextElement:  The actual parameters adjusted for the varargs in order", "DEL WildcardType: ?", "DEL SimpleName: Class", "DEL SimpleName: Object", "DEL SimpleType: Parameter", "DEL TagElement: @link", "DEL Block", "DEL SimpleName: getMethod", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: method", "DEL TagElement: @return", "DEL TextElement:  the method arguments", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleName: args", "DEL SimpleType: InvocationTargetException", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL TextElement: of the expected array arg)", "DEL SimpleName: String", "DEL SimpleName: discover", "DEL QualifiedName: args.length", "DEL SimpleName: Class", "DEL TagElement: @since", "DEL InfixExpression: ==", "DEL Modifier: final", "DEL MethodInvocation", "DEL NullLiteral", "DEL TextElement: </p>", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL SimpleName: invoke", "DEL QualifiedName: AbstractExecutor.Method", "DEL SimpleName: Parameter", "DEL SimpleName: lastActual", "DEL Block", "DEL Block", "DEL SimpleName: is", "DEL SimpleName: index", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL TextElement:  the name of the method to find", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: index", "DEL SimpleName: Override", "DEL PrimitiveType: int", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL InfixExpression: ==", "DEL Modifier: static", "DEL SimpleName: Class", "DEL Javadoc", "DEL SimpleName: Object", "DEL TextElement: Reassembles arguments if the method is a vararg method.", "DEL SimpleName: i", "DEL SimpleName: Introspector", "DEL SimpleName: args", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL TagElement: @link", "DEL TextElement:   The index of the vararg in the method declaration", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleName: xinvoke", "DEL SimpleName: o", "DEL SimpleName: getClass", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: formal", "DEL SimpleName: obj", "DEL SimpleName: args", "DEL PrimitiveType: boolean", "DEL SimpleName: args", "DEL Assignment: =", "DEL SimpleName: o", "DEL SimpleName: Array"]}]}}, {"MethodExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Array(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey(6)", "Delete ImportDeclaration(7)", "Delete TextElement: Specialized executor to invoke a method on an object.(8)", "Delete TagElement(9)", "Delete TextElement:  2.0(10)", "Delete TagElement: @since(11)", "Delete Javadoc(12)", "Delete Modifier: public(13)", "Delete Modifier: final(14)", "Delete SimpleName: MethodExecutor(15)", "Delete QualifiedName: AbstractExecutor.Method(16)", "Delete SimpleType: AbstractExecutor.Method(17)", "Delete TextElement: Whether this method handles varargs. (18)", "Delete TagElement(19)", "Delete Javadoc(20)", "Delete Modifier: private(21)", "Delete Modifier: final(22)", "Delete PrimitiveType: boolean(23)", "Delete SimpleName: isVarArgs(24)", "Delete VariableDeclarationFragment(25)", "Delete FieldDeclaration(26)", "Delete TextElement: Creates a new instance.(27)", "Delete TagElement(28)", "Delete SimpleName: is(29)", "Delete TextElement:  the introspector used to discover the method(30)", "Delete TagElement: @param(31)", "Delete SimpleName: obj(32)", "Delete TextElement:  the object to find the method in(33)", "Delete TagElement: @param(34)", "Delete SimpleName: name(35)", "Delete TextElement:  the method name(36)", "Delete TagElement: @param(37)", "Delete SimpleName: args(38)", "Delete TextElement:  the method arguments(39)", "Delete TagElement: @param(40)", "Delete Javadoc(41)", "Delete Modifier: public(42)", "Delete SimpleName: MethodExecutor(43)", "Delete SimpleName: Introspector(44)", "Delete SimpleType: Introspector(45)", "Delete SimpleName: is(46)", "Delete SingleVariableDeclaration(47)", "Delete SimpleName: Object(48)", "Delete SimpleType: Object(49)", "Delete SimpleName: obj(50)", "Delete SingleVariableDeclaration(51)", "Delete SimpleName: String(52)", "Delete SimpleType: String(53)", "Delete SimpleName: name(54)", "Delete SingleVariableDeclaration(55)", "Delete SimpleName: Object(56)", "Delete SimpleType: Object(57)", "Delete Dimension(58)", "Delete ArrayType: Object[](59)", "Delete SimpleName: args(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: obj(62)", "Delete SimpleName: getClass(63)", "Delete MethodInvocation(64)", "Delete SimpleName: discover(65)", "Delete SimpleName: is(66)", "Delete SimpleName: obj(67)", "Delete SimpleName: name(68)", "Delete SimpleName: args(69)", "Delete MethodInvocation(70)", "Delete SuperConstructorInvocation(71)", "Delete SimpleName: isVarArgs(72)", "Delete SimpleName: method(73)", "Delete NullLiteral(74)", "Delete InfixExpression: !=(75)", "Delete SimpleName: isVarArgMethod(76)", "Delete SimpleName: method(77)", "Delete MethodInvocation(78)", "Delete InfixExpression: &&(79)", "Delete Assignment: =(80)", "Delete ExpressionStatement(81)", "Delete Block(82)", "Delete MethodDeclaration(83)", "Delete TextElement: Invokes the method to be executed.(84)", "Delete TagElement(85)", "Delete SimpleName: o(86)", "Delete TextElement:  the object to invoke the method upon(87)", "Delete TagElement: @param(88)", "Delete SimpleName: args(89)", "Delete TextElement:  the method arguments(90)", "Delete TagElement: @param(91)", "Delete TextElement:  the result of the method invocation(92)", "Delete TagElement: @return(93)", "Delete SimpleName: IllegalAccessException(94)", "Delete TextElement:  Method is inaccessible.(95)", "Delete TagElement: @throws(96)", "Delete SimpleName: InvocationTargetException(97)", "Delete TextElement:  Method body throws an exception.(98)", "Delete TagElement: @throws(99)", "Delete Javadoc(100)", "Delete SimpleName: Override(101)", "Delete MarkerAnnotation(102)", "Delete Modifier: public(103)", "Delete SimpleName: Object(104)", "Delete SimpleType: Object(105)", "Delete SimpleName: execute(106)", "Delete SimpleName: Object(107)", "Delete SimpleType: Object(108)", "Delete SimpleName: o(109)", "Delete SingleVariableDeclaration(110)", "Delete SimpleName: Object(111)", "Delete SimpleType: Object(112)", "Delete Dimension(113)", "Delete ArrayType: Object[](114)", "Delete SimpleName: args(115)", "Delete SingleVariableDeclaration(116)", "Delete SimpleName: IllegalAccessException(117)", "Delete SimpleType: IllegalAccessException(118)", "Delete SimpleName: InvocationTargetException(119)", "Delete SimpleType: InvocationTargetException(120)", "Delete SimpleName: isVarArgs(121)", "Delete SimpleName: Class(122)", "Delete SimpleType: Class(123)", "Delete WildcardType: ?(124)", "Delete ParameterizedType: Class<?>(125)", "Delete Dimension(126)", "Delete ArrayType: Class<?>[](127)", "Delete SimpleName: formal(128)", "Delete SimpleName: method(129)", "Delete SimpleName: getParameterTypes(130)", "Delete MethodInvocation(131)", "Delete VariableDeclarationFragment(132)", "Delete VariableDeclarationStatement(133)", "Delete PrimitiveType: int(134)", "Delete SimpleName: index(135)", "Delete QualifiedName: formal.length(136)", "Delete NumberLiteral: 1(137)", "Delete InfixExpression: -(138)", "Delete VariableDeclarationFragment(139)", "Delete VariableDeclarationStatement(140)", "Delete SimpleName: Class(141)", "Delete SimpleType: Class(142)", "Delete WildcardType: ?(143)", "Delete ParameterizedType: Class<?>(144)", "Delete SimpleName: type(145)", "Delete SimpleName: formal(146)", "Delete SimpleName: index(147)", "Delete ArrayAccess(148)", "Delete SimpleName: getComponentType(149)", "Delete MethodInvocation(150)", "Delete VariableDeclarationFragment(151)", "Delete VariableDeclarationStatement(152)", "Delete QualifiedName: args.length(153)", "Delete SimpleName: index(154)", "Delete InfixExpression: >=(155)", "Delete SimpleName: args(156)", "Delete SimpleName: handleVarArg(157)", "Delete SimpleName: type(158)", "Delete SimpleName: index(159)", "Delete SimpleName: args(160)", "Delete MethodInvocation(161)", "Delete Assignment: =(162)", "Delete ExpressionStatement(163)", "Delete Block(164)", "Delete IfStatement(165)", "Delete Block(166)", "Delete IfStatement(167)", "Delete SimpleName: method(168)", "Delete SimpleName: getDeclaringClass(169)", "Delete MethodInvocation(170)", "Delete SimpleName: ArrayListWrapper(171)", "Delete SimpleType: ArrayListWrapper(172)", "Delete TypeLiteral(173)", "Delete InfixExpression: ==(174)", "Delete SimpleName: o(175)", "Delete SimpleName: getClass(176)", "Delete MethodInvocation(177)", "Delete SimpleName: isArray(178)", "Delete MethodInvocation(179)", "Delete InfixExpression: &&(180)", "Delete SimpleName: method(181)", "Delete SimpleName: invoke(182)", "Delete SimpleName: ArrayListWrapper(183)", "Delete SimpleType: ArrayListWrapper(184)", "Delete SimpleName: o(185)", "Delete ClassInstanceCreation(186)", "Delete SimpleName: args(187)", "Delete MethodInvocation(188)", "Delete ReturnStatement(189)", "Delete Block(190)", "Delete SimpleName: method(191)", "Delete SimpleName: invoke(192)", "Delete SimpleName: o(193)", "Delete SimpleName: args(194)", "Delete MethodInvocation(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete IfStatement(198)", "Delete Block(199)", "Delete MethodDeclaration(200)", "Delete TagElement: @inheritDoc(201)", "Delete TextElement:  (202)", "Delete TagElement(203)", "Delete Javadoc(204)", "Delete SimpleName: Override(205)", "Delete MarkerAnnotation(206)", "Delete Modifier: public(207)", "Delete SimpleName: Object(208)", "Delete SimpleType: Object(209)", "Delete SimpleName: tryExecute(210)", "Delete SimpleName: String(211)", "Delete SimpleType: String(212)", "Delete SimpleName: name(213)", "Delete SingleVariableDeclaration(214)", "Delete SimpleName: Object(215)", "Delete SimpleType: Object(216)", "Delete SimpleName: obj(217)", "Delete SingleVariableDeclaration(218)", "Delete SimpleName: Object(219)", "Delete SimpleType: Object(220)", "Delete Dimension(221)", "Delete ArrayType: Object[](222)", "Delete SimpleName: args(223)", "Delete SingleVariableDeclaration(224)", "Delete SimpleName: MethodKey(225)", "Delete SimpleType: MethodKey(226)", "Delete SimpleName: tkey(227)", "Delete SimpleName: MethodKey(228)", "Delete SimpleType: MethodKey(229)", "Delete SimpleName: name(230)", "Delete SimpleName: args(231)", "Delete ClassInstanceCreation(232)", "Delete VariableDeclarationFragment(233)", "Delete VariableDeclarationStatement(234)", "Delete SimpleName: objectClass(235)", "Delete SimpleName: equals(236)", "Delete SimpleName: obj(237)", "Delete SimpleName: getClass(238)", "Delete MethodInvocation(239)", "Delete MethodInvocation(240)", "Delete SimpleName: tkey(241)", "Delete SimpleName: equals(242)", "Delete SimpleName: key(243)", "Delete MethodInvocation(244)", "Delete InfixExpression: &&(245)", "Delete SimpleName: execute(246)", "Delete SimpleName: obj(247)", "Delete SimpleName: args(248)", "Delete MethodInvocation(249)", "Delete ReturnStatement(250)", "Delete Block(251)", "Delete SimpleName: InvocationTargetException(252)", "Delete SimpleType: InvocationTargetException(253)", "Delete SimpleName: xinvoke(254)", "Delete SingleVariableDeclaration(255)", "Delete SimpleName: TRY_FAILED(256)", "Delete ReturnStatement(257)", "Delete Block(258)", "Delete CatchClause(259)", "Delete SimpleName: IllegalAccessException(260)", "Delete SimpleType: IllegalAccessException(261)", "Delete SimpleName: xill(262)", "Delete SingleVariableDeclaration(263)", "Delete SimpleName: TRY_FAILED(264)", "Delete ReturnStatement(265)", "Delete Block(266)", "Delete CatchClause(267)", "Delete TryStatement(268)", "Delete Block(269)", "Delete IfStatement(270)", "Delete SimpleName: TRY_FAILED(271)", "Delete ReturnStatement(272)", "Delete Block(273)", "Delete MethodDeclaration(274)", "Delete TextElement: Discovers a method for a (275)", "Delete SimpleName: MethodExecutor(276)", "Delete TagElement: @link(277)", "Delete TextElement: .(278)", "Delete TextElement: <p>(279)", "Delete TextElement: If the object is an array, an attempt will be made to find the(280)", "Delete TextElement: method in a List (see (281)", "Delete SimpleName: ArrayListWrapper(282)", "Delete TagElement: @link(283)", "Delete TextElement: )(284)", "Delete TextElement: </p>(285)", "Delete TextElement: <p>(286)", "Delete TextElement: If the object is a class, an attempt will be made to find the(287)", "Delete TextElement: method as a static method of that class.(288)", "Delete TextElement: </p>(289)", "Delete TagElement(290)", "Delete SimpleName: is(291)", "Delete TextElement:  the introspector used to discover the method(292)", "Delete TagElement: @param(293)", "Delete SimpleName: obj(294)", "Delete TextElement:  the object to introspect(295)", "Delete TagElement: @param(296)", "Delete SimpleName: method(297)", "Delete TextElement:  the name of the method to find(298)", "Delete TagElement: @param(299)", "Delete SimpleName: args(300)", "Delete TextElement:  the method arguments(301)", "Delete TagElement: @param(302)", "Delete TextElement:  a filled up parameter (may contain a null method)(303)", "Delete TagElement: @return(304)", "Delete Javadoc(305)", "Delete Modifier: private(306)", "Delete Modifier: static(307)", "Delete SimpleName: Parameter(308)", "Delete SimpleType: Parameter(309)", "Delete SimpleName: discover(310)", "Delete SimpleName: Introspector(311)", "Delete SimpleType: Introspector(312)", "Delete SimpleName: is(313)", "Delete SingleVariableDeclaration(314)", "Delete SimpleName: Object(315)", "Delete SimpleType: Object(316)", "Delete SimpleName: obj(317)", "Delete SingleVariableDeclaration(318)", "Delete SimpleName: String(319)", "Delete SimpleType: String(320)", "Delete SimpleName: method(321)", "Delete SingleVariableDeclaration(322)", "Delete SimpleName: Object(323)", "Delete SimpleType: Object(324)", "Delete Dimension(325)", "Delete ArrayType: Object[](326)", "Delete SimpleName: args(327)", "Delete SingleVariableDeclaration(328)", "Delete Modifier: final(329)", "Delete SimpleName: Class(330)", "Delete SimpleType: Class(331)", "Delete WildcardType: ?(332)", "Delete ParameterizedType: Class<?>(333)", "Delete SimpleName: clazz(334)", "Delete SimpleName: obj(335)", "Delete SimpleName: getClass(336)", "Delete MethodInvocation(337)", "Delete VariableDeclarationFragment(338)", "Delete VariableDeclarationStatement(339)", "Delete Modifier: final(340)", "Delete SimpleName: MethodKey(341)", "Delete SimpleType: MethodKey(342)", "Delete SimpleName: key(343)", "Delete SimpleName: MethodKey(344)", "Delete SimpleType: MethodKey(345)", "Delete SimpleName: method(346)", "Delete SimpleName: args(347)", "Delete ClassInstanceCreation(348)", "Delete VariableDeclarationFragment(349)", "Delete VariableDeclarationStatement(350)", "Delete QualifiedName: java.lang.reflect.Method(351)", "Delete SimpleType: java.lang.reflect.Method(352)", "Delete SimpleName: m(353)", "Delete SimpleName: is(354)", "Delete SimpleName: getMethod(355)", "Delete SimpleName: clazz(356)", "Delete SimpleName: key(357)", "Delete MethodInvocation(358)", "Delete VariableDeclarationFragment(359)", "Delete VariableDeclarationStatement(360)", "Delete SimpleName: m(361)", "Delete NullLiteral(362)", "Delete InfixExpression: ==(363)", "Delete SimpleName: clazz(364)", "Delete SimpleName: isArray(365)", "Delete MethodInvocation(366)", "Delete InfixExpression: &&(367)", "Delete SimpleName: m(368)", "Delete SimpleName: is(369)", "Delete SimpleName: getMethod(370)", "Delete SimpleName: ArrayListWrapper(371)", "Delete SimpleType: ArrayListWrapper(372)", "Delete TypeLiteral(373)", "Delete SimpleName: key(374)", "Delete MethodInvocation(375)", "Delete Assignment: =(376)", "Delete ExpressionStatement(377)", "Delete Block(378)", "Delete IfStatement(379)", "Delete SimpleName: m(380)", "Delete NullLiteral(381)", "Delete InfixExpression: ==(382)", "Delete SimpleName: obj(383)", "Delete SimpleName: Class(384)", "Delete SimpleType: Class(385)", "Delete WildcardType: ?(386)", "Delete ParameterizedType: Class<?>(387)", "Delete InstanceofExpression(388)", "Delete InfixExpression: &&(389)", "Delete SimpleName: m(390)", "Delete SimpleName: is(391)", "Delete SimpleName: getMethod(392)", "Delete SimpleName: Class(393)", "Delete SimpleType: Class(394)", "Delete WildcardType: ?(395)", "Delete ParameterizedType: Class<?>(396)", "Delete SimpleName: obj(397)", "Delete CastExpression(398)", "Delete SimpleName: key(399)", "Delete MethodInvocation(400)", "Delete Assignment: =(401)", "Delete ExpressionStatement(402)", "Delete Block(403)", "Delete IfStatement(404)", "Delete SimpleName: Parameter(405)", "Delete SimpleType: Parameter(406)", "Delete SimpleName: m(407)", "Delete SimpleName: key(408)", "Delete ClassInstanceCreation(409)", "Delete ReturnStatement(410)", "Delete Block(411)", "Delete MethodDeclaration(412)", "Delete TextElement: Reassembles arguments if the method is a vararg method.(413)", "Delete TagElement(414)", "Delete SimpleName: type(415)", "Delete TextElement:    The vararg class type (aka component type(416)", "Delete TextElement: of the expected array arg)(417)", "Delete TagElement: @param(418)", "Delete SimpleName: index(419)", "Delete TextElement:   The index of the vararg in the method declaration(420)", "Delete TextElement: (This will always be one less than the number of(421)", "Delete TextElement: expected arguments.)(422)", "Delete TagElement: @param(423)", "Delete SimpleName: actual(424)", "Delete TextElement:  The actual parameters being passed to this method(425)", "Delete TagElement: @param(426)", "Delete TextElement:  The actual parameters adjusted for the varargs in order(427)", "Delete TextElement: to fit the method declaration.(428)", "Delete TagElement: @return(429)", "Delete Javadoc(430)", "Delete Modifier: protected(431)", "Delete SimpleName: Object(432)", "Delete SimpleType: Object(433)", "Delete Dimension(434)", "Delete ArrayType: Object[](435)", "Delete SimpleName: handleVarArg(436)", "Delete SimpleName: Class(437)", "Delete SimpleType: Class(438)", "Delete WildcardType: ?(439)", "Delete ParameterizedType: Class<?>(440)", "Delete SimpleName: type(441)", "Delete SingleVariableDeclaration(442)", "Delete PrimitiveType: int(443)", "Delete SimpleName: index(444)", "Delete SingleVariableDeclaration(445)", "Delete SimpleName: Object(446)", "Delete SimpleType: Object(447)", "Delete Dimension(448)", "Delete ArrayType: Object[](449)", "Delete SimpleName: actual(450)", "Delete SingleVariableDeclaration(451)", "Delete Modifier: final(452)", "Delete PrimitiveType: int(453)", "Delete SimpleName: size(454)", "Delete QualifiedName: actual.length(455)", "Delete SimpleName: index(456)", "Delete InfixExpression: -(457)", "Delete VariableDeclarationFragment(458)", "Delete VariableDeclarationStatement(459)", "Delete SimpleName: size(460)", "Delete NumberLiteral: 1(461)", "Delete InfixExpression: ==(462)", "Delete SimpleName: actual(463)", "Delete SimpleName: index(464)", "Delete ArrayAccess(465)", "Delete NullLiteral(466)", "Delete InfixExpression: !=(467)", "Delete SimpleName: Object(468)", "Delete SimpleType: Object(469)", "Delete SimpleName: lastActual(470)", "Delete SimpleName: Array(471)", "Delete SimpleName: newInstance(472)", "Delete SimpleName: type(473)", "Delete NumberLiteral: 1(474)", "Delete MethodInvocation(475)", "Delete VariableDeclarationFragment(476)", "Delete VariableDeclarationStatement(477)", "Delete SimpleName: Array(478)", "Delete SimpleName: set(479)", "Delete SimpleName: lastActual(480)", "Delete NumberLiteral: 0(481)", "Delete SimpleName: actual(482)", "Delete SimpleName: index(483)", "Delete ArrayAccess(484)", "Delete MethodInvocation(485)", "Delete ExpressionStatement(486)", "Delete SimpleName: actual(487)", "Delete SimpleName: index(488)", "Delete ArrayAccess(489)", "Delete SimpleName: lastActual(490)", "Delete Assignment: =(491)", "Delete ExpressionStatement(492)", "Delete Block(493)", "Delete IfStatement(494)", "Delete Block(495)", "Delete SimpleName: Object(496)", "Delete SimpleType: Object(497)", "Delete SimpleName: lastActual(498)", "Delete SimpleName: Array(499)", "Delete SimpleName: newInstance(500)", "Delete SimpleName: type(501)", "Delete SimpleName: size(502)", "Delete MethodInvocation(503)", "Delete VariableDeclarationFragment(504)", "Delete VariableDeclarationStatement(505)", "Delete PrimitiveType: int(506)", "Delete SimpleName: i(507)", "Delete NumberLiteral: 0(508)", "Delete VariableDeclarationFragment(509)", "Delete VariableDeclarationExpression(510)", "Delete SimpleName: i(511)", "Delete SimpleName: size(512)", "Delete InfixExpression: <(513)", "Delete SimpleName: i(514)", "Delete PostfixExpression: ++(515)", "Delete SimpleName: Array(516)", "Delete SimpleName: set(517)", "Delete SimpleName: lastActual(518)", "Delete SimpleName: i(519)", "Delete SimpleName: actual(520)", "Delete SimpleName: index(521)", "Delete SimpleName: i(522)", "Delete InfixExpression: +(523)", "Delete ArrayAccess(524)", "Delete MethodInvocation(525)", "Delete ExpressionStatement(526)", "Delete Block(527)", "Delete ForStatement(528)", "Delete SimpleName: Object(529)", "Delete SimpleType: Object(530)", "Delete Dimension(531)", "Delete ArrayType: Object[](532)", "Delete SimpleName: newActual(533)", "Delete SimpleName: Object(534)", "Delete SimpleType: Object(535)", "Delete Dimension(536)", "Delete ArrayType: Object[](537)", "Delete SimpleName: index(538)", "Delete NumberLiteral: 1(539)", "Delete InfixExpression: +(540)", "Delete ArrayCreation(541)", "Delete VariableDeclarationFragment(542)", "Delete VariableDeclarationStatement(543)", "Delete SimpleName: System(544)", "Delete SimpleName: arraycopy(545)", "Delete SimpleName: actual(546)", "Delete NumberLiteral: 0(547)", "Delete SimpleName: newActual(548)", "Delete NumberLiteral: 0(549)", "Delete SimpleName: index(550)", "Delete MethodInvocation(551)", "Delete ExpressionStatement(552)", "Delete SimpleName: newActual(553)", "Delete SimpleName: index(554)", "Delete ArrayAccess(555)", "Delete SimpleName: lastActual(556)", "Delete Assignment: =(557)", "Delete ExpressionStatement(558)", "Delete SimpleName: actual(559)", "Delete SimpleName: newActual(560)", "Delete Assignment: =(561)", "Delete ExpressionStatement(562)", "Delete Block(563)", "Delete IfStatement(564)", "Delete SimpleName: actual(565)", "Delete ReturnStatement(566)", "Delete Block(567)", "Delete MethodDeclaration(568)", "Delete TextElement: Determines if a method can accept a variable number of arguments.(569)", "Delete TagElement(570)", "Delete SimpleName: m(571)", "Delete TextElement:  a the method to check(572)", "Delete TagElement: @param(573)", "Delete TextElement:  true if method is vararg, false otherwise(574)", "Delete TagElement: @return(575)", "Delete Javadoc(576)", "Delete Modifier: private(577)", "Delete Modifier: static(578)", "Delete PrimitiveType: boolean(579)", "Delete SimpleName: isVarArgMethod(580)", "Delete QualifiedName: java.lang.reflect.Method(581)", "Delete SimpleType: java.lang.reflect.Method(582)", "Delete SimpleName: m(583)", "Delete SingleVariableDeclaration(584)", "Delete SimpleName: Class(585)", "Delete SimpleType: Class(586)", "Delete WildcardType: ?(587)", "Delete ParameterizedType: Class<?>(588)", "Delete Dimension(589)", "Delete ArrayType: Class<?>[](590)", "Delete SimpleName: formal(591)", "Delete SimpleName: m(592)", "Delete SimpleName: getParameterTypes(593)", "Delete MethodInvocation(594)", "Delete VariableDeclarationFragment(595)", "Delete VariableDeclarationStatement(596)", "Delete SimpleName: formal(597)", "Delete NullLiteral(598)", "Delete InfixExpression: ==(599)", "Delete QualifiedName: formal.length(600)", "Delete NumberLiteral: 0(601)", "Delete InfixExpression: ==(602)", "Delete InfixExpression: ||(603)", "Delete BooleanLiteral: false(604)", "Delete ReturnStatement(605)", "Delete Block(606)", "Delete SimpleName: Class(607)", "Delete SimpleType: Class(608)", "Delete WildcardType: ?(609)", "Delete ParameterizedType: Class<?>(610)", "Delete SimpleName: last(611)", "Delete SimpleName: formal(612)", "Delete QualifiedName: formal.length(613)", "Delete NumberLiteral: 1(614)", "Delete InfixExpression: -(615)", "Delete ArrayAccess(616)", "Delete VariableDeclarationFragment(617)", "Delete VariableDeclarationStatement(618)", "Delete SimpleName: last(619)", "Delete SimpleName: isArray(620)", "Delete MethodInvocation(621)", "Delete ReturnStatement(622)", "Delete Block(623)", "Delete IfStatement(624)", "Delete Block(625)", "Delete MethodDeclaration(626)", "Delete TypeDeclaration: class(627)"]}}, {"PropertyGetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement: <p>The method to be found should be named \"get{P,p}property.</p>", "DEL SimpleName: sb", "DEL TextElement: Discovers the method for a ", "DEL SimpleType: java.lang.reflect.Method", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: method", "DEL TextElement:  the introspector", "DEL SimpleName: sb", "DEL VariableDeclarationStatement", "DEL SimpleName: String", "DEL SimpleName: property", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: o", "DEL TagElement", "DEL SimpleName: TRY_FAILED", "DEL Modifier: public", "DEL SimpleName: clazz", "DEL VariableDeclarationStatement", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: sb", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: clazz", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: EMPTY_PARAMS", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: Class", "DEL SimpleName: property", "DEL SimpleType: Object", "DEL SimpleName: identifier", "DEL SimpleName: Override", "DEL SimpleName: c", "DEL CatchClause", "DEL TextElement:  2.0", "DEL Block", "DEL ArrayInitializer", "DEL Modifier: public", "DEL SimpleName: o", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: property", "DEL SimpleName: TRY_FAILED", "DEL MethodDeclaration", "DEL SimpleName: tryExecute", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL SingleVariableDeclaration", "DEL TextElement:  the method if found, null otherwise", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL SimpleType: IllegalAccessException", "DEL SimpleName: sb", "DEL SimpleName: discover", "DEL SimpleName: String", "DEL SimpleType: Introspector", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: start", "DEL SimpleType: java.lang.reflect.Method", "DEL SimpleName: String", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: Class", "DEL SimpleType: Object", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL WildcardType: ?", "DEL WildcardType: ?", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL SimpleName: EMPTY_PARAMS", "DEL SimpleName: start", "DEL SimpleName: identifier", "DEL TryStatement", "DEL SimpleName: Override", "DEL SimpleName: setCharAt", "DEL SimpleType: Introspector", "DEL ParameterizedType: Class<?>", "DEL SimpleName: is", "DEL QualifiedName: java.lang.reflect.Method", "DEL SimpleName: Introspector", "DEL TextElement: Base method for boolean & object property get.", "DEL TextElement:  The {get,is}{p,P}roperty method if one exists, null otherwise.", "DEL TextElement:  the introspector", "DEL SimpleName: which", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleName: Introspector", "DEL SimpleName: toLowerCase", "DEL Modifier: final", "DEL SimpleName: sb", "DEL CastExpression", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: getTargetProperty", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleType: StringBuilder", "DEL SingleVariableDeclaration", "DEL SimpleName: clazz", "DEL SimpleType: InvocationTargetException", "DEL TypeDeclaration: class", "DEL SimpleName: PropertyGetExecutor", "DEL Block", "DEL SimpleName: setCharAt", "DEL SimpleType: Object", "DEL SimpleName: o", "DEL InfixExpression: &&", "DEL SimpleName: c", "DEL Modifier: final", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: o", "DEL InfixExpression: &&", "DEL TagElement: @param", "DEL Block", "DEL Block", "DEL SimpleName: EMPTY_PARAMS", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleName: is", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL Assignment: =", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL SimpleName: identifier", "DEL SimpleType: Class", "DEL TextElement:  \"is\" or \"get\" for boolean or object", "DEL SimpleName: TRY_FAILED", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: start", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: method", "DEL SimpleName: which", "DEL SimpleName: getMethod", "DEL TagElement", "DEL SimpleName: execute", "DEL SimpleName: getClass", "DEL SimpleName: toString", "DEL SimpleName: is", "DEL SimpleName: property", "DEL ParameterizedType: Class<?>", "DEL Javadoc", "DEL TagElement: @since", "DEL MarkerAnnotation", "DEL NullLiteral", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL TagElement: @param", "DEL SimpleName: clazz", "DEL SimpleName: append", "DEL ArrayType: Object[]", "DEL Javadoc", "DEL SimpleName: clazz", "DEL SimpleName: String", "DEL NullLiteral", "DEL SimpleName: method", "DEL SimpleName: invoke", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: getMethod", "DEL SimpleName: InvocationTargetException", "DEL SingleVariableDeclaration", "DEL SimpleName: property", "DEL SimpleName: method", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: Character", "DEL NullLiteral", "DEL SimpleType: Introspector", "DEL SimpleName: discover", "DEL TagElement: @param", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleType: java.lang.reflect.Method", "DEL Dimension", "DEL SimpleName: is", "DEL SimpleName: clazz", "DEL SimpleName: c", "DEL SimpleName: PropertyGetExecutor", "DEL ParameterizedType: Class<?>", "DEL ReturnStatement", "DEL SimpleName: xill", "DEL SimpleName: PropertyGet", "DEL ClassInstanceCreation", "DEL Dimension", "DEL TextElement:  The property being addressed.", "DEL SimpleName: Character", "DEL SingleVariableDeclaration", "DEL SimpleName: toString", "DEL Block", "DEL TextElement: Specialized executor to get a property from an object.", "DEL FieldDeclaration", "DEL QualifiedName: AbstractExecutor.Get", "DEL TagElement: @param", "DEL SimpleName: is", "DEL ReturnStatement", "DEL SimpleName: sb", "DEL SimpleType: String", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: IllegalAccessException", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: property", "DEL SimpleName: discoverGet", "DEL SimpleName: which", "DEL SingleVariableDeclaration", "DEL SimpleName: start", "DEL MethodInvocation", "DEL Modifier: private", "DEL CatchClause", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: discoverGet", "DEL SimpleType: AbstractExecutor.Get", "DEL SimpleType: String", "DEL TagElement", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SimpleName: is", "DEL SimpleType: Object", "DEL SimpleType: String", "DEL TextElement:  the property name to find", "DEL TagElement: @param", "DEL SimpleName: is", "DEL TagElement: @inheritDoc", "DEL SimpleName: clazz", "DEL TextElement: Creates an instance by attempting discovery of the get method.", "DEL SimpleName: clazz", "DEL SimpleName: identifier", "DEL Block", "DEL SimpleName: xinvoke", "DEL TextElement:  ", "DEL TextElement:  the property to get", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: method", "DEL SimpleName: which", "DEL Javadoc", "DEL SimpleName: InvocationTargetException", "DEL TextElement:  the introspector", "DEL SimpleName: identifier", "DEL NullLiteral", "DEL SimpleType: Object", "DEL TextElement:  The class being examined.", "DEL SimpleType: InvocationTargetException", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL TagElement: @inheritDoc", "DEL TextElement:  the class to find the get method from", "DEL MethodInvocation", "DEL SimpleName: invoke", "DEL SimpleName: identifier", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL SimpleName: property", "DEL SimpleName: objectClass", "DEL SimpleName: equals", "DEL SimpleName: clazz", "DEL SimpleName: property", "DEL TextElement:  ", "DEL SimpleName: StringBuilder", "DEL TagElement: @param", "DEL IfStatement", "DEL StringLiteral: \"get\"", "DEL SimpleName: charAt", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement: A static signature for method(). ", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: is", "DEL ArrayType: Object[]", "DEL TextElement:  ", "DEL Modifier: public", "DEL SimpleName: toUpperCase", "DEL Block", "DEL ArrayType: Object[]", "DEL SimpleName: Introspector", "DEL SimpleName: Object", "DEL SimpleType: IllegalAccessException", "DEL SimpleType: StringBuilder", "DEL SimpleName: clazz", "DEL SimpleType: Class", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: o", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: method", "DEL ConditionalExpression", "DEL SimpleName: method", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SuperConstructorInvocation", "DEL SimpleName: Object", "DEL SimpleName: length", "DEL Block", "DEL Javadoc", "DEL SimpleName: property", "DEL InfixExpression: !=", "DEL PrimitiveType: char", "DEL CastExpression", "DEL Block", "DEL NullLiteral", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: sb", "DEL Dimension", "DEL TextElement: .", "DEL Modifier: public", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: is", "DEL SimpleName: o", "DEL SimpleName: String", "DEL QualifiedName: java.lang.reflect.Method", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: Object", "DEL FieldDeclaration", "DEL TextElement: The property. ", "DEL NullLiteral", "DEL MarkerAnnotation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: is", "DEL Modifier: static", "DEL Javadoc", "DEL TextElement:  the class to introspect", "DEL SimpleName: property", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration"]}]}}, {"PropertyGetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Specialized executor to get a property from an object.(4)", "Delete TagElement(5)", "Delete TextElement:  2.0(6)", "Delete TagElement: @since(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete Modifier: final(10)", "Delete SimpleName: PropertyGetExecutor(11)", "Delete QualifiedName: AbstractExecutor.Get(12)", "Delete SimpleType: AbstractExecutor.Get(13)", "Delete TextElement: A static signature for method(). (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: private(17)", "Delete Modifier: static(18)", "Delete Modifier: final(19)", "Delete SimpleName: Object(20)", "Delete SimpleType: Object(21)", "Delete Dimension(22)", "Delete ArrayType: Object[](23)", "Delete SimpleName: EMPTY_PARAMS(24)", "Delete ArrayInitializer(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: The property. (28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete Modifier: private(31)", "Delete Modifier: final(32)", "Delete SimpleName: String(33)", "Delete SimpleType: String(34)", "Delete SimpleName: property(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: Creates an instance by attempting discovery of the get method.(38)", "Delete TagElement(39)", "Delete SimpleName: is(40)", "Delete TextElement:  the introspector(41)", "Delete TagElement: @param(42)", "Delete SimpleName: clazz(43)", "Delete TextElement:  the class to introspect(44)", "Delete TagElement: @param(45)", "Delete SimpleName: identifier(46)", "Delete TextElement:  the property to get(47)", "Delete TagElement: @param(48)", "Delete Javadoc(49)", "Delete Modifier: public(50)", "Delete SimpleName: PropertyGetExecutor(51)", "Delete SimpleName: Introspector(52)", "Delete SimpleType: Introspector(53)", "Delete SimpleName: is(54)", "Delete SingleVariableDeclaration(55)", "Delete SimpleName: Class(56)", "Delete SimpleType: Class(57)", "Delete WildcardType: ?(58)", "Delete ParameterizedType: Class<?>(59)", "Delete SimpleName: clazz(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: String(62)", "Delete SimpleType: String(63)", "Delete SimpleName: identifier(64)", "Delete SingleVariableDeclaration(65)", "Delete SimpleName: clazz(66)", "Delete SimpleName: discover(67)", "Delete SimpleName: is(68)", "Delete SimpleName: clazz(69)", "Delete SimpleName: identifier(70)", "Delete MethodInvocation(71)", "Delete SuperConstructorInvocation(72)", "Delete SimpleName: property(73)", "Delete SimpleName: identifier(74)", "Delete Assignment: =(75)", "Delete ExpressionStatement(76)", "Delete Block(77)", "Delete MethodDeclaration(78)", "Delete TagElement: @inheritDoc(79)", "Delete TextElement:  (80)", "Delete TagElement(81)", "Delete Javadoc(82)", "Delete SimpleName: Override(83)", "Delete MarkerAnnotation(84)", "Delete Modifier: public(85)", "Delete SimpleName: Object(86)", "Delete SimpleType: Object(87)", "Delete SimpleName: getTargetProperty(88)", "Delete SimpleName: property(89)", "Delete ReturnStatement(90)", "Delete Block(91)", "Delete MethodDeclaration(92)", "Delete TagElement: @inheritDoc(93)", "Delete TextElement:  (94)", "Delete TagElement(95)", "Delete Javadoc(96)", "Delete SimpleName: Override(97)", "Delete MarkerAnnotation(98)", "Delete Modifier: public(99)", "Delete SimpleName: Object(100)", "Delete SimpleType: Object(101)", "Delete SimpleName: execute(102)", "Delete SimpleName: Object(103)", "Delete SimpleType: Object(104)", "Delete SimpleName: o(105)", "Delete SingleVariableDeclaration(106)", "Delete SimpleName: IllegalAccessException(107)", "Delete SimpleType: IllegalAccessException(108)", "Delete SimpleName: InvocationTargetException(109)", "Delete SimpleType: InvocationTargetException(110)", "Delete SimpleName: method(111)", "Delete NullLiteral(112)", "Delete InfixExpression: ==(113)", "Delete NullLiteral(114)", "Delete SimpleName: method(115)", "Delete SimpleName: invoke(116)", "Delete SimpleName: o(117)", "Delete SimpleName: Object(118)", "Delete SimpleType: Object(119)", "Delete Dimension(120)", "Delete ArrayType: Object[](121)", "Delete NullLiteral(122)", "Delete CastExpression(123)", "Delete MethodInvocation(124)", "Delete ConditionalExpression(125)", "Delete ReturnStatement(126)", "Delete Block(127)", "Delete MethodDeclaration(128)", "Delete TagElement: @inheritDoc(129)", "Delete TextElement:  (130)", "Delete TagElement(131)", "Delete Javadoc(132)", "Delete SimpleName: Override(133)", "Delete MarkerAnnotation(134)", "Delete Modifier: public(135)", "Delete SimpleName: Object(136)", "Delete SimpleType: Object(137)", "Delete SimpleName: tryExecute(138)", "Delete SimpleName: Object(139)", "Delete SimpleType: Object(140)", "Delete SimpleName: o(141)", "Delete SingleVariableDeclaration(142)", "Delete SimpleName: Object(143)", "Delete SimpleType: Object(144)", "Delete SimpleName: identifier(145)", "Delete SingleVariableDeclaration(146)", "Delete SimpleName: o(147)", "Delete NullLiteral(148)", "Delete InfixExpression: !=(149)", "Delete SimpleName: method(150)", "Delete NullLiteral(151)", "Delete InfixExpression: !=(152)", "Delete InfixExpression: &&(153)", "Delete SimpleName: property(154)", "Delete SimpleName: equals(155)", "Delete SimpleName: identifier(156)", "Delete MethodInvocation(157)", "Delete InfixExpression: &&(158)", "Delete SimpleName: objectClass(159)", "Delete SimpleName: equals(160)", "Delete SimpleName: o(161)", "Delete SimpleName: getClass(162)", "Delete MethodInvocation(163)", "Delete MethodInvocation(164)", "Delete InfixExpression: &&(165)", "Delete SimpleName: method(166)", "Delete SimpleName: invoke(167)", "Delete SimpleName: o(168)", "Delete SimpleName: Object(169)", "Delete SimpleType: Object(170)", "Delete Dimension(171)", "Delete ArrayType: Object[](172)", "Delete NullLiteral(173)", "Delete CastExpression(174)", "Delete MethodInvocation(175)", "Delete ReturnStatement(176)", "Delete Block(177)", "Delete SimpleName: InvocationTargetException(178)", "Delete SimpleType: InvocationTargetException(179)", "Delete SimpleName: xinvoke(180)", "Delete SingleVariableDeclaration(181)", "Delete SimpleName: TRY_FAILED(182)", "Delete ReturnStatement(183)", "Delete Block(184)", "Delete CatchClause(185)", "Delete SimpleName: IllegalAccessException(186)", "Delete SimpleType: IllegalAccessException(187)", "Delete SimpleName: xill(188)", "Delete SingleVariableDeclaration(189)", "Delete SimpleName: TRY_FAILED(190)", "Delete ReturnStatement(191)", "Delete Block(192)", "Delete CatchClause(193)", "Delete TryStatement(194)", "Delete Block(195)", "Delete IfStatement(196)", "Delete SimpleName: TRY_FAILED(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete MethodDeclaration(200)", "Delete TextElement: Discovers the method for a (201)", "Delete SimpleName: PropertyGet(202)", "Delete TagElement: @link(203)", "Delete TextElement: .(204)", "Delete TextElement: <p>The method to be found should be named \"get{P,p}property.</p>(205)", "Delete TagElement(206)", "Delete SimpleName: is(207)", "Delete TextElement:  the introspector(208)", "Delete TagElement: @param(209)", "Delete SimpleName: clazz(210)", "Delete TextElement:  the class to find the get method from(211)", "Delete TagElement: @param(212)", "Delete SimpleName: property(213)", "Delete TextElement:  the property name to find(214)", "Delete TagElement: @param(215)", "Delete TextElement:  the method if found, null otherwise(216)", "Delete TagElement: @return(217)", "Delete Javadoc(218)", "Delete Modifier: static(219)", "Delete QualifiedName: java.lang.reflect.Method(220)", "Delete SimpleType: java.lang.reflect.Method(221)", "Delete SimpleName: discover(222)", "Delete SimpleName: Introspector(223)", "Delete SimpleType: Introspector(224)", "Delete SimpleName: is(225)", "Delete SingleVariableDeclaration(226)", "Delete Modifier: final(227)", "Delete SimpleName: Class(228)", "Delete SimpleType: Class(229)", "Delete WildcardType: ?(230)", "Delete ParameterizedType: Class<?>(231)", "Delete SimpleName: clazz(232)", "Delete SingleVariableDeclaration(233)", "Delete SimpleName: String(234)", "Delete SimpleType: String(235)", "Delete SimpleName: property(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: discoverGet(238)", "Delete SimpleName: is(239)", "Delete StringLiteral: \"get\"(240)", "Delete SimpleName: clazz(241)", "Delete SimpleName: property(242)", "Delete MethodInvocation(243)", "Delete ReturnStatement(244)", "Delete Block(245)", "Delete MethodDeclaration(246)", "Delete TextElement: Base method for boolean & object property get.(247)", "Delete TagElement(248)", "Delete SimpleName: is(249)", "Delete TextElement:  the introspector(250)", "Delete TagElement: @param(251)", "Delete SimpleName: which(252)", "Delete TextElement:  \"is\" or \"get\" for boolean or object(253)", "Delete TagElement: @param(254)", "Delete SimpleName: clazz(255)", "Delete TextElement:  The class being examined.(256)", "Delete TagElement: @param(257)", "Delete SimpleName: property(258)", "Delete TextElement:  The property being addressed.(259)", "Delete TagElement: @param(260)", "Delete TextElement:  The {get,is}{p,P}roperty method if one exists, null otherwise.(261)", "Delete TagElement: @return(262)", "Delete Javadoc(263)", "Delete Modifier: static(264)", "Delete QualifiedName: java.lang.reflect.Method(265)", "Delete SimpleType: java.lang.reflect.Method(266)", "Delete SimpleName: discoverGet(267)", "Delete SimpleName: Introspector(268)", "Delete SimpleType: Introspector(269)", "Delete SimpleName: is(270)", "Delete SingleVariableDeclaration(271)", "Delete SimpleName: String(272)", "Delete SimpleType: String(273)", "Delete SimpleName: which(274)", "Delete SingleVariableDeclaration(275)", "Delete SimpleName: Class(276)", "Delete SimpleType: Class(277)", "Delete WildcardType: ?(278)", "Delete ParameterizedType: Class<?>(279)", "Delete SimpleName: clazz(280)", "Delete SingleVariableDeclaration(281)", "Delete SimpleName: String(282)", "Delete SimpleType: String(283)", "Delete SimpleName: property(284)", "Delete SingleVariableDeclaration(285)", "Delete QualifiedName: java.lang.reflect.Method(286)", "Delete SimpleType: java.lang.reflect.Method(287)", "Delete SimpleName: method(288)", "Delete NullLiteral(289)", "Delete VariableDeclarationFragment(290)", "Delete VariableDeclarationStatement(291)", "Delete Modifier: final(292)", "Delete PrimitiveType: int(293)", "Delete SimpleName: start(294)", "Delete SimpleName: which(295)", "Delete SimpleName: length(296)", "Delete MethodInvocation(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)", "Delete SimpleName: StringBuilder(300)", "Delete SimpleType: StringBuilder(301)", "Delete SimpleName: sb(302)", "Delete SimpleName: StringBuilder(303)", "Delete SimpleType: StringBuilder(304)", "Delete SimpleName: which(305)", "Delete ClassInstanceCreation(306)", "Delete VariableDeclarationFragment(307)", "Delete VariableDeclarationStatement(308)", "Delete SimpleName: sb(309)", "Delete SimpleName: append(310)", "Delete SimpleName: property(311)", "Delete MethodInvocation(312)", "Delete ExpressionStatement(313)", "Delete PrimitiveType: char(314)", "Delete SimpleName: c(315)", "Delete SimpleName: sb(316)", "Delete SimpleName: charAt(317)", "Delete SimpleName: start(318)", "Delete MethodInvocation(319)", "Delete VariableDeclarationFragment(320)", "Delete VariableDeclarationStatement(321)", "Delete SimpleName: sb(322)", "Delete SimpleName: setCharAt(323)", "Delete SimpleName: start(324)", "Delete SimpleName: Character(325)", "Delete SimpleName: toUpperCase(326)", "Delete SimpleName: c(327)", "Delete MethodInvocation(328)", "Delete MethodInvocation(329)", "Delete ExpressionStatement(330)", "Delete SimpleName: method(331)", "Delete SimpleName: is(332)", "Delete SimpleName: getMethod(333)", "Delete SimpleName: clazz(334)", "Delete SimpleName: sb(335)", "Delete SimpleName: toString(336)", "Delete MethodInvocation(337)", "Delete SimpleName: EMPTY_PARAMS(338)", "Delete MethodInvocation(339)", "Delete Assignment: =(340)", "Delete ExpressionStatement(341)", "Delete SimpleName: method(342)", "Delete NullLiteral(343)", "Delete InfixExpression: ==(344)", "Delete SimpleName: sb(345)", "Delete SimpleName: setCharAt(346)", "Delete SimpleName: start(347)", "Delete SimpleName: Character(348)", "Delete SimpleName: toLowerCase(349)", "Delete SimpleName: c(350)", "Delete MethodInvocation(351)", "Delete MethodInvocation(352)", "Delete ExpressionStatement(353)", "Delete SimpleName: method(354)", "Delete SimpleName: is(355)", "Delete SimpleName: getMethod(356)", "Delete SimpleName: clazz(357)", "Delete SimpleName: sb(358)", "Delete SimpleName: toString(359)", "Delete MethodInvocation(360)", "Delete SimpleName: EMPTY_PARAMS(361)", "Delete MethodInvocation(362)", "Delete Assignment: =(363)", "Delete ExpressionStatement(364)", "Delete Block(365)", "Delete IfStatement(366)", "Delete SimpleName: method(367)", "Delete ReturnStatement(368)", "Delete Block(369)", "Delete MethodDeclaration(370)", "Delete TypeDeclaration: class(371)"]}}, {"PropertySetExecutor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: clazz", "DEL ExpressionStatement", "DEL SimpleName: PropertySet", "DEL SimpleName: method", "DEL SimpleName: property", "DEL SimpleName: arg", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL SingleVariableDeclaration", "DEL SimpleName: property", "DEL ReturnStatement", "DEL TagElement: @param", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: setCharAt", "DEL SimpleName: arg", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: is", "DEL SimpleName: sb", "DEL SimpleName: clazz", "DEL MarkerAnnotation", "DEL SimpleName: equals", "DEL SimpleType: String", "DEL TextElement: Index of the first character of the set{p,P}roperty. ", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: toString", "DEL TryStatement", "DEL TagElement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL InfixExpression: !=", "DEL SimpleName: o", "DEL Javadoc", "DEL SimpleName: SET_START_INDEX", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL TextElement: Discovers the method for a ", "DEL SimpleName: arg", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL TextElement:  the value to assign to the property", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: arg", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL Block", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL Modifier: static", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: Introspector", "DEL TagElement", "DEL NullLiteral", "DEL TagElement: @return", "DEL SimpleName: Class", "DEL SimpleName: arg", "DEL TagElement", "DEL SimpleName: SET_START_INDEX", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleName: is", "DEL SimpleName: Override", "DEL TagElement", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: method", "DEL SimpleType: java.lang.reflect.Method", "DEL Javadoc", "DEL SimpleName: Class", "DEL Javadoc", "DEL SimpleType: AbstractExecutor.Set", "DEL QualifiedName: java.lang.reflect.Method", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SimpleName: discover", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL PrimitiveType: char", "DEL SimpleName: toString", "DEL IfStatement", "DEL SimpleName: tryExecute", "DEL TextElement:  the value to set into the property", "DEL SimpleType: Object", "DEL SimpleName: InvocationTargetException", "DEL MethodInvocation", "DEL SimpleName: arg", "DEL SimpleName: sb", "DEL TextElement: Specialized executor to set a property in an object.", "DEL SimpleName: charAt", "DEL Javadoc", "DEL SimpleName: xinvoke", "DEL IfStatement", "DEL TextElement:  the class to introspect", "DEL InfixExpression: &&", "DEL Javadoc", "DEL SimpleName: getClass", "DEL SimpleName: clazz", "DEL SimpleType: IllegalAccessException", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: o", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ReturnStatement", "DEL TextElement:  ", "DEL SimpleName: getMethod", "DEL SimpleName: o", "DEL SimpleType: Object", "DEL SimpleName: pargs", "DEL SimpleName: method", "DEL ArrayInitializer", "DEL CatchClause", "DEL SimpleName: InvocationTargetException", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL SimpleName: Override", "DEL SimpleName: clazz", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: o", "DEL TagElement: @param", "DEL Modifier: public", "DEL SimpleName: setCharAt", "DEL NumberLiteral: 3", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: is", "DEL ReturnStatement", "DEL SimpleName: String", "DEL TextElement:  ", "DEL SimpleName: toLowerCase", "DEL TextElement: Creates an instance by attempting discovery of the set method.", "DEL SimpleName: method", "DEL ArrayAccess", "DEL SimpleName: property", "DEL SimpleName: is", "DEL SimpleName: Character", "DEL SimpleName: Object", "DEL SimpleName: arg", "DEL SimpleName: is", "DEL SimpleName: property", "DEL Block", "DEL SimpleName: clazz", "DEL SimpleType: StringBuilder", "DEL SimpleName: Object", "DEL SimpleName: method", "DEL Modifier: private", "DEL SimpleName: clazz", "DEL Block", "DEL SimpleName: SET_START_INDEX", "DEL SimpleName: getClass", "DEL TagElement", "DEL InfixExpression: &&", "DEL SimpleType: InvocationTargetException", "DEL ReturnStatement", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL Modifier: private", "DEL TextElement:  the method if found, null otherwise", "DEL InfixExpression: ==", "DEL TagElement: @inheritDoc", "DEL SimpleName: c", "DEL MethodDeclaration", "DEL SimpleName: property", "DEL Block", "DEL Dimension", "DEL Modifier: private", "DEL SimpleName: execute", "DEL TextElement:  the introspector", "DEL TextElement:  the class to find the get method from", "DEL TagElement: @since", "DEL TypeDeclaration: class", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TagElement: @link", "DEL Modifier: public", "DEL SimpleName: c", "DEL Block", "DEL StringLiteral: \"set\"", "DEL SimpleName: String", "DEL SimpleName: execute", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: Class", "DEL TagElement: @param", "DEL SimpleName: arg", "DEL SimpleName: params", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: identifier", "DEL SimpleName: getMethod", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleName: params", "DEL SingleVariableDeclaration", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: String", "DEL ArrayType: Object[]", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: identifier", "DEL SimpleName: clazz", "DEL SimpleName: getTargetProperty", "DEL ParameterizedType: Class<?>", "DEL Assignment: =", "DEL SimpleType: IllegalAccessException", "DEL TagElement: @inheritDoc", "DEL NullLiteral", "DEL TextElement:  2.0", "DEL QualifiedName: AbstractExecutor.Set", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TagElement: @inheritDoc", "DEL SimpleName: property", "DEL SimpleName: arg", "DEL SimpleName: toUpperCase", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL SingleVariableDeclaration", "DEL SimpleName: o", "DEL SuperConstructorInvocation", "DEL SimpleName: TRY_FAILED", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: property", "DEL SimpleName: objectClass", "DEL SimpleName: PropertySetExecutor", "DEL SimpleName: sb", "DEL SimpleName: arg", "DEL Block", "DEL Modifier: final", "DEL SimpleName: PropertySetExecutor", "DEL SimpleName: IllegalAccessException", "DEL ArrayType: Object[]", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TextElement: .", "DEL SimpleName: identifier", "DEL SimpleName: TRY_FAILED", "DEL SingleVariableDeclaration", "DEL SimpleName: arg", "DEL SimpleName: getParameterTypes", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: identifier", "DEL InfixExpression: ==", "DEL SimpleName: StringBuilder", "DEL SingleVariableDeclaration", "DEL SimpleName: params", "DEL SimpleName: is", "DEL SimpleName: arg", "DEL TextElement:  ", "DEL ArrayInitializer", "DEL TextElement:  the property to set", "DEL ClassInstanceCreation", "DEL SimpleName: o", "DEL SimpleName: pargs", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: Introspector", "DEL SimpleName: method", "DEL SimpleName: xill", "DEL SimpleName: Character", "DEL Javadoc", "DEL SimpleType: Class", "DEL TagElement: @param", "DEL InfixExpression: ||", "DEL SimpleName: StringBuilder", "DEL Assignment: =", "DEL TagElement", "DEL SimpleName: Introspector", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL VariableDeclarationFragment", "DEL CatchClause", "DEL SimpleName: invoke", "DEL SimpleType: InvocationTargetException", "DEL SimpleName: identifier", "DEL SimpleName: equals", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL Block", "DEL SimpleName: is", "DEL InfixExpression: !=", "DEL SimpleName: Introspector", "DEL TextElement: <p>The method to be found should be named \"set{P,p}property.</p>", "DEL Modifier: final", "DEL SimpleName: method", "DEL SimpleType: Object", "DEL NullLiteral", "DEL SimpleName: sb", "DEL SimpleName: discover", "DEL NumberLiteral: 0", "DEL SimpleName: SET_START_INDEX", "DEL ParameterizedType: Class<?>", "DEL SimpleType: java.lang.reflect.Method", "DEL QualifiedName: java.lang.reflect.Method", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression", "DEL SimpleType: Object", "DEL WildcardType: ?", "DEL SimpleName: arg", "DEL VariableDeclarationStatement", "DEL SimpleName: method", "DEL SimpleName: sb", "DEL SimpleName: sb", "DEL TextElement: The property. ", "DEL SimpleName: append", "DEL TextElement:  the introspector", "DEL TextElement:  the name of the property to set", "DEL SimpleName: identifier", "DEL TagElement", "DEL VariableDeclarationStatement", "DEL SimpleName: TRY_FAILED"]}]}}, {"PropertySetExecutor_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Specialized executor to set a property in an object.(4)", "Delete TagElement(5)", "Delete TextElement:  2.0(6)", "Delete TagElement: @since(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete Modifier: final(10)", "Delete SimpleName: PropertySetExecutor(11)", "Delete QualifiedName: AbstractExecutor.Set(12)", "Delete SimpleType: AbstractExecutor.Set(13)", "Delete TextElement: Index of the first character of the set{p,P}roperty. (14)", "Delete TagElement(15)", "Delete Javadoc(16)", "Delete Modifier: private(17)", "Delete Modifier: static(18)", "Delete Modifier: final(19)", "Delete PrimitiveType: int(20)", "Delete SimpleName: SET_START_INDEX(21)", "Delete NumberLiteral: 3(22)", "Delete VariableDeclarationFragment(23)", "Delete FieldDeclaration(24)", "Delete TextElement: The property. (25)", "Delete TagElement(26)", "Delete Javadoc(27)", "Delete Modifier: private(28)", "Delete Modifier: final(29)", "Delete SimpleName: String(30)", "Delete SimpleType: String(31)", "Delete SimpleName: property(32)", "Delete VariableDeclarationFragment(33)", "Delete FieldDeclaration(34)", "Delete TextElement: Creates an instance by attempting discovery of the set method.(35)", "Delete TagElement(36)", "Delete SimpleName: is(37)", "Delete TextElement:  the introspector(38)", "Delete TagElement: @param(39)", "Delete SimpleName: clazz(40)", "Delete TextElement:  the class to introspect(41)", "Delete TagElement: @param(42)", "Delete SimpleName: identifier(43)", "Delete TextElement:  the property to set(44)", "Delete TagElement: @param(45)", "Delete SimpleName: arg(46)", "Delete TextElement:  the value to set into the property(47)", "Delete TagElement: @param(48)", "Delete Javadoc(49)", "Delete Modifier: public(50)", "Delete SimpleName: PropertySetExecutor(51)", "Delete SimpleName: Introspector(52)", "Delete SimpleType: Introspector(53)", "Delete SimpleName: is(54)", "Delete SingleVariableDeclaration(55)", "Delete SimpleName: Class(56)", "Delete SimpleType: Class(57)", "Delete WildcardType: ?(58)", "Delete ParameterizedType: Class<?>(59)", "Delete SimpleName: clazz(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: String(62)", "Delete SimpleType: String(63)", "Delete SimpleName: identifier(64)", "Delete SingleVariableDeclaration(65)", "Delete SimpleName: Object(66)", "Delete SimpleType: Object(67)", "Delete SimpleName: arg(68)", "Delete SingleVariableDeclaration(69)", "Delete SimpleName: clazz(70)", "Delete SimpleName: discover(71)", "Delete SimpleName: is(72)", "Delete SimpleName: clazz(73)", "Delete SimpleName: identifier(74)", "Delete SimpleName: arg(75)", "Delete MethodInvocation(76)", "Delete SuperConstructorInvocation(77)", "Delete SimpleName: property(78)", "Delete SimpleName: identifier(79)", "Delete Assignment: =(80)", "Delete ExpressionStatement(81)", "Delete Block(82)", "Delete MethodDeclaration(83)", "Delete TagElement: @inheritDoc(84)", "Delete TextElement:  (85)", "Delete TagElement(86)", "Delete Javadoc(87)", "Delete SimpleName: Override(88)", "Delete MarkerAnnotation(89)", "Delete Modifier: public(90)", "Delete SimpleName: Object(91)", "Delete SimpleType: Object(92)", "Delete SimpleName: getTargetProperty(93)", "Delete SimpleName: property(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete MethodDeclaration(97)", "Delete TagElement: @inheritDoc(98)", "Delete TextElement:  (99)", "Delete TagElement(100)", "Delete Javadoc(101)", "Delete SimpleName: Override(102)", "Delete MarkerAnnotation(103)", "Delete Modifier: public(104)", "Delete SimpleName: Object(105)", "Delete SimpleType: Object(106)", "Delete SimpleName: execute(107)", "Delete SimpleName: Object(108)", "Delete SimpleType: Object(109)", "Delete SimpleName: o(110)", "Delete SingleVariableDeclaration(111)", "Delete SimpleName: Object(112)", "Delete SimpleType: Object(113)", "Delete SimpleName: arg(114)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: IllegalAccessException(116)", "Delete SimpleType: IllegalAccessException(117)", "Delete SimpleName: InvocationTargetException(118)", "Delete SimpleType: InvocationTargetException(119)", "Delete SimpleName: Object(120)", "Delete SimpleType: Object(121)", "Delete Dimension(122)", "Delete ArrayType: Object[](123)", "Delete SimpleName: pargs(124)", "Delete SimpleName: arg(125)", "Delete ArrayInitializer(126)", "Delete VariableDeclarationFragment(127)", "Delete VariableDeclarationStatement(128)", "Delete SimpleName: method(129)", "Delete NullLiteral(130)", "Delete InfixExpression: !=(131)", "Delete SimpleName: method(132)", "Delete SimpleName: invoke(133)", "Delete SimpleName: o(134)", "Delete SimpleName: pargs(135)", "Delete MethodInvocation(136)", "Delete ExpressionStatement(137)", "Delete Block(138)", "Delete IfStatement(139)", "Delete SimpleName: arg(140)", "Delete ReturnStatement(141)", "Delete Block(142)", "Delete MethodDeclaration(143)", "Delete TagElement: @inheritDoc(144)", "Delete TextElement:  (145)", "Delete TagElement(146)", "Delete Javadoc(147)", "Delete SimpleName: Override(148)", "Delete MarkerAnnotation(149)", "Delete Modifier: public(150)", "Delete SimpleName: Object(151)", "Delete SimpleType: Object(152)", "Delete SimpleName: tryExecute(153)", "Delete SimpleName: Object(154)", "Delete SimpleType: Object(155)", "Delete SimpleName: o(156)", "Delete SingleVariableDeclaration(157)", "Delete SimpleName: Object(158)", "Delete SimpleType: Object(159)", "Delete SimpleName: identifier(160)", "Delete SingleVariableDeclaration(161)", "Delete SimpleName: Object(162)", "Delete SimpleType: Object(163)", "Delete SimpleName: arg(164)", "Delete SingleVariableDeclaration(165)", "Delete SimpleName: o(166)", "Delete NullLiteral(167)", "Delete InfixExpression: !=(168)", "Delete SimpleName: method(169)", "Delete NullLiteral(170)", "Delete InfixExpression: !=(171)", "Delete InfixExpression: &&(172)", "Delete SimpleName: property(173)", "Delete SimpleName: equals(174)", "Delete SimpleName: identifier(175)", "Delete MethodInvocation(176)", "Delete InfixExpression: &&(177)", "Delete SimpleName: objectClass(178)", "Delete SimpleName: equals(179)", "Delete SimpleName: o(180)", "Delete SimpleName: getClass(181)", "Delete MethodInvocation(182)", "Delete MethodInvocation(183)", "Delete InfixExpression: &&(184)", "Delete SimpleName: arg(185)", "Delete NullLiteral(186)", "Delete InfixExpression: ==(187)", "Delete SimpleName: method(188)", "Delete SimpleName: getParameterTypes(189)", "Delete MethodInvocation(190)", "Delete NumberLiteral: 0(191)", "Delete ArrayAccess(192)", "Delete SimpleName: equals(193)", "Delete SimpleName: arg(194)", "Delete SimpleName: getClass(195)", "Delete MethodInvocation(196)", "Delete MethodInvocation(197)", "Delete InfixExpression: ||(198)", "Delete ParenthesizedExpression(199)", "Delete InfixExpression: &&(200)", "Delete SimpleName: execute(201)", "Delete SimpleName: o(202)", "Delete SimpleName: arg(203)", "Delete MethodInvocation(204)", "Delete ReturnStatement(205)", "Delete Block(206)", "Delete SimpleName: InvocationTargetException(207)", "Delete SimpleType: InvocationTargetException(208)", "Delete SimpleName: xinvoke(209)", "Delete SingleVariableDeclaration(210)", "Delete SimpleName: TRY_FAILED(211)", "Delete ReturnStatement(212)", "Delete Block(213)", "Delete CatchClause(214)", "Delete SimpleName: IllegalAccessException(215)", "Delete SimpleType: IllegalAccessException(216)", "Delete SimpleName: xill(217)", "Delete SingleVariableDeclaration(218)", "Delete SimpleName: TRY_FAILED(219)", "Delete ReturnStatement(220)", "Delete Block(221)", "Delete CatchClause(222)", "Delete TryStatement(223)", "Delete Block(224)", "Delete IfStatement(225)", "Delete SimpleName: TRY_FAILED(226)", "Delete ReturnStatement(227)", "Delete Block(228)", "Delete MethodDeclaration(229)", "Delete TextElement: Discovers the method for a (230)", "Delete SimpleName: PropertySet(231)", "Delete TagElement: @link(232)", "Delete TextElement: .(233)", "Delete TextElement: <p>The method to be found should be named \"set{P,p}property.</p>(234)", "Delete TagElement(235)", "Delete SimpleName: is(236)", "Delete TextElement:  the introspector(237)", "Delete TagElement: @param(238)", "Delete SimpleName: clazz(239)", "Delete TextElement:  the class to find the get method from(240)", "Delete TagElement: @param(241)", "Delete SimpleName: property(242)", "Delete TextElement:  the name of the property to set(243)", "Delete TagElement: @param(244)", "Delete SimpleName: arg(245)", "Delete TextElement:  the value to assign to the property(246)", "Delete TagElement: @param(247)", "Delete TextElement:  the method if found, null otherwise(248)", "Delete TagElement: @return(249)", "Delete Javadoc(250)", "Delete Modifier: private(251)", "Delete Modifier: static(252)", "Delete QualifiedName: java.lang.reflect.Method(253)", "Delete SimpleType: java.lang.reflect.Method(254)", "Delete SimpleName: discover(255)", "Delete SimpleName: Introspector(256)", "Delete SimpleType: Introspector(257)", "Delete SimpleName: is(258)", "Delete SingleVariableDeclaration(259)", "Delete Modifier: final(260)", "Delete SimpleName: Class(261)", "Delete SimpleType: Class(262)", "Delete WildcardType: ?(263)", "Delete ParameterizedType: Class<?>(264)", "Delete SimpleName: clazz(265)", "Delete SingleVariableDeclaration(266)", "Delete SimpleName: String(267)", "Delete SimpleType: String(268)", "Delete SimpleName: property(269)", "Delete SingleVariableDeclaration(270)", "Delete SimpleName: Object(271)", "Delete SimpleType: Object(272)", "Delete SimpleName: arg(273)", "Delete SingleVariableDeclaration(274)", "Delete SimpleName: Object(275)", "Delete SimpleType: Object(276)", "Delete Dimension(277)", "Delete ArrayType: Object[](278)", "Delete SimpleName: params(279)", "Delete SimpleName: arg(280)", "Delete ArrayInitializer(281)", "Delete VariableDeclarationFragment(282)", "Delete VariableDeclarationStatement(283)", "Delete SimpleName: StringBuilder(284)", "Delete SimpleType: StringBuilder(285)", "Delete SimpleName: sb(286)", "Delete SimpleName: StringBuilder(287)", "Delete SimpleType: StringBuilder(288)", "Delete StringLiteral: \"set\"(289)", "Delete ClassInstanceCreation(290)", "Delete VariableDeclarationFragment(291)", "Delete VariableDeclarationStatement(292)", "Delete SimpleName: sb(293)", "Delete SimpleName: append(294)", "Delete SimpleName: property(295)", "Delete MethodInvocation(296)", "Delete ExpressionStatement(297)", "Delete PrimitiveType: char(298)", "Delete SimpleName: c(299)", "Delete SimpleName: sb(300)", "Delete SimpleName: charAt(301)", "Delete SimpleName: SET_START_INDEX(302)", "Delete MethodInvocation(303)", "Delete VariableDeclarationFragment(304)", "Delete VariableDeclarationStatement(305)", "Delete SimpleName: sb(306)", "Delete SimpleName: setCharAt(307)", "Delete SimpleName: SET_START_INDEX(308)", "Delete SimpleName: Character(309)", "Delete SimpleName: toUpperCase(310)", "Delete SimpleName: c(311)", "Delete MethodInvocation(312)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete QualifiedName: java.lang.reflect.Method(315)", "Delete SimpleType: java.lang.reflect.Method(316)", "Delete SimpleName: method(317)", "Delete SimpleName: is(318)", "Delete SimpleName: getMethod(319)", "Delete SimpleName: clazz(320)", "Delete SimpleName: sb(321)", "Delete SimpleName: toString(322)", "Delete MethodInvocation(323)", "Delete SimpleName: params(324)", "Delete MethodInvocation(325)", "Delete VariableDeclarationFragment(326)", "Delete VariableDeclarationStatement(327)", "Delete SimpleName: method(328)", "Delete NullLiteral(329)", "Delete InfixExpression: ==(330)", "Delete SimpleName: sb(331)", "Delete SimpleName: setCharAt(332)", "Delete SimpleName: SET_START_INDEX(333)", "Delete SimpleName: Character(334)", "Delete SimpleName: toLowerCase(335)", "Delete SimpleName: c(336)", "Delete MethodInvocation(337)", "Delete MethodInvocation(338)", "Delete ExpressionStatement(339)", "Delete SimpleName: method(340)", "Delete SimpleName: is(341)", "Delete SimpleName: getMethod(342)", "Delete SimpleName: clazz(343)", "Delete SimpleName: sb(344)", "Delete SimpleName: toString(345)", "Delete MethodInvocation(346)", "Delete SimpleName: params(347)", "Delete MethodInvocation(348)", "Delete Assignment: =(349)", "Delete ExpressionStatement(350)", "Delete Block(351)", "Delete IfStatement(352)", "Delete SimpleName: method(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete TypeDeclaration: class(357)"]}}, {"JexlMethod_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: Exception", "DEL TypeDeclaration: interface", "DEL TextElement: ${foo.bar()}", "DEL SimpleName: params", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: name", "DEL TextElement:  true if can be reused for this class, false if not", "DEL SimpleName: name", "DEL TagElement", "DEL TextElement: returns the return type of the method invoked.", "DEL SimpleName: obj", "DEL TextElement:  the object", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL TextElement: Ex.", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL Dimension", "DEL TagElement", "DEL TextElement: Checks whether a tryInvoke failed or not.", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: Object", "DEL Dimension", "DEL TextElement: class of object it was returned for.", "DEL TextElement:  the result", "DEL SingleVariableDeclaration", "DEL TagElement: @since", "DEL TextElement: and a value returned.", "DEL TagElement", "DEL SimpleName: rval", "DEL SimpleName: Class", "DEL TagElement", "DEL TextElement:  return type", "DEL ArrayType: Object[]", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL TextElement:  1.0", "DEL SimpleName: params", "DEL TextElement: or failed.", "DEL SimpleName: obj", "DEL TextElement: Related to isCacheable since this method is often used with cached JexlMethod instances.", "DEL TagElement: @param", "DEL TextElement:  on any error.", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL PrimitiveType: boolean", "DEL SimpleName: obj", "DEL SimpleName: Object", "DEL SimpleName: getReturnType", "DEL SingleVariableDeclaration", "DEL SimpleType: Exception", "DEL TextElement: Specifies if this JexlMethod is cacheable and able to be reused for this", "DEL TextElement:  method parameters.", "DEL SimpleName: isCacheable", "DEL SimpleName: tryInvoke", "DEL Javadoc", "DEL SimpleName: params", "DEL SimpleType: Object", "DEL TextElement:  true if tryInvoke failed, false otherwise", "DEL SimpleType: Class", "DEL SimpleName: obj", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: tryFailed", "DEL TagElement", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL TextElement: Attempts to reuse this JexlMethod, checking that it is compatible with", "DEL TagElement: @param", "DEL SimpleName: JexlMethod", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: params", "DEL TextElement:  the value returned by tryInvoke", "DEL TextElement: Interface used for regular method invocation.", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleName: rval", "DEL TagElement: @return", "DEL SimpleType: String", "DEL SimpleType: Object", "DEL TextElement:  the object to invoke the method upon", "DEL TagElement: @param", "DEL TextElement:  the method arguments", "DEL TextElement: the actual set of arguments.", "DEL TextElement: Invocation method, called when the method invocation should be performed", "DEL SimpleName: Exception", "DEL TextElement: </code>", "DEL SimpleType: Object", "DEL TextElement:  the result of the method invocation that should be checked by tryFailed to determine if it succeeded", "DEL ParameterizedType: Class<?>", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: invoke", "DEL SingleVariableDeclaration", "DEL TextElement:  the method name", "DEL TextElement: <code>", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL TagElement: @param"]}]}}, {"JexlMethod_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Interface used for regular method invocation.(2)", "Delete TextElement: Ex.(3)", "Delete TextElement: <code>(4)", "Delete TextElement: ${foo.bar()}(5)", "Delete TextElement: </code>(6)", "Delete TagElement(7)", "Delete TextElement:  1.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: JexlMethod(12)", "Delete TextElement: Invocation method, called when the method invocation should be performed(13)", "Delete TextElement: and a value returned.(14)", "Delete TagElement(15)", "Delete SimpleName: obj(16)", "Delete TextElement:  the object(17)", "Delete TagElement: @param(18)", "Delete SimpleName: params(19)", "Delete TextElement:  method parameters.(20)", "Delete TagElement: @param(21)", "Delete TextElement:  the result(22)", "Delete TagElement: @return(23)", "Delete SimpleName: Exception(24)", "Delete TextElement:  on any error.(25)", "Delete TagElement: @throws(26)", "Delete Javadoc(27)", "Delete SimpleName: Object(28)", "Delete SimpleType: Object(29)", "Delete SimpleName: invoke(30)", "Delete SimpleName: Object(31)", "Delete SimpleType: Object(32)", "Delete SimpleName: obj(33)", "Delete SingleVariableDeclaration(34)", "Delete SimpleName: Object(35)", "Delete SimpleType: Object(36)", "Delete Dimension(37)", "Delete ArrayType: Object[](38)", "Delete SimpleName: params(39)", "Delete SingleVariableDeclaration(40)", "Delete SimpleName: Exception(41)", "Delete SimpleType: Exception(42)", "Delete MethodDeclaration(43)", "Delete TextElement: Attempts to reuse this JexlMethod, checking that it is compatible with(44)", "Delete TextElement: the actual set of arguments.(45)", "Delete TextElement: Related to isCacheable since this method is often used with cached JexlMethod instances.(46)", "Delete TagElement(47)", "Delete SimpleName: obj(48)", "Delete TextElement:  the object to invoke the method upon(49)", "Delete TagElement: @param(50)", "Delete SimpleName: name(51)", "Delete TextElement:  the method name(52)", "Delete TagElement: @param(53)", "Delete SimpleName: params(54)", "Delete TextElement:  the method arguments(55)", "Delete TagElement: @param(56)", "Delete TextElement:  the result of the method invocation that should be checked by tryFailed to determine if it succeeded(57)", "Delete TextElement: or failed.(58)", "Delete TagElement: @return(59)", "Delete Javadoc(60)", "Delete SimpleName: Object(61)", "Delete SimpleType: Object(62)", "Delete SimpleName: tryInvoke(63)", "Delete SimpleName: String(64)", "Delete SimpleType: String(65)", "Delete SimpleName: name(66)", "Delete SingleVariableDeclaration(67)", "Delete SimpleName: Object(68)", "Delete SimpleType: Object(69)", "Delete SimpleName: obj(70)", "Delete SingleVariableDeclaration(71)", "Delete SimpleName: Object(72)", "Delete SimpleType: Object(73)", "Delete Dimension(74)", "Delete ArrayType: Object[](75)", "Delete SimpleName: params(76)", "Delete SingleVariableDeclaration(77)", "Delete MethodDeclaration(78)", "Delete TextElement: Checks whether a tryInvoke failed or not.(79)", "Delete TagElement(80)", "Delete SimpleName: rval(81)", "Delete TextElement:  the value returned by tryInvoke(82)", "Delete TagElement: @param(83)", "Delete TextElement:  true if tryInvoke failed, false otherwise(84)", "Delete TagElement: @return(85)", "Delete Javadoc(86)", "Delete PrimitiveType: boolean(87)", "Delete SimpleName: tryFailed(88)", "Delete SimpleName: Object(89)", "Delete SimpleType: Object(90)", "Delete SimpleName: rval(91)", "Delete SingleVariableDeclaration(92)", "Delete MethodDeclaration(93)", "Delete TextElement: Specifies if this JexlMethod is cacheable and able to be reused for this(94)", "Delete TextElement: class of object it was returned for.(95)", "Delete TagElement(96)", "Delete TextElement:  true if can be reused for this class, false if not(97)", "Delete TagElement: @return(98)", "Delete Javadoc(99)", "Delete PrimitiveType: boolean(100)", "Delete SimpleName: isCacheable(101)", "Delete MethodDeclaration(102)", "Delete TextElement: returns the return type of the method invoked.(103)", "Delete TagElement(104)", "Delete TextElement:  return type(105)", "Delete TagElement: @return(106)", "Delete Javadoc(107)", "Delete SimpleName: Class(108)", "Delete SimpleType: Class(109)", "Delete WildcardType: ?(110)", "Delete ParameterizedType: Class<?>(111)", "Delete SimpleName: getReturnType(112)", "Delete MethodDeclaration(113)", "Delete TypeDeclaration: interface(114)"]}}, {"JexlPropertyGet_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL TextElement: Method used to get the property value of an object.", "DEL TagElement: @return", "DEL TextElement: Specifies if this JexlPropertyGet is cacheable and able to be reused for", "DEL TextElement:  1.0", "DEL TextElement: the actual set of arguments.", "DEL SimpleName: Object", "DEL SimpleName: tryInvoke", "DEL TagElement: @return", "DEL TagElement: @param", "DEL TextElement: Ex.", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL TypeDeclaration: interface", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: Exception", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleName: key", "DEL TextElement:  the object to get the property value from.", "DEL TextElement: Attempts to reuse this JexlPropertyGet, checking that it is compatible with", "DEL SingleVariableDeclaration", "DEL TextElement: </code>", "DEL TextElement: <code>", "DEL TextElement:  the result of the method invocation that should be checked by tryFailed to determine if it succeeded", "DEL Javadoc", "DEL SimpleName: obj", "DEL TagElement: @throws", "DEL Javadoc", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: isCacheable", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL TagElement: @return", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleName: Exception", "DEL SimpleName: rval", "DEL TagElement: @since", "DEL TextElement: this class of object it was returned for.", "DEL TagElement: @param", "DEL SimpleName: invoke", "DEL SimpleType: Object", "DEL SimpleName: key", "DEL TextElement: Interface for getting values that appear to be properties.", "DEL SimpleType: Exception", "DEL PrimitiveType: boolean", "DEL TextElement: Checks whether a tryInvoke failed or not.", "DEL TextElement: ${foo.bar}", "DEL SimpleName: obj", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: tryFailed", "DEL TextElement:  the property key to get", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TextElement:  true if tryInvoke failed, false otherwise", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement:  on any error.", "DEL SimpleName: Object", "DEL PrimitiveType: boolean", "DEL SimpleName: obj", "DEL TextElement: or failed.", "DEL TextElement:  the property value.", "DEL SimpleName: rval", "DEL SimpleName: JexlPropertyGet", "DEL TagElement", "DEL TextElement:  the value returned by tryInvoke", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL TextElement:  the object to invoke the property get upon", "DEL TextElement:  true if can be reused for this class, false if not", "DEL Modifier: public"]}]}}, {"JexlPropertyGet_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Interface for getting values that appear to be properties.(2)", "Delete TextElement: Ex.(3)", "Delete TextElement: <code>(4)", "Delete TextElement: ${foo.bar}(5)", "Delete TextElement: </code>(6)", "Delete TagElement(7)", "Delete TextElement:  1.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: JexlPropertyGet(12)", "Delete TextElement: Method used to get the property value of an object.(13)", "Delete TagElement(14)", "Delete SimpleName: obj(15)", "Delete TextElement:  the object to get the property value from.(16)", "Delete TagElement: @param(17)", "Delete TextElement:  the property value.(18)", "Delete TagElement: @return(19)", "Delete SimpleName: Exception(20)", "Delete TextElement:  on any error.(21)", "Delete TagElement: @throws(22)", "Delete Javadoc(23)", "Delete SimpleName: Object(24)", "Delete SimpleType: Object(25)", "Delete SimpleName: invoke(26)", "Delete SimpleName: Object(27)", "Delete SimpleType: Object(28)", "Delete SimpleName: obj(29)", "Delete SingleVariableDeclaration(30)", "Delete SimpleName: Exception(31)", "Delete SimpleType: Exception(32)", "Delete MethodDeclaration(33)", "Delete TextElement: Attempts to reuse this JexlPropertyGet, checking that it is compatible with(34)", "Delete TextElement: the actual set of arguments.(35)", "Delete TagElement(36)", "Delete SimpleName: obj(37)", "Delete TextElement:  the object to invoke the property get upon(38)", "Delete TagElement: @param(39)", "Delete SimpleName: key(40)", "Delete TextElement:  the property key to get(41)", "Delete TagElement: @param(42)", "Delete TextElement:  the result of the method invocation that should be checked by tryFailed to determine if it succeeded(43)", "Delete TextElement: or failed.(44)", "Delete TagElement: @return(45)", "Delete Javadoc(46)", "Delete SimpleName: Object(47)", "Delete SimpleType: Object(48)", "Delete SimpleName: tryInvoke(49)", "Delete SimpleName: Object(50)", "Delete SimpleType: Object(51)", "Delete SimpleName: obj(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: Object(54)", "Delete SimpleType: Object(55)", "Delete SimpleName: key(56)", "Delete SingleVariableDeclaration(57)", "Delete MethodDeclaration(58)", "Delete TextElement: Checks whether a tryInvoke failed or not.(59)", "Delete TagElement(60)", "Delete SimpleName: rval(61)", "Delete TextElement:  the value returned by tryInvoke(62)", "Delete TagElement: @param(63)", "Delete TextElement:  true if tryInvoke failed, false otherwise(64)", "Delete TagElement: @return(65)", "Delete Javadoc(66)", "Delete PrimitiveType: boolean(67)", "Delete SimpleName: tryFailed(68)", "Delete SimpleName: Object(69)", "Delete SimpleType: Object(70)", "Delete SimpleName: rval(71)", "Delete SingleVariableDeclaration(72)", "Delete MethodDeclaration(73)", "Delete TextElement: Specifies if this JexlPropertyGet is cacheable and able to be reused for(74)", "Delete TextElement: this class of object it was returned for.(75)", "Delete TagElement(76)", "Delete TextElement:  true if can be reused for this class, false if not(77)", "Delete TagElement: @return(78)", "Delete Javadoc(79)", "Delete PrimitiveType: boolean(80)", "Delete SimpleName: isCacheable(81)", "Delete MethodDeclaration(82)", "Delete TypeDeclaration: interface(83)"]}}, {"JexlPropertySet_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleName: arg", "DEL SimpleName: obj", "DEL SimpleName: JexlPropertySet", "DEL SingleVariableDeclaration", "DEL TextElement:  the result of the method invocation that should be checked by tryFailed to determine if it succeeded", "DEL TagElement", "DEL SimpleName: tryFailed", "DEL PrimitiveType: boolean", "DEL TextElement:  1.0", "DEL TextElement:  the property key to get", "DEL SimpleName: obj", "DEL TextElement:  the object to invoke the the get upon", "DEL TextElement: Attempts to reuse this JexlPropertySet, checking that it is compatible with", "DEL PrimitiveType: boolean", "DEL SimpleName: Object", "DEL TagElement: @since", "DEL TagElement: @return", "DEL SimpleName: isCacheable", "DEL SimpleType: Object", "DEL TagElement", "DEL SimpleType: Object", "DEL SimpleName: rval", "DEL SimpleName: value", "DEL SimpleName: obj", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL TextElement:  on any error.", "DEL TextElement: the actual set of arguments.", "DEL TagElement", "DEL TextElement: Specifies if this JexlPropertySet is cacheable and able to be reused for", "DEL Javadoc", "DEL Javadoc", "DEL TagElement: @param", "DEL TagElement: @param", "DEL TagElement: @return", "DEL TextElement: <code>", "DEL TagElement", "DEL TextElement: this class of object it was returned for.", "DEL SimpleName: Object", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleType: Exception", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TextElement: </code>", "DEL SingleVariableDeclaration", "DEL TextElement:  the value returned by tryInvoke", "DEL SimpleName: Object", "DEL TextElement: Checks whether a tryInvoke failed or not.", "DEL SimpleName: key", "DEL TagElement: @param", "DEL SimpleName: Exception", "DEL TextElement:  value to be set", "DEL SingleVariableDeclaration", "DEL TextElement:  the value returned from the set operation (impl specific)", "DEL TextElement: or failed.", "DEL TextElement: Method used to set the property value of an object.", "DEL TextElement:  the property value to set", "DEL SimpleName: Exception", "DEL TagElement: @param", "DEL SimpleName: value", "DEL SimpleName: Object", "DEL TextElement:  true if tryInvoke failed, false otherwise", "DEL SimpleName: rval", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL Javadoc", "DEL SimpleName: tryInvoke", "DEL SimpleName: arg", "DEL SimpleName: Object", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement:  Object on which the property setter will be called with the value", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL TypeDeclaration: interface", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: Object", "DEL TagElement: @return", "DEL TextElement:  true if can be reused for this class, false if not", "DEL TextElement: ${foo.bar = \"hello\"}", "DEL TagElement: @throws", "DEL TextElement: Interface used for setting values that appear to be properties.", "DEL SimpleName: key", "DEL SimpleName: invoke", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL TextElement: Ex.", "DEL SimpleType: Object", "DEL TagElement", "DEL MethodDeclaration"]}]}}, {"JexlPropertySet_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Interface used for setting values that appear to be properties.(2)", "Delete TextElement: Ex.(3)", "Delete TextElement: <code>(4)", "Delete TextElement: ${foo.bar = \"hello\"}(5)", "Delete TextElement: </code>(6)", "Delete TagElement(7)", "Delete TextElement:  1.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: JexlPropertySet(12)", "Delete TextElement: Method used to set the property value of an object.(13)", "Delete TagElement(14)", "Delete SimpleName: obj(15)", "Delete TextElement:  Object on which the property setter will be called with the value(16)", "Delete TagElement: @param(17)", "Delete SimpleName: arg(18)", "Delete TextElement:  value to be set(19)", "Delete TagElement: @param(20)", "Delete TextElement:  the value returned from the set operation (impl specific)(21)", "Delete TagElement: @return(22)", "Delete SimpleName: Exception(23)", "Delete TextElement:  on any error.(24)", "Delete TagElement: @throws(25)", "Delete Javadoc(26)", "Delete SimpleName: Object(27)", "Delete SimpleType: Object(28)", "Delete SimpleName: invoke(29)", "Delete SimpleName: Object(30)", "Delete SimpleType: Object(31)", "Delete SimpleName: obj(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: Object(34)", "Delete SimpleType: Object(35)", "Delete SimpleName: arg(36)", "Delete SingleVariableDeclaration(37)", "Delete SimpleName: Exception(38)", "Delete SimpleType: Exception(39)", "Delete MethodDeclaration(40)", "Delete TextElement: Attempts to reuse this JexlPropertySet, checking that it is compatible with(41)", "Delete TextElement: the actual set of arguments.(42)", "Delete TagElement(43)", "Delete SimpleName: obj(44)", "Delete TextElement:  the object to invoke the the get upon(45)", "Delete TagElement: @param(46)", "Delete SimpleName: key(47)", "Delete TextElement:  the property key to get(48)", "Delete TagElement: @param(49)", "Delete SimpleName: value(50)", "Delete TextElement:  the property value to set(51)", "Delete TagElement: @param(52)", "Delete TextElement:  the result of the method invocation that should be checked by tryFailed to determine if it succeeded(53)", "Delete TextElement: or failed.(54)", "Delete TagElement: @return(55)", "Delete Javadoc(56)", "Delete SimpleName: Object(57)", "Delete SimpleType: Object(58)", "Delete SimpleName: tryInvoke(59)", "Delete SimpleName: Object(60)", "Delete SimpleType: Object(61)", "Delete SimpleName: obj(62)", "Delete SingleVariableDeclaration(63)", "Delete SimpleName: Object(64)", "Delete SimpleType: Object(65)", "Delete SimpleName: key(66)", "Delete SingleVariableDeclaration(67)", "Delete SimpleName: Object(68)", "Delete SimpleType: Object(69)", "Delete SimpleName: value(70)", "Delete SingleVariableDeclaration(71)", "Delete MethodDeclaration(72)", "Delete TextElement: Checks whether a tryInvoke failed or not.(73)", "Delete TagElement(74)", "Delete SimpleName: rval(75)", "Delete TextElement:  the value returned by tryInvoke(76)", "Delete TagElement: @param(77)", "Delete TextElement:  true if tryInvoke failed, false otherwise(78)", "Delete TagElement: @return(79)", "Delete Javadoc(80)", "Delete PrimitiveType: boolean(81)", "Delete SimpleName: tryFailed(82)", "Delete SimpleName: Object(83)", "Delete SimpleType: Object(84)", "Delete SimpleName: rval(85)", "Delete SingleVariableDeclaration(86)", "Delete MethodDeclaration(87)", "Delete TextElement: Specifies if this JexlPropertySet is cacheable and able to be reused for(88)", "Delete TextElement: this class of object it was returned for.(89)", "Delete TagElement(90)", "Delete TextElement:  true if can be reused for this class, false if not(91)", "Delete TagElement: @return(92)", "Delete Javadoc(93)", "Delete PrimitiveType: boolean(94)", "Delete SimpleName: isCacheable(95)", "Delete MethodDeclaration(96)", "Delete TypeDeclaration: interface(97)"]}}, {"Sandbox_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL TextElement: A sandbox describes permissions on a class by explicitly allowing or forbidding access to methods and properties", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleType: Names", "DEL TagElement", "DEL TextElement: Creates a new default sandbox.", "DEL Modifier: public", "DEL TextElement:  the property name", "DEL BooleanLiteral: true", "DEL Modifier: final", "DEL TextElement: Adds a list of readable property names to these permissions.", "DEL SimpleName: put", "DEL Javadoc", "DEL TextElement: <li>", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL IfStatement", "DEL SimpleType: String", "DEL SimpleName: names", "DEL SimpleName: clazz", "DEL SimpleType: Names", "DEL SimpleName: clazz", "DEL TagElement", "DEL TextElement:  whether the write property list is white or black", "DEL InfixExpression: ==", "DEL SimpleName: executeFlag", "DEL TextElement:  the class", "DEL SimpleName: Override", "DEL SimpleName: write", "DEL Modifier: public", "DEL NullLiteral", "DEL FieldDeclaration", "DEL ThisExpression", "DEL SimpleName: read", "DEL Modifier: public", "DEL SimpleName: name", "DEL SimpleName: Names", "DEL TagElement", "DEL SimpleName: get", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: pname", "DEL SimpleName: String", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleName: name", "DEL NullLiteral", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleName: get", "DEL SimpleName: pnames", "DEL Modifier: public", "DEL SimpleName: WHITE_NAMES", "DEL Modifier: public", "DEL NullLiteral", "DEL TagElement", "DEL SimpleName: sandbox", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL TextElement: <li><b>write</b> controls writeable properties</li>", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: sandbox", "DEL Javadoc", "DEL SimpleType: Permissions", "DEL SimpleName: add", "DEL SimpleType: Names", "DEL Block", "DEL SimpleName: Names", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: mnames", "DEL SimpleName: readFlag", "DEL SimpleName: get", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SimpleName: WHITE_NAMES", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,Permissions>", "DEL Modifier: final", "DEL SimpleName: name", "DEL TagElement: @return", "DEL SimpleName: String", "DEL SimpleName: read", "DEL SimpleName: black", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleName: String", "DEL TextElement: A <b>blacklist</b> explicitly forbids methods/properties for a class;", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL TagElement: @return", "DEL SimpleName: Names", "DEL Javadoc", "DEL Javadoc", "DEL TextElement: <p>The constructor is denoted as the empty-string, all other methods by their names.</p>", "DEL TextElement: <li>", "DEL TextElement:  2.1", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: add", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: executeFlag", "DEL TextElement: Creates a new permissions instance.", "DEL Block", "DEL ConditionalExpression", "DEL EnhancedForStatement", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: names", "DEL SimpleName: execute", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleType: Names", "DEL SimpleType: BlackSet", "DEL TextElement: The controlled readable properties. ", "DEL TextElement: Adds a list of executable methods names to these permissions.", "DEL TagElement", "DEL TextElement: Creates a new set of permissions based on white lists for methods and properties for a given class.", "DEL SimpleName: permissions", "DEL SimpleName: String", "DEL SimpleType: Permissions", "DEL SimpleName: name", "DEL TextElement: </li>", "DEL TextElement:  the whitened class name", "DEL SimpleName: pnames", "DEL SimpleName: Permissions", "DEL SimpleName: Permissions", "DEL SimpleName: get", "DEL SimpleName: permissions", "DEL Javadoc", "DEL MethodDeclaration", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleType: Permissions", "DEL SimpleName: execute", "DEL SimpleName: clazz", "DEL SimpleName: add", "DEL SimpleType: String", "DEL SimpleName: permissions", "DEL SingleVariableDeclaration", "DEL TextElement: Creates a new permissions instance.", "DEL SimpleName: get", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL TextElement: If a blacklist is empty and thus does not contain any names, all properties/methods are forbidden for its class.", "DEL TagElement", "DEL SimpleName: names", "DEL SingleVariableDeclaration", "DEL SimpleName: execute", "DEL Modifier: public", "DEL SimpleName: box", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: nexecute", "DEL ConditionalExpression", "DEL SimpleName: Class", "DEL Modifier: public", "DEL Modifier: static", "DEL TextElement: The controlled methods. ", "DEL PrimitiveType: boolean", "DEL SimpleName: alias", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: pnames", "DEL TextElement: </ul>", "DEL TagElement: @param", "DEL SimpleName: name", "DEL TextElement: A black set of names.", "DEL TagElement: @return", "DEL Modifier: static", "DEL TextElement: A base set of names.", "DEL MethodDeclaration", "DEL Block", "DEL Javadoc", "DEL TextElement: The set of controlled names. ", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleName: permissions", "DEL NullLiteral", "DEL SimpleName: Override", "DEL TextElement:  null if not allowed, the actual name to use otherwise", "DEL Assignment: =", "DEL TextElement: Adds a name to this set.", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL TextElement:  the set of permissions", "DEL SimpleName: Permissions", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL SimpleName: Override", "DEL SimpleName: names", "DEL TextElement:  the name to alias", "DEL MethodDeclaration", "DEL ConditionalExpression", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: nexecute", "DEL WildcardType: ?", "DEL SimpleName: clazz", "DEL TextElement:  the class", "DEL BooleanLiteral: false", "DEL Block", "DEL SimpleName: name", "DEL FieldDeclaration", "DEL SimpleType: Map", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement: @return", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleName: execute", "DEL TagElement: @return", "DEL SimpleName: add", "DEL IfStatement", "DEL TagElement", "DEL SimpleName: mname", "DEL BooleanLiteral: false", "DEL SimpleName: Permissions", "DEL Javadoc", "DEL TagElement", "DEL SimpleType: String", "DEL SimpleName: alias", "DEL TextElement:  the class name", "DEL SimpleName: Permissions", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL ConditionalExpression", "DEL ReturnStatement", "DEL SimpleName: WHITE_NAMES", "DEL MethodInvocation", "DEL ConstructorInvocation", "DEL Javadoc", "DEL Block", "DEL TextElement: The map from class names to permissions.", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleName: map", "DEL SimpleName: WhiteSet", "DEL ClassInstanceCreation", "DEL SimpleName: write", "DEL TextElement:  null if not allowed, the name of the property to use otherwise", "DEL SimpleType: WhiteSet", "DEL TagElement", "DEL TagElement: @return", "DEL TextElement: Gets the write permission value for a given property of a class.", "DEL SimpleName: write", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: add", "DEL Modifier: public", "DEL SimpleName: String", "DEL TextElement:  the property name", "DEL Block", "DEL ParameterizedType: HashMap<String,String>", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: ALL_WHITE", "DEL SimpleName: Override", "DEL SimpleName: writeFlag", "DEL TextElement: <p>", "DEL TextElement:  the method names", "DEL SimpleName: String", "DEL IfStatement", "DEL SimpleName: ALL_WHITE", "DEL SimpleName: clazz", "DEL SimpleName: permissions", "DEL Modifier: private", "DEL SimpleName: execute", "DEL MethodDeclaration", "DEL SimpleName: sandbox", "DEL SimpleName: read", "DEL SimpleName: String", "DEL SimpleName: WhiteSet", "DEL SimpleName: names", "DEL Modifier: public", "DEL Modifier: public", "DEL ParameterizedType: Class<?>", "DEL PrimitiveType: boolean", "DEL SimpleType: Permissions", "DEL TextElement:  the class name", "DEL SimpleName: Permissions", "DEL SimpleName: write", "DEL SimpleType: Permissions", "DEL MethodInvocation", "DEL SimpleName: execute", "DEL BooleanLiteral: false", "DEL Javadoc", "DEL SimpleName: WHITE_NAMES", "DEL ThisExpression", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Modifier: final", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL SimpleName: names", "DEL SimpleName: permissions", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TagElement: @param", "DEL TextElement:  the method name", "DEL MarkerAnnotation", "DEL SimpleType: Permissions", "DEL SimpleName: String", "DEL SimpleName: Permissions", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: Names", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleType: Names", "DEL TextElement:  null if not allowed, the name of the method to use otherwise", "DEL ReturnStatement", "DEL TagElement: @return", "DEL Modifier: final", "DEL SimpleType: Names", "DEL SimpleName: String", "DEL SimpleName: name", "DEL SimpleName: write", "DEL Javadoc", "DEL SimpleName: name", "DEL TagElement: @param", "DEL SimpleName: String", "DEL ReturnStatement", "DEL TextElement:  the permissions instance", "DEL SimpleName: String", "DEL SimpleName: String", "DEL TextElement:  the class name", "DEL TextElement:  the name to add", "DEL TextElement:  the alias", "DEL Modifier: final", "DEL SimpleName: map", "DEL SimpleName: read", "DEL Block", "DEL ThisExpression", "DEL SimpleName: permissions", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL TagElement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: BlackSet", "DEL Javadoc", "DEL SimpleName: name", "DEL SimpleName: add", "DEL SimpleName: WhiteSet", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL TextElement: </p>", "DEL SimpleName: clazz", "DEL SimpleName: nread", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleType: Names", "DEL SimpleName: name", "DEL SimpleName: nexecute", "DEL SingleVariableDeclaration", "DEL SimpleName: permissions", "DEL SimpleName: String", "DEL SimpleName: name", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: readFlag", "DEL MethodDeclaration", "DEL SimpleType: Names", "DEL SimpleType: BlackSet", "DEL TagElement: @param", "DEL SimpleName: String", "DEL Modifier: abstract", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleType: Names", "DEL BooleanLiteral: true", "DEL SimpleName: permissions", "DEL TextElement: Creates a new set of permissions based on black lists for methods and properties for a given class.", "DEL ReturnStatement", "DEL Modifier: final", "DEL TextElement: Gets the write permission value for a given property of a class.", "DEL SimpleType: WhiteSet", "DEL SimpleType: String", "DEL SimpleName: get", "DEL ParameterizedType: HashMap<String,String>", "DEL TagElement: @return", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TextElement: <p>", "DEL InfixExpression: ==", "DEL SimpleName: BlackSet", "DEL SimpleName: executeFlag", "DEL SimpleType: Permissions", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL TextElement:  the set of property names", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL TagElement: @param", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: executeFlag", "DEL TextElement:  the property name", "DEL SimpleName: name", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL SimpleName: HashMap", "DEL SimpleName: WHITE_NAMES", "DEL SimpleName: name", "DEL SimpleName: name", "DEL TagElement", "DEL SimpleName: alias", "DEL MethodDeclaration", "DEL ConditionalExpression", "DEL TagElement", "DEL Block", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SimpleName: name", "DEL TagElement", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: clazz", "DEL SimpleName: names", "DEL TextElement:  this instance of permissions", "DEL Block", "DEL TextElement: The pass-thru name set.", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: readFlag", "DEL ParameterizedType: Class<?>", "DEL TagElement: @return", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: getName", "DEL ExpressionStatement", "DEL TextElement:  the defined permissions or an all-white permission instance if none were defined", "DEL Assignment: =", "DEL Modifier: public", "DEL TextElement: <li>", "DEL SimpleName: names", "DEL TagElement: @return", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Javadoc", "DEL TextElement: Gets the execute permission value for a given method of a class.", "DEL SimpleName: String", "DEL TypeDeclaration: class", "DEL SimpleName: String", "DEL TextElement: <ul>", "DEL TagElement", "DEL SimpleName: name", "DEL Block", "DEL Block", "DEL SimpleName: read", "DEL ParameterizedType: Set<String>", "DEL Modifier: public", "DEL SimpleName: name", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleType: String", "DEL ClassInstanceCreation", "DEL SimpleName: clazz", "DEL ReturnStatement", "DEL SimpleName: name", "DEL TagElement", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL ParameterizedType: HashMap<String,Permissions>", "DEL ExpressionStatement", "DEL Modifier: final", "DEL TagElement: @param", "DEL SimpleName: sandbox", "DEL SimpleType: String", "DEL SimpleName: execute", "DEL TextElement:  the class", "DEL TagElement: @param", "DEL SimpleName: mnames", "DEL TagElement: @param", "DEL InfixExpression: ==", "DEL SimpleType: String", "DEL Modifier: protected", "DEL TagElement: @return", "DEL BooleanLiteral: true", "DEL TypeDeclaration: class", "DEL TagElement: @return", "DEL SimpleType: String", "DEL SimpleName: name", "DEL PrimitiveType: boolean", "DEL SimpleName: nwrite", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleName: names", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Modifier: private", "DEL NullLiteral", "DEL TextElement:  the property name", "DEL ReturnStatement", "DEL Modifier: protected", "DEL TextElement:  whether the readable property list is white - true - or black - false -", "DEL SimpleName: clazz", "DEL SimpleName: nwrite", "DEL SimpleName: WHITE_NAMES", "DEL SimpleName: clazz", "DEL ConstructorInvocation", "DEL SimpleName: clazz", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: execute", "DEL SimpleType: String", "DEL SimpleType: String", "DEL TextElement: <p>This only has an effect on white lists.</p>", "DEL MethodInvocation", "DEL SimpleName: nread", "DEL SimpleName: String", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL Block", "DEL TagElement", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL TextElement: Permissions are composed of three lists, read, write, execute, each being \"white\" or \"black\":", "DEL TextElement:  null if not allowed, the name of the method to use otherwise", "DEL SimpleType: String", "DEL TextElement: </li>", "DEL ReturnStatement", "DEL TagElement", "DEL Block", "DEL SimpleName: Names", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: names", "DEL SimpleName: String", "DEL SimpleName: names", "DEL SimpleName: readFlag", "DEL SimpleType: String", "DEL TextElement: A white set of names.", "DEL TextElement:  null if not allowed, the name of the property to use otherwise", "DEL TagElement", "DEL SimpleName: String", "DEL PrimitiveType: boolean", "DEL SimpleType: Permissions", "DEL InfixExpression: &&", "DEL SimpleName: Permissions", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: names", "DEL FieldAccess", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL TextElement:  the method name", "DEL Block", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL Block", "DEL MethodDeclaration", "DEL Block", "DEL NullLiteral", "DEL Javadoc", "DEL Modifier: final", "DEL TextElement:  the class for which these permissions apply", "DEL SimpleName: writeFlag", "DEL TextElement:   true if the name was really added, false if not", "DEL TagElement", "DEL InfixExpression: ==", "DEL Block", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL ParameterizedType: Class<?>", "DEL SimpleName: String", "DEL TextElement: <ul>", "DEL BooleanLiteral: false", "DEL SimpleName: name", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: clazz", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: name", "DEL SimpleName: map", "DEL SimpleName: execute", "DEL Block", "DEL SimpleName: clazz", "DEL InfixExpression: !=", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: permissions", "DEL SimpleName: Permissions", "DEL SimpleName: name", "DEL SimpleName: String", "DEL SimpleName: names", "DEL NullLiteral", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL SimpleName: pnames", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL SimpleName: String", "DEL TagElement: @param", "DEL ClassInstanceCreation", "DEL SimpleName: Map", "DEL SimpleName: name", "DEL TextElement: A <b>whitelist</b> explicitly allows methods/properties for a class;", "DEL TextElement: Adds an alias to a name to this set.", "DEL NullLiteral", "DEL SimpleName: String", "DEL TextElement:  the property names", "DEL Block", "DEL SimpleName: getName", "DEL TextElement: <li><b>execute</b> controls executable methods and constructor</li>", "DEL Javadoc", "DEL TextElement:  the method/property name to check", "DEL SimpleName: String", "DEL SimpleName: Permissions", "DEL Javadoc", "DEL Block", "DEL SimpleName: HashMap", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: writeFlag", "DEL Modifier: private", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: Names", "DEL TextElement: </ul>", "DEL SimpleType: Names", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: permissions", "DEL SimpleName: String", "DEL TagElement", "DEL TagElement", "DEL SimpleType: Permissions", "DEL PrimitiveType: boolean", "DEL SimpleName: nwrite", "DEL SimpleName: alias", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: clazz", "DEL MethodDeclaration", "DEL SimpleName: mname", "DEL TypeDeclaration: class", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Names", "DEL Modifier: static", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL Modifier: private", "DEL SimpleType: Permissions", "DEL SimpleName: String", "DEL Block", "DEL Modifier: abstract", "DEL SimpleName: Permissions", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TextElement: </li>", "DEL MethodDeclaration", "DEL SimpleName: Permissions", "DEL SimpleName: name", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: name", "DEL SimpleType: Permissions", "DEL SimpleName: pnames", "DEL SimpleType: Permissions", "DEL SimpleName: Names", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: read", "DEL SimpleType: HashMap", "DEL SimpleName: Permissions", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: readFlag", "DEL SimpleName: BlackSet", "DEL SimpleName: String", "DEL SimpleName: read", "DEL SimpleName: String", "DEL SimpleName: Names", "DEL SimpleName: clazz", "DEL SimpleType: Class", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TextElement: </p>", "DEL Javadoc", "DEL SimpleName: Permissions", "DEL SimpleName: Set", "DEL ClassInstanceCreation", "DEL SimpleName: clazz", "DEL SimpleName: Class", "DEL SimpleName: clazz", "DEL SimpleName: String", "DEL SimpleName: name", "DEL TextElement: Gets the read permission value for a given property of a class.", "DEL SimpleName: readFlag", "DEL TagElement: @param", "DEL NullLiteral", "DEL SimpleType: Map", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL SimpleName: Map", "DEL SimpleName: pnames", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: add", "DEL TextElement: </li>", "DEL SimpleName: clazz", "DEL Block", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: Names", "DEL MethodDeclaration", "DEL SimpleName: name", "DEL TagElement: @return", "DEL SimpleName: nwrite", "DEL TextElement: If it is not empty, the only forbidden properties/methods are the ones contained.", "DEL TagElement: @return", "DEL SimpleName: get", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleName: Names", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: Permissions", "DEL FieldDeclaration", "DEL SimpleType: Permissions", "DEL BooleanLiteral: false", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL TextElement: Creates the set of permissions for a given class.", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL SimpleType: String", "DEL TextElement:  the class name", "DEL Javadoc", "DEL SimpleName: alias", "DEL SimpleType: Map", "DEL IfStatement", "DEL SimpleType: String", "DEL Block", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: Permissions", "DEL TagElement", "DEL SimpleType: Names", "DEL Javadoc", "DEL TextElement:  the write set", "DEL SimpleName: executeFlag", "DEL TextElement: Whether a given name is allowed or not.", "DEL SimpleType: WhiteSet", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: write", "DEL TagElement", "DEL SimpleName: write", "DEL SimpleName: write", "DEL SimpleName: clazz", "DEL SimpleName: writeFlag", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: mnames", "DEL SimpleName: put", "DEL SimpleName: box", "DEL NullLiteral", "DEL TextElement:  whether the writeable property list is white - true - or black - false -", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL SimpleName: add", "DEL TextElement: <li>", "DEL Block", "DEL Modifier: public", "DEL TextElement:  the permissions map", "DEL SimpleName: sandbox", "DEL TagElement: @param", "DEL ReturnStatement", "DEL Block", "DEL MarkerAnnotation", "DEL TextElement: through \"whitelists\" and \"blacklists\".", "DEL Javadoc", "DEL Modifier: private", "DEL Modifier: static", "DEL SimpleName: read", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleName: Map", "DEL SimpleName: String", "DEL SimpleName: write", "DEL WildcardType: ?", "DEL ThisExpression", "DEL SimpleName: HashSet", "DEL IfStatement", "DEL SimpleName: name", "DEL ParameterizedType: HashSet<String>", "DEL TagElement: @param", "DEL SimpleName: Sandbox", "DEL SimpleName: WHITE_NAMES", "DEL TextElement:  the property names", "DEL InfixExpression: !=", "DEL TagElement: @since", "DEL SimpleType: Permissions", "DEL SimpleName: String", "DEL SimpleName: names", "DEL TextElement: The pass-thru permissions.", "DEL MethodDeclaration", "DEL SimpleName: Names", "DEL TextElement: Contains the white or black lists for properties and methods for a given class.", "DEL TextElement: Gets the set of permissions associated to a class.", "DEL TextElement:  the blackened class name", "DEL SimpleType: String", "DEL SimpleName: permissions", "DEL SimpleName: contains", "DEL SimpleName: get", "DEL SimpleType: String", "DEL Modifier: static", "DEL EnhancedForStatement", "DEL SimpleName: String", "DEL Block", "DEL Block", "DEL SimpleType: String", "DEL Modifier: private", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleName: Permissions", "DEL Block", "DEL SimpleType: Permissions", "DEL Modifier: public", "DEL SimpleName: name", "DEL SimpleName: pname", "DEL SimpleName: clazz", "DEL SimpleName: String", "DEL SimpleName: executeFlag", "DEL TagElement", "DEL SimpleType: Class", "DEL SimpleType: Names", "DEL SimpleName: BlackSet", "DEL SimpleType: HashSet", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL SingleVariableDeclaration", "DEL SimpleName: HashMap", "DEL SimpleName: names", "DEL TagElement", "DEL SimpleName: writeFlag", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL TagElement: @param", "DEL TagElement: @return", "DEL TextElement: </ul>", "DEL SimpleName: clazz", "DEL SimpleName: Names", "DEL SimpleName: alias", "DEL Block", "DEL TagElement: @return", "DEL SimpleName: nread", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Permissions", "DEL NullLiteral", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: String", "DEL TypeDeclaration: class", "DEL SimpleName: Names", "DEL ReturnStatement", "DEL AnonymousClassDeclaration", "DEL SimpleName: write", "DEL TextElement:  the method set ", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleName: get", "DEL MarkerAnnotation", "DEL SimpleName: clazz", "DEL SimpleType: String", "DEL Javadoc", "DEL TagElement: @param", "DEL IfStatement", "DEL TextElement:  the permissions instance", "DEL SimpleName: name", "DEL SimpleName: name", "DEL Javadoc", "DEL Modifier: static", "DEL TextElement: If it is not empty, the only allowed properties/methods are the ones contained.", "DEL Modifier: public", "DEL TextElement:  the set of method names", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement:   true if the alias was added, false if it was already present", "DEL SimpleName: String", "DEL SimpleName: execute", "DEL TextElement:  this instance of permissions", "DEL TextElement: Gets the set of method names in these permissions.", "DEL SingleVariableDeclaration", "DEL SimpleName: get", "DEL SimpleType: String", "DEL SimpleName: Permissions", "DEL SimpleName: permissions", "DEL SingleVariableDeclaration", "DEL SimpleType: Set", "DEL SimpleType: Permissions", "DEL SimpleName: permissions", "DEL InfixExpression: ==", "DEL Javadoc", "DEL TextElement:  whether the method list is white of black", "DEL SimpleName: writeFlag", "DEL SimpleName: clazz", "DEL SimpleName: sandbox", "DEL SimpleName: Sandbox", "DEL MethodInvocation", "DEL SimpleName: String", "DEL TagElement: @return", "DEL ThisExpression", "DEL SimpleName: String", "DEL SimpleName: nexecute", "DEL TagElement", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: nread", "DEL TextElement: The controlled  writeable properties. ", "DEL SingleVariableDeclaration", "DEL TextElement: <li><b>read</b> controls readable properties </li>", "DEL SimpleName: Sandbox", "DEL TagElement: @param", "DEL SimpleType: String", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL ParameterizedType: Map<String,Permissions>", "DEL MethodInvocation", "DEL Modifier: protected", "DEL TextElement: <ul>", "DEL Block", "DEL VariableDeclarationStatement", "DEL MarkerAnnotation", "DEL TagElement: @param", "DEL SimpleName: Permissions", "DEL SimpleName: sandbox", "DEL TextElement:  null if not allowed, the name of the property to use otherwise", "DEL SimpleName: Permissions", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleName: read", "DEL SimpleName: clazz", "DEL SimpleName: name", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: Permissions", "DEL SimpleName: permissions", "DEL ReturnStatement", "DEL TextElement: Gets the read permission value for a given property of a class.", "DEL SimpleName: put", "DEL SimpleType: HashMap", "DEL SimpleName: white", "DEL TagElement: @param", "DEL TextElement: The map of controlled names and aliases. ", "DEL MethodDeclaration", "DEL Block", "DEL TextElement:  whether the read property list is white or black", "DEL SimpleName: Names", "DEL SimpleName: pname", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL TextElement: Creates a sandbox based on an existing permissions map.", "DEL TextElement:  null if not allowed, the name of the property to use otherwise", "DEL SimpleName: name", "DEL InfixExpression: !=", "DEL SimpleType: String", "DEL ConditionalExpression", "DEL TextElement:  this instance of permissions", "DEL TextElement:  the set of property names", "DEL NullLiteral", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: WhiteSet", "DEL FieldDeclaration", "DEL TextElement: Gets the set of readable property names in these permissions.", "DEL TextElement:  the read set", "DEL SimpleName: String", "DEL SimpleName: box", "DEL Javadoc", "DEL TextElement: <p>", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: Permissions", "DEL Block", "DEL SimpleType: String", "DEL Block", "DEL EnhancedForStatement", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleName: clazz", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL TextElement:  whether the executable method list is white white - true - or black - false -", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL SimpleType: BlackSet", "DEL ConditionalExpression", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL TextElement: Gets the set of writeable property names in these permissions.", "DEL SimpleType: HashMap", "DEL TagElement: @return", "DEL Block", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL TextElement: Adds a list of writeable property names to these permissions.", "DEL SimpleName: pname", "DEL TextElement: If a whitelist is empty and thus does not contain any names, all properties/methods are allowed for its class.", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: read", "DEL TextElement: Gets the execute permission value for a given method of a class.", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL Block", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL ReturnStatement"]}]}}, {"Sandbox_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.HashMap(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.HashSet(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Map(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Set(8)", "Delete ImportDeclaration(9)", "Delete TextElement: A sandbox describes permissions on a class by explicitly allowing or forbidding access to methods and properties(10)", "Delete TextElement: through \"whitelists\" and \"blacklists\".(11)", "Delete TextElement: <p>(12)", "Delete TextElement: A <b>whitelist</b> explicitly allows methods/properties for a class;(13)", "Delete TextElement: <ul>(14)", "Delete TextElement: <li>(15)", "Delete TextElement: If a whitelist is empty and thus does not contain any names, all properties/methods are allowed for its class.(16)", "Delete TextElement: </li>(17)", "Delete TextElement: <li>(18)", "Delete TextElement: If it is not empty, the only allowed properties/methods are the ones contained.(19)", "Delete TextElement: </li>(20)", "Delete TextElement: </ul>(21)", "Delete TextElement: </p>(22)", "Delete TextElement: <p>(23)", "Delete TextElement: A <b>blacklist</b> explicitly forbids methods/properties for a class;(24)", "Delete TextElement: <ul>(25)", "Delete TextElement: <li>(26)", "Delete TextElement: If a blacklist is empty and thus does not contain any names, all properties/methods are forbidden for its class.(27)", "Delete TextElement: </li>(28)", "Delete TextElement: <li>(29)", "Delete TextElement: If it is not empty, the only forbidden properties/methods are the ones contained.(30)", "Delete TextElement: </li>(31)", "Delete TextElement: </ul>(32)", "Delete TextElement: <p>(33)", "Delete TextElement: Permissions are composed of three lists, read, write, execute, each being \"white\" or \"black\":(34)", "Delete TextElement: <ul>(35)", "Delete TextElement: <li><b>read</b> controls readable properties </li>(36)", "Delete TextElement: <li><b>write</b> controls writeable properties</li>(37)", "Delete TextElement: <li><b>execute</b> controls executable methods and constructor</li>(38)", "Delete TextElement: </ul>(39)", "Delete TextElement: </p>(40)", "Delete TagElement(41)", "Delete TextElement:  2.1(42)", "Delete TagElement: @since(43)", "Delete Javadoc(44)", "Delete Modifier: public(45)", "Delete Modifier: final(46)", "Delete SimpleName: Sandbox(47)", "Delete TextElement: The map from class names to permissions.(48)", "Delete TagElement(49)", "Delete Javadoc(50)", "Delete Modifier: private(51)", "Delete Modifier: final(52)", "Delete SimpleName: Map(53)", "Delete SimpleType: Map(54)", "Delete SimpleName: String(55)", "Delete SimpleType: String(56)", "Delete SimpleName: Permissions(57)", "Delete SimpleType: Permissions(58)", "Delete ParameterizedType: Map<String,Permissions>(59)", "Delete SimpleName: sandbox(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete TextElement: Creates a new default sandbox.(63)", "Delete TagElement(64)", "Delete Javadoc(65)", "Delete Modifier: public(66)", "Delete SimpleName: Sandbox(67)", "Delete SimpleName: HashMap(68)", "Delete SimpleType: HashMap(69)", "Delete SimpleName: String(70)", "Delete SimpleType: String(71)", "Delete SimpleName: Permissions(72)", "Delete SimpleType: Permissions(73)", "Delete ParameterizedType: HashMap<String,Permissions>(74)", "Delete ClassInstanceCreation(75)", "Delete ConstructorInvocation(76)", "Delete Block(77)", "Delete MethodDeclaration(78)", "Delete TextElement: Creates a sandbox based on an existing permissions map.(79)", "Delete TagElement(80)", "Delete SimpleName: map(81)", "Delete TextElement:  the permissions map(82)", "Delete TagElement: @param(83)", "Delete Javadoc(84)", "Delete Modifier: protected(85)", "Delete SimpleName: Sandbox(86)", "Delete SimpleName: Map(87)", "Delete SimpleType: Map(88)", "Delete SimpleName: String(89)", "Delete SimpleType: String(90)", "Delete SimpleName: Permissions(91)", "Delete SimpleType: Permissions(92)", "Delete ParameterizedType: Map<String,Permissions>(93)", "Delete SimpleName: map(94)", "Delete SingleVariableDeclaration(95)", "Delete SimpleName: sandbox(96)", "Delete SimpleName: map(97)", "Delete Assignment: =(98)", "Delete ExpressionStatement(99)", "Delete Block(100)", "Delete MethodDeclaration(101)", "Delete TextElement: Gets the read permission value for a given property of a class.(102)", "Delete TagElement(103)", "Delete SimpleName: clazz(104)", "Delete TextElement:  the class(105)", "Delete TagElement: @param(106)", "Delete SimpleName: name(107)", "Delete TextElement:  the property name(108)", "Delete TagElement: @param(109)", "Delete TextElement:  null if not allowed, the name of the property to use otherwise(110)", "Delete TagElement: @return(111)", "Delete Javadoc(112)", "Delete Modifier: public(113)", "Delete SimpleName: String(114)", "Delete SimpleType: String(115)", "Delete SimpleName: read(116)", "Delete SimpleName: Class(117)", "Delete SimpleType: Class(118)", "Delete WildcardType: ?(119)", "Delete ParameterizedType: Class<?>(120)", "Delete SimpleName: clazz(121)", "Delete SingleVariableDeclaration(122)", "Delete SimpleName: String(123)", "Delete SimpleType: String(124)", "Delete SimpleName: name(125)", "Delete SingleVariableDeclaration(126)", "Delete SimpleName: read(127)", "Delete SimpleName: clazz(128)", "Delete SimpleName: getName(129)", "Delete MethodInvocation(130)", "Delete SimpleName: name(131)", "Delete MethodInvocation(132)", "Delete ReturnStatement(133)", "Delete Block(134)", "Delete MethodDeclaration(135)", "Delete TextElement: Gets the read permission value for a given property of a class.(136)", "Delete TagElement(137)", "Delete SimpleName: clazz(138)", "Delete TextElement:  the class name(139)", "Delete TagElement: @param(140)", "Delete SimpleName: name(141)", "Delete TextElement:  the property name(142)", "Delete TagElement: @param(143)", "Delete TextElement:  null if not allowed, the name of the property to use otherwise(144)", "Delete TagElement: @return(145)", "Delete Javadoc(146)", "Delete Modifier: public(147)", "Delete SimpleName: String(148)", "Delete SimpleType: String(149)", "Delete SimpleName: read(150)", "Delete SimpleName: String(151)", "Delete SimpleType: String(152)", "Delete SimpleName: clazz(153)", "Delete SingleVariableDeclaration(154)", "Delete SimpleName: String(155)", "Delete SimpleType: String(156)", "Delete SimpleName: name(157)", "Delete SingleVariableDeclaration(158)", "Delete SimpleName: Permissions(159)", "Delete SimpleType: Permissions(160)", "Delete SimpleName: permissions(161)", "Delete SimpleName: sandbox(162)", "Delete SimpleName: get(163)", "Delete SimpleName: clazz(164)", "Delete MethodInvocation(165)", "Delete VariableDeclarationFragment(166)", "Delete VariableDeclarationStatement(167)", "Delete SimpleName: permissions(168)", "Delete NullLiteral(169)", "Delete InfixExpression: ==(170)", "Delete SimpleName: name(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete SimpleName: permissions(174)", "Delete SimpleName: read(175)", "Delete MethodInvocation(176)", "Delete SimpleName: get(177)", "Delete SimpleName: name(178)", "Delete MethodInvocation(179)", "Delete ReturnStatement(180)", "Delete Block(181)", "Delete IfStatement(182)", "Delete Block(183)", "Delete MethodDeclaration(184)", "Delete TextElement: Gets the write permission value for a given property of a class.(185)", "Delete TagElement(186)", "Delete SimpleName: clazz(187)", "Delete TextElement:  the class(188)", "Delete TagElement: @param(189)", "Delete SimpleName: name(190)", "Delete TextElement:  the property name(191)", "Delete TagElement: @param(192)", "Delete TextElement:  null if not allowed, the name of the property to use otherwise(193)", "Delete TagElement: @return(194)", "Delete Javadoc(195)", "Delete Modifier: public(196)", "Delete SimpleName: String(197)", "Delete SimpleType: String(198)", "Delete SimpleName: write(199)", "Delete SimpleName: Class(200)", "Delete SimpleType: Class(201)", "Delete WildcardType: ?(202)", "Delete ParameterizedType: Class<?>(203)", "Delete SimpleName: clazz(204)", "Delete SingleVariableDeclaration(205)", "Delete SimpleName: String(206)", "Delete SimpleType: String(207)", "Delete SimpleName: name(208)", "Delete SingleVariableDeclaration(209)", "Delete SimpleName: write(210)", "Delete SimpleName: clazz(211)", "Delete SimpleName: getName(212)", "Delete MethodInvocation(213)", "Delete SimpleName: name(214)", "Delete MethodInvocation(215)", "Delete ReturnStatement(216)", "Delete Block(217)", "Delete MethodDeclaration(218)", "Delete TextElement: Gets the write permission value for a given property of a class.(219)", "Delete TagElement(220)", "Delete SimpleName: clazz(221)", "Delete TextElement:  the class name(222)", "Delete TagElement: @param(223)", "Delete SimpleName: name(224)", "Delete TextElement:  the property name(225)", "Delete TagElement: @param(226)", "Delete TextElement:  null if not allowed, the name of the property to use otherwise(227)", "Delete TagElement: @return(228)", "Delete Javadoc(229)", "Delete Modifier: public(230)", "Delete SimpleName: String(231)", "Delete SimpleType: String(232)", "Delete SimpleName: write(233)", "Delete SimpleName: String(234)", "Delete SimpleType: String(235)", "Delete SimpleName: clazz(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: String(238)", "Delete SimpleType: String(239)", "Delete SimpleName: name(240)", "Delete SingleVariableDeclaration(241)", "Delete SimpleName: Permissions(242)", "Delete SimpleType: Permissions(243)", "Delete SimpleName: permissions(244)", "Delete SimpleName: sandbox(245)", "Delete SimpleName: get(246)", "Delete SimpleName: clazz(247)", "Delete MethodInvocation(248)", "Delete VariableDeclarationFragment(249)", "Delete VariableDeclarationStatement(250)", "Delete SimpleName: permissions(251)", "Delete NullLiteral(252)", "Delete InfixExpression: ==(253)", "Delete SimpleName: name(254)", "Delete ReturnStatement(255)", "Delete Block(256)", "Delete SimpleName: permissions(257)", "Delete SimpleName: write(258)", "Delete MethodInvocation(259)", "Delete SimpleName: get(260)", "Delete SimpleName: name(261)", "Delete MethodInvocation(262)", "Delete ReturnStatement(263)", "Delete Block(264)", "Delete IfStatement(265)", "Delete Block(266)", "Delete MethodDeclaration(267)", "Delete TextElement: Gets the execute permission value for a given method of a class.(268)", "Delete TagElement(269)", "Delete SimpleName: clazz(270)", "Delete TextElement:  the class(271)", "Delete TagElement: @param(272)", "Delete SimpleName: name(273)", "Delete TextElement:  the method name(274)", "Delete TagElement: @param(275)", "Delete TextElement:  null if not allowed, the name of the method to use otherwise(276)", "Delete TagElement: @return(277)", "Delete Javadoc(278)", "Delete Modifier: public(279)", "Delete SimpleName: String(280)", "Delete SimpleType: String(281)", "Delete SimpleName: execute(282)", "Delete SimpleName: Class(283)", "Delete SimpleType: Class(284)", "Delete WildcardType: ?(285)", "Delete ParameterizedType: Class<?>(286)", "Delete SimpleName: clazz(287)", "Delete SingleVariableDeclaration(288)", "Delete SimpleName: String(289)", "Delete SimpleType: String(290)", "Delete SimpleName: name(291)", "Delete SingleVariableDeclaration(292)", "Delete SimpleName: execute(293)", "Delete SimpleName: clazz(294)", "Delete SimpleName: getName(295)", "Delete MethodInvocation(296)", "Delete SimpleName: name(297)", "Delete MethodInvocation(298)", "Delete ReturnStatement(299)", "Delete Block(300)", "Delete MethodDeclaration(301)", "Delete TextElement: Gets the execute permission value for a given method of a class.(302)", "Delete TagElement(303)", "Delete SimpleName: clazz(304)", "Delete TextElement:  the class name(305)", "Delete TagElement: @param(306)", "Delete SimpleName: name(307)", "Delete TextElement:  the method name(308)", "Delete TagElement: @param(309)", "Delete TextElement:  null if not allowed, the name of the method to use otherwise(310)", "Delete TagElement: @return(311)", "Delete Javadoc(312)", "Delete Modifier: public(313)", "Delete SimpleName: String(314)", "Delete SimpleType: String(315)", "Delete SimpleName: execute(316)", "Delete SimpleName: String(317)", "Delete SimpleType: String(318)", "Delete SimpleName: clazz(319)", "Delete SingleVariableDeclaration(320)", "Delete SimpleName: String(321)", "Delete SimpleType: String(322)", "Delete SimpleName: name(323)", "Delete SingleVariableDeclaration(324)", "Delete SimpleName: Permissions(325)", "Delete SimpleType: Permissions(326)", "Delete SimpleName: permissions(327)", "Delete SimpleName: sandbox(328)", "Delete SimpleName: get(329)", "Delete SimpleName: clazz(330)", "Delete MethodInvocation(331)", "Delete VariableDeclarationFragment(332)", "Delete VariableDeclarationStatement(333)", "Delete SimpleName: permissions(334)", "Delete NullLiteral(335)", "Delete InfixExpression: ==(336)", "Delete SimpleName: name(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete SimpleName: permissions(340)", "Delete SimpleName: execute(341)", "Delete MethodInvocation(342)", "Delete SimpleName: get(343)", "Delete SimpleName: name(344)", "Delete MethodInvocation(345)", "Delete ReturnStatement(346)", "Delete Block(347)", "Delete IfStatement(348)", "Delete Block(349)", "Delete MethodDeclaration(350)", "Delete TextElement: A base set of names.(351)", "Delete TagElement(352)", "Delete Javadoc(353)", "Delete Modifier: public(354)", "Delete Modifier: abstract(355)", "Delete Modifier: static(356)", "Delete SimpleName: Names(357)", "Delete TextElement: Adds a name to this set.(358)", "Delete TagElement(359)", "Delete SimpleName: name(360)", "Delete TextElement:  the name to add(361)", "Delete TagElement: @param(362)", "Delete TextElement:   true if the name was really added, false if not(363)", "Delete TagElement: @return(364)", "Delete Javadoc(365)", "Delete Modifier: public(366)", "Delete Modifier: abstract(367)", "Delete PrimitiveType: boolean(368)", "Delete SimpleName: add(369)", "Delete SimpleName: String(370)", "Delete SimpleType: String(371)", "Delete SimpleName: name(372)", "Delete SingleVariableDeclaration(373)", "Delete MethodDeclaration(374)", "Delete TextElement: Adds an alias to a name to this set.(375)", "Delete TextElement: <p>This only has an effect on white lists.</p>(376)", "Delete TagElement(377)", "Delete SimpleName: name(378)", "Delete TextElement:  the name to alias(379)", "Delete TagElement: @param(380)", "Delete SimpleName: alias(381)", "Delete TextElement:  the alias(382)", "Delete TagElement: @param(383)", "Delete TextElement:   true if the alias was added, false if it was already present(384)", "Delete TagElement: @return(385)", "Delete Javadoc(386)", "Delete Modifier: public(387)", "Delete PrimitiveType: boolean(388)", "Delete SimpleName: alias(389)", "Delete SimpleName: String(390)", "Delete SimpleType: String(391)", "Delete SimpleName: name(392)", "Delete SingleVariableDeclaration(393)", "Delete SimpleName: String(394)", "Delete SimpleType: String(395)", "Delete SimpleName: alias(396)", "Delete SingleVariableDeclaration(397)", "Delete BooleanLiteral: false(398)", "Delete ReturnStatement(399)", "Delete Block(400)", "Delete MethodDeclaration(401)", "Delete TextElement: Whether a given name is allowed or not.(402)", "Delete TagElement(403)", "Delete SimpleName: name(404)", "Delete TextElement:  the method/property name to check(405)", "Delete TagElement: @param(406)", "Delete TextElement:  null if not allowed, the actual name to use otherwise(407)", "Delete TagElement: @return(408)", "Delete Javadoc(409)", "Delete Modifier: public(410)", "Delete SimpleName: String(411)", "Delete SimpleType: String(412)", "Delete SimpleName: get(413)", "Delete SimpleName: String(414)", "Delete SimpleType: String(415)", "Delete SimpleName: name(416)", "Delete SingleVariableDeclaration(417)", "Delete SimpleName: name(418)", "Delete ReturnStatement(419)", "Delete Block(420)", "Delete MethodDeclaration(421)", "Delete TypeDeclaration: class(422)", "Delete TextElement: The pass-thru name set.(423)", "Delete TagElement(424)", "Delete Javadoc(425)", "Delete Modifier: private(426)", "Delete Modifier: static(427)", "Delete Modifier: final(428)", "Delete SimpleName: Names(429)", "Delete SimpleType: Names(430)", "Delete SimpleName: WHITE_NAMES(431)", "Delete SimpleName: Names(432)", "Delete SimpleType: Names(433)", "Delete SimpleName: Override(434)", "Delete MarkerAnnotation(435)", "Delete Modifier: public(436)", "Delete PrimitiveType: boolean(437)", "Delete SimpleName: add(438)", "Delete SimpleName: String(439)", "Delete SimpleType: String(440)", "Delete SimpleName: name(441)", "Delete SingleVariableDeclaration(442)", "Delete BooleanLiteral: false(443)", "Delete ReturnStatement(444)", "Delete Block(445)", "Delete MethodDeclaration(446)", "Delete AnonymousClassDeclaration(447)", "Delete ClassInstanceCreation(448)", "Delete VariableDeclarationFragment(449)", "Delete FieldDeclaration(450)", "Delete TextElement: A white set of names.(451)", "Delete TagElement(452)", "Delete Javadoc(453)", "Delete Modifier: public(454)", "Delete Modifier: static(455)", "Delete Modifier: final(456)", "Delete SimpleName: WhiteSet(457)", "Delete SimpleName: Names(458)", "Delete SimpleType: Names(459)", "Delete TextElement: The map of controlled names and aliases. (460)", "Delete TagElement(461)", "Delete Javadoc(462)", "Delete Modifier: protected(463)", "Delete SimpleName: Map(464)", "Delete SimpleType: Map(465)", "Delete SimpleName: String(466)", "Delete SimpleType: String(467)", "Delete SimpleName: String(468)", "Delete SimpleType: String(469)", "Delete ParameterizedType: Map<String,String>(470)", "Delete SimpleName: names(471)", "Delete NullLiteral(472)", "Delete VariableDeclarationFragment(473)", "Delete FieldDeclaration(474)", "Delete SimpleName: Override(475)", "Delete MarkerAnnotation(476)", "Delete Modifier: public(477)", "Delete PrimitiveType: boolean(478)", "Delete SimpleName: add(479)", "Delete SimpleName: String(480)", "Delete SimpleType: String(481)", "Delete SimpleName: name(482)", "Delete SingleVariableDeclaration(483)", "Delete SimpleName: names(484)", "Delete NullLiteral(485)", "Delete InfixExpression: ==(486)", "Delete SimpleName: names(487)", "Delete SimpleName: HashMap(488)", "Delete SimpleType: HashMap(489)", "Delete SimpleName: String(490)", "Delete SimpleType: String(491)", "Delete SimpleName: String(492)", "Delete SimpleType: String(493)", "Delete ParameterizedType: HashMap<String,String>(494)", "Delete ClassInstanceCreation(495)", "Delete Assignment: =(496)", "Delete ExpressionStatement(497)", "Delete Block(498)", "Delete IfStatement(499)", "Delete SimpleName: names(500)", "Delete SimpleName: put(501)", "Delete SimpleName: name(502)", "Delete SimpleName: name(503)", "Delete MethodInvocation(504)", "Delete NullLiteral(505)", "Delete InfixExpression: ==(506)", "Delete ReturnStatement(507)", "Delete Block(508)", "Delete MethodDeclaration(509)", "Delete SimpleName: Override(510)", "Delete MarkerAnnotation(511)", "Delete Modifier: public(512)", "Delete PrimitiveType: boolean(513)", "Delete SimpleName: alias(514)", "Delete SimpleName: String(515)", "Delete SimpleType: String(516)", "Delete SimpleName: name(517)", "Delete SingleVariableDeclaration(518)", "Delete SimpleName: String(519)", "Delete SimpleType: String(520)", "Delete SimpleName: alias(521)", "Delete SingleVariableDeclaration(522)", "Delete SimpleName: names(523)", "Delete NullLiteral(524)", "Delete InfixExpression: ==(525)", "Delete SimpleName: names(526)", "Delete SimpleName: HashMap(527)", "Delete SimpleType: HashMap(528)", "Delete SimpleName: String(529)", "Delete SimpleType: String(530)", "Delete SimpleName: String(531)", "Delete SimpleType: String(532)", "Delete ParameterizedType: HashMap<String,String>(533)", "Delete ClassInstanceCreation(534)", "Delete Assignment: =(535)", "Delete ExpressionStatement(536)", "Delete Block(537)", "Delete IfStatement(538)", "Delete SimpleName: names(539)", "Delete SimpleName: put(540)", "Delete SimpleName: alias(541)", "Delete SimpleName: name(542)", "Delete MethodInvocation(543)", "Delete NullLiteral(544)", "Delete InfixExpression: ==(545)", "Delete ReturnStatement(546)", "Delete Block(547)", "Delete MethodDeclaration(548)", "Delete SimpleName: Override(549)", "Delete MarkerAnnotation(550)", "Delete Modifier: public(551)", "Delete SimpleName: String(552)", "Delete SimpleType: String(553)", "Delete SimpleName: get(554)", "Delete SimpleName: String(555)", "Delete SimpleType: String(556)", "Delete SimpleName: name(557)", "Delete SingleVariableDeclaration(558)", "Delete SimpleName: names(559)", "Delete NullLiteral(560)", "Delete InfixExpression: ==(561)", "Delete SimpleName: name(562)", "Delete ReturnStatement(563)", "Delete Block(564)", "Delete SimpleName: names(565)", "Delete SimpleName: get(566)", "Delete SimpleName: name(567)", "Delete MethodInvocation(568)", "Delete ReturnStatement(569)", "Delete Block(570)", "Delete IfStatement(571)", "Delete Block(572)", "Delete MethodDeclaration(573)", "Delete TypeDeclaration: class(574)", "Delete TextElement: A black set of names.(575)", "Delete TagElement(576)", "Delete Javadoc(577)", "Delete Modifier: public(578)", "Delete Modifier: static(579)", "Delete Modifier: final(580)", "Delete SimpleName: BlackSet(581)", "Delete SimpleName: Names(582)", "Delete SimpleType: Names(583)", "Delete TextElement: The set of controlled names. (584)", "Delete TagElement(585)", "Delete Javadoc(586)", "Delete Modifier: protected(587)", "Delete SimpleName: Set(588)", "Delete SimpleType: Set(589)", "Delete SimpleName: String(590)", "Delete SimpleType: String(591)", "Delete ParameterizedType: Set<String>(592)", "Delete SimpleName: names(593)", "Delete NullLiteral(594)", "Delete VariableDeclarationFragment(595)", "Delete FieldDeclaration(596)", "Delete SimpleName: Override(597)", "Delete MarkerAnnotation(598)", "Delete Modifier: public(599)", "Delete PrimitiveType: boolean(600)", "Delete SimpleName: add(601)", "Delete SimpleName: String(602)", "Delete SimpleType: String(603)", "Delete SimpleName: name(604)", "Delete SingleVariableDeclaration(605)", "Delete SimpleName: names(606)", "Delete NullLiteral(607)", "Delete InfixExpression: ==(608)", "Delete SimpleName: names(609)", "Delete SimpleName: HashSet(610)", "Delete SimpleType: HashSet(611)", "Delete SimpleName: String(612)", "Delete SimpleType: String(613)", "Delete ParameterizedType: HashSet<String>(614)", "Delete ClassInstanceCreation(615)", "Delete Assignment: =(616)", "Delete ExpressionStatement(617)", "Delete Block(618)", "Delete IfStatement(619)", "Delete SimpleName: names(620)", "Delete SimpleName: add(621)", "Delete SimpleName: name(622)", "Delete MethodInvocation(623)", "Delete ReturnStatement(624)", "Delete Block(625)", "Delete MethodDeclaration(626)", "Delete SimpleName: Override(627)", "Delete MarkerAnnotation(628)", "Delete Modifier: public(629)", "Delete SimpleName: String(630)", "Delete SimpleType: String(631)", "Delete SimpleName: get(632)", "Delete SimpleName: String(633)", "Delete SimpleType: String(634)", "Delete SimpleName: name(635)", "Delete SingleVariableDeclaration(636)", "Delete SimpleName: names(637)", "Delete NullLiteral(638)", "Delete InfixExpression: !=(639)", "Delete SimpleName: names(640)", "Delete SimpleName: contains(641)", "Delete SimpleName: name(642)", "Delete MethodInvocation(643)", "Delete PrefixExpression: !(644)", "Delete InfixExpression: &&(645)", "Delete SimpleName: name(646)", "Delete NullLiteral(647)", "Delete ConditionalExpression(648)", "Delete ReturnStatement(649)", "Delete Block(650)", "Delete MethodDeclaration(651)", "Delete TypeDeclaration: class(652)", "Delete TextElement: Contains the white or black lists for properties and methods for a given class.(653)", "Delete TagElement(654)", "Delete Javadoc(655)", "Delete Modifier: public(656)", "Delete Modifier: static(657)", "Delete Modifier: final(658)", "Delete SimpleName: Permissions(659)", "Delete TextElement: The controlled readable properties. (660)", "Delete TagElement(661)", "Delete Javadoc(662)", "Delete Modifier: private(663)", "Delete Modifier: final(664)", "Delete SimpleName: Names(665)", "Delete SimpleType: Names(666)", "Delete SimpleName: read(667)", "Delete VariableDeclarationFragment(668)", "Delete FieldDeclaration(669)", "Delete TextElement: The controlled  writeable properties. (670)", "Delete TagElement(671)", "Delete Javadoc(672)", "Delete Modifier: private(673)", "Delete Modifier: final(674)", "Delete SimpleName: Names(675)", "Delete SimpleType: Names(676)", "Delete SimpleName: write(677)", "Delete VariableDeclarationFragment(678)", "Delete FieldDeclaration(679)", "Delete TextElement: The controlled methods. (680)", "Delete TagElement(681)", "Delete Javadoc(682)", "Delete Modifier: private(683)", "Delete Modifier: final(684)", "Delete SimpleName: Names(685)", "Delete SimpleType: Names(686)", "Delete SimpleName: execute(687)", "Delete VariableDeclarationFragment(688)", "Delete FieldDeclaration(689)", "Delete TextElement: Creates a new permissions instance.(690)", "Delete TagElement(691)", "Delete SimpleName: readFlag(692)", "Delete TextElement:  whether the read property list is white or black(693)", "Delete TagElement: @param(694)", "Delete SimpleName: writeFlag(695)", "Delete TextElement:  whether the write property list is white or black(696)", "Delete TagElement: @param(697)", "Delete SimpleName: executeFlag(698)", "Delete TextElement:  whether the method list is white of black(699)", "Delete TagElement: @param(700)", "Delete Javadoc(701)", "Delete SimpleName: Permissions(702)", "Delete PrimitiveType: boolean(703)", "Delete SimpleName: readFlag(704)", "Delete SingleVariableDeclaration(705)", "Delete PrimitiveType: boolean(706)", "Delete SimpleName: writeFlag(707)", "Delete SingleVariableDeclaration(708)", "Delete PrimitiveType: boolean(709)", "Delete SimpleName: executeFlag(710)", "Delete SingleVariableDeclaration(711)", "Delete SimpleName: readFlag(712)", "Delete SimpleName: WhiteSet(713)", "Delete SimpleType: WhiteSet(714)", "Delete ClassInstanceCreation(715)", "Delete SimpleName: BlackSet(716)", "Delete SimpleType: BlackSet(717)", "Delete ClassInstanceCreation(718)", "Delete ConditionalExpression(719)", "Delete SimpleName: writeFlag(720)", "Delete SimpleName: WhiteSet(721)", "Delete SimpleType: WhiteSet(722)", "Delete ClassInstanceCreation(723)", "Delete SimpleName: BlackSet(724)", "Delete SimpleType: BlackSet(725)", "Delete ClassInstanceCreation(726)", "Delete ConditionalExpression(727)", "Delete SimpleName: executeFlag(728)", "Delete SimpleName: WhiteSet(729)", "Delete SimpleType: WhiteSet(730)", "Delete ClassInstanceCreation(731)", "Delete SimpleName: BlackSet(732)", "Delete SimpleType: BlackSet(733)", "Delete ClassInstanceCreation(734)", "Delete ConditionalExpression(735)", "Delete ConstructorInvocation(736)", "Delete Block(737)", "Delete MethodDeclaration(738)", "Delete TextElement: Creates a new permissions instance.(739)", "Delete TagElement(740)", "Delete SimpleName: nread(741)", "Delete TextElement:  the read set(742)", "Delete TagElement: @param(743)", "Delete SimpleName: nwrite(744)", "Delete TextElement:  the write set(745)", "Delete TagElement: @param(746)", "Delete SimpleName: nexecute(747)", "Delete TextElement:  the method set (748)", "Delete TagElement: @param(749)", "Delete Javadoc(750)", "Delete SimpleName: Permissions(751)", "Delete SimpleName: Names(752)", "Delete SimpleType: Names(753)", "Delete SimpleName: nread(754)", "Delete SingleVariableDeclaration(755)", "Delete SimpleName: Names(756)", "Delete SimpleType: Names(757)", "Delete SimpleName: nwrite(758)", "Delete SingleVariableDeclaration(759)", "Delete SimpleName: Names(760)", "Delete SimpleType: Names(761)", "Delete SimpleName: nexecute(762)", "Delete SingleVariableDeclaration(763)", "Delete ThisExpression(764)", "Delete SimpleName: read(765)", "Delete FieldAccess(766)", "Delete SimpleName: nread(767)", "Delete NullLiteral(768)", "Delete InfixExpression: !=(769)", "Delete SimpleName: nread(770)", "Delete SimpleName: WHITE_NAMES(771)", "Delete ConditionalExpression(772)", "Delete Assignment: =(773)", "Delete ExpressionStatement(774)", "Delete ThisExpression(775)", "Delete SimpleName: write(776)", "Delete FieldAccess(777)", "Delete SimpleName: nwrite(778)", "Delete NullLiteral(779)", "Delete InfixExpression: !=(780)", "Delete SimpleName: nwrite(781)", "Delete SimpleName: WHITE_NAMES(782)", "Delete ConditionalExpression(783)", "Delete Assignment: =(784)", "Delete ExpressionStatement(785)", "Delete ThisExpression(786)", "Delete SimpleName: execute(787)", "Delete FieldAccess(788)", "Delete SimpleName: nexecute(789)", "Delete NullLiteral(790)", "Delete InfixExpression: !=(791)", "Delete SimpleName: nexecute(792)", "Delete SimpleName: WHITE_NAMES(793)", "Delete ConditionalExpression(794)", "Delete Assignment: =(795)", "Delete ExpressionStatement(796)", "Delete Block(797)", "Delete MethodDeclaration(798)", "Delete TextElement: Adds a list of readable property names to these permissions.(799)", "Delete TagElement(800)", "Delete SimpleName: pnames(801)", "Delete TextElement:  the property names(802)", "Delete TagElement: @param(803)", "Delete TextElement:  this instance of permissions(804)", "Delete TagElement: @return(805)", "Delete Javadoc(806)", "Delete Modifier: public(807)", "Delete SimpleName: Permissions(808)", "Delete SimpleType: Permissions(809)", "Delete SimpleName: read(810)", "Delete SimpleName: String(811)", "Delete SimpleType: String(812)", "Delete SimpleName: pnames(813)", "Delete SingleVariableDeclaration(814)", "Delete SimpleName: String(815)", "Delete SimpleType: String(816)", "Delete SimpleName: pname(817)", "Delete SingleVariableDeclaration(818)", "Delete SimpleName: pnames(819)", "Delete SimpleName: read(820)", "Delete SimpleName: add(821)", "Delete SimpleName: pname(822)", "Delete MethodInvocation(823)", "Delete ExpressionStatement(824)", "Delete Block(825)", "Delete EnhancedForStatement(826)", "Delete ThisExpression(827)", "Delete ReturnStatement(828)", "Delete Block(829)", "Delete MethodDeclaration(830)", "Delete TextElement: Adds a list of writeable property names to these permissions.(831)", "Delete TagElement(832)", "Delete SimpleName: pnames(833)", "Delete TextElement:  the property names(834)", "Delete TagElement: @param(835)", "Delete TextElement:  this instance of permissions(836)", "Delete TagElement: @return(837)", "Delete Javadoc(838)", "Delete Modifier: public(839)", "Delete SimpleName: Permissions(840)", "Delete SimpleType: Permissions(841)", "Delete SimpleName: write(842)", "Delete SimpleName: String(843)", "Delete SimpleType: String(844)", "Delete SimpleName: pnames(845)", "Delete SingleVariableDeclaration(846)", "Delete SimpleName: String(847)", "Delete SimpleType: String(848)", "Delete SimpleName: pname(849)", "Delete SingleVariableDeclaration(850)", "Delete SimpleName: pnames(851)", "Delete SimpleName: write(852)", "Delete SimpleName: add(853)", "Delete SimpleName: pname(854)", "Delete MethodInvocation(855)", "Delete ExpressionStatement(856)", "Delete Block(857)", "Delete EnhancedForStatement(858)", "Delete ThisExpression(859)", "Delete ReturnStatement(860)", "Delete Block(861)", "Delete MethodDeclaration(862)", "Delete TextElement: Adds a list of executable methods names to these permissions.(863)", "Delete TextElement: <p>The constructor is denoted as the empty-string, all other methods by their names.</p>(864)", "Delete TagElement(865)", "Delete SimpleName: mnames(866)", "Delete TextElement:  the method names(867)", "Delete TagElement: @param(868)", "Delete TextElement:  this instance of permissions(869)", "Delete TagElement: @return(870)", "Delete Javadoc(871)", "Delete Modifier: public(872)", "Delete SimpleName: Permissions(873)", "Delete SimpleType: Permissions(874)", "Delete SimpleName: execute(875)", "Delete SimpleName: String(876)", "Delete SimpleType: String(877)", "Delete SimpleName: mnames(878)", "Delete SingleVariableDeclaration(879)", "Delete SimpleName: String(880)", "Delete SimpleType: String(881)", "Delete SimpleName: mname(882)", "Delete SingleVariableDeclaration(883)", "Delete SimpleName: mnames(884)", "Delete SimpleName: execute(885)", "Delete SimpleName: add(886)", "Delete SimpleName: mname(887)", "Delete MethodInvocation(888)", "Delete ExpressionStatement(889)", "Delete Block(890)", "Delete EnhancedForStatement(891)", "Delete ThisExpression(892)", "Delete ReturnStatement(893)", "Delete Block(894)", "Delete MethodDeclaration(895)", "Delete TextElement: Gets the set of readable property names in these permissions.(896)", "Delete TagElement(897)", "Delete TextElement:  the set of property names(898)", "Delete TagElement: @return(899)", "Delete Javadoc(900)", "Delete Modifier: public(901)", "Delete SimpleName: Names(902)", "Delete SimpleType: Names(903)", "Delete SimpleName: read(904)", "Delete SimpleName: read(905)", "Delete ReturnStatement(906)", "Delete Block(907)", "Delete MethodDeclaration(908)", "Delete TextElement: Gets the set of writeable property names in these permissions.(909)", "Delete TagElement(910)", "Delete TextElement:  the set of property names(911)", "Delete TagElement: @return(912)", "Delete Javadoc(913)", "Delete Modifier: public(914)", "Delete SimpleName: Names(915)", "Delete SimpleType: Names(916)", "Delete SimpleName: write(917)", "Delete SimpleName: write(918)", "Delete ReturnStatement(919)", "Delete Block(920)", "Delete MethodDeclaration(921)", "Delete TextElement: Gets the set of method names in these permissions.(922)", "Delete TagElement(923)", "Delete TextElement:  the set of method names(924)", "Delete TagElement: @return(925)", "Delete Javadoc(926)", "Delete Modifier: public(927)", "Delete SimpleName: Names(928)", "Delete SimpleType: Names(929)", "Delete SimpleName: execute(930)", "Delete SimpleName: execute(931)", "Delete ReturnStatement(932)", "Delete Block(933)", "Delete MethodDeclaration(934)", "Delete TypeDeclaration: class(935)", "Delete TextElement: The pass-thru permissions.(936)", "Delete TagElement(937)", "Delete Javadoc(938)", "Delete Modifier: private(939)", "Delete Modifier: static(940)", "Delete Modifier: final(941)", "Delete SimpleName: Permissions(942)", "Delete SimpleType: Permissions(943)", "Delete SimpleName: ALL_WHITE(944)", "Delete SimpleName: Permissions(945)", "Delete SimpleType: Permissions(946)", "Delete SimpleName: WHITE_NAMES(947)", "Delete SimpleName: WHITE_NAMES(948)", "Delete SimpleName: WHITE_NAMES(949)", "Delete ClassInstanceCreation(950)", "Delete VariableDeclarationFragment(951)", "Delete FieldDeclaration(952)", "Delete TextElement: Creates the set of permissions for a given class.(953)", "Delete TagElement(954)", "Delete SimpleName: clazz(955)", "Delete TextElement:  the class for which these permissions apply(956)", "Delete TagElement: @param(957)", "Delete SimpleName: readFlag(958)", "Delete TextElement:  whether the readable property list is white - true - or black - false -(959)", "Delete TagElement: @param(960)", "Delete SimpleName: writeFlag(961)", "Delete TextElement:  whether the writeable property list is white - true - or black - false -(962)", "Delete TagElement: @param(963)", "Delete SimpleName: executeFlag(964)", "Delete TextElement:  whether the executable method list is white white - true - or black - false -(965)", "Delete TagElement: @param(966)", "Delete TextElement:  the set of permissions(967)", "Delete TagElement: @return(968)", "Delete Javadoc(969)", "Delete Modifier: public(970)", "Delete SimpleName: Permissions(971)", "Delete SimpleType: Permissions(972)", "Delete SimpleName: permissions(973)", "Delete SimpleName: String(974)", "Delete SimpleType: String(975)", "Delete SimpleName: clazz(976)", "Delete SingleVariableDeclaration(977)", "Delete PrimitiveType: boolean(978)", "Delete SimpleName: readFlag(979)", "Delete SingleVariableDeclaration(980)", "Delete PrimitiveType: boolean(981)", "Delete SimpleName: writeFlag(982)", "Delete SingleVariableDeclaration(983)", "Delete PrimitiveType: boolean(984)", "Delete SimpleName: executeFlag(985)", "Delete SingleVariableDeclaration(986)", "Delete SimpleName: Permissions(987)", "Delete SimpleType: Permissions(988)", "Delete SimpleName: box(989)", "Delete SimpleName: Permissions(990)", "Delete SimpleType: Permissions(991)", "Delete SimpleName: readFlag(992)", "Delete SimpleName: writeFlag(993)", "Delete SimpleName: executeFlag(994)", "Delete ClassInstanceCreation(995)", "Delete VariableDeclarationFragment(996)", "Delete VariableDeclarationStatement(997)", "Delete SimpleName: sandbox(998)", "Delete SimpleName: put(999)", "Delete SimpleName: clazz(1000)", "Delete SimpleName: box(1001)", "Delete MethodInvocation(1002)", "Delete ExpressionStatement(1003)", "Delete SimpleName: box(1004)", "Delete ReturnStatement(1005)", "Delete Block(1006)", "Delete MethodDeclaration(1007)", "Delete TextElement: Creates a new set of permissions based on white lists for methods and properties for a given class.(1008)", "Delete TagElement(1009)", "Delete SimpleName: clazz(1010)", "Delete TextElement:  the whitened class name(1011)", "Delete TagElement: @param(1012)", "Delete TextElement:  the permissions instance(1013)", "Delete TagElement: @return(1014)", "Delete Javadoc(1015)", "Delete Modifier: public(1016)", "Delete SimpleName: Permissions(1017)", "Delete SimpleType: Permissions(1018)", "Delete SimpleName: white(1019)", "Delete SimpleName: String(1020)", "Delete SimpleType: String(1021)", "Delete SimpleName: clazz(1022)", "Delete SingleVariableDeclaration(1023)", "Delete SimpleName: permissions(1024)", "Delete SimpleName: clazz(1025)", "Delete BooleanLiteral: true(1026)", "Delete BooleanLiteral: true(1027)", "Delete BooleanLiteral: true(1028)", "Delete MethodInvocation(1029)", "Delete ReturnStatement(1030)", "Delete Block(1031)", "Delete MethodDeclaration(1032)", "Delete TextElement: Creates a new set of permissions based on black lists for methods and properties for a given class.(1033)", "Delete TagElement(1034)", "Delete SimpleName: clazz(1035)", "Delete TextElement:  the blackened class name(1036)", "Delete TagElement: @param(1037)", "Delete TextElement:  the permissions instance(1038)", "Delete TagElement: @return(1039)", "Delete Javadoc(1040)", "Delete Modifier: public(1041)", "Delete SimpleName: Permissions(1042)", "Delete SimpleType: Permissions(1043)", "Delete SimpleName: black(1044)", "Delete SimpleName: String(1045)", "Delete SimpleType: String(1046)", "Delete SimpleName: clazz(1047)", "Delete SingleVariableDeclaration(1048)", "Delete SimpleName: permissions(1049)", "Delete SimpleName: clazz(1050)", "Delete BooleanLiteral: false(1051)", "Delete BooleanLiteral: false(1052)", "Delete BooleanLiteral: false(1053)", "Delete MethodInvocation(1054)", "Delete ReturnStatement(1055)", "Delete Block(1056)", "Delete MethodDeclaration(1057)", "Delete TextElement: Gets the set of permissions associated to a class.(1058)", "Delete TagElement(1059)", "Delete SimpleName: clazz(1060)", "Delete TextElement:  the class name(1061)", "Delete TagElement: @param(1062)", "Delete TextElement:  the defined permissions or an all-white permission instance if none were defined(1063)", "Delete TagElement: @return(1064)", "Delete Javadoc(1065)", "Delete Modifier: public(1066)", "Delete SimpleName: Permissions(1067)", "Delete SimpleType: Permissions(1068)", "Delete SimpleName: get(1069)", "Delete SimpleName: String(1070)", "Delete SimpleType: String(1071)", "Delete SimpleName: clazz(1072)", "Delete SingleVariableDeclaration(1073)", "Delete SimpleName: Permissions(1074)", "Delete SimpleType: Permissions(1075)", "Delete SimpleName: permissions(1076)", "Delete SimpleName: sandbox(1077)", "Delete SimpleName: get(1078)", "Delete SimpleName: clazz(1079)", "Delete MethodInvocation(1080)", "Delete VariableDeclarationFragment(1081)", "Delete VariableDeclarationStatement(1082)", "Delete SimpleName: permissions(1083)", "Delete NullLiteral(1084)", "Delete InfixExpression: ==(1085)", "Delete SimpleName: ALL_WHITE(1086)", "Delete ReturnStatement(1087)", "Delete Block(1088)", "Delete SimpleName: permissions(1089)", "Delete ReturnStatement(1090)", "Delete Block(1091)", "Delete IfStatement(1092)", "Delete Block(1093)", "Delete MethodDeclaration(1094)", "Delete TypeDeclaration: class(1095)"]}}, {"SandboxUberspectImpl_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlInfo", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.logging.Log"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: String", "DEL SimpleName: toString", "DEL MarkerAnnotation", "DEL NullLiteral", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: info", "DEL SimpleName: Override", "DEL SimpleName: actual", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ParameterizedType: Class<?>", "DEL SimpleName: obj", "DEL InstanceofExpression", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: theSandbox", "DEL SingleVariableDeclaration", "DEL SimpleName: sandbox", "DEL SimpleName: getClass", "DEL WildcardType: ?", "DEL SimpleType: JexlInfo", "DEL SimpleName: runtimeLogger", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL NullLiteral", "DEL SimpleName: className", "DEL TextElement: An uberspect that controls usage of properties, methods and contructors through a sandbox.", "DEL SimpleName: getMethod", "DEL SimpleType: Sandbox", "DEL SimpleName: runtimeLogger", "DEL ArrayType: Object[]", "DEL SimpleName: getName", "DEL SimpleName: getPropertySet", "DEL Block", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: String", "DEL MethodInvocation", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Block", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: identifier", "DEL SimpleName: obj", "DEL NullLiteral", "DEL SimpleName: ctorHandle", "DEL IfStatement", "DEL SimpleType: ClassLoader", "DEL MethodInvocation", "DEL TextElement:  the sandbox instance to use", "DEL Dimension", "DEL SimpleName: obj", "DEL SimpleName: JexlMethod", "DEL TagElement: @inheritDoc", "DEL SuperMethodInvocation", "DEL SimpleName: arg", "DEL PrimitiveType: void", "DEL MarkerAnnotation", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleType: JexlInfo", "DEL MethodDeclaration", "DEL ThrowStatement", "DEL SimpleName: sandbox", "DEL SimpleType: Object", "DEL SimpleType: String", "DEL SimpleName: Log", "DEL InfixExpression: &&", "DEL SimpleName: ctorHandle", "DEL Modifier: final", "DEL IfStatement", "DEL IfStatement", "DEL SimpleType: Class", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL SimpleName: actual", "DEL SimpleName: info", "DEL TagElement: @since", "DEL MethodDeclaration", "DEL SimpleName: Sandbox", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: setLoader", "DEL VariableDeclarationStatement", "DEL SimpleName: obj", "DEL SimpleName: JexlPropertySet", "DEL SimpleType: Class", "DEL SimpleName: identifier", "DEL Block", "DEL InfixExpression: !=", "DEL Block", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleType: Class", "DEL NullLiteral", "DEL SimpleName: className", "DEL SimpleName: obj", "DEL Modifier: public", "DEL Modifier: final", "DEL TextElement: The sandbox. ", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: sandbox", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: sandbox", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL TextElement:  2.1", "DEL SimpleName: arg", "DEL SimpleName: actual", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL SimpleName: actual", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL SimpleName: ctorHandle", "DEL SimpleName: className", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: info", "DEL ThisExpression", "DEL SimpleName: theSandbox", "DEL SimpleName: ctorHandle", "DEL SimpleName: execute", "DEL MethodInvocation", "DEL SimpleName: getConstructorMethod", "DEL WildcardType: ?", "DEL TagElement: @inheritDoc", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL TagElement: @param", "DEL ReturnStatement", "DEL SimpleName: args", "DEL SimpleName: cloader", "DEL Block", "DEL Modifier: public", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: theSandbox", "DEL SimpleName: ctorHandle", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: identifier", "DEL SimpleName: identifier", "DEL NullLiteral", "DEL Block", "DEL SimpleName: runtimeLogger", "DEL SimpleType: JexlMethod", "DEL SimpleName: getClass", "DEL SimpleName: getPropertyGet", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: SandboxUberspectImpl", "DEL SimpleName: Override", "DEL SimpleName: JexlInfo", "DEL SimpleName: method", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: JexlMethod", "DEL SimpleName: getName", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: args", "DEL SimpleName: JexlInfo", "DEL Block", "DEL SimpleType: JexlPropertySet", "DEL SimpleType: JexlInfo", "DEL SimpleName: obj", "DEL ReturnStatement", "DEL CastExpression", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: JexlPropertyGet", "DEL SimpleName: Object", "DEL SimpleType: UberspectImpl", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL TagElement", "DEL StringLiteral: \"\"", "DEL SimpleName: identifier", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: getName", "DEL SimpleName: Class", "DEL SimpleType: Sandbox", "DEL SimpleName: Sandbox", "DEL TagElement: @inheritDoc", "DEL SimpleName: NullPointerException", "DEL SimpleType: Object", "DEL SimpleName: obj", "DEL VariableDeclarationStatement", "DEL SimpleName: obj", "DEL SimpleName: setLoader", "DEL SimpleName: obj", "DEL IfStatement", "DEL SimpleName: toString", "DEL SimpleName: Object", "DEL SuperMethodInvocation", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: read", "DEL InfixExpression: !=", "DEL MarkerAnnotation", "DEL NullLiteral", "DEL SimpleType: Log", "DEL SimpleName: getPropertyGet", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleType: NullPointerException", "DEL SimpleName: getClass", "DEL Javadoc", "DEL ArrayType: Object[]", "DEL SimpleName: info", "DEL SimpleName: info", "DEL SimpleName: Class", "DEL MarkerAnnotation", "DEL SimpleName: UberspectImpl", "DEL Modifier: final", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleType: JexlMethod", "DEL TagElement", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: method", "DEL ParameterizedType: Class<?>", "DEL MethodDeclaration", "DEL TagElement: @inheritDoc", "DEL IfStatement", "DEL SuperMethodInvocation", "DEL SimpleName: Class", "DEL Assignment: =", "DEL SimpleType: JexlPropertyGet", "DEL SingleVariableDeclaration", "DEL SimpleName: args", "DEL Block", "DEL FieldAccess", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL Modifier: protected", "DEL SimpleName: clazz", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: ClassLoader", "DEL Dimension", "DEL SimpleName: JexlInfo", "DEL TagElement", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: write", "DEL Block", "DEL SimpleName: toString", "DEL SimpleName: actual", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: getConstructorMethod", "DEL SimpleName: clazz", "DEL StringLiteral: \"sandbox can not be null\"", "DEL Block", "DEL SimpleName: actual", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: info", "DEL Modifier: public", "DEL SimpleName: Override", "DEL Assignment: =", "DEL SimpleName: getMethodExecutor", "DEL SimpleName: getName", "DEL SimpleType: Object", "DEL SimpleName: sandbox", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL InfixExpression: !=", "DEL SimpleName: Override", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleName: className", "DEL SimpleName: method", "DEL SimpleName: className", "DEL Block", "DEL SimpleName: String", "DEL SimpleType: String", "DEL NullLiteral", "DEL SimpleName: actual", "DEL SimpleName: String", "DEL Javadoc", "DEL WildcardType: ?", "DEL SimpleName: String", "DEL TextElement: A constructor for Sandbox uberspect.", "DEL InfixExpression: !=", "DEL SimpleName: execute", "DEL NullLiteral", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: theSandbox", "DEL TagElement", "DEL Assignment: =", "DEL NullLiteral", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: identifier", "DEL SimpleName: info", "DEL TextElement:  the logger to use or null to use default", "DEL SimpleName: obj", "DEL SimpleType: JexlInfo", "DEL SimpleName: JexlInfo", "DEL SimpleName: base", "DEL InfixExpression: &&", "DEL SimpleName: cloader", "DEL TagElement", "DEL SimpleName: sandbox", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL SimpleName: getPropertySet", "DEL TagElement", "DEL Javadoc", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SuperConstructorInvocation", "DEL ExpressionStatement", "DEL SimpleName: SandboxUberspectImpl", "DEL SingleVariableDeclaration", "DEL SimpleName: actual"]}]}}, {"SandboxUberspectImpl_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.JexlInfo(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.logging.Log(4)", "Delete ImportDeclaration(5)", "Delete TextElement: An uberspect that controls usage of properties, methods and contructors through a sandbox.(6)", "Delete TagElement(7)", "Delete TextElement:  2.1(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: SandboxUberspectImpl(12)", "Delete SimpleName: UberspectImpl(13)", "Delete SimpleType: UberspectImpl(14)", "Delete TextElement: The sandbox. (15)", "Delete TagElement(16)", "Delete Javadoc(17)", "Delete Modifier: protected(18)", "Delete Modifier: final(19)", "Delete SimpleName: Sandbox(20)", "Delete SimpleType: Sandbox(21)", "Delete SimpleName: sandbox(22)", "Delete VariableDeclarationFragment(23)", "Delete FieldDeclaration(24)", "Delete TextElement: A constructor for Sandbox uberspect.(25)", "Delete TagElement(26)", "Delete SimpleName: runtimeLogger(27)", "Delete TextElement:  the logger to use or null to use default(28)", "Delete TagElement: @param(29)", "Delete SimpleName: theSandbox(30)", "Delete TextElement:  the sandbox instance to use(31)", "Delete TagElement: @param(32)", "Delete Javadoc(33)", "Delete Modifier: public(34)", "Delete SimpleName: SandboxUberspectImpl(35)", "Delete SimpleName: Log(36)", "Delete SimpleType: Log(37)", "Delete SimpleName: runtimeLogger(38)", "Delete SingleVariableDeclaration(39)", "Delete SimpleName: Sandbox(40)", "Delete SimpleType: Sandbox(41)", "Delete SimpleName: theSandbox(42)", "Delete SingleVariableDeclaration(43)", "Delete SimpleName: runtimeLogger(44)", "Delete SuperConstructorInvocation(45)", "Delete SimpleName: theSandbox(46)", "Delete NullLiteral(47)", "Delete InfixExpression: ==(48)", "Delete SimpleName: NullPointerException(49)", "Delete SimpleType: NullPointerException(50)", "Delete StringLiteral: \"sandbox can not be null\"(51)", "Delete ClassInstanceCreation(52)", "Delete ThrowStatement(53)", "Delete Block(54)", "Delete IfStatement(55)", "Delete ThisExpression(56)", "Delete SimpleName: sandbox(57)", "Delete FieldAccess(58)", "Delete SimpleName: theSandbox(59)", "Delete Assignment: =(60)", "Delete ExpressionStatement(61)", "Delete Block(62)", "Delete MethodDeclaration(63)", "Delete TagElement: @inheritDoc(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete SimpleName: Override(67)", "Delete MarkerAnnotation(68)", "Delete Modifier: public(69)", "Delete PrimitiveType: void(70)", "Delete SimpleName: setLoader(71)", "Delete SimpleName: ClassLoader(72)", "Delete SimpleType: ClassLoader(73)", "Delete SimpleName: cloader(74)", "Delete SingleVariableDeclaration(75)", "Delete SimpleName: base(76)", "Delete MethodInvocation(77)", "Delete SimpleName: setLoader(78)", "Delete SimpleName: cloader(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete Block(82)", "Delete MethodDeclaration(83)", "Delete TagElement: @inheritDoc(84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete SimpleName: Override(87)", "Delete MarkerAnnotation(88)", "Delete Modifier: public(89)", "Delete SimpleName: JexlMethod(90)", "Delete SimpleType: JexlMethod(91)", "Delete SimpleName: getConstructorMethod(92)", "Delete SimpleName: Object(93)", "Delete SimpleType: Object(94)", "Delete SimpleName: ctorHandle(95)", "Delete SingleVariableDeclaration(96)", "Delete SimpleName: Object(97)", "Delete SimpleType: Object(98)", "Delete Dimension(99)", "Delete ArrayType: Object[](100)", "Delete SimpleName: args(101)", "Delete SingleVariableDeclaration(102)", "Delete SimpleName: JexlInfo(103)", "Delete SimpleType: JexlInfo(104)", "Delete SimpleName: info(105)", "Delete SingleVariableDeclaration(106)", "Delete Modifier: final(107)", "Delete SimpleName: String(108)", "Delete SimpleType: String(109)", "Delete SimpleName: className(110)", "Delete VariableDeclarationFragment(111)", "Delete VariableDeclarationStatement(112)", "Delete SimpleName: ctorHandle(113)", "Delete SimpleName: Class(114)", "Delete SimpleType: Class(115)", "Delete WildcardType: ?(116)", "Delete ParameterizedType: Class<?>(117)", "Delete InstanceofExpression(118)", "Delete SimpleName: Class(119)", "Delete SimpleType: Class(120)", "Delete WildcardType: ?(121)", "Delete ParameterizedType: Class<?>(122)", "Delete SimpleName: clazz(123)", "Delete SimpleName: Class(124)", "Delete SimpleType: Class(125)", "Delete WildcardType: ?(126)", "Delete ParameterizedType: Class<?>(127)", "Delete SimpleName: ctorHandle(128)", "Delete CastExpression(129)", "Delete VariableDeclarationFragment(130)", "Delete VariableDeclarationStatement(131)", "Delete SimpleName: className(132)", "Delete SimpleName: clazz(133)", "Delete SimpleName: getName(134)", "Delete MethodInvocation(135)", "Delete Assignment: =(136)", "Delete ExpressionStatement(137)", "Delete Block(138)", "Delete SimpleName: ctorHandle(139)", "Delete NullLiteral(140)", "Delete InfixExpression: !=(141)", "Delete SimpleName: className(142)", "Delete SimpleName: ctorHandle(143)", "Delete SimpleName: toString(144)", "Delete MethodInvocation(145)", "Delete Assignment: =(146)", "Delete ExpressionStatement(147)", "Delete Block(148)", "Delete NullLiteral(149)", "Delete ReturnStatement(150)", "Delete Block(151)", "Delete IfStatement(152)", "Delete IfStatement(153)", "Delete SimpleName: sandbox(154)", "Delete SimpleName: execute(155)", "Delete SimpleName: className(156)", "Delete StringLiteral: \"\"(157)", "Delete MethodInvocation(158)", "Delete NullLiteral(159)", "Delete InfixExpression: !=(160)", "Delete SimpleName: getConstructorMethod(161)", "Delete SimpleName: className(162)", "Delete SimpleName: args(163)", "Delete SimpleName: info(164)", "Delete SuperMethodInvocation(165)", "Delete ReturnStatement(166)", "Delete Block(167)", "Delete IfStatement(168)", "Delete NullLiteral(169)", "Delete ReturnStatement(170)", "Delete Block(171)", "Delete MethodDeclaration(172)", "Delete TagElement: @inheritDoc(173)", "Delete TagElement(174)", "Delete Javadoc(175)", "Delete SimpleName: Override(176)", "Delete MarkerAnnotation(177)", "Delete Modifier: public(178)", "Delete SimpleName: JexlMethod(179)", "Delete SimpleType: JexlMethod(180)", "Delete SimpleName: getMethod(181)", "Delete SimpleName: Object(182)", "Delete SimpleType: Object(183)", "Delete SimpleName: obj(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: String(186)", "Delete SimpleType: String(187)", "Delete SimpleName: method(188)", "Delete SingleVariableDeclaration(189)", "Delete SimpleName: Object(190)", "Delete SimpleType: Object(191)", "Delete Dimension(192)", "Delete ArrayType: Object[](193)", "Delete SimpleName: args(194)", "Delete SingleVariableDeclaration(195)", "Delete SimpleName: JexlInfo(196)", "Delete SimpleType: JexlInfo(197)", "Delete SimpleName: info(198)", "Delete SingleVariableDeclaration(199)", "Delete SimpleName: obj(200)", "Delete NullLiteral(201)", "Delete InfixExpression: !=(202)", "Delete SimpleName: method(203)", "Delete NullLiteral(204)", "Delete InfixExpression: !=(205)", "Delete InfixExpression: &&(206)", "Delete SimpleName: String(207)", "Delete SimpleType: String(208)", "Delete SimpleName: actual(209)", "Delete SimpleName: sandbox(210)", "Delete SimpleName: execute(211)", "Delete SimpleName: obj(212)", "Delete SimpleName: getClass(213)", "Delete MethodInvocation(214)", "Delete SimpleName: getName(215)", "Delete MethodInvocation(216)", "Delete SimpleName: method(217)", "Delete MethodInvocation(218)", "Delete VariableDeclarationFragment(219)", "Delete VariableDeclarationStatement(220)", "Delete SimpleName: actual(221)", "Delete NullLiteral(222)", "Delete InfixExpression: !=(223)", "Delete SimpleName: getMethodExecutor(224)", "Delete SimpleName: obj(225)", "Delete SimpleName: actual(226)", "Delete SimpleName: args(227)", "Delete MethodInvocation(228)", "Delete ReturnStatement(229)", "Delete Block(230)", "Delete IfStatement(231)", "Delete Block(232)", "Delete IfStatement(233)", "Delete NullLiteral(234)", "Delete ReturnStatement(235)", "Delete Block(236)", "Delete MethodDeclaration(237)", "Delete TagElement: @inheritDoc(238)", "Delete TagElement(239)", "Delete Javadoc(240)", "Delete SimpleName: Override(241)", "Delete MarkerAnnotation(242)", "Delete Modifier: public(243)", "Delete SimpleName: JexlPropertyGet(244)", "Delete SimpleType: JexlPropertyGet(245)", "Delete SimpleName: getPropertyGet(246)", "Delete SimpleName: Object(247)", "Delete SimpleType: Object(248)", "Delete SimpleName: obj(249)", "Delete SingleVariableDeclaration(250)", "Delete SimpleName: Object(251)", "Delete SimpleType: Object(252)", "Delete SimpleName: identifier(253)", "Delete SingleVariableDeclaration(254)", "Delete SimpleName: JexlInfo(255)", "Delete SimpleType: JexlInfo(256)", "Delete SimpleName: info(257)", "Delete SingleVariableDeclaration(258)", "Delete SimpleName: obj(259)", "Delete NullLiteral(260)", "Delete InfixExpression: !=(261)", "Delete SimpleName: identifier(262)", "Delete NullLiteral(263)", "Delete InfixExpression: !=(264)", "Delete InfixExpression: &&(265)", "Delete SimpleName: String(266)", "Delete SimpleType: String(267)", "Delete SimpleName: actual(268)", "Delete SimpleName: sandbox(269)", "Delete SimpleName: read(270)", "Delete SimpleName: obj(271)", "Delete SimpleName: getClass(272)", "Delete MethodInvocation(273)", "Delete SimpleName: getName(274)", "Delete MethodInvocation(275)", "Delete SimpleName: identifier(276)", "Delete SimpleName: toString(277)", "Delete MethodInvocation(278)", "Delete MethodInvocation(279)", "Delete VariableDeclarationFragment(280)", "Delete VariableDeclarationStatement(281)", "Delete SimpleName: actual(282)", "Delete NullLiteral(283)", "Delete InfixExpression: !=(284)", "Delete SimpleName: getPropertyGet(285)", "Delete SimpleName: obj(286)", "Delete SimpleName: actual(287)", "Delete SimpleName: info(288)", "Delete SuperMethodInvocation(289)", "Delete ReturnStatement(290)", "Delete Block(291)", "Delete IfStatement(292)", "Delete Block(293)", "Delete IfStatement(294)", "Delete NullLiteral(295)", "Delete ReturnStatement(296)", "Delete Block(297)", "Delete MethodDeclaration(298)", "Delete TagElement: @inheritDoc(299)", "Delete TagElement(300)", "Delete Javadoc(301)", "Delete SimpleName: Override(302)", "Delete MarkerAnnotation(303)", "Delete Modifier: public(304)", "Delete SimpleName: JexlPropertySet(305)", "Delete SimpleType: JexlPropertySet(306)", "Delete SimpleName: getPropertySet(307)", "Delete Modifier: final(308)", "Delete SimpleName: Object(309)", "Delete SimpleType: Object(310)", "Delete SimpleName: obj(311)", "Delete SingleVariableDeclaration(312)", "Delete Modifier: final(313)", "Delete SimpleName: Object(314)", "Delete SimpleType: Object(315)", "Delete SimpleName: identifier(316)", "Delete SingleVariableDeclaration(317)", "Delete SimpleName: Object(318)", "Delete SimpleType: Object(319)", "Delete SimpleName: arg(320)", "Delete SingleVariableDeclaration(321)", "Delete SimpleName: JexlInfo(322)", "Delete SimpleType: JexlInfo(323)", "Delete SimpleName: info(324)", "Delete SingleVariableDeclaration(325)", "Delete SimpleName: obj(326)", "Delete NullLiteral(327)", "Delete InfixExpression: !=(328)", "Delete SimpleName: identifier(329)", "Delete NullLiteral(330)", "Delete InfixExpression: !=(331)", "Delete InfixExpression: &&(332)", "Delete SimpleName: String(333)", "Delete SimpleType: String(334)", "Delete SimpleName: actual(335)", "Delete SimpleName: sandbox(336)", "Delete SimpleName: write(337)", "Delete SimpleName: obj(338)", "Delete SimpleName: getClass(339)", "Delete MethodInvocation(340)", "Delete SimpleName: getName(341)", "Delete MethodInvocation(342)", "Delete SimpleName: identifier(343)", "Delete SimpleName: toString(344)", "Delete MethodInvocation(345)", "Delete MethodInvocation(346)", "Delete VariableDeclarationFragment(347)", "Delete VariableDeclarationStatement(348)", "Delete SimpleName: actual(349)", "Delete NullLiteral(350)", "Delete InfixExpression: !=(351)", "Delete SimpleName: getPropertySet(352)", "Delete SimpleName: obj(353)", "Delete SimpleName: actual(354)", "Delete SimpleName: arg(355)", "Delete SimpleName: info(356)", "Delete SuperMethodInvocation(357)", "Delete ReturnStatement(358)", "Delete Block(359)", "Delete IfStatement(360)", "Delete Block(361)", "Delete IfStatement(362)", "Delete NullLiteral(363)", "Delete ReturnStatement(364)", "Delete Block(365)", "Delete MethodDeclaration(366)", "Delete TypeDeclaration: class(367)"]}}, {"Uberspect_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.introspection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Constructor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlInfo", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleType: JexlMethod", "DEL SimpleName: Constructor", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL TextElement:  2.1", "DEL TagElement: @return", "DEL SimpleName: info", "DEL TextElement:  contextual information", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: loader", "DEL TagElement: @link", "DEL SimpleName: Object", "DEL SimpleName: arg", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement: Property setter.", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement:  a ", "DEL TagElement: @return", "DEL SimpleName: Iterator", "DEL TextElement:  constructor arguments", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL TagElement", "DEL TextElement:  a ", "DEL TagElement", "DEL TextElement: 'Federated' introspection/reflection interface to allow the introspection", "DEL TagElement", "DEL SimpleName: info", "DEL SimpleName: JexlInfo", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL TextElement:  contextual information", "DEL TagElement: @param", "DEL TextElement:  a ", "DEL TextElement: Returns a JexlMethod.", "DEL SimpleName: String", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlMethod", "DEL TextElement:  to get the iterator for", "DEL SimpleName: ctorHandle", "DEL SimpleName: Object", "DEL ArrayType: Object[]", "DEL SimpleName: Object", "DEL SimpleType: JexlPropertyGet", "DEL SimpleName: args", "DEL TextElement:  property name", "DEL SimpleName: JexlPropertySet", "DEL MethodDeclaration", "DEL SimpleName: Uberspect", "DEL TagElement: @since", "DEL SimpleName: JexlMethod", "DEL SimpleType: Constructor", "DEL SimpleName: obj", "DEL SimpleName: arg", "DEL SimpleName: obj", "DEL SimpleType: JexlInfo", "DEL TextElement:  the object to get the property from.", "DEL SimpleName: JexlInfo", "DEL SimpleName: method", "DEL TextElement:  an iterator over obj", "DEL ArrayType: Object[]", "DEL TextElement:  constructor arguments", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL TagElement: @return", "DEL TextElement: <p>returns JelPropertySet appropos for ${foo.bar = \"geir\"}</p>.", "DEL Javadoc", "DEL TextElement:  the object to get the property from", "DEL SimpleName: getPropertyGet", "DEL Dimension", "DEL TagElement: @param", "DEL SimpleName: ctorHandle", "DEL TypeDeclaration: interface", "DEL SimpleName: Constructor", "DEL SimpleName: Object", "DEL SimpleName: info", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: info", "DEL SimpleName: info", "DEL TextElement:  a class or class name", "DEL TagElement: @param", "DEL SimpleName: info", "DEL TagElement: @return", "DEL ParameterizedType: Constructor<?>", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL TextElement: Returns a class constructor.", "DEL ArrayType: Object[]", "DEL TextElement: Returns a class constructor wrapped in a JexlMethod.", "DEL SimpleName: JexlMethod", "DEL Javadoc", "DEL MethodDeclaration", "DEL TextElement: behavior in JEXL to be customized.", "DEL TagElement: @param", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: args", "DEL SimpleType: Object", "DEL SimpleName: info", "DEL TextElement:  property name", "DEL SimpleType: Object", "DEL TextElement:  value to set", "DEL TagElement: @param", "DEL TextElement:  contextual information", "DEL SimpleName: obj", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL TextElement:  the object", "DEL TagElement", "DEL TagElement: @param", "DEL TagElement: @link", "DEL SimpleType: JexlInfo", "DEL SimpleType: Object", "DEL SimpleName: info", "DEL SimpleName: identifier", "DEL SimpleName: args", "DEL TagElement: @param", "DEL TextElement:  a ", "DEL SimpleName: Object", "DEL Javadoc", "DEL TextElement:  a class or class name", "DEL SingleVariableDeclaration", "DEL SimpleName: ctorHandle", "DEL SimpleName: Object", "DEL PrimitiveType: void", "DEL TagElement", "DEL SimpleName: args", "DEL SimpleName: getConstructor", "DEL SingleVariableDeclaration", "DEL TextElement:  the method name", "DEL MethodDeclaration", "DEL SimpleName: setClassLoader", "DEL TagElement: @since", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL TextElement:  1.0", "DEL TextElement:  method arguments", "DEL SimpleName: JexlInfo", "DEL SimpleName: ctorHandle", "DEL SimpleName: method", "DEL SimpleType: JexlPropertySet", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: args", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL TagElement: @link", "DEL WildcardType: ?", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: ClassLoader", "DEL SimpleName: getMethod", "DEL TagElement: @return", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: info", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: getConstructorMethod", "DEL SimpleName: JexlPropertyGet", "DEL SimpleType: Iterator", "DEL SimpleName: loader", "DEL SimpleName: Constructor", "DEL Javadoc", "DEL SimpleType: JexlInfo", "DEL TagElement: @param", "DEL SimpleName: getPropertySet", "DEL SimpleType: Object", "DEL SimpleName: identifier", "DEL SimpleName: getIterator", "DEL SimpleName: JexlPropertyGet", "DEL TextElement:  contextual information", "DEL WildcardType: ?", "DEL SimpleType: JexlInfo", "DEL SimpleName: JexlInfo", "DEL SimpleName: JexlInfo", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL ParameterizedType: Iterator<?>", "DEL SimpleType: JexlInfo", "DEL SimpleName: Deprecated", "DEL TextElement: .", "DEL SingleVariableDeclaration", "DEL TextElement: Gets an iterator from an object.", "DEL TextElement:  the class loader", "DEL SimpleName: info", "DEL SimpleName: args", "DEL TextElement: a class name parameter.", "DEL SimpleType: Object", "DEL TextElement:  contextual information", "DEL SimpleName: JexlInfo", "DEL TextElement:  a ", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleName: identifier", "DEL Javadoc", "DEL SimpleType: JexlInfo", "DEL MarkerAnnotation", "DEL SimpleName: obj", "DEL SimpleType: ClassLoader", "DEL SimpleName: obj", "DEL TextElement:  contextual information", "DEL TextElement: <p>Returns JexlPropertyGet appropos for ${bar.woogie}.", "DEL TagElement: @return", "DEL TextElement: Sets the class loader to use when getting a constructor with", "DEL SimpleType: JexlMethod", "DEL SimpleName: info", "DEL SimpleName: JexlPropertySet", "DEL MethodDeclaration", "DEL SimpleName: info", "DEL TagElement", "DEL TextElement: Property getter.", "DEL SimpleName: identifier"]}]}}, {"Uberspect_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Constructor(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Iterator(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.JexlInfo(6)", "Delete ImportDeclaration(7)", "Delete TextElement: 'Federated' introspection/reflection interface to allow the introspection(8)", "Delete TextElement: behavior in JEXL to be customized.(9)", "Delete TagElement(10)", "Delete TextElement:  1.0(11)", "Delete TagElement: @since(12)", "Delete Javadoc(13)", "Delete Modifier: public(14)", "Delete SimpleName: Uberspect(15)", "Delete TextElement: Sets the class loader to use when getting a constructor with(16)", "Delete TextElement: a class name parameter.(17)", "Delete TagElement(18)", "Delete SimpleName: loader(19)", "Delete TextElement:  the class loader(20)", "Delete TagElement: @param(21)", "Delete Javadoc(22)", "Delete PrimitiveType: void(23)", "Delete SimpleName: setClassLoader(24)", "Delete SimpleName: ClassLoader(25)", "Delete SimpleType: ClassLoader(26)", "Delete SimpleName: loader(27)", "Delete SingleVariableDeclaration(28)", "Delete MethodDeclaration(29)", "Delete TextElement: Returns a class constructor.(30)", "Delete TagElement(31)", "Delete SimpleName: ctorHandle(32)", "Delete TextElement:  a class or class name(33)", "Delete TagElement: @param(34)", "Delete SimpleName: args(35)", "Delete TextElement:  constructor arguments(36)", "Delete TagElement: @param(37)", "Delete SimpleName: info(38)", "Delete TextElement:  contextual information(39)", "Delete TagElement: @param(40)", "Delete TextElement:  a (41)", "Delete SimpleName: Constructor(42)", "Delete TagElement: @link(43)", "Delete TagElement: @return(44)", "Delete Javadoc(45)", "Delete SimpleName: Deprecated(46)", "Delete MarkerAnnotation(47)", "Delete SimpleName: Constructor(48)", "Delete SimpleType: Constructor(49)", "Delete WildcardType: ?(50)", "Delete ParameterizedType: Constructor<?>(51)", "Delete SimpleName: getConstructor(52)", "Delete SimpleName: Object(53)", "Delete SimpleType: Object(54)", "Delete SimpleName: ctorHandle(55)", "Delete SingleVariableDeclaration(56)", "Delete SimpleName: Object(57)", "Delete SimpleType: Object(58)", "Delete Dimension(59)", "Delete ArrayType: Object[](60)", "Delete SimpleName: args(61)", "Delete SingleVariableDeclaration(62)", "Delete SimpleName: JexlInfo(63)", "Delete SimpleType: JexlInfo(64)", "Delete SimpleName: info(65)", "Delete SingleVariableDeclaration(66)", "Delete MethodDeclaration(67)", "Delete TextElement: Returns a class constructor wrapped in a JexlMethod.(68)", "Delete TagElement(69)", "Delete SimpleName: ctorHandle(70)", "Delete TextElement:  a class or class name(71)", "Delete TagElement: @param(72)", "Delete SimpleName: args(73)", "Delete TextElement:  constructor arguments(74)", "Delete TagElement: @param(75)", "Delete SimpleName: info(76)", "Delete TextElement:  contextual information(77)", "Delete TagElement: @param(78)", "Delete TextElement:  a (79)", "Delete SimpleName: Constructor(80)", "Delete TagElement: @link(81)", "Delete TagElement: @return(82)", "Delete TextElement:  2.1(83)", "Delete TagElement: @since(84)", "Delete Javadoc(85)", "Delete SimpleName: JexlMethod(86)", "Delete SimpleType: JexlMethod(87)", "Delete SimpleName: getConstructorMethod(88)", "Delete SimpleName: Object(89)", "Delete SimpleType: Object(90)", "Delete SimpleName: ctorHandle(91)", "Delete SingleVariableDeclaration(92)", "Delete SimpleName: Object(93)", "Delete SimpleType: Object(94)", "Delete Dimension(95)", "Delete ArrayType: Object[](96)", "Delete SimpleName: args(97)", "Delete SingleVariableDeclaration(98)", "Delete SimpleName: JexlInfo(99)", "Delete SimpleType: JexlInfo(100)", "Delete SimpleName: info(101)", "Delete SingleVariableDeclaration(102)", "Delete MethodDeclaration(103)", "Delete TextElement: Returns a JexlMethod.(104)", "Delete TagElement(105)", "Delete SimpleName: obj(106)", "Delete TextElement:  the object(107)", "Delete TagElement: @param(108)", "Delete SimpleName: method(109)", "Delete TextElement:  the method name(110)", "Delete TagElement: @param(111)", "Delete SimpleName: args(112)", "Delete TextElement:  method arguments(113)", "Delete TagElement: @param(114)", "Delete SimpleName: info(115)", "Delete TextElement:  contextual information(116)", "Delete TagElement: @param(117)", "Delete TextElement:  a (118)", "Delete SimpleName: JexlMethod(119)", "Delete TagElement: @link(120)", "Delete TagElement: @return(121)", "Delete Javadoc(122)", "Delete SimpleName: JexlMethod(123)", "Delete SimpleType: JexlMethod(124)", "Delete SimpleName: getMethod(125)", "Delete SimpleName: Object(126)", "Delete SimpleType: Object(127)", "Delete SimpleName: obj(128)", "Delete SingleVariableDeclaration(129)", "Delete SimpleName: String(130)", "Delete SimpleType: String(131)", "Delete SimpleName: method(132)", "Delete SingleVariableDeclaration(133)", "Delete SimpleName: Object(134)", "Delete SimpleType: Object(135)", "Delete Dimension(136)", "Delete ArrayType: Object[](137)", "Delete SimpleName: args(138)", "Delete SingleVariableDeclaration(139)", "Delete SimpleName: JexlInfo(140)", "Delete SimpleType: JexlInfo(141)", "Delete SimpleName: info(142)", "Delete SingleVariableDeclaration(143)", "Delete MethodDeclaration(144)", "Delete TextElement: Property getter.(145)", "Delete TextElement: <p>Returns JexlPropertyGet appropos for ${bar.woogie}.(146)", "Delete TagElement(147)", "Delete SimpleName: obj(148)", "Delete TextElement:  the object to get the property from(149)", "Delete TagElement: @param(150)", "Delete SimpleName: identifier(151)", "Delete TextElement:  property name(152)", "Delete TagElement: @param(153)", "Delete SimpleName: info(154)", "Delete TextElement:  contextual information(155)", "Delete TagElement: @param(156)", "Delete TextElement:  a (157)", "Delete SimpleName: JexlPropertyGet(158)", "Delete TagElement: @link(159)", "Delete TagElement: @return(160)", "Delete Javadoc(161)", "Delete SimpleName: JexlPropertyGet(162)", "Delete SimpleType: JexlPropertyGet(163)", "Delete SimpleName: getPropertyGet(164)", "Delete SimpleName: Object(165)", "Delete SimpleType: Object(166)", "Delete SimpleName: obj(167)", "Delete SingleVariableDeclaration(168)", "Delete SimpleName: Object(169)", "Delete SimpleType: Object(170)", "Delete SimpleName: identifier(171)", "Delete SingleVariableDeclaration(172)", "Delete SimpleName: JexlInfo(173)", "Delete SimpleType: JexlInfo(174)", "Delete SimpleName: info(175)", "Delete SingleVariableDeclaration(176)", "Delete MethodDeclaration(177)", "Delete TextElement: Property setter.(178)", "Delete TextElement: <p>returns JelPropertySet appropos for ${foo.bar = \"geir\"}</p>.(179)", "Delete TagElement(180)", "Delete SimpleName: obj(181)", "Delete TextElement:  the object to get the property from.(182)", "Delete TagElement: @param(183)", "Delete SimpleName: identifier(184)", "Delete TextElement:  property name(185)", "Delete TagElement: @param(186)", "Delete SimpleName: arg(187)", "Delete TextElement:  value to set(188)", "Delete TagElement: @param(189)", "Delete SimpleName: info(190)", "Delete TextElement:  contextual information(191)", "Delete TagElement: @param(192)", "Delete TextElement:  a (193)", "Delete SimpleName: JexlPropertySet(194)", "Delete TagElement: @link(195)", "Delete TextElement: .(196)", "Delete TagElement: @return(197)", "Delete Javadoc(198)", "Delete SimpleName: JexlPropertySet(199)", "Delete SimpleType: JexlPropertySet(200)", "Delete SimpleName: getPropertySet(201)", "Delete SimpleName: Object(202)", "Delete SimpleType: Object(203)", "Delete SimpleName: obj(204)", "Delete SingleVariableDeclaration(205)", "Delete SimpleName: Object(206)", "Delete SimpleType: Object(207)", "Delete SimpleName: identifier(208)", "Delete SingleVariableDeclaration(209)", "Delete SimpleName: Object(210)", "Delete SimpleType: Object(211)", "Delete SimpleName: arg(212)", "Delete SingleVariableDeclaration(213)", "Delete SimpleName: JexlInfo(214)", "Delete SimpleType: JexlInfo(215)", "Delete SimpleName: info(216)", "Delete SingleVariableDeclaration(217)", "Delete MethodDeclaration(218)", "Delete TextElement: Gets an iterator from an object.(219)", "Delete TagElement(220)", "Delete SimpleName: obj(221)", "Delete TextElement:  to get the iterator for(222)", "Delete TagElement: @param(223)", "Delete SimpleName: info(224)", "Delete TextElement:  contextual information(225)", "Delete TagElement: @param(226)", "Delete TextElement:  an iterator over obj(227)", "Delete TagElement: @return(228)", "Delete Javadoc(229)", "Delete SimpleName: Iterator(230)", "Delete SimpleType: Iterator(231)", "Delete WildcardType: ?(232)", "Delete ParameterizedType: Iterator<?>(233)", "Delete SimpleName: getIterator(234)", "Delete SimpleName: Object(235)", "Delete SimpleType: Object(236)", "Delete SimpleName: obj(237)", "Delete SingleVariableDeclaration(238)", "Delete SimpleName: JexlInfo(239)", "Delete SimpleType: JexlInfo(240)", "Delete SimpleName: info(241)", "Delete SingleVariableDeclaration(242)", "Delete MethodDeclaration(243)", "Delete TypeDeclaration: interface(244)"]}}, {"UberspectImpl_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.introspection", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.beans.IntrospectionException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.Introspector", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Constructor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Modifier"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.InvocationTargetException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Enumeration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlInfo", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.AbstractExecutor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.ArrayIterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.EnumerationIterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.logging.Log"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: Introspector", "DEL TextElement:  2.1", "DEL Modifier: public", "DEL TagElement: @return", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: JexlMethod", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL NullLiteral", "DEL TextElement:  2.1", "DEL TagElement: @inheritDoc", "DEL ThisExpression", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleType: Exception", "DEL InfixExpression: &&", "DEL TagElement: @throws", "DEL SimpleName: obj", "DEL SimpleName: Method", "DEL MethodDeclaration", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Class<?>", "DEL Assignment: =", "DEL SimpleName: Object", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SimpleName: Method", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL WildcardType: ?", "DEL Modifier: public", "DEL TextElement: Gets the value of a property from a container.", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TextElement: Creates a new duck container.", "DEL Modifier: public", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL TextElement:  debug info", "DEL SimpleType: Object", "DEL Modifier: private", "DEL IfStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL Modifier: final", "DEL SimpleName: Object", "DEL SimpleName: info", "DEL SimpleName: ctor", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: value", "DEL SimpleName: get", "DEL Modifier: final", "DEL SimpleName: theField", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: invoke", "DEL NullLiteral", "DEL NullLiteral", "DEL TagElement", "DEL Modifier: public", "DEL TextElement: A generic indexed property container, exposes get(key) and set(key, value) and solves method call dynamically", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL SimpleName: field", "DEL SimpleName: Object", "DEL SimpleName: sets", "DEL SimpleName: get", "DEL SimpleName: name", "DEL ReturnStatement", "DEL WildcardType: ?", "DEL SimpleName: obj", "DEL SimpleName: IndexedContainer", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL SimpleName: JexlPropertySet", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: method", "DEL SimpleName: rval", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleType: JexlPropertySet", "DEL SimpleName: theCtor", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL InstanceofExpression", "DEL ParameterizedType: Enumeration<Object>", "DEL ThrowStatement", "DEL ParameterizedType: EnumerationIterator<Object>", "DEL SimpleName: IntrospectionException", "DEL SimpleType: Object", "DEL IfStatement", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL SimpleName: Class", "DEL StringLiteral: \"property set error: \"", "DEL SimpleName: IndexedType", "DEL InstanceofExpression", "DEL SimpleName: key", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL SimpleName: Enumeration", "DEL SimpleName: isCacheable", "DEL NullLiteral", "DEL Modifier: public", "DEL SimpleName: xany", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Iterator<?>", "DEL Block", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL TextElement: The public field.", "DEL SimpleName: Constructor", "DEL SimpleName: String", "DEL SimpleName: rval", "DEL ArrayInitializer", "DEL ThisExpression", "DEL TagElement", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL SimpleName: IndexedContainer", "DEL SimpleName: object", "DEL SimpleName: ctor", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL SimpleName: getters", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: MethodKey", "DEL SimpleName: theType", "DEL Modifier: public", "DEL Block", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: info", "DEL QualifiedName: setters.length", "DEL SimpleName: theObject", "DEL Modifier: final", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL SimpleType: Iterable", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL ParameterizedType: Iterable<?>", "DEL SimpleName: identifier", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Dimension", "DEL TagElement", "DEL SimpleType: IllegalAccessException", "DEL VariableDeclarationStatement", "DEL WildcardType: ?", "DEL SimpleName: getClass", "DEL SimpleType: Object", "DEL SimpleType: Method", "DEL SimpleName: args", "DEL SimpleType: Object", "DEL SimpleName: tryInvoke", "DEL TryStatement", "DEL Javadoc", "DEL SimpleName: TRY_FAILED", "DEL Javadoc", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SimpleName: IntrospectionException", "DEL WildcardType: ?", "DEL TagElement", "DEL SimpleName: obj", "DEL SimpleName: rval", "DEL SimpleName: value", "DEL IfStatement", "DEL Assignment: =", "DEL Block", "DEL SimpleType: Object", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleName: type", "DEL Dimension", "DEL TextElement: Resets this Uberspect class loader.", "DEL CatchClause", "DEL SimpleName: Field", "DEL SimpleName: toString", "DEL SimpleName: method", "DEL MethodInvocation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Object", "DEL SimpleName: field", "DEL SimpleName: getters", "DEL WildcardType: ?", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: get", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  the array of setter methods", "DEL TextElement:  the container type", "DEL Block", "DEL SimpleName: Method", "DEL SimpleName: setters", "DEL SimpleName: Object", "DEL SimpleName: ConstructorMethod", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: A JexlPropertySet for public fields.", "DEL TagElement: @param", "DEL TextElement:  the property value (not null)", "DEL TagElement: @param", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleType: Object", "DEL FieldAccess", "DEL SimpleName: key", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: FieldPropertyGet", "DEL NullLiteral", "DEL SimpleType: IndexedType", "DEL InfixExpression: !=", "DEL InfixExpression: !=", "DEL TagElement: @since", "DEL SimpleName: getGetExecutor", "DEL SimpleName: jm", "DEL SimpleName: Deprecated", "DEL SimpleName: UberspectImpl", "DEL ReturnStatement", "DEL SimpleName: getMethodExecutor", "DEL SimpleName: runtimeLogger", "DEL SimpleName: Exception", "DEL SimpleType: Method", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: object", "DEL SimpleType: ArrayIterator", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleType: Map", "DEL Modifier: final", "DEL SimpleName: JexlInfo", "DEL SimpleName: String", "DEL SimpleName: Exception", "DEL Modifier: final", "DEL Assignment: =", "DEL Modifier: static", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleName: obj", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleType: JexlInfo", "DEL SimpleName: Object", "DEL SimpleName: getClass", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: cloader", "DEL SimpleName: getType", "DEL WildcardType: ?", "DEL VariableDeclarationFragment", "DEL SimpleName: isArray", "DEL ParameterizedType: Class<?>", "DEL CatchClause", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: clazz", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: getClassByName", "DEL VariableDeclarationStatement", "DEL Dimension", "DEL SimpleName: Class", "DEL SimpleName: isInvocationConvertible", "DEL Modifier: final", "DEL Block", "DEL SimpleName: c", "DEL Javadoc", "DEL SimpleType: JexlInfo", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL ClassInstanceCreation", "DEL SimpleType: Method", "DEL SimpleName: runtimeLogger", "DEL SimpleType: Object", "DEL TextElement: Creates a new UberspectImpl.", "DEL SimpleName: Object", "DEL SimpleName: Enumeration", "DEL MethodInvocation", "DEL SimpleName: getDeclaringClass", "DEL SimpleName: field", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL TextElement: The array of getter methods. ", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Dimension", "DEL TextElement: Sets the value of a property in a container.", "DEL NumberLiteral: 0", "DEL SimpleName: getClass", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL SimpleName: arg", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL TagElement: @inheritDoc", "DEL SimpleName: base", "DEL Block", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: value", "DEL WildcardType: ?", "DEL TextElement:  1.0", "DEL TextElement:  the property value", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL SimpleName: args", "DEL SimpleName: ctorHandle", "DEL TextElement:  2.1", "DEL SimpleName: Class", "DEL SimpleName: ctor", "DEL Block", "DEL SimpleName: theField", "DEL SimpleName: obj", "DEL SimpleName: cloader", "DEL SingleVariableDeclaration", "DEL SimpleName: getDeclaringClass", "DEL NullLiteral", "DEL TagElement", "DEL ArrayType: Object[]", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Block", "DEL Javadoc", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleType: MethodKey", "DEL SimpleName: key", "DEL SimpleType: Exception", "DEL TagElement: @inheritDoc", "DEL ArrayInitializer", "DEL TagElement: @since", "DEL ExpressionStatement", "DEL ArrayType: Method[]", "DEL SimpleName: FieldPropertySet", "DEL SimpleName: params", "DEL Javadoc", "DEL TextElement: Implementation of Uberspect to provide the default introspective", "DEL SimpleName: clazz", "DEL TextElement:  the property key (not null)", "DEL ParameterizedType: Iterator<Object>", "DEL MethodDeclaration", "DEL Block", "DEL FieldAccess", "DEL SimpleName: EnumerationIterator", "DEL TagElement: @param", "DEL SimpleName: isFinal", "DEL TextElement:  the constructor to wrap", "DEL Block", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL SimpleName: setLoader", "DEL SimpleType: Object", "DEL SimpleName: Introspector", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: Field", "DEL Modifier: static", "DEL SimpleName: it", "DEL NumberLiteral: 0", "DEL SimpleType: Exception", "DEL SimpleName: obj", "DEL SimpleName: object", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL SimpleName: set", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: FieldPropertySet", "DEL InstanceofExpression", "DEL NullLiteral", "DEL Block", "DEL InfixExpression: !=", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: obj", "DEL SimpleName: MethodKey", "DEL IfStatement", "DEL SimpleType: Constructor", "DEL SimpleName: getField", "DEL MethodInvocation", "DEL SimpleName: info", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: getDeclaringClass", "DEL ClassInstanceCreation", "DEL SimpleName: xill", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TextElement:  the property key", "DEL TextElement: A JexlPropertyGet for public fields.", "DEL VariableDeclarationFragment", "DEL SimpleName: clazz", "DEL TagElement: @inheritDoc", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: ctor", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL TagElement", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL IfStatement", "DEL Javadoc", "DEL SimpleType: Object", "DEL Javadoc", "DEL ParameterizedType: Map<?,?>", "DEL ReturnStatement", "DEL Block", "DEL ThisExpression", "DEL SimpleName: field", "DEL IfStatement", "DEL SimpleName: FieldPropertySet", "DEL TextElement: Note that this is not equivalent to the strict bean definition of indexed properties; the type of the key", "DEL TextElement: <p>This is the class to derive to customize introspection.</p>", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Class<?>", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL SimpleName: clazz", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: IndexedType", "DEL Block", "DEL TagElement", "DEL SimpleName: Object", "DEL IfStatement", "DEL ParenthesizedExpression", "DEL SimpleName: get", "DEL SimpleName: jm", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: Exception", "DEL Block", "DEL SimpleName: identifier", "DEL Assignment: =", "DEL SimpleName: clazz", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: field", "DEL SimpleName: Modifier", "DEL MethodInvocation", "DEL SimpleName: identifier", "DEL SimpleName: obj", "DEL SimpleName: Arrays", "DEL MethodDeclaration", "DEL TextElement: Creates a new indexed type.", "DEL TagElement", "DEL InstanceofExpression", "DEL TextElement: Returns a class field.", "DEL Block", "DEL SimpleType: Map", "DEL SimpleName: arg", "DEL Assignment: =", "DEL MethodInvocation", "DEL ThrowStatement", "DEL IfStatement", "DEL TextElement:  the container name", "DEL ReturnStatement", "DEL TextElement:  the instance owning the container", "DEL Block", "DEL ReturnStatement", "DEL CatchClause", "DEL SimpleName: InstantiationException", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL ArrayType: Object[]", "DEL SimpleName: clazz", "DEL SimpleType: Method", "DEL SimpleType: IntrospectionException", "DEL SimpleType: Object", "DEL ClassInstanceCreation", "DEL TagElement: @inheritDoc", "DEL SingleMemberAnnotation", "DEL WildcardType: ?", "DEL SimpleName: getters", "DEL ParameterizedType: Constructor<?>", "DEL FieldDeclaration", "DEL SimpleName: get", "DEL IfStatement", "DEL SimpleName: clazz", "DEL SimpleName: theObject", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL TextElement: The code attempts to find the list of methods getXXX() and setXXX().", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: tryInvoke", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL InfixExpression: &&", "DEL ThisExpression", "DEL Javadoc", "DEL SimpleName: TRY_FAILED", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SimpleName: getClass", "DEL TextElement:  if inner invocation fails", "DEL ParenthesizedExpression", "DEL Modifier: public", "DEL SimpleName: field", "DEL SimpleName: obj", "DEL StringLiteral: \"property get error: \"", "DEL SimpleName: obj", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlInfo", "DEL WildcardType: ?", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: arg", "DEL SimpleName: invokeGet", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleName: name", "DEL NullLiteral", "DEL SimpleName: getIterator", "DEL CastExpression", "DEL SimpleName: object", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: obj", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL SimpleName: isCacheable", "DEL TagElement: @inheritDoc", "DEL NumberLiteral: 1", "DEL FieldDeclaration", "DEL SimpleName: it", "DEL SimpleName: Object", "DEL SimpleType: Exception", "DEL TextElement: Gets a property from a container.", "DEL SimpleType: Object", "DEL SimpleType: ClassLoader", "DEL Block", "DEL SimpleType: Field", "DEL NumberLiteral: 1", "DEL SimpleName: getMostSpecificMethod", "DEL TextElement: This stores the container name and owning class as well as the list of available getter and setter methods.", "DEL SimpleName: isCacheable", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL FieldDeclaration", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL Modifier: final", "DEL SimpleType: Object", "DEL QualifiedName: AbstractExecutor.TRY_FAILED", "DEL SimpleName: obj", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL SimpleName: getMethods", "DEL SimpleType: Exception", "DEL SimpleName: getName", "DEL TagElement", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL InfixExpression: ==", "DEL TagElement: @inheritDoc", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: params", "DEL SimpleName: info", "DEL SimpleName: identifier", "DEL SimpleName: IllegalAccessException", "DEL SimpleName: JexlPropertyGet", "DEL TagElement: @throws", "DEL SimpleName: setters", "DEL ArrayType: Method[]", "DEL NullLiteral", "DEL SimpleName: Object", "DEL ThrowStatement", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL ThrowStatement", "DEL SuperConstructorInvocation", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL TagElement: @inheritDoc", "DEL SimpleName: tryFailed", "DEL Block", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL SimpleName: Object", "DEL SimpleName: it", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement: Publicly exposed special failure object returned by tryInvoke.", "DEL SimpleName: object", "DEL SimpleType: Object", "DEL SimpleName: tryFailed", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL WildcardType: ?", "DEL SimpleName: args", "DEL InfixExpression: &&", "DEL SimpleName: Iterable", "DEL SimpleName: tryFailed", "DEL SimpleName: name", "DEL SimpleName: container", "DEL SimpleType: MethodKey", "DEL SimpleName: theField", "DEL SimpleName: obj", "DEL Block", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: Object", "DEL SimpleName: base", "DEL SimpleName: obj", "DEL InfixExpression: ||", "DEL SimpleName: value", "DEL SimpleName: Object", "DEL NullLiteral", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: Constructor", "DEL TagElement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: IndexedType", "DEL SimpleName: InvocationTargetException", "DEL SimpleName: IndexedType", "DEL SimpleName: container", "DEL MethodInvocation", "DEL SimpleName: getMethodExecutor", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleType: InvocationTargetException", "DEL SimpleType: Class", "DEL InfixExpression: &&", "DEL TypeDeclaration: class", "DEL MethodDeclaration", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL NullLiteral", "DEL SimpleType: JexlException", "DEL Javadoc", "DEL SimpleName: getName", "DEL Block", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: Object", "DEL Assignment: =", "DEL SimpleType: Object", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getName", "DEL Block", "DEL TagElement", "DEL SimpleName: Exception", "DEL SimpleName: key", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL Block", "DEL Modifier: public", "DEL SimpleName: Exception", "DEL SimpleName: field", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: getPropertyGet", "DEL TagElement", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: Field", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Class<?>", "DEL SimpleName: object", "DEL SimpleType: Enumeration", "DEL SimpleName: equals", "DEL SimpleName: xaccess", "DEL SimpleType: JexlInfo", "DEL MarkerAnnotation", "DEL CatchClause", "DEL SimpleName: clazz", "DEL TagElement: @param", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: UberspectImpl", "DEL SimpleName: getMethods", "DEL InfixExpression: ==", "DEL SimpleName: ctorHandle", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL TextElement:  the property key", "DEL SimpleName: Iterator", "DEL SimpleName: setters", "DEL SimpleName: object", "DEL SimpleType: Object", "DEL PrimitiveType: boolean", "DEL TextElement: Creates a new instance of FieldPropertySet.", "DEL Block", "DEL SimpleName: ctor", "DEL IfStatement", "DEL SimpleType: IndexedContainer", "DEL SimpleName: MethodKey", "DEL SimpleType: Object", "DEL SimpleName: field", "DEL MethodInvocation", "DEL TagElement", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleName: args", "DEL SimpleName: Method", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: name", "DEL TextElement: The wrapped constructor. ", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: iterator", "DEL SimpleName: Iterator", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: toString", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleName: getClass", "DEL SimpleName: invoke", "DEL TagElement: @return", "DEL SimpleName: identifier", "DEL SimpleName: getSetExecutor", "DEL Modifier: public", "DEL ParameterizedType: Class<?>", "DEL ReturnStatement", "DEL CastExpression", "DEL SimpleName: iterator", "DEL SimpleName: IntrospectionException", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL SimpleName: getClass", "DEL IfStatement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: object", "DEL SimpleName: getClass", "DEL SimpleType: Field", "DEL Block", "DEL SimpleName: invoke", "DEL ParameterizedType: Class<?>", "DEL TagElement", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: name", "DEL NumberLiteral: 0", "DEL TextElement: The array of setter methods. ", "DEL Modifier: private", "DEL SimpleType: Object", "DEL Javadoc", "DEL SimpleName: Object", "DEL NumberLiteral: 1", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL SimpleName: Object", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: field", "DEL Modifier: private", "DEL SimpleName: getClass", "DEL SimpleName: getField", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL SimpleName: getters", "DEL Dimension", "DEL Block", "DEL SimpleName: String", "DEL WildcardType: ?", "DEL SimpleName: runtimeLogger", "DEL ThisExpression", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL TypeDeclaration: class", "DEL SimpleType: Object", "DEL StringLiteral: \"constructor resolution error\"", "DEL Block", "DEL Modifier: public", "DEL Assignment: =", "DEL SimpleName: args", "DEL SimpleName: getDeclaringClass", "DEL InfixExpression: &&", "DEL SimpleName: getters", "DEL SimpleType: AbstractExecutor.Method", "DEL SimpleName: jm", "DEL TagElement: @inheritDoc", "DEL ParameterizedType: Class<?>", "DEL Javadoc", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: xargument", "DEL ClassInstanceCreation", "DEL SimpleType: EnumerationIterator", "DEL SimpleName: getDeclaringClass", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: invokeGet", "DEL Block", "DEL SimpleName: container", "DEL TagElement", "DEL SimpleType: Constructor", "DEL SimpleName: getters", "DEL TagElement", "DEL Block", "DEL SimpleName: clazz", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL SimpleName: rval", "DEL SimpleName: TRY_FAILED", "DEL Javadoc", "DEL ArrayType: Object[]", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: invokeSet", "DEL Modifier: public", "DEL TextElement:  the instance owning the container (not null)", "DEL SimpleName: isInvocationConvertible", "DEL IfStatement", "DEL SimpleName: clazz", "DEL Modifier: protected", "DEL Modifier: public", "DEL SimpleType: Constructor", "DEL SimpleType: Method", "DEL TagElement: @param", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL SimpleName: Method", "DEL SimpleName: toUpperCase", "DEL SimpleName: name", "DEL TagElement", "DEL Block", "DEL TagElement", "DEL InfixExpression: +", "DEL SimpleName: getMostSpecificMethod", "DEL Javadoc", "DEL Assignment: =", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: JexlPropertySet", "DEL SimpleType: Class", "DEL FieldAccess", "DEL SimpleName: Field", "DEL SimpleName: Object", "DEL ArrayType: Method[]", "DEL Modifier: public", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TryStatement", "DEL SimpleName: Exception", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SimpleName: obj", "DEL SimpleName: Object", "DEL TagElement", "DEL SimpleName: Object", "DEL Javadoc", "DEL ThisExpression", "DEL TagElement", "DEL SimpleName: object", "DEL SimpleName: Method", "DEL SimpleType: JexlMethod", "DEL InfixExpression: !=", "DEL SimpleType: JexlPropertySet", "DEL Assignment: =", "DEL ReturnStatement", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: Class", "DEL SimpleName: set", "DEL CastExpression", "DEL Javadoc", "DEL SimpleType: Iterator", "DEL SimpleType: Object", "DEL SimpleName: ConstructorMethod", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL ReturnStatement", "DEL SimpleType: String", "DEL Block", "DEL SimpleType: Class", "DEL SimpleName: Object", "DEL SimpleType: IndexedType", "DEL SimpleName: identifier", "DEL SimpleName: it", "DEL TagElement: @return", "DEL TextElement: functionality of JEXL.", "DEL SimpleName: rval", "DEL SimpleType: Object", "DEL SimpleName: object", "DEL SimpleName: args", "DEL Dimension", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL ArrayAccess", "DEL PrimitiveType: boolean", "DEL SimpleName: Object", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: getters", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: theField", "DEL ReturnStatement", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ArrayIterator", "DEL SimpleType: Class", "DEL TextElement: The public field.", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL InfixExpression: !=", "DEL TagElement: @inheritDoc", "DEL Modifier: final", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: IllegalAccessException", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: field", "DEL TextElement:  the object", "DEL SimpleName: JexlInfo", "DEL SimpleName: IndexedType", "DEL Modifier: private", "DEL ArrayType: Object[]", "DEL SimpleName: field", "DEL SimpleName: Object", "DEL TypeDeclaration: class", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: theType", "DEL StringLiteral: \"@\"", "DEL SimpleName: Field", "DEL MethodInvocation", "DEL SimpleName: Exception", "DEL TagElement: @since", "DEL SimpleName: getClass", "DEL SimpleName: obj", "DEL SimpleName: arg", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: setters", "DEL TagElement: @inheritDoc", "DEL TextElement:  the property key (not null)", "DEL SimpleName: getReturnType", "DEL SimpleName: ClassLoader", "DEL TagElement: @inheritDoc", "DEL SimpleName: equals", "DEL SimpleName: TRY_FAILED", "DEL MethodInvocation", "DEL SimpleName: JexlInfo", "DEL TextElement:  the class public field", "DEL Javadoc", "DEL SimpleType: Class", "DEL SimpleName: toString", "DEL SimpleName: name", "DEL TagElement: @param", "DEL SimpleType: JexlInfo", "DEL Modifier: protected", "DEL Assignment: =", "DEL TagElement: @inheritDoc", "DEL SimpleName: obj", "DEL SimpleName: object", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: invoke", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlPropertyGet", "DEL Dimension", "DEL SimpleName: setters", "DEL SimpleName: getPropertySet", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: JexlPropertyGet", "DEL TextElement:  the instance owning the container (not null)", "DEL TagElement: @inheritDoc", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL SimpleName: name", "DEL TextElement:  if invocation failed; IntrospectionException if a property getter could not be found", "DEL SimpleType: Iterable", "DEL TextElement: It implements JexlPropertyGet since such a container can only be accessed from its owning instance (not set).", "DEL InfixExpression: ==", "DEL SimpleName: obj", "DEL Modifier: private", "DEL SimpleName: jm", "DEL FieldDeclaration", "DEL SimpleName: Arrays", "DEL WildcardType: ?", "DEL SimpleName: Object", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: args", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: theObject", "DEL IfStatement", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: field", "DEL SimpleName: equals", "DEL TagElement", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: getField", "DEL IfStatement", "DEL SimpleType: ConstructorMethod", "DEL SimpleName: field", "DEL SimpleName: object", "DEL MethodInvocation", "DEL SimpleName: TRY_FAILED", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL TextElement:  the array of getter methods", "DEL NullLiteral", "DEL SimpleName: theField", "DEL InfixExpression: ==", "DEL ConditionalExpression", "DEL SimpleName: getters", "DEL SimpleName: clazz", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Constructor<?>", "DEL NullLiteral", "DEL SimpleName: setters", "DEL MethodInvocation", "DEL SimpleName: FieldPropertySet", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL CastExpression", "DEL Javadoc", "DEL FieldAccess", "DEL SimpleName: Object", "DEL SimpleName: obj", "DEL ExpressionStatement", "DEL SimpleName: get", "DEL SimpleName: Uberspect", "DEL SimpleName: ctor", "DEL Javadoc", "DEL SimpleName: JexlInfo", "DEL TagElement: @param", "DEL SimpleName: key", "DEL SimpleName: ctorHandle", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: IntrospectionException", "DEL SimpleName: key", "DEL SimpleName: field", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL TagElement: @inheritDoc", "DEL SimpleName: tryInvoke", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: obj", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: obj", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: field", "DEL SimpleName: Exception", "DEL NullLiteral", "DEL MethodDeclaration", "DEL Modifier: public", "DEL Javadoc", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleType: Class", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: invokeSet", "DEL SimpleName: object", "DEL TagElement", "DEL ParameterizedType: Constructor<?>", "DEL SimpleType: Exception", "DEL Block", "DEL ParameterizedType: Map<?,?>", "DEL StringLiteral: \"property resolution error\"", "DEL SimpleName: JexlPropertyGet", "DEL SimpleName: isAssignableFrom", "DEL TextElement: Abstract an indexed property container.", "DEL SimpleName: substring", "DEL SimpleName: info", "DEL SimpleName: xinstance", "DEL ReturnStatement", "DEL SimpleName: obj", "DEL TextElement:  the class loader to use", "DEL SimpleName: key", "DEL SimpleName: getClassByName", "DEL SimpleName: Object", "DEL IfStatement", "DEL SimpleName: ctor", "DEL SimpleType: JexlMethod", "DEL ExpressionStatement", "DEL SimpleName: JexlPropertyGet", "DEL SimpleType: InstantiationException", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL SimpleName: object", "DEL Modifier: public", "DEL SimpleType: Object", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL TagElement: @throws", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL NullLiteral", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL SimpleType: Iterator", "DEL SimpleType: JexlPropertySet", "DEL Block", "DEL SimpleName: execute", "DEL SimpleName: invoke", "DEL SimpleName: base", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: ctor", "DEL Block", "DEL NullLiteral", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleType: IndexedContainer", "DEL Dimension", "DEL TagElement: @param", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL SimpleName: key", "DEL ParameterizedType: Constructor<?>", "DEL Block", "DEL Javadoc", "DEL SimpleName: c", "DEL ReturnStatement", "DEL SimpleType: JexlPropertyGet", "DEL SimpleName: obj", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL SimpleName: getClass", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: key", "DEL Block", "DEL SimpleName: toString", "DEL SimpleName: ctor", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: obj", "DEL WildcardType: ?", "DEL TextElement: Sets a property in a container.", "DEL VariableDeclarationStatement", "DEL SimpleName: arg", "DEL Modifier: private", "DEL NullLiteral", "DEL BooleanLiteral: true", "DEL SimpleType: Exception", "DEL VariableDeclarationFragment", "DEL SimpleName: IndexedContainer", "DEL SimpleName: key", "DEL TextElement: Creates a new instance of FieldPropertyGet.", "DEL TagElement", "DEL ReturnStatement", "DEL Modifier: private", "DEL Modifier: private", "DEL SimpleName: jm", "DEL SimpleName: field", "DEL SimpleName: sets", "DEL SimpleName: clazz", "DEL TagElement", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: jm", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: Field", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: info", "DEL InfixExpression: &&", "DEL SimpleType: JexlInfo", "DEL Modifier: static", "DEL TagElement: @param", "DEL StringLiteral: \"get\"", "DEL ReturnStatement", "DEL SimpleName: key", "DEL Block", "DEL SimpleType: Class", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: Constructor", "DEL TagElement: @param", "DEL SimpleName: args", "DEL SimpleName: TRY_FAILED", "DEL FieldAccess", "DEL SimpleType: Uberspect", "DEL BooleanLiteral: false", "DEL Block", "DEL TypeLiteral", "DEL SimpleName: Constructor", "DEL SimpleName: rval", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL InstanceofExpression", "DEL SimpleName: gets", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: toString", "DEL ParameterizedType: Class<?>", "DEL SimpleName: obj", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL TryStatement", "DEL FieldDeclaration", "DEL SimpleName: clazz", "DEL SimpleName: Field", "DEL Block", "DEL CastExpression", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: getClass", "DEL SimpleName: Object", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL SimpleName: getConstructor", "DEL SimpleName: Field", "DEL SimpleName: IndexedContainer", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL Block", "DEL TextElement:  the class public field", "DEL SimpleName: invoke", "DEL SimpleName: Class", "DEL SimpleType: Object", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL TextElement: The instance owning the container. ", "DEL SimpleName: newInstance", "DEL SimpleType: String", "DEL TextElement:  the invocation result (frequently null)", "DEL Javadoc", "DEL SimpleType: Iterator", "DEL SimpleName: Iterator", "DEL SimpleName: JexlInfo", "DEL Modifier: final", "DEL SimpleName: equals", "DEL NullLiteral", "DEL SimpleName: JexlException", "DEL SimpleName: TRY_FAILED", "DEL SimpleType: Iterator", "DEL Javadoc", "DEL SimpleName: obj", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL IfStatement", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL SingleVariableDeclaration", "DEL ArrayType: Object[]", "DEL Modifier: private", "DEL SimpleName: Class", "DEL SimpleName: JexlPropertyGet", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: IllegalAccessException", "DEL ArrayType: Object[]", "DEL Javadoc", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: substring", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: newInstance", "DEL SimpleType: Iterator", "DEL SimpleName: isCacheable", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL Block", "DEL ThrowStatement", "DEL InfixExpression: &&", "DEL SimpleName: xill", "DEL InfixExpression: +", "DEL Modifier: private", "DEL SimpleType: Object", "DEL CastExpression", "DEL SimpleName: field", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL CatchClause", "DEL SimpleName: xinvoke", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: asList", "DEL SimpleName: container", "DEL TagElement", "DEL SimpleName: base", "DEL SimpleName: IndexedType", "DEL SimpleName: field", "DEL SimpleName: getIndexedGet", "DEL SimpleName: xany", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: sets", "DEL Block", "DEL SimpleName: info", "DEL SimpleName: tryFailed", "DEL SimpleName: obj", "DEL SimpleName: JexlMethod", "DEL ParameterizedType: Enumeration<?>", "DEL SimpleName: clazz", "DEL SimpleName: obj", "DEL Dimension", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL SimpleName: equals", "DEL SingleVariableDeclaration", "DEL SimpleName: jm", "DEL SimpleType: Object", "DEL SimpleName: tryInvoke", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: String", "DEL ClassInstanceCreation", "DEL SimpleName: set", "DEL TextElement: based on arguments.", "DEL SimpleName: getIndexedGet", "DEL SingleVariableDeclaration", "DEL SimpleType: IntrospectionException", "DEL MethodInvocation", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL TagElement", "DEL ParenthesizedExpression", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: FieldPropertyGet", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: object", "DEL SimpleName: value", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: args", "DEL SimpleName: value", "DEL Javadoc", "DEL TextElement:  the logger used for all logging needs", "DEL MethodInvocation", "DEL SimpleName: getters", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: theCtor", "DEL SimpleType: Log", "DEL SimpleName: setLoader", "DEL TagElement", "DEL TextElement: The container type instance. ", "DEL Javadoc", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: getType", "DEL SimpleType: Object", "DEL SimpleName: params", "DEL Block", "DEL SimpleName: object", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: rval", "DEL Javadoc", "DEL NumberLiteral: 0", "DEL SimpleType: Field", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: obj", "DEL SimpleName: setters", "DEL QualifiedName: AbstractExecutor.Method", "DEL ParameterizedType: Class<?>", "DEL SimpleName: theType", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL Block", "DEL TagElement: @param", "DEL SimpleName: toString", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: identifier", "DEL SimpleName: Class", "DEL SimpleName: IllegalArgumentException", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: values", "DEL TextElement: Attempts to find an indexed-property getter in an object.", "DEL SimpleName: Exception", "DEL SimpleName: set", "DEL SimpleName: obj", "DEL Modifier: final", "DEL IfStatement", "DEL Javadoc", "DEL InfixExpression: !=", "DEL TagElement: @since", "DEL Modifier: public", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL SimpleName: getName", "DEL ParameterizedType: Iterator<?>", "DEL SimpleType: Method", "DEL SimpleName: Object", "DEL TextElement:  the property value", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL TextElement: The container name. ", "DEL SimpleName: JexlInfo", "DEL ReturnStatement", "DEL TextElement:  a JexlPropertyGet is successfull, null otherwise", "DEL SimpleName: set", "DEL SimpleName: JexlMethod", "DEL NullLiteral", "DEL SimpleName: FieldPropertyGet", "DEL SimpleType: Object", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL TextElement: Creates a constructor method.", "DEL Javadoc", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: obj", "DEL Javadoc", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: field", "DEL SimpleName: gets", "DEL MethodInvocation", "DEL Modifier: static", "DEL Block", "DEL TextElement: .", "DEL StringLiteral: \"iterator\"", "DEL BooleanLiteral: false", "DEL InfixExpression: !=", "DEL SimpleName: object", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: Map", "DEL SimpleName: name", "DEL SimpleType: Class", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: equals", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Field", "DEL InfixExpression: !=", "DEL SimpleName: jm", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleType: IntrospectionException", "DEL SimpleName: obj", "DEL SimpleName: get", "DEL SimpleName: field", "DEL SimpleType: Class", "DEL InfixExpression: !=", "DEL TextElement: The owning class. ", "DEL SimpleName: ctor", "DEL SimpleType: FieldPropertyGet", "DEL SimpleName: JexlPropertyGet", "DEL SimpleName: obj", "DEL VariableDeclarationStatement", "DEL SimpleType: IllegalAccessException", "DEL SimpleName: obj", "DEL SimpleName: obj", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL SimpleName: obj", "DEL IfStatement", "DEL Javadoc", "DEL WildcardType: ?", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: MethodKey", "DEL ClassInstanceCreation", "DEL SimpleName: cloader", "DEL SimpleName: type", "DEL WildcardType: ?", "DEL TextElement:  the result of the method invocation (frequently null)", "DEL ArrayAccess", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: name", "DEL MethodInvocation", "DEL IfStatement", "DEL InfixExpression: !=", "DEL SimpleName: obj", "DEL SimpleName: theCtor", "DEL BooleanLiteral: true", "DEL SimpleName: Object", "DEL InfixExpression: ==", "DEL SimpleName: key", "DEL QualifiedName: getters.length", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: key", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleType: Field", "DEL MethodInvocation", "DEL SimpleType: IntrospectionException", "DEL SimpleName: asList", "DEL SimpleName: name", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL SimpleName: getReturnType", "DEL TextElement:  the owning class", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL TextElement:  the field name", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: key", "DEL SimpleType: Object", "DEL FieldAccess", "DEL SimpleType: Object", "DEL SimpleName: name", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL SimpleName: String", "DEL SimpleName: getMethod", "DEL SimpleName: value", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: name", "DEL SimpleName: getConstructor", "DEL TryStatement", "DEL SimpleName: SuppressWarnings", "DEL TagElement: @inheritDoc", "DEL SimpleType: String", "DEL SimpleType: String", "DEL Modifier: private", "DEL Block", "DEL SimpleType: Exception", "DEL Javadoc", "DEL SimpleName: Iterator", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL SimpleName: theField", "DEL SimpleName: getClass", "DEL Modifier: final", "DEL TagElement", "DEL SimpleName: c", "DEL SimpleName: set", "DEL Block", "DEL SimpleName: get", "DEL Assignment: =", "DEL SimpleName: TRY_FAILED", "DEL SingleVariableDeclaration", "DEL TextElement:  the container name", "DEL SimpleName: key", "DEL CatchClause", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL Block", "DEL TagElement: @throws", "DEL SimpleName: ConstructorMethod", "DEL SimpleName: toString", "DEL ExpressionStatement", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL SimpleName: key", "DEL Assignment: =", "DEL SimpleName: clazz", "DEL SimpleName: Object", "DEL SimpleName: gets", "DEL VariableDeclarationStatement", "DEL SimpleName: ctor", "DEL NullLiteral", "DEL PrimitiveType: boolean", "DEL TextElement: A JexlMethod that wraps constructor.", "DEL Block", "DEL ArrayType: Method[]", "DEL TextElement:  if invocation failed; IntrospectionException if a property setter could not be found", "DEL Block", "DEL SimpleName: obj", "DEL SimpleName: getName", "DEL SimpleName: setters", "DEL SimpleName: Field", "DEL Block", "DEL SimpleType: Method", "DEL SimpleName: getModifiers", "DEL SimpleName: field", "DEL SingleVariableDeclaration", "DEL SimpleName: Constructor", "DEL SimpleName: toString", "DEL SimpleType: String", "DEL ArrayType: Method[]", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL ThisExpression", "DEL NullLiteral", "DEL SimpleName: Iterable", "DEL Block", "DEL CatchClause", "DEL SimpleName: arg", "DEL SimpleName: equals", "DEL ReturnStatement", "DEL NullLiteral", "DEL TagElement: @param", "DEL StringLiteral: \"@\"", "DEL SimpleName: getField", "DEL ReturnStatement", "DEL TextElement:  a ", "DEL SimpleType: JexlInfo", "DEL TextElement:  the object", "DEL Modifier: final", "DEL TagElement: @inheritDoc", "DEL SimpleName: TRY_FAILED", "DEL SimpleName: jm", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: jm", "DEL TextElement:  if inner invocation fails", "DEL TagElement: @return", "DEL Block", "DEL SimpleName: Class", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL ReturnStatement", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL ThisExpression", "DEL TagElement", "DEL Block", "DEL FieldDeclaration", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL SimpleName: object", "DEL SimpleName: type", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Iterator<?>", "DEL SimpleName: identifier", "DEL SimpleName: getDeclaringClass", "DEL Javadoc", "DEL SimpleName: getDeclaringClass", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL Modifier: final", "DEL SimpleName: obj", "DEL SimpleName: container", "DEL SimpleName: toString", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement: is not necessarily an int and the set/get arrays are not resolved.", "DEL NullLiteral", "DEL SimpleName: info", "DEL SimpleName: Method", "DEL SimpleName: obj", "DEL SimpleName: JexlPropertySet", "DEL SimpleName: getConstructorMethod", "DEL Modifier: final", "DEL SimpleName: obj", "DEL InfixExpression: &&", "DEL StringLiteral: \"unable to generate iterator()\"", "DEL Modifier: static", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: params", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL TextElement:  the property value", "DEL SimpleType: Enumeration", "DEL SimpleName: getConstructor", "DEL SimpleType: JexlMethod", "DEL Javadoc", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: identifier", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL SimpleType: Field", "DEL SimpleName: toString", "DEL SimpleType: JexlPropertyGet", "DEL NullLiteral", "DEL SimpleName: obj", "DEL ThisExpression", "DEL SimpleName: args", "DEL PrimitiveType: boolean", "DEL SimpleName: arg", "DEL SimpleName: equals", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL ArrayType: Method[]", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: info", "DEL SimpleName: getClass", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: Exception", "DEL IfStatement", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: Log", "DEL Modifier: private", "DEL SimpleName: name", "DEL SimpleName: ctor", "DEL SimpleName: info", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL SimpleName: Object", "DEL Block", "DEL TagElement", "DEL TagElement", "DEL SimpleName: type", "DEL SimpleType: IllegalAccessException", "DEL SimpleType: Exception", "DEL IfStatement", "DEL SimpleName: ctorHandle", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Iterable<?>", "DEL SimpleType: Class", "DEL SimpleName: Method", "DEL Modifier: final", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleType: Method", "DEL SingleVariableDeclaration", "DEL InfixExpression: +", "DEL SimpleName: rval", "DEL CastExpression", "DEL StringLiteral: \"set\"", "DEL VariableDeclarationFragment", "DEL SimpleName: Exception", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL SimpleName: Map", "DEL SimpleType: Object", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL SimpleType: JexlPropertyGet", "DEL Block", "DEL SimpleType: JexlInfo", "DEL SimpleName: obj", "DEL SimpleName: info", "DEL Block", "DEL Assignment: =", "DEL MethodInvocation", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration"]}]}}, {"UberspectImpl_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.beans.IntrospectionException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.jexl2.internal.Introspector(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Constructor(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.reflect.Field(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.lang.reflect.Modifier(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.lang.reflect.InvocationTargetException(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.lang.reflect.Method(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Arrays(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.Enumeration(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Iterator(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: java.util.Map(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.commons.jexl2.JexlInfo(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: org.apache.commons.jexl2.JexlException(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.commons.jexl2.internal.AbstractExecutor(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.apache.commons.jexl2.internal.ArrayIterator(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.apache.commons.jexl2.internal.EnumerationIterator(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.commons.jexl2.internal.introspection.MethodKey(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.commons.logging.Log(36)", "Delete ImportDeclaration(37)", "Delete TextElement: Implementation of Uberspect to provide the default introspective(38)", "Delete TextElement: functionality of JEXL.(39)", "Delete TextElement: <p>This is the class to derive to customize introspection.</p>(40)", "Delete TagElement(41)", "Delete TextElement:  1.0(42)", "Delete TagElement: @since(43)", "Delete Javadoc(44)", "Delete Modifier: public(45)", "Delete SimpleName: UberspectImpl(46)", "Delete SimpleName: Introspector(47)", "Delete SimpleType: Introspector(48)", "Delete SimpleName: Uberspect(49)", "Delete SimpleType: Uberspect(50)", "Delete TextElement: Publicly exposed special failure object returned by tryInvoke.(51)", "Delete TagElement(52)", "Delete Javadoc(53)", "Delete Modifier: public(54)", "Delete Modifier: static(55)", "Delete Modifier: final(56)", "Delete SimpleName: Object(57)", "Delete SimpleType: Object(58)", "Delete SimpleName: TRY_FAILED(59)", "Delete QualifiedName: AbstractExecutor.TRY_FAILED(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete TextElement: Creates a new UberspectImpl.(63)", "Delete TagElement(64)", "Delete SimpleName: runtimeLogger(65)", "Delete TextElement:  the logger used for all logging needs(66)", "Delete TagElement: @param(67)", "Delete Javadoc(68)", "Delete Modifier: public(69)", "Delete SimpleName: UberspectImpl(70)", "Delete SimpleName: Log(71)", "Delete SimpleType: Log(72)", "Delete SimpleName: runtimeLogger(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: runtimeLogger(75)", "Delete SuperConstructorInvocation(76)", "Delete Block(77)", "Delete MethodDeclaration(78)", "Delete TextElement: Resets this Uberspect class loader.(79)", "Delete TagElement(80)", "Delete SimpleName: cloader(81)", "Delete TextElement:  the class loader to use(82)", "Delete TagElement: @param(83)", "Delete Javadoc(84)", "Delete Modifier: public(85)", "Delete PrimitiveType: void(86)", "Delete SimpleName: setLoader(87)", "Delete SimpleName: ClassLoader(88)", "Delete SimpleType: ClassLoader(89)", "Delete SimpleName: cloader(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: base(92)", "Delete MethodInvocation(93)", "Delete SimpleName: setLoader(94)", "Delete SimpleName: cloader(95)", "Delete MethodInvocation(96)", "Delete ExpressionStatement(97)", "Delete Block(98)", "Delete MethodDeclaration(99)", "Delete TagElement: @inheritDoc(100)", "Delete TagElement(101)", "Delete Javadoc(102)", "Delete SimpleName: SuppressWarnings(103)", "Delete StringLiteral: \"unchecked\"(104)", "Delete SingleMemberAnnotation(105)", "Delete Modifier: public(106)", "Delete SimpleName: Iterator(107)", "Delete SimpleType: Iterator(108)", "Delete WildcardType: ?(109)", "Delete ParameterizedType: Iterator<?>(110)", "Delete SimpleName: getIterator(111)", "Delete SimpleName: Object(112)", "Delete SimpleType: Object(113)", "Delete SimpleName: obj(114)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: JexlInfo(116)", "Delete SimpleType: JexlInfo(117)", "Delete SimpleName: info(118)", "Delete SingleVariableDeclaration(119)", "Delete SimpleName: obj(120)", "Delete SimpleName: Iterator(121)", "Delete SimpleType: Iterator(122)", "Delete WildcardType: ?(123)", "Delete ParameterizedType: Iterator<?>(124)", "Delete InstanceofExpression(125)", "Delete SimpleName: Iterator(126)", "Delete SimpleType: Iterator(127)", "Delete WildcardType: ?(128)", "Delete ParameterizedType: Iterator<?>(129)", "Delete SimpleName: obj(130)", "Delete CastExpression(131)", "Delete ParenthesizedExpression(132)", "Delete ReturnStatement(133)", "Delete Block(134)", "Delete IfStatement(135)", "Delete SimpleName: obj(136)", "Delete SimpleName: getClass(137)", "Delete MethodInvocation(138)", "Delete SimpleName: isArray(139)", "Delete MethodInvocation(140)", "Delete SimpleName: ArrayIterator(141)", "Delete SimpleType: ArrayIterator(142)", "Delete SimpleName: obj(143)", "Delete ClassInstanceCreation(144)", "Delete ReturnStatement(145)", "Delete Block(146)", "Delete IfStatement(147)", "Delete SimpleName: obj(148)", "Delete SimpleName: Map(149)", "Delete SimpleType: Map(150)", "Delete WildcardType: ?(151)", "Delete WildcardType: ?(152)", "Delete ParameterizedType: Map<?,?>(153)", "Delete InstanceofExpression(154)", "Delete SimpleName: Map(155)", "Delete SimpleType: Map(156)", "Delete WildcardType: ?(157)", "Delete WildcardType: ?(158)", "Delete ParameterizedType: Map<?,?>(159)", "Delete SimpleName: obj(160)", "Delete CastExpression(161)", "Delete ParenthesizedExpression(162)", "Delete SimpleName: values(163)", "Delete MethodInvocation(164)", "Delete SimpleName: iterator(165)", "Delete MethodInvocation(166)", "Delete ReturnStatement(167)", "Delete Block(168)", "Delete IfStatement(169)", "Delete SimpleName: obj(170)", "Delete SimpleName: Enumeration(171)", "Delete SimpleType: Enumeration(172)", "Delete WildcardType: ?(173)", "Delete ParameterizedType: Enumeration<?>(174)", "Delete InstanceofExpression(175)", "Delete SimpleName: EnumerationIterator(176)", "Delete SimpleType: EnumerationIterator(177)", "Delete SimpleName: Object(178)", "Delete SimpleType: Object(179)", "Delete ParameterizedType: EnumerationIterator<Object>(180)", "Delete SimpleName: Enumeration(181)", "Delete SimpleType: Enumeration(182)", "Delete SimpleName: Object(183)", "Delete SimpleType: Object(184)", "Delete ParameterizedType: Enumeration<Object>(185)", "Delete SimpleName: obj(186)", "Delete CastExpression(187)", "Delete ClassInstanceCreation(188)", "Delete ReturnStatement(189)", "Delete Block(190)", "Delete IfStatement(191)", "Delete SimpleName: obj(192)", "Delete SimpleName: Iterable(193)", "Delete SimpleType: Iterable(194)", "Delete WildcardType: ?(195)", "Delete ParameterizedType: Iterable<?>(196)", "Delete InstanceofExpression(197)", "Delete SimpleName: Iterable(198)", "Delete SimpleType: Iterable(199)", "Delete WildcardType: ?(200)", "Delete ParameterizedType: Iterable<?>(201)", "Delete SimpleName: obj(202)", "Delete CastExpression(203)", "Delete ParenthesizedExpression(204)", "Delete SimpleName: iterator(205)", "Delete MethodInvocation(206)", "Delete ReturnStatement(207)", "Delete Block(208)", "Delete IfStatement(209)", "Delete QualifiedName: AbstractExecutor.Method(210)", "Delete SimpleType: AbstractExecutor.Method(211)", "Delete SimpleName: it(212)", "Delete SimpleName: getMethodExecutor(213)", "Delete SimpleName: obj(214)", "Delete StringLiteral: \"iterator\"(215)", "Delete NullLiteral(216)", "Delete MethodInvocation(217)", "Delete VariableDeclarationFragment(218)", "Delete VariableDeclarationStatement(219)", "Delete SimpleName: it(220)", "Delete NullLiteral(221)", "Delete InfixExpression: !=(222)", "Delete SimpleName: Iterator(223)", "Delete SimpleType: Iterator(224)", "Delete TypeLiteral(225)", "Delete SimpleName: isAssignableFrom(226)", "Delete SimpleName: it(227)", "Delete SimpleName: getReturnType(228)", "Delete MethodInvocation(229)", "Delete MethodInvocation(230)", "Delete InfixExpression: &&(231)", "Delete SimpleName: Iterator(232)", "Delete SimpleType: Iterator(233)", "Delete SimpleName: Object(234)", "Delete SimpleType: Object(235)", "Delete ParameterizedType: Iterator<Object>(236)", "Delete SimpleName: it(237)", "Delete SimpleName: execute(238)", "Delete SimpleName: obj(239)", "Delete NullLiteral(240)", "Delete MethodInvocation(241)", "Delete CastExpression(242)", "Delete ReturnStatement(243)", "Delete Block(244)", "Delete IfStatement(245)", "Delete Block(246)", "Delete SimpleName: Exception(247)", "Delete SimpleType: Exception(248)", "Delete SimpleName: xany(249)", "Delete SingleVariableDeclaration(250)", "Delete SimpleName: JexlException(251)", "Delete SimpleType: JexlException(252)", "Delete SimpleName: info(253)", "Delete StringLiteral: \"unable to generate iterator()\"(254)", "Delete SimpleName: xany(255)", "Delete ClassInstanceCreation(256)", "Delete ThrowStatement(257)", "Delete Block(258)", "Delete CatchClause(259)", "Delete TryStatement(260)", "Delete NullLiteral(261)", "Delete ReturnStatement(262)", "Delete Block(263)", "Delete MethodDeclaration(264)", "Delete TagElement: @inheritDoc(265)", "Delete TagElement(266)", "Delete Javadoc(267)", "Delete Modifier: public(268)", "Delete SimpleName: JexlMethod(269)", "Delete SimpleType: JexlMethod(270)", "Delete SimpleName: getMethod(271)", "Delete SimpleName: Object(272)", "Delete SimpleType: Object(273)", "Delete SimpleName: obj(274)", "Delete SingleVariableDeclaration(275)", "Delete SimpleName: String(276)", "Delete SimpleType: String(277)", "Delete SimpleName: method(278)", "Delete SingleVariableDeclaration(279)", "Delete SimpleName: Object(280)", "Delete SimpleType: Object(281)", "Delete Dimension(282)", "Delete ArrayType: Object[](283)", "Delete SimpleName: args(284)", "Delete SingleVariableDeclaration(285)", "Delete SimpleName: JexlInfo(286)", "Delete SimpleType: JexlInfo(287)", "Delete SimpleName: info(288)", "Delete SingleVariableDeclaration(289)", "Delete SimpleName: getMethodExecutor(290)", "Delete SimpleName: obj(291)", "Delete SimpleName: method(292)", "Delete SimpleName: args(293)", "Delete MethodInvocation(294)", "Delete ReturnStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete TagElement: @inheritDoc(298)", "Delete TagElement(299)", "Delete Javadoc(300)", "Delete SimpleName: Deprecated(301)", "Delete MarkerAnnotation(302)", "Delete Modifier: public(303)", "Delete SimpleName: Constructor(304)", "Delete SimpleType: Constructor(305)", "Delete WildcardType: ?(306)", "Delete ParameterizedType: Constructor<?>(307)", "Delete SimpleName: getConstructor(308)", "Delete SimpleName: Object(309)", "Delete SimpleType: Object(310)", "Delete SimpleName: ctorHandle(311)", "Delete SingleVariableDeclaration(312)", "Delete SimpleName: Object(313)", "Delete SimpleType: Object(314)", "Delete Dimension(315)", "Delete ArrayType: Object[](316)", "Delete SimpleName: args(317)", "Delete SingleVariableDeclaration(318)", "Delete SimpleName: JexlInfo(319)", "Delete SimpleType: JexlInfo(320)", "Delete SimpleName: info(321)", "Delete SingleVariableDeclaration(322)", "Delete SimpleName: getConstructor(323)", "Delete SimpleName: ctorHandle(324)", "Delete SimpleName: args(325)", "Delete MethodInvocation(326)", "Delete ReturnStatement(327)", "Delete Block(328)", "Delete MethodDeclaration(329)", "Delete TagElement: @inheritDoc(330)", "Delete TagElement(331)", "Delete Javadoc(332)", "Delete Modifier: public(333)", "Delete SimpleName: JexlMethod(334)", "Delete SimpleType: JexlMethod(335)", "Delete SimpleName: getConstructorMethod(336)", "Delete SimpleName: Object(337)", "Delete SimpleType: Object(338)", "Delete SimpleName: ctorHandle(339)", "Delete SingleVariableDeclaration(340)", "Delete SimpleName: Object(341)", "Delete SimpleType: Object(342)", "Delete Dimension(343)", "Delete ArrayType: Object[](344)", "Delete SimpleName: args(345)", "Delete SingleVariableDeclaration(346)", "Delete SimpleName: JexlInfo(347)", "Delete SimpleType: JexlInfo(348)", "Delete SimpleName: info(349)", "Delete SingleVariableDeclaration(350)", "Delete Modifier: final(351)", "Delete SimpleName: Constructor(352)", "Delete SimpleType: Constructor(353)", "Delete WildcardType: ?(354)", "Delete ParameterizedType: Constructor<?>(355)", "Delete SimpleName: ctor(356)", "Delete SimpleName: getConstructor(357)", "Delete SimpleName: ctorHandle(358)", "Delete SimpleName: args(359)", "Delete MethodInvocation(360)", "Delete VariableDeclarationFragment(361)", "Delete VariableDeclarationStatement(362)", "Delete SimpleName: ctor(363)", "Delete NullLiteral(364)", "Delete InfixExpression: !=(365)", "Delete SimpleName: ConstructorMethod(366)", "Delete SimpleType: ConstructorMethod(367)", "Delete SimpleName: ctor(368)", "Delete ClassInstanceCreation(369)", "Delete ReturnStatement(370)", "Delete Block(371)", "Delete NullLiteral(372)", "Delete ReturnStatement(373)", "Delete Block(374)", "Delete IfStatement(375)", "Delete Block(376)", "Delete MethodDeclaration(377)", "Delete TagElement: @inheritDoc(378)", "Delete TagElement(379)", "Delete Javadoc(380)", "Delete Modifier: public(381)", "Delete SimpleName: JexlPropertyGet(382)", "Delete SimpleType: JexlPropertyGet(383)", "Delete SimpleName: getPropertyGet(384)", "Delete SimpleName: Object(385)", "Delete SimpleType: Object(386)", "Delete SimpleName: obj(387)", "Delete SingleVariableDeclaration(388)", "Delete SimpleName: Object(389)", "Delete SimpleType: Object(390)", "Delete SimpleName: identifier(391)", "Delete SingleVariableDeclaration(392)", "Delete SimpleName: JexlInfo(393)", "Delete SimpleType: JexlInfo(394)", "Delete SimpleName: info(395)", "Delete SingleVariableDeclaration(396)", "Delete SimpleName: JexlPropertyGet(397)", "Delete SimpleType: JexlPropertyGet(398)", "Delete SimpleName: get(399)", "Delete SimpleName: getGetExecutor(400)", "Delete SimpleName: obj(401)", "Delete SimpleName: identifier(402)", "Delete MethodInvocation(403)", "Delete VariableDeclarationFragment(404)", "Delete VariableDeclarationStatement(405)", "Delete SimpleName: get(406)", "Delete NullLiteral(407)", "Delete InfixExpression: ==(408)", "Delete SimpleName: obj(409)", "Delete NullLiteral(410)", "Delete InfixExpression: !=(411)", "Delete InfixExpression: &&(412)", "Delete SimpleName: identifier(413)", "Delete NullLiteral(414)", "Delete InfixExpression: !=(415)", "Delete InfixExpression: &&(416)", "Delete SimpleName: get(417)", "Delete SimpleName: getIndexedGet(418)", "Delete SimpleName: obj(419)", "Delete SimpleName: identifier(420)", "Delete SimpleName: toString(421)", "Delete MethodInvocation(422)", "Delete MethodInvocation(423)", "Delete Assignment: =(424)", "Delete ExpressionStatement(425)", "Delete SimpleName: get(426)", "Delete NullLiteral(427)", "Delete InfixExpression: ==(428)", "Delete SimpleName: Field(429)", "Delete SimpleType: Field(430)", "Delete SimpleName: field(431)", "Delete SimpleName: getField(432)", "Delete SimpleName: obj(433)", "Delete SimpleName: identifier(434)", "Delete SimpleName: toString(435)", "Delete MethodInvocation(436)", "Delete SimpleName: info(437)", "Delete MethodInvocation(438)", "Delete VariableDeclarationFragment(439)", "Delete VariableDeclarationStatement(440)", "Delete SimpleName: field(441)", "Delete NullLiteral(442)", "Delete InfixExpression: !=(443)", "Delete SimpleName: FieldPropertyGet(444)", "Delete SimpleType: FieldPropertyGet(445)", "Delete SimpleName: field(446)", "Delete ClassInstanceCreation(447)", "Delete ReturnStatement(448)", "Delete Block(449)", "Delete IfStatement(450)", "Delete Block(451)", "Delete IfStatement(452)", "Delete Block(453)", "Delete IfStatement(454)", "Delete SimpleName: get(455)", "Delete ReturnStatement(456)", "Delete Block(457)", "Delete MethodDeclaration(458)", "Delete TagElement: @inheritDoc(459)", "Delete TagElement(460)", "Delete Javadoc(461)", "Delete Modifier: public(462)", "Delete SimpleName: JexlPropertySet(463)", "Delete SimpleType: JexlPropertySet(464)", "Delete SimpleName: getPropertySet(465)", "Delete Modifier: final(466)", "Delete SimpleName: Object(467)", "Delete SimpleType: Object(468)", "Delete SimpleName: obj(469)", "Delete SingleVariableDeclaration(470)", "Delete Modifier: final(471)", "Delete SimpleName: Object(472)", "Delete SimpleType: Object(473)", "Delete SimpleName: identifier(474)", "Delete SingleVariableDeclaration(475)", "Delete SimpleName: Object(476)", "Delete SimpleType: Object(477)", "Delete SimpleName: arg(478)", "Delete SingleVariableDeclaration(479)", "Delete SimpleName: JexlInfo(480)", "Delete SimpleType: JexlInfo(481)", "Delete SimpleName: info(482)", "Delete SingleVariableDeclaration(483)", "Delete SimpleName: JexlPropertySet(484)", "Delete SimpleType: JexlPropertySet(485)", "Delete SimpleName: set(486)", "Delete SimpleName: getSetExecutor(487)", "Delete SimpleName: obj(488)", "Delete SimpleName: identifier(489)", "Delete SimpleName: arg(490)", "Delete MethodInvocation(491)", "Delete VariableDeclarationFragment(492)", "Delete VariableDeclarationStatement(493)", "Delete SimpleName: set(494)", "Delete NullLiteral(495)", "Delete InfixExpression: ==(496)", "Delete SimpleName: obj(497)", "Delete NullLiteral(498)", "Delete InfixExpression: !=(499)", "Delete InfixExpression: &&(500)", "Delete SimpleName: identifier(501)", "Delete NullLiteral(502)", "Delete InfixExpression: !=(503)", "Delete InfixExpression: &&(504)", "Delete SimpleName: Field(505)", "Delete SimpleType: Field(506)", "Delete SimpleName: field(507)", "Delete SimpleName: getField(508)", "Delete SimpleName: obj(509)", "Delete SimpleName: identifier(510)", "Delete SimpleName: toString(511)", "Delete MethodInvocation(512)", "Delete SimpleName: info(513)", "Delete MethodInvocation(514)", "Delete VariableDeclarationFragment(515)", "Delete VariableDeclarationStatement(516)", "Delete SimpleName: field(517)", "Delete NullLiteral(518)", "Delete InfixExpression: !=(519)", "Delete SimpleName: Modifier(520)", "Delete SimpleName: isFinal(521)", "Delete SimpleName: field(522)", "Delete SimpleName: getModifiers(523)", "Delete MethodInvocation(524)", "Delete MethodInvocation(525)", "Delete PrefixExpression: !(526)", "Delete InfixExpression: &&(527)", "Delete SimpleName: arg(528)", "Delete NullLiteral(529)", "Delete InfixExpression: ==(530)", "Delete SimpleName: MethodKey(531)", "Delete SimpleName: isInvocationConvertible(532)", "Delete SimpleName: field(533)", "Delete SimpleName: getType(534)", "Delete MethodInvocation(535)", "Delete SimpleName: arg(536)", "Delete SimpleName: getClass(537)", "Delete MethodInvocation(538)", "Delete BooleanLiteral: false(539)", "Delete MethodInvocation(540)", "Delete InfixExpression: ||(541)", "Delete ParenthesizedExpression(542)", "Delete InfixExpression: &&(543)", "Delete SimpleName: FieldPropertySet(544)", "Delete SimpleType: FieldPropertySet(545)", "Delete SimpleName: field(546)", "Delete ClassInstanceCreation(547)", "Delete ReturnStatement(548)", "Delete Block(549)", "Delete IfStatement(550)", "Delete Block(551)", "Delete IfStatement(552)", "Delete SimpleName: set(553)", "Delete ReturnStatement(554)", "Delete Block(555)", "Delete MethodDeclaration(556)", "Delete TextElement: Returns a class field.(557)", "Delete TagElement(558)", "Delete SimpleName: obj(559)", "Delete TextElement:  the object(560)", "Delete TagElement: @param(561)", "Delete SimpleName: name(562)", "Delete TextElement:  the field name(563)", "Delete TagElement: @param(564)", "Delete SimpleName: info(565)", "Delete TextElement:  debug info(566)", "Delete TagElement: @param(567)", "Delete TextElement:  a (568)", "Delete SimpleName: Field(569)", "Delete TagElement: @link(570)", "Delete TextElement: .(571)", "Delete TagElement: @return(572)", "Delete Javadoc(573)", "Delete Modifier: protected(574)", "Delete SimpleName: Field(575)", "Delete SimpleType: Field(576)", "Delete SimpleName: getField(577)", "Delete SimpleName: Object(578)", "Delete SimpleType: Object(579)", "Delete SimpleName: obj(580)", "Delete SingleVariableDeclaration(581)", "Delete SimpleName: String(582)", "Delete SimpleType: String(583)", "Delete SimpleName: name(584)", "Delete SingleVariableDeclaration(585)", "Delete SimpleName: JexlInfo(586)", "Delete SimpleType: JexlInfo(587)", "Delete SimpleName: info(588)", "Delete SingleVariableDeclaration(589)", "Delete Modifier: final(590)", "Delete SimpleName: Class(591)", "Delete SimpleType: Class(592)", "Delete WildcardType: ?(593)", "Delete ParameterizedType: Class<?>(594)", "Delete SimpleName: clazz(595)", "Delete SimpleName: obj(596)", "Delete SimpleName: Class(597)", "Delete SimpleType: Class(598)", "Delete WildcardType: ?(599)", "Delete ParameterizedType: Class<?>(600)", "Delete InstanceofExpression(601)", "Delete SimpleName: Class(602)", "Delete SimpleType: Class(603)", "Delete WildcardType: ?(604)", "Delete ParameterizedType: Class<?>(605)", "Delete SimpleName: obj(606)", "Delete CastExpression(607)", "Delete SimpleName: obj(608)", "Delete SimpleName: getClass(609)", "Delete MethodInvocation(610)", "Delete ConditionalExpression(611)", "Delete VariableDeclarationFragment(612)", "Delete VariableDeclarationStatement(613)", "Delete SimpleName: getField(614)", "Delete SimpleName: clazz(615)", "Delete SimpleName: name(616)", "Delete MethodInvocation(617)", "Delete ReturnStatement(618)", "Delete Block(619)", "Delete MethodDeclaration(620)", "Delete TextElement: Attempts to find an indexed-property getter in an object.(621)", "Delete TextElement: The code attempts to find the list of methods getXXX() and setXXX().(622)", "Delete TextElement: Note that this is not equivalent to the strict bean definition of indexed properties; the type of the key(623)", "Delete TextElement: is not necessarily an int and the set/get arrays are not resolved.(624)", "Delete TagElement(625)", "Delete SimpleName: object(626)", "Delete TextElement:  the object(627)", "Delete TagElement: @param(628)", "Delete SimpleName: name(629)", "Delete TextElement:  the container name(630)", "Delete TagElement: @param(631)", "Delete TextElement:  a JexlPropertyGet is successfull, null otherwise(632)", "Delete TagElement: @return(633)", "Delete Javadoc(634)", "Delete Modifier: protected(635)", "Delete SimpleName: JexlPropertyGet(636)", "Delete SimpleType: JexlPropertyGet(637)", "Delete SimpleName: getIndexedGet(638)", "Delete SimpleName: Object(639)", "Delete SimpleType: Object(640)", "Delete SimpleName: object(641)", "Delete SingleVariableDeclaration(642)", "Delete SimpleName: String(643)", "Delete SimpleType: String(644)", "Delete SimpleName: name(645)", "Delete SingleVariableDeclaration(646)", "Delete SimpleName: object(647)", "Delete NullLiteral(648)", "Delete InfixExpression: !=(649)", "Delete SimpleName: name(650)", "Delete NullLiteral(651)", "Delete InfixExpression: !=(652)", "Delete InfixExpression: &&(653)", "Delete SimpleName: String(654)", "Delete SimpleType: String(655)", "Delete SimpleName: base(656)", "Delete SimpleName: name(657)", "Delete SimpleName: substring(658)", "Delete NumberLiteral: 0(659)", "Delete NumberLiteral: 1(660)", "Delete MethodInvocation(661)", "Delete SimpleName: toUpperCase(662)", "Delete MethodInvocation(663)", "Delete SimpleName: name(664)", "Delete SimpleName: substring(665)", "Delete NumberLiteral: 1(666)", "Delete MethodInvocation(667)", "Delete InfixExpression: +(668)", "Delete VariableDeclarationFragment(669)", "Delete VariableDeclarationStatement(670)", "Delete Modifier: final(671)", "Delete SimpleName: String(672)", "Delete SimpleType: String(673)", "Delete SimpleName: container(674)", "Delete SimpleName: name(675)", "Delete VariableDeclarationFragment(676)", "Delete VariableDeclarationStatement(677)", "Delete Modifier: final(678)", "Delete SimpleName: Class(679)", "Delete SimpleType: Class(680)", "Delete WildcardType: ?(681)", "Delete ParameterizedType: Class<?>(682)", "Delete SimpleName: clazz(683)", "Delete SimpleName: object(684)", "Delete SimpleName: getClass(685)", "Delete MethodInvocation(686)", "Delete VariableDeclarationFragment(687)", "Delete VariableDeclarationStatement(688)", "Delete Modifier: final(689)", "Delete SimpleName: Method(690)", "Delete SimpleType: Method(691)", "Delete Dimension(692)", "Delete ArrayType: Method[](693)", "Delete SimpleName: getters(694)", "Delete SimpleName: getMethods(695)", "Delete SimpleName: object(696)", "Delete SimpleName: getClass(697)", "Delete MethodInvocation(698)", "Delete StringLiteral: \"get\"(699)", "Delete SimpleName: base(700)", "Delete InfixExpression: +(701)", "Delete MethodInvocation(702)", "Delete VariableDeclarationFragment(703)", "Delete VariableDeclarationStatement(704)", "Delete Modifier: final(705)", "Delete SimpleName: Method(706)", "Delete SimpleType: Method(707)", "Delete Dimension(708)", "Delete ArrayType: Method[](709)", "Delete SimpleName: setters(710)", "Delete SimpleName: getMethods(711)", "Delete SimpleName: object(712)", "Delete SimpleName: getClass(713)", "Delete MethodInvocation(714)", "Delete StringLiteral: \"set\"(715)", "Delete SimpleName: base(716)", "Delete InfixExpression: +(717)", "Delete MethodInvocation(718)", "Delete VariableDeclarationFragment(719)", "Delete VariableDeclarationStatement(720)", "Delete SimpleName: getters(721)", "Delete NullLiteral(722)", "Delete InfixExpression: !=(723)", "Delete SimpleName: IndexedType(724)", "Delete SimpleType: IndexedType(725)", "Delete SimpleName: container(726)", "Delete SimpleName: clazz(727)", "Delete SimpleName: getters(728)", "Delete SimpleName: setters(729)", "Delete ClassInstanceCreation(730)", "Delete ReturnStatement(731)", "Delete Block(732)", "Delete IfStatement(733)", "Delete Block(734)", "Delete IfStatement(735)", "Delete NullLiteral(736)", "Delete ReturnStatement(737)", "Delete Block(738)", "Delete MethodDeclaration(739)", "Delete TextElement: Abstract an indexed property container.(740)", "Delete TextElement: This stores the container name and owning class as well as the list of available getter and setter methods.(741)", "Delete TextElement: It implements JexlPropertyGet since such a container can only be accessed from its owning instance (not set).(742)", "Delete TagElement(743)", "Delete TextElement:  2.1(744)", "Delete TagElement: @since(745)", "Delete Javadoc(746)", "Delete Modifier: private(747)", "Delete Modifier: static(748)", "Delete Modifier: final(749)", "Delete SimpleName: IndexedType(750)", "Delete SimpleName: JexlPropertyGet(751)", "Delete SimpleType: JexlPropertyGet(752)", "Delete TextElement: The container name. (753)", "Delete TagElement(754)", "Delete Javadoc(755)", "Delete Modifier: private(756)", "Delete Modifier: final(757)", "Delete SimpleName: String(758)", "Delete SimpleType: String(759)", "Delete SimpleName: container(760)", "Delete VariableDeclarationFragment(761)", "Delete FieldDeclaration(762)", "Delete TextElement: The owning class. (763)", "Delete TagElement(764)", "Delete Javadoc(765)", "Delete Modifier: private(766)", "Delete Modifier: final(767)", "Delete SimpleName: Class(768)", "Delete SimpleType: Class(769)", "Delete WildcardType: ?(770)", "Delete ParameterizedType: Class<?>(771)", "Delete SimpleName: clazz(772)", "Delete VariableDeclarationFragment(773)", "Delete FieldDeclaration(774)", "Delete TextElement: The array of getter methods. (775)", "Delete TagElement(776)", "Delete Javadoc(777)", "Delete Modifier: private(778)", "Delete Modifier: final(779)", "Delete SimpleName: Method(780)", "Delete SimpleType: Method(781)", "Delete Dimension(782)", "Delete ArrayType: Method[](783)", "Delete SimpleName: getters(784)", "Delete VariableDeclarationFragment(785)", "Delete FieldDeclaration(786)", "Delete TextElement: The array of setter methods. (787)", "Delete TagElement(788)", "Delete Javadoc(789)", "Delete Modifier: private(790)", "Delete Modifier: final(791)", "Delete SimpleName: Method(792)", "Delete SimpleType: Method(793)", "Delete Dimension(794)", "Delete ArrayType: Method[](795)", "Delete SimpleName: setters(796)", "Delete VariableDeclarationFragment(797)", "Delete FieldDeclaration(798)", "Delete TextElement: Creates a new indexed type.(799)", "Delete TagElement(800)", "Delete SimpleName: name(801)", "Delete TextElement:  the container name(802)", "Delete TagElement: @param(803)", "Delete SimpleName: c(804)", "Delete TextElement:  the owning class(805)", "Delete TagElement: @param(806)", "Delete SimpleName: gets(807)", "Delete TextElement:  the array of getter methods(808)", "Delete TagElement: @param(809)", "Delete SimpleName: sets(810)", "Delete TextElement:  the array of setter methods(811)", "Delete TagElement: @param(812)", "Delete Javadoc(813)", "Delete SimpleName: IndexedType(814)", "Delete SimpleName: String(815)", "Delete SimpleType: String(816)", "Delete SimpleName: name(817)", "Delete SingleVariableDeclaration(818)", "Delete SimpleName: Class(819)", "Delete SimpleType: Class(820)", "Delete WildcardType: ?(821)", "Delete ParameterizedType: Class<?>(822)", "Delete SimpleName: c(823)", "Delete SingleVariableDeclaration(824)", "Delete SimpleName: Method(825)", "Delete SimpleType: Method(826)", "Delete Dimension(827)", "Delete ArrayType: Method[](828)", "Delete SimpleName: gets(829)", "Delete SingleVariableDeclaration(830)", "Delete SimpleName: Method(831)", "Delete SimpleType: Method(832)", "Delete Dimension(833)", "Delete ArrayType: Method[](834)", "Delete SimpleName: sets(835)", "Delete SingleVariableDeclaration(836)", "Delete ThisExpression(837)", "Delete SimpleName: container(838)", "Delete FieldAccess(839)", "Delete SimpleName: name(840)", "Delete Assignment: =(841)", "Delete ExpressionStatement(842)", "Delete ThisExpression(843)", "Delete SimpleName: clazz(844)", "Delete FieldAccess(845)", "Delete SimpleName: c(846)", "Delete Assignment: =(847)", "Delete ExpressionStatement(848)", "Delete ThisExpression(849)", "Delete SimpleName: getters(850)", "Delete FieldAccess(851)", "Delete SimpleName: gets(852)", "Delete Assignment: =(853)", "Delete ExpressionStatement(854)", "Delete ThisExpression(855)", "Delete SimpleName: setters(856)", "Delete FieldAccess(857)", "Delete SimpleName: sets(858)", "Delete Assignment: =(859)", "Delete ExpressionStatement(860)", "Delete Block(861)", "Delete MethodDeclaration(862)", "Delete TagElement: @inheritDoc(863)", "Delete TagElement(864)", "Delete Javadoc(865)", "Delete Modifier: public(866)", "Delete SimpleName: Object(867)", "Delete SimpleType: Object(868)", "Delete SimpleName: invoke(869)", "Delete SimpleName: Object(870)", "Delete SimpleType: Object(871)", "Delete SimpleName: obj(872)", "Delete SingleVariableDeclaration(873)", "Delete SimpleName: Exception(874)", "Delete SimpleType: Exception(875)", "Delete SimpleName: obj(876)", "Delete NullLiteral(877)", "Delete InfixExpression: !=(878)", "Delete SimpleName: clazz(879)", "Delete SimpleName: equals(880)", "Delete SimpleName: obj(881)", "Delete SimpleName: getClass(882)", "Delete MethodInvocation(883)", "Delete MethodInvocation(884)", "Delete InfixExpression: &&(885)", "Delete SimpleName: IndexedContainer(886)", "Delete SimpleType: IndexedContainer(887)", "Delete ThisExpression(888)", "Delete SimpleName: obj(889)", "Delete ClassInstanceCreation(890)", "Delete ReturnStatement(891)", "Delete Block(892)", "Delete SimpleName: IntrospectionException(893)", "Delete SimpleType: IntrospectionException(894)", "Delete StringLiteral: \"property resolution error\"(895)", "Delete ClassInstanceCreation(896)", "Delete ThrowStatement(897)", "Delete Block(898)", "Delete IfStatement(899)", "Delete Block(900)", "Delete MethodDeclaration(901)", "Delete TagElement: @inheritDoc(902)", "Delete TagElement(903)", "Delete Javadoc(904)", "Delete Modifier: public(905)", "Delete SimpleName: Object(906)", "Delete SimpleType: Object(907)", "Delete SimpleName: tryInvoke(908)", "Delete SimpleName: Object(909)", "Delete SimpleType: Object(910)", "Delete SimpleName: obj(911)", "Delete SingleVariableDeclaration(912)", "Delete SimpleName: Object(913)", "Delete SimpleType: Object(914)", "Delete SimpleName: key(915)", "Delete SingleVariableDeclaration(916)", "Delete SimpleName: obj(917)", "Delete NullLiteral(918)", "Delete InfixExpression: !=(919)", "Delete SimpleName: key(920)", "Delete NullLiteral(921)", "Delete InfixExpression: !=(922)", "Delete InfixExpression: &&(923)", "Delete SimpleName: clazz(924)", "Delete SimpleName: equals(925)", "Delete SimpleName: obj(926)", "Delete SimpleName: getClass(927)", "Delete MethodInvocation(928)", "Delete MethodInvocation(929)", "Delete InfixExpression: &&(930)", "Delete SimpleName: container(931)", "Delete SimpleName: equals(932)", "Delete SimpleName: key(933)", "Delete SimpleName: toString(934)", "Delete MethodInvocation(935)", "Delete MethodInvocation(936)", "Delete InfixExpression: &&(937)", "Delete SimpleName: IndexedContainer(938)", "Delete SimpleType: IndexedContainer(939)", "Delete ThisExpression(940)", "Delete SimpleName: obj(941)", "Delete ClassInstanceCreation(942)", "Delete ReturnStatement(943)", "Delete Block(944)", "Delete SimpleName: TRY_FAILED(945)", "Delete ReturnStatement(946)", "Delete Block(947)", "Delete IfStatement(948)", "Delete Block(949)", "Delete MethodDeclaration(950)", "Delete TagElement: @inheritDoc(951)", "Delete TagElement(952)", "Delete Javadoc(953)", "Delete Modifier: public(954)", "Delete PrimitiveType: boolean(955)", "Delete SimpleName: tryFailed(956)", "Delete SimpleName: Object(957)", "Delete SimpleType: Object(958)", "Delete SimpleName: rval(959)", "Delete SingleVariableDeclaration(960)", "Delete SimpleName: rval(961)", "Delete SimpleName: TRY_FAILED(962)", "Delete InfixExpression: ==(963)", "Delete ReturnStatement(964)", "Delete Block(965)", "Delete MethodDeclaration(966)", "Delete TagElement: @inheritDoc(967)", "Delete TagElement(968)", "Delete Javadoc(969)", "Delete Modifier: public(970)", "Delete PrimitiveType: boolean(971)", "Delete SimpleName: isCacheable(972)", "Delete BooleanLiteral: true(973)", "Delete ReturnStatement(974)", "Delete Block(975)", "Delete MethodDeclaration(976)", "Delete TextElement: Gets the value of a property from a container.(977)", "Delete TagElement(978)", "Delete SimpleName: object(979)", "Delete TextElement:  the instance owning the container (not null)(980)", "Delete TagElement: @param(981)", "Delete SimpleName: key(982)", "Delete TextElement:  the property key (not null)(983)", "Delete TagElement: @param(984)", "Delete TextElement:  the property value(985)", "Delete TagElement: @return(986)", "Delete SimpleName: Exception(987)", "Delete TextElement:  if invocation failed; IntrospectionException if a property getter could not be found(988)", "Delete TagElement: @throws(989)", "Delete Javadoc(990)", "Delete Modifier: private(991)", "Delete SimpleName: Object(992)", "Delete SimpleType: Object(993)", "Delete SimpleName: invokeGet(994)", "Delete SimpleName: Object(995)", "Delete SimpleType: Object(996)", "Delete SimpleName: object(997)", "Delete SingleVariableDeclaration(998)", "Delete SimpleName: Object(999)", "Delete SimpleType: Object(1000)", "Delete SimpleName: key(1001)", "Delete SingleVariableDeclaration(1002)", "Delete SimpleName: Exception(1003)", "Delete SimpleType: Exception(1004)", "Delete SimpleName: getters(1005)", "Delete NullLiteral(1006)", "Delete InfixExpression: !=(1007)", "Delete Modifier: final(1008)", "Delete SimpleName: Object(1009)", "Delete SimpleType: Object(1010)", "Delete Dimension(1011)", "Delete ArrayType: Object[](1012)", "Delete SimpleName: args(1013)", "Delete SimpleName: key(1014)", "Delete ArrayInitializer(1015)", "Delete VariableDeclarationFragment(1016)", "Delete VariableDeclarationStatement(1017)", "Delete Modifier: final(1018)", "Delete SimpleName: Method(1019)", "Delete SimpleType: Method(1020)", "Delete SimpleName: jm(1021)", "Delete VariableDeclarationFragment(1022)", "Delete VariableDeclarationStatement(1023)", "Delete QualifiedName: getters.length(1024)", "Delete NumberLiteral: 1(1025)", "Delete InfixExpression: ==(1026)", "Delete SimpleName: jm(1027)", "Delete SimpleName: getters(1028)", "Delete NumberLiteral: 0(1029)", "Delete ArrayAccess(1030)", "Delete Assignment: =(1031)", "Delete ExpressionStatement(1032)", "Delete Block(1033)", "Delete SimpleName: jm(1034)", "Delete SimpleName: MethodKey(1035)", "Delete SimpleType: MethodKey(1036)", "Delete SimpleName: getters(1037)", "Delete NumberLiteral: 0(1038)", "Delete ArrayAccess(1039)", "Delete SimpleName: getName(1040)", "Delete MethodInvocation(1041)", "Delete SimpleName: args(1042)", "Delete ClassInstanceCreation(1043)", "Delete SimpleName: getMostSpecificMethod(1044)", "Delete SimpleName: Arrays(1045)", "Delete SimpleName: asList(1046)", "Delete SimpleName: getters(1047)", "Delete MethodInvocation(1048)", "Delete MethodInvocation(1049)", "Delete Assignment: =(1050)", "Delete ExpressionStatement(1051)", "Delete Block(1052)", "Delete IfStatement(1053)", "Delete SimpleName: jm(1054)", "Delete NullLiteral(1055)", "Delete InfixExpression: !=(1056)", "Delete SimpleName: jm(1057)", "Delete SimpleName: invoke(1058)", "Delete SimpleName: object(1059)", "Delete SimpleName: args(1060)", "Delete MethodInvocation(1061)", "Delete ReturnStatement(1062)", "Delete Block(1063)", "Delete IfStatement(1064)", "Delete Block(1065)", "Delete IfStatement(1066)", "Delete SimpleName: IntrospectionException(1067)", "Delete SimpleType: IntrospectionException(1068)", "Delete StringLiteral: \"property get error: \"(1069)", "Delete SimpleName: object(1070)", "Delete SimpleName: getClass(1071)", "Delete MethodInvocation(1072)", "Delete SimpleName: toString(1073)", "Delete MethodInvocation(1074)", "Delete StringLiteral: \"@\"(1075)", "Delete SimpleName: key(1076)", "Delete SimpleName: toString(1077)", "Delete MethodInvocation(1078)", "Delete InfixExpression: +(1079)", "Delete ClassInstanceCreation(1080)", "Delete ThrowStatement(1081)", "Delete Block(1082)", "Delete MethodDeclaration(1083)", "Delete TextElement: Sets the value of a property in a container.(1084)", "Delete TagElement(1085)", "Delete SimpleName: object(1086)", "Delete TextElement:  the instance owning the container (not null)(1087)", "Delete TagElement: @param(1088)", "Delete SimpleName: key(1089)", "Delete TextElement:  the property key (not null)(1090)", "Delete TagElement: @param(1091)", "Delete SimpleName: value(1092)", "Delete TextElement:  the property value (not null)(1093)", "Delete TagElement: @param(1094)", "Delete TextElement:  the result of the method invocation (frequently null)(1095)", "Delete TagElement: @return(1096)", "Delete SimpleName: Exception(1097)", "Delete TextElement:  if invocation failed; IntrospectionException if a property setter could not be found(1098)", "Delete TagElement: @throws(1099)", "Delete Javadoc(1100)", "Delete Modifier: private(1101)", "Delete SimpleName: Object(1102)", "Delete SimpleType: Object(1103)", "Delete SimpleName: invokeSet(1104)", "Delete SimpleName: Object(1105)", "Delete SimpleType: Object(1106)", "Delete SimpleName: object(1107)", "Delete SingleVariableDeclaration(1108)", "Delete SimpleName: Object(1109)", "Delete SimpleType: Object(1110)", "Delete SimpleName: key(1111)", "Delete SingleVariableDeclaration(1112)", "Delete SimpleName: Object(1113)", "Delete SimpleType: Object(1114)", "Delete SimpleName: value(1115)", "Delete SingleVariableDeclaration(1116)", "Delete SimpleName: Exception(1117)", "Delete SimpleType: Exception(1118)", "Delete SimpleName: setters(1119)", "Delete NullLiteral(1120)", "Delete InfixExpression: !=(1121)", "Delete Modifier: final(1122)", "Delete SimpleName: Object(1123)", "Delete SimpleType: Object(1124)", "Delete Dimension(1125)", "Delete ArrayType: Object[](1126)", "Delete SimpleName: args(1127)", "Delete SimpleName: key(1128)", "Delete SimpleName: value(1129)", "Delete ArrayInitializer(1130)", "Delete VariableDeclarationFragment(1131)", "Delete VariableDeclarationStatement(1132)", "Delete Modifier: final(1133)", "Delete SimpleName: Method(1134)", "Delete SimpleType: Method(1135)", "Delete SimpleName: jm(1136)", "Delete VariableDeclarationFragment(1137)", "Delete VariableDeclarationStatement(1138)", "Delete QualifiedName: setters.length(1139)", "Delete NumberLiteral: 1(1140)", "Delete InfixExpression: ==(1141)", "Delete SimpleName: jm(1142)", "Delete SimpleName: setters(1143)", "Delete NumberLiteral: 0(1144)", "Delete ArrayAccess(1145)", "Delete Assignment: =(1146)", "Delete ExpressionStatement(1147)", "Delete Block(1148)", "Delete SimpleName: jm(1149)", "Delete SimpleName: MethodKey(1150)", "Delete SimpleType: MethodKey(1151)", "Delete SimpleName: setters(1152)", "Delete NumberLiteral: 0(1153)", "Delete ArrayAccess(1154)", "Delete SimpleName: getName(1155)", "Delete MethodInvocation(1156)", "Delete SimpleName: args(1157)", "Delete ClassInstanceCreation(1158)", "Delete SimpleName: getMostSpecificMethod(1159)", "Delete SimpleName: Arrays(1160)", "Delete SimpleName: asList(1161)", "Delete SimpleName: setters(1162)", "Delete MethodInvocation(1163)", "Delete MethodInvocation(1164)", "Delete Assignment: =(1165)", "Delete ExpressionStatement(1166)", "Delete Block(1167)", "Delete IfStatement(1168)", "Delete SimpleName: jm(1169)", "Delete NullLiteral(1170)", "Delete InfixExpression: !=(1171)", "Delete SimpleName: jm(1172)", "Delete SimpleName: invoke(1173)", "Delete SimpleName: object(1174)", "Delete SimpleName: args(1175)", "Delete MethodInvocation(1176)", "Delete ReturnStatement(1177)", "Delete Block(1178)", "Delete IfStatement(1179)", "Delete Block(1180)", "Delete IfStatement(1181)", "Delete SimpleName: IntrospectionException(1182)", "Delete SimpleType: IntrospectionException(1183)", "Delete StringLiteral: \"property set error: \"(1184)", "Delete SimpleName: object(1185)", "Delete SimpleName: getClass(1186)", "Delete MethodInvocation(1187)", "Delete SimpleName: toString(1188)", "Delete MethodInvocation(1189)", "Delete StringLiteral: \"@\"(1190)", "Delete SimpleName: key(1191)", "Delete SimpleName: toString(1192)", "Delete MethodInvocation(1193)", "Delete InfixExpression: +(1194)", "Delete ClassInstanceCreation(1195)", "Delete ThrowStatement(1196)", "Delete Block(1197)", "Delete MethodDeclaration(1198)", "Delete TypeDeclaration: class(1199)", "Delete TextElement: A generic indexed property container, exposes get(key) and set(key, value) and solves method call dynamically(1200)", "Delete TextElement: based on arguments.(1201)", "Delete TagElement(1202)", "Delete TextElement:  2.1(1203)", "Delete TagElement: @since(1204)", "Delete Javadoc(1205)", "Delete Modifier: public(1206)", "Delete Modifier: static(1207)", "Delete Modifier: final(1208)", "Delete SimpleName: IndexedContainer(1209)", "Delete TextElement: The instance owning the container. (1210)", "Delete TagElement(1211)", "Delete Javadoc(1212)", "Delete Modifier: private(1213)", "Delete Modifier: final(1214)", "Delete SimpleName: Object(1215)", "Delete SimpleType: Object(1216)", "Delete SimpleName: object(1217)", "Delete VariableDeclarationFragment(1218)", "Delete FieldDeclaration(1219)", "Delete TextElement: The container type instance. (1220)", "Delete TagElement(1221)", "Delete Javadoc(1222)", "Delete Modifier: private(1223)", "Delete Modifier: final(1224)", "Delete SimpleName: IndexedType(1225)", "Delete SimpleType: IndexedType(1226)", "Delete SimpleName: type(1227)", "Delete VariableDeclarationFragment(1228)", "Delete FieldDeclaration(1229)", "Delete TextElement: Creates a new duck container.(1230)", "Delete TagElement(1231)", "Delete SimpleName: theType(1232)", "Delete TextElement:  the container type(1233)", "Delete TagElement: @param(1234)", "Delete SimpleName: theObject(1235)", "Delete TextElement:  the instance owning the container(1236)", "Delete TagElement: @param(1237)", "Delete Javadoc(1238)", "Delete Modifier: private(1239)", "Delete SimpleName: IndexedContainer(1240)", "Delete SimpleName: IndexedType(1241)", "Delete SimpleType: IndexedType(1242)", "Delete SimpleName: theType(1243)", "Delete SingleVariableDeclaration(1244)", "Delete SimpleName: Object(1245)", "Delete SimpleType: Object(1246)", "Delete SimpleName: theObject(1247)", "Delete SingleVariableDeclaration(1248)", "Delete ThisExpression(1249)", "Delete SimpleName: type(1250)", "Delete FieldAccess(1251)", "Delete SimpleName: theType(1252)", "Delete Assignment: =(1253)", "Delete ExpressionStatement(1254)", "Delete ThisExpression(1255)", "Delete SimpleName: object(1256)", "Delete FieldAccess(1257)", "Delete SimpleName: theObject(1258)", "Delete Assignment: =(1259)", "Delete ExpressionStatement(1260)", "Delete Block(1261)", "Delete MethodDeclaration(1262)", "Delete TextElement: Gets a property from a container.(1263)", "Delete TagElement(1264)", "Delete SimpleName: key(1265)", "Delete TextElement:  the property key(1266)", "Delete TagElement: @param(1267)", "Delete TextElement:  the property value(1268)", "Delete TagElement: @return(1269)", "Delete SimpleName: Exception(1270)", "Delete TextElement:  if inner invocation fails(1271)", "Delete TagElement: @throws(1272)", "Delete Javadoc(1273)", "Delete Modifier: public(1274)", "Delete SimpleName: Object(1275)", "Delete SimpleType: Object(1276)", "Delete SimpleName: get(1277)", "Delete SimpleName: Object(1278)", "Delete SimpleType: Object(1279)", "Delete SimpleName: key(1280)", "Delete SingleVariableDeclaration(1281)", "Delete SimpleName: Exception(1282)", "Delete SimpleType: Exception(1283)", "Delete SimpleName: type(1284)", "Delete SimpleName: invokeGet(1285)", "Delete SimpleName: object(1286)", "Delete SimpleName: key(1287)", "Delete MethodInvocation(1288)", "Delete ReturnStatement(1289)", "Delete Block(1290)", "Delete MethodDeclaration(1291)", "Delete TextElement: Sets a property in a container.(1292)", "Delete TagElement(1293)", "Delete SimpleName: key(1294)", "Delete TextElement:  the property key(1295)", "Delete TagElement: @param(1296)", "Delete SimpleName: value(1297)", "Delete TextElement:  the property value(1298)", "Delete TagElement: @param(1299)", "Delete TextElement:  the invocation result (frequently null)(1300)", "Delete TagElement: @return(1301)", "Delete SimpleName: Exception(1302)", "Delete TextElement:  if inner invocation fails(1303)", "Delete TagElement: @throws(1304)", "Delete Javadoc(1305)", "Delete Modifier: public(1306)", "Delete SimpleName: Object(1307)", "Delete SimpleType: Object(1308)", "Delete SimpleName: set(1309)", "Delete SimpleName: Object(1310)", "Delete SimpleType: Object(1311)", "Delete SimpleName: key(1312)", "Delete SingleVariableDeclaration(1313)", "Delete SimpleName: Object(1314)", "Delete SimpleType: Object(1315)", "Delete SimpleName: value(1316)", "Delete SingleVariableDeclaration(1317)", "Delete SimpleName: Exception(1318)", "Delete SimpleType: Exception(1319)", "Delete SimpleName: type(1320)", "Delete SimpleName: invokeSet(1321)", "Delete SimpleName: object(1322)", "Delete SimpleName: key(1323)", "Delete SimpleName: value(1324)", "Delete MethodInvocation(1325)", "Delete ReturnStatement(1326)", "Delete Block(1327)", "Delete MethodDeclaration(1328)", "Delete TypeDeclaration: class(1329)", "Delete TextElement: A JexlMethod that wraps constructor.(1330)", "Delete TagElement(1331)", "Delete TextElement:  2.1(1332)", "Delete TagElement: @since(1333)", "Delete Javadoc(1334)", "Delete Modifier: private(1335)", "Delete Modifier: final(1336)", "Delete SimpleName: ConstructorMethod(1337)", "Delete SimpleName: JexlMethod(1338)", "Delete SimpleType: JexlMethod(1339)", "Delete TextElement: The wrapped constructor. (1340)", "Delete TagElement(1341)", "Delete Javadoc(1342)", "Delete Modifier: private(1343)", "Delete Modifier: final(1344)", "Delete SimpleName: Constructor(1345)", "Delete SimpleType: Constructor(1346)", "Delete WildcardType: ?(1347)", "Delete ParameterizedType: Constructor<?>(1348)", "Delete SimpleName: ctor(1349)", "Delete VariableDeclarationFragment(1350)", "Delete FieldDeclaration(1351)", "Delete TextElement: Creates a constructor method.(1352)", "Delete TagElement(1353)", "Delete SimpleName: theCtor(1354)", "Delete TextElement:  the constructor to wrap(1355)", "Delete TagElement: @param(1356)", "Delete Javadoc(1357)", "Delete Modifier: private(1358)", "Delete SimpleName: ConstructorMethod(1359)", "Delete SimpleName: Constructor(1360)", "Delete SimpleType: Constructor(1361)", "Delete WildcardType: ?(1362)", "Delete ParameterizedType: Constructor<?>(1363)", "Delete SimpleName: theCtor(1364)", "Delete SingleVariableDeclaration(1365)", "Delete ThisExpression(1366)", "Delete SimpleName: ctor(1367)", "Delete FieldAccess(1368)", "Delete SimpleName: theCtor(1369)", "Delete Assignment: =(1370)", "Delete ExpressionStatement(1371)", "Delete Block(1372)", "Delete MethodDeclaration(1373)", "Delete TagElement: @inheritDoc(1374)", "Delete TagElement(1375)", "Delete Javadoc(1376)", "Delete Modifier: public(1377)", "Delete SimpleName: Object(1378)", "Delete SimpleType: Object(1379)", "Delete SimpleName: invoke(1380)", "Delete SimpleName: Object(1381)", "Delete SimpleType: Object(1382)", "Delete SimpleName: obj(1383)", "Delete SingleVariableDeclaration(1384)", "Delete SimpleName: Object(1385)", "Delete SimpleType: Object(1386)", "Delete Dimension(1387)", "Delete ArrayType: Object[](1388)", "Delete SimpleName: params(1389)", "Delete SingleVariableDeclaration(1390)", "Delete SimpleName: Exception(1391)", "Delete SimpleType: Exception(1392)", "Delete SimpleName: Class(1393)", "Delete SimpleType: Class(1394)", "Delete WildcardType: ?(1395)", "Delete ParameterizedType: Class<?>(1396)", "Delete SimpleName: clazz(1397)", "Delete NullLiteral(1398)", "Delete VariableDeclarationFragment(1399)", "Delete VariableDeclarationStatement(1400)", "Delete SimpleName: obj(1401)", "Delete SimpleName: Class(1402)", "Delete SimpleType: Class(1403)", "Delete WildcardType: ?(1404)", "Delete ParameterizedType: Class<?>(1405)", "Delete InstanceofExpression(1406)", "Delete SimpleName: clazz(1407)", "Delete SimpleName: Class(1408)", "Delete SimpleType: Class(1409)", "Delete WildcardType: ?(1410)", "Delete ParameterizedType: Class<?>(1411)", "Delete SimpleName: obj(1412)", "Delete CastExpression(1413)", "Delete Assignment: =(1414)", "Delete ExpressionStatement(1415)", "Delete Block(1416)", "Delete SimpleName: obj(1417)", "Delete NullLiteral(1418)", "Delete InfixExpression: !=(1419)", "Delete SimpleName: clazz(1420)", "Delete SimpleName: getClassByName(1421)", "Delete SimpleName: obj(1422)", "Delete SimpleName: toString(1423)", "Delete MethodInvocation(1424)", "Delete MethodInvocation(1425)", "Delete Assignment: =(1426)", "Delete ExpressionStatement(1427)", "Delete Block(1428)", "Delete SimpleName: clazz(1429)", "Delete SimpleName: ctor(1430)", "Delete SimpleName: getDeclaringClass(1431)", "Delete MethodInvocation(1432)", "Delete Assignment: =(1433)", "Delete ExpressionStatement(1434)", "Delete Block(1435)", "Delete IfStatement(1436)", "Delete IfStatement(1437)", "Delete SimpleName: clazz(1438)", "Delete SimpleName: equals(1439)", "Delete SimpleName: ctor(1440)", "Delete SimpleName: getDeclaringClass(1441)", "Delete MethodInvocation(1442)", "Delete MethodInvocation(1443)", "Delete SimpleName: ctor(1444)", "Delete SimpleName: newInstance(1445)", "Delete SimpleName: params(1446)", "Delete MethodInvocation(1447)", "Delete ReturnStatement(1448)", "Delete Block(1449)", "Delete SimpleName: IntrospectionException(1450)", "Delete SimpleType: IntrospectionException(1451)", "Delete StringLiteral: \"constructor resolution error\"(1452)", "Delete ClassInstanceCreation(1453)", "Delete ThrowStatement(1454)", "Delete Block(1455)", "Delete IfStatement(1456)", "Delete Block(1457)", "Delete MethodDeclaration(1458)", "Delete TagElement: @inheritDoc(1459)", "Delete TagElement(1460)", "Delete Javadoc(1461)", "Delete Modifier: public(1462)", "Delete SimpleName: Object(1463)", "Delete SimpleType: Object(1464)", "Delete SimpleName: tryInvoke(1465)", "Delete SimpleName: String(1466)", "Delete SimpleType: String(1467)", "Delete SimpleName: name(1468)", "Delete SingleVariableDeclaration(1469)", "Delete SimpleName: Object(1470)", "Delete SimpleType: Object(1471)", "Delete SimpleName: obj(1472)", "Delete SingleVariableDeclaration(1473)", "Delete SimpleName: Object(1474)", "Delete SimpleType: Object(1475)", "Delete Dimension(1476)", "Delete ArrayType: Object[](1477)", "Delete SimpleName: params(1478)", "Delete SingleVariableDeclaration(1479)", "Delete SimpleName: Class(1480)", "Delete SimpleType: Class(1481)", "Delete WildcardType: ?(1482)", "Delete ParameterizedType: Class<?>(1483)", "Delete SimpleName: clazz(1484)", "Delete NullLiteral(1485)", "Delete VariableDeclarationFragment(1486)", "Delete VariableDeclarationStatement(1487)", "Delete SimpleName: obj(1488)", "Delete SimpleName: Class(1489)", "Delete SimpleType: Class(1490)", "Delete WildcardType: ?(1491)", "Delete ParameterizedType: Class<?>(1492)", "Delete InstanceofExpression(1493)", "Delete SimpleName: clazz(1494)", "Delete SimpleName: Class(1495)", "Delete SimpleType: Class(1496)", "Delete WildcardType: ?(1497)", "Delete ParameterizedType: Class<?>(1498)", "Delete SimpleName: obj(1499)", "Delete CastExpression(1500)", "Delete Assignment: =(1501)", "Delete ExpressionStatement(1502)", "Delete Block(1503)", "Delete SimpleName: obj(1504)", "Delete NullLiteral(1505)", "Delete InfixExpression: !=(1506)", "Delete SimpleName: clazz(1507)", "Delete SimpleName: getClassByName(1508)", "Delete SimpleName: obj(1509)", "Delete SimpleName: toString(1510)", "Delete MethodInvocation(1511)", "Delete MethodInvocation(1512)", "Delete Assignment: =(1513)", "Delete ExpressionStatement(1514)", "Delete Block(1515)", "Delete SimpleName: clazz(1516)", "Delete SimpleName: ctor(1517)", "Delete SimpleName: getDeclaringClass(1518)", "Delete MethodInvocation(1519)", "Delete Assignment: =(1520)", "Delete ExpressionStatement(1521)", "Delete Block(1522)", "Delete IfStatement(1523)", "Delete IfStatement(1524)", "Delete SimpleName: clazz(1525)", "Delete SimpleName: equals(1526)", "Delete SimpleName: ctor(1527)", "Delete SimpleName: getDeclaringClass(1528)", "Delete MethodInvocation(1529)", "Delete MethodInvocation(1530)", "Delete SimpleName: name(1531)", "Delete NullLiteral(1532)", "Delete InfixExpression: ==(1533)", "Delete SimpleName: name(1534)", "Delete SimpleName: equals(1535)", "Delete SimpleName: clazz(1536)", "Delete SimpleName: getName(1537)", "Delete MethodInvocation(1538)", "Delete MethodInvocation(1539)", "Delete InfixExpression: ||(1540)", "Delete ParenthesizedExpression(1541)", "Delete InfixExpression: &&(1542)", "Delete SimpleName: ctor(1543)", "Delete SimpleName: newInstance(1544)", "Delete SimpleName: params(1545)", "Delete MethodInvocation(1546)", "Delete ReturnStatement(1547)", "Delete Block(1548)", "Delete SimpleName: InstantiationException(1549)", "Delete SimpleType: InstantiationException(1550)", "Delete SimpleName: xinstance(1551)", "Delete SingleVariableDeclaration(1552)", "Delete SimpleName: TRY_FAILED(1553)", "Delete ReturnStatement(1554)", "Delete Block(1555)", "Delete CatchClause(1556)", "Delete SimpleName: IllegalAccessException(1557)", "Delete SimpleType: IllegalAccessException(1558)", "Delete SimpleName: xaccess(1559)", "Delete SingleVariableDeclaration(1560)", "Delete SimpleName: TRY_FAILED(1561)", "Delete ReturnStatement(1562)", "Delete Block(1563)", "Delete CatchClause(1564)", "Delete SimpleName: IllegalArgumentException(1565)", "Delete SimpleType: IllegalArgumentException(1566)", "Delete SimpleName: xargument(1567)", "Delete SingleVariableDeclaration(1568)", "Delete SimpleName: TRY_FAILED(1569)", "Delete ReturnStatement(1570)", "Delete Block(1571)", "Delete CatchClause(1572)", "Delete SimpleName: InvocationTargetException(1573)", "Delete SimpleType: InvocationTargetException(1574)", "Delete SimpleName: xinvoke(1575)", "Delete SingleVariableDeclaration(1576)", "Delete SimpleName: TRY_FAILED(1577)", "Delete ReturnStatement(1578)", "Delete Block(1579)", "Delete CatchClause(1580)", "Delete TryStatement(1581)", "Delete Block(1582)", "Delete IfStatement(1583)", "Delete SimpleName: TRY_FAILED(1584)", "Delete ReturnStatement(1585)", "Delete Block(1586)", "Delete MethodDeclaration(1587)", "Delete TagElement: @inheritDoc(1588)", "Delete TagElement(1589)", "Delete Javadoc(1590)", "Delete Modifier: public(1591)", "Delete PrimitiveType: boolean(1592)", "Delete SimpleName: tryFailed(1593)", "Delete SimpleName: Object(1594)", "Delete SimpleType: Object(1595)", "Delete SimpleName: rval(1596)", "Delete SingleVariableDeclaration(1597)", "Delete SimpleName: rval(1598)", "Delete SimpleName: TRY_FAILED(1599)", "Delete InfixExpression: ==(1600)", "Delete ReturnStatement(1601)", "Delete Block(1602)", "Delete MethodDeclaration(1603)", "Delete TagElement: @inheritDoc(1604)", "Delete TagElement(1605)", "Delete Javadoc(1606)", "Delete Modifier: public(1607)", "Delete PrimitiveType: boolean(1608)", "Delete SimpleName: isCacheable(1609)", "Delete BooleanLiteral: true(1610)", "Delete ReturnStatement(1611)", "Delete Block(1612)", "Delete MethodDeclaration(1613)", "Delete TagElement: @inheritDoc(1614)", "Delete TagElement(1615)", "Delete Javadoc(1616)", "Delete Modifier: public(1617)", "Delete SimpleName: Class(1618)", "Delete SimpleType: Class(1619)", "Delete WildcardType: ?(1620)", "Delete ParameterizedType: Class<?>(1621)", "Delete SimpleName: getReturnType(1622)", "Delete SimpleName: ctor(1623)", "Delete SimpleName: getDeclaringClass(1624)", "Delete MethodInvocation(1625)", "Delete ReturnStatement(1626)", "Delete Block(1627)", "Delete MethodDeclaration(1628)", "Delete TypeDeclaration: class(1629)", "Delete TextElement: A JexlPropertyGet for public fields.(1630)", "Delete TagElement(1631)", "Delete Javadoc(1632)", "Delete Modifier: private(1633)", "Delete Modifier: static(1634)", "Delete Modifier: final(1635)", "Delete SimpleName: FieldPropertyGet(1636)", "Delete SimpleName: JexlPropertyGet(1637)", "Delete SimpleType: JexlPropertyGet(1638)", "Delete TextElement: The public field.(1639)", "Delete TagElement(1640)", "Delete Javadoc(1641)", "Delete Modifier: private(1642)", "Delete Modifier: final(1643)", "Delete SimpleName: Field(1644)", "Delete SimpleType: Field(1645)", "Delete SimpleName: field(1646)", "Delete VariableDeclarationFragment(1647)", "Delete FieldDeclaration(1648)", "Delete TextElement: Creates a new instance of FieldPropertyGet.(1649)", "Delete TagElement(1650)", "Delete SimpleName: theField(1651)", "Delete TextElement:  the class public field(1652)", "Delete TagElement: @param(1653)", "Delete Javadoc(1654)", "Delete Modifier: public(1655)", "Delete SimpleName: FieldPropertyGet(1656)", "Delete SimpleName: Field(1657)", "Delete SimpleType: Field(1658)", "Delete SimpleName: theField(1659)", "Delete SingleVariableDeclaration(1660)", "Delete SimpleName: field(1661)", "Delete SimpleName: theField(1662)", "Delete Assignment: =(1663)", "Delete ExpressionStatement(1664)", "Delete Block(1665)", "Delete MethodDeclaration(1666)", "Delete TagElement: @inheritDoc(1667)", "Delete TagElement(1668)", "Delete Javadoc(1669)", "Delete Modifier: public(1670)", "Delete SimpleName: Object(1671)", "Delete SimpleType: Object(1672)", "Delete SimpleName: invoke(1673)", "Delete SimpleName: Object(1674)", "Delete SimpleType: Object(1675)", "Delete SimpleName: obj(1676)", "Delete SingleVariableDeclaration(1677)", "Delete SimpleName: Exception(1678)", "Delete SimpleType: Exception(1679)", "Delete SimpleName: field(1680)", "Delete SimpleName: get(1681)", "Delete SimpleName: obj(1682)", "Delete MethodInvocation(1683)", "Delete ReturnStatement(1684)", "Delete Block(1685)", "Delete MethodDeclaration(1686)", "Delete TagElement: @inheritDoc(1687)", "Delete TagElement(1688)", "Delete Javadoc(1689)", "Delete Modifier: public(1690)", "Delete SimpleName: Object(1691)", "Delete SimpleType: Object(1692)", "Delete SimpleName: tryInvoke(1693)", "Delete SimpleName: Object(1694)", "Delete SimpleType: Object(1695)", "Delete SimpleName: obj(1696)", "Delete SingleVariableDeclaration(1697)", "Delete SimpleName: Object(1698)", "Delete SimpleType: Object(1699)", "Delete SimpleName: key(1700)", "Delete SingleVariableDeclaration(1701)", "Delete SimpleName: obj(1702)", "Delete SimpleName: getClass(1703)", "Delete MethodInvocation(1704)", "Delete SimpleName: equals(1705)", "Delete SimpleName: field(1706)", "Delete SimpleName: getDeclaringClass(1707)", "Delete MethodInvocation(1708)", "Delete MethodInvocation(1709)", "Delete SimpleName: key(1710)", "Delete SimpleName: equals(1711)", "Delete SimpleName: field(1712)", "Delete SimpleName: getName(1713)", "Delete MethodInvocation(1714)", "Delete MethodInvocation(1715)", "Delete InfixExpression: &&(1716)", "Delete SimpleName: field(1717)", "Delete SimpleName: get(1718)", "Delete SimpleName: obj(1719)", "Delete MethodInvocation(1720)", "Delete ReturnStatement(1721)", "Delete Block(1722)", "Delete SimpleName: IllegalAccessException(1723)", "Delete SimpleType: IllegalAccessException(1724)", "Delete SimpleName: xill(1725)", "Delete SingleVariableDeclaration(1726)", "Delete SimpleName: TRY_FAILED(1727)", "Delete ReturnStatement(1728)", "Delete Block(1729)", "Delete CatchClause(1730)", "Delete TryStatement(1731)", "Delete Block(1732)", "Delete IfStatement(1733)", "Delete SimpleName: TRY_FAILED(1734)", "Delete ReturnStatement(1735)", "Delete Block(1736)", "Delete MethodDeclaration(1737)", "Delete TagElement: @inheritDoc(1738)", "Delete TagElement(1739)", "Delete Javadoc(1740)", "Delete Modifier: public(1741)", "Delete PrimitiveType: boolean(1742)", "Delete SimpleName: tryFailed(1743)", "Delete SimpleName: Object(1744)", "Delete SimpleType: Object(1745)", "Delete SimpleName: rval(1746)", "Delete SingleVariableDeclaration(1747)", "Delete SimpleName: rval(1748)", "Delete SimpleName: TRY_FAILED(1749)", "Delete InfixExpression: ==(1750)", "Delete ReturnStatement(1751)", "Delete Block(1752)", "Delete MethodDeclaration(1753)", "Delete TagElement: @inheritDoc(1754)", "Delete TagElement(1755)", "Delete Javadoc(1756)", "Delete Modifier: public(1757)", "Delete PrimitiveType: boolean(1758)", "Delete SimpleName: isCacheable(1759)", "Delete BooleanLiteral: true(1760)", "Delete ReturnStatement(1761)", "Delete Block(1762)", "Delete MethodDeclaration(1763)", "Delete TypeDeclaration: class(1764)", "Delete TextElement: A JexlPropertySet for public fields.(1765)", "Delete TagElement(1766)", "Delete Javadoc(1767)", "Delete Modifier: private(1768)", "Delete Modifier: static(1769)", "Delete Modifier: final(1770)", "Delete SimpleName: FieldPropertySet(1771)", "Delete SimpleName: JexlPropertySet(1772)", "Delete SimpleType: JexlPropertySet(1773)", "Delete TextElement: The public field.(1774)", "Delete TagElement(1775)", "Delete Javadoc(1776)", "Delete Modifier: private(1777)", "Delete Modifier: final(1778)", "Delete SimpleName: Field(1779)", "Delete SimpleType: Field(1780)", "Delete SimpleName: field(1781)", "Delete VariableDeclarationFragment(1782)", "Delete FieldDeclaration(1783)", "Delete TextElement: Creates a new instance of FieldPropertySet.(1784)", "Delete TagElement(1785)", "Delete SimpleName: theField(1786)", "Delete TextElement:  the class public field(1787)", "Delete TagElement: @param(1788)", "Delete Javadoc(1789)", "Delete Modifier: public(1790)", "Delete SimpleName: FieldPropertySet(1791)", "Delete SimpleName: Field(1792)", "Delete SimpleType: Field(1793)", "Delete SimpleName: theField(1794)", "Delete SingleVariableDeclaration(1795)", "Delete SimpleName: field(1796)", "Delete SimpleName: theField(1797)", "Delete Assignment: =(1798)", "Delete ExpressionStatement(1799)", "Delete Block(1800)", "Delete MethodDeclaration(1801)", "Delete TagElement: @inheritDoc(1802)", "Delete TagElement(1803)", "Delete Javadoc(1804)", "Delete Modifier: public(1805)", "Delete SimpleName: Object(1806)", "Delete SimpleType: Object(1807)", "Delete SimpleName: invoke(1808)", "Delete SimpleName: Object(1809)", "Delete SimpleType: Object(1810)", "Delete SimpleName: obj(1811)", "Delete SingleVariableDeclaration(1812)", "Delete SimpleName: Object(1813)", "Delete SimpleType: Object(1814)", "Delete SimpleName: arg(1815)", "Delete SingleVariableDeclaration(1816)", "Delete SimpleName: Exception(1817)", "Delete SimpleType: Exception(1818)", "Delete SimpleName: field(1819)", "Delete SimpleName: set(1820)", "Delete SimpleName: obj(1821)", "Delete SimpleName: arg(1822)", "Delete MethodInvocation(1823)", "Delete ExpressionStatement(1824)", "Delete SimpleName: arg(1825)", "Delete ReturnStatement(1826)", "Delete Block(1827)", "Delete MethodDeclaration(1828)", "Delete TagElement: @inheritDoc(1829)", "Delete TagElement(1830)", "Delete Javadoc(1831)", "Delete Modifier: public(1832)", "Delete SimpleName: Object(1833)", "Delete SimpleType: Object(1834)", "Delete SimpleName: tryInvoke(1835)", "Delete SimpleName: Object(1836)", "Delete SimpleType: Object(1837)", "Delete SimpleName: obj(1838)", "Delete SingleVariableDeclaration(1839)", "Delete SimpleName: Object(1840)", "Delete SimpleType: Object(1841)", "Delete SimpleName: key(1842)", "Delete SingleVariableDeclaration(1843)", "Delete SimpleName: Object(1844)", "Delete SimpleType: Object(1845)", "Delete SimpleName: value(1846)", "Delete SingleVariableDeclaration(1847)", "Delete SimpleName: obj(1848)", "Delete SimpleName: getClass(1849)", "Delete MethodInvocation(1850)", "Delete SimpleName: equals(1851)", "Delete SimpleName: field(1852)", "Delete SimpleName: getDeclaringClass(1853)", "Delete MethodInvocation(1854)", "Delete MethodInvocation(1855)", "Delete SimpleName: key(1856)", "Delete SimpleName: equals(1857)", "Delete SimpleName: field(1858)", "Delete SimpleName: getName(1859)", "Delete MethodInvocation(1860)", "Delete MethodInvocation(1861)", "Delete SimpleName: value(1862)", "Delete NullLiteral(1863)", "Delete InfixExpression: ==(1864)", "Delete SimpleName: MethodKey(1865)", "Delete SimpleName: isInvocationConvertible(1866)", "Delete SimpleName: field(1867)", "Delete SimpleName: getType(1868)", "Delete MethodInvocation(1869)", "Delete SimpleName: value(1870)", "Delete SimpleName: getClass(1871)", "Delete MethodInvocation(1872)", "Delete BooleanLiteral: false(1873)", "Delete MethodInvocation(1874)", "Delete InfixExpression: ||(1875)", "Delete ParenthesizedExpression(1876)", "Delete InfixExpression: &&(1877)", "Delete SimpleName: field(1878)", "Delete SimpleName: set(1879)", "Delete SimpleName: obj(1880)", "Delete SimpleName: value(1881)", "Delete MethodInvocation(1882)", "Delete ExpressionStatement(1883)", "Delete SimpleName: value(1884)", "Delete ReturnStatement(1885)", "Delete Block(1886)", "Delete SimpleName: IllegalAccessException(1887)", "Delete SimpleType: IllegalAccessException(1888)", "Delete SimpleName: xill(1889)", "Delete SingleVariableDeclaration(1890)", "Delete SimpleName: TRY_FAILED(1891)", "Delete ReturnStatement(1892)", "Delete Block(1893)", "Delete CatchClause(1894)", "Delete TryStatement(1895)", "Delete Block(1896)", "Delete IfStatement(1897)", "Delete SimpleName: TRY_FAILED(1898)", "Delete ReturnStatement(1899)", "Delete Block(1900)", "Delete MethodDeclaration(1901)", "Delete TagElement: @inheritDoc(1902)", "Delete TagElement(1903)", "Delete Javadoc(1904)", "Delete Modifier: public(1905)", "Delete PrimitiveType: boolean(1906)", "Delete SimpleName: tryFailed(1907)", "Delete SimpleName: Object(1908)", "Delete SimpleType: Object(1909)", "Delete SimpleName: rval(1910)", "Delete SingleVariableDeclaration(1911)", "Delete SimpleName: rval(1912)", "Delete SimpleName: TRY_FAILED(1913)", "Delete InfixExpression: ==(1914)", "Delete ReturnStatement(1915)", "Delete Block(1916)", "Delete MethodDeclaration(1917)", "Delete TagElement: @inheritDoc(1918)", "Delete TagElement(1919)", "Delete Javadoc(1920)", "Delete Modifier: public(1921)", "Delete PrimitiveType: boolean(1922)", "Delete SimpleName: isCacheable(1923)", "Delete BooleanLiteral: true(1924)", "Delete ReturnStatement(1925)", "Delete Block(1926)", "Delete MethodDeclaration(1927)", "Delete TypeDeclaration: class(1928)", "Delete TypeDeclaration: class(1929)"]}}, {"ASTArrayLiteral_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: jjtAccept", "DEL PrimitiveType: int", "DEL SimpleName: literal", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL QualifiedName: JexlNode.Literal", "DEL SimpleName: data", "DEL ArrayCreation", "DEL SimpleName: literal", "DEL SimpleName: Override", "DEL Assignment: =", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: Object", "DEL TagElement", "DEL TextElement: Whether this array is constant or not. ", "DEL PrefixExpression: !", "DEL SimpleType: Parser", "DEL MethodDeclaration", "DEL SimpleName: visitor", "DEL SimpleName: array", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: array", "DEL SimpleName: data", "DEL SimpleType: Object", "DEL SimpleName: JexlNode", "DEL Modifier: public", "DEL SimpleName: getClass", "DEL SimpleType: JexlNode", "DEL Javadoc", "DEL PrimitiveType: void", "DEL SimpleName: getClass", "DEL Block", "DEL SimpleType: ParserVisitor", "DEL SimpleType: Object", "DEL InfixExpression: ||", "DEL SimpleName: ASTArrayLiteral", "DEL TagElement", "DEL TextElement:  the literal array value", "DEL InfixExpression: &&", "DEL SimpleName: constant", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: constant", "DEL SimpleName: IllegalArgumentException", "DEL SimpleName: ASTArrayLiteral", "DEL BooleanLiteral: true", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement:  if literal is not an array or null", "DEL Modifier: public", "DEL SuperConstructorInvocation", "DEL Block", "DEL SimpleName: id", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL ParameterizedType: JexlNode.Literal<Object>", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL Block", "DEL Javadoc", "DEL SimpleName: id", "DEL NumberLiteral: 0", "DEL SimpleName: ASTArrayLiteral", "DEL SimpleType: Object", "DEL PrimitiveType: void", "DEL TextElement: Gets the literal value.", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Parser", "DEL SimpleName: array", "DEL Javadoc", "DEL SimpleName: Override", "DEL SimpleName: id", "DEL Assignment: =", "DEL SimpleName: isArray", "DEL FieldDeclaration", "DEL Javadoc", "DEL TagElement: @return", "DEL SimpleName: constant", "DEL ThrowStatement", "DEL NullLiteral", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Block", "DEL TextElement:  the array literal", "DEL TextElement: Sets the literal value only if the descendants of this node compose a constant", "DEL SimpleName: literal", "DEL TagElement", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: isConstant", "DEL Javadoc", "DEL IfStatement", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL SimpleType: Object", "DEL ArrayType: Object[]", "DEL StringLiteral: \" is not an array\"", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL Dimension", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL FieldAccess", "DEL QualifiedName: children.length", "DEL PrimitiveType: boolean", "DEL MarkerAnnotation", "DEL SimpleName: getLiteral", "DEL TagElement: @inheritDoc", "DEL SimpleName: Object", "DEL TagElement", "DEL Block", "DEL SimpleName: id", "DEL FieldDeclaration", "DEL SimpleName: p", "DEL Block", "DEL SimpleName: children", "DEL MethodDeclaration", "DEL BooleanLiteral: false", "DEL SimpleName: IllegalArgumentException", "DEL MethodInvocation", "DEL Block", "DEL NullLiteral", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: constant", "DEL TextElement:  ", "DEL Modifier: public", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: jjtClose", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleType: IllegalArgumentException", "DEL SimpleName: ParserVisitor", "DEL SimpleName: visitor", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL SuperConstructorInvocation", "DEL SimpleName: literal", "DEL SingleVariableDeclaration", "DEL TagElement: @throws", "DEL TextElement: The type literal value. ", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL ThisExpression", "DEL SimpleName: setLiteral", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: p", "DEL MethodInvocation", "DEL SimpleName: literal", "DEL SimpleName: literal", "DEL SimpleName: Object", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL SimpleName: visit", "DEL SimpleType: JexlNode.Literal", "DEL NumberLiteral: 0", "DEL SimpleName: array", "DEL NullLiteral"]}]}}, {"ASTArrayLiteral_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete Modifier: public(2)", "Delete Modifier: final(3)", "Delete SimpleName: ASTArrayLiteral(4)", "Delete SimpleName: JexlNode(5)", "Delete SimpleType: JexlNode(6)", "Delete QualifiedName: JexlNode.Literal(7)", "Delete SimpleType: JexlNode.Literal(8)", "Delete SimpleName: Object(9)", "Delete SimpleType: Object(10)", "Delete ParameterizedType: JexlNode.Literal<Object>(11)", "Delete TextElement: The type literal value. (12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete SimpleName: Object(15)", "Delete SimpleType: Object(16)", "Delete SimpleName: array(17)", "Delete NullLiteral(18)", "Delete VariableDeclarationFragment(19)", "Delete FieldDeclaration(20)", "Delete TextElement: Whether this array is constant or not. (21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete PrimitiveType: boolean(24)", "Delete SimpleName: constant(25)", "Delete BooleanLiteral: false(26)", "Delete VariableDeclarationFragment(27)", "Delete FieldDeclaration(28)", "Delete SimpleName: ASTArrayLiteral(29)", "Delete PrimitiveType: int(30)", "Delete SimpleName: id(31)", "Delete SingleVariableDeclaration(32)", "Delete SimpleName: id(33)", "Delete SuperConstructorInvocation(34)", "Delete Block(35)", "Delete MethodDeclaration(36)", "Delete SimpleName: ASTArrayLiteral(37)", "Delete SimpleName: Parser(38)", "Delete SimpleType: Parser(39)", "Delete SimpleName: p(40)", "Delete SingleVariableDeclaration(41)", "Delete PrimitiveType: int(42)", "Delete SimpleName: id(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: p(45)", "Delete SimpleName: id(46)", "Delete SuperConstructorInvocation(47)", "Delete Block(48)", "Delete MethodDeclaration(49)", "Delete TagElement: @inheritDoc(50)", "Delete TextElement:  (51)", "Delete TagElement(52)", "Delete Javadoc(53)", "Delete SimpleName: Override(54)", "Delete MarkerAnnotation(55)", "Delete Modifier: public(56)", "Delete PrimitiveType: void(57)", "Delete SimpleName: jjtClose(58)", "Delete SimpleName: children(59)", "Delete NullLiteral(60)", "Delete InfixExpression: ==(61)", "Delete QualifiedName: children.length(62)", "Delete NumberLiteral: 0(63)", "Delete InfixExpression: ==(64)", "Delete InfixExpression: ||(65)", "Delete SimpleName: array(66)", "Delete SimpleName: Object(67)", "Delete SimpleType: Object(68)", "Delete Dimension(69)", "Delete ArrayType: Object[](70)", "Delete NumberLiteral: 0(71)", "Delete ArrayCreation(72)", "Delete Assignment: =(73)", "Delete ExpressionStatement(74)", "Delete SimpleName: constant(75)", "Delete BooleanLiteral: true(76)", "Delete Assignment: =(77)", "Delete ExpressionStatement(78)", "Delete Block(79)", "Delete SimpleName: constant(80)", "Delete SimpleName: isConstant(81)", "Delete MethodInvocation(82)", "Delete Assignment: =(83)", "Delete ExpressionStatement(84)", "Delete Block(85)", "Delete IfStatement(86)", "Delete Block(87)", "Delete MethodDeclaration(88)", "Delete TextElement: Gets the literal value.(89)", "Delete TagElement(90)", "Delete TextElement:  the array literal(91)", "Delete TagElement: @return(92)", "Delete Javadoc(93)", "Delete Modifier: public(94)", "Delete SimpleName: Object(95)", "Delete SimpleType: Object(96)", "Delete SimpleName: getLiteral(97)", "Delete SimpleName: array(98)", "Delete ReturnStatement(99)", "Delete Block(100)", "Delete MethodDeclaration(101)", "Delete TextElement: Sets the literal value only if the descendants of this node compose a constant(102)", "Delete TagElement(103)", "Delete SimpleName: literal(104)", "Delete TextElement:  the literal array value(105)", "Delete TagElement: @param(106)", "Delete SimpleName: IllegalArgumentException(107)", "Delete TextElement:  if literal is not an array or null(108)", "Delete TagElement: @throws(109)", "Delete Javadoc(110)", "Delete Modifier: public(111)", "Delete PrimitiveType: void(112)", "Delete SimpleName: setLiteral(113)", "Delete SimpleName: Object(114)", "Delete SimpleType: Object(115)", "Delete SimpleName: literal(116)", "Delete SingleVariableDeclaration(117)", "Delete SimpleName: constant(118)", "Delete SimpleName: literal(119)", "Delete NullLiteral(120)", "Delete InfixExpression: !=(121)", "Delete SimpleName: literal(122)", "Delete SimpleName: getClass(123)", "Delete MethodInvocation(124)", "Delete SimpleName: isArray(125)", "Delete MethodInvocation(126)", "Delete PrefixExpression: !(127)", "Delete InfixExpression: &&(128)", "Delete SimpleName: IllegalArgumentException(129)", "Delete SimpleType: IllegalArgumentException(130)", "Delete SimpleName: literal(131)", "Delete SimpleName: getClass(132)", "Delete MethodInvocation(133)", "Delete StringLiteral: \" is not an array\"(134)", "Delete InfixExpression: +(135)", "Delete ClassInstanceCreation(136)", "Delete ThrowStatement(137)", "Delete Block(138)", "Delete IfStatement(139)", "Delete ThisExpression(140)", "Delete SimpleName: array(141)", "Delete FieldAccess(142)", "Delete SimpleName: literal(143)", "Delete Assignment: =(144)", "Delete ExpressionStatement(145)", "Delete Block(146)", "Delete IfStatement(147)", "Delete Block(148)", "Delete MethodDeclaration(149)", "Delete TagElement: @inheritDoc(150)", "Delete TextElement:  (151)", "Delete TagElement(152)", "Delete Javadoc(153)", "Delete SimpleName: Override(154)", "Delete MarkerAnnotation(155)", "Delete Modifier: public(156)", "Delete SimpleName: Object(157)", "Delete SimpleType: Object(158)", "Delete SimpleName: jjtAccept(159)", "Delete SimpleName: ParserVisitor(160)", "Delete SimpleType: ParserVisitor(161)", "Delete SimpleName: visitor(162)", "Delete SingleVariableDeclaration(163)", "Delete SimpleName: Object(164)", "Delete SimpleType: Object(165)", "Delete SimpleName: data(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: visitor(168)", "Delete SimpleName: visit(169)", "Delete ThisExpression(170)", "Delete SimpleName: data(171)", "Delete MethodInvocation(172)", "Delete ReturnStatement(173)", "Delete Block(174)", "Delete MethodDeclaration(175)", "Delete TypeDeclaration: class(176)"]}}, {"ASTIdentifier_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL PrimitiveType: int", "DEL SuperConstructorInvocation", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TypeDeclaration: class", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: Integer", "DEL SimpleName: id", "DEL SimpleName: register", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: register", "DEL PrimitiveType: void", "DEL ThisExpression", "DEL SimpleName: Override", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: register", "DEL SimpleName: p", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: p", "DEL InfixExpression: ==", "DEL SimpleName: ASTIdentifier", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: id", "DEL SimpleName: charAt", "DEL SimpleType: Object", "DEL Block", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: getRegister", "DEL PrefixExpression: -", "DEL Block", "DEL SimpleName: parseInt", "DEL SimpleName: ASTIdentifier", "DEL Block", "DEL SimpleType: String", "DEL Modifier: public", "DEL SimpleName: Parser", "DEL SimpleName: visitor", "DEL PrimitiveType: int", "DEL CharacterLiteral: '#'", "DEL SimpleType: ParserVisitor", "DEL NumberLiteral: 1", "DEL PrimitiveType: int", "DEL SimpleName: r", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleType: Parser", "DEL MethodDeclaration", "DEL SimpleName: visitor", "DEL FieldDeclaration", "DEL SimpleName: r", "DEL SimpleName: data", "DEL PrimitiveType: int", "DEL SimpleName: id", "DEL Modifier: public", "DEL SimpleName: register", "DEL SimpleName: ParserVisitor", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Modifier: private", "DEL Block", "DEL VariableDeclarationFragment", "DEL SuperConstructorInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: r", "DEL Javadoc", "DEL SimpleType: JexlNode", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL NumberLiteral: 1", "DEL SimpleName: setRegister", "DEL SimpleName: setRegister", "DEL SimpleName: id", "DEL MethodInvocation", "DEL SimpleName: visit", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: JexlNode", "DEL SimpleName: jjtAccept", "DEL Modifier: public", "DEL SimpleName: r", "DEL TextElement: Identifiers, variables and registers.", "DEL MethodDeclaration", "DEL SimpleName: r", "DEL SimpleName: substring", "DEL SimpleName: Object"]}]}}, {"ASTIdentifier_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Identifiers, variables and registers.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete Modifier: public(5)", "Delete SimpleName: ASTIdentifier(6)", "Delete SimpleName: JexlNode(7)", "Delete SimpleType: JexlNode(8)", "Delete Modifier: private(9)", "Delete PrimitiveType: int(10)", "Delete SimpleName: register(11)", "Delete NumberLiteral: 1(12)", "Delete PrefixExpression: -(13)", "Delete VariableDeclarationFragment(14)", "Delete FieldDeclaration(15)", "Delete Modifier: public(16)", "Delete SimpleName: ASTIdentifier(17)", "Delete PrimitiveType: int(18)", "Delete SimpleName: id(19)", "Delete SingleVariableDeclaration(20)", "Delete SimpleName: id(21)", "Delete SuperConstructorInvocation(22)", "Delete Block(23)", "Delete MethodDeclaration(24)", "Delete Modifier: public(25)", "Delete SimpleName: ASTIdentifier(26)", "Delete SimpleName: Parser(27)", "Delete SimpleType: Parser(28)", "Delete SimpleName: p(29)", "Delete SingleVariableDeclaration(30)", "Delete PrimitiveType: int(31)", "Delete SimpleName: id(32)", "Delete SingleVariableDeclaration(33)", "Delete SimpleName: p(34)", "Delete SimpleName: id(35)", "Delete SuperConstructorInvocation(36)", "Delete Block(37)", "Delete MethodDeclaration(38)", "Delete PrimitiveType: void(39)", "Delete SimpleName: setRegister(40)", "Delete SimpleName: String(41)", "Delete SimpleType: String(42)", "Delete SimpleName: r(43)", "Delete SingleVariableDeclaration(44)", "Delete SimpleName: r(45)", "Delete SimpleName: charAt(46)", "Delete NumberLiteral: 0(47)", "Delete MethodInvocation(48)", "Delete CharacterLiteral: '#'(49)", "Delete InfixExpression: ==(50)", "Delete SimpleName: register(51)", "Delete SimpleName: Integer(52)", "Delete SimpleName: parseInt(53)", "Delete SimpleName: r(54)", "Delete SimpleName: substring(55)", "Delete NumberLiteral: 1(56)", "Delete MethodInvocation(57)", "Delete MethodInvocation(58)", "Delete Assignment: =(59)", "Delete ExpressionStatement(60)", "Delete Block(61)", "Delete IfStatement(62)", "Delete Block(63)", "Delete MethodDeclaration(64)", "Delete PrimitiveType: void(65)", "Delete SimpleName: setRegister(66)", "Delete PrimitiveType: int(67)", "Delete SimpleName: r(68)", "Delete SingleVariableDeclaration(69)", "Delete SimpleName: register(70)", "Delete SimpleName: r(71)", "Delete Assignment: =(72)", "Delete ExpressionStatement(73)", "Delete Block(74)", "Delete MethodDeclaration(75)", "Delete Modifier: public(76)", "Delete PrimitiveType: int(77)", "Delete SimpleName: getRegister(78)", "Delete SimpleName: register(79)", "Delete ReturnStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete SimpleName: Override(83)", "Delete MarkerAnnotation(84)", "Delete Modifier: public(85)", "Delete SimpleName: Object(86)", "Delete SimpleType: Object(87)", "Delete SimpleName: jjtAccept(88)", "Delete SimpleName: ParserVisitor(89)", "Delete SimpleType: ParserVisitor(90)", "Delete SimpleName: visitor(91)", "Delete SingleVariableDeclaration(92)", "Delete SimpleName: Object(93)", "Delete SimpleType: Object(94)", "Delete SimpleName: data(95)", "Delete SingleVariableDeclaration(96)", "Delete SimpleName: visitor(97)", "Delete SimpleName: visit(98)", "Delete ThisExpression(99)", "Delete SimpleName: data(100)", "Delete MethodInvocation(101)", "Delete ReturnStatement(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete TypeDeclaration: class(105)"]}}, {"ASTJexlScript_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlEngine", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL QualifiedName: JexlEngine.Frame", "DEL SimpleName: values", "DEL MethodDeclaration", "DEL SimpleType: ParserVisitor", "DEL TextElement:  the arguments array", "DEL Block", "DEL Block", "DEL SimpleName: visit", "DEL Block", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: theScope", "DEL ArrayType: String[]", "DEL ReturnStatement", "DEL Dimension", "DEL TagElement", "DEL ConditionalExpression", "DEL SimpleName: scope", "DEL SingleVariableDeclaration", "DEL TextElement: Gets this script parameters, i.e. registers assigned before creating local variables.", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleType: Object", "DEL SimpleName: scope", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Block", "DEL Modifier: public", "DEL Javadoc", "DEL Dimension", "DEL SimpleName: scope", "DEL TypeDeclaration: class", "DEL ArrayType: String[]", "DEL SimpleName: getArgCount", "DEL Block", "DEL Modifier: public", "DEL NumberLiteral: 0", "DEL SimpleName: values", "DEL Block", "DEL SimpleType: Object", "DEL FieldDeclaration", "DEL TagElement", "DEL PrimitiveType: void", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: scope", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Parser", "DEL Modifier: public", "DEL TextElement:  the scope", "DEL NullLiteral", "DEL ConditionalExpression", "DEL TagElement", "DEL Modifier: public", "DEL InfixExpression: !=", "DEL TagElement: @return", "DEL InfixExpression: !=", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: data", "DEL MethodDeclaration", "DEL TextElement: Gets this script local variable, i.e. registers assigned to local variables.", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: getLocalVariables", "DEL Javadoc", "DEL TextElement:  the parameter names", "DEL NullLiteral", "DEL NullLiteral", "DEL SimpleName: Object", "DEL QualifiedName: JexlEngine.Scope", "DEL SimpleName: theScope", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: scope", "DEL SimpleName: String", "DEL SimpleName: scope", "DEL SuperConstructorInvocation", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: visitor", "DEL SimpleName: scope", "DEL Javadoc", "DEL TagElement", "DEL ConditionalExpression", "DEL ConditionalExpression", "DEL TextElement: Enhanced script to allow parameters declaration.", "DEL SimpleName: ParserVisitor", "DEL TagElement", "DEL SimpleName: scope", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL TagElement", "DEL Block", "DEL TextElement: Gets this script scope.", "DEL MethodDeclaration", "DEL ThisExpression", "DEL SimpleType: Parser", "DEL SimpleName: getScope", "DEL MethodDeclaration", "DEL SimpleName: id", "DEL Modifier: public", "DEL SimpleName: scope", "DEL ReturnStatement", "DEL SuperConstructorInvocation", "DEL Block", "DEL TextElement: Gets the (maximum) number of arguments this script expects.", "DEL TagElement", "DEL ThisExpression", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: scope", "DEL MethodInvocation", "DEL SimpleName: setScope", "DEL Block", "DEL Javadoc", "DEL PrimitiveType: int", "DEL NullLiteral", "DEL SimpleName: data", "DEL SimpleType: JexlNode", "DEL MethodDeclaration", "DEL QualifiedName: JexlEngine.Scope", "DEL SimpleType: JexlEngine.Scope", "DEL SimpleName: visitor", "DEL ConditionalExpression", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: scope", "DEL FieldAccess", "DEL Modifier: public", "DEL SimpleName: createFrame", "DEL Javadoc", "DEL SimpleName: jjtAccept", "DEL SimpleName: Override", "DEL TagElement: @return", "DEL TextElement:  the register names", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: getArgCount", "DEL SimpleName: values", "DEL Modifier: public", "DEL SimpleType: String", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlEngine.Scope", "DEL SimpleName: Object", "DEL TextElement:  the argument values", "DEL NullLiteral", "DEL SimpleName: JexlNode", "DEL SimpleName: p", "DEL ReturnStatement", "DEL NullLiteral", "DEL MarkerAnnotation", "DEL TextElement: Gets this script registers, i.e. parameters and local variables.", "DEL ArrayType: String[]", "DEL TagElement: @return", "DEL NullLiteral", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleType: JexlEngine.Frame", "DEL SimpleName: scope", "DEL Modifier: private", "DEL TextElement: The script scope. ", "DEL SimpleName: p", "DEL SimpleName: theScope", "DEL SimpleName: scope", "DEL SimpleName: id", "DEL SimpleType: JexlEngine.Scope", "DEL TextElement: Creates an array of arguments by copying values up to the number of parameters.", "DEL ReturnStatement", "DEL SimpleName: getParameters", "DEL InfixExpression: !=", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL SimpleName: getRegisters", "DEL TagElement: @return", "DEL SimpleName: createFrame", "DEL MethodInvocation", "DEL TextElement: Sets the parameters and registers", "DEL SimpleName: id", "DEL NullLiteral", "DEL SimpleName: id", "DEL InfixExpression: !=", "DEL SimpleName: ASTJexlScript", "DEL SimpleName: getRegisters", "DEL Dimension", "DEL Assignment: =", "DEL SimpleName: getParameters", "DEL TextElement:  the number of parameters", "DEL SimpleName: getLocalVariables", "DEL TagElement", "DEL Modifier: public", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL InfixExpression: !=", "DEL MethodDeclaration", "DEL NullLiteral", "DEL QualifiedName: JexlEngine.Scope", "DEL Javadoc", "DEL Block", "DEL TextElement:  the parameter names"]}]}}, {"ASTJexlScript_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(2)", "Delete ImportDeclaration(3)", "Delete TextElement: Enhanced script to allow parameters declaration.(4)", "Delete TagElement(5)", "Delete Javadoc(6)", "Delete Modifier: public(7)", "Delete SimpleName: ASTJexlScript(8)", "Delete SimpleName: JexlNode(9)", "Delete SimpleType: JexlNode(10)", "Delete TextElement: The script scope. (11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: private(14)", "Delete QualifiedName: JexlEngine.Scope(15)", "Delete SimpleType: JexlEngine.Scope(16)", "Delete SimpleName: scope(17)", "Delete NullLiteral(18)", "Delete VariableDeclarationFragment(19)", "Delete FieldDeclaration(20)", "Delete Modifier: public(21)", "Delete SimpleName: ASTJexlScript(22)", "Delete PrimitiveType: int(23)", "Delete SimpleName: id(24)", "Delete SingleVariableDeclaration(25)", "Delete SimpleName: id(26)", "Delete SuperConstructorInvocation(27)", "Delete Block(28)", "Delete MethodDeclaration(29)", "Delete Modifier: public(30)", "Delete SimpleName: ASTJexlScript(31)", "Delete SimpleName: Parser(32)", "Delete SimpleType: Parser(33)", "Delete SimpleName: p(34)", "Delete SingleVariableDeclaration(35)", "Delete PrimitiveType: int(36)", "Delete SimpleName: id(37)", "Delete SingleVariableDeclaration(38)", "Delete SimpleName: p(39)", "Delete SimpleName: id(40)", "Delete SuperConstructorInvocation(41)", "Delete Block(42)", "Delete MethodDeclaration(43)", "Delete SimpleName: Override(44)", "Delete MarkerAnnotation(45)", "Delete Modifier: public(46)", "Delete SimpleName: Object(47)", "Delete SimpleType: Object(48)", "Delete SimpleName: jjtAccept(49)", "Delete SimpleName: ParserVisitor(50)", "Delete SimpleType: ParserVisitor(51)", "Delete SimpleName: visitor(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: Object(54)", "Delete SimpleType: Object(55)", "Delete SimpleName: data(56)", "Delete SingleVariableDeclaration(57)", "Delete SimpleName: visitor(58)", "Delete SimpleName: visit(59)", "Delete ThisExpression(60)", "Delete SimpleName: data(61)", "Delete MethodInvocation(62)", "Delete ReturnStatement(63)", "Delete Block(64)", "Delete MethodDeclaration(65)", "Delete TextElement: Sets the parameters and registers(66)", "Delete TagElement(67)", "Delete SimpleName: theScope(68)", "Delete TextElement:  the scope(69)", "Delete TagElement: @param(70)", "Delete Javadoc(71)", "Delete Modifier: public(72)", "Delete PrimitiveType: void(73)", "Delete SimpleName: setScope(74)", "Delete QualifiedName: JexlEngine.Scope(75)", "Delete SimpleType: JexlEngine.Scope(76)", "Delete SimpleName: theScope(77)", "Delete SingleVariableDeclaration(78)", "Delete ThisExpression(79)", "Delete SimpleName: scope(80)", "Delete FieldAccess(81)", "Delete SimpleName: theScope(82)", "Delete Assignment: =(83)", "Delete ExpressionStatement(84)", "Delete Block(85)", "Delete MethodDeclaration(86)", "Delete TextElement: Gets this script scope.(87)", "Delete TagElement(88)", "Delete Javadoc(89)", "Delete Modifier: public(90)", "Delete QualifiedName: JexlEngine.Scope(91)", "Delete SimpleType: JexlEngine.Scope(92)", "Delete SimpleName: getScope(93)", "Delete SimpleName: scope(94)", "Delete ReturnStatement(95)", "Delete Block(96)", "Delete MethodDeclaration(97)", "Delete TextElement: Creates an array of arguments by copying values up to the number of parameters.(98)", "Delete TagElement(99)", "Delete SimpleName: values(100)", "Delete TextElement:  the argument values(101)", "Delete TagElement: @param(102)", "Delete TextElement:  the arguments array(103)", "Delete TagElement: @return(104)", "Delete Javadoc(105)", "Delete Modifier: public(106)", "Delete QualifiedName: JexlEngine.Frame(107)", "Delete SimpleType: JexlEngine.Frame(108)", "Delete SimpleName: createFrame(109)", "Delete SimpleName: Object(110)", "Delete SimpleType: Object(111)", "Delete SimpleName: values(112)", "Delete SingleVariableDeclaration(113)", "Delete SimpleName: scope(114)", "Delete NullLiteral(115)", "Delete InfixExpression: !=(116)", "Delete SimpleName: scope(117)", "Delete SimpleName: createFrame(118)", "Delete SimpleName: values(119)", "Delete MethodInvocation(120)", "Delete NullLiteral(121)", "Delete ConditionalExpression(122)", "Delete ReturnStatement(123)", "Delete Block(124)", "Delete MethodDeclaration(125)", "Delete TextElement: Gets the (maximum) number of arguments this script expects.(126)", "Delete TagElement(127)", "Delete TextElement:  the number of parameters(128)", "Delete TagElement: @return(129)", "Delete Javadoc(130)", "Delete Modifier: public(131)", "Delete PrimitiveType: int(132)", "Delete SimpleName: getArgCount(133)", "Delete SimpleName: scope(134)", "Delete NullLiteral(135)", "Delete InfixExpression: !=(136)", "Delete SimpleName: scope(137)", "Delete SimpleName: getArgCount(138)", "Delete MethodInvocation(139)", "Delete NumberLiteral: 0(140)", "Delete ConditionalExpression(141)", "Delete ReturnStatement(142)", "Delete Block(143)", "Delete MethodDeclaration(144)", "Delete TextElement: Gets this script registers, i.e. parameters and local variables.(145)", "Delete TagElement(146)", "Delete TextElement:  the register names(147)", "Delete TagElement: @return(148)", "Delete Javadoc(149)", "Delete Modifier: public(150)", "Delete SimpleName: String(151)", "Delete SimpleType: String(152)", "Delete Dimension(153)", "Delete ArrayType: String[](154)", "Delete SimpleName: getRegisters(155)", "Delete SimpleName: scope(156)", "Delete NullLiteral(157)", "Delete InfixExpression: !=(158)", "Delete SimpleName: scope(159)", "Delete SimpleName: getRegisters(160)", "Delete MethodInvocation(161)", "Delete NullLiteral(162)", "Delete ConditionalExpression(163)", "Delete ReturnStatement(164)", "Delete Block(165)", "Delete MethodDeclaration(166)", "Delete TextElement: Gets this script parameters, i.e. registers assigned before creating local variables.(167)", "Delete TagElement(168)", "Delete TextElement:  the parameter names(169)", "Delete TagElement: @return(170)", "Delete Javadoc(171)", "Delete Modifier: public(172)", "Delete SimpleName: String(173)", "Delete SimpleType: String(174)", "Delete Dimension(175)", "Delete ArrayType: String[](176)", "Delete SimpleName: getParameters(177)", "Delete SimpleName: scope(178)", "Delete NullLiteral(179)", "Delete InfixExpression: !=(180)", "Delete SimpleName: scope(181)", "Delete SimpleName: getParameters(182)", "Delete MethodInvocation(183)", "Delete NullLiteral(184)", "Delete ConditionalExpression(185)", "Delete ReturnStatement(186)", "Delete Block(187)", "Delete MethodDeclaration(188)", "Delete TextElement: Gets this script local variable, i.e. registers assigned to local variables.(189)", "Delete TagElement(190)", "Delete TextElement:  the parameter names(191)", "Delete TagElement: @return(192)", "Delete Javadoc(193)", "Delete Modifier: public(194)", "Delete SimpleName: String(195)", "Delete SimpleType: String(196)", "Delete Dimension(197)", "Delete ArrayType: String[](198)", "Delete SimpleName: getLocalVariables(199)", "Delete SimpleName: scope(200)", "Delete NullLiteral(201)", "Delete InfixExpression: !=(202)", "Delete SimpleName: scope(203)", "Delete SimpleName: getLocalVariables(204)", "Delete MethodInvocation(205)", "Delete NullLiteral(206)", "Delete ConditionalExpression(207)", "Delete ReturnStatement(208)", "Delete Block(209)", "Delete MethodDeclaration(210)", "Delete TypeDeclaration: class(211)"]}}, {"ASTMapLiteral_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: literal", "DEL SimpleName: data", "DEL ParameterizedType: JexlNode.Literal<Object>", "DEL SimpleName: Object", "DEL Block", "DEL SimpleName: Parser", "DEL Block", "DEL MethodDeclaration", "DEL TextElement: Sets the literal value only if the descendants of this node compose a constant", "DEL SimpleType: Object", "DEL InstanceofExpression", "DEL ThrowStatement", "DEL Javadoc", "DEL SimpleName: p", "DEL SimpleName: id", "DEL SimpleName: literal", "DEL SimpleName: map", "DEL SimpleType: JexlNode.Literal", "DEL SimpleName: jjtAccept", "DEL QualifiedName: Collections.EMPTY_MAP", "DEL PrimitiveType: void", "DEL StringLiteral: \" is not an array\"", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: literal", "DEL SimpleName: Map", "DEL PrefixExpression: !", "DEL TagElement", "DEL SimpleName: children", "DEL Javadoc", "DEL Modifier: public", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: id", "DEL SimpleType: IllegalArgumentException", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL WildcardType: ?", "DEL SimpleName: id", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL TypeDeclaration: class", "DEL SimpleType: Object", "DEL TextElement: Gets the literal value.", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: Object", "DEL SimpleName: isConstant", "DEL Block", "DEL TagElement: @inheritDoc", "DEL Modifier: final", "DEL MethodInvocation", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleType: Object", "DEL FieldAccess", "DEL TagElement", "DEL ParameterizedType: Map<?,?>", "DEL ThisExpression", "DEL SimpleType: Object", "DEL TagElement: @param", "DEL InfixExpression: ||", "DEL SuperConstructorInvocation", "DEL SimpleName: Object", "DEL SimpleType: Map", "DEL Modifier: public", "DEL SimpleName: map", "DEL SimpleName: Map", "DEL ParameterizedType: Map<?,?>", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: ASTMapLiteral", "DEL SimpleType: JexlNode", "DEL SimpleName: visit", "DEL IfStatement", "DEL MarkerAnnotation", "DEL Block", "DEL Assignment: =", "DEL ParameterizedType: Map<?,?>", "DEL TagElement", "DEL QualifiedName: JexlNode.Literal", "DEL InfixExpression: ==", "DEL SimpleName: Map", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL SimpleType: Parser", "DEL TextElement: The type literal value. ", "DEL VariableDeclarationFragment", "DEL SimpleName: jjtClose", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TextElement:  if literal is not an array or null", "DEL SimpleName: Override", "DEL SimpleName: visitor", "DEL SimpleName: map", "DEL PrimitiveType: void", "DEL TagElement", "DEL NullLiteral", "DEL Assignment: =", "DEL SimpleName: literal", "DEL NullLiteral", "DEL SimpleName: IllegalArgumentException", "DEL TagElement", "DEL SimpleName: JexlNode", "DEL SuperConstructorInvocation", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL Assignment: =", "DEL QualifiedName: children.length", "DEL Block", "DEL Assignment: =", "DEL TextElement:  ", "DEL SimpleType: ParserVisitor", "DEL MethodDeclaration", "DEL TextElement:  the literal array value", "DEL SimpleName: id", "DEL ParenthesizedExpression", "DEL Block", "DEL Block", "DEL SimpleName: setLiteral", "DEL SimpleName: IllegalArgumentException", "DEL FieldDeclaration", "DEL TextElement: Whether this array is constant or not. ", "DEL NumberLiteral: 0", "DEL ClassInstanceCreation", "DEL SimpleType: Map", "DEL WildcardType: ?", "DEL MarkerAnnotation", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL SimpleName: constant", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL SimpleName: literal", "DEL TagElement: @throws", "DEL TextElement:  the array literal", "DEL SimpleName: p", "DEL WildcardType: ?", "DEL MethodDeclaration", "DEL SimpleName: visitor", "DEL PrimitiveType: boolean", "DEL SimpleName: Override", "DEL TagElement: @inheritDoc", "DEL MethodDeclaration", "DEL ThisExpression", "DEL SimpleName: getClass", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: ASTMapLiteral", "DEL TextElement:  ", "DEL SimpleType: Map", "DEL Javadoc", "DEL IfStatement", "DEL Block", "DEL SimpleName: constant", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL Javadoc", "DEL SimpleName: constant", "DEL SimpleName: getLiteral", "DEL SimpleName: constant", "DEL CastExpression", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: ParserVisitor", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL SimpleName: map", "DEL SimpleName: ASTMapLiteral", "DEL BooleanLiteral: false"]}]}}, {"ASTMapLiteral_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Collections(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Map(4)", "Delete ImportDeclaration(5)", "Delete Modifier: public(6)", "Delete Modifier: final(7)", "Delete SimpleName: ASTMapLiteral(8)", "Delete SimpleName: JexlNode(9)", "Delete SimpleType: JexlNode(10)", "Delete QualifiedName: JexlNode.Literal(11)", "Delete SimpleType: JexlNode.Literal(12)", "Delete SimpleName: Object(13)", "Delete SimpleType: Object(14)", "Delete ParameterizedType: JexlNode.Literal<Object>(15)", "Delete TextElement: The type literal value. (16)", "Delete TagElement(17)", "Delete Javadoc(18)", "Delete SimpleName: Map(19)", "Delete SimpleType: Map(20)", "Delete WildcardType: ?(21)", "Delete WildcardType: ?(22)", "Delete ParameterizedType: Map<?,?>(23)", "Delete SimpleName: map(24)", "Delete NullLiteral(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: Whether this array is constant or not. (28)", "Delete TagElement(29)", "Delete Javadoc(30)", "Delete PrimitiveType: boolean(31)", "Delete SimpleName: constant(32)", "Delete BooleanLiteral: false(33)", "Delete VariableDeclarationFragment(34)", "Delete FieldDeclaration(35)", "Delete SimpleName: ASTMapLiteral(36)", "Delete PrimitiveType: int(37)", "Delete SimpleName: id(38)", "Delete SingleVariableDeclaration(39)", "Delete SimpleName: id(40)", "Delete SuperConstructorInvocation(41)", "Delete Block(42)", "Delete MethodDeclaration(43)", "Delete SimpleName: ASTMapLiteral(44)", "Delete SimpleName: Parser(45)", "Delete SimpleType: Parser(46)", "Delete SimpleName: p(47)", "Delete SingleVariableDeclaration(48)", "Delete PrimitiveType: int(49)", "Delete SimpleName: id(50)", "Delete SingleVariableDeclaration(51)", "Delete SimpleName: p(52)", "Delete SimpleName: id(53)", "Delete SuperConstructorInvocation(54)", "Delete Block(55)", "Delete MethodDeclaration(56)", "Delete TagElement: @inheritDoc(57)", "Delete TextElement:  (58)", "Delete TagElement(59)", "Delete Javadoc(60)", "Delete SimpleName: Override(61)", "Delete MarkerAnnotation(62)", "Delete Modifier: public(63)", "Delete PrimitiveType: void(64)", "Delete SimpleName: jjtClose(65)", "Delete SimpleName: children(66)", "Delete NullLiteral(67)", "Delete InfixExpression: ==(68)", "Delete QualifiedName: children.length(69)", "Delete NumberLiteral: 0(70)", "Delete InfixExpression: ==(71)", "Delete InfixExpression: ||(72)", "Delete SimpleName: map(73)", "Delete QualifiedName: Collections.EMPTY_MAP(74)", "Delete Assignment: =(75)", "Delete ExpressionStatement(76)", "Delete SimpleName: constant(77)", "Delete BooleanLiteral: true(78)", "Delete Assignment: =(79)", "Delete ExpressionStatement(80)", "Delete Block(81)", "Delete SimpleName: constant(82)", "Delete SimpleName: isConstant(83)", "Delete MethodInvocation(84)", "Delete Assignment: =(85)", "Delete ExpressionStatement(86)", "Delete Block(87)", "Delete IfStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete TextElement: Gets the literal value.(91)", "Delete TagElement(92)", "Delete TextElement:  the array literal(93)", "Delete TagElement: @return(94)", "Delete Javadoc(95)", "Delete Modifier: public(96)", "Delete SimpleName: Object(97)", "Delete SimpleType: Object(98)", "Delete SimpleName: getLiteral(99)", "Delete SimpleName: map(100)", "Delete ReturnStatement(101)", "Delete Block(102)", "Delete MethodDeclaration(103)", "Delete TextElement: Sets the literal value only if the descendants of this node compose a constant(104)", "Delete TagElement(105)", "Delete SimpleName: literal(106)", "Delete TextElement:  the literal array value(107)", "Delete TagElement: @param(108)", "Delete SimpleName: IllegalArgumentException(109)", "Delete TextElement:  if literal is not an array or null(110)", "Delete TagElement: @throws(111)", "Delete Javadoc(112)", "Delete Modifier: public(113)", "Delete PrimitiveType: void(114)", "Delete SimpleName: setLiteral(115)", "Delete SimpleName: Object(116)", "Delete SimpleType: Object(117)", "Delete SimpleName: literal(118)", "Delete SingleVariableDeclaration(119)", "Delete SimpleName: constant(120)", "Delete SimpleName: literal(121)", "Delete SimpleName: Map(122)", "Delete SimpleType: Map(123)", "Delete WildcardType: ?(124)", "Delete WildcardType: ?(125)", "Delete ParameterizedType: Map<?,?>(126)", "Delete InstanceofExpression(127)", "Delete ParenthesizedExpression(128)", "Delete PrefixExpression: !(129)", "Delete SimpleName: IllegalArgumentException(130)", "Delete SimpleType: IllegalArgumentException(131)", "Delete SimpleName: literal(132)", "Delete SimpleName: getClass(133)", "Delete MethodInvocation(134)", "Delete StringLiteral: \" is not an array\"(135)", "Delete InfixExpression: +(136)", "Delete ClassInstanceCreation(137)", "Delete ThrowStatement(138)", "Delete Block(139)", "Delete IfStatement(140)", "Delete ThisExpression(141)", "Delete SimpleName: map(142)", "Delete FieldAccess(143)", "Delete SimpleName: Map(144)", "Delete SimpleType: Map(145)", "Delete WildcardType: ?(146)", "Delete WildcardType: ?(147)", "Delete ParameterizedType: Map<?,?>(148)", "Delete SimpleName: literal(149)", "Delete CastExpression(150)", "Delete Assignment: =(151)", "Delete ExpressionStatement(152)", "Delete Block(153)", "Delete IfStatement(154)", "Delete Block(155)", "Delete MethodDeclaration(156)", "Delete TagElement: @inheritDoc(157)", "Delete TextElement:  (158)", "Delete TagElement(159)", "Delete Javadoc(160)", "Delete SimpleName: Override(161)", "Delete MarkerAnnotation(162)", "Delete Modifier: public(163)", "Delete SimpleName: Object(164)", "Delete SimpleType: Object(165)", "Delete SimpleName: jjtAccept(166)", "Delete SimpleName: ParserVisitor(167)", "Delete SimpleType: ParserVisitor(168)", "Delete SimpleName: visitor(169)", "Delete SingleVariableDeclaration(170)", "Delete SimpleName: Object(171)", "Delete SimpleType: Object(172)", "Delete SimpleName: data(173)", "Delete SingleVariableDeclaration(174)", "Delete SimpleName: visitor(175)", "Delete SimpleName: visit(176)", "Delete ThisExpression(177)", "Delete SimpleName: data(178)", "Delete MethodInvocation(179)", "Delete ReturnStatement(180)", "Delete Block(181)", "Delete MethodDeclaration(182)", "Delete TypeDeclaration: class(183)"]}}, {"ASTNumberLiteral_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.BigDecimal", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.BigInteger", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: Number", "DEL SimpleName: length", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Number", "DEL Assignment: =", "DEL SimpleType: Parser", "DEL Block", "DEL SimpleName: charAt", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Assignment: =", "DEL Block", "DEL NumberLiteral: 10", "DEL SimpleName: substring", "DEL TryStatement", "DEL SimpleName: Parser", "DEL SimpleType: Integer", "DEL SuperConstructorInvocation", "DEL SimpleName: literal", "DEL ExpressionStatement", "DEL SimpleName: s", "DEL SwitchCase", "DEL SimpleName: NumberFormatException", "DEL SimpleType: Float", "DEL SimpleName: data", "DEL SwitchCase", "DEL ExpressionStatement", "DEL SimpleName: valueOf", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlNode", "DEL MethodInvocation", "DEL SwitchCase", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL NullLiteral", "DEL SwitchCase", "DEL Modifier: public", "DEL CharacterLiteral: 'H'", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL ParameterizedType: Class<?>", "DEL SimpleName: rclass", "DEL InfixExpression: ==", "DEL SimpleName: Number", "DEL Block", "DEL SimpleName: last", "DEL SimpleName: BigInteger", "DEL CatchClause", "DEL SwitchCase", "DEL SimpleName: result", "DEL SwitchCase", "DEL SimpleName: Object", "DEL Block", "DEL TextElement:  ", "DEL TagElement", "DEL SimpleName: s", "DEL TagElement", "DEL SimpleName: Double", "DEL TagElement", "DEL SuperConstructorInvocation", "DEL SimpleName: last", "DEL SimpleName: String", "DEL IfStatement", "DEL SimpleName: length", "DEL VariableDeclarationFragment", "DEL SimpleName: visitor", "DEL BreakStatement", "DEL Assignment: =", "DEL SimpleType: Number", "DEL PrimitiveType: int", "DEL SimpleName: String", "DEL SimpleName: rclass", "DEL NumberLiteral: 1", "DEL SimpleName: clazz", "DEL TagElement", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL SimpleName: valueOf", "DEL SimpleName: clazz", "DEL SimpleName: Override", "DEL TextElement: Originally from OGNL.", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL SimpleName: base", "DEL QualifiedName: JexlNode.Literal", "DEL ParenthesizedExpression", "DEL SimpleType: Number", "DEL Assignment: =", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: rclass", "DEL SimpleName: setNatural", "DEL Modifier: public", "DEL Modifier: protected", "DEL NumberLiteral: 1", "DEL SimpleName: result", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: charAt", "DEL SimpleName: NumberFormatException", "DEL BreakStatement", "DEL SimpleName: Integer", "DEL TagElement: @inheritDoc", "DEL TextElement: Sets this node as a real literal.", "DEL MethodInvocation", "DEL SimpleName: getLiteralClass", "DEL SimpleName: result", "DEL MethodInvocation", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: BigDecimal", "DEL Assignment: =", "DEL SimpleType: String", "DEL SimpleName: p", "DEL SimpleName: rclass", "DEL SimpleName: setReal", "DEL ExpressionStatement", "DEL InfixExpression: >", "DEL SimpleName: s", "DEL Modifier: public", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: result", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL Modifier: public", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: s", "DEL SimpleName: s", "DEL VariableDeclarationStatement", "DEL SimpleName: result", "DEL TypeLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: s", "DEL SimpleName: result", "DEL SimpleType: Class", "DEL VariableDeclarationStatement", "DEL SimpleName: s", "DEL SwitchCase", "DEL SimpleName: s", "DEL TextElement: Gets the literal value.", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: NumberFormatException", "DEL SimpleName: s", "DEL SimpleName: Class", "DEL TextElement:  ", "DEL TextElement: Sets this node as a natural literal.", "DEL SimpleType: JexlNode.Literal", "DEL SimpleName: Long", "DEL FieldDeclaration", "DEL CharacterLiteral: 'h'", "DEL MethodInvocation", "DEL TextElement:  the real as string", "DEL SimpleName: rclass", "DEL NumberLiteral: 8", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL TextElement:  the natural as string", "DEL InfixExpression: -", "DEL SimpleName: substring", "DEL ParameterizedType: Class<?>", "DEL SimpleName: length", "DEL SimpleName: base", "DEL Block", "DEL SimpleName: isConstant", "DEL SimpleName: charAt", "DEL SimpleName: getLiteral", "DEL WildcardType: ?", "DEL SimpleName: ParserVisitor", "DEL MethodInvocation", "DEL SimpleType: BigDecimal", "DEL SimpleName: base", "DEL CharacterLiteral: 'b'", "DEL SimpleName: take3", "DEL SingleVariableDeclaration", "DEL SimpleName: s", "DEL Block", "DEL SimpleName: id", "DEL SimpleName: id", "DEL Block", "DEL SimpleName: clazz", "DEL Block", "DEL TagElement: @return", "DEL Assignment: =", "DEL TextElement:  the number literal", "DEL TagElement", "DEL CharacterLiteral: 'L'", "DEL Modifier: public", "DEL CharacterLiteral: 'x'", "DEL SimpleName: result", "DEL SimpleName: isInteger", "DEL SwitchCase", "DEL SimpleName: Number", "DEL InfixExpression: ==", "DEL SimpleName: Class", "DEL CharacterLiteral: 'F'", "DEL InfixExpression: -", "DEL Block", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleName: s", "DEL TextElement: The type literal value. ", "DEL SimpleName: id", "DEL Assignment: =", "DEL SimpleName: result", "DEL SimpleName: JexlNode", "DEL BreakStatement", "DEL CharacterLiteral: 'X'", "DEL SimpleName: clazz", "DEL ExpressionStatement", "DEL SimpleName: Long", "DEL Assignment: =", "DEL SimpleName: BigInteger", "DEL Assignment: =", "DEL IfStatement", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL Javadoc", "DEL Assignment: =", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL CharacterLiteral: 'B'", "DEL SimpleType: Long", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: rclass", "DEL SimpleName: id", "DEL SimpleName: rclass", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: last", "DEL SimpleName: last", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL Modifier: final", "DEL Modifier: public", "DEL Assignment: =", "DEL Block", "DEL TryStatement", "DEL SimpleName: ASTNumberLiteral", "DEL CharacterLiteral: '0'", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL BreakStatement", "DEL NumberLiteral: 16", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: valueOf", "DEL SingleVariableDeclaration", "DEL SimpleName: base", "DEL SingleVariableDeclaration", "DEL SimpleName: s", "DEL SimpleName: NumberFormatException", "DEL Modifier: final", "DEL SimpleName: take2", "DEL SimpleName: s", "DEL NumberLiteral: 1", "DEL SimpleName: visit", "DEL SimpleType: Object", "DEL SwitchStatement", "DEL CharacterLiteral: 'l'", "DEL SimpleName: Double", "DEL CharacterLiteral: 'D'", "DEL CharacterLiteral: 'f'", "DEL ExpressionStatement", "DEL SimpleName: visitor", "DEL SimpleName: data", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleType: Class", "DEL SimpleName: result", "DEL ClassInstanceCreation", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleName: s", "DEL SimpleType: BigInteger", "DEL SimpleName: base", "DEL MarkerAnnotation", "DEL SimpleType: ParserVisitor", "DEL SimpleName: equals", "DEL SimpleName: s", "DEL SimpleType: Class", "DEL TryStatement", "DEL CharacterLiteral: 'd'", "DEL Javadoc", "DEL ParameterizedType: Class<?>", "DEL Modifier: public", "DEL TypeLiteral", "DEL MethodDeclaration", "DEL TypeLiteral", "DEL SimpleType: BigDecimal", "DEL NumberLiteral: 1", "DEL SimpleName: valueOf", "DEL SimpleName: Long", "DEL TextElement: The expected class. ", "DEL SimpleName: result", "DEL TypeDeclaration: class", "DEL SimpleType: NumberFormatException", "DEL ThisExpression", "DEL BreakStatement", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL NumberLiteral: 2", "DEL SimpleName: ASTNumberLiteral", "DEL SimpleType: NumberFormatException", "DEL SimpleName: base", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: take3", "DEL SimpleName: s", "DEL SimpleType: BigInteger", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: Double", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: s", "DEL MethodDeclaration", "DEL SimpleName: last", "DEL SimpleName: Float", "DEL SimpleName: base", "DEL InfixExpression: ==", "DEL SimpleName: rclass", "DEL MethodDeclaration", "DEL SwitchCase", "DEL FieldDeclaration", "DEL SimpleName: s", "DEL SimpleType: Number", "DEL CatchClause", "DEL SimpleName: last", "DEL SimpleType: Number", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: valueOf", "DEL PrimitiveType: void", "DEL SimpleName: Integer", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: BigDecimal", "DEL Block", "DEL SimpleName: take2", "DEL SimpleType: NumberFormatException", "DEL SimpleName: jjtAccept", "DEL SimpleName: result", "DEL Block", "DEL InfixExpression: ||", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL SwitchStatement", "DEL SimpleName: s", "DEL ParameterizedType: JexlNode.Literal<Number>", "DEL Block", "DEL SimpleName: base", "DEL SimpleType: Object", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: Override", "DEL SimpleName: literal", "DEL Block", "DEL SimpleName: rclass", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: s", "DEL NullLiteral", "DEL Assignment: =", "DEL SwitchCase", "DEL TypeLiteral", "DEL SimpleName: Integer", "DEL SimpleName: substring", "DEL SimpleName: charAt", "DEL SingleVariableDeclaration", "DEL SimpleName: rclass", "DEL MethodInvocation", "DEL Block", "DEL CatchClause", "DEL SimpleName: clazz", "DEL SimpleType: Integer", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: substring", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: literal", "DEL Block", "DEL TypeLiteral", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleName: Float", "DEL BooleanLiteral: true", "DEL SimpleName: last", "DEL TryStatement", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: literal", "DEL SimpleType: Double", "DEL SimpleName: s", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: valueOf", "DEL Javadoc", "DEL MethodDeclaration", "DEL SimpleName: Number", "DEL SimpleName: charAt", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleType: NumberFormatException", "DEL SimpleType: Number", "DEL TagElement", "DEL SimpleType: BigDecimal", "DEL ExpressionStatement", "DEL SimpleName: base", "DEL SimpleName: literal", "DEL VariableDeclarationFragment", "DEL SimpleName: s", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL SimpleName: p", "DEL SimpleName: result", "DEL MethodInvocation", "DEL SimpleName: result", "DEL WildcardType: ?", "DEL SimpleName: Class", "DEL SimpleName: BigInteger", "DEL Assignment: =", "DEL Modifier: public", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: s", "DEL Block", "DEL SimpleName: s", "DEL Block", "DEL Block", "DEL TextElement: Originally from OGNL.", "DEL SimpleType: BigInteger"]}]}}, {"ASTNumberLiteral_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.math.BigDecimal(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.math.BigInteger(4)", "Delete ImportDeclaration(5)", "Delete Modifier: public(6)", "Delete SimpleName: ASTNumberLiteral(7)", "Delete SimpleName: JexlNode(8)", "Delete SimpleType: JexlNode(9)", "Delete QualifiedName: JexlNode.Literal(10)", "Delete SimpleType: JexlNode.Literal(11)", "Delete SimpleName: Number(12)", "Delete SimpleType: Number(13)", "Delete ParameterizedType: JexlNode.Literal<Number>(14)", "Delete TextElement: The type literal value. (15)", "Delete TagElement(16)", "Delete Javadoc(17)", "Delete SimpleName: Number(18)", "Delete SimpleType: Number(19)", "Delete SimpleName: literal(20)", "Delete NullLiteral(21)", "Delete VariableDeclarationFragment(22)", "Delete FieldDeclaration(23)", "Delete TextElement: The expected class. (24)", "Delete TagElement(25)", "Delete Javadoc(26)", "Delete SimpleName: Class(27)", "Delete SimpleType: Class(28)", "Delete WildcardType: ?(29)", "Delete ParameterizedType: Class<?>(30)", "Delete SimpleName: clazz(31)", "Delete NullLiteral(32)", "Delete VariableDeclarationFragment(33)", "Delete FieldDeclaration(34)", "Delete Modifier: public(35)", "Delete SimpleName: ASTNumberLiteral(36)", "Delete PrimitiveType: int(37)", "Delete SimpleName: id(38)", "Delete SingleVariableDeclaration(39)", "Delete SimpleName: id(40)", "Delete SuperConstructorInvocation(41)", "Delete Block(42)", "Delete MethodDeclaration(43)", "Delete Modifier: public(44)", "Delete SimpleName: ASTNumberLiteral(45)", "Delete SimpleName: Parser(46)", "Delete SimpleType: Parser(47)", "Delete SimpleName: p(48)", "Delete SingleVariableDeclaration(49)", "Delete PrimitiveType: int(50)", "Delete SimpleName: id(51)", "Delete SingleVariableDeclaration(52)", "Delete SimpleName: p(53)", "Delete SimpleName: id(54)", "Delete SuperConstructorInvocation(55)", "Delete Block(56)", "Delete MethodDeclaration(57)", "Delete TextElement: Gets the literal value.(58)", "Delete TagElement(59)", "Delete TextElement:  the number literal(60)", "Delete TagElement: @return(61)", "Delete Javadoc(62)", "Delete Modifier: public(63)", "Delete SimpleName: Number(64)", "Delete SimpleType: Number(65)", "Delete SimpleName: getLiteral(66)", "Delete SimpleName: literal(67)", "Delete ReturnStatement(68)", "Delete Block(69)", "Delete MethodDeclaration(70)", "Delete TagElement: @inheritDoc(71)", "Delete TextElement:  (72)", "Delete TagElement(73)", "Delete Javadoc(74)", "Delete SimpleName: Override(75)", "Delete MarkerAnnotation(76)", "Delete Modifier: protected(77)", "Delete PrimitiveType: boolean(78)", "Delete SimpleName: isConstant(79)", "Delete PrimitiveType: boolean(80)", "Delete SimpleName: literal(81)", "Delete SingleVariableDeclaration(82)", "Delete BooleanLiteral: true(83)", "Delete ReturnStatement(84)", "Delete Block(85)", "Delete MethodDeclaration(86)", "Delete TagElement: @inheritDoc(87)", "Delete TextElement:  (88)", "Delete TagElement(89)", "Delete Javadoc(90)", "Delete SimpleName: Override(91)", "Delete MarkerAnnotation(92)", "Delete Modifier: public(93)", "Delete SimpleName: Object(94)", "Delete SimpleType: Object(95)", "Delete SimpleName: jjtAccept(96)", "Delete SimpleName: ParserVisitor(97)", "Delete SimpleType: ParserVisitor(98)", "Delete SimpleName: visitor(99)", "Delete SingleVariableDeclaration(100)", "Delete SimpleName: Object(101)", "Delete SimpleType: Object(102)", "Delete SimpleName: data(103)", "Delete SingleVariableDeclaration(104)", "Delete SimpleName: visitor(105)", "Delete SimpleName: visit(106)", "Delete ThisExpression(107)", "Delete SimpleName: data(108)", "Delete MethodInvocation(109)", "Delete ReturnStatement(110)", "Delete Block(111)", "Delete MethodDeclaration(112)", "Delete Modifier: public(113)", "Delete SimpleName: Class(114)", "Delete SimpleType: Class(115)", "Delete WildcardType: ?(116)", "Delete ParameterizedType: Class<?>(117)", "Delete SimpleName: getLiteralClass(118)", "Delete SimpleName: clazz(119)", "Delete ReturnStatement(120)", "Delete Block(121)", "Delete MethodDeclaration(122)", "Delete Modifier: public(123)", "Delete PrimitiveType: boolean(124)", "Delete SimpleName: isInteger(125)", "Delete SimpleName: Integer(126)", "Delete SimpleType: Integer(127)", "Delete TypeLiteral(128)", "Delete SimpleName: equals(129)", "Delete SimpleName: clazz(130)", "Delete MethodInvocation(131)", "Delete ReturnStatement(132)", "Delete Block(133)", "Delete MethodDeclaration(134)", "Delete TextElement: Sets this node as a natural literal.(135)", "Delete TextElement: Originally from OGNL.(136)", "Delete TagElement(137)", "Delete SimpleName: s(138)", "Delete TextElement:  the natural as string(139)", "Delete TagElement: @param(140)", "Delete Javadoc(141)", "Delete Modifier: public(142)", "Delete PrimitiveType: void(143)", "Delete SimpleName: setNatural(144)", "Delete SimpleName: String(145)", "Delete SimpleType: String(146)", "Delete SimpleName: s(147)", "Delete SingleVariableDeclaration(148)", "Delete SimpleName: Number(149)", "Delete SimpleType: Number(150)", "Delete SimpleName: result(151)", "Delete VariableDeclarationFragment(152)", "Delete VariableDeclarationStatement(153)", "Delete SimpleName: Class(154)", "Delete SimpleType: Class(155)", "Delete WildcardType: ?(156)", "Delete ParameterizedType: Class<?>(157)", "Delete SimpleName: rclass(158)", "Delete VariableDeclarationFragment(159)", "Delete VariableDeclarationStatement(160)", "Delete Modifier: final(161)", "Delete PrimitiveType: int(162)", "Delete SimpleName: base(163)", "Delete VariableDeclarationFragment(164)", "Delete VariableDeclarationStatement(165)", "Delete SimpleName: s(166)", "Delete SimpleName: charAt(167)", "Delete NumberLiteral: 0(168)", "Delete MethodInvocation(169)", "Delete CharacterLiteral: '0'(170)", "Delete InfixExpression: ==(171)", "Delete SimpleName: s(172)", "Delete SimpleName: length(173)", "Delete MethodInvocation(174)", "Delete NumberLiteral: 1(175)", "Delete InfixExpression: >(176)", "Delete SimpleName: s(177)", "Delete SimpleName: charAt(178)", "Delete NumberLiteral: 1(179)", "Delete MethodInvocation(180)", "Delete CharacterLiteral: 'x'(181)", "Delete InfixExpression: ==(182)", "Delete SimpleName: s(183)", "Delete SimpleName: charAt(184)", "Delete NumberLiteral: 1(185)", "Delete MethodInvocation(186)", "Delete CharacterLiteral: 'X'(187)", "Delete InfixExpression: ==(188)", "Delete InfixExpression: ||(189)", "Delete ParenthesizedExpression(190)", "Delete InfixExpression: &&(191)", "Delete ParenthesizedExpression(192)", "Delete SimpleName: base(193)", "Delete NumberLiteral: 16(194)", "Delete Assignment: =(195)", "Delete ExpressionStatement(196)", "Delete SimpleName: s(197)", "Delete SimpleName: s(198)", "Delete SimpleName: substring(199)", "Delete NumberLiteral: 2(200)", "Delete MethodInvocation(201)", "Delete Assignment: =(202)", "Delete ExpressionStatement(203)", "Delete Block(204)", "Delete SimpleName: base(205)", "Delete NumberLiteral: 8(206)", "Delete Assignment: =(207)", "Delete ExpressionStatement(208)", "Delete Block(209)", "Delete IfStatement(210)", "Delete Block(211)", "Delete SimpleName: base(212)", "Delete NumberLiteral: 10(213)", "Delete Assignment: =(214)", "Delete ExpressionStatement(215)", "Delete Block(216)", "Delete IfStatement(217)", "Delete Modifier: final(218)", "Delete PrimitiveType: int(219)", "Delete SimpleName: last(220)", "Delete SimpleName: s(221)", "Delete SimpleName: length(222)", "Delete MethodInvocation(223)", "Delete NumberLiteral: 1(224)", "Delete InfixExpression: -(225)", "Delete VariableDeclarationFragment(226)", "Delete VariableDeclarationStatement(227)", "Delete SimpleName: s(228)", "Delete SimpleName: charAt(229)", "Delete SimpleName: last(230)", "Delete MethodInvocation(231)", "Delete CharacterLiteral: 'l'(232)", "Delete SwitchCase(233)", "Delete CharacterLiteral: 'L'(234)", "Delete SwitchCase(235)", "Delete SimpleName: rclass(236)", "Delete SimpleName: Long(237)", "Delete SimpleType: Long(238)", "Delete TypeLiteral(239)", "Delete Assignment: =(240)", "Delete ExpressionStatement(241)", "Delete SimpleName: result(242)", "Delete SimpleName: Long(243)", "Delete SimpleName: valueOf(244)", "Delete SimpleName: s(245)", "Delete SimpleName: substring(246)", "Delete NumberLiteral: 0(247)", "Delete SimpleName: last(248)", "Delete MethodInvocation(249)", "Delete SimpleName: base(250)", "Delete MethodInvocation(251)", "Delete Assignment: =(252)", "Delete ExpressionStatement(253)", "Delete BreakStatement(254)", "Delete Block(255)", "Delete CharacterLiteral: 'h'(256)", "Delete SwitchCase(257)", "Delete CharacterLiteral: 'H'(258)", "Delete SwitchCase(259)", "Delete SimpleName: rclass(260)", "Delete SimpleName: BigInteger(261)", "Delete SimpleType: BigInteger(262)", "Delete TypeLiteral(263)", "Delete Assignment: =(264)", "Delete ExpressionStatement(265)", "Delete SimpleName: result(266)", "Delete SimpleName: BigInteger(267)", "Delete SimpleType: BigInteger(268)", "Delete SimpleName: s(269)", "Delete SimpleName: substring(270)", "Delete NumberLiteral: 0(271)", "Delete SimpleName: last(272)", "Delete MethodInvocation(273)", "Delete SimpleName: base(274)", "Delete ClassInstanceCreation(275)", "Delete Assignment: =(276)", "Delete ExpressionStatement(277)", "Delete BreakStatement(278)", "Delete Block(279)", "Delete SwitchCase(280)", "Delete SimpleName: rclass(281)", "Delete SimpleName: Integer(282)", "Delete SimpleType: Integer(283)", "Delete TypeLiteral(284)", "Delete Assignment: =(285)", "Delete ExpressionStatement(286)", "Delete SimpleName: result(287)", "Delete SimpleName: Integer(288)", "Delete SimpleName: valueOf(289)", "Delete SimpleName: s(290)", "Delete SimpleName: base(291)", "Delete MethodInvocation(292)", "Delete Assignment: =(293)", "Delete ExpressionStatement(294)", "Delete Block(295)", "Delete SimpleName: NumberFormatException(296)", "Delete SimpleType: NumberFormatException(297)", "Delete SimpleName: take2(298)", "Delete SingleVariableDeclaration(299)", "Delete SimpleName: result(300)", "Delete SimpleName: Long(301)", "Delete SimpleName: valueOf(302)", "Delete SimpleName: s(303)", "Delete SimpleName: base(304)", "Delete MethodInvocation(305)", "Delete Assignment: =(306)", "Delete ExpressionStatement(307)", "Delete Block(308)", "Delete SimpleName: NumberFormatException(309)", "Delete SimpleType: NumberFormatException(310)", "Delete SimpleName: take3(311)", "Delete SingleVariableDeclaration(312)", "Delete SimpleName: result(313)", "Delete SimpleName: BigInteger(314)", "Delete SimpleType: BigInteger(315)", "Delete SimpleName: s(316)", "Delete SimpleName: base(317)", "Delete ClassInstanceCreation(318)", "Delete Assignment: =(319)", "Delete ExpressionStatement(320)", "Delete Block(321)", "Delete CatchClause(322)", "Delete TryStatement(323)", "Delete Block(324)", "Delete CatchClause(325)", "Delete TryStatement(326)", "Delete Block(327)", "Delete SwitchStatement(328)", "Delete SimpleName: literal(329)", "Delete SimpleName: result(330)", "Delete Assignment: =(331)", "Delete ExpressionStatement(332)", "Delete SimpleName: clazz(333)", "Delete SimpleName: rclass(334)", "Delete Assignment: =(335)", "Delete ExpressionStatement(336)", "Delete Block(337)", "Delete MethodDeclaration(338)", "Delete TextElement: Sets this node as a real literal.(339)", "Delete TextElement: Originally from OGNL.(340)", "Delete TagElement(341)", "Delete SimpleName: s(342)", "Delete TextElement:  the real as string(343)", "Delete TagElement: @param(344)", "Delete Javadoc(345)", "Delete Modifier: public(346)", "Delete PrimitiveType: void(347)", "Delete SimpleName: setReal(348)", "Delete SimpleName: String(349)", "Delete SimpleType: String(350)", "Delete SimpleName: s(351)", "Delete SingleVariableDeclaration(352)", "Delete SimpleName: Number(353)", "Delete SimpleType: Number(354)", "Delete SimpleName: result(355)", "Delete VariableDeclarationFragment(356)", "Delete VariableDeclarationStatement(357)", "Delete SimpleName: Class(358)", "Delete SimpleType: Class(359)", "Delete WildcardType: ?(360)", "Delete ParameterizedType: Class<?>(361)", "Delete SimpleName: rclass(362)", "Delete VariableDeclarationFragment(363)", "Delete VariableDeclarationStatement(364)", "Delete Modifier: final(365)", "Delete PrimitiveType: int(366)", "Delete SimpleName: last(367)", "Delete SimpleName: s(368)", "Delete SimpleName: length(369)", "Delete MethodInvocation(370)", "Delete NumberLiteral: 1(371)", "Delete InfixExpression: -(372)", "Delete VariableDeclarationFragment(373)", "Delete VariableDeclarationStatement(374)", "Delete SimpleName: s(375)", "Delete SimpleName: charAt(376)", "Delete SimpleName: last(377)", "Delete MethodInvocation(378)", "Delete CharacterLiteral: 'b'(379)", "Delete SwitchCase(380)", "Delete CharacterLiteral: 'B'(381)", "Delete SwitchCase(382)", "Delete SimpleName: result(383)", "Delete SimpleName: BigDecimal(384)", "Delete SimpleType: BigDecimal(385)", "Delete SimpleName: s(386)", "Delete SimpleName: substring(387)", "Delete NumberLiteral: 0(388)", "Delete SimpleName: last(389)", "Delete MethodInvocation(390)", "Delete ClassInstanceCreation(391)", "Delete Assignment: =(392)", "Delete ExpressionStatement(393)", "Delete SimpleName: rclass(394)", "Delete SimpleName: BigDecimal(395)", "Delete SimpleType: BigDecimal(396)", "Delete TypeLiteral(397)", "Delete Assignment: =(398)", "Delete ExpressionStatement(399)", "Delete BreakStatement(400)", "Delete Block(401)", "Delete CharacterLiteral: 'd'(402)", "Delete SwitchCase(403)", "Delete CharacterLiteral: 'D'(404)", "Delete SwitchCase(405)", "Delete SimpleName: rclass(406)", "Delete SimpleName: Double(407)", "Delete SimpleType: Double(408)", "Delete TypeLiteral(409)", "Delete Assignment: =(410)", "Delete ExpressionStatement(411)", "Delete SimpleName: result(412)", "Delete SimpleName: Double(413)", "Delete SimpleName: valueOf(414)", "Delete SimpleName: s(415)", "Delete MethodInvocation(416)", "Delete Assignment: =(417)", "Delete ExpressionStatement(418)", "Delete BreakStatement(419)", "Delete Block(420)", "Delete CharacterLiteral: 'f'(421)", "Delete SwitchCase(422)", "Delete CharacterLiteral: 'F'(423)", "Delete SwitchCase(424)", "Delete SwitchCase(425)", "Delete SimpleName: rclass(426)", "Delete SimpleName: Float(427)", "Delete SimpleType: Float(428)", "Delete TypeLiteral(429)", "Delete Assignment: =(430)", "Delete ExpressionStatement(431)", "Delete SimpleName: result(432)", "Delete SimpleName: Float(433)", "Delete SimpleName: valueOf(434)", "Delete SimpleName: s(435)", "Delete MethodInvocation(436)", "Delete Assignment: =(437)", "Delete ExpressionStatement(438)", "Delete Block(439)", "Delete SimpleName: NumberFormatException(440)", "Delete SimpleType: NumberFormatException(441)", "Delete SimpleName: take2(442)", "Delete SingleVariableDeclaration(443)", "Delete SimpleName: result(444)", "Delete SimpleName: Double(445)", "Delete SimpleName: valueOf(446)", "Delete SimpleName: s(447)", "Delete MethodInvocation(448)", "Delete Assignment: =(449)", "Delete ExpressionStatement(450)", "Delete Block(451)", "Delete SimpleName: NumberFormatException(452)", "Delete SimpleType: NumberFormatException(453)", "Delete SimpleName: take3(454)", "Delete SingleVariableDeclaration(455)", "Delete SimpleName: result(456)", "Delete SimpleName: BigDecimal(457)", "Delete SimpleType: BigDecimal(458)", "Delete SimpleName: s(459)", "Delete ClassInstanceCreation(460)", "Delete Assignment: =(461)", "Delete ExpressionStatement(462)", "Delete Block(463)", "Delete CatchClause(464)", "Delete TryStatement(465)", "Delete Block(466)", "Delete CatchClause(467)", "Delete TryStatement(468)", "Delete BreakStatement(469)", "Delete Block(470)", "Delete SwitchStatement(471)", "Delete SimpleName: literal(472)", "Delete SimpleName: result(473)", "Delete Assignment: =(474)", "Delete ExpressionStatement(475)", "Delete SimpleName: clazz(476)", "Delete SimpleName: rclass(477)", "Delete Assignment: =(478)", "Delete ExpressionStatement(479)", "Delete Block(480)", "Delete MethodDeclaration(481)", "Delete TypeDeclaration: class(482)"]}}, {"ASTReferenceExpression_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: Parser", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleName: id", "DEL SimpleName: visitor", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL TextElement: Accept the visitor. ", "DEL SimpleName: p", "DEL MethodDeclaration", "DEL SimpleType: ASTArrayAccess", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: data", "DEL SimpleName: visit", "DEL Modifier: public", "DEL SimpleName: Object", "DEL SimpleName: ASTReferenceExpression", "DEL SuperConstructorInvocation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: ParserVisitor", "DEL Javadoc", "DEL Modifier: public", "DEL SuperConstructorInvocation", "DEL PrimitiveType: int", "DEL SimpleName: id", "DEL SimpleName: Object", "DEL SimpleName: jjtAccept", "DEL SimpleName: Parser", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: ASTReferenceExpression", "DEL SimpleName: visitor", "DEL SimpleName: data", "DEL PrimitiveType: int", "DEL SimpleName: id", "DEL Block", "DEL SimpleType: ParserVisitor", "DEL Modifier: public", "DEL Block", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL ThisExpression", "DEL TagElement", "DEL Block", "DEL SimpleName: ASTArrayAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: p", "DEL SimpleName: ASTReferenceExpression", "DEL SimpleName: Override", "DEL SimpleName: id", "DEL SimpleType: Object", "DEL TypeDeclaration: class"]}]}}, {"ASTReferenceExpression_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete Modifier: public(2)", "Delete Modifier: final(3)", "Delete SimpleName: ASTReferenceExpression(4)", "Delete SimpleName: ASTArrayAccess(5)", "Delete SimpleType: ASTArrayAccess(6)", "Delete Modifier: public(7)", "Delete SimpleName: ASTReferenceExpression(8)", "Delete PrimitiveType: int(9)", "Delete SimpleName: id(10)", "Delete SingleVariableDeclaration(11)", "Delete SimpleName: id(12)", "Delete SuperConstructorInvocation(13)", "Delete Block(14)", "Delete MethodDeclaration(15)", "Delete Modifier: public(16)", "Delete SimpleName: ASTReferenceExpression(17)", "Delete SimpleName: Parser(18)", "Delete SimpleType: Parser(19)", "Delete SimpleName: p(20)", "Delete SingleVariableDeclaration(21)", "Delete PrimitiveType: int(22)", "Delete SimpleName: id(23)", "Delete SingleVariableDeclaration(24)", "Delete SimpleName: p(25)", "Delete SimpleName: id(26)", "Delete SuperConstructorInvocation(27)", "Delete Block(28)", "Delete MethodDeclaration(29)", "Delete TextElement: Accept the visitor. (30)", "Delete TagElement(31)", "Delete Javadoc(32)", "Delete SimpleName: Override(33)", "Delete MarkerAnnotation(34)", "Delete Modifier: public(35)", "Delete SimpleName: Object(36)", "Delete SimpleType: Object(37)", "Delete SimpleName: jjtAccept(38)", "Delete SimpleName: ParserVisitor(39)", "Delete SimpleType: ParserVisitor(40)", "Delete SimpleName: visitor(41)", "Delete SingleVariableDeclaration(42)", "Delete SimpleName: Object(43)", "Delete SimpleType: Object(44)", "Delete SimpleName: data(45)", "Delete SingleVariableDeclaration(46)", "Delete SimpleName: visitor(47)", "Delete SimpleName: visit(48)", "Delete ThisExpression(49)", "Delete SimpleName: data(50)", "Delete MethodInvocation(51)", "Delete ReturnStatement(52)", "Delete Block(53)", "Delete MethodDeclaration(54)", "Delete TypeDeclaration: class(55)"]}}, {"ASTStringLiteral_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL SimpleName: id", "DEL SimpleName: image", "DEL ReturnStatement", "DEL SimpleName: getLiteral", "DEL SimpleType: String", "DEL QualifiedName: JexlNode.Literal", "DEL Modifier: final", "DEL SimpleName: ASTStringLiteral", "DEL SimpleName: isConstant", "DEL SimpleType: ParserVisitor", "DEL TypeDeclaration: class", "DEL SimpleType: Object", "DEL SimpleName: String", "DEL PrimitiveType: boolean", "DEL SimpleName: data", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL BooleanLiteral: true", "DEL Modifier: public", "DEL SimpleType: Parser", "DEL ThisExpression", "DEL ReturnStatement", "DEL SimpleName: id", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: ASTStringLiteral", "DEL SimpleName: JexlNode", "DEL TagElement", "DEL SimpleName: Override", "DEL SimpleType: JexlNode.Literal", "DEL SimpleType: String", "DEL ParameterizedType: JexlNode.Literal<String>", "DEL SimpleName: id", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: data", "DEL Block", "DEL SimpleType: JexlNode", "DEL MethodDeclaration", "DEL SimpleName: literal", "DEL SimpleName: Object", "DEL Block", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL TextElement: Gets the literal value.", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL SimpleName: visit", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: ASTStringLiteral", "DEL SimpleName: jjtAccept", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SuperConstructorInvocation", "DEL SimpleType: Object", "DEL SimpleName: visitor", "DEL Block", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL TextElement:  the string literal", "DEL TagElement: @inheritDoc", "DEL SimpleName: p", "DEL SuperConstructorInvocation", "DEL Modifier: public", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL TextElement:  ", "DEL Modifier: public", "DEL Block", "DEL SimpleName: p", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: Parser", "DEL MarkerAnnotation", "DEL Modifier: protected", "DEL SimpleName: visitor", "DEL SimpleName: id", "DEL SimpleName: ParserVisitor", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL TagElement: @inheritDoc", "DEL SimpleName: Object", "DEL TagElement"]}]}}, {"ASTStringLiteral_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete Modifier: public(2)", "Delete Modifier: final(3)", "Delete SimpleName: ASTStringLiteral(4)", "Delete SimpleName: JexlNode(5)", "Delete SimpleType: JexlNode(6)", "Delete QualifiedName: JexlNode.Literal(7)", "Delete SimpleType: JexlNode.Literal(8)", "Delete SimpleName: String(9)", "Delete SimpleType: String(10)", "Delete ParameterizedType: JexlNode.Literal<String>(11)", "Delete Modifier: public(12)", "Delete SimpleName: ASTStringLiteral(13)", "Delete PrimitiveType: int(14)", "Delete SimpleName: id(15)", "Delete SingleVariableDeclaration(16)", "Delete SimpleName: id(17)", "Delete SuperConstructorInvocation(18)", "Delete Block(19)", "Delete MethodDeclaration(20)", "Delete Modifier: public(21)", "Delete SimpleName: ASTStringLiteral(22)", "Delete SimpleName: Parser(23)", "Delete SimpleType: Parser(24)", "Delete SimpleName: p(25)", "Delete SingleVariableDeclaration(26)", "Delete PrimitiveType: int(27)", "Delete SimpleName: id(28)", "Delete SingleVariableDeclaration(29)", "Delete SimpleName: p(30)", "Delete SimpleName: id(31)", "Delete SuperConstructorInvocation(32)", "Delete Block(33)", "Delete MethodDeclaration(34)", "Delete TextElement: Gets the literal value.(35)", "Delete TagElement(36)", "Delete TextElement:  the string literal(37)", "Delete TagElement: @return(38)", "Delete Javadoc(39)", "Delete Modifier: public(40)", "Delete SimpleName: String(41)", "Delete SimpleType: String(42)", "Delete SimpleName: getLiteral(43)", "Delete SimpleName: image(44)", "Delete ReturnStatement(45)", "Delete Block(46)", "Delete MethodDeclaration(47)", "Delete TagElement: @inheritDoc(48)", "Delete TextElement:  (49)", "Delete TagElement(50)", "Delete Javadoc(51)", "Delete SimpleName: Override(52)", "Delete MarkerAnnotation(53)", "Delete Modifier: protected(54)", "Delete PrimitiveType: boolean(55)", "Delete SimpleName: isConstant(56)", "Delete PrimitiveType: boolean(57)", "Delete SimpleName: literal(58)", "Delete SingleVariableDeclaration(59)", "Delete BooleanLiteral: true(60)", "Delete ReturnStatement(61)", "Delete Block(62)", "Delete MethodDeclaration(63)", "Delete TagElement: @inheritDoc(64)", "Delete TextElement:  (65)", "Delete TagElement(66)", "Delete Javadoc(67)", "Delete SimpleName: Override(68)", "Delete MarkerAnnotation(69)", "Delete Modifier: public(70)", "Delete SimpleName: Object(71)", "Delete SimpleType: Object(72)", "Delete SimpleName: jjtAccept(73)", "Delete SimpleName: ParserVisitor(74)", "Delete SimpleType: ParserVisitor(75)", "Delete SimpleName: visitor(76)", "Delete SingleVariableDeclaration(77)", "Delete SimpleName: Object(78)", "Delete SimpleType: Object(79)", "Delete SimpleName: data(80)", "Delete SingleVariableDeclaration(81)", "Delete SimpleName: visitor(82)", "Delete SimpleName: visit(83)", "Delete ThisExpression(84)", "Delete SimpleName: data(85)", "Delete MethodInvocation(86)", "Delete ReturnStatement(87)", "Delete Block(88)", "Delete MethodDeclaration(89)", "Delete TypeDeclaration: class(90)"]}}, {"ASTVar_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: p", "DEL SimpleName: visitor", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: ASTVar", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: id", "DEL ReturnStatement", "DEL SimpleName: ASTVar", "DEL SimpleType: ParserVisitor", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: ASTVar", "DEL PrimitiveType: int", "DEL TextElement: Declares a local variable.", "DEL Javadoc", "DEL SimpleName: Object", "DEL SimpleName: Object", "DEL Modifier: public", "DEL Block", "DEL SimpleName: id", "DEL SingleVariableDeclaration", "DEL SimpleName: visitor", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL SimpleType: Parser", "DEL Modifier: public", "DEL SimpleName: data", "DEL SimpleName: Parser", "DEL ThisExpression", "DEL SimpleName: id", "DEL SuperConstructorInvocation", "DEL SimpleType: Object", "DEL SimpleName: ParserVisitor", "DEL MethodDeclaration", "DEL SimpleName: data", "DEL SimpleName: jjtAccept", "DEL Block", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: p", "DEL SimpleName: id", "DEL SimpleName: ASTIdentifier", "DEL SimpleType: Object", "DEL SuperConstructorInvocation", "DEL SimpleName: visit"]}]}}, {"ASTVar_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Declares a local variable.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete Modifier: public(5)", "Delete SimpleName: ASTVar(6)", "Delete SimpleName: ASTIdentifier(7)", "Delete SimpleType: ASTIdentifier(8)", "Delete Modifier: public(9)", "Delete SimpleName: ASTVar(10)", "Delete PrimitiveType: int(11)", "Delete SimpleName: id(12)", "Delete SingleVariableDeclaration(13)", "Delete SimpleName: id(14)", "Delete SuperConstructorInvocation(15)", "Delete Block(16)", "Delete MethodDeclaration(17)", "Delete Modifier: public(18)", "Delete SimpleName: ASTVar(19)", "Delete SimpleName: Parser(20)", "Delete SimpleType: Parser(21)", "Delete SimpleName: p(22)", "Delete SingleVariableDeclaration(23)", "Delete PrimitiveType: int(24)", "Delete SimpleName: id(25)", "Delete SingleVariableDeclaration(26)", "Delete SimpleName: p(27)", "Delete SimpleName: id(28)", "Delete SuperConstructorInvocation(29)", "Delete Block(30)", "Delete MethodDeclaration(31)", "Delete SimpleName: Override(32)", "Delete MarkerAnnotation(33)", "Delete Modifier: public(34)", "Delete SimpleName: Object(35)", "Delete SimpleType: Object(36)", "Delete SimpleName: jjtAccept(37)", "Delete SimpleName: ParserVisitor(38)", "Delete SimpleType: ParserVisitor(39)", "Delete SimpleName: visitor(40)", "Delete SingleVariableDeclaration(41)", "Delete SimpleName: Object(42)", "Delete SimpleType: Object(43)", "Delete SimpleName: data(44)", "Delete SingleVariableDeclaration(45)", "Delete SimpleName: visitor(46)", "Delete SimpleName: visit(47)", "Delete ThisExpression(48)", "Delete SimpleName: data(49)", "Delete MethodInvocation(50)", "Delete ReturnStatement(51)", "Delete Block(52)", "Delete MethodDeclaration(53)", "Delete TypeDeclaration: class(54)"]}}, {"JexlNode_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.DebugInfo"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlInfo"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: String", "DEL Block", "DEL SimpleName: getLiteral", "DEL TextElement: A marker interface for literals.", "DEL TextElement: token value. ", "DEL SimpleType: JexlInfo", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: child", "DEL WildcardType: ?", "DEL SimpleName: JexlNode", "DEL SimpleName: JexlNode", "DEL SimpleName: SimpleNode", "DEL StringLiteral: \"\"", "DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL SimpleName: debugInfo", "DEL ConditionalExpression", "DEL SimpleType: T", "DEL SimpleType: DebugInfo", "DEL PrefixExpression: !", "DEL Modifier: public", "DEL SimpleName: ASTMapEntry", "DEL Javadoc", "DEL Assignment: =", "DEL SimpleType: ASTMapEntry", "DEL Block", "DEL TagElement", "DEL QualifiedName: JexlNode.Literal", "DEL InstanceofExpression", "DEL SimpleName: info", "DEL SimpleName: is", "DEL SimpleName: DebugInfo", "DEL SimpleName: DebugInfo", "DEL SimpleName: isConstant", "DEL MethodInvocation", "DEL TextElement:  ", "DEL Javadoc", "DEL SimpleType: Parser", "DEL NullLiteral", "DEL SimpleName: DebugInfo", "DEL Modifier: public", "DEL SimpleName: JexlNode", "DEL SimpleName: is", "DEL FieldDeclaration", "DEL ThisExpression", "DEL SimpleType: DebugInfo", "DEL SimpleName: DebugInfo", "DEL SimpleName: id", "DEL IfStatement", "DEL TagElement: @return", "DEL SimpleType: JexlNode.Literal", "DEL SimpleName: Parser", "DEL Block", "DEL IfStatement", "DEL Modifier: public", "DEL TextElement: Whether this node is a constant node", "DEL Modifier: public", "DEL ExpressionStatement", "DEL TextElement: Its value can not change after the first evaluation and can be cached indefinitely.", "DEL SimpleName: debugString", "DEL InstanceofExpression", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: isConstant", "DEL SimpleName: child", "DEL SimpleName: literal", "DEL TypeDeclaration: interface", "DEL Block", "DEL Block", "DEL Javadoc", "DEL Block", "DEL SimpleName: id", "DEL SimpleType: DebugInfo", "DEL TagElement", "DEL TagElement: @since", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL CastExpression", "DEL SimpleName: isConstant", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: true", "DEL MethodDeclaration", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: info", "DEL SimpleName: JexlNode", "DEL Modifier: protected", "DEL Block", "DEL SimpleName: node", "DEL IfStatement", "DEL Modifier: abstract", "DEL TextElement: <", "DEL ReturnStatement", "DEL Modifier: public", "DEL IfStatement", "DEL TagElement", "DEL MethodInvocation", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: isConstant", "DEL ReturnStatement", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: child", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: children", "DEL SimpleName: p", "DEL TagElement", "DEL Block", "DEL Block", "DEL TextElement: Base class for parser nodes - holds an 'image' of the token for later use.", "DEL SimpleName: T", "DEL NullLiteral", "DEL SuperConstructorInvocation", "DEL Javadoc", "DEL Block", "DEL NullLiteral", "DEL TextElement:  the literal type", "DEL TextElement:  2.0", "DEL SimpleName: info", "DEL MethodDeclaration", "DEL SimpleName: JexlNode", "DEL SuperConstructorInvocation", "DEL SimpleName: p", "DEL SimpleName: is", "DEL TagElement", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL Block", "DEL Block", "DEL TextElement: >", "DEL QualifiedName: node.value", "DEL Block", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL SimpleName: id", "DEL SimpleName: node", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL SimpleName: child", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: child", "DEL PrimitiveType: boolean", "DEL SimpleName: Literal", "DEL SimpleName: node", "DEL InstanceofExpression", "DEL SimpleType: DebugInfo", "DEL IfStatement", "DEL InfixExpression: !=", "DEL SimpleType: JexlNode", "DEL SimpleName: node", "DEL SimpleType: String", "DEL Javadoc", "DEL BooleanLiteral: false", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: isConstant", "DEL SimpleType: String", "DEL PrimitiveType: boolean", "DEL SimpleName: T", "DEL MethodDeclaration", "DEL SimpleName: debugInfo", "DEL SimpleName: literal", "DEL IfStatement", "DEL SimpleName: debugString", "DEL TextElement:  ", "DEL SimpleName: JexlInfo", "DEL SimpleName: child", "DEL ReturnStatement", "DEL WhileStatement", "DEL SimpleName: isConstant", "DEL SimpleName: image", "DEL BooleanLiteral: false", "DEL Block", "DEL MethodDeclaration", "DEL ParameterizedType: JexlNode.Literal<?>", "DEL PrimitiveType: boolean", "DEL SimpleType: ASTReference", "DEL TagElement: @inheritDoc", "DEL QualifiedName: node.value", "DEL IfStatement", "DEL BooleanLiteral: false", "DEL MethodDeclaration", "DEL InstanceofExpression", "DEL TagElement: @inheritDoc", "DEL SimpleType: SimpleNode", "DEL TagElement", "DEL SimpleName: id", "DEL MethodInvocation", "DEL TextElement:  true if constant, false otherwise", "DEL SingleVariableDeclaration", "DEL SimpleName: is", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL TypeParameter", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleType: JexlNode", "DEL ReturnStatement", "DEL SimpleName: ASTReference", "DEL SimpleName: children", "DEL SimpleName: T", "DEL SimpleName: jjtGetParent", "DEL NullLiteral"]}]}}, {"JexlNode_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.DebugInfo(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.jexl2.JexlInfo(4)", "Delete ImportDeclaration(5)", "Delete TextElement: Base class for parser nodes - holds an 'image' of the token for later use.(6)", "Delete TagElement(7)", "Delete TextElement:  2.0(8)", "Delete TagElement: @since(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete Modifier: abstract(12)", "Delete SimpleName: JexlNode(13)", "Delete SimpleName: SimpleNode(14)", "Delete SimpleType: SimpleNode(15)", "Delete SimpleName: JexlInfo(16)", "Delete SimpleType: JexlInfo(17)", "Delete TextElement: A marker interface for literals.(18)", "Delete TagElement(19)", "Delete TextElement: <(20)", "Delete SimpleName: T(21)", "Delete TextElement: >(22)", "Delete TextElement:  the literal type(23)", "Delete TagElement: @param(24)", "Delete Javadoc(25)", "Delete Modifier: public(26)", "Delete SimpleName: Literal(27)", "Delete SimpleName: T(28)", "Delete TypeParameter(29)", "Delete SimpleName: T(30)", "Delete SimpleType: T(31)", "Delete SimpleName: getLiteral(32)", "Delete MethodDeclaration(33)", "Delete TypeDeclaration: interface(34)", "Delete TextElement: token value. (35)", "Delete TagElement(36)", "Delete Javadoc(37)", "Delete Modifier: public(38)", "Delete SimpleName: String(39)", "Delete SimpleType: String(40)", "Delete SimpleName: image(41)", "Delete VariableDeclarationFragment(42)", "Delete FieldDeclaration(43)", "Delete Modifier: public(44)", "Delete SimpleName: JexlNode(45)", "Delete PrimitiveType: int(46)", "Delete SimpleName: id(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: id(49)", "Delete SuperConstructorInvocation(50)", "Delete Block(51)", "Delete MethodDeclaration(52)", "Delete Modifier: public(53)", "Delete SimpleName: JexlNode(54)", "Delete SimpleName: Parser(55)", "Delete SimpleType: Parser(56)", "Delete SimpleName: p(57)", "Delete SingleVariableDeclaration(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: id(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: p(62)", "Delete SimpleName: id(63)", "Delete SuperConstructorInvocation(64)", "Delete Block(65)", "Delete MethodDeclaration(66)", "Delete TagElement: @inheritDoc(67)", "Delete TextElement:  (68)", "Delete TagElement(69)", "Delete Javadoc(70)", "Delete Modifier: public(71)", "Delete SimpleName: DebugInfo(72)", "Delete SimpleType: DebugInfo(73)", "Delete SimpleName: debugInfo(74)", "Delete SimpleName: JexlNode(75)", "Delete SimpleType: JexlNode(76)", "Delete SimpleName: node(77)", "Delete ThisExpression(78)", "Delete VariableDeclarationFragment(79)", "Delete VariableDeclarationStatement(80)", "Delete SimpleName: node(81)", "Delete NullLiteral(82)", "Delete InfixExpression: !=(83)", "Delete QualifiedName: node.value(84)", "Delete SimpleName: DebugInfo(85)", "Delete SimpleType: DebugInfo(86)", "Delete InstanceofExpression(87)", "Delete SimpleName: DebugInfo(88)", "Delete SimpleType: DebugInfo(89)", "Delete QualifiedName: node.value(90)", "Delete CastExpression(91)", "Delete ReturnStatement(92)", "Delete Block(93)", "Delete IfStatement(94)", "Delete SimpleName: node(95)", "Delete SimpleName: node(96)", "Delete SimpleName: jjtGetParent(97)", "Delete MethodInvocation(98)", "Delete Assignment: =(99)", "Delete ExpressionStatement(100)", "Delete Block(101)", "Delete WhileStatement(102)", "Delete NullLiteral(103)", "Delete ReturnStatement(104)", "Delete Block(105)", "Delete MethodDeclaration(106)", "Delete TagElement: @inheritDoc(107)", "Delete TextElement:  (108)", "Delete TagElement(109)", "Delete Javadoc(110)", "Delete Modifier: public(111)", "Delete SimpleName: String(112)", "Delete SimpleType: String(113)", "Delete SimpleName: debugString(114)", "Delete SimpleName: DebugInfo(115)", "Delete SimpleType: DebugInfo(116)", "Delete SimpleName: info(117)", "Delete SimpleName: debugInfo(118)", "Delete MethodInvocation(119)", "Delete VariableDeclarationFragment(120)", "Delete VariableDeclarationStatement(121)", "Delete SimpleName: info(122)", "Delete NullLiteral(123)", "Delete InfixExpression: !=(124)", "Delete SimpleName: info(125)", "Delete SimpleName: debugString(126)", "Delete MethodInvocation(127)", "Delete StringLiteral: \"\"(128)", "Delete ConditionalExpression(129)", "Delete ReturnStatement(130)", "Delete Block(131)", "Delete MethodDeclaration(132)", "Delete TextElement: Whether this node is a constant node(133)", "Delete TextElement: Its value can not change after the first evaluation and can be cached indefinitely.(134)", "Delete TagElement(135)", "Delete TextElement:  true if constant, false otherwise(136)", "Delete TagElement: @return(137)", "Delete Javadoc(138)", "Delete Modifier: public(139)", "Delete Modifier: final(140)", "Delete PrimitiveType: boolean(141)", "Delete SimpleName: isConstant(142)", "Delete SimpleName: isConstant(143)", "Delete ThisExpression(144)", "Delete QualifiedName: JexlNode.Literal(145)", "Delete SimpleType: JexlNode.Literal(146)", "Delete WildcardType: ?(147)", "Delete ParameterizedType: JexlNode.Literal<?>(148)", "Delete InstanceofExpression(149)", "Delete MethodInvocation(150)", "Delete ReturnStatement(151)", "Delete Block(152)", "Delete MethodDeclaration(153)", "Delete Modifier: protected(154)", "Delete PrimitiveType: boolean(155)", "Delete SimpleName: isConstant(156)", "Delete PrimitiveType: boolean(157)", "Delete SimpleName: literal(158)", "Delete SingleVariableDeclaration(159)", "Delete SimpleName: literal(160)", "Delete SimpleName: children(161)", "Delete NullLiteral(162)", "Delete InfixExpression: !=(163)", "Delete SimpleName: JexlNode(164)", "Delete SimpleType: JexlNode(165)", "Delete SimpleName: child(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: children(168)", "Delete SimpleName: child(169)", "Delete SimpleName: ASTReference(170)", "Delete SimpleType: ASTReference(171)", "Delete InstanceofExpression(172)", "Delete PrimitiveType: boolean(173)", "Delete SimpleName: is(174)", "Delete SimpleName: child(175)", "Delete SimpleName: isConstant(176)", "Delete BooleanLiteral: true(177)", "Delete MethodInvocation(178)", "Delete VariableDeclarationFragment(179)", "Delete VariableDeclarationStatement(180)", "Delete SimpleName: is(181)", "Delete PrefixExpression: !(182)", "Delete BooleanLiteral: false(183)", "Delete ReturnStatement(184)", "Delete Block(185)", "Delete IfStatement(186)", "Delete Block(187)", "Delete SimpleName: child(188)", "Delete SimpleName: ASTMapEntry(189)", "Delete SimpleType: ASTMapEntry(190)", "Delete InstanceofExpression(191)", "Delete PrimitiveType: boolean(192)", "Delete SimpleName: is(193)", "Delete SimpleName: child(194)", "Delete SimpleName: isConstant(195)", "Delete BooleanLiteral: true(196)", "Delete MethodInvocation(197)", "Delete VariableDeclarationFragment(198)", "Delete VariableDeclarationStatement(199)", "Delete SimpleName: is(200)", "Delete PrefixExpression: !(201)", "Delete BooleanLiteral: false(202)", "Delete ReturnStatement(203)", "Delete Block(204)", "Delete IfStatement(205)", "Delete Block(206)", "Delete SimpleName: child(207)", "Delete SimpleName: isConstant(208)", "Delete MethodInvocation(209)", "Delete PrefixExpression: !(210)", "Delete BooleanLiteral: false(211)", "Delete ReturnStatement(212)", "Delete Block(213)", "Delete IfStatement(214)", "Delete IfStatement(215)", "Delete IfStatement(216)", "Delete Block(217)", "Delete EnhancedForStatement(218)", "Delete Block(219)", "Delete IfStatement(220)", "Delete BooleanLiteral: true(221)", "Delete ReturnStatement(222)", "Delete Block(223)", "Delete IfStatement(224)", "Delete BooleanLiteral: false(225)", "Delete ReturnStatement(226)", "Delete Block(227)", "Delete MethodDeclaration(228)", "Delete TypeDeclaration: class(229)"]}}, {"JexlParser_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.DebugInfo", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlEngine", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlException"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Javadoc", "DEL SimpleName: image", "DEL TextElement: <p>", "DEL TextElement: Each parameter is associated to a register and is materialized as an offset in the registers array used", "DEL TextElement: <p>", "DEL ClassInstanceCreation", "DEL TextElement: Since local variables create new named registers, it is important to regain access after", "DEL TagElement: @return", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: String", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL TextElement:  the identifier image", "DEL QualifiedName: JexlEngine.Scope", "DEL SimpleName: n", "DEL SimpleName: Integer", "DEL SimpleName: identifier", "DEL TextElement:  the image", "DEL SimpleName: identifier", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL Block", "DEL PrimitiveType: boolean", "DEL TextElement: The map of named registers aka script parameters.", "DEL SimpleName: checkVariable", "DEL SimpleName: getToken", "DEL Assignment: =", "DEL TagElement: @return", "DEL TextElement: The base class for parsing, manages the parameter/local variable frame.", "DEL TextElement: Sets the frame to use bythis parser.", "DEL TextElement:  the node", "DEL QualifiedName: JexlException.Parsing", "DEL SimpleType: JexlEngine.Scope", "DEL SimpleName: theFrame", "DEL QualifiedName: tok.beginLine", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: identifier", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: frame", "DEL SimpleName: n", "DEL SingleVariableDeclaration", "DEL SimpleName: Identifier", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlNode", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: Token", "DEL SimpleName: image", "DEL SingleVariableDeclaration", "DEL SimpleName: image", "DEL Modifier: protected", "DEL SimpleName: frame", "DEL SimpleName: image", "DEL SimpleName: image", "DEL TagElement: @param", "DEL TagElement: @param", "DEL SimpleName: image", "DEL SimpleName: JexlNode", "DEL SimpleName: top", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ThisExpression", "DEL QualifiedName: tok.image", "DEL Block", "DEL TextElement: <p>", "DEL SingleVariableDeclaration", "DEL TextElement: Default implementation does nothing but is overriden by generated code.", "DEL SingleVariableDeclaration", "DEL SimpleName: Identifier", "DEL TextElement: Gets the frame used by this parser.", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleType: ASTAmbiguous", "DEL SimpleName: getFrame", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: n", "DEL Block", "DEL SimpleType: JexlNode", "DEL SimpleName: register", "DEL TextElement: Declares a local variable.", "DEL SimpleName: image", "DEL TagElement", "DEL StringLiteral: \"Ambiguous statement, missing ';' between expressions\"", "DEL TagElement", "DEL SimpleName: register", "DEL MethodDeclaration", "DEL SimpleType: StringParser", "DEL SimpleName: top", "DEL ClassInstanceCreation", "DEL TextElement:  subclasses may throw this ", "DEL ReturnStatement", "DEL SimpleName: declareVariable", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL TextElement:  the register map", "DEL SimpleType: JexlEngine.Scope", "DEL Block", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: ASTVar", "DEL TagElement", "DEL SimpleType: DebugInfo", "DEL ThrowStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: frame", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: ASTAmbiguous", "DEL SimpleType: Integer", "DEL SimpleName: debugInfo", "DEL TagElement", "DEL Assignment: =", "DEL Modifier: public", "DEL TextElement: This is used to allow parameters to be declared before parsing.", "DEL SimpleName: declareVariable", "DEL InstanceofExpression", "DEL TextElement: </p>", "DEL SimpleType: String", "DEL TextElement: parsing to known which / how-many registers are needed.", "DEL SimpleName: jjtreeCloseNodeScope", "DEL SimpleName: identifier", "DEL QualifiedName: JexlEngine.Scope", "DEL SimpleType: Token", "DEL SimpleName: intValue", "DEL Block", "DEL SimpleName: String", "DEL Javadoc", "DEL PrimitiveType: int", "DEL SimpleName: image", "DEL NullLiteral", "DEL Javadoc", "DEL BooleanLiteral: false", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: ParseException", "DEL FieldDeclaration", "DEL SimpleName: register", "DEL SimpleName: StringParser", "DEL SimpleName: register", "DEL Modifier: public", "DEL TextElement: This method creates an new entry in the named register map.", "DEL Assignment: =", "DEL SimpleName: dbgInfo", "DEL SimpleName: theFrame", "DEL Dimension", "DEL Modifier: public", "DEL SimpleName: setRegister", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: ParseException", "DEL SimpleType: ASTVar", "DEL TextElement: during evaluation.", "DEL SimpleName: dbgInfo", "DEL SimpleName: getToken", "DEL TextElement:  the identifier used to declare", "DEL VariableDeclarationFragment", "DEL SimpleName: ASTIdentifier", "DEL SimpleName: dbgInfo", "DEL Modifier: public", "DEL SimpleName: Token", "DEL SimpleName: ParseException", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: setRegister", "DEL Block", "DEL CastExpression", "DEL MethodDeclaration", "DEL ArrayType: String[]", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: frame", "DEL SimpleType: JexlNode", "DEL VariableDeclarationFragment", "DEL SimpleName: frame", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL TagElement: @throws", "DEL TextElement: </p>", "DEL VariableDeclarationStatement", "DEL TextElement:  the identifier", "DEL SimpleName: frame", "DEL QualifiedName: identifier.image", "DEL Javadoc", "DEL SimpleName: dbgInfo", "DEL SimpleName: DebugInfo", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL TextElement:  the variable name", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL SimpleType: ParseException", "DEL NumberLiteral: 0", "DEL SimpleName: n", "DEL MethodInvocation", "DEL SimpleName: getRegister", "DEL MethodInvocation", "DEL SimpleName: identifier", "DEL InfixExpression: >", "DEL TagElement", "DEL SimpleType: JexlEngine.Scope", "DEL SimpleName: String", "DEL SimpleName: theFrame", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: register", "DEL SimpleName: tok", "DEL MethodDeclaration", "DEL SimpleType: Integer", "DEL SimpleName: frame", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleType: JexlException.Parsing", "DEL SimpleName: setFrame", "DEL SimpleType: String", "DEL IfStatement", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: n", "DEL TagElement: @throws", "DEL NullLiteral", "DEL NumberLiteral: 0", "DEL SimpleName: identifier", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: Token", "DEL TypeDeclaration: class", "DEL TagElement: @author", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: Identifier", "DEL TagElement", "DEL NullLiteral", "DEL SimpleName: tok", "DEL SimpleName: jjtreeOpenNodeScope", "DEL TagElement", "DEL Block", "DEL SimpleType: DebugInfo", "DEL SimpleType: ParseException", "DEL TagElement: @param", "DEL ReturnStatement", "DEL TextElement:  the named register map", "DEL QualifiedName: JexlEngine.Scope", "DEL SimpleName: Integer", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL QualifiedName: tok.beginColumn", "DEL SimpleName: DebugInfo", "DEL NullLiteral", "DEL SimpleType: ParseException", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: intValue", "DEL SimpleType: String", "DEL Assignment: =", "DEL TextElement: Ambiguous statement detector.", "DEL Block", "DEL SimpleType: JexlEngine.Scope", "DEL Modifier: final", "DEL TextElement:  henri", "DEL Block", "DEL IfStatement", "DEL TextElement: Checks whether an identifier is a local variable or argument, ie stored in a register. ", "DEL SimpleType: ASTIdentifier", "DEL SimpleName: n", "DEL SimpleName: frame", "DEL SimpleName: ParseException", "DEL ExpressionStatement", "DEL TextElement:  ", "DEL QualifiedName: JexlEngine.Scope", "DEL Block", "DEL SimpleName: ParseException", "DEL SimpleName: JexlParser", "DEL SimpleName: index", "DEL SimpleName: jjtGetNumChildren", "DEL TextElement:  whether the identifier is beginning an l/r value"]}]}}, {"JexlParser_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl2.DebugInfo(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.commons.jexl2.JexlException(6)", "Delete ImportDeclaration(7)", "Delete TextElement: The base class for parsing, manages the parameter/local variable frame.(8)", "Delete TagElement(9)", "Delete TextElement:  henri(10)", "Delete TagElement: @author(11)", "Delete Javadoc(12)", "Delete Modifier: public(13)", "Delete SimpleName: JexlParser(14)", "Delete SimpleName: StringParser(15)", "Delete SimpleType: StringParser(16)", "Delete TextElement: The map of named registers aka script parameters.(17)", "Delete TextElement: Each parameter is associated to a register and is materialized as an offset in the registers array used(18)", "Delete TextElement: during evaluation.(19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete Modifier: protected(22)", "Delete QualifiedName: JexlEngine.Scope(23)", "Delete SimpleType: JexlEngine.Scope(24)", "Delete SimpleName: frame(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: Sets the frame to use bythis parser.(28)", "Delete TextElement: <p>(29)", "Delete TextElement: This is used to allow parameters to be declared before parsing.(30)", "Delete TextElement: </p>(31)", "Delete TagElement(32)", "Delete SimpleName: theFrame(33)", "Delete TextElement:  the register map(34)", "Delete TagElement: @param(35)", "Delete Javadoc(36)", "Delete Modifier: public(37)", "Delete PrimitiveType: void(38)", "Delete SimpleName: setFrame(39)", "Delete QualifiedName: JexlEngine.Scope(40)", "Delete SimpleType: JexlEngine.Scope(41)", "Delete SimpleName: theFrame(42)", "Delete SingleVariableDeclaration(43)", "Delete SimpleName: frame(44)", "Delete SimpleName: theFrame(45)", "Delete Assignment: =(46)", "Delete ExpressionStatement(47)", "Delete Block(48)", "Delete MethodDeclaration(49)", "Delete TextElement: Gets the frame used by this parser.(50)", "Delete TextElement: <p>(51)", "Delete TextElement: Since local variables create new named registers, it is important to regain access after(52)", "Delete TextElement: parsing to known which / how-many registers are needed.(53)", "Delete TextElement: </p>(54)", "Delete TagElement(55)", "Delete TextElement:  the named register map(56)", "Delete TagElement: @return(57)", "Delete Javadoc(58)", "Delete Modifier: public(59)", "Delete QualifiedName: JexlEngine.Scope(60)", "Delete SimpleType: JexlEngine.Scope(61)", "Delete SimpleName: getFrame(62)", "Delete SimpleName: frame(63)", "Delete ReturnStatement(64)", "Delete Block(65)", "Delete MethodDeclaration(66)", "Delete TextElement: Checks whether an identifier is a local variable or argument, ie stored in a register. (67)", "Delete TagElement(68)", "Delete SimpleName: identifier(69)", "Delete TextElement:  the identifier(70)", "Delete TagElement: @param(71)", "Delete SimpleName: image(72)", "Delete TextElement:  the identifier image(73)", "Delete TagElement: @param(74)", "Delete TextElement:  the image(75)", "Delete TagElement: @return(76)", "Delete Javadoc(77)", "Delete Modifier: public(78)", "Delete SimpleName: String(79)", "Delete SimpleType: String(80)", "Delete SimpleName: checkVariable(81)", "Delete SimpleName: ASTIdentifier(82)", "Delete SimpleType: ASTIdentifier(83)", "Delete SimpleName: identifier(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: String(86)", "Delete SimpleType: String(87)", "Delete SimpleName: image(88)", "Delete SingleVariableDeclaration(89)", "Delete SimpleName: frame(90)", "Delete NullLiteral(91)", "Delete InfixExpression: !=(92)", "Delete SimpleName: Integer(93)", "Delete SimpleType: Integer(94)", "Delete SimpleName: register(95)", "Delete SimpleName: frame(96)", "Delete SimpleName: getRegister(97)", "Delete SimpleName: image(98)", "Delete MethodInvocation(99)", "Delete VariableDeclarationFragment(100)", "Delete VariableDeclarationStatement(101)", "Delete SimpleName: register(102)", "Delete NullLiteral(103)", "Delete InfixExpression: !=(104)", "Delete SimpleName: identifier(105)", "Delete SimpleName: setRegister(106)", "Delete SimpleName: register(107)", "Delete SimpleName: intValue(108)", "Delete MethodInvocation(109)", "Delete MethodInvocation(110)", "Delete ExpressionStatement(111)", "Delete Block(112)", "Delete IfStatement(113)", "Delete Block(114)", "Delete IfStatement(115)", "Delete SimpleName: image(116)", "Delete ReturnStatement(117)", "Delete Block(118)", "Delete MethodDeclaration(119)", "Delete TextElement: Declares a local variable.(120)", "Delete TextElement: <p>(121)", "Delete TextElement: This method creates an new entry in the named register map.(122)", "Delete TextElement: </p>(123)", "Delete TagElement(124)", "Delete SimpleName: identifier(125)", "Delete TextElement:  the identifier used to declare(126)", "Delete TagElement: @param(127)", "Delete SimpleName: image(128)", "Delete TextElement:  the variable name(129)", "Delete TagElement: @param(130)", "Delete Javadoc(131)", "Delete Modifier: public(132)", "Delete PrimitiveType: void(133)", "Delete SimpleName: declareVariable(134)", "Delete SimpleName: ASTVar(135)", "Delete SimpleType: ASTVar(136)", "Delete SimpleName: identifier(137)", "Delete SingleVariableDeclaration(138)", "Delete SimpleName: String(139)", "Delete SimpleType: String(140)", "Delete SimpleName: image(141)", "Delete SingleVariableDeclaration(142)", "Delete SimpleName: frame(143)", "Delete NullLiteral(144)", "Delete InfixExpression: ==(145)", "Delete SimpleName: frame(146)", "Delete QualifiedName: JexlEngine.Scope(147)", "Delete SimpleType: JexlEngine.Scope(148)", "Delete SimpleName: String(149)", "Delete SimpleType: String(150)", "Delete Dimension(151)", "Delete ArrayType: String[](152)", "Delete NullLiteral(153)", "Delete CastExpression(154)", "Delete ClassInstanceCreation(155)", "Delete Assignment: =(156)", "Delete ExpressionStatement(157)", "Delete Block(158)", "Delete IfStatement(159)", "Delete SimpleName: Integer(160)", "Delete SimpleType: Integer(161)", "Delete SimpleName: register(162)", "Delete SimpleName: frame(163)", "Delete SimpleName: declareVariable(164)", "Delete SimpleName: image(165)", "Delete MethodInvocation(166)", "Delete VariableDeclarationFragment(167)", "Delete VariableDeclarationStatement(168)", "Delete SimpleName: identifier(169)", "Delete SimpleName: setRegister(170)", "Delete SimpleName: register(171)", "Delete SimpleName: intValue(172)", "Delete MethodInvocation(173)", "Delete MethodInvocation(174)", "Delete ExpressionStatement(175)", "Delete QualifiedName: identifier.image(176)", "Delete SimpleName: image(177)", "Delete Assignment: =(178)", "Delete ExpressionStatement(179)", "Delete Block(180)", "Delete MethodDeclaration(181)", "Delete TextElement: Default implementation does nothing but is overriden by generated code.(182)", "Delete TagElement(183)", "Delete SimpleName: top(184)", "Delete TextElement:  whether the identifier is beginning an l/r value(185)", "Delete TagElement: @param(186)", "Delete SimpleName: ParseException(187)", "Delete TextElement:  subclasses may throw this (188)", "Delete TagElement: @throws(189)", "Delete Javadoc(190)", "Delete Modifier: public(191)", "Delete PrimitiveType: void(192)", "Delete SimpleName: Identifier(193)", "Delete PrimitiveType: boolean(194)", "Delete SimpleName: top(195)", "Delete SingleVariableDeclaration(196)", "Delete SimpleName: ParseException(197)", "Delete SimpleType: ParseException(198)", "Delete Block(199)", "Delete MethodDeclaration(200)", "Delete Modifier: final(201)", "Delete Modifier: public(202)", "Delete PrimitiveType: void(203)", "Delete SimpleName: Identifier(204)", "Delete SimpleName: ParseException(205)", "Delete SimpleType: ParseException(206)", "Delete SimpleName: Identifier(207)", "Delete BooleanLiteral: false(208)", "Delete MethodInvocation(209)", "Delete ExpressionStatement(210)", "Delete Block(211)", "Delete MethodDeclaration(212)", "Delete Modifier: public(213)", "Delete SimpleName: Token(214)", "Delete SimpleType: Token(215)", "Delete SimpleName: getToken(216)", "Delete PrimitiveType: int(217)", "Delete SimpleName: index(218)", "Delete SingleVariableDeclaration(219)", "Delete NullLiteral(220)", "Delete ReturnStatement(221)", "Delete Block(222)", "Delete MethodDeclaration(223)", "Delete PrimitiveType: void(224)", "Delete SimpleName: jjtreeOpenNodeScope(225)", "Delete SimpleName: JexlNode(226)", "Delete SimpleType: JexlNode(227)", "Delete SimpleName: n(228)", "Delete SingleVariableDeclaration(229)", "Delete Block(230)", "Delete MethodDeclaration(231)", "Delete TextElement: Ambiguous statement detector.(232)", "Delete TagElement(233)", "Delete SimpleName: n(234)", "Delete TextElement:  the node(235)", "Delete TagElement: @param(236)", "Delete SimpleName: ParseException(237)", "Delete TextElement:  (238)", "Delete TagElement: @throws(239)", "Delete Javadoc(240)", "Delete PrimitiveType: void(241)", "Delete SimpleName: jjtreeCloseNodeScope(242)", "Delete SimpleName: JexlNode(243)", "Delete SimpleType: JexlNode(244)", "Delete SimpleName: n(245)", "Delete SingleVariableDeclaration(246)", "Delete SimpleName: ParseException(247)", "Delete SimpleType: ParseException(248)", "Delete SimpleName: n(249)", "Delete SimpleName: ASTAmbiguous(250)", "Delete SimpleType: ASTAmbiguous(251)", "Delete InstanceofExpression(252)", "Delete SimpleName: n(253)", "Delete SimpleName: jjtGetNumChildren(254)", "Delete MethodInvocation(255)", "Delete NumberLiteral: 0(256)", "Delete InfixExpression: >(257)", "Delete InfixExpression: &&(258)", "Delete SimpleName: DebugInfo(259)", "Delete SimpleType: DebugInfo(260)", "Delete SimpleName: dbgInfo(261)", "Delete NullLiteral(262)", "Delete VariableDeclarationFragment(263)", "Delete VariableDeclarationStatement(264)", "Delete SimpleName: Token(265)", "Delete SimpleType: Token(266)", "Delete SimpleName: tok(267)", "Delete ThisExpression(268)", "Delete SimpleName: getToken(269)", "Delete NumberLiteral: 0(270)", "Delete MethodInvocation(271)", "Delete VariableDeclarationFragment(272)", "Delete VariableDeclarationStatement(273)", "Delete SimpleName: tok(274)", "Delete NullLiteral(275)", "Delete InfixExpression: !=(276)", "Delete SimpleName: dbgInfo(277)", "Delete SimpleName: DebugInfo(278)", "Delete SimpleType: DebugInfo(279)", "Delete QualifiedName: tok.image(280)", "Delete QualifiedName: tok.beginLine(281)", "Delete QualifiedName: tok.beginColumn(282)", "Delete ClassInstanceCreation(283)", "Delete Assignment: =(284)", "Delete ExpressionStatement(285)", "Delete Block(286)", "Delete SimpleName: dbgInfo(287)", "Delete SimpleName: n(288)", "Delete SimpleName: debugInfo(289)", "Delete MethodInvocation(290)", "Delete Assignment: =(291)", "Delete ExpressionStatement(292)", "Delete Block(293)", "Delete IfStatement(294)", "Delete QualifiedName: JexlException.Parsing(295)", "Delete SimpleType: JexlException.Parsing(296)", "Delete SimpleName: dbgInfo(297)", "Delete StringLiteral: \"Ambiguous statement, missing ';' between expressions\"(298)", "Delete NullLiteral(299)", "Delete ClassInstanceCreation(300)", "Delete ThrowStatement(301)", "Delete Block(302)", "Delete IfStatement(303)", "Delete Block(304)", "Delete MethodDeclaration(305)", "Delete TypeDeclaration: class(306)"]}}, {"ParseException_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL TextElement: Gets the column number.", "DEL MethodDeclaration", "DEL SimpleName: tokenImage", "DEL SimpleName: ParseException", "DEL TagElement", "DEL SimpleName: currentToken", "DEL Block", "DEL ReturnStatement", "DEL TextElement: a new object of this type with the fields \"currentToken\",", "DEL PrimitiveType: int", "DEL TagElement", "DEL TextElement: Constructor with message. ", "DEL TextElement:  line number.", "DEL TextElement: followng this token will (therefore) be the first error token.", "DEL TextElement:  This is a reference to the \"tokenImage\" array of the generated", "DEL SimpleType: String", "DEL Block", "DEL Modifier: private", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL TextElement: Default ctor.", "DEL StringLiteral: \"\"", "DEL TextElement:  Each entry in this array is an array of integers.  Each array", "DEL SimpleName: getColumn", "DEL TextElement: This constructor is used by the method \"generateParseException\"", "DEL Javadoc", "DEL TextElement: in the generated parser.  Calling this constructor generates", "DEL QualifiedName: tok.beginLine", "DEL MethodDeclaration", "DEL SimpleType: Token", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: message", "DEL Modifier: public", "DEL Javadoc", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL ArrayType: String[]", "DEL Modifier: public", "DEL MethodDeclaration", "DEL Javadoc", "DEL Javadoc", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL TagElement", "DEL Dimension", "DEL TypeDeclaration: class", "DEL Dimension", "DEL Javadoc", "DEL Modifier: final", "DEL Modifier: private", "DEL StringLiteral: \"parse error\"", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL ReturnStatement", "DEL TextElement:  This is the last token that has been consumed successfully.  If", "DEL Javadoc", "DEL SimpleName: line", "DEL TagElement: @param", "DEL Javadoc", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: Token", "DEL TextElement: Gets the line number.", "DEL SuperConstructorInvocation", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL FieldDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: ParseException", "DEL SimpleName: getLine", "DEL SimpleName: String", "DEL TextElement: Error line.", "DEL SimpleType: String", "DEL TextElement: defined in the generated ...Constants interface.", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Token", "DEL SimpleType: Exception", "DEL TagElement", "DEL TextElement: Last correct input before error occurs.", "DEL QualifiedName: tok.image", "DEL TagElement", "DEL PrefixExpression: -", "DEL TagElement", "DEL TextElement: values) that is expected at this point of the parse.", "DEL VariableDeclarationStatement", "DEL PrimitiveType: int", "DEL SimpleName: after", "DEL SimpleName: line", "DEL SimpleName: expectedTokenSequences", "DEL TextElement: Error column.", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleName: message", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL QualifiedName: tok.beginColumn", "DEL SimpleName: serialVersionUID", "DEL SimpleName: line", "DEL TagElement", "DEL TextElement: The version identifier.", "DEL NumberLiteral: 1", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: ParseException", "DEL Modifier: public", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL Modifier: public", "DEL TextElement: parser within which the parse error occurred.  This array is", "DEL NumberLiteral: 1", "DEL SimpleName: tok", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: tokenImage", "DEL Dimension", "DEL PrefixExpression: -", "DEL ExpressionStatement", "DEL TextElement: Gets the last correct input.", "DEL QualifiedName: currentToken.next", "DEL Modifier: public", "DEL TagElement", "DEL Modifier: static", "DEL SimpleName: getAfter", "DEL SimpleName: expectedTokenSequences", "DEL SimpleName: String", "DEL Javadoc", "DEL ReturnStatement", "DEL TagElement", "DEL TextElement: This exception is thrown when parse errors are encountered.", "DEL SimpleName: Exception", "DEL Block", "DEL Assignment: =", "DEL SuperConstructorInvocation", "DEL Block", "DEL TextElement:  the string after which the error occured", "DEL Block", "DEL NumberLiteral: 1L", "DEL ArrayType: int[][]", "DEL FieldDeclaration", "DEL SimpleName: column", "DEL TextElement:  the column.", "DEL SimpleType: Token", "DEL SimpleName: after", "DEL VariableDeclarationFragment", "DEL TextElement: this object has been created due to a parse error, the token", "DEL Block", "DEL SimpleName: currentToken", "DEL PrimitiveType: long", "DEL SuperConstructorInvocation", "DEL SimpleName: after", "DEL SimpleName: column", "DEL Javadoc", "DEL SimpleName: ParseException", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL TextElement: \"expectedTokenSequences\", and \"tokenImage\" set.", "DEL TextElement: of integers represents a sequence of tokens (by their ordinal", "DEL SimpleName: column", "DEL PrimitiveType: int"]}]}}, {"ParseException_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete TextElement: This exception is thrown when parse errors are encountered.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete Modifier: public(5)", "Delete SimpleName: ParseException(6)", "Delete SimpleName: Exception(7)", "Delete SimpleType: Exception(8)", "Delete TextElement: The version identifier.(9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete Modifier: private(12)", "Delete Modifier: static(13)", "Delete Modifier: final(14)", "Delete PrimitiveType: long(15)", "Delete SimpleName: serialVersionUID(16)", "Delete NumberLiteral: 1L(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete TextElement: Last correct input before error occurs.(20)", "Delete TagElement(21)", "Delete Javadoc(22)", "Delete Modifier: private(23)", "Delete SimpleName: String(24)", "Delete SimpleType: String(25)", "Delete SimpleName: after(26)", "Delete StringLiteral: \"\"(27)", "Delete VariableDeclarationFragment(28)", "Delete FieldDeclaration(29)", "Delete TextElement: Error line.(30)", "Delete TagElement(31)", "Delete Javadoc(32)", "Delete Modifier: private(33)", "Delete PrimitiveType: int(34)", "Delete SimpleName: line(35)", "Delete NumberLiteral: 1(36)", "Delete PrefixExpression: -(37)", "Delete VariableDeclarationFragment(38)", "Delete FieldDeclaration(39)", "Delete TextElement: Error column.(40)", "Delete TagElement(41)", "Delete Javadoc(42)", "Delete Modifier: private(43)", "Delete PrimitiveType: int(44)", "Delete SimpleName: column(45)", "Delete NumberLiteral: 1(46)", "Delete PrefixExpression: -(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete TextElement: Gets the line number.(50)", "Delete TagElement(51)", "Delete TextElement:  line number.(52)", "Delete TagElement: @return(53)", "Delete Javadoc(54)", "Delete Modifier: public(55)", "Delete PrimitiveType: int(56)", "Delete SimpleName: getLine(57)", "Delete SimpleName: line(58)", "Delete ReturnStatement(59)", "Delete Block(60)", "Delete MethodDeclaration(61)", "Delete TextElement: Gets the column number.(62)", "Delete TagElement(63)", "Delete TextElement:  the column.(64)", "Delete TagElement: @return(65)", "Delete Javadoc(66)", "Delete Modifier: public(67)", "Delete PrimitiveType: int(68)", "Delete SimpleName: getColumn(69)", "Delete SimpleName: column(70)", "Delete ReturnStatement(71)", "Delete Block(72)", "Delete MethodDeclaration(73)", "Delete TextElement: Gets the last correct input.(74)", "Delete TagElement(75)", "Delete TextElement:  the string after which the error occured(76)", "Delete TagElement: @return(77)", "Delete Javadoc(78)", "Delete Modifier: public(79)", "Delete SimpleName: String(80)", "Delete SimpleType: String(81)", "Delete SimpleName: getAfter(82)", "Delete SimpleName: after(83)", "Delete ReturnStatement(84)", "Delete Block(85)", "Delete MethodDeclaration(86)", "Delete TextElement: This constructor is used by the method \"generateParseException\"(87)", "Delete TextElement: in the generated parser.  Calling this constructor generates(88)", "Delete TextElement: a new object of this type with the fields \"currentToken\",(89)", "Delete TextElement: \"expectedTokenSequences\", and \"tokenImage\" set.(90)", "Delete TagElement(91)", "Delete SimpleName: currentToken(92)", "Delete TextElement:  This is the last token that has been consumed successfully.  If(93)", "Delete TextElement: this object has been created due to a parse error, the token(94)", "Delete TextElement: followng this token will (therefore) be the first error token.(95)", "Delete TagElement: @param(96)", "Delete SimpleName: expectedTokenSequences(97)", "Delete TextElement:  Each entry in this array is an array of integers.  Each array(98)", "Delete TextElement: of integers represents a sequence of tokens (by their ordinal(99)", "Delete TextElement: values) that is expected at this point of the parse.(100)", "Delete TagElement: @param(101)", "Delete SimpleName: tokenImage(102)", "Delete TextElement:  This is a reference to the \"tokenImage\" array of the generated(103)", "Delete TextElement: parser within which the parse error occurred.  This array is(104)", "Delete TextElement: defined in the generated ...Constants interface.(105)", "Delete TagElement: @param(106)", "Delete Javadoc(107)", "Delete Modifier: public(108)", "Delete SimpleName: ParseException(109)", "Delete SimpleName: Token(110)", "Delete SimpleType: Token(111)", "Delete SimpleName: currentToken(112)", "Delete SingleVariableDeclaration(113)", "Delete PrimitiveType: int(114)", "Delete Dimension(115)", "Delete Dimension(116)", "Delete ArrayType: int[][](117)", "Delete SimpleName: expectedTokenSequences(118)", "Delete SingleVariableDeclaration(119)", "Delete SimpleName: String(120)", "Delete SimpleType: String(121)", "Delete Dimension(122)", "Delete ArrayType: String[](123)", "Delete SimpleName: tokenImage(124)", "Delete SingleVariableDeclaration(125)", "Delete StringLiteral: \"parse error\"(126)", "Delete SuperConstructorInvocation(127)", "Delete SimpleName: Token(128)", "Delete SimpleType: Token(129)", "Delete SimpleName: tok(130)", "Delete QualifiedName: currentToken.next(131)", "Delete VariableDeclarationFragment(132)", "Delete VariableDeclarationStatement(133)", "Delete SimpleName: after(134)", "Delete QualifiedName: tok.image(135)", "Delete Assignment: =(136)", "Delete ExpressionStatement(137)", "Delete SimpleName: line(138)", "Delete QualifiedName: tok.beginLine(139)", "Delete Assignment: =(140)", "Delete ExpressionStatement(141)", "Delete SimpleName: column(142)", "Delete QualifiedName: tok.beginColumn(143)", "Delete Assignment: =(144)", "Delete ExpressionStatement(145)", "Delete Block(146)", "Delete MethodDeclaration(147)", "Delete TextElement: Default ctor.(148)", "Delete TagElement(149)", "Delete Javadoc(150)", "Delete Modifier: public(151)", "Delete SimpleName: ParseException(152)", "Delete SuperConstructorInvocation(153)", "Delete Block(154)", "Delete MethodDeclaration(155)", "Delete TextElement: Constructor with message. (156)", "Delete TagElement(157)", "Delete Javadoc(158)", "Delete Modifier: public(159)", "Delete SimpleName: ParseException(160)", "Delete SimpleName: String(161)", "Delete SimpleType: String(162)", "Delete SimpleName: message(163)", "Delete SingleVariableDeclaration(164)", "Delete SimpleName: message(165)", "Delete SuperConstructorInvocation(166)", "Delete Block(167)", "Delete MethodDeclaration(168)", "Delete TypeDeclaration: class(169)"]}}, {"SimpleNode_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser", "DEL PackageDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL TagElement", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: children", "DEL TextElement: Gets this node value.", "DEL Javadoc", "DEL TagElement: @param", "DEL TextElement:  the node type identifier", "DEL Block", "DEL TextElement: volatile value so it can be used as a last evaluation cache. ", "DEL TextElement: Gets this node number of children.", "DEL ArrayType: JexlNode[]", "DEL SimpleName: jjtGetParent", "DEL SimpleName: String", "DEL TextElement:  the node type identifier", "DEL SimpleName: parent", "DEL NullLiteral", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: Object", "DEL TextElement:  the parser instance", "DEL ExpressionStatement", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SimpleName: Node", "DEL SingleVariableDeclaration", "DEL QualifiedName: children.length", "DEL MethodDeclaration", "DEL SimpleName: Node", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL Javadoc", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: jjtGetValue", "DEL SimpleName: SimpleNode", "DEL SimpleName: visit", "DEL FieldDeclaration", "DEL SimpleName: id", "DEL SimpleName: value", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL ArrayType: JexlNode[]", "DEL TextElement:  contextual data", "DEL SimpleName: i", "DEL Modifier: public", "DEL SimpleName: n", "DEL Block", "DEL SimpleType: JexlNode", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TextElement: Works around issue https://javacc.dev.java.net/issues/show_bug.cgi?id=227", "DEL QualifiedName: children.length", "DEL NullLiteral", "DEL PrimitiveType: void", "DEL TagElement", "DEL TagElement", "DEL Javadoc", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleType: Object", "DEL TextElement: The parent node. ", "DEL Dimension", "DEL SimpleName: toString", "DEL SimpleName: children", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: p", "DEL TagElement: @inheritDoc", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL Block", "DEL TagElement: @return", "DEL NumberLiteral: 0", "DEL SimpleName: dump", "DEL VariableDeclarationFragment", "DEL ArrayCreation", "DEL TextElement: The node type id. ", "DEL SimpleName: i", "DEL InfixExpression: <", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL VariableDeclarationExpression", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL SimpleName: Node", "DEL SimpleType: String", "DEL SimpleName: i", "DEL SimpleName: children", "DEL MethodDeclaration", "DEL TextElement:  the child offset", "DEL TextElement: MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: visitor", "DEL SimpleName: i", "DEL Modifier: protected", "DEL Modifier: public", "DEL SimpleName: JexlNode", "DEL SimpleName: i", "DEL SimpleName: i", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleType: Object", "DEL TextElement:  contextual data", "DEL Javadoc", "DEL FieldDeclaration", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL Javadoc", "DEL StringLiteral: \" \"", "DEL TextElement:  the child offset", "DEL Block", "DEL Javadoc", "DEL IfStatement", "DEL QualifiedName: ParserTreeConstants.jjtNodeName", "DEL TextElement:  the visitor", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: toString", "DEL ForStatement", "DEL SingleVariableDeclaration", "DEL ArrayCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL SimpleName: jjtOpen", "DEL InfixExpression: ==", "DEL SimpleName: c", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL ArrayAccess", "DEL SimpleName: i", "DEL SimpleName: jjtGetNumChildren", "DEL SimpleType: JexlNode", "DEL SimpleName: Override", "DEL TagElement", "DEL SimpleName: toString", "DEL Modifier: public", "DEL TagElement", "DEL NumberLiteral: 1", "DEL SimpleName: SimpleNode", "DEL SimpleName: dump", "DEL SimpleName: n", "DEL PrimitiveType: int", "DEL TextElement: The technical goal is to ensure every reference made in the parser was to a JexlNode; unfortunately,", "DEL VariableDeclarationExpression", "DEL ReturnStatement", "DEL Modifier: protected", "DEL TextElement:  the child node", "DEL SimpleName: ParserVisitor", "DEL Javadoc", "DEL Block", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: i", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL TextElement:  result of visit", "DEL SimpleName: i", "DEL TextElement:  the parent node", "DEL TagElement: @return", "DEL SimpleType: Object", "DEL ForStatement", "DEL VariableDeclarationStatement", "DEL ArrayType: JexlNode[]", "DEL TextElement:  the child node", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: visitor", "DEL VariableDeclarationFragment", "DEL Block", "DEL TextElement: Creates a SimpleNode instance.", "DEL SimpleName: data", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: prefix", "DEL ArrayAccess", "DEL SimpleName: data", "DEL SimpleName: JexlNode", "DEL SimpleName: visitor", "DEL SimpleName: children", "DEL TextElement:  value", "DEL PrimitiveType: void", "DEL Block", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL ReturnStatement", "DEL NumberLiteral: 1", "DEL SimpleName: c", "DEL MethodDeclaration", "DEL ArrayAccess", "DEL Block", "DEL SimpleType: Node", "DEL MethodInvocation", "DEL TagElement: @param", "DEL Modifier: public", "DEL TagElement: @param", "DEL Block", "DEL SimpleName: jjtClose", "DEL Modifier: public", "DEL Javadoc", "DEL SimpleName: jjtAccept", "DEL TagElement: @return", "DEL SimpleType: Node", "DEL NumberLiteral: 0", "DEL SimpleName: children", "DEL SimpleName: c", "DEL QualifiedName: children.length", "DEL QualifiedName: children.length", "DEL TagElement: @return", "DEL InfixExpression: +", "DEL Javadoc", "DEL SimpleName: n", "DEL Block", "DEL MethodDeclaration", "DEL CastExpression", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL TextElement: Sets this node value.", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement: so it can serve as a last evaluation cache even in multi-threaded executions.", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: data", "DEL SimpleType: Node", "DEL SimpleName: parent", "DEL Javadoc", "DEL FieldAccess", "DEL SimpleType: JexlNode", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: visitor", "DEL SimpleType: JexlNode", "DEL Dimension", "DEL Block", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL TextElement: as in javacc 4.1, it still uses a SimpleNode reference in the generated ParserVisitor.", "DEL TextElement: The functional goal is to a allow a <em>volatile</em> value in the node", "DEL TagElement: @return", "DEL SimpleName: children", "DEL Block", "DEL SimpleType: JexlNode", "DEL SimpleName: data", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: data", "DEL CastExpression", "DEL SimpleName: arraycopy", "DEL Block", "DEL TextElement: A class originally generated by JJTree with the following JavaCCOptions:", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: i", "DEL Modifier: protected", "DEL SimpleName: prefix", "DEL SimpleName: children", "DEL SimpleName: JexlNode", "DEL SimpleName: n", "DEL TagElement", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: jjtSetValue", "DEL SimpleType: Object", "DEL SimpleType: Object", "DEL SimpleName: toString", "DEL TagElement: @param", "DEL SimpleName: childrenAccept", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL Modifier: public", "DEL ConditionalExpression", "DEL SimpleName: i", "DEL SimpleName: n", "DEL InfixExpression: ==", "DEL SimpleName: JexlNode", "DEL Block", "DEL ArrayType: JexlNode[]", "DEL SimpleName: Object", "DEL MethodDeclaration", "DEL SimpleName: SimpleNode", "DEL Javadoc", "DEL PrefixExpression: ++", "DEL InfixExpression: >=", "DEL Dimension", "DEL SimpleName: jjtAddChild", "DEL SimpleName: children", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: n", "DEL Modifier: public", "DEL TagElement", "DEL Javadoc", "DEL Block", "DEL SimpleName: visitor", "DEL SimpleName: n", "DEL MarkerAnnotation", "DEL TagElement", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL SimpleName: JexlNode", "DEL TextElement: The array of children nodes. ", "DEL Javadoc", "DEL InfixExpression: +", "DEL Modifier: public", "DEL TextElement:  ", "DEL InfixExpression: +", "DEL Dimension", "DEL InfixExpression: <", "DEL SimpleName: i", "DEL SimpleName: Object", "DEL TextElement: Besides, there is no need to keep the parser around in the node.", "DEL TagElement: @param", "DEL SimpleName: visitor", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Block", "DEL SimpleType: JexlNode", "DEL SimpleName: Object", "DEL SimpleName: value", "DEL SimpleName: p", "DEL SimpleType: String", "DEL PrefixExpression: ++", "DEL TextElement:  ", "DEL SimpleName: value", "DEL FieldDeclaration", "DEL Modifier: public", "DEL TextElement: Adds a child node.", "DEL TextElement: Gets a child of this node.", "DEL SingleVariableDeclaration", "DEL SimpleName: children", "DEL TagElement", "DEL PrimitiveType: void", "DEL TextElement:  the number of children", "DEL TagElement", "DEL TextElement: As soon as this issue if fixed and the maven plugin uses the correct version of Javacc, this", "DEL SimpleName: ParserVisitor", "DEL TextElement: Sets this node's parent.", "DEL SimpleName: parent", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL InfixExpression: !=", "DEL ConstructorInvocation", "DEL SimpleType: JexlNode", "DEL SimpleName: println", "DEL PrimitiveType: int", "DEL SimpleName: i", "DEL Assignment: =", "DEL Assignment: =", "DEL TextElement: Accept the visitor on all this node's children.", "DEL SimpleName: System", "DEL TextElement: Creates a SimpleNode instance.", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: id", "DEL SimpleName: i", "DEL SimpleName: value", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleType: Object", "DEL Block", "DEL SimpleName: children", "DEL Block", "DEL Modifier: volatile", "DEL SimpleName: Parser", "DEL SimpleType: JexlNode", "DEL Block", "DEL SimpleName: children", "DEL SimpleType: ParserVisitor", "DEL TextElement: Gets this node's parent.", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL NullLiteral", "DEL Modifier: final", "DEL ThisExpression", "DEL PrimitiveType: void", "DEL SimpleName: value", "DEL Javadoc", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL SimpleName: data", "DEL SimpleType: JexlNode", "DEL TextElement:  the visitor", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: children", "DEL QualifiedName: children.length", "DEL SimpleType: String", "DEL NullLiteral", "DEL ThisExpression", "DEL SimpleName: i", "DEL SimpleName: n", "DEL SimpleType: Object", "DEL TextElement: class can go away.", "DEL TagElement", "DEL Modifier: public", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement:  the parent", "DEL SimpleName: n", "DEL TextElement: Accept the visitor.", "DEL SimpleName: prefix", "DEL PrimitiveType: int", "DEL SimpleName: JexlNode", "DEL SimpleName: prefix", "DEL TextElement:  result of visit", "DEL VariableDeclarationStatement", "DEL ArrayAccess", "DEL SimpleName: i", "DEL FieldDeclaration", "DEL SimpleName: i", "DEL TagElement: @return", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: JexlNode", "DEL SimpleName: i", "DEL TagElement: @inheritDoc", "DEL SimpleName: Object", "DEL Assignment: =", "DEL Modifier: protected", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: jjtGetChild", "DEL SimpleName: String", "DEL SimpleName: SimpleNode", "DEL SimpleName: id", "DEL SimpleName: value", "DEL SimpleName: JexlNode", "DEL Modifier: public", "DEL SimpleName: JexlNode", "DEL Modifier: public", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL SimpleType: SimpleNode", "DEL SimpleType: ParserVisitor", "DEL TagElement", "DEL SimpleType: Parser", "DEL QualifiedName: System.out", "DEL TagElement: @param", "DEL SimpleName: jjtAccept", "DEL MethodDeclaration", "DEL SimpleName: jjtSetParent", "DEL SimpleName: prefix", "DEL Modifier: public"]}]}}, {"SimpleNode_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete TextElement: A class originally generated by JJTree with the following JavaCCOptions:(2)", "Delete TextElement: MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=(3)", "Delete TextElement: Works around issue https://javacc.dev.java.net/issues/show_bug.cgi?id=227(4)", "Delete TextElement: As soon as this issue if fixed and the maven plugin uses the correct version of Javacc, this(5)", "Delete TextElement: class can go away.(6)", "Delete TextElement: The technical goal is to ensure every reference made in the parser was to a JexlNode; unfortunately,(7)", "Delete TextElement: as in javacc 4.1, it still uses a SimpleNode reference in the generated ParserVisitor.(8)", "Delete TextElement: Besides, there is no need to keep the parser around in the node.(9)", "Delete TextElement: The functional goal is to a allow a <em>volatile</em> value in the node(10)", "Delete TextElement: so it can serve as a last evaluation cache even in multi-threaded executions.(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: public(14)", "Delete SimpleName: SimpleNode(15)", "Delete SimpleName: Node(16)", "Delete SimpleType: Node(17)", "Delete TextElement: The parent node. (18)", "Delete TagElement(19)", "Delete Javadoc(20)", "Delete Modifier: protected(21)", "Delete SimpleName: JexlNode(22)", "Delete SimpleType: JexlNode(23)", "Delete SimpleName: parent(24)", "Delete VariableDeclarationFragment(25)", "Delete FieldDeclaration(26)", "Delete TextElement: The array of children nodes. (27)", "Delete TagElement(28)", "Delete Javadoc(29)", "Delete Modifier: protected(30)", "Delete SimpleName: JexlNode(31)", "Delete SimpleType: JexlNode(32)", "Delete Dimension(33)", "Delete ArrayType: JexlNode[](34)", "Delete SimpleName: children(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete TextElement: The node type id. (38)", "Delete TagElement(39)", "Delete Javadoc(40)", "Delete Modifier: protected(41)", "Delete Modifier: final(42)", "Delete PrimitiveType: int(43)", "Delete SimpleName: id(44)", "Delete VariableDeclarationFragment(45)", "Delete FieldDeclaration(46)", "Delete TextElement: volatile value so it can be used as a last evaluation cache. (47)", "Delete TagElement(48)", "Delete Javadoc(49)", "Delete Modifier: protected(50)", "Delete Modifier: volatile(51)", "Delete SimpleName: Object(52)", "Delete SimpleType: Object(53)", "Delete SimpleName: value(54)", "Delete VariableDeclarationFragment(55)", "Delete FieldDeclaration(56)", "Delete TextElement: Creates a SimpleNode instance.(57)", "Delete TagElement(58)", "Delete SimpleName: i(59)", "Delete TextElement:  the node type identifier(60)", "Delete TagElement: @param(61)", "Delete Javadoc(62)", "Delete Modifier: public(63)", "Delete SimpleName: SimpleNode(64)", "Delete PrimitiveType: int(65)", "Delete SimpleName: i(66)", "Delete SingleVariableDeclaration(67)", "Delete SimpleName: id(68)", "Delete SimpleName: i(69)", "Delete Assignment: =(70)", "Delete ExpressionStatement(71)", "Delete Block(72)", "Delete MethodDeclaration(73)", "Delete TextElement: Creates a SimpleNode instance.(74)", "Delete TagElement(75)", "Delete SimpleName: p(76)", "Delete TextElement:  the parser instance(77)", "Delete TagElement: @param(78)", "Delete SimpleName: i(79)", "Delete TextElement:  the node type identifier(80)", "Delete TagElement: @param(81)", "Delete Javadoc(82)", "Delete Modifier: public(83)", "Delete SimpleName: SimpleNode(84)", "Delete SimpleName: Parser(85)", "Delete SimpleType: Parser(86)", "Delete SimpleName: p(87)", "Delete SingleVariableDeclaration(88)", "Delete PrimitiveType: int(89)", "Delete SimpleName: i(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: i(92)", "Delete ConstructorInvocation(93)", "Delete Block(94)", "Delete MethodDeclaration(95)", "Delete TagElement: @inheritDoc(96)", "Delete TextElement:  (97)", "Delete TagElement(98)", "Delete Javadoc(99)", "Delete Modifier: public(100)", "Delete PrimitiveType: void(101)", "Delete SimpleName: jjtOpen(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete TagElement: @inheritDoc(105)", "Delete TextElement:  (106)", "Delete TagElement(107)", "Delete Javadoc(108)", "Delete Modifier: public(109)", "Delete PrimitiveType: void(110)", "Delete SimpleName: jjtClose(111)", "Delete Block(112)", "Delete MethodDeclaration(113)", "Delete TextElement: Sets this node's parent.(114)", "Delete TagElement(115)", "Delete SimpleName: n(116)", "Delete TextElement:  the parent(117)", "Delete TagElement: @param(118)", "Delete Javadoc(119)", "Delete Modifier: public(120)", "Delete PrimitiveType: void(121)", "Delete SimpleName: jjtSetParent(122)", "Delete SimpleName: Node(123)", "Delete SimpleType: Node(124)", "Delete SimpleName: n(125)", "Delete SingleVariableDeclaration(126)", "Delete SimpleName: parent(127)", "Delete SimpleName: JexlNode(128)", "Delete SimpleType: JexlNode(129)", "Delete SimpleName: n(130)", "Delete CastExpression(131)", "Delete Assignment: =(132)", "Delete ExpressionStatement(133)", "Delete Block(134)", "Delete MethodDeclaration(135)", "Delete TextElement: Gets this node's parent.(136)", "Delete TagElement(137)", "Delete TextElement:  the parent node(138)", "Delete TagElement: @return(139)", "Delete Javadoc(140)", "Delete Modifier: public(141)", "Delete SimpleName: JexlNode(142)", "Delete SimpleType: JexlNode(143)", "Delete SimpleName: jjtGetParent(144)", "Delete SimpleName: parent(145)", "Delete ReturnStatement(146)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete TextElement: Adds a child node.(149)", "Delete TagElement(150)", "Delete SimpleName: n(151)", "Delete TextElement:  the child node(152)", "Delete TagElement: @param(153)", "Delete SimpleName: i(154)", "Delete TextElement:  the child offset(155)", "Delete TagElement: @param(156)", "Delete Javadoc(157)", "Delete Modifier: public(158)", "Delete PrimitiveType: void(159)", "Delete SimpleName: jjtAddChild(160)", "Delete SimpleName: Node(161)", "Delete SimpleType: Node(162)", "Delete SimpleName: n(163)", "Delete SingleVariableDeclaration(164)", "Delete PrimitiveType: int(165)", "Delete SimpleName: i(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: children(168)", "Delete NullLiteral(169)", "Delete InfixExpression: ==(170)", "Delete SimpleName: children(171)", "Delete SimpleName: JexlNode(172)", "Delete SimpleType: JexlNode(173)", "Delete Dimension(174)", "Delete ArrayType: JexlNode[](175)", "Delete SimpleName: i(176)", "Delete NumberLiteral: 1(177)", "Delete InfixExpression: +(178)", "Delete ArrayCreation(179)", "Delete Assignment: =(180)", "Delete ExpressionStatement(181)", "Delete Block(182)", "Delete SimpleName: i(183)", "Delete QualifiedName: children.length(184)", "Delete InfixExpression: >=(185)", "Delete SimpleName: JexlNode(186)", "Delete SimpleType: JexlNode(187)", "Delete Dimension(188)", "Delete ArrayType: JexlNode[](189)", "Delete SimpleName: c(190)", "Delete SimpleName: JexlNode(191)", "Delete SimpleType: JexlNode(192)", "Delete Dimension(193)", "Delete ArrayType: JexlNode[](194)", "Delete SimpleName: i(195)", "Delete NumberLiteral: 1(196)", "Delete InfixExpression: +(197)", "Delete ArrayCreation(198)", "Delete VariableDeclarationFragment(199)", "Delete VariableDeclarationStatement(200)", "Delete SimpleName: System(201)", "Delete SimpleName: arraycopy(202)", "Delete SimpleName: children(203)", "Delete NumberLiteral: 0(204)", "Delete SimpleName: c(205)", "Delete NumberLiteral: 0(206)", "Delete QualifiedName: children.length(207)", "Delete MethodInvocation(208)", "Delete ExpressionStatement(209)", "Delete SimpleName: children(210)", "Delete SimpleName: c(211)", "Delete Assignment: =(212)", "Delete ExpressionStatement(213)", "Delete Block(214)", "Delete IfStatement(215)", "Delete IfStatement(216)", "Delete SimpleName: children(217)", "Delete SimpleName: i(218)", "Delete ArrayAccess(219)", "Delete SimpleName: JexlNode(220)", "Delete SimpleType: JexlNode(221)", "Delete SimpleName: n(222)", "Delete CastExpression(223)", "Delete Assignment: =(224)", "Delete ExpressionStatement(225)", "Delete Block(226)", "Delete MethodDeclaration(227)", "Delete TextElement: Gets a child of this node.(228)", "Delete TagElement(229)", "Delete SimpleName: i(230)", "Delete TextElement:  the child offset(231)", "Delete TagElement: @param(232)", "Delete TextElement:  the child node(233)", "Delete TagElement: @return(234)", "Delete Javadoc(235)", "Delete Modifier: public(236)", "Delete SimpleName: JexlNode(237)", "Delete SimpleType: JexlNode(238)", "Delete SimpleName: jjtGetChild(239)", "Delete PrimitiveType: int(240)", "Delete SimpleName: i(241)", "Delete SingleVariableDeclaration(242)", "Delete SimpleName: children(243)", "Delete SimpleName: i(244)", "Delete ArrayAccess(245)", "Delete ReturnStatement(246)", "Delete Block(247)", "Delete MethodDeclaration(248)", "Delete TextElement: Gets this node number of children.(249)", "Delete TagElement(250)", "Delete TextElement:  the number of children(251)", "Delete TagElement: @return(252)", "Delete Javadoc(253)", "Delete Modifier: public(254)", "Delete PrimitiveType: int(255)", "Delete SimpleName: jjtGetNumChildren(256)", "Delete SimpleName: children(257)", "Delete NullLiteral(258)", "Delete InfixExpression: ==(259)", "Delete ParenthesizedExpression(260)", "Delete NumberLiteral: 0(261)", "Delete QualifiedName: children.length(262)", "Delete ConditionalExpression(263)", "Delete ReturnStatement(264)", "Delete Block(265)", "Delete MethodDeclaration(266)", "Delete TextElement: Sets this node value.(267)", "Delete TagElement(268)", "Delete SimpleName: value(269)", "Delete TagElement: @param(270)", "Delete Javadoc(271)", "Delete Modifier: public(272)", "Delete PrimitiveType: void(273)", "Delete SimpleName: jjtSetValue(274)", "Delete SimpleName: Object(275)", "Delete SimpleType: Object(276)", "Delete SimpleName: value(277)", "Delete SingleVariableDeclaration(278)", "Delete ThisExpression(279)", "Delete SimpleName: value(280)", "Delete FieldAccess(281)", "Delete SimpleName: value(282)", "Delete Assignment: =(283)", "Delete ExpressionStatement(284)", "Delete Block(285)", "Delete MethodDeclaration(286)", "Delete TextElement: Gets this node value.(287)", "Delete TagElement(288)", "Delete TextElement:  value(289)", "Delete TagElement: @return(290)", "Delete Javadoc(291)", "Delete Modifier: public(292)", "Delete SimpleName: Object(293)", "Delete SimpleType: Object(294)", "Delete SimpleName: jjtGetValue(295)", "Delete SimpleName: value(296)", "Delete ReturnStatement(297)", "Delete Block(298)", "Delete MethodDeclaration(299)", "Delete TextElement: Accept the visitor.(300)", "Delete TagElement(301)", "Delete SimpleName: visitor(302)", "Delete TextElement:  the visitor(303)", "Delete TagElement: @param(304)", "Delete SimpleName: data(305)", "Delete TextElement:  contextual data(306)", "Delete TagElement: @param(307)", "Delete TextElement:  result of visit(308)", "Delete TagElement: @return(309)", "Delete Javadoc(310)", "Delete Modifier: public(311)", "Delete SimpleName: Object(312)", "Delete SimpleType: Object(313)", "Delete SimpleName: jjtAccept(314)", "Delete SimpleName: ParserVisitor(315)", "Delete SimpleType: ParserVisitor(316)", "Delete SimpleName: visitor(317)", "Delete SingleVariableDeclaration(318)", "Delete SimpleName: Object(319)", "Delete SimpleType: Object(320)", "Delete SimpleName: data(321)", "Delete SingleVariableDeclaration(322)", "Delete SimpleName: visitor(323)", "Delete SimpleName: visit(324)", "Delete ThisExpression(325)", "Delete SimpleName: data(326)", "Delete MethodInvocation(327)", "Delete ReturnStatement(328)", "Delete Block(329)", "Delete MethodDeclaration(330)", "Delete TextElement: Accept the visitor on all this node's children.(331)", "Delete TagElement(332)", "Delete SimpleName: visitor(333)", "Delete TextElement:  the visitor(334)", "Delete TagElement: @param(335)", "Delete SimpleName: data(336)", "Delete TextElement:  contextual data(337)", "Delete TagElement: @param(338)", "Delete TextElement:  result of visit(339)", "Delete TagElement: @return(340)", "Delete Javadoc(341)", "Delete Modifier: public(342)", "Delete SimpleName: Object(343)", "Delete SimpleType: Object(344)", "Delete SimpleName: childrenAccept(345)", "Delete SimpleName: ParserVisitor(346)", "Delete SimpleType: ParserVisitor(347)", "Delete SimpleName: visitor(348)", "Delete SingleVariableDeclaration(349)", "Delete SimpleName: Object(350)", "Delete SimpleType: Object(351)", "Delete SimpleName: data(352)", "Delete SingleVariableDeclaration(353)", "Delete SimpleName: children(354)", "Delete NullLiteral(355)", "Delete InfixExpression: !=(356)", "Delete PrimitiveType: int(357)", "Delete SimpleName: i(358)", "Delete NumberLiteral: 0(359)", "Delete VariableDeclarationFragment(360)", "Delete VariableDeclarationExpression(361)", "Delete SimpleName: i(362)", "Delete QualifiedName: children.length(363)", "Delete InfixExpression: <(364)", "Delete SimpleName: i(365)", "Delete PrefixExpression: ++(366)", "Delete SimpleName: children(367)", "Delete SimpleName: i(368)", "Delete ArrayAccess(369)", "Delete SimpleName: jjtAccept(370)", "Delete SimpleName: visitor(371)", "Delete SimpleName: data(372)", "Delete MethodInvocation(373)", "Delete ExpressionStatement(374)", "Delete Block(375)", "Delete ForStatement(376)", "Delete Block(377)", "Delete IfStatement(378)", "Delete SimpleName: data(379)", "Delete ReturnStatement(380)", "Delete Block(381)", "Delete MethodDeclaration(382)", "Delete SimpleName: Override(383)", "Delete MarkerAnnotation(384)", "Delete Modifier: public(385)", "Delete SimpleName: String(386)", "Delete SimpleType: String(387)", "Delete SimpleName: toString(388)", "Delete QualifiedName: ParserTreeConstants.jjtNodeName(389)", "Delete SimpleName: id(390)", "Delete ArrayAccess(391)", "Delete ReturnStatement(392)", "Delete Block(393)", "Delete MethodDeclaration(394)", "Delete Modifier: public(395)", "Delete SimpleName: String(396)", "Delete SimpleType: String(397)", "Delete SimpleName: toString(398)", "Delete SimpleName: String(399)", "Delete SimpleType: String(400)", "Delete SimpleName: prefix(401)", "Delete SingleVariableDeclaration(402)", "Delete SimpleName: prefix(403)", "Delete SimpleName: toString(404)", "Delete MethodInvocation(405)", "Delete InfixExpression: +(406)", "Delete ReturnStatement(407)", "Delete Block(408)", "Delete MethodDeclaration(409)", "Delete Modifier: public(410)", "Delete PrimitiveType: void(411)", "Delete SimpleName: dump(412)", "Delete SimpleName: String(413)", "Delete SimpleType: String(414)", "Delete SimpleName: prefix(415)", "Delete SingleVariableDeclaration(416)", "Delete QualifiedName: System.out(417)", "Delete SimpleName: println(418)", "Delete SimpleName: toString(419)", "Delete SimpleName: prefix(420)", "Delete MethodInvocation(421)", "Delete MethodInvocation(422)", "Delete ExpressionStatement(423)", "Delete SimpleName: children(424)", "Delete NullLiteral(425)", "Delete InfixExpression: !=(426)", "Delete PrimitiveType: int(427)", "Delete SimpleName: i(428)", "Delete NumberLiteral: 0(429)", "Delete VariableDeclarationFragment(430)", "Delete VariableDeclarationExpression(431)", "Delete SimpleName: i(432)", "Delete QualifiedName: children.length(433)", "Delete InfixExpression: <(434)", "Delete SimpleName: i(435)", "Delete PrefixExpression: ++(436)", "Delete SimpleName: SimpleNode(437)", "Delete SimpleType: SimpleNode(438)", "Delete SimpleName: n(439)", "Delete SimpleName: children(440)", "Delete SimpleName: i(441)", "Delete ArrayAccess(442)", "Delete VariableDeclarationFragment(443)", "Delete VariableDeclarationStatement(444)", "Delete SimpleName: n(445)", "Delete NullLiteral(446)", "Delete InfixExpression: !=(447)", "Delete SimpleName: n(448)", "Delete SimpleName: dump(449)", "Delete SimpleName: prefix(450)", "Delete StringLiteral: \" \"(451)", "Delete InfixExpression: +(452)", "Delete MethodInvocation(453)", "Delete ExpressionStatement(454)", "Delete Block(455)", "Delete IfStatement(456)", "Delete Block(457)", "Delete ForStatement(458)", "Delete Block(459)", "Delete IfStatement(460)", "Delete Block(461)", "Delete MethodDeclaration(462)", "Delete TypeDeclaration: class(463)"]}}, {"StringParser_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement: a Unicode sequence starting with 'u' followed by 4 hexadecimals and", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL CharacterLiteral: '\\r'", "DEL SimpleName: strb", "DEL TextElement: The length of an escaped unicode sequence. ", "DEL SwitchCase", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL SimpleName: index", "DEL Assignment: -=", "DEL Javadoc", "DEL PrefixExpression: ++", "DEL Modifier: static", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: strb", "DEL SimpleName: sep", "DEL SimpleName: str", "DEL SimpleName: readString", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL ContinueStatement", "DEL InfixExpression: <", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: This package methods read JEXL string literals and handle escaping through the", "DEL SimpleName: str", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL SimpleName: index", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrefixExpression: ++", "DEL SimpleName: read", "DEL SimpleName: c", "DEL PrimitiveType: boolean", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: str", "DEL SwitchCase", "DEL TextElement: A sequence where '\\' occurs before any non-escapable character or sequence has no effect, the", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: strb", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL SimpleName: c", "DEL PrimitiveType: char", "DEL SimpleName: CharSequence", "DEL PrimitiveType: boolean", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL SimpleName: strb", "DEL CharacterLiteral: '\\b'", "DEL SimpleName: str", "DEL StringLiteral: \"\\\\b\"", "DEL ParenthesizedExpression", "DEL TextElement:  the relative offset in str to end reading", "DEL SimpleName: index", "DEL BreakStatement", "DEL SimpleName: end", "DEL InfixExpression: -", "DEL VariableDeclarationFragment", "DEL SimpleName: UCHAR_LEN", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SimpleName: sep", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleName: c", "DEL SwitchCase", "DEL SimpleName: str", "DEL MethodDeclaration", "DEL SimpleName: buildString", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\f'", "DEL MethodDeclaration", "DEL SimpleName: c", "DEL SimpleName: UCHAR_LEN", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL MethodInvocation", "DEL StringLiteral: \"\\\\f\"", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SimpleName: strb", "DEL Javadoc", "DEL TagElement", "DEL Modifier: static", "DEL InfixExpression: <", "DEL SimpleName: xc", "DEL SimpleName: strb", "DEL SimpleName: append", "DEL SimpleType: String", "DEL SimpleName: charAt", "DEL SimpleName: sep", "DEL Block", "DEL SimpleName: str", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SimpleName: StringBuilder", "DEL SwitchCase", "DEL SimpleName: str", "DEL StringLiteral: \"\\\\n\"", "DEL MethodDeclaration", "DEL SimpleName: end", "DEL Block", "DEL MethodInvocation", "DEL ForStatement", "DEL ExpressionStatement", "DEL SimpleName: strb", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL Block", "DEL BreakStatement", "DEL PrimitiveType: int", "DEL SimpleName: c", "DEL SimpleName: UCHAR_LEN", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: h", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL TextElement: handles escaping through '\\' syntax.", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL TextElement:  the separator, single or double quote, marking end of string", "DEL SimpleName: str", "DEL SimpleName: sep", "DEL SimpleName: BASE10", "DEL SimpleName: StringBuilder", "DEL IfStatement", "DEL SimpleName: toString", "DEL SimpleName: strb", "DEL SimpleName: LAST_ASCII", "DEL SimpleName: sep", "DEL VariableDeclarationExpression", "DEL Javadoc", "DEL SimpleName: notSeparator", "DEL CharacterLiteral: '\\\\'", "DEL Modifier: final", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: hex", "DEL SimpleName: length", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TagElement", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: strb", "DEL TextElement: <p>", "DEL SimpleName: sep", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: false", "DEL NumberLiteral: 0", "DEL SimpleName: end", "DEL IfStatement", "DEL SimpleName: xc", "DEL TextElement:  the offset in origin", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: length", "DEL SimpleName: begin", "DEL StringLiteral: \"\\\\\\\\\"", "DEL VariableDeclarationExpression", "DEL Block", "DEL MethodInvocation", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL TextElement: Read the remainder of a string till a given separator,", "DEL Modifier: static", "DEL InfixExpression: +", "DEL InfixExpression: >=", "DEL PrimitiveType: int", "DEL SimpleName: FIRST_ASCII", "DEL NullLiteral", "DEL SimpleName: strb", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL SimpleName: UCHAR_LEN", "DEL SimpleName: strb", "DEL Modifier: final", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL SimpleName: SHIFT", "DEL TextElement: </p>", "DEL InfixExpression: <=", "DEL TextElement:  the begin offset in sequence (after the '\\\\u')", "DEL PrimitiveType: int", "DEL SimpleName: SHIFT", "DEL SimpleName: strb", "DEL ExpressionStatement", "DEL SimpleName: strb", "DEL FieldDeclaration", "DEL PrimitiveType: char", "DEL InfixExpression: >", "DEL SimpleName: eatsep", "DEL SimpleName: eatsep", "DEL SimpleName: end", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: index", "DEL SimpleName: h", "DEL Modifier: public", "DEL SimpleName: strb", "DEL ExpressionStatement", "DEL InfixExpression: >=", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL PrimitiveType: char", "DEL InfixExpression: <<", "DEL SimpleType: StringBuilder", "DEL CharacterLiteral: '\\\\'", "DEL MethodInvocation", "DEL Modifier: private", "DEL Modifier: static", "DEL SimpleName: bits", "DEL CharacterLiteral: 'u'", "DEL TextElement:  the separator, single or double quote, marking end of string", "DEL SimpleName: index", "DEL SimpleName: sep", "DEL SimpleName: StringBuilder", "DEL TagElement: @param", "DEL SwitchCase", "DEL TagElement: @param", "DEL SimpleName: str", "DEL SimpleName: hex", "DEL TextElement: the backslash character - '\\' - itself.", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL SimpleName: sep", "DEL VariableDeclarationFragment", "DEL SimpleType: CharSequence", "DEL ExpressionStatement", "DEL PrimitiveType: char", "DEL SimpleName: offset", "DEL SimpleName: begin", "DEL Block", "DEL SimpleType: StringBuilder", "DEL TagElement: @return", "DEL SimpleName: begin", "DEL TextElement:  the builder to write the character to", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL TextElement: </p>", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL TextElement: Read the remainder of a string till a given separator,", "DEL ParenthesizedExpression", "DEL SimpleName: strb", "DEL TextElement: handles escaping through '\\' syntax.", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: BASE10", "DEL Javadoc", "DEL CharacterLiteral: '9'", "DEL InfixExpression: >=", "DEL InfixExpression: +", "DEL TextElement:  the sequence", "DEL IfStatement", "DEL Block", "DEL TextElement: Initial shift value for composing a Unicode char from 4 nibbles (16 - 4). ", "DEL PrimitiveType: char", "DEL TagElement", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SimpleName: str", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL SimpleType: StringBuilder", "DEL SimpleName: offset", "DEL SimpleName: append", "DEL BooleanLiteral: true", "DEL SimpleName: i", "DEL CharacterLiteral: '0'", "DEL SimpleName: strb", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL TypeDeclaration: class", "DEL SimpleName: append", "DEL InfixExpression: -", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: toHexString", "DEL PrimitiveType: int", "DEL InfixExpression: >=", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL ConditionalExpression", "DEL SimpleName: BASE10", "DEL VariableDeclarationFragment", "DEL SwitchCase", "DEL TagElement: @return", "DEL Modifier: private", "DEL CharacterLiteral: '\\\\'", "DEL SimpleName: str", "DEL NumberLiteral: 1", "DEL TagElement: @param", "DEL ReturnStatement", "DEL BreakStatement", "DEL SimpleName: str", "DEL SimpleName: c", "DEL SimpleName: str", "DEL SimpleName: StringBuilder", "DEL TagElement: @return", "DEL SimpleName: strb", "DEL SimpleName: append", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: index", "DEL InfixExpression: -", "DEL TextElement: Common constant strings utilities.", "DEL SimpleName: length", "DEL SimpleName: c", "DEL SimpleName: index", "DEL SimpleName: i", "DEL SimpleName: strb", "DEL CharacterLiteral: '\\\"'", "DEL SimpleName: escape", "DEL SimpleName: length", "DEL SimpleName: notSeparator", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: LAST_ASCII", "DEL SimpleName: CharSequence", "DEL TagElement: @param", "DEL SimpleName: c", "DEL SimpleName: append", "DEL ForStatement", "DEL SwitchStatement", "DEL TextElement: The last 7bits ascii character. ", "DEL TextElement: The only escapable characters are the single and double quotes - ''' and '\"' -,", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SwitchCase", "DEL TagElement: @param", "DEL ExpressionStatement", "DEL ForStatement", "DEL SimpleName: str", "DEL InfixExpression: <=", "DEL Modifier: final", "DEL TextElement:  the built string", "DEL IfStatement", "DEL SimpleName: begin", "DEL SwitchCase", "DEL InfixExpression: &&", "DEL TagElement", "DEL SimpleName: begin", "DEL NumberLiteral: 127", "DEL SimpleName: strb", "DEL SimpleName: Integer", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL PrimitiveType: char", "DEL SimpleName: delim", "DEL NumberLiteral: 0", "DEL TextElement:  the string to build from", "DEL InfixExpression: <", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL ParenthesizedExpression", "DEL TagElement", "DEL Block", "DEL TextElement:  0 if char could not be read, 4 otherwise", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: CharSequence", "DEL SimpleName: StringBuilder", "DEL SimpleName: offset", "DEL ClassInstanceCreation", "DEL SimpleName: eatsep", "DEL InfixExpression: <", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: false", "DEL SimpleName: strb", "DEL Modifier: static", "DEL TextElement: Reads a Unicode escape character.", "DEL InfixExpression: !=", "DEL ContinueStatement", "DEL SimpleName: read", "DEL TagElement: @return", "DEL BreakStatement", "DEL SimpleName: str", "DEL SimpleName: index", "DEL SimpleName: append", "DEL Modifier: static", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL Assignment: +=", "DEL TagElement: @param", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: sep", "DEL VariableDeclarationExpression", "DEL SimpleName: String", "DEL PrimitiveType: int", "DEL SimpleName: c", "DEL SimpleName: strb", "DEL TextElement: </p>", "DEL SimpleName: index", "DEL SimpleName: c", "DEL Modifier: static", "DEL PrimitiveType: char", "DEL PrimitiveType: int", "DEL SimpleName: bits", "DEL PrimitiveType: int", "DEL BreakStatement", "DEL NumberLiteral: 1", "DEL SimpleName: append", "DEL NumberLiteral: 0", "DEL TagElement", "DEL Block", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: delim", "DEL InfixExpression: !=", "DEL TextElement: Builds a string, handles escaping through '\\' syntax.", "DEL SimpleName: c", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: strb", "DEL TextElement:  the destination buffer to copy characters into", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL Modifier: private", "DEL TextElement:  the escaped representation", "DEL CharacterLiteral: '\\n'", "DEL SimpleName: offset", "DEL SimpleName: strb", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: append", "DEL ReturnStatement", "DEL StringLiteral: \"\\\\r\"", "DEL Assignment: =", "DEL TextElement: <p>", "DEL SimpleName: read", "DEL SimpleName: c", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: escape", "DEL Modifier: public", "DEL Modifier: private", "DEL NumberLiteral: 0", "DEL SimpleName: eatsep", "DEL SimpleName: append", "DEL ConditionalExpression", "DEL SimpleName: strb", "DEL MethodInvocation", "DEL SimpleName: c", "DEL NumberLiteral: 0", "DEL SimpleName: value", "DEL SimpleName: str", "DEL NumberLiteral: 12", "DEL CharacterLiteral: 'A'", "DEL SimpleName: eatsep", "DEL SimpleName: value", "DEL SimpleName: c", "DEL Modifier: private", "DEL SimpleName: append", "DEL SimpleName: begin", "DEL Block", "DEL CharacterLiteral: '\\''", "DEL TagElement", "DEL ContinueStatement", "DEL SimpleName: append", "DEL InfixExpression: +", "DEL SimpleName: value", "DEL NumberLiteral: 32", "DEL PrimitiveType: char", "DEL InfixExpression: +", "DEL SimpleName: escape", "DEL TextElement:  the destination buffer to copy characters into", "DEL StringLiteral: \"\\\\\\\"\"", "DEL CharacterLiteral: '0'", "DEL TagElement: @param", "DEL SimpleName: UCHAR_LEN", "DEL SimpleName: append", "DEL FieldDeclaration", "DEL SimpleType: CharSequence", "DEL VariableDeclarationStatement", "DEL BreakStatement", "DEL ForStatement", "DEL SimpleName: index", "DEL SimpleName: strb", "DEL SimpleName: append", "DEL TagElement: @param", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleName: escapeString", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL IfStatement", "DEL TagElement", "DEL PrimitiveType: int", "DEL SimpleName: length", "DEL SimpleName: value", "DEL IfStatement", "DEL TextElement:  the origin", "DEL TextElement: The base 10 offset used to convert hexa characters to decimal. ", "DEL BreakStatement", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleName: toString", "DEL InfixExpression: <=", "DEL TagElement", "DEL SimpleName: strb", "DEL SimpleName: String", "DEL VariableDeclarationStatement", "DEL SimpleName: h", "DEL TextElement:  the relative offset in str to begin reading", "DEL InfixExpression: <", "DEL InfixExpression: &&", "DEL ExpressionStatement", "DEL SimpleName: UCHAR_LEN", "DEL ExpressionStatement", "DEL IfStatement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '0'", "DEL SimpleName: charAt", "DEL SimpleName: UCHAR_LEN", "DEL CharacterLiteral: '\\t'", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: static", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL CharacterLiteral: 'a'", "DEL TextElement:  the last character offset handled in origin", "DEL SwitchCase", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL NumberLiteral: 4", "DEL Assignment: =", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: str", "DEL SimpleName: delim", "DEL PrimitiveType: boolean", "DEL StringLiteral: \"\\\\\\'\"", "DEL SimpleName: strb", "DEL InfixExpression: &&", "DEL TagElement: @param", "DEL CharacterLiteral: 'A'", "DEL SimpleName: StringParser", "DEL Block", "DEL SimpleName: hex", "DEL Modifier: static", "DEL Assignment: |=", "DEL SimpleName: c", "DEL SimpleName: charAt", "DEL SimpleName: StringParser", "DEL BreakStatement", "DEL ExpressionStatement", "DEL SimpleName: StringBuilder", "DEL InfixExpression: <=", "DEL ExpressionStatement", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL SimpleName: str", "DEL CharacterLiteral: '\\\\'", "DEL CharacterLiteral: '\"'", "DEL TextElement: and double quotes) and read Unicode hexadecimal encoded characters.", "DEL NumberLiteral: 0", "DEL TagElement: @param", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: end", "DEL InfixExpression: ==", "DEL SimpleName: str", "DEL TextElement: Escapes a String representation, expand non-ASCII characters as Unicode escape sequence.", "DEL SimpleName: i", "DEL ReturnStatement", "DEL TextElement: sequence output being the same as the input.", "DEL NumberLiteral: 10", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: bits", "DEL SimpleName: length", "DEL Block", "DEL InfixExpression: ==", "DEL NumberLiteral: 2", "DEL VariableDeclarationFragment", "DEL TextElement:  the origin", "DEL SimpleName: str", "DEL ConditionalExpression", "DEL SimpleName: readUnicodeChar", "DEL SimpleType: StringBuilder", "DEL SimpleName: strb", "DEL SimpleName: begin", "DEL Block", "DEL SimpleName: append", "DEL InfixExpression: &&", "DEL PrimitiveType: int", "DEL SimpleName: str", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: c", "DEL PrimitiveType: char", "DEL TextElement: <p>", "DEL PrimitiveType: int", "DEL TextElement: 'backslash' (ie: \\) character. Escaping is used to neutralize string delimiters (the single", "DEL StringLiteral: \"\\\\t\"", "DEL Modifier: static", "DEL SimpleType: StringBuilder", "DEL IfStatement", "DEL ReturnStatement", "DEL CharacterLiteral: 'H'", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL SimpleName: sep", "DEL SimpleName: value", "DEL SimpleType: String", "DEL VariableDeclarationStatement", "DEL TextElement:  the string to escape", "DEL SimpleName: xc", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleType: StringBuilder", "DEL SimpleName: append", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: length", "DEL SimpleName: begin", "DEL SimpleType: StringBuilder", "DEL TextElement: Default constructor.  ", "DEL CharacterLiteral: 'h'", "DEL TextElement: The first printable 7bits ascii character. ", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: index", "DEL Modifier: public", "DEL TagElement: @param", "DEL PrefixExpression: ++", "DEL FieldDeclaration", "DEL Javadoc", "DEL TagElement", "DEL PrefixExpression: ++", "DEL SimpleName: length", "DEL TextElement:  whether the separator, the first character, should be considered", "DEL NumberLiteral: 0", "DEL FieldDeclaration", "DEL SimpleName: end", "DEL VariableDeclarationFragment", "DEL SimpleName: strb", "DEL VariableDeclarationStatement", "DEL SimpleName: c", "DEL InfixExpression: +", "DEL SimpleType: CharSequence", "DEL Modifier: private", "DEL SimpleType: CharSequence", "DEL SimpleName: append", "DEL BreakStatement", "DEL Assignment: =", "DEL SimpleName: String", "DEL TagElement: @return", "DEL CharacterLiteral: 'a'", "DEL SimpleName: str", "DEL InfixExpression: &&", "DEL SingleVariableDeclaration", "DEL Block", "DEL TextElement:  the offset into the origin", "DEL Modifier: public", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL CharacterLiteral: '\\''", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: FIRST_ASCII", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: escape", "DEL CharacterLiteral: 'u'", "DEL SimpleName: strb", "DEL SimpleName: append", "DEL SimpleName: readUnicodeChar", "DEL Modifier: private", "DEL SimpleName: CharSequence", "DEL VariableDeclarationFragment", "DEL InfixExpression: &&", "DEL VariableDeclarationStatement", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL SimpleName: strb", "DEL InfixExpression: -", "DEL SimpleName: charAt", "DEL VariableDeclarationStatement"]}]}}, {"StringParser_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Common constant strings utilities.(2)", "Delete TextElement: <p>(3)", "Delete TextElement: This package methods read JEXL string literals and handle escaping through the(4)", "Delete TextElement: 'backslash' (ie: \\) character. Escaping is used to neutralize string delimiters (the single(5)", "Delete TextElement: and double quotes) and read Unicode hexadecimal encoded characters.(6)", "Delete TextElement: </p>(7)", "Delete TextElement: <p>(8)", "Delete TextElement: The only escapable characters are the single and double quotes - ''' and '\"' -,(9)", "Delete TextElement: a Unicode sequence starting with 'u' followed by 4 hexadecimals and(10)", "Delete TextElement: the backslash character - '\\' - itself.(11)", "Delete TextElement: </p>(12)", "Delete TextElement: <p>(13)", "Delete TextElement: A sequence where '\\' occurs before any non-escapable character or sequence has no effect, the(14)", "Delete TextElement: sequence output being the same as the input.(15)", "Delete TextElement: </p>(16)", "Delete TagElement(17)", "Delete Javadoc(18)", "Delete Modifier: public(19)", "Delete SimpleName: StringParser(20)", "Delete TextElement: Default constructor.  (21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete Modifier: public(24)", "Delete SimpleName: StringParser(25)", "Delete Block(26)", "Delete MethodDeclaration(27)", "Delete TextElement: Builds a string, handles escaping through '\\' syntax.(28)", "Delete TagElement(29)", "Delete SimpleName: str(30)", "Delete TextElement:  the string to build from(31)", "Delete TagElement: @param(32)", "Delete SimpleName: eatsep(33)", "Delete TextElement:  whether the separator, the first character, should be considered(34)", "Delete TagElement: @param(35)", "Delete TextElement:  the built string(36)", "Delete TagElement: @return(37)", "Delete Javadoc(38)", "Delete Modifier: public(39)", "Delete Modifier: static(40)", "Delete SimpleName: String(41)", "Delete SimpleType: String(42)", "Delete SimpleName: buildString(43)", "Delete SimpleName: CharSequence(44)", "Delete SimpleType: CharSequence(45)", "Delete SimpleName: str(46)", "Delete SingleVariableDeclaration(47)", "Delete PrimitiveType: boolean(48)", "Delete SimpleName: eatsep(49)", "Delete SingleVariableDeclaration(50)", "Delete SimpleName: StringBuilder(51)", "Delete SimpleType: StringBuilder(52)", "Delete SimpleName: strb(53)", "Delete SimpleName: StringBuilder(54)", "Delete SimpleType: StringBuilder(55)", "Delete SimpleName: str(56)", "Delete SimpleName: length(57)", "Delete MethodInvocation(58)", "Delete ClassInstanceCreation(59)", "Delete VariableDeclarationFragment(60)", "Delete VariableDeclarationStatement(61)", "Delete PrimitiveType: char(62)", "Delete SimpleName: sep(63)", "Delete SimpleName: eatsep(64)", "Delete SimpleName: str(65)", "Delete SimpleName: charAt(66)", "Delete NumberLiteral: 0(67)", "Delete MethodInvocation(68)", "Delete NumberLiteral: 0(69)", "Delete ConditionalExpression(70)", "Delete VariableDeclarationFragment(71)", "Delete VariableDeclarationStatement(72)", "Delete PrimitiveType: int(73)", "Delete SimpleName: end(74)", "Delete SimpleName: str(75)", "Delete SimpleName: length(76)", "Delete MethodInvocation(77)", "Delete SimpleName: eatsep(78)", "Delete NumberLiteral: 1(79)", "Delete NumberLiteral: 0(80)", "Delete ConditionalExpression(81)", "Delete ParenthesizedExpression(82)", "Delete InfixExpression: -(83)", "Delete VariableDeclarationFragment(84)", "Delete VariableDeclarationStatement(85)", "Delete PrimitiveType: int(86)", "Delete SimpleName: begin(87)", "Delete SimpleName: eatsep(88)", "Delete NumberLiteral: 1(89)", "Delete NumberLiteral: 0(90)", "Delete ConditionalExpression(91)", "Delete ParenthesizedExpression(92)", "Delete VariableDeclarationFragment(93)", "Delete VariableDeclarationStatement(94)", "Delete SimpleName: read(95)", "Delete SimpleName: strb(96)", "Delete SimpleName: str(97)", "Delete SimpleName: begin(98)", "Delete SimpleName: end(99)", "Delete SimpleName: sep(100)", "Delete MethodInvocation(101)", "Delete ExpressionStatement(102)", "Delete SimpleName: strb(103)", "Delete SimpleName: toString(104)", "Delete MethodInvocation(105)", "Delete ReturnStatement(106)", "Delete Block(107)", "Delete MethodDeclaration(108)", "Delete TextElement: Read the remainder of a string till a given separator,(109)", "Delete TextElement: handles escaping through '\\' syntax.(110)", "Delete TagElement(111)", "Delete SimpleName: strb(112)", "Delete TextElement:  the destination buffer to copy characters into(113)", "Delete TagElement: @param(114)", "Delete SimpleName: str(115)", "Delete TextElement:  the origin(116)", "Delete TagElement: @param(117)", "Delete SimpleName: index(118)", "Delete TextElement:  the offset into the origin(119)", "Delete TagElement: @param(120)", "Delete SimpleName: sep(121)", "Delete TextElement:  the separator, single or double quote, marking end of string(122)", "Delete TagElement: @param(123)", "Delete TextElement:  the offset in origin(124)", "Delete TagElement: @return(125)", "Delete Javadoc(126)", "Delete Modifier: public(127)", "Delete Modifier: static(128)", "Delete PrimitiveType: int(129)", "Delete SimpleName: readString(130)", "Delete SimpleName: StringBuilder(131)", "Delete SimpleType: StringBuilder(132)", "Delete SimpleName: strb(133)", "Delete SingleVariableDeclaration(134)", "Delete SimpleName: CharSequence(135)", "Delete SimpleType: CharSequence(136)", "Delete SimpleName: str(137)", "Delete SingleVariableDeclaration(138)", "Delete PrimitiveType: int(139)", "Delete SimpleName: index(140)", "Delete SingleVariableDeclaration(141)", "Delete PrimitiveType: char(142)", "Delete SimpleName: sep(143)", "Delete SingleVariableDeclaration(144)", "Delete SimpleName: read(145)", "Delete SimpleName: strb(146)", "Delete SimpleName: str(147)", "Delete SimpleName: index(148)", "Delete SimpleName: str(149)", "Delete SimpleName: length(150)", "Delete MethodInvocation(151)", "Delete SimpleName: sep(152)", "Delete MethodInvocation(153)", "Delete ReturnStatement(154)", "Delete Block(155)", "Delete MethodDeclaration(156)", "Delete TextElement: The length of an escaped unicode sequence. (157)", "Delete TagElement(158)", "Delete Javadoc(159)", "Delete Modifier: private(160)", "Delete Modifier: static(161)", "Delete Modifier: final(162)", "Delete PrimitiveType: int(163)", "Delete SimpleName: UCHAR_LEN(164)", "Delete NumberLiteral: 4(165)", "Delete VariableDeclarationFragment(166)", "Delete FieldDeclaration(167)", "Delete TextElement: Read the remainder of a string till a given separator,(168)", "Delete TextElement: handles escaping through '\\' syntax.(169)", "Delete TagElement(170)", "Delete SimpleName: strb(171)", "Delete TextElement:  the destination buffer to copy characters into(172)", "Delete TagElement: @param(173)", "Delete SimpleName: str(174)", "Delete TextElement:  the origin(175)", "Delete TagElement: @param(176)", "Delete SimpleName: begin(177)", "Delete TextElement:  the relative offset in str to begin reading(178)", "Delete TagElement: @param(179)", "Delete SimpleName: end(180)", "Delete TextElement:  the relative offset in str to end reading(181)", "Delete TagElement: @param(182)", "Delete SimpleName: sep(183)", "Delete TextElement:  the separator, single or double quote, marking end of string(184)", "Delete TagElement: @param(185)", "Delete TextElement:  the last character offset handled in origin(186)", "Delete TagElement: @return(187)", "Delete Javadoc(188)", "Delete Modifier: private(189)", "Delete Modifier: static(190)", "Delete PrimitiveType: int(191)", "Delete SimpleName: read(192)", "Delete SimpleName: StringBuilder(193)", "Delete SimpleType: StringBuilder(194)", "Delete SimpleName: strb(195)", "Delete SingleVariableDeclaration(196)", "Delete SimpleName: CharSequence(197)", "Delete SimpleType: CharSequence(198)", "Delete SimpleName: str(199)", "Delete SingleVariableDeclaration(200)", "Delete PrimitiveType: int(201)", "Delete SimpleName: begin(202)", "Delete SingleVariableDeclaration(203)", "Delete PrimitiveType: int(204)", "Delete SimpleName: end(205)", "Delete SingleVariableDeclaration(206)", "Delete PrimitiveType: char(207)", "Delete SimpleName: sep(208)", "Delete SingleVariableDeclaration(209)", "Delete PrimitiveType: boolean(210)", "Delete SimpleName: escape(211)", "Delete BooleanLiteral: false(212)", "Delete VariableDeclarationFragment(213)", "Delete VariableDeclarationStatement(214)", "Delete PrimitiveType: int(215)", "Delete SimpleName: index(216)", "Delete SimpleName: begin(217)", "Delete VariableDeclarationFragment(218)", "Delete VariableDeclarationStatement(219)", "Delete SimpleName: index(220)", "Delete SimpleName: end(221)", "Delete InfixExpression: <(222)", "Delete SimpleName: index(223)", "Delete PrefixExpression: ++(224)", "Delete PrimitiveType: char(225)", "Delete SimpleName: c(226)", "Delete SimpleName: str(227)", "Delete SimpleName: charAt(228)", "Delete SimpleName: index(229)", "Delete MethodInvocation(230)", "Delete VariableDeclarationFragment(231)", "Delete VariableDeclarationStatement(232)", "Delete SimpleName: escape(233)", "Delete SimpleName: c(234)", "Delete CharacterLiteral: 'u'(235)", "Delete InfixExpression: ==(236)", "Delete SimpleName: index(237)", "Delete SimpleName: UCHAR_LEN(238)", "Delete InfixExpression: +(239)", "Delete ParenthesizedExpression(240)", "Delete SimpleName: end(241)", "Delete InfixExpression: <(242)", "Delete InfixExpression: &&(243)", "Delete SimpleName: readUnicodeChar(244)", "Delete SimpleName: strb(245)", "Delete SimpleName: str(246)", "Delete SimpleName: index(247)", "Delete NumberLiteral: 1(248)", "Delete InfixExpression: +(249)", "Delete MethodInvocation(250)", "Delete NumberLiteral: 0(251)", "Delete InfixExpression: >(252)", "Delete InfixExpression: &&(253)", "Delete SimpleName: index(254)", "Delete SimpleName: UCHAR_LEN(255)", "Delete Assignment: +=(256)", "Delete ExpressionStatement(257)", "Delete Block(258)", "Delete PrimitiveType: boolean(259)", "Delete SimpleName: notSeparator(260)", "Delete SimpleName: sep(261)", "Delete NumberLiteral: 0(262)", "Delete InfixExpression: ==(263)", "Delete SimpleName: c(264)", "Delete CharacterLiteral: '\\''(265)", "Delete InfixExpression: !=(266)", "Delete SimpleName: c(267)", "Delete CharacterLiteral: '\"'(268)", "Delete InfixExpression: !=(269)", "Delete InfixExpression: &&(270)", "Delete SimpleName: c(271)", "Delete SimpleName: sep(272)", "Delete InfixExpression: !=(273)", "Delete ConditionalExpression(274)", "Delete VariableDeclarationFragment(275)", "Delete VariableDeclarationStatement(276)", "Delete SimpleName: notSeparator(277)", "Delete SimpleName: c(278)", "Delete CharacterLiteral: '\\\\'(279)", "Delete InfixExpression: !=(280)", "Delete InfixExpression: &&(281)", "Delete SimpleName: strb(282)", "Delete SimpleName: append(283)", "Delete CharacterLiteral: '\\\\'(284)", "Delete MethodInvocation(285)", "Delete ExpressionStatement(286)", "Delete Block(287)", "Delete IfStatement(288)", "Delete SimpleName: strb(289)", "Delete SimpleName: append(290)", "Delete SimpleName: c(291)", "Delete MethodInvocation(292)", "Delete ExpressionStatement(293)", "Delete Block(294)", "Delete IfStatement(295)", "Delete SimpleName: escape(296)", "Delete BooleanLiteral: false(297)", "Delete Assignment: =(298)", "Delete ExpressionStatement(299)", "Delete ContinueStatement(300)", "Delete Block(301)", "Delete IfStatement(302)", "Delete SimpleName: c(303)", "Delete CharacterLiteral: '\\\\'(304)", "Delete InfixExpression: ==(305)", "Delete SimpleName: escape(306)", "Delete BooleanLiteral: true(307)", "Delete Assignment: =(308)", "Delete ExpressionStatement(309)", "Delete ContinueStatement(310)", "Delete Block(311)", "Delete IfStatement(312)", "Delete SimpleName: strb(313)", "Delete SimpleName: append(314)", "Delete SimpleName: c(315)", "Delete MethodInvocation(316)", "Delete ExpressionStatement(317)", "Delete SimpleName: c(318)", "Delete SimpleName: sep(319)", "Delete InfixExpression: ==(320)", "Delete BreakStatement(321)", "Delete Block(322)", "Delete IfStatement(323)", "Delete Block(324)", "Delete ForStatement(325)", "Delete SimpleName: index(326)", "Delete ReturnStatement(327)", "Delete Block(328)", "Delete MethodDeclaration(329)", "Delete TextElement: Initial shift value for composing a Unicode char from 4 nibbles (16 - 4). (330)", "Delete TagElement(331)", "Delete Javadoc(332)", "Delete Modifier: private(333)", "Delete Modifier: static(334)", "Delete Modifier: final(335)", "Delete PrimitiveType: int(336)", "Delete SimpleName: SHIFT(337)", "Delete NumberLiteral: 12(338)", "Delete VariableDeclarationFragment(339)", "Delete FieldDeclaration(340)", "Delete TextElement: The base 10 offset used to convert hexa characters to decimal. (341)", "Delete TagElement(342)", "Delete Javadoc(343)", "Delete Modifier: private(344)", "Delete Modifier: static(345)", "Delete Modifier: final(346)", "Delete PrimitiveType: int(347)", "Delete SimpleName: BASE10(348)", "Delete NumberLiteral: 10(349)", "Delete VariableDeclarationFragment(350)", "Delete FieldDeclaration(351)", "Delete TextElement: Reads a Unicode escape character.(352)", "Delete TagElement(353)", "Delete SimpleName: strb(354)", "Delete TextElement:  the builder to write the character to(355)", "Delete TagElement: @param(356)", "Delete SimpleName: str(357)", "Delete TextElement:  the sequence(358)", "Delete TagElement: @param(359)", "Delete SimpleName: begin(360)", "Delete TextElement:  the begin offset in sequence (after the '\\\\u')(361)", "Delete TagElement: @param(362)", "Delete TextElement:  0 if char could not be read, 4 otherwise(363)", "Delete TagElement: @return(364)", "Delete Javadoc(365)", "Delete Modifier: private(366)", "Delete Modifier: static(367)", "Delete PrimitiveType: int(368)", "Delete SimpleName: readUnicodeChar(369)", "Delete SimpleName: StringBuilder(370)", "Delete SimpleType: StringBuilder(371)", "Delete SimpleName: strb(372)", "Delete SingleVariableDeclaration(373)", "Delete SimpleName: CharSequence(374)", "Delete SimpleType: CharSequence(375)", "Delete SimpleName: str(376)", "Delete SingleVariableDeclaration(377)", "Delete PrimitiveType: int(378)", "Delete SimpleName: begin(379)", "Delete SingleVariableDeclaration(380)", "Delete PrimitiveType: char(381)", "Delete SimpleName: xc(382)", "Delete NumberLiteral: 0(383)", "Delete VariableDeclarationFragment(384)", "Delete VariableDeclarationStatement(385)", "Delete PrimitiveType: int(386)", "Delete SimpleName: bits(387)", "Delete SimpleName: SHIFT(388)", "Delete VariableDeclarationFragment(389)", "Delete VariableDeclarationStatement(390)", "Delete PrimitiveType: int(391)", "Delete SimpleName: value(392)", "Delete NumberLiteral: 0(393)", "Delete VariableDeclarationFragment(394)", "Delete VariableDeclarationStatement(395)", "Delete PrimitiveType: int(396)", "Delete SimpleName: offset(397)", "Delete NumberLiteral: 0(398)", "Delete VariableDeclarationFragment(399)", "Delete VariableDeclarationExpression(400)", "Delete SimpleName: offset(401)", "Delete SimpleName: UCHAR_LEN(402)", "Delete InfixExpression: <(403)", "Delete SimpleName: offset(404)", "Delete PrefixExpression: ++(405)", "Delete PrimitiveType: char(406)", "Delete SimpleName: c(407)", "Delete SimpleName: str(408)", "Delete SimpleName: charAt(409)", "Delete SimpleName: begin(410)", "Delete SimpleName: offset(411)", "Delete InfixExpression: +(412)", "Delete MethodInvocation(413)", "Delete VariableDeclarationFragment(414)", "Delete VariableDeclarationStatement(415)", "Delete SimpleName: c(416)", "Delete CharacterLiteral: '0'(417)", "Delete InfixExpression: >=(418)", "Delete SimpleName: c(419)", "Delete CharacterLiteral: '9'(420)", "Delete InfixExpression: <=(421)", "Delete InfixExpression: &&(422)", "Delete SimpleName: value(423)", "Delete SimpleName: c(424)", "Delete CharacterLiteral: '0'(425)", "Delete InfixExpression: -(426)", "Delete ParenthesizedExpression(427)", "Delete Assignment: =(428)", "Delete ExpressionStatement(429)", "Delete Block(430)", "Delete SimpleName: c(431)", "Delete CharacterLiteral: 'a'(432)", "Delete InfixExpression: >=(433)", "Delete SimpleName: c(434)", "Delete CharacterLiteral: 'h'(435)", "Delete InfixExpression: <=(436)", "Delete InfixExpression: &&(437)", "Delete SimpleName: value(438)", "Delete SimpleName: c(439)", "Delete CharacterLiteral: 'a'(440)", "Delete InfixExpression: -(441)", "Delete SimpleName: BASE10(442)", "Delete InfixExpression: +(443)", "Delete ParenthesizedExpression(444)", "Delete Assignment: =(445)", "Delete ExpressionStatement(446)", "Delete Block(447)", "Delete SimpleName: c(448)", "Delete CharacterLiteral: 'A'(449)", "Delete InfixExpression: >=(450)", "Delete SimpleName: c(451)", "Delete CharacterLiteral: 'H'(452)", "Delete InfixExpression: <=(453)", "Delete InfixExpression: &&(454)", "Delete SimpleName: value(455)", "Delete SimpleName: c(456)", "Delete CharacterLiteral: 'A'(457)", "Delete InfixExpression: -(458)", "Delete SimpleName: BASE10(459)", "Delete InfixExpression: +(460)", "Delete ParenthesizedExpression(461)", "Delete Assignment: =(462)", "Delete ExpressionStatement(463)", "Delete Block(464)", "Delete NumberLiteral: 0(465)", "Delete ReturnStatement(466)", "Delete Block(467)", "Delete IfStatement(468)", "Delete IfStatement(469)", "Delete IfStatement(470)", "Delete SimpleName: xc(471)", "Delete SimpleName: value(472)", "Delete SimpleName: bits(473)", "Delete InfixExpression: <<(474)", "Delete Assignment: |=(475)", "Delete ExpressionStatement(476)", "Delete SimpleName: bits(477)", "Delete SimpleName: UCHAR_LEN(478)", "Delete Assignment: -=(479)", "Delete ExpressionStatement(480)", "Delete Block(481)", "Delete ForStatement(482)", "Delete SimpleName: strb(483)", "Delete SimpleName: append(484)", "Delete SimpleName: xc(485)", "Delete MethodInvocation(486)", "Delete ExpressionStatement(487)", "Delete SimpleName: UCHAR_LEN(488)", "Delete ReturnStatement(489)", "Delete Block(490)", "Delete MethodDeclaration(491)", "Delete TextElement: The last 7bits ascii character. (492)", "Delete TagElement(493)", "Delete Javadoc(494)", "Delete Modifier: private(495)", "Delete Modifier: static(496)", "Delete Modifier: final(497)", "Delete PrimitiveType: char(498)", "Delete SimpleName: LAST_ASCII(499)", "Delete NumberLiteral: 127(500)", "Delete VariableDeclarationFragment(501)", "Delete FieldDeclaration(502)", "Delete TextElement: The first printable 7bits ascii character. (503)", "Delete TagElement(504)", "Delete Javadoc(505)", "Delete Modifier: private(506)", "Delete Modifier: static(507)", "Delete Modifier: final(508)", "Delete PrimitiveType: char(509)", "Delete SimpleName: FIRST_ASCII(510)", "Delete NumberLiteral: 32(511)", "Delete VariableDeclarationFragment(512)", "Delete FieldDeclaration(513)", "Delete TextElement: Escapes a String representation, expand non-ASCII characters as Unicode escape sequence.(514)", "Delete TagElement(515)", "Delete SimpleName: str(516)", "Delete TextElement:  the string to escape(517)", "Delete TagElement: @param(518)", "Delete TextElement:  the escaped representation(519)", "Delete TagElement: @return(520)", "Delete Javadoc(521)", "Delete Modifier: public(522)", "Delete Modifier: static(523)", "Delete SimpleName: String(524)", "Delete SimpleType: String(525)", "Delete SimpleName: escapeString(526)", "Delete SimpleName: String(527)", "Delete SimpleType: String(528)", "Delete SimpleName: str(529)", "Delete SingleVariableDeclaration(530)", "Delete PrimitiveType: char(531)", "Delete SimpleName: delim(532)", "Delete SingleVariableDeclaration(533)", "Delete SimpleName: str(534)", "Delete NullLiteral(535)", "Delete InfixExpression: ==(536)", "Delete NullLiteral(537)", "Delete ReturnStatement(538)", "Delete Block(539)", "Delete IfStatement(540)", "Delete Modifier: final(541)", "Delete PrimitiveType: int(542)", "Delete SimpleName: length(543)", "Delete SimpleName: str(544)", "Delete SimpleName: length(545)", "Delete MethodInvocation(546)", "Delete VariableDeclarationFragment(547)", "Delete VariableDeclarationStatement(548)", "Delete SimpleName: StringBuilder(549)", "Delete SimpleType: StringBuilder(550)", "Delete SimpleName: strb(551)", "Delete SimpleName: StringBuilder(552)", "Delete SimpleType: StringBuilder(553)", "Delete SimpleName: length(554)", "Delete NumberLiteral: 2(555)", "Delete InfixExpression: +(556)", "Delete ClassInstanceCreation(557)", "Delete VariableDeclarationFragment(558)", "Delete VariableDeclarationStatement(559)", "Delete SimpleName: strb(560)", "Delete SimpleName: append(561)", "Delete SimpleName: delim(562)", "Delete MethodInvocation(563)", "Delete ExpressionStatement(564)", "Delete PrimitiveType: int(565)", "Delete SimpleName: i(566)", "Delete NumberLiteral: 0(567)", "Delete VariableDeclarationFragment(568)", "Delete VariableDeclarationExpression(569)", "Delete SimpleName: i(570)", "Delete SimpleName: length(571)", "Delete InfixExpression: <(572)", "Delete SimpleName: i(573)", "Delete PrefixExpression: ++(574)", "Delete PrimitiveType: char(575)", "Delete SimpleName: c(576)", "Delete SimpleName: str(577)", "Delete SimpleName: charAt(578)", "Delete SimpleName: i(579)", "Delete MethodInvocation(580)", "Delete VariableDeclarationFragment(581)", "Delete VariableDeclarationStatement(582)", "Delete SimpleName: c(583)", "Delete NumberLiteral: 0(584)", "Delete SwitchCase(585)", "Delete ContinueStatement(586)", "Delete CharacterLiteral: '\\b'(587)", "Delete SwitchCase(588)", "Delete SimpleName: strb(589)", "Delete SimpleName: append(590)", "Delete StringLiteral: \"\\\\b\"(591)", "Delete MethodInvocation(592)", "Delete ExpressionStatement(593)", "Delete BreakStatement(594)", "Delete CharacterLiteral: '\\t'(595)", "Delete SwitchCase(596)", "Delete SimpleName: strb(597)", "Delete SimpleName: append(598)", "Delete StringLiteral: \"\\\\t\"(599)", "Delete MethodInvocation(600)", "Delete ExpressionStatement(601)", "Delete BreakStatement(602)", "Delete CharacterLiteral: '\\n'(603)", "Delete SwitchCase(604)", "Delete SimpleName: strb(605)", "Delete SimpleName: append(606)", "Delete StringLiteral: \"\\\\n\"(607)", "Delete MethodInvocation(608)", "Delete ExpressionStatement(609)", "Delete BreakStatement(610)", "Delete CharacterLiteral: '\\f'(611)", "Delete SwitchCase(612)", "Delete SimpleName: strb(613)", "Delete SimpleName: append(614)", "Delete StringLiteral: \"\\\\f\"(615)", "Delete MethodInvocation(616)", "Delete ExpressionStatement(617)", "Delete BreakStatement(618)", "Delete CharacterLiteral: '\\r'(619)", "Delete SwitchCase(620)", "Delete SimpleName: strb(621)", "Delete SimpleName: append(622)", "Delete StringLiteral: \"\\\\r\"(623)", "Delete MethodInvocation(624)", "Delete ExpressionStatement(625)", "Delete BreakStatement(626)", "Delete CharacterLiteral: '\\\"'(627)", "Delete SwitchCase(628)", "Delete SimpleName: strb(629)", "Delete SimpleName: append(630)", "Delete StringLiteral: \"\\\\\\\"\"(631)", "Delete MethodInvocation(632)", "Delete ExpressionStatement(633)", "Delete BreakStatement(634)", "Delete CharacterLiteral: '\\''(635)", "Delete SwitchCase(636)", "Delete SimpleName: strb(637)", "Delete SimpleName: append(638)", "Delete StringLiteral: \"\\\\\\'\"(639)", "Delete MethodInvocation(640)", "Delete ExpressionStatement(641)", "Delete BreakStatement(642)", "Delete CharacterLiteral: '\\\\'(643)", "Delete SwitchCase(644)", "Delete SimpleName: strb(645)", "Delete SimpleName: append(646)", "Delete StringLiteral: \"\\\\\\\\\"(647)", "Delete MethodInvocation(648)", "Delete ExpressionStatement(649)", "Delete BreakStatement(650)", "Delete SwitchCase(651)", "Delete SimpleName: c(652)", "Delete SimpleName: FIRST_ASCII(653)", "Delete InfixExpression: >=(654)", "Delete SimpleName: c(655)", "Delete SimpleName: LAST_ASCII(656)", "Delete InfixExpression: <=(657)", "Delete InfixExpression: &&(658)", "Delete SimpleName: strb(659)", "Delete SimpleName: append(660)", "Delete SimpleName: c(661)", "Delete MethodInvocation(662)", "Delete ExpressionStatement(663)", "Delete Block(664)", "Delete SimpleName: strb(665)", "Delete SimpleName: append(666)", "Delete CharacterLiteral: '\\\\'(667)", "Delete MethodInvocation(668)", "Delete ExpressionStatement(669)", "Delete SimpleName: strb(670)", "Delete SimpleName: append(671)", "Delete CharacterLiteral: 'u'(672)", "Delete MethodInvocation(673)", "Delete ExpressionStatement(674)", "Delete SimpleName: String(675)", "Delete SimpleType: String(676)", "Delete SimpleName: hex(677)", "Delete SimpleName: Integer(678)", "Delete SimpleName: toHexString(679)", "Delete SimpleName: c(680)", "Delete MethodInvocation(681)", "Delete VariableDeclarationFragment(682)", "Delete VariableDeclarationStatement(683)", "Delete PrimitiveType: int(684)", "Delete SimpleName: h(685)", "Delete SimpleName: hex(686)", "Delete SimpleName: length(687)", "Delete MethodInvocation(688)", "Delete VariableDeclarationFragment(689)", "Delete VariableDeclarationExpression(690)", "Delete SimpleName: h(691)", "Delete SimpleName: UCHAR_LEN(692)", "Delete InfixExpression: <(693)", "Delete SimpleName: h(694)", "Delete PrefixExpression: ++(695)", "Delete SimpleName: strb(696)", "Delete SimpleName: append(697)", "Delete CharacterLiteral: '0'(698)", "Delete MethodInvocation(699)", "Delete ExpressionStatement(700)", "Delete Block(701)", "Delete ForStatement(702)", "Delete SimpleName: strb(703)", "Delete SimpleName: append(704)", "Delete SimpleName: hex(705)", "Delete MethodInvocation(706)", "Delete ExpressionStatement(707)", "Delete Block(708)", "Delete IfStatement(709)", "Delete SwitchStatement(710)", "Delete Block(711)", "Delete ForStatement(712)", "Delete SimpleName: strb(713)", "Delete SimpleName: append(714)", "Delete SimpleName: delim(715)", "Delete MethodInvocation(716)", "Delete ExpressionStatement(717)", "Delete SimpleName: strb(718)", "Delete SimpleName: toString(719)", "Delete MethodInvocation(720)", "Delete ReturnStatement(721)", "Delete Block(722)", "Delete MethodDeclaration(723)", "Delete TypeDeclaration: class(724)"]}}, {"TokenMgrError_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.parser"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TagElement", "DEL ReturnStatement", "DEL TagElement: @return", "DEL Modifier: private", "DEL TextElement: Detected (and bailed out of) an infinite loop in the token manager.", "DEL NumberLiteral: 1", "DEL TextElement: Indicates the reason why the exception is thrown. It will have", "DEL Modifier: private", "DEL TextElement: Last correct input before error occurs.", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL TextElement: Token Manager Error.", "DEL Modifier: public", "DEL PrimitiveType: int", "DEL SimpleName: errorColumn", "DEL FieldDeclaration", "DEL TextElement: Increment only if the <i>serialized</i> form of the", "DEL TagElement", "DEL Javadoc", "DEL FieldDeclaration", "DEL Assignment: =", "DEL SimpleName: after", "DEL TagElement", "DEL Modifier: final", "DEL Modifier: public", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Modifier: private", "DEL SimpleName: eof", "DEL TagElement: @return", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL SimpleName: reason", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: errorLine", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL TagElement", "DEL SimpleName: state", "DEL PrimitiveType: int", "DEL SimpleName: String", "DEL PrimitiveType: boolean", "DEL PrimitiveType: long", "DEL TagElement", "DEL StringLiteral: \"), \"", "DEL SimpleName: StringParser", "DEL SimpleName: errorCode", "DEL SimpleName: Override", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL TextElement: Full Constructor. ", "DEL SimpleName: column", "DEL Javadoc", "DEL MethodDeclaration", "DEL Block", "DEL SingleMemberAnnotation", "DEL Block", "DEL TagElement", "DEL TextElement: Error line.", "DEL TextElement: token manager to indicate a lexical error.", "DEL FieldDeclaration", "DEL Modifier: static", "DEL TextElement:  one of the 4 lexical error codes", "DEL Javadoc", "DEL Javadoc", "DEL TextElement: Gets the reason why the exception is thrown.", "DEL TagElement: @return", "DEL SimpleName: lexState", "DEL StringLiteral: \" (\"", "DEL SimpleName: curChar", "DEL SingleVariableDeclaration", "DEL SimpleName: current", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL Modifier: static", "DEL Javadoc", "DEL SimpleName: message", "DEL Block", "DEL TagElement", "DEL SimpleName: column", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: current", "DEL SimpleType: String", "DEL Javadoc", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL CharacterLiteral: '\"'", "DEL SimpleName: column", "DEL CharacterLiteral: '\"'", "DEL MethodDeclaration", "DEL Javadoc", "DEL ConditionalExpression", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL TextElement: Constructor with message and reason. ", "DEL StringLiteral: \"<EOF> \"", "DEL SimpleName: TokenMgrError", "DEL SimpleName: String", "DEL ParenthesizedExpression", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: current", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: escapeString", "DEL ReturnStatement", "DEL Javadoc", "DEL TextElement: Gets the column number.", "DEL Block", "DEL TextElement: Gets the last correct input.", "DEL SimpleName: Error", "DEL SimpleName: LEXICAL_ERROR", "DEL PrimitiveType: int", "DEL SimpleName: reason", "DEL SimpleName: errorCode", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement: class changes.", "DEL Block", "DEL TextElement: one of the above 4 values.", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: curChar", "DEL TagElement", "DEL SimpleName: line", "DEL PrimitiveType: char", "DEL ExpressionStatement", "DEL TextElement: Returns a detailed message for the Error when it is thrown by the", "DEL SimpleType: String", "DEL PrimitiveType: int", "DEL SimpleName: line", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: line", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL Modifier: static", "DEL SimpleName: TokenMgrError", "DEL SimpleName: errorLine", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SuperConstructorInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getLine", "DEL Modifier: public", "DEL NumberLiteral: 2", "DEL SimpleName: getErrorCode", "DEL Block", "DEL SimpleName: getAfter", "DEL SimpleName: state", "DEL StringLiteral: \"unused\"", "DEL StringLiteral: \", column \"", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"Lexical error at line \"", "DEL Modifier: final", "DEL Modifier: public", "DEL MethodDeclaration", "DEL TagElement", "DEL TypeDeclaration: class", "DEL TextElement:  the string after which the error occured", "DEL Javadoc", "DEL NumberLiteral: 3", "DEL SingleVariableDeclaration", "DEL SimpleName: lexState", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL SimpleName: valueOf", "DEL SimpleType: String", "DEL SimpleName: eof", "DEL TextElement: The current character.", "DEL SimpleName: column", "DEL VariableDeclarationFragment", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleType: Error", "DEL SimpleName: errorColumn", "DEL TextElement: Gets the line number.", "DEL SimpleName: LOOP_DETECTED", "DEL Javadoc", "DEL Modifier: static", "DEL Assignment: =", "DEL SimpleName: STATIC_LEXER_ERROR", "DEL SimpleName: EOFSeen", "DEL SimpleName: errorAfter", "DEL MethodDeclaration", "DEL SimpleName: line", "DEL SimpleName: TokenMgrError", "DEL VariableDeclarationFragment", "DEL SimpleName: serialVersionUID", "DEL SimpleName: after", "DEL SimpleName: after", "DEL Modifier: public", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL ExpressionStatement", "DEL TextElement:  the message", "DEL SimpleName: errorAfter", "DEL Assignment: =", "DEL SimpleName: reason", "DEL ReturnStatement", "DEL StringLiteral: \"after : \"", "DEL TagElement", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: SuppressWarnings", "DEL FieldDeclaration", "DEL Modifier: private", "DEL MarkerAnnotation", "DEL TextElement:  line number.", "DEL SimpleName: eof", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleType: String", "DEL SimpleName: message", "DEL FieldDeclaration", "DEL TagElement", "DEL TagElement", "DEL TextElement: The version identifier for this Serializable class.", "DEL TagElement: @return", "DEL CastExpression", "DEL Javadoc", "DEL SimpleName: errorCode", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: String", "DEL StringLiteral: \".  Encountered: \"", "DEL PrimitiveType: int", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL Modifier: static", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL TagElement", "DEL Assignment: =", "DEL TextElement: An attempt was made to create a second instance of a static token manager.", "DEL PrimitiveType: char", "DEL Javadoc", "DEL TextElement:  the column.", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: String", "DEL Modifier: public", "DEL TextElement: Lexical error occurred.", "DEL FieldDeclaration", "DEL NumberLiteral: 1L", "DEL Modifier: private", "DEL SimpleName: current", "DEL Javadoc", "DEL TagElement", "DEL Modifier: public", "DEL Block", "DEL SimpleName: errorCode", "DEL TextElement: The lexer state.", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: getColumn", "DEL ParenthesizedExpression", "DEL TextElement: Error column.", "DEL SimpleName: StringParser", "DEL SimpleName: EOFSeen", "DEL SimpleName: getMessage", "DEL SimpleName: reason", "DEL TextElement: Tried to change to an invalid lexical state.", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL Modifier: public", "DEL TagElement", "DEL Modifier: private", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: String", "DEL SimpleName: after", "DEL SimpleName: escapeString", "DEL ExpressionStatement", "DEL Javadoc", "DEL ParenthesizedExpression", "DEL TagElement", "DEL SimpleName: INVALID_LEXICAL_STATE", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL TagElement"]}]}}, {"TokenMgrError_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.parser(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Token Manager Error.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete Modifier: public(5)", "Delete SimpleName: TokenMgrError(6)", "Delete SimpleName: Error(7)", "Delete SimpleType: Error(8)", "Delete TextElement: The version identifier for this Serializable class.(9)", "Delete TextElement: Increment only if the <i>serialized</i> form of the(10)", "Delete TextElement: class changes.(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: private(14)", "Delete Modifier: static(15)", "Delete Modifier: final(16)", "Delete PrimitiveType: long(17)", "Delete SimpleName: serialVersionUID(18)", "Delete NumberLiteral: 1L(19)", "Delete VariableDeclarationFragment(20)", "Delete FieldDeclaration(21)", "Delete TextElement: Lexical error occurred.(22)", "Delete TagElement(23)", "Delete Javadoc(24)", "Delete Modifier: public(25)", "Delete Modifier: static(26)", "Delete Modifier: final(27)", "Delete PrimitiveType: int(28)", "Delete SimpleName: LEXICAL_ERROR(29)", "Delete NumberLiteral: 0(30)", "Delete VariableDeclarationFragment(31)", "Delete FieldDeclaration(32)", "Delete TextElement: An attempt was made to create a second instance of a static token manager.(33)", "Delete TagElement(34)", "Delete Javadoc(35)", "Delete Modifier: public(36)", "Delete Modifier: static(37)", "Delete Modifier: final(38)", "Delete PrimitiveType: int(39)", "Delete SimpleName: STATIC_LEXER_ERROR(40)", "Delete NumberLiteral: 1(41)", "Delete VariableDeclarationFragment(42)", "Delete FieldDeclaration(43)", "Delete TextElement: Tried to change to an invalid lexical state.(44)", "Delete TagElement(45)", "Delete Javadoc(46)", "Delete Modifier: public(47)", "Delete Modifier: static(48)", "Delete Modifier: final(49)", "Delete PrimitiveType: int(50)", "Delete SimpleName: INVALID_LEXICAL_STATE(51)", "Delete NumberLiteral: 2(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete TextElement: Detected (and bailed out of) an infinite loop in the token manager.(55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete Modifier: public(58)", "Delete Modifier: static(59)", "Delete Modifier: final(60)", "Delete PrimitiveType: int(61)", "Delete SimpleName: LOOP_DETECTED(62)", "Delete NumberLiteral: 3(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete TextElement: Indicates the reason why the exception is thrown. It will have(66)", "Delete TextElement: one of the above 4 values.(67)", "Delete TagElement(68)", "Delete Javadoc(69)", "Delete Modifier: private(70)", "Delete PrimitiveType: int(71)", "Delete SimpleName: errorCode(72)", "Delete VariableDeclarationFragment(73)", "Delete FieldDeclaration(74)", "Delete TextElement: The lexer state.(75)", "Delete TagElement(76)", "Delete Javadoc(77)", "Delete SimpleName: SuppressWarnings(78)", "Delete StringLiteral: \"unused\"(79)", "Delete SingleMemberAnnotation(80)", "Delete Modifier: private(81)", "Delete PrimitiveType: int(82)", "Delete SimpleName: state(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete TextElement: The current character.(86)", "Delete TagElement(87)", "Delete Javadoc(88)", "Delete Modifier: private(89)", "Delete PrimitiveType: char(90)", "Delete SimpleName: current(91)", "Delete VariableDeclarationFragment(92)", "Delete FieldDeclaration(93)", "Delete TextElement: Last correct input before error occurs.(94)", "Delete TagElement(95)", "Delete Javadoc(96)", "Delete Modifier: private(97)", "Delete SimpleName: String(98)", "Delete SimpleType: String(99)", "Delete SimpleName: after(100)", "Delete VariableDeclarationFragment(101)", "Delete FieldDeclaration(102)", "Delete Javadoc(103)", "Delete Modifier: private(104)", "Delete PrimitiveType: boolean(105)", "Delete SimpleName: eof(106)", "Delete VariableDeclarationFragment(107)", "Delete FieldDeclaration(108)", "Delete TextElement: Error line.(109)", "Delete TagElement(110)", "Delete Javadoc(111)", "Delete Modifier: private(112)", "Delete PrimitiveType: int(113)", "Delete SimpleName: line(114)", "Delete VariableDeclarationFragment(115)", "Delete FieldDeclaration(116)", "Delete TextElement: Error column.(117)", "Delete TagElement(118)", "Delete Javadoc(119)", "Delete Modifier: private(120)", "Delete PrimitiveType: int(121)", "Delete SimpleName: column(122)", "Delete VariableDeclarationFragment(123)", "Delete FieldDeclaration(124)", "Delete TextElement: Gets the reason why the exception is thrown.(125)", "Delete TagElement(126)", "Delete TextElement:  one of the 4 lexical error codes(127)", "Delete TagElement: @return(128)", "Delete Javadoc(129)", "Delete Modifier: public(130)", "Delete PrimitiveType: int(131)", "Delete SimpleName: getErrorCode(132)", "Delete SimpleName: errorCode(133)", "Delete ReturnStatement(134)", "Delete Block(135)", "Delete MethodDeclaration(136)", "Delete TextElement: Gets the line number.(137)", "Delete TagElement(138)", "Delete TextElement:  line number.(139)", "Delete TagElement: @return(140)", "Delete Javadoc(141)", "Delete Modifier: public(142)", "Delete PrimitiveType: int(143)", "Delete SimpleName: getLine(144)", "Delete SimpleName: line(145)", "Delete ReturnStatement(146)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete TextElement: Gets the column number.(149)", "Delete TagElement(150)", "Delete TextElement:  the column.(151)", "Delete TagElement: @return(152)", "Delete Javadoc(153)", "Delete Modifier: public(154)", "Delete PrimitiveType: int(155)", "Delete SimpleName: getColumn(156)", "Delete SimpleName: column(157)", "Delete ReturnStatement(158)", "Delete Block(159)", "Delete MethodDeclaration(160)", "Delete TextElement: Gets the last correct input.(161)", "Delete TagElement(162)", "Delete TextElement:  the string after which the error occured(163)", "Delete TagElement: @return(164)", "Delete Javadoc(165)", "Delete Modifier: public(166)", "Delete SimpleName: String(167)", "Delete SimpleType: String(168)", "Delete SimpleName: getAfter(169)", "Delete SimpleName: after(170)", "Delete ReturnStatement(171)", "Delete Block(172)", "Delete MethodDeclaration(173)", "Delete TextElement: Returns a detailed message for the Error when it is thrown by the(174)", "Delete TextElement: token manager to indicate a lexical error.(175)", "Delete TagElement(176)", "Delete TextElement:  the message(177)", "Delete TagElement: @return(178)", "Delete Javadoc(179)", "Delete SimpleName: Override(180)", "Delete MarkerAnnotation(181)", "Delete Modifier: public(182)", "Delete SimpleName: String(183)", "Delete SimpleType: String(184)", "Delete SimpleName: getMessage(185)", "Delete StringLiteral: \"Lexical error at line \"(186)", "Delete SimpleName: line(187)", "Delete StringLiteral: \", column \"(188)", "Delete SimpleName: column(189)", "Delete StringLiteral: \".  Encountered: \"(190)", "Delete SimpleName: eof(191)", "Delete StringLiteral: \"<EOF> \"(192)", "Delete SimpleName: StringParser(193)", "Delete SimpleName: escapeString(194)", "Delete SimpleName: String(195)", "Delete SimpleName: valueOf(196)", "Delete SimpleName: current(197)", "Delete MethodInvocation(198)", "Delete CharacterLiteral: '\"'(199)", "Delete MethodInvocation(200)", "Delete ParenthesizedExpression(201)", "Delete StringLiteral: \" (\"(202)", "Delete PrimitiveType: int(203)", "Delete SimpleName: current(204)", "Delete CastExpression(205)", "Delete StringLiteral: \"), \"(206)", "Delete InfixExpression: +(207)", "Delete ConditionalExpression(208)", "Delete ParenthesizedExpression(209)", "Delete StringLiteral: \"after : \"(210)", "Delete SimpleName: StringParser(211)", "Delete SimpleName: escapeString(212)", "Delete SimpleName: after(213)", "Delete CharacterLiteral: '\"'(214)", "Delete MethodInvocation(215)", "Delete InfixExpression: +(216)", "Delete ParenthesizedExpression(217)", "Delete ReturnStatement(218)", "Delete Block(219)", "Delete MethodDeclaration(220)", "Delete TextElement: Constructor with message and reason. (221)", "Delete TagElement(222)", "Delete Javadoc(223)", "Delete Modifier: public(224)", "Delete SimpleName: TokenMgrError(225)", "Delete SimpleName: String(226)", "Delete SimpleType: String(227)", "Delete SimpleName: message(228)", "Delete SingleVariableDeclaration(229)", "Delete PrimitiveType: int(230)", "Delete SimpleName: reason(231)", "Delete SingleVariableDeclaration(232)", "Delete SimpleName: message(233)", "Delete SuperConstructorInvocation(234)", "Delete SimpleName: errorCode(235)", "Delete SimpleName: reason(236)", "Delete Assignment: =(237)", "Delete ExpressionStatement(238)", "Delete Block(239)", "Delete MethodDeclaration(240)", "Delete TextElement: Full Constructor. (241)", "Delete TagElement(242)", "Delete Javadoc(243)", "Delete Modifier: public(244)", "Delete SimpleName: TokenMgrError(245)", "Delete PrimitiveType: boolean(246)", "Delete SimpleName: EOFSeen(247)", "Delete SingleVariableDeclaration(248)", "Delete PrimitiveType: int(249)", "Delete SimpleName: lexState(250)", "Delete SingleVariableDeclaration(251)", "Delete PrimitiveType: int(252)", "Delete SimpleName: errorLine(253)", "Delete SingleVariableDeclaration(254)", "Delete PrimitiveType: int(255)", "Delete SimpleName: errorColumn(256)", "Delete SingleVariableDeclaration(257)", "Delete SimpleName: String(258)", "Delete SimpleType: String(259)", "Delete SimpleName: errorAfter(260)", "Delete SingleVariableDeclaration(261)", "Delete PrimitiveType: char(262)", "Delete SimpleName: curChar(263)", "Delete SingleVariableDeclaration(264)", "Delete PrimitiveType: int(265)", "Delete SimpleName: reason(266)", "Delete SingleVariableDeclaration(267)", "Delete SimpleName: eof(268)", "Delete SimpleName: EOFSeen(269)", "Delete Assignment: =(270)", "Delete ExpressionStatement(271)", "Delete SimpleName: state(272)", "Delete SimpleName: lexState(273)", "Delete Assignment: =(274)", "Delete ExpressionStatement(275)", "Delete SimpleName: line(276)", "Delete SimpleName: errorLine(277)", "Delete Assignment: =(278)", "Delete ExpressionStatement(279)", "Delete SimpleName: column(280)", "Delete SimpleName: errorColumn(281)", "Delete Assignment: =(282)", "Delete ExpressionStatement(283)", "Delete SimpleName: after(284)", "Delete SimpleName: errorAfter(285)", "Delete Assignment: =(286)", "Delete ExpressionStatement(287)", "Delete SimpleName: current(288)", "Delete SimpleName: curChar(289)", "Delete Assignment: =(290)", "Delete ExpressionStatement(291)", "Delete SimpleName: errorCode(292)", "Delete SimpleName: reason(293)", "Delete Assignment: =(294)", "Delete ExpressionStatement(295)", "Delete Block(296)", "Delete MethodDeclaration(297)", "Delete TypeDeclaration: class(298)"]}}, {"JexlScriptEngine_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.scripting", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.PrintWriter"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.Reader", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Writer"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.AbstractScriptEngine", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.script.Bindings"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.script.Compilable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.CompiledScript", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.script.ScriptContext"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.ScriptEngine", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.ScriptEngineFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.ScriptException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.SimpleBindings", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlContext", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.JexlEngine", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.Script", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.logging.Log"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.logging.LogFactory"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: reader", "DEL TextElement: <li>err - refers to the engine scope writer that defaults to writing in System.err</li>", "DEL Modifier: public", "DEL Block", "DEL SimpleType: ScriptException", "DEL SimpleName: o", "DEL TagElement", "DEL SimpleName: NullPointerException", "DEL MethodInvocation", "DEL TagElement", "DEL Block", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL Modifier: private", "DEL TagElement: @since", "DEL SimpleName: Writer", "DEL SimpleType: JexlEngine", "DEL SimpleName: Override", "DEL TextElement: Reserved key for context (mandated by JSR-223). ", "DEL Block", "DEL TagElement", "DEL TextElement: for <strong>all</strong> JexlScriptEngine instances, you probably should only do so", "DEL Modifier: static", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleType: Exception", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL SimpleName: readerToString", "DEL TypeLiteral", "DEL TextElement: This implementation gives access to both ENGINE_SCOPE and GLOBAL_SCOPE bindings.", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL SimpleName: scope", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: JexlScriptEngine", "DEL PrefixExpression: -", "DEL SimpleName: readerToString", "DEL MarkerAnnotation", "DEL TextElement:  2.0", "DEL Block", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL SimpleName: Bindings", "DEL SimpleName: jexlScript", "DEL SimpleName: e", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: Script", "DEL SimpleName: Exception", "DEL SimpleName: jexlEngine", "DEL MethodInvocation", "DEL SimpleName: getReader", "DEL SimpleName: JexlContextWrapper", "DEL SimpleType: PrintWriter", "DEL TagElement", "DEL Block", "DEL SimpleType: JexlCompiledScript", "DEL TextElement:  ", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getOut", "DEL Modifier: final", "DEL SimpleType: String", "DEL TextElement: <li>in - refers to the engine scope reader that defaults to reading System.err</li>", "DEL SimpleName: factory", "DEL Modifier: private", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: bnd", "DEL Modifier: public", "DEL SimpleName: e", "DEL ReturnStatement", "DEL TagElement: @link", "DEL TextElement:  the engine error writer", "DEL TagElement: @inheritDoc", "DEL VariableDeclarationStatement", "DEL SimpleName: e", "DEL SimpleType: Script", "DEL Modifier: final", "DEL InfixExpression: ==", "DEL SimpleName: AbstractScriptEngine", "DEL SimpleName: JexlContext", "DEL TextElement: Implements the Jexl ScriptEngine for JSF-223.", "DEL SimpleName: scope", "DEL SimpleName: PrintWriter", "DEL Modifier: final", "DEL Block", "DEL SimpleType: Exception", "DEL SimpleName: error", "DEL PrimitiveType: boolean", "DEL SimpleName: scope", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleType: JexlEngine", "DEL SimpleName: JexlEngine", "DEL TagElement: @param", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Exception", "DEL TagElement", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: theScript", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"JEXL is a reserved variable name, user defined value is ignored\"", "DEL SimpleName: get", "DEL SimpleName: theScript", "DEL SimpleType: JexlContext", "DEL SimpleName: Script", "DEL TextElement: Current implementation only gives access to ENGINE_SCOPE binding.", "DEL SimpleName: ScriptException", "DEL MethodInvocation", "DEL SimpleName: getLogger", "DEL Modifier: private", "DEL SimpleName: jexlEngine", "DEL Javadoc", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: Reader", "DEL SimpleName: JexlScriptEngineFactory", "DEL Modifier: public", "DEL SimpleType: Reader", "DEL TagElement", "DEL SimpleName: PrintWriter", "DEL Initializer", "DEL TextElement: Gives access to the underlying JEXL engine shared between all ScriptEngine instances.", "DEL TagElement", "DEL TextElement:  ", "DEL TagElement: @inheritDoc", "DEL TextElement:  ", "DEL SimpleName: JexlContextWrapper", "DEL Modifier: public", "DEL SimpleName: set", "DEL TextElement: non instantiable. ", "DEL Block", "DEL Assignment: =", "DEL SimpleName: JexlEngine", "DEL Javadoc", "DEL Modifier: private", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL SimpleName: JexlScriptEngine", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL TextElement: this implementation checks first ENGINE and then GLOBAL scope.", "DEL VariableDeclarationFragment", "DEL SimpleName: script", "DEL Javadoc", "DEL SimpleName: LOG", "DEL ThrowStatement", "DEL SimpleType: CompiledScript", "DEL SimpleName: PrintWriter", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL SimpleType: ScriptException", "DEL Modifier: final", "DEL SimpleName: JexlScriptObject", "DEL ReturnStatement", "DEL SimpleName: context", "DEL VariableDeclarationFragment", "DEL SimpleName: theContext", "DEL SimpleType: IOException", "DEL TagElement", "DEL SimpleName: JexlScriptEngine", "DEL SimpleName: ScriptException", "DEL StringLiteral: \"JEXL\"", "DEL SingleVariableDeclaration", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: script", "DEL SimpleType: Object", "DEL TextElement: <p>", "DEL SimpleName: EngineSingletonHolder", "DEL Block", "DEL SimpleName: ctxt", "DEL InfixExpression: ==", "DEL IfStatement", "DEL SimpleType: String", "DEL TagElement", "DEL SimpleName: CompiledScript", "DEL TagElement", "DEL SimpleName: script", "DEL SimpleName: reader", "DEL ExpressionStatement", "DEL SimpleName: ScriptException", "DEL MethodInvocation", "DEL SimpleName: parentFactory", "DEL ThrowStatement", "DEL InstanceofExpression", "DEL SimpleType: NullPointerException", "DEL TagElement", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL SimpleName: o", "DEL SimpleName: out", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleType: Log", "DEL TagElement: @inheritDoc", "DEL TextElement: The JexlScriptObject instance. ", "DEL SimpleName: CACHE_SIZE", "DEL SimpleName: ScriptException", "DEL SimpleName: ScriptException", "DEL TextElement: The factory which created this instance. ", "DEL TextElement: The JEXL engine singleton instance. ", "DEL SimpleName: Object", "DEL SimpleName: jexlScript", "DEL TextElement:  the script reader", "DEL TagElement: @inheritDoc", "DEL Modifier: final", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: getSystem", "DEL SimpleName: script", "DEL Block", "DEL SimpleName: out", "DEL SimpleName: context", "DEL TextElement: Create a scripting engine using the supplied factory.", "DEL ExpressionStatement", "DEL Javadoc", "DEL ExpressionStatement", "DEL TextElement: </p>", "DEL ThrowStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: context", "DEL TextElement: Creates a context wrapper.", "DEL Modifier: final", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL Modifier: final", "DEL StringLiteral: \"script and context must be non-null\"", "DEL VariableDeclarationStatement", "DEL SimpleName: error", "DEL SimpleType: Writer", "DEL Modifier: public", "DEL SimpleName: name", "DEL SimpleName: ctxt", "DEL CatchClause", "DEL TextElement: non instantiable. ", "DEL SimpleName: JexlScriptObject", "DEL ReturnStatement", "DEL ThrowStatement", "DEL QualifiedName: ScriptContext.ENGINE_SCOPE", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SimpleName: equals", "DEL ThrowStatement", "DEL Javadoc", "DEL SimpleType: PrintWriter", "DEL ReturnStatement", "DEL TextElement: The first one found is used. ", "DEL Block", "DEL Modifier: public", "DEL SimpleName: PrintWriter", "DEL SimpleName: eval", "DEL SimpleName: String", "DEL SimpleName: JexlScriptObject", "DEL Modifier: final", "DEL SimpleName: JexlEngine", "DEL TextElement: Implements engine and engine context properties for use by JEXL scripts.", "DEL MethodInvocation", "DEL SimpleName: ScriptEngineFactory", "DEL SimpleType: NullPointerException", "DEL SimpleName: LOG", "DEL SimpleName: LOG", "DEL SimpleName: theContext", "DEL TextElement: The following properties are defined:", "DEL TextElement: <li>logger - the JexlScriptEngine logger</li>", "DEL TextElement: <li>out - refers the engine scope writer that defaults to writing in System.out</li>", "DEL SimpleType: JexlContext", "DEL TryStatement", "DEL ThrowStatement", "DEL Modifier: public", "DEL Modifier: final", "DEL SimpleName: FactorySingletonHolder", "DEL ClassInstanceCreation", "DEL FieldDeclaration", "DEL Javadoc", "DEL FieldDeclaration", "DEL TextElement: <ul>", "DEL Block", "DEL TextElement: class ", "DEL SimpleName: Script", "DEL SimpleName: ScriptContext", "DEL MethodInvocation", "DEL SimpleName: Log", "DEL TextElement: Reads a script.", "DEL TextElement: The underlying Jexl expression instance. ", "DEL SimpleName: reader", "DEL SimpleType: String", "DEL SimpleType: String", "DEL TagElement: @param", "DEL InfixExpression: ||", "DEL NullLiteral", "DEL Block", "DEL IfStatement", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: theContext", "DEL SimpleName: JexlContextWrapper", "DEL Modifier: public", "DEL SimpleType: ScriptException", "DEL TextElement: </p>", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL SimpleName: script", "DEL SimpleName: context", "DEL MethodDeclaration", "DEL TextElement:  to wrap", "DEL SimpleName: script", "DEL TagElement: @throws", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: EngineSingletonHolder", "DEL CatchClause", "DEL SimpleName: ScriptEngine", "DEL MethodDeclaration", "DEL SimpleName: context", "DEL TextElement: The JEXL EL engine. ", "DEL MethodInvocation", "DEL SimpleName: JexlCompiledScript", "DEL Modifier: final", "DEL NullLiteral", "DEL TextElement: Holds singleton JexlScriptEngineFactory (IODH). ", "DEL TagElement: @param", "DEL SimpleName: script", "DEL SimpleName: IOException", "DEL SimpleType: Reader", "DEL Modifier: private", "DEL SimpleName: Override", "DEL InfixExpression: ||", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement: </ul>", "DEL NullLiteral", "DEL IfStatement", "DEL TextElement:  the engine input reader", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleType: Object", "DEL SimpleName: JexlContext", "DEL SimpleName: factory", "DEL ClassInstanceCreation", "DEL SimpleType: PrintWriter", "DEL VariableDeclarationFragment", "DEL SimpleName: JexlScriptObject", "DEL SimpleName: JexlContext", "DEL TextElement: <li>System - the System.class</li>", "DEL SimpleType: ScriptEngineFactory", "DEL SimpleName: Writer", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: DEFAULT_FACTORY", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL TagElement: @inheritDoc", "DEL Block", "DEL ReturnStatement", "DEL CatchClause", "DEL IfStatement", "DEL Modifier: private", "DEL TextElement:  the engine output writer", "DEL FieldDeclaration", "DEL SimpleName: ctxt", "DEL SimpleName: ScriptException", "DEL ReturnStatement", "DEL SimpleType: JexlEngine", "DEL TagElement: @inheritDoc", "DEL SimpleName: ScriptContext", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Modifier: private", "DEL TryStatement", "DEL Javadoc", "DEL SimpleName: createScript", "DEL SimpleType: String", "DEL SimpleName: eval", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: context", "DEL SimpleName: factory", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: context", "DEL Block", "DEL SimpleName: readerToString", "DEL SimpleName: scriptContext", "DEL SimpleName: Object", "DEL SimpleName: createBindings", "DEL Modifier: static", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL SimpleName: ScriptException", "DEL Modifier: private", "DEL SimpleName: JexlScriptEngineFactory", "DEL TagElement", "DEL SimpleType: SimpleBindings", "DEL InfixExpression: !=", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: getWriter", "DEL TextElement:  the factory which created this instance.", "DEL SimpleName: getAttributesScope", "DEL IfStatement", "DEL SimpleName: jexlEngine", "DEL TextElement: When a JEXL script accesses a variable for read or write,", "DEL SimpleType: String", "DEL SimpleName: Log", "DEL SimpleType: Reader", "DEL SimpleName: script", "DEL ReturnStatement", "DEL SimpleName: execute", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: PrintWriter", "DEL Modifier: private", "DEL TagElement", "DEL SimpleName: eval", "DEL MethodInvocation", "DEL SimpleType: System", "DEL TagElement", "DEL TextElement:  the script as a string", "DEL TypeDeclaration: class", "DEL StringLiteral: \"context\"", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: jexlScript", "DEL InfixExpression: !=", "DEL TextElement:  the JexlScriptEngine logger", "DEL SimpleType: Bindings", "DEL SimpleName: jexlObject", "DEL Javadoc", "DEL TextElement: Reserved key for JexlScriptObject. ", "DEL TagElement", "DEL SimpleName: name", "DEL SimpleName: getEngine", "DEL SimpleName: ScriptContext", "DEL TextElement:  ", "DEL Modifier: static", "DEL TagElement", "DEL TagElement", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL TagElement", "DEL TypeDeclaration: class", "DEL SimpleType: ScriptException", "DEL SimpleName: script", "DEL TagElement: @return", "DEL MethodInvocation", "DEL TagElement", "DEL Javadoc", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: Object", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: JexlScriptEngine", "DEL TextElement: it will be stored in the ENGINE scope.", "DEL SimpleName: e", "DEL Javadoc", "DEL SimpleName: name", "DEL SimpleType: JexlScriptObject", "DEL SimpleName: e", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL NullLiteral", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL Modifier: final", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL TextElement:  if an exception occurs during read", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL AnonymousClassDeclaration", "DEL SimpleName: Override", "DEL Javadoc", "DEL SimpleName: getEngine", "DEL ReturnStatement", "DEL SimpleType: Script", "DEL SimpleName: Reader", "DEL Block", "DEL SimpleName: setCache", "DEL MethodDeclaration", "DEL SimpleType: Class", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: name", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: getLog", "DEL VariableDeclarationFragment", "DEL TryStatement", "DEL TagElement", "DEL SimpleName: jexlObject", "DEL SimpleType: ScriptContext", "DEL Javadoc", "DEL SimpleName: CONTEXT_KEY", "DEL SimpleType: CompiledScript", "DEL MethodDeclaration", "DEL SimpleName: out", "DEL SimpleName: warn", "DEL TagElement", "DEL TextElement: The shared expression cache size. ", "DEL ClassInstanceCreation", "DEL SimpleName: readerToString", "DEL SimpleType: ScriptException", "DEL SimpleName: scriptContext", "DEL Modifier: private", "DEL IfStatement", "DEL Javadoc", "DEL SimpleName: NullPointerException", "DEL MethodDeclaration", "DEL SimpleName: toString", "DEL TagElement: @inheritDoc", "DEL StringLiteral: \"script must be non-null\"", "DEL TagElement", "DEL TextElement: The logger. ", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleType: JexlScriptEngineFactory", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: Reader", "DEL MethodDeclaration", "DEL TextElement: <p>Although this allows to manipulate various engine flags (lenient, debug, cache...)", "DEL Block", "DEL SimpleType: Exception", "DEL QualifiedName: ScriptContext.ENGINE_SCOPE", "DEL Block", "DEL SimpleName: ScriptEngineFactory", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: System", "DEL SimpleName: getBindings", "DEL ReturnStatement", "DEL SimpleName: scriptContext", "DEL SimpleType: Object", "DEL SimpleName: scope", "DEL SimpleType: ScriptException", "DEL Modifier: final", "DEL MethodInvocation", "DEL ThrowStatement", "DEL TextElement:  2.0", "DEL Block", "DEL Block", "DEL TextElement: Javadoc.", "DEL TagElement: @return", "DEL Modifier: public", "DEL Modifier: private", "DEL SimpleName: getErr", "DEL ReturnStatement", "DEL SimpleName: scriptContext", "DEL QualifiedName: ScriptContext.ENGINE_SCOPE", "DEL Assignment: =", "DEL ThrowStatement", "DEL SimpleName: error", "DEL SimpleName: FactorySingletonHolder", "DEL Block", "DEL SimpleName: scriptContext", "DEL TagElement", "DEL TypeDeclaration: class", "DEL SimpleName: execute", "DEL Javadoc", "DEL IfStatement", "DEL SimpleName: e", "DEL SimpleName: JEXL_OBJECT_KEY", "DEL SimpleName: Object", "DEL Javadoc", "DEL Modifier: final", "DEL Javadoc", "DEL Javadoc", "DEL FieldDeclaration", "DEL SimpleName: DEFAULT_ENGINE", "DEL SimpleName: name", "DEL TagElement", "DEL BooleanLiteral: true", "DEL Block", "DEL FieldDeclaration", "DEL SimpleType: PrintWriter", "DEL SimpleType: JexlScriptObject", "DEL SimpleType: ScriptException", "DEL Assignment: =", "DEL SimpleName: setAttribute", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL Javadoc", "DEL Block", "DEL SimpleType: Log", "DEL SimpleName: PrintWriter", "DEL SimpleName: script", "DEL TagElement: @inheritDoc", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: Compilable", "DEL Javadoc", "DEL TextElement: if you are in strict control and sole user of the Jexl scripting feature.</p>", "DEL SingleVariableDeclaration", "DEL SimpleName: ctxt", "DEL SimpleName: script", "DEL TextElement:  if factory is null", "DEL MethodDeclaration", "DEL NullLiteral", "DEL TextElement: Default constructor.", "DEL TagElement: @inheritDoc", "DEL ThrowStatement", "DEL CatchClause", "DEL TextElement: .", "DEL MethodDeclaration", "DEL TextElement: Holds singleton JexlScriptEngine (IODH).", "DEL TagElement", "DEL Block", "DEL SimpleType: PrintWriter", "DEL SimpleName: compile", "DEL Block", "DEL TypeDeclaration: class", "DEL TagElement", "DEL TagElement: @inheritDoc", "DEL TagElement", "DEL SimpleName: getIn", "DEL TextElement:  ", "DEL InfixExpression: ==", "DEL Javadoc", "DEL SimpleName: NullPointerException", "DEL SimpleType: Reader", "DEL QualifiedName: ScriptContext.ENGINE_SCOPE", "DEL TextElement:  ", "DEL ReturnStatement", "DEL SimpleName: script", "DEL SimpleType: ScriptException", "DEL SimpleName: ScriptEngineFactory", "DEL TextElement:  the shared underlying JEXL engine", "DEL TagElement", "DEL SimpleName: parentFactory", "DEL MethodDeclaration", "DEL StringLiteral: \"ScriptEngineFactory must not be null\"", "DEL SimpleName: JexlEngine", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: ScriptContext", "DEL VariableDeclarationStatement", "DEL TextElement: Gives access to the engine scope input reader (defaults to System.in).", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL SimpleName: CompiledScript", "DEL SimpleType: NullPointerException", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleName: LogFactory", "DEL VariableDeclarationFragment", "DEL TextElement: Those properties are allways bound to the default engine scope context.", "DEL SimpleType: ScriptContext", "DEL TextElement: See", "DEL NullLiteral", "DEL SimpleType: JexlEngine", "DEL Modifier: private", "DEL SimpleType: ScriptContext", "DEL TagElement", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL TextElement: Gives access to System class.", "DEL IfStatement", "DEL SimpleName: error", "DEL NullLiteral", "DEL Block", "DEL SimpleName: JexlEngine", "DEL TagElement", "DEL SimpleType: String", "DEL ReturnStatement", "DEL TextElement: Creates an instance.", "DEL SingleVariableDeclaration", "DEL SimpleType: Bindings", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: ScriptException", "DEL NullLiteral", "DEL SimpleName: value", "DEL IfStatement", "DEL SimpleType: Script", "DEL SimpleType: Script", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: JexlScriptEngineFactory", "DEL SimpleName: System", "DEL SimpleType: ScriptEngineFactory", "DEL ReturnStatement", "DEL NumberLiteral: 512", "DEL SimpleName: script", "DEL Modifier: public", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: getAttribute", "DEL TextElement: Gives access to the engine logger.", "DEL SimpleName: getBindings", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleName: scriptContext", "DEL Javadoc", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL SimpleName: out", "DEL SimpleName: Script", "DEL ClassInstanceCreation", "DEL TextElement: The implementation also creates the \"JEXL\" script object as an instance of the", "DEL SimpleType: ScriptException", "DEL TagElement", "DEL Block", "DEL SimpleName: e", "DEL SimpleName: script", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL Modifier: static", "DEL Javadoc", "DEL QualifiedName: EngineSingletonHolder.DEFAULT_ENGINE", "DEL Modifier: static", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: String", "DEL SimpleType: NullPointerException", "DEL Javadoc", "DEL SimpleName: out", "DEL InstanceofExpression", "DEL MethodDeclaration", "DEL SimpleName: Reader", "DEL SimpleName: ScriptException", "DEL Block", "DEL SimpleName: has", "DEL TextElement:  the engine context.", "DEL SimpleName: PrintWriter", "DEL Modifier: public", "DEL SimpleType: Object", "DEL VariableDeclarationFragment", "DEL TextElement:  for access to utility methods and variables.", "DEL Javadoc", "DEL TagElement", "DEL Block", "DEL Javadoc", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleType: PrintWriter", "DEL SimpleName: JexlScriptEngine", "DEL StringLiteral: \"script and context must be non-null\"", "DEL MethodInvocation", "DEL TextElement:  ", "DEL TextElement:  System.class", "DEL Modifier: public", "DEL NullLiteral", "DEL SimpleName: eval", "DEL SimpleName: jexlEngine", "DEL SimpleName: containsKey", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL SimpleName: CompiledScript", "DEL TextElement: </p>", "DEL SimpleType: JexlScriptEngineFactory", "DEL SimpleName: parentFactory", "DEL Block", "DEL SimpleName: name", "DEL MethodDeclaration", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement: <p>", "DEL TagElement", "DEL TagElement: @link", "DEL SimpleName: factory", "DEL SimpleName: jexlObject", "DEL SimpleType: System", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL Javadoc", "DEL SimpleName: ScriptException", "DEL SimpleType: JexlContext", "DEL TagElement", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleType: JexlContextWrapper", "DEL SimpleName: Object", "DEL Modifier: public", "DEL TextElement: The engine factory singleton instance. ", "DEL SimpleName: put", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleType: CompiledScript", "DEL SimpleName: String", "DEL SimpleType: ScriptEngine", "DEL TextElement: Only intended for use when not using a factory.", "DEL TagElement: @return", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: context", "DEL QualifiedName: FactorySingletonHolder.DEFAULT_FACTORY", "DEL VariableDeclarationFragment", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL SimpleType: JexlScriptEngine", "DEL Block", "DEL Modifier: final", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: Object", "DEL TextElement: Sets the factory to ", "DEL TypeDeclaration: class", "DEL SimpleName: CACHE_SIZE", "DEL MethodInvocation", "DEL Modifier: final", "DEL TextElement: Wrapper to help convert a Jexl Script into a JSR-223 CompiledScript.", "DEL Javadoc", "DEL InfixExpression: ==", "DEL Modifier: static", "DEL SimpleName: JexlCompiledScript", "DEL ClassInstanceCreation", "DEL TypeDeclaration: class", "DEL SimpleName: ScriptContext", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL SimpleName: script", "DEL SimpleName: o", "DEL SimpleName: name", "DEL SimpleType: Compilable", "DEL Modifier: public", "DEL TextElement:  ", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: Exception", "DEL Block", "DEL Modifier: static", "DEL Modifier: final", "DEL SimpleName: getErrorWriter", "DEL SimpleName: compile", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: JexlContextWrapper", "DEL TextElement:  ", "DEL Block", "DEL Modifier: private", "DEL SimpleType: Object", "DEL TagElement: @since", "DEL PrimitiveType: int", "DEL SimpleType: ScriptContext", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: JexlCompiledScript", "DEL TagElement: @return", "DEL SimpleName: getText", "DEL IfStatement", "DEL Modifier: final", "DEL TryStatement", "DEL TextElement: <p>", "DEL SimpleType: NullPointerException", "DEL SimpleName: compile", "DEL ExpressionStatement", "DEL TextElement: If no variable is found, and the JEXL script is writing to a variable,", "DEL SimpleName: String", "DEL Modifier: public", "DEL ReturnStatement", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: PrintWriter", "DEL SimpleName: String", "DEL TagElement: @return", "DEL SimpleName: NullPointerException", "DEL SimpleName: Class", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL SimpleName: value", "DEL SimpleType: PrintWriter", "DEL TextElement: The wrapped script context. ", "DEL SimpleType: AbstractScriptEngine", "DEL SimpleType: JexlContextWrapper", "DEL NumberLiteral: 1", "DEL StringLiteral: \"script must be non-null\"", "DEL Modifier: static", "DEL VariableDeclarationStatement", "DEL SimpleType: ScriptEngineFactory", "DEL Modifier: final", "DEL SimpleName: script", "DEL TextElement:  ", "DEL Modifier: public", "DEL SimpleName: jexlEngine", "DEL ConstructorInvocation", "DEL Block", "DEL MethodInvocation", "DEL TextElement: <p>A single JEXL engine and Uberspect is shared by all instances of JexlScriptEngine.</p>", "DEL SimpleName: context", "DEL SimpleType: ScriptException", "DEL SimpleName: NullPointerException", "DEL TextElement: Gives access to the engine scope output writer (defaults to System.out).", "DEL TextElement: Wrapper to help convert a JSR-223 ScriptContext into a JexlContext.", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: toString", "DEL TextElement:  ", "DEL Javadoc", "DEL Modifier: final", "DEL NullLiteral", "DEL TypeLiteral", "DEL SimpleName: Bindings", "DEL TagElement", "DEL SimpleName: bnd", "DEL SimpleName: CONTEXT_KEY", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: SimpleBindings", "DEL SimpleName: context", "DEL SingleVariableDeclaration", "DEL SimpleName: name", "DEL TagElement", "DEL CastExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: error", "DEL SimpleName: jexlScript", "DEL SimpleName: toString", "DEL Modifier: private", "DEL SimpleName: CONTEXT_KEY", "DEL TagElement: @throws", "DEL SimpleType: ScriptContext", "DEL SimpleName: setAttribute", "DEL SimpleName: ScriptException", "DEL SimpleName: context", "DEL ParameterizedType: Class<System>", "DEL SimpleName: context", "DEL SimpleName: LOG", "DEL Block", "DEL Modifier: final", "DEL SimpleName: getFactory", "DEL TextElement:  ", "DEL TagElement: @param", "DEL SimpleName: e", "DEL TextElement: <a href=\"http://java.sun.com/javase/6/docs/api/javax/script/package-summary.html\">Java Scripting API</a>", "DEL Modifier: final", "DEL Modifier: final", "DEL SimpleType: Writer", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: String", "DEL SimpleName: theScript", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL SimpleName: createScript", "DEL Modifier: public", "DEL SimpleType: String", "DEL TextElement: Gives access to the engine scope error writer (defaults to System.err).", "DEL SimpleName: JEXL_OBJECT_KEY", "DEL NullLiteral", "DEL SimpleType: PrintWriter", "DEL SimpleName: NullPointerException"]}]}}, {"JexlScriptEngine_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.scripting(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.IOException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.PrintWriter(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.Reader(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.io.Writer(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: javax.script.AbstractScriptEngine(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.script.Bindings(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: javax.script.Compilable(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: javax.script.CompiledScript(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: javax.script.ScriptContext(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: javax.script.ScriptEngine(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: javax.script.ScriptEngineFactory(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: javax.script.ScriptException(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: javax.script.SimpleBindings(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.commons.jexl2.JexlContext(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.apache.commons.jexl2.Script(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: org.apache.commons.logging.Log(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: org.apache.commons.logging.LogFactory(36)", "Delete ImportDeclaration(37)", "Delete TextElement: Implements the Jexl ScriptEngine for JSF-223.(38)", "Delete TextElement: <p>(39)", "Delete TextElement: This implementation gives access to both ENGINE_SCOPE and GLOBAL_SCOPE bindings.(40)", "Delete TextElement: When a JEXL script accesses a variable for read or write,(41)", "Delete TextElement: this implementation checks first ENGINE and then GLOBAL scope.(42)", "Delete TextElement: The first one found is used. (43)", "Delete TextElement: If no variable is found, and the JEXL script is writing to a variable,(44)", "Delete TextElement: it will be stored in the ENGINE scope.(45)", "Delete TextElement: </p>(46)", "Delete TextElement: <p>(47)", "Delete TextElement: The implementation also creates the \"JEXL\" script object as an instance of the(48)", "Delete TextElement: class (49)", "Delete SimpleName: JexlScriptObject(50)", "Delete TagElement: @link(51)", "Delete TextElement:  for access to utility methods and variables.(52)", "Delete TextElement: </p>(53)", "Delete TextElement: See(54)", "Delete TextElement: <a href=\"http://java.sun.com/javase/6/docs/api/javax/script/package-summary.html\">Java Scripting API</a>(55)", "Delete TextElement: Javadoc.(56)", "Delete TagElement(57)", "Delete TextElement:  2.0(58)", "Delete TagElement: @since(59)", "Delete Javadoc(60)", "Delete Modifier: public(61)", "Delete SimpleName: JexlScriptEngine(62)", "Delete SimpleName: AbstractScriptEngine(63)", "Delete SimpleType: AbstractScriptEngine(64)", "Delete SimpleName: Compilable(65)", "Delete SimpleType: Compilable(66)", "Delete TextElement: The logger. (67)", "Delete TagElement(68)", "Delete Javadoc(69)", "Delete Modifier: private(70)", "Delete Modifier: static(71)", "Delete Modifier: final(72)", "Delete SimpleName: Log(73)", "Delete SimpleType: Log(74)", "Delete SimpleName: LOG(75)", "Delete SimpleName: LogFactory(76)", "Delete SimpleName: getLog(77)", "Delete SimpleName: JexlScriptEngine(78)", "Delete SimpleType: JexlScriptEngine(79)", "Delete TypeLiteral(80)", "Delete MethodInvocation(81)", "Delete VariableDeclarationFragment(82)", "Delete FieldDeclaration(83)", "Delete TextElement: The shared expression cache size. (84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete Modifier: private(87)", "Delete Modifier: static(88)", "Delete Modifier: final(89)", "Delete PrimitiveType: int(90)", "Delete SimpleName: CACHE_SIZE(91)", "Delete NumberLiteral: 512(92)", "Delete VariableDeclarationFragment(93)", "Delete FieldDeclaration(94)", "Delete TextElement: Reserved key for context (mandated by JSR-223). (95)", "Delete TagElement(96)", "Delete Javadoc(97)", "Delete Modifier: public(98)", "Delete Modifier: static(99)", "Delete Modifier: final(100)", "Delete SimpleName: String(101)", "Delete SimpleType: String(102)", "Delete SimpleName: CONTEXT_KEY(103)", "Delete StringLiteral: \"context\"(104)", "Delete VariableDeclarationFragment(105)", "Delete FieldDeclaration(106)", "Delete TextElement: Reserved key for JexlScriptObject. (107)", "Delete TagElement(108)", "Delete Javadoc(109)", "Delete Modifier: public(110)", "Delete Modifier: static(111)", "Delete Modifier: final(112)", "Delete SimpleName: String(113)", "Delete SimpleType: String(114)", "Delete SimpleName: JEXL_OBJECT_KEY(115)", "Delete StringLiteral: \"JEXL\"(116)", "Delete VariableDeclarationFragment(117)", "Delete FieldDeclaration(118)", "Delete TextElement: The JexlScriptObject instance. (119)", "Delete TagElement(120)", "Delete Javadoc(121)", "Delete Modifier: private(122)", "Delete Modifier: final(123)", "Delete SimpleName: JexlScriptObject(124)", "Delete SimpleType: JexlScriptObject(125)", "Delete SimpleName: jexlObject(126)", "Delete VariableDeclarationFragment(127)", "Delete FieldDeclaration(128)", "Delete TextElement: The factory which created this instance. (129)", "Delete TagElement(130)", "Delete Javadoc(131)", "Delete Modifier: private(132)", "Delete Modifier: final(133)", "Delete SimpleName: ScriptEngineFactory(134)", "Delete SimpleType: ScriptEngineFactory(135)", "Delete SimpleName: parentFactory(136)", "Delete VariableDeclarationFragment(137)", "Delete FieldDeclaration(138)", "Delete TextElement: The JEXL EL engine. (139)", "Delete TagElement(140)", "Delete Javadoc(141)", "Delete Modifier: private(142)", "Delete Modifier: final(143)", "Delete SimpleName: JexlEngine(144)", "Delete SimpleType: JexlEngine(145)", "Delete SimpleName: jexlEngine(146)", "Delete VariableDeclarationFragment(147)", "Delete FieldDeclaration(148)", "Delete TextElement: Default constructor.(149)", "Delete TextElement: <p>(150)", "Delete TextElement: Only intended for use when not using a factory.(151)", "Delete TextElement: Sets the factory to (152)", "Delete SimpleName: JexlScriptEngineFactory(153)", "Delete TagElement: @link(154)", "Delete TextElement: .(155)", "Delete TagElement(156)", "Delete Javadoc(157)", "Delete Modifier: public(158)", "Delete SimpleName: JexlScriptEngine(159)", "Delete QualifiedName: FactorySingletonHolder.DEFAULT_FACTORY(160)", "Delete ConstructorInvocation(161)", "Delete Block(162)", "Delete MethodDeclaration(163)", "Delete TextElement: Implements engine and engine context properties for use by JEXL scripts.(164)", "Delete TextElement: Those properties are allways bound to the default engine scope context.(165)", "Delete TextElement: <p>(166)", "Delete TextElement: The following properties are defined:(167)", "Delete TextElement: <ul>(168)", "Delete TextElement: <li>in - refers to the engine scope reader that defaults to reading System.err</li>(169)", "Delete TextElement: <li>out - refers the engine scope writer that defaults to writing in System.out</li>(170)", "Delete TextElement: <li>err - refers to the engine scope writer that defaults to writing in System.err</li>(171)", "Delete TextElement: <li>logger - the JexlScriptEngine logger</li>(172)", "Delete TextElement: <li>System - the System.class</li>(173)", "Delete TextElement: </ul>(174)", "Delete TextElement: </p>(175)", "Delete TagElement(176)", "Delete TextElement:  2.0(177)", "Delete TagElement: @since(178)", "Delete Javadoc(179)", "Delete Modifier: public(180)", "Delete SimpleName: JexlScriptObject(181)", "Delete TextElement: Gives access to the underlying JEXL engine shared between all ScriptEngine instances.(182)", "Delete TextElement: <p>Although this allows to manipulate various engine flags (lenient, debug, cache...)(183)", "Delete TextElement: for <strong>all</strong> JexlScriptEngine instances, you probably should only do so(184)", "Delete TextElement: if you are in strict control and sole user of the Jexl scripting feature.</p>(185)", "Delete TagElement(186)", "Delete TextElement:  the shared underlying JEXL engine(187)", "Delete TagElement: @return(188)", "Delete Javadoc(189)", "Delete Modifier: public(190)", "Delete SimpleName: JexlEngine(191)", "Delete SimpleType: JexlEngine(192)", "Delete SimpleName: getEngine(193)", "Delete SimpleName: jexlEngine(194)", "Delete ReturnStatement(195)", "Delete Block(196)", "Delete MethodDeclaration(197)", "Delete TextElement: Gives access to the engine scope output writer (defaults to System.out).(198)", "Delete TagElement(199)", "Delete TextElement:  the engine output writer(200)", "Delete TagElement: @return(201)", "Delete Javadoc(202)", "Delete Modifier: public(203)", "Delete SimpleName: PrintWriter(204)", "Delete SimpleType: PrintWriter(205)", "Delete SimpleName: getOut(206)", "Delete Modifier: final(207)", "Delete SimpleName: Writer(208)", "Delete SimpleType: Writer(209)", "Delete SimpleName: out(210)", "Delete SimpleName: context(211)", "Delete SimpleName: getWriter(212)", "Delete MethodInvocation(213)", "Delete VariableDeclarationFragment(214)", "Delete VariableDeclarationStatement(215)", "Delete SimpleName: out(216)", "Delete SimpleName: PrintWriter(217)", "Delete SimpleType: PrintWriter(218)", "Delete InstanceofExpression(219)", "Delete SimpleName: PrintWriter(220)", "Delete SimpleType: PrintWriter(221)", "Delete SimpleName: out(222)", "Delete CastExpression(223)", "Delete ReturnStatement(224)", "Delete Block(225)", "Delete SimpleName: out(226)", "Delete NullLiteral(227)", "Delete InfixExpression: !=(228)", "Delete SimpleName: PrintWriter(229)", "Delete SimpleType: PrintWriter(230)", "Delete SimpleName: out(231)", "Delete BooleanLiteral: true(232)", "Delete ClassInstanceCreation(233)", "Delete ReturnStatement(234)", "Delete Block(235)", "Delete NullLiteral(236)", "Delete ReturnStatement(237)", "Delete Block(238)", "Delete IfStatement(239)", "Delete IfStatement(240)", "Delete Block(241)", "Delete MethodDeclaration(242)", "Delete TextElement: Gives access to the engine scope error writer (defaults to System.err).(243)", "Delete TagElement(244)", "Delete TextElement:  the engine error writer(245)", "Delete TagElement: @return(246)", "Delete Javadoc(247)", "Delete Modifier: public(248)", "Delete SimpleName: PrintWriter(249)", "Delete SimpleType: PrintWriter(250)", "Delete SimpleName: getErr(251)", "Delete Modifier: final(252)", "Delete SimpleName: Writer(253)", "Delete SimpleType: Writer(254)", "Delete SimpleName: error(255)", "Delete SimpleName: context(256)", "Delete SimpleName: getErrorWriter(257)", "Delete MethodInvocation(258)", "Delete VariableDeclarationFragment(259)", "Delete VariableDeclarationStatement(260)", "Delete SimpleName: error(261)", "Delete SimpleName: PrintWriter(262)", "Delete SimpleType: PrintWriter(263)", "Delete InstanceofExpression(264)", "Delete SimpleName: PrintWriter(265)", "Delete SimpleType: PrintWriter(266)", "Delete SimpleName: error(267)", "Delete CastExpression(268)", "Delete ReturnStatement(269)", "Delete Block(270)", "Delete SimpleName: error(271)", "Delete NullLiteral(272)", "Delete InfixExpression: !=(273)", "Delete SimpleName: PrintWriter(274)", "Delete SimpleType: PrintWriter(275)", "Delete SimpleName: error(276)", "Delete BooleanLiteral: true(277)", "Delete ClassInstanceCreation(278)", "Delete ReturnStatement(279)", "Delete Block(280)", "Delete NullLiteral(281)", "Delete ReturnStatement(282)", "Delete Block(283)", "Delete IfStatement(284)", "Delete IfStatement(285)", "Delete Block(286)", "Delete MethodDeclaration(287)", "Delete TextElement: Gives access to the engine scope input reader (defaults to System.in).(288)", "Delete TagElement(289)", "Delete TextElement:  the engine input reader(290)", "Delete TagElement: @return(291)", "Delete Javadoc(292)", "Delete Modifier: public(293)", "Delete SimpleName: Reader(294)", "Delete SimpleType: Reader(295)", "Delete SimpleName: getIn(296)", "Delete SimpleName: context(297)", "Delete SimpleName: getReader(298)", "Delete MethodInvocation(299)", "Delete ReturnStatement(300)", "Delete Block(301)", "Delete MethodDeclaration(302)", "Delete TextElement: Gives access to System class.(303)", "Delete TagElement(304)", "Delete TextElement:  System.class(305)", "Delete TagElement: @return(306)", "Delete Javadoc(307)", "Delete Modifier: public(308)", "Delete SimpleName: Class(309)", "Delete SimpleType: Class(310)", "Delete SimpleName: System(311)", "Delete SimpleType: System(312)", "Delete ParameterizedType: Class<System>(313)", "Delete SimpleName: getSystem(314)", "Delete SimpleName: System(315)", "Delete SimpleType: System(316)", "Delete TypeLiteral(317)", "Delete ReturnStatement(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete TextElement: Gives access to the engine logger.(321)", "Delete TagElement(322)", "Delete TextElement:  the JexlScriptEngine logger(323)", "Delete TagElement: @return(324)", "Delete Javadoc(325)", "Delete Modifier: public(326)", "Delete SimpleName: Log(327)", "Delete SimpleType: Log(328)", "Delete SimpleName: getLogger(329)", "Delete SimpleName: LOG(330)", "Delete ReturnStatement(331)", "Delete Block(332)", "Delete MethodDeclaration(333)", "Delete TypeDeclaration: class(334)", "Delete TextElement: Create a scripting engine using the supplied factory.(335)", "Delete TagElement(336)", "Delete SimpleName: factory(337)", "Delete TextElement:  the factory which created this instance.(338)", "Delete TagElement: @param(339)", "Delete SimpleName: NullPointerException(340)", "Delete TextElement:  if factory is null(341)", "Delete TagElement: @throws(342)", "Delete Javadoc(343)", "Delete Modifier: public(344)", "Delete SimpleName: JexlScriptEngine(345)", "Delete Modifier: final(346)", "Delete SimpleName: ScriptEngineFactory(347)", "Delete SimpleType: ScriptEngineFactory(348)", "Delete SimpleName: factory(349)", "Delete SingleVariableDeclaration(350)", "Delete SimpleName: factory(351)", "Delete NullLiteral(352)", "Delete InfixExpression: ==(353)", "Delete SimpleName: NullPointerException(354)", "Delete SimpleType: NullPointerException(355)", "Delete StringLiteral: \"ScriptEngineFactory must not be null\"(356)", "Delete ClassInstanceCreation(357)", "Delete ThrowStatement(358)", "Delete Block(359)", "Delete IfStatement(360)", "Delete SimpleName: parentFactory(361)", "Delete SimpleName: factory(362)", "Delete Assignment: =(363)", "Delete ExpressionStatement(364)", "Delete SimpleName: jexlEngine(365)", "Delete QualifiedName: EngineSingletonHolder.DEFAULT_ENGINE(366)", "Delete Assignment: =(367)", "Delete ExpressionStatement(368)", "Delete SimpleName: jexlObject(369)", "Delete SimpleName: JexlScriptObject(370)", "Delete SimpleType: JexlScriptObject(371)", "Delete ClassInstanceCreation(372)", "Delete Assignment: =(373)", "Delete ExpressionStatement(374)", "Delete Block(375)", "Delete MethodDeclaration(376)", "Delete TagElement: @inheritDoc(377)", "Delete TextElement:  (378)", "Delete TagElement(379)", "Delete Javadoc(380)", "Delete Modifier: public(381)", "Delete SimpleName: Bindings(382)", "Delete SimpleType: Bindings(383)", "Delete SimpleName: createBindings(384)", "Delete SimpleName: SimpleBindings(385)", "Delete SimpleType: SimpleBindings(386)", "Delete ClassInstanceCreation(387)", "Delete ReturnStatement(388)", "Delete Block(389)", "Delete MethodDeclaration(390)", "Delete TagElement: @inheritDoc(391)", "Delete TextElement:  (392)", "Delete TagElement(393)", "Delete Javadoc(394)", "Delete Modifier: public(395)", "Delete SimpleName: Object(396)", "Delete SimpleType: Object(397)", "Delete SimpleName: eval(398)", "Delete Modifier: final(399)", "Delete SimpleName: Reader(400)", "Delete SimpleType: Reader(401)", "Delete SimpleName: reader(402)", "Delete SingleVariableDeclaration(403)", "Delete Modifier: final(404)", "Delete SimpleName: ScriptContext(405)", "Delete SimpleType: ScriptContext(406)", "Delete SimpleName: context(407)", "Delete SingleVariableDeclaration(408)", "Delete SimpleName: ScriptException(409)", "Delete SimpleType: ScriptException(410)", "Delete SimpleName: reader(411)", "Delete NullLiteral(412)", "Delete InfixExpression: ==(413)", "Delete SimpleName: context(414)", "Delete NullLiteral(415)", "Delete InfixExpression: ==(416)", "Delete InfixExpression: ||(417)", "Delete SimpleName: NullPointerException(418)", "Delete SimpleType: NullPointerException(419)", "Delete StringLiteral: \"script and context must be non-null\"(420)", "Delete ClassInstanceCreation(421)", "Delete ThrowStatement(422)", "Delete Block(423)", "Delete IfStatement(424)", "Delete SimpleName: eval(425)", "Delete SimpleName: readerToString(426)", "Delete SimpleName: reader(427)", "Delete MethodInvocation(428)", "Delete SimpleName: context(429)", "Delete MethodInvocation(430)", "Delete ReturnStatement(431)", "Delete Block(432)", "Delete MethodDeclaration(433)", "Delete TagElement: @inheritDoc(434)", "Delete TextElement:  (435)", "Delete TagElement(436)", "Delete Javadoc(437)", "Delete Modifier: public(438)", "Delete SimpleName: Object(439)", "Delete SimpleType: Object(440)", "Delete SimpleName: eval(441)", "Delete Modifier: final(442)", "Delete SimpleName: String(443)", "Delete SimpleType: String(444)", "Delete SimpleName: script(445)", "Delete SingleVariableDeclaration(446)", "Delete Modifier: final(447)", "Delete SimpleName: ScriptContext(448)", "Delete SimpleType: ScriptContext(449)", "Delete SimpleName: context(450)", "Delete SingleVariableDeclaration(451)", "Delete SimpleName: ScriptException(452)", "Delete SimpleType: ScriptException(453)", "Delete SimpleName: script(454)", "Delete NullLiteral(455)", "Delete InfixExpression: ==(456)", "Delete SimpleName: context(457)", "Delete NullLiteral(458)", "Delete InfixExpression: ==(459)", "Delete InfixExpression: ||(460)", "Delete SimpleName: NullPointerException(461)", "Delete SimpleType: NullPointerException(462)", "Delete StringLiteral: \"script and context must be non-null\"(463)", "Delete ClassInstanceCreation(464)", "Delete ThrowStatement(465)", "Delete Block(466)", "Delete IfStatement(467)", "Delete SimpleName: context(468)", "Delete SimpleName: setAttribute(469)", "Delete SimpleName: CONTEXT_KEY(470)", "Delete SimpleName: context(471)", "Delete QualifiedName: ScriptContext.ENGINE_SCOPE(472)", "Delete MethodInvocation(473)", "Delete ExpressionStatement(474)", "Delete SimpleName: Script(475)", "Delete SimpleType: Script(476)", "Delete SimpleName: jexlScript(477)", "Delete SimpleName: jexlEngine(478)", "Delete SimpleName: createScript(479)", "Delete SimpleName: script(480)", "Delete MethodInvocation(481)", "Delete VariableDeclarationFragment(482)", "Delete VariableDeclarationStatement(483)", "Delete SimpleName: JexlContext(484)", "Delete SimpleType: JexlContext(485)", "Delete SimpleName: ctxt(486)", "Delete SimpleName: JexlContextWrapper(487)", "Delete SimpleType: JexlContextWrapper(488)", "Delete SimpleName: context(489)", "Delete ClassInstanceCreation(490)", "Delete VariableDeclarationFragment(491)", "Delete VariableDeclarationStatement(492)", "Delete SimpleName: jexlScript(493)", "Delete SimpleName: execute(494)", "Delete SimpleName: ctxt(495)", "Delete MethodInvocation(496)", "Delete ReturnStatement(497)", "Delete Block(498)", "Delete SimpleName: Exception(499)", "Delete SimpleType: Exception(500)", "Delete SimpleName: e(501)", "Delete SingleVariableDeclaration(502)", "Delete SimpleName: ScriptException(503)", "Delete SimpleType: ScriptException(504)", "Delete SimpleName: e(505)", "Delete SimpleName: toString(506)", "Delete MethodInvocation(507)", "Delete ClassInstanceCreation(508)", "Delete ThrowStatement(509)", "Delete Block(510)", "Delete CatchClause(511)", "Delete TryStatement(512)", "Delete Block(513)", "Delete MethodDeclaration(514)", "Delete TagElement: @inheritDoc(515)", "Delete TextElement:  (516)", "Delete TagElement(517)", "Delete Javadoc(518)", "Delete Modifier: public(519)", "Delete SimpleName: ScriptEngineFactory(520)", "Delete SimpleType: ScriptEngineFactory(521)", "Delete SimpleName: getFactory(522)", "Delete SimpleName: parentFactory(523)", "Delete ReturnStatement(524)", "Delete Block(525)", "Delete MethodDeclaration(526)", "Delete TagElement: @inheritDoc(527)", "Delete TextElement:  (528)", "Delete TagElement(529)", "Delete Javadoc(530)", "Delete Modifier: public(531)", "Delete SimpleName: CompiledScript(532)", "Delete SimpleType: CompiledScript(533)", "Delete SimpleName: compile(534)", "Delete Modifier: final(535)", "Delete SimpleName: String(536)", "Delete SimpleType: String(537)", "Delete SimpleName: script(538)", "Delete SingleVariableDeclaration(539)", "Delete SimpleName: ScriptException(540)", "Delete SimpleType: ScriptException(541)", "Delete SimpleName: script(542)", "Delete NullLiteral(543)", "Delete InfixExpression: ==(544)", "Delete SimpleName: NullPointerException(545)", "Delete SimpleType: NullPointerException(546)", "Delete StringLiteral: \"script must be non-null\"(547)", "Delete ClassInstanceCreation(548)", "Delete ThrowStatement(549)", "Delete Block(550)", "Delete IfStatement(551)", "Delete SimpleName: Script(552)", "Delete SimpleType: Script(553)", "Delete SimpleName: jexlScript(554)", "Delete SimpleName: jexlEngine(555)", "Delete SimpleName: createScript(556)", "Delete SimpleName: script(557)", "Delete MethodInvocation(558)", "Delete VariableDeclarationFragment(559)", "Delete VariableDeclarationStatement(560)", "Delete SimpleName: JexlCompiledScript(561)", "Delete SimpleType: JexlCompiledScript(562)", "Delete SimpleName: jexlScript(563)", "Delete ClassInstanceCreation(564)", "Delete ReturnStatement(565)", "Delete Block(566)", "Delete SimpleName: Exception(567)", "Delete SimpleType: Exception(568)", "Delete SimpleName: e(569)", "Delete SingleVariableDeclaration(570)", "Delete SimpleName: ScriptException(571)", "Delete SimpleType: ScriptException(572)", "Delete SimpleName: e(573)", "Delete SimpleName: toString(574)", "Delete MethodInvocation(575)", "Delete ClassInstanceCreation(576)", "Delete ThrowStatement(577)", "Delete Block(578)", "Delete CatchClause(579)", "Delete TryStatement(580)", "Delete Block(581)", "Delete MethodDeclaration(582)", "Delete TagElement: @inheritDoc(583)", "Delete TextElement:  (584)", "Delete TagElement(585)", "Delete Javadoc(586)", "Delete Modifier: public(587)", "Delete SimpleName: CompiledScript(588)", "Delete SimpleType: CompiledScript(589)", "Delete SimpleName: compile(590)", "Delete Modifier: final(591)", "Delete SimpleName: Reader(592)", "Delete SimpleType: Reader(593)", "Delete SimpleName: script(594)", "Delete SingleVariableDeclaration(595)", "Delete SimpleName: ScriptException(596)", "Delete SimpleType: ScriptException(597)", "Delete SimpleName: script(598)", "Delete NullLiteral(599)", "Delete InfixExpression: ==(600)", "Delete SimpleName: NullPointerException(601)", "Delete SimpleType: NullPointerException(602)", "Delete StringLiteral: \"script must be non-null\"(603)", "Delete ClassInstanceCreation(604)", "Delete ThrowStatement(605)", "Delete Block(606)", "Delete IfStatement(607)", "Delete SimpleName: compile(608)", "Delete SimpleName: readerToString(609)", "Delete SimpleName: script(610)", "Delete MethodInvocation(611)", "Delete MethodInvocation(612)", "Delete ReturnStatement(613)", "Delete Block(614)", "Delete MethodDeclaration(615)", "Delete TextElement: Reads a script.(616)", "Delete TagElement(617)", "Delete SimpleName: script(618)", "Delete TextElement:  the script reader(619)", "Delete TagElement: @param(620)", "Delete TextElement:  the script as a string(621)", "Delete TagElement: @return(622)", "Delete SimpleName: ScriptException(623)", "Delete TextElement:  if an exception occurs during read(624)", "Delete TagElement: @throws(625)", "Delete Javadoc(626)", "Delete Modifier: private(627)", "Delete SimpleName: String(628)", "Delete SimpleType: String(629)", "Delete SimpleName: readerToString(630)", "Delete Modifier: final(631)", "Delete SimpleName: Reader(632)", "Delete SimpleType: Reader(633)", "Delete SimpleName: script(634)", "Delete SingleVariableDeclaration(635)", "Delete SimpleName: ScriptException(636)", "Delete SimpleType: ScriptException(637)", "Delete SimpleName: JexlEngine(638)", "Delete SimpleName: readerToString(639)", "Delete SimpleName: script(640)", "Delete MethodInvocation(641)", "Delete ReturnStatement(642)", "Delete Block(643)", "Delete SimpleName: IOException(644)", "Delete SimpleType: IOException(645)", "Delete SimpleName: e(646)", "Delete SingleVariableDeclaration(647)", "Delete SimpleName: ScriptException(648)", "Delete SimpleType: ScriptException(649)", "Delete SimpleName: e(650)", "Delete ClassInstanceCreation(651)", "Delete ThrowStatement(652)", "Delete Block(653)", "Delete CatchClause(654)", "Delete TryStatement(655)", "Delete Block(656)", "Delete MethodDeclaration(657)", "Delete TextElement: Holds singleton JexlScriptEngineFactory (IODH). (658)", "Delete TagElement(659)", "Delete Javadoc(660)", "Delete Modifier: private(661)", "Delete Modifier: static(662)", "Delete SimpleName: FactorySingletonHolder(663)", "Delete TextElement: non instantiable. (664)", "Delete TagElement(665)", "Delete Javadoc(666)", "Delete Modifier: private(667)", "Delete SimpleName: FactorySingletonHolder(668)", "Delete Block(669)", "Delete MethodDeclaration(670)", "Delete TextElement: The engine factory singleton instance. (671)", "Delete TagElement(672)", "Delete Javadoc(673)", "Delete Modifier: private(674)", "Delete Modifier: static(675)", "Delete Modifier: final(676)", "Delete SimpleName: JexlScriptEngineFactory(677)", "Delete SimpleType: JexlScriptEngineFactory(678)", "Delete SimpleName: DEFAULT_FACTORY(679)", "Delete SimpleName: JexlScriptEngineFactory(680)", "Delete SimpleType: JexlScriptEngineFactory(681)", "Delete ClassInstanceCreation(682)", "Delete VariableDeclarationFragment(683)", "Delete FieldDeclaration(684)", "Delete TypeDeclaration: class(685)", "Delete TextElement: Holds singleton JexlScriptEngine (IODH).(686)", "Delete TextElement: <p>A single JEXL engine and Uberspect is shared by all instances of JexlScriptEngine.</p>(687)", "Delete TagElement(688)", "Delete Javadoc(689)", "Delete Modifier: private(690)", "Delete Modifier: static(691)", "Delete SimpleName: EngineSingletonHolder(692)", "Delete TextElement: non instantiable. (693)", "Delete TagElement(694)", "Delete Javadoc(695)", "Delete Modifier: private(696)", "Delete SimpleName: EngineSingletonHolder(697)", "Delete Block(698)", "Delete MethodDeclaration(699)", "Delete TextElement: The JEXL engine singleton instance. (700)", "Delete TagElement(701)", "Delete Javadoc(702)", "Delete Modifier: private(703)", "Delete Modifier: static(704)", "Delete Modifier: final(705)", "Delete SimpleName: JexlEngine(706)", "Delete SimpleType: JexlEngine(707)", "Delete SimpleName: DEFAULT_ENGINE(708)", "Delete SimpleName: JexlEngine(709)", "Delete SimpleType: JexlEngine(710)", "Delete NullLiteral(711)", "Delete NullLiteral(712)", "Delete NullLiteral(713)", "Delete SimpleName: LOG(714)", "Delete ThisExpression(715)", "Delete SimpleName: setCache(716)", "Delete SimpleName: CACHE_SIZE(717)", "Delete MethodInvocation(718)", "Delete ExpressionStatement(719)", "Delete Block(720)", "Delete Initializer(721)", "Delete AnonymousClassDeclaration(722)", "Delete ClassInstanceCreation(723)", "Delete VariableDeclarationFragment(724)", "Delete FieldDeclaration(725)", "Delete TypeDeclaration: class(726)", "Delete TextElement: Wrapper to help convert a JSR-223 ScriptContext into a JexlContext.(727)", "Delete TextElement: Current implementation only gives access to ENGINE_SCOPE binding.(728)", "Delete TagElement(729)", "Delete Javadoc(730)", "Delete Modifier: private(731)", "Delete Modifier: final(732)", "Delete SimpleName: JexlContextWrapper(733)", "Delete SimpleName: JexlContext(734)", "Delete SimpleType: JexlContext(735)", "Delete TextElement: The wrapped script context. (736)", "Delete TagElement(737)", "Delete Javadoc(738)", "Delete Modifier: private(739)", "Delete Modifier: final(740)", "Delete SimpleName: ScriptContext(741)", "Delete SimpleType: ScriptContext(742)", "Delete SimpleName: scriptContext(743)", "Delete VariableDeclarationFragment(744)", "Delete FieldDeclaration(745)", "Delete TextElement: Creates a context wrapper.(746)", "Delete TagElement(747)", "Delete SimpleName: theContext(748)", "Delete TextElement:  the engine context.(749)", "Delete TagElement: @param(750)", "Delete Javadoc(751)", "Delete Modifier: private(752)", "Delete SimpleName: JexlContextWrapper(753)", "Delete Modifier: final(754)", "Delete SimpleName: ScriptContext(755)", "Delete SimpleType: ScriptContext(756)", "Delete SimpleName: theContext(757)", "Delete SingleVariableDeclaration(758)", "Delete SimpleName: scriptContext(759)", "Delete SimpleName: theContext(760)", "Delete Assignment: =(761)", "Delete ExpressionStatement(762)", "Delete Block(763)", "Delete MethodDeclaration(764)", "Delete TagElement: @inheritDoc(765)", "Delete TextElement:  (766)", "Delete TagElement(767)", "Delete Javadoc(768)", "Delete Modifier: public(769)", "Delete SimpleName: Object(770)", "Delete SimpleType: Object(771)", "Delete SimpleName: get(772)", "Delete Modifier: final(773)", "Delete SimpleName: String(774)", "Delete SimpleType: String(775)", "Delete SimpleName: name(776)", "Delete SingleVariableDeclaration(777)", "Delete Modifier: final(778)", "Delete SimpleName: Object(779)", "Delete SimpleType: Object(780)", "Delete SimpleName: o(781)", "Delete SimpleName: scriptContext(782)", "Delete SimpleName: getAttribute(783)", "Delete SimpleName: name(784)", "Delete MethodInvocation(785)", "Delete VariableDeclarationFragment(786)", "Delete VariableDeclarationStatement(787)", "Delete SimpleName: JEXL_OBJECT_KEY(788)", "Delete SimpleName: equals(789)", "Delete SimpleName: name(790)", "Delete MethodInvocation(791)", "Delete SimpleName: o(792)", "Delete NullLiteral(793)", "Delete InfixExpression: !=(794)", "Delete SimpleName: LOG(795)", "Delete SimpleName: warn(796)", "Delete StringLiteral: \"JEXL is a reserved variable name, user defined value is ignored\"(797)", "Delete MethodInvocation(798)", "Delete ExpressionStatement(799)", "Delete Block(800)", "Delete IfStatement(801)", "Delete SimpleName: jexlObject(802)", "Delete ReturnStatement(803)", "Delete Block(804)", "Delete IfStatement(805)", "Delete SimpleName: o(806)", "Delete ReturnStatement(807)", "Delete Block(808)", "Delete MethodDeclaration(809)", "Delete TagElement: @inheritDoc(810)", "Delete TextElement:  (811)", "Delete TagElement(812)", "Delete Javadoc(813)", "Delete Modifier: public(814)", "Delete PrimitiveType: void(815)", "Delete SimpleName: set(816)", "Delete Modifier: final(817)", "Delete SimpleName: String(818)", "Delete SimpleType: String(819)", "Delete SimpleName: name(820)", "Delete SingleVariableDeclaration(821)", "Delete Modifier: final(822)", "Delete SimpleName: Object(823)", "Delete SimpleType: Object(824)", "Delete SimpleName: value(825)", "Delete SingleVariableDeclaration(826)", "Delete PrimitiveType: int(827)", "Delete SimpleName: scope(828)", "Delete SimpleName: scriptContext(829)", "Delete SimpleName: getAttributesScope(830)", "Delete SimpleName: name(831)", "Delete MethodInvocation(832)", "Delete VariableDeclarationFragment(833)", "Delete VariableDeclarationStatement(834)", "Delete SimpleName: scope(835)", "Delete NumberLiteral: 1(836)", "Delete PrefixExpression: -(837)", "Delete InfixExpression: ==(838)", "Delete SimpleName: scope(839)", "Delete QualifiedName: ScriptContext.ENGINE_SCOPE(840)", "Delete Assignment: =(841)", "Delete ExpressionStatement(842)", "Delete Block(843)", "Delete IfStatement(844)", "Delete SimpleName: scriptContext(845)", "Delete SimpleName: getBindings(846)", "Delete SimpleName: scope(847)", "Delete MethodInvocation(848)", "Delete SimpleName: put(849)", "Delete SimpleName: name(850)", "Delete SimpleName: value(851)", "Delete MethodInvocation(852)", "Delete ExpressionStatement(853)", "Delete Block(854)", "Delete MethodDeclaration(855)", "Delete TagElement: @inheritDoc(856)", "Delete TextElement:  (857)", "Delete TagElement(858)", "Delete Javadoc(859)", "Delete Modifier: public(860)", "Delete PrimitiveType: boolean(861)", "Delete SimpleName: has(862)", "Delete Modifier: final(863)", "Delete SimpleName: String(864)", "Delete SimpleType: String(865)", "Delete SimpleName: name(866)", "Delete SingleVariableDeclaration(867)", "Delete SimpleName: Bindings(868)", "Delete SimpleType: Bindings(869)", "Delete SimpleName: bnd(870)", "Delete SimpleName: scriptContext(871)", "Delete SimpleName: getBindings(872)", "Delete QualifiedName: ScriptContext.ENGINE_SCOPE(873)", "Delete MethodInvocation(874)", "Delete VariableDeclarationFragment(875)", "Delete VariableDeclarationStatement(876)", "Delete SimpleName: bnd(877)", "Delete SimpleName: containsKey(878)", "Delete SimpleName: name(879)", "Delete MethodInvocation(880)", "Delete ReturnStatement(881)", "Delete Block(882)", "Delete MethodDeclaration(883)", "Delete TypeDeclaration: class(884)", "Delete TextElement: Wrapper to help convert a Jexl Script into a JSR-223 CompiledScript.(885)", "Delete TagElement(886)", "Delete Javadoc(887)", "Delete Modifier: private(888)", "Delete Modifier: final(889)", "Delete SimpleName: JexlCompiledScript(890)", "Delete SimpleName: CompiledScript(891)", "Delete SimpleType: CompiledScript(892)", "Delete TextElement: The underlying Jexl expression instance. (893)", "Delete TagElement(894)", "Delete Javadoc(895)", "Delete Modifier: private(896)", "Delete Modifier: final(897)", "Delete SimpleName: Script(898)", "Delete SimpleType: Script(899)", "Delete SimpleName: script(900)", "Delete VariableDeclarationFragment(901)", "Delete FieldDeclaration(902)", "Delete TextElement: Creates an instance.(903)", "Delete TagElement(904)", "Delete SimpleName: theScript(905)", "Delete TextElement:  to wrap(906)", "Delete TagElement: @param(907)", "Delete Javadoc(908)", "Delete Modifier: private(909)", "Delete SimpleName: JexlCompiledScript(910)", "Delete Modifier: final(911)", "Delete SimpleName: Script(912)", "Delete SimpleType: Script(913)", "Delete SimpleName: theScript(914)", "Delete SingleVariableDeclaration(915)", "Delete SimpleName: script(916)", "Delete SimpleName: theScript(917)", "Delete Assignment: =(918)", "Delete ExpressionStatement(919)", "Delete Block(920)", "Delete MethodDeclaration(921)", "Delete TagElement: @inheritDoc(922)", "Delete TextElement:  (923)", "Delete TagElement(924)", "Delete Javadoc(925)", "Delete SimpleName: Override(926)", "Delete MarkerAnnotation(927)", "Delete Modifier: public(928)", "Delete SimpleName: String(929)", "Delete SimpleType: String(930)", "Delete SimpleName: toString(931)", "Delete SimpleName: script(932)", "Delete SimpleName: getText(933)", "Delete MethodInvocation(934)", "Delete ReturnStatement(935)", "Delete Block(936)", "Delete MethodDeclaration(937)", "Delete TagElement: @inheritDoc(938)", "Delete TextElement:  (939)", "Delete TagElement(940)", "Delete Javadoc(941)", "Delete SimpleName: Override(942)", "Delete MarkerAnnotation(943)", "Delete Modifier: public(944)", "Delete SimpleName: Object(945)", "Delete SimpleType: Object(946)", "Delete SimpleName: eval(947)", "Delete Modifier: final(948)", "Delete SimpleName: ScriptContext(949)", "Delete SimpleType: ScriptContext(950)", "Delete SimpleName: context(951)", "Delete SingleVariableDeclaration(952)", "Delete SimpleName: ScriptException(953)", "Delete SimpleType: ScriptException(954)", "Delete SimpleName: context(955)", "Delete SimpleName: setAttribute(956)", "Delete SimpleName: CONTEXT_KEY(957)", "Delete SimpleName: context(958)", "Delete QualifiedName: ScriptContext.ENGINE_SCOPE(959)", "Delete MethodInvocation(960)", "Delete ExpressionStatement(961)", "Delete SimpleName: JexlContext(962)", "Delete SimpleType: JexlContext(963)", "Delete SimpleName: ctxt(964)", "Delete SimpleName: JexlContextWrapper(965)", "Delete SimpleType: JexlContextWrapper(966)", "Delete SimpleName: context(967)", "Delete ClassInstanceCreation(968)", "Delete VariableDeclarationFragment(969)", "Delete VariableDeclarationStatement(970)", "Delete SimpleName: script(971)", "Delete SimpleName: execute(972)", "Delete SimpleName: ctxt(973)", "Delete MethodInvocation(974)", "Delete ReturnStatement(975)", "Delete Block(976)", "Delete SimpleName: Exception(977)", "Delete SimpleType: Exception(978)", "Delete SimpleName: e(979)", "Delete SingleVariableDeclaration(980)", "Delete SimpleName: ScriptException(981)", "Delete SimpleType: ScriptException(982)", "Delete SimpleName: e(983)", "Delete SimpleName: toString(984)", "Delete MethodInvocation(985)", "Delete ClassInstanceCreation(986)", "Delete ThrowStatement(987)", "Delete Block(988)", "Delete CatchClause(989)", "Delete TryStatement(990)", "Delete Block(991)", "Delete MethodDeclaration(992)", "Delete TagElement: @inheritDoc(993)", "Delete TextElement:  (994)", "Delete TagElement(995)", "Delete Javadoc(996)", "Delete SimpleName: Override(997)", "Delete MarkerAnnotation(998)", "Delete Modifier: public(999)", "Delete SimpleName: ScriptEngine(1000)", "Delete SimpleType: ScriptEngine(1001)", "Delete SimpleName: getEngine(1002)", "Delete SimpleName: JexlScriptEngine(1003)", "Delete ThisExpression(1004)", "Delete ReturnStatement(1005)", "Delete Block(1006)", "Delete MethodDeclaration(1007)", "Delete TypeDeclaration: class(1008)", "Delete TypeDeclaration: class(1009)"]}}, {"JexlScriptEngineFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.scripting", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Arrays", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.script.ScriptEngine", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.script.ScriptEngineFactory"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.JexlEngine"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.parser.StringParser", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ParameterizedType: List<String>", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: List", "DEL SimpleName: List", "DEL TagElement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL Block", "DEL SimpleName: String", "DEL SimpleType: String", "DEL ReturnStatement", "DEL StringLiteral: \"JEXL Engine\"", "DEL Block", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: statement", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: key", "DEL SimpleName: getMethodCallSyntax", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: String", "DEL TagElement: @since", "DEL StringLiteral: \"2.0\"", "DEL SimpleType: String", "DEL SimpleName: sb", "DEL StringLiteral: \"application/x-jexl2\"", "DEL SimpleName: asList", "DEL BooleanLiteral: true", "DEL SingleVariableDeclaration", "DEL ArrayType: String[]", "DEL ReturnStatement", "DEL Javadoc", "DEL IfStatement", "DEL TextElement:  2.0", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: String", "DEL TextElement:  ", "DEL TagElement", "DEL SimpleName: obj", "DEL SimpleName: escapeString", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL VariableDeclarationFragment", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: getExtensions", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL StringLiteral: \"jexl2\"", "DEL Block", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: key", "DEL TextElement:  ", "DEL SimpleType: String", "DEL TextElement: <p>", "DEL Block", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL QualifiedName: ScriptEngine.ENGINE", "DEL SimpleName: asList", "DEL TagElement", "DEL SimpleName: StringBuilder", "DEL QualifiedName: ScriptEngine.LANGUAGE_VERSION", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL Modifier: public", "DEL Block", "DEL SimpleName: toDisplay", "DEL Block", "DEL TextElement:  ", "DEL SimpleName: String", "DEL TextElement:  ", "DEL SimpleName: toDisplay", "DEL SimpleName: getNames", "DEL SimpleName: String", "DEL TextElement: <p>", "DEL TextElement: <a href=\"http://java.sun.com/javase/6/docs/api/javax/script/package-summary.html\">Java Scripting API</a>", "DEL IfStatement", "DEL SimpleName: getLanguageVersion", "DEL SimpleType: String", "DEL CharacterLiteral: ','", "DEL Block", "DEL SimpleName: ScriptEngineFactory", "DEL Block", "DEL Modifier: public", "DEL Block", "DEL SimpleName: append", "DEL Block", "DEL TextElement:  ", "DEL SimpleType: StringBuilder", "DEL VariableDeclarationFragment", "DEL SimpleName: args", "DEL StringLiteral: \")\"", "DEL SimpleName: statements", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: getEngineVersion", "DEL StringLiteral: \"2.0\"", "DEL SimpleName: obj", "DEL TagElement", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL Javadoc", "DEL Block", "DEL SimpleType: StringBuilder", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL TextElement: Language short names: \"JEXL\", \"Jexl\", \"jexl\", \"JEXL2\", \"Jexl2\", \"jexl2\" <br/>", "DEL ThisExpression", "DEL SimpleName: append", "DEL SimpleName: Arrays", "DEL TagElement: @inheritDoc", "DEL SimpleName: append", "DEL SimpleName: key", "DEL SimpleName: Collections", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL SimpleType: JexlScriptEngine", "DEL StringLiteral: \"application/x-jexl\"", "DEL SimpleName: sb", "DEL SimpleName: equals", "DEL Block", "DEL SimpleName: String", "DEL CharacterLiteral: ')'", "DEL SimpleName: StringBuilder", "DEL SimpleName: sb", "DEL TextElement: File Extensions: \".jexl\", \".jexl2\"<br/>", "DEL Block", "DEL StringLiteral: \";\"", "DEL NullLiteral", "DEL Javadoc", "DEL InfixExpression: +", "DEL SimpleName: List", "DEL SimpleName: needComma", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL ArrayType: String[]", "DEL MethodDeclaration", "DEL SimpleName: append", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL TextElement:  ", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL SimpleName: append", "DEL Javadoc", "DEL SimpleName: Arrays", "DEL SimpleName: equals", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL SimpleName: sb", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL TextElement: Javadoc.", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleName: sb", "DEL TagElement: @inheritDoc", "DEL ExpressionStatement", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: getNames", "DEL MethodInvocation", "DEL QualifiedName: ScriptEngine.NAME", "DEL TextElement: Implements the Jexl ScriptEngineFactory for JSF-223.", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL TextElement:  ", "DEL CharacterLiteral: '.'", "DEL Modifier: public", "DEL SimpleType: String", "DEL SimpleName: getMimeTypes", "DEL SimpleName: getParameter", "DEL Block", "DEL QualifiedName: ScriptEngine.ENGINE_VERSION", "DEL ParameterizedType: List<String>", "DEL SimpleName: toDisplay", "DEL MethodInvocation", "DEL SimpleName: m", "DEL Javadoc", "DEL ParameterizedType: List<String>", "DEL StringLiteral: \"jexl2\"", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: cleanExpression", "DEL Javadoc", "DEL StringLiteral: \"jexl\"", "DEL SimpleType: String", "DEL SimpleType: String", "DEL SimpleName: needComma", "DEL SingleVariableDeclaration", "DEL StringLiteral: \"Jexl2\"", "DEL TagElement: @inheritDoc", "DEL TagElement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: key", "DEL MethodInvocation", "DEL StringLiteral: \"JEXL\"", "DEL Block", "DEL SimpleName: statement", "DEL TextElement: See", "DEL SimpleName: endsWith", "DEL SimpleName: sb", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL TagElement: @inheritDoc", "DEL SimpleName: JexlScriptEngine", "DEL SimpleName: Collections", "DEL TextElement:  ", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: getEngineName", "DEL SimpleName: JexlScriptEngineFactory", "DEL SimpleType: String", "DEL SimpleName: engine", "DEL SimpleName: getScriptEngine", "DEL NullLiteral", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleName: getEngineVersion", "DEL SimpleName: sb", "DEL TagElement: @inheritDoc", "DEL SimpleName: arg", "DEL SimpleName: statements", "DEL TagElement", "DEL SimpleName: sb", "DEL SimpleName: String", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: unmodifiableList", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: getProgram", "DEL Dimension", "DEL SimpleName: String", "DEL Block", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL EnhancedForStatement", "DEL SimpleName: Collections", "DEL IfStatement", "DEL TagElement: @inheritDoc", "DEL SimpleName: statement", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: sb", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleName: StringParser", "DEL SimpleType: StringBuilder", "DEL TagElement", "DEL ReturnStatement", "DEL ReturnStatement", "DEL TextElement:  ", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: getLanguageName", "DEL SimpleType: String", "DEL TagElement", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL SimpleName: args", "DEL SimpleType: String", "DEL IfStatement", "DEL Modifier: public", "DEL SimpleName: getLanguageName", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: String", "DEL CharacterLiteral: '('", "DEL SimpleName: key", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL StringLiteral: \"jexl\"", "DEL SimpleName: key", "DEL SimpleType: ScriptEngineFactory", "DEL StringLiteral: \"JEXL\"", "DEL SimpleType: List", "DEL SimpleName: getEngineName", "DEL SimpleName: append", "DEL StringLiteral: \"JEXL.out.print(null)\"", "DEL SimpleName: StringBuilder", "DEL MethodInvocation", "DEL StringLiteral: \"JEXL2\"", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: String", "DEL Block", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL TextElement:  ", "DEL ReturnStatement", "DEL SimpleName: engine", "DEL Modifier: public", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: getOutputStatement", "DEL SimpleName: sb", "DEL IfStatement", "DEL ReturnStatement", "DEL QualifiedName: ScriptEngine.LANGUAGE", "DEL Block", "DEL Javadoc", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: arg", "DEL SimpleName: unmodifiableList", "DEL TextElement: </p>", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: unmodifiableList", "DEL SimpleName: String", "DEL SimpleType: String", "DEL TagElement", "DEL Assignment: =", "DEL SimpleName: ScriptEngine", "DEL MethodInvocation", "DEL SimpleName: JexlEngine", "DEL Modifier: public", "DEL SimpleName: equals", "DEL SimpleName: JexlScriptEngine", "DEL Block", "DEL TagElement: @inheritDoc", "DEL CharacterLiteral: '\\''", "DEL Modifier: public", "DEL SimpleName: String", "DEL Modifier: public", "DEL MethodInvocation", "DEL StringLiteral: \"THREADING\"", "DEL SimpleName: Arrays", "DEL CharacterLiteral: ';'", "DEL TextElement:  ", "DEL Javadoc", "DEL PrimitiveType: boolean", "DEL TextElement: \"jexl2\" etc. were added for engineVersion=\"2.0\".", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleType: List", "DEL SimpleType: JexlScriptEngine", "DEL SimpleName: needComma", "DEL MethodInvocation", "DEL ReturnStatement", "DEL StringLiteral: \"JEXL.out.print(\"", "DEL Modifier: public", "DEL TagElement: @inheritDoc", "DEL TextElement: Supports the following:<br.>", "DEL SimpleName: getLanguageVersion", "DEL TagElement: @inheritDoc", "DEL SimpleType: ScriptEngine", "DEL Block", "DEL StringLiteral: \"Jexl\"", "DEL TagElement", "DEL Block", "DEL SimpleName: asList", "DEL SimpleName: String", "DEL SimpleName: m", "DEL SimpleName: String", "DEL TagElement: @inheritDoc", "DEL MethodInvocation", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: String", "DEL TextElement:  ", "DEL SimpleName: String", "DEL SimpleName: sb", "DEL SimpleName: equals", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL ExpressionStatement"]}]}}, {"JexlScriptEngineFactory_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.scripting(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Arrays(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Collections(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.List(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: javax.script.ScriptEngine(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: javax.script.ScriptEngineFactory(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: org.apache.commons.jexl2.JexlEngine(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.apache.commons.jexl2.parser.StringParser(14)", "Delete ImportDeclaration(15)", "Delete TextElement: Implements the Jexl ScriptEngineFactory for JSF-223.(16)", "Delete TextElement: <p>(17)", "Delete TextElement: Supports the following:<br.>(18)", "Delete TextElement: Language short names: \"JEXL\", \"Jexl\", \"jexl\", \"JEXL2\", \"Jexl2\", \"jexl2\" <br/>(19)", "Delete TextElement: File Extensions: \".jexl\", \".jexl2\"<br/>(20)", "Delete TextElement: \"jexl2\" etc. were added for engineVersion=\"2.0\".(21)", "Delete TextElement: </p>(22)", "Delete TextElement: <p>(23)", "Delete TextElement: See(24)", "Delete TextElement: <a href=\"http://java.sun.com/javase/6/docs/api/javax/script/package-summary.html\">Java Scripting API</a>(25)", "Delete TextElement: Javadoc.(26)", "Delete TagElement(27)", "Delete TextElement:  2.0(28)", "Delete TagElement: @since(29)", "Delete Javadoc(30)", "Delete Modifier: public(31)", "Delete SimpleName: JexlScriptEngineFactory(32)", "Delete SimpleName: ScriptEngineFactory(33)", "Delete SimpleType: ScriptEngineFactory(34)", "Delete TagElement: @inheritDoc(35)", "Delete TextElement:  (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: public(39)", "Delete SimpleName: String(40)", "Delete SimpleType: String(41)", "Delete SimpleName: getEngineName(42)", "Delete StringLiteral: \"JEXL Engine\"(43)", "Delete ReturnStatement(44)", "Delete Block(45)", "Delete MethodDeclaration(46)", "Delete TagElement: @inheritDoc(47)", "Delete TextElement:  (48)", "Delete TagElement(49)", "Delete Javadoc(50)", "Delete Modifier: public(51)", "Delete SimpleName: String(52)", "Delete SimpleType: String(53)", "Delete SimpleName: getEngineVersion(54)", "Delete StringLiteral: \"2.0\"(55)", "Delete ReturnStatement(56)", "Delete Block(57)", "Delete MethodDeclaration(58)", "Delete TagElement: @inheritDoc(59)", "Delete TextElement:  (60)", "Delete TagElement(61)", "Delete Javadoc(62)", "Delete Modifier: public(63)", "Delete SimpleName: String(64)", "Delete SimpleType: String(65)", "Delete SimpleName: getLanguageName(66)", "Delete StringLiteral: \"JEXL\"(67)", "Delete ReturnStatement(68)", "Delete Block(69)", "Delete MethodDeclaration(70)", "Delete TagElement: @inheritDoc(71)", "Delete TextElement:  (72)", "Delete TagElement(73)", "Delete Javadoc(74)", "Delete Modifier: public(75)", "Delete SimpleName: String(76)", "Delete SimpleType: String(77)", "Delete SimpleName: getLanguageVersion(78)", "Delete StringLiteral: \"2.0\"(79)", "Delete ReturnStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete TagElement: @inheritDoc(83)", "Delete TextElement:  (84)", "Delete TagElement(85)", "Delete Javadoc(86)", "Delete Modifier: public(87)", "Delete SimpleName: String(88)", "Delete SimpleType: String(89)", "Delete SimpleName: getMethodCallSyntax(90)", "Delete SimpleName: String(91)", "Delete SimpleType: String(92)", "Delete SimpleName: obj(93)", "Delete SingleVariableDeclaration(94)", "Delete SimpleName: String(95)", "Delete SimpleType: String(96)", "Delete SimpleName: m(97)", "Delete SingleVariableDeclaration(98)", "Delete SimpleName: String(99)", "Delete SimpleType: String(100)", "Delete Dimension(101)", "Delete ArrayType: String[](102)", "Delete SimpleName: args(103)", "Delete SingleVariableDeclaration(104)", "Delete SimpleName: StringBuilder(105)", "Delete SimpleType: StringBuilder(106)", "Delete SimpleName: sb(107)", "Delete SimpleName: StringBuilder(108)", "Delete SimpleType: StringBuilder(109)", "Delete ClassInstanceCreation(110)", "Delete VariableDeclarationFragment(111)", "Delete VariableDeclarationStatement(112)", "Delete SimpleName: sb(113)", "Delete SimpleName: append(114)", "Delete SimpleName: obj(115)", "Delete MethodInvocation(116)", "Delete ExpressionStatement(117)", "Delete SimpleName: sb(118)", "Delete SimpleName: append(119)", "Delete CharacterLiteral: '.'(120)", "Delete MethodInvocation(121)", "Delete ExpressionStatement(122)", "Delete SimpleName: sb(123)", "Delete SimpleName: append(124)", "Delete SimpleName: m(125)", "Delete MethodInvocation(126)", "Delete ExpressionStatement(127)", "Delete SimpleName: sb(128)", "Delete SimpleName: append(129)", "Delete CharacterLiteral: '('(130)", "Delete MethodInvocation(131)", "Delete ExpressionStatement(132)", "Delete PrimitiveType: boolean(133)", "Delete SimpleName: needComma(134)", "Delete BooleanLiteral: false(135)", "Delete VariableDeclarationFragment(136)", "Delete VariableDeclarationStatement(137)", "Delete SimpleName: String(138)", "Delete SimpleType: String(139)", "Delete SimpleName: arg(140)", "Delete SingleVariableDeclaration(141)", "Delete SimpleName: args(142)", "Delete SimpleName: needComma(143)", "Delete SimpleName: sb(144)", "Delete SimpleName: append(145)", "Delete CharacterLiteral: ','(146)", "Delete MethodInvocation(147)", "Delete ExpressionStatement(148)", "Delete Block(149)", "Delete IfStatement(150)", "Delete SimpleName: sb(151)", "Delete SimpleName: append(152)", "Delete SimpleName: arg(153)", "Delete MethodInvocation(154)", "Delete ExpressionStatement(155)", "Delete SimpleName: needComma(156)", "Delete BooleanLiteral: true(157)", "Delete Assignment: =(158)", "Delete ExpressionStatement(159)", "Delete Block(160)", "Delete EnhancedForStatement(161)", "Delete SimpleName: sb(162)", "Delete SimpleName: append(163)", "Delete CharacterLiteral: ')'(164)", "Delete MethodInvocation(165)", "Delete ExpressionStatement(166)", "Delete SimpleName: sb(167)", "Delete SimpleName: toString(168)", "Delete MethodInvocation(169)", "Delete ReturnStatement(170)", "Delete Block(171)", "Delete MethodDeclaration(172)", "Delete TagElement: @inheritDoc(173)", "Delete TextElement:  (174)", "Delete TagElement(175)", "Delete Javadoc(176)", "Delete Modifier: public(177)", "Delete SimpleName: List(178)", "Delete SimpleType: List(179)", "Delete SimpleName: String(180)", "Delete SimpleType: String(181)", "Delete ParameterizedType: List<String>(182)", "Delete SimpleName: getExtensions(183)", "Delete SimpleName: Collections(184)", "Delete SimpleName: unmodifiableList(185)", "Delete SimpleName: Arrays(186)", "Delete SimpleName: asList(187)", "Delete StringLiteral: \"jexl\"(188)", "Delete StringLiteral: \"jexl2\"(189)", "Delete MethodInvocation(190)", "Delete MethodInvocation(191)", "Delete ReturnStatement(192)", "Delete Block(193)", "Delete MethodDeclaration(194)", "Delete TagElement: @inheritDoc(195)", "Delete TextElement:  (196)", "Delete TagElement(197)", "Delete Javadoc(198)", "Delete Modifier: public(199)", "Delete SimpleName: List(200)", "Delete SimpleType: List(201)", "Delete SimpleName: String(202)", "Delete SimpleType: String(203)", "Delete ParameterizedType: List<String>(204)", "Delete SimpleName: getMimeTypes(205)", "Delete SimpleName: Collections(206)", "Delete SimpleName: unmodifiableList(207)", "Delete SimpleName: Arrays(208)", "Delete SimpleName: asList(209)", "Delete StringLiteral: \"application/x-jexl\"(210)", "Delete StringLiteral: \"application/x-jexl2\"(211)", "Delete MethodInvocation(212)", "Delete MethodInvocation(213)", "Delete ReturnStatement(214)", "Delete Block(215)", "Delete MethodDeclaration(216)", "Delete TagElement: @inheritDoc(217)", "Delete TextElement:  (218)", "Delete TagElement(219)", "Delete Javadoc(220)", "Delete Modifier: public(221)", "Delete SimpleName: List(222)", "Delete SimpleType: List(223)", "Delete SimpleName: String(224)", "Delete SimpleType: String(225)", "Delete ParameterizedType: List<String>(226)", "Delete SimpleName: getNames(227)", "Delete SimpleName: Collections(228)", "Delete SimpleName: unmodifiableList(229)", "Delete SimpleName: Arrays(230)", "Delete SimpleName: asList(231)", "Delete StringLiteral: \"JEXL\"(232)", "Delete StringLiteral: \"Jexl\"(233)", "Delete StringLiteral: \"jexl\"(234)", "Delete StringLiteral: \"JEXL2\"(235)", "Delete StringLiteral: \"Jexl2\"(236)", "Delete StringLiteral: \"jexl2\"(237)", "Delete MethodInvocation(238)", "Delete MethodInvocation(239)", "Delete ReturnStatement(240)", "Delete Block(241)", "Delete MethodDeclaration(242)", "Delete TagElement: @inheritDoc(243)", "Delete TextElement:  (244)", "Delete TagElement(245)", "Delete Javadoc(246)", "Delete Modifier: public(247)", "Delete SimpleName: String(248)", "Delete SimpleType: String(249)", "Delete SimpleName: getOutputStatement(250)", "Delete SimpleName: String(251)", "Delete SimpleType: String(252)", "Delete SimpleName: toDisplay(253)", "Delete SingleVariableDeclaration(254)", "Delete SimpleName: toDisplay(255)", "Delete NullLiteral(256)", "Delete InfixExpression: ==(257)", "Delete StringLiteral: \"JEXL.out.print(null)\"(258)", "Delete ReturnStatement(259)", "Delete Block(260)", "Delete StringLiteral: \"JEXL.out.print(\"(261)", "Delete SimpleName: StringParser(262)", "Delete SimpleName: escapeString(263)", "Delete SimpleName: toDisplay(264)", "Delete CharacterLiteral: '\\''(265)", "Delete MethodInvocation(266)", "Delete StringLiteral: \")\"(267)", "Delete InfixExpression: +(268)", "Delete ReturnStatement(269)", "Delete Block(270)", "Delete IfStatement(271)", "Delete Block(272)", "Delete MethodDeclaration(273)", "Delete TagElement: @inheritDoc(274)", "Delete TextElement:  (275)", "Delete TagElement(276)", "Delete Javadoc(277)", "Delete Modifier: public(278)", "Delete SimpleName: Object(279)", "Delete SimpleType: Object(280)", "Delete SimpleName: getParameter(281)", "Delete SimpleName: String(282)", "Delete SimpleType: String(283)", "Delete SimpleName: key(284)", "Delete SingleVariableDeclaration(285)", "Delete SimpleName: key(286)", "Delete SimpleName: equals(287)", "Delete QualifiedName: ScriptEngine.ENGINE(288)", "Delete MethodInvocation(289)", "Delete SimpleName: getEngineName(290)", "Delete MethodInvocation(291)", "Delete ReturnStatement(292)", "Delete Block(293)", "Delete SimpleName: key(294)", "Delete SimpleName: equals(295)", "Delete QualifiedName: ScriptEngine.ENGINE_VERSION(296)", "Delete MethodInvocation(297)", "Delete SimpleName: getEngineVersion(298)", "Delete MethodInvocation(299)", "Delete ReturnStatement(300)", "Delete Block(301)", "Delete SimpleName: key(302)", "Delete SimpleName: equals(303)", "Delete QualifiedName: ScriptEngine.NAME(304)", "Delete MethodInvocation(305)", "Delete SimpleName: getNames(306)", "Delete MethodInvocation(307)", "Delete ReturnStatement(308)", "Delete Block(309)", "Delete SimpleName: key(310)", "Delete SimpleName: equals(311)", "Delete QualifiedName: ScriptEngine.LANGUAGE(312)", "Delete MethodInvocation(313)", "Delete SimpleName: getLanguageName(314)", "Delete MethodInvocation(315)", "Delete ReturnStatement(316)", "Delete Block(317)", "Delete SimpleName: key(318)", "Delete SimpleName: equals(319)", "Delete QualifiedName: ScriptEngine.LANGUAGE_VERSION(320)", "Delete MethodInvocation(321)", "Delete SimpleName: getLanguageVersion(322)", "Delete MethodInvocation(323)", "Delete ReturnStatement(324)", "Delete Block(325)", "Delete SimpleName: key(326)", "Delete SimpleName: equals(327)", "Delete StringLiteral: \"THREADING\"(328)", "Delete MethodInvocation(329)", "Delete NullLiteral(330)", "Delete ReturnStatement(331)", "Delete Block(332)", "Delete IfStatement(333)", "Delete IfStatement(334)", "Delete IfStatement(335)", "Delete IfStatement(336)", "Delete IfStatement(337)", "Delete IfStatement(338)", "Delete NullLiteral(339)", "Delete ReturnStatement(340)", "Delete Block(341)", "Delete MethodDeclaration(342)", "Delete TagElement: @inheritDoc(343)", "Delete TextElement:  (344)", "Delete TagElement(345)", "Delete Javadoc(346)", "Delete Modifier: public(347)", "Delete SimpleName: String(348)", "Delete SimpleType: String(349)", "Delete SimpleName: getProgram(350)", "Delete SimpleName: String(351)", "Delete SimpleType: String(352)", "Delete Dimension(353)", "Delete ArrayType: String[](354)", "Delete SimpleName: statements(355)", "Delete SingleVariableDeclaration(356)", "Delete SimpleName: StringBuilder(357)", "Delete SimpleType: StringBuilder(358)", "Delete SimpleName: sb(359)", "Delete SimpleName: StringBuilder(360)", "Delete SimpleType: StringBuilder(361)", "Delete ClassInstanceCreation(362)", "Delete VariableDeclarationFragment(363)", "Delete VariableDeclarationStatement(364)", "Delete SimpleName: String(365)", "Delete SimpleType: String(366)", "Delete SimpleName: statement(367)", "Delete SingleVariableDeclaration(368)", "Delete SimpleName: statements(369)", "Delete SimpleName: sb(370)", "Delete SimpleName: append(371)", "Delete SimpleName: JexlEngine(372)", "Delete SimpleName: cleanExpression(373)", "Delete SimpleName: statement(374)", "Delete MethodInvocation(375)", "Delete MethodInvocation(376)", "Delete ExpressionStatement(377)", "Delete SimpleName: statement(378)", "Delete SimpleName: endsWith(379)", "Delete StringLiteral: \";\"(380)", "Delete MethodInvocation(381)", "Delete PrefixExpression: !(382)", "Delete SimpleName: sb(383)", "Delete SimpleName: append(384)", "Delete CharacterLiteral: ';'(385)", "Delete MethodInvocation(386)", "Delete ExpressionStatement(387)", "Delete Block(388)", "Delete IfStatement(389)", "Delete Block(390)", "Delete EnhancedForStatement(391)", "Delete SimpleName: sb(392)", "Delete SimpleName: toString(393)", "Delete MethodInvocation(394)", "Delete ReturnStatement(395)", "Delete Block(396)", "Delete MethodDeclaration(397)", "Delete TagElement: @inheritDoc(398)", "Delete TextElement:  (399)", "Delete TagElement(400)", "Delete Javadoc(401)", "Delete Modifier: public(402)", "Delete SimpleName: ScriptEngine(403)", "Delete SimpleType: ScriptEngine(404)", "Delete SimpleName: getScriptEngine(405)", "Delete SimpleName: JexlScriptEngine(406)", "Delete SimpleType: JexlScriptEngine(407)", "Delete SimpleName: engine(408)", "Delete SimpleName: JexlScriptEngine(409)", "Delete SimpleType: JexlScriptEngine(410)", "Delete ThisExpression(411)", "Delete ClassInstanceCreation(412)", "Delete VariableDeclarationFragment(413)", "Delete VariableDeclarationStatement(414)", "Delete SimpleName: engine(415)", "Delete ReturnStatement(416)", "Delete Block(417)", "Delete MethodDeclaration(418)", "Delete TypeDeclaration: class(419)"]}}, {"Main_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.BufferedReader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.File", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.InputStreamReader", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: print", "DEL SimpleName: context", "DEL Block", "DEL ArrayType: String[]", "DEL TextElement: ParseExceptions and JexlExceptions are logged, and do not cause the application to exit.", "DEL IfStatement", "DEL TextElement: If a single argument is present, it is treated as a filename of a JEXL", "DEL SimpleType: Object", "DEL SimpleName: evaluate", "DEL ExpressionStatement", "DEL SimpleName: JexlException", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: script", "DEL SimpleName: value", "DEL Modifier: static", "DEL SimpleName: args", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL TextElement: Test application for JEXL.", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: console", "DEL ArrayAccess", "DEL SimpleType: JexlException", "DEL SimpleName: Exception", "DEL SimpleName: Main", "DEL CatchClause", "DEL SimpleName: context", "DEL TextElement: Test application for JEXL", "DEL SimpleName: InputStreamReader", "DEL SimpleName: Script", "DEL SimpleName: line", "DEL MethodInvocation", "DEL QualifiedName: System.out", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL QualifiedName: System.out", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL QualifiedName: System.out", "DEL SimpleName: value", "DEL SimpleType: JexlContext", "DEL SimpleName: Expression", "DEL SimpleName: value", "DEL Modifier: public", "DEL SimpleName: context", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: engine", "DEL SimpleName: line", "DEL SimpleType: JexlEngine", "DEL Block", "DEL SimpleType: MapContext", "DEL StringLiteral: \"args\"", "DEL TextElement: This is done so that interactive testing is easier.", "DEL VariableDeclarationStatement", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL SimpleType: BufferedReader", "DEL MethodInvocation", "DEL SimpleName: console", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: println", "DEL SimpleName: main", "DEL QualifiedName: args.length", "DEL SimpleName: MapContext", "DEL SimpleName: value", "DEL VariableDeclarationFragment", "DEL SimpleName: args", "DEL ExpressionStatement", "DEL SimpleType: BufferedReader", "DEL SimpleName: execute", "DEL SimpleName: println", "DEL TagElement: @throws", "DEL SimpleName: args", "DEL SimpleName: JexlEngine", "DEL SimpleName: line", "DEL SimpleName: BufferedReader", "DEL SimpleType: InputStreamReader", "DEL SimpleType: Expression", "DEL QualifiedName: System.out", "DEL MethodInvocation", "DEL QualifiedName: System.out", "DEL InfixExpression: ==", "DEL SimpleType: JexlEngine", "DEL SimpleName: println", "DEL TextElement:  (optional) filename to execute. Stored in the args variable.", "DEL ExpressionStatement", "DEL SimpleName: createScript", "DEL SimpleName: print", "DEL ClassInstanceCreation", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationFragment", "DEL TryStatement", "DEL StringLiteral: \"Return value: \"", "DEL ExpressionStatement", "DEL SimpleName: File", "DEL SimpleName: String", "DEL NumberLiteral: 1", "DEL WhileStatement", "DEL ClassInstanceCreation", "DEL SimpleName: e", "DEL PrimitiveType: void", "DEL SimpleName: context", "DEL SimpleType: Exception", "DEL Modifier: public", "DEL SimpleName: JexlContext", "DEL SimpleName: script", "DEL SimpleName: e", "DEL SimpleName: set", "DEL Dimension", "DEL StringLiteral: \"> \"", "DEL MethodInvocation", "DEL SimpleName: expression", "DEL StringLiteral: \"Return value: \"", "DEL TagElement", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL SimpleName: getLocalizedMessage", "DEL TagElement: @since", "DEL TextElement: Otherwise, lines are read from standard input and evaluated.", "DEL InfixExpression: !=", "DEL Javadoc", "DEL SimpleType: Script", "DEL SimpleName: BufferedReader", "DEL InfixExpression: +", "DEL SimpleName: expression", "DEL MethodDeclaration", "DEL StringLiteral: \"> \"", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: JexlEngine", "DEL VariableDeclarationStatement", "DEL SimpleName: createExpression", "DEL Block", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: args", "DEL SimpleName: Exception", "DEL InfixExpression: +", "DEL SimpleName: readLine", "DEL TextElement:  2.0", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL QualifiedName: System.in", "DEL VariableDeclarationFragment", "DEL SimpleName: engine", "DEL TypeDeclaration: class", "DEL TextElement: script to be executed as a script. Any exceptions terminate the application.", "DEL SimpleType: File", "DEL TextElement:  if parsing or IO fail", "DEL SimpleName: engine"]}]}}, {"Main_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.BufferedReader(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.io.File(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.io.InputStreamReader(6)", "Delete ImportDeclaration(7)", "Delete TextElement: Test application for JEXL.(8)", "Delete TagElement(9)", "Delete TextElement:  2.0(10)", "Delete TagElement: @since(11)", "Delete Javadoc(12)", "Delete Modifier: public(13)", "Delete SimpleName: Main(14)", "Delete TextElement: Test application for JEXL(15)", "Delete TextElement: If a single argument is present, it is treated as a filename of a JEXL(16)", "Delete TextElement: script to be executed as a script. Any exceptions terminate the application.(17)", "Delete TextElement: Otherwise, lines are read from standard input and evaluated.(18)", "Delete TextElement: ParseExceptions and JexlExceptions are logged, and do not cause the application to exit.(19)", "Delete TextElement: This is done so that interactive testing is easier.(20)", "Delete TagElement(21)", "Delete SimpleName: args(22)", "Delete TextElement:  (optional) filename to execute. Stored in the args variable.(23)", "Delete TagElement: @param(24)", "Delete SimpleName: Exception(25)", "Delete TextElement:  if parsing or IO fail(26)", "Delete TagElement: @throws(27)", "Delete Javadoc(28)", "Delete Modifier: public(29)", "Delete Modifier: static(30)", "Delete PrimitiveType: void(31)", "Delete SimpleName: main(32)", "Delete SimpleName: String(33)", "Delete SimpleType: String(34)", "Delete Dimension(35)", "Delete ArrayType: String[](36)", "Delete SimpleName: args(37)", "Delete SingleVariableDeclaration(38)", "Delete SimpleName: Exception(39)", "Delete SimpleType: Exception(40)", "Delete SimpleName: JexlEngine(41)", "Delete SimpleType: JexlEngine(42)", "Delete SimpleName: engine(43)", "Delete SimpleName: JexlEngine(44)", "Delete SimpleType: JexlEngine(45)", "Delete ClassInstanceCreation(46)", "Delete VariableDeclarationFragment(47)", "Delete VariableDeclarationStatement(48)", "Delete SimpleName: JexlContext(49)", "Delete SimpleType: JexlContext(50)", "Delete SimpleName: context(51)", "Delete SimpleName: MapContext(52)", "Delete SimpleType: MapContext(53)", "Delete ClassInstanceCreation(54)", "Delete VariableDeclarationFragment(55)", "Delete VariableDeclarationStatement(56)", "Delete SimpleName: context(57)", "Delete SimpleName: set(58)", "Delete StringLiteral: \"args\"(59)", "Delete SimpleName: args(60)", "Delete MethodInvocation(61)", "Delete ExpressionStatement(62)", "Delete QualifiedName: args.length(63)", "Delete NumberLiteral: 1(64)", "Delete InfixExpression: ==(65)", "Delete SimpleName: Script(66)", "Delete SimpleType: Script(67)", "Delete SimpleName: script(68)", "Delete SimpleName: engine(69)", "Delete SimpleName: createScript(70)", "Delete SimpleName: File(71)", "Delete SimpleType: File(72)", "Delete SimpleName: args(73)", "Delete NumberLiteral: 0(74)", "Delete ArrayAccess(75)", "Delete ClassInstanceCreation(76)", "Delete MethodInvocation(77)", "Delete VariableDeclarationFragment(78)", "Delete VariableDeclarationStatement(79)", "Delete SimpleName: Object(80)", "Delete SimpleType: Object(81)", "Delete SimpleName: value(82)", "Delete SimpleName: script(83)", "Delete SimpleName: execute(84)", "Delete SimpleName: context(85)", "Delete MethodInvocation(86)", "Delete VariableDeclarationFragment(87)", "Delete VariableDeclarationStatement(88)", "Delete QualifiedName: System.out(89)", "Delete SimpleName: println(90)", "Delete StringLiteral: \"Return value: \"(91)", "Delete SimpleName: value(92)", "Delete InfixExpression: +(93)", "Delete MethodInvocation(94)", "Delete ExpressionStatement(95)", "Delete Block(96)", "Delete SimpleName: BufferedReader(97)", "Delete SimpleType: BufferedReader(98)", "Delete SimpleName: console(99)", "Delete SimpleName: BufferedReader(100)", "Delete SimpleType: BufferedReader(101)", "Delete SimpleName: InputStreamReader(102)", "Delete SimpleType: InputStreamReader(103)", "Delete QualifiedName: System.in(104)", "Delete ClassInstanceCreation(105)", "Delete ClassInstanceCreation(106)", "Delete VariableDeclarationFragment(107)", "Delete VariableDeclarationStatement(108)", "Delete SimpleName: String(109)", "Delete SimpleType: String(110)", "Delete SimpleName: line(111)", "Delete VariableDeclarationFragment(112)", "Delete VariableDeclarationStatement(113)", "Delete QualifiedName: System.out(114)", "Delete SimpleName: print(115)", "Delete StringLiteral: \"> \"(116)", "Delete MethodInvocation(117)", "Delete ExpressionStatement(118)", "Delete NullLiteral(119)", "Delete SimpleName: line(120)", "Delete SimpleName: console(121)", "Delete SimpleName: readLine(122)", "Delete MethodInvocation(123)", "Delete Assignment: =(124)", "Delete ParenthesizedExpression(125)", "Delete InfixExpression: !=(126)", "Delete SimpleName: Expression(127)", "Delete SimpleType: Expression(128)", "Delete SimpleName: expression(129)", "Delete SimpleName: engine(130)", "Delete SimpleName: createExpression(131)", "Delete SimpleName: line(132)", "Delete MethodInvocation(133)", "Delete VariableDeclarationFragment(134)", "Delete VariableDeclarationStatement(135)", "Delete SimpleName: Object(136)", "Delete SimpleType: Object(137)", "Delete SimpleName: value(138)", "Delete SimpleName: expression(139)", "Delete SimpleName: evaluate(140)", "Delete SimpleName: context(141)", "Delete MethodInvocation(142)", "Delete VariableDeclarationFragment(143)", "Delete VariableDeclarationStatement(144)", "Delete QualifiedName: System.out(145)", "Delete SimpleName: println(146)", "Delete StringLiteral: \"Return value: \"(147)", "Delete SimpleName: value(148)", "Delete InfixExpression: +(149)", "Delete MethodInvocation(150)", "Delete ExpressionStatement(151)", "Delete Block(152)", "Delete SimpleName: JexlException(153)", "Delete SimpleType: JexlException(154)", "Delete SimpleName: e(155)", "Delete SingleVariableDeclaration(156)", "Delete QualifiedName: System.out(157)", "Delete SimpleName: println(158)", "Delete SimpleName: e(159)", "Delete SimpleName: getLocalizedMessage(160)", "Delete MethodInvocation(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete Block(164)", "Delete CatchClause(165)", "Delete TryStatement(166)", "Delete QualifiedName: System.out(167)", "Delete SimpleName: print(168)", "Delete StringLiteral: \"> \"(169)", "Delete MethodInvocation(170)", "Delete ExpressionStatement(171)", "Delete Block(172)", "Delete WhileStatement(173)", "Delete Block(174)", "Delete IfStatement(175)", "Delete Block(176)", "Delete MethodDeclaration(177)", "Delete TypeDeclaration: class(178)"]}}, {"HashMapContext_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl.context", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl.JexlContext", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: Map", "DEL Modifier: public", "DEL SimpleType: String", "DEL Block", "DEL TagElement: @inheritDoc", "DEL Modifier: public", "DEL TextElement: Implementation of JexlContext based on a HashMap.", "DEL SimpleName: HashMapContext", "DEL SimpleName: vars", "DEL ParameterizedType: HashMap<String,Object>", "DEL MethodInvocation", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleType: String", "DEL SimpleName: HashMap", "DEL FieldDeclaration", "DEL SimpleType: Object", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleType: Object", "DEL TypeDeclaration: class", "DEL TagElement", "DEL PrimitiveType: long", "DEL SimpleName: vars", "DEL SingleVariableDeclaration", "DEL SimpleType: HashMap", "DEL ExpressionStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement:  $Id$", "DEL SimpleName: setVars", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: clear", "DEL SimpleName: Object", "DEL SimpleType: Map", "DEL Javadoc", "DEL SimpleName: getVars", "DEL SimpleName: putAll", "DEL MethodDeclaration", "DEL Modifier: final", "DEL TagElement", "DEL PrimitiveType: void", "DEL Modifier: private", "DEL TagElement", "DEL SimpleName: Object", "DEL Block", "DEL SimpleType: String", "DEL SimpleType: JexlContext", "DEL SimpleName: Map", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: String", "DEL TextElement: serialization version id jdk13 generated. ", "DEL NumberLiteral: 5715964743204418854L", "DEL SimpleName: JexlContext", "DEL Modifier: static", "DEL SimpleType: Object", "DEL Javadoc", "DEL ParameterizedType: Map<String,Object>", "DEL SimpleName: Object", "DEL SimpleName: String", "DEL TagElement: @version", "DEL SimpleName: serialVersionUID", "DEL TextElement:  1.0", "DEL ReturnStatement", "DEL TagElement: @inheritDoc", "DEL Javadoc", "DEL TagElement", "DEL TagElement: @since", "DEL SimpleName: Map"]}]}}, {"HashMapContext_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl.context(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.apache.commons.jexl.JexlContext(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.HashMap(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Map(6)", "Delete ImportDeclaration(7)", "Delete TextElement: Implementation of JexlContext based on a HashMap.(8)", "Delete TagElement(9)", "Delete TextElement:  1.0(10)", "Delete TagElement: @since(11)", "Delete TextElement:  $Id$(12)", "Delete TagElement: @version(13)", "Delete Javadoc(14)", "Delete Modifier: public(15)", "Delete SimpleName: HashMapContext(16)", "Delete SimpleName: HashMap(17)", "Delete SimpleType: HashMap(18)", "Delete SimpleName: String(19)", "Delete SimpleType: String(20)", "Delete SimpleName: Object(21)", "Delete SimpleType: Object(22)", "Delete ParameterizedType: HashMap<String,Object>(23)", "Delete SimpleName: JexlContext(24)", "Delete SimpleType: JexlContext(25)", "Delete TextElement: serialization version id jdk13 generated. (26)", "Delete TagElement(27)", "Delete Javadoc(28)", "Delete Modifier: private(29)", "Delete Modifier: static(30)", "Delete Modifier: final(31)", "Delete PrimitiveType: long(32)", "Delete SimpleName: serialVersionUID(33)", "Delete NumberLiteral: 5715964743204418854L(34)", "Delete VariableDeclarationFragment(35)", "Delete FieldDeclaration(36)", "Delete TagElement: @inheritDoc(37)", "Delete TagElement(38)", "Delete Javadoc(39)", "Delete Modifier: public(40)", "Delete PrimitiveType: void(41)", "Delete SimpleName: setVars(42)", "Delete SimpleName: Map(43)", "Delete SimpleType: Map(44)", "Delete SimpleName: String(45)", "Delete SimpleType: String(46)", "Delete SimpleName: Object(47)", "Delete SimpleType: Object(48)", "Delete ParameterizedType: Map<String,Object>(49)", "Delete SimpleName: vars(50)", "Delete SingleVariableDeclaration(51)", "Delete SimpleName: clear(52)", "Delete MethodInvocation(53)", "Delete ExpressionStatement(54)", "Delete SimpleName: putAll(55)", "Delete SimpleName: vars(56)", "Delete MethodInvocation(57)", "Delete ExpressionStatement(58)", "Delete Block(59)", "Delete MethodDeclaration(60)", "Delete TagElement: @inheritDoc(61)", "Delete TagElement(62)", "Delete Javadoc(63)", "Delete Modifier: public(64)", "Delete SimpleName: Map(65)", "Delete SimpleType: Map(66)", "Delete SimpleName: String(67)", "Delete SimpleType: String(68)", "Delete SimpleName: Object(69)", "Delete SimpleType: Object(70)", "Delete ParameterizedType: Map<String,Object>(71)", "Delete SimpleName: getVars(72)", "Delete ThisExpression(73)", "Delete ReturnStatement(74)", "Delete Block(75)", "Delete MethodDeclaration(76)", "Delete TypeDeclaration: class(77)"]}}, {"ClassMap_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal.introspection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Modifier", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Map", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.logging.Log", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: log", "DEL Block", "DEL NumberLiteral: 13", "DEL ClassInstanceCreation", "DEL SimpleName: i", "DEL TextElement: Recurses up class hierarchy to get all super classes.", "DEL SimpleName: getFieldNames", "DEL TypeLiteral", "DEL SimpleName: field", "DEL QualifiedName: Long.TYPE", "DEL VariableDeclarationFragment", "DEL TextElement: This is the cache to store and look up the method information.", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: names", "DEL Modifier: static", "DEL SimpleName: classToReflect", "DEL TextElement: A cache of introspection information for a specific class instance.", "DEL Block", "DEL SimpleName: MethodCache", "DEL StringLiteral: \"While accessing methods of \"", "DEL SimpleName: iface", "DEL TextElement:  the array of methods (null or non-empty)", "DEL WildcardType: ?", "DEL WildcardType: ?", "DEL SimpleName: getMethodNames", "DEL VariableDeclarationStatement", "DEL ArrayType: Method[]", "DEL Modifier: private", "DEL TextElement: primitive type signature to the corresponding Object type so", "DEL WildcardType: ?", "DEL TextElement: The initial size of the primitive conversion map. ", "DEL TextElement: case, we return it.", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL SimpleName: cache", "DEL TextElement: Find a Method using the method name and parameter objects.", "DEL MethodDeclaration", "DEL SimpleName: cache", "DEL SimpleType: Class", "DEL SimpleName: log", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: log", "DEL TagElement: @param", "DEL SimpleName: HashMap", "DEL Modifier: static", "DEL SimpleName: ae", "DEL TagElement: @param", "DEL TextElement: Converts a primitive type to its corresponding class.", "DEL ExpressionStatement", "DEL SimpleName: methodMap", "DEL SimpleType: Method", "DEL SimpleType: MethodKey.AmbiguousException", "DEL SimpleName: classToReflect", "DEL SimpleType: String", "DEL IfStatement", "DEL SimpleType: Class", "DEL Assignment: =", "DEL TagElement", "DEL MethodDeclaration", "DEL TextElement:  the cache to fill", "DEL SimpleType: Class", "DEL IfStatement", "DEL TextElement: <p>", "DEL NumberLiteral: 0", "DEL TagElement", "DEL TagElement: @param", "DEL SimpleName: debug", "DEL VariableDeclarationFragment", "DEL SimpleName: put", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: method", "DEL SimpleName: PRIMITIVE_TYPES", "DEL IfStatement", "DEL SimpleName: get", "DEL ParameterizedType: List<Method>", "DEL TextElement:  the Log", "DEL SimpleType: String", "DEL TagElement: @param", "DEL SimpleName: aClass", "DEL SimpleType: Log", "DEL SimpleName: clazz", "DEL TagElement: @param", "DEL Block", "DEL Block", "DEL FieldDeclaration", "DEL TextElement:  the class to introspect", "DEL SimpleName: methodName", "DEL SynchronizedStatement", "DEL ArrayType: Method[]", "DEL SimpleName: log", "DEL TagElement: @param", "DEL Modifier: final", "DEL TextElement:  A Field object representing the field to invoke or null.", "DEL SimpleType: MethodKey", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL TagElement", "DEL SimpleName: methods", "DEL SimpleName: i", "DEL SimpleName: parm", "DEL TextElement: The cache miss marker method. ", "DEL SimpleName: MethodKey", "DEL WildcardType: ?", "DEL SimpleName: cacheEntry", "DEL ExpressionStatement", "DEL TextElement: correctly.", "DEL SimpleName: get", "DEL SimpleName: Log", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL CatchClause", "DEL TagElement", "DEL TextElement: If the argument type is primitive then we want to convert our", "DEL SimpleType: Long", "DEL TextElement:  the method to add", "DEL SimpleName: String", "DEL InfixExpression: +", "DEL SimpleName: methodCache", "DEL TextElement: Find a Field using its name.", "DEL MethodInvocation", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL TagElement: @since", "DEL SimpleName: add", "DEL SimpleName: fname", "DEL SimpleName: methodKey", "DEL SimpleName: methods", "DEL TextElement:  the array of field names", "DEL VariableDeclarationStatement", "DEL SimpleType: Class", "DEL TextElement:  the array of method names", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL TextElement:  the field name", "DEL SimpleType: Byte", "DEL SimpleName: isDebugEnabled", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: MethodMap", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL ParameterizedType: Class<?>", "DEL Modifier: private", "DEL Block", "DEL SimpleType: Map", "DEL WildcardType: ?", "DEL SimpleName: methods", "DEL TextElement: </p>", "DEL Javadoc", "DEL Modifier: static", "DEL ReturnStatement", "DEL SimpleName: aClass", "DEL SimpleName: method", "DEL SimpleName: Class", "DEL SimpleName: MethodKey", "DEL TryStatement", "DEL TextElement: <p>The clazz parameter <strong>must</strong> be this ClassMap key.</p>", "DEL SimpleName: Class", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: interfaces", "DEL SimpleName: methodName", "DEL SimpleName: Log", "DEL SimpleType: MethodCache", "DEL TagElement", "DEL SimpleName: put", "DEL SimpleType: Class", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: findMethod", "DEL TextElement: <p>", "DEL Modifier: private", "DEL SimpleName: cache", "DEL TagElement: @param", "DEL TextElement: This of course, applies to all 8 primitive types.", "DEL SimpleName: Class", "DEL SimpleName: getModifiers", "DEL TagElement: @param", "DEL Modifier: private", "DEL Block", "DEL SimpleName: ClassMap", "DEL MethodInvocation", "DEL Dimension", "DEL Block", "DEL SimpleName: modifiers", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: put", "DEL Javadoc", "DEL SimpleType: Class", "DEL Assignment: =", "DEL SimpleName: Character", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: PRIMITIVE_TYPES", "DEL Block", "DEL TagElement: @return", "DEL Block", "DEL SimpleType: HashMap", "DEL TagElement: @param", "DEL TextElement: Map of methods that are searchable according to method parameters to find a match.", "DEL Block", "DEL MethodInvocation", "DEL ParameterizedType: Map<String,Field>", "DEL TagElement: @param", "DEL SimpleName: put", "DEL SimpleName: Class", "DEL Modifier: private", "DEL Javadoc", "DEL CatchClause", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL SimpleName: put", "DEL SimpleName: Map", "DEL SimpleName: interfaces", "DEL MethodInvocation", "DEL SimpleType: SecurityException", "DEL SimpleName: classToReflect", "DEL SimpleName: methods", "DEL ExpressionStatement", "DEL SimpleName: methodMap", "DEL SimpleName: Modifier", "DEL WildcardType: ?", "DEL TextElement:  a newly allocated & filled up cache", "DEL PrimitiveType: int", "DEL SimpleName: fields", "DEL SimpleName: lm", "DEL SimpleName: String", "DEL SimpleName: get", "DEL SimpleType: Method", "DEL SimpleType: Field", "DEL MethodInvocation", "DEL SimpleName: methodName", "DEL SimpleName: i", "DEL SimpleType: String", "DEL SimpleName: get", "DEL MethodDeclaration", "DEL SimpleName: createFieldCache", "DEL SimpleName: PRIMITIVE_SIZE", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL SimpleName: put", "DEL ReturnStatement", "DEL TextElement: Cache of Methods, or CACHE_MISS, keyed by method", "DEL SimpleName: Method", "DEL VariableDeclarationStatement", "DEL SimpleName: classToReflect", "DEL TextElement: Since the invocation of the associated method is dynamic, there is no need (nor way) to differentiate between", "DEL Dimension", "DEL SimpleName: clazz", "DEL TextElement:  the seeked methods name", "DEL PostfixExpression: ++", "DEL SimpleName: key", "DEL Block", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleType: List", "DEL Javadoc", "DEL PrefixExpression: !", "DEL SimpleName: put", "DEL SimpleName: clazz", "DEL TagElement", "DEL SimpleName: getMethod", "DEL SimpleName: xio", "DEL SimpleName: MethodCache", "DEL ParameterizedType: Class<?>", "DEL SimpleName: MethodCache", "DEL SimpleName: methodKey", "DEL SimpleName: cache", "DEL Javadoc", "DEL TextElement: <p>", "DEL MethodDeclaration", "DEL Block", "DEL Modifier: static", "DEL SimpleType: String", "DEL InfixExpression: <", "DEL SimpleType: Field", "DEL Block", "DEL SimpleName: cacheEntry", "DEL ArrayCreation", "DEL SimpleName: Float", "DEL SimpleName: methodKey", "DEL SimpleName: lm", "DEL MethodDeclaration", "DEL Modifier: private", "DEL TextElement:  the logger.", "DEL Dimension", "DEL Dimension", "DEL SimpleType: Class", "DEL ClassInstanceCreation", "DEL TextElement: Gets the methods names cached by this map.", "DEL MethodInvocation", "DEL SimpleName: Method", "DEL SimpleName: clazz", "DEL PostfixExpression: ++", "DEL ForStatement", "DEL SimpleName: String", "DEL TagElement", "DEL SimpleName: Method", "DEL SimpleName: MethodKey", "DEL Javadoc", "DEL CatchClause", "DEL SimpleName: MethodMap", "DEL Dimension", "DEL SimpleName: supers", "DEL SimpleType: Log", "DEL SimpleName: cache", "DEL TextElement: <p>", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleType: MethodMap", "DEL SimpleName: log", "DEL SimpleType: MethodCache", "DEL TextElement: A method that returns itself used as a marker for cache miss,", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: get", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL TagElement: @param", "DEL SimpleType: MethodKey.AmbiguousException", "DEL SimpleName: i", "DEL SimpleName: populateMethodCacheWith", "DEL SingleVariableDeclaration", "DEL SimpleName: Field", "DEL InfixExpression: ==", "DEL TextElement:  A Method object representing the method to invoke or null.", "DEL SimpleName: methodKey", "DEL SimpleName: MethodCache", "DEL Javadoc", "DEL WildcardType: ?", "DEL SimpleType: MethodKey", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: methods", "DEL SimpleName: methodKey", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: Map", "DEL SimpleName: ClassMap", "DEL SimpleType: Short", "DEL SimpleName: cacheEntry", "DEL TextElement: introspection for methods with primitive types will work", "DEL SimpleName: Field", "DEL SimpleName: clazz", "DEL SimpleName: methodMap", "DEL NullLiteral", "DEL TagElement", "DEL Modifier: static", "DEL MethodInvocation", "DEL TextElement: Look in the methodMap for an entry.  If found,", "DEL SimpleType: Field", "DEL SimpleName: classToReflect", "DEL SimpleName: se", "DEL Block", "DEL QualifiedName: fields.length", "DEL SimpleType: MethodCache", "DEL IfStatement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: methodMap", "DEL SimpleName: Method", "DEL TextElement:  the cache to fill", "DEL SimpleName: MethodKey", "DEL SimpleName: Modifier", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: methodName", "DEL Block", "DEL InfixExpression: <", "DEL ReturnStatement", "DEL SimpleName: Class", "DEL Modifier: private", "DEL Block", "DEL SimpleName: key", "DEL SimpleName: parm", "DEL TypeLiteral", "DEL SimpleName: createMethodCache", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL EnhancedForStatement", "DEL SimpleName: fieldCache", "DEL TextElement: </p>", "DEL TextElement: </p>", "DEL SimpleName: methods", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TextElement: cache of fields. ", "DEL SimpleType: String", "DEL Dimension", "DEL TextElement: </p>", "DEL Block", "DEL SimpleName: toArray", "DEL SimpleName: lm", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL SimpleName: cacheMiss", "DEL SimpleName: log", "DEL TagElement", "DEL SimpleName: Modifier", "DEL SimpleType: Method", "DEL SimpleName: i", "DEL Javadoc", "DEL SynchronizedStatement", "DEL ParameterizedType: Map<MethodKey,Method>", "DEL VariableDeclarationStatement", "DEL SimpleName: prim", "DEL SimpleName: HashMap", "DEL TagElement: @see", "DEL SimpleName: get", "DEL TextElement: It stores the association between:", "DEL MethodInvocation", "DEL SynchronizedStatement", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL NullLiteral", "DEL SimpleName: iface", "DEL SimpleName: Class", "DEL PrimitiveType: void", "DEL ForStatement", "DEL ParameterizedType: Class<?>", "DEL Block", "DEL TagElement", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: methodMap", "DEL SimpleType: Class", "DEL SimpleName: methods", "DEL SimpleName: populateMethodCacheWith", "DEL Block", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL Modifier: static", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: Map", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: getDeclaredMethods", "DEL Modifier: private", "DEL Block", "DEL Modifier: final", "DEL SimpleName: populateMethodCacheWith", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL SimpleName: methodKey", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL SimpleName: PRIMITIVE_TYPES", "DEL ArrayAccess", "DEL TagElement: @return", "DEL SimpleName: populateMethodCacheWithInterface", "DEL Modifier: static", "DEL ArrayAccess", "DEL SimpleType: String", "DEL TextElement:  A Method object representing the method to invoke or null.", "DEL SimpleType: Method", "DEL SimpleName: Collections", "DEL SimpleName: methods", "DEL SimpleName: Field", "DEL QualifiedName: Float.TYPE", "DEL PostfixExpression: ++", "DEL ArrayType: Class<?>[]", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: i", "DEL NumberLiteral: 0", "DEL ParameterizedType: Map<String,Field>", "DEL TagElement: @param", "DEL SimpleType: Field", "DEL SimpleName: Method", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: cacheMiss", "DEL TextElement:  the map of fields (may be the empty map, can not be null)", "DEL SimpleName: method", "DEL ArrayType: Method[]", "DEL Block", "DEL ExpressionStatement", "DEL ParameterizedType: HashMap<String,Field>", "DEL ParameterizedType: Class<?>", "DEL TextElement:  When more than one method is a match for the parameters.", "DEL SimpleType: Method", "DEL SimpleName: cache", "DEL SimpleName: HashMap", "DEL TextElement: simply give up, or it'll be a Method, in which", "DEL SimpleName: prim", "DEL SimpleName: Byte", "DEL TextElement: that make up the parameters.", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: fields", "DEL SimpleName: i", "DEL SimpleName: isPublic", "DEL SimpleName: isEmpty", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleName: i", "DEL SimpleName: log", "DEL SimpleName: methods", "DEL SimpleType: MethodCache", "DEL ThrowStatement", "DEL Javadoc", "DEL StringLiteral: \"cacheMiss\"", "DEL NumberLiteral: 0", "DEL SimpleName: iface", "DEL SimpleName: Method", "DEL Modifier: final", "DEL Dimension", "DEL TextElement:  the interface to populate the cache from", "DEL SynchronizedStatement", "DEL SingleVariableDeclaration", "DEL TextElement: name and actual arguments used to find it.", "DEL SimpleType: MethodKey.AmbiguousException", "DEL SimpleName: findField", "DEL SimpleName: getModifiers", "DEL SimpleName: CACHE_MISS", "DEL Javadoc", "DEL TextElement: Adds a method to the map.", "DEL Modifier: final", "DEL SimpleName: Log", "DEL TagElement", "DEL SimpleName: String", "DEL SimpleName: i", "DEL SimpleName: cache", "DEL TypeLiteral", "DEL SimpleName: cache", "DEL MethodInvocation", "DEL SimpleName: prim", "DEL SimpleName: i", "DEL TextElement:  1.0", "DEL SingleVariableDeclaration", "DEL SimpleName: methodName", "DEL TypeLiteral", "DEL SimpleName: i", "DEL SimpleName: SecurityException", "DEL SimpleType: MethodKey", "DEL TypeLiteral", "DEL SimpleName: fieldCache", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: Method", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: MethodKey", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: isPublic", "DEL Modifier: static", "DEL TextElement: - a key made of a method name & an array of argument types.", "DEL MethodInvocation", "DEL SimpleName: fieldCache", "DEL TextElement:  the class to deconstruct.", "DEL VariableDeclarationFragment", "DEL SimpleName: se", "DEL VariableDeclarationStatement", "DEL Block", "DEL NullLiteral", "DEL TextElement: - a method.", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL Block", "DEL SimpleName: iface", "DEL SimpleName: getInterfaces", "DEL Javadoc", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: Method", "DEL IfStatement", "DEL SimpleName: aClass", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: Double", "DEL TagElement", "DEL SimpleName: log", "DEL ReturnStatement", "DEL SimpleName: log", "DEL TextElement: and introspect the method from the MethodMap.", "DEL SimpleName: PRIMITIVE_TYPES", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: log", "DEL SimpleName: put", "DEL VariableDeclarationFragment", "DEL SimpleType: HashMap", "DEL Javadoc", "DEL SimpleName: find", "DEL SimpleName: cacheEntry", "DEL SimpleType: Float", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: get", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: supers", "DEL SimpleName: createFieldCache", "DEL TryStatement", "DEL TextElement:  the class to cache", "DEL SimpleName: CACHE_MISS", "DEL PrimitiveType: void", "DEL SimpleName: Field", "DEL WildcardType: ?", "DEL WildcardType: ?", "DEL SimpleName: cache", "DEL SimpleName: put", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: clazz", "DEL Modifier: final", "DEL SimpleName: PRIMITIVE_SIZE", "DEL InfixExpression: !=", "DEL Modifier: private", "DEL SimpleName: parm", "DEL Initializer", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ParameterizedType: Class<?>", "DEL ArrayAccess", "DEL ParameterizedType: Class<?>", "DEL TagElement: @return", "DEL TagElement: @param", "DEL VariableDeclarationFragment", "DEL SimpleName: names", "DEL SimpleName: Field", "DEL TextElement: that our class, its parents and their implemented interfaces provide.", "DEL TextElement: Creates a map of all public fields of a given class.", "DEL Modifier: static", "DEL SimpleName: field", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: fieldCache", "DEL SimpleName: log", "DEL SimpleName: Class", "DEL SimpleName: MethodCache", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SingleVariableDeclaration", "DEL TextElement: Keys objects by an agregation of the method name and the classes", "DEL SimpleType: Class", "DEL TextElement:  the class to populate the cache from", "DEL Block", "DEL ArrayType: String[]", "DEL SimpleName: isPublic", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL TextElement:  a may-be primitive type class", "DEL SimpleType: Method", "DEL SimpleName: CACHE_MISS", "DEL QualifiedName: Byte.TYPE", "DEL Block", "DEL Modifier: final", "DEL SimpleName: put", "DEL SimpleName: i", "DEL ClassInstanceCreation", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL SimpleType: HashMap", "DEL MethodInvocation", "DEL SimpleName: log", "DEL TextElement: foo(int,int) & foo(Integer,Integer) since in practise, only the latter form will be used through a call.", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL Javadoc", "DEL SimpleName: cacheEntry", "DEL TextElement:  the equivalent object class ", "DEL InfixExpression: <", "DEL InfixExpression: >", "DEL SimpleType: String", "DEL TagElement: @return", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Class", "DEL SimpleName: methodName", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL ConditionalExpression", "DEL SimpleName: lm", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL ParameterizedType: Map<String,Field>", "DEL SingleVariableDeclaration", "DEL SimpleName: lm", "DEL SimpleType: Map", "DEL SimpleName: MethodKey", "DEL ParameterizedType: HashMap<Class<?>,Class<?>>", "DEL SimpleName: Class", "DEL SimpleType: String", "DEL SimpleName: methodKey", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: getSuperclass", "DEL SimpleName: Map", "DEL SimpleName: classToReflect", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: Field", "DEL NullLiteral", "DEL ParameterizedType: Class<?>", "DEL IfStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement: allows the underlying cache map to be strongly typed.", "DEL TagElement: @param", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleName: keySet", "DEL SimpleName: Class", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL SimpleName: Class", "DEL ForStatement", "DEL SimpleName: methodMap", "DEL SimpleName: Method", "DEL SimpleName: createMethodCache", "DEL SimpleName: cache", "DEL SimpleName: put", "DEL TagElement: @return", "DEL SimpleType: Log", "DEL SimpleName: field", "DEL SimpleName: Method", "DEL TagElement: @return", "DEL TextElement: Gets all the methods with a given name from this map.", "DEL VariableDeclarationExpression", "DEL TypeLiteral", "DEL SimpleName: Log", "DEL TextElement: <p>", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: put", "DEL SimpleName: size", "DEL ArrayType: String[]", "DEL SimpleName: List", "DEL ParameterizedType: Class<?>", "DEL SimpleName: MethodCache", "DEL Dimension", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL Block", "DEL TextElement:  the class to introspect", "DEL QualifiedName: Double.TYPE", "DEL QualifiedName: interfaces.length", "DEL TagElement: @return", "DEL SimpleName: methodCache", "DEL ParameterizedType: Class<?>", "DEL TextElement: Gets the field names cached by this map.", "DEL TextElement:  itself as a method", "DEL FieldDeclaration", "DEL TextElement:  the Log", "DEL TagElement: @return", "DEL NullLiteral", "DEL VariableDeclarationExpression", "DEL QualifiedName: Short.TYPE", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL TypeDeclaration: class", "DEL MethodDeclaration", "DEL SimpleType: Map", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL SimpleName: names", "DEL SimpleType: String", "DEL SimpleName: methods", "DEL SimpleName: methodKey", "DEL NullLiteral", "DEL TagElement: @throws", "DEL InfixExpression: &&", "DEL SimpleName: get", "DEL SimpleName: Exception", "DEL Javadoc", "DEL TypeLiteral", "DEL SimpleName: fname", "DEL SimpleType: Method", "DEL SimpleName: size", "DEL TagElement", "DEL SimpleName: clazz", "DEL ParameterizedType: HashMap<MethodKey,Method>", "DEL FieldDeclaration", "DEL SimpleName: PRIMITIVE_TYPES", "DEL TextElement: </p>", "DEL ExpressionStatement", "DEL ParameterizedType: Class<?>", "DEL ExpressionStatement", "DEL SimpleName: put", "DEL TextElement: Gets all the method names from this map.", "DEL MethodInvocation", "DEL SimpleName: parm", "DEL SimpleName: modifiers", "DEL SimpleName: ae", "DEL TagElement: @return", "DEL TextElement: Find a Method using the method name and parameter objects.", "DEL Block", "DEL VariableDeclarationFragment", "DEL QualifiedName: Boolean.TYPE", "DEL ArrayType: Field[]", "DEL TextElement:  the array of methods", "DEL MethodInvocation", "DEL SimpleName: cache", "DEL SimpleName: toArray", "DEL Javadoc", "DEL SimpleName: methodMap", "DEL Block", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: PRIMITIVE_TYPES", "DEL SimpleName: get", "DEL SimpleType: MethodKey", "DEL SimpleName: iface", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleName: populateMethodCacheWithInterface", "DEL SimpleName: put", "DEL Block", "DEL SimpleName: clazz", "DEL SimpleName: method", "DEL SimpleName: methodKey", "DEL VariableDeclarationStatement", "DEL TextElement:  the array of method name", "DEL SimpleName: cache", "DEL SimpleType: String", "DEL TextElement:  the method key", "DEL Block", "DEL TagElement", "DEL SimpleName: Long", "DEL TagElement", "DEL ArrayType: Method[]", "DEL SimpleType: Method", "DEL SimpleName: cacheEntry", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL Modifier: final", "DEL MethodDeclaration", "DEL Modifier: final", "DEL SimpleType: MethodKey", "DEL SimpleName: Method", "DEL SimpleName: Boolean", "DEL VariableDeclarationStatement", "DEL SimpleName: getInterfaces", "DEL TextElement: it'll either be a CACHE_MISS, in which case we", "DEL Modifier: final", "DEL SimpleName: String", "DEL SimpleName: fname", "DEL TextElement: The method cache.", "DEL SimpleType: Map", "DEL ReturnStatement", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: Field", "DEL SimpleName: Map", "DEL SimpleName: key", "DEL SimpleName: getModifiers", "DEL ReturnStatement", "DEL TextElement: </p>", "DEL ForStatement", "DEL SimpleName: Integer", "DEL ExpressionStatement", "DEL TextElement: </p>", "DEL SimpleName: cache", "DEL ExpressionStatement", "DEL SimpleName: cache", "DEL SimpleType: Integer", "DEL Modifier: static", "DEL SimpleName: methodMap", "DEL TextElement:  When more than one method is a match for the parameters.", "DEL TagElement", "DEL Block", "DEL VariableDeclarationExpression", "DEL Modifier: final", "DEL SimpleType: Method", "DEL SimpleType: Character", "DEL SimpleName: classToReflect", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SimpleType: String", "DEL Javadoc", "DEL SimpleType: MethodCache", "DEL SimpleName: Class", "DEL PrimitiveType: int", "DEL MethodDeclaration", "DEL TextElement: Gets all the methods with a given name from this map.", "DEL SimpleType: Log", "DEL SimpleType: Double", "DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL PrimitiveType: int", "DEL SimpleName: emptyMap", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SimpleName: Method", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: Originally taken from the Velocity tree so we can be self-sufficient.", "DEL SimpleType: Class", "DEL SimpleName: fieldCache", "DEL SimpleType: MethodCache", "DEL VariableDeclarationFragment", "DEL SimpleName: log", "DEL SimpleType: MethodKey", "DEL SimpleType: Class", "DEL SimpleName: Method", "DEL TagElement", "DEL SimpleName: getName", "DEL TextElement: <p>", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: cacheEntry", "DEL SimpleName: Class", "DEL TagElement: @return", "DEL SimpleName: methodCache", "DEL ArrayType: String[]", "DEL TextElement: The primitive type to class conversion map. ", "DEL SimpleName: get", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL SimpleName: Method", "DEL ParameterizedType: Map<Class<?>,Class<?>>", "DEL TagElement: @param", "DEL TryStatement", "DEL ParameterizedType: Class<?>", "DEL ParameterizedType: Class<?>", "DEL SimpleName: populateMethodCacheWithInterface", "DEL SimpleName: MethodKey", "DEL SimpleType: MethodCache", "DEL SimpleName: getFields", "DEL Modifier: private", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: String", "DEL Modifier: private", "DEL SimpleName: Field", "DEL TextElement: Populate the Map of direct hits. These are taken from all the public methods", "DEL QualifiedName: methods.length", "DEL SingleVariableDeclaration", "DEL TextElement:  the Log", "DEL SimpleName: clazz", "DEL TextElement: cache of methods. ", "DEL StringLiteral: \": \"", "DEL ParameterizedType: Class<?>", "DEL VariableDeclarationFragment", "DEL QualifiedName: Character.TYPE", "DEL SimpleName: primitiveClass", "DEL SimpleType: MethodMap", "DEL SimpleName: put", "DEL ArrayType: Class<?>[]", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Dimension", "DEL ExpressionStatement", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: Method", "DEL TextElement: If nothing is found, then we must actually go", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: method", "DEL SimpleType: Method", "DEL SimpleType: Boolean", "DEL TextElement: Standard constructor.", "DEL VariableDeclarationFragment", "DEL SimpleType: Field", "DEL FieldDeclaration", "DEL TextElement: Recurses up interface hierarchy to get all super interfaces.", "DEL TagElement", "DEL QualifiedName: Integer.TYPE", "DEL Block", "DEL TagElement", "DEL QualifiedName: supers.length", "DEL TagElement: @throws", "DEL Block", "DEL SimpleName: log", "DEL SimpleName: Method", "DEL ArrayType: String[]", "DEL ArrayCreation", "DEL ReturnStatement", "DEL SimpleName: methodKey", "DEL SimpleName: aClass", "DEL SingleVariableDeclaration", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleName: MethodCache", "DEL Dimension", "DEL Block", "DEL TypeLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: CACHE_MISS", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleType: Field", "DEL TextElement:  the method key", "DEL SimpleName: Short", "DEL SimpleName: classToReflect", "DEL SimpleName: MethodCache", "DEL SimpleName: methodMap", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL SimpleName: methodCache", "DEL Block", "DEL SimpleName: methodCache", "DEL TextElement:  the seeked methods name"]}]}}, {"ClassMap_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Field(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Modifier(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Collections(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.HashMap(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.List(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.Map(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.commons.logging.Log(16)", "Delete ImportDeclaration(17)", "Delete TextElement: A cache of introspection information for a specific class instance.(18)", "Delete TextElement: Keys objects by an agregation of the method name and the classes(19)", "Delete TextElement: that make up the parameters.(20)", "Delete TextElement: <p>(21)", "Delete TextElement: Originally taken from the Velocity tree so we can be self-sufficient.(22)", "Delete TextElement: </p>(23)", "Delete TagElement(24)", "Delete SimpleName: MethodKey(25)", "Delete TagElement: @see(26)", "Delete TextElement:  1.0(27)", "Delete TagElement: @since(28)", "Delete Javadoc(29)", "Delete Modifier: final(30)", "Delete SimpleName: ClassMap(31)", "Delete TextElement: cache of methods. (32)", "Delete TagElement(33)", "Delete Javadoc(34)", "Delete Modifier: private(35)", "Delete Modifier: final(36)", "Delete SimpleName: MethodCache(37)", "Delete SimpleType: MethodCache(38)", "Delete SimpleName: methodCache(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete TextElement: cache of fields. (42)", "Delete TagElement(43)", "Delete Javadoc(44)", "Delete Modifier: private(45)", "Delete Modifier: final(46)", "Delete SimpleName: Map(47)", "Delete SimpleType: Map(48)", "Delete SimpleName: String(49)", "Delete SimpleType: String(50)", "Delete SimpleName: Field(51)", "Delete SimpleType: Field(52)", "Delete ParameterizedType: Map<String,Field>(53)", "Delete SimpleName: fieldCache(54)", "Delete VariableDeclarationFragment(55)", "Delete FieldDeclaration(56)", "Delete TextElement: Standard constructor.(57)", "Delete TagElement(58)", "Delete SimpleName: aClass(59)", "Delete TextElement:  the class to deconstruct.(60)", "Delete TagElement: @param(61)", "Delete SimpleName: log(62)", "Delete TextElement:  the logger.(63)", "Delete TagElement: @param(64)", "Delete Javadoc(65)", "Delete SimpleName: ClassMap(66)", "Delete SimpleName: Class(67)", "Delete SimpleType: Class(68)", "Delete WildcardType: ?(69)", "Delete ParameterizedType: Class<?>(70)", "Delete SimpleName: aClass(71)", "Delete SingleVariableDeclaration(72)", "Delete SimpleName: Log(73)", "Delete SimpleType: Log(74)", "Delete SimpleName: log(75)", "Delete SingleVariableDeclaration(76)", "Delete SimpleName: methodCache(77)", "Delete SimpleName: createMethodCache(78)", "Delete SimpleName: aClass(79)", "Delete SimpleName: log(80)", "Delete MethodInvocation(81)", "Delete Assignment: =(82)", "Delete ExpressionStatement(83)", "Delete SimpleName: fieldCache(84)", "Delete SimpleName: createFieldCache(85)", "Delete SimpleName: aClass(86)", "Delete MethodInvocation(87)", "Delete Assignment: =(88)", "Delete ExpressionStatement(89)", "Delete Block(90)", "Delete MethodDeclaration(91)", "Delete TextElement: Find a Field using its name.(92)", "Delete TextElement: <p>The clazz parameter <strong>must</strong> be this ClassMap key.</p>(93)", "Delete TagElement(94)", "Delete SimpleName: clazz(95)", "Delete TextElement:  the class to introspect(96)", "Delete TagElement: @param(97)", "Delete SimpleName: fname(98)", "Delete TextElement:  the field name(99)", "Delete TagElement: @param(100)", "Delete TextElement:  A Field object representing the field to invoke or null.(101)", "Delete TagElement: @return(102)", "Delete Javadoc(103)", "Delete SimpleName: Field(104)", "Delete SimpleType: Field(105)", "Delete SimpleName: findField(106)", "Delete Modifier: final(107)", "Delete SimpleName: Class(108)", "Delete SimpleType: Class(109)", "Delete WildcardType: ?(110)", "Delete ParameterizedType: Class<?>(111)", "Delete SimpleName: clazz(112)", "Delete SingleVariableDeclaration(113)", "Delete Modifier: final(114)", "Delete SimpleName: String(115)", "Delete SimpleType: String(116)", "Delete SimpleName: fname(117)", "Delete SingleVariableDeclaration(118)", "Delete SimpleName: fieldCache(119)", "Delete SimpleName: get(120)", "Delete SimpleName: fname(121)", "Delete MethodInvocation(122)", "Delete ReturnStatement(123)", "Delete Block(124)", "Delete MethodDeclaration(125)", "Delete TextElement: Gets the field names cached by this map.(126)", "Delete TagElement(127)", "Delete TextElement:  the array of field names(128)", "Delete TagElement: @return(129)", "Delete Javadoc(130)", "Delete SimpleName: String(131)", "Delete SimpleType: String(132)", "Delete Dimension(133)", "Delete ArrayType: String[](134)", "Delete SimpleName: getFieldNames(135)", "Delete SimpleName: fieldCache(136)", "Delete SimpleName: keySet(137)", "Delete MethodInvocation(138)", "Delete SimpleName: toArray(139)", "Delete SimpleName: String(140)", "Delete SimpleType: String(141)", "Delete Dimension(142)", "Delete ArrayType: String[](143)", "Delete SimpleName: fieldCache(144)", "Delete SimpleName: size(145)", "Delete MethodInvocation(146)", "Delete ArrayCreation(147)", "Delete MethodInvocation(148)", "Delete ReturnStatement(149)", "Delete Block(150)", "Delete MethodDeclaration(151)", "Delete TextElement: Creates a map of all public fields of a given class.(152)", "Delete TagElement(153)", "Delete SimpleName: clazz(154)", "Delete TextElement:  the class to introspect(155)", "Delete TagElement: @param(156)", "Delete TextElement:  the map of fields (may be the empty map, can not be null)(157)", "Delete TagElement: @return(158)", "Delete Javadoc(159)", "Delete Modifier: private(160)", "Delete Modifier: static(161)", "Delete SimpleName: Map(162)", "Delete SimpleType: Map(163)", "Delete SimpleName: String(164)", "Delete SimpleType: String(165)", "Delete SimpleName: Field(166)", "Delete SimpleType: Field(167)", "Delete ParameterizedType: Map<String,Field>(168)", "Delete SimpleName: createFieldCache(169)", "Delete SimpleName: Class(170)", "Delete SimpleType: Class(171)", "Delete WildcardType: ?(172)", "Delete ParameterizedType: Class<?>(173)", "Delete SimpleName: clazz(174)", "Delete SingleVariableDeclaration(175)", "Delete SimpleName: Field(176)", "Delete SimpleType: Field(177)", "Delete Dimension(178)", "Delete ArrayType: Field[](179)", "Delete SimpleName: fields(180)", "Delete SimpleName: clazz(181)", "Delete SimpleName: getFields(182)", "Delete MethodInvocation(183)", "Delete VariableDeclarationFragment(184)", "Delete VariableDeclarationStatement(185)", "Delete QualifiedName: fields.length(186)", "Delete NumberLiteral: 0(187)", "Delete InfixExpression: >(188)", "Delete SimpleName: Map(189)", "Delete SimpleType: Map(190)", "Delete SimpleName: String(191)", "Delete SimpleType: String(192)", "Delete SimpleName: Field(193)", "Delete SimpleType: Field(194)", "Delete ParameterizedType: Map<String,Field>(195)", "Delete SimpleName: cache(196)", "Delete SimpleName: HashMap(197)", "Delete SimpleType: HashMap(198)", "Delete SimpleName: String(199)", "Delete SimpleType: String(200)", "Delete SimpleName: Field(201)", "Delete SimpleType: Field(202)", "Delete ParameterizedType: HashMap<String,Field>(203)", "Delete ClassInstanceCreation(204)", "Delete VariableDeclarationFragment(205)", "Delete VariableDeclarationStatement(206)", "Delete SimpleName: Field(207)", "Delete SimpleType: Field(208)", "Delete SimpleName: field(209)", "Delete SingleVariableDeclaration(210)", "Delete SimpleName: fields(211)", "Delete SimpleName: cache(212)", "Delete SimpleName: put(213)", "Delete SimpleName: field(214)", "Delete SimpleName: getName(215)", "Delete MethodInvocation(216)", "Delete SimpleName: field(217)", "Delete MethodInvocation(218)", "Delete ExpressionStatement(219)", "Delete Block(220)", "Delete EnhancedForStatement(221)", "Delete SimpleName: cache(222)", "Delete ReturnStatement(223)", "Delete Block(224)", "Delete SimpleName: Collections(225)", "Delete SimpleName: emptyMap(226)", "Delete MethodInvocation(227)", "Delete ReturnStatement(228)", "Delete Block(229)", "Delete IfStatement(230)", "Delete Block(231)", "Delete MethodDeclaration(232)", "Delete TextElement: Gets the methods names cached by this map.(233)", "Delete TagElement(234)", "Delete TextElement:  the array of method names(235)", "Delete TagElement: @return(236)", "Delete Javadoc(237)", "Delete SimpleName: String(238)", "Delete SimpleType: String(239)", "Delete Dimension(240)", "Delete ArrayType: String[](241)", "Delete SimpleName: getMethodNames(242)", "Delete SimpleName: methodCache(243)", "Delete SimpleName: names(244)", "Delete MethodInvocation(245)", "Delete ReturnStatement(246)", "Delete Block(247)", "Delete MethodDeclaration(248)", "Delete TextElement: Gets all the methods with a given name from this map.(249)", "Delete TagElement(250)", "Delete SimpleName: methodName(251)", "Delete TextElement:  the seeked methods name(252)", "Delete TagElement: @param(253)", "Delete TextElement:  the array of methods(254)", "Delete TagElement: @return(255)", "Delete Javadoc(256)", "Delete SimpleName: Method(257)", "Delete SimpleType: Method(258)", "Delete Dimension(259)", "Delete ArrayType: Method[](260)", "Delete SimpleName: get(261)", "Delete Modifier: final(262)", "Delete SimpleName: String(263)", "Delete SimpleType: String(264)", "Delete SimpleName: methodName(265)", "Delete SingleVariableDeclaration(266)", "Delete SimpleName: methodCache(267)", "Delete SimpleName: get(268)", "Delete SimpleName: methodName(269)", "Delete MethodInvocation(270)", "Delete ReturnStatement(271)", "Delete Block(272)", "Delete MethodDeclaration(273)", "Delete TextElement: Find a Method using the method name and parameter objects.(274)", "Delete TagElement(275)", "Delete SimpleName: key(276)", "Delete TextElement:  the method key(277)", "Delete TagElement: @param(278)", "Delete TextElement:  A Method object representing the method to invoke or null.(279)", "Delete TagElement: @return(280)", "Delete QualifiedName: MethodKey.AmbiguousException(281)", "Delete TextElement:  When more than one method is a match for the parameters.(282)", "Delete TagElement: @throws(283)", "Delete Javadoc(284)", "Delete SimpleName: Method(285)", "Delete SimpleType: Method(286)", "Delete SimpleName: findMethod(287)", "Delete Modifier: final(288)", "Delete SimpleName: MethodKey(289)", "Delete SimpleType: MethodKey(290)", "Delete SimpleName: key(291)", "Delete SingleVariableDeclaration(292)", "Delete QualifiedName: MethodKey.AmbiguousException(293)", "Delete SimpleType: MethodKey.AmbiguousException(294)", "Delete SimpleName: methodCache(295)", "Delete SimpleName: get(296)", "Delete SimpleName: key(297)", "Delete MethodInvocation(298)", "Delete ReturnStatement(299)", "Delete Block(300)", "Delete MethodDeclaration(301)", "Delete TextElement: Populate the Map of direct hits. These are taken from all the public methods(302)", "Delete TextElement: that our class, its parents and their implemented interfaces provide.(303)", "Delete TagElement(304)", "Delete SimpleName: classToReflect(305)", "Delete TextElement:  the class to cache(306)", "Delete TagElement: @param(307)", "Delete SimpleName: log(308)", "Delete TextElement:  the Log(309)", "Delete TagElement: @param(310)", "Delete TextElement:  a newly allocated & filled up cache(311)", "Delete TagElement: @return(312)", "Delete Javadoc(313)", "Delete Modifier: private(314)", "Delete Modifier: static(315)", "Delete SimpleName: MethodCache(316)", "Delete SimpleType: MethodCache(317)", "Delete SimpleName: createMethodCache(318)", "Delete SimpleName: Class(319)", "Delete SimpleType: Class(320)", "Delete WildcardType: ?(321)", "Delete ParameterizedType: Class<?>(322)", "Delete SimpleName: classToReflect(323)", "Delete SingleVariableDeclaration(324)", "Delete SimpleName: Log(325)", "Delete SimpleType: Log(326)", "Delete SimpleName: log(327)", "Delete SingleVariableDeclaration(328)", "Delete SimpleName: MethodCache(329)", "Delete SimpleType: MethodCache(330)", "Delete SimpleName: cache(331)", "Delete SimpleName: MethodCache(332)", "Delete SimpleType: MethodCache(333)", "Delete ClassInstanceCreation(334)", "Delete VariableDeclarationFragment(335)", "Delete VariableDeclarationStatement(336)", "Delete SimpleName: classToReflect(337)", "Delete NullLiteral(338)", "Delete InfixExpression: !=(339)", "Delete SimpleName: classToReflect(340)", "Delete SimpleName: classToReflect(341)", "Delete SimpleName: getSuperclass(342)", "Delete MethodInvocation(343)", "Delete Assignment: =(344)", "Delete SimpleName: Modifier(345)", "Delete SimpleName: isPublic(346)", "Delete SimpleName: classToReflect(347)", "Delete SimpleName: getModifiers(348)", "Delete MethodInvocation(349)", "Delete MethodInvocation(350)", "Delete SimpleName: populateMethodCacheWith(351)", "Delete SimpleName: cache(352)", "Delete SimpleName: classToReflect(353)", "Delete SimpleName: log(354)", "Delete MethodInvocation(355)", "Delete ExpressionStatement(356)", "Delete Block(357)", "Delete IfStatement(358)", "Delete SimpleName: Class(359)", "Delete SimpleType: Class(360)", "Delete WildcardType: ?(361)", "Delete ParameterizedType: Class<?>(362)", "Delete Dimension(363)", "Delete ArrayType: Class<?>[](364)", "Delete SimpleName: interfaces(365)", "Delete SimpleName: classToReflect(366)", "Delete SimpleName: getInterfaces(367)", "Delete MethodInvocation(368)", "Delete VariableDeclarationFragment(369)", "Delete VariableDeclarationStatement(370)", "Delete PrimitiveType: int(371)", "Delete SimpleName: i(372)", "Delete NumberLiteral: 0(373)", "Delete VariableDeclarationFragment(374)", "Delete VariableDeclarationExpression(375)", "Delete SimpleName: i(376)", "Delete QualifiedName: interfaces.length(377)", "Delete InfixExpression: <(378)", "Delete SimpleName: i(379)", "Delete PostfixExpression: ++(380)", "Delete SimpleName: populateMethodCacheWithInterface(381)", "Delete SimpleName: cache(382)", "Delete SimpleName: interfaces(383)", "Delete SimpleName: i(384)", "Delete ArrayAccess(385)", "Delete SimpleName: log(386)", "Delete MethodInvocation(387)", "Delete ExpressionStatement(388)", "Delete Block(389)", "Delete ForStatement(390)", "Delete Block(391)", "Delete ForStatement(392)", "Delete SimpleName: cache(393)", "Delete ReturnStatement(394)", "Delete Block(395)", "Delete MethodDeclaration(396)", "Delete TextElement: Recurses up interface hierarchy to get all super interfaces.(397)", "Delete TagElement(398)", "Delete SimpleName: cache(399)", "Delete TextElement:  the cache to fill(400)", "Delete TagElement: @param(401)", "Delete SimpleName: iface(402)", "Delete TextElement:  the interface to populate the cache from(403)", "Delete TagElement: @param(404)", "Delete SimpleName: log(405)", "Delete TextElement:  the Log(406)", "Delete TagElement: @param(407)", "Delete Javadoc(408)", "Delete Modifier: private(409)", "Delete Modifier: static(410)", "Delete PrimitiveType: void(411)", "Delete SimpleName: populateMethodCacheWithInterface(412)", "Delete SimpleName: MethodCache(413)", "Delete SimpleType: MethodCache(414)", "Delete SimpleName: cache(415)", "Delete SingleVariableDeclaration(416)", "Delete SimpleName: Class(417)", "Delete SimpleType: Class(418)", "Delete WildcardType: ?(419)", "Delete ParameterizedType: Class<?>(420)", "Delete SimpleName: iface(421)", "Delete SingleVariableDeclaration(422)", "Delete SimpleName: Log(423)", "Delete SimpleType: Log(424)", "Delete SimpleName: log(425)", "Delete SingleVariableDeclaration(426)", "Delete SimpleName: Modifier(427)", "Delete SimpleName: isPublic(428)", "Delete SimpleName: iface(429)", "Delete SimpleName: getModifiers(430)", "Delete MethodInvocation(431)", "Delete MethodInvocation(432)", "Delete SimpleName: populateMethodCacheWith(433)", "Delete SimpleName: cache(434)", "Delete SimpleName: iface(435)", "Delete SimpleName: log(436)", "Delete MethodInvocation(437)", "Delete ExpressionStatement(438)", "Delete Block(439)", "Delete IfStatement(440)", "Delete SimpleName: Class(441)", "Delete SimpleType: Class(442)", "Delete WildcardType: ?(443)", "Delete ParameterizedType: Class<?>(444)", "Delete Dimension(445)", "Delete ArrayType: Class<?>[](446)", "Delete SimpleName: supers(447)", "Delete SimpleName: iface(448)", "Delete SimpleName: getInterfaces(449)", "Delete MethodInvocation(450)", "Delete VariableDeclarationFragment(451)", "Delete VariableDeclarationStatement(452)", "Delete PrimitiveType: int(453)", "Delete SimpleName: i(454)", "Delete NumberLiteral: 0(455)", "Delete VariableDeclarationFragment(456)", "Delete VariableDeclarationExpression(457)", "Delete SimpleName: i(458)", "Delete QualifiedName: supers.length(459)", "Delete InfixExpression: <(460)", "Delete SimpleName: i(461)", "Delete PostfixExpression: ++(462)", "Delete SimpleName: populateMethodCacheWithInterface(463)", "Delete SimpleName: cache(464)", "Delete SimpleName: supers(465)", "Delete SimpleName: i(466)", "Delete ArrayAccess(467)", "Delete SimpleName: log(468)", "Delete MethodInvocation(469)", "Delete ExpressionStatement(470)", "Delete Block(471)", "Delete ForStatement(472)", "Delete Block(473)", "Delete MethodDeclaration(474)", "Delete TextElement: Recurses up class hierarchy to get all super classes.(475)", "Delete TagElement(476)", "Delete SimpleName: cache(477)", "Delete TextElement:  the cache to fill(478)", "Delete TagElement: @param(479)", "Delete SimpleName: clazz(480)", "Delete TextElement:  the class to populate the cache from(481)", "Delete TagElement: @param(482)", "Delete SimpleName: log(483)", "Delete TextElement:  the Log(484)", "Delete TagElement: @param(485)", "Delete Javadoc(486)", "Delete Modifier: private(487)", "Delete Modifier: static(488)", "Delete PrimitiveType: void(489)", "Delete SimpleName: populateMethodCacheWith(490)", "Delete SimpleName: MethodCache(491)", "Delete SimpleType: MethodCache(492)", "Delete SimpleName: cache(493)", "Delete SingleVariableDeclaration(494)", "Delete SimpleName: Class(495)", "Delete SimpleType: Class(496)", "Delete WildcardType: ?(497)", "Delete ParameterizedType: Class<?>(498)", "Delete SimpleName: clazz(499)", "Delete SingleVariableDeclaration(500)", "Delete SimpleName: Log(501)", "Delete SimpleType: Log(502)", "Delete SimpleName: log(503)", "Delete SingleVariableDeclaration(504)", "Delete SimpleName: Method(505)", "Delete SimpleType: Method(506)", "Delete Dimension(507)", "Delete ArrayType: Method[](508)", "Delete SimpleName: methods(509)", "Delete SimpleName: clazz(510)", "Delete SimpleName: getDeclaredMethods(511)", "Delete MethodInvocation(512)", "Delete VariableDeclarationFragment(513)", "Delete VariableDeclarationStatement(514)", "Delete PrimitiveType: int(515)", "Delete SimpleName: i(516)", "Delete NumberLiteral: 0(517)", "Delete VariableDeclarationFragment(518)", "Delete VariableDeclarationExpression(519)", "Delete SimpleName: i(520)", "Delete QualifiedName: methods.length(521)", "Delete InfixExpression: <(522)", "Delete SimpleName: i(523)", "Delete PostfixExpression: ++(524)", "Delete PrimitiveType: int(525)", "Delete SimpleName: modifiers(526)", "Delete SimpleName: methods(527)", "Delete SimpleName: i(528)", "Delete ArrayAccess(529)", "Delete SimpleName: getModifiers(530)", "Delete MethodInvocation(531)", "Delete VariableDeclarationFragment(532)", "Delete VariableDeclarationStatement(533)", "Delete SimpleName: Modifier(534)", "Delete SimpleName: isPublic(535)", "Delete SimpleName: modifiers(536)", "Delete MethodInvocation(537)", "Delete SimpleName: cache(538)", "Delete SimpleName: put(539)", "Delete SimpleName: methods(540)", "Delete SimpleName: i(541)", "Delete ArrayAccess(542)", "Delete MethodInvocation(543)", "Delete ExpressionStatement(544)", "Delete Block(545)", "Delete IfStatement(546)", "Delete Block(547)", "Delete ForStatement(548)", "Delete Block(549)", "Delete SimpleName: SecurityException(550)", "Delete SimpleType: SecurityException(551)", "Delete SimpleName: se(552)", "Delete SingleVariableDeclaration(553)", "Delete SimpleName: log(554)", "Delete SimpleName: isDebugEnabled(555)", "Delete MethodInvocation(556)", "Delete SimpleName: log(557)", "Delete SimpleName: debug(558)", "Delete StringLiteral: \"While accessing methods of \"(559)", "Delete SimpleName: clazz(560)", "Delete StringLiteral: \": \"(561)", "Delete InfixExpression: +(562)", "Delete SimpleName: se(563)", "Delete MethodInvocation(564)", "Delete ExpressionStatement(565)", "Delete Block(566)", "Delete IfStatement(567)", "Delete Block(568)", "Delete CatchClause(569)", "Delete TryStatement(570)", "Delete Block(571)", "Delete MethodDeclaration(572)", "Delete TextElement: This is the cache to store and look up the method information.(573)", "Delete TextElement: <p>(574)", "Delete TextElement: It stores the association between:(575)", "Delete TextElement: - a key made of a method name & an array of argument types.(576)", "Delete TextElement: - a method.(577)", "Delete TextElement: </p>(578)", "Delete TextElement: <p>(579)", "Delete TextElement: Since the invocation of the associated method is dynamic, there is no need (nor way) to differentiate between(580)", "Delete TextElement: foo(int,int) & foo(Integer,Integer) since in practise, only the latter form will be used through a call.(581)", "Delete TextElement: This of course, applies to all 8 primitive types.(582)", "Delete TextElement: </p>(583)", "Delete TagElement(584)", "Delete Javadoc(585)", "Delete Modifier: static(586)", "Delete Modifier: final(587)", "Delete SimpleName: MethodCache(588)", "Delete TextElement: A method that returns itself used as a marker for cache miss,(589)", "Delete TextElement: allows the underlying cache map to be strongly typed.(590)", "Delete TagElement(591)", "Delete TextElement:  itself as a method(592)", "Delete TagElement: @return(593)", "Delete Javadoc(594)", "Delete Modifier: public(595)", "Delete Modifier: static(596)", "Delete SimpleName: Method(597)", "Delete SimpleType: Method(598)", "Delete SimpleName: cacheMiss(599)", "Delete SimpleName: MethodCache(600)", "Delete SimpleType: MethodCache(601)", "Delete TypeLiteral(602)", "Delete SimpleName: getMethod(603)", "Delete StringLiteral: \"cacheMiss\"(604)", "Delete MethodInvocation(605)", "Delete ReturnStatement(606)", "Delete Block(607)", "Delete SimpleName: Exception(608)", "Delete SimpleType: Exception(609)", "Delete SimpleName: xio(610)", "Delete SingleVariableDeclaration(611)", "Delete NullLiteral(612)", "Delete ReturnStatement(613)", "Delete Block(614)", "Delete CatchClause(615)", "Delete TryStatement(616)", "Delete Block(617)", "Delete MethodDeclaration(618)", "Delete TextElement: The cache miss marker method. (619)", "Delete TagElement(620)", "Delete Javadoc(621)", "Delete Modifier: private(622)", "Delete Modifier: static(623)", "Delete Modifier: final(624)", "Delete SimpleName: Method(625)", "Delete SimpleType: Method(626)", "Delete SimpleName: CACHE_MISS(627)", "Delete SimpleName: cacheMiss(628)", "Delete MethodInvocation(629)", "Delete VariableDeclarationFragment(630)", "Delete FieldDeclaration(631)", "Delete TextElement: The initial size of the primitive conversion map. (632)", "Delete TagElement(633)", "Delete Javadoc(634)", "Delete Modifier: private(635)", "Delete Modifier: static(636)", "Delete Modifier: final(637)", "Delete PrimitiveType: int(638)", "Delete SimpleName: PRIMITIVE_SIZE(639)", "Delete NumberLiteral: 13(640)", "Delete VariableDeclarationFragment(641)", "Delete FieldDeclaration(642)", "Delete TextElement: The primitive type to class conversion map. (643)", "Delete TagElement(644)", "Delete Javadoc(645)", "Delete Modifier: private(646)", "Delete Modifier: static(647)", "Delete Modifier: final(648)", "Delete SimpleName: Map(649)", "Delete SimpleType: Map(650)", "Delete SimpleName: Class(651)", "Delete SimpleType: Class(652)", "Delete WildcardType: ?(653)", "Delete ParameterizedType: Class<?>(654)", "Delete SimpleName: Class(655)", "Delete SimpleType: Class(656)", "Delete WildcardType: ?(657)", "Delete ParameterizedType: Class<?>(658)", "Delete ParameterizedType: Map<Class<?>,Class<?>>(659)", "Delete SimpleName: PRIMITIVE_TYPES(660)", "Delete VariableDeclarationFragment(661)", "Delete FieldDeclaration(662)", "Delete Modifier: static(663)", "Delete SimpleName: PRIMITIVE_TYPES(664)", "Delete SimpleName: HashMap(665)", "Delete SimpleType: HashMap(666)", "Delete SimpleName: Class(667)", "Delete SimpleType: Class(668)", "Delete WildcardType: ?(669)", "Delete ParameterizedType: Class<?>(670)", "Delete SimpleName: Class(671)", "Delete SimpleType: Class(672)", "Delete WildcardType: ?(673)", "Delete ParameterizedType: Class<?>(674)", "Delete ParameterizedType: HashMap<Class<?>,Class<?>>(675)", "Delete SimpleName: PRIMITIVE_SIZE(676)", "Delete ClassInstanceCreation(677)", "Delete Assignment: =(678)", "Delete ExpressionStatement(679)", "Delete SimpleName: PRIMITIVE_TYPES(680)", "Delete SimpleName: put(681)", "Delete QualifiedName: Boolean.TYPE(682)", "Delete SimpleName: Boolean(683)", "Delete SimpleType: Boolean(684)", "Delete TypeLiteral(685)", "Delete MethodInvocation(686)", "Delete ExpressionStatement(687)", "Delete SimpleName: PRIMITIVE_TYPES(688)", "Delete SimpleName: put(689)", "Delete QualifiedName: Byte.TYPE(690)", "Delete SimpleName: Byte(691)", "Delete SimpleType: Byte(692)", "Delete TypeLiteral(693)", "Delete MethodInvocation(694)", "Delete ExpressionStatement(695)", "Delete SimpleName: PRIMITIVE_TYPES(696)", "Delete SimpleName: put(697)", "Delete QualifiedName: Character.TYPE(698)", "Delete SimpleName: Character(699)", "Delete SimpleType: Character(700)", "Delete TypeLiteral(701)", "Delete MethodInvocation(702)", "Delete ExpressionStatement(703)", "Delete SimpleName: PRIMITIVE_TYPES(704)", "Delete SimpleName: put(705)", "Delete QualifiedName: Double.TYPE(706)", "Delete SimpleName: Double(707)", "Delete SimpleType: Double(708)", "Delete TypeLiteral(709)", "Delete MethodInvocation(710)", "Delete ExpressionStatement(711)", "Delete SimpleName: PRIMITIVE_TYPES(712)", "Delete SimpleName: put(713)", "Delete QualifiedName: Float.TYPE(714)", "Delete SimpleName: Float(715)", "Delete SimpleType: Float(716)", "Delete TypeLiteral(717)", "Delete MethodInvocation(718)", "Delete ExpressionStatement(719)", "Delete SimpleName: PRIMITIVE_TYPES(720)", "Delete SimpleName: put(721)", "Delete QualifiedName: Integer.TYPE(722)", "Delete SimpleName: Integer(723)", "Delete SimpleType: Integer(724)", "Delete TypeLiteral(725)", "Delete MethodInvocation(726)", "Delete ExpressionStatement(727)", "Delete SimpleName: PRIMITIVE_TYPES(728)", "Delete SimpleName: put(729)", "Delete QualifiedName: Long.TYPE(730)", "Delete SimpleName: Long(731)", "Delete SimpleType: Long(732)", "Delete TypeLiteral(733)", "Delete MethodInvocation(734)", "Delete ExpressionStatement(735)", "Delete SimpleName: PRIMITIVE_TYPES(736)", "Delete SimpleName: put(737)", "Delete QualifiedName: Short.TYPE(738)", "Delete SimpleName: Short(739)", "Delete SimpleType: Short(740)", "Delete TypeLiteral(741)", "Delete MethodInvocation(742)", "Delete ExpressionStatement(743)", "Delete Block(744)", "Delete Initializer(745)", "Delete TextElement: Converts a primitive type to its corresponding class.(746)", "Delete TextElement: <p>(747)", "Delete TextElement: If the argument type is primitive then we want to convert our(748)", "Delete TextElement: primitive type signature to the corresponding Object type so(749)", "Delete TextElement: introspection for methods with primitive types will work(750)", "Delete TextElement: correctly.(751)", "Delete TextElement: </p>(752)", "Delete TagElement(753)", "Delete SimpleName: parm(754)", "Delete TextElement:  a may-be primitive type class(755)", "Delete TagElement: @param(756)", "Delete TextElement:  the equivalent object class (757)", "Delete TagElement: @return(758)", "Delete Javadoc(759)", "Delete Modifier: static(760)", "Delete SimpleName: Class(761)", "Delete SimpleType: Class(762)", "Delete WildcardType: ?(763)", "Delete ParameterizedType: Class<?>(764)", "Delete SimpleName: primitiveClass(765)", "Delete SimpleName: Class(766)", "Delete SimpleType: Class(767)", "Delete WildcardType: ?(768)", "Delete ParameterizedType: Class<?>(769)", "Delete SimpleName: parm(770)", "Delete SingleVariableDeclaration(771)", "Delete SimpleName: Class(772)", "Delete SimpleType: Class(773)", "Delete WildcardType: ?(774)", "Delete ParameterizedType: Class<?>(775)", "Delete SimpleName: prim(776)", "Delete SimpleName: PRIMITIVE_TYPES(777)", "Delete SimpleName: get(778)", "Delete SimpleName: parm(779)", "Delete MethodInvocation(780)", "Delete VariableDeclarationFragment(781)", "Delete VariableDeclarationStatement(782)", "Delete SimpleName: prim(783)", "Delete NullLiteral(784)", "Delete InfixExpression: ==(785)", "Delete SimpleName: parm(786)", "Delete SimpleName: prim(787)", "Delete ConditionalExpression(788)", "Delete ReturnStatement(789)", "Delete Block(790)", "Delete MethodDeclaration(791)", "Delete TextElement: The method cache.(792)", "Delete TextElement: <p>(793)", "Delete TextElement: Cache of Methods, or CACHE_MISS, keyed by method(794)", "Delete TextElement: name and actual arguments used to find it.(795)", "Delete TextElement: </p>(796)", "Delete TagElement(797)", "Delete Javadoc(798)", "Delete Modifier: private(799)", "Delete Modifier: final(800)", "Delete SimpleName: Map(801)", "Delete SimpleType: Map(802)", "Delete SimpleName: MethodKey(803)", "Delete SimpleType: MethodKey(804)", "Delete SimpleName: Method(805)", "Delete SimpleType: Method(806)", "Delete ParameterizedType: Map<MethodKey,Method>(807)", "Delete SimpleName: methods(808)", "Delete SimpleName: HashMap(809)", "Delete SimpleType: HashMap(810)", "Delete SimpleName: MethodKey(811)", "Delete SimpleType: MethodKey(812)", "Delete SimpleName: Method(813)", "Delete SimpleType: Method(814)", "Delete ParameterizedType: HashMap<MethodKey,Method>(815)", "Delete ClassInstanceCreation(816)", "Delete VariableDeclarationFragment(817)", "Delete FieldDeclaration(818)", "Delete TextElement: Map of methods that are searchable according to method parameters to find a match.(819)", "Delete TagElement(820)", "Delete Javadoc(821)", "Delete Modifier: private(822)", "Delete Modifier: final(823)", "Delete SimpleName: MethodMap(824)", "Delete SimpleType: MethodMap(825)", "Delete SimpleName: methodMap(826)", "Delete SimpleName: MethodMap(827)", "Delete SimpleType: MethodMap(828)", "Delete ClassInstanceCreation(829)", "Delete VariableDeclarationFragment(830)", "Delete FieldDeclaration(831)", "Delete TextElement: Find a Method using the method name and parameter objects.(832)", "Delete TextElement: <p>(833)", "Delete TextElement: Look in the methodMap for an entry.  If found,(834)", "Delete TextElement: it'll either be a CACHE_MISS, in which case we(835)", "Delete TextElement: simply give up, or it'll be a Method, in which(836)", "Delete TextElement: case, we return it.(837)", "Delete TextElement: </p>(838)", "Delete TextElement: <p>(839)", "Delete TextElement: If nothing is found, then we must actually go(840)", "Delete TextElement: and introspect the method from the MethodMap.(841)", "Delete TextElement: </p>(842)", "Delete TagElement(843)", "Delete SimpleName: methodKey(844)", "Delete TextElement:  the method key(845)", "Delete TagElement: @param(846)", "Delete TextElement:  A Method object representing the method to invoke or null.(847)", "Delete TagElement: @return(848)", "Delete QualifiedName: MethodKey.AmbiguousException(849)", "Delete TextElement:  When more than one method is a match for the parameters.(850)", "Delete TagElement: @throws(851)", "Delete Javadoc(852)", "Delete SimpleName: Method(853)", "Delete SimpleType: Method(854)", "Delete SimpleName: get(855)", "Delete Modifier: final(856)", "Delete SimpleName: MethodKey(857)", "Delete SimpleType: MethodKey(858)", "Delete SimpleName: methodKey(859)", "Delete SingleVariableDeclaration(860)", "Delete QualifiedName: MethodKey.AmbiguousException(861)", "Delete SimpleType: MethodKey.AmbiguousException(862)", "Delete SimpleName: methodMap(863)", "Delete SimpleName: Method(864)", "Delete SimpleType: Method(865)", "Delete SimpleName: cacheEntry(866)", "Delete SimpleName: methods(867)", "Delete SimpleName: get(868)", "Delete SimpleName: methodKey(869)", "Delete MethodInvocation(870)", "Delete VariableDeclarationFragment(871)", "Delete VariableDeclarationStatement(872)", "Delete SimpleName: cacheEntry(873)", "Delete SimpleName: CACHE_MISS(874)", "Delete InfixExpression: ==(875)", "Delete NullLiteral(876)", "Delete ReturnStatement(877)", "Delete Block(878)", "Delete IfStatement(879)", "Delete SimpleName: cacheEntry(880)", "Delete NullLiteral(881)", "Delete InfixExpression: ==(882)", "Delete SimpleName: cacheEntry(883)", "Delete SimpleName: methodMap(884)", "Delete SimpleName: find(885)", "Delete SimpleName: methodKey(886)", "Delete MethodInvocation(887)", "Delete Assignment: =(888)", "Delete ExpressionStatement(889)", "Delete SimpleName: cacheEntry(890)", "Delete NullLiteral(891)", "Delete InfixExpression: !=(892)", "Delete SimpleName: methods(893)", "Delete SimpleName: put(894)", "Delete SimpleName: methodKey(895)", "Delete SimpleName: cacheEntry(896)", "Delete MethodInvocation(897)", "Delete ExpressionStatement(898)", "Delete Block(899)", "Delete SimpleName: methods(900)", "Delete SimpleName: put(901)", "Delete SimpleName: methodKey(902)", "Delete SimpleName: CACHE_MISS(903)", "Delete MethodInvocation(904)", "Delete ExpressionStatement(905)", "Delete Block(906)", "Delete IfStatement(907)", "Delete Block(908)", "Delete QualifiedName: MethodKey.AmbiguousException(909)", "Delete SimpleType: MethodKey.AmbiguousException(910)", "Delete SimpleName: ae(911)", "Delete SingleVariableDeclaration(912)", "Delete SimpleName: methods(913)", "Delete SimpleName: put(914)", "Delete SimpleName: methodKey(915)", "Delete SimpleName: CACHE_MISS(916)", "Delete MethodInvocation(917)", "Delete ExpressionStatement(918)", "Delete SimpleName: ae(919)", "Delete ThrowStatement(920)", "Delete Block(921)", "Delete CatchClause(922)", "Delete TryStatement(923)", "Delete Block(924)", "Delete IfStatement(925)", "Delete SimpleName: cacheEntry(926)", "Delete ReturnStatement(927)", "Delete Block(928)", "Delete SynchronizedStatement(929)", "Delete Block(930)", "Delete MethodDeclaration(931)", "Delete TextElement: Adds a method to the map.(932)", "Delete TagElement(933)", "Delete SimpleName: method(934)", "Delete TextElement:  the method to add(935)", "Delete TagElement: @param(936)", "Delete Javadoc(937)", "Delete PrimitiveType: void(938)", "Delete SimpleName: put(939)", "Delete SimpleName: Method(940)", "Delete SimpleType: Method(941)", "Delete SimpleName: method(942)", "Delete SingleVariableDeclaration(943)", "Delete SimpleName: methodMap(944)", "Delete SimpleName: MethodKey(945)", "Delete SimpleType: MethodKey(946)", "Delete SimpleName: methodKey(947)", "Delete SimpleName: MethodKey(948)", "Delete SimpleType: MethodKey(949)", "Delete SimpleName: method(950)", "Delete ClassInstanceCreation(951)", "Delete VariableDeclarationFragment(952)", "Delete VariableDeclarationStatement(953)", "Delete SimpleName: methods(954)", "Delete SimpleName: get(955)", "Delete SimpleName: methodKey(956)", "Delete MethodInvocation(957)", "Delete NullLiteral(958)", "Delete InfixExpression: ==(959)", "Delete SimpleName: methods(960)", "Delete SimpleName: put(961)", "Delete SimpleName: methodKey(962)", "Delete SimpleName: method(963)", "Delete MethodInvocation(964)", "Delete ExpressionStatement(965)", "Delete SimpleName: methodMap(966)", "Delete SimpleName: add(967)", "Delete SimpleName: method(968)", "Delete MethodInvocation(969)", "Delete ExpressionStatement(970)", "Delete Block(971)", "Delete IfStatement(972)", "Delete Block(973)", "Delete SynchronizedStatement(974)", "Delete Block(975)", "Delete MethodDeclaration(976)", "Delete TextElement: Gets all the method names from this map.(977)", "Delete TagElement(978)", "Delete TextElement:  the array of method name(979)", "Delete TagElement: @return(980)", "Delete Javadoc(981)", "Delete SimpleName: String(982)", "Delete SimpleType: String(983)", "Delete Dimension(984)", "Delete ArrayType: String[](985)", "Delete SimpleName: names(986)", "Delete SimpleName: methodMap(987)", "Delete SimpleName: methodMap(988)", "Delete SimpleName: names(989)", "Delete MethodInvocation(990)", "Delete ReturnStatement(991)", "Delete Block(992)", "Delete SynchronizedStatement(993)", "Delete Block(994)", "Delete MethodDeclaration(995)", "Delete TextElement: Gets all the methods with a given name from this map.(996)", "Delete TagElement(997)", "Delete SimpleName: methodName(998)", "Delete TextElement:  the seeked methods name(999)", "Delete TagElement: @param(1000)", "Delete TextElement:  the array of methods (null or non-empty)(1001)", "Delete TagElement: @return(1002)", "Delete Javadoc(1003)", "Delete SimpleName: Method(1004)", "Delete SimpleType: Method(1005)", "Delete Dimension(1006)", "Delete ArrayType: Method[](1007)", "Delete SimpleName: get(1008)", "Delete Modifier: final(1009)", "Delete SimpleName: String(1010)", "Delete SimpleType: String(1011)", "Delete SimpleName: methodName(1012)", "Delete SingleVariableDeclaration(1013)", "Delete SimpleName: methodMap(1014)", "Delete SimpleName: List(1015)", "Delete SimpleType: List(1016)", "Delete SimpleName: Method(1017)", "Delete SimpleType: Method(1018)", "Delete ParameterizedType: List<Method>(1019)", "Delete SimpleName: lm(1020)", "Delete SimpleName: methodMap(1021)", "Delete SimpleName: get(1022)", "Delete SimpleName: methodName(1023)", "Delete MethodInvocation(1024)", "Delete VariableDeclarationFragment(1025)", "Delete VariableDeclarationStatement(1026)", "Delete SimpleName: lm(1027)", "Delete NullLiteral(1028)", "Delete InfixExpression: !=(1029)", "Delete SimpleName: lm(1030)", "Delete SimpleName: isEmpty(1031)", "Delete MethodInvocation(1032)", "Delete PrefixExpression: !(1033)", "Delete InfixExpression: &&(1034)", "Delete SimpleName: lm(1035)", "Delete SimpleName: toArray(1036)", "Delete SimpleName: Method(1037)", "Delete SimpleType: Method(1038)", "Delete Dimension(1039)", "Delete ArrayType: Method[](1040)", "Delete SimpleName: lm(1041)", "Delete SimpleName: size(1042)", "Delete MethodInvocation(1043)", "Delete ArrayCreation(1044)", "Delete MethodInvocation(1045)", "Delete ReturnStatement(1046)", "Delete Block(1047)", "Delete NullLiteral(1048)", "Delete ReturnStatement(1049)", "Delete Block(1050)", "Delete IfStatement(1051)", "Delete Block(1052)", "Delete SynchronizedStatement(1053)", "Delete Block(1054)", "Delete MethodDeclaration(1055)", "Delete TypeDeclaration: class(1056)", "Delete TypeDeclaration: class(1057)"]}}, {"IntrospectorBase_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.LinkedList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.logging.Log", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: public", "DEL SimpleName: Map", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL QualifiedName: Map.Entry", "DEL IfStatement", "DEL WildcardType: ?", "DEL SimpleType: ClassMap", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: className", "DEL SimpleName: cloader", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: isInfoEnabled", "DEL ParameterizedType: Class<?>", "DEL StringLiteral: \".\"", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: Constructor", "DEL SimpleType: Map.Entry", "DEL SimpleName: equals", "DEL InfixExpression: ==", "DEL Modifier: public", "DEL CatchClause", "DEL Block", "DEL WhileStatement", "DEL TextElement:  if no unambiguous method could be found through introspection", "DEL WildcardType: ?", "DEL SimpleType: ClassMap", "DEL SimpleName: loader", "DEL ParameterizedType: Map.Entry<Class<?>,ClassMap>", "DEL IfStatement", "DEL SimpleName: cloader", "DEL SimpleName: constructorsMap", "DEL SimpleName: key", "DEL SimpleName: entries", "DEL SimpleType: String", "DEL NullLiteral", "DEL IfStatement", "DEL NullLiteral", "DEL SimpleType: ClassMap", "DEL IfStatement", "DEL SimpleName: Constructor", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleName: getMethodNames", "DEL TextElement:  the class name", "DEL SimpleName: entry", "DEL SimpleName: List", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleName: cname", "DEL EnhancedForStatement", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: findField", "DEL SimpleName: Constructor", "DEL SimpleType: Map.Entry", "DEL SimpleType: ClassLoader", "DEL InfixExpression: &&", "DEL TagElement: @return", "DEL SimpleName: c", "DEL TextElement:    Key of the constructor being searched for", "DEL SimpleName: classMap", "DEL ParameterizedType: LinkedList<Constructor<?>>", "DEL VariableDeclarationFragment", "DEL SimpleName: CacheMiss", "DEL TextElement: would be mapped by the key:", "DEL SimpleName: cloader", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: loader", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL Assignment: =", "DEL SimpleName: classMethodMaps", "DEL Block", "DEL InfixExpression: !=", "DEL Javadoc", "DEL SimpleName: debugString", "DEL SimpleName: methodName", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: getParent", "DEL SimpleName: c", "DEL VariableDeclarationFragment", "DEL TextElement:      Class in which the field search is taking place", "DEL SimpleType: Method", "DEL Block", "DEL SimpleName: MethodKey", "DEL SimpleType: Map.Entry", "DEL WildcardType: ?", "DEL SimpleName: rlog", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL Block", "DEL IfStatement", "DEL SimpleName: getConstructors", "DEL ClassInstanceCreation", "DEL TagElement", "DEL WildcardType: ?", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: ClassLoader", "DEL SimpleName: ClassLoader", "DEL SimpleName: entries", "DEL TextElement: Gets the constructor defined by the <code>MethodKey</code>.", "DEL SimpleName: remove", "DEL SimpleType: Constructor", "DEL Dimension", "DEL ParameterizedType: Class<?>", "DEL MethodInvocation", "DEL SynchronizedStatement", "DEL BooleanLiteral: true", "DEL SimpleName: constructibleClasses", "DEL ParameterizedType: Class<?>", "DEL SimpleName: cname", "DEL Block", "DEL SimpleType: MethodKey.AmbiguousException", "DEL SimpleName: clazz", "DEL SimpleType: Constructor", "DEL TextElement: Gets the constructor defined by the <code>MethodKey</code>.", "DEL SimpleName: equals", "DEL SingleVariableDeclaration", "DEL SimpleName: clazz", "DEL SimpleName: rlog", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL SimpleName: classMethodMaps", "DEL TagElement: @throws", "DEL SimpleName: HashMap", "DEL SimpleName: c", "DEL ParameterizedType: List<Constructor<?>>", "DEL TagElement", "DEL ParameterizedType: HashMap<String,Class<?>>", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleName: ClassMap", "DEL SimpleName: getMostSpecificConstructor", "DEL Block", "DEL SimpleName: HashMap", "DEL WildcardType: ?", "DEL Block", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL IfStatement", "DEL SimpleType: ClassMap", "DEL SimpleName: classMethodMaps", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL SimpleType: String", "DEL SimpleName: Constructor", "DEL SimpleName: Class", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL Block", "DEL SimpleName: entries", "DEL Javadoc", "DEL TextElement: <p>Also cleans the constructors and methods caches.</p>", "DEL ReturnStatement", "DEL SimpleName: hasNext", "DEL MethodInvocation", "DEL SimpleName: xnotfound", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: ClassMap", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleType: HashMap", "DEL BooleanLiteral: false", "DEL SimpleType: ClassMap", "DEL MethodInvocation", "DEL SimpleName: getMap", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL WhileStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: ClassNotFoundException", "DEL SimpleType: String", "DEL ParameterizedType: Map.Entry<MethodKey,Constructor<?>>", "DEL SimpleName: c", "DEL TextElement:  the class method names", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TextElement:  the logger to use", "DEL SimpleName: c", "DEL SimpleName: c", "DEL VariableDeclarationStatement", "DEL SimpleType: String", "DEL Modifier: final", "DEL SimpleType: ClassMap", "DEL SimpleName: IntrospectorBase", "DEL VariableDeclarationFragment", "DEL SynchronizedStatement", "DEL TextElement: Gets the method defined by the <code>MethodKey</code> for the class <code>c</code>.", "DEL VariableDeclarationFragment", "DEL TextElement: Sets the class loader used to solve constructors.", "DEL SimpleName: clazz", "DEL Block", "DEL TagElement", "DEL SimpleName: next", "DEL SynchronizedStatement", "DEL WildcardType: ?", "DEL Modifier: public", "DEL ArrayCreation", "DEL Modifier: static", "DEL ReturnStatement", "DEL SimpleName: key", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleName: classMap", "DEL ParameterizedType: Class<?>", "DEL SimpleName: String", "DEL SimpleName: put", "DEL SimpleName: key", "DEL TextElement: for the class in question. Basically the class method map is a Hastable where", "DEL SimpleName: c", "DEL SimpleName: forName", "DEL IfStatement", "DEL SimpleType: Class", "DEL Modifier: public", "DEL SimpleName: previous", "DEL Block", "DEL PrimitiveType: boolean", "DEL ParameterizedType: Class<?>", "DEL ParameterizedType: Class<?>", "DEL TagElement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL SimpleName: info", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL SimpleType: Method", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL TagElement: @param", "DEL SimpleName: String", "DEL WildcardType: ?", "DEL Modifier: public", "DEL SimpleType: String", "DEL Assignment: =", "DEL SimpleType: String", "DEL TextElement: in the form of an Object[]", "DEL SimpleName: MethodKey", "DEL SimpleName: getMethod", "DEL SimpleName: log", "DEL SimpleName: Class", "DEL SimpleName: cloader", "DEL SimpleName: previous", "DEL SimpleType: Constructor", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block", "DEL SimpleName: iterator", "DEL SimpleName: rlog", "DEL Modifier: static", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL QualifiedName: Map.Entry", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: cname", "DEL TryStatement", "DEL ExpressionStatement", "DEL SimpleType: Class", "DEL SimpleName: add", "DEL SimpleType: Class", "DEL SimpleName: getDeclaringClass", "DEL SimpleType: String", "DEL SingleVariableDeclaration", "DEL SimpleName: SuppressWarnings", "DEL IfStatement", "DEL SimpleName: classMap", "DEL SimpleName: xignore", "DEL ReturnStatement", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleName: cloader", "DEL SimpleName: remove", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL TextElement: The first time the Introspector sees a class it creates a class method map", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: c", "DEL SimpleName: c", "DEL TagElement: @param", "DEL SimpleName: getMethod", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL Block", "DEL TagElement: @since", "DEL Javadoc", "DEL SimpleName: ClassMap", "DEL SimpleName: entrySet", "DEL SimpleType: Class", "DEL SimpleName: c", "DEL SimpleName: loader", "DEL SimpleName: classMap", "DEL SimpleName: getKey", "DEL FieldAccess", "DEL SimpleName: ClassMap", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL SimpleName: Constructor", "DEL StringLiteral: \".\"", "DEL SimpleName: cname", "DEL SingleVariableDeclaration", "DEL SimpleType: MethodKey", "DEL SimpleType: MethodKey", "DEL SingleVariableDeclaration", "DEL SimpleName: methodName", "DEL SimpleName: CacheMiss", "DEL SimpleName: classMap", "DEL MethodInvocation", "DEL SimpleName: ClassLoader", "DEL SimpleName: key", "DEL VariableDeclarationFragment", "DEL SimpleName: key", "DEL SimpleName: MethodKey", "DEL Javadoc", "DEL SimpleName: Class", "DEL SimpleName: classMap", "DEL MethodInvocation", "DEL SimpleName: String", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL Dimension", "DEL InfixExpression: +", "DEL FieldDeclaration", "DEL SimpleName: Map", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: constructorsMap", "DEL TagElement: @return", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: getField", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: ctor", "DEL TagElement: @param", "DEL SimpleName: getClassLoader", "DEL SimpleName: equals", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: Log", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @return", "DEL Block", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL VariableDeclarationStatement", "DEL TextElement: Create the introspector.", "DEL SimpleType: Class", "DEL SimpleName: getClassLoader", "DEL TagElement", "DEL SimpleName: getClass", "DEL Modifier: private", "DEL SimpleName: ClassMap", "DEL Modifier: public", "DEL SimpleName: debugString", "DEL TextElement:  The desired constructor object", "DEL SimpleName: c", "DEL SimpleName: l", "DEL SimpleType: ClassMap", "DEL VariableDeclarationStatement", "DEL SimpleName: ctor", "DEL Modifier: private", "DEL WildcardType: ?", "DEL NumberLiteral: 0", "DEL SimpleName: Method", "DEL MethodInvocation", "DEL Block", "DEL WildcardType: ?", "DEL SimpleName: key", "DEL SimpleName: MethodKey", "DEL SimpleName: Class", "DEL Modifier: public", "DEL ParameterizedType: Class<?>", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleType: ClassNotFoundException", "DEL SimpleName: Class", "DEL SimpleName: entrySet", "DEL MethodDeclaration", "DEL SimpleName: c", "DEL SimpleName: Constructor", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: info", "DEL SimpleName: methodName", "DEL SimpleName: get", "DEL SimpleName: xnotfound", "DEL MethodDeclaration", "DEL SimpleName: ctor", "DEL SimpleType: Constructor", "DEL SimpleName: c", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: classMap", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleType: MethodKey", "DEL SimpleName: findMethod", "DEL ParameterizedType: Iterator<Map.Entry<MethodKey,Constructor<?>>>", "DEL SimpleName: put", "DEL SimpleName: getMap", "DEL Dimension", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL TextElement: The constructor used as cache-miss. ", "DEL NumberLiteral: 0", "DEL TextElement: A Constructor get cache-miss.", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: xambiguous", "DEL NullLiteral", "DEL TextElement: Gets the array of accessible methods names known for a given class.", "DEL SimpleName: rlog", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: clazz", "DEL TextElement:  the class", "DEL ParameterizedType: Map<Class<?>,ClassMap>", "DEL ParameterizedType: Map.Entry<MethodKey,Constructor<?>>", "DEL VariableDeclarationStatement", "DEL TextElement:  the class", "DEL SimpleName: Class", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ParameterizedType: Iterator<Map.Entry<Class<?>,ClassMap>>", "DEL FieldDeclaration", "DEL ArrayType: String[]", "DEL Modifier: final", "DEL SimpleName: ClassNotFoundException", "DEL SimpleName: ClassMap", "DEL Modifier: private", "DEL Modifier: public", "DEL TagElement", "DEL SimpleName: get", "DEL Javadoc", "DEL NullLiteral", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: String", "DEL WildcardType: ?", "DEL SimpleName: c", "DEL Modifier: private", "DEL InfixExpression: !=", "DEL TextElement: or null if no unambiguous constructor could be found through introspection.", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL TextElement: <p/>", "DEL TextElement:  the class to check", "DEL VariableDeclarationFragment", "DEL SimpleType: Constructor", "DEL TextElement:  the method name", "DEL SimpleType: Map", "DEL MethodInvocation", "DEL TagElement", "DEL ArrayType: Method[]", "DEL TagElement", "DEL TextElement: Gets the field named by <code>key</code> for the class <code>c</code>.", "DEL SimpleName: log", "DEL SimpleName: classMap", "DEL SimpleName: ictor", "DEL SimpleName: l", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: ClassNotFoundException", "DEL NullLiteral", "DEL ExpressionStatement", "DEL SimpleName: Class", "DEL TextElement:  The desired constructor object", "DEL IfStatement", "DEL Block", "DEL Modifier: static", "DEL WildcardType: ?", "DEL SimpleName: ctor", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: remove", "DEL SimpleType: Constructor", "DEL WildcardType: ?", "DEL SimpleName: rlog", "DEL SimpleName: CTOR_MISS", "DEL SimpleName: setLoader", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: CTOR_MISS", "DEL ArrayCreation", "DEL Modifier: private", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleType: LinkedList", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL TextElement:  the array of methods (null or not empty)", "DEL ParameterizedType: Constructor<?>", "DEL TagElement", "DEL SimpleName: entry", "DEL SimpleName: String", "DEL SimpleName: Constructor", "DEL TextElement: Holds the map of classes ctors we know about as well as unknown ones.", "DEL Block", "DEL IfStatement", "DEL Javadoc", "DEL TextElement: Gets the array of accessible field names known for a given class.", "DEL ParameterizedType: Constructor<?>", "DEL FieldDeclaration", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: rlog", "DEL Modifier: public", "DEL NullLiteral", "DEL TextElement: particular class given the name of a method and the parameters to the method", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL TagElement", "DEL TagElement: @param", "DEL Block", "DEL TextElement: or null if no unambiguous constructor could be found through introspection.", "DEL ArrayAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: Log", "DEL SimpleName: loader", "DEL VariableDeclarationFragment", "DEL SimpleName: getClass", "DEL SimpleName: key", "DEL TagElement: @return", "DEL Modifier: final", "DEL Block", "DEL SimpleName: next", "DEL SimpleName: entries", "DEL MethodInvocation", "DEL TextElement:    Key of the constructor being searched for", "DEL Block", "DEL SimpleType: Class", "DEL SynchronizedStatement", "DEL SimpleName: entries", "DEL SingleVariableDeclaration", "DEL ParameterizedType: HashMap<MethodKey,Constructor<?>>", "DEL TextElement: This mapping is performed for all the methods in a class and stored.", "DEL ExpressionStatement", "DEL SimpleName: constructorsMap", "DEL ParameterizedType: Class<?>", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: constructorsMap", "DEL ReturnStatement", "DEL SingleMemberAnnotation", "DEL NullLiteral", "DEL SimpleName: Class", "DEL SimpleName: getMethodNames", "DEL TagElement: @return", "DEL SimpleName: Class", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL TextElement: The cache-miss marker for the constructors map. ", "DEL SimpleType: String", "DEL WildcardType: ?", "DEL ParameterizedType: Constructor<?>", "DEL SimpleName: getMap", "DEL SimpleName: getFieldNames", "DEL SimpleName: ClassMap", "DEL SimpleName: className", "DEL MethodInvocation", "DEL SimpleName: classMap", "DEL MethodDeclaration", "DEL ParameterizedType: Map<String,Class<?>>", "DEL TagElement: @return", "DEL TagElement", "DEL SimpleName: Class", "DEL Assignment: =", "DEL SimpleName: clazz", "DEL ParameterizedType: Class<?>", "DEL SingleVariableDeclaration", "DEL SimpleName: isLoadedBy", "DEL SimpleName: get", "DEL SimpleName: entry", "DEL NullLiteral", "DEL ParameterizedType: Class<?>", "DEL SimpleType: MethodKey", "DEL SimpleName: getMethod", "DEL SimpleName: loadClass", "DEL TextElement:  true if clazz was loaded through the loader, false otherwise", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: xambiguous", "DEL ParameterizedType: Constructor<?>", "DEL Block", "DEL TagElement: @param", "DEL SimpleType: Class", "DEL SimpleName: clazz", "DEL MethodDeclaration", "DEL SimpleName: clazz", "DEL Javadoc", "DEL ParameterizedType: Class<?>", "DEL SimpleName: loader", "DEL Javadoc", "DEL SimpleName: getMap", "DEL IfStatement", "DEL SimpleType: HashMap", "DEL SimpleName: String", "DEL SimpleName: loader", "DEL SimpleType: Iterator", "DEL VariableDeclarationStatement", "DEL SimpleName: constructibleClasses", "DEL Modifier: public", "DEL NullLiteral", "DEL Modifier: final", "DEL TryStatement", "DEL SimpleName: previous", "DEL SimpleName: iterator", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL Javadoc", "DEL WildcardType: ?", "DEL SimpleName: getClassByName", "DEL Javadoc", "DEL CatchClause", "DEL ParameterizedType: Class<?>", "DEL SimpleType: String", "DEL TextElement:  the desired field or null if it does not exist or is not accessible", "DEL TextElement: Gets the array of accessible method known for a given class.", "DEL ParameterizedType: Constructor<?>", "DEL TextElement: Method objects are keyed by a concatenation of the method name and the names", "DEL NullLiteral", "DEL SimpleName: String", "DEL SimpleName: ClassMap", "DEL MethodInvocation", "DEL SimpleName: cname", "DEL MethodInvocation", "DEL SimpleName: CacheMiss", "DEL SimpleType: Field", "DEL VariableDeclarationStatement", "DEL SimpleName: rlog", "DEL SimpleName: classMap", "DEL SimpleName: cname", "DEL SimpleName: l", "DEL SimpleName: Log", "DEL SimpleName: cloader", "DEL SimpleName: key", "DEL SimpleName: getMethod", "DEL SimpleName: entries", "DEL MethodDeclaration", "DEL SimpleName: MethodKey", "DEL SimpleName: getConstructors", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL ParameterizedType: HashMap<Class<?>,ClassMap>", "DEL SimpleName: Constructor", "DEL SimpleName: c", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: key", "DEL MethodInvocation", "DEL SimpleName: MethodKey", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL TagElement", "DEL SimpleName: getClassLoader", "DEL SimpleType: HashMap", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL SimpleName: key", "DEL NullLiteral", "DEL SimpleName: Method", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL CatchClause", "DEL ExpressionStatement", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: ctor", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL TextElement: the logger. ", "DEL TextElement:  The desired method object", "DEL SimpleName: loader", "DEL SimpleName: Class", "DEL SimpleName: Constructor", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: c", "DEL MethodInvocation", "DEL SimpleName: Iterator", "DEL SimpleType: Class", "DEL SimpleName: String", "DEL SimpleName: getConstructor", "DEL Modifier: protected", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: ClassLoader", "DEL SimpleType: MethodKey", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleType: ClassMap", "DEL TagElement", "DEL Dimension", "DEL Block", "DEL TagElement", "DEL SimpleName: Class", "DEL SimpleName: xambiguous", "DEL SingleVariableDeclaration", "DEL SimpleType: ClassLoader", "DEL SimpleName: rlog", "DEL SimpleName: rlog", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL VariableDeclarationStatement", "DEL SimpleType: Log", "DEL VariableDeclarationStatement", "DEL SimpleName: cloader", "DEL TextElement:    Key of the method being searched for", "DEL TagElement: @return", "DEL Block", "DEL SimpleName: Map", "DEL WildcardType: ?", "DEL StringLiteral: \"ambiguous constructor invocation: \"", "DEL TagElement: @param", "DEL SimpleType: Constructor", "DEL Block", "DEL SimpleType: CacheMiss", "DEL MethodInvocation", "DEL SimpleName: HashMap", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: classMap", "DEL WildcardType: ?", "DEL ParameterizedType: Map<MethodKey,Constructor<?>>", "DEL ArrayType: String[]", "DEL SimpleType: Constructor", "DEL TextElement: For example, a method with the following signature:", "DEL SimpleName: c", "DEL SimpleName: MethodKey", "DEL SimpleName: getName", "DEL NumberLiteral: 0", "DEL SimpleName: cloader", "DEL SimpleName: c", "DEL SimpleType: Class", "DEL ParameterizedType: Class<?>", "DEL SimpleName: ClassMap", "DEL SimpleName: key", "DEL Block", "DEL ArrayType: String[]", "DEL InfixExpression: +", "DEL TagElement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: get", "DEL SimpleType: ClassMap", "DEL Modifier: private", "DEL SimpleName: put", "DEL VariableDeclarationFragment", "DEL SimpleName: ClassMap", "DEL SimpleName: ctor", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: getValue", "DEL ExpressionStatement", "DEL SimpleName: ClassMap", "DEL SingleVariableDeclaration", "DEL TextElement: Gets the ClassMap for a given class.", "DEL SimpleName: constructibleClasses", "DEL TextElement:      Class in which the method search is taking place", "DEL Modifier: final", "DEL Block", "DEL SimpleName: Class", "DEL VariableDeclarationStatement", "DEL SimpleType: Map", "DEL SimpleName: entries", "DEL InfixExpression: !=", "DEL WildcardType: ?", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: cloader", "DEL SimpleName: ClassLoader", "DEL SimpleName: LinkedList", "DEL ReturnStatement", "DEL SimpleType: MethodKey.AmbiguousException", "DEL Assignment: =", "DEL TextElement: of classes that make up the parameters.", "DEL SimpleName: getKey", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL SimpleName: isLoadedBy", "DEL SimpleName: Class", "DEL FieldDeclaration", "DEL NullLiteral", "DEL SimpleName: clazz", "DEL InfixExpression: +", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: getFieldNames", "DEL TagElement: @param", "DEL InfixExpression: !=", "DEL StringLiteral: \".\"", "DEL SimpleName: getMap", "DEL SimpleName: loader", "DEL SimpleName: Constructor", "DEL SimpleName: c", "DEL SimpleName: clazz", "DEL NullLiteral", "DEL StringLiteral: \"unused\"", "DEL WildcardType: ?", "DEL SimpleName: put", "DEL SimpleName: c", "DEL SimpleName: isInfoEnabled", "DEL SimpleName: className", "DEL SimpleName: ctor", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: clazz", "DEL SimpleName: ictor", "DEL TagElement: @param", "DEL Javadoc", "DEL StringLiteral: \"ambiguous method invocation: \"", "DEL ClassInstanceCreation", "DEL SimpleName: Field", "DEL TagElement: @param", "DEL TextElement:  the class we want to instantiate", "DEL TypeDeclaration: class", "DEL TagElement: @param", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL ParameterizedType: Map.Entry<Class<?>,ClassMap>", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: constructorsMap", "DEL TextElement: Holds the set of classes we have introspected.", "DEL SimpleName: classMethodMaps", "DEL SimpleType: MethodKey", "DEL SimpleName: key", "DEL TextElement: This basic function of this class is to return a Method object for a", "DEL Javadoc", "DEL NullLiteral", "DEL Block", "DEL SimpleName: c", "DEL TextElement: The class loader used to solve constructors if needed.", "DEL SingleVariableDeclaration", "DEL TextElement:  the class loader; if null, use this instance class loader", "DEL VariableDeclarationStatement", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: ClassLoader", "DEL SimpleType: ClassMap", "DEL Modifier: private", "DEL SimpleName: classMap", "DEL SimpleName: cloader", "DEL SimpleName: CTOR_MISS", "DEL SimpleType: ClassLoader", "DEL WildcardType: ?", "DEL SimpleName: key", "DEL SimpleName: c", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleName: entry", "DEL SimpleName: getName", "DEL MethodInvocation", "DEL SimpleName: loader", "DEL TextElement:  the class field names", "DEL SimpleName: c", "DEL TextElement:  1.0", "DEL MethodInvocation", "DEL SimpleType: ClassMap", "DEL WhileStatement", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: classMethodMaps", "DEL SimpleName: classMethodMaps", "DEL IfStatement", "DEL SimpleName: ctor", "DEL TypeDeclaration: class", "DEL Block", "DEL TextElement: Checks whether a class is loaded through a given class loader or one of its ascendants.", "DEL SimpleName: getMethods", "DEL QualifiedName: Map.Entry", "DEL SimpleName: key", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL SimpleName: Iterator", "DEL SimpleType: Iterator", "DEL SimpleName: classMap", "DEL SimpleName: Constructor", "DEL TextElement:  the class", "DEL QualifiedName: Map.Entry", "DEL ReturnStatement", "DEL TagElement: @return", "DEL SimpleName: entries", "DEL TagElement", "DEL SimpleName: cloader", "DEL ReturnStatement", "DEL SimpleType: Map", "DEL SimpleName: c", "DEL SimpleName: ctor", "DEL MethodInvocation", "DEL SimpleName: key", "DEL SimpleName: c", "DEL SimpleType: Class", "DEL Block", "DEL BooleanLiteral: false", "DEL SimpleName: key", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: c", "DEL SimpleName: ClassLoader", "DEL SimpleType: String", "DEL SimpleName: xambiguous", "DEL Modifier: private", "DEL SimpleType: Class", "DEL SimpleName: constructorsMap", "DEL SimpleType: Map.Entry", "DEL SimpleType: MethodKey", "DEL SimpleName: info", "DEL SimpleName: hasNext", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Constructor", "DEL SimpleName: Class", "DEL SimpleName: entry", "DEL SimpleType: ClassMap", "DEL SimpleName: ctor", "DEL Javadoc", "DEL SimpleName: log", "DEL TagElement: @param", "DEL ParameterizedType: Class<?>", "DEL SimpleName: constructorsMap", "DEL TextElement:  the class instance or null if it could not be found", "DEL MethodDeclaration", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: List", "DEL ArrayType: String[]", "DEL SimpleName: IntrospectorBase", "DEL NullLiteral", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Javadoc", "DEL Block", "DEL Block", "DEL IfStatement", "DEL SimpleType: Constructor", "DEL SimpleName: clazz", "DEL WildcardType: ?", "DEL SimpleName: debugString", "DEL WildcardType: ?", "DEL SimpleName: loader", "DEL SimpleType: Class", "DEL TextElement:  the class loader", "DEL TextElement:  the class map", "DEL NullLiteral", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: loader", "DEL Block", "DEL Modifier: final", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: getConstructor", "DEL VariableDeclarationFragment", "DEL SimpleName: classMap", "DEL TextElement: public void method(String a, StringBuffer b)", "DEL ExpressionStatement", "DEL TagElement", "DEL TextElement:  the class", "DEL WildcardType: ?", "DEL SimpleName: isLoadedBy", "DEL TryStatement", "DEL SimpleType: Constructor", "DEL WildcardType: ?", "DEL SimpleName: rlog", "DEL InfixExpression: &&", "DEL SimpleName: getConstructor", "DEL Dimension", "DEL ReturnStatement", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL SimpleName: String", "DEL SingleVariableDeclaration", "DEL SimpleName: equals", "DEL TextElement: \"method\" + \"java.lang.String\" + \"java.lang.StringBuffer\"", "DEL SimpleName: rlog", "DEL SimpleName: isInfoEnabled", "DEL Modifier: public", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"unable to find class: \"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getMap", "DEL SimpleName: constructibleClasses", "DEL SimpleName: clazz", "DEL SimpleName: ClassMap", "DEL TextElement: Gets a class by name through this introspector class loader.", "DEL SimpleName: clazz", "DEL SimpleName: rlog", "DEL SimpleName: classMap", "DEL Javadoc", "DEL SimpleName: key", "DEL TextElement:    Name of the field being searched for", "DEL Block", "DEL MethodInvocation", "DEL TextElement: Holds the method maps for the classes we know about, keyed by Class.", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL ParameterizedType: Class<?>"]}]}}, {"IntrospectorBase_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Method(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Constructor(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Field(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Map(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.HashMap(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Iterator(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.LinkedList(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.List(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.apache.commons.logging.Log(18)", "Delete ImportDeclaration(19)", "Delete TextElement: This basic function of this class is to return a Method object for a(20)", "Delete TextElement: particular class given the name of a method and the parameters to the method(21)", "Delete TextElement: in the form of an Object[](22)", "Delete TextElement: <p/>(23)", "Delete TextElement: The first time the Introspector sees a class it creates a class method map(24)", "Delete TextElement: for the class in question. Basically the class method map is a Hastable where(25)", "Delete TextElement: Method objects are keyed by a concatenation of the method name and the names(26)", "Delete TextElement: of classes that make up the parameters.(27)", "Delete TextElement: For example, a method with the following signature:(28)", "Delete TextElement: public void method(String a, StringBuffer b)(29)", "Delete TextElement: would be mapped by the key:(30)", "Delete TextElement: \"method\" + \"java.lang.String\" + \"java.lang.StringBuffer\"(31)", "Delete TextElement: This mapping is performed for all the methods in a class and stored.(32)", "Delete TagElement(33)", "Delete TextElement:  1.0(34)", "Delete TagElement: @since(35)", "Delete Javadoc(36)", "Delete Modifier: public(37)", "Delete SimpleName: IntrospectorBase(38)", "Delete TextElement: the logger. (39)", "Delete TagElement(40)", "Delete Javadoc(41)", "Delete Modifier: protected(42)", "Delete Modifier: final(43)", "Delete SimpleName: Log(44)", "Delete SimpleType: Log(45)", "Delete SimpleName: rlog(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete TextElement: Holds the method maps for the classes we know about, keyed by Class.(49)", "Delete TagElement(50)", "Delete Javadoc(51)", "Delete Modifier: private(52)", "Delete Modifier: final(53)", "Delete SimpleName: Map(54)", "Delete SimpleType: Map(55)", "Delete SimpleName: Class(56)", "Delete SimpleType: Class(57)", "Delete WildcardType: ?(58)", "Delete ParameterizedType: Class<?>(59)", "Delete SimpleName: ClassMap(60)", "Delete SimpleType: ClassMap(61)", "Delete ParameterizedType: Map<Class<?>,ClassMap>(62)", "Delete SimpleName: classMethodMaps(63)", "Delete SimpleName: HashMap(64)", "Delete SimpleType: HashMap(65)", "Delete SimpleName: Class(66)", "Delete SimpleType: Class(67)", "Delete WildcardType: ?(68)", "Delete ParameterizedType: Class<?>(69)", "Delete SimpleName: ClassMap(70)", "Delete SimpleType: ClassMap(71)", "Delete ParameterizedType: HashMap<Class<?>,ClassMap>(72)", "Delete ClassInstanceCreation(73)", "Delete VariableDeclarationFragment(74)", "Delete FieldDeclaration(75)", "Delete TextElement: The class loader used to solve constructors if needed.(76)", "Delete TagElement(77)", "Delete Javadoc(78)", "Delete Modifier: private(79)", "Delete SimpleName: ClassLoader(80)", "Delete SimpleType: ClassLoader(81)", "Delete SimpleName: loader(82)", "Delete VariableDeclarationFragment(83)", "Delete FieldDeclaration(84)", "Delete TextElement: Holds the map of classes ctors we know about as well as unknown ones.(85)", "Delete TagElement(86)", "Delete Javadoc(87)", "Delete Modifier: private(88)", "Delete Modifier: final(89)", "Delete SimpleName: Map(90)", "Delete SimpleType: Map(91)", "Delete SimpleName: MethodKey(92)", "Delete SimpleType: MethodKey(93)", "Delete SimpleName: Constructor(94)", "Delete SimpleType: Constructor(95)", "Delete WildcardType: ?(96)", "Delete ParameterizedType: Constructor<?>(97)", "Delete ParameterizedType: Map<MethodKey,Constructor<?>>(98)", "Delete SimpleName: constructorsMap(99)", "Delete SimpleName: HashMap(100)", "Delete SimpleType: HashMap(101)", "Delete SimpleName: MethodKey(102)", "Delete SimpleType: MethodKey(103)", "Delete SimpleName: Constructor(104)", "Delete SimpleType: Constructor(105)", "Delete WildcardType: ?(106)", "Delete ParameterizedType: Constructor<?>(107)", "Delete ParameterizedType: HashMap<MethodKey,Constructor<?>>(108)", "Delete ClassInstanceCreation(109)", "Delete VariableDeclarationFragment(110)", "Delete FieldDeclaration(111)", "Delete TextElement: Holds the set of classes we have introspected.(112)", "Delete TagElement(113)", "Delete Javadoc(114)", "Delete Modifier: private(115)", "Delete Modifier: final(116)", "Delete SimpleName: Map(117)", "Delete SimpleType: Map(118)", "Delete SimpleName: String(119)", "Delete SimpleType: String(120)", "Delete SimpleName: Class(121)", "Delete SimpleType: Class(122)", "Delete WildcardType: ?(123)", "Delete ParameterizedType: Class<?>(124)", "Delete ParameterizedType: Map<String,Class<?>>(125)", "Delete SimpleName: constructibleClasses(126)", "Delete SimpleName: HashMap(127)", "Delete SimpleType: HashMap(128)", "Delete SimpleName: String(129)", "Delete SimpleType: String(130)", "Delete SimpleName: Class(131)", "Delete SimpleType: Class(132)", "Delete WildcardType: ?(133)", "Delete ParameterizedType: Class<?>(134)", "Delete ParameterizedType: HashMap<String,Class<?>>(135)", "Delete ClassInstanceCreation(136)", "Delete VariableDeclarationFragment(137)", "Delete FieldDeclaration(138)", "Delete TextElement: Create the introspector.(139)", "Delete TagElement(140)", "Delete SimpleName: log(141)", "Delete TextElement:  the logger to use(142)", "Delete TagElement: @param(143)", "Delete Javadoc(144)", "Delete Modifier: public(145)", "Delete SimpleName: IntrospectorBase(146)", "Delete SimpleName: Log(147)", "Delete SimpleType: Log(148)", "Delete SimpleName: log(149)", "Delete SingleVariableDeclaration(150)", "Delete ThisExpression(151)", "Delete SimpleName: rlog(152)", "Delete FieldAccess(153)", "Delete SimpleName: log(154)", "Delete Assignment: =(155)", "Delete ExpressionStatement(156)", "Delete SimpleName: loader(157)", "Delete SimpleName: getClass(158)", "Delete MethodInvocation(159)", "Delete SimpleName: getClassLoader(160)", "Delete MethodInvocation(161)", "Delete Assignment: =(162)", "Delete ExpressionStatement(163)", "Delete Block(164)", "Delete MethodDeclaration(165)", "Delete TextElement: Gets a class by name through this introspector class loader.(166)", "Delete TagElement(167)", "Delete SimpleName: className(168)", "Delete TextElement:  the class name(169)", "Delete TagElement: @param(170)", "Delete TextElement:  the class instance or null if it could not be found(171)", "Delete TagElement: @return(172)", "Delete Javadoc(173)", "Delete Modifier: public(174)", "Delete SimpleName: Class(175)", "Delete SimpleType: Class(176)", "Delete WildcardType: ?(177)", "Delete ParameterizedType: Class<?>(178)", "Delete SimpleName: getClassByName(179)", "Delete SimpleName: String(180)", "Delete SimpleType: String(181)", "Delete SimpleName: className(182)", "Delete SingleVariableDeclaration(183)", "Delete SimpleName: Class(184)", "Delete SimpleName: forName(185)", "Delete SimpleName: className(186)", "Delete BooleanLiteral: false(187)", "Delete SimpleName: loader(188)", "Delete MethodInvocation(189)", "Delete ReturnStatement(190)", "Delete Block(191)", "Delete SimpleName: ClassNotFoundException(192)", "Delete SimpleType: ClassNotFoundException(193)", "Delete SimpleName: xignore(194)", "Delete SingleVariableDeclaration(195)", "Delete NullLiteral(196)", "Delete ReturnStatement(197)", "Delete Block(198)", "Delete CatchClause(199)", "Delete TryStatement(200)", "Delete Block(201)", "Delete MethodDeclaration(202)", "Delete TextElement: Gets the method defined by the <code>MethodKey</code> for the class <code>c</code>.(203)", "Delete TagElement(204)", "Delete SimpleName: c(205)", "Delete TextElement:      Class in which the method search is taking place(206)", "Delete TagElement: @param(207)", "Delete SimpleName: key(208)", "Delete TextElement:    Key of the method being searched for(209)", "Delete TagElement: @param(210)", "Delete TextElement:  The desired method object(211)", "Delete TagElement: @return(212)", "Delete QualifiedName: MethodKey.AmbiguousException(213)", "Delete TextElement:  if no unambiguous method could be found through introspection(214)", "Delete TagElement: @throws(215)", "Delete Javadoc(216)", "Delete Modifier: public(217)", "Delete SimpleName: Method(218)", "Delete SimpleType: Method(219)", "Delete SimpleName: getMethod(220)", "Delete SimpleName: Class(221)", "Delete SimpleType: Class(222)", "Delete WildcardType: ?(223)", "Delete ParameterizedType: Class<?>(224)", "Delete SimpleName: c(225)", "Delete SingleVariableDeclaration(226)", "Delete SimpleName: MethodKey(227)", "Delete SimpleType: MethodKey(228)", "Delete SimpleName: key(229)", "Delete SingleVariableDeclaration(230)", "Delete SimpleName: ClassMap(231)", "Delete SimpleType: ClassMap(232)", "Delete SimpleName: classMap(233)", "Delete SimpleName: getMap(234)", "Delete SimpleName: c(235)", "Delete MethodInvocation(236)", "Delete VariableDeclarationFragment(237)", "Delete VariableDeclarationStatement(238)", "Delete SimpleName: classMap(239)", "Delete SimpleName: findMethod(240)", "Delete SimpleName: key(241)", "Delete MethodInvocation(242)", "Delete ReturnStatement(243)", "Delete Block(244)", "Delete QualifiedName: MethodKey.AmbiguousException(245)", "Delete SimpleType: MethodKey.AmbiguousException(246)", "Delete SimpleName: xambiguous(247)", "Delete SingleVariableDeclaration(248)", "Delete SimpleName: rlog(249)", "Delete NullLiteral(250)", "Delete InfixExpression: !=(251)", "Delete SimpleName: rlog(252)", "Delete SimpleName: isInfoEnabled(253)", "Delete MethodInvocation(254)", "Delete InfixExpression: &&(255)", "Delete SimpleName: rlog(256)", "Delete SimpleName: info(257)", "Delete StringLiteral: \"ambiguous method invocation: \"(258)", "Delete SimpleName: c(259)", "Delete SimpleName: getName(260)", "Delete MethodInvocation(261)", "Delete StringLiteral: \".\"(262)", "Delete SimpleName: key(263)", "Delete SimpleName: debugString(264)", "Delete MethodInvocation(265)", "Delete InfixExpression: +(266)", "Delete SimpleName: xambiguous(267)", "Delete MethodInvocation(268)", "Delete ExpressionStatement(269)", "Delete Block(270)", "Delete IfStatement(271)", "Delete NullLiteral(272)", "Delete ReturnStatement(273)", "Delete Block(274)", "Delete CatchClause(275)", "Delete TryStatement(276)", "Delete Block(277)", "Delete MethodDeclaration(278)", "Delete TextElement: Gets the field named by <code>key</code> for the class <code>c</code>.(279)", "Delete TagElement(280)", "Delete SimpleName: c(281)", "Delete TextElement:      Class in which the field search is taking place(282)", "Delete TagElement: @param(283)", "Delete SimpleName: key(284)", "Delete TextElement:    Name of the field being searched for(285)", "Delete TagElement: @param(286)", "Delete TextElement:  the desired field or null if it does not exist or is not accessible(287)", "Delete TagElement: @return(288)", "Delete Javadoc(289)", "Delete Modifier: public(290)", "Delete SimpleName: Field(291)", "Delete SimpleType: Field(292)", "Delete SimpleName: getField(293)", "Delete SimpleName: Class(294)", "Delete SimpleType: Class(295)", "Delete WildcardType: ?(296)", "Delete ParameterizedType: Class<?>(297)", "Delete SimpleName: c(298)", "Delete SingleVariableDeclaration(299)", "Delete SimpleName: String(300)", "Delete SimpleType: String(301)", "Delete SimpleName: key(302)", "Delete SingleVariableDeclaration(303)", "Delete SimpleName: ClassMap(304)", "Delete SimpleType: ClassMap(305)", "Delete SimpleName: classMap(306)", "Delete SimpleName: getMap(307)", "Delete SimpleName: c(308)", "Delete MethodInvocation(309)", "Delete VariableDeclarationFragment(310)", "Delete VariableDeclarationStatement(311)", "Delete SimpleName: classMap(312)", "Delete SimpleName: findField(313)", "Delete SimpleName: c(314)", "Delete SimpleName: key(315)", "Delete MethodInvocation(316)", "Delete ReturnStatement(317)", "Delete Block(318)", "Delete MethodDeclaration(319)", "Delete TextElement: Gets the array of accessible field names known for a given class.(320)", "Delete TagElement(321)", "Delete SimpleName: c(322)", "Delete TextElement:  the class(323)", "Delete TagElement: @param(324)", "Delete TextElement:  the class field names(325)", "Delete TagElement: @return(326)", "Delete Javadoc(327)", "Delete Modifier: public(328)", "Delete SimpleName: String(329)", "Delete SimpleType: String(330)", "Delete Dimension(331)", "Delete ArrayType: String[](332)", "Delete SimpleName: getFieldNames(333)", "Delete SimpleName: Class(334)", "Delete SimpleType: Class(335)", "Delete WildcardType: ?(336)", "Delete ParameterizedType: Class<?>(337)", "Delete SimpleName: c(338)", "Delete SingleVariableDeclaration(339)", "Delete SimpleName: c(340)", "Delete NullLiteral(341)", "Delete InfixExpression: ==(342)", "Delete SimpleName: String(343)", "Delete SimpleType: String(344)", "Delete Dimension(345)", "Delete ArrayType: String[](346)", "Delete NumberLiteral: 0(347)", "Delete ArrayCreation(348)", "Delete ReturnStatement(349)", "Delete Block(350)", "Delete IfStatement(351)", "Delete SimpleName: ClassMap(352)", "Delete SimpleType: ClassMap(353)", "Delete SimpleName: classMap(354)", "Delete SimpleName: getMap(355)", "Delete SimpleName: c(356)", "Delete MethodInvocation(357)", "Delete VariableDeclarationFragment(358)", "Delete VariableDeclarationStatement(359)", "Delete SimpleName: classMap(360)", "Delete SimpleName: getFieldNames(361)", "Delete MethodInvocation(362)", "Delete ReturnStatement(363)", "Delete Block(364)", "Delete MethodDeclaration(365)", "Delete TextElement: Gets the array of accessible methods names known for a given class.(366)", "Delete TagElement(367)", "Delete SimpleName: c(368)", "Delete TextElement:  the class(369)", "Delete TagElement: @param(370)", "Delete TextElement:  the class method names(371)", "Delete TagElement: @return(372)", "Delete Javadoc(373)", "Delete Modifier: public(374)", "Delete SimpleName: String(375)", "Delete SimpleType: String(376)", "Delete Dimension(377)", "Delete ArrayType: String[](378)", "Delete SimpleName: getMethodNames(379)", "Delete SimpleName: Class(380)", "Delete SimpleType: Class(381)", "Delete WildcardType: ?(382)", "Delete ParameterizedType: Class<?>(383)", "Delete SimpleName: c(384)", "Delete SingleVariableDeclaration(385)", "Delete SimpleName: c(386)", "Delete NullLiteral(387)", "Delete InfixExpression: ==(388)", "Delete SimpleName: String(389)", "Delete SimpleType: String(390)", "Delete Dimension(391)", "Delete ArrayType: String[](392)", "Delete NumberLiteral: 0(393)", "Delete ArrayCreation(394)", "Delete ReturnStatement(395)", "Delete Block(396)", "Delete IfStatement(397)", "Delete SimpleName: ClassMap(398)", "Delete SimpleType: ClassMap(399)", "Delete SimpleName: classMap(400)", "Delete SimpleName: getMap(401)", "Delete SimpleName: c(402)", "Delete MethodInvocation(403)", "Delete VariableDeclarationFragment(404)", "Delete VariableDeclarationStatement(405)", "Delete SimpleName: classMap(406)", "Delete SimpleName: getMethodNames(407)", "Delete MethodInvocation(408)", "Delete ReturnStatement(409)", "Delete Block(410)", "Delete MethodDeclaration(411)", "Delete TextElement: Gets the array of accessible method known for a given class.(412)", "Delete TagElement(413)", "Delete SimpleName: c(414)", "Delete TextElement:  the class(415)", "Delete TagElement: @param(416)", "Delete SimpleName: methodName(417)", "Delete TextElement:  the method name(418)", "Delete TagElement: @param(419)", "Delete TextElement:  the array of methods (null or not empty)(420)", "Delete TagElement: @return(421)", "Delete Javadoc(422)", "Delete Modifier: public(423)", "Delete SimpleName: Method(424)", "Delete SimpleType: Method(425)", "Delete Dimension(426)", "Delete ArrayType: Method[](427)", "Delete SimpleName: getMethods(428)", "Delete SimpleName: Class(429)", "Delete SimpleType: Class(430)", "Delete WildcardType: ?(431)", "Delete ParameterizedType: Class<?>(432)", "Delete SimpleName: c(433)", "Delete SingleVariableDeclaration(434)", "Delete SimpleName: String(435)", "Delete SimpleType: String(436)", "Delete SimpleName: methodName(437)", "Delete SingleVariableDeclaration(438)", "Delete SimpleName: c(439)", "Delete NullLiteral(440)", "Delete InfixExpression: ==(441)", "Delete NullLiteral(442)", "Delete ReturnStatement(443)", "Delete Block(444)", "Delete IfStatement(445)", "Delete SimpleName: ClassMap(446)", "Delete SimpleType: ClassMap(447)", "Delete SimpleName: classMap(448)", "Delete SimpleName: getMap(449)", "Delete SimpleName: c(450)", "Delete MethodInvocation(451)", "Delete VariableDeclarationFragment(452)", "Delete VariableDeclarationStatement(453)", "Delete SimpleName: classMap(454)", "Delete SimpleName: get(455)", "Delete SimpleName: methodName(456)", "Delete MethodInvocation(457)", "Delete ReturnStatement(458)", "Delete Block(459)", "Delete MethodDeclaration(460)", "Delete TextElement: A Constructor get cache-miss.(461)", "Delete TagElement(462)", "Delete Javadoc(463)", "Delete Modifier: private(464)", "Delete Modifier: static(465)", "Delete SimpleName: CacheMiss(466)", "Delete TextElement: The constructor used as cache-miss. (467)", "Delete TagElement(468)", "Delete Javadoc(469)", "Delete SimpleName: SuppressWarnings(470)", "Delete StringLiteral: \"unused\"(471)", "Delete SingleMemberAnnotation(472)", "Delete Modifier: public(473)", "Delete SimpleName: CacheMiss(474)", "Delete Block(475)", "Delete MethodDeclaration(476)", "Delete TypeDeclaration: class(477)", "Delete TextElement: The cache-miss marker for the constructors map. (478)", "Delete TagElement(479)", "Delete Javadoc(480)", "Delete Modifier: private(481)", "Delete Modifier: static(482)", "Delete Modifier: final(483)", "Delete SimpleName: Constructor(484)", "Delete SimpleType: Constructor(485)", "Delete WildcardType: ?(486)", "Delete ParameterizedType: Constructor<?>(487)", "Delete SimpleName: CTOR_MISS(488)", "Delete SimpleName: CacheMiss(489)", "Delete SimpleType: CacheMiss(490)", "Delete TypeLiteral(491)", "Delete SimpleName: getConstructors(492)", "Delete MethodInvocation(493)", "Delete NumberLiteral: 0(494)", "Delete ArrayAccess(495)", "Delete VariableDeclarationFragment(496)", "Delete FieldDeclaration(497)", "Delete TextElement: Sets the class loader used to solve constructors.(498)", "Delete TextElement: <p>Also cleans the constructors and methods caches.</p>(499)", "Delete TagElement(500)", "Delete SimpleName: cloader(501)", "Delete TextElement:  the class loader; if null, use this instance class loader(502)", "Delete TagElement: @param(503)", "Delete Javadoc(504)", "Delete Modifier: public(505)", "Delete PrimitiveType: void(506)", "Delete SimpleName: setLoader(507)", "Delete SimpleName: ClassLoader(508)", "Delete SimpleType: ClassLoader(509)", "Delete SimpleName: cloader(510)", "Delete SingleVariableDeclaration(511)", "Delete SimpleName: ClassLoader(512)", "Delete SimpleType: ClassLoader(513)", "Delete SimpleName: previous(514)", "Delete SimpleName: loader(515)", "Delete VariableDeclarationFragment(516)", "Delete VariableDeclarationStatement(517)", "Delete SimpleName: cloader(518)", "Delete NullLiteral(519)", "Delete InfixExpression: ==(520)", "Delete SimpleName: cloader(521)", "Delete SimpleName: getClass(522)", "Delete MethodInvocation(523)", "Delete SimpleName: getClassLoader(524)", "Delete MethodInvocation(525)", "Delete Assignment: =(526)", "Delete ExpressionStatement(527)", "Delete Block(528)", "Delete IfStatement(529)", "Delete SimpleName: cloader(530)", "Delete SimpleName: equals(531)", "Delete SimpleName: loader(532)", "Delete MethodInvocation(533)", "Delete PrefixExpression: !(534)", "Delete SimpleName: constructorsMap(535)", "Delete SimpleName: Iterator(536)", "Delete SimpleType: Iterator(537)", "Delete QualifiedName: Map.Entry(538)", "Delete SimpleType: Map.Entry(539)", "Delete SimpleName: MethodKey(540)", "Delete SimpleType: MethodKey(541)", "Delete SimpleName: Constructor(542)", "Delete SimpleType: Constructor(543)", "Delete WildcardType: ?(544)", "Delete ParameterizedType: Constructor<?>(545)", "Delete ParameterizedType: Map.Entry<MethodKey,Constructor<?>>(546)", "Delete ParameterizedType: Iterator<Map.Entry<MethodKey,Constructor<?>>>(547)", "Delete SimpleName: entries(548)", "Delete SimpleName: constructorsMap(549)", "Delete SimpleName: entrySet(550)", "Delete MethodInvocation(551)", "Delete SimpleName: iterator(552)", "Delete MethodInvocation(553)", "Delete VariableDeclarationFragment(554)", "Delete VariableDeclarationStatement(555)", "Delete SimpleName: entries(556)", "Delete SimpleName: hasNext(557)", "Delete MethodInvocation(558)", "Delete QualifiedName: Map.Entry(559)", "Delete SimpleType: Map.Entry(560)", "Delete SimpleName: MethodKey(561)", "Delete SimpleType: MethodKey(562)", "Delete SimpleName: Constructor(563)", "Delete SimpleType: Constructor(564)", "Delete WildcardType: ?(565)", "Delete ParameterizedType: Constructor<?>(566)", "Delete ParameterizedType: Map.Entry<MethodKey,Constructor<?>>(567)", "Delete SimpleName: entry(568)", "Delete SimpleName: entries(569)", "Delete SimpleName: next(570)", "Delete MethodInvocation(571)", "Delete VariableDeclarationFragment(572)", "Delete VariableDeclarationStatement(573)", "Delete SimpleName: Class(574)", "Delete SimpleType: Class(575)", "Delete WildcardType: ?(576)", "Delete ParameterizedType: Class<?>(577)", "Delete SimpleName: clazz(578)", "Delete SimpleName: entry(579)", "Delete SimpleName: getValue(580)", "Delete MethodInvocation(581)", "Delete SimpleName: getDeclaringClass(582)", "Delete MethodInvocation(583)", "Delete VariableDeclarationFragment(584)", "Delete VariableDeclarationStatement(585)", "Delete SimpleName: isLoadedBy(586)", "Delete SimpleName: previous(587)", "Delete SimpleName: clazz(588)", "Delete MethodInvocation(589)", "Delete SimpleName: entries(590)", "Delete SimpleName: remove(591)", "Delete MethodInvocation(592)", "Delete ExpressionStatement(593)", "Delete SimpleName: constructibleClasses(594)", "Delete SimpleName: remove(595)", "Delete SimpleName: entry(596)", "Delete SimpleName: getKey(597)", "Delete MethodInvocation(598)", "Delete SimpleName: getMethod(599)", "Delete MethodInvocation(600)", "Delete MethodInvocation(601)", "Delete ExpressionStatement(602)", "Delete Block(603)", "Delete IfStatement(604)", "Delete Block(605)", "Delete WhileStatement(606)", "Delete Block(607)", "Delete SynchronizedStatement(608)", "Delete SimpleName: classMethodMaps(609)", "Delete SimpleName: Iterator(610)", "Delete SimpleType: Iterator(611)", "Delete QualifiedName: Map.Entry(612)", "Delete SimpleType: Map.Entry(613)", "Delete SimpleName: Class(614)", "Delete SimpleType: Class(615)", "Delete WildcardType: ?(616)", "Delete ParameterizedType: Class<?>(617)", "Delete SimpleName: ClassMap(618)", "Delete SimpleType: ClassMap(619)", "Delete ParameterizedType: Map.Entry<Class<?>,ClassMap>(620)", "Delete ParameterizedType: Iterator<Map.Entry<Class<?>,ClassMap>>(621)", "Delete SimpleName: entries(622)", "Delete SimpleName: classMethodMaps(623)", "Delete SimpleName: entrySet(624)", "Delete MethodInvocation(625)", "Delete SimpleName: iterator(626)", "Delete MethodInvocation(627)", "Delete VariableDeclarationFragment(628)", "Delete VariableDeclarationStatement(629)", "Delete SimpleName: entries(630)", "Delete SimpleName: hasNext(631)", "Delete MethodInvocation(632)", "Delete QualifiedName: Map.Entry(633)", "Delete SimpleType: Map.Entry(634)", "Delete SimpleName: Class(635)", "Delete SimpleType: Class(636)", "Delete WildcardType: ?(637)", "Delete ParameterizedType: Class<?>(638)", "Delete SimpleName: ClassMap(639)", "Delete SimpleType: ClassMap(640)", "Delete ParameterizedType: Map.Entry<Class<?>,ClassMap>(641)", "Delete SimpleName: entry(642)", "Delete SimpleName: entries(643)", "Delete SimpleName: next(644)", "Delete MethodInvocation(645)", "Delete VariableDeclarationFragment(646)", "Delete VariableDeclarationStatement(647)", "Delete SimpleName: Class(648)", "Delete SimpleType: Class(649)", "Delete WildcardType: ?(650)", "Delete ParameterizedType: Class<?>(651)", "Delete SimpleName: clazz(652)", "Delete SimpleName: entry(653)", "Delete SimpleName: getKey(654)", "Delete MethodInvocation(655)", "Delete VariableDeclarationFragment(656)", "Delete VariableDeclarationStatement(657)", "Delete SimpleName: isLoadedBy(658)", "Delete SimpleName: previous(659)", "Delete SimpleName: clazz(660)", "Delete MethodInvocation(661)", "Delete SimpleName: entries(662)", "Delete SimpleName: remove(663)", "Delete MethodInvocation(664)", "Delete ExpressionStatement(665)", "Delete Block(666)", "Delete IfStatement(667)", "Delete Block(668)", "Delete WhileStatement(669)", "Delete Block(670)", "Delete SynchronizedStatement(671)", "Delete SimpleName: loader(672)", "Delete SimpleName: cloader(673)", "Delete Assignment: =(674)", "Delete ExpressionStatement(675)", "Delete Block(676)", "Delete IfStatement(677)", "Delete Block(678)", "Delete MethodDeclaration(679)", "Delete TextElement: Checks whether a class is loaded through a given class loader or one of its ascendants.(680)", "Delete TagElement(681)", "Delete SimpleName: loader(682)", "Delete TextElement:  the class loader(683)", "Delete TagElement: @param(684)", "Delete SimpleName: clazz(685)", "Delete TextElement:  the class to check(686)", "Delete TagElement: @param(687)", "Delete TextElement:  true if clazz was loaded through the loader, false otherwise(688)", "Delete TagElement: @return(689)", "Delete Javadoc(690)", "Delete Modifier: private(691)", "Delete Modifier: static(692)", "Delete PrimitiveType: boolean(693)", "Delete SimpleName: isLoadedBy(694)", "Delete SimpleName: ClassLoader(695)", "Delete SimpleType: ClassLoader(696)", "Delete SimpleName: loader(697)", "Delete SingleVariableDeclaration(698)", "Delete SimpleName: Class(699)", "Delete SimpleType: Class(700)", "Delete WildcardType: ?(701)", "Delete ParameterizedType: Class<?>(702)", "Delete SimpleName: clazz(703)", "Delete SingleVariableDeclaration(704)", "Delete SimpleName: loader(705)", "Delete NullLiteral(706)", "Delete InfixExpression: !=(707)", "Delete SimpleName: ClassLoader(708)", "Delete SimpleType: ClassLoader(709)", "Delete SimpleName: cloader(710)", "Delete SimpleName: clazz(711)", "Delete SimpleName: getClassLoader(712)", "Delete MethodInvocation(713)", "Delete VariableDeclarationFragment(714)", "Delete VariableDeclarationStatement(715)", "Delete SimpleName: cloader(716)", "Delete NullLiteral(717)", "Delete InfixExpression: !=(718)", "Delete SimpleName: cloader(719)", "Delete SimpleName: equals(720)", "Delete SimpleName: loader(721)", "Delete MethodInvocation(722)", "Delete BooleanLiteral: true(723)", "Delete ReturnStatement(724)", "Delete Block(725)", "Delete SimpleName: cloader(726)", "Delete SimpleName: cloader(727)", "Delete SimpleName: getParent(728)", "Delete MethodInvocation(729)", "Delete Assignment: =(730)", "Delete ExpressionStatement(731)", "Delete Block(732)", "Delete IfStatement(733)", "Delete Block(734)", "Delete WhileStatement(735)", "Delete Block(736)", "Delete IfStatement(737)", "Delete BooleanLiteral: false(738)", "Delete ReturnStatement(739)", "Delete Block(740)", "Delete MethodDeclaration(741)", "Delete TextElement: Gets the constructor defined by the <code>MethodKey</code>.(742)", "Delete TagElement(743)", "Delete SimpleName: key(744)", "Delete TextElement:    Key of the constructor being searched for(745)", "Delete TagElement: @param(746)", "Delete TextElement:  The desired constructor object(747)", "Delete TextElement: or null if no unambiguous constructor could be found through introspection.(748)", "Delete TagElement: @return(749)", "Delete Javadoc(750)", "Delete Modifier: public(751)", "Delete SimpleName: Constructor(752)", "Delete SimpleType: Constructor(753)", "Delete WildcardType: ?(754)", "Delete ParameterizedType: Constructor<?>(755)", "Delete SimpleName: getConstructor(756)", "Delete Modifier: final(757)", "Delete SimpleName: MethodKey(758)", "Delete SimpleType: MethodKey(759)", "Delete SimpleName: key(760)", "Delete SingleVariableDeclaration(761)", "Delete SimpleName: getConstructor(762)", "Delete NullLiteral(763)", "Delete SimpleName: key(764)", "Delete MethodInvocation(765)", "Delete ReturnStatement(766)", "Delete Block(767)", "Delete MethodDeclaration(768)", "Delete TextElement: Gets the constructor defined by the <code>MethodKey</code>.(769)", "Delete TagElement(770)", "Delete SimpleName: c(771)", "Delete TextElement:  the class we want to instantiate(772)", "Delete TagElement: @param(773)", "Delete SimpleName: key(774)", "Delete TextElement:    Key of the constructor being searched for(775)", "Delete TagElement: @param(776)", "Delete TextElement:  The desired constructor object(777)", "Delete TextElement: or null if no unambiguous constructor could be found through introspection.(778)", "Delete TagElement: @return(779)", "Delete Javadoc(780)", "Delete Modifier: public(781)", "Delete SimpleName: Constructor(782)", "Delete SimpleType: Constructor(783)", "Delete WildcardType: ?(784)", "Delete ParameterizedType: Constructor<?>(785)", "Delete SimpleName: getConstructor(786)", "Delete Modifier: final(787)", "Delete SimpleName: Class(788)", "Delete SimpleType: Class(789)", "Delete WildcardType: ?(790)", "Delete ParameterizedType: Class<?>(791)", "Delete SimpleName: c(792)", "Delete SingleVariableDeclaration(793)", "Delete Modifier: final(794)", "Delete SimpleName: MethodKey(795)", "Delete SimpleType: MethodKey(796)", "Delete SimpleName: key(797)", "Delete SingleVariableDeclaration(798)", "Delete SimpleName: Constructor(799)", "Delete SimpleType: Constructor(800)", "Delete WildcardType: ?(801)", "Delete ParameterizedType: Constructor<?>(802)", "Delete SimpleName: ctor(803)", "Delete NullLiteral(804)", "Delete VariableDeclarationFragment(805)", "Delete VariableDeclarationStatement(806)", "Delete SimpleName: constructorsMap(807)", "Delete SimpleName: ctor(808)", "Delete SimpleName: constructorsMap(809)", "Delete SimpleName: get(810)", "Delete SimpleName: key(811)", "Delete MethodInvocation(812)", "Delete Assignment: =(813)", "Delete ExpressionStatement(814)", "Delete SimpleName: CTOR_MISS(815)", "Delete SimpleName: equals(816)", "Delete SimpleName: ctor(817)", "Delete MethodInvocation(818)", "Delete NullLiteral(819)", "Delete ReturnStatement(820)", "Delete Block(821)", "Delete IfStatement(822)", "Delete SimpleName: ctor(823)", "Delete NullLiteral(824)", "Delete InfixExpression: ==(825)", "Delete Modifier: final(826)", "Delete SimpleName: String(827)", "Delete SimpleType: String(828)", "Delete SimpleName: cname(829)", "Delete SimpleName: key(830)", "Delete SimpleName: getMethod(831)", "Delete MethodInvocation(832)", "Delete VariableDeclarationFragment(833)", "Delete VariableDeclarationStatement(834)", "Delete SimpleName: Class(835)", "Delete SimpleType: Class(836)", "Delete WildcardType: ?(837)", "Delete ParameterizedType: Class<?>(838)", "Delete SimpleName: clazz(839)", "Delete SimpleName: constructibleClasses(840)", "Delete SimpleName: get(841)", "Delete SimpleName: cname(842)", "Delete MethodInvocation(843)", "Delete VariableDeclarationFragment(844)", "Delete VariableDeclarationStatement(845)", "Delete SimpleName: clazz(846)", "Delete NullLiteral(847)", "Delete InfixExpression: ==(848)", "Delete SimpleName: c(849)", "Delete NullLiteral(850)", "Delete InfixExpression: !=(851)", "Delete SimpleName: c(852)", "Delete SimpleName: getName(853)", "Delete MethodInvocation(854)", "Delete SimpleName: equals(855)", "Delete SimpleName: key(856)", "Delete SimpleName: getMethod(857)", "Delete MethodInvocation(858)", "Delete MethodInvocation(859)", "Delete InfixExpression: &&(860)", "Delete SimpleName: clazz(861)", "Delete SimpleName: c(862)", "Delete Assignment: =(863)", "Delete ExpressionStatement(864)", "Delete Block(865)", "Delete SimpleName: clazz(866)", "Delete SimpleName: loader(867)", "Delete SimpleName: loadClass(868)", "Delete SimpleName: cname(869)", "Delete MethodInvocation(870)", "Delete Assignment: =(871)", "Delete ExpressionStatement(872)", "Delete Block(873)", "Delete IfStatement(874)", "Delete SimpleName: constructibleClasses(875)", "Delete SimpleName: put(876)", "Delete SimpleName: cname(877)", "Delete SimpleName: clazz(878)", "Delete MethodInvocation(879)", "Delete ExpressionStatement(880)", "Delete Block(881)", "Delete IfStatement(882)", "Delete SimpleName: List(883)", "Delete SimpleType: List(884)", "Delete SimpleName: Constructor(885)", "Delete SimpleType: Constructor(886)", "Delete WildcardType: ?(887)", "Delete ParameterizedType: Constructor<?>(888)", "Delete ParameterizedType: List<Constructor<?>>(889)", "Delete SimpleName: l(890)", "Delete SimpleName: LinkedList(891)", "Delete SimpleType: LinkedList(892)", "Delete SimpleName: Constructor(893)", "Delete SimpleType: Constructor(894)", "Delete WildcardType: ?(895)", "Delete ParameterizedType: Constructor<?>(896)", "Delete ParameterizedType: LinkedList<Constructor<?>>(897)", "Delete ClassInstanceCreation(898)", "Delete VariableDeclarationFragment(899)", "Delete VariableDeclarationStatement(900)", "Delete SimpleName: Constructor(901)", "Delete SimpleType: Constructor(902)", "Delete WildcardType: ?(903)", "Delete ParameterizedType: Constructor<?>(904)", "Delete SimpleName: ictor(905)", "Delete SingleVariableDeclaration(906)", "Delete SimpleName: clazz(907)", "Delete SimpleName: getConstructors(908)", "Delete MethodInvocation(909)", "Delete SimpleName: l(910)", "Delete SimpleName: add(911)", "Delete SimpleName: ictor(912)", "Delete MethodInvocation(913)", "Delete ExpressionStatement(914)", "Delete Block(915)", "Delete EnhancedForStatement(916)", "Delete SimpleName: ctor(917)", "Delete SimpleName: key(918)", "Delete SimpleName: getMostSpecificConstructor(919)", "Delete SimpleName: l(920)", "Delete MethodInvocation(921)", "Delete Assignment: =(922)", "Delete ExpressionStatement(923)", "Delete SimpleName: ctor(924)", "Delete NullLiteral(925)", "Delete InfixExpression: !=(926)", "Delete SimpleName: constructorsMap(927)", "Delete SimpleName: put(928)", "Delete SimpleName: key(929)", "Delete SimpleName: ctor(930)", "Delete MethodInvocation(931)", "Delete ExpressionStatement(932)", "Delete Block(933)", "Delete SimpleName: constructorsMap(934)", "Delete SimpleName: put(935)", "Delete SimpleName: key(936)", "Delete SimpleName: CTOR_MISS(937)", "Delete MethodInvocation(938)", "Delete ExpressionStatement(939)", "Delete Block(940)", "Delete IfStatement(941)", "Delete Block(942)", "Delete SimpleName: ClassNotFoundException(943)", "Delete SimpleType: ClassNotFoundException(944)", "Delete SimpleName: xnotfound(945)", "Delete SingleVariableDeclaration(946)", "Delete SimpleName: rlog(947)", "Delete NullLiteral(948)", "Delete InfixExpression: !=(949)", "Delete SimpleName: rlog(950)", "Delete SimpleName: isInfoEnabled(951)", "Delete MethodInvocation(952)", "Delete InfixExpression: &&(953)", "Delete SimpleName: rlog(954)", "Delete SimpleName: info(955)", "Delete StringLiteral: \"unable to find class: \"(956)", "Delete SimpleName: cname(957)", "Delete StringLiteral: \".\"(958)", "Delete SimpleName: key(959)", "Delete SimpleName: debugString(960)", "Delete MethodInvocation(961)", "Delete InfixExpression: +(962)", "Delete SimpleName: xnotfound(963)", "Delete MethodInvocation(964)", "Delete ExpressionStatement(965)", "Delete Block(966)", "Delete IfStatement(967)", "Delete SimpleName: ctor(968)", "Delete NullLiteral(969)", "Delete Assignment: =(970)", "Delete ExpressionStatement(971)", "Delete Block(972)", "Delete CatchClause(973)", "Delete QualifiedName: MethodKey.AmbiguousException(974)", "Delete SimpleType: MethodKey.AmbiguousException(975)", "Delete SimpleName: xambiguous(976)", "Delete SingleVariableDeclaration(977)", "Delete SimpleName: rlog(978)", "Delete NullLiteral(979)", "Delete InfixExpression: !=(980)", "Delete SimpleName: rlog(981)", "Delete SimpleName: isInfoEnabled(982)", "Delete MethodInvocation(983)", "Delete InfixExpression: &&(984)", "Delete SimpleName: rlog(985)", "Delete SimpleName: info(986)", "Delete StringLiteral: \"ambiguous constructor invocation: \"(987)", "Delete SimpleName: cname(988)", "Delete StringLiteral: \".\"(989)", "Delete SimpleName: key(990)", "Delete SimpleName: debugString(991)", "Delete MethodInvocation(992)", "Delete InfixExpression: +(993)", "Delete SimpleName: xambiguous(994)", "Delete MethodInvocation(995)", "Delete ExpressionStatement(996)", "Delete Block(997)", "Delete IfStatement(998)", "Delete SimpleName: ctor(999)", "Delete NullLiteral(1000)", "Delete Assignment: =(1001)", "Delete ExpressionStatement(1002)", "Delete Block(1003)", "Delete CatchClause(1004)", "Delete TryStatement(1005)", "Delete Block(1006)", "Delete IfStatement(1007)", "Delete SimpleName: ctor(1008)", "Delete ReturnStatement(1009)", "Delete Block(1010)", "Delete SynchronizedStatement(1011)", "Delete Block(1012)", "Delete MethodDeclaration(1013)", "Delete TextElement: Gets the ClassMap for a given class.(1014)", "Delete TagElement(1015)", "Delete SimpleName: c(1016)", "Delete TextElement:  the class(1017)", "Delete TagElement: @param(1018)", "Delete TextElement:  the class map(1019)", "Delete TagElement: @return(1020)", "Delete Javadoc(1021)", "Delete Modifier: private(1022)", "Delete SimpleName: ClassMap(1023)", "Delete SimpleType: ClassMap(1024)", "Delete SimpleName: getMap(1025)", "Delete SimpleName: Class(1026)", "Delete SimpleType: Class(1027)", "Delete WildcardType: ?(1028)", "Delete ParameterizedType: Class<?>(1029)", "Delete SimpleName: c(1030)", "Delete SingleVariableDeclaration(1031)", "Delete SimpleName: classMethodMaps(1032)", "Delete SimpleName: ClassMap(1033)", "Delete SimpleType: ClassMap(1034)", "Delete SimpleName: classMap(1035)", "Delete SimpleName: classMethodMaps(1036)", "Delete SimpleName: get(1037)", "Delete SimpleName: c(1038)", "Delete MethodInvocation(1039)", "Delete VariableDeclarationFragment(1040)", "Delete VariableDeclarationStatement(1041)", "Delete SimpleName: classMap(1042)", "Delete NullLiteral(1043)", "Delete InfixExpression: ==(1044)", "Delete SimpleName: classMap(1045)", "Delete SimpleName: ClassMap(1046)", "Delete SimpleType: ClassMap(1047)", "Delete SimpleName: c(1048)", "Delete SimpleName: rlog(1049)", "Delete ClassInstanceCreation(1050)", "Delete Assignment: =(1051)", "Delete ExpressionStatement(1052)", "Delete SimpleName: classMethodMaps(1053)", "Delete SimpleName: put(1054)", "Delete SimpleName: c(1055)", "Delete SimpleName: classMap(1056)", "Delete MethodInvocation(1057)", "Delete ExpressionStatement(1058)", "Delete Block(1059)", "Delete IfStatement(1060)", "Delete SimpleName: classMap(1061)", "Delete ReturnStatement(1062)", "Delete Block(1063)", "Delete SynchronizedStatement(1064)", "Delete Block(1065)", "Delete MethodDeclaration(1066)", "Delete TypeDeclaration: class(1067)"]}}, {"MethodKey_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.apache.commons.jexl2.internal.introspection", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.LinkedList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: appArgs", "DEL VariableDeclarationExpression", "DEL FieldDeclaration", "DEL SimpleType: Class", "DEL QualifiedName: Integer.TYPE", "DEL ReturnStatement", "DEL TagElement", "DEL InfixExpression: ==", "DEL TextElement: method invocation conversion, treating object types of primitive", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Class", "DEL InfixExpression: ==", "DEL Modifier: public", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL ParameterizedType: Class<?>", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: app", "DEL SimpleType: T", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL BooleanLiteral: true", "DEL WildcardType: ?", "DEL ThisExpression", "DEL BooleanLiteral: true", "DEL SimpleName: actual", "DEL SimpleType: Class", "DEL BooleanLiteral: false", "DEL NullLiteral", "DEL NumberLiteral: 1", "DEL ThisExpression", "DEL SimpleName: isArray", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: getFirst", "DEL SimpleType: Float", "DEL TagElement", "DEL SimpleName: MORE_SPECIFIC", "DEL SimpleName: Class", "DEL ParameterizedType: Class<?>", "DEL TextElement:  Method or Constructor", "DEL SimpleName: Iterator", "DEL Assignment: =", "DEL Modifier: final", "DEL ParameterizedType: List<Constructor<?>>", "DEL PostfixExpression: ++", "DEL NumberLiteral: 1", "DEL SimpleType: Class", "DEL WildcardType: ?", "DEL MethodDeclaration", "DEL SimpleType: String", "DEL ParameterizedType: Class<?>", "DEL SimpleName: aMethod", "DEL TextElement:  if there is more than one.", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: Constructor", "DEL TagElement", "DEL InfixExpression: ||", "DEL NumberLiteral: 1", "DEL InfixExpression: ==", "DEL SimpleType: MethodKey", "DEL SimpleName: Method", "DEL TextElement: subject to widening conversion to formal.", "DEL MethodInvocation", "DEL ParameterizedType: Class<?>", "DEL SimpleName: formal", "DEL ArrayAccess", "DEL IfStatement", "DEL SimpleName: c", "DEL InfixExpression: &&", "DEL SimpleName: possibleVarArg", "DEL SimpleName: c", "DEL IfStatement", "DEL TagElement: @param", "DEL ParameterizedType: Constructor<?>", "DEL TextElement:  method(p0, p1, ...)", "DEL SimpleName: methods", "DEL BooleanLiteral: true", "DEL NumberLiteral: 1", "DEL SimpleName: isEmpty", "DEL SimpleName: method", "DEL QualifiedName: c1.length", "DEL PrimitiveType: int", "DEL SimpleName: actual", "DEL BooleanLiteral: true", "DEL SimpleName: max", "DEL ReturnStatement", "DEL TagElement", "DEL InfixExpression: ==", "DEL SimpleName: actual", "DEL VariableDeclarationFragment", "DEL SimpleName: Long", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleName: lessSpecific", "DEL Modifier: public", "DEL InfixExpression: ||", "DEL SuperConstructorInvocation", "DEL TextElement: Returns all methods that are applicable to actual argument types.", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL SimpleName: formal", "DEL TextElement:   method that will be called", "DEL TypeLiteral", "DEL SimpleName: CONSTRUCTORS", "DEL IfStatement", "DEL SimpleName: possibleVarArg", "DEL InfixExpression: ==", "DEL SimpleName: isStrictConvertible", "DEL SimpleName: actual", "DEL SimpleName: size", "DEL NullLiteral", "DEL ParameterizedType: Class<?>", "DEL BooleanLiteral: false", "DEL SimpleName: hashCode", "DEL TagElement: @param", "DEL SimpleName: c", "DEL SimpleName: isPrimitive", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL QualifiedName: c1.length", "DEL MethodInvocation", "DEL SimpleName: hash", "DEL IfStatement", "DEL SimpleName: possibleVarArg", "DEL TagElement: @param", "DEL TypeLiteral", "DEL InfixExpression: ||", "DEL ReturnStatement", "DEL SimpleName: formal", "DEL Modifier: private", "DEL InfixExpression: &&", "DEL TagElement: @return", "DEL SimpleName: method", "DEL SimpleName: Class", "DEL InfixExpression: ==", "DEL SimpleName: primDiff", "DEL Dimension", "DEL SuperConstructorInvocation", "DEL Block", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: LinkedList", "DEL SimpleName: hash", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL SimpleName: String", "DEL SimpleName: i", "DEL SimpleName: debugString", "DEL PrimitiveType: int", "DEL CharacterLiteral: '('", "DEL SimpleName: actual", "DEL SimpleName: params", "DEL TagElement", "DEL SimpleName: append", "DEL SimpleName: MORE_SPECIFIC", "DEL SimpleType: StringBuilder", "DEL Javadoc", "DEL SimpleName: actual", "DEL ExpressionStatement", "DEL ForStatement", "DEL SimpleName: toString", "DEL SimpleType: MethodKey", "DEL Modifier: public", "DEL IfStatement", "DEL SimpleName: Parameters", "DEL InfixExpression: &&", "DEL TagElement: @return", "DEL SimpleName: isArray", "DEL SimpleName: args", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL QualifiedName: key.method", "DEL MethodRefParameter", "DEL SimpleName: String", "DEL SimpleName: Class", "DEL PrefixExpression: ++", "DEL TextElement:  the actual types of the arguments", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: Class", "DEL SimpleType: Byte", "DEL TagElement", "DEL Javadoc", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL SimpleName: INCOMPARABLE", "DEL SimpleType: Class", "DEL VariableDeclarationStatement", "DEL SimpleName: isApplicable", "DEL NumberLiteral: 1", "DEL SimpleName: Byte", "DEL SimpleType: T", "DEL SimpleName: methods", "DEL Modifier: public", "DEL InfixExpression: <", "DEL TextElement: Gets this key's method name.", "DEL Block", "DEL QualifiedName: Byte.TYPE", "DEL SimpleName: params", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL WildcardType: ?", "DEL SimpleType: Class", "DEL SimpleType: List", "DEL PrefixExpression: !", "DEL ParameterizedType: Class<?>", "DEL Block", "DEL SimpleName: methodArgs", "DEL TextElement:  whether or not we're dealing with the last parameter", "DEL InfixExpression: ||", "DEL SimpleName: T", "DEL VariableDeclarationStatement", "DEL SimpleName: formal", "DEL MethodInvocation", "DEL SimpleName: c1MoreSpecific", "DEL SimpleName: Float", "DEL Block", "DEL TypeLiteral", "DEL SimpleName: actual", "DEL SimpleName: possibleVarArg", "DEL SimpleType: T", "DEL QualifiedName: classes.length", "DEL Block", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL QualifiedName: methodArgs.length", "DEL SimpleName: Class", "DEL SimpleName: isInvocationConvertible", "DEL FieldAccess", "DEL InfixExpression: >", "DEL VariableDeclarationFragment", "DEL TextElement: Roughly 3x faster than string key to access the map & uses less memory.", "DEL ReturnStatement", "DEL SimpleType: Iterator", "DEL TagElement", "DEL ParameterizedType: LinkedList<T>", "DEL SimpleName: isPrimitive", "DEL PrimitiveType: boolean", "DEL Block", "DEL TextElement: convertible to another type represented by a class object using a", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL SimpleName: actual", "DEL SimpleName: Iterator", "DEL MethodDeclaration", "DEL BooleanLiteral: false", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL ArrayType: Class<?>[]", "DEL ArrayType: Class<?>[]", "DEL ArrayAccess", "DEL WildcardType: ?", "DEL PrefixExpression: ++", "DEL Block", "DEL Block", "DEL ArrayType: Class<?>[]", "DEL Block", "DEL SimpleName: isStrictConvertible", "DEL Assignment: =", "DEL SimpleName: METHODS", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL SimpleName: classes", "DEL SimpleName: i", "DEL TextElement: A marker for empty parameter list. ", "DEL Javadoc", "DEL SimpleName: primitiveClass", "DEL SimpleName: LinkedList", "DEL ExpressionStatement", "DEL Block", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleType: T", "DEL TextElement:          the actual parameter type.", "DEL Modifier: protected", "DEL NumberLiteral: 1", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL TextElement:  MORE_SPECIFIC if c1 is more specific than c2, LESS_SPECIFIC if", "DEL Assignment: +=", "DEL FieldDeclaration", "DEL SimpleName: getMostSpecificConstructor", "DEL SimpleName: method", "DEL InfixExpression: ||", "DEL SimpleName: actual", "DEL SimpleName: method", "DEL SimpleType: Short", "DEL SimpleName: method", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL SimpleName: String", "DEL TagElement: @param", "DEL SimpleName: params", "DEL Modifier: private", "DEL SimpleName: applicables", "DEL InfixExpression: <", "DEL BooleanLiteral: true", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL TypeLiteral", "DEL SimpleName: builder", "DEL SimpleName: hashCode", "DEL SimpleName: Short", "DEL InfixExpression: &&", "DEL SimpleName: getFirst", "DEL FieldAccess", "DEL TagElement", "DEL SimpleType: Iterator", "DEL VariableDeclarationFragment", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleName: method", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: getParameterTypes", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL TextElement: parameter type should be convertible", "DEL ArrayAccess", "DEL SimpleName: c", "DEL TextElement:  a list of methods.", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrimitiveType: boolean", "DEL SimpleName: Override", "DEL WildcardType: ?", "DEL SimpleName: HASH", "DEL QualifiedName: Byte.TYPE", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL SimpleName: app", "DEL SimpleName: INCOMPARABLE", "DEL TagElement: @return", "DEL SimpleName: applicables", "DEL SimpleName: Method", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleType: LinkedList", "DEL SimpleName: Integer", "DEL InfixExpression: &&", "DEL TextElement:  a method or constructor", "DEL SimpleName: hashCode", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL Block", "DEL Block", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: i", "DEL Javadoc", "DEL TextElement: type or an object type of a primitive type that can be converted to", "DEL SwitchCase", "DEL ThisExpression", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: formal", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL SimpleName: isArray", "DEL SimpleName: formal", "DEL ReturnStatement", "DEL QualifiedName: classes.length", "DEL PrimitiveType: int", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: add", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL ParameterizedType: Class<?>", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL TypeLiteral", "DEL TagElement: @param", "DEL IfStatement", "DEL MethodInvocation", "DEL QualifiedName: Integer.TYPE", "DEL BooleanLiteral: true", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL CastExpression", "DEL InfixExpression: ==", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL TagElement: @param", "DEL SimpleName: getName", "DEL SimpleName: Class", "DEL SimpleType: T", "DEL SimpleName: Class", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: Byte", "DEL SimpleName: params", "DEL SimpleType: Method", "DEL MethodInvocation", "DEL SimpleName: methods", "DEL ParameterizedType: Constructor<?>", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL ArrayType: Class<?>[]", "DEL SimpleType: Constructor", "DEL TextElement: int foo(int) and int foo(Integer) do generate the same key.", "DEL SimpleName: i", "DEL TextElement: in the method declaration", "DEL Modifier: private", "DEL SimpleName: List", "DEL SimpleName: MethodKey", "DEL SimpleName: size", "DEL SimpleType: T", "DEL PrimitiveType: boolean", "DEL TextElement: Extract the parameter types from its applicable argument.", "DEL SimpleName: classes", "DEL SimpleName: parm", "DEL SimpleName: applicable", "DEL Dimension", "DEL TextElement:  the most specific constructor.", "DEL TextElement: A method/ctor doesn't match a previously compared one.", "DEL SimpleName: Boolean", "DEL ArrayAccess", "DEL BooleanLiteral: false", "DEL TextElement:          the formal parameter type to which the actual", "DEL SimpleName: StringBuilder", "DEL Javadoc", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL InfixExpression: &&", "DEL SimpleName: getMostSpecific", "DEL BooleanLiteral: false", "DEL SimpleName: formal", "DEL TypeDeclaration: class", "DEL SimpleType: T", "DEL TypeLiteral", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL BooleanLiteral: true", "DEL BreakStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: LinkedList", "DEL SimpleName: actual", "DEL WildcardType: ?", "DEL TextElement:  a list that contains only applicable methods (number of", "DEL SimpleType: Integer", "DEL VariableDeclarationStatement", "DEL QualifiedName: c1.length", "DEL SimpleName: c1", "DEL TypeLiteral", "DEL Modifier: static", "DEL TagElement: @return", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: next", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL WildcardType: ?", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: isConvertible", "DEL InfixExpression: ==", "DEL ArrayType: Object[]", "DEL SimpleName: actual", "DEL IfStatement", "DEL TextElement: </p>", "DEL SimpleName: app", "DEL SimpleName: formal", "DEL Modifier: static", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL WildcardType: ?", "DEL ThisExpression", "DEL Javadoc", "DEL Modifier: private", "DEL TextElement: Simple distinguishable exception, used when", "DEL IfStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL PrimitiveType: int", "DEL SimpleName: actual", "DEL ReturnStatement", "DEL PrefixExpression: ++", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Class<?>", "DEL Dimension", "DEL SimpleName: T", "DEL MethodInvocation", "DEL SimpleName: app", "DEL FieldDeclaration", "DEL SimpleName: Parameters", "DEL InfixExpression: ||", "DEL SimpleName: maximals", "DEL TagElement: @param", "DEL Assignment: =", "DEL Modifier: static", "DEL BooleanLiteral: false", "DEL ArrayAccess", "DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: formal", "DEL BooleanLiteral: true", "DEL SimpleType: LinkedList", "DEL SimpleName: isConvertible", "DEL VariableDeclarationStatement", "DEL SimpleName: actual", "DEL ParenthesizedExpression", "DEL SimpleName: maximal", "DEL TagElement: @return", "DEL SimpleName: method", "DEL WildcardType: ?", "DEL StringLiteral: \", \"", "DEL SimpleName: actual", "DEL SimpleType: LinkedList", "DEL NumberLiteral: 2314636505414551664L", "DEL SimpleName: c2", "DEL TextElement:  true if method is applicable to arguments", "DEL InfixExpression: ==", "DEL SimpleName: List", "DEL TextElement: in the method declaration", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: Short", "DEL NumberLiteral: 0", "DEL SimpleName: actual", "DEL TextElement: <p>", "DEL ParameterizedType: List<T>", "DEL StringLiteral: \"null\"", "DEL MethodDeclaration", "DEL SimpleName: actual", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: List", "DEL SimpleName: isApplicable", "DEL SimpleName: maximals", "DEL TextElement: parameter type should be convertible", "DEL TextElement: The method name. ", "DEL TagElement: @param", "DEL QualifiedName: classes.length", "DEL SimpleName: args", "DEL Block", "DEL ParameterizedType: LinkedList<T>", "DEL SimpleName: formal", "DEL TextElement:  the most specific method.", "DEL SimpleType: Void", "DEL ForStatement", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL ParenthesizedExpression", "DEL ParenthesizedExpression", "DEL SimpleName: Method", "DEL SimpleName: T", "DEL SimpleName: moreSpecific", "DEL SimpleName: hasNext", "DEL InfixExpression: ==", "DEL PrefixExpression: !", "DEL WildcardType: ?", "DEL Block", "DEL ReturnStatement", "DEL ConditionalExpression", "DEL InfixExpression: ||", "DEL IfStatement", "DEL Modifier: abstract", "DEL Assignment: =", "DEL Block", "DEL SimpleName: hasNext", "DEL TypeLiteral", "DEL QualifiedName: key.params", "DEL Block", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TagElement", "DEL InfixExpression: &&", "DEL SimpleName: Constructor", "DEL Block", "DEL QualifiedName: Character.TYPE", "DEL TagElement: @return", "DEL TagElement: @param", "DEL SimpleName: iterator", "DEL SimpleName: aMethod", "DEL WildcardType: ?", "DEL ReturnStatement", "DEL SimpleName: list", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: maximals", "DEL Assignment: =", "DEL SimpleType: Method", "DEL BooleanLiteral: false", "DEL SimpleName: arg", "DEL Block", "DEL TextElement: argument types.", "DEL SimpleName: Constructor", "DEL SimpleName: Class", "DEL IfStatement", "DEL SimpleName: Long", "DEL SimpleName: getName", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: LinkedList", "DEL InfixExpression: <", "DEL Modifier: private", "DEL SimpleType: T", "DEL SimpleName: Constructor", "DEL Block", "DEL ParenthesizedExpression", "DEL ParameterizedType: Constructor<?>", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL SimpleName: T", "DEL FieldAccess", "DEL ReturnStatement", "DEL TagElement: @param", "DEL MethodRefParameter", "DEL CharacterLiteral: ')'", "DEL TagElement", "DEL TextElement: parameter type should be convertible", "DEL SimpleType: Byte", "DEL ForStatement", "DEL SimpleName: parm", "DEL ArrayType: Class<?>[]", "DEL SimpleName: Class", "DEL InfixExpression: &&", "DEL TagElement: @param", "DEL InfixExpression: !=", "DEL Block", "DEL SimpleName: Byte", "DEL QualifiedName: Float.TYPE", "DEL SimpleName: Void", "DEL ThisExpression", "DEL TagElement: @param", "DEL Modifier: static", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: maximal", "DEL TypeLiteral", "DEL Modifier: static", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL TextElement: This replaces the original key scheme which used to build the key", "DEL VariableDeclarationExpression", "DEL Modifier: final", "DEL SimpleName: obj", "DEL NumberLiteral: 0", "DEL SimpleName: isConvertible", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL SimpleName: i", "DEL SimpleType: Class", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleName: isStrictInvocationConvertible", "DEL SimpleName: actual", "DEL Block", "DEL IfStatement", "DEL SimpleName: i", "DEL TextElement:  see isStrictMethodInvocationConvertible.", "DEL ParenthesizedExpression", "DEL SimpleName: methods", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL SimpleName: i", "DEL Dimension", "DEL SimpleName: obj", "DEL ExpressionStatement", "DEL SimpleName: actual", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleType: Void", "DEL SimpleName: T", "DEL SimpleName: applicable", "DEL SimpleName: size", "DEL Modifier: private", "DEL QualifiedName: c2.length", "DEL Block", "DEL TagElement: @param", "DEL Javadoc", "DEL SimpleName: c1", "DEL SimpleType: AmbiguousException", "DEL Modifier: static", "DEL TextElement:  ", "DEL Assignment: =", "DEL ArrayType: Class<?>[]", "DEL SingleVariableDeclaration", "DEL ForStatement", "DEL IfStatement", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL QualifiedName: Integer.TYPE", "DEL SimpleName: actual", "DEL ForStatement", "DEL WildcardType: ?", "DEL TextElement:  ", "DEL SimpleName: iterator", "DEL QualifiedName: Short.TYPE", "DEL SimpleName: isArray", "DEL SimpleType: T", "DEL IfStatement", "DEL InfixExpression: <", "DEL SimpleName: classes", "DEL InfixExpression: ==", "DEL SimpleType: Short", "DEL SimpleName: formal", "DEL InfixExpression: !=", "DEL TextElement: The key is still based on the same information, it is just wrapped in an object instead.", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL InfixExpression: ||", "DEL SimpleType: Class", "DEL TagElement: @see", "DEL ThrowStatement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: c", "DEL TagElement: @param", "DEL SimpleName: maximal", "DEL SimpleName: isStrictConvertible", "DEL QualifiedName: Short.TYPE", "DEL SimpleType: Parameters", "DEL SimpleName: builder", "DEL VariableDeclarationExpression", "DEL SimpleName: c2MoreSpecific", "DEL SimpleName: parm", "DEL SimpleName: p", "DEL TagElement", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleType: Float", "DEL VariableDeclarationFragment", "DEL SimpleName: aMethod", "DEL ArrayAccess", "DEL SimpleName: T", "DEL SimpleName: Byte", "DEL TextElement:          the actual parameter type.", "DEL SimpleName: NOARGS", "DEL TypeLiteral", "DEL BooleanLiteral: false", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL TagElement: @param", "DEL TypeLiteral", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL TextElement: an actual parameter list, and primitive types are represented by", "DEL SimpleName: i", "DEL PrefixExpression: !", "DEL SimpleName: getParameterTypes", "DEL InfixExpression: ==", "DEL ArrayAccess", "DEL SimpleName: classes", "DEL TagElement", "DEL SimpleName: i", "DEL Modifier: private", "DEL SimpleName: MethodKey", "DEL SimpleName: params", "DEL IfStatement", "DEL Block", "DEL PrimitiveType: boolean", "DEL QualifiedName: Integer.TYPE", "DEL MethodDeclaration", "DEL ArrayAccess", "DEL SimpleName: MethodKey", "DEL Block", "DEL SimpleName: MethodKey", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: getComponentType", "DEL ParameterizedType: Class<?>", "DEL MethodDeclaration", "DEL SimpleName: actual", "DEL SimpleName: MethodKey", "DEL IfStatement", "DEL SimpleName: Method", "DEL Assignment: =", "DEL SimpleName: vararg", "DEL Javadoc", "DEL NullLiteral", "DEL TypeLiteral", "DEL ArrayType: Class<?>[]", "DEL SimpleName: AmbiguousException", "DEL SimpleType: Class", "DEL QualifiedName: Short.TYPE", "DEL TextElement:  whether or not we're dealing with the last parameter", "DEL SimpleName: arg", "DEL Javadoc", "DEL SimpleName: T", "DEL QualifiedName: methodArgs.length", "DEL SimpleName: Class", "DEL SimpleType: Byte", "DEL ParameterizedType: Class<?>", "DEL NumberLiteral: 1", "DEL SimpleName: getParameterTypes", "DEL BooleanLiteral: true", "DEL SimpleName: next", "DEL SimpleName: Float", "DEL SimpleType: String", "DEL IfStatement", "DEL ExpressionStatement", "DEL PrimitiveType: long", "DEL SimpleName: methodArgs", "DEL SimpleName: MethodKey", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TagElement: @return", "DEL InfixExpression: ==", "DEL NullLiteral", "DEL SimpleName: builder", "DEL ReturnStatement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: arg", "DEL SimpleName: getMostSpecificMethod", "DEL Block", "DEL SimpleName: Method", "DEL QualifiedName: Short.TYPE", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL TagElement: @inheritDoc", "DEL IfStatement", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL SimpleName: formal", "DEL SimpleName: getApplicables", "DEL TextElement:  first signature to compare", "DEL FieldAccess", "DEL TextElement: is because this method is used to determine applicable methods for", "DEL QualifiedName: Byte.TYPE", "DEL TextElement: A method key usable by the introspector cache.", "DEL Dimension", "DEL SimpleName: parm", "DEL SimpleName: Class", "DEL VariableDeclarationFragment", "DEL InfixExpression: >", "DEL MethodRefParameter", "DEL SimpleType: T", "DEL TagElement", "DEL TagElement: @param", "DEL IfStatement", "DEL Block", "DEL TextElement: parameter type matches boolean primitive formal type). This behavior", "DEL InfixExpression: !=", "DEL SimpleName: actual", "DEL FieldDeclaration", "DEL TypeLiteral", "DEL TagElement", "DEL SimpleName: Arrays", "DEL Block", "DEL TagElement: @throws", "DEL SimpleName: maximals", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL QualifiedName: args.length", "DEL ReturnStatement", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL SimpleType: Long", "DEL Block", "DEL TagElement", "DEL ArrayAccess", "DEL ParameterizedType: Iterator<T>", "DEL BooleanLiteral: true", "DEL InfixExpression: ==", "DEL Block", "DEL WildcardType: ?", "DEL ArrayAccess", "DEL TextElement: with the exception that primitive types were converted to their object class equivalents.", "DEL SimpleName: actual", "DEL Javadoc", "DEL PrimitiveType: int", "DEL TagElement: @inheritDoc", "DEL SimpleName: actual", "DEL Modifier: public", "DEL TextElement: method invocation conversion, without matching object and primitive", "DEL InfixExpression: ==", "DEL SimpleName: method", "DEL MarkerAnnotation", "DEL TextElement: >", "DEL TagElement: @return", "DEL TypeLiteral", "DEL Javadoc", "DEL Javadoc", "DEL ParameterizedType: Class<?>", "DEL InfixExpression: ||", "DEL SimpleName: actual", "DEL SimpleName: actual", "DEL MethodInvocation", "DEL ForStatement", "DEL SimpleName: i", "DEL Block", "DEL ReturnStatement", "DEL TagElement: @return", "DEL IfStatement", "DEL InstanceofExpression", "DEL SimpleName: actual", "DEL SimpleName: CONSTRUCTORS", "DEL TextElement: comparing signatures of methods.", "DEL SimpleName: possibleVarArg", "DEL SimpleName: i", "DEL MethodInvocation", "DEL ArrayAccess", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL TagElement: @return", "DEL SimpleName: lastarg", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: getParameterTypes", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL SimpleName: Parameters", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SimpleName: T", "DEL InfixExpression: &&", "DEL Modifier: static", "DEL ArrayType: Class<?>[]", "DEL MethodDeclaration", "DEL SimpleType: Short", "DEL Assignment: -=", "DEL TextElement: Version Id for serializable.", "DEL InfixExpression: &&", "DEL FieldAccess", "DEL InfixExpression: ==", "DEL SimpleName: args", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: methods", "DEL ParameterizedType: Class<?>", "DEL SimpleName: c", "DEL Dimension", "DEL VariableDeclarationExpression", "DEL SimpleType: LinkedList", "DEL SimpleType: Class", "DEL SimpleName: applicables", "DEL SimpleName: params", "DEL SimpleName: methodArgs", "DEL TextElement: Outputs a human readable debug representation of this key.", "DEL InfixExpression: ==", "DEL SimpleName: Double", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: actual", "DEL TagElement", "DEL InfixExpression: -", "DEL TextElement:  the most specific method.", "DEL SimpleName: possibleVarArg", "DEL Block", "DEL FieldAccess", "DEL SimpleName: String", "DEL SimpleName: getParameterTypes", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: iterator", "DEL ParameterizedType: Class<?>", "DEL ArrayAccess", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL SimpleName: Override", "DEL SimpleType: StringBuilder", "DEL SimpleName: hash", "DEL InfixExpression: ==", "DEL SimpleType: Void", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleName: classes", "DEL SimpleName: actual", "DEL SimpleName: key", "DEL SimpleName: classes", "DEL SimpleName: Long", "DEL SimpleName: LESS_SPECIFIC", "DEL WildcardType: ?", "DEL AnonymousClassDeclaration", "DEL SimpleName: lastarg", "DEL Block", "DEL SimpleName: isConvertible", "DEL ReturnStatement", "DEL SimpleType: Short", "DEL QualifiedName: classes.length", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: classes", "DEL SimpleName: c2MoreSpecific", "DEL SimpleName: i", "DEL VariableDeclarationFragment", "DEL SimpleName: aMethod", "DEL TextElement:  true if either formal type is assignable from actual type,", "DEL ParameterizedType: Class<?>", "DEL TextElement: whether a method/ctor is more specific than a previously compared one.", "DEL SimpleName: HASH", "DEL SimpleName: parm", "DEL TagElement: @param", "DEL ArrayAccess", "DEL TextElement: Primitive type classes are converted to they object equivalent to make a key;", "DEL SimpleName: toString", "DEL SimpleName: i", "DEL ParenthesizedExpression", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL SimpleName: formal", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL SimpleName: args", "DEL TextElement: </p>", "DEL Block", "DEL TextElement: convertible to another type represented by a class object using a", "DEL SimpleType: Class", "DEL ArrayType: Class<?>[]", "DEL SimpleName: actual", "DEL Block", "DEL TextElement: </p>", "DEL PrefixExpression: -", "DEL SimpleName: remove", "DEL TextElement: (array of class).", "DEL Block", "DEL SimpleName: hashCode", "DEL ReturnStatement", "DEL SimpleName: isStrictInvocationConvertible", "DEL InfixExpression: ==", "DEL TagElement: @param", "DEL WildcardType: ?", "DEL SimpleName: lessSpecific", "DEL SimpleName: possibleVarArg", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL FieldAccess", "DEL WildcardType: ?", "DEL SimpleName: equals", "DEL SimpleName: method", "DEL ClassInstanceCreation", "DEL ParenthesizedExpression", "DEL SimpleName: c2MoreSpecific", "DEL SimpleName: actual", "DEL SimpleName: methods", "DEL SimpleName: p", "DEL SimpleName: params", "DEL VariableDeclarationFragment", "DEL ParameterizedType: Parameters<Constructor<?>>", "DEL InfixExpression: ==", "DEL VariableDeclarationFragment", "DEL Block", "DEL InfixExpression: &&", "DEL ReturnStatement", "DEL SimpleName: equals", "DEL SimpleType: Character", "DEL InfixExpression: ||", "DEL WildcardType: ?", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: actual", "DEL Modifier: final", "DEL TypeParameter", "DEL VariableDeclarationStatement", "DEL Block", "DEL TextElement: The hash code. ", "DEL SimpleName: classes", "DEL SimpleName: p", "DEL TextElement:  the method to generate the key from", "DEL SimpleType: Class", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleType: LinkedList", "DEL SimpleName: c", "DEL MethodInvocation", "DEL SimpleName: isAssignableFrom", "DEL ThisExpression", "DEL TagElement: @see", "DEL SimpleName: actual", "DEL TagElement", "DEL InfixExpression: ==", "DEL ParameterizedType: Class<?>", "DEL TextElement: <p>", "DEL IfStatement", "DEL TagElement: @throws", "DEL SimpleName: actual", "DEL TextElement: Utility for parameters matching.", "DEL SimpleName: maximal", "DEL SimpleName: c1", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: Parameters", "DEL SimpleName: actual", "DEL SimpleName: classes", "DEL SimpleName: T", "DEL BooleanLiteral: false", "DEL SimpleName: METHODS", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: actual", "DEL VariableDeclarationFragment", "DEL ParameterizedType: LinkedList<T>", "DEL SimpleName: Byte", "DEL MethodInvocation", "DEL TagElement", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL TextElement:  whether or not we're dealing with the last parameter", "DEL NumberLiteral: 1", "DEL Modifier: final", "DEL Javadoc", "DEL TextElement: by the introspector.", "DEL InfixExpression: <", "DEL InfixExpression: ||", "DEL NumberLiteral: 0", "DEL SimpleName: i", "DEL Block", "DEL WildcardType: ?", "DEL SimpleType: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL SimpleName: actual", "DEL SimpleName: aMethod", "DEL TextElement: <", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TagElement: @param", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleType: T", "DEL NullLiteral", "DEL SimpleType: Class", "DEL SimpleName: actual", "DEL SimpleName: list", "DEL InfixExpression: >", "DEL ReturnStatement", "DEL SimpleName: actual", "DEL SimpleType: Method", "DEL Block", "DEL BooleanLiteral: true", "DEL InfixExpression: -", "DEL PrefixExpression: !", "DEL SimpleName: getParameterTypes", "DEL SimpleName: formal", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL TagElement", "DEL ConstructorInvocation", "DEL IfStatement", "DEL BooleanLiteral: true", "DEL SimpleName: formal", "DEL SimpleName: builder", "DEL SingleVariableDeclaration", "DEL Block", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL SimpleName: getName", "DEL TextElement:  arguments to method", "DEL MethodRef", "DEL ThisExpression", "DEL TextElement: to formal types through a method invocation conversion).", "DEL SimpleName: args", "DEL SimpleName: i", "DEL SimpleName: app", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL TextElement: This stores a method (or class) name and parameters.", "DEL Modifier: final", "DEL ConditionalExpression", "DEL Modifier: private", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodDeclaration", "DEL Dimension", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL Block", "DEL IfStatement", "DEL TextElement:  the parameters", "DEL SimpleName: size", "DEL ParenthesizedExpression", "DEL Block", "DEL ArrayAccess", "DEL SimpleName: params", "DEL SimpleType: Class", "DEL InfixExpression: &&", "DEL TextElement: their object duals in reflective method calls.", "DEL ParameterizedType: LinkedList<T>", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: StringBuilder", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL TypeLiteral", "DEL TagElement: @return", "DEL SimpleName: Class", "DEL TextElement:  the intended method arguments", "DEL SimpleName: p", "DEL ForStatement", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL SimpleName: actual", "DEL BooleanLiteral: false", "DEL ParenthesizedExpression", "DEL QualifiedName: methodArgs.length", "DEL NumberLiteral: 0", "DEL SimpleName: T", "DEL NumberLiteral: 37", "DEL ForStatement", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL SimpleName: i", "DEL InfixExpression: <<", "DEL TextElement: by concatenating the method name and parameters class names as one string", "DEL SimpleType: Method", "DEL SimpleName: Short", "DEL WildcardType: ?", "DEL SimpleName: actual", "DEL TextElement:  the intended method parameters", "DEL SimpleName: hash", "DEL VariableDeclarationFragment", "DEL TextElement: Gets the most specific method that is applicable to actual argument types.", "DEL QualifiedName: Long.TYPE", "DEL SimpleName: method", "DEL Modifier: static", "DEL ParameterizedType: Class<?>", "DEL SimpleName: imethod", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: LESS_SPECIFIC", "DEL InfixExpression: >", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: isInvocationConvertible", "DEL TextElement: or formal is a primitive type and actual is its corresponding object", "DEL SimpleName: params", "DEL TypeLiteral", "DEL SimpleName: actual", "DEL Dimension", "DEL SimpleName: c2", "DEL SimpleType: Class", "DEL SimpleName: Class", "DEL SimpleType: String", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: size", "DEL IfStatement", "DEL SimpleName: p", "DEL Dimension", "DEL SimpleName: Class", "DEL TextElement:  the method to generate the key from.", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: T", "DEL NumberLiteral: 0", "DEL IfStatement", "DEL InfixExpression: -", "DEL MarkerAnnotation", "DEL IfStatement", "DEL SimpleName: primDiff", "DEL SimpleType: Class", "DEL SimpleName: methodArgs", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: hashCode", "DEL ArrayType: Class<?>[]", "DEL SimpleType: Constructor", "DEL ReturnStatement", "DEL TagElement", "DEL SimpleName: MORE_SPECIFIC", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL SimpleName: i", "DEL SimpleName: classes", "DEL SimpleName: formal", "DEL SimpleName: p", "DEL InfixExpression: ||", "DEL IfStatement", "DEL ParameterizedType: LinkedList<T>", "DEL SimpleName: actual", "DEL MethodInvocation", "DEL TextElement: Gets the most specific constructor that is applicable to the parameters of this key.", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL SimpleType: Class", "DEL SimpleName: Iterator", "DEL ReturnStatement", "DEL SimpleName: params", "DEL SimpleName: possibleVarArg", "DEL SimpleName: c1", "DEL BooleanLiteral: false", "DEL SimpleName: actual", "DEL SimpleName: Integer", "DEL SimpleName: Constructor", "DEL MethodInvocation", "DEL Javadoc", "DEL ArrayAccess", "DEL SimpleName: c2MoreSpecific", "DEL Modifier: public", "DEL SimpleName: Class", "DEL SimpleName: parm", "DEL SimpleName: Class", "DEL Dimension", "DEL SimpleName: imethod", "DEL SimpleName: next", "DEL SimpleName: methodArgs", "DEL SimpleName: actual", "DEL EnhancedForStatement", "DEL SimpleName: formal", "DEL SimpleName: possibleVarArg", "DEL SimpleName: i", "DEL SimpleType: Class", "DEL TypeLiteral", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: formal", "DEL InfixExpression: ||", "DEL WildcardType: ?", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL SimpleType: List", "DEL MethodInvocation", "DEL NullLiteral", "DEL WildcardType: ?", "DEL NumberLiteral: 1", "DEL Assignment: =", "DEL BooleanLiteral: false", "DEL SimpleName: equals", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL Block", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL SimpleName: formal", "DEL Dimension", "DEL IfStatement", "DEL Block", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: builder", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: aMethod", "DEL ParenthesizedExpression", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL TextElement:  if there is more than one.", "DEL ParameterizedType: Class<?>", "DEL SimpleName: isInvocationConvertible", "DEL SimpleName: actual", "DEL SimpleName: args", "DEL IfStatement", "DEL AnonymousClassDeclaration", "DEL InfixExpression: !=", "DEL Modifier: public", "DEL SimpleType: Class", "DEL FieldAccess", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL SimpleName: LinkedList", "DEL SimpleName: i", "DEL SimpleName: getParameters", "DEL NumberLiteral: 0", "DEL ParameterizedType: Constructor<?>", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Modifier: private", "DEL ReturnStatement", "DEL SimpleName: formal", "DEL QualifiedName: Long.TYPE", "DEL VariableDeclarationFragment", "DEL SimpleName: methods", "DEL SimpleName: actual", "DEL TextElement:          the formal parameter type to which the actual", "DEL SimpleName: actual", "DEL SimpleType: Class", "DEL SimpleName: method", "DEL SimpleName: actual", "DEL ParameterizedType: Parameters<Method>", "DEL QualifiedName: classes.length", "DEL QualifiedName: methodArgs.length", "DEL ArrayType: Class<?>[]", "DEL SimpleName: builder", "DEL PrefixExpression: ++", "DEL SimpleName: formal", "DEL SimpleName: isArray", "DEL MethodDeclaration", "DEL SimpleName: LESS_SPECIFIC", "DEL SimpleName: String", "DEL IfStatement", "DEL InfixExpression: ==", "DEL QualifiedName: Long.TYPE", "DEL SimpleName: p", "DEL SimpleName: c2", "DEL SimpleType: Class", "DEL SimpleName: i", "DEL InfixExpression: <", "DEL SimpleType: T", "DEL PrimitiveType: int", "DEL SimpleName: primDiff", "DEL SimpleName: Class", "DEL SimpleName: actual", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: INCOMPARABLE", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: StringBuilder", "DEL FieldAccess", "DEL TextElement: <p>", "DEL SimpleName: formal", "DEL Block", "DEL QualifiedName: c1.length", "DEL SimpleName: methods", "DEL ParameterizedType: Class<?>", "DEL NullLiteral", "DEL WildcardType: ?", "DEL Modifier: final", "DEL Javadoc", "DEL SimpleName: methods", "DEL FieldAccess", "DEL NumberLiteral: 0", "DEL WildcardType: ?", "DEL SimpleName: formal", "DEL InfixExpression: ||", "DEL TextElement: A key can be constructed either from arguments (array of objects) or from parameters", "DEL NumberLiteral: 0", "DEL Block", "DEL ParameterizedType: List<T>", "DEL InfixExpression: >", "DEL SimpleType: LinkedList", "DEL QualifiedName: c1.length", "DEL ThisExpression", "DEL SimpleName: Class", "DEL ParenthesizedExpression", "DEL SimpleName: formal", "DEL ForStatement", "DEL SimpleType: Class", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleType: Byte", "DEL PrimitiveType: int", "DEL SimpleName: T", "DEL SimpleName: methodArgs", "DEL TypeLiteral", "DEL InfixExpression: ||", "DEL SimpleName: serialVersionUID", "DEL InfixExpression: >", "DEL Modifier: public", "DEL SimpleName: Class", "DEL IfStatement", "DEL Modifier: static", "DEL SimpleName: list", "DEL SimpleName: args", "DEL TagElement: @param", "DEL SimpleName: c2MoreSpecific", "DEL MethodInvocation", "DEL SimpleName: lastarg", "DEL SimpleName: formal", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: StringBuilder", "DEL MethodRefParameter", "DEL MethodInvocation", "DEL TextElement: Creates a key from a method name and a set of arguments.", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL SimpleName: c", "DEL VariableDeclarationExpression", "DEL SimpleName: isArray", "DEL MethodRefParameter", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL SimpleName: StringBuilder", "DEL InfixExpression: ||", "DEL Block", "DEL SimpleName: c", "DEL Block", "DEL TextElement: specific. This defines a partial ordering on the method signatures.", "DEL ParameterizedType: Class<?>", "DEL TextElement: formal and actual arguments matches, and argument types are assignable", "DEL SimpleName: applicables", "DEL TextElement: Determines whether a type represented by a class object is", "DEL SimpleType: Byte", "DEL SimpleName: p", "DEL IfStatement", "DEL TextElement:          the actual parameter type.", "DEL WildcardType: ?", "DEL TextElement: Creates a key from a method.", "DEL SimpleName: Void", "DEL SimpleName: c1", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: actual", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL SimpleName: primDiff", "DEL InfixExpression: ==", "DEL FieldDeclaration", "DEL TextElement: The hash code constants. ", "DEL ParameterizedType: Iterator<T>", "DEL SingleVariableDeclaration", "DEL SimpleName: actual", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Modifier: protected", "DEL Javadoc", "DEL QualifiedName: Short.TYPE", "DEL ReturnStatement", "DEL SimpleName: NOARGS", "DEL Modifier: private", "DEL QualifiedName: methodArgs.length", "DEL SimpleName: getClass", "DEL VariableDeclarationStatement", "DEL Modifier: final", "DEL TextElement: Creates a key from a method name and a set of parameters.", "DEL Block", "DEL Block", "DEL SimpleType: T", "DEL PrimitiveType: int", "DEL MethodInvocation", "DEL QualifiedName: Long.TYPE", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: HASH", "DEL ParameterizedType: LinkedList<T>", "DEL TextElement: c1 is less specific than c2, INCOMPARABLE if they are incomparable.", "DEL SimpleName: hashCode", "DEL Modifier: private", "DEL TextElement:  second signature to compare", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: actual", "DEL VariableDeclarationFragment", "DEL SimpleName: c2", "DEL InfixExpression: ||", "DEL ThisExpression", "DEL InfixExpression: &&", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleType: StringBuilder", "DEL TagElement", "DEL ReturnStatement", "DEL TextElement: in the method declaration", "DEL Dimension", "DEL Modifier: final", "DEL SimpleName: isPrimitive", "DEL IfStatement", "DEL PrefixExpression: !", "DEL VariableDeclarationExpression", "DEL Modifier: static", "DEL InfixExpression: -", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: Class", "DEL SimpleType: Long", "DEL InfixExpression: ==", "DEL SimpleType: Class", "DEL ParameterizedType: Class<?>", "DEL Modifier: static", "DEL SimpleType: Integer", "DEL SimpleName: T", "DEL SimpleName: params", "DEL SimpleType: Method", "DEL PrimitiveType: int", "DEL SwitchStatement", "DEL Block", "DEL SimpleName: Class", "DEL QualifiedName: Float.TYPE", "DEL SimpleName: applicables", "DEL NumberLiteral: 0", "DEL TypeLiteral", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleType: T", "DEL TextElement: The parameter matching service for constructors.", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL InfixExpression: -", "DEL PrimitiveType: boolean", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL TextElement:  the method name", "DEL Block", "DEL SimpleName: Short", "DEL SimpleName: Byte", "DEL TextElement:  whether or not we're dealing with the last parameter", "DEL SimpleName: actual", "DEL SimpleName: size", "DEL SimpleName: Class", "DEL SimpleName: possibleVarArg", "DEL ArrayType: Class<?>[]", "DEL SimpleName: i", "DEL ParameterizedType: Constructor<?>", "DEL SimpleType: Constructor", "DEL SimpleName: hashCode", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: MethodKey", "DEL Modifier: final", "DEL SimpleName: hash", "DEL TypeLiteral", "DEL SimpleName: actual", "DEL SimpleName: size", "DEL SingleVariableDeclaration", "DEL SimpleName: actual", "DEL SimpleName: Integer", "DEL ParameterizedType: Class<?>", "DEL PrefixExpression: ++", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: getParameterTypes", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: getComponentType", "DEL TextElement: Gets this key's method parameter classes.", "DEL SimpleName: Class", "DEL SimpleName: method", "DEL TypeLiteral", "DEL InfixExpression: ||", "DEL NumberLiteral: 1", "DEL SimpleName: possibleVarArg", "DEL SimpleName: last", "DEL SimpleName: app", "DEL SimpleType: MethodKey", "DEL QualifiedName: Byte.TYPE", "DEL Block", "DEL SimpleType: RuntimeException", "DEL VariableDeclarationFragment", "DEL SimpleName: LinkedList", "DEL SimpleName: last", "DEL SimpleName: actual", "DEL MethodRefParameter", "DEL SimpleName: aMethod", "DEL SimpleName: equals", "DEL VariableDeclarationFragment", "DEL SimpleName: formal", "DEL Javadoc", "DEL SimpleType: List", "DEL SimpleName: T", "DEL SimpleName: Void", "DEL SingleVariableDeclaration", "DEL TagElement: @inheritDoc", "DEL SimpleName: getMethod", "DEL SimpleName: append", "DEL BooleanLiteral: true", "DEL InfixExpression: ==", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL Javadoc", "DEL ParameterizedType: Iterator<T>", "DEL InfixExpression: &&", "DEL TagElement", "DEL TextElement: Determines whether a type represented by a class object is", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL Javadoc", "DEL ReturnStatement", "DEL PrefixExpression: !", "DEL SimpleName: size", "DEL ParameterizedType: Class<?>", "DEL SimpleName: moreSpecific", "DEL ParenthesizedExpression", "DEL Assignment: =", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: hash", "DEL SingleVariableDeclaration", "DEL WildcardType: ?", "DEL VariableDeclarationFragment", "DEL Block", "DEL ArrayAccess", "DEL SimpleType: Class", "DEL TextElement:          the formal parameter type to which the actual", "DEL Block", "DEL TagElement", "DEL SimpleName: last", "DEL TagElement: @return", "DEL Block", "DEL InfixExpression: &&", "DEL TextElement:  a list of methods.", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleName: params", "DEL Javadoc", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: possibleVarArg", "DEL SimpleName: isStrictInvocationConvertible", "DEL SimpleType: Method", "DEL TextElement:  a list of constructors.", "DEL Javadoc", "DEL SimpleName: max", "DEL ParameterizedType: Class<?>", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL SimpleName: Void", "DEL BooleanLiteral: false", "DEL TagElement", "DEL NumberLiteral: 2", "DEL Block", "DEL ConditionalExpression", "DEL InfixExpression: ==", "DEL TagElement: @throws", "DEL QualifiedName: Short.TYPE", "DEL SimpleName: getMostSpecific", "DEL Block", "DEL ParenthesizedExpression", "DEL InfixExpression: *", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Javadoc", "DEL QualifiedName: Byte.TYPE", "DEL ArrayCreation", "DEL SimpleName: Character", "DEL PrimitiveType: boolean", "DEL SimpleName: lessSpecific", "DEL SimpleName: aMethod", "DEL SimpleName: hashCode", "DEL ConditionalExpression", "DEL InfixExpression: <<", "DEL SimpleName: Short", "DEL NumberLiteral: 1", "DEL PrimitiveType: boolean", "DEL SimpleName: i", "DEL ReturnStatement", "DEL TextElement: or formal and actual are both primitive types and actual can be", "DEL QualifiedName: Boolean.TYPE", "DEL ArrayType: Class<?>[]", "DEL VariableDeclarationExpression", "DEL SimpleName: getComponentType", "DEL Block", "DEL Javadoc", "DEL TextElement:  see isMethodInvocationConvertible.", "DEL SimpleName: i", "DEL ConditionalExpression", "DEL SimpleName: hash", "DEL VariableDeclarationStatement", "DEL BooleanLiteral: false", "DEL Modifier: final", "DEL InfixExpression: <", "DEL Block", "DEL SimpleName: T", "DEL SimpleName: methodArgs", "DEL SimpleName: appArgs", "DEL SimpleName: maximals", "DEL ArrayAccess", "DEL InfixExpression: >", "DEL SimpleName: vararg", "DEL SimpleName: app", "DEL Block", "DEL InfixExpression: <", "DEL TextElement:  list of argument types.", "DEL SimpleName: MORE_SPECIFIC", "DEL MethodInvocation", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL TextElement:  the parameters", "DEL WildcardType: ?", "DEL TagElement", "DEL QualifiedName: params.length", "DEL QualifiedName: methodArgs.length", "DEL SimpleName: Override", "DEL TextElement:  ", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL SimpleName: actual", "DEL SimpleType: T", "DEL SimpleType: Parameters", "DEL ParameterizedType: Parameters<Method>", "DEL Modifier: final", "DEL BreakStatement", "DEL NumberLiteral: 0", "DEL TextElement: in the method declaration", "DEL SimpleName: formal", "DEL Modifier: public", "DEL TagElement", "DEL Javadoc", "DEL ArrayAccess", "DEL SimpleName: actual", "DEL SimpleName: Override", "DEL SimpleName: append", "DEL SimpleName: Parameters", "DEL SimpleName: i", "DEL ReturnStatement", "DEL SimpleName: actual", "DEL ArrayAccess", "DEL ExpressionStatement", "DEL SimpleName: formal", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL QualifiedName: methodArgs.length", "DEL Assignment: =", "DEL ReturnStatement", "DEL Modifier: abstract", "DEL Javadoc", "DEL SimpleName: c", "DEL TagElement: @param", "DEL SimpleType: Parameters", "DEL TypeDeclaration: class", "DEL BooleanLiteral: true", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL InfixExpression: <", "DEL SimpleType: Class", "DEL SimpleName: isPrimitive", "DEL ThisExpression", "DEL SimpleName: T", "DEL ArrayType: Class<?>[]", "DEL SimpleName: getParameterTypes", "DEL SimpleName: hash", "DEL SimpleName: AmbiguousException", "DEL ParameterizedType: Parameters<Constructor<?>>", "DEL BooleanLiteral: false", "DEL SimpleName: T", "DEL SimpleName: RuntimeException", "DEL SimpleName: Object", "DEL SimpleName: getComponentType", "DEL ParameterizedType: List<Method>", "DEL SimpleName: actual", "DEL BooleanLiteral: true", "DEL IfStatement", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: isArray", "DEL SimpleName: T", "DEL SimpleName: isConvertible", "DEL SimpleName: methods", "DEL QualifiedName: Float.TYPE", "DEL Dimension", "DEL TextElement:  true if either formal type is assignable from actual type,", "DEL SimpleName: c1MoreSpecific", "DEL Modifier: private", "DEL Dimension", "DEL SimpleName: LESS_SPECIFIC", "DEL TextElement: parameter type should be convertible", "DEL InfixExpression: *", "DEL SimpleName: aMethod", "DEL ClassInstanceCreation", "DEL SimpleName: formal", "DEL SimpleName: formal", "DEL SimpleName: Integer", "DEL MethodInvocation", "DEL Modifier: static", "DEL WildcardType: ?", "DEL TypeLiteral", "DEL SimpleType: Class", "DEL PrefixExpression: ++", "DEL SimpleName: isPrimitive", "DEL TextElement: Returns true if the supplied method is applicable to actual", "DEL SimpleName: getMostSpecific", "DEL SimpleType: T", "DEL TextElement: Gets the most specific method that is applicable to the parameters of this key.", "DEL TextElement: the formal type.", "DEL Modifier: private", "DEL InfixExpression: ==", "DEL ClassInstanceCreation", "DEL TagElement", "DEL SimpleName: c1MoreSpecific", "DEL SimpleType: Integer", "DEL Block", "DEL ForStatement", "DEL ArrayCreation", "DEL TextElement:  list of all candidate methods", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: p", "DEL BooleanLiteral: true", "DEL SimpleName: MORE_SPECIFIC", "DEL InfixExpression: ==", "DEL Dimension", "DEL SimpleName: methods", "DEL InfixExpression: ||", "DEL InfixExpression: &&", "DEL SimpleName: Override", "DEL SimpleType: Object", "DEL SimpleType: Void", "DEL TypeLiteral", "DEL MarkerAnnotation", "DEL Dimension", "DEL TextElement: The parameter matching service for methods.", "DEL QualifiedName: c2.length", "DEL SimpleType: Class", "DEL PrimitiveType: boolean", "DEL SimpleName: params", "DEL TextElement: types. This method is used to determine the more specific type when", "DEL SimpleName: T", "DEL SimpleName: builder", "DEL Modifier: public", "DEL SimpleName: lessSpecific", "DEL SimpleName: app", "DEL SimpleName: c1", "DEL SimpleType: Class", "DEL VariableDeclarationFragment", "DEL SimpleType: Object", "DEL SimpleType: Byte", "DEL QualifiedName: Double.TYPE", "DEL Modifier: private", "DEL SimpleName: getComponentType", "DEL SingleVariableDeclaration", "DEL SimpleName: intern", "DEL PrefixExpression: ++", "DEL ArrayType: Class<?>[]", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL ReturnStatement", "DEL SimpleType: String", "DEL SimpleName: formal", "DEL InfixExpression: &&", "DEL InfixExpression: ==", "DEL QualifiedName: Integer.TYPE", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL Block", "DEL TypeLiteral", "DEL IfStatement", "DEL TextElement: The parameters. ", "DEL TextElement:  if there is more than one.", "DEL SimpleName: classes", "DEL ExpressionStatement", "DEL SwitchCase", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL TextElement:  the method to generate the key from", "DEL TextElement:          the formal parameter type to which the actual", "DEL VariableDeclarationStatement", "DEL VariableDeclarationExpression", "DEL SimpleName: c2", "DEL VariableDeclarationFragment", "DEL SimpleType: Constructor", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleName: hashCode", "DEL SimpleName: Method", "DEL InfixExpression: !=", "DEL IfStatement", "DEL InfixExpression: ||", "DEL SimpleName: Short", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL SimpleName: method", "DEL SimpleName: addLast", "DEL SimpleName: c2", "DEL VariableDeclarationStatement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: i", "DEL QualifiedName: args.length", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleType: Iterator", "DEL ParameterizedType: Class<?>", "DEL PrimitiveType: boolean", "DEL InfixExpression: ||", "DEL SimpleType: T", "DEL InfixExpression: ==", "DEL MethodRef", "DEL SimpleName: equals", "DEL SimpleName: Class", "DEL SimpleName: method", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 1", "DEL SimpleName: actual", "DEL InfixExpression: &&", "DEL SimpleName: size", "DEL TextElement: types as if they were primitive types (that is, a Boolean actual", "DEL TagElement", "DEL SimpleName: List", "DEL SimpleName: LESS_SPECIFIC", "DEL ArrayAccess", "DEL MethodDeclaration", "DEL SimpleName: NOARGS", "DEL Block", "DEL VariableDeclarationExpression", "DEL InfixExpression: &&", "DEL ArrayAccess", "DEL SimpleName: actual", "DEL QualifiedName: Double.TYPE", "DEL MethodDeclaration", "DEL IfStatement", "DEL SimpleName: app", "DEL SimpleName: params", "DEL SimpleName: formal", "DEL SimpleName: p", "DEL IfStatement", "DEL SimpleType: Long", "DEL NullLiteral", "DEL BooleanLiteral: true", "DEL SimpleName: getApplicables", "DEL PrimitiveType: int", "DEL TagElement: @param", "DEL SimpleName: c1MoreSpecific", "DEL Block", "DEL SimpleName: isInvocationConvertible", "DEL SimpleName: Constructor", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL PrimitiveType: int", "DEL SimpleName: Void", "DEL TypeDeclaration: class", "DEL SimpleName: args", "DEL SingleVariableDeclaration", "DEL SimpleName: isPrimitive", "DEL ReturnStatement", "DEL ClassInstanceCreation", "DEL TextElement: we run across ambiguous overloading.  Caught", "DEL ArrayType: Class<?>[]", "DEL TypeLiteral", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: applicable", "DEL WildcardType: ?", "DEL SimpleType: String", "DEL ParenthesizedExpression", "DEL SimpleName: Object", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleName: imethod", "DEL MethodInvocation", "DEL Dimension", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL ParameterizedType: Class<?>", "DEL StringLiteral: \"null\"", "DEL VariableDeclarationStatement", "DEL SimpleName: classes", "DEL InfixExpression: ==", "DEL IfStatement", "DEL TextElement: whether a method/ctor is less specific than a previously compared one.", "DEL InfixExpression: ||", "DEL SimpleName: aMethod", "DEL ArrayType: Class<?>[]", "DEL MethodInvocation", "DEL SimpleName: primDiff", "DEL QualifiedName: Byte.TYPE", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleType: Void", "DEL ParameterizedType: Class<?>", "DEL QualifiedName: ClassMap.MethodCache", "DEL SimpleName: getParameterTypes", "DEL ArrayCreation", "DEL PrimitiveType: int", "DEL SimpleName: Parameters", "DEL SimpleType: Boolean", "DEL InfixExpression: -", "DEL Modifier: private", "DEL TextElement:          the actual parameter type.", "DEL Javadoc", "DEL SimpleName: isAssignableFrom", "DEL PrimitiveType: int", "DEL PrimitiveType: boolean", "DEL PrimitiveType: boolean", "DEL SimpleName: isStrictInvocationConvertible", "DEL WildcardType: ?", "DEL SimpleName: methods", "DEL TagElement: @param", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement: Determines which method signature (represented by a class array) is more", "DEL SimpleType: Integer", "DEL ArrayAccess", "DEL InfixExpression: ==", "DEL SimpleType: Double", "DEL SimpleName: formal", "DEL MethodInvocation"]}]}}, {"MethodKey_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.List(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.LinkedList(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Iterator(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.reflect.Constructor(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.lang.reflect.Method(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Arrays(12)", "Delete ImportDeclaration(13)", "Delete TextElement: A method key usable by the introspector cache.(14)", "Delete TextElement: <p>(15)", "Delete TextElement: This stores a method (or class) name and parameters.(16)", "Delete TextElement: </p>(17)", "Delete TextElement: <p>(18)", "Delete TextElement: This replaces the original key scheme which used to build the key(19)", "Delete TextElement: by concatenating the method name and parameters class names as one string(20)", "Delete TextElement: with the exception that primitive types were converted to their object class equivalents.(21)", "Delete TextElement: </p>(22)", "Delete TextElement: <p>(23)", "Delete TextElement: The key is still based on the same information, it is just wrapped in an object instead.(24)", "Delete TextElement: Primitive type classes are converted to they object equivalent to make a key;(25)", "Delete TextElement: int foo(int) and int foo(Integer) do generate the same key.(26)", "Delete TextElement: </p>(27)", "Delete TextElement: A key can be constructed either from arguments (array of objects) or from parameters(28)", "Delete TextElement: (array of class).(29)", "Delete TextElement: Roughly 3x faster than string key to access the map & uses less memory.(30)", "Delete TagElement(31)", "Delete Javadoc(32)", "Delete Modifier: public(33)", "Delete Modifier: final(34)", "Delete SimpleName: MethodKey(35)", "Delete TextElement: The hash code. (36)", "Delete TagElement(37)", "Delete Javadoc(38)", "Delete Modifier: private(39)", "Delete Modifier: final(40)", "Delete PrimitiveType: int(41)", "Delete SimpleName: hashCode(42)", "Delete VariableDeclarationFragment(43)", "Delete FieldDeclaration(44)", "Delete TextElement: The method name. (45)", "Delete TagElement(46)", "Delete Javadoc(47)", "Delete Modifier: private(48)", "Delete Modifier: final(49)", "Delete SimpleName: String(50)", "Delete SimpleType: String(51)", "Delete SimpleName: method(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete TextElement: The parameters. (55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete Modifier: private(58)", "Delete Modifier: final(59)", "Delete SimpleName: Class(60)", "Delete SimpleType: Class(61)", "Delete WildcardType: ?(62)", "Delete ParameterizedType: Class<?>(63)", "Delete Dimension(64)", "Delete ArrayType: Class<?>[](65)", "Delete SimpleName: params(66)", "Delete VariableDeclarationFragment(67)", "Delete FieldDeclaration(68)", "Delete TextElement: A marker for empty parameter list. (69)", "Delete TagElement(70)", "Delete Javadoc(71)", "Delete Modifier: private(72)", "Delete Modifier: static(73)", "Delete Modifier: final(74)", "Delete SimpleName: Class(75)", "Delete SimpleType: Class(76)", "Delete WildcardType: ?(77)", "Delete ParameterizedType: Class<?>(78)", "Delete Dimension(79)", "Delete ArrayType: Class<?>[](80)", "Delete SimpleName: NOARGS(81)", "Delete SimpleName: Class(82)", "Delete SimpleType: Class(83)", "Delete WildcardType: ?(84)", "Delete ParameterizedType: Class<?>(85)", "Delete Dimension(86)", "Delete ArrayType: Class<?>[](87)", "Delete NumberLiteral: 0(88)", "Delete ArrayCreation(89)", "Delete VariableDeclarationFragment(90)", "Delete FieldDeclaration(91)", "Delete TextElement: The hash code constants. (92)", "Delete TagElement(93)", "Delete Javadoc(94)", "Delete Modifier: private(95)", "Delete Modifier: static(96)", "Delete Modifier: final(97)", "Delete PrimitiveType: int(98)", "Delete SimpleName: HASH(99)", "Delete NumberLiteral: 37(100)", "Delete VariableDeclarationFragment(101)", "Delete FieldDeclaration(102)", "Delete TextElement: Creates a key from a method name and a set of arguments.(103)", "Delete TagElement(104)", "Delete SimpleName: aMethod(105)", "Delete TextElement:  the method to generate the key from(106)", "Delete TagElement: @param(107)", "Delete SimpleName: args(108)", "Delete TextElement:  the intended method arguments(109)", "Delete TagElement: @param(110)", "Delete Javadoc(111)", "Delete Modifier: public(112)", "Delete SimpleName: MethodKey(113)", "Delete SimpleName: String(114)", "Delete SimpleType: String(115)", "Delete SimpleName: aMethod(116)", "Delete SingleVariableDeclaration(117)", "Delete SimpleName: Object(118)", "Delete SimpleType: Object(119)", "Delete Dimension(120)", "Delete ArrayType: Object[](121)", "Delete SimpleName: args(122)", "Delete SingleVariableDeclaration(123)", "Delete SuperConstructorInvocation(124)", "Delete ThisExpression(125)", "Delete SimpleName: method(126)", "Delete FieldAccess(127)", "Delete SimpleName: aMethod(128)", "Delete Assignment: =(129)", "Delete ExpressionStatement(130)", "Delete PrimitiveType: int(131)", "Delete SimpleName: hash(132)", "Delete ThisExpression(133)", "Delete SimpleName: method(134)", "Delete FieldAccess(135)", "Delete SimpleName: hashCode(136)", "Delete MethodInvocation(137)", "Delete VariableDeclarationFragment(138)", "Delete VariableDeclarationStatement(139)", "Delete Modifier: final(140)", "Delete PrimitiveType: int(141)", "Delete SimpleName: size(142)", "Delete VariableDeclarationFragment(143)", "Delete VariableDeclarationStatement(144)", "Delete SimpleName: args(145)", "Delete NullLiteral(146)", "Delete InfixExpression: !=(147)", "Delete SimpleName: size(148)", "Delete QualifiedName: args.length(149)", "Delete Assignment: =(150)", "Delete ParenthesizedExpression(151)", "Delete NumberLiteral: 0(152)", "Delete InfixExpression: >(153)", "Delete InfixExpression: &&(154)", "Delete ThisExpression(155)", "Delete SimpleName: params(156)", "Delete FieldAccess(157)", "Delete SimpleName: Class(158)", "Delete SimpleType: Class(159)", "Delete WildcardType: ?(160)", "Delete ParameterizedType: Class<?>(161)", "Delete Dimension(162)", "Delete ArrayType: Class<?>[](163)", "Delete SimpleName: size(164)", "Delete ArrayCreation(165)", "Delete Assignment: =(166)", "Delete ExpressionStatement(167)", "Delete PrimitiveType: int(168)", "Delete SimpleName: p(169)", "Delete NumberLiteral: 0(170)", "Delete VariableDeclarationFragment(171)", "Delete VariableDeclarationExpression(172)", "Delete SimpleName: p(173)", "Delete SimpleName: size(174)", "Delete InfixExpression: <(175)", "Delete SimpleName: p(176)", "Delete PrefixExpression: ++(177)", "Delete SimpleName: Object(178)", "Delete SimpleType: Object(179)", "Delete SimpleName: arg(180)", "Delete SimpleName: args(181)", "Delete SimpleName: p(182)", "Delete ArrayAccess(183)", "Delete VariableDeclarationFragment(184)", "Delete VariableDeclarationStatement(185)", "Delete SimpleName: Class(186)", "Delete SimpleType: Class(187)", "Delete WildcardType: ?(188)", "Delete ParameterizedType: Class<?>(189)", "Delete SimpleName: parm(190)", "Delete SimpleName: arg(191)", "Delete NullLiteral(192)", "Delete InfixExpression: ==(193)", "Delete SimpleName: Void(194)", "Delete SimpleType: Void(195)", "Delete TypeLiteral(196)", "Delete SimpleName: arg(197)", "Delete SimpleName: getClass(198)", "Delete MethodInvocation(199)", "Delete ConditionalExpression(200)", "Delete VariableDeclarationFragment(201)", "Delete VariableDeclarationStatement(202)", "Delete SimpleName: hash(203)", "Delete SimpleName: HASH(204)", "Delete SimpleName: hash(205)", "Delete InfixExpression: *(206)", "Delete ParenthesizedExpression(207)", "Delete SimpleName: parm(208)", "Delete SimpleName: hashCode(209)", "Delete MethodInvocation(210)", "Delete InfixExpression: +(211)", "Delete Assignment: =(212)", "Delete ExpressionStatement(213)", "Delete ThisExpression(214)", "Delete SimpleName: params(215)", "Delete FieldAccess(216)", "Delete SimpleName: p(217)", "Delete ArrayAccess(218)", "Delete SimpleName: parm(219)", "Delete Assignment: =(220)", "Delete ExpressionStatement(221)", "Delete Block(222)", "Delete ForStatement(223)", "Delete Block(224)", "Delete ThisExpression(225)", "Delete SimpleName: params(226)", "Delete FieldAccess(227)", "Delete SimpleName: NOARGS(228)", "Delete Assignment: =(229)", "Delete ExpressionStatement(230)", "Delete Block(231)", "Delete IfStatement(232)", "Delete ThisExpression(233)", "Delete SimpleName: hashCode(234)", "Delete FieldAccess(235)", "Delete SimpleName: hash(236)", "Delete Assignment: =(237)", "Delete ExpressionStatement(238)", "Delete Block(239)", "Delete MethodDeclaration(240)", "Delete TextElement: Creates a key from a method.(241)", "Delete TagElement(242)", "Delete SimpleName: aMethod(243)", "Delete TextElement:  the method to generate the key from.(244)", "Delete TagElement: @param(245)", "Delete Javadoc(246)", "Delete SimpleName: MethodKey(247)", "Delete SimpleName: Method(248)", "Delete SimpleType: Method(249)", "Delete SimpleName: aMethod(250)", "Delete SingleVariableDeclaration(251)", "Delete SimpleName: aMethod(252)", "Delete SimpleName: getName(253)", "Delete MethodInvocation(254)", "Delete SimpleName: aMethod(255)", "Delete SimpleName: getParameterTypes(256)", "Delete MethodInvocation(257)", "Delete ConstructorInvocation(258)", "Delete Block(259)", "Delete MethodDeclaration(260)", "Delete TextElement: Creates a key from a method name and a set of parameters.(261)", "Delete TagElement(262)", "Delete SimpleName: aMethod(263)", "Delete TextElement:  the method to generate the key from(264)", "Delete TagElement: @param(265)", "Delete SimpleName: args(266)", "Delete TextElement:  the intended method parameters(267)", "Delete TagElement: @param(268)", "Delete Javadoc(269)", "Delete SimpleName: MethodKey(270)", "Delete SimpleName: String(271)", "Delete SimpleType: String(272)", "Delete SimpleName: aMethod(273)", "Delete SingleVariableDeclaration(274)", "Delete SimpleName: Class(275)", "Delete SimpleType: Class(276)", "Delete WildcardType: ?(277)", "Delete ParameterizedType: Class<?>(278)", "Delete Dimension(279)", "Delete ArrayType: Class<?>[](280)", "Delete SimpleName: args(281)", "Delete SingleVariableDeclaration(282)", "Delete SuperConstructorInvocation(283)", "Delete ThisExpression(284)", "Delete SimpleName: method(285)", "Delete FieldAccess(286)", "Delete SimpleName: aMethod(287)", "Delete SimpleName: intern(288)", "Delete MethodInvocation(289)", "Delete Assignment: =(290)", "Delete ExpressionStatement(291)", "Delete PrimitiveType: int(292)", "Delete SimpleName: hash(293)", "Delete ThisExpression(294)", "Delete SimpleName: method(295)", "Delete FieldAccess(296)", "Delete SimpleName: hashCode(297)", "Delete MethodInvocation(298)", "Delete VariableDeclarationFragment(299)", "Delete VariableDeclarationStatement(300)", "Delete Modifier: final(301)", "Delete PrimitiveType: int(302)", "Delete SimpleName: size(303)", "Delete VariableDeclarationFragment(304)", "Delete VariableDeclarationStatement(305)", "Delete SimpleName: args(306)", "Delete NullLiteral(307)", "Delete InfixExpression: !=(308)", "Delete SimpleName: size(309)", "Delete QualifiedName: args.length(310)", "Delete Assignment: =(311)", "Delete ParenthesizedExpression(312)", "Delete NumberLiteral: 0(313)", "Delete InfixExpression: >(314)", "Delete InfixExpression: &&(315)", "Delete ThisExpression(316)", "Delete SimpleName: params(317)", "Delete FieldAccess(318)", "Delete SimpleName: Class(319)", "Delete SimpleType: Class(320)", "Delete WildcardType: ?(321)", "Delete ParameterizedType: Class<?>(322)", "Delete Dimension(323)", "Delete ArrayType: Class<?>[](324)", "Delete SimpleName: size(325)", "Delete ArrayCreation(326)", "Delete Assignment: =(327)", "Delete ExpressionStatement(328)", "Delete PrimitiveType: int(329)", "Delete SimpleName: p(330)", "Delete NumberLiteral: 0(331)", "Delete VariableDeclarationFragment(332)", "Delete VariableDeclarationExpression(333)", "Delete SimpleName: p(334)", "Delete SimpleName: size(335)", "Delete InfixExpression: <(336)", "Delete SimpleName: p(337)", "Delete PrefixExpression: ++(338)", "Delete SimpleName: Class(339)", "Delete SimpleType: Class(340)", "Delete WildcardType: ?(341)", "Delete ParameterizedType: Class<?>(342)", "Delete SimpleName: parm(343)", "Delete QualifiedName: ClassMap.MethodCache(344)", "Delete SimpleName: primitiveClass(345)", "Delete SimpleName: args(346)", "Delete SimpleName: p(347)", "Delete ArrayAccess(348)", "Delete MethodInvocation(349)", "Delete VariableDeclarationFragment(350)", "Delete VariableDeclarationStatement(351)", "Delete SimpleName: hash(352)", "Delete SimpleName: HASH(353)", "Delete SimpleName: hash(354)", "Delete InfixExpression: *(355)", "Delete ParenthesizedExpression(356)", "Delete SimpleName: parm(357)", "Delete SimpleName: hashCode(358)", "Delete MethodInvocation(359)", "Delete InfixExpression: +(360)", "Delete Assignment: =(361)", "Delete ExpressionStatement(362)", "Delete ThisExpression(363)", "Delete SimpleName: params(364)", "Delete FieldAccess(365)", "Delete SimpleName: p(366)", "Delete ArrayAccess(367)", "Delete SimpleName: parm(368)", "Delete Assignment: =(369)", "Delete ExpressionStatement(370)", "Delete Block(371)", "Delete ForStatement(372)", "Delete Block(373)", "Delete ThisExpression(374)", "Delete SimpleName: params(375)", "Delete FieldAccess(376)", "Delete SimpleName: NOARGS(377)", "Delete Assignment: =(378)", "Delete ExpressionStatement(379)", "Delete Block(380)", "Delete IfStatement(381)", "Delete ThisExpression(382)", "Delete SimpleName: hashCode(383)", "Delete FieldAccess(384)", "Delete SimpleName: hash(385)", "Delete Assignment: =(386)", "Delete ExpressionStatement(387)", "Delete Block(388)", "Delete MethodDeclaration(389)", "Delete TextElement: Gets this key's method name.(390)", "Delete TagElement(391)", "Delete TextElement:  the method name(392)", "Delete TagElement: @return(393)", "Delete Javadoc(394)", "Delete SimpleName: String(395)", "Delete SimpleType: String(396)", "Delete SimpleName: getMethod(397)", "Delete SimpleName: method(398)", "Delete ReturnStatement(399)", "Delete Block(400)", "Delete MethodDeclaration(401)", "Delete TextElement: Gets this key's method parameter classes.(402)", "Delete TagElement(403)", "Delete TextElement:  the parameters(404)", "Delete TagElement: @return(405)", "Delete Javadoc(406)", "Delete SimpleName: Class(407)", "Delete SimpleType: Class(408)", "Delete WildcardType: ?(409)", "Delete ParameterizedType: Class<?>(410)", "Delete Dimension(411)", "Delete ArrayType: Class<?>[](412)", "Delete SimpleName: getParameters(413)", "Delete SimpleName: params(414)", "Delete ReturnStatement(415)", "Delete Block(416)", "Delete MethodDeclaration(417)", "Delete TagElement: @inheritDoc(418)", "Delete TextElement:  (419)", "Delete TagElement(420)", "Delete Javadoc(421)", "Delete SimpleName: Override(422)", "Delete MarkerAnnotation(423)", "Delete Modifier: public(424)", "Delete PrimitiveType: int(425)", "Delete SimpleName: hashCode(426)", "Delete SimpleName: hashCode(427)", "Delete ReturnStatement(428)", "Delete Block(429)", "Delete MethodDeclaration(430)", "Delete TagElement: @inheritDoc(431)", "Delete TextElement:  (432)", "Delete TagElement(433)", "Delete Javadoc(434)", "Delete SimpleName: Override(435)", "Delete MarkerAnnotation(436)", "Delete Modifier: public(437)", "Delete PrimitiveType: boolean(438)", "Delete SimpleName: equals(439)", "Delete SimpleName: Object(440)", "Delete SimpleType: Object(441)", "Delete SimpleName: obj(442)", "Delete SingleVariableDeclaration(443)", "Delete SimpleName: obj(444)", "Delete SimpleName: MethodKey(445)", "Delete SimpleType: MethodKey(446)", "Delete InstanceofExpression(447)", "Delete SimpleName: MethodKey(448)", "Delete SimpleType: MethodKey(449)", "Delete SimpleName: key(450)", "Delete SimpleName: MethodKey(451)", "Delete SimpleType: MethodKey(452)", "Delete SimpleName: obj(453)", "Delete CastExpression(454)", "Delete VariableDeclarationFragment(455)", "Delete VariableDeclarationStatement(456)", "Delete SimpleName: method(457)", "Delete SimpleName: equals(458)", "Delete QualifiedName: key.method(459)", "Delete MethodInvocation(460)", "Delete SimpleName: Arrays(461)", "Delete SimpleName: equals(462)", "Delete SimpleName: params(463)", "Delete QualifiedName: key.params(464)", "Delete MethodInvocation(465)", "Delete InfixExpression: &&(466)", "Delete ReturnStatement(467)", "Delete Block(468)", "Delete IfStatement(469)", "Delete BooleanLiteral: false(470)", "Delete ReturnStatement(471)", "Delete Block(472)", "Delete MethodDeclaration(473)", "Delete TagElement: @inheritDoc(474)", "Delete TextElement:  (475)", "Delete TagElement(476)", "Delete Javadoc(477)", "Delete SimpleName: Override(478)", "Delete MarkerAnnotation(479)", "Delete Modifier: public(480)", "Delete SimpleName: String(481)", "Delete SimpleType: String(482)", "Delete SimpleName: toString(483)", "Delete SimpleName: StringBuilder(484)", "Delete SimpleType: StringBuilder(485)", "Delete SimpleName: builder(486)", "Delete SimpleName: StringBuilder(487)", "Delete SimpleType: StringBuilder(488)", "Delete SimpleName: method(489)", "Delete ClassInstanceCreation(490)", "Delete VariableDeclarationFragment(491)", "Delete VariableDeclarationStatement(492)", "Delete SimpleName: Class(493)", "Delete SimpleType: Class(494)", "Delete WildcardType: ?(495)", "Delete ParameterizedType: Class<?>(496)", "Delete SimpleName: c(497)", "Delete SingleVariableDeclaration(498)", "Delete SimpleName: params(499)", "Delete SimpleName: builder(500)", "Delete SimpleName: append(501)", "Delete SimpleName: c(502)", "Delete SimpleName: Void(503)", "Delete SimpleType: Void(504)", "Delete TypeLiteral(505)", "Delete InfixExpression: ==(506)", "Delete StringLiteral: \"null\"(507)", "Delete SimpleName: c(508)", "Delete SimpleName: getName(509)", "Delete MethodInvocation(510)", "Delete ConditionalExpression(511)", "Delete MethodInvocation(512)", "Delete ExpressionStatement(513)", "Delete Block(514)", "Delete EnhancedForStatement(515)", "Delete SimpleName: builder(516)", "Delete SimpleName: toString(517)", "Delete MethodInvocation(518)", "Delete ReturnStatement(519)", "Delete Block(520)", "Delete MethodDeclaration(521)", "Delete TextElement: Outputs a human readable debug representation of this key.(522)", "Delete TagElement(523)", "Delete TextElement:  method(p0, p1, ...)(524)", "Delete TagElement: @return(525)", "Delete Javadoc(526)", "Delete Modifier: public(527)", "Delete SimpleName: String(528)", "Delete SimpleType: String(529)", "Delete SimpleName: debugString(530)", "Delete SimpleName: StringBuilder(531)", "Delete SimpleType: StringBuilder(532)", "Delete SimpleName: builder(533)", "Delete SimpleName: StringBuilder(534)", "Delete SimpleType: StringBuilder(535)", "Delete SimpleName: method(536)", "Delete ClassInstanceCreation(537)", "Delete VariableDeclarationFragment(538)", "Delete VariableDeclarationStatement(539)", "Delete SimpleName: builder(540)", "Delete SimpleName: append(541)", "Delete CharacterLiteral: '('(542)", "Delete MethodInvocation(543)", "Delete ExpressionStatement(544)", "Delete PrimitiveType: int(545)", "Delete SimpleName: i(546)", "Delete NumberLiteral: 0(547)", "Delete VariableDeclarationFragment(548)", "Delete VariableDeclarationExpression(549)", "Delete SimpleName: i(550)", "Delete QualifiedName: params.length(551)", "Delete InfixExpression: <(552)", "Delete SimpleName: i(553)", "Delete PostfixExpression: ++(554)", "Delete SimpleName: i(555)", "Delete NumberLiteral: 0(556)", "Delete InfixExpression: >(557)", "Delete SimpleName: builder(558)", "Delete SimpleName: append(559)", "Delete StringLiteral: \", \"(560)", "Delete MethodInvocation(561)", "Delete ExpressionStatement(562)", "Delete Block(563)", "Delete IfStatement(564)", "Delete SimpleName: builder(565)", "Delete SimpleName: append(566)", "Delete SimpleName: Void(567)", "Delete SimpleType: Void(568)", "Delete TypeLiteral(569)", "Delete SimpleName: params(570)", "Delete SimpleName: i(571)", "Delete ArrayAccess(572)", "Delete InfixExpression: ==(573)", "Delete StringLiteral: \"null\"(574)", "Delete SimpleName: params(575)", "Delete SimpleName: i(576)", "Delete ArrayAccess(577)", "Delete SimpleName: getName(578)", "Delete MethodInvocation(579)", "Delete ConditionalExpression(580)", "Delete MethodInvocation(581)", "Delete ExpressionStatement(582)", "Delete Block(583)", "Delete ForStatement(584)", "Delete SimpleName: builder(585)", "Delete SimpleName: append(586)", "Delete CharacterLiteral: ')'(587)", "Delete MethodInvocation(588)", "Delete ExpressionStatement(589)", "Delete SimpleName: builder(590)", "Delete SimpleName: toString(591)", "Delete MethodInvocation(592)", "Delete ReturnStatement(593)", "Delete Block(594)", "Delete MethodDeclaration(595)", "Delete TextElement: Gets the most specific method that is applicable to the parameters of this key.(596)", "Delete TagElement(597)", "Delete SimpleName: methods(598)", "Delete TextElement:  a list of methods.(599)", "Delete TagElement: @param(600)", "Delete TextElement:  the most specific method.(601)", "Delete TagElement: @return(602)", "Delete QualifiedName: MethodKey.AmbiguousException(603)", "Delete TextElement:  if there is more than one.(604)", "Delete TagElement: @throws(605)", "Delete Javadoc(606)", "Delete Modifier: public(607)", "Delete SimpleName: Method(608)", "Delete SimpleType: Method(609)", "Delete SimpleName: getMostSpecificMethod(610)", "Delete SimpleName: List(611)", "Delete SimpleType: List(612)", "Delete SimpleName: Method(613)", "Delete SimpleType: Method(614)", "Delete ParameterizedType: List<Method>(615)", "Delete SimpleName: methods(616)", "Delete SingleVariableDeclaration(617)", "Delete SimpleName: METHODS(618)", "Delete SimpleName: getMostSpecific(619)", "Delete SimpleName: methods(620)", "Delete SimpleName: params(621)", "Delete MethodInvocation(622)", "Delete ReturnStatement(623)", "Delete Block(624)", "Delete MethodDeclaration(625)", "Delete TextElement: Gets the most specific constructor that is applicable to the parameters of this key.(626)", "Delete TagElement(627)", "Delete SimpleName: methods(628)", "Delete TextElement:  a list of constructors.(629)", "Delete TagElement: @param(630)", "Delete TextElement:  the most specific constructor.(631)", "Delete TagElement: @return(632)", "Delete QualifiedName: MethodKey.AmbiguousException(633)", "Delete TextElement:  if there is more than one.(634)", "Delete TagElement: @throws(635)", "Delete Javadoc(636)", "Delete Modifier: public(637)", "Delete SimpleName: Constructor(638)", "Delete SimpleType: Constructor(639)", "Delete WildcardType: ?(640)", "Delete ParameterizedType: Constructor<?>(641)", "Delete SimpleName: getMostSpecificConstructor(642)", "Delete SimpleName: List(643)", "Delete SimpleType: List(644)", "Delete SimpleName: Constructor(645)", "Delete SimpleType: Constructor(646)", "Delete WildcardType: ?(647)", "Delete ParameterizedType: Constructor<?>(648)", "Delete ParameterizedType: List<Constructor<?>>(649)", "Delete SimpleName: methods(650)", "Delete SingleVariableDeclaration(651)", "Delete SimpleName: CONSTRUCTORS(652)", "Delete SimpleName: getMostSpecific(653)", "Delete SimpleName: methods(654)", "Delete SimpleName: params(655)", "Delete MethodInvocation(656)", "Delete ReturnStatement(657)", "Delete Block(658)", "Delete MethodDeclaration(659)", "Delete TextElement: Determines whether a type represented by a class object is(660)", "Delete TextElement: convertible to another type represented by a class object using a(661)", "Delete TextElement: method invocation conversion, treating object types of primitive(662)", "Delete TextElement: types as if they were primitive types (that is, a Boolean actual(663)", "Delete TextElement: parameter type matches boolean primitive formal type). This behavior(664)", "Delete TextElement: is because this method is used to determine applicable methods for(665)", "Delete TextElement: an actual parameter list, and primitive types are represented by(666)", "Delete TextElement: their object duals in reflective method calls.(667)", "Delete TagElement(668)", "Delete SimpleName: formal(669)", "Delete TextElement:          the formal parameter type to which the actual(670)", "Delete TextElement: parameter type should be convertible(671)", "Delete TagElement: @param(672)", "Delete SimpleName: actual(673)", "Delete TextElement:          the actual parameter type.(674)", "Delete TagElement: @param(675)", "Delete SimpleName: possibleVarArg(676)", "Delete TextElement:  whether or not we're dealing with the last parameter(677)", "Delete TextElement: in the method declaration(678)", "Delete TagElement: @param(679)", "Delete TextElement:  true if either formal type is assignable from actual type,(680)", "Delete TextElement: or formal is a primitive type and actual is its corresponding object(681)", "Delete TextElement: type or an object type of a primitive type that can be converted to(682)", "Delete TextElement: the formal type.(683)", "Delete TagElement: @return(684)", "Delete Javadoc(685)", "Delete Modifier: public(686)", "Delete Modifier: static(687)", "Delete PrimitiveType: boolean(688)", "Delete SimpleName: isInvocationConvertible(689)", "Delete SimpleName: Class(690)", "Delete SimpleType: Class(691)", "Delete WildcardType: ?(692)", "Delete ParameterizedType: Class<?>(693)", "Delete SimpleName: formal(694)", "Delete SingleVariableDeclaration(695)", "Delete SimpleName: Class(696)", "Delete SimpleType: Class(697)", "Delete WildcardType: ?(698)", "Delete ParameterizedType: Class<?>(699)", "Delete SimpleName: actual(700)", "Delete SingleVariableDeclaration(701)", "Delete PrimitiveType: boolean(702)", "Delete SimpleName: possibleVarArg(703)", "Delete SingleVariableDeclaration(704)", "Delete SimpleName: actual(705)", "Delete NullLiteral(706)", "Delete InfixExpression: ==(707)", "Delete SimpleName: formal(708)", "Delete SimpleName: isPrimitive(709)", "Delete MethodInvocation(710)", "Delete PrefixExpression: !(711)", "Delete InfixExpression: &&(712)", "Delete BooleanLiteral: true(713)", "Delete ReturnStatement(714)", "Delete Block(715)", "Delete IfStatement(716)", "Delete SimpleName: actual(717)", "Delete NullLiteral(718)", "Delete InfixExpression: !=(719)", "Delete SimpleName: formal(720)", "Delete SimpleName: isAssignableFrom(721)", "Delete SimpleName: actual(722)", "Delete MethodInvocation(723)", "Delete InfixExpression: &&(724)", "Delete BooleanLiteral: true(725)", "Delete ReturnStatement(726)", "Delete Block(727)", "Delete IfStatement(728)", "Delete SimpleName: formal(729)", "Delete SimpleName: isPrimitive(730)", "Delete MethodInvocation(731)", "Delete SimpleName: formal(732)", "Delete QualifiedName: Boolean.TYPE(733)", "Delete InfixExpression: ==(734)", "Delete SimpleName: actual(735)", "Delete SimpleName: Boolean(736)", "Delete SimpleType: Boolean(737)", "Delete TypeLiteral(738)", "Delete InfixExpression: ==(739)", "Delete InfixExpression: &&(740)", "Delete BooleanLiteral: true(741)", "Delete ReturnStatement(742)", "Delete Block(743)", "Delete IfStatement(744)", "Delete SimpleName: formal(745)", "Delete QualifiedName: Character.TYPE(746)", "Delete InfixExpression: ==(747)", "Delete SimpleName: actual(748)", "Delete SimpleName: Character(749)", "Delete SimpleType: Character(750)", "Delete TypeLiteral(751)", "Delete InfixExpression: ==(752)", "Delete InfixExpression: &&(753)", "Delete BooleanLiteral: true(754)", "Delete ReturnStatement(755)", "Delete Block(756)", "Delete IfStatement(757)", "Delete SimpleName: formal(758)", "Delete QualifiedName: Byte.TYPE(759)", "Delete InfixExpression: ==(760)", "Delete SimpleName: actual(761)", "Delete SimpleName: Byte(762)", "Delete SimpleType: Byte(763)", "Delete TypeLiteral(764)", "Delete InfixExpression: ==(765)", "Delete InfixExpression: &&(766)", "Delete BooleanLiteral: true(767)", "Delete ReturnStatement(768)", "Delete Block(769)", "Delete IfStatement(770)", "Delete SimpleName: formal(771)", "Delete QualifiedName: Short.TYPE(772)", "Delete InfixExpression: ==(773)", "Delete SimpleName: actual(774)", "Delete SimpleName: Short(775)", "Delete SimpleType: Short(776)", "Delete TypeLiteral(777)", "Delete InfixExpression: ==(778)", "Delete SimpleName: actual(779)", "Delete SimpleName: Byte(780)", "Delete SimpleType: Byte(781)", "Delete TypeLiteral(782)", "Delete InfixExpression: ==(783)", "Delete InfixExpression: ||(784)", "Delete ParenthesizedExpression(785)", "Delete InfixExpression: &&(786)", "Delete BooleanLiteral: true(787)", "Delete ReturnStatement(788)", "Delete Block(789)", "Delete IfStatement(790)", "Delete SimpleName: formal(791)", "Delete QualifiedName: Integer.TYPE(792)", "Delete InfixExpression: ==(793)", "Delete SimpleName: actual(794)", "Delete SimpleName: Integer(795)", "Delete SimpleType: Integer(796)", "Delete TypeLiteral(797)", "Delete InfixExpression: ==(798)", "Delete SimpleName: actual(799)", "Delete SimpleName: Short(800)", "Delete SimpleType: Short(801)", "Delete TypeLiteral(802)", "Delete InfixExpression: ==(803)", "Delete InfixExpression: ||(804)", "Delete SimpleName: actual(805)", "Delete SimpleName: Byte(806)", "Delete SimpleType: Byte(807)", "Delete TypeLiteral(808)", "Delete InfixExpression: ==(809)", "Delete InfixExpression: ||(810)", "Delete ParenthesizedExpression(811)", "Delete InfixExpression: &&(812)", "Delete BooleanLiteral: true(813)", "Delete ReturnStatement(814)", "Delete Block(815)", "Delete IfStatement(816)", "Delete SimpleName: formal(817)", "Delete QualifiedName: Long.TYPE(818)", "Delete InfixExpression: ==(819)", "Delete SimpleName: actual(820)", "Delete SimpleName: Long(821)", "Delete SimpleType: Long(822)", "Delete TypeLiteral(823)", "Delete InfixExpression: ==(824)", "Delete SimpleName: actual(825)", "Delete SimpleName: Integer(826)", "Delete SimpleType: Integer(827)", "Delete TypeLiteral(828)", "Delete InfixExpression: ==(829)", "Delete InfixExpression: ||(830)", "Delete SimpleName: actual(831)", "Delete SimpleName: Short(832)", "Delete SimpleType: Short(833)", "Delete TypeLiteral(834)", "Delete InfixExpression: ==(835)", "Delete InfixExpression: ||(836)", "Delete SimpleName: actual(837)", "Delete SimpleName: Byte(838)", "Delete SimpleType: Byte(839)", "Delete TypeLiteral(840)", "Delete InfixExpression: ==(841)", "Delete InfixExpression: ||(842)", "Delete ParenthesizedExpression(843)", "Delete InfixExpression: &&(844)", "Delete BooleanLiteral: true(845)", "Delete ReturnStatement(846)", "Delete Block(847)", "Delete IfStatement(848)", "Delete SimpleName: formal(849)", "Delete QualifiedName: Float.TYPE(850)", "Delete InfixExpression: ==(851)", "Delete SimpleName: actual(852)", "Delete SimpleName: Float(853)", "Delete SimpleType: Float(854)", "Delete TypeLiteral(855)", "Delete InfixExpression: ==(856)", "Delete SimpleName: actual(857)", "Delete SimpleName: Long(858)", "Delete SimpleType: Long(859)", "Delete TypeLiteral(860)", "Delete InfixExpression: ==(861)", "Delete InfixExpression: ||(862)", "Delete SimpleName: actual(863)", "Delete SimpleName: Integer(864)", "Delete SimpleType: Integer(865)", "Delete TypeLiteral(866)", "Delete InfixExpression: ==(867)", "Delete InfixExpression: ||(868)", "Delete SimpleName: actual(869)", "Delete SimpleName: Short(870)", "Delete SimpleType: Short(871)", "Delete TypeLiteral(872)", "Delete InfixExpression: ==(873)", "Delete InfixExpression: ||(874)", "Delete SimpleName: actual(875)", "Delete SimpleName: Byte(876)", "Delete SimpleType: Byte(877)", "Delete TypeLiteral(878)", "Delete InfixExpression: ==(879)", "Delete InfixExpression: ||(880)", "Delete ParenthesizedExpression(881)", "Delete InfixExpression: &&(882)", "Delete BooleanLiteral: true(883)", "Delete ReturnStatement(884)", "Delete Block(885)", "Delete IfStatement(886)", "Delete SimpleName: formal(887)", "Delete QualifiedName: Double.TYPE(888)", "Delete InfixExpression: ==(889)", "Delete SimpleName: actual(890)", "Delete SimpleName: Double(891)", "Delete SimpleType: Double(892)", "Delete TypeLiteral(893)", "Delete InfixExpression: ==(894)", "Delete SimpleName: actual(895)", "Delete SimpleName: Float(896)", "Delete SimpleType: Float(897)", "Delete TypeLiteral(898)", "Delete InfixExpression: ==(899)", "Delete InfixExpression: ||(900)", "Delete SimpleName: actual(901)", "Delete SimpleName: Long(902)", "Delete SimpleType: Long(903)", "Delete TypeLiteral(904)", "Delete InfixExpression: ==(905)", "Delete InfixExpression: ||(906)", "Delete SimpleName: actual(907)", "Delete SimpleName: Integer(908)", "Delete SimpleType: Integer(909)", "Delete TypeLiteral(910)", "Delete InfixExpression: ==(911)", "Delete InfixExpression: ||(912)", "Delete SimpleName: actual(913)", "Delete SimpleName: Short(914)", "Delete SimpleType: Short(915)", "Delete TypeLiteral(916)", "Delete InfixExpression: ==(917)", "Delete InfixExpression: ||(918)", "Delete SimpleName: actual(919)", "Delete SimpleName: Byte(920)", "Delete SimpleType: Byte(921)", "Delete TypeLiteral(922)", "Delete InfixExpression: ==(923)", "Delete InfixExpression: ||(924)", "Delete ParenthesizedExpression(925)", "Delete InfixExpression: &&(926)", "Delete BooleanLiteral: true(927)", "Delete ReturnStatement(928)", "Delete Block(929)", "Delete IfStatement(930)", "Delete Block(931)", "Delete IfStatement(932)", "Delete SimpleName: possibleVarArg(933)", "Delete SimpleName: formal(934)", "Delete SimpleName: isArray(935)", "Delete MethodInvocation(936)", "Delete InfixExpression: &&(937)", "Delete SimpleName: actual(938)", "Delete NullLiteral(939)", "Delete InfixExpression: !=(940)", "Delete SimpleName: actual(941)", "Delete SimpleName: isArray(942)", "Delete MethodInvocation(943)", "Delete InfixExpression: &&(944)", "Delete SimpleName: actual(945)", "Delete SimpleName: actual(946)", "Delete SimpleName: getComponentType(947)", "Delete MethodInvocation(948)", "Delete Assignment: =(949)", "Delete ExpressionStatement(950)", "Delete Block(951)", "Delete IfStatement(952)", "Delete SimpleName: isInvocationConvertible(953)", "Delete SimpleName: formal(954)", "Delete SimpleName: getComponentType(955)", "Delete MethodInvocation(956)", "Delete SimpleName: actual(957)", "Delete BooleanLiteral: false(958)", "Delete MethodInvocation(959)", "Delete ReturnStatement(960)", "Delete Block(961)", "Delete IfStatement(962)", "Delete BooleanLiteral: false(963)", "Delete ReturnStatement(964)", "Delete Block(965)", "Delete MethodDeclaration(966)", "Delete TextElement: Determines whether a type represented by a class object is(967)", "Delete TextElement: convertible to another type represented by a class object using a(968)", "Delete TextElement: method invocation conversion, without matching object and primitive(969)", "Delete TextElement: types. This method is used to determine the more specific type when(970)", "Delete TextElement: comparing signatures of methods.(971)", "Delete TagElement(972)", "Delete SimpleName: formal(973)", "Delete TextElement:          the formal parameter type to which the actual(974)", "Delete TextElement: parameter type should be convertible(975)", "Delete TagElement: @param(976)", "Delete SimpleName: actual(977)", "Delete TextElement:          the actual parameter type.(978)", "Delete TagElement: @param(979)", "Delete SimpleName: possibleVarArg(980)", "Delete TextElement:  whether or not we're dealing with the last parameter(981)", "Delete TextElement: in the method declaration(982)", "Delete TagElement: @param(983)", "Delete TextElement:  true if either formal type is assignable from actual type,(984)", "Delete TextElement: or formal and actual are both primitive types and actual can be(985)", "Delete TextElement: subject to widening conversion to formal.(986)", "Delete TagElement: @return(987)", "Delete Javadoc(988)", "Delete Modifier: public(989)", "Delete Modifier: static(990)", "Delete PrimitiveType: boolean(991)", "Delete SimpleName: isStrictInvocationConvertible(992)", "Delete SimpleName: Class(993)", "Delete SimpleType: Class(994)", "Delete WildcardType: ?(995)", "Delete ParameterizedType: Class<?>(996)", "Delete SimpleName: formal(997)", "Delete SingleVariableDeclaration(998)", "Delete SimpleName: Class(999)", "Delete SimpleType: Class(1000)", "Delete WildcardType: ?(1001)", "Delete ParameterizedType: Class<?>(1002)", "Delete SimpleName: actual(1003)", "Delete SingleVariableDeclaration(1004)", "Delete PrimitiveType: boolean(1005)", "Delete SimpleName: possibleVarArg(1006)", "Delete SingleVariableDeclaration(1007)", "Delete SimpleName: actual(1008)", "Delete NullLiteral(1009)", "Delete InfixExpression: ==(1010)", "Delete SimpleName: formal(1011)", "Delete SimpleName: isPrimitive(1012)", "Delete MethodInvocation(1013)", "Delete PrefixExpression: !(1014)", "Delete InfixExpression: &&(1015)", "Delete BooleanLiteral: true(1016)", "Delete ReturnStatement(1017)", "Delete Block(1018)", "Delete IfStatement(1019)", "Delete SimpleName: formal(1020)", "Delete SimpleName: isAssignableFrom(1021)", "Delete SimpleName: actual(1022)", "Delete MethodInvocation(1023)", "Delete BooleanLiteral: true(1024)", "Delete ReturnStatement(1025)", "Delete Block(1026)", "Delete IfStatement(1027)", "Delete SimpleName: formal(1028)", "Delete SimpleName: isPrimitive(1029)", "Delete MethodInvocation(1030)", "Delete SimpleName: formal(1031)", "Delete QualifiedName: Short.TYPE(1032)", "Delete InfixExpression: ==(1033)", "Delete SimpleName: actual(1034)", "Delete QualifiedName: Byte.TYPE(1035)", "Delete InfixExpression: ==(1036)", "Delete ParenthesizedExpression(1037)", "Delete InfixExpression: &&(1038)", "Delete BooleanLiteral: true(1039)", "Delete ReturnStatement(1040)", "Delete Block(1041)", "Delete IfStatement(1042)", "Delete SimpleName: formal(1043)", "Delete QualifiedName: Integer.TYPE(1044)", "Delete InfixExpression: ==(1045)", "Delete SimpleName: actual(1046)", "Delete QualifiedName: Short.TYPE(1047)", "Delete InfixExpression: ==(1048)", "Delete SimpleName: actual(1049)", "Delete QualifiedName: Byte.TYPE(1050)", "Delete InfixExpression: ==(1051)", "Delete InfixExpression: ||(1052)", "Delete ParenthesizedExpression(1053)", "Delete InfixExpression: &&(1054)", "Delete BooleanLiteral: true(1055)", "Delete ReturnStatement(1056)", "Delete Block(1057)", "Delete IfStatement(1058)", "Delete SimpleName: formal(1059)", "Delete QualifiedName: Long.TYPE(1060)", "Delete InfixExpression: ==(1061)", "Delete SimpleName: actual(1062)", "Delete QualifiedName: Integer.TYPE(1063)", "Delete InfixExpression: ==(1064)", "Delete SimpleName: actual(1065)", "Delete QualifiedName: Short.TYPE(1066)", "Delete InfixExpression: ==(1067)", "Delete InfixExpression: ||(1068)", "Delete SimpleName: actual(1069)", "Delete QualifiedName: Byte.TYPE(1070)", "Delete InfixExpression: ==(1071)", "Delete InfixExpression: ||(1072)", "Delete ParenthesizedExpression(1073)", "Delete InfixExpression: &&(1074)", "Delete BooleanLiteral: true(1075)", "Delete ReturnStatement(1076)", "Delete Block(1077)", "Delete IfStatement(1078)", "Delete SimpleName: formal(1079)", "Delete QualifiedName: Float.TYPE(1080)", "Delete InfixExpression: ==(1081)", "Delete SimpleName: actual(1082)", "Delete QualifiedName: Long.TYPE(1083)", "Delete InfixExpression: ==(1084)", "Delete SimpleName: actual(1085)", "Delete QualifiedName: Integer.TYPE(1086)", "Delete InfixExpression: ==(1087)", "Delete InfixExpression: ||(1088)", "Delete SimpleName: actual(1089)", "Delete QualifiedName: Short.TYPE(1090)", "Delete InfixExpression: ==(1091)", "Delete InfixExpression: ||(1092)", "Delete SimpleName: actual(1093)", "Delete QualifiedName: Byte.TYPE(1094)", "Delete InfixExpression: ==(1095)", "Delete InfixExpression: ||(1096)", "Delete ParenthesizedExpression(1097)", "Delete InfixExpression: &&(1098)", "Delete BooleanLiteral: true(1099)", "Delete ReturnStatement(1100)", "Delete Block(1101)", "Delete IfStatement(1102)", "Delete SimpleName: formal(1103)", "Delete QualifiedName: Double.TYPE(1104)", "Delete InfixExpression: ==(1105)", "Delete SimpleName: actual(1106)", "Delete QualifiedName: Float.TYPE(1107)", "Delete InfixExpression: ==(1108)", "Delete SimpleName: actual(1109)", "Delete QualifiedName: Long.TYPE(1110)", "Delete InfixExpression: ==(1111)", "Delete InfixExpression: ||(1112)", "Delete SimpleName: actual(1113)", "Delete QualifiedName: Integer.TYPE(1114)", "Delete InfixExpression: ==(1115)", "Delete InfixExpression: ||(1116)", "Delete SimpleName: actual(1117)", "Delete QualifiedName: Short.TYPE(1118)", "Delete InfixExpression: ==(1119)", "Delete InfixExpression: ||(1120)", "Delete SimpleName: actual(1121)", "Delete QualifiedName: Byte.TYPE(1122)", "Delete InfixExpression: ==(1123)", "Delete InfixExpression: ||(1124)", "Delete ParenthesizedExpression(1125)", "Delete InfixExpression: &&(1126)", "Delete BooleanLiteral: true(1127)", "Delete ReturnStatement(1128)", "Delete Block(1129)", "Delete IfStatement(1130)", "Delete Block(1131)", "Delete IfStatement(1132)", "Delete SimpleName: possibleVarArg(1133)", "Delete SimpleName: formal(1134)", "Delete SimpleName: isArray(1135)", "Delete MethodInvocation(1136)", "Delete InfixExpression: &&(1137)", "Delete SimpleName: actual(1138)", "Delete NullLiteral(1139)", "Delete InfixExpression: !=(1140)", "Delete SimpleName: actual(1141)", "Delete SimpleName: isArray(1142)", "Delete MethodInvocation(1143)", "Delete InfixExpression: &&(1144)", "Delete SimpleName: actual(1145)", "Delete SimpleName: actual(1146)", "Delete SimpleName: getComponentType(1147)", "Delete MethodInvocation(1148)", "Delete Assignment: =(1149)", "Delete ExpressionStatement(1150)", "Delete Block(1151)", "Delete IfStatement(1152)", "Delete SimpleName: isStrictInvocationConvertible(1153)", "Delete SimpleName: formal(1154)", "Delete SimpleName: getComponentType(1155)", "Delete MethodInvocation(1156)", "Delete SimpleName: actual(1157)", "Delete BooleanLiteral: false(1158)", "Delete MethodInvocation(1159)", "Delete ReturnStatement(1160)", "Delete Block(1161)", "Delete IfStatement(1162)", "Delete BooleanLiteral: false(1163)", "Delete ReturnStatement(1164)", "Delete Block(1165)", "Delete MethodDeclaration(1166)", "Delete TextElement: whether a method/ctor is more specific than a previously compared one.(1167)", "Delete TagElement(1168)", "Delete Javadoc(1169)", "Delete Modifier: private(1170)", "Delete Modifier: static(1171)", "Delete Modifier: final(1172)", "Delete PrimitiveType: int(1173)", "Delete SimpleName: MORE_SPECIFIC(1174)", "Delete NumberLiteral: 0(1175)", "Delete VariableDeclarationFragment(1176)", "Delete FieldDeclaration(1177)", "Delete TextElement: whether a method/ctor is less specific than a previously compared one.(1178)", "Delete TagElement(1179)", "Delete Javadoc(1180)", "Delete Modifier: private(1181)", "Delete Modifier: static(1182)", "Delete Modifier: final(1183)", "Delete PrimitiveType: int(1184)", "Delete SimpleName: LESS_SPECIFIC(1185)", "Delete NumberLiteral: 1(1186)", "Delete VariableDeclarationFragment(1187)", "Delete FieldDeclaration(1188)", "Delete TextElement: A method/ctor doesn't match a previously compared one.(1189)", "Delete TagElement(1190)", "Delete Javadoc(1191)", "Delete Modifier: private(1192)", "Delete Modifier: static(1193)", "Delete Modifier: final(1194)", "Delete PrimitiveType: int(1195)", "Delete SimpleName: INCOMPARABLE(1196)", "Delete NumberLiteral: 2(1197)", "Delete VariableDeclarationFragment(1198)", "Delete FieldDeclaration(1199)", "Delete TextElement: Simple distinguishable exception, used when(1200)", "Delete TextElement: we run across ambiguous overloading.  Caught(1201)", "Delete TextElement: by the introspector.(1202)", "Delete TagElement(1203)", "Delete Javadoc(1204)", "Delete Modifier: public(1205)", "Delete Modifier: static(1206)", "Delete SimpleName: AmbiguousException(1207)", "Delete SimpleName: RuntimeException(1208)", "Delete SimpleType: RuntimeException(1209)", "Delete TextElement: Version Id for serializable.(1210)", "Delete TagElement(1211)", "Delete Javadoc(1212)", "Delete Modifier: private(1213)", "Delete Modifier: static(1214)", "Delete Modifier: final(1215)", "Delete PrimitiveType: long(1216)", "Delete SimpleName: serialVersionUID(1217)", "Delete NumberLiteral: 2314636505414551664L(1218)", "Delete PrefixExpression: -(1219)", "Delete VariableDeclarationFragment(1220)", "Delete FieldDeclaration(1221)", "Delete TypeDeclaration: class(1222)", "Delete TextElement: Utility for parameters matching.(1223)", "Delete TagElement(1224)", "Delete TextElement: <(1225)", "Delete SimpleName: T(1226)", "Delete TextElement: >(1227)", "Delete TextElement:  Method or Constructor(1228)", "Delete TagElement: @param(1229)", "Delete Javadoc(1230)", "Delete Modifier: private(1231)", "Delete Modifier: abstract(1232)", "Delete Modifier: static(1233)", "Delete SimpleName: Parameters(1234)", "Delete SimpleName: T(1235)", "Delete TypeParameter(1236)", "Delete TextElement: Extract the parameter types from its applicable argument.(1237)", "Delete TagElement(1238)", "Delete SimpleName: app(1239)", "Delete TextElement:  a method or constructor(1240)", "Delete TagElement: @param(1241)", "Delete TextElement:  the parameters(1242)", "Delete TagElement: @return(1243)", "Delete Javadoc(1244)", "Delete Modifier: protected(1245)", "Delete Modifier: abstract(1246)", "Delete SimpleName: Class(1247)", "Delete SimpleType: Class(1248)", "Delete WildcardType: ?(1249)", "Delete ParameterizedType: Class<?>(1250)", "Delete Dimension(1251)", "Delete ArrayType: Class<?>[](1252)", "Delete SimpleName: getParameterTypes(1253)", "Delete SimpleName: T(1254)", "Delete SimpleType: T(1255)", "Delete SimpleName: app(1256)", "Delete SingleVariableDeclaration(1257)", "Delete MethodDeclaration(1258)", "Delete TextElement: Gets the most specific method that is applicable to actual argument types.(1259)", "Delete TagElement(1260)", "Delete SimpleName: methods(1261)", "Delete TextElement:  a list of methods.(1262)", "Delete TagElement: @param(1263)", "Delete SimpleName: classes(1264)", "Delete TextElement:  list of argument types.(1265)", "Delete TagElement: @param(1266)", "Delete TextElement:  the most specific method.(1267)", "Delete TagElement: @return(1268)", "Delete QualifiedName: MethodKey.AmbiguousException(1269)", "Delete TextElement:  if there is more than one.(1270)", "Delete TagElement: @throws(1271)", "Delete Javadoc(1272)", "Delete Modifier: private(1273)", "Delete SimpleName: T(1274)", "Delete SimpleType: T(1275)", "Delete SimpleName: getMostSpecific(1276)", "Delete SimpleName: List(1277)", "Delete SimpleType: List(1278)", "Delete SimpleName: T(1279)", "Delete SimpleType: T(1280)", "Delete ParameterizedType: List<T>(1281)", "Delete SimpleName: methods(1282)", "Delete SingleVariableDeclaration(1283)", "Delete SimpleName: Class(1284)", "Delete SimpleType: Class(1285)", "Delete WildcardType: ?(1286)", "Delete ParameterizedType: Class<?>(1287)", "Delete Dimension(1288)", "Delete ArrayType: Class<?>[](1289)", "Delete SimpleName: classes(1290)", "Delete SingleVariableDeclaration(1291)", "Delete SimpleName: LinkedList(1292)", "Delete SimpleType: LinkedList(1293)", "Delete SimpleName: T(1294)", "Delete SimpleType: T(1295)", "Delete ParameterizedType: LinkedList<T>(1296)", "Delete SimpleName: applicables(1297)", "Delete SimpleName: getApplicables(1298)", "Delete SimpleName: methods(1299)", "Delete SimpleName: classes(1300)", "Delete MethodInvocation(1301)", "Delete VariableDeclarationFragment(1302)", "Delete VariableDeclarationStatement(1303)", "Delete SimpleName: applicables(1304)", "Delete SimpleName: isEmpty(1305)", "Delete MethodInvocation(1306)", "Delete NullLiteral(1307)", "Delete ReturnStatement(1308)", "Delete Block(1309)", "Delete IfStatement(1310)", "Delete SimpleName: applicables(1311)", "Delete SimpleName: size(1312)", "Delete MethodInvocation(1313)", "Delete NumberLiteral: 1(1314)", "Delete InfixExpression: ==(1315)", "Delete SimpleName: applicables(1316)", "Delete SimpleName: getFirst(1317)", "Delete MethodInvocation(1318)", "Delete ReturnStatement(1319)", "Delete Block(1320)", "Delete IfStatement(1321)", "Delete SimpleName: LinkedList(1322)", "Delete SimpleType: LinkedList(1323)", "Delete SimpleName: T(1324)", "Delete SimpleType: T(1325)", "Delete ParameterizedType: LinkedList<T>(1326)", "Delete SimpleName: maximals(1327)", "Delete SimpleName: LinkedList(1328)", "Delete SimpleType: LinkedList(1329)", "Delete SimpleName: T(1330)", "Delete SimpleType: T(1331)", "Delete ParameterizedType: LinkedList<T>(1332)", "Delete ClassInstanceCreation(1333)", "Delete VariableDeclarationFragment(1334)", "Delete VariableDeclarationStatement(1335)", "Delete SimpleName: Iterator(1336)", "Delete SimpleType: Iterator(1337)", "Delete SimpleName: T(1338)", "Delete SimpleType: T(1339)", "Delete ParameterizedType: Iterator<T>(1340)", "Delete SimpleName: applicable(1341)", "Delete SimpleName: applicables(1342)", "Delete SimpleName: iterator(1343)", "Delete MethodInvocation(1344)", "Delete VariableDeclarationFragment(1345)", "Delete VariableDeclarationExpression(1346)", "Delete SimpleName: applicable(1347)", "Delete SimpleName: hasNext(1348)", "Delete MethodInvocation(1349)", "Delete SimpleName: T(1350)", "Delete SimpleType: T(1351)", "Delete SimpleName: app(1352)", "Delete SimpleName: applicable(1353)", "Delete SimpleName: next(1354)", "Delete MethodInvocation(1355)", "Delete VariableDeclarationFragment(1356)", "Delete VariableDeclarationStatement(1357)", "Delete SimpleName: Class(1358)", "Delete SimpleType: Class(1359)", "Delete WildcardType: ?(1360)", "Delete ParameterizedType: Class<?>(1361)", "Delete Dimension(1362)", "Delete ArrayType: Class<?>[](1363)", "Delete SimpleName: appArgs(1364)", "Delete SimpleName: getParameterTypes(1365)", "Delete SimpleName: app(1366)", "Delete MethodInvocation(1367)", "Delete VariableDeclarationFragment(1368)", "Delete VariableDeclarationStatement(1369)", "Delete PrimitiveType: boolean(1370)", "Delete SimpleName: lessSpecific(1371)", "Delete BooleanLiteral: false(1372)", "Delete VariableDeclarationFragment(1373)", "Delete VariableDeclarationStatement(1374)", "Delete SimpleName: Iterator(1375)", "Delete SimpleType: Iterator(1376)", "Delete SimpleName: T(1377)", "Delete SimpleType: T(1378)", "Delete ParameterizedType: Iterator<T>(1379)", "Delete SimpleName: maximal(1380)", "Delete SimpleName: maximals(1381)", "Delete SimpleName: iterator(1382)", "Delete MethodInvocation(1383)", "Delete VariableDeclarationFragment(1384)", "Delete VariableDeclarationExpression(1385)", "Delete SimpleName: lessSpecific(1386)", "Delete PrefixExpression: !(1387)", "Delete SimpleName: maximal(1388)", "Delete SimpleName: hasNext(1389)", "Delete MethodInvocation(1390)", "Delete InfixExpression: &&(1391)", "Delete SimpleName: T(1392)", "Delete SimpleType: T(1393)", "Delete SimpleName: max(1394)", "Delete SimpleName: maximal(1395)", "Delete SimpleName: next(1396)", "Delete MethodInvocation(1397)", "Delete VariableDeclarationFragment(1398)", "Delete VariableDeclarationStatement(1399)", "Delete SimpleName: moreSpecific(1400)", "Delete SimpleName: appArgs(1401)", "Delete SimpleName: getParameterTypes(1402)", "Delete SimpleName: max(1403)", "Delete MethodInvocation(1404)", "Delete MethodInvocation(1405)", "Delete SimpleName: MORE_SPECIFIC(1406)", "Delete SwitchCase(1407)", "Delete SimpleName: maximal(1408)", "Delete SimpleName: remove(1409)", "Delete MethodInvocation(1410)", "Delete ExpressionStatement(1411)", "Delete BreakStatement(1412)", "Delete SimpleName: LESS_SPECIFIC(1413)", "Delete SwitchCase(1414)", "Delete SimpleName: lessSpecific(1415)", "Delete BooleanLiteral: true(1416)", "Delete Assignment: =(1417)", "Delete ExpressionStatement(1418)", "Delete BreakStatement(1419)", "Delete SwitchStatement(1420)", "Delete Block(1421)", "Delete ForStatement(1422)", "Delete SimpleName: lessSpecific(1423)", "Delete PrefixExpression: !(1424)", "Delete SimpleName: maximals(1425)", "Delete SimpleName: addLast(1426)", "Delete SimpleName: app(1427)", "Delete MethodInvocation(1428)", "Delete ExpressionStatement(1429)", "Delete Block(1430)", "Delete IfStatement(1431)", "Delete Block(1432)", "Delete ForStatement(1433)", "Delete SimpleName: maximals(1434)", "Delete SimpleName: size(1435)", "Delete MethodInvocation(1436)", "Delete NumberLiteral: 1(1437)", "Delete InfixExpression: >(1438)", "Delete SimpleName: AmbiguousException(1439)", "Delete SimpleType: AmbiguousException(1440)", "Delete ClassInstanceCreation(1441)", "Delete ThrowStatement(1442)", "Delete Block(1443)", "Delete IfStatement(1444)", "Delete SimpleName: maximals(1445)", "Delete SimpleName: getFirst(1446)", "Delete MethodInvocation(1447)", "Delete ReturnStatement(1448)", "Delete Block(1449)", "Delete MethodDeclaration(1450)", "Delete TextElement: Determines which method signature (represented by a class array) is more(1451)", "Delete TextElement: specific. This defines a partial ordering on the method signatures.(1452)", "Delete TagElement(1453)", "Delete SimpleName: c1(1454)", "Delete TextElement:  first signature to compare(1455)", "Delete TagElement: @param(1456)", "Delete SimpleName: c2(1457)", "Delete TextElement:  second signature to compare(1458)", "Delete TagElement: @param(1459)", "Delete TextElement:  MORE_SPECIFIC if c1 is more specific than c2, LESS_SPECIFIC if(1460)", "Delete TextElement: c1 is less specific than c2, INCOMPARABLE if they are incomparable.(1461)", "Delete TagElement: @return(1462)", "Delete Javadoc(1463)", "Delete Modifier: private(1464)", "Delete PrimitiveType: int(1465)", "Delete SimpleName: moreSpecific(1466)", "Delete SimpleName: Class(1467)", "Delete SimpleType: Class(1468)", "Delete WildcardType: ?(1469)", "Delete ParameterizedType: Class<?>(1470)", "Delete Dimension(1471)", "Delete ArrayType: Class<?>[](1472)", "Delete SimpleName: c1(1473)", "Delete SingleVariableDeclaration(1474)", "Delete SimpleName: Class(1475)", "Delete SimpleType: Class(1476)", "Delete WildcardType: ?(1477)", "Delete ParameterizedType: Class<?>(1478)", "Delete Dimension(1479)", "Delete ArrayType: Class<?>[](1480)", "Delete SimpleName: c2(1481)", "Delete SingleVariableDeclaration(1482)", "Delete PrimitiveType: boolean(1483)", "Delete SimpleName: c1MoreSpecific(1484)", "Delete BooleanLiteral: false(1485)", "Delete VariableDeclarationFragment(1486)", "Delete VariableDeclarationStatement(1487)", "Delete PrimitiveType: boolean(1488)", "Delete SimpleName: c2MoreSpecific(1489)", "Delete BooleanLiteral: false(1490)", "Delete VariableDeclarationFragment(1491)", "Delete VariableDeclarationStatement(1492)", "Delete QualifiedName: c1.length(1493)", "Delete QualifiedName: c2.length(1494)", "Delete InfixExpression: >(1495)", "Delete SimpleName: MORE_SPECIFIC(1496)", "Delete ReturnStatement(1497)", "Delete Block(1498)", "Delete IfStatement(1499)", "Delete QualifiedName: c2.length(1500)", "Delete QualifiedName: c1.length(1501)", "Delete InfixExpression: >(1502)", "Delete SimpleName: LESS_SPECIFIC(1503)", "Delete ReturnStatement(1504)", "Delete Block(1505)", "Delete IfStatement(1506)", "Delete PrimitiveType: int(1507)", "Delete SimpleName: i(1508)", "Delete NumberLiteral: 0(1509)", "Delete VariableDeclarationFragment(1510)", "Delete VariableDeclarationExpression(1511)", "Delete SimpleName: i(1512)", "Delete QualifiedName: c1.length(1513)", "Delete InfixExpression: <(1514)", "Delete SimpleName: i(1515)", "Delete PrefixExpression: ++(1516)", "Delete SimpleName: c1(1517)", "Delete SimpleName: i(1518)", "Delete ArrayAccess(1519)", "Delete SimpleName: c2(1520)", "Delete SimpleName: i(1521)", "Delete ArrayAccess(1522)", "Delete InfixExpression: !=(1523)", "Delete PrimitiveType: boolean(1524)", "Delete SimpleName: last(1525)", "Delete SimpleName: i(1526)", "Delete QualifiedName: c1.length(1527)", "Delete NumberLiteral: 1(1528)", "Delete InfixExpression: -(1529)", "Delete InfixExpression: ==(1530)", "Delete ParenthesizedExpression(1531)", "Delete VariableDeclarationFragment(1532)", "Delete VariableDeclarationStatement(1533)", "Delete SimpleName: c1MoreSpecific(1534)", "Delete SimpleName: c1MoreSpecific(1535)", "Delete SimpleName: isStrictConvertible(1536)", "Delete SimpleName: c2(1537)", "Delete SimpleName: i(1538)", "Delete ArrayAccess(1539)", "Delete SimpleName: c1(1540)", "Delete SimpleName: i(1541)", "Delete ArrayAccess(1542)", "Delete SimpleName: last(1543)", "Delete MethodInvocation(1544)", "Delete InfixExpression: ||(1545)", "Delete Assignment: =(1546)", "Delete ExpressionStatement(1547)", "Delete SimpleName: c2MoreSpecific(1548)", "Delete SimpleName: c2MoreSpecific(1549)", "Delete SimpleName: isStrictConvertible(1550)", "Delete SimpleName: c1(1551)", "Delete SimpleName: i(1552)", "Delete ArrayAccess(1553)", "Delete SimpleName: c2(1554)", "Delete SimpleName: i(1555)", "Delete ArrayAccess(1556)", "Delete SimpleName: last(1557)", "Delete MethodInvocation(1558)", "Delete InfixExpression: ||(1559)", "Delete Assignment: =(1560)", "Delete ExpressionStatement(1561)", "Delete Block(1562)", "Delete IfStatement(1563)", "Delete Block(1564)", "Delete ForStatement(1565)", "Delete SimpleName: c1MoreSpecific(1566)", "Delete SimpleName: c2MoreSpecific(1567)", "Delete SimpleName: INCOMPARABLE(1568)", "Delete ReturnStatement(1569)", "Delete Block(1570)", "Delete IfStatement(1571)", "Delete SimpleName: MORE_SPECIFIC(1572)", "Delete ReturnStatement(1573)", "Delete Block(1574)", "Delete IfStatement(1575)", "Delete SimpleName: c2MoreSpecific(1576)", "Delete SimpleName: LESS_SPECIFIC(1577)", "Delete ReturnStatement(1578)", "Delete Block(1579)", "Delete IfStatement(1580)", "Delete PrimitiveType: int(1581)", "Delete SimpleName: primDiff(1582)", "Delete NumberLiteral: 0(1583)", "Delete VariableDeclarationFragment(1584)", "Delete VariableDeclarationStatement(1585)", "Delete PrimitiveType: int(1586)", "Delete SimpleName: c(1587)", "Delete NumberLiteral: 0(1588)", "Delete VariableDeclarationFragment(1589)", "Delete VariableDeclarationExpression(1590)", "Delete SimpleName: c(1591)", "Delete QualifiedName: c1.length(1592)", "Delete InfixExpression: <(1593)", "Delete SimpleName: c(1594)", "Delete PrefixExpression: ++(1595)", "Delete SimpleName: c1(1596)", "Delete SimpleName: c(1597)", "Delete ArrayAccess(1598)", "Delete SimpleName: isPrimitive(1599)", "Delete MethodInvocation(1600)", "Delete SimpleName: primDiff(1601)", "Delete NumberLiteral: 1(1602)", "Delete SimpleName: c(1603)", "Delete InfixExpression: <<(1604)", "Delete Assignment: +=(1605)", "Delete ExpressionStatement(1606)", "Delete Block(1607)", "Delete IfStatement(1608)", "Delete SimpleName: c2(1609)", "Delete SimpleName: c(1610)", "Delete ArrayAccess(1611)", "Delete SimpleName: isPrimitive(1612)", "Delete MethodInvocation(1613)", "Delete SimpleName: primDiff(1614)", "Delete NumberLiteral: 1(1615)", "Delete SimpleName: c(1616)", "Delete InfixExpression: <<(1617)", "Delete Assignment: -=(1618)", "Delete ExpressionStatement(1619)", "Delete Block(1620)", "Delete IfStatement(1621)", "Delete Block(1622)", "Delete ForStatement(1623)", "Delete SimpleName: primDiff(1624)", "Delete NumberLiteral: 0(1625)", "Delete InfixExpression: >(1626)", "Delete SimpleName: MORE_SPECIFIC(1627)", "Delete ReturnStatement(1628)", "Delete Block(1629)", "Delete SimpleName: primDiff(1630)", "Delete NumberLiteral: 0(1631)", "Delete InfixExpression: <(1632)", "Delete SimpleName: LESS_SPECIFIC(1633)", "Delete ReturnStatement(1634)", "Delete Block(1635)", "Delete IfStatement(1636)", "Delete IfStatement(1637)", "Delete SimpleName: INCOMPARABLE(1638)", "Delete ReturnStatement(1639)", "Delete Block(1640)", "Delete MethodDeclaration(1641)", "Delete TextElement: Returns all methods that are applicable to actual argument types.(1642)", "Delete TagElement(1643)", "Delete SimpleName: methods(1644)", "Delete TextElement:  list of all candidate methods(1645)", "Delete TagElement: @param(1646)", "Delete SimpleName: classes(1647)", "Delete TextElement:  the actual types of the arguments(1648)", "Delete TagElement: @param(1649)", "Delete TextElement:  a list that contains only applicable methods (number of(1650)", "Delete TextElement: formal and actual arguments matches, and argument types are assignable(1651)", "Delete TextElement: to formal types through a method invocation conversion).(1652)", "Delete TagElement: @return(1653)", "Delete Javadoc(1654)", "Delete Modifier: private(1655)", "Delete SimpleName: LinkedList(1656)", "Delete SimpleType: LinkedList(1657)", "Delete SimpleName: T(1658)", "Delete SimpleType: T(1659)", "Delete ParameterizedType: LinkedList<T>(1660)", "Delete SimpleName: getApplicables(1661)", "Delete SimpleName: List(1662)", "Delete SimpleType: List(1663)", "Delete SimpleName: T(1664)", "Delete SimpleType: T(1665)", "Delete ParameterizedType: List<T>(1666)", "Delete SimpleName: methods(1667)", "Delete SingleVariableDeclaration(1668)", "Delete SimpleName: Class(1669)", "Delete SimpleType: Class(1670)", "Delete WildcardType: ?(1671)", "Delete ParameterizedType: Class<?>(1672)", "Delete Dimension(1673)", "Delete ArrayType: Class<?>[](1674)", "Delete SimpleName: classes(1675)", "Delete SingleVariableDeclaration(1676)", "Delete SimpleName: LinkedList(1677)", "Delete SimpleType: LinkedList(1678)", "Delete SimpleName: T(1679)", "Delete SimpleType: T(1680)", "Delete ParameterizedType: LinkedList<T>(1681)", "Delete SimpleName: list(1682)", "Delete SimpleName: LinkedList(1683)", "Delete SimpleType: LinkedList(1684)", "Delete SimpleName: T(1685)", "Delete SimpleType: T(1686)", "Delete ParameterizedType: LinkedList<T>(1687)", "Delete ClassInstanceCreation(1688)", "Delete VariableDeclarationFragment(1689)", "Delete VariableDeclarationStatement(1690)", "Delete SimpleName: Iterator(1691)", "Delete SimpleType: Iterator(1692)", "Delete SimpleName: T(1693)", "Delete SimpleType: T(1694)", "Delete ParameterizedType: Iterator<T>(1695)", "Delete SimpleName: imethod(1696)", "Delete SimpleName: methods(1697)", "Delete SimpleName: iterator(1698)", "Delete MethodInvocation(1699)", "Delete VariableDeclarationFragment(1700)", "Delete VariableDeclarationExpression(1701)", "Delete SimpleName: imethod(1702)", "Delete SimpleName: hasNext(1703)", "Delete MethodInvocation(1704)", "Delete SimpleName: T(1705)", "Delete SimpleType: T(1706)", "Delete SimpleName: method(1707)", "Delete SimpleName: imethod(1708)", "Delete SimpleName: next(1709)", "Delete MethodInvocation(1710)", "Delete VariableDeclarationFragment(1711)", "Delete VariableDeclarationStatement(1712)", "Delete SimpleName: isApplicable(1713)", "Delete SimpleName: method(1714)", "Delete SimpleName: classes(1715)", "Delete MethodInvocation(1716)", "Delete SimpleName: list(1717)", "Delete SimpleName: add(1718)", "Delete SimpleName: method(1719)", "Delete MethodInvocation(1720)", "Delete ExpressionStatement(1721)", "Delete Block(1722)", "Delete IfStatement(1723)", "Delete Block(1724)", "Delete ForStatement(1725)", "Delete SimpleName: list(1726)", "Delete ReturnStatement(1727)", "Delete Block(1728)", "Delete MethodDeclaration(1729)", "Delete TextElement: Returns true if the supplied method is applicable to actual(1730)", "Delete TextElement: argument types.(1731)", "Delete TagElement(1732)", "Delete SimpleName: method(1733)", "Delete TextElement:   method that will be called(1734)", "Delete TagElement: @param(1735)", "Delete SimpleName: classes(1736)", "Delete TextElement:  arguments to method(1737)", "Delete TagElement: @param(1738)", "Delete TextElement:  true if method is applicable to arguments(1739)", "Delete TagElement: @return(1740)", "Delete Javadoc(1741)", "Delete Modifier: private(1742)", "Delete PrimitiveType: boolean(1743)", "Delete SimpleName: isApplicable(1744)", "Delete SimpleName: T(1745)", "Delete SimpleType: T(1746)", "Delete SimpleName: method(1747)", "Delete SingleVariableDeclaration(1748)", "Delete SimpleName: Class(1749)", "Delete SimpleType: Class(1750)", "Delete WildcardType: ?(1751)", "Delete ParameterizedType: Class<?>(1752)", "Delete Dimension(1753)", "Delete ArrayType: Class<?>[](1754)", "Delete SimpleName: classes(1755)", "Delete SingleVariableDeclaration(1756)", "Delete SimpleName: Class(1757)", "Delete SimpleType: Class(1758)", "Delete WildcardType: ?(1759)", "Delete ParameterizedType: Class<?>(1760)", "Delete Dimension(1761)", "Delete ArrayType: Class<?>[](1762)", "Delete SimpleName: methodArgs(1763)", "Delete SimpleName: getParameterTypes(1764)", "Delete SimpleName: method(1765)", "Delete MethodInvocation(1766)", "Delete VariableDeclarationFragment(1767)", "Delete VariableDeclarationStatement(1768)", "Delete QualifiedName: methodArgs.length(1769)", "Delete QualifiedName: classes.length(1770)", "Delete InfixExpression: ==(1771)", "Delete QualifiedName: methodArgs.length(1772)", "Delete QualifiedName: classes.length(1773)", "Delete NumberLiteral: 1(1774)", "Delete InfixExpression: +(1775)", "Delete InfixExpression: ==(1776)", "Delete SimpleName: methodArgs(1777)", "Delete QualifiedName: methodArgs.length(1778)", "Delete NumberLiteral: 1(1779)", "Delete InfixExpression: -(1780)", "Delete ArrayAccess(1781)", "Delete SimpleName: isArray(1782)", "Delete MethodInvocation(1783)", "Delete InfixExpression: &&(1784)", "Delete InfixExpression: ||(1785)", "Delete PrimitiveType: int(1786)", "Delete SimpleName: i(1787)", "Delete NumberLiteral: 0(1788)", "Delete VariableDeclarationFragment(1789)", "Delete VariableDeclarationExpression(1790)", "Delete SimpleName: i(1791)", "Delete QualifiedName: classes.length(1792)", "Delete InfixExpression: <(1793)", "Delete SimpleName: i(1794)", "Delete PrefixExpression: ++(1795)", "Delete SimpleName: isConvertible(1796)", "Delete SimpleName: methodArgs(1797)", "Delete SimpleName: i(1798)", "Delete ArrayAccess(1799)", "Delete SimpleName: classes(1800)", "Delete SimpleName: i(1801)", "Delete ArrayAccess(1802)", "Delete BooleanLiteral: false(1803)", "Delete MethodInvocation(1804)", "Delete PrefixExpression: !(1805)", "Delete SimpleName: i(1806)", "Delete QualifiedName: classes.length(1807)", "Delete NumberLiteral: 1(1808)", "Delete InfixExpression: -(1809)", "Delete InfixExpression: ==(1810)", "Delete SimpleName: methodArgs(1811)", "Delete SimpleName: i(1812)", "Delete ArrayAccess(1813)", "Delete SimpleName: isArray(1814)", "Delete MethodInvocation(1815)", "Delete InfixExpression: &&(1816)", "Delete SimpleName: isConvertible(1817)", "Delete SimpleName: methodArgs(1818)", "Delete SimpleName: i(1819)", "Delete ArrayAccess(1820)", "Delete SimpleName: classes(1821)", "Delete SimpleName: i(1822)", "Delete ArrayAccess(1823)", "Delete BooleanLiteral: true(1824)", "Delete MethodInvocation(1825)", "Delete ReturnStatement(1826)", "Delete Block(1827)", "Delete IfStatement(1828)", "Delete BooleanLiteral: false(1829)", "Delete ReturnStatement(1830)", "Delete Block(1831)", "Delete IfStatement(1832)", "Delete Block(1833)", "Delete ForStatement(1834)", "Delete BooleanLiteral: true(1835)", "Delete ReturnStatement(1836)", "Delete Block(1837)", "Delete IfStatement(1838)", "Delete QualifiedName: methodArgs.length(1839)", "Delete NumberLiteral: 0(1840)", "Delete InfixExpression: >(1841)", "Delete SimpleName: Class(1842)", "Delete SimpleType: Class(1843)", "Delete WildcardType: ?(1844)", "Delete ParameterizedType: Class<?>(1845)", "Delete SimpleName: lastarg(1846)", "Delete SimpleName: methodArgs(1847)", "Delete QualifiedName: methodArgs.length(1848)", "Delete NumberLiteral: 1(1849)", "Delete InfixExpression: -(1850)", "Delete ArrayAccess(1851)", "Delete VariableDeclarationFragment(1852)", "Delete VariableDeclarationStatement(1853)", "Delete SimpleName: lastarg(1854)", "Delete SimpleName: isArray(1855)", "Delete MethodInvocation(1856)", "Delete PrefixExpression: !(1857)", "Delete BooleanLiteral: false(1858)", "Delete ReturnStatement(1859)", "Delete Block(1860)", "Delete IfStatement(1861)", "Delete PrimitiveType: int(1862)", "Delete SimpleName: i(1863)", "Delete NumberLiteral: 0(1864)", "Delete VariableDeclarationFragment(1865)", "Delete VariableDeclarationExpression(1866)", "Delete SimpleName: i(1867)", "Delete QualifiedName: methodArgs.length(1868)", "Delete NumberLiteral: 1(1869)", "Delete InfixExpression: -(1870)", "Delete InfixExpression: <(1871)", "Delete SimpleName: i(1872)", "Delete PrefixExpression: ++(1873)", "Delete SimpleName: isConvertible(1874)", "Delete SimpleName: methodArgs(1875)", "Delete SimpleName: i(1876)", "Delete ArrayAccess(1877)", "Delete SimpleName: classes(1878)", "Delete SimpleName: i(1879)", "Delete ArrayAccess(1880)", "Delete BooleanLiteral: false(1881)", "Delete MethodInvocation(1882)", "Delete PrefixExpression: !(1883)", "Delete BooleanLiteral: false(1884)", "Delete ReturnStatement(1885)", "Delete Block(1886)", "Delete IfStatement(1887)", "Delete Block(1888)", "Delete ForStatement(1889)", "Delete SimpleName: Class(1890)", "Delete SimpleType: Class(1891)", "Delete WildcardType: ?(1892)", "Delete ParameterizedType: Class<?>(1893)", "Delete SimpleName: vararg(1894)", "Delete SimpleName: lastarg(1895)", "Delete SimpleName: getComponentType(1896)", "Delete MethodInvocation(1897)", "Delete VariableDeclarationFragment(1898)", "Delete VariableDeclarationStatement(1899)", "Delete PrimitiveType: int(1900)", "Delete SimpleName: i(1901)", "Delete QualifiedName: methodArgs.length(1902)", "Delete NumberLiteral: 1(1903)", "Delete InfixExpression: -(1904)", "Delete VariableDeclarationFragment(1905)", "Delete VariableDeclarationExpression(1906)", "Delete SimpleName: i(1907)", "Delete QualifiedName: classes.length(1908)", "Delete InfixExpression: <(1909)", "Delete SimpleName: i(1910)", "Delete PrefixExpression: ++(1911)", "Delete SimpleName: isConvertible(1912)", "Delete SimpleName: vararg(1913)", "Delete SimpleName: classes(1914)", "Delete SimpleName: i(1915)", "Delete ArrayAccess(1916)", "Delete BooleanLiteral: false(1917)", "Delete MethodInvocation(1918)", "Delete PrefixExpression: !(1919)", "Delete BooleanLiteral: false(1920)", "Delete ReturnStatement(1921)", "Delete Block(1922)", "Delete IfStatement(1923)", "Delete Block(1924)", "Delete ForStatement(1925)", "Delete BooleanLiteral: true(1926)", "Delete ReturnStatement(1927)", "Delete Block(1928)", "Delete IfStatement(1929)", "Delete BooleanLiteral: false(1930)", "Delete ReturnStatement(1931)", "Delete Block(1932)", "Delete MethodDeclaration(1933)", "Delete SimpleName: isInvocationConvertible(1934)", "Delete SimpleName: Class(1935)", "Delete SimpleType: Class(1936)", "Delete MethodRefParameter(1937)", "Delete SimpleName: Class(1938)", "Delete SimpleType: Class(1939)", "Delete MethodRefParameter(1940)", "Delete PrimitiveType: boolean(1941)", "Delete MethodRefParameter(1942)", "Delete MethodRef(1943)", "Delete TagElement: @see(1944)", "Delete SimpleName: formal(1945)", "Delete TextElement:          the formal parameter type to which the actual(1946)", "Delete TextElement: parameter type should be convertible(1947)", "Delete TagElement: @param(1948)", "Delete SimpleName: actual(1949)", "Delete TextElement:          the actual parameter type.(1950)", "Delete TagElement: @param(1951)", "Delete SimpleName: possibleVarArg(1952)", "Delete TextElement:  whether or not we're dealing with the last parameter(1953)", "Delete TextElement: in the method declaration(1954)", "Delete TagElement: @param(1955)", "Delete TextElement:  see isMethodInvocationConvertible.(1956)", "Delete TagElement: @return(1957)", "Delete Javadoc(1958)", "Delete Modifier: private(1959)", "Delete PrimitiveType: boolean(1960)", "Delete SimpleName: isConvertible(1961)", "Delete SimpleName: Class(1962)", "Delete SimpleType: Class(1963)", "Delete WildcardType: ?(1964)", "Delete ParameterizedType: Class<?>(1965)", "Delete SimpleName: formal(1966)", "Delete SingleVariableDeclaration(1967)", "Delete SimpleName: Class(1968)", "Delete SimpleType: Class(1969)", "Delete WildcardType: ?(1970)", "Delete ParameterizedType: Class<?>(1971)", "Delete SimpleName: actual(1972)", "Delete SingleVariableDeclaration(1973)", "Delete PrimitiveType: boolean(1974)", "Delete SimpleName: possibleVarArg(1975)", "Delete SingleVariableDeclaration(1976)", "Delete SimpleName: isInvocationConvertible(1977)", "Delete SimpleName: formal(1978)", "Delete SimpleName: actual(1979)", "Delete SimpleName: equals(1980)", "Delete SimpleName: Void(1981)", "Delete SimpleType: Void(1982)", "Delete TypeLiteral(1983)", "Delete MethodInvocation(1984)", "Delete NullLiteral(1985)", "Delete SimpleName: actual(1986)", "Delete ConditionalExpression(1987)", "Delete SimpleName: possibleVarArg(1988)", "Delete MethodInvocation(1989)", "Delete ReturnStatement(1990)", "Delete Block(1991)", "Delete MethodDeclaration(1992)", "Delete SimpleName: isStrictInvocationConvertible(1993)", "Delete SimpleName: Class(1994)", "Delete SimpleType: Class(1995)", "Delete MethodRefParameter(1996)", "Delete SimpleName: Class(1997)", "Delete SimpleType: Class(1998)", "Delete MethodRefParameter(1999)", "Delete PrimitiveType: boolean(2000)", "Delete MethodRefParameter(2001)", "Delete MethodRef(2002)", "Delete TagElement: @see(2003)", "Delete SimpleName: formal(2004)", "Delete TextElement:          the formal parameter type to which the actual(2005)", "Delete TextElement: parameter type should be convertible(2006)", "Delete TagElement: @param(2007)", "Delete SimpleName: actual(2008)", "Delete TextElement:          the actual parameter type.(2009)", "Delete TagElement: @param(2010)", "Delete SimpleName: possibleVarArg(2011)", "Delete TextElement:  whether or not we're dealing with the last parameter(2012)", "Delete TextElement: in the method declaration(2013)", "Delete TagElement: @param(2014)", "Delete TextElement:  see isStrictMethodInvocationConvertible.(2015)", "Delete TagElement: @return(2016)", "Delete Javadoc(2017)", "Delete Modifier: private(2018)", "Delete PrimitiveType: boolean(2019)", "Delete SimpleName: isStrictConvertible(2020)", "Delete SimpleName: Class(2021)", "Delete SimpleType: Class(2022)", "Delete WildcardType: ?(2023)", "Delete ParameterizedType: Class<?>(2024)", "Delete SimpleName: formal(2025)", "Delete SingleVariableDeclaration(2026)", "Delete SimpleName: Class(2027)", "Delete SimpleType: Class(2028)", "Delete WildcardType: ?(2029)", "Delete ParameterizedType: Class<?>(2030)", "Delete SimpleName: actual(2031)", "Delete SingleVariableDeclaration(2032)", "Delete PrimitiveType: boolean(2033)", "Delete SimpleName: possibleVarArg(2034)", "Delete SingleVariableDeclaration(2035)", "Delete SimpleName: isStrictInvocationConvertible(2036)", "Delete SimpleName: formal(2037)", "Delete SimpleName: actual(2038)", "Delete SimpleName: equals(2039)", "Delete SimpleName: Void(2040)", "Delete SimpleType: Void(2041)", "Delete TypeLiteral(2042)", "Delete MethodInvocation(2043)", "Delete NullLiteral(2044)", "Delete SimpleName: actual(2045)", "Delete ConditionalExpression(2046)", "Delete SimpleName: possibleVarArg(2047)", "Delete MethodInvocation(2048)", "Delete ReturnStatement(2049)", "Delete Block(2050)", "Delete MethodDeclaration(2051)", "Delete TypeDeclaration: class(2052)", "Delete TextElement: The parameter matching service for methods.(2053)", "Delete TagElement(2054)", "Delete Javadoc(2055)", "Delete Modifier: private(2056)", "Delete Modifier: static(2057)", "Delete Modifier: final(2058)", "Delete SimpleName: Parameters(2059)", "Delete SimpleType: Parameters(2060)", "Delete SimpleName: Method(2061)", "Delete SimpleType: Method(2062)", "Delete ParameterizedType: Parameters<Method>(2063)", "Delete SimpleName: METHODS(2064)", "Delete SimpleName: Parameters(2065)", "Delete SimpleType: Parameters(2066)", "Delete SimpleName: Method(2067)", "Delete SimpleType: Method(2068)", "Delete ParameterizedType: Parameters<Method>(2069)", "Delete SimpleName: Override(2070)", "Delete MarkerAnnotation(2071)", "Delete Modifier: protected(2072)", "Delete SimpleName: Class(2073)", "Delete SimpleType: Class(2074)", "Delete WildcardType: ?(2075)", "Delete ParameterizedType: Class<?>(2076)", "Delete Dimension(2077)", "Delete ArrayType: Class<?>[](2078)", "Delete SimpleName: getParameterTypes(2079)", "Delete SimpleName: Method(2080)", "Delete SimpleType: Method(2081)", "Delete SimpleName: app(2082)", "Delete SingleVariableDeclaration(2083)", "Delete SimpleName: app(2084)", "Delete SimpleName: getParameterTypes(2085)", "Delete MethodInvocation(2086)", "Delete ReturnStatement(2087)", "Delete Block(2088)", "Delete MethodDeclaration(2089)", "Delete AnonymousClassDeclaration(2090)", "Delete ClassInstanceCreation(2091)", "Delete VariableDeclarationFragment(2092)", "Delete FieldDeclaration(2093)", "Delete TextElement: The parameter matching service for constructors.(2094)", "Delete TagElement(2095)", "Delete Javadoc(2096)", "Delete Modifier: private(2097)", "Delete Modifier: static(2098)", "Delete Modifier: final(2099)", "Delete SimpleName: Parameters(2100)", "Delete SimpleType: Parameters(2101)", "Delete SimpleName: Constructor(2102)", "Delete SimpleType: Constructor(2103)", "Delete WildcardType: ?(2104)", "Delete ParameterizedType: Constructor<?>(2105)", "Delete ParameterizedType: Parameters<Constructor<?>>(2106)", "Delete SimpleName: CONSTRUCTORS(2107)", "Delete SimpleName: Parameters(2108)", "Delete SimpleType: Parameters(2109)", "Delete SimpleName: Constructor(2110)", "Delete SimpleType: Constructor(2111)", "Delete WildcardType: ?(2112)", "Delete ParameterizedType: Constructor<?>(2113)", "Delete ParameterizedType: Parameters<Constructor<?>>(2114)", "Delete SimpleName: Override(2115)", "Delete MarkerAnnotation(2116)", "Delete Modifier: protected(2117)", "Delete SimpleName: Class(2118)", "Delete SimpleType: Class(2119)", "Delete WildcardType: ?(2120)", "Delete ParameterizedType: Class<?>(2121)", "Delete Dimension(2122)", "Delete ArrayType: Class<?>[](2123)", "Delete SimpleName: getParameterTypes(2124)", "Delete SimpleName: Constructor(2125)", "Delete SimpleType: Constructor(2126)", "Delete WildcardType: ?(2127)", "Delete ParameterizedType: Constructor<?>(2128)", "Delete SimpleName: app(2129)", "Delete SingleVariableDeclaration(2130)", "Delete SimpleName: app(2131)", "Delete SimpleName: getParameterTypes(2132)", "Delete MethodInvocation(2133)", "Delete ReturnStatement(2134)", "Delete Block(2135)", "Delete MethodDeclaration(2136)", "Delete AnonymousClassDeclaration(2137)", "Delete ClassInstanceCreation(2138)", "Delete VariableDeclarationFragment(2139)", "Delete FieldDeclaration(2140)", "Delete TypeDeclaration: class(2141)"]}}, {"MethodMap_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.apache.commons.jexl2.internal.introspection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: MethodKey.AmbiguousException", "DEL VariableDeclarationStatement", "DEL TagElement: @throws", "DEL SimpleName: get", "DEL Modifier: synchronized", "DEL SimpleName: method", "DEL SimpleName: methodByNameMap", "DEL ParameterizedType: java.util.Set<String>", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL NullLiteral", "DEL TagElement", "DEL VariableDeclarationFragment", "DEL SimpleName: method", "DEL TextElement: Keep track of all methods with the same name.", "DEL TagElement", "DEL SimpleType: HashMap", "DEL SimpleType: Method", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL Javadoc", "DEL ExpressionStatement", "DEL TagElement", "DEL Javadoc", "DEL SimpleName: method", "DEL TextElement: <p>", "DEL SingleVariableDeclaration", "DEL ParameterizedType: List<Method>", "DEL Javadoc", "DEL TextElement:  name of method", "DEL TextElement: most specific applicable method using the", "DEL TagElement", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL Modifier: public", "DEL TextElement: their object counterparts, so for an argument of", "DEL Modifier: final", "DEL MethodDeclaration", "DEL TextElement: algorithm described in the JLS section", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL ParameterizedType: HashMap<String,List<Method>>", "DEL SimpleName: methodName", "DEL Dimension", "DEL SimpleName: String", "DEL ArrayCreation", "DEL TagElement: @since", "DEL VariableDeclarationFragment", "DEL TextElement: like this is needed.", "DEL ReturnStatement", "DEL SimpleName: methodList", "DEL SimpleName: Method", "DEL VariableDeclarationFragment", "DEL SimpleName: size", "DEL TextElement: method is applicable.", "DEL SimpleName: String", "DEL SimpleName: String", "DEL TextElement:  the most specific applicable method, or null if no", "DEL MethodDeclaration", "DEL TagElement: @return", "DEL SimpleName: ArrayList", "DEL SimpleName: MethodMap", "DEL SimpleType: Method", "DEL InfixExpression: ==", "DEL TextElement: </p>", "DEL SimpleType: ArrayList", "DEL TextElement: where this is needed - however, functionality", "DEL Dimension", "DEL ClassInstanceCreation", "DEL SimpleName: methodList", "DEL SimpleName: methodByNameMap", "DEL SimpleType: String", "DEL SimpleName: String", "DEL SimpleName: method", "DEL SimpleType: Method", "DEL SimpleType: String", "DEL TextElement: </p>", "DEL SimpleName: String", "DEL SimpleName: args", "DEL SimpleName: find", "DEL Javadoc", "DEL SimpleType: String", "DEL SimpleName: set", "DEL QualifiedName: java.util.Set", "DEL SimpleType: Method", "DEL SimpleName: List", "DEL MethodInvocation", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL Block", "DEL SimpleName: Method", "DEL TextElement: Return a list of methods with the same name.", "DEL IfStatement", "DEL SimpleName: l", "DEL Javadoc", "DEL SimpleType: Method", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: get", "DEL MethodInvocation", "DEL TextElement: Add a method to a list of methods by name. For a particular class we are", "DEL TagElement: @throws", "DEL SimpleName: methodName", "DEL TextElement:  the key", "DEL SimpleType: MethodKey", "DEL SimpleName: List", "DEL Assignment: =", "DEL TextElement:  the method.", "DEL ClassInstanceCreation", "DEL TextElement:        the actual arguments with which the method is called", "DEL SimpleName: String", "DEL SimpleName: Method", "DEL TagElement: @param", "DEL SimpleName: put", "DEL SimpleName: keySet", "DEL ParameterizedType: List<Method>", "DEL SimpleName: get", "DEL SimpleName: methodByNameMap", "DEL SimpleName: methodKey", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL SimpleName: key", "DEL SimpleName: set", "DEL TextElement:  the method", "DEL SimpleType: MethodKey", "DEL Modifier: private", "DEL SimpleType: Method", "DEL SimpleName: get", "DEL TextElement: <p>", "DEL SimpleType: Method", "DEL TextElement: 15.12.2 (with the exception that it can't", "DEL TextElement:  1.0", "DEL TextElement: specific applicable method", "DEL MethodInvocation", "DEL TextElement: A map of method names to methods.", "DEL SimpleName: methodByNameMap", "DEL TextElement: keeping track of all the methods with the same name.", "DEL SimpleName: methodName", "DEL ExpressionStatement", "DEL SimpleName: find", "DEL ParameterizedType: Map<String,List<Method>>", "DEL SimpleName: key", "DEL SimpleName: Method", "DEL SimpleName: Method", "DEL TagElement: @return", "DEL SimpleName: args", "DEL TextElement: Finds a method by key.", "DEL SimpleName: find", "DEL ArrayType: String[]", "DEL Modifier: synchronized", "DEL SimpleType: MethodKey.AmbiguousException", "DEL TextElement: distinguish a primitive type argument from", "DEL Modifier: public", "DEL SimpleName: names", "DEL SingleVariableDeclaration", "DEL ParameterizedType: ArrayList<Method>", "DEL SimpleName: methodByNameMap", "DEL TagElement: @param", "DEL SimpleName: List", "DEL SimpleName: args", "DEL SimpleType: String", "DEL TextElement: type (say) java.lang.Integer, it will not be able", "DEL NullLiteral", "DEL Block", "DEL SimpleName: methodKey", "DEL SimpleName: Method", "DEL SimpleType: java.util.Set", "DEL SimpleName: List", "DEL ArrayType: String[]", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleType: List", "DEL TagElement: @return", "DEL SimpleName: String", "DEL TextElement: Find a method.  Attempts to find the", "DEL Block", "DEL SimpleName: HashMap", "DEL SimpleName: add", "DEL SimpleName: MethodKey", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL SimpleName: Map", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL Dimension", "DEL SimpleName: Method", "DEL FieldDeclaration", "DEL ReturnStatement", "DEL TextElement:  if find is ambiguous", "DEL Modifier: synchronized", "DEL TagElement: @param", "DEL SimpleName: getMostSpecificMethod", "DEL SimpleName: Method", "DEL SimpleName: methodName", "DEL SimpleType: String", "DEL MethodInvocation", "DEL Modifier: public", "DEL ReturnStatement", "DEL TextElement: an object type argument, since in reflection", "DEL SimpleType: Method", "DEL TextElement:  if there is more than one maximally", "DEL Javadoc", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: String", "DEL Modifier: public", "DEL TagElement: @return", "DEL TextElement: This turns out to be a relatively rare case", "DEL SimpleName: Method", "DEL SimpleName: l", "DEL SimpleType: Object", "DEL NullLiteral", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: l", "DEL TextElement: method that takes java.lang.Integer as a parameter.", "DEL TextElement:  the name.", "DEL SimpleType: String", "DEL SimpleType: Map", "DEL TagElement: @param", "DEL MethodInvocation", "DEL ParameterizedType: List<Method>", "DEL SimpleName: add", "DEL SimpleName: key", "DEL SimpleType: String", "DEL SimpleName: getName", "DEL PrimitiveType: void", "DEL SimpleName: methodName", "DEL TagElement", "DEL SimpleType: List", "DEL SimpleType: List", "DEL ParameterizedType: List<Method>", "DEL SimpleName: Object", "DEL Block", "DEL ArrayType: Object[]", "DEL SimpleName: l", "DEL SimpleName: l", "DEL MethodInvocation", "DEL SimpleName: toArray", "DEL SimpleName: getMethod", "DEL SimpleName: methodName", "DEL QualifiedName: MethodKey.AmbiguousException", "DEL ExpressionStatement", "DEL TextElement:  the array of names", "DEL Block", "DEL SingleVariableDeclaration", "DEL TextElement: Returns the array of method names accessible in this class.", "DEL SimpleName: methodKey", "DEL TextElement: primitive type arguments are represented by", "DEL ParameterizedType: List<Method>", "DEL SimpleName: methodKey", "DEL TagElement", "DEL Block", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: List", "DEL SimpleName: set", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL TextElement: to decide between a method that takes int and a", "DEL SimpleName: MethodKey", "DEL SimpleName: methodList", "DEL Modifier: final", "DEL SimpleType: Method", "DEL SimpleType: List", "DEL Javadoc", "DEL TextElement:  List list of methods."]}]}}, {"MethodMap_diff": {"operations": ["Delete QualifiedName: org.apache.commons.jexl2.internal.introspection(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Method(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.ArrayList(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.HashMap(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.List(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Map(10)", "Delete ImportDeclaration(11)", "Delete TextElement: A map of method names to methods.(12)", "Delete TagElement(13)", "Delete TextElement:  1.0(14)", "Delete TagElement: @since(15)", "Delete Javadoc(16)", "Delete Modifier: final(17)", "Delete SimpleName: MethodMap(18)", "Delete TextElement: Keep track of all methods with the same name.(19)", "Delete TagElement(20)", "Delete Javadoc(21)", "Delete Modifier: private(22)", "Delete Modifier: final(23)", "Delete SimpleName: Map(24)", "Delete SimpleType: Map(25)", "Delete SimpleName: String(26)", "Delete SimpleType: String(27)", "Delete SimpleName: List(28)", "Delete SimpleType: List(29)", "Delete SimpleName: Method(30)", "Delete SimpleType: Method(31)", "Delete ParameterizedType: List<Method>(32)", "Delete ParameterizedType: Map<String,List<Method>>(33)", "Delete SimpleName: methodByNameMap(34)", "Delete SimpleName: HashMap(35)", "Delete SimpleType: HashMap(36)", "Delete SimpleName: String(37)", "Delete SimpleType: String(38)", "Delete SimpleName: List(39)", "Delete SimpleType: List(40)", "Delete SimpleName: Method(41)", "Delete SimpleType: Method(42)", "Delete ParameterizedType: List<Method>(43)", "Delete ParameterizedType: HashMap<String,List<Method>>(44)", "Delete ClassInstanceCreation(45)", "Delete VariableDeclarationFragment(46)", "Delete FieldDeclaration(47)", "Delete TextElement: Add a method to a list of methods by name. For a particular class we are(48)", "Delete TextElement: keeping track of all the methods with the same name.(49)", "Delete TagElement(50)", "Delete SimpleName: method(51)", "Delete TextElement:  the method.(52)", "Delete TagElement: @param(53)", "Delete Javadoc(54)", "Delete Modifier: public(55)", "Delete Modifier: synchronized(56)", "Delete PrimitiveType: void(57)", "Delete SimpleName: add(58)", "Delete SimpleName: Method(59)", "Delete SimpleType: Method(60)", "Delete SimpleName: method(61)", "Delete SingleVariableDeclaration(62)", "Delete SimpleName: String(63)", "Delete SimpleType: String(64)", "Delete SimpleName: methodName(65)", "Delete SimpleName: method(66)", "Delete SimpleName: getName(67)", "Delete MethodInvocation(68)", "Delete VariableDeclarationFragment(69)", "Delete VariableDeclarationStatement(70)", "Delete SimpleName: List(71)", "Delete SimpleType: List(72)", "Delete SimpleName: Method(73)", "Delete SimpleType: Method(74)", "Delete ParameterizedType: List<Method>(75)", "Delete SimpleName: l(76)", "Delete SimpleName: methodByNameMap(77)", "Delete SimpleName: get(78)", "Delete SimpleName: methodName(79)", "Delete MethodInvocation(80)", "Delete VariableDeclarationFragment(81)", "Delete VariableDeclarationStatement(82)", "Delete SimpleName: l(83)", "Delete NullLiteral(84)", "Delete InfixExpression: ==(85)", "Delete SimpleName: l(86)", "Delete SimpleName: ArrayList(87)", "Delete SimpleType: ArrayList(88)", "Delete SimpleName: Method(89)", "Delete SimpleType: Method(90)", "Delete ParameterizedType: ArrayList<Method>(91)", "Delete ClassInstanceCreation(92)", "Delete Assignment: =(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: methodByNameMap(95)", "Delete SimpleName: put(96)", "Delete SimpleName: methodName(97)", "Delete SimpleName: l(98)", "Delete MethodInvocation(99)", "Delete ExpressionStatement(100)", "Delete Block(101)", "Delete IfStatement(102)", "Delete SimpleName: l(103)", "Delete SimpleName: add(104)", "Delete SimpleName: method(105)", "Delete MethodInvocation(106)", "Delete ExpressionStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete TextElement: Return a list of methods with the same name.(110)", "Delete TagElement(111)", "Delete SimpleName: key(112)", "Delete TextElement:  the name.(113)", "Delete TagElement: @param(114)", "Delete TextElement:  List list of methods.(115)", "Delete TagElement: @return(116)", "Delete Javadoc(117)", "Delete Modifier: public(118)", "Delete Modifier: synchronized(119)", "Delete SimpleName: List(120)", "Delete SimpleType: List(121)", "Delete SimpleName: Method(122)", "Delete SimpleType: Method(123)", "Delete ParameterizedType: List<Method>(124)", "Delete SimpleName: get(125)", "Delete SimpleName: String(126)", "Delete SimpleType: String(127)", "Delete SimpleName: key(128)", "Delete SingleVariableDeclaration(129)", "Delete SimpleName: methodByNameMap(130)", "Delete SimpleName: get(131)", "Delete SimpleName: key(132)", "Delete MethodInvocation(133)", "Delete ReturnStatement(134)", "Delete Block(135)", "Delete MethodDeclaration(136)", "Delete TextElement: Returns the array of method names accessible in this class.(137)", "Delete TagElement(138)", "Delete TextElement:  the array of names(139)", "Delete TagElement: @return(140)", "Delete Javadoc(141)", "Delete Modifier: public(142)", "Delete Modifier: synchronized(143)", "Delete SimpleName: String(144)", "Delete SimpleType: String(145)", "Delete Dimension(146)", "Delete ArrayType: String[](147)", "Delete SimpleName: names(148)", "Delete QualifiedName: java.util.Set(149)", "Delete SimpleType: java.util.Set(150)", "Delete SimpleName: String(151)", "Delete SimpleType: String(152)", "Delete ParameterizedType: java.util.Set<String>(153)", "Delete SimpleName: set(154)", "Delete SimpleName: methodByNameMap(155)", "Delete SimpleName: keySet(156)", "Delete MethodInvocation(157)", "Delete VariableDeclarationFragment(158)", "Delete VariableDeclarationStatement(159)", "Delete SimpleName: set(160)", "Delete SimpleName: toArray(161)", "Delete SimpleName: String(162)", "Delete SimpleType: String(163)", "Delete Dimension(164)", "Delete ArrayType: String[](165)", "Delete SimpleName: set(166)", "Delete SimpleName: size(167)", "Delete MethodInvocation(168)", "Delete ArrayCreation(169)", "Delete MethodInvocation(170)", "Delete ReturnStatement(171)", "Delete Block(172)", "Delete MethodDeclaration(173)", "Delete TextElement: <p>(174)", "Delete TextElement: Find a method.  Attempts to find the(175)", "Delete TextElement: most specific applicable method using the(176)", "Delete TextElement: algorithm described in the JLS section(177)", "Delete TextElement: 15.12.2 (with the exception that it can't(178)", "Delete TextElement: distinguish a primitive type argument from(179)", "Delete TextElement: an object type argument, since in reflection(180)", "Delete TextElement: primitive type arguments are represented by(181)", "Delete TextElement: their object counterparts, so for an argument of(182)", "Delete TextElement: type (say) java.lang.Integer, it will not be able(183)", "Delete TextElement: to decide between a method that takes int and a(184)", "Delete TextElement: method that takes java.lang.Integer as a parameter.(185)", "Delete TextElement: </p>(186)", "Delete TextElement: <p>(187)", "Delete TextElement: This turns out to be a relatively rare case(188)", "Delete TextElement: where this is needed - however, functionality(189)", "Delete TextElement: like this is needed.(190)", "Delete TextElement: </p>(191)", "Delete TagElement(192)", "Delete SimpleName: methodName(193)", "Delete TextElement:  name of method(194)", "Delete TagElement: @param(195)", "Delete SimpleName: args(196)", "Delete TextElement:        the actual arguments with which the method is called(197)", "Delete TagElement: @param(198)", "Delete TextElement:  the most specific applicable method, or null if no(199)", "Delete TextElement: method is applicable.(200)", "Delete TagElement: @return(201)", "Delete QualifiedName: MethodKey.AmbiguousException(202)", "Delete TextElement:  if there is more than one maximally(203)", "Delete TextElement: specific applicable method(204)", "Delete TagElement: @throws(205)", "Delete Javadoc(206)", "Delete Modifier: public(207)", "Delete SimpleName: Method(208)", "Delete SimpleType: Method(209)", "Delete SimpleName: find(210)", "Delete SimpleName: String(211)", "Delete SimpleType: String(212)", "Delete SimpleName: methodName(213)", "Delete SingleVariableDeclaration(214)", "Delete SimpleName: Object(215)", "Delete SimpleType: Object(216)", "Delete Dimension(217)", "Delete ArrayType: Object[](218)", "Delete SimpleName: args(219)", "Delete SingleVariableDeclaration(220)", "Delete QualifiedName: MethodKey.AmbiguousException(221)", "Delete SimpleType: MethodKey.AmbiguousException(222)", "Delete SimpleName: find(223)", "Delete SimpleName: MethodKey(224)", "Delete SimpleType: MethodKey(225)", "Delete SimpleName: methodName(226)", "Delete SimpleName: args(227)", "Delete ClassInstanceCreation(228)", "Delete MethodInvocation(229)", "Delete ReturnStatement(230)", "Delete Block(231)", "Delete MethodDeclaration(232)", "Delete TextElement: Finds a method by key.(233)", "Delete TagElement(234)", "Delete SimpleName: methodKey(235)", "Delete TextElement:  the key(236)", "Delete TagElement: @param(237)", "Delete TextElement:  the method(238)", "Delete TagElement: @return(239)", "Delete QualifiedName: MethodKey.AmbiguousException(240)", "Delete TextElement:  if find is ambiguous(241)", "Delete TagElement: @throws(242)", "Delete Javadoc(243)", "Delete SimpleName: Method(244)", "Delete SimpleType: Method(245)", "Delete SimpleName: find(246)", "Delete SimpleName: MethodKey(247)", "Delete SimpleType: MethodKey(248)", "Delete SimpleName: methodKey(249)", "Delete SingleVariableDeclaration(250)", "Delete QualifiedName: MethodKey.AmbiguousException(251)", "Delete SimpleType: MethodKey.AmbiguousException(252)", "Delete SimpleName: List(253)", "Delete SimpleType: List(254)", "Delete SimpleName: Method(255)", "Delete SimpleType: Method(256)", "Delete ParameterizedType: List<Method>(257)", "Delete SimpleName: methodList(258)", "Delete SimpleName: get(259)", "Delete SimpleName: methodKey(260)", "Delete SimpleName: getMethod(261)", "Delete MethodInvocation(262)", "Delete MethodInvocation(263)", "Delete VariableDeclarationFragment(264)", "Delete VariableDeclarationStatement(265)", "Delete SimpleName: methodList(266)", "Delete NullLiteral(267)", "Delete InfixExpression: ==(268)", "Delete NullLiteral(269)", "Delete ReturnStatement(270)", "Delete Block(271)", "Delete IfStatement(272)", "Delete SimpleName: methodKey(273)", "Delete SimpleName: getMostSpecificMethod(274)", "Delete SimpleName: methodList(275)", "Delete MethodInvocation(276)", "Delete ReturnStatement(277)", "Delete Block(278)", "Delete MethodDeclaration(279)", "Delete TypeDeclaration: class(280)"]}}], "commit_stats": [{"total_files": 117, "deleted_files": 117, "testing": "True", "maintenance": "True", "build": "True"}]}