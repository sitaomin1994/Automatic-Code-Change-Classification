{"application": "apache-calcite", "csha": "f7ec3e847eb3ba82c182a63327fd1da490df648b", "files": [{"RexCallBinding_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleName: RexCall to SimpleType: RexCall at 0", "INS SimpleName: call to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SwitchCase to SwitchStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ClassInstanceCreation at 3", "INS MethodInvocation to ClassInstanceCreation at 4", "INS SimpleType: RelDataTypeFactory to SingleVariableDeclaration at 0", "INS SimpleName: RexCastCallBinding to SimpleType: RexCastCallBinding at 0", "INS SimpleName: getOperator to MethodInvocation at 1", "INS SimpleType: RexCall to SingleVariableDeclaration at 0", "INS MethodInvocation to SwitchStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: getOperator to MethodInvocation at 1", "INS SimpleName: getOperands to MethodInvocation at 1", "INS SwitchStatement to Block at 0", "INS SimpleName: typeFactory to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: call to MethodInvocation at 0", "INS SimpleName: typeFactory to ClassInstanceCreation at 1", "INS ReturnStatement to SwitchStatement at 2", "INS SimpleName: call to MethodInvocation at 0", "INS SimpleName: RexCallBinding to SimpleType: RexCallBinding at 0", "INS SimpleName: create to MethodDeclaration at 4", "INS Block to MethodDeclaration at 7", "INS SimpleName: getOperands to MethodInvocation at 1", "INS SimpleType: RexCallBinding to ClassInstanceCreation at 0", "INS SimpleName: call to MethodInvocation at 0", "INS SimpleName: call to SingleVariableDeclaration at 1", "INS SimpleName: RelDataTypeFactory to SimpleType: RelDataTypeFactory at 0", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement to Javadoc at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS MethodInvocation to ClassInstanceCreation at 3", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: call to MethodInvocation at 0", "INS TextElement: Creates a binding of the appropriate type.  to TagElement at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: RexCallBinding to SimpleType: RexCallBinding at 0", "INS SimpleType: RexCallBinding to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleType: RexCastCallBinding to ClassInstanceCreation at 0", "INS SimpleName: typeFactory to SingleVariableDeclaration at 1", "INS SimpleName: call to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: CAST to SwitchCase at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Comparable to SimpleType: Comparable at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: RexLiteral to MethodInvocation at 0", "INS SimpleName: getOperandLiteralValue to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: Comparable to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS SimpleName: ordinal to MethodInvocation at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: operands to MethodInvocation at 0", "INS SimpleName: value to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ThrowStatement to Block at 0", "INS SimpleName: AssertionError to SimpleType: AssertionError at 0", "INS SimpleType: SqlMonotonicity to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: SqlMonotonicity to SimpleType: SqlMonotonicity at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: getOperandMonotonicity to MethodDeclaration at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: AssertionError to ClassInstanceCreation at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 15", "operations": ["INS Javadoc to TypeDeclaration: class at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 15", "INS SimpleType: RexNode to WildcardType: ? extends RexNode at 0", "INS SuperMethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: type to ReturnStatement at 0", "INS SimpleName: type to VariableDeclarationFragment at 0", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS SimpleName: RelDataTypeFactory to SimpleType: RelDataTypeFactory at 0", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 5", "INS SimpleType: List to ParameterizedType: List<? extends RexNode> at 0", "INS SimpleName: getOperandType to MethodDeclaration at 3", "INS SimpleName: typeFactory to SingleVariableDeclaration at 1", "INS SimpleName: RelDataType to SimpleType: RelDataType at 0", "INS WildcardType: ? extends RexNode to ParameterizedType: List<? extends RexNode> at 1", "INS Modifier: private to TypeDeclaration: class at 1", "INS TextElement: has two arguments, the second of which is the target type.  to TagElement at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: RexCastCallBinding to TypeDeclaration: class at 3", "INS SimpleType: RelDataType to FieldDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: RelDataType to SimpleType: RelDataType at 0", "INS SimpleType: SqlOperator to SingleVariableDeclaration at 0", "INS SimpleName: RexCastCallBinding to MethodDeclaration at 1", "INS SuperConstructorInvocation to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: operands to SuperConstructorInvocation at 2", "INS SimpleType: RelDataType to MethodDeclaration at 2", "INS SimpleName: RelDataType to SimpleType: RelDataType at 0", "INS SimpleName: typeFactory to SuperConstructorInvocation at 0", "INS SimpleName: sqlOperator to SingleVariableDeclaration at 1", "INS TagElement to Javadoc at 0", "INS TextElement: , CAST needs to pretend that it to TagElement at 2", "INS TagElement: @code to TagElement at 1", "INS SimpleName: type to Assignment: = at 1", "INS TextElement: To be compatible with  to TagElement at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Block to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS InfixExpression: == to IfStatement at 0", "INS ParameterizedType: List<? extends RexNode> to SingleVariableDeclaration at 0", "INS SimpleName: RexNode to SimpleType: RexNode at 0", "INS Modifier: static to TypeDeclaration: class at 2", "INS SimpleName: type to FieldAccess at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: getOperandType to SuperMethodInvocation at 0", "INS SimpleName: ordinal to InfixExpression: == at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: sqlOperator to SuperConstructorInvocation at 1", "INS SimpleName: operands to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: type to SingleVariableDeclaration at 1", "INS SimpleType: RelDataType to SingleVariableDeclaration at 0", "INS SimpleName: RexCallBinding to SimpleType: RexCallBinding at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: RexCallBinding to TypeDeclaration: class at 4", "INS TextElement:  SqlCall to TagElement: @code at 0", "INS SimpleType: RelDataTypeFactory to SingleVariableDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: SqlOperator to SimpleType: SqlOperator at 0", "INS Modifier: public to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ordinal to SuperMethodInvocation at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}]}}, {"RexCallBinding_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(345) at 9", "Insert QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity(18) into ImportDeclaration(19) at 0", "Insert MethodDeclaration(130) into TypeDeclaration: class(344) at 6", "Insert MethodDeclaration(186) into TypeDeclaration: class(344) at 9", "Insert MethodDeclaration(201) into TypeDeclaration: class(344) at 10", "Insert TypeDeclaration: class(343) into TypeDeclaration: class(344) at 15", "Insert Javadoc(84) into MethodDeclaration(130) at 0", "Insert Modifier: public(85) into MethodDeclaration(130) at 1", "Insert Modifier: static(86) into MethodDeclaration(130) at 2", "Insert SimpleType: RexCallBinding(88) into MethodDeclaration(130) at 3", "Insert SimpleName: create(89) into MethodDeclaration(130) at 4", "Insert SingleVariableDeclaration(93) into MethodDeclaration(130) at 5", "Insert SingleVariableDeclaration(97) into MethodDeclaration(130) at 6", "Insert Block(129) into MethodDeclaration(130) at 7", "Insert MarkerAnnotation(132) into MethodDeclaration(149) at 0", "Insert MarkerAnnotation(151) into MethodDeclaration(167) at 0", "Insert MarkerAnnotation(169) into MethodDeclaration(186) at 0", "Insert Modifier: public(170) into MethodDeclaration(186) at 1", "Insert SimpleType: Comparable(172) into MethodDeclaration(186) at 2", "Insert SimpleName: getOperandLiteralValue(173) into MethodDeclaration(186) at 3", "Insert SingleVariableDeclaration(176) into MethodDeclaration(186) at 4", "Insert Block(185) into MethodDeclaration(186) at 5", "Insert MarkerAnnotation(188) into MethodDeclaration(201) at 0", "Insert Modifier: public(189) into MethodDeclaration(201) at 1", "Insert SimpleType: SqlMonotonicity(191) into MethodDeclaration(201) at 2", "Insert SimpleName: getOperandMonotonicity(192) into MethodDeclaration(201) at 3", "Insert SingleVariableDeclaration(195) into MethodDeclaration(201) at 4", "Insert Block(200) into MethodDeclaration(201) at 5", "Insert MarkerAnnotation(203) into MethodDeclaration(223) at 0", "Insert Javadoc(274) into TypeDeclaration: class(343) at 0", "Insert Modifier: private(275) into TypeDeclaration: class(343) at 1", "Insert Modifier: static(276) into TypeDeclaration: class(343) at 2", "Insert SimpleName: RexCastCallBinding(277) into TypeDeclaration: class(343) at 3", "Insert SimpleType: RexCallBinding(279) into TypeDeclaration: class(343) at 4", "Insert FieldDeclaration(286) into TypeDeclaration: class(343) at 5", "Insert MethodDeclaration(320) into TypeDeclaration: class(343) at 6", "Insert MethodDeclaration(342) into TypeDeclaration: class(343) at 7", "Insert TagElement(83) into Javadoc(84) at 0", "Insert SimpleName: RexCallBinding(87) into SimpleType: RexCallBinding(88) at 0", "Insert SimpleType: RelDataTypeFactory(91) into SingleVariableDeclaration(93) at 0", "Insert SimpleName: typeFactory(92) into SingleVariableDeclaration(93) at 1", "Insert SimpleType: RexCall(95) into SingleVariableDeclaration(97) at 0", "Insert SimpleName: call(96) into SingleVariableDeclaration(97) at 1", "Insert SwitchStatement(117) into Block(129) at 0", "Insert ReturnStatement(128) into Block(129) at 1", "Insert SimpleName: Override(131) into MarkerAnnotation(132) at 0", "Insert SimpleName: Override(150) into MarkerAnnotation(151) at 0", "Insert SimpleName: Override(168) into MarkerAnnotation(169) at 0", "Insert SimpleName: Comparable(171) into SimpleType: Comparable(172) at 0", "Insert PrimitiveType: int(174) into SingleVariableDeclaration(176) at 0", "Insert SimpleName: ordinal(175) into SingleVariableDeclaration(176) at 1", "Insert ReturnStatement(184) into Block(185) at 0", "Insert SimpleName: Override(187) into MarkerAnnotation(188) at 0", "Insert SimpleName: SqlMonotonicity(190) into SimpleType: SqlMonotonicity(191) at 0", "Insert PrimitiveType: int(193) into SingleVariableDeclaration(195) at 0", "Insert SimpleName: ordinal(194) into SingleVariableDeclaration(195) at 1", "Insert ThrowStatement(199) into Block(200) at 0", "Insert SimpleName: Override(202) into MarkerAnnotation(203) at 0", "Insert TagElement(273) into Javadoc(274) at 0", "Insert SimpleName: RexCallBinding(278) into SimpleType: RexCallBinding(279) at 0", "Insert Modifier: private(280) into FieldDeclaration(286) at 0", "Insert Modifier: final(281) into FieldDeclaration(286) at 1", "Insert SimpleType: RelDataType(283) into FieldDeclaration(286) at 2", "Insert VariableDeclarationFragment(285) into FieldDeclaration(286) at 3", "Insert Modifier: public(287) into MethodDeclaration(320) at 0", "Insert SimpleName: RexCastCallBinding(288) into MethodDeclaration(320) at 1", "Insert SingleVariableDeclaration(292) into MethodDeclaration(320) at 2", "Insert SingleVariableDeclaration(296) into MethodDeclaration(320) at 3", "Insert SingleVariableDeclaration(304) into MethodDeclaration(320) at 4", "Insert SingleVariableDeclaration(308) into MethodDeclaration(320) at 5", "Insert Block(319) into MethodDeclaration(320) at 6", "Insert MarkerAnnotation(322) into MethodDeclaration(342) at 0", "Insert Modifier: public(323) into MethodDeclaration(342) at 1", "Insert SimpleType: RelDataType(325) into MethodDeclaration(342) at 2", "Insert SimpleName: getOperandType(326) into MethodDeclaration(342) at 3", "Insert SingleVariableDeclaration(329) into MethodDeclaration(342) at 4", "Insert Block(341) into MethodDeclaration(342) at 5", "Insert TextElement: Creates a binding of the appropriate type. (82) into TagElement(83) at 0", "Insert SimpleName: RelDataTypeFactory(90) into SimpleType: RelDataTypeFactory(91) at 0", "Insert SimpleName: RexCall(94) into SimpleType: RexCall(95) at 0", "Insert MethodInvocation(100) into SwitchStatement(117) at 0", "Insert SwitchCase(102) into SwitchStatement(117) at 1", "Insert ReturnStatement(116) into SwitchStatement(117) at 2", "Insert ClassInstanceCreation(127) into ReturnStatement(128) at 0", "Insert MethodInvocation(183) into ReturnStatement(184) at 0", "Insert ClassInstanceCreation(198) into ThrowStatement(199) at 0", "Insert TextElement: To be compatible with (268) into TagElement(273) at 0", "Insert TagElement: @code(270) into TagElement(273) at 1", "Insert TextElement: , CAST needs to pretend that it(271) into TagElement(273) at 2", "Insert TextElement: has two arguments, the second of which is the target type. (272) into TagElement(273) at 3", "Insert SimpleName: RelDataType(282) into SimpleType: RelDataType(283) at 0", "Insert SimpleName: type(284) into VariableDeclarationFragment(285) at 0", "Insert SimpleType: RelDataTypeFactory(290) into SingleVariableDeclaration(292) at 0", "Insert SimpleName: typeFactory(291) into SingleVariableDeclaration(292) at 1", "Insert SimpleType: SqlOperator(294) into SingleVariableDeclaration(296) at 0", "Insert SimpleName: sqlOperator(295) into SingleVariableDeclaration(296) at 1", "Insert ParameterizedType: List<? extends RexNode>(302) into SingleVariableDeclaration(304) at 0", "Insert SimpleName: operands(303) into SingleVariableDeclaration(304) at 1", "Insert SimpleType: RelDataType(306) into SingleVariableDeclaration(308) at 0", "Insert SimpleName: type(307) into SingleVariableDeclaration(308) at 1", "Insert SuperConstructorInvocation(312) into Block(319) at 0", "Insert ExpressionStatement(318) into Block(319) at 1", "Insert SimpleName: Override(321) into MarkerAnnotation(322) at 0", "Insert SimpleName: RelDataType(324) into SimpleType: RelDataType(325) at 0", "Insert PrimitiveType: int(327) into SingleVariableDeclaration(329) at 0", "Insert SimpleName: ordinal(328) into SingleVariableDeclaration(329) at 1", "Insert IfStatement(336) into Block(341) at 0", "Insert ReturnStatement(340) into Block(341) at 1", "Insert SimpleName: call(98) into MethodInvocation(100) at 0", "Insert SimpleName: getKind(99) into MethodInvocation(100) at 1", "Insert SimpleName: CAST(101) into SwitchCase(102) at 0", "Insert ClassInstanceCreation(115) into ReturnStatement(116) at 0", "Insert SimpleType: RexCallBinding(119) into ClassInstanceCreation(127) at 0", "Insert SimpleName: typeFactory(120) into ClassInstanceCreation(127) at 1", "Insert MethodInvocation(123) into ClassInstanceCreation(127) at 2", "Insert MethodInvocation(126) into ClassInstanceCreation(127) at 3", "Insert SimpleName: RexLiteral(177) into MethodInvocation(183) at 0", "Insert SimpleName: value(178) into MethodInvocation(183) at 1", "Insert MethodInvocation(182) into MethodInvocation(183) at 2", "Insert SimpleType: AssertionError(197) into ClassInstanceCreation(198) at 0", "Insert TextElement:  SqlCall(269) into TagElement: @code(270) at 0", "Insert SimpleName: RelDataTypeFactory(289) into SimpleType: RelDataTypeFactory(290) at 0", "Insert SimpleName: SqlOperator(293) into SimpleType: SqlOperator(294) at 0", "Insert SimpleType: List(298) into ParameterizedType: List<? extends RexNode>(302) at 0", "Insert WildcardType: ? extends RexNode(301) into ParameterizedType: List<? extends RexNode>(302) at 1", "Insert SimpleName: RelDataType(305) into SimpleType: RelDataType(306) at 0", "Insert SimpleName: typeFactory(309) into SuperConstructorInvocation(312) at 0", "Insert SimpleName: sqlOperator(310) into SuperConstructorInvocation(312) at 1", "Insert SimpleName: operands(311) into SuperConstructorInvocation(312) at 2", "Insert Assignment: =(317) into ExpressionStatement(318) at 0", "Insert InfixExpression: ==(332) into IfStatement(336) at 0", "Insert Block(335) into IfStatement(336) at 1", "Insert SuperMethodInvocation(339) into ReturnStatement(340) at 0", "Insert SimpleType: RexCastCallBinding(104) into ClassInstanceCreation(115) at 0", "Insert SimpleName: typeFactory(105) into ClassInstanceCreation(115) at 1", "Insert MethodInvocation(108) into ClassInstanceCreation(115) at 2", "Insert MethodInvocation(111) into ClassInstanceCreation(115) at 3", "Insert MethodInvocation(114) into ClassInstanceCreation(115) at 4", "Insert SimpleName: RexCallBinding(118) into SimpleType: RexCallBinding(119) at 0", "Insert SimpleName: call(121) into MethodInvocation(123) at 0", "Insert SimpleName: getOperator(122) into MethodInvocation(123) at 1", "Insert SimpleName: call(124) into MethodInvocation(126) at 0", "Insert SimpleName: getOperands(125) into MethodInvocation(126) at 1", "Insert SimpleName: operands(179) into MethodInvocation(182) at 0", "Insert SimpleName: get(180) into MethodInvocation(182) at 1", "Insert SimpleName: ordinal(181) into MethodInvocation(182) at 2", "Insert SimpleName: AssertionError(196) into SimpleType: AssertionError(197) at 0", "Insert SimpleName: List(297) into SimpleType: List(298) at 0", "Insert SimpleType: RexNode(300) into WildcardType: ? extends RexNode(301) at 0", "Insert FieldAccess(315) into Assignment: =(317) at 0", "Insert SimpleName: type(316) into Assignment: =(317) at 1", "Insert SimpleName: ordinal(330) into InfixExpression: ==(332) at 0", "Insert NumberLiteral: 1(331) into InfixExpression: ==(332) at 1", "Insert ReturnStatement(334) into Block(335) at 0", "Insert SimpleName: getOperandType(337) into SuperMethodInvocation(339) at 0", "Insert SimpleName: ordinal(338) into SuperMethodInvocation(339) at 1", "Insert SimpleName: RexCastCallBinding(103) into SimpleType: RexCastCallBinding(104) at 0", "Insert SimpleName: call(106) into MethodInvocation(108) at 0", "Insert SimpleName: getOperator(107) into MethodInvocation(108) at 1", "Insert SimpleName: call(109) into MethodInvocation(111) at 0", "Insert SimpleName: getOperands(110) into MethodInvocation(111) at 1", "Insert SimpleName: call(112) into MethodInvocation(114) at 0", "Insert SimpleName: getType(113) into MethodInvocation(114) at 1", "Insert SimpleName: RexNode(299) into SimpleType: RexNode(300) at 0", "Insert ThisExpression(313) into FieldAccess(315) at 0", "Insert SimpleName: type(314) into FieldAccess(315) at 1", "Insert SimpleName: type(333) into ReturnStatement(334) at 0"]}}, {"RexLiteral_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: value to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: findValue to MethodInvocation at 0", "INS SimpleName: RexNode to SimpleType: RexNode at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: Comparable to MethodDeclaration at 2", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleType: RexNode to SingleVariableDeclaration at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: Comparable to SimpleType: Comparable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5"]}]}}, {"RexLiteral_diff": {"operations": ["Insert MethodDeclaration(1724) into TypeDeclaration: class(1958) at 27", "Insert Modifier: public(1710) into MethodDeclaration(1724) at 0", "Insert Modifier: static(1711) into MethodDeclaration(1724) at 1", "Insert SimpleType: Comparable(1713) into MethodDeclaration(1724) at 2", "Insert SimpleName: value(1714) into MethodDeclaration(1724) at 3", "Insert SingleVariableDeclaration(1718) into MethodDeclaration(1724) at 4", "Insert Block(1723) into MethodDeclaration(1724) at 5", "Insert SimpleName: Comparable(1712) into SimpleType: Comparable(1713) at 0", "Insert SimpleType: RexNode(1716) into SingleVariableDeclaration(1718) at 0", "Insert SimpleName: node(1717) into SingleVariableDeclaration(1718) at 1", "Insert ReturnStatement(1722) into Block(1723) at 0", "Insert SimpleName: RexNode(1715) into SimpleType: RexNode(1716) at 0", "Insert MethodInvocation(1721) into ReturnStatement(1722) at 0", "Insert SimpleName: findValue(1719) into MethodInvocation(1721) at 0", "Insert SimpleName: node(1720) into MethodInvocation(1721) at 1"]}}, {"SqlAsOperator_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: call to MethodInvocation at 0", "MOV SimpleName: getOperandList to MethodInvocation at 1"]}, {"root": "UPDATE from getOperandList to getOperandMonotonicity", "operations": ["UPD SimpleName: getOperandList from getOperandList to getOperandMonotonicity"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: scope", "DEL SingleVariableDeclaration", "DEL SimpleType: SqlValidatorScope", "DEL SimpleName: SqlValidatorScope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getMonotonicity", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: scope"]}]}}, {"SqlAsOperator_diff": {"operations": ["Insert MarkerAnnotation(362) into MethodDeclaration(377) at 0", "Insert SimpleName: Override(361) into MarkerAnnotation(362) at 0", "Update SimpleType: SqlCall(366) to SqlOperatorBinding", "Update SimpleName: SqlCall(365) to SqlOperatorBinding", "Insert MethodInvocation(374) into ReturnStatement(375) at 0", "Move SimpleName: call(373) into MethodInvocation(374) at 0", "Update SimpleName: getOperandList(374) to getOperandMonotonicity", "Move SimpleName: getOperandList(374) into MethodInvocation(374) at 1", "Move NumberLiteral: 0(377) into MethodInvocation(374) at 2", "Delete SimpleName: SqlValidatorScope(369)", "Delete SimpleType: SqlValidatorScope(370)", "Delete SimpleName: scope(371)", "Delete SingleVariableDeclaration(372)", "Delete MethodInvocation(375)", "Delete SimpleName: get(376)", "Delete MethodInvocation(378)", "Delete SimpleName: getMonotonicity(379)", "Delete SimpleName: scope(380)", "Delete MethodInvocation(381)"]}}, {"SqlBinaryOperator_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to Block at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SqlMonotonicity to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SqlMonotonicity to VariableDeclarationStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "UPDATE from operand0 to mono0", "operations": ["UPD SimpleName: operand0 from operand0 to mono0"]}, {"root": "UPDATE from operand1 to mono1", "operations": ["UPD SimpleName: operand1 from operand1 to mono1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity", "UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "INS SimpleType: Object to VariableDeclarationStatement at 1", "operations": ["INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Object to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from operand1 to o", "operations": ["UPD SimpleName: operand1 from operand1 to o", "UPD SimpleName: mono0 from mono0 to o"]}, {"root": "UPDATE from SqlLiteral to BigDecimal", "operations": ["UPD SimpleType: SqlLiteral from SqlLiteral to BigDecimal", "UPD SimpleName: SqlLiteral from SqlLiteral to BigDecimal"]}, {"root": "UPDATE from operand0 to call", "operations": ["UPD SimpleName: operand0 from operand0 to call"]}, {"root": "UPDATE from getMonotonicity to getOperandLiteralValue", "operations": ["UPD SimpleName: getMonotonicity from getMonotonicity to getOperandLiteralValue"]}, {"root": "INS NumberLiteral: 1 to MethodInvocation at 2", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 2"]}, {"root": "INS ParenthesizedExpression to MethodInvocation at 0", "operations": ["INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleType: BigDecimal to CastExpression at 0", "INS SimpleName: o to CastExpression at 1"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: scope", "DEL SimpleName: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleType: SqlValidatorScope"]}, {"root": "DEL SimpleType: SqlNode", "operations": ["DEL SimpleName: SqlNode", "DEL SimpleType: SqlNode"]}, {"root": "DEL SimpleType: SqlNode", "operations": ["DEL SimpleType: SqlNode", "DEL SimpleName: SqlNode"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: operand1", "DEL SimpleName: SqlLiteral", "DEL VariableDeclarationStatement", "DEL CastExpression", "DEL SimpleName: literal", "DEL SimpleType: SqlLiteral", "DEL VariableDeclarationFragment", "DEL SimpleName: SqlLiteral", "DEL SimpleType: SqlLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: literal", "DEL MethodInvocation", "DEL SimpleName: bigDecimalValue"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getMonotonicity", "DEL SimpleName: scope", "DEL VariableDeclarationFragment", "DEL SimpleName: operand1", "DEL VariableDeclarationStatement", "DEL SimpleName: mono1", "DEL MethodInvocation", "DEL Modifier: final"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}]}}, {"SqlBinaryOperator_diff": {"operations": ["Insert MarkerAnnotation(483) into MethodDeclaration(572) at 0", "Insert SimpleName: Override(482) into MarkerAnnotation(483) at 0", "Update SimpleType: SqlCall(487) to SqlOperatorBinding", "Update SimpleName: SqlCall(486) to SqlOperatorBinding", "Insert IfStatement(564) into Block(565) at 2", "Move SimpleType: SqlMonotonicity(531) into VariableDeclarationStatement(506) at 1", "Move SimpleType: SqlMonotonicity(521) into VariableDeclarationStatement(516) at 1", "Move InfixExpression: ==(541) into IfStatement(564) at 0", "Insert Block(563) into IfStatement(564) at 1", "Update SimpleName: operand0(502) to mono0", "Update SimpleName: operand1(512) to mono1", "Move VariableDeclarationStatement(528) into Block(563) at 0", "Move IfStatement(581) into Block(563) at 1", "Update SimpleName: operand(504) to getOperandMonotonicity", "Update SimpleName: operand(514) to getOperandMonotonicity", "Insert SimpleType: Object(522) into VariableDeclarationStatement(529) at 1", "Insert SimpleName: Object(521) into SimpleType: Object(522) at 0", "Update SimpleName: mono0(522) to o", "Update SimpleName: operand1(542) to o", "Update SimpleType: SqlLiteral(544) to BigDecimal", "Update SimpleName: operand0(523) to call", "Update SimpleName: getMonotonicity(524) to getOperandLiteralValue", "Insert NumberLiteral: 1(526) into MethodInvocation(527) at 2", "Update SimpleName: SqlLiteral(543) to BigDecimal", "Insert ParenthesizedExpression(538) into MethodInvocation(541) at 0", "Insert CastExpression(537) into ParenthesizedExpression(538) at 0", "Insert SimpleType: BigDecimal(535) into CastExpression(537) at 0", "Insert SimpleName: o(536) into CastExpression(537) at 1", "Insert SimpleName: BigDecimal(534) into SimpleType: BigDecimal(535) at 0", "Delete SimpleName: SqlValidatorScope(490)", "Delete SimpleType: SqlValidatorScope(491)", "Delete SimpleName: scope(492)", "Delete SingleVariableDeclaration(493)", "Delete SimpleName: SqlNode(500)", "Delete SimpleType: SqlNode(501)", "Delete SimpleName: SqlNode(510)", "Delete SimpleType: SqlNode(511)", "Delete SimpleName: scope(525)", "Delete SimpleName: SqlLiteral(546)", "Delete SimpleType: SqlLiteral(547)", "Delete SimpleName: literal(548)", "Delete SimpleName: SqlLiteral(549)", "Delete SimpleType: SqlLiteral(550)", "Delete SimpleName: operand1(551)", "Delete CastExpression(552)", "Delete VariableDeclarationFragment(553)", "Delete VariableDeclarationStatement(554)", "Delete SimpleName: literal(555)", "Delete SimpleName: bigDecimalValue(556)", "Delete MethodInvocation(557)", "Delete Modifier: final(529)", "Delete SimpleName: mono1(532)", "Delete SimpleName: operand1(533)", "Delete SimpleName: getMonotonicity(534)", "Delete SimpleName: scope(535)", "Delete MethodInvocation(536)", "Delete VariableDeclarationFragment(537)", "Delete VariableDeclarationStatement(538)", "Delete Block(582)", "Delete IfStatement(583)", "Delete SimpleName: scope(588)"]}}, {"SqlCall_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: getValidator to MethodInvocation at 1", "INS SimpleName: scope to ClassInstanceCreation at 2", "INS SimpleName: SqlCallBinding to SimpleType: SqlCallBinding at 0", "INS SimpleType: SqlCallBinding to ClassInstanceCreation at 0", "INS ThisExpression to ClassInstanceCreation at 3", "INS SimpleType: SqlCallBinding to VariableDeclarationStatement at 1", "INS SimpleName: binding to VariableDeclarationFragment at 0", "INS SimpleName: SqlCallBinding to SimpleType: SqlCallBinding at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: scope to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from scope to binding", "operations": ["UPD SimpleName: scope from scope to binding"]}, {"root": "UPDATE from ArrayList<String> to ArrayList<>", "operations": ["UPD ParameterizedType: ArrayList<String> from ArrayList<String> to ArrayList<>"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String", "DEL SimpleName: String"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}]}}, {"SqlCall_diff": {"operations": ["Insert VariableDeclarationStatement(542) into Block(549) at 0", "Insert Modifier: final(529) into VariableDeclarationStatement(542) at 0", "Insert SimpleType: SqlCallBinding(531) into VariableDeclarationStatement(542) at 1", "Insert VariableDeclarationFragment(541) into VariableDeclarationStatement(542) at 2", "Insert SimpleName: SqlCallBinding(530) into SimpleType: SqlCallBinding(531) at 0", "Insert SimpleName: binding(532) into VariableDeclarationFragment(541) at 0", "Insert ClassInstanceCreation(540) into VariableDeclarationFragment(541) at 1", "Update SimpleName: scope(535) to binding", "Update ParameterizedType: ArrayList<String>(477) to ArrayList<>", "Insert SimpleType: SqlCallBinding(534) into ClassInstanceCreation(540) at 0", "Insert MethodInvocation(537) into ClassInstanceCreation(540) at 1", "Insert SimpleName: scope(538) into ClassInstanceCreation(540) at 2", "Insert ThisExpression(539) into ClassInstanceCreation(540) at 3", "Insert SimpleName: SqlCallBinding(533) into SimpleType: SqlCallBinding(534) at 0", "Insert SimpleName: scope(535) into MethodInvocation(537) at 0", "Insert SimpleName: getValidator(536) into MethodInvocation(537) at 1", "Delete SimpleName: String(475)", "Delete SimpleType: String(476)", "Delete ThisExpression(534)"]}}, {"SqlCallBinding_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.calcite.util.NlsString to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: java.math.BigDecimal to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS InstanceofExpression to ConditionalExpression at 0", "INS Block to MethodDeclaration at 5", "INS SimpleType: NlsString to CastExpression at 0", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 2", "INS ParenthesizedExpression to MethodInvocation at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: SqlLiteral to MethodInvocation at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: value to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: Object to VariableDeclarationStatement at 1", "INS SimpleName: o to VariableDeclarationFragment at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Modifier: final to VariableDeclarationStatement at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS NullLiteral to ConditionalExpression at 2", "INS SimpleName: Object to SimpleType: Object at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: o to InstanceofExpression at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: o to CastExpression at 1", "INS SimpleName: getStringLiteralOperand to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: getIntLiteralOperand to MethodDeclaration at 3", "INS MethodInvocation to ThrowStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: RESOURCE to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: bd to MethodInvocation at 0", "INS SimpleName: numberLiteralOutOfRange to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS CatchClause to TryStatement at 1", "INS ThrowStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS TryStatement to Block at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleType: ArithmeticException to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: newContextException to MethodInvocation at 1", "INS SimpleName: o to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 5", "INS IfStatement to Block at 2", "INS SimpleType: Object to VariableDeclarationStatement at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleName: ArithmeticException to SimpleType: ArithmeticException at 0", "INS SimpleName: SqlUtil to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS Block to TryStatement at 0", "INS ReturnStatement to Block at 0", "INS QualifiedName: node.pos to MethodInvocation at 2", "INS Block to CatchClause at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: Comparable to SimpleType: Comparable at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: getOperandLiteralValue to MethodDeclaration at 3", "INS SimpleType: Comparable to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS SimpleType: SqlMonotonicity to MethodDeclaration at 1", "operations": ["INS SimpleType: SqlMonotonicity to MethodDeclaration at 1", "INS SimpleName: SqlMonotonicity to SimpleType: SqlMonotonicity at 0"]}, {"root": "UPDATE from getStringLiteralOperand to getOperandMonotonicity", "operations": ["UPD SimpleName: getStringLiteralOperand from getStringLiteralOperand to getOperandMonotonicity"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: String to MethodDeclaration at 2"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: SqlLiteral to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: value to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: call to MethodInvocation at 0", "INS SimpleName: getOperandList to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from stringValue to getMonotonicity", "operations": ["UPD SimpleName: stringValue from stringValue to getMonotonicity"]}, {"root": "UPDATE from node to scope", "operations": ["UPD SimpleName: node from node to scope"]}, {"root": "UPDATE from SqlLiteral to Object", "operations": ["UPD SimpleName: SqlLiteral from SqlLiteral to Object"]}, {"root": "MOVE from SimpleType: Object", "operations": ["MOV SimpleName: SqlLiteral to SimpleType: Object at 0"]}, {"root": "UPDATE from node to o", "operations": ["UPD SimpleName: node from node to o", "UPD SimpleName: node from node to o"]}, {"root": "UPDATE from SqlCall to BigDecimal", "operations": ["UPD SimpleType: SqlCall from SqlCall to BigDecimal", "UPD SimpleName: SqlCall from SqlCall to BigDecimal", "UPD SimpleType: SqlCall from SqlCall to BigDecimal", "UPD SimpleType: SqlCall from SqlCall to BigDecimal", "UPD SimpleName: SqlCall from SqlCall to BigDecimal", "UPD SimpleName: SqlCall from SqlCall to BigDecimal"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from intValue to node", "operations": ["UPD SimpleName: intValue from intValue to node", "UPD SimpleName: child from child to node"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: intValue to MethodInvocation at 2"]}, {"root": "UPDATE from SqlLiteral to ordinal", "operations": ["UPD SimpleName: SqlLiteral from SqlLiteral to ordinal"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: SqlLiteral to MethodInvocation at 2"]}, {"root": "UPDATE from SqlLiteral to NlsString", "operations": ["UPD SimpleName: SqlLiteral from SqlLiteral to NlsString", "UPD SimpleName: SqlLiteral from SqlLiteral to NlsString", "UPD SimpleType: SqlLiteral from SqlLiteral to NlsString"]}, {"root": "MOVE from InstanceofExpression", "operations": ["MOV SimpleType: SqlLiteral to InstanceofExpression at 1"]}, {"root": "UPDATE from sqlLiteral to SqlLiteral", "operations": ["UPD SimpleName: sqlLiteral from sqlLiteral to SqlLiteral"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: intValue to MethodInvocation at 1", "MOV SimpleName: sqlLiteral to MethodInvocation at 0"]}, {"root": "UPDATE from intValue to value", "operations": ["UPD SimpleName: intValue from intValue to value"]}, {"root": "UPDATE from c to call", "operations": ["UPD SimpleName: c from c to call"]}, {"root": "INS SimpleName: ordinal to MethodInvocation at 2", "operations": ["INS SimpleName: ordinal to MethodInvocation at 2"]}, {"root": "UPDATE from c to bd", "operations": ["UPD SimpleName: c from c to bd", "UPD SimpleName: c from c to bd"]}, {"root": "MOVE from SimpleType: NlsString", "operations": ["MOV SimpleName: SqlLiteral to SimpleType: NlsString at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: c to MethodInvocation at 0", "MOV SimpleName: getKind to MethodInvocation at 1"]}, {"root": "UPDATE from getKind to intValueExact", "operations": ["UPD SimpleName: getKind from getKind to intValueExact"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL NumberLiteral: 0", "operations": ["DEL NumberLiteral: 0"]}, {"root": "DEL PrefixExpression: -", "operations": ["DEL CastExpression", "DEL SimpleName: child", "DEL SimpleType: SqlLiteral", "DEL ParenthesizedExpression", "DEL PrefixExpression: -", "DEL MethodInvocation", "DEL SimpleName: SqlLiteral", "DEL BooleanLiteral: true"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: child", "DEL IfStatement", "DEL CastExpression", "DEL SimpleName: node", "DEL InfixExpression: ==", "DEL PrimitiveType: int", "DEL SimpleName: sqlLiteral", "DEL Block", "DEL IfStatement", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL Block", "DEL QualifiedName: SqlKind.MINUS_PREFIX", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: SqlLiteral", "DEL SimpleType: SqlLiteral", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL IfStatement", "DEL InstanceofExpression", "DEL Block", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: getIntLiteralOperand", "DEL SimpleType: SqlLiteral", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL SimpleType: SqlLiteral"]}]}}, {"SqlCallBinding_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(705) at 6", "Insert ImportDeclaration(25) into CompilationUnit(705) at 12", "Insert ImportDeclaration(29) into CompilationUnit(705) at 14", "Insert QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: org.apache.calcite.util.NlsString(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: java.math.BigDecimal(28) into ImportDeclaration(29) at 0", "Insert MethodDeclaration(311) into TypeDeclaration: class(704) at 13", "Insert MethodDeclaration(383) into TypeDeclaration: class(704) at 14", "Insert MethodDeclaration(408) into TypeDeclaration: class(704) at 15", "Insert SimpleType: SqlMonotonicity(251) into MethodDeclaration(267) at 1", "Update SimpleName: getStringLiteralOperand(246) to getOperandMonotonicity", "Insert MarkerAnnotation(269) into MethodDeclaration(311) at 0", "Move Modifier: public(266) into MethodDeclaration(311) at 1", "Move SimpleType: String(245) into MethodDeclaration(311) at 2", "Insert SimpleName: getStringLiteralOperand(273) into MethodDeclaration(311) at 3", "Insert SingleVariableDeclaration(276) into MethodDeclaration(311) at 4", "Insert Block(310) into MethodDeclaration(311) at 5", "Insert MarkerAnnotation(313) into MethodDeclaration(383) at 0", "Insert Modifier: public(314) into MethodDeclaration(383) at 1", "Insert PrimitiveType: int(315) into MethodDeclaration(383) at 2", "Insert SimpleName: getIntLiteralOperand(316) into MethodDeclaration(383) at 3", "Move SingleVariableDeclaration(271) into MethodDeclaration(383) at 4", "Insert Block(382) into MethodDeclaration(383) at 5", "Insert MarkerAnnotation(385) into MethodDeclaration(408) at 0", "Insert Modifier: public(386) into MethodDeclaration(408) at 1", "Insert SimpleType: Comparable(388) into MethodDeclaration(408) at 2", "Insert SimpleName: getOperandLiteralValue(389) into MethodDeclaration(408) at 3", "Insert SingleVariableDeclaration(392) into MethodDeclaration(408) at 4", "Insert Block(407) into MethodDeclaration(408) at 5", "Insert MarkerAnnotation(410) into MethodDeclaration(430) at 0", "Insert MarkerAnnotation(432) into MethodDeclaration(443) at 0", "Insert MarkerAnnotation(445) into MethodDeclaration(496) at 0", "Insert MarkerAnnotation(498) into MethodDeclaration(553) at 0", "Insert MarkerAnnotation(555) into MethodDeclaration(624) at 0", "Insert SimpleName: SqlMonotonicity(250) into SimpleType: SqlMonotonicity(251) at 0", "Insert SimpleName: Override(268) into MarkerAnnotation(269) at 0", "Insert PrimitiveType: int(274) into SingleVariableDeclaration(276) at 0", "Insert SimpleName: ordinal(275) into SingleVariableDeclaration(276) at 1", "Move VariableDeclarationStatement(258) into Block(310) at 0", "Insert VariableDeclarationStatement(295) into Block(310) at 1", "Insert ReturnStatement(309) into Block(310) at 2", "Insert SimpleName: Override(312) into MarkerAnnotation(313) at 0", "Move VariableDeclarationStatement(280) into Block(382) at 0", "Insert VariableDeclarationStatement(338) into Block(382) at 1", "Insert IfStatement(376) into Block(382) at 2", "Move ThrowStatement(353) into Block(382) at 3", "Insert SimpleName: Override(384) into MarkerAnnotation(385) at 0", "Insert SimpleName: Comparable(387) into SimpleType: Comparable(388) at 0", "Insert PrimitiveType: int(390) into SingleVariableDeclaration(392) at 0", "Insert SimpleName: ordinal(391) into SingleVariableDeclaration(392) at 1", "Move VariableDeclarationStatement(327) into Block(407) at 0", "Move ReturnStatement(341) into Block(407) at 1", "Insert SimpleName: Override(409) into MarkerAnnotation(410) at 0", "Insert SimpleName: Override(431) into MarkerAnnotation(432) at 0", "Insert SimpleName: Override(444) into MarkerAnnotation(445) at 0", "Insert SimpleName: Override(497) into MarkerAnnotation(498) at 0", "Insert SimpleName: Override(554) into MarkerAnnotation(555) at 0", "Insert Modifier: final(286) into VariableDeclarationStatement(295) at 0", "Insert SimpleType: Object(288) into VariableDeclarationStatement(295) at 1", "Insert VariableDeclarationFragment(294) into VariableDeclarationStatement(295) at 2", "Insert ConditionalExpression(308) into ReturnStatement(309) at 0", "Insert Modifier: final(329) into VariableDeclarationStatement(338) at 0", "Insert SimpleType: Object(331) into VariableDeclarationStatement(338) at 1", "Insert VariableDeclarationFragment(337) into VariableDeclarationStatement(338) at 2", "Move InstanceofExpression(303) into IfStatement(376) at 0", "Insert Block(375) into IfStatement(376) at 1", "Insert MethodInvocation(405) into ReturnStatement(406) at 0", "Insert MethodInvocation(261) into MethodInvocation(264) at 0", "Update SimpleName: stringValue(260) to getMonotonicity", "Update SimpleName: node(261) to scope", "Insert SimpleName: Object(287) into SimpleType: Object(288) at 0", "Insert SimpleName: o(289) into VariableDeclarationFragment(294) at 0", "Insert MethodInvocation(293) into VariableDeclarationFragment(294) at 1", "Insert InstanceofExpression(299) into ConditionalExpression(308) at 0", "Insert MethodInvocation(306) into ConditionalExpression(308) at 1", "Insert NullLiteral(307) into ConditionalExpression(308) at 2", "Update SimpleName: SqlLiteral(288) to Object", "Move SimpleName: SqlLiteral(288) into SimpleType: Object(331) at 0", "Insert SimpleName: o(332) into VariableDeclarationFragment(337) at 0", "Insert MethodInvocation(336) into VariableDeclarationFragment(337) at 1", "Update SimpleName: node(300) to o", "Update SimpleType: SqlCall(302) to BigDecimal", "Move VariableDeclarationStatement(313) into Block(375) at 0", "Insert TryStatement(374) into Block(375) at 1", "Update SimpleName: child(321) to node", "Insert SimpleName: SqlLiteral(402) into MethodInvocation(405) at 0", "Insert SimpleName: value(403) into MethodInvocation(405) at 1", "Update SimpleName: intValue(337) to node", "Move SimpleName: intValue(337) into MethodInvocation(405) at 2", "Insert MethodInvocation(258) into MethodInvocation(261) at 0", "Insert SimpleName: get(259) into MethodInvocation(261) at 1", "Update SimpleName: SqlLiteral(259) to ordinal", "Move SimpleName: SqlLiteral(259) into MethodInvocation(261) at 2", "Insert SimpleName: SqlLiteral(290) into MethodInvocation(293) at 0", "Insert SimpleName: value(291) into MethodInvocation(293) at 1", "Insert SimpleName: node(292) into MethodInvocation(293) at 2", "Insert SimpleName: o(296) into InstanceofExpression(299) at 0", "Update SimpleType: SqlLiteral(283) to NlsString", "Move SimpleType: SqlLiteral(283) into InstanceofExpression(299) at 1", "Insert ParenthesizedExpression(304) into MethodInvocation(306) at 0", "Insert SimpleName: getValue(305) into MethodInvocation(306) at 1", "Update SimpleName: sqlLiteral(294) to SqlLiteral", "Move SimpleName: sqlLiteral(294) into MethodInvocation(336) at 0", "Update SimpleName: intValue(295) to value", "Move SimpleName: intValue(295) into MethodInvocation(336) at 1", "Insert SimpleName: node(335) into MethodInvocation(336) at 2", "Update SimpleName: SqlCall(301) to BigDecimal", "Update SimpleType: SqlCall(306) to BigDecimal", "Insert Block(356) into TryStatement(374) at 0", "Insert CatchClause(373) into TryStatement(374) at 1", "Update SimpleName: c(322) to call", "Insert SimpleName: ordinal(398) into MethodInvocation(399) at 2", "Insert SimpleName: call(256) into MethodInvocation(258) at 0", "Insert SimpleName: getOperandList(257) into MethodInvocation(258) at 1", "Update SimpleName: SqlLiteral(282) to NlsString", "Insert CastExpression(303) into ParenthesizedExpression(304) at 0", "Update SimpleName: SqlCall(305) to BigDecimal", "Update SimpleName: c(307) to bd", "Insert ReturnStatement(355) into Block(356) at 0", "Insert SingleVariableDeclaration(360) into CatchClause(373) at 0", "Insert Block(372) into CatchClause(373) at 1", "Insert SimpleType: NlsString(301) into CastExpression(303) at 0", "Insert SimpleName: o(302) into CastExpression(303) at 1", "Update SimpleType: SqlCall(309) to BigDecimal", "Update SimpleName: node(310) to o", "Insert MethodInvocation(354) into ReturnStatement(355) at 0", "Insert SimpleType: ArithmeticException(358) into SingleVariableDeclaration(360) at 0", "Insert SimpleName: e(359) into SingleVariableDeclaration(360) at 1", "Insert ThrowStatement(371) into Block(372) at 0", "Update SimpleName: SqlLiteral(285) to NlsString", "Move SimpleName: SqlLiteral(285) into SimpleType: NlsString(301) at 0", "Update SimpleName: SqlCall(308) to BigDecimal", "Update SimpleName: c(314) to bd", "Move SimpleName: c(314) into MethodInvocation(354) at 0", "Update SimpleName: getKind(315) to intValueExact", "Move SimpleName: getKind(315) into MethodInvocation(354) at 1", "Insert SimpleName: ArithmeticException(357) into SimpleType: ArithmeticException(358) at 0", "Insert MethodInvocation(370) into ThrowStatement(371) at 0", "Insert SimpleName: SqlUtil(361) into MethodInvocation(370) at 0", "Insert SimpleName: newContextException(362) into MethodInvocation(370) at 1", "Insert QualifiedName: node.pos(363) into MethodInvocation(370) at 2", "Insert MethodInvocation(369) into MethodInvocation(370) at 3", "Insert SimpleName: RESOURCE(364) into MethodInvocation(369) at 0", "Insert SimpleName: numberLiteralOutOfRange(365) into MethodInvocation(369) at 1", "Insert MethodInvocation(368) into MethodInvocation(369) at 2", "Insert SimpleName: bd(366) into MethodInvocation(368) at 0", "Insert SimpleName: toString(367) into MethodInvocation(368) at 1", "Delete Modifier: final(304)", "Delete NumberLiteral: 0(324)", "Delete SimpleName: SqlLiteral(332)", "Delete SimpleType: SqlLiteral(333)", "Delete SimpleName: child(334)", "Delete CastExpression(335)", "Delete ParenthesizedExpression(336)", "Delete BooleanLiteral: true(338)", "Delete MethodInvocation(339)", "Delete PrefixExpression: -(340)", "Delete PrimitiveType: int(267)", "Delete SimpleName: getIntLiteralOperand(268)", "Delete SimpleName: node(281)", "Delete InstanceofExpression(284)", "Delete SimpleType: SqlLiteral(286)", "Delete SimpleName: sqlLiteral(287)", "Delete SimpleType: SqlLiteral(289)", "Delete SimpleName: node(290)", "Delete CastExpression(291)", "Delete VariableDeclarationFragment(292)", "Delete VariableDeclarationStatement(293)", "Delete BooleanLiteral: true(296)", "Delete MethodInvocation(297)", "Delete ReturnStatement(298)", "Delete Block(299)", "Delete MethodInvocation(316)", "Delete QualifiedName: SqlKind.MINUS_PREFIX(317)", "Delete InfixExpression: ==(318)", "Delete SimpleName: child(328)", "Delete SimpleName: SqlLiteral(329)", "Delete SimpleType: SqlLiteral(330)", "Delete InstanceofExpression(331)", "Delete Block(342)", "Delete IfStatement(343)", "Delete Block(344)", "Delete IfStatement(345)", "Delete Block(346)", "Delete IfStatement(347)", "Delete IfStatement(348)", "Delete Block(354)", "Delete MethodDeclaration(355)"]}}, {"SqlLiteral_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleType: BigDecimal to CastExpression at 0", "INS InstanceofExpression to AssertStatement at 0", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: node to CastExpression at 1", "INS SimpleName: BigDecimal to TagElement: @link at 0", "INS SimpleName: operand to MethodInvocation at 1", "INS QualifiedName: literal.value to CastExpression at 1", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: SqlLiteral to InstanceofExpression at 1", "INS SimpleName: NlsString to TagElement: @link at 0", "INS TextElement: , to TagElement at 13", "INS IfStatement to SwitchStatement at 7", "INS TextElement: returns the value as a  to TagElement at 8", "INS ParenthesizedExpression to MethodInvocation at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: SqlUtil to MethodInvocation at 0", "INS SimpleName: bigDecimal to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: NlsString to SimpleType: NlsString at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: literal to VariableDeclarationFragment at 0", "INS CastExpression to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: SqlLiteral to CastExpression at 0", "INS TextElement: Extracts the value from a literal. to TagElement at 0", "INS TextElement: returns its  to TagElement at 14", "INS SimpleName: value to MethodInvocation at 0", "INS SimpleName: Comparable to SimpleType: Comparable at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to SwitchStatement at 0", "INS ThrowStatement to SwitchStatement at 9", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS TextElement: . to TagElement at 16", "INS SwitchCase to SwitchStatement at 8", "INS SimpleName: bigDecimal to VariableDeclarationFragment at 0", "INS AssertStatement to Block at 0", "INS SimpleName: o to InstanceofExpression at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SwitchCase to SwitchStatement at 4", "INS SimpleName: SqlCall to SimpleType: SqlCall at 0", "INS SimpleType: SqlCall to InstanceofExpression at 1", "INS TextElement: <ul> to TagElement at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: operand to MethodInvocation at 1", "INS SimpleName: MINUS_PREFIX to SwitchCase at 0", "INS TextElement: <li>If the node is a character literal, a chain of string to TagElement at 3", "INS SwitchStatement to Block at 1", "INS SwitchCase to SwitchStatement at 1", "INS SimpleType: NlsString to CastExpression at 0", "INS CastExpression to ReturnStatement at 0", "INS AssertStatement to Block at 2", "INS InstanceofExpression to AssertStatement at 0", "INS SimpleType: SqlIntervalQualifier to CastExpression at 0", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS TagElement: @link to TagElement at 5", "INS SimpleName: literal to MethodInvocation at 0", "INS SimpleName: SqlNode to SimpleType: SqlNode at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleType: SqlCall to CastExpression at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleName: CAST to SwitchCase at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: BigDecimal to InstanceofExpression at 1", "INS TextElement: <li>If the node is a numeric literal, or a negated numeric literal, to TagElement at 7", "INS ReturnStatement to SwitchStatement at 4", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: SqlCall to SimpleType: SqlCall at 0", "INS VariableDeclarationStatement to SwitchStatement at 6", "INS SwitchCase to SwitchStatement at 1", "INS ReturnStatement to Block at 3", "INS SimpleType: SqlLiteral to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InstanceofExpression to IfStatement at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to SwitchStatement at 3", "INS SimpleName: SqlCall to SimpleType: SqlCall at 0", "INS SimpleType: SqlCall to InstanceofExpression at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: SqlIntervalQualifier to InstanceofExpression at 1", "INS SimpleName: node to CastExpression at 1", "INS SimpleName: node to CastExpression at 1", "INS AssertStatement to SwitchStatement at 2", "INS SimpleName: SqlCall to SimpleType: SqlCall at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Comparable to VariableDeclarationStatement at 0", "INS SimpleName: inCharFamily to MethodInvocation at 1", "INS SimpleName: Comparable to SimpleType: Comparable at 0", "INS QualifiedName: literal.value to CastExpression at 1", "INS AssertStatement to SwitchStatement at 5", "INS TextElement: <li>If the node is a  to TagElement at 11", "INS SimpleName: literal to MethodInvocation at 0", "INS SimpleName: SqlLiteralChainOperator to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: o to CastExpression at 1", "INS IfStatement to Block at 2", "INS TextElement: . to TagElement at 6", "INS SimpleName: SqlIntervalQualifier to TagElement: @link at 0", "INS IfStatement to Block at 1", "INS SimpleName: SqlTypeUtil to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SwitchStatement to Block at 3", "INS TextElement: literals, or a CAST of a character literal, returns the value as a to TagElement at 4", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: SqlIntervalQualifier to SimpleType: SqlIntervalQualifier at 0", "INS SimpleName: newInternal to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MethodInvocation to AssertStatement at 0", "INS IfStatement to Block at 0", "INS CastExpression to ReturnStatement at 0", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleType: BigDecimal to VariableDeclarationStatement at 0", "INS QualifiedName: literal.value to CastExpression at 1", "INS SimpleName: SqlCall to SimpleType: SqlCall at 0", "INS SimpleName: o to VariableDeclarationFragment at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS Block to MethodDeclaration at 6", "INS TextElement: <p>Cases: to TagElement at 1", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleName: NlsString to SimpleType: NlsString at 0", "INS SimpleName: literal to VariableDeclarationFragment at 0", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleName: node to InfixExpression: + at 1", "INS Block to IfStatement at 1", "INS SimpleType: SqlCall to CastExpression at 0", "INS SimpleName: node to CastExpression at 1", "INS TagElement: @link to TagElement at 9", "INS ReturnStatement to SwitchStatement at 2", "INS TagElement: @link to TagElement at 15", "INS QualifiedName: qualifier.timeUnitRange to ReturnStatement at 0", "INS MethodInvocation to ThrowStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: SqlIntervalQualifier to VariableDeclarationStatement at 0", "INS SimpleName: SqlLiteral to SimpleType: SqlLiteral at 0", "INS TextElement: . to TagElement at 10", "INS ReturnStatement to Block at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: getFamily to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS TagElement to Javadoc at 0", "INS SimpleType: SqlNode to SingleVariableDeclaration at 0", "INS SimpleName: node to CastExpression at 1", "INS SimpleName: negate to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: concatenateOperands to MethodInvocation at 1", "INS SimpleName: CHARACTER to SwitchCase at 0", "INS InstanceofExpression to AssertStatement at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS CastExpression to ParenthesizedExpression at 0", "INS ReturnStatement to Block at 1", "INS Modifier: static to MethodDeclaration at 2", "INS MethodInvocation to SwitchStatement at 0", "INS SimpleType: NlsString to CastExpression at 0", "INS SimpleType: SqlCall to CastExpression at 0", "INS SimpleName: node to InstanceofExpression at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleName: SqlCall to SimpleType: SqlCall at 0", "INS SimpleName: qualifier to VariableDeclarationFragment at 0", "INS SwitchCase to SwitchStatement at 3", "INS SimpleName: value to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: SqlCall to InstanceofExpression at 1", "INS SimpleName: getTypeName to MethodInvocation at 1", "INS SimpleName: isLiteralChain to MethodInvocation at 1", "INS CastExpression to MethodInvocation at 2", "INS TagElement: @link to TagElement at 12", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: Comparable to MethodDeclaration at 3", "INS SimpleName: SqlIntervalQualifier to SimpleType: SqlIntervalQualifier at 0", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleName: getTypeName to MethodInvocation at 1", "INS SimpleName: SqlIntervalQualifier to SimpleType: SqlIntervalQualifier at 0", "INS SimpleName: NUMERIC to SwitchCase at 0", "INS TextElement: <li>Otherwise the behavior is not specified. to TagElement at 17", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: value to MethodInvocation at 0", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS StringLiteral: \"invalid literal: \" to InfixExpression: + at 0", "INS TextElement: </ul> to TagElement at 18", "INS SimpleType: SqlLiteral to VariableDeclarationStatement at 1", "INS SimpleType: BigDecimal to CastExpression at 0", "INS SimpleName: Util to MethodInvocation at 0", "INS SimpleName: TimeUnitRange to TagElement: @link at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS TagElement: @deprecated to Javadoc at 1", "operations": ["INS TagElement: @link to TagElement: @deprecated at 1", "INS SimpleType: SqlNode to MethodRefParameter at 0", "INS MethodRef to TagElement: @link at 0", "INS MethodRefParameter to MethodRef at 1", "INS TagElement: @deprecated to Javadoc at 1", "INS TextElement:  Use  to TagElement: @deprecated at 0", "INS SimpleName: SqlNode to SimpleType: SqlNode at 0", "INS SimpleName: value to MethodRef at 0"]}]}}, {"SqlLiteral_diff": {"operations": ["Insert MethodDeclaration(763) into TypeDeclaration: class(2539) at 15", "Insert Javadoc(593) into MethodDeclaration(763) at 0", "Insert Modifier: public(594) into MethodDeclaration(763) at 1", "Insert Modifier: static(595) into MethodDeclaration(763) at 2", "Insert SimpleType: Comparable(597) into MethodDeclaration(763) at 3", "Insert SimpleName: value(598) into MethodDeclaration(763) at 4", "Insert SingleVariableDeclaration(602) into MethodDeclaration(763) at 5", "Insert Block(762) into MethodDeclaration(763) at 6", "Insert MarkerAnnotation(777) into MethodDeclaration(879) at 1", "Insert MarkerAnnotation(1405) into MethodDeclaration(1416) at 1", "Insert MarkerAnnotation(1447) into MethodDeclaration(1461) at 0", "Insert TagElement(592) into Javadoc(593) at 0", "Insert SimpleName: Comparable(596) into SimpleType: Comparable(597) at 0", "Insert SimpleType: SqlNode(600) into SingleVariableDeclaration(602) at 0", "Insert SimpleName: node(601) into SingleVariableDeclaration(602) at 1", "Insert IfStatement(637) into Block(762) at 0", "Insert IfStatement(673) into Block(762) at 1", "Insert IfStatement(690) into Block(762) at 2", "Insert SwitchStatement(761) into Block(762) at 3", "Insert TagElement: @deprecated(774) into Javadoc(775) at 1", "Insert SimpleName: Deprecated(776) into MarkerAnnotation(777) at 0", "Insert SimpleName: Deprecated(1404) into MarkerAnnotation(1405) at 0", "Insert SimpleName: Deprecated(1446) into MarkerAnnotation(1447) at 0", "Insert TextElement: Extracts the value from a literal.(569) into TagElement(592) at 0", "Insert TextElement: <p>Cases:(570) into TagElement(592) at 1", "Insert TextElement: <ul>(571) into TagElement(592) at 2", "Insert TextElement: <li>If the node is a character literal, a chain of string(572) into TagElement(592) at 3", "Insert TextElement: literals, or a CAST of a character literal, returns the value as a(573) into TagElement(592) at 4", "Insert TagElement: @link(575) into TagElement(592) at 5", "Insert TextElement: .(576) into TagElement(592) at 6", "Insert TextElement: <li>If the node is a numeric literal, or a negated numeric literal,(577) into TagElement(592) at 7", "Insert TextElement: returns the value as a (578) into TagElement(592) at 8", "Insert TagElement: @link(580) into TagElement(592) at 9", "Insert TextElement: .(581) into TagElement(592) at 10", "Insert TextElement: <li>If the node is a (582) into TagElement(592) at 11", "Insert TagElement: @link(584) into TagElement(592) at 12", "Insert TextElement: ,(585) into TagElement(592) at 13", "Insert TextElement: returns its (586) into TagElement(592) at 14", "Insert TagElement: @link(588) into TagElement(592) at 15", "Insert TextElement: .(589) into TagElement(592) at 16", "Insert TextElement: <li>Otherwise the behavior is not specified.(590) into TagElement(592) at 17", "Insert TextElement: </ul>(591) into TagElement(592) at 18", "Insert SimpleName: SqlNode(599) into SimpleType: SqlNode(600) at 0", "Insert InstanceofExpression(606) into IfStatement(637) at 0", "Insert Block(636) into IfStatement(637) at 1", "Insert MethodInvocation(641) into IfStatement(673) at 0", "Insert Block(672) into IfStatement(673) at 1", "Insert InstanceofExpression(677) into IfStatement(690) at 0", "Insert Block(689) into IfStatement(690) at 1", "Insert MethodInvocation(693) into SwitchStatement(761) at 0", "Insert SwitchCase(695) into SwitchStatement(761) at 1", "Insert AssertStatement(700) into SwitchStatement(761) at 2", "Insert ReturnStatement(711) into SwitchStatement(761) at 3", "Insert SwitchCase(713) into SwitchStatement(761) at 4", "Insert AssertStatement(718) into SwitchStatement(761) at 5", "Insert VariableDeclarationStatement(733) into SwitchStatement(761) at 6", "Insert IfStatement(752) into SwitchStatement(761) at 7", "Insert SwitchCase(753) into SwitchStatement(761) at 8", "Insert ThrowStatement(760) into SwitchStatement(761) at 9", "Insert TextElement:  Use (767) into TagElement: @deprecated(774) at 0", "Insert TagElement: @link(773) into TagElement: @deprecated(774) at 1", "Insert SimpleName: NlsString(574) into TagElement: @link(575) at 0", "Insert SimpleName: BigDecimal(579) into TagElement: @link(580) at 0", "Insert SimpleName: SqlIntervalQualifier(583) into TagElement: @link(584) at 0", "Insert SimpleName: TimeUnitRange(587) into TagElement: @link(588) at 0", "Insert SimpleName: node(603) into InstanceofExpression(606) at 0", "Insert SimpleType: SqlLiteral(605) into InstanceofExpression(606) at 1", "Insert VariableDeclarationStatement(615) into Block(636) at 0", "Insert SwitchStatement(635) into Block(636) at 1", "Insert SimpleName: SqlUtil(638) into MethodInvocation(641) at 0", "Insert SimpleName: isLiteralChain(639) into MethodInvocation(641) at 1", "Insert SimpleName: node(640) into MethodInvocation(641) at 2", "Insert AssertStatement(646) into Block(672) at 0", "Insert VariableDeclarationStatement(659) into Block(672) at 1", "Insert AssertStatement(666) into Block(672) at 2", "Insert ReturnStatement(671) into Block(672) at 3", "Insert SimpleName: node(674) into InstanceofExpression(677) at 0", "Insert SimpleType: SqlIntervalQualifier(676) into InstanceofExpression(677) at 1", "Insert VariableDeclarationStatement(686) into Block(689) at 0", "Insert ReturnStatement(688) into Block(689) at 1", "Insert SimpleName: node(691) into MethodInvocation(693) at 0", "Insert SimpleName: getKind(692) into MethodInvocation(693) at 1", "Insert SimpleName: CAST(694) into SwitchCase(695) at 0", "Insert InstanceofExpression(699) into AssertStatement(700) at 0", "Insert MethodInvocation(710) into ReturnStatement(711) at 0", "Insert SimpleName: MINUS_PREFIX(712) into SwitchCase(713) at 0", "Insert InstanceofExpression(717) into AssertStatement(718) at 0", "Insert SimpleType: Comparable(720) into VariableDeclarationStatement(733) at 0", "Insert VariableDeclarationFragment(732) into VariableDeclarationStatement(733) at 1", "Insert InstanceofExpression(737) into IfStatement(752) at 0", "Insert Block(751) into IfStatement(752) at 1", "Insert MethodInvocation(759) into ThrowStatement(760) at 0", "Insert MethodRef(772) into TagElement: @link(773) at 0", "Insert SimpleName: SqlLiteral(604) into SimpleType: SqlLiteral(605) at 0", "Insert SimpleType: SqlLiteral(608) into VariableDeclarationStatement(615) at 0", "Insert VariableDeclarationFragment(614) into VariableDeclarationStatement(615) at 1", "Insert MethodInvocation(620) into SwitchStatement(635) at 0", "Insert SwitchCase(622) into SwitchStatement(635) at 1", "Insert ReturnStatement(627) into SwitchStatement(635) at 2", "Insert SwitchCase(629) into SwitchStatement(635) at 3", "Insert ReturnStatement(634) into SwitchStatement(635) at 4", "Insert InstanceofExpression(645) into AssertStatement(646) at 0", "Insert Modifier: final(647) into VariableDeclarationStatement(659) at 0", "Insert SimpleType: SqlLiteral(649) into VariableDeclarationStatement(659) at 1", "Insert VariableDeclarationFragment(658) into VariableDeclarationStatement(659) at 2", "Insert MethodInvocation(665) into AssertStatement(666) at 0", "Insert CastExpression(670) into ReturnStatement(671) at 0", "Insert SimpleName: SqlIntervalQualifier(675) into SimpleType: SqlIntervalQualifier(676) at 0", "Insert SimpleType: SqlIntervalQualifier(679) into VariableDeclarationStatement(686) at 0", "Insert VariableDeclarationFragment(685) into VariableDeclarationStatement(686) at 1", "Insert QualifiedName: qualifier.timeUnitRange(687) into ReturnStatement(688) at 0", "Insert SimpleName: node(696) into InstanceofExpression(699) at 0", "Insert SimpleType: SqlCall(698) into InstanceofExpression(699) at 1", "Insert SimpleName: value(701) into MethodInvocation(710) at 0", "Insert MethodInvocation(709) into MethodInvocation(710) at 1", "Insert SimpleName: node(714) into InstanceofExpression(717) at 0", "Insert SimpleType: SqlCall(716) into InstanceofExpression(717) at 1", "Insert SimpleName: Comparable(719) into SimpleType: Comparable(720) at 0", "Insert SimpleName: o(721) into VariableDeclarationFragment(732) at 0", "Insert MethodInvocation(731) into VariableDeclarationFragment(732) at 1", "Insert SimpleName: o(734) into InstanceofExpression(737) at 0", "Insert SimpleType: BigDecimal(736) into InstanceofExpression(737) at 1", "Insert VariableDeclarationStatement(746) into Block(751) at 0", "Insert ReturnStatement(750) into Block(751) at 1", "Insert SimpleName: Util(754) into MethodInvocation(759) at 0", "Insert SimpleName: newInternal(755) into MethodInvocation(759) at 1", "Insert InfixExpression: +(758) into MethodInvocation(759) at 2", "Insert SimpleName: value(768) into MethodRef(772) at 0", "Insert MethodRefParameter(771) into MethodRef(772) at 1", "Insert SimpleName: SqlLiteral(607) into SimpleType: SqlLiteral(608) at 0", "Insert SimpleName: literal(609) into VariableDeclarationFragment(614) at 0", "Insert CastExpression(613) into VariableDeclarationFragment(614) at 1", "Insert MethodInvocation(618) into MethodInvocation(620) at 0", "Insert SimpleName: getFamily(619) into MethodInvocation(620) at 1", "Insert SimpleName: CHARACTER(621) into SwitchCase(622) at 0", "Insert CastExpression(626) into ReturnStatement(627) at 0", "Insert SimpleName: NUMERIC(628) into SwitchCase(629) at 0", "Insert CastExpression(633) into ReturnStatement(634) at 0", "Insert SimpleName: node(642) into InstanceofExpression(645) at 0", "Insert SimpleType: SqlCall(644) into InstanceofExpression(645) at 1", "Insert SimpleName: SqlLiteral(648) into SimpleType: SqlLiteral(649) at 0", "Insert SimpleName: literal(650) into VariableDeclarationFragment(658) at 0", "Insert MethodInvocation(657) into VariableDeclarationFragment(658) at 1", "Insert SimpleName: SqlTypeUtil(660) into MethodInvocation(665) at 0", "Insert SimpleName: inCharFamily(661) into MethodInvocation(665) at 1", "Insert MethodInvocation(664) into MethodInvocation(665) at 2", "Insert SimpleType: NlsString(668) into CastExpression(670) at 0", "Insert QualifiedName: literal.value(669) into CastExpression(670) at 1", "Insert SimpleName: SqlIntervalQualifier(678) into SimpleType: SqlIntervalQualifier(679) at 0", "Insert SimpleName: qualifier(680) into VariableDeclarationFragment(685) at 0", "Insert CastExpression(684) into VariableDeclarationFragment(685) at 1", "Insert SimpleName: SqlCall(697) into SimpleType: SqlCall(698) at 0", "Insert ParenthesizedExpression(706) into MethodInvocation(709) at 0", "Insert SimpleName: operand(707) into MethodInvocation(709) at 1", "Insert NumberLiteral: 0(708) into MethodInvocation(709) at 2", "Insert SimpleName: SqlCall(715) into SimpleType: SqlCall(716) at 0", "Insert SimpleName: value(722) into MethodInvocation(731) at 0", "Insert MethodInvocation(730) into MethodInvocation(731) at 1", "Insert SimpleName: BigDecimal(735) into SimpleType: BigDecimal(736) at 0", "Insert SimpleType: BigDecimal(739) into VariableDeclarationStatement(746) at 0", "Insert VariableDeclarationFragment(745) into VariableDeclarationStatement(746) at 1", "Insert MethodInvocation(749) into ReturnStatement(750) at 0", "Insert StringLiteral: \"invalid literal: \"(756) into InfixExpression: +(758) at 0", "Insert SimpleName: node(757) into InfixExpression: +(758) at 1", "Insert SimpleType: SqlNode(770) into MethodRefParameter(771) at 0", "Insert SimpleType: SqlLiteral(611) into CastExpression(613) at 0", "Insert SimpleName: node(612) into CastExpression(613) at 1", "Insert SimpleName: literal(616) into MethodInvocation(618) at 0", "Insert SimpleName: getTypeName(617) into MethodInvocation(618) at 1", "Insert SimpleType: NlsString(624) into CastExpression(626) at 0", "Insert QualifiedName: literal.value(625) into CastExpression(626) at 1", "Insert SimpleType: BigDecimal(631) into CastExpression(633) at 0", "Insert QualifiedName: literal.value(632) into CastExpression(633) at 1", "Insert SimpleName: SqlCall(643) into SimpleType: SqlCall(644) at 0", "Insert SimpleName: SqlLiteralChainOperator(651) into MethodInvocation(657) at 0", "Insert SimpleName: concatenateOperands(652) into MethodInvocation(657) at 1", "Insert CastExpression(656) into MethodInvocation(657) at 2", "Insert SimpleName: literal(662) into MethodInvocation(664) at 0", "Insert SimpleName: getTypeName(663) into MethodInvocation(664) at 1", "Insert SimpleName: NlsString(667) into SimpleType: NlsString(668) at 0", "Insert SimpleType: SqlIntervalQualifier(682) into CastExpression(684) at 0", "Insert SimpleName: node(683) into CastExpression(684) at 1", "Insert CastExpression(705) into ParenthesizedExpression(706) at 0", "Insert ParenthesizedExpression(727) into MethodInvocation(730) at 0", "Insert SimpleName: operand(728) into MethodInvocation(730) at 1", "Insert NumberLiteral: 0(729) into MethodInvocation(730) at 2", "Insert SimpleName: BigDecimal(738) into SimpleType: BigDecimal(739) at 0", "Insert SimpleName: bigDecimal(740) into VariableDeclarationFragment(745) at 0", "Insert CastExpression(744) into VariableDeclarationFragment(745) at 1", "Insert SimpleName: bigDecimal(747) into MethodInvocation(749) at 0", "Insert SimpleName: negate(748) into MethodInvocation(749) at 1", "Insert SimpleName: SqlNode(769) into SimpleType: SqlNode(770) at 0", "Insert SimpleName: SqlLiteral(610) into SimpleType: SqlLiteral(611) at 0", "Insert SimpleName: NlsString(623) into SimpleType: NlsString(624) at 0", "Insert SimpleName: BigDecimal(630) into SimpleType: BigDecimal(631) at 0", "Insert SimpleType: SqlCall(654) into CastExpression(656) at 0", "Insert SimpleName: node(655) into CastExpression(656) at 1", "Insert SimpleName: SqlIntervalQualifier(681) into SimpleType: SqlIntervalQualifier(682) at 0", "Insert SimpleType: SqlCall(703) into CastExpression(705) at 0", "Insert SimpleName: node(704) into CastExpression(705) at 1", "Insert CastExpression(726) into ParenthesizedExpression(727) at 0", "Insert SimpleType: BigDecimal(742) into CastExpression(744) at 0", "Insert SimpleName: o(743) into CastExpression(744) at 1", "Insert SimpleName: SqlCall(653) into SimpleType: SqlCall(654) at 0", "Insert SimpleName: SqlCall(702) into SimpleType: SqlCall(703) at 0", "Insert SimpleType: SqlCall(724) into CastExpression(726) at 0", "Insert SimpleName: node(725) into CastExpression(726) at 1", "Insert SimpleName: BigDecimal(741) into SimpleType: BigDecimal(742) at 0", "Insert SimpleName: SqlCall(723) into SimpleType: SqlCall(724) at 0"]}}, {"SqlOperator_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 58", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: call to TagElement: @param at 0", "INS SimpleName: SqlOperatorBinding to SimpleType: SqlOperatorBinding at 0", "INS TagElement: @param to Javadoc at 1", "INS TagElement to Javadoc at 0", "INS MethodDeclaration to TypeDeclaration: class at 58", "INS SimpleName: NOT_MONOTONIC to MemberRef at 1", "INS SimpleName: getMonotonicity to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: SqlMonotonicity to MethodDeclaration at 2", "INS TagElement: @link to TagElement at 2", "INS SimpleType: SqlOperatorBinding to SingleVariableDeclaration at 0", "INS TextElement: . to TagElement at 3", "INS SimpleName: SqlMonotonicity to MemberRef at 0", "INS TextElement: <p>Default implementation returns  to TagElement at 1", "INS TextElement:  Call to this operator with particular arguments and information to TagElement: @param at 1", "INS TextElement: Returns whether a call to this operator is monotonic. to TagElement at 0", "INS SimpleName: call to SingleVariableDeclaration at 1", "INS TextElement: about the monotonicity of the arguments to TagElement: @param at 2", "INS SimpleName: SqlMonotonicity to SimpleType: SqlMonotonicity at 0", "INS MemberRef to TagElement: @link at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}, {"root": "INS Block to MethodDeclaration at 7", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: call to ClassInstanceCreation at 3", "INS ClassInstanceCreation to MethodInvocation at 1", "INS SimpleName: SqlCallBinding to SimpleType: SqlCallBinding at 0", "INS SimpleName: getMonotonicity to MethodInvocation at 0", "INS SimpleType: SqlCallBinding to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getValidator to MethodInvocation at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: scope to MethodInvocation at 0", "INS SimpleName: scope to ClassInstanceCreation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "INS TagElement: @deprecated to Javadoc at 3", "operations": ["INS MethodRefParameter to MethodRef at 1", "INS MethodRef to TagElement: @link at 0", "INS SimpleName: SqlOperatorBinding to SimpleType: SqlOperatorBinding at 0", "INS TagElement: @deprecated to Javadoc at 3", "INS SimpleType: SqlOperatorBinding to MethodRefParameter at 0", "INS SimpleName: getMonotonicity to MethodRef at 0", "INS TagElement: @link to TagElement: @deprecated at 1", "INS TextElement:  Use  to TagElement: @deprecated at 0"]}]}}, {"SqlOperator_diff": {"operations": ["Insert MethodDeclaration(1749) into TypeDeclaration: class(1802) at 58", "Insert MarkerAnnotation(1699) into MethodDeclaration(1724) at 1", "Insert Block(1723) into MethodDeclaration(1724) at 7", "Insert Javadoc(1737) into MethodDeclaration(1749) at 0", "Insert Modifier: public(1738) into MethodDeclaration(1749) at 1", "Insert SimpleType: SqlMonotonicity(1740) into MethodDeclaration(1749) at 2", "Insert SimpleName: getMonotonicity(1741) into MethodDeclaration(1749) at 3", "Insert SingleVariableDeclaration(1745) into MethodDeclaration(1749) at 4", "Move Block(1704) into MethodDeclaration(1749) at 5", "Insert TagElement: @deprecated(1696) into Javadoc(1697) at 3", "Insert SimpleName: Deprecated(1698) into MarkerAnnotation(1699) at 0", "Insert ReturnStatement(1722) into Block(1723) at 0", "Insert TagElement(1732) into Javadoc(1737) at 0", "Insert TagElement: @param(1736) into Javadoc(1737) at 1", "Insert SimpleName: SqlMonotonicity(1739) into SimpleType: SqlMonotonicity(1740) at 0", "Insert SimpleType: SqlOperatorBinding(1743) into SingleVariableDeclaration(1745) at 0", "Insert SimpleName: call(1744) into SingleVariableDeclaration(1745) at 1", "Insert TextElement:  Use (1689) into TagElement: @deprecated(1696) at 0", "Insert TagElement: @link(1695) into TagElement: @deprecated(1696) at 1", "Insert MethodInvocation(1721) into ReturnStatement(1722) at 0", "Insert TextElement: Returns whether a call to this operator is monotonic.(1725) into TagElement(1732) at 0", "Insert TextElement: <p>Default implementation returns (1726) into TagElement(1732) at 1", "Insert TagElement: @link(1730) into TagElement(1732) at 2", "Insert TextElement: .(1731) into TagElement(1732) at 3", "Insert SimpleName: call(1733) into TagElement: @param(1736) at 0", "Insert TextElement:  Call to this operator with particular arguments and information(1734) into TagElement: @param(1736) at 1", "Insert TextElement: about the monotonicity of the arguments(1735) into TagElement: @param(1736) at 2", "Insert SimpleName: SqlOperatorBinding(1742) into SimpleType: SqlOperatorBinding(1743) at 0", "Insert MethodRef(1694) into TagElement: @link(1695) at 0", "Insert SimpleName: getMonotonicity(1712) into MethodInvocation(1721) at 0", "Insert ClassInstanceCreation(1720) into MethodInvocation(1721) at 1", "Insert MemberRef(1729) into TagElement: @link(1730) at 0", "Insert SimpleName: getMonotonicity(1690) into MethodRef(1694) at 0", "Insert MethodRefParameter(1693) into MethodRef(1694) at 1", "Insert SimpleType: SqlCallBinding(1714) into ClassInstanceCreation(1720) at 0", "Insert MethodInvocation(1717) into ClassInstanceCreation(1720) at 1", "Insert SimpleName: scope(1718) into ClassInstanceCreation(1720) at 2", "Insert SimpleName: call(1719) into ClassInstanceCreation(1720) at 3", "Insert SimpleName: SqlMonotonicity(1727) into MemberRef(1729) at 0", "Insert SimpleName: NOT_MONOTONIC(1728) into MemberRef(1729) at 1", "Insert SimpleType: SqlOperatorBinding(1692) into MethodRefParameter(1693) at 0", "Insert SimpleName: SqlCallBinding(1713) into SimpleType: SqlCallBinding(1714) at 0", "Insert SimpleName: scope(1715) into MethodInvocation(1717) at 0", "Insert SimpleName: getValidator(1716) into MethodInvocation(1717) at 1", "Insert SimpleName: SqlOperatorBinding(1691) into SimpleType: SqlOperatorBinding(1692) at 0"]}}, {"SqlOperatorBinding_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS TextElement:  zero-based ordinal of operand of interest to TagElement: @param at 1", "INS TextElement: <li>If the operand is a numeric literal, to TagElement at 8", "INS TagElement to Javadoc at 0", "INS TagElement: @link to TagElement at 6", "INS TextElement:  value of operand to TagElement: @return at 0", "INS TagElement: @link to TagElement at 10", "INS TextElement: Gets the value of a literal operand. to TagElement at 0", "INS SimpleType: Comparable to MethodDeclaration at 2", "INS TagElement: @return to Javadoc at 2", "INS TextElement: the value will be of type  to TagElement at 9", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS TextElement: <li>Otherwise the type is undefined, and the value may be null. to TagElement at 16", "INS TextElement: </ul> to TagElement at 17", "INS SimpleName: Comparable to SimpleType: Comparable at 0", "INS ThrowStatement to Block at 0", "INS TextElement: <ul> to TagElement at 2", "INS TextElement: . to TagElement at 11", "INS TextElement: <li>If the operand is not a literal, the value is null. to TagElement at 3", "INS TextElement: . to TagElement at 7", "INS SimpleName: getOperandLiteralValue to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: SqlIntervalQualifier to TagElement: @link at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @link to TagElement at 14", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS TextElement: <li>If the operand is an interval qualifier, to TagElement at 12", "INS TagElement: @param to Javadoc at 1", "INS TextElement: the value will be of type  to TagElement at 13", "INS TextElement: </li> to TagElement at 15", "INS QualifiedName: org.apache.calcite.util.NlsString to TagElement: @link at 0", "INS QualifiedName: java.math.BigDecimal to TagElement: @link at 0", "INS TextElement: <li>If the operand is a string literal, to TagElement at 4", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: ordinal to TagElement: @param at 0", "INS TextElement: the value will be of type  to TagElement at 5", "INS ClassInstanceCreation to ThrowStatement at 0", "INS TextElement: <p>Cases: to TagElement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 17", "operations": ["INS SimpleName: ordinal to TagElement: @param at 0", "INS QualifiedName: SqlMonotonicity.NOT_MONOTONIC to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS TextElement:  monotonicity of operand to TagElement: @return at 0", "INS SimpleName: SqlMonotonicity to SimpleType: SqlMonotonicity at 0", "INS TextElement: Gets the monotonicity of a bound operand. to TagElement at 0", "INS SimpleType: SqlMonotonicity to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 17", "INS Modifier: public to MethodDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: ordinal to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS Javadoc to MethodDeclaration at 0", "INS TagElement: @return to Javadoc at 2", "INS TextElement:  zero-based ordinal of operand of interest to TagElement: @param at 1", "INS SimpleName: getOperandMonotonicity to MethodDeclaration at 3", "INS TagElement to Javadoc at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 5"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Deprecated to MarkerAnnotation at 0"]}]}}, {"SqlOperatorBinding_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(412) at 5", "Insert QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity(10) into ImportDeclaration(11) at 0", "Insert MethodDeclaration(208) into TypeDeclaration: class(411) at 13", "Insert MethodDeclaration(280) into TypeDeclaration: class(411) at 17", "Insert MarkerAnnotation(132) into MethodDeclaration(145) at 1", "Insert MarkerAnnotation(155) into MethodDeclaration(167) at 1", "Insert Javadoc(195) into MethodDeclaration(208) at 0", "Insert Modifier: public(196) into MethodDeclaration(208) at 1", "Insert SimpleType: Comparable(198) into MethodDeclaration(208) at 2", "Insert SimpleName: getOperandLiteralValue(199) into MethodDeclaration(208) at 3", "Insert SingleVariableDeclaration(202) into MethodDeclaration(208) at 4", "Insert Block(207) into MethodDeclaration(208) at 5", "Insert Javadoc(269) into MethodDeclaration(280) at 0", "Insert Modifier: public(270) into MethodDeclaration(280) at 1", "Insert SimpleType: SqlMonotonicity(272) into MethodDeclaration(280) at 2", "Insert SimpleName: getOperandMonotonicity(273) into MethodDeclaration(280) at 3", "Insert SingleVariableDeclaration(276) into MethodDeclaration(280) at 4", "Insert Block(279) into MethodDeclaration(280) at 5", "Insert SimpleName: Deprecated(131) into MarkerAnnotation(132) at 0", "Insert SimpleName: Deprecated(154) into MarkerAnnotation(155) at 0", "Insert TagElement(189) into Javadoc(195) at 0", "Insert TagElement: @param(192) into Javadoc(195) at 1", "Insert TagElement: @return(194) into Javadoc(195) at 2", "Insert SimpleName: Comparable(197) into SimpleType: Comparable(198) at 0", "Insert PrimitiveType: int(200) into SingleVariableDeclaration(202) at 0", "Insert SimpleName: ordinal(201) into SingleVariableDeclaration(202) at 1", "Insert ThrowStatement(206) into Block(207) at 0", "Insert TagElement(263) into Javadoc(269) at 0", "Insert TagElement: @param(266) into Javadoc(269) at 1", "Insert TagElement: @return(268) into Javadoc(269) at 2", "Insert SimpleName: SqlMonotonicity(271) into SimpleType: SqlMonotonicity(272) at 0", "Insert PrimitiveType: int(274) into SingleVariableDeclaration(276) at 0", "Insert SimpleName: ordinal(275) into SingleVariableDeclaration(276) at 1", "Insert ReturnStatement(278) into Block(279) at 0", "Insert TextElement: Gets the value of a literal operand.(168) into TagElement(189) at 0", "Insert TextElement: <p>Cases:(169) into TagElement(189) at 1", "Insert TextElement: <ul>(170) into TagElement(189) at 2", "Insert TextElement: <li>If the operand is not a literal, the value is null.(171) into TagElement(189) at 3", "Insert TextElement: <li>If the operand is a string literal,(172) into TagElement(189) at 4", "Insert TextElement: the value will be of type (173) into TagElement(189) at 5", "Insert TagElement: @link(175) into TagElement(189) at 6", "Insert TextElement: .(176) into TagElement(189) at 7", "Insert TextElement: <li>If the operand is a numeric literal,(177) into TagElement(189) at 8", "Insert TextElement: the value will be of type (178) into TagElement(189) at 9", "Insert TagElement: @link(180) into TagElement(189) at 10", "Insert TextElement: .(181) into TagElement(189) at 11", "Insert TextElement: <li>If the operand is an interval qualifier,(182) into TagElement(189) at 12", "Insert TextElement: the value will be of type (183) into TagElement(189) at 13", "Insert TagElement: @link(185) into TagElement(189) at 14", "Insert TextElement: </li>(186) into TagElement(189) at 15", "Insert TextElement: <li>Otherwise the type is undefined, and the value may be null.(187) into TagElement(189) at 16", "Insert TextElement: </ul>(188) into TagElement(189) at 17", "Insert SimpleName: ordinal(190) into TagElement: @param(192) at 0", "Insert TextElement:  zero-based ordinal of operand of interest(191) into TagElement: @param(192) at 1", "Insert TextElement:  value of operand(193) into TagElement: @return(194) at 0", "Insert ClassInstanceCreation(205) into ThrowStatement(206) at 0", "Insert TextElement: Gets the monotonicity of a bound operand.(262) into TagElement(263) at 0", "Insert SimpleName: ordinal(264) into TagElement: @param(266) at 0", "Insert TextElement:  zero-based ordinal of operand of interest(265) into TagElement: @param(266) at 1", "Insert TextElement:  monotonicity of operand(267) into TagElement: @return(268) at 0", "Insert QualifiedName: SqlMonotonicity.NOT_MONOTONIC(277) into ReturnStatement(278) at 0", "Insert QualifiedName: org.apache.calcite.util.NlsString(174) into TagElement: @link(175) at 0", "Insert QualifiedName: java.math.BigDecimal(179) into TagElement: @link(180) at 0", "Insert SimpleName: SqlIntervalQualifier(184) into TagElement: @link(185) at 0", "Insert SimpleType: UnsupportedOperationException(204) into ClassInstanceCreation(205) at 0", "Insert SimpleName: UnsupportedOperationException(203) into SimpleType: UnsupportedOperationException(204) at 0"]}}, {"SqlPrefixOperator_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: scope", "DEL SimpleName: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleType: SqlValidatorScope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getMonotonicity", "DEL MethodInvocation", "DEL SimpleName: scope"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}]}}, {"SqlPrefixOperator_diff": {"operations": ["Insert MarkerAnnotation(180) into MethodDeclaration(208) at 0", "Insert SimpleName: Override(179) into MarkerAnnotation(180) at 0", "Update SimpleType: SqlCall(186) to SqlOperatorBinding", "Update SimpleName: SqlCall(185) to SqlOperatorBinding", "Move MethodInvocation(203) into MethodInvocation(199) at 0", "Update SimpleName: operand(201) to getOperandMonotonicity", "Delete QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(16)", "Delete ImportDeclaration(17)", "Delete SimpleName: SqlValidatorScope(189)", "Delete SimpleType: SqlValidatorScope(190)", "Delete SimpleName: scope(191)", "Delete SingleVariableDeclaration(192)", "Delete SimpleName: scope(198)", "Delete SimpleName: getMonotonicity(199)", "Delete MethodInvocation(204)", "Delete SimpleName: scope(212)"]}}, {"RelMdCollation_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS ImportDeclaration to CompilationUnit at 20", "INS QualifiedName: org.apache.calcite.rex.RexCall to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS ImportDeclaration to CompilationUnit at 21", "INS QualifiedName: org.apache.calcite.rex.RexCallBinding to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 26", "operations": ["INS ImportDeclaration to CompilationUnit at 26", "INS QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity to ImportDeclaration at 0"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS IfStatement to Block at 0", "INS SimpleName: create to MethodInvocation at 1", "INS SimpleName: call to VariableDeclarationFragment at 0", "INS Block to EnhancedForStatement at 2", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS QualifiedName: project.e to InstanceofExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS QualifiedName: project.e to CastExpression at 1", "INS SimpleName: input to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: RexCall to InstanceofExpression at 1", "INS SimpleName: RexCall to SimpleType: RexCall at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: RexCall to VariableDeclarationStatement at 1", "INS SimpleName: RexCall to SimpleType: RexCall at 0", "INS SimpleType: RexCallBinding to VariableDeclarationStatement at 1", "INS SimpleName: getTypeFactory to MethodInvocation at 1", "INS SimpleName: RexCall to SimpleType: RexCall at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: binding to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: RexCallBinding to MethodInvocation at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: RexCall to CastExpression at 0", "INS SimpleName: getCluster to MethodInvocation at 1", "INS SimpleName: call to MethodInvocation at 3", "INS SimpleName: RexCallBinding to SimpleType: RexCallBinding at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "INS BooleanLiteral: false to IfStatement at 0", "operations": ["INS BooleanLiteral: false to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: call to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: monotonicity to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: SqlMonotonicity to SimpleType: SqlMonotonicity at 0", "INS SimpleType: SqlMonotonicity to VariableDeclarationStatement at 1", "INS SimpleName: getMonotonicity to MethodInvocation at 1", "INS SimpleName: binding to MethodInvocation at 2", "INS SimpleName: getOperator to MethodInvocation at 1", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"RelMdCollation_diff": {"operations": ["Insert ImportDeclaration(41) into CompilationUnit(1321) at 20", "Insert ImportDeclaration(43) into CompilationUnit(1321) at 21", "Insert ImportDeclaration(53) into CompilationUnit(1321) at 26", "Insert QualifiedName: org.apache.calcite.rex.RexCall(40) into ImportDeclaration(41) at 0", "Insert QualifiedName: org.apache.calcite.rex.RexCallBinding(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: org.apache.calcite.sql.validate.SqlMonotonicity(52) into ImportDeclaration(53) at 0", "Insert Block(673) into EnhancedForStatement(674) at 2", "Insert IfStatement(672) into Block(673) at 0", "Move InstanceofExpression(606) into IfStatement(672) at 0", "Move Block(619) into IfStatement(672) at 1", "Insert IfStatement(671) into IfStatement(672) at 2", "Insert InstanceofExpression(629) into IfStatement(671) at 0", "Insert Block(670) into IfStatement(671) at 1", "Insert QualifiedName: project.e(626) into InstanceofExpression(629) at 0", "Insert SimpleType: RexCall(628) into InstanceofExpression(629) at 1", "Insert VariableDeclarationStatement(639) into Block(670) at 0", "Insert VariableDeclarationStatement(654) into Block(670) at 1", "Move IfStatement(620) into Block(670) at 2", "Insert SimpleName: RexCall(627) into SimpleType: RexCall(628) at 0", "Insert Modifier: final(630) into VariableDeclarationStatement(639) at 0", "Insert SimpleType: RexCall(632) into VariableDeclarationStatement(639) at 1", "Insert VariableDeclarationFragment(638) into VariableDeclarationStatement(639) at 2", "Insert Modifier: final(640) into VariableDeclarationStatement(654) at 0", "Insert SimpleType: RexCallBinding(642) into VariableDeclarationStatement(654) at 1", "Insert VariableDeclarationFragment(653) into VariableDeclarationStatement(654) at 2", "Insert BooleanLiteral: false(655) into IfStatement(669) at 0", "Insert Block(668) into IfStatement(669) at 1", "Insert SimpleName: RexCall(631) into SimpleType: RexCall(632) at 0", "Insert SimpleName: call(633) into VariableDeclarationFragment(638) at 0", "Insert CastExpression(637) into VariableDeclarationFragment(638) at 1", "Insert SimpleName: RexCallBinding(641) into SimpleType: RexCallBinding(642) at 0", "Insert SimpleName: binding(643) into VariableDeclarationFragment(653) at 0", "Insert MethodInvocation(652) into VariableDeclarationFragment(653) at 1", "Insert VariableDeclarationStatement(667) into Block(668) at 0", "Insert SimpleType: RexCall(635) into CastExpression(637) at 0", "Insert QualifiedName: project.e(636) into CastExpression(637) at 1", "Insert SimpleName: RexCallBinding(644) into MethodInvocation(652) at 0", "Insert SimpleName: create(645) into MethodInvocation(652) at 1", "Insert MethodInvocation(650) into MethodInvocation(652) at 2", "Insert SimpleName: call(651) into MethodInvocation(652) at 3", "Insert Modifier: final(656) into VariableDeclarationStatement(667) at 0", "Insert SimpleType: SqlMonotonicity(658) into VariableDeclarationStatement(667) at 1", "Insert VariableDeclarationFragment(666) into VariableDeclarationStatement(667) at 2", "Insert SimpleName: RexCall(634) into SimpleType: RexCall(635) at 0", "Insert MethodInvocation(648) into MethodInvocation(650) at 0", "Insert SimpleName: getTypeFactory(649) into MethodInvocation(650) at 1", "Insert SimpleName: SqlMonotonicity(657) into SimpleType: SqlMonotonicity(658) at 0", "Insert SimpleName: monotonicity(659) into VariableDeclarationFragment(666) at 0", "Insert MethodInvocation(665) into VariableDeclarationFragment(666) at 1", "Insert SimpleName: input(646) into MethodInvocation(648) at 0", "Insert SimpleName: getCluster(647) into MethodInvocation(648) at 1", "Insert MethodInvocation(662) into MethodInvocation(665) at 0", "Insert SimpleName: getMonotonicity(663) into MethodInvocation(665) at 1", "Insert SimpleName: binding(664) into MethodInvocation(665) at 2", "Insert SimpleName: call(660) into MethodInvocation(662) at 0", "Insert SimpleName: getOperator(661) into MethodInvocation(662) at 1", "Delete Block(621)"]}}, {"SqlAbstractTimeFunction_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.calcite.sql.SqlCall"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope", "DEL ImportDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleName: SqlValidatorScope", "DEL SimpleName: scope"]}]}}, {"SqlAbstractTimeFunction_diff": {"operations": ["Insert MarkerAnnotation(162) into MethodDeclaration(174) at 0", "Insert SimpleName: Override(161) into MarkerAnnotation(162) at 0", "Update SimpleType: SqlCall(170) to SqlOperatorBinding", "Update SimpleName: SqlCall(169) to SqlOperatorBinding", "Delete QualifiedName: org.apache.calcite.sql.SqlCall(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(26)", "Delete ImportDeclaration(27)", "Delete SimpleName: SqlValidatorScope(173)", "Delete SimpleType: SqlValidatorScope(174)", "Delete SimpleName: scope(175)", "Delete SingleVariableDeclaration(176)"]}}, {"SqlCastFunction_cluster": {"actions": [{"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: RelDataTypeFamily to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: RelDataTypeFamily to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0"]}, {"root": "UPDATE from operand to getOperandType", "operations": ["UPD SimpleName: operand from operand to getOperandType", "UPD SimpleName: operand from operand to getOperandType"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV NumberLiteral: 0 to MethodInvocation at 2", "MOV SimpleName: call to MethodInvocation at 0", "MOV SimpleName: operand to MethodInvocation at 1"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope", "DEL ImportDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleName: scope", "DEL SimpleType: SqlValidatorScope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: scope", "DEL SimpleName: deriveType", "DEL MethodInvocation", "DEL SimpleName: getValidator", "DEL SimpleName: scope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: scope", "DEL SimpleName: deriveType", "DEL SimpleName: scope", "DEL MethodInvocation", "DEL SimpleName: getValidator", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getMonotonicity", "DEL SimpleName: scope", "DEL MethodInvocation"]}]}}, {"SqlCastFunction_diff": {"operations": ["Update SimpleType: SqlCall(599) to SqlOperatorBinding", "Update SimpleName: SqlCall(598) to SqlOperatorBinding", "Move SimpleType: RelDataTypeFamily(624) into VariableDeclarationStatement(610) at 0", "Move SimpleType: RelDataTypeFamily(607) into VariableDeclarationStatement(621) at 0", "Move MethodInvocation(617) into MethodInvocation(608) at 0", "Move MethodInvocation(634) into MethodInvocation(619) at 0", "Insert MethodInvocation(629) into ReturnStatement(630) at 0", "Update SimpleName: operand(615) to getOperandType", "Update SimpleName: operand(632) to getOperandType", "Move SimpleName: call(644) into MethodInvocation(629) at 0", "Update SimpleName: operand(645) to getOperandMonotonicity", "Move SimpleName: operand(645) into MethodInvocation(629) at 1", "Move NumberLiteral: 0(646) into MethodInvocation(629) at 2", "Delete QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(44)", "Delete ImportDeclaration(45)", "Delete SimpleName: SqlValidatorScope(602)", "Delete SimpleType: SqlValidatorScope(603)", "Delete SimpleName: scope(604)", "Delete SingleVariableDeclaration(605)", "Delete SimpleName: scope(609)", "Delete SimpleName: getValidator(610)", "Delete MethodInvocation(611)", "Delete SimpleName: deriveType(612)", "Delete SimpleName: scope(613)", "Delete MethodInvocation(618)", "Delete SimpleName: scope(626)", "Delete SimpleName: getValidator(627)", "Delete MethodInvocation(628)", "Delete SimpleName: deriveType(629)", "Delete SimpleName: scope(630)", "Delete MethodInvocation(635)", "Delete MethodInvocation(647)", "Delete SimpleName: getMonotonicity(648)", "Delete SimpleName: scope(649)", "Delete MethodInvocation(650)"]}}, {"SqlCurrentDateFunction_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlCall from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope", "DEL ImportDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleType: SqlValidatorScope", "DEL SimpleName: scope"]}]}}, {"SqlCurrentDateFunction_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(66) at 5", "Update QualifiedName: org.apache.calcite.sql.SqlCall(2) to org.apache.calcite.sql.SqlOperatorBinding", "Insert MarkerAnnotation(45) into MethodDeclaration(57) at 0", "Insert SimpleName: Override(44) into MarkerAnnotation(45) at 0", "Update SimpleType: SqlCall(51) to SqlOperatorBinding", "Update SimpleName: SqlCall(50) to SqlOperatorBinding", "Delete QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: SqlValidatorScope(54)", "Delete SimpleType: SqlValidatorScope(55)", "Delete SimpleName: scope(56)", "Delete SingleVariableDeclaration(57)"]}}, {"SqlDatetimeSubtractionOperator_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from org.apache.calcite.sql.validate.SqlValidatorScope to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope from org.apache.calcite.sql.validate.SqlValidatorScope to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: SqlValidatorScope", "DEL SimpleName: scope", "DEL SimpleName: SqlValidatorScope", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}]}}, {"SqlDatetimeSubtractionOperator_diff": {"operations": ["Move ImportDeclaration(21) into CompilationUnit(142) at 3", "Update QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(20) to org.apache.calcite.sql.SqlOperatorBinding", "Insert MarkerAnnotation(125) into MethodDeclaration(140) at 0", "Insert SimpleName: Override(124) into MarkerAnnotation(125) at 0", "Update SimpleType: SqlCall(129) to SqlOperatorBinding", "Update SimpleName: SqlCall(128) to SqlOperatorBinding", "Delete SimpleName: SqlValidatorScope(132)", "Delete SimpleType: SqlValidatorScope(133)", "Delete SimpleName: scope(134)", "Delete SingleVariableDeclaration(135)", "Delete SimpleName: scope(139)"]}}, {"SqlExtractFunction_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from org.apache.calcite.sql.SqlIntervalQualifier to org.apache.calcite.avatica.util.TimeUnitRange", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlIntervalQualifier from org.apache.calcite.sql.SqlIntervalQualifier to org.apache.calcite.avatica.util.TimeUnitRange"]}, {"root": "UPDATE from org.apache.calcite.sql.validate.SqlValidatorScope to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope from org.apache.calcite.sql.validate.SqlValidatorScope to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "INS SwitchStatement to Block at 0", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SwitchStatement to Block at 0", "INS CastExpression to SwitchStatement at 0", "INS SimpleType: TimeUnitRange to CastExpression at 0"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 1", "MOV ReturnStatement to SwitchStatement at 2", "MOV ReturnStatement to SwitchStatement at 4", "MOV SwitchCase to SwitchStatement at 3"]}, {"root": "UPDATE from SqlIntervalQualifier to TimeUnitRange", "operations": ["UPD SimpleName: SqlIntervalQualifier from SqlIntervalQualifier to TimeUnitRange"]}, {"root": "MOVE from SimpleType: TimeUnitRange", "operations": ["MOV SimpleName: SqlIntervalQualifier to SimpleType: TimeUnitRange at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: call to MethodInvocation at 0", "MOV SimpleName: operand to MethodInvocation at 1", "MOV NumberLiteral: 0 to MethodInvocation at 2"]}, {"root": "UPDATE from operand to getOperandLiteralValue", "operations": ["UPD SimpleName: operand from operand to getOperandLiteralValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: SqlValidatorScope", "DEL SimpleType: SqlValidatorScope", "DEL SimpleName: scope", "DEL SingleVariableDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getMonotonicity", "DEL SimpleName: scope"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleType: SqlIntervalQualifier", "DEL SimpleName: o", "DEL Modifier: final", "DEL MethodInvocation", "DEL VariableDeclarationFragment"]}, {"root": "DEL SwitchStatement", "operations": ["DEL QualifiedName: o.timeUnitRange", "DEL SwitchStatement"]}]}}, {"SqlExtractFunction_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(154) at 1", "Move ImportDeclaration(21) into CompilationUnit(154) at 6", "Update QualifiedName: org.apache.calcite.sql.SqlIntervalQualifier(8) to org.apache.calcite.avatica.util.TimeUnitRange", "Update QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(20) to org.apache.calcite.sql.SqlOperatorBinding", "Update SimpleType: SqlCall(128) to SqlOperatorBinding", "Insert SwitchStatement(150) into Block(151) at 0", "Update SimpleName: SqlCall(127) to SqlOperatorBinding", "Insert CastExpression(137) into SwitchStatement(150) at 0", "Move SwitchCase(147) into SwitchStatement(150) at 1", "Move ReturnStatement(157) into SwitchStatement(150) at 2", "Move SwitchCase(158) into SwitchStatement(150) at 3", "Move ReturnStatement(160) into SwitchStatement(150) at 4", "Insert SimpleType: TimeUnitRange(132) into CastExpression(137) at 0", "Insert MethodInvocation(136) into CastExpression(137) at 1", "Update SimpleName: SqlIntervalQualifier(136) to TimeUnitRange", "Move SimpleName: SqlIntervalQualifier(136) into SimpleType: TimeUnitRange(132) at 0", "Move SimpleName: call(139) into MethodInvocation(136) at 0", "Update SimpleName: operand(140) to getOperandLiteralValue", "Move SimpleName: operand(140) into MethodInvocation(136) at 1", "Move NumberLiteral: 0(141) into MethodInvocation(136) at 2", "Move MethodInvocation(153) into MethodInvocation(145) at 0", "Update SimpleName: operand(151) to getOperandMonotonicity", "Delete SimpleName: SqlValidatorScope(131)", "Delete SimpleType: SqlValidatorScope(132)", "Delete SimpleName: scope(133)", "Delete SingleVariableDeclaration(134)", "Delete SimpleName: scope(148)", "Delete SimpleName: getMonotonicity(149)", "Delete MethodInvocation(154)", "Delete Modifier: final(135)", "Delete SimpleType: SqlIntervalQualifier(137)", "Delete SimpleName: o(138)", "Delete MethodInvocation(142)", "Delete VariableDeclarationFragment(143)", "Delete VariableDeclarationStatement(144)", "Delete QualifiedName: o.timeUnitRange(145)", "Delete SwitchStatement(161)"]}}, {"SqlFloorFunction_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from org.apache.calcite.sql.validate.SqlValidatorScope to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope from org.apache.calcite.sql.validate.SqlValidatorScope to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: scope", "DEL SimpleType: SqlValidatorScope", "DEL SimpleName: SqlValidatorScope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getMonotonicity", "DEL SimpleName: scope", "DEL MethodInvocation"]}]}}, {"SqlFloorFunction_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(173) at 4", "Update QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(16) to org.apache.calcite.sql.SqlOperatorBinding", "Insert MarkerAnnotation(74) into MethodDeclaration(91) at 0", "Insert SimpleName: Override(73) into MarkerAnnotation(74) at 0", "Update SimpleType: SqlCall(78) to SqlOperatorBinding", "Update SimpleName: SqlCall(77) to SqlOperatorBinding", "Move MethodInvocation(90) into MethodInvocation(88) at 0", "Update SimpleName: operand(88) to getOperandMonotonicity", "Delete SimpleName: SqlValidatorScope(81)", "Delete SimpleType: SqlValidatorScope(82)", "Delete SimpleName: scope(83)", "Delete SingleVariableDeclaration(84)", "Delete SimpleName: scope(85)", "Delete SimpleName: getMonotonicity(86)", "Delete MethodInvocation(91)"]}}, {"SqlMonotonicBinaryOperator_cluster": {"actions": [{"root": "UPDATE from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlIntervalLiteral", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlCall from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlIntervalLiteral"]}, {"root": "UPDATE from org.apache.calcite.sql.SqlLiteral to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlLiteral from org.apache.calcite.sql.SqlLiteral to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "UPDATE from org.apache.calcite.sql.validate.SqlValidatorScope to java.math.BigDecimal", "operations": ["UPD QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope from org.apache.calcite.sql.validate.SqlValidatorScope to java.math.BigDecimal"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS CastExpression to ParenthesizedExpression at 0", "INS IfStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS QualifiedName: SqlIntervalLiteral.IntervalValue to SimpleType: SqlIntervalLiteral.IntervalValue at 0", "INS Block to IfStatement at 2", "INS SimpleName: signum to MethodInvocation at 1", "INS SimpleType: BigDecimal to CastExpression at 0", "INS QualifiedName: SqlIntervalLiteral.IntervalValue to SimpleType: SqlIntervalLiteral.IntervalValue at 0", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: getSign to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS PrimitiveType: int to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: o to InstanceofExpression at 0", "INS SimpleName: o to CastExpression at 1", "INS NumberLiteral: 1 to ReturnStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: o to CastExpression at 1", "INS Block to IfStatement at 1", "INS ParenthesizedExpression to MethodInvocation at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: SqlIntervalLiteral.IntervalValue to CastExpression at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: o to InstanceofExpression at 0", "INS SimpleName: signum to MethodDeclaration at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: SqlIntervalLiteral.IntervalValue to InstanceofExpression at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: BigDecimal to SimpleType: BigDecimal at 0", "INS SimpleName: o to SingleVariableDeclaration at 1", "INS IfStatement to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS SimpleType: BigDecimal to InstanceofExpression at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV SwitchStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationStatement to Block at 3", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: v0 to VariableDeclarationFragment at 0", "INS SimpleType: Object to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS IfStatement to Block at 4", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS SimpleName: v0 to InfixExpression: != at 0", "INS IfStatement to Block at 4", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: call to MethodInvocation at 0", "MOV NumberLiteral: 0 to MethodInvocation at 2", "MOV SimpleName: operand to MethodInvocation at 1"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity", "UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: operand to MethodInvocation at 1", "MOV SimpleName: call to MethodInvocation at 0", "MOV NumberLiteral: 1 to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to SwitchStatement at 0", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: signum to MethodInvocation at 0", "INS MethodInvocation to SwitchStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from literal to call", "operations": ["UPD SimpleName: literal from literal to call"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: literal to MethodInvocation at 0", "MOV SimpleName: signum to MethodInvocation at 1"]}, {"root": "UPDATE from operand to getOperandLiteralValue", "operations": ["UPD SimpleName: operand from operand to getOperandLiteralValue", "UPD SimpleName: signum from signum to getOperandLiteralValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: call to MethodInvocation at 0", "MOV NumberLiteral: 0 to MethodInvocation at 2", "MOV SimpleName: operand to MethodInvocation at 1"]}, {"root": "INS SimpleName: v0 to MethodInvocation at 2", "operations": ["INS SimpleName: v0 to MethodInvocation at 2"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleName: scope", "DEL SimpleName: SqlValidatorScope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getMonotonicity", "DEL SimpleName: scope", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: scope", "DEL SimpleName: getMonotonicity", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: call", "DEL SimpleName: SqlLiteral", "DEL InstanceofExpression", "DEL SimpleType: SqlLiteral", "DEL SimpleName: SqlLiteral", "DEL NumberLiteral: 1", "DEL SimpleName: literal", "DEL SimpleName: operand", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: call", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: SqlLiteral", "DEL VariableDeclarationStatement", "DEL SimpleName: operand", "DEL IfStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: mono0", "DEL ReturnStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: operand", "DEL SimpleName: call", "DEL SimpleName: literal", "DEL SimpleName: SqlLiteral", "DEL SimpleType: SqlLiteral", "DEL NumberLiteral: 0"]}, {"root": "DEL SimpleName: literal", "operations": ["DEL SimpleName: literal"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: SqlLiteral", "DEL InstanceofExpression", "DEL SimpleType: SqlLiteral", "DEL MethodInvocation", "DEL IfStatement"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}]}}, {"SqlMonotonicBinaryOperator_diff": {"operations": ["Update QualifiedName: org.apache.calcite.sql.SqlCall(4) to org.apache.calcite.sql.SqlIntervalLiteral", "Update QualifiedName: org.apache.calcite.sql.SqlLiteral(8) to org.apache.calcite.sql.SqlOperatorBinding", "Update QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(18) to java.math.BigDecimal", "Insert MethodDeclaration(339) into TypeDeclaration: class(340) at 6", "Insert MarkerAnnotation(68) into MethodDeclaration(299) at 0", "Insert Modifier: private(300) into MethodDeclaration(339) at 0", "Insert PrimitiveType: int(301) into MethodDeclaration(339) at 1", "Insert SimpleName: signum(302) into MethodDeclaration(339) at 2", "Insert SingleVariableDeclaration(306) into MethodDeclaration(339) at 3", "Insert Block(338) into MethodDeclaration(339) at 4", "Insert SimpleName: Override(67) into MarkerAnnotation(68) at 0", "Update SimpleType: SqlCall(72) to SqlOperatorBinding", "Insert SimpleType: Object(304) into SingleVariableDeclaration(306) at 0", "Insert SimpleName: o(305) into SingleVariableDeclaration(306) at 1", "Insert IfStatement(337) into Block(338) at 0", "Update SimpleName: SqlCall(71) to SqlOperatorBinding", "Insert SimpleName: Object(303) into SimpleType: Object(304) at 0", "Insert InstanceofExpression(310) into IfStatement(337) at 0", "Insert Block(319) into IfStatement(337) at 1", "Insert IfStatement(336) into IfStatement(337) at 2", "Insert MethodInvocation(84) into VariableDeclarationFragment(85) at 1", "Insert MethodInvocation(94) into VariableDeclarationFragment(95) at 1", "Move SwitchStatement(175) into Block(155) at 2", "Insert VariableDeclarationStatement(195) into Block(219) at 3", "Insert IfStatement(218) into Block(219) at 4", "Insert SimpleName: o(307) into InstanceofExpression(310) at 0", "Insert SimpleType: BigDecimal(309) into InstanceofExpression(310) at 1", "Insert ReturnStatement(318) into Block(319) at 0", "Insert InstanceofExpression(323) into IfStatement(336) at 0", "Insert Block(332) into IfStatement(336) at 1", "Insert Block(335) into IfStatement(336) at 2", "Move SimpleName: call(85) into MethodInvocation(84) at 0", "Update SimpleName: operand(86) to getOperandMonotonicity", "Move SimpleName: operand(86) into MethodInvocation(84) at 1", "Move NumberLiteral: 0(87) into MethodInvocation(84) at 2", "Move SimpleName: call(98) into MethodInvocation(94) at 0", "Update SimpleName: operand(99) to getOperandMonotonicity", "Move SimpleName: operand(99) into MethodInvocation(94) at 1", "Move NumberLiteral: 1(100) into MethodInvocation(94) at 2", "Insert MethodInvocation(139) into SwitchStatement(154) at 0", "Insert Modifier: final(186) into VariableDeclarationStatement(195) at 0", "Insert SimpleType: Object(188) into VariableDeclarationStatement(195) at 1", "Insert VariableDeclarationFragment(194) into VariableDeclarationStatement(195) at 2", "Insert InfixExpression: !=(198) into IfStatement(218) at 0", "Move Block(245) into IfStatement(218) at 1", "Insert SimpleName: BigDecimal(308) into SimpleType: BigDecimal(309) at 0", "Insert MethodInvocation(317) into ReturnStatement(318) at 0", "Insert SimpleName: o(320) into InstanceofExpression(323) at 0", "Insert SimpleType: SqlIntervalLiteral.IntervalValue(322) into InstanceofExpression(323) at 1", "Insert ReturnStatement(331) into Block(332) at 0", "Insert ReturnStatement(334) into Block(335) at 0", "Insert SimpleName: signum(134) into MethodInvocation(139) at 0", "Insert MethodInvocation(138) into MethodInvocation(139) at 1", "Insert SimpleName: Object(187) into SimpleType: Object(188) at 0", "Insert SimpleName: v0(189) into VariableDeclarationFragment(194) at 0", "Insert MethodInvocation(193) into VariableDeclarationFragment(194) at 1", "Insert SimpleName: v0(196) into InfixExpression: !=(198) at 0", "Insert NullLiteral(197) into InfixExpression: !=(198) at 1", "Insert ParenthesizedExpression(315) into MethodInvocation(317) at 0", "Insert SimpleName: signum(316) into MethodInvocation(317) at 1", "Insert QualifiedName: SqlIntervalLiteral.IntervalValue(321) into SimpleType: SqlIntervalLiteral.IntervalValue(322) at 0", "Insert MethodInvocation(330) into ReturnStatement(331) at 0", "Insert NumberLiteral: 1(333) into ReturnStatement(334) at 0", "Update SimpleName: literal(158) to call", "Move SimpleName: literal(158) into MethodInvocation(138) at 0", "Update SimpleName: signum(159) to getOperandLiteralValue", "Move SimpleName: signum(159) into MethodInvocation(138) at 1", "Insert NumberLiteral: 1(137) into MethodInvocation(138) at 2", "Move SimpleName: call(211) into MethodInvocation(193) at 0", "Update SimpleName: operand(212) to getOperandLiteralValue", "Move SimpleName: operand(212) into MethodInvocation(193) at 1", "Move NumberLiteral: 0(213) into MethodInvocation(193) at 2", "Insert CastExpression(314) into ParenthesizedExpression(315) at 0", "Insert ParenthesizedExpression(328) into MethodInvocation(330) at 0", "Insert SimpleName: getSign(329) into MethodInvocation(330) at 1", "Insert SimpleName: v0(200) into MethodInvocation(201) at 1", "Insert SimpleType: BigDecimal(312) into CastExpression(314) at 0", "Insert SimpleName: o(313) into CastExpression(314) at 1", "Insert CastExpression(327) into ParenthesizedExpression(328) at 0", "Insert SimpleName: BigDecimal(311) into SimpleType: BigDecimal(312) at 0", "Insert SimpleType: SqlIntervalLiteral.IntervalValue(325) into CastExpression(327) at 0", "Insert SimpleName: o(326) into CastExpression(327) at 1", "Insert QualifiedName: SqlIntervalLiteral.IntervalValue(324) into SimpleType: SqlIntervalLiteral.IntervalValue(325) at 0", "Delete SimpleName: SqlValidatorScope(75)", "Delete SimpleType: SqlValidatorScope(76)", "Delete SimpleName: scope(77)", "Delete SingleVariableDeclaration(78)", "Delete SimpleName: scope(83)", "Delete SimpleName: getMonotonicity(84)", "Delete MethodInvocation(88)", "Delete MethodInvocation(89)", "Delete SimpleName: scope(96)", "Delete SimpleName: getMonotonicity(97)", "Delete MethodInvocation(101)", "Delete MethodInvocation(102)", "Delete MethodInvocation(160)", "Delete SimpleName: call(142)", "Delete SimpleName: operand(143)", "Delete NumberLiteral: 1(144)", "Delete MethodInvocation(145)", "Delete SimpleName: SqlLiteral(146)", "Delete SimpleType: SqlLiteral(147)", "Delete InstanceofExpression(148)", "Delete SimpleName: SqlLiteral(149)", "Delete SimpleType: SqlLiteral(150)", "Delete SimpleName: literal(151)", "Delete SimpleName: call(152)", "Delete SimpleName: operand(153)", "Delete NumberLiteral: 1(154)", "Delete MethodInvocation(155)", "Delete VariableDeclarationFragment(156)", "Delete VariableDeclarationStatement(157)", "Delete Block(176)", "Delete IfStatement(177)", "Delete SimpleName: mono0(178)", "Delete ReturnStatement(179)", "Delete SimpleName: SqlLiteral(218)", "Delete SimpleType: SqlLiteral(219)", "Delete SimpleName: literal(220)", "Delete SimpleName: call(221)", "Delete SimpleName: operand(222)", "Delete NumberLiteral: 0(223)", "Delete MethodInvocation(224)", "Delete VariableDeclarationFragment(225)", "Delete VariableDeclarationStatement(226)", "Delete SimpleName: literal(227)", "Delete MethodInvocation(214)", "Delete SimpleName: SqlLiteral(215)", "Delete SimpleType: SqlLiteral(216)", "Delete InstanceofExpression(217)", "Delete IfStatement(246)", "Delete SimpleName: scope(324)"]}}, {"SqlMonotonicUnaryFunction_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlCall from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from operand to getOperandMonotonicity", "operations": ["UPD SimpleName: operand from operand to getOperandMonotonicity"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: SqlValidatorScope", "DEL SingleVariableDeclaration", "DEL SimpleType: SqlValidatorScope", "DEL SimpleName: scope"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: scope", "DEL SimpleName: getMonotonicity", "DEL MethodInvocation"]}]}}, {"SqlMonotonicUnaryFunction_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(81) at 5", "Update QualifiedName: org.apache.calcite.sql.SqlCall(2) to org.apache.calcite.sql.SqlOperatorBinding", "Insert MarkerAnnotation(62) into MethodDeclaration(79) at 0", "Insert SimpleName: Override(61) into MarkerAnnotation(62) at 0", "Update SimpleType: SqlCall(68) to SqlOperatorBinding", "Update SimpleName: SqlCall(67) to SqlOperatorBinding", "Move MethodInvocation(80) into MethodInvocation(76) at 0", "Update SimpleName: operand(78) to getOperandMonotonicity", "Delete QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: SqlValidatorScope(71)", "Delete SimpleType: SqlValidatorScope(72)", "Delete SimpleName: scope(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: scope(75)", "Delete SimpleName: getMonotonicity(76)", "Delete MethodInvocation(81)"]}}, {"SqlStringContextVariable_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlCall from org.apache.calcite.sql.SqlCall to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope", "DEL ImportDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: scope", "DEL SimpleName: SqlValidatorScope", "DEL SimpleType: SqlValidatorScope", "DEL SingleVariableDeclaration"]}]}}, {"SqlStringContextVariable_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(70) at 5", "Update QualifiedName: org.apache.calcite.sql.SqlCall(2) to org.apache.calcite.sql.SqlOperatorBinding", "Insert MarkerAnnotation(49) into MethodDeclaration(61) at 0", "Insert SimpleName: Override(48) into MarkerAnnotation(49) at 0", "Update SimpleType: SqlCall(55) to SqlOperatorBinding", "Update SimpleName: SqlCall(54) to SqlOperatorBinding", "Delete QualifiedName: org.apache.calcite.sql.validate.SqlValidatorScope(18)", "Delete ImportDeclaration(19)", "Delete SimpleName: SqlValidatorScope(58)", "Delete SimpleType: SqlValidatorScope(59)", "Delete SimpleName: scope(60)", "Delete SingleVariableDeclaration(61)"]}}, {"SqlSubstringFunction_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 11"]}, {"root": "UPDATE from org.apache.calcite.sql.SqlLiteral to org.apache.calcite.sql.SqlOperatorBinding", "operations": ["UPD QualifiedName: org.apache.calcite.sql.SqlLiteral from org.apache.calcite.sql.SqlLiteral to org.apache.calcite.sql.SqlOperatorBinding"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from SqlCall to SqlOperatorBinding", "operations": ["UPD SimpleType: SqlCall from SqlCall to SqlOperatorBinding", "UPD SimpleName: SqlCall from SqlCall to SqlOperatorBinding"]}, {"root": "UPDATE from op1 to call", "operations": ["UPD SimpleName: op1 from op1 to call", "UPD SimpleName: op2 from op2 to call", "UPD SimpleName: operands from operands to call", "UPD SimpleName: operands from operands to call"]}, {"root": "UPDATE from size to getOperandCount", "operations": ["UPD SimpleName: size from size to getOperandCount"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SqlMonotonicity to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from op0 to mono0", "operations": ["UPD SimpleName: op0 from op0 to mono0"]}, {"root": "UPDATE from getMonotonicity to getOperandMonotonicity", "operations": ["UPD SimpleName: getMonotonicity from getMonotonicity to getOperandMonotonicity", "UPD SimpleName: getMonotonicity from getMonotonicity to getOperandMonotonicity", "UPD SimpleName: get from get to getOperandMonotonicity"]}, {"root": "INS NumberLiteral: 2 to MethodInvocation at 2", "operations": ["INS NumberLiteral: 2 to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to InstanceofExpression at 0", "operations": ["INS SimpleName: call to MethodInvocation at 0", "INS SimpleName: getOperandLiteralValue to MethodInvocation at 1", "INS NumberLiteral: 1 to MethodInvocation at 2", "INS MethodInvocation to InstanceofExpression at 0"]}, {"root": "UPDATE from SqlLiteral to BigDecimal", "operations": ["UPD SimpleType: SqlLiteral from SqlLiteral to BigDecimal", "UPD SimpleName: SqlLiteral from SqlLiteral to BigDecimal"]}, {"root": "INS SimpleName: call to MethodInvocation at 0", "operations": ["INS SimpleName: call to MethodInvocation at 0"]}, {"root": "UPDATE from bigDecimalValue to getOperandLiteralValue", "operations": ["UPD SimpleName: bigDecimalValue from bigDecimalValue to getOperandLiteralValue"]}, {"root": "INS NumberLiteral: 1 to MethodInvocation at 3", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 3"]}, {"root": "INS NumberLiteral: 1 to MethodInvocation at 2", "operations": ["INS NumberLiteral: 1 to MethodInvocation at 2"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: scope", "DEL SimpleName: SqlValidatorScope", "DEL SimpleType: SqlValidatorScope"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: SqlNode", "DEL Modifier: final", "DEL SimpleType: List", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: getOperandList", "DEL SimpleName: operands", "DEL ParameterizedType: List<SqlNode>", "DEL SimpleName: SqlNode", "DEL SimpleName: call", "DEL VariableDeclarationFragment", "DEL SimpleName: List"]}, {"root": "DEL SimpleType: SqlNode", "operations": ["DEL SimpleType: SqlNode", "DEL SimpleName: SqlNode"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL Modifier: final", "DEL NumberLiteral: 1", "DEL VariableDeclarationFragment", "DEL SimpleName: operands", "DEL SimpleName: get", "DEL VariableDeclarationStatement", "DEL SimpleType: SqlNode", "DEL SimpleName: SqlNode", "DEL SimpleName: op1", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: SqlNode", "DEL SimpleName: op2", "DEL MethodInvocation", "DEL NumberLiteral: 2", "DEL SimpleName: operands", "DEL SimpleType: SqlNode", "DEL SimpleName: get"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL SimpleName: mono0", "DEL MethodInvocation", "DEL SimpleName: scope", "DEL VariableDeclarationFragment", "DEL SimpleName: op0", "DEL SimpleName: getMonotonicity"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}, {"root": "DEL SimpleName: op1", "operations": ["DEL SimpleName: op1"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression", "DEL SimpleType: SqlLiteral", "DEL SimpleName: op1", "DEL SimpleName: SqlLiteral", "DEL CastExpression"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}, {"root": "DEL SimpleName: scope", "operations": ["DEL SimpleName: scope"]}]}}, {"SqlSubstringFunction_diff": {"operations": ["Move ImportDeclaration(17) into CompilationUnit(564) at 11", "Update QualifiedName: org.apache.calcite.sql.SqlLiteral(16) to org.apache.calcite.sql.SqlOperatorBinding", "Insert MarkerAnnotation(491) into MethodDeclaration(562) at 0", "Insert SimpleName: Override(490) into MarkerAnnotation(491) at 0", "Update SimpleType: SqlCall(495) to SqlOperatorBinding", "Update SimpleName: SqlCall(494) to SqlOperatorBinding", "Update SimpleName: operands(514) to call", "Update SimpleName: size(515) to getOperandCount", "Move SimpleType: SqlMonotonicity(551) into VariableDeclarationStatement(514) at 1", "Update SimpleName: op0(522) to mono0", "Update SimpleName: operands(523) to call", "Update SimpleName: get(524) to getOperandMonotonicity", "Update SimpleName: op2(586) to call", "Update SimpleName: getMonotonicity(587) to getOperandMonotonicity", "Insert NumberLiteral: 2(544) into MethodInvocation(545) at 2", "Insert MethodInvocation(529) into InstanceofExpression(532) at 0", "Update SimpleType: SqlLiteral(572) to BigDecimal", "Insert SimpleName: call(534) into MethodInvocation(537) at 0", "Update SimpleName: bigDecimalValue(580) to getOperandLiteralValue", "Insert NumberLiteral: 1(536) into MethodInvocation(537) at 2", "Insert SimpleName: call(526) into MethodInvocation(529) at 0", "Insert SimpleName: getOperandLiteralValue(527) into MethodInvocation(529) at 1", "Insert NumberLiteral: 1(528) into MethodInvocation(529) at 2", "Update SimpleName: SqlLiteral(571) to BigDecimal", "Update SimpleName: op1(563) to call", "Update SimpleName: getMonotonicity(564) to getOperandMonotonicity", "Insert NumberLiteral: 1(521) into MethodInvocation(522) at 2", "Delete SimpleName: SqlValidatorScope(498)", "Delete SimpleType: SqlValidatorScope(499)", "Delete SimpleName: scope(500)", "Delete SingleVariableDeclaration(501)", "Delete Modifier: final(502)", "Delete SimpleName: List(503)", "Delete SimpleType: List(504)", "Delete SimpleName: SqlNode(505)", "Delete SimpleType: SqlNode(506)", "Delete ParameterizedType: List<SqlNode>(507)", "Delete SimpleName: operands(508)", "Delete SimpleName: call(509)", "Delete SimpleName: getOperandList(510)", "Delete MethodInvocation(511)", "Delete VariableDeclarationFragment(512)", "Delete VariableDeclarationStatement(513)", "Delete SimpleName: SqlNode(520)", "Delete SimpleType: SqlNode(521)", "Delete Modifier: final(529)", "Delete SimpleName: SqlNode(530)", "Delete SimpleType: SqlNode(531)", "Delete SimpleName: op1(532)", "Delete SimpleName: operands(533)", "Delete SimpleName: get(534)", "Delete NumberLiteral: 1(535)", "Delete MethodInvocation(536)", "Delete VariableDeclarationFragment(537)", "Delete VariableDeclarationStatement(538)", "Delete Modifier: final(539)", "Delete SimpleName: SqlNode(540)", "Delete SimpleType: SqlNode(541)", "Delete SimpleName: op2(542)", "Delete SimpleName: operands(543)", "Delete SimpleName: get(544)", "Delete NumberLiteral: 2(545)", "Delete MethodInvocation(546)", "Delete VariableDeclarationFragment(547)", "Delete VariableDeclarationStatement(548)", "Delete Modifier: final(549)", "Delete SimpleName: mono0(552)", "Delete SimpleName: op0(553)", "Delete SimpleName: getMonotonicity(554)", "Delete SimpleName: scope(555)", "Delete MethodInvocation(556)", "Delete VariableDeclarationFragment(557)", "Delete VariableDeclarationStatement(558)", "Delete SimpleName: scope(565)", "Delete SimpleName: op1(570)", "Delete SimpleName: SqlLiteral(575)", "Delete SimpleType: SqlLiteral(576)", "Delete SimpleName: op1(577)", "Delete CastExpression(578)", "Delete ParenthesizedExpression(579)", "Delete SimpleName: scope(588)", "Delete SimpleName: scope(603)"]}}], "commit_stats": [{"total_files": 21, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}